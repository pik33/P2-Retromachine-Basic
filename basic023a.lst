00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic023a.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 256000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 23
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getivar = 17
00000                 | 	fun_getuvar = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1023
00000                 | 	maxstack = 512
00000                 | 	maxfor = 128
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 7C 25 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 30 61 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 2F 5F 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 30 5F 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 60 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 5E 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 2F 5F 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 30 61 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 34 DC 02 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 50 DA 02 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 3C C4 06 00 | 	long	@objmem
007d0 0f3             | ptr__Audio093b_8_sc_spin2_dat__
007d0 0f3 50 C9 02 00 | 	long	@_Audio093b_8_sc_spin2_dat_
007d4 0f4             | ptr___system__dat__
007d4 0f4 30 CD 02 00 | 	long	@__system__dat_
007d8 0f5             | ptr__dat__
007d8 0f5 B4 53 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 70 D4 02 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 C4 67 02 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 74 8F 02 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 2C 8D 02 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 04 9F 02 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc EC 68 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     45 E4 05 F1 | 	add	objptr, #69
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     51 00 00 FF 
00818     F3 E5 05 F1 | 	add	objptr, ##41971
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     52 00 00 FF 
0082c     38 E4 85 F1 | 	sub	objptr, ##42040
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     78 52 B1 FD | 	call	#__system___waitms
0083c     52 00 00 FF 
00840     38 E4 05 F1 | 	add	objptr, ##42040
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     52 00 00 FF 
00854     38 E4 85 F1 | 	sub	objptr, ##42040
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     50 52 B1 FD | 	call	#__system___waitms
00864     52 00 00 FF 
00868     38 E4 05 F1 | 	add	objptr, ##42040
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     52 00 00 FF 
0087c     38 E4 85 F1 | 	sub	objptr, ##42040
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     28 52 B1 FD | 	call	#__system___waitms
0088c     52 00 00 FF 
00890     38 E4 05 F1 | 	add	objptr, ##42040
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     52 00 00 FF 
008a4     38 E4 85 F1 | 	sub	objptr, ##42040
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     51 00 00 FF 
008d4     B0 E5 05 F1 | 	add	objptr, ##41904
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     51 00 00 FF 
00914     B8 E5 85 F1 | 	sub	objptr, ##41912
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     38 48 B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     88 48 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     78 48 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     51 00 00 FF 
00980     C0 E5 05 F1 | 	add	objptr, ##41920
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     51 00 00 FF 
009ac     DC E5 85 F1 | 	sub	objptr, ##41948
009b0     DC 47 B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     51 00 00 FF 
009e0     C0 E5 05 F1 | 	add	objptr, ##41920
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     51 00 00 FF 
00a08     DC E5 85 F1 | 	sub	objptr, ##41948
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     20 4A 05 F6 | 	mov	COUNT_, #32
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     44 F0 07 F1 | 	add	ptra, ##580
00a2c     2D 00 00 FF 
00a30     E0 E5 05 F1 | 	add	objptr, ##23520
00a34     F2 1E 02 FB | 	rdlong	local01, objptr
00a38     04 E4 05 F1 | 	add	objptr, #4
00a3c     F2 1E 62 FC | 	wrlong	local01, objptr
00a40     04 E4 05 F1 | 	add	objptr, #4
00a44     FF FF FF FF 
00a48     F2 FE 6B FC | 	wrlong	##-1, objptr
00a4c     00 20 06 F6 | 	mov	local02, #0
00a50     13 00 00 FF 
00a54     58 E4 05 F1 | 	add	objptr, ##9816
00a58     F2 00 68 FC | 	wrlong	#0, objptr
00a5c     41 00 00 FF 
00a60     40 E4 85 F1 | 	sub	objptr, ##33344
00a64     00 22 06 F6 | 	mov	local03, #0
00a68                 | LR__0020
00a68                 | ' 
00a68                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a68                 | ' 
00a68                 | ' fullline$=line$: cont=-1  : linenum=0 : lineptr=0 : err=0
00a68                 | ' 
00a68                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a68     00 24 06 F6 | 	mov	local04, #0
00a6c     20 4E 05 F1 | 	add	fp, #32
00a70     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a74                 | LR__0021
00a74     12 27 02 F6 | 	mov	local05, local04
00a78     02 26 66 F0 | 	shl	local05, #2
00a7c     A7 26 02 F1 | 	add	local05, fp
00a80     13 01 68 FC | 	wrlong	#0, local05
00a84     01 24 06 F1 | 	add	local04, #1
00a88     7E 24 56 F2 | 	cmps	local04, #126 wc
00a8c     E4 FF 9F CD |  if_b	jmp	#LR__0021
00a90                 | LR__0022
00a90     20 4E 85 F1 | 	sub	fp, #32
00a94                 | ' for i=0 to 125: lparts(i).part$="": next i
00a94     00 24 06 F6 | 	mov	local04, #0
00a98     2B 00 00 FF 
00a9c     D0 E5 05 F1 | 	add	objptr, ##22480
00aa0     97 12 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00aa4                 | LR__0023
00aa4     12 29 02 F6 | 	mov	local06, local04
00aa8     03 28 66 F0 | 	shl	local06, #3
00aac     F2 28 02 F1 | 	add	local06, objptr
00ab0     25 01 00 FF 
00ab4     1A 2A 06 F6 | 	mov	local07, ##@LR__4097
00ab8     14 2B 62 FC | 	wrlong	local07, local06
00abc     01 24 06 F1 | 	add	local04, #1
00ac0     7E 24 56 F2 | 	cmps	local04, #126 wc
00ac4     DC FF 9F CD |  if_b	jmp	#LR__0023
00ac8                 | LR__0024
00ac8     02 00 00 FF 
00acc     10 E4 05 F1 | 	add	objptr, ##1040
00ad0     F2 12 02 FB | 	rdlong	arg01, objptr
00ad4     2D 00 00 FF 
00ad8     E0 E5 85 F1 | 	sub	objptr, ##23520
00adc     24 71 B1 FD | 	call	#__system__RTrim_S
00ae0     FD 12 02 F6 | 	mov	arg01, result1
00ae4     5C 70 B1 FD | 	call	#__system__LTrim_S
00ae8     2D 00 00 FF 
00aec     E0 E5 05 F1 | 	add	objptr, ##23520
00af0     F2 FA 61 FC | 	wrlong	result1, objptr
00af4     25 01 00 FF 
00af8     1B 1E 06 F6 | 	mov	local01, ##@LR__4098
00afc     24 00 00 FF 
00b00     7C E4 05 F1 | 	add	objptr, ##18556
00b04     F2 1E 62 FC | 	wrlong	local01, objptr
00b08     24 00 00 FF 
00b0c     7C E4 85 F1 | 	sub	objptr, ##18556
00b10     F2 12 02 FB | 	rdlong	arg01, objptr
00b14     2D 00 00 FF 
00b18     E0 E5 85 F1 | 	sub	objptr, ##23520
00b1c     09 2D 02 F6 | 	mov	local08, arg01
00b20     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b24                 | LR__0025
00b24     16 FB C9 FA | 	rdbyte	result1, local08 wz
00b28     01 2C 06 51 |  if_ne	add	local08, #1
00b2c     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b30                 | LR__0026
00b30     09 2D 82 F1 | 	sub	local08, arg01
00b34     16 FB 09 F6 | 	mov	result1, local08 wz
00b38     52 00 00 FF 
00b3c     60 E4 05 F1 | 	add	objptr, ##42080
00b40     F2 FA 61 FC | 	wrlong	result1, objptr
00b44                 | ' if l=0 then goto 101
00b44     52 00 00 FF 
00b48     60 E4 85 F1 | 	sub	objptr, ##42080
00b4c     34 1C 90 AD |  if_e	jmp	#LR__0119
00b50     2D 00 00 FF 
00b54     E0 E5 05 F1 | 	add	objptr, ##23520
00b58     F2 14 02 FB | 	rdlong	arg02, objptr
00b5c     2D 00 00 FF 
00b60     E0 E5 85 F1 | 	sub	objptr, ##23520
00b64     25 01 00 FF 
00b68     1C 16 06 F6 | 	mov	arg03, ##@LR__4099
00b6c     01 12 06 F6 | 	mov	arg01, #1
00b70     48 71 B1 FD | 	call	#__system__Instr
00b74     52 00 00 FF 
00b78     64 E4 05 F1 | 	add	objptr, ##42084
00b7c     F2 FA 61 FC | 	wrlong	result1, objptr
00b80     FD 1E 02 F6 | 	mov	local01, result1
00b84     52 00 00 FF 
00b88     64 E4 85 F1 | 	sub	objptr, ##42084
00b8c     01 1E 56 F2 | 	cmps	local01, #1 wc
00b90     0C 01 90 CD |  if_b	jmp	#LR__0031
00b94     2D 00 00 FF 
00b98     E0 E5 05 F1 | 	add	objptr, ##23520
00b9c     F2 12 02 FB | 	rdlong	arg01, objptr
00ba0     2D 00 00 FF 
00ba4     E0 E5 85 F1 | 	sub	objptr, ##23520
00ba8     09 2D 02 F6 | 	mov	local08, arg01
00bac     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00bb0                 | LR__0027
00bb0     16 FB C9 FA | 	rdbyte	result1, local08 wz
00bb4     01 2C 06 51 |  if_ne	add	local08, #1
00bb8     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00bbc                 | LR__0028
00bbc     09 2D 82 F1 | 	sub	local08, arg01
00bc0     16 29 02 F6 | 	mov	local06, local08
00bc4     52 00 00 FF 
00bc8     64 E4 05 F1 | 	add	objptr, ##42084
00bcc     F2 2A 02 FB | 	rdlong	local07, objptr
00bd0     52 00 00 FF 
00bd4     64 E4 85 F1 | 	sub	objptr, ##42084
00bd8     14 2B 52 F2 | 	cmps	local07, local06 wc
00bdc     C0 00 90 3D |  if_ae	jmp	#LR__0031
00be0     2D 00 00 FF 
00be4     E0 E5 05 F1 | 	add	objptr, ##23520
00be8     F2 12 02 FB | 	rdlong	arg01, objptr
00bec     09 1F 02 F6 | 	mov	local01, arg01
00bf0     2D 00 00 FF 
00bf4     E0 E5 85 F1 | 	sub	objptr, ##23520
00bf8     09 2D 02 F6 | 	mov	local08, arg01
00bfc     97 06 48 FB | 	callpa	#(@LR__0030-@LR__0029)>>2,fcache_load_ptr_
00c00                 | LR__0029
00c00     16 FB C9 FA | 	rdbyte	result1, local08 wz
00c04     01 2C 06 51 |  if_ne	add	local08, #1
00c08     F4 FF 9F 5D |  if_ne	jmp	#LR__0029
00c0c                 | LR__0030
00c0c     09 2D 82 F1 | 	sub	local08, arg01
00c10     16 15 02 F6 | 	mov	arg02, local08
00c14     52 00 00 FF 
00c18     64 E4 05 F1 | 	add	objptr, ##42084
00c1c     F2 2E 02 FB | 	rdlong	local09, objptr
00c20     52 00 00 FF 
00c24     64 E4 85 F1 | 	sub	objptr, ##42084
00c28     17 15 82 F1 | 	sub	arg02, local09
00c2c     0F 13 02 F6 | 	mov	arg01, local01
00c30     24 6C B1 FD | 	call	#__system__Right_S
00c34     FD 12 02 F6 | 	mov	arg01, result1
00c38     C8 6F B1 FD | 	call	#__system__RTrim_S
00c3c     FD 12 02 F6 | 	mov	arg01, result1
00c40     00 6F B1 FD | 	call	#__system__LTrim_S
00c44     52 00 00 FF 
00c48     68 E4 05 F1 | 	add	objptr, ##42088
00c4c     F2 FA 61 FC | 	wrlong	result1, objptr
00c50     24 00 00 FF 
00c54     88 E4 85 F1 | 	sub	objptr, ##18568
00c58     F2 12 02 FB | 	rdlong	arg01, objptr
00c5c     24 00 00 FF 
00c60     84 E4 05 F1 | 	add	objptr, ##18564
00c64     F2 14 02 FB | 	rdlong	arg02, objptr
00c68     52 00 00 FF 
00c6c     64 E4 85 F1 | 	sub	objptr, ##42084
00c70     01 14 86 F1 | 	sub	arg02, #1
00c74     58 6B B1 FD | 	call	#__system__Left_S
00c78     FD 12 02 F6 | 	mov	arg01, result1
00c7c     84 6F B1 FD | 	call	#__system__RTrim_S
00c80     FD 12 02 F6 | 	mov	arg01, result1
00c84     BC 6E B1 FD | 	call	#__system__LTrim_S
00c88     2D 00 00 FF 
00c8c     E0 E5 05 F1 | 	add	objptr, ##23520
00c90     F2 FA 61 FC | 	wrlong	result1, objptr
00c94     2D 00 00 FF 
00c98     E0 E5 85 F1 | 	sub	objptr, ##23520
00c9c     1C 00 90 FD | 	jmp	#LR__0032
00ca0                 | LR__0031
00ca0     25 01 00 FF 
00ca4     1E 1E 06 F6 | 	mov	local01, ##@LR__4100
00ca8     52 00 00 FF 
00cac     68 E4 05 F1 | 	add	objptr, ##42088
00cb0     F2 1E 62 FC | 	wrlong	local01, objptr
00cb4     52 00 00 FF 
00cb8     68 E4 85 F1 | 	sub	objptr, ##42088
00cbc                 | LR__0032
00cbc                 | ' 
00cbc                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00cbc     2D 00 00 FF 
00cc0     E8 E5 05 F1 | 	add	objptr, ##23528
00cc4     F2 1E 02 FB | 	rdlong	local01, objptr
00cc8     2D 00 00 FF 
00ccc     E8 E5 85 F1 | 	sub	objptr, ##23528
00cd0     FF FF 7F FF 
00cd4     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00cd8     3C 00 90 5D |  if_ne	jmp	#LR__0033
00cdc     52 00 00 FF 
00ce0     68 E4 05 F1 | 	add	objptr, ##42088
00ce4     F2 12 02 FB | 	rdlong	arg01, objptr
00ce8     52 00 00 FF 
00cec     68 E4 85 F1 | 	sub	objptr, ##42088
00cf0     25 01 00 FF 
00cf4     1F 14 06 F6 | 	mov	arg02, ##@LR__4101
00cf8     EC 4A B1 FD | 	call	#__system___string_cmp
00cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
00d00     2D 00 00 5F 
00d04     E8 E5 05 51 |  if_ne	add	objptr, ##23528
00d08     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00d0c     2D 00 00 5F 
00d10     E8 E5 85 51 |  if_ne	sub	objptr, ##23528
00d14     08 01 90 5D |  if_ne	jmp	#LR__0037
00d18                 | LR__0033
00d18                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00d18     2D 00 00 FF 
00d1c     E8 E5 05 F1 | 	add	objptr, ##23528
00d20     F2 1E 02 FB | 	rdlong	local01, objptr
00d24     2D 00 00 FF 
00d28     E8 E5 85 F1 | 	sub	objptr, ##23528
00d2c     FF FF 7F FF 
00d30     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00d34     3C 00 90 5D |  if_ne	jmp	#LR__0034
00d38     52 00 00 FF 
00d3c     68 E4 05 F1 | 	add	objptr, ##42088
00d40     F2 12 02 FB | 	rdlong	arg01, objptr
00d44     52 00 00 FF 
00d48     68 E4 85 F1 | 	sub	objptr, ##42088
00d4c     25 01 00 FF 
00d50     20 14 06 F6 | 	mov	arg02, ##@LR__4102
00d54     90 4A B1 FD | 	call	#__system___string_cmp
00d58     00 FA 0D F2 | 	cmp	result1, #0 wz
00d5c     2D 00 00 AF 
00d60     E8 E5 05 A1 |  if_e	add	objptr, ##23528
00d64     F2 06 68 AC |  if_e	wrlong	#3, objptr
00d68     2D 00 00 AF 
00d6c     E8 E5 85 A1 |  if_e	sub	objptr, ##23528
00d70     AC 00 90 AD |  if_e	jmp	#LR__0037
00d74                 | LR__0034
00d74                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00d74     2D 00 00 FF 
00d78     E8 E5 05 F1 | 	add	objptr, ##23528
00d7c     F2 1E 02 FB | 	rdlong	local01, objptr
00d80     2D 00 00 FF 
00d84     E8 E5 85 F1 | 	sub	objptr, ##23528
00d88     04 1E 0E F2 | 	cmp	local01, #4 wz
00d8c     3C 00 90 5D |  if_ne	jmp	#LR__0035
00d90     52 00 00 FF 
00d94     68 E4 05 F1 | 	add	objptr, ##42088
00d98     F2 12 02 FB | 	rdlong	arg01, objptr
00d9c     52 00 00 FF 
00da0     68 E4 85 F1 | 	sub	objptr, ##42088
00da4     25 01 00 FF 
00da8     21 14 06 F6 | 	mov	arg02, ##@LR__4103
00dac     38 4A B1 FD | 	call	#__system___string_cmp
00db0     00 FA 0D F2 | 	cmp	result1, #0 wz
00db4     2D 00 00 5F 
00db8     E8 E5 05 51 |  if_ne	add	objptr, ##23528
00dbc     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00dc0     2D 00 00 5F 
00dc4     E8 E5 85 51 |  if_ne	sub	objptr, ##23528
00dc8     54 00 90 5D |  if_ne	jmp	#LR__0037
00dcc                 | LR__0035
00dcc                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00dcc     2D 00 00 FF 
00dd0     E8 E5 05 F1 | 	add	objptr, ##23528
00dd4     F2 1E 02 FB | 	rdlong	local01, objptr
00dd8     2D 00 00 FF 
00ddc     E8 E5 85 F1 | 	sub	objptr, ##23528
00de0     04 1E 0E F2 | 	cmp	local01, #4 wz
00de4     38 00 90 5D |  if_ne	jmp	#LR__0036
00de8     52 00 00 FF 
00dec     68 E4 05 F1 | 	add	objptr, ##42088
00df0     F2 12 02 FB | 	rdlong	arg01, objptr
00df4     52 00 00 FF 
00df8     68 E4 85 F1 | 	sub	objptr, ##42088
00dfc     25 01 00 FF 
00e00     22 14 06 F6 | 	mov	arg02, ##@LR__4104
00e04     E0 49 B1 FD | 	call	#__system___string_cmp
00e08     00 FA 0D F2 | 	cmp	result1, #0 wz
00e0c     2D 00 00 AF 
00e10     E8 E5 05 A1 |  if_e	add	objptr, ##23528
00e14     F2 04 68 AC |  if_e	wrlong	#2, objptr
00e18     2D 00 00 AF 
00e1c     E8 E5 85 A1 |  if_e	sub	objptr, ##23528
00e20                 | LR__0036
00e20                 | LR__0037
00e20     20 4E 05 F1 | 	add	fp, #32
00e24     A7 00 68 FC | 	wrlong	#0, fp
00e28     20 4E 85 F1 | 	sub	fp, #32
00e2c     00 24 06 F6 | 	mov	local04, #0
00e30     01 30 06 F6 | 	mov	local10, #1
00e34                 | ' 
00e34                 | ' ' 1b: find separators
00e34                 | ' 
00e34                 | ' 107
00e34                 | ' separators(0)=0
00e34                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00e34                 | LR__0038
00e34     01 24 06 F1 | 	add	local04, #1
00e38     2D 00 00 FF 
00e3c     E0 E5 05 F1 | 	add	objptr, ##23520
00e40     F2 12 02 FB | 	rdlong	arg01, objptr
00e44     2D 00 00 FF 
00e48     E0 E5 85 F1 | 	sub	objptr, ##23520
00e4c     12 15 02 F6 | 	mov	arg02, local04
00e50     01 16 06 F6 | 	mov	arg03, #1
00e54     90 6A B1 FD | 	call	#__system__Mid_S
00e58     52 00 00 FF 
00e5c     6C E4 05 F1 | 	add	objptr, ##42092
00e60     F2 FA 61 FC | 	wrlong	result1, objptr
00e64                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00e64     FD 12 02 F6 | 	mov	arg01, result1
00e68     52 00 00 FF 
00e6c     6C E4 85 F1 | 	sub	objptr, ##42092
00e70     1C 1C B0 FD | 	call	#_isseparator
00e74     00 FA 0D F2 | 	cmp	result1, #0 wz
00e78     1C 00 90 AD |  if_e	jmp	#LR__0039
00e7c     18 27 02 F6 | 	mov	local05, local10
00e80     02 26 66 F0 | 	shl	local05, #2
00e84     20 4E 05 F1 | 	add	fp, #32
00e88     A7 26 02 F1 | 	add	local05, fp
00e8c     13 25 62 FC | 	wrlong	local04, local05
00e90     01 30 06 F1 | 	add	local10, #1
00e94     20 4E 85 F1 | 	sub	fp, #32
00e98                 | LR__0039
00e98     52 00 00 FF 
00e9c     60 E4 05 F1 | 	add	objptr, ##42080
00ea0     F2 1E 02 FB | 	rdlong	local01, objptr
00ea4     52 00 00 FF 
00ea8     60 E4 85 F1 | 	sub	objptr, ##42080
00eac     0F 25 5A F2 | 	cmps	local04, local01 wcz
00eb0     80 FF 9F ED |  if_be	jmp	#LR__0038
00eb4     18 27 02 F6 | 	mov	local05, local10
00eb8     02 26 66 F0 | 	shl	local05, #2
00ebc     20 4E 05 F1 | 	add	fp, #32
00ec0     A7 26 02 F1 | 	add	local05, fp
00ec4     13 25 62 FC | 	wrlong	local04, local05
00ec8     00 32 06 F6 | 	mov	local11, #0
00ecc                 | ' for i=0 to j-1 
00ecc     00 24 06 F6 | 	mov	local04, #0
00ed0     18 35 02 F6 | 	mov	local12, local10
00ed4     20 4E 85 F1 | 	sub	fp, #32
00ed8                 | LR__0040
00ed8     1A 25 52 F2 | 	cmps	local04, local12 wc
00edc     88 01 90 3D |  if_ae	jmp	#LR__0044
00ee0     12 27 02 F6 | 	mov	local05, local04
00ee4     02 26 66 F0 | 	shl	local05, #2
00ee8     20 4E 05 F1 | 	add	fp, #32
00eec     A7 26 02 F1 | 	add	local05, fp
00ef0     13 2F 02 FB | 	rdlong	local09, local05
00ef4     52 00 00 FF 
00ef8     74 E4 05 F1 | 	add	objptr, ##42100
00efc     F2 2E 62 FC | 	wrlong	local09, objptr
00f00     12 27 02 F6 | 	mov	local05, local04
00f04     01 26 06 F1 | 	add	local05, #1
00f08     02 26 66 F0 | 	shl	local05, #2
00f0c     A7 28 02 F6 | 	mov	local06, fp
00f10     A7 26 02 F1 | 	add	local05, fp
00f14     13 1F 02 FB | 	rdlong	local01, local05
00f18     04 E4 05 F1 | 	add	objptr, #4
00f1c     F2 1E 62 FC | 	wrlong	local01, objptr
00f20                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
00f20     04 E4 85 F1 | 	sub	objptr, #4
00f24     F2 1E 02 FB | 	rdlong	local01, objptr
00f28     52 00 00 FF 
00f2c     74 E4 85 F1 | 	sub	objptr, ##42100
00f30     01 1E 56 F2 | 	cmps	local01, #1 wc
00f34     20 4E 85 F1 | 	sub	fp, #32
00f38     84 00 90 CD |  if_b	jmp	#LR__0042
00f3c     2D 00 00 FF 
00f40     E0 E5 05 F1 | 	add	objptr, ##23520
00f44     F2 12 02 FB | 	rdlong	arg01, objptr
00f48     24 00 00 FF 
00f4c     94 E4 05 F1 | 	add	objptr, ##18580
00f50     F2 14 02 FB | 	rdlong	arg02, objptr
00f54     52 00 00 FF 
00f58     74 E4 85 F1 | 	sub	objptr, ##42100
00f5c     01 16 06 F6 | 	mov	arg03, #1
00f60     84 69 B1 FD | 	call	#__system__Mid_S
00f64     52 00 00 FF 
00f68     7C E4 05 F1 | 	add	objptr, ##42108
00f6c     F2 FA 61 FC | 	wrlong	result1, objptr
00f70     52 00 00 FF 
00f74     7C E4 85 F1 | 	sub	objptr, ##42108
00f78     FD 12 02 F6 | 	mov	arg01, result1
00f7c     25 01 00 FF 
00f80     23 14 06 F6 | 	mov	arg02, ##@LR__4105
00f84     60 48 B1 FD | 	call	#__system___string_cmp
00f88     00 FA 0D F2 | 	cmp	result1, #0 wz
00f8c     30 00 90 AD |  if_e	jmp	#LR__0041
00f90     19 29 02 F6 | 	mov	local06, local11
00f94     03 28 66 F0 | 	shl	local06, #3
00f98     2B 00 00 FF 
00f9c     D0 E5 05 F1 | 	add	objptr, ##22480
00fa0     F2 28 02 F1 | 	add	local06, objptr
00fa4     26 00 00 FF 
00fa8     AC E4 05 F1 | 	add	objptr, ##19628
00fac     F2 2A 02 FB | 	rdlong	local07, objptr
00fb0     52 00 00 FF 
00fb4     7C E4 85 F1 | 	sub	objptr, ##42108
00fb8     14 2B 62 FC | 	wrlong	local07, local06
00fbc     01 32 06 F1 | 	add	local11, #1
00fc0                 | LR__0041
00fc0                 | LR__0042
00fc0     2D 00 00 FF 
00fc4     E0 E5 05 F1 | 	add	objptr, ##23520
00fc8     F2 12 02 FB | 	rdlong	arg01, objptr
00fcc     24 00 00 FF 
00fd0     94 E4 05 F1 | 	add	objptr, ##18580
00fd4     F2 14 02 FB | 	rdlong	arg02, objptr
00fd8     01 14 06 F1 | 	add	arg02, #1
00fdc     04 E4 05 F1 | 	add	objptr, #4
00fe0     F2 16 02 FB | 	rdlong	arg03, objptr
00fe4     04 E4 85 F1 | 	sub	objptr, #4
00fe8     F2 36 02 FB | 	rdlong	local13, objptr
00fec     52 00 00 FF 
00ff0     74 E4 85 F1 | 	sub	objptr, ##42100
00ff4     1B 2F 02 F6 | 	mov	local09, local13
00ff8     17 17 82 F1 | 	sub	arg03, local09
00ffc     01 16 86 F1 | 	sub	arg03, #1
01000     E4 68 B1 FD | 	call	#__system__Mid_S
01004     52 00 00 FF 
01008     7C E4 05 F1 | 	add	objptr, ##42108
0100c     F2 FA 61 FC | 	wrlong	result1, objptr
01010     52 00 00 FF 
01014     7C E4 85 F1 | 	sub	objptr, ##42108
01018     FD 12 02 F6 | 	mov	arg01, result1
0101c     25 01 00 FF 
01020     24 14 06 F6 | 	mov	arg02, ##@LR__4106
01024     C0 47 B1 FD | 	call	#__system___string_cmp
01028     00 FA 0D F2 | 	cmp	result1, #0 wz
0102c     30 00 90 AD |  if_e	jmp	#LR__0043
01030     19 29 02 F6 | 	mov	local06, local11
01034     03 28 66 F0 | 	shl	local06, #3
01038     2B 00 00 FF 
0103c     D0 E5 05 F1 | 	add	objptr, ##22480
01040     F2 28 02 F1 | 	add	local06, objptr
01044     26 00 00 FF 
01048     AC E4 05 F1 | 	add	objptr, ##19628
0104c     F2 2A 02 FB | 	rdlong	local07, objptr
01050     52 00 00 FF 
01054     7C E4 85 F1 | 	sub	objptr, ##42108
01058     14 2B 62 FC | 	wrlong	local07, local06
0105c     01 32 06 F1 | 	add	local11, #1
01060                 | LR__0043
01060     01 24 06 F1 | 	add	local04, #1
01064     70 FE 9F FD | 	jmp	#LR__0040
01068                 | LR__0044
01068     00 24 06 F6 | 	mov	local04, #0
0106c                 | ' 
0106c                 | ' ' 1d : find strings
0106c                 | ' 
0106c                 | ' i=0
0106c                 | ' do
0106c                 | LR__0045
0106c                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
0106c     12 15 02 F6 | 	mov	arg02, local04
01070     03 14 66 F0 | 	shl	arg02, #3
01074     2B 00 00 FF 
01078     D0 E5 05 F1 | 	add	objptr, ##22480
0107c     F2 14 02 F1 | 	add	arg02, objptr
01080     0A 13 02 FB | 	rdlong	arg01, arg02
01084     25 01 00 FF 
01088     25 14 06 F6 | 	mov	arg02, ##@LR__4107
0108c     2B 00 00 FF 
01090     D0 E5 85 F1 | 	sub	objptr, ##22480
01094     50 47 B1 FD | 	call	#__system___string_cmp
01098     00 FA 0D F2 | 	cmp	result1, #0 wz
0109c     01 24 06 51 |  if_ne	add	local04, #1
010a0     50 01 90 5D |  if_ne	jmp	#LR__0050
010a4     12 39 02 F6 | 	mov	local14, local04
010a8                 | LR__0046
010a8     12 29 02 F6 | 	mov	local06, local04
010ac     01 28 06 F1 | 	add	local06, #1
010b0     03 28 66 F0 | 	shl	local06, #3
010b4     2B 00 00 FF 
010b8     D0 E5 05 F1 | 	add	objptr, ##22480
010bc     F2 28 02 F1 | 	add	local06, objptr
010c0     14 37 02 FB | 	rdlong	local13, local06
010c4     26 00 00 FF 
010c8     AC E4 05 F1 | 	add	objptr, ##19628
010cc     F2 36 62 FC | 	wrlong	local13, objptr
010d0     1C 29 02 F6 | 	mov	local06, local14
010d4     03 28 66 F0 | 	shl	local06, #3
010d8     26 00 00 FF 
010dc     AC E4 85 F1 | 	sub	objptr, ##19628
010e0     F2 28 02 F1 | 	add	local06, objptr
010e4     1C 31 02 F6 | 	mov	local10, local14
010e8     03 30 66 F0 | 	shl	local10, #3
010ec     F2 30 02 F1 | 	add	local10, objptr
010f0     18 13 02 FB | 	rdlong	arg01, local10
010f4     2B 00 00 FF 
010f8     D0 E5 85 F1 | 	sub	objptr, ##22480
010fc     1B 2F 02 F6 | 	mov	local09, local13
01100     17 15 02 F6 | 	mov	arg02, local09
01104     14 47 B1 FD | 	call	#__system___string_concat
01108     14 FB 61 FC | 	wrlong	result1, local06
0110c     12 31 02 F6 | 	mov	local10, local04
01110     01 30 06 F1 | 	add	local10, #1
01114     19 3B 02 F6 | 	mov	local15, local11
01118     01 3A 06 F1 | 	add	local15, #1
0111c     97 3C 48 FB | 	callpa	#(@LR__0048-@LR__0047)>>2,fcache_load_ptr_
01120                 | LR__0047
01120     1D 31 52 F2 | 	cmps	local10, local15 wc
01124     70 00 90 3D |  if_ae	jmp	#LR__0049
01128     18 37 02 F6 | 	mov	local13, local10
0112c     01 36 06 F1 | 	add	local13, #1
01130     03 36 66 F0 | 	shl	local13, #3
01134     2B 00 00 FF 
01138     D0 E5 05 F1 | 	add	objptr, ##22480
0113c     F2 36 02 F1 | 	add	local13, objptr
01140     1B 1F 02 FB | 	rdlong	local01, local13
01144     18 2B 02 F6 | 	mov	local07, local10
01148     01 2A 06 F1 | 	add	local07, #1
0114c     03 2A 66 F0 | 	shl	local07, #3
01150     F2 2A 02 F1 | 	add	local07, objptr
01154     04 2A 06 F1 | 	add	local07, #4
01158     15 27 02 FB | 	rdlong	local05, local07
0115c     18 2B 02 F6 | 	mov	local07, local10
01160     03 2A 66 F0 | 	shl	local07, #3
01164     F2 2E 02 F6 | 	mov	local09, objptr
01168     F2 2A 02 F1 | 	add	local07, objptr
0116c     15 1F 62 FC | 	wrlong	local01, local07
01170     18 37 02 F6 | 	mov	local13, local10
01174     1B 2B 02 F6 | 	mov	local07, local13
01178     03 2A 66 F0 | 	shl	local07, #3
0117c     F2 2A 02 F1 | 	add	local07, objptr
01180     04 2A 06 F1 | 	add	local07, #4
01184     15 27 62 FC | 	wrlong	local05, local07
01188     01 30 06 F1 | 	add	local10, #1
0118c     2B 00 00 FF 
01190     D0 E5 85 F1 | 	sub	objptr, ##22480
01194     88 FF 9F FD | 	jmp	#LR__0047
01198                 | LR__0048
01198                 | LR__0049
01198     01 32 86 F1 | 	sub	local11, #1
0119c     52 00 00 FF 
011a0     7C E4 05 F1 | 	add	objptr, ##42108
011a4     F2 12 02 FB | 	rdlong	arg01, objptr
011a8     52 00 00 FF 
011ac     7C E4 85 F1 | 	sub	objptr, ##42108
011b0     25 01 00 FF 
011b4     27 14 06 F6 | 	mov	arg02, ##@LR__4108
011b8     2C 46 B1 FD | 	call	#__system___string_cmp
011bc     00 FA 0D F2 | 	cmp	result1, #0 wz
011c0     19 25 52 52 |  if_ne	cmps	local04, local11 wc
011c4     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0046
011c8                 | '   if p$<>"""" then k+=1:i+=1
011c8     52 00 00 FF 
011cc     7C E4 05 F1 | 	add	objptr, ##42108
011d0     F2 12 02 FB | 	rdlong	arg01, objptr
011d4     52 00 00 FF 
011d8     7C E4 85 F1 | 	sub	objptr, ##42108
011dc     25 01 00 FF 
011e0     29 14 06 F6 | 	mov	arg02, ##@LR__4109
011e4     00 46 B1 FD | 	call	#__system___string_cmp
011e8     00 FA 0D F2 | 	cmp	result1, #0 wz
011ec     01 32 06 51 |  if_ne	add	local11, #1
011f0     01 24 06 51 |  if_ne	add	local04, #1
011f4                 | LR__0050
011f4     19 25 52 F2 | 	cmps	local04, local11 wc
011f8     70 FE 9F CD |  if_b	jmp	#LR__0045
011fc     00 24 06 F6 | 	mov	local04, #0
01200                 | ' 
01200                 | ' ' 1e : concatenate strings if "" detected between
01200                 | '  
01200                 | ' i=0 : do
01200                 | LR__0051
01200                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
01200     12 3D 02 F6 | 	mov	local16, local04
01204     03 3C 66 F0 | 	shl	local16, #3
01208     2B 00 00 FF 
0120c     D0 E5 05 F1 | 	add	objptr, ##22480
01210     F2 3C 02 F1 | 	add	local16, objptr
01214     1E 13 02 FB | 	rdlong	arg01, local16
01218     01 14 06 F6 | 	mov	arg02, #1
0121c     2B 00 00 FF 
01220     D0 E5 85 F1 | 	sub	objptr, ##22480
01224     30 66 B1 FD | 	call	#__system__Right_S
01228     FD 12 02 F6 | 	mov	arg01, result1
0122c     25 01 00 FF 
01230     2B 14 06 F6 | 	mov	arg02, ##@LR__4110
01234     B0 45 B1 FD | 	call	#__system___string_cmp
01238     00 FA 0D F2 | 	cmp	result1, #0 wz
0123c     78 01 90 5D |  if_ne	jmp	#LR__0057
01240     12 2B 02 F6 | 	mov	local07, local04
01244     01 2A 06 F1 | 	add	local07, #1
01248     03 2A 66 F0 | 	shl	local07, #3
0124c     2B 00 00 FF 
01250     D0 E5 05 F1 | 	add	objptr, ##22480
01254     F2 2E 02 F6 | 	mov	local09, objptr
01258     F2 2A 02 F1 | 	add	local07, objptr
0125c     15 13 02 FB | 	rdlong	arg01, local07
01260     01 14 06 F6 | 	mov	arg02, #1
01264     2B 00 00 FF 
01268     D0 E5 85 F1 | 	sub	objptr, ##22480
0126c     60 65 B1 FD | 	call	#__system__Left_S
01270     FD 12 02 F6 | 	mov	arg01, result1
01274     25 01 00 FF 
01278     2D 14 06 F6 | 	mov	arg02, ##@LR__4111
0127c     68 45 B1 FD | 	call	#__system___string_cmp
01280     00 FA 0D F2 | 	cmp	result1, #0 wz
01284     30 01 90 5D |  if_ne	jmp	#LR__0057
01288     12 29 02 F6 | 	mov	local06, local04
0128c     03 28 66 F0 | 	shl	local06, #3
01290     2B 00 00 FF 
01294     D0 E5 05 F1 | 	add	objptr, ##22480
01298     F2 28 02 F1 | 	add	local06, objptr
0129c     12 37 02 F6 | 	mov	local13, local04
012a0     03 36 66 F0 | 	shl	local13, #3
012a4     F2 36 02 F1 | 	add	local13, objptr
012a8     1B 2B 02 FB | 	rdlong	local07, local13
012ac     12 37 02 F6 | 	mov	local13, local04
012b0     01 36 06 F1 | 	add	local13, #1
012b4     03 36 66 F0 | 	shl	local13, #3
012b8     F2 36 02 F1 | 	add	local13, objptr
012bc     1B 2F 02 FB | 	rdlong	local09, local13
012c0     12 3F 02 F6 | 	mov	local17, local04
012c4     01 3E 06 F1 | 	add	local17, #1
012c8     1F 41 02 F6 | 	mov	local18, local17
012cc     03 40 66 F0 | 	shl	local18, #3
012d0     F2 42 02 F6 | 	mov	local19, objptr
012d4     F2 40 02 F1 | 	add	local18, objptr
012d8     20 13 02 FB | 	rdlong	arg01, local18
012dc     2B 00 00 FF 
012e0     D0 E5 85 F1 | 	sub	objptr, ##22480
012e4     09 2D 02 F6 | 	mov	local08, arg01
012e8     97 06 48 FB | 	callpa	#(@LR__0053-@LR__0052)>>2,fcache_load_ptr_
012ec                 | LR__0052
012ec     16 FB C9 FA | 	rdbyte	result1, local08 wz
012f0     01 2C 06 51 |  if_ne	add	local08, #1
012f4     F4 FF 9F 5D |  if_ne	jmp	#LR__0052
012f8                 | LR__0053
012f8     09 2D 82 F1 | 	sub	local08, arg01
012fc     16 37 02 F6 | 	mov	local13, local08
01300     01 36 86 F1 | 	sub	local13, #1
01304     17 13 02 F6 | 	mov	arg01, local09
01308     1B 15 02 F6 | 	mov	arg02, local13
0130c     48 65 B1 FD | 	call	#__system__Right_S
01310     FD 2E 02 F6 | 	mov	local09, result1
01314     15 13 02 F6 | 	mov	arg01, local07
01318     17 15 02 F6 | 	mov	arg02, local09
0131c     FC 44 B1 FD | 	call	#__system___string_concat
01320     14 FB 61 FC | 	wrlong	result1, local06
01324                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
01324     12 31 02 F6 | 	mov	local10, local04
01328     01 30 06 F1 | 	add	local10, #1
0132c     19 45 02 F6 | 	mov	local20, local11
01330     01 44 06 F1 | 	add	local20, #1
01334     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
01338                 | LR__0054
01338     22 31 52 F2 | 	cmps	local10, local20 wc
0133c     70 00 90 3D |  if_ae	jmp	#LR__0056
01340     18 3D 02 F6 | 	mov	local16, local10
01344     01 3C 06 F1 | 	add	local16, #1
01348     03 3C 66 F0 | 	shl	local16, #3
0134c     2B 00 00 FF 
01350     D0 E5 05 F1 | 	add	objptr, ##22480
01354     F2 3C 02 F1 | 	add	local16, objptr
01358     1E 1F 02 FB | 	rdlong	local01, local16
0135c     18 2B 02 F6 | 	mov	local07, local10
01360     01 2A 06 F1 | 	add	local07, #1
01364     03 2A 66 F0 | 	shl	local07, #3
01368     F2 2A 02 F1 | 	add	local07, objptr
0136c     04 2A 06 F1 | 	add	local07, #4
01370     15 27 02 FB | 	rdlong	local05, local07
01374     18 2B 02 F6 | 	mov	local07, local10
01378     03 2A 66 F0 | 	shl	local07, #3
0137c     F2 2E 02 F6 | 	mov	local09, objptr
01380     F2 2A 02 F1 | 	add	local07, objptr
01384     15 1F 62 FC | 	wrlong	local01, local07
01388     18 37 02 F6 | 	mov	local13, local10
0138c     1B 2B 02 F6 | 	mov	local07, local13
01390     03 2A 66 F0 | 	shl	local07, #3
01394     F2 2A 02 F1 | 	add	local07, objptr
01398     04 2A 06 F1 | 	add	local07, #4
0139c     15 27 62 FC | 	wrlong	local05, local07
013a0     01 30 06 F1 | 	add	local10, #1
013a4     2B 00 00 FF 
013a8     D0 E5 85 F1 | 	sub	objptr, ##22480
013ac     88 FF 9F FD | 	jmp	#LR__0054
013b0                 | LR__0055
013b0                 | LR__0056
013b0     01 24 86 F1 | 	sub	local04, #1
013b4     01 32 86 F1 | 	sub	local11, #1
013b8                 | LR__0057
013b8     01 24 06 F1 | 	add	local04, #1
013bc     19 25 52 F2 | 	cmps	local04, local11 wc
013c0     3C FE 9F CD |  if_b	jmp	#LR__0051
013c4     00 24 06 F6 | 	mov	local04, #0
013c8                 | '  
013c8                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
013c8                 | '  
013c8                 | ' i=0 : do
013c8                 | LR__0058
013c8     12 29 02 F6 | 	mov	local06, local04
013cc     03 28 66 F0 | 	shl	local06, #3
013d0     2B 00 00 FF 
013d4     D0 E5 05 F1 | 	add	objptr, ##22480
013d8     F2 28 02 F1 | 	add	local06, objptr
013dc     14 2B 02 FB | 	rdlong	local07, local06
013e0     26 00 00 FF 
013e4     B4 E4 05 F1 | 	add	objptr, ##19636
013e8     F2 2A 62 FC | 	wrlong	local07, objptr
013ec     12 29 02 F6 | 	mov	local06, local04
013f0     01 28 06 F1 | 	add	local06, #1
013f4     03 28 66 F0 | 	shl	local06, #3
013f8     26 00 00 FF 
013fc     B4 E4 85 F1 | 	sub	objptr, ##19636
01400     F2 28 02 F1 | 	add	local06, objptr
01404     14 2B 02 FB | 	rdlong	local07, local06
01408     26 00 00 FF 
0140c     B8 E4 05 F1 | 	add	objptr, ##19640
01410     F2 2A 62 FC | 	wrlong	local07, objptr
01414                 | '   if ((s1$=">" orelse s1$=">" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
01414     04 E4 85 F1 | 	sub	objptr, #4
01418     F2 12 02 FB | 	rdlong	arg01, objptr
0141c     52 00 00 FF 
01420     84 E4 85 F1 | 	sub	objptr, ##42116
01424     25 01 00 FF 
01428     2F 14 06 F6 | 	mov	arg02, ##@LR__4112
0142c     B8 43 B1 FD | 	call	#__system___string_cmp
01430     00 FA 0D F2 | 	cmp	result1, #0 wz
01434     04 01 90 AD |  if_e	jmp	#LR__0059
01438     52 00 00 FF 
0143c     84 E4 05 F1 | 	add	objptr, ##42116
01440     F2 12 02 FB | 	rdlong	arg01, objptr
01444     52 00 00 FF 
01448     84 E4 85 F1 | 	sub	objptr, ##42116
0144c     25 01 00 FF 
01450     31 14 06 F6 | 	mov	arg02, ##@LR__4113
01454     90 43 B1 FD | 	call	#__system___string_cmp
01458     FD 26 0A F6 | 	mov	local05, result1 wz
0145c     DC 00 90 AD |  if_e	jmp	#LR__0059
01460     52 00 00 FF 
01464     84 E4 05 F1 | 	add	objptr, ##42116
01468     F2 12 02 FB | 	rdlong	arg01, objptr
0146c     52 00 00 FF 
01470     84 E4 85 F1 | 	sub	objptr, ##42116
01474     25 01 00 FF 
01478     33 14 06 F6 | 	mov	arg02, ##@LR__4114
0147c     68 43 B1 FD | 	call	#__system___string_cmp
01480     00 FA 0D F2 | 	cmp	result1, #0 wz
01484     B4 00 90 AD |  if_e	jmp	#LR__0059
01488     52 00 00 FF 
0148c     84 E4 05 F1 | 	add	objptr, ##42116
01490     F2 12 02 FB | 	rdlong	arg01, objptr
01494     52 00 00 FF 
01498     84 E4 85 F1 | 	sub	objptr, ##42116
0149c     25 01 00 FF 
014a0     35 2E 06 F6 | 	mov	local09, ##@LR__4115
014a4     17 15 02 F6 | 	mov	arg02, local09
014a8     3C 43 B1 FD | 	call	#__system___string_cmp
014ac     00 FA 0D F2 | 	cmp	result1, #0 wz
014b0     88 00 90 AD |  if_e	jmp	#LR__0059
014b4     52 00 00 FF 
014b8     84 E4 05 F1 | 	add	objptr, ##42116
014bc     F2 12 02 FB | 	rdlong	arg01, objptr
014c0     52 00 00 FF 
014c4     84 E4 85 F1 | 	sub	objptr, ##42116
014c8     25 01 00 FF 
014cc     37 36 06 F6 | 	mov	local13, ##@LR__4116
014d0     1B 2F 02 F6 | 	mov	local09, local13
014d4     17 15 02 F6 | 	mov	arg02, local09
014d8     0C 43 B1 FD | 	call	#__system___string_cmp
014dc     00 FA 0D F2 | 	cmp	result1, #0 wz
014e0     58 00 90 AD |  if_e	jmp	#LR__0059
014e4     52 00 00 FF 
014e8     84 E4 05 F1 | 	add	objptr, ##42116
014ec     F2 12 02 FB | 	rdlong	arg01, objptr
014f0     52 00 00 FF 
014f4     84 E4 85 F1 | 	sub	objptr, ##42116
014f8     25 01 00 FF 
014fc     39 36 06 F6 | 	mov	local13, ##@LR__4117
01500     1B 15 02 F6 | 	mov	arg02, local13
01504     E0 42 B1 FD | 	call	#__system___string_cmp
01508     FD 2E 0A F6 | 	mov	local09, result1 wz
0150c     2C 00 90 AD |  if_e	jmp	#LR__0059
01510     52 00 00 FF 
01514     84 E4 05 F1 | 	add	objptr, ##42116
01518     F2 12 02 FB | 	rdlong	arg01, objptr
0151c     52 00 00 FF 
01520     84 E4 85 F1 | 	sub	objptr, ##42116
01524     25 01 00 FF 
01528     3B 46 06 F6 | 	mov	local21, ##@LR__4118
0152c     23 15 02 F6 | 	mov	arg02, local21
01530     B4 42 B1 FD | 	call	#__system___string_cmp
01534     FD 36 0A F6 | 	mov	local13, result1 wz
01538     30 00 90 5D |  if_ne	jmp	#LR__0060
0153c                 | LR__0059
0153c     52 00 00 FF 
01540     88 E4 05 F1 | 	add	objptr, ##42120
01544     F2 12 02 FB | 	rdlong	arg01, objptr
01548     52 00 00 FF 
0154c     88 E4 85 F1 | 	sub	objptr, ##42120
01550     25 01 00 FF 
01554     3D 48 06 F6 | 	mov	local22, ##@LR__4119
01558     24 4B 02 F6 | 	mov	local23, local22
0155c     25 15 02 F6 | 	mov	arg02, local23
01560     84 42 B1 FD | 	call	#__system___string_cmp
01564     FD 46 0A F6 | 	mov	local21, result1 wz
01568     18 01 90 AD |  if_e	jmp	#LR__0063
0156c                 | LR__0060
0156c     52 00 00 FF 
01570     84 E4 05 F1 | 	add	objptr, ##42116
01574     F2 12 02 FB | 	rdlong	arg01, objptr
01578     52 00 00 FF 
0157c     84 E4 85 F1 | 	sub	objptr, ##42116
01580     25 01 00 FF 
01584     3F 48 06 F6 | 	mov	local22, ##@LR__4120
01588     24 15 02 F6 | 	mov	arg02, local22
0158c     58 42 B1 FD | 	call	#__system___string_cmp
01590     FD 4A 0A F6 | 	mov	local23, result1 wz
01594     30 00 90 5D |  if_ne	jmp	#LR__0061
01598     52 00 00 FF 
0159c     88 E4 05 F1 | 	add	objptr, ##42120
015a0     F2 12 02 FB | 	rdlong	arg01, objptr
015a4     52 00 00 FF 
015a8     88 E4 85 F1 | 	sub	objptr, ##42120
015ac     25 01 00 FF 
015b0     41 40 06 F6 | 	mov	local18, ##@LR__4121
015b4     20 3F 02 F6 | 	mov	local17, local18
015b8     1F 15 02 F6 | 	mov	arg02, local17
015bc     28 42 B1 FD | 	call	#__system___string_cmp
015c0     FD 48 0A F6 | 	mov	local22, result1 wz
015c4     BC 00 90 AD |  if_e	jmp	#LR__0063
015c8                 | LR__0061
015c8     52 00 00 FF 
015cc     84 E4 05 F1 | 	add	objptr, ##42116
015d0     F2 12 02 FB | 	rdlong	arg01, objptr
015d4     52 00 00 FF 
015d8     84 E4 85 F1 | 	sub	objptr, ##42116
015dc     25 01 00 FF 
015e0     43 40 06 F6 | 	mov	local18, ##@LR__4122
015e4     20 15 02 F6 | 	mov	arg02, local18
015e8     FC 41 B1 FD | 	call	#__system___string_cmp
015ec     FD 3E 0A F6 | 	mov	local17, result1 wz
015f0     30 00 90 5D |  if_ne	jmp	#LR__0062
015f4     52 00 00 FF 
015f8     88 E4 05 F1 | 	add	objptr, ##42120
015fc     F2 12 02 FB | 	rdlong	arg01, objptr
01600     52 00 00 FF 
01604     88 E4 85 F1 | 	sub	objptr, ##42120
01608     25 01 00 FF 
0160c     45 4C 06 F6 | 	mov	local24, ##@LR__4123
01610     26 43 02 F6 | 	mov	local19, local24
01614     21 15 02 F6 | 	mov	arg02, local19
01618     CC 41 B1 FD | 	call	#__system___string_cmp
0161c     FD 40 0A F6 | 	mov	local18, result1 wz
01620     60 00 90 AD |  if_e	jmp	#LR__0063
01624                 | LR__0062
01624     52 00 00 FF 
01628     84 E4 05 F1 | 	add	objptr, ##42116
0162c     F2 12 02 FB | 	rdlong	arg01, objptr
01630     52 00 00 FF 
01634     84 E4 85 F1 | 	sub	objptr, ##42116
01638     25 01 00 FF 
0163c     47 4E 06 F6 | 	mov	local25, ##@LR__4124
01640     27 4D 02 F6 | 	mov	local24, local25
01644     26 15 02 F6 | 	mov	arg02, local24
01648     9C 41 B1 FD | 	call	#__system___string_cmp
0164c     FD 42 0A F6 | 	mov	local19, result1 wz
01650     10 01 90 5D |  if_ne	jmp	#LR__0067
01654     52 00 00 FF 
01658     88 E4 05 F1 | 	add	objptr, ##42120
0165c     F2 12 02 FB | 	rdlong	arg01, objptr
01660     52 00 00 FF 
01664     88 E4 85 F1 | 	sub	objptr, ##42120
01668     25 01 00 FF 
0166c     49 50 06 F6 | 	mov	local26, ##@LR__4125
01670     28 4F 02 F6 | 	mov	local25, local26
01674     27 15 02 F6 | 	mov	arg02, local25
01678     6C 41 B1 FD | 	call	#__system___string_cmp
0167c     FD 4C 0A F6 | 	mov	local24, result1 wz
01680     E0 00 90 5D |  if_ne	jmp	#LR__0067
01684                 | LR__0063
01684     12 29 02 F6 | 	mov	local06, local04
01688     03 28 66 F0 | 	shl	local06, #3
0168c     2B 00 00 FF 
01690     D0 E5 05 F1 | 	add	objptr, ##22480
01694     F2 28 02 F1 | 	add	local06, objptr
01698     26 00 00 FF 
0169c     B4 E4 05 F1 | 	add	objptr, ##19636
016a0     F2 12 02 FB | 	rdlong	arg01, objptr
016a4     04 E4 05 F1 | 	add	objptr, #4
016a8     F2 36 02 FB | 	rdlong	local13, objptr
016ac     52 00 00 FF 
016b0     88 E4 85 F1 | 	sub	objptr, ##42120
016b4     1B 2F 02 F6 | 	mov	local09, local13
016b8     17 15 02 F6 | 	mov	arg02, local09
016bc     5C 41 B1 FD | 	call	#__system___string_concat
016c0     14 FB 61 FC | 	wrlong	result1, local06
016c4                 | '     lparts(i).part$=s1$+s2$
016c4                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
016c4     12 31 02 F6 | 	mov	local10, local04
016c8     01 30 06 F1 | 	add	local10, #1
016cc     19 53 02 F6 | 	mov	local27, local11
016d0     01 52 06 F1 | 	add	local27, #1
016d4     97 42 48 FB | 	callpa	#(@LR__0065-@LR__0064)>>2,fcache_load_ptr_
016d8                 | LR__0064
016d8     29 31 52 F2 | 	cmps	local10, local27 wc
016dc     7C 00 90 3D |  if_ae	jmp	#LR__0066
016e0     18 3D 02 F6 | 	mov	local16, local10
016e4     01 3C 06 F1 | 	add	local16, #1
016e8     03 3C 66 F0 | 	shl	local16, #3
016ec     2B 00 00 FF 
016f0     D0 E5 05 F1 | 	add	objptr, ##22480
016f4     F2 3C 02 F1 | 	add	local16, objptr
016f8     1E 1F 02 FB | 	rdlong	local01, local16
016fc     18 2B 02 F6 | 	mov	local07, local10
01700     01 2A 06 F1 | 	add	local07, #1
01704     03 2A 66 F0 | 	shl	local07, #3
01708     F2 2A 02 F1 | 	add	local07, objptr
0170c     04 2A 06 F1 | 	add	local07, #4
01710     15 27 02 FB | 	rdlong	local05, local07
01714     18 2B 02 F6 | 	mov	local07, local10
01718     03 2A 66 F0 | 	shl	local07, #3
0171c     F2 2E 02 F6 | 	mov	local09, objptr
01720     F2 2A 02 F1 | 	add	local07, objptr
01724     15 1F 62 FC | 	wrlong	local01, local07
01728     18 37 02 F6 | 	mov	local13, local10
0172c     1B 47 02 F6 | 	mov	local21, local13
01730     23 4B 02 F6 | 	mov	local23, local21
01734     03 4A 66 F0 | 	shl	local23, #3
01738     F2 48 02 F6 | 	mov	local22, objptr
0173c     F2 4A 02 F1 | 	add	local23, objptr
01740     04 4A 06 F1 | 	add	local23, #4
01744     25 27 62 FC | 	wrlong	local05, local23
01748     04 4A 86 F1 | 	sub	local23, #4
0174c     01 30 06 F1 | 	add	local10, #1
01750     2B 00 00 FF 
01754     D0 E5 85 F1 | 	sub	objptr, ##22480
01758     7C FF 9F FD | 	jmp	#LR__0064
0175c                 | LR__0065
0175c                 | LR__0066
0175c     01 24 86 F1 | 	sub	local04, #1
01760     01 32 86 F1 | 	sub	local11, #1
01764                 | LR__0067
01764     01 24 06 F1 | 	add	local04, #1
01768     19 25 52 F2 | 	cmps	local04, local11 wc
0176c     58 FC 9F CD |  if_b	jmp	#LR__0058
01770                 | '  
01770                 | ' ' 1f : now remove parts that are spaces
01770                 | ' 
01770                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
01770     00 24 06 F6 | 	mov	local04, #0
01774     19 55 02 F6 | 	mov	local28, local11
01778     01 54 06 F1 | 	add	local28, #1
0177c                 | LR__0068
0177c     2A 25 52 F2 | 	cmps	local04, local28 wc
01780     50 00 90 3D |  if_ae	jmp	#LR__0069
01784     12 29 02 F6 | 	mov	local06, local04
01788     03 28 66 F0 | 	shl	local06, #3
0178c     2B 00 00 FF 
01790     D0 E5 05 F1 | 	add	objptr, ##22480
01794     F2 28 02 F1 | 	add	local06, objptr
01798     12 2F 02 F6 | 	mov	local09, local04
0179c     17 37 02 F6 | 	mov	local13, local09
017a0     1B 47 02 F6 | 	mov	local21, local13
017a4     03 46 66 F0 | 	shl	local21, #3
017a8     F2 4A 02 F6 | 	mov	local23, objptr
017ac     F2 46 02 F1 | 	add	local21, objptr
017b0     23 13 02 FB | 	rdlong	arg01, local21
017b4     2B 00 00 FF 
017b8     D0 E5 85 F1 | 	sub	objptr, ##22480
017bc     44 64 B1 FD | 	call	#__system__RTrim_S
017c0     FD 12 02 F6 | 	mov	arg01, result1
017c4     7C 63 B1 FD | 	call	#__system__LTrim_S
017c8     14 FB 61 FC | 	wrlong	result1, local06
017cc     01 24 06 F1 | 	add	local04, #1
017d0     A8 FF 9F FD | 	jmp	#LR__0068
017d4                 | LR__0069
017d4     00 24 06 F6 | 	mov	local04, #0
017d8     97 8A 48 FB | 	callpa	#(@LR__0076-@LR__0070)>>2,fcache_load_ptr_
017dc                 | ' 
017dc                 | ' i=0
017dc                 | ' do 
017dc                 | LR__0070
017dc                 | '   if len(lparts(i).part$)=0 then 
017dc     12 3D 02 F6 | 	mov	local16, local04
017e0     03 3C 66 F0 | 	shl	local16, #3
017e4     2B 00 00 FF 
017e8     D0 E5 05 F1 | 	add	objptr, ##22480
017ec     F2 2A 02 F6 | 	mov	local07, objptr
017f0     F2 3C 02 F1 | 	add	local16, objptr
017f4     1E 13 02 FB | 	rdlong	arg01, local16
017f8     2B 00 00 FF 
017fc     D0 E5 85 F1 | 	sub	objptr, ##22480
01800     09 2D 02 F6 | 	mov	local08, arg01
01804                 | LR__0071
01804     16 FB C9 FA | 	rdbyte	result1, local08 wz
01808     01 2C 06 51 |  if_ne	add	local08, #1
0180c     F4 FF 9F 5D |  if_ne	jmp	#LR__0071
01810     09 2D 8A F1 | 	sub	local08, arg01 wz
01814     C4 00 90 5D |  if_ne	jmp	#LR__0075
01818                 | '     if i=k-1 then k-=1  :  exit
01818     19 1F 02 F6 | 	mov	local01, local11
0181c     01 1E 86 F1 | 	sub	local01, #1
01820     0F 25 0A F2 | 	cmp	local04, local01 wz
01824     01 32 86 A1 |  if_e	sub	local11, #1
01828     C4 00 90 AD |  if_e	jmp	#LR__0077
0182c                 | '     if i<k-1 then 
0182c     19 1F 02 F6 | 	mov	local01, local11
01830     01 1E 86 F1 | 	sub	local01, #1
01834     0F 25 52 F2 | 	cmps	local04, local01 wc
01838     A0 00 90 3D |  if_ae	jmp	#LR__0074
0183c                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
0183c     12 31 02 F6 | 	mov	local10, local04
01840     19 57 02 F6 | 	mov	local29, local11
01844     01 56 86 F1 | 	sub	local29, #1
01848                 | LR__0072
01848     2B 31 52 F2 | 	cmps	local10, local29 wc
0184c     80 00 90 3D |  if_ae	jmp	#LR__0073
01850     18 3D 02 F6 | 	mov	local16, local10
01854     01 3C 06 F1 | 	add	local16, #1
01858     03 3C 66 F0 | 	shl	local16, #3
0185c     2B 00 00 FF 
01860     D0 E5 05 F1 | 	add	objptr, ##22480
01864     F2 3C 02 F1 | 	add	local16, objptr
01868     1E 1F 02 FB | 	rdlong	local01, local16
0186c     18 2B 02 F6 | 	mov	local07, local10
01870     01 2A 06 F1 | 	add	local07, #1
01874     03 2A 66 F0 | 	shl	local07, #3
01878     F2 2A 02 F1 | 	add	local07, objptr
0187c     04 2A 06 F1 | 	add	local07, #4
01880     15 27 02 FB | 	rdlong	local05, local07
01884     18 29 02 F6 | 	mov	local06, local10
01888     14 2B 02 F6 | 	mov	local07, local06
0188c     03 2A 66 F0 | 	shl	local07, #3
01890     F2 2E 02 F6 | 	mov	local09, objptr
01894     F2 2A 02 F1 | 	add	local07, objptr
01898     15 1F 62 FC | 	wrlong	local01, local07
0189c     18 37 02 F6 | 	mov	local13, local10
018a0     1B 47 02 F6 | 	mov	local21, local13
018a4     23 4B 02 F6 | 	mov	local23, local21
018a8     03 4A 66 F0 | 	shl	local23, #3
018ac     F2 48 02 F6 | 	mov	local22, objptr
018b0     F2 4A 02 F1 | 	add	local23, objptr
018b4     04 4A 06 F1 | 	add	local23, #4
018b8     25 27 62 FC | 	wrlong	local05, local23
018bc     04 4A 86 F1 | 	sub	local23, #4
018c0     01 30 06 F1 | 	add	local10, #1
018c4     2B 00 00 FF 
018c8     D0 E5 85 F1 | 	sub	objptr, ##22480
018cc     78 FF 9F FD | 	jmp	#LR__0072
018d0                 | LR__0073
018d0     01 32 86 F1 | 	sub	local11, #1
018d4                 | '       if i>0 then i-=1 
018d4     01 24 56 F2 | 	cmps	local04, #1 wc
018d8     01 24 86 31 |  if_ae	sub	local04, #1
018dc                 | LR__0074
018dc                 | LR__0075
018dc     01 24 06 F1 | 	add	local04, #1
018e0     19 1F 02 F6 | 	mov	local01, local11
018e4     01 1E 86 F1 | 	sub	local01, #1
018e8     0F 25 5A F2 | 	cmps	local04, local01 wcz
018ec     EC FE 9F ED |  if_be	jmp	#LR__0070
018f0                 | LR__0076
018f0                 | LR__0077
018f0                 | ' 
018f0                 | ' ' 1g: lowercase all that is not a string
018f0                 | ' 
018f0                 | ' for j=0 to k-1
018f0     00 30 06 F6 | 	mov	local10, #0
018f4     19 59 02 F6 | 	mov	local30, local11
018f8                 | LR__0078
018f8     2C 31 52 F2 | 	cmps	local10, local30 wc
018fc     D0 00 90 3D |  if_ae	jmp	#LR__0081
01900                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01900     18 3D 02 F6 | 	mov	local16, local10
01904     03 3C 66 F0 | 	shl	local16, #3
01908     2B 00 00 FF 
0190c     D0 E5 05 F1 | 	add	objptr, ##22480
01910     F2 2A 02 F6 | 	mov	local07, objptr
01914     F2 3C 02 F1 | 	add	local16, objptr
01918     1E 13 02 FB | 	rdlong	arg01, local16
0191c     01 14 06 F6 | 	mov	arg02, #1
01920     2B 00 00 FF 
01924     D0 E5 85 F1 | 	sub	objptr, ##22480
01928     A4 5E B1 FD | 	call	#__system__Left_S
0192c     FD 12 02 F6 | 	mov	arg01, result1
01930     25 01 00 FF 
01934     4B 14 06 F6 | 	mov	arg02, ##@LR__4126
01938     AC 3E B1 FD | 	call	#__system___string_cmp
0193c     00 FA 0D F2 | 	cmp	result1, #0 wz
01940     44 00 90 5D |  if_ne	jmp	#LR__0079
01944     18 2B 02 F6 | 	mov	local07, local10
01948     03 2A 66 F0 | 	shl	local07, #3
0194c     2B 00 00 FF 
01950     D0 E5 05 F1 | 	add	objptr, ##22480
01954     F2 2E 02 F6 | 	mov	local09, objptr
01958     F2 2A 02 F1 | 	add	local07, objptr
0195c     15 13 02 FB | 	rdlong	arg01, local07
01960     01 14 06 F6 | 	mov	arg02, #1
01964     2B 00 00 FF 
01968     D0 E5 85 F1 | 	sub	objptr, ##22480
0196c     E8 5E B1 FD | 	call	#__system__Right_S
01970     FD 12 02 F6 | 	mov	arg01, result1
01974     25 01 00 FF 
01978     4D 14 06 F6 | 	mov	arg02, ##@LR__4127
0197c     68 3E B1 FD | 	call	#__system___string_cmp
01980     00 FA 0D F2 | 	cmp	result1, #0 wz
01984     40 00 90 AD |  if_e	jmp	#LR__0080
01988                 | LR__0079
01988     18 29 02 F6 | 	mov	local06, local10
0198c     03 28 66 F0 | 	shl	local06, #3
01990     2B 00 00 FF 
01994     D0 E5 05 F1 | 	add	objptr, ##22480
01998     F2 28 02 F1 | 	add	local06, objptr
0199c     18 2F 02 F6 | 	mov	local09, local10
019a0     17 37 02 F6 | 	mov	local13, local09
019a4     1B 47 02 F6 | 	mov	local21, local13
019a8     03 46 66 F0 | 	shl	local21, #3
019ac     F2 4A 02 F6 | 	mov	local23, objptr
019b0     F2 46 02 F1 | 	add	local21, objptr
019b4     23 13 02 FB | 	rdlong	arg01, local21
019b8     2B 00 00 FF 
019bc     D0 E5 85 F1 | 	sub	objptr, ##22480
019c0     C0 60 B1 FD | 	call	#__system__LCase_S
019c4     14 FB 61 FC | 	wrlong	result1, local06
019c8                 | LR__0080
019c8     01 30 06 F1 | 	add	local10, #1
019cc     28 FF 9F FD | 	jmp	#LR__0078
019d0                 | LR__0081
019d0                 | ' 
019d0                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
019d0                 | ' 
019d0                 | ' for i=0 to k: lparts(i).token=-1: next i
019d0     00 24 06 F6 | 	mov	local04, #0
019d4     19 5B 02 F6 | 	mov	local31, local11
019d8     01 5A 06 F1 | 	add	local31, #1
019dc     97 1C 48 FB | 	callpa	#(@LR__0083-@LR__0082)>>2,fcache_load_ptr_
019e0                 | LR__0082
019e0     2D 25 52 F2 | 	cmps	local04, local31 wc
019e4     30 00 90 3D |  if_ae	jmp	#LR__0084
019e8     12 29 02 F6 | 	mov	local06, local04
019ec     03 28 66 F0 | 	shl	local06, #3
019f0     2B 00 00 FF 
019f4     D0 E5 05 F1 | 	add	objptr, ##22480
019f8     F2 28 02 F1 | 	add	local06, objptr
019fc     04 28 06 F1 | 	add	local06, #4
01a00     FF FF FF FF 
01a04     14 FF 6B FC | 	wrlong	##-1, local06
01a08     01 24 06 F1 | 	add	local04, #1
01a0c     2B 00 00 FF 
01a10     D0 E5 85 F1 | 	sub	objptr, ##22480
01a14     C8 FF 9F FD | 	jmp	#LR__0082
01a18                 | LR__0083
01a18                 | LR__0084
01a18                 | ' 
01a18                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01a18                 | ' 
01a18                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01a18     2B 00 00 FF 
01a1c     D0 E5 05 F1 | 	add	objptr, ##22480
01a20     F2 12 02 FB | 	rdlong	arg01, objptr
01a24     2B 00 00 FF 
01a28     D0 E5 85 F1 | 	sub	objptr, ##22480
01a2c     09 2D 02 F6 | 	mov	local08, arg01
01a30     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01a34                 | LR__0085
01a34     16 FB C9 FA | 	rdbyte	result1, local08 wz
01a38     01 2C 06 51 |  if_ne	add	local08, #1
01a3c     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01a40                 | LR__0086
01a40     09 2D 8A F1 | 	sub	local08, arg01 wz
01a44     3C 0D 90 AD |  if_e	jmp	#LR__0119
01a48                 | ' 
01a48                 | ' ' 2a find part types 
01a48                 | ' 
01a48                 | ' for i=0 to k-1
01a48     00 24 06 F6 | 	mov	local04, #0
01a4c     19 5D 02 F6 | 	mov	local32, local11
01a50                 | LR__0087
01a50     2E 25 52 F2 | 	cmps	local04, local32 wc
01a54     9C 05 90 3D |  if_ae	jmp	#LR__0096
01a58     12 29 02 F6 | 	mov	local06, local04
01a5c     03 28 66 F0 | 	shl	local06, #3
01a60     2B 00 00 FF 
01a64     D0 E5 05 F1 | 	add	objptr, ##22480
01a68     F2 28 02 F1 | 	add	local06, objptr
01a6c     12 37 02 F6 | 	mov	local13, local04
01a70     1B 47 02 F6 | 	mov	local21, local13
01a74     23 4B 02 F6 | 	mov	local23, local21
01a78     03 4A 66 F0 | 	shl	local23, #3
01a7c     F2 48 02 F6 | 	mov	local22, objptr
01a80     F2 4A 02 F1 | 	add	local23, objptr
01a84     25 13 02 FB | 	rdlong	arg01, local23
01a88     2B 00 00 FF 
01a8c     D0 E5 85 F1 | 	sub	objptr, ##22480
01a90     FC 0F B0 FD | 	call	#_isseparator
01a94     FD FA E1 F8 | 	getbyte	result1, result1, #0
01a98     04 28 06 F1 | 	add	local06, #4
01a9c     14 FB 61 FC | 	wrlong	result1, local06
01aa0                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
01aa0     12 29 02 F6 | 	mov	local06, local04
01aa4     03 28 66 F0 | 	shl	local06, #3
01aa8     2B 00 00 FF 
01aac     D0 E5 05 F1 | 	add	objptr, ##22480
01ab0     F2 28 02 F1 | 	add	local06, objptr
01ab4     04 28 06 F1 | 	add	local06, #4
01ab8     14 2F 02 FB | 	rdlong	local09, local06
01abc     01 2E 56 F2 | 	cmps	local09, #1 wc
01ac0     2B 00 00 FF 
01ac4     D0 E5 85 F1 | 	sub	objptr, ##22480
01ac8     20 05 90 3D |  if_ae	jmp	#LR__0095
01acc     12 29 02 F6 | 	mov	local06, local04
01ad0     03 28 66 F0 | 	shl	local06, #3
01ad4     2B 00 00 FF 
01ad8     D0 E5 05 F1 | 	add	objptr, ##22480
01adc     F2 28 02 F1 | 	add	local06, objptr
01ae0     12 37 02 F6 | 	mov	local13, local04
01ae4     1B 47 02 F6 | 	mov	local21, local13
01ae8     23 4B 02 F6 | 	mov	local23, local21
01aec     03 4A 66 F0 | 	shl	local23, #3
01af0     F2 48 02 F6 | 	mov	local22, objptr
01af4     F2 4A 02 F1 | 	add	local23, objptr
01af8     25 13 02 FB | 	rdlong	arg01, local23
01afc     2B 00 00 FF 
01b00     D0 E5 85 F1 | 	sub	objptr, ##22480
01b04     A8 0C B0 FD | 	call	#_isoperator
01b08     FD FA E1 F8 | 	getbyte	result1, result1, #0
01b0c     04 28 06 F1 | 	add	local06, #4
01b10     14 FB 61 FC | 	wrlong	result1, local06
01b14                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
01b14     12 29 02 F6 | 	mov	local06, local04
01b18     03 28 66 F0 | 	shl	local06, #3
01b1c     2B 00 00 FF 
01b20     D0 E5 05 F1 | 	add	objptr, ##22480
01b24     F2 28 02 F1 | 	add	local06, objptr
01b28     04 28 06 F1 | 	add	local06, #4
01b2c     14 2F 02 FB | 	rdlong	local09, local06
01b30     01 2E 56 F2 | 	cmps	local09, #1 wc
01b34     2B 00 00 FF 
01b38     D0 E5 85 F1 | 	sub	objptr, ##22480
01b3c     AC 04 90 3D |  if_ae	jmp	#LR__0095
01b40     12 29 02 F6 | 	mov	local06, local04
01b44     03 28 66 F0 | 	shl	local06, #3
01b48     2B 00 00 FF 
01b4c     D0 E5 05 F1 | 	add	objptr, ##22480
01b50     F2 28 02 F1 | 	add	local06, objptr
01b54     12 37 02 F6 | 	mov	local13, local04
01b58     1B 47 02 F6 | 	mov	local21, local13
01b5c     23 4B 02 F6 | 	mov	local23, local21
01b60     03 4A 66 F0 | 	shl	local23, #3
01b64     F2 48 02 F6 | 	mov	local22, objptr
01b68     F2 4A 02 F1 | 	add	local23, objptr
01b6c     25 13 02 FB | 	rdlong	arg01, local23
01b70     2B 00 00 FF 
01b74     D0 E5 85 F1 | 	sub	objptr, ##22480
01b78                 | ' 
01b78                 | ' select case s
01b78     25 01 00 FF 
01b7c     16 15 06 F6 | 	mov	arg02, ##@LR__4184
01b80     64 3C B1 FD | 	call	#__system___string_cmp
01b84     00 FA 0D F2 | 	cmp	result1, #0 wz
01b88     1B FA 05 A6 |  if_e	mov	result1, #27
01b8c     00 FA 05 56 |  if_ne	mov	result1, #0
01b90     FD FA E1 F8 | 	getbyte	result1, result1, #0
01b94     04 28 06 F1 | 	add	local06, #4
01b98     14 FB 61 FC | 	wrlong	result1, local06
01b9c                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
01b9c     12 29 02 F6 | 	mov	local06, local04
01ba0     03 28 66 F0 | 	shl	local06, #3
01ba4     2B 00 00 FF 
01ba8     D0 E5 05 F1 | 	add	objptr, ##22480
01bac     F2 28 02 F1 | 	add	local06, objptr
01bb0     04 28 06 F1 | 	add	local06, #4
01bb4     14 2F 02 FB | 	rdlong	local09, local06
01bb8     01 2E 56 F2 | 	cmps	local09, #1 wc
01bbc     2B 00 00 FF 
01bc0     D0 E5 85 F1 | 	sub	objptr, ##22480
01bc4     24 04 90 3D |  if_ae	jmp	#LR__0095
01bc8     12 29 02 F6 | 	mov	local06, local04
01bcc     03 28 66 F0 | 	shl	local06, #3
01bd0     2B 00 00 FF 
01bd4     D0 E5 05 F1 | 	add	objptr, ##22480
01bd8     F2 28 02 F1 | 	add	local06, objptr
01bdc     12 37 02 F6 | 	mov	local13, local04
01be0     1B 47 02 F6 | 	mov	local21, local13
01be4     23 4B 02 F6 | 	mov	local23, local21
01be8     03 4A 66 F0 | 	shl	local23, #3
01bec     F2 48 02 F6 | 	mov	local22, objptr
01bf0     F2 4A 02 F1 | 	add	local23, objptr
01bf4     25 13 02 FB | 	rdlong	arg01, local23
01bf8     2B 00 00 FF 
01bfc     D0 E5 85 F1 | 	sub	objptr, ##22480
01c00     8C 10 B0 FD | 	call	#_iscommand
01c04     FD FA E1 F8 | 	getbyte	result1, result1, #0
01c08     04 28 06 F1 | 	add	local06, #4
01c0c     14 FB 61 FC | 	wrlong	result1, local06
01c10                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
01c10     12 29 02 F6 | 	mov	local06, local04
01c14     03 28 66 F0 | 	shl	local06, #3
01c18     2B 00 00 FF 
01c1c     D0 E5 05 F1 | 	add	objptr, ##22480
01c20     F2 28 02 F1 | 	add	local06, objptr
01c24     04 28 06 F1 | 	add	local06, #4
01c28     14 2F 02 FB | 	rdlong	local09, local06
01c2c     01 2E 56 F2 | 	cmps	local09, #1 wc
01c30     2B 00 00 FF 
01c34     D0 E5 85 F1 | 	sub	objptr, ##22480
01c38     B0 03 90 3D |  if_ae	jmp	#LR__0095
01c3c     12 29 02 F6 | 	mov	local06, local04
01c40     03 28 66 F0 | 	shl	local06, #3
01c44     2B 00 00 FF 
01c48     D0 E5 05 F1 | 	add	objptr, ##22480
01c4c     F2 28 02 F1 | 	add	local06, objptr
01c50     12 37 02 F6 | 	mov	local13, local04
01c54     1B 47 02 F6 | 	mov	local21, local13
01c58     23 4B 02 F6 | 	mov	local23, local21
01c5c     03 4A 66 F0 | 	shl	local23, #3
01c60     F2 48 02 F6 | 	mov	local22, objptr
01c64     F2 4A 02 F1 | 	add	local23, objptr
01c68     25 13 02 FB | 	rdlong	arg01, local23
01c6c     2B 00 00 FF 
01c70     D0 E5 85 F1 | 	sub	objptr, ##22480
01c74     38 16 B0 FD | 	call	#_isfunction
01c78     FD FA E1 F8 | 	getbyte	result1, result1, #0
01c7c     04 28 06 F1 | 	add	local06, #4
01c80     14 FB 61 FC | 	wrlong	result1, local06
01c84                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
01c84     12 29 02 F6 | 	mov	local06, local04
01c88     03 28 66 F0 | 	shl	local06, #3
01c8c     2B 00 00 FF 
01c90     D0 E5 05 F1 | 	add	objptr, ##22480
01c94     F2 28 02 F1 | 	add	local06, objptr
01c98     04 28 06 F1 | 	add	local06, #4
01c9c     14 2F 02 FB | 	rdlong	local09, local06
01ca0     01 2E 56 F2 | 	cmps	local09, #1 wc
01ca4     2B 00 00 FF 
01ca8     D0 E5 85 F1 | 	sub	objptr, ##22480
01cac     3C 03 90 3D |  if_ae	jmp	#LR__0095
01cb0     12 3D 02 F6 | 	mov	local16, local04
01cb4     03 3C 66 F0 | 	shl	local16, #3
01cb8     2B 00 00 FF 
01cbc     D0 E5 05 F1 | 	add	objptr, ##22480
01cc0     F2 3C 02 F1 | 	add	local16, objptr
01cc4     1E 13 02 FB | 	rdlong	arg01, local16
01cc8     2B 00 00 FF 
01ccc     D0 E5 85 F1 | 	sub	objptr, ##22480
01cd0     10 1A B0 FD | 	call	#_isnum
01cd4     FD 1E 02 F6 | 	mov	local01, result1
01cd8     52 00 00 FF 
01cdc     8C E4 05 F1 | 	add	objptr, ##42124
01ce0     F2 1E 62 FC | 	wrlong	local01, objptr
01ce4     12 3D 02 F6 | 	mov	local16, local04
01ce8     03 3C 66 F0 | 	shl	local16, #3
01cec     26 00 00 FF 
01cf0     BC E4 85 F1 | 	sub	objptr, ##19644
01cf4     F2 3C 02 F1 | 	add	local16, objptr
01cf8     1E 13 02 FB | 	rdlong	arg01, local16
01cfc     2B 00 00 FF 
01d00     D0 E5 85 F1 | 	sub	objptr, ##22480
01d04     B4 1C B0 FD | 	call	#_isint
01d08     FD 1E 02 F6 | 	mov	local01, result1
01d0c     52 00 00 FF 
01d10     90 E4 05 F1 | 	add	objptr, ##42128
01d14     F2 1E 62 FC | 	wrlong	local01, objptr
01d18     12 3D 02 F6 | 	mov	local16, local04
01d1c     03 3C 66 F0 | 	shl	local16, #3
01d20     26 00 00 FF 
01d24     C0 E4 85 F1 | 	sub	objptr, ##19648
01d28     F2 2A 02 F6 | 	mov	local07, objptr
01d2c     F2 3C 02 F1 | 	add	local16, objptr
01d30     1E 13 02 FB | 	rdlong	arg01, local16
01d34     2B 00 00 FF 
01d38     D0 E5 85 F1 | 	sub	objptr, ##22480
01d3c     D4 1D B0 FD | 	call	#_isdec
01d40     52 00 00 FF 
01d44     94 E4 05 F1 | 	add	objptr, ##42132
01d48     F2 FA 61 FC | 	wrlong	result1, objptr
01d4c                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
01d4c     08 E4 85 F1 | 	sub	objptr, #8
01d50     F2 1E 0A FB | 	rdlong	local01, objptr wz
01d54     52 00 00 FF 
01d58     8C E4 85 F1 | 	sub	objptr, ##42124
01d5c     60 00 90 AD |  if_e	jmp	#LR__0088
01d60     52 00 00 FF 
01d64     90 E4 05 F1 | 	add	objptr, ##42128
01d68     F2 28 0A FB | 	rdlong	local06, objptr wz
01d6c     52 00 00 FF 
01d70     90 E4 85 F1 | 	sub	objptr, ##42128
01d74     48 00 90 AD |  if_e	jmp	#LR__0088
01d78     52 00 00 FF 
01d7c     94 E4 05 F1 | 	add	objptr, ##42132
01d80     F2 2E 0A FB | 	rdlong	local09, objptr wz
01d84     52 00 00 FF 
01d88     94 E4 85 F1 | 	sub	objptr, ##42132
01d8c     30 00 90 AD |  if_e	jmp	#LR__0088
01d90     12 27 02 F6 | 	mov	local05, local04
01d94     13 29 02 F6 | 	mov	local06, local05
01d98     03 28 66 F0 | 	shl	local06, #3
01d9c     2B 00 00 FF 
01da0     D0 E5 05 F1 | 	add	objptr, ##22480
01da4     F2 28 02 F1 | 	add	local06, objptr
01da8     04 28 06 F1 | 	add	local06, #4
01dac     01 00 80 FF 
01db0     14 01 68 FC | 	wrlong	##512, local06
01db4     2B 00 00 FF 
01db8     D0 E5 85 F1 | 	sub	objptr, ##22480
01dbc     2C 02 90 FD | 	jmp	#LR__0095
01dc0                 | LR__0088
01dc0                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
01dc0     52 00 00 FF 
01dc4     8C E4 05 F1 | 	add	objptr, ##42124
01dc8     F2 1E 0A FB | 	rdlong	local01, objptr wz
01dcc     52 00 00 FF 
01dd0     8C E4 85 F1 | 	sub	objptr, ##42124
01dd4     64 00 90 AD |  if_e	jmp	#LR__0089
01dd8     52 00 00 FF 
01ddc     90 E4 05 F1 | 	add	objptr, ##42128
01de0     F2 28 0A FB | 	rdlong	local06, objptr wz
01de4     52 00 00 FF 
01de8     90 E4 85 F1 | 	sub	objptr, ##42128
01dec     52 00 00 5F 
01df0     94 E4 05 51 |  if_ne	add	objptr, ##42132
01df4     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
01df8     52 00 00 5F 
01dfc     94 E4 85 51 |  if_ne	sub	objptr, ##42132
01e00     17 2B 22 56 |  if_ne	not	local07, local09
01e04     00 2A 0E 52 |  if_ne	cmp	local07, #0 wz
01e08     30 00 90 AD |  if_e	jmp	#LR__0089
01e0c     12 27 02 F6 | 	mov	local05, local04
01e10     13 29 02 F6 | 	mov	local06, local05
01e14     03 28 66 F0 | 	shl	local06, #3
01e18     2B 00 00 FF 
01e1c     D0 E5 05 F1 | 	add	objptr, ##22480
01e20     F2 28 02 F1 | 	add	local06, objptr
01e24     04 28 06 F1 | 	add	local06, #4
01e28     01 00 80 FF 
01e2c     14 03 68 FC | 	wrlong	##513, local06
01e30     2B 00 00 FF 
01e34     D0 E5 85 F1 | 	sub	objptr, ##22480
01e38     B0 01 90 FD | 	jmp	#LR__0095
01e3c                 | LR__0089
01e3c                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
01e3c     52 00 00 FF 
01e40     8C E4 05 F1 | 	add	objptr, ##42124
01e44     F2 1E 0A FB | 	rdlong	local01, objptr wz
01e48     52 00 00 FF 
01e4c     8C E4 85 F1 | 	sub	objptr, ##42124
01e50     52 00 00 5F 
01e54     90 E4 05 51 |  if_ne	add	objptr, ##42128
01e58     F2 28 02 5B |  if_ne	rdlong	local06, objptr
01e5c     52 00 00 5F 
01e60     90 E4 85 51 |  if_ne	sub	objptr, ##42128
01e64     14 29 22 56 |  if_ne	not	local06, local06
01e68     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
01e6c     52 00 00 5F 
01e70     94 E4 05 51 |  if_ne	add	objptr, ##42132
01e74     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
01e78     52 00 00 5F 
01e7c     94 E4 85 51 |  if_ne	sub	objptr, ##42132
01e80     17 2B 22 56 |  if_ne	not	local07, local09
01e84     00 2A 0E 52 |  if_ne	cmp	local07, #0 wz
01e88     30 00 90 AD |  if_e	jmp	#LR__0090
01e8c     12 27 02 F6 | 	mov	local05, local04
01e90     13 29 02 F6 | 	mov	local06, local05
01e94     03 28 66 F0 | 	shl	local06, #3
01e98     2B 00 00 FF 
01e9c     D0 E5 05 F1 | 	add	objptr, ##22480
01ea0     F2 28 02 F1 | 	add	local06, objptr
01ea4     04 28 06 F1 | 	add	local06, #4
01ea8     01 00 80 FF 
01eac     14 05 68 FC | 	wrlong	##514, local06
01eb0     2B 00 00 FF 
01eb4     D0 E5 85 F1 | 	sub	objptr, ##22480
01eb8     30 01 90 FD | 	jmp	#LR__0095
01ebc                 | LR__0090
01ebc                 | ' 
01ebc                 | ' if isstring(lparts(i).part$) then 
01ebc     12 3D 02 F6 | 	mov	local16, local04
01ec0     03 3C 66 F0 | 	shl	local16, #3
01ec4     2B 00 00 FF 
01ec8     D0 E5 05 F1 | 	add	objptr, ##22480
01ecc     F2 3C 02 F1 | 	add	local16, objptr
01ed0     1E 13 02 FB | 	rdlong	arg01, local16
01ed4     2B 00 00 FF 
01ed8     D0 E5 85 F1 | 	sub	objptr, ##22480
01edc     F4 1C B0 FD | 	call	#_isstring
01ee0     00 FA 0D F2 | 	cmp	result1, #0 wz
01ee4     A8 00 90 AD |  if_e	jmp	#LR__0093
01ee8     12 29 02 F6 | 	mov	local06, local04
01eec     03 28 66 F0 | 	shl	local06, #3
01ef0     2B 00 00 FF 
01ef4     D0 E5 05 F1 | 	add	objptr, ##22480
01ef8     F2 28 02 F1 | 	add	local06, objptr
01efc     04 28 06 F1 | 	add	local06, #4
01f00     01 00 80 FF 
01f04     14 07 68 FC | 	wrlong	##515, local06
01f08     12 27 02 F6 | 	mov	local05, local04
01f0c     13 29 02 F6 | 	mov	local06, local05
01f10     03 28 66 F0 | 	shl	local06, #3
01f14     F2 28 02 F1 | 	add	local06, objptr
01f18     12 47 02 F6 | 	mov	local21, local04
01f1c     03 46 66 F0 | 	shl	local21, #3
01f20     F2 46 02 F1 | 	add	local21, objptr
01f24     23 2B 02 FB | 	rdlong	local07, local21
01f28     02 2E 06 F6 | 	mov	local09, #2
01f2c     12 49 02 F6 | 	mov	local22, local04
01f30     24 3F 02 F6 | 	mov	local17, local22
01f34     1F 41 02 F6 | 	mov	local18, local17
01f38     03 40 66 F0 | 	shl	local18, #3
01f3c     F2 42 02 F6 | 	mov	local19, objptr
01f40     F2 40 02 F1 | 	add	local18, objptr
01f44     20 13 02 FB | 	rdlong	arg01, local18
01f48     2B 00 00 FF 
01f4c     D0 E5 85 F1 | 	sub	objptr, ##22480
01f50     09 2D 02 F6 | 	mov	local08, arg01
01f54     97 06 48 FB | 	callpa	#(@LR__0092-@LR__0091)>>2,fcache_load_ptr_
01f58                 | LR__0091
01f58     16 FB C9 FA | 	rdbyte	result1, local08 wz
01f5c     01 2C 06 51 |  if_ne	add	local08, #1
01f60     F4 FF 9F 5D |  if_ne	jmp	#LR__0091
01f64                 | LR__0092
01f64     09 2D 82 F1 | 	sub	local08, arg01
01f68     16 4B 02 F6 | 	mov	local23, local08
01f6c     25 47 02 F6 | 	mov	local21, local23
01f70     02 46 86 F1 | 	sub	local21, #2
01f74     23 37 02 F6 | 	mov	local13, local21
01f78     15 13 02 F6 | 	mov	arg01, local07
01f7c     17 15 02 F6 | 	mov	arg02, local09
01f80     1B 17 02 F6 | 	mov	arg03, local13
01f84     60 59 B1 FD | 	call	#__system__Mid_S
01f88     14 FB 61 FC | 	wrlong	result1, local06
01f8c     5C 00 90 FD | 	jmp	#LR__0095
01f90                 | LR__0093
01f90                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
01f90     12 27 02 F6 | 	mov	local05, local04
01f94     13 3D 02 F6 | 	mov	local16, local05
01f98     03 3C 66 F0 | 	shl	local16, #3
01f9c     2B 00 00 FF 
01fa0     D0 E5 05 F1 | 	add	objptr, ##22480
01fa4     F2 3C 02 F1 | 	add	local16, objptr
01fa8     1E 13 02 FB | 	rdlong	arg01, local16
01fac     2B 00 00 FF 
01fb0     D0 E5 85 F1 | 	sub	objptr, ##22480
01fb4     B8 14 B0 FD | 	call	#_isname
01fb8     00 FA 0D F2 | 	cmp	result1, #0 wz
01fbc     2C 00 90 AD |  if_e	jmp	#LR__0094
01fc0     12 27 02 F6 | 	mov	local05, local04
01fc4     13 29 02 F6 | 	mov	local06, local05
01fc8     03 28 66 F0 | 	shl	local06, #3
01fcc     2B 00 00 FF 
01fd0     D0 E5 05 F1 | 	add	objptr, ##22480
01fd4     F2 28 02 F1 | 	add	local06, objptr
01fd8     04 28 06 F1 | 	add	local06, #4
01fdc     01 00 80 FF 
01fe0     14 09 68 FC | 	wrlong	##516, local06
01fe4     2B 00 00 FF 
01fe8     D0 E5 85 F1 | 	sub	objptr, ##22480
01fec                 | LR__0094
01fec                 | LR__0095
01fec     01 24 06 F1 | 	add	local04, #1
01ff0     5C FA 9F FD | 	jmp	#LR__0087
01ff4                 | LR__0096
01ff4     19 29 02 F6 | 	mov	local06, local11
01ff8     03 28 66 F0 | 	shl	local06, #3
01ffc     2B 00 00 FF 
02000     D0 E5 05 F1 | 	add	objptr, ##22480
02004     F2 28 02 F1 | 	add	local06, objptr
02008     04 28 06 F1 | 	add	local06, #4
0200c     14 FD 6B FC | 	wrlong	#510, local06
02010     19 29 02 F6 | 	mov	local06, local11
02014     03 28 66 F0 | 	shl	local06, #3
02018     F2 28 02 F1 | 	add	local06, objptr
0201c     25 01 00 FF 
02020     4F 2A 06 F6 | 	mov	local07, ##@LR__4128
02024     14 2B 62 FC | 	wrlong	local07, local06
02028     10 00 00 FF 
0202c     54 E4 05 F1 | 	add	objptr, ##8276
02030     F2 32 62 FC | 	wrlong	local11, objptr
02034                 | ' 
02034                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
02034                 | ' 
02034                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
02034                 | ' 
02034                 | ' ' process the case when simple load or save is called without ""
02034                 | ' 
02034                 | ' if (lparts(0).part$="load" orelse lparts(0).part$="save" orelse lparts(0).part$="brun") andalso lparts(1).token=token_name andalso lparts(2).token=token_end then lparts(1).token=token_string
02034     10 00 00 FF 
02038     54 E4 85 F1 | 	sub	objptr, ##8276
0203c     F2 12 02 FB | 	rdlong	arg01, objptr
02040     2B 00 00 FF 
02044     D0 E5 85 F1 | 	sub	objptr, ##22480
02048     25 01 00 FF 
0204c     50 14 06 F6 | 	mov	arg02, ##@LR__4129
02050     94 37 B1 FD | 	call	#__system___string_cmp
02054     00 FA 0D F2 | 	cmp	result1, #0 wz
02058     50 00 90 AD |  if_e	jmp	#LR__0097
0205c     2B 00 00 FF 
02060     D0 E5 05 F1 | 	add	objptr, ##22480
02064     F2 12 02 FB | 	rdlong	arg01, objptr
02068     2B 00 00 FF 
0206c     D0 E5 85 F1 | 	sub	objptr, ##22480
02070     25 01 00 FF 
02074     55 14 06 F6 | 	mov	arg02, ##@LR__4130
02078     6C 37 B1 FD | 	call	#__system___string_cmp
0207c     00 FA 0D F2 | 	cmp	result1, #0 wz
02080     28 00 90 AD |  if_e	jmp	#LR__0097
02084     2B 00 00 FF 
02088     D0 E5 05 F1 | 	add	objptr, ##22480
0208c     F2 12 02 FB | 	rdlong	arg01, objptr
02090     2B 00 00 FF 
02094     D0 E5 85 F1 | 	sub	objptr, ##22480
02098     25 01 00 FF 
0209c     5A 14 06 F6 | 	mov	arg02, ##@LR__4131
020a0     44 37 B1 FD | 	call	#__system___string_cmp
020a4     00 FA 0D F2 | 	cmp	result1, #0 wz
020a8     50 00 90 5D |  if_ne	jmp	#LR__0098
020ac                 | LR__0097
020ac     2B 00 00 FF 
020b0     DC E5 05 F1 | 	add	objptr, ##22492
020b4     F2 3C 02 FB | 	rdlong	local16, objptr
020b8     2B 00 00 FF 
020bc     DC E5 85 F1 | 	sub	objptr, ##22492
020c0     01 00 00 FF 
020c4     04 3C 0E F2 | 	cmp	local16, ##516 wz
020c8     2B 00 00 AF 
020cc     E4 E5 05 A1 |  if_e	add	objptr, ##22500
020d0     F2 36 02 AB |  if_e	rdlong	local13, objptr
020d4     2B 00 00 AF 
020d8     E4 E5 85 A1 |  if_e	sub	objptr, ##22500
020dc     1B 2F 02 A6 |  if_e	mov	local09, local13
020e0     FE 2F 0E A2 |  if_e	cmp	local09, #510 wz
020e4     2B 00 00 AF 
020e8     DC E5 05 A1 |  if_e	add	objptr, ##22492
020ec     01 00 80 AF 
020f0     F2 06 68 AC |  if_e	wrlong	##515, objptr
020f4     2B 00 00 AF 
020f8     DC E5 85 A1 |  if_e	sub	objptr, ##22492
020fc                 | LR__0098
020fc                 | ' if (lparts(0).part$="mouse" orelse lparts(0).part$="cursor" orelse lparts(0).part$="click") andalso lparts(1).token=token_name andalso lparts(2).token=token_end then 
020fc     2B 00 00 FF 
02100     D0 E5 05 F1 | 	add	objptr, ##22480
02104     F2 12 02 FB | 	rdlong	arg01, objptr
02108     2B 00 00 FF 
0210c     D0 E5 85 F1 | 	sub	objptr, ##22480
02110     25 01 00 FF 
02114     5F 28 06 F6 | 	mov	local06, ##@LR__4132
02118     14 15 02 F6 | 	mov	arg02, local06
0211c     C8 36 B1 FD | 	call	#__system___string_cmp
02120     00 FA 0D F2 | 	cmp	result1, #0 wz
02124     5C 00 90 AD |  if_e	jmp	#LR__0099
02128     2B 00 00 FF 
0212c     D0 E5 05 F1 | 	add	objptr, ##22480
02130     F2 12 02 FB | 	rdlong	arg01, objptr
02134     2B 00 00 FF 
02138     D0 E5 85 F1 | 	sub	objptr, ##22480
0213c     25 01 00 FF 
02140     65 28 06 F6 | 	mov	local06, ##@LR__4133
02144     14 15 02 F6 | 	mov	arg02, local06
02148     9C 36 B1 FD | 	call	#__system___string_cmp
0214c     00 FA 0D F2 | 	cmp	result1, #0 wz
02150     30 00 90 AD |  if_e	jmp	#LR__0099
02154     2B 00 00 FF 
02158     D0 E5 05 F1 | 	add	objptr, ##22480
0215c     F2 12 02 FB | 	rdlong	arg01, objptr
02160     2B 00 00 FF 
02164     D0 E5 85 F1 | 	sub	objptr, ##22480
02168     25 01 00 FF 
0216c     6C 2A 06 F6 | 	mov	local07, ##@LR__4134
02170     15 3D 02 F6 | 	mov	local16, local07
02174     1E 15 02 F6 | 	mov	arg02, local16
02178     6C 36 B1 FD | 	call	#__system___string_cmp
0217c     FD 28 0A F6 | 	mov	local06, result1 wz
02180     E4 00 90 5D |  if_ne	jmp	#LR__0102
02184                 | LR__0099
02184     2B 00 00 FF 
02188     DC E5 05 F1 | 	add	objptr, ##22492
0218c     F2 2A 02 FB | 	rdlong	local07, objptr
02190     2B 00 00 FF 
02194     DC E5 85 F1 | 	sub	objptr, ##22492
02198     15 3D 02 F6 | 	mov	local16, local07
0219c     01 00 00 FF 
021a0     04 3C 0E F2 | 	cmp	local16, ##516 wz
021a4     2B 00 00 AF 
021a8     E4 E5 05 A1 |  if_e	add	objptr, ##22500
021ac     F2 36 02 AB |  if_e	rdlong	local13, objptr
021b0     2B 00 00 AF 
021b4     E4 E5 85 A1 |  if_e	sub	objptr, ##22500
021b8     1B 2F 02 A6 |  if_e	mov	local09, local13
021bc     FE 2F 0E A2 |  if_e	cmp	local09, #510 wz
021c0     A4 00 90 5D |  if_ne	jmp	#LR__0102
021c4                 | '   if lparts(1).part$="on" then lparts(1).part$="1" :lparts(1).token=token_decimal
021c4     2B 00 00 FF 
021c8     D8 E5 05 F1 | 	add	objptr, ##22488
021cc     F2 12 02 FB | 	rdlong	arg01, objptr
021d0     2B 00 00 FF 
021d4     D8 E5 85 F1 | 	sub	objptr, ##22488
021d8     25 01 00 FF 
021dc     72 14 06 F6 | 	mov	arg02, ##@LR__4135
021e0     04 36 B1 FD | 	call	#__system___string_cmp
021e4     00 FA 0D F2 | 	cmp	result1, #0 wz
021e8     28 00 90 5D |  if_ne	jmp	#LR__0100
021ec     25 01 00 FF 
021f0     75 1E 06 F6 | 	mov	local01, ##@LR__4136
021f4     2B 00 00 FF 
021f8     D8 E5 05 F1 | 	add	objptr, ##22488
021fc     F2 1E 62 FC | 	wrlong	local01, objptr
02200     04 E4 05 F1 | 	add	objptr, #4
02204     01 00 80 FF 
02208     F2 00 68 FC | 	wrlong	##512, objptr
0220c     2B 00 00 FF 
02210     DC E5 85 F1 | 	sub	objptr, ##22492
02214                 | LR__0100
02214                 | '   if lparts(1).part$="off" then lparts(1).part$="0" :lparts(1).token=token_decimal
02214     2B 00 00 FF 
02218     D8 E5 05 F1 | 	add	objptr, ##22488
0221c     F2 12 02 FB | 	rdlong	arg01, objptr
02220     2B 00 00 FF 
02224     D8 E5 85 F1 | 	sub	objptr, ##22488
02228     25 01 00 FF 
0222c     77 28 06 F6 | 	mov	local06, ##@LR__4137
02230     14 15 02 F6 | 	mov	arg02, local06
02234     B0 35 B1 FD | 	call	#__system___string_cmp
02238     00 FA 0D F2 | 	cmp	result1, #0 wz
0223c     28 00 90 5D |  if_ne	jmp	#LR__0101
02240     25 01 00 FF 
02244     7B 1E 06 F6 | 	mov	local01, ##@LR__4138
02248     2B 00 00 FF 
0224c     D8 E5 05 F1 | 	add	objptr, ##22488
02250     F2 1E 62 FC | 	wrlong	local01, objptr
02254     04 E4 05 F1 | 	add	objptr, #4
02258     01 00 80 FF 
0225c     F2 00 68 FC | 	wrlong	##512, objptr
02260     2B 00 00 FF 
02264     DC E5 85 F1 | 	sub	objptr, ##22492
02268                 | LR__0101
02268                 | LR__0102
02268                 | ' 
02268                 | ' '2b determine a type of the line
02268                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
02268     2B 00 00 FF 
0226c     D0 E5 05 F1 | 	add	objptr, ##22480
02270     F2 12 02 FB | 	rdlong	arg01, objptr
02274     2B 00 00 FF 
02278     D0 E5 85 F1 | 	sub	objptr, ##22480
0227c     94 18 B0 FD | 	call	#_isdec
02280     00 FA 0D F2 | 	cmp	result1, #0 wz
02284     20 00 90 AD |  if_e	jmp	#LR__0103
02288     2B 00 00 FF 
0228c     D0 E5 05 F1 | 	add	objptr, ##22480
02290     F2 12 02 FB | 	rdlong	arg01, objptr
02294     2B 00 00 FF 
02298     D0 E5 85 F1 | 	sub	objptr, ##22480
0229c     00 14 06 F6 | 	mov	arg02, #0
022a0     A8 65 B1 FD | 	call	#__system____builtin_atoi
022a4     FD 20 02 F6 | 	mov	local02, result1
022a8                 | LR__0103
022a8                 | ' 
022a8                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
022a8     01 20 16 F2 | 	cmp	local02, #1 wc
022ac     2C 00 90 CD |  if_b	jmp	#LR__0104
022b0     01 32 0E F2 | 	cmp	local11, #1 wz
022b4     2D 00 00 AF 
022b8     E8 E5 05 A1 |  if_e	add	objptr, ##23528
022bc     F2 1E 02 AB |  if_e	rdlong	local01, objptr
022c0     2D 00 00 AF 
022c4     E8 E5 85 A1 |  if_e	sub	objptr, ##23528
022c8     03 1E 0E A2 |  if_e	cmp	local01, #3 wz
022cc     0C 00 90 5D |  if_ne	jmp	#LR__0104
022d0     10 13 02 F6 | 	mov	arg01, local02
022d4     60 19 B0 FD | 	call	#_deleteline
022d8     C8 04 90 FD | 	jmp	#LR__0120
022dc                 | LR__0104
022dc                 | ' 
022dc                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
022dc     01 20 16 F2 | 	cmp	local02, #1 wc
022e0     E0 00 90 CD |  if_b	jmp	#LR__0107
022e4     2D 00 00 FF 
022e8     E8 E5 05 F1 | 	add	objptr, ##23528
022ec     F2 1E 0A FB | 	rdlong	local01, objptr wz
022f0     2D 00 00 FF 
022f4     E8 E5 85 F1 | 	sub	objptr, ##23528
022f8     20 00 90 AD |  if_e	jmp	#LR__0105
022fc     2D 00 00 FF 
02300     E8 E5 05 F1 | 	add	objptr, ##23528
02304     F2 3C 02 FB | 	rdlong	local16, objptr
02308     2D 00 00 FF 
0230c     E8 E5 85 F1 | 	sub	objptr, ##23528
02310     1E 29 02 F6 | 	mov	local06, local16
02314     03 28 0E F2 | 	cmp	local06, #3 wz
02318     A8 00 90 5D |  if_ne	jmp	#LR__0107
0231c                 | LR__0105
0231c     2B 00 00 FF 
02320     E4 E5 05 F1 | 	add	objptr, ##22500
02324     F2 2E 02 FB | 	rdlong	local09, objptr
02328     2B 00 00 FF 
0232c     E4 E5 85 F1 | 	sub	objptr, ##22500
02330     17 2B 02 F6 | 	mov	local07, local09
02334     1B 2A 0E F2 | 	cmp	local07, #27 wz
02338     88 00 90 AD |  if_e	jmp	#LR__0107
0233c     2D 00 00 FF 
02340     E8 E5 05 F1 | 	add	objptr, ##23528
02344     F2 16 02 FB | 	rdlong	arg03, objptr
02348     2D 00 00 FF 
0234c     E8 E5 85 F1 | 	sub	objptr, ##23528
02350     10 13 02 F6 | 	mov	arg01, local02
02354     00 14 06 F6 | 	mov	arg02, #0
02358     54 2B B0 FD | 	call	#_compile
0235c     FD 22 0A F6 | 	mov	local03, result1 wz
02360                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02360                 | '   if err<>0 then printerror(err): goto 104
02360     0C 00 90 AD |  if_e	jmp	#LR__0106
02364     11 13 02 F6 | 	mov	arg01, local03
02368     58 FF B0 FD | 	call	#_printerror
0236c     34 04 90 FD | 	jmp	#LR__0120
02370                 | LR__0106
02370                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
02370     52 00 00 FF 
02374     68 E4 05 F1 | 	add	objptr, ##42088
02378     F2 12 02 FB | 	rdlong	arg01, objptr
0237c     52 00 00 FF 
02380     68 E4 85 F1 | 	sub	objptr, ##42088
02384     25 01 00 FF 
02388     7D 14 06 F6 | 	mov	arg02, ##@LR__4139
0238c     58 34 B1 FD | 	call	#__system___string_cmp
02390     00 FA 0D F2 | 	cmp	result1, #0 wz
02394     0C 04 90 AD |  if_e	jmp	#LR__0120
02398     52 00 00 FF 
0239c     68 E4 05 F1 | 	add	objptr, ##42088
023a0     F2 1E 02 FB | 	rdlong	local01, objptr
023a4     24 00 00 FF 
023a8     88 E4 85 F1 | 	sub	objptr, ##18568
023ac     F2 1E 62 FC | 	wrlong	local01, objptr
023b0     08 E4 05 F1 | 	add	objptr, #8
023b4     F2 08 68 FC | 	wrlong	#4, objptr
023b8     2D 00 00 FF 
023bc     E8 E5 85 F1 | 	sub	objptr, ##23528
023c0     A4 E6 9F FD | 	jmp	#LR__0020
023c4                 | LR__0107
023c4                 | '       							
023c4                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
023c4     01 20 16 F2 | 	cmp	local02, #1 wc
023c8     E4 00 90 CD |  if_b	jmp	#LR__0110
023cc     2D 00 00 FF 
023d0     E8 E5 05 F1 | 	add	objptr, ##23528
023d4     F2 1E 02 FB | 	rdlong	local01, objptr
023d8     2D 00 00 FF 
023dc     E8 E5 85 F1 | 	sub	objptr, ##23528
023e0     01 1E 0E F2 | 	cmp	local01, #1 wz
023e4     20 00 90 AD |  if_e	jmp	#LR__0108
023e8     2D 00 00 FF 
023ec     E8 E5 05 F1 | 	add	objptr, ##23528
023f0     F2 3C 02 FB | 	rdlong	local16, objptr
023f4     2D 00 00 FF 
023f8     E8 E5 85 F1 | 	sub	objptr, ##23528
023fc     1E 29 02 F6 | 	mov	local06, local16
02400     02 28 0E F2 | 	cmp	local06, #2 wz
02404     A8 00 90 5D |  if_ne	jmp	#LR__0110
02408                 | LR__0108
02408     2B 00 00 FF 
0240c     DC E5 05 F1 | 	add	objptr, ##22492
02410     F2 2E 02 FB | 	rdlong	local09, objptr
02414     2B 00 00 FF 
02418     DC E5 85 F1 | 	sub	objptr, ##22492
0241c     17 2B 02 F6 | 	mov	local07, local09
02420     1B 2A 0E F2 | 	cmp	local07, #27 wz
02424     88 00 90 AD |  if_e	jmp	#LR__0110
02428     2D 00 00 FF 
0242c     E8 E5 05 F1 | 	add	objptr, ##23528
02430     F2 16 02 FB | 	rdlong	arg03, objptr
02434     2D 00 00 FF 
02438     E8 E5 85 F1 | 	sub	objptr, ##23528
0243c     10 13 02 F6 | 	mov	arg01, local02
02440     00 14 06 F6 | 	mov	arg02, #0
02444     68 2A B0 FD | 	call	#_compile
02448     FD 22 0A F6 | 	mov	local03, result1 wz
0244c                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
0244c                 | '   if err<>0 then printerror(err): goto 104
0244c     0C 00 90 AD |  if_e	jmp	#LR__0109
02450     11 13 02 F6 | 	mov	arg01, local03
02454     6C FE B0 FD | 	call	#_printerror
02458     48 03 90 FD | 	jmp	#LR__0120
0245c                 | LR__0109
0245c                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
0245c     52 00 00 FF 
02460     68 E4 05 F1 | 	add	objptr, ##42088
02464     F2 12 02 FB | 	rdlong	arg01, objptr
02468     52 00 00 FF 
0246c     68 E4 85 F1 | 	sub	objptr, ##42088
02470     25 01 00 FF 
02474     7E 14 06 F6 | 	mov	arg02, ##@LR__4140
02478     6C 33 B1 FD | 	call	#__system___string_cmp
0247c     00 FA 0D F2 | 	cmp	result1, #0 wz
02480     20 03 90 AD |  if_e	jmp	#LR__0120
02484     52 00 00 FF 
02488     68 E4 05 F1 | 	add	objptr, ##42088
0248c     F2 1E 02 FB | 	rdlong	local01, objptr
02490     24 00 00 FF 
02494     88 E4 85 F1 | 	sub	objptr, ##18568
02498     F2 1E 62 FC | 	wrlong	local01, objptr
0249c     08 E4 05 F1 | 	add	objptr, #8
024a0     F2 08 68 FC | 	wrlong	#4, objptr
024a4     2D 00 00 FF 
024a8     E8 E5 85 F1 | 	sub	objptr, ##23528
024ac     B8 E5 9F FD | 	jmp	#LR__0020
024b0                 | LR__0110
024b0                 | ' 							 
024b0                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
024b0     01 20 16 F2 | 	cmp	local02, #1 wc
024b4     C0 00 90 CD |  if_b	jmp	#LR__0111
024b8     2D 00 00 FF 
024bc     E8 E5 05 F1 | 	add	objptr, ##23528
024c0     F2 1E 0A FB | 	rdlong	local01, objptr wz
024c4     2D 00 00 FF 
024c8     E8 E5 85 F1 | 	sub	objptr, ##23528
024cc     2D 00 00 5F 
024d0     E8 E5 05 51 |  if_ne	add	objptr, ##23528
024d4     F2 3C 02 5B |  if_ne	rdlong	local16, objptr
024d8     2D 00 00 5F 
024dc     E8 E5 85 51 |  if_ne	sub	objptr, ##23528
024e0     03 3C 0E 52 |  if_ne	cmp	local16, #3 wz
024e4     2B 00 00 AF 
024e8     E4 E5 05 A1 |  if_e	add	objptr, ##22500
024ec     F2 2E 02 AB |  if_e	rdlong	local09, objptr
024f0     2B 00 00 AF 
024f4     E4 E5 85 A1 |  if_e	sub	objptr, ##22500
024f8     17 2B 02 A6 |  if_e	mov	local07, local09
024fc     1B 2A 0E A2 |  if_e	cmp	local07, #27 wz
02500     74 00 90 5D |  if_ne	jmp	#LR__0111
02504     2D 00 00 FF 
02508     E8 E5 05 F1 | 	add	objptr, ##23528
0250c     F2 16 02 FB | 	rdlong	arg03, objptr
02510     2D 00 00 FF 
02514     E8 E5 85 F1 | 	sub	objptr, ##23528
02518     10 13 02 F6 | 	mov	arg01, local02
0251c     00 14 06 F6 | 	mov	arg02, #0
02520     5C 2A B0 FD | 	call	#_compile_assign
02524                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
02524                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
02524     52 00 00 FF 
02528     68 E4 05 F1 | 	add	objptr, ##42088
0252c     F2 12 02 FB | 	rdlong	arg01, objptr
02530     52 00 00 FF 
02534     68 E4 85 F1 | 	sub	objptr, ##42088
02538     25 01 00 FF 
0253c     7F 14 06 F6 | 	mov	arg02, ##@LR__4141
02540     A4 32 B1 FD | 	call	#__system___string_cmp
02544     00 FA 0D F2 | 	cmp	result1, #0 wz
02548     58 02 90 AD |  if_e	jmp	#LR__0120
0254c     52 00 00 FF 
02550     68 E4 05 F1 | 	add	objptr, ##42088
02554     F2 1E 02 FB | 	rdlong	local01, objptr
02558     24 00 00 FF 
0255c     88 E4 85 F1 | 	sub	objptr, ##18568
02560     F2 1E 62 FC | 	wrlong	local01, objptr
02564     08 E4 05 F1 | 	add	objptr, #8
02568     F2 08 68 FC | 	wrlong	#4, objptr
0256c     2D 00 00 FF 
02570     E8 E5 85 F1 | 	sub	objptr, ##23528
02574     F0 E4 9F FD | 	jmp	#LR__0020
02578                 | LR__0111
02578                 | '     							 
02578                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
02578     01 20 16 F2 | 	cmp	local02, #1 wc
0257c     C0 00 90 CD |  if_b	jmp	#LR__0112
02580     2D 00 00 FF 
02584     E8 E5 05 F1 | 	add	objptr, ##23528
02588     F2 1E 02 FB | 	rdlong	local01, objptr
0258c     2D 00 00 FF 
02590     E8 E5 85 F1 | 	sub	objptr, ##23528
02594     01 1E 0E F2 | 	cmp	local01, #1 wz
02598     2D 00 00 5F 
0259c     E8 E5 05 51 |  if_ne	add	objptr, ##23528
025a0     F2 28 02 5B |  if_ne	rdlong	local06, objptr
025a4     2D 00 00 5F 
025a8     E8 E5 85 51 |  if_ne	sub	objptr, ##23528
025ac     02 28 0E 52 |  if_ne	cmp	local06, #2 wz
025b0     2B 00 00 AF 
025b4     DC E5 05 A1 |  if_e	add	objptr, ##22492
025b8     F2 2E 02 AB |  if_e	rdlong	local09, objptr
025bc     2B 00 00 AF 
025c0     DC E5 85 A1 |  if_e	sub	objptr, ##22492
025c4     1B 2E 0E A2 |  if_e	cmp	local09, #27 wz
025c8     74 00 90 5D |  if_ne	jmp	#LR__0112
025cc     2D 00 00 FF 
025d0     E8 E5 05 F1 | 	add	objptr, ##23528
025d4     F2 16 02 FB | 	rdlong	arg03, objptr
025d8     2D 00 00 FF 
025dc     E8 E5 85 F1 | 	sub	objptr, ##23528
025e0     10 13 02 F6 | 	mov	arg01, local02
025e4     00 14 06 F6 | 	mov	arg02, #0
025e8     94 29 B0 FD | 	call	#_compile_assign
025ec                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
025ec                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
025ec     52 00 00 FF 
025f0     68 E4 05 F1 | 	add	objptr, ##42088
025f4     F2 12 02 FB | 	rdlong	arg01, objptr
025f8     52 00 00 FF 
025fc     68 E4 85 F1 | 	sub	objptr, ##42088
02600     25 01 00 FF 
02604     80 14 06 F6 | 	mov	arg02, ##@LR__4142
02608     DC 31 B1 FD | 	call	#__system___string_cmp
0260c     00 FA 0D F2 | 	cmp	result1, #0 wz
02610     90 01 90 AD |  if_e	jmp	#LR__0120
02614     52 00 00 FF 
02618     68 E4 05 F1 | 	add	objptr, ##42088
0261c     F2 1E 02 FB | 	rdlong	local01, objptr
02620     24 00 00 FF 
02624     88 E4 85 F1 | 	sub	objptr, ##18568
02628     F2 1E 62 FC | 	wrlong	local01, objptr
0262c     08 E4 05 F1 | 	add	objptr, #8
02630     F2 08 68 FC | 	wrlong	#4, objptr
02634     2D 00 00 FF 
02638     E8 E5 85 F1 | 	sub	objptr, ##23528
0263c     28 E4 9F FD | 	jmp	#LR__0020
02640                 | LR__0112
02640                 | ' 
02640                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
02640     2B 00 00 FF 
02644     D4 E5 05 F1 | 	add	objptr, ##22484
02648     F2 1E 02 FB | 	rdlong	local01, objptr
0264c     2B 00 00 FF 
02650     D4 E5 85 F1 | 	sub	objptr, ##22484
02654     01 00 00 FF 
02658     04 1E 0E F2 | 	cmp	local01, ##516 wz
0265c     2B 00 00 AF 
02660     DC E5 05 A1 |  if_e	add	objptr, ##22492
02664     F2 28 02 AB |  if_e	rdlong	local06, objptr
02668     2B 00 00 AF 
0266c     DC E5 85 A1 |  if_e	sub	objptr, ##22492
02670     1B 28 0E A2 |  if_e	cmp	local06, #27 wz
02674     14 00 90 5D |  if_ne	jmp	#LR__0113
02678     00 12 06 F6 | 	mov	arg01, #0
0267c     00 14 06 F6 | 	mov	arg02, #0
02680     00 16 06 F6 | 	mov	arg03, #0
02684     F8 28 B0 FD | 	call	#_compile_assign
02688     90 00 90 FD | 	jmp	#LR__0115
0268c                 | LR__0113
0268c                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
0268c     2B 00 00 FF 
02690     D4 E5 05 F1 | 	add	objptr, ##22484
02694     F2 1E 02 FB | 	rdlong	local01, objptr
02698     2B 00 00 FF 
0269c     D4 E5 85 F1 | 	sub	objptr, ##22484
026a0     01 00 00 FF 
026a4     04 1E 0E F2 | 	cmp	local01, ##516 wz
026a8     2B 00 00 AF 
026ac     DC E5 05 A1 |  if_e	add	objptr, ##22492
026b0     F2 28 02 AB |  if_e	rdlong	local06, objptr
026b4     2B 00 00 AF 
026b8     DC E5 85 A1 |  if_e	sub	objptr, ##22492
026bc     14 28 0E A2 |  if_e	cmp	local06, #20 wz
026c0     44 00 90 5D |  if_ne	jmp	#LR__0114
026c4     00 12 06 F6 | 	mov	arg01, #0
026c8     A4 86 B1 FD | 	call	#__system___getiolock_0369
026cc     FD 12 02 F6 | 	mov	arg01, result1
026d0     EC 30 B1 FD | 	call	#__system___lockmem
026d4     25 01 00 FF 
026d8     81 14 06 F6 | 	mov	arg02, ##@LR__4143
026dc     00 12 06 F6 | 	mov	arg01, #0
026e0     00 16 06 F6 | 	mov	arg03, #0
026e4     CC 3D B1 FD | 	call	#__system___basic_print_string
026e8     00 12 06 F6 | 	mov	arg01, #0
026ec     0A 14 06 F6 | 	mov	arg02, #10
026f0     00 16 06 F6 | 	mov	arg03, #0
026f4     64 3D B1 FD | 	call	#__system___basic_print_char
026f8     00 12 06 F6 | 	mov	arg01, #0
026fc     70 86 B1 FD | 	call	#__system___getiolock_0369
02700     FD 00 68 FC | 	wrlong	#0, result1
02704     7C 00 90 FD | 	jmp	#LR__0119
02708                 | LR__0114
02708     00 12 06 F6 | 	mov	arg01, #0
0270c     00 14 06 F6 | 	mov	arg02, #0
02710     00 16 06 F6 | 	mov	arg03, #0
02714     98 27 B0 FD | 	call	#_compile
02718     FD 22 02 F6 | 	mov	local03, result1
0271c                 | LR__0115
0271c                 | ' 
0271c                 | ' ' if we are here, this is not a program line to add, so try to execute this
0271c                 | ' 
0271c                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
0271c                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
0271c                 | ' if err=0 then execute_line() else printerror(err)
0271c     00 22 0E F2 | 	cmp	local03, #0 wz
02720     0C 00 90 5D |  if_ne	jmp	#LR__0116
02724     00 12 06 F6 | 	mov	arg01, #0
02728     44 61 B0 FD | 	call	#_execute_line
0272c     08 00 90 FD | 	jmp	#LR__0117
02730                 | LR__0116
02730     11 13 02 F6 | 	mov	arg01, local03
02734     8C FB B0 FD | 	call	#_printerror
02738                 | LR__0117
02738                 | ' if rest$<>"" then line$=rest$:  goto 108 
02738     52 00 00 FF 
0273c     68 E4 05 F1 | 	add	objptr, ##42088
02740     F2 12 02 FB | 	rdlong	arg01, objptr
02744     52 00 00 FF 
02748     68 E4 85 F1 | 	sub	objptr, ##42088
0274c     25 01 00 FF 
02750     B0 14 06 F6 | 	mov	arg02, ##@LR__4144
02754     90 30 B1 FD | 	call	#__system___string_cmp
02758     00 FA 0D F2 | 	cmp	result1, #0 wz
0275c     24 00 90 AD |  if_e	jmp	#LR__0118
02760     52 00 00 FF 
02764     68 E4 05 F1 | 	add	objptr, ##42088
02768     F2 1E 02 FB | 	rdlong	local01, objptr
0276c     24 00 00 FF 
02770     88 E4 85 F1 | 	sub	objptr, ##18568
02774     F2 1E 62 FC | 	wrlong	local01, objptr
02778     2D 00 00 FF 
0277c     E0 E5 85 F1 | 	sub	objptr, ##23520
02780     E4 E2 9F FD | 	jmp	#LR__0020
02784                 | LR__0118
02784                 | LR__0119
02784     25 01 00 FF 
02788     B1 12 06 F6 | 	mov	arg01, ##@LR__4145
0278c                 | ' 
0278c                 | ' write(text)
0278c     0C 20 B1 FD | 	call	#_hg010b_spin2_write
02790                 | ' crlf
02790     68 21 B1 FD | 	call	#_hg010b_spin2_crlf
02794     25 01 00 FF 
02798     B2 12 06 F6 | 	mov	arg01, ##@LR__4146
0279c                 | ' 
0279c                 | ' write(text)
0279c     FC 1F B1 FD | 	call	#_hg010b_spin2_write
027a0                 | ' crlf
027a0     58 21 B1 FD | 	call	#_hg010b_spin2_crlf
027a4                 | LR__0120
027a4     A7 F0 03 F6 | 	mov	ptra, fp
027a8     B2 00 A0 FD | 	call	#popregs_
027ac                 | _interpret_ret
027ac     2D 00 64 FD | 	ret
027b0                 | 
027b0                 | ' 
027b0                 | ' 
027b0                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
027b0                 | ' 
027b0                 | ' function isoperator(s as string) as ubyte
027b0                 | _isoperator
027b0     01 4A 05 F6 | 	mov	COUNT_, #1
027b4     A8 00 A0 FD | 	call	#pushregs_
027b8                 | ' 
027b8                 | ' select case s
027b8     09 1F 02 F6 | 	mov	local01, arg01
027bc     25 01 00 FF 
027c0     B8 14 06 F6 | 	mov	arg02, ##@LR__4147
027c4     0F 13 02 F6 | 	mov	arg01, local01
027c8     1C 30 B1 FD | 	call	#__system___string_cmp
027cc     00 FA 0D F2 | 	cmp	result1, #0 wz
027d0     FC 01 90 AD |  if_e	jmp	#LR__0130
027d4     25 01 00 FF 
027d8     BA 14 06 F6 | 	mov	arg02, ##@LR__4148
027dc     0F 13 02 F6 | 	mov	arg01, local01
027e0     04 30 B1 FD | 	call	#__system___string_cmp
027e4     00 FA 0D F2 | 	cmp	result1, #0 wz
027e8     EC 01 90 AD |  if_e	jmp	#LR__0131
027ec     25 01 00 FF 
027f0     BC 14 06 F6 | 	mov	arg02, ##@LR__4149
027f4     0F 13 02 F6 | 	mov	arg01, local01
027f8     EC 2F B1 FD | 	call	#__system___string_cmp
027fc     00 FA 0D F2 | 	cmp	result1, #0 wz
02800     DC 01 90 AD |  if_e	jmp	#LR__0132
02804     25 01 00 FF 
02808     BF 14 06 F6 | 	mov	arg02, ##@LR__4150
0280c     0F 13 02 F6 | 	mov	arg01, local01
02810     D4 2F B1 FD | 	call	#__system___string_cmp
02814     00 FA 0D F2 | 	cmp	result1, #0 wz
02818     CC 01 90 AD |  if_e	jmp	#LR__0133
0281c     25 01 00 FF 
02820     C3 14 06 F6 | 	mov	arg02, ##@LR__4151
02824     0F 13 02 F6 | 	mov	arg01, local01
02828     BC 2F B1 FD | 	call	#__system___string_cmp
0282c     00 FA 0D F2 | 	cmp	result1, #0 wz
02830     BC 01 90 AD |  if_e	jmp	#LR__0134
02834     25 01 00 FF 
02838     C5 14 06 F6 | 	mov	arg02, ##@LR__4152
0283c     0F 13 02 F6 | 	mov	arg01, local01
02840     A4 2F B1 FD | 	call	#__system___string_cmp
02844     00 FA 0D F2 | 	cmp	result1, #0 wz
02848     AC 01 90 AD |  if_e	jmp	#LR__0135
0284c     25 01 00 FF 
02850     C7 14 06 F6 | 	mov	arg02, ##@LR__4153
02854     0F 13 02 F6 | 	mov	arg01, local01
02858     8C 2F B1 FD | 	call	#__system___string_cmp
0285c     00 FA 0D F2 | 	cmp	result1, #0 wz
02860     9C 01 90 AD |  if_e	jmp	#LR__0136
02864     25 01 00 FF 
02868     CB 14 06 F6 | 	mov	arg02, ##@LR__4154
0286c     0F 13 02 F6 | 	mov	arg01, local01
02870     74 2F B1 FD | 	call	#__system___string_cmp
02874     00 FA 0D F2 | 	cmp	result1, #0 wz
02878     8C 01 90 AD |  if_e	jmp	#LR__0137
0287c     25 01 00 FF 
02880     CF 14 06 F6 | 	mov	arg02, ##@LR__4155
02884     0F 13 02 F6 | 	mov	arg01, local01
02888     5C 2F B1 FD | 	call	#__system___string_cmp
0288c     00 FA 0D F2 | 	cmp	result1, #0 wz
02890     7C 01 90 AD |  if_e	jmp	#LR__0138
02894     25 01 00 FF 
02898     D3 14 06 F6 | 	mov	arg02, ##@LR__4156
0289c     0F 13 02 F6 | 	mov	arg01, local01
028a0     44 2F B1 FD | 	call	#__system___string_cmp
028a4     00 FA 0D F2 | 	cmp	result1, #0 wz
028a8     6C 01 90 AD |  if_e	jmp	#LR__0139
028ac     25 01 00 FF 
028b0     D7 14 06 F6 | 	mov	arg02, ##@LR__4157
028b4     0F 13 02 F6 | 	mov	arg01, local01
028b8     2C 2F B1 FD | 	call	#__system___string_cmp
028bc     00 FA 0D F2 | 	cmp	result1, #0 wz
028c0     5C 01 90 AD |  if_e	jmp	#LR__0140
028c4     25 01 00 FF 
028c8     DB 14 06 F6 | 	mov	arg02, ##@LR__4158
028cc     0F 13 02 F6 | 	mov	arg01, local01
028d0     14 2F B1 FD | 	call	#__system___string_cmp
028d4     00 FA 0D F2 | 	cmp	result1, #0 wz
028d8     4C 01 90 AD |  if_e	jmp	#LR__0141
028dc     25 01 00 FF 
028e0     DD 14 06 F6 | 	mov	arg02, ##@LR__4159
028e4     0F 13 02 F6 | 	mov	arg01, local01
028e8     FC 2E B1 FD | 	call	#__system___string_cmp
028ec     00 FA 0D F2 | 	cmp	result1, #0 wz
028f0     3C 01 90 AD |  if_e	jmp	#LR__0142
028f4     25 01 00 FF 
028f8     E1 14 06 F6 | 	mov	arg02, ##@LR__4160
028fc     0F 13 02 F6 | 	mov	arg01, local01
02900     E4 2E B1 FD | 	call	#__system___string_cmp
02904     00 FA 0D F2 | 	cmp	result1, #0 wz
02908     2C 01 90 AD |  if_e	jmp	#LR__0143
0290c     25 01 00 FF 
02910     E3 14 06 F6 | 	mov	arg02, ##@LR__4161
02914     0F 13 02 F6 | 	mov	arg01, local01
02918     CC 2E B1 FD | 	call	#__system___string_cmp
0291c     00 FA 0D F2 | 	cmp	result1, #0 wz
02920     1C 01 90 AD |  if_e	jmp	#LR__0144
02924     25 01 00 FF 
02928     E5 14 06 F6 | 	mov	arg02, ##@LR__4162
0292c     0F 13 02 F6 | 	mov	arg01, local01
02930     B4 2E B1 FD | 	call	#__system___string_cmp
02934     00 FA 0D F2 | 	cmp	result1, #0 wz
02938     0C 01 90 AD |  if_e	jmp	#LR__0145
0293c     25 01 00 FF 
02940     E8 14 06 F6 | 	mov	arg02, ##@LR__4163
02944     0F 13 02 F6 | 	mov	arg01, local01
02948     9C 2E B1 FD | 	call	#__system___string_cmp
0294c     00 FA 0D F2 | 	cmp	result1, #0 wz
02950     FC 00 90 AD |  if_e	jmp	#LR__0146
02954     25 01 00 FF 
02958     EB 14 06 F6 | 	mov	arg02, ##@LR__4164
0295c     0F 13 02 F6 | 	mov	arg01, local01
02960     84 2E B1 FD | 	call	#__system___string_cmp
02964     00 FA 0D F2 | 	cmp	result1, #0 wz
02968     EC 00 90 AD |  if_e	jmp	#LR__0147
0296c     25 01 00 FF 
02970     ED 14 06 F6 | 	mov	arg02, ##@LR__4165
02974     0F 13 02 F6 | 	mov	arg01, local01
02978     6C 2E B1 FD | 	call	#__system___string_cmp
0297c     00 FA 0D F2 | 	cmp	result1, #0 wz
02980     DC 00 90 AD |  if_e	jmp	#LR__0148
02984     25 01 00 FF 
02988     EF 14 06 F6 | 	mov	arg02, ##@LR__4166
0298c     0F 13 02 F6 | 	mov	arg01, local01
02990     54 2E B1 FD | 	call	#__system___string_cmp
02994     00 FA 0D F2 | 	cmp	result1, #0 wz
02998     CC 00 90 AD |  if_e	jmp	#LR__0149
0299c     25 01 00 FF 
029a0     F2 14 06 F6 | 	mov	arg02, ##@LR__4167
029a4     0F 13 02 F6 | 	mov	arg01, local01
029a8     3C 2E B1 FD | 	call	#__system___string_cmp
029ac     00 FA 0D F2 | 	cmp	result1, #0 wz
029b0     BC 00 90 AD |  if_e	jmp	#LR__0150
029b4     25 01 00 FF 
029b8     F5 14 06 F6 | 	mov	arg02, ##@LR__4168
029bc     0F 13 02 F6 | 	mov	arg01, local01
029c0     24 2E B1 FD | 	call	#__system___string_cmp
029c4     00 FA 0D F2 | 	cmp	result1, #0 wz
029c8     AC 00 90 AD |  if_e	jmp	#LR__0151
029cc     B0 00 90 FD | 	jmp	#LR__0152
029d0                 | LR__0130
029d0     01 FA 05 F6 | 	mov	result1, #1
029d4     AC 00 90 FD | 	jmp	#LR__0153
029d8                 | LR__0131
029d8     02 FA 05 F6 | 	mov	result1, #2
029dc     A4 00 90 FD | 	jmp	#LR__0153
029e0                 | LR__0132
029e0     03 FA 05 F6 | 	mov	result1, #3
029e4     9C 00 90 FD | 	jmp	#LR__0153
029e8                 | LR__0133
029e8     04 FA 05 F6 | 	mov	result1, #4
029ec     94 00 90 FD | 	jmp	#LR__0153
029f0                 | LR__0134
029f0     05 FA 05 F6 | 	mov	result1, #5
029f4     8C 00 90 FD | 	jmp	#LR__0153
029f8                 | LR__0135
029f8     06 FA 05 F6 | 	mov	result1, #6
029fc     84 00 90 FD | 	jmp	#LR__0153
02a00                 | LR__0136
02a00     07 FA 05 F6 | 	mov	result1, #7
02a04     7C 00 90 FD | 	jmp	#LR__0153
02a08                 | LR__0137
02a08     08 FA 05 F6 | 	mov	result1, #8
02a0c     74 00 90 FD | 	jmp	#LR__0153
02a10                 | LR__0138
02a10     09 FA 05 F6 | 	mov	result1, #9
02a14     6C 00 90 FD | 	jmp	#LR__0153
02a18                 | LR__0139
02a18     0A FA 05 F6 | 	mov	result1, #10
02a1c     64 00 90 FD | 	jmp	#LR__0153
02a20                 | LR__0140
02a20     0B FA 05 F6 | 	mov	result1, #11
02a24     5C 00 90 FD | 	jmp	#LR__0153
02a28                 | LR__0141
02a28     0C FA 05 F6 | 	mov	result1, #12
02a2c     54 00 90 FD | 	jmp	#LR__0153
02a30                 | LR__0142
02a30     0D FA 05 F6 | 	mov	result1, #13
02a34     4C 00 90 FD | 	jmp	#LR__0153
02a38                 | LR__0143
02a38     0E FA 05 F6 | 	mov	result1, #14
02a3c     44 00 90 FD | 	jmp	#LR__0153
02a40                 | LR__0144
02a40     1B FA 05 F6 | 	mov	result1, #27
02a44     3C 00 90 FD | 	jmp	#LR__0153
02a48                 | LR__0145
02a48     27 FA 05 F6 | 	mov	result1, #39
02a4c     34 00 90 FD | 	jmp	#LR__0153
02a50                 | LR__0146
02a50     26 FA 05 F6 | 	mov	result1, #38
02a54     2C 00 90 FD | 	jmp	#LR__0153
02a58                 | LR__0147
02a58     10 FA 05 F6 | 	mov	result1, #16
02a5c     24 00 90 FD | 	jmp	#LR__0153
02a60                 | LR__0148
02a60     0F FA 05 F6 | 	mov	result1, #15
02a64     1C 00 90 FD | 	jmp	#LR__0153
02a68                 | LR__0149
02a68     2A FA 05 F6 | 	mov	result1, #42
02a6c     14 00 90 FD | 	jmp	#LR__0153
02a70                 | LR__0150
02a70     28 FA 05 F6 | 	mov	result1, #40
02a74     0C 00 90 FD | 	jmp	#LR__0153
02a78                 | LR__0151
02a78     29 FA 05 F6 | 	mov	result1, #41
02a7c     04 00 90 FD | 	jmp	#LR__0153
02a80                 | LR__0152
02a80     00 FA 05 F6 | 	mov	result1, #0
02a84                 | LR__0153
02a84     A7 F0 03 F6 | 	mov	ptra, fp
02a88     B2 00 A0 FD | 	call	#popregs_
02a8c                 | _isoperator_ret
02a8c     2D 00 64 FD | 	ret
02a90                 | 
02a90                 | ' 
02a90                 | ' function isseparator(s as string) as ubyte
02a90                 | _isseparator
02a90     01 4A 05 F6 | 	mov	COUNT_, #1
02a94     A8 00 A0 FD | 	call	#pushregs_
02a98                 | ' 
02a98                 | ' select case s
02a98     09 1F 02 F6 | 	mov	local01, arg01
02a9c     25 01 00 FF 
02aa0     F8 14 06 F6 | 	mov	arg02, ##@LR__4169
02aa4     0F 13 02 F6 | 	mov	arg01, local01
02aa8     3C 2D B1 FD | 	call	#__system___string_cmp
02aac     00 FA 0D F2 | 	cmp	result1, #0 wz
02ab0     54 01 90 AD |  if_e	jmp	#LR__0160
02ab4     25 01 00 FF 
02ab8     FA 14 06 F6 | 	mov	arg02, ##@LR__4170
02abc     0F 13 02 F6 | 	mov	arg01, local01
02ac0     24 2D B1 FD | 	call	#__system___string_cmp
02ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ac8     44 01 90 AD |  if_e	jmp	#LR__0161
02acc     25 01 00 FF 
02ad0     FC 14 06 F6 | 	mov	arg02, ##@LR__4171
02ad4     0F 13 02 F6 | 	mov	arg01, local01
02ad8     0C 2D B1 FD | 	call	#__system___string_cmp
02adc     00 FA 0D F2 | 	cmp	result1, #0 wz
02ae0     34 01 90 AD |  if_e	jmp	#LR__0162
02ae4     25 01 00 FF 
02ae8     FE 14 06 F6 | 	mov	arg02, ##@LR__4172
02aec     0F 13 02 F6 | 	mov	arg01, local01
02af0     F4 2C B1 FD | 	call	#__system___string_cmp
02af4     00 FA 0D F2 | 	cmp	result1, #0 wz
02af8     24 01 90 AD |  if_e	jmp	#LR__0163
02afc     25 01 00 FF 
02b00     00 15 06 F6 | 	mov	arg02, ##@LR__4173
02b04     0F 13 02 F6 | 	mov	arg01, local01
02b08     DC 2C B1 FD | 	call	#__system___string_cmp
02b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
02b10     14 01 90 AD |  if_e	jmp	#LR__0164
02b14     25 01 00 FF 
02b18     02 15 06 F6 | 	mov	arg02, ##@LR__4174
02b1c     0F 13 02 F6 | 	mov	arg01, local01
02b20     C4 2C B1 FD | 	call	#__system___string_cmp
02b24     00 FA 0D F2 | 	cmp	result1, #0 wz
02b28     04 01 90 AD |  if_e	jmp	#LR__0165
02b2c     25 01 00 FF 
02b30     04 15 06 F6 | 	mov	arg02, ##@LR__4175
02b34     0F 13 02 F6 | 	mov	arg01, local01
02b38     AC 2C B1 FD | 	call	#__system___string_cmp
02b3c     00 FA 0D F2 | 	cmp	result1, #0 wz
02b40     F4 00 90 AD |  if_e	jmp	#LR__0166
02b44     25 01 00 FF 
02b48     06 15 06 F6 | 	mov	arg02, ##@LR__4176
02b4c     0F 13 02 F6 | 	mov	arg01, local01
02b50     94 2C B1 FD | 	call	#__system___string_cmp
02b54     00 FA 0D F2 | 	cmp	result1, #0 wz
02b58     E4 00 90 AD |  if_e	jmp	#LR__0167
02b5c     25 01 00 FF 
02b60     08 15 06 F6 | 	mov	arg02, ##@LR__4177
02b64     0F 13 02 F6 | 	mov	arg01, local01
02b68     7C 2C B1 FD | 	call	#__system___string_cmp
02b6c     00 FA 0D F2 | 	cmp	result1, #0 wz
02b70     D4 00 90 AD |  if_e	jmp	#LR__0168
02b74     25 01 00 FF 
02b78     0A 15 06 F6 | 	mov	arg02, ##@LR__4178
02b7c     0F 13 02 F6 | 	mov	arg01, local01
02b80     64 2C B1 FD | 	call	#__system___string_cmp
02b84     00 FA 0D F2 | 	cmp	result1, #0 wz
02b88     C4 00 90 AD |  if_e	jmp	#LR__0169
02b8c     25 01 00 FF 
02b90     0C 15 06 F6 | 	mov	arg02, ##@LR__4179
02b94     0F 13 02 F6 | 	mov	arg01, local01
02b98     4C 2C B1 FD | 	call	#__system___string_cmp
02b9c     00 FA 0D F2 | 	cmp	result1, #0 wz
02ba0     B4 00 90 AD |  if_e	jmp	#LR__0170
02ba4     25 01 00 FF 
02ba8     0E 15 06 F6 | 	mov	arg02, ##@LR__4180
02bac     0F 13 02 F6 | 	mov	arg01, local01
02bb0     34 2C B1 FD | 	call	#__system___string_cmp
02bb4     00 FA 0D F2 | 	cmp	result1, #0 wz
02bb8     A4 00 90 AD |  if_e	jmp	#LR__0171
02bbc     25 01 00 FF 
02bc0     10 15 06 F6 | 	mov	arg02, ##@LR__4181
02bc4     0F 13 02 F6 | 	mov	arg01, local01
02bc8     1C 2C B1 FD | 	call	#__system___string_cmp
02bcc     00 FA 0D F2 | 	cmp	result1, #0 wz
02bd0     94 00 90 AD |  if_e	jmp	#LR__0172
02bd4     25 01 00 FF 
02bd8     12 15 06 F6 | 	mov	arg02, ##@LR__4182
02bdc     0F 13 02 F6 | 	mov	arg01, local01
02be0     04 2C B1 FD | 	call	#__system___string_cmp
02be4     00 FA 0D F2 | 	cmp	result1, #0 wz
02be8     84 00 90 AD |  if_e	jmp	#LR__0173
02bec     25 01 00 FF 
02bf0     14 15 06 F6 | 	mov	arg02, ##@LR__4183
02bf4     0F 13 02 F6 | 	mov	arg01, local01
02bf8     EC 2B B1 FD | 	call	#__system___string_cmp
02bfc     00 FA 0D F2 | 	cmp	result1, #0 wz
02c00     74 00 90 AD |  if_e	jmp	#LR__0174
02c04     78 00 90 FD | 	jmp	#LR__0175
02c08                 | LR__0160
02c08     01 FA 05 F6 | 	mov	result1, #1
02c0c     74 00 90 FD | 	jmp	#LR__0176
02c10                 | LR__0161
02c10     02 FA 05 F6 | 	mov	result1, #2
02c14     6C 00 90 FD | 	jmp	#LR__0176
02c18                 | LR__0162
02c18     1B FA 05 F6 | 	mov	result1, #27
02c1c     64 00 90 FD | 	jmp	#LR__0176
02c20                 | LR__0163
02c20     11 FA 05 F6 | 	mov	result1, #17
02c24     5C 00 90 FD | 	jmp	#LR__0176
02c28                 | LR__0164
02c28     05 FA 05 F6 | 	mov	result1, #5
02c2c     54 00 90 FD | 	jmp	#LR__0176
02c30                 | LR__0165
02c30     06 FA 05 F6 | 	mov	result1, #6
02c34     4C 00 90 FD | 	jmp	#LR__0176
02c38                 | LR__0166
02c38     12 FA 05 F6 | 	mov	result1, #18
02c3c     44 00 90 FD | 	jmp	#LR__0176
02c40                 | LR__0167
02c40     13 FA 05 F6 | 	mov	result1, #19
02c44     3C 00 90 FD | 	jmp	#LR__0176
02c48                 | LR__0168
02c48     0C FA 05 F6 | 	mov	result1, #12
02c4c     34 00 90 FD | 	jmp	#LR__0176
02c50                 | LR__0169
02c50     14 FA 05 F6 | 	mov	result1, #20
02c54     2C 00 90 FD | 	jmp	#LR__0176
02c58                 | LR__0170
02c58     15 FA 05 F6 | 	mov	result1, #21
02c5c     24 00 90 FD | 	jmp	#LR__0176
02c60                 | LR__0171
02c60     16 FA 05 F6 | 	mov	result1, #22
02c64     1C 00 90 FD | 	jmp	#LR__0176
02c68                 | LR__0172
02c68     FF FB 05 F6 | 	mov	result1, #511
02c6c     14 00 90 FD | 	jmp	#LR__0176
02c70                 | LR__0173
02c70     0F FA 05 F6 | 	mov	result1, #15
02c74     0C 00 90 FD | 	jmp	#LR__0176
02c78                 | LR__0174
02c78     10 FA 05 F6 | 	mov	result1, #16
02c7c     04 00 90 FD | 	jmp	#LR__0176
02c80                 | LR__0175
02c80     00 FA 05 F6 | 	mov	result1, #0
02c84                 | LR__0176
02c84     A7 F0 03 F6 | 	mov	ptra, fp
02c88     B2 00 A0 FD | 	call	#popregs_
02c8c                 | _isseparator_ret
02c8c     2D 00 64 FD | 	ret
02c90                 | 
02c90                 | ' 
02c90                 | ' 
02c90                 | ' function iscommand(s as string) as ubyte
02c90                 | _iscommand
02c90     01 4A 05 F6 | 	mov	COUNT_, #1
02c94     A8 00 A0 FD | 	call	#pushregs_
02c98                 | ' 
02c98                 | ' select case s
02c98     09 1F 02 F6 | 	mov	local01, arg01
02c9c     25 01 00 FF 
02ca0     18 15 06 F6 | 	mov	arg02, ##@LR__4185
02ca4     0F 13 02 F6 | 	mov	arg01, local01
02ca8     3C 2B B1 FD | 	call	#__system___string_cmp
02cac     00 FA 0D F2 | 	cmp	result1, #0 wz
02cb0     6C 04 90 AD |  if_e	jmp	#LR__0180
02cb4     25 01 00 FF 
02cb8     1C 15 06 F6 | 	mov	arg02, ##@LR__4186
02cbc     0F 13 02 F6 | 	mov	arg01, local01
02cc0     24 2B B1 FD | 	call	#__system___string_cmp
02cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
02cc8     5C 04 90 AD |  if_e	jmp	#LR__0181
02ccc     25 01 00 FF 
02cd0     20 15 06 F6 | 	mov	arg02, ##@LR__4187
02cd4     0F 13 02 F6 | 	mov	arg01, local01
02cd8     0C 2B B1 FD | 	call	#__system___string_cmp
02cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
02ce0     4C 04 90 AD |  if_e	jmp	#LR__0182
02ce4     25 01 00 FF 
02ce8     25 15 06 F6 | 	mov	arg02, ##@LR__4188
02cec     0F 13 02 F6 | 	mov	arg01, local01
02cf0     F4 2A B1 FD | 	call	#__system___string_cmp
02cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
02cf8     3C 04 90 AD |  if_e	jmp	#LR__0183
02cfc     25 01 00 FF 
02d00     2A 15 06 F6 | 	mov	arg02, ##@LR__4189
02d04     0F 13 02 F6 | 	mov	arg01, local01
02d08     DC 2A B1 FD | 	call	#__system___string_cmp
02d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d10     2C 04 90 AD |  if_e	jmp	#LR__0184
02d14     25 01 00 FF 
02d18     30 15 06 F6 | 	mov	arg02, ##@LR__4190
02d1c     0F 13 02 F6 | 	mov	arg01, local01
02d20     C4 2A B1 FD | 	call	#__system___string_cmp
02d24     00 FA 0D F2 | 	cmp	result1, #0 wz
02d28     1C 04 90 AD |  if_e	jmp	#LR__0185
02d2c     25 01 00 FF 
02d30     37 15 06 F6 | 	mov	arg02, ##@LR__4191
02d34     0F 13 02 F6 | 	mov	arg01, local01
02d38     AC 2A B1 FD | 	call	#__system___string_cmp
02d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d40     0C 04 90 AD |  if_e	jmp	#LR__0186
02d44     25 01 00 FF 
02d48     3F 15 06 F6 | 	mov	arg02, ##@LR__4192
02d4c     0F 13 02 F6 | 	mov	arg01, local01
02d50     94 2A B1 FD | 	call	#__system___string_cmp
02d54     00 FA 0D F2 | 	cmp	result1, #0 wz
02d58     FC 03 90 AD |  if_e	jmp	#LR__0187
02d5c     25 01 00 FF 
02d60     43 15 06 F6 | 	mov	arg02, ##@LR__4193
02d64     0F 13 02 F6 | 	mov	arg01, local01
02d68     7C 2A B1 FD | 	call	#__system___string_cmp
02d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d70     EC 03 90 AD |  if_e	jmp	#LR__0188
02d74     25 01 00 FF 
02d78     49 15 06 F6 | 	mov	arg02, ##@LR__4194
02d7c     0F 13 02 F6 | 	mov	arg01, local01
02d80     64 2A B1 FD | 	call	#__system___string_cmp
02d84     00 FA 0D F2 | 	cmp	result1, #0 wz
02d88     DC 03 90 AD |  if_e	jmp	#LR__0189
02d8c     25 01 00 FF 
02d90     4F 15 06 F6 | 	mov	arg02, ##@LR__4195
02d94     0F 13 02 F6 | 	mov	arg01, local01
02d98     4C 2A B1 FD | 	call	#__system___string_cmp
02d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
02da0     CC 03 90 AD |  if_e	jmp	#LR__0190
02da4     25 01 00 FF 
02da8     55 15 06 F6 | 	mov	arg02, ##@LR__4196
02dac     0F 13 02 F6 | 	mov	arg01, local01
02db0     34 2A B1 FD | 	call	#__system___string_cmp
02db4     00 FA 0D F2 | 	cmp	result1, #0 wz
02db8     BC 03 90 AD |  if_e	jmp	#LR__0191
02dbc     25 01 00 FF 
02dc0     5A 15 06 F6 | 	mov	arg02, ##@LR__4197
02dc4     0F 13 02 F6 | 	mov	arg01, local01
02dc8     1C 2A B1 FD | 	call	#__system___string_cmp
02dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
02dd0     AC 03 90 AD |  if_e	jmp	#LR__0192
02dd4     25 01 00 FF 
02dd8     5E 15 06 F6 | 	mov	arg02, ##@LR__4198
02ddc     0F 13 02 F6 | 	mov	arg01, local01
02de0     04 2A B1 FD | 	call	#__system___string_cmp
02de4     00 FA 0D F2 | 	cmp	result1, #0 wz
02de8     9C 03 90 AD |  if_e	jmp	#LR__0193
02dec     25 01 00 FF 
02df0     63 15 06 F6 | 	mov	arg02, ##@LR__4199
02df4     0F 13 02 F6 | 	mov	arg01, local01
02df8     EC 29 B1 FD | 	call	#__system___string_cmp
02dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
02e00     8C 03 90 AD |  if_e	jmp	#LR__0194
02e04     25 01 00 FF 
02e08     69 15 06 F6 | 	mov	arg02, ##@LR__4200
02e0c     0F 13 02 F6 | 	mov	arg01, local01
02e10     D4 29 B1 FD | 	call	#__system___string_cmp
02e14     00 FA 0D F2 | 	cmp	result1, #0 wz
02e18     7C 03 90 AD |  if_e	jmp	#LR__0195
02e1c     25 01 00 FF 
02e20     6E 15 06 F6 | 	mov	arg02, ##@LR__4201
02e24     0F 13 02 F6 | 	mov	arg01, local01
02e28     BC 29 B1 FD | 	call	#__system___string_cmp
02e2c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e30     6C 03 90 AD |  if_e	jmp	#LR__0196
02e34     25 01 00 FF 
02e38     73 15 06 F6 | 	mov	arg02, ##@LR__4202
02e3c     0F 13 02 F6 | 	mov	arg01, local01
02e40     A4 29 B1 FD | 	call	#__system___string_cmp
02e44     00 FA 0D F2 | 	cmp	result1, #0 wz
02e48     5C 03 90 AD |  if_e	jmp	#LR__0197
02e4c     25 01 00 FF 
02e50     78 15 06 F6 | 	mov	arg02, ##@LR__4203
02e54     0F 13 02 F6 | 	mov	arg01, local01
02e58     8C 29 B1 FD | 	call	#__system___string_cmp
02e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e60     4C 03 90 AD |  if_e	jmp	#LR__0198
02e64     25 01 00 FF 
02e68     81 15 06 F6 | 	mov	arg02, ##@LR__4204
02e6c     0F 13 02 F6 | 	mov	arg01, local01
02e70     74 29 B1 FD | 	call	#__system___string_cmp
02e74     00 FA 0D F2 | 	cmp	result1, #0 wz
02e78     3C 03 90 AD |  if_e	jmp	#LR__0199
02e7c     25 01 00 FF 
02e80     88 15 06 F6 | 	mov	arg02, ##@LR__4205
02e84     0F 13 02 F6 | 	mov	arg01, local01
02e88     5C 29 B1 FD | 	call	#__system___string_cmp
02e8c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e90     2C 03 90 AD |  if_e	jmp	#LR__0200
02e94     25 01 00 FF 
02e98     90 15 06 F6 | 	mov	arg02, ##@LR__4206
02e9c     0F 13 02 F6 | 	mov	arg01, local01
02ea0     44 29 B1 FD | 	call	#__system___string_cmp
02ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ea8     1C 03 90 AD |  if_e	jmp	#LR__0201
02eac     25 01 00 FF 
02eb0     93 15 06 F6 | 	mov	arg02, ##@LR__4207
02eb4     0F 13 02 F6 | 	mov	arg01, local01
02eb8     2C 29 B1 FD | 	call	#__system___string_cmp
02ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
02ec0     0C 03 90 AD |  if_e	jmp	#LR__0202
02ec4     25 01 00 FF 
02ec8     98 15 06 F6 | 	mov	arg02, ##@LR__4208
02ecc     0F 13 02 F6 | 	mov	arg01, local01
02ed0     14 29 B1 FD | 	call	#__system___string_cmp
02ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ed8     FC 02 90 AD |  if_e	jmp	#LR__0203
02edc     25 01 00 FF 
02ee0     9D 15 06 F6 | 	mov	arg02, ##@LR__4209
02ee4     0F 13 02 F6 | 	mov	arg01, local01
02ee8     FC 28 B1 FD | 	call	#__system___string_cmp
02eec     00 FA 0D F2 | 	cmp	result1, #0 wz
02ef0     EC 02 90 AD |  if_e	jmp	#LR__0204
02ef4     25 01 00 FF 
02ef8     A2 15 06 F6 | 	mov	arg02, ##@LR__4210
02efc     0F 13 02 F6 | 	mov	arg01, local01
02f00     E4 28 B1 FD | 	call	#__system___string_cmp
02f04     00 FA 0D F2 | 	cmp	result1, #0 wz
02f08     DC 02 90 AD |  if_e	jmp	#LR__0205
02f0c     25 01 00 FF 
02f10     A6 15 06 F6 | 	mov	arg02, ##@LR__4211
02f14     0F 13 02 F6 | 	mov	arg01, local01
02f18     CC 28 B1 FD | 	call	#__system___string_cmp
02f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
02f20     CC 02 90 AD |  if_e	jmp	#LR__0206
02f24     25 01 00 FF 
02f28     AA 15 06 F6 | 	mov	arg02, ##@LR__4212
02f2c     0F 13 02 F6 | 	mov	arg01, local01
02f30     B4 28 B1 FD | 	call	#__system___string_cmp
02f34     00 FA 0D F2 | 	cmp	result1, #0 wz
02f38     BC 02 90 AD |  if_e	jmp	#LR__0207
02f3c     25 01 00 FF 
02f40     AF 15 06 F6 | 	mov	arg02, ##@LR__4213
02f44     0F 13 02 F6 | 	mov	arg01, local01
02f48     9C 28 B1 FD | 	call	#__system___string_cmp
02f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
02f50     AC 02 90 AD |  if_e	jmp	#LR__0208
02f54     25 01 00 FF 
02f58     B5 15 06 F6 | 	mov	arg02, ##@LR__4214
02f5c     0F 13 02 F6 | 	mov	arg01, local01
02f60     84 28 B1 FD | 	call	#__system___string_cmp
02f64     00 FA 0D F2 | 	cmp	result1, #0 wz
02f68     9C 02 90 AD |  if_e	jmp	#LR__0209
02f6c     25 01 00 FF 
02f70     B9 15 06 F6 | 	mov	arg02, ##@LR__4215
02f74     0F 13 02 F6 | 	mov	arg01, local01
02f78     6C 28 B1 FD | 	call	#__system___string_cmp
02f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
02f80     8C 02 90 AD |  if_e	jmp	#LR__0210
02f84     25 01 00 FF 
02f88     BE 15 06 F6 | 	mov	arg02, ##@LR__4216
02f8c     0F 13 02 F6 | 	mov	arg01, local01
02f90     54 28 B1 FD | 	call	#__system___string_cmp
02f94     00 FA 0D F2 | 	cmp	result1, #0 wz
02f98     7C 02 90 AD |  if_e	jmp	#LR__0211
02f9c     25 01 00 FF 
02fa0     C3 15 06 F6 | 	mov	arg02, ##@LR__4217
02fa4     0F 13 02 F6 | 	mov	arg01, local01
02fa8     3C 28 B1 FD | 	call	#__system___string_cmp
02fac     00 FA 0D F2 | 	cmp	result1, #0 wz
02fb0     6C 02 90 AD |  if_e	jmp	#LR__0212
02fb4     25 01 00 FF 
02fb8     C9 15 06 F6 | 	mov	arg02, ##@LR__4218
02fbc     0F 13 02 F6 | 	mov	arg01, local01
02fc0     24 28 B1 FD | 	call	#__system___string_cmp
02fc4     00 FA 0D F2 | 	cmp	result1, #0 wz
02fc8     5C 02 90 AD |  if_e	jmp	#LR__0213
02fcc     25 01 00 FF 
02fd0     D0 15 06 F6 | 	mov	arg02, ##@LR__4219
02fd4     0F 13 02 F6 | 	mov	arg01, local01
02fd8     0C 28 B1 FD | 	call	#__system___string_cmp
02fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
02fe0     4C 02 90 AD |  if_e	jmp	#LR__0214
02fe4     25 01 00 FF 
02fe8     D6 15 06 F6 | 	mov	arg02, ##@LR__4220
02fec     0F 13 02 F6 | 	mov	arg01, local01
02ff0     F4 27 B1 FD | 	call	#__system___string_cmp
02ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ff8     3C 02 90 AD |  if_e	jmp	#LR__0215
02ffc     25 01 00 FF 
03000     E0 15 06 F6 | 	mov	arg02, ##@LR__4221
03004     0F 13 02 F6 | 	mov	arg01, local01
03008     DC 27 B1 FD | 	call	#__system___string_cmp
0300c     00 FA 0D F2 | 	cmp	result1, #0 wz
03010     2C 02 90 AD |  if_e	jmp	#LR__0216
03014     25 01 00 FF 
03018     E7 15 06 F6 | 	mov	arg02, ##@LR__4222
0301c     0F 13 02 F6 | 	mov	arg01, local01
03020     C4 27 B1 FD | 	call	#__system___string_cmp
03024     00 FA 0D F2 | 	cmp	result1, #0 wz
03028     1C 02 90 AD |  if_e	jmp	#LR__0217
0302c     25 01 00 FF 
03030     F1 15 06 F6 | 	mov	arg02, ##@LR__4223
03034     0F 13 02 F6 | 	mov	arg01, local01
03038     AC 27 B1 FD | 	call	#__system___string_cmp
0303c     00 FA 0D F2 | 	cmp	result1, #0 wz
03040     0C 02 90 AD |  if_e	jmp	#LR__0218
03044     25 01 00 FF 
03048     F6 15 06 F6 | 	mov	arg02, ##@LR__4224
0304c     0F 13 02 F6 | 	mov	arg01, local01
03050     94 27 B1 FD | 	call	#__system___string_cmp
03054     00 FA 0D F2 | 	cmp	result1, #0 wz
03058     FC 01 90 AD |  if_e	jmp	#LR__0219
0305c     25 01 00 FF 
03060     FA 15 06 F6 | 	mov	arg02, ##@LR__4225
03064     0F 13 02 F6 | 	mov	arg01, local01
03068     7C 27 B1 FD | 	call	#__system___string_cmp
0306c     00 FA 0D F2 | 	cmp	result1, #0 wz
03070     EC 01 90 AD |  if_e	jmp	#LR__0220
03074     26 01 00 FF 
03078     00 14 06 F6 | 	mov	arg02, ##@LR__4226
0307c     0F 13 02 F6 | 	mov	arg01, local01
03080     64 27 B1 FD | 	call	#__system___string_cmp
03084     00 FA 0D F2 | 	cmp	result1, #0 wz
03088     DC 01 90 AD |  if_e	jmp	#LR__0221
0308c     26 01 00 FF 
03090     06 14 06 F6 | 	mov	arg02, ##@LR__4227
03094     0F 13 02 F6 | 	mov	arg01, local01
03098     4C 27 B1 FD | 	call	#__system___string_cmp
0309c     00 FA 0D F2 | 	cmp	result1, #0 wz
030a0     CC 01 90 AD |  if_e	jmp	#LR__0222
030a4     26 01 00 FF 
030a8     0C 14 06 F6 | 	mov	arg02, ##@LR__4228
030ac     0F 13 02 F6 | 	mov	arg01, local01
030b0     34 27 B1 FD | 	call	#__system___string_cmp
030b4     00 FA 0D F2 | 	cmp	result1, #0 wz
030b8     BC 01 90 AD |  if_e	jmp	#LR__0223
030bc     26 01 00 FF 
030c0     15 14 06 F6 | 	mov	arg02, ##@LR__4229
030c4     0F 13 02 F6 | 	mov	arg01, local01
030c8     1C 27 B1 FD | 	call	#__system___string_cmp
030cc     00 FA 0D F2 | 	cmp	result1, #0 wz
030d0     AC 01 90 AD |  if_e	jmp	#LR__0224
030d4     26 01 00 FF 
030d8     1B 14 06 F6 | 	mov	arg02, ##@LR__4230
030dc     0F 13 02 F6 | 	mov	arg01, local01
030e0     04 27 B1 FD | 	call	#__system___string_cmp
030e4     00 FA 0D F2 | 	cmp	result1, #0 wz
030e8     9C 01 90 AD |  if_e	jmp	#LR__0225
030ec     26 01 00 FF 
030f0     21 14 06 F6 | 	mov	arg02, ##@LR__4231
030f4     0F 13 02 F6 | 	mov	arg01, local01
030f8     EC 26 B1 FD | 	call	#__system___string_cmp
030fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03100     8C 01 90 AD |  if_e	jmp	#LR__0226
03104     26 01 00 FF 
03108     2A 14 06 F6 | 	mov	arg02, ##@LR__4232
0310c     0F 13 02 F6 | 	mov	arg01, local01
03110     D4 26 B1 FD | 	call	#__system___string_cmp
03114     00 FA 0D F2 | 	cmp	result1, #0 wz
03118     7C 01 90 AD |  if_e	jmp	#LR__0227
0311c     80 01 90 FD | 	jmp	#LR__0228
03120                 | LR__0180
03120     40 FA 05 F6 | 	mov	result1, #64
03124     7C 01 90 FD | 	jmp	#LR__0229
03128                 | LR__0181
03128     41 FA 05 F6 | 	mov	result1, #65
0312c     74 01 90 FD | 	jmp	#LR__0229
03130                 | LR__0182
03130     42 FA 05 F6 | 	mov	result1, #66
03134     6C 01 90 FD | 	jmp	#LR__0229
03138                 | LR__0183
03138     43 FA 05 F6 | 	mov	result1, #67
0313c     64 01 90 FD | 	jmp	#LR__0229
03140                 | LR__0184
03140     44 FA 05 F6 | 	mov	result1, #68
03144     5C 01 90 FD | 	jmp	#LR__0229
03148                 | LR__0185
03148     45 FA 05 F6 | 	mov	result1, #69
0314c     54 01 90 FD | 	jmp	#LR__0229
03150                 | LR__0186
03150     46 FA 05 F6 | 	mov	result1, #70
03154     4C 01 90 FD | 	jmp	#LR__0229
03158                 | LR__0187
03158     47 FA 05 F6 | 	mov	result1, #71
0315c     44 01 90 FD | 	jmp	#LR__0229
03160                 | LR__0188
03160     48 FA 05 F6 | 	mov	result1, #72
03164     3C 01 90 FD | 	jmp	#LR__0229
03168                 | LR__0189
03168     49 FA 05 F6 | 	mov	result1, #73
0316c     34 01 90 FD | 	jmp	#LR__0229
03170                 | LR__0190
03170     44 FA 05 F6 | 	mov	result1, #68
03174     2C 01 90 FD | 	jmp	#LR__0229
03178                 | LR__0191
03178     4C FA 05 F6 | 	mov	result1, #76
0317c     24 01 90 FD | 	jmp	#LR__0229
03180                 | LR__0192
03180     4D FA 05 F6 | 	mov	result1, #77
03184     1C 01 90 FD | 	jmp	#LR__0229
03188                 | LR__0193
03188     4E FA 05 F6 | 	mov	result1, #78
0318c     14 01 90 FD | 	jmp	#LR__0229
03190                 | LR__0194
03190     50 FA 05 F6 | 	mov	result1, #80
03194     0C 01 90 FD | 	jmp	#LR__0229
03198                 | LR__0195
03198     51 FA 05 F6 | 	mov	result1, #81
0319c     04 01 90 FD | 	jmp	#LR__0229
031a0                 | LR__0196
031a0     52 FA 05 F6 | 	mov	result1, #82
031a4     FC 00 90 FD | 	jmp	#LR__0229
031a8                 | LR__0197
031a8     59 FA 05 F6 | 	mov	result1, #89
031ac     F4 00 90 FD | 	jmp	#LR__0229
031b0                 | LR__0198
031b0     55 FA 05 F6 | 	mov	result1, #85
031b4     EC 00 90 FD | 	jmp	#LR__0229
031b8                 | LR__0199
031b8     56 FA 05 F6 | 	mov	result1, #86
031bc     E4 00 90 FD | 	jmp	#LR__0229
031c0                 | LR__0200
031c0     57 FA 05 F6 | 	mov	result1, #87
031c4     DC 00 90 FD | 	jmp	#LR__0229
031c8                 | LR__0201
031c8     58 FA 05 F6 | 	mov	result1, #88
031cc     D4 00 90 FD | 	jmp	#LR__0229
031d0                 | LR__0202
031d0     5A FA 05 F6 | 	mov	result1, #90
031d4     CC 00 90 FD | 	jmp	#LR__0229
031d8                 | LR__0203
031d8     5B FA 05 F6 | 	mov	result1, #91
031dc     C4 00 90 FD | 	jmp	#LR__0229
031e0                 | LR__0204
031e0     5C FA 05 F6 | 	mov	result1, #92
031e4     BC 00 90 FD | 	jmp	#LR__0229
031e8                 | LR__0205
031e8     5D FA 05 F6 | 	mov	result1, #93
031ec     B4 00 90 FD | 	jmp	#LR__0229
031f0                 | LR__0206
031f0     4A FA 05 F6 | 	mov	result1, #74
031f4     AC 00 90 FD | 	jmp	#LR__0229
031f8                 | LR__0207
031f8     4B FA 05 F6 | 	mov	result1, #75
031fc     A4 00 90 FD | 	jmp	#LR__0229
03200                 | LR__0208
03200     5E FA 05 F6 | 	mov	result1, #94
03204     9C 00 90 FD | 	jmp	#LR__0229
03208                 | LR__0209
03208     5F FA 05 F6 | 	mov	result1, #95
0320c     94 00 90 FD | 	jmp	#LR__0229
03210                 | LR__0210
03210     60 FA 05 F6 | 	mov	result1, #96
03214     8C 00 90 FD | 	jmp	#LR__0229
03218                 | LR__0211
03218     61 FA 05 F6 | 	mov	result1, #97
0321c     84 00 90 FD | 	jmp	#LR__0229
03220                 | LR__0212
03220     63 FA 05 F6 | 	mov	result1, #99
03224     7C 00 90 FD | 	jmp	#LR__0229
03228                 | LR__0213
03228     68 FA 05 F6 | 	mov	result1, #104
0322c     74 00 90 FD | 	jmp	#LR__0229
03230                 | LR__0214
03230     69 FA 05 F6 | 	mov	result1, #105
03234     6C 00 90 FD | 	jmp	#LR__0229
03238                 | LR__0215
03238     6C FA 05 F6 | 	mov	result1, #108
0323c     64 00 90 FD | 	jmp	#LR__0229
03240                 | LR__0216
03240     6D FA 05 F6 | 	mov	result1, #109
03244     5C 00 90 FD | 	jmp	#LR__0229
03248                 | LR__0217
03248     70 FA 05 F6 | 	mov	result1, #112
0324c     54 00 90 FD | 	jmp	#LR__0229
03250                 | LR__0218
03250     71 FA 05 F6 | 	mov	result1, #113
03254     4C 00 90 FD | 	jmp	#LR__0229
03258                 | LR__0219
03258     72 FA 05 F6 | 	mov	result1, #114
0325c     44 00 90 FD | 	jmp	#LR__0229
03260                 | LR__0220
03260     79 FA 05 F6 | 	mov	result1, #121
03264     3C 00 90 FD | 	jmp	#LR__0229
03268                 | LR__0221
03268     77 FA 05 F6 | 	mov	result1, #119
0326c     34 00 90 FD | 	jmp	#LR__0229
03270                 | LR__0222
03270     78 FA 05 F6 | 	mov	result1, #120
03274     2C 00 90 FD | 	jmp	#LR__0229
03278                 | LR__0223
03278     7C FA 05 F6 | 	mov	result1, #124
0327c     24 00 90 FD | 	jmp	#LR__0229
03280                 | LR__0224
03280     7D FA 05 F6 | 	mov	result1, #125
03284     1C 00 90 FD | 	jmp	#LR__0229
03288                 | LR__0225
03288     7E FA 05 F6 | 	mov	result1, #126
0328c     14 00 90 FD | 	jmp	#LR__0229
03290                 | LR__0226
03290     7F FA 05 F6 | 	mov	result1, #127
03294     0C 00 90 FD | 	jmp	#LR__0229
03298                 | LR__0227
03298     80 FA 05 F6 | 	mov	result1, #128
0329c     04 00 90 FD | 	jmp	#LR__0229
032a0                 | LR__0228
032a0     00 FA 05 F6 | 	mov	result1, #0
032a4                 | LR__0229
032a4     A7 F0 03 F6 | 	mov	ptra, fp
032a8     B2 00 A0 FD | 	call	#popregs_
032ac                 | _iscommand_ret
032ac     2D 00 64 FD | 	ret
032b0                 | 
032b0                 | ' 
032b0                 | ' function isfunction(s as string) as ubyte
032b0                 | _isfunction
032b0     01 4A 05 F6 | 	mov	COUNT_, #1
032b4     A8 00 A0 FD | 	call	#pushregs_
032b8                 | ' 
032b8                 | ' select case s
032b8     09 1F 02 F6 | 	mov	local01, arg01
032bc     26 01 00 FF 
032c0     34 14 06 F6 | 	mov	arg02, ##@LR__4233
032c4     0F 13 02 F6 | 	mov	arg01, local01
032c8     1C 25 B1 FD | 	call	#__system___string_cmp
032cc     00 FA 0D F2 | 	cmp	result1, #0 wz
032d0     24 01 90 AD |  if_e	jmp	#LR__0230
032d4     26 01 00 FF 
032d8     38 14 06 F6 | 	mov	arg02, ##@LR__4234
032dc     0F 13 02 F6 | 	mov	arg01, local01
032e0     04 25 B1 FD | 	call	#__system___string_cmp
032e4     00 FA 0D F2 | 	cmp	result1, #0 wz
032e8     14 01 90 AD |  if_e	jmp	#LR__0231
032ec     26 01 00 FF 
032f0     3F 14 06 F6 | 	mov	arg02, ##@LR__4235
032f4     0F 13 02 F6 | 	mov	arg01, local01
032f8     EC 24 B1 FD | 	call	#__system___string_cmp
032fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03300     04 01 90 AD |  if_e	jmp	#LR__0232
03304     26 01 00 FF 
03308     46 14 06 F6 | 	mov	arg02, ##@LR__4236
0330c     0F 13 02 F6 | 	mov	arg01, local01
03310     D4 24 B1 FD | 	call	#__system___string_cmp
03314     00 FA 0D F2 | 	cmp	result1, #0 wz
03318     F4 00 90 AD |  if_e	jmp	#LR__0233
0331c     26 01 00 FF 
03320     4D 14 06 F6 | 	mov	arg02, ##@LR__4237
03324     0F 13 02 F6 | 	mov	arg01, local01
03328     BC 24 B1 FD | 	call	#__system___string_cmp
0332c     00 FA 0D F2 | 	cmp	result1, #0 wz
03330     E4 00 90 AD |  if_e	jmp	#LR__0234
03334     26 01 00 FF 
03338     54 14 06 F6 | 	mov	arg02, ##@LR__4238
0333c     0F 13 02 F6 | 	mov	arg01, local01
03340     A4 24 B1 FD | 	call	#__system___string_cmp
03344     00 FA 0D F2 | 	cmp	result1, #0 wz
03348     D4 00 90 AD |  if_e	jmp	#LR__0235
0334c     26 01 00 FF 
03350     5C 14 06 F6 | 	mov	arg02, ##@LR__4239
03354     0F 13 02 F6 | 	mov	arg01, local01
03358     8C 24 B1 FD | 	call	#__system___string_cmp
0335c     00 FA 0D F2 | 	cmp	result1, #0 wz
03360     C4 00 90 AD |  if_e	jmp	#LR__0236
03364     26 01 00 FF 
03368     60 14 06 F6 | 	mov	arg02, ##@LR__4240
0336c     0F 13 02 F6 | 	mov	arg01, local01
03370     74 24 B1 FD | 	call	#__system___string_cmp
03374     00 FA 0D F2 | 	cmp	result1, #0 wz
03378     B4 00 90 AD |  if_e	jmp	#LR__0237
0337c     26 01 00 FF 
03380     66 14 06 F6 | 	mov	arg02, ##@LR__4241
03384     0F 13 02 F6 | 	mov	arg01, local01
03388     5C 24 B1 FD | 	call	#__system___string_cmp
0338c     00 FA 0D F2 | 	cmp	result1, #0 wz
03390     A4 00 90 AD |  if_e	jmp	#LR__0238
03394     26 01 00 FF 
03398     6C 14 06 F6 | 	mov	arg02, ##@LR__4242
0339c     0F 13 02 F6 | 	mov	arg01, local01
033a0     44 24 B1 FD | 	call	#__system___string_cmp
033a4     00 FA 0D F2 | 	cmp	result1, #0 wz
033a8     94 00 90 AD |  if_e	jmp	#LR__0239
033ac     26 01 00 FF 
033b0     75 14 06 F6 | 	mov	arg02, ##@LR__4243
033b4     0F 13 02 F6 | 	mov	arg01, local01
033b8     2C 24 B1 FD | 	call	#__system___string_cmp
033bc     00 FA 0D F2 | 	cmp	result1, #0 wz
033c0     84 00 90 AD |  if_e	jmp	#LR__0240
033c4     26 01 00 FF 
033c8     7B 14 06 F6 | 	mov	arg02, ##@LR__4244
033cc     0F 13 02 F6 | 	mov	arg01, local01
033d0     14 24 B1 FD | 	call	#__system___string_cmp
033d4     00 FA 0D F2 | 	cmp	result1, #0 wz
033d8     74 00 90 AD |  if_e	jmp	#LR__0241
033dc     26 01 00 FF 
033e0     83 14 06 F6 | 	mov	arg02, ##@LR__4245
033e4     0F 13 02 F6 | 	mov	arg01, local01
033e8     FC 23 B1 FD | 	call	#__system___string_cmp
033ec     00 FA 0D F2 | 	cmp	result1, #0 wz
033f0     64 00 90 AD |  if_e	jmp	#LR__0242
033f4     68 00 90 FD | 	jmp	#LR__0243
033f8                 | LR__0230
033f8     54 FA 05 F6 | 	mov	result1, #84
033fc     64 00 90 FD | 	jmp	#LR__0244
03400                 | LR__0231
03400     64 FA 05 F6 | 	mov	result1, #100
03404     5C 00 90 FD | 	jmp	#LR__0244
03408                 | LR__0232
03408     65 FA 05 F6 | 	mov	result1, #101
0340c     54 00 90 FD | 	jmp	#LR__0244
03410                 | LR__0233
03410     66 FA 05 F6 | 	mov	result1, #102
03414     4C 00 90 FD | 	jmp	#LR__0244
03418                 | LR__0234
03418     67 FA 05 F6 | 	mov	result1, #103
0341c     44 00 90 FD | 	jmp	#LR__0244
03420                 | LR__0235
03420     62 FA 05 F6 | 	mov	result1, #98
03424     3C 00 90 FD | 	jmp	#LR__0244
03428                 | LR__0236
03428     6B FA 05 F6 | 	mov	result1, #107
0342c     34 00 90 FD | 	jmp	#LR__0244
03430                 | LR__0237
03430     6A FA 05 F6 | 	mov	result1, #106
03434     2C 00 90 FD | 	jmp	#LR__0244
03438                 | LR__0238
03438     6E FA 05 F6 | 	mov	result1, #110
0343c     24 00 90 FD | 	jmp	#LR__0244
03440                 | LR__0239
03440     6F FA 05 F6 | 	mov	result1, #111
03444     1C 00 90 FD | 	jmp	#LR__0244
03448                 | LR__0240
03448     76 FA 05 F6 | 	mov	result1, #118
0344c     14 00 90 FD | 	jmp	#LR__0244
03450                 | LR__0241
03450     7B FA 05 F6 | 	mov	result1, #123
03454     0C 00 90 FD | 	jmp	#LR__0244
03458                 | LR__0242
03458     7A FA 05 F6 | 	mov	result1, #122
0345c     04 00 90 FD | 	jmp	#LR__0244
03460                 | LR__0243
03460     00 FA 05 F6 | 	mov	result1, #0
03464                 | LR__0244
03464     A7 F0 03 F6 | 	mov	ptra, fp
03468     B2 00 A0 FD | 	call	#popregs_
0346c                 | _isfunction_ret
0346c     2D 00 64 FD | 	ret
03470                 | 
03470                 | ' 
03470                 | ' function isname(s as string) as boolean
03470                 | _isname
03470     0D 4A 05 F6 | 	mov	COUNT_, #13
03474     A8 00 A0 FD | 	call	#pushregs_
03478     09 1F 02 F6 | 	mov	local01, arg01
0347c     09 21 02 F6 | 	mov	local02, arg01
03480     97 06 48 FB | 	callpa	#(@LR__0251-@LR__0250)>>2,fcache_load_ptr_
03484                 | LR__0250
03484     10 FB C9 FA | 	rdbyte	result1, local02 wz
03488     01 20 06 51 |  if_ne	add	local02, #1
0348c     F4 FF 9F 5D |  if_ne	jmp	#LR__0250
03490                 | LR__0251
03490     09 21 82 F1 | 	sub	local02, arg01
03494     10 FB 01 F6 | 	mov	result1, local02
03498     FD 22 0A F6 | 	mov	local03, result1 wz
0349c     00 FA 05 A6 |  if_e	mov	result1, #0
034a0     34 02 90 AD |  if_e	jmp	#LR__0263
034a4     0F 13 02 F6 | 	mov	arg01, local01
034a8     01 14 06 F6 | 	mov	arg02, #1
034ac     01 16 06 F6 | 	mov	arg03, #1
034b0     34 44 B1 FD | 	call	#__system__Mid_S
034b4     FD 24 02 F6 | 	mov	local04, result1
034b8                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
034b8     26 01 00 FF 
034bc     89 14 06 F6 | 	mov	arg02, ##@LR__4246
034c0     12 13 02 F6 | 	mov	arg01, local04
034c4     20 23 B1 FD | 	call	#__system___string_cmp
034c8     00 FA 55 F2 | 	cmps	result1, #0 wc
034cc     18 00 90 CD |  if_b	jmp	#LR__0252
034d0     26 01 00 FF 
034d4     8B 14 06 F6 | 	mov	arg02, ##@LR__4247
034d8     12 13 02 F6 | 	mov	arg01, local04
034dc     08 23 B1 FD | 	call	#__system___string_cmp
034e0     01 FA 55 F2 | 	cmps	result1, #1 wc
034e4     1C 00 90 CD |  if_b	jmp	#LR__0253
034e8                 | LR__0252
034e8     26 01 00 FF 
034ec     8D 14 06 F6 | 	mov	arg02, ##@LR__4248
034f0     12 13 02 F6 | 	mov	arg01, local04
034f4     F0 22 B1 FD | 	call	#__system___string_cmp
034f8     00 FA 0D F2 | 	cmp	result1, #0 wz
034fc     00 FA 05 56 |  if_ne	mov	result1, #0
03500     D4 01 90 5D |  if_ne	jmp	#LR__0263
03504                 | LR__0253
03504                 | ' if l>2 then 
03504     03 22 56 F2 | 	cmps	local03, #3 wc
03508     C8 01 90 CD |  if_b	jmp	#LR__0262
0350c                 | '   for i=2 to l
0350c     02 26 06 F6 | 	mov	local05, #2
03510     11 29 02 F6 | 	mov	local06, local03
03514     01 28 06 F1 | 	add	local06, #1
03518                 | LR__0254
03518     14 27 52 F2 | 	cmps	local05, local06 wc
0351c     B4 01 90 3D |  if_ae	jmp	#LR__0261
03520     0F 13 02 F6 | 	mov	arg01, local01
03524     13 15 02 F6 | 	mov	arg02, local05
03528     01 16 06 F6 | 	mov	arg03, #1
0352c     B8 43 B1 FD | 	call	#__system__Mid_S
03530     FD 24 02 F6 | 	mov	local04, result1
03534                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
03534     11 27 52 F2 | 	cmps	local05, local03 wc
03538     9C 00 90 3D |  if_ae	jmp	#LR__0257
0353c     26 01 00 FF 
03540     8F 14 06 F6 | 	mov	arg02, ##@LR__4249
03544     12 13 02 F6 | 	mov	arg01, local04
03548     9C 22 B1 FD | 	call	#__system___string_cmp
0354c     00 FA 55 F2 | 	cmps	result1, #0 wc
03550     18 00 90 CD |  if_b	jmp	#LR__0255
03554     26 01 00 FF 
03558     91 14 06 F6 | 	mov	arg02, ##@LR__4250
0355c     12 13 02 F6 | 	mov	arg01, local04
03560     84 22 B1 FD | 	call	#__system___string_cmp
03564     01 FA 55 F2 | 	cmps	result1, #1 wc
03568     6C 00 90 CD |  if_b	jmp	#LR__0257
0356c                 | LR__0255
0356c     26 01 00 FF 
03570     93 14 06 F6 | 	mov	arg02, ##@LR__4251
03574     12 13 02 F6 | 	mov	arg01, local04
03578     6C 22 B1 FD | 	call	#__system___string_cmp
0357c     00 FA 55 F2 | 	cmps	result1, #0 wc
03580     18 00 90 CD |  if_b	jmp	#LR__0256
03584     26 01 00 FF 
03588     95 14 06 F6 | 	mov	arg02, ##@LR__4252
0358c     12 13 02 F6 | 	mov	arg01, local04
03590     54 22 B1 FD | 	call	#__system___string_cmp
03594     01 FA 55 F2 | 	cmps	result1, #1 wc
03598     3C 00 90 CD |  if_b	jmp	#LR__0257
0359c                 | LR__0256
0359c     26 01 00 FF 
035a0     97 2A 06 F6 | 	mov	local07, ##@LR__4253
035a4     12 13 02 F6 | 	mov	arg01, local04
035a8     15 15 02 F6 | 	mov	arg02, local07
035ac     38 22 B1 FD | 	call	#__system___string_cmp
035b0     00 FA 0D F2 | 	cmp	result1, #0 wz
035b4     20 00 90 AD |  if_e	jmp	#LR__0257
035b8     26 01 00 FF 
035bc     99 2C 06 F6 | 	mov	local08, ##@LR__4254
035c0     12 13 02 F6 | 	mov	arg01, local04
035c4     16 15 02 F6 | 	mov	arg02, local08
035c8     1C 22 B1 FD | 	call	#__system___string_cmp
035cc     FD 2E 0A F6 | 	mov	local09, result1 wz
035d0     00 FA 05 56 |  if_ne	mov	result1, #0
035d4     00 01 90 5D |  if_ne	jmp	#LR__0263
035d8                 | LR__0257
035d8                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
035d8     11 27 0A F2 | 	cmp	local05, local03 wz
035dc     EC 00 90 5D |  if_ne	jmp	#LR__0260
035e0     26 01 00 FF 
035e4     9B 30 06 F6 | 	mov	local10, ##@LR__4255
035e8     12 13 02 F6 | 	mov	arg01, local04
035ec     18 15 02 F6 | 	mov	arg02, local10
035f0     F4 21 B1 FD | 	call	#__system___string_cmp
035f4     FD 32 02 F6 | 	mov	local11, result1
035f8     00 32 56 F2 | 	cmps	local11, #0 wc
035fc     1C 00 90 CD |  if_b	jmp	#LR__0258
03600     26 01 00 FF 
03604     9D 14 06 F6 | 	mov	arg02, ##@LR__4256
03608     12 13 02 F6 | 	mov	arg01, local04
0360c     D8 21 B1 FD | 	call	#__system___string_cmp
03610     FD 30 02 F6 | 	mov	local10, result1
03614     01 30 56 F2 | 	cmps	local10, #1 wc
03618     B0 00 90 CD |  if_b	jmp	#LR__0260
0361c                 | LR__0258
0361c     26 01 00 FF 
03620     9F 14 06 F6 | 	mov	arg02, ##@LR__4257
03624     12 13 02 F6 | 	mov	arg01, local04
03628     BC 21 B1 FD | 	call	#__system___string_cmp
0362c     00 FA 55 F2 | 	cmps	result1, #0 wc
03630     1C 00 90 CD |  if_b	jmp	#LR__0259
03634     26 01 00 FF 
03638     A1 2E 06 F6 | 	mov	local09, ##@LR__4258
0363c     12 13 02 F6 | 	mov	arg01, local04
03640     17 15 02 F6 | 	mov	arg02, local09
03644     A0 21 B1 FD | 	call	#__system___string_cmp
03648     01 FA 55 F2 | 	cmps	result1, #1 wc
0364c     7C 00 90 CD |  if_b	jmp	#LR__0260
03650                 | LR__0259
03650     26 01 00 FF 
03654     A3 2E 06 F6 | 	mov	local09, ##@LR__4259
03658     12 13 02 F6 | 	mov	arg01, local04
0365c     17 15 02 F6 | 	mov	arg02, local09
03660     84 21 B1 FD | 	call	#__system___string_cmp
03664     00 FA 4D F2 | 	cmps	result1, #0 wz
03668     60 00 90 AD |  if_e	jmp	#LR__0260
0366c     26 01 00 FF 
03670     A5 2C 06 F6 | 	mov	local08, ##@LR__4260
03674     12 13 02 F6 | 	mov	arg01, local04
03678     16 15 02 F6 | 	mov	arg02, local08
0367c     68 21 B1 FD | 	call	#__system___string_cmp
03680     FD 2E 0A F6 | 	mov	local09, result1 wz
03684     44 00 90 AD |  if_e	jmp	#LR__0260
03688     26 01 00 FF 
0368c     A7 34 06 F6 | 	mov	local12, ##@LR__4261
03690     1A 2D 02 F6 | 	mov	local08, local12
03694     12 13 02 F6 | 	mov	arg01, local04
03698     16 15 02 F6 | 	mov	arg02, local08
0369c     48 21 B1 FD | 	call	#__system___string_cmp
036a0     FD 2A 0A F6 | 	mov	local07, result1 wz
036a4     24 00 90 AD |  if_e	jmp	#LR__0260
036a8     26 01 00 FF 
036ac     A9 36 06 F6 | 	mov	local13, ##@LR__4262
036b0     1B 35 02 F6 | 	mov	local12, local13
036b4     12 13 02 F6 | 	mov	arg01, local04
036b8     1A 15 02 F6 | 	mov	arg02, local12
036bc     28 21 B1 FD | 	call	#__system___string_cmp
036c0     FD 2C 0A F6 | 	mov	local08, result1 wz
036c4     00 FA 05 56 |  if_ne	mov	result1, #0
036c8     0C 00 90 5D |  if_ne	jmp	#LR__0263
036cc                 | LR__0260
036cc     01 26 06 F1 | 	add	local05, #1
036d0     44 FE 9F FD | 	jmp	#LR__0254
036d4                 | LR__0261
036d4                 | LR__0262
036d4                 | ' return true
036d4     01 FA 65 F6 | 	neg	result1, #1
036d8                 | LR__0263
036d8     A7 F0 03 F6 | 	mov	ptra, fp
036dc     B2 00 A0 FD | 	call	#popregs_
036e0                 | _isname_ret
036e0     2D 00 64 FD | 	ret
036e4                 | 
036e4                 | ' 
036e4                 | ' function isnum(s as string) as boolean
036e4                 | _isnum
036e4     0D 4A 05 F6 | 	mov	COUNT_, #13
036e8     A8 00 A0 FD | 	call	#pushregs_
036ec     09 1F 02 F6 | 	mov	local01, arg01
036f0     00 20 06 F6 | 	mov	local02, #0
036f4     00 22 06 F6 | 	mov	local03, #0
036f8     0F 13 02 F6 | 	mov	arg01, local01
036fc     09 25 02 F6 | 	mov	local04, arg01
03700     97 06 48 FB | 	callpa	#(@LR__0271-@LR__0270)>>2,fcache_load_ptr_
03704                 | LR__0270
03704     12 FB C9 FA | 	rdbyte	result1, local04 wz
03708     01 24 06 51 |  if_ne	add	local04, #1
0370c     F4 FF 9F 5D |  if_ne	jmp	#LR__0270
03710                 | LR__0271
03710     09 25 82 F1 | 	sub	local04, arg01
03714     12 FB 01 F6 | 	mov	result1, local04
03718     FD 26 0A F6 | 	mov	local05, result1 wz
0371c     00 FA 05 A6 |  if_e	mov	result1, #0
03720     8C 02 90 AD |  if_e	jmp	#LR__0282
03724     0F 13 02 F6 | 	mov	arg01, local01
03728     01 14 06 F6 | 	mov	arg02, #1
0372c     01 16 06 F6 | 	mov	arg03, #1
03730     B4 41 B1 FD | 	call	#__system__Mid_S
03734     FD 28 02 F6 | 	mov	local06, result1
03738                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
03738     26 01 00 FF 
0373c     AB 14 06 F6 | 	mov	arg02, ##@LR__4263
03740     14 13 02 F6 | 	mov	arg01, local06
03744     A0 20 B1 FD | 	call	#__system___string_cmp
03748     00 FA 55 F2 | 	cmps	result1, #0 wc
0374c     18 00 90 CD |  if_b	jmp	#LR__0272
03750     26 01 00 FF 
03754     AD 14 06 F6 | 	mov	arg02, ##@LR__4264
03758     14 13 02 F6 | 	mov	arg01, local06
0375c     88 20 B1 FD | 	call	#__system___string_cmp
03760     01 FA 55 F2 | 	cmps	result1, #1 wc
03764     78 00 90 CD |  if_b	jmp	#LR__0273
03768                 | LR__0272
03768     26 01 00 FF 
0376c     AF 14 06 F6 | 	mov	arg02, ##@LR__4265
03770     14 13 02 F6 | 	mov	arg01, local06
03774     70 20 B1 FD | 	call	#__system___string_cmp
03778     00 FA 0D F2 | 	cmp	result1, #0 wz
0377c     60 00 90 AD |  if_e	jmp	#LR__0273
03780     26 01 00 FF 
03784     B1 2A 06 F6 | 	mov	local07, ##@LR__4266
03788     14 13 02 F6 | 	mov	arg01, local06
0378c     15 15 02 F6 | 	mov	arg02, local07
03790     54 20 B1 FD | 	call	#__system___string_cmp
03794     00 FA 0D F2 | 	cmp	result1, #0 wz
03798     44 00 90 AD |  if_e	jmp	#LR__0273
0379c     26 01 00 FF 
037a0     B3 2C 06 F6 | 	mov	local08, ##@LR__4267
037a4     16 2B 02 F6 | 	mov	local07, local08
037a8     14 13 02 F6 | 	mov	arg01, local06
037ac     15 15 02 F6 | 	mov	arg02, local07
037b0     34 20 B1 FD | 	call	#__system___string_cmp
037b4     00 FA 4D F2 | 	cmps	result1, #0 wz
037b8     24 00 90 AD |  if_e	jmp	#LR__0273
037bc     26 01 00 FF 
037c0     B5 2E 06 F6 | 	mov	local09, ##@LR__4268
037c4     17 2D 02 F6 | 	mov	local08, local09
037c8     14 13 02 F6 | 	mov	arg01, local06
037cc     16 15 02 F6 | 	mov	arg02, local08
037d0     14 20 B1 FD | 	call	#__system___string_cmp
037d4     FD 2A 0A F6 | 	mov	local07, result1 wz
037d8     00 FA 05 56 |  if_ne	mov	result1, #0
037dc     D0 01 90 5D |  if_ne	jmp	#LR__0282
037e0                 | LR__0273
037e0                 | ' if m$="." then ds=1
037e0     26 01 00 FF 
037e4     B7 14 06 F6 | 	mov	arg02, ##@LR__4269
037e8     14 13 02 F6 | 	mov	arg01, local06
037ec     F8 1F B1 FD | 	call	#__system___string_cmp
037f0     00 FA 0D F2 | 	cmp	result1, #0 wz
037f4     01 20 06 A6 |  if_e	mov	local02, #1
037f8                 | ' if l>1 then 
037f8     02 26 56 F2 | 	cmps	local05, #2 wc
037fc     AC 01 90 CD |  if_b	jmp	#LR__0281
03800                 | '   for i=2 to l
03800     02 30 06 F6 | 	mov	local10, #2
03804     13 33 02 F6 | 	mov	local11, local05
03808     01 32 06 F1 | 	add	local11, #1
0380c                 | LR__0274
0380c     19 31 52 F2 | 	cmps	local10, local11 wc
03810     98 01 90 3D |  if_ae	jmp	#LR__0280
03814     0F 13 02 F6 | 	mov	arg01, local01
03818     18 15 02 F6 | 	mov	arg02, local10
0381c     01 16 06 F6 | 	mov	arg03, #1
03820     C4 40 B1 FD | 	call	#__system__Mid_S
03824     FD 28 02 F6 | 	mov	local06, result1
03828                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
03828     26 01 00 FF 
0382c     B9 14 06 F6 | 	mov	arg02, ##@LR__4270
03830     14 13 02 F6 | 	mov	arg01, local06
03834     B0 1F B1 FD | 	call	#__system___string_cmp
03838     00 FA 55 F2 | 	cmps	result1, #0 wc
0383c     18 00 90 CD |  if_b	jmp	#LR__0275
03840     26 01 00 FF 
03844     BB 14 06 F6 | 	mov	arg02, ##@LR__4271
03848     14 13 02 F6 | 	mov	arg01, local06
0384c     98 1F B1 FD | 	call	#__system___string_cmp
03850     01 FA 55 F2 | 	cmps	result1, #1 wc
03854     98 00 90 CD |  if_b	jmp	#LR__0276
03858                 | LR__0275
03858     26 01 00 FF 
0385c     BD 14 06 F6 | 	mov	arg02, ##@LR__4272
03860     14 13 02 F6 | 	mov	arg01, local06
03864     80 1F B1 FD | 	call	#__system___string_cmp
03868     00 FA 0D F2 | 	cmp	result1, #0 wz
0386c     80 00 90 AD |  if_e	jmp	#LR__0276
03870     26 01 00 FF 
03874     BF 2A 06 F6 | 	mov	local07, ##@LR__4273
03878     14 13 02 F6 | 	mov	arg01, local06
0387c     15 15 02 F6 | 	mov	arg02, local07
03880     64 1F B1 FD | 	call	#__system___string_cmp
03884     00 FA 4D F2 | 	cmps	result1, #0 wz
03888     64 00 90 AD |  if_e	jmp	#LR__0276
0388c     26 01 00 FF 
03890     C1 2C 06 F6 | 	mov	local08, ##@LR__4274
03894     16 2B 02 F6 | 	mov	local07, local08
03898     14 13 02 F6 | 	mov	arg01, local06
0389c     15 15 02 F6 | 	mov	arg02, local07
038a0     44 1F B1 FD | 	call	#__system___string_cmp
038a4     FD 34 0A F6 | 	mov	local12, result1 wz
038a8     44 00 90 AD |  if_e	jmp	#LR__0276
038ac     26 01 00 FF 
038b0     C3 2E 06 F6 | 	mov	local09, ##@LR__4275
038b4     17 2D 02 F6 | 	mov	local08, local09
038b8     14 13 02 F6 | 	mov	arg01, local06
038bc     16 15 02 F6 | 	mov	arg02, local08
038c0     24 1F B1 FD | 	call	#__system___string_cmp
038c4     FD 2A 0A F6 | 	mov	local07, result1 wz
038c8     24 00 90 AD |  if_e	jmp	#LR__0276
038cc     26 01 00 FF 
038d0     C5 36 06 F6 | 	mov	local13, ##@LR__4276
038d4     1B 2F 02 F6 | 	mov	local09, local13
038d8     14 13 02 F6 | 	mov	arg01, local06
038dc     17 15 02 F6 | 	mov	arg02, local09
038e0     04 1F B1 FD | 	call	#__system___string_cmp
038e4     FD 2C 0A F6 | 	mov	local08, result1 wz
038e8     00 FA 05 56 |  if_ne	mov	result1, #0
038ec     C0 00 90 5D |  if_ne	jmp	#LR__0282
038f0                 | LR__0276
038f0                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
038f0     26 01 00 FF 
038f4     C7 14 06 F6 | 	mov	arg02, ##@LR__4277
038f8     14 13 02 F6 | 	mov	arg01, local06
038fc     E8 1E B1 FD | 	call	#__system___string_cmp
03900     00 FA 0D F2 | 	cmp	result1, #0 wz
03904     38 00 90 5D |  if_ne	jmp	#LR__0277
03908     18 15 02 F6 | 	mov	arg02, local10
0390c     01 14 86 F1 | 	sub	arg02, #1
03910     0F 13 02 F6 | 	mov	arg01, local01
03914     01 16 06 F6 | 	mov	arg03, #1
03918     CC 3F B1 FD | 	call	#__system__Mid_S
0391c     FD 12 02 F6 | 	mov	arg01, result1
03920     60 41 B1 FD | 	call	#__system__LCase_S
03924     FD 12 02 F6 | 	mov	arg01, result1
03928     26 01 00 FF 
0392c     C9 14 06 F6 | 	mov	arg02, ##@LR__4278
03930     B4 1E B1 FD | 	call	#__system___string_cmp
03934     00 FA 0D F2 | 	cmp	result1, #0 wz
03938     00 FA 05 56 |  if_ne	mov	result1, #0
0393c     70 00 90 5D |  if_ne	jmp	#LR__0282
03940                 | LR__0277
03940                 | '     if m$="." then ds+=1: if ds>1 then return false
03940     26 01 00 FF 
03944     CB 14 06 F6 | 	mov	arg02, ##@LR__4279
03948     14 13 02 F6 | 	mov	arg01, local06
0394c     98 1E B1 FD | 	call	#__system___string_cmp
03950     00 FA 0D F2 | 	cmp	result1, #0 wz
03954     01 20 06 A1 |  if_e	add	local02, #1
03958     02 20 56 A2 |  if_e	cmps	local02, #2 wc
0395c     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
03960     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0282
03964                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
03964     26 01 00 FF 
03968     CD 14 06 F6 | 	mov	arg02, ##@LR__4280
0396c     14 13 02 F6 | 	mov	arg01, local06
03970     74 1E B1 FD | 	call	#__system___string_cmp
03974     00 FA 4D F2 | 	cmps	result1, #0 wz
03978     18 00 90 AD |  if_e	jmp	#LR__0278
0397c     26 01 00 FF 
03980     CF 14 06 F6 | 	mov	arg02, ##@LR__4281
03984     14 13 02 F6 | 	mov	arg01, local06
03988     5C 1E B1 FD | 	call	#__system___string_cmp
0398c     00 FA 4D F2 | 	cmps	result1, #0 wz
03990     10 00 90 5D |  if_ne	jmp	#LR__0279
03994                 | LR__0278
03994     01 22 06 F1 | 	add	local03, #1
03998     02 22 56 F2 | 	cmps	local03, #2 wc
0399c     00 FA 05 36 |  if_ae	mov	result1, #0
039a0     0C 00 90 3D |  if_ae	jmp	#LR__0282
039a4                 | LR__0279
039a4     01 30 06 F1 | 	add	local10, #1
039a8     60 FE 9F FD | 	jmp	#LR__0274
039ac                 | LR__0280
039ac                 | LR__0281
039ac                 | ' return true
039ac     01 FA 65 F6 | 	neg	result1, #1
039b0                 | LR__0282
039b0     A7 F0 03 F6 | 	mov	ptra, fp
039b4     B2 00 A0 FD | 	call	#popregs_
039b8                 | _isnum_ret
039b8     2D 00 64 FD | 	ret
039bc                 | 
039bc                 | '   
039bc                 | ' function isint(s as string) as boolean
039bc                 | _isint
039bc     05 4A 05 F6 | 	mov	COUNT_, #5
039c0     A8 00 A0 FD | 	call	#pushregs_
039c4     09 1F 02 F6 | 	mov	local01, arg01
039c8     09 21 02 F6 | 	mov	local02, arg01
039cc     97 06 48 FB | 	callpa	#(@LR__0291-@LR__0290)>>2,fcache_load_ptr_
039d0                 | LR__0290
039d0     10 FB C9 FA | 	rdbyte	result1, local02 wz
039d4     01 20 06 51 |  if_ne	add	local02, #1
039d8     F4 FF 9F 5D |  if_ne	jmp	#LR__0290
039dc                 | LR__0291
039dc     09 21 82 F1 | 	sub	local02, arg01
039e0     10 FB 01 F6 | 	mov	result1, local02
039e4     FD 20 0A F6 | 	mov	local02, result1 wz
039e8     00 FA 05 A6 |  if_e	mov	result1, #0
039ec     18 01 90 AD |  if_e	jmp	#LR__0299
039f0     0F 13 02 F6 | 	mov	arg01, local01
039f4     01 14 06 F6 | 	mov	arg02, #1
039f8     01 16 06 F6 | 	mov	arg03, #1
039fc     E8 3E B1 FD | 	call	#__system__Mid_S
03a00     FD 22 02 F6 | 	mov	local03, result1
03a04                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
03a04     26 01 00 FF 
03a08     D1 14 06 F6 | 	mov	arg02, ##@LR__4282
03a0c     11 13 02 F6 | 	mov	arg01, local03
03a10     D4 1D B1 FD | 	call	#__system___string_cmp
03a14     00 FA 55 F2 | 	cmps	result1, #0 wc
03a18     18 00 90 CD |  if_b	jmp	#LR__0292
03a1c     26 01 00 FF 
03a20     D3 14 06 F6 | 	mov	arg02, ##@LR__4283
03a24     11 13 02 F6 | 	mov	arg01, local03
03a28     BC 1D B1 FD | 	call	#__system___string_cmp
03a2c     01 FA 55 F2 | 	cmps	result1, #1 wc
03a30     4C 00 90 CD |  if_b	jmp	#LR__0293
03a34                 | LR__0292
03a34     26 01 00 FF 
03a38     D5 14 06 F6 | 	mov	arg02, ##@LR__4284
03a3c     11 13 02 F6 | 	mov	arg01, local03
03a40     A4 1D B1 FD | 	call	#__system___string_cmp
03a44     00 FA 0D F2 | 	cmp	result1, #0 wz
03a48     34 00 90 AD |  if_e	jmp	#LR__0293
03a4c     26 01 00 FF 
03a50     D7 14 06 F6 | 	mov	arg02, ##@LR__4285
03a54     11 13 02 F6 | 	mov	arg01, local03
03a58     8C 1D B1 FD | 	call	#__system___string_cmp
03a5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a60     1C 00 90 AD |  if_e	jmp	#LR__0293
03a64     26 01 00 FF 
03a68     D9 14 06 F6 | 	mov	arg02, ##@LR__4286
03a6c     11 13 02 F6 | 	mov	arg01, local03
03a70     74 1D B1 FD | 	call	#__system___string_cmp
03a74     00 FA 0D F2 | 	cmp	result1, #0 wz
03a78     00 FA 05 56 |  if_ne	mov	result1, #0
03a7c     88 00 90 5D |  if_ne	jmp	#LR__0299
03a80                 | LR__0293
03a80                 | ' 
03a80                 | ' if l>1 then 
03a80     02 20 56 F2 | 	cmps	local02, #2 wc
03a84     7C 00 90 CD |  if_b	jmp	#LR__0298
03a88                 | '   for i=2 to l
03a88     02 24 06 F6 | 	mov	local04, #2
03a8c     10 27 02 F6 | 	mov	local05, local02
03a90     01 26 06 F1 | 	add	local05, #1
03a94                 | LR__0294
03a94     13 25 52 F2 | 	cmps	local04, local05 wc
03a98     68 00 90 3D |  if_ae	jmp	#LR__0297
03a9c     0F 13 02 F6 | 	mov	arg01, local01
03aa0     12 15 02 F6 | 	mov	arg02, local04
03aa4     01 16 06 F6 | 	mov	arg03, #1
03aa8     3C 3E B1 FD | 	call	#__system__Mid_S
03aac     FD 22 02 F6 | 	mov	local03, result1
03ab0                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
03ab0     26 01 00 FF 
03ab4     DB 14 06 F6 | 	mov	arg02, ##@LR__4287
03ab8     11 13 02 F6 | 	mov	arg01, local03
03abc     28 1D B1 FD | 	call	#__system___string_cmp
03ac0     00 FA 55 F2 | 	cmps	result1, #0 wc
03ac4     18 00 90 CD |  if_b	jmp	#LR__0295
03ac8     26 01 00 FF 
03acc     DD 14 06 F6 | 	mov	arg02, ##@LR__4288
03ad0     11 13 02 F6 | 	mov	arg01, local03
03ad4     10 1D B1 FD | 	call	#__system___string_cmp
03ad8     01 FA 55 F2 | 	cmps	result1, #1 wc
03adc     1C 00 90 CD |  if_b	jmp	#LR__0296
03ae0                 | LR__0295
03ae0     26 01 00 FF 
03ae4     DF 14 06 F6 | 	mov	arg02, ##@LR__4289
03ae8     11 13 02 F6 | 	mov	arg01, local03
03aec     F8 1C B1 FD | 	call	#__system___string_cmp
03af0     00 FA 0D F2 | 	cmp	result1, #0 wz
03af4     00 FA 05 56 |  if_ne	mov	result1, #0
03af8     0C 00 90 5D |  if_ne	jmp	#LR__0299
03afc                 | LR__0296
03afc     01 24 06 F1 | 	add	local04, #1
03b00     90 FF 9F FD | 	jmp	#LR__0294
03b04                 | LR__0297
03b04                 | LR__0298
03b04                 | ' return true
03b04     01 FA 65 F6 | 	neg	result1, #1
03b08                 | LR__0299
03b08     A7 F0 03 F6 | 	mov	ptra, fp
03b0c     B2 00 A0 FD | 	call	#popregs_
03b10                 | _isint_ret
03b10     2D 00 64 FD | 	ret
03b14                 | 
03b14                 | ' 
03b14                 | ' function isdec(s as string) as boolean
03b14                 | _isdec
03b14     05 4A 05 F6 | 	mov	COUNT_, #5
03b18     A8 00 A0 FD | 	call	#pushregs_
03b1c     09 1F 02 F6 | 	mov	local01, arg01
03b20     09 21 02 F6 | 	mov	local02, arg01
03b24     97 06 48 FB | 	callpa	#(@LR__0301-@LR__0300)>>2,fcache_load_ptr_
03b28                 | LR__0300
03b28     10 FB C9 FA | 	rdbyte	result1, local02 wz
03b2c     01 20 06 51 |  if_ne	add	local02, #1
03b30     F4 FF 9F 5D |  if_ne	jmp	#LR__0300
03b34                 | LR__0301
03b34     09 21 82 F1 | 	sub	local02, arg01
03b38     10 FB 01 F6 | 	mov	result1, local02
03b3c     FD 20 0A F6 | 	mov	local02, result1 wz
03b40     00 FA 05 A6 |  if_e	mov	result1, #0
03b44     80 00 90 AD |  if_e	jmp	#LR__0306
03b48                 | ' for i=1 to l
03b48     01 22 06 F6 | 	mov	local03, #1
03b4c     10 25 02 F6 | 	mov	local04, local02
03b50     01 24 06 F1 | 	add	local04, #1
03b54                 | LR__0302
03b54     12 23 52 F2 | 	cmps	local03, local04 wc
03b58     68 00 90 3D |  if_ae	jmp	#LR__0305
03b5c     0F 13 02 F6 | 	mov	arg01, local01
03b60     11 15 02 F6 | 	mov	arg02, local03
03b64     01 16 06 F6 | 	mov	arg03, #1
03b68     7C 3D B1 FD | 	call	#__system__Mid_S
03b6c     FD 26 02 F6 | 	mov	local05, result1
03b70                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
03b70     26 01 00 FF 
03b74     E1 14 06 F6 | 	mov	arg02, ##@LR__4290
03b78     13 13 02 F6 | 	mov	arg01, local05
03b7c     68 1C B1 FD | 	call	#__system___string_cmp
03b80     00 FA 55 F2 | 	cmps	result1, #0 wc
03b84     18 00 90 CD |  if_b	jmp	#LR__0303
03b88     26 01 00 FF 
03b8c     E3 14 06 F6 | 	mov	arg02, ##@LR__4291
03b90     13 13 02 F6 | 	mov	arg01, local05
03b94     50 1C B1 FD | 	call	#__system___string_cmp
03b98     01 FA 55 F2 | 	cmps	result1, #1 wc
03b9c     1C 00 90 CD |  if_b	jmp	#LR__0304
03ba0                 | LR__0303
03ba0     26 01 00 FF 
03ba4     E5 14 06 F6 | 	mov	arg02, ##@LR__4292
03ba8     13 13 02 F6 | 	mov	arg01, local05
03bac     38 1C B1 FD | 	call	#__system___string_cmp
03bb0     00 FA 0D F2 | 	cmp	result1, #0 wz
03bb4     00 FA 05 56 |  if_ne	mov	result1, #0
03bb8     0C 00 90 5D |  if_ne	jmp	#LR__0306
03bbc                 | LR__0304
03bbc     01 22 06 F1 | 	add	local03, #1
03bc0     90 FF 9F FD | 	jmp	#LR__0302
03bc4                 | LR__0305
03bc4                 | ' return true
03bc4     01 FA 65 F6 | 	neg	result1, #1
03bc8                 | LR__0306
03bc8     A7 F0 03 F6 | 	mov	ptra, fp
03bcc     B2 00 A0 FD | 	call	#popregs_
03bd0                 | _isdec_ret
03bd0     2D 00 64 FD | 	ret
03bd4                 | 
03bd4                 | ' 
03bd4                 | ' function isstring(s as string) as boolean
03bd4                 | _isstring
03bd4     01 4A 05 F6 | 	mov	COUNT_, #1
03bd8     A8 00 A0 FD | 	call	#pushregs_
03bdc                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
03bdc     09 1F 02 F6 | 	mov	local01, arg01
03be0     01 14 06 F6 | 	mov	arg02, #1
03be4     E8 3B B1 FD | 	call	#__system__Left_S
03be8     FD 12 02 F6 | 	mov	arg01, result1
03bec     26 01 00 FF 
03bf0     E7 14 06 F6 | 	mov	arg02, ##@LR__4293
03bf4     F0 1B B1 FD | 	call	#__system___string_cmp
03bf8     00 FA 4D F2 | 	cmps	result1, #0 wz
03bfc     28 00 90 5D |  if_ne	jmp	#LR__0310
03c00     0F 13 02 F6 | 	mov	arg01, local01
03c04     01 14 06 F6 | 	mov	arg02, #1
03c08     4C 3C B1 FD | 	call	#__system__Right_S
03c0c     FD 12 02 F6 | 	mov	arg01, result1
03c10     26 01 00 FF 
03c14     E9 14 06 F6 | 	mov	arg02, ##@LR__4294
03c18     CC 1B B1 FD | 	call	#__system___string_cmp
03c1c     00 FA 4D F2 | 	cmps	result1, #0 wz
03c20     01 FA 65 A6 |  if_e	neg	result1, #1
03c24     04 00 90 AD |  if_e	jmp	#LR__0311
03c28                 | LR__0310
03c28     00 FA 05 F6 | 	mov	result1, #0
03c2c                 | LR__0311
03c2c     A7 F0 03 F6 | 	mov	ptra, fp
03c30     B2 00 A0 FD | 	call	#popregs_
03c34                 | _isstring_ret
03c34     2D 00 64 FD | 	ret
03c38                 | 
03c38                 | ' 
03c38                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
03c38                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
03c38                 | ' 
03c38                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
03c38                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
03c38                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
03c38                 | ' 
03c38                 | ' '----- delete a line from a program
03c38                 | ' 
03c38                 | ' function deleteline(aline as ulong) as integer
03c38                 | _deleteline
03c38     03 4A 05 F6 | 	mov	COUNT_, #3
03c3c     A8 00 A0 FD | 	call	#pushregs_
03c40     2C F0 07 F1 | 	add	ptra, #44
03c44     04 4E 05 F1 | 	add	fp, #4
03c48     A7 12 62 FC | 	wrlong	arg01, fp
03c4c     41 00 00 FF 
03c50     48 E4 05 F1 | 	add	objptr, ##33352
03c54     F2 1E 02 FB | 	rdlong	local01, objptr
03c58     0C 4E 05 F1 | 	add	fp, #12
03c5c     A7 1E 62 FC | 	wrlong	local01, fp
03c60     10 4E 85 F1 | 	sub	fp, #16
03c64                 | ' 
03c64                 | ' 
03c64                 | ' searchptr=programstart
03c64                 | ' 
03c64                 | ' do
03c64     35 00 00 FF 
03c68     88 E5 85 F1 | 	sub	objptr, ##27528
03c6c                 | LR__0320
03c6c     14 4E 05 F1 | 	add	fp, #20
03c70     A7 12 02 F6 | 	mov	arg01, fp
03c74     04 4E 85 F1 | 	sub	fp, #4
03c78     A7 14 02 FB | 	rdlong	arg02, fp
03c7c     10 4E 85 F1 | 	sub	fp, #16
03c80     18 16 06 F6 | 	mov	arg03, #24
03c84     4C 10 B1 FD | 	call	#_psram_spin2_read1
03c88     10 4E 05 F1 | 	add	fp, #16
03c8c     A7 1E 02 FB | 	rdlong	local01, fp
03c90     08 4E 85 F1 | 	sub	fp, #8
03c94     A7 1E 62 FC | 	wrlong	local01, fp
03c98     20 4E 05 F1 | 	add	fp, #32
03c9c     A7 1E 02 FB | 	rdlong	local01, fp
03ca0     18 4E 85 F1 | 	sub	fp, #24
03ca4     A7 1E 62 FC | 	wrlong	local01, fp
03ca8     04 4E 05 F1 | 	add	fp, #4
03cac     A7 1E 02 FB | 	rdlong	local01, fp
03cb0     10 4E 85 F1 | 	sub	fp, #16
03cb4     A7 16 02 FB | 	rdlong	arg03, fp
03cb8     04 4E 85 F1 | 	sub	fp, #4
03cbc     0B 1F 12 F2 | 	cmp	local01, arg03 wc
03cc0     28 4E 05 C1 |  if_b	add	fp, #40
03cc4     A7 20 02 CB |  if_b	rdlong	local02, fp
03cc8     28 4E 85 C1 |  if_b	sub	fp, #40
03ccc     FF FF 3F CF 
03cd0     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
03cd4     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0320
03cd8     0B 00 00 FF 
03cdc     C0 E4 85 F1 | 	sub	objptr, ##5824
03ce0                 | ' 
03ce0                 | ' 
03ce0                 | ' if header(0)<>aline then return -1
03ce0     14 4E 05 F1 | 	add	fp, #20
03ce4     A7 1E 02 FB | 	rdlong	local01, fp
03ce8     10 4E 85 F1 | 	sub	fp, #16
03cec     A7 22 02 FB | 	rdlong	local03, fp
03cf0     04 4E 85 F1 | 	sub	fp, #4
03cf4     11 1F 0A F2 | 	cmp	local01, local03 wz
03cf8     01 FA 65 56 |  if_ne	neg	result1, #1
03cfc     4C 03 90 5D |  if_ne	jmp	#LR__0326
03d00     08 4E 05 F1 | 	add	fp, #8
03d04     A7 12 02 FB | 	rdlong	arg01, fp
03d08     08 4E 85 F1 | 	sub	fp, #8
03d0c     01 14 66 F6 | 	neg	arg02, #1
03d10     01 16 06 F6 | 	mov	arg03, #1
03d14     00 18 06 F6 | 	mov	arg04, #0
03d18     0B 00 00 FF 
03d1c     C0 E4 05 F1 | 	add	objptr, ##5824
03d20                 | '     return fill(addr, pattern, count, listPtr, 4)
03d20     04 1A 06 F6 | 	mov	arg05, #4
03d24     E4 10 B1 FD | 	call	#_psram_spin2_fill
03d28     0B 00 00 FF 
03d2c     C0 E4 85 F1 | 	sub	objptr, ##5824
03d30                 | ' 
03d30                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
03d30                 | ' 
03d30                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is one and only line in the program
03d30     28 4E 05 F1 | 	add	fp, #40
03d34     A7 1E 02 FB | 	rdlong	local01, fp
03d38     28 4E 85 F1 | 	sub	fp, #40
03d3c     FF FF 3F FF 
03d40     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03d44     24 4E 05 A1 |  if_e	add	fp, #36
03d48     A7 22 02 AB |  if_e	rdlong	local03, fp
03d4c     24 4E 85 A1 |  if_e	sub	fp, #36
03d50     FF FF 7F AF 
03d54     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
03d58     90 00 90 5D |  if_ne	jmp	#LR__0321
03d5c     41 00 00 FF 
03d60     48 E4 05 F1 | 	add	objptr, ##33352
03d64     F2 00 68 FC | 	wrlong	#0, objptr
03d68     07 00 00 FF 
03d6c     28 E4 85 F1 | 	sub	objptr, ##3624
03d70     F2 00 68 FC | 	wrlong	#0, objptr
03d74     07 00 00 FF 
03d78     2C E4 05 F1 | 	add	objptr, ##3628
03d7c     F2 00 68 FC | 	wrlong	#0, objptr
03d80     04 E4 05 F1 | 	add	objptr, #4
03d84     FF FF FF FF 
03d88     F2 FE 6B FC | 	wrlong	##-1, objptr
03d8c     00 12 06 F6 | 	mov	arg01, #0
03d90     10 E4 85 F1 | 	sub	objptr, #16
03d94     F2 00 68 FC | 	wrlong	#0, objptr
03d98     01 14 66 F6 | 	neg	arg02, #1
03d9c     01 16 06 F6 | 	mov	arg03, #1
03da0     00 18 06 F6 | 	mov	arg04, #0
03da4     35 00 00 FF 
03da8     80 E5 85 F1 | 	sub	objptr, ##27520
03dac                 | '     return fill(addr, pattern, count, listPtr, 4)
03dac     04 1A 06 F6 | 	mov	arg05, #4
03db0     58 10 B1 FD | 	call	#_psram_spin2_fill
03db4     10 12 06 F6 | 	mov	arg01, #16
03db8     01 14 66 F6 | 	neg	arg02, #1
03dbc     01 16 06 F6 | 	mov	arg03, #1
03dc0     00 18 06 F6 | 	mov	arg04, #0
03dc4                 | '     return fill(addr, pattern, count, listPtr, 4)
03dc4     04 1A 06 F6 | 	mov	arg05, #4
03dc8     40 10 B1 FD | 	call	#_psram_spin2_fill
03dcc     14 12 06 F6 | 	mov	arg01, #20
03dd0     1E 14 CE F9 | 	bmask	arg02, #30
03dd4     01 16 06 F6 | 	mov	arg03, #1
03dd8     00 18 06 F6 | 	mov	arg04, #0
03ddc                 | '     return fill(addr, pattern, count, listPtr, 4)
03ddc     04 1A 06 F6 | 	mov	arg05, #4
03de0     28 10 B1 FD | 	call	#_psram_spin2_fill
03de4     0B 00 00 FF 
03de8     C0 E4 85 F1 | 	sub	objptr, ##5824
03dec                 | LR__0321
03dec                 | ' 
03dec                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
03dec     28 4E 05 F1 | 	add	fp, #40
03df0     A7 1E 02 FB | 	rdlong	local01, fp
03df4     28 4E 85 F1 | 	sub	fp, #40
03df8     FF FF 3F FF 
03dfc     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03e00     88 00 90 5D |  if_ne	jmp	#LR__0322
03e04     24 4E 05 F1 | 	add	fp, #36
03e08     A7 22 02 FB | 	rdlong	local03, fp
03e0c     24 4E 85 F1 | 	sub	fp, #36
03e10     FF FF 7F FF 
03e14     FF 23 0E F2 | 	cmp	local03, ##-1 wz
03e18     70 00 90 AD |  if_e	jmp	#LR__0322
03e1c     24 4E 05 F1 | 	add	fp, #36
03e20     A7 12 02 FB | 	rdlong	arg01, fp
03e24     24 4E 85 F1 | 	sub	fp, #36
03e28     14 12 06 F1 | 	add	arg01, #20
03e2c     1E 14 CE F9 | 	bmask	arg02, #30
03e30     01 16 06 F6 | 	mov	arg03, #1
03e34     00 18 06 F6 | 	mov	arg04, #0
03e38     0B 00 00 FF 
03e3c     C0 E4 05 F1 | 	add	objptr, ##5824
03e40                 | '     return fill(addr, pattern, count, listPtr, 4)
03e40     04 1A 06 F6 | 	mov	arg05, #4
03e44     C4 0F B1 FD | 	call	#_psram_spin2_fill
03e48     24 4E 05 F1 | 	add	fp, #36
03e4c     A7 1E 02 FB | 	rdlong	local01, fp
03e50     35 00 00 FF 
03e54     90 E5 05 F1 | 	add	objptr, ##27536
03e58     F2 1E 62 FC | 	wrlong	local01, objptr
03e5c     41 00 00 FF 
03e60     50 E4 85 F1 | 	sub	objptr, ##33360
03e64     A7 12 02 FB | 	rdlong	arg01, fp
03e68     24 4E 85 F1 | 	sub	fp, #36
03e6c     10 E6 B0 FD | 	call	#_pslpeek
03e70     41 00 00 FF 
03e74     4C E4 05 F1 | 	add	objptr, ##33356
03e78     F2 FA 61 FC | 	wrlong	result1, objptr
03e7c     41 00 00 FF 
03e80     4C E4 85 F1 | 	sub	objptr, ##33356
03e84                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
03e84                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
03e84                 | '   lastline=pslpeek(header(4))
03e84                 | '   return 0
03e84     00 FA 05 F6 | 	mov	result1, #0
03e88     C0 01 90 FD | 	jmp	#LR__0326
03e8c                 | LR__0322
03e8c                 | ' 
03e8c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
03e8c     28 4E 05 F1 | 	add	fp, #40
03e90     A7 1E 02 FB | 	rdlong	local01, fp
03e94     28 4E 85 F1 | 	sub	fp, #40
03e98     FF FF 3F FF 
03e9c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03ea0     6C 00 90 AD |  if_e	jmp	#LR__0323
03ea4     24 4E 05 F1 | 	add	fp, #36
03ea8     A7 22 02 FB | 	rdlong	local03, fp
03eac     24 4E 85 F1 | 	sub	fp, #36
03eb0     FF FF 7F FF 
03eb4     FF 23 0E F2 | 	cmp	local03, ##-1 wz
03eb8     54 00 90 5D |  if_ne	jmp	#LR__0323
03ebc     28 4E 05 F1 | 	add	fp, #40
03ec0     A7 12 02 FB | 	rdlong	arg01, fp
03ec4     28 4E 85 F1 | 	sub	fp, #40
03ec8     10 12 06 F1 | 	add	arg01, #16
03ecc     01 14 66 F6 | 	neg	arg02, #1
03ed0     01 16 06 F6 | 	mov	arg03, #1
03ed4     00 18 06 F6 | 	mov	arg04, #0
03ed8     0B 00 00 FF 
03edc     C0 E4 05 F1 | 	add	objptr, ##5824
03ee0                 | '     return fill(addr, pattern, count, listPtr, 4)
03ee0     04 1A 06 F6 | 	mov	arg05, #4
03ee4     24 0F B1 FD | 	call	#_psram_spin2_fill
03ee8     28 4E 05 F1 | 	add	fp, #40
03eec     A7 1E 02 FB | 	rdlong	local01, fp
03ef0     28 4E 85 F1 | 	sub	fp, #40
03ef4     35 00 00 FF 
03ef8     88 E5 05 F1 | 	add	objptr, ##27528
03efc     F2 1E 62 FC | 	wrlong	local01, objptr
03f00     41 00 00 FF 
03f04     48 E4 85 F1 | 	sub	objptr, ##33352
03f08                 | ' '   print "deleted first line"
03f08                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
03f08                 | '   programstart=header(5) ' adjust the program start to point on the first new line
03f08                 | '   return 0
03f08     00 FA 05 F6 | 	mov	result1, #0
03f0c     3C 01 90 FD | 	jmp	#LR__0326
03f10                 | LR__0323
03f10                 | ' 
03f10                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
03f10     28 4E 05 F1 | 	add	fp, #40
03f14     A7 1E 02 FB | 	rdlong	local01, fp
03f18     28 4E 85 F1 | 	sub	fp, #40
03f1c     FF FF 3F FF 
03f20     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03f24     24 4E 05 51 |  if_ne	add	fp, #36
03f28     A7 22 02 5B |  if_ne	rdlong	local03, fp
03f2c     24 4E 85 51 |  if_ne	sub	fp, #36
03f30     FF FF 7F 5F 
03f34     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
03f38     68 00 90 AD |  if_e	jmp	#LR__0324
03f3c     28 4E 05 F1 | 	add	fp, #40
03f40     A7 12 02 FB | 	rdlong	arg01, fp
03f44     10 12 06 F1 | 	add	arg01, #16
03f48     04 4E 85 F1 | 	sub	fp, #4
03f4c     A7 14 02 FB | 	rdlong	arg02, fp
03f50     24 4E 85 F1 | 	sub	fp, #36
03f54     01 16 06 F6 | 	mov	arg03, #1
03f58     00 18 06 F6 | 	mov	arg04, #0
03f5c     0B 00 00 FF 
03f60     C0 E4 05 F1 | 	add	objptr, ##5824
03f64                 | '     return fill(addr, pattern, count, listPtr, 4)
03f64     04 1A 06 F6 | 	mov	arg05, #4
03f68     A0 0E B1 FD | 	call	#_psram_spin2_fill
03f6c     24 4E 05 F1 | 	add	fp, #36
03f70     A7 12 02 FB | 	rdlong	arg01, fp
03f74     14 12 06 F1 | 	add	arg01, #20
03f78     04 4E 05 F1 | 	add	fp, #4
03f7c     A7 14 02 FB | 	rdlong	arg02, fp
03f80     28 4E 85 F1 | 	sub	fp, #40
03f84     01 16 06 F6 | 	mov	arg03, #1
03f88     00 18 06 F6 | 	mov	arg04, #0
03f8c                 | '     return fill(addr, pattern, count, listPtr, 4)
03f8c     04 1A 06 F6 | 	mov	arg05, #4
03f90     78 0E B1 FD | 	call	#_psram_spin2_fill
03f94     0B 00 00 FF 
03f98     C0 E4 85 F1 | 	sub	objptr, ##5824
03f9c                 | '    pslpoke(header(5)+16,header(4))  
03f9c                 | '    pslpoke(header(4)+20, header(5))
03f9c                 | '    return 0
03f9c     00 FA 05 F6 | 	mov	result1, #0
03fa0     A8 00 90 FD | 	jmp	#LR__0326
03fa4                 | LR__0324
03fa4     10 4E 05 F1 | 	add	fp, #16
03fa8     A7 1E 02 FB | 	rdlong	local01, fp
03fac     08 4E 85 F1 | 	sub	fp, #8
03fb0     A7 1E 62 FC | 	wrlong	local01, fp
03fb4     41 00 00 FF 
03fb8     48 E4 05 F1 | 	add	objptr, ##33352
03fbc     F2 1E 02 FB | 	rdlong	local01, objptr
03fc0     08 4E 05 F1 | 	add	fp, #8
03fc4     A7 1E 62 FC | 	wrlong	local01, fp
03fc8     10 4E 85 F1 | 	sub	fp, #16
03fcc                 | ' 
03fcc                 | ' 
03fcc                 | ' 
03fcc                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
03fcc                 | ' 
03fcc                 | ' lineptr2=searchptr
03fcc                 | ' searchptr=programstart
03fcc                 | ' 
03fcc                 | ' do
03fcc     35 00 00 FF 
03fd0     88 E5 85 F1 | 	sub	objptr, ##27528
03fd4                 | LR__0325
03fd4     14 4E 05 F1 | 	add	fp, #20
03fd8     A7 12 02 F6 | 	mov	arg01, fp
03fdc     04 4E 85 F1 | 	sub	fp, #4
03fe0     A7 14 02 FB | 	rdlong	arg02, fp
03fe4     10 4E 85 F1 | 	sub	fp, #16
03fe8     18 16 06 F6 | 	mov	arg03, #24
03fec     E4 0C B1 FD | 	call	#_psram_spin2_read1
03ff0     10 4E 05 F1 | 	add	fp, #16
03ff4     A7 1E 02 FB | 	rdlong	local01, fp
03ff8     08 4E 85 F1 | 	sub	fp, #8
03ffc     A7 1E 62 FC | 	wrlong	local01, fp
04000     20 4E 05 F1 | 	add	fp, #32
04004     A7 1E 02 FB | 	rdlong	local01, fp
04008     18 4E 85 F1 | 	sub	fp, #24
0400c     A7 1E 62 FC | 	wrlong	local01, fp
04010     04 4E 05 F1 | 	add	fp, #4
04014     A7 1E 02 FB | 	rdlong	local01, fp
04018     10 4E 85 F1 | 	sub	fp, #16
0401c     A7 22 02 FB | 	rdlong	local03, fp
04020     04 4E 85 F1 | 	sub	fp, #4
04024     11 1F 12 F2 | 	cmp	local01, local03 wc
04028     28 4E 05 C1 |  if_b	add	fp, #40
0402c     A7 20 02 CB |  if_b	rdlong	local02, fp
04030     28 4E 85 C1 |  if_b	sub	fp, #40
04034     FF FF 3F CF 
04038     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
0403c     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0325
04040     0B 00 00 FF 
04044     C0 E4 85 F1 | 	sub	objptr, ##5824
04048     00 FA 05 F6 | 	mov	result1, #0
0404c                 | LR__0326
0404c     A7 F0 03 F6 | 	mov	ptra, fp
04050     B2 00 A0 FD | 	call	#popregs_
04054                 | _deleteline_ret
04054     2D 00 64 FD | 	ret
04058                 | 
04058                 | ' 
04058                 | ' sub save_line
04058                 | _save_line
04058     03 4A 05 F6 | 	mov	COUNT_, #3
0405c     A8 00 A0 FD | 	call	#pushregs_
04060     41 00 00 FF 
04064     40 E4 05 F1 | 	add	objptr, ##33344
04068     F2 16 02 FB | 	rdlong	arg03, objptr
0406c     01 16 06 F1 | 	add	arg03, #1
04070     05 00 00 FF 
04074     18 E4 85 F1 | 	sub	objptr, ##2584
04078     F2 14 02 FB | 	rdlong	arg02, objptr
0407c     0B 15 02 FD | 	qmul	arg02, arg03
04080     0E 00 00 FF 
04084     44 E4 85 F1 | 	sub	objptr, ##7236
04088     F2 12 02 FB | 	rdlong	arg01, objptr
0408c     2D 00 00 FF 
04090     E4 E5 85 F1 | 	sub	objptr, ##23524
04094     09 1F 02 F6 | 	mov	local01, arg01
04098     18 20 62 FD | 	getqx	local02
0409c     97 06 48 FB | 	callpa	#(@LR__0331-@LR__0330)>>2,fcache_load_ptr_
040a0                 | LR__0330
040a0     0F FB C9 FA | 	rdbyte	result1, local01 wz
040a4     01 1E 06 51 |  if_ne	add	local01, #1
040a8     F4 FF 9F 5D |  if_ne	jmp	#LR__0330
040ac                 | LR__0331
040ac     09 1F 82 F1 | 	sub	local01, arg01
040b0     03 1E CE F7 | 	test	local01, #3 wz
040b4     02 1E 46 50 |  if_ne	shr	local01, #2
040b8     01 1E 06 51 |  if_ne	add	local01, #1
040bc     02 1E 66 50 |  if_ne	shl	local01, #2
040c0     10 23 02 F6 | 	mov	local03, local02
040c4     0F 23 02 F1 | 	add	local03, local01
040c8     3A 00 00 FF 
040cc     20 E4 05 F1 | 	add	objptr, ##29728
040d0     F2 16 02 FB | 	rdlong	arg03, objptr
040d4     10 17 02 F1 | 	add	arg03, local02
040d8     04 00 00 FF 
040dc     28 E4 05 F1 | 	add	objptr, ##2088
040e0     F2 16 62 FC | 	wrlong	arg03, objptr
040e4     04 E4 05 F1 | 	add	objptr, #4
040e8     F2 1E 62 FC | 	wrlong	local01, objptr
040ec     0C E4 85 F1 | 	sub	objptr, #12
040f0     F2 12 02 F6 | 	mov	arg01, objptr
040f4     04 00 00 FF 
040f8     20 E4 85 F1 | 	sub	objptr, ##2080
040fc     F2 14 02 FB | 	rdlong	arg02, objptr
04100     10 17 02 F6 | 	mov	arg03, local02
04104     2E 00 00 FF 
04108     60 E5 85 F1 | 	sub	objptr, ##23904
0410c     60 0C B1 FD | 	call	#_psram_spin2_write
04110     22 00 00 FF 
04114     24 E5 05 F1 | 	add	objptr, ##17700
04118     F2 12 02 FB | 	rdlong	arg01, objptr
0411c     0C 00 00 FF 
04120     3C E4 05 F1 | 	add	objptr, ##6204
04124     F2 14 02 FB | 	rdlong	arg02, objptr
04128     10 15 02 F1 | 	add	arg02, local02
0412c     0F 17 02 F6 | 	mov	arg03, local01
04130     2E 00 00 FF 
04134     60 E5 85 F1 | 	sub	objptr, ##23904
04138     34 0C B1 FD | 	call	#_psram_spin2_write
0413c     2E 00 00 FF 
04140     60 E5 05 F1 | 	add	objptr, ##23904
04144     F2 1E 02 FB | 	rdlong	local01, objptr
04148     11 1F 02 F1 | 	add	local01, local03
0414c     F2 1E 62 FC | 	wrlong	local01, objptr
04150     3A 00 00 FF 
04154     20 E4 85 F1 | 	sub	objptr, ##29728
04158     A7 F0 03 F6 | 	mov	ptra, fp
0415c     B2 00 A0 FD | 	call	#popregs_
04160                 | _save_line_ret
04160     2D 00 64 FD | 	ret
04164                 | 
04164                 | ' 
04164                 | ' 
04164                 | ' function insertline(aline as ulong) as integer
04164                 | _insertline
04164     02 4A 05 F6 | 	mov	COUNT_, #2
04168     A8 00 A0 FD | 	call	#pushregs_
0416c     28 F0 07 F1 | 	add	ptra, #40
04170     04 4E 05 F1 | 	add	fp, #4
04174     A7 12 62 FC | 	wrlong	arg01, fp
04178     41 00 00 FF 
0417c     48 E4 05 F1 | 	add	objptr, ##33352
04180     F2 1E 02 FB | 	rdlong	local01, objptr
04184     04 4E 05 F1 | 	add	fp, #4
04188     A7 1E 62 FC | 	wrlong	local01, fp
0418c     08 4E 85 F1 | 	sub	fp, #8
04190                 | ' 
04190                 | ' do
04190     35 00 00 FF 
04194     88 E5 85 F1 | 	sub	objptr, ##27528
04198                 | LR__0340
04198     10 4E 05 F1 | 	add	fp, #16
0419c     A7 12 02 F6 | 	mov	arg01, fp
041a0     08 4E 85 F1 | 	sub	fp, #8
041a4     A7 14 02 FB | 	rdlong	arg02, fp
041a8     08 4E 85 F1 | 	sub	fp, #8
041ac     18 16 06 F6 | 	mov	arg03, #24
041b0     20 0B B1 FD | 	call	#_psram_spin2_read1
041b4     08 4E 05 F1 | 	add	fp, #8
041b8     A7 1E 02 FB | 	rdlong	local01, fp
041bc     04 4E 05 F1 | 	add	fp, #4
041c0     A7 1E 62 FC | 	wrlong	local01, fp
041c4     18 4E 05 F1 | 	add	fp, #24
041c8     A7 1E 02 FB | 	rdlong	local01, fp
041cc     1C 4E 85 F1 | 	sub	fp, #28
041d0     A7 1E 62 FC | 	wrlong	local01, fp
041d4     08 4E 05 F1 | 	add	fp, #8
041d8     A7 1E 02 FB | 	rdlong	local01, fp
041dc     0C 4E 85 F1 | 	sub	fp, #12
041e0     A7 16 02 FB | 	rdlong	arg03, fp
041e4     04 4E 85 F1 | 	sub	fp, #4
041e8     0B 1F 12 F2 | 	cmp	local01, arg03 wc
041ec     24 4E 05 C1 |  if_b	add	fp, #36
041f0     A7 20 02 CB |  if_b	rdlong	local02, fp
041f4     24 4E 85 C1 |  if_b	sub	fp, #36
041f8     FF FF 3F CF 
041fc     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
04200     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0340
04204     0B 00 00 FF 
04208     C0 E4 85 F1 | 	sub	objptr, ##5824
0420c                 | ' 
0420c                 | ' if header(0)=aline then return -1 ' delete it first
0420c     10 4E 05 F1 | 	add	fp, #16
04210     A7 1E 02 FB | 	rdlong	local01, fp
04214     0C 4E 85 F1 | 	sub	fp, #12
04218     A7 20 02 FB | 	rdlong	local02, fp
0421c     04 4E 85 F1 | 	sub	fp, #4
04220     10 1F 0A F2 | 	cmp	local01, local02 wz
04224     01 FA 65 A6 |  if_e	neg	result1, #1
04228     74 01 90 AD |  if_e	jmp	#LR__0343
0422c                 | ' if header(0)<aline then return -2 ' end of program reached
0422c     10 4E 05 F1 | 	add	fp, #16
04230     A7 1E 02 FB | 	rdlong	local01, fp
04234     0C 4E 85 F1 | 	sub	fp, #12
04238     A7 16 02 FB | 	rdlong	arg03, fp
0423c     04 4E 85 F1 | 	sub	fp, #4
04240     0B 1F 12 F2 | 	cmp	local01, arg03 wc
04244     02 FA 65 C6 |  if_b	neg	result1, #2
04248     54 01 90 CD |  if_b	jmp	#LR__0343
0424c                 | ' 
0424c                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
0424c     20 4E 05 F1 | 	add	fp, #32
04250     A7 1E 02 FB | 	rdlong	local01, fp
04254     20 4E 85 F1 | 	sub	fp, #32
04258     FF FF 7F FF 
0425c     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
04260     84 00 90 5D |  if_ne	jmp	#LR__0341
04264     3A 00 00 FF 
04268     20 E4 05 F1 | 	add	objptr, ##29728
0426c     F2 1E 02 FB | 	rdlong	local01, objptr
04270     07 00 00 FF 
04274     28 E4 05 F1 | 	add	objptr, ##3624
04278     F2 1E 62 FC | 	wrlong	local01, objptr
0427c     0C 4E 05 F1 | 	add	fp, #12
04280     A7 12 02 FB | 	rdlong	arg01, fp
04284     0C 4E 85 F1 | 	sub	fp, #12
04288     10 12 06 F1 | 	add	arg01, #16
0428c     07 00 00 FF 
04290     28 E4 85 F1 | 	sub	objptr, ##3624
04294     F2 14 02 FB | 	rdlong	arg02, objptr
04298     01 16 06 F6 | 	mov	arg03, #1
0429c     00 18 06 F6 | 	mov	arg04, #0
042a0     2E 00 00 FF 
042a4     60 E5 85 F1 | 	sub	objptr, ##23904
042a8                 | '     return fill(addr, pattern, count, listPtr, 4)
042a8     04 1A 06 F6 | 	mov	arg05, #4
042ac     5C 0B B1 FD | 	call	#_psram_spin2_fill
042b0     32 00 00 FF 
042b4     90 E5 05 F1 | 	add	objptr, ##26000
042b8     FF FF FF FF 
042bc     F2 FE 6B FC | 	wrlong	##-1, objptr
042c0     0C 4E 05 F1 | 	add	fp, #12
042c4     A7 1E 02 FB | 	rdlong	local01, fp
042c8     0C 4E 85 F1 | 	sub	fp, #12
042cc     04 E4 05 F1 | 	add	objptr, #4
042d0     F2 1E 62 FC | 	wrlong	local01, objptr
042d4     3E 00 00 FF 
042d8     54 E4 85 F1 | 	sub	objptr, ##31828
042dc     78 FD BF FD | 	call	#_save_line
042e0                 | '   programstart=programptr
042e0                 | '   pslpoke(lineptr2+16,programptr)
042e0                 | '   ucompiledline(4)=$FFFF_FFFF
042e0                 | '   ucompiledline(5)=lineptr2
042e0                 | '   save_line
042e0                 | '   return 0
042e0     00 FA 05 F6 | 	mov	result1, #0
042e4     B8 00 90 FD | 	jmp	#LR__0343
042e8                 | LR__0341
042e8                 | ' 
042e8                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
042e8     20 4E 05 F1 | 	add	fp, #32
042ec     A7 1E 02 FB | 	rdlong	local01, fp
042f0     20 4E 85 F1 | 	sub	fp, #32
042f4     FF FF 7F FF 
042f8     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
042fc     9C 00 90 AD |  if_e	jmp	#LR__0342
04300     20 4E 05 F1 | 	add	fp, #32
04304     A7 1E 02 FB | 	rdlong	local01, fp
04308     3E 00 00 FF 
0430c     50 E4 05 F1 | 	add	objptr, ##31824
04310     F2 1E 62 FC | 	wrlong	local01, objptr
04314     14 4E 85 F1 | 	sub	fp, #20
04318     A7 1E 02 FB | 	rdlong	local01, fp
0431c     04 E4 05 F1 | 	add	objptr, #4
04320     F2 1E 62 FC | 	wrlong	local01, objptr
04324     A7 12 02 FB | 	rdlong	arg01, fp
04328     0C 4E 85 F1 | 	sub	fp, #12
0432c     10 12 06 F1 | 	add	arg01, #16
04330     04 00 00 FF 
04334     34 E4 85 F1 | 	sub	objptr, ##2100
04338     F2 14 02 FB | 	rdlong	arg02, objptr
0433c     01 16 06 F6 | 	mov	arg03, #1
04340     00 18 06 F6 | 	mov	arg04, #0
04344     2E 00 00 FF 
04348     60 E5 85 F1 | 	sub	objptr, ##23904
0434c                 | '     return fill(addr, pattern, count, listPtr, 4)
0434c     04 1A 06 F6 | 	mov	arg05, #4
04350     B8 0A B1 FD | 	call	#_psram_spin2_fill
04354     20 4E 05 F1 | 	add	fp, #32
04358     A7 12 02 FB | 	rdlong	arg01, fp
0435c     20 4E 85 F1 | 	sub	fp, #32
04360     14 12 06 F1 | 	add	arg01, #20
04364     2E 00 00 FF 
04368     60 E5 05 F1 | 	add	objptr, ##23904
0436c     F2 14 02 FB | 	rdlong	arg02, objptr
04370     01 16 06 F6 | 	mov	arg03, #1
04374     00 18 06 F6 | 	mov	arg04, #0
04378     2E 00 00 FF 
0437c     60 E5 85 F1 | 	sub	objptr, ##23904
04380                 | '     return fill(addr, pattern, count, listPtr, 4)
04380     04 1A 06 F6 | 	mov	arg05, #4
04384     84 0A B1 FD | 	call	#_psram_spin2_fill
04388     0B 00 00 FF 
0438c     C0 E4 85 F1 | 	sub	objptr, ##5824
04390     C4 FC BF FD | 	call	#_save_line
04394                 | '   ucompiledline(4)=header(4)
04394                 | '   ucompiledline(5)=lineptr2
04394                 | '   pslpoke(lineptr2+16,programptr)
04394                 | '   pslpoke(header(4)+20,programptr)
04394                 | '   save_line
04394                 | '   return 0
04394     00 FA 05 F6 | 	mov	result1, #0
04398     04 00 90 FD | 	jmp	#LR__0343
0439c                 | LR__0342
0439c     00 FA 05 F6 | 	mov	result1, #0
043a0                 | LR__0343
043a0     A7 F0 03 F6 | 	mov	ptra, fp
043a4     B2 00 A0 FD | 	call	#popregs_
043a8                 | _insertline_ret
043a8     2D 00 64 FD | 	ret
043ac                 | 
043ac                 | ' 
043ac                 | ' sub add_line_at_end(aline) 
043ac                 | _add_line_at_end
043ac     41 00 00 FF 
043b0     4C E4 05 F1 | 	add	objptr, ##33356
043b4     F2 12 62 FC | 	wrlong	arg01, objptr
043b8     04 E4 05 F1 | 	add	objptr, #4
043bc     F2 14 02 FB | 	rdlong	arg02, objptr
043c0     03 00 00 FF 
043c4     00 E4 85 F1 | 	sub	objptr, ##1536
043c8     F2 14 62 FC | 	wrlong	arg02, objptr
043cc     03 00 00 FF 
043d0     00 E4 05 F1 | 	add	objptr, ##1536
043d4     F2 12 02 FB | 	rdlong	arg01, objptr
043d8     14 12 06 F1 | 	add	arg01, #20
043dc     07 00 00 FF 
043e0     30 E4 85 F1 | 	sub	objptr, ##3632
043e4     F2 14 02 FB | 	rdlong	arg02, objptr
043e8     01 16 06 F6 | 	mov	arg03, #1
043ec     00 18 06 F6 | 	mov	arg04, #0
043f0     2E 00 00 FF 
043f4     60 E5 85 F1 | 	sub	objptr, ##23904
043f8                 | '     return fill(addr, pattern, count, listPtr, 4)
043f8     04 1A 06 F6 | 	mov	arg05, #4
043fc     0C 0A B1 FD | 	call	#_psram_spin2_fill
04400     2E 00 00 FF 
04404     60 E5 05 F1 | 	add	objptr, ##23904
04408     F2 14 02 FB | 	rdlong	arg02, objptr
0440c     07 00 00 FF 
04410     30 E4 05 F1 | 	add	objptr, ##3632
04414     F2 14 62 FC | 	wrlong	arg02, objptr
04418     02 00 00 FF 
0441c     FC E5 85 F1 | 	sub	objptr, ##1532
04420     FF FF BF FF 
04424     F2 FE 6B FC | 	wrlong	##2147483647, objptr
04428                 | ' 
04428                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
04428                 | ' if programptr=0 then ucompiledline(4)=$FFFFFFFF ' that is the first line
04428     04 00 00 FF 
0442c     34 E4 85 F1 | 	sub	objptr, ##2100
04430     F2 14 0A FB | 	rdlong	arg02, objptr wz
04434     3A 00 00 FF 
04438     20 E4 85 F1 | 	sub	objptr, ##29728
0443c     3E 00 00 AF 
04440     50 E4 05 A1 |  if_e	add	objptr, ##31824
04444     FF FF FF AF 
04448     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
0444c     3E 00 00 AF 
04450     50 E4 85 A1 |  if_e	sub	objptr, ##31824
04454     00 FC BF FD | 	call	#_save_line
04458     3A 00 00 FF 
0445c     20 E4 05 F1 | 	add	objptr, ##29728
04460     F2 12 02 FB | 	rdlong	arg01, objptr
04464     01 14 66 F6 | 	neg	arg02, #1
04468     01 16 06 F6 | 	mov	arg03, #1
0446c     00 18 06 F6 | 	mov	arg04, #0
04470     2E 00 00 FF 
04474     60 E5 85 F1 | 	sub	objptr, ##23904
04478                 | '     return fill(addr, pattern, count, listPtr, 4)
04478     04 1A 06 F6 | 	mov	arg05, #4
0447c     8C 09 B1 FD | 	call	#_psram_spin2_fill
04480     0B 00 00 FF 
04484     C0 E4 85 F1 | 	sub	objptr, ##5824
04488                 | _add_line_at_end_ret
04488     2D 00 64 FD | 	ret
0448c                 | 
0448c                 | ' 
0448c                 | ' function compile_immediate(linetype as ulong) as integer
0448c                 | _compile_immediate
0448c     09 4A 05 F6 | 	mov	COUNT_, #9
04490     A8 00 A0 FD | 	call	#pushregs_
04494                 | _compile_immediate_enter
04494     09 25 0A F6 | 	mov	local04, arg01 wz
04498     00 26 06 F6 | 	mov	local05, #0
0449c     00 28 06 F6 | 	mov	local06, #0
044a0                 | ' 
044a0                 | ' ' linetype=cont+1, linetype=0 immediate
044a0                 | ' '  : 1: this is the first part of the line that will continue
044a0                 | ' ' 2 - this is the continuation of the line
044a0                 | ' ' 3 - this is the last continued line
044a0                 | ' ' 4 - this is the one and only part
044a0                 | ' 
044a0                 | ' err=0
044a0                 | ' cmd=0
044a0                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
044a0     2C 00 90 5D |  if_ne	jmp	#LR__0350
044a4     2B 00 00 FF 
044a8     D4 E5 05 F1 | 	add	objptr, ##22484
044ac     F2 28 02 FB | 	rdlong	local06, objptr
044b0     02 00 00 FF 
044b4     34 E4 05 F1 | 	add	objptr, ##1076
044b8     F2 02 68 FC | 	wrlong	#1, objptr
044bc     13 00 00 FF 
044c0     38 E4 05 F1 | 	add	objptr, ##9784
044c4     F2 00 68 FC | 	wrlong	#0, objptr
044c8     41 00 00 FF 
044cc     40 E4 85 F1 | 	sub	objptr, ##33344
044d0                 | LR__0350
044d0                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
044d0     02 24 0E F2 | 	cmp	local04, #2 wz
044d4     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
044d8     2B 00 00 AF 
044dc     D4 E5 05 A1 |  if_e	add	objptr, ##22484
044e0     F2 28 02 AB |  if_e	rdlong	local06, objptr
044e4     02 00 00 AF 
044e8     34 E4 05 A1 |  if_e	add	objptr, ##1076
044ec     F2 02 68 AC |  if_e	wrlong	#1, objptr
044f0     2E 00 00 AF 
044f4     08 E4 85 A1 |  if_e	sub	objptr, ##23560
044f8                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
044f8     04 24 0E F2 | 	cmp	local04, #4 wz
044fc     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
04500     2C 00 90 5D |  if_ne	jmp	#LR__0351
04504     2B 00 00 FF 
04508     DC E5 05 F1 | 	add	objptr, ##22492
0450c     F2 28 02 FB | 	rdlong	local06, objptr
04510     02 00 00 FF 
04514     2C E4 05 F1 | 	add	objptr, ##1068
04518     F2 04 68 FC | 	wrlong	#2, objptr
0451c     13 00 00 FF 
04520     38 E4 05 F1 | 	add	objptr, ##9784
04524     F2 04 68 FC | 	wrlong	#2, objptr
04528     41 00 00 FF 
0452c     40 E4 85 F1 | 	sub	objptr, ##33344
04530                 | LR__0351
04530                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
04530     05 24 0E F2 | 	cmp	local04, #5 wz
04534     40 00 90 5D |  if_ne	jmp	#LR__0352
04538     2E 00 00 FF 
0453c     08 E4 05 F1 | 	add	objptr, ##23560
04540     F2 2A 02 FB | 	rdlong	local07, objptr
04544     15 29 02 F6 | 	mov	local06, local07
04548     03 28 66 F0 | 	shl	local06, #3
0454c     02 00 00 FF 
04550     38 E4 85 F1 | 	sub	objptr, ##1080
04554     F2 28 02 F1 | 	add	local06, objptr
04558     04 28 06 F1 | 	add	local06, #4
0455c     14 29 02 FB | 	rdlong	local06, local06
04560     01 2A 06 F1 | 	add	local07, #1
04564     02 00 00 FF 
04568     38 E4 05 F1 | 	add	objptr, ##1080
0456c     F2 2A 62 FC | 	wrlong	local07, objptr
04570     2E 00 00 FF 
04574     08 E4 85 F1 | 	sub	objptr, ##23560
04578                 | LR__0352
04578     00 2C 06 F6 | 	mov	local08, #0
0457c                 | ' vars=0
0457c                 | ' 'print  "In compile_immediate cmd=:", cmd
0457c                 | ' 451 select case cmd
0457c     40 28 0E F2 | 	cmp	local06, #64 wz
04580     41 28 0E 52 |  if_ne	cmp	local06, #65 wz
04584     F8 02 90 AD |  if_e	jmp	#LR__0396
04588     4C 28 0E F2 | 	cmp	local06, #76 wz
0458c     64 01 90 AD |  if_e	jmp	#LR__0353
04590     4D 28 0E F2 | 	cmp	local06, #77 wz
04594     E8 02 90 AD |  if_e	jmp	#LR__0396
04598     42 28 0E F2 | 	cmp	local06, #66 wz
0459c     60 01 90 AD |  if_e	jmp	#LR__0354
045a0     43 28 0E F2 | 	cmp	local06, #67 wz
045a4     64 01 90 AD |  if_e	jmp	#LR__0355
045a8     45 28 0E F2 | 	cmp	local06, #69 wz
045ac     68 01 90 AD |  if_e	jmp	#LR__0356
045b0     46 28 0E F2 | 	cmp	local06, #70 wz
045b4     6C 01 90 AD |  if_e	jmp	#LR__0357
045b8     47 28 0E F2 | 	cmp	local06, #71 wz
045bc     70 01 90 AD |  if_e	jmp	#LR__0358
045c0     48 28 0E F2 | 	cmp	local06, #72 wz
045c4     74 01 90 AD |  if_e	jmp	#LR__0359
045c8     49 28 0E F2 | 	cmp	local06, #73 wz
045cc     78 01 90 AD |  if_e	jmp	#LR__0360
045d0     44 28 0E F2 | 	cmp	local06, #68 wz
045d4     7C 01 90 AD |  if_e	jmp	#LR__0361
045d8     4E 28 0E F2 | 	cmp	local06, #78 wz
045dc     80 01 90 AD |  if_e	jmp	#LR__0362
045e0     50 28 0E F2 | 	cmp	local06, #80 wz
045e4     94 01 90 AD |  if_e	jmp	#LR__0364
045e8     51 28 0E F2 | 	cmp	local06, #81 wz
045ec     94 01 90 AD |  if_e	jmp	#LR__0365
045f0     52 28 0E F2 | 	cmp	local06, #82 wz
045f4     94 01 90 AD |  if_e	jmp	#LR__0366
045f8     59 28 0E F2 | 	cmp	local06, #89 wz
045fc     94 01 90 AD |  if_e	jmp	#LR__0367
04600     55 28 0E F2 | 	cmp	local06, #85 wz
04604     94 01 90 AD |  if_e	jmp	#LR__0368
04608     56 28 0E F2 | 	cmp	local06, #86 wz
0460c     94 01 90 AD |  if_e	jmp	#LR__0369
04610     57 28 0E F2 | 	cmp	local06, #87 wz
04614     70 28 0E 52 |  if_ne	cmp	local06, #112 wz
04618     64 02 90 AD |  if_e	jmp	#LR__0396
0461c     58 28 0E F2 | 	cmp	local06, #88 wz
04620     88 01 90 AD |  if_e	jmp	#LR__0370
04624     4A 28 0E F2 | 	cmp	local06, #74 wz
04628     88 01 90 AD |  if_e	jmp	#LR__0371
0462c     4B 28 0E F2 | 	cmp	local06, #75 wz
04630     88 01 90 AD |  if_e	jmp	#LR__0372
04634     5A 28 0E F2 | 	cmp	local06, #90 wz
04638     88 01 90 AD |  if_e	jmp	#LR__0373
0463c     5C 28 0E F2 | 	cmp	local06, #92 wz
04640     88 01 90 AD |  if_e	jmp	#LR__0374
04644     5D 28 0E F2 | 	cmp	local06, #93 wz
04648     34 02 90 AD |  if_e	jmp	#LR__0396
0464c     5E 28 0E F2 | 	cmp	local06, #94 wz
04650     84 01 90 AD |  if_e	jmp	#LR__0375
04654     5F 28 0E F2 | 	cmp	local06, #95 wz
04658     84 01 90 AD |  if_e	jmp	#LR__0376
0465c     60 28 0E F2 | 	cmp	local06, #96 wz
04660     84 01 90 AD |  if_e	jmp	#LR__0377
04664     61 28 0E F2 | 	cmp	local06, #97 wz
04668     84 01 90 AD |  if_e	jmp	#LR__0378
0466c     63 28 0E F2 | 	cmp	local06, #99 wz
04670     84 01 90 AD |  if_e	jmp	#LR__0379
04674     68 28 0E F2 | 	cmp	local06, #104 wz
04678     84 01 90 AD |  if_e	jmp	#LR__0380
0467c     69 28 0E F2 | 	cmp	local06, #105 wz
04680     84 01 90 AD |  if_e	jmp	#LR__0381
04684     6D 28 0E F2 | 	cmp	local06, #109 wz
04688     84 01 90 AD |  if_e	jmp	#LR__0382
0468c     6C 28 0E F2 | 	cmp	local06, #108 wz
04690     84 01 90 AD |  if_e	jmp	#LR__0383
04694     71 28 0E F2 | 	cmp	local06, #113 wz
04698     84 01 90 AD |  if_e	jmp	#LR__0384
0469c     79 28 0E F2 | 	cmp	local06, #121 wz
046a0     84 01 90 AD |  if_e	jmp	#LR__0385
046a4     77 28 0E F2 | 	cmp	local06, #119 wz
046a8     84 01 90 AD |  if_e	jmp	#LR__0386
046ac     78 28 0E F2 | 	cmp	local06, #120 wz
046b0     84 01 90 AD |  if_e	jmp	#LR__0387
046b4     7C 28 0E F2 | 	cmp	local06, #124 wz
046b8     84 01 90 AD |  if_e	jmp	#LR__0388
046bc     7D 28 0E F2 | 	cmp	local06, #125 wz
046c0     84 01 90 AD |  if_e	jmp	#LR__0389
046c4     7E 28 0E F2 | 	cmp	local06, #126 wz
046c8     84 01 90 AD |  if_e	jmp	#LR__0390
046cc     7F 28 0E F2 | 	cmp	local06, #127 wz
046d0     84 01 90 AD |  if_e	jmp	#LR__0391
046d4     80 28 0E F2 | 	cmp	local06, #128 wz
046d8     84 01 90 AD |  if_e	jmp	#LR__0392
046dc     72 28 0E F2 | 	cmp	local06, #114 wz
046e0     84 01 90 AD |  if_e	jmp	#LR__0393
046e4     01 00 00 FF 
046e8     04 28 0E F2 | 	cmp	local06, ##516 wz
046ec     80 01 90 AD |  if_e	jmp	#LR__0394
046f0     84 01 90 FD | 	jmp	#LR__0395
046f4                 | LR__0353
046f4     88 0F B0 FD | 	call	#_compile_fun_varp
046f8     FD 2C 02 F6 | 	mov	local08, result1
046fc     80 01 90 FD | 	jmp	#LR__0396
04700                 | LR__0354
04700     9C 0B B0 FD | 	call	#_compile_fun_2p
04704     FD 26 02 F6 | 	mov	local05, result1
04708     74 01 90 FD | 	jmp	#LR__0396
0470c                 | LR__0355
0470c     90 0B B0 FD | 	call	#_compile_fun_2p
04710     FD 26 02 F6 | 	mov	local05, result1
04714     68 01 90 FD | 	jmp	#LR__0396
04718                 | LR__0356
04718     F8 0B B0 FD | 	call	#_compile_fun_3p
0471c     FD 26 02 F6 | 	mov	local05, result1
04720     5C 01 90 FD | 	jmp	#LR__0396
04724                 | LR__0357
04724     EC 0B B0 FD | 	call	#_compile_fun_3p
04728     FD 26 02 F6 | 	mov	local05, result1
0472c     50 01 90 FD | 	jmp	#LR__0396
04730                 | LR__0358
04730     AC 0C B0 FD | 	call	#_compile_fun_4p
04734     FD 26 02 F6 | 	mov	local05, result1
04738     44 01 90 FD | 	jmp	#LR__0396
0473c                 | LR__0359
0473c     A0 0C B0 FD | 	call	#_compile_fun_4p
04740     FD 26 02 F6 | 	mov	local05, result1
04744     38 01 90 FD | 	jmp	#LR__0396
04748                 | LR__0360
04748     78 2D B0 FD | 	call	#_expr
0474c                 | ' 
0474c                 | ' 
0474c                 | ' expr()
0474c                 | ' return 0
0474c     00 26 06 F6 | 	mov	local05, #0
04750     2C 01 90 FD | 	jmp	#LR__0396
04754                 | LR__0361
04754     54 10 B0 FD | 	call	#_compile_print
04758     FD 26 02 F6 | 	mov	local05, result1
0475c     DC 01 90 FD | 	jmp	#LR__0397
04760                 | LR__0362
04760     01 24 16 F2 | 	cmp	local04, #1 wc
04764     08 00 90 CD |  if_b	jmp	#LR__0363
04768     F8 29 B0 FD | 	call	#_compile_goto
0476c     CC 01 90 FD | 	jmp	#LR__0397
04770                 | LR__0363
04770     19 12 06 F6 | 	mov	arg01, #25
04774     4C DB B0 FD | 	call	#_printerror
04778     C0 01 90 FD | 	jmp	#LR__0397
0477c                 | LR__0364
0477c     44 2D B0 FD | 	call	#_expr
04780                 | ' 
04780                 | ' 
04780                 | ' expr()
04780                 | ' return 0
04780     FC 00 90 FD | 	jmp	#LR__0396
04784                 | LR__0365
04784     3C 2D B0 FD | 	call	#_expr
04788                 | ' 
04788                 | ' 
04788                 | ' expr()
04788                 | ' return 0
04788     F4 00 90 FD | 	jmp	#LR__0396
0478c                 | LR__0366
0478c     34 2D B0 FD | 	call	#_expr
04790                 | ' 
04790                 | ' 
04790                 | ' expr()
04790                 | ' return 0
04790     EC 00 90 FD | 	jmp	#LR__0396
04794                 | LR__0367
04794     2C 2D B0 FD | 	call	#_expr
04798                 | ' 
04798                 | ' 
04798                 | ' expr()
04798                 | ' return 0
04798     E4 00 90 FD | 	jmp	#LR__0396
0479c                 | LR__0368
0479c     8C 0F B0 FD | 	call	#_compile_int_fun_2p
047a0     DC 00 90 FD | 	jmp	#LR__0396
047a4                 | LR__0369
047a4     10 0A B0 FD | 	call	#_compile_converttoint
047a8                 | ' return err
047a8     D4 00 90 FD | 	jmp	#LR__0396
047ac                 | LR__0370
047ac     D4 16 B0 FD | 	call	#_compile_if
047b0     88 01 90 FD | 	jmp	#LR__0397
047b4                 | LR__0371
047b4     10 20 B0 FD | 	call	#_compile_for
047b8     80 01 90 FD | 	jmp	#LR__0397
047bc                 | LR__0372
047bc     F4 27 B0 FD | 	call	#_compile_next
047c0     78 01 90 FD | 	jmp	#LR__0397
047c4                 | LR__0373
047c4     FC 17 B0 FD | 	call	#_compile_else
047c8     70 01 90 FD | 	jmp	#LR__0397
047cc                 | LR__0374
047cc     D0 0A B0 FD | 	call	#_compile_fun_2p
047d0     FD 26 02 F6 | 	mov	local05, result1
047d4     A8 00 90 FD | 	jmp	#LR__0396
047d8                 | LR__0375
047d8     E8 2C B0 FD | 	call	#_expr
047dc                 | ' 
047dc                 | ' 
047dc                 | ' expr()
047dc                 | ' return 0
047dc     A0 00 90 FD | 	jmp	#LR__0396
047e0                 | LR__0376
047e0     E0 2C B0 FD | 	call	#_expr
047e4                 | ' 
047e4                 | ' 
047e4                 | ' expr()
047e4                 | ' return 0
047e4     98 00 90 FD | 	jmp	#LR__0396
047e8                 | LR__0377
047e8     D8 2C B0 FD | 	call	#_expr
047ec                 | ' 
047ec                 | ' 
047ec                 | ' expr()
047ec                 | ' return 0
047ec     90 00 90 FD | 	jmp	#LR__0396
047f0                 | LR__0378
047f0     D0 2C B0 FD | 	call	#_expr
047f4                 | ' 
047f4                 | ' 
047f4                 | ' expr()
047f4                 | ' return 0
047f4     88 00 90 FD | 	jmp	#LR__0396
047f8                 | LR__0379
047f8     C8 2C B0 FD | 	call	#_expr
047fc                 | ' 
047fc                 | ' 
047fc                 | ' expr()
047fc                 | ' return 0
047fc     80 00 90 FD | 	jmp	#LR__0396
04800                 | LR__0380
04800     C0 2C B0 FD | 	call	#_expr
04804                 | ' 
04804                 | ' 
04804                 | ' expr()
04804                 | ' return 0
04804     78 00 90 FD | 	jmp	#LR__0396
04808                 | LR__0381
04808     B8 2C B0 FD | 	call	#_expr
0480c                 | ' 
0480c                 | ' 
0480c                 | ' expr()
0480c                 | ' return 0
0480c     70 00 90 FD | 	jmp	#LR__0396
04810                 | LR__0382
04810     00 0B B0 FD | 	call	#_compile_fun_3p
04814     68 00 90 FD | 	jmp	#LR__0396
04818                 | LR__0383
04818     E8 0C B0 FD | 	call	#_compile_fun_5p
0481c     60 00 90 FD | 	jmp	#LR__0396
04820                 | LR__0384
04820     BC 0B B0 FD | 	call	#_compile_fun_4p
04824     58 00 90 FD | 	jmp	#LR__0396
04828                 | LR__0385
04828     74 0A B0 FD | 	call	#_compile_fun_2p
0482c     50 00 90 FD | 	jmp	#LR__0396
04830                 | LR__0386
04830     6C 0A B0 FD | 	call	#_compile_fun_2p
04834     48 00 90 FD | 	jmp	#LR__0396
04838                 | LR__0387
04838     64 0A B0 FD | 	call	#_compile_fun_2p
0483c     40 00 90 FD | 	jmp	#LR__0396
04840                 | LR__0388
04840     80 2C B0 FD | 	call	#_expr
04844                 | ' 
04844                 | ' 
04844                 | ' expr()
04844                 | ' return 0
04844     38 00 90 FD | 	jmp	#LR__0396
04848                 | LR__0389
04848     78 2C B0 FD | 	call	#_expr
0484c                 | ' 
0484c                 | ' 
0484c                 | ' expr()
0484c                 | ' return 0
0484c     30 00 90 FD | 	jmp	#LR__0396
04850                 | LR__0390
04850     70 2C B0 FD | 	call	#_expr
04854                 | ' 
04854                 | ' 
04854                 | ' expr()
04854                 | ' return 0
04854     28 00 90 FD | 	jmp	#LR__0396
04858                 | LR__0391
04858     84 0B B0 FD | 	call	#_compile_fun_4p
0485c     20 00 90 FD | 	jmp	#LR__0396
04860                 | LR__0392
04860     60 2C B0 FD | 	call	#_expr
04864                 | ' 
04864                 | ' 
04864                 | ' expr()
04864                 | ' return 0
04864     18 00 90 FD | 	jmp	#LR__0396
04868                 | LR__0393
04868     80 18 B0 FD | 	call	#_compile_dim
0486c     CC 00 90 FD | 	jmp	#LR__0397
04870                 | LR__0394
04870     20 01 B0 FD | 	call	#_compile_array_assign
04874     C4 00 90 FD | 	jmp	#LR__0397
04878                 | LR__0395
04878     80 08 B0 FD | 	call	#_compile_unknown
0487c     BC 00 90 FD | 	jmp	#LR__0397
04880                 | LR__0396
04880     14 23 02 F6 | 	mov	local03, local06
04884     16 1F 02 F6 | 	mov	local01, local08
04888     0F 2B 02 F6 | 	mov	local07, local01
0488c     10 2F 02 F6 | 	mov	local09, local02
04890     11 1F 02 F6 | 	mov	local01, local03
04894     41 00 00 FF 
04898     40 E4 05 F1 | 	add	objptr, ##33344
0489c     F2 2C 02 FB | 	rdlong	local08, objptr
048a0     16 29 02 F6 | 	mov	local06, local08
048a4     01 28 66 F0 | 	shl	local06, #1
048a8     16 29 02 F1 | 	add	local06, local08
048ac     02 28 66 F0 | 	shl	local06, #2
048b0     03 00 00 FF 
048b4     00 E4 85 F1 | 	sub	objptr, ##1536
048b8     F2 28 02 F1 | 	add	local06, objptr
048bc     14 2B 62 FC | 	wrlong	local07, local06
048c0     03 00 00 FF 
048c4     00 E4 05 F1 | 	add	objptr, ##1536
048c8     F2 2C 02 FB | 	rdlong	local08, objptr
048cc     16 2B 02 F6 | 	mov	local07, local08
048d0     01 2A 66 F0 | 	shl	local07, #1
048d4     16 2B 02 F1 | 	add	local07, local08
048d8     02 2A 66 F0 | 	shl	local07, #2
048dc     03 00 00 FF 
048e0     00 E4 85 F1 | 	sub	objptr, ##1536
048e4     F2 2A 02 F1 | 	add	local07, objptr
048e8     04 2A 06 F1 | 	add	local07, #4
048ec     15 2F 62 FC | 	wrlong	local09, local07
048f0     03 00 00 FF 
048f4     00 E4 05 F1 | 	add	objptr, ##1536
048f8     F2 2E 02 FB | 	rdlong	local09, objptr
048fc     17 2D 02 F6 | 	mov	local08, local09
04900     01 2C 66 F0 | 	shl	local08, #1
04904     17 2D 02 F1 | 	add	local08, local09
04908     02 2C 66 F0 | 	shl	local08, #2
0490c     03 00 00 FF 
04910     00 E4 85 F1 | 	sub	objptr, ##1536
04914     F2 2C 02 F1 | 	add	local08, objptr
04918     08 2C 06 F1 | 	add	local08, #8
0491c     16 1F 62 FC | 	wrlong	local01, local08
04920     03 00 00 FF 
04924     00 E4 05 F1 | 	add	objptr, ##1536
04928     F2 2A 02 FB | 	rdlong	local07, objptr
0492c     01 2A 06 F1 | 	add	local07, #1
04930     F2 2A 62 FC | 	wrlong	local07, objptr
04934     41 00 00 FF 
04938     40 E4 85 F1 | 	sub	objptr, ##33344
0493c                 | LR__0397
0493c                 | ' 
0493c                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
0493c                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
0493c     00 24 0E F2 | 	cmp	local04, #0 wz
04940     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
04944     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
04948     38 00 90 5D |  if_ne	jmp	#LR__0398
0494c     41 00 00 FF 
04950     40 E4 05 F1 | 	add	objptr, ##33344
04954     F2 2E 02 FB | 	rdlong	local09, objptr
04958     17 1F 02 F6 | 	mov	local01, local09
0495c     01 1E 66 F0 | 	shl	local01, #1
04960     17 1F 02 F1 | 	add	local01, local09
04964     02 1E 66 F0 | 	shl	local01, #2
04968     03 00 00 FF 
0496c     00 E4 85 F1 | 	sub	objptr, ##1536
04970     F2 1E 02 F1 | 	add	local01, objptr
04974     08 1E 06 F1 | 	add	local01, #8
04978     0F FD 6B FC | 	wrlong	#510, local01
0497c     3E 00 00 FF 
04980     40 E4 85 F1 | 	sub	objptr, ##31808
04984                 | LR__0398
04984                 | ' 
04984                 | ' 'print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
04984                 | ' return err
04984     13 FB 01 F6 | 	mov	result1, local05
04988     A7 F0 03 F6 | 	mov	ptra, fp
0498c     B2 00 A0 FD | 	call	#popregs_
04990                 | _compile_immediate_ret
04990     2D 00 64 FD | 	ret
04994                 | 
04994                 | ' 
04994                 | ' sub compile_array_assign
04994                 | _compile_array_assign
04994     0A 4A 05 F6 | 	mov	COUNT_, #10
04998     A8 00 A0 FD | 	call	#pushregs_
0499c     00 24 06 F6 | 	mov	local04, #0
049a0     2E 00 00 FF 
049a4     08 E4 05 F1 | 	add	objptr, ##23560
049a8     F2 26 02 FB | 	rdlong	local05, objptr
049ac     13 FB 01 F6 | 	mov	result1, local05
049b0     01 FA 85 F1 | 	sub	result1, #1
049b4     03 FA 65 F0 | 	shl	result1, #3
049b8     02 00 00 FF 
049bc     38 E4 85 F1 | 	sub	objptr, ##1080
049c0     F2 FA 01 F1 | 	add	result1, objptr
049c4     FD 28 02 FB | 	rdlong	local06, result1
049c8                 | ' numpar=0
049c8                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
049c8                 | ' ' todo here: recognize params and t1.result.twowords=numpar
049c8                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
049c8                 | ' if lparts(ct).token=token_lpar then
049c8     03 26 66 F0 | 	shl	local05, #3
049cc     F2 26 02 F1 | 	add	local05, objptr
049d0     04 26 06 F1 | 	add	local05, #4
049d4     13 27 02 FB | 	rdlong	local05, local05
049d8     15 26 0E F2 | 	cmp	local05, #21 wz
049dc     2B 00 00 FF 
049e0     D0 E5 85 F1 | 	sub	objptr, ##22480
049e4     D4 01 90 5D |  if_ne	jmp	#LR__0404
049e8     2E 00 00 FF 
049ec     08 E4 05 F1 | 	add	objptr, ##23560
049f0     F2 2A 02 FB | 	rdlong	local07, objptr
049f4     01 2A 06 F1 | 	add	local07, #1
049f8     F2 2A 62 FC | 	wrlong	local07, objptr
049fc     2E 00 00 FF 
04a00     08 E4 85 F1 | 	sub	objptr, ##23560
04a04                 | '   ct+=1 											' omit this lpar, this is for expr list
04a04                 | '   do
04a04                 | LR__0400
04a04     BC 2A B0 FD | 	call	#_expr
04a08     2E 00 00 FF 
04a0c     08 E4 05 F1 | 	add	objptr, ##23560
04a10     F2 26 02 FB | 	rdlong	local05, objptr
04a14     01 26 06 F1 | 	add	local05, #1
04a18     F2 26 62 FC | 	wrlong	local05, objptr
04a1c     01 24 06 F1 | 	add	local04, #1
04a20     01 26 86 F1 | 	sub	local05, #1
04a24     03 26 66 F0 | 	shl	local05, #3
04a28     02 00 00 FF 
04a2c     38 E4 85 F1 | 	sub	objptr, ##1080
04a30     F2 26 02 F1 | 	add	local05, objptr
04a34     04 26 06 F1 | 	add	local05, #4
04a38     13 2B 02 FB | 	rdlong	local07, local05
04a3c     14 2A 0E F2 | 	cmp	local07, #20 wz
04a40     2B 00 00 FF 
04a44     D0 E5 85 F1 | 	sub	objptr, ##22480
04a48     34 00 90 AD |  if_e	jmp	#LR__0401
04a4c     2E 00 00 FF 
04a50     08 E4 05 F1 | 	add	objptr, ##23560
04a54     F2 2A 02 FB | 	rdlong	local07, objptr
04a58     03 2A 66 F0 | 	shl	local07, #3
04a5c     02 00 00 FF 
04a60     38 E4 85 F1 | 	sub	objptr, ##1080
04a64     F2 2A 02 F1 | 	add	local07, objptr
04a68     04 2A 06 F1 | 	add	local07, #4
04a6c     15 2B 02 FB | 	rdlong	local07, local07
04a70     FE 2B 0E F2 | 	cmp	local07, #510 wz
04a74     2B 00 00 FF 
04a78     D0 E5 85 F1 | 	sub	objptr, ##22480
04a7c     84 FF 9F 5D |  if_ne	jmp	#LR__0400
04a80                 | LR__0401
04a80     2E 00 00 FF 
04a84     08 E4 05 F1 | 	add	objptr, ##23560
04a88     F2 2A 02 FB | 	rdlong	local07, objptr
04a8c     01 2A 06 F1 | 	add	local07, #1
04a90     F2 2A 62 FC | 	wrlong	local07, objptr
04a94     2E 00 00 FF 
04a98     08 E4 85 F1 | 	sub	objptr, ##23560
04a9c     24 2A B0 FD | 	call	#_expr
04aa0     01 2C 66 F6 | 	neg	local08, #1
04aa4     00 2E 06 F6 | 	mov	local09, #0
04aa8                 | ' '   print "in array_assign, rpar found, numpar=",numpar
04aa8                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
04aa8                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
04aa8                 | ' ct+=1 : expr()
04aa8                 | ' ' now find the vae
04aa8                 | ' 
04aa8                 | ' j=-1 : i=0 : do : 
04aa8                 | LR__0402
04aa8                 | '   if variables(i).name=varname$ then j=i: exit loop
04aa8     17 27 02 F6 | 	mov	local05, local09
04aac     04 26 66 F0 | 	shl	local05, #4
04ab0     0B 00 00 FF 
04ab4     CC E5 05 F1 | 	add	objptr, ##6092
04ab8     F2 26 02 F1 | 	add	local05, objptr
04abc     13 13 02 FB | 	rdlong	arg01, local05
04ac0     14 15 02 F6 | 	mov	arg02, local06
04ac4     0B 00 00 FF 
04ac8     CC E5 85 F1 | 	sub	objptr, ##6092
04acc     18 0D B1 FD | 	call	#__system___string_cmp
04ad0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ad4     17 2D 02 A6 |  if_e	mov	local08, local09
04ad8     20 00 90 AD |  if_e	jmp	#LR__0403
04adc     01 2E 06 F1 | 	add	local09, #1
04ae0     2B 00 00 FF 
04ae4     CC E5 05 F1 | 	add	objptr, ##22476
04ae8     F2 2A 02 FB | 	rdlong	local07, objptr
04aec     2B 00 00 FF 
04af0     CC E5 85 F1 | 	sub	objptr, ##22476
04af4     15 2F 5A F2 | 	cmps	local09, local07 wcz
04af8     AC FF 9F ED |  if_be	jmp	#LR__0402
04afc                 | LR__0403
04afc     16 1F 02 F6 | 	mov	local01, local08
04b00     12 21 02 F6 | 	mov	local02, local04
04b04     17 22 06 F6 | 	mov	local03, #23
04b08     0F 2B 02 F6 | 	mov	local07, local01
04b0c     10 31 02 F6 | 	mov	local10, local02
04b10     11 2D 02 F6 | 	mov	local08, local03
04b14     41 00 00 FF 
04b18     40 E4 05 F1 | 	add	objptr, ##33344
04b1c     F2 1E 02 FB | 	rdlong	local01, objptr
04b20     0F 2F 02 F6 | 	mov	local09, local01
04b24     01 2E 66 F0 | 	shl	local09, #1
04b28     0F 2F 02 F1 | 	add	local09, local01
04b2c     02 2E 66 F0 | 	shl	local09, #2
04b30     03 00 00 FF 
04b34     00 E4 85 F1 | 	sub	objptr, ##1536
04b38     F2 2E 02 F1 | 	add	local09, objptr
04b3c     17 2B 62 FC | 	wrlong	local07, local09
04b40     03 00 00 FF 
04b44     00 E4 05 F1 | 	add	objptr, ##1536
04b48     F2 1E 02 FB | 	rdlong	local01, objptr
04b4c     0F 2F 02 F6 | 	mov	local09, local01
04b50     01 2E 66 F0 | 	shl	local09, #1
04b54     0F 2F 02 F1 | 	add	local09, local01
04b58     02 2E 66 F0 | 	shl	local09, #2
04b5c     03 00 00 FF 
04b60     00 E4 85 F1 | 	sub	objptr, ##1536
04b64     F2 2E 02 F1 | 	add	local09, objptr
04b68     04 2E 06 F1 | 	add	local09, #4
04b6c     17 31 62 FC | 	wrlong	local10, local09
04b70     03 00 00 FF 
04b74     00 E4 05 F1 | 	add	objptr, ##1536
04b78     F2 30 02 FB | 	rdlong	local10, objptr
04b7c     18 1F 02 F6 | 	mov	local01, local10
04b80     01 1E 66 F0 | 	shl	local01, #1
04b84     18 1F 02 F1 | 	add	local01, local10
04b88     02 1E 66 F0 | 	shl	local01, #2
04b8c     03 00 00 FF 
04b90     00 E4 85 F1 | 	sub	objptr, ##1536
04b94     F2 1E 02 F1 | 	add	local01, objptr
04b98     08 1E 06 F1 | 	add	local01, #8
04b9c     0F 2D 62 FC | 	wrlong	local08, local01
04ba0     03 00 00 FF 
04ba4     00 E4 05 F1 | 	add	objptr, ##1536
04ba8     F2 2A 02 FB | 	rdlong	local07, objptr
04bac     01 2A 06 F1 | 	add	local07, #1
04bb0     F2 2A 62 FC | 	wrlong	local07, objptr
04bb4     41 00 00 FF 
04bb8     40 E4 85 F1 | 	sub	objptr, ##33344
04bbc                 | LR__0404
04bbc     A7 F0 03 F6 | 	mov	ptra, fp
04bc0     B2 00 A0 FD | 	call	#popregs_
04bc4                 | _compile_array_assign_ret
04bc4     2D 00 64 FD | 	ret
04bc8                 | 
04bc8                 | ' 
04bc8                 | ' 
04bc8                 | ' sub compile_immediate_assign(linetype as ulong)
04bc8                 | _compile_immediate_assign
04bc8     09 4A 05 F6 | 	mov	COUNT_, #9
04bcc     A8 00 A0 FD | 	call	#pushregs_
04bd0     09 25 0A F6 | 	mov	local04, arg01 wz
04bd4     FF 22 06 F6 | 	mov	local03, #255
04bd8     01 26 66 F6 | 	neg	local05, #1
04bdc                 | ' 
04bdc                 | ' t1.result_type=result_error : t1.result.uresult=0
04bdc                 | ' i=-1: j=-1
04bdc                 | ' 
04bdc                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
04bdc     2C 00 90 5D |  if_ne	jmp	#LR__0410
04be0     2B 00 00 FF 
04be4     D0 E5 05 F1 | 	add	objptr, ##22480
04be8     F2 28 02 FB | 	rdlong	local06, objptr
04bec     02 00 00 FF 
04bf0     38 E4 05 F1 | 	add	objptr, ##1080
04bf4     F2 04 68 FC | 	wrlong	#2, objptr
04bf8     13 00 00 FF 
04bfc     38 E4 05 F1 | 	add	objptr, ##9784
04c00     F2 00 68 FC | 	wrlong	#0, objptr
04c04     41 00 00 FF 
04c08     40 E4 85 F1 | 	sub	objptr, ##33344
04c0c                 | LR__0410
04c0c                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
04c0c     02 24 0E F2 | 	cmp	local04, #2 wz
04c10     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
04c14     2B 00 00 AF 
04c18     D0 E5 05 A1 |  if_e	add	objptr, ##22480
04c1c     F2 28 02 AB |  if_e	rdlong	local06, objptr
04c20     02 00 00 AF 
04c24     38 E4 05 A1 |  if_e	add	objptr, ##1080
04c28     F2 04 68 AC |  if_e	wrlong	#2, objptr
04c2c     2E 00 00 AF 
04c30     08 E4 85 A1 |  if_e	sub	objptr, ##23560
04c34                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
04c34     04 24 0E F2 | 	cmp	local04, #4 wz
04c38     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
04c3c     2C 00 90 5D |  if_ne	jmp	#LR__0411
04c40     2B 00 00 FF 
04c44     D8 E5 05 F1 | 	add	objptr, ##22488
04c48     F2 28 02 FB | 	rdlong	local06, objptr
04c4c     02 00 00 FF 
04c50     30 E4 05 F1 | 	add	objptr, ##1072
04c54     F2 06 68 FC | 	wrlong	#3, objptr
04c58     13 00 00 FF 
04c5c     38 E4 05 F1 | 	add	objptr, ##9784
04c60     F2 04 68 FC | 	wrlong	#2, objptr
04c64     41 00 00 FF 
04c68     40 E4 85 F1 | 	sub	objptr, ##33344
04c6c                 | LR__0411
04c6c                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
04c6c     05 24 0E F2 | 	cmp	local04, #5 wz
04c70     3C 00 90 5D |  if_ne	jmp	#LR__0412
04c74     2E 00 00 FF 
04c78     08 E4 05 F1 | 	add	objptr, ##23560
04c7c     F2 FA 01 FB | 	rdlong	result1, objptr
04c80     FD 28 02 F6 | 	mov	local06, result1
04c84     03 28 66 F0 | 	shl	local06, #3
04c88     02 00 00 FF 
04c8c     38 E4 85 F1 | 	sub	objptr, ##1080
04c90     F2 28 02 F1 | 	add	local06, objptr
04c94     14 29 02 FB | 	rdlong	local06, local06
04c98     02 FA 05 F1 | 	add	result1, #2
04c9c     02 00 00 FF 
04ca0     38 E4 05 F1 | 	add	objptr, ##1080
04ca4     F2 FA 61 FC | 	wrlong	result1, objptr
04ca8     2E 00 00 FF 
04cac     08 E4 85 F1 | 	sub	objptr, ##23560
04cb0                 | LR__0412
04cb0     14 13 02 F6 | 	mov	arg01, local06
04cb4     01 14 06 F6 | 	mov	arg02, #1
04cb8     9C 2B B1 FD | 	call	#__system__Right_S
04cbc     04 28 B0 FD | 	call	#_expr
04cc0                 | '  
04cc0                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
04cc0                 | ' 
04cc0                 | ' suffix2$=right$(varname2$,1)
04cc0                 | ' expr()
04cc0                 | ' 
04cc0                 | ' 
04cc0                 | ' if varnum>0 then
04cc0     2B 00 00 FF 
04cc4     CC E5 05 F1 | 	add	objptr, ##22476
04cc8     F2 2A 02 FB | 	rdlong	local07, objptr
04ccc     2B 00 00 FF 
04cd0     CC E5 85 F1 | 	sub	objptr, ##22476
04cd4     01 2A 56 F2 | 	cmps	local07, #1 wc
04cd8     58 00 90 CD |  if_b	jmp	#LR__0415
04cdc                 | '   for i=0 to varnum-1
04cdc     00 2C 06 F6 | 	mov	local08, #0
04ce0     2B 00 00 FF 
04ce4     CC E5 05 F1 | 	add	objptr, ##22476
04ce8     F2 2E 02 FB | 	rdlong	local09, objptr
04cec     2B 00 00 FF 
04cf0     CC E5 85 F1 | 	sub	objptr, ##22476
04cf4                 | LR__0413
04cf4     17 2D 52 F2 | 	cmps	local08, local09 wc
04cf8     38 00 90 3D |  if_ae	jmp	#LR__0414
04cfc                 | '     if variables(i).name=varname2$ then j=i : exit
04cfc     16 2B 02 F6 | 	mov	local07, local08
04d00     04 2A 66 F0 | 	shl	local07, #4
04d04     0B 00 00 FF 
04d08     CC E5 05 F1 | 	add	objptr, ##6092
04d0c     F2 2A 02 F1 | 	add	local07, objptr
04d10     15 13 02 FB | 	rdlong	arg01, local07
04d14     14 15 02 F6 | 	mov	arg02, local06
04d18     0B 00 00 FF 
04d1c     CC E5 85 F1 | 	sub	objptr, ##6092
04d20     C4 0A B1 FD | 	call	#__system___string_cmp
04d24     00 FA 0D F2 | 	cmp	result1, #0 wz
04d28     16 27 02 A6 |  if_e	mov	local05, local08
04d2c     01 2C 06 51 |  if_ne	add	local08, #1
04d30     C0 FF 9F 5D |  if_ne	jmp	#LR__0413
04d34                 | LR__0414
04d34                 | LR__0415
04d34                 | ' if  j=-1 andalso varnum<maxvars then   
04d34     FF FF 7F FF 
04d38     FF 27 0E F2 | 	cmp	local05, ##-1 wz
04d3c     60 00 90 5D |  if_ne	jmp	#LR__0416
04d40     2B 00 00 FF 
04d44     CC E5 05 F1 | 	add	objptr, ##22476
04d48     F2 2A 02 FB | 	rdlong	local07, objptr
04d4c     2B 00 00 FF 
04d50     CC E5 85 F1 | 	sub	objptr, ##22476
04d54     01 00 00 FF 
04d58     FF 2B 56 F2 | 	cmps	local07, ##1023 wc
04d5c     40 00 90 3D |  if_ae	jmp	#LR__0416
04d60     2B 00 00 FF 
04d64     CC E5 05 F1 | 	add	objptr, ##22476
04d68     F2 2E 02 FB | 	rdlong	local09, objptr
04d6c     04 2E 66 F0 | 	shl	local09, #4
04d70     20 00 00 FF 
04d74     00 E4 85 F1 | 	sub	objptr, ##16384
04d78     F2 2E 02 F1 | 	add	local09, objptr
04d7c     17 29 62 FC | 	wrlong	local06, local09
04d80     20 00 00 FF 
04d84     00 E4 05 F1 | 	add	objptr, ##16384
04d88     F2 2A 02 FB | 	rdlong	local07, objptr
04d8c     15 27 02 F6 | 	mov	local05, local07
04d90     01 2A 06 F1 | 	add	local07, #1
04d94     F2 2A 62 FC | 	wrlong	local07, objptr
04d98     2B 00 00 FF 
04d9c     CC E5 85 F1 | 	sub	objptr, ##22476
04da0                 | LR__0416
04da0     13 1F 02 F6 | 	mov	local01, local05
04da4     17 22 06 F6 | 	mov	local03, #23
04da8     0F 2B 02 F6 | 	mov	local07, local01
04dac     10 2F 02 F6 | 	mov	local09, local02
04db0     11 1F 02 F6 | 	mov	local01, local03
04db4     41 00 00 FF 
04db8     40 E4 05 F1 | 	add	objptr, ##33344
04dbc     F2 2C 02 FB | 	rdlong	local08, objptr
04dc0     16 29 02 F6 | 	mov	local06, local08
04dc4     01 28 66 F0 | 	shl	local06, #1
04dc8     16 29 02 F1 | 	add	local06, local08
04dcc     02 28 66 F0 | 	shl	local06, #2
04dd0     03 00 00 FF 
04dd4     00 E4 85 F1 | 	sub	objptr, ##1536
04dd8     F2 28 02 F1 | 	add	local06, objptr
04ddc     14 2B 62 FC | 	wrlong	local07, local06
04de0     03 00 00 FF 
04de4     00 E4 05 F1 | 	add	objptr, ##1536
04de8     F2 2C 02 FB | 	rdlong	local08, objptr
04dec     16 2B 02 F6 | 	mov	local07, local08
04df0     01 2A 66 F0 | 	shl	local07, #1
04df4     16 2B 02 F1 | 	add	local07, local08
04df8     02 2A 66 F0 | 	shl	local07, #2
04dfc     03 00 00 FF 
04e00     00 E4 85 F1 | 	sub	objptr, ##1536
04e04     F2 2A 02 F1 | 	add	local07, objptr
04e08     04 2A 06 F1 | 	add	local07, #4
04e0c     15 2F 62 FC | 	wrlong	local09, local07
04e10     03 00 00 FF 
04e14     00 E4 05 F1 | 	add	objptr, ##1536
04e18     F2 2E 02 FB | 	rdlong	local09, objptr
04e1c     17 2D 02 F6 | 	mov	local08, local09
04e20     01 2C 66 F0 | 	shl	local08, #1
04e24     17 2D 02 F1 | 	add	local08, local09
04e28     02 2C 66 F0 | 	shl	local08, #2
04e2c     03 00 00 FF 
04e30     00 E4 85 F1 | 	sub	objptr, ##1536
04e34     F2 2C 02 F1 | 	add	local08, objptr
04e38     08 2C 06 F1 | 	add	local08, #8
04e3c     16 1F 62 FC | 	wrlong	local01, local08
04e40     03 00 00 FF 
04e44     00 E4 05 F1 | 	add	objptr, ##1536
04e48     F2 2A 02 FB | 	rdlong	local07, objptr
04e4c     01 2A 06 F1 | 	add	local07, #1
04e50     F2 2A 62 FC | 	wrlong	local07, objptr
04e54     41 00 00 FF 
04e58     40 E4 85 F1 | 	sub	objptr, ##33344
04e5c                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
04e5c                 | ' 
04e5c                 | ' 
04e5c                 | ' 
04e5c                 | ' 
04e5c                 | ' 
04e5c                 | ' 
04e5c                 | ' compiledline(lineptr)=t1:  lineptr+=1 
04e5c                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
04e5c     00 24 0E F2 | 	cmp	local04, #0 wz
04e60     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
04e64     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
04e68     38 00 90 5D |  if_ne	jmp	#LR__0417
04e6c     41 00 00 FF 
04e70     40 E4 05 F1 | 	add	objptr, ##33344
04e74     F2 1E 02 FB | 	rdlong	local01, objptr
04e78     0F 2F 02 F6 | 	mov	local09, local01
04e7c     01 2E 66 F0 | 	shl	local09, #1
04e80     0F 2F 02 F1 | 	add	local09, local01
04e84     02 2E 66 F0 | 	shl	local09, #2
04e88     03 00 00 FF 
04e8c     00 E4 85 F1 | 	sub	objptr, ##1536
04e90     F2 2E 02 F1 | 	add	local09, objptr
04e94     08 2E 06 F1 | 	add	local09, #8
04e98     17 FD 6B FC | 	wrlong	#510, local09
04e9c     3E 00 00 FF 
04ea0     40 E4 85 F1 | 	sub	objptr, ##31808
04ea4                 | LR__0417
04ea4     A7 F0 03 F6 | 	mov	ptra, fp
04ea8     B2 00 A0 FD | 	call	#popregs_
04eac                 | _compile_immediate_assign_ret
04eac     2D 00 64 FD | 	ret
04eb0                 | 
04eb0                 | ' 
04eb0                 | ' ' ------------------ compile the line that is calling a command 
04eb0                 | ' 
04eb0                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
04eb0                 | _compile
04eb0     04 4A 05 F6 | 	mov	COUNT_, #4
04eb4     A8 00 A0 FD | 	call	#pushregs_
04eb8     09 1F 0A F6 | 	mov	local01, arg01 wz
04ebc     0A 21 02 F6 | 	mov	local02, arg02
04ec0     0B 23 02 F6 | 	mov	local03, arg03
04ec4                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
04ec4                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
04ec4                 | '  
04ec4                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
04ec4                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
04ec4     0C 00 90 5D |  if_ne	jmp	#LR__0420
04ec8     00 12 06 F6 | 	mov	arg01, #0
04ecc     BC F5 BF FD | 	call	#_compile_immediate
04ed0     A0 00 90 FD | 	jmp	#LR__0427
04ed4                 | LR__0420
04ed4     3E 00 00 FF 
04ed8     40 E4 05 F1 | 	add	objptr, ##31808
04edc     F2 1E 62 FC | 	wrlong	local01, objptr
04ee0     04 E4 05 F1 | 	add	objptr, #4
04ee4     F2 20 62 FC | 	wrlong	local02, objptr
04ee8     3E 00 00 FF 
04eec     44 E4 85 F1 | 	sub	objptr, ##31812
04ef0     11 13 02 F6 | 	mov	arg01, local03
04ef4     01 12 06 F1 | 	add	arg01, #1
04ef8     90 F5 BF FD | 	call	#_compile_immediate
04efc     FD 24 0A F6 | 	mov	local04, result1 wz
04f00                 | ' 
04f00                 | ' ucompiledline(0)=alinemajor
04f00                 | ' ucompiledline(1)=alineminor
04f00                 | ' 
04f00                 | ' 
04f00                 | ' ' cont: 0: this is the first part of the line that will continue
04f00                 | ' ' 1 - this is the continuation of the line
04f00                 | ' ' 2 - this is the last continued line
04f00                 | ' ' 3 - this is the ome and only part
04f00                 | ' 
04f00                 | ' 
04f00                 | ' err=compile_immediate(cont+1) 
04f00                 | ' if err=0 then
04f00     6C 00 90 5D |  if_ne	jmp	#LR__0426
04f04                 | '   if cont=3 orelse cont=2 then 
04f04     03 22 0E F2 | 	cmp	local03, #3 wz
04f08     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
04f0c     60 00 90 5D |  if_ne	jmp	#LR__0425
04f10                 | '     if alinemajor >lastline then 
04f10     41 00 00 FF 
04f14     4C E4 05 F1 | 	add	objptr, ##33356
04f18     F2 16 02 FB | 	rdlong	arg03, objptr
04f1c     41 00 00 FF 
04f20     4C E4 85 F1 | 	sub	objptr, ##33356
04f24     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
04f28     0C 00 90 ED |  if_be	jmp	#LR__0421
04f2c     0F 13 02 F6 | 	mov	arg01, local01
04f30     78 F4 BF FD | 	call	#_add_line_at_end
04f34     38 00 90 FD | 	jmp	#LR__0424
04f38                 | LR__0421
04f38     0F 13 02 F6 | 	mov	arg01, local01
04f3c     F8 EC BF FD | 	call	#_deleteline
04f40                 | '       deleteline(alinemajor)  
04f40                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor) ' yes I know that's not optimal    
04f40     41 00 00 FF 
04f44     4C E4 05 F1 | 	add	objptr, ##33356
04f48     F2 16 02 FB | 	rdlong	arg03, objptr
04f4c     41 00 00 FF 
04f50     4C E4 85 F1 | 	sub	objptr, ##33356
04f54     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
04f58     0C 00 90 ED |  if_be	jmp	#LR__0422
04f5c     0F 13 02 F6 | 	mov	arg01, local01
04f60     48 F4 BF FD | 	call	#_add_line_at_end
04f64     08 00 90 FD | 	jmp	#LR__0423
04f68                 | LR__0422
04f68     0F 13 02 F6 | 	mov	arg01, local01
04f6c     F4 F1 BF FD | 	call	#_insertline
04f70                 | LR__0423
04f70                 | LR__0424
04f70                 | LR__0425
04f70                 | LR__0426
04f70                 | ' return err
04f70     12 FB 01 F6 | 	mov	result1, local04
04f74                 | LR__0427
04f74     A7 F0 03 F6 | 	mov	ptra, fp
04f78     B2 00 A0 FD | 	call	#popregs_
04f7c                 | _compile_ret
04f7c     2D 00 64 FD | 	ret
04f80                 | 
04f80                 | ' 
04f80                 | ' ' ------------------ compile the line that is assigning to a variable
04f80                 | ' 
04f80                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
04f80                 | _compile_assign
04f80     03 4A 05 F6 | 	mov	COUNT_, #3
04f84     A8 00 A0 FD | 	call	#pushregs_
04f88     09 1F 0A F6 | 	mov	local01, arg01 wz
04f8c     0A 21 02 F6 | 	mov	local02, arg02
04f90     0B 23 02 F6 | 	mov	local03, arg03
04f94                 | ' 
04f94                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
04f94                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
04f94     0C 00 90 5D |  if_ne	jmp	#LR__0430
04f98     00 12 06 F6 | 	mov	arg01, #0
04f9c     28 FC BF FD | 	call	#_compile_immediate_assign
04fa0     94 00 90 FD | 	jmp	#LR__0436
04fa4                 | LR__0430
04fa4     3E 00 00 FF 
04fa8     40 E4 05 F1 | 	add	objptr, ##31808
04fac     F2 1E 62 FC | 	wrlong	local01, objptr
04fb0     04 E4 05 F1 | 	add	objptr, #4
04fb4     F2 20 62 FC | 	wrlong	local02, objptr
04fb8     3E 00 00 FF 
04fbc     44 E4 85 F1 | 	sub	objptr, ##31812
04fc0     11 13 02 F6 | 	mov	arg01, local03
04fc4     01 12 06 F1 | 	add	arg01, #1
04fc8     FC FB BF FD | 	call	#_compile_immediate_assign
04fcc                 | ' 
04fcc                 | ' ucompiledline(0)=alinemajor
04fcc                 | ' ucompiledline(1)=alineminor
04fcc                 | ' 
04fcc                 | ' compile_immediate_assign(cont+1) 
04fcc                 | ' 
04fcc                 | ' if cont=3 orelse cont=2 then 
04fcc     03 22 0E F2 | 	cmp	local03, #3 wz
04fd0     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
04fd4     60 00 90 5D |  if_ne	jmp	#LR__0435
04fd8                 | '   if alinemajor >lastline then 
04fd8     41 00 00 FF 
04fdc     4C E4 05 F1 | 	add	objptr, ##33356
04fe0     F2 16 02 FB | 	rdlong	arg03, objptr
04fe4     41 00 00 FF 
04fe8     4C E4 85 F1 | 	sub	objptr, ##33356
04fec     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
04ff0     0C 00 90 ED |  if_be	jmp	#LR__0431
04ff4     0F 13 02 F6 | 	mov	arg01, local01
04ff8     B0 F3 BF FD | 	call	#_add_line_at_end
04ffc     38 00 90 FD | 	jmp	#LR__0434
05000                 | LR__0431
05000     0F 13 02 F6 | 	mov	arg01, local01
05004     30 EC BF FD | 	call	#_deleteline
05008                 | '     deleteline(alinemajor)  
05008                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
05008     41 00 00 FF 
0500c     4C E4 05 F1 | 	add	objptr, ##33356
05010     F2 16 02 FB | 	rdlong	arg03, objptr
05014     41 00 00 FF 
05018     4C E4 85 F1 | 	sub	objptr, ##33356
0501c     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05020     0C 00 90 ED |  if_be	jmp	#LR__0432
05024     0F 13 02 F6 | 	mov	arg01, local01
05028     80 F3 BF FD | 	call	#_add_line_at_end
0502c     08 00 90 FD | 	jmp	#LR__0433
05030                 | LR__0432
05030     0F 13 02 F6 | 	mov	arg01, local01
05034     2C F1 BF FD | 	call	#_insertline
05038                 | LR__0433
05038                 | LR__0434
05038                 | LR__0435
05038                 | LR__0436
05038     A7 F0 03 F6 | 	mov	ptra, fp
0503c     B2 00 A0 FD | 	call	#popregs_
05040                 | _compile_assign_ret
05040     2D 00 64 FD | 	ret
05044                 | 
05044                 | ' 
05044                 | ' sub compile_error(errno)
05044                 | _compile_error
05044     FF 04 06 F6 | 	mov	_var03, #255
05048     01 07 02 F6 | 	mov	_var04, _var02
0504c     02 09 02 F6 | 	mov	_var05, _var03
05050     41 00 00 FF 
05054     40 E4 05 F1 | 	add	objptr, ##33344
05058     F2 0A 02 FB | 	rdlong	_var06, objptr
0505c     05 0D 02 F6 | 	mov	_var07, _var06
05060     01 0C 66 F0 | 	shl	_var07, #1
05064     05 0D 02 F1 | 	add	_var07, _var06
05068     02 0C 66 F0 | 	shl	_var07, #2
0506c     03 00 00 FF 
05070     00 E4 85 F1 | 	sub	objptr, ##1536
05074     F2 0C 02 F1 | 	add	_var07, objptr
05078     06 13 62 FC | 	wrlong	arg01, _var07
0507c     03 00 00 FF 
05080     00 E4 05 F1 | 	add	objptr, ##1536
05084     F2 0C 02 FB | 	rdlong	_var07, objptr
05088     06 0B 02 F6 | 	mov	_var06, _var07
0508c     01 0A 66 F0 | 	shl	_var06, #1
05090     06 0B 02 F1 | 	add	_var06, _var07
05094     02 0A 66 F0 | 	shl	_var06, #2
05098     03 00 00 FF 
0509c     00 E4 85 F1 | 	sub	objptr, ##1536
050a0     F2 0A 02 F1 | 	add	_var06, objptr
050a4     04 0A 06 F1 | 	add	_var06, #4
050a8     05 07 62 FC | 	wrlong	_var04, _var06
050ac     03 00 00 FF 
050b0     00 E4 05 F1 | 	add	objptr, ##1536
050b4     F2 0C 02 FB | 	rdlong	_var07, objptr
050b8     06 0B 02 F6 | 	mov	_var06, _var07
050bc     01 0A 66 F0 | 	shl	_var06, #1
050c0     06 0B 02 F1 | 	add	_var06, _var07
050c4     02 0A 66 F0 | 	shl	_var06, #2
050c8     03 00 00 FF 
050cc     00 E4 85 F1 | 	sub	objptr, ##1536
050d0     F2 0A 02 F1 | 	add	_var06, objptr
050d4     08 0A 06 F1 | 	add	_var06, #8
050d8     05 09 62 FC | 	wrlong	_var05, _var06
050dc     03 00 00 FF 
050e0     00 E4 05 F1 | 	add	objptr, ##1536
050e4     F2 12 02 FB | 	rdlong	arg01, objptr
050e8     01 12 06 F1 | 	add	arg01, #1
050ec     F2 12 62 FC | 	wrlong	arg01, objptr
050f0     41 00 00 FF 
050f4     40 E4 85 F1 | 	sub	objptr, ##33344
050f8                 | _compile_error_ret
050f8     2D 00 64 FD | 	ret
050fc                 | 
050fc                 | ' 
050fc                 | ' 
050fc                 | ' sub compile_unknown() 
050fc                 | _compile_unknown
050fc     FF 04 06 F6 | 	mov	_var03, #255
05100     17 00 06 F6 | 	mov	_var01, #23
05104     01 07 02 F6 | 	mov	_var04, _var02
05108     02 01 02 F6 | 	mov	_var01, _var03
0510c     41 00 00 FF 
05110     40 E4 05 F1 | 	add	objptr, ##33344
05114     F2 08 02 FB | 	rdlong	_var05, objptr
05118     04 0B 02 F6 | 	mov	_var06, _var05
0511c     01 0A 66 F0 | 	shl	_var06, #1
05120     04 0B 02 F1 | 	add	_var06, _var05
05124     02 0A 66 F0 | 	shl	_var06, #2
05128     03 00 00 FF 
0512c     00 E4 85 F1 | 	sub	objptr, ##1536
05130     F2 0A 02 F1 | 	add	_var06, objptr
05134     05 2F 68 FC | 	wrlong	#23, _var06
05138     03 00 00 FF 
0513c     00 E4 05 F1 | 	add	objptr, ##1536
05140     F2 0A 02 FB | 	rdlong	_var06, objptr
05144     05 09 02 F6 | 	mov	_var05, _var06
05148     01 08 66 F0 | 	shl	_var05, #1
0514c     05 09 02 F1 | 	add	_var05, _var06
05150     02 08 66 F0 | 	shl	_var05, #2
05154     03 00 00 FF 
05158     00 E4 85 F1 | 	sub	objptr, ##1536
0515c     F2 08 02 F1 | 	add	_var05, objptr
05160     04 08 06 F1 | 	add	_var05, #4
05164     04 07 62 FC | 	wrlong	_var04, _var05
05168     03 00 00 FF 
0516c     00 E4 05 F1 | 	add	objptr, ##1536
05170     F2 0A 02 FB | 	rdlong	_var06, objptr
05174     05 09 02 F6 | 	mov	_var05, _var06
05178     01 08 66 F0 | 	shl	_var05, #1
0517c     05 09 02 F1 | 	add	_var05, _var06
05180     02 08 66 F0 | 	shl	_var05, #2
05184     03 00 00 FF 
05188     00 E4 85 F1 | 	sub	objptr, ##1536
0518c     F2 08 02 F1 | 	add	_var05, objptr
05190     08 08 06 F1 | 	add	_var05, #8
05194     04 01 62 FC | 	wrlong	_var01, _var05
05198     03 00 00 FF 
0519c     00 E4 05 F1 | 	add	objptr, ##1536
051a0     F2 0A 02 FB | 	rdlong	_var06, objptr
051a4     01 0A 06 F1 | 	add	_var06, #1
051a8     F2 0A 62 FC | 	wrlong	_var06, objptr
051ac     41 00 00 FF 
051b0     40 E4 85 F1 | 	sub	objptr, ##33344
051b4                 | _compile_unknown_ret
051b4     2D 00 64 FD | 	ret
051b8                 | 
051b8                 | ' 
051b8                 | ' function compile_converttoint() as integer
051b8                 | _compile_converttoint
051b8     06 4A 05 F6 | 	mov	COUNT_, #6
051bc     A8 00 A0 FD | 	call	#pushregs_
051c0     00 1E 06 F6 | 	mov	local01, #0
051c4     FC 22 B0 FD | 	call	#_expr
051c8     FD 24 0A F6 | 	mov	local04, result1 wz
051cc                 | ' err=0
051cc                 | ' t1.result.uresult=0
051cc                 | ' err=expr()
051cc                 | ' if err=0 then
051cc     C0 00 90 5D |  if_ne	jmp	#LR__0440
051d0     16 22 06 F6 | 	mov	local03, #22
051d4     0F 27 02 F6 | 	mov	local05, local01
051d8     10 29 02 F6 | 	mov	local06, local02
051dc     11 25 02 F6 | 	mov	local04, local03
051e0     41 00 00 FF 
051e4     40 E4 05 F1 | 	add	objptr, ##33344
051e8     F2 1E 02 FB | 	rdlong	local01, objptr
051ec     0F FB 01 F6 | 	mov	result1, local01
051f0     01 FA 65 F0 | 	shl	result1, #1
051f4     0F FB 01 F1 | 	add	result1, local01
051f8     02 FA 65 F0 | 	shl	result1, #2
051fc     03 00 00 FF 
05200     00 E4 85 F1 | 	sub	objptr, ##1536
05204     F2 FA 01 F1 | 	add	result1, objptr
05208     FD 26 62 FC | 	wrlong	local05, result1
0520c     03 00 00 FF 
05210     00 E4 05 F1 | 	add	objptr, ##1536
05214     F2 26 02 FB | 	rdlong	local05, objptr
05218     13 1F 02 F6 | 	mov	local01, local05
0521c     01 1E 66 F0 | 	shl	local01, #1
05220     13 1F 02 F1 | 	add	local01, local05
05224     02 1E 66 F0 | 	shl	local01, #2
05228     03 00 00 FF 
0522c     00 E4 85 F1 | 	sub	objptr, ##1536
05230     F2 1E 02 F1 | 	add	local01, objptr
05234     04 1E 06 F1 | 	add	local01, #4
05238     0F 29 62 FC | 	wrlong	local06, local01
0523c     03 00 00 FF 
05240     00 E4 05 F1 | 	add	objptr, ##1536
05244     F2 28 02 FB | 	rdlong	local06, objptr
05248     14 27 02 F6 | 	mov	local05, local06
0524c     01 26 66 F0 | 	shl	local05, #1
05250     14 27 02 F1 | 	add	local05, local06
05254     02 26 66 F0 | 	shl	local05, #2
05258     03 00 00 FF 
0525c     00 E4 85 F1 | 	sub	objptr, ##1536
05260     F2 26 02 F1 | 	add	local05, objptr
05264     08 26 06 F1 | 	add	local05, #8
05268     13 25 62 FC | 	wrlong	local04, local05
0526c     03 00 00 FF 
05270     00 E4 05 F1 | 	add	objptr, ##1536
05274     F2 26 02 FB | 	rdlong	local05, objptr
05278     01 26 06 F1 | 	add	local05, #1
0527c     F2 26 62 FC | 	wrlong	local05, objptr
05280     41 00 00 FF 
05284     40 E4 85 F1 | 	sub	objptr, ##33344
05288                 | '   t1.result_type=fun_converttoint
05288                 | '   compiledline(lineptr)=t1: lineptr+=1 
05288                 | '   return 0
05288     00 FA 05 F6 | 	mov	result1, #0
0528c     04 00 90 FD | 	jmp	#LR__0441
05290                 | LR__0440
05290                 | '   return err
05290     12 FB 01 F6 | 	mov	result1, local04
05294                 | LR__0441
05294     A7 F0 03 F6 | 	mov	ptra, fp
05298     B2 00 A0 FD | 	call	#popregs_
0529c                 | _compile_converttoint_ret
0529c     2D 00 64 FD | 	ret
052a0                 | 
052a0                 | ' 
052a0                 | ' 
052a0                 | ' function compile_fun_2p() as ulong
052a0                 | _compile_fun_2p
052a0     01 4A 05 F6 | 	mov	COUNT_, #1
052a4     A8 00 A0 FD | 	call	#pushregs_
052a8     18 22 B0 FD | 	call	#_expr
052ac                 | ' 
052ac                 | ' expr()
052ac                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
052ac     2E 00 00 FF 
052b0     08 E4 05 F1 | 	add	objptr, ##23560
052b4     F2 1E 02 FB | 	rdlong	local01, objptr
052b8     03 1E 66 F0 | 	shl	local01, #3
052bc     02 00 00 FF 
052c0     38 E4 85 F1 | 	sub	objptr, ##1080
052c4     F2 1E 02 F1 | 	add	local01, objptr
052c8     04 1E 06 F1 | 	add	local01, #4
052cc     0F 1F 02 FB | 	rdlong	local01, local01
052d0     11 1E 0E F2 | 	cmp	local01, #17 wz
052d4     2B 00 00 FF 
052d8     D0 E5 85 F1 | 	sub	objptr, ##22480
052dc     15 FA 05 56 |  if_ne	mov	result1, #21
052e0     24 00 90 5D |  if_ne	jmp	#LR__0450
052e4     2E 00 00 FF 
052e8     08 E4 05 F1 | 	add	objptr, ##23560
052ec     F2 1E 02 FB | 	rdlong	local01, objptr
052f0     01 1E 06 F1 | 	add	local01, #1
052f4     F2 1E 62 FC | 	wrlong	local01, objptr
052f8     2E 00 00 FF 
052fc     08 E4 85 F1 | 	sub	objptr, ##23560
05300     C0 21 B0 FD | 	call	#_expr
05304     00 FA 05 F6 | 	mov	result1, #0
05308                 | LR__0450
05308     A7 F0 03 F6 | 	mov	ptra, fp
0530c     B2 00 A0 FD | 	call	#popregs_
05310                 | _compile_fun_2p_ret
05310     2D 00 64 FD | 	ret
05314                 | 
05314                 | ' 
05314                 | ' function compile_fun_3p() as ulong
05314                 | _compile_fun_3p
05314     01 4A 05 F6 | 	mov	COUNT_, #1
05318     A8 00 A0 FD | 	call	#pushregs_
0531c     A4 21 B0 FD | 	call	#_expr
05320                 | ' 
05320                 | ' expr()
05320                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05320     2E 00 00 FF 
05324     08 E4 05 F1 | 	add	objptr, ##23560
05328     F2 1E 02 FB | 	rdlong	local01, objptr
0532c     03 1E 66 F0 | 	shl	local01, #3
05330     02 00 00 FF 
05334     38 E4 85 F1 | 	sub	objptr, ##1080
05338     F2 1E 02 F1 | 	add	local01, objptr
0533c     04 1E 06 F1 | 	add	local01, #4
05340     0F 1F 02 FB | 	rdlong	local01, local01
05344     11 1E 0E F2 | 	cmp	local01, #17 wz
05348     2B 00 00 FF 
0534c     D0 E5 85 F1 | 	sub	objptr, ##22480
05350     15 FA 05 56 |  if_ne	mov	result1, #21
05354     7C 00 90 5D |  if_ne	jmp	#LR__0460
05358     2E 00 00 FF 
0535c     08 E4 05 F1 | 	add	objptr, ##23560
05360     F2 1E 02 FB | 	rdlong	local01, objptr
05364     01 1E 06 F1 | 	add	local01, #1
05368     F2 1E 62 FC | 	wrlong	local01, objptr
0536c     2E 00 00 FF 
05370     08 E4 85 F1 | 	sub	objptr, ##23560
05374     4C 21 B0 FD | 	call	#_expr
05378                 | ' expr()
05378                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05378     2E 00 00 FF 
0537c     08 E4 05 F1 | 	add	objptr, ##23560
05380     F2 1E 02 FB | 	rdlong	local01, objptr
05384     03 1E 66 F0 | 	shl	local01, #3
05388     02 00 00 FF 
0538c     38 E4 85 F1 | 	sub	objptr, ##1080
05390     F2 1E 02 F1 | 	add	local01, objptr
05394     04 1E 06 F1 | 	add	local01, #4
05398     0F 1F 02 FB | 	rdlong	local01, local01
0539c     11 1E 0E F2 | 	cmp	local01, #17 wz
053a0     2B 00 00 FF 
053a4     D0 E5 85 F1 | 	sub	objptr, ##22480
053a8     15 FA 05 56 |  if_ne	mov	result1, #21
053ac     24 00 90 5D |  if_ne	jmp	#LR__0460
053b0     2E 00 00 FF 
053b4     08 E4 05 F1 | 	add	objptr, ##23560
053b8     F2 1E 02 FB | 	rdlong	local01, objptr
053bc     01 1E 06 F1 | 	add	local01, #1
053c0     F2 1E 62 FC | 	wrlong	local01, objptr
053c4     2E 00 00 FF 
053c8     08 E4 85 F1 | 	sub	objptr, ##23560
053cc     F4 20 B0 FD | 	call	#_expr
053d0     00 FA 05 F6 | 	mov	result1, #0
053d4                 | LR__0460
053d4     A7 F0 03 F6 | 	mov	ptra, fp
053d8     B2 00 A0 FD | 	call	#popregs_
053dc                 | _compile_fun_3p_ret
053dc     2D 00 64 FD | 	ret
053e0                 | 
053e0                 | ' 
053e0                 | ' function compile_fun_4p() as ulong
053e0                 | _compile_fun_4p
053e0     01 4A 05 F6 | 	mov	COUNT_, #1
053e4     A8 00 A0 FD | 	call	#pushregs_
053e8     D8 20 B0 FD | 	call	#_expr
053ec                 | ' 
053ec                 | ' expr()
053ec                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
053ec     2E 00 00 FF 
053f0     08 E4 05 F1 | 	add	objptr, ##23560
053f4     F2 1E 02 FB | 	rdlong	local01, objptr
053f8     03 1E 66 F0 | 	shl	local01, #3
053fc     02 00 00 FF 
05400     38 E4 85 F1 | 	sub	objptr, ##1080
05404     F2 1E 02 F1 | 	add	local01, objptr
05408     04 1E 06 F1 | 	add	local01, #4
0540c     0F 1F 02 FB | 	rdlong	local01, local01
05410     11 1E 0E F2 | 	cmp	local01, #17 wz
05414     2B 00 00 FF 
05418     D0 E5 85 F1 | 	sub	objptr, ##22480
0541c     15 FA 05 56 |  if_ne	mov	result1, #21
05420     D4 00 90 5D |  if_ne	jmp	#LR__0470
05424     2E 00 00 FF 
05428     08 E4 05 F1 | 	add	objptr, ##23560
0542c     F2 1E 02 FB | 	rdlong	local01, objptr
05430     01 1E 06 F1 | 	add	local01, #1
05434     F2 1E 62 FC | 	wrlong	local01, objptr
05438     2E 00 00 FF 
0543c     08 E4 85 F1 | 	sub	objptr, ##23560
05440     80 20 B0 FD | 	call	#_expr
05444                 | ' expr()
05444                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05444     2E 00 00 FF 
05448     08 E4 05 F1 | 	add	objptr, ##23560
0544c     F2 1E 02 FB | 	rdlong	local01, objptr
05450     03 1E 66 F0 | 	shl	local01, #3
05454     02 00 00 FF 
05458     38 E4 85 F1 | 	sub	objptr, ##1080
0545c     F2 1E 02 F1 | 	add	local01, objptr
05460     04 1E 06 F1 | 	add	local01, #4
05464     0F 1F 02 FB | 	rdlong	local01, local01
05468     11 1E 0E F2 | 	cmp	local01, #17 wz
0546c     2B 00 00 FF 
05470     D0 E5 85 F1 | 	sub	objptr, ##22480
05474     15 FA 05 56 |  if_ne	mov	result1, #21
05478     7C 00 90 5D |  if_ne	jmp	#LR__0470
0547c     2E 00 00 FF 
05480     08 E4 05 F1 | 	add	objptr, ##23560
05484     F2 1E 02 FB | 	rdlong	local01, objptr
05488     01 1E 06 F1 | 	add	local01, #1
0548c     F2 1E 62 FC | 	wrlong	local01, objptr
05490     2E 00 00 FF 
05494     08 E4 85 F1 | 	sub	objptr, ##23560
05498     28 20 B0 FD | 	call	#_expr
0549c                 | ' expr()
0549c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0549c     2E 00 00 FF 
054a0     08 E4 05 F1 | 	add	objptr, ##23560
054a4     F2 1E 02 FB | 	rdlong	local01, objptr
054a8     03 1E 66 F0 | 	shl	local01, #3
054ac     02 00 00 FF 
054b0     38 E4 85 F1 | 	sub	objptr, ##1080
054b4     F2 1E 02 F1 | 	add	local01, objptr
054b8     04 1E 06 F1 | 	add	local01, #4
054bc     0F 1F 02 FB | 	rdlong	local01, local01
054c0     11 1E 0E F2 | 	cmp	local01, #17 wz
054c4     2B 00 00 FF 
054c8     D0 E5 85 F1 | 	sub	objptr, ##22480
054cc     15 FA 05 56 |  if_ne	mov	result1, #21
054d0     24 00 90 5D |  if_ne	jmp	#LR__0470
054d4     2E 00 00 FF 
054d8     08 E4 05 F1 | 	add	objptr, ##23560
054dc     F2 1E 02 FB | 	rdlong	local01, objptr
054e0     01 1E 06 F1 | 	add	local01, #1
054e4     F2 1E 62 FC | 	wrlong	local01, objptr
054e8     2E 00 00 FF 
054ec     08 E4 85 F1 | 	sub	objptr, ##23560
054f0     D0 1F B0 FD | 	call	#_expr
054f4     00 FA 05 F6 | 	mov	result1, #0
054f8                 | LR__0470
054f8     A7 F0 03 F6 | 	mov	ptra, fp
054fc     B2 00 A0 FD | 	call	#popregs_
05500                 | _compile_fun_4p_ret
05500     2D 00 64 FD | 	ret
05504                 | 
05504                 | ' 
05504                 | ' 
05504                 | ' function compile_fun_5p() as ulong
05504                 | _compile_fun_5p
05504     01 4A 05 F6 | 	mov	COUNT_, #1
05508     A8 00 A0 FD | 	call	#pushregs_
0550c     B4 1F B0 FD | 	call	#_expr
05510                 | ' 
05510                 | ' expr()
05510                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05510     2E 00 00 FF 
05514     08 E4 05 F1 | 	add	objptr, ##23560
05518     F2 1E 02 FB | 	rdlong	local01, objptr
0551c     03 1E 66 F0 | 	shl	local01, #3
05520     02 00 00 FF 
05524     38 E4 85 F1 | 	sub	objptr, ##1080
05528     F2 1E 02 F1 | 	add	local01, objptr
0552c     04 1E 06 F1 | 	add	local01, #4
05530     0F 1F 02 FB | 	rdlong	local01, local01
05534     11 1E 0E F2 | 	cmp	local01, #17 wz
05538     2B 00 00 FF 
0553c     D0 E5 85 F1 | 	sub	objptr, ##22480
05540     15 FA 05 56 |  if_ne	mov	result1, #21
05544     2C 01 90 5D |  if_ne	jmp	#LR__0480
05548     2E 00 00 FF 
0554c     08 E4 05 F1 | 	add	objptr, ##23560
05550     F2 1E 02 FB | 	rdlong	local01, objptr
05554     01 1E 06 F1 | 	add	local01, #1
05558     F2 1E 62 FC | 	wrlong	local01, objptr
0555c     2E 00 00 FF 
05560     08 E4 85 F1 | 	sub	objptr, ##23560
05564     5C 1F B0 FD | 	call	#_expr
05568                 | ' expr()
05568                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05568     2E 00 00 FF 
0556c     08 E4 05 F1 | 	add	objptr, ##23560
05570     F2 1E 02 FB | 	rdlong	local01, objptr
05574     03 1E 66 F0 | 	shl	local01, #3
05578     02 00 00 FF 
0557c     38 E4 85 F1 | 	sub	objptr, ##1080
05580     F2 1E 02 F1 | 	add	local01, objptr
05584     04 1E 06 F1 | 	add	local01, #4
05588     0F 1F 02 FB | 	rdlong	local01, local01
0558c     11 1E 0E F2 | 	cmp	local01, #17 wz
05590     2B 00 00 FF 
05594     D0 E5 85 F1 | 	sub	objptr, ##22480
05598     15 FA 05 56 |  if_ne	mov	result1, #21
0559c     D4 00 90 5D |  if_ne	jmp	#LR__0480
055a0     2E 00 00 FF 
055a4     08 E4 05 F1 | 	add	objptr, ##23560
055a8     F2 1E 02 FB | 	rdlong	local01, objptr
055ac     01 1E 06 F1 | 	add	local01, #1
055b0     F2 1E 62 FC | 	wrlong	local01, objptr
055b4     2E 00 00 FF 
055b8     08 E4 85 F1 | 	sub	objptr, ##23560
055bc     04 1F B0 FD | 	call	#_expr
055c0                 | ' expr()
055c0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
055c0     2E 00 00 FF 
055c4     08 E4 05 F1 | 	add	objptr, ##23560
055c8     F2 1E 02 FB | 	rdlong	local01, objptr
055cc     03 1E 66 F0 | 	shl	local01, #3
055d0     02 00 00 FF 
055d4     38 E4 85 F1 | 	sub	objptr, ##1080
055d8     F2 1E 02 F1 | 	add	local01, objptr
055dc     04 1E 06 F1 | 	add	local01, #4
055e0     0F 1F 02 FB | 	rdlong	local01, local01
055e4     11 1E 0E F2 | 	cmp	local01, #17 wz
055e8     2B 00 00 FF 
055ec     D0 E5 85 F1 | 	sub	objptr, ##22480
055f0     15 FA 05 56 |  if_ne	mov	result1, #21
055f4     7C 00 90 5D |  if_ne	jmp	#LR__0480
055f8     2E 00 00 FF 
055fc     08 E4 05 F1 | 	add	objptr, ##23560
05600     F2 1E 02 FB | 	rdlong	local01, objptr
05604     01 1E 06 F1 | 	add	local01, #1
05608     F2 1E 62 FC | 	wrlong	local01, objptr
0560c     2E 00 00 FF 
05610     08 E4 85 F1 | 	sub	objptr, ##23560
05614     AC 1E B0 FD | 	call	#_expr
05618                 | ' expr()
05618                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05618     2E 00 00 FF 
0561c     08 E4 05 F1 | 	add	objptr, ##23560
05620     F2 1E 02 FB | 	rdlong	local01, objptr
05624     03 1E 66 F0 | 	shl	local01, #3
05628     02 00 00 FF 
0562c     38 E4 85 F1 | 	sub	objptr, ##1080
05630     F2 1E 02 F1 | 	add	local01, objptr
05634     04 1E 06 F1 | 	add	local01, #4
05638     0F 1F 02 FB | 	rdlong	local01, local01
0563c     11 1E 0E F2 | 	cmp	local01, #17 wz
05640     2B 00 00 FF 
05644     D0 E5 85 F1 | 	sub	objptr, ##22480
05648     15 FA 05 56 |  if_ne	mov	result1, #21
0564c     24 00 90 5D |  if_ne	jmp	#LR__0480
05650     2E 00 00 FF 
05654     08 E4 05 F1 | 	add	objptr, ##23560
05658     F2 1E 02 FB | 	rdlong	local01, objptr
0565c     01 1E 06 F1 | 	add	local01, #1
05660     F2 1E 62 FC | 	wrlong	local01, objptr
05664     2E 00 00 FF 
05668     08 E4 85 F1 | 	sub	objptr, ##23560
0566c     54 1E B0 FD | 	call	#_expr
05670     00 FA 05 F6 | 	mov	result1, #0
05674                 | LR__0480
05674     A7 F0 03 F6 | 	mov	ptra, fp
05678     B2 00 A0 FD | 	call	#popregs_
0567c                 | _compile_fun_5p_ret
0567c     2D 00 64 FD | 	ret
05680                 | 
05680                 | ' 
05680                 | ' function compile_fun_varp() as ulong ' parameter # on top of the stack
05680                 | _compile_fun_varp
05680     02 4A 05 F6 | 	mov	COUNT_, #2
05684     A8 00 A0 FD | 	call	#pushregs_
05688     00 1E 06 F6 | 	mov	local01, #0
0568c                 | ' i=0
0568c                 | ' if lparts(ct).token<>token_end then
0568c     2E 00 00 FF 
05690     08 E4 05 F1 | 	add	objptr, ##23560
05694     F2 20 02 FB | 	rdlong	local02, objptr
05698     03 20 66 F0 | 	shl	local02, #3
0569c     02 00 00 FF 
056a0     38 E4 85 F1 | 	sub	objptr, ##1080
056a4     F2 20 02 F1 | 	add	local02, objptr
056a8     04 20 06 F1 | 	add	local02, #4
056ac     10 21 02 FB | 	rdlong	local02, local02
056b0     FE 21 0E F2 | 	cmp	local02, #510 wz
056b4     2B 00 00 FF 
056b8     D0 E5 85 F1 | 	sub	objptr, ##22480
056bc     5C 00 90 AD |  if_e	jmp	#LR__0492
056c0                 | '   do
056c0                 | LR__0490
056c0     00 1E B0 FD | 	call	#_expr
056c4     01 1E 06 F1 | 	add	local01, #1
056c8                 | '   expr()
056c8                 | '    i+=1
056c8                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
056c8     2E 00 00 FF 
056cc     08 E4 05 F1 | 	add	objptr, ##23560
056d0     F2 20 02 FB | 	rdlong	local02, objptr
056d4     03 20 66 F0 | 	shl	local02, #3
056d8     02 00 00 FF 
056dc     38 E4 85 F1 | 	sub	objptr, ##1080
056e0     F2 20 02 F1 | 	add	local02, objptr
056e4     04 20 06 F1 | 	add	local02, #4
056e8     10 21 02 FB | 	rdlong	local02, local02
056ec     11 20 0E F2 | 	cmp	local02, #17 wz
056f0     2B 00 00 FF 
056f4     D0 E5 85 F1 | 	sub	objptr, ##22480
056f8     20 00 90 5D |  if_ne	jmp	#LR__0491
056fc     2E 00 00 FF 
05700     08 E4 05 F1 | 	add	objptr, ##23560
05704     F2 20 02 FB | 	rdlong	local02, objptr
05708     01 20 06 F1 | 	add	local02, #1
0570c     F2 20 62 FC | 	wrlong	local02, objptr
05710     2E 00 00 FF 
05714     08 E4 85 F1 | 	sub	objptr, ##23560
05718     A4 FF 9F FD | 	jmp	#LR__0490
0571c                 | LR__0491
0571c                 | LR__0492
0571c                 | ' return i
0571c     0F FB 01 F6 | 	mov	result1, local01
05720     A7 F0 03 F6 | 	mov	ptra, fp
05724     B2 00 A0 FD | 	call	#popregs_
05728                 | _compile_fun_varp_ret
05728     2D 00 64 FD | 	ret
0572c                 | 
0572c                 | ' 
0572c                 | ' 
0572c                 | ' function compile_int_fun_2p() as ulong
0572c                 | _compile_int_fun_2p
0572c     01 4A 05 F6 | 	mov	COUNT_, #1
05730     A8 00 A0 FD | 	call	#pushregs_
05734     80 FA BF FD | 	call	#_compile_converttoint
05738     FD 1E 02 F6 | 	mov	local01, result1
0573c                 | ' err=compile_converttoint() : if err>0 then return err
0573c     01 1E 56 F2 | 	cmps	local01, #1 wc
05740     0F FB 01 36 |  if_ae	mov	result1, local01
05744     58 00 90 3D |  if_ae	jmp	#LR__0500
05748                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05748     2E 00 00 FF 
0574c     08 E4 05 F1 | 	add	objptr, ##23560
05750     F2 1E 02 FB | 	rdlong	local01, objptr
05754     03 1E 66 F0 | 	shl	local01, #3
05758     02 00 00 FF 
0575c     38 E4 85 F1 | 	sub	objptr, ##1080
05760     F2 1E 02 F1 | 	add	local01, objptr
05764     04 1E 06 F1 | 	add	local01, #4
05768     0F 1F 02 FB | 	rdlong	local01, local01
0576c     11 1E 0E F2 | 	cmp	local01, #17 wz
05770     2B 00 00 FF 
05774     D0 E5 85 F1 | 	sub	objptr, ##22480
05778     15 FA 05 56 |  if_ne	mov	result1, #21
0577c     20 00 90 5D |  if_ne	jmp	#LR__0500
05780     2E 00 00 FF 
05784     08 E4 05 F1 | 	add	objptr, ##23560
05788     F2 1E 02 FB | 	rdlong	local01, objptr
0578c     01 1E 06 F1 | 	add	local01, #1
05790     F2 1E 62 FC | 	wrlong	local01, objptr
05794     2E 00 00 FF 
05798     08 E4 85 F1 | 	sub	objptr, ##23560
0579c     18 FA BF FD | 	call	#_compile_converttoint
057a0                 | ' err=compile_converttoint() 
057a0                 | ' return err
057a0                 | LR__0500
057a0     A7 F0 03 F6 | 	mov	ptra, fp
057a4     B2 00 A0 FD | 	call	#popregs_
057a8                 | _compile_int_fun_2p_ret
057a8     2D 00 64 FD | 	ret
057ac                 | 
057ac                 | ' 
057ac                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
057ac                 | _compile_print
057ac     0B 4A 05 F6 | 	mov	COUNT_, #11
057b0     A8 00 A0 FD | 	call	#pushregs_
057b4     00 1E 06 F6 | 	mov	local01, #0
057b8     1D 22 06 F6 | 	mov	local03, #29
057bc                 | ' t1.result.uresult=0 : t1.result_type=result_uint
057bc                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
057bc     2E 00 00 FF 
057c0     08 E4 05 F1 | 	add	objptr, ##23560
057c4     F2 24 02 FB | 	rdlong	local04, objptr
057c8     03 24 66 F0 | 	shl	local04, #3
057cc     02 00 00 FF 
057d0     38 E4 85 F1 | 	sub	objptr, ##1080
057d4     F2 24 02 F1 | 	add	local04, objptr
057d8     04 24 06 F1 | 	add	local04, #4
057dc     12 25 02 FB | 	rdlong	local04, local04
057e0     FE 25 0E F2 | 	cmp	local04, #510 wz
057e4     2B 00 00 FF 
057e8     D0 E5 85 F1 | 	sub	objptr, ##22480
057ec     68 01 90 5D |  if_ne	jmp	#LR__0510
057f0     20 22 06 F6 | 	mov	local03, #32
057f4     0F 27 02 F6 | 	mov	local05, local01
057f8     10 29 02 F6 | 	mov	local06, local02
057fc     11 2B 02 F6 | 	mov	local07, local03
05800     41 00 00 FF 
05804     40 E4 05 F1 | 	add	objptr, ##33344
05808     F2 2C 02 FB | 	rdlong	local08, objptr
0580c     16 2F 02 F6 | 	mov	local09, local08
05810     01 2E 66 F0 | 	shl	local09, #1
05814     16 2F 02 F1 | 	add	local09, local08
05818     02 2E 66 F0 | 	shl	local09, #2
0581c     03 00 00 FF 
05820     00 E4 85 F1 | 	sub	objptr, ##1536
05824     F2 2E 02 F1 | 	add	local09, objptr
05828     17 27 62 FC | 	wrlong	local05, local09
0582c     03 00 00 FF 
05830     00 E4 05 F1 | 	add	objptr, ##1536
05834     F2 26 02 FB | 	rdlong	local05, objptr
05838     13 31 02 F6 | 	mov	local10, local05
0583c     01 30 66 F0 | 	shl	local10, #1
05840     13 31 02 F1 | 	add	local10, local05
05844     02 30 66 F0 | 	shl	local10, #2
05848     03 00 00 FF 
0584c     00 E4 85 F1 | 	sub	objptr, ##1536
05850     F2 30 02 F1 | 	add	local10, objptr
05854     04 30 06 F1 | 	add	local10, #4
05858     18 29 62 FC | 	wrlong	local06, local10
0585c     03 00 00 FF 
05860     00 E4 05 F1 | 	add	objptr, ##1536
05864     F2 26 02 FB | 	rdlong	local05, objptr
05868     13 33 02 F6 | 	mov	local11, local05
0586c     01 32 66 F0 | 	shl	local11, #1
05870     13 33 02 F1 | 	add	local11, local05
05874     02 32 66 F0 | 	shl	local11, #2
05878     03 00 00 FF 
0587c     00 E4 85 F1 | 	sub	objptr, ##1536
05880     F2 32 02 F1 | 	add	local11, objptr
05884     08 32 06 F1 | 	add	local11, #8
05888     19 2B 62 FC | 	wrlong	local07, local11
0588c     03 00 00 FF 
05890     00 E4 05 F1 | 	add	objptr, ##1536
05894     F2 26 02 FB | 	rdlong	local05, objptr
05898     01 26 06 F1 | 	add	local05, #1
0589c     F2 26 62 FC | 	wrlong	local05, objptr
058a0     44 22 06 F6 | 	mov	local03, #68
058a4     0F 27 02 F6 | 	mov	local05, local01
058a8     10 29 02 F6 | 	mov	local06, local02
058ac     11 2B 02 F6 | 	mov	local07, local03
058b0     F2 2C 02 FB | 	rdlong	local08, objptr
058b4     16 2F 02 F6 | 	mov	local09, local08
058b8     01 2E 66 F0 | 	shl	local09, #1
058bc     16 2F 02 F1 | 	add	local09, local08
058c0     02 2E 66 F0 | 	shl	local09, #2
058c4     03 00 00 FF 
058c8     00 E4 85 F1 | 	sub	objptr, ##1536
058cc     F2 2E 02 F1 | 	add	local09, objptr
058d0     17 27 62 FC | 	wrlong	local05, local09
058d4     03 00 00 FF 
058d8     00 E4 05 F1 | 	add	objptr, ##1536
058dc     F2 32 02 FB | 	rdlong	local11, objptr
058e0     19 31 02 F6 | 	mov	local10, local11
058e4     01 30 66 F0 | 	shl	local10, #1
058e8     19 31 02 F1 | 	add	local10, local11
058ec     02 30 66 F0 | 	shl	local10, #2
058f0     03 00 00 FF 
058f4     00 E4 85 F1 | 	sub	objptr, ##1536
058f8     F2 30 02 F1 | 	add	local10, objptr
058fc     04 30 06 F1 | 	add	local10, #4
05900     18 29 62 FC | 	wrlong	local06, local10
05904     03 00 00 FF 
05908     00 E4 05 F1 | 	add	objptr, ##1536
0590c     F2 30 02 FB | 	rdlong	local10, objptr
05910     18 33 02 F6 | 	mov	local11, local10
05914     01 32 66 F0 | 	shl	local11, #1
05918     18 33 02 F1 | 	add	local11, local10
0591c     02 32 66 F0 | 	shl	local11, #2
05920     03 00 00 FF 
05924     00 E4 85 F1 | 	sub	objptr, ##1536
05928     F2 32 02 F1 | 	add	local11, objptr
0592c     08 32 06 F1 | 	add	local11, #8
05930     19 2B 62 FC | 	wrlong	local07, local11
05934     03 00 00 FF 
05938     00 E4 05 F1 | 	add	objptr, ##1536
0593c     F2 26 02 FB | 	rdlong	local05, objptr
05940     01 26 06 F1 | 	add	local05, #1
05944     F2 26 62 FC | 	wrlong	local05, objptr
05948     41 00 00 FF 
0594c     40 E4 85 F1 | 	sub	objptr, ##33344
05950     00 FA 05 F6 | 	mov	result1, #0
05954     20 05 90 FD | 	jmp	#LR__0517
05958                 | LR__0510
05958                 | ' do
05958                 | LR__0511
05958     68 1B B0 FD | 	call	#_expr
0595c                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
0595c                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
0595c     2E 00 00 FF 
05960     08 E4 05 F1 | 	add	objptr, ##23560
05964     F2 24 02 FB | 	rdlong	local04, objptr
05968     03 24 66 F0 | 	shl	local04, #3
0596c     02 00 00 FF 
05970     38 E4 85 F1 | 	sub	objptr, ##1080
05974     F2 24 02 F1 | 	add	local04, objptr
05978     04 24 06 F1 | 	add	local04, #4
0597c     12 2D 02 FB | 	rdlong	local08, local04
05980     11 2C 0E F2 | 	cmp	local08, #17 wz
05984     2B 00 00 FF 
05988     D0 E5 85 F1 | 	sub	objptr, ##22480
0598c     60 01 90 5D |  if_ne	jmp	#LR__0512
05990     21 22 06 F6 | 	mov	local03, #33
05994     0F 27 02 F6 | 	mov	local05, local01
05998     10 29 02 F6 | 	mov	local06, local02
0599c     11 2B 02 F6 | 	mov	local07, local03
059a0     41 00 00 FF 
059a4     40 E4 05 F1 | 	add	objptr, ##33344
059a8     F2 2C 02 FB | 	rdlong	local08, objptr
059ac     16 2F 02 F6 | 	mov	local09, local08
059b0     01 2E 66 F0 | 	shl	local09, #1
059b4     16 2F 02 F1 | 	add	local09, local08
059b8     02 2E 66 F0 | 	shl	local09, #2
059bc     03 00 00 FF 
059c0     00 E4 85 F1 | 	sub	objptr, ##1536
059c4     F2 2E 02 F1 | 	add	local09, objptr
059c8     17 27 62 FC | 	wrlong	local05, local09
059cc     03 00 00 FF 
059d0     00 E4 05 F1 | 	add	objptr, ##1536
059d4     F2 32 02 FB | 	rdlong	local11, objptr
059d8     19 31 02 F6 | 	mov	local10, local11
059dc     01 30 66 F0 | 	shl	local10, #1
059e0     19 31 02 F1 | 	add	local10, local11
059e4     02 30 66 F0 | 	shl	local10, #2
059e8     03 00 00 FF 
059ec     00 E4 85 F1 | 	sub	objptr, ##1536
059f0     F2 30 02 F1 | 	add	local10, objptr
059f4     04 30 06 F1 | 	add	local10, #4
059f8     18 29 62 FC | 	wrlong	local06, local10
059fc     03 00 00 FF 
05a00     00 E4 05 F1 | 	add	objptr, ##1536
05a04     F2 26 02 FB | 	rdlong	local05, objptr
05a08     13 33 02 F6 | 	mov	local11, local05
05a0c     01 32 66 F0 | 	shl	local11, #1
05a10     13 33 02 F1 | 	add	local11, local05
05a14     02 32 66 F0 | 	shl	local11, #2
05a18     03 00 00 FF 
05a1c     00 E4 85 F1 | 	sub	objptr, ##1536
05a20     F2 32 02 F1 | 	add	local11, objptr
05a24     08 32 06 F1 | 	add	local11, #8
05a28     19 2B 62 FC | 	wrlong	local07, local11
05a2c     03 00 00 FF 
05a30     00 E4 05 F1 | 	add	objptr, ##1536
05a34     F2 26 02 FB | 	rdlong	local05, objptr
05a38     01 26 06 F1 | 	add	local05, #1
05a3c     F2 26 62 FC | 	wrlong	local05, objptr
05a40     44 22 06 F6 | 	mov	local03, #68
05a44     0F 27 02 F6 | 	mov	local05, local01
05a48     10 29 02 F6 | 	mov	local06, local02
05a4c     11 2B 02 F6 | 	mov	local07, local03
05a50     F2 2C 02 FB | 	rdlong	local08, objptr
05a54     16 2F 02 F6 | 	mov	local09, local08
05a58     01 2E 66 F0 | 	shl	local09, #1
05a5c     16 2F 02 F1 | 	add	local09, local08
05a60     02 2E 66 F0 | 	shl	local09, #2
05a64     03 00 00 FF 
05a68     00 E4 85 F1 | 	sub	objptr, ##1536
05a6c     F2 2E 02 F1 | 	add	local09, objptr
05a70     17 27 62 FC | 	wrlong	local05, local09
05a74     03 00 00 FF 
05a78     00 E4 05 F1 | 	add	objptr, ##1536
05a7c     F2 32 02 FB | 	rdlong	local11, objptr
05a80     19 31 02 F6 | 	mov	local10, local11
05a84     01 30 66 F0 | 	shl	local10, #1
05a88     19 31 02 F1 | 	add	local10, local11
05a8c     02 30 66 F0 | 	shl	local10, #2
05a90     03 00 00 FF 
05a94     00 E4 85 F1 | 	sub	objptr, ##1536
05a98     F2 30 02 F1 | 	add	local10, objptr
05a9c     04 30 06 F1 | 	add	local10, #4
05aa0     18 29 62 FC | 	wrlong	local06, local10
05aa4     03 00 00 FF 
05aa8     00 E4 05 F1 | 	add	objptr, ##1536
05aac     F2 30 02 FB | 	rdlong	local10, objptr
05ab0     18 33 02 F6 | 	mov	local11, local10
05ab4     01 32 66 F0 | 	shl	local11, #1
05ab8     18 33 02 F1 | 	add	local11, local10
05abc     02 32 66 F0 | 	shl	local11, #2
05ac0     03 00 00 FF 
05ac4     00 E4 85 F1 | 	sub	objptr, ##1536
05ac8     F2 32 02 F1 | 	add	local11, objptr
05acc     08 32 06 F1 | 	add	local11, #8
05ad0     19 2B 62 FC | 	wrlong	local07, local11
05ad4     03 00 00 FF 
05ad8     00 E4 05 F1 | 	add	objptr, ##1536
05adc     F2 26 02 FB | 	rdlong	local05, objptr
05ae0     01 26 06 F1 | 	add	local05, #1
05ae4     F2 26 62 FC | 	wrlong	local05, objptr
05ae8     41 00 00 FF 
05aec     40 E4 85 F1 | 	sub	objptr, ##33344
05af0                 | LR__0512
05af0                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
05af0     2E 00 00 FF 
05af4     08 E4 05 F1 | 	add	objptr, ##23560
05af8     F2 24 02 FB | 	rdlong	local04, objptr
05afc     03 24 66 F0 | 	shl	local04, #3
05b00     02 00 00 FF 
05b04     38 E4 85 F1 | 	sub	objptr, ##1080
05b08     F2 24 02 F1 | 	add	local04, objptr
05b0c     04 24 06 F1 | 	add	local04, #4
05b10     12 2D 02 FB | 	rdlong	local08, local04
05b14     12 2C 0E F2 | 	cmp	local08, #18 wz
05b18     2B 00 00 FF 
05b1c     D0 E5 85 F1 | 	sub	objptr, ##22480
05b20     60 01 90 5D |  if_ne	jmp	#LR__0513
05b24     22 22 06 F6 | 	mov	local03, #34
05b28     0F 27 02 F6 | 	mov	local05, local01
05b2c     10 29 02 F6 | 	mov	local06, local02
05b30     11 2B 02 F6 | 	mov	local07, local03
05b34     41 00 00 FF 
05b38     40 E4 05 F1 | 	add	objptr, ##33344
05b3c     F2 2C 02 FB | 	rdlong	local08, objptr
05b40     16 2F 02 F6 | 	mov	local09, local08
05b44     01 2E 66 F0 | 	shl	local09, #1
05b48     16 2F 02 F1 | 	add	local09, local08
05b4c     02 2E 66 F0 | 	shl	local09, #2
05b50     03 00 00 FF 
05b54     00 E4 85 F1 | 	sub	objptr, ##1536
05b58     F2 2E 02 F1 | 	add	local09, objptr
05b5c     17 27 62 FC | 	wrlong	local05, local09
05b60     03 00 00 FF 
05b64     00 E4 05 F1 | 	add	objptr, ##1536
05b68     F2 32 02 FB | 	rdlong	local11, objptr
05b6c     19 31 02 F6 | 	mov	local10, local11
05b70     01 30 66 F0 | 	shl	local10, #1
05b74     19 31 02 F1 | 	add	local10, local11
05b78     02 30 66 F0 | 	shl	local10, #2
05b7c     03 00 00 FF 
05b80     00 E4 85 F1 | 	sub	objptr, ##1536
05b84     F2 30 02 F1 | 	add	local10, objptr
05b88     04 30 06 F1 | 	add	local10, #4
05b8c     18 29 62 FC | 	wrlong	local06, local10
05b90     03 00 00 FF 
05b94     00 E4 05 F1 | 	add	objptr, ##1536
05b98     F2 26 02 FB | 	rdlong	local05, objptr
05b9c     13 33 02 F6 | 	mov	local11, local05
05ba0     01 32 66 F0 | 	shl	local11, #1
05ba4     13 33 02 F1 | 	add	local11, local05
05ba8     02 32 66 F0 | 	shl	local11, #2
05bac     03 00 00 FF 
05bb0     00 E4 85 F1 | 	sub	objptr, ##1536
05bb4     F2 32 02 F1 | 	add	local11, objptr
05bb8     08 32 06 F1 | 	add	local11, #8
05bbc     19 2B 62 FC | 	wrlong	local07, local11
05bc0     03 00 00 FF 
05bc4     00 E4 05 F1 | 	add	objptr, ##1536
05bc8     F2 26 02 FB | 	rdlong	local05, objptr
05bcc     01 26 06 F1 | 	add	local05, #1
05bd0     F2 26 62 FC | 	wrlong	local05, objptr
05bd4     44 22 06 F6 | 	mov	local03, #68
05bd8     0F 27 02 F6 | 	mov	local05, local01
05bdc     10 29 02 F6 | 	mov	local06, local02
05be0     11 2B 02 F6 | 	mov	local07, local03
05be4     F2 2C 02 FB | 	rdlong	local08, objptr
05be8     16 2F 02 F6 | 	mov	local09, local08
05bec     01 2E 66 F0 | 	shl	local09, #1
05bf0     16 2F 02 F1 | 	add	local09, local08
05bf4     02 2E 66 F0 | 	shl	local09, #2
05bf8     03 00 00 FF 
05bfc     00 E4 85 F1 | 	sub	objptr, ##1536
05c00     F2 2E 02 F1 | 	add	local09, objptr
05c04     17 27 62 FC | 	wrlong	local05, local09
05c08     03 00 00 FF 
05c0c     00 E4 05 F1 | 	add	objptr, ##1536
05c10     F2 32 02 FB | 	rdlong	local11, objptr
05c14     19 31 02 F6 | 	mov	local10, local11
05c18     01 30 66 F0 | 	shl	local10, #1
05c1c     19 31 02 F1 | 	add	local10, local11
05c20     02 30 66 F0 | 	shl	local10, #2
05c24     03 00 00 FF 
05c28     00 E4 85 F1 | 	sub	objptr, ##1536
05c2c     F2 30 02 F1 | 	add	local10, objptr
05c30     04 30 06 F1 | 	add	local10, #4
05c34     18 29 62 FC | 	wrlong	local06, local10
05c38     03 00 00 FF 
05c3c     00 E4 05 F1 | 	add	objptr, ##1536
05c40     F2 30 02 FB | 	rdlong	local10, objptr
05c44     18 33 02 F6 | 	mov	local11, local10
05c48     01 32 66 F0 | 	shl	local11, #1
05c4c     18 33 02 F1 | 	add	local11, local10
05c50     02 32 66 F0 | 	shl	local11, #2
05c54     03 00 00 FF 
05c58     00 E4 85 F1 | 	sub	objptr, ##1536
05c5c     F2 32 02 F1 | 	add	local11, objptr
05c60     08 32 06 F1 | 	add	local11, #8
05c64     19 2B 62 FC | 	wrlong	local07, local11
05c68     03 00 00 FF 
05c6c     00 E4 05 F1 | 	add	objptr, ##1536
05c70     F2 26 02 FB | 	rdlong	local05, objptr
05c74     01 26 06 F1 | 	add	local05, #1
05c78     F2 26 62 FC | 	wrlong	local05, objptr
05c7c     41 00 00 FF 
05c80     40 E4 85 F1 | 	sub	objptr, ##33344
05c84                 | LR__0513
05c84                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
05c84     2E 00 00 FF 
05c88     08 E4 05 F1 | 	add	objptr, ##23560
05c8c     F2 24 02 FB | 	rdlong	local04, objptr
05c90     03 24 66 F0 | 	shl	local04, #3
05c94     02 00 00 FF 
05c98     38 E4 85 F1 | 	sub	objptr, ##1080
05c9c     F2 24 02 F1 | 	add	local04, objptr
05ca0     04 24 06 F1 | 	add	local04, #4
05ca4     12 2D 02 FB | 	rdlong	local08, local04
05ca8     FE 2D 0E F2 | 	cmp	local08, #510 wz
05cac     2B 00 00 FF 
05cb0     D0 E5 85 F1 | 	sub	objptr, ##22480
05cb4     B8 00 90 5D |  if_ne	jmp	#LR__0514
05cb8     44 22 06 F6 | 	mov	local03, #68
05cbc     0F 27 02 F6 | 	mov	local05, local01
05cc0     10 29 02 F6 | 	mov	local06, local02
05cc4     11 2B 02 F6 | 	mov	local07, local03
05cc8     41 00 00 FF 
05ccc     40 E4 05 F1 | 	add	objptr, ##33344
05cd0     F2 2C 02 FB | 	rdlong	local08, objptr
05cd4     16 2F 02 F6 | 	mov	local09, local08
05cd8     01 2E 66 F0 | 	shl	local09, #1
05cdc     16 2F 02 F1 | 	add	local09, local08
05ce0     02 2E 66 F0 | 	shl	local09, #2
05ce4     03 00 00 FF 
05ce8     00 E4 85 F1 | 	sub	objptr, ##1536
05cec     F2 2E 02 F1 | 	add	local09, objptr
05cf0     17 27 62 FC | 	wrlong	local05, local09
05cf4     03 00 00 FF 
05cf8     00 E4 05 F1 | 	add	objptr, ##1536
05cfc     F2 32 02 FB | 	rdlong	local11, objptr
05d00     19 31 02 F6 | 	mov	local10, local11
05d04     01 30 66 F0 | 	shl	local10, #1
05d08     19 31 02 F1 | 	add	local10, local11
05d0c     02 30 66 F0 | 	shl	local10, #2
05d10     03 00 00 FF 
05d14     00 E4 85 F1 | 	sub	objptr, ##1536
05d18     F2 30 02 F1 | 	add	local10, objptr
05d1c     04 30 06 F1 | 	add	local10, #4
05d20     18 29 62 FC | 	wrlong	local06, local10
05d24     03 00 00 FF 
05d28     00 E4 05 F1 | 	add	objptr, ##1536
05d2c     F2 30 02 FB | 	rdlong	local10, objptr
05d30     18 33 02 F6 | 	mov	local11, local10
05d34     01 32 66 F0 | 	shl	local11, #1
05d38     18 33 02 F1 | 	add	local11, local10
05d3c     02 32 66 F0 | 	shl	local11, #2
05d40     03 00 00 FF 
05d44     00 E4 85 F1 | 	sub	objptr, ##1536
05d48     F2 32 02 F1 | 	add	local11, objptr
05d4c     08 32 06 F1 | 	add	local11, #8
05d50     19 2B 62 FC | 	wrlong	local07, local11
05d54     03 00 00 FF 
05d58     00 E4 05 F1 | 	add	objptr, ##1536
05d5c     F2 26 02 FB | 	rdlong	local05, objptr
05d60     01 26 06 F1 | 	add	local05, #1
05d64     F2 26 62 FC | 	wrlong	local05, objptr
05d68     41 00 00 FF 
05d6c     40 E4 85 F1 | 	sub	objptr, ##33344
05d70                 | LR__0514
05d70                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
05d70     2E 00 00 FF 
05d74     08 E4 05 F1 | 	add	objptr, ##23560
05d78     F2 24 02 FB | 	rdlong	local04, objptr
05d7c     03 24 66 F0 | 	shl	local04, #3
05d80     02 00 00 FF 
05d84     38 E4 85 F1 | 	sub	objptr, ##1080
05d88     F2 24 02 F1 | 	add	local04, objptr
05d8c     04 24 06 F1 | 	add	local04, #4
05d90     12 2D 02 FB | 	rdlong	local08, local04
05d94     11 2C 0E F2 | 	cmp	local08, #17 wz
05d98     2B 00 00 FF 
05d9c     D0 E5 85 F1 | 	sub	objptr, ##22480
05da0     6C 00 90 AD |  if_e	jmp	#LR__0515
05da4     2E 00 00 FF 
05da8     08 E4 05 F1 | 	add	objptr, ##23560
05dac     F2 2C 02 FB | 	rdlong	local08, objptr
05db0     03 2C 66 F0 | 	shl	local08, #3
05db4     02 00 00 FF 
05db8     38 E4 85 F1 | 	sub	objptr, ##1080
05dbc     F2 2C 02 F1 | 	add	local08, objptr
05dc0     04 2C 06 F1 | 	add	local08, #4
05dc4     16 2D 02 FB | 	rdlong	local08, local08
05dc8     12 2C 0E F2 | 	cmp	local08, #18 wz
05dcc     2B 00 00 FF 
05dd0     D0 E5 85 F1 | 	sub	objptr, ##22480
05dd4     38 00 90 AD |  if_e	jmp	#LR__0515
05dd8     2E 00 00 FF 
05ddc     08 E4 05 F1 | 	add	objptr, ##23560
05de0     F2 32 02 FB | 	rdlong	local11, objptr
05de4     03 32 66 F0 | 	shl	local11, #3
05de8     02 00 00 FF 
05dec     38 E4 85 F1 | 	sub	objptr, ##1080
05df0     F2 32 02 F1 | 	add	local11, objptr
05df4     04 32 06 F1 | 	add	local11, #4
05df8     19 33 02 FB | 	rdlong	local11, local11
05dfc     FE 33 0E F2 | 	cmp	local11, #510 wz
05e00     2B 00 00 FF 
05e04     D0 E5 85 F1 | 	sub	objptr, ##22480
05e08     16 FA 05 56 |  if_ne	mov	result1, #22
05e0c     68 00 90 5D |  if_ne	jmp	#LR__0517
05e10                 | LR__0515
05e10     2E 00 00 FF 
05e14     08 E4 05 F1 | 	add	objptr, ##23560
05e18     F2 24 02 FB | 	rdlong	local04, objptr
05e1c     01 24 06 F1 | 	add	local04, #1
05e20     F2 24 62 FC | 	wrlong	local04, objptr
05e24     03 24 66 F0 | 	shl	local04, #3
05e28     02 00 00 FF 
05e2c     38 E4 85 F1 | 	sub	objptr, ##1080
05e30     F2 24 02 F1 | 	add	local04, objptr
05e34     04 24 06 F1 | 	add	local04, #4
05e38     12 2D 02 FB | 	rdlong	local08, local04
05e3c     FE 2D 0E F2 | 	cmp	local08, #510 wz
05e40     2B 00 00 FF 
05e44     D0 E5 85 F1 | 	sub	objptr, ##22480
05e48     28 00 90 AD |  if_e	jmp	#LR__0516
05e4c     2E 00 00 FF 
05e50     08 E4 05 F1 | 	add	objptr, ##23560
05e54     F2 32 02 FB | 	rdlong	local11, objptr
05e58     0E 00 00 FF 
05e5c     1C E4 05 F1 | 	add	objptr, ##7196
05e60     F2 30 02 FB | 	rdlong	local10, objptr
05e64     3C 00 00 FF 
05e68     24 E4 85 F1 | 	sub	objptr, ##30756
05e6c     18 33 52 F2 | 	cmps	local11, local10 wc
05e70     E4 FA 9F CD |  if_b	jmp	#LR__0511
05e74                 | LR__0516
05e74                 | ' return 0
05e74     00 FA 05 F6 | 	mov	result1, #0
05e78                 | LR__0517
05e78     A7 F0 03 F6 | 	mov	ptra, fp
05e7c     B2 00 A0 FD | 	call	#popregs_
05e80                 | _compile_print_ret
05e80     2D 00 64 FD | 	ret
05e84                 | 
05e84                 | ' 
05e84                 | ' function compile_if() as ulong  
05e84                 | _compile_if
05e84     05 4A 05 F6 | 	mov	COUNT_, #5
05e88     A8 00 A0 FD | 	call	#pushregs_
05e8c                 | _compile_if_enter
05e8c     28 F3 BF FD | 	call	#_compile_converttoint
05e90                 | ' return err
05e90     2E 00 00 FF 
05e94     08 E4 05 F1 | 	add	objptr, ##23560
05e98     F2 FA 01 FB | 	rdlong	result1, objptr
05e9c     01 FA 05 F1 | 	add	result1, #1
05ea0     F2 FA 61 FC | 	wrlong	result1, objptr
05ea4     58 22 06 F6 | 	mov	local03, #88
05ea8     0F 25 02 F6 | 	mov	local04, local01
05eac     10 27 02 F6 | 	mov	local05, local02
05eb0     11 1F 02 F6 | 	mov	local01, local03
05eb4     13 00 00 FF 
05eb8     38 E4 05 F1 | 	add	objptr, ##9784
05ebc     F2 12 02 FB | 	rdlong	arg01, objptr
05ec0     09 FB 01 F6 | 	mov	result1, arg01
05ec4     01 FA 65 F0 | 	shl	result1, #1
05ec8     09 FB 01 F1 | 	add	result1, arg01
05ecc     02 FA 65 F0 | 	shl	result1, #2
05ed0     03 00 00 FF 
05ed4     00 E4 85 F1 | 	sub	objptr, ##1536
05ed8     F2 FA 01 F1 | 	add	result1, objptr
05edc     FD 24 62 FC | 	wrlong	local04, result1
05ee0     03 00 00 FF 
05ee4     00 E4 05 F1 | 	add	objptr, ##1536
05ee8     F2 12 02 FB | 	rdlong	arg01, objptr
05eec     09 25 02 F6 | 	mov	local04, arg01
05ef0     01 24 66 F0 | 	shl	local04, #1
05ef4     09 25 02 F1 | 	add	local04, arg01
05ef8     02 24 66 F0 | 	shl	local04, #2
05efc     03 00 00 FF 
05f00     00 E4 85 F1 | 	sub	objptr, ##1536
05f04     F2 24 02 F1 | 	add	local04, objptr
05f08     04 24 06 F1 | 	add	local04, #4
05f0c     12 27 62 FC | 	wrlong	local05, local04
05f10     03 00 00 FF 
05f14     00 E4 05 F1 | 	add	objptr, ##1536
05f18     F2 24 02 FB | 	rdlong	local04, objptr
05f1c     12 27 02 F6 | 	mov	local05, local04
05f20     01 26 66 F0 | 	shl	local05, #1
05f24     12 27 02 F1 | 	add	local05, local04
05f28     02 26 66 F0 | 	shl	local05, #2
05f2c     03 00 00 FF 
05f30     00 E4 85 F1 | 	sub	objptr, ##1536
05f34     F2 26 02 F1 | 	add	local05, objptr
05f38     08 26 06 F1 | 	add	local05, #8
05f3c     13 1F 62 FC | 	wrlong	local01, local05
05f40     03 00 00 FF 
05f44     00 E4 05 F1 | 	add	objptr, ##1536
05f48     F2 24 02 FB | 	rdlong	local04, objptr
05f4c     01 24 06 F1 | 	add	local04, #1
05f50     F2 24 62 FC | 	wrlong	local04, objptr
05f54                 | ' 
05f54                 | ' 'print "In compile_if"
05f54                 | ' compile_int_fun_1p()
05f54                 | ' cmd=lparts(ct).token : ct+=1
05f54                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
05f54                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
05f54                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
05f54     13 00 00 FF 
05f58     38 E4 85 F1 | 	sub	objptr, ##9784
05f5c     F2 26 02 FB | 	rdlong	local05, objptr
05f60     01 26 06 F1 | 	add	local05, #1
05f64     03 26 66 F0 | 	shl	local05, #3
05f68     02 00 00 FF 
05f6c     38 E4 85 F1 | 	sub	objptr, ##1080
05f70     F2 26 02 F1 | 	add	local05, objptr
05f74     13 13 02 FB | 	rdlong	arg01, local05
05f78     2B 00 00 FF 
05f7c     D0 E5 85 F1 | 	sub	objptr, ##22480
05f80                 | ' 
05f80                 | ' select case s
05f80     25 01 00 FF 
05f84     16 15 06 F6 | 	mov	arg02, ##@LR__4184
05f88     5C F8 B0 FD | 	call	#__system___string_cmp
05f8c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f90     1B FA 05 A6 |  if_e	mov	result1, #27
05f94     00 FA 05 56 |  if_ne	mov	result1, #0
05f98     00 FA 0D F2 | 	cmp	result1, #0 wz
05f9c     0C 00 90 AD |  if_e	jmp	#LR__0520
05fa0     05 12 06 F6 | 	mov	arg01, #5
05fa4     20 EC BF FD | 	call	#_compile_immediate_assign
05fa8     08 00 90 FD | 	jmp	#LR__0521
05fac                 | LR__0520
05fac     05 12 06 F6 | 	mov	arg01, #5
05fb0     D8 E4 BF FD | 	call	#_compile_immediate
05fb4                 | LR__0521
05fb4                 | ' 
05fb4                 | ' 
05fb4                 | ' return 0
05fb4     00 FA 05 F6 | 	mov	result1, #0
05fb8     A7 F0 03 F6 | 	mov	ptra, fp
05fbc     B2 00 A0 FD | 	call	#popregs_
05fc0                 | _compile_if_ret
05fc0     2D 00 64 FD | 	ret
05fc4                 | 
05fc4                 | ' 
05fc4                 | ' function compile_else() as ulong  
05fc4                 | _compile_else
05fc4     05 4A 05 F6 | 	mov	COUNT_, #5
05fc8     A8 00 A0 FD | 	call	#pushregs_
05fcc                 | _compile_else_enter
05fcc     5A 22 06 F6 | 	mov	local03, #90
05fd0     0F 25 02 F6 | 	mov	local04, local01
05fd4     10 27 02 F6 | 	mov	local05, local02
05fd8     11 1F 02 F6 | 	mov	local01, local03
05fdc     41 00 00 FF 
05fe0     40 E4 05 F1 | 	add	objptr, ##33344
05fe4     F2 12 02 FB | 	rdlong	arg01, objptr
05fe8     09 FB 01 F6 | 	mov	result1, arg01
05fec     01 FA 65 F0 | 	shl	result1, #1
05ff0     09 FB 01 F1 | 	add	result1, arg01
05ff4     02 FA 65 F0 | 	shl	result1, #2
05ff8     03 00 00 FF 
05ffc     00 E4 85 F1 | 	sub	objptr, ##1536
06000     F2 FA 01 F1 | 	add	result1, objptr
06004     FD 24 62 FC | 	wrlong	local04, result1
06008     03 00 00 FF 
0600c     00 E4 05 F1 | 	add	objptr, ##1536
06010     F2 FA 01 FB | 	rdlong	result1, objptr
06014     FD 24 02 F6 | 	mov	local04, result1
06018     01 24 66 F0 | 	shl	local04, #1
0601c     FD 24 02 F1 | 	add	local04, result1
06020     02 24 66 F0 | 	shl	local04, #2
06024     03 00 00 FF 
06028     00 E4 85 F1 | 	sub	objptr, ##1536
0602c     F2 24 02 F1 | 	add	local04, objptr
06030     04 24 06 F1 | 	add	local04, #4
06034     12 27 62 FC | 	wrlong	local05, local04
06038     03 00 00 FF 
0603c     00 E4 05 F1 | 	add	objptr, ##1536
06040     F2 24 02 FB | 	rdlong	local04, objptr
06044     12 27 02 F6 | 	mov	local05, local04
06048     01 26 66 F0 | 	shl	local05, #1
0604c     12 27 02 F1 | 	add	local05, local04
06050     02 26 66 F0 | 	shl	local05, #2
06054     03 00 00 FF 
06058     00 E4 85 F1 | 	sub	objptr, ##1536
0605c     F2 26 02 F1 | 	add	local05, objptr
06060     08 26 06 F1 | 	add	local05, #8
06064     13 1F 62 FC | 	wrlong	local01, local05
06068     03 00 00 FF 
0606c     00 E4 05 F1 | 	add	objptr, ##1536
06070     F2 24 02 FB | 	rdlong	local04, objptr
06074     01 24 06 F1 | 	add	local04, #1
06078     F2 24 62 FC | 	wrlong	local04, objptr
0607c                 | ' 
0607c                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
0607c                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
0607c     13 00 00 FF 
06080     38 E4 85 F1 | 	sub	objptr, ##9784
06084     F2 26 02 FB | 	rdlong	local05, objptr
06088     01 26 06 F1 | 	add	local05, #1
0608c     03 26 66 F0 | 	shl	local05, #3
06090     02 00 00 FF 
06094     38 E4 85 F1 | 	sub	objptr, ##1080
06098     F2 26 02 F1 | 	add	local05, objptr
0609c     13 13 02 FB | 	rdlong	arg01, local05
060a0     2B 00 00 FF 
060a4     D0 E5 85 F1 | 	sub	objptr, ##22480
060a8                 | ' 
060a8                 | ' select case s
060a8     25 01 00 FF 
060ac     16 15 06 F6 | 	mov	arg02, ##@LR__4184
060b0     34 F7 B0 FD | 	call	#__system___string_cmp
060b4     00 FA 0D F2 | 	cmp	result1, #0 wz
060b8     1B FA 05 A6 |  if_e	mov	result1, #27
060bc     00 FA 05 56 |  if_ne	mov	result1, #0
060c0     00 FA 0D F2 | 	cmp	result1, #0 wz
060c4     0C 00 90 AD |  if_e	jmp	#LR__0530
060c8     05 12 06 F6 | 	mov	arg01, #5
060cc     F8 EA BF FD | 	call	#_compile_immediate_assign
060d0     08 00 90 FD | 	jmp	#LR__0531
060d4                 | LR__0530
060d4     05 12 06 F6 | 	mov	arg01, #5
060d8     B0 E3 BF FD | 	call	#_compile_immediate
060dc                 | LR__0531
060dc                 | ' 
060dc                 | ' 
060dc                 | ' return 0
060dc     00 FA 05 F6 | 	mov	result1, #0
060e0     A7 F0 03 F6 | 	mov	ptra, fp
060e4     B2 00 A0 FD | 	call	#popregs_
060e8                 | _compile_else_ret
060e8     2D 00 64 FD | 	ret
060ec                 | 
060ec                 | ' 
060ec                 | ' 
060ec                 | ' function compile_dim() as ulong  
060ec                 | _compile_dim
060ec     11 4A 05 F6 | 	mov	COUNT_, #17
060f0     A8 00 A0 FD | 	call	#pushregs_
060f4     01 1E 06 F6 | 	mov	local01, #1
060f8     01 20 06 F6 | 	mov	local02, #1
060fc     01 22 06 F6 | 	mov	local03, #1
06100                 | ' 
06100                 | ' dims(0)=1: dims(1)=1: dims(2)=1
06100                 | ' 
06100                 | ' if isname(lparts(ct).part$) then 
06100     2E 00 00 FF 
06104     08 E4 05 F1 | 	add	objptr, ##23560
06108     F2 14 02 FB | 	rdlong	arg02, objptr
0610c     03 14 66 F0 | 	shl	arg02, #3
06110     02 00 00 FF 
06114     38 E4 85 F1 | 	sub	objptr, ##1080
06118     F2 14 02 F1 | 	add	arg02, objptr
0611c     0A 13 02 FB | 	rdlong	arg01, arg02
06120     2B 00 00 FF 
06124     D0 E5 85 F1 | 	sub	objptr, ##22480
06128     44 D3 BF FD | 	call	#_isname
0612c     00 FA 0D F2 | 	cmp	result1, #0 wz
06130     30 05 90 AD |  if_e	jmp	#LR__0564
06134     2E 00 00 FF 
06138     08 E4 05 F1 | 	add	objptr, ##23560
0613c     F2 24 02 FB | 	rdlong	local04, objptr
06140     03 24 66 F0 | 	shl	local04, #3
06144     02 00 00 FF 
06148     38 E4 85 F1 | 	sub	objptr, ##1080
0614c     F2 24 02 F1 | 	add	local04, objptr
06150     12 27 02 FB | 	rdlong	local05, local04
06154     01 28 66 F6 | 	neg	local06, #1
06158                 | '   varname2$=lparts(ct).part$ 
06158                 | '   j=-1
06158                 | '   if varnum>0 then
06158     04 E4 85 F1 | 	sub	objptr, #4
0615c     F2 2A 02 FB | 	rdlong	local07, objptr
06160     2B 00 00 FF 
06164     CC E5 85 F1 | 	sub	objptr, ##22476
06168     01 2A 56 F2 | 	cmps	local07, #1 wc
0616c     58 00 90 CD |  if_b	jmp	#LR__0542
06170                 | '  '   print "in dim, varnum=";varnum
06170                 | '     for i=0 to varnum-1
06170     00 2C 06 F6 | 	mov	local08, #0
06174     2B 00 00 FF 
06178     CC E5 05 F1 | 	add	objptr, ##22476
0617c     F2 2E 02 FB | 	rdlong	local09, objptr
06180     2B 00 00 FF 
06184     CC E5 85 F1 | 	sub	objptr, ##22476
06188                 | LR__0540
06188     17 2D 52 F2 | 	cmps	local08, local09 wc
0618c     38 00 90 3D |  if_ae	jmp	#LR__0541
06190                 | '       if variables(i).name=varname2$ then j=i : exit
06190     16 25 02 F6 | 	mov	local04, local08
06194     04 24 66 F0 | 	shl	local04, #4
06198     0B 00 00 FF 
0619c     CC E5 05 F1 | 	add	objptr, ##6092
061a0     F2 24 02 F1 | 	add	local04, objptr
061a4     12 13 02 FB | 	rdlong	arg01, local04
061a8     13 15 02 F6 | 	mov	arg02, local05
061ac     0B 00 00 FF 
061b0     CC E5 85 F1 | 	sub	objptr, ##6092
061b4     30 F6 B0 FD | 	call	#__system___string_cmp
061b8     00 FA 0D F2 | 	cmp	result1, #0 wz
061bc     16 29 02 A6 |  if_e	mov	local06, local08
061c0     01 2C 06 51 |  if_ne	add	local08, #1
061c4     C0 FF 9F 5D |  if_ne	jmp	#LR__0540
061c8                 | LR__0541
061c8                 | LR__0542
061c8                 | '   if j<>-1 then printerror (42) : return 42
061c8     FF FF 7F FF 
061cc     FF 29 0E F2 | 	cmp	local06, ##-1 wz
061d0     10 00 90 AD |  if_e	jmp	#LR__0543
061d4     2A 12 06 F6 | 	mov	arg01, #42
061d8     E8 C0 B0 FD | 	call	#_printerror
061dc     2A FA 05 F6 | 	mov	result1, #42
061e0     D8 05 90 FD | 	jmp	#LR__0566
061e4                 | LR__0543
061e4                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
061e4     2E 00 00 FF 
061e8     08 E4 05 F1 | 	add	objptr, ##23560
061ec     F2 14 02 FB | 	rdlong	arg02, objptr
061f0     01 14 06 F1 | 	add	arg02, #1
061f4     03 14 66 F0 | 	shl	arg02, #3
061f8     02 00 00 FF 
061fc     38 E4 85 F1 | 	sub	objptr, ##1080
06200     F2 14 02 F1 | 	add	arg02, objptr
06204     0A 13 02 FB | 	rdlong	arg01, arg02
06208     26 01 00 FF 
0620c     EB 14 06 F6 | 	mov	arg02, ##@LR__4295
06210     2B 00 00 FF 
06214     D0 E5 85 F1 | 	sub	objptr, ##22480
06218     CC F5 B0 FD | 	call	#__system___string_cmp
0621c     00 FA 0D F2 | 	cmp	result1, #0 wz
06220     50 00 90 AD |  if_e	jmp	#LR__0544
06224     2E 00 00 FF 
06228     08 E4 05 F1 | 	add	objptr, ##23560
0622c     F2 2E 02 FB | 	rdlong	local09, objptr
06230     01 2E 06 F1 | 	add	local09, #1
06234     03 2E 66 F0 | 	shl	local09, #3
06238     02 00 00 FF 
0623c     38 E4 85 F1 | 	sub	objptr, ##1080
06240     F2 2E 02 F1 | 	add	local09, objptr
06244     17 13 02 FB | 	rdlong	arg01, local09
06248     26 01 00 FF 
0624c     ED 14 06 F6 | 	mov	arg02, ##@LR__4296
06250     2B 00 00 FF 
06254     D0 E5 85 F1 | 	sub	objptr, ##22480
06258     8C F5 B0 FD | 	call	#__system___string_cmp
0625c     00 FA 0D F2 | 	cmp	result1, #0 wz
06260     10 00 90 AD |  if_e	jmp	#LR__0544
06264     2B 12 06 F6 | 	mov	arg01, #43
06268     58 C0 B0 FD | 	call	#_printerror
0626c     2B FA 05 F6 | 	mov	result1, #43
06270     48 05 90 FD | 	jmp	#LR__0566
06274                 | LR__0544
06274                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
06274     2E 00 00 FF 
06278     08 E4 05 F1 | 	add	objptr, ##23560
0627c     F2 14 02 FB | 	rdlong	arg02, objptr
06280     01 14 06 F1 | 	add	arg02, #1
06284     03 14 66 F0 | 	shl	arg02, #3
06288     02 00 00 FF 
0628c     38 E4 85 F1 | 	sub	objptr, ##1080
06290     F2 14 02 F1 | 	add	arg02, objptr
06294     0A 13 02 FB | 	rdlong	arg01, arg02
06298     26 01 00 FF 
0629c     F0 14 06 F6 | 	mov	arg02, ##@LR__4297
062a0     2B 00 00 FF 
062a4     D0 E5 85 F1 | 	sub	objptr, ##22480
062a8     3C F5 B0 FD | 	call	#__system___string_cmp
062ac     00 FA 0D F2 | 	cmp	result1, #0 wz
062b0     2E 00 00 AF 
062b4     08 E4 05 A1 |  if_e	add	objptr, ##23560
062b8     F2 30 02 AB |  if_e	rdlong	local10, objptr
062bc     2E 00 00 AF 
062c0     08 E4 85 A1 |  if_e	sub	objptr, ##23560
062c4     01 30 06 A1 |  if_e	add	local10, #1
062c8     7C 01 90 AD |  if_e	jmp	#LR__0550
062cc     2E 00 00 FF 
062d0     08 E4 05 F1 | 	add	objptr, ##23560
062d4     F2 30 02 FB | 	rdlong	local10, objptr
062d8     2E 00 00 FF 
062dc     08 E4 85 F1 | 	sub	objptr, ##23560
062e0     02 30 06 F1 | 	add	local10, #2
062e4     00 32 06 F6 | 	mov	local11, #0
062e8                 | '   l=ct+2 : m=0 : do
062e8                 | LR__0545
062e8                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
062e8                 | '     if isdec(lparts(l).part$) then 
062e8     18 25 02 F6 | 	mov	local04, local10
062ec     03 24 66 F0 | 	shl	local04, #3
062f0     2B 00 00 FF 
062f4     D0 E5 05 F1 | 	add	objptr, ##22480
062f8     F2 24 02 F1 | 	add	local04, objptr
062fc     12 13 02 FB | 	rdlong	arg01, local04
06300     2B 00 00 FF 
06304     D0 E5 85 F1 | 	sub	objptr, ##22480
06308     08 D8 BF FD | 	call	#_isdec
0630c     00 FA 0D F2 | 	cmp	result1, #0 wz
06310     44 00 90 AD |  if_e	jmp	#LR__0546
06314     19 35 02 F6 | 	mov	local12, local11
06318     0F 35 06 F1 | 	add	local12, #local01
0631c     18 2F 02 F6 | 	mov	local09, local10
06320     03 2E 66 F0 | 	shl	local09, #3
06324     2B 00 00 FF 
06328     D0 E5 05 F1 | 	add	objptr, ##22480
0632c     F2 2E 02 F1 | 	add	local09, objptr
06330     17 13 02 FB | 	rdlong	arg01, local09
06334     00 14 06 F6 | 	mov	arg02, #0
06338     2B 00 00 FF 
0633c     D0 E5 85 F1 | 	sub	objptr, ##22480
06340     08 25 B1 FD | 	call	#__system____builtin_atoi
06344     FD 36 02 F6 | 	mov	local13, result1
06348                 | 	'.live	local13
06348                 | 	'.live	local12
06348     00 34 8E F9 | 	altd	local12, #0
0634c     1B 35 02 F6 | 	mov	local12, local13
06350     01 32 06 F1 | 	add	local11, #1
06354     10 00 90 FD | 	jmp	#LR__0547
06358                 | LR__0546
06358     11 12 06 F6 | 	mov	arg01, #17
0635c     64 BF B0 FD | 	call	#_printerror
06360                 | '       printerror (17)  : return(17)
06360     11 FA 05 F6 | 	mov	result1, #17
06364     54 04 90 FD | 	jmp	#LR__0566
06368                 | LR__0547
06368                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
06368     18 25 02 F6 | 	mov	local04, local10
0636c     01 24 06 F1 | 	add	local04, #1
06370     03 24 66 F0 | 	shl	local04, #3
06374     2B 00 00 FF 
06378     D0 E5 05 F1 | 	add	objptr, ##22480
0637c     F2 24 02 F1 | 	add	local04, objptr
06380     12 13 02 FB | 	rdlong	arg01, local04
06384     26 01 00 FF 
06388     F3 14 06 F6 | 	mov	arg02, ##@LR__4298
0638c     2B 00 00 FF 
06390     D0 E5 85 F1 | 	sub	objptr, ##22480
06394     50 F4 B0 FD | 	call	#__system___string_cmp
06398     00 FA 0D F2 | 	cmp	result1, #0 wz
0639c     48 00 90 AD |  if_e	jmp	#LR__0548
063a0     18 37 02 F6 | 	mov	local13, local10
063a4     01 36 06 F1 | 	add	local13, #1
063a8     03 36 66 F0 | 	shl	local13, #3
063ac     2B 00 00 FF 
063b0     D0 E5 05 F1 | 	add	objptr, ##22480
063b4     F2 36 02 F1 | 	add	local13, objptr
063b8     1B 13 02 FB | 	rdlong	arg01, local13
063bc     26 01 00 FF 
063c0     F5 14 06 F6 | 	mov	arg02, ##@LR__4299
063c4     2B 00 00 FF 
063c8     D0 E5 85 F1 | 	sub	objptr, ##22480
063cc     18 F4 B0 FD | 	call	#__system___string_cmp
063d0     00 FA 0D F2 | 	cmp	result1, #0 wz
063d4     10 00 90 AD |  if_e	jmp	#LR__0548
063d8     2C 12 06 F6 | 	mov	arg01, #44
063dc     E4 BE B0 FD | 	call	#_printerror
063e0     2C FA 05 F6 | 	mov	result1, #44
063e4     D4 03 90 FD | 	jmp	#LR__0566
063e8                 | LR__0548
063e8     02 30 06 F1 | 	add	local10, #2
063ec     18 25 02 F6 | 	mov	local04, local10
063f0     01 24 86 F1 | 	sub	local04, #1
063f4     03 24 66 F0 | 	shl	local04, #3
063f8     2B 00 00 FF 
063fc     D0 E5 05 F1 | 	add	objptr, ##22480
06400     F2 24 02 F1 | 	add	local04, objptr
06404     12 13 02 FB | 	rdlong	arg01, local04
06408     26 01 00 FF 
0640c     F7 14 06 F6 | 	mov	arg02, ##@LR__4300
06410     2B 00 00 FF 
06414     D0 E5 85 F1 | 	sub	objptr, ##22480
06418     CC F3 B0 FD | 	call	#__system___string_cmp
0641c     00 FA 0D F2 | 	cmp	result1, #0 wz
06420     03 32 56 52 |  if_ne	cmps	local11, #3 wc
06424     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0545
06428                 | '   if m>3 then printerror(45): return(45)
06428     04 32 56 F2 | 	cmps	local11, #4 wc
0642c     10 00 90 CD |  if_b	jmp	#LR__0549
06430     2D 12 06 F6 | 	mov	arg01, #45
06434     8C BE B0 FD | 	call	#_printerror
06438     2D FA 05 F6 | 	mov	result1, #45
0643c     7C 03 90 FD | 	jmp	#LR__0566
06440                 | LR__0549
06440     00 39 06 F6 | 	mov	local14, #256
06444     0C 3A 06 F6 | 	mov	local15, #12
06448                 | LR__0550
06448                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
06448                 | '   arraytype=array_no_type : esize=12
06448                 | ' 1350 
06448                 | '   if lparts(l).part$="as" then
06448     18 25 02 F6 | 	mov	local04, local10
0644c     03 24 66 F0 | 	shl	local04, #3
06450     2B 00 00 FF 
06454     D0 E5 05 F1 | 	add	objptr, ##22480
06458     F2 24 02 F1 | 	add	local04, objptr
0645c     12 13 02 FB | 	rdlong	arg01, local04
06460     26 01 00 FF 
06464     F9 14 06 F6 | 	mov	arg02, ##@LR__4301
06468     2B 00 00 FF 
0646c     D0 E5 85 F1 | 	sub	objptr, ##22480
06470     74 F3 B0 FD | 	call	#__system___string_cmp
06474     00 FA 0D F2 | 	cmp	result1, #0 wz
06478     F8 01 90 5D |  if_ne	jmp	#LR__0565
0647c                 | '     select case lparts(l+1).part$
0647c     18 35 02 F6 | 	mov	local12, local10
06480     01 34 06 F1 | 	add	local12, #1
06484     03 34 66 F0 | 	shl	local12, #3
06488     2B 00 00 FF 
0648c     D0 E5 05 F1 | 	add	objptr, ##22480
06490     F2 34 02 F1 | 	add	local12, objptr
06494     1A 3D 02 FB | 	rdlong	local16, local12
06498     26 01 00 FF 
0649c     FC 14 06 F6 | 	mov	arg02, ##@LR__4302
064a0     1E 13 02 F6 | 	mov	arg01, local16
064a4     2B 00 00 FF 
064a8     D0 E5 85 F1 | 	sub	objptr, ##22480
064ac     38 F3 B0 FD | 	call	#__system___string_cmp
064b0     00 FA 0D F2 | 	cmp	result1, #0 wz
064b4     0C 01 90 AD |  if_e	jmp	#LR__0551
064b8     26 01 00 FF 
064bc     01 15 06 F6 | 	mov	arg02, ##@LR__4303
064c0     1E 13 02 F6 | 	mov	arg01, local16
064c4     20 F3 B0 FD | 	call	#__system___string_cmp
064c8     00 FA 0D F2 | 	cmp	result1, #0 wz
064cc     00 01 90 AD |  if_e	jmp	#LR__0552
064d0     26 01 00 FF 
064d4     07 15 06 F6 | 	mov	arg02, ##@LR__4304
064d8     1E 13 02 F6 | 	mov	arg01, local16
064dc     08 F3 B0 FD | 	call	#__system___string_cmp
064e0     00 FA 0D F2 | 	cmp	result1, #0 wz
064e4     F4 00 90 AD |  if_e	jmp	#LR__0553
064e8     26 01 00 FF 
064ec     0D 15 06 F6 | 	mov	arg02, ##@LR__4305
064f0     1E 13 02 F6 | 	mov	arg01, local16
064f4     F0 F2 B0 FD | 	call	#__system___string_cmp
064f8     00 FA 0D F2 | 	cmp	result1, #0 wz
064fc     E8 00 90 AD |  if_e	jmp	#LR__0554
06500     26 01 00 FF 
06504     14 15 06 F6 | 	mov	arg02, ##@LR__4306
06508     1E 13 02 F6 | 	mov	arg01, local16
0650c     D8 F2 B0 FD | 	call	#__system___string_cmp
06510     00 FA 0D F2 | 	cmp	result1, #0 wz
06514     DC 00 90 AD |  if_e	jmp	#LR__0555
06518     26 01 00 FF 
0651c     19 15 06 F6 | 	mov	arg02, ##@LR__4307
06520     1E 13 02 F6 | 	mov	arg01, local16
06524     C0 F2 B0 FD | 	call	#__system___string_cmp
06528     00 FA 0D F2 | 	cmp	result1, #0 wz
0652c     D0 00 90 AD |  if_e	jmp	#LR__0556
06530     26 01 00 FF 
06534     21 15 06 F6 | 	mov	arg02, ##@LR__4308
06538     1E 13 02 F6 | 	mov	arg01, local16
0653c     A8 F2 B0 FD | 	call	#__system___string_cmp
06540     00 FA 0D F2 | 	cmp	result1, #0 wz
06544     C4 00 90 AD |  if_e	jmp	#LR__0557
06548     26 01 00 FF 
0654c     27 15 06 F6 | 	mov	arg02, ##@LR__4309
06550     1E 13 02 F6 | 	mov	arg01, local16
06554     90 F2 B0 FD | 	call	#__system___string_cmp
06558     00 FA 0D F2 | 	cmp	result1, #0 wz
0655c     B8 00 90 AD |  if_e	jmp	#LR__0558
06560     26 01 00 FF 
06564     2D 15 06 F6 | 	mov	arg02, ##@LR__4310
06568     1E 13 02 F6 | 	mov	arg01, local16
0656c     78 F2 B0 FD | 	call	#__system___string_cmp
06570     00 FA 0D F2 | 	cmp	result1, #0 wz
06574     AC 00 90 AD |  if_e	jmp	#LR__0559
06578     26 01 00 FF 
0657c     34 15 06 F6 | 	mov	arg02, ##@LR__4311
06580     1E 13 02 F6 | 	mov	arg01, local16
06584     60 F2 B0 FD | 	call	#__system___string_cmp
06588     00 FA 0D F2 | 	cmp	result1, #0 wz
0658c     A0 00 90 AD |  if_e	jmp	#LR__0560
06590     26 01 00 FF 
06594     3B 15 06 F6 | 	mov	arg02, ##@LR__4312
06598     1E 13 02 F6 | 	mov	arg01, local16
0659c     48 F2 B0 FD | 	call	#__system___string_cmp
065a0     00 FA 0D F2 | 	cmp	result1, #0 wz
065a4     94 00 90 AD |  if_e	jmp	#LR__0561
065a8     26 01 00 FF 
065ac     42 15 06 F6 | 	mov	arg02, ##@LR__4313
065b0     1E 13 02 F6 | 	mov	arg01, local16
065b4     30 F2 B0 FD | 	call	#__system___string_cmp
065b8     00 FA 0D F2 | 	cmp	result1, #0 wz
065bc     88 00 90 AD |  if_e	jmp	#LR__0562
065c0     90 00 90 FD | 	jmp	#LR__0563
065c4                 | LR__0551
065c4     01 39 06 F6 | 	mov	local14, #257
065c8     01 3A 06 F6 | 	mov	local15, #1
065cc     A4 00 90 FD | 	jmp	#LR__0565
065d0                 | LR__0552
065d0     02 39 06 F6 | 	mov	local14, #258
065d4     01 3A 06 F6 | 	mov	local15, #1
065d8     98 00 90 FD | 	jmp	#LR__0565
065dc                 | LR__0553
065dc     03 39 06 F6 | 	mov	local14, #259
065e0     02 3A 06 F6 | 	mov	local15, #2
065e4     8C 00 90 FD | 	jmp	#LR__0565
065e8                 | LR__0554
065e8     04 39 06 F6 | 	mov	local14, #260
065ec     02 3A 06 F6 | 	mov	local15, #2
065f0     80 00 90 FD | 	jmp	#LR__0565
065f4                 | LR__0555
065f4     05 39 06 F6 | 	mov	local14, #261
065f8     04 3A 06 F6 | 	mov	local15, #4
065fc     74 00 90 FD | 	jmp	#LR__0565
06600                 | LR__0556
06600     05 39 06 F6 | 	mov	local14, #261
06604     04 3A 06 F6 | 	mov	local15, #4
06608     68 00 90 FD | 	jmp	#LR__0565
0660c                 | LR__0557
0660c     06 39 06 F6 | 	mov	local14, #262
06610     04 3A 06 F6 | 	mov	local15, #4
06614     5C 00 90 FD | 	jmp	#LR__0565
06618                 | LR__0558
06618     07 39 06 F6 | 	mov	local14, #263
0661c     08 3A 06 F6 | 	mov	local15, #8
06620     50 00 90 FD | 	jmp	#LR__0565
06624                 | LR__0559
06624     08 39 06 F6 | 	mov	local14, #264
06628     08 3A 06 F6 | 	mov	local15, #8
0662c     44 00 90 FD | 	jmp	#LR__0565
06630                 | LR__0560
06630     09 39 06 F6 | 	mov	local14, #265
06634     04 3A 06 F6 | 	mov	local15, #4
06638     38 00 90 FD | 	jmp	#LR__0565
0663c                 | LR__0561
0663c     0A 39 06 F6 | 	mov	local14, #266
06640     08 3A 06 F6 | 	mov	local15, #8
06644     2C 00 90 FD | 	jmp	#LR__0565
06648                 | LR__0562
06648     0B 39 06 F6 | 	mov	local14, #267
0664c     04 3A 06 F6 | 	mov	local15, #4
06650     20 00 90 FD | 	jmp	#LR__0565
06654                 | LR__0563
06654     2F 12 06 F6 | 	mov	arg01, #47
06658     68 BC B0 FD | 	call	#_printerror
0665c     2F FA 05 F6 | 	mov	result1, #47
06660     58 01 90 FD | 	jmp	#LR__0566
06664                 | LR__0564
06664     2E 12 06 F6 | 	mov	arg01, #46
06668     58 BC B0 FD | 	call	#_printerror
0666c                 | '   printerror(46): return 46
0666c     2E FA 05 F6 | 	mov	result1, #46
06670     48 01 90 FD | 	jmp	#LR__0566
06674                 | LR__0565
06674     0F 3B 02 FD | 	qmul	local15, local01
06678     18 2A 62 FD | 	getqx	local07
0667c     10 2B 02 FD | 	qmul	local07, local02
06680     18 3C 62 FD | 	getqx	local16
06684     11 3D 02 FD | 	qmul	local16, local03
06688     52 00 00 FF 
0668c     3C E4 05 F1 | 	add	objptr, ##42044
06690     F2 3E 02 FB | 	rdlong	local17, objptr
06694     1C 15 02 F6 | 	mov	arg02, local14
06698     01 16 06 F6 | 	mov	arg03, #1
0669c     00 18 06 F6 | 	mov	arg04, #0
066a0                 | '     return fill(addr, pattern, count, listPtr, 4)
066a0     04 1A 06 F6 | 	mov	arg05, #4
066a4     18 3C 62 FD | 	getqx	local16
066a8     1E 3F 82 F1 | 	sub	local17, local16
066ac     10 3E 86 F1 | 	sub	local17, #16
066b0     F2 3E 62 FC | 	wrlong	local17, objptr
066b4     1F 13 02 F6 | 	mov	arg01, local17
066b8     46 00 00 FF 
066bc     7C E5 85 F1 | 	sub	objptr, ##36220
066c0     48 E7 B0 FD | 	call	#_psram_spin2_fill
066c4     1F 13 02 F6 | 	mov	arg01, local17
066c8     02 12 06 F1 | 	add	arg01, #2
066cc     1D 15 02 F6 | 	mov	arg02, local15
066d0     01 16 06 F6 | 	mov	arg03, #1
066d4     00 18 06 F6 | 	mov	arg04, #0
066d8                 | '     return fill(addr, pattern, count, listPtr, 1)
066d8     01 1A 06 F6 | 	mov	arg05, #1
066dc     2C E7 B0 FD | 	call	#_psram_spin2_fill
066e0     1F 13 02 F6 | 	mov	arg01, local17
066e4     04 12 06 F1 | 	add	arg01, #4
066e8     0F 15 02 F6 | 	mov	arg02, local01
066ec     01 16 06 F6 | 	mov	arg03, #1
066f0     00 18 06 F6 | 	mov	arg04, #0
066f4                 | '     return fill(addr, pattern, count, listPtr, 4)
066f4     04 1A 06 F6 | 	mov	arg05, #4
066f8     10 E7 B0 FD | 	call	#_psram_spin2_fill
066fc     1F 13 02 F6 | 	mov	arg01, local17
06700     08 12 06 F1 | 	add	arg01, #8
06704     10 15 02 F6 | 	mov	arg02, local02
06708     01 16 06 F6 | 	mov	arg03, #1
0670c     00 18 06 F6 | 	mov	arg04, #0
06710                 | '     return fill(addr, pattern, count, listPtr, 4)
06710     04 1A 06 F6 | 	mov	arg05, #4
06714     F4 E6 B0 FD | 	call	#_psram_spin2_fill
06718     1F 13 02 F6 | 	mov	arg01, local17
0671c     0C 12 06 F1 | 	add	arg01, #12
06720     11 15 02 F6 | 	mov	arg02, local03
06724     01 16 06 F6 | 	mov	arg03, #1
06728     00 18 06 F6 | 	mov	arg04, #0
0672c                 | '     return fill(addr, pattern, count, listPtr, 4)
0672c     04 1A 06 F6 | 	mov	arg05, #4
06730     D8 E6 B0 FD | 	call	#_psram_spin2_fill
06734     20 00 00 FF 
06738     0C E5 05 F1 | 	add	objptr, ##16652
0673c     F2 24 02 FB | 	rdlong	local04, objptr
06740     04 24 66 F0 | 	shl	local04, #4
06744     20 00 00 FF 
06748     00 E4 85 F1 | 	sub	objptr, ##16384
0674c     F2 24 02 F1 | 	add	local04, objptr
06750     12 27 62 FC | 	wrlong	local05, local04
06754     20 00 00 FF 
06758     00 E4 05 F1 | 	add	objptr, ##16384
0675c     F2 24 02 FB | 	rdlong	local04, objptr
06760     04 24 66 F0 | 	shl	local04, #4
06764     20 00 00 FF 
06768     00 E4 85 F1 | 	sub	objptr, ##16384
0676c     F2 24 02 F1 | 	add	local04, objptr
06770     04 24 06 F1 | 	add	local04, #4
06774     12 3F 62 FC | 	wrlong	local17, local04
06778     20 00 00 FF 
0677c     00 E4 05 F1 | 	add	objptr, ##16384
06780     F2 24 02 FB | 	rdlong	local04, objptr
06784     04 24 66 F0 | 	shl	local04, #4
06788     20 00 00 FF 
0678c     00 E4 85 F1 | 	sub	objptr, ##16384
06790     F2 24 02 F1 | 	add	local04, objptr
06794     0C 24 06 F1 | 	add	local04, #12
06798     12 39 62 FC | 	wrlong	local14, local04
0679c     20 00 00 FF 
067a0     00 E4 05 F1 | 	add	objptr, ##16384
067a4     F2 2A 02 FB | 	rdlong	local07, objptr
067a8     01 2A 06 F1 | 	add	local07, #1
067ac     F2 2A 62 FC | 	wrlong	local07, objptr
067b0     2B 00 00 FF 
067b4     CC E5 85 F1 | 	sub	objptr, ##22476
067b8                 | ' 'print dims(0),dims(1),dims(2),arraytype
067b8                 | ' 
067b8                 | ' arraysize=esize*dims(0)*dims(1)*dims(2)
067b8                 | ' arrayptr=memtop-arraysize-16
067b8                 | ' memtop=arrayptr
067b8                 | ' 
067b8                 | ' pslpoke arrayptr,arraytype
067b8                 | ' pspoke arrayptr+2,esize
067b8                 | ' pslpoke arrayptr+4,dims(0)
067b8                 | ' pslpoke arrayptr+8,dims(1)
067b8                 | ' pslpoke arrayptr+12,dims(2)
067b8                 | ' 
067b8                 | ' variables(varnum).name=varname2$
067b8                 | ' variables(varnum).value.uresult=arrayptr
067b8                 | ' variables(varnum).vartype=arraytype
067b8                 | ' varnum+=1
067b8                 | ' 
067b8                 | ' return 0
067b8     00 FA 05 F6 | 	mov	result1, #0
067bc                 | LR__0566
067bc     A7 F0 03 F6 | 	mov	ptra, fp
067c0     B2 00 A0 FD | 	call	#popregs_
067c4                 | _compile_dim_ret
067c4     2D 00 64 FD | 	ret
067c8                 | 
067c8                 | ' 
067c8                 | ' 
067c8                 | ' function compile_for() as ulong  
067c8                 | _compile_for
067c8     07 4A 05 F6 | 	mov	COUNT_, #7
067cc     A8 00 A0 FD | 	call	#pushregs_
067d0                 | ' 
067d0                 | ' 
067d0                 | ' 
067d0                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
067d0     2E 00 00 FF 
067d4     08 E4 05 F1 | 	add	objptr, ##23560
067d8     F2 14 02 FB | 	rdlong	arg02, objptr
067dc     01 14 06 F1 | 	add	arg02, #1
067e0     03 14 66 F0 | 	shl	arg02, #3
067e4     02 00 00 FF 
067e8     38 E4 85 F1 | 	sub	objptr, ##1080
067ec     F2 14 02 F1 | 	add	arg02, objptr
067f0     0A 13 02 FB | 	rdlong	arg01, arg02
067f4     2B 00 00 FF 
067f8     D0 E5 85 F1 | 	sub	objptr, ##22480
067fc                 | ' 
067fc                 | ' select case s
067fc     25 01 00 FF 
06800     16 15 06 F6 | 	mov	arg02, ##@LR__4184
06804     E0 EF B0 FD | 	call	#__system___string_cmp
06808     00 FA 0D F2 | 	cmp	result1, #0 wz
0680c     1B FA 05 A6 |  if_e	mov	result1, #27
06810     00 FA 05 56 |  if_ne	mov	result1, #0
06814     00 FA 0D F2 | 	cmp	result1, #0 wz
06818     0C 00 90 AD |  if_e	jmp	#LR__0570
0681c     05 12 06 F6 | 	mov	arg01, #5
06820     A4 E3 BF FD | 	call	#_compile_immediate_assign
06824     10 00 90 FD | 	jmp	#LR__0571
06828                 | LR__0570
06828     20 12 06 F6 | 	mov	arg01, #32
0682c     14 E8 BF FD | 	call	#_compile_error
06830     20 FA 05 F6 | 	mov	result1, #32
06834     AC 02 90 FD | 	jmp	#LR__0576
06838                 | LR__0571
06838     41 00 00 FF 
0683c     40 E4 05 F1 | 	add	objptr, ##33344
06840     F2 12 02 FB | 	rdlong	arg01, objptr
06844     09 25 02 F6 | 	mov	local04, arg01
06848     01 24 86 F1 | 	sub	local04, #1
0684c     12 15 02 F6 | 	mov	arg02, local04
06850     01 14 66 F0 | 	shl	arg02, #1
06854     12 15 02 F1 | 	add	arg02, local04
06858     02 14 66 F0 | 	shl	arg02, #2
0685c     03 00 00 FF 
06860     00 E4 85 F1 | 	sub	objptr, ##1536
06864     F2 14 02 F1 | 	add	arg02, objptr
06868     0A 1F 02 FB | 	rdlong	local01, arg02
0686c     04 14 06 F1 | 	add	arg02, #4
06870     0A 27 02 FB | 	rdlong	local05, arg02
06874     01 12 86 F1 | 	sub	arg01, #1
06878     09 29 02 F6 | 	mov	local06, arg01
0687c     01 28 66 F0 | 	shl	local06, #1
06880     09 29 02 F1 | 	add	local06, arg01
06884     02 28 66 F0 | 	shl	local06, #2
06888     F2 28 02 F1 | 	add	local06, objptr
0688c     08 28 06 F1 | 	add	local06, #8
06890     14 13 02 FB | 	rdlong	arg01, local06
06894     13 21 02 F6 | 	mov	local02, local05
06898     09 23 02 F6 | 	mov	local03, arg01
0689c                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
0689c                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
0689c     17 22 0E F2 | 	cmp	local03, #23 wz
068a0     3E 00 00 FF 
068a4     40 E4 85 F1 | 	sub	objptr, ##31808
068a8     10 00 90 AD |  if_e	jmp	#LR__0572
068ac     22 12 06 F6 | 	mov	arg01, #34
068b0     90 E7 BF FD | 	call	#_compile_error
068b4     22 FA 05 F6 | 	mov	result1, #34
068b8     28 02 90 FD | 	jmp	#LR__0576
068bc                 | LR__0572
068bc     0F 2B 02 F6 | 	mov	local07, local01
068c0                 | ' varnum=t1.result.uresult
068c0                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
068c0     2E 00 00 FF 
068c4     08 E4 05 F1 | 	add	objptr, ##23560
068c8     F2 24 02 FB | 	rdlong	local04, objptr
068cc     03 24 66 F0 | 	shl	local04, #3
068d0     02 00 00 FF 
068d4     38 E4 85 F1 | 	sub	objptr, ##1080
068d8     F2 24 02 F1 | 	add	local04, objptr
068dc     12 13 02 FB | 	rdlong	arg01, local04
068e0     26 01 00 FF 
068e4     49 15 06 F6 | 	mov	arg02, ##@LR__4314
068e8     2B 00 00 FF 
068ec     D0 E5 85 F1 | 	sub	objptr, ##22480
068f0     F4 EE B0 FD | 	call	#__system___string_cmp
068f4     00 FA 0D F2 | 	cmp	result1, #0 wz
068f8     10 00 90 AD |  if_e	jmp	#LR__0573
068fc     21 12 06 F6 | 	mov	arg01, #33
06900     40 E7 BF FD | 	call	#_compile_error
06904     21 FA 05 F6 | 	mov	result1, #33
06908     D8 01 90 FD | 	jmp	#LR__0576
0690c                 | LR__0573
0690c     2E 00 00 FF 
06910     08 E4 05 F1 | 	add	objptr, ##23560
06914     F2 28 02 FB | 	rdlong	local06, objptr
06918     01 28 06 F1 | 	add	local06, #1
0691c     F2 28 62 FC | 	wrlong	local06, objptr
06920     2E 00 00 FF 
06924     08 E4 85 F1 | 	sub	objptr, ##23560
06928     98 0B B0 FD | 	call	#_expr
0692c                 | ' ct+=1
0692c                 | ' expr()  ' there is "to" value pushed on the stack
0692c                 | ' if lparts(ct).part$="step" then 
0692c     2E 00 00 FF 
06930     08 E4 05 F1 | 	add	objptr, ##23560
06934     F2 24 02 FB | 	rdlong	local04, objptr
06938     03 24 66 F0 | 	shl	local04, #3
0693c     02 00 00 FF 
06940     38 E4 85 F1 | 	sub	objptr, ##1080
06944     F2 24 02 F1 | 	add	local04, objptr
06948     12 13 02 FB | 	rdlong	arg01, local04
0694c     26 01 00 FF 
06950     4C 15 06 F6 | 	mov	arg02, ##@LR__4315
06954     2B 00 00 FF 
06958     D0 E5 85 F1 | 	sub	objptr, ##22480
0695c     88 EE B0 FD | 	call	#__system___string_cmp
06960     00 FA 0D F2 | 	cmp	result1, #0 wz
06964     24 00 90 5D |  if_ne	jmp	#LR__0574
06968     2E 00 00 FF 
0696c     08 E4 05 F1 | 	add	objptr, ##23560
06970     F2 28 02 FB | 	rdlong	local06, objptr
06974     01 28 06 F1 | 	add	local06, #1
06978     F2 28 62 FC | 	wrlong	local06, objptr
0697c     2E 00 00 FF 
06980     08 E4 85 F1 | 	sub	objptr, ##23560
06984     3C 0B B0 FD | 	call	#_expr
06988     78 00 90 FD | 	jmp	#LR__0575
0698c                 | LR__0574
0698c     41 00 00 FF 
06990     40 E4 05 F1 | 	add	objptr, ##33344
06994     F2 28 02 FB | 	rdlong	local06, objptr
06998     14 27 02 F6 | 	mov	local05, local06
0699c     01 26 66 F0 | 	shl	local05, #1
069a0     14 27 02 F1 | 	add	local05, local06
069a4     02 26 66 F0 | 	shl	local05, #2
069a8     03 00 00 FF 
069ac     00 E4 85 F1 | 	sub	objptr, ##1536
069b0     F2 26 02 F1 | 	add	local05, objptr
069b4     08 26 06 F1 | 	add	local05, #8
069b8     13 39 68 FC | 	wrlong	#28, local05
069bc     03 00 00 FF 
069c0     00 E4 05 F1 | 	add	objptr, ##1536
069c4     F2 28 02 FB | 	rdlong	local06, objptr
069c8     14 27 02 F6 | 	mov	local05, local06
069cc     01 26 66 F0 | 	shl	local05, #1
069d0     14 27 02 F1 | 	add	local05, local06
069d4     02 26 66 F0 | 	shl	local05, #2
069d8     03 00 00 FF 
069dc     00 E4 85 F1 | 	sub	objptr, ##1536
069e0     F2 26 02 F1 | 	add	local05, objptr
069e4     13 03 68 FC | 	wrlong	#1, local05
069e8     03 00 00 FF 
069ec     00 E4 05 F1 | 	add	objptr, ##1536
069f0     F2 28 02 FB | 	rdlong	local06, objptr
069f4     01 28 06 F1 | 	add	local06, #1
069f8     F2 28 62 FC | 	wrlong	local06, objptr
069fc     41 00 00 FF 
06a00     40 E4 85 F1 | 	sub	objptr, ##33344
06a04                 | LR__0575
06a04     41 00 00 FF 
06a08     40 E4 05 F1 | 	add	objptr, ##33344
06a0c     F2 28 02 FB | 	rdlong	local06, objptr
06a10     14 27 02 F6 | 	mov	local05, local06
06a14     01 26 66 F0 | 	shl	local05, #1
06a18     14 27 02 F1 | 	add	local05, local06
06a1c     02 26 66 F0 | 	shl	local05, #2
06a20     03 00 00 FF 
06a24     00 E4 85 F1 | 	sub	objptr, ##1536
06a28     F2 26 02 F1 | 	add	local05, objptr
06a2c     08 26 06 F1 | 	add	local05, #8
06a30     13 39 68 FC | 	wrlong	#28, local05
06a34     03 00 00 FF 
06a38     00 E4 05 F1 | 	add	objptr, ##1536
06a3c     F2 28 02 FB | 	rdlong	local06, objptr
06a40     14 27 02 F6 | 	mov	local05, local06
06a44     01 26 66 F0 | 	shl	local05, #1
06a48     14 27 02 F1 | 	add	local05, local06
06a4c     02 26 66 F0 | 	shl	local05, #2
06a50     03 00 00 FF 
06a54     00 E4 85 F1 | 	sub	objptr, ##1536
06a58     F2 26 02 F1 | 	add	local05, objptr
06a5c     13 2B 62 FC | 	wrlong	local07, local05
06a60     03 00 00 FF 
06a64     00 E4 05 F1 | 	add	objptr, ##1536
06a68     F2 2A 02 FB | 	rdlong	local07, objptr
06a6c     01 2A 06 F1 | 	add	local07, #1
06a70     F2 2A 62 FC | 	wrlong	local07, objptr
06a74     15 29 02 F6 | 	mov	local06, local07
06a78     01 28 66 F0 | 	shl	local06, #1
06a7c     15 29 02 F1 | 	add	local06, local07
06a80     02 28 66 F0 | 	shl	local06, #2
06a84     03 00 00 FF 
06a88     00 E4 85 F1 | 	sub	objptr, ##1536
06a8c     F2 28 02 F1 | 	add	local06, objptr
06a90     08 28 06 F1 | 	add	local06, #8
06a94     14 95 68 FC | 	wrlong	#74, local06
06a98     03 00 00 FF 
06a9c     00 E4 05 F1 | 	add	objptr, ##1536
06aa0     F2 2A 02 FB | 	rdlong	local07, objptr
06aa4     15 29 02 F6 | 	mov	local06, local07
06aa8     01 28 66 F0 | 	shl	local06, #1
06aac     15 29 02 F1 | 	add	local06, local07
06ab0     02 28 66 F0 | 	shl	local06, #2
06ab4     03 00 00 FF 
06ab8     00 E4 85 F1 | 	sub	objptr, ##1536
06abc     F2 28 02 F1 | 	add	local06, objptr
06ac0     14 01 68 FC | 	wrlong	#0, local06
06ac4     03 00 00 FF 
06ac8     00 E4 05 F1 | 	add	objptr, ##1536
06acc     F2 2A 02 FB | 	rdlong	local07, objptr
06ad0     01 2A 06 F1 | 	add	local07, #1
06ad4     F2 2A 62 FC | 	wrlong	local07, objptr
06ad8     41 00 00 FF 
06adc     40 E4 85 F1 | 	sub	objptr, ##33344
06ae0                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
06ae0                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
06ae0                 | ' 
06ae0                 | ' 
06ae0                 | ' return 0
06ae0     00 FA 05 F6 | 	mov	result1, #0
06ae4                 | LR__0576
06ae4     A7 F0 03 F6 | 	mov	ptra, fp
06ae8     B2 00 A0 FD | 	call	#popregs_
06aec                 | _compile_for_ret
06aec     2D 00 64 FD | 	ret
06af0                 | 
06af0                 | ' 
06af0                 | ' 
06af0                 | ' sub do_for()
06af0                 | _do_for
06af0     05 4A 05 F6 | 	mov	COUNT_, #5
06af4     A8 00 A0 FD | 	call	#pushregs_
06af8     50 00 00 FF 
06afc     9C E5 05 F1 | 	add	objptr, ##41372
06b00     F2 24 02 FB | 	rdlong	local04, objptr
06b04     01 24 06 F1 | 	add	local04, #1
06b08     F2 24 62 FC | 	wrlong	local04, objptr
06b0c     50 00 00 FF 
06b10     9C E5 85 F1 | 	sub	objptr, ##41372
06b14     5C 1E B0 FD | 	call	#_pop
06b18     FD 1E 02 F6 | 	mov	local01, result1
06b1c     FE 20 02 F6 | 	mov	local02, result2
06b20     FF 22 02 F6 | 	mov	local03, result3
06b24     50 00 00 FF 
06b28     9C E5 05 F1 | 	add	objptr, ##41372
06b2c     F2 24 02 FB | 	rdlong	local04, objptr
06b30     12 27 02 F6 | 	mov	local05, local04
06b34     02 26 66 F0 | 	shl	local05, #2
06b38     12 27 02 F1 | 	add	local05, local04
06b3c     02 26 66 F0 | 	shl	local05, #2
06b40     07 00 00 FF 
06b44     40 E5 85 F1 | 	sub	objptr, ##3904
06b48     F2 26 02 F1 | 	add	local05, objptr
06b4c     08 26 06 F1 | 	add	local05, #8
06b50     13 1F 62 FC | 	wrlong	local01, local05
06b54     49 00 00 FF 
06b58     5C E4 85 F1 | 	sub	objptr, ##37468
06b5c     14 1E B0 FD | 	call	#_pop
06b60     FD 1E 02 F6 | 	mov	local01, result1
06b64     FE 20 02 F6 | 	mov	local02, result2
06b68     FF 22 02 F6 | 	mov	local03, result3
06b6c     50 00 00 FF 
06b70     9C E5 05 F1 | 	add	objptr, ##41372
06b74     F2 24 02 FB | 	rdlong	local04, objptr
06b78     12 27 02 F6 | 	mov	local05, local04
06b7c     02 26 66 F0 | 	shl	local05, #2
06b80     12 27 02 F1 | 	add	local05, local04
06b84     02 26 66 F0 | 	shl	local05, #2
06b88     07 00 00 FF 
06b8c     40 E5 85 F1 | 	sub	objptr, ##3904
06b90     F2 26 02 F1 | 	add	local05, objptr
06b94     0C 26 06 F1 | 	add	local05, #12
06b98     13 1F 62 FC | 	wrlong	local01, local05
06b9c     49 00 00 FF 
06ba0     5C E4 85 F1 | 	sub	objptr, ##37468
06ba4     CC 1D B0 FD | 	call	#_pop
06ba8     FD 1E 02 F6 | 	mov	local01, result1
06bac     FE 20 02 F6 | 	mov	local02, result2
06bb0     FF 22 02 F6 | 	mov	local03, result3
06bb4     50 00 00 FF 
06bb8     9C E5 05 F1 | 	add	objptr, ##41372
06bbc     F2 24 02 FB | 	rdlong	local04, objptr
06bc0     12 27 02 F6 | 	mov	local05, local04
06bc4     02 26 66 F0 | 	shl	local05, #2
06bc8     12 27 02 F1 | 	add	local05, local04
06bcc     02 26 66 F0 | 	shl	local05, #2
06bd0     07 00 00 FF 
06bd4     40 E5 85 F1 | 	sub	objptr, ##3904
06bd8     F2 26 02 F1 | 	add	local05, objptr
06bdc     10 26 06 F1 | 	add	local05, #16
06be0     13 1F 62 FC | 	wrlong	local01, local05
06be4                 | ' fortop+=1
06be4                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
06be4                 | ' 'if i> maxfor then printerror(36) : return
06be4                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
06be4                 | ' t1=pop() : fortable(fortop).stepval=t1.result.iresult
06be4                 | ' t1=pop() : fortable(fortop).endval=t1.result.iresult
06be4                 | ' if compiledline(lineptr_e).result_type=token_end then
06be4     08 00 00 FF 
06be8     18 E4 85 F1 | 	sub	objptr, ##4120
06bec     F2 1E 02 FB | 	rdlong	local01, objptr
06bf0     0F 27 02 F6 | 	mov	local05, local01
06bf4     01 26 66 F0 | 	shl	local05, #1
06bf8     0F 27 02 F1 | 	add	local05, local01
06bfc     02 26 66 F0 | 	shl	local05, #2
06c00     03 00 00 FF 
06c04     04 E4 85 F1 | 	sub	objptr, ##1540
06c08     F2 26 02 F1 | 	add	local05, objptr
06c0c     08 26 06 F1 | 	add	local05, #8
06c10     13 27 02 FB | 	rdlong	local05, local05
06c14     FE 27 0E F2 | 	cmp	local05, #510 wz
06c18     3E 00 00 FF 
06c1c     40 E4 85 F1 | 	sub	objptr, ##31808
06c20     70 00 90 5D |  if_ne	jmp	#LR__0580
06c24     50 00 00 FF 
06c28     9C E5 05 F1 | 	add	objptr, ##41372
06c2c     F2 1E 02 FB | 	rdlong	local01, objptr
06c30     0F 27 02 F6 | 	mov	local05, local01
06c34     02 26 66 F0 | 	shl	local05, #2
06c38     0F 27 02 F1 | 	add	local05, local01
06c3c     02 26 66 F0 | 	shl	local05, #2
06c40     07 00 00 FF 
06c44     40 E5 85 F1 | 	sub	objptr, ##3904
06c48     F2 26 02 F1 | 	add	local05, objptr
06c4c     07 00 00 FF 
06c50     18 E5 05 F1 | 	add	objptr, ##3864
06c54     F2 1E 02 FB | 	rdlong	local01, objptr
06c58     13 1F 62 FC | 	wrlong	local01, local05
06c5c     28 E4 05 F1 | 	add	objptr, #40
06c60     F2 1E 02 FB | 	rdlong	local01, objptr
06c64     0F 27 02 F6 | 	mov	local05, local01
06c68     02 26 66 F0 | 	shl	local05, #2
06c6c     0F 27 02 F1 | 	add	local05, local01
06c70     02 26 66 F0 | 	shl	local05, #2
06c74     07 00 00 FF 
06c78     40 E5 85 F1 | 	sub	objptr, ##3904
06c7c     F2 26 02 F1 | 	add	local05, objptr
06c80     04 26 06 F1 | 	add	local05, #4
06c84     13 01 68 FC | 	wrlong	#0, local05
06c88     49 00 00 FF 
06c8c     5C E4 85 F1 | 	sub	objptr, ##37468
06c90     7C 00 90 FD | 	jmp	#LR__0581
06c94                 | LR__0580
06c94     50 00 00 FF 
06c98     9C E5 05 F1 | 	add	objptr, ##41372
06c9c     F2 1E 02 FB | 	rdlong	local01, objptr
06ca0     0F 27 02 F6 | 	mov	local05, local01
06ca4     02 26 66 F0 | 	shl	local05, #2
06ca8     0F 27 02 F1 | 	add	local05, local01
06cac     02 26 66 F0 | 	shl	local05, #2
06cb0     07 00 00 FF 
06cb4     40 E5 85 F1 | 	sub	objptr, ##3904
06cb8     F2 26 02 F1 | 	add	local05, objptr
06cbc     07 00 00 FF 
06cc0     20 E5 05 F1 | 	add	objptr, ##3872
06cc4     F2 1E 02 FB | 	rdlong	local01, objptr
06cc8     13 1F 62 FC | 	wrlong	local01, local05
06ccc     20 E4 05 F1 | 	add	objptr, #32
06cd0     F2 1E 02 FB | 	rdlong	local01, objptr
06cd4     0F 27 02 F6 | 	mov	local05, local01
06cd8     02 26 66 F0 | 	shl	local05, #2
06cdc     0F 27 02 F1 | 	add	local05, local01
06ce0     02 26 66 F0 | 	shl	local05, #2
06ce4     07 00 00 FF 
06ce8     40 E5 85 F1 | 	sub	objptr, ##3904
06cec     F2 26 02 F1 | 	add	local05, objptr
06cf0     08 00 00 FF 
06cf4     18 E4 85 F1 | 	sub	objptr, ##4120
06cf8     F2 1E 02 FB | 	rdlong	local01, objptr
06cfc     41 00 00 FF 
06d00     44 E4 85 F1 | 	sub	objptr, ##33348
06d04     01 1E 06 F1 | 	add	local01, #1
06d08     04 26 06 F1 | 	add	local05, #4
06d0c     13 1F 62 FC | 	wrlong	local01, local05
06d10                 | LR__0581
06d10     A7 F0 03 F6 | 	mov	ptra, fp
06d14     B2 00 A0 FD | 	call	#popregs_
06d18                 | _do_for_ret
06d18     2D 00 64 FD | 	ret
06d1c                 | 
06d1c                 | ' 
06d1c                 | ' ' now do_next todo
06d1c                 | ' 
06d1c                 | ' sub do_next()
06d1c                 | _do_next
06d1c     04 4A 05 F6 | 	mov	COUNT_, #4
06d20     A8 00 A0 FD | 	call	#pushregs_
06d24     4C 1C B0 FD | 	call	#_pop
06d28     FD 1E 02 F6 | 	mov	local01, result1
06d2c     FE 20 02 F6 | 	mov	local02, result2
06d30     FF 22 02 F6 | 	mov	local03, result3
06d34                 | ' 
06d34                 | ' t1=pop() :varnum=t1.result.uresult
06d34                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
06d34     50 00 00 FF 
06d38     9C E5 05 F1 | 	add	objptr, ##41372
06d3c     F2 12 02 FB | 	rdlong	arg01, objptr
06d40     09 25 02 F6 | 	mov	local04, arg01
06d44     02 24 66 F0 | 	shl	local04, #2
06d48     09 25 02 F1 | 	add	local04, arg01
06d4c     02 24 66 F0 | 	shl	local04, #2
06d50     07 00 00 FF 
06d54     40 E5 85 F1 | 	sub	objptr, ##3904
06d58     F2 24 02 F1 | 	add	local04, objptr
06d5c     08 24 06 F1 | 	add	local04, #8
06d60     12 25 02 FB | 	rdlong	local04, local04
06d64     0F 25 0A F2 | 	cmp	local04, local01 wz
06d68     49 00 00 FF 
06d6c     5C E4 85 F1 | 	sub	objptr, ##37468
06d70     0C 00 90 AD |  if_e	jmp	#LR__0590
06d74     25 12 06 F6 | 	mov	arg01, #37
06d78     48 B5 B0 FD | 	call	#_printerror
06d7c     28 02 90 FD | 	jmp	#LR__0594
06d80                 | LR__0590
06d80     50 00 00 FF 
06d84     9C E5 05 F1 | 	add	objptr, ##41372
06d88     F2 12 02 FB | 	rdlong	arg01, objptr
06d8c     09 25 02 F6 | 	mov	local04, arg01
06d90     02 24 66 F0 | 	shl	local04, #2
06d94     09 25 02 F1 | 	add	local04, arg01
06d98     02 24 66 F0 | 	shl	local04, #2
06d9c     07 00 00 FF 
06da0     40 E5 85 F1 | 	sub	objptr, ##3904
06da4     F2 24 02 F1 | 	add	local04, objptr
06da8     0C 24 06 F1 | 	add	local04, #12
06dac     12 25 02 FB | 	rdlong	local04, local04
06db0     0F 13 02 F6 | 	mov	arg01, local01
06db4     04 12 66 F0 | 	shl	arg01, #4
06db8     3D 00 00 FF 
06dbc     90 E4 85 F1 | 	sub	objptr, ##31376
06dc0     F2 12 02 F1 | 	add	arg01, objptr
06dc4     0F FF 01 F6 | 	mov	result3, local01
06dc8     04 FE 65 F0 | 	shl	result3, #4
06dcc     F2 FE 01 F1 | 	add	result3, objptr
06dd0     04 FE 05 F1 | 	add	result3, #4
06dd4     FF FE 01 FB | 	rdlong	result3, result3
06dd8     12 FF 01 F1 | 	add	result3, local04
06ddc     04 12 06 F1 | 	add	arg01, #4
06de0     09 FF 61 FC | 	wrlong	result3, arg01
06de4                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
06de4                 | ' if fortable(fortop).stepval>0 then
06de4     44 00 00 FF 
06de8     D0 E5 05 F1 | 	add	objptr, ##35280
06dec     F2 12 02 FB | 	rdlong	arg01, objptr
06df0     09 25 02 F6 | 	mov	local04, arg01
06df4     02 24 66 F0 | 	shl	local04, #2
06df8     09 25 02 F1 | 	add	local04, arg01
06dfc     02 24 66 F0 | 	shl	local04, #2
06e00     07 00 00 FF 
06e04     40 E5 85 F1 | 	sub	objptr, ##3904
06e08     F2 24 02 F1 | 	add	local04, objptr
06e0c     0C 24 06 F1 | 	add	local04, #12
06e10     12 25 02 FB | 	rdlong	local04, local04
06e14     01 24 56 F2 | 	cmps	local04, #1 wc
06e18     49 00 00 FF 
06e1c     5C E4 85 F1 | 	sub	objptr, ##37468
06e20     78 00 90 CD |  if_b	jmp	#LR__0591
06e24                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
06e24     04 1E 66 F0 | 	shl	local01, #4
06e28     0B 00 00 FF 
06e2c     CC E5 05 F1 | 	add	objptr, ##6092
06e30     F2 1E 02 F1 | 	add	local01, objptr
06e34     44 00 00 FF 
06e38     D0 E5 05 F1 | 	add	objptr, ##35280
06e3c     F2 24 02 FB | 	rdlong	local04, objptr
06e40     12 13 02 F6 | 	mov	arg01, local04
06e44     02 12 66 F0 | 	shl	arg01, #2
06e48     12 13 02 F1 | 	add	arg01, local04
06e4c     02 12 66 F0 | 	shl	arg01, #2
06e50     07 00 00 FF 
06e54     40 E5 85 F1 | 	sub	objptr, ##3904
06e58     F2 12 02 F1 | 	add	arg01, objptr
06e5c     04 1E 06 F1 | 	add	local01, #4
06e60     0F 25 02 FB | 	rdlong	local04, local01
06e64     10 12 06 F1 | 	add	arg01, #16
06e68     09 13 02 FB | 	rdlong	arg01, arg01
06e6c     09 25 5A F2 | 	cmps	local04, arg01 wcz
06e70     49 00 00 FF 
06e74     5C E4 85 F1 | 	sub	objptr, ##37468
06e78     9C 00 90 ED |  if_be	jmp	#LR__0593
06e7c     50 00 00 FF 
06e80     9C E5 05 F1 | 	add	objptr, ##41372
06e84     F2 24 02 FB | 	rdlong	local04, objptr
06e88     01 24 86 F1 | 	sub	local04, #1
06e8c     F2 24 62 FC | 	wrlong	local04, objptr
06e90     50 00 00 FF 
06e94     9C E5 85 F1 | 	sub	objptr, ##41372
06e98     0C 01 90 FD | 	jmp	#LR__0594
06e9c                 | LR__0591
06e9c                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
06e9c     0F 13 02 F6 | 	mov	arg01, local01
06ea0     04 12 66 F0 | 	shl	arg01, #4
06ea4     0B 00 00 FF 
06ea8     CC E5 05 F1 | 	add	objptr, ##6092
06eac     F2 12 02 F1 | 	add	arg01, objptr
06eb0     44 00 00 FF 
06eb4     D0 E5 05 F1 | 	add	objptr, ##35280
06eb8     F2 24 02 FB | 	rdlong	local04, objptr
06ebc     12 1F 02 F6 | 	mov	local01, local04
06ec0     02 1E 66 F0 | 	shl	local01, #2
06ec4     12 1F 02 F1 | 	add	local01, local04
06ec8     02 1E 66 F0 | 	shl	local01, #2
06ecc     07 00 00 FF 
06ed0     40 E5 85 F1 | 	sub	objptr, ##3904
06ed4     F2 1E 02 F1 | 	add	local01, objptr
06ed8     04 12 06 F1 | 	add	arg01, #4
06edc     09 13 02 FB | 	rdlong	arg01, arg01
06ee0     10 1E 06 F1 | 	add	local01, #16
06ee4     0F 1F 02 FB | 	rdlong	local01, local01
06ee8     0F 13 52 F2 | 	cmps	arg01, local01 wc
06eec     49 00 00 FF 
06ef0     5C E4 85 F1 | 	sub	objptr, ##37468
06ef4     20 00 90 3D |  if_ae	jmp	#LR__0592
06ef8     50 00 00 FF 
06efc     9C E5 05 F1 | 	add	objptr, ##41372
06f00     F2 24 02 FB | 	rdlong	local04, objptr
06f04     01 24 86 F1 | 	sub	local04, #1
06f08     F2 24 62 FC | 	wrlong	local04, objptr
06f0c     50 00 00 FF 
06f10     9C E5 85 F1 | 	sub	objptr, ##41372
06f14     90 00 90 FD | 	jmp	#LR__0594
06f18                 | LR__0592
06f18                 | LR__0593
06f18     50 00 00 FF 
06f1c     9C E5 05 F1 | 	add	objptr, ##41372
06f20     F2 1E 02 FB | 	rdlong	local01, objptr
06f24     0F 25 02 F6 | 	mov	local04, local01
06f28     02 24 66 F0 | 	shl	local04, #2
06f2c     0F 25 02 F1 | 	add	local04, local01
06f30     02 24 66 F0 | 	shl	local04, #2
06f34     07 00 00 FF 
06f38     40 E5 85 F1 | 	sub	objptr, ##3904
06f3c     F2 24 02 F1 | 	add	local04, objptr
06f40     12 25 02 FB | 	rdlong	local04, local04
06f44     07 00 00 FF 
06f48     18 E5 05 F1 | 	add	objptr, ##3864
06f4c     F2 24 62 FC | 	wrlong	local04, objptr
06f50     28 E4 05 F1 | 	add	objptr, #40
06f54     F2 1E 02 FB | 	rdlong	local01, objptr
06f58     0F 25 02 F6 | 	mov	local04, local01
06f5c     02 24 66 F0 | 	shl	local04, #2
06f60     0F 25 02 F1 | 	add	local04, local01
06f64     02 24 66 F0 | 	shl	local04, #2
06f68     07 00 00 FF 
06f6c     40 E5 85 F1 | 	sub	objptr, ##3904
06f70     F2 24 02 F1 | 	add	local04, objptr
06f74     04 24 06 F1 | 	add	local04, #4
06f78     12 25 02 FB | 	rdlong	local04, local04
06f7c     07 00 00 FF 
06f80     1C E5 05 F1 | 	add	objptr, ##3868
06f84     F2 24 62 FC | 	wrlong	local04, objptr
06f88     0F 00 00 FF 
06f8c     38 E5 85 F1 | 	sub	objptr, ##7992
06f90     F2 24 02 FB | 	rdlong	local04, objptr
06f94     01 24 86 F1 | 	sub	local04, #1
06f98     04 E4 05 F1 | 	add	objptr, #4
06f9c     F2 24 62 FC | 	wrlong	local04, objptr
06fa0     41 00 00 FF 
06fa4     44 E4 85 F1 | 	sub	objptr, ##33348
06fa8                 | LR__0594
06fa8     A7 F0 03 F6 | 	mov	ptra, fp
06fac     B2 00 A0 FD | 	call	#popregs_
06fb0                 | _do_next_ret
06fb0     2D 00 64 FD | 	ret
06fb4                 | 
06fb4                 | ' 
06fb4                 | ' 
06fb4                 | ' function compile_next() as ulong
06fb4                 | _compile_next
06fb4     04 4A 05 F6 | 	mov	COUNT_, #4
06fb8     A8 00 A0 FD | 	call	#pushregs_
06fbc     2E 00 00 FF 
06fc0     08 E4 05 F1 | 	add	objptr, ##23560
06fc4     F2 12 02 FB | 	rdlong	arg01, objptr
06fc8     03 12 66 F0 | 	shl	arg01, #3
06fcc     02 00 00 FF 
06fd0     38 E4 85 F1 | 	sub	objptr, ##1080
06fd4     F2 12 02 F1 | 	add	arg01, objptr
06fd8     09 1F 02 FB | 	rdlong	local01, arg01
06fdc                 | ' 
06fdc                 | ' varname$=lparts(ct).part$ 
06fdc                 | ' 'suffix$=right$(varname$,1)
06fdc                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
06fdc                 | ' if varnum=0 then compile_error(35)  : return 35
06fdc     04 E4 85 F1 | 	sub	objptr, #4
06fe0     F2 14 0A FB | 	rdlong	arg02, objptr wz
06fe4     2B 00 00 FF 
06fe8     CC E5 85 F1 | 	sub	objptr, ##22476
06fec     10 00 90 5D |  if_ne	jmp	#LR__0600
06ff0     23 12 06 F6 | 	mov	arg01, #35
06ff4     4C E0 BF FD | 	call	#_compile_error
06ff8     23 FA 05 F6 | 	mov	result1, #35
06ffc     58 01 90 FD | 	jmp	#LR__0604
07000                 | LR__0600
07000     01 20 66 F6 | 	neg	local02, #1
07004                 | ' j=-1
07004                 | ' for i=0 to varnum-1
07004     00 22 06 F6 | 	mov	local03, #0
07008     2B 00 00 FF 
0700c     CC E5 05 F1 | 	add	objptr, ##22476
07010     F2 24 02 FB | 	rdlong	local04, objptr
07014     2B 00 00 FF 
07018     CC E5 85 F1 | 	sub	objptr, ##22476
0701c                 | LR__0601
0701c     12 23 12 F2 | 	cmp	local03, local04 wc
07020     38 00 90 3D |  if_ae	jmp	#LR__0602
07024                 | '   if variables(i).name=varname$ then j=i : exit
07024     11 15 02 F6 | 	mov	arg02, local03
07028     04 14 66 F0 | 	shl	arg02, #4
0702c     0B 00 00 FF 
07030     CC E5 05 F1 | 	add	objptr, ##6092
07034     F2 14 02 F1 | 	add	arg02, objptr
07038     0A 13 02 FB | 	rdlong	arg01, arg02
0703c     0F 15 02 F6 | 	mov	arg02, local01
07040     0B 00 00 FF 
07044     CC E5 85 F1 | 	sub	objptr, ##6092
07048     9C E7 B0 FD | 	call	#__system___string_cmp
0704c     00 FA 0D F2 | 	cmp	result1, #0 wz
07050     11 21 02 A6 |  if_e	mov	local02, local03
07054     01 22 06 51 |  if_ne	add	local03, #1
07058     C0 FF 9F 5D |  if_ne	jmp	#LR__0601
0705c                 | LR__0602
0705c                 | ' if j=-1 then compile_error(35) : return 35
0705c     FF FF 7F FF 
07060     FF 21 0E F2 | 	cmp	local02, ##-1 wz
07064     10 00 90 5D |  if_ne	jmp	#LR__0603
07068     23 12 06 F6 | 	mov	arg01, #35
0706c     D4 DF BF FD | 	call	#_compile_error
07070     23 FA 05 F6 | 	mov	result1, #35
07074     E0 00 90 FD | 	jmp	#LR__0604
07078                 | LR__0603
07078     41 00 00 FF 
0707c     40 E4 05 F1 | 	add	objptr, ##33344
07080     F2 24 02 FB | 	rdlong	local04, objptr
07084     12 23 02 F6 | 	mov	local03, local04
07088     01 22 66 F0 | 	shl	local03, #1
0708c     12 23 02 F1 | 	add	local03, local04
07090     02 22 66 F0 | 	shl	local03, #2
07094     03 00 00 FF 
07098     00 E4 85 F1 | 	sub	objptr, ##1536
0709c     F2 22 02 F1 | 	add	local03, objptr
070a0     08 22 06 F1 | 	add	local03, #8
070a4     11 39 68 FC | 	wrlong	#28, local03
070a8     03 00 00 FF 
070ac     00 E4 05 F1 | 	add	objptr, ##1536
070b0     F2 24 02 FB | 	rdlong	local04, objptr
070b4     12 23 02 F6 | 	mov	local03, local04
070b8     01 22 66 F0 | 	shl	local03, #1
070bc     12 23 02 F1 | 	add	local03, local04
070c0     02 22 66 F0 | 	shl	local03, #2
070c4     03 00 00 FF 
070c8     00 E4 85 F1 | 	sub	objptr, ##1536
070cc     F2 22 02 F1 | 	add	local03, objptr
070d0     11 21 62 FC | 	wrlong	local02, local03
070d4     03 00 00 FF 
070d8     00 E4 05 F1 | 	add	objptr, ##1536
070dc     F2 24 02 FB | 	rdlong	local04, objptr
070e0     01 24 06 F1 | 	add	local04, #1
070e4     F2 24 62 FC | 	wrlong	local04, objptr
070e8     12 23 02 F6 | 	mov	local03, local04
070ec     01 22 66 F0 | 	shl	local03, #1
070f0     12 23 02 F1 | 	add	local03, local04
070f4     02 22 66 F0 | 	shl	local03, #2
070f8     03 00 00 FF 
070fc     00 E4 85 F1 | 	sub	objptr, ##1536
07100     F2 22 02 F1 | 	add	local03, objptr
07104     08 22 06 F1 | 	add	local03, #8
07108     11 97 68 FC | 	wrlong	#75, local03
0710c     03 00 00 FF 
07110     00 E4 05 F1 | 	add	objptr, ##1536
07114     F2 24 02 FB | 	rdlong	local04, objptr
07118     12 23 02 F6 | 	mov	local03, local04
0711c     01 22 66 F0 | 	shl	local03, #1
07120     12 23 02 F1 | 	add	local03, local04
07124     02 22 66 F0 | 	shl	local03, #2
07128     03 00 00 FF 
0712c     00 E4 85 F1 | 	sub	objptr, ##1536
07130     F2 22 02 F1 | 	add	local03, objptr
07134     11 01 68 FC | 	wrlong	#0, local03
07138     03 00 00 FF 
0713c     00 E4 05 F1 | 	add	objptr, ##1536
07140     F2 24 02 FB | 	rdlong	local04, objptr
07144     01 24 06 F1 | 	add	local04, #1
07148     F2 24 62 FC | 	wrlong	local04, objptr
0714c     41 00 00 FF 
07150     40 E4 85 F1 | 	sub	objptr, ##33344
07154                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
07154                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
07154                 | ' return 0
07154     00 FA 05 F6 | 	mov	result1, #0
07158                 | LR__0604
07158     A7 F0 03 F6 | 	mov	ptra, fp
0715c     B2 00 A0 FD | 	call	#popregs_
07160                 | _compile_next_ret
07160     2D 00 64 FD | 	ret
07164                 | 
07164                 | ' 
07164                 | ' 
07164                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
07164                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
07164                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
07164                 | ' 
07164                 | ' 
07164                 | ' function compile_goto( ) as ulong
07164                 | _compile_goto
07164     03 4A 05 F6 | 	mov	COUNT_, #3
07168     A8 00 A0 FD | 	call	#pushregs_
0716c     28 F0 07 F1 | 	add	ptra, #40
07170                 | ' 
07170                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
07170     2E 00 00 FF 
07174     08 E4 05 F1 | 	add	objptr, ##23560
07178     F2 16 02 FB | 	rdlong	arg03, objptr
0717c     03 16 66 F0 | 	shl	arg03, #3
07180     02 00 00 FF 
07184     38 E4 85 F1 | 	sub	objptr, ##1080
07188     F2 16 02 F1 | 	add	arg03, objptr
0718c     04 16 06 F1 | 	add	arg03, #4
07190     0B 17 02 FB | 	rdlong	arg03, arg03
07194     01 00 00 FF 
07198     00 16 0E F2 | 	cmp	arg03, ##512 wz
0719c     2B 00 00 FF 
071a0     D0 E5 85 F1 | 	sub	objptr, ##22480
071a4     CC 02 90 5D |  if_ne	jmp	#LR__0615
071a8     2E 00 00 FF 
071ac     08 E4 05 F1 | 	add	objptr, ##23560
071b0     F2 16 02 FB | 	rdlong	arg03, objptr
071b4     01 16 06 F1 | 	add	arg03, #1
071b8     03 16 66 F0 | 	shl	arg03, #3
071bc     02 00 00 FF 
071c0     38 E4 85 F1 | 	sub	objptr, ##1080
071c4     F2 16 02 F1 | 	add	arg03, objptr
071c8     04 16 06 F1 | 	add	arg03, #4
071cc     0B 17 02 FB | 	rdlong	arg03, arg03
071d0     FE 17 0E F2 | 	cmp	arg03, #510 wz
071d4     2B 00 00 FF 
071d8     D0 E5 85 F1 | 	sub	objptr, ##22480
071dc     94 02 90 5D |  if_ne	jmp	#LR__0615
071e0     2E 00 00 FF 
071e4     08 E4 05 F1 | 	add	objptr, ##23560
071e8     F2 16 02 FB | 	rdlong	arg03, objptr
071ec     03 16 66 F0 | 	shl	arg03, #3
071f0     02 00 00 FF 
071f4     38 E4 85 F1 | 	sub	objptr, ##1080
071f8     F2 16 02 F1 | 	add	arg03, objptr
071fc     0B 13 02 FB | 	rdlong	arg01, arg03
07200     00 14 06 F6 | 	mov	arg02, #0
07204     2B 00 00 FF 
07208     D0 E5 85 F1 | 	sub	objptr, ##22480
0720c     3C 16 B1 FD | 	call	#__system____builtin_atoi
07210     04 4E 05 F1 | 	add	fp, #4
07214     A7 FA 61 FC | 	wrlong	result1, fp
07218     41 00 00 FF 
0721c     40 E4 05 F1 | 	add	objptr, ##33344
07220     F2 1E 02 FB | 	rdlong	local01, objptr
07224     0F 21 02 F6 | 	mov	local02, local01
07228     01 20 66 F0 | 	shl	local02, #1
0722c     0F 21 02 F1 | 	add	local02, local01
07230     02 20 66 F0 | 	shl	local02, #2
07234     03 00 00 FF 
07238     00 E4 85 F1 | 	sub	objptr, ##1536
0723c     F2 20 02 F1 | 	add	local02, objptr
07240     08 20 06 F1 | 	add	local02, #8
07244     10 9D 68 FC | 	wrlong	#78, local02
07248     03 00 00 FF 
0724c     08 E4 05 F1 | 	add	objptr, ##1544
07250     F2 22 02 FB | 	rdlong	local03, objptr
07254     41 00 00 FF 
07258     48 E4 85 F1 | 	sub	objptr, ##33352
0725c     04 4E 05 F1 | 	add	fp, #4
07260     A7 22 62 FC | 	wrlong	local03, fp
07264     08 4E 85 F1 | 	sub	fp, #8
07268                 | ' 
07268                 | '   gotoline=val%(lparts(ct).part$) 
07268                 | '   compiledline(lineptr).result_type=token_fast_goto
07268                 | ' ' now find a pointer to goto
07268                 | '   gotoptr=programstart
07268                 | '   do
07268                 | LR__0610
07268     10 4E 05 F1 | 	add	fp, #16
0726c     A7 12 02 F6 | 	mov	arg01, fp
07270     08 4E 85 F1 | 	sub	fp, #8
07274     A7 14 02 FB | 	rdlong	arg02, fp
07278     08 4E 85 F1 | 	sub	fp, #8
0727c     18 16 06 F6 | 	mov	arg03, #24
07280     0B 00 00 FF 
07284     C0 E4 05 F1 | 	add	objptr, ##5824
07288     48 DA B0 FD | 	call	#_psram_spin2_read1
0728c     0B 00 00 FF 
07290     C0 E4 85 F1 | 	sub	objptr, ##5824
07294                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
07294                 | '     if gotoheader(0)<>$FFFFFFFF then
07294     10 4E 05 F1 | 	add	fp, #16
07298     A7 22 02 FB | 	rdlong	local03, fp
0729c     10 4E 85 F1 | 	sub	fp, #16
072a0     FF FF 7F FF 
072a4     FF 23 0E F2 | 	cmp	local03, ##-1 wz
072a8     24 00 90 AD |  if_e	jmp	#LR__0611
072ac     08 4E 05 F1 | 	add	fp, #8
072b0     A7 22 02 FB | 	rdlong	local03, fp
072b4     04 4E 05 F1 | 	add	fp, #4
072b8     A7 22 62 FC | 	wrlong	local03, fp
072bc     18 4E 05 F1 | 	add	fp, #24
072c0     A7 22 02 FB | 	rdlong	local03, fp
072c4     1C 4E 85 F1 | 	sub	fp, #28
072c8     A7 22 62 FC | 	wrlong	local03, fp
072cc     08 4E 85 F1 | 	sub	fp, #8
072d0                 | LR__0611
072d0     24 4E 05 F1 | 	add	fp, #36
072d4     A7 22 02 FB | 	rdlong	local03, fp
072d8     24 4E 85 F1 | 	sub	fp, #36
072dc     FF FF 3F FF 
072e0     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
072e4     10 4E 05 51 |  if_ne	add	fp, #16
072e8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
072ec     10 4E 85 51 |  if_ne	sub	fp, #16
072f0     FF FF 7F 5F 
072f4     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
072f8     1C 00 90 AD |  if_e	jmp	#LR__0612
072fc     10 4E 05 F1 | 	add	fp, #16
07300     A7 22 02 FB | 	rdlong	local03, fp
07304     0C 4E 85 F1 | 	sub	fp, #12
07308     A7 20 02 FB | 	rdlong	local02, fp
0730c     04 4E 85 F1 | 	sub	fp, #4
07310     10 23 0A F2 | 	cmp	local03, local02 wz
07314     50 FF 9F 5D |  if_ne	jmp	#LR__0610
07318                 | LR__0612
07318                 | '   if gotoheader(0)=gotoline then
07318     10 4E 05 F1 | 	add	fp, #16
0731c     A7 22 02 FB | 	rdlong	local03, fp
07320     0C 4E 85 F1 | 	sub	fp, #12
07324     A7 1E 02 FB | 	rdlong	local01, fp
07328     04 4E 85 F1 | 	sub	fp, #4
0732c     0F 23 0A F2 | 	cmp	local03, local01 wz
07330     7C 00 90 5D |  if_ne	jmp	#LR__0613
07334     41 00 00 FF 
07338     40 E4 05 F1 | 	add	objptr, ##33344
0733c     F2 1E 02 FB | 	rdlong	local01, objptr
07340     0F 21 02 F6 | 	mov	local02, local01
07344     01 20 66 F0 | 	shl	local02, #1
07348     0F 21 02 F1 | 	add	local02, local01
0734c     02 20 66 F0 | 	shl	local02, #2
07350     03 00 00 FF 
07354     00 E4 85 F1 | 	sub	objptr, ##1536
07358     F2 20 02 F1 | 	add	local02, objptr
0735c     0C 4E 05 F1 | 	add	fp, #12
07360     A7 22 02 FB | 	rdlong	local03, fp
07364     10 23 62 FC | 	wrlong	local03, local02
07368     03 00 00 FF 
0736c     00 E4 05 F1 | 	add	objptr, ##1536
07370     F2 1E 02 FB | 	rdlong	local01, objptr
07374     0F 21 02 F6 | 	mov	local02, local01
07378     01 20 66 F0 | 	shl	local02, #1
0737c     0F 21 02 F1 | 	add	local02, local01
07380     02 20 66 F0 | 	shl	local02, #2
07384     03 00 00 FF 
07388     00 E4 85 F1 | 	sub	objptr, ##1536
0738c     F2 20 02 F1 | 	add	local02, objptr
07390     08 4E 85 F1 | 	sub	fp, #8
07394     A7 22 02 FB | 	rdlong	local03, fp
07398     04 4E 85 F1 | 	sub	fp, #4
0739c     04 20 06 F1 | 	add	local02, #4
073a0     10 23 62 FC | 	wrlong	local03, local02
073a4     3E 00 00 FF 
073a8     40 E4 85 F1 | 	sub	objptr, ##31808
073ac     A4 00 90 FD | 	jmp	#LR__0614
073b0                 | LR__0613
073b0     41 00 00 FF 
073b4     40 E4 05 F1 | 	add	objptr, ##33344
073b8     F2 1E 02 FB | 	rdlong	local01, objptr
073bc     0F 21 02 F6 | 	mov	local02, local01
073c0     01 20 66 F0 | 	shl	local02, #1
073c4     0F 21 02 F1 | 	add	local02, local01
073c8     02 20 66 F0 | 	shl	local02, #2
073cc     03 00 00 FF 
073d0     00 E4 85 F1 | 	sub	objptr, ##1536
073d4     F2 20 02 F1 | 	add	local02, objptr
073d8     00 00 C0 FF 
073dc     10 01 68 FC | 	wrlong	##-2147483648, local02
073e0     03 00 00 FF 
073e4     00 E4 05 F1 | 	add	objptr, ##1536
073e8     F2 1E 02 FB | 	rdlong	local01, objptr
073ec     0F 21 02 F6 | 	mov	local02, local01
073f0     01 20 66 F0 | 	shl	local02, #1
073f4     0F 21 02 F1 | 	add	local02, local01
073f8     02 20 66 F0 | 	shl	local02, #2
073fc     03 00 00 FF 
07400     00 E4 85 F1 | 	sub	objptr, ##1536
07404     F2 20 02 F1 | 	add	local02, objptr
07408     04 4E 05 F1 | 	add	fp, #4
0740c     A7 22 02 FB | 	rdlong	local03, fp
07410     04 4E 85 F1 | 	sub	fp, #4
07414     04 20 06 F1 | 	add	local02, #4
07418     10 23 62 FC | 	wrlong	local03, local02
0741c     03 00 00 FF 
07420     00 E4 05 F1 | 	add	objptr, ##1536
07424     F2 1E 02 FB | 	rdlong	local01, objptr
07428     0F 21 02 F6 | 	mov	local02, local01
0742c     01 20 66 F0 | 	shl	local02, #1
07430     0F 21 02 F1 | 	add	local02, local01
07434     02 20 66 F0 | 	shl	local02, #2
07438     03 00 00 FF 
0743c     00 E4 85 F1 | 	sub	objptr, ##1536
07440     F2 20 02 F1 | 	add	local02, objptr
07444     08 20 06 F1 | 	add	local02, #8
07448     10 A7 68 FC | 	wrlong	#83, local02
0744c     3E 00 00 FF 
07450     40 E4 85 F1 | 	sub	objptr, ##31808
07454                 | LR__0614
07454     41 00 00 FF 
07458     40 E4 05 F1 | 	add	objptr, ##33344
0745c     F2 22 02 FB | 	rdlong	local03, objptr
07460     01 22 06 F1 | 	add	local03, #1
07464     F2 22 62 FC | 	wrlong	local03, objptr
07468     41 00 00 FF 
0746c     40 E4 85 F1 | 	sub	objptr, ##33344
07470     40 00 90 FD | 	jmp	#LR__0616
07474                 | LR__0615
07474                 | '    print "We have a slow goto, todo  "
07474     00 12 06 F6 | 	mov	arg01, #0
07478     F4 38 B1 FD | 	call	#__system___getiolock_0369
0747c     FD 12 02 F6 | 	mov	arg01, result1
07480     3C E3 B0 FD | 	call	#__system___lockmem
07484     26 01 00 FF 
07488     51 15 06 F6 | 	mov	arg02, ##@LR__4316
0748c     00 12 06 F6 | 	mov	arg01, #0
07490     00 16 06 F6 | 	mov	arg03, #0
07494     1C F0 B0 FD | 	call	#__system___basic_print_string
07498     00 12 06 F6 | 	mov	arg01, #0
0749c     0A 14 06 F6 | 	mov	arg02, #10
074a0     00 16 06 F6 | 	mov	arg03, #0
074a4     B4 EF B0 FD | 	call	#__system___basic_print_char
074a8     00 12 06 F6 | 	mov	arg01, #0
074ac     C0 38 B1 FD | 	call	#__system___getiolock_0369
074b0     FD 00 68 FC | 	wrlong	#0, result1
074b4                 | LR__0616
074b4                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
074b4                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
074b4                 | ' return 0
074b4     00 FA 05 F6 | 	mov	result1, #0
074b8     A7 F0 03 F6 | 	mov	ptra, fp
074bc     B2 00 A0 FD | 	call	#popregs_
074c0                 | _compile_goto_ret
074c0     2D 00 64 FD | 	ret
074c4                 | 
074c4                 | ' 
074c4                 | ' 
074c4                 | ' 
074c4                 | ' 
074c4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
074c4                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
074c4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
074c4                 | ' 
074c4                 | ' 
074c4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
074c4                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
074c4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
074c4                 | ' 
074c4                 | ' 
074c4                 | ' function expr() as integer 
074c4                 | _expr
074c4     07 4A 05 F6 | 	mov	COUNT_, #7
074c8     A8 00 A0 FD | 	call	#pushregs_
074cc                 | _expr_enter
074cc     2E 00 00 FF 
074d0     08 E4 05 F1 | 	add	objptr, ##23560
074d4     F2 24 02 FB | 	rdlong	local04, objptr
074d8     03 24 66 F0 | 	shl	local04, #3
074dc     02 00 00 FF 
074e0     38 E4 85 F1 | 	sub	objptr, ##1080
074e4     F2 24 02 F1 | 	add	local04, objptr
074e8     04 24 06 F1 | 	add	local04, #4
074ec     12 27 02 FB | 	rdlong	local05, local04
074f0                 | ' 
074f0                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
074f0     FE 27 0E F2 | 	cmp	local05, #510 wz
074f4     2B 00 00 FF 
074f8     D0 E5 85 F1 | 	sub	objptr, ##22480
074fc     C4 00 90 5D |  if_ne	jmp	#LR__0620
07500     1D 1E 06 F6 | 	mov	local01, #29
07504     FF 22 06 F6 | 	mov	local03, #255
07508     0F 29 02 F6 | 	mov	local06, local01
0750c     10 2B 02 F6 | 	mov	local07, local02
07510     11 1F 02 F6 | 	mov	local01, local03
07514     41 00 00 FF 
07518     40 E4 05 F1 | 	add	objptr, ##33344
0751c     F2 26 02 FB | 	rdlong	local05, objptr
07520     13 25 02 F6 | 	mov	local04, local05
07524     01 24 66 F0 | 	shl	local04, #1
07528     13 25 02 F1 | 	add	local04, local05
0752c     02 24 66 F0 | 	shl	local04, #2
07530     03 00 00 FF 
07534     00 E4 85 F1 | 	sub	objptr, ##1536
07538     F2 24 02 F1 | 	add	local04, objptr
0753c     12 29 62 FC | 	wrlong	local06, local04
07540     03 00 00 FF 
07544     00 E4 05 F1 | 	add	objptr, ##1536
07548     F2 28 02 FB | 	rdlong	local06, objptr
0754c     14 27 02 F6 | 	mov	local05, local06
07550     01 26 66 F0 | 	shl	local05, #1
07554     14 27 02 F1 | 	add	local05, local06
07558     02 26 66 F0 | 	shl	local05, #2
0755c     03 00 00 FF 
07560     00 E4 85 F1 | 	sub	objptr, ##1536
07564     F2 26 02 F1 | 	add	local05, objptr
07568     04 26 06 F1 | 	add	local05, #4
0756c     13 2B 62 FC | 	wrlong	local07, local05
07570     03 00 00 FF 
07574     00 E4 05 F1 | 	add	objptr, ##1536
07578     F2 2A 02 FB | 	rdlong	local07, objptr
0757c     15 29 02 F6 | 	mov	local06, local07
07580     01 28 66 F0 | 	shl	local06, #1
07584     15 29 02 F1 | 	add	local06, local07
07588     02 28 66 F0 | 	shl	local06, #2
0758c     03 00 00 FF 
07590     00 E4 85 F1 | 	sub	objptr, ##1536
07594     F2 28 02 F1 | 	add	local06, objptr
07598     08 28 06 F1 | 	add	local06, #8
0759c     14 1F 62 FC | 	wrlong	local01, local06
075a0     03 00 00 FF 
075a4     00 E4 05 F1 | 	add	objptr, ##1536
075a8     F2 28 02 FB | 	rdlong	local06, objptr
075ac     01 28 06 F1 | 	add	local06, #1
075b0     F2 28 62 FC | 	wrlong	local06, objptr
075b4     41 00 00 FF 
075b8     40 E4 85 F1 | 	sub	objptr, ##33344
075bc     1D FA 05 F6 | 	mov	result1, #29
075c0     54 01 90 FD | 	jmp	#LR__0623
075c4                 | LR__0620
075c4     00 1E 06 F6 | 	mov	local01, #0
075c8     58 01 B0 FD | 	call	#_addsub
075cc     2E 00 00 FF 
075d0     08 E4 05 F1 | 	add	objptr, ##23560
075d4     F2 24 02 FB | 	rdlong	local04, objptr
075d8     03 24 66 F0 | 	shl	local04, #3
075dc     02 00 00 FF 
075e0     38 E4 85 F1 | 	sub	objptr, ##1080
075e4     F2 24 02 F1 | 	add	local04, objptr
075e8     04 24 06 F1 | 	add	local04, #4
075ec     12 27 02 FB | 	rdlong	local05, local04
075f0                 | ' t3.result.uresult=0
075f0                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
075f0                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
075f0                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
075f0     2B 00 00 FF 
075f4     D0 E5 85 F1 | 	sub	objptr, ##22480
075f8                 | LR__0621
075f8     1B 26 0E F2 | 	cmp	local05, #27 wz
075fc     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
07600     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
07604     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
07608     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
0760c     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
07610     00 01 90 5D |  if_ne	jmp	#LR__0622
07614     2E 00 00 FF 
07618     08 E4 05 F1 | 	add	objptr, ##23560
0761c     F2 28 02 FB | 	rdlong	local06, objptr
07620     01 28 06 F1 | 	add	local06, #1
07624     F2 28 62 FC | 	wrlong	local06, objptr
07628     2E 00 00 FF 
0762c     08 E4 85 F1 | 	sub	objptr, ##23560
07630     F0 00 B0 FD | 	call	#_addsub
07634     13 23 02 F6 | 	mov	local03, local05
07638     0F 29 02 F6 | 	mov	local06, local01
0763c     10 2B 02 F6 | 	mov	local07, local02
07640     11 27 02 F6 | 	mov	local05, local03
07644     41 00 00 FF 
07648     40 E4 05 F1 | 	add	objptr, ##33344
0764c     F2 24 02 FB | 	rdlong	local04, objptr
07650     12 FB 01 F6 | 	mov	result1, local04
07654     01 FA 65 F0 | 	shl	result1, #1
07658     12 FB 01 F1 | 	add	result1, local04
0765c     02 FA 65 F0 | 	shl	result1, #2
07660     03 00 00 FF 
07664     00 E4 85 F1 | 	sub	objptr, ##1536
07668     F2 FA 01 F1 | 	add	result1, objptr
0766c     FD 28 62 FC | 	wrlong	local06, result1
07670     03 00 00 FF 
07674     00 E4 05 F1 | 	add	objptr, ##1536
07678     F2 28 02 FB | 	rdlong	local06, objptr
0767c     14 25 02 F6 | 	mov	local04, local06
07680     01 24 66 F0 | 	shl	local04, #1
07684     14 25 02 F1 | 	add	local04, local06
07688     02 24 66 F0 | 	shl	local04, #2
0768c     03 00 00 FF 
07690     00 E4 85 F1 | 	sub	objptr, ##1536
07694     F2 24 02 F1 | 	add	local04, objptr
07698     04 24 06 F1 | 	add	local04, #4
0769c     12 2B 62 FC | 	wrlong	local07, local04
076a0     03 00 00 FF 
076a4     00 E4 05 F1 | 	add	objptr, ##1536
076a8     F2 2A 02 FB | 	rdlong	local07, objptr
076ac     15 29 02 F6 | 	mov	local06, local07
076b0     01 28 66 F0 | 	shl	local06, #1
076b4     15 29 02 F1 | 	add	local06, local07
076b8     02 28 66 F0 | 	shl	local06, #2
076bc     03 00 00 FF 
076c0     00 E4 85 F1 | 	sub	objptr, ##1536
076c4     F2 28 02 F1 | 	add	local06, objptr
076c8     08 28 06 F1 | 	add	local06, #8
076cc     14 27 62 FC | 	wrlong	local05, local06
076d0     03 00 00 FF 
076d4     00 E4 05 F1 | 	add	objptr, ##1536
076d8     F2 28 02 FB | 	rdlong	local06, objptr
076dc     01 28 06 F1 | 	add	local06, #1
076e0     F2 28 62 FC | 	wrlong	local06, objptr
076e4     13 00 00 FF 
076e8     38 E4 85 F1 | 	sub	objptr, ##9784
076ec     F2 24 02 FB | 	rdlong	local04, objptr
076f0     03 24 66 F0 | 	shl	local04, #3
076f4     02 00 00 FF 
076f8     38 E4 85 F1 | 	sub	objptr, ##1080
076fc     F2 24 02 F1 | 	add	local04, objptr
07700     04 24 06 F1 | 	add	local04, #4
07704     12 27 02 FB | 	rdlong	local05, local04
07708     2B 00 00 FF 
0770c     D0 E5 85 F1 | 	sub	objptr, ##22480
07710     E4 FE 9F FD | 	jmp	#LR__0621
07714                 | LR__0622
07714                 | ' return 0  
07714     00 FA 05 F6 | 	mov	result1, #0
07718                 | LR__0623
07718     A7 F0 03 F6 | 	mov	ptra, fp
0771c     B2 00 A0 FD | 	call	#popregs_
07720                 | _expr_ret
07720     2D 00 64 FD | 	ret
07724                 | 
07724                 | ' 
07724                 | ' 
07724                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
07724                 | ' 
07724                 | ' function addsub() as integer 
07724                 | _addsub
07724     07 4A 05 F6 | 	mov	COUNT_, #7
07728     A8 00 A0 FD | 	call	#pushregs_
0772c                 | _addsub_enter
0772c     00 1E 06 F6 | 	mov	local01, #0
07730     50 01 B0 FD | 	call	#_muldiv
07734     2E 00 00 FF 
07738     08 E4 05 F1 | 	add	objptr, ##23560
0773c     F2 24 02 FB | 	rdlong	local04, objptr
07740     03 24 66 F0 | 	shl	local04, #3
07744     02 00 00 FF 
07748     38 E4 85 F1 | 	sub	objptr, ##1080
0774c     F2 24 02 F1 | 	add	local04, objptr
07750     04 24 06 F1 | 	add	local04, #4
07754     12 27 02 FB | 	rdlong	local05, local04
07758                 | ' t3.result.uresult=0
07758                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
07758                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
07758                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
07758     2B 00 00 FF 
0775c     D0 E5 85 F1 | 	sub	objptr, ##22480
07760                 | LR__0630
07760     01 26 0E F2 | 	cmp	local05, #1 wz
07764     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
07768     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
0776c     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
07770     00 01 90 5D |  if_ne	jmp	#LR__0631
07774     2E 00 00 FF 
07778     08 E4 05 F1 | 	add	objptr, ##23560
0777c     F2 24 02 FB | 	rdlong	local04, objptr
07780     01 24 06 F1 | 	add	local04, #1
07784     F2 24 62 FC | 	wrlong	local04, objptr
07788     2E 00 00 FF 
0778c     08 E4 85 F1 | 	sub	objptr, ##23560
07790     F0 00 B0 FD | 	call	#_muldiv
07794     13 23 02 F6 | 	mov	local03, local05
07798     0F 29 02 F6 | 	mov	local06, local01
0779c     10 2B 02 F6 | 	mov	local07, local02
077a0     11 27 02 F6 | 	mov	local05, local03
077a4     41 00 00 FF 
077a8     40 E4 05 F1 | 	add	objptr, ##33344
077ac     F2 24 02 FB | 	rdlong	local04, objptr
077b0     12 FB 01 F6 | 	mov	result1, local04
077b4     01 FA 65 F0 | 	shl	result1, #1
077b8     12 FB 01 F1 | 	add	result1, local04
077bc     02 FA 65 F0 | 	shl	result1, #2
077c0     03 00 00 FF 
077c4     00 E4 85 F1 | 	sub	objptr, ##1536
077c8     F2 FA 01 F1 | 	add	result1, objptr
077cc     FD 28 62 FC | 	wrlong	local06, result1
077d0     03 00 00 FF 
077d4     00 E4 05 F1 | 	add	objptr, ##1536
077d8     F2 28 02 FB | 	rdlong	local06, objptr
077dc     14 25 02 F6 | 	mov	local04, local06
077e0     01 24 66 F0 | 	shl	local04, #1
077e4     14 25 02 F1 | 	add	local04, local06
077e8     02 24 66 F0 | 	shl	local04, #2
077ec     03 00 00 FF 
077f0     00 E4 85 F1 | 	sub	objptr, ##1536
077f4     F2 24 02 F1 | 	add	local04, objptr
077f8     04 24 06 F1 | 	add	local04, #4
077fc     12 2B 62 FC | 	wrlong	local07, local04
07800     03 00 00 FF 
07804     00 E4 05 F1 | 	add	objptr, ##1536
07808     F2 2A 02 FB | 	rdlong	local07, objptr
0780c     15 29 02 F6 | 	mov	local06, local07
07810     01 28 66 F0 | 	shl	local06, #1
07814     15 29 02 F1 | 	add	local06, local07
07818     02 28 66 F0 | 	shl	local06, #2
0781c     03 00 00 FF 
07820     00 E4 85 F1 | 	sub	objptr, ##1536
07824     F2 28 02 F1 | 	add	local06, objptr
07828     08 28 06 F1 | 	add	local06, #8
0782c     14 27 62 FC | 	wrlong	local05, local06
07830     03 00 00 FF 
07834     00 E4 05 F1 | 	add	objptr, ##1536
07838     F2 28 02 FB | 	rdlong	local06, objptr
0783c     01 28 06 F1 | 	add	local06, #1
07840     F2 28 62 FC | 	wrlong	local06, objptr
07844     13 00 00 FF 
07848     38 E4 85 F1 | 	sub	objptr, ##9784
0784c     F2 24 02 FB | 	rdlong	local04, objptr
07850     03 24 66 F0 | 	shl	local04, #3
07854     02 00 00 FF 
07858     38 E4 85 F1 | 	sub	objptr, ##1080
0785c     F2 24 02 F1 | 	add	local04, objptr
07860     04 24 06 F1 | 	add	local04, #4
07864     12 27 02 FB | 	rdlong	local05, local04
07868     2B 00 00 FF 
0786c     D0 E5 85 F1 | 	sub	objptr, ##22480
07870     EC FE 9F FD | 	jmp	#LR__0630
07874                 | LR__0631
07874                 | '   return 0
07874     00 FA 05 F6 | 	mov	result1, #0
07878     A7 F0 03 F6 | 	mov	ptra, fp
0787c     B2 00 A0 FD | 	call	#popregs_
07880                 | _addsub_ret
07880     2D 00 64 FD | 	ret
07884                 | 
07884                 | ' 
07884                 | ' sub muldiv()
07884                 | _muldiv
07884     08 4A 05 F6 | 	mov	COUNT_, #8
07888     A8 00 A0 FD | 	call	#pushregs_
0788c                 | _muldiv_enter
0788c     00 1E 06 F6 | 	mov	local01, #0
07890     58 01 B0 FD | 	call	#_getvalue
07894     2E 00 00 FF 
07898     08 E4 05 F1 | 	add	objptr, ##23560
0789c     F2 24 02 FB | 	rdlong	local04, objptr
078a0     03 24 66 F0 | 	shl	local04, #3
078a4     02 00 00 FF 
078a8     38 E4 85 F1 | 	sub	objptr, ##1080
078ac     F2 24 02 F1 | 	add	local04, objptr
078b0     04 24 06 F1 | 	add	local04, #4
078b4     12 27 02 FB | 	rdlong	local05, local04
078b8                 | ' t3.result.uresult=0
078b8                 | ' getvalue()    
078b8                 | ' op = lparts(ct).token
078b8                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
078b8     2B 00 00 FF 
078bc     D0 E5 85 F1 | 	sub	objptr, ##22480
078c0                 | LR__0640
078c0     05 26 0E F2 | 	cmp	local05, #5 wz
078c4     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
078c8     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
078cc     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
078d0     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
078d4     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
078d8     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
078dc     00 01 90 5D |  if_ne	jmp	#LR__0641
078e0     2E 00 00 FF 
078e4     08 E4 05 F1 | 	add	objptr, ##23560
078e8     F2 24 02 FB | 	rdlong	local04, objptr
078ec     01 24 06 F1 | 	add	local04, #1
078f0     F2 24 62 FC | 	wrlong	local04, objptr
078f4     2E 00 00 FF 
078f8     08 E4 85 F1 | 	sub	objptr, ##23560
078fc     EC 00 B0 FD | 	call	#_getvalue
07900     13 23 02 F6 | 	mov	local03, local05
07904     0F 29 02 F6 | 	mov	local06, local01
07908     10 2B 02 F6 | 	mov	local07, local02
0790c     11 27 02 F6 | 	mov	local05, local03
07910     41 00 00 FF 
07914     40 E4 05 F1 | 	add	objptr, ##33344
07918     F2 24 02 FB | 	rdlong	local04, objptr
0791c     12 2D 02 F6 | 	mov	local08, local04
07920     01 2C 66 F0 | 	shl	local08, #1
07924     12 2D 02 F1 | 	add	local08, local04
07928     02 2C 66 F0 | 	shl	local08, #2
0792c     03 00 00 FF 
07930     00 E4 85 F1 | 	sub	objptr, ##1536
07934     F2 2C 02 F1 | 	add	local08, objptr
07938     16 29 62 FC | 	wrlong	local06, local08
0793c     03 00 00 FF 
07940     00 E4 05 F1 | 	add	objptr, ##1536
07944     F2 2C 02 FB | 	rdlong	local08, objptr
07948     16 29 02 F6 | 	mov	local06, local08
0794c     01 28 66 F0 | 	shl	local06, #1
07950     16 29 02 F1 | 	add	local06, local08
07954     02 28 66 F0 | 	shl	local06, #2
07958     03 00 00 FF 
0795c     00 E4 85 F1 | 	sub	objptr, ##1536
07960     F2 28 02 F1 | 	add	local06, objptr
07964     04 28 06 F1 | 	add	local06, #4
07968     14 2B 62 FC | 	wrlong	local07, local06
0796c     03 00 00 FF 
07970     00 E4 05 F1 | 	add	objptr, ##1536
07974     F2 2C 02 FB | 	rdlong	local08, objptr
07978     16 2B 02 F6 | 	mov	local07, local08
0797c     01 2A 66 F0 | 	shl	local07, #1
07980     16 2B 02 F1 | 	add	local07, local08
07984     02 2A 66 F0 | 	shl	local07, #2
07988     03 00 00 FF 
0798c     00 E4 85 F1 | 	sub	objptr, ##1536
07990     F2 2A 02 F1 | 	add	local07, objptr
07994     08 2A 06 F1 | 	add	local07, #8
07998     15 27 62 FC | 	wrlong	local05, local07
0799c     03 00 00 FF 
079a0     00 E4 05 F1 | 	add	objptr, ##1536
079a4     F2 28 02 FB | 	rdlong	local06, objptr
079a8     01 28 06 F1 | 	add	local06, #1
079ac     F2 28 62 FC | 	wrlong	local06, objptr
079b0     13 00 00 FF 
079b4     38 E4 85 F1 | 	sub	objptr, ##9784
079b8     F2 24 02 FB | 	rdlong	local04, objptr
079bc     03 24 66 F0 | 	shl	local04, #3
079c0     02 00 00 FF 
079c4     38 E4 85 F1 | 	sub	objptr, ##1080
079c8     F2 24 02 F1 | 	add	local04, objptr
079cc     04 24 06 F1 | 	add	local04, #4
079d0     12 27 02 FB | 	rdlong	local05, local04
079d4     2B 00 00 FF 
079d8     D0 E5 85 F1 | 	sub	objptr, ##22480
079dc     E0 FE 9F FD | 	jmp	#LR__0640
079e0                 | LR__0641
079e0     A7 F0 03 F6 | 	mov	ptra, fp
079e4     B2 00 A0 FD | 	call	#popregs_
079e8                 | _muldiv_ret
079e8     2D 00 64 FD | 	ret
079ec                 | 
079ec                 | ' 
079ec                 | ' sub getvalue() 
079ec                 | _getvalue
079ec     0B 4A 05 F6 | 	mov	COUNT_, #11
079f0     A8 00 A0 FD | 	call	#pushregs_
079f4                 | _getvalue_enter
079f4     01 24 06 F6 | 	mov	local04, #1
079f8     00 1E 06 F6 | 	mov	local01, #0
079fc     1D 22 06 F6 | 	mov	local03, #29
07a00     2E 00 00 FF 
07a04     08 E4 05 F1 | 	add	objptr, ##23560
07a08     F2 16 02 FB | 	rdlong	arg03, objptr
07a0c     03 16 66 F0 | 	shl	arg03, #3
07a10     02 00 00 FF 
07a14     38 E4 85 F1 | 	sub	objptr, ##1080
07a18     F2 16 02 F1 | 	add	arg03, objptr
07a1c     04 16 06 F1 | 	add	arg03, #4
07a20     0B 27 02 FB | 	rdlong	local05, arg03
07a24                 | ' m=1
07a24                 | ' t1.result.uresult=0: t1.result_type=result_uint
07a24                 | ' op=lparts(ct).token
07a24                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
07a24     02 26 0E F2 | 	cmp	local05, #2 wz
07a28     2B 00 00 FF 
07a2c     D0 E5 85 F1 | 	sub	objptr, ##22480
07a30     38 00 90 5D |  if_ne	jmp	#LR__0650
07a34     01 24 66 F6 | 	neg	local04, #1
07a38     2E 00 00 FF 
07a3c     08 E4 05 F1 | 	add	objptr, ##23560
07a40     F2 26 02 FB | 	rdlong	local05, objptr
07a44     01 26 06 F1 | 	add	local05, #1
07a48     F2 26 62 FC | 	wrlong	local05, objptr
07a4c     03 26 66 F0 | 	shl	local05, #3
07a50     02 00 00 FF 
07a54     38 E4 85 F1 | 	sub	objptr, ##1080
07a58     F2 26 02 F1 | 	add	local05, objptr
07a5c     04 26 06 F1 | 	add	local05, #4
07a60     13 27 02 FB | 	rdlong	local05, local05
07a64     2B 00 00 FF 
07a68     D0 E5 85 F1 | 	sub	objptr, ##22480
07a6c                 | LR__0650
07a6c                 | ' select case op
07a6c     01 00 00 FF 
07a70     00 26 0E F2 | 	cmp	local05, ##512 wz
07a74     3C 00 90 AD |  if_e	jmp	#LR__0651
07a78     01 00 00 FF 
07a7c     01 26 0E F2 | 	cmp	local05, ##513 wz
07a80     88 01 90 AD |  if_e	jmp	#LR__0654
07a84     01 00 00 FF 
07a88     02 26 0E F2 | 	cmp	local05, ##514 wz
07a8c     84 02 90 AD |  if_e	jmp	#LR__0655
07a90     01 00 00 FF 
07a94     03 26 0E F2 | 	cmp	local05, ##515 wz
07a98     E8 03 90 AD |  if_e	jmp	#LR__0658
07a9c     01 00 00 FF 
07aa0     04 26 0E F2 | 	cmp	local05, ##516 wz
07aa4     E0 05 90 AD |  if_e	jmp	#LR__0663
07aa8     15 26 0E F2 | 	cmp	local05, #21 wz
07aac     00 06 90 AD |  if_e	jmp	#LR__0664
07ab0     70 06 90 FD | 	jmp	#LR__0665
07ab4                 | LR__0651
07ab4                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_uint ' todo token_int64
07ab4     01 24 0E F2 | 	cmp	local04, #1 wz
07ab8     3C 00 90 5D |  if_ne	jmp	#LR__0652
07abc     2E 00 00 FF 
07ac0     08 E4 05 F1 | 	add	objptr, ##23560
07ac4     F2 26 02 FB | 	rdlong	local05, objptr
07ac8     03 26 66 F0 | 	shl	local05, #3
07acc     02 00 00 FF 
07ad0     38 E4 85 F1 | 	sub	objptr, ##1080
07ad4     F2 26 02 F1 | 	add	local05, objptr
07ad8     13 13 02 FB | 	rdlong	arg01, local05
07adc     00 14 06 F6 | 	mov	arg02, #0
07ae0     2B 00 00 FF 
07ae4     D0 E5 85 F1 | 	sub	objptr, ##22480
07ae8     60 0D B1 FD | 	call	#__system____builtin_atoi
07aec     FD 24 02 FD | 	qmul	local04, result1
07af0     18 1E 62 FD | 	getqx	local01
07af4     1D 22 06 F6 | 	mov	local03, #29
07af8                 | LR__0652
07af8                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
07af8     FF FF 7F FF 
07afc     FF 25 0E F2 | 	cmp	local04, ##-1 wz
07b00     3C 00 90 5D |  if_ne	jmp	#LR__0653
07b04     2E 00 00 FF 
07b08     08 E4 05 F1 | 	add	objptr, ##23560
07b0c     F2 26 02 FB | 	rdlong	local05, objptr
07b10     03 26 66 F0 | 	shl	local05, #3
07b14     02 00 00 FF 
07b18     38 E4 85 F1 | 	sub	objptr, ##1080
07b1c     F2 26 02 F1 | 	add	local05, objptr
07b20     13 13 02 FB | 	rdlong	arg01, local05
07b24     00 14 06 F6 | 	mov	arg02, #0
07b28     2B 00 00 FF 
07b2c     D0 E5 85 F1 | 	sub	objptr, ##22480
07b30     18 0D B1 FD | 	call	#__system____builtin_atoi
07b34     FD 24 02 FD | 	qmul	local04, result1
07b38     18 1E 62 FD | 	getqx	local01
07b3c     1C 22 06 F6 | 	mov	local03, #28
07b40                 | LR__0653
07b40     0F 29 02 F6 | 	mov	local06, local01
07b44     10 2B 02 F6 | 	mov	local07, local02
07b48     11 27 02 F6 | 	mov	local05, local03
07b4c     41 00 00 FF 
07b50     40 E4 05 F1 | 	add	objptr, ##33344
07b54     F2 1E 02 FB | 	rdlong	local01, objptr
07b58     0F 25 02 F6 | 	mov	local04, local01
07b5c     01 24 66 F0 | 	shl	local04, #1
07b60     0F 25 02 F1 | 	add	local04, local01
07b64     02 24 66 F0 | 	shl	local04, #2
07b68     03 00 00 FF 
07b6c     00 E4 85 F1 | 	sub	objptr, ##1536
07b70     F2 24 02 F1 | 	add	local04, objptr
07b74     12 29 62 FC | 	wrlong	local06, local04
07b78     03 00 00 FF 
07b7c     00 E4 05 F1 | 	add	objptr, ##1536
07b80     F2 28 02 FB | 	rdlong	local06, objptr
07b84     14 1F 02 F6 | 	mov	local01, local06
07b88     01 1E 66 F0 | 	shl	local01, #1
07b8c     14 1F 02 F1 | 	add	local01, local06
07b90     02 1E 66 F0 | 	shl	local01, #2
07b94     03 00 00 FF 
07b98     00 E4 85 F1 | 	sub	objptr, ##1536
07b9c     F2 1E 02 F1 | 	add	local01, objptr
07ba0     04 1E 06 F1 | 	add	local01, #4
07ba4     0F 2B 62 FC | 	wrlong	local07, local01
07ba8     03 00 00 FF 
07bac     00 E4 05 F1 | 	add	objptr, ##1536
07bb0     F2 2A 02 FB | 	rdlong	local07, objptr
07bb4     15 29 02 F6 | 	mov	local06, local07
07bb8     01 28 66 F0 | 	shl	local06, #1
07bbc     15 29 02 F1 | 	add	local06, local07
07bc0     02 28 66 F0 | 	shl	local06, #2
07bc4     03 00 00 FF 
07bc8     00 E4 85 F1 | 	sub	objptr, ##1536
07bcc     F2 28 02 F1 | 	add	local06, objptr
07bd0     08 28 06 F1 | 	add	local06, #8
07bd4     14 27 62 FC | 	wrlong	local05, local06
07bd8     03 00 00 FF 
07bdc     00 E4 05 F1 | 	add	objptr, ##1536
07be0     F2 28 02 FB | 	rdlong	local06, objptr
07be4     01 28 06 F1 | 	add	local06, #1
07be8     F2 28 62 FC | 	wrlong	local06, objptr
07bec     13 00 00 FF 
07bf0     38 E4 85 F1 | 	sub	objptr, ##9784
07bf4     F2 28 02 FB | 	rdlong	local06, objptr
07bf8     01 28 06 F1 | 	add	local06, #1
07bfc     F2 28 62 FC | 	wrlong	local06, objptr
07c00     2E 00 00 FF 
07c04     08 E4 85 F1 | 	sub	objptr, ##23560
07c08     3C 05 90 FD | 	jmp	#LR__0666
07c0c                 | LR__0654
07c0c     2E 00 00 FF 
07c10     08 E4 05 F1 | 	add	objptr, ##23560
07c14     F2 28 02 FB | 	rdlong	local06, objptr
07c18     03 28 66 F0 | 	shl	local06, #3
07c1c     02 00 00 FF 
07c20     38 E4 85 F1 | 	sub	objptr, ##1080
07c24     F2 28 02 F1 | 	add	local06, objptr
07c28     14 13 02 FB | 	rdlong	arg01, local06
07c2c     00 14 06 F6 | 	mov	arg02, #0
07c30     2B 00 00 FF 
07c34     D0 E5 85 F1 | 	sub	objptr, ##22480
07c38     10 0C B1 FD | 	call	#__system____builtin_atoi
07c3c     FD 24 02 FD | 	qmul	local04, result1
07c40     41 00 00 FF 
07c44     40 E4 05 F1 | 	add	objptr, ##33344
07c48     F2 28 02 FB | 	rdlong	local06, objptr
07c4c     14 2D 02 F6 | 	mov	local08, local06
07c50     01 2C 66 F0 | 	shl	local08, #1
07c54     14 2D 02 F1 | 	add	local08, local06
07c58     02 2C 66 F0 | 	shl	local08, #2
07c5c     03 00 00 FF 
07c60     00 E4 85 F1 | 	sub	objptr, ##1536
07c64     F2 2C 02 F1 | 	add	local08, objptr
07c68     03 00 00 FF 
07c6c     00 E4 05 F1 | 	add	objptr, ##1536
07c70     18 1E 62 FD | 	getqx	local01
07c74     1C 22 06 F6 | 	mov	local03, #28
07c78     0F 29 02 F6 | 	mov	local06, local01
07c7c     10 2B 02 F6 | 	mov	local07, local02
07c80     16 29 62 FC | 	wrlong	local06, local08
07c84     11 2D 02 F6 | 	mov	local08, local03
07c88     F2 28 02 FB | 	rdlong	local06, objptr
07c8c     14 27 02 F6 | 	mov	local05, local06
07c90     01 26 66 F0 | 	shl	local05, #1
07c94     14 27 02 F1 | 	add	local05, local06
07c98     02 26 66 F0 | 	shl	local05, #2
07c9c     03 00 00 FF 
07ca0     00 E4 85 F1 | 	sub	objptr, ##1536
07ca4     F2 26 02 F1 | 	add	local05, objptr
07ca8     04 26 06 F1 | 	add	local05, #4
07cac     13 2B 62 FC | 	wrlong	local07, local05
07cb0     03 00 00 FF 
07cb4     00 E4 05 F1 | 	add	objptr, ##1536
07cb8     F2 2A 02 FB | 	rdlong	local07, objptr
07cbc     15 29 02 F6 | 	mov	local06, local07
07cc0     01 28 66 F0 | 	shl	local06, #1
07cc4     15 29 02 F1 | 	add	local06, local07
07cc8     02 28 66 F0 | 	shl	local06, #2
07ccc     03 00 00 FF 
07cd0     00 E4 85 F1 | 	sub	objptr, ##1536
07cd4     F2 28 02 F1 | 	add	local06, objptr
07cd8     08 28 06 F1 | 	add	local06, #8
07cdc     14 2D 62 FC | 	wrlong	local08, local06
07ce0     03 00 00 FF 
07ce4     00 E4 05 F1 | 	add	objptr, ##1536
07ce8     F2 28 02 FB | 	rdlong	local06, objptr
07cec     01 28 06 F1 | 	add	local06, #1
07cf0     F2 28 62 FC | 	wrlong	local06, objptr
07cf4     13 00 00 FF 
07cf8     38 E4 85 F1 | 	sub	objptr, ##9784
07cfc     F2 28 02 FB | 	rdlong	local06, objptr
07d00     01 28 06 F1 | 	add	local06, #1
07d04     F2 28 62 FC | 	wrlong	local06, objptr
07d08     2E 00 00 FF 
07d0c     08 E4 85 F1 | 	sub	objptr, ##23560
07d10     34 04 90 FD | 	jmp	#LR__0666
07d14                 | LR__0655
07d14                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
07d14     01 24 0E F2 | 	cmp	local04, #1 wz
07d18     48 00 90 5D |  if_ne	jmp	#LR__0656
07d1c     00 C0 1F FF 
07d20     00 28 06 F6 | 	mov	local06, ##1065353216
07d24     2E 00 00 FF 
07d28     08 E4 05 F1 | 	add	objptr, ##23560
07d2c     F2 2C 02 FB | 	rdlong	local08, objptr
07d30     03 2C 66 F0 | 	shl	local08, #3
07d34     02 00 00 FF 
07d38     38 E4 85 F1 | 	sub	objptr, ##1080
07d3c     F2 2C 02 F1 | 	add	local08, objptr
07d40     16 13 02 FB | 	rdlong	arg01, local08
07d44     2B 00 00 FF 
07d48     D0 E5 85 F1 | 	sub	objptr, ##22480
07d4c     6C 0C B1 FD | 	call	#__system____builtin_atof
07d50     FD 14 02 F6 | 	mov	arg02, result1
07d54     14 13 02 F6 | 	mov	arg01, local06
07d58     78 04 B1 FD | 	call	#__system___float_mul
07d5c     FD 1E 02 F6 | 	mov	local01, result1
07d60     1E 22 06 F6 | 	mov	local03, #30
07d64                 | LR__0656
07d64                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
07d64     FF FF 7F FF 
07d68     FF 25 0E F2 | 	cmp	local04, ##-1 wz
07d6c     48 00 90 5D |  if_ne	jmp	#LR__0657
07d70     00 C0 5F FF 
07d74     00 28 06 F6 | 	mov	local06, ##-1082130432
07d78     2E 00 00 FF 
07d7c     08 E4 05 F1 | 	add	objptr, ##23560
07d80     F2 2C 02 FB | 	rdlong	local08, objptr
07d84     03 2C 66 F0 | 	shl	local08, #3
07d88     02 00 00 FF 
07d8c     38 E4 85 F1 | 	sub	objptr, ##1080
07d90     F2 2C 02 F1 | 	add	local08, objptr
07d94     16 13 02 FB | 	rdlong	arg01, local08
07d98     2B 00 00 FF 
07d9c     D0 E5 85 F1 | 	sub	objptr, ##22480
07da0     18 0C B1 FD | 	call	#__system____builtin_atof
07da4     FD 14 02 F6 | 	mov	arg02, result1
07da8     14 13 02 F6 | 	mov	arg01, local06
07dac     24 04 B1 FD | 	call	#__system___float_mul
07db0     FD 1E 02 F6 | 	mov	local01, result1
07db4     1E 22 06 F6 | 	mov	local03, #30
07db8                 | LR__0657
07db8     0F 29 02 F6 | 	mov	local06, local01
07dbc     10 2B 02 F6 | 	mov	local07, local02
07dc0     11 27 02 F6 | 	mov	local05, local03
07dc4     41 00 00 FF 
07dc8     40 E4 05 F1 | 	add	objptr, ##33344
07dcc     F2 1E 02 FB | 	rdlong	local01, objptr
07dd0     0F 2D 02 F6 | 	mov	local08, local01
07dd4     01 2C 66 F0 | 	shl	local08, #1
07dd8     0F 2D 02 F1 | 	add	local08, local01
07ddc     02 2C 66 F0 | 	shl	local08, #2
07de0     03 00 00 FF 
07de4     00 E4 85 F1 | 	sub	objptr, ##1536
07de8     F2 2C 02 F1 | 	add	local08, objptr
07dec     16 29 62 FC | 	wrlong	local06, local08
07df0     03 00 00 FF 
07df4     00 E4 05 F1 | 	add	objptr, ##1536
07df8     F2 2C 02 FB | 	rdlong	local08, objptr
07dfc     16 29 02 F6 | 	mov	local06, local08
07e00     01 28 66 F0 | 	shl	local06, #1
07e04     16 29 02 F1 | 	add	local06, local08
07e08     02 28 66 F0 | 	shl	local06, #2
07e0c     03 00 00 FF 
07e10     00 E4 85 F1 | 	sub	objptr, ##1536
07e14     F2 28 02 F1 | 	add	local06, objptr
07e18     04 28 06 F1 | 	add	local06, #4
07e1c     14 2B 62 FC | 	wrlong	local07, local06
07e20     03 00 00 FF 
07e24     00 E4 05 F1 | 	add	objptr, ##1536
07e28     F2 2C 02 FB | 	rdlong	local08, objptr
07e2c     16 2B 02 F6 | 	mov	local07, local08
07e30     01 2A 66 F0 | 	shl	local07, #1
07e34     16 2B 02 F1 | 	add	local07, local08
07e38     02 2A 66 F0 | 	shl	local07, #2
07e3c     03 00 00 FF 
07e40     00 E4 85 F1 | 	sub	objptr, ##1536
07e44     F2 2A 02 F1 | 	add	local07, objptr
07e48     08 2A 06 F1 | 	add	local07, #8
07e4c     15 27 62 FC | 	wrlong	local05, local07
07e50     03 00 00 FF 
07e54     00 E4 05 F1 | 	add	objptr, ##1536
07e58     F2 28 02 FB | 	rdlong	local06, objptr
07e5c     01 28 06 F1 | 	add	local06, #1
07e60     F2 28 62 FC | 	wrlong	local06, objptr
07e64     13 00 00 FF 
07e68     38 E4 85 F1 | 	sub	objptr, ##9784
07e6c     F2 28 02 FB | 	rdlong	local06, objptr
07e70     01 28 06 F1 | 	add	local06, #1
07e74     F2 28 62 FC | 	wrlong	local06, objptr
07e78     2E 00 00 FF 
07e7c     08 E4 85 F1 | 	sub	objptr, ##23560
07e80     C4 02 90 FD | 	jmp	#LR__0666
07e84                 | LR__0658
07e84     1F 22 06 F6 | 	mov	local03, #31
07e88     2E 00 00 FF 
07e8c     08 E4 05 F1 | 	add	objptr, ##23560
07e90     F2 16 02 FB | 	rdlong	arg03, objptr
07e94     03 16 66 F0 | 	shl	arg03, #3
07e98     02 00 00 FF 
07e9c     38 E4 85 F1 | 	sub	objptr, ##1080
07ea0     F2 16 02 F1 | 	add	arg03, objptr
07ea4     0B 13 02 FB | 	rdlong	arg01, arg03
07ea8     2B 00 00 FF 
07eac     D0 E5 85 F1 | 	sub	objptr, ##22480
07eb0     09 2F 02 F6 | 	mov	local09, arg01
07eb4     97 06 48 FB | 	callpa	#(@LR__0660-@LR__0659)>>2,fcache_load_ptr_
07eb8                 | LR__0659
07eb8     17 FB C9 FA | 	rdbyte	result1, local09 wz
07ebc     01 2E 06 51 |  if_ne	add	local09, #1
07ec0     F4 FF 9F 5D |  if_ne	jmp	#LR__0659
07ec4                 | LR__0660
07ec4     09 2F 82 F1 | 	sub	local09, arg01
07ec8     17 FB 01 F6 | 	mov	result1, local09
07ecc     52 00 00 FF 
07ed0     60 E4 05 F1 | 	add	objptr, ##42080
07ed4     F2 FA 61 FC | 	wrlong	result1, objptr
07ed8     24 E4 85 F1 | 	sub	objptr, #36
07edc     F2 12 02 FB | 	rdlong	arg01, objptr
07ee0     FD 12 82 F1 | 	sub	arg01, result1
07ee4     04 12 86 F1 | 	sub	arg01, #4
07ee8     03 12 26 F5 | 	andn	arg01, #3
07eec     F2 12 62 FC | 	wrlong	arg01, objptr
07ef0     24 E4 05 F1 | 	add	objptr, #36
07ef4     F2 14 02 FB | 	rdlong	arg02, objptr
07ef8     01 16 06 F6 | 	mov	arg03, #1
07efc     00 18 06 F6 | 	mov	arg04, #0
07f00     46 00 00 FF 
07f04     A0 E5 85 F1 | 	sub	objptr, ##36256
07f08                 | '     return fill(addr, pattern, count, listPtr, 4)
07f08     04 1A 06 F6 | 	mov	arg05, #4
07f0c     FC CE B0 FD | 	call	#_psram_spin2_fill
07f10                 | '     pslpoke memtop,l
07f10                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
07f10     01 30 06 F6 | 	mov	local10, #1
07f14     46 00 00 FF 
07f18     A0 E5 05 F1 | 	add	objptr, ##36256
07f1c     F2 32 02 FB | 	rdlong	local11, objptr
07f20     52 00 00 FF 
07f24     60 E4 85 F1 | 	sub	objptr, ##42080
07f28     01 32 06 F1 | 	add	local11, #1
07f2c                 | LR__0661
07f2c     19 31 52 F2 | 	cmps	local10, local11 wc
07f30     78 00 90 3D |  if_ae	jmp	#LR__0662
07f34     52 00 00 FF 
07f38     3C E4 05 F1 | 	add	objptr, ##42044
07f3c     F2 2A 02 FB | 	rdlong	local07, objptr
07f40     03 2A 06 F1 | 	add	local07, #3
07f44     18 2B 02 F1 | 	add	local07, local10
07f48     24 00 00 FF 
07f4c     34 E4 85 F1 | 	sub	objptr, ##18484
07f50     F2 2C 02 FB | 	rdlong	local08, objptr
07f54     03 2C 66 F0 | 	shl	local08, #3
07f58     02 00 00 FF 
07f5c     38 E4 85 F1 | 	sub	objptr, ##1080
07f60     F2 2C 02 F1 | 	add	local08, objptr
07f64     16 13 02 FB | 	rdlong	arg01, local08
07f68     18 15 02 F6 | 	mov	arg02, local10
07f6c     01 16 06 F6 | 	mov	arg03, #1
07f70     2B 00 00 FF 
07f74     D0 E5 85 F1 | 	sub	objptr, ##22480
07f78     6C F9 B0 FD | 	call	#__system__Mid_S
07f7c     FD 14 C2 FA | 	rdbyte	arg02, result1
07f80     15 13 02 F6 | 	mov	arg01, local07
07f84     01 16 06 F6 | 	mov	arg03, #1
07f88     00 18 06 F6 | 	mov	arg04, #0
07f8c     0B 00 00 FF 
07f90     C0 E4 05 F1 | 	add	objptr, ##5824
07f94                 | '     return fill(addr, pattern, count, listPtr, 1)
07f94     01 1A 06 F6 | 	mov	arg05, #1
07f98     70 CE B0 FD | 	call	#_psram_spin2_fill
07f9c     0B 00 00 FF 
07fa0     C0 E4 85 F1 | 	sub	objptr, ##5824
07fa4     01 30 06 F1 | 	add	local10, #1
07fa8     80 FF 9F FD | 	jmp	#LR__0661
07fac                 | LR__0662
07fac     52 00 00 FF 
07fb0     3C E4 05 F1 | 	add	objptr, ##42044
07fb4     F2 1E 02 FB | 	rdlong	local01, objptr
07fb8     2B 22 06 F6 | 	mov	local03, #43
07fbc     0F 29 02 F6 | 	mov	local06, local01
07fc0     10 2B 02 F6 | 	mov	local07, local02
07fc4     11 33 02 F6 | 	mov	local11, local03
07fc8     10 00 00 FF 
07fcc     FC E5 85 F1 | 	sub	objptr, ##8700
07fd0     F2 30 02 FB | 	rdlong	local10, objptr
07fd4     18 2D 02 F6 | 	mov	local08, local10
07fd8     01 2C 66 F0 | 	shl	local08, #1
07fdc     18 2D 02 F1 | 	add	local08, local10
07fe0     02 2C 66 F0 | 	shl	local08, #2
07fe4     03 00 00 FF 
07fe8     00 E4 85 F1 | 	sub	objptr, ##1536
07fec     F2 2C 02 F1 | 	add	local08, objptr
07ff0     16 29 62 FC | 	wrlong	local06, local08
07ff4     03 00 00 FF 
07ff8     00 E4 05 F1 | 	add	objptr, ##1536
07ffc     F2 30 02 FB | 	rdlong	local10, objptr
08000     18 2D 02 F6 | 	mov	local08, local10
08004     01 2C 66 F0 | 	shl	local08, #1
08008     18 2D 02 F1 | 	add	local08, local10
0800c     02 2C 66 F0 | 	shl	local08, #2
08010     03 00 00 FF 
08014     00 E4 85 F1 | 	sub	objptr, ##1536
08018     F2 2C 02 F1 | 	add	local08, objptr
0801c     04 2C 06 F1 | 	add	local08, #4
08020     16 2B 62 FC | 	wrlong	local07, local08
08024     03 00 00 FF 
08028     00 E4 05 F1 | 	add	objptr, ##1536
0802c     F2 30 02 FB | 	rdlong	local10, objptr
08030     18 2D 02 F6 | 	mov	local08, local10
08034     01 2C 66 F0 | 	shl	local08, #1
08038     18 2D 02 F1 | 	add	local08, local10
0803c     02 2C 66 F0 | 	shl	local08, #2
08040     03 00 00 FF 
08044     00 E4 85 F1 | 	sub	objptr, ##1536
08048     F2 2C 02 F1 | 	add	local08, objptr
0804c     08 2C 06 F1 | 	add	local08, #8
08050     16 33 62 FC | 	wrlong	local11, local08
08054     03 00 00 FF 
08058     00 E4 05 F1 | 	add	objptr, ##1536
0805c     F2 28 02 FB | 	rdlong	local06, objptr
08060     01 28 06 F1 | 	add	local06, #1
08064     F2 28 62 FC | 	wrlong	local06, objptr
08068     13 00 00 FF 
0806c     38 E4 85 F1 | 	sub	objptr, ##9784
08070     F2 28 02 FB | 	rdlong	local06, objptr
08074     01 28 06 F1 | 	add	local06, #1
08078     F2 28 62 FC | 	wrlong	local06, objptr
0807c     2E 00 00 FF 
08080     08 E4 85 F1 | 	sub	objptr, ##23560
08084     C0 00 90 FD | 	jmp	#LR__0666
08088                 | LR__0663
08088     12 13 02 F6 | 	mov	arg01, local04
0808c     B8 03 B0 FD | 	call	#_getvar
08090     2E 00 00 FF 
08094     08 E4 05 F1 | 	add	objptr, ##23560
08098     F2 28 02 FB | 	rdlong	local06, objptr
0809c     01 28 06 F1 | 	add	local06, #1
080a0     F2 28 62 FC | 	wrlong	local06, objptr
080a4     2E 00 00 FF 
080a8     08 E4 85 F1 | 	sub	objptr, ##23560
080ac     98 00 90 FD | 	jmp	#LR__0666
080b0                 | LR__0664
080b0     2E 00 00 FF 
080b4     08 E4 05 F1 | 	add	objptr, ##23560
080b8     F2 28 02 FB | 	rdlong	local06, objptr
080bc     01 28 06 F1 | 	add	local06, #1
080c0     F2 28 62 FC | 	wrlong	local06, objptr
080c4     2E 00 00 FF 
080c8     08 E4 85 F1 | 	sub	objptr, ##23560
080cc     F4 F3 BF FD | 	call	#_expr
080d0                 | '     ct+=1
080d0                 | '     expr() 
080d0                 | '     if lparts(ct).token=token_rpar then ct+=1
080d0     2E 00 00 FF 
080d4     08 E4 05 F1 | 	add	objptr, ##23560
080d8     F2 32 02 FB | 	rdlong	local11, objptr
080dc     03 32 66 F0 | 	shl	local11, #3
080e0     02 00 00 FF 
080e4     38 E4 85 F1 | 	sub	objptr, ##1080
080e8     F2 32 02 F1 | 	add	local11, objptr
080ec     04 32 06 F1 | 	add	local11, #4
080f0     19 33 02 FB | 	rdlong	local11, local11
080f4     14 32 0E F2 | 	cmp	local11, #20 wz
080f8     2B 00 00 FF 
080fc     D0 E5 85 F1 | 	sub	objptr, ##22480
08100     44 00 90 5D |  if_ne	jmp	#LR__0666
08104     2E 00 00 FF 
08108     08 E4 05 F1 | 	add	objptr, ##23560
0810c     F2 28 02 FB | 	rdlong	local06, objptr
08110     01 28 06 F1 | 	add	local06, #1
08114     F2 28 62 FC | 	wrlong	local06, objptr
08118     2E 00 00 FF 
0811c     08 E4 85 F1 | 	sub	objptr, ##23560
08120     24 00 90 FD | 	jmp	#LR__0666
08124                 | LR__0665
08124     12 13 02 F6 | 	mov	arg01, local04
08128     28 00 B0 FD | 	call	#_getfun
0812c     2E 00 00 FF 
08130     08 E4 05 F1 | 	add	objptr, ##23560
08134     F2 28 02 FB | 	rdlong	local06, objptr
08138     01 28 06 F1 | 	add	local06, #1
0813c     F2 28 62 FC | 	wrlong	local06, objptr
08140     2E 00 00 FF 
08144     08 E4 85 F1 | 	sub	objptr, ##23560
08148                 | LR__0666
08148     A7 F0 03 F6 | 	mov	ptra, fp
0814c     B2 00 A0 FD | 	call	#popregs_
08150                 | _getvalue_ret
08150     2D 00 64 FD | 	ret
08154                 | 
08154                 | ' 
08154                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
08154                 | _getfun
08154     0A 4A 05 F6 | 	mov	COUNT_, #10
08158     A8 00 A0 FD | 	call	#pushregs_
0815c                 | _getfun_enter
0815c     09 25 02 F6 | 	mov	local04, arg01
08160     2E 00 00 FF 
08164     08 E4 05 F1 | 	add	objptr, ##23560
08168     F2 26 02 FB | 	rdlong	local05, objptr
0816c     13 29 02 F6 | 	mov	local06, local05
08170     00 2A 06 F6 | 	mov	local07, #0
08174                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
08174                 | ' oldct=ct
08174                 | ' numpar=0
08174                 | '   
08174                 | ' if lparts(ct+1).token=token_lpar then
08174     01 26 06 F1 | 	add	local05, #1
08178     03 26 66 F0 | 	shl	local05, #3
0817c     02 00 00 FF 
08180     38 E4 85 F1 | 	sub	objptr, ##1080
08184     F2 26 02 F1 | 	add	local05, objptr
08188     04 26 06 F1 | 	add	local05, #4
0818c     13 27 02 FB | 	rdlong	local05, local05
08190     15 26 0E F2 | 	cmp	local05, #21 wz
08194     2B 00 00 FF 
08198     D0 E5 85 F1 | 	sub	objptr, ##22480
0819c     08 01 90 5D |  if_ne	jmp	#LR__0674
081a0     2E 00 00 FF 
081a4     08 E4 05 F1 | 	add	objptr, ##23560
081a8     F2 2C 02 FB | 	rdlong	local08, objptr
081ac     01 2C 06 F1 | 	add	local08, #1
081b0     F2 2C 62 FC | 	wrlong	local08, objptr
081b4     2E 00 00 FF 
081b8     08 E4 85 F1 | 	sub	objptr, ##23560
081bc                 | '   ct+=1 											' omit this lpar, this is for expr list
081bc                 | '   do
081bc                 | LR__0670
081bc     2E 00 00 FF 
081c0     08 E4 05 F1 | 	add	objptr, ##23560
081c4     F2 26 02 FB | 	rdlong	local05, objptr
081c8     01 26 06 F1 | 	add	local05, #1
081cc     F2 26 62 FC | 	wrlong	local05, objptr
081d0                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
081d0                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
081d0     03 26 66 F0 | 	shl	local05, #3
081d4     02 00 00 FF 
081d8     38 E4 85 F1 | 	sub	objptr, ##1080
081dc     F2 26 02 F1 | 	add	local05, objptr
081e0     04 26 06 F1 | 	add	local05, #4
081e4     13 2D 02 FB | 	rdlong	local08, local05
081e8     15 2C 0E F2 | 	cmp	local08, #21 wz
081ec     2B 00 00 FF 
081f0     D0 E5 85 F1 | 	sub	objptr, ##22480
081f4     40 00 90 5D |  if_ne	jmp	#LR__0671
081f8     2E 00 00 FF 
081fc     08 E4 05 F1 | 	add	objptr, ##23560
08200     F2 2C 02 FB | 	rdlong	local08, objptr
08204     01 2C 06 F1 | 	add	local08, #1
08208     F2 2C 62 FC | 	wrlong	local08, objptr
0820c     2E 00 00 FF 
08210     08 E4 85 F1 | 	sub	objptr, ##23560
08214     AC F2 BF FD | 	call	#_expr
08218     2E 00 00 FF 
0821c     08 E4 05 F1 | 	add	objptr, ##23560
08220     F2 2C 02 FB | 	rdlong	local08, objptr
08224     01 2C 06 F1 | 	add	local08, #1
08228     F2 2C 62 FC | 	wrlong	local08, objptr
0822c     2E 00 00 FF 
08230     08 E4 85 F1 | 	sub	objptr, ##23560
08234     04 00 90 FD | 	jmp	#LR__0672
08238                 | LR__0671
08238     88 F2 BF FD | 	call	#_expr
0823c                 | LR__0672
0823c     01 2A 06 F1 | 	add	local07, #1
08240     2E 00 00 FF 
08244     08 E4 05 F1 | 	add	objptr, ##23560
08248     F2 26 02 FB | 	rdlong	local05, objptr
0824c     03 26 66 F0 | 	shl	local05, #3
08250     02 00 00 FF 
08254     38 E4 85 F1 | 	sub	objptr, ##1080
08258     F2 26 02 F1 | 	add	local05, objptr
0825c     04 26 06 F1 | 	add	local05, #4
08260     13 2D 02 FB | 	rdlong	local08, local05
08264     14 2C 0E F2 | 	cmp	local08, #20 wz
08268     2B 00 00 FF 
0826c     D0 E5 85 F1 | 	sub	objptr, ##22480
08270     34 00 90 AD |  if_e	jmp	#LR__0673
08274     2E 00 00 FF 
08278     08 E4 05 F1 | 	add	objptr, ##23560
0827c     F2 2C 02 FB | 	rdlong	local08, objptr
08280     03 2C 66 F0 | 	shl	local08, #3
08284     02 00 00 FF 
08288     38 E4 85 F1 | 	sub	objptr, ##1080
0828c     F2 2C 02 F1 | 	add	local08, objptr
08290     04 2C 06 F1 | 	add	local08, #4
08294     16 2D 02 FB | 	rdlong	local08, local08
08298     FE 2D 0E F2 | 	cmp	local08, #510 wz
0829c     2B 00 00 FF 
082a0     D0 E5 85 F1 | 	sub	objptr, ##22480
082a4     14 FF 9F 5D |  if_ne	jmp	#LR__0670
082a8                 | LR__0673
082a8                 | LR__0674
082a8     15 1F 02 F6 | 	mov	local01, local07
082ac     03 28 66 F0 | 	shl	local06, #3
082b0     2B 00 00 FF 
082b4     D0 E5 05 F1 | 	add	objptr, ##22480
082b8     F2 28 02 F1 | 	add	local06, objptr
082bc     04 28 06 F1 | 	add	local06, #4
082c0     14 23 02 FB | 	rdlong	local03, local06
082c4     0F 2D 02 F6 | 	mov	local08, local01
082c8     10 2B 02 F6 | 	mov	local07, local02
082cc     11 29 02 F6 | 	mov	local06, local03
082d0     15 00 00 FF 
082d4     70 E4 05 F1 | 	add	objptr, ##10864
082d8     F2 26 02 FB | 	rdlong	local05, objptr
082dc     13 13 02 F6 | 	mov	arg01, local05
082e0     01 12 66 F0 | 	shl	arg01, #1
082e4     13 13 02 F1 | 	add	arg01, local05
082e8     02 12 66 F0 | 	shl	arg01, #2
082ec     03 00 00 FF 
082f0     00 E4 85 F1 | 	sub	objptr, ##1536
082f4     F2 12 02 F1 | 	add	arg01, objptr
082f8     09 2D 62 FC | 	wrlong	local08, arg01
082fc     03 00 00 FF 
08300     00 E4 05 F1 | 	add	objptr, ##1536
08304     F2 2C 02 FB | 	rdlong	local08, objptr
08308     16 2F 02 F6 | 	mov	local09, local08
0830c     01 2E 66 F0 | 	shl	local09, #1
08310     16 2F 02 F1 | 	add	local09, local08
08314     02 2E 66 F0 | 	shl	local09, #2
08318     03 00 00 FF 
0831c     00 E4 85 F1 | 	sub	objptr, ##1536
08320     F2 2E 02 F1 | 	add	local09, objptr
08324     04 2E 06 F1 | 	add	local09, #4
08328     17 2B 62 FC | 	wrlong	local07, local09
0832c     03 00 00 FF 
08330     00 E4 05 F1 | 	add	objptr, ##1536
08334     F2 2C 02 FB | 	rdlong	local08, objptr
08338     16 31 02 F6 | 	mov	local10, local08
0833c     01 30 66 F0 | 	shl	local10, #1
08340     16 31 02 F1 | 	add	local10, local08
08344     02 30 66 F0 | 	shl	local10, #2
08348     03 00 00 FF 
0834c     00 E4 85 F1 | 	sub	objptr, ##1536
08350     F2 30 02 F1 | 	add	local10, objptr
08354     08 30 06 F1 | 	add	local10, #8
08358     18 29 62 FC | 	wrlong	local06, local10
0835c     03 00 00 FF 
08360     00 E4 05 F1 | 	add	objptr, ##1536
08364     F2 2C 02 FB | 	rdlong	local08, objptr
08368     01 2C 06 F1 | 	add	local08, #1
0836c     F2 2C 62 FC | 	wrlong	local08, objptr
08370     41 00 00 FF 
08374     40 E4 85 F1 | 	sub	objptr, ##33344
08378                 | ' 
08378                 | ' t2.result.uresult=numpar
08378                 | ' 
08378                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
08378                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
08378                 | ' 
08378                 | '   
08378                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
08378     FF FF 7F FF 
0837c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
08380     B8 00 90 5D |  if_ne	jmp	#LR__0675
08384     15 22 06 F6 | 	mov	local03, #21
08388     0F 2D 02 F6 | 	mov	local08, local01
0838c     10 2B 02 F6 | 	mov	local07, local02
08390     11 29 02 F6 | 	mov	local06, local03
08394     41 00 00 FF 
08398     40 E4 05 F1 | 	add	objptr, ##33344
0839c     F2 26 02 FB | 	rdlong	local05, objptr
083a0     13 13 02 F6 | 	mov	arg01, local05
083a4     01 12 66 F0 | 	shl	arg01, #1
083a8     13 13 02 F1 | 	add	arg01, local05
083ac     02 12 66 F0 | 	shl	arg01, #2
083b0     03 00 00 FF 
083b4     00 E4 85 F1 | 	sub	objptr, ##1536
083b8     F2 12 02 F1 | 	add	arg01, objptr
083bc     09 2D 62 FC | 	wrlong	local08, arg01
083c0     03 00 00 FF 
083c4     00 E4 05 F1 | 	add	objptr, ##1536
083c8     F2 30 02 FB | 	rdlong	local10, objptr
083cc     18 2F 02 F6 | 	mov	local09, local10
083d0     01 2E 66 F0 | 	shl	local09, #1
083d4     18 2F 02 F1 | 	add	local09, local10
083d8     02 2E 66 F0 | 	shl	local09, #2
083dc     03 00 00 FF 
083e0     00 E4 85 F1 | 	sub	objptr, ##1536
083e4     F2 2E 02 F1 | 	add	local09, objptr
083e8     04 2E 06 F1 | 	add	local09, #4
083ec     17 2B 62 FC | 	wrlong	local07, local09
083f0     03 00 00 FF 
083f4     00 E4 05 F1 | 	add	objptr, ##1536
083f8     F2 2E 02 FB | 	rdlong	local09, objptr
083fc     17 31 02 F6 | 	mov	local10, local09
08400     01 30 66 F0 | 	shl	local10, #1
08404     17 31 02 F1 | 	add	local10, local09
08408     02 30 66 F0 | 	shl	local10, #2
0840c     03 00 00 FF 
08410     00 E4 85 F1 | 	sub	objptr, ##1536
08414     F2 30 02 F1 | 	add	local10, objptr
08418     08 30 06 F1 | 	add	local10, #8
0841c     18 29 62 FC | 	wrlong	local06, local10
08420     03 00 00 FF 
08424     00 E4 05 F1 | 	add	objptr, ##1536
08428     F2 2C 02 FB | 	rdlong	local08, objptr
0842c     01 2C 06 F1 | 	add	local08, #1
08430     F2 2C 62 FC | 	wrlong	local08, objptr
08434     41 00 00 FF 
08438     40 E4 85 F1 | 	sub	objptr, ##33344
0843c                 | LR__0675
0843c     A7 F0 03 F6 | 	mov	ptra, fp
08440     B2 00 A0 FD | 	call	#popregs_
08444                 | _getfun_ret
08444     2D 00 64 FD | 	ret
08448                 | 
08448                 | '   
08448                 | '   
08448                 | ' sub getvar(m as integer) 
08448                 | _getvar
08448     0A 4A 05 F6 | 	mov	COUNT_, #10
0844c     A8 00 A0 FD | 	call	#pushregs_
08450                 | _getvar_enter
08450     09 25 02 F6 | 	mov	local04, arg01
08454     2E 00 00 FF 
08458     08 E4 05 F1 | 	add	objptr, ##23560
0845c     F2 14 02 FB | 	rdlong	arg02, objptr
08460     03 14 66 F0 | 	shl	arg02, #3
08464     02 00 00 FF 
08468     38 E4 85 F1 | 	sub	objptr, ##1080
0846c     F2 14 02 F1 | 	add	arg02, objptr
08470     0A 27 02 FB | 	rdlong	local05, arg02
08474     13 13 02 F6 | 	mov	arg01, local05
08478     01 14 06 F6 | 	mov	arg02, #1
0847c     2B 00 00 FF 
08480     D0 E5 85 F1 | 	sub	objptr, ##22480
08484     D0 F3 B0 FD | 	call	#__system__Right_S
08488     FD 28 02 F6 | 	mov	local06, result1
0848c     01 2A 66 F6 | 	neg	local07, #1
08490                 | ' 
08490                 | ' varname$=lparts(ct).part$
08490                 | ' suffix$=right$(varname$,1)
08490                 | ' j=-1
08490                 | ' 
08490                 | ' for i=0 to varnum-1
08490     00 2C 06 F6 | 	mov	local08, #0
08494     2B 00 00 FF 
08498     CC E5 05 F1 | 	add	objptr, ##22476
0849c     F2 2E 02 FB | 	rdlong	local09, objptr
084a0     2B 00 00 FF 
084a4     CC E5 85 F1 | 	sub	objptr, ##22476
084a8                 | LR__0680
084a8     17 2D 52 F2 | 	cmps	local08, local09 wc
084ac     38 00 90 3D |  if_ae	jmp	#LR__0681
084b0                 | '   if variables(i).name=varname$ then j=i : exit
084b0     16 15 02 F6 | 	mov	arg02, local08
084b4     04 14 66 F0 | 	shl	arg02, #4
084b8     0B 00 00 FF 
084bc     CC E5 05 F1 | 	add	objptr, ##6092
084c0     F2 14 02 F1 | 	add	arg02, objptr
084c4     0A 13 02 FB | 	rdlong	arg01, arg02
084c8     13 15 02 F6 | 	mov	arg02, local05
084cc     0B 00 00 FF 
084d0     CC E5 85 F1 | 	sub	objptr, ##6092
084d4     10 D3 B0 FD | 	call	#__system___string_cmp
084d8     00 FA 0D F2 | 	cmp	result1, #0 wz
084dc     16 2B 02 A6 |  if_e	mov	local07, local08
084e0     01 2C 06 51 |  if_ne	add	local08, #1
084e4     C0 FF 9F 5D |  if_ne	jmp	#LR__0680
084e8                 | LR__0681
084e8                 | ' if  j=-1 andalso varnum<maxvars then   
084e8     FF FF 7F FF 
084ec     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
084f0     A8 00 90 5D |  if_ne	jmp	#LR__0682
084f4     2B 00 00 FF 
084f8     CC E5 05 F1 | 	add	objptr, ##22476
084fc     F2 2E 02 FB | 	rdlong	local09, objptr
08500     2B 00 00 FF 
08504     CC E5 85 F1 | 	sub	objptr, ##22476
08508     01 00 00 FF 
0850c     FF 2F 56 F2 | 	cmps	local09, ##1023 wc
08510     88 00 90 3D |  if_ae	jmp	#LR__0682
08514     2B 00 00 FF 
08518     CC E5 05 F1 | 	add	objptr, ##22476
0851c     F2 2E 02 FB | 	rdlong	local09, objptr
08520     04 2E 66 F0 | 	shl	local09, #4
08524     20 00 00 FF 
08528     00 E4 85 F1 | 	sub	objptr, ##16384
0852c     F2 2E 02 F1 | 	add	local09, objptr
08530     17 27 62 FC | 	wrlong	local05, local09
08534     20 00 00 FF 
08538     00 E4 05 F1 | 	add	objptr, ##16384
0853c     F2 2E 02 FB | 	rdlong	local09, objptr
08540     04 2E 66 F0 | 	shl	local09, #4
08544     20 00 00 FF 
08548     00 E4 85 F1 | 	sub	objptr, ##16384
0854c     F2 2E 02 F1 | 	add	local09, objptr
08550     04 2E 06 F1 | 	add	local09, #4
08554     17 01 68 FC | 	wrlong	#0, local09
08558     20 00 00 FF 
0855c     00 E4 05 F1 | 	add	objptr, ##16384
08560     F2 2E 02 FB | 	rdlong	local09, objptr
08564     04 2E 66 F0 | 	shl	local09, #4
08568     20 00 00 FF 
0856c     00 E4 85 F1 | 	sub	objptr, ##16384
08570     F2 2E 02 F1 | 	add	local09, objptr
08574     0C 2E 06 F1 | 	add	local09, #12
08578     17 39 68 FC | 	wrlong	#28, local09
0857c     20 00 00 FF 
08580     00 E4 05 F1 | 	add	objptr, ##16384
08584     F2 2E 02 FB | 	rdlong	local09, objptr
08588     17 2B 02 F6 | 	mov	local07, local09
0858c     01 2E 06 F1 | 	add	local09, #1
08590     F2 2E 62 FC | 	wrlong	local09, objptr
08594     2B 00 00 FF 
08598     CC E5 85 F1 | 	sub	objptr, ##22476
0859c                 | LR__0682
0859c     00 2E 06 F6 | 	mov	local09, #0
085a0                 | ' numpar=0
085a0                 | ' ' check if it is an array
085a0                 | ' 
085a0                 | ' if lparts(ct+1).token=token_lpar then
085a0     2E 00 00 FF 
085a4     08 E4 05 F1 | 	add	objptr, ##23560
085a8     F2 2C 02 FB | 	rdlong	local08, objptr
085ac     01 2C 06 F1 | 	add	local08, #1
085b0     03 2C 66 F0 | 	shl	local08, #3
085b4     02 00 00 FF 
085b8     38 E4 85 F1 | 	sub	objptr, ##1080
085bc     F2 2C 02 F1 | 	add	local08, objptr
085c0     04 2C 06 F1 | 	add	local08, #4
085c4     16 2D 02 FB | 	rdlong	local08, local08
085c8     15 2C 0E F2 | 	cmp	local08, #21 wz
085cc     2B 00 00 FF 
085d0     D0 E5 85 F1 | 	sub	objptr, ##22480
085d4     08 01 90 5D |  if_ne	jmp	#LR__0687
085d8     2E 00 00 FF 
085dc     08 E4 05 F1 | 	add	objptr, ##23560
085e0     F2 30 02 FB | 	rdlong	local10, objptr
085e4     01 30 06 F1 | 	add	local10, #1
085e8     F2 30 62 FC | 	wrlong	local10, objptr
085ec     2E 00 00 FF 
085f0     08 E4 85 F1 | 	sub	objptr, ##23560
085f4                 | '   ct+=1 											' omit this lpar, this is for expr list
085f4                 | '   do
085f4                 | LR__0683
085f4     2E 00 00 FF 
085f8     08 E4 05 F1 | 	add	objptr, ##23560
085fc     F2 2C 02 FB | 	rdlong	local08, objptr
08600     01 2C 06 F1 | 	add	local08, #1
08604     F2 2C 62 FC | 	wrlong	local08, objptr
08608                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
08608                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
08608     03 2C 66 F0 | 	shl	local08, #3
0860c     02 00 00 FF 
08610     38 E4 85 F1 | 	sub	objptr, ##1080
08614     F2 2C 02 F1 | 	add	local08, objptr
08618     04 2C 06 F1 | 	add	local08, #4
0861c     16 31 02 FB | 	rdlong	local10, local08
08620     15 30 0E F2 | 	cmp	local10, #21 wz
08624     2B 00 00 FF 
08628     D0 E5 85 F1 | 	sub	objptr, ##22480
0862c     40 00 90 5D |  if_ne	jmp	#LR__0684
08630     2E 00 00 FF 
08634     08 E4 05 F1 | 	add	objptr, ##23560
08638     F2 30 02 FB | 	rdlong	local10, objptr
0863c     01 30 06 F1 | 	add	local10, #1
08640     F2 30 62 FC | 	wrlong	local10, objptr
08644     2E 00 00 FF 
08648     08 E4 85 F1 | 	sub	objptr, ##23560
0864c     74 EE BF FD | 	call	#_expr
08650     2E 00 00 FF 
08654     08 E4 05 F1 | 	add	objptr, ##23560
08658     F2 30 02 FB | 	rdlong	local10, objptr
0865c     01 30 06 F1 | 	add	local10, #1
08660     F2 30 62 FC | 	wrlong	local10, objptr
08664     2E 00 00 FF 
08668     08 E4 85 F1 | 	sub	objptr, ##23560
0866c     04 00 90 FD | 	jmp	#LR__0685
08670                 | LR__0684
08670     50 EE BF FD | 	call	#_expr
08674                 | LR__0685
08674     01 2E 06 F1 | 	add	local09, #1
08678     2E 00 00 FF 
0867c     08 E4 05 F1 | 	add	objptr, ##23560
08680     F2 2C 02 FB | 	rdlong	local08, objptr
08684     03 2C 66 F0 | 	shl	local08, #3
08688     02 00 00 FF 
0868c     38 E4 85 F1 | 	sub	objptr, ##1080
08690     F2 2C 02 F1 | 	add	local08, objptr
08694     04 2C 06 F1 | 	add	local08, #4
08698     16 31 02 FB | 	rdlong	local10, local08
0869c     14 30 0E F2 | 	cmp	local10, #20 wz
086a0     2B 00 00 FF 
086a4     D0 E5 85 F1 | 	sub	objptr, ##22480
086a8     34 00 90 AD |  if_e	jmp	#LR__0686
086ac     2E 00 00 FF 
086b0     08 E4 05 F1 | 	add	objptr, ##23560
086b4     F2 30 02 FB | 	rdlong	local10, objptr
086b8     03 30 66 F0 | 	shl	local10, #3
086bc     02 00 00 FF 
086c0     38 E4 85 F1 | 	sub	objptr, ##1080
086c4     F2 30 02 F1 | 	add	local10, objptr
086c8     04 30 06 F1 | 	add	local10, #4
086cc     18 31 02 FB | 	rdlong	local10, local10
086d0     FE 31 0E F2 | 	cmp	local10, #510 wz
086d4     2B 00 00 FF 
086d8     D0 E5 85 F1 | 	sub	objptr, ##22480
086dc     14 FF 9F 5D |  if_ne	jmp	#LR__0683
086e0                 | LR__0686
086e0                 | LR__0687
086e0     17 21 02 F6 | 	mov	local02, local09
086e4     11 22 06 F6 | 	mov	local03, #17
086e8     15 1F 02 F6 | 	mov	local01, local07
086ec     0F 31 02 F6 | 	mov	local10, local01
086f0     10 2F 02 F6 | 	mov	local09, local02
086f4     11 2D 02 F6 | 	mov	local08, local03
086f8     41 00 00 FF 
086fc     40 E4 05 F1 | 	add	objptr, ##33344
08700     F2 2A 02 FB | 	rdlong	local07, objptr
08704     15 29 02 F6 | 	mov	local06, local07
08708     01 28 66 F0 | 	shl	local06, #1
0870c     15 29 02 F1 | 	add	local06, local07
08710     02 28 66 F0 | 	shl	local06, #2
08714     03 00 00 FF 
08718     00 E4 85 F1 | 	sub	objptr, ##1536
0871c     F2 28 02 F1 | 	add	local06, objptr
08720     14 31 62 FC | 	wrlong	local10, local06
08724     03 00 00 FF 
08728     00 E4 05 F1 | 	add	objptr, ##1536
0872c     F2 30 02 FB | 	rdlong	local10, objptr
08730     18 27 02 F6 | 	mov	local05, local10
08734     01 26 66 F0 | 	shl	local05, #1
08738     18 27 02 F1 | 	add	local05, local10
0873c     02 26 66 F0 | 	shl	local05, #2
08740     03 00 00 FF 
08744     00 E4 85 F1 | 	sub	objptr, ##1536
08748     F2 26 02 F1 | 	add	local05, objptr
0874c     04 26 06 F1 | 	add	local05, #4
08750     13 2F 62 FC | 	wrlong	local09, local05
08754     03 00 00 FF 
08758     00 E4 05 F1 | 	add	objptr, ##1536
0875c     F2 30 02 FB | 	rdlong	local10, objptr
08760     18 FB 01 F6 | 	mov	result1, local10
08764     01 FA 65 F0 | 	shl	result1, #1
08768     18 FB 01 F1 | 	add	result1, local10
0876c     02 FA 65 F0 | 	shl	result1, #2
08770     03 00 00 FF 
08774     00 E4 85 F1 | 	sub	objptr, ##1536
08778     F2 FA 01 F1 | 	add	result1, objptr
0877c     08 FA 05 F1 | 	add	result1, #8
08780     FD 2C 62 FC | 	wrlong	local08, result1
08784     03 00 00 FF 
08788     00 E4 05 F1 | 	add	objptr, ##1536
0878c     F2 30 02 FB | 	rdlong	local10, objptr
08790     01 30 06 F1 | 	add	local10, #1
08794     F2 30 62 FC | 	wrlong	local10, objptr
08798     41 00 00 FF 
0879c     40 E4 85 F1 | 	sub	objptr, ##33344
087a0                 | ' 
087a0                 | ' t2.result.twowords(1)=numpar
087a0                 | ' 
087a0                 | ' 
087a0                 | ' 
087a0                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
087a0                 | ' 
087a0                 | ' 
087a0                 | '  
087a0                 | ' 
087a0                 | ' 701 
087a0                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
087a0                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
087a0     FF FF 7F FF 
087a4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
087a8     B8 00 90 5D |  if_ne	jmp	#LR__0688
087ac     15 22 06 F6 | 	mov	local03, #21
087b0     0F 31 02 F6 | 	mov	local10, local01
087b4     10 2F 02 F6 | 	mov	local09, local02
087b8     11 2D 02 F6 | 	mov	local08, local03
087bc     41 00 00 FF 
087c0     40 E4 05 F1 | 	add	objptr, ##33344
087c4     F2 2A 02 FB | 	rdlong	local07, objptr
087c8     15 29 02 F6 | 	mov	local06, local07
087cc     01 28 66 F0 | 	shl	local06, #1
087d0     15 29 02 F1 | 	add	local06, local07
087d4     02 28 66 F0 | 	shl	local06, #2
087d8     03 00 00 FF 
087dc     00 E4 85 F1 | 	sub	objptr, ##1536
087e0     F2 28 02 F1 | 	add	local06, objptr
087e4     14 31 62 FC | 	wrlong	local10, local06
087e8     03 00 00 FF 
087ec     00 E4 05 F1 | 	add	objptr, ##1536
087f0     F2 1E 02 FB | 	rdlong	local01, objptr
087f4     0F 27 02 F6 | 	mov	local05, local01
087f8     01 26 66 F0 | 	shl	local05, #1
087fc     0F 27 02 F1 | 	add	local05, local01
08800     02 26 66 F0 | 	shl	local05, #2
08804     03 00 00 FF 
08808     00 E4 85 F1 | 	sub	objptr, ##1536
0880c     F2 26 02 F1 | 	add	local05, objptr
08810     04 26 06 F1 | 	add	local05, #4
08814     13 2F 62 FC | 	wrlong	local09, local05
08818     03 00 00 FF 
0881c     00 E4 05 F1 | 	add	objptr, ##1536
08820     F2 1E 02 FB | 	rdlong	local01, objptr
08824     0F FB 01 F6 | 	mov	result1, local01
08828     01 FA 65 F0 | 	shl	result1, #1
0882c     0F FB 01 F1 | 	add	result1, local01
08830     02 FA 65 F0 | 	shl	result1, #2
08834     03 00 00 FF 
08838     00 E4 85 F1 | 	sub	objptr, ##1536
0883c     F2 FA 01 F1 | 	add	result1, objptr
08840     08 FA 05 F1 | 	add	result1, #8
08844     FD 2C 62 FC | 	wrlong	local08, result1
08848     03 00 00 FF 
0884c     00 E4 05 F1 | 	add	objptr, ##1536
08850     F2 30 02 FB | 	rdlong	local10, objptr
08854     01 30 06 F1 | 	add	local10, #1
08858     F2 30 62 FC | 	wrlong	local10, objptr
0885c     41 00 00 FF 
08860     40 E4 85 F1 | 	sub	objptr, ##33344
08864                 | LR__0688
08864     A7 F0 03 F6 | 	mov	ptra, fp
08868     B2 00 A0 FD | 	call	#popregs_
0886c                 | _getvar_ret
0886c     2D 00 64 FD | 	ret
08870                 | 
08870                 | ' 
08870                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
08870                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
08870                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
08870                 | ' 
08870                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
08870                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
08870                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
08870                 | ' 
08870                 | ' function execute_line (astart=0 as integer) as integer
08870                 | _execute_line
08870     04 4A 05 F6 | 	mov	COUNT_, #4
08874     A8 00 A0 FD | 	call	#pushregs_
08878     50 00 00 FF 
0887c     78 E5 05 F1 | 	add	objptr, ##41336
08880     F2 00 68 FC | 	wrlong	#0, objptr
08884                 | ' runptr2=0
08884                 | ' for lineptr_e=astart to lineptr-1
08884     0F 00 00 FF 
08888     34 E5 85 F1 | 	sub	objptr, ##7988
0888c     F2 12 62 FC | 	wrlong	arg01, objptr
08890     04 E4 85 F1 | 	sub	objptr, #4
08894     F2 1E 02 FB | 	rdlong	local01, objptr
08898     41 00 00 FF 
0889c     40 E4 85 F1 | 	sub	objptr, ##33344
088a0                 | LR__0690
088a0     41 00 00 FF 
088a4     44 E4 05 F1 | 	add	objptr, ##33348
088a8     F2 FA 01 FB | 	rdlong	result1, objptr
088ac     41 00 00 FF 
088b0     44 E4 85 F1 | 	sub	objptr, ##33348
088b4     0F FB 51 F2 | 	cmps	result1, local01 wc
088b8     98 00 90 3D |  if_ae	jmp	#LR__0691
088bc     41 00 00 FF 
088c0     44 E4 05 F1 | 	add	objptr, ##33348
088c4     F2 FA 01 FB | 	rdlong	result1, objptr
088c8     FD 20 02 F6 | 	mov	local02, result1
088cc     01 20 66 F0 | 	shl	local02, #1
088d0     FD 20 02 F1 | 	add	local02, result1
088d4     02 20 66 F0 | 	shl	local02, #2
088d8     03 00 00 FF 
088dc     04 E4 85 F1 | 	sub	objptr, ##1540
088e0     F2 20 02 F1 | 	add	local02, objptr
088e4     08 20 06 F1 | 	add	local02, #8
088e8     10 21 02 FB | 	rdlong	local02, local02
088ec     10 21 E2 F8 | 	getbyte	local02, local02, #0
088f0     02 20 66 F0 | 	shl	local02, #2
088f4     04 00 00 FF 
088f8     1C E4 85 F1 | 	sub	objptr, ##2076
088fc     F2 20 02 F1 | 	add	local02, objptr
08900     10 21 02 FB | 	rdlong	local02, local02
08904     10 23 02 F6 | 	mov	local03, local02
08908     13 20 46 F7 | 	zerox	local02, #19
0890c     14 22 46 F0 | 	shr	local03, #20
08910     02 22 66 F0 | 	shl	local03, #2
08914     ED 22 02 F1 | 	add	local03, __methods__
08918     11 23 02 FB | 	rdlong	local03, local03
0891c     3A 00 00 FF 
08920     24 E4 85 F1 | 	sub	objptr, ##29732
08924     F2 24 02 F6 | 	mov	local04, objptr
08928     10 E5 01 F6 | 	mov	objptr, local02
0892c     2D 22 62 FD | 	call	local03
08930     12 E5 01 F6 | 	mov	objptr, local04
08934     41 00 00 FF 
08938     44 E4 05 F1 | 	add	objptr, ##33348
0893c     F2 24 02 FB | 	rdlong	local04, objptr
08940     01 24 06 F1 | 	add	local04, #1
08944     F2 24 62 FC | 	wrlong	local04, objptr
08948     41 00 00 FF 
0894c     44 E4 85 F1 | 	sub	objptr, ##33348
08950     4C FF 9F FD | 	jmp	#LR__0690
08954                 | LR__0691
08954                 | ' return runptr2
08954     50 00 00 FF 
08958     78 E5 05 F1 | 	add	objptr, ##41336
0895c     F2 FA 01 FB | 	rdlong	result1, objptr
08960     50 00 00 FF 
08964     78 E5 85 F1 | 	sub	objptr, ##41336
08968     A7 F0 03 F6 | 	mov	ptra, fp
0896c     B2 00 A0 FD | 	call	#popregs_
08970                 | _execute_line_ret
08970     2D 00 64 FD | 	ret
08974                 | 
08974                 | ' 
08974                 | ' 
08974                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
08974                 | ' 
08974                 | ' function pop() as expr_result
08974                 | _pop
08974                 | ' 
08974                 | ' if stackpointer=0 then
08974     3A 00 00 FF 
08978     1C E4 05 F1 | 	add	objptr, ##29724
0897c     F2 FA 09 FB | 	rdlong	result1, objptr wz
08980     3A 00 00 FF 
08984     1C E4 85 F1 | 	sub	objptr, ##29724
08988     FF 04 06 A6 |  if_e	mov	_var03, #255
0898c     18 00 06 A6 |  if_e	mov	_var01, #24
08990     68 00 90 AD |  if_e	jmp	#LR__0700
08994     3A 00 00 FF 
08998     1C E4 05 F1 | 	add	objptr, ##29724
0899c     F2 FA 01 FB | 	rdlong	result1, objptr
089a0     01 FA 85 F1 | 	sub	result1, #1
089a4     F2 FA 61 FC | 	wrlong	result1, objptr
089a8     FD FE 01 F6 | 	mov	result3, result1
089ac     01 FE 65 F0 | 	shl	result3, #1
089b0     FD FE 01 F1 | 	add	result3, result1
089b4     02 FE 65 F0 | 	shl	result3, #2
089b8     0C 00 00 FF 
089bc     0C E4 85 F1 | 	sub	objptr, ##6156
089c0     F2 FE 01 F1 | 	add	result3, objptr
089c4     FF 00 02 FB | 	rdlong	_var01, result3
089c8     04 FE 05 F1 | 	add	result3, #4
089cc     FF FE 01 FB | 	rdlong	result3, result3
089d0     FD FC 01 F6 | 	mov	result2, result1
089d4     01 FC 65 F0 | 	shl	result2, #1
089d8     FD FC 01 F1 | 	add	result2, result1
089dc     02 FC 65 F0 | 	shl	result2, #2
089e0     F2 FC 01 F1 | 	add	result2, objptr
089e4     08 FC 05 F1 | 	add	result2, #8
089e8     FE FA 01 FB | 	rdlong	result1, result2
089ec     FF 02 02 F6 | 	mov	_var02, result3
089f0     FD 04 02 F6 | 	mov	_var03, result1
089f4     2E 00 00 FF 
089f8     10 E4 85 F1 | 	sub	objptr, ##23568
089fc                 | LR__0700
089fc                 | ' return t1
089fc     01 FD 01 F6 | 	mov	result2, _var02
08a00     02 FF 01 F6 | 	mov	result3, _var03
08a04     00 FB 01 F6 | 	mov	result1, _var01
08a08                 | _pop_ret
08a08     2D 00 64 FD | 	ret
08a0c                 | 
08a0c                 | ' 
08a0c                 | ' sub push(t1 as expr_result )
08a0c                 | _push
08a0c                 | ' 
08a0c                 | ' 'print "In push: "; t1.result_type
08a0c                 | ' 'print "In push: "; t1.result.uresult
08a0c                 | ' 
08a0c                 | ' if stackpointer<maxstack then 
08a0c     3A 00 00 FF 
08a10     1C E4 05 F1 | 	add	objptr, ##29724
08a14     F2 00 02 FB | 	rdlong	_var01, objptr
08a18     3A 00 00 FF 
08a1c     1C E4 85 F1 | 	sub	objptr, ##29724
08a20     01 00 00 FF 
08a24     00 00 56 F2 | 	cmps	_var01, ##512 wc
08a28     BC 00 90 3D |  if_ae	jmp	#LR__0710
08a2c     09 01 02 FB | 	rdlong	_var01, arg01
08a30     04 12 06 F1 | 	add	arg01, #4
08a34     09 03 02 FB | 	rdlong	_var02, arg01
08a38     04 12 06 F1 | 	add	arg01, #4
08a3c     09 13 02 FB | 	rdlong	arg01, arg01
08a40     3A 00 00 FF 
08a44     1C E4 05 F1 | 	add	objptr, ##29724
08a48     F2 04 02 FB | 	rdlong	_var03, objptr
08a4c     02 07 02 F6 | 	mov	_var04, _var03
08a50     01 06 66 F0 | 	shl	_var04, #1
08a54     02 07 02 F1 | 	add	_var04, _var03
08a58     02 06 66 F0 | 	shl	_var04, #2
08a5c     0C 00 00 FF 
08a60     0C E4 85 F1 | 	sub	objptr, ##6156
08a64     F2 06 02 F1 | 	add	_var04, objptr
08a68     03 01 62 FC | 	wrlong	_var01, _var04
08a6c     0C 00 00 FF 
08a70     0C E4 05 F1 | 	add	objptr, ##6156
08a74     F2 06 02 FB | 	rdlong	_var04, objptr
08a78     03 05 02 F6 | 	mov	_var03, _var04
08a7c     01 04 66 F0 | 	shl	_var03, #1
08a80     03 05 02 F1 | 	add	_var03, _var04
08a84     02 04 66 F0 | 	shl	_var03, #2
08a88     0C 00 00 FF 
08a8c     0C E4 85 F1 | 	sub	objptr, ##6156
08a90     F2 04 02 F1 | 	add	_var03, objptr
08a94     04 04 06 F1 | 	add	_var03, #4
08a98     02 03 62 FC | 	wrlong	_var02, _var03
08a9c     0C 00 00 FF 
08aa0     0C E4 05 F1 | 	add	objptr, ##6156
08aa4     F2 06 02 FB | 	rdlong	_var04, objptr
08aa8     03 05 02 F6 | 	mov	_var03, _var04
08aac     01 04 66 F0 | 	shl	_var03, #1
08ab0     03 05 02 F1 | 	add	_var03, _var04
08ab4     02 04 66 F0 | 	shl	_var03, #2
08ab8     0C 00 00 FF 
08abc     0C E4 85 F1 | 	sub	objptr, ##6156
08ac0     F2 04 02 F1 | 	add	_var03, objptr
08ac4     08 04 06 F1 | 	add	_var03, #8
08ac8     02 13 62 FC | 	wrlong	arg01, _var03
08acc     0C 00 00 FF 
08ad0     0C E4 05 F1 | 	add	objptr, ##6156
08ad4     F2 00 02 FB | 	rdlong	_var01, objptr
08ad8     01 00 06 F1 | 	add	_var01, #1
08adc     F2 00 62 FC | 	wrlong	_var01, objptr
08ae0     3A 00 00 FF 
08ae4     1C E4 85 F1 | 	sub	objptr, ##29724
08ae8                 | LR__0710
08ae8                 | _push_ret
08ae8     2D 00 64 FD | 	ret
08aec                 | 
08aec                 | ' 
08aec                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
08aec                 | ' 
08aec                 | ' sub do_push
08aec                 | _do_push
08aec                 | ' if stackpointer<maxstack then 
08aec     3A 00 00 FF 
08af0     1C E4 05 F1 | 	add	objptr, ##29724
08af4     F2 00 02 FB | 	rdlong	_var01, objptr
08af8     3A 00 00 FF 
08afc     1C E4 85 F1 | 	sub	objptr, ##29724
08b00     01 00 00 FF 
08b04     00 00 56 F2 | 	cmps	_var01, ##512 wc
08b08     F8 00 90 3D |  if_ae	jmp	#LR__0720
08b0c     41 00 00 FF 
08b10     44 E4 05 F1 | 	add	objptr, ##33348
08b14     F2 02 02 FB | 	rdlong	_var02, objptr
08b18     01 05 02 F6 | 	mov	_var03, _var02
08b1c     01 04 66 F0 | 	shl	_var03, #1
08b20     01 05 02 F1 | 	add	_var03, _var02
08b24     02 04 66 F0 | 	shl	_var03, #2
08b28     03 00 00 FF 
08b2c     04 E4 85 F1 | 	sub	objptr, ##1540
08b30     F2 04 02 F1 | 	add	_var03, objptr
08b34     02 01 02 FB | 	rdlong	_var01, _var03
08b38     04 04 06 F1 | 	add	_var03, #4
08b3c     02 07 02 FB | 	rdlong	_var04, _var03
08b40     01 05 02 F6 | 	mov	_var03, _var02
08b44     01 04 66 F0 | 	shl	_var03, #1
08b48     01 05 02 F1 | 	add	_var03, _var02
08b4c     02 04 66 F0 | 	shl	_var03, #2
08b50     F2 04 02 F1 | 	add	_var03, objptr
08b54     08 04 06 F1 | 	add	_var03, #8
08b58     02 03 02 FB | 	rdlong	_var02, _var03
08b5c     04 00 00 FF 
08b60     24 E4 85 F1 | 	sub	objptr, ##2084
08b64     F2 04 02 FB | 	rdlong	_var03, objptr
08b68     02 09 02 F6 | 	mov	_var05, _var03
08b6c     01 08 66 F0 | 	shl	_var05, #1
08b70     02 09 02 F1 | 	add	_var05, _var03
08b74     02 08 66 F0 | 	shl	_var05, #2
08b78     0C 00 00 FF 
08b7c     0C E4 85 F1 | 	sub	objptr, ##6156
08b80     F2 08 02 F1 | 	add	_var05, objptr
08b84     04 01 62 FC | 	wrlong	_var01, _var05
08b88     0C 00 00 FF 
08b8c     0C E4 05 F1 | 	add	objptr, ##6156
08b90     F2 08 02 FB | 	rdlong	_var05, objptr
08b94     04 05 02 F6 | 	mov	_var03, _var05
08b98     01 04 66 F0 | 	shl	_var03, #1
08b9c     04 05 02 F1 | 	add	_var03, _var05
08ba0     02 04 66 F0 | 	shl	_var03, #2
08ba4     0C 00 00 FF 
08ba8     0C E4 85 F1 | 	sub	objptr, ##6156
08bac     F2 04 02 F1 | 	add	_var03, objptr
08bb0     04 04 06 F1 | 	add	_var03, #4
08bb4     02 07 62 FC | 	wrlong	_var04, _var03
08bb8     0C 00 00 FF 
08bbc     0C E4 05 F1 | 	add	objptr, ##6156
08bc0     F2 08 02 FB | 	rdlong	_var05, objptr
08bc4     04 07 02 F6 | 	mov	_var04, _var05
08bc8     01 06 66 F0 | 	shl	_var04, #1
08bcc     04 07 02 F1 | 	add	_var04, _var05
08bd0     02 06 66 F0 | 	shl	_var04, #2
08bd4     0C 00 00 FF 
08bd8     0C E4 85 F1 | 	sub	objptr, ##6156
08bdc     F2 06 02 F1 | 	add	_var04, objptr
08be0     08 06 06 F1 | 	add	_var04, #8
08be4     03 03 62 FC | 	wrlong	_var02, _var04
08be8     0C 00 00 FF 
08bec     0C E4 05 F1 | 	add	objptr, ##6156
08bf0     F2 00 02 FB | 	rdlong	_var01, objptr
08bf4     01 00 06 F1 | 	add	_var01, #1
08bf8     F2 00 62 FC | 	wrlong	_var01, objptr
08bfc     3A 00 00 FF 
08c00     1C E4 85 F1 | 	sub	objptr, ##29724
08c04                 | LR__0720
08c04                 | _do_push_ret
08c04     2D 00 64 FD | 	ret
08c08                 | 
08c08                 | ' 
08c08                 | '   
08c08                 | ' sub csave_block(address as ulong)
08c08                 | _csave_block
08c08     09 01 02 F6 | 	mov	_var01, arg01
08c0c                 | ' 
08c0c                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
08c0c                 | ' ' we enter it at the state of playing 1 kHz header tone
08c0c                 | ' 
08c0c                 | ' for i=0 to 63 step 2
08c0c     00 02 06 F6 | 	mov	_var02, #0
08c10                 | LR__0730
08c10                 | '   do: loop until lpeek(base+32*7)>32768
08c10     2D 00 00 FF 
08c14     D4 E5 05 F1 | 	add	objptr, ##23508
08c18     97 0C 48 FB | 	callpa	#(@LR__0732-@LR__0731)>>2,fcache_load_ptr_
08c1c                 | LR__0731
08c1c     F2 12 02 FB | 	rdlong	arg01, objptr
08c20     E0 12 06 F1 | 	add	arg01, #224
08c24     09 FB 01 FB | 	rdlong	result1, arg01
08c28     40 00 00 FF 
08c2c     01 FA 55 F2 | 	cmps	result1, ##32769 wc
08c30     E8 FF 9F CD |  if_b	jmp	#LR__0731
08c34                 | LR__0732
08c34     00 13 02 F6 | 	mov	arg01, _var01
08c38     01 05 02 F6 | 	mov	_var03, _var02
08c3c     02 04 66 F0 | 	shl	_var03, #2
08c40     02 13 02 F1 | 	add	arg01, _var03
08c44     09 07 02 FB | 	rdlong	_var04, arg01
08c48     24 00 00 FF 
08c4c     AC E4 05 F1 | 	add	objptr, ##18604
08c50     F2 06 62 FC | 	wrlong	_var04, objptr
08c54     52 00 00 FF 
08c58     80 E4 85 F1 | 	sub	objptr, ##42112
08c5c                 | '   q=lpeek(address+4*i)
08c5c                 | '      for bit=0 to 31
08c5c     00 08 06 F6 | 	mov	_var05, #0
08c60     97 84 48 FB | 	callpa	#(@LR__0737-@LR__0733)>>2,fcache_load_ptr_
08c64                 | LR__0733
08c64                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
08c64     52 00 00 FF 
08c68     80 E4 05 F1 | 	add	objptr, ##42112
08c6c     F2 06 02 FB | 	rdlong	_var04, objptr
08c70     52 00 00 FF 
08c74     80 E4 85 F1 | 	sub	objptr, ##42112
08c78     04 05 C2 F9 | 	decod	_var03, _var05
08c7c     02 07 CA F7 | 	test	_var04, _var03 wz
08c80     60 00 90 AD |  if_e	jmp	#LR__0734
08c84     04 05 02 F6 | 	mov	_var03, _var05
08c88     02 04 66 F0 | 	shl	_var03, #2
08c8c     4E 00 00 FF 
08c90     70 E4 05 F1 | 	add	objptr, ##40048
08c94     F2 04 02 F1 | 	add	_var03, objptr
08c98     02 FF 48 FC | 	wrbyte	#127, _var03
08c9c     04 05 02 F6 | 	mov	_var03, _var05
08ca0     02 04 66 F0 | 	shl	_var03, #2
08ca4     01 04 06 F1 | 	add	_var03, #1
08ca8     F2 04 02 F1 | 	add	_var03, objptr
08cac     02 01 49 FC | 	wrbyte	#128, _var03
08cb0     04 05 02 F6 | 	mov	_var03, _var05
08cb4     02 04 66 F0 | 	shl	_var03, #2
08cb8     02 04 06 F1 | 	add	_var03, #2
08cbc     F2 04 02 F1 | 	add	_var03, objptr
08cc0     02 FF 48 FC | 	wrbyte	#127, _var03
08cc4     04 05 02 F6 | 	mov	_var03, _var05
08cc8     02 04 66 F0 | 	shl	_var03, #2
08ccc     03 04 06 F1 | 	add	_var03, #3
08cd0     F2 04 02 F1 | 	add	_var03, objptr
08cd4     02 01 49 FC | 	wrbyte	#128, _var03
08cd8     4E 00 00 FF 
08cdc     70 E4 85 F1 | 	sub	objptr, ##40048
08ce0     5C 00 90 FD | 	jmp	#LR__0735
08ce4                 | LR__0734
08ce4     04 05 02 F6 | 	mov	_var03, _var05
08ce8     02 04 66 F0 | 	shl	_var03, #2
08cec     4E 00 00 FF 
08cf0     70 E4 05 F1 | 	add	objptr, ##40048
08cf4     F2 04 02 F1 | 	add	_var03, objptr
08cf8     02 01 49 FC | 	wrbyte	#128, _var03
08cfc     04 05 02 F6 | 	mov	_var03, _var05
08d00     02 04 66 F0 | 	shl	_var03, #2
08d04     01 04 06 F1 | 	add	_var03, #1
08d08     F2 04 02 F1 | 	add	_var03, objptr
08d0c     02 01 49 FC | 	wrbyte	#128, _var03
08d10     04 05 02 F6 | 	mov	_var03, _var05
08d14     02 04 66 F0 | 	shl	_var03, #2
08d18     02 04 06 F1 | 	add	_var03, #2
08d1c     F2 04 02 F1 | 	add	_var03, objptr
08d20     02 FF 48 FC | 	wrbyte	#127, _var03
08d24     04 05 02 F6 | 	mov	_var03, _var05
08d28     02 04 66 F0 | 	shl	_var03, #2
08d2c     03 04 06 F1 | 	add	_var03, #3
08d30     F2 04 02 F1 | 	add	_var03, objptr
08d34     02 FF 48 FC | 	wrbyte	#127, _var03
08d38     4E 00 00 FF 
08d3c     70 E4 85 F1 | 	sub	objptr, ##40048
08d40                 | LR__0735
08d40     01 08 06 F1 | 	add	_var05, #1
08d44     20 08 56 F2 | 	cmps	_var05, #32 wc
08d48     18 FF 9F CD |  if_b	jmp	#LR__0733
08d4c                 | '   do: loop until lpeek(base+32*7)<32768
08d4c     2D 00 00 FF 
08d50     D4 E5 05 F1 | 	add	objptr, ##23508
08d54                 | LR__0736
08d54     F2 12 02 FB | 	rdlong	arg01, objptr
08d58     E0 12 06 F1 | 	add	arg01, #224
08d5c     09 FB 01 FB | 	rdlong	result1, arg01
08d60     40 00 00 FF 
08d64     00 FA 55 F2 | 	cmps	result1, ##32768 wc
08d68     E8 FF 9F 3D |  if_ae	jmp	#LR__0736
08d6c                 | LR__0737
08d6c     00 13 02 F6 | 	mov	arg01, _var01
08d70     04 12 06 F1 | 	add	arg01, #4
08d74     01 05 02 F6 | 	mov	_var03, _var02
08d78     02 04 66 F0 | 	shl	_var03, #2
08d7c     02 13 02 F1 | 	add	arg01, _var03
08d80     09 07 02 FB | 	rdlong	_var04, arg01
08d84     24 00 00 FF 
08d88     AC E4 05 F1 | 	add	objptr, ##18604
08d8c     F2 06 62 FC | 	wrlong	_var04, objptr
08d90     52 00 00 FF 
08d94     80 E4 85 F1 | 	sub	objptr, ##42112
08d98                 | '   q=lpeek(address+4+4*i)
08d98                 | '      for bit=0 to 31
08d98     00 08 06 F6 | 	mov	_var05, #0
08d9c     97 94 48 FB | 	callpa	#(@LR__0741-@LR__0738)>>2,fcache_load_ptr_
08da0                 | LR__0738
08da0                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
08da0     52 00 00 FF 
08da4     80 E4 05 F1 | 	add	objptr, ##42112
08da8     F2 06 02 FB | 	rdlong	_var04, objptr
08dac     52 00 00 FF 
08db0     80 E4 85 F1 | 	sub	objptr, ##42112
08db4     04 05 C2 F9 | 	decod	_var03, _var05
08db8     02 07 CA F7 | 	test	_var04, _var03 wz
08dbc     80 00 90 AD |  if_e	jmp	#LR__0739
08dc0     04 0B 02 F6 | 	mov	_var06, _var05
08dc4     02 0A 66 F0 | 	shl	_var06, #2
08dc8     80 04 06 F6 | 	mov	_var03, #128
08dcc     05 05 02 F1 | 	add	_var03, _var06
08dd0     4E 00 00 FF 
08dd4     70 E4 05 F1 | 	add	objptr, ##40048
08dd8     F2 04 02 F1 | 	add	_var03, objptr
08ddc     02 FF 48 FC | 	wrbyte	#127, _var03
08de0     04 0B 02 F6 | 	mov	_var06, _var05
08de4     02 0A 66 F0 | 	shl	_var06, #2
08de8     80 04 06 F6 | 	mov	_var03, #128
08dec     05 05 02 F1 | 	add	_var03, _var06
08df0     01 04 06 F1 | 	add	_var03, #1
08df4     F2 04 02 F1 | 	add	_var03, objptr
08df8     02 01 49 FC | 	wrbyte	#128, _var03
08dfc     04 0B 02 F6 | 	mov	_var06, _var05
08e00     02 0A 66 F0 | 	shl	_var06, #2
08e04     80 04 06 F6 | 	mov	_var03, #128
08e08     05 05 02 F1 | 	add	_var03, _var06
08e0c     02 04 06 F1 | 	add	_var03, #2
08e10     F2 04 02 F1 | 	add	_var03, objptr
08e14     02 FF 48 FC | 	wrbyte	#127, _var03
08e18     04 0B 02 F6 | 	mov	_var06, _var05
08e1c     02 0A 66 F0 | 	shl	_var06, #2
08e20     80 04 06 F6 | 	mov	_var03, #128
08e24     05 05 02 F1 | 	add	_var03, _var06
08e28     03 04 06 F1 | 	add	_var03, #3
08e2c     F2 04 02 F1 | 	add	_var03, objptr
08e30     02 01 49 FC | 	wrbyte	#128, _var03
08e34     4E 00 00 FF 
08e38     70 E4 85 F1 | 	sub	objptr, ##40048
08e3c     7C 00 90 FD | 	jmp	#LR__0740
08e40                 | LR__0739
08e40     04 0B 02 F6 | 	mov	_var06, _var05
08e44     02 0A 66 F0 | 	shl	_var06, #2
08e48     80 04 06 F6 | 	mov	_var03, #128
08e4c     05 05 02 F1 | 	add	_var03, _var06
08e50     4E 00 00 FF 
08e54     70 E4 05 F1 | 	add	objptr, ##40048
08e58     F2 04 02 F1 | 	add	_var03, objptr
08e5c     02 01 49 FC | 	wrbyte	#128, _var03
08e60     04 0B 02 F6 | 	mov	_var06, _var05
08e64     02 0A 66 F0 | 	shl	_var06, #2
08e68     80 04 06 F6 | 	mov	_var03, #128
08e6c     05 05 02 F1 | 	add	_var03, _var06
08e70     01 04 06 F1 | 	add	_var03, #1
08e74     F2 04 02 F1 | 	add	_var03, objptr
08e78     02 01 49 FC | 	wrbyte	#128, _var03
08e7c     04 0B 02 F6 | 	mov	_var06, _var05
08e80     02 0A 66 F0 | 	shl	_var06, #2
08e84     80 04 06 F6 | 	mov	_var03, #128
08e88     05 05 02 F1 | 	add	_var03, _var06
08e8c     02 04 06 F1 | 	add	_var03, #2
08e90     F2 04 02 F1 | 	add	_var03, objptr
08e94     02 FF 48 FC | 	wrbyte	#127, _var03
08e98     04 0B 02 F6 | 	mov	_var06, _var05
08e9c     02 0A 66 F0 | 	shl	_var06, #2
08ea0     80 04 06 F6 | 	mov	_var03, #128
08ea4     05 05 02 F1 | 	add	_var03, _var06
08ea8     03 04 06 F1 | 	add	_var03, #3
08eac     F2 04 02 F1 | 	add	_var03, objptr
08eb0     02 FF 48 FC | 	wrbyte	#127, _var03
08eb4     4E 00 00 FF 
08eb8     70 E4 85 F1 | 	sub	objptr, ##40048
08ebc                 | LR__0740
08ebc     01 08 06 F1 | 	add	_var05, #1
08ec0     20 08 56 F2 | 	cmps	_var05, #32 wc
08ec4     D8 FE 9F CD |  if_b	jmp	#LR__0738
08ec8                 | LR__0741
08ec8     02 02 06 F1 | 	add	_var02, #2
08ecc     40 02 56 F2 | 	cmps	_var02, #64 wc
08ed0     3C FD 9F CD |  if_b	jmp	#LR__0730
08ed4                 | ' do: loop until lpeek(base+32*7)>32768
08ed4     2D 00 00 FF 
08ed8     D4 E5 05 F1 | 	add	objptr, ##23508
08edc     97 84 48 FB | 	callpa	#(@LR__0750-@LR__0742)>>2,fcache_load_ptr_
08ee0                 | LR__0742
08ee0     F2 12 02 FB | 	rdlong	arg01, objptr
08ee4     E0 12 06 F1 | 	add	arg01, #224
08ee8     09 FB 01 FB | 	rdlong	result1, arg01
08eec     40 00 00 FF 
08ef0     01 FA 55 F2 | 	cmps	result1, ##32769 wc
08ef4     E8 FF 9F CD |  if_b	jmp	#LR__0742
08ef8     2D 00 00 FF 
08efc     D4 E5 85 F1 | 	sub	objptr, ##23508
08f00                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
08f00     00 02 06 F6 | 	mov	_var02, #0
08f04                 | LR__0743
08f04     01 07 52 F6 | 	abs	_var04, _var02 wc
08f08     07 06 06 F5 | 	and	_var04, #7
08f0c     03 07 82 F6 | 	negc	_var04, _var04
08f10     04 06 56 F2 | 	cmps	_var04, #4 wc
08f14     20 00 90 3D |  if_ae	jmp	#LR__0744
08f18     01 0B 02 F6 | 	mov	_var06, _var02
08f1c     4E 00 00 FF 
08f20     70 E4 05 F1 | 	add	objptr, ##40048
08f24     F2 0A 02 F1 | 	add	_var06, objptr
08f28     05 FF 48 FC | 	wrbyte	#127, _var06
08f2c     4E 00 00 FF 
08f30     70 E4 85 F1 | 	sub	objptr, ##40048
08f34     1C 00 90 FD | 	jmp	#LR__0745
08f38                 | LR__0744
08f38     01 0B 02 F6 | 	mov	_var06, _var02
08f3c     4E 00 00 FF 
08f40     70 E4 05 F1 | 	add	objptr, ##40048
08f44     F2 0A 02 F1 | 	add	_var06, objptr
08f48     05 01 49 FC | 	wrbyte	#128, _var06
08f4c     4E 00 00 FF 
08f50     70 E4 85 F1 | 	sub	objptr, ##40048
08f54                 | LR__0745
08f54     01 02 06 F1 | 	add	_var02, #1
08f58     80 02 56 F2 | 	cmps	_var02, #128 wc
08f5c     A4 FF 9F CD |  if_b	jmp	#LR__0743
08f60                 | ' 
08f60                 | ' do: loop until lpeek(base+32*7)<32768
08f60     2D 00 00 FF 
08f64     D4 E5 05 F1 | 	add	objptr, ##23508
08f68                 | LR__0746
08f68     F2 12 02 FB | 	rdlong	arg01, objptr
08f6c     E0 12 06 F1 | 	add	arg01, #224
08f70     09 FB 01 FB | 	rdlong	result1, arg01
08f74     40 00 00 FF 
08f78     00 FA 55 F2 | 	cmps	result1, ##32768 wc
08f7c     E8 FF 9F 3D |  if_ae	jmp	#LR__0746
08f80     2D 00 00 FF 
08f84     D4 E5 85 F1 | 	sub	objptr, ##23508
08f88                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
08f88     80 02 06 F6 | 	mov	_var02, #128
08f8c                 | LR__0747
08f8c     01 07 52 F6 | 	abs	_var04, _var02 wc
08f90     07 06 06 F5 | 	and	_var04, #7
08f94     03 07 82 F6 | 	negc	_var04, _var04
08f98     04 06 56 F2 | 	cmps	_var04, #4 wc
08f9c     20 00 90 3D |  if_ae	jmp	#LR__0748
08fa0     01 0B 02 F6 | 	mov	_var06, _var02
08fa4     4E 00 00 FF 
08fa8     70 E4 05 F1 | 	add	objptr, ##40048
08fac     F2 0A 02 F1 | 	add	_var06, objptr
08fb0     05 FF 48 FC | 	wrbyte	#127, _var06
08fb4     4E 00 00 FF 
08fb8     70 E4 85 F1 | 	sub	objptr, ##40048
08fbc     1C 00 90 FD | 	jmp	#LR__0749
08fc0                 | LR__0748
08fc0     01 0B 02 F6 | 	mov	_var06, _var02
08fc4     4E 00 00 FF 
08fc8     70 E4 05 F1 | 	add	objptr, ##40048
08fcc     F2 0A 02 F1 | 	add	_var06, objptr
08fd0     05 01 49 FC | 	wrbyte	#128, _var06
08fd4     4E 00 00 FF 
08fd8     70 E4 85 F1 | 	sub	objptr, ##40048
08fdc                 | LR__0749
08fdc     01 02 06 F1 | 	add	_var02, #1
08fe0     00 03 16 F2 | 	cmp	_var02, #256 wc
08fe4     A4 FF 9F CD |  if_b	jmp	#LR__0747
08fe8                 | LR__0750
08fe8                 | _csave_block_ret
08fe8     2D 00 64 FD | 	ret
08fec                 | 
08fec                 | ' 
08fec                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
08fec                 | _csave_addtoblock
08fec     04 4A 05 F6 | 	mov	COUNT_, #4
08ff0     A8 00 A0 FD | 	call	#pushregs_
08ff4     09 1F 02 F6 | 	mov	local01, arg01
08ff8                 | ' 
08ff8                 | ' 
08ff8                 | ' if force=0 then
08ff8     07 14 4E F7 | 	zerox	arg02, #7 wz
08ffc     78 00 90 5D |  if_ne	jmp	#LR__0760
09000     50 00 00 FF 
09004     70 E5 05 F1 | 	add	objptr, ##41328
09008     F2 14 02 FB | 	rdlong	arg02, objptr
0900c     02 00 00 FF 
09010     00 E4 85 F1 | 	sub	objptr, ##1024
09014     F2 14 02 F1 | 	add	arg02, objptr
09018     0A 1F 42 FC | 	wrbyte	local01, arg02
0901c     02 00 00 FF 
09020     00 E4 05 F1 | 	add	objptr, ##1024
09024     F2 1E 02 FB | 	rdlong	local01, objptr
09028     01 1E 06 F1 | 	add	local01, #1
0902c     F2 1E 62 FC | 	wrlong	local01, objptr
09030                 | '   block(blockptr)=d
09030                 | '   blockptr+=1
09030                 | '   if blockptr>=255 then
09030     50 00 00 FF 
09034     70 E5 85 F1 | 	sub	objptr, ##41328
09038     FF 1E 16 F2 | 	cmp	local01, #255 wc
0903c     E4 00 90 CD |  if_b	jmp	#LR__0764
09040     4E 00 00 FF 
09044     70 E5 05 F1 | 	add	objptr, ##40304
09048     F2 12 02 F6 | 	mov	arg01, objptr
0904c     4E 00 00 FF 
09050     70 E5 85 F1 | 	sub	objptr, ##40304
09054     B0 FB BF FD | 	call	#_csave_block
09058     50 00 00 FF 
0905c     70 E5 05 F1 | 	add	objptr, ##41328
09060     F2 00 68 FC | 	wrlong	#0, objptr
09064     50 00 00 FF 
09068     70 E5 85 F1 | 	sub	objptr, ##41328
0906c     2C 13 06 F6 | 	mov	arg01, #300
09070     40 CA B0 FD | 	call	#__system___waitms
09074     AC 00 90 FD | 	jmp	#LR__0764
09078                 | LR__0760
09078     50 00 00 FF 
0907c     70 E5 05 F1 | 	add	objptr, ##41328
09080     F2 20 02 FB | 	rdlong	local02, objptr
09084     02 00 00 FF 
09088     00 E4 85 F1 | 	sub	objptr, ##1024
0908c     F2 20 02 F1 | 	add	local02, objptr
09090     10 1F 42 FC | 	wrbyte	local01, local02
09094                 | '   block(blockptr)=d
09094                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
09094     02 00 00 FF 
09098     00 E4 05 F1 | 	add	objptr, ##1024
0909c     F2 22 02 FB | 	rdlong	local03, objptr
090a0     50 00 00 FF 
090a4     70 E5 85 F1 | 	sub	objptr, ##41328
090a8     FF 22 16 F2 | 	cmp	local03, #255 wc
090ac     40 00 90 3D |  if_ae	jmp	#LR__0763
090b0     50 00 00 FF 
090b4     70 E5 05 F1 | 	add	objptr, ##41328
090b8     F2 24 02 FB | 	rdlong	local04, objptr
090bc     50 00 00 FF 
090c0     70 E5 85 F1 | 	sub	objptr, ##41328
090c4                 | LR__0761
090c4     00 25 56 F2 | 	cmps	local04, #256 wc
090c8     24 00 90 3D |  if_ae	jmp	#LR__0762
090cc     12 21 02 F6 | 	mov	local02, local04
090d0     4E 00 00 FF 
090d4     70 E5 05 F1 | 	add	objptr, ##40304
090d8     F2 20 02 F1 | 	add	local02, objptr
090dc     10 01 48 FC | 	wrbyte	#0, local02
090e0     01 24 06 F1 | 	add	local04, #1
090e4     4E 00 00 FF 
090e8     70 E5 85 F1 | 	sub	objptr, ##40304
090ec     D4 FF 9F FD | 	jmp	#LR__0761
090f0                 | LR__0762
090f0                 | LR__0763
090f0     4E 00 00 FF 
090f4     70 E5 05 F1 | 	add	objptr, ##40304
090f8     F2 12 02 F6 | 	mov	arg01, objptr
090fc     4E 00 00 FF 
09100     70 E5 85 F1 | 	sub	objptr, ##40304
09104     00 FB BF FD | 	call	#_csave_block
09108     50 00 00 FF 
0910c     70 E5 05 F1 | 	add	objptr, ##41328
09110     F2 00 68 FC | 	wrlong	#0, objptr
09114     50 00 00 FF 
09118     70 E5 85 F1 | 	sub	objptr, ##41328
0911c     2C 13 06 F6 | 	mov	arg01, #300
09120     90 C9 B0 FD | 	call	#__system___waitms
09124                 | LR__0764
09124     A7 F0 03 F6 | 	mov	ptra, fp
09128     B2 00 A0 FD | 	call	#popregs_
0912c                 | _csave_addtoblock_ret
0912c     2D 00 64 FD | 	ret
09130                 | 
09130                 | ' 
09130                 | ' sub test_csave
09130                 | _test_csave
09130     04 4A 05 F6 | 	mov	COUNT_, #4
09134     A8 00 A0 FD | 	call	#pushregs_
09138     C0 F0 07 F1 | 	add	ptra, #192
0913c                 | ' 'dim fileheader,savestart, saveptr as ulong
0913c                 | ' 
0913c                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0913c     41 00 00 FF 
09140     48 E4 05 F1 | 	add	objptr, ##33352
09144     F2 12 02 FB | 	rdlong	arg01, objptr
09148     41 00 00 FF 
0914c     48 E4 85 F1 | 	sub	objptr, ##33352
09150     2C 93 B0 FD | 	call	#_pslpeek
09154     FF FF 7F FF 
09158     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0915c     0C 00 90 5D |  if_ne	jmp	#LR__0770
09160     1B 12 06 F6 | 	mov	arg01, #27
09164     5C 91 B0 FD | 	call	#_printerror
09168     0C 03 90 FD | 	jmp	#LR__0782
0916c                 | LR__0770
0916c     04 F8 BF FD | 	call	#_pop
09170     FF 1E 02 F6 | 	mov	local01, result3
09174     90 4E 05 F1 | 	add	fp, #144
09178     A7 FA 61 FC | 	wrlong	result1, fp
0917c     04 4E 05 F1 | 	add	fp, #4
09180     A7 FC 61 FC | 	wrlong	result2, fp
09184     04 4E 05 F1 | 	add	fp, #4
09188     A7 1E 62 FC | 	wrlong	local01, fp
0918c                 | ' t1=pop()
0918c                 | ' if t1.result_type<>result_string then name$="noname.bas" else name$=t1.result.sresult
0918c     98 4E 85 F1 | 	sub	fp, #152
09190     1F 1E 0E F2 | 	cmp	local01, #31 wz
09194     26 01 00 5F 
09198     6D 1F 06 56 |  if_ne	mov	local01, ##@LR__4317
0919c     8C 4E 05 51 |  if_ne	add	fp, #140
091a0     A7 1E 62 5C |  if_ne	wrlong	local01, fp
091a4     8C 4E 85 51 |  if_ne	sub	fp, #140
091a8     90 4E 05 A1 |  if_e	add	fp, #144
091ac     A7 1E 02 AB |  if_e	rdlong	local01, fp
091b0     04 4E 85 A1 |  if_e	sub	fp, #4
091b4     A7 1E 62 AC |  if_e	wrlong	local01, fp
091b8     8C 4E 85 A1 |  if_e	sub	fp, #140
091bc                 | ' 
091bc                 | ' ' prepare 1 kHz header wave
091bc                 | ' 
091bc                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
091bc     A7 00 68 FC | 	wrlong	#0, fp
091c0     97 34 48 FB | 	callpa	#(@LR__0774-@LR__0771)>>2,fcache_load_ptr_
091c4                 | LR__0771
091c4     A7 1E 02 FB | 	rdlong	local01, fp
091c8     0F 1F 52 F6 | 	abs	local01, local01 wc
091cc     07 1E 06 F5 | 	and	local01, #7
091d0     0F 1F 82 F6 | 	negc	local01, local01
091d4     04 1E 56 F2 | 	cmps	local01, #4 wc
091d8     20 00 90 3D |  if_ae	jmp	#LR__0772
091dc     A7 1E 02 FB | 	rdlong	local01, fp
091e0     4E 00 00 FF 
091e4     70 E4 05 F1 | 	add	objptr, ##40048
091e8     F2 1E 02 F1 | 	add	local01, objptr
091ec     0F FF 48 FC | 	wrbyte	#127, local01
091f0     4E 00 00 FF 
091f4     70 E4 85 F1 | 	sub	objptr, ##40048
091f8     1C 00 90 FD | 	jmp	#LR__0773
091fc                 | LR__0772
091fc     A7 1E 02 FB | 	rdlong	local01, fp
09200     4E 00 00 FF 
09204     70 E4 05 F1 | 	add	objptr, ##40048
09208     F2 1E 02 F1 | 	add	local01, objptr
0920c     0F 01 49 FC | 	wrbyte	#128, local01
09210     4E 00 00 FF 
09214     70 E4 85 F1 | 	sub	objptr, ##40048
09218                 | LR__0773
09218     A7 1E 02 FB | 	rdlong	local01, fp
0921c     01 1E 06 F1 | 	add	local01, #1
09220     A7 1E 62 FC | 	wrlong	local01, fp
09224     00 1F 56 F2 | 	cmps	local01, #256 wc
09228     98 FF 9F CD |  if_b	jmp	#LR__0771
0922c                 | LR__0774
0922c     4E 00 00 FF 
09230     70 E4 05 F1 | 	add	objptr, ##40048
09234     F2 14 02 F6 | 	mov	arg02, objptr
09238     07 12 06 F6 | 	mov	arg01, #7
0923c     0F 00 00 FF 
09240     40 17 06 F6 | 	mov	arg03, ##8000
09244     0E 18 C6 F9 | 	decod	arg04, #14
09248     00 1B 06 F6 | 	mov	arg05, #256
0924c     00 1C 06 F6 | 	mov	arg06, #0
09250     42 00 00 FF 
09254     B0 E5 85 F1 | 	sub	objptr, ##34224
09258     CC C1 B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
0925c     0B 00 00 FF 
09260     C0 E4 85 F1 | 	sub	objptr, ##5824
09264     05 00 00 FF 
09268     B8 13 06 F6 | 	mov	arg01, ##3000
0926c     44 C8 B0 FD | 	call	#__system___waitms
09270     50 00 00 FF 
09274     70 E5 05 F1 | 	add	objptr, ##41328
09278     F2 00 68 FC | 	wrlong	#0, objptr
0927c     50 00 00 FF 
09280     70 E5 85 F1 | 	sub	objptr, ##41328
09284     72 12 06 F6 | 	mov	arg01, #114
09288     00 14 06 F6 | 	mov	arg02, #0
0928c     5C FD BF FD | 	call	#_csave_addtoblock
09290     62 12 06 F6 | 	mov	arg01, #98
09294     00 14 06 F6 | 	mov	arg02, #0
09298     50 FD BF FD | 	call	#_csave_addtoblock
0929c     61 12 06 F6 | 	mov	arg01, #97
092a0     00 14 06 F6 | 	mov	arg02, #0
092a4     44 FD BF FD | 	call	#_csave_addtoblock
092a8     0D 12 06 F6 | 	mov	arg01, #13
092ac     00 14 06 F6 | 	mov	arg02, #0
092b0     38 FD BF FD | 	call	#_csave_addtoblock
092b4                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
092b4                 | ' waitms 3000 
092b4                 | ' 
092b4                 | ' blockptr=0
092b4                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
092b4                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
092b4     A7 02 68 FC | 	wrlong	#1, fp
092b8     8C 4E 05 F1 | 	add	fp, #140
092bc     A7 12 02 FB | 	rdlong	arg01, fp
092c0     8C 4E 85 F1 | 	sub	fp, #140
092c4     09 21 02 F6 | 	mov	local02, arg01
092c8     97 06 48 FB | 	callpa	#(@LR__0776-@LR__0775)>>2,fcache_load_ptr_
092cc                 | LR__0775
092cc     10 FB C9 FA | 	rdbyte	result1, local02 wz
092d0     01 20 06 51 |  if_ne	add	local02, #1
092d4     F4 FF 9F 5D |  if_ne	jmp	#LR__0775
092d8                 | LR__0776
092d8     09 21 82 F1 | 	sub	local02, arg01
092dc     10 23 02 F6 | 	mov	local03, local02
092e0     01 22 06 F1 | 	add	local03, #1
092e4                 | LR__0777
092e4     A7 1E 02 FB | 	rdlong	local01, fp
092e8     11 1F 52 F2 | 	cmps	local01, local03 wc
092ec     34 00 90 3D |  if_ae	jmp	#LR__0778
092f0     8C 4E 05 F1 | 	add	fp, #140
092f4     A7 12 02 FB | 	rdlong	arg01, fp
092f8     8C 4E 85 F1 | 	sub	fp, #140
092fc     A7 14 02 FB | 	rdlong	arg02, fp
09300     01 16 06 F6 | 	mov	arg03, #1
09304     E0 E5 B0 FD | 	call	#__system__Mid_S
09308     FD 12 C2 FA | 	rdbyte	arg01, result1
0930c     00 14 06 F6 | 	mov	arg02, #0
09310     D8 FC BF FD | 	call	#_csave_addtoblock
09314     A7 1E 02 FB | 	rdlong	local01, fp
09318     01 1E 06 F1 | 	add	local01, #1
0931c     A7 1E 62 FC | 	wrlong	local01, fp
09320     C0 FF 9F FD | 	jmp	#LR__0777
09324                 | LR__0778
09324     00 12 06 F6 | 	mov	arg01, #0
09328     00 14 06 F6 | 	mov	arg02, #0
0932c     BC FC BF FD | 	call	#_csave_addtoblock
09330     72 12 06 F6 | 	mov	arg01, #114
09334     00 14 06 F6 | 	mov	arg02, #0
09338     B0 FC BF FD | 	call	#_csave_addtoblock
0933c     62 12 06 F6 | 	mov	arg01, #98
09340     00 14 06 F6 | 	mov	arg02, #0
09344     A4 FC BF FD | 	call	#_csave_addtoblock
09348     73 12 06 F6 | 	mov	arg01, #115
0934c     00 14 06 F6 | 	mov	arg02, #0
09350     98 FC BF FD | 	call	#_csave_addtoblock
09354     0D 12 06 F6 | 	mov	arg01, #13
09358     00 14 06 F6 | 	mov	arg02, #0
0935c     8C FC BF FD | 	call	#_csave_addtoblock
09360     41 00 00 FF 
09364     48 E4 05 F1 | 	add	objptr, ##33352
09368     F2 1E 02 FB | 	rdlong	local01, objptr
0936c     41 00 00 FF 
09370     48 E4 85 F1 | 	sub	objptr, ##33352
09374     9C 4E 05 F1 | 	add	fp, #156
09378     A7 1E 62 FC | 	wrlong	local01, fp
0937c     9C 4E 85 F1 | 	sub	fp, #156
09380                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
09380                 | ' 
09380                 | ' saveptr=programstart
09380                 | ' do
09380                 | LR__0779
09380     A0 4E 05 F1 | 	add	fp, #160
09384     A7 12 02 F6 | 	mov	arg01, fp
09388     04 4E 85 F1 | 	sub	fp, #4
0938c     A7 14 02 FB | 	rdlong	arg02, fp
09390     9C 4E 85 F1 | 	sub	fp, #156
09394     18 16 06 F6 | 	mov	arg03, #24
09398     0B 00 00 FF 
0939c     C0 E4 05 F1 | 	add	objptr, ##5824
093a0     30 B9 B0 FD | 	call	#_psram_spin2_read1
093a4     0C 4E 05 F1 | 	add	fp, #12
093a8     A7 12 02 F6 | 	mov	arg01, fp
093ac     9C 4E 05 F1 | 	add	fp, #156
093b0     A7 14 02 FB | 	rdlong	arg02, fp
093b4     04 4E 05 F1 | 	add	fp, #4
093b8     A7 16 02 FB | 	rdlong	arg03, fp
093bc     AC 4E 85 F1 | 	sub	fp, #172
093c0     10 B9 B0 FD | 	call	#_psram_spin2_read1
093c4     0B 00 00 FF 
093c8     C0 E4 85 F1 | 	sub	objptr, ##5824
093cc     AC 4E 05 F1 | 	add	fp, #172
093d0     A7 12 02 FB | 	rdlong	arg01, fp
093d4     AC 4E 85 F1 | 	sub	fp, #172
093d8     00 14 06 F6 | 	mov	arg02, #0
093dc     0C FC BF FD | 	call	#_csave_addtoblock
093e0                 | '   psram.read1(varptr(header(0)),saveptr,24)
093e0                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
093e0                 | '   csave_addtoblock(header(3),0) ' that's always <255
093e0                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
093e0     A7 00 68 FC | 	wrlong	#0, fp
093e4     AC 4E 05 F1 | 	add	fp, #172
093e8     A7 24 02 FB | 	rdlong	local04, fp
093ec     AC 4E 85 F1 | 	sub	fp, #172
093f0                 | LR__0780
093f0     A7 1E 02 FB | 	rdlong	local01, fp
093f4     12 1F 52 F2 | 	cmps	local01, local04 wc
093f8     2C 00 90 3D |  if_ae	jmp	#LR__0781
093fc     A7 22 02 FB | 	rdlong	local03, fp
09400     0C 4E 05 F1 | 	add	fp, #12
09404     A7 22 02 F1 | 	add	local03, fp
09408     11 13 C2 FA | 	rdbyte	arg01, local03
0940c     00 14 06 F6 | 	mov	arg02, #0
09410     0C 4E 85 F1 | 	sub	fp, #12
09414     D4 FB BF FD | 	call	#_csave_addtoblock
09418     A7 22 02 FB | 	rdlong	local03, fp
0941c     01 22 06 F1 | 	add	local03, #1
09420     A7 22 62 FC | 	wrlong	local03, fp
09424     C8 FF 9F FD | 	jmp	#LR__0780
09428                 | LR__0781
09428     B4 4E 05 F1 | 	add	fp, #180
0942c     A7 1E 02 FB | 	rdlong	local01, fp
09430     18 4E 85 F1 | 	sub	fp, #24
09434     A7 1E 62 FC | 	wrlong	local01, fp
09438     18 4E 05 F1 | 	add	fp, #24
0943c     A7 1E 02 FB | 	rdlong	local01, fp
09440     B4 4E 85 F1 | 	sub	fp, #180
09444     FF FF 3F FF 
09448     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0944c     30 FF 9F 5D |  if_ne	jmp	#LR__0779
09450     00 12 06 F6 | 	mov	arg01, #0
09454     01 14 06 F6 | 	mov	arg02, #1
09458     90 FB BF FD | 	call	#_csave_addtoblock
0945c     2D 00 00 FF 
09460     D4 E5 05 F1 | 	add	objptr, ##23508
09464     F2 12 02 FB | 	rdlong	arg01, objptr
09468     2D 00 00 FF 
0946c     D4 E5 85 F1 | 	sub	objptr, ##23508
09470     F4 12 06 F1 | 	add	arg01, #244
09474     09 01 58 FC | 	wrword	#0, arg01
09478                 | LR__0782
09478     A7 F0 03 F6 | 	mov	ptra, fp
0947c     B2 00 A0 FD | 	call	#popregs_
09480                 | _test_csave_ret
09480     2D 00 64 FD | 	ret
09484                 | 
09484                 | ' 
09484                 | ' ' ----------------- Save the program
09484                 | ' 
09484                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
09484                 | _do_save
09484     02 4A 05 F6 | 	mov	COUNT_, #2
09488     A8 00 A0 FD | 	call	#pushregs_
0948c     01 00 00 FF 
09490     BC F0 07 F1 | 	add	ptra, ##700
09494     01 00 00 FF 
09498     10 4E 05 F1 | 	add	fp, ##528
0949c     B1 B0 86 FF 
094a0     A7 E4 68 FC | 	wrlong	##224486002, fp
094a4     01 00 00 FF 
094a8     10 4E 85 F1 | 	sub	fp, ##528
094ac     C4 F4 BF FD | 	call	#_pop
094b0     FF 16 02 F6 | 	mov	arg03, result3
094b4     A7 FA 61 FC | 	wrlong	result1, fp
094b8     04 4E 05 F1 | 	add	fp, #4
094bc     A7 FC 61 FC | 	wrlong	result2, fp
094c0     04 4E 05 F1 | 	add	fp, #4
094c4     A7 16 62 FC | 	wrlong	arg03, fp
094c8     08 4E 85 F1 | 	sub	fp, #8
094cc                 | ' 
094cc                 | ' fileheader=$0D616272' rba+ver'
094cc                 | ' 
094cc                 | ' t1=pop() 
094cc                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
094cc     41 00 00 FF 
094d0     48 E4 05 F1 | 	add	objptr, ##33352
094d4     F2 12 02 FB | 	rdlong	arg01, objptr
094d8     41 00 00 FF 
094dc     48 E4 85 F1 | 	sub	objptr, ##33352
094e0     9C 8F B0 FD | 	call	#_pslpeek
094e4     FF FF 7F FF 
094e8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
094ec     0C 00 90 5D |  if_ne	jmp	#LR__0790
094f0     1B 12 06 F6 | 	mov	arg01, #27
094f4     CC 8D B0 FD | 	call	#_printerror
094f8     68 02 90 FD | 	jmp	#LR__0796
094fc                 | LR__0790
094fc                 | ' if t1.result_type=result_string2 then t1.result.sresult=do_convertstring(t1.result.uresult): t1.result_type=result_string
094fc     08 4E 05 F1 | 	add	fp, #8
09500     A7 16 02 FB | 	rdlong	arg03, fp
09504     08 4E 85 F1 | 	sub	fp, #8
09508     2B 16 0E F2 | 	cmp	arg03, #43 wz
0950c     18 00 90 5D |  if_ne	jmp	#LR__0791
09510     A7 12 02 FB | 	rdlong	arg01, fp
09514     50 11 B0 FD | 	call	#_do_convertstring
09518     A7 FA 61 FC | 	wrlong	result1, fp
0951c     08 4E 05 F1 | 	add	fp, #8
09520     A7 3E 68 FC | 	wrlong	#31, fp
09524     08 4E 85 F1 | 	sub	fp, #8
09528                 | LR__0791
09528                 | ' if t1.result_type=result_string then
09528     08 4E 05 F1 | 	add	fp, #8
0952c     A7 1E 02 FB | 	rdlong	local01, fp
09530     08 4E 85 F1 | 	sub	fp, #8
09534     1F 1E 0E F2 | 	cmp	local01, #31 wz
09538     28 02 90 5D |  if_ne	jmp	#LR__0795
0953c                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas"
0953c     A7 12 02 FB | 	rdlong	arg01, fp
09540     26 01 00 FF 
09544     78 15 06 F6 | 	mov	arg02, ##@LR__4318
09548     9C C2 B0 FD | 	call	#__system___string_cmp
0954c     00 FA 0D F2 | 	cmp	result1, #0 wz
09550     26 01 00 AF 
09554     79 1F 06 A6 |  if_e	mov	local01, ##@LR__4319
09558     A7 1E 62 AC |  if_e	wrlong	local01, fp
0955c                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0955c     09 12 06 F6 | 	mov	arg01, #9
09560     3C 0E B1 FD | 	call	#__system__close
09564     09 1E 06 F6 | 	mov	local01, #9
09568     49 00 00 FF 
0956c     58 E4 05 F1 | 	add	objptr, ##37464
09570     F2 12 02 FB | 	rdlong	arg01, objptr
09574     49 00 00 FF 
09578     58 E4 85 F1 | 	sub	objptr, ##37464
0957c     26 01 00 FF 
09580     84 15 06 F6 | 	mov	arg02, ##@LR__4320
09584     94 C2 B0 FD | 	call	#__system___string_concat
09588     FD 12 02 F6 | 	mov	arg01, result1
0958c     A7 14 02 FB | 	rdlong	arg02, fp
09590     88 C2 B0 FD | 	call	#__system___string_concat
09594     FD 14 02 F6 | 	mov	arg02, result1
09598     0F 13 02 F6 | 	mov	arg01, local01
0959c     0D 16 06 F6 | 	mov	arg03, #13
095a0     20 CE B0 FD | 	call	#__system___basic_open_string
095a4     01 00 00 FF 
095a8     0C 4E 05 F1 | 	add	fp, ##524
095ac     A7 0A 68 FC | 	wrlong	#5, fp
095b0     41 00 00 FF 
095b4     48 E4 05 F1 | 	add	objptr, ##33352
095b8     F2 1E 02 FB | 	rdlong	local01, objptr
095bc     41 00 00 FF 
095c0     48 E4 85 F1 | 	sub	objptr, ##33352
095c4     0C 4E 05 F1 | 	add	fp, #12
095c8     A7 1E 62 FC | 	wrlong	local01, fp
095cc     01 00 00 FF 
095d0     18 4E 85 F1 | 	sub	fp, ##536
095d4                 | ' '  put #9,1,fileheader,1
095d4                 | '   i=5
095d4                 | '   saveptr=programstart
095d4                 | '   do
095d4                 | LR__0792
095d4     01 00 00 FF 
095d8     1C 4E 05 F1 | 	add	fp, ##540
095dc     A7 12 02 F6 | 	mov	arg01, fp
095e0     04 4E 85 F1 | 	sub	fp, #4
095e4     A7 14 02 FB | 	rdlong	arg02, fp
095e8     01 00 00 FF 
095ec     18 4E 85 F1 | 	sub	fp, ##536
095f0     18 16 06 F6 | 	mov	arg03, #24
095f4     0B 00 00 FF 
095f8     C0 E4 05 F1 | 	add	objptr, ##5824
095fc     D4 B6 B0 FD | 	call	#_psram_spin2_read1
09600     01 00 00 FF 
09604     34 4E 05 F1 | 	add	fp, ##564
09608     A7 12 02 F6 | 	mov	arg01, fp
0960c     10 4E 85 F1 | 	sub	fp, #16
09610     A7 14 02 FB | 	rdlong	arg02, fp
09614     04 4E 05 F1 | 	add	fp, #4
09618     A7 16 02 FB | 	rdlong	arg03, fp
0961c     01 00 00 FF 
09620     28 4E 85 F1 | 	sub	fp, ##552
09624     AC B6 B0 FD | 	call	#_psram_spin2_read1
09628     0B 00 00 FF 
0962c     C0 E4 85 F1 | 	sub	objptr, ##5824
09630     26 01 00 FF 
09634     86 1F 06 F6 | 	mov	local01, ##@LR__4321
09638     01 00 00 FF 
0963c     B4 4E 05 F1 | 	add	fp, ##692
09640     A7 1E 62 FC | 	wrlong	local01, fp
09644                 | '     psram.read1(varptr(header(0)),saveptr,24)
09644                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
09644                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
09644     A8 4E 85 F1 | 	sub	fp, #168
09648     A7 02 68 FC | 	wrlong	#1, fp
0964c     1C 4E 05 F1 | 	add	fp, #28
09650     A7 20 02 FB | 	rdlong	local02, fp
09654     01 00 00 FF 
09658     28 4E 85 F1 | 	sub	fp, ##552
0965c     01 20 06 F1 | 	add	local02, #1
09660                 | LR__0793
09660     01 00 00 FF 
09664     0C 4E 05 F1 | 	add	fp, ##524
09668     A7 1E 02 FB | 	rdlong	local01, fp
0966c     01 00 00 FF 
09670     0C 4E 85 F1 | 	sub	fp, ##524
09674     10 1F 52 F2 | 	cmps	local01, local02 wc
09678     64 00 90 3D |  if_ae	jmp	#LR__0794
0967c     01 00 00 FF 
09680     B4 4E 05 F1 | 	add	fp, ##692
09684     A7 1E 02 FB | 	rdlong	local01, fp
09688     A8 4E 85 F1 | 	sub	fp, #168
0968c     A7 16 02 FB | 	rdlong	arg03, fp
09690     01 16 86 F1 | 	sub	arg03, #1
09694     28 4E 05 F1 | 	add	fp, #40
09698     A7 16 02 F1 | 	add	arg03, fp
0969c     0B 13 C2 FA | 	rdbyte	arg01, arg03
096a0     01 00 00 FF 
096a4     34 4E 85 F1 | 	sub	fp, ##564
096a8     E8 E2 B0 FD | 	call	#__system__Chr_S
096ac     FD 14 02 F6 | 	mov	arg02, result1
096b0     0F 13 02 F6 | 	mov	arg01, local01
096b4     64 C1 B0 FD | 	call	#__system___string_concat
096b8     01 00 00 FF 
096bc     B4 4E 05 F1 | 	add	fp, ##692
096c0     A7 FA 61 FC | 	wrlong	result1, fp
096c4     A8 4E 85 F1 | 	sub	fp, #168
096c8     A7 1E 02 FB | 	rdlong	local01, fp
096cc     01 1E 06 F1 | 	add	local01, #1
096d0     A7 1E 62 FC | 	wrlong	local01, fp
096d4     01 00 00 FF 
096d8     0C 4E 85 F1 | 	sub	fp, ##524
096dc     80 FF 9F FD | 	jmp	#LR__0793
096e0                 | LR__0794
096e0                 | '  '   put #9,i,header(3),1 : i+=4
096e0                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
096e0                 | '      print #9, saveline$
096e0     09 12 06 F6 | 	mov	arg01, #9
096e4     88 16 B1 FD | 	call	#__system___getiolock_0369
096e8     FD 12 02 F6 | 	mov	arg01, result1
096ec     D0 C0 B0 FD | 	call	#__system___lockmem
096f0     01 00 00 FF 
096f4     B4 4E 05 F1 | 	add	fp, ##692
096f8     A7 14 02 FB | 	rdlong	arg02, fp
096fc     01 00 00 FF 
09700     B4 4E 85 F1 | 	sub	fp, ##692
09704     09 12 06 F6 | 	mov	arg01, #9
09708     00 16 06 F6 | 	mov	arg03, #0
0970c     A4 CD B0 FD | 	call	#__system___basic_print_string
09710     09 12 06 F6 | 	mov	arg01, #9
09714     0A 14 06 F6 | 	mov	arg02, #10
09718     00 16 06 F6 | 	mov	arg03, #0
0971c     3C CD B0 FD | 	call	#__system___basic_print_char
09720     09 12 06 F6 | 	mov	arg01, #9
09724     48 16 B1 FD | 	call	#__system___getiolock_0369
09728     FD 00 68 FC | 	wrlong	#0, result1
0972c     01 00 00 FF 
09730     30 4E 05 F1 | 	add	fp, ##560
09734     A7 1E 02 FB | 	rdlong	local01, fp
09738     18 4E 85 F1 | 	sub	fp, #24
0973c     A7 1E 62 FC | 	wrlong	local01, fp
09740     18 4E 05 F1 | 	add	fp, #24
09744     A7 1E 02 FB | 	rdlong	local01, fp
09748     01 00 00 FF 
0974c     30 4E 85 F1 | 	sub	fp, ##560
09750     FF FF 3F FF 
09754     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
09758     78 FE 9F 5D |  if_ne	jmp	#LR__0792
0975c                 | '   close #9  
0975c     09 12 06 F6 | 	mov	arg01, #9
09760     3C 0C B1 FD | 	call	#__system__close
09764                 | LR__0795
09764                 | LR__0796
09764     A7 F0 03 F6 | 	mov	ptra, fp
09768     B2 00 A0 FD | 	call	#popregs_
0976c                 | _do_save_ret
0976c     2D 00 64 FD | 	ret
09770                 | 
09770                 | ' 
09770                 | ' '----------------- Load the program
09770                 | ' 'lo todo: errors while loading
09770                 | ' sub do_load
09770                 | _do_load
09770     01 4A 05 F6 | 	mov	COUNT_, #1
09774     A8 00 A0 FD | 	call	#pushregs_
09778     A4 F0 07 F1 | 	add	ptra, #164
0977c     A0 4E 05 F1 | 	add	fp, #160
09780     A7 12 02 F6 | 	mov	arg01, fp
09784     80 4E 85 F1 | 	sub	fp, #128
09788     A7 14 02 F6 | 	mov	arg02, fp
0978c     20 4E 85 F1 | 	sub	fp, #32
09790     09 15 62 FC | 	wrlong	arg02, arg01
09794     DC F1 BF FD | 	call	#_pop
09798     FF 1A 02 F6 | 	mov	arg05, result3
0979c     A7 FA 61 FC | 	wrlong	result1, fp
097a0     04 4E 05 F1 | 	add	fp, #4
097a4     A7 FC 61 FC | 	wrlong	result2, fp
097a8     04 4E 05 F1 | 	add	fp, #4
097ac     A7 1A 62 FC | 	wrlong	arg05, fp
097b0                 | ' 
097b0                 | ' lpoke varptr(line2$),varptr(line2)
097b0                 | ' t1=pop() 
097b0                 | ' 'print "popped "; t1.result.uresult, t1.result_type
097b0                 | ' if t1.result_type=result_string2 then t1.result.sresult=do_convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
097b0     08 4E 85 F1 | 	sub	fp, #8
097b4     2B 1A 0E F2 | 	cmp	arg05, #43 wz
097b8     18 00 90 5D |  if_ne	jmp	#LR__0800
097bc     A7 12 02 FB | 	rdlong	arg01, fp
097c0     A4 0E B0 FD | 	call	#_do_convertstring
097c4     A7 FA 61 FC | 	wrlong	result1, fp
097c8     08 4E 05 F1 | 	add	fp, #8
097cc     A7 3E 68 FC | 	wrlong	#31, fp
097d0     08 4E 85 F1 | 	sub	fp, #8
097d4                 | LR__0800
097d4                 | ' if t1.result_type=result_string then
097d4     08 4E 05 F1 | 	add	fp, #8
097d8     A7 1E 02 FB | 	rdlong	local01, fp
097dc     08 4E 85 F1 | 	sub	fp, #8
097e0     1F 1E 0E F2 | 	cmp	local01, #31 wz
097e4     40 03 90 5D |  if_ne	jmp	#LR__0807
097e8     18 09 B0 FD | 	call	#_do_new
097ec                 | '   do_new
097ec                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas" 
097ec     A7 12 02 FB | 	rdlong	arg01, fp
097f0     26 01 00 FF 
097f4     87 15 06 F6 | 	mov	arg02, ##@LR__4322
097f8     EC BF B0 FD | 	call	#__system___string_cmp
097fc     00 FA 0D F2 | 	cmp	result1, #0 wz
09800     26 01 00 AF 
09804     88 1F 06 A6 |  if_e	mov	local01, ##@LR__4323
09808     A7 1E 62 AC |  if_e	wrlong	local01, fp
0980c                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0980c     09 12 06 F6 | 	mov	arg01, #9
09810     8C 0B B1 FD | 	call	#__system__close
09814     09 1E 06 F6 | 	mov	local01, #9
09818     49 00 00 FF 
0981c     58 E4 05 F1 | 	add	objptr, ##37464
09820     F2 12 02 FB | 	rdlong	arg01, objptr
09824     49 00 00 FF 
09828     58 E4 85 F1 | 	sub	objptr, ##37464
0982c     26 01 00 FF 
09830     93 15 06 F6 | 	mov	arg02, ##@LR__4324
09834     E4 BF B0 FD | 	call	#__system___string_concat
09838     FD 12 02 F6 | 	mov	arg01, result1
0983c     A7 14 02 FB | 	rdlong	arg02, fp
09840     D8 BF B0 FD | 	call	#__system___string_concat
09844     FD 14 02 F6 | 	mov	arg02, result1
09848     0F 13 02 F6 | 	mov	arg01, local01
0984c     00 16 06 F6 | 	mov	arg03, #0
09850     70 CB B0 FD | 	call	#__system___basic_open_string
09854     20 E8 05 F1 | 	add	ptr___system__dat__, #32
09858     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0985c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
09860     10 4E 05 F1 | 	add	fp, #16
09864     A7 FA 61 FC | 	wrlong	result1, fp
09868                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
09868     10 4E 85 F1 | 	sub	fp, #16
0986c     9C 00 90 AD |  if_e	jmp	#LR__0801
09870     00 12 06 F6 | 	mov	arg01, #0
09874     F8 14 B1 FD | 	call	#__system___getiolock_0369
09878     FD 12 02 F6 | 	mov	arg01, result1
0987c     40 BF B0 FD | 	call	#__system___lockmem
09880     26 01 00 FF 
09884     95 15 06 F6 | 	mov	arg02, ##@LR__4325
09888     00 12 06 F6 | 	mov	arg01, #0
0988c     00 16 06 F6 | 	mov	arg03, #0
09890     20 CC B0 FD | 	call	#__system___basic_print_string
09894     10 4E 05 F1 | 	add	fp, #16
09898     A7 14 02 FB | 	rdlong	arg02, fp
0989c     10 4E 85 F1 | 	sub	fp, #16
098a0     00 12 06 F6 | 	mov	arg01, #0
098a4     00 16 06 F6 | 	mov	arg03, #0
098a8     0A 18 06 F6 | 	mov	arg04, #10
098ac     48 CC B0 FD | 	call	#__system___basic_print_integer
098b0     26 01 00 FF 
098b4     A3 15 06 F6 | 	mov	arg02, ##@LR__4326
098b8     00 12 06 F6 | 	mov	arg01, #0
098bc     00 16 06 F6 | 	mov	arg03, #0
098c0     F0 CB B0 FD | 	call	#__system___basic_print_string
098c4     10 4E 05 F1 | 	add	fp, #16
098c8     A7 12 02 FB | 	rdlong	arg01, fp
098cc     10 4E 85 F1 | 	sub	fp, #16
098d0     EC E4 B0 FD | 	call	#__system___strerror
098d4     FD 14 02 F6 | 	mov	arg02, result1
098d8     00 12 06 F6 | 	mov	arg01, #0
098dc     00 16 06 F6 | 	mov	arg03, #0
098e0     D0 CB B0 FD | 	call	#__system___basic_print_string
098e4     00 12 06 F6 | 	mov	arg01, #0
098e8     0A 14 06 F6 | 	mov	arg02, #10
098ec     00 16 06 F6 | 	mov	arg03, #0
098f0     68 CB B0 FD | 	call	#__system___basic_print_char
098f4     00 12 06 F6 | 	mov	arg01, #0
098f8     74 14 B1 FD | 	call	#__system___getiolock_0369
098fc     FD 00 68 FC | 	wrlong	#0, result1
09900     09 12 06 F6 | 	mov	arg01, #9
09904     98 0A B1 FD | 	call	#__system__close
09908     24 02 90 FD | 	jmp	#LR__0809
0990c                 | LR__0801
0990c     0C 4E 05 F1 | 	add	fp, #12
09910     A7 0A 68 FC | 	wrlong	#5, fp
09914                 | '   i=5
09914                 | '   get #9,1,header,1
09914     0C 4E 05 F1 | 	add	fp, #12
09918     A7 16 02 F6 | 	mov	arg03, fp
0991c     18 4E 85 F1 | 	sub	fp, #24
09920     09 12 06 F6 | 	mov	arg01, #9
09924     01 14 06 F6 | 	mov	arg02, #1
09928     01 18 06 F6 | 	mov	arg04, #1
0992c     04 1A 06 F6 | 	mov	arg05, #4
09930     90 CC B0 FD | 	call	#__system___basic_get
09934                 | '   
09934                 | '   if header<>$0D616272 then 
09934     18 4E 05 F1 | 	add	fp, #24
09938     A7 1E 02 FB | 	rdlong	local01, fp
0993c     18 4E 85 F1 | 	sub	fp, #24
09940     B1 B0 06 FF 
09944     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
09948     F0 00 90 AD |  if_e	jmp	#LR__0804
0994c                 | '     close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0994c     09 12 06 F6 | 	mov	arg01, #9
09950     4C 0A B1 FD | 	call	#__system__close
09954     09 1E 06 F6 | 	mov	local01, #9
09958     49 00 00 FF 
0995c     58 E4 05 F1 | 	add	objptr, ##37464
09960     F2 12 02 FB | 	rdlong	arg01, objptr
09964     49 00 00 FF 
09968     58 E4 85 F1 | 	sub	objptr, ##37464
0996c     26 01 00 FF 
09970     A6 15 06 F6 | 	mov	arg02, ##@LR__4327
09974     A4 BE B0 FD | 	call	#__system___string_concat
09978     FD 12 02 F6 | 	mov	arg01, result1
0997c     A7 14 02 FB | 	rdlong	arg02, fp
09980     98 BE B0 FD | 	call	#__system___string_concat
09984     FD 14 02 F6 | 	mov	arg02, result1
09988     0F 13 02 F6 | 	mov	arg01, local01
0998c     00 16 06 F6 | 	mov	arg03, #0
09990     30 CA B0 FD | 	call	#__system___basic_open_string
09994                 | '     do
09994                 | LR__0802
09994     09 12 06 F6 | 	mov	arg01, #9
09998     30 C0 B0 FD | 	call	#__system___basic_read_line
0999c     2D 00 00 FF 
099a0     E0 E5 05 F1 | 	add	objptr, ##23520
099a4     F2 FA 61 FC | 	wrlong	result1, objptr
099a8                 | '       if left$(line$,1) >="0" andalso left$(line$,1)<="9" then interpret
099a8     2D 00 00 FF 
099ac     E0 E5 85 F1 | 	sub	objptr, ##23520
099b0     FD 12 02 F6 | 	mov	arg01, result1
099b4     01 14 06 F6 | 	mov	arg02, #1
099b8     14 DE B0 FD | 	call	#__system__Left_S
099bc     FD 12 02 F6 | 	mov	arg01, result1
099c0     26 01 00 FF 
099c4     A8 15 06 F6 | 	mov	arg02, ##@LR__4328
099c8     1C BE B0 FD | 	call	#__system___string_cmp
099cc     00 FA 55 F2 | 	cmps	result1, #0 wc
099d0     34 00 90 CD |  if_b	jmp	#LR__0803
099d4     2D 00 00 FF 
099d8     E0 E5 05 F1 | 	add	objptr, ##23520
099dc     F2 12 02 FB | 	rdlong	arg01, objptr
099e0     2D 00 00 FF 
099e4     E0 E5 85 F1 | 	sub	objptr, ##23520
099e8     01 14 06 F6 | 	mov	arg02, #1
099ec     E0 DD B0 FD | 	call	#__system__Left_S
099f0     FD 12 02 F6 | 	mov	arg01, result1
099f4     26 01 00 FF 
099f8     AA 15 06 F6 | 	mov	arg02, ##@LR__4329
099fc     E8 BD B0 FD | 	call	#__system___string_cmp
09a00     01 FA 55 F2 | 	cmps	result1, #1 wc
09a04     14 70 BF CD |  if_b	call	#_interpret
09a08                 | LR__0803
09a08     2D 00 00 FF 
09a0c     E0 E5 05 F1 | 	add	objptr, ##23520
09a10     F2 12 02 FB | 	rdlong	arg01, objptr
09a14     2D 00 00 FF 
09a18     E0 E5 85 F1 | 	sub	objptr, ##23520
09a1c     26 01 00 FF 
09a20     AC 15 06 F6 | 	mov	arg02, ##@LR__4330
09a24     C0 BD B0 FD | 	call	#__system___string_cmp
09a28     00 FA 0D F2 | 	cmp	result1, #0 wz
09a2c     64 FF 9F 5D |  if_ne	jmp	#LR__0802
09a30                 | '     close #9
09a30     09 12 06 F6 | 	mov	arg01, #9
09a34     68 09 B1 FD | 	call	#__system__close
09a38     F4 00 90 FD | 	jmp	#LR__0808
09a3c                 | LR__0804
09a3c                 | '   'printerror(26) : close #9 : return
09a3c                 | '     do
09a3c                 | LR__0805
09a3c                 | '       get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
09a3c     0C 4E 05 F1 | 	add	fp, #12
09a40     A7 14 02 FB | 	rdlong	arg02, fp
09a44     10 4E 05 F1 | 	add	fp, #16
09a48     A7 16 02 F6 | 	mov	arg03, fp
09a4c     1C 4E 85 F1 | 	sub	fp, #28
09a50     09 12 06 F6 | 	mov	arg01, #9
09a54     01 18 06 F6 | 	mov	arg04, #1
09a58     04 1A 06 F6 | 	mov	arg05, #4
09a5c     64 CB B0 FD | 	call	#__system___basic_get
09a60     14 4E 05 F1 | 	add	fp, #20
09a64     A7 FA 61 FC | 	wrlong	result1, fp
09a68     08 4E 85 F1 | 	sub	fp, #8
09a6c     A7 1E 02 FB | 	rdlong	local01, fp
09a70     04 1E 06 F1 | 	add	local01, #4
09a74     A7 1E 62 FC | 	wrlong	local01, fp
09a78     10 4E 05 F1 | 	add	fp, #16
09a7c     A7 1E 02 FB | 	rdlong	local01, fp
09a80     04 4E 05 F1 | 	add	fp, #4
09a84     A7 1E 02 F1 | 	add	local01, fp
09a88     0F 01 48 FC | 	wrbyte	#0, local01
09a8c                 | '       if amount=1 then  
09a8c     0C 4E 85 F1 | 	sub	fp, #12
09a90     A7 1E 02 FB | 	rdlong	local01, fp
09a94     14 4E 85 F1 | 	sub	fp, #20
09a98     01 1E 0E F2 | 	cmp	local01, #1 wz
09a9c     68 00 90 5D |  if_ne	jmp	#LR__0806
09aa0                 | '         get #9,i,line2(0),linelength : i+=linelength
09aa0     0C 4E 05 F1 | 	add	fp, #12
09aa4     A7 14 02 FB | 	rdlong	arg02, fp
09aa8     14 4E 05 F1 | 	add	fp, #20
09aac     A7 16 02 F6 | 	mov	arg03, fp
09ab0     04 4E 85 F1 | 	sub	fp, #4
09ab4     A7 18 02 FB | 	rdlong	arg04, fp
09ab8     1C 4E 85 F1 | 	sub	fp, #28
09abc     09 12 06 F6 | 	mov	arg01, #9
09ac0     01 1A 06 F6 | 	mov	arg05, #1
09ac4     FC CA B0 FD | 	call	#__system___basic_get
09ac8     0C 4E 05 F1 | 	add	fp, #12
09acc     A7 1E 02 FB | 	rdlong	local01, fp
09ad0     10 4E 05 F1 | 	add	fp, #16
09ad4     A7 1A 02 FB | 	rdlong	arg05, fp
09ad8     0D 1F 02 F1 | 	add	local01, arg05
09adc     10 4E 85 F1 | 	sub	fp, #16
09ae0     A7 1E 62 FC | 	wrlong	local01, fp
09ae4     94 4E 05 F1 | 	add	fp, #148
09ae8     A7 1E 02 FB | 	rdlong	local01, fp
09aec     A0 4E 85 F1 | 	sub	fp, #160
09af0     2D 00 00 FF 
09af4     E0 E5 05 F1 | 	add	objptr, ##23520
09af8     F2 1E 62 FC | 	wrlong	local01, objptr
09afc     2D 00 00 FF 
09b00     E0 E5 85 F1 | 	sub	objptr, ##23520
09b04     14 6F BF FD | 	call	#_interpret
09b08                 | LR__0806
09b08     14 4E 05 F1 | 	add	fp, #20
09b0c     A7 1E 02 FB | 	rdlong	local01, fp
09b10     14 4E 85 F1 | 	sub	fp, #20
09b14     01 1E 56 F2 | 	cmps	local01, #1 wc
09b18     20 FF 9F 3D |  if_ae	jmp	#LR__0805
09b1c                 | '     close #9 
09b1c     09 12 06 F6 | 	mov	arg01, #9
09b20     7C 08 B1 FD | 	call	#__system__close
09b24     08 00 90 FD | 	jmp	#LR__0808
09b28                 | LR__0807
09b28     1E 12 06 F6 | 	mov	arg01, #30
09b2c     94 87 B0 FD | 	call	#_printerror
09b30                 | LR__0808
09b30                 | LR__0809
09b30     A7 F0 03 F6 | 	mov	ptra, fp
09b34     B2 00 A0 FD | 	call	#popregs_
09b38                 | _do_load_ret
09b38     2D 00 64 FD | 	ret
09b3c                 | 
09b3c                 | ' 
09b3c                 | ' '----------------- Run the program 
09b3c                 | ' 
09b3c                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
09b3c                 | ' 
09b3c                 | ' sub do_run
09b3c                 | _do_run
09b3c     01 4A 05 F6 | 	mov	COUNT_, #1
09b40     A8 00 A0 FD | 	call	#pushregs_
09b44     41 00 00 FF 
09b48     48 E4 05 F1 | 	add	objptr, ##33352
09b4c     F2 1C 02 FB | 	rdlong	arg06, objptr
09b50     0F 00 00 FF 
09b54     2C E5 05 F1 | 	add	objptr, ##7980
09b58     F2 1C 62 FC | 	wrlong	arg06, objptr
09b5c     04 E4 05 F1 | 	add	objptr, #4
09b60     F2 00 68 FC | 	wrlong	#0, objptr
09b64     04 E4 05 F1 | 	add	objptr, #4
09b68     FF FF FF FF 
09b6c     F2 FE 6B FC | 	wrlong	##-1, objptr
09b70                 | ' if inrun>0 then 
09b70     04 E4 05 F1 | 	add	objptr, #4
09b74     F2 1C 02 FB | 	rdlong	arg06, objptr
09b78     50 00 00 FF 
09b7c     80 E5 85 F1 | 	sub	objptr, ##41344
09b80     01 1C 16 F2 | 	cmp	arg06, #1 wc
09b84     30 00 90 CD |  if_b	jmp	#LR__0810
09b88     50 00 00 FF 
09b8c     84 E5 05 F1 | 	add	objptr, ##41348
09b90     F2 12 02 F6 | 	mov	arg01, objptr
09b94     10 E4 85 F1 | 	sub	objptr, #16
09b98     F2 14 02 FB | 	rdlong	arg02, objptr
09b9c     18 16 06 F6 | 	mov	arg03, #24
09ba0     45 00 00 FF 
09ba4     B4 E4 85 F1 | 	sub	objptr, ##35508
09ba8     28 B1 B0 FD | 	call	#_psram_spin2_read1
09bac     0B 00 00 FF 
09bb0     C0 E4 85 F1 | 	sub	objptr, ##5824
09bb4                 | '   psram.read1(varptr(runheader),runptr,24)  
09bb4                 | '   return
09bb4     A4 02 90 FD | 	jmp	#LR__0816
09bb8                 | LR__0810
09bb8     50 00 00 FF 
09bbc     80 E5 05 F1 | 	add	objptr, ##41344
09bc0     F2 02 68 FC | 	wrlong	#1, objptr
09bc4     04 E4 05 F1 | 	add	objptr, #4
09bc8     F2 12 02 F6 | 	mov	arg01, objptr
09bcc     10 E4 85 F1 | 	sub	objptr, #16
09bd0     F2 14 02 FB | 	rdlong	arg02, objptr
09bd4     18 16 06 F6 | 	mov	arg03, #24
09bd8     45 00 00 FF 
09bdc     B4 E4 85 F1 | 	sub	objptr, ##35508
09be0     F0 B0 B0 FD | 	call	#_psram_spin2_read1
09be4                 | ' inrun=1
09be4                 | ' psram.read1(varptr(runheader),runptr,24) 
09be4                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
09be4     45 00 00 FF 
09be8     C4 E4 05 F1 | 	add	objptr, ##35524
09bec     F2 1E 02 FB | 	rdlong	local01, objptr
09bf0     50 00 00 FF 
09bf4     84 E5 85 F1 | 	sub	objptr, ##41348
09bf8     FF FF 7F FF 
09bfc     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
09c00     50 00 00 AF 
09c04     80 E5 05 A1 |  if_e	add	objptr, ##41344
09c08     F2 00 68 AC |  if_e	wrlong	#0, objptr
09c0c     50 00 00 AF 
09c10     80 E5 85 A1 |  if_e	sub	objptr, ##41344
09c14     44 02 90 AD |  if_e	jmp	#LR__0816
09c18                 | ' do 
09c18                 | LR__0811
09c18                 | '   if runptr<>oldrunptr then
09c18     50 00 00 FF 
09c1c     74 E5 05 F1 | 	add	objptr, ##41332
09c20     F2 1E 02 FB | 	rdlong	local01, objptr
09c24     08 E4 05 F1 | 	add	objptr, #8
09c28     F2 1C 02 FB | 	rdlong	arg06, objptr
09c2c     50 00 00 FF 
09c30     7C E5 85 F1 | 	sub	objptr, ##41340
09c34     0E 1F 0A F2 | 	cmp	local01, arg06 wz
09c38     CC 00 90 AD |  if_e	jmp	#LR__0812
09c3c     50 00 00 FF 
09c40     84 E5 05 F1 | 	add	objptr, ##41348
09c44     F2 12 02 F6 | 	mov	arg01, objptr
09c48     10 E4 85 F1 | 	sub	objptr, #16
09c4c     F2 14 02 FB | 	rdlong	arg02, objptr
09c50     18 16 06 F6 | 	mov	arg03, #24
09c54     45 00 00 FF 
09c58     B4 E4 85 F1 | 	sub	objptr, ##35508
09c5c     74 B0 B0 FD | 	call	#_psram_spin2_read1
09c60     32 00 00 FF 
09c64     80 E5 05 F1 | 	add	objptr, ##25984
09c68     F2 12 02 F6 | 	mov	arg01, objptr
09c6c     12 00 00 FF 
09c70     34 E5 05 F1 | 	add	objptr, ##9524
09c74     F2 14 02 FB | 	rdlong	arg02, objptr
09c78     14 00 00 FF 
09c7c     4C E5 85 F1 | 	sub	objptr, ##10572
09c80     F2 1E 02 FB | 	rdlong	local01, objptr
09c84     01 1E 66 F0 | 	shl	local01, #1
09c88     0F 15 02 F1 | 	add	arg02, local01
09c8c     14 00 00 FF 
09c90     64 E5 05 F1 | 	add	objptr, ##10596
09c94     F2 16 02 FB | 	rdlong	arg03, objptr
09c98     18 E4 85 F1 | 	sub	objptr, #24
09c9c     F2 1E 02 FB | 	rdlong	local01, objptr
09ca0     0F 17 82 F1 | 	sub	arg03, local01
09ca4     45 00 00 FF 
09ca8     B4 E4 85 F1 | 	sub	objptr, ##35508
09cac     24 B0 B0 FD | 	call	#_psram_spin2_read1
09cb0     45 00 00 FF 
09cb4     CC E4 05 F1 | 	add	objptr, ##35532
09cb8     F2 1E 02 FB | 	rdlong	local01, objptr
09cbc     18 E4 85 F1 | 	sub	objptr, #24
09cc0     F2 1C 02 FB | 	rdlong	arg06, objptr
09cc4     0E 1F 82 F1 | 	sub	local01, arg06
09cc8     14 00 00 FF 
09ccc     4C E5 85 F1 | 	sub	objptr, ##10572
09cd0     F2 1C 02 FB | 	rdlong	arg06, objptr
09cd4     0E 1F 12 FD | 	qdiv	local01, arg06
09cd8     05 00 00 FF 
09cdc     18 E4 05 F1 | 	add	objptr, ##2584
09ce0     18 1E 62 FD | 	getqx	local01
09ce4     03 1E 86 F1 | 	sub	local01, #3
09ce8     F2 1E 62 FC | 	wrlong	local01, objptr
09cec     0F 00 00 FF 
09cf0     34 E5 05 F1 | 	add	objptr, ##7988
09cf4     F2 1E 02 FB | 	rdlong	local01, objptr
09cf8     08 E4 05 F1 | 	add	objptr, #8
09cfc     F2 1E 62 FC | 	wrlong	local01, objptr
09d00     50 00 00 FF 
09d04     7C E5 85 F1 | 	sub	objptr, ##41340
09d08                 | LR__0812
09d08     50 00 00 FF 
09d0c     98 E5 05 F1 | 	add	objptr, ##41368
09d10     F2 1E 02 FB | 	rdlong	local01, objptr
09d14     24 E4 85 F1 | 	sub	objptr, #36
09d18     F2 1E 62 FC | 	wrlong	local01, objptr
09d1c     04 E4 05 F1 | 	add	objptr, #4
09d20     F2 12 02 FB | 	rdlong	arg01, objptr
09d24     50 00 00 FF 
09d28     78 E5 85 F1 | 	sub	objptr, ##41336
09d2c     40 EB BF FD | 	call	#_execute_line
09d30     50 00 00 FF 
09d34     78 E5 05 F1 | 	add	objptr, ##41336
09d38     F2 FA 61 FC | 	wrlong	result1, objptr
09d3c     04 E4 85 F1 | 	sub	objptr, #4
09d40     F2 1E 02 FB | 	rdlong	local01, objptr
09d44     50 00 00 FF 
09d48     74 E5 85 F1 | 	sub	objptr, ##41332
09d4c     FF FF 3F FF 
09d50     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
09d54     0C 00 90 AD |  if_e	jmp	#LR__0813
09d58     08 B3 B0 FD | 	call	#_usbnew_spin2_get_key
09d5c     06 FB 0D F2 | 	cmp	result1, #262 wz
09d60     B4 FE 9F 5D |  if_ne	jmp	#LR__0811
09d64                 | LR__0813
09d64                 | ' if runheader(5)<>$7FFF_FFFF then 
09d64     50 00 00 FF 
09d68     98 E5 05 F1 | 	add	objptr, ##41368
09d6c     F2 1E 02 FB | 	rdlong	local01, objptr
09d70     50 00 00 FF 
09d74     98 E5 85 F1 | 	sub	objptr, ##41368
09d78     FF FF 3F FF 
09d7c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
09d80     C4 00 90 AD |  if_e	jmp	#LR__0815
09d84                 | '   if keyclick=1 then paula.play(7,@atari_spl,44100,16384,1684)  
09d84     50 00 00 FF 
09d88     A4 E5 05 F1 | 	add	objptr, ##41380
09d8c     F2 1E 02 FB | 	rdlong	local01, objptr
09d90     50 00 00 FF 
09d94     A4 E5 85 F1 | 	sub	objptr, ##41380
09d98     01 1E 0E F2 | 	cmp	local01, #1 wz
09d9c     44 00 90 5D |  if_ne	jmp	#LR__0814
09da0     01 00 00 FF 
09da4     00 EA 05 F1 | 	add	ptr__dat__, ##512
09da8     F5 14 02 F6 | 	mov	arg02, ptr__dat__
09dac     01 00 00 FF 
09db0     00 EA 85 F1 | 	sub	ptr__dat__, ##512
09db4     07 12 06 F6 | 	mov	arg01, #7
09db8     56 00 00 FF 
09dbc     44 16 06 F6 | 	mov	arg03, ##44100
09dc0     0E 18 C6 F9 | 	decod	arg04, #14
09dc4     03 00 00 FF 
09dc8     94 1A 06 F6 | 	mov	arg05, ##1684
09dcc     01 1C 66 F6 | 	neg	arg06, #1
09dd0     0B 00 00 FF 
09dd4     C0 E4 05 F1 | 	add	objptr, ##5824
09dd8     B0 B5 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
09ddc     0B 00 00 FF 
09de0     C0 E4 85 F1 | 	sub	objptr, ##5824
09de4                 | LR__0814
09de4                 | '   print "Stopped at line ";runheader(0)
09de4     00 12 06 F6 | 	mov	arg01, #0
09de8     84 0F B1 FD | 	call	#__system___getiolock_0369
09dec     FD 12 02 F6 | 	mov	arg01, result1
09df0     CC B9 B0 FD | 	call	#__system___lockmem
09df4     26 01 00 FF 
09df8     AD 15 06 F6 | 	mov	arg02, ##@LR__4331
09dfc     00 12 06 F6 | 	mov	arg01, #0
09e00     00 16 06 F6 | 	mov	arg03, #0
09e04     AC C6 B0 FD | 	call	#__system___basic_print_string
09e08     50 00 00 FF 
09e0c     84 E5 05 F1 | 	add	objptr, ##41348
09e10     F2 14 02 FB | 	rdlong	arg02, objptr
09e14     50 00 00 FF 
09e18     84 E5 85 F1 | 	sub	objptr, ##41348
09e1c     00 12 06 F6 | 	mov	arg01, #0
09e20     00 16 06 F6 | 	mov	arg03, #0
09e24     0A 18 06 F6 | 	mov	arg04, #10
09e28     0C C7 B0 FD | 	call	#__system___basic_print_unsigned
09e2c     00 12 06 F6 | 	mov	arg01, #0
09e30     0A 14 06 F6 | 	mov	arg02, #10
09e34     00 16 06 F6 | 	mov	arg03, #0
09e38     20 C6 B0 FD | 	call	#__system___basic_print_char
09e3c     00 12 06 F6 | 	mov	arg01, #0
09e40     2C 0F B1 FD | 	call	#__system___getiolock_0369
09e44     FD 00 68 FC | 	wrlong	#0, result1
09e48                 | LR__0815
09e48     50 00 00 FF 
09e4c     80 E5 05 F1 | 	add	objptr, ##41344
09e50     F2 00 68 FC | 	wrlong	#0, objptr
09e54     50 00 00 FF 
09e58     80 E5 85 F1 | 	sub	objptr, ##41344
09e5c                 | LR__0816
09e5c     A7 F0 03 F6 | 	mov	ptra, fp
09e60     B2 00 A0 FD | 	call	#popregs_
09e64                 | _do_run_ret
09e64     2D 00 64 FD | 	ret
09e68                 | 
09e68                 | ' 
09e68                 | ' ' ---------------  List the program. Todo: it should accept parameters and do "more"
09e68                 | ' 
09e68                 | ' sub do_list
09e68                 | _do_list
09e68     02 4A 05 F6 | 	mov	COUNT_, #2
09e6c     A8 00 A0 FD | 	call	#pushregs_
09e70     B8 F0 07 F1 | 	add	ptra, #184
09e74     04 4E 05 F1 | 	add	fp, #4
09e78     A7 00 68 FC | 	wrlong	#0, fp
09e7c     04 4E 05 F1 | 	add	fp, #4
09e80     FF FF BF FF 
09e84     A7 FE 6B FC | 	wrlong	##2147483647, fp
09e88     08 4E 85 F1 | 	sub	fp, #8
09e8c     41 00 00 FF 
09e90     44 E4 05 F1 | 	add	objptr, ##33348
09e94     F2 1E 02 FB | 	rdlong	local01, objptr
09e98     0F 17 02 F6 | 	mov	arg03, local01
09e9c     01 16 66 F0 | 	shl	arg03, #1
09ea0     0F 17 02 F1 | 	add	arg03, local01
09ea4     02 16 66 F0 | 	shl	arg03, #2
09ea8     03 00 00 FF 
09eac     04 E4 85 F1 | 	sub	objptr, ##1540
09eb0     F2 16 02 F1 | 	add	arg03, objptr
09eb4     0B 17 02 FB | 	rdlong	arg03, arg03
09eb8     A7 16 62 FC | 	wrlong	arg03, fp
09ebc                 | ' 
09ebc                 | ' startline=0 : endline=$7FFFFFFF
09ebc                 | ' numpar=compiledline(lineptr_e).result.uresult
09ebc                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
09ebc     01 16 0E F2 | 	cmp	arg03, #1 wz
09ec0     3E 00 00 FF 
09ec4     40 E4 85 F1 | 	sub	objptr, ##31808
09ec8     3C 00 90 5D |  if_ne	jmp	#LR__0820
09ecc     A4 EA BF FD | 	call	#_pop
09ed0     FF 1E 02 F6 | 	mov	local01, result3
09ed4     0C 4E 05 F1 | 	add	fp, #12
09ed8     A7 FA 61 FC | 	wrlong	result1, fp
09edc     04 4E 05 F1 | 	add	fp, #4
09ee0     A7 FC 61 FC | 	wrlong	result2, fp
09ee4     04 4E 05 F1 | 	add	fp, #4
09ee8     A7 1E 62 FC | 	wrlong	local01, fp
09eec     08 4E 85 F1 | 	sub	fp, #8
09ef0     A7 12 02 F6 | 	mov	arg01, fp
09ef4     0C 4E 85 F1 | 	sub	fp, #12
09ef8     08 43 B0 FD | 	call	#_converttoint
09efc     04 4E 05 F1 | 	add	fp, #4
09f00     A7 FA 61 FC | 	wrlong	result1, fp
09f04     04 4E 85 F1 | 	sub	fp, #4
09f08                 | LR__0820
09f08                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
09f08     A7 16 02 FB | 	rdlong	arg03, fp
09f0c     02 16 0E F2 | 	cmp	arg03, #2 wz
09f10     7C 00 90 5D |  if_ne	jmp	#LR__0821
09f14     5C EA BF FD | 	call	#_pop
09f18     FF 1E 02 F6 | 	mov	local01, result3
09f1c     0C 4E 05 F1 | 	add	fp, #12
09f20     A7 FA 61 FC | 	wrlong	result1, fp
09f24     04 4E 05 F1 | 	add	fp, #4
09f28     A7 FC 61 FC | 	wrlong	result2, fp
09f2c     04 4E 05 F1 | 	add	fp, #4
09f30     A7 1E 62 FC | 	wrlong	local01, fp
09f34     08 4E 85 F1 | 	sub	fp, #8
09f38     A7 12 02 F6 | 	mov	arg01, fp
09f3c     0C 4E 85 F1 | 	sub	fp, #12
09f40     C0 42 B0 FD | 	call	#_converttoint
09f44     FD 1E 02 F6 | 	mov	local01, result1
09f48     08 4E 05 F1 | 	add	fp, #8
09f4c     A7 1E 62 FC | 	wrlong	local01, fp
09f50     08 4E 85 F1 | 	sub	fp, #8
09f54     1C EA BF FD | 	call	#_pop
09f58     FF 1E 02 F6 | 	mov	local01, result3
09f5c     0C 4E 05 F1 | 	add	fp, #12
09f60     A7 FA 61 FC | 	wrlong	result1, fp
09f64     04 4E 05 F1 | 	add	fp, #4
09f68     A7 FC 61 FC | 	wrlong	result2, fp
09f6c     04 4E 05 F1 | 	add	fp, #4
09f70     A7 1E 62 FC | 	wrlong	local01, fp
09f74     08 4E 85 F1 | 	sub	fp, #8
09f78     A7 12 02 F6 | 	mov	arg01, fp
09f7c     0C 4E 85 F1 | 	sub	fp, #12
09f80     80 42 B0 FD | 	call	#_converttoint
09f84     04 4E 05 F1 | 	add	fp, #4
09f88     A7 FA 61 FC | 	wrlong	result1, fp
09f8c     04 4E 85 F1 | 	sub	fp, #4
09f90                 | LR__0821
09f90                 | ' 
09f90                 | ' 
09f90                 | ' print
09f90     00 12 06 F6 | 	mov	arg01, #0
09f94     D8 0D B1 FD | 	call	#__system___getiolock_0369
09f98     FD 12 02 F6 | 	mov	arg01, result1
09f9c     20 B8 B0 FD | 	call	#__system___lockmem
09fa0     00 12 06 F6 | 	mov	arg01, #0
09fa4     0A 14 06 F6 | 	mov	arg02, #10
09fa8     00 16 06 F6 | 	mov	arg03, #0
09fac     AC C4 B0 FD | 	call	#__system___basic_print_char
09fb0     00 12 06 F6 | 	mov	arg01, #0
09fb4     B8 0D B1 FD | 	call	#__system___getiolock_0369
09fb8     FD 00 68 FC | 	wrlong	#0, result1
09fbc     41 00 00 FF 
09fc0     48 E4 05 F1 | 	add	objptr, ##33352
09fc4     F2 20 02 FB | 	rdlong	local02, objptr
09fc8     11 00 00 FF 
09fcc     54 E4 05 F1 | 	add	objptr, ##8788
09fd0     F2 20 62 FC | 	wrlong	local02, objptr
09fd4     52 00 00 FF 
09fd8     9C E4 85 F1 | 	sub	objptr, ##42140
09fdc                 | ' do 
09fdc                 | LR__0822
09fdc     20 4E 05 F1 | 	add	fp, #32
09fe0     A7 12 02 F6 | 	mov	arg01, fp
09fe4     20 4E 85 F1 | 	sub	fp, #32
09fe8     52 00 00 FF 
09fec     9C E4 05 F1 | 	add	objptr, ##42140
09ff0     F2 14 02 FB | 	rdlong	arg02, objptr
09ff4     18 16 06 F6 | 	mov	arg03, #24
09ff8     46 00 00 FF 
09ffc     DC E5 85 F1 | 	sub	objptr, ##36316
0a000     D0 AC B0 FD | 	call	#_psram_spin2_read1
0a004     0B 00 00 FF 
0a008     C0 E4 85 F1 | 	sub	objptr, ##5824
0a00c                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart
0a00c                 | '   if header(0)<> $FFFFFFFF then
0a00c     20 4E 05 F1 | 	add	fp, #32
0a010     A7 20 02 FB | 	rdlong	local02, fp
0a014     20 4E 85 F1 | 	sub	fp, #32
0a018     FF FF 7F FF 
0a01c     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0a020     A8 00 90 AD |  if_e	jmp	#LR__0824
0a024     38 4E 05 F1 | 	add	fp, #56
0a028     3F 16 06 F6 | 	mov	arg03, #63
0a02c     28 16 62 FD | 	setq	arg03
0a030     A7 00 68 FC | 	wrlong	#0, fp
0a034     A7 12 02 F6 | 	mov	arg01, fp
0a038     10 4E 85 F1 | 	sub	fp, #16
0a03c     A7 14 02 FB | 	rdlong	arg02, fp
0a040     04 4E 05 F1 | 	add	fp, #4
0a044     A7 16 02 FB | 	rdlong	arg03, fp
0a048     2C 4E 85 F1 | 	sub	fp, #44
0a04c     0B 00 00 FF 
0a050     C0 E4 05 F1 | 	add	objptr, ##5824
0a054     7C AC B0 FD | 	call	#_psram_spin2_read1
0a058     0B 00 00 FF 
0a05c     C0 E4 85 F1 | 	sub	objptr, ##5824
0a060                 | '     longfill(linebuf,0,64)
0a060                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0a060                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0a060     20 4E 05 F1 | 	add	fp, #32
0a064     A7 20 02 FB | 	rdlong	local02, fp
0a068     1C 4E 85 F1 | 	sub	fp, #28
0a06c     A7 1E 02 FB | 	rdlong	local01, fp
0a070     04 4E 85 F1 | 	sub	fp, #4
0a074     0F 21 52 F2 | 	cmps	local02, local01 wc
0a078     30 00 90 CD |  if_b	jmp	#LR__0823
0a07c     20 4E 05 F1 | 	add	fp, #32
0a080     A7 20 02 FB | 	rdlong	local02, fp
0a084     18 4E 85 F1 | 	sub	fp, #24
0a088     A7 16 02 FB | 	rdlong	arg03, fp
0a08c     08 4E 85 F1 | 	sub	fp, #8
0a090     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0a094     14 00 90 1D |  if_a	jmp	#LR__0823
0a098     38 4E 05 F1 | 	add	fp, #56
0a09c     A7 12 02 F6 | 	mov	arg01, fp
0a0a0     38 4E 85 F1 | 	sub	fp, #56
0a0a4                 | ' 
0a0a4                 | ' write(text)
0a0a4     F4 A6 B0 FD | 	call	#_hg010b_spin2_write
0a0a8                 | ' crlf
0a0a8     50 A8 B0 FD | 	call	#_hg010b_spin2_crlf
0a0ac                 | LR__0823
0a0ac     34 4E 05 F1 | 	add	fp, #52
0a0b0     A7 20 02 FB | 	rdlong	local02, fp
0a0b4     34 4E 85 F1 | 	sub	fp, #52
0a0b8     52 00 00 FF 
0a0bc     9C E4 05 F1 | 	add	objptr, ##42140
0a0c0     F2 20 62 FC | 	wrlong	local02, objptr
0a0c4     52 00 00 FF 
0a0c8     9C E4 85 F1 | 	sub	objptr, ##42140
0a0cc                 | LR__0824
0a0cc     34 4E 05 F1 | 	add	fp, #52
0a0d0     A7 20 02 FB | 	rdlong	local02, fp
0a0d4     34 4E 85 F1 | 	sub	fp, #52
0a0d8     FF FF 3F FF 
0a0dc     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0a0e0     20 4E 05 51 |  if_ne	add	fp, #32
0a0e4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0a0e8     20 4E 85 51 |  if_ne	sub	fp, #32
0a0ec     FF FF 7F 5F 
0a0f0     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0a0f4     E4 FE 9F 5D |  if_ne	jmp	#LR__0822
0a0f8     A7 F0 03 F6 | 	mov	ptra, fp
0a0fc     B2 00 A0 FD | 	call	#popregs_
0a100                 | _do_list_ret
0a100     2D 00 64 FD | 	ret
0a104                 | 
0a104                 | ' 
0a104                 | ' '---------------- Clear the program
0a104                 | ' 
0a104                 | ' sub do_new
0a104                 | _do_new
0a104     03 4A 05 F6 | 	mov	COUNT_, #3
0a108     A8 00 A0 FD | 	call	#pushregs_
0a10c     00 12 06 F6 | 	mov	arg01, #0
0a110     01 14 66 F6 | 	neg	arg02, #1
0a114     01 16 06 F6 | 	mov	arg03, #1
0a118     00 18 06 F6 | 	mov	arg04, #0
0a11c     0B 00 00 FF 
0a120     C0 E4 05 F1 | 	add	objptr, ##5824
0a124                 | '     return fill(addr, pattern, count, listPtr, 4)
0a124     04 1A 06 F6 | 	mov	arg05, #4
0a128     E0 AC B0 FD | 	call	#_psram_spin2_fill
0a12c     20 00 00 FF 
0a130     0C E5 05 F1 | 	add	objptr, ##16652
0a134     F2 00 68 FC | 	wrlong	#0, objptr
0a138     15 00 00 FF 
0a13c     7C E4 05 F1 | 	add	objptr, ##10876
0a140     F2 00 68 FC | 	wrlong	#0, objptr
0a144     0F 00 00 FF 
0a148     2C E5 05 F1 | 	add	objptr, ##7980
0a14c     F2 00 68 FC | 	wrlong	#0, objptr
0a150     04 E4 05 F1 | 	add	objptr, #4
0a154     F2 00 68 FC | 	wrlong	#0, objptr
0a158     16 00 00 FF 
0a15c     5C E5 85 F1 | 	sub	objptr, ##11612
0a160     F2 00 68 FC | 	wrlong	#0, objptr
0a164     07 00 00 FF 
0a168     24 E4 05 F1 | 	add	objptr, ##3620
0a16c     F2 00 68 FC | 	wrlong	#0, objptr
0a170     07 00 00 FF 
0a174     20 E4 85 F1 | 	sub	objptr, ##3616
0a178     F2 00 68 FC | 	wrlong	#0, objptr
0a17c     0F 00 00 FF 
0a180     34 E4 05 F1 | 	add	objptr, ##7732
0a184     F2 00 68 FC | 	wrlong	#0, objptr
0a188     08 00 00 FF 
0a18c     08 E4 85 F1 | 	sub	objptr, ##4104
0a190     F2 00 68 FC | 	wrlong	#0, objptr
0a194     04 E4 05 F1 | 	add	objptr, #4
0a198     FF FF FF FF 
0a19c     F2 FE 6B FC | 	wrlong	##-1, objptr
0a1a0     0F 00 00 FF 
0a1a4     4C E5 05 F1 | 	add	objptr, ##8012
0a1a8     F2 00 68 FC | 	wrlong	#0, objptr
0a1ac                 | ' 
0a1ac                 | ' pslpoke(0,$FFFFFFFF)
0a1ac                 | ' varnum=0
0a1ac                 | ' programstart=0 :runptr=0 : runptr2=0
0a1ac                 | ' stackpointer=0
0a1ac                 | ' lineptr=0 
0a1ac                 | ' programptr=0 : stringptr=0
0a1ac                 | ' lastline=0 : lastlineptr=-1 :fortop=0
0a1ac                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0a1ac     00 1E 06 F6 | 	mov	local01, #0
0a1b0     07 00 00 FF 
0a1b4     40 E5 85 F1 | 	sub	objptr, ##3904
0a1b8     97 16 48 FB | 	callpa	#(@LR__0831-@LR__0830)>>2,fcache_load_ptr_
0a1bc                 | LR__0830
0a1bc     0F 21 02 F6 | 	mov	local02, local01
0a1c0     02 20 66 F0 | 	shl	local02, #2
0a1c4     0F 21 02 F1 | 	add	local02, local01
0a1c8     02 20 66 F0 | 	shl	local02, #2
0a1cc     F2 20 02 F1 | 	add	local02, objptr
0a1d0     08 20 06 F1 | 	add	local02, #8
0a1d4     FF FF FF FF 
0a1d8     10 FF 6B FC | 	wrlong	##-1, local02
0a1dc     01 1E 06 F1 | 	add	local01, #1
0a1e0     81 1E 56 F2 | 	cmps	local01, #129 wc
0a1e4     D4 FF 9F CD |  if_b	jmp	#LR__0830
0a1e8                 | LR__0831
0a1e8     49 00 00 FF 
0a1ec     5C E4 85 F1 | 	sub	objptr, ##37468
0a1f0                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i))
0a1f0     00 1E 06 F6 | 	mov	local01, #0
0a1f4                 | LR__0832
0a1f4     0F 21 02 F6 | 	mov	local02, local01
0a1f8     02 20 66 F0 | 	shl	local02, #2
0a1fc     51 00 00 FF 
0a200     F8 E5 05 F1 | 	add	objptr, ##41976
0a204     F2 20 02 F1 | 	add	local02, objptr
0a208     10 21 0A FB | 	rdlong	local02, local02 wz
0a20c     51 00 00 FF 
0a210     F8 E5 85 F1 | 	sub	objptr, ##41976
0a214     34 00 90 AD |  if_e	jmp	#LR__0833
0a218     0F 13 02 F6 | 	mov	arg01, local01
0a21c     00 14 06 F6 | 	mov	arg02, #0
0a220     00 16 06 F6 | 	mov	arg03, #0
0a224     00 96 B0 FD | 	call	#_hg010b_spin2_setspritesize
0a228     0F 21 02 F6 | 	mov	local02, local01
0a22c     02 20 66 F0 | 	shl	local02, #2
0a230     51 00 00 FF 
0a234     F8 E5 05 F1 | 	add	objptr, ##41976
0a238     F2 20 02 F1 | 	add	local02, objptr
0a23c     10 13 02 FB | 	rdlong	arg01, local02
0a240     51 00 00 FF 
0a244     F8 E5 85 F1 | 	sub	objptr, ##41976
0a248     18 F1 B0 FD | 	call	#__system___gc_free
0a24c                 | LR__0833
0a24c     F2 22 02 FB | 	rdlong	local03, objptr
0a250     52 00 00 FF 
0a254     3C E4 05 F1 | 	add	objptr, ##42044
0a258     F2 22 62 FC | 	wrlong	local03, objptr
0a25c     52 00 00 FF 
0a260     3C E4 85 F1 | 	sub	objptr, ##42044
0a264     11 12 06 F6 | 	mov	arg01, #17
0a268     08 14 06 F6 | 	mov	arg02, #8
0a26c     10 16 06 F6 | 	mov	arg03, #16
0a270     B4 95 B0 FD | 	call	#_hg010b_spin2_setspritesize
0a274     01 1E 06 F1 | 	add	local01, #1
0a278     10 1E 56 F2 | 	cmps	local01, #16 wc
0a27c     74 FF 9F CD |  if_b	jmp	#LR__0832
0a280     A7 F0 03 F6 | 	mov	ptra, fp
0a284     B2 00 A0 FD | 	call	#popregs_
0a288                 | _do_new_ret
0a288     2D 00 64 FD | 	ret
0a28c                 | 
0a28c                 | ' 
0a28c                 | ' '----------------------- goto
0a28c                 | ' sub do_fast_goto
0a28c                 | _do_fast_goto
0a28c     02 4A 05 F6 | 	mov	COUNT_, #2
0a290     A8 00 A0 FD | 	call	#pushregs_
0a294                 | _do_fast_goto_enter
0a294     41 00 00 FF 
0a298     44 E4 05 F1 | 	add	objptr, ##33348
0a29c     F2 12 02 FB | 	rdlong	arg01, objptr
0a2a0     09 1F 02 F6 | 	mov	local01, arg01
0a2a4     01 1E 66 F0 | 	shl	local01, #1
0a2a8     09 1F 02 F1 | 	add	local01, arg01
0a2ac     02 1E 66 F0 | 	shl	local01, #2
0a2b0     03 00 00 FF 
0a2b4     04 E4 85 F1 | 	sub	objptr, ##1540
0a2b8     F2 1E 02 F1 | 	add	local01, objptr
0a2bc     0F 21 02 FB | 	rdlong	local02, local01
0a2c0     10 13 02 F6 | 	mov	arg01, local02
0a2c4     3E 00 00 FF 
0a2c8     40 E4 85 F1 | 	sub	objptr, ##31808
0a2cc     B0 81 B0 FD | 	call	#_pslpeek
0a2d0     FD 12 02 F6 | 	mov	arg01, result1
0a2d4                 | ' 
0a2d4                 | ' testptr=compiledline(lineptr_e).result.uresult
0a2d4                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0a2d4                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0a2d4     41 00 00 FF 
0a2d8     44 E4 05 F1 | 	add	objptr, ##33348
0a2dc     F2 FA 01 FB | 	rdlong	result1, objptr
0a2e0     FD 1E 02 F6 | 	mov	local01, result1
0a2e4     01 1E 66 F0 | 	shl	local01, #1
0a2e8     FD 1E 02 F1 | 	add	local01, result1
0a2ec     02 1E 66 F0 | 	shl	local01, #2
0a2f0     03 00 00 FF 
0a2f4     04 E4 85 F1 | 	sub	objptr, ##1540
0a2f8     F2 1E 02 F1 | 	add	local01, objptr
0a2fc     04 1E 06 F1 | 	add	local01, #4
0a300     0F 1F 02 FB | 	rdlong	local01, local01
0a304     0F 13 0A F2 | 	cmp	arg01, local01 wz
0a308     3E 00 00 FF 
0a30c     40 E4 85 F1 | 	sub	objptr, ##31808
0a310     58 00 90 5D |  if_ne	jmp	#LR__0840
0a314     50 00 00 FF 
0a318     74 E5 05 F1 | 	add	objptr, ##41332
0a31c     F2 20 62 FC | 	wrlong	local02, objptr
0a320     0F 00 00 FF 
0a324     34 E5 85 F1 | 	sub	objptr, ##7988
0a328     F2 20 02 FB | 	rdlong	local02, objptr
0a32c     01 20 86 F1 | 	sub	local02, #1
0a330     04 E4 05 F1 | 	add	objptr, #4
0a334     F2 20 62 FC | 	wrlong	local02, objptr
0a338                 | '   runptr=testptr
0a338                 | '   lineptr_e=lineptr-1
0a338                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0a338     0F 00 00 FF 
0a33c     54 E5 05 F1 | 	add	objptr, ##8020
0a340     F2 20 02 FB | 	rdlong	local02, objptr
0a344     50 00 00 FF 
0a348     98 E5 85 F1 | 	sub	objptr, ##41368
0a34c     FF FF 3F FF 
0a350     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0a354     50 00 00 AF 
0a358     98 E5 05 A1 |  if_e	add	objptr, ##41368
0a35c     F2 00 68 AC |  if_e	wrlong	#0, objptr
0a360     50 00 00 AF 
0a364     98 E5 85 A1 |  if_e	sub	objptr, ##41368
0a368     04 00 90 FD | 	jmp	#LR__0841
0a36c                 | LR__0840
0a36c     0C 00 B0 FD | 	call	#_do_find_goto
0a370                 | LR__0841
0a370     A7 F0 03 F6 | 	mov	ptra, fp
0a374     B2 00 A0 FD | 	call	#popregs_
0a378                 | _do_fast_goto_ret
0a378     2D 00 64 FD | 	ret
0a37c                 | 
0a37c                 | ' 
0a37c                 | ' 
0a37c                 | ' 
0a37c                 | ' 
0a37c                 | ' sub do_find_goto
0a37c                 | _do_find_goto
0a37c     03 4A 05 F6 | 	mov	COUNT_, #3
0a380     A8 00 A0 FD | 	call	#pushregs_
0a384     24 F0 07 F1 | 	add	ptra, #36
0a388                 | _do_find_goto_enter
0a388     41 00 00 FF 
0a38c     44 E4 05 F1 | 	add	objptr, ##33348
0a390     F2 1E 02 FB | 	rdlong	local01, objptr
0a394     0F 21 02 F6 | 	mov	local02, local01
0a398     01 20 66 F0 | 	shl	local02, #1
0a39c     0F 21 02 F1 | 	add	local02, local01
0a3a0     02 20 66 F0 | 	shl	local02, #2
0a3a4     03 00 00 FF 
0a3a8     04 E4 85 F1 | 	sub	objptr, ##1540
0a3ac     F2 20 02 F1 | 	add	local02, objptr
0a3b0     04 20 06 F1 | 	add	local02, #4
0a3b4     10 21 02 FB | 	rdlong	local02, local02
0a3b8     A7 20 62 FC | 	wrlong	local02, fp
0a3bc     03 00 00 FF 
0a3c0     08 E4 05 F1 | 	add	objptr, ##1544
0a3c4     F2 22 02 FB | 	rdlong	local03, objptr
0a3c8     41 00 00 FF 
0a3cc     48 E4 85 F1 | 	sub	objptr, ##33352
0a3d0     04 4E 05 F1 | 	add	fp, #4
0a3d4     A7 22 62 FC | 	wrlong	local03, fp
0a3d8     04 4E 85 F1 | 	sub	fp, #4
0a3dc                 | ' 
0a3dc                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
0a3dc                 | '  ' print "find goto"                                                                     'print gotoline 
0a3dc                 | ' gotoptr=programstart
0a3dc                 | ' do
0a3dc                 | LR__0850
0a3dc     0C 4E 05 F1 | 	add	fp, #12
0a3e0     A7 12 02 F6 | 	mov	arg01, fp
0a3e4     08 4E 85 F1 | 	sub	fp, #8
0a3e8     A7 14 02 FB | 	rdlong	arg02, fp
0a3ec     04 4E 85 F1 | 	sub	fp, #4
0a3f0     18 16 06 F6 | 	mov	arg03, #24
0a3f4     0B 00 00 FF 
0a3f8     C0 E4 05 F1 | 	add	objptr, ##5824
0a3fc     D4 A8 B0 FD | 	call	#_psram_spin2_read1
0a400     0B 00 00 FF 
0a404     C0 E4 85 F1 | 	sub	objptr, ##5824
0a408                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0a408                 | '   if gotoheader(0)<>$FFFFFFFF then
0a408     0C 4E 05 F1 | 	add	fp, #12
0a40c     A7 22 02 FB | 	rdlong	local03, fp
0a410     0C 4E 85 F1 | 	sub	fp, #12
0a414     FF FF 7F FF 
0a418     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0a41c     24 00 90 AD |  if_e	jmp	#LR__0851
0a420     04 4E 05 F1 | 	add	fp, #4
0a424     A7 22 02 FB | 	rdlong	local03, fp
0a428     04 4E 05 F1 | 	add	fp, #4
0a42c     A7 22 62 FC | 	wrlong	local03, fp
0a430     18 4E 05 F1 | 	add	fp, #24
0a434     A7 22 02 FB | 	rdlong	local03, fp
0a438     1C 4E 85 F1 | 	sub	fp, #28
0a43c     A7 22 62 FC | 	wrlong	local03, fp
0a440     04 4E 85 F1 | 	sub	fp, #4
0a444                 | LR__0851
0a444     20 4E 05 F1 | 	add	fp, #32
0a448     A7 22 02 FB | 	rdlong	local03, fp
0a44c     20 4E 85 F1 | 	sub	fp, #32
0a450     FF FF 3F FF 
0a454     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0a458     0C 4E 05 51 |  if_ne	add	fp, #12
0a45c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0a460     0C 4E 85 51 |  if_ne	sub	fp, #12
0a464     FF FF 7F 5F 
0a468     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0a46c     18 00 90 AD |  if_e	jmp	#LR__0852
0a470     0C 4E 05 F1 | 	add	fp, #12
0a474     A7 22 02 FB | 	rdlong	local03, fp
0a478     0C 4E 85 F1 | 	sub	fp, #12
0a47c     A7 20 02 FB | 	rdlong	local02, fp
0a480     10 23 0A F2 | 	cmp	local03, local02 wz
0a484     54 FF 9F 5D |  if_ne	jmp	#LR__0850
0a488                 | LR__0852
0a488                 | ' 
0a488                 | ' if gotoheader(0)=gotoline then
0a488     0C 4E 05 F1 | 	add	fp, #12
0a48c     A7 22 02 FB | 	rdlong	local03, fp
0a490     0C 4E 85 F1 | 	sub	fp, #12
0a494     A7 1E 02 FB | 	rdlong	local01, fp
0a498     0F 23 0A F2 | 	cmp	local03, local01 wz
0a49c     D8 00 90 5D |  if_ne	jmp	#LR__0853
0a4a0     41 00 00 FF 
0a4a4     44 E4 05 F1 | 	add	objptr, ##33348
0a4a8     F2 1E 02 FB | 	rdlong	local01, objptr
0a4ac     0F 21 02 F6 | 	mov	local02, local01
0a4b0     01 20 66 F0 | 	shl	local02, #1
0a4b4     0F 21 02 F1 | 	add	local02, local01
0a4b8     02 20 66 F0 | 	shl	local02, #2
0a4bc     03 00 00 FF 
0a4c0     04 E4 85 F1 | 	sub	objptr, ##1540
0a4c4     F2 20 02 F1 | 	add	local02, objptr
0a4c8     08 4E 05 F1 | 	add	fp, #8
0a4cc     A7 22 02 FB | 	rdlong	local03, fp
0a4d0     10 23 62 FC | 	wrlong	local03, local02
0a4d4     03 00 00 FF 
0a4d8     04 E4 05 F1 | 	add	objptr, ##1540
0a4dc     F2 1E 02 FB | 	rdlong	local01, objptr
0a4e0     0F 21 02 F6 | 	mov	local02, local01
0a4e4     01 20 66 F0 | 	shl	local02, #1
0a4e8     0F 21 02 F1 | 	add	local02, local01
0a4ec     02 20 66 F0 | 	shl	local02, #2
0a4f0     03 00 00 FF 
0a4f4     04 E4 85 F1 | 	sub	objptr, ##1540
0a4f8     F2 20 02 F1 | 	add	local02, objptr
0a4fc     08 20 06 F1 | 	add	local02, #8
0a500     10 9D 68 FC | 	wrlong	#78, local02
0a504     03 00 00 FF 
0a508     04 E4 05 F1 | 	add	objptr, ##1540
0a50c     F2 20 02 FB | 	rdlong	local02, objptr
0a510     10 13 02 F6 | 	mov	arg01, local02
0a514     01 12 66 F0 | 	shl	arg01, #1
0a518     10 13 02 F1 | 	add	arg01, local02
0a51c     02 12 66 F0 | 	shl	arg01, #2
0a520     03 00 00 FF 
0a524     04 E4 85 F1 | 	sub	objptr, ##1540
0a528     F2 12 02 F1 | 	add	arg01, objptr
0a52c     12 00 00 FF 
0a530     3C E5 05 F1 | 	add	objptr, ##9532
0a534     F2 14 02 FB | 	rdlong	arg02, objptr
0a538     02 22 06 F6 | 	mov	local03, #2
0a53c     10 23 02 F1 | 	add	local03, local02
0a540     14 00 00 FF 
0a544     54 E5 85 F1 | 	sub	objptr, ##10580
0a548     F2 16 02 FB | 	rdlong	arg03, objptr
0a54c     0B 23 02 FD | 	qmul	local03, arg03
0a550     08 4E 85 F1 | 	sub	fp, #8
0a554     30 00 00 FF 
0a558     68 E5 85 F1 | 	sub	objptr, ##24936
0a55c     18 22 62 FD | 	getqx	local03
0a560     11 15 02 F1 | 	add	arg02, local03
0a564     08 A8 B0 FD | 	call	#_psram_spin2_write
0a568     0B 00 00 FF 
0a56c     C0 E4 85 F1 | 	sub	objptr, ##5824
0a570     18 FD BF FD | 	call	#_do_fast_goto
0a574     08 00 90 FD | 	jmp	#LR__0854
0a578                 | LR__0853
0a578     26 12 06 F6 | 	mov	arg01, #38
0a57c     44 7D B0 FD | 	call	#_printerror
0a580                 | LR__0854
0a580     A7 F0 03 F6 | 	mov	ptra, fp
0a584     B2 00 A0 FD | 	call	#popregs_
0a588                 | _do_find_goto_ret
0a588     2D 00 64 FD | 	ret
0a58c                 | 
0a58c                 | ' 
0a58c                 | ' sub do_slow_goto
0a58c                 | _do_slow_goto
0a58c                 | _do_slow_goto_ret
0a58c     2D 00 64 FD | 	ret
0a590                 | 
0a590                 | ' 
0a590                 | ' '----------------------- Error processing
0a590                 | ' 
0a590                 | ' sub do_error
0a590                 | _do_error
0a590     01 4A 05 F6 | 	mov	COUNT_, #1
0a594     A8 00 A0 FD | 	call	#pushregs_
0a598     41 00 00 FF 
0a59c     44 E4 05 F1 | 	add	objptr, ##33348
0a5a0     F2 18 02 FB | 	rdlong	arg04, objptr
0a5a4     0C 17 02 F6 | 	mov	arg03, arg04
0a5a8     01 16 66 F0 | 	shl	arg03, #1
0a5ac     0C 17 02 F1 | 	add	arg03, arg04
0a5b0     02 16 66 F0 | 	shl	arg03, #2
0a5b4     03 00 00 FF 
0a5b8     04 E4 85 F1 | 	sub	objptr, ##1540
0a5bc     F2 16 02 F1 | 	add	arg03, objptr
0a5c0     0B 1F 02 FB | 	rdlong	local01, arg03
0a5c4                 | ' r=compiledline(lineptr_e).result.uresult
0a5c4                 | ' print "Error ";r;": ";errors$(r)
0a5c4     00 12 06 F6 | 	mov	arg01, #0
0a5c8     3E 00 00 FF 
0a5cc     40 E4 85 F1 | 	sub	objptr, ##31808
0a5d0     9C 07 B1 FD | 	call	#__system___getiolock_0369
0a5d4     FD 12 02 F6 | 	mov	arg01, result1
0a5d8     E4 B1 B0 FD | 	call	#__system___lockmem
0a5dc     26 01 00 FF 
0a5e0     BE 15 06 F6 | 	mov	arg02, ##@LR__4332
0a5e4     00 12 06 F6 | 	mov	arg01, #0
0a5e8     00 16 06 F6 | 	mov	arg03, #0
0a5ec     C4 BE B0 FD | 	call	#__system___basic_print_string
0a5f0     00 12 06 F6 | 	mov	arg01, #0
0a5f4     0F 15 02 F6 | 	mov	arg02, local01
0a5f8     00 16 06 F6 | 	mov	arg03, #0
0a5fc     0A 18 06 F6 | 	mov	arg04, #10
0a600     34 BF B0 FD | 	call	#__system___basic_print_unsigned
0a604     26 01 00 FF 
0a608     C5 15 06 F6 | 	mov	arg02, ##@LR__4333
0a60c     00 12 06 F6 | 	mov	arg01, #0
0a610     00 16 06 F6 | 	mov	arg03, #0
0a614     9C BE B0 FD | 	call	#__system___basic_print_string
0a618     02 1E 66 F0 | 	shl	local01, #2
0a61c     3C 00 00 FF 
0a620     40 E4 05 F1 | 	add	objptr, ##30784
0a624     F2 1E 02 F1 | 	add	local01, objptr
0a628     0F 15 02 FB | 	rdlong	arg02, local01
0a62c     00 12 06 F6 | 	mov	arg01, #0
0a630     00 16 06 F6 | 	mov	arg03, #0
0a634     3C 00 00 FF 
0a638     40 E4 85 F1 | 	sub	objptr, ##30784
0a63c     74 BE B0 FD | 	call	#__system___basic_print_string
0a640     00 12 06 F6 | 	mov	arg01, #0
0a644     0A 14 06 F6 | 	mov	arg02, #10
0a648     00 16 06 F6 | 	mov	arg03, #0
0a64c     0C BE B0 FD | 	call	#__system___basic_print_char
0a650     00 12 06 F6 | 	mov	arg01, #0
0a654     18 07 B1 FD | 	call	#__system___getiolock_0369
0a658     FD 00 68 FC | 	wrlong	#0, result1
0a65c     A7 F0 03 F6 | 	mov	ptra, fp
0a660     B2 00 A0 FD | 	call	#popregs_
0a664                 | _do_error_ret
0a664     2D 00 64 FD | 	ret
0a668                 | 
0a668                 | ' 
0a668                 | ' 
0a668                 | ' '------------------ Assigning to a variable  
0a668                 | ' 
0a668                 | ' function  do_convertstring(psaddr as ulong) as string
0a668                 | _do_convertstring
0a668     04 4A 05 F6 | 	mov	COUNT_, #4
0a66c     A8 00 A0 FD | 	call	#pushregs_
0a670     09 1F 02 F6 | 	mov	local01, arg01
0a674     08 7E B0 FD | 	call	#_pslpeek
0a678     FD 20 02 F6 | 	mov	local02, result1
0a67c     26 01 00 FF 
0a680     C8 23 06 F6 | 	mov	local03, ##@LR__4334
0a684                 | ' 'print "in do_convertstring: psaddr=";psaddr
0a684                 | ' l=pslpeek(psaddr)
0a684                 | ' 'print "in do_convertstring: len=";l
0a684                 | ' s="" 
0a684                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0a684     01 24 06 F6 | 	mov	local04, #1
0a688     01 20 06 F1 | 	add	local02, #1
0a68c                 | LR__0860
0a68c     10 25 52 F2 | 	cmps	local04, local02 wc
0a690     30 00 90 3D |  if_ae	jmp	#LR__0861
0a694     0F 13 02 F6 | 	mov	arg01, local01
0a698     03 12 06 F1 | 	add	arg01, #3
0a69c     12 13 02 F1 | 	add	arg01, local04
0a6a0     84 7D B0 FD | 	call	#_pspeek
0a6a4     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0a6a8     E8 D2 B0 FD | 	call	#__system__Chr_S
0a6ac     FD 14 02 F6 | 	mov	arg02, result1
0a6b0     11 13 02 F6 | 	mov	arg01, local03
0a6b4     64 B1 B0 FD | 	call	#__system___string_concat
0a6b8     FD 22 02 F6 | 	mov	local03, result1
0a6bc     01 24 06 F1 | 	add	local04, #1
0a6c0     C8 FF 9F FD | 	jmp	#LR__0860
0a6c4                 | LR__0861
0a6c4                 | ' 'print "in do_convertstring: str=";s
0a6c4                 | ' return s
0a6c4     11 FB 01 F6 | 	mov	result1, local03
0a6c8     A7 F0 03 F6 | 	mov	ptra, fp
0a6cc     B2 00 A0 FD | 	call	#popregs_
0a6d0                 | _do_convertstring_ret
0a6d0     2D 00 64 FD | 	ret
0a6d4                 | 
0a6d4                 | ' 
0a6d4                 | ' sub do_assign
0a6d4                 | _do_assign
0a6d4     05 4A 05 F6 | 	mov	COUNT_, #5
0a6d8     A8 00 A0 FD | 	call	#pushregs_
0a6dc     44 F0 07 F1 | 	add	ptra, #68
0a6e0     41 00 00 FF 
0a6e4     44 E4 05 F1 | 	add	objptr, ##33348
0a6e8     F2 16 02 FB | 	rdlong	arg03, objptr
0a6ec     0B 15 02 F6 | 	mov	arg02, arg03
0a6f0     01 14 66 F0 | 	shl	arg02, #1
0a6f4     0B 15 02 F1 | 	add	arg02, arg03
0a6f8     02 14 66 F0 | 	shl	arg02, #2
0a6fc     03 00 00 FF 
0a700     04 E4 85 F1 | 	sub	objptr, ##1540
0a704     F2 14 02 F1 | 	add	arg02, objptr
0a708     0A 15 02 FB | 	rdlong	arg02, arg02
0a70c     18 4E 05 F1 | 	add	fp, #24
0a710     A7 14 62 FC | 	wrlong	arg02, fp
0a714                 | ' 
0a714                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
0a714                 | ' 
0a714                 | ' if variables(varnum).vartype<array_no_type then 
0a714     18 4E 85 F1 | 	sub	fp, #24
0a718     04 14 66 F0 | 	shl	arg02, #4
0a71c     32 00 00 FF 
0a720     74 E4 85 F1 | 	sub	objptr, ##25716
0a724     F2 14 02 F1 | 	add	arg02, objptr
0a728     0C 14 06 F1 | 	add	arg02, #12
0a72c     0A 17 02 FB | 	rdlong	arg03, arg02
0a730     00 17 16 F2 | 	cmp	arg03, #256 wc
0a734     0B 00 00 FF 
0a738     CC E5 85 F1 | 	sub	objptr, ##6092
0a73c     18 01 90 3D |  if_ae	jmp	#LR__0870
0a740     30 E2 BF FD | 	call	#_pop
0a744     A7 FA 61 FC | 	wrlong	result1, fp
0a748     04 4E 05 F1 | 	add	fp, #4
0a74c     A7 FC 61 FC | 	wrlong	result2, fp
0a750     04 4E 05 F1 | 	add	fp, #4
0a754     A7 FE 61 FC | 	wrlong	result3, fp
0a758     08 4E 85 F1 | 	sub	fp, #8
0a75c     A7 16 02 FB | 	rdlong	arg03, fp
0a760     04 4E 05 F1 | 	add	fp, #4
0a764     A7 14 02 FB | 	rdlong	arg02, fp
0a768     14 4E 05 F1 | 	add	fp, #20
0a76c     A7 12 02 FB | 	rdlong	arg01, fp
0a770     04 12 66 F0 | 	shl	arg01, #4
0a774     0B 00 00 FF 
0a778     CC E5 05 F1 | 	add	objptr, ##6092
0a77c     F2 12 02 F1 | 	add	arg01, objptr
0a780     04 12 06 F1 | 	add	arg01, #4
0a784     09 17 62 FC | 	wrlong	arg03, arg01
0a788     A7 16 02 FB | 	rdlong	arg03, fp
0a78c     04 16 66 F0 | 	shl	arg03, #4
0a790     F2 16 02 F1 | 	add	arg03, objptr
0a794     08 16 06 F1 | 	add	arg03, #8
0a798     0B 15 62 FC | 	wrlong	arg02, arg03
0a79c     A7 16 02 FB | 	rdlong	arg03, fp
0a7a0     04 16 66 F0 | 	shl	arg03, #4
0a7a4     F2 16 02 F1 | 	add	arg03, objptr
0a7a8     10 4E 85 F1 | 	sub	fp, #16
0a7ac     A7 14 02 FB | 	rdlong	arg02, fp
0a7b0     0C 16 06 F1 | 	add	arg03, #12
0a7b4     0B 15 62 FC | 	wrlong	arg02, arg03
0a7b8                 | '   t1=pop() : variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
0a7b8                 | '   if variables(varnum).vartype<>result_string2 then return
0a7b8     10 4E 05 F1 | 	add	fp, #16
0a7bc     A7 16 02 FB | 	rdlong	arg03, fp
0a7c0     18 4E 85 F1 | 	sub	fp, #24
0a7c4     04 16 66 F0 | 	shl	arg03, #4
0a7c8     F2 16 02 F1 | 	add	arg03, objptr
0a7cc     0C 16 06 F1 | 	add	arg03, #12
0a7d0     0B 17 02 FB | 	rdlong	arg03, arg03
0a7d4     2B 16 0E F2 | 	cmp	arg03, #43 wz
0a7d8     0B 00 00 FF 
0a7dc     CC E5 85 F1 | 	sub	objptr, ##6092
0a7e0     9C 05 90 5D |  if_ne	jmp	#LR__0891
0a7e4     18 4E 05 F1 | 	add	fp, #24
0a7e8     A7 16 02 FB | 	rdlong	arg03, fp
0a7ec     0B 1F 02 F6 | 	mov	local01, arg03
0a7f0     04 1E 66 F0 | 	shl	local01, #4
0a7f4     0B 00 00 FF 
0a7f8     CC E5 05 F1 | 	add	objptr, ##6092
0a7fc     F2 1E 02 F1 | 	add	local01, objptr
0a800     18 4E 85 F1 | 	sub	fp, #24
0a804     04 16 66 F0 | 	shl	arg03, #4
0a808     F2 16 02 F1 | 	add	arg03, objptr
0a80c     04 16 06 F1 | 	add	arg03, #4
0a810     0B 13 02 FB | 	rdlong	arg01, arg03
0a814     0B 00 00 FF 
0a818     CC E5 85 F1 | 	sub	objptr, ##6092
0a81c     48 FE BF FD | 	call	#_do_convertstring
0a820     04 1E 06 F1 | 	add	local01, #4
0a824     0F FB 61 FC | 	wrlong	result1, local01
0a828     18 4E 05 F1 | 	add	fp, #24
0a82c     A7 1E 02 FB | 	rdlong	local01, fp
0a830     18 4E 85 F1 | 	sub	fp, #24
0a834     04 1E 66 F0 | 	shl	local01, #4
0a838     0B 00 00 FF 
0a83c     CC E5 05 F1 | 	add	objptr, ##6092
0a840     F2 1E 02 F1 | 	add	local01, objptr
0a844     0C 1E 06 F1 | 	add	local01, #12
0a848     0F 3F 68 FC | 	wrlong	#31, local01
0a84c                 | '   variables(varnum).value.sresult=do_convertstring(variables(varnum).value.uresult)
0a84c                 | '   variables(varnum).vartype=result_string
0a84c                 | '   return
0a84c     0B 00 00 FF 
0a850     CC E5 85 F1 | 	sub	objptr, ##6092
0a854     28 05 90 FD | 	jmp	#LR__0891
0a858                 | LR__0870
0a858                 | ' for i=0 to 2 : arrid(i)=0 : next i
0a858     1C 4E 05 F1 | 	add	fp, #28
0a85c     A7 00 68 FC | 	wrlong	#0, fp
0a860     97 16 48 FB | 	callpa	#(@LR__0872-@LR__0871)>>2,fcache_load_ptr_
0a864                 | LR__0871
0a864     A7 1E 02 FB | 	rdlong	local01, fp
0a868     02 1E 66 F0 | 	shl	local01, #2
0a86c     18 4E 05 F1 | 	add	fp, #24
0a870     A7 1E 02 F1 | 	add	local01, fp
0a874     0F 01 68 FC | 	wrlong	#0, local01
0a878     18 4E 85 F1 | 	sub	fp, #24
0a87c     A7 1E 02 FB | 	rdlong	local01, fp
0a880     01 1E 06 F1 | 	add	local01, #1
0a884     A7 1E 62 FC | 	wrlong	local01, fp
0a888     03 1E 16 F2 | 	cmp	local01, #3 wc
0a88c     D4 FF 9F CD |  if_b	jmp	#LR__0871
0a890                 | LR__0872
0a890     41 00 00 FF 
0a894     44 E4 05 F1 | 	add	objptr, ##33348
0a898     F2 16 02 FB | 	rdlong	arg03, objptr
0a89c     0B 1F 02 F6 | 	mov	local01, arg03
0a8a0     01 1E 66 F0 | 	shl	local01, #1
0a8a4     0B 1F 02 F1 | 	add	local01, arg03
0a8a8     02 1E 66 F0 | 	shl	local01, #2
0a8ac     03 00 00 FF 
0a8b0     04 E4 85 F1 | 	sub	objptr, ##1540
0a8b4     F2 1E 02 F1 | 	add	local01, objptr
0a8b8     04 1E 06 F1 | 	add	local01, #4
0a8bc     0F 21 02 FB | 	rdlong	local02, local01
0a8c0     04 4E 05 F1 | 	add	fp, #4
0a8c4     A7 20 62 FC | 	wrlong	local02, fp
0a8c8     20 4E 85 F1 | 	sub	fp, #32
0a8cc     3E 00 00 FF 
0a8d0     40 E4 85 F1 | 	sub	objptr, ##31808
0a8d4     9C E0 BF FD | 	call	#_pop
0a8d8     A7 FA 61 FC | 	wrlong	result1, fp
0a8dc     04 4E 05 F1 | 	add	fp, #4
0a8e0     A7 FC 61 FC | 	wrlong	result2, fp
0a8e4     04 4E 05 F1 | 	add	fp, #4
0a8e8     A7 FE 61 FC | 	wrlong	result3, fp
0a8ec                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
0a8ec                 | ' t1=pop() ' var value
0a8ec                 | ' if numpar>0 then
0a8ec     18 4E 05 F1 | 	add	fp, #24
0a8f0     A7 22 02 FB | 	rdlong	local03, fp
0a8f4     20 4E 85 F1 | 	sub	fp, #32
0a8f8     01 22 16 F2 | 	cmp	local03, #1 wc
0a8fc     70 00 90 CD |  if_b	jmp	#LR__0875
0a900                 | '   for i=numpar to 1 step -1
0a900     20 4E 05 F1 | 	add	fp, #32
0a904     A7 24 0A FB | 	rdlong	local04, fp wz
0a908     04 4E 85 F1 | 	sub	fp, #4
0a90c     A7 24 62 FC | 	wrlong	local04, fp
0a910     1C 4E 85 F1 | 	sub	fp, #28
0a914     58 00 90 AD |  if_e	jmp	#LR__0874
0a918                 | LR__0873
0a918     58 E0 BF FD | 	call	#_pop
0a91c     0C 4E 05 F1 | 	add	fp, #12
0a920     A7 FA 61 FC | 	wrlong	result1, fp
0a924     04 4E 05 F1 | 	add	fp, #4
0a928     A7 FC 61 FC | 	wrlong	result2, fp
0a92c     04 4E 05 F1 | 	add	fp, #4
0a930     A7 FE 61 FC | 	wrlong	result3, fp
0a934     08 4E 05 F1 | 	add	fp, #8
0a938     A7 22 02 FB | 	rdlong	local03, fp
0a93c     01 22 86 F1 | 	sub	local03, #1
0a940     02 22 66 F0 | 	shl	local03, #2
0a944     18 4E 05 F1 | 	add	fp, #24
0a948     A7 22 02 F1 | 	add	local03, fp
0a94c     28 4E 85 F1 | 	sub	fp, #40
0a950     A7 24 02 FB | 	rdlong	local04, fp
0a954     11 25 62 FC | 	wrlong	local04, local03
0a958     10 4E 05 F1 | 	add	fp, #16
0a95c     A7 24 02 FB | 	rdlong	local04, fp
0a960     01 24 8E F1 | 	sub	local04, #1 wz
0a964     A7 24 62 FC | 	wrlong	local04, fp
0a968     1C 4E 85 F1 | 	sub	fp, #28
0a96c     A8 FF 9F 5D |  if_ne	jmp	#LR__0873
0a970                 | LR__0874
0a970                 | LR__0875
0a970     18 4E 05 F1 | 	add	fp, #24
0a974     A7 1E 02 FB | 	rdlong	local01, fp
0a978     04 1E 66 F0 | 	shl	local01, #4
0a97c     0B 00 00 FF 
0a980     CC E5 05 F1 | 	add	objptr, ##6092
0a984     F2 1E 02 F1 | 	add	local01, objptr
0a988     04 1E 06 F1 | 	add	local01, #4
0a98c     0F 13 02 FB | 	rdlong	arg01, local01
0a990     0C 4E 05 F1 | 	add	fp, #12
0a994     A7 12 62 FC | 	wrlong	arg01, fp
0a998     24 4E 85 F1 | 	sub	fp, #36
0a99c     0B 00 00 FF 
0a9a0     CC E5 85 F1 | 	sub	objptr, ##6092
0a9a4     D8 7A B0 FD | 	call	#_pslpeek
0a9a8     FD 24 32 F9 | 	getword	local04, result1, #0
0a9ac     28 4E 05 F1 | 	add	fp, #40
0a9b0     A7 24 62 FC | 	wrlong	local04, fp
0a9b4     04 4E 85 F1 | 	sub	fp, #4
0a9b8     A7 12 02 FB | 	rdlong	arg01, fp
0a9bc     24 4E 85 F1 | 	sub	fp, #36
0a9c0     02 12 06 F1 | 	add	arg01, #2
0a9c4     60 7A B0 FD | 	call	#_pspeek
0a9c8     FD FA E1 F8 | 	getbyte	result1, result1, #0
0a9cc     2C 4E 05 F1 | 	add	fp, #44
0a9d0     A7 FA 61 FC | 	wrlong	result1, fp
0a9d4     08 4E 85 F1 | 	sub	fp, #8
0a9d8     A7 12 02 FB | 	rdlong	arg01, fp
0a9dc     09 25 02 F6 | 	mov	local04, arg01
0a9e0     10 24 06 F1 | 	add	local04, #16
0a9e4     24 4E 85 F1 | 	sub	fp, #36
0a9e8     04 12 06 F1 | 	add	arg01, #4
0a9ec     90 7A B0 FD | 	call	#_pslpeek
0a9f0     FD 1E 02 F6 | 	mov	local01, result1
0a9f4     38 4E 05 F1 | 	add	fp, #56
0a9f8     A7 20 02 FB | 	rdlong	local02, fp
0a9fc     10 1F 02 FD | 	qmul	local01, local02
0aa00     04 4E 85 F1 | 	sub	fp, #4
0aa04     A7 22 02 FB | 	rdlong	local03, fp
0aa08     10 4E 85 F1 | 	sub	fp, #16
0aa0c     A7 12 02 FB | 	rdlong	arg01, fp
0aa10     24 4E 85 F1 | 	sub	fp, #36
0aa14     08 12 06 F1 | 	add	arg01, #8
0aa18     18 20 62 FD | 	getqx	local02
0aa1c     10 23 02 F1 | 	add	local03, local02
0aa20     5C 7A B0 FD | 	call	#_pslpeek
0aa24     FD 20 02 F6 | 	mov	local02, result1
0aa28     24 4E 05 F1 | 	add	fp, #36
0aa2c     A7 12 02 FB | 	rdlong	arg01, fp
0aa30     24 4E 85 F1 | 	sub	fp, #36
0aa34     04 12 06 F1 | 	add	arg01, #4
0aa38     44 7A B0 FD | 	call	#_pslpeek
0aa3c     FD 20 02 FD | 	qmul	local02, result1
0aa40     3C 4E 05 F1 | 	add	fp, #60
0aa44     A7 20 02 FB | 	rdlong	local02, fp
0aa48     18 1E 62 FD | 	getqx	local01
0aa4c     10 1F 02 FD | 	qmul	local01, local02
0aa50     10 4E 85 F1 | 	sub	fp, #16
0aa54     A7 20 02 FB | 	rdlong	local02, fp
0aa58     18 1E 62 FD | 	getqx	local01
0aa5c     0F 23 02 F1 | 	add	local03, local01
0aa60     11 21 02 FD | 	qmul	local02, local03
0aa64     04 4E 05 F1 | 	add	fp, #4
0aa68                 | ' esize=pspeek(arrptr+2)
0aa68                 | ' 'print " in do_assign, pslpeek(arrptr+4)="; pslpeek(arrptr+4)
0aa68                 | ' 'print " in do_assign, pslpeek(arrptr+8)="; pslpeek(arrptr+8)
0aa68                 | ' 'print " in do_assign, pslpeek(arrptr+12)="; pslpeek(arrptr+12)
0aa68                 | ' 
0aa68                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
0aa68                 | ' select case arrtype
0aa68     18 22 62 FD | 	getqx	local03
0aa6c     11 25 02 F1 | 	add	local04, local03
0aa70     A7 24 62 FC | 	wrlong	local04, fp
0aa74     08 4E 85 F1 | 	sub	fp, #8
0aa78     A7 26 02 FB | 	rdlong	local05, fp
0aa7c     28 4E 85 F1 | 	sub	fp, #40
0aa80     00 27 86 F1 | 	sub	local05, #256
0aa84     0C 26 26 F3 | 	fle	local05, #12
0aa88     30 26 62 FD | 	jmprel	local05
0aa8c                 | LR__0876
0aa8c     30 00 90 FD | 	jmp	#LR__0877
0aa90     58 00 90 FD | 	jmp	#LR__0878
0aa94     88 00 90 FD | 	jmp	#LR__0879
0aa98     B8 00 90 FD | 	jmp	#LR__0880
0aa9c     10 01 90 FD | 	jmp	#LR__0881
0aaa0     68 01 90 FD | 	jmp	#LR__0882
0aaa4     98 01 90 FD | 	jmp	#LR__0883
0aaa8     C8 01 90 FD | 	jmp	#LR__0884
0aaac     F8 01 90 FD | 	jmp	#LR__0885
0aab0     28 02 90 FD | 	jmp	#LR__0886
0aab4     58 02 90 FD | 	jmp	#LR__0887
0aab8     88 02 90 FD | 	jmp	#LR__0888
0aabc     B8 02 90 FD | 	jmp	#LR__0889
0aac0                 | LR__0877
0aac0     A7 12 02 F6 | 	mov	arg01, fp
0aac4     30 4E 05 F1 | 	add	fp, #48
0aac8     A7 14 02 FB | 	rdlong	arg02, fp
0aacc     30 4E 85 F1 | 	sub	fp, #48
0aad0     0C 16 06 F6 | 	mov	arg03, #12
0aad4     0B 00 00 FF 
0aad8     C0 E4 05 F1 | 	add	objptr, ##5824
0aadc     90 A2 B0 FD | 	call	#_psram_spin2_write
0aae0     0B 00 00 FF 
0aae4     C0 E4 85 F1 | 	sub	objptr, ##5824
0aae8     94 02 90 FD | 	jmp	#LR__0890
0aaec                 | LR__0878
0aaec     30 4E 05 F1 | 	add	fp, #48
0aaf0     A7 12 02 FB | 	rdlong	arg01, fp
0aaf4     30 4E 85 F1 | 	sub	fp, #48
0aaf8     A7 14 02 FB | 	rdlong	arg02, fp
0aafc     01 16 06 F6 | 	mov	arg03, #1
0ab00     00 18 06 F6 | 	mov	arg04, #0
0ab04     0B 00 00 FF 
0ab08     C0 E4 05 F1 | 	add	objptr, ##5824
0ab0c                 | '     return fill(addr, pattern, count, listPtr, 1)
0ab0c     01 1A 06 F6 | 	mov	arg05, #1
0ab10     F8 A2 B0 FD | 	call	#_psram_spin2_fill
0ab14     0B 00 00 FF 
0ab18     C0 E4 85 F1 | 	sub	objptr, ##5824
0ab1c     60 02 90 FD | 	jmp	#LR__0890
0ab20                 | LR__0879
0ab20     30 4E 05 F1 | 	add	fp, #48
0ab24     A7 12 02 FB | 	rdlong	arg01, fp
0ab28     30 4E 85 F1 | 	sub	fp, #48
0ab2c     A7 14 02 FB | 	rdlong	arg02, fp
0ab30     01 16 06 F6 | 	mov	arg03, #1
0ab34     00 18 06 F6 | 	mov	arg04, #0
0ab38     0B 00 00 FF 
0ab3c     C0 E4 05 F1 | 	add	objptr, ##5824
0ab40                 | '     return fill(addr, pattern, count, listPtr, 1)
0ab40     01 1A 06 F6 | 	mov	arg05, #1
0ab44     C4 A2 B0 FD | 	call	#_psram_spin2_fill
0ab48     0B 00 00 FF 
0ab4c     C0 E4 85 F1 | 	sub	objptr, ##5824
0ab50     2C 02 90 FD | 	jmp	#LR__0890
0ab54                 | LR__0880
0ab54     30 4E 05 F1 | 	add	fp, #48
0ab58     A7 12 02 FB | 	rdlong	arg01, fp
0ab5c     30 4E 85 F1 | 	sub	fp, #48
0ab60     A7 14 02 FB | 	rdlong	arg02, fp
0ab64     01 16 06 F6 | 	mov	arg03, #1
0ab68     00 18 06 F6 | 	mov	arg04, #0
0ab6c     0B 00 00 FF 
0ab70     C0 E4 05 F1 | 	add	objptr, ##5824
0ab74                 | '     return fill(addr, pattern, count, listPtr, 1)
0ab74     01 1A 06 F6 | 	mov	arg05, #1
0ab78     90 A2 B0 FD | 	call	#_psram_spin2_fill
0ab7c     30 4E 05 F1 | 	add	fp, #48
0ab80     A7 12 02 FB | 	rdlong	arg01, fp
0ab84     30 4E 85 F1 | 	sub	fp, #48
0ab88     01 12 06 F1 | 	add	arg01, #1
0ab8c     A7 14 02 FB | 	rdlong	arg02, fp
0ab90     08 14 46 F0 | 	shr	arg02, #8
0ab94     01 16 06 F6 | 	mov	arg03, #1
0ab98     00 18 06 F6 | 	mov	arg04, #0
0ab9c                 | '     return fill(addr, pattern, count, listPtr, 1)
0ab9c     01 1A 06 F6 | 	mov	arg05, #1
0aba0     68 A2 B0 FD | 	call	#_psram_spin2_fill
0aba4     0B 00 00 FF 
0aba8     C0 E4 85 F1 | 	sub	objptr, ##5824
0abac     D0 01 90 FD | 	jmp	#LR__0890
0abb0                 | LR__0881
0abb0     30 4E 05 F1 | 	add	fp, #48
0abb4     A7 12 02 FB | 	rdlong	arg01, fp
0abb8     30 4E 85 F1 | 	sub	fp, #48
0abbc     A7 14 02 FB | 	rdlong	arg02, fp
0abc0     01 16 06 F6 | 	mov	arg03, #1
0abc4     00 18 06 F6 | 	mov	arg04, #0
0abc8     0B 00 00 FF 
0abcc     C0 E4 05 F1 | 	add	objptr, ##5824
0abd0                 | '     return fill(addr, pattern, count, listPtr, 1)
0abd0     01 1A 06 F6 | 	mov	arg05, #1
0abd4     34 A2 B0 FD | 	call	#_psram_spin2_fill
0abd8     30 4E 05 F1 | 	add	fp, #48
0abdc     A7 12 02 FB | 	rdlong	arg01, fp
0abe0     30 4E 85 F1 | 	sub	fp, #48
0abe4     01 12 06 F1 | 	add	arg01, #1
0abe8     A7 14 02 FB | 	rdlong	arg02, fp
0abec     08 14 46 F0 | 	shr	arg02, #8
0abf0     01 16 06 F6 | 	mov	arg03, #1
0abf4     00 18 06 F6 | 	mov	arg04, #0
0abf8                 | '     return fill(addr, pattern, count, listPtr, 1)
0abf8     01 1A 06 F6 | 	mov	arg05, #1
0abfc     0C A2 B0 FD | 	call	#_psram_spin2_fill
0ac00     0B 00 00 FF 
0ac04     C0 E4 85 F1 | 	sub	objptr, ##5824
0ac08     74 01 90 FD | 	jmp	#LR__0890
0ac0c                 | LR__0882
0ac0c     30 4E 05 F1 | 	add	fp, #48
0ac10     A7 12 02 FB | 	rdlong	arg01, fp
0ac14     30 4E 85 F1 | 	sub	fp, #48
0ac18     A7 14 02 FB | 	rdlong	arg02, fp
0ac1c     01 16 06 F6 | 	mov	arg03, #1
0ac20     00 18 06 F6 | 	mov	arg04, #0
0ac24     0B 00 00 FF 
0ac28     C0 E4 05 F1 | 	add	objptr, ##5824
0ac2c                 | '     return fill(addr, pattern, count, listPtr, 4)
0ac2c     04 1A 06 F6 | 	mov	arg05, #4
0ac30     D8 A1 B0 FD | 	call	#_psram_spin2_fill
0ac34     0B 00 00 FF 
0ac38     C0 E4 85 F1 | 	sub	objptr, ##5824
0ac3c     40 01 90 FD | 	jmp	#LR__0890
0ac40                 | LR__0883
0ac40     30 4E 05 F1 | 	add	fp, #48
0ac44     A7 12 02 FB | 	rdlong	arg01, fp
0ac48     30 4E 85 F1 | 	sub	fp, #48
0ac4c     A7 14 02 FB | 	rdlong	arg02, fp
0ac50     01 16 06 F6 | 	mov	arg03, #1
0ac54     00 18 06 F6 | 	mov	arg04, #0
0ac58     0B 00 00 FF 
0ac5c     C0 E4 05 F1 | 	add	objptr, ##5824
0ac60                 | '     return fill(addr, pattern, count, listPtr, 4)
0ac60     04 1A 06 F6 | 	mov	arg05, #4
0ac64     A4 A1 B0 FD | 	call	#_psram_spin2_fill
0ac68     0B 00 00 FF 
0ac6c     C0 E4 85 F1 | 	sub	objptr, ##5824
0ac70     0C 01 90 FD | 	jmp	#LR__0890
0ac74                 | LR__0884
0ac74     30 4E 05 F1 | 	add	fp, #48
0ac78     A7 12 02 FB | 	rdlong	arg01, fp
0ac7c     30 4E 85 F1 | 	sub	fp, #48
0ac80     A7 14 02 FB | 	rdlong	arg02, fp
0ac84     01 16 06 F6 | 	mov	arg03, #1
0ac88     00 18 06 F6 | 	mov	arg04, #0
0ac8c     0B 00 00 FF 
0ac90     C0 E4 05 F1 | 	add	objptr, ##5824
0ac94                 | '     return fill(addr, pattern, count, listPtr, 4)
0ac94     04 1A 06 F6 | 	mov	arg05, #4
0ac98     70 A1 B0 FD | 	call	#_psram_spin2_fill
0ac9c     0B 00 00 FF 
0aca0     C0 E4 85 F1 | 	sub	objptr, ##5824
0aca4     D8 00 90 FD | 	jmp	#LR__0890
0aca8                 | LR__0885
0aca8     30 4E 05 F1 | 	add	fp, #48
0acac     A7 12 02 FB | 	rdlong	arg01, fp
0acb0     30 4E 85 F1 | 	sub	fp, #48
0acb4     A7 14 02 FB | 	rdlong	arg02, fp
0acb8     01 16 06 F6 | 	mov	arg03, #1
0acbc     00 18 06 F6 | 	mov	arg04, #0
0acc0     0B 00 00 FF 
0acc4     C0 E4 05 F1 | 	add	objptr, ##5824
0acc8                 | '     return fill(addr, pattern, count, listPtr, 4)
0acc8     04 1A 06 F6 | 	mov	arg05, #4
0accc     3C A1 B0 FD | 	call	#_psram_spin2_fill
0acd0     0B 00 00 FF 
0acd4     C0 E4 85 F1 | 	sub	objptr, ##5824
0acd8     A4 00 90 FD | 	jmp	#LR__0890
0acdc                 | LR__0886
0acdc     30 4E 05 F1 | 	add	fp, #48
0ace0     A7 12 02 FB | 	rdlong	arg01, fp
0ace4     30 4E 85 F1 | 	sub	fp, #48
0ace8     A7 14 02 FB | 	rdlong	arg02, fp
0acec     01 16 06 F6 | 	mov	arg03, #1
0acf0     00 18 06 F6 | 	mov	arg04, #0
0acf4     0B 00 00 FF 
0acf8     C0 E4 05 F1 | 	add	objptr, ##5824
0acfc                 | '     return fill(addr, pattern, count, listPtr, 4)
0acfc     04 1A 06 F6 | 	mov	arg05, #4
0ad00     08 A1 B0 FD | 	call	#_psram_spin2_fill
0ad04     0B 00 00 FF 
0ad08     C0 E4 85 F1 | 	sub	objptr, ##5824
0ad0c     70 00 90 FD | 	jmp	#LR__0890
0ad10                 | LR__0887
0ad10     30 4E 05 F1 | 	add	fp, #48
0ad14     A7 12 02 FB | 	rdlong	arg01, fp
0ad18     30 4E 85 F1 | 	sub	fp, #48
0ad1c     A7 14 02 FB | 	rdlong	arg02, fp
0ad20     01 16 06 F6 | 	mov	arg03, #1
0ad24     00 18 06 F6 | 	mov	arg04, #0
0ad28     0B 00 00 FF 
0ad2c     C0 E4 05 F1 | 	add	objptr, ##5824
0ad30                 | '     return fill(addr, pattern, count, listPtr, 4)
0ad30     04 1A 06 F6 | 	mov	arg05, #4
0ad34     D4 A0 B0 FD | 	call	#_psram_spin2_fill
0ad38     0B 00 00 FF 
0ad3c     C0 E4 85 F1 | 	sub	objptr, ##5824
0ad40     3C 00 90 FD | 	jmp	#LR__0890
0ad44                 | LR__0888
0ad44     30 4E 05 F1 | 	add	fp, #48
0ad48     A7 12 02 FB | 	rdlong	arg01, fp
0ad4c     30 4E 85 F1 | 	sub	fp, #48
0ad50     A7 14 02 FB | 	rdlong	arg02, fp
0ad54     01 16 06 F6 | 	mov	arg03, #1
0ad58     00 18 06 F6 | 	mov	arg04, #0
0ad5c     0B 00 00 FF 
0ad60     C0 E4 05 F1 | 	add	objptr, ##5824
0ad64                 | '     return fill(addr, pattern, count, listPtr, 4)
0ad64     04 1A 06 F6 | 	mov	arg05, #4
0ad68     A0 A0 B0 FD | 	call	#_psram_spin2_fill
0ad6c     0B 00 00 FF 
0ad70     C0 E4 85 F1 | 	sub	objptr, ##5824
0ad74     08 00 90 FD | 	jmp	#LR__0890
0ad78                 | LR__0889
0ad78     2F 12 06 F6 | 	mov	arg01, #47
0ad7c     44 75 B0 FD | 	call	#_printerror
0ad80                 | LR__0890
0ad80                 | LR__0891
0ad80     A7 F0 03 F6 | 	mov	ptra, fp
0ad84     B2 00 A0 FD | 	call	#popregs_
0ad88                 | _do_assign_ret
0ad88     2D 00 64 FD | 	ret
0ad8c                 | 
0ad8c                 | ' 
0ad8c                 | ' 
0ad8c                 | ' ' --------------------- Read a variable and push to the stack
0ad8c                 | ' 
0ad8c                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
0ad8c                 | ' 
0ad8c                 | ' sub do_getvar
0ad8c                 | _do_getvar
0ad8c     04 4A 05 F6 | 	mov	COUNT_, #4
0ad90     A8 00 A0 FD | 	call	#pushregs_
0ad94     3C F0 07 F1 | 	add	ptra, #60
0ad98                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0ad98                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0ad98     41 00 00 FF 
0ad9c     44 E4 05 F1 | 	add	objptr, ##33348
0ada0     F2 1E 02 FB | 	rdlong	local01, objptr
0ada4     0F 17 02 F6 | 	mov	arg03, local01
0ada8     01 16 66 F0 | 	shl	arg03, #1
0adac     0F 17 02 F1 | 	add	arg03, local01
0adb0     02 16 66 F0 | 	shl	arg03, #2
0adb4     03 00 00 FF 
0adb8     04 E4 85 F1 | 	sub	objptr, ##1540
0adbc     F2 16 02 F1 | 	add	arg03, objptr
0adc0     04 16 06 F1 | 	add	arg03, #4
0adc4     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0adc8     3E 00 00 FF 
0adcc     40 E4 85 F1 | 	sub	objptr, ##31808
0add0     C4 00 90 5D |  if_ne	jmp	#LR__0901
0add4     41 00 00 FF 
0add8     44 E4 05 F1 | 	add	objptr, ##33348
0addc     F2 1E 02 FB | 	rdlong	local01, objptr
0ade0     0F 13 02 F6 | 	mov	arg01, local01
0ade4     01 12 66 F0 | 	shl	arg01, #1
0ade8     0F 13 02 F1 | 	add	arg01, local01
0adec     02 12 66 F0 | 	shl	arg01, #2
0adf0     03 00 00 FF 
0adf4     04 E4 85 F1 | 	sub	objptr, ##1540
0adf8     F2 12 02 F1 | 	add	arg01, objptr
0adfc     09 1F 02 FB | 	rdlong	local01, arg01
0ae00     04 1E 66 F0 | 	shl	local01, #4
0ae04     32 00 00 FF 
0ae08     74 E4 85 F1 | 	sub	objptr, ##25716
0ae0c     F2 1E 02 F1 | 	add	local01, objptr
0ae10     04 1E 06 F1 | 	add	local01, #4
0ae14     0F 13 02 FB | 	rdlong	arg01, local01
0ae18     04 1E 06 F1 | 	add	local01, #4
0ae1c     0F 1F 02 FB | 	rdlong	local01, local01
0ae20     A7 12 62 FC | 	wrlong	arg01, fp
0ae24     04 4E 05 F1 | 	add	fp, #4
0ae28     A7 1E 62 FC | 	wrlong	local01, fp
0ae2c     35 00 00 FF 
0ae30     78 E4 05 F1 | 	add	objptr, ##27256
0ae34     F2 1E 02 FB | 	rdlong	local01, objptr
0ae38     0F 13 02 F6 | 	mov	arg01, local01
0ae3c     01 12 66 F0 | 	shl	arg01, #1
0ae40     0F 13 02 F1 | 	add	arg01, local01
0ae44     02 12 66 F0 | 	shl	arg01, #2
0ae48     03 00 00 FF 
0ae4c     04 E4 85 F1 | 	sub	objptr, ##1540
0ae50     F2 12 02 F1 | 	add	arg01, objptr
0ae54     09 1F 02 FB | 	rdlong	local01, arg01
0ae58     04 1E 66 F0 | 	shl	local01, #4
0ae5c     32 00 00 FF 
0ae60     74 E4 85 F1 | 	sub	objptr, ##25716
0ae64     F2 1E 02 F1 | 	add	local01, objptr
0ae68     0C 1E 06 F1 | 	add	local01, #12
0ae6c     0F 1F 02 FB | 	rdlong	local01, local01
0ae70     04 4E 05 F1 | 	add	fp, #4
0ae74     A7 1E 62 FC | 	wrlong	local01, fp
0ae78                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
0ae78                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0ae78                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
0ae78     08 4E 85 F1 | 	sub	fp, #8
0ae7c     00 1F 16 F2 | 	cmp	local01, #256 wc
0ae80     0B 00 00 FF 
0ae84     CC E5 85 F1 | 	sub	objptr, ##6092
0ae88     0C 00 90 3D |  if_ae	jmp	#LR__0900
0ae8c     A7 12 02 F6 | 	mov	arg01, fp
0ae90     78 DB BF FD | 	call	#_push
0ae94     74 04 90 FD | 	jmp	#LR__0922
0ae98                 | LR__0900
0ae98                 | LR__0901
0ae98     41 00 00 FF 
0ae9c     44 E4 05 F1 | 	add	objptr, ##33348
0aea0     F2 16 02 FB | 	rdlong	arg03, objptr
0aea4     0B 15 02 F6 | 	mov	arg02, arg03
0aea8     01 14 66 F0 | 	shl	arg02, #1
0aeac     0B 15 02 F1 | 	add	arg02, arg03
0aeb0     02 14 66 F0 | 	shl	arg02, #2
0aeb4     03 00 00 FF 
0aeb8     04 E4 85 F1 | 	sub	objptr, ##1540
0aebc     F2 14 02 F1 | 	add	arg02, objptr
0aec0     0A 17 02 FB | 	rdlong	arg03, arg02
0aec4     04 16 66 F0 | 	shl	arg03, #4
0aec8     32 00 00 FF 
0aecc     74 E4 85 F1 | 	sub	objptr, ##25716
0aed0     F2 16 02 F1 | 	add	arg03, objptr
0aed4     04 16 06 F1 | 	add	arg03, #4
0aed8     0B 13 02 FB | 	rdlong	arg01, arg03
0aedc     0C 4E 05 F1 | 	add	fp, #12
0aee0     A7 12 62 FC | 	wrlong	arg01, fp
0aee4     0C 4E 85 F1 | 	sub	fp, #12
0aee8     0B 00 00 FF 
0aeec     CC E5 85 F1 | 	sub	objptr, ##6092
0aef0     8C 75 B0 FD | 	call	#_pslpeek
0aef4     FD FA 31 F9 | 	getword	result1, result1, #0
0aef8     10 4E 05 F1 | 	add	fp, #16
0aefc     A7 FA 61 FC | 	wrlong	result1, fp
0af00     41 00 00 FF 
0af04     44 E4 05 F1 | 	add	objptr, ##33348
0af08     F2 16 02 FB | 	rdlong	arg03, objptr
0af0c     0B 15 02 F6 | 	mov	arg02, arg03
0af10     01 14 66 F0 | 	shl	arg02, #1
0af14     0B 15 02 F1 | 	add	arg02, arg03
0af18     02 14 66 F0 | 	shl	arg02, #2
0af1c     03 00 00 FF 
0af20     04 E4 85 F1 | 	sub	objptr, ##1540
0af24     F2 14 02 F1 | 	add	arg02, objptr
0af28     04 14 06 F1 | 	add	arg02, #4
0af2c     0A 17 02 FB | 	rdlong	arg03, arg02
0af30     04 4E 05 F1 | 	add	fp, #4
0af34     A7 16 62 FC | 	wrlong	arg03, fp
0af38     08 4E 85 F1 | 	sub	fp, #8
0af3c     A7 12 02 FB | 	rdlong	arg01, fp
0af40     0C 4E 85 F1 | 	sub	fp, #12
0af44     02 12 06 F1 | 	add	arg01, #2
0af48     3E 00 00 FF 
0af4c     40 E4 85 F1 | 	sub	objptr, ##31808
0af50     D4 74 B0 FD | 	call	#_pspeek
0af54     FD FA E1 F8 | 	getbyte	result1, result1, #0
0af58     18 4E 05 F1 | 	add	fp, #24
0af5c     A7 FA 61 FC | 	wrlong	result1, fp
0af60     0C 4E 85 F1 | 	sub	fp, #12
0af64     A7 12 02 FB | 	rdlong	arg01, fp
0af68     0C 4E 85 F1 | 	sub	fp, #12
0af6c     04 12 06 F1 | 	add	arg01, #4
0af70     0C 75 B0 FD | 	call	#_pslpeek
0af74     1C 4E 05 F1 | 	add	fp, #28
0af78     A7 FA 61 FC | 	wrlong	result1, fp
0af7c     10 4E 85 F1 | 	sub	fp, #16
0af80     A7 12 02 FB | 	rdlong	arg01, fp
0af84     0C 4E 85 F1 | 	sub	fp, #12
0af88     08 12 06 F1 | 	add	arg01, #8
0af8c     F0 74 B0 FD | 	call	#_pslpeek
0af90     20 4E 05 F1 | 	add	fp, #32
0af94     A7 FA 61 FC | 	wrlong	result1, fp
0af98     14 4E 85 F1 | 	sub	fp, #20
0af9c     A7 12 02 FB | 	rdlong	arg01, fp
0afa0     0C 4E 85 F1 | 	sub	fp, #12
0afa4     0C 12 06 F1 | 	add	arg01, #12
0afa8     D4 74 B0 FD | 	call	#_pslpeek
0afac     24 4E 05 F1 | 	add	fp, #36
0afb0     A7 FA 61 FC | 	wrlong	result1, fp
0afb4                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0afb4                 | ' esize=pspeek(arrptr+2)
0afb4                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0afb4                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0afb4                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0afb4                 | ' if numpar>2 then t1=pop() : i3=t1.result.uresult   else i3=0 
0afb4     10 4E 85 F1 | 	sub	fp, #16
0afb8     A7 16 02 FB | 	rdlong	arg03, fp
0afbc     14 4E 85 F1 | 	sub	fp, #20
0afc0     03 16 16 F2 | 	cmp	arg03, #3 wc
0afc4     30 00 90 CD |  if_b	jmp	#LR__0902
0afc8     A8 D9 BF FD | 	call	#_pop
0afcc     A7 FA 61 FC | 	wrlong	result1, fp
0afd0     04 4E 05 F1 | 	add	fp, #4
0afd4     A7 FC 61 FC | 	wrlong	result2, fp
0afd8     04 4E 05 F1 | 	add	fp, #4
0afdc     A7 FE 61 FC | 	wrlong	result3, fp
0afe0     08 4E 85 F1 | 	sub	fp, #8
0afe4     A7 16 02 FB | 	rdlong	arg03, fp
0afe8     30 4E 05 F1 | 	add	fp, #48
0afec     A7 16 62 FC | 	wrlong	arg03, fp
0aff0     30 4E 85 F1 | 	sub	fp, #48
0aff4     0C 00 90 FD | 	jmp	#LR__0903
0aff8                 | LR__0902
0aff8     30 4E 05 F1 | 	add	fp, #48
0affc     A7 00 68 FC | 	wrlong	#0, fp
0b000     30 4E 85 F1 | 	sub	fp, #48
0b004                 | LR__0903
0b004                 | ' if numpar>1 then t1=pop() : i2=t1.result.uresult   else i2=0 
0b004     14 4E 05 F1 | 	add	fp, #20
0b008     A7 16 02 FB | 	rdlong	arg03, fp
0b00c     14 4E 85 F1 | 	sub	fp, #20
0b010     02 16 16 F2 | 	cmp	arg03, #2 wc
0b014     30 00 90 CD |  if_b	jmp	#LR__0904
0b018     58 D9 BF FD | 	call	#_pop
0b01c     A7 FA 61 FC | 	wrlong	result1, fp
0b020     04 4E 05 F1 | 	add	fp, #4
0b024     A7 FC 61 FC | 	wrlong	result2, fp
0b028     04 4E 05 F1 | 	add	fp, #4
0b02c     A7 FE 61 FC | 	wrlong	result3, fp
0b030     08 4E 85 F1 | 	sub	fp, #8
0b034     A7 16 02 FB | 	rdlong	arg03, fp
0b038     2C 4E 05 F1 | 	add	fp, #44
0b03c     A7 16 62 FC | 	wrlong	arg03, fp
0b040     2C 4E 85 F1 | 	sub	fp, #44
0b044     0C 00 90 FD | 	jmp	#LR__0905
0b048                 | LR__0904
0b048     2C 4E 05 F1 | 	add	fp, #44
0b04c     A7 00 68 FC | 	wrlong	#0, fp
0b050     2C 4E 85 F1 | 	sub	fp, #44
0b054                 | LR__0905
0b054                 | ' if numpar>0 then t1=pop() : i1=t1.result.uresult   else i1=0 
0b054     14 4E 05 F1 | 	add	fp, #20
0b058     A7 16 02 FB | 	rdlong	arg03, fp
0b05c     14 4E 85 F1 | 	sub	fp, #20
0b060     01 16 16 F2 | 	cmp	arg03, #1 wc
0b064     30 00 90 CD |  if_b	jmp	#LR__0906
0b068     08 D9 BF FD | 	call	#_pop
0b06c     A7 FA 61 FC | 	wrlong	result1, fp
0b070     04 4E 05 F1 | 	add	fp, #4
0b074     A7 FC 61 FC | 	wrlong	result2, fp
0b078     04 4E 05 F1 | 	add	fp, #4
0b07c     A7 FE 61 FC | 	wrlong	result3, fp
0b080     08 4E 85 F1 | 	sub	fp, #8
0b084     A7 16 02 FB | 	rdlong	arg03, fp
0b088     28 4E 05 F1 | 	add	fp, #40
0b08c     A7 16 62 FC | 	wrlong	arg03, fp
0b090     28 4E 85 F1 | 	sub	fp, #40
0b094     0C 00 90 FD | 	jmp	#LR__0907
0b098                 | LR__0906
0b098     28 4E 05 F1 | 	add	fp, #40
0b09c     A7 00 68 FC | 	wrlong	#0, fp
0b0a0     28 4E 85 F1 | 	sub	fp, #40
0b0a4                 | LR__0907
0b0a4     0C 4E 05 F1 | 	add	fp, #12
0b0a8     A7 20 02 FB | 	rdlong	local02, fp
0b0ac     1C 4E 05 F1 | 	add	fp, #28
0b0b0     A7 22 02 FB | 	rdlong	local03, fp
0b0b4     04 4E 05 F1 | 	add	fp, #4
0b0b8     A7 FE 01 FB | 	rdlong	result3, fp
0b0bc     10 4E 85 F1 | 	sub	fp, #16
0b0c0     A7 FC 01 FB | 	rdlong	result2, fp
0b0c4     FE FE 01 FD | 	qmul	result3, result2
0b0c8     10 20 06 F1 | 	add	local02, #16
0b0cc     14 4E 05 F1 | 	add	fp, #20
0b0d0     A7 FE 01 FB | 	rdlong	result3, fp
0b0d4     18 FA 61 FD | 	getqx	result1
0b0d8     FE FE 01 FD | 	qmul	result3, result2
0b0dc     FD 22 02 F1 | 	add	local03, result1
0b0e0     10 4E 85 F1 | 	sub	fp, #16
0b0e4     A7 FC 01 FB | 	rdlong	result2, fp
0b0e8     18 FE 61 FD | 	getqx	result3
0b0ec     FE FE 01 FD | 	qmul	result3, result2
0b0f0     08 4E 85 F1 | 	sub	fp, #8
0b0f4     A7 FC 01 FB | 	rdlong	result2, fp
0b0f8     18 FE 61 FD | 	getqx	result3
0b0fc     FF 22 02 F1 | 	add	local03, result3
0b100     FE 22 02 FD | 	qmul	local03, result2
0b104     1C 4E 05 F1 | 	add	fp, #28
0b108                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0b108                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
0b108                 | ' 
0b108                 | ' select case vartype
0b108     18 FE 61 FD | 	getqx	result3
0b10c     FF 20 02 F1 | 	add	local02, result3
0b110     A7 20 62 FC | 	wrlong	local02, fp
0b114     24 4E 85 F1 | 	sub	fp, #36
0b118     A7 24 02 FB | 	rdlong	local04, fp
0b11c     10 4E 85 F1 | 	sub	fp, #16
0b120     00 25 86 F1 | 	sub	local04, #256
0b124     0C 24 26 F3 | 	fle	local04, #12
0b128     30 24 62 FD | 	jmprel	local04
0b12c                 | LR__0908
0b12c     30 00 90 FD | 	jmp	#LR__0909
0b130     58 00 90 FD | 	jmp	#LR__0910
0b134     8C 00 90 FD | 	jmp	#LR__0911
0b138     AC 00 90 FD | 	jmp	#LR__0912
0b13c     E8 00 90 FD | 	jmp	#LR__0913
0b140     08 01 90 FD | 	jmp	#LR__0914
0b144     24 01 90 FD | 	jmp	#LR__0915
0b148     40 01 90 FD | 	jmp	#LR__0916
0b14c     50 01 90 FD | 	jmp	#LR__0917
0b150     60 01 90 FD | 	jmp	#LR__0918
0b154     7C 01 90 FD | 	jmp	#LR__0919
0b158     8C 01 90 FD | 	jmp	#LR__0920
0b15c     A4 01 90 FD | 	jmp	#LR__0921
0b160                 | LR__0909
0b160     A7 12 02 F6 | 	mov	arg01, fp
0b164     34 4E 05 F1 | 	add	fp, #52
0b168     A7 14 02 FB | 	rdlong	arg02, fp
0b16c     34 4E 85 F1 | 	sub	fp, #52
0b170     0C 16 06 F6 | 	mov	arg03, #12
0b174     0B 00 00 FF 
0b178     C0 E4 05 F1 | 	add	objptr, ##5824
0b17c     54 9B B0 FD | 	call	#_psram_spin2_read1
0b180     0B 00 00 FF 
0b184     C0 E4 85 F1 | 	sub	objptr, ##5824
0b188     78 01 90 FD | 	jmp	#LR__0921
0b18c                 | LR__0910
0b18c     08 4E 05 F1 | 	add	fp, #8
0b190     A7 38 68 FC | 	wrlong	#28, fp
0b194     2C 4E 05 F1 | 	add	fp, #44
0b198     A7 12 02 FB | 	rdlong	arg01, fp
0b19c     34 4E 85 F1 | 	sub	fp, #52
0b1a0     84 72 B0 FD | 	call	#_pspeek
0b1a4     FD FA E1 F8 | 	getbyte	result1, result1, #0
0b1a8     A7 FA 61 FC | 	wrlong	result1, fp
0b1ac     80 FA 15 F2 | 	cmp	result1, #128 wc
0b1b0     00 1F 66 36 |  if_ae	neg	local01, #256
0b1b4     A7 22 02 3B |  if_ae	rdlong	local03, fp
0b1b8     11 1F 42 35 |  if_ae	or	local01, local03
0b1bc     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0b1c0     40 01 90 FD | 	jmp	#LR__0921
0b1c4                 | LR__0911
0b1c4     08 4E 05 F1 | 	add	fp, #8
0b1c8     A7 3A 68 FC | 	wrlong	#29, fp
0b1cc     2C 4E 05 F1 | 	add	fp, #44
0b1d0     A7 12 02 FB | 	rdlong	arg01, fp
0b1d4     34 4E 85 F1 | 	sub	fp, #52
0b1d8     4C 72 B0 FD | 	call	#_pspeek
0b1dc     FD FA E1 F8 | 	getbyte	result1, result1, #0
0b1e0     A7 FA 61 FC | 	wrlong	result1, fp
0b1e4     1C 01 90 FD | 	jmp	#LR__0921
0b1e8                 | LR__0912
0b1e8     08 4E 05 F1 | 	add	fp, #8
0b1ec     A7 38 68 FC | 	wrlong	#28, fp
0b1f0     2C 4E 05 F1 | 	add	fp, #44
0b1f4     A7 12 02 FB | 	rdlong	arg01, fp
0b1f8     34 4E 85 F1 | 	sub	fp, #52
0b1fc     80 72 B0 FD | 	call	#_pslpeek
0b200     FD FA 31 F9 | 	getword	result1, result1, #0
0b204     A7 FA 61 FC | 	wrlong	result1, fp
0b208     40 00 00 FF 
0b20c     00 FA 15 F2 | 	cmp	result1, ##32768 wc
0b210     FF 7F 00 3F 
0b214     00 1F 06 36 |  if_ae	mov	local01, ##16776960
0b218     A7 22 02 3B |  if_ae	rdlong	local03, fp
0b21c     11 1F 42 35 |  if_ae	or	local01, local03
0b220     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0b224     DC 00 90 FD | 	jmp	#LR__0921
0b228                 | LR__0913
0b228     08 4E 05 F1 | 	add	fp, #8
0b22c     A7 3A 68 FC | 	wrlong	#29, fp
0b230     2C 4E 05 F1 | 	add	fp, #44
0b234     A7 12 02 FB | 	rdlong	arg01, fp
0b238     34 4E 85 F1 | 	sub	fp, #52
0b23c     40 72 B0 FD | 	call	#_pslpeek
0b240     FD FA 31 F9 | 	getword	result1, result1, #0
0b244     A7 FA 61 FC | 	wrlong	result1, fp
0b248     B8 00 90 FD | 	jmp	#LR__0921
0b24c                 | LR__0914
0b24c     08 4E 05 F1 | 	add	fp, #8
0b250     A7 38 68 FC | 	wrlong	#28, fp
0b254     2C 4E 05 F1 | 	add	fp, #44
0b258     A7 12 02 FB | 	rdlong	arg01, fp
0b25c     34 4E 85 F1 | 	sub	fp, #52
0b260     1C 72 B0 FD | 	call	#_pslpeek
0b264     A7 FA 61 FC | 	wrlong	result1, fp
0b268     98 00 90 FD | 	jmp	#LR__0921
0b26c                 | LR__0915
0b26c     08 4E 05 F1 | 	add	fp, #8
0b270     A7 3A 68 FC | 	wrlong	#29, fp
0b274     2C 4E 05 F1 | 	add	fp, #44
0b278     A7 12 02 FB | 	rdlong	arg01, fp
0b27c     34 4E 85 F1 | 	sub	fp, #52
0b280     FC 71 B0 FD | 	call	#_pslpeek
0b284     A7 FA 61 FC | 	wrlong	result1, fp
0b288     78 00 90 FD | 	jmp	#LR__0921
0b28c                 | LR__0916
0b28c     08 4E 05 F1 | 	add	fp, #8
0b290     A7 FE 69 FC | 	wrlong	#255, fp
0b294     08 4E 85 F1 | 	sub	fp, #8
0b298     A7 60 68 FC | 	wrlong	#48, fp
0b29c     64 00 90 FD | 	jmp	#LR__0921
0b2a0                 | LR__0917
0b2a0     08 4E 05 F1 | 	add	fp, #8
0b2a4     A7 FE 69 FC | 	wrlong	#255, fp
0b2a8     08 4E 85 F1 | 	sub	fp, #8
0b2ac     A7 60 68 FC | 	wrlong	#48, fp
0b2b0     50 00 90 FD | 	jmp	#LR__0921
0b2b4                 | LR__0918
0b2b4     08 4E 05 F1 | 	add	fp, #8
0b2b8     A7 3C 68 FC | 	wrlong	#30, fp
0b2bc     2C 4E 05 F1 | 	add	fp, #44
0b2c0     A7 12 02 FB | 	rdlong	arg01, fp
0b2c4     34 4E 85 F1 | 	sub	fp, #52
0b2c8     B4 71 B0 FD | 	call	#_pslpeek
0b2cc     A7 FA 61 FC | 	wrlong	result1, fp
0b2d0     30 00 90 FD | 	jmp	#LR__0921
0b2d4                 | LR__0919
0b2d4     08 4E 05 F1 | 	add	fp, #8
0b2d8     A7 FE 69 FC | 	wrlong	#255, fp
0b2dc     08 4E 85 F1 | 	sub	fp, #8
0b2e0     A7 60 68 FC | 	wrlong	#48, fp
0b2e4     1C 00 90 FD | 	jmp	#LR__0921
0b2e8                 | LR__0920
0b2e8     08 4E 05 F1 | 	add	fp, #8
0b2ec     A7 3E 68 FC | 	wrlong	#31, fp
0b2f0     2C 4E 05 F1 | 	add	fp, #44
0b2f4     A7 12 02 FB | 	rdlong	arg01, fp
0b2f8     34 4E 85 F1 | 	sub	fp, #52
0b2fc     80 71 B0 FD | 	call	#_pslpeek
0b300     A7 FA 61 FC | 	wrlong	result1, fp
0b304                 | LR__0921
0b304     A7 12 02 F6 | 	mov	arg01, fp
0b308     00 D7 BF FD | 	call	#_push
0b30c                 | LR__0922
0b30c     A7 F0 03 F6 | 	mov	ptra, fp
0b310     B2 00 A0 FD | 	call	#popregs_
0b314                 | _do_getvar_ret
0b314     2D 00 64 FD | 	ret
0b318                 | 
0b318                 | ' 
0b318                 | ' '------------------------ Operators 
0b318                 | ' 
0b318                 | ' sub do_plus 
0b318                 | _do_plus
0b318     05 4A 05 F6 | 	mov	COUNT_, #5
0b31c     A8 00 A0 FD | 	call	#pushregs_
0b320     18 F0 07 F1 | 	add	ptra, #24
0b324     4C D6 BF FD | 	call	#_pop
0b328     FD 1E 02 F6 | 	mov	local01, result1
0b32c     FE 20 02 F6 | 	mov	local02, result2
0b330     FF 22 02 F6 | 	mov	local03, result3
0b334     0C 4E 05 F1 | 	add	fp, #12
0b338     A7 1E 62 FC | 	wrlong	local01, fp
0b33c     04 4E 05 F1 | 	add	fp, #4
0b340     A7 20 62 FC | 	wrlong	local02, fp
0b344     04 4E 05 F1 | 	add	fp, #4
0b348     A7 22 62 FC | 	wrlong	local03, fp
0b34c     14 4E 85 F1 | 	sub	fp, #20
0b350     20 D6 BF FD | 	call	#_pop
0b354     FF 22 02 F6 | 	mov	local03, result3
0b358     A7 FA 61 FC | 	wrlong	result1, fp
0b35c     04 4E 05 F1 | 	add	fp, #4
0b360     A7 FC 61 FC | 	wrlong	result2, fp
0b364     04 4E 05 F1 | 	add	fp, #4
0b368     A7 22 62 FC | 	wrlong	local03, fp
0b36c                 | ' 
0b36c                 | ' t2=pop()
0b36c                 | ' t1=pop()
0b36c                 | ' 
0b36c                 | ' 
0b36c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
0b36c     08 4E 85 F1 | 	sub	fp, #8
0b370     1D 22 0E F2 | 	cmp	local03, #29 wz
0b374     14 4E 05 A1 |  if_e	add	fp, #20
0b378     A7 24 02 AB |  if_e	rdlong	local04, fp
0b37c     14 4E 85 A1 |  if_e	sub	fp, #20
0b380     12 23 02 A6 |  if_e	mov	local03, local04
0b384     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b388     1C 00 90 5D |  if_ne	jmp	#LR__0930
0b38c     A7 1E 02 FB | 	rdlong	local01, fp
0b390     0C 4E 05 F1 | 	add	fp, #12
0b394     A7 20 02 FB | 	rdlong	local02, fp
0b398     0C 4E 85 F1 | 	sub	fp, #12
0b39c     10 1F 02 F1 | 	add	local01, local02
0b3a0     A7 1E 62 FC | 	wrlong	local01, fp
0b3a4     3C 03 90 FD | 	jmp	#LR__0942
0b3a8                 | LR__0930
0b3a8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
0b3a8     08 4E 05 F1 | 	add	fp, #8
0b3ac     A7 1E 02 FB | 	rdlong	local01, fp
0b3b0     08 4E 85 F1 | 	sub	fp, #8
0b3b4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0b3b8     14 4E 05 A1 |  if_e	add	fp, #20
0b3bc     A7 24 02 AB |  if_e	rdlong	local04, fp
0b3c0     14 4E 85 A1 |  if_e	sub	fp, #20
0b3c4     12 23 02 A6 |  if_e	mov	local03, local04
0b3c8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b3cc     28 00 90 5D |  if_ne	jmp	#LR__0931
0b3d0     A7 1E 02 FB | 	rdlong	local01, fp
0b3d4     0C 4E 05 F1 | 	add	fp, #12
0b3d8     A7 20 02 FB | 	rdlong	local02, fp
0b3dc     0C 4E 85 F1 | 	sub	fp, #12
0b3e0     10 1F 02 F1 | 	add	local01, local02
0b3e4     A7 1E 62 FC | 	wrlong	local01, fp
0b3e8     08 4E 05 F1 | 	add	fp, #8
0b3ec     A7 38 68 FC | 	wrlong	#28, fp
0b3f0     08 4E 85 F1 | 	sub	fp, #8
0b3f4     EC 02 90 FD | 	jmp	#LR__0942
0b3f8                 | LR__0931
0b3f8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0b3f8     08 4E 05 F1 | 	add	fp, #8
0b3fc     A7 1E 02 FB | 	rdlong	local01, fp
0b400     08 4E 85 F1 | 	sub	fp, #8
0b404     1D 1E 0E F2 | 	cmp	local01, #29 wz
0b408     14 4E 05 A1 |  if_e	add	fp, #20
0b40c     A7 24 02 AB |  if_e	rdlong	local04, fp
0b410     14 4E 85 A1 |  if_e	sub	fp, #20
0b414     12 23 02 A6 |  if_e	mov	local03, local04
0b418     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b41c     30 00 90 5D |  if_ne	jmp	#LR__0932
0b420     A7 12 02 FB | 	rdlong	arg01, fp
0b424     80 CA B0 FD | 	call	#__system___float_fromuns
0b428     FD 12 02 F6 | 	mov	arg01, result1
0b42c     0C 4E 05 F1 | 	add	fp, #12
0b430     A7 14 02 FB | 	rdlong	arg02, fp
0b434     0C 4E 85 F1 | 	sub	fp, #12
0b438     A0 CA B0 FD | 	call	#__system___float_add
0b43c     A7 FA 61 FC | 	wrlong	result1, fp
0b440     08 4E 05 F1 | 	add	fp, #8
0b444     A7 3C 68 FC | 	wrlong	#30, fp
0b448     08 4E 85 F1 | 	sub	fp, #8
0b44c     94 02 90 FD | 	jmp	#LR__0942
0b450                 | LR__0932
0b450                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
0b450     08 4E 05 F1 | 	add	fp, #8
0b454     A7 1E 02 FB | 	rdlong	local01, fp
0b458     08 4E 85 F1 | 	sub	fp, #8
0b45c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b460     14 4E 05 A1 |  if_e	add	fp, #20
0b464     A7 24 02 AB |  if_e	rdlong	local04, fp
0b468     14 4E 85 A1 |  if_e	sub	fp, #20
0b46c     12 23 02 A6 |  if_e	mov	local03, local04
0b470     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b474     1C 00 90 5D |  if_ne	jmp	#LR__0933
0b478     A7 1E 02 FB | 	rdlong	local01, fp
0b47c     0C 4E 05 F1 | 	add	fp, #12
0b480     A7 20 02 FB | 	rdlong	local02, fp
0b484     0C 4E 85 F1 | 	sub	fp, #12
0b488     10 1F 02 F1 | 	add	local01, local02
0b48c     A7 1E 62 FC | 	wrlong	local01, fp
0b490     50 02 90 FD | 	jmp	#LR__0942
0b494                 | LR__0933
0b494                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
0b494     08 4E 05 F1 | 	add	fp, #8
0b498     A7 1E 02 FB | 	rdlong	local01, fp
0b49c     08 4E 85 F1 | 	sub	fp, #8
0b4a0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b4a4     14 4E 05 A1 |  if_e	add	fp, #20
0b4a8     A7 24 02 AB |  if_e	rdlong	local04, fp
0b4ac     14 4E 85 A1 |  if_e	sub	fp, #20
0b4b0     12 23 02 A6 |  if_e	mov	local03, local04
0b4b4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b4b8     1C 00 90 5D |  if_ne	jmp	#LR__0934
0b4bc     A7 1E 02 FB | 	rdlong	local01, fp
0b4c0     0C 4E 05 F1 | 	add	fp, #12
0b4c4     A7 20 02 FB | 	rdlong	local02, fp
0b4c8     0C 4E 85 F1 | 	sub	fp, #12
0b4cc     10 1F 02 F1 | 	add	local01, local02
0b4d0     A7 1E 62 FC | 	wrlong	local01, fp
0b4d4     0C 02 90 FD | 	jmp	#LR__0942
0b4d8                 | LR__0934
0b4d8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0b4d8     08 4E 05 F1 | 	add	fp, #8
0b4dc     A7 1E 02 FB | 	rdlong	local01, fp
0b4e0     08 4E 85 F1 | 	sub	fp, #8
0b4e4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b4e8     14 4E 05 A1 |  if_e	add	fp, #20
0b4ec     A7 24 02 AB |  if_e	rdlong	local04, fp
0b4f0     14 4E 85 A1 |  if_e	sub	fp, #20
0b4f4     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
0b4f8     40 00 90 5D |  if_ne	jmp	#LR__0935
0b4fc     A7 12 02 FB | 	rdlong	arg01, fp
0b500     09 13 52 F6 | 	abs	arg01, arg01 wc
0b504     1F 26 C6 C9 |  if_b	decod	local05, #31
0b508     00 26 06 36 |  if_ae	mov	local05, #0
0b50c     98 C9 B0 FD | 	call	#__system___float_fromuns
0b510     13 FB 61 F5 | 	xor	result1, local05
0b514     FD 12 02 F6 | 	mov	arg01, result1
0b518     0C 4E 05 F1 | 	add	fp, #12
0b51c     A7 14 02 FB | 	rdlong	arg02, fp
0b520     0C 4E 85 F1 | 	sub	fp, #12
0b524     B4 C9 B0 FD | 	call	#__system___float_add
0b528     A7 FA 61 FC | 	wrlong	result1, fp
0b52c     08 4E 05 F1 | 	add	fp, #8
0b530     A7 3C 68 FC | 	wrlong	#30, fp
0b534     08 4E 85 F1 | 	sub	fp, #8
0b538     A8 01 90 FD | 	jmp	#LR__0942
0b53c                 | LR__0935
0b53c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
0b53c     08 4E 05 F1 | 	add	fp, #8
0b540     A7 1E 02 FB | 	rdlong	local01, fp
0b544     08 4E 85 F1 | 	sub	fp, #8
0b548     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b54c     14 4E 05 A1 |  if_e	add	fp, #20
0b550     A7 22 02 AB |  if_e	rdlong	local03, fp
0b554     14 4E 85 A1 |  if_e	sub	fp, #20
0b558     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b55c     28 00 90 5D |  if_ne	jmp	#LR__0936
0b560     A7 1E 02 FB | 	rdlong	local01, fp
0b564     0C 4E 05 F1 | 	add	fp, #12
0b568     A7 12 02 FB | 	rdlong	arg01, fp
0b56c     0C 4E 85 F1 | 	sub	fp, #12
0b570     34 C9 B0 FD | 	call	#__system___float_fromuns
0b574     FD 14 02 F6 | 	mov	arg02, result1
0b578     0F 13 02 F6 | 	mov	arg01, local01
0b57c     5C C9 B0 FD | 	call	#__system___float_add
0b580     A7 FA 61 FC | 	wrlong	result1, fp
0b584     5C 01 90 FD | 	jmp	#LR__0942
0b588                 | LR__0936
0b588                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
0b588     08 4E 05 F1 | 	add	fp, #8
0b58c     A7 1E 02 FB | 	rdlong	local01, fp
0b590     08 4E 85 F1 | 	sub	fp, #8
0b594     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b598     14 4E 05 A1 |  if_e	add	fp, #20
0b59c     A7 22 02 AB |  if_e	rdlong	local03, fp
0b5a0     14 4E 85 A1 |  if_e	sub	fp, #20
0b5a4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b5a8     38 00 90 5D |  if_ne	jmp	#LR__0937
0b5ac     A7 1E 02 FB | 	rdlong	local01, fp
0b5b0     0C 4E 05 F1 | 	add	fp, #12
0b5b4     A7 12 02 FB | 	rdlong	arg01, fp
0b5b8     0C 4E 85 F1 | 	sub	fp, #12
0b5bc     09 13 52 F6 | 	abs	arg01, arg01 wc
0b5c0     1F 26 C6 C9 |  if_b	decod	local05, #31
0b5c4     00 26 06 36 |  if_ae	mov	local05, #0
0b5c8     DC C8 B0 FD | 	call	#__system___float_fromuns
0b5cc     13 FB 61 F5 | 	xor	result1, local05
0b5d0     FD 14 02 F6 | 	mov	arg02, result1
0b5d4     0F 13 02 F6 | 	mov	arg01, local01
0b5d8     00 C9 B0 FD | 	call	#__system___float_add
0b5dc     A7 FA 61 FC | 	wrlong	result1, fp
0b5e0     00 01 90 FD | 	jmp	#LR__0942
0b5e4                 | LR__0937
0b5e4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
0b5e4     08 4E 05 F1 | 	add	fp, #8
0b5e8     A7 1E 02 FB | 	rdlong	local01, fp
0b5ec     08 4E 85 F1 | 	sub	fp, #8
0b5f0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b5f4     14 4E 05 A1 |  if_e	add	fp, #20
0b5f8     A7 22 02 AB |  if_e	rdlong	local03, fp
0b5fc     14 4E 85 A1 |  if_e	sub	fp, #20
0b600     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b604     1C 00 90 5D |  if_ne	jmp	#LR__0938
0b608     A7 12 02 FB | 	rdlong	arg01, fp
0b60c     0C 4E 05 F1 | 	add	fp, #12
0b610     A7 14 02 FB | 	rdlong	arg02, fp
0b614     0C 4E 85 F1 | 	sub	fp, #12
0b618     C0 C8 B0 FD | 	call	#__system___float_add
0b61c     A7 FA 61 FC | 	wrlong	result1, fp
0b620     C0 00 90 FD | 	jmp	#LR__0942
0b624                 | LR__0938
0b624                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0b624     08 4E 05 F1 | 	add	fp, #8
0b628     A7 1E 02 FB | 	rdlong	local01, fp
0b62c     08 4E 85 F1 | 	sub	fp, #8
0b630     1F 1E 0E F2 | 	cmp	local01, #31 wz
0b634     24 00 90 5D |  if_ne	jmp	#LR__0939
0b638     14 4E 05 F1 | 	add	fp, #20
0b63c     A7 22 02 FB | 	rdlong	local03, fp
0b640     14 4E 85 F1 | 	sub	fp, #20
0b644     1F 22 0E F2 | 	cmp	local03, #31 wz
0b648     A7 04 68 5C |  if_ne	wrlong	#2, fp
0b64c     08 4E 05 51 |  if_ne	add	fp, #8
0b650     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0b654     08 4E 85 51 |  if_ne	sub	fp, #8
0b658     88 00 90 5D |  if_ne	jmp	#LR__0942
0b65c                 | LR__0939
0b65c                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0b65c     14 4E 05 F1 | 	add	fp, #20
0b660     A7 1E 02 FB | 	rdlong	local01, fp
0b664     14 4E 85 F1 | 	sub	fp, #20
0b668     1F 1E 0E F2 | 	cmp	local01, #31 wz
0b66c     24 00 90 5D |  if_ne	jmp	#LR__0940
0b670     08 4E 05 F1 | 	add	fp, #8
0b674     A7 22 02 FB | 	rdlong	local03, fp
0b678     08 4E 85 F1 | 	sub	fp, #8
0b67c     1F 22 0E F2 | 	cmp	local03, #31 wz
0b680     A7 04 68 5C |  if_ne	wrlong	#2, fp
0b684     08 4E 05 51 |  if_ne	add	fp, #8
0b688     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0b68c     08 4E 85 51 |  if_ne	sub	fp, #8
0b690     50 00 90 5D |  if_ne	jmp	#LR__0942
0b694                 | LR__0940
0b694                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
0b694     08 4E 05 F1 | 	add	fp, #8
0b698     A7 1E 02 FB | 	rdlong	local01, fp
0b69c     08 4E 85 F1 | 	sub	fp, #8
0b6a0     1F 1E 0E F2 | 	cmp	local01, #31 wz
0b6a4     14 4E 05 A1 |  if_e	add	fp, #20
0b6a8     A7 22 02 AB |  if_e	rdlong	local03, fp
0b6ac     14 4E 85 A1 |  if_e	sub	fp, #20
0b6b0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0b6b4     1C 00 90 5D |  if_ne	jmp	#LR__0941
0b6b8     A7 12 02 FB | 	rdlong	arg01, fp
0b6bc     0C 4E 05 F1 | 	add	fp, #12
0b6c0     A7 14 02 FB | 	rdlong	arg02, fp
0b6c4     0C 4E 85 F1 | 	sub	fp, #12
0b6c8     50 A1 B0 FD | 	call	#__system___string_concat
0b6cc     A7 FA 61 FC | 	wrlong	result1, fp
0b6d0     10 00 90 FD | 	jmp	#LR__0942
0b6d4                 | LR__0941
0b6d4     A7 08 68 FC | 	wrlong	#4, fp
0b6d8     08 4E 05 F1 | 	add	fp, #8
0b6dc     A7 FE 69 FC | 	wrlong	#255, fp
0b6e0     08 4E 85 F1 | 	sub	fp, #8
0b6e4                 | LR__0942
0b6e4     A7 12 02 F6 | 	mov	arg01, fp
0b6e8     20 D3 BF FD | 	call	#_push
0b6ec     A7 F0 03 F6 | 	mov	ptra, fp
0b6f0     B2 00 A0 FD | 	call	#popregs_
0b6f4                 | _do_plus_ret
0b6f4     2D 00 64 FD | 	ret
0b6f8                 | 
0b6f8                 | ' 
0b6f8                 | ' sub do_minus
0b6f8                 | _do_minus
0b6f8     05 4A 05 F6 | 	mov	COUNT_, #5
0b6fc     A8 00 A0 FD | 	call	#pushregs_
0b700     18 F0 07 F1 | 	add	ptra, #24
0b704     6C D2 BF FD | 	call	#_pop
0b708     FD 1E 02 F6 | 	mov	local01, result1
0b70c     FE 20 02 F6 | 	mov	local02, result2
0b710     FF 22 02 F6 | 	mov	local03, result3
0b714     0C 4E 05 F1 | 	add	fp, #12
0b718     A7 1E 62 FC | 	wrlong	local01, fp
0b71c     04 4E 05 F1 | 	add	fp, #4
0b720     A7 20 62 FC | 	wrlong	local02, fp
0b724     04 4E 05 F1 | 	add	fp, #4
0b728     A7 22 62 FC | 	wrlong	local03, fp
0b72c     14 4E 85 F1 | 	sub	fp, #20
0b730     40 D2 BF FD | 	call	#_pop
0b734     FF 22 02 F6 | 	mov	local03, result3
0b738     A7 FA 61 FC | 	wrlong	result1, fp
0b73c     04 4E 05 F1 | 	add	fp, #4
0b740     A7 FC 61 FC | 	wrlong	result2, fp
0b744     04 4E 05 F1 | 	add	fp, #4
0b748     A7 22 62 FC | 	wrlong	local03, fp
0b74c                 | ' 
0b74c                 | ' t2=pop()
0b74c                 | ' t1=pop()
0b74c                 | ' 
0b74c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
0b74c     08 4E 85 F1 | 	sub	fp, #8
0b750     1D 22 0E F2 | 	cmp	local03, #29 wz
0b754     14 4E 05 A1 |  if_e	add	fp, #20
0b758     A7 24 02 AB |  if_e	rdlong	local04, fp
0b75c     14 4E 85 A1 |  if_e	sub	fp, #20
0b760     12 23 02 A6 |  if_e	mov	local03, local04
0b764     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b768     5C 00 90 5D |  if_ne	jmp	#LR__0951
0b76c                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
0b76c     0C 4E 05 F1 | 	add	fp, #12
0b770     A7 1E 02 FB | 	rdlong	local01, fp
0b774     0C 4E 85 F1 | 	sub	fp, #12
0b778     A7 22 02 FB | 	rdlong	local03, fp
0b77c     11 1F 12 F2 | 	cmp	local01, local03 wc
0b780     1C 00 90 3D |  if_ae	jmp	#LR__0950
0b784     A7 1E 02 FB | 	rdlong	local01, fp
0b788     0C 4E 05 F1 | 	add	fp, #12
0b78c     A7 20 02 FB | 	rdlong	local02, fp
0b790     0C 4E 85 F1 | 	sub	fp, #12
0b794     10 1F 82 F1 | 	sub	local01, local02
0b798     A7 1E 62 FC | 	wrlong	local01, fp
0b79c     F4 02 90 FD | 	jmp	#LR__0960
0b7a0                 | LR__0950
0b7a0     A7 1E 02 FB | 	rdlong	local01, fp
0b7a4     0C 4E 05 F1 | 	add	fp, #12
0b7a8     A7 20 02 FB | 	rdlong	local02, fp
0b7ac     0C 4E 85 F1 | 	sub	fp, #12
0b7b0     10 1F 82 F1 | 	sub	local01, local02
0b7b4     A7 1E 62 FC | 	wrlong	local01, fp
0b7b8     08 4E 05 F1 | 	add	fp, #8
0b7bc     A7 38 68 FC | 	wrlong	#28, fp
0b7c0     08 4E 85 F1 | 	sub	fp, #8
0b7c4     CC 02 90 FD | 	jmp	#LR__0960
0b7c8                 | LR__0951
0b7c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
0b7c8     08 4E 05 F1 | 	add	fp, #8
0b7cc     A7 1E 02 FB | 	rdlong	local01, fp
0b7d0     08 4E 85 F1 | 	sub	fp, #8
0b7d4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0b7d8     14 4E 05 A1 |  if_e	add	fp, #20
0b7dc     A7 24 02 AB |  if_e	rdlong	local04, fp
0b7e0     14 4E 85 A1 |  if_e	sub	fp, #20
0b7e4     12 23 02 A6 |  if_e	mov	local03, local04
0b7e8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b7ec     28 00 90 5D |  if_ne	jmp	#LR__0952
0b7f0     A7 1E 02 FB | 	rdlong	local01, fp
0b7f4     0C 4E 05 F1 | 	add	fp, #12
0b7f8     A7 20 02 FB | 	rdlong	local02, fp
0b7fc     0C 4E 85 F1 | 	sub	fp, #12
0b800     10 1F 82 F1 | 	sub	local01, local02
0b804     A7 1E 62 FC | 	wrlong	local01, fp
0b808     08 4E 05 F1 | 	add	fp, #8
0b80c     A7 38 68 FC | 	wrlong	#28, fp
0b810     08 4E 85 F1 | 	sub	fp, #8
0b814     7C 02 90 FD | 	jmp	#LR__0960
0b818                 | LR__0952
0b818                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0b818     08 4E 05 F1 | 	add	fp, #8
0b81c     A7 1E 02 FB | 	rdlong	local01, fp
0b820     08 4E 85 F1 | 	sub	fp, #8
0b824     1D 1E 0E F2 | 	cmp	local01, #29 wz
0b828     14 4E 05 A1 |  if_e	add	fp, #20
0b82c     A7 24 02 AB |  if_e	rdlong	local04, fp
0b830     14 4E 85 A1 |  if_e	sub	fp, #20
0b834     12 23 02 A6 |  if_e	mov	local03, local04
0b838     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b83c     34 00 90 5D |  if_ne	jmp	#LR__0953
0b840     A7 12 02 FB | 	rdlong	arg01, fp
0b844     60 C6 B0 FD | 	call	#__system___float_fromuns
0b848     FD 12 02 F6 | 	mov	arg01, result1
0b84c     0C 4E 05 F1 | 	add	fp, #12
0b850     A7 14 02 FB | 	rdlong	arg02, fp
0b854     0C 4E 85 F1 | 	sub	fp, #12
0b858     1F 14 E6 F4 | 	bitnot	arg02, #31
0b85c     7C C6 B0 FD | 	call	#__system___float_add
0b860     A7 FA 61 FC | 	wrlong	result1, fp
0b864     08 4E 05 F1 | 	add	fp, #8
0b868     A7 3C 68 FC | 	wrlong	#30, fp
0b86c     08 4E 85 F1 | 	sub	fp, #8
0b870     20 02 90 FD | 	jmp	#LR__0960
0b874                 | LR__0953
0b874                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
0b874     08 4E 05 F1 | 	add	fp, #8
0b878     A7 1E 02 FB | 	rdlong	local01, fp
0b87c     08 4E 85 F1 | 	sub	fp, #8
0b880     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b884     14 4E 05 A1 |  if_e	add	fp, #20
0b888     A7 24 02 AB |  if_e	rdlong	local04, fp
0b88c     14 4E 85 A1 |  if_e	sub	fp, #20
0b890     12 23 02 A6 |  if_e	mov	local03, local04
0b894     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b898     1C 00 90 5D |  if_ne	jmp	#LR__0954
0b89c     A7 1E 02 FB | 	rdlong	local01, fp
0b8a0     0C 4E 05 F1 | 	add	fp, #12
0b8a4     A7 20 02 FB | 	rdlong	local02, fp
0b8a8     0C 4E 85 F1 | 	sub	fp, #12
0b8ac     10 1F 82 F1 | 	sub	local01, local02
0b8b0     A7 1E 62 FC | 	wrlong	local01, fp
0b8b4     DC 01 90 FD | 	jmp	#LR__0960
0b8b8                 | LR__0954
0b8b8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
0b8b8     08 4E 05 F1 | 	add	fp, #8
0b8bc     A7 1E 02 FB | 	rdlong	local01, fp
0b8c0     08 4E 85 F1 | 	sub	fp, #8
0b8c4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b8c8     14 4E 05 A1 |  if_e	add	fp, #20
0b8cc     A7 24 02 AB |  if_e	rdlong	local04, fp
0b8d0     14 4E 85 A1 |  if_e	sub	fp, #20
0b8d4     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0b8d8     1C 00 90 5D |  if_ne	jmp	#LR__0955
0b8dc     A7 1E 02 FB | 	rdlong	local01, fp
0b8e0     0C 4E 05 F1 | 	add	fp, #12
0b8e4     A7 20 02 FB | 	rdlong	local02, fp
0b8e8     0C 4E 85 F1 | 	sub	fp, #12
0b8ec     10 1F 82 F1 | 	sub	local01, local02
0b8f0     A7 1E 62 FC | 	wrlong	local01, fp
0b8f4     9C 01 90 FD | 	jmp	#LR__0960
0b8f8                 | LR__0955
0b8f8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0b8f8     08 4E 05 F1 | 	add	fp, #8
0b8fc     A7 1E 02 FB | 	rdlong	local01, fp
0b900     08 4E 85 F1 | 	sub	fp, #8
0b904     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b908     14 4E 05 A1 |  if_e	add	fp, #20
0b90c     A7 22 02 AB |  if_e	rdlong	local03, fp
0b910     14 4E 85 A1 |  if_e	sub	fp, #20
0b914     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b918     44 00 90 5D |  if_ne	jmp	#LR__0956
0b91c     A7 12 02 FB | 	rdlong	arg01, fp
0b920     09 13 52 F6 | 	abs	arg01, arg01 wc
0b924     1F 26 C6 C9 |  if_b	decod	local05, #31
0b928     00 26 06 36 |  if_ae	mov	local05, #0
0b92c     78 C5 B0 FD | 	call	#__system___float_fromuns
0b930     13 FB 61 F5 | 	xor	result1, local05
0b934     FD 12 02 F6 | 	mov	arg01, result1
0b938     0C 4E 05 F1 | 	add	fp, #12
0b93c     A7 14 02 FB | 	rdlong	arg02, fp
0b940     0C 4E 85 F1 | 	sub	fp, #12
0b944     1F 14 E6 F4 | 	bitnot	arg02, #31
0b948     90 C5 B0 FD | 	call	#__system___float_add
0b94c     A7 FA 61 FC | 	wrlong	result1, fp
0b950     08 4E 05 F1 | 	add	fp, #8
0b954     A7 3C 68 FC | 	wrlong	#30, fp
0b958     08 4E 85 F1 | 	sub	fp, #8
0b95c     34 01 90 FD | 	jmp	#LR__0960
0b960                 | LR__0956
0b960                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
0b960     08 4E 05 F1 | 	add	fp, #8
0b964     A7 1E 02 FB | 	rdlong	local01, fp
0b968     08 4E 85 F1 | 	sub	fp, #8
0b96c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b970     14 4E 05 A1 |  if_e	add	fp, #20
0b974     A7 22 02 AB |  if_e	rdlong	local03, fp
0b978     14 4E 85 A1 |  if_e	sub	fp, #20
0b97c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b980     2C 00 90 5D |  if_ne	jmp	#LR__0957
0b984     A7 1E 02 FB | 	rdlong	local01, fp
0b988     0C 4E 05 F1 | 	add	fp, #12
0b98c     A7 12 02 FB | 	rdlong	arg01, fp
0b990     0C 4E 85 F1 | 	sub	fp, #12
0b994     10 C5 B0 FD | 	call	#__system___float_fromuns
0b998     FD 14 02 F6 | 	mov	arg02, result1
0b99c     0F 13 02 F6 | 	mov	arg01, local01
0b9a0     1F 14 E6 F4 | 	bitnot	arg02, #31
0b9a4     34 C5 B0 FD | 	call	#__system___float_add
0b9a8     A7 FA 61 FC | 	wrlong	result1, fp
0b9ac     E4 00 90 FD | 	jmp	#LR__0960
0b9b0                 | LR__0957
0b9b0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
0b9b0     08 4E 05 F1 | 	add	fp, #8
0b9b4     A7 1E 02 FB | 	rdlong	local01, fp
0b9b8     08 4E 85 F1 | 	sub	fp, #8
0b9bc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b9c0     14 4E 05 A1 |  if_e	add	fp, #20
0b9c4     A7 22 02 AB |  if_e	rdlong	local03, fp
0b9c8     14 4E 85 A1 |  if_e	sub	fp, #20
0b9cc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b9d0     3C 00 90 5D |  if_ne	jmp	#LR__0958
0b9d4     A7 1E 02 FB | 	rdlong	local01, fp
0b9d8     0C 4E 05 F1 | 	add	fp, #12
0b9dc     A7 12 02 FB | 	rdlong	arg01, fp
0b9e0     0C 4E 85 F1 | 	sub	fp, #12
0b9e4     09 13 52 F6 | 	abs	arg01, arg01 wc
0b9e8     1F 26 C6 C9 |  if_b	decod	local05, #31
0b9ec     00 26 06 36 |  if_ae	mov	local05, #0
0b9f0     B4 C4 B0 FD | 	call	#__system___float_fromuns
0b9f4     13 FB 61 F5 | 	xor	result1, local05
0b9f8     FD 14 02 F6 | 	mov	arg02, result1
0b9fc     0F 13 02 F6 | 	mov	arg01, local01
0ba00     1F 14 E6 F4 | 	bitnot	arg02, #31
0ba04     D4 C4 B0 FD | 	call	#__system___float_add
0ba08     A7 FA 61 FC | 	wrlong	result1, fp
0ba0c     84 00 90 FD | 	jmp	#LR__0960
0ba10                 | LR__0958
0ba10                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
0ba10     08 4E 05 F1 | 	add	fp, #8
0ba14     A7 1E 02 FB | 	rdlong	local01, fp
0ba18     08 4E 85 F1 | 	sub	fp, #8
0ba1c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ba20     14 4E 05 A1 |  if_e	add	fp, #20
0ba24     A7 22 02 AB |  if_e	rdlong	local03, fp
0ba28     14 4E 85 A1 |  if_e	sub	fp, #20
0ba2c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ba30     20 00 90 5D |  if_ne	jmp	#LR__0959
0ba34     A7 12 02 FB | 	rdlong	arg01, fp
0ba38     0C 4E 05 F1 | 	add	fp, #12
0ba3c     A7 14 02 FB | 	rdlong	arg02, fp
0ba40     0C 4E 85 F1 | 	sub	fp, #12
0ba44     1F 14 E6 F4 | 	bitnot	arg02, #31
0ba48     90 C4 B0 FD | 	call	#__system___float_add
0ba4c     A7 FA 61 FC | 	wrlong	result1, fp
0ba50     40 00 90 FD | 	jmp	#LR__0960
0ba54                 | LR__0959
0ba54                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
0ba54     08 4E 05 F1 | 	add	fp, #8
0ba58     A7 1E 02 FB | 	rdlong	local01, fp
0ba5c     08 4E 85 F1 | 	sub	fp, #8
0ba60     1F 1E 0E F2 | 	cmp	local01, #31 wz
0ba64     14 4E 05 51 |  if_ne	add	fp, #20
0ba68     A7 22 02 5B |  if_ne	rdlong	local03, fp
0ba6c     14 4E 85 51 |  if_ne	sub	fp, #20
0ba70     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0ba74     A7 06 68 AC |  if_e	wrlong	#3, fp
0ba78     08 4E 05 A1 |  if_e	add	fp, #8
0ba7c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0ba80     08 4E 85 A1 |  if_e	sub	fp, #8
0ba84     A7 0A 68 5C |  if_ne	wrlong	#5, fp
0ba88     08 4E 05 51 |  if_ne	add	fp, #8
0ba8c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0ba90     08 4E 85 51 |  if_ne	sub	fp, #8
0ba94                 | LR__0960
0ba94     A7 12 02 F6 | 	mov	arg01, fp
0ba98     70 CF BF FD | 	call	#_push
0ba9c     A7 F0 03 F6 | 	mov	ptra, fp
0baa0     B2 00 A0 FD | 	call	#popregs_
0baa4                 | _do_minus_ret
0baa4     2D 00 64 FD | 	ret
0baa8                 | 
0baa8                 | ' 
0baa8                 | ' sub do_and 
0baa8                 | _do_and
0baa8     03 4A 05 F6 | 	mov	COUNT_, #3
0baac     A8 00 A0 FD | 	call	#pushregs_
0bab0     18 F0 07 F1 | 	add	ptra, #24
0bab4     BC CE BF FD | 	call	#_pop
0bab8     FD 12 02 F6 | 	mov	arg01, result1
0babc     FE 1E 02 F6 | 	mov	local01, result2
0bac0     FF 20 02 F6 | 	mov	local02, result3
0bac4     0C 4E 05 F1 | 	add	fp, #12
0bac8     A7 12 62 FC | 	wrlong	arg01, fp
0bacc     04 4E 05 F1 | 	add	fp, #4
0bad0     A7 1E 62 FC | 	wrlong	local01, fp
0bad4     04 4E 05 F1 | 	add	fp, #4
0bad8     A7 20 62 FC | 	wrlong	local02, fp
0badc     14 4E 85 F1 | 	sub	fp, #20
0bae0     90 CE BF FD | 	call	#_pop
0bae4     FF 22 02 F6 | 	mov	local03, result3
0bae8     A7 FA 61 FC | 	wrlong	result1, fp
0baec     04 4E 05 F1 | 	add	fp, #4
0baf0     A7 FC 61 FC | 	wrlong	result2, fp
0baf4     04 4E 05 F1 | 	add	fp, #4
0baf8     A7 22 62 FC | 	wrlong	local03, fp
0bafc                 | ' 
0bafc                 | ' t2=pop()
0bafc                 | ' t1=pop()
0bafc                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0bafc     08 4E 85 F1 | 	sub	fp, #8
0bb00     1C 22 0E F2 | 	cmp	local03, #28 wz
0bb04     A7 22 02 AB |  if_e	rdlong	local03, fp
0bb08     A7 22 62 AC |  if_e	wrlong	local03, fp
0bb0c     08 4E 05 A1 |  if_e	add	fp, #8
0bb10     A7 3A 68 AC |  if_e	wrlong	#29, fp
0bb14     08 4E 85 A1 |  if_e	sub	fp, #8
0bb18                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0bb18     14 4E 05 F1 | 	add	fp, #20
0bb1c     A7 22 02 FB | 	rdlong	local03, fp
0bb20     14 4E 85 F1 | 	sub	fp, #20
0bb24     1C 22 0E F2 | 	cmp	local03, #28 wz
0bb28     18 00 90 5D |  if_ne	jmp	#LR__0970
0bb2c     0C 4E 05 F1 | 	add	fp, #12
0bb30     A7 22 02 FB | 	rdlong	local03, fp
0bb34     A7 22 62 FC | 	wrlong	local03, fp
0bb38     08 4E 05 F1 | 	add	fp, #8
0bb3c     A7 3A 68 FC | 	wrlong	#29, fp
0bb40     14 4E 85 F1 | 	sub	fp, #20
0bb44                 | LR__0970
0bb44                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
0bb44     08 4E 05 F1 | 	add	fp, #8
0bb48     A7 22 02 FB | 	rdlong	local03, fp
0bb4c     08 4E 85 F1 | 	sub	fp, #8
0bb50     1F 22 0E F2 | 	cmp	local03, #31 wz
0bb54     14 4E 05 51 |  if_ne	add	fp, #20
0bb58     A7 20 02 5B |  if_ne	rdlong	local02, fp
0bb5c     14 4E 85 51 |  if_ne	sub	fp, #20
0bb60     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0bb64     08 4E 05 51 |  if_ne	add	fp, #8
0bb68     A7 22 02 5B |  if_ne	rdlong	local03, fp
0bb6c     08 4E 85 51 |  if_ne	sub	fp, #8
0bb70     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0bb74     14 4E 05 51 |  if_ne	add	fp, #20
0bb78     14 4E 85 51 |  if_ne	sub	fp, #20
0bb7c     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0bb80     A7 0C 68 AC |  if_e	wrlong	#6, fp
0bb84     08 4E 05 A1 |  if_e	add	fp, #8
0bb88     A7 FE 69 AC |  if_e	wrlong	#255, fp
0bb8c     08 4E 85 A1 |  if_e	sub	fp, #8
0bb90     18 00 90 AD |  if_e	jmp	#LR__0971
0bb94     A7 22 02 FB | 	rdlong	local03, fp
0bb98     0C 4E 05 F1 | 	add	fp, #12
0bb9c     A7 1E 02 FB | 	rdlong	local01, fp
0bba0     0C 4E 85 F1 | 	sub	fp, #12
0bba4     0F 23 02 F5 | 	and	local03, local01
0bba8     A7 22 62 FC | 	wrlong	local03, fp
0bbac                 | LR__0971
0bbac     A7 12 02 F6 | 	mov	arg01, fp
0bbb0     58 CE BF FD | 	call	#_push
0bbb4     A7 F0 03 F6 | 	mov	ptra, fp
0bbb8     B2 00 A0 FD | 	call	#popregs_
0bbbc                 | _do_and_ret
0bbbc     2D 00 64 FD | 	ret
0bbc0                 | 
0bbc0                 | ' 
0bbc0                 | ' sub do_or 
0bbc0                 | _do_or
0bbc0     03 4A 05 F6 | 	mov	COUNT_, #3
0bbc4     A8 00 A0 FD | 	call	#pushregs_
0bbc8     18 F0 07 F1 | 	add	ptra, #24
0bbcc     A4 CD BF FD | 	call	#_pop
0bbd0     FD 12 02 F6 | 	mov	arg01, result1
0bbd4     FE 1E 02 F6 | 	mov	local01, result2
0bbd8     FF 20 02 F6 | 	mov	local02, result3
0bbdc     0C 4E 05 F1 | 	add	fp, #12
0bbe0     A7 12 62 FC | 	wrlong	arg01, fp
0bbe4     04 4E 05 F1 | 	add	fp, #4
0bbe8     A7 1E 62 FC | 	wrlong	local01, fp
0bbec     04 4E 05 F1 | 	add	fp, #4
0bbf0     A7 20 62 FC | 	wrlong	local02, fp
0bbf4     14 4E 85 F1 | 	sub	fp, #20
0bbf8     78 CD BF FD | 	call	#_pop
0bbfc     FF 22 02 F6 | 	mov	local03, result3
0bc00     A7 FA 61 FC | 	wrlong	result1, fp
0bc04     04 4E 05 F1 | 	add	fp, #4
0bc08     A7 FC 61 FC | 	wrlong	result2, fp
0bc0c     04 4E 05 F1 | 	add	fp, #4
0bc10     A7 22 62 FC | 	wrlong	local03, fp
0bc14                 | ' 
0bc14                 | ' t2=pop()
0bc14                 | ' t1=pop()
0bc14                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0bc14     08 4E 85 F1 | 	sub	fp, #8
0bc18     1C 22 0E F2 | 	cmp	local03, #28 wz
0bc1c     A7 22 02 AB |  if_e	rdlong	local03, fp
0bc20     A7 22 62 AC |  if_e	wrlong	local03, fp
0bc24     08 4E 05 A1 |  if_e	add	fp, #8
0bc28     A7 3A 68 AC |  if_e	wrlong	#29, fp
0bc2c     08 4E 85 A1 |  if_e	sub	fp, #8
0bc30                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0bc30     14 4E 05 F1 | 	add	fp, #20
0bc34     A7 22 02 FB | 	rdlong	local03, fp
0bc38     14 4E 85 F1 | 	sub	fp, #20
0bc3c     1C 22 0E F2 | 	cmp	local03, #28 wz
0bc40     18 00 90 5D |  if_ne	jmp	#LR__0980
0bc44     0C 4E 05 F1 | 	add	fp, #12
0bc48     A7 22 02 FB | 	rdlong	local03, fp
0bc4c     A7 22 62 FC | 	wrlong	local03, fp
0bc50     08 4E 05 F1 | 	add	fp, #8
0bc54     A7 3A 68 FC | 	wrlong	#29, fp
0bc58     14 4E 85 F1 | 	sub	fp, #20
0bc5c                 | LR__0980
0bc5c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
0bc5c     08 4E 05 F1 | 	add	fp, #8
0bc60     A7 22 02 FB | 	rdlong	local03, fp
0bc64     08 4E 85 F1 | 	sub	fp, #8
0bc68     1F 22 0E F2 | 	cmp	local03, #31 wz
0bc6c     14 4E 05 51 |  if_ne	add	fp, #20
0bc70     A7 20 02 5B |  if_ne	rdlong	local02, fp
0bc74     14 4E 85 51 |  if_ne	sub	fp, #20
0bc78     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0bc7c     08 4E 05 51 |  if_ne	add	fp, #8
0bc80     A7 22 02 5B |  if_ne	rdlong	local03, fp
0bc84     08 4E 85 51 |  if_ne	sub	fp, #8
0bc88     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0bc8c     14 4E 05 51 |  if_ne	add	fp, #20
0bc90     14 4E 85 51 |  if_ne	sub	fp, #20
0bc94     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0bc98     A7 0C 68 AC |  if_e	wrlong	#6, fp
0bc9c     08 4E 05 A1 |  if_e	add	fp, #8
0bca0     A7 FE 69 AC |  if_e	wrlong	#255, fp
0bca4     08 4E 85 A1 |  if_e	sub	fp, #8
0bca8     18 00 90 AD |  if_e	jmp	#LR__0981
0bcac     A7 22 02 FB | 	rdlong	local03, fp
0bcb0     0C 4E 05 F1 | 	add	fp, #12
0bcb4     A7 1E 02 FB | 	rdlong	local01, fp
0bcb8     0C 4E 85 F1 | 	sub	fp, #12
0bcbc     0F 23 42 F5 | 	or	local03, local01
0bcc0     A7 22 62 FC | 	wrlong	local03, fp
0bcc4                 | LR__0981
0bcc4     A7 12 02 F6 | 	mov	arg01, fp
0bcc8     40 CD BF FD | 	call	#_push
0bccc     A7 F0 03 F6 | 	mov	ptra, fp
0bcd0     B2 00 A0 FD | 	call	#popregs_
0bcd4                 | _do_or_ret
0bcd4     2D 00 64 FD | 	ret
0bcd8                 | 
0bcd8                 | ' 
0bcd8                 | ' sub do_mul
0bcd8                 | _do_mul
0bcd8     05 4A 05 F6 | 	mov	COUNT_, #5
0bcdc     A8 00 A0 FD | 	call	#pushregs_
0bce0     18 F0 07 F1 | 	add	ptra, #24
0bce4     8C CC BF FD | 	call	#_pop
0bce8     FD 1E 02 F6 | 	mov	local01, result1
0bcec     FE 20 02 F6 | 	mov	local02, result2
0bcf0     FF 22 02 F6 | 	mov	local03, result3
0bcf4     0C 4E 05 F1 | 	add	fp, #12
0bcf8     A7 1E 62 FC | 	wrlong	local01, fp
0bcfc     04 4E 05 F1 | 	add	fp, #4
0bd00     A7 20 62 FC | 	wrlong	local02, fp
0bd04     04 4E 05 F1 | 	add	fp, #4
0bd08     A7 22 62 FC | 	wrlong	local03, fp
0bd0c     14 4E 85 F1 | 	sub	fp, #20
0bd10     60 CC BF FD | 	call	#_pop
0bd14     FF 22 02 F6 | 	mov	local03, result3
0bd18     A7 FA 61 FC | 	wrlong	result1, fp
0bd1c     04 4E 05 F1 | 	add	fp, #4
0bd20     A7 FC 61 FC | 	wrlong	result2, fp
0bd24     04 4E 05 F1 | 	add	fp, #4
0bd28     A7 22 62 FC | 	wrlong	local03, fp
0bd2c                 | ' 
0bd2c                 | ' t2=pop()
0bd2c                 | ' t1=pop()
0bd2c                 | ' 
0bd2c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
0bd2c     08 4E 85 F1 | 	sub	fp, #8
0bd30     1D 22 0E F2 | 	cmp	local03, #29 wz
0bd34     14 4E 05 A1 |  if_e	add	fp, #20
0bd38     A7 24 02 AB |  if_e	rdlong	local04, fp
0bd3c     14 4E 85 A1 |  if_e	sub	fp, #20
0bd40     12 23 02 A6 |  if_e	mov	local03, local04
0bd44     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0bd48     20 00 90 5D |  if_ne	jmp	#LR__0990
0bd4c     A7 20 02 FB | 	rdlong	local02, fp
0bd50     0C 4E 05 F1 | 	add	fp, #12
0bd54     A7 22 02 FB | 	rdlong	local03, fp
0bd58     11 21 02 FD | 	qmul	local02, local03
0bd5c     0C 4E 85 F1 | 	sub	fp, #12
0bd60     18 1E 62 FD | 	getqx	local01
0bd64     A7 1E 62 FC | 	wrlong	local01, fp
0bd68     C4 02 90 FD | 	jmp	#LR__0999
0bd6c                 | LR__0990
0bd6c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
0bd6c     08 4E 05 F1 | 	add	fp, #8
0bd70     A7 1E 02 FB | 	rdlong	local01, fp
0bd74     08 4E 85 F1 | 	sub	fp, #8
0bd78     1D 1E 0E F2 | 	cmp	local01, #29 wz
0bd7c     14 4E 05 A1 |  if_e	add	fp, #20
0bd80     A7 24 02 AB |  if_e	rdlong	local04, fp
0bd84     14 4E 85 A1 |  if_e	sub	fp, #20
0bd88     12 23 02 A6 |  if_e	mov	local03, local04
0bd8c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0bd90     2C 00 90 5D |  if_ne	jmp	#LR__0991
0bd94     A7 20 02 FB | 	rdlong	local02, fp
0bd98     0C 4E 05 F1 | 	add	fp, #12
0bd9c     A7 22 02 FB | 	rdlong	local03, fp
0bda0     11 21 02 FD | 	qmul	local02, local03
0bda4     0C 4E 85 F1 | 	sub	fp, #12
0bda8     18 1E 62 FD | 	getqx	local01
0bdac     A7 1E 62 FC | 	wrlong	local01, fp
0bdb0     08 4E 05 F1 | 	add	fp, #8
0bdb4     A7 38 68 FC | 	wrlong	#28, fp
0bdb8     08 4E 85 F1 | 	sub	fp, #8
0bdbc     70 02 90 FD | 	jmp	#LR__0999
0bdc0                 | LR__0991
0bdc0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0bdc0     08 4E 05 F1 | 	add	fp, #8
0bdc4     A7 1E 02 FB | 	rdlong	local01, fp
0bdc8     08 4E 85 F1 | 	sub	fp, #8
0bdcc     1D 1E 0E F2 | 	cmp	local01, #29 wz
0bdd0     14 4E 05 A1 |  if_e	add	fp, #20
0bdd4     A7 24 02 AB |  if_e	rdlong	local04, fp
0bdd8     14 4E 85 A1 |  if_e	sub	fp, #20
0bddc     12 23 02 A6 |  if_e	mov	local03, local04
0bde0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0bde4     30 00 90 5D |  if_ne	jmp	#LR__0992
0bde8     A7 12 02 FB | 	rdlong	arg01, fp
0bdec     B8 C0 B0 FD | 	call	#__system___float_fromuns
0bdf0     FD 12 02 F6 | 	mov	arg01, result1
0bdf4     0C 4E 05 F1 | 	add	fp, #12
0bdf8     A7 14 02 FB | 	rdlong	arg02, fp
0bdfc     0C 4E 85 F1 | 	sub	fp, #12
0be00     D0 C3 B0 FD | 	call	#__system___float_mul
0be04     A7 FA 61 FC | 	wrlong	result1, fp
0be08     08 4E 05 F1 | 	add	fp, #8
0be0c     A7 3C 68 FC | 	wrlong	#30, fp
0be10     08 4E 85 F1 | 	sub	fp, #8
0be14     18 02 90 FD | 	jmp	#LR__0999
0be18                 | LR__0992
0be18                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
0be18     08 4E 05 F1 | 	add	fp, #8
0be1c     A7 1E 02 FB | 	rdlong	local01, fp
0be20     08 4E 85 F1 | 	sub	fp, #8
0be24     1C 1E 0E F2 | 	cmp	local01, #28 wz
0be28     14 4E 05 A1 |  if_e	add	fp, #20
0be2c     A7 24 02 AB |  if_e	rdlong	local04, fp
0be30     14 4E 85 A1 |  if_e	sub	fp, #20
0be34     12 23 02 A6 |  if_e	mov	local03, local04
0be38     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0be3c     20 00 90 5D |  if_ne	jmp	#LR__0993
0be40     A7 20 02 FB | 	rdlong	local02, fp
0be44     0C 4E 05 F1 | 	add	fp, #12
0be48     A7 22 02 FB | 	rdlong	local03, fp
0be4c     11 21 02 FD | 	qmul	local02, local03
0be50     0C 4E 85 F1 | 	sub	fp, #12
0be54     18 1E 62 FD | 	getqx	local01
0be58     A7 1E 62 FC | 	wrlong	local01, fp
0be5c     D0 01 90 FD | 	jmp	#LR__0999
0be60                 | LR__0993
0be60                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
0be60     08 4E 05 F1 | 	add	fp, #8
0be64     A7 1E 02 FB | 	rdlong	local01, fp
0be68     08 4E 85 F1 | 	sub	fp, #8
0be6c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0be70     14 4E 05 A1 |  if_e	add	fp, #20
0be74     A7 24 02 AB |  if_e	rdlong	local04, fp
0be78     14 4E 85 A1 |  if_e	sub	fp, #20
0be7c     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0be80     20 00 90 5D |  if_ne	jmp	#LR__0994
0be84     A7 20 02 FB | 	rdlong	local02, fp
0be88     0C 4E 05 F1 | 	add	fp, #12
0be8c     A7 22 02 FB | 	rdlong	local03, fp
0be90     11 21 02 FD | 	qmul	local02, local03
0be94     0C 4E 85 F1 | 	sub	fp, #12
0be98     18 1E 62 FD | 	getqx	local01
0be9c     A7 1E 62 FC | 	wrlong	local01, fp
0bea0     8C 01 90 FD | 	jmp	#LR__0999
0bea4                 | LR__0994
0bea4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0bea4     08 4E 05 F1 | 	add	fp, #8
0bea8     A7 1E 02 FB | 	rdlong	local01, fp
0beac     08 4E 85 F1 | 	sub	fp, #8
0beb0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0beb4     14 4E 05 A1 |  if_e	add	fp, #20
0beb8     A7 22 02 AB |  if_e	rdlong	local03, fp
0bebc     14 4E 85 A1 |  if_e	sub	fp, #20
0bec0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0bec4     40 00 90 5D |  if_ne	jmp	#LR__0995
0bec8     A7 12 02 FB | 	rdlong	arg01, fp
0becc     09 13 52 F6 | 	abs	arg01, arg01 wc
0bed0     1F 26 C6 C9 |  if_b	decod	local05, #31
0bed4     00 26 06 36 |  if_ae	mov	local05, #0
0bed8     CC BF B0 FD | 	call	#__system___float_fromuns
0bedc     13 FB 61 F5 | 	xor	result1, local05
0bee0     FD 12 02 F6 | 	mov	arg01, result1
0bee4     0C 4E 05 F1 | 	add	fp, #12
0bee8     A7 14 02 FB | 	rdlong	arg02, fp
0beec     0C 4E 85 F1 | 	sub	fp, #12
0bef0     E0 C2 B0 FD | 	call	#__system___float_mul
0bef4     A7 FA 61 FC | 	wrlong	result1, fp
0bef8     08 4E 05 F1 | 	add	fp, #8
0befc     A7 3C 68 FC | 	wrlong	#30, fp
0bf00     08 4E 85 F1 | 	sub	fp, #8
0bf04     28 01 90 FD | 	jmp	#LR__0999
0bf08                 | LR__0995
0bf08                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
0bf08     08 4E 05 F1 | 	add	fp, #8
0bf0c     A7 1E 02 FB | 	rdlong	local01, fp
0bf10     08 4E 85 F1 | 	sub	fp, #8
0bf14     1E 1E 0E F2 | 	cmp	local01, #30 wz
0bf18     14 4E 05 A1 |  if_e	add	fp, #20
0bf1c     A7 22 02 AB |  if_e	rdlong	local03, fp
0bf20     14 4E 85 A1 |  if_e	sub	fp, #20
0bf24     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0bf28     28 00 90 5D |  if_ne	jmp	#LR__0996
0bf2c     A7 1E 02 FB | 	rdlong	local01, fp
0bf30     0C 4E 05 F1 | 	add	fp, #12
0bf34     A7 12 02 FB | 	rdlong	arg01, fp
0bf38     0C 4E 85 F1 | 	sub	fp, #12
0bf3c     68 BF B0 FD | 	call	#__system___float_fromuns
0bf40     FD 14 02 F6 | 	mov	arg02, result1
0bf44     0F 13 02 F6 | 	mov	arg01, local01
0bf48     88 C2 B0 FD | 	call	#__system___float_mul
0bf4c     A7 FA 61 FC | 	wrlong	result1, fp
0bf50     DC 00 90 FD | 	jmp	#LR__0999
0bf54                 | LR__0996
0bf54                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
0bf54     08 4E 05 F1 | 	add	fp, #8
0bf58     A7 1E 02 FB | 	rdlong	local01, fp
0bf5c     08 4E 85 F1 | 	sub	fp, #8
0bf60     1E 1E 0E F2 | 	cmp	local01, #30 wz
0bf64     14 4E 05 A1 |  if_e	add	fp, #20
0bf68     A7 22 02 AB |  if_e	rdlong	local03, fp
0bf6c     14 4E 85 A1 |  if_e	sub	fp, #20
0bf70     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0bf74     38 00 90 5D |  if_ne	jmp	#LR__0997
0bf78     A7 1E 02 FB | 	rdlong	local01, fp
0bf7c     0C 4E 05 F1 | 	add	fp, #12
0bf80     A7 12 02 FB | 	rdlong	arg01, fp
0bf84     0C 4E 85 F1 | 	sub	fp, #12
0bf88     09 13 52 F6 | 	abs	arg01, arg01 wc
0bf8c     1F 26 C6 C9 |  if_b	decod	local05, #31
0bf90     00 26 06 36 |  if_ae	mov	local05, #0
0bf94     10 BF B0 FD | 	call	#__system___float_fromuns
0bf98     13 FB 61 F5 | 	xor	result1, local05
0bf9c     FD 14 02 F6 | 	mov	arg02, result1
0bfa0     0F 13 02 F6 | 	mov	arg01, local01
0bfa4     2C C2 B0 FD | 	call	#__system___float_mul
0bfa8     A7 FA 61 FC | 	wrlong	result1, fp
0bfac     80 00 90 FD | 	jmp	#LR__0999
0bfb0                 | LR__0997
0bfb0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
0bfb0     08 4E 05 F1 | 	add	fp, #8
0bfb4     A7 1E 02 FB | 	rdlong	local01, fp
0bfb8     08 4E 85 F1 | 	sub	fp, #8
0bfbc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0bfc0     14 4E 05 A1 |  if_e	add	fp, #20
0bfc4     A7 22 02 AB |  if_e	rdlong	local03, fp
0bfc8     14 4E 85 A1 |  if_e	sub	fp, #20
0bfcc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0bfd0     1C 00 90 5D |  if_ne	jmp	#LR__0998
0bfd4     A7 12 02 FB | 	rdlong	arg01, fp
0bfd8     0C 4E 05 F1 | 	add	fp, #12
0bfdc     A7 14 02 FB | 	rdlong	arg02, fp
0bfe0     0C 4E 85 F1 | 	sub	fp, #12
0bfe4     EC C1 B0 FD | 	call	#__system___float_mul
0bfe8     A7 FA 61 FC | 	wrlong	result1, fp
0bfec     40 00 90 FD | 	jmp	#LR__0999
0bff0                 | LR__0998
0bff0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
0bff0     08 4E 05 F1 | 	add	fp, #8
0bff4     A7 1E 02 FB | 	rdlong	local01, fp
0bff8     08 4E 85 F1 | 	sub	fp, #8
0bffc     1F 1E 0E F2 | 	cmp	local01, #31 wz
0c000     14 4E 05 51 |  if_ne	add	fp, #20
0c004     A7 22 02 5B |  if_ne	rdlong	local03, fp
0c008     14 4E 85 51 |  if_ne	sub	fp, #20
0c00c     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0c010     A7 10 68 AC |  if_e	wrlong	#8, fp
0c014     08 4E 05 A1 |  if_e	add	fp, #8
0c018     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c01c     08 4E 85 A1 |  if_e	sub	fp, #8
0c020     A7 12 68 5C |  if_ne	wrlong	#9, fp
0c024     08 4E 05 51 |  if_ne	add	fp, #8
0c028     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0c02c     08 4E 85 51 |  if_ne	sub	fp, #8
0c030                 | LR__0999
0c030     A7 12 02 F6 | 	mov	arg01, fp
0c034     D4 C9 BF FD | 	call	#_push
0c038     A7 F0 03 F6 | 	mov	ptra, fp
0c03c     B2 00 A0 FD | 	call	#popregs_
0c040                 | _do_mul_ret
0c040     2D 00 64 FD | 	ret
0c044                 | 
0c044                 | ' 
0c044                 | ' sub do_div 
0c044                 | _do_div
0c044     01 4A 05 F6 | 	mov	COUNT_, #1
0c048     A8 00 A0 FD | 	call	#pushregs_
0c04c     18 F0 07 F1 | 	add	ptra, #24
0c050     20 C9 BF FD | 	call	#_pop
0c054     FD 60 02 F6 | 	mov	muldivb_, result1
0c058     FE 5E 02 F6 | 	mov	muldiva_, result2
0c05c     FF 1E 02 F6 | 	mov	local01, result3
0c060     0C 4E 05 F1 | 	add	fp, #12
0c064     A7 60 62 FC | 	wrlong	muldivb_, fp
0c068     04 4E 05 F1 | 	add	fp, #4
0c06c     A7 5E 62 FC | 	wrlong	muldiva_, fp
0c070     04 4E 05 F1 | 	add	fp, #4
0c074     A7 1E 62 FC | 	wrlong	local01, fp
0c078     14 4E 85 F1 | 	sub	fp, #20
0c07c     F4 C8 BF FD | 	call	#_pop
0c080     A7 FA 61 FC | 	wrlong	result1, fp
0c084     04 4E 05 F1 | 	add	fp, #4
0c088     A7 FC 61 FC | 	wrlong	result2, fp
0c08c     04 4E 05 F1 | 	add	fp, #4
0c090     A7 FE 61 FC | 	wrlong	result3, fp
0c094                 | ' 
0c094                 | ' t2=pop()
0c094                 | ' t1=pop()
0c094                 | ' 
0c094                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
0c094     08 4E 85 F1 | 	sub	fp, #8
0c098     1F FE 0D F2 | 	cmp	result3, #31 wz
0c09c     14 4E 05 51 |  if_ne	add	fp, #20
0c0a0     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0c0a4     14 4E 85 51 |  if_ne	sub	fp, #20
0c0a8     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0c0ac     A7 14 68 AC |  if_e	wrlong	#10, fp
0c0b0     08 4E 05 A1 |  if_e	add	fp, #8
0c0b4     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c0b8     08 4E 85 A1 |  if_e	sub	fp, #8
0c0bc     90 01 90 AD |  if_e	jmp	#LR__1006
0c0c0                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0c0c0     08 4E 05 F1 | 	add	fp, #8
0c0c4     A7 60 02 FB | 	rdlong	muldivb_, fp
0c0c8     08 4E 85 F1 | 	sub	fp, #8
0c0cc     1E 60 0E F2 | 	cmp	muldivb_, #30 wz
0c0d0     1C 00 90 5D |  if_ne	jmp	#LR__1000
0c0d4     08 4E 05 F1 | 	add	fp, #8
0c0d8     A7 38 68 FC | 	wrlong	#28, fp
0c0dc     08 4E 85 F1 | 	sub	fp, #8
0c0e0     A7 12 02 FB | 	rdlong	arg01, fp
0c0e4     00 14 06 F6 | 	mov	arg02, #0
0c0e8     B0 C5 B0 FD | 	call	#__system___float_tointeger
0c0ec     A7 FA 61 FC | 	wrlong	result1, fp
0c0f0                 | LR__1000
0c0f0                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0c0f0     14 4E 05 F1 | 	add	fp, #20
0c0f4     A7 60 02 FB | 	rdlong	muldivb_, fp
0c0f8     14 4E 85 F1 | 	sub	fp, #20
0c0fc     1E 60 0E F2 | 	cmp	muldivb_, #30 wz
0c100     28 00 90 5D |  if_ne	jmp	#LR__1001
0c104     14 4E 05 F1 | 	add	fp, #20
0c108     A7 38 68 FC | 	wrlong	#28, fp
0c10c     08 4E 85 F1 | 	sub	fp, #8
0c110     A7 12 02 FB | 	rdlong	arg01, fp
0c114     0C 4E 85 F1 | 	sub	fp, #12
0c118     00 14 06 F6 | 	mov	arg02, #0
0c11c     7C C5 B0 FD | 	call	#__system___float_tointeger
0c120     0C 4E 05 F1 | 	add	fp, #12
0c124     A7 FA 61 FC | 	wrlong	result1, fp
0c128     0C 4E 85 F1 | 	sub	fp, #12
0c12c                 | LR__1001
0c12c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
0c12c     08 4E 05 F1 | 	add	fp, #8
0c130     A7 60 02 FB | 	rdlong	muldivb_, fp
0c134     08 4E 85 F1 | 	sub	fp, #8
0c138     1D 60 0E F2 | 	cmp	muldivb_, #29 wz
0c13c     14 4E 05 A1 |  if_e	add	fp, #20
0c140     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c144     14 4E 85 A1 |  if_e	sub	fp, #20
0c148     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0c14c     20 00 90 5D |  if_ne	jmp	#LR__1002
0c150     0C 4E 05 F1 | 	add	fp, #12
0c154     A7 1E 02 FB | 	rdlong	local01, fp
0c158     0C 4E 85 F1 | 	sub	fp, #12
0c15c     A7 60 02 FB | 	rdlong	muldivb_, fp
0c160     0F 61 12 FD | 	qdiv	muldivb_, local01
0c164     18 1E 62 FD | 	getqx	local01
0c168     A7 1E 62 FC | 	wrlong	local01, fp
0c16c     E0 00 90 FD | 	jmp	#LR__1006
0c170                 | LR__1002
0c170                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
0c170     08 4E 05 F1 | 	add	fp, #8
0c174     A7 60 02 FB | 	rdlong	muldivb_, fp
0c178     08 4E 85 F1 | 	sub	fp, #8
0c17c     1D 60 0E F2 | 	cmp	muldivb_, #29 wz
0c180     14 4E 05 A1 |  if_e	add	fp, #20
0c184     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c188     14 4E 85 A1 |  if_e	sub	fp, #20
0c18c     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0c190     2C 00 90 5D |  if_ne	jmp	#LR__1003
0c194     0C 4E 05 F1 | 	add	fp, #12
0c198     A7 1E 02 FB | 	rdlong	local01, fp
0c19c     0C 4E 85 F1 | 	sub	fp, #12
0c1a0     A7 60 02 FB | 	rdlong	muldivb_, fp
0c1a4     0F 61 12 FD | 	qdiv	muldivb_, local01
0c1a8     18 1E 62 FD | 	getqx	local01
0c1ac     A7 1E 62 FC | 	wrlong	local01, fp
0c1b0     08 4E 05 F1 | 	add	fp, #8
0c1b4     A7 38 68 FC | 	wrlong	#28, fp
0c1b8     08 4E 85 F1 | 	sub	fp, #8
0c1bc     90 00 90 FD | 	jmp	#LR__1006
0c1c0                 | LR__1003
0c1c0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
0c1c0     08 4E 05 F1 | 	add	fp, #8
0c1c4     A7 60 02 FB | 	rdlong	muldivb_, fp
0c1c8     08 4E 85 F1 | 	sub	fp, #8
0c1cc     1C 60 0E F2 | 	cmp	muldivb_, #28 wz
0c1d0     14 4E 05 A1 |  if_e	add	fp, #20
0c1d4     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c1d8     14 4E 85 A1 |  if_e	sub	fp, #20
0c1dc     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0c1e0     1C 00 90 5D |  if_ne	jmp	#LR__1004
0c1e4     A7 5E 02 FB | 	rdlong	muldiva_, fp
0c1e8     0C 4E 05 F1 | 	add	fp, #12
0c1ec     A7 60 02 FB | 	rdlong	muldivb_, fp
0c1f0     0C 4E 85 F1 | 	sub	fp, #12
0c1f4     BA 00 A0 FD | 	call	#divide_
0c1f8     A7 60 62 FC | 	wrlong	muldivb_, fp
0c1fc     50 00 90 FD | 	jmp	#LR__1006
0c200                 | LR__1004
0c200                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
0c200     08 4E 05 F1 | 	add	fp, #8
0c204     A7 60 02 FB | 	rdlong	muldivb_, fp
0c208     08 4E 85 F1 | 	sub	fp, #8
0c20c     1C 60 0E F2 | 	cmp	muldivb_, #28 wz
0c210     14 4E 05 A1 |  if_e	add	fp, #20
0c214     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c218     14 4E 85 A1 |  if_e	sub	fp, #20
0c21c     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0c220     1C 00 90 5D |  if_ne	jmp	#LR__1005
0c224     A7 5E 02 FB | 	rdlong	muldiva_, fp
0c228     0C 4E 05 F1 | 	add	fp, #12
0c22c     A7 60 02 FB | 	rdlong	muldivb_, fp
0c230     0C 4E 85 F1 | 	sub	fp, #12
0c234     BA 00 A0 FD | 	call	#divide_
0c238     A7 60 62 FC | 	wrlong	muldivb_, fp
0c23c     10 00 90 FD | 	jmp	#LR__1006
0c240                 | LR__1005
0c240     A7 16 68 FC | 	wrlong	#11, fp
0c244     08 4E 05 F1 | 	add	fp, #8
0c248     A7 FE 69 FC | 	wrlong	#255, fp
0c24c     08 4E 85 F1 | 	sub	fp, #8
0c250                 | LR__1006
0c250     A7 12 02 F6 | 	mov	arg01, fp
0c254     B4 C7 BF FD | 	call	#_push
0c258     A7 F0 03 F6 | 	mov	ptra, fp
0c25c     B2 00 A0 FD | 	call	#popregs_
0c260                 | _do_div_ret
0c260     2D 00 64 FD | 	ret
0c264                 | 
0c264                 | ' 
0c264                 | ' sub do_fdiv 
0c264                 | _do_fdiv
0c264     02 4A 05 F6 | 	mov	COUNT_, #2
0c268     A8 00 A0 FD | 	call	#pushregs_
0c26c     18 F0 07 F1 | 	add	ptra, #24
0c270     00 C7 BF FD | 	call	#_pop
0c274     FD 14 02 F6 | 	mov	arg02, result1
0c278     FE 12 02 F6 | 	mov	arg01, result2
0c27c     FF 1E 02 F6 | 	mov	local01, result3
0c280     0C 4E 05 F1 | 	add	fp, #12
0c284     A7 14 62 FC | 	wrlong	arg02, fp
0c288     04 4E 05 F1 | 	add	fp, #4
0c28c     A7 12 62 FC | 	wrlong	arg01, fp
0c290     04 4E 05 F1 | 	add	fp, #4
0c294     A7 1E 62 FC | 	wrlong	local01, fp
0c298     14 4E 85 F1 | 	sub	fp, #20
0c29c     D4 C6 BF FD | 	call	#_pop
0c2a0     A7 FA 61 FC | 	wrlong	result1, fp
0c2a4     04 4E 05 F1 | 	add	fp, #4
0c2a8     A7 FC 61 FC | 	wrlong	result2, fp
0c2ac     04 4E 05 F1 | 	add	fp, #4
0c2b0     A7 FE 61 FC | 	wrlong	result3, fp
0c2b4                 | ' 
0c2b4                 | ' t2=pop()
0c2b4                 | ' t1=pop()
0c2b4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
0c2b4     08 4E 85 F1 | 	sub	fp, #8
0c2b8     1F FE 0D F2 | 	cmp	result3, #31 wz
0c2bc     14 4E 05 51 |  if_ne	add	fp, #20
0c2c0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c2c4     14 4E 85 51 |  if_ne	sub	fp, #20
0c2c8     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0c2cc     A7 14 68 AC |  if_e	wrlong	#10, fp
0c2d0     08 4E 05 A1 |  if_e	add	fp, #8
0c2d4     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c2d8     08 4E 85 A1 |  if_e	sub	fp, #8
0c2dc     38 01 90 AD |  if_e	jmp	#LR__1015
0c2e0                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0c2e0     08 4E 05 F1 | 	add	fp, #8
0c2e4     A7 14 02 FB | 	rdlong	arg02, fp
0c2e8     08 4E 85 F1 | 	sub	fp, #8
0c2ec     1C 14 0E F2 | 	cmp	arg02, #28 wz
0c2f0     28 00 90 5D |  if_ne	jmp	#LR__1010
0c2f4     08 4E 05 F1 | 	add	fp, #8
0c2f8     A7 3C 68 FC | 	wrlong	#30, fp
0c2fc     08 4E 85 F1 | 	sub	fp, #8
0c300     A7 12 02 FB | 	rdlong	arg01, fp
0c304     09 13 52 F6 | 	abs	arg01, arg01 wc
0c308     1F 20 C6 C9 |  if_b	decod	local02, #31
0c30c     00 20 06 36 |  if_ae	mov	local02, #0
0c310     94 BB B0 FD | 	call	#__system___float_fromuns
0c314     10 FB 61 F5 | 	xor	result1, local02
0c318     A7 FA 61 FC | 	wrlong	result1, fp
0c31c                 | LR__1010
0c31c                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
0c31c     08 4E 05 F1 | 	add	fp, #8
0c320     A7 14 02 FB | 	rdlong	arg02, fp
0c324     08 4E 85 F1 | 	sub	fp, #8
0c328     1D 14 0E F2 | 	cmp	arg02, #29 wz
0c32c     18 00 90 5D |  if_ne	jmp	#LR__1011
0c330     08 4E 05 F1 | 	add	fp, #8
0c334     A7 3C 68 FC | 	wrlong	#30, fp
0c338     08 4E 85 F1 | 	sub	fp, #8
0c33c     A7 12 02 FB | 	rdlong	arg01, fp
0c340     64 BB B0 FD | 	call	#__system___float_fromuns
0c344     A7 FA 61 FC | 	wrlong	result1, fp
0c348                 | LR__1011
0c348                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0c348     14 4E 05 F1 | 	add	fp, #20
0c34c     A7 14 02 FB | 	rdlong	arg02, fp
0c350     14 4E 85 F1 | 	sub	fp, #20
0c354     1C 14 0E F2 | 	cmp	arg02, #28 wz
0c358     34 00 90 5D |  if_ne	jmp	#LR__1012
0c35c     14 4E 05 F1 | 	add	fp, #20
0c360     A7 3C 68 FC | 	wrlong	#30, fp
0c364     08 4E 85 F1 | 	sub	fp, #8
0c368     A7 12 02 FB | 	rdlong	arg01, fp
0c36c     0C 4E 85 F1 | 	sub	fp, #12
0c370     09 13 52 F6 | 	abs	arg01, arg01 wc
0c374     1F 20 C6 C9 |  if_b	decod	local02, #31
0c378     00 20 06 36 |  if_ae	mov	local02, #0
0c37c     28 BB B0 FD | 	call	#__system___float_fromuns
0c380     10 FB 61 F5 | 	xor	result1, local02
0c384     0C 4E 05 F1 | 	add	fp, #12
0c388     A7 FA 61 FC | 	wrlong	result1, fp
0c38c     0C 4E 85 F1 | 	sub	fp, #12
0c390                 | LR__1012
0c390                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0c390     14 4E 05 F1 | 	add	fp, #20
0c394     A7 14 02 FB | 	rdlong	arg02, fp
0c398     14 4E 85 F1 | 	sub	fp, #20
0c39c     1D 14 0E F2 | 	cmp	arg02, #29 wz
0c3a0     24 00 90 5D |  if_ne	jmp	#LR__1013
0c3a4     14 4E 05 F1 | 	add	fp, #20
0c3a8     A7 3C 68 FC | 	wrlong	#30, fp
0c3ac     08 4E 85 F1 | 	sub	fp, #8
0c3b0     A7 12 02 FB | 	rdlong	arg01, fp
0c3b4     0C 4E 85 F1 | 	sub	fp, #12
0c3b8     EC BA B0 FD | 	call	#__system___float_fromuns
0c3bc     0C 4E 05 F1 | 	add	fp, #12
0c3c0     A7 FA 61 FC | 	wrlong	result1, fp
0c3c4     0C 4E 85 F1 | 	sub	fp, #12
0c3c8                 | LR__1013
0c3c8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
0c3c8     08 4E 05 F1 | 	add	fp, #8
0c3cc     A7 14 02 FB | 	rdlong	arg02, fp
0c3d0     08 4E 85 F1 | 	sub	fp, #8
0c3d4     1E 14 0E F2 | 	cmp	arg02, #30 wz
0c3d8     14 4E 05 A1 |  if_e	add	fp, #20
0c3dc     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c3e0     14 4E 85 A1 |  if_e	sub	fp, #20
0c3e4     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0c3e8     1C 00 90 5D |  if_ne	jmp	#LR__1014
0c3ec     A7 12 02 FB | 	rdlong	arg01, fp
0c3f0     0C 4E 05 F1 | 	add	fp, #12
0c3f4     A7 14 02 FB | 	rdlong	arg02, fp
0c3f8     0C 4E 85 F1 | 	sub	fp, #12
0c3fc     D8 BF B0 FD | 	call	#__system___float_div
0c400     A7 FA 61 FC | 	wrlong	result1, fp
0c404     10 00 90 FD | 	jmp	#LR__1015
0c408                 | LR__1014
0c408     A7 16 68 FC | 	wrlong	#11, fp
0c40c     08 4E 05 F1 | 	add	fp, #8
0c410     A7 FE 69 FC | 	wrlong	#255, fp
0c414     08 4E 85 F1 | 	sub	fp, #8
0c418                 | LR__1015
0c418     A7 12 02 F6 | 	mov	arg01, fp
0c41c     EC C5 BF FD | 	call	#_push
0c420     A7 F0 03 F6 | 	mov	ptra, fp
0c424     B2 00 A0 FD | 	call	#popregs_
0c428                 | _do_fdiv_ret
0c428     2D 00 64 FD | 	ret
0c42c                 | 
0c42c                 | ' 
0c42c                 | ' 
0c42c                 | ' sub do_mod 
0c42c                 | _do_mod
0c42c     01 4A 05 F6 | 	mov	COUNT_, #1
0c430     A8 00 A0 FD | 	call	#pushregs_
0c434     18 F0 07 F1 | 	add	ptra, #24
0c438     38 C5 BF FD | 	call	#_pop
0c43c     FD 60 02 F6 | 	mov	muldivb_, result1
0c440     FE 5E 02 F6 | 	mov	muldiva_, result2
0c444     FF 1E 02 F6 | 	mov	local01, result3
0c448     0C 4E 05 F1 | 	add	fp, #12
0c44c     A7 60 62 FC | 	wrlong	muldivb_, fp
0c450     04 4E 05 F1 | 	add	fp, #4
0c454     A7 5E 62 FC | 	wrlong	muldiva_, fp
0c458     04 4E 05 F1 | 	add	fp, #4
0c45c     A7 1E 62 FC | 	wrlong	local01, fp
0c460     14 4E 85 F1 | 	sub	fp, #20
0c464     0C C5 BF FD | 	call	#_pop
0c468     A7 FA 61 FC | 	wrlong	result1, fp
0c46c     04 4E 05 F1 | 	add	fp, #4
0c470     A7 FC 61 FC | 	wrlong	result2, fp
0c474     04 4E 05 F1 | 	add	fp, #4
0c478     A7 FE 61 FC | 	wrlong	result3, fp
0c47c                 | ' 
0c47c                 | ' t2=pop()
0c47c                 | ' t1=pop()
0c47c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
0c47c     08 4E 85 F1 | 	sub	fp, #8
0c480     1F FE 0D F2 | 	cmp	result3, #31 wz
0c484     14 4E 05 51 |  if_ne	add	fp, #20
0c488     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0c48c     14 4E 85 51 |  if_ne	sub	fp, #20
0c490     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0c494     A7 14 68 AC |  if_e	wrlong	#10, fp
0c498     08 4E 05 A1 |  if_e	add	fp, #8
0c49c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c4a0     08 4E 85 A1 |  if_e	sub	fp, #8
0c4a4     90 01 90 AD |  if_e	jmp	#LR__1026
0c4a8                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0c4a8     08 4E 05 F1 | 	add	fp, #8
0c4ac     A7 60 02 FB | 	rdlong	muldivb_, fp
0c4b0     08 4E 85 F1 | 	sub	fp, #8
0c4b4     1E 60 0E F2 | 	cmp	muldivb_, #30 wz
0c4b8     1C 00 90 5D |  if_ne	jmp	#LR__1020
0c4bc     08 4E 05 F1 | 	add	fp, #8
0c4c0     A7 38 68 FC | 	wrlong	#28, fp
0c4c4     08 4E 85 F1 | 	sub	fp, #8
0c4c8     A7 12 02 FB | 	rdlong	arg01, fp
0c4cc     00 14 06 F6 | 	mov	arg02, #0
0c4d0     C8 C1 B0 FD | 	call	#__system___float_tointeger
0c4d4     A7 FA 61 FC | 	wrlong	result1, fp
0c4d8                 | LR__1020
0c4d8                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0c4d8     14 4E 05 F1 | 	add	fp, #20
0c4dc     A7 60 02 FB | 	rdlong	muldivb_, fp
0c4e0     14 4E 85 F1 | 	sub	fp, #20
0c4e4     1E 60 0E F2 | 	cmp	muldivb_, #30 wz
0c4e8     28 00 90 5D |  if_ne	jmp	#LR__1021
0c4ec     14 4E 05 F1 | 	add	fp, #20
0c4f0     A7 38 68 FC | 	wrlong	#28, fp
0c4f4     08 4E 85 F1 | 	sub	fp, #8
0c4f8     A7 12 02 FB | 	rdlong	arg01, fp
0c4fc     0C 4E 85 F1 | 	sub	fp, #12
0c500     00 14 06 F6 | 	mov	arg02, #0
0c504     94 C1 B0 FD | 	call	#__system___float_tointeger
0c508     0C 4E 05 F1 | 	add	fp, #12
0c50c     A7 FA 61 FC | 	wrlong	result1, fp
0c510     0C 4E 85 F1 | 	sub	fp, #12
0c514                 | LR__1021
0c514                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
0c514     08 4E 05 F1 | 	add	fp, #8
0c518     A7 60 02 FB | 	rdlong	muldivb_, fp
0c51c     08 4E 85 F1 | 	sub	fp, #8
0c520     1D 60 0E F2 | 	cmp	muldivb_, #29 wz
0c524     14 4E 05 A1 |  if_e	add	fp, #20
0c528     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c52c     14 4E 85 A1 |  if_e	sub	fp, #20
0c530     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0c534     20 00 90 5D |  if_ne	jmp	#LR__1022
0c538     0C 4E 05 F1 | 	add	fp, #12
0c53c     A7 1E 02 FB | 	rdlong	local01, fp
0c540     0C 4E 85 F1 | 	sub	fp, #12
0c544     A7 60 02 FB | 	rdlong	muldivb_, fp
0c548     0F 61 12 FD | 	qdiv	muldivb_, local01
0c54c     19 1E 62 FD | 	getqy	local01
0c550     A7 1E 62 FC | 	wrlong	local01, fp
0c554     E0 00 90 FD | 	jmp	#LR__1026
0c558                 | LR__1022
0c558                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
0c558     08 4E 05 F1 | 	add	fp, #8
0c55c     A7 60 02 FB | 	rdlong	muldivb_, fp
0c560     08 4E 85 F1 | 	sub	fp, #8
0c564     1D 60 0E F2 | 	cmp	muldivb_, #29 wz
0c568     14 4E 05 A1 |  if_e	add	fp, #20
0c56c     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c570     14 4E 85 A1 |  if_e	sub	fp, #20
0c574     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0c578     2C 00 90 5D |  if_ne	jmp	#LR__1023
0c57c     0C 4E 05 F1 | 	add	fp, #12
0c580     A7 1E 02 FB | 	rdlong	local01, fp
0c584     0C 4E 85 F1 | 	sub	fp, #12
0c588     A7 60 02 FB | 	rdlong	muldivb_, fp
0c58c     0F 61 12 FD | 	qdiv	muldivb_, local01
0c590     19 1E 62 FD | 	getqy	local01
0c594     A7 1E 62 FC | 	wrlong	local01, fp
0c598     08 4E 05 F1 | 	add	fp, #8
0c59c     A7 38 68 FC | 	wrlong	#28, fp
0c5a0     08 4E 85 F1 | 	sub	fp, #8
0c5a4     90 00 90 FD | 	jmp	#LR__1026
0c5a8                 | LR__1023
0c5a8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
0c5a8     08 4E 05 F1 | 	add	fp, #8
0c5ac     A7 60 02 FB | 	rdlong	muldivb_, fp
0c5b0     08 4E 85 F1 | 	sub	fp, #8
0c5b4     1C 60 0E F2 | 	cmp	muldivb_, #28 wz
0c5b8     14 4E 05 A1 |  if_e	add	fp, #20
0c5bc     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c5c0     14 4E 85 A1 |  if_e	sub	fp, #20
0c5c4     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0c5c8     1C 00 90 5D |  if_ne	jmp	#LR__1024
0c5cc     A7 5E 02 FB | 	rdlong	muldiva_, fp
0c5d0     0C 4E 05 F1 | 	add	fp, #12
0c5d4     A7 60 02 FB | 	rdlong	muldivb_, fp
0c5d8     0C 4E 85 F1 | 	sub	fp, #12
0c5dc     BA 00 A0 FD | 	call	#divide_
0c5e0     A7 5E 62 FC | 	wrlong	muldiva_, fp
0c5e4     50 00 90 FD | 	jmp	#LR__1026
0c5e8                 | LR__1024
0c5e8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
0c5e8     08 4E 05 F1 | 	add	fp, #8
0c5ec     A7 60 02 FB | 	rdlong	muldivb_, fp
0c5f0     08 4E 85 F1 | 	sub	fp, #8
0c5f4     1C 60 0E F2 | 	cmp	muldivb_, #28 wz
0c5f8     14 4E 05 A1 |  if_e	add	fp, #20
0c5fc     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c600     14 4E 85 A1 |  if_e	sub	fp, #20
0c604     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0c608     1C 00 90 5D |  if_ne	jmp	#LR__1025
0c60c     A7 5E 02 FB | 	rdlong	muldiva_, fp
0c610     0C 4E 05 F1 | 	add	fp, #12
0c614     A7 60 02 FB | 	rdlong	muldivb_, fp
0c618     0C 4E 85 F1 | 	sub	fp, #12
0c61c     BA 00 A0 FD | 	call	#divide_
0c620     A7 5E 62 FC | 	wrlong	muldiva_, fp
0c624     10 00 90 FD | 	jmp	#LR__1026
0c628                 | LR__1025
0c628     A7 16 68 FC | 	wrlong	#11, fp
0c62c     08 4E 05 F1 | 	add	fp, #8
0c630     A7 FE 69 FC | 	wrlong	#255, fp
0c634     08 4E 85 F1 | 	sub	fp, #8
0c638                 | LR__1026
0c638     A7 12 02 F6 | 	mov	arg01, fp
0c63c     CC C3 BF FD | 	call	#_push
0c640     A7 F0 03 F6 | 	mov	ptra, fp
0c644     B2 00 A0 FD | 	call	#popregs_
0c648                 | _do_mod_ret
0c648     2D 00 64 FD | 	ret
0c64c                 | 
0c64c                 | ' 
0c64c                 | ' sub do_shl 
0c64c                 | _do_shl
0c64c     03 4A 05 F6 | 	mov	COUNT_, #3
0c650     A8 00 A0 FD | 	call	#pushregs_
0c654     18 F0 07 F1 | 	add	ptra, #24
0c658     18 C3 BF FD | 	call	#_pop
0c65c     FD 12 02 F6 | 	mov	arg01, result1
0c660     FE 1E 02 F6 | 	mov	local01, result2
0c664     FF 20 02 F6 | 	mov	local02, result3
0c668     0C 4E 05 F1 | 	add	fp, #12
0c66c     A7 12 62 FC | 	wrlong	arg01, fp
0c670     04 4E 05 F1 | 	add	fp, #4
0c674     A7 1E 62 FC | 	wrlong	local01, fp
0c678     04 4E 05 F1 | 	add	fp, #4
0c67c     A7 20 62 FC | 	wrlong	local02, fp
0c680     14 4E 85 F1 | 	sub	fp, #20
0c684     EC C2 BF FD | 	call	#_pop
0c688     FF 22 02 F6 | 	mov	local03, result3
0c68c     A7 FA 61 FC | 	wrlong	result1, fp
0c690     04 4E 05 F1 | 	add	fp, #4
0c694     A7 FC 61 FC | 	wrlong	result2, fp
0c698     04 4E 05 F1 | 	add	fp, #4
0c69c     A7 22 62 FC | 	wrlong	local03, fp
0c6a0                 | ' 
0c6a0                 | ' t2=pop()
0c6a0                 | ' t1=pop()
0c6a0                 | ' 
0c6a0                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0c6a0     08 4E 85 F1 | 	sub	fp, #8
0c6a4     1C 22 0E F2 | 	cmp	local03, #28 wz
0c6a8     A7 22 02 AB |  if_e	rdlong	local03, fp
0c6ac     A7 22 62 AC |  if_e	wrlong	local03, fp
0c6b0     08 4E 05 A1 |  if_e	add	fp, #8
0c6b4     A7 3A 68 AC |  if_e	wrlong	#29, fp
0c6b8     08 4E 85 A1 |  if_e	sub	fp, #8
0c6bc                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0c6bc     14 4E 05 F1 | 	add	fp, #20
0c6c0     A7 22 02 FB | 	rdlong	local03, fp
0c6c4     14 4E 85 F1 | 	sub	fp, #20
0c6c8     1C 22 0E F2 | 	cmp	local03, #28 wz
0c6cc     18 00 90 5D |  if_ne	jmp	#LR__1030
0c6d0     0C 4E 05 F1 | 	add	fp, #12
0c6d4     A7 22 02 FB | 	rdlong	local03, fp
0c6d8     A7 22 62 FC | 	wrlong	local03, fp
0c6dc     08 4E 05 F1 | 	add	fp, #8
0c6e0     A7 3A 68 FC | 	wrlong	#29, fp
0c6e4     14 4E 85 F1 | 	sub	fp, #20
0c6e8                 | LR__1030
0c6e8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
0c6e8     08 4E 05 F1 | 	add	fp, #8
0c6ec     A7 22 02 FB | 	rdlong	local03, fp
0c6f0     08 4E 85 F1 | 	sub	fp, #8
0c6f4     1F 22 0E F2 | 	cmp	local03, #31 wz
0c6f8     14 4E 05 51 |  if_ne	add	fp, #20
0c6fc     A7 20 02 5B |  if_ne	rdlong	local02, fp
0c700     14 4E 85 51 |  if_ne	sub	fp, #20
0c704     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0c708     08 4E 05 51 |  if_ne	add	fp, #8
0c70c     A7 22 02 5B |  if_ne	rdlong	local03, fp
0c710     08 4E 85 51 |  if_ne	sub	fp, #8
0c714     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0c718     14 4E 05 51 |  if_ne	add	fp, #20
0c71c     14 4E 85 51 |  if_ne	sub	fp, #20
0c720     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0c724     A7 0C 68 AC |  if_e	wrlong	#6, fp
0c728     08 4E 05 A1 |  if_e	add	fp, #8
0c72c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c730     08 4E 85 A1 |  if_e	sub	fp, #8
0c734     18 00 90 AD |  if_e	jmp	#LR__1031
0c738     A7 22 02 FB | 	rdlong	local03, fp
0c73c     0C 4E 05 F1 | 	add	fp, #12
0c740     A7 1E 02 FB | 	rdlong	local01, fp
0c744     0C 4E 85 F1 | 	sub	fp, #12
0c748     0F 23 62 F0 | 	shl	local03, local01
0c74c     A7 22 62 FC | 	wrlong	local03, fp
0c750                 | LR__1031
0c750     A7 12 02 F6 | 	mov	arg01, fp
0c754     B4 C2 BF FD | 	call	#_push
0c758     A7 F0 03 F6 | 	mov	ptra, fp
0c75c     B2 00 A0 FD | 	call	#popregs_
0c760                 | _do_shl_ret
0c760     2D 00 64 FD | 	ret
0c764                 | 
0c764                 | ' 
0c764                 | ' sub do_shr 
0c764                 | _do_shr
0c764     03 4A 05 F6 | 	mov	COUNT_, #3
0c768     A8 00 A0 FD | 	call	#pushregs_
0c76c     18 F0 07 F1 | 	add	ptra, #24
0c770     00 C2 BF FD | 	call	#_pop
0c774     FD 12 02 F6 | 	mov	arg01, result1
0c778     FE 1E 02 F6 | 	mov	local01, result2
0c77c     FF 20 02 F6 | 	mov	local02, result3
0c780     0C 4E 05 F1 | 	add	fp, #12
0c784     A7 12 62 FC | 	wrlong	arg01, fp
0c788     04 4E 05 F1 | 	add	fp, #4
0c78c     A7 1E 62 FC | 	wrlong	local01, fp
0c790     04 4E 05 F1 | 	add	fp, #4
0c794     A7 20 62 FC | 	wrlong	local02, fp
0c798     14 4E 85 F1 | 	sub	fp, #20
0c79c     D4 C1 BF FD | 	call	#_pop
0c7a0     FF 22 02 F6 | 	mov	local03, result3
0c7a4     A7 FA 61 FC | 	wrlong	result1, fp
0c7a8     04 4E 05 F1 | 	add	fp, #4
0c7ac     A7 FC 61 FC | 	wrlong	result2, fp
0c7b0     04 4E 05 F1 | 	add	fp, #4
0c7b4     A7 22 62 FC | 	wrlong	local03, fp
0c7b8                 | ' t2=pop()
0c7b8                 | ' t1=pop()
0c7b8                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0c7b8     08 4E 85 F1 | 	sub	fp, #8
0c7bc     1C 22 0E F2 | 	cmp	local03, #28 wz
0c7c0     A7 22 02 AB |  if_e	rdlong	local03, fp
0c7c4     A7 22 62 AC |  if_e	wrlong	local03, fp
0c7c8     08 4E 05 A1 |  if_e	add	fp, #8
0c7cc     A7 3A 68 AC |  if_e	wrlong	#29, fp
0c7d0     08 4E 85 A1 |  if_e	sub	fp, #8
0c7d4                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0c7d4     14 4E 05 F1 | 	add	fp, #20
0c7d8     A7 22 02 FB | 	rdlong	local03, fp
0c7dc     14 4E 85 F1 | 	sub	fp, #20
0c7e0     1C 22 0E F2 | 	cmp	local03, #28 wz
0c7e4     18 00 90 5D |  if_ne	jmp	#LR__1040
0c7e8     0C 4E 05 F1 | 	add	fp, #12
0c7ec     A7 22 02 FB | 	rdlong	local03, fp
0c7f0     A7 22 62 FC | 	wrlong	local03, fp
0c7f4     08 4E 05 F1 | 	add	fp, #8
0c7f8     A7 3A 68 FC | 	wrlong	#29, fp
0c7fc     14 4E 85 F1 | 	sub	fp, #20
0c800                 | LR__1040
0c800                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
0c800     08 4E 05 F1 | 	add	fp, #8
0c804     A7 22 02 FB | 	rdlong	local03, fp
0c808     08 4E 85 F1 | 	sub	fp, #8
0c80c     1F 22 0E F2 | 	cmp	local03, #31 wz
0c810     14 4E 05 51 |  if_ne	add	fp, #20
0c814     A7 20 02 5B |  if_ne	rdlong	local02, fp
0c818     14 4E 85 51 |  if_ne	sub	fp, #20
0c81c     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0c820     08 4E 05 51 |  if_ne	add	fp, #8
0c824     A7 22 02 5B |  if_ne	rdlong	local03, fp
0c828     08 4E 85 51 |  if_ne	sub	fp, #8
0c82c     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0c830     14 4E 05 51 |  if_ne	add	fp, #20
0c834     14 4E 85 51 |  if_ne	sub	fp, #20
0c838     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0c83c     A7 0C 68 AC |  if_e	wrlong	#6, fp
0c840     08 4E 05 A1 |  if_e	add	fp, #8
0c844     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c848     08 4E 85 A1 |  if_e	sub	fp, #8
0c84c     18 00 90 AD |  if_e	jmp	#LR__1041
0c850     A7 22 02 FB | 	rdlong	local03, fp
0c854     0C 4E 05 F1 | 	add	fp, #12
0c858     A7 1E 02 FB | 	rdlong	local01, fp
0c85c     0C 4E 85 F1 | 	sub	fp, #12
0c860     0F 23 42 F0 | 	shr	local03, local01
0c864     A7 22 62 FC | 	wrlong	local03, fp
0c868                 | LR__1041
0c868     A7 12 02 F6 | 	mov	arg01, fp
0c86c     9C C1 BF FD | 	call	#_push
0c870     A7 F0 03 F6 | 	mov	ptra, fp
0c874     B2 00 A0 FD | 	call	#popregs_
0c878                 | _do_shr_ret
0c878     2D 00 64 FD | 	ret
0c87c                 | 
0c87c                 | ' 
0c87c                 | ' sub do_power 
0c87c                 | _do_power
0c87c     02 4A 05 F6 | 	mov	COUNT_, #2
0c880     A8 00 A0 FD | 	call	#pushregs_
0c884     18 F0 07 F1 | 	add	ptra, #24
0c888     E8 C0 BF FD | 	call	#_pop
0c88c     FD 14 02 F6 | 	mov	arg02, result1
0c890     FE 12 02 F6 | 	mov	arg01, result2
0c894     FF 1E 02 F6 | 	mov	local01, result3
0c898     0C 4E 05 F1 | 	add	fp, #12
0c89c     A7 14 62 FC | 	wrlong	arg02, fp
0c8a0     04 4E 05 F1 | 	add	fp, #4
0c8a4     A7 12 62 FC | 	wrlong	arg01, fp
0c8a8     04 4E 05 F1 | 	add	fp, #4
0c8ac     A7 1E 62 FC | 	wrlong	local01, fp
0c8b0     14 4E 85 F1 | 	sub	fp, #20
0c8b4     BC C0 BF FD | 	call	#_pop
0c8b8     A7 FA 61 FC | 	wrlong	result1, fp
0c8bc     04 4E 05 F1 | 	add	fp, #4
0c8c0     A7 FC 61 FC | 	wrlong	result2, fp
0c8c4     04 4E 05 F1 | 	add	fp, #4
0c8c8     A7 FE 61 FC | 	wrlong	result3, fp
0c8cc                 | ' t2=pop()
0c8cc                 | ' t1=pop()
0c8cc                 | ' 
0c8cc                 | ' 
0c8cc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
0c8cc     08 4E 85 F1 | 	sub	fp, #8
0c8d0     1F FE 0D F2 | 	cmp	result3, #31 wz
0c8d4     14 4E 05 51 |  if_ne	add	fp, #20
0c8d8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c8dc     14 4E 85 51 |  if_ne	sub	fp, #20
0c8e0     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0c8e4     A7 18 68 AC |  if_e	wrlong	#12, fp
0c8e8     08 4E 05 A1 |  if_e	add	fp, #8
0c8ec     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c8f0     08 4E 85 A1 |  if_e	sub	fp, #8
0c8f4     38 01 90 AD |  if_e	jmp	#LR__1055
0c8f8                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0c8f8     08 4E 05 F1 | 	add	fp, #8
0c8fc     A7 14 02 FB | 	rdlong	arg02, fp
0c900     08 4E 85 F1 | 	sub	fp, #8
0c904     1C 14 0E F2 | 	cmp	arg02, #28 wz
0c908     28 00 90 5D |  if_ne	jmp	#LR__1050
0c90c     08 4E 05 F1 | 	add	fp, #8
0c910     A7 3C 68 FC | 	wrlong	#30, fp
0c914     08 4E 85 F1 | 	sub	fp, #8
0c918     A7 12 02 FB | 	rdlong	arg01, fp
0c91c     09 13 52 F6 | 	abs	arg01, arg01 wc
0c920     1F 20 C6 C9 |  if_b	decod	local02, #31
0c924     00 20 06 36 |  if_ae	mov	local02, #0
0c928     7C B5 B0 FD | 	call	#__system___float_fromuns
0c92c     10 FB 61 F5 | 	xor	result1, local02
0c930     A7 FA 61 FC | 	wrlong	result1, fp
0c934                 | LR__1050
0c934                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
0c934     08 4E 05 F1 | 	add	fp, #8
0c938     A7 14 02 FB | 	rdlong	arg02, fp
0c93c     08 4E 85 F1 | 	sub	fp, #8
0c940     1D 14 0E F2 | 	cmp	arg02, #29 wz
0c944     18 00 90 5D |  if_ne	jmp	#LR__1051
0c948     08 4E 05 F1 | 	add	fp, #8
0c94c     A7 3C 68 FC | 	wrlong	#30, fp
0c950     08 4E 85 F1 | 	sub	fp, #8
0c954     A7 12 02 FB | 	rdlong	arg01, fp
0c958     4C B5 B0 FD | 	call	#__system___float_fromuns
0c95c     A7 FA 61 FC | 	wrlong	result1, fp
0c960                 | LR__1051
0c960                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0c960     14 4E 05 F1 | 	add	fp, #20
0c964     A7 14 02 FB | 	rdlong	arg02, fp
0c968     14 4E 85 F1 | 	sub	fp, #20
0c96c     1C 14 0E F2 | 	cmp	arg02, #28 wz
0c970     34 00 90 5D |  if_ne	jmp	#LR__1052
0c974     14 4E 05 F1 | 	add	fp, #20
0c978     A7 3C 68 FC | 	wrlong	#30, fp
0c97c     08 4E 85 F1 | 	sub	fp, #8
0c980     A7 12 02 FB | 	rdlong	arg01, fp
0c984     0C 4E 85 F1 | 	sub	fp, #12
0c988     09 13 52 F6 | 	abs	arg01, arg01 wc
0c98c     1F 20 C6 C9 |  if_b	decod	local02, #31
0c990     00 20 06 36 |  if_ae	mov	local02, #0
0c994     10 B5 B0 FD | 	call	#__system___float_fromuns
0c998     10 FB 61 F5 | 	xor	result1, local02
0c99c     0C 4E 05 F1 | 	add	fp, #12
0c9a0     A7 FA 61 FC | 	wrlong	result1, fp
0c9a4     0C 4E 85 F1 | 	sub	fp, #12
0c9a8                 | LR__1052
0c9a8                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0c9a8     14 4E 05 F1 | 	add	fp, #20
0c9ac     A7 14 02 FB | 	rdlong	arg02, fp
0c9b0     14 4E 85 F1 | 	sub	fp, #20
0c9b4     1D 14 0E F2 | 	cmp	arg02, #29 wz
0c9b8     24 00 90 5D |  if_ne	jmp	#LR__1053
0c9bc     14 4E 05 F1 | 	add	fp, #20
0c9c0     A7 3C 68 FC | 	wrlong	#30, fp
0c9c4     08 4E 85 F1 | 	sub	fp, #8
0c9c8     A7 12 02 FB | 	rdlong	arg01, fp
0c9cc     0C 4E 85 F1 | 	sub	fp, #12
0c9d0     D4 B4 B0 FD | 	call	#__system___float_fromuns
0c9d4     0C 4E 05 F1 | 	add	fp, #12
0c9d8     A7 FA 61 FC | 	wrlong	result1, fp
0c9dc     0C 4E 85 F1 | 	sub	fp, #12
0c9e0                 | LR__1053
0c9e0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
0c9e0     08 4E 05 F1 | 	add	fp, #8
0c9e4     A7 14 02 FB | 	rdlong	arg02, fp
0c9e8     08 4E 85 F1 | 	sub	fp, #8
0c9ec     1E 14 0E F2 | 	cmp	arg02, #30 wz
0c9f0     14 4E 05 A1 |  if_e	add	fp, #20
0c9f4     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c9f8     14 4E 85 A1 |  if_e	sub	fp, #20
0c9fc     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0ca00     1C 00 90 5D |  if_ne	jmp	#LR__1054
0ca04     A7 12 02 FB | 	rdlong	arg01, fp
0ca08     0C 4E 05 F1 | 	add	fp, #12
0ca0c     A7 14 02 FB | 	rdlong	arg02, fp
0ca10     0C 4E 85 F1 | 	sub	fp, #12
0ca14     28 C4 B0 FD | 	call	#__system____builtin_powf
0ca18     A7 FA 61 FC | 	wrlong	result1, fp
0ca1c     10 00 90 FD | 	jmp	#LR__1055
0ca20                 | LR__1054
0ca20     A7 1A 68 FC | 	wrlong	#13, fp
0ca24     08 4E 05 F1 | 	add	fp, #8
0ca28     A7 FE 69 FC | 	wrlong	#255, fp
0ca2c     08 4E 85 F1 | 	sub	fp, #8
0ca30                 | LR__1055
0ca30     A7 12 02 F6 | 	mov	arg01, fp
0ca34     D4 BF BF FD | 	call	#_push
0ca38     A7 F0 03 F6 | 	mov	ptra, fp
0ca3c     B2 00 A0 FD | 	call	#popregs_
0ca40                 | _do_power_ret
0ca40     2D 00 64 FD | 	ret
0ca44                 | 
0ca44                 | ' 
0ca44                 | ' 
0ca44                 | ' sub do_eq
0ca44                 | _do_eq
0ca44     05 4A 05 F6 | 	mov	COUNT_, #5
0ca48     A8 00 A0 FD | 	call	#pushregs_
0ca4c     18 F0 07 F1 | 	add	ptra, #24
0ca50     20 BF BF FD | 	call	#_pop
0ca54     FD 1E 02 F6 | 	mov	local01, result1
0ca58     FE 20 02 F6 | 	mov	local02, result2
0ca5c     FF 22 02 F6 | 	mov	local03, result3
0ca60     0C 4E 05 F1 | 	add	fp, #12
0ca64     A7 1E 62 FC | 	wrlong	local01, fp
0ca68     04 4E 05 F1 | 	add	fp, #4
0ca6c     A7 20 62 FC | 	wrlong	local02, fp
0ca70     04 4E 05 F1 | 	add	fp, #4
0ca74     A7 22 62 FC | 	wrlong	local03, fp
0ca78     14 4E 85 F1 | 	sub	fp, #20
0ca7c     F4 BE BF FD | 	call	#_pop
0ca80     FF 22 02 F6 | 	mov	local03, result3
0ca84     A7 FA 61 FC | 	wrlong	result1, fp
0ca88     04 4E 05 F1 | 	add	fp, #4
0ca8c     A7 FC 61 FC | 	wrlong	result2, fp
0ca90     04 4E 05 F1 | 	add	fp, #4
0ca94     A7 22 62 FC | 	wrlong	local03, fp
0ca98                 | ' t2=pop()
0ca98                 | ' t1=pop()
0ca98                 | ' 
0ca98                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
0ca98     08 4E 85 F1 | 	sub	fp, #8
0ca9c     1F 22 0E F2 | 	cmp	local03, #31 wz
0caa0     14 4E 05 A1 |  if_e	add	fp, #20
0caa4     A7 24 02 AB |  if_e	rdlong	local04, fp
0caa8     14 4E 85 A1 |  if_e	sub	fp, #20
0caac     12 23 02 A6 |  if_e	mov	local03, local04
0cab0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0cab4     28 00 90 5D |  if_ne	jmp	#LR__1060
0cab8     00 1E 06 F6 | 	mov	local01, #0
0cabc     A7 12 02 FB | 	rdlong	arg01, fp
0cac0     0C 4E 05 F1 | 	add	fp, #12
0cac4     A7 14 02 FB | 	rdlong	arg02, fp
0cac8     0C 4E 85 F1 | 	sub	fp, #12
0cacc     18 8D B0 FD | 	call	#__system___string_cmp
0cad0     00 FA 0D F2 | 	cmp	result1, #0 wz
0cad4     00 1E 26 A6 |  if_e	not	local01, #0
0cad8     A7 1E 62 FC | 	wrlong	local01, fp
0cadc     04 03 90 FD | 	jmp	#LR__1070
0cae0                 | LR__1060
0cae0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
0cae0     08 4E 05 F1 | 	add	fp, #8
0cae4     A7 1E 02 FB | 	rdlong	local01, fp
0cae8     08 4E 85 F1 | 	sub	fp, #8
0caec     1E 1E 0E F2 | 	cmp	local01, #30 wz
0caf0     14 4E 05 A1 |  if_e	add	fp, #20
0caf4     A7 24 02 AB |  if_e	rdlong	local04, fp
0caf8     14 4E 85 A1 |  if_e	sub	fp, #20
0cafc     12 23 02 A6 |  if_e	mov	local03, local04
0cb00     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0cb04     2C 00 90 5D |  if_ne	jmp	#LR__1061
0cb08     00 1E 06 F6 | 	mov	local01, #0
0cb0c     A7 12 02 FB | 	rdlong	arg01, fp
0cb10     0C 4E 05 F1 | 	add	fp, #12
0cb14     A7 14 02 FB | 	rdlong	arg02, fp
0cb18     0C 4E 85 F1 | 	sub	fp, #12
0cb1c     01 16 06 F6 | 	mov	arg03, #1
0cb20     E4 BA B0 FD | 	call	#__system___float_cmp
0cb24     00 FA 0D F2 | 	cmp	result1, #0 wz
0cb28     00 1E 26 A6 |  if_e	not	local01, #0
0cb2c     A7 1E 62 FC | 	wrlong	local01, fp
0cb30     B0 02 90 FD | 	jmp	#LR__1070
0cb34                 | LR__1061
0cb34                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
0cb34     08 4E 05 F1 | 	add	fp, #8
0cb38     A7 1E 02 FB | 	rdlong	local01, fp
0cb3c     08 4E 85 F1 | 	sub	fp, #8
0cb40     1E 1E 0E F2 | 	cmp	local01, #30 wz
0cb44     14 4E 05 A1 |  if_e	add	fp, #20
0cb48     A7 24 02 AB |  if_e	rdlong	local04, fp
0cb4c     14 4E 85 A1 |  if_e	sub	fp, #20
0cb50     12 23 02 A6 |  if_e	mov	local03, local04
0cb54     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0cb58     48 00 90 5D |  if_ne	jmp	#LR__1062
0cb5c     00 1E 06 F6 | 	mov	local01, #0
0cb60     A7 20 02 FB | 	rdlong	local02, fp
0cb64     0C 4E 05 F1 | 	add	fp, #12
0cb68     A7 12 02 FB | 	rdlong	arg01, fp
0cb6c     0C 4E 85 F1 | 	sub	fp, #12
0cb70     09 13 52 F6 | 	abs	arg01, arg01 wc
0cb74     1F 26 C6 C9 |  if_b	decod	local05, #31
0cb78     00 26 06 36 |  if_ae	mov	local05, #0
0cb7c     28 B3 B0 FD | 	call	#__system___float_fromuns
0cb80     13 FB 61 F5 | 	xor	result1, local05
0cb84     FD 14 02 F6 | 	mov	arg02, result1
0cb88     10 13 02 F6 | 	mov	arg01, local02
0cb8c     01 16 06 F6 | 	mov	arg03, #1
0cb90     74 BA B0 FD | 	call	#__system___float_cmp
0cb94     00 FA 0D F2 | 	cmp	result1, #0 wz
0cb98     00 1E 26 A6 |  if_e	not	local01, #0
0cb9c     A7 1E 62 FC | 	wrlong	local01, fp
0cba0     40 02 90 FD | 	jmp	#LR__1070
0cba4                 | LR__1062
0cba4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
0cba4     08 4E 05 F1 | 	add	fp, #8
0cba8     A7 1E 02 FB | 	rdlong	local01, fp
0cbac     08 4E 85 F1 | 	sub	fp, #8
0cbb0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0cbb4     14 4E 05 A1 |  if_e	add	fp, #20
0cbb8     A7 24 02 AB |  if_e	rdlong	local04, fp
0cbbc     14 4E 85 A1 |  if_e	sub	fp, #20
0cbc0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0cbc4     38 00 90 5D |  if_ne	jmp	#LR__1063
0cbc8     00 1E 06 F6 | 	mov	local01, #0
0cbcc     A7 20 02 FB | 	rdlong	local02, fp
0cbd0     0C 4E 05 F1 | 	add	fp, #12
0cbd4     A7 12 02 FB | 	rdlong	arg01, fp
0cbd8     0C 4E 85 F1 | 	sub	fp, #12
0cbdc     C8 B2 B0 FD | 	call	#__system___float_fromuns
0cbe0     FD 14 02 F6 | 	mov	arg02, result1
0cbe4     10 13 02 F6 | 	mov	arg01, local02
0cbe8     01 16 06 F6 | 	mov	arg03, #1
0cbec     18 BA B0 FD | 	call	#__system___float_cmp
0cbf0     00 FA 0D F2 | 	cmp	result1, #0 wz
0cbf4     00 1E 26 A6 |  if_e	not	local01, #0
0cbf8     A7 1E 62 FC | 	wrlong	local01, fp
0cbfc     E4 01 90 FD | 	jmp	#LR__1070
0cc00                 | LR__1063
0cc00                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
0cc00     08 4E 05 F1 | 	add	fp, #8
0cc04     A7 1E 02 FB | 	rdlong	local01, fp
0cc08     08 4E 85 F1 | 	sub	fp, #8
0cc0c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0cc10     14 4E 05 A1 |  if_e	add	fp, #20
0cc14     A7 22 02 AB |  if_e	rdlong	local03, fp
0cc18     14 4E 85 A1 |  if_e	sub	fp, #20
0cc1c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0cc20     44 00 90 5D |  if_ne	jmp	#LR__1064
0cc24     00 1E 06 F6 | 	mov	local01, #0
0cc28     A7 12 02 FB | 	rdlong	arg01, fp
0cc2c     09 13 52 F6 | 	abs	arg01, arg01 wc
0cc30     1F 26 C6 C9 |  if_b	decod	local05, #31
0cc34     00 26 06 36 |  if_ae	mov	local05, #0
0cc38     6C B2 B0 FD | 	call	#__system___float_fromuns
0cc3c     13 FB 61 F5 | 	xor	result1, local05
0cc40     FD 12 02 F6 | 	mov	arg01, result1
0cc44     0C 4E 05 F1 | 	add	fp, #12
0cc48     A7 14 02 FB | 	rdlong	arg02, fp
0cc4c     0C 4E 85 F1 | 	sub	fp, #12
0cc50     01 16 06 F6 | 	mov	arg03, #1
0cc54     B0 B9 B0 FD | 	call	#__system___float_cmp
0cc58     00 FA 0D F2 | 	cmp	result1, #0 wz
0cc5c     00 1E 26 A6 |  if_e	not	local01, #0
0cc60     A7 1E 62 FC | 	wrlong	local01, fp
0cc64     7C 01 90 FD | 	jmp	#LR__1070
0cc68                 | LR__1064
0cc68                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
0cc68     08 4E 05 F1 | 	add	fp, #8
0cc6c     A7 1E 02 FB | 	rdlong	local01, fp
0cc70     08 4E 85 F1 | 	sub	fp, #8
0cc74     1C 1E 0E F2 | 	cmp	local01, #28 wz
0cc78     14 4E 05 A1 |  if_e	add	fp, #20
0cc7c     A7 22 02 AB |  if_e	rdlong	local03, fp
0cc80     14 4E 85 A1 |  if_e	sub	fp, #20
0cc84     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0cc88     24 00 90 5D |  if_ne	jmp	#LR__1065
0cc8c     00 1E 06 F6 | 	mov	local01, #0
0cc90     A7 20 02 FB | 	rdlong	local02, fp
0cc94     0C 4E 05 F1 | 	add	fp, #12
0cc98     A7 22 02 FB | 	rdlong	local03, fp
0cc9c     0C 4E 85 F1 | 	sub	fp, #12
0cca0     11 21 0A F2 | 	cmp	local02, local03 wz
0cca4     01 1E 66 A6 |  if_e	neg	local01, #1
0cca8     A7 1E 62 FC | 	wrlong	local01, fp
0ccac     34 01 90 FD | 	jmp	#LR__1070
0ccb0                 | LR__1065
0ccb0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
0ccb0     08 4E 05 F1 | 	add	fp, #8
0ccb4     A7 1E 02 FB | 	rdlong	local01, fp
0ccb8     08 4E 85 F1 | 	sub	fp, #8
0ccbc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ccc0     14 4E 05 A1 |  if_e	add	fp, #20
0ccc4     A7 22 02 AB |  if_e	rdlong	local03, fp
0ccc8     14 4E 85 A1 |  if_e	sub	fp, #20
0cccc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0ccd0     24 00 90 5D |  if_ne	jmp	#LR__1066
0ccd4     00 1E 06 F6 | 	mov	local01, #0
0ccd8     A7 20 02 FB | 	rdlong	local02, fp
0ccdc     0C 4E 05 F1 | 	add	fp, #12
0cce0     A7 22 02 FB | 	rdlong	local03, fp
0cce4     0C 4E 85 F1 | 	sub	fp, #12
0cce8     11 21 0A F2 | 	cmp	local02, local03 wz
0ccec     01 1E 66 A6 |  if_e	neg	local01, #1
0ccf0     A7 1E 62 FC | 	wrlong	local01, fp
0ccf4     EC 00 90 FD | 	jmp	#LR__1070
0ccf8                 | LR__1066
0ccf8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
0ccf8     08 4E 05 F1 | 	add	fp, #8
0ccfc     A7 1E 02 FB | 	rdlong	local01, fp
0cd00     08 4E 85 F1 | 	sub	fp, #8
0cd04     1D 1E 0E F2 | 	cmp	local01, #29 wz
0cd08     14 4E 05 A1 |  if_e	add	fp, #20
0cd0c     A7 22 02 AB |  if_e	rdlong	local03, fp
0cd10     14 4E 85 A1 |  if_e	sub	fp, #20
0cd14     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0cd18     34 00 90 5D |  if_ne	jmp	#LR__1067
0cd1c     00 1E 06 F6 | 	mov	local01, #0
0cd20     A7 12 02 FB | 	rdlong	arg01, fp
0cd24     80 B1 B0 FD | 	call	#__system___float_fromuns
0cd28     FD 12 02 F6 | 	mov	arg01, result1
0cd2c     0C 4E 05 F1 | 	add	fp, #12
0cd30     A7 14 02 FB | 	rdlong	arg02, fp
0cd34     0C 4E 85 F1 | 	sub	fp, #12
0cd38     01 16 06 F6 | 	mov	arg03, #1
0cd3c     C8 B8 B0 FD | 	call	#__system___float_cmp
0cd40     00 FA 0D F2 | 	cmp	result1, #0 wz
0cd44     00 1E 26 A6 |  if_e	not	local01, #0
0cd48     A7 1E 62 FC | 	wrlong	local01, fp
0cd4c     94 00 90 FD | 	jmp	#LR__1070
0cd50                 | LR__1067
0cd50                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
0cd50     08 4E 05 F1 | 	add	fp, #8
0cd54     A7 1E 02 FB | 	rdlong	local01, fp
0cd58     08 4E 85 F1 | 	sub	fp, #8
0cd5c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0cd60     14 4E 05 A1 |  if_e	add	fp, #20
0cd64     A7 22 02 AB |  if_e	rdlong	local03, fp
0cd68     14 4E 85 A1 |  if_e	sub	fp, #20
0cd6c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0cd70     24 00 90 5D |  if_ne	jmp	#LR__1068
0cd74     00 1E 06 F6 | 	mov	local01, #0
0cd78     A7 20 02 FB | 	rdlong	local02, fp
0cd7c     0C 4E 05 F1 | 	add	fp, #12
0cd80     A7 22 02 FB | 	rdlong	local03, fp
0cd84     0C 4E 85 F1 | 	sub	fp, #12
0cd88     11 21 0A F2 | 	cmp	local02, local03 wz
0cd8c     01 1E 66 A6 |  if_e	neg	local01, #1
0cd90     A7 1E 62 FC | 	wrlong	local01, fp
0cd94     4C 00 90 FD | 	jmp	#LR__1070
0cd98                 | LR__1068
0cd98                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
0cd98     08 4E 05 F1 | 	add	fp, #8
0cd9c     A7 1E 02 FB | 	rdlong	local01, fp
0cda0     08 4E 85 F1 | 	sub	fp, #8
0cda4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0cda8     14 4E 05 A1 |  if_e	add	fp, #20
0cdac     A7 22 02 AB |  if_e	rdlong	local03, fp
0cdb0     14 4E 85 A1 |  if_e	sub	fp, #20
0cdb4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0cdb8     24 00 90 5D |  if_ne	jmp	#LR__1069
0cdbc     00 1E 06 F6 | 	mov	local01, #0
0cdc0     A7 20 02 FB | 	rdlong	local02, fp
0cdc4     0C 4E 05 F1 | 	add	fp, #12
0cdc8     A7 22 02 FB | 	rdlong	local03, fp
0cdcc     0C 4E 85 F1 | 	sub	fp, #12
0cdd0     11 21 0A F2 | 	cmp	local02, local03 wz
0cdd4     01 1E 66 A6 |  if_e	neg	local01, #1
0cdd8     A7 1E 62 FC | 	wrlong	local01, fp
0cddc     04 00 90 FD | 	jmp	#LR__1070
0cde0                 | LR__1069
0cde0     A7 00 68 FC | 	wrlong	#0, fp
0cde4                 | LR__1070
0cde4     08 4E 05 F1 | 	add	fp, #8
0cde8     A7 38 68 FC | 	wrlong	#28, fp
0cdec     08 4E 85 F1 | 	sub	fp, #8
0cdf0     A7 12 02 F6 | 	mov	arg01, fp
0cdf4     14 BC BF FD | 	call	#_push
0cdf8     A7 F0 03 F6 | 	mov	ptra, fp
0cdfc     B2 00 A0 FD | 	call	#popregs_
0ce00                 | _do_eq_ret
0ce00     2D 00 64 FD | 	ret
0ce04                 | 
0ce04                 | ' 
0ce04                 | ' sub do_gt
0ce04                 | _do_gt
0ce04     05 4A 05 F6 | 	mov	COUNT_, #5
0ce08     A8 00 A0 FD | 	call	#pushregs_
0ce0c     18 F0 07 F1 | 	add	ptra, #24
0ce10     60 BB BF FD | 	call	#_pop
0ce14     FD 1E 02 F6 | 	mov	local01, result1
0ce18     FE 20 02 F6 | 	mov	local02, result2
0ce1c     FF 22 02 F6 | 	mov	local03, result3
0ce20     0C 4E 05 F1 | 	add	fp, #12
0ce24     A7 1E 62 FC | 	wrlong	local01, fp
0ce28     04 4E 05 F1 | 	add	fp, #4
0ce2c     A7 20 62 FC | 	wrlong	local02, fp
0ce30     04 4E 05 F1 | 	add	fp, #4
0ce34     A7 22 62 FC | 	wrlong	local03, fp
0ce38     14 4E 85 F1 | 	sub	fp, #20
0ce3c     34 BB BF FD | 	call	#_pop
0ce40     FF 22 02 F6 | 	mov	local03, result3
0ce44     A7 FA 61 FC | 	wrlong	result1, fp
0ce48     04 4E 05 F1 | 	add	fp, #4
0ce4c     A7 FC 61 FC | 	wrlong	result2, fp
0ce50     04 4E 05 F1 | 	add	fp, #4
0ce54     A7 22 62 FC | 	wrlong	local03, fp
0ce58                 | ' t2=pop()
0ce58                 | ' t1=pop()
0ce58                 | ' 
0ce58                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
0ce58     08 4E 85 F1 | 	sub	fp, #8
0ce5c     1F 22 0E F2 | 	cmp	local03, #31 wz
0ce60     14 4E 05 A1 |  if_e	add	fp, #20
0ce64     A7 24 02 AB |  if_e	rdlong	local04, fp
0ce68     14 4E 85 A1 |  if_e	sub	fp, #20
0ce6c     12 23 02 A6 |  if_e	mov	local03, local04
0ce70     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0ce74     28 00 90 5D |  if_ne	jmp	#LR__1080
0ce78     00 1E 06 F6 | 	mov	local01, #0
0ce7c     A7 12 02 FB | 	rdlong	arg01, fp
0ce80     0C 4E 05 F1 | 	add	fp, #12
0ce84     A7 14 02 FB | 	rdlong	arg02, fp
0ce88     0C 4E 85 F1 | 	sub	fp, #12
0ce8c     58 89 B0 FD | 	call	#__system___string_cmp
0ce90     01 FA 55 F2 | 	cmps	result1, #1 wc
0ce94     00 1E 26 36 |  if_ae	not	local01, #0
0ce98     A7 1E 62 FC | 	wrlong	local01, fp
0ce9c     04 03 90 FD | 	jmp	#LR__1090
0cea0                 | LR__1080
0cea0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
0cea0     08 4E 05 F1 | 	add	fp, #8
0cea4     A7 1E 02 FB | 	rdlong	local01, fp
0cea8     08 4E 85 F1 | 	sub	fp, #8
0ceac     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ceb0     14 4E 05 A1 |  if_e	add	fp, #20
0ceb4     A7 24 02 AB |  if_e	rdlong	local04, fp
0ceb8     14 4E 85 A1 |  if_e	sub	fp, #20
0cebc     12 23 02 A6 |  if_e	mov	local03, local04
0cec0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0cec4     2C 00 90 5D |  if_ne	jmp	#LR__1081
0cec8     00 1E 06 F6 | 	mov	local01, #0
0cecc     A7 12 02 FB | 	rdlong	arg01, fp
0ced0     0C 4E 05 F1 | 	add	fp, #12
0ced4     A7 14 02 FB | 	rdlong	arg02, fp
0ced8     0C 4E 85 F1 | 	sub	fp, #12
0cedc     01 16 66 F6 | 	neg	arg03, #1
0cee0     24 B7 B0 FD | 	call	#__system___float_cmp
0cee4     01 FA 55 F2 | 	cmps	result1, #1 wc
0cee8     00 1E 26 36 |  if_ae	not	local01, #0
0ceec     A7 1E 62 FC | 	wrlong	local01, fp
0cef0     B0 02 90 FD | 	jmp	#LR__1090
0cef4                 | LR__1081
0cef4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
0cef4     08 4E 05 F1 | 	add	fp, #8
0cef8     A7 1E 02 FB | 	rdlong	local01, fp
0cefc     08 4E 85 F1 | 	sub	fp, #8
0cf00     1E 1E 0E F2 | 	cmp	local01, #30 wz
0cf04     14 4E 05 A1 |  if_e	add	fp, #20
0cf08     A7 24 02 AB |  if_e	rdlong	local04, fp
0cf0c     14 4E 85 A1 |  if_e	sub	fp, #20
0cf10     12 23 02 A6 |  if_e	mov	local03, local04
0cf14     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0cf18     48 00 90 5D |  if_ne	jmp	#LR__1082
0cf1c     00 1E 06 F6 | 	mov	local01, #0
0cf20     A7 20 02 FB | 	rdlong	local02, fp
0cf24     0C 4E 05 F1 | 	add	fp, #12
0cf28     A7 12 02 FB | 	rdlong	arg01, fp
0cf2c     0C 4E 85 F1 | 	sub	fp, #12
0cf30     09 13 52 F6 | 	abs	arg01, arg01 wc
0cf34     1F 26 C6 C9 |  if_b	decod	local05, #31
0cf38     00 26 06 36 |  if_ae	mov	local05, #0
0cf3c     68 AF B0 FD | 	call	#__system___float_fromuns
0cf40     13 FB 61 F5 | 	xor	result1, local05
0cf44     FD 14 02 F6 | 	mov	arg02, result1
0cf48     10 13 02 F6 | 	mov	arg01, local02
0cf4c     01 16 66 F6 | 	neg	arg03, #1
0cf50     B4 B6 B0 FD | 	call	#__system___float_cmp
0cf54     01 FA 55 F2 | 	cmps	result1, #1 wc
0cf58     00 1E 26 36 |  if_ae	not	local01, #0
0cf5c     A7 1E 62 FC | 	wrlong	local01, fp
0cf60     40 02 90 FD | 	jmp	#LR__1090
0cf64                 | LR__1082
0cf64                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
0cf64     08 4E 05 F1 | 	add	fp, #8
0cf68     A7 1E 02 FB | 	rdlong	local01, fp
0cf6c     08 4E 85 F1 | 	sub	fp, #8
0cf70     1E 1E 0E F2 | 	cmp	local01, #30 wz
0cf74     14 4E 05 A1 |  if_e	add	fp, #20
0cf78     A7 24 02 AB |  if_e	rdlong	local04, fp
0cf7c     14 4E 85 A1 |  if_e	sub	fp, #20
0cf80     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0cf84     38 00 90 5D |  if_ne	jmp	#LR__1083
0cf88     00 1E 06 F6 | 	mov	local01, #0
0cf8c     A7 20 02 FB | 	rdlong	local02, fp
0cf90     0C 4E 05 F1 | 	add	fp, #12
0cf94     A7 12 02 FB | 	rdlong	arg01, fp
0cf98     0C 4E 85 F1 | 	sub	fp, #12
0cf9c     08 AF B0 FD | 	call	#__system___float_fromuns
0cfa0     FD 14 02 F6 | 	mov	arg02, result1
0cfa4     10 13 02 F6 | 	mov	arg01, local02
0cfa8     01 16 66 F6 | 	neg	arg03, #1
0cfac     58 B6 B0 FD | 	call	#__system___float_cmp
0cfb0     01 FA 55 F2 | 	cmps	result1, #1 wc
0cfb4     00 1E 26 36 |  if_ae	not	local01, #0
0cfb8     A7 1E 62 FC | 	wrlong	local01, fp
0cfbc     E4 01 90 FD | 	jmp	#LR__1090
0cfc0                 | LR__1083
0cfc0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
0cfc0     08 4E 05 F1 | 	add	fp, #8
0cfc4     A7 1E 02 FB | 	rdlong	local01, fp
0cfc8     08 4E 85 F1 | 	sub	fp, #8
0cfcc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0cfd0     14 4E 05 A1 |  if_e	add	fp, #20
0cfd4     A7 22 02 AB |  if_e	rdlong	local03, fp
0cfd8     14 4E 85 A1 |  if_e	sub	fp, #20
0cfdc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0cfe0     44 00 90 5D |  if_ne	jmp	#LR__1084
0cfe4     00 1E 06 F6 | 	mov	local01, #0
0cfe8     A7 12 02 FB | 	rdlong	arg01, fp
0cfec     09 13 52 F6 | 	abs	arg01, arg01 wc
0cff0     1F 26 C6 C9 |  if_b	decod	local05, #31
0cff4     00 26 06 36 |  if_ae	mov	local05, #0
0cff8     AC AE B0 FD | 	call	#__system___float_fromuns
0cffc     13 FB 61 F5 | 	xor	result1, local05
0d000     FD 12 02 F6 | 	mov	arg01, result1
0d004     0C 4E 05 F1 | 	add	fp, #12
0d008     A7 14 02 FB | 	rdlong	arg02, fp
0d00c     0C 4E 85 F1 | 	sub	fp, #12
0d010     01 16 66 F6 | 	neg	arg03, #1
0d014     F0 B5 B0 FD | 	call	#__system___float_cmp
0d018     01 FA 55 F2 | 	cmps	result1, #1 wc
0d01c     00 1E 26 36 |  if_ae	not	local01, #0
0d020     A7 1E 62 FC | 	wrlong	local01, fp
0d024     7C 01 90 FD | 	jmp	#LR__1090
0d028                 | LR__1084
0d028                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
0d028     08 4E 05 F1 | 	add	fp, #8
0d02c     A7 1E 02 FB | 	rdlong	local01, fp
0d030     08 4E 85 F1 | 	sub	fp, #8
0d034     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d038     14 4E 05 A1 |  if_e	add	fp, #20
0d03c     A7 22 02 AB |  if_e	rdlong	local03, fp
0d040     14 4E 85 A1 |  if_e	sub	fp, #20
0d044     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d048     24 00 90 5D |  if_ne	jmp	#LR__1085
0d04c     00 1E 06 F6 | 	mov	local01, #0
0d050     A7 20 02 FB | 	rdlong	local02, fp
0d054     0C 4E 05 F1 | 	add	fp, #12
0d058     A7 22 02 FB | 	rdlong	local03, fp
0d05c     0C 4E 85 F1 | 	sub	fp, #12
0d060     11 21 5A F2 | 	cmps	local02, local03 wcz
0d064     01 1E 66 16 |  if_a	neg	local01, #1
0d068     A7 1E 62 FC | 	wrlong	local01, fp
0d06c     34 01 90 FD | 	jmp	#LR__1090
0d070                 | LR__1085
0d070                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
0d070     08 4E 05 F1 | 	add	fp, #8
0d074     A7 1E 02 FB | 	rdlong	local01, fp
0d078     08 4E 85 F1 | 	sub	fp, #8
0d07c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d080     14 4E 05 A1 |  if_e	add	fp, #20
0d084     A7 22 02 AB |  if_e	rdlong	local03, fp
0d088     14 4E 85 A1 |  if_e	sub	fp, #20
0d08c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d090     24 00 90 5D |  if_ne	jmp	#LR__1086
0d094     00 1E 06 F6 | 	mov	local01, #0
0d098     A7 20 02 FB | 	rdlong	local02, fp
0d09c     0C 4E 05 F1 | 	add	fp, #12
0d0a0     A7 22 02 FB | 	rdlong	local03, fp
0d0a4     0C 4E 85 F1 | 	sub	fp, #12
0d0a8     11 21 5A F2 | 	cmps	local02, local03 wcz
0d0ac     01 1E 66 16 |  if_a	neg	local01, #1
0d0b0     A7 1E 62 FC | 	wrlong	local01, fp
0d0b4     EC 00 90 FD | 	jmp	#LR__1090
0d0b8                 | LR__1086
0d0b8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
0d0b8     08 4E 05 F1 | 	add	fp, #8
0d0bc     A7 1E 02 FB | 	rdlong	local01, fp
0d0c0     08 4E 85 F1 | 	sub	fp, #8
0d0c4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d0c8     14 4E 05 A1 |  if_e	add	fp, #20
0d0cc     A7 22 02 AB |  if_e	rdlong	local03, fp
0d0d0     14 4E 85 A1 |  if_e	sub	fp, #20
0d0d4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d0d8     34 00 90 5D |  if_ne	jmp	#LR__1087
0d0dc     00 1E 06 F6 | 	mov	local01, #0
0d0e0     A7 12 02 FB | 	rdlong	arg01, fp
0d0e4     C0 AD B0 FD | 	call	#__system___float_fromuns
0d0e8     FD 12 02 F6 | 	mov	arg01, result1
0d0ec     0C 4E 05 F1 | 	add	fp, #12
0d0f0     A7 14 02 FB | 	rdlong	arg02, fp
0d0f4     0C 4E 85 F1 | 	sub	fp, #12
0d0f8     01 16 66 F6 | 	neg	arg03, #1
0d0fc     08 B5 B0 FD | 	call	#__system___float_cmp
0d100     01 FA 55 F2 | 	cmps	result1, #1 wc
0d104     00 1E 26 36 |  if_ae	not	local01, #0
0d108     A7 1E 62 FC | 	wrlong	local01, fp
0d10c     94 00 90 FD | 	jmp	#LR__1090
0d110                 | LR__1087
0d110                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
0d110     08 4E 05 F1 | 	add	fp, #8
0d114     A7 1E 02 FB | 	rdlong	local01, fp
0d118     08 4E 85 F1 | 	sub	fp, #8
0d11c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d120     14 4E 05 A1 |  if_e	add	fp, #20
0d124     A7 22 02 AB |  if_e	rdlong	local03, fp
0d128     14 4E 85 A1 |  if_e	sub	fp, #20
0d12c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d130     24 00 90 5D |  if_ne	jmp	#LR__1088
0d134     00 1E 06 F6 | 	mov	local01, #0
0d138     A7 20 02 FB | 	rdlong	local02, fp
0d13c     0C 4E 05 F1 | 	add	fp, #12
0d140     A7 22 02 FB | 	rdlong	local03, fp
0d144     0C 4E 85 F1 | 	sub	fp, #12
0d148     11 21 5A F2 | 	cmps	local02, local03 wcz
0d14c     01 1E 66 16 |  if_a	neg	local01, #1
0d150     A7 1E 62 FC | 	wrlong	local01, fp
0d154     4C 00 90 FD | 	jmp	#LR__1090
0d158                 | LR__1088
0d158                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
0d158     08 4E 05 F1 | 	add	fp, #8
0d15c     A7 1E 02 FB | 	rdlong	local01, fp
0d160     08 4E 85 F1 | 	sub	fp, #8
0d164     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d168     14 4E 05 A1 |  if_e	add	fp, #20
0d16c     A7 22 02 AB |  if_e	rdlong	local03, fp
0d170     14 4E 85 A1 |  if_e	sub	fp, #20
0d174     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d178     24 00 90 5D |  if_ne	jmp	#LR__1089
0d17c     00 1E 06 F6 | 	mov	local01, #0
0d180     A7 20 02 FB | 	rdlong	local02, fp
0d184     0C 4E 05 F1 | 	add	fp, #12
0d188     A7 22 02 FB | 	rdlong	local03, fp
0d18c     0C 4E 85 F1 | 	sub	fp, #12
0d190     11 21 1A F2 | 	cmp	local02, local03 wcz
0d194     01 1E 66 16 |  if_a	neg	local01, #1
0d198     A7 1E 62 FC | 	wrlong	local01, fp
0d19c     04 00 90 FD | 	jmp	#LR__1090
0d1a0                 | LR__1089
0d1a0     A7 00 68 FC | 	wrlong	#0, fp
0d1a4                 | LR__1090
0d1a4     08 4E 05 F1 | 	add	fp, #8
0d1a8     A7 38 68 FC | 	wrlong	#28, fp
0d1ac     08 4E 85 F1 | 	sub	fp, #8
0d1b0     A7 12 02 F6 | 	mov	arg01, fp
0d1b4     54 B8 BF FD | 	call	#_push
0d1b8     A7 F0 03 F6 | 	mov	ptra, fp
0d1bc     B2 00 A0 FD | 	call	#popregs_
0d1c0                 | _do_gt_ret
0d1c0     2D 00 64 FD | 	ret
0d1c4                 | 
0d1c4                 | ' 
0d1c4                 | ' sub do_lt
0d1c4                 | _do_lt
0d1c4     05 4A 05 F6 | 	mov	COUNT_, #5
0d1c8     A8 00 A0 FD | 	call	#pushregs_
0d1cc     18 F0 07 F1 | 	add	ptra, #24
0d1d0     A0 B7 BF FD | 	call	#_pop
0d1d4     FD 1E 02 F6 | 	mov	local01, result1
0d1d8     FE 20 02 F6 | 	mov	local02, result2
0d1dc     FF 22 02 F6 | 	mov	local03, result3
0d1e0     0C 4E 05 F1 | 	add	fp, #12
0d1e4     A7 1E 62 FC | 	wrlong	local01, fp
0d1e8     04 4E 05 F1 | 	add	fp, #4
0d1ec     A7 20 62 FC | 	wrlong	local02, fp
0d1f0     04 4E 05 F1 | 	add	fp, #4
0d1f4     A7 22 62 FC | 	wrlong	local03, fp
0d1f8     14 4E 85 F1 | 	sub	fp, #20
0d1fc     74 B7 BF FD | 	call	#_pop
0d200     FF 22 02 F6 | 	mov	local03, result3
0d204     A7 FA 61 FC | 	wrlong	result1, fp
0d208     04 4E 05 F1 | 	add	fp, #4
0d20c     A7 FC 61 FC | 	wrlong	result2, fp
0d210     04 4E 05 F1 | 	add	fp, #4
0d214     A7 22 62 FC | 	wrlong	local03, fp
0d218                 | ' t2=pop()
0d218                 | ' t1=pop()
0d218                 | ' 
0d218                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
0d218     08 4E 85 F1 | 	sub	fp, #8
0d21c     1F 22 0E F2 | 	cmp	local03, #31 wz
0d220     14 4E 05 A1 |  if_e	add	fp, #20
0d224     A7 24 02 AB |  if_e	rdlong	local04, fp
0d228     14 4E 85 A1 |  if_e	sub	fp, #20
0d22c     12 23 02 A6 |  if_e	mov	local03, local04
0d230     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0d234     28 00 90 5D |  if_ne	jmp	#LR__1100
0d238     00 1E 06 F6 | 	mov	local01, #0
0d23c     A7 12 02 FB | 	rdlong	arg01, fp
0d240     0C 4E 05 F1 | 	add	fp, #12
0d244     A7 14 02 FB | 	rdlong	arg02, fp
0d248     0C 4E 85 F1 | 	sub	fp, #12
0d24c     98 85 B0 FD | 	call	#__system___string_cmp
0d250     00 FA 55 F2 | 	cmps	result1, #0 wc
0d254     00 1E 26 C6 |  if_b	not	local01, #0
0d258     A7 1E 62 FC | 	wrlong	local01, fp
0d25c     F4 02 90 FD | 	jmp	#LR__1110
0d260                 | LR__1100
0d260                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
0d260     08 4E 05 F1 | 	add	fp, #8
0d264     A7 1E 02 FB | 	rdlong	local01, fp
0d268     08 4E 85 F1 | 	sub	fp, #8
0d26c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d270     14 4E 05 A1 |  if_e	add	fp, #20
0d274     A7 24 02 AB |  if_e	rdlong	local04, fp
0d278     14 4E 85 A1 |  if_e	sub	fp, #20
0d27c     12 23 02 A6 |  if_e	mov	local03, local04
0d280     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d284     2C 00 90 5D |  if_ne	jmp	#LR__1101
0d288     00 1E 06 F6 | 	mov	local01, #0
0d28c     A7 12 02 FB | 	rdlong	arg01, fp
0d290     0C 4E 05 F1 | 	add	fp, #12
0d294     A7 14 02 FB | 	rdlong	arg02, fp
0d298     0C 4E 85 F1 | 	sub	fp, #12
0d29c     01 16 06 F6 | 	mov	arg03, #1
0d2a0     64 B3 B0 FD | 	call	#__system___float_cmp
0d2a4     00 FA 55 F2 | 	cmps	result1, #0 wc
0d2a8     00 1E 26 C6 |  if_b	not	local01, #0
0d2ac     A7 1E 62 FC | 	wrlong	local01, fp
0d2b0     A0 02 90 FD | 	jmp	#LR__1110
0d2b4                 | LR__1101
0d2b4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
0d2b4     08 4E 05 F1 | 	add	fp, #8
0d2b8     A7 1E 02 FB | 	rdlong	local01, fp
0d2bc     08 4E 85 F1 | 	sub	fp, #8
0d2c0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d2c4     14 4E 05 A1 |  if_e	add	fp, #20
0d2c8     A7 24 02 AB |  if_e	rdlong	local04, fp
0d2cc     14 4E 85 A1 |  if_e	sub	fp, #20
0d2d0     12 23 02 A6 |  if_e	mov	local03, local04
0d2d4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d2d8     48 00 90 5D |  if_ne	jmp	#LR__1102
0d2dc     00 1E 06 F6 | 	mov	local01, #0
0d2e0     A7 20 02 FB | 	rdlong	local02, fp
0d2e4     0C 4E 05 F1 | 	add	fp, #12
0d2e8     A7 12 02 FB | 	rdlong	arg01, fp
0d2ec     0C 4E 85 F1 | 	sub	fp, #12
0d2f0     09 13 52 F6 | 	abs	arg01, arg01 wc
0d2f4     1F 26 C6 C9 |  if_b	decod	local05, #31
0d2f8     00 26 06 36 |  if_ae	mov	local05, #0
0d2fc     A8 AB B0 FD | 	call	#__system___float_fromuns
0d300     13 FB 61 F5 | 	xor	result1, local05
0d304     FD 14 02 F6 | 	mov	arg02, result1
0d308     10 13 02 F6 | 	mov	arg01, local02
0d30c     01 16 06 F6 | 	mov	arg03, #1
0d310     F4 B2 B0 FD | 	call	#__system___float_cmp
0d314     00 FA 55 F2 | 	cmps	result1, #0 wc
0d318     00 1E 26 C6 |  if_b	not	local01, #0
0d31c     A7 1E 62 FC | 	wrlong	local01, fp
0d320     30 02 90 FD | 	jmp	#LR__1110
0d324                 | LR__1102
0d324                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
0d324     08 4E 05 F1 | 	add	fp, #8
0d328     A7 1E 02 FB | 	rdlong	local01, fp
0d32c     08 4E 85 F1 | 	sub	fp, #8
0d330     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d334     14 4E 05 A1 |  if_e	add	fp, #20
0d338     A7 24 02 AB |  if_e	rdlong	local04, fp
0d33c     14 4E 85 A1 |  if_e	sub	fp, #20
0d340     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0d344     38 00 90 5D |  if_ne	jmp	#LR__1103
0d348     00 1E 06 F6 | 	mov	local01, #0
0d34c     A7 20 02 FB | 	rdlong	local02, fp
0d350     0C 4E 05 F1 | 	add	fp, #12
0d354     A7 12 02 FB | 	rdlong	arg01, fp
0d358     0C 4E 85 F1 | 	sub	fp, #12
0d35c     48 AB B0 FD | 	call	#__system___float_fromuns
0d360     FD 14 02 F6 | 	mov	arg02, result1
0d364     10 13 02 F6 | 	mov	arg01, local02
0d368     01 16 06 F6 | 	mov	arg03, #1
0d36c     98 B2 B0 FD | 	call	#__system___float_cmp
0d370     00 FA 55 F2 | 	cmps	result1, #0 wc
0d374     00 1E 26 C6 |  if_b	not	local01, #0
0d378     A7 1E 62 FC | 	wrlong	local01, fp
0d37c     D4 01 90 FD | 	jmp	#LR__1110
0d380                 | LR__1103
0d380                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
0d380     08 4E 05 F1 | 	add	fp, #8
0d384     A7 1E 02 FB | 	rdlong	local01, fp
0d388     08 4E 85 F1 | 	sub	fp, #8
0d38c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d390     14 4E 05 A1 |  if_e	add	fp, #20
0d394     A7 22 02 AB |  if_e	rdlong	local03, fp
0d398     14 4E 85 A1 |  if_e	sub	fp, #20
0d39c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d3a0     44 00 90 5D |  if_ne	jmp	#LR__1104
0d3a4     00 1E 06 F6 | 	mov	local01, #0
0d3a8     A7 12 02 FB | 	rdlong	arg01, fp
0d3ac     09 13 52 F6 | 	abs	arg01, arg01 wc
0d3b0     1F 26 C6 C9 |  if_b	decod	local05, #31
0d3b4     00 26 06 36 |  if_ae	mov	local05, #0
0d3b8     EC AA B0 FD | 	call	#__system___float_fromuns
0d3bc     13 FB 61 F5 | 	xor	result1, local05
0d3c0     FD 12 02 F6 | 	mov	arg01, result1
0d3c4     0C 4E 05 F1 | 	add	fp, #12
0d3c8     A7 14 02 FB | 	rdlong	arg02, fp
0d3cc     0C 4E 85 F1 | 	sub	fp, #12
0d3d0     01 16 06 F6 | 	mov	arg03, #1
0d3d4     30 B2 B0 FD | 	call	#__system___float_cmp
0d3d8     00 FA 55 F2 | 	cmps	result1, #0 wc
0d3dc     00 1E 26 C6 |  if_b	not	local01, #0
0d3e0     A7 1E 62 FC | 	wrlong	local01, fp
0d3e4     6C 01 90 FD | 	jmp	#LR__1110
0d3e8                 | LR__1104
0d3e8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
0d3e8     08 4E 05 F1 | 	add	fp, #8
0d3ec     A7 1E 02 FB | 	rdlong	local01, fp
0d3f0     08 4E 85 F1 | 	sub	fp, #8
0d3f4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d3f8     14 4E 05 A1 |  if_e	add	fp, #20
0d3fc     A7 22 02 AB |  if_e	rdlong	local03, fp
0d400     14 4E 85 A1 |  if_e	sub	fp, #20
0d404     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d408     20 00 90 5D |  if_ne	jmp	#LR__1105
0d40c     A7 20 02 FB | 	rdlong	local02, fp
0d410     0C 4E 05 F1 | 	add	fp, #12
0d414     A7 22 02 FB | 	rdlong	local03, fp
0d418     0C 4E 85 F1 | 	sub	fp, #12
0d41c     11 21 52 F2 | 	cmps	local02, local03 wc
0d420     0F 1F A2 F1 | 	subx	local01, local01
0d424     A7 1E 62 FC | 	wrlong	local01, fp
0d428     28 01 90 FD | 	jmp	#LR__1110
0d42c                 | LR__1105
0d42c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
0d42c     08 4E 05 F1 | 	add	fp, #8
0d430     A7 1E 02 FB | 	rdlong	local01, fp
0d434     08 4E 85 F1 | 	sub	fp, #8
0d438     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d43c     14 4E 05 A1 |  if_e	add	fp, #20
0d440     A7 22 02 AB |  if_e	rdlong	local03, fp
0d444     14 4E 85 A1 |  if_e	sub	fp, #20
0d448     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d44c     20 00 90 5D |  if_ne	jmp	#LR__1106
0d450     A7 20 02 FB | 	rdlong	local02, fp
0d454     0C 4E 05 F1 | 	add	fp, #12
0d458     A7 22 02 FB | 	rdlong	local03, fp
0d45c     0C 4E 85 F1 | 	sub	fp, #12
0d460     11 21 52 F2 | 	cmps	local02, local03 wc
0d464     0F 1F A2 F1 | 	subx	local01, local01
0d468     A7 1E 62 FC | 	wrlong	local01, fp
0d46c     E4 00 90 FD | 	jmp	#LR__1110
0d470                 | LR__1106
0d470                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
0d470     08 4E 05 F1 | 	add	fp, #8
0d474     A7 1E 02 FB | 	rdlong	local01, fp
0d478     08 4E 85 F1 | 	sub	fp, #8
0d47c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d480     14 4E 05 A1 |  if_e	add	fp, #20
0d484     A7 22 02 AB |  if_e	rdlong	local03, fp
0d488     14 4E 85 A1 |  if_e	sub	fp, #20
0d48c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d490     34 00 90 5D |  if_ne	jmp	#LR__1107
0d494     00 1E 06 F6 | 	mov	local01, #0
0d498     A7 12 02 FB | 	rdlong	arg01, fp
0d49c     08 AA B0 FD | 	call	#__system___float_fromuns
0d4a0     FD 12 02 F6 | 	mov	arg01, result1
0d4a4     0C 4E 05 F1 | 	add	fp, #12
0d4a8     A7 14 02 FB | 	rdlong	arg02, fp
0d4ac     0C 4E 85 F1 | 	sub	fp, #12
0d4b0     01 16 06 F6 | 	mov	arg03, #1
0d4b4     50 B1 B0 FD | 	call	#__system___float_cmp
0d4b8     00 FA 55 F2 | 	cmps	result1, #0 wc
0d4bc     00 1E 26 C6 |  if_b	not	local01, #0
0d4c0     A7 1E 62 FC | 	wrlong	local01, fp
0d4c4     8C 00 90 FD | 	jmp	#LR__1110
0d4c8                 | LR__1107
0d4c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
0d4c8     08 4E 05 F1 | 	add	fp, #8
0d4cc     A7 1E 02 FB | 	rdlong	local01, fp
0d4d0     08 4E 85 F1 | 	sub	fp, #8
0d4d4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d4d8     14 4E 05 A1 |  if_e	add	fp, #20
0d4dc     A7 22 02 AB |  if_e	rdlong	local03, fp
0d4e0     14 4E 85 A1 |  if_e	sub	fp, #20
0d4e4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d4e8     20 00 90 5D |  if_ne	jmp	#LR__1108
0d4ec     A7 20 02 FB | 	rdlong	local02, fp
0d4f0     0C 4E 05 F1 | 	add	fp, #12
0d4f4     A7 22 02 FB | 	rdlong	local03, fp
0d4f8     0C 4E 85 F1 | 	sub	fp, #12
0d4fc     11 21 52 F2 | 	cmps	local02, local03 wc
0d500     0F 1F A2 F1 | 	subx	local01, local01
0d504     A7 1E 62 FC | 	wrlong	local01, fp
0d508     48 00 90 FD | 	jmp	#LR__1110
0d50c                 | LR__1108
0d50c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
0d50c     08 4E 05 F1 | 	add	fp, #8
0d510     A7 1E 02 FB | 	rdlong	local01, fp
0d514     08 4E 85 F1 | 	sub	fp, #8
0d518     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d51c     14 4E 05 A1 |  if_e	add	fp, #20
0d520     A7 22 02 AB |  if_e	rdlong	local03, fp
0d524     14 4E 85 A1 |  if_e	sub	fp, #20
0d528     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d52c     20 00 90 5D |  if_ne	jmp	#LR__1109
0d530     A7 20 02 FB | 	rdlong	local02, fp
0d534     0C 4E 05 F1 | 	add	fp, #12
0d538     A7 22 02 FB | 	rdlong	local03, fp
0d53c     0C 4E 85 F1 | 	sub	fp, #12
0d540     11 21 12 F2 | 	cmp	local02, local03 wc
0d544     0F 1F A2 F1 | 	subx	local01, local01
0d548     A7 1E 62 FC | 	wrlong	local01, fp
0d54c     04 00 90 FD | 	jmp	#LR__1110
0d550                 | LR__1109
0d550     A7 00 68 FC | 	wrlong	#0, fp
0d554                 | LR__1110
0d554     08 4E 05 F1 | 	add	fp, #8
0d558     A7 38 68 FC | 	wrlong	#28, fp
0d55c     08 4E 85 F1 | 	sub	fp, #8
0d560     A7 12 02 F6 | 	mov	arg01, fp
0d564     A4 B4 BF FD | 	call	#_push
0d568     A7 F0 03 F6 | 	mov	ptra, fp
0d56c     B2 00 A0 FD | 	call	#popregs_
0d570                 | _do_lt_ret
0d570     2D 00 64 FD | 	ret
0d574                 | 
0d574                 | ' 
0d574                 | ' sub do_ge
0d574                 | _do_ge
0d574     05 4A 05 F6 | 	mov	COUNT_, #5
0d578     A8 00 A0 FD | 	call	#pushregs_
0d57c     18 F0 07 F1 | 	add	ptra, #24
0d580     F0 B3 BF FD | 	call	#_pop
0d584     FD 1E 02 F6 | 	mov	local01, result1
0d588     FE 20 02 F6 | 	mov	local02, result2
0d58c     FF 22 02 F6 | 	mov	local03, result3
0d590     0C 4E 05 F1 | 	add	fp, #12
0d594     A7 1E 62 FC | 	wrlong	local01, fp
0d598     04 4E 05 F1 | 	add	fp, #4
0d59c     A7 20 62 FC | 	wrlong	local02, fp
0d5a0     04 4E 05 F1 | 	add	fp, #4
0d5a4     A7 22 62 FC | 	wrlong	local03, fp
0d5a8     14 4E 85 F1 | 	sub	fp, #20
0d5ac     C4 B3 BF FD | 	call	#_pop
0d5b0     FF 22 02 F6 | 	mov	local03, result3
0d5b4     A7 FA 61 FC | 	wrlong	result1, fp
0d5b8     04 4E 05 F1 | 	add	fp, #4
0d5bc     A7 FC 61 FC | 	wrlong	result2, fp
0d5c0     04 4E 05 F1 | 	add	fp, #4
0d5c4     A7 22 62 FC | 	wrlong	local03, fp
0d5c8                 | ' t2=pop()
0d5c8                 | ' t1=pop()
0d5c8                 | ' 
0d5c8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
0d5c8     08 4E 85 F1 | 	sub	fp, #8
0d5cc     1F 22 0E F2 | 	cmp	local03, #31 wz
0d5d0     14 4E 05 A1 |  if_e	add	fp, #20
0d5d4     A7 24 02 AB |  if_e	rdlong	local04, fp
0d5d8     14 4E 85 A1 |  if_e	sub	fp, #20
0d5dc     12 23 02 A6 |  if_e	mov	local03, local04
0d5e0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0d5e4     28 00 90 5D |  if_ne	jmp	#LR__1120
0d5e8     00 1E 06 F6 | 	mov	local01, #0
0d5ec     A7 12 02 FB | 	rdlong	arg01, fp
0d5f0     0C 4E 05 F1 | 	add	fp, #12
0d5f4     A7 14 02 FB | 	rdlong	arg02, fp
0d5f8     0C 4E 85 F1 | 	sub	fp, #12
0d5fc     E8 81 B0 FD | 	call	#__system___string_cmp
0d600     00 FA 55 F2 | 	cmps	result1, #0 wc
0d604     00 1E 26 36 |  if_ae	not	local01, #0
0d608     A7 1E 62 FC | 	wrlong	local01, fp
0d60c     04 03 90 FD | 	jmp	#LR__1130
0d610                 | LR__1120
0d610                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
0d610     08 4E 05 F1 | 	add	fp, #8
0d614     A7 1E 02 FB | 	rdlong	local01, fp
0d618     08 4E 85 F1 | 	sub	fp, #8
0d61c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d620     14 4E 05 A1 |  if_e	add	fp, #20
0d624     A7 24 02 AB |  if_e	rdlong	local04, fp
0d628     14 4E 85 A1 |  if_e	sub	fp, #20
0d62c     12 23 02 A6 |  if_e	mov	local03, local04
0d630     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d634     2C 00 90 5D |  if_ne	jmp	#LR__1121
0d638     00 1E 06 F6 | 	mov	local01, #0
0d63c     A7 12 02 FB | 	rdlong	arg01, fp
0d640     0C 4E 05 F1 | 	add	fp, #12
0d644     A7 14 02 FB | 	rdlong	arg02, fp
0d648     0C 4E 85 F1 | 	sub	fp, #12
0d64c     01 16 66 F6 | 	neg	arg03, #1
0d650     B4 AF B0 FD | 	call	#__system___float_cmp
0d654     00 FA 55 F2 | 	cmps	result1, #0 wc
0d658     00 1E 26 36 |  if_ae	not	local01, #0
0d65c     A7 1E 62 FC | 	wrlong	local01, fp
0d660     B0 02 90 FD | 	jmp	#LR__1130
0d664                 | LR__1121
0d664                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
0d664     08 4E 05 F1 | 	add	fp, #8
0d668     A7 1E 02 FB | 	rdlong	local01, fp
0d66c     08 4E 85 F1 | 	sub	fp, #8
0d670     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d674     14 4E 05 A1 |  if_e	add	fp, #20
0d678     A7 24 02 AB |  if_e	rdlong	local04, fp
0d67c     14 4E 85 A1 |  if_e	sub	fp, #20
0d680     12 23 02 A6 |  if_e	mov	local03, local04
0d684     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d688     48 00 90 5D |  if_ne	jmp	#LR__1122
0d68c     00 1E 06 F6 | 	mov	local01, #0
0d690     A7 20 02 FB | 	rdlong	local02, fp
0d694     0C 4E 05 F1 | 	add	fp, #12
0d698     A7 12 02 FB | 	rdlong	arg01, fp
0d69c     0C 4E 85 F1 | 	sub	fp, #12
0d6a0     09 13 52 F6 | 	abs	arg01, arg01 wc
0d6a4     1F 26 C6 C9 |  if_b	decod	local05, #31
0d6a8     00 26 06 36 |  if_ae	mov	local05, #0
0d6ac     F8 A7 B0 FD | 	call	#__system___float_fromuns
0d6b0     13 FB 61 F5 | 	xor	result1, local05
0d6b4     FD 14 02 F6 | 	mov	arg02, result1
0d6b8     10 13 02 F6 | 	mov	arg01, local02
0d6bc     01 16 66 F6 | 	neg	arg03, #1
0d6c0     44 AF B0 FD | 	call	#__system___float_cmp
0d6c4     00 FA 55 F2 | 	cmps	result1, #0 wc
0d6c8     00 1E 26 36 |  if_ae	not	local01, #0
0d6cc     A7 1E 62 FC | 	wrlong	local01, fp
0d6d0     40 02 90 FD | 	jmp	#LR__1130
0d6d4                 | LR__1122
0d6d4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
0d6d4     08 4E 05 F1 | 	add	fp, #8
0d6d8     A7 1E 02 FB | 	rdlong	local01, fp
0d6dc     08 4E 85 F1 | 	sub	fp, #8
0d6e0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d6e4     14 4E 05 A1 |  if_e	add	fp, #20
0d6e8     A7 24 02 AB |  if_e	rdlong	local04, fp
0d6ec     14 4E 85 A1 |  if_e	sub	fp, #20
0d6f0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0d6f4     38 00 90 5D |  if_ne	jmp	#LR__1123
0d6f8     00 1E 06 F6 | 	mov	local01, #0
0d6fc     A7 20 02 FB | 	rdlong	local02, fp
0d700     0C 4E 05 F1 | 	add	fp, #12
0d704     A7 12 02 FB | 	rdlong	arg01, fp
0d708     0C 4E 85 F1 | 	sub	fp, #12
0d70c     98 A7 B0 FD | 	call	#__system___float_fromuns
0d710     FD 14 02 F6 | 	mov	arg02, result1
0d714     10 13 02 F6 | 	mov	arg01, local02
0d718     01 16 66 F6 | 	neg	arg03, #1
0d71c     E8 AE B0 FD | 	call	#__system___float_cmp
0d720     00 FA 55 F2 | 	cmps	result1, #0 wc
0d724     00 1E 26 36 |  if_ae	not	local01, #0
0d728     A7 1E 62 FC | 	wrlong	local01, fp
0d72c     E4 01 90 FD | 	jmp	#LR__1130
0d730                 | LR__1123
0d730                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
0d730     08 4E 05 F1 | 	add	fp, #8
0d734     A7 1E 02 FB | 	rdlong	local01, fp
0d738     08 4E 85 F1 | 	sub	fp, #8
0d73c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d740     14 4E 05 A1 |  if_e	add	fp, #20
0d744     A7 22 02 AB |  if_e	rdlong	local03, fp
0d748     14 4E 85 A1 |  if_e	sub	fp, #20
0d74c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d750     44 00 90 5D |  if_ne	jmp	#LR__1124
0d754     00 1E 06 F6 | 	mov	local01, #0
0d758     A7 12 02 FB | 	rdlong	arg01, fp
0d75c     09 13 52 F6 | 	abs	arg01, arg01 wc
0d760     1F 26 C6 C9 |  if_b	decod	local05, #31
0d764     00 26 06 36 |  if_ae	mov	local05, #0
0d768     3C A7 B0 FD | 	call	#__system___float_fromuns
0d76c     13 FB 61 F5 | 	xor	result1, local05
0d770     FD 12 02 F6 | 	mov	arg01, result1
0d774     0C 4E 05 F1 | 	add	fp, #12
0d778     A7 14 02 FB | 	rdlong	arg02, fp
0d77c     0C 4E 85 F1 | 	sub	fp, #12
0d780     01 16 66 F6 | 	neg	arg03, #1
0d784     80 AE B0 FD | 	call	#__system___float_cmp
0d788     00 FA 55 F2 | 	cmps	result1, #0 wc
0d78c     00 1E 26 36 |  if_ae	not	local01, #0
0d790     A7 1E 62 FC | 	wrlong	local01, fp
0d794     7C 01 90 FD | 	jmp	#LR__1130
0d798                 | LR__1124
0d798                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
0d798     08 4E 05 F1 | 	add	fp, #8
0d79c     A7 1E 02 FB | 	rdlong	local01, fp
0d7a0     08 4E 85 F1 | 	sub	fp, #8
0d7a4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d7a8     14 4E 05 A1 |  if_e	add	fp, #20
0d7ac     A7 22 02 AB |  if_e	rdlong	local03, fp
0d7b0     14 4E 85 A1 |  if_e	sub	fp, #20
0d7b4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d7b8     24 00 90 5D |  if_ne	jmp	#LR__1125
0d7bc     00 1E 06 F6 | 	mov	local01, #0
0d7c0     A7 20 02 FB | 	rdlong	local02, fp
0d7c4     0C 4E 05 F1 | 	add	fp, #12
0d7c8     A7 22 02 FB | 	rdlong	local03, fp
0d7cc     0C 4E 85 F1 | 	sub	fp, #12
0d7d0     11 21 52 F2 | 	cmps	local02, local03 wc
0d7d4     01 1E 66 36 |  if_ae	neg	local01, #1
0d7d8     A7 1E 62 FC | 	wrlong	local01, fp
0d7dc     34 01 90 FD | 	jmp	#LR__1130
0d7e0                 | LR__1125
0d7e0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
0d7e0     08 4E 05 F1 | 	add	fp, #8
0d7e4     A7 1E 02 FB | 	rdlong	local01, fp
0d7e8     08 4E 85 F1 | 	sub	fp, #8
0d7ec     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d7f0     14 4E 05 A1 |  if_e	add	fp, #20
0d7f4     A7 22 02 AB |  if_e	rdlong	local03, fp
0d7f8     14 4E 85 A1 |  if_e	sub	fp, #20
0d7fc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d800     24 00 90 5D |  if_ne	jmp	#LR__1126
0d804     00 1E 06 F6 | 	mov	local01, #0
0d808     A7 20 02 FB | 	rdlong	local02, fp
0d80c     0C 4E 05 F1 | 	add	fp, #12
0d810     A7 22 02 FB | 	rdlong	local03, fp
0d814     0C 4E 85 F1 | 	sub	fp, #12
0d818     11 21 52 F2 | 	cmps	local02, local03 wc
0d81c     01 1E 66 36 |  if_ae	neg	local01, #1
0d820     A7 1E 62 FC | 	wrlong	local01, fp
0d824     EC 00 90 FD | 	jmp	#LR__1130
0d828                 | LR__1126
0d828                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
0d828     08 4E 05 F1 | 	add	fp, #8
0d82c     A7 1E 02 FB | 	rdlong	local01, fp
0d830     08 4E 85 F1 | 	sub	fp, #8
0d834     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d838     14 4E 05 A1 |  if_e	add	fp, #20
0d83c     A7 22 02 AB |  if_e	rdlong	local03, fp
0d840     14 4E 85 A1 |  if_e	sub	fp, #20
0d844     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d848     34 00 90 5D |  if_ne	jmp	#LR__1127
0d84c     00 1E 06 F6 | 	mov	local01, #0
0d850     A7 12 02 FB | 	rdlong	arg01, fp
0d854     50 A6 B0 FD | 	call	#__system___float_fromuns
0d858     FD 12 02 F6 | 	mov	arg01, result1
0d85c     0C 4E 05 F1 | 	add	fp, #12
0d860     A7 14 02 FB | 	rdlong	arg02, fp
0d864     0C 4E 85 F1 | 	sub	fp, #12
0d868     01 16 66 F6 | 	neg	arg03, #1
0d86c     98 AD B0 FD | 	call	#__system___float_cmp
0d870     00 FA 55 F2 | 	cmps	result1, #0 wc
0d874     00 1E 26 36 |  if_ae	not	local01, #0
0d878     A7 1E 62 FC | 	wrlong	local01, fp
0d87c     94 00 90 FD | 	jmp	#LR__1130
0d880                 | LR__1127
0d880                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
0d880     08 4E 05 F1 | 	add	fp, #8
0d884     A7 1E 02 FB | 	rdlong	local01, fp
0d888     08 4E 85 F1 | 	sub	fp, #8
0d88c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d890     14 4E 05 A1 |  if_e	add	fp, #20
0d894     A7 22 02 AB |  if_e	rdlong	local03, fp
0d898     14 4E 85 A1 |  if_e	sub	fp, #20
0d89c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d8a0     24 00 90 5D |  if_ne	jmp	#LR__1128
0d8a4     00 1E 06 F6 | 	mov	local01, #0
0d8a8     A7 20 02 FB | 	rdlong	local02, fp
0d8ac     0C 4E 05 F1 | 	add	fp, #12
0d8b0     A7 22 02 FB | 	rdlong	local03, fp
0d8b4     0C 4E 85 F1 | 	sub	fp, #12
0d8b8     11 21 52 F2 | 	cmps	local02, local03 wc
0d8bc     01 1E 66 36 |  if_ae	neg	local01, #1
0d8c0     A7 1E 62 FC | 	wrlong	local01, fp
0d8c4     4C 00 90 FD | 	jmp	#LR__1130
0d8c8                 | LR__1128
0d8c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
0d8c8     08 4E 05 F1 | 	add	fp, #8
0d8cc     A7 1E 02 FB | 	rdlong	local01, fp
0d8d0     08 4E 85 F1 | 	sub	fp, #8
0d8d4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d8d8     14 4E 05 A1 |  if_e	add	fp, #20
0d8dc     A7 22 02 AB |  if_e	rdlong	local03, fp
0d8e0     14 4E 85 A1 |  if_e	sub	fp, #20
0d8e4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d8e8     24 00 90 5D |  if_ne	jmp	#LR__1129
0d8ec     00 1E 06 F6 | 	mov	local01, #0
0d8f0     A7 20 02 FB | 	rdlong	local02, fp
0d8f4     0C 4E 05 F1 | 	add	fp, #12
0d8f8     A7 22 02 FB | 	rdlong	local03, fp
0d8fc     0C 4E 85 F1 | 	sub	fp, #12
0d900     11 21 12 F2 | 	cmp	local02, local03 wc
0d904     01 1E 66 36 |  if_ae	neg	local01, #1
0d908     A7 1E 62 FC | 	wrlong	local01, fp
0d90c     04 00 90 FD | 	jmp	#LR__1130
0d910                 | LR__1129
0d910     A7 00 68 FC | 	wrlong	#0, fp
0d914                 | LR__1130
0d914     08 4E 05 F1 | 	add	fp, #8
0d918     A7 38 68 FC | 	wrlong	#28, fp
0d91c     08 4E 85 F1 | 	sub	fp, #8
0d920     A7 12 02 F6 | 	mov	arg01, fp
0d924     E4 B0 BF FD | 	call	#_push
0d928     A7 F0 03 F6 | 	mov	ptra, fp
0d92c     B2 00 A0 FD | 	call	#popregs_
0d930                 | _do_ge_ret
0d930     2D 00 64 FD | 	ret
0d934                 | 
0d934                 | ' 
0d934                 | ' sub do_le
0d934                 | _do_le
0d934     05 4A 05 F6 | 	mov	COUNT_, #5
0d938     A8 00 A0 FD | 	call	#pushregs_
0d93c     18 F0 07 F1 | 	add	ptra, #24
0d940     30 B0 BF FD | 	call	#_pop
0d944     FD 1E 02 F6 | 	mov	local01, result1
0d948     FE 20 02 F6 | 	mov	local02, result2
0d94c     FF 22 02 F6 | 	mov	local03, result3
0d950     0C 4E 05 F1 | 	add	fp, #12
0d954     A7 1E 62 FC | 	wrlong	local01, fp
0d958     04 4E 05 F1 | 	add	fp, #4
0d95c     A7 20 62 FC | 	wrlong	local02, fp
0d960     04 4E 05 F1 | 	add	fp, #4
0d964     A7 22 62 FC | 	wrlong	local03, fp
0d968     14 4E 85 F1 | 	sub	fp, #20
0d96c     04 B0 BF FD | 	call	#_pop
0d970     FF 22 02 F6 | 	mov	local03, result3
0d974     A7 FA 61 FC | 	wrlong	result1, fp
0d978     04 4E 05 F1 | 	add	fp, #4
0d97c     A7 FC 61 FC | 	wrlong	result2, fp
0d980     04 4E 05 F1 | 	add	fp, #4
0d984     A7 22 62 FC | 	wrlong	local03, fp
0d988                 | ' t2=pop()
0d988                 | ' t1=pop()
0d988                 | ' 
0d988                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
0d988     08 4E 85 F1 | 	sub	fp, #8
0d98c     1F 22 0E F2 | 	cmp	local03, #31 wz
0d990     14 4E 05 A1 |  if_e	add	fp, #20
0d994     A7 24 02 AB |  if_e	rdlong	local04, fp
0d998     14 4E 85 A1 |  if_e	sub	fp, #20
0d99c     12 23 02 A6 |  if_e	mov	local03, local04
0d9a0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0d9a4     28 00 90 5D |  if_ne	jmp	#LR__1140
0d9a8     00 1E 06 F6 | 	mov	local01, #0
0d9ac     A7 12 02 FB | 	rdlong	arg01, fp
0d9b0     0C 4E 05 F1 | 	add	fp, #12
0d9b4     A7 14 02 FB | 	rdlong	arg02, fp
0d9b8     0C 4E 85 F1 | 	sub	fp, #12
0d9bc     28 7E B0 FD | 	call	#__system___string_cmp
0d9c0     01 FA 55 F2 | 	cmps	result1, #1 wc
0d9c4     00 1E 26 C6 |  if_b	not	local01, #0
0d9c8     A7 1E 62 FC | 	wrlong	local01, fp
0d9cc     04 03 90 FD | 	jmp	#LR__1150
0d9d0                 | LR__1140
0d9d0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
0d9d0     08 4E 05 F1 | 	add	fp, #8
0d9d4     A7 1E 02 FB | 	rdlong	local01, fp
0d9d8     08 4E 85 F1 | 	sub	fp, #8
0d9dc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d9e0     14 4E 05 A1 |  if_e	add	fp, #20
0d9e4     A7 24 02 AB |  if_e	rdlong	local04, fp
0d9e8     14 4E 85 A1 |  if_e	sub	fp, #20
0d9ec     12 23 02 A6 |  if_e	mov	local03, local04
0d9f0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d9f4     2C 00 90 5D |  if_ne	jmp	#LR__1141
0d9f8     00 1E 06 F6 | 	mov	local01, #0
0d9fc     A7 12 02 FB | 	rdlong	arg01, fp
0da00     0C 4E 05 F1 | 	add	fp, #12
0da04     A7 14 02 FB | 	rdlong	arg02, fp
0da08     0C 4E 85 F1 | 	sub	fp, #12
0da0c     01 16 06 F6 | 	mov	arg03, #1
0da10     F4 AB B0 FD | 	call	#__system___float_cmp
0da14     01 FA 55 F2 | 	cmps	result1, #1 wc
0da18     00 1E 26 C6 |  if_b	not	local01, #0
0da1c     A7 1E 62 FC | 	wrlong	local01, fp
0da20     B0 02 90 FD | 	jmp	#LR__1150
0da24                 | LR__1141
0da24                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
0da24     08 4E 05 F1 | 	add	fp, #8
0da28     A7 1E 02 FB | 	rdlong	local01, fp
0da2c     08 4E 85 F1 | 	sub	fp, #8
0da30     1E 1E 0E F2 | 	cmp	local01, #30 wz
0da34     14 4E 05 A1 |  if_e	add	fp, #20
0da38     A7 24 02 AB |  if_e	rdlong	local04, fp
0da3c     14 4E 85 A1 |  if_e	sub	fp, #20
0da40     12 23 02 A6 |  if_e	mov	local03, local04
0da44     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0da48     48 00 90 5D |  if_ne	jmp	#LR__1142
0da4c     00 1E 06 F6 | 	mov	local01, #0
0da50     A7 20 02 FB | 	rdlong	local02, fp
0da54     0C 4E 05 F1 | 	add	fp, #12
0da58     A7 12 02 FB | 	rdlong	arg01, fp
0da5c     0C 4E 85 F1 | 	sub	fp, #12
0da60     09 13 52 F6 | 	abs	arg01, arg01 wc
0da64     1F 26 C6 C9 |  if_b	decod	local05, #31
0da68     00 26 06 36 |  if_ae	mov	local05, #0
0da6c     38 A4 B0 FD | 	call	#__system___float_fromuns
0da70     13 FB 61 F5 | 	xor	result1, local05
0da74     FD 14 02 F6 | 	mov	arg02, result1
0da78     10 13 02 F6 | 	mov	arg01, local02
0da7c     01 16 06 F6 | 	mov	arg03, #1
0da80     84 AB B0 FD | 	call	#__system___float_cmp
0da84     01 FA 55 F2 | 	cmps	result1, #1 wc
0da88     00 1E 26 C6 |  if_b	not	local01, #0
0da8c     A7 1E 62 FC | 	wrlong	local01, fp
0da90     40 02 90 FD | 	jmp	#LR__1150
0da94                 | LR__1142
0da94                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
0da94     08 4E 05 F1 | 	add	fp, #8
0da98     A7 1E 02 FB | 	rdlong	local01, fp
0da9c     08 4E 85 F1 | 	sub	fp, #8
0daa0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0daa4     14 4E 05 A1 |  if_e	add	fp, #20
0daa8     A7 24 02 AB |  if_e	rdlong	local04, fp
0daac     14 4E 85 A1 |  if_e	sub	fp, #20
0dab0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0dab4     38 00 90 5D |  if_ne	jmp	#LR__1143
0dab8     00 1E 06 F6 | 	mov	local01, #0
0dabc     A7 20 02 FB | 	rdlong	local02, fp
0dac0     0C 4E 05 F1 | 	add	fp, #12
0dac4     A7 12 02 FB | 	rdlong	arg01, fp
0dac8     0C 4E 85 F1 | 	sub	fp, #12
0dacc     D8 A3 B0 FD | 	call	#__system___float_fromuns
0dad0     FD 14 02 F6 | 	mov	arg02, result1
0dad4     10 13 02 F6 | 	mov	arg01, local02
0dad8     01 16 06 F6 | 	mov	arg03, #1
0dadc     28 AB B0 FD | 	call	#__system___float_cmp
0dae0     01 FA 55 F2 | 	cmps	result1, #1 wc
0dae4     00 1E 26 C6 |  if_b	not	local01, #0
0dae8     A7 1E 62 FC | 	wrlong	local01, fp
0daec     E4 01 90 FD | 	jmp	#LR__1150
0daf0                 | LR__1143
0daf0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
0daf0     08 4E 05 F1 | 	add	fp, #8
0daf4     A7 1E 02 FB | 	rdlong	local01, fp
0daf8     08 4E 85 F1 | 	sub	fp, #8
0dafc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0db00     14 4E 05 A1 |  if_e	add	fp, #20
0db04     A7 22 02 AB |  if_e	rdlong	local03, fp
0db08     14 4E 85 A1 |  if_e	sub	fp, #20
0db0c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0db10     44 00 90 5D |  if_ne	jmp	#LR__1144
0db14     00 1E 06 F6 | 	mov	local01, #0
0db18     A7 12 02 FB | 	rdlong	arg01, fp
0db1c     09 13 52 F6 | 	abs	arg01, arg01 wc
0db20     1F 26 C6 C9 |  if_b	decod	local05, #31
0db24     00 26 06 36 |  if_ae	mov	local05, #0
0db28     7C A3 B0 FD | 	call	#__system___float_fromuns
0db2c     13 FB 61 F5 | 	xor	result1, local05
0db30     FD 12 02 F6 | 	mov	arg01, result1
0db34     0C 4E 05 F1 | 	add	fp, #12
0db38     A7 14 02 FB | 	rdlong	arg02, fp
0db3c     0C 4E 85 F1 | 	sub	fp, #12
0db40     01 16 06 F6 | 	mov	arg03, #1
0db44     C0 AA B0 FD | 	call	#__system___float_cmp
0db48     01 FA 55 F2 | 	cmps	result1, #1 wc
0db4c     00 1E 26 C6 |  if_b	not	local01, #0
0db50     A7 1E 62 FC | 	wrlong	local01, fp
0db54     7C 01 90 FD | 	jmp	#LR__1150
0db58                 | LR__1144
0db58                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
0db58     08 4E 05 F1 | 	add	fp, #8
0db5c     A7 1E 02 FB | 	rdlong	local01, fp
0db60     08 4E 85 F1 | 	sub	fp, #8
0db64     1C 1E 0E F2 | 	cmp	local01, #28 wz
0db68     14 4E 05 A1 |  if_e	add	fp, #20
0db6c     A7 22 02 AB |  if_e	rdlong	local03, fp
0db70     14 4E 85 A1 |  if_e	sub	fp, #20
0db74     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0db78     24 00 90 5D |  if_ne	jmp	#LR__1145
0db7c     00 1E 06 F6 | 	mov	local01, #0
0db80     A7 20 02 FB | 	rdlong	local02, fp
0db84     0C 4E 05 F1 | 	add	fp, #12
0db88     A7 22 02 FB | 	rdlong	local03, fp
0db8c     0C 4E 85 F1 | 	sub	fp, #12
0db90     11 21 5A F2 | 	cmps	local02, local03 wcz
0db94     01 1E 66 E6 |  if_be	neg	local01, #1
0db98     A7 1E 62 FC | 	wrlong	local01, fp
0db9c     34 01 90 FD | 	jmp	#LR__1150
0dba0                 | LR__1145
0dba0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
0dba0     08 4E 05 F1 | 	add	fp, #8
0dba4     A7 1E 02 FB | 	rdlong	local01, fp
0dba8     08 4E 85 F1 | 	sub	fp, #8
0dbac     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dbb0     14 4E 05 A1 |  if_e	add	fp, #20
0dbb4     A7 22 02 AB |  if_e	rdlong	local03, fp
0dbb8     14 4E 85 A1 |  if_e	sub	fp, #20
0dbbc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0dbc0     24 00 90 5D |  if_ne	jmp	#LR__1146
0dbc4     00 1E 06 F6 | 	mov	local01, #0
0dbc8     A7 20 02 FB | 	rdlong	local02, fp
0dbcc     0C 4E 05 F1 | 	add	fp, #12
0dbd0     A7 22 02 FB | 	rdlong	local03, fp
0dbd4     0C 4E 85 F1 | 	sub	fp, #12
0dbd8     11 21 5A F2 | 	cmps	local02, local03 wcz
0dbdc     01 1E 66 E6 |  if_be	neg	local01, #1
0dbe0     A7 1E 62 FC | 	wrlong	local01, fp
0dbe4     EC 00 90 FD | 	jmp	#LR__1150
0dbe8                 | LR__1146
0dbe8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
0dbe8     08 4E 05 F1 | 	add	fp, #8
0dbec     A7 1E 02 FB | 	rdlong	local01, fp
0dbf0     08 4E 85 F1 | 	sub	fp, #8
0dbf4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0dbf8     14 4E 05 A1 |  if_e	add	fp, #20
0dbfc     A7 22 02 AB |  if_e	rdlong	local03, fp
0dc00     14 4E 85 A1 |  if_e	sub	fp, #20
0dc04     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0dc08     34 00 90 5D |  if_ne	jmp	#LR__1147
0dc0c     00 1E 06 F6 | 	mov	local01, #0
0dc10     A7 12 02 FB | 	rdlong	arg01, fp
0dc14     90 A2 B0 FD | 	call	#__system___float_fromuns
0dc18     FD 12 02 F6 | 	mov	arg01, result1
0dc1c     0C 4E 05 F1 | 	add	fp, #12
0dc20     A7 14 02 FB | 	rdlong	arg02, fp
0dc24     0C 4E 85 F1 | 	sub	fp, #12
0dc28     01 16 06 F6 | 	mov	arg03, #1
0dc2c     D8 A9 B0 FD | 	call	#__system___float_cmp
0dc30     01 FA 55 F2 | 	cmps	result1, #1 wc
0dc34     00 1E 26 C6 |  if_b	not	local01, #0
0dc38     A7 1E 62 FC | 	wrlong	local01, fp
0dc3c     94 00 90 FD | 	jmp	#LR__1150
0dc40                 | LR__1147
0dc40                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
0dc40     08 4E 05 F1 | 	add	fp, #8
0dc44     A7 1E 02 FB | 	rdlong	local01, fp
0dc48     08 4E 85 F1 | 	sub	fp, #8
0dc4c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0dc50     14 4E 05 A1 |  if_e	add	fp, #20
0dc54     A7 22 02 AB |  if_e	rdlong	local03, fp
0dc58     14 4E 85 A1 |  if_e	sub	fp, #20
0dc5c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0dc60     24 00 90 5D |  if_ne	jmp	#LR__1148
0dc64     00 1E 06 F6 | 	mov	local01, #0
0dc68     A7 20 02 FB | 	rdlong	local02, fp
0dc6c     0C 4E 05 F1 | 	add	fp, #12
0dc70     A7 22 02 FB | 	rdlong	local03, fp
0dc74     0C 4E 85 F1 | 	sub	fp, #12
0dc78     11 21 5A F2 | 	cmps	local02, local03 wcz
0dc7c     01 1E 66 E6 |  if_be	neg	local01, #1
0dc80     A7 1E 62 FC | 	wrlong	local01, fp
0dc84     4C 00 90 FD | 	jmp	#LR__1150
0dc88                 | LR__1148
0dc88                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
0dc88     08 4E 05 F1 | 	add	fp, #8
0dc8c     A7 1E 02 FB | 	rdlong	local01, fp
0dc90     08 4E 85 F1 | 	sub	fp, #8
0dc94     1D 1E 0E F2 | 	cmp	local01, #29 wz
0dc98     14 4E 05 A1 |  if_e	add	fp, #20
0dc9c     A7 22 02 AB |  if_e	rdlong	local03, fp
0dca0     14 4E 85 A1 |  if_e	sub	fp, #20
0dca4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0dca8     24 00 90 5D |  if_ne	jmp	#LR__1149
0dcac     00 1E 06 F6 | 	mov	local01, #0
0dcb0     A7 20 02 FB | 	rdlong	local02, fp
0dcb4     0C 4E 05 F1 | 	add	fp, #12
0dcb8     A7 22 02 FB | 	rdlong	local03, fp
0dcbc     0C 4E 85 F1 | 	sub	fp, #12
0dcc0     11 21 1A F2 | 	cmp	local02, local03 wcz
0dcc4     01 1E 66 E6 |  if_be	neg	local01, #1
0dcc8     A7 1E 62 FC | 	wrlong	local01, fp
0dccc     04 00 90 FD | 	jmp	#LR__1150
0dcd0                 | LR__1149
0dcd0     A7 00 68 FC | 	wrlong	#0, fp
0dcd4                 | LR__1150
0dcd4     08 4E 05 F1 | 	add	fp, #8
0dcd8     A7 38 68 FC | 	wrlong	#28, fp
0dcdc     08 4E 85 F1 | 	sub	fp, #8
0dce0     A7 12 02 F6 | 	mov	arg01, fp
0dce4     24 AD BF FD | 	call	#_push
0dce8     A7 F0 03 F6 | 	mov	ptra, fp
0dcec     B2 00 A0 FD | 	call	#popregs_
0dcf0                 | _do_le_ret
0dcf0     2D 00 64 FD | 	ret
0dcf4                 | 
0dcf4                 | ' 
0dcf4                 | ' 
0dcf4                 | ' sub do_ne
0dcf4                 | _do_ne
0dcf4     05 4A 05 F6 | 	mov	COUNT_, #5
0dcf8     A8 00 A0 FD | 	call	#pushregs_
0dcfc     18 F0 07 F1 | 	add	ptra, #24
0dd00     70 AC BF FD | 	call	#_pop
0dd04     FD 1E 02 F6 | 	mov	local01, result1
0dd08     FE 20 02 F6 | 	mov	local02, result2
0dd0c     FF 22 02 F6 | 	mov	local03, result3
0dd10     0C 4E 05 F1 | 	add	fp, #12
0dd14     A7 1E 62 FC | 	wrlong	local01, fp
0dd18     04 4E 05 F1 | 	add	fp, #4
0dd1c     A7 20 62 FC | 	wrlong	local02, fp
0dd20     04 4E 05 F1 | 	add	fp, #4
0dd24     A7 22 62 FC | 	wrlong	local03, fp
0dd28     14 4E 85 F1 | 	sub	fp, #20
0dd2c     44 AC BF FD | 	call	#_pop
0dd30     FF 22 02 F6 | 	mov	local03, result3
0dd34     A7 FA 61 FC | 	wrlong	result1, fp
0dd38     04 4E 05 F1 | 	add	fp, #4
0dd3c     A7 FC 61 FC | 	wrlong	result2, fp
0dd40     04 4E 05 F1 | 	add	fp, #4
0dd44     A7 22 62 FC | 	wrlong	local03, fp
0dd48                 | ' t2=pop()
0dd48                 | ' t1=pop()
0dd48                 | ' 
0dd48                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
0dd48     08 4E 85 F1 | 	sub	fp, #8
0dd4c     1F 22 0E F2 | 	cmp	local03, #31 wz
0dd50     14 4E 05 A1 |  if_e	add	fp, #20
0dd54     A7 24 02 AB |  if_e	rdlong	local04, fp
0dd58     14 4E 85 A1 |  if_e	sub	fp, #20
0dd5c     12 23 02 A6 |  if_e	mov	local03, local04
0dd60     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0dd64     28 00 90 5D |  if_ne	jmp	#LR__1160
0dd68     00 1E 06 F6 | 	mov	local01, #0
0dd6c     A7 12 02 FB | 	rdlong	arg01, fp
0dd70     0C 4E 05 F1 | 	add	fp, #12
0dd74     A7 14 02 FB | 	rdlong	arg02, fp
0dd78     0C 4E 85 F1 | 	sub	fp, #12
0dd7c     68 7A B0 FD | 	call	#__system___string_cmp
0dd80     00 FA 0D F2 | 	cmp	result1, #0 wz
0dd84     00 1E 26 56 |  if_ne	not	local01, #0
0dd88     A7 1E 62 FC | 	wrlong	local01, fp
0dd8c     04 03 90 FD | 	jmp	#LR__1170
0dd90                 | LR__1160
0dd90                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
0dd90     08 4E 05 F1 | 	add	fp, #8
0dd94     A7 1E 02 FB | 	rdlong	local01, fp
0dd98     08 4E 85 F1 | 	sub	fp, #8
0dd9c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0dda0     14 4E 05 A1 |  if_e	add	fp, #20
0dda4     A7 24 02 AB |  if_e	rdlong	local04, fp
0dda8     14 4E 85 A1 |  if_e	sub	fp, #20
0ddac     12 23 02 A6 |  if_e	mov	local03, local04
0ddb0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ddb4     2C 00 90 5D |  if_ne	jmp	#LR__1161
0ddb8     00 1E 06 F6 | 	mov	local01, #0
0ddbc     A7 12 02 FB | 	rdlong	arg01, fp
0ddc0     0C 4E 05 F1 | 	add	fp, #12
0ddc4     A7 14 02 FB | 	rdlong	arg02, fp
0ddc8     0C 4E 85 F1 | 	sub	fp, #12
0ddcc     01 16 06 F6 | 	mov	arg03, #1
0ddd0     34 A8 B0 FD | 	call	#__system___float_cmp
0ddd4     00 FA 0D F2 | 	cmp	result1, #0 wz
0ddd8     00 1E 26 56 |  if_ne	not	local01, #0
0dddc     A7 1E 62 FC | 	wrlong	local01, fp
0dde0     B0 02 90 FD | 	jmp	#LR__1170
0dde4                 | LR__1161
0dde4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
0dde4     08 4E 05 F1 | 	add	fp, #8
0dde8     A7 1E 02 FB | 	rdlong	local01, fp
0ddec     08 4E 85 F1 | 	sub	fp, #8
0ddf0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ddf4     14 4E 05 A1 |  if_e	add	fp, #20
0ddf8     A7 24 02 AB |  if_e	rdlong	local04, fp
0ddfc     14 4E 85 A1 |  if_e	sub	fp, #20
0de00     12 23 02 A6 |  if_e	mov	local03, local04
0de04     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0de08     48 00 90 5D |  if_ne	jmp	#LR__1162
0de0c     00 1E 06 F6 | 	mov	local01, #0
0de10     A7 20 02 FB | 	rdlong	local02, fp
0de14     0C 4E 05 F1 | 	add	fp, #12
0de18     A7 12 02 FB | 	rdlong	arg01, fp
0de1c     0C 4E 85 F1 | 	sub	fp, #12
0de20     09 13 52 F6 | 	abs	arg01, arg01 wc
0de24     1F 26 C6 C9 |  if_b	decod	local05, #31
0de28     00 26 06 36 |  if_ae	mov	local05, #0
0de2c     78 A0 B0 FD | 	call	#__system___float_fromuns
0de30     13 FB 61 F5 | 	xor	result1, local05
0de34     FD 14 02 F6 | 	mov	arg02, result1
0de38     10 13 02 F6 | 	mov	arg01, local02
0de3c     01 16 06 F6 | 	mov	arg03, #1
0de40     C4 A7 B0 FD | 	call	#__system___float_cmp
0de44     00 FA 0D F2 | 	cmp	result1, #0 wz
0de48     00 1E 26 56 |  if_ne	not	local01, #0
0de4c     A7 1E 62 FC | 	wrlong	local01, fp
0de50     40 02 90 FD | 	jmp	#LR__1170
0de54                 | LR__1162
0de54                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
0de54     08 4E 05 F1 | 	add	fp, #8
0de58     A7 1E 02 FB | 	rdlong	local01, fp
0de5c     08 4E 85 F1 | 	sub	fp, #8
0de60     1E 1E 0E F2 | 	cmp	local01, #30 wz
0de64     14 4E 05 A1 |  if_e	add	fp, #20
0de68     A7 24 02 AB |  if_e	rdlong	local04, fp
0de6c     14 4E 85 A1 |  if_e	sub	fp, #20
0de70     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0de74     38 00 90 5D |  if_ne	jmp	#LR__1163
0de78     00 1E 06 F6 | 	mov	local01, #0
0de7c     A7 20 02 FB | 	rdlong	local02, fp
0de80     0C 4E 05 F1 | 	add	fp, #12
0de84     A7 12 02 FB | 	rdlong	arg01, fp
0de88     0C 4E 85 F1 | 	sub	fp, #12
0de8c     18 A0 B0 FD | 	call	#__system___float_fromuns
0de90     FD 14 02 F6 | 	mov	arg02, result1
0de94     10 13 02 F6 | 	mov	arg01, local02
0de98     01 16 06 F6 | 	mov	arg03, #1
0de9c     68 A7 B0 FD | 	call	#__system___float_cmp
0dea0     00 FA 0D F2 | 	cmp	result1, #0 wz
0dea4     00 1E 26 56 |  if_ne	not	local01, #0
0dea8     A7 1E 62 FC | 	wrlong	local01, fp
0deac     E4 01 90 FD | 	jmp	#LR__1170
0deb0                 | LR__1163
0deb0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
0deb0     08 4E 05 F1 | 	add	fp, #8
0deb4     A7 1E 02 FB | 	rdlong	local01, fp
0deb8     08 4E 85 F1 | 	sub	fp, #8
0debc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dec0     14 4E 05 A1 |  if_e	add	fp, #20
0dec4     A7 22 02 AB |  if_e	rdlong	local03, fp
0dec8     14 4E 85 A1 |  if_e	sub	fp, #20
0decc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ded0     44 00 90 5D |  if_ne	jmp	#LR__1164
0ded4     00 1E 06 F6 | 	mov	local01, #0
0ded8     A7 12 02 FB | 	rdlong	arg01, fp
0dedc     09 13 52 F6 | 	abs	arg01, arg01 wc
0dee0     1F 26 C6 C9 |  if_b	decod	local05, #31
0dee4     00 26 06 36 |  if_ae	mov	local05, #0
0dee8     BC 9F B0 FD | 	call	#__system___float_fromuns
0deec     13 FB 61 F5 | 	xor	result1, local05
0def0     FD 12 02 F6 | 	mov	arg01, result1
0def4     0C 4E 05 F1 | 	add	fp, #12
0def8     A7 14 02 FB | 	rdlong	arg02, fp
0defc     0C 4E 85 F1 | 	sub	fp, #12
0df00     01 16 06 F6 | 	mov	arg03, #1
0df04     00 A7 B0 FD | 	call	#__system___float_cmp
0df08     00 FA 0D F2 | 	cmp	result1, #0 wz
0df0c     00 1E 26 56 |  if_ne	not	local01, #0
0df10     A7 1E 62 FC | 	wrlong	local01, fp
0df14     7C 01 90 FD | 	jmp	#LR__1170
0df18                 | LR__1164
0df18                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
0df18     08 4E 05 F1 | 	add	fp, #8
0df1c     A7 1E 02 FB | 	rdlong	local01, fp
0df20     08 4E 85 F1 | 	sub	fp, #8
0df24     1C 1E 0E F2 | 	cmp	local01, #28 wz
0df28     14 4E 05 A1 |  if_e	add	fp, #20
0df2c     A7 22 02 AB |  if_e	rdlong	local03, fp
0df30     14 4E 85 A1 |  if_e	sub	fp, #20
0df34     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0df38     24 00 90 5D |  if_ne	jmp	#LR__1165
0df3c     00 1E 06 F6 | 	mov	local01, #0
0df40     A7 20 02 FB | 	rdlong	local02, fp
0df44     0C 4E 05 F1 | 	add	fp, #12
0df48     A7 22 02 FB | 	rdlong	local03, fp
0df4c     0C 4E 85 F1 | 	sub	fp, #12
0df50     11 21 0A F2 | 	cmp	local02, local03 wz
0df54     01 1E 66 56 |  if_ne	neg	local01, #1
0df58     A7 1E 62 FC | 	wrlong	local01, fp
0df5c     34 01 90 FD | 	jmp	#LR__1170
0df60                 | LR__1165
0df60                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
0df60     08 4E 05 F1 | 	add	fp, #8
0df64     A7 1E 02 FB | 	rdlong	local01, fp
0df68     08 4E 85 F1 | 	sub	fp, #8
0df6c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0df70     14 4E 05 A1 |  if_e	add	fp, #20
0df74     A7 22 02 AB |  if_e	rdlong	local03, fp
0df78     14 4E 85 A1 |  if_e	sub	fp, #20
0df7c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0df80     24 00 90 5D |  if_ne	jmp	#LR__1166
0df84     00 1E 06 F6 | 	mov	local01, #0
0df88     A7 20 02 FB | 	rdlong	local02, fp
0df8c     0C 4E 05 F1 | 	add	fp, #12
0df90     A7 22 02 FB | 	rdlong	local03, fp
0df94     0C 4E 85 F1 | 	sub	fp, #12
0df98     11 21 0A F2 | 	cmp	local02, local03 wz
0df9c     01 1E 66 56 |  if_ne	neg	local01, #1
0dfa0     A7 1E 62 FC | 	wrlong	local01, fp
0dfa4     EC 00 90 FD | 	jmp	#LR__1170
0dfa8                 | LR__1166
0dfa8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
0dfa8     08 4E 05 F1 | 	add	fp, #8
0dfac     A7 1E 02 FB | 	rdlong	local01, fp
0dfb0     08 4E 85 F1 | 	sub	fp, #8
0dfb4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0dfb8     14 4E 05 A1 |  if_e	add	fp, #20
0dfbc     A7 22 02 AB |  if_e	rdlong	local03, fp
0dfc0     14 4E 85 A1 |  if_e	sub	fp, #20
0dfc4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0dfc8     34 00 90 5D |  if_ne	jmp	#LR__1167
0dfcc     00 1E 06 F6 | 	mov	local01, #0
0dfd0     A7 12 02 FB | 	rdlong	arg01, fp
0dfd4     D0 9E B0 FD | 	call	#__system___float_fromuns
0dfd8     FD 12 02 F6 | 	mov	arg01, result1
0dfdc     0C 4E 05 F1 | 	add	fp, #12
0dfe0     A7 14 02 FB | 	rdlong	arg02, fp
0dfe4     0C 4E 85 F1 | 	sub	fp, #12
0dfe8     01 16 06 F6 | 	mov	arg03, #1
0dfec     18 A6 B0 FD | 	call	#__system___float_cmp
0dff0     00 FA 0D F2 | 	cmp	result1, #0 wz
0dff4     00 1E 26 56 |  if_ne	not	local01, #0
0dff8     A7 1E 62 FC | 	wrlong	local01, fp
0dffc     94 00 90 FD | 	jmp	#LR__1170
0e000                 | LR__1167
0e000                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
0e000     08 4E 05 F1 | 	add	fp, #8
0e004     A7 1E 02 FB | 	rdlong	local01, fp
0e008     08 4E 85 F1 | 	sub	fp, #8
0e00c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e010     14 4E 05 A1 |  if_e	add	fp, #20
0e014     A7 22 02 AB |  if_e	rdlong	local03, fp
0e018     14 4E 85 A1 |  if_e	sub	fp, #20
0e01c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e020     24 00 90 5D |  if_ne	jmp	#LR__1168
0e024     00 1E 06 F6 | 	mov	local01, #0
0e028     A7 20 02 FB | 	rdlong	local02, fp
0e02c     0C 4E 05 F1 | 	add	fp, #12
0e030     A7 22 02 FB | 	rdlong	local03, fp
0e034     0C 4E 85 F1 | 	sub	fp, #12
0e038     11 21 0A F2 | 	cmp	local02, local03 wz
0e03c     01 1E 66 56 |  if_ne	neg	local01, #1
0e040     A7 1E 62 FC | 	wrlong	local01, fp
0e044     4C 00 90 FD | 	jmp	#LR__1170
0e048                 | LR__1168
0e048                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
0e048     08 4E 05 F1 | 	add	fp, #8
0e04c     A7 1E 02 FB | 	rdlong	local01, fp
0e050     08 4E 85 F1 | 	sub	fp, #8
0e054     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e058     14 4E 05 A1 |  if_e	add	fp, #20
0e05c     A7 22 02 AB |  if_e	rdlong	local03, fp
0e060     14 4E 85 A1 |  if_e	sub	fp, #20
0e064     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e068     24 00 90 5D |  if_ne	jmp	#LR__1169
0e06c     00 1E 06 F6 | 	mov	local01, #0
0e070     A7 20 02 FB | 	rdlong	local02, fp
0e074     0C 4E 05 F1 | 	add	fp, #12
0e078     A7 22 02 FB | 	rdlong	local03, fp
0e07c     0C 4E 85 F1 | 	sub	fp, #12
0e080     11 21 0A F2 | 	cmp	local02, local03 wz
0e084     01 1E 66 56 |  if_ne	neg	local01, #1
0e088     A7 1E 62 FC | 	wrlong	local01, fp
0e08c     04 00 90 FD | 	jmp	#LR__1170
0e090                 | LR__1169
0e090     A7 00 68 FC | 	wrlong	#0, fp
0e094                 | LR__1170
0e094     08 4E 05 F1 | 	add	fp, #8
0e098     A7 38 68 FC | 	wrlong	#28, fp
0e09c     08 4E 85 F1 | 	sub	fp, #8
0e0a0     A7 12 02 F6 | 	mov	arg01, fp
0e0a4     64 A9 BF FD | 	call	#_push
0e0a8     A7 F0 03 F6 | 	mov	ptra, fp
0e0ac     B2 00 A0 FD | 	call	#popregs_
0e0b0                 | _do_ne_ret
0e0b0     2D 00 64 FD | 	ret
0e0b4                 | 
0e0b4                 | ' 
0e0b4                 | ' 
0e0b4                 | ' 
0e0b4                 | ' ' -------------------   convert a variable on the top of stack to integer
0e0b4                 | ' 
0e0b4                 | ' sub do_converttoint
0e0b4                 | _do_converttoint
0e0b4     02 4A 05 F6 | 	mov	COUNT_, #2
0e0b8     A8 00 A0 FD | 	call	#pushregs_
0e0bc     18 F0 07 F1 | 	add	ptra, #24
0e0c0     B0 A8 BF FD | 	call	#_pop
0e0c4     FE 1E 02 F6 | 	mov	local01, result2
0e0c8     FF 20 02 F6 | 	mov	local02, result3
0e0cc     A7 FA 61 FC | 	wrlong	result1, fp
0e0d0     04 4E 05 F1 | 	add	fp, #4
0e0d4     A7 1E 62 FC | 	wrlong	local01, fp
0e0d8     04 4E 05 F1 | 	add	fp, #4
0e0dc     A7 20 62 FC | 	wrlong	local02, fp
0e0e0                 | ' t1=pop() 
0e0e0                 | ' select case t1.result_type
0e0e0     08 4E 85 F1 | 	sub	fp, #8
0e0e4     1C 20 0E F2 | 	cmp	local02, #28 wz
0e0e8     24 00 90 AD |  if_e	jmp	#LR__1180
0e0ec     1D 20 0E F2 | 	cmp	local02, #29 wz
0e0f0     38 00 90 AD |  if_e	jmp	#LR__1181
0e0f4     1E 20 0E F2 | 	cmp	local02, #30 wz
0e0f8     4C 00 90 AD |  if_e	jmp	#LR__1182
0e0fc     1F 20 0E F2 | 	cmp	local02, #31 wz
0e100     68 00 90 AD |  if_e	jmp	#LR__1183
0e104     FF 20 0E F2 | 	cmp	local02, #255 wz
0e108     8C 00 90 AD |  if_e	jmp	#LR__1184
0e10c     A8 00 90 FD | 	jmp	#LR__1185
0e110                 | LR__1180
0e110     A7 20 02 FB | 	rdlong	local02, fp
0e114     0C 4E 05 F1 | 	add	fp, #12
0e118     A7 20 62 FC | 	wrlong	local02, fp
0e11c     04 4E 05 F1 | 	add	fp, #4
0e120     A7 38 68 FC | 	wrlong	#28, fp
0e124     10 4E 85 F1 | 	sub	fp, #16
0e128     A0 00 90 FD | 	jmp	#LR__1186
0e12c                 | LR__1181
0e12c     A7 20 02 FB | 	rdlong	local02, fp
0e130     0C 4E 05 F1 | 	add	fp, #12
0e134     A7 20 62 FC | 	wrlong	local02, fp
0e138     04 4E 05 F1 | 	add	fp, #4
0e13c     A7 38 68 FC | 	wrlong	#28, fp
0e140     10 4E 85 F1 | 	sub	fp, #16
0e144     84 00 90 FD | 	jmp	#LR__1186
0e148                 | LR__1182
0e148     A7 12 02 FB | 	rdlong	arg01, fp
0e14c     01 14 06 F6 | 	mov	arg02, #1
0e150     48 A5 B0 FD | 	call	#__system___float_tointeger
0e154     0C 4E 05 F1 | 	add	fp, #12
0e158     A7 FA 61 FC | 	wrlong	result1, fp
0e15c     04 4E 05 F1 | 	add	fp, #4
0e160     A7 38 68 FC | 	wrlong	#28, fp
0e164     10 4E 85 F1 | 	sub	fp, #16
0e168     60 00 90 FD | 	jmp	#LR__1186
0e16c                 | LR__1183
0e16c     A7 12 02 FB | 	rdlong	arg01, fp
0e170     48 A8 B0 FD | 	call	#__system____builtin_atof
0e174     FD 12 02 F6 | 	mov	arg01, result1
0e178     00 14 06 F6 | 	mov	arg02, #0
0e17c     1C A5 B0 FD | 	call	#__system___float_tointeger
0e180     0C 4E 05 F1 | 	add	fp, #12
0e184     A7 FA 61 FC | 	wrlong	result1, fp
0e188     04 4E 05 F1 | 	add	fp, #4
0e18c     A7 38 68 FC | 	wrlong	#28, fp
0e190     10 4E 85 F1 | 	sub	fp, #16
0e194     34 00 90 FD | 	jmp	#LR__1186
0e198                 | LR__1184
0e198     0C 4E 05 F1 | 	add	fp, #12
0e19c     A7 00 68 FC | 	wrlong	#0, fp
0e1a0     0C 4E 85 F1 | 	sub	fp, #12
0e1a4     A7 20 02 FB | 	rdlong	local02, fp
0e1a8     10 4E 05 F1 | 	add	fp, #16
0e1ac     A7 20 62 FC | 	wrlong	local02, fp
0e1b0     10 4E 85 F1 | 	sub	fp, #16
0e1b4     14 00 90 FD | 	jmp	#LR__1186
0e1b8                 | LR__1185
0e1b8     0C 4E 05 F1 | 	add	fp, #12
0e1bc     A7 00 68 FC | 	wrlong	#0, fp
0e1c0     04 4E 05 F1 | 	add	fp, #4
0e1c4     A7 02 68 FC | 	wrlong	#1, fp
0e1c8     10 4E 85 F1 | 	sub	fp, #16
0e1cc                 | LR__1186
0e1cc     0C 4E 05 F1 | 	add	fp, #12
0e1d0     A7 20 02 FB | 	rdlong	local02, fp
0e1d4     0C 4E 85 F1 | 	sub	fp, #12
0e1d8     A7 20 62 FC | 	wrlong	local02, fp
0e1dc     10 4E 05 F1 | 	add	fp, #16
0e1e0     A7 20 02 FB | 	rdlong	local02, fp
0e1e4     08 4E 85 F1 | 	sub	fp, #8
0e1e8     A7 20 62 FC | 	wrlong	local02, fp
0e1ec     08 4E 85 F1 | 	sub	fp, #8
0e1f0     A7 12 02 F6 | 	mov	arg01, fp
0e1f4     14 A8 BF FD | 	call	#_push
0e1f8     A7 F0 03 F6 | 	mov	ptra, fp
0e1fc     B2 00 A0 FD | 	call	#popregs_
0e200                 | _do_converttoint_ret
0e200     2D 00 64 FD | 	ret
0e204                 | 
0e204                 | ' 
0e204                 | ' function converttoint (t1 as expr_result) as integer
0e204                 | _converttoint
0e204     02 4A 05 F6 | 	mov	COUNT_, #2
0e208     A8 00 A0 FD | 	call	#pushregs_
0e20c     09 1F 02 F6 | 	mov	local01, arg01
0e210                 | ' 
0e210                 | ' select case t1.result_type
0e210     08 1E 06 F1 | 	add	local01, #8
0e214     0F 21 02 FB | 	rdlong	local02, local01
0e218     08 1E 86 F1 | 	sub	local01, #8
0e21c     1C 20 86 F1 | 	sub	local02, #28
0e220     04 20 26 F3 | 	fle	local02, #4
0e224     30 20 62 FD | 	jmprel	local02
0e228                 | LR__1190
0e228     10 00 90 FD | 	jmp	#LR__1191
0e22c     14 00 90 FD | 	jmp	#LR__1192
0e230     18 00 90 FD | 	jmp	#LR__1193
0e234     24 00 90 FD | 	jmp	#LR__1194
0e238     38 00 90 FD | 	jmp	#LR__1195
0e23c                 | LR__1191
0e23c     0F FB 01 FB | 	rdlong	result1, local01
0e240     34 00 90 FD | 	jmp	#LR__1196
0e244                 | LR__1192
0e244     0F FB 01 FB | 	rdlong	result1, local01
0e248     2C 00 90 FD | 	jmp	#LR__1196
0e24c                 | LR__1193
0e24c     0F 13 02 FB | 	rdlong	arg01, local01
0e250     01 14 06 F6 | 	mov	arg02, #1
0e254     44 A4 B0 FD | 	call	#__system___float_tointeger
0e258     1C 00 90 FD | 	jmp	#LR__1196
0e25c                 | LR__1194
0e25c     0F 13 02 FB | 	rdlong	arg01, local01
0e260     58 A7 B0 FD | 	call	#__system____builtin_atof
0e264     FD 12 02 F6 | 	mov	arg01, result1
0e268     00 14 06 F6 | 	mov	arg02, #0
0e26c     2C A4 B0 FD | 	call	#__system___float_tointeger
0e270     04 00 90 FD | 	jmp	#LR__1196
0e274                 | LR__1195
0e274     00 FA 05 F6 | 	mov	result1, #0
0e278                 | LR__1196
0e278     A7 F0 03 F6 | 	mov	ptra, fp
0e27c     B2 00 A0 FD | 	call	#popregs_
0e280                 | _converttoint_ret
0e280     2D 00 64 FD | 	ret
0e284                 | 
0e284                 | ' 
0e284                 | ' sub do_rnd
0e284                 | _do_rnd
0e284     01 4A 05 F6 | 	mov	COUNT_, #1
0e288     A8 00 A0 FD | 	call	#pushregs_
0e28c     10 F0 07 F1 | 	add	ptra, #16
0e290     41 00 00 FF 
0e294     44 E4 05 F1 | 	add	objptr, ##33348
0e298     F2 1E 02 FB | 	rdlong	local01, objptr
0e29c     0F 17 02 F6 | 	mov	arg03, local01
0e2a0     01 16 66 F0 | 	shl	arg03, #1
0e2a4     0F 17 02 F1 | 	add	arg03, local01
0e2a8     02 16 66 F0 | 	shl	arg03, #2
0e2ac     03 00 00 FF 
0e2b0     04 E4 85 F1 | 	sub	objptr, ##1540
0e2b4     F2 16 02 F1 | 	add	arg03, objptr
0e2b8     0B 17 02 FB | 	rdlong	arg03, arg03
0e2bc     0C 4E 05 F1 | 	add	fp, #12
0e2c0     A7 16 62 FC | 	wrlong	arg03, fp
0e2c4                 | ' 
0e2c4                 | ' numpar=compiledline(lineptr_e).result.uresult
0e2c4                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
0e2c4     0C 4E 85 F1 | 	sub	fp, #12
0e2c8     02 16 16 F2 | 	cmp	arg03, #2 wc
0e2cc     3E 00 00 FF 
0e2d0     40 E4 85 F1 | 	sub	objptr, ##31808
0e2d4     3C 00 90 CD |  if_b	jmp	#LR__1200
0e2d8     00 12 06 F6 | 	mov	arg01, #0
0e2dc     90 CA B0 FD | 	call	#__system___getiolock_0369
0e2e0     FD 12 02 F6 | 	mov	arg01, result1
0e2e4     D8 74 B0 FD | 	call	#__system___lockmem
0e2e8     26 01 00 FF 
0e2ec     C9 15 06 F6 | 	mov	arg02, ##@LR__4335
0e2f0     00 12 06 F6 | 	mov	arg01, #0
0e2f4     00 16 06 F6 | 	mov	arg03, #0
0e2f8     B8 81 B0 FD | 	call	#__system___basic_print_string
0e2fc     00 12 06 F6 | 	mov	arg01, #0
0e300     6C CA B0 FD | 	call	#__system___getiolock_0369
0e304     FD 00 68 FC | 	wrlong	#0, result1
0e308     27 12 06 F6 | 	mov	arg01, #39
0e30c     B4 3F B0 FD | 	call	#_printerror
0e310     2C 01 90 FD | 	jmp	#LR__1207
0e314                 | LR__1200
0e314                 | ' if numpar=0 then
0e314     0C 4E 05 F1 | 	add	fp, #12
0e318     A7 FE 09 FB | 	rdlong	result3, fp wz
0e31c     0C 4E 85 F1 | 	sub	fp, #12
0e320     20 00 90 5D |  if_ne	jmp	#LR__1201
0e324     08 4E 05 F1 | 	add	fp, #8
0e328     A7 3A 68 FC | 	wrlong	#29, fp
0e32c     08 4E 85 F1 | 	sub	fp, #8
0e330     1B FA 61 FD | 	getrnd	result1
0e334     A7 FA 61 FC | 	wrlong	result1, fp
0e338     A7 12 02 F6 | 	mov	arg01, fp
0e33c     CC A6 BF FD | 	call	#_push
0e340     FC 00 90 FD | 	jmp	#LR__1206
0e344                 | LR__1201
0e344     2C A6 BF FD | 	call	#_pop
0e348     A7 FA 61 FC | 	wrlong	result1, fp
0e34c     04 4E 05 F1 | 	add	fp, #4
0e350     A7 FC 61 FC | 	wrlong	result2, fp
0e354     04 4E 05 F1 | 	add	fp, #4
0e358     A7 FE 61 FC | 	wrlong	result3, fp
0e35c                 | '   t1=pop()
0e35c                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
0e35c     08 4E 85 F1 | 	sub	fp, #8
0e360     1C FE 0D F2 | 	cmp	result3, #28 wz
0e364     08 4E 05 51 |  if_ne	add	fp, #8
0e368     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e36c     08 4E 85 51 |  if_ne	sub	fp, #8
0e370     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0e374     2C 00 90 5D |  if_ne	jmp	#LR__1202
0e378     1B FA 61 FD | 	getrnd	result1
0e37c     A7 1E 02 FB | 	rdlong	local01, fp
0e380     0F FB 11 FD | 	qdiv	result1, local01
0e384     A7 12 02 F6 | 	mov	arg01, fp
0e388     19 1E 62 FD | 	getqy	local01
0e38c     A7 1E 62 FC | 	wrlong	local01, fp
0e390     08 4E 05 F1 | 	add	fp, #8
0e394     A7 3A 68 FC | 	wrlong	#29, fp
0e398     08 4E 85 F1 | 	sub	fp, #8
0e39c     6C A6 BF FD | 	call	#_push
0e3a0     9C 00 90 FD | 	jmp	#LR__1205
0e3a4                 | LR__1202
0e3a4     08 4E 05 F1 | 	add	fp, #8
0e3a8     A7 1E 02 FB | 	rdlong	local01, fp
0e3ac     08 4E 85 F1 | 	sub	fp, #8
0e3b0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e3b4     48 00 90 5D |  if_ne	jmp	#LR__1203
0e3b8     A7 12 02 FB | 	rdlong	arg01, fp
0e3bc     00 C0 24 FF 
0e3c0     00 14 06 F6 | 	mov	arg02, ##1233125376
0e3c4     10 A0 B0 FD | 	call	#__system___float_div
0e3c8     FD 1E 02 F6 | 	mov	local01, result1
0e3cc     1B 12 62 FD | 	getrnd	arg01
0e3d0     74 13 06 F4 | 	bitl	arg01, #372
0e3d4     D0 9A B0 FD | 	call	#__system___float_fromuns
0e3d8     FD 14 02 F6 | 	mov	arg02, result1
0e3dc     0F 13 02 F6 | 	mov	arg01, local01
0e3e0     F0 9D B0 FD | 	call	#__system___float_mul
0e3e4     A7 FA 61 FC | 	wrlong	result1, fp
0e3e8     08 4E 05 F1 | 	add	fp, #8
0e3ec     A7 3C 68 FC | 	wrlong	#30, fp
0e3f0     08 4E 85 F1 | 	sub	fp, #8
0e3f4     A7 12 02 F6 | 	mov	arg01, fp
0e3f8     10 A6 BF FD | 	call	#_push
0e3fc     40 00 90 FD | 	jmp	#LR__1204
0e400                 | LR__1203
0e400                 | '     print "rnd: "; : printerror(40) 
0e400     00 12 06 F6 | 	mov	arg01, #0
0e404     68 C9 B0 FD | 	call	#__system___getiolock_0369
0e408     FD 12 02 F6 | 	mov	arg01, result1
0e40c     B0 73 B0 FD | 	call	#__system___lockmem
0e410     26 01 00 FF 
0e414     CF 15 06 F6 | 	mov	arg02, ##@LR__4336
0e418     00 12 06 F6 | 	mov	arg01, #0
0e41c     00 16 06 F6 | 	mov	arg03, #0
0e420     90 80 B0 FD | 	call	#__system___basic_print_string
0e424     00 12 06 F6 | 	mov	arg01, #0
0e428     44 C9 B0 FD | 	call	#__system___getiolock_0369
0e42c     FD 00 68 FC | 	wrlong	#0, result1
0e430     28 12 06 F6 | 	mov	arg01, #40
0e434     8C 3E B0 FD | 	call	#_printerror
0e438     A7 12 02 F6 | 	mov	arg01, fp
0e43c     CC A5 BF FD | 	call	#_push
0e440                 | LR__1204
0e440                 | LR__1205
0e440                 | LR__1206
0e440                 | LR__1207
0e440     A7 F0 03 F6 | 	mov	ptra, fp
0e444     B2 00 A0 FD | 	call	#popregs_
0e448                 | _do_rnd_ret
0e448     2D 00 64 FD | 	ret
0e44c                 | 
0e44c                 | ' 
0e44c                 | ' sub do_sin
0e44c                 | _do_sin
0e44c     03 4A 05 F6 | 	mov	COUNT_, #3
0e450     A8 00 A0 FD | 	call	#pushregs_
0e454     10 F0 07 F1 | 	add	ptra, #16
0e458     41 00 00 FF 
0e45c     44 E4 05 F1 | 	add	objptr, ##33348
0e460     F2 1E 02 FB | 	rdlong	local01, objptr
0e464     0F 17 02 F6 | 	mov	arg03, local01
0e468     01 16 66 F0 | 	shl	arg03, #1
0e46c     0F 17 02 F1 | 	add	arg03, local01
0e470     02 16 66 F0 | 	shl	arg03, #2
0e474     03 00 00 FF 
0e478     04 E4 85 F1 | 	sub	objptr, ##1540
0e47c     F2 16 02 F1 | 	add	arg03, objptr
0e480     0B 17 02 FB | 	rdlong	arg03, arg03
0e484     0C 4E 05 F1 | 	add	fp, #12
0e488     A7 16 62 FC | 	wrlong	arg03, fp
0e48c                 | ' 
0e48c                 | ' numpar=compiledline(lineptr_e).result.uresult
0e48c                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
0e48c     0C 4E 85 F1 | 	sub	fp, #12
0e490     02 16 16 F2 | 	cmp	arg03, #2 wc
0e494     3E 00 00 FF 
0e498     40 E4 85 F1 | 	sub	objptr, ##31808
0e49c     0C 4E 05 C1 |  if_b	add	fp, #12
0e4a0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0e4a4     0C 4E 85 C1 |  if_b	sub	fp, #12
0e4a8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1210
0e4ac     00 12 06 F6 | 	mov	arg01, #0
0e4b0     BC C8 B0 FD | 	call	#__system___getiolock_0369
0e4b4     FD 12 02 F6 | 	mov	arg01, result1
0e4b8     04 73 B0 FD | 	call	#__system___lockmem
0e4bc     26 01 00 FF 
0e4c0     D5 15 06 F6 | 	mov	arg02, ##@LR__4337
0e4c4     00 12 06 F6 | 	mov	arg01, #0
0e4c8     00 16 06 F6 | 	mov	arg03, #0
0e4cc     E4 7F B0 FD | 	call	#__system___basic_print_string
0e4d0     00 12 06 F6 | 	mov	arg01, #0
0e4d4     98 C8 B0 FD | 	call	#__system___getiolock_0369
0e4d8     FD 00 68 FC | 	wrlong	#0, result1
0e4dc     27 12 06 F6 | 	mov	arg01, #39
0e4e0     E0 3D B0 FD | 	call	#_printerror
0e4e4     40 01 90 FD | 	jmp	#LR__1215
0e4e8                 | LR__1210
0e4e8     88 A4 BF FD | 	call	#_pop
0e4ec     A7 FA 61 FC | 	wrlong	result1, fp
0e4f0     04 4E 05 F1 | 	add	fp, #4
0e4f4     A7 FC 61 FC | 	wrlong	result2, fp
0e4f8     04 4E 05 F1 | 	add	fp, #4
0e4fc     A7 FE 61 FC | 	wrlong	result3, fp
0e500                 | ' t1=pop()
0e500                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then
0e500     08 4E 85 F1 | 	sub	fp, #8
0e504     1C FE 0D F2 | 	cmp	result3, #28 wz
0e508     08 4E 05 51 |  if_ne	add	fp, #8
0e50c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e510     08 4E 85 51 |  if_ne	sub	fp, #8
0e514     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0e518     70 00 90 5D |  if_ne	jmp	#LR__1211
0e51c     A7 1E 02 FB | 	rdlong	local01, fp
0e520     0F 1F 52 F6 | 	abs	local01, local01 wc
0e524     68 1F 16 FD | 	qdiv	local01, #360
0e528     87 24 20 FF 
0e52c     DB 21 06 F6 | 	mov	local02, ##1078530011
0e530     19 1E 62 FD | 	getqy	local01
0e534     0F 13 82 F6 | 	negc	arg01, local01
0e538     09 13 52 F6 | 	abs	arg01, arg01 wc
0e53c     1F 22 C6 C9 |  if_b	decod	local03, #31
0e540     00 22 06 36 |  if_ae	mov	local03, #0
0e544     60 99 B0 FD | 	call	#__system___float_fromuns
0e548     11 FB 61 F5 | 	xor	result1, local03
0e54c     FD 12 02 F6 | 	mov	arg01, result1
0e550     00 9A 21 FF 
0e554     00 14 06 F6 | 	mov	arg02, ##1127481344
0e558     7C 9E B0 FD | 	call	#__system___float_div
0e55c     FD 14 02 F6 | 	mov	arg02, result1
0e560     10 13 02 F6 | 	mov	arg01, local02
0e564     6C 9C B0 FD | 	call	#__system___float_mul
0e568     FD 12 02 F6 | 	mov	arg01, result1
0e56c     A0 A5 B0 FD | 	call	#__system____builtin_sinf
0e570     A7 FA 61 FC | 	wrlong	result1, fp
0e574     08 4E 05 F1 | 	add	fp, #8
0e578     A7 3C 68 FC | 	wrlong	#30, fp
0e57c     08 4E 85 F1 | 	sub	fp, #8
0e580     A7 12 02 F6 | 	mov	arg01, fp
0e584     84 A4 BF FD | 	call	#_push
0e588     9C 00 90 FD | 	jmp	#LR__1214
0e58c                 | LR__1211
0e58c     08 4E 05 F1 | 	add	fp, #8
0e590     A7 20 02 FB | 	rdlong	local02, fp
0e594     08 4E 85 F1 | 	sub	fp, #8
0e598     1E 20 0E F2 | 	cmp	local02, #30 wz
0e59c     48 00 90 5D |  if_ne	jmp	#LR__1212
0e5a0     87 24 20 FF 
0e5a4     DB 21 06 F6 | 	mov	local02, ##1078530011
0e5a8     A7 12 02 FB | 	rdlong	arg01, fp
0e5ac     00 9A 21 FF 
0e5b0     00 14 06 F6 | 	mov	arg02, ##1127481344
0e5b4     20 9E B0 FD | 	call	#__system___float_div
0e5b8     FD 14 02 F6 | 	mov	arg02, result1
0e5bc     10 13 02 F6 | 	mov	arg01, local02
0e5c0     10 9C B0 FD | 	call	#__system___float_mul
0e5c4     FD 12 02 F6 | 	mov	arg01, result1
0e5c8     44 A5 B0 FD | 	call	#__system____builtin_sinf
0e5cc     A7 FA 61 FC | 	wrlong	result1, fp
0e5d0     08 4E 05 F1 | 	add	fp, #8
0e5d4     A7 3C 68 FC | 	wrlong	#30, fp
0e5d8     08 4E 85 F1 | 	sub	fp, #8
0e5dc     A7 12 02 F6 | 	mov	arg01, fp
0e5e0     28 A4 BF FD | 	call	#_push
0e5e4     40 00 90 FD | 	jmp	#LR__1213
0e5e8                 | LR__1212
0e5e8                 | '   print "sin: "; : printerror(40) 
0e5e8     00 12 06 F6 | 	mov	arg01, #0
0e5ec     80 C7 B0 FD | 	call	#__system___getiolock_0369
0e5f0     FD 12 02 F6 | 	mov	arg01, result1
0e5f4     C8 71 B0 FD | 	call	#__system___lockmem
0e5f8     26 01 00 FF 
0e5fc     DB 15 06 F6 | 	mov	arg02, ##@LR__4338
0e600     00 12 06 F6 | 	mov	arg01, #0
0e604     00 16 06 F6 | 	mov	arg03, #0
0e608     A8 7E B0 FD | 	call	#__system___basic_print_string
0e60c     00 12 06 F6 | 	mov	arg01, #0
0e610     5C C7 B0 FD | 	call	#__system___getiolock_0369
0e614     FD 00 68 FC | 	wrlong	#0, result1
0e618     28 12 06 F6 | 	mov	arg01, #40
0e61c     A4 3C B0 FD | 	call	#_printerror
0e620     A7 12 02 F6 | 	mov	arg01, fp
0e624     E4 A3 BF FD | 	call	#_push
0e628                 | LR__1213
0e628                 | LR__1214
0e628                 | LR__1215
0e628     A7 F0 03 F6 | 	mov	ptra, fp
0e62c     B2 00 A0 FD | 	call	#popregs_
0e630                 | _do_sin_ret
0e630     2D 00 64 FD | 	ret
0e634                 | 
0e634                 | ' 
0e634                 | ' sub do_stick
0e634                 | _do_stick
0e634     01 4A 05 F6 | 	mov	COUNT_, #1
0e638     A8 00 A0 FD | 	call	#pushregs_
0e63c     10 F0 07 F1 | 	add	ptra, #16
0e640     41 00 00 FF 
0e644     44 E4 05 F1 | 	add	objptr, ##33348
0e648     F2 1E 02 FB | 	rdlong	local01, objptr
0e64c     0F 17 02 F6 | 	mov	arg03, local01
0e650     01 16 66 F0 | 	shl	arg03, #1
0e654     0F 17 02 F1 | 	add	arg03, local01
0e658     02 16 66 F0 | 	shl	arg03, #2
0e65c     03 00 00 FF 
0e660     04 E4 85 F1 | 	sub	objptr, ##1540
0e664     F2 16 02 F1 | 	add	arg03, objptr
0e668     0B 17 02 FB | 	rdlong	arg03, arg03
0e66c     0C 4E 05 F1 | 	add	fp, #12
0e670     A7 16 62 FC | 	wrlong	arg03, fp
0e674                 | ' 
0e674                 | ' numpar=compiledline(lineptr_e).result.uresult
0e674                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
0e674     0C 4E 85 F1 | 	sub	fp, #12
0e678     02 16 16 F2 | 	cmp	arg03, #2 wc
0e67c     3E 00 00 FF 
0e680     40 E4 85 F1 | 	sub	objptr, ##31808
0e684     3C 00 90 CD |  if_b	jmp	#LR__1220
0e688     00 12 06 F6 | 	mov	arg01, #0
0e68c     E0 C6 B0 FD | 	call	#__system___getiolock_0369
0e690     FD 12 02 F6 | 	mov	arg01, result1
0e694     28 71 B0 FD | 	call	#__system___lockmem
0e698     26 01 00 FF 
0e69c     E1 15 06 F6 | 	mov	arg02, ##@LR__4339
0e6a0     00 12 06 F6 | 	mov	arg01, #0
0e6a4     00 16 06 F6 | 	mov	arg03, #0
0e6a8     08 7E B0 FD | 	call	#__system___basic_print_string
0e6ac     00 12 06 F6 | 	mov	arg01, #0
0e6b0     BC C6 B0 FD | 	call	#__system___getiolock_0369
0e6b4     FD 00 68 FC | 	wrlong	#0, result1
0e6b8     27 12 06 F6 | 	mov	arg01, #39
0e6bc     04 3C B0 FD | 	call	#_printerror
0e6c0     E8 00 90 FD | 	jmp	#LR__1224
0e6c4                 | LR__1220
0e6c4                 | ' 
0e6c4                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
0e6c4     0C 4E 05 F1 | 	add	fp, #12
0e6c8     A7 FE 09 FB | 	rdlong	result3, fp wz
0e6cc     0C 4E 85 F1 | 	sub	fp, #12
0e6d0     30 00 90 5D |  if_ne	jmp	#LR__1221
0e6d4     51 00 00 FF 
0e6d8     C0 E5 05 F1 | 	add	objptr, ##41920
0e6dc     F2 1E 02 FB | 	rdlong	local01, objptr
0e6e0     51 00 00 FF 
0e6e4     C0 E5 85 F1 | 	sub	objptr, ##41920
0e6e8     A7 1E 62 FC | 	wrlong	local01, fp
0e6ec     08 4E 05 F1 | 	add	fp, #8
0e6f0     A7 3A 68 FC | 	wrlong	#29, fp
0e6f4     08 4E 85 F1 | 	sub	fp, #8
0e6f8     A7 12 02 F6 | 	mov	arg01, fp
0e6fc     0C A3 BF FD | 	call	#_push
0e700     A8 00 90 FD | 	jmp	#LR__1224
0e704                 | LR__1221
0e704     6C A2 BF FD | 	call	#_pop
0e708     A7 FA 61 FC | 	wrlong	result1, fp
0e70c     04 4E 05 F1 | 	add	fp, #4
0e710     A7 FC 61 FC | 	wrlong	result2, fp
0e714     04 4E 05 F1 | 	add	fp, #4
0e718     A7 FE 61 FC | 	wrlong	result3, fp
0e71c                 | ' 
0e71c                 | ' t1=pop()
0e71c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
0e71c     08 4E 85 F1 | 	sub	fp, #8
0e720     1C FE 0D F2 | 	cmp	result3, #28 wz
0e724     08 4E 05 51 |  if_ne	add	fp, #8
0e728     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e72c     08 4E 85 51 |  if_ne	sub	fp, #8
0e730     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0e734     6C 00 90 5D |  if_ne	jmp	#LR__1223
0e738     A7 1E 02 FB | 	rdlong	local01, fp
0e73c     52 00 00 FF 
0e740     80 E4 05 F1 | 	add	objptr, ##42112
0e744     F2 1E 62 FC | 	wrlong	local01, objptr
0e748                 | '   q=t1.result.uresult
0e748                 | '   if q<7 then 
0e748     52 00 00 FF 
0e74c     80 E4 85 F1 | 	sub	objptr, ##42112
0e750     07 1E 56 F2 | 	cmps	local01, #7 wc
0e754     40 00 90 3D |  if_ae	jmp	#LR__1222
0e758     52 00 00 FF 
0e75c     80 E4 05 F1 | 	add	objptr, ##42112
0e760     F2 1E 02 FB | 	rdlong	local01, objptr
0e764     02 1E 66 F0 | 	shl	local01, #2
0e768     C0 E4 85 F1 | 	sub	objptr, #192
0e76c     F2 1E 02 F1 | 	add	local01, objptr
0e770     0F 1F 02 FB | 	rdlong	local01, local01
0e774     A7 1E 62 FC | 	wrlong	local01, fp
0e778     08 4E 05 F1 | 	add	fp, #8
0e77c     A7 3A 68 FC | 	wrlong	#29, fp
0e780     08 4E 85 F1 | 	sub	fp, #8
0e784     A7 12 02 F6 | 	mov	arg01, fp
0e788     51 00 00 FF 
0e78c     C0 E5 85 F1 | 	sub	objptr, ##41920
0e790     78 A2 BF FD | 	call	#_push
0e794                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
0e794     14 00 90 FD | 	jmp	#LR__1224
0e798                 | LR__1222
0e798     29 12 06 F6 | 	mov	arg01, #41
0e79c     24 3B B0 FD | 	call	#_printerror
0e7a0                 | '      printerror(41) : return
0e7a0     08 00 90 FD | 	jmp	#LR__1224
0e7a4                 | LR__1223
0e7a4     29 12 06 F6 | 	mov	arg01, #41
0e7a8     18 3B B0 FD | 	call	#_printerror
0e7ac                 | LR__1224
0e7ac     A7 F0 03 F6 | 	mov	ptra, fp
0e7b0     B2 00 A0 FD | 	call	#popregs_
0e7b4                 | _do_stick_ret
0e7b4     2D 00 64 FD | 	ret
0e7b8                 | 
0e7b8                 | ' 
0e7b8                 | ' sub do_strig
0e7b8                 | _do_strig
0e7b8     01 4A 05 F6 | 	mov	COUNT_, #1
0e7bc     A8 00 A0 FD | 	call	#pushregs_
0e7c0     10 F0 07 F1 | 	add	ptra, #16
0e7c4     41 00 00 FF 
0e7c8     44 E4 05 F1 | 	add	objptr, ##33348
0e7cc     F2 1E 02 FB | 	rdlong	local01, objptr
0e7d0     0F 17 02 F6 | 	mov	arg03, local01
0e7d4     01 16 66 F0 | 	shl	arg03, #1
0e7d8     0F 17 02 F1 | 	add	arg03, local01
0e7dc     02 16 66 F0 | 	shl	arg03, #2
0e7e0     03 00 00 FF 
0e7e4     04 E4 85 F1 | 	sub	objptr, ##1540
0e7e8     F2 16 02 F1 | 	add	arg03, objptr
0e7ec     0B 17 02 FB | 	rdlong	arg03, arg03
0e7f0     0C 4E 05 F1 | 	add	fp, #12
0e7f4     A7 16 62 FC | 	wrlong	arg03, fp
0e7f8                 | ' 
0e7f8                 | ' numpar=compiledline(lineptr_e).result.uresult
0e7f8                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
0e7f8     0C 4E 85 F1 | 	sub	fp, #12
0e7fc     02 16 16 F2 | 	cmp	arg03, #2 wc
0e800     3E 00 00 FF 
0e804     40 E4 85 F1 | 	sub	objptr, ##31808
0e808     3C 00 90 CD |  if_b	jmp	#LR__1230
0e80c     00 12 06 F6 | 	mov	arg01, #0
0e810     5C C5 B0 FD | 	call	#__system___getiolock_0369
0e814     FD 12 02 F6 | 	mov	arg01, result1
0e818     A4 6F B0 FD | 	call	#__system___lockmem
0e81c     26 01 00 FF 
0e820     E9 15 06 F6 | 	mov	arg02, ##@LR__4340
0e824     00 12 06 F6 | 	mov	arg01, #0
0e828     00 16 06 F6 | 	mov	arg03, #0
0e82c     84 7C B0 FD | 	call	#__system___basic_print_string
0e830     00 12 06 F6 | 	mov	arg01, #0
0e834     38 C5 B0 FD | 	call	#__system___getiolock_0369
0e838     FD 00 68 FC | 	wrlong	#0, result1
0e83c     27 12 06 F6 | 	mov	arg01, #39
0e840     80 3A B0 FD | 	call	#_printerror
0e844     E8 00 90 FD | 	jmp	#LR__1234
0e848                 | LR__1230
0e848                 | ' 
0e848                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
0e848     0C 4E 05 F1 | 	add	fp, #12
0e84c     A7 FE 09 FB | 	rdlong	result3, fp wz
0e850     0C 4E 85 F1 | 	sub	fp, #12
0e854     30 00 90 5D |  if_ne	jmp	#LR__1231
0e858     51 00 00 FF 
0e85c     DC E5 05 F1 | 	add	objptr, ##41948
0e860     F2 1E 02 FB | 	rdlong	local01, objptr
0e864     51 00 00 FF 
0e868     DC E5 85 F1 | 	sub	objptr, ##41948
0e86c     A7 1E 62 FC | 	wrlong	local01, fp
0e870     08 4E 05 F1 | 	add	fp, #8
0e874     A7 3A 68 FC | 	wrlong	#29, fp
0e878     08 4E 85 F1 | 	sub	fp, #8
0e87c     A7 12 02 F6 | 	mov	arg01, fp
0e880     88 A1 BF FD | 	call	#_push
0e884     A8 00 90 FD | 	jmp	#LR__1234
0e888                 | LR__1231
0e888     E8 A0 BF FD | 	call	#_pop
0e88c     A7 FA 61 FC | 	wrlong	result1, fp
0e890     04 4E 05 F1 | 	add	fp, #4
0e894     A7 FC 61 FC | 	wrlong	result2, fp
0e898     04 4E 05 F1 | 	add	fp, #4
0e89c     A7 FE 61 FC | 	wrlong	result3, fp
0e8a0                 | ' 
0e8a0                 | ' t1=pop()
0e8a0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
0e8a0     08 4E 85 F1 | 	sub	fp, #8
0e8a4     1C FE 0D F2 | 	cmp	result3, #28 wz
0e8a8     08 4E 05 51 |  if_ne	add	fp, #8
0e8ac     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e8b0     08 4E 85 51 |  if_ne	sub	fp, #8
0e8b4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0e8b8     6C 00 90 5D |  if_ne	jmp	#LR__1233
0e8bc     A7 1E 02 FB | 	rdlong	local01, fp
0e8c0     52 00 00 FF 
0e8c4     80 E4 05 F1 | 	add	objptr, ##42112
0e8c8     F2 1E 62 FC | 	wrlong	local01, objptr
0e8cc                 | '   q=t1.result.uresult
0e8cc                 | '   if q<7 then 
0e8cc     52 00 00 FF 
0e8d0     80 E4 85 F1 | 	sub	objptr, ##42112
0e8d4     07 1E 56 F2 | 	cmps	local01, #7 wc
0e8d8     40 00 90 3D |  if_ae	jmp	#LR__1232
0e8dc     52 00 00 FF 
0e8e0     80 E4 05 F1 | 	add	objptr, ##42112
0e8e4     F2 1E 02 FB | 	rdlong	local01, objptr
0e8e8     02 1E 66 F0 | 	shl	local01, #2
0e8ec     A4 E4 85 F1 | 	sub	objptr, #164
0e8f0     F2 1E 02 F1 | 	add	local01, objptr
0e8f4     0F 1F 02 FB | 	rdlong	local01, local01
0e8f8     A7 1E 62 FC | 	wrlong	local01, fp
0e8fc     08 4E 05 F1 | 	add	fp, #8
0e900     A7 3A 68 FC | 	wrlong	#29, fp
0e904     08 4E 85 F1 | 	sub	fp, #8
0e908     A7 12 02 F6 | 	mov	arg01, fp
0e90c     51 00 00 FF 
0e910     DC E5 85 F1 | 	sub	objptr, ##41948
0e914     F4 A0 BF FD | 	call	#_push
0e918                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
0e918     14 00 90 FD | 	jmp	#LR__1234
0e91c                 | LR__1232
0e91c     29 12 06 F6 | 	mov	arg01, #41
0e920     A0 39 B0 FD | 	call	#_printerror
0e924                 | '      printerror(41) : return
0e924     08 00 90 FD | 	jmp	#LR__1234
0e928                 | LR__1233
0e928     29 12 06 F6 | 	mov	arg01, #41
0e92c     94 39 B0 FD | 	call	#_printerror
0e930                 | LR__1234
0e930     A7 F0 03 F6 | 	mov	ptra, fp
0e934     B2 00 A0 FD | 	call	#popregs_
0e938                 | _do_strig_ret
0e938     2D 00 64 FD | 	ret
0e93c                 | 
0e93c                 | ' 
0e93c                 | ' sub do_getpixel
0e93c                 | _do_getpixel
0e93c     00 4A 05 F6 | 	mov	COUNT_, #0
0e940     A8 00 A0 FD | 	call	#pushregs_
0e944     24 F0 07 F1 | 	add	ptra, #36
0e948     41 00 00 FF 
0e94c     44 E4 05 F1 | 	add	objptr, ##33348
0e950     F2 16 02 FB | 	rdlong	arg03, objptr
0e954     0B 15 02 F6 | 	mov	arg02, arg03
0e958     01 14 66 F0 | 	shl	arg02, #1
0e95c     0B 15 02 F1 | 	add	arg02, arg03
0e960     02 14 66 F0 | 	shl	arg02, #2
0e964     03 00 00 FF 
0e968     04 E4 85 F1 | 	sub	objptr, ##1540
0e96c     F2 14 02 F1 | 	add	arg02, objptr
0e970     0A 17 02 FB | 	rdlong	arg03, arg02
0e974     18 4E 05 F1 | 	add	fp, #24
0e978     A7 16 62 FC | 	wrlong	arg03, fp
0e97c                 | ' 
0e97c                 | ' numpar=compiledline(lineptr_e).result.uresult
0e97c                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
0e97c     18 4E 85 F1 | 	sub	fp, #24
0e980     02 16 0E F2 | 	cmp	arg03, #2 wz
0e984     3E 00 00 FF 
0e988     40 E4 85 F1 | 	sub	objptr, ##31808
0e98c     3C 00 90 AD |  if_e	jmp	#LR__1240
0e990     00 12 06 F6 | 	mov	arg01, #0
0e994     D8 C3 B0 FD | 	call	#__system___getiolock_0369
0e998     FD 12 02 F6 | 	mov	arg01, result1
0e99c     20 6E B0 FD | 	call	#__system___lockmem
0e9a0     26 01 00 FF 
0e9a4     F1 15 06 F6 | 	mov	arg02, ##@LR__4341
0e9a8     00 12 06 F6 | 	mov	arg01, #0
0e9ac     00 16 06 F6 | 	mov	arg03, #0
0e9b0     00 7B B0 FD | 	call	#__system___basic_print_string
0e9b4     00 12 06 F6 | 	mov	arg01, #0
0e9b8     B4 C3 B0 FD | 	call	#__system___getiolock_0369
0e9bc     FD 00 68 FC | 	wrlong	#0, result1
0e9c0     27 12 06 F6 | 	mov	arg01, #39
0e9c4     FC 38 B0 FD | 	call	#_printerror
0e9c8     B4 00 90 FD | 	jmp	#LR__1241
0e9cc                 | LR__1240
0e9cc     A4 9F BF FD | 	call	#_pop
0e9d0     FD 16 02 F6 | 	mov	arg03, result1
0e9d4     FE 14 02 F6 | 	mov	arg02, result2
0e9d8     FF 12 02 F6 | 	mov	arg01, result3
0e9dc     0C 4E 05 F1 | 	add	fp, #12
0e9e0     A7 16 62 FC | 	wrlong	arg03, fp
0e9e4     04 4E 05 F1 | 	add	fp, #4
0e9e8     A7 14 62 FC | 	wrlong	arg02, fp
0e9ec     04 4E 05 F1 | 	add	fp, #4
0e9f0     A7 12 62 FC | 	wrlong	arg01, fp
0e9f4     14 4E 85 F1 | 	sub	fp, #20
0e9f8     78 9F BF FD | 	call	#_pop
0e9fc     FF 16 02 F6 | 	mov	arg03, result3
0ea00     A7 FA 61 FC | 	wrlong	result1, fp
0ea04     04 4E 05 F1 | 	add	fp, #4
0ea08     A7 FC 61 FC | 	wrlong	result2, fp
0ea0c     04 4E 05 F1 | 	add	fp, #4
0ea10     A7 16 62 FC | 	wrlong	arg03, fp
0ea14     08 4E 85 F1 | 	sub	fp, #8
0ea18     A7 12 02 F6 | 	mov	arg01, fp
0ea1c     E4 F7 BF FD | 	call	#_converttoint
0ea20     1C 4E 05 F1 | 	add	fp, #28
0ea24     A7 FA 61 FC | 	wrlong	result1, fp
0ea28     10 4E 85 F1 | 	sub	fp, #16
0ea2c     A7 12 02 F6 | 	mov	arg01, fp
0ea30     0C 4E 85 F1 | 	sub	fp, #12
0ea34     CC F7 BF FD | 	call	#_converttoint
0ea38     FD 16 02 F6 | 	mov	arg03, result1
0ea3c     20 4E 05 F1 | 	add	fp, #32
0ea40     A7 16 62 FC | 	wrlong	arg03, fp
0ea44     F2 12 02 FB | 	rdlong	arg01, objptr
0ea48     04 4E 85 F1 | 	sub	fp, #4
0ea4c     A7 FE 01 FB | 	rdlong	result3, fp
0ea50     FF 12 02 F1 | 	add	arg01, result3
0ea54     1C 4E 85 F1 | 	sub	fp, #28
0ea58     0A 16 66 F0 | 	shl	arg03, #10
0ea5c     0B 13 02 F1 | 	add	arg01, arg03
0ea60     C4 39 B0 FD | 	call	#_pspeek
0ea64     FD FA E1 F8 | 	getbyte	result1, result1, #0
0ea68     A7 FA 61 FC | 	wrlong	result1, fp
0ea6c     08 4E 05 F1 | 	add	fp, #8
0ea70     A7 3A 68 FC | 	wrlong	#29, fp
0ea74     08 4E 85 F1 | 	sub	fp, #8
0ea78     A7 12 02 F6 | 	mov	arg01, fp
0ea7c     8C 9F BF FD | 	call	#_push
0ea80                 | LR__1241
0ea80     A7 F0 03 F6 | 	mov	ptra, fp
0ea84     B2 00 A0 FD | 	call	#popregs_
0ea88                 | _do_getpixel_ret
0ea88     2D 00 64 FD | 	ret
0ea8c                 | 
0ea8c                 | ' 
0ea8c                 | ' 
0ea8c                 | ' 
0ea8c                 | ' sub do_defsprite
0ea8c                 | _do_defsprite
0ea8c     07 4A 05 F6 | 	mov	COUNT_, #7
0ea90     A8 00 A0 FD | 	call	#pushregs_
0ea94     5C F0 07 F1 | 	add	ptra, #92
0ea98     D8 9E BF FD | 	call	#_pop
0ea9c     FD 16 02 F6 | 	mov	arg03, result1
0eaa0     FE 14 02 F6 | 	mov	arg02, result2
0eaa4     FF 12 02 F6 | 	mov	arg01, result3
0eaa8     30 4E 05 F1 | 	add	fp, #48
0eaac     A7 16 62 FC | 	wrlong	arg03, fp
0eab0     04 4E 05 F1 | 	add	fp, #4
0eab4     A7 14 62 FC | 	wrlong	arg02, fp
0eab8     04 4E 05 F1 | 	add	fp, #4
0eabc     A7 12 62 FC | 	wrlong	arg01, fp
0eac0     38 4E 85 F1 | 	sub	fp, #56
0eac4     AC 9E BF FD | 	call	#_pop
0eac8     FD 16 02 F6 | 	mov	arg03, result1
0eacc     FE 14 02 F6 | 	mov	arg02, result2
0ead0     FF 12 02 F6 | 	mov	arg01, result3
0ead4     24 4E 05 F1 | 	add	fp, #36
0ead8     A7 16 62 FC | 	wrlong	arg03, fp
0eadc     04 4E 05 F1 | 	add	fp, #4
0eae0     A7 14 62 FC | 	wrlong	arg02, fp
0eae4     04 4E 05 F1 | 	add	fp, #4
0eae8     A7 12 62 FC | 	wrlong	arg01, fp
0eaec     2C 4E 85 F1 | 	sub	fp, #44
0eaf0     80 9E BF FD | 	call	#_pop
0eaf4     FD 16 02 F6 | 	mov	arg03, result1
0eaf8     FE 14 02 F6 | 	mov	arg02, result2
0eafc     FF 12 02 F6 | 	mov	arg01, result3
0eb00     18 4E 05 F1 | 	add	fp, #24
0eb04     A7 16 62 FC | 	wrlong	arg03, fp
0eb08     04 4E 05 F1 | 	add	fp, #4
0eb0c     A7 14 62 FC | 	wrlong	arg02, fp
0eb10     04 4E 05 F1 | 	add	fp, #4
0eb14     A7 12 62 FC | 	wrlong	arg01, fp
0eb18     20 4E 85 F1 | 	sub	fp, #32
0eb1c     54 9E BF FD | 	call	#_pop
0eb20     FD 16 02 F6 | 	mov	arg03, result1
0eb24     FE 14 02 F6 | 	mov	arg02, result2
0eb28     FF 12 02 F6 | 	mov	arg01, result3
0eb2c     0C 4E 05 F1 | 	add	fp, #12
0eb30     A7 16 62 FC | 	wrlong	arg03, fp
0eb34     04 4E 05 F1 | 	add	fp, #4
0eb38     A7 14 62 FC | 	wrlong	arg02, fp
0eb3c     04 4E 05 F1 | 	add	fp, #4
0eb40     A7 12 62 FC | 	wrlong	arg01, fp
0eb44     14 4E 85 F1 | 	sub	fp, #20
0eb48     28 9E BF FD | 	call	#_pop
0eb4c     FF 16 02 F6 | 	mov	arg03, result3
0eb50     A7 FA 61 FC | 	wrlong	result1, fp
0eb54     04 4E 05 F1 | 	add	fp, #4
0eb58     A7 FC 61 FC | 	wrlong	result2, fp
0eb5c     04 4E 05 F1 | 	add	fp, #4
0eb60     A7 16 62 FC | 	wrlong	arg03, fp
0eb64     08 4E 85 F1 | 	sub	fp, #8
0eb68     A7 12 02 F6 | 	mov	arg01, fp
0eb6c     94 F6 BF FD | 	call	#_converttoint
0eb70     3C 4E 05 F1 | 	add	fp, #60
0eb74     A7 FA 61 FC | 	wrlong	result1, fp
0eb78     30 4E 85 F1 | 	sub	fp, #48
0eb7c     A7 12 02 F6 | 	mov	arg01, fp
0eb80     0C 4E 85 F1 | 	sub	fp, #12
0eb84     7C F6 BF FD | 	call	#_converttoint
0eb88     40 4E 05 F1 | 	add	fp, #64
0eb8c     A7 FA 61 FC | 	wrlong	result1, fp
0eb90     28 4E 85 F1 | 	sub	fp, #40
0eb94     A7 12 02 F6 | 	mov	arg01, fp
0eb98     18 4E 85 F1 | 	sub	fp, #24
0eb9c     64 F6 BF FD | 	call	#_converttoint
0eba0     44 4E 05 F1 | 	add	fp, #68
0eba4     A7 FA 61 FC | 	wrlong	result1, fp
0eba8     20 4E 85 F1 | 	sub	fp, #32
0ebac     A7 12 02 F6 | 	mov	arg01, fp
0ebb0     24 4E 85 F1 | 	sub	fp, #36
0ebb4     4C F6 BF FD | 	call	#_converttoint
0ebb8     48 4E 05 F1 | 	add	fp, #72
0ebbc     A7 FA 61 FC | 	wrlong	result1, fp
0ebc0     18 4E 85 F1 | 	sub	fp, #24
0ebc4     A7 12 02 F6 | 	mov	arg01, fp
0ebc8     30 4E 85 F1 | 	sub	fp, #48
0ebcc     34 F6 BF FD | 	call	#_converttoint
0ebd0     4C 4E 05 F1 | 	add	fp, #76
0ebd4     A7 FA 61 FC | 	wrlong	result1, fp
0ebd8                 | ' 
0ebd8                 | ' t5=pop()
0ebd8                 | ' t4=pop()
0ebd8                 | ' t3=pop()
0ebd8                 | ' t2=pop()
0ebd8                 | ' t1=pop()
0ebd8                 | ' 
0ebd8                 | ' ' do convert, defsprite is not a racing command
0ebd8                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
0ebd8                 | '  
0ebd8                 | ' ' todo: check parameters for linits
0ebd8                 | ' if sprite(a1)<> nil then delete(sprite(a1))
0ebd8     10 4E 85 F1 | 	sub	fp, #16
0ebdc     A7 16 02 FB | 	rdlong	arg03, fp
0ebe0     3C 4E 85 F1 | 	sub	fp, #60
0ebe4     02 16 66 F0 | 	shl	arg03, #2
0ebe8     51 00 00 FF 
0ebec     F8 E5 05 F1 | 	add	objptr, ##41976
0ebf0     F2 16 02 F1 | 	add	arg03, objptr
0ebf4     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0ebf8     51 00 00 FF 
0ebfc     F8 E5 85 F1 | 	sub	objptr, ##41976
0ec00     2C 00 90 AD |  if_e	jmp	#LR__1250
0ec04     3C 4E 05 F1 | 	add	fp, #60
0ec08     A7 16 02 FB | 	rdlong	arg03, fp
0ec0c     3C 4E 85 F1 | 	sub	fp, #60
0ec10     02 16 66 F0 | 	shl	arg03, #2
0ec14     51 00 00 FF 
0ec18     F8 E5 05 F1 | 	add	objptr, ##41976
0ec1c     F2 16 02 F1 | 	add	arg03, objptr
0ec20     0B 13 02 FB | 	rdlong	arg01, arg03
0ec24     51 00 00 FF 
0ec28     F8 E5 85 F1 | 	sub	objptr, ##41976
0ec2c     34 A7 B0 FD | 	call	#__system___gc_free
0ec30                 | LR__1250
0ec30     3C 4E 05 F1 | 	add	fp, #60
0ec34     A7 1E 02 FB | 	rdlong	local01, fp
0ec38     0C 4E 05 F1 | 	add	fp, #12
0ec3c     A7 16 02 FB | 	rdlong	arg03, fp
0ec40     04 4E 05 F1 | 	add	fp, #4
0ec44     A7 14 02 FB | 	rdlong	arg02, fp
0ec48     0A 17 02 FD | 	qmul	arg03, arg02
0ec4c     02 1E 66 F0 | 	shl	local01, #2
0ec50     51 00 00 FF 
0ec54     F8 E5 05 F1 | 	add	objptr, ##41976
0ec58     F2 1E 02 F1 | 	add	local01, objptr
0ec5c     4C 4E 85 F1 | 	sub	fp, #76
0ec60     51 00 00 FF 
0ec64     F8 E5 85 F1 | 	sub	objptr, ##41976
0ec68     18 12 62 FD | 	getqx	arg01
0ec6c     B8 A5 B0 FD | 	call	#__system___gc_alloc_managed
0ec70     0F FB 61 FC | 	wrlong	result1, local01
0ec74                 | ' for y=a3 to a3+a5-1
0ec74     44 4E 05 F1 | 	add	fp, #68
0ec78     A7 20 02 FB | 	rdlong	local02, fp
0ec7c     0C 4E 05 F1 | 	add	fp, #12
0ec80     A7 20 62 FC | 	wrlong	local02, fp
0ec84     0C 4E 85 F1 | 	sub	fp, #12
0ec88     A7 22 02 FB | 	rdlong	local03, fp
0ec8c     08 4E 05 F1 | 	add	fp, #8
0ec90     A7 24 02 FB | 	rdlong	local04, fp
0ec94     4C 4E 85 F1 | 	sub	fp, #76
0ec98     12 23 02 F1 | 	add	local03, local04
0ec9c                 | LR__1251
0ec9c     50 4E 05 F1 | 	add	fp, #80
0eca0     A7 20 02 FB | 	rdlong	local02, fp
0eca4     50 4E 85 F1 | 	sub	fp, #80
0eca8     11 21 52 F2 | 	cmps	local02, local03 wc
0ecac     10 01 90 3D |  if_ae	jmp	#LR__1254
0ecb0                 | '   for x=a2 to a4+a2-1
0ecb0     40 4E 05 F1 | 	add	fp, #64
0ecb4     A7 1E 02 FB | 	rdlong	local01, fp
0ecb8     52 00 00 FF 
0ecbc     54 E4 05 F1 | 	add	objptr, ##42068
0ecc0     F2 1E 62 FC | 	wrlong	local01, objptr
0ecc4     52 00 00 FF 
0ecc8     54 E4 85 F1 | 	sub	objptr, ##42068
0eccc     08 4E 05 F1 | 	add	fp, #8
0ecd0     A7 26 02 FB | 	rdlong	local05, fp
0ecd4     08 4E 85 F1 | 	sub	fp, #8
0ecd8     A7 28 02 FB | 	rdlong	local06, fp
0ecdc     40 4E 85 F1 | 	sub	fp, #64
0ece0     14 27 02 F1 | 	add	local05, local06
0ece4                 | LR__1252
0ece4     52 00 00 FF 
0ece8     54 E4 05 F1 | 	add	objptr, ##42068
0ecec     F2 1E 02 FB | 	rdlong	local01, objptr
0ecf0     52 00 00 FF 
0ecf4     54 E4 85 F1 | 	sub	objptr, ##42068
0ecf8     13 1F 52 F2 | 	cmps	local01, local05 wc
0ecfc     A8 00 90 3D |  if_ae	jmp	#LR__1253
0ed00     3C 4E 05 F1 | 	add	fp, #60
0ed04     A7 28 02 FB | 	rdlong	local06, fp
0ed08     04 4E 05 F1 | 	add	fp, #4
0ed0c     A7 24 02 FB | 	rdlong	local04, fp
0ed10     10 4E 05 F1 | 	add	fp, #16
0ed14     A7 20 02 FB | 	rdlong	local02, fp
0ed18     10 1F 02 F6 | 	mov	local01, local02
0ed1c     0C 4E 85 F1 | 	sub	fp, #12
0ed20     A7 16 02 FB | 	rdlong	arg03, fp
0ed24     0B 1F 82 F1 | 	sub	local01, arg03
0ed28     04 4E 05 F1 | 	add	fp, #4
0ed2c     A7 16 02 FB | 	rdlong	arg03, fp
0ed30     0B 1F 02 FD | 	qmul	local01, arg03
0ed34     02 28 66 F0 | 	shl	local06, #2
0ed38     51 00 00 FF 
0ed3c     F8 E5 05 F1 | 	add	objptr, ##41976
0ed40     F2 28 02 F1 | 	add	local06, objptr
0ed44     14 29 02 FB | 	rdlong	local06, local06
0ed48     5C E4 05 F1 | 	add	objptr, #92
0ed4c     F2 1E 02 FB | 	rdlong	local01, objptr
0ed50     52 00 00 FF 
0ed54     54 E4 85 F1 | 	sub	objptr, ##42068
0ed58     0F 2B 02 F6 | 	mov	local07, local01
0ed5c     12 2B 82 F1 | 	sub	local07, local04
0ed60     F2 12 02 FB | 	rdlong	arg01, objptr
0ed64     0F 13 02 F1 | 	add	arg01, local01
0ed68     48 4E 85 F1 | 	sub	fp, #72
0ed6c     0A 20 66 F0 | 	shl	local02, #10
0ed70     10 13 02 F1 | 	add	arg01, local02
0ed74     18 24 62 FD | 	getqx	local04
0ed78     12 2B 02 F1 | 	add	local07, local04
0ed7c     14 2B 02 F1 | 	add	local07, local06
0ed80     A4 36 B0 FD | 	call	#_pspeek
0ed84     15 FB 41 FC | 	wrbyte	result1, local07
0ed88     52 00 00 FF 
0ed8c     54 E4 05 F1 | 	add	objptr, ##42068
0ed90     F2 2A 02 FB | 	rdlong	local07, objptr
0ed94     01 2A 06 F1 | 	add	local07, #1
0ed98     F2 2A 62 FC | 	wrlong	local07, objptr
0ed9c     52 00 00 FF 
0eda0     54 E4 85 F1 | 	sub	objptr, ##42068
0eda4     3C FF 9F FD | 	jmp	#LR__1252
0eda8                 | LR__1253
0eda8     50 4E 05 F1 | 	add	fp, #80
0edac     A7 2A 02 FB | 	rdlong	local07, fp
0edb0     01 2A 06 F1 | 	add	local07, #1
0edb4     A7 2A 62 FC | 	wrlong	local07, fp
0edb8     50 4E 85 F1 | 	sub	fp, #80
0edbc     DC FE 9F FD | 	jmp	#LR__1251
0edc0                 | LR__1254
0edc0     3C 4E 05 F1 | 	add	fp, #60
0edc4     A7 2A 02 FB | 	rdlong	local07, fp
0edc8     15 13 02 F6 | 	mov	arg01, local07
0edcc     3C 4E 85 F1 | 	sub	fp, #60
0edd0     02 2A 66 F0 | 	shl	local07, #2
0edd4     51 00 00 FF 
0edd8     F8 E5 05 F1 | 	add	objptr, ##41976
0eddc     F2 2A 02 F1 | 	add	local07, objptr
0ede0     15 15 02 FB | 	rdlong	arg02, local07
0ede4     51 00 00 FF 
0ede8     F8 E5 85 F1 | 	sub	objptr, ##41976
0edec     C4 49 B0 FD | 	call	#_hg010b_spin2_setspriteptr
0edf0     3C 4E 05 F1 | 	add	fp, #60
0edf4     A7 12 02 FB | 	rdlong	arg01, fp
0edf8     0C 4E 05 F1 | 	add	fp, #12
0edfc     A7 14 02 FB | 	rdlong	arg02, fp
0ee00     04 4E 05 F1 | 	add	fp, #4
0ee04     A7 16 02 FB | 	rdlong	arg03, fp
0ee08     4C 4E 85 F1 | 	sub	fp, #76
0ee0c     18 4A B0 FD | 	call	#_hg010b_spin2_setspritesize
0ee10     A7 F0 03 F6 | 	mov	ptra, fp
0ee14     B2 00 A0 FD | 	call	#popregs_
0ee18                 | _do_defsprite_ret
0ee18     2D 00 64 FD | 	ret
0ee1c                 | 
0ee1c                 | ' 
0ee1c                 | ' sub do_sprite
0ee1c                 | _do_sprite
0ee1c     00 4A 05 F6 | 	mov	COUNT_, #0
0ee20     A8 00 A0 FD | 	call	#pushregs_
0ee24     30 F0 07 F1 | 	add	ptra, #48
0ee28     48 9B BF FD | 	call	#_pop
0ee2c     FD 16 02 F6 | 	mov	arg03, result1
0ee30     FE 14 02 F6 | 	mov	arg02, result2
0ee34     FF 12 02 F6 | 	mov	arg01, result3
0ee38     18 4E 05 F1 | 	add	fp, #24
0ee3c     A7 16 62 FC | 	wrlong	arg03, fp
0ee40     04 4E 05 F1 | 	add	fp, #4
0ee44     A7 14 62 FC | 	wrlong	arg02, fp
0ee48     04 4E 05 F1 | 	add	fp, #4
0ee4c     A7 12 62 FC | 	wrlong	arg01, fp
0ee50     20 4E 85 F1 | 	sub	fp, #32
0ee54     1C 9B BF FD | 	call	#_pop
0ee58     FD 16 02 F6 | 	mov	arg03, result1
0ee5c     FE 14 02 F6 | 	mov	arg02, result2
0ee60     FF 12 02 F6 | 	mov	arg01, result3
0ee64     0C 4E 05 F1 | 	add	fp, #12
0ee68     A7 16 62 FC | 	wrlong	arg03, fp
0ee6c     04 4E 05 F1 | 	add	fp, #4
0ee70     A7 14 62 FC | 	wrlong	arg02, fp
0ee74     04 4E 05 F1 | 	add	fp, #4
0ee78     A7 12 62 FC | 	wrlong	arg01, fp
0ee7c     14 4E 85 F1 | 	sub	fp, #20
0ee80     F0 9A BF FD | 	call	#_pop
0ee84     FF 16 02 F6 | 	mov	arg03, result3
0ee88     A7 FA 61 FC | 	wrlong	result1, fp
0ee8c     04 4E 05 F1 | 	add	fp, #4
0ee90     A7 FC 61 FC | 	wrlong	result2, fp
0ee94     04 4E 05 F1 | 	add	fp, #4
0ee98     A7 16 62 FC | 	wrlong	arg03, fp
0ee9c     08 4E 85 F1 | 	sub	fp, #8
0eea0     A7 12 02 F6 | 	mov	arg01, fp
0eea4     5C F3 BF FD | 	call	#_converttoint
0eea8     24 4E 05 F1 | 	add	fp, #36
0eeac     A7 FA 61 FC | 	wrlong	result1, fp
0eeb0     18 4E 85 F1 | 	sub	fp, #24
0eeb4     A7 12 02 F6 | 	mov	arg01, fp
0eeb8     0C 4E 85 F1 | 	sub	fp, #12
0eebc     44 F3 BF FD | 	call	#_converttoint
0eec0     28 4E 05 F1 | 	add	fp, #40
0eec4     A7 FA 61 FC | 	wrlong	result1, fp
0eec8     10 4E 85 F1 | 	sub	fp, #16
0eecc     A7 12 02 F6 | 	mov	arg01, fp
0eed0     18 4E 85 F1 | 	sub	fp, #24
0eed4     2C F3 BF FD | 	call	#_converttoint
0eed8     2C 4E 05 F1 | 	add	fp, #44
0eedc     A7 FA 61 FC | 	wrlong	result1, fp
0eee0     08 4E 85 F1 | 	sub	fp, #8
0eee4     A7 12 02 FB | 	rdlong	arg01, fp
0eee8     04 4E 05 F1 | 	add	fp, #4
0eeec     A7 14 02 FB | 	rdlong	arg02, fp
0eef0     FD 16 02 F6 | 	mov	arg03, result1
0eef4     28 4E 85 F1 | 	sub	fp, #40
0eef8     E0 48 B0 FD | 	call	#_hg010b_spin2_setspritepos
0eefc     A7 F0 03 F6 | 	mov	ptra, fp
0ef00     B2 00 A0 FD | 	call	#popregs_
0ef04                 | _do_sprite_ret
0ef04     2D 00 64 FD | 	ret
0ef08                 | 
0ef08                 | ' 
0ef08                 | ' sub do_mousex
0ef08                 | _do_mousex
0ef08     00 4A 05 F6 | 	mov	COUNT_, #0
0ef0c     A8 00 A0 FD | 	call	#pushregs_
0ef10     0C F0 07 F1 | 	add	ptra, #12
0ef14     08 4E 05 F1 | 	add	fp, #8
0ef18     A7 3A 68 FC | 	wrlong	#29, fp
0ef1c     08 4E 85 F1 | 	sub	fp, #8
0ef20     51 00 00 FF 
0ef24     B0 E5 05 F1 | 	add	objptr, ##41904
0ef28     F2 12 02 FB | 	rdlong	arg01, objptr
0ef2c     51 00 00 FF 
0ef30     B0 E5 85 F1 | 	sub	objptr, ##41904
0ef34     A7 12 62 FC | 	wrlong	arg01, fp
0ef38     A7 12 02 F6 | 	mov	arg01, fp
0ef3c     CC 9A BF FD | 	call	#_push
0ef40     A7 F0 03 F6 | 	mov	ptra, fp
0ef44     B2 00 A0 FD | 	call	#popregs_
0ef48                 | _do_mousex_ret
0ef48     2D 00 64 FD | 	ret
0ef4c                 | 
0ef4c                 | ' 
0ef4c                 | ' sub do_mousey
0ef4c                 | _do_mousey
0ef4c     00 4A 05 F6 | 	mov	COUNT_, #0
0ef50     A8 00 A0 FD | 	call	#pushregs_
0ef54     0C F0 07 F1 | 	add	ptra, #12
0ef58     08 4E 05 F1 | 	add	fp, #8
0ef5c     A7 3A 68 FC | 	wrlong	#29, fp
0ef60     08 4E 85 F1 | 	sub	fp, #8
0ef64     51 00 00 FF 
0ef68     B4 E5 05 F1 | 	add	objptr, ##41908
0ef6c     F2 12 02 FB | 	rdlong	arg01, objptr
0ef70     51 00 00 FF 
0ef74     B4 E5 85 F1 | 	sub	objptr, ##41908
0ef78     A7 12 62 FC | 	wrlong	arg01, fp
0ef7c     A7 12 02 F6 | 	mov	arg01, fp
0ef80     88 9A BF FD | 	call	#_push
0ef84     A7 F0 03 F6 | 	mov	ptra, fp
0ef88     B2 00 A0 FD | 	call	#popregs_
0ef8c                 | _do_mousey_ret
0ef8c     2D 00 64 FD | 	ret
0ef90                 | 
0ef90                 | ' 
0ef90                 | ' sub do_mousew
0ef90                 | _do_mousew
0ef90     00 4A 05 F6 | 	mov	COUNT_, #0
0ef94     A8 00 A0 FD | 	call	#pushregs_
0ef98     0C F0 07 F1 | 	add	ptra, #12
0ef9c     08 4E 05 F1 | 	add	fp, #8
0efa0     A7 38 68 FC | 	wrlong	#28, fp
0efa4     08 4E 85 F1 | 	sub	fp, #8
0efa8     51 00 00 FF 
0efac     BC E5 05 F1 | 	add	objptr, ##41916
0efb0     F2 12 02 FB | 	rdlong	arg01, objptr
0efb4     51 00 00 FF 
0efb8     BC E5 85 F1 | 	sub	objptr, ##41916
0efbc     A7 12 62 FC | 	wrlong	arg01, fp
0efc0     A7 12 02 F6 | 	mov	arg01, fp
0efc4     44 9A BF FD | 	call	#_push
0efc8     A7 F0 03 F6 | 	mov	ptra, fp
0efcc     B2 00 A0 FD | 	call	#popregs_
0efd0                 | _do_mousew_ret
0efd0     2D 00 64 FD | 	ret
0efd4                 | 
0efd4                 | ' 
0efd4                 | ' sub do_mousek
0efd4                 | _do_mousek
0efd4     00 4A 05 F6 | 	mov	COUNT_, #0
0efd8     A8 00 A0 FD | 	call	#pushregs_
0efdc     0C F0 07 F1 | 	add	ptra, #12
0efe0     08 4E 05 F1 | 	add	fp, #8
0efe4     A7 3A 68 FC | 	wrlong	#29, fp
0efe8     08 4E 85 F1 | 	sub	fp, #8
0efec     51 00 00 FF 
0eff0     B8 E5 05 F1 | 	add	objptr, ##41912
0eff4     F2 12 02 FB | 	rdlong	arg01, objptr
0eff8     51 00 00 FF 
0effc     B8 E5 85 F1 | 	sub	objptr, ##41912
0f000     A7 12 62 FC | 	wrlong	arg01, fp
0f004     A7 12 02 F6 | 	mov	arg01, fp
0f008     00 9A BF FD | 	call	#_push
0f00c     A7 F0 03 F6 | 	mov	ptra, fp
0f010     B2 00 A0 FD | 	call	#popregs_
0f014                 | _do_mousek_ret
0f014     2D 00 64 FD | 	ret
0f018                 | 
0f018                 | ' 
0f018                 | ' 
0f018                 | ' sub do_rdpin
0f018                 | _do_rdpin
0f018     00 4A 05 F6 | 	mov	COUNT_, #0
0f01c     A8 00 A0 FD | 	call	#pushregs_
0f020     0C F0 07 F1 | 	add	ptra, #12
0f024     4C 99 BF FD | 	call	#_pop
0f028     A7 FA 61 FC | 	wrlong	result1, fp
0f02c     04 4E 05 F1 | 	add	fp, #4
0f030     A7 FC 61 FC | 	wrlong	result2, fp
0f034     04 4E 05 F1 | 	add	fp, #4
0f038     A7 FE 61 FC | 	wrlong	result3, fp
0f03c     08 4E 85 F1 | 	sub	fp, #8
0f040     A7 12 02 F6 | 	mov	arg01, fp
0f044     BC F1 BF FD | 	call	#_converttoint
0f048     FD FA 89 FA | 	rdpin	result1, result1
0f04c     52 00 00 FF 
0f050     A4 E4 05 F1 | 	add	objptr, ##42148
0f054     F2 FA 61 FC | 	wrlong	result1, objptr
0f058     52 00 00 FF 
0f05c     A4 E4 85 F1 | 	sub	objptr, ##42148
0f060     08 4E 05 F1 | 	add	fp, #8
0f064     A7 3A 68 FC | 	wrlong	#29, fp
0f068     08 4E 85 F1 | 	sub	fp, #8
0f06c     A7 08 68 FC | 	wrlong	#4, fp
0f070     A7 12 02 F6 | 	mov	arg01, fp
0f074     94 99 BF FD | 	call	#_push
0f078     A7 F0 03 F6 | 	mov	ptra, fp
0f07c     B2 00 A0 FD | 	call	#popregs_
0f080                 | _do_rdpin_ret
0f080     2D 00 64 FD | 	ret
0f084                 | 
0f084                 | ' 
0f084                 | ' sub do_rqpin
0f084                 | _do_rqpin
0f084     00 4A 05 F6 | 	mov	COUNT_, #0
0f088     A8 00 A0 FD | 	call	#pushregs_
0f08c     0C F0 07 F1 | 	add	ptra, #12
0f090     E0 98 BF FD | 	call	#_pop
0f094     A7 FA 61 FC | 	wrlong	result1, fp
0f098     04 4E 05 F1 | 	add	fp, #4
0f09c     A7 FC 61 FC | 	wrlong	result2, fp
0f0a0     04 4E 05 F1 | 	add	fp, #4
0f0a4     A7 FE 61 FC | 	wrlong	result3, fp
0f0a8     08 4E 85 F1 | 	sub	fp, #8
0f0ac     A7 12 02 F6 | 	mov	arg01, fp
0f0b0     50 F1 BF FD | 	call	#_converttoint
0f0b4     FD 12 02 F6 | 	mov	arg01, result1
0f0b8     00 FA 05 F6 | 	mov	result1, #0
0f0bc     09 FB 81 FA | 	rqpin	result1, arg01
0f0c0     52 00 00 FF 
0f0c4     A4 E4 05 F1 | 	add	objptr, ##42148
0f0c8     F2 FA 61 FC | 	wrlong	result1, objptr
0f0cc     52 00 00 FF 
0f0d0     A4 E4 85 F1 | 	sub	objptr, ##42148
0f0d4     08 4E 05 F1 | 	add	fp, #8
0f0d8     A7 3A 68 FC | 	wrlong	#29, fp
0f0dc     08 4E 85 F1 | 	sub	fp, #8
0f0e0     A7 08 68 FC | 	wrlong	#4, fp
0f0e4     A7 12 02 F6 | 	mov	arg01, fp
0f0e8     20 99 BF FD | 	call	#_push
0f0ec     A7 F0 03 F6 | 	mov	ptra, fp
0f0f0     B2 00 A0 FD | 	call	#popregs_
0f0f4                 | _do_rqpin_ret
0f0f4     2D 00 64 FD | 	ret
0f0f8                 | 
0f0f8                 | ' 
0f0f8                 | ' sub do_pinread
0f0f8                 | _do_pinread
0f0f8     00 4A 05 F6 | 	mov	COUNT_, #0
0f0fc     A8 00 A0 FD | 	call	#pushregs_
0f100     0C F0 07 F1 | 	add	ptra, #12
0f104     6C 98 BF FD | 	call	#_pop
0f108     A7 FA 61 FC | 	wrlong	result1, fp
0f10c     04 4E 05 F1 | 	add	fp, #4
0f110     A7 FC 61 FC | 	wrlong	result2, fp
0f114     04 4E 05 F1 | 	add	fp, #4
0f118     A7 FE 61 FC | 	wrlong	result3, fp
0f11c     08 4E 85 F1 | 	sub	fp, #8
0f120     A7 12 02 F6 | 	mov	arg01, fp
0f124     DC F0 BF FD | 	call	#_converttoint
0f128     FD 12 02 F6 | 	mov	arg01, result1
0f12c     20 12 CE F7 | 	test	arg01, #32 wz
0f130     FF FB 01 56 |  if_ne	mov	result1, inb
0f134     FE FB 01 A6 |  if_e	mov	result1, ina
0f138     09 FB 41 F0 | 	shr	result1, arg01
0f13c     06 12 46 F0 | 	shr	arg01, #6
0f140     09 FB 41 F7 | 	zerox	result1, arg01
0f144     52 00 00 FF 
0f148     A4 E4 05 F1 | 	add	objptr, ##42148
0f14c     F2 FA 61 FC | 	wrlong	result1, objptr
0f150     52 00 00 FF 
0f154     A4 E4 85 F1 | 	sub	objptr, ##42148
0f158     08 4E 05 F1 | 	add	fp, #8
0f15c     A7 3A 68 FC | 	wrlong	#29, fp
0f160     08 4E 85 F1 | 	sub	fp, #8
0f164     A7 08 68 FC | 	wrlong	#4, fp
0f168     A7 12 02 F6 | 	mov	arg01, fp
0f16c     9C 98 BF FD | 	call	#_push
0f170     A7 F0 03 F6 | 	mov	ptra, fp
0f174     B2 00 A0 FD | 	call	#popregs_
0f178                 | _do_pinread_ret
0f178     2D 00 64 FD | 	ret
0f17c                 | 
0f17c                 | ' 
0f17c                 | ' sub do_gettime
0f17c                 | _do_gettime
0f17c     02 4A 05 F6 | 	mov	COUNT_, #2
0f180     A8 00 A0 FD | 	call	#pushregs_
0f184     14 F0 07 F1 | 	add	ptra, #20
0f188                 | ' 
0f188                 | ' const asm 
0f188     1A 1E 72 FD | 	getct	local01 wc
0f18c     1A 20 62 FD | 	getct	local02
0f190                 | ' 
0f190                 | ' return hi1, lo1
0f190     10 FD 01 F6 | 	mov	result2, local02
0f194     A7 1E 62 FC | 	wrlong	local01, fp
0f198     04 4E 05 F1 | 	add	fp, #4
0f19c     A7 FC 61 FC | 	wrlong	result2, fp
0f1a0     0C 4E 05 F1 | 	add	fp, #12
0f1a4     A7 3A 68 FC | 	wrlong	#29, fp
0f1a8     0C 4E 85 F1 | 	sub	fp, #12
0f1ac     A7 12 02 FB | 	rdlong	arg01, fp
0f1b0     04 4E 05 F1 | 	add	fp, #4
0f1b4     A7 12 62 FC | 	wrlong	arg01, fp
0f1b8     08 4E 85 F1 | 	sub	fp, #8
0f1bc     A7 12 02 FB | 	rdlong	arg01, fp
0f1c0     0C 4E 05 F1 | 	add	fp, #12
0f1c4     A7 12 62 FC | 	wrlong	arg01, fp
0f1c8     04 4E 85 F1 | 	sub	fp, #4
0f1cc     A7 12 02 F6 | 	mov	arg01, fp
0f1d0     08 4E 85 F1 | 	sub	fp, #8
0f1d4     34 98 BF FD | 	call	#_push
0f1d8     A7 F0 03 F6 | 	mov	ptra, fp
0f1dc     B2 00 A0 FD | 	call	#popregs_
0f1e0                 | _do_gettime_ret
0f1e0     2D 00 64 FD | 	ret
0f1e4                 | 
0f1e4                 | '    
0f1e4                 | ' 
0f1e4                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
0f1e4                 | ' 
0f1e4                 | ' '' ----------------------------- Clear the screen
0f1e4                 | ' 
0f1e4                 | ' sub do_cls
0f1e4                 | _do_cls
0f1e4     2E 00 00 FF 
0f1e8     00 E4 05 F1 | 	add	objptr, ##23552
0f1ec     F2 12 02 FB | 	rdlong	arg01, objptr
0f1f0     04 E4 85 F1 | 	sub	objptr, #4
0f1f4     F2 14 02 FB | 	rdlong	arg02, objptr
0f1f8     2D 00 00 FF 
0f1fc     FC E5 85 F1 | 	sub	objptr, ##23548
0f200     DC 52 B0 FD | 	call	#_hg010b_spin2_cls
0f204     2E 00 00 FF 
0f208     00 E4 05 F1 | 	add	objptr, ##23552
0f20c     F2 14 02 FB | 	rdlong	arg02, objptr
0f210     14 E4 85 F1 | 	sub	objptr, #20
0f214     F2 14 62 FC | 	wrlong	arg02, objptr
0f218     2D 00 00 FF 
0f21c     EC E5 85 F1 | 	sub	objptr, ##23532
0f220                 | ' cls(ink,paper): plot_color=ink: print
0f220     00 12 06 F6 | 	mov	arg01, #0
0f224     48 BB B0 FD | 	call	#__system___getiolock_0369
0f228     FD 12 02 F6 | 	mov	arg01, result1
0f22c     90 65 B0 FD | 	call	#__system___lockmem
0f230     00 12 06 F6 | 	mov	arg01, #0
0f234     0A 14 06 F6 | 	mov	arg02, #10
0f238     00 16 06 F6 | 	mov	arg03, #0
0f23c     1C 72 B0 FD | 	call	#__system___basic_print_char
0f240     00 12 06 F6 | 	mov	arg01, #0
0f244     28 BB B0 FD | 	call	#__system___getiolock_0369
0f248     FD 00 68 FC | 	wrlong	#0, result1
0f24c                 | _do_cls_ret
0f24c     2D 00 64 FD | 	ret
0f250                 | 
0f250                 | ' 
0f250                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
0f250                 | ' 
0f250                 | ' sub do_color
0f250                 | _do_color
0f250     03 4A 05 F6 | 	mov	COUNT_, #3
0f254     A8 00 A0 FD | 	call	#pushregs_
0f258     18 97 BF FD | 	call	#_pop
0f25c     FD 1E 02 F6 | 	mov	local01, result1
0f260     FE 20 02 F6 | 	mov	local02, result2
0f264     FF 22 02 F6 | 	mov	local03, result3
0f268     2D 00 00 FF 
0f26c     EC E5 05 F1 | 	add	objptr, ##23532
0f270     F2 1E 62 FC | 	wrlong	local01, objptr
0f274     2D 00 00 FF 
0f278     EC E5 85 F1 | 	sub	objptr, ##23532
0f27c     A7 F0 03 F6 | 	mov	ptra, fp
0f280     B2 00 A0 FD | 	call	#popregs_
0f284                 | _do_color_ret
0f284     2D 00 64 FD | 	ret
0f288                 | 
0f288                 | ' 
0f288                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
0f288                 | ' 
0f288                 | ' sub do_plot
0f288                 | _do_plot
0f288     08 4A 05 F6 | 	mov	COUNT_, #8
0f28c     A8 00 A0 FD | 	call	#pushregs_
0f290     E0 96 BF FD | 	call	#_pop
0f294     FD 1E 02 F6 | 	mov	local01, result1
0f298     FE 14 02 F6 | 	mov	arg02, result2
0f29c     FF 16 02 F6 | 	mov	arg03, result3
0f2a0     0A 21 02 F6 | 	mov	local02, arg02
0f2a4     0B 23 02 F6 | 	mov	local03, arg03
0f2a8     C8 96 BF FD | 	call	#_pop
0f2ac     FD 24 02 F6 | 	mov	local04, result1
0f2b0     FE 26 02 F6 | 	mov	local05, result2
0f2b4     FF 28 02 F6 | 	mov	local06, result3
0f2b8     12 2B 02 F6 | 	mov	local07, local04
0f2bc     0F 2D 02 F6 | 	mov	local08, local01
0f2c0                 | ' t2=pop() 					 
0f2c0                 | ' t1=pop()
0f2c0                 | ' 
0f2c0                 | ' x=t1.result.iresult
0f2c0                 | ' y=t2.result.iresult	
0f2c0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) then 					  
0f2c0     1C 28 0E F2 | 	cmp	local06, #28 wz
0f2c4     1D 28 0E 52 |  if_ne	cmp	local06, #29 wz
0f2c8     44 00 90 5D |  if_ne	jmp	#LR__1260
0f2cc     1C 22 0E F2 | 	cmp	local03, #28 wz
0f2d0     1D 22 0E 52 |  if_ne	cmp	local03, #29 wz
0f2d4     38 00 90 5D |  if_ne	jmp	#LR__1260
0f2d8     2D 00 00 FF 
0f2dc     F0 E5 05 F1 | 	add	objptr, ##23536
0f2e0     F2 2A 62 FC | 	wrlong	local07, objptr
0f2e4     04 E4 05 F1 | 	add	objptr, #4
0f2e8     F2 2C 62 FC | 	wrlong	local08, objptr
0f2ec     04 E4 85 F1 | 	sub	objptr, #4
0f2f0     F2 12 02 FB | 	rdlong	arg01, objptr
0f2f4     04 E4 85 F1 | 	sub	objptr, #4
0f2f8     F2 16 02 FB | 	rdlong	arg03, objptr
0f2fc     2D 00 00 FF 
0f300     EC E5 85 F1 | 	sub	objptr, ##23532
0f304     16 15 02 F6 | 	mov	arg02, local08
0f308     68 45 B0 FD | 	call	#_hg010b_spin2_putpixel
0f30c     A4 00 90 FD | 	jmp	#LR__1265
0f310                 | LR__1260
0f310                 | '   if t1.result_type=result_float then x=round(t1.result.fresult)
0f310     1E 28 0E F2 | 	cmp	local06, #30 wz
0f314     10 00 90 5D |  if_ne	jmp	#LR__1261
0f318     12 13 02 F6 | 	mov	arg01, local04
0f31c     01 14 06 F6 | 	mov	arg02, #1
0f320     78 93 B0 FD | 	call	#__system___float_tointeger
0f324     FD 2A 02 F6 | 	mov	local07, result1
0f328                 | LR__1261
0f328                 | '   if t2.result_type=result_float then y=round(t2.result.fresult)
0f328     1E 22 0E F2 | 	cmp	local03, #30 wz
0f32c     10 00 90 5D |  if_ne	jmp	#LR__1262
0f330     0F 13 02 F6 | 	mov	arg01, local01
0f334     01 14 06 F6 | 	mov	arg02, #1
0f338     60 93 B0 FD | 	call	#__system___float_tointeger
0f33c     FD 2C 02 F6 | 	mov	local08, result1
0f340                 | LR__1262
0f340                 | '   if t1.result_type=result_string then x=val(t1.result.sresult)
0f340     1F 28 0E F2 | 	cmp	local06, #31 wz
0f344     18 00 90 5D |  if_ne	jmp	#LR__1263
0f348     12 13 02 F6 | 	mov	arg01, local04
0f34c     6C 96 B0 FD | 	call	#__system____builtin_atof
0f350     FD 12 02 F6 | 	mov	arg01, result1
0f354     00 14 06 F6 | 	mov	arg02, #0
0f358     40 93 B0 FD | 	call	#__system___float_tointeger
0f35c     FD 2A 02 F6 | 	mov	local07, result1
0f360                 | LR__1263
0f360                 | '   if t2.result_type=result_string then y=val(t2.result.sresult)
0f360     1F 22 0E F2 | 	cmp	local03, #31 wz
0f364     18 00 90 5D |  if_ne	jmp	#LR__1264
0f368     0F 13 02 F6 | 	mov	arg01, local01
0f36c     4C 96 B0 FD | 	call	#__system____builtin_atof
0f370     FD 12 02 F6 | 	mov	arg01, result1
0f374     00 14 06 F6 | 	mov	arg02, #0
0f378     20 93 B0 FD | 	call	#__system___float_tointeger
0f37c     FD 2C 02 F6 | 	mov	local08, result1
0f380                 | LR__1264
0f380     2D 00 00 FF 
0f384     F0 E5 05 F1 | 	add	objptr, ##23536
0f388     F2 2A 62 FC | 	wrlong	local07, objptr
0f38c     04 E4 05 F1 | 	add	objptr, #4
0f390     F2 2C 62 FC | 	wrlong	local08, objptr
0f394     04 E4 85 F1 | 	sub	objptr, #4
0f398     F2 12 02 FB | 	rdlong	arg01, objptr
0f39c     04 E4 85 F1 | 	sub	objptr, #4
0f3a0     F2 16 02 FB | 	rdlong	arg03, objptr
0f3a4     2D 00 00 FF 
0f3a8     EC E5 85 F1 | 	sub	objptr, ##23532
0f3ac     16 15 02 F6 | 	mov	arg02, local08
0f3b0     C0 44 B0 FD | 	call	#_hg010b_spin2_putpixel
0f3b4                 | LR__1265
0f3b4     A7 F0 03 F6 | 	mov	ptra, fp
0f3b8     B2 00 A0 FD | 	call	#popregs_
0f3bc                 | _do_plot_ret
0f3bc     2D 00 64 FD | 	ret
0f3c0                 | 
0f3c0                 | ' 
0f3c0                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
0f3c0                 | ' 
0f3c0                 | ' sub do_draw
0f3c0                 | _do_draw
0f3c0     08 4A 05 F6 | 	mov	COUNT_, #8
0f3c4     A8 00 A0 FD | 	call	#pushregs_
0f3c8     A8 95 BF FD | 	call	#_pop
0f3cc     FD 1E 02 F6 | 	mov	local01, result1
0f3d0     FE 18 02 F6 | 	mov	arg04, result2
0f3d4     FF 16 02 F6 | 	mov	arg03, result3
0f3d8     0C 21 02 F6 | 	mov	local02, arg04
0f3dc     0B 23 02 F6 | 	mov	local03, arg03
0f3e0     90 95 BF FD | 	call	#_pop
0f3e4     FD 24 02 F6 | 	mov	local04, result1
0f3e8     FE 26 02 F6 | 	mov	local05, result2
0f3ec     FF 28 02 F6 | 	mov	local06, result3
0f3f0     12 2B 02 F6 | 	mov	local07, local04
0f3f4     0F 2D 02 F6 | 	mov	local08, local01
0f3f8                 | ' 
0f3f8                 | ' t2=pop()
0f3f8                 | ' t1=pop()
0f3f8                 | ' x=t1.result.iresult
0f3f8                 | ' y=t2.result.iresult
0f3f8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) then 					  
0f3f8     1C 28 0E F2 | 	cmp	local06, #28 wz
0f3fc     1D 28 0E 52 |  if_ne	cmp	local06, #29 wz
0f400     5C 00 90 5D |  if_ne	jmp	#LR__1270
0f404     1C 22 0E F2 | 	cmp	local03, #28 wz
0f408     1D 22 0E 52 |  if_ne	cmp	local03, #29 wz
0f40c     50 00 90 5D |  if_ne	jmp	#LR__1270
0f410     2D 00 00 FF 
0f414     F0 E5 05 F1 | 	add	objptr, ##23536
0f418     F2 12 02 FB | 	rdlong	arg01, objptr
0f41c     04 E4 05 F1 | 	add	objptr, #4
0f420     F2 14 02 FB | 	rdlong	arg02, objptr
0f424     08 E4 85 F1 | 	sub	objptr, #8
0f428     F2 1A 02 FB | 	rdlong	arg05, objptr
0f42c     2D 00 00 FF 
0f430     EC E5 85 F1 | 	sub	objptr, ##23532
0f434     15 17 02 F6 | 	mov	arg03, local07
0f438     16 19 02 F6 | 	mov	arg04, local08
0f43c     E4 46 B0 FD | 	call	#_hg010b_spin2_draw
0f440     2D 00 00 FF 
0f444     F0 E5 05 F1 | 	add	objptr, ##23536
0f448     F2 2A 62 FC | 	wrlong	local07, objptr
0f44c     04 E4 05 F1 | 	add	objptr, #4
0f450     F2 2C 62 FC | 	wrlong	local08, objptr
0f454     2D 00 00 FF 
0f458     F4 E5 85 F1 | 	sub	objptr, ##23540
0f45c     BC 00 90 FD | 	jmp	#LR__1275
0f460                 | LR__1270
0f460                 | '   if t1.result_type=result_float then x=round(t1.result.fresult)
0f460     1E 28 0E F2 | 	cmp	local06, #30 wz
0f464     10 00 90 5D |  if_ne	jmp	#LR__1271
0f468     12 13 02 F6 | 	mov	arg01, local04
0f46c     01 14 06 F6 | 	mov	arg02, #1
0f470     28 92 B0 FD | 	call	#__system___float_tointeger
0f474     FD 2A 02 F6 | 	mov	local07, result1
0f478                 | LR__1271
0f478                 | '   if t2.result_type=result_float then y=round(t2.result.fresult)
0f478     1E 22 0E F2 | 	cmp	local03, #30 wz
0f47c     10 00 90 5D |  if_ne	jmp	#LR__1272
0f480     0F 13 02 F6 | 	mov	arg01, local01
0f484     01 14 06 F6 | 	mov	arg02, #1
0f488     10 92 B0 FD | 	call	#__system___float_tointeger
0f48c     FD 2C 02 F6 | 	mov	local08, result1
0f490                 | LR__1272
0f490                 | '   if t1.result_type=result_string then x=val(t1.result.fresult)
0f490     1F 28 0E F2 | 	cmp	local06, #31 wz
0f494     18 00 90 5D |  if_ne	jmp	#LR__1273
0f498     12 13 02 F6 | 	mov	arg01, local04
0f49c     1C 95 B0 FD | 	call	#__system____builtin_atof
0f4a0     FD 12 02 F6 | 	mov	arg01, result1
0f4a4     00 14 06 F6 | 	mov	arg02, #0
0f4a8     F0 91 B0 FD | 	call	#__system___float_tointeger
0f4ac     FD 2A 02 F6 | 	mov	local07, result1
0f4b0                 | LR__1273
0f4b0                 | '   if t2.result_type=result_string then y=val(t2.result.fresult)    
0f4b0     1F 22 0E F2 | 	cmp	local03, #31 wz
0f4b4     18 00 90 5D |  if_ne	jmp	#LR__1274
0f4b8     0F 13 02 F6 | 	mov	arg01, local01
0f4bc     FC 94 B0 FD | 	call	#__system____builtin_atof
0f4c0     FD 12 02 F6 | 	mov	arg01, result1
0f4c4     00 14 06 F6 | 	mov	arg02, #0
0f4c8     D0 91 B0 FD | 	call	#__system___float_tointeger
0f4cc     FD 2C 02 F6 | 	mov	local08, result1
0f4d0                 | LR__1274
0f4d0     2D 00 00 FF 
0f4d4     F0 E5 05 F1 | 	add	objptr, ##23536
0f4d8     F2 12 02 FB | 	rdlong	arg01, objptr
0f4dc     04 E4 05 F1 | 	add	objptr, #4
0f4e0     F2 14 02 FB | 	rdlong	arg02, objptr
0f4e4     08 E4 85 F1 | 	sub	objptr, #8
0f4e8     F2 1A 02 FB | 	rdlong	arg05, objptr
0f4ec     2D 00 00 FF 
0f4f0     EC E5 85 F1 | 	sub	objptr, ##23532
0f4f4     15 17 02 F6 | 	mov	arg03, local07
0f4f8     16 19 02 F6 | 	mov	arg04, local08
0f4fc     24 46 B0 FD | 	call	#_hg010b_spin2_draw
0f500     2D 00 00 FF 
0f504     F0 E5 05 F1 | 	add	objptr, ##23536
0f508     F2 2A 62 FC | 	wrlong	local07, objptr
0f50c     04 E4 05 F1 | 	add	objptr, #4
0f510     F2 2C 62 FC | 	wrlong	local08, objptr
0f514     2D 00 00 FF 
0f518     F4 E5 85 F1 | 	sub	objptr, ##23540
0f51c                 | LR__1275
0f51c     A7 F0 03 F6 | 	mov	ptra, fp
0f520     B2 00 A0 FD | 	call	#popregs_
0f524                 | _do_draw_ret
0f524     2D 00 64 FD | 	ret
0f528                 | 
0f528                 | ' 
0f528                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
0f528                 | ' 
0f528                 | ' sub do_fcircle
0f528                 | _do_fcircle
0f528     02 4A 05 F6 | 	mov	COUNT_, #2
0f52c     A8 00 A0 FD | 	call	#pushregs_
0f530     24 F0 07 F1 | 	add	ptra, #36
0f534     3C 94 BF FD | 	call	#_pop
0f538     FD 18 02 F6 | 	mov	arg04, result1
0f53c     FE 16 02 F6 | 	mov	arg03, result2
0f540     FF 14 02 F6 | 	mov	arg02, result3
0f544     18 4E 05 F1 | 	add	fp, #24
0f548     A7 18 62 FC | 	wrlong	arg04, fp
0f54c     04 4E 05 F1 | 	add	fp, #4
0f550     A7 16 62 FC | 	wrlong	arg03, fp
0f554     04 4E 05 F1 | 	add	fp, #4
0f558     A7 14 62 FC | 	wrlong	arg02, fp
0f55c     20 4E 85 F1 | 	sub	fp, #32
0f560     10 94 BF FD | 	call	#_pop
0f564     FD 18 02 F6 | 	mov	arg04, result1
0f568     FE 16 02 F6 | 	mov	arg03, result2
0f56c     FF 1E 02 F6 | 	mov	local01, result3
0f570     0C 4E 05 F1 | 	add	fp, #12
0f574     A7 18 62 FC | 	wrlong	arg04, fp
0f578     04 4E 05 F1 | 	add	fp, #4
0f57c     A7 16 62 FC | 	wrlong	arg03, fp
0f580     04 4E 05 F1 | 	add	fp, #4
0f584     A7 1E 62 FC | 	wrlong	local01, fp
0f588     14 4E 85 F1 | 	sub	fp, #20
0f58c     E4 93 BF FD | 	call	#_pop
0f590     A7 FA 61 FC | 	wrlong	result1, fp
0f594     04 4E 05 F1 | 	add	fp, #4
0f598     A7 FC 61 FC | 	wrlong	result2, fp
0f59c     04 4E 05 F1 | 	add	fp, #4
0f5a0     A7 FE 61 FC | 	wrlong	result3, fp
0f5a4                 | ' 
0f5a4                 | ' t3=pop()
0f5a4                 | ' t2=pop()
0f5a4                 | ' t1=pop()
0f5a4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f5a4     FF 18 02 F6 | 	mov	arg04, result3
0f5a8     08 4E 85 F1 | 	sub	fp, #8
0f5ac     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f5b0     08 4E 05 51 |  if_ne	add	fp, #8
0f5b4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0f5b8     08 4E 85 51 |  if_ne	sub	fp, #8
0f5bc     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0f5c0     7C 00 90 5D |  if_ne	jmp	#LR__1280
0f5c4     14 4E 05 F1 | 	add	fp, #20
0f5c8     A7 1E 02 FB | 	rdlong	local01, fp
0f5cc     14 4E 85 F1 | 	sub	fp, #20
0f5d0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f5d4     14 4E 05 51 |  if_ne	add	fp, #20
0f5d8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f5dc     14 4E 85 51 |  if_ne	sub	fp, #20
0f5e0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f5e4     58 00 90 5D |  if_ne	jmp	#LR__1280
0f5e8     20 4E 05 F1 | 	add	fp, #32
0f5ec     A7 1E 02 FB | 	rdlong	local01, fp
0f5f0     20 4E 85 F1 | 	sub	fp, #32
0f5f4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f5f8     20 4E 05 51 |  if_ne	add	fp, #32
0f5fc     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f600     20 4E 85 51 |  if_ne	sub	fp, #32
0f604     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f608     34 00 90 5D |  if_ne	jmp	#LR__1280
0f60c     A7 12 02 FB | 	rdlong	arg01, fp
0f610     0C 4E 05 F1 | 	add	fp, #12
0f614     A7 14 02 FB | 	rdlong	arg02, fp
0f618     0C 4E 05 F1 | 	add	fp, #12
0f61c     A7 16 02 FB | 	rdlong	arg03, fp
0f620     18 4E 85 F1 | 	sub	fp, #24
0f624     2D 00 00 FF 
0f628     EC E5 05 F1 | 	add	objptr, ##23532
0f62c     F2 18 02 FB | 	rdlong	arg04, objptr
0f630     2D 00 00 FF 
0f634     EC E5 85 F1 | 	sub	objptr, ##23532
0f638     6C 49 B0 FD | 	call	#_hg010b_spin2_fcircle
0f63c                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f63c     54 00 90 FD | 	jmp	#LR__1281
0f640                 | LR__1280
0f640     A7 12 02 F6 | 	mov	arg01, fp
0f644     BC EB BF FD | 	call	#_converttoint
0f648     FD 1E 02 F6 | 	mov	local01, result1
0f64c     0C 4E 05 F1 | 	add	fp, #12
0f650     A7 12 02 F6 | 	mov	arg01, fp
0f654     0C 4E 85 F1 | 	sub	fp, #12
0f658     A8 EB BF FD | 	call	#_converttoint
0f65c     FD 20 02 F6 | 	mov	local02, result1
0f660     18 4E 05 F1 | 	add	fp, #24
0f664     A7 12 02 F6 | 	mov	arg01, fp
0f668     18 4E 85 F1 | 	sub	fp, #24
0f66c     94 EB BF FD | 	call	#_converttoint
0f670     FD 16 02 F6 | 	mov	arg03, result1
0f674     2D 00 00 FF 
0f678     EC E5 05 F1 | 	add	objptr, ##23532
0f67c     F2 18 02 FB | 	rdlong	arg04, objptr
0f680     2D 00 00 FF 
0f684     EC E5 85 F1 | 	sub	objptr, ##23532
0f688     0F 13 02 F6 | 	mov	arg01, local01
0f68c     10 15 02 F6 | 	mov	arg02, local02
0f690     14 49 B0 FD | 	call	#_hg010b_spin2_fcircle
0f694                 | LR__1281
0f694     A7 F0 03 F6 | 	mov	ptra, fp
0f698     B2 00 A0 FD | 	call	#popregs_
0f69c                 | _do_fcircle_ret
0f69c     2D 00 64 FD | 	ret
0f6a0                 | 
0f6a0                 | ' 
0f6a0                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
0f6a0                 | ' 
0f6a0                 | ' sub do_circle
0f6a0                 | _do_circle
0f6a0     02 4A 05 F6 | 	mov	COUNT_, #2
0f6a4     A8 00 A0 FD | 	call	#pushregs_
0f6a8     24 F0 07 F1 | 	add	ptra, #36
0f6ac     C4 92 BF FD | 	call	#_pop
0f6b0     FD 18 02 F6 | 	mov	arg04, result1
0f6b4     FE 16 02 F6 | 	mov	arg03, result2
0f6b8     FF 14 02 F6 | 	mov	arg02, result3
0f6bc     18 4E 05 F1 | 	add	fp, #24
0f6c0     A7 18 62 FC | 	wrlong	arg04, fp
0f6c4     04 4E 05 F1 | 	add	fp, #4
0f6c8     A7 16 62 FC | 	wrlong	arg03, fp
0f6cc     04 4E 05 F1 | 	add	fp, #4
0f6d0     A7 14 62 FC | 	wrlong	arg02, fp
0f6d4     20 4E 85 F1 | 	sub	fp, #32
0f6d8     98 92 BF FD | 	call	#_pop
0f6dc     FD 18 02 F6 | 	mov	arg04, result1
0f6e0     FE 16 02 F6 | 	mov	arg03, result2
0f6e4     FF 1E 02 F6 | 	mov	local01, result3
0f6e8     0C 4E 05 F1 | 	add	fp, #12
0f6ec     A7 18 62 FC | 	wrlong	arg04, fp
0f6f0     04 4E 05 F1 | 	add	fp, #4
0f6f4     A7 16 62 FC | 	wrlong	arg03, fp
0f6f8     04 4E 05 F1 | 	add	fp, #4
0f6fc     A7 1E 62 FC | 	wrlong	local01, fp
0f700     14 4E 85 F1 | 	sub	fp, #20
0f704     6C 92 BF FD | 	call	#_pop
0f708     A7 FA 61 FC | 	wrlong	result1, fp
0f70c     04 4E 05 F1 | 	add	fp, #4
0f710     A7 FC 61 FC | 	wrlong	result2, fp
0f714     04 4E 05 F1 | 	add	fp, #4
0f718     A7 FE 61 FC | 	wrlong	result3, fp
0f71c                 | ' 
0f71c                 | ' t3=pop()
0f71c                 | ' t2=pop()
0f71c                 | ' t1=pop()
0f71c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f71c     FF 18 02 F6 | 	mov	arg04, result3
0f720     08 4E 85 F1 | 	sub	fp, #8
0f724     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f728     08 4E 05 51 |  if_ne	add	fp, #8
0f72c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0f730     08 4E 85 51 |  if_ne	sub	fp, #8
0f734     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0f738     7C 00 90 5D |  if_ne	jmp	#LR__1290
0f73c     14 4E 05 F1 | 	add	fp, #20
0f740     A7 1E 02 FB | 	rdlong	local01, fp
0f744     14 4E 85 F1 | 	sub	fp, #20
0f748     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f74c     14 4E 05 51 |  if_ne	add	fp, #20
0f750     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f754     14 4E 85 51 |  if_ne	sub	fp, #20
0f758     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f75c     58 00 90 5D |  if_ne	jmp	#LR__1290
0f760     20 4E 05 F1 | 	add	fp, #32
0f764     A7 1E 02 FB | 	rdlong	local01, fp
0f768     20 4E 85 F1 | 	sub	fp, #32
0f76c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f770     20 4E 05 51 |  if_ne	add	fp, #32
0f774     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f778     20 4E 85 51 |  if_ne	sub	fp, #32
0f77c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f780     34 00 90 5D |  if_ne	jmp	#LR__1290
0f784     A7 12 02 FB | 	rdlong	arg01, fp
0f788     0C 4E 05 F1 | 	add	fp, #12
0f78c     A7 14 02 FB | 	rdlong	arg02, fp
0f790     0C 4E 05 F1 | 	add	fp, #12
0f794     A7 16 02 FB | 	rdlong	arg03, fp
0f798     18 4E 85 F1 | 	sub	fp, #24
0f79c     2D 00 00 FF 
0f7a0     EC E5 05 F1 | 	add	objptr, ##23532
0f7a4     F2 18 02 FB | 	rdlong	arg04, objptr
0f7a8     2D 00 00 FF 
0f7ac     EC E5 85 F1 | 	sub	objptr, ##23532
0f7b0     00 49 B0 FD | 	call	#_hg010b_spin2_circle
0f7b4                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f7b4     54 00 90 FD | 	jmp	#LR__1291
0f7b8                 | LR__1290
0f7b8     A7 12 02 F6 | 	mov	arg01, fp
0f7bc     44 EA BF FD | 	call	#_converttoint
0f7c0     FD 1E 02 F6 | 	mov	local01, result1
0f7c4     0C 4E 05 F1 | 	add	fp, #12
0f7c8     A7 12 02 F6 | 	mov	arg01, fp
0f7cc     0C 4E 85 F1 | 	sub	fp, #12
0f7d0     30 EA BF FD | 	call	#_converttoint
0f7d4     FD 20 02 F6 | 	mov	local02, result1
0f7d8     18 4E 05 F1 | 	add	fp, #24
0f7dc     A7 12 02 F6 | 	mov	arg01, fp
0f7e0     18 4E 85 F1 | 	sub	fp, #24
0f7e4     1C EA BF FD | 	call	#_converttoint
0f7e8     FD 16 02 F6 | 	mov	arg03, result1
0f7ec     2D 00 00 FF 
0f7f0     EC E5 05 F1 | 	add	objptr, ##23532
0f7f4     F2 18 02 FB | 	rdlong	arg04, objptr
0f7f8     2D 00 00 FF 
0f7fc     EC E5 85 F1 | 	sub	objptr, ##23532
0f800     0F 13 02 F6 | 	mov	arg01, local01
0f804     10 15 02 F6 | 	mov	arg02, local02
0f808     A8 48 B0 FD | 	call	#_hg010b_spin2_circle
0f80c                 | LR__1291
0f80c     A7 F0 03 F6 | 	mov	ptra, fp
0f810     B2 00 A0 FD | 	call	#popregs_
0f814                 | _do_circle_ret
0f814     2D 00 64 FD | 	ret
0f818                 | 
0f818                 | ' 
0f818                 | ' ' -------------------------- Draw a rectangle
0f818                 | ' 
0f818                 | ' sub do_box
0f818                 | _do_box
0f818     03 4A 05 F6 | 	mov	COUNT_, #3
0f81c     A8 00 A0 FD | 	call	#pushregs_
0f820     30 F0 07 F1 | 	add	ptra, #48
0f824     4C 91 BF FD | 	call	#_pop
0f828     FD 1A 02 F6 | 	mov	arg05, result1
0f82c     FE 18 02 F6 | 	mov	arg04, result2
0f830     FF 16 02 F6 | 	mov	arg03, result3
0f834     24 4E 05 F1 | 	add	fp, #36
0f838     A7 1A 62 FC | 	wrlong	arg05, fp
0f83c     04 4E 05 F1 | 	add	fp, #4
0f840     A7 18 62 FC | 	wrlong	arg04, fp
0f844     04 4E 05 F1 | 	add	fp, #4
0f848     A7 16 62 FC | 	wrlong	arg03, fp
0f84c     2C 4E 85 F1 | 	sub	fp, #44
0f850     20 91 BF FD | 	call	#_pop
0f854     FD 1A 02 F6 | 	mov	arg05, result1
0f858     FE 18 02 F6 | 	mov	arg04, result2
0f85c     FF 16 02 F6 | 	mov	arg03, result3
0f860     18 4E 05 F1 | 	add	fp, #24
0f864     A7 1A 62 FC | 	wrlong	arg05, fp
0f868     04 4E 05 F1 | 	add	fp, #4
0f86c     A7 18 62 FC | 	wrlong	arg04, fp
0f870     04 4E 05 F1 | 	add	fp, #4
0f874     A7 16 62 FC | 	wrlong	arg03, fp
0f878     20 4E 85 F1 | 	sub	fp, #32
0f87c     F4 90 BF FD | 	call	#_pop
0f880     FD 1A 02 F6 | 	mov	arg05, result1
0f884     FE 18 02 F6 | 	mov	arg04, result2
0f888     FF 1E 02 F6 | 	mov	local01, result3
0f88c     0C 4E 05 F1 | 	add	fp, #12
0f890     A7 1A 62 FC | 	wrlong	arg05, fp
0f894     04 4E 05 F1 | 	add	fp, #4
0f898     A7 18 62 FC | 	wrlong	arg04, fp
0f89c     04 4E 05 F1 | 	add	fp, #4
0f8a0     A7 1E 62 FC | 	wrlong	local01, fp
0f8a4     14 4E 85 F1 | 	sub	fp, #20
0f8a8     C8 90 BF FD | 	call	#_pop
0f8ac     A7 FA 61 FC | 	wrlong	result1, fp
0f8b0     04 4E 05 F1 | 	add	fp, #4
0f8b4     A7 FC 61 FC | 	wrlong	result2, fp
0f8b8     04 4E 05 F1 | 	add	fp, #4
0f8bc     A7 FE 61 FC | 	wrlong	result3, fp
0f8c0                 | ' 
0f8c0                 | ' t4=pop()
0f8c0                 | ' t3=pop()
0f8c0                 | ' t2=pop()
0f8c0                 | ' t1=pop()
0f8c0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0f8c0     FF 1A 02 F6 | 	mov	arg05, result3
0f8c4     08 4E 85 F1 | 	sub	fp, #8
0f8c8     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0f8cc     08 4E 05 51 |  if_ne	add	fp, #8
0f8d0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0f8d4     08 4E 85 51 |  if_ne	sub	fp, #8
0f8d8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0f8dc     A8 00 90 5D |  if_ne	jmp	#LR__1300
0f8e0     14 4E 05 F1 | 	add	fp, #20
0f8e4     A7 1E 02 FB | 	rdlong	local01, fp
0f8e8     14 4E 85 F1 | 	sub	fp, #20
0f8ec     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f8f0     14 4E 05 51 |  if_ne	add	fp, #20
0f8f4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0f8f8     14 4E 85 51 |  if_ne	sub	fp, #20
0f8fc     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0f900     84 00 90 5D |  if_ne	jmp	#LR__1300
0f904     20 4E 05 F1 | 	add	fp, #32
0f908     A7 1E 02 FB | 	rdlong	local01, fp
0f90c     20 4E 85 F1 | 	sub	fp, #32
0f910     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f914     20 4E 05 51 |  if_ne	add	fp, #32
0f918     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0f91c     20 4E 85 51 |  if_ne	sub	fp, #32
0f920     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0f924     60 00 90 5D |  if_ne	jmp	#LR__1300
0f928     2C 4E 05 F1 | 	add	fp, #44
0f92c     A7 1E 02 FB | 	rdlong	local01, fp
0f930     2C 4E 85 F1 | 	sub	fp, #44
0f934     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f938     2C 4E 05 51 |  if_ne	add	fp, #44
0f93c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0f940     2C 4E 85 51 |  if_ne	sub	fp, #44
0f944     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0f948     3C 00 90 5D |  if_ne	jmp	#LR__1300
0f94c     A7 12 02 FB | 	rdlong	arg01, fp
0f950     0C 4E 05 F1 | 	add	fp, #12
0f954     A7 14 02 FB | 	rdlong	arg02, fp
0f958     0C 4E 05 F1 | 	add	fp, #12
0f95c     A7 16 02 FB | 	rdlong	arg03, fp
0f960     0C 4E 05 F1 | 	add	fp, #12
0f964     A7 18 02 FB | 	rdlong	arg04, fp
0f968     24 4E 85 F1 | 	sub	fp, #36
0f96c     2D 00 00 FF 
0f970     EC E5 05 F1 | 	add	objptr, ##23532
0f974     F2 1A 02 FB | 	rdlong	arg05, objptr
0f978     2D 00 00 FF 
0f97c     EC E5 85 F1 | 	sub	objptr, ##23532
0f980     FC 48 B0 FD | 	call	#_hg010b_spin2_box
0f984                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0f984     6C 00 90 FD | 	jmp	#LR__1301
0f988                 | LR__1300
0f988     A7 12 02 F6 | 	mov	arg01, fp
0f98c     74 E8 BF FD | 	call	#_converttoint
0f990     FD 20 02 F6 | 	mov	local02, result1
0f994     0C 4E 05 F1 | 	add	fp, #12
0f998     A7 12 02 F6 | 	mov	arg01, fp
0f99c     0C 4E 85 F1 | 	sub	fp, #12
0f9a0     60 E8 BF FD | 	call	#_converttoint
0f9a4     FD 22 02 F6 | 	mov	local03, result1
0f9a8     18 4E 05 F1 | 	add	fp, #24
0f9ac     A7 12 02 F6 | 	mov	arg01, fp
0f9b0     18 4E 85 F1 | 	sub	fp, #24
0f9b4     4C E8 BF FD | 	call	#_converttoint
0f9b8     FD 1E 02 F6 | 	mov	local01, result1
0f9bc     24 4E 05 F1 | 	add	fp, #36
0f9c0     A7 12 02 F6 | 	mov	arg01, fp
0f9c4     24 4E 85 F1 | 	sub	fp, #36
0f9c8     38 E8 BF FD | 	call	#_converttoint
0f9cc     FD 18 02 F6 | 	mov	arg04, result1
0f9d0     2D 00 00 FF 
0f9d4     EC E5 05 F1 | 	add	objptr, ##23532
0f9d8     F2 1A 02 FB | 	rdlong	arg05, objptr
0f9dc     2D 00 00 FF 
0f9e0     EC E5 85 F1 | 	sub	objptr, ##23532
0f9e4     10 13 02 F6 | 	mov	arg01, local02
0f9e8     11 15 02 F6 | 	mov	arg02, local03
0f9ec     0F 17 02 F6 | 	mov	arg03, local01
0f9f0     8C 48 B0 FD | 	call	#_hg010b_spin2_box
0f9f4                 | LR__1301
0f9f4     A7 F0 03 F6 | 	mov	ptra, fp
0f9f8     B2 00 A0 FD | 	call	#popregs_
0f9fc                 | _do_box_ret
0f9fc     2D 00 64 FD | 	ret
0fa00                 | 
0fa00                 | ' 
0fa00                 | ' sub do_fill
0fa00                 | _do_fill
0fa00     03 4A 05 F6 | 	mov	COUNT_, #3
0fa04     A8 00 A0 FD | 	call	#pushregs_
0fa08     30 F0 07 F1 | 	add	ptra, #48
0fa0c     64 8F BF FD | 	call	#_pop
0fa10     FD 18 02 F6 | 	mov	arg04, result1
0fa14     FE 16 02 F6 | 	mov	arg03, result2
0fa18     FF 14 02 F6 | 	mov	arg02, result3
0fa1c     24 4E 05 F1 | 	add	fp, #36
0fa20     A7 18 62 FC | 	wrlong	arg04, fp
0fa24     04 4E 05 F1 | 	add	fp, #4
0fa28     A7 16 62 FC | 	wrlong	arg03, fp
0fa2c     04 4E 05 F1 | 	add	fp, #4
0fa30     A7 14 62 FC | 	wrlong	arg02, fp
0fa34     2C 4E 85 F1 | 	sub	fp, #44
0fa38     38 8F BF FD | 	call	#_pop
0fa3c     FD 18 02 F6 | 	mov	arg04, result1
0fa40     FE 16 02 F6 | 	mov	arg03, result2
0fa44     FF 14 02 F6 | 	mov	arg02, result3
0fa48     18 4E 05 F1 | 	add	fp, #24
0fa4c     A7 18 62 FC | 	wrlong	arg04, fp
0fa50     04 4E 05 F1 | 	add	fp, #4
0fa54     A7 16 62 FC | 	wrlong	arg03, fp
0fa58     04 4E 05 F1 | 	add	fp, #4
0fa5c     A7 14 62 FC | 	wrlong	arg02, fp
0fa60     20 4E 85 F1 | 	sub	fp, #32
0fa64     0C 8F BF FD | 	call	#_pop
0fa68     FD 18 02 F6 | 	mov	arg04, result1
0fa6c     FE 16 02 F6 | 	mov	arg03, result2
0fa70     FF 1E 02 F6 | 	mov	local01, result3
0fa74     0C 4E 05 F1 | 	add	fp, #12
0fa78     A7 18 62 FC | 	wrlong	arg04, fp
0fa7c     04 4E 05 F1 | 	add	fp, #4
0fa80     A7 16 62 FC | 	wrlong	arg03, fp
0fa84     04 4E 05 F1 | 	add	fp, #4
0fa88     A7 1E 62 FC | 	wrlong	local01, fp
0fa8c     14 4E 85 F1 | 	sub	fp, #20
0fa90     E0 8E BF FD | 	call	#_pop
0fa94     A7 FA 61 FC | 	wrlong	result1, fp
0fa98     04 4E 05 F1 | 	add	fp, #4
0fa9c     A7 FC 61 FC | 	wrlong	result2, fp
0faa0     04 4E 05 F1 | 	add	fp, #4
0faa4     A7 FE 61 FC | 	wrlong	result3, fp
0faa8                 | ' 
0faa8                 | ' t4=pop()
0faa8                 | ' t3=pop()
0faa8                 | ' t2=pop()
0faa8                 | ' t1=pop()
0faa8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0faa8     FF 18 02 F6 | 	mov	arg04, result3
0faac     08 4E 85 F1 | 	sub	fp, #8
0fab0     1C 18 0E F2 | 	cmp	arg04, #28 wz
0fab4     08 4E 05 51 |  if_ne	add	fp, #8
0fab8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0fabc     08 4E 85 51 |  if_ne	sub	fp, #8
0fac0     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0fac4     94 00 90 5D |  if_ne	jmp	#LR__1310
0fac8     14 4E 05 F1 | 	add	fp, #20
0facc     A7 1E 02 FB | 	rdlong	local01, fp
0fad0     14 4E 85 F1 | 	sub	fp, #20
0fad4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fad8     14 4E 05 51 |  if_ne	add	fp, #20
0fadc     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0fae0     14 4E 85 51 |  if_ne	sub	fp, #20
0fae4     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0fae8     70 00 90 5D |  if_ne	jmp	#LR__1310
0faec     20 4E 05 F1 | 	add	fp, #32
0faf0     A7 1E 02 FB | 	rdlong	local01, fp
0faf4     20 4E 85 F1 | 	sub	fp, #32
0faf8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fafc     20 4E 05 51 |  if_ne	add	fp, #32
0fb00     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0fb04     20 4E 85 51 |  if_ne	sub	fp, #32
0fb08     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0fb0c     4C 00 90 5D |  if_ne	jmp	#LR__1310
0fb10     2C 4E 05 F1 | 	add	fp, #44
0fb14     A7 1E 02 FB | 	rdlong	local01, fp
0fb18     2C 4E 85 F1 | 	sub	fp, #44
0fb1c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fb20     2C 4E 05 51 |  if_ne	add	fp, #44
0fb24     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0fb28     2C 4E 85 51 |  if_ne	sub	fp, #44
0fb2c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0fb30     28 00 90 5D |  if_ne	jmp	#LR__1310
0fb34     A7 12 02 FB | 	rdlong	arg01, fp
0fb38     0C 4E 05 F1 | 	add	fp, #12
0fb3c     A7 14 02 FB | 	rdlong	arg02, fp
0fb40     0C 4E 05 F1 | 	add	fp, #12
0fb44     A7 16 02 FB | 	rdlong	arg03, fp
0fb48     0C 4E 05 F1 | 	add	fp, #12
0fb4c     A7 18 02 FB | 	rdlong	arg04, fp
0fb50     24 4E 85 F1 | 	sub	fp, #36
0fb54     BC 41 B0 FD | 	call	#_hg010b_spin2_fill
0fb58                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
0fb58     58 00 90 FD | 	jmp	#LR__1311
0fb5c                 | LR__1310
0fb5c     A7 12 02 F6 | 	mov	arg01, fp
0fb60     A0 E6 BF FD | 	call	#_converttoint
0fb64     FD 20 02 F6 | 	mov	local02, result1
0fb68     0C 4E 05 F1 | 	add	fp, #12
0fb6c     A7 12 02 F6 | 	mov	arg01, fp
0fb70     0C 4E 85 F1 | 	sub	fp, #12
0fb74     8C E6 BF FD | 	call	#_converttoint
0fb78     FD 22 02 F6 | 	mov	local03, result1
0fb7c     18 4E 05 F1 | 	add	fp, #24
0fb80     A7 12 02 F6 | 	mov	arg01, fp
0fb84     18 4E 85 F1 | 	sub	fp, #24
0fb88     78 E6 BF FD | 	call	#_converttoint
0fb8c     FD 1E 02 F6 | 	mov	local01, result1
0fb90     24 4E 05 F1 | 	add	fp, #36
0fb94     A7 12 02 F6 | 	mov	arg01, fp
0fb98     24 4E 85 F1 | 	sub	fp, #36
0fb9c     64 E6 BF FD | 	call	#_converttoint
0fba0     FD 18 02 F6 | 	mov	arg04, result1
0fba4     10 13 02 F6 | 	mov	arg01, local02
0fba8     11 15 02 F6 | 	mov	arg02, local03
0fbac     0F 17 02 F6 | 	mov	arg03, local01
0fbb0     60 41 B0 FD | 	call	#_hg010b_spin2_fill
0fbb4                 | LR__1311
0fbb4     A7 F0 03 F6 | 	mov	ptra, fp
0fbb8     B2 00 A0 FD | 	call	#popregs_
0fbbc                 | _do_fill_ret
0fbbc     2D 00 64 FD | 	ret
0fbc0                 | 
0fbc0                 | ' 
0fbc0                 | ' ' -------------------------- Draw a frane
0fbc0                 | ' 
0fbc0                 | ' sub do_frame
0fbc0                 | _do_frame
0fbc0     03 4A 05 F6 | 	mov	COUNT_, #3
0fbc4     A8 00 A0 FD | 	call	#pushregs_
0fbc8     30 F0 07 F1 | 	add	ptra, #48
0fbcc     A4 8D BF FD | 	call	#_pop
0fbd0     FD 1A 02 F6 | 	mov	arg05, result1
0fbd4     FE 18 02 F6 | 	mov	arg04, result2
0fbd8     FF 16 02 F6 | 	mov	arg03, result3
0fbdc     24 4E 05 F1 | 	add	fp, #36
0fbe0     A7 1A 62 FC | 	wrlong	arg05, fp
0fbe4     04 4E 05 F1 | 	add	fp, #4
0fbe8     A7 18 62 FC | 	wrlong	arg04, fp
0fbec     04 4E 05 F1 | 	add	fp, #4
0fbf0     A7 16 62 FC | 	wrlong	arg03, fp
0fbf4     2C 4E 85 F1 | 	sub	fp, #44
0fbf8     78 8D BF FD | 	call	#_pop
0fbfc     FD 1A 02 F6 | 	mov	arg05, result1
0fc00     FE 18 02 F6 | 	mov	arg04, result2
0fc04     FF 16 02 F6 | 	mov	arg03, result3
0fc08     18 4E 05 F1 | 	add	fp, #24
0fc0c     A7 1A 62 FC | 	wrlong	arg05, fp
0fc10     04 4E 05 F1 | 	add	fp, #4
0fc14     A7 18 62 FC | 	wrlong	arg04, fp
0fc18     04 4E 05 F1 | 	add	fp, #4
0fc1c     A7 16 62 FC | 	wrlong	arg03, fp
0fc20     20 4E 85 F1 | 	sub	fp, #32
0fc24     4C 8D BF FD | 	call	#_pop
0fc28     FD 1A 02 F6 | 	mov	arg05, result1
0fc2c     FE 18 02 F6 | 	mov	arg04, result2
0fc30     FF 1E 02 F6 | 	mov	local01, result3
0fc34     0C 4E 05 F1 | 	add	fp, #12
0fc38     A7 1A 62 FC | 	wrlong	arg05, fp
0fc3c     04 4E 05 F1 | 	add	fp, #4
0fc40     A7 18 62 FC | 	wrlong	arg04, fp
0fc44     04 4E 05 F1 | 	add	fp, #4
0fc48     A7 1E 62 FC | 	wrlong	local01, fp
0fc4c     14 4E 85 F1 | 	sub	fp, #20
0fc50     20 8D BF FD | 	call	#_pop
0fc54     A7 FA 61 FC | 	wrlong	result1, fp
0fc58     04 4E 05 F1 | 	add	fp, #4
0fc5c     A7 FC 61 FC | 	wrlong	result2, fp
0fc60     04 4E 05 F1 | 	add	fp, #4
0fc64     A7 FE 61 FC | 	wrlong	result3, fp
0fc68                 | ' 
0fc68                 | ' t4=pop()
0fc68                 | ' t3=pop()
0fc68                 | ' t2=pop()
0fc68                 | ' t1=pop()
0fc68                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0fc68     FF 1A 02 F6 | 	mov	arg05, result3
0fc6c     08 4E 85 F1 | 	sub	fp, #8
0fc70     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0fc74     08 4E 05 51 |  if_ne	add	fp, #8
0fc78     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0fc7c     08 4E 85 51 |  if_ne	sub	fp, #8
0fc80     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0fc84     A8 00 90 5D |  if_ne	jmp	#LR__1320
0fc88     14 4E 05 F1 | 	add	fp, #20
0fc8c     A7 1E 02 FB | 	rdlong	local01, fp
0fc90     14 4E 85 F1 | 	sub	fp, #20
0fc94     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fc98     14 4E 05 51 |  if_ne	add	fp, #20
0fc9c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0fca0     14 4E 85 51 |  if_ne	sub	fp, #20
0fca4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0fca8     84 00 90 5D |  if_ne	jmp	#LR__1320
0fcac     20 4E 05 F1 | 	add	fp, #32
0fcb0     A7 1E 02 FB | 	rdlong	local01, fp
0fcb4     20 4E 85 F1 | 	sub	fp, #32
0fcb8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fcbc     20 4E 05 51 |  if_ne	add	fp, #32
0fcc0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0fcc4     20 4E 85 51 |  if_ne	sub	fp, #32
0fcc8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0fccc     60 00 90 5D |  if_ne	jmp	#LR__1320
0fcd0     2C 4E 05 F1 | 	add	fp, #44
0fcd4     A7 1E 02 FB | 	rdlong	local01, fp
0fcd8     2C 4E 85 F1 | 	sub	fp, #44
0fcdc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fce0     2C 4E 05 51 |  if_ne	add	fp, #44
0fce4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0fce8     2C 4E 85 51 |  if_ne	sub	fp, #44
0fcec     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0fcf0     3C 00 90 5D |  if_ne	jmp	#LR__1320
0fcf4     A7 12 02 FB | 	rdlong	arg01, fp
0fcf8     0C 4E 05 F1 | 	add	fp, #12
0fcfc     A7 14 02 FB | 	rdlong	arg02, fp
0fd00     0C 4E 05 F1 | 	add	fp, #12
0fd04     A7 16 02 FB | 	rdlong	arg03, fp
0fd08     0C 4E 05 F1 | 	add	fp, #12
0fd0c     A7 18 02 FB | 	rdlong	arg04, fp
0fd10     24 4E 85 F1 | 	sub	fp, #36
0fd14     2D 00 00 FF 
0fd18     EC E5 05 F1 | 	add	objptr, ##23532
0fd1c     F2 1A 02 FB | 	rdlong	arg05, objptr
0fd20     2D 00 00 FF 
0fd24     EC E5 85 F1 | 	sub	objptr, ##23532
0fd28     D4 44 B0 FD | 	call	#_hg010b_spin2_frame
0fd2c                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0fd2c     6C 00 90 FD | 	jmp	#LR__1321
0fd30                 | LR__1320
0fd30     A7 12 02 F6 | 	mov	arg01, fp
0fd34     CC E4 BF FD | 	call	#_converttoint
0fd38     FD 20 02 F6 | 	mov	local02, result1
0fd3c     0C 4E 05 F1 | 	add	fp, #12
0fd40     A7 12 02 F6 | 	mov	arg01, fp
0fd44     0C 4E 85 F1 | 	sub	fp, #12
0fd48     B8 E4 BF FD | 	call	#_converttoint
0fd4c     FD 22 02 F6 | 	mov	local03, result1
0fd50     18 4E 05 F1 | 	add	fp, #24
0fd54     A7 12 02 F6 | 	mov	arg01, fp
0fd58     18 4E 85 F1 | 	sub	fp, #24
0fd5c     A4 E4 BF FD | 	call	#_converttoint
0fd60     FD 1E 02 F6 | 	mov	local01, result1
0fd64     24 4E 05 F1 | 	add	fp, #36
0fd68     A7 12 02 F6 | 	mov	arg01, fp
0fd6c     24 4E 85 F1 | 	sub	fp, #36
0fd70     90 E4 BF FD | 	call	#_converttoint
0fd74     FD 18 02 F6 | 	mov	arg04, result1
0fd78     2D 00 00 FF 
0fd7c     EC E5 05 F1 | 	add	objptr, ##23532
0fd80     F2 1A 02 FB | 	rdlong	arg05, objptr
0fd84     2D 00 00 FF 
0fd88     EC E5 85 F1 | 	sub	objptr, ##23532
0fd8c     10 13 02 F6 | 	mov	arg01, local02
0fd90     11 15 02 F6 | 	mov	arg02, local03
0fd94     0F 17 02 F6 | 	mov	arg03, local01
0fd98     64 44 B0 FD | 	call	#_hg010b_spin2_frame
0fd9c                 | LR__1321
0fd9c     A7 F0 03 F6 | 	mov	ptra, fp
0fda0     B2 00 A0 FD | 	call	#popregs_
0fda4                 | _do_frame_ret
0fda4     2D 00 64 FD | 	ret
0fda8                 | 
0fda8                 | ' 
0fda8                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
0fda8                 | ' 
0fda8                 | ' ' ------------------------- Print to the screem
0fda8                 | ' 
0fda8                 | ' sub do_print  
0fda8                 | _do_print
0fda8     0A 4A 05 F6 | 	mov	COUNT_, #10
0fdac     A8 00 A0 FD | 	call	#pushregs_
0fdb0     00 24 06 F6 | 	mov	local04, #0
0fdb4     BC 8B BF FD | 	call	#_pop
0fdb8     FD 26 02 F6 | 	mov	local05, result1
0fdbc     FE 28 02 F6 | 	mov	local06, result2
0fdc0     FF 2A 02 F6 | 	mov	local07, result3
0fdc4     13 1F 02 F6 | 	mov	local01, local05
0fdc8     14 21 02 F6 | 	mov	local02, local06
0fdcc     15 23 02 F6 | 	mov	local03, local07
0fdd0                 | '  
0fdd0                 | ' r=0
0fdd0                 | ' t1=pop() 
0fdd0                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
0fdd0     21 22 0E F2 | 	cmp	local03, #33 wz
0fdd4     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
0fdd8     20 00 90 5D |  if_ne	jmp	#LR__1330
0fddc     11 25 02 F6 | 	mov	local04, local03
0fde0     90 8B BF FD | 	call	#_pop
0fde4     FD 26 02 F6 | 	mov	local05, result1
0fde8     FE 28 02 F6 | 	mov	local06, result2
0fdec     FF 2A 02 F6 | 	mov	local07, result3
0fdf0     13 1F 02 F6 | 	mov	local01, local05
0fdf4     14 21 02 F6 | 	mov	local02, local06
0fdf8     15 23 02 F6 | 	mov	local03, local07
0fdfc                 | LR__1330
0fdfc                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
0fdfc     20 22 0E F2 | 	cmp	local03, #32 wz
0fe00     11 25 02 A6 |  if_e	mov	local04, local03
0fe04                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
0fe04     FF 22 0E F2 | 	cmp	local03, #255 wz
0fe08     0C 00 90 5D |  if_ne	jmp	#LR__1331
0fe0c     0F 13 02 F6 | 	mov	arg01, local01
0fe10     B0 24 B0 FD | 	call	#_printerror
0fe14     30 04 90 FD | 	jmp	#LR__1348
0fe18                 | LR__1331
0fe18                 | ' 
0fe18                 | ' if r=print_mod_comma  then
0fe18     21 24 0E F2 | 	cmp	local04, #33 wz
0fe1c     AC 01 90 5D |  if_ne	jmp	#LR__1336
0fe20                 | '   if t1.result_type=result_int then print t1.result.iresult,
0fe20     1C 22 0E F2 | 	cmp	local03, #28 wz
0fe24     64 00 90 5D |  if_ne	jmp	#LR__1332
0fe28     00 12 06 F6 | 	mov	arg01, #0
0fe2c     40 AF B0 FD | 	call	#__system___getiolock_0369
0fe30     FD 12 02 F6 | 	mov	arg01, result1
0fe34     88 59 B0 FD | 	call	#__system___lockmem
0fe38     00 28 06 F6 | 	mov	local06, #0
0fe3c     00 12 06 F6 | 	mov	arg01, #0
0fe40     0F 15 02 F6 | 	mov	arg02, local01
0fe44     00 16 06 F6 | 	mov	arg03, #0
0fe48     0A 18 06 F6 | 	mov	arg04, #10
0fe4c     A8 66 B0 FD | 	call	#__system___basic_print_integer
0fe50     FD 2A 02 F6 | 	mov	local07, result1
0fe54     14 27 02 F6 | 	mov	local05, local06
0fe58     15 27 02 F1 | 	add	local05, local07
0fe5c     00 2C 06 F6 | 	mov	local08, #0
0fe60     00 12 06 F6 | 	mov	arg01, #0
0fe64     09 14 06 F6 | 	mov	arg02, #9
0fe68     00 16 06 F6 | 	mov	arg03, #0
0fe6c     EC 65 B0 FD | 	call	#__system___basic_print_char
0fe70     FD 2E 02 F6 | 	mov	local09, result1
0fe74     FD 26 02 F1 | 	add	local05, result1
0fe78     00 12 06 F6 | 	mov	arg01, #0
0fe7c     F0 AE B0 FD | 	call	#__system___getiolock_0369
0fe80     FD 00 68 FC | 	wrlong	#0, result1
0fe84     00 FA 05 F6 | 	mov	result1, #0
0fe88     00 30 06 F6 | 	mov	local10, #0
0fe8c                 | LR__1332
0fe8c                 | '   if t1.result_type=result_uint then print t1.result.uresult,
0fe8c     1D 22 0E F2 | 	cmp	local03, #29 wz
0fe90     64 00 90 5D |  if_ne	jmp	#LR__1333
0fe94     00 12 06 F6 | 	mov	arg01, #0
0fe98     D4 AE B0 FD | 	call	#__system___getiolock_0369
0fe9c     FD 12 02 F6 | 	mov	arg01, result1
0fea0     1C 59 B0 FD | 	call	#__system___lockmem
0fea4     00 28 06 F6 | 	mov	local06, #0
0fea8     00 12 06 F6 | 	mov	arg01, #0
0feac     0F 15 02 F6 | 	mov	arg02, local01
0feb0     00 16 06 F6 | 	mov	arg03, #0
0feb4     0A 18 06 F6 | 	mov	arg04, #10
0feb8     7C 66 B0 FD | 	call	#__system___basic_print_unsigned
0febc     FD 2A 02 F6 | 	mov	local07, result1
0fec0     14 27 02 F6 | 	mov	local05, local06
0fec4     15 27 02 F1 | 	add	local05, local07
0fec8     00 2C 06 F6 | 	mov	local08, #0
0fecc     00 12 06 F6 | 	mov	arg01, #0
0fed0     09 14 06 F6 | 	mov	arg02, #9
0fed4     00 16 06 F6 | 	mov	arg03, #0
0fed8     80 65 B0 FD | 	call	#__system___basic_print_char
0fedc     FD 2E 02 F6 | 	mov	local09, result1
0fee0     FD 26 02 F1 | 	add	local05, result1
0fee4     00 12 06 F6 | 	mov	arg01, #0
0fee8     84 AE B0 FD | 	call	#__system___getiolock_0369
0feec     FD 00 68 FC | 	wrlong	#0, result1
0fef0     00 FA 05 F6 | 	mov	result1, #0
0fef4     00 30 06 F6 | 	mov	local10, #0
0fef8                 | LR__1333
0fef8                 | '   if t1.result_type=result_float then print t1.result.fresult,
0fef8     1E 22 0E F2 | 	cmp	local03, #30 wz
0fefc     64 00 90 5D |  if_ne	jmp	#LR__1334
0ff00     00 12 06 F6 | 	mov	arg01, #0
0ff04     68 AE B0 FD | 	call	#__system___getiolock_0369
0ff08     FD 12 02 F6 | 	mov	arg01, result1
0ff0c     B0 58 B0 FD | 	call	#__system___lockmem
0ff10     00 28 06 F6 | 	mov	local06, #0
0ff14     00 12 06 F6 | 	mov	arg01, #0
0ff18     0F 15 02 F6 | 	mov	arg02, local01
0ff1c     00 16 06 F6 | 	mov	arg03, #0
0ff20     23 18 06 F6 | 	mov	arg04, #35
0ff24     C4 88 B0 FD | 	call	#__system___basic_print_float
0ff28     FD 2A 02 F6 | 	mov	local07, result1
0ff2c     14 27 02 F6 | 	mov	local05, local06
0ff30     15 27 02 F1 | 	add	local05, local07
0ff34     00 2C 06 F6 | 	mov	local08, #0
0ff38     00 12 06 F6 | 	mov	arg01, #0
0ff3c     09 14 06 F6 | 	mov	arg02, #9
0ff40     00 16 06 F6 | 	mov	arg03, #0
0ff44     14 65 B0 FD | 	call	#__system___basic_print_char
0ff48     FD 2E 02 F6 | 	mov	local09, result1
0ff4c     FD 26 02 F1 | 	add	local05, result1
0ff50     00 12 06 F6 | 	mov	arg01, #0
0ff54     18 AE B0 FD | 	call	#__system___getiolock_0369
0ff58     FD 00 68 FC | 	wrlong	#0, result1
0ff5c     00 FA 05 F6 | 	mov	result1, #0
0ff60     00 30 06 F6 | 	mov	local10, #0
0ff64                 | LR__1334
0ff64                 | '   if t1.result_type=result_string then print t1.result.sresult,
0ff64     1F 22 0E F2 | 	cmp	local03, #31 wz
0ff68     60 00 90 5D |  if_ne	jmp	#LR__1335
0ff6c     00 12 06 F6 | 	mov	arg01, #0
0ff70     FC AD B0 FD | 	call	#__system___getiolock_0369
0ff74     FD 12 02 F6 | 	mov	arg01, result1
0ff78     44 58 B0 FD | 	call	#__system___lockmem
0ff7c     00 28 06 F6 | 	mov	local06, #0
0ff80     00 12 06 F6 | 	mov	arg01, #0
0ff84     0F 15 02 F6 | 	mov	arg02, local01
0ff88     00 16 06 F6 | 	mov	arg03, #0
0ff8c     24 65 B0 FD | 	call	#__system___basic_print_string
0ff90     FD 2A 02 F6 | 	mov	local07, result1
0ff94     14 27 02 F6 | 	mov	local05, local06
0ff98     15 27 02 F1 | 	add	local05, local07
0ff9c     00 2C 06 F6 | 	mov	local08, #0
0ffa0     00 12 06 F6 | 	mov	arg01, #0
0ffa4     09 14 06 F6 | 	mov	arg02, #9
0ffa8     00 16 06 F6 | 	mov	arg03, #0
0ffac     AC 64 B0 FD | 	call	#__system___basic_print_char
0ffb0     FD 2E 02 F6 | 	mov	local09, result1
0ffb4     FD 26 02 F1 | 	add	local05, result1
0ffb8     00 12 06 F6 | 	mov	arg01, #0
0ffbc     B0 AD B0 FD | 	call	#__system___getiolock_0369
0ffc0     FD 00 68 FC | 	wrlong	#0, result1
0ffc4     00 FA 05 F6 | 	mov	result1, #0
0ffc8     00 30 06 F6 | 	mov	local10, #0
0ffcc                 | LR__1335
0ffcc                 | LR__1336
0ffcc                 | ' if r=print_mod_semicolon then 
0ffcc     22 24 0E F2 | 	cmp	local04, #34 wz
0ffd0     1C 01 90 5D |  if_ne	jmp	#LR__1341
0ffd4                 | '   if t1.result_type=result_int then print t1.result.iresult;
0ffd4     1C 22 0E F2 | 	cmp	local03, #28 wz
0ffd8     50 00 90 5D |  if_ne	jmp	#LR__1337
0ffdc     00 12 06 F6 | 	mov	arg01, #0
0ffe0     8C AD B0 FD | 	call	#__system___getiolock_0369
0ffe4     FD 12 02 F6 | 	mov	arg01, result1
0ffe8     D4 57 B0 FD | 	call	#__system___lockmem
0ffec     00 28 06 F6 | 	mov	local06, #0
0fff0     00 30 06 F6 | 	mov	local10, #0
0fff4     0A 2C 06 F6 | 	mov	local08, #10
0fff8     00 12 06 F6 | 	mov	arg01, #0
0fffc     0F 15 02 F6 | 	mov	arg02, local01
10000     00 16 06 F6 | 	mov	arg03, #0
10004     0A 18 06 F6 | 	mov	arg04, #10
10008     EC 64 B0 FD | 	call	#__system___basic_print_integer
1000c     FD 2A 02 F6 | 	mov	local07, result1
10010     14 27 02 F6 | 	mov	local05, local06
10014     15 27 02 F1 | 	add	local05, local07
10018     00 12 06 F6 | 	mov	arg01, #0
1001c     50 AD B0 FD | 	call	#__system___getiolock_0369
10020     FD 00 68 FC | 	wrlong	#0, result1
10024     00 FA 05 F6 | 	mov	result1, #0
10028     00 2E 06 F6 | 	mov	local09, #0
1002c                 | LR__1337
1002c                 | '   if t1.result_type=result_uint then print t1.result.uresult;
1002c     1D 22 0E F2 | 	cmp	local03, #29 wz
10030     50 00 90 5D |  if_ne	jmp	#LR__1338
10034     00 12 06 F6 | 	mov	arg01, #0
10038     34 AD B0 FD | 	call	#__system___getiolock_0369
1003c     FD 12 02 F6 | 	mov	arg01, result1
10040     7C 57 B0 FD | 	call	#__system___lockmem
10044     00 28 06 F6 | 	mov	local06, #0
10048     00 30 06 F6 | 	mov	local10, #0
1004c     0A 2C 06 F6 | 	mov	local08, #10
10050     00 12 06 F6 | 	mov	arg01, #0
10054     0F 15 02 F6 | 	mov	arg02, local01
10058     00 16 06 F6 | 	mov	arg03, #0
1005c     0A 18 06 F6 | 	mov	arg04, #10
10060     D4 64 B0 FD | 	call	#__system___basic_print_unsigned
10064     FD 2A 02 F6 | 	mov	local07, result1
10068     14 27 02 F6 | 	mov	local05, local06
1006c     15 27 02 F1 | 	add	local05, local07
10070     00 12 06 F6 | 	mov	arg01, #0
10074     F8 AC B0 FD | 	call	#__system___getiolock_0369
10078     FD 00 68 FC | 	wrlong	#0, result1
1007c     00 FA 05 F6 | 	mov	result1, #0
10080     00 2E 06 F6 | 	mov	local09, #0
10084                 | LR__1338
10084                 | '   if t1.result_type=result_float then print t1.result.fresult;
10084     1E 22 0E F2 | 	cmp	local03, #30 wz
10088     30 00 90 5D |  if_ne	jmp	#LR__1339
1008c     00 12 06 F6 | 	mov	arg01, #0
10090     DC AC B0 FD | 	call	#__system___getiolock_0369
10094     FD 12 02 F6 | 	mov	arg01, result1
10098     24 57 B0 FD | 	call	#__system___lockmem
1009c     00 12 06 F6 | 	mov	arg01, #0
100a0     0F 15 02 F6 | 	mov	arg02, local01
100a4     00 16 06 F6 | 	mov	arg03, #0
100a8     23 18 06 F6 | 	mov	arg04, #35
100ac     3C 87 B0 FD | 	call	#__system___basic_print_float
100b0     00 12 06 F6 | 	mov	arg01, #0
100b4     B8 AC B0 FD | 	call	#__system___getiolock_0369
100b8     FD 00 68 FC | 	wrlong	#0, result1
100bc                 | LR__1339
100bc                 | '   if t1.result_type=result_string then print t1.result.sresult;
100bc     1F 22 0E F2 | 	cmp	local03, #31 wz
100c0     2C 00 90 5D |  if_ne	jmp	#LR__1340
100c4     00 12 06 F6 | 	mov	arg01, #0
100c8     A4 AC B0 FD | 	call	#__system___getiolock_0369
100cc     FD 12 02 F6 | 	mov	arg01, result1
100d0     EC 56 B0 FD | 	call	#__system___lockmem
100d4     00 12 06 F6 | 	mov	arg01, #0
100d8     0F 15 02 F6 | 	mov	arg02, local01
100dc     00 16 06 F6 | 	mov	arg03, #0
100e0     D0 63 B0 FD | 	call	#__system___basic_print_string
100e4     00 12 06 F6 | 	mov	arg01, #0
100e8     84 AC B0 FD | 	call	#__system___getiolock_0369
100ec     FD 00 68 FC | 	wrlong	#0, result1
100f0                 | LR__1340
100f0                 | LR__1341
100f0                 | ' if r=0 then 
100f0     00 24 0E F2 | 	cmp	local04, #0 wz
100f4     1C 01 90 5D |  if_ne	jmp	#LR__1346
100f8                 | '   if t1.result_type=result_int then print t1.result.iresult
100f8     1C 22 0E F2 | 	cmp	local03, #28 wz
100fc     40 00 90 5D |  if_ne	jmp	#LR__1342
10100     00 12 06 F6 | 	mov	arg01, #0
10104     68 AC B0 FD | 	call	#__system___getiolock_0369
10108     FD 12 02 F6 | 	mov	arg01, result1
1010c     B0 56 B0 FD | 	call	#__system___lockmem
10110     00 12 06 F6 | 	mov	arg01, #0
10114     0F 15 02 F6 | 	mov	arg02, local01
10118     00 16 06 F6 | 	mov	arg03, #0
1011c     0A 18 06 F6 | 	mov	arg04, #10
10120     D4 63 B0 FD | 	call	#__system___basic_print_integer
10124     00 12 06 F6 | 	mov	arg01, #0
10128     0A 14 06 F6 | 	mov	arg02, #10
1012c     00 16 06 F6 | 	mov	arg03, #0
10130     28 63 B0 FD | 	call	#__system___basic_print_char
10134     00 12 06 F6 | 	mov	arg01, #0
10138     34 AC B0 FD | 	call	#__system___getiolock_0369
1013c     FD 00 68 FC | 	wrlong	#0, result1
10140                 | LR__1342
10140                 | '   if t1.result_type=result_uint then print t1.result.uresult
10140     1D 22 0E F2 | 	cmp	local03, #29 wz
10144     40 00 90 5D |  if_ne	jmp	#LR__1343
10148     00 12 06 F6 | 	mov	arg01, #0
1014c     20 AC B0 FD | 	call	#__system___getiolock_0369
10150     FD 12 02 F6 | 	mov	arg01, result1
10154     68 56 B0 FD | 	call	#__system___lockmem
10158     00 12 06 F6 | 	mov	arg01, #0
1015c     0F 15 02 F6 | 	mov	arg02, local01
10160     00 16 06 F6 | 	mov	arg03, #0
10164     0A 18 06 F6 | 	mov	arg04, #10
10168     CC 63 B0 FD | 	call	#__system___basic_print_unsigned
1016c     00 12 06 F6 | 	mov	arg01, #0
10170     0A 14 06 F6 | 	mov	arg02, #10
10174     00 16 06 F6 | 	mov	arg03, #0
10178     E0 62 B0 FD | 	call	#__system___basic_print_char
1017c     00 12 06 F6 | 	mov	arg01, #0
10180     EC AB B0 FD | 	call	#__system___getiolock_0369
10184     FD 00 68 FC | 	wrlong	#0, result1
10188                 | LR__1343
10188                 | '   if t1.result_type=result_float then print t1.result.fresult
10188     1E 22 0E F2 | 	cmp	local03, #30 wz
1018c     40 00 90 5D |  if_ne	jmp	#LR__1344
10190     00 12 06 F6 | 	mov	arg01, #0
10194     D8 AB B0 FD | 	call	#__system___getiolock_0369
10198     FD 12 02 F6 | 	mov	arg01, result1
1019c     20 56 B0 FD | 	call	#__system___lockmem
101a0     00 12 06 F6 | 	mov	arg01, #0
101a4     0F 15 02 F6 | 	mov	arg02, local01
101a8     00 16 06 F6 | 	mov	arg03, #0
101ac     23 18 06 F6 | 	mov	arg04, #35
101b0     38 86 B0 FD | 	call	#__system___basic_print_float
101b4     00 12 06 F6 | 	mov	arg01, #0
101b8     0A 14 06 F6 | 	mov	arg02, #10
101bc     00 16 06 F6 | 	mov	arg03, #0
101c0     98 62 B0 FD | 	call	#__system___basic_print_char
101c4     00 12 06 F6 | 	mov	arg01, #0
101c8     A4 AB B0 FD | 	call	#__system___getiolock_0369
101cc     FD 00 68 FC | 	wrlong	#0, result1
101d0                 | LR__1344
101d0                 | '   if t1.result_type=result_string then print t1.result.sresult
101d0     1F 22 0E F2 | 	cmp	local03, #31 wz
101d4     3C 00 90 5D |  if_ne	jmp	#LR__1345
101d8     00 12 06 F6 | 	mov	arg01, #0
101dc     90 AB B0 FD | 	call	#__system___getiolock_0369
101e0     FD 12 02 F6 | 	mov	arg01, result1
101e4     D8 55 B0 FD | 	call	#__system___lockmem
101e8     00 12 06 F6 | 	mov	arg01, #0
101ec     0F 15 02 F6 | 	mov	arg02, local01
101f0     00 16 06 F6 | 	mov	arg03, #0
101f4     BC 62 B0 FD | 	call	#__system___basic_print_string
101f8     00 12 06 F6 | 	mov	arg01, #0
101fc     0A 14 06 F6 | 	mov	arg02, #10
10200     00 16 06 F6 | 	mov	arg03, #0
10204     54 62 B0 FD | 	call	#__system___basic_print_char
10208     00 12 06 F6 | 	mov	arg01, #0
1020c     60 AB B0 FD | 	call	#__system___getiolock_0369
10210     FD 00 68 FC | 	wrlong	#0, result1
10214                 | LR__1345
10214                 | LR__1346
10214                 | ' if r=print_mod_empty then print
10214     20 24 0E F2 | 	cmp	local04, #32 wz
10218     2C 00 90 5D |  if_ne	jmp	#LR__1347
1021c     00 12 06 F6 | 	mov	arg01, #0
10220     4C AB B0 FD | 	call	#__system___getiolock_0369
10224     FD 12 02 F6 | 	mov	arg01, result1
10228     94 55 B0 FD | 	call	#__system___lockmem
1022c     00 12 06 F6 | 	mov	arg01, #0
10230     0A 14 06 F6 | 	mov	arg02, #10
10234     00 16 06 F6 | 	mov	arg03, #0
10238     20 62 B0 FD | 	call	#__system___basic_print_char
1023c     00 12 06 F6 | 	mov	arg01, #0
10240     2C AB B0 FD | 	call	#__system___getiolock_0369
10244     FD 00 68 FC | 	wrlong	#0, result1
10248                 | LR__1347
10248                 | LR__1348
10248     A7 F0 03 F6 | 	mov	ptra, fp
1024c     B2 00 A0 FD | 	call	#popregs_
10250                 | _do_print_ret
10250     2D 00 64 FD | 	ret
10254                 | 
10254                 | ' 
10254                 | ' 
10254                 | ' sub do_paper
10254                 | _do_paper
10254     03 4A 05 F6 | 	mov	COUNT_, #3
10258     A8 00 A0 FD | 	call	#pushregs_
1025c     14 87 BF FD | 	call	#_pop
10260     FD 1E 02 F6 | 	mov	local01, result1
10264     FE 20 02 F6 | 	mov	local02, result2
10268     FF 22 02 F6 | 	mov	local03, result3
1026c                 | ' t1=pop() 
1026c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1026c     1E 22 0E F2 | 	cmp	local03, #30 wz
10270     10 00 90 5D |  if_ne	jmp	#LR__1350
10274     0F 13 02 F6 | 	mov	arg01, local01
10278     00 14 06 F6 | 	mov	arg02, #0
1027c     1C 84 B0 FD | 	call	#__system___float_tointeger
10280     FD 1E 02 F6 | 	mov	local01, result1
10284                 | LR__1350
10284                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
10284     1F 22 0E F2 | 	cmp	local03, #31 wz
10288     18 00 90 5D |  if_ne	jmp	#LR__1351
1028c     0F 13 02 F6 | 	mov	arg01, local01
10290     28 87 B0 FD | 	call	#__system____builtin_atof
10294     FD 12 02 F6 | 	mov	arg01, result1
10298     00 14 06 F6 | 	mov	arg02, #0
1029c     FC 83 B0 FD | 	call	#__system___float_tointeger
102a0     FD 1E 02 F6 | 	mov	local01, result1
102a4                 | LR__1351
102a4     2D 00 00 FF 
102a8     FC E5 05 F1 | 	add	objptr, ##23548
102ac     F2 1E 62 FC | 	wrlong	local01, objptr
102b0     04 E4 05 F1 | 	add	objptr, #4
102b4     F2 12 02 FB | 	rdlong	arg01, objptr
102b8                 | ' 
102b8                 | ' write_color:=ff
102b8     2D 00 00 FF 
102bc     C3 E5 85 F1 | 	sub	objptr, ##23491
102c0     F2 12 62 FC | 	wrlong	arg01, objptr
102c4                 | ' write_background:=bb
102c4     04 E4 05 F1 | 	add	objptr, #4
102c8     F2 1E 62 FC | 	wrlong	local01, objptr
102cc     41 E4 85 F1 | 	sub	objptr, #65
102d0     A7 F0 03 F6 | 	mov	ptra, fp
102d4     B2 00 A0 FD | 	call	#popregs_
102d8                 | _do_paper_ret
102d8     2D 00 64 FD | 	ret
102dc                 | 
102dc                 | ' 
102dc                 | ' sub do_ink
102dc                 | _do_ink
102dc     03 4A 05 F6 | 	mov	COUNT_, #3
102e0     A8 00 A0 FD | 	call	#pushregs_
102e4     8C 86 BF FD | 	call	#_pop
102e8     FD 1E 02 F6 | 	mov	local01, result1
102ec     FE 20 02 F6 | 	mov	local02, result2
102f0     FF 22 02 F6 | 	mov	local03, result3
102f4                 | ' t1=pop() 
102f4                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
102f4     1E 22 0E F2 | 	cmp	local03, #30 wz
102f8     10 00 90 5D |  if_ne	jmp	#LR__1360
102fc     0F 13 02 F6 | 	mov	arg01, local01
10300     00 14 06 F6 | 	mov	arg02, #0
10304     94 83 B0 FD | 	call	#__system___float_tointeger
10308     FD 1E 02 F6 | 	mov	local01, result1
1030c                 | LR__1360
1030c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
1030c     1F 22 0E F2 | 	cmp	local03, #31 wz
10310     18 00 90 5D |  if_ne	jmp	#LR__1361
10314     0F 13 02 F6 | 	mov	arg01, local01
10318     A0 86 B0 FD | 	call	#__system____builtin_atof
1031c     FD 12 02 F6 | 	mov	arg01, result1
10320     00 14 06 F6 | 	mov	arg02, #0
10324     74 83 B0 FD | 	call	#__system___float_tointeger
10328     FD 1E 02 F6 | 	mov	local01, result1
1032c                 | LR__1361
1032c     2E 00 00 FF 
10330     00 E4 05 F1 | 	add	objptr, ##23552
10334     F2 1E 62 FC | 	wrlong	local01, objptr
10338     04 E4 85 F1 | 	sub	objptr, #4
1033c     F2 14 02 FB | 	rdlong	arg02, objptr
10340                 | ' 
10340                 | ' write_color:=ff
10340     2D 00 00 FF 
10344     BF E5 85 F1 | 	sub	objptr, ##23487
10348     F2 1E 62 FC | 	wrlong	local01, objptr
1034c                 | ' write_background:=bb
1034c     04 E4 05 F1 | 	add	objptr, #4
10350     F2 14 62 FC | 	wrlong	arg02, objptr
10354     2D 00 00 FF 
10358     BF E5 05 F1 | 	add	objptr, ##23487
1035c     F2 12 02 FB | 	rdlong	arg01, objptr
10360     2E 00 00 FF 
10364     00 E4 85 F1 | 	sub	objptr, ##23552
10368     2C 31 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
1036c     A7 F0 03 F6 | 	mov	ptra, fp
10370     B2 00 A0 FD | 	call	#popregs_
10374                 | _do_ink_ret
10374     2D 00 64 FD | 	ret
10378                 | 
10378                 | ' 
10378                 | ' 
10378                 | ' sub do_font
10378                 | _do_font
10378     03 4A 05 F6 | 	mov	COUNT_, #3
1037c     A8 00 A0 FD | 	call	#pushregs_
10380     F0 85 BF FD | 	call	#_pop
10384     FD 1E 02 F6 | 	mov	local01, result1
10388     FE 20 02 F6 | 	mov	local02, result2
1038c     FF 22 02 F6 | 	mov	local03, result3
10390                 | ' t1=pop() 
10390                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
10390     1E 22 0E F2 | 	cmp	local03, #30 wz
10394     10 00 90 5D |  if_ne	jmp	#LR__1370
10398     0F 13 02 F6 | 	mov	arg01, local01
1039c     00 14 06 F6 | 	mov	arg02, #0
103a0     F8 82 B0 FD | 	call	#__system___float_tointeger
103a4     FD 1E 02 F6 | 	mov	local01, result1
103a8                 | LR__1370
103a8                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
103a8     1F 22 0E F2 | 	cmp	local03, #31 wz
103ac     18 00 90 5D |  if_ne	jmp	#LR__1371
103b0     0F 13 02 F6 | 	mov	arg01, local01
103b4     04 86 B0 FD | 	call	#__system____builtin_atof
103b8     FD 12 02 F6 | 	mov	arg01, result1
103bc     00 14 06 F6 | 	mov	arg02, #0
103c0     D8 82 B0 FD | 	call	#__system___float_tointeger
103c4     FD 1E 02 F6 | 	mov	local01, result1
103c8                 | LR__1371
103c8     2E 00 00 FF 
103cc     04 E4 05 F1 | 	add	objptr, ##23556
103d0     F2 1E 62 FC | 	wrlong	local01, objptr
103d4     2E 00 00 FF 
103d8     04 E4 85 F1 | 	sub	objptr, ##23556
103dc     02 1E 66 F0 | 	shl	local01, #2
103e0     0F 13 02 F6 | 	mov	arg01, local01
103e4     10 40 B0 FD | 	call	#_hg010b_spin2_setfontfamily
103e8     A7 F0 03 F6 | 	mov	ptra, fp
103ec     B2 00 A0 FD | 	call	#popregs_
103f0                 | _do_font_ret
103f0     2D 00 64 FD | 	ret
103f4                 | 
103f4                 | ' 
103f4                 | ' sub do_mode
103f4                 | _do_mode
103f4     04 4A 05 F6 | 	mov	COUNT_, #4
103f8     A8 00 A0 FD | 	call	#pushregs_
103fc     74 85 BF FD | 	call	#_pop
10400     FD 1E 02 F6 | 	mov	local01, result1
10404     FE 20 02 F6 | 	mov	local02, result2
10408     FF 22 02 F6 | 	mov	local03, result3
1040c                 | ' t1=pop() 
1040c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1040c     1E 22 0E F2 | 	cmp	local03, #30 wz
10410     10 00 90 5D |  if_ne	jmp	#LR__1380
10414     0F 13 02 F6 | 	mov	arg01, local01
10418     00 14 06 F6 | 	mov	arg02, #0
1041c     7C 82 B0 FD | 	call	#__system___float_tointeger
10420     FD 1E 02 F6 | 	mov	local01, result1
10424                 | LR__1380
10424                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
10424     1F 22 0E F2 | 	cmp	local03, #31 wz
10428     18 00 90 5D |  if_ne	jmp	#LR__1381
1042c     0F 13 02 F6 | 	mov	arg01, local01
10430     88 85 B0 FD | 	call	#__system____builtin_atof
10434     FD 12 02 F6 | 	mov	arg01, result1
10438     00 14 06 F6 | 	mov	arg02, #0
1043c     5C 82 B0 FD | 	call	#__system___float_tointeger
10440     FD 1E 02 F6 | 	mov	local01, result1
10444                 | LR__1381
10444                 | ' select case t1.result.iresult
10444     0F 25 02 F6 | 	mov	local04, local01
10448     04 24 26 F3 | 	fle	local04, #4
1044c     30 24 62 FD | 	jmprel	local04
10450                 | LR__1382
10450     10 00 90 FD | 	jmp	#LR__1383
10454     68 00 90 FD | 	jmp	#LR__1384
10458     C0 00 90 FD | 	jmp	#LR__1385
1045c     18 01 90 FD | 	jmp	#LR__1386
10460     6C 01 90 FD | 	jmp	#LR__1387
10464                 | LR__1383
10464     2E 00 00 FF 
10468     04 E4 05 F1 | 	add	objptr, ##23556
1046c     F2 02 68 FC | 	wrlong	#1, objptr
10470     04 E4 85 F1 | 	sub	objptr, #4
10474     F2 34 69 FC | 	wrlong	#154, objptr
10478     04 E4 85 F1 | 	sub	objptr, #4
1047c     F2 26 69 FC | 	wrlong	#147, objptr
10480     2D 00 00 FF 
10484     FC E5 85 F1 | 	sub	objptr, ##23548
10488     04 12 06 F6 | 	mov	arg01, #4
1048c     68 3F B0 FD | 	call	#_hg010b_spin2_setfontfamily
10490     2E 00 00 FF 
10494     00 E4 05 F1 | 	add	objptr, ##23552
10498     F2 12 02 FB | 	rdlong	arg01, objptr
1049c     04 E4 85 F1 | 	sub	objptr, #4
104a0     F2 14 02 FB | 	rdlong	arg02, objptr
104a4                 | ' 
104a4                 | ' write_color:=ff
104a4     2D 00 00 FF 
104a8     BF E5 85 F1 | 	sub	objptr, ##23487
104ac     F2 12 62 FC | 	wrlong	arg01, objptr
104b0                 | ' write_background:=bb
104b0     04 E4 05 F1 | 	add	objptr, #4
104b4     F2 14 62 FC | 	wrlong	arg02, objptr
104b8     41 E4 85 F1 | 	sub	objptr, #65
104bc     10 01 90 FD | 	jmp	#LR__1387
104c0                 | LR__1384
104c0     2E 00 00 FF 
104c4     04 E4 05 F1 | 	add	objptr, ##23556
104c8     F2 00 68 FC | 	wrlong	#0, objptr
104cc     04 E4 85 F1 | 	sub	objptr, #4
104d0     F2 2E 68 FC | 	wrlong	#23, objptr
104d4     00 12 06 F6 | 	mov	arg01, #0
104d8     04 E4 85 F1 | 	sub	objptr, #4
104dc     F2 00 68 FC | 	wrlong	#0, objptr
104e0     2D 00 00 FF 
104e4     FC E5 85 F1 | 	sub	objptr, ##23548
104e8     0C 3F B0 FD | 	call	#_hg010b_spin2_setfontfamily
104ec     2E 00 00 FF 
104f0     00 E4 05 F1 | 	add	objptr, ##23552
104f4     F2 12 02 FB | 	rdlong	arg01, objptr
104f8     04 E4 85 F1 | 	sub	objptr, #4
104fc     F2 14 02 FB | 	rdlong	arg02, objptr
10500                 | ' 
10500                 | ' write_color:=ff
10500     2D 00 00 FF 
10504     BF E5 85 F1 | 	sub	objptr, ##23487
10508     F2 12 62 FC | 	wrlong	arg01, objptr
1050c                 | ' write_background:=bb
1050c     04 E4 05 F1 | 	add	objptr, #4
10510     F2 14 62 FC | 	wrlong	arg02, objptr
10514     41 E4 85 F1 | 	sub	objptr, #65
10518     B4 00 90 FD | 	jmp	#LR__1387
1051c                 | LR__1385
1051c     2E 00 00 FF 
10520     04 E4 05 F1 | 	add	objptr, ##23556
10524     F2 00 68 FC | 	wrlong	#0, objptr
10528     04 E4 85 F1 | 	sub	objptr, #4
1052c     F2 6A 69 FC | 	wrlong	#181, objptr
10530     00 12 06 F6 | 	mov	arg01, #0
10534     04 E4 85 F1 | 	sub	objptr, #4
10538     F2 00 68 FC | 	wrlong	#0, objptr
1053c     2D 00 00 FF 
10540     FC E5 85 F1 | 	sub	objptr, ##23548
10544     B0 3E B0 FD | 	call	#_hg010b_spin2_setfontfamily
10548     2E 00 00 FF 
1054c     00 E4 05 F1 | 	add	objptr, ##23552
10550     F2 12 02 FB | 	rdlong	arg01, objptr
10554     04 E4 85 F1 | 	sub	objptr, #4
10558     F2 14 02 FB | 	rdlong	arg02, objptr
1055c                 | ' 
1055c                 | ' write_color:=ff
1055c     2D 00 00 FF 
10560     BF E5 85 F1 | 	sub	objptr, ##23487
10564     F2 12 62 FC | 	wrlong	arg01, objptr
10568                 | ' write_background:=bb
10568     04 E4 05 F1 | 	add	objptr, #4
1056c     F2 14 62 FC | 	wrlong	arg02, objptr
10570     41 E4 85 F1 | 	sub	objptr, #65
10574     58 00 90 FD | 	jmp	#LR__1387
10578                 | LR__1386
10578     2E 00 00 FF 
1057c     04 E4 05 F1 | 	add	objptr, ##23556
10580     F2 00 68 FC | 	wrlong	#0, objptr
10584     04 E4 85 F1 | 	sub	objptr, #4
10588     F2 1E 68 FC | 	wrlong	#15, objptr
1058c     00 12 06 F6 | 	mov	arg01, #0
10590     04 E4 85 F1 | 	sub	objptr, #4
10594     F2 00 68 FC | 	wrlong	#0, objptr
10598     2D 00 00 FF 
1059c     FC E5 85 F1 | 	sub	objptr, ##23548
105a0     54 3E B0 FD | 	call	#_hg010b_spin2_setfontfamily
105a4     2E 00 00 FF 
105a8     00 E4 05 F1 | 	add	objptr, ##23552
105ac     F2 12 02 FB | 	rdlong	arg01, objptr
105b0     04 E4 85 F1 | 	sub	objptr, #4
105b4     F2 14 02 FB | 	rdlong	arg02, objptr
105b8                 | ' 
105b8                 | ' write_color:=ff
105b8     2D 00 00 FF 
105bc     BF E5 85 F1 | 	sub	objptr, ##23487
105c0     F2 12 62 FC | 	wrlong	arg01, objptr
105c4                 | ' write_background:=bb
105c4     04 E4 05 F1 | 	add	objptr, #4
105c8     F2 14 62 FC | 	wrlong	arg02, objptr
105cc     41 E4 85 F1 | 	sub	objptr, #65
105d0                 | LR__1387
105d0     2E 00 00 FF 
105d4     00 E4 05 F1 | 	add	objptr, ##23552
105d8     F2 12 02 FB | 	rdlong	arg01, objptr
105dc     04 E4 85 F1 | 	sub	objptr, #4
105e0     F2 14 02 FB | 	rdlong	arg02, objptr
105e4     2D 00 00 FF 
105e8     FC E5 85 F1 | 	sub	objptr, ##23548
105ec     F0 3E B0 FD | 	call	#_hg010b_spin2_cls
105f0     26 01 00 FF 
105f4     FC 13 06 F6 | 	mov	arg01, ##@LR__4342
105f8                 | ' 
105f8                 | ' write(text)
105f8     A0 41 B0 FD | 	call	#_hg010b_spin2_write
105fc                 | ' crlf
105fc     FC 42 B0 FD | 	call	#_hg010b_spin2_crlf
10600     09 00 00 FF 
10604     E8 EB 05 F1 | 	add	ptr__dat__, ##5096
10608     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
1060c     09 00 00 FF 
10610     E8 EB 85 F1 | 	sub	ptr__dat__, ##5096
10614                 | ' 
10614                 | ' write(text)
10614     84 41 B0 FD | 	call	#_hg010b_spin2_write
10618                 | ' crlf
10618     E0 42 B0 FD | 	call	#_hg010b_spin2_crlf
1061c     50 00 00 FF 
10620     A0 E5 05 F1 | 	add	objptr, ##41376
10624     F2 12 02 FB | 	rdlong	arg01, objptr
10628     50 00 00 FF 
1062c     A0 E5 85 F1 | 	sub	objptr, ##41376
10630                 | ' 
10630                 | ' write(text)
10630     68 41 B0 FD | 	call	#_hg010b_spin2_write
10634                 | ' crlf
10634     C4 42 B0 FD | 	call	#_hg010b_spin2_crlf
10638     A7 F0 03 F6 | 	mov	ptra, fp
1063c     B2 00 A0 FD | 	call	#popregs_
10640                 | _do_mode_ret
10640     2D 00 64 FD | 	ret
10644                 | 
10644                 | ' 
10644                 | ' 
10644                 | ' 
10644                 | ' sub do_pinwrite
10644                 | _do_pinwrite
10644     01 4A 05 F6 | 	mov	COUNT_, #1
10648     A8 00 A0 FD | 	call	#pushregs_
1064c     18 F0 07 F1 | 	add	ptra, #24
10650     20 83 BF FD | 	call	#_pop
10654     FD 14 02 F6 | 	mov	arg02, result1
10658     FE 12 02 F6 | 	mov	arg01, result2
1065c     FF 1E 02 F6 | 	mov	local01, result3
10660     A7 14 62 FC | 	wrlong	arg02, fp
10664     04 4E 05 F1 | 	add	fp, #4
10668     A7 12 62 FC | 	wrlong	arg01, fp
1066c     04 4E 05 F1 | 	add	fp, #4
10670     A7 1E 62 FC | 	wrlong	local01, fp
10674     08 4E 85 F1 | 	sub	fp, #8
10678     F8 82 BF FD | 	call	#_pop
1067c     FF 1E 02 F6 | 	mov	local01, result3
10680     0C 4E 05 F1 | 	add	fp, #12
10684     A7 FA 61 FC | 	wrlong	result1, fp
10688     04 4E 05 F1 | 	add	fp, #4
1068c     A7 FC 61 FC | 	wrlong	result2, fp
10690     04 4E 05 F1 | 	add	fp, #4
10694     A7 1E 62 FC | 	wrlong	local01, fp
10698     08 4E 85 F1 | 	sub	fp, #8
1069c     A7 12 02 F6 | 	mov	arg01, fp
106a0     0C 4E 85 F1 | 	sub	fp, #12
106a4     5C DB BF FD | 	call	#_converttoint
106a8     FD 1E 02 F6 | 	mov	local01, result1
106ac     A7 12 02 F6 | 	mov	arg01, fp
106b0     50 DB BF FD | 	call	#_converttoint
106b4     FD 14 02 F6 | 	mov	arg02, result1
106b8     0F 13 02 F6 | 	mov	arg01, local01
106bc     B4 52 B0 FD | 	call	#__system___pinwrite
106c0     A7 F0 03 F6 | 	mov	ptra, fp
106c4     B2 00 A0 FD | 	call	#popregs_
106c8                 | _do_pinwrite_ret
106c8     2D 00 64 FD | 	ret
106cc                 | 
106cc                 | ' 
106cc                 | ' sub do_pinfloat
106cc                 | _do_pinfloat
106cc     00 4A 05 F6 | 	mov	COUNT_, #0
106d0     A8 00 A0 FD | 	call	#pushregs_
106d4     0C F0 07 F1 | 	add	ptra, #12
106d8     98 82 BF FD | 	call	#_pop
106dc     A7 FA 61 FC | 	wrlong	result1, fp
106e0     04 4E 05 F1 | 	add	fp, #4
106e4     A7 FC 61 FC | 	wrlong	result2, fp
106e8     04 4E 05 F1 | 	add	fp, #4
106ec     A7 FE 61 FC | 	wrlong	result3, fp
106f0     08 4E 85 F1 | 	sub	fp, #8
106f4     A7 12 02 F6 | 	mov	arg01, fp
106f8     08 DB BF FD | 	call	#_converttoint
106fc     50 FA 61 FD | 	fltl	result1
10700     A7 F0 03 F6 | 	mov	ptra, fp
10704     B2 00 A0 FD | 	call	#popregs_
10708                 | _do_pinfloat_ret
10708     2D 00 64 FD | 	ret
1070c                 | 
1070c                 | ' 
1070c                 | ' sub do_pinlo
1070c                 | _do_pinlo
1070c     00 4A 05 F6 | 	mov	COUNT_, #0
10710     A8 00 A0 FD | 	call	#pushregs_
10714     0C F0 07 F1 | 	add	ptra, #12
10718     58 82 BF FD | 	call	#_pop
1071c     A7 FA 61 FC | 	wrlong	result1, fp
10720     04 4E 05 F1 | 	add	fp, #4
10724     A7 FC 61 FC | 	wrlong	result2, fp
10728     04 4E 05 F1 | 	add	fp, #4
1072c     A7 FE 61 FC | 	wrlong	result3, fp
10730     08 4E 85 F1 | 	sub	fp, #8
10734     A7 12 02 F6 | 	mov	arg01, fp
10738     C8 DA BF FD | 	call	#_converttoint
1073c     58 FA 61 FD | 	drvl	result1
10740     A7 F0 03 F6 | 	mov	ptra, fp
10744     B2 00 A0 FD | 	call	#popregs_
10748                 | _do_pinlo_ret
10748     2D 00 64 FD | 	ret
1074c                 | 
1074c                 | ' 
1074c                 | ' sub do_pinhi
1074c                 | _do_pinhi
1074c     00 4A 05 F6 | 	mov	COUNT_, #0
10750     A8 00 A0 FD | 	call	#pushregs_
10754     0C F0 07 F1 | 	add	ptra, #12
10758     18 82 BF FD | 	call	#_pop
1075c     A7 FA 61 FC | 	wrlong	result1, fp
10760     04 4E 05 F1 | 	add	fp, #4
10764     A7 FC 61 FC | 	wrlong	result2, fp
10768     04 4E 05 F1 | 	add	fp, #4
1076c     A7 FE 61 FC | 	wrlong	result3, fp
10770     08 4E 85 F1 | 	sub	fp, #8
10774     A7 12 02 F6 | 	mov	arg01, fp
10778     88 DA BF FD | 	call	#_converttoint
1077c     59 FA 61 FD | 	drvh	result1
10780     A7 F0 03 F6 | 	mov	ptra, fp
10784     B2 00 A0 FD | 	call	#popregs_
10788                 | _do_pinhi_ret
10788     2D 00 64 FD | 	ret
1078c                 | 
1078c                 | ' 
1078c                 | ' sub do_pintoggle
1078c                 | _do_pintoggle
1078c     00 4A 05 F6 | 	mov	COUNT_, #0
10790     A8 00 A0 FD | 	call	#pushregs_
10794     0C F0 07 F1 | 	add	ptra, #12
10798     D8 81 BF FD | 	call	#_pop
1079c     A7 FA 61 FC | 	wrlong	result1, fp
107a0     04 4E 05 F1 | 	add	fp, #4
107a4     A7 FC 61 FC | 	wrlong	result2, fp
107a8     04 4E 05 F1 | 	add	fp, #4
107ac     A7 FE 61 FC | 	wrlong	result3, fp
107b0     08 4E 85 F1 | 	sub	fp, #8
107b4     A7 12 02 F6 | 	mov	arg01, fp
107b8     48 DA BF FD | 	call	#_converttoint
107bc     5F FA 61 FD | 	drvnot	result1
107c0     A7 F0 03 F6 | 	mov	ptra, fp
107c4     B2 00 A0 FD | 	call	#popregs_
107c8                 | _do_pintoggle_ret
107c8     2D 00 64 FD | 	ret
107cc                 | 
107cc                 | ' 
107cc                 | ' 
107cc                 | ' sub do_pinstart
107cc                 | _do_pinstart
107cc     03 4A 05 F6 | 	mov	COUNT_, #3
107d0     A8 00 A0 FD | 	call	#pushregs_
107d4     30 F0 07 F1 | 	add	ptra, #48
107d8     98 81 BF FD | 	call	#_pop
107dc     FD 16 02 F6 | 	mov	arg03, result1
107e0     FE 14 02 F6 | 	mov	arg02, result2
107e4     FF 18 02 F6 | 	mov	arg04, result3
107e8     A7 16 62 FC | 	wrlong	arg03, fp
107ec     04 4E 05 F1 | 	add	fp, #4
107f0     A7 14 62 FC | 	wrlong	arg02, fp
107f4     04 4E 05 F1 | 	add	fp, #4
107f8     A7 18 62 FC | 	wrlong	arg04, fp
107fc     08 4E 85 F1 | 	sub	fp, #8
10800     70 81 BF FD | 	call	#_pop
10804     FD 16 02 F6 | 	mov	arg03, result1
10808     FE 14 02 F6 | 	mov	arg02, result2
1080c     FF 18 02 F6 | 	mov	arg04, result3
10810     0C 4E 05 F1 | 	add	fp, #12
10814     A7 16 62 FC | 	wrlong	arg03, fp
10818     04 4E 05 F1 | 	add	fp, #4
1081c     A7 14 62 FC | 	wrlong	arg02, fp
10820     04 4E 05 F1 | 	add	fp, #4
10824     A7 18 62 FC | 	wrlong	arg04, fp
10828     14 4E 85 F1 | 	sub	fp, #20
1082c     44 81 BF FD | 	call	#_pop
10830     FD 16 02 F6 | 	mov	arg03, result1
10834     FE 14 02 F6 | 	mov	arg02, result2
10838     FF 18 02 F6 | 	mov	arg04, result3
1083c     18 4E 05 F1 | 	add	fp, #24
10840     A7 16 62 FC | 	wrlong	arg03, fp
10844     04 4E 05 F1 | 	add	fp, #4
10848     A7 14 62 FC | 	wrlong	arg02, fp
1084c     04 4E 05 F1 | 	add	fp, #4
10850     A7 18 62 FC | 	wrlong	arg04, fp
10854     20 4E 85 F1 | 	sub	fp, #32
10858     18 81 BF FD | 	call	#_pop
1085c     FF 16 02 F6 | 	mov	arg03, result3
10860     24 4E 05 F1 | 	add	fp, #36
10864     A7 FA 61 FC | 	wrlong	result1, fp
10868     04 4E 05 F1 | 	add	fp, #4
1086c     A7 FC 61 FC | 	wrlong	result2, fp
10870     04 4E 05 F1 | 	add	fp, #4
10874     A7 16 62 FC | 	wrlong	arg03, fp
10878     08 4E 85 F1 | 	sub	fp, #8
1087c     A7 12 02 F6 | 	mov	arg01, fp
10880     24 4E 85 F1 | 	sub	fp, #36
10884     7C D9 BF FD | 	call	#_converttoint
10888     FD 1E 02 F6 | 	mov	local01, result1
1088c     18 4E 05 F1 | 	add	fp, #24
10890     A7 12 02 F6 | 	mov	arg01, fp
10894     18 4E 85 F1 | 	sub	fp, #24
10898     68 D9 BF FD | 	call	#_converttoint
1089c     FD 20 02 F6 | 	mov	local02, result1
108a0     0C 4E 05 F1 | 	add	fp, #12
108a4     A7 12 02 F6 | 	mov	arg01, fp
108a8     0C 4E 85 F1 | 	sub	fp, #12
108ac     54 D9 BF FD | 	call	#_converttoint
108b0     FD 22 02 F6 | 	mov	local03, result1
108b4     A7 12 02 F6 | 	mov	arg01, fp
108b8     48 D9 BF FD | 	call	#_converttoint
108bc     40 1E 62 FD | 	dirl	local01
108c0     0F 21 02 FC | 	wrpin	local02, local01
108c4     0F 23 12 FC | 	wxpin	local03, local01
108c8     0F FB 21 FC | 	wypin	result1, local01
108cc     41 1E 62 FD | 	dirh	local01
108d0     A7 F0 03 F6 | 	mov	ptra, fp
108d4     B2 00 A0 FD | 	call	#popregs_
108d8                 | _do_pinstart_ret
108d8     2D 00 64 FD | 	ret
108dc                 | 
108dc                 | ' 
108dc                 | ' 
108dc                 | ' sub do_wrpin
108dc                 | _do_wrpin
108dc     01 4A 05 F6 | 	mov	COUNT_, #1
108e0     A8 00 A0 FD | 	call	#pushregs_
108e4     18 F0 07 F1 | 	add	ptra, #24
108e8     88 80 BF FD | 	call	#_pop
108ec     FD 14 02 F6 | 	mov	arg02, result1
108f0     FE 12 02 F6 | 	mov	arg01, result2
108f4     FF 1E 02 F6 | 	mov	local01, result3
108f8     A7 14 62 FC | 	wrlong	arg02, fp
108fc     04 4E 05 F1 | 	add	fp, #4
10900     A7 12 62 FC | 	wrlong	arg01, fp
10904     04 4E 05 F1 | 	add	fp, #4
10908     A7 1E 62 FC | 	wrlong	local01, fp
1090c     08 4E 85 F1 | 	sub	fp, #8
10910     60 80 BF FD | 	call	#_pop
10914     FF 1E 02 F6 | 	mov	local01, result3
10918     0C 4E 05 F1 | 	add	fp, #12
1091c     A7 FA 61 FC | 	wrlong	result1, fp
10920     04 4E 05 F1 | 	add	fp, #4
10924     A7 FC 61 FC | 	wrlong	result2, fp
10928     04 4E 05 F1 | 	add	fp, #4
1092c     A7 1E 62 FC | 	wrlong	local01, fp
10930     08 4E 85 F1 | 	sub	fp, #8
10934     A7 12 02 F6 | 	mov	arg01, fp
10938     0C 4E 85 F1 | 	sub	fp, #12
1093c     C4 D8 BF FD | 	call	#_converttoint
10940     FD 1E 02 F6 | 	mov	local01, result1
10944     A7 12 02 F6 | 	mov	arg01, fp
10948     B8 D8 BF FD | 	call	#_converttoint
1094c     0F FB 01 FC | 	wrpin	result1, local01
10950     A7 F0 03 F6 | 	mov	ptra, fp
10954     B2 00 A0 FD | 	call	#popregs_
10958                 | _do_wrpin_ret
10958     2D 00 64 FD | 	ret
1095c                 | 
1095c                 | ' 
1095c                 | ' sub do_wxpin
1095c                 | _do_wxpin
1095c     01 4A 05 F6 | 	mov	COUNT_, #1
10960     A8 00 A0 FD | 	call	#pushregs_
10964     18 F0 07 F1 | 	add	ptra, #24
10968     08 80 BF FD | 	call	#_pop
1096c     FD 14 02 F6 | 	mov	arg02, result1
10970     FE 12 02 F6 | 	mov	arg01, result2
10974     FF 1E 02 F6 | 	mov	local01, result3
10978     A7 14 62 FC | 	wrlong	arg02, fp
1097c     04 4E 05 F1 | 	add	fp, #4
10980     A7 12 62 FC | 	wrlong	arg01, fp
10984     04 4E 05 F1 | 	add	fp, #4
10988     A7 1E 62 FC | 	wrlong	local01, fp
1098c     08 4E 85 F1 | 	sub	fp, #8
10990     E0 7F BF FD | 	call	#_pop
10994     FF 1E 02 F6 | 	mov	local01, result3
10998     0C 4E 05 F1 | 	add	fp, #12
1099c     A7 FA 61 FC | 	wrlong	result1, fp
109a0     04 4E 05 F1 | 	add	fp, #4
109a4     A7 FC 61 FC | 	wrlong	result2, fp
109a8     04 4E 05 F1 | 	add	fp, #4
109ac     A7 1E 62 FC | 	wrlong	local01, fp
109b0     08 4E 85 F1 | 	sub	fp, #8
109b4     A7 12 02 F6 | 	mov	arg01, fp
109b8     0C 4E 85 F1 | 	sub	fp, #12
109bc     44 D8 BF FD | 	call	#_converttoint
109c0     FD 1E 02 F6 | 	mov	local01, result1
109c4     A7 12 02 F6 | 	mov	arg01, fp
109c8     38 D8 BF FD | 	call	#_converttoint
109cc     0F FB 11 FC | 	wxpin	result1, local01
109d0     A7 F0 03 F6 | 	mov	ptra, fp
109d4     B2 00 A0 FD | 	call	#popregs_
109d8                 | _do_wxpin_ret
109d8     2D 00 64 FD | 	ret
109dc                 | 
109dc                 | ' 
109dc                 | ' sub do_wypin
109dc                 | _do_wypin
109dc     01 4A 05 F6 | 	mov	COUNT_, #1
109e0     A8 00 A0 FD | 	call	#pushregs_
109e4     18 F0 07 F1 | 	add	ptra, #24
109e8     88 7F BF FD | 	call	#_pop
109ec     FD 14 02 F6 | 	mov	arg02, result1
109f0     FE 12 02 F6 | 	mov	arg01, result2
109f4     FF 1E 02 F6 | 	mov	local01, result3
109f8     A7 14 62 FC | 	wrlong	arg02, fp
109fc     04 4E 05 F1 | 	add	fp, #4
10a00     A7 12 62 FC | 	wrlong	arg01, fp
10a04     04 4E 05 F1 | 	add	fp, #4
10a08     A7 1E 62 FC | 	wrlong	local01, fp
10a0c     08 4E 85 F1 | 	sub	fp, #8
10a10     60 7F BF FD | 	call	#_pop
10a14     FF 1E 02 F6 | 	mov	local01, result3
10a18     0C 4E 05 F1 | 	add	fp, #12
10a1c     A7 FA 61 FC | 	wrlong	result1, fp
10a20     04 4E 05 F1 | 	add	fp, #4
10a24     A7 FC 61 FC | 	wrlong	result2, fp
10a28     04 4E 05 F1 | 	add	fp, #4
10a2c     A7 1E 62 FC | 	wrlong	local01, fp
10a30     08 4E 85 F1 | 	sub	fp, #8
10a34     A7 12 02 F6 | 	mov	arg01, fp
10a38     0C 4E 85 F1 | 	sub	fp, #12
10a3c     C4 D7 BF FD | 	call	#_converttoint
10a40     FD 1E 02 F6 | 	mov	local01, result1
10a44     A7 12 02 F6 | 	mov	arg01, fp
10a48     B8 D7 BF FD | 	call	#_converttoint
10a4c     0F FB 21 FC | 	wypin	result1, local01
10a50     A7 F0 03 F6 | 	mov	ptra, fp
10a54     B2 00 A0 FD | 	call	#popregs_
10a58                 | _do_wypin_ret
10a58     2D 00 64 FD | 	ret
10a5c                 | 
10a5c                 | ' 
10a5c                 | ' sub do_waitms
10a5c                 | _do_waitms
10a5c     01 4A 05 F6 | 	mov	COUNT_, #1
10a60     A8 00 A0 FD | 	call	#pushregs_
10a64     18 F0 07 F1 | 	add	ptra, #24
10a68     08 7F BF FD | 	call	#_pop
10a6c     A7 FA 61 FC | 	wrlong	result1, fp
10a70     04 4E 05 F1 | 	add	fp, #4
10a74     A7 FC 61 FC | 	wrlong	result2, fp
10a78     04 4E 05 F1 | 	add	fp, #4
10a7c     A7 FE 61 FC | 	wrlong	result3, fp
10a80                 | ' 
10a80                 | ' t1=pop() 'value
10a80                 | ' 
10a80                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
10a80     08 4E 85 F1 | 	sub	fp, #8
10a84     1C FE 0D F2 | 	cmp	result3, #28 wz
10a88     08 4E 05 51 |  if_ne	add	fp, #8
10a8c     A7 12 02 5B |  if_ne	rdlong	arg01, fp
10a90     08 4E 85 51 |  if_ne	sub	fp, #8
10a94     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
10a98     A7 12 02 AB |  if_e	rdlong	arg01, fp
10a9c     0C 4E 05 A1 |  if_e	add	fp, #12
10aa0     A7 12 62 AC |  if_e	wrlong	arg01, fp
10aa4     0C 4E 85 A1 |  if_e	sub	fp, #12
10aa8     14 00 90 AD |  if_e	jmp	#LR__1390
10aac     A7 12 02 F6 | 	mov	arg01, fp
10ab0     50 D7 BF FD | 	call	#_converttoint
10ab4     0C 4E 05 F1 | 	add	fp, #12
10ab8     A7 FA 61 FC | 	wrlong	result1, fp
10abc     0C 4E 85 F1 | 	sub	fp, #12
10ac0                 | LR__1390
10ac0                 | ' if t<0 then return
10ac0     0C 4E 05 F1 | 	add	fp, #12
10ac4     A7 12 02 FB | 	rdlong	arg01, fp
10ac8     0C 4E 85 F1 | 	sub	fp, #12
10acc     00 12 56 F2 | 	cmps	arg01, #0 wc
10ad0     B8 00 90 CD |  if_b	jmp	#LR__1395
10ad4                 | ' if t < 5000 then 
10ad4     0C 4E 05 F1 | 	add	fp, #12
10ad8     A7 12 02 FB | 	rdlong	arg01, fp
10adc     0C 4E 85 F1 | 	sub	fp, #12
10ae0     09 00 00 FF 
10ae4     88 13 56 F2 | 	cmps	arg01, ##5000 wc
10ae8     14 00 90 3D |  if_ae	jmp	#LR__1391
10aec     0C 4E 05 F1 | 	add	fp, #12
10af0     A7 12 02 FB | 	rdlong	arg01, fp
10af4     0C 4E 85 F1 | 	sub	fp, #12
10af8     B8 4F B0 FD | 	call	#__system___waitms
10afc     8C 00 90 FD | 	jmp	#LR__1394
10b00                 | LR__1391
10b00     10 4E 05 F1 | 	add	fp, #16
10b04     A7 02 68 FC | 	wrlong	#1, fp
10b08     04 4E 85 F1 | 	sub	fp, #4
10b0c     A7 12 02 FB | 	rdlong	arg01, fp
10b10     09 13 52 F6 | 	abs	arg01, arg01 wc
10b14     09 00 00 FF 
10b18     88 13 16 FD | 	qdiv	arg01, ##5000
10b1c                 | '   for i=1 to t/5000
10b1c     0C 4E 85 F1 | 	sub	fp, #12
10b20     18 1E 62 FD | 	getqx	local01
10b24     0F 1F 82 F6 | 	negc	local01, local01
10b28     01 1E 06 F1 | 	add	local01, #1
10b2c                 | LR__1392
10b2c     10 4E 05 F1 | 	add	fp, #16
10b30     A7 12 02 FB | 	rdlong	arg01, fp
10b34     10 4E 85 F1 | 	sub	fp, #16
10b38     0F 13 52 F2 | 	cmps	arg01, local01 wc
10b3c     28 00 90 3D |  if_ae	jmp	#LR__1393
10b40     0C 4E 05 F1 | 	add	fp, #12
10b44     A7 12 02 FB | 	rdlong	arg01, fp
10b48     0C 4E 85 F1 | 	sub	fp, #12
10b4c     64 4F B0 FD | 	call	#__system___waitms
10b50     10 4E 05 F1 | 	add	fp, #16
10b54     A7 12 02 FB | 	rdlong	arg01, fp
10b58     01 12 06 F1 | 	add	arg01, #1
10b5c     A7 12 62 FC | 	wrlong	arg01, fp
10b60     10 4E 85 F1 | 	sub	fp, #16
10b64     C4 FF 9F FD | 	jmp	#LR__1392
10b68                 | LR__1393
10b68     0C 4E 05 F1 | 	add	fp, #12
10b6c     A7 1E 02 FB | 	rdlong	local01, fp
10b70     0F 1F 52 F6 | 	abs	local01, local01 wc
10b74     09 00 00 FF 
10b78     88 1F 16 FD | 	qdiv	local01, ##5000
10b7c     0C 4E 85 F1 | 	sub	fp, #12
10b80     19 1E 62 FD | 	getqy	local01
10b84     0F 13 82 F6 | 	negc	arg01, local01
10b88     28 4F B0 FD | 	call	#__system___waitms
10b8c                 | LR__1394
10b8c                 | LR__1395
10b8c     A7 F0 03 F6 | 	mov	ptra, fp
10b90     B2 00 A0 FD | 	call	#popregs_
10b94                 | _do_waitms_ret
10b94     2D 00 64 FD | 	ret
10b98                 | 
10b98                 | ' 
10b98                 | ' sub do_waitvbl
10b98                 | _do_waitvbl
10b98     01 12 06 F6 | 	mov	arg01, #1
10b9c     D0 38 B0 FD | 	call	#_hg010b_spin2_waitvbl
10ba0                 | _do_waitvbl_ret
10ba0     2D 00 64 FD | 	ret
10ba4                 | 
10ba4                 | ' 
10ba4                 | ' sub do_waitclock
10ba4                 | _do_waitclock
10ba4     52 00 00 FF 
10ba8     38 E4 05 F1 | 	add	objptr, ##42040
10bac     F2 00 02 FB | 	rdlong	_var01, objptr
10bb0                 | ' c=hkcnt
10bb0                 | ' do: loop until hkcnt<>c
10bb0                 | LR__1400
10bb0     F2 02 02 FB | 	rdlong	_var02, objptr
10bb4     00 03 0A F2 | 	cmp	_var02, _var01 wz
10bb8     F4 FF 9F AD |  if_e	jmp	#LR__1400
10bbc     52 00 00 FF 
10bc0     38 E4 85 F1 | 	sub	objptr, ##42040
10bc4                 | _do_waitclock_ret
10bc4     2D 00 64 FD | 	ret
10bc8                 | 
10bc8                 | ' 
10bc8                 | ' sub do_dir
10bc8                 | _do_dir
10bc8     03 4A 05 F6 | 	mov	COUNT_, #3
10bcc     A8 00 A0 FD | 	call	#pushregs_
10bd0     26 01 00 FF 
10bd4     FD 13 06 F6 | 	mov	arg01, ##@LR__4343
10bd8     70 52 B0 FD | 	call	#__system___chdir
10bdc                 | ' chdir("/sd/bas")       ' set working directory
10bdc                 | ' print "Working directory: "; currentdir$ 
10bdc     00 12 06 F6 | 	mov	arg01, #0
10be0     8C A1 B0 FD | 	call	#__system___getiolock_0369
10be4     FD 12 02 F6 | 	mov	arg01, result1
10be8     D4 4B B0 FD | 	call	#__system___lockmem
10bec     27 01 00 FF 
10bf0     05 14 06 F6 | 	mov	arg02, ##@LR__4344
10bf4     00 12 06 F6 | 	mov	arg01, #0
10bf8     00 16 06 F6 | 	mov	arg03, #0
10bfc     B4 58 B0 FD | 	call	#__system___basic_print_string
10c00     49 00 00 FF 
10c04     58 E4 05 F1 | 	add	objptr, ##37464
10c08     F2 14 02 FB | 	rdlong	arg02, objptr
10c0c     49 00 00 FF 
10c10     58 E4 85 F1 | 	sub	objptr, ##37464
10c14     00 12 06 F6 | 	mov	arg01, #0
10c18     00 16 06 F6 | 	mov	arg03, #0
10c1c     94 58 B0 FD | 	call	#__system___basic_print_string
10c20     00 12 06 F6 | 	mov	arg01, #0
10c24     0A 14 06 F6 | 	mov	arg02, #10
10c28     00 16 06 F6 | 	mov	arg03, #0
10c2c     2C 58 B0 FD | 	call	#__system___basic_print_char
10c30     00 12 06 F6 | 	mov	arg01, #0
10c34     38 A1 B0 FD | 	call	#__system___getiolock_0369
10c38     FD 00 68 FC | 	wrlong	#0, result1
10c3c     27 01 00 FF 
10c40     19 12 06 F6 | 	mov	arg01, ##@LR__4345
10c44     10 14 06 F6 | 	mov	arg02, #16
10c48     5C A2 B0 FD | 	call	#__system___basic_dir
10c4c     FD 1E 02 F6 | 	mov	local01, result1
10c50                 | ' 
10c50                 | ' filename=dir$("*", fbDirectory)
10c50                 | ' while filename <> "" and filename <> nil
10c50                 | LR__1410
10c50     00 20 06 F6 | 	mov	local02, #0
10c54     27 01 00 FF 
10c58     1B 14 06 F6 | 	mov	arg02, ##@LR__4346
10c5c     0F 13 02 F6 | 	mov	arg01, local01
10c60     84 4B B0 FD | 	call	#__system___string_cmp
10c64     00 FA 0D F2 | 	cmp	result1, #0 wz
10c68     00 20 26 56 |  if_ne	not	local02, #0
10c6c     00 22 06 F6 | 	mov	local03, #0
10c70     0F 13 02 F6 | 	mov	arg01, local01
10c74     00 14 06 F6 | 	mov	arg02, #0
10c78     6C 4B B0 FD | 	call	#__system___string_cmp
10c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
10c80     00 22 26 56 |  if_ne	not	local03, #0
10c84     11 21 CA F7 | 	test	local02, local03 wz
10c88     64 00 90 AD |  if_e	jmp	#LR__1411
10c8c                 | '   print "[dir] ";filename
10c8c     00 12 06 F6 | 	mov	arg01, #0
10c90     DC A0 B0 FD | 	call	#__system___getiolock_0369
10c94     FD 12 02 F6 | 	mov	arg01, result1
10c98     24 4B B0 FD | 	call	#__system___lockmem
10c9c     27 01 00 FF 
10ca0     1C 14 06 F6 | 	mov	arg02, ##@LR__4347
10ca4     00 12 06 F6 | 	mov	arg01, #0
10ca8     00 16 06 F6 | 	mov	arg03, #0
10cac     04 58 B0 FD | 	call	#__system___basic_print_string
10cb0     00 12 06 F6 | 	mov	arg01, #0
10cb4     0F 15 02 F6 | 	mov	arg02, local01
10cb8     00 16 06 F6 | 	mov	arg03, #0
10cbc     F4 57 B0 FD | 	call	#__system___basic_print_string
10cc0     00 12 06 F6 | 	mov	arg01, #0
10cc4     0A 14 06 F6 | 	mov	arg02, #10
10cc8     00 16 06 F6 | 	mov	arg03, #0
10ccc     8C 57 B0 FD | 	call	#__system___basic_print_char
10cd0     00 12 06 F6 | 	mov	arg01, #0
10cd4     98 A0 B0 FD | 	call	#__system___getiolock_0369
10cd8     FD 00 68 FC | 	wrlong	#0, result1
10cdc     00 12 06 F6 | 	mov	arg01, #0
10ce0     00 14 06 F6 | 	mov	arg02, #0
10ce4     C0 A1 B0 FD | 	call	#__system___basic_dir
10ce8     FD 1E 02 F6 | 	mov	local01, result1
10cec     60 FF 9F FD | 	jmp	#LR__1410
10cf0                 | LR__1411
10cf0     27 01 00 FF 
10cf4     23 12 06 F6 | 	mov	arg01, ##@LR__4348
10cf8     21 14 06 F6 | 	mov	arg02, #33
10cfc     A8 A1 B0 FD | 	call	#__system___basic_dir
10d00     FD 1E 02 F6 | 	mov	local01, result1
10d04                 | ' 
10d04                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
10d04                 | ' do while filename <> "" and filename <> nil
10d04                 | LR__1412
10d04     00 20 06 F6 | 	mov	local02, #0
10d08     27 01 00 FF 
10d0c     25 14 06 F6 | 	mov	arg02, ##@LR__4349
10d10     0F 13 02 F6 | 	mov	arg01, local01
10d14     D0 4A B0 FD | 	call	#__system___string_cmp
10d18     00 FA 0D F2 | 	cmp	result1, #0 wz
10d1c     00 20 26 56 |  if_ne	not	local02, #0
10d20     00 22 06 F6 | 	mov	local03, #0
10d24     0F 13 02 F6 | 	mov	arg01, local01
10d28     00 14 06 F6 | 	mov	arg02, #0
10d2c     B8 4A B0 FD | 	call	#__system___string_cmp
10d30     00 FA 0D F2 | 	cmp	result1, #0 wz
10d34     00 22 26 56 |  if_ne	not	local03, #0
10d38     11 21 CA F7 | 	test	local02, local03 wz
10d3c     54 01 90 AD |  if_e	jmp	#LR__1416
10d40                 | '   print filename
10d40     00 12 06 F6 | 	mov	arg01, #0
10d44     28 A0 B0 FD | 	call	#__system___getiolock_0369
10d48     FD 12 02 F6 | 	mov	arg01, result1
10d4c     70 4A B0 FD | 	call	#__system___lockmem
10d50     00 12 06 F6 | 	mov	arg01, #0
10d54     0F 15 02 F6 | 	mov	arg02, local01
10d58     00 16 06 F6 | 	mov	arg03, #0
10d5c     54 57 B0 FD | 	call	#__system___basic_print_string
10d60     00 12 06 F6 | 	mov	arg01, #0
10d64     0A 14 06 F6 | 	mov	arg02, #10
10d68     00 16 06 F6 | 	mov	arg03, #0
10d6c     EC 56 B0 FD | 	call	#__system___basic_print_char
10d70     00 12 06 F6 | 	mov	arg01, #0
10d74     F8 9F B0 FD | 	call	#__system___getiolock_0369
10d78     FD 00 68 FC | 	wrlong	#0, result1
10d7c     00 12 06 F6 | 	mov	arg01, #0
10d80     00 14 06 F6 | 	mov	arg02, #0
10d84     20 A1 B0 FD | 	call	#__system___basic_dir
10d88     FD 1E 02 F6 | 	mov	local01, result1
10d8c                 | '   filename = dir$()      ' continue scan
10d8c                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
10d8c                 | ' return cursor_y
10d8c     3A E4 05 F1 | 	add	objptr, #58
10d90     F2 FA C1 FA | 	rdbyte	result1, objptr
10d94     3A E4 85 F1 | 	sub	objptr, #58
10d98     22 FA 0D F2 | 	cmp	result1, #34 wz
10d9c     64 FF 9F 5D |  if_ne	jmp	#LR__1412
10da0                 | '     print "-----more, press any key";
10da0     00 12 06 F6 | 	mov	arg01, #0
10da4     C8 9F B0 FD | 	call	#__system___getiolock_0369
10da8     FD 12 02 F6 | 	mov	arg01, result1
10dac     10 4A B0 FD | 	call	#__system___lockmem
10db0     27 01 00 FF 
10db4     26 14 06 F6 | 	mov	arg02, ##@LR__4350
10db8     00 12 06 F6 | 	mov	arg01, #0
10dbc     00 16 06 F6 | 	mov	arg03, #0
10dc0     F0 56 B0 FD | 	call	#__system___basic_print_string
10dc4     00 12 06 F6 | 	mov	arg01, #0
10dc8     A4 9F B0 FD | 	call	#__system___getiolock_0369
10dcc     FD 00 68 FC | 	wrlong	#0, result1
10dd0                 | '     do 
10dd0                 | LR__1413
10dd0     90 42 B0 FD | 	call	#_usbnew_spin2_get_key
10dd4     00 FA 0D F2 | 	cmp	result1, #0 wz
10dd8     F4 FF 9F 5D |  if_ne	jmp	#LR__1413
10ddc                 | '     do
10ddc                 | LR__1414
10ddc     84 42 B0 FD | 	call	#_usbnew_spin2_get_key
10de0     00 FA 0D F2 | 	cmp	result1, #0 wz
10de4     F4 FF 9F AD |  if_e	jmp	#LR__1414
10de8                 | '       if keyclick=1 then paula.play(7,@atari_spl,44100,16384,1684) 
10de8     50 00 00 FF 
10dec     A4 E5 05 F1 | 	add	objptr, ##41380
10df0     F2 20 02 FB | 	rdlong	local02, objptr
10df4     50 00 00 FF 
10df8     A4 E5 85 F1 | 	sub	objptr, ##41380
10dfc     01 20 0E F2 | 	cmp	local02, #1 wz
10e00     44 00 90 5D |  if_ne	jmp	#LR__1415
10e04     01 00 00 FF 
10e08     00 EA 05 F1 | 	add	ptr__dat__, ##512
10e0c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
10e10     01 00 00 FF 
10e14     00 EA 85 F1 | 	sub	ptr__dat__, ##512
10e18     07 12 06 F6 | 	mov	arg01, #7
10e1c     56 00 00 FF 
10e20     44 16 06 F6 | 	mov	arg03, ##44100
10e24     0E 18 C6 F9 | 	decod	arg04, #14
10e28     03 00 00 FF 
10e2c     94 1A 06 F6 | 	mov	arg05, ##1684
10e30     01 1C 66 F6 | 	neg	arg06, #1
10e34     0B 00 00 FF 
10e38     C0 E4 05 F1 | 	add	objptr, ##5824
10e3c     4C 45 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
10e40     0B 00 00 FF 
10e44     C0 E4 85 F1 | 	sub	objptr, ##5824
10e48                 | LR__1415
10e48     00 12 06 F6 | 	mov	arg01, #0
10e4c     23 14 06 F6 | 	mov	arg02, #35
10e50     E4 35 B0 FD | 	call	#_hg010b_spin2_setcursorpos
10e54                 | '     position 0,35: print "                             ";: position 4,35  
10e54     00 12 06 F6 | 	mov	arg01, #0
10e58     14 9F B0 FD | 	call	#__system___getiolock_0369
10e5c     FD 12 02 F6 | 	mov	arg01, result1
10e60     5C 49 B0 FD | 	call	#__system___lockmem
10e64     27 01 00 FF 
10e68     3F 14 06 F6 | 	mov	arg02, ##@LR__4351
10e6c     00 12 06 F6 | 	mov	arg01, #0
10e70     00 16 06 F6 | 	mov	arg03, #0
10e74     3C 56 B0 FD | 	call	#__system___basic_print_string
10e78     00 12 06 F6 | 	mov	arg01, #0
10e7c     F0 9E B0 FD | 	call	#__system___getiolock_0369
10e80     FD 00 68 FC | 	wrlong	#0, result1
10e84     04 12 06 F6 | 	mov	arg01, #4
10e88     23 14 06 F6 | 	mov	arg02, #35
10e8c     A8 35 B0 FD | 	call	#_hg010b_spin2_setcursorpos
10e90     70 FE 9F FD | 	jmp	#LR__1412
10e94                 | LR__1416
10e94     A7 F0 03 F6 | 	mov	ptra, fp
10e98     B2 00 A0 FD | 	call	#popregs_
10e9c                 | _do_dir_ret
10e9c     2D 00 64 FD | 	ret
10ea0                 | 
10ea0                 | ' 
10ea0                 | ' sub do_if
10ea0                 | _do_if
10ea0     05 4A 05 F6 | 	mov	COUNT_, #5
10ea4     A8 00 A0 FD | 	call	#pushregs_
10ea8     C8 7A BF FD | 	call	#_pop
10eac     FD 1E 0A F6 | 	mov	local01, result1 wz
10eb0     FE 20 02 F6 | 	mov	local02, result2
10eb4     FF 22 02 F6 | 	mov	local03, result3
10eb8                 | ' t1=pop()
10eb8                 | ' ' if uresult=0, jump over else
10eb8                 | ' if t1.result.uresult = 0 then 
10eb8     BC 00 90 5D |  if_ne	jmp	#LR__1422
10ebc                 | '   for i=lineptr_e to lineptr-1
10ebc     41 00 00 FF 
10ec0     44 E4 05 F1 | 	add	objptr, ##33348
10ec4     F2 24 02 FB | 	rdlong	local04, objptr
10ec8     04 E4 85 F1 | 	sub	objptr, #4
10ecc     F2 26 02 FB | 	rdlong	local05, objptr
10ed0     41 00 00 FF 
10ed4     40 E4 85 F1 | 	sub	objptr, ##33344
10ed8                 | LR__1420
10ed8     13 25 52 F2 | 	cmps	local04, local05 wc
10edc     78 00 90 3D |  if_ae	jmp	#LR__1421
10ee0     12 FF 01 F6 | 	mov	result3, local04
10ee4     01 FE 65 F0 | 	shl	result3, #1
10ee8     12 FF 01 F1 | 	add	result3, local04
10eec     02 FE 65 F0 | 	shl	result3, #2
10ef0     3E 00 00 FF 
10ef4     40 E4 05 F1 | 	add	objptr, ##31808
10ef8     F2 FE 01 F1 | 	add	result3, objptr
10efc     FF 1E 02 FB | 	rdlong	local01, result3
10f00     04 FE 05 F1 | 	add	result3, #4
10f04     FF FC 01 FB | 	rdlong	result2, result3
10f08     12 FF 01 F6 | 	mov	result3, local04
10f0c     01 FE 65 F0 | 	shl	result3, #1
10f10     12 FF 01 F1 | 	add	result3, local04
10f14     02 FE 65 F0 | 	shl	result3, #2
10f18     F2 FE 01 F1 | 	add	result3, objptr
10f1c     08 FE 05 F1 | 	add	result3, #8
10f20     FF FE 01 FB | 	rdlong	result3, result3
10f24     FE 20 02 F6 | 	mov	local02, result2
10f28     FF 22 02 F6 | 	mov	local03, result3
10f2c                 | '     t1=compiledline(i)
10f2c                 | '     if t1.result_type=token_else then lineptr_e=i : return
10f2c     5A 22 0E F2 | 	cmp	local03, #90 wz
10f30     3E 00 00 FF 
10f34     40 E4 85 F1 | 	sub	objptr, ##31808
10f38     41 00 00 AF 
10f3c     44 E4 05 A1 |  if_e	add	objptr, ##33348
10f40     F2 24 62 AC |  if_e	wrlong	local04, objptr
10f44     41 00 00 AF 
10f48     44 E4 85 A1 |  if_e	sub	objptr, ##33348
10f4c     28 00 90 AD |  if_e	jmp	#LR__1423
10f50     01 24 06 F1 | 	add	local04, #1
10f54     80 FF 9F FD | 	jmp	#LR__1420
10f58                 | LR__1421
10f58     41 00 00 FF 
10f5c     40 E4 05 F1 | 	add	objptr, ##33344
10f60     F2 26 02 FB | 	rdlong	local05, objptr
10f64     01 26 86 F1 | 	sub	local05, #1
10f68     04 E4 05 F1 | 	add	objptr, #4
10f6c     F2 26 62 FC | 	wrlong	local05, objptr
10f70     41 00 00 FF 
10f74     44 E4 85 F1 | 	sub	objptr, ##33348
10f78                 | LR__1422
10f78                 | LR__1423
10f78     A7 F0 03 F6 | 	mov	ptra, fp
10f7c     B2 00 A0 FD | 	call	#popregs_
10f80                 | _do_if_ret
10f80     2D 00 64 FD | 	ret
10f84                 | 
10f84                 | ' 
10f84                 | ' sub do_else
10f84                 | _do_else
10f84     41 00 00 FF 
10f88     40 E4 05 F1 | 	add	objptr, ##33344
10f8c     F2 00 02 FB | 	rdlong	_var01, objptr
10f90     01 00 86 F1 | 	sub	_var01, #1
10f94     04 E4 05 F1 | 	add	objptr, #4
10f98     F2 00 62 FC | 	wrlong	_var01, objptr
10f9c     41 00 00 FF 
10fa0     44 E4 85 F1 | 	sub	objptr, ##33348
10fa4                 | _do_else_ret
10fa4     2D 00 64 FD | 	ret
10fa8                 | 
10fa8                 | ' 
10fa8                 | ' 
10fa8                 | ' 
10fa8                 | ' sub do_nothing
10fa8                 | _do_nothing
10fa8                 | _do_nothing_ret
10fa8     2D 00 64 FD | 	ret
10fac                 | 
10fac                 | ' 
10fac                 | ' sub do_brun
10fac                 | _do_brun
10fac     08 4A 05 F6 | 	mov	COUNT_, #8
10fb0     A8 00 A0 FD | 	call	#pushregs_
10fb4     BC 79 BF FD | 	call	#_pop
10fb8     FE 1A 02 F6 | 	mov	arg05, result2
10fbc     FF 18 02 F6 | 	mov	arg04, result3
10fc0     FD 1E 02 F6 | 	mov	local01, result1
10fc4     0D 21 02 F6 | 	mov	local02, arg05
10fc8     0C 23 02 F6 | 	mov	local03, arg04
10fcc                 | ' 
10fcc                 | ' t1=pop() 
10fcc                 | ' if t1.result_type=result_string2 then t1.result.sresult=do_convertstring(t1.result.uresult): t1.result_type=result_string
10fcc     2B 22 0E F2 | 	cmp	local03, #43 wz
10fd0     10 00 90 5D |  if_ne	jmp	#LR__1430
10fd4     0F 13 02 F6 | 	mov	arg01, local01
10fd8     8C 96 BF FD | 	call	#_do_convertstring
10fdc     FD 1E 02 F6 | 	mov	local01, result1
10fe0     1F 22 06 F6 | 	mov	local03, #31
10fe4                 | LR__1430
10fe4                 | ' if t1.result_type=result_string then
10fe4     1F 22 0E F2 | 	cmp	local03, #31 wz
10fe8     EC 01 90 5D |  if_ne	jmp	#LR__1434
10fec     0F 25 02 F6 | 	mov	local04, local01
10ff0                 | '   filename=t1.result.sresult
10ff0                 | '   if left$(filename,1)="/" then 
10ff0     12 13 02 F6 | 	mov	arg01, local04
10ff4     01 14 06 F6 | 	mov	arg02, #1
10ff8     D4 67 B0 FD | 	call	#__system__Left_S
10ffc     FD 12 02 F6 | 	mov	arg01, result1
11000     27 01 00 FF 
11004     5D 14 06 F6 | 	mov	arg02, ##@LR__4352
11008     DC 47 B0 FD | 	call	#__system___string_cmp
1100c     00 FA 0D F2 | 	cmp	result1, #0 wz
11010     12 27 02 A6 |  if_e	mov	local05, local04
11014     14 00 90 AD |  if_e	jmp	#LR__1431
11018     27 01 00 FF 
1101c     5F 12 06 F6 | 	mov	arg01, ##@LR__4353
11020     12 15 02 F6 | 	mov	arg02, local04
11024     F4 47 B0 FD | 	call	#__system___string_concat
11028     FD 26 02 F6 | 	mov	local05, result1
1102c                 | LR__1431
1102c                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
1102c                 | '   open fullfilename for input as #9
1102c     09 12 06 F6 | 	mov	arg01, #9
11030     13 15 02 F6 | 	mov	arg02, local05
11034     00 16 06 F6 | 	mov	arg03, #0
11038     88 53 B0 FD | 	call	#__system___basic_open_string
1103c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
11040     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
11044     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
11048     FD 28 0A F6 | 	mov	local06, result1 wz
1104c                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
1104c     8C 00 90 AD |  if_e	jmp	#LR__1432
11050     00 12 06 F6 | 	mov	arg01, #0
11054     18 9D B0 FD | 	call	#__system___getiolock_0369
11058     FD 12 02 F6 | 	mov	arg01, result1
1105c     60 47 B0 FD | 	call	#__system___lockmem
11060     27 01 00 FF 
11064     68 14 06 F6 | 	mov	arg02, ##@LR__4354
11068     00 12 06 F6 | 	mov	arg01, #0
1106c     00 16 06 F6 | 	mov	arg03, #0
11070     40 54 B0 FD | 	call	#__system___basic_print_string
11074     00 12 06 F6 | 	mov	arg01, #0
11078     14 15 02 F6 | 	mov	arg02, local06
1107c     00 16 06 F6 | 	mov	arg03, #0
11080     0A 18 06 F6 | 	mov	arg04, #10
11084     70 54 B0 FD | 	call	#__system___basic_print_integer
11088     27 01 00 FF 
1108c     76 14 06 F6 | 	mov	arg02, ##@LR__4355
11090     00 12 06 F6 | 	mov	arg01, #0
11094     00 16 06 F6 | 	mov	arg03, #0
11098     18 54 B0 FD | 	call	#__system___basic_print_string
1109c     14 13 02 F6 | 	mov	arg01, local06
110a0     1C 6D B0 FD | 	call	#__system___strerror
110a4     FD 14 02 F6 | 	mov	arg02, result1
110a8     00 12 06 F6 | 	mov	arg01, #0
110ac     00 16 06 F6 | 	mov	arg03, #0
110b0     00 54 B0 FD | 	call	#__system___basic_print_string
110b4     00 12 06 F6 | 	mov	arg01, #0
110b8     0A 14 06 F6 | 	mov	arg02, #10
110bc     00 16 06 F6 | 	mov	arg03, #0
110c0     98 53 B0 FD | 	call	#__system___basic_print_char
110c4     00 12 06 F6 | 	mov	arg01, #0
110c8     A4 9C B0 FD | 	call	#__system___getiolock_0369
110cc     FD 00 68 FC | 	wrlong	#0, result1
110d0     09 12 06 F6 | 	mov	arg01, #9
110d4     C8 92 B0 FD | 	call	#__system__close
110d8     FC 00 90 FD | 	jmp	#LR__1435
110dc                 | LR__1432
110dc     01 2A 06 F6 | 	mov	local07, #1
110e0     00 2C 06 F6 | 	mov	local08, #0
110e4                 | '   do
110e4                 | LR__1433
110e4                 | '     get #9,pos,block(0),1024,r : pos+=r	
110e4     4E 00 00 FF 
110e8     70 E5 05 F1 | 	add	objptr, ##40304
110ec     F2 16 02 F6 | 	mov	arg03, objptr
110f0     4E 00 00 FF 
110f4     70 E5 85 F1 | 	sub	objptr, ##40304
110f8     09 12 06 F6 | 	mov	arg01, #9
110fc     15 15 02 F6 | 	mov	arg02, local07
11100     0A 18 C6 F9 | 	decod	arg04, #10
11104     01 1A 06 F6 | 	mov	arg05, #1
11108     B8 54 B0 FD | 	call	#__system___basic_get
1110c     FD 28 02 F6 | 	mov	local06, result1
11110     FD 2A 02 F1 | 	add	local07, result1
11114     4E 00 00 FF 
11118     70 E5 05 F1 | 	add	objptr, ##40304
1111c     F2 12 02 F6 | 	mov	arg01, objptr
11120     16 15 02 F6 | 	mov	arg02, local08
11124     0A 16 C6 F9 | 	decod	arg03, #10
11128     43 00 00 FF 
1112c     B0 E4 85 F1 | 	sub	objptr, ##34480
11130     3C 3C B0 FD | 	call	#_psram_spin2_write
11134     0B 00 00 FF 
11138     C0 E4 85 F1 | 	sub	objptr, ##5824
1113c     14 2D 02 F1 | 	add	local08, local06
11140     02 00 00 FF 
11144     00 28 0E F2 | 	cmp	local06, ##1024 wz
11148     E0 03 00 AF 
1114c     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
11150     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1433
11154     2D 00 00 FF 
11158     C0 E5 05 F1 | 	add	objptr, ##23488
1115c     F2 12 02 FB | 	rdlong	arg01, objptr
11160     03 12 62 FD | 	cogstop	arg01
11164     04 E4 05 F1 | 	add	objptr, #4
11168     F2 12 02 FB | 	rdlong	arg01, objptr
1116c     03 12 62 FD | 	cogstop	arg01
11170     04 E4 05 F1 | 	add	objptr, #4
11174     F2 12 02 FB | 	rdlong	arg01, objptr
11178     03 12 62 FD | 	cogstop	arg01
1117c     22 00 00 FF 
11180     E0 E5 05 F1 | 	add	objptr, ##17888
11184     F2 12 02 FB | 	rdlong	arg01, objptr
11188     03 12 62 FD | 	cogstop	arg01
1118c     09 00 00 FF 
11190     74 EB 05 F1 | 	add	ptr__dat__, ##4980
11194     F5 14 02 F6 | 	mov	arg02, ptr__dat__
11198     09 00 00 FF 
1119c     74 EB 85 F1 | 	sub	ptr__dat__, ##4980
111a0     22 00 00 FF 
111a4     D8 E5 85 F1 | 	sub	objptr, ##17880
111a8     1E 2C 06 F6 | 	mov	local08, #30
111ac     28 E4 61 FD | 	setq	objptr
111b0     0A 2D F2 FC | 	coginit	local08, arg02 wc
111b4     01 2C 66 C6 |  if_b	neg	local08, #1
111b8     24 00 00 FF 
111bc     DC E4 05 F1 | 	add	objptr, ##18652
111c0     F2 2C 62 FC | 	wrlong	local08, objptr
111c4     52 00 00 FF 
111c8     AC E4 85 F1 | 	sub	objptr, ##42156
111cc     00 12 06 F6 | 	mov	arg01, #0
111d0     01 12 62 FD | 	cogid	arg01
111d4     03 12 62 FD | 	cogstop	arg01
111d8                 | LR__1434
111d8                 | LR__1435
111d8     A7 F0 03 F6 | 	mov	ptra, fp
111dc     B2 00 A0 FD | 	call	#popregs_
111e0                 | _do_brun_ret
111e0     2D 00 64 FD | 	ret
111e4                 | 
111e4                 | ' 
111e4                 | ' 
111e4                 | ' sub do_mouse
111e4                 | _do_mouse
111e4     8C 77 BF FD | 	call	#_pop
111e8     00 FA 4D F2 | 	cmps	result1, #0 wz
111ec                 | ' 
111ec                 | ' t1=pop()
111ec                 | ' 
111ec                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
111ec     14 00 90 5D |  if_ne	jmp	#LR__1440
111f0     10 12 06 F6 | 	mov	arg01, #16
111f4     00 14 06 F6 | 	mov	arg02, #0
111f8     00 16 06 F6 | 	mov	arg03, #0
111fc     28 26 B0 FD | 	call	#_hg010b_spin2_setspritesize
11200     10 00 90 FD | 	jmp	#LR__1441
11204                 | LR__1440
11204     10 12 06 F6 | 	mov	arg01, #16
11208     20 14 06 F6 | 	mov	arg02, #32
1120c     20 16 06 F6 | 	mov	arg03, #32
11210     14 26 B0 FD | 	call	#_hg010b_spin2_setspritesize
11214                 | LR__1441
11214                 | _do_mouse_ret
11214     2D 00 64 FD | 	ret
11218                 | 
11218                 | ' 
11218                 | ' sub do_cursor
11218                 | _do_cursor
11218     58 77 BF FD | 	call	#_pop
1121c     00 FA 4D F2 | 	cmps	result1, #0 wz
11220                 | ' 
11220                 | ' t1=pop()
11220                 | ' 
11220                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
11220     14 00 90 5D |  if_ne	jmp	#LR__1450
11224     11 12 06 F6 | 	mov	arg01, #17
11228     00 14 06 F6 | 	mov	arg02, #0
1122c     00 16 06 F6 | 	mov	arg03, #0
11230     F4 25 B0 FD | 	call	#_hg010b_spin2_setspritesize
11234     10 00 90 FD | 	jmp	#LR__1451
11238                 | LR__1450
11238     11 12 06 F6 | 	mov	arg01, #17
1123c     08 14 06 F6 | 	mov	arg02, #8
11240     10 16 06 F6 | 	mov	arg03, #16
11244     E0 25 B0 FD | 	call	#_hg010b_spin2_setspritesize
11248                 | LR__1451
11248                 | _do_cursor_ret
11248     2D 00 64 FD | 	ret
1124c                 | 
1124c                 | ' 
1124c                 | ' 
1124c                 | ' sub do_click
1124c                 | _do_click
1124c     24 77 BF FD | 	call	#_pop
11250     00 FA 4D F2 | 	cmps	result1, #0 wz
11254                 | ' 
11254                 | ' t1=pop()
11254                 | ' 
11254                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
11254     50 00 00 AF 
11258     A4 E5 05 A1 |  if_e	add	objptr, ##41380
1125c     F2 00 68 AC |  if_e	wrlong	#0, objptr
11260     50 00 00 FF 
11264     A4 E5 C5 F3 | 	sumz	objptr, ##41380
11268     F2 02 68 5C |  if_ne	wrlong	#1, objptr
1126c     50 00 00 5F 
11270     A4 E5 85 51 |  if_ne	sub	objptr, ##41380
11274                 | _do_click_ret
11274     2D 00 64 FD | 	ret
11278                 | 
11278                 | ' 
11278                 | ' 
11278                 | ' sub do_beep
11278                 | _do_beep
11278     02 4A 05 F6 | 	mov	COUNT_, #2
1127c     A8 00 A0 FD | 	call	#pushregs_
11280     20 F0 07 F1 | 	add	ptra, #32
11284     EC 76 BF FD | 	call	#_pop
11288     FD 1E 02 F6 | 	mov	local01, result1
1128c     FE 1C 02 F6 | 	mov	arg06, result2
11290     FF 20 02 F6 | 	mov	local02, result3
11294     0C 4E 05 F1 | 	add	fp, #12
11298     A7 1E 62 FC | 	wrlong	local01, fp
1129c     04 4E 05 F1 | 	add	fp, #4
112a0     A7 1C 62 FC | 	wrlong	arg06, fp
112a4     04 4E 05 F1 | 	add	fp, #4
112a8     A7 20 62 FC | 	wrlong	local02, fp
112ac     14 4E 85 F1 | 	sub	fp, #20
112b0     C0 76 BF FD | 	call	#_pop
112b4     A7 FA 61 FC | 	wrlong	result1, fp
112b8     04 4E 05 F1 | 	add	fp, #4
112bc     A7 FC 61 FC | 	wrlong	result2, fp
112c0     04 4E 05 F1 | 	add	fp, #4
112c4     A7 FE 61 FC | 	wrlong	result3, fp
112c8                 | ' 
112c8                 | ' 
112c8                 | ' 
112c8                 | ' t2=pop()
112c8                 | ' t1=pop()
112c8                 | ' 
112c8                 | ' 
112c8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
112c8     08 4E 85 F1 | 	sub	fp, #8
112cc     1C FE 0D F2 | 	cmp	result3, #28 wz
112d0     08 4E 05 51 |  if_ne	add	fp, #8
112d4     A7 20 02 5B |  if_ne	rdlong	local02, fp
112d8     08 4E 85 51 |  if_ne	sub	fp, #8
112dc     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
112e0     A7 1E 02 AB |  if_e	rdlong	local01, fp
112e4     18 4E 05 A1 |  if_e	add	fp, #24
112e8     A7 1E 62 AC |  if_e	wrlong	local01, fp
112ec     18 4E 85 A1 |  if_e	sub	fp, #24
112f0     14 00 90 AD |  if_e	jmp	#LR__1460
112f4     A7 12 02 F6 | 	mov	arg01, fp
112f8     08 CF BF FD | 	call	#_converttoint
112fc     18 4E 05 F1 | 	add	fp, #24
11300     A7 FA 61 FC | 	wrlong	result1, fp
11304     18 4E 85 F1 | 	sub	fp, #24
11308                 | LR__1460
11308     1C 4E 05 F1 | 	add	fp, #28
1130c     A7 FE 48 FC | 	wrbyte	#127, fp
11310     01 4E 05 F1 | 	add	fp, #1
11314     A7 00 49 FC | 	wrbyte	#128, fp
11318     01 4E 85 F1 | 	sub	fp, #1
1131c     A7 14 02 F6 | 	mov	arg02, fp
11320     04 4E 85 F1 | 	sub	fp, #4
11324     A7 16 02 FB | 	rdlong	arg03, fp
11328     18 4E 85 F1 | 	sub	fp, #24
1132c     01 16 66 F0 | 	shl	arg03, #1
11330     07 12 06 F6 | 	mov	arg01, #7
11334     0E 18 C6 F9 | 	decod	arg04, #14
11338     02 1A 06 F6 | 	mov	arg05, #2
1133c     00 1C 06 F6 | 	mov	arg06, #0
11340     0B 00 00 FF 
11344     C0 E4 05 F1 | 	add	objptr, ##5824
11348     DC 40 B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
1134c     0B 00 00 FF 
11350     C0 E4 85 F1 | 	sub	objptr, ##5824
11354     0C 4E 05 F1 | 	add	fp, #12
11358     A7 12 02 F6 | 	mov	arg01, fp
1135c     0C 4E 85 F1 | 	sub	fp, #12
11360     A8 76 BF FD | 	call	#_push
11364     F4 F6 BF FD | 	call	#_do_waitms
11368     07 12 06 F6 | 	mov	arg01, #7
1136c     0B 00 00 FF 
11370     C0 E4 05 F1 | 	add	objptr, ##5824
11374     64 41 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
11378     0B 00 00 FF 
1137c     C0 E4 85 F1 | 	sub	objptr, ##5824
11380     A7 F0 03 F6 | 	mov	ptra, fp
11384     B2 00 A0 FD | 	call	#popregs_
11388                 | _do_beep_ret
11388     2D 00 64 FD | 	ret
1138c                 | 
1138c                 | ' 
1138c                 | ' sub do_no_command
1138c                 | _do_no_command
1138c     17 12 06 F6 | 	mov	arg01, #23
11390     30 0F B0 FD | 	call	#_printerror
11394                 | _do_no_command_ret
11394     2D 00 64 FD | 	ret
11398                 | 
11398                 | ' 
11398                 | ' sub do_negative
11398                 | _do_negative
11398     02 4A 05 F6 | 	mov	COUNT_, #2
1139c     A8 00 A0 FD | 	call	#pushregs_
113a0     0C F0 07 F1 | 	add	ptra, #12
113a4     CC 75 BF FD | 	call	#_pop
113a8     FF 1E 02 F6 | 	mov	local01, result3
113ac     A7 FA 61 FC | 	wrlong	result1, fp
113b0     04 4E 05 F1 | 	add	fp, #4
113b4     A7 FC 61 FC | 	wrlong	result2, fp
113b8     04 4E 05 F1 | 	add	fp, #4
113bc     A7 1E 62 FC | 	wrlong	local01, fp
113c0                 | ' t1=pop()
113c0                 | ' if t1.result_type=result_int then 
113c0     08 4E 85 F1 | 	sub	fp, #8
113c4     1C 1E 0E F2 | 	cmp	local01, #28 wz
113c8     A7 20 02 AB |  if_e	rdlong	local02, fp
113cc     10 1F 62 A6 |  if_e	neg	local01, local02
113d0     A7 1E 62 AC |  if_e	wrlong	local01, fp
113d4     5C 00 90 AD |  if_e	jmp	#LR__1472
113d8     08 4E 05 F1 | 	add	fp, #8
113dc     A7 1E 02 FB | 	rdlong	local01, fp
113e0     08 4E 85 F1 | 	sub	fp, #8
113e4     1D 1E 0E F2 | 	cmp	local01, #29 wz
113e8     1C 00 90 5D |  if_ne	jmp	#LR__1470
113ec     A7 20 02 FB | 	rdlong	local02, fp
113f0     10 1F 62 F6 | 	neg	local01, local02
113f4     A7 1E 62 FC | 	wrlong	local01, fp
113f8     08 4E 05 F1 | 	add	fp, #8
113fc     A7 38 68 FC | 	wrlong	#28, fp
11400     08 4E 85 F1 | 	sub	fp, #8
11404     2C 00 90 FD | 	jmp	#LR__1471
11408                 | LR__1470
11408     08 4E 05 F1 | 	add	fp, #8
1140c     A7 1E 02 FB | 	rdlong	local01, fp
11410     08 4E 85 F1 | 	sub	fp, #8
11414     1E 1E 0E F2 | 	cmp	local01, #30 wz
11418     A7 FA 01 AB |  if_e	rdlong	result1, fp
1141c     1F FA E5 A4 |  if_e	bitnot	result1, #31
11420     A7 FA 61 AC |  if_e	wrlong	result1, fp
11424     08 4E 05 51 |  if_ne	add	fp, #8
11428     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1142c     08 4E 85 51 |  if_ne	sub	fp, #8
11430     A7 50 68 5C |  if_ne	wrlong	#40, fp
11434                 | LR__1471
11434                 | LR__1472
11434     A7 12 02 F6 | 	mov	arg01, fp
11438     D0 75 BF FD | 	call	#_push
1143c     A7 F0 03 F6 | 	mov	ptra, fp
11440     B2 00 A0 FD | 	call	#popregs_
11444                 | _do_negative_ret
11444     2D 00 64 FD | 	ret
11448                 | 
11448                 | ' 
11448                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
11448                 | ' 
11448                 | ' ''----------------------------------------------------------------------------------------------------
11448                 | ' ''------------------ Initialization procedures -------------------------------------------------------
11448                 | ' ''----------------------------------------------------------------------------------------------------
11448                 | ' 
11448                 | ' ''--------------------------- Command function pointers
11448                 | ' 
11448                 | ' sub init_commands
11448                 | _init_commands
11448                 | ' 
11448                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
11448     00 00 06 F6 | 	mov	_var01, #0
1144c     97 16 48 FB | 	callpa	#(@LR__1481-@LR__1480)>>2,fcache_load_ptr_
11450                 | LR__1480
11450     00 FB 01 F6 | 	mov	result1, _var01
11454     02 FA 65 F0 | 	shl	result1, #2
11458     3A 00 00 FF 
1145c     24 E4 05 F1 | 	add	objptr, ##29732
11460     F2 FA 01 F1 | 	add	result1, objptr
11464     3A 00 00 FF 
11468     24 E4 85 F1 | 	sub	objptr, ##29732
1146c     FD E4 61 FC | 	wrlong	objptr, result1
11470     01 00 06 F1 | 	add	_var01, #1
11474     00 01 56 F2 | 	cmps	_var01, #256 wc
11478     D4 FF 9F CD |  if_b	jmp	#LR__1480
1147c                 | LR__1481
1147c     F2 FA 01 F6 | 	mov	result1, objptr
11480     14 FA 25 F4 | 	bith	result1, #20
11484     3A 00 00 FF 
11488     28 E4 05 F1 | 	add	objptr, ##29736
1148c     F2 FA 61 FC | 	wrlong	result1, objptr
11490     3A 00 00 FF 
11494     28 E4 85 F1 | 	sub	objptr, ##29736
11498     F2 FA 01 F6 | 	mov	result1, objptr
1149c     15 FA 25 F4 | 	bith	result1, #21
114a0     3A 00 00 FF 
114a4     2C E4 05 F1 | 	add	objptr, ##29740
114a8     F2 FA 61 FC | 	wrlong	result1, objptr
114ac     3A 00 00 FF 
114b0     2C E4 85 F1 | 	sub	objptr, ##29740
114b4     F2 FA 01 F6 | 	mov	result1, objptr
114b8     34 FA 25 F4 | 	bith	result1, #52
114bc     3A 00 00 FF 
114c0     30 E4 05 F1 | 	add	objptr, ##29744
114c4     F2 FA 61 FC | 	wrlong	result1, objptr
114c8     3A 00 00 FF 
114cc     30 E4 85 F1 | 	sub	objptr, ##29744
114d0     F2 FA 01 F6 | 	mov	result1, objptr
114d4     16 FA 25 F4 | 	bith	result1, #22
114d8     3A 00 00 FF 
114dc     38 E4 05 F1 | 	add	objptr, ##29752
114e0     F2 FA 61 FC | 	wrlong	result1, objptr
114e4     3A 00 00 FF 
114e8     38 E4 85 F1 | 	sub	objptr, ##29752
114ec     F2 FA 01 F6 | 	mov	result1, objptr
114f0     00 28 00 FF 
114f4     00 FA 45 F5 | 	or	result1, ##5242880
114f8     3A 00 00 FF 
114fc     3C E4 05 F1 | 	add	objptr, ##29756
11500     F2 FA 61 FC | 	wrlong	result1, objptr
11504     3A 00 00 FF 
11508     3C E4 85 F1 | 	sub	objptr, ##29756
1150c     F2 FA 01 F6 | 	mov	result1, objptr
11510     35 FA 25 F4 | 	bith	result1, #53
11514     3A 00 00 FF 
11518     40 E4 05 F1 | 	add	objptr, ##29760
1151c     F2 FA 61 FC | 	wrlong	result1, objptr
11520     3A 00 00 FF 
11524     40 E4 85 F1 | 	sub	objptr, ##29760
11528     F2 FA 01 F6 | 	mov	result1, objptr
1152c     54 FA 25 F4 | 	bith	result1, #84
11530     3A 00 00 FF 
11534     44 E4 05 F1 | 	add	objptr, ##29764
11538     F2 FA 61 FC | 	wrlong	result1, objptr
1153c     3A 00 00 FF 
11540     44 E4 85 F1 | 	sub	objptr, ##29764
11544     F2 FA 01 F6 | 	mov	result1, objptr
11548     17 FA 25 F4 | 	bith	result1, #23
1154c     3A 00 00 FF 
11550     48 E4 05 F1 | 	add	objptr, ##29768
11554     F2 FA 61 FC | 	wrlong	result1, objptr
11558     3A 00 00 FF 
1155c     48 E4 85 F1 | 	sub	objptr, ##29768
11560     F2 FA 01 F6 | 	mov	result1, objptr
11564     00 48 00 FF 
11568     00 FA 45 F5 | 	or	result1, ##9437184
1156c     3A 00 00 FF 
11570     4C E4 05 F1 | 	add	objptr, ##29772
11574     F2 FA 61 FC | 	wrlong	result1, objptr
11578     3A 00 00 FF 
1157c     4C E4 85 F1 | 	sub	objptr, ##29772
11580     F2 FA 01 F6 | 	mov	result1, objptr
11584     00 50 00 FF 
11588     00 FA 45 F5 | 	or	result1, ##10485760
1158c     3A 00 00 FF 
11590     50 E4 05 F1 | 	add	objptr, ##29776
11594     F2 FA 61 FC | 	wrlong	result1, objptr
11598     3A 00 00 FF 
1159c     50 E4 85 F1 | 	sub	objptr, ##29776
115a0     F2 FA 01 F6 | 	mov	result1, objptr
115a4     00 58 00 FF 
115a8     00 FA 45 F5 | 	or	result1, ##11534336
115ac     3A 00 00 FF 
115b0     54 E4 05 F1 | 	add	objptr, ##29780
115b4     F2 FA 61 FC | 	wrlong	result1, objptr
115b8     3A 00 00 FF 
115bc     54 E4 85 F1 | 	sub	objptr, ##29780
115c0     F2 FA 01 F6 | 	mov	result1, objptr
115c4     36 FA 25 F4 | 	bith	result1, #54
115c8     3A 00 00 FF 
115cc     68 E4 05 F1 | 	add	objptr, ##29800
115d0     F2 FA 61 FC | 	wrlong	result1, objptr
115d4     3A 00 00 FF 
115d8     68 E4 85 F1 | 	sub	objptr, ##29800
115dc     F2 FA 01 F6 | 	mov	result1, objptr
115e0     00 68 00 FF 
115e4     00 FA 45 F5 | 	or	result1, ##13631488
115e8     3A 00 00 FF 
115ec     98 E4 05 F1 | 	add	objptr, ##29848
115f0     F2 FA 61 FC | 	wrlong	result1, objptr
115f4     3A 00 00 FF 
115f8     98 E4 85 F1 | 	sub	objptr, ##29848
115fc     F2 FA 01 F6 | 	mov	result1, objptr
11600     00 68 00 FF 
11604     00 FA 45 F5 | 	or	result1, ##13631488
11608     3A 00 00 FF 
1160c     94 E4 05 F1 | 	add	objptr, ##29844
11610     F2 FA 61 FC | 	wrlong	result1, objptr
11614     3A 00 00 FF 
11618     94 E4 85 F1 | 	sub	objptr, ##29844
1161c     F2 FA 01 F6 | 	mov	result1, objptr
11620     00 68 00 FF 
11624     00 FA 45 F5 | 	or	result1, ##13631488
11628     3A 00 00 FF 
1162c     9C E4 05 F1 | 	add	objptr, ##29852
11630     F2 FA 61 FC | 	wrlong	result1, objptr
11634     3A 00 00 FF 
11638     9C E4 85 F1 | 	sub	objptr, ##29852
1163c     F2 FA 01 F6 | 	mov	result1, objptr
11640     00 68 00 FF 
11644     00 FA 45 F5 | 	or	result1, ##13631488
11648     3A 00 00 FF 
1164c     A0 E4 05 F1 | 	add	objptr, ##29856
11650     F2 FA 61 FC | 	wrlong	result1, objptr
11654     3A 00 00 FF 
11658     A0 E4 85 F1 | 	sub	objptr, ##29856
1165c     F2 FA 01 F6 | 	mov	result1, objptr
11660     00 68 00 FF 
11664     00 FA 45 F5 | 	or	result1, ##13631488
11668     3A 00 00 FF 
1166c     D0 E4 05 F1 | 	add	objptr, ##29904
11670     F2 FA 61 FC | 	wrlong	result1, objptr
11674     3A 00 00 FF 
11678     D0 E4 85 F1 | 	sub	objptr, ##29904
1167c     F2 FA 01 F6 | 	mov	result1, objptr
11680     55 FA 25 F4 | 	bith	result1, #85
11684     3A 00 00 FF 
11688     80 E4 05 F1 | 	add	objptr, ##29824
1168c     F2 FA 61 FC | 	wrlong	result1, objptr
11690     3A 00 00 FF 
11694     80 E4 85 F1 | 	sub	objptr, ##29824
11698     F2 FA 01 F6 | 	mov	result1, objptr
1169c     00 68 00 FF 
116a0     00 FA 45 F5 | 	or	result1, ##13631488
116a4     3A 00 00 FF 
116a8     A4 E4 05 F1 | 	add	objptr, ##29860
116ac     F2 FA 61 FC | 	wrlong	result1, objptr
116b0     3A 00 00 FF 
116b4     A4 E4 85 F1 | 	sub	objptr, ##29860
116b8     F2 FA 01 F6 | 	mov	result1, objptr
116bc     00 68 00 FF 
116c0     00 FA 45 F5 | 	or	result1, ##13631488
116c4     3A 00 00 FF 
116c8     A8 E4 05 F1 | 	add	objptr, ##29864
116cc     F2 FA 61 FC | 	wrlong	result1, objptr
116d0     3A 00 00 FF 
116d4     A8 E4 85 F1 | 	sub	objptr, ##29864
116d8     F2 FA 01 F6 | 	mov	result1, objptr
116dc     00 68 00 FF 
116e0     00 FA 45 F5 | 	or	result1, ##13631488
116e4     3A 00 00 FF 
116e8     AC E4 05 F1 | 	add	objptr, ##29868
116ec     F2 FA 61 FC | 	wrlong	result1, objptr
116f0     3A 00 00 FF 
116f4     AC E4 85 F1 | 	sub	objptr, ##29868
116f8     F2 FA 01 F6 | 	mov	result1, objptr
116fc     74 FA 25 F4 | 	bith	result1, #116
11700     3A 00 00 FF 
11704     24 E5 05 F1 | 	add	objptr, ##29988
11708     F2 FA 61 FC | 	wrlong	result1, objptr
1170c     3A 00 00 FF 
11710     24 E5 85 F1 | 	sub	objptr, ##29988
11714     F2 FA 01 F6 | 	mov	result1, objptr
11718     18 FA 25 F4 | 	bith	result1, #24
1171c     3A 00 00 FF 
11720     28 E5 05 F1 | 	add	objptr, ##29992
11724     F2 FA 61 FC | 	wrlong	result1, objptr
11728     3A 00 00 FF 
1172c     28 E5 85 F1 | 	sub	objptr, ##29992
11730     F2 FA 01 F6 | 	mov	result1, objptr
11734     00 88 00 FF 
11738     00 FA 45 F5 | 	or	result1, ##17825792
1173c     3A 00 00 FF 
11740     2C E5 05 F1 | 	add	objptr, ##29996
11744     F2 FA 61 FC | 	wrlong	result1, objptr
11748     3A 00 00 FF 
1174c     2C E5 85 F1 | 	sub	objptr, ##29996
11750     F2 FA 01 F6 | 	mov	result1, objptr
11754     00 90 00 FF 
11758     00 FA 45 F5 | 	or	result1, ##18874368
1175c     3A 00 00 FF 
11760     30 E5 05 F1 | 	add	objptr, ##30000
11764     F2 FA 61 FC | 	wrlong	result1, objptr
11768     3A 00 00 FF 
1176c     30 E5 85 F1 | 	sub	objptr, ##30000
11770     F2 FA 01 F6 | 	mov	result1, objptr
11774     00 98 00 FF 
11778     00 FA 45 F5 | 	or	result1, ##19922944
1177c     3A 00 00 FF 
11780     34 E5 05 F1 | 	add	objptr, ##30004
11784     F2 FA 61 FC | 	wrlong	result1, objptr
11788     3A 00 00 FF 
1178c     34 E5 85 F1 | 	sub	objptr, ##30004
11790     F2 FA 01 F6 | 	mov	result1, objptr
11794     00 A0 00 FF 
11798     00 FA 45 F5 | 	or	result1, ##20971520
1179c     3A 00 00 FF 
117a0     38 E5 05 F1 | 	add	objptr, ##30008
117a4     F2 FA 61 FC | 	wrlong	result1, objptr
117a8     3A 00 00 FF 
117ac     38 E5 85 F1 | 	sub	objptr, ##30008
117b0     F2 FA 01 F6 | 	mov	result1, objptr
117b4     00 A8 00 FF 
117b8     00 FA 45 F5 | 	or	result1, ##22020096
117bc     3A 00 00 FF 
117c0     3C E5 05 F1 | 	add	objptr, ##30012
117c4     F2 FA 61 FC | 	wrlong	result1, objptr
117c8     3A 00 00 FF 
117cc     3C E5 85 F1 | 	sub	objptr, ##30012
117d0     F2 FA 01 F6 | 	mov	result1, objptr
117d4     00 B0 00 FF 
117d8     00 FA 45 F5 | 	or	result1, ##23068672
117dc     3A 00 00 FF 
117e0     40 E5 05 F1 | 	add	objptr, ##30016
117e4     F2 FA 61 FC | 	wrlong	result1, objptr
117e8     3A 00 00 FF 
117ec     40 E5 85 F1 | 	sub	objptr, ##30016
117f0     F2 FA 01 F6 | 	mov	result1, objptr
117f4     00 B8 00 FF 
117f8     00 FA 45 F5 | 	or	result1, ##24117248
117fc     3A 00 00 FF 
11800     44 E5 05 F1 | 	add	objptr, ##30020
11804     F2 FA 61 FC | 	wrlong	result1, objptr
11808     3A 00 00 FF 
1180c     44 E5 85 F1 | 	sub	objptr, ##30020
11810     F2 FA 01 F6 | 	mov	result1, objptr
11814     37 FA 25 F4 | 	bith	result1, #55
11818     3A 00 00 FF 
1181c     48 E5 05 F1 | 	add	objptr, ##30024
11820     F2 FA 61 FC | 	wrlong	result1, objptr
11824     3A 00 00 FF 
11828     48 E5 85 F1 | 	sub	objptr, ##30024
1182c     F2 FA 01 F6 | 	mov	result1, objptr
11830     00 C8 00 FF 
11834     00 FA 45 F5 | 	or	result1, ##26214400
11838     3A 00 00 FF 
1183c     4C E5 05 F1 | 	add	objptr, ##30028
11840     F2 FA 61 FC | 	wrlong	result1, objptr
11844     3A 00 00 FF 
11848     4C E5 85 F1 | 	sub	objptr, ##30028
1184c     F2 FA 01 F6 | 	mov	result1, objptr
11850     00 D0 00 FF 
11854     00 FA 45 F5 | 	or	result1, ##27262976
11858     3A 00 00 FF 
1185c     50 E5 05 F1 | 	add	objptr, ##30032
11860     F2 FA 61 FC | 	wrlong	result1, objptr
11864     3A 00 00 FF 
11868     50 E5 85 F1 | 	sub	objptr, ##30032
1186c     F2 FA 01 F6 | 	mov	result1, objptr
11870     00 D8 00 FF 
11874     00 FA 45 F5 | 	or	result1, ##28311552
11878     3A 00 00 FF 
1187c     54 E5 05 F1 | 	add	objptr, ##30036
11880     F2 FA 61 FC | 	wrlong	result1, objptr
11884     3A 00 00 FF 
11888     54 E5 85 F1 | 	sub	objptr, ##30036
1188c     F2 FA 01 F6 | 	mov	result1, objptr
11890     56 FA 25 F4 | 	bith	result1, #86
11894     3A 00 00 FF 
11898     58 E5 05 F1 | 	add	objptr, ##30040
1189c     F2 FA 61 FC | 	wrlong	result1, objptr
118a0     3A 00 00 FF 
118a4     58 E5 85 F1 | 	sub	objptr, ##30040
118a8     F2 FA 01 F6 | 	mov	result1, objptr
118ac     00 E8 00 FF 
118b0     00 FA 45 F5 | 	or	result1, ##30408704
118b4     3C 00 00 FF 
118b8     20 E4 05 F1 | 	add	objptr, ##30752
118bc     F2 FA 61 FC | 	wrlong	result1, objptr
118c0     3C 00 00 FF 
118c4     20 E4 85 F1 | 	sub	objptr, ##30752
118c8     F2 FA 01 F6 | 	mov	result1, objptr
118cc     75 FA 25 F4 | 	bith	result1, #117
118d0     3A 00 00 FF 
118d4     5C E5 05 F1 | 	add	objptr, ##30044
118d8     F2 FA 61 FC | 	wrlong	result1, objptr
118dc     3A 00 00 FF 
118e0     5C E5 85 F1 | 	sub	objptr, ##30044
118e4     F2 FA 01 F6 | 	mov	result1, objptr
118e8     94 FA 25 F4 | 	bith	result1, #148
118ec     3A 00 00 FF 
118f0     70 E5 05 F1 | 	add	objptr, ##30064
118f4     F2 FA 61 FC | 	wrlong	result1, objptr
118f8     3A 00 00 FF 
118fc     70 E5 85 F1 | 	sub	objptr, ##30064
11900     F2 FA 01 F6 | 	mov	result1, objptr
11904     19 FA 25 F4 | 	bith	result1, #25
11908     3A 00 00 FF 
1190c     60 E5 05 F1 | 	add	objptr, ##30048
11910     F2 FA 61 FC | 	wrlong	result1, objptr
11914     3A 00 00 FF 
11918     60 E5 85 F1 | 	sub	objptr, ##30048
1191c     F2 FA 01 F6 | 	mov	result1, objptr
11920     00 08 01 FF 
11924     00 FA 45 F5 | 	or	result1, ##34603008
11928     3A 00 00 FF 
1192c     7C E4 05 F1 | 	add	objptr, ##29820
11930     F2 FA 61 FC | 	wrlong	result1, objptr
11934     3A 00 00 FF 
11938     7C E4 85 F1 | 	sub	objptr, ##29820
1193c     F2 FA 01 F6 | 	mov	result1, objptr
11940     00 10 01 FF 
11944     00 FA 45 F5 | 	or	result1, ##35651584
11948     3A 00 00 FF 
1194c     64 E5 05 F1 | 	add	objptr, ##30052
11950     F2 FA 61 FC | 	wrlong	result1, objptr
11954     3A 00 00 FF 
11958     64 E5 85 F1 | 	sub	objptr, ##30052
1195c     F2 FA 01 F6 | 	mov	result1, objptr
11960     00 18 01 FF 
11964     00 FA 45 F5 | 	or	result1, ##36700160
11968     3A 00 00 FF 
1196c     68 E5 05 F1 | 	add	objptr, ##30056
11970     F2 FA 61 FC | 	wrlong	result1, objptr
11974     3A 00 00 FF 
11978     68 E5 85 F1 | 	sub	objptr, ##30056
1197c     F2 FA 01 F6 | 	mov	result1, objptr
11980     00 20 01 FF 
11984     00 FA 45 F5 | 	or	result1, ##37748736
11988     3A 00 00 FF 
1198c     6C E5 05 F1 | 	add	objptr, ##30060
11990     F2 FA 61 FC | 	wrlong	result1, objptr
11994     3A 00 00 FF 
11998     6C E5 85 F1 | 	sub	objptr, ##30060
1199c     F2 FA 01 F6 | 	mov	result1, objptr
119a0     00 28 01 FF 
119a4     00 FA 45 F5 | 	or	result1, ##38797312
119a8     3A 00 00 FF 
119ac     78 E5 05 F1 | 	add	objptr, ##30072
119b0     F2 FA 61 FC | 	wrlong	result1, objptr
119b4     3A 00 00 FF 
119b8     78 E5 85 F1 | 	sub	objptr, ##30072
119bc     F2 FA 01 F6 | 	mov	result1, objptr
119c0     00 30 01 FF 
119c4     00 FA 45 F5 | 	or	result1, ##39845888
119c8     3A 00 00 FF 
119cc     7C E5 05 F1 | 	add	objptr, ##30076
119d0     F2 FA 61 FC | 	wrlong	result1, objptr
119d4     3A 00 00 FF 
119d8     7C E5 85 F1 | 	sub	objptr, ##30076
119dc     F2 FA 01 F6 | 	mov	result1, objptr
119e0     00 38 01 FF 
119e4     00 FA 45 F5 | 	or	result1, ##40894464
119e8     3A 00 00 FF 
119ec     80 E5 05 F1 | 	add	objptr, ##30080
119f0     F2 FA 61 FC | 	wrlong	result1, objptr
119f4     3A 00 00 FF 
119f8     80 E5 85 F1 | 	sub	objptr, ##30080
119fc     F2 FA 01 F6 | 	mov	result1, objptr
11a00     00 40 01 FF 
11a04     00 FA 45 F5 | 	or	result1, ##41943040
11a08     3A 00 00 FF 
11a0c     84 E5 05 F1 | 	add	objptr, ##30084
11a10     F2 FA 61 FC | 	wrlong	result1, objptr
11a14     3A 00 00 FF 
11a18     84 E5 85 F1 | 	sub	objptr, ##30084
11a1c     F2 FA 01 F6 | 	mov	result1, objptr
11a20     00 48 01 FF 
11a24     00 FA 45 F5 | 	or	result1, ##42991616
11a28     3A 00 00 FF 
11a2c     8C E5 05 F1 | 	add	objptr, ##30092
11a30     F2 FA 61 FC | 	wrlong	result1, objptr
11a34     3A 00 00 FF 
11a38     8C E5 85 F1 | 	sub	objptr, ##30092
11a3c     F2 FA 01 F6 | 	mov	result1, objptr
11a40     00 50 01 FF 
11a44     00 FA 45 F5 | 	or	result1, ##44040192
11a48     3A 00 00 FF 
11a4c     90 E5 05 F1 | 	add	objptr, ##30096
11a50     F2 FA 61 FC | 	wrlong	result1, objptr
11a54     3A 00 00 FF 
11a58     90 E5 85 F1 | 	sub	objptr, ##30096
11a5c     F2 FA 01 F6 | 	mov	result1, objptr
11a60     00 58 01 FF 
11a64     00 FA 45 F5 | 	or	result1, ##45088768
11a68     3A 00 00 FF 
11a6c     90 E4 05 F1 | 	add	objptr, ##29840
11a70     F2 FA 61 FC | 	wrlong	result1, objptr
11a74     3A 00 00 FF 
11a78     90 E4 85 F1 | 	sub	objptr, ##29840
11a7c     F2 FA 01 F6 | 	mov	result1, objptr
11a80     00 60 01 FF 
11a84     00 FA 45 F5 | 	or	result1, ##46137344
11a88     3A 00 00 FF 
11a8c     C0 E4 05 F1 | 	add	objptr, ##29888
11a90     F2 FA 61 FC | 	wrlong	result1, objptr
11a94     3A 00 00 FF 
11a98     C0 E4 85 F1 | 	sub	objptr, ##29888
11a9c     F2 FA 01 F6 | 	mov	result1, objptr
11aa0     00 68 01 FF 
11aa4     00 FA 45 F5 | 	or	result1, ##47185920
11aa8     3A 00 00 FF 
11aac     BC E4 05 F1 | 	add	objptr, ##29884
11ab0     F2 FA 61 FC | 	wrlong	result1, objptr
11ab4     3A 00 00 FF 
11ab8     BC E4 85 F1 | 	sub	objptr, ##29884
11abc     F2 FA 01 F6 | 	mov	result1, objptr
11ac0     00 70 01 FF 
11ac4     00 FA 45 F5 | 	or	result1, ##48234496
11ac8     3A 00 00 FF 
11acc     60 E4 05 F1 | 	add	objptr, ##29792
11ad0     F2 FA 61 FC | 	wrlong	result1, objptr
11ad4     3A 00 00 FF 
11ad8     60 E4 85 F1 | 	sub	objptr, ##29792
11adc     F2 FA 01 F6 | 	mov	result1, objptr
11ae0     00 78 01 FF 
11ae4     00 FA 45 F5 | 	or	result1, ##49283072
11ae8     3A 00 00 FF 
11aec     64 E4 05 F1 | 	add	objptr, ##29796
11af0     F2 FA 61 FC | 	wrlong	result1, objptr
11af4     3A 00 00 FF 
11af8     64 E4 85 F1 | 	sub	objptr, ##29796
11afc     F2 FA 01 F6 | 	mov	result1, objptr
11b00     38 FA 25 F4 | 	bith	result1, #56
11b04     3A 00 00 FF 
11b08     CC E4 05 F1 | 	add	objptr, ##29900
11b0c     F2 FA 61 FC | 	wrlong	result1, objptr
11b10     3A 00 00 FF 
11b14     CC E4 85 F1 | 	sub	objptr, ##29900
11b18     F2 FA 01 F6 | 	mov	result1, objptr
11b1c     00 88 01 FF 
11b20     00 FA 45 F5 | 	or	result1, ##51380224
11b24     3A 00 00 FF 
11b28     74 E5 05 F1 | 	add	objptr, ##30068
11b2c     F2 FA 61 FC | 	wrlong	result1, objptr
11b30     3A 00 00 FF 
11b34     74 E5 85 F1 | 	sub	objptr, ##30068
11b38     F2 FA 01 F6 | 	mov	result1, objptr
11b3c     00 90 01 FF 
11b40     00 FA 45 F5 | 	or	result1, ##52428800
11b44     3A 00 00 FF 
11b48     88 E5 05 F1 | 	add	objptr, ##30088
11b4c     F2 FA 61 FC | 	wrlong	result1, objptr
11b50     3A 00 00 FF 
11b54     88 E5 85 F1 | 	sub	objptr, ##30088
11b58     F2 FA 01 F6 | 	mov	result1, objptr
11b5c     00 98 01 FF 
11b60     00 FA 45 F5 | 	or	result1, ##53477376
11b64     3A 00 00 FF 
11b68     94 E5 05 F1 | 	add	objptr, ##30100
11b6c     F2 FA 61 FC | 	wrlong	result1, objptr
11b70     3A 00 00 FF 
11b74     94 E5 85 F1 | 	sub	objptr, ##30100
11b78     F2 FA 01 F6 | 	mov	result1, objptr
11b7c     00 A0 01 FF 
11b80     00 FA 45 F5 | 	or	result1, ##54525952
11b84     3A 00 00 FF 
11b88     98 E5 05 F1 | 	add	objptr, ##30104
11b8c     F2 FA 61 FC | 	wrlong	result1, objptr
11b90     3A 00 00 FF 
11b94     98 E5 85 F1 | 	sub	objptr, ##30104
11b98     F2 FA 01 F6 | 	mov	result1, objptr
11b9c     00 A8 01 FF 
11ba0     00 FA 45 F5 | 	or	result1, ##55574528
11ba4     3A 00 00 FF 
11ba8     9C E5 05 F1 | 	add	objptr, ##30108
11bac     F2 FA 61 FC | 	wrlong	result1, objptr
11bb0     3A 00 00 FF 
11bb4     9C E5 85 F1 | 	sub	objptr, ##30108
11bb8     F2 FA 01 F6 | 	mov	result1, objptr
11bbc     00 B0 01 FF 
11bc0     00 FA 45 F5 | 	or	result1, ##56623104
11bc4     3A 00 00 FF 
11bc8     A0 E5 05 F1 | 	add	objptr, ##30112
11bcc     F2 FA 61 FC | 	wrlong	result1, objptr
11bd0     3A 00 00 FF 
11bd4     A0 E5 85 F1 | 	sub	objptr, ##30112
11bd8     F2 FA 01 F6 | 	mov	result1, objptr
11bdc     00 B8 01 FF 
11be0     00 FA 45 F5 | 	or	result1, ##57671680
11be4     3A 00 00 FF 
11be8     A4 E5 05 F1 | 	add	objptr, ##30116
11bec     F2 FA 61 FC | 	wrlong	result1, objptr
11bf0     3A 00 00 FF 
11bf4     A4 E5 85 F1 | 	sub	objptr, ##30116
11bf8     F2 FA 01 F6 | 	mov	result1, objptr
11bfc     57 FA 25 F4 | 	bith	result1, #87
11c00     3A 00 00 FF 
11c04     A8 E5 05 F1 | 	add	objptr, ##30120
11c08     F2 FA 61 FC | 	wrlong	result1, objptr
11c0c     3A 00 00 FF 
11c10     A8 E5 85 F1 | 	sub	objptr, ##30120
11c14     F2 FA 01 F6 | 	mov	result1, objptr
11c18     94 FA 25 F4 | 	bith	result1, #148
11c1c     3A 00 00 FF 
11c20     70 E5 05 F1 | 	add	objptr, ##30064
11c24     F2 FA 61 FC | 	wrlong	result1, objptr
11c28     3A 00 00 FF 
11c2c     70 E5 85 F1 | 	sub	objptr, ##30064
11c30     F2 FA 01 F6 | 	mov	result1, objptr
11c34     00 C8 01 FF 
11c38     00 FA 45 F5 | 	or	result1, ##59768832
11c3c     3A 00 00 FF 
11c40     B0 E5 05 F1 | 	add	objptr, ##30128
11c44     F2 FA 61 FC | 	wrlong	result1, objptr
11c48     3A 00 00 FF 
11c4c     B0 E5 85 F1 | 	sub	objptr, ##30128
11c50     F2 FA 01 F6 | 	mov	result1, objptr
11c54     00 D0 01 FF 
11c58     00 FA 45 F5 | 	or	result1, ##60817408
11c5c     3A 00 00 FF 
11c60     AC E5 05 F1 | 	add	objptr, ##30124
11c64     F2 FA 61 FC | 	wrlong	result1, objptr
11c68     3A 00 00 FF 
11c6c     AC E5 85 F1 | 	sub	objptr, ##30124
11c70     F2 FA 01 F6 | 	mov	result1, objptr
11c74     00 D8 01 FF 
11c78     00 FA 45 F5 | 	or	result1, ##61865984
11c7c     3A 00 00 FF 
11c80     C4 E5 05 F1 | 	add	objptr, ##30148
11c84     F2 FA 61 FC | 	wrlong	result1, objptr
11c88     3A 00 00 FF 
11c8c     C4 E5 85 F1 | 	sub	objptr, ##30148
11c90     F2 FA 01 F6 | 	mov	result1, objptr
11c94     76 FA 25 F4 | 	bith	result1, #118
11c98     3A 00 00 FF 
11c9c     C8 E5 05 F1 | 	add	objptr, ##30152
11ca0     F2 FA 61 FC | 	wrlong	result1, objptr
11ca4     3A 00 00 FF 
11ca8     C8 E5 85 F1 | 	sub	objptr, ##30152
11cac     F2 FA 01 F6 | 	mov	result1, objptr
11cb0     00 E8 01 FF 
11cb4     00 FA 45 F5 | 	or	result1, ##63963136
11cb8     3A 00 00 FF 
11cbc     B4 E5 05 F1 | 	add	objptr, ##30132
11cc0     F2 FA 61 FC | 	wrlong	result1, objptr
11cc4     3A 00 00 FF 
11cc8     B4 E5 85 F1 | 	sub	objptr, ##30132
11ccc     F2 FA 01 F6 | 	mov	result1, objptr
11cd0     95 FA 25 F4 | 	bith	result1, #149
11cd4     3A 00 00 FF 
11cd8     B8 E5 05 F1 | 	add	objptr, ##30136
11cdc     F2 FA 61 FC | 	wrlong	result1, objptr
11ce0     3A 00 00 FF 
11ce4     B8 E5 85 F1 | 	sub	objptr, ##30136
11ce8     F2 FA 01 F6 | 	mov	result1, objptr
11cec     B4 FA 25 F4 | 	bith	result1, #180
11cf0     3A 00 00 FF 
11cf4     BC E5 05 F1 | 	add	objptr, ##30140
11cf8     F2 FA 61 FC | 	wrlong	result1, objptr
11cfc     3A 00 00 FF 
11d00     BC E5 85 F1 | 	sub	objptr, ##30140
11d04     F2 FA 01 F6 | 	mov	result1, objptr
11d08     1A FA 25 F4 | 	bith	result1, #26
11d0c     3A 00 00 FF 
11d10     C0 E5 05 F1 | 	add	objptr, ##30144
11d14     F2 FA 61 FC | 	wrlong	result1, objptr
11d18     3A 00 00 FF 
11d1c     C0 E5 85 F1 | 	sub	objptr, ##30144
11d20     F2 FA 01 F6 | 	mov	result1, objptr
11d24     00 08 02 FF 
11d28     00 FA 45 F5 | 	or	result1, ##68157440
11d2c     3A 00 00 FF 
11d30     D0 E5 05 F1 | 	add	objptr, ##30160
11d34     F2 FA 61 FC | 	wrlong	result1, objptr
11d38     3A 00 00 FF 
11d3c     D0 E5 85 F1 | 	sub	objptr, ##30160
11d40     F2 FA 01 F6 | 	mov	result1, objptr
11d44     00 10 02 FF 
11d48     00 FA 45 F5 | 	or	result1, ##69206016
11d4c     3A 00 00 FF 
11d50     CC E5 05 F1 | 	add	objptr, ##30156
11d54     F2 FA 61 FC | 	wrlong	result1, objptr
11d58     3A 00 00 FF 
11d5c     CC E5 85 F1 | 	sub	objptr, ##30156
11d60     F2 FA 01 F6 | 	mov	result1, objptr
11d64     00 18 02 FF 
11d68     00 FA 45 F5 | 	or	result1, ##70254592
11d6c     3A 00 00 FF 
11d70     DC E5 05 F1 | 	add	objptr, ##30172
11d74     F2 FA 61 FC | 	wrlong	result1, objptr
11d78     3A 00 00 FF 
11d7c     DC E5 85 F1 | 	sub	objptr, ##30172
11d80     F2 FA 01 F6 | 	mov	result1, objptr
11d84     00 20 02 FF 
11d88     00 FA 45 F5 | 	or	result1, ##71303168
11d8c     3A 00 00 FF 
11d90     D8 E5 05 F1 | 	add	objptr, ##30168
11d94     F2 FA 61 FC | 	wrlong	result1, objptr
11d98     3A 00 00 FF 
11d9c     D8 E5 85 F1 | 	sub	objptr, ##30168
11da0     F2 FA 01 F6 | 	mov	result1, objptr
11da4     00 28 02 FF 
11da8     00 FA 45 F5 | 	or	result1, ##72351744
11dac     3A 00 00 FF 
11db0     D4 E5 05 F1 | 	add	objptr, ##30164
11db4     F2 FA 61 FC | 	wrlong	result1, objptr
11db8     3A 00 00 FF 
11dbc     D4 E5 85 F1 | 	sub	objptr, ##30164
11dc0     F2 FA 01 F6 | 	mov	result1, objptr
11dc4     00 30 02 FF 
11dc8     00 FA 45 F5 | 	or	result1, ##73400320
11dcc     3A 00 00 FF 
11dd0     E0 E5 05 F1 | 	add	objptr, ##30176
11dd4     F2 FA 61 FC | 	wrlong	result1, objptr
11dd8     3A 00 00 FF 
11ddc     E0 E5 85 F1 | 	sub	objptr, ##30176
11de0     F2 FA 01 F6 | 	mov	result1, objptr
11de4     00 38 02 FF 
11de8     00 FA 45 F5 | 	or	result1, ##74448896
11dec     3A 00 00 FF 
11df0     E4 E5 05 F1 | 	add	objptr, ##30180
11df4     F2 FA 61 FC | 	wrlong	result1, objptr
11df8     3A 00 00 FF 
11dfc     E4 E5 85 F1 | 	sub	objptr, ##30180
11e00     F2 FA 01 F6 | 	mov	result1, objptr
11e04     00 40 02 FF 
11e08     00 FA 45 F5 | 	or	result1, ##75497472
11e0c     3A 00 00 FF 
11e10     78 E4 05 F1 | 	add	objptr, ##29816
11e14     F2 FA 61 FC | 	wrlong	result1, objptr
11e18     3A 00 00 FF 
11e1c     78 E4 85 F1 | 	sub	objptr, ##29816
11e20     F2 FA 01 F6 | 	mov	result1, objptr
11e24     00 48 02 FF 
11e28     00 FA 45 F5 | 	or	result1, ##76546048
11e2c     3A 00 00 FF 
11e30     FC E5 05 F1 | 	add	objptr, ##30204
11e34     F2 FA 61 FC | 	wrlong	result1, objptr
11e38     3A 00 00 FF 
11e3c     FC E5 85 F1 | 	sub	objptr, ##30204
11e40     F2 FA 01 F6 | 	mov	result1, objptr
11e44     00 50 02 FF 
11e48     00 FA 45 F5 | 	or	result1, ##77594624
11e4c     3B 00 00 FF 
11e50     0C E4 05 F1 | 	add	objptr, ##30220
11e54     F2 FA 61 FC | 	wrlong	result1, objptr
11e58     3B 00 00 FF 
11e5c     0C E4 85 F1 | 	sub	objptr, ##30220
11e60     F2 FA 01 F6 | 	mov	result1, objptr
11e64     00 58 02 FF 
11e68     00 FA 45 F5 | 	or	result1, ##78643200
11e6c     3B 00 00 FF 
11e70     10 E4 05 F1 | 	add	objptr, ##30224
11e74     F2 FA 61 FC | 	wrlong	result1, objptr
11e78     3B 00 00 FF 
11e7c     10 E4 85 F1 | 	sub	objptr, ##30224
11e80     F2 FA 01 F6 | 	mov	result1, objptr
11e84     00 60 02 FF 
11e88     00 FA 45 F5 | 	or	result1, ##79691776
11e8c     3B 00 00 FF 
11e90     08 E4 05 F1 | 	add	objptr, ##30216
11e94     F2 FA 61 FC | 	wrlong	result1, objptr
11e98     3B 00 00 FF 
11e9c     08 E4 85 F1 | 	sub	objptr, ##30216
11ea0     F2 FA 01 F6 | 	mov	result1, objptr
11ea4     00 68 02 FF 
11ea8     00 FA 45 F5 | 	or	result1, ##80740352
11eac     3B 00 00 FF 
11eb0     00 E4 05 F1 | 	add	objptr, ##30208
11eb4     F2 FA 61 FC | 	wrlong	result1, objptr
11eb8     3B 00 00 FF 
11ebc     00 E4 85 F1 | 	sub	objptr, ##30208
11ec0     F2 FA 01 F6 | 	mov	result1, objptr
11ec4     00 70 02 FF 
11ec8     00 FA 45 F5 | 	or	result1, ##81788928
11ecc     3B 00 00 FF 
11ed0     04 E4 05 F1 | 	add	objptr, ##30212
11ed4     F2 FA 61 FC | 	wrlong	result1, objptr
11ed8     3B 00 00 FF 
11edc     04 E4 85 F1 | 	sub	objptr, ##30212
11ee0     F2 FA 01 F6 | 	mov	result1, objptr
11ee4     00 78 02 FF 
11ee8     00 FA 45 F5 | 	or	result1, ##82837504
11eec     3B 00 00 FF 
11ef0     14 E4 05 F1 | 	add	objptr, ##30228
11ef4     F2 FA 61 FC | 	wrlong	result1, objptr
11ef8     3B 00 00 FF 
11efc     14 E4 85 F1 | 	sub	objptr, ##30228
11f00     F2 FA 01 F6 | 	mov	result1, objptr
11f04     00 80 02 FF 
11f08     00 FA 45 F5 | 	or	result1, ##83886080
11f0c     3B 00 00 FF 
11f10     18 E4 05 F1 | 	add	objptr, ##30232
11f14     F2 FA 61 FC | 	wrlong	result1, objptr
11f18     3B 00 00 FF 
11f1c     18 E4 85 F1 | 	sub	objptr, ##30232
11f20     F2 FA 01 F6 | 	mov	result1, objptr
11f24     00 88 02 FF 
11f28     00 FA 45 F5 | 	or	result1, ##84934656
11f2c     3B 00 00 FF 
11f30     1C E4 05 F1 | 	add	objptr, ##30236
11f34     F2 FA 61 FC | 	wrlong	result1, objptr
11f38     3B 00 00 FF 
11f3c     1C E4 85 F1 | 	sub	objptr, ##30236
11f40     F2 FA 01 F6 | 	mov	result1, objptr
11f44     00 90 02 FF 
11f48     00 FA 45 F5 | 	or	result1, ##85983232
11f4c     3B 00 00 FF 
11f50     20 E4 05 F1 | 	add	objptr, ##30240
11f54     F2 FA 61 FC | 	wrlong	result1, objptr
11f58     3B 00 00 FF 
11f5c     20 E4 85 F1 | 	sub	objptr, ##30240
11f60     F2 FA 01 F6 | 	mov	result1, objptr
11f64     00 98 02 FF 
11f68     00 FA 45 F5 | 	or	result1, ##87031808
11f6c     3B 00 00 FF 
11f70     24 E4 05 F1 | 	add	objptr, ##30244
11f74     F2 FA 61 FC | 	wrlong	result1, objptr
11f78     3B 00 00 FF 
11f7c     24 E4 85 F1 | 	sub	objptr, ##30244
11f80     F2 FA 01 F6 | 	mov	result1, objptr
11f84     00 A0 02 FF 
11f88     00 FA 45 F5 | 	or	result1, ##88080384
11f8c     3A 00 00 FF 
11f90     E8 E5 05 F1 | 	add	objptr, ##30184
11f94     F2 FA 61 FC | 	wrlong	result1, objptr
11f98     3A 00 00 FF 
11f9c     E8 E5 85 F1 | 	sub	objptr, ##30184
11fa0                 | _init_commands_ret
11fa0     2D 00 64 FD | 	ret
11fa4                 | 
11fa4                 | ' 
11fa4                 | ' ''--------------------------------Error strings -------------------------------------
11fa4                 | ' 
11fa4                 | ' sub init_error_strings
11fa4                 | _init_error_strings
11fa4     27 01 00 FF 
11fa8     79 00 06 F6 | 	mov	_var01, ##@LR__4356
11fac     3C 00 00 FF 
11fb0     40 E4 05 F1 | 	add	objptr, ##30784
11fb4     F2 00 62 FC | 	wrlong	_var01, objptr
11fb8     27 01 00 FF 
11fbc     7A 00 06 F6 | 	mov	_var01, ##@LR__4357
11fc0     04 E4 05 F1 | 	add	objptr, #4
11fc4     F2 00 62 FC | 	wrlong	_var01, objptr
11fc8     27 01 00 FF 
11fcc     9F 00 06 F6 | 	mov	_var01, ##@LR__4358
11fd0     04 E4 05 F1 | 	add	objptr, #4
11fd4     F2 00 62 FC | 	wrlong	_var01, objptr
11fd8     27 01 00 FF 
11fdc     C0 00 06 F6 | 	mov	_var01, ##@LR__4359
11fe0     04 E4 05 F1 | 	add	objptr, #4
11fe4     F2 00 62 FC | 	wrlong	_var01, objptr
11fe8     27 01 00 FF 
11fec     DA 00 06 F6 | 	mov	_var01, ##@LR__4360
11ff0     04 E4 05 F1 | 	add	objptr, #4
11ff4     F2 00 62 FC | 	wrlong	_var01, objptr
11ff8     27 01 00 FF 
11ffc     F6 00 06 F6 | 	mov	_var01, ##@LR__4361
12000     04 E4 05 F1 | 	add	objptr, #4
12004     F2 00 62 FC | 	wrlong	_var01, objptr
12008     27 01 00 FF 
1200c     18 01 06 F6 | 	mov	_var01, ##@LR__4362
12010     04 E4 05 F1 | 	add	objptr, #4
12014     F2 00 62 FC | 	wrlong	_var01, objptr
12018     27 01 00 FF 
1201c     46 01 06 F6 | 	mov	_var01, ##@LR__4363
12020     04 E4 05 F1 | 	add	objptr, #4
12024     F2 00 62 FC | 	wrlong	_var01, objptr
12028     27 01 00 FF 
1202c     71 01 06 F6 | 	mov	_var01, ##@LR__4364
12030     04 E4 05 F1 | 	add	objptr, #4
12034     F2 00 62 FC | 	wrlong	_var01, objptr
12038     27 01 00 FF 
1203c     8A 01 06 F6 | 	mov	_var01, ##@LR__4365
12040     04 E4 05 F1 | 	add	objptr, #4
12044     F2 00 62 FC | 	wrlong	_var01, objptr
12048     27 01 00 FF 
1204c     AB 01 06 F6 | 	mov	_var01, ##@LR__4366
12050     04 E4 05 F1 | 	add	objptr, #4
12054     F2 00 62 FC | 	wrlong	_var01, objptr
12058     27 01 00 FF 
1205c     C2 01 06 F6 | 	mov	_var01, ##@LR__4367
12060     04 E4 05 F1 | 	add	objptr, #4
12064     F2 00 62 FC | 	wrlong	_var01, objptr
12068     27 01 00 FF 
1206c     E0 01 06 F6 | 	mov	_var01, ##@LR__4368
12070     04 E4 05 F1 | 	add	objptr, #4
12074     F2 00 62 FC | 	wrlong	_var01, objptr
12078     28 01 00 FF 
1207c     04 00 06 F6 | 	mov	_var01, ##@LR__4369
12080     04 E4 05 F1 | 	add	objptr, #4
12084     F2 00 62 FC | 	wrlong	_var01, objptr
12088     28 01 00 FF 
1208c     2B 00 06 F6 | 	mov	_var01, ##@LR__4370
12090     04 E4 05 F1 | 	add	objptr, #4
12094     F2 00 62 FC | 	wrlong	_var01, objptr
12098     28 01 00 FF 
1209c     47 00 06 F6 | 	mov	_var01, ##@LR__4371
120a0     04 E4 05 F1 | 	add	objptr, #4
120a4     F2 00 62 FC | 	wrlong	_var01, objptr
120a8     28 01 00 FF 
120ac     58 00 06 F6 | 	mov	_var01, ##@LR__4372
120b0     04 E4 05 F1 | 	add	objptr, #4
120b4     F2 00 62 FC | 	wrlong	_var01, objptr
120b8     28 01 00 FF 
120bc     68 00 06 F6 | 	mov	_var01, ##@LR__4373
120c0     04 E4 05 F1 | 	add	objptr, #4
120c4     F2 00 62 FC | 	wrlong	_var01, objptr
120c8     28 01 00 FF 
120cc     83 00 06 F6 | 	mov	_var01, ##@LR__4374
120d0     04 E4 05 F1 | 	add	objptr, #4
120d4     F2 00 62 FC | 	wrlong	_var01, objptr
120d8     28 01 00 FF 
120dc     95 00 06 F6 | 	mov	_var01, ##@LR__4375
120e0     04 E4 05 F1 | 	add	objptr, #4
120e4     F2 00 62 FC | 	wrlong	_var01, objptr
120e8     28 01 00 FF 
120ec     AD 00 06 F6 | 	mov	_var01, ##@LR__4376
120f0     04 E4 05 F1 | 	add	objptr, #4
120f4     F2 00 62 FC | 	wrlong	_var01, objptr
120f8     28 01 00 FF 
120fc     C1 00 06 F6 | 	mov	_var01, ##@LR__4377
12100     04 E4 05 F1 | 	add	objptr, #4
12104     F2 00 62 FC | 	wrlong	_var01, objptr
12108     28 01 00 FF 
1210c     D1 00 06 F6 | 	mov	_var01, ##@LR__4378
12110     04 E4 05 F1 | 	add	objptr, #4
12114     F2 00 62 FC | 	wrlong	_var01, objptr
12118     28 01 00 FF 
1211c     EE 00 06 F6 | 	mov	_var01, ##@LR__4379
12120     04 E4 05 F1 | 	add	objptr, #4
12124     F2 00 62 FC | 	wrlong	_var01, objptr
12128     28 01 00 FF 
1212c     FF 00 06 F6 | 	mov	_var01, ##@LR__4380
12130     04 E4 05 F1 | 	add	objptr, #4
12134     F2 00 62 FC | 	wrlong	_var01, objptr
12138     28 01 00 FF 
1213c     10 01 06 F6 | 	mov	_var01, ##@LR__4381
12140     04 E4 05 F1 | 	add	objptr, #4
12144     F2 00 62 FC | 	wrlong	_var01, objptr
12148     28 01 00 FF 
1214c     3B 01 06 F6 | 	mov	_var01, ##@LR__4382
12150     04 E4 05 F1 | 	add	objptr, #4
12154     F2 00 62 FC | 	wrlong	_var01, objptr
12158     28 01 00 FF 
1215c     57 01 06 F6 | 	mov	_var01, ##@LR__4383
12160     04 E4 05 F1 | 	add	objptr, #4
12164     F2 00 62 FC | 	wrlong	_var01, objptr
12168     28 01 00 FF 
1216c     6D 01 06 F6 | 	mov	_var01, ##@LR__4384
12170     04 E4 05 F1 | 	add	objptr, #4
12174     F2 00 62 FC | 	wrlong	_var01, objptr
12178     28 01 00 FF 
1217c     7A 01 06 F6 | 	mov	_var01, ##@LR__4385
12180     04 E4 05 F1 | 	add	objptr, #4
12184     F2 00 62 FC | 	wrlong	_var01, objptr
12188     28 01 00 FF 
1218c     8C 01 06 F6 | 	mov	_var01, ##@LR__4386
12190     04 E4 05 F1 | 	add	objptr, #4
12194     F2 00 62 FC | 	wrlong	_var01, objptr
12198     28 01 00 FF 
1219c     9D 01 06 F6 | 	mov	_var01, ##@LR__4387
121a0     04 E4 05 F1 | 	add	objptr, #4
121a4     F2 00 62 FC | 	wrlong	_var01, objptr
121a8     28 01 00 FF 
121ac     B9 01 06 F6 | 	mov	_var01, ##@LR__4388
121b0     04 E4 05 F1 | 	add	objptr, #4
121b4     F2 00 62 FC | 	wrlong	_var01, objptr
121b8     28 01 00 FF 
121bc     CA 01 06 F6 | 	mov	_var01, ##@LR__4389
121c0     04 E4 05 F1 | 	add	objptr, #4
121c4     F2 00 62 FC | 	wrlong	_var01, objptr
121c8     28 01 00 FF 
121cc     D9 01 06 F6 | 	mov	_var01, ##@LR__4390
121d0     04 E4 05 F1 | 	add	objptr, #4
121d4     F2 00 62 FC | 	wrlong	_var01, objptr
121d8     28 01 00 FF 
121dc     F4 01 06 F6 | 	mov	_var01, ##@LR__4391
121e0     04 E4 05 F1 | 	add	objptr, #4
121e4     F2 00 62 FC | 	wrlong	_var01, objptr
121e8     29 01 00 FF 
121ec     28 00 06 F6 | 	mov	_var01, ##@LR__4392
121f0     04 E4 05 F1 | 	add	objptr, #4
121f4     F2 00 62 FC | 	wrlong	_var01, objptr
121f8     29 01 00 FF 
121fc     41 00 06 F6 | 	mov	_var01, ##@LR__4393
12200     04 E4 05 F1 | 	add	objptr, #4
12204     F2 00 62 FC | 	wrlong	_var01, objptr
12208     29 01 00 FF 
1220c     5D 00 06 F6 | 	mov	_var01, ##@LR__4394
12210     04 E4 05 F1 | 	add	objptr, #4
12214     F2 00 62 FC | 	wrlong	_var01, objptr
12218     29 01 00 FF 
1221c     7B 00 06 F6 | 	mov	_var01, ##@LR__4395
12220     04 E4 05 F1 | 	add	objptr, #4
12224     F2 00 62 FC | 	wrlong	_var01, objptr
12228     29 01 00 FF 
1222c     94 00 06 F6 | 	mov	_var01, ##@LR__4396
12230     04 E4 05 F1 | 	add	objptr, #4
12234     F2 00 62 FC | 	wrlong	_var01, objptr
12238     29 01 00 FF 
1223c     B3 00 06 F6 | 	mov	_var01, ##@LR__4397
12240     04 E4 05 F1 | 	add	objptr, #4
12244     F2 00 62 FC | 	wrlong	_var01, objptr
12248     29 01 00 FF 
1224c     C2 00 06 F6 | 	mov	_var01, ##@LR__4398
12250     04 E4 05 F1 | 	add	objptr, #4
12254     F2 00 62 FC | 	wrlong	_var01, objptr
12258     29 01 00 FF 
1225c     F0 00 06 F6 | 	mov	_var01, ##@LR__4399
12260     04 E4 05 F1 | 	add	objptr, #4
12264     F2 00 62 FC | 	wrlong	_var01, objptr
12268     29 01 00 FF 
1226c     FE 00 06 F6 | 	mov	_var01, ##@LR__4400
12270     04 E4 05 F1 | 	add	objptr, #4
12274     F2 00 62 FC | 	wrlong	_var01, objptr
12278     29 01 00 FF 
1227c     13 01 06 F6 | 	mov	_var01, ##@LR__4401
12280     04 E4 05 F1 | 	add	objptr, #4
12284     F2 00 62 FC | 	wrlong	_var01, objptr
12288     29 01 00 FF 
1228c     37 01 06 F6 | 	mov	_var01, ##@LR__4402
12290     04 E4 05 F1 | 	add	objptr, #4
12294     F2 00 62 FC | 	wrlong	_var01, objptr
12298     29 01 00 FF 
1229c     4E 01 06 F6 | 	mov	_var01, ##@LR__4403
122a0     04 E4 05 F1 | 	add	objptr, #4
122a4     F2 00 62 FC | 	wrlong	_var01, objptr
122a8     29 01 00 FF 
122ac     61 01 06 F6 | 	mov	_var01, ##@LR__4404
122b0     04 E4 05 F1 | 	add	objptr, #4
122b4     F2 00 62 FC | 	wrlong	_var01, objptr
122b8     3C 00 00 FF 
122bc     00 E5 85 F1 | 	sub	objptr, ##30976
122c0                 | _init_error_strings_ret
122c0     2D 00 64 FD | 	ret
122c4                 | 
122c4                 | '         
122c4                 | ' sub printerror(err as integer)
122c4                 | _printerror
122c4     01 4A 05 F6 | 	mov	COUNT_, #1
122c8     A8 00 A0 FD | 	call	#pushregs_
122cc     09 1F 02 F6 | 	mov	local01, arg01
122d0     29 01 00 FF 
122d4     78 13 06 F6 | 	mov	arg01, ##@LR__4405
122d8     C0 24 B0 FD | 	call	#_hg010b_spin2_write
122dc     0F 13 02 F6 | 	mov	arg01, local01
122e0     B8 26 B0 FD | 	call	#_hg010b_spin2_inttostr
122e4     FD 12 02 F6 | 	mov	arg01, result1
122e8     B0 24 B0 FD | 	call	#_hg010b_spin2_write
122ec     29 01 00 FF 
122f0     7F 13 06 F6 | 	mov	arg01, ##@LR__4406
122f4     A4 24 B0 FD | 	call	#_hg010b_spin2_write
122f8     02 1E 66 F0 | 	shl	local01, #2
122fc     3C 00 00 FF 
12300     40 E4 05 F1 | 	add	objptr, ##30784
12304     F2 1E 02 F1 | 	add	local01, objptr
12308     0F 13 02 FB | 	rdlong	arg01, local01
1230c     3C 00 00 FF 
12310     40 E4 85 F1 | 	sub	objptr, ##30784
12314                 | ' 
12314                 | ' write(text)
12314     84 24 B0 FD | 	call	#_hg010b_spin2_write
12318                 | ' crlf
12318     E0 25 B0 FD | 	call	#_hg010b_spin2_crlf
1231c     A7 F0 03 F6 | 	mov	ptra, fp
12320     B2 00 A0 FD | 	call	#popregs_
12324                 | _printerror_ret
12324     2D 00 64 FD | 	ret
12328                 | 
12328                 | ' 
12328                 | ' '' ------------------------------- Hardware start/stop/initialization 
12328                 | ' 
12328                 | ' sub startpsram
12328                 | _startpsram
12328     00 12 06 F6 | 	mov	arg01, #0
1232c     0A 14 C6 F9 | 	decod	arg02, #10
12330     0B 16 06 F6 | 	mov	arg03, #11
12334     07 18 06 F6 | 	mov	arg04, #7
12338     0B 00 00 FF 
1233c     C0 E4 05 F1 | 	add	objptr, ##5824
12340     64 27 B0 FD | 	call	#_psram_spin2_startx
12344     22 00 00 FF 
12348     0C E5 05 F1 | 	add	objptr, ##17676
1234c     F2 FA 61 FC | 	wrlong	result1, objptr
12350                 | '     return $7FF00 + cog*12
12350     0C E4 05 F1 | 	add	objptr, #12
12354     FF 03 80 FF 
12358     F2 00 6A FC | 	wrlong	##524032, objptr
1235c     2D 00 00 FF 
12360     D8 E5 85 F1 | 	sub	objptr, ##23512
12364                 | _startpsram_ret
12364     2D 00 64 FD | 	ret
12368                 | 
12368                 | ' 
12368                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
12368                 | _startvideo
12368     01 4A 05 F6 | 	mov	COUNT_, #1
1236c     A8 00 A0 FD | 	call	#pushregs_
12370     2D 00 00 FF 
12374     D8 E5 05 F1 | 	add	objptr, ##23512
12378     F2 18 02 FB | 	rdlong	arg04, objptr
1237c     2D 00 00 FF 
12380     D8 E5 85 F1 | 	sub	objptr, ##23512
12384     0A 13 02 F6 | 	mov	arg01, arg02
12388     0C 15 02 F6 | 	mov	arg02, arg04
1238c     2C 0F B0 FD | 	call	#_hg010b_spin2_start
12390     2D 00 00 FF 
12394     C4 E5 05 F1 | 	add	objptr, ##23492
12398     F2 FA 61 FC | 	wrlong	result1, objptr
1239c                 | ' 
1239c                 | ' videocog=v.start(pin,mbox)
1239c                 | ' 
1239c                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
1239c     00 1E 06 F6 | 	mov	local01, #0
123a0     22 00 00 FF 
123a4     04 E5 85 F1 | 	sub	objptr, ##17668
123a8                 | LR__1490
123a8     0F 13 02 F6 | 	mov	arg01, local01
123ac     00 28 00 FF 
123b0     00 14 06 F6 | 	mov	arg02, ##5242880
123b4     48 2B B0 FD | 	call	#_psram_spin2_setQos
123b8     01 1E 06 F1 | 	add	local01, #1
123bc     08 1E 56 F2 | 	cmps	local01, #8 wc
123c0     E4 FF 9F CD |  if_b	jmp	#LR__1490
123c4     22 00 00 FF 
123c8     04 E5 05 F1 | 	add	objptr, ##17668
123cc     F2 12 02 FB | 	rdlong	arg01, objptr
123d0     7A 00 02 FF 
123d4     00 14 06 F6 | 	mov	arg02, ##67171328
123d8     22 00 00 FF 
123dc     04 E5 85 F1 | 	sub	objptr, ##17668
123e0     1C 2B B0 FD | 	call	#_psram_spin2_setQos
123e4     0B 00 00 FF 
123e8     C0 E4 85 F1 | 	sub	objptr, ##5824
123ec                 | ' psram.setQoS(videocog, $0400f400) 
123ec                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
123ec     F2 14 02 F6 | 	mov	arg02, objptr
123f0     00 A8 02 FF 
123f4     00 14 46 F5 | 	or	arg02, ##89128960
123f8     00 16 06 F6 | 	mov	arg03, #0
123fc     00 18 06 F6 | 	mov	arg04, #0
12400     00 12 06 F6 | 	mov	arg01, #0
12404     60 3E B0 FD | 	call	#__system___basic_open
12408                 | ' return videocog
12408     2D 00 00 FF 
1240c     C4 E5 05 F1 | 	add	objptr, ##23492
12410     F2 FA 01 FB | 	rdlong	result1, objptr
12414     2D 00 00 FF 
12418     C4 E5 85 F1 | 	sub	objptr, ##23492
1241c     A7 F0 03 F6 | 	mov	ptra, fp
12420     B2 00 A0 FD | 	call	#popregs_
12424                 | _startvideo_ret
12424     2D 00 64 FD | 	ret
12428                 | 
12428                 | ' 
12428                 | ' function pspeek(adr as ulong) as ubyte
12428                 | _pspeek
12428     00 4A 05 F6 | 	mov	COUNT_, #0
1242c     A8 00 A0 FD | 	call	#pushregs_
12430     0C F0 07 F1 | 	add	ptra, #12
12434     04 4E 05 F1 | 	add	fp, #4
12438     A7 12 62 FC | 	wrlong	arg01, fp
1243c     04 4E 05 F1 | 	add	fp, #4
12440     A7 12 02 F6 | 	mov	arg01, fp
12444     04 4E 85 F1 | 	sub	fp, #4
12448     A7 14 02 FB | 	rdlong	arg02, fp
1244c     04 4E 85 F1 | 	sub	fp, #4
12450     01 16 06 F6 | 	mov	arg03, #1
12454     0B 00 00 FF 
12458     C0 E4 05 F1 | 	add	objptr, ##5824
1245c     74 28 B0 FD | 	call	#_psram_spin2_read1
12460     0B 00 00 FF 
12464     C0 E4 85 F1 | 	sub	objptr, ##5824
12468                 | ' psram.read1(varptr(res),adr,1)
12468                 | ' return res
12468     08 4E 05 F1 | 	add	fp, #8
1246c     A7 FA C1 FA | 	rdbyte	result1, fp
12470     08 4E 85 F1 | 	sub	fp, #8
12474     A7 F0 03 F6 | 	mov	ptra, fp
12478     B2 00 A0 FD | 	call	#popregs_
1247c                 | _pspeek_ret
1247c     2D 00 64 FD | 	ret
12480                 | 
12480                 | ' 
12480                 | ' function pslpeek(adr as ulong) as ulong
12480                 | _pslpeek
12480     00 4A 05 F6 | 	mov	COUNT_, #0
12484     A8 00 A0 FD | 	call	#pushregs_
12488     0C F0 07 F1 | 	add	ptra, #12
1248c     04 4E 05 F1 | 	add	fp, #4
12490     A7 12 62 FC | 	wrlong	arg01, fp
12494     04 4E 05 F1 | 	add	fp, #4
12498     A7 12 02 F6 | 	mov	arg01, fp
1249c     04 4E 85 F1 | 	sub	fp, #4
124a0     A7 14 02 FB | 	rdlong	arg02, fp
124a4     04 4E 85 F1 | 	sub	fp, #4
124a8     04 16 06 F6 | 	mov	arg03, #4
124ac     0B 00 00 FF 
124b0     C0 E4 05 F1 | 	add	objptr, ##5824
124b4     1C 28 B0 FD | 	call	#_psram_spin2_read1
124b8     0B 00 00 FF 
124bc     C0 E4 85 F1 | 	sub	objptr, ##5824
124c0                 | ' psram.read1(varptr(res),adr,4)
124c0                 | ' return res
124c0     08 4E 05 F1 | 	add	fp, #8
124c4     A7 FA 01 FB | 	rdlong	result1, fp
124c8     08 4E 85 F1 | 	sub	fp, #8
124cc     A7 F0 03 F6 | 	mov	ptra, fp
124d0     B2 00 A0 FD | 	call	#popregs_
124d4                 | _pslpeek_ret
124d4     2D 00 64 FD | 	ret
124d8                 | 
124d8                 | ' 
124d8                 | ' '' ------------------------------- USB keyboard scan to char translator
124d8                 | ' 
124d8                 | ' function scantochar(key)
124d8                 | _scantochar
124d8                 | ' 
124d8                 | ' select case (key shr 8) and 255
124d8     09 01 02 F6 | 	mov	_var01, arg01
124dc     08 00 C6 F0 | 	sar	_var01, #8
124e0     FF 00 0E F5 | 	and	_var01, #255 wz
124e4     24 00 90 AD |  if_e	jmp	#LR__1500
124e8     02 00 0E F2 | 	cmp	_var01, #2 wz
124ec     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
124f0     30 00 90 AD |  if_e	jmp	#LR__1501
124f4     40 00 0E F2 | 	cmp	_var01, #64 wz
124f8     44 00 90 AD |  if_e	jmp	#LR__1502
124fc     42 00 0E F2 | 	cmp	_var01, #66 wz
12500     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
12504     70 00 90 5D |  if_ne	jmp	#LR__1504
12508     50 00 90 FD | 	jmp	#LR__1503
1250c                 | LR__1500
1250c     09 FB 01 F6 | 	mov	result1, arg01
12510     7F FA 05 F5 | 	and	result1, #127
12514     02 FA 65 F0 | 	shl	result1, #2
12518     F5 FA 01 F1 | 	add	result1, ptr__dat__
1251c     FD FA C1 FA | 	rdbyte	result1, result1
12520     54 00 90 FD | 	jmp	#_scantochar_ret
12524                 | LR__1501
12524     09 FB 01 F6 | 	mov	result1, arg01
12528     7F FA 05 F5 | 	and	result1, #127
1252c     02 FA 65 F0 | 	shl	result1, #2
12530     01 FA 05 F1 | 	add	result1, #1
12534     F5 FA 01 F1 | 	add	result1, ptr__dat__
12538     FD FA C1 FA | 	rdbyte	result1, result1
1253c     38 00 90 FD | 	jmp	#_scantochar_ret
12540                 | LR__1502
12540     09 FB 01 F6 | 	mov	result1, arg01
12544     7F FA 05 F5 | 	and	result1, #127
12548     02 FA 65 F0 | 	shl	result1, #2
1254c     02 FA 05 F1 | 	add	result1, #2
12550     F5 FA 01 F1 | 	add	result1, ptr__dat__
12554     FD FA C1 FA | 	rdbyte	result1, result1
12558     1C 00 90 FD | 	jmp	#_scantochar_ret
1255c                 | LR__1503
1255c     09 FB 01 F6 | 	mov	result1, arg01
12560     7F FA 05 F5 | 	and	result1, #127
12564     02 FA 65 F0 | 	shl	result1, #2
12568     03 FA 05 F1 | 	add	result1, #3
1256c     F5 FA 01 F1 | 	add	result1, ptr__dat__
12570     FD FA C1 FA | 	rdbyte	result1, result1
12574     00 00 90 FD | 	jmp	#_scantochar_ret
12578                 | LR__1504
12578                 | _scantochar_ret
12578     2D 00 64 FD | 	ret
1257c                 | 
1257c                 | _program
1257c     0B 4A 05 F6 | 	mov	COUNT_, #11
12580     A8 00 A0 FD | 	call	#pushregs_
12584     A0 FD BF FD | 	call	#_startpsram
12588     40 12 06 F6 | 	mov	arg01, #64
1258c     00 14 06 F6 | 	mov	arg02, #0
12590     00 16 06 F6 | 	mov	arg03, #0
12594     D0 FD BF FD | 	call	#_startvideo
12598     00 12 06 F6 | 	mov	arg01, #0
1259c     00 14 06 F6 | 	mov	arg02, #0
125a0     00 16 06 F6 | 	mov	arg03, #0
125a4     0B 00 00 FF 
125a8     C0 E4 05 F1 | 	add	objptr, ##5824
125ac     64 2C B0 FD | 	call	#_Audio093b_8_sc_spin2_start
125b0     FE 1C 02 F6 | 	mov	arg06, result2
125b4     22 00 00 FF 
125b8     00 E5 05 F1 | 	add	objptr, ##17664
125bc     F2 FA 61 FC | 	wrlong	result1, objptr
125c0     14 E4 05 F1 | 	add	objptr, #20
125c4     F2 1C 62 FC | 	wrlong	arg06, objptr
125c8     2D 00 00 FF 
125cc     D4 E5 85 F1 | 	sub	objptr, ##23508
125d0     32 12 06 F6 | 	mov	arg01, #50
125d4     DC 34 B0 FD | 	call	#__system___waitms
125d8     2D 00 00 FF 
125dc     D4 E5 05 F1 | 	add	objptr, ##23508
125e0     F2 12 02 FB | 	rdlong	arg01, objptr
125e4     2D 00 00 FF 
125e8     D4 E5 85 F1 | 	sub	objptr, ##23508
125ec     14 12 06 F1 | 	add	arg01, #20
125f0     20 00 80 FF 
125f4     09 01 58 FC | 	wrword	##16384, arg01
125f8     0C 2A B0 FD | 	call	#_usbnew_spin2_start
125fc     2D 00 00 FF 
12600     C8 E5 05 F1 | 	add	objptr, ##23496
12604     F2 FA 61 FC | 	wrlong	result1, objptr
12608                 | '   mouse_limits[0] := xlim
12608     0F 00 00 FF 
1260c     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
12610     01 00 80 FF 
12614     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
12618                 | '   mouse_limits[1] := ylim
12618     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1261c     01 00 80 FF 
12620     FB 7E 68 FC | 	wrlong	##575, ptr__usbnew_spin2_dat__
12624     2D 00 00 FF 
12628     BB E4 85 F1 | 	sub	objptr, ##23227
1262c     F2 12 02 F6 | 	mov	arg01, objptr
12630     0D E5 85 F1 | 	sub	objptr, #269
12634     C4 12 06 F1 | 	add	arg01, #196
12638                 | '   mouse_outptr := ptr
12638     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1263c     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
12640     0F 00 00 FF 
12644     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
12648     07 00 00 FF 
1264c     72 EB 05 F1 | 	add	ptr__dat__, ##3954
12650     F5 14 02 F6 | 	mov	arg02, ptr__dat__
12654     07 00 00 FF 
12658     72 EB 85 F1 | 	sub	ptr__dat__, ##3954
1265c     10 12 06 F6 | 	mov	arg01, #16
12660     50 11 B0 FD | 	call	#_hg010b_spin2_setspriteptr
12664     10 12 06 F6 | 	mov	arg01, #16
12668     20 14 06 F6 | 	mov	arg02, #32
1266c     20 16 06 F6 | 	mov	arg03, #32
12670     B4 11 B0 FD | 	call	#_hg010b_spin2_setspritesize
12674     09 12 C6 F9 | 	decod	arg01, #9
12678     20 15 06 F6 | 	mov	arg02, #288
1267c     44 2A B0 FD | 	call	#_usbnew_spin2_mouse_move
12680     F2 1C 02 F6 | 	mov	arg06, objptr
12684     50 00 00 FF 
12688     AC E5 05 F1 | 	add	objptr, ##41388
1268c     F2 1A 02 F6 | 	mov	arg05, objptr
12690     0D 1D 62 FC | 	wrlong	arg06, arg05
12694     04 1A 06 F1 | 	add	arg05, #4
12698     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
1269c     EF 14 02 F6 | 	mov	arg02, entryptr__
126a0     F2 1E 02 F6 | 	mov	local01, objptr
126a4     1E FA 05 F6 | 	mov	result1, #30
126a8     28 1E 62 FD | 	setq	local01
126ac     0A FB F1 FC | 	coginit	result1, arg02 wc
126b0     01 FA 65 C6 |  if_b	neg	result1, #1
126b4     04 E4 85 F1 | 	sub	objptr, #4
126b8     F2 FA 61 FC | 	wrlong	result1, objptr
126bc     01 00 00 FF 
126c0     90 E4 05 F1 | 	add	objptr, ##656
126c4     F2 00 68 FC | 	wrlong	#0, objptr
126c8     24 00 00 FF 
126cc     40 E4 85 F1 | 	sub	objptr, ##18496
126d0     F2 04 68 FC | 	wrlong	#2, objptr
126d4     04 E4 05 F1 | 	add	objptr, #4
126d8     F2 26 69 FC | 	wrlong	#147, objptr
126dc     04 E4 05 F1 | 	add	objptr, #4
126e0     F2 34 69 FC | 	wrlong	#154, objptr
126e4     04 E4 05 F1 | 	add	objptr, #4
126e8     F2 08 68 FC | 	wrlong	#4, objptr
126ec     04 E4 85 F1 | 	sub	objptr, #4
126f0     F2 1C 02 FB | 	rdlong	arg06, objptr
126f4     14 E4 85 F1 | 	sub	objptr, #20
126f8     F2 1C 62 FC | 	wrlong	arg06, objptr
126fc     04 E4 05 F1 | 	add	objptr, #4
12700     F2 00 68 FC | 	wrlong	#0, objptr
12704     04 E4 05 F1 | 	add	objptr, #4
12708     F2 00 68 FC | 	wrlong	#0, objptr
1270c     22 00 00 FF 
12710     B0 E5 05 F1 | 	add	objptr, ##17840
12714     F2 02 68 FC | 	wrlong	#1, objptr
12718     14 00 00 FF 
1271c     7C E5 85 F1 | 	sub	objptr, ##10620
12720     F2 18 68 FC | 	wrlong	#12, objptr
12724     3C 00 00 FF 
12728     28 E4 85 F1 | 	sub	objptr, ##30760
1272c     18 ED BF FD | 	call	#_init_commands
12730     70 F8 BF FD | 	call	#_init_error_strings
12734     CC 79 BF FD | 	call	#_do_new
12738     2E 00 00 FF 
1273c     00 E4 05 F1 | 	add	objptr, ##23552
12740     F2 12 02 FB | 	rdlong	arg01, objptr
12744     04 E4 85 F1 | 	sub	objptr, #4
12748     F2 14 02 FB | 	rdlong	arg02, objptr
1274c     2D 00 00 FF 
12750     FC E5 85 F1 | 	sub	objptr, ##23548
12754     88 1D B0 FD | 	call	#_hg010b_spin2_cls
12758     2E 00 00 FF 
1275c     04 E4 05 F1 | 	add	objptr, ##23556
12760     F2 12 02 FB | 	rdlong	arg01, objptr
12764     2E 00 00 FF 
12768     04 E4 85 F1 | 	sub	objptr, ##23556
1276c     88 1C B0 FD | 	call	#_hg010b_spin2_setfontfamily
12770                 | ' 
12770                 | ' leading_spaces:=amount
12770     01 00 00 FF 
12774     B2 E4 05 F1 | 	add	objptr, ##690
12778     F2 04 68 FC | 	wrlong	#2, objptr
1277c     01 00 00 FF 
12780     B2 E4 85 F1 | 	sub	objptr, ##690
12784     29 01 00 FF 
12788     82 21 06 F6 | 	mov	local02, ##@LR__4407
1278c     3D 12 06 F6 | 	mov	arg01, #61
12790     3C 14 06 F6 | 	mov	arg02, #60
12794     3B 16 06 F6 | 	mov	arg03, #59
12798     3A 18 06 F6 | 	mov	arg04, #58
1279c     68 76 B0 FD | 	call	#__system___vfs_open_sdcardx
127a0     FD 14 02 F6 | 	mov	arg02, result1
127a4     10 13 02 F6 | 	mov	arg01, local02
127a8     E0 33 B0 FD | 	call	#__system___mount
127ac     29 01 00 FF 
127b0     86 13 06 F6 | 	mov	arg01, ##@LR__4408
127b4     94 36 B0 FD | 	call	#__system___chdir
127b8     29 01 00 FF 
127bc     8E 21 06 F6 | 	mov	local02, ##@LR__4409
127c0     49 00 00 FF 
127c4     58 E4 05 F1 | 	add	objptr, ##37464
127c8     F2 20 62 FC | 	wrlong	local02, objptr
127cc     1B 00 00 FF 
127d0     60 E4 85 F1 | 	sub	objptr, ##13920
127d4     F2 12 02 FB | 	rdlong	arg01, objptr
127d8     2D 00 00 FF 
127dc     F8 E5 85 F1 | 	sub	objptr, ##23544
127e0     01 12 66 F0 | 	shl	arg01, #1
127e4     01 14 06 F6 | 	mov	arg02, #1
127e8     4C 1C B0 FD | 	call	#_hg010b_spin2_setcursorpos
127ec                 | ' 
127ec                 | ' init_commands
127ec                 | ' init_error_strings
127ec                 | ' do_new
127ec                 | ' 
127ec                 | ' 
127ec                 | ' cls(ink, paper)
127ec                 | ' 'v.setfontfamily(4) 				' use ST Mono font
127ec                 | ' v.setfontfamily(font) 				' use ST Mono font
127ec                 | ' v.setleadingspaces(2)
127ec                 | ' mount "/sd", _vfs_open_sdcard()
127ec                 | ' chdir "/sd/bas"
127ec                 | ' 
127ec                 | ' currentdir$="/sd/bas"
127ec                 | ' 
127ec                 | ' position 2*editor_spaces,1 : print ver$
127ec     00 12 06 F6 | 	mov	arg01, #0
127f0     7C 85 B0 FD | 	call	#__system___getiolock_0369
127f4     FD 12 02 F6 | 	mov	arg01, result1
127f8     C4 2F B0 FD | 	call	#__system___lockmem
127fc     09 00 00 FF 
12800     E8 EB 05 F1 | 	add	ptr__dat__, ##5096
12804     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
12808     09 00 00 FF 
1280c     E8 EB 85 F1 | 	sub	ptr__dat__, ##5096
12810     00 12 06 F6 | 	mov	arg01, #0
12814     00 16 06 F6 | 	mov	arg03, #0
12818     98 3C B0 FD | 	call	#__system___basic_print_string
1281c     00 12 06 F6 | 	mov	arg01, #0
12820     0A 14 06 F6 | 	mov	arg02, #10
12824     00 16 06 F6 | 	mov	arg03, #0
12828     30 3C B0 FD | 	call	#__system___basic_print_char
1282c     00 12 06 F6 | 	mov	arg01, #0
12830     3C 85 B0 FD | 	call	#__system___getiolock_0369
12834     FD 00 68 FC | 	wrlong	#0, result1
12838     F2 12 02 FB | 	rdlong	arg01, objptr
1283c     00 14 06 F6 | 	mov	arg02, #0
12840     0A 16 06 F6 | 	mov	arg03, #10
12844     80 51 B0 FD | 	call	#__system__Number_S
12848     FD 12 02 F6 | 	mov	arg01, result1
1284c     29 01 00 FF 
12850     96 15 06 F6 | 	mov	arg02, ##@LR__4410
12854     C4 2F B0 FD | 	call	#__system___string_concat
12858     FD 20 02 F6 | 	mov	local02, result1
1285c     50 00 00 FF 
12860     A0 E5 05 F1 | 	add	objptr, ##41376
12864     F2 20 62 FC | 	wrlong	local02, objptr
12868     50 00 00 FF 
1286c     A0 E5 85 F1 | 	sub	objptr, ##41376
12870                 | ' free$=decuns$(v.buf_ptr)+" BASIC bytes free" : print free$
12870     00 12 06 F6 | 	mov	arg01, #0
12874     F8 84 B0 FD | 	call	#__system___getiolock_0369
12878     FD 12 02 F6 | 	mov	arg01, result1
1287c     40 2F B0 FD | 	call	#__system___lockmem
12880     50 00 00 FF 
12884     A0 E5 05 F1 | 	add	objptr, ##41376
12888     F2 14 02 FB | 	rdlong	arg02, objptr
1288c     50 00 00 FF 
12890     A0 E5 85 F1 | 	sub	objptr, ##41376
12894     00 12 06 F6 | 	mov	arg01, #0
12898     00 16 06 F6 | 	mov	arg03, #0
1289c     14 3C B0 FD | 	call	#__system___basic_print_string
128a0     00 12 06 F6 | 	mov	arg01, #0
128a4     0A 14 06 F6 | 	mov	arg02, #10
128a8     00 16 06 F6 | 	mov	arg03, #0
128ac     AC 3B B0 FD | 	call	#__system___basic_print_char
128b0     00 12 06 F6 | 	mov	arg01, #0
128b4     B8 84 B0 FD | 	call	#__system___getiolock_0369
128b8     FD 00 68 FC | 	wrlong	#0, result1
128bc     2D 00 00 FF 
128c0     F8 E5 05 F1 | 	add	objptr, ##23544
128c4     F2 12 02 FB | 	rdlong	arg01, objptr
128c8     2D 00 00 FF 
128cc     F8 E5 85 F1 | 	sub	objptr, ##23544
128d0     01 12 66 F0 | 	shl	arg01, #1
128d4     04 14 06 F6 | 	mov	arg02, #4
128d8     5C 1B B0 FD | 	call	#_hg010b_spin2_setcursorpos
128dc                 | ' position 2*editor_spaces,4 : print "Ready"
128dc     00 12 06 F6 | 	mov	arg01, #0
128e0     8C 84 B0 FD | 	call	#__system___getiolock_0369
128e4     FD 12 02 F6 | 	mov	arg01, result1
128e8     D4 2E B0 FD | 	call	#__system___lockmem
128ec     29 01 00 FF 
128f0     A8 15 06 F6 | 	mov	arg02, ##@LR__4411
128f4     00 12 06 F6 | 	mov	arg01, #0
128f8     00 16 06 F6 | 	mov	arg03, #0
128fc     B4 3B B0 FD | 	call	#__system___basic_print_string
12900     FD 22 02 F6 | 	mov	local03, result1
12904     00 12 06 F6 | 	mov	arg01, #0
12908     0A 14 06 F6 | 	mov	arg02, #10
1290c     00 16 06 F6 | 	mov	arg03, #0
12910     48 3B B0 FD | 	call	#__system___basic_print_char
12914     01 24 06 F6 | 	mov	local04, #1
12918     00 12 06 F6 | 	mov	arg01, #0
1291c     50 84 B0 FD | 	call	#__system___getiolock_0369
12920     FD 00 68 FC | 	wrlong	#0, result1
12924     00 26 06 F6 | 	mov	local05, #0
12928     00 14 06 F6 | 	mov	arg02, #0
1292c     01 14 D6 F7 | 	test	arg02, #1 wc
12930     5A 4C 64 FD | 	drvc	#38
12934     01 14 D6 F7 | 	test	arg02, #1 wc
12938     5A 4E 64 FD | 	drvc	#39
1293c                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
1293c                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
1293c                 | ' 
1293c                 | ' '-------------------------------------------------------------------------------------------------------- 
1293c                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
1293c                 | ' '--------------------------------------------------------------------------------------------------------
1293c                 | ' 
1293c                 | ' do
1293c                 | LR__1510
1293c     01 12 06 F6 | 	mov	arg01, #1
12940     2C 1B B0 FD | 	call	#_hg010b_spin2_waitvbl
12944     1C 27 B0 FD | 	call	#_usbnew_spin2_get_key
12948     3C 00 00 FF 
1294c     38 E4 05 F1 | 	add	objptr, ##30776
12950     F2 FA 61 FC | 	wrlong	result1, objptr
12954                 | '   return hkbd_led_rep
12954     13 00 00 FF 
12958     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
1295c     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
12960     13 00 00 FF 
12964     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
12968     16 00 00 FF 
1296c     08 E4 05 F1 | 	add	objptr, ##11272
12970     F2 FA 61 FC | 	wrlong	result1, objptr
12974                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(10): paula.stop(7)
12974     16 00 00 FF 
12978     08 E4 85 F1 | 	sub	objptr, ##11272
1297c     F2 20 02 FB | 	rdlong	local02, objptr
12980     3C 00 00 FF 
12984     38 E4 85 F1 | 	sub	objptr, ##30776
12988     01 20 16 F2 | 	cmp	local02, #1 wc
1298c     BC 00 90 CD |  if_b	jmp	#LR__1511
12990     3C 00 00 FF 
12994     38 E4 05 F1 | 	add	objptr, ##30776
12998     F2 24 02 FB | 	rdlong	local04, objptr
1299c     3C 00 00 FF 
129a0     38 E4 85 F1 | 	sub	objptr, ##30776
129a4     12 23 02 F6 | 	mov	local03, local04
129a8     04 22 16 F2 | 	cmp	local03, #4 wc
129ac     9C 00 90 3D |  if_ae	jmp	#LR__1511
129b0     50 00 00 FF 
129b4     A4 E5 05 F1 | 	add	objptr, ##41380
129b8     F2 1E 02 FB | 	rdlong	local01, objptr
129bc     50 00 00 FF 
129c0     A4 E5 85 F1 | 	sub	objptr, ##41380
129c4     0F 27 02 F6 | 	mov	local05, local01
129c8     01 26 0E F2 | 	cmp	local05, #1 wz
129cc     7C 00 90 5D |  if_ne	jmp	#LR__1511
129d0     04 00 00 FF 
129d4     94 EA 05 F1 | 	add	ptr__dat__, ##2196
129d8     F5 14 02 F6 | 	mov	arg02, ptr__dat__
129dc     04 00 00 FF 
129e0     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
129e4     56 00 00 FF 
129e8     44 22 06 F6 | 	mov	local03, ##44100
129ec     0E 24 C6 F9 | 	decod	local04, #14
129f0     00 26 06 F6 | 	mov	local05, #0
129f4     03 00 00 FF 
129f8     DE 1E 06 F6 | 	mov	local01, ##1758
129fc     07 12 06 F6 | 	mov	arg01, #7
12a00     56 00 00 FF 
12a04     44 16 06 F6 | 	mov	arg03, ##44100
12a08     0E 18 C6 F9 | 	decod	arg04, #14
12a0c     00 1A 06 F6 | 	mov	arg05, #0
12a10     03 00 00 FF 
12a14     DE 1C 06 F6 | 	mov	arg06, ##1758
12a18     0B 00 00 FF 
12a1c     C0 E4 05 F1 | 	add	objptr, ##5824
12a20     68 29 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
12a24     0B 00 00 FF 
12a28     C0 E4 85 F1 | 	sub	objptr, ##5824
12a2c     0A 12 06 F6 | 	mov	arg01, #10
12a30     80 30 B0 FD | 	call	#__system___waitms
12a34     07 12 06 F6 | 	mov	arg01, #7
12a38     0B 00 00 FF 
12a3c     C0 E4 05 F1 | 	add	objptr, ##5824
12a40     98 2A B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
12a44     0B 00 00 FF 
12a48     C0 E4 85 F1 | 	sub	objptr, ##5824
12a4c                 | LR__1511
12a4c                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
12a4c     3C 00 00 FF 
12a50     38 E4 05 F1 | 	add	objptr, ##30776
12a54     F2 20 02 FB | 	rdlong	local02, objptr
12a58     3C 00 00 FF 
12a5c     38 E4 85 F1 | 	sub	objptr, ##30776
12a60     04 20 16 F2 | 	cmp	local02, #4 wc
12a64     80 00 90 CD |  if_b	jmp	#LR__1512
12a68     3C 00 00 FF 
12a6c     38 E4 05 F1 | 	add	objptr, ##30776
12a70     F2 24 02 FB | 	rdlong	local04, objptr
12a74     3C 00 00 FF 
12a78     38 E4 85 F1 | 	sub	objptr, ##30776
12a7c     12 23 02 F6 | 	mov	local03, local04
12a80     00 00 40 FF 
12a84     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
12a88     3C 00 00 CF 
12a8c     38 E4 05 C1 |  if_b	add	objptr, ##30776
12a90     F2 1E 02 CB |  if_b	rdlong	local01, objptr
12a94     3C 00 00 CF 
12a98     38 E4 85 C1 |  if_b	sub	objptr, ##30776
12a9c     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
12aa0     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
12aa4     40 00 90 3D |  if_ae	jmp	#LR__1512
12aa8     3C 00 00 FF 
12aac     38 E4 05 F1 | 	add	objptr, ##30776
12ab0     F2 20 02 FB | 	rdlong	local02, objptr
12ab4     04 E4 05 F1 | 	add	objptr, #4
12ab8     F2 20 62 FC | 	wrlong	local02, objptr
12abc     16 00 00 FF 
12ac0     08 E4 05 F1 | 	add	objptr, ##11272
12ac4     F2 02 68 FC | 	wrlong	#1, objptr
12ac8     16 00 00 FF 
12acc     08 E4 85 F1 | 	sub	objptr, ##11272
12ad0     F2 20 02 FB | 	rdlong	local02, objptr
12ad4     16 00 00 FF 
12ad8     0C E4 05 F1 | 	add	objptr, ##11276
12adc     F2 20 62 FC | 	wrlong	local02, objptr
12ae0     52 00 00 FF 
12ae4     48 E4 85 F1 | 	sub	objptr, ##42056
12ae8                 | LR__1512
12ae8                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
12ae8     3C 00 00 FF 
12aec     38 E4 05 F1 | 	add	objptr, ##30776
12af0     F2 20 02 FB | 	rdlong	local02, objptr
12af4     3C 00 00 FF 
12af8     38 E4 85 F1 | 	sub	objptr, ##30776
12afc     00 00 40 FF 
12b00     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
12b04     52 00 00 3F 
12b08     4C E4 05 31 |  if_ae	add	objptr, ##42060
12b0c     F2 00 68 3C |  if_ae	wrlong	#0, objptr
12b10     08 E4 85 31 |  if_ae	sub	objptr, #8
12b14     F2 00 68 3C |  if_ae	wrlong	#0, objptr
12b18     52 00 00 3F 
12b1c     44 E4 85 31 |  if_ae	sub	objptr, ##42052
12b20                 | ' if key=0 andalso rpt=1 then rptcnt+=1
12b20     3C 00 00 FF 
12b24     38 E4 05 F1 | 	add	objptr, ##30776
12b28     F2 20 0A FB | 	rdlong	local02, objptr wz
12b2c     3C 00 00 FF 
12b30     38 E4 85 F1 | 	sub	objptr, ##30776
12b34     52 00 00 AF 
12b38     44 E4 05 A1 |  if_e	add	objptr, ##42052
12b3c     F2 24 02 AB |  if_e	rdlong	local04, objptr
12b40     52 00 00 AF 
12b44     44 E4 85 A1 |  if_e	sub	objptr, ##42052
12b48     12 23 02 A6 |  if_e	mov	local03, local04
12b4c     01 22 0E A2 |  if_e	cmp	local03, #1 wz
12b50     52 00 00 AF 
12b54     4C E4 05 A1 |  if_e	add	objptr, ##42060
12b58     F2 20 02 AB |  if_e	rdlong	local02, objptr
12b5c     01 20 06 A1 |  if_e	add	local02, #1
12b60     F2 20 62 AC |  if_e	wrlong	local02, objptr
12b64     52 00 00 AF 
12b68     4C E4 85 A1 |  if_e	sub	objptr, ##42060
12b6c                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
12b6c     3C 00 00 FF 
12b70     38 E4 05 F1 | 	add	objptr, ##30776
12b74     F2 20 02 FB | 	rdlong	local02, objptr
12b78     3C 00 00 FF 
12b7c     38 E4 85 F1 | 	sub	objptr, ##30776
12b80     00 00 40 FF 
12b84     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
12b88     44 00 90 3D |  if_ae	jmp	#LR__1514
12b8c     52 00 00 FF 
12b90     4C E4 05 F1 | 	add	objptr, ##42060
12b94     F2 20 02 FB | 	rdlong	local02, objptr
12b98     52 00 00 FF 
12b9c     4C E4 85 F1 | 	sub	objptr, ##42060
12ba0     19 20 0E F2 | 	cmp	local02, #25 wz
12ba4     28 00 90 5D |  if_ne	jmp	#LR__1513
12ba8     3C 00 00 FF 
12bac     3C E4 05 F1 | 	add	objptr, ##30780
12bb0     F2 20 02 FB | 	rdlong	local02, objptr
12bb4     16 00 00 FF 
12bb8     0C E4 05 F1 | 	add	objptr, ##11276
12bbc     F2 20 62 FC | 	wrlong	local02, objptr
12bc0     04 E4 05 F1 | 	add	objptr, #4
12bc4     F2 2A 68 FC | 	wrlong	#21, objptr
12bc8     52 00 00 FF 
12bcc     4C E4 85 F1 | 	sub	objptr, ##42060
12bd0                 | LR__1513
12bd0                 | LR__1514
12bd0                 | ' 
12bd0                 | ' 
12bd0                 | ' if key3<>0 then
12bd0     52 00 00 FF 
12bd4     48 E4 05 F1 | 	add	objptr, ##42056
12bd8     F2 28 0A FB | 	rdlong	local06, objptr wz
12bdc     52 00 00 FF 
12be0     48 E4 85 F1 | 	sub	objptr, ##42056
12be4     54 FD 9F AD |  if_e	jmp	#LR__1510
12be8                 | '   if keyclick=1 then paula.play(7,@atari_spl,44100,16384,1684) 
12be8     50 00 00 FF 
12bec     A4 E5 05 F1 | 	add	objptr, ##41380
12bf0     F2 20 02 FB | 	rdlong	local02, objptr
12bf4     50 00 00 FF 
12bf8     A4 E5 85 F1 | 	sub	objptr, ##41380
12bfc     01 20 0E F2 | 	cmp	local02, #1 wz
12c00     5C 00 90 5D |  if_ne	jmp	#LR__1515
12c04     01 00 00 FF 
12c08     00 EA 05 F1 | 	add	ptr__dat__, ##512
12c0c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
12c10     01 00 00 FF 
12c14     00 EA 85 F1 | 	sub	ptr__dat__, ##512
12c18     56 00 00 FF 
12c1c     44 22 06 F6 | 	mov	local03, ##44100
12c20     0E 24 C6 F9 | 	decod	local04, #14
12c24     03 00 00 FF 
12c28     94 26 06 F6 | 	mov	local05, ##1684
12c2c     01 1E 66 F6 | 	neg	local01, #1
12c30     07 12 06 F6 | 	mov	arg01, #7
12c34     56 00 00 FF 
12c38     44 16 06 F6 | 	mov	arg03, ##44100
12c3c     0E 18 C6 F9 | 	decod	arg04, #14
12c40     03 00 00 FF 
12c44     94 1A 06 F6 | 	mov	arg05, ##1684
12c48     01 1C 66 F6 | 	neg	arg06, #1
12c4c     0B 00 00 FF 
12c50     C0 E4 05 F1 | 	add	objptr, ##5824
12c54     34 27 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
12c58     0B 00 00 FF 
12c5c     C0 E4 85 F1 | 	sub	objptr, ##5824
12c60                 | LR__1515
12c60     52 00 00 FF 
12c64     48 E4 05 F1 | 	add	objptr, ##42056
12c68     F2 12 02 FB | 	rdlong	arg01, objptr
12c6c     52 00 00 FF 
12c70     48 E4 85 F1 | 	sub	objptr, ##42056
12c74     60 F8 BF FD | 	call	#_scantochar
12c78     52 00 00 FF 
12c7c     50 E4 05 F1 | 	add	objptr, ##42064
12c80     F2 FA 61 FC | 	wrlong	result1, objptr
12c84                 | '   if leds and 2 = 2 then 
12c84     10 E4 85 F1 | 	sub	objptr, #16
12c88     F2 20 0A FB | 	rdlong	local02, objptr wz
12c8c     52 00 00 FF 
12c90     40 E4 85 F1 | 	sub	objptr, ##42048
12c94     68 01 90 AD |  if_e	jmp	#LR__1523
12c98                 | '     if key4>96 andalso key4<123 then
12c98     52 00 00 FF 
12c9c     50 E4 05 F1 | 	add	objptr, ##42064
12ca0     F2 20 02 FB | 	rdlong	local02, objptr
12ca4     52 00 00 FF 
12ca8     50 E4 85 F1 | 	sub	objptr, ##42064
12cac     61 20 56 F2 | 	cmps	local02, #97 wc
12cb0     40 00 90 CD |  if_b	jmp	#LR__1516
12cb4     52 00 00 FF 
12cb8     50 E4 05 F1 | 	add	objptr, ##42064
12cbc     F2 24 02 FB | 	rdlong	local04, objptr
12cc0     52 00 00 FF 
12cc4     50 E4 85 F1 | 	sub	objptr, ##42064
12cc8     12 23 02 F6 | 	mov	local03, local04
12ccc     7B 22 56 F2 | 	cmps	local03, #123 wc
12cd0     20 00 90 3D |  if_ae	jmp	#LR__1516
12cd4     52 00 00 FF 
12cd8     50 E4 05 F1 | 	add	objptr, ##42064
12cdc     F2 20 02 FB | 	rdlong	local02, objptr
12ce0     20 20 86 F1 | 	sub	local02, #32
12ce4     F2 20 62 FC | 	wrlong	local02, objptr
12ce8     52 00 00 FF 
12cec     50 E4 85 F1 | 	sub	objptr, ##42064
12cf0     0C 01 90 FD | 	jmp	#LR__1522
12cf4                 | LR__1516
12cf4     52 00 00 FF 
12cf8     50 E4 05 F1 | 	add	objptr, ##42064
12cfc     F2 20 02 FB | 	rdlong	local02, objptr
12d00     52 00 00 FF 
12d04     50 E4 85 F1 | 	sub	objptr, ##42064
12d08     41 20 56 F2 | 	cmps	local02, #65 wc
12d0c     40 00 90 CD |  if_b	jmp	#LR__1517
12d10     52 00 00 FF 
12d14     50 E4 05 F1 | 	add	objptr, ##42064
12d18     F2 24 02 FB | 	rdlong	local04, objptr
12d1c     52 00 00 FF 
12d20     50 E4 85 F1 | 	sub	objptr, ##42064
12d24     12 23 02 F6 | 	mov	local03, local04
12d28     5B 22 56 F2 | 	cmps	local03, #91 wc
12d2c     20 00 90 3D |  if_ae	jmp	#LR__1517
12d30     52 00 00 FF 
12d34     50 E4 05 F1 | 	add	objptr, ##42064
12d38     F2 20 02 FB | 	rdlong	local02, objptr
12d3c     20 20 06 F1 | 	add	local02, #32
12d40     F2 20 62 FC | 	wrlong	local02, objptr
12d44     52 00 00 FF 
12d48     50 E4 85 F1 | 	sub	objptr, ##42064
12d4c     B0 00 90 FD | 	jmp	#LR__1521
12d50                 | LR__1517
12d50     52 00 00 FF 
12d54     50 E4 05 F1 | 	add	objptr, ##42064
12d58     F2 20 02 FB | 	rdlong	local02, objptr
12d5c     52 00 00 FF 
12d60     50 E4 85 F1 | 	sub	objptr, ##42064
12d64     17 20 56 F2 | 	cmps	local02, #23 wc
12d68     40 00 90 CD |  if_b	jmp	#LR__1518
12d6c     52 00 00 FF 
12d70     50 E4 05 F1 | 	add	objptr, ##42064
12d74     F2 24 02 FB | 	rdlong	local04, objptr
12d78     52 00 00 FF 
12d7c     50 E4 85 F1 | 	sub	objptr, ##42064
12d80     12 23 02 F6 | 	mov	local03, local04
12d84     20 22 56 F2 | 	cmps	local03, #32 wc
12d88     20 00 90 3D |  if_ae	jmp	#LR__1518
12d8c     52 00 00 FF 
12d90     50 E4 05 F1 | 	add	objptr, ##42064
12d94     F2 20 02 FB | 	rdlong	local02, objptr
12d98     09 20 86 F1 | 	sub	local02, #9
12d9c     F2 20 62 FC | 	wrlong	local02, objptr
12da0     52 00 00 FF 
12da4     50 E4 85 F1 | 	sub	objptr, ##42064
12da8     54 00 90 FD | 	jmp	#LR__1520
12dac                 | LR__1518
12dac     52 00 00 FF 
12db0     50 E4 05 F1 | 	add	objptr, ##42064
12db4     F2 20 02 FB | 	rdlong	local02, objptr
12db8     52 00 00 FF 
12dbc     50 E4 85 F1 | 	sub	objptr, ##42064
12dc0     0E 20 56 F2 | 	cmps	local02, #14 wc
12dc4     38 00 90 CD |  if_b	jmp	#LR__1519
12dc8     52 00 00 FF 
12dcc     50 E4 05 F1 | 	add	objptr, ##42064
12dd0     F2 24 02 FB | 	rdlong	local04, objptr
12dd4     52 00 00 FF 
12dd8     50 E4 85 F1 | 	sub	objptr, ##42064
12ddc     12 23 02 F6 | 	mov	local03, local04
12de0     17 22 56 F2 | 	cmps	local03, #23 wc
12de4     52 00 00 CF 
12de8     50 E4 05 C1 |  if_b	add	objptr, ##42064
12dec     F2 20 02 CB |  if_b	rdlong	local02, objptr
12df0     27 20 06 C1 |  if_b	add	local02, #39
12df4     F2 20 62 CC |  if_b	wrlong	local02, objptr
12df8     52 00 00 CF 
12dfc     50 E4 85 C1 |  if_b	sub	objptr, ##42064
12e00                 | LR__1519
12e00                 | LR__1520
12e00                 | LR__1521
12e00                 | LR__1522
12e00                 | LR__1523
12e00                 | '  
12e00                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then line$+=chr$(key4): v.putchar(key4)
12e00     52 00 00 FF 
12e04     50 E4 05 F1 | 	add	objptr, ##42064
12e08     F2 20 02 FB | 	rdlong	local02, objptr
12e0c     52 00 00 FF 
12e10     50 E4 85 F1 | 	sub	objptr, ##42064
12e14     01 20 56 F2 | 	cmps	local02, #1 wc
12e18     90 00 90 CD |  if_b	jmp	#LR__1524
12e1c     52 00 00 FF 
12e20     50 E4 05 F1 | 	add	objptr, ##42064
12e24     F2 24 02 FB | 	rdlong	local04, objptr
12e28     52 00 00 FF 
12e2c     50 E4 85 F1 | 	sub	objptr, ##42064
12e30     12 23 02 F6 | 	mov	local03, local04
12e34     7F 22 56 F2 | 	cmps	local03, #127 wc
12e38     38 E4 05 C1 |  if_b	add	objptr, #56
12e3c     F2 1E E2 CA |  if_b	rdword	local01, objptr
12e40     38 E4 85 C1 |  if_b	sub	objptr, #56
12e44     0F 27 32 C9 |  if_b	getword	local05, local01, #0
12e48     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
12e4c     5C 00 90 3D |  if_ae	jmp	#LR__1524
12e50     52 00 00 FF 
12e54     50 E4 05 F1 | 	add	objptr, ##42064
12e58     F2 12 02 FB | 	rdlong	arg01, objptr
12e5c     52 00 00 FF 
12e60     50 E4 85 F1 | 	sub	objptr, ##42064
12e64     2C 4B B0 FD | 	call	#__system__Chr_S
12e68     FD 2A 02 F6 | 	mov	local07, result1
12e6c     2D 00 00 FF 
12e70     E0 E5 05 F1 | 	add	objptr, ##23520
12e74     F2 12 02 FB | 	rdlong	arg01, objptr
12e78     2D 00 00 FF 
12e7c     E0 E5 85 F1 | 	sub	objptr, ##23520
12e80     15 15 02 F6 | 	mov	arg02, local07
12e84     94 29 B0 FD | 	call	#__system___string_concat
12e88     2D 00 00 FF 
12e8c     E0 E5 05 F1 | 	add	objptr, ##23520
12e90     F2 FA 61 FC | 	wrlong	result1, objptr
12e94     24 00 00 FF 
12e98     70 E4 05 F1 | 	add	objptr, ##18544
12e9c     F2 12 02 FB | 	rdlong	arg01, objptr
12ea0     52 00 00 FF 
12ea4     50 E4 85 F1 | 	sub	objptr, ##42064
12ea8     D4 16 B0 FD | 	call	#_hg010b_spin2_putchar
12eac                 | LR__1524
12eac                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0) 'end of line reached
12eac     52 00 00 FF 
12eb0     50 E4 05 F1 | 	add	objptr, ##42064
12eb4     F2 20 02 FB | 	rdlong	local02, objptr
12eb8     52 00 00 FF 
12ebc     50 E4 85 F1 | 	sub	objptr, ##42064
12ec0     01 20 56 F2 | 	cmps	local02, #1 wc
12ec4     D0 00 90 CD |  if_b	jmp	#LR__1525
12ec8     52 00 00 FF 
12ecc     50 E4 05 F1 | 	add	objptr, ##42064
12ed0     F2 24 02 FB | 	rdlong	local04, objptr
12ed4     52 00 00 FF 
12ed8     50 E4 85 F1 | 	sub	objptr, ##42064
12edc     12 23 02 F6 | 	mov	local03, local04
12ee0     7F 22 56 F2 | 	cmps	local03, #127 wc
12ee4     B0 00 90 3D |  if_ae	jmp	#LR__1525
12ee8     38 E4 05 F1 | 	add	objptr, #56
12eec     F2 1E E2 FA | 	rdword	local01, objptr
12ef0     38 E4 85 F1 | 	sub	objptr, #56
12ef4     0F 27 32 F9 | 	getword	local05, local01, #0
12ef8     FE 26 0E F2 | 	cmp	local05, #254 wz
12efc     50 00 00 AF 
12f00     A4 E5 05 A1 |  if_e	add	objptr, ##41380
12f04     F2 2C 02 AB |  if_e	rdlong	local08, objptr
12f08     50 00 00 AF 
12f0c     A4 E5 85 A1 |  if_e	sub	objptr, ##41380
12f10     16 2F 02 A6 |  if_e	mov	local09, local08
12f14     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
12f18     7C 00 90 5D |  if_ne	jmp	#LR__1525
12f1c     04 00 00 FF 
12f20     94 EA 05 F1 | 	add	ptr__dat__, ##2196
12f24     F5 14 02 F6 | 	mov	arg02, ptr__dat__
12f28     04 00 00 FF 
12f2c     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
12f30     56 00 00 FF 
12f34     44 22 06 F6 | 	mov	local03, ##44100
12f38     0E 24 C6 F9 | 	decod	local04, #14
12f3c     00 26 06 F6 | 	mov	local05, #0
12f40     03 00 00 FF 
12f44     DE 1E 06 F6 | 	mov	local01, ##1758
12f48     07 12 06 F6 | 	mov	arg01, #7
12f4c     56 00 00 FF 
12f50     44 16 06 F6 | 	mov	arg03, ##44100
12f54     0E 18 C6 F9 | 	decod	arg04, #14
12f58     00 1A 06 F6 | 	mov	arg05, #0
12f5c     03 00 00 FF 
12f60     DE 1C 06 F6 | 	mov	arg06, ##1758
12f64     0B 00 00 FF 
12f68     C0 E4 05 F1 | 	add	objptr, ##5824
12f6c     1C 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
12f70     0B 00 00 FF 
12f74     C0 E4 85 F1 | 	sub	objptr, ##5824
12f78     2C 13 06 F6 | 	mov	arg01, #300
12f7c     34 2B B0 FD | 	call	#__system___waitms
12f80     00 12 06 F6 | 	mov	arg01, #0
12f84     0B 00 00 FF 
12f88     C0 E4 05 F1 | 	add	objptr, ##5824
12f8c     4C 25 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
12f90     0B 00 00 FF 
12f94     C0 E4 85 F1 | 	sub	objptr, ##5824
12f98                 | LR__1525
12f98                 | '  
12f98                 | '   'tab
12f98                 | '   if (key3 and 255) = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
12f98     52 00 00 FF 
12f9c     48 E4 05 F1 | 	add	objptr, ##42056
12fa0     F2 20 02 FB | 	rdlong	local02, objptr
12fa4     52 00 00 FF 
12fa8     48 E4 85 F1 | 	sub	objptr, ##42056
12fac     10 21 E2 F8 | 	getbyte	local02, local02, #0
12fb0     2B 20 0E F2 | 	cmp	local02, #43 wz
12fb4     B4 00 90 5D |  if_ne	jmp	#LR__1526
12fb8     38 E4 05 F1 | 	add	objptr, #56
12fbc     F2 24 E2 FA | 	rdword	local04, objptr
12fc0     38 E4 85 F1 | 	sub	objptr, #56
12fc4     12 23 32 F9 | 	getword	local03, local04, #0
12fc8     F0 22 16 F2 | 	cmp	local03, #240 wc
12fcc     9C 00 90 CD |  if_b	jmp	#LR__1526
12fd0     50 00 00 FF 
12fd4     A4 E5 05 F1 | 	add	objptr, ##41380
12fd8     F2 1E 02 FB | 	rdlong	local01, objptr
12fdc     50 00 00 FF 
12fe0     A4 E5 85 F1 | 	sub	objptr, ##41380
12fe4     0F 27 02 F6 | 	mov	local05, local01
12fe8     01 26 0E F2 | 	cmp	local05, #1 wz
12fec     7C 00 90 5D |  if_ne	jmp	#LR__1526
12ff0     04 00 00 FF 
12ff4     94 EA 05 F1 | 	add	ptr__dat__, ##2196
12ff8     F5 14 02 F6 | 	mov	arg02, ptr__dat__
12ffc     04 00 00 FF 
13000     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
13004     56 00 00 FF 
13008     44 22 06 F6 | 	mov	local03, ##44100
1300c     0E 24 C6 F9 | 	decod	local04, #14
13010     00 26 06 F6 | 	mov	local05, #0
13014     03 00 00 FF 
13018     DE 1E 06 F6 | 	mov	local01, ##1758
1301c     00 12 06 F6 | 	mov	arg01, #0
13020     56 00 00 FF 
13024     44 16 06 F6 | 	mov	arg03, ##44100
13028     0E 18 C6 F9 | 	decod	arg04, #14
1302c     00 1A 06 F6 | 	mov	arg05, #0
13030     03 00 00 FF 
13034     DE 1C 06 F6 | 	mov	arg06, ##1758
13038     0B 00 00 FF 
1303c     C0 E4 05 F1 | 	add	objptr, ##5824
13040     48 23 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
13044     0B 00 00 FF 
13048     C0 E4 85 F1 | 	sub	objptr, ##5824
1304c     2C 13 06 F6 | 	mov	arg01, #300
13050     60 2A B0 FD | 	call	#__system___waitms
13054     00 12 06 F6 | 	mov	arg01, #0
13058     0B 00 00 FF 
1305c     C0 E4 05 F1 | 	add	objptr, ##5824
13060     78 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
13064     0B 00 00 FF 
13068     C0 E4 85 F1 | 	sub	objptr, ##5824
1306c                 | LR__1526
1306c                 | '   if (key3 and 255) = 43 andalso v.cursor_x<240 then let x=(v.cursor_x mod 16)/2: for i=x to 7: line$+=" " :  v.write (" ") : next i  
1306c     52 00 00 FF 
13070     48 E4 05 F1 | 	add	objptr, ##42056
13074     F2 20 02 FB | 	rdlong	local02, objptr
13078     52 00 00 FF 
1307c     48 E4 85 F1 | 	sub	objptr, ##42056
13080     10 21 E2 F8 | 	getbyte	local02, local02, #0
13084     2B 20 0E F2 | 	cmp	local02, #43 wz
13088     AC 00 90 5D |  if_ne	jmp	#LR__1529
1308c     38 E4 05 F1 | 	add	objptr, #56
13090     F2 24 E2 FA | 	rdword	local04, objptr
13094     38 E4 85 F1 | 	sub	objptr, #56
13098     12 23 32 F9 | 	getword	local03, local04, #0
1309c     F0 22 16 F2 | 	cmp	local03, #240 wc
130a0     94 00 90 3D |  if_ae	jmp	#LR__1529
130a4     38 E4 05 F1 | 	add	objptr, #56
130a8     F2 20 E2 FA | 	rdword	local02, objptr
130ac     10 23 52 F6 | 	abs	local03, local02 wc
130b0     11 23 42 F8 | 	getnib	local03, local03, #0
130b4     11 23 82 F6 | 	negc	local03, local03
130b8     11 25 52 F6 | 	abs	local04, local03 wc
130bc     01 24 46 F0 | 	shr	local04, #1
130c0     12 25 82 F6 | 	negc	local04, local04
130c4     52 00 00 FF 
130c8     1C E4 05 F1 | 	add	objptr, ##42012
130cc     F2 24 62 FC | 	wrlong	local04, objptr
130d0     12 31 02 F6 | 	mov	local10, local04
130d4     52 00 00 FF 
130d8     54 E4 85 F1 | 	sub	objptr, ##42068
130dc                 | LR__1527
130dc     08 30 56 F2 | 	cmps	local10, #8 wc
130e0     54 00 90 3D |  if_ae	jmp	#LR__1528
130e4     2D 00 00 FF 
130e8     E0 E5 05 F1 | 	add	objptr, ##23520
130ec     F2 12 02 FB | 	rdlong	arg01, objptr
130f0     2D 00 00 FF 
130f4     E0 E5 85 F1 | 	sub	objptr, ##23520
130f8     29 01 00 FF 
130fc     AE 25 06 F6 | 	mov	local04, ##@LR__4412
13100     12 15 02 F6 | 	mov	arg02, local04
13104     14 27 B0 FD | 	call	#__system___string_concat
13108     2D 00 00 FF 
1310c     E0 E5 05 F1 | 	add	objptr, ##23520
13110     F2 FA 61 FC | 	wrlong	result1, objptr
13114     2D 00 00 FF 
13118     E0 E5 85 F1 | 	sub	objptr, ##23520
1311c     29 01 00 FF 
13120     B0 13 06 F6 | 	mov	arg01, ##@LR__4413
13124     74 16 B0 FD | 	call	#_hg010b_spin2_write
13128     18 23 02 F6 | 	mov	local03, local10
1312c     01 22 06 F1 | 	add	local03, #1
13130     11 31 02 F6 | 	mov	local10, local03
13134     A4 FF 9F FD | 	jmp	#LR__1527
13138                 | LR__1528
13138                 | LR__1529
13138                 | '  
13138                 | '   'backspace
13138                 | '   if (key3 and 255) = 42 then 
13138     52 00 00 FF 
1313c     48 E4 05 F1 | 	add	objptr, ##42056
13140     F2 20 02 FB | 	rdlong	local02, objptr
13144     52 00 00 FF 
13148     48 E4 85 F1 | 	sub	objptr, ##42056
1314c     10 21 E2 F8 | 	getbyte	local02, local02, #0
13150     2A 20 0E F2 | 	cmp	local02, #42 wz
13154     D4 00 90 5D |  if_ne	jmp	#LR__1534
13158                 | '       if v.cursor_x>4 then 
13158     38 E4 05 F1 | 	add	objptr, #56
1315c     F2 20 E2 FA | 	rdword	local02, objptr
13160     38 E4 85 F1 | 	sub	objptr, #56
13164     05 20 16 F2 | 	cmp	local02, #5 wc
13168     9C 00 90 CD |  if_b	jmp	#LR__1532
1316c     2D 00 00 FF 
13170     E0 E5 05 F1 | 	add	objptr, ##23520
13174     F2 26 02 FB | 	rdlong	local05, objptr
13178     2D 00 00 FF 
1317c     E0 E5 85 F1 | 	sub	objptr, ##23520
13180     13 13 02 F6 | 	mov	arg01, local05
13184     09 33 02 F6 | 	mov	local11, arg01
13188     97 06 48 FB | 	callpa	#(@LR__1531-@LR__1530)>>2,fcache_load_ptr_
1318c                 | LR__1530
1318c     19 FB C9 FA | 	rdbyte	result1, local11 wz
13190     01 32 06 51 |  if_ne	add	local11, #1
13194     F4 FF 9F 5D |  if_ne	jmp	#LR__1530
13198                 | LR__1531
13198     09 33 82 F1 | 	sub	local11, arg01
1319c     19 15 02 F6 | 	mov	arg02, local11
131a0     01 14 86 F1 | 	sub	arg02, #1
131a4     13 13 02 F6 | 	mov	arg01, local05
131a8     24 46 B0 FD | 	call	#__system__Left_S
131ac     2D 00 00 FF 
131b0     E0 E5 05 F1 | 	add	objptr, ##23520
131b4     F2 FA 61 FC | 	wrlong	result1, objptr
131b8     2D 00 00 FF 
131bc     A8 E5 85 F1 | 	sub	objptr, ##23464
131c0     F2 12 E2 FA | 	rdword	arg01, objptr
131c4     02 12 86 F1 | 	sub	arg01, #2
131c8     02 E4 05 F1 | 	add	objptr, #2
131cc     F2 14 C2 FA | 	rdbyte	arg02, objptr
131d0     3A E4 85 F1 | 	sub	objptr, #58
131d4     60 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
131d8     20 12 06 F6 | 	mov	arg01, #32
131dc     A0 13 B0 FD | 	call	#_hg010b_spin2_putchar
131e0     38 E4 05 F1 | 	add	objptr, #56
131e4     F2 12 E2 FA | 	rdword	arg01, objptr
131e8     02 12 86 F1 | 	sub	arg01, #2
131ec     02 E4 05 F1 | 	add	objptr, #2
131f0     F2 24 C2 FA | 	rdbyte	local04, objptr
131f4     3A E4 85 F1 | 	sub	objptr, #58
131f8     12 23 E2 F8 | 	getbyte	local03, local04, #0
131fc     11 15 02 F6 | 	mov	arg02, local03
13200     34 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
13204     24 00 90 FD | 	jmp	#LR__1533
13208                 | LR__1532
13208     29 01 00 FF 
1320c     B2 21 06 F6 | 	mov	local02, ##@LR__4414
13210     2D 00 00 FF 
13214     E0 E5 05 F1 | 	add	objptr, ##23520
13218     F2 20 62 FC | 	wrlong	local02, objptr
1321c     2D 00 00 FF 
13220     A8 E5 85 F1 | 	sub	objptr, ##23464
13224     F2 08 58 FC | 	wrword	#4, objptr
13228     38 E4 85 F1 | 	sub	objptr, #56
1322c                 | LR__1533
1322c                 | LR__1534
1322c                 | '    
1322c                 | '  ' To do: arrows and DEL; use textscreen array to implement fullscreen editing
1322c                 | '  
1322c                 | '   if key4=key_enter then 
1322c     52 00 00 FF 
13230     50 E4 05 F1 | 	add	objptr, ##42064
13234     F2 28 02 FB | 	rdlong	local06, objptr
13238     52 00 00 FF 
1323c     50 E4 85 F1 | 	sub	objptr, ##42064
13240     8D 28 0E F2 | 	cmp	local06, #141 wz
13244     50 00 90 5D |  if_ne	jmp	#LR__1535
13248     B0 16 B0 FD | 	call	#_hg010b_spin2_crlf
1324c     CC D7 BE FD | 	call	#_interpret
13250     29 01 00 FF 
13254     B3 21 06 F6 | 	mov	local02, ##@LR__4415
13258     2D 00 00 FF 
1325c     E0 E5 05 F1 | 	add	objptr, ##23520
13260     F2 20 62 FC | 	wrlong	local02, objptr
13264     1A FA 61 FD | 	getct	result1
13268     24 00 00 FF 
1326c     78 E4 05 F1 | 	add	objptr, ##18552
13270     F2 24 02 FB | 	rdlong	local04, objptr
13274     12 23 02 F6 | 	mov	local03, local04
13278     11 FB 81 F1 | 	sub	result1, local03
1327c     F2 FA 61 FC | 	wrlong	result1, objptr
13280     14 E4 85 F1 | 	sub	objptr, #20
13284     F2 00 68 FC | 	wrlong	#0, objptr
13288     08 E4 05 F1 | 	add	objptr, #8
1328c     F2 00 68 FC | 	wrlong	#0, objptr
13290     52 00 00 FF 
13294     4C E4 85 F1 | 	sub	objptr, ##42060
13298                 | LR__1535
13298     52 00 00 FF 
1329c     48 E4 05 F1 | 	add	objptr, ##42056
132a0     F2 00 68 FC | 	wrlong	#0, objptr
132a4     52 00 00 FF 
132a8     48 E4 85 F1 | 	sub	objptr, ##42056
132ac     8C F6 9F FD | 	jmp	#LR__1510
132b0     A7 F0 03 F6 | 	mov	ptra, fp
132b4     B2 00 A0 FD | 	call	#popregs_
132b8                 | _program_ret
132b8     2D 00 64 FD | 	ret
132bc                 | 
132bc                 | ' '' this is not a main program.
132bc                 | ' 
132bc                 | ' '****************************************************************************************************************
132bc                 | ' '                                                                                                             	*
132bc                 | ' 'Start the driver with graphics mode 'mode' at pins 'base'                            		rev 20220320 	*
132bc                 | ' '                                                                                                            	*
132bc                 | ' ' mode - mode #, see below											*
132bc                 | ' ' base - HDMI base pin												*
132bc                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
132bc                 | ' '														*
132bc                 | ' '' mode number: :  %p_tn_bb_cc_vv_hh										*
132bc                 | ' '' set bit #15 for custom timings														*
132bc                 | ' '' p - 1 - psram, 0 - hub											*
132bc                 | ' '' t - 1 - graphics, 0 - text											*
132bc                 | ' '' n - 1 - 60 Hz,  0 - 50 Hz 											*
132bc                 | ' '' hh - h.zoom, vv-v.zoom, cc-color depth if graphic, unused in text,						*
132bc                 | ' '' bb - borders, 00-wide, 01 medium, 10 no border, 11 no border, extended resolution (1024x576/896x496)		*
132bc                 | ' '														*
132bc                 | ' '****************************************************************************************************************
132bc                 | ' 
132bc                 | ' pub start(base,mb):result |i
132bc                 | _hg010b_spin2_start
132bc                 | ' 
132bc                 | ' '--------------------------- initialize pointers and variables
132bc                 | ' 
132bc                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
132bc     30 E4 05 F1 | 	add	objptr, #48
132c0     F2 FA 01 F6 | 	mov	result1, objptr
132c4     28 E4 85 F1 | 	sub	objptr, #40
132c8     F2 FA 61 FC | 	wrlong	result1, objptr
132cc                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
132cc                 | ' hdmibase:=base							' HDMI base pin, 8*n
132cc     18 E4 05 F1 | 	add	objptr, #24
132d0     F2 12 62 FC | 	wrlong	arg01, objptr
132d4                 | ' mailbox_ptr:=mb		
132d4     04 E4 05 F1 | 	add	objptr, #4
132d8     F2 14 62 FC | 	wrlong	arg02, objptr
132dc                 | ' mailbox0:=mb				' PSRAM mailbox pointer
132dc     C1 E5 05 F1 | 	add	objptr, #449
132e0     F2 14 62 FC | 	wrlong	arg02, objptr
132e4                 | ' sprite_ptr:=@spr1ptr
132e4     D8 E4 85 F1 | 	sub	objptr, #216
132e8     F2 FA 01 F6 | 	mov	result1, objptr
132ec     E5 E4 85 F1 | 	sub	objptr, #229
132f0     F2 FA 61 FC | 	wrlong	result1, objptr
132f4                 | ' 
132f4                 | ' 		'
132f4                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
132f4     E5 E4 05 F1 | 	add	objptr, #229
132f8     F2 FA 01 FB | 	rdlong	result1, objptr
132fc     D0 FA 05 F1 | 	add	result1, #208
13300     FD 10 58 FC | 	wrword	#8, result1
13304                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
13304     F2 16 02 FB | 	rdlong	arg03, objptr
13308     D2 16 06 F1 | 	add	arg03, #210
1330c     0B 21 58 FC | 	wrword	#16, arg03
13310                 | ' leading_spaces:=0				'
13310     A5 E5 05 F1 | 	add	objptr, #421
13314     F2 00 68 FC | 	wrlong	#0, objptr
13318                 | ' 
13318                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
13318     99 E4 85 F1 | 	sub	objptr, #153
1331c     00 00 A0 FF 
13320     F2 0E 68 FC | 	wrlong	##1073741831, objptr
13324                 | ' emptydl[1]:=0
13324     04 E4 05 F1 | 	add	objptr, #4
13328     F2 00 68 FC | 	wrlong	#0, objptr
1332c                 | ' 
1332c                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
1332c                 | ' 
1332c                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
1332c     28 E5 85 F1 | 	sub	objptr, #296
13330     F2 02 68 FC | 	wrlong	#1, objptr
13334                 | ' if s_debug<>0
13334                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
13334     20 00 80 FF 
13338     F2 00 68 FC | 	wrlong	##16384, objptr
1333c     F5 E4 85 F1 | 	sub	objptr, #245
13340                 | ' setmode()							' set the mode, see below
13340     A4 01 B0 FD | 	call	#_hg010b_spin2_setmode
13344                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
13344     45 E4 05 F1 | 	add	objptr, #69
13348     F2 FA 01 F6 | 	mov	result1, objptr
1334c     35 E4 85 F1 | 	sub	objptr, #53
13350     F2 FA 61 FC | 	wrlong	result1, objptr
13354                 | ' cursor_ptr:=@cursor_x						
13354     28 E4 05 F1 | 	add	objptr, #40
13358     F2 16 02 F6 | 	mov	arg03, objptr
1335c     2C E4 85 F1 | 	sub	objptr, #44
13360     F2 16 62 FC | 	wrlong	arg03, objptr
13364                 | ' fontnum:=0  							' start with a PC type font 
13364     55 E4 05 F1 | 	add	objptr, #85
13368     F2 00 68 FC | 	wrlong	#0, objptr
1336c                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
1336c     1C E4 05 F1 | 	add	objptr, #28
13370     F2 12 02 F6 | 	mov	arg01, objptr
13374     7D E4 85 F1 | 	sub	objptr, #125
13378     10 00 00 FF 
1337c     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
13380     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
13384     10 00 00 FF 
13388     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
1338c     10 16 06 F6 | 	mov	arg03, #16
13390     4C 23 B0 FD | 	call	#__system____builtin_memmove
13394                 | ' leading_spaces:=0
13394     01 00 00 FF 
13398     B2 E4 05 F1 | 	add	objptr, ##690
1339c     F2 00 68 FC | 	wrlong	#0, objptr
133a0     01 00 00 FF 
133a4     B2 E4 85 F1 | 	sub	objptr, ##690
133a8                 | ' '---------------------------- initialize a cursor (MSDOS type)
133a8                 | ' 
133a8                 | ' initcursor(154)
133a8     9A 12 06 F6 | 	mov	arg01, #154
133ac     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
133b0                 | ' 
133b0                 | ' '---------------------------- start the cog
133b0                 | ' 
133b0                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
133b0     10 00 00 FF 
133b4     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
133b8     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
133bc     10 00 00 FF 
133c0     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
133c4     10 E4 05 F1 | 	add	objptr, #16
133c8     10 FA 05 F6 | 	mov	result1, #16
133cc     28 E4 61 FD | 	setq	objptr
133d0     0A FB F1 FC | 	coginit	result1, arg02 wc
133d4     01 FA 65 C6 |  if_b	neg	result1, #1
133d8     1C E4 05 F1 | 	add	objptr, #28
133dc     F2 FA 61 FC | 	wrlong	result1, objptr
133e0     2C E4 85 F1 | 	sub	objptr, #44
133e4                 | ' waitms(40)							' wait for stabilize
133e4     28 12 06 F6 | 	mov	arg01, #40
133e8     C8 26 B0 FD | 	call	#__system___waitms
133ec                 | ' return cog							' return the driver's cog #
133ec     2C E4 05 F1 | 	add	objptr, #44
133f0     F2 FA 01 FB | 	rdlong	result1, objptr
133f4     2C E4 85 F1 | 	sub	objptr, #44
133f8                 | _hg010b_spin2_start_ret
133f8     2D 00 64 FD | 	ret
133fc                 | 
133fc                 | ' 
133fc                 | ' 
133fc                 | ' '**************************************************************************************************************** 
133fc                 | ' '                                                                                                             	*
133fc                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
133fc                 | ' '  Mode number - see start() above or bits below								*
133fc                 | ' '                                                                                                             	*
133fc                 | ' '****************************************************************************************************************
133fc                 | ' 
133fc                 | ' '---------------------------- initialize a cursor (MSDOS type)
133fc                 | ' pub initcursor(color) |i
133fc                 | _hg010b_spin2_initcursor
133fc     03 4A 05 F6 | 	mov	COUNT_, #3
13400     A8 00 A0 FD | 	call	#pushregs_
13404     09 1F 02 F6 | 	mov	local01, arg01
13408                 | ' 
13408                 | ' cursor_x:=0							' place the cursor at 0:0
13408     38 E4 05 F1 | 	add	objptr, #56
1340c     F2 00 58 FC | 	wrword	#0, objptr
13410                 | ' cursor_y:=0
13410     02 E4 05 F1 | 	add	objptr, #2
13414     F2 00 48 FC | 	wrbyte	#0, objptr
13418                 | ' repeat i from 0 to 111
13418     00 20 06 F6 | 	mov	local02, #0
1341c     F8 E5 05 F1 | 	add	objptr, #504
13420     97 1A 48 FB | 	callpa	#(@LR__1542-@LR__1540)>>2,fcache_load_ptr_
13424                 | LR__1540
13424                 | '   cursor[i]:=0
13424     10 23 02 F6 | 	mov	local03, local02
13428     F2 22 02 F1 | 	add	local03, objptr
1342c     11 01 48 FC | 	wrbyte	#0, local03
13430     01 20 06 F1 | 	add	local02, #1
13434     70 20 56 F2 | 	cmps	local02, #112 wc
13438     E8 FF 9F CD |  if_b	jmp	#LR__1540
1343c                 | ' repeat i from 112 to 127
1343c     70 20 06 F6 | 	mov	local02, #112
13440                 | LR__1541
13440                 | '   cursor[i]:=color  
13440     10 23 02 F6 | 	mov	local03, local02
13444     F2 22 02 F1 | 	add	local03, objptr
13448     11 1F 42 FC | 	wrbyte	local01, local03
1344c     01 20 06 F1 | 	add	local02, #1
13450     80 20 16 F2 | 	cmp	local02, #128 wc
13454     E8 FF 9F CD |  if_b	jmp	#LR__1541
13458                 | LR__1542
13458                 | ' 'repeat i from 0 to 127
13458                 | ' '  if ((i/8)//2)
13458                 | ' '    cursor[i]:=15
13458                 | ' '  else
13458                 | ' '    cursor[i]:=0
13458                 | ' '  if i>=120    
13458                 | ' '    cursor[i]:=40
13458                 | ' setspriteptr(17,@cursor)
13458     F2 14 02 F6 | 	mov	arg02, objptr
1345c     01 00 00 FF 
13460     32 E4 85 F1 | 	sub	objptr, ##562
13464     11 12 06 F6 | 	mov	arg01, #17
13468     48 03 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1346c                 | ' setspritesize(17,8,16)
1346c     11 12 06 F6 | 	mov	arg01, #17
13470     08 14 06 F6 | 	mov	arg02, #8
13474     10 16 06 F6 | 	mov	arg03, #16
13478     AC 03 B0 FD | 	call	#_hg010b_spin2_setspritesize
1347c                 | ' setspritepos(17,0,0)
1347c     11 12 06 F6 | 	mov	arg01, #17
13480     00 14 06 F6 | 	mov	arg02, #0
13484     00 16 06 F6 | 	mov	arg03, #0
13488     50 03 B0 FD | 	call	#_hg010b_spin2_setspritepos
1348c     A7 F0 03 F6 | 	mov	ptra, fp
13490     B2 00 A0 FD | 	call	#popregs_
13494                 | _hg010b_spin2_initcursor_ret
13494     2D 00 64 FD | 	ret
13498                 | 
13498                 | ' 
13498                 | '  
13498                 | ' pub setcursorcolor(color) |i
13498                 | _hg010b_spin2_setcursorcolor
13498                 | ' 
13498                 | ' 
13498                 | ' repeat i from 0 to 111
13498     00 00 06 F6 | 	mov	_var01, #0
1349c     01 00 00 FF 
134a0     32 E4 05 F1 | 	add	objptr, ##562
134a4     97 1A 48 FB | 	callpa	#(@LR__1552-@LR__1550)>>2,fcache_load_ptr_
134a8                 | LR__1550
134a8                 | '   cursor[i]:=0
134a8     00 03 02 F6 | 	mov	_var02, _var01
134ac     F2 02 02 F1 | 	add	_var02, objptr
134b0     01 01 48 FC | 	wrbyte	#0, _var02
134b4     01 00 06 F1 | 	add	_var01, #1
134b8     70 00 56 F2 | 	cmps	_var01, #112 wc
134bc     E8 FF 9F CD |  if_b	jmp	#LR__1550
134c0                 | ' repeat i from 112 to 127
134c0     70 00 06 F6 | 	mov	_var01, #112
134c4                 | LR__1551
134c4                 | '   cursor[i]:=color  
134c4     00 03 02 F6 | 	mov	_var02, _var01
134c8     F2 02 02 F1 | 	add	_var02, objptr
134cc     01 13 42 FC | 	wrbyte	arg01, _var02
134d0     01 00 06 F1 | 	add	_var01, #1
134d4     80 00 16 F2 | 	cmp	_var01, #128 wc
134d8     E8 FF 9F CD |  if_b	jmp	#LR__1551
134dc                 | LR__1552
134dc     01 00 00 FF 
134e0     32 E4 85 F1 | 	sub	objptr, ##562
134e4                 | _hg010b_spin2_setcursorcolor_ret
134e4     2D 00 64 FD | 	ret
134e8                 | 
134e8                 | '  
134e8                 | ' 
134e8                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
134e8                 | _hg010b_spin2_setmode
134e8     02 4A 05 F6 | 	mov	COUNT_, #2
134ec     A8 00 A0 FD | 	call	#pushregs_
134f0                 | ' 
134f0                 | ' 
134f0                 | ' dl_ptr:=@emptydl[0]
134f0     01 00 00 FF 
134f4     19 E4 05 F1 | 	add	objptr, ##537
134f8     F2 60 02 F6 | 	mov	muldivb_, objptr
134fc     FD E5 85 F1 | 	sub	objptr, #509
13500     F2 60 62 FC | 	wrlong	muldivb_, objptr
13504                 | ' 
13504                 | ' if cog>0 
13504     10 E4 05 F1 | 	add	objptr, #16
13508     F2 60 02 FB | 	rdlong	muldivb_, objptr
1350c     2C E4 85 F1 | 	sub	objptr, #44
13510     01 60 56 F2 | 	cmps	muldivb_, #1 wc
13514                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
13514     01 12 06 36 |  if_ae	mov	arg01, #1
13518     54 0F B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
1351c                 | ' xres:=1024
1351c     01 00 00 FF 
13520     22 E4 05 F1 | 	add	objptr, ##546
13524     02 00 80 FF 
13528     F2 00 68 FC | 	wrlong	##1024, objptr
1352c                 | ' yres:=576  
1352c     04 E4 05 F1 | 	add	objptr, #4
13530     01 00 80 FF 
13534     F2 80 68 FC | 	wrlong	##576, objptr
13538                 | ' ppl:=(timings[3])
13538     10 00 00 FF 
1353c     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
13540     F7 60 02 FB | 	rdlong	muldivb_, ptr__hg010b_spin2_dat__
13544     51 E5 85 F1 | 	sub	objptr, #337
13548     F2 60 62 FC | 	wrlong	muldivb_, objptr
1354c                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
1354c     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
13550     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
13554     01 1E 66 F0 | 	shl	local01, #1
13558     80 E4 85 F1 | 	sub	objptr, #128
1355c     F2 1E 62 FC | 	wrlong	local01, objptr
13560                 | ' cpl1:=cpl '' todo remove
13560     04 E4 05 F1 | 	add	objptr, #4
13564     F2 1E 62 FC | 	wrlong	local01, objptr
13568                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
13568     02 00 00 FF 
1356c     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
13570     41 E4 85 F1 | 	sub	objptr, #65
13574     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
13578                 | ' repeat i from 0 to 3
13578     00 20 06 F6 | 	mov	local02, #0
1357c     02 00 00 FF 
13580     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
13584     08 E4 05 F1 | 	add	objptr, #8
13588     97 20 48 FB | 	callpa	#(@LR__1561-@LR__1560)>>2,fcache_load_ptr_
1358c                 | LR__1560
1358c                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
1358c     10 1F 02 F6 | 	mov	local01, local02
13590     02 1E 66 F0 | 	shl	local01, #2
13594     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
13598     F2 60 02 FB | 	rdlong	muldivb_, objptr
1359c     11 60 66 F0 | 	shl	muldivb_, #17
135a0     0F 1F 02 FB | 	rdlong	local01, local01
135a4     30 1F 02 F1 | 	add	local01, muldivb_
135a8     80 40 38 FF 
135ac     00 1E 06 F1 | 	add	local01, ##1887502336
135b0     10 61 02 F6 | 	mov	muldivb_, local02
135b4     02 60 66 F0 | 	shl	muldivb_, #2
135b8     F7 60 02 F1 | 	add	muldivb_, ptr__hg010b_spin2_dat__
135bc     30 1F 62 FC | 	wrlong	local01, muldivb_
135c0     01 20 06 F1 | 	add	local02, #1
135c4     04 20 56 F2 | 	cmps	local02, #4 wc
135c8     C0 FF 9F CD |  if_b	jmp	#LR__1560
135cc                 | LR__1561
135cc     20 E4 85 F1 | 	sub	objptr, #32
135d0                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
135d0     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
135d4     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
135d8     14 1E 66 FC | 	wrlong	local01, #20
135dc                 | ' hubset(timings[10])
135dc     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
135e0     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
135e4     10 00 00 FF 
135e8     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
135ec     00 12 62 FD | 	hubset	arg01
135f0                 | ' waitms(1)                                                   	' wait for stabilization
135f0     01 12 06 F6 | 	mov	arg01, #1
135f4     BC 24 B0 FD | 	call	#__system___waitms
135f8     10 00 00 FF 
135fc     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
13600     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
13604     5D E4 05 F1 | 	add	objptr, #93
13608     F2 20 62 FC | 	wrlong	local02, objptr
1360c     10 1F 52 F6 | 	abs	local01, local02 wc
13610     04 1E 46 F0 | 	shr	local01, #4
13614     0F 1F 82 F6 | 	negc	local01, local01
13618     9C E4 05 F1 | 	add	objptr, #156
1361c     F2 1E 62 FC | 	wrlong	local01, objptr
13620     A4 E4 85 F1 | 	sub	objptr, #164
13624     F2 20 02 FB | 	rdlong	local02, objptr
13628     08 E4 05 F1 | 	add	objptr, #8
1362c     F2 1E 02 FB | 	rdlong	local01, objptr
13630     0F 21 02 FD | 	qmul	local02, local01
13634                 | ' lines:=timings[11]
13634                 | ' t_lines:=lines/16
13634                 | ' buflen:=cpl*lines						' framebuffer length in longs
13634     29 E4 85 F1 | 	sub	objptr, #41
13638                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
13638     19 1E C6 F9 | 	decod	local01, #25
1363c                 | ' mode_ptr:=@timings						' set pointers to timings
1363c     2C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #44
13640                 | ' graphmode:=1024+512+192+48							' det global variable
13640                 | ' makedl(graphmode)							' make a DL for the mode
13640     03 00 00 FF 
13644     F0 12 06 F6 | 	mov	arg01, ##1776
13648     18 20 62 FD | 	getqx	local02
1364c     F2 20 62 FC | 	wrlong	local02, objptr
13650     34 E4 85 F1 | 	sub	objptr, #52
13654     02 20 66 F0 | 	shl	local02, #2
13658     10 1F 82 F1 | 	sub	local01, local02
1365c     F2 1E 62 FC | 	wrlong	local01, objptr
13660     14 E4 05 F1 | 	add	objptr, #20
13664     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
13668     79 E4 05 F1 | 	add	objptr, #121
1366c     03 00 80 FF 
13670     F2 E0 69 FC | 	wrlong	##1776, objptr
13674     8D E4 85 F1 | 	sub	objptr, #141
13678     10 00 00 FF 
1367c     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
13680     AC 00 B0 FD | 	call	#_hg010b_spin2_makedl
13684                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
13684     F2 1E 02 FB | 	rdlong	local01, objptr
13688     D9 E4 05 F1 | 	add	objptr, #217
1368c     F2 1E 62 FC | 	wrlong	local01, objptr
13690                 | ' s_font_ptr:=font_ptr
13690     D5 E4 85 F1 | 	sub	objptr, #213
13694     F2 1E 02 FB | 	rdlong	local01, objptr
13698     D9 E4 05 F1 | 	add	objptr, #217
1369c     F2 1E 62 FC | 	wrlong	local01, objptr
136a0                 | ' s_lines:=lines
136a0     80 E4 85 F1 | 	sub	objptr, #128
136a4     F2 1E 02 FB | 	rdlong	local01, objptr
136a8     84 E4 05 F1 | 	add	objptr, #132
136ac     F2 1E 62 FC | 	wrlong	local01, objptr
136b0                 | ' s_buflen:=buflen
136b0     AD E4 85 F1 | 	sub	objptr, #173
136b4     F2 1E 02 FB | 	rdlong	local01, objptr
136b8     B5 E4 05 F1 | 	add	objptr, #181
136bc     F2 1E 62 FC | 	wrlong	local01, objptr
136c0                 | ' s_cpl:=cpl
136c0     94 E4 85 F1 | 	sub	objptr, #148
136c4     F2 1E 02 FB | 	rdlong	local01, objptr
136c8     90 E4 05 F1 | 	add	objptr, #144
136cc     F2 1E 62 FC | 	wrlong	local01, objptr
136d0                 | ' s_cpl1:=cpl
136d0     90 E4 85 F1 | 	sub	objptr, #144
136d4     F2 1E 02 FB | 	rdlong	local01, objptr
136d8     98 E4 05 F1 | 	add	objptr, #152
136dc     F2 1E 62 FC | 	wrlong	local01, objptr
136e0                 | ' st_lines:=t_lines
136e0     0C E4 05 F1 | 	add	objptr, #12
136e4     F2 1E 02 FB | 	rdlong	local01, objptr
136e8     04 E4 05 F1 | 	add	objptr, #4
136ec     F2 1E 62 FC | 	wrlong	local01, objptr
136f0                 | ' ppl:=ppl/xzoom  
136f0     28 E4 85 F1 | 	sub	objptr, #40
136f4     F2 5E 02 FB | 	rdlong	muldiva_, objptr
136f8     2C E4 05 F1 | 	add	objptr, #44
136fc     F2 60 02 FB | 	rdlong	muldivb_, objptr
13700     01 E5 85 F1 | 	sub	objptr, #257
13704     BA 00 A0 FD | 	call	#divide_
13708     D5 E4 05 F1 | 	add	objptr, #213
1370c     F2 60 62 FC | 	wrlong	muldivb_, objptr
13710                 | ' s_ppl:=ppl
13710     1C E4 05 F1 | 	add	objptr, #28
13714     F2 60 62 FC | 	wrlong	muldivb_, objptr
13718     F1 E4 85 F1 | 	sub	objptr, #241
1371c                 | ' waitms(20)							' wait 
1371c     14 12 06 F6 | 	mov	arg01, #20
13720     90 23 B0 FD | 	call	#__system___waitms
13724     A7 F0 03 F6 | 	mov	ptra, fp
13728     B2 00 A0 FD | 	call	#popregs_
1372c                 | _hg010b_spin2_setmode_ret
1372c     2D 00 64 FD | 	ret
13730                 | 
13730                 | ' 
13730                 | ' 
13730                 | ' '****************************************************************************************************************
13730                 | ' '                                                                                                             	*
13730                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
13730                 | ' '                                                                                                             	*
13730                 | ' '****************************************************************************************************************
13730                 | ' 
13730                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
13730                 | _hg010b_spin2_makedl
13730                 | ' 
13730                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
13730                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
13730                 | ' repeat i from 0 to 11                                                           ' clear DL
13730     00 00 06 F6 | 	mov	_var01, #0
13734     E9 E5 05 F1 | 	add	objptr, #489
13738     97 0E 48 FB | 	callpa	#(@LR__1571-@LR__1570)>>2,fcache_load_ptr_
1373c                 | LR__1570
1373c                 | '   displaylist[i]:=0 
1373c     00 03 02 F6 | 	mov	_var02, _var01
13740     02 02 66 F0 | 	shl	_var02, #2
13744     F2 02 02 F1 | 	add	_var02, objptr
13748     01 01 68 FC | 	wrlong	#0, _var02
1374c     01 00 06 F1 | 	add	_var01, #1
13750     0C 00 56 F2 | 	cmps	_var01, #12 wc
13754     E4 FF 9F CD |  if_b	jmp	#LR__1570
13758                 | LR__1571
13758                 | '                         ' 
13758                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
13758     8C E5 85 F1 | 	sub	objptr, #396
1375c     F2 02 02 FB | 	rdlong	_var02, objptr
13760     14 02 66 F0 | 	shl	_var02, #20
13764     01 02 06 F1 | 	add	_var02, #1
13768     04 E4 85 F1 | 	sub	objptr, #4
1376c     F2 00 02 FB | 	rdlong	_var01, objptr
13770     02 00 66 F0 | 	shl	_var01, #2
13774     04 00 66 F0 | 	shl	_var01, #4
13778     00 03 02 F1 | 	add	_var02, _var01
1377c     90 E5 05 F1 | 	add	objptr, #400
13780     F2 02 62 FC | 	wrlong	_var02, objptr
13784     E9 E5 85 F1 | 	sub	objptr, #489
13788                 | ' displaylist[1]:=buf_ptr<<4+%10  
13788     F2 02 02 FB | 	rdlong	_var02, objptr
1378c     04 02 66 F0 | 	shl	_var02, #4
13790     02 02 06 F1 | 	add	_var02, #2
13794     ED E5 05 F1 | 	add	objptr, #493
13798     F2 02 62 FC | 	wrlong	_var02, objptr
1379c                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
1379c     04 E4 85 F1 | 	sub	objptr, #4
137a0     F2 02 02 F6 | 	mov	_var02, objptr
137a4     CD E5 85 F1 | 	sub	objptr, #461
137a8     F2 02 62 FC | 	wrlong	_var02, objptr
137ac     1C E4 85 F1 | 	sub	objptr, #28
137b0                 | _hg010b_spin2_makedl_ret
137b0     2D 00 64 FD | 	ret
137b4                 | 
137b4                 | ' 
137b4                 | ' 
137b4                 | ' '****************************************************************************************************************
137b4                 | ' '                                                                        					*
137b4                 | ' '  Graphic primitives                                                    					*
137b4                 | ' '                                                                        					*
137b4                 | ' '****************************************************************************************************************
137b4                 | ' 
137b4                 | ' pub setspriteptr(num,ptr)
137b4                 | _hg010b_spin2_setspriteptr
137b4                 | ' long[@spr1ptr+12*num]:=ptr
137b4     0D E5 05 F1 | 	add	objptr, #269
137b8     F2 00 02 F6 | 	mov	_var01, objptr
137bc     09 03 02 F6 | 	mov	_var02, arg01
137c0     01 02 66 F0 | 	shl	_var02, #1
137c4     09 03 02 F1 | 	add	_var02, arg01
137c8     02 02 66 F0 | 	shl	_var02, #2
137cc     01 01 02 F1 | 	add	_var01, _var02
137d0     00 15 62 FC | 	wrlong	arg02, _var01
137d4     0D E5 85 F1 | 	sub	objptr, #269
137d8                 | _hg010b_spin2_setspriteptr_ret
137d8     2D 00 64 FD | 	ret
137dc                 | 
137dc                 | ' 
137dc                 | ' pub setspritepos(num,x,y)
137dc                 | _hg010b_spin2_setspritepos
137dc                 | ' word[@spr1ptr+12*num+4]:=x
137dc     0D E5 05 F1 | 	add	objptr, #269
137e0     F2 00 02 F6 | 	mov	_var01, objptr
137e4     09 03 02 F6 | 	mov	_var02, arg01
137e8     01 02 66 F0 | 	shl	_var02, #1
137ec     09 03 02 F1 | 	add	_var02, arg01
137f0     02 02 66 F0 | 	shl	_var02, #2
137f4     01 01 02 F1 | 	add	_var01, _var02
137f8     04 00 06 F1 | 	add	_var01, #4
137fc     00 15 52 FC | 	wrword	arg02, _var01
13800                 | ' word[@spr1ptr+12*num+6]:=y
13800     F2 00 02 F6 | 	mov	_var01, objptr
13804     09 03 02 F6 | 	mov	_var02, arg01
13808     01 02 66 F0 | 	shl	_var02, #1
1380c     09 03 02 F1 | 	add	_var02, arg01
13810     02 02 66 F0 | 	shl	_var02, #2
13814     01 01 02 F1 | 	add	_var01, _var02
13818     06 00 06 F1 | 	add	_var01, #6
1381c     00 17 52 FC | 	wrword	arg03, _var01
13820     0D E5 85 F1 | 	sub	objptr, #269
13824                 | _hg010b_spin2_setspritepos_ret
13824     2D 00 64 FD | 	ret
13828                 | 
13828                 | ' 
13828                 | ' pub setspritesize(num,w,h)
13828                 | _hg010b_spin2_setspritesize
13828                 | ' word[@spr1ptr+12*num+8]:=w
13828     0D E5 05 F1 | 	add	objptr, #269
1382c     F2 00 02 F6 | 	mov	_var01, objptr
13830     09 03 02 F6 | 	mov	_var02, arg01
13834     01 02 66 F0 | 	shl	_var02, #1
13838     09 03 02 F1 | 	add	_var02, arg01
1383c     02 02 66 F0 | 	shl	_var02, #2
13840     01 01 02 F1 | 	add	_var01, _var02
13844     08 00 06 F1 | 	add	_var01, #8
13848     00 15 52 FC | 	wrword	arg02, _var01
1384c                 | ' word[@spr1ptr+12*num+10]:=h
1384c     F2 00 02 F6 | 	mov	_var01, objptr
13850     09 03 02 F6 | 	mov	_var02, arg01
13854     01 02 66 F0 | 	shl	_var02, #1
13858     09 03 02 F1 | 	add	_var02, arg01
1385c     02 02 66 F0 | 	shl	_var02, #2
13860     01 01 02 F1 | 	add	_var01, _var02
13864     0A 00 06 F1 | 	add	_var01, #10
13868     00 17 52 FC | 	wrword	arg03, _var01
1386c     0D E5 85 F1 | 	sub	objptr, #269
13870                 | _hg010b_spin2_setspritesize_ret
13870     2D 00 64 FD | 	ret
13874                 | 
13874                 | ' 
13874                 | ' 
13874                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
13874                 | ' 
13874                 | ' 
13874                 | ' pub putpixel(x,y,c)
13874                 | _hg010b_spin2_putpixel
13874     04 4A 05 F6 | 	mov	COUNT_, #4
13878     A8 00 A0 FD | 	call	#pushregs_
1387c     09 1F 02 F6 | 	mov	local01, arg01
13880                 | ' 
13880                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
13880     00 20 06 F6 | 	mov	local02, #0
13884     00 1E 56 F2 | 	cmps	local01, #0 wc
13888     01 20 66 36 |  if_ae	neg	local02, #1
1388c     E5 E4 05 F1 | 	add	objptr, #229
13890     F2 1A 02 FB | 	rdlong	arg05, objptr
13894     02 1A 66 F0 | 	shl	arg05, #2
13898     0D 1F 52 F2 | 	cmps	local01, arg05 wc
1389c     11 23 A2 F1 | 	subx	local03, local03
138a0     11 21 02 F5 | 	and	local02, local03
138a4     00 22 06 F6 | 	mov	local03, #0
138a8     00 14 56 F2 | 	cmps	arg02, #0 wc
138ac     01 22 66 36 |  if_ae	neg	local03, #1
138b0     11 21 02 F5 | 	and	local02, local03
138b4     04 E4 85 F1 | 	sub	objptr, #4
138b8     F2 22 02 FB | 	rdlong	local03, objptr
138bc     E1 E4 85 F1 | 	sub	objptr, #225
138c0     11 15 52 F2 | 	cmps	arg02, local03 wc
138c4     12 25 A2 F1 | 	subx	local04, local04
138c8     12 21 CA F7 | 	test	local02, local04 wz
138cc     48 00 90 AD |  if_e	jmp	#LR__1580
138d0     D9 E4 05 F1 | 	add	objptr, #217
138d4     F2 12 02 FB | 	rdlong	arg01, objptr
138d8     14 E4 05 F1 | 	add	objptr, #20
138dc     F2 24 02 FB | 	rdlong	local04, objptr
138e0     02 24 66 F0 | 	shl	local04, #2
138e4     0A 25 02 FD | 	qmul	local04, arg02
138e8                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
138e8     0B 15 02 F6 | 	mov	arg02, arg03
138ec     01 16 06 F6 | 	mov	arg03, #1
138f0     00 18 06 F6 | 	mov	arg04, #0
138f4     01 1A 06 F6 | 	mov	arg05, #1
138f8     0A 00 00 FF 
138fc     D3 E5 05 F1 | 	add	objptr, ##5587
13900     18 24 62 FD | 	getqx	local04
13904     0F 25 02 F1 | 	add	local04, local01
13908     12 13 02 F1 | 	add	arg01, local04
1390c     FC 14 B0 FD | 	call	#_psram_spin2_fill
13910     0B 00 00 FF 
13914     C0 E4 85 F1 | 	sub	objptr, ##5824
13918                 | LR__1580
13918     A7 F0 03 F6 | 	mov	ptra, fp
1391c     B2 00 A0 FD | 	call	#popregs_
13920                 | _hg010b_spin2_putpixel_ret
13920     2D 00 64 FD | 	ret
13924                 | 
13924                 | ' 
13924                 | ' pub putpixel2(x,y,c)
13924                 | _hg010b_spin2_putpixel2
13924     02 4A 05 F6 | 	mov	COUNT_, #2
13928     A8 00 A0 FD | 	call	#pushregs_
1392c     D9 E4 05 F1 | 	add	objptr, #217
13930     F2 1E 02 FB | 	rdlong	local01, objptr
13934     14 E4 05 F1 | 	add	objptr, #20
13938     F2 1A 02 FB | 	rdlong	arg05, objptr
1393c     02 1A 66 F0 | 	shl	arg05, #2
13940     0A 1B 02 FD | 	qmul	arg05, arg02
13944                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
13944     0B 15 02 F6 | 	mov	arg02, arg03
13948     01 16 06 F6 | 	mov	arg03, #1
1394c     00 18 06 F6 | 	mov	arg04, #0
13950     01 1A 06 F6 | 	mov	arg05, #1
13954     0A 00 00 FF 
13958     D3 E5 05 F1 | 	add	objptr, ##5587
1395c     18 20 62 FD | 	getqx	local02
13960     09 21 02 F1 | 	add	local02, arg01
13964     10 1F 02 F1 | 	add	local01, local02
13968     0F 13 02 F6 | 	mov	arg01, local01
1396c     9C 14 B0 FD | 	call	#_psram_spin2_fill
13970     0B 00 00 FF 
13974     C0 E4 85 F1 | 	sub	objptr, ##5824
13978     A7 F0 03 F6 | 	mov	ptra, fp
1397c     B2 00 A0 FD | 	call	#popregs_
13980                 | _hg010b_spin2_putpixel2_ret
13980     2D 00 64 FD | 	ret
13984                 | 
13984                 | ' 
13984                 | ' pub getpixel2(x,y): c 
13984                 | _hg010b_spin2_getpixel2
13984     02 4A 05 F6 | 	mov	COUNT_, #2
13988     A8 00 A0 FD | 	call	#pushregs_
1398c     0C F0 07 F1 | 	add	ptra, #12
13990     04 4E 05 F1 | 	add	fp, #4
13994     A7 12 62 FC | 	wrlong	arg01, fp
13998     04 4E 05 F1 | 	add	fp, #4
1399c     A7 14 62 FC | 	wrlong	arg02, fp
139a0     08 4E 85 F1 | 	sub	fp, #8
139a4     A7 00 68 FC | 	wrlong	#0, fp
139a8     A7 12 02 F6 | 	mov	arg01, fp
139ac     D9 E4 05 F1 | 	add	objptr, #217
139b0     F2 14 02 FB | 	rdlong	arg02, objptr
139b4     14 E4 05 F1 | 	add	objptr, #20
139b8     F2 16 02 FB | 	rdlong	arg03, objptr
139bc     02 16 66 F0 | 	shl	arg03, #2
139c0     08 4E 05 F1 | 	add	fp, #8
139c4     A7 FA 01 FB | 	rdlong	result1, fp
139c8     FD 16 02 FD | 	qmul	arg03, result1
139cc                 | ' 
139cc                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
139cc     04 4E 85 F1 | 	sub	fp, #4
139d0     A7 1E 02 FB | 	rdlong	local01, fp
139d4     04 4E 85 F1 | 	sub	fp, #4
139d8     01 16 06 F6 | 	mov	arg03, #1
139dc     0A 00 00 FF 
139e0     D3 E5 05 F1 | 	add	objptr, ##5587
139e4     18 20 62 FD | 	getqx	local02
139e8     0F 21 02 F1 | 	add	local02, local01
139ec     10 15 02 F1 | 	add	arg02, local02
139f0     E0 12 B0 FD | 	call	#_psram_spin2_read1
139f4     0B 00 00 FF 
139f8     C0 E4 85 F1 | 	sub	objptr, ##5824
139fc                 | ' return c
139fc     A7 FA 01 FB | 	rdlong	result1, fp
13a00     A7 F0 03 F6 | 	mov	ptra, fp
13a04     B2 00 A0 FD | 	call	#popregs_
13a08                 | _hg010b_spin2_getpixel2_ret
13a08     2D 00 64 FD | 	ret
13a0c                 | 
13a0c                 | '   
13a0c                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
13a0c                 | ' 
13a0c                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
13a0c                 | _hg010b_spin2_fastline
13a0c     02 4A 05 F6 | 	mov	COUNT_, #2
13a10     A8 00 A0 FD | 	call	#pushregs_
13a14     09 1F 02 F6 | 	mov	local01, arg01
13a18     0A 21 02 F6 | 	mov	local02, arg02
13a1c                 | ' 
13a1c                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
13a1c     00 16 56 F2 | 	cmps	arg03, #0 wc
13a20     F4 00 90 CD |  if_b	jmp	#LR__1590
13a24     01 00 00 FF 
13a28     26 E4 05 F1 | 	add	objptr, ##550
13a2c     F2 1A 02 FB | 	rdlong	arg05, objptr
13a30     01 00 00 FF 
13a34     26 E4 85 F1 | 	sub	objptr, ##550
13a38     0D 17 52 F2 | 	cmps	arg03, arg05 wc
13a3c     D8 00 90 3D |  if_ae	jmp	#LR__1590
13a40     00 1E 56 F2 | 	cmps	local01, #0 wc
13a44     00 20 56 C2 |  if_b	cmps	local02, #0 wc
13a48     CC 00 90 CD |  if_b	jmp	#LR__1590
13a4c     01 00 00 FF 
13a50     22 E4 05 F1 | 	add	objptr, ##546
13a54     F2 1A 02 FB | 	rdlong	arg05, objptr
13a58     01 00 00 FF 
13a5c     22 E4 85 F1 | 	sub	objptr, ##546
13a60     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
13a64     01 00 00 1F 
13a68     22 E4 05 11 |  if_a	add	objptr, ##546
13a6c     F2 12 02 1B |  if_a	rdlong	arg01, objptr
13a70     01 00 00 1F 
13a74     22 E4 85 11 |  if_a	sub	objptr, ##546
13a78     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
13a7c                 | '   return
13a7c     98 00 90 1D |  if_a	jmp	#LR__1590
13a80     10 1F 5A F2 | 	cmps	local01, local02 wcz
13a84     0F 1B 02 16 |  if_a	mov	arg05, local01
13a88     10 1F 02 16 |  if_a	mov	local01, local02
13a8c     0D 21 02 16 |  if_a	mov	local02, arg05
13a90     00 1E 56 F2 | 	cmps	local01, #0 wc
13a94     00 1E 06 C6 |  if_b	mov	local01, #0
13a98     01 00 00 FF 
13a9c     22 E4 05 F1 | 	add	objptr, ##546
13aa0     F2 1A 02 FB | 	rdlong	arg05, objptr
13aa4     01 00 00 FF 
13aa8     22 E4 85 F1 | 	sub	objptr, ##546
13aac     0D 21 52 F2 | 	cmps	local02, arg05 wc
13ab0     01 00 00 3F 
13ab4     22 E4 05 31 |  if_ae	add	objptr, ##546
13ab8     F2 20 02 3B |  if_ae	rdlong	local02, objptr
13abc     01 00 00 3F 
13ac0     22 E4 85 31 |  if_ae	sub	objptr, ##546
13ac4     D9 E4 05 F1 | 	add	objptr, #217
13ac8     F2 12 02 FB | 	rdlong	arg01, objptr
13acc     14 E4 05 F1 | 	add	objptr, #20
13ad0     F2 1A 02 FB | 	rdlong	arg05, objptr
13ad4     02 1A 66 F0 | 	shl	arg05, #2
13ad8     0B 1B 02 FD | 	qmul	arg05, arg03
13adc                 | ' if x1>x2
13adc                 | '   x1,x2:=x2,x1
13adc                 | ' if x1<0 
13adc                 | '   x1:=0
13adc                 | ' if x2>=xres
13adc                 | '   x2:=xres-1  
13adc     01 20 86 31 |  if_ae	sub	local02, #1
13ae0                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
13ae0     01 16 06 F6 | 	mov	arg03, #1
13ae4     10 17 02 F1 | 	add	arg03, local02
13ae8     0F 17 82 F1 | 	sub	arg03, local01
13aec     0C 15 02 F6 | 	mov	arg02, arg04
13af0     00 18 06 F6 | 	mov	arg04, #0
13af4     01 1A 06 F6 | 	mov	arg05, #1
13af8     0A 00 00 FF 
13afc     D3 E5 05 F1 | 	add	objptr, ##5587
13b00     18 20 62 FD | 	getqx	local02
13b04     0F 21 02 F1 | 	add	local02, local01
13b08     10 13 02 F1 | 	add	arg01, local02
13b0c     FC 12 B0 FD | 	call	#_psram_spin2_fill
13b10     0B 00 00 FF 
13b14     C0 E4 85 F1 | 	sub	objptr, ##5824
13b18                 | LR__1590
13b18     A7 F0 03 F6 | 	mov	ptra, fp
13b1c     B2 00 A0 FD | 	call	#popregs_
13b20                 | _hg010b_spin2_fastline_ret
13b20     2D 00 64 FD | 	ret
13b24                 | 
13b24                 | ' 
13b24                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
13b24                 | _hg010b_spin2_draw
13b24     0E 4A 05 F6 | 	mov	COUNT_, #14
13b28     A8 00 A0 FD | 	call	#pushregs_
13b2c     09 1F 02 F6 | 	mov	local01, arg01
13b30     0A 21 02 F6 | 	mov	local02, arg02
13b34     0B 23 02 F6 | 	mov	local03, arg03
13b38     0C 25 02 F6 | 	mov	local04, arg04
13b3c     0D 27 02 F6 | 	mov	local05, arg05
13b40                 | ' 
13b40                 | ' if (y1==y2)
13b40     12 21 0A F2 | 	cmp	local02, local04 wz
13b44     18 00 90 5D |  if_ne	jmp	#LR__1600
13b48                 | '   fastline(x1,x2,y1,c)
13b48     0F 13 02 F6 | 	mov	arg01, local01
13b4c     11 15 02 F6 | 	mov	arg02, local03
13b50     10 17 02 F6 | 	mov	arg03, local02
13b54     13 19 02 F6 | 	mov	arg04, local05
13b58     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
13b5c     F8 00 90 FD | 	jmp	#LR__1606
13b60                 | LR__1600
13b60                 | ' else  
13b60                 | '   x:=x1
13b60     0F 29 02 F6 | 	mov	local06, local01
13b64                 | '   y:=y1
13b64     10 2B 02 F6 | 	mov	local07, local02
13b68                 | ' 
13b68                 | '   if (x1<x2) 
13b68     11 1F 52 F2 | 	cmps	local01, local03 wc
13b6c                 | '     xi:=1
13b6c     01 2C 06 C6 |  if_b	mov	local08, #1
13b70                 | '     dx:=x2-x1
13b70     11 2F 02 C6 |  if_b	mov	local09, local03
13b74     0F 2F 82 C1 |  if_b	sub	local09, local01
13b78                 | '   else
13b78                 | '     xi:=-1
13b78     01 2C 66 36 |  if_ae	neg	local08, #1
13b7c                 | '     dx:=x1-x2
13b7c     11 1F 82 31 |  if_ae	sub	local01, local03
13b80     0F 2F 02 36 |  if_ae	mov	local09, local01
13b84                 | '   
13b84                 | '   if (y1<y2) 
13b84     12 21 52 F2 | 	cmps	local02, local04 wc
13b88                 | '     yi:=1
13b88     01 30 06 C6 |  if_b	mov	local10, #1
13b8c                 | '     dy:=y2-y1
13b8c     12 33 02 C6 |  if_b	mov	local11, local04
13b90     10 33 82 C1 |  if_b	sub	local11, local02
13b94                 | '   else
13b94                 | '     yi:=-1
13b94     01 30 66 36 |  if_ae	neg	local10, #1
13b98                 | '     dy:=y1-y2
13b98     12 21 82 31 |  if_ae	sub	local02, local04
13b9c     10 33 02 36 |  if_ae	mov	local11, local02
13ba0                 | ' 
13ba0                 | '   putpixel(x,y,c)
13ba0     13 17 02 F6 | 	mov	arg03, local05
13ba4     14 13 02 F6 | 	mov	arg01, local06
13ba8     15 15 02 F6 | 	mov	arg02, local07
13bac     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
13bb0                 | ' 
13bb0                 | '   if (dx>dy)
13bb0     19 2F 5A F2 | 	cmps	local09, local11 wcz
13bb4     50 00 90 ED |  if_be	jmp	#LR__1602
13bb8                 | '     ai:=(dy-dx)*2
13bb8     19 35 02 F6 | 	mov	local12, local11
13bbc     17 35 82 F1 | 	sub	local12, local09
13bc0     01 34 66 F0 | 	shl	local12, #1
13bc4                 | '     bi:=dy*2
13bc4     01 32 66 F0 | 	shl	local11, #1
13bc8     19 37 02 F6 | 	mov	local13, local11
13bcc                 | '     d:= bi-dx
13bcc     1B 39 02 F6 | 	mov	local14, local13
13bd0     17 39 82 F1 | 	sub	local14, local09
13bd4                 | '     repeat while (x<>x2) 
13bd4                 | LR__1601
13bd4     11 29 0A F2 | 	cmp	local06, local03 wz
13bd8     7C 00 90 AD |  if_e	jmp	#LR__1605
13bdc                 | '       if (d>=0) 
13bdc     00 38 56 F2 | 	cmps	local14, #0 wc
13be0                 | '         x+=xi
13be0     16 29 02 31 |  if_ae	add	local06, local08
13be4                 | '         y+=yi
13be4     18 2B 02 31 |  if_ae	add	local07, local10
13be8                 | '         d+=ai
13be8     1A 39 02 31 |  if_ae	add	local14, local12
13bec                 | '       else
13bec                 | '         d+=bi
13bec     1B 39 02 C1 |  if_b	add	local14, local13
13bf0                 | '         x+=xi
13bf0     16 29 02 C1 |  if_b	add	local06, local08
13bf4                 | '       putpixel(x,y,c)
13bf4     14 13 02 F6 | 	mov	arg01, local06
13bf8     15 15 02 F6 | 	mov	arg02, local07
13bfc     13 17 02 F6 | 	mov	arg03, local05
13c00     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
13c04     CC FF 9F FD | 	jmp	#LR__1601
13c08                 | LR__1602
13c08                 | '   else
13c08                 | '     ai:=(dx-dy)*2
13c08     17 35 02 F6 | 	mov	local12, local09
13c0c     19 35 82 F1 | 	sub	local12, local11
13c10     01 34 66 F0 | 	shl	local12, #1
13c14                 | '     bi:=dx*2
13c14     01 2E 66 F0 | 	shl	local09, #1
13c18     17 37 02 F6 | 	mov	local13, local09
13c1c                 | '     d:=bi-dy
13c1c     1B 39 02 F6 | 	mov	local14, local13
13c20     19 39 82 F1 | 	sub	local14, local11
13c24                 | '     repeat while (y<>y2)
13c24                 | LR__1603
13c24     12 2B 0A F2 | 	cmp	local07, local04 wz
13c28     2C 00 90 AD |  if_e	jmp	#LR__1604
13c2c                 | '       if (d>=0)
13c2c     00 38 56 F2 | 	cmps	local14, #0 wc
13c30                 | '         x+=xi
13c30     16 29 02 31 |  if_ae	add	local06, local08
13c34                 | '         y+=yi
13c34     18 2B 02 31 |  if_ae	add	local07, local10
13c38                 | '         d+=ai
13c38     1A 39 02 31 |  if_ae	add	local14, local12
13c3c                 | '       else
13c3c                 | '         d+=bi
13c3c     1B 39 02 C1 |  if_b	add	local14, local13
13c40                 | '         y+=yi
13c40     18 2B 02 C1 |  if_b	add	local07, local10
13c44                 | '       putpixel(x, y,c)
13c44     14 13 02 F6 | 	mov	arg01, local06
13c48     15 15 02 F6 | 	mov	arg02, local07
13c4c     13 17 02 F6 | 	mov	arg03, local05
13c50     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
13c54     CC FF 9F FD | 	jmp	#LR__1603
13c58                 | LR__1604
13c58                 | LR__1605
13c58                 | LR__1606
13c58     A7 F0 03 F6 | 	mov	ptra, fp
13c5c     B2 00 A0 FD | 	call	#popregs_
13c60                 | _hg010b_spin2_draw_ret
13c60     2D 00 64 FD | 	ret
13c64                 | 
13c64                 | '  
13c64                 | ' pub fillpush(val) 
13c64                 | _hg010b_spin2_fillpush
13c64                 | ' fillstack[fillptr]:=val
13c64     0B 00 00 FF 
13c68     B6 E4 05 F1 | 	add	objptr, ##5814
13c6c     F2 00 02 FB | 	rdlong	_var01, objptr
13c70     02 00 66 F0 | 	shl	_var01, #2
13c74     0A 00 00 FF 
13c78     00 E4 85 F1 | 	sub	objptr, ##5120
13c7c     F2 00 02 F1 | 	add	_var01, objptr
13c80     00 13 62 FC | 	wrlong	arg01, _var01
13c84                 | ' fillptr+=1   
13c84     0A 00 00 FF 
13c88     00 E4 05 F1 | 	add	objptr, ##5120
13c8c     F2 00 02 FB | 	rdlong	_var01, objptr
13c90     01 00 06 F1 | 	add	_var01, #1
13c94     F2 00 62 FC | 	wrlong	_var01, objptr
13c98     0B 00 00 FF 
13c9c     B6 E4 85 F1 | 	sub	objptr, ##5814
13ca0                 | _hg010b_spin2_fillpush_ret
13ca0     2D 00 64 FD | 	ret
13ca4                 | 
13ca4                 | ' 
13ca4                 | '     
13ca4                 | ' pub fillpop() : val
13ca4                 | _hg010b_spin2_fillpop
13ca4                 | ' 
13ca4                 | ' fillptr-=1
13ca4     0B 00 00 FF 
13ca8     B6 E4 05 F1 | 	add	objptr, ##5814
13cac     F2 FA 01 FB | 	rdlong	result1, objptr
13cb0     01 FA 85 F1 | 	sub	result1, #1
13cb4     F2 FA 61 FC | 	wrlong	result1, objptr
13cb8                 | ' if fillptr<0
13cb8     0B 00 00 FF 
13cbc     B6 E4 85 F1 | 	sub	objptr, ##5814
13cc0     00 FA 55 F2 | 	cmps	result1, #0 wc
13cc4                 | '   fillptr:=0
13cc4     0B 00 00 CF 
13cc8     B6 E4 05 C1 |  if_b	add	objptr, ##5814
13ccc     F2 00 68 CC |  if_b	wrlong	#0, objptr
13cd0     0B 00 00 CF 
13cd4     B6 E4 85 C1 |  if_b	sub	objptr, ##5814
13cd8                 | '   val:=-12345
13cd8     E7 FF 7F CF 
13cdc     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
13ce0     28 00 90 CD |  if_b	jmp	#LR__1610
13ce4                 | ' else 
13ce4                 | '   val:=fillstack[fillptr]
13ce4     0B 00 00 FF 
13ce8     B6 E4 05 F1 | 	add	objptr, ##5814
13cec     F2 00 02 FB | 	rdlong	_var01, objptr
13cf0     02 00 66 F0 | 	shl	_var01, #2
13cf4     0A 00 00 FF 
13cf8     00 E4 85 F1 | 	sub	objptr, ##5120
13cfc     F2 00 02 F1 | 	add	_var01, objptr
13d00     00 01 02 FB | 	rdlong	_var01, _var01
13d04     01 00 00 FF 
13d08     B6 E4 85 F1 | 	sub	objptr, ##694
13d0c                 | LR__1610
13d0c                 | ' return val
13d0c     00 FB 01 F6 | 	mov	result1, _var01
13d10                 | _hg010b_spin2_fillpop_ret
13d10     2D 00 64 FD | 	ret
13d14                 | 
13d14                 | ' 
13d14                 | '       
13d14                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
13d14                 | _hg010b_spin2_fill
13d14     0B 4A 05 F6 | 	mov	COUNT_, #11
13d18     A8 00 A0 FD | 	call	#pushregs_
13d1c                 | ' 
13d1c                 | ' newcolor:=newcolor & 255
13d1c     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
13d20                 | ' oldcolor:=oldcolor & 255
13d20     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
13d24                 | ' 
13d24                 | ' if (oldcolor == newcolor) 
13d24     0F 21 0A F2 | 	cmp	local02, local01 wz
13d28                 | '   return
13d28     70 02 90 AD |  if_e	jmp	#LR__1629
13d2c                 | ' 
13d2c                 | ' fillptr:=0
13d2c     0B 00 00 FF 
13d30     B6 E4 05 F1 | 	add	objptr, ##5814
13d34     F2 00 68 FC | 	wrlong	#0, objptr
13d38                 | ' fillmax:=0
13d38     04 E4 05 F1 | 	add	objptr, #4
13d3c     F2 00 68 FC | 	wrlong	#0, objptr
13d40     0B 00 00 FF 
13d44     BA E4 85 F1 | 	sub	objptr, ##5818
13d48                 | ' fillpush(x)
13d48     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
13d4c                 | ' fillpush(y)
13d4c     0A 13 02 F6 | 	mov	arg01, arg02
13d50     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
13d54                 | ' y:=fillpop()
13d54     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
13d58     FD 22 02 F6 | 	mov	local03, result1
13d5c                 | ' x:=fillpop()
13d5c     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
13d60     FD 24 02 F6 | 	mov	local04, result1
13d64                 | ' 'pinhigh(38)
13d64                 | ' repeat while (x>-1)       
13d64                 | LR__1620
13d64     00 24 56 F2 | 	cmps	local04, #0 wc
13d68     30 02 90 CD |  if_b	jmp	#LR__1628
13d6c                 | '  ' pintoggle(39)
13d6c                 | '   x1 := x
13d6c     12 27 02 F6 | 	mov	local05, local04
13d70                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
13d70                 | LR__1621
13d70     00 28 06 F6 | 	mov	local06, #0
13d74     00 2A 06 F6 | 	mov	local07, #0
13d78     00 26 56 F2 | 	cmps	local05, #0 wc
13d7c     01 2A 66 36 |  if_ae	neg	local07, #1
13d80     00 2A 0E F2 | 	cmp	local07, #0 wz
13d84     00 28 26 56 |  if_ne	not	local06, #0
13d88     00 2C 06 F6 | 	mov	local08, #0
13d8c     00 2E 06 F6 | 	mov	local09, #0
13d90     11 15 02 F6 | 	mov	arg02, local03
13d94     13 13 02 F6 | 	mov	arg01, local05
13d98     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
13d9c     10 FB 09 F2 | 	cmp	result1, local02 wz
13da0     00 2E 26 A6 |  if_e	not	local09, #0
13da4     00 2E 0E F2 | 	cmp	local09, #0 wz
13da8     00 2C 26 56 |  if_ne	not	local08, #0
13dac     16 29 CA F7 | 	test	local06, local08 wz
13db0                 | '     x1--
13db0     01 26 86 51 |  if_ne	sub	local05, #1
13db4     B8 FF 9F 5D |  if_ne	jmp	#LR__1621
13db8                 | '   x1++
13db8     01 26 06 F1 | 	add	local05, #1
13dbc                 | '   spanabove := 0
13dbc     00 30 06 F6 | 	mov	local10, #0
13dc0                 | '   spanbelow := 0
13dc0     00 32 06 F6 | 	mov	local11, #0
13dc4                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
13dc4                 | LR__1622
13dc4     00 28 06 F6 | 	mov	local06, #0
13dc8     02 00 00 FF 
13dcc     00 26 56 F2 | 	cmps	local05, ##1024 wc
13dd0     00 28 26 C6 |  if_b	not	local06, #0
13dd4     00 2C 06 F6 | 	mov	local08, #0
13dd8     00 2E 06 F6 | 	mov	local09, #0
13ddc     11 15 02 F6 | 	mov	arg02, local03
13de0     13 13 02 F6 | 	mov	arg01, local05
13de4     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
13de8     10 FB 09 F2 | 	cmp	result1, local02 wz
13dec     00 2E 26 A6 |  if_e	not	local09, #0
13df0     00 2E 0E F2 | 	cmp	local09, #0 wz
13df4     00 2C 26 56 |  if_ne	not	local08, #0
13df8     16 29 CA F7 | 	test	local06, local08 wz
13dfc     88 01 90 AD |  if_e	jmp	#LR__1627
13e00                 | '     putpixel2 (x1,y, newcolor & 255)
13e00     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
13e04     13 13 02 F6 | 	mov	arg01, local05
13e08     11 15 02 F6 | 	mov	arg02, local03
13e0c     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
13e10                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
13e10     00 28 06 F6 | 	mov	local06, #0
13e14     00 2A 06 F6 | 	mov	local07, #0
13e18     00 30 0E F2 | 	cmp	local10, #0 wz
13e1c     01 22 56 A2 |  if_e	cmps	local03, #1 wc
13e20     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
13e24     00 2A 0E F2 | 	cmp	local07, #0 wz
13e28     00 28 26 56 |  if_ne	not	local06, #0
13e2c     00 2C 06 F6 | 	mov	local08, #0
13e30     00 2E 06 F6 | 	mov	local09, #0
13e34     11 15 02 F6 | 	mov	arg02, local03
13e38     01 14 86 F1 | 	sub	arg02, #1
13e3c     13 13 02 F6 | 	mov	arg01, local05
13e40     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
13e44     10 FB 09 F2 | 	cmp	result1, local02 wz
13e48     00 2E 26 A6 |  if_e	not	local09, #0
13e4c     00 2E 0E F2 | 	cmp	local09, #0 wz
13e50     00 2C 26 56 |  if_ne	not	local08, #0
13e54     16 29 CA F7 | 	test	local06, local08 wz
13e58     1C 00 90 AD |  if_e	jmp	#LR__1623
13e5c                 | '       fillpush(x1)
13e5c     13 13 02 F6 | 	mov	arg01, local05
13e60     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
13e64                 | '       fillpush(y-1)
13e64     11 13 02 F6 | 	mov	arg01, local03
13e68     01 12 86 F1 | 	sub	arg01, #1
13e6c     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
13e70                 | '       spanabove := 1 
13e70     01 30 06 F6 | 	mov	local10, #1
13e74     4C 00 90 FD | 	jmp	#LR__1624
13e78                 | LR__1623
13e78                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
13e78     00 28 06 F6 | 	mov	local06, #0
13e7c     00 2A 06 F6 | 	mov	local07, #0
13e80     00 30 0E F2 | 	cmp	local10, #0 wz
13e84     01 22 56 52 |  if_ne	cmps	local03, #1 wc
13e88     01 2A 66 16 |  if_a	neg	local07, #1
13e8c     00 2A 0E F2 | 	cmp	local07, #0 wz
13e90     00 28 26 56 |  if_ne	not	local06, #0
13e94     00 2C 06 F6 | 	mov	local08, #0
13e98     00 2E 06 F6 | 	mov	local09, #0
13e9c     11 15 02 F6 | 	mov	arg02, local03
13ea0     01 14 86 F1 | 	sub	arg02, #1
13ea4     13 13 02 F6 | 	mov	arg01, local05
13ea8     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
13eac     10 FB 09 F2 | 	cmp	result1, local02 wz
13eb0     00 2E 26 56 |  if_ne	not	local09, #0
13eb4     00 2E 0E F2 | 	cmp	local09, #0 wz
13eb8     00 2C 26 56 |  if_ne	not	local08, #0
13ebc     16 29 CA F7 | 	test	local06, local08 wz
13ec0                 | '       spanabove := 0 
13ec0     00 30 06 56 |  if_ne	mov	local10, #0
13ec4                 | LR__1624
13ec4                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
13ec4     00 28 06 F6 | 	mov	local06, #0
13ec8     00 2A 06 F6 | 	mov	local07, #0
13ecc     00 32 0E F2 | 	cmp	local11, #0 wz
13ed0     01 00 00 AF 
13ed4     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
13ed8     01 2A 66 86 |  if_c_and_z	neg	local07, #1
13edc     00 2A 0E F2 | 	cmp	local07, #0 wz
13ee0     00 28 26 56 |  if_ne	not	local06, #0
13ee4     00 2C 06 F6 | 	mov	local08, #0
13ee8     00 2E 06 F6 | 	mov	local09, #0
13eec     11 15 02 F6 | 	mov	arg02, local03
13ef0     01 14 06 F1 | 	add	arg02, #1
13ef4     13 13 02 F6 | 	mov	arg01, local05
13ef8     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
13efc     10 FB 09 F2 | 	cmp	result1, local02 wz
13f00     00 2E 26 A6 |  if_e	not	local09, #0
13f04     00 2E 0E F2 | 	cmp	local09, #0 wz
13f08     00 2C 26 56 |  if_ne	not	local08, #0
13f0c     16 29 CA F7 | 	test	local06, local08 wz
13f10     1C 00 90 AD |  if_e	jmp	#LR__1625
13f14                 | '       fillpush(x1)
13f14     13 13 02 F6 | 	mov	arg01, local05
13f18     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
13f1c                 | '       fillpush(y + 1)
13f1c     11 13 02 F6 | 	mov	arg01, local03
13f20     01 12 06 F1 | 	add	arg01, #1
13f24     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
13f28                 | '       spanBelow := 1
13f28     01 32 06 F6 | 	mov	local11, #1
13f2c     50 00 90 FD | 	jmp	#LR__1626
13f30                 | LR__1625
13f30                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
13f30     00 28 06 F6 | 	mov	local06, #0
13f34     00 2A 06 F6 | 	mov	local07, #0
13f38     00 32 0E F2 | 	cmp	local11, #0 wz
13f3c     01 00 00 5F 
13f40     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
13f44     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
13f48     00 2A 0E F2 | 	cmp	local07, #0 wz
13f4c     00 28 26 56 |  if_ne	not	local06, #0
13f50     00 2C 06 F6 | 	mov	local08, #0
13f54     00 2E 06 F6 | 	mov	local09, #0
13f58     11 15 02 F6 | 	mov	arg02, local03
13f5c     01 14 06 F1 | 	add	arg02, #1
13f60     13 13 02 F6 | 	mov	arg01, local05
13f64     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
13f68     10 FB 09 F2 | 	cmp	result1, local02 wz
13f6c     00 2E 26 56 |  if_ne	not	local09, #0
13f70     00 2E 0E F2 | 	cmp	local09, #0 wz
13f74     00 2C 26 56 |  if_ne	not	local08, #0
13f78     16 29 CA F7 | 	test	local06, local08 wz
13f7c                 | '       spanbelow := 0
13f7c     00 32 06 56 |  if_ne	mov	local11, #0
13f80                 | LR__1626
13f80                 | '     x1++
13f80     01 26 06 F1 | 	add	local05, #1
13f84     3C FE 9F FD | 	jmp	#LR__1622
13f88                 | LR__1627
13f88                 | '   y:=fillpop()
13f88     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
13f8c     FD 22 02 F6 | 	mov	local03, result1
13f90                 | '   x:=fillpop()
13f90     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
13f94     FD 24 02 F6 | 	mov	local04, result1
13f98     C8 FD 9F FD | 	jmp	#LR__1620
13f9c                 | LR__1628
13f9c                 | LR__1629
13f9c     A7 F0 03 F6 | 	mov	ptra, fp
13fa0     B2 00 A0 FD | 	call	#popregs_
13fa4                 | _hg010b_spin2_fill_ret
13fa4     2D 00 64 FD | 	ret
13fa8                 | 
13fa8                 | ' 'pinlow(38)    
13fa8                 | ' 
13fa8                 | ' '-- A filled circle -----------------------------------------------------
13fa8                 | ' 
13fa8                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
13fa8                 | _hg010b_spin2_fcircle
13fa8     08 4A 05 F6 | 	mov	COUNT_, #8
13fac     A8 00 A0 FD | 	call	#pushregs_
13fb0     0B 1F 02 F6 | 	mov	local01, arg03
13fb4     FF FF 7F FF 
13fb8     FE 1F 06 FD | 	qmul	local01, ##-2
13fbc     09 21 02 F6 | 	mov	local02, arg01
13fc0     0A 23 02 F6 | 	mov	local03, arg02
13fc4     0C 25 02 F6 | 	mov	local04, arg04
13fc8                 | ' 
13fc8                 | ' d:=5-4*r
13fc8     0F 19 02 F6 | 	mov	arg04, local01
13fcc     02 18 66 F0 | 	shl	arg04, #2
13fd0     05 26 06 F6 | 	mov	local05, #5
13fd4     0C 27 82 F1 | 	sub	local05, arg04
13fd8                 | ' x:=0
13fd8     00 28 06 F6 | 	mov	local06, #0
13fdc                 | ' y:=r
13fdc                 | ' da:=(-2*r+5)*4
13fdc                 | ' db:=3*4
13fdc     0C 2A 06 F6 | 	mov	local07, #12
13fe0                 | ' repeat while (x<=y) 
13fe0     18 2C 62 FD | 	getqx	local08
13fe4     05 2C 06 F1 | 	add	local08, #5
13fe8     02 2C 66 F0 | 	shl	local08, #2
13fec                 | LR__1630
13fec     0F 29 5A F2 | 	cmps	local06, local01 wcz
13ff0     B4 00 90 1D |  if_a	jmp	#LR__1632
13ff4                 | '   fastline(x0-x,x0+x,y0-y,c)
13ff4     10 13 02 F6 | 	mov	arg01, local02
13ff8     14 13 82 F1 | 	sub	arg01, local06
13ffc     10 15 02 F6 | 	mov	arg02, local02
14000     14 15 02 F1 | 	add	arg02, local06
14004     11 17 02 F6 | 	mov	arg03, local03
14008     0F 17 82 F1 | 	sub	arg03, local01
1400c     12 19 02 F6 | 	mov	arg04, local04
14010     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
14014                 | '   fastline(x0-x,x0+x,y0+y,c)
14014     10 13 02 F6 | 	mov	arg01, local02
14018     14 13 82 F1 | 	sub	arg01, local06
1401c     10 15 02 F6 | 	mov	arg02, local02
14020     14 15 02 F1 | 	add	arg02, local06
14024     11 17 02 F6 | 	mov	arg03, local03
14028     0F 17 02 F1 | 	add	arg03, local01
1402c     12 19 02 F6 | 	mov	arg04, local04
14030     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
14034                 | '   fastline(x0-y,x0+y,y0-x,c)
14034     10 13 02 F6 | 	mov	arg01, local02
14038     0F 13 82 F1 | 	sub	arg01, local01
1403c     10 15 02 F6 | 	mov	arg02, local02
14040     0F 15 02 F1 | 	add	arg02, local01
14044     11 17 02 F6 | 	mov	arg03, local03
14048     14 17 82 F1 | 	sub	arg03, local06
1404c     12 19 02 F6 | 	mov	arg04, local04
14050     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
14054                 | '   fastline(x0-y,x0+y,y0+x,c)
14054     10 13 02 F6 | 	mov	arg01, local02
14058     0F 13 82 F1 | 	sub	arg01, local01
1405c     10 15 02 F6 | 	mov	arg02, local02
14060     0F 15 02 F1 | 	add	arg02, local01
14064     11 17 02 F6 | 	mov	arg03, local03
14068     14 17 02 F1 | 	add	arg03, local06
1406c     12 19 02 F6 | 	mov	arg04, local04
14070     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
14074                 | '   if d>0 
14074     01 26 56 F2 | 	cmps	local05, #1 wc
14078     18 00 90 CD |  if_b	jmp	#LR__1631
1407c                 | '     d+=da
1407c     16 27 02 F1 | 	add	local05, local08
14080                 | '     y-=1
14080     01 1E 86 F1 | 	sub	local01, #1
14084                 | '     x+=1
14084     01 28 06 F1 | 	add	local06, #1
14088                 | '     da+=4*4
14088     10 2C 06 F1 | 	add	local08, #16
1408c                 | '     db+=2*4
1408c     08 2A 06 F1 | 	add	local07, #8
14090     58 FF 9F FD | 	jmp	#LR__1630
14094                 | LR__1631
14094                 | '   else
14094                 | '     d+=db
14094     15 27 02 F1 | 	add	local05, local07
14098                 | '     x+=1
14098     01 28 06 F1 | 	add	local06, #1
1409c                 | '     da+=2*4
1409c     08 2C 06 F1 | 	add	local08, #8
140a0                 | '     db+=2*4
140a0     08 2A 06 F1 | 	add	local07, #8
140a4     44 FF 9F FD | 	jmp	#LR__1630
140a8                 | LR__1632
140a8     A7 F0 03 F6 | 	mov	ptra, fp
140ac     B2 00 A0 FD | 	call	#popregs_
140b0                 | _hg010b_spin2_fcircle_ret
140b0     2D 00 64 FD | 	ret
140b4                 | 
140b4                 | '  
140b4                 | ' '-- A circle ------------------------------------------------------------ 
140b4                 | '  
140b4                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
140b4                 | _hg010b_spin2_circle
140b4     08 4A 05 F6 | 	mov	COUNT_, #8
140b8     A8 00 A0 FD | 	call	#pushregs_
140bc     0B 1F 02 F6 | 	mov	local01, arg03
140c0     FF FF 7F FF 
140c4     FE 1F 06 FD | 	qmul	local01, ##-2
140c8     09 21 02 F6 | 	mov	local02, arg01
140cc     0A 23 02 F6 | 	mov	local03, arg02
140d0     0C 25 02 F6 | 	mov	local04, arg04
140d4                 | ' 
140d4                 | '  
140d4                 | ' d:=5-4*r
140d4     0F 19 02 F6 | 	mov	arg04, local01
140d8     02 18 66 F0 | 	shl	arg04, #2
140dc     05 26 06 F6 | 	mov	local05, #5
140e0     0C 27 82 F1 | 	sub	local05, arg04
140e4                 | ' x:=0
140e4     00 28 06 F6 | 	mov	local06, #0
140e8                 | ' y:=r
140e8                 | ' da:=(-2*r+5)*4
140e8                 | ' db:=3*4
140e8     0C 2A 06 F6 | 	mov	local07, #12
140ec                 | ' repeat while (x<=y) 
140ec     18 2C 62 FD | 	getqx	local08
140f0     05 2C 06 F1 | 	add	local08, #5
140f4     02 2C 66 F0 | 	shl	local08, #2
140f8                 | LR__1640
140f8     0F 29 5A F2 | 	cmps	local06, local01 wcz
140fc     F4 00 90 1D |  if_a	jmp	#LR__1642
14100                 | '   putpixel(x0-x,y0-y,c)
14100     10 13 02 F6 | 	mov	arg01, local02
14104     14 13 82 F1 | 	sub	arg01, local06
14108     11 15 02 F6 | 	mov	arg02, local03
1410c     0F 15 82 F1 | 	sub	arg02, local01
14110     12 17 02 F6 | 	mov	arg03, local04
14114     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
14118                 | '   putpixel(x0-x,y0+y,c)
14118     10 13 02 F6 | 	mov	arg01, local02
1411c     14 13 82 F1 | 	sub	arg01, local06
14120     11 15 02 F6 | 	mov	arg02, local03
14124     0F 15 02 F1 | 	add	arg02, local01
14128     12 17 02 F6 | 	mov	arg03, local04
1412c     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
14130                 | '   putpixel(x0+x,y0-y,c)
14130     10 13 02 F6 | 	mov	arg01, local02
14134     14 13 02 F1 | 	add	arg01, local06
14138     11 15 02 F6 | 	mov	arg02, local03
1413c     0F 15 82 F1 | 	sub	arg02, local01
14140     12 17 02 F6 | 	mov	arg03, local04
14144     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
14148                 | '   putpixel(x0+x,y0+y,c)
14148     10 13 02 F6 | 	mov	arg01, local02
1414c     14 13 02 F1 | 	add	arg01, local06
14150     11 15 02 F6 | 	mov	arg02, local03
14154     0F 15 02 F1 | 	add	arg02, local01
14158     12 17 02 F6 | 	mov	arg03, local04
1415c     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
14160                 | '   putpixel(x0-y,y0-x,c)
14160     10 13 02 F6 | 	mov	arg01, local02
14164     0F 13 82 F1 | 	sub	arg01, local01
14168     11 15 02 F6 | 	mov	arg02, local03
1416c     14 15 82 F1 | 	sub	arg02, local06
14170     12 17 02 F6 | 	mov	arg03, local04
14174     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
14178                 | '   putpixel(x0-y,y0+x,c)
14178     10 13 02 F6 | 	mov	arg01, local02
1417c     0F 13 82 F1 | 	sub	arg01, local01
14180     11 15 02 F6 | 	mov	arg02, local03
14184     14 15 02 F1 | 	add	arg02, local06
14188     12 17 02 F6 | 	mov	arg03, local04
1418c     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
14190                 | '   putpixel(x0+y,y0-x,c)
14190     10 13 02 F6 | 	mov	arg01, local02
14194     0F 13 02 F1 | 	add	arg01, local01
14198     11 15 02 F6 | 	mov	arg02, local03
1419c     14 15 82 F1 | 	sub	arg02, local06
141a0     12 17 02 F6 | 	mov	arg03, local04
141a4     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
141a8                 | '   putpixel(x0+y,y0+x,c)
141a8     10 13 02 F6 | 	mov	arg01, local02
141ac     0F 13 02 F1 | 	add	arg01, local01
141b0     11 15 02 F6 | 	mov	arg02, local03
141b4     14 15 02 F1 | 	add	arg02, local06
141b8     12 17 02 F6 | 	mov	arg03, local04
141bc     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
141c0                 | '   if d>0 
141c0     01 26 56 F2 | 	cmps	local05, #1 wc
141c4     18 00 90 CD |  if_b	jmp	#LR__1641
141c8                 | '     d+=da
141c8     16 27 02 F1 | 	add	local05, local08
141cc                 | '     y-=1
141cc     01 1E 86 F1 | 	sub	local01, #1
141d0                 | '     x+=1
141d0     01 28 06 F1 | 	add	local06, #1
141d4                 | '     da+=4*4
141d4     10 2C 06 F1 | 	add	local08, #16
141d8                 | '     db+=2*4
141d8     08 2A 06 F1 | 	add	local07, #8
141dc     18 FF 9F FD | 	jmp	#LR__1640
141e0                 | LR__1641
141e0                 | '   else
141e0                 | '     d+=db
141e0     15 27 02 F1 | 	add	local05, local07
141e4                 | '     x+=1
141e4     01 28 06 F1 | 	add	local06, #1
141e8                 | '     da+=2*4
141e8     08 2C 06 F1 | 	add	local08, #8
141ec                 | '     db+=2*4
141ec     08 2A 06 F1 | 	add	local07, #8
141f0     04 FF 9F FD | 	jmp	#LR__1640
141f4                 | LR__1642
141f4     A7 F0 03 F6 | 	mov	ptra, fp
141f8     B2 00 A0 FD | 	call	#popregs_
141fc                 | _hg010b_spin2_circle_ret
141fc     2D 00 64 FD | 	ret
14200                 | 
14200                 | '     
14200                 | ' '-- A frame (an empty rectangle) ---------------------------------------
14200                 | ' 
14200                 | ' pub frame(x1,y1,x2,y2,c)
14200                 | _hg010b_spin2_frame
14200     05 4A 05 F6 | 	mov	COUNT_, #5
14204     A8 00 A0 FD | 	call	#pushregs_
14208     09 1F 02 F6 | 	mov	local01, arg01
1420c     0A 21 02 F6 | 	mov	local02, arg02
14210     0B 23 02 F6 | 	mov	local03, arg03
14214     0C 25 02 F6 | 	mov	local04, arg04
14218     0D 27 02 F6 | 	mov	local05, arg05
1421c                 | ' 
1421c                 | ' fastline(x1,x2,y1,c)
1421c     0F 13 02 F6 | 	mov	arg01, local01
14220     11 15 02 F6 | 	mov	arg02, local03
14224     10 17 02 F6 | 	mov	arg03, local02
14228     13 19 02 F6 | 	mov	arg04, local05
1422c     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
14230                 | ' fastline(x1,x2,y2,c)
14230     0F 13 02 F6 | 	mov	arg01, local01
14234     11 15 02 F6 | 	mov	arg02, local03
14238     12 17 02 F6 | 	mov	arg03, local04
1423c     13 19 02 F6 | 	mov	arg04, local05
14240     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
14244                 | ' line(x1,y1,x1,y2,c)
14244     0F 13 02 F6 | 	mov	arg01, local01
14248     10 15 02 F6 | 	mov	arg02, local02
1424c     0F 17 02 F6 | 	mov	arg03, local01
14250     12 19 02 F6 | 	mov	arg04, local04
14254     13 1B 02 F6 | 	mov	arg05, local05
14258                 | ' draw(x1,y1,x2,y2,c)
14258     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
1425c                 | ' line(x2,y1,x2,y2,c)
1425c     11 13 02 F6 | 	mov	arg01, local03
14260     10 15 02 F6 | 	mov	arg02, local02
14264     11 17 02 F6 | 	mov	arg03, local03
14268     12 19 02 F6 | 	mov	arg04, local04
1426c     13 1B 02 F6 | 	mov	arg05, local05
14270                 | ' draw(x1,y1,x2,y2,c)
14270     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
14274     A7 F0 03 F6 | 	mov	ptra, fp
14278     B2 00 A0 FD | 	call	#popregs_
1427c                 | _hg010b_spin2_frame_ret
1427c     2D 00 64 FD | 	ret
14280                 | 
14280                 | ' 
14280                 | ' '-- A box (a filled rectangle) ----------------------------------------
14280                 | ' 
14280                 | ' pub box(x1,y1,x2,y2,c) |yy
14280                 | _hg010b_spin2_box
14280     06 4A 05 F6 | 	mov	COUNT_, #6
14284     A8 00 A0 FD | 	call	#pushregs_
14288     09 1F 02 F6 | 	mov	local01, arg01
1428c     0A 21 02 F6 | 	mov	local02, arg02
14290     0B 23 02 F6 | 	mov	local03, arg03
14294     0C 25 02 F6 | 	mov	local04, arg04
14298     0D 27 02 F6 | 	mov	local05, arg05
1429c                 | ' 
1429c                 | ' repeat yy from y1 to y2
1429c     10 25 52 F2 | 	cmps	local04, local02 wc
142a0     01 28 86 F6 | 	negc	local06, #1
142a4     14 25 02 F1 | 	add	local04, local06
142a8                 | LR__1650
142a8                 | '   fastline(x1,x2,yy,c)
142a8     0F 13 02 F6 | 	mov	arg01, local01
142ac     11 15 02 F6 | 	mov	arg02, local03
142b0     13 19 02 F6 | 	mov	arg04, local05
142b4     10 17 02 F6 | 	mov	arg03, local02
142b8     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
142bc     14 21 02 F1 | 	add	local02, local06
142c0     12 21 0A F2 | 	cmp	local02, local04 wz
142c4     E0 FF 9F 5D |  if_ne	jmp	#LR__1650
142c8     A7 F0 03 F6 | 	mov	ptra, fp
142cc     B2 00 A0 FD | 	call	#popregs_
142d0                 | _hg010b_spin2_box_ret
142d0     2D 00 64 FD | 	ret
142d4                 | 
142d4                 | '       
142d4                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
142d4                 | _hg010b_spin2_putcharxycgf
142d4                 | ' 
142d4                 | '  
142d4                 | ' repeat yy from 0 to 15
142d4     00 00 06 F6 | 	mov	_var01, #0
142d8     97 8C 48 FB | 	callpa	#(@LR__1662-@LR__1660)>>2,fcache_load_ptr_
142dc                 | LR__1660
142dc                 | ' 
142dc                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
142dc     91 E4 05 F1 | 	add	objptr, #145
142e0     F2 02 02 FB | 	rdlong	_var02, objptr
142e4     0A 02 66 F0 | 	shl	_var02, #10
142e8     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
142ec     01 05 02 F1 | 	add	_var03, _var02
142f0     0B 03 02 F6 | 	mov	_var02, arg03
142f4     04 02 66 F0 | 	shl	_var02, #4
142f8     01 05 02 F1 | 	add	_var03, _var02
142fc     00 05 02 F1 | 	add	_var03, _var01
14300     02 05 C2 FA | 	rdbyte	_var03, _var03
14304                 | '   asm
14304     00 04 0E F4 | 	testb	_var03, #0 wz
14308     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
1430c     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
14310     01 04 0E F4 | 	testb	_var03, #1 wz
14314     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
14318     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
1431c     02 04 0E F4 | 	testb	_var03, #2 wz
14320     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
14324     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
14328     03 04 0E F4 | 	testb	_var03, #3 wz
1432c     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
14330     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
14334     04 04 0E F4 | 	testb	_var03, #4 wz
14338     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
1433c     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
14340     05 04 0E F4 | 	testb	_var03, #5 wz
14344     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
14348     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1434c     06 04 0E F4 | 	testb	_var03, #6 wz
14350     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
14354     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
14358     07 04 0E F4 | 	testb	_var03, #7 wz
1435c     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
14360     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
14364                 | '   
14364                 | '   ccc[0]:=c1
14364     99 E5 05 F1 | 	add	objptr, #409
14368     F2 06 62 FC | 	wrlong	_var04, objptr
1436c                 | '   ccc[1]:=c2 
1436c     04 E4 05 F1 | 	add	objptr, #4
14370     F2 08 62 FC | 	wrlong	_var05, objptr
14374                 | '   long[mailbox0][2]:=8
14374     49 E4 85 F1 | 	sub	objptr, #73
14378     F2 04 02 FB | 	rdlong	_var03, objptr
1437c     08 04 06 F1 | 	add	_var03, #8
14380     02 11 68 FC | 	wrlong	#8, _var03
14384                 | '   long[mailbox0][1]:=@ccc
14384     45 E4 05 F1 | 	add	objptr, #69
14388     F2 04 02 F6 | 	mov	_var03, objptr
1438c     45 E4 85 F1 | 	sub	objptr, #69
14390     F2 02 02 FB | 	rdlong	_var02, objptr
14394     04 02 06 F1 | 	add	_var02, #4
14398     01 05 62 FC | 	wrlong	_var03, _var02
1439c                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1439c     0C E5 85 F1 | 	sub	objptr, #268
143a0     F2 04 02 FB | 	rdlong	_var03, objptr
143a4     0A 03 02 F6 | 	mov	_var02, arg02
143a8     00 03 02 F1 | 	add	_var02, _var01
143ac     0A 02 66 F0 | 	shl	_var02, #10
143b0     09 0B 02 F6 | 	mov	_var06, arg01
143b4     02 0A 66 F0 | 	shl	_var06, #2
143b8     05 03 02 F1 | 	add	_var02, _var06
143bc     01 05 02 F1 | 	add	_var03, _var02
143c0     00 00 78 FF 
143c4     00 04 06 F1 | 	add	_var03, ##-268435456
143c8     0C E5 05 F1 | 	add	objptr, #268
143cc     F2 0A 02 FB | 	rdlong	_var06, objptr
143d0     05 05 62 FC | 	wrlong	_var03, _var06
143d4                 | '   repeat
143d4                 | LR__1661
143d4     F2 04 02 FB | 	rdlong	_var03, objptr
143d8     02 03 02 FB | 	rdlong	_var02, _var03
143dc     00 02 56 F2 | 	cmps	_var02, #0 wc
143e0     F0 FF 9F CD |  if_b	jmp	#LR__1661
143e4     E5 E5 85 F1 | 	sub	objptr, #485
143e8     01 00 06 F1 | 	add	_var01, #1
143ec     10 00 56 F2 | 	cmps	_var01, #16 wc
143f0     E8 FE 9F CD |  if_b	jmp	#LR__1660
143f4                 | LR__1662
143f4                 | _hg010b_spin2_putcharxycgf_ret
143f4     2D 00 64 FD | 	ret
143f8                 | 
143f8                 | ' 
143f8                 | ' 
143f8                 | ' '**********************************************************************r***
143f8                 | ' '                                                                        *
143f8                 | ' ' Font related functions                                                 *
143f8                 | ' '                                                                        *
143f8                 | ' '*************************************************************************
143f8                 | ' 
143f8                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
143f8                 | ' 
143f8                 | ' pub setfontfamily(afontnum)
143f8                 | _hg010b_spin2_setfontfamily
143f8                 | ' 
143f8                 | ' font_family:=afontnum
143f8     91 E4 05 F1 | 	add	objptr, #145
143fc     F2 12 62 FC | 	wrlong	arg01, objptr
14400     91 E4 85 F1 | 	sub	objptr, #145
14404                 | ' 'if afontnum==8
14404                 | ' '  font_ptr:=@amiga_font
14404                 | ' 
14404                 | ' if afontnum==4
14404     04 12 0E F2 | 	cmp	arg01, #4 wz
14408                 | '   font_ptr:=@st_font
14408     08 00 00 AF 
1440c     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
14410     04 E4 05 A1 |  if_e	add	objptr, #4
14414     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
14418     04 E4 85 A1 |  if_e	sub	objptr, #4
1441c     08 00 00 AF 
14420     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
14424                 | ' if afontnum==0
14424     00 12 0E F2 | 	cmp	arg01, #0 wz
14428                 | '   font_ptr:=@vga_font
14428     04 E4 05 A1 |  if_e	add	objptr, #4
1442c     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
14430     04 E4 85 A1 |  if_e	sub	objptr, #4
14434                 | _hg010b_spin2_setfontfamily_ret
14434     2D 00 64 FD | 	ret
14438                 | 
14438                 | ' 
14438                 | ' '*************************************************************************
14438                 | ' '                                                                        *
14438                 | ' '  Cursor functions                                                      *
14438                 | ' '                                                                        *
14438                 | ' '*************************************************************************
14438                 | ' 
14438                 | ' 
14438                 | ' pub setcursorpos(x,y)
14438                 | _hg010b_spin2_setcursorpos
14438                 | ' 
14438                 | ' ''---------- Set the (x,y) position of cursor
14438                 | ' 
14438                 | ' cursor_x:=x
14438     38 E4 05 F1 | 	add	objptr, #56
1443c     F2 12 52 FC | 	wrword	arg01, objptr
14440                 | ' cursor_y:=y
14440     02 E4 05 F1 | 	add	objptr, #2
14444     F2 14 42 FC | 	wrbyte	arg02, objptr
14448                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
14448     02 E4 85 F1 | 	sub	objptr, #2
1444c     F2 14 E2 FA | 	rdword	arg02, objptr
14450     02 14 66 F0 | 	shl	arg02, #2
14454     02 E4 05 F1 | 	add	objptr, #2
14458     F2 16 C2 FA | 	rdbyte	arg03, objptr
1445c     3A E4 85 F1 | 	sub	objptr, #58
14460     04 16 66 F0 | 	shl	arg03, #4
14464     11 12 06 F6 | 	mov	arg01, #17
14468     70 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1446c                 | _hg010b_spin2_setcursorpos_ret
1446c     2D 00 64 FD | 	ret
14470                 | 
14470                 | ' 
14470                 | ' '*************************************************************************
14470                 | ' '                                                                        *
14470                 | ' '  VBlank functions                                                      *
14470                 | ' '                                                                        *
14470                 | ' '*************************************************************************
14470                 | ' 
14470                 | ' pub waitvbl(amount) | i
14470                 | _hg010b_spin2_waitvbl
14470     03 4A 05 F6 | 	mov	COUNT_, #3
14474     A8 00 A0 FD | 	call	#pushregs_
14478     09 1F 02 F6 | 	mov	local01, arg01
1447c                 | ' 
1447c                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
1447c                 | ' 
1447c                 | ' repeat i from 1 to amount
1447c     01 20 06 F6 | 	mov	local02, #1
14480     01 1E 56 F2 | 	cmps	local01, #1 wc
14484     01 22 86 F6 | 	negc	local03, #1
14488     11 1F 02 F1 | 	add	local01, local03
1448c                 | LR__1670
1448c                 | '   repeat until vblank==0
1448c                 | LR__1671
1448c     45 E4 05 F1 | 	add	objptr, #69
14490     F2 12 0A FB | 	rdlong	arg01, objptr wz
14494     45 E4 85 F1 | 	sub	objptr, #69
14498     0C 00 90 AD |  if_e	jmp	#LR__1672
1449c                 | '     waitus(100)
1449c     64 12 06 F6 | 	mov	arg01, #100
144a0     7C 16 B0 FD | 	call	#__system___waitus
144a4     E4 FF 9F FD | 	jmp	#LR__1671
144a8                 | LR__1672
144a8                 | '   repeat until vblank==1
144a8                 | LR__1673
144a8     45 E4 05 F1 | 	add	objptr, #69
144ac     F2 12 02 FB | 	rdlong	arg01, objptr
144b0     45 E4 85 F1 | 	sub	objptr, #69
144b4     01 12 0E F2 | 	cmp	arg01, #1 wz
144b8     0C 00 90 AD |  if_e	jmp	#LR__1674
144bc                 | '     waitus(100)
144bc     64 12 06 F6 | 	mov	arg01, #100
144c0     5C 16 B0 FD | 	call	#__system___waitus
144c4     E0 FF 9F FD | 	jmp	#LR__1673
144c8                 | LR__1674
144c8     11 21 02 F1 | 	add	local02, local03
144cc     0F 21 0A F2 | 	cmp	local02, local01 wz
144d0     B8 FF 9F 5D |  if_ne	jmp	#LR__1670
144d4     A7 F0 03 F6 | 	mov	ptra, fp
144d8     B2 00 A0 FD | 	call	#popregs_
144dc                 | _hg010b_spin2_waitvbl_ret
144dc     2D 00 64 FD | 	ret
144e0                 | 
144e0                 | ' 
144e0                 | ' 
144e0                 | ' pub cls(fc,bc)   :c,i
144e0                 | _hg010b_spin2_cls
144e0     02 4A 05 F6 | 	mov	COUNT_, #2
144e4     A8 00 A0 FD | 	call	#pushregs_
144e8     09 1F 02 F6 | 	mov	local01, arg01
144ec     0A 21 02 F6 | 	mov	local02, arg02
144f0                 | ' 
144f0                 | ' c:=bc
144f0                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
144f0     D9 E4 05 F1 | 	add	objptr, #217
144f4     F2 12 02 FB | 	rdlong	arg01, objptr
144f8     A5 E4 85 F1 | 	sub	objptr, #165
144fc     F2 16 02 FB | 	rdlong	arg03, objptr
14500     02 16 66 F0 | 	shl	arg03, #2
14504     10 15 02 F6 | 	mov	arg02, local02
14508     00 18 06 F6 | 	mov	arg04, #0
1450c     01 1A 06 F6 | 	mov	arg05, #1
14510     0B 00 00 FF 
14514     8C E4 05 F1 | 	add	objptr, ##5772
14518     F0 08 B0 FD | 	call	#_psram_spin2_fill
1451c                 | ' setwritecolors(fc,bc)
1451c                 | ' 
1451c                 | ' write_color:=ff
1451c     0B 00 00 FF 
14520     83 E4 85 F1 | 	sub	objptr, ##5763
14524     F2 1E 62 FC | 	wrlong	local01, objptr
14528                 | ' write_background:=bb
14528     04 E4 05 F1 | 	add	objptr, #4
1452c     F2 20 62 FC | 	wrlong	local02, objptr
14530                 | ' cursor_x:=0
14530     09 E4 85 F1 | 	sub	objptr, #9
14534     F2 00 58 FC | 	wrword	#0, objptr
14538                 | ' cursor_y:=0
14538     02 E4 05 F1 | 	add	objptr, #2
1453c     F2 00 48 FC | 	wrbyte	#0, objptr
14540                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
14540     02 E4 85 F1 | 	sub	objptr, #2
14544     F2 14 E2 FA | 	rdword	arg02, objptr
14548     02 14 66 F0 | 	shl	arg02, #2
1454c     02 E4 05 F1 | 	add	objptr, #2
14550     F2 16 C2 FA | 	rdbyte	arg03, objptr
14554     3A E4 85 F1 | 	sub	objptr, #58
14558     04 16 66 F0 | 	shl	arg03, #4
1455c     11 12 06 F6 | 	mov	arg01, #17
14560     78 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
14564                 | ' setcursorcolor(fc)
14564     0F 13 02 F6 | 	mov	arg01, local01
14568     2C EF BF FD | 	call	#_hg010b_spin2_setcursorcolor
1456c     10 FB 01 F6 | 	mov	result1, local02
14570     00 FC 05 F6 | 	mov	result2, #0
14574     A7 F0 03 F6 | 	mov	ptra, fp
14578     B2 00 A0 FD | 	call	#popregs_
1457c                 | _hg010b_spin2_cls_ret
1457c     2D 00 64 FD | 	ret
14580                 | 
14580                 | ' 
14580                 | ' ''---------- Output a char at the cursor position, move the cursor 
14580                 | ' 
14580                 | ' pub putchar(achar) | c,x,y,l,newcpl
14580                 | _hg010b_spin2_putchar
14580     01 4A 05 F6 | 	mov	COUNT_, #1
14584     A8 00 A0 FD | 	call	#pushregs_
14588     09 1F 02 F6 | 	mov	local01, arg01
1458c                 | ' 
1458c                 | ' if achar==10
1458c     0A 1E 0E F2 | 	cmp	local01, #10 wz
14590                 | '   crlf()
14590     68 03 B0 AD |  if_e	call	#_hg010b_spin2_crlf
14594                 | ' if achar==9
14594     09 1E 0E F2 | 	cmp	local01, #9 wz
14598     18 00 90 5D |  if_ne	jmp	#LR__1680
1459c                 | '   cursor_x:=(cursor_x& %11110000)+16
1459c     38 E4 05 F1 | 	add	objptr, #56
145a0     F2 16 E2 FA | 	rdword	arg03, objptr
145a4     F0 16 06 F5 | 	and	arg03, #240
145a8     10 16 06 F1 | 	add	arg03, #16
145ac     F2 16 52 FC | 	wrword	arg03, objptr
145b0     38 E4 85 F1 | 	sub	objptr, #56
145b4                 | LR__1680
145b4                 | '   
145b4                 | ' if (achar<>9) && (achar<>10) 
145b4     09 1E 0E F2 | 	cmp	local01, #9 wz
145b8     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
145bc     44 00 90 AD |  if_e	jmp	#LR__1681
145c0                 | '   putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
145c0     38 E4 05 F1 | 	add	objptr, #56
145c4     F2 12 E2 FA | 	rdword	arg01, objptr
145c8     02 E4 05 F1 | 	add	objptr, #2
145cc     F2 14 C2 FA | 	rdbyte	arg02, objptr
145d0     04 14 66 F0 | 	shl	arg02, #4
145d4     03 E4 05 F1 | 	add	objptr, #3
145d8     F2 18 02 FB | 	rdlong	arg04, objptr
145dc     04 E4 05 F1 | 	add	objptr, #4
145e0     F2 1A 02 FB | 	rdlong	arg05, objptr
145e4     41 E4 85 F1 | 	sub	objptr, #65
145e8     0F 17 02 F6 | 	mov	arg03, local01
145ec     E4 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
145f0                 | '   cursor_x+=2
145f0     38 E4 05 F1 | 	add	objptr, #56
145f4     F2 1E E2 FA | 	rdword	local01, objptr
145f8     02 1E 06 F1 | 	add	local01, #2
145fc     F2 1E 52 FC | 	wrword	local01, objptr
14600     38 E4 85 F1 | 	sub	objptr, #56
14604                 | LR__1681
14604                 | ' 
14604                 | ' if cursor_x>=256
14604     38 E4 05 F1 | 	add	objptr, #56
14608     F2 1E E2 FA | 	rdword	local01, objptr
1460c     38 E4 85 F1 | 	sub	objptr, #56
14610     00 1F 56 F2 | 	cmps	local01, #256 wc
14614     64 00 90 CD |  if_b	jmp	#LR__1683
14618                 | '   cursor_x:=0
14618     38 E4 05 F1 | 	add	objptr, #56
1461c     F2 00 58 FC | 	wrword	#0, objptr
14620                 | '   cursor_y+=1
14620     02 E4 05 F1 | 	add	objptr, #2
14624     F2 1E C2 FA | 	rdbyte	local01, objptr
14628     01 1E 06 F1 | 	add	local01, #1
1462c     F2 1E 42 FC | 	wrbyte	local01, objptr
14630                 | '   if cursor_y>st_lines-1
14630     C3 E4 05 F1 | 	add	objptr, #195
14634     F2 1E 02 FB | 	rdlong	local01, objptr
14638     01 1E 86 F1 | 	sub	local01, #1
1463c     C3 E4 85 F1 | 	sub	objptr, #195
14640     F2 16 C2 FA | 	rdbyte	arg03, objptr
14644     3A E4 85 F1 | 	sub	objptr, #58
14648     0F 17 5A F2 | 	cmps	arg03, local01 wcz
1464c     2C 00 90 ED |  if_be	jmp	#LR__1682
14650                 | '     scrollup()
14650     00 12 06 F6 | 	mov	arg01, #0
14654     01 00 00 FF 
14658     40 14 06 F6 | 	mov	arg02, ##576
1465c     10 16 06 F6 | 	mov	arg03, #16
14660     9C 01 B0 FD | 	call	#_hg010b_spin2_scrollup
14664                 | '     cursor_y:=st_lines-1
14664     FD E4 05 F1 | 	add	objptr, #253
14668     F2 1E 02 FB | 	rdlong	local01, objptr
1466c     01 1E 86 F1 | 	sub	local01, #1
14670     C3 E4 85 F1 | 	sub	objptr, #195
14674     F2 1E 42 FC | 	wrbyte	local01, objptr
14678     3A E4 85 F1 | 	sub	objptr, #58
1467c                 | LR__1682
1467c                 | LR__1683
1467c                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
1467c     38 E4 05 F1 | 	add	objptr, #56
14680     F2 14 E2 FA | 	rdword	arg02, objptr
14684     02 14 66 F0 | 	shl	arg02, #2
14688     02 E4 05 F1 | 	add	objptr, #2
1468c     F2 16 C2 FA | 	rdbyte	arg03, objptr
14690     3A E4 85 F1 | 	sub	objptr, #58
14694     04 16 66 F0 | 	shl	arg03, #4
14698     11 12 06 F6 | 	mov	arg01, #17
1469c     3C F1 BF FD | 	call	#_hg010b_spin2_setspritepos
146a0     A7 F0 03 F6 | 	mov	ptra, fp
146a4     B2 00 A0 FD | 	call	#popregs_
146a8                 | _hg010b_spin2_putchar_ret
146a8     2D 00 64 FD | 	ret
146ac                 | 
146ac                 | '     
146ac                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
146ac                 | ' 
146ac                 | ' pub putchar2(achar) | c,x,y,l,newcpl
146ac                 | _hg010b_spin2_putchar2
146ac     01 4A 05 F6 | 	mov	COUNT_, #1
146b0     A8 00 A0 FD | 	call	#pushregs_
146b4                 | ' 
146b4                 | ' putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
146b4     38 E4 05 F1 | 	add	objptr, #56
146b8     F2 1E E2 FA | 	rdword	local01, objptr
146bc     02 E4 05 F1 | 	add	objptr, #2
146c0     F2 14 C2 FA | 	rdbyte	arg02, objptr
146c4     04 14 66 F0 | 	shl	arg02, #4
146c8     09 17 02 F6 | 	mov	arg03, arg01
146cc     03 E4 05 F1 | 	add	objptr, #3
146d0     F2 18 02 FB | 	rdlong	arg04, objptr
146d4     04 E4 05 F1 | 	add	objptr, #4
146d8     F2 1A 02 FB | 	rdlong	arg05, objptr
146dc     41 E4 85 F1 | 	sub	objptr, #65
146e0     0F 13 02 F6 | 	mov	arg01, local01
146e4     EC FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
146e8                 | ' cursor_x+=2
146e8     38 E4 05 F1 | 	add	objptr, #56
146ec     F2 1E E2 FA | 	rdword	local01, objptr
146f0     02 1E 06 F1 | 	add	local01, #2
146f4     F2 1E 52 FC | 	wrword	local01, objptr
146f8                 | ' if cursor_x>=256
146f8     F2 1E E2 FA | 	rdword	local01, objptr
146fc     38 E4 85 F1 | 	sub	objptr, #56
14700     00 1F 56 F2 | 	cmps	local01, #256 wc
14704     64 00 90 CD |  if_b	jmp	#LR__1691
14708                 | '   cursor_x:=0
14708     38 E4 05 F1 | 	add	objptr, #56
1470c     F2 00 58 FC | 	wrword	#0, objptr
14710                 | '   cursor_y+=1
14710     02 E4 05 F1 | 	add	objptr, #2
14714     F2 1E C2 FA | 	rdbyte	local01, objptr
14718     01 1E 06 F1 | 	add	local01, #1
1471c     F2 1E 42 FC | 	wrbyte	local01, objptr
14720                 | '   if cursor_y>st_lines-1
14720     C3 E4 05 F1 | 	add	objptr, #195
14724     F2 1E 02 FB | 	rdlong	local01, objptr
14728     01 1E 86 F1 | 	sub	local01, #1
1472c     C3 E4 85 F1 | 	sub	objptr, #195
14730     F2 1A C2 FA | 	rdbyte	arg05, objptr
14734     3A E4 85 F1 | 	sub	objptr, #58
14738     0F 1B 5A F2 | 	cmps	arg05, local01 wcz
1473c     2C 00 90 ED |  if_be	jmp	#LR__1690
14740                 | '     scrollup()
14740     00 12 06 F6 | 	mov	arg01, #0
14744     01 00 00 FF 
14748     40 14 06 F6 | 	mov	arg02, ##576
1474c     10 16 06 F6 | 	mov	arg03, #16
14750     AC 00 B0 FD | 	call	#_hg010b_spin2_scrollup
14754                 | '     cursor_y:=st_lines-1
14754     FD E4 05 F1 | 	add	objptr, #253
14758     F2 1E 02 FB | 	rdlong	local01, objptr
1475c     01 1E 86 F1 | 	sub	local01, #1
14760     C3 E4 85 F1 | 	sub	objptr, #195
14764     F2 1E 42 FC | 	wrbyte	local01, objptr
14768     3A E4 85 F1 | 	sub	objptr, #58
1476c                 | LR__1690
1476c                 | LR__1691
1476c                 | ' setspritepos(17,4*cursor_x,16*cursor_y ) 
1476c     38 E4 05 F1 | 	add	objptr, #56
14770     F2 14 E2 FA | 	rdword	arg02, objptr
14774     02 14 66 F0 | 	shl	arg02, #2
14778     02 E4 05 F1 | 	add	objptr, #2
1477c     F2 16 C2 FA | 	rdbyte	arg03, objptr
14780     3A E4 85 F1 | 	sub	objptr, #58
14784     04 16 66 F0 | 	shl	arg03, #4
14788     11 12 06 F6 | 	mov	arg01, #17
1478c     4C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
14790     A7 F0 03 F6 | 	mov	ptra, fp
14794     B2 00 A0 FD | 	call	#popregs_
14798                 | _hg010b_spin2_putchar2_ret
14798     2D 00 64 FD | 	ret
1479c                 | 
1479c                 | ' ''--------- Output a string at the cursor position, move the cursor  
1479c                 | ' 
1479c                 | ' pub write(text) | iii,c,ncx,ncy
1479c                 | _hg010b_spin2_write
1479c     04 4A 05 F6 | 	mov	COUNT_, #4
147a0     A8 00 A0 FD | 	call	#pushregs_
147a4     09 1F 02 F6 | 	mov	local01, arg01
147a8                 | ' 
147a8                 | ' repeat iii from 0 to strsize(text)-1
147a8     00 20 06 F6 | 	mov	local02, #0
147ac     0F 13 02 F6 | 	mov	arg01, local01
147b0     09 23 02 F6 | 	mov	local03, arg01
147b4     97 06 48 FB | 	callpa	#(@LR__1701-@LR__1700)>>2,fcache_load_ptr_
147b8                 | LR__1700
147b8     11 FB C9 FA | 	rdbyte	result1, local03 wz
147bc     01 22 06 51 |  if_ne	add	local03, #1
147c0     F4 FF 9F 5D |  if_ne	jmp	#LR__1700
147c4                 | LR__1701
147c4     09 23 82 F1 | 	sub	local03, arg01
147c8     01 22 86 F1 | 	sub	local03, #1
147cc     00 22 56 F2 | 	cmps	local03, #0 wc
147d0     01 24 86 F6 | 	negc	local04, #1
147d4     12 23 02 F1 | 	add	local03, local04
147d8                 | LR__1702
147d8                 | '   putchar2(byte[text+iii])
147d8     0F 13 02 F6 | 	mov	arg01, local01
147dc     10 13 02 F1 | 	add	arg01, local02
147e0     09 13 C2 FA | 	rdbyte	arg01, arg01
147e4     C4 FE BF FD | 	call	#_hg010b_spin2_putchar2
147e8     12 21 02 F1 | 	add	local02, local04
147ec     11 21 0A F2 | 	cmp	local02, local03 wz
147f0     E4 FF 9F 5D |  if_ne	jmp	#LR__1702
147f4     A7 F0 03 F6 | 	mov	ptra, fp
147f8     B2 00 A0 FD | 	call	#popregs_
147fc                 | _hg010b_spin2_write_ret
147fc     2D 00 64 FD | 	ret
14800                 | 
14800                 | ' 
14800                 | ' ''-----------  Scroll the screen one line up
14800                 | ' 
14800                 | ' pub scrollup(start=0, end=576 , amount=16) | i
14800                 | _hg010b_spin2_scrollup
14800     01 4A 05 F6 | 	mov	COUNT_, #1
14804     A8 00 A0 FD | 	call	#pushregs_
14808                 | ' 	
14808                 | ' repeat i from 0 to 559 
14808     00 1E 06 F6 | 	mov	local01, #0
1480c                 | LR__1710
1480c     F5 E4 05 F1 | 	add	objptr, #245
14810     F2 18 02 FB | 	rdlong	arg04, objptr
14814     1C E4 85 F1 | 	sub	objptr, #28
14818     F2 14 02 FB | 	rdlong	arg02, objptr
1481c     0F 13 02 F6 | 	mov	arg01, local01
14820     10 12 06 F1 | 	add	arg01, #16
14824     02 12 66 F0 | 	shl	arg01, #2
14828     14 E4 05 F1 | 	add	objptr, #20
1482c     F2 16 02 FB | 	rdlong	arg03, objptr
14830     0B 13 02 FD | 	qmul	arg01, arg03
14834                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
14834     F6 03 00 FF 
14838     00 12 06 F6 | 	mov	arg01, ##519168
1483c     0C 13 82 F1 | 	sub	arg01, arg04
14840     02 16 66 F0 | 	shl	arg03, #2
14844     0A 00 00 FF 
14848     D3 E5 05 F1 | 	add	objptr, ##5587
1484c     18 18 62 FD | 	getqx	arg04
14850     0C 15 02 F1 | 	add	arg02, arg04
14854     7C 04 B0 FD | 	call	#_psram_spin2_read1
14858     0A 00 00 FF 
1485c     CB E5 85 F1 | 	sub	objptr, ##5579
14860     F2 18 02 FB | 	rdlong	arg04, objptr
14864     1C E4 85 F1 | 	sub	objptr, #28
14868     F2 14 02 FB | 	rdlong	arg02, objptr
1486c     0F 13 02 F6 | 	mov	arg01, local01
14870     02 12 66 F0 | 	shl	arg01, #2
14874     14 E4 05 F1 | 	add	objptr, #20
14878     F2 16 02 FB | 	rdlong	arg03, objptr
1487c     0B 13 02 FD | 	qmul	arg01, arg03
14880                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
14880     F6 03 00 FF 
14884     00 12 06 F6 | 	mov	arg01, ##519168
14888     0C 13 82 F1 | 	sub	arg01, arg04
1488c     02 16 66 F0 | 	shl	arg03, #2
14890     0A 00 00 FF 
14894     D3 E5 05 F1 | 	add	objptr, ##5587
14898     18 18 62 FD | 	getqx	arg04
1489c     0C 15 02 F1 | 	add	arg02, arg04
148a0     CC 04 B0 FD | 	call	#_psram_spin2_write
148a4     0B 00 00 FF 
148a8     C0 E4 85 F1 | 	sub	objptr, ##5824
148ac     01 1E 06 F1 | 	add	local01, #1
148b0     01 00 00 FF 
148b4     30 1E 56 F2 | 	cmps	local01, ##560 wc
148b8     50 FF 9F CD |  if_b	jmp	#LR__1710
148bc                 | ' 
148bc                 | ' repeat i from 560 to 575
148bc     01 00 00 FF 
148c0     30 1E 06 F6 | 	mov	local01, ##560
148c4                 | LR__1711
148c4                 | '    fastline(0,1023,i,write_background)   
148c4     41 E4 05 F1 | 	add	objptr, #65
148c8     F2 18 02 FB | 	rdlong	arg04, objptr
148cc     41 E4 85 F1 | 	sub	objptr, #65
148d0     00 12 06 F6 | 	mov	arg01, #0
148d4     09 14 CE F9 | 	bmask	arg02, #9
148d8     0F 17 02 F6 | 	mov	arg03, local01
148dc     2C F1 BF FD | 	call	#_hg010b_spin2_fastline
148e0     01 1E 06 F1 | 	add	local01, #1
148e4     01 00 00 FF 
148e8     40 1E 16 F2 | 	cmp	local01, ##576 wc
148ec     D4 FF 9F CD |  if_b	jmp	#LR__1711
148f0     A7 F0 03 F6 | 	mov	ptra, fp
148f4     B2 00 A0 FD | 	call	#popregs_
148f8                 | _hg010b_spin2_scrollup_ret
148f8     2D 00 64 FD | 	ret
148fc                 | 
148fc                 | ' 
148fc                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
148fc                 | ' 
148fc                 | ' pub crlf()
148fc                 | _hg010b_spin2_crlf
148fc                 | ' 
148fc                 | ' cursor_x:=leading_spaces*2
148fc     01 00 00 FF 
14900     B2 E4 05 F1 | 	add	objptr, ##690
14904     F2 16 02 FB | 	rdlong	arg03, objptr
14908     01 16 66 F0 | 	shl	arg03, #1
1490c     01 00 00 FF 
14910     7A E4 85 F1 | 	sub	objptr, ##634
14914     F2 16 52 FC | 	wrword	arg03, objptr
14918                 | ' cursor_y+=1
14918     02 E4 05 F1 | 	add	objptr, #2
1491c     F2 16 C2 FA | 	rdbyte	arg03, objptr
14920     01 16 06 F1 | 	add	arg03, #1
14924     F2 16 42 FC | 	wrbyte	arg03, objptr
14928                 | ' if cursor_y>st_lines-1
14928     C3 E4 05 F1 | 	add	objptr, #195
1492c     F2 16 02 FB | 	rdlong	arg03, objptr
14930     01 16 86 F1 | 	sub	arg03, #1
14934     C3 E4 85 F1 | 	sub	objptr, #195
14938     F2 14 C2 FA | 	rdbyte	arg02, objptr
1493c     3A E4 85 F1 | 	sub	objptr, #58
14940     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
14944     2C 00 90 ED |  if_be	jmp	#LR__1720
14948                 | '   scrollup()
14948     00 12 06 F6 | 	mov	arg01, #0
1494c     01 00 00 FF 
14950     40 14 06 F6 | 	mov	arg02, ##576
14954     10 16 06 F6 | 	mov	arg03, #16
14958     A4 FE BF FD | 	call	#_hg010b_spin2_scrollup
1495c                 | '   cursor_y:=st_lines-1
1495c     FD E4 05 F1 | 	add	objptr, #253
14960     F2 16 02 FB | 	rdlong	arg03, objptr
14964     01 16 86 F1 | 	sub	arg03, #1
14968     C3 E4 85 F1 | 	sub	objptr, #195
1496c     F2 16 42 FC | 	wrbyte	arg03, objptr
14970     3A E4 85 F1 | 	sub	objptr, #58
14974                 | LR__1720
14974                 | ' setspritepos(17,4*cursor_x,16*cursor_y )  
14974     38 E4 05 F1 | 	add	objptr, #56
14978     F2 14 E2 FA | 	rdword	arg02, objptr
1497c     02 14 66 F0 | 	shl	arg02, #2
14980     02 E4 05 F1 | 	add	objptr, #2
14984     F2 16 C2 FA | 	rdbyte	arg03, objptr
14988     3A E4 85 F1 | 	sub	objptr, #58
1498c     04 16 66 F0 | 	shl	arg03, #4
14990     11 12 06 F6 | 	mov	arg01, #17
14994     44 EE BF FD | 	call	#_hg010b_spin2_setspritepos
14998                 | _hg010b_spin2_crlf_ret
14998     2D 00 64 FD | 	ret
1499c                 | 
1499c                 | ' 
1499c                 | ' 
1499c                 | ' '*************************************************************************
1499c                 | ' '                                                                        *
1499c                 | ' '  Conversions                                                           *
1499c                 | ' '                                                                        *
1499c                 | ' '*************************************************************************
1499c                 | ' 
1499c                 | ' ''---------- Convert a integer to dec string, return a pointer
1499c                 | ' 
1499c                 | ' pub inttostr(i):result |q,pos,k,j
1499c                 | _hg010b_spin2_inttostr
1499c     03 4A 05 F6 | 	mov	COUNT_, #3
149a0     A8 00 A0 FD | 	call	#pushregs_
149a4     09 1F 0A F6 | 	mov	local01, arg01 wz
149a8                 | ' 
149a8                 | ' j:=i
149a8                 | ' pos:=10
149a8     0A 20 06 F6 | 	mov	local02, #10
149ac                 | ' k:=0
149ac     00 22 06 F6 | 	mov	local03, #0
149b0                 | ' 
149b0                 | ' if (j==0)
149b0     18 00 90 5D |  if_ne	jmp	#LR__1730
149b4                 | '   n_string[0]:=48
149b4     49 E4 05 F1 | 	add	objptr, #73
149b8     F2 60 48 FC | 	wrbyte	#48, objptr
149bc                 | '   n_string[1]:=0
149bc     01 E4 05 F1 | 	add	objptr, #1
149c0     F2 00 48 FC | 	wrbyte	#0, objptr
149c4     4A E4 85 F1 | 	sub	objptr, #74
149c8     C4 00 90 FD | 	jmp	#LR__1737
149cc                 | LR__1730
149cc                 | ' 
149cc                 | ' else
149cc                 | '   if (j<0)
149cc     0F 1F 52 F6 | 	abs	local01, local01 wc
149d0                 | '     j:=0-j
149d0                 | '     k:=45
149d0     2D 22 06 C6 |  if_b	mov	local03, #45
149d4                 | ' 
149d4                 | '   n_string[11]:=0
149d4     54 E4 05 F1 | 	add	objptr, #84
149d8     F2 00 48 FC | 	wrbyte	#0, objptr
149dc     54 E4 85 F1 | 	sub	objptr, #84
149e0     97 24 48 FB | 	callpa	#(@LR__1732-@LR__1731)>>2,fcache_load_ptr_
149e4                 | '   repeat while (pos>-1)
149e4                 | LR__1731
149e4     00 20 56 F2 | 	cmps	local02, #0 wc
149e8     40 00 90 CD |  if_b	jmp	#LR__1733
149ec     0F FB 51 F6 | 	abs	result1, local01 wc
149f0     0A FA 15 FD | 	qdiv	result1, #10
149f4                 | '     q:=j//10
149f4     19 FA 61 FD | 	getqy	result1
149f8     FD FA 81 F6 | 	negc	result1, result1
149fc     0F 1F 52 F6 | 	abs	local01, local01 wc
14a00     0A 1E 16 FD | 	qdiv	local01, #10
14a04                 | '     q:=48+q
14a04     30 FA 05 F1 | 	add	result1, #48
14a08                 | '     n_string[pos]:=q
14a08     10 1F 02 F6 | 	mov	local01, local02
14a0c     49 E4 05 F1 | 	add	objptr, #73
14a10     F2 1E 02 F1 | 	add	local01, objptr
14a14     0F FB 41 FC | 	wrbyte	result1, local01
14a18                 | '     j:=j/10
14a18     49 E4 85 F1 | 	sub	objptr, #73
14a1c                 | '     pos-=1
14a1c     01 20 86 F1 | 	sub	local02, #1
14a20     18 1E 62 FD | 	getqx	local01
14a24     0F 1F 82 F6 | 	negc	local01, local01
14a28     B8 FF 9F FD | 	jmp	#LR__1731
14a2c                 | LR__1732
14a2c                 | LR__1733
14a2c                 | '   repeat while n_string[0]==48
14a2c                 | LR__1734
14a2c     49 E4 05 F1 | 	add	objptr, #73
14a30     F2 16 C2 FA | 	rdbyte	arg03, objptr
14a34     49 E4 85 F1 | 	sub	objptr, #73
14a38     30 16 0E F2 | 	cmp	arg03, #48 wz
14a3c     20 00 90 5D |  if_ne	jmp	#LR__1735
14a40                 | '     bytemove(@n_string,@n_string+1,12)
14a40     49 E4 05 F1 | 	add	objptr, #73
14a44     F2 12 02 F6 | 	mov	arg01, objptr
14a48     F2 14 02 F6 | 	mov	arg02, objptr
14a4c     49 E4 85 F1 | 	sub	objptr, #73
14a50     01 14 06 F1 | 	add	arg02, #1
14a54     0C 16 06 F6 | 	mov	arg03, #12
14a58     84 0C B0 FD | 	call	#__system____builtin_memmove
14a5c     CC FF 9F FD | 	jmp	#LR__1734
14a60                 | LR__1735
14a60                 | ' 
14a60                 | '   if k==45
14a60     2D 22 0E F2 | 	cmp	local03, #45 wz
14a64     28 00 90 5D |  if_ne	jmp	#LR__1736
14a68                 | '      bytemove(@n_string+1,@n_string,12)
14a68     49 E4 05 F1 | 	add	objptr, #73
14a6c     F2 12 02 F6 | 	mov	arg01, objptr
14a70     01 12 06 F1 | 	add	arg01, #1
14a74     F2 14 02 F6 | 	mov	arg02, objptr
14a78     49 E4 85 F1 | 	sub	objptr, #73
14a7c     0C 16 06 F6 | 	mov	arg03, #12
14a80     5C 0C B0 FD | 	call	#__system____builtin_memmove
14a84                 | '      n_string[0]:=k
14a84     49 E4 05 F1 | 	add	objptr, #73
14a88     F2 22 42 FC | 	wrbyte	local03, objptr
14a8c     49 E4 85 F1 | 	sub	objptr, #73
14a90                 | LR__1736
14a90                 | LR__1737
14a90                 | ' 
14a90                 | ' q:=@n_string
14a90     49 E4 05 F1 | 	add	objptr, #73
14a94     F2 FA 01 F6 | 	mov	result1, objptr
14a98     49 E4 85 F1 | 	sub	objptr, #73
14a9c                 | ' return q
14a9c     A7 F0 03 F6 | 	mov	ptra, fp
14aa0     B2 00 A0 FD | 	call	#popregs_
14aa4                 | _hg010b_spin2_inttostr_ret
14aa4     2D 00 64 FD | 	ret
14aa8                 | 
14aa8                 | ' 
14aa8                 | ' '..............................................................................
14aa8                 | ' 
14aa8                 | ' {{
14aa8                 | ' }}
14aa8                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
14aa8                 | _psram_spin2_startx
14aa8     04 4A 05 F6 | 	mov	COUNT_, #4
14aac     A8 00 A0 FD | 	call	#pushregs_
14ab0     09 1F 02 F6 | 	mov	local01, arg01
14ab4     0B 21 02 F6 | 	mov	local02, arg03
14ab8     0C 23 02 F6 | 	mov	local03, arg04
14abc                 | '     stop() ' restart driver if required
14abc     54 01 B0 FD | 	call	#_psram_spin2_stop
14ac0     00 1E 0E F2 | 	cmp	local01, #0 wz
14ac4     14 1E 06 AB |  if_e	rdlong	local01, #20
14ac8     0F 15 52 F6 | 	abs	arg02, local01 wc
14acc     A1 07 00 FF 
14ad0     40 14 16 FD | 	qdiv	arg02, ##1000000
14ad4                 | ' 
14ad4                 | '     ' use current frequency if none specified
14ad4                 | ' 
14ad4                 | '     if freq == 0 
14ad4                 | '         freq := clkfreq 
14ad4                 | ' 
14ad4                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
14ad4                 | ' 
14ad4                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
14ad4                 | '     if burst < 0
14ad4                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
14ad4     18 14 62 FD | 	getqx	arg02
14ad8     0A 19 82 F6 | 	negc	arg04, arg02
14adc     03 18 66 F0 | 	shl	arg04, #3
14ae0     84 18 86 F1 | 	sub	arg04, #132
14ae4     04 18 46 F0 | 	shr	arg04, #4
14ae8     04 18 66 F0 | 	shl	arg04, #4
14aec     00 18 56 F2 | 	cmps	arg04, #0 wc
14af0     0E FA 65 C6 |  if_b	neg	result1, #14
14af4     10 01 90 CD |  if_b	jmp	#LR__1743
14af8                 | ' 
14af8                 | '     ' compute the input delay
14af8                 | ' 
14af8                 | '     if delay <= 0
14af8     01 20 56 F2 | 	cmps	local02, #1 wc
14afc     10 00 90 3D |  if_ae	jmp	#LR__1740
14b00                 | '         delay := lookupDelay(freq)
14b00     0F 13 02 F6 | 	mov	arg01, local01
14b04     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
14b08     FD 20 02 F6 | 	mov	local02, result1
14b0c     04 00 90 FD | 	jmp	#LR__1741
14b10                 | LR__1740
14b10                 | '     else
14b10                 | '         delay <#= $f ' limit to 15
14b10     0F 20 66 F3 | 	fles	local02, #15
14b14                 | LR__1741
14b14                 | ' 
14b14                 | '     ' create our lock
14b14                 | ' 
14b14                 | '     driverlock := LOCKNEW()  
14b14     00 FA 05 F6 | 	mov	result1, #0
14b18     04 FA 61 FD | 	locknew	result1
14b1c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
14b20     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
14b24                 | '     if driverlock == -1
14b24     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
14b28     FF FF 7F FF 
14b2c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
14b30                 | '         return ERR_NO_LOCK
14b30     1A FA 65 A6 |  if_e	neg	result1, #26
14b34     D0 00 90 AD |  if_e	jmp	#LR__1743
14b38                 | ' 
14b38                 | '     ' patch in the proper data and HUB addresses to the startup structure
14b38                 | ' 
14b38                 | '     long[@startupData][0]:=clkfreq
14b38     14 1E 06 FB | 	rdlong	local01, #20
14b3c     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
14b40     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
14b44                 | ' '    long[@startupData][1]:=$1000_0000
14b44                 | '     long[@startupData][5]:=@deviceData
14b44     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
14b48     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
14b4c     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
14b50     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
14b54     14 14 06 F1 | 	add	arg02, #20
14b58     0A 1F 62 FC | 	wrlong	local01, arg02
14b5c                 | '     long[@startupData][6]:=@qosData
14b5c     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
14b60     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
14b64     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
14b68     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
14b6c     18 14 06 F1 | 	add	arg02, #24
14b70     0A 1F 62 FC | 	wrlong	local01, arg02
14b74                 | '     long[@startupData][7]:=$7FF00
14b74     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
14b78     1C 1E 06 F1 | 	add	local01, #28
14b7c     FF 03 80 FF 
14b80     0F 01 6A FC | 	wrlong	##524032, local01
14b84                 | ' 
14b84                 | '     ' setup some default bank and QoS parameter values
14b84                 | ' 
14b84                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
14b84     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
14b88     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
14b8c     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
14b90     10 18 66 F0 | 	shl	arg04, #16
14b94     0C 20 66 F0 | 	shl	local02, #12
14b98     10 19 42 F5 | 	or	arg04, local02
14b9c     18 18 46 F5 | 	or	arg04, #24
14ba0     0C 15 02 F6 | 	mov	arg02, arg04
14ba4     02 16 06 F6 | 	mov	arg03, #2
14ba8     A0 00 A0 FD | 	call	#\builtin_longfill_
14bac                 | '     longfill(@qosData, $FFFF0000, 8)
14bac     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
14bb0     07 16 06 F6 | 	mov	arg03, #7
14bb4     28 16 62 FD | 	setq	arg03
14bb8     80 FF FF FF 
14bbc     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
14bc0                 | ' 
14bc0                 | '     ' get the address of the PSRAM memory driver so we can start it
14bc0                 | ' 
14bc0                 | '     driverAddr:= driver.getDriverAddr()
14bc0                 | '     return @driver_start
14bc0     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
14bc4     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
14bc8     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
14bcc                 | ' 
14bcc                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
14bcc                 | ' 
14bcc                 | '     if desiredcog < 0
14bcc     00 22 56 F2 | 	cmps	local03, #0 wc
14bd0                 | '         desiredcog := NEWCOG
14bd0     10 22 06 C6 |  if_b	mov	local03, #16
14bd4                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
14bd4     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
14bd8     11 25 02 F6 | 	mov	local04, local03
14bdc     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
14be0     0A 25 F2 FC | 	coginit	local04, arg02 wc
14be4     01 24 66 C6 |  if_b	neg	local04, #1
14be8     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
14bec     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
14bf0                 | '     repeat until long[@startupData] == 0 
14bf0     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
14bf4                 | LR__1742
14bf4     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
14bf8     F8 FF 9F 5D |  if_ne	jmp	#LR__1742
14bfc                 | ' 
14bfc                 | '     return drivercog
14bfc     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
14c00     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
14c04     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14c08                 | LR__1743
14c08     A7 F0 03 F6 | 	mov	ptra, fp
14c0c     B2 00 A0 FD | 	call	#popregs_
14c10                 | _psram_spin2_startx_ret
14c10     2D 00 64 FD | 	ret
14c14                 | 
14c14                 | ' 
14c14                 | ' '..............................................................................
14c14                 | ' 
14c14                 | ' {{
14c14                 | ' }}
14c14                 | ' PUB stop() : i
14c14                 | _psram_spin2_stop
14c14     00 00 06 F6 | 	mov	_var01, #0
14c18                 | '     if drivercog <> -1
14c18     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
14c1c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
14c20     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14c24     FF FF 7F FF 
14c28     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
14c2c     70 00 90 AD |  if_e	jmp	#LR__1753
14c30                 | '         cogstop(drivercog) ' a rather brutal stop
14c30     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
14c34     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
14c38     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14c3c     03 12 62 FD | 	cogstop	arg01
14c40     97 26 48 FB | 	callpa	#(@LR__1752-@LR__1750)>>2,fcache_load_ptr_
14c44                 | '         repeat i from 0 to 7
14c44                 | LR__1750
14c44                 | '             if long[$7FF00][i*3] < 0
14c44     00 FB 01 F6 | 	mov	result1, _var01
14c48     01 FA 65 F0 | 	shl	result1, #1
14c4c     00 FB 01 F1 | 	add	result1, _var01
14c50     02 FA 65 F0 | 	shl	result1, #2
14c54     FF 03 00 FF 
14c58     00 FB 05 F1 | 	add	result1, ##524032
14c5c     FD FA 01 FB | 	rdlong	result1, result1
14c60     00 FA 55 F2 | 	cmps	result1, #0 wc
14c64     1C 00 90 3D |  if_ae	jmp	#LR__1751
14c68                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
14c68     00 FB 01 F6 | 	mov	result1, _var01
14c6c     01 FA 65 F0 | 	shl	result1, #1
14c70     00 FB 01 F1 | 	add	result1, _var01
14c74     02 FA 65 F0 | 	shl	result1, #2
14c78     FF 03 00 FF 
14c7c     00 FB 05 F1 | 	add	result1, ##524032
14c80     FD 20 68 FC | 	wrlong	#16, result1
14c84                 | LR__1751
14c84     01 00 06 F1 | 	add	_var01, #1
14c88     08 00 56 F2 | 	cmps	_var01, #8 wc
14c8c     B4 FF 9F CD |  if_b	jmp	#LR__1750
14c90                 | LR__1752
14c90                 | '         drivercog := -1
14c90     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
14c94     FF FF FF FF 
14c98     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
14c9c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14ca0                 | LR__1753
14ca0                 | '     if driverlock <> -1
14ca0     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
14ca4     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
14ca8     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
14cac     FF FF 7F FF 
14cb0     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
14cb4                 | '         LOCKRET(driverlock)
14cb4     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
14cb8     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
14cbc     05 12 62 5D |  if_ne	lockret	arg01
14cc0                 | '         driverlock := -1
14cc0     FF FF FF 5F 
14cc4     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
14cc8     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
14ccc     00 FB 01 F6 | 	mov	result1, _var01
14cd0                 | _psram_spin2_stop_ret
14cd0     2D 00 64 FD | 	ret
14cd4                 | 
14cd4                 | ' 
14cd4                 | ' '..............................................................................
14cd4                 | ' 
14cd4                 | ' {{
14cd4                 | ' }}
14cd4                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
14cd4                 | _psram_spin2_read1
14cd4                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
14cd4                 | '     if drivercog == -1 ' driver must be running
14cd4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
14cd8     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
14cdc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14ce0     FF FF 7F FF 
14ce4     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
14ce8                 | '         return ERR_INACTIVE
14ce8     0F FA 65 A6 |  if_e	neg	result1, #15
14cec     7C 00 90 AD |  if_e	jmp	#LR__1761
14cf0                 | '     if count == 0 ' don't even bother reading
14cf0     00 16 0E F2 | 	cmp	arg03, #0 wz
14cf4                 | '         return 0
14cf4     00 FA 05 A6 |  if_e	mov	result1, #0
14cf8     70 00 90 AD |  if_e	jmp	#LR__1761
14cfc                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
14cfc     00 FA 05 F6 | 	mov	result1, #0
14d00     01 FA 61 FD | 	cogid	result1
14d04     FD 00 02 F6 | 	mov	_var01, result1
14d08     01 00 66 F0 | 	shl	_var01, #1
14d0c     FD 00 02 F1 | 	add	_var01, result1
14d10     02 00 66 F0 | 	shl	_var01, #2
14d14     FF 03 00 FF 
14d18     00 03 06 F6 | 	mov	_var02, ##524032
14d1c     00 03 02 F1 | 	add	_var02, _var01
14d20                 | '     if long[mailbox] < 0
14d20     01 01 02 FB | 	rdlong	_var01, _var02
14d24     00 00 56 F2 | 	cmps	_var01, #0 wc
14d28                 | '         return ERR_MAILBOX_BUSY
14d28     1C FA 65 C6 |  if_b	neg	result1, #28
14d2c     3C 00 90 CD |  if_b	jmp	#LR__1761
14d30                 | '     long[mailbox][2] := count
14d30     08 02 06 F1 | 	add	_var02, #8
14d34     01 17 62 FC | 	wrlong	arg03, _var02
14d38                 | '     long[mailbox][1] := dstHubAddr
14d38     04 02 86 F1 | 	sub	_var02, #4
14d3c     01 13 62 FC | 	wrlong	arg01, _var02
14d40     04 02 86 F1 | 	sub	_var02, #4
14d44                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
14d44     0A 05 02 F6 | 	mov	_var03, arg02
14d48     D9 04 06 F4 | 	bitl	_var03, #217
14d4c     00 00 58 FF 
14d50     00 00 06 F6 | 	mov	_var01, ##-1342177280
14d54     02 01 02 F1 | 	add	_var01, _var03
14d58     01 01 62 FC | 	wrlong	_var01, _var02
14d5c                 | '     repeat
14d5c                 | LR__1760
14d5c                 | '         result := long[mailbox]    
14d5c     01 05 02 FB | 	rdlong	_var03, _var02
14d60     00 04 56 F2 | 	cmps	_var03, #0 wc
14d64     F4 FF 9F CD |  if_b	jmp	#LR__1760
14d68                 | '     while result < 0   
14d68                 | '     return -result                       'return success or error
14d68     02 FB 61 F6 | 	neg	result1, _var03
14d6c                 | LR__1761
14d6c                 | _psram_spin2_read1_ret
14d6c     2D 00 64 FD | 	ret
14d70                 | 
14d70                 | ' 
14d70                 | ' '..............................................................................
14d70                 | ' 
14d70                 | ' {{
14d70                 | ' }}
14d70                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
14d70                 | _psram_spin2_write
14d70                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
14d70                 | '     if drivercog == -1 ' driver must be running
14d70     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
14d74     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
14d78     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14d7c     FF FF 7F FF 
14d80     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
14d84                 | '         return ERR_INACTIVE
14d84     0F FA 65 A6 |  if_e	neg	result1, #15
14d88     7C 00 90 AD |  if_e	jmp	#LR__1771
14d8c                 | '     if count == 0 ' don't even bother writing
14d8c     00 16 0E F2 | 	cmp	arg03, #0 wz
14d90                 | '         return 0
14d90     00 FA 05 A6 |  if_e	mov	result1, #0
14d94     70 00 90 AD |  if_e	jmp	#LR__1771
14d98                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
14d98     00 FA 05 F6 | 	mov	result1, #0
14d9c     01 FA 61 FD | 	cogid	result1
14da0     FD 00 02 F6 | 	mov	_var01, result1
14da4     01 00 66 F0 | 	shl	_var01, #1
14da8     FD 00 02 F1 | 	add	_var01, result1
14dac     02 00 66 F0 | 	shl	_var01, #2
14db0     FF 03 00 FF 
14db4     00 03 06 F6 | 	mov	_var02, ##524032
14db8     00 03 02 F1 | 	add	_var02, _var01
14dbc                 | '     if long[mailbox] < 0
14dbc     01 01 02 FB | 	rdlong	_var01, _var02
14dc0     00 00 56 F2 | 	cmps	_var01, #0 wc
14dc4                 | '         return ERR_MAILBOX_BUSY
14dc4     1C FA 65 C6 |  if_b	neg	result1, #28
14dc8     3C 00 90 CD |  if_b	jmp	#LR__1771
14dcc                 | '     long[mailbox][2] := count
14dcc     08 02 06 F1 | 	add	_var02, #8
14dd0     01 17 62 FC | 	wrlong	arg03, _var02
14dd4                 | '     long[mailbox][1] := srcHubAddr
14dd4     04 02 86 F1 | 	sub	_var02, #4
14dd8     01 13 62 FC | 	wrlong	arg01, _var02
14ddc     04 02 86 F1 | 	sub	_var02, #4
14de0                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
14de0     0A 05 02 F6 | 	mov	_var03, arg02
14de4     D9 04 06 F4 | 	bitl	_var03, #217
14de8     00 00 78 FF 
14dec     00 00 06 F6 | 	mov	_var01, ##-268435456
14df0     02 01 02 F1 | 	add	_var01, _var03
14df4     01 01 62 FC | 	wrlong	_var01, _var02
14df8                 | '     repeat
14df8                 | LR__1770
14df8                 | '         result := long[mailbox]    
14df8     01 05 02 FB | 	rdlong	_var03, _var02
14dfc     00 04 56 F2 | 	cmps	_var03, #0 wc
14e00     F4 FF 9F CD |  if_b	jmp	#LR__1770
14e04                 | '     while result < 0   
14e04                 | '     return -result                       'return success or error
14e04     02 FB 61 F6 | 	neg	result1, _var03
14e08                 | LR__1771
14e08                 | _psram_spin2_write_ret
14e08     2D 00 64 FD | 	ret
14e0c                 | 
14e0c                 | ' 
14e0c                 | ' ' generalized fill
14e0c                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
14e0c                 | _psram_spin2_fill
14e0c     09 01 02 F6 | 	mov	_var01, arg01
14e10     0A 03 02 F6 | 	mov	_var02, arg02
14e14     0B 05 02 F6 | 	mov	_var03, arg03
14e18     0D 07 02 F6 | 	mov	_var04, arg05
14e1c                 | '     case datasize 
14e1c     01 06 86 F1 | 	sub	_var04, #1
14e20     04 06 26 F3 | 	fle	_var04, #4
14e24     30 06 62 FD | 	jmprel	_var04
14e28                 | LR__1780
14e28     10 00 90 FD | 	jmp	#LR__1781
14e2c     18 00 90 FD | 	jmp	#LR__1782
14e30     2C 00 90 FD | 	jmp	#LR__1784
14e34     1C 00 90 FD | 	jmp	#LR__1783
14e38     24 00 90 FD | 	jmp	#LR__1784
14e3c                 | LR__1781
14e3c                 | '         1: req := driver.R_WRITEBYTE
14e3c     00 00 60 FF 
14e40     00 08 06 F6 | 	mov	_var05, ##-1073741824
14e44     20 00 90 FD | 	jmp	#LR__1785
14e48                 | LR__1782
14e48                 | '         2: req := driver.R_WRITEWORD
14e48     00 00 68 FF 
14e4c     00 08 06 F6 | 	mov	_var05, ##-805306368
14e50     14 00 90 FD | 	jmp	#LR__1785
14e54                 | LR__1783
14e54                 | '         4: req := driver.R_WRITELONG
14e54     00 00 70 FF 
14e58     00 08 06 F6 | 	mov	_var05, ##-536870912
14e5c     08 00 90 FD | 	jmp	#LR__1785
14e60                 | LR__1784
14e60                 | '         other : return ERR_INVALID
14e60     06 FA 65 F6 | 	neg	result1, #6
14e64     94 00 90 FD | 	jmp	#LR__1787
14e68                 | LR__1785
14e68                 | '     if count == 0   ' nothing to do
14e68     00 04 0E F2 | 	cmp	_var03, #0 wz
14e6c                 | '         return 0
14e6c     00 FA 05 A6 |  if_e	mov	result1, #0
14e70     88 00 90 AD |  if_e	jmp	#LR__1787
14e74                 | '     if drivercog == -1
14e74     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
14e78     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
14e7c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14e80     FF FF 7F FF 
14e84     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
14e88                 | '         return ERR_INACTIVE
14e88     0F FA 65 A6 |  if_e	neg	result1, #15
14e8c     6C 00 90 AD |  if_e	jmp	#LR__1787
14e90                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
14e90     00 FA 05 F6 | 	mov	result1, #0
14e94     01 FA 61 FD | 	cogid	result1
14e98     FD 06 02 F6 | 	mov	_var04, result1
14e9c     01 06 66 F0 | 	shl	_var04, #1
14ea0     FD 06 02 F1 | 	add	_var04, result1
14ea4     02 06 66 F0 | 	shl	_var04, #2
14ea8     FF 03 00 FF 
14eac     00 0B 06 F6 | 	mov	_var06, ##524032
14eb0     03 0B 02 F1 | 	add	_var06, _var04
14eb4                 | '     if long[mailbox] < 0
14eb4     05 07 02 FB | 	rdlong	_var04, _var06
14eb8     00 06 56 F2 | 	cmps	_var04, #0 wc
14ebc                 | '         return ERR_MAILBOX_BUSY
14ebc     1C FA 65 C6 |  if_b	neg	result1, #28
14ec0     38 00 90 CD |  if_b	jmp	#LR__1787
14ec4                 | '     long[mailbox][2] := count
14ec4     08 0A 06 F1 | 	add	_var06, #8
14ec8     05 05 62 FC | 	wrlong	_var03, _var06
14ecc                 | '     long[mailbox][1] := pattern
14ecc     04 0A 86 F1 | 	sub	_var06, #4
14ed0     05 03 62 FC | 	wrlong	_var02, _var06
14ed4     04 0A 86 F1 | 	sub	_var06, #4
14ed8                 | '     long[mailbox] := req + (addr & $fffffff)
14ed8     04 0D 02 F6 | 	mov	_var07, _var05
14edc     00 0F 02 F6 | 	mov	_var08, _var01
14ee0     7C 0E 06 F4 | 	bitl	_var08, #124
14ee4     07 0D 02 F1 | 	add	_var07, _var08
14ee8     05 0D 62 FC | 	wrlong	_var07, _var06
14eec                 | '     repeat
14eec                 | LR__1786
14eec                 | '         r := long[mailbox]
14eec     05 0F 02 FB | 	rdlong	_var08, _var06
14ef0     00 0E 56 F2 | 	cmps	_var08, #0 wc
14ef4     F4 FF 9F CD |  if_b	jmp	#LR__1786
14ef8                 | '     while r < 0
14ef8                 | '     return -r                  ' return 0 for success or negated error code
14ef8     07 FB 61 F6 | 	neg	result1, _var08
14efc                 | LR__1787
14efc                 | _psram_spin2_fill_ret
14efc     2D 00 64 FD | 	ret
14f00                 | 
14f00                 | ' 
14f00                 | ' '..............................................................................
14f00                 | ' 
14f00                 | ' {{
14f00                 | ' }}
14f00                 | ' PUB setQos(cog, qos) : result | mailbox
14f00                 | _psram_spin2_setQos
14f00     09 01 02 F6 | 	mov	_var01, arg01
14f04                 | '     if drivercog == -1 ' driver must be running
14f04     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
14f08     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
14f0c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14f10     FF FF 7F FF 
14f14     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
14f18                 | '         return ERR_INACTIVE
14f18     0F FA 65 A6 |  if_e	neg	result1, #15
14f1c     9C 00 90 AD |  if_e	jmp	#LR__1794
14f20                 | '     if cog < 0 or cog > 7 ' enforce cog id range
14f20     00 00 56 F2 | 	cmps	_var01, #0 wc
14f24     08 00 90 CD |  if_b	jmp	#LR__1790
14f28     08 00 56 F2 | 	cmps	_var01, #8 wc
14f2c     08 00 90 CD |  if_b	jmp	#LR__1791
14f30                 | LR__1790
14f30                 | '         return ERR_INVALID
14f30     06 FA 65 F6 | 	neg	result1, #6
14f34     84 00 90 FD | 	jmp	#LR__1794
14f38                 | LR__1791
14f38                 | '     long[@qosData][cog] := qos & !$1ff
14f38     FF 15 26 F5 | 	andn	arg02, #511
14f3c     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
14f40     02 00 66 F0 | 	shl	_var01, #2
14f44     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
14f48     00 15 62 FC | 	wrlong	arg02, _var01
14f4c                 | '     mailbox := $7FF00 + drivercog*12
14f4c     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
14f50     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
14f54     02 07 02 F6 | 	mov	_var04, _var03
14f58     01 06 66 F0 | 	shl	_var04, #1
14f5c     02 07 02 F1 | 	add	_var04, _var03
14f60     02 06 66 F0 | 	shl	_var04, #2
14f64     FF 03 00 FF 
14f68     00 09 06 F6 | 	mov	_var05, ##524032
14f6c     03 09 02 F1 | 	add	_var05, _var04
14f70                 | '     repeat until LOCKTRY(driverlock)
14f70     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
14f74                 | LR__1792
14f74     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
14f78     06 12 72 FD | 	locktry	arg01 wc
14f7c     F4 FF 9F 3D |  if_ae	jmp	#LR__1792
14f80     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
14f84                 | '     long[mailbox] := driver.R_CONFIG + cogid()
14f84     00 06 06 F6 | 	mov	_var04, #0
14f88     01 06 62 FD | 	cogid	_var04
14f8c     00 00 78 FF 
14f90     00 02 06 F6 | 	mov	_var02, ##-268435456
14f94     03 03 02 F1 | 	add	_var02, _var04
14f98     04 03 62 FC | 	wrlong	_var02, _var05
14f9c                 | '     repeat while long[mailbox] < 0
14f9c                 | LR__1793
14f9c     04 03 02 FB | 	rdlong	_var02, _var05
14fa0     00 02 56 F2 | 	cmps	_var02, #0 wc
14fa4     F4 FF 9F CD |  if_b	jmp	#LR__1793
14fa8                 | '     LOCKREL(driverlock)
14fa8     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
14fac     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
14fb0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
14fb4     07 12 72 FD | 	lockrel	arg01 wc
14fb8     00 FA 05 F6 | 	mov	result1, #0
14fbc                 | LR__1794
14fbc                 | _psram_spin2_setQos_ret
14fbc     2D 00 64 FD | 	ret
14fc0                 | 
14fc0                 | ' 
14fc0                 | ' '..............................................................................
14fc0                 | ' 
14fc0                 | ' {{
14fc0                 | ' }}
14fc0                 | ' PRI lookupDelay(freq) : delay | profile
14fc0                 | _psram_spin2_lookupDelay
14fc0                 | '     profile := @delayTable
14fc0     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
14fc4     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
14fc8                 | '     delay := long[profile][0]
14fc8     00 03 02 FB | 	rdlong	_var02, _var01
14fcc                 | '     repeat while long[profile][1] 
14fcc     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
14fd0     97 16 48 FB | 	callpa	#(@LR__1801-@LR__1800)>>2,fcache_load_ptr_
14fd4                 | LR__1800
14fd4     04 00 06 F1 | 	add	_var01, #4
14fd8     00 FB 09 FB | 	rdlong	result1, _var01 wz
14fdc     04 00 86 F1 | 	sub	_var01, #4
14fe0     1C 00 90 AD |  if_e	jmp	#LR__1802
14fe4                 | '         if freq +< long[profile][1] 
14fe4     04 00 06 F1 | 	add	_var01, #4
14fe8     00 FB 01 FB | 	rdlong	result1, _var01
14fec     04 00 86 F1 | 	sub	_var01, #4
14ff0     FD 12 12 F2 | 	cmp	arg01, result1 wc
14ff4                 | '             quit
14ff4                 | '         profile += 4
14ff4     04 00 06 31 |  if_ae	add	_var01, #4
14ff8                 | '         delay++
14ff8     01 02 06 31 |  if_ae	add	_var02, #1
14ffc     D4 FF 9F 3D |  if_ae	jmp	#LR__1800
15000                 | LR__1801
15000                 | LR__1802
15000     01 FB 01 F6 | 	mov	result1, _var02
15004                 | _psram_spin2_lookupDelay_ret
15004     2D 00 64 FD | 	ret
15008                 | 
15008                 | ' 
15008                 | ' PUB start() : r
15008                 | _usbnew_spin2_start
15008     00 00 06 F6 | 	mov	_var01, #0
1500c                 | '   ifnot driver_cog
1500c     15 00 00 FF 
15010     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
15014     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
15018     15 00 00 FF 
1501c     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
15020     38 00 90 5D |  if_ne	jmp	#LR__1810
15024                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
15024     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
15028     10 00 06 F6 | 	mov	_var01, #16
1502c     00 16 06 F6 | 	mov	arg03, #0
15030     28 16 62 FD | 	setq	arg03
15034     0A 01 F2 FC | 	coginit	_var01, arg02 wc
15038     01 00 66 C6 |  if_b	neg	_var01, #1
1503c                 | '     if r >= 0
1503c     00 00 56 F2 | 	cmps	_var01, #0 wc
15040                 | '       driver_cog := r+1
15040     00 03 02 36 |  if_ae	mov	_var02, _var01
15044     01 02 06 31 |  if_ae	add	_var02, #1
15048     15 00 00 3F 
1504c     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
15050     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
15054     15 00 00 3F 
15058     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
1505c                 | LR__1810
1505c     00 FB 01 F6 | 	mov	result1, _var01
15060                 | _usbnew_spin2_start_ret
15060     2D 00 64 FD | 	ret
15064                 | 
15064                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
15064                 | ' 
15064                 | ' '' Return key event from buffer if there is one
15064                 | ' PUB get_key() : r | tail
15064                 | _usbnew_spin2_get_key
15064                 | '   tail := keyq_tail
15064     0F 00 00 FF 
15068     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
1506c     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
15070                 | '   if keyq_head == tail
15070     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
15074     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
15078     0F 00 00 FF 
1507c     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
15080     00 03 0A F2 | 	cmp	_var02, _var01 wz
15084                 | '     return 0 ' No event
15084     00 FA 05 A6 |  if_e	mov	result1, #0
15088     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
1508c                 | '   r := keyq_data[tail]
1508c     00 03 02 F6 | 	mov	_var02, _var01
15090     02 02 66 F0 | 	shl	_var02, #2
15094     0F 00 00 FF 
15098     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
1509c     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
150a0     01 FB 01 FB | 	rdlong	result1, _var02
150a4                 | '   if ++tail == KEYQUEUE_SIZE
150a4     01 00 06 F1 | 	add	_var01, #1
150a8     80 00 0E F2 | 	cmp	_var01, #128 wz
150ac                 | '     tail := 0
150ac     00 00 06 A6 |  if_e	mov	_var01, #0
150b0                 | '   keyq_tail := tail
150b0     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
150b4     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
150b8     0F 00 00 FF 
150bc     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
150c0                 | _usbnew_spin2_get_key_ret
150c0     2D 00 64 FD | 	ret
150c4                 | 
150c4                 | ' 
150c4                 | ' '' Emulate mouse movement
150c4                 | ' PUB mouse_move(x,y)
150c4                 | _usbnew_spin2_mouse_move
150c4     02 4A 05 F6 | 	mov	COUNT_, #2
150c8     A8 00 A0 FD | 	call	#pushregs_
150cc     09 1F 02 F6 | 	mov	local01, arg01
150d0     0A 21 02 F6 | 	mov	local02, arg02
150d4                 | '   mouse_lock := 1
150d4     14 00 00 FF 
150d8     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
150dc     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
150e0     14 00 00 FF 
150e4     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
150e8                 | '   waitus(2) ' hope driver is now done
150e8     02 12 06 F6 | 	mov	arg01, #2
150ec     30 0A B0 FD | 	call	#__system___waitus
150f0                 | '   mouse_xacc := x
150f0     14 00 00 FF 
150f4     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
150f8     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
150fc                 | '   mouse_yacc := y
150fc     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
15100     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
15104                 | '   if mouse_outptr
15104     04 00 00 FF 
15108     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
1510c     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
15110     0F 00 00 FF 
15114     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
15118     24 00 90 AD |  if_e	jmp	#LR__1820
1511c                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
1511c     10 20 66 F0 | 	shl	local02, #16
15120     0F 1F 32 F9 | 	getword	local01, local01, #0
15124     0F 21 42 F5 | 	or	local02, local01
15128     0F 00 00 FF 
1512c     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
15130     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
15134     0F 00 00 FF 
15138     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1513c     0F 21 62 FC | 	wrlong	local02, local01
15140                 | LR__1820
15140                 | '   mouse_lock := 0
15140     14 00 00 FF 
15144     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
15148     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
1514c     14 00 00 FF 
15150     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
15154     A7 F0 03 F6 | 	mov	ptra, fp
15158     B2 00 A0 FD | 	call	#popregs_
1515c                 | _usbnew_spin2_mouse_move_ret
1515c     2D 00 64 FD | 	ret
15160                 | 
15160                 | '     '' Set HAVE_HIDPAD to enable.
15160                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
15160                 | ' 
15160                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
15160                 | ' PUB hidpad_id(dev) : r
15160                 | _usbnew_spin2_hidpad_id
15160                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
15160     13 00 00 FF 
15164     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
15168     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1516c     09 01 02 F6 | 	mov	_var01, arg01
15170     03 00 66 F0 | 	shl	_var01, #3
15174     09 01 82 F1 | 	sub	_var01, arg01
15178     02 00 66 F0 | 	shl	_var01, #2
1517c     00 FB 01 F1 | 	add	result1, _var01
15180     FD FA 01 FB | 	rdlong	result1, result1
15184     13 00 00 FF 
15188     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1518c                 | _usbnew_spin2_hidpad_id_ret
1518c     2D 00 64 FD | 	ret
15190                 | 
15190                 | ' 
15190                 | ' '' Get all button states for a device
15190                 | ' PUB hidpad_buttons(dev) : r 
15190                 | _usbnew_spin2_hidpad_buttons
15190                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
15190     13 00 00 FF 
15194     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
15198     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1519c     09 01 02 F6 | 	mov	_var01, arg01
151a0     03 00 66 F0 | 	shl	_var01, #3
151a4     09 01 82 F1 | 	sub	_var01, arg01
151a8     02 00 66 F0 | 	shl	_var01, #2
151ac     00 FB 01 F1 | 	add	result1, _var01
151b0     14 FA 05 F1 | 	add	result1, #20
151b4     FD FA 01 FB | 	rdlong	result1, result1
151b8     13 00 00 FF 
151bc     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
151c0                 | _usbnew_spin2_hidpad_buttons_ret
151c0     2D 00 64 FD | 	ret
151c4                 | 
151c4                 | ' 
151c4                 | ' '' Get state of an axis (normalized between -32768 and 32767)
151c4                 | ' PUB hidpad_axis(dev,axnum) : r
151c4                 | _usbnew_spin2_hidpad_axis
151c4                 | '   if axnum +>= 6
151c4     06 14 16 F2 | 	cmp	arg02, #6 wc
151c8                 | '     return 0
151c8     00 FA 05 36 |  if_ae	mov	result1, #0
151cc     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
151d0                 | '   else 
151d0                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
151d0     13 00 00 FF 
151d4     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
151d8     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
151dc     09 01 02 F6 | 	mov	_var01, arg01
151e0     03 00 66 F0 | 	shl	_var01, #3
151e4     09 01 82 F1 | 	sub	_var01, arg01
151e8     02 00 66 F0 | 	shl	_var01, #2
151ec     00 FB 01 F1 | 	add	result1, _var01
151f0     04 00 06 F6 | 	mov	_var01, #4
151f4     0A 01 02 F1 | 	add	_var01, arg02
151f8     01 00 66 F0 | 	shl	_var01, #1
151fc     FD 00 02 F1 | 	add	_var01, result1
15200     00 FB E1 FA | 	rdword	result1, _var01
15204     0F FA 65 F7 | 	signx	result1, #15
15208     13 00 00 FF 
1520c     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
15210                 | _usbnew_spin2_hidpad_axis_ret
15210     2D 00 64 FD | 	ret
15214                 | 
15214                 | ' 
15214                 | ' 
15214                 | ' '--------------------------------------------------------------
15214                 | ' '---------- Init the variables, start the cog. ----------------
15214                 | ' '--------------------------------------------------------------
15214                 | ' 
15214                 | ' pub start(mbox,scope,cache) :cog,base | iii
15214                 | _Audio093b_8_sc_spin2_start
15214     04 4A 05 F6 | 	mov	COUNT_, #4
15218     A8 00 A0 FD | 	call	#pushregs_
1521c     09 1F 02 F6 | 	mov	local01, arg01
15220                 | ' 
15220                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
15220                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
15220                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
15220                 | ' 
15220                 | ' mailboxaddr:=mbox 
15220     F2 1E 62 FC | 	wrlong	local01, objptr
15224                 | ' scope_ptr:=scope
15224     04 E4 05 F1 | 	add	objptr, #4
15228     F2 14 62 FC | 	wrlong	arg02, objptr
1522c                 | ' cache_ptr:=cache
1522c     04 E4 05 F1 | 	add	objptr, #4
15230     F2 16 62 FC | 	wrlong	arg03, objptr
15234                 | ' base:=@channel1[0]
15234     04 E4 05 F1 | 	add	objptr, #4
15238     F2 20 02 F6 | 	mov	local02, objptr
1523c                 | ' 
1523c                 | ' repeat iii from 0 to 7
1523c     00 22 06 F6 | 	mov	local03, #0
15240     01 00 00 FF 
15244     D8 E7 05 F1 | 	add	ptr__Audio093b_8_sc_spin2_dat__, ##984
15248     0C E4 85 F1 | 	sub	objptr, #12
1524c     97 80 48 FB | 	callpa	#(@LR__1831-@LR__1830)>>2,fcache_load_ptr_
15250                 | LR__1830
15250                 | '   long[base+32*iii]:=0
15250     10 1F 02 F6 | 	mov	local01, local02
15254     11 FD 01 F6 | 	mov	result2, local03
15258     05 FC 65 F0 | 	shl	result2, #5
1525c     FE 1E 02 F1 | 	add	local01, result2
15260     0F 01 68 FC | 	wrlong	#0, local01
15264                 | '   long[base+32*iii+4]:=0
15264     10 1F 02 F6 | 	mov	local01, local02
15268     11 FD 01 F6 | 	mov	result2, local03
1526c     05 FC 65 F0 | 	shl	result2, #5
15270     FE 1E 02 F1 | 	add	local01, result2
15274     04 1E 06 F1 | 	add	local01, #4
15278     0F 01 68 FC | 	wrlong	#0, local01
1527c                 | '   long[base+32*iii+12]:=0
1527c     10 25 02 F6 | 	mov	local04, local02
15280     11 1F 02 F6 | 	mov	local01, local03
15284     05 1E 66 F0 | 	shl	local01, #5
15288     0F 25 02 F1 | 	add	local04, local01
1528c     0C 24 06 F1 | 	add	local04, #12
15290     12 01 68 FC | 	wrlong	#0, local04
15294                 | '   long[base+32*iii+16]:=2 
15294     10 25 02 F6 | 	mov	local04, local02
15298     11 1F 02 F6 | 	mov	local01, local03
1529c     05 1E 66 F0 | 	shl	local01, #5
152a0     0F 25 02 F1 | 	add	local04, local01
152a4     10 24 06 F1 | 	add	local04, #16
152a8     12 05 68 FC | 	wrlong	#2, local04
152ac                 | '   word[base+32*iii+20]:=0
152ac     10 25 02 F6 | 	mov	local04, local02
152b0     11 1F 02 F6 | 	mov	local01, local03
152b4     05 1E 66 F0 | 	shl	local01, #5
152b8     0F 25 02 F1 | 	add	local04, local01
152bc     14 24 06 F1 | 	add	local04, #20
152c0     12 01 58 FC | 	wrword	#0, local04
152c4                 | '   word[base+32*iii+22]:=8192
152c4     10 25 02 F6 | 	mov	local04, local02
152c8     11 1F 02 F6 | 	mov	local01, local03
152cc     05 1E 66 F0 | 	shl	local01, #5
152d0     0F 25 02 F1 | 	add	local04, local01
152d4     16 24 06 F1 | 	add	local04, #22
152d8     10 00 80 FF 
152dc     12 01 58 FC | 	wrword	##8192, local04
152e0                 | '   word[base+32*iii+24]:=4000+2*iii
152e0     11 25 02 F6 | 	mov	local04, local03
152e4     01 24 66 F0 | 	shl	local04, #1
152e8     07 00 00 FF 
152ec     A0 1F 06 F6 | 	mov	local01, ##4000
152f0     12 1F 02 F1 | 	add	local01, local04
152f4     10 25 02 F6 | 	mov	local04, local02
152f8     11 FD 01 F6 | 	mov	result2, local03
152fc     05 FC 65 F0 | 	shl	result2, #5
15300     FE 24 02 F1 | 	add	local04, result2
15304     18 24 06 F1 | 	add	local04, #24
15308     12 1F 52 FC | 	wrword	local01, local04
1530c                 | '   word[base+32*iii+26]:=2
1530c     10 25 02 F6 | 	mov	local04, local02
15310     11 1F 02 F6 | 	mov	local01, local03
15314     05 1E 66 F0 | 	shl	local01, #5
15318     0F 25 02 F1 | 	add	local04, local01
1531c     1A 24 06 F1 | 	add	local04, #26
15320     12 05 58 FC | 	wrword	#2, local04
15324                 | '   long [base+32*iii+8]:=@null | $C0000000
15324     F3 1E 02 F6 | 	mov	local01, ptr__Audio093b_8_sc_spin2_dat__
15328     3E 1E 26 F4 | 	bith	local01, #62
1532c     10 25 02 F6 | 	mov	local04, local02
15330     11 17 02 F6 | 	mov	arg03, local03
15334     05 16 66 F0 | 	shl	arg03, #5
15338     0B 25 02 F1 | 	add	local04, arg03
1533c     08 24 06 F1 | 	add	local04, #8
15340     12 1F 62 FC | 	wrlong	local01, local04
15344     01 22 06 F1 | 	add	local03, #1
15348     08 22 56 F2 | 	cmps	local03, #8 wc
1534c     00 FF 9F CD |  if_b	jmp	#LR__1830
15350                 | LR__1831
15350     01 00 00 FF 
15354     D8 E7 85 F1 | 	sub	ptr__Audio093b_8_sc_spin2_dat__, ##984
15358                 | '   
15358                 | ' cog:=coginit(16,@audio,@mailboxaddr)
15358     F3 14 02 F6 | 	mov	arg02, ptr__Audio093b_8_sc_spin2_dat__
1535c     F2 16 02 F6 | 	mov	arg03, objptr
15360     10 24 06 F6 | 	mov	local04, #16
15364     28 16 62 FD | 	setq	arg03
15368     0A 25 F2 FC | 	coginit	local04, arg02 wc
1536c     01 24 66 C6 |  if_b	neg	local04, #1
15370                 | ' waitms(100)
15370     64 12 06 F6 | 	mov	arg01, #100
15374     3C 07 B0 FD | 	call	#__system___waitms
15378                 | ' return cog,base
15378     10 FD 01 F6 | 	mov	result2, local02
1537c     12 FB 01 F6 | 	mov	result1, local04
15380     A7 F0 03 F6 | 	mov	ptra, fp
15384     B2 00 A0 FD | 	call	#popregs_
15388                 | _Audio093b_8_sc_spin2_start_ret
15388     2D 00 64 FD | 	ret
1538c                 | 
1538c                 | ' 
1538c                 | ' ' a simple play procedure to not poke everything. 
1538c                 | ' 
1538c                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
1538c                 | _Audio093b_8_sc_spin2_play
1538c     0C E4 05 F1 | 	add	objptr, #12
15390     F2 00 02 F6 | 	mov	_var01, objptr
15394     05 12 66 F0 | 	shl	arg01, #5
15398     09 01 02 F1 | 	add	_var01, arg01
1539c     00 00 60 FF 
153a0     00 14 06 F1 | 	add	arg02, ##-1073741824
153a4     00 13 02 F6 | 	mov	arg01, _var01
153a8     08 12 06 F1 | 	add	arg01, #8
153ac     09 15 62 FC | 	wrlong	arg02, arg01
153b0     00 15 02 F6 | 	mov	arg02, _var01
153b4     0C 14 06 F1 | 	add	arg02, #12
153b8     0A 1B 62 FC | 	wrlong	arg05, arg02
153bc     00 1C 56 F2 | 	cmps	arg06, #0 wc
153c0     00 15 02 36 |  if_ae	mov	arg02, _var01
153c4     10 14 06 31 |  if_ae	add	arg02, #16
153c8     0A 1D 62 3C |  if_ae	wrlong	arg06, arg02
153cc     02 1A 06 C1 |  if_b	add	arg05, #2
153d0     00 13 02 C6 |  if_b	mov	arg01, _var01
153d4     10 12 06 C1 |  if_b	add	arg01, #16
153d8     09 1B 62 CC |  if_b	wrlong	arg05, arg01
153dc     0B 15 52 F6 | 	abs	arg02, arg03 wc
153e0     0F 1B 80 FF 
153e4     0A 3F 1A FD | 	qdiv	##3546911, arg02
153e8                 | ' 
153e8                 | ' base2:=@channel1[0]+32*channel
153e8                 | ' long[base2+8]:=sample+$C0000000 
153e8                 | ' long[base2+12]:= len
153e8                 | ' if loop >=0 
153e8                 | '   long[base2+16]:= loop
153e8     0C E4 85 F1 | 	sub	objptr, #12
153ec                 | ' else
153ec                 | '   long[base2+16]:= len+2
153ec                 | ' word[base2+20]:=vol
153ec     00 15 02 F6 | 	mov	arg02, _var01
153f0     14 14 06 F1 | 	add	arg02, #20
153f4     0A 19 52 FC | 	wrword	arg04, arg02
153f8                 | ' word[base2+24]:= 3546911/splfreq 
153f8     00 13 02 F6 | 	mov	arg01, _var01
153fc     18 12 06 F1 | 	add	arg01, #24
15400                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
15400                 | ' long[base2+28]:=$40000000
15400     18 14 62 FD | 	getqx	arg02
15404     0A 15 82 F6 | 	negc	arg02, arg02
15408     09 15 52 FC | 	wrword	arg02, arg01
1540c     00 15 02 F6 | 	mov	arg02, _var01
15410     1A 14 06 F1 | 	add	arg02, #26
15414     0A 01 5A FC | 	wrword	#256, arg02
15418     1C 00 06 F1 | 	add	_var01, #28
1541c     00 00 A0 FF 
15420     00 01 68 FC | 	wrlong	##1073741824, _var01
15424                 | _Audio093b_8_sc_spin2_play_ret
15424     2D 00 64 FD | 	ret
15428                 | 
15428                 | ' until (i >>8) >=len
15428                 | ' 
15428                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
15428                 | _Audio093b_8_sc_spin2_play8
15428                 | ' 
15428                 | ' base2:=@channel1[0]+32*channel
15428     0C E4 05 F1 | 	add	objptr, #12
1542c     F2 00 02 F6 | 	mov	_var01, objptr
15430     05 12 66 F0 | 	shl	arg01, #5
15434     09 01 02 F1 | 	add	_var01, arg01
15438                 | ' long[base2]:=0
15438     00 01 68 FC | 	wrlong	#0, _var01
1543c                 | ' long[base2+8]:=sample+$40000000 
1543c     00 00 20 FF 
15440     00 14 06 F1 | 	add	arg02, ##1073741824
15444     00 13 02 F6 | 	mov	arg01, _var01
15448     08 12 06 F1 | 	add	arg01, #8
1544c     09 15 62 FC | 	wrlong	arg02, arg01
15450                 | ' if loop>=0
15450     00 1C 56 F2 | 	cmps	arg06, #0 wc
15454     0C E4 85 F1 | 	sub	objptr, #12
15458     1C 00 90 CD |  if_b	jmp	#LR__1840
1545c                 | '   long[base2+12]:=loop
1545c     00 15 02 F6 | 	mov	arg02, _var01
15460     0C 14 06 F1 | 	add	arg02, #12
15464     0A 1D 62 FC | 	wrlong	arg06, arg02
15468                 | '   long[base2+16]:= len
15468     00 1D 02 F6 | 	mov	arg06, _var01
1546c     10 1C 06 F1 | 	add	arg06, #16
15470     0E 1B 62 FC | 	wrlong	arg05, arg06
15474     1C 00 90 FD | 	jmp	#LR__1841
15478                 | LR__1840
15478                 | ' else
15478                 | '   long[base2+12]:= len
15478     00 1D 02 F6 | 	mov	arg06, _var01
1547c     0C 1C 06 F1 | 	add	arg06, #12
15480     0E 1B 62 FC | 	wrlong	arg05, arg06
15484                 | '   long[base2+16]:= len+1
15484     01 1A 06 F1 | 	add	arg05, #1
15488     00 13 02 F6 | 	mov	arg01, _var01
1548c     10 12 06 F1 | 	add	arg01, #16
15490     09 1B 62 FC | 	wrlong	arg05, arg01
15494                 | LR__1841
15494     0B 17 52 F6 | 	abs	arg03, arg03 wc
15498     0F 1B 80 FF 
1549c     0B 3F 1A FD | 	qdiv	##3546911, arg03
154a0                 | ' word[base2+20]:=vol
154a0     00 17 02 F6 | 	mov	arg03, _var01
154a4     14 16 06 F1 | 	add	arg03, #20
154a8     0B 19 52 FC | 	wrword	arg04, arg03
154ac                 | ' word[base2+24]:= 3546911/splfreq 
154ac     00 13 02 F6 | 	mov	arg01, _var01
154b0     18 12 06 F1 | 	add	arg01, #24
154b4                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
154b4                 | ' long[base2+28]:=$40000000
154b4     18 18 62 FD | 	getqx	arg04
154b8     0C 19 82 F6 | 	negc	arg04, arg04
154bc     09 19 52 FC | 	wrword	arg04, arg01
154c0     00 19 02 F6 | 	mov	arg04, _var01
154c4     1A 18 06 F1 | 	add	arg04, #26
154c8     0C 01 5A FC | 	wrword	#256, arg04
154cc     1C 00 06 F1 | 	add	_var01, #28
154d0     00 00 A0 FF 
154d4     00 01 68 FC | 	wrlong	##1073741824, _var01
154d8                 | _Audio093b_8_sc_spin2_play8_ret
154d8     2D 00 64 FD | 	ret
154dc                 | 
154dc                 | ' 
154dc                 | '     
154dc                 | ' pub stop(channel) 'silence it
154dc                 | _Audio093b_8_sc_spin2_stop
154dc                 | ' 
154dc                 | ' word[@channel1[0]+32*channel+20]:=0
154dc     0C E4 05 F1 | 	add	objptr, #12
154e0     F2 00 02 F6 | 	mov	_var01, objptr
154e4     05 12 66 F0 | 	shl	arg01, #5
154e8     09 01 02 F1 | 	add	_var01, arg01
154ec     14 00 06 F1 | 	add	_var01, #20
154f0     00 01 58 FC | 	wrword	#0, _var01
154f4     0C E4 85 F1 | 	sub	objptr, #12
154f8                 | _Audio093b_8_sc_spin2_stop_ret
154f8     2D 00 64 FD | 	ret
154fc                 | hubexit
154fc     81 00 80 FD | 	jmp	#cogexit
15500                 | 
15500                 | __system___setbaud
15500     14 5E 06 FB | 	rdlong	muldiva_, #20
15504     09 61 02 F6 | 	mov	muldivb_, arg01
15508     BA 00 A0 FD | 	call	#divide_
1550c     97 06 48 FB | 	callpa	#(@LR__1851-@LR__1850)>>2,fcache_load_ptr_
15510                 | LR__1850
15510     3E FA 9D FA | 	rdpin	result1, #62 wc
15514     FE FC A1 F1 | 	subx	result2, result2
15518     F4 FF 9F CD |  if_b	jmp	#LR__1850
1551c                 | LR__1851
1551c     40 7C 64 FD | 	dirl	#62
15520     40 7E 64 FD | 	dirl	#63
15524     F4 60 62 FC | 	wrlong	muldivb_, ptr___system__dat__
15528     10 60 66 F0 | 	shl	muldivb_, #16
1552c     07 14 06 F6 | 	mov	arg02, #7
15530     30 15 02 F1 | 	add	arg02, muldivb_
15534     3E F8 0C FC | 	wrpin	#124, #62
15538     3E 14 16 FC | 	wxpin	arg02, #62
1553c     3F 7C 0C FC | 	wrpin	#62, #63
15540     14 14 06 F1 | 	add	arg02, #20
15544     3F 14 16 FC | 	wxpin	arg02, #63
15548     41 7C 64 FD | 	dirh	#62
1554c     41 7E 64 FD | 	dirh	#63
15550                 | __system___setbaud_ret
15550     2D 00 64 FD | 	ret
15554                 | 
15554                 | __system___txraw
15554     01 4A 05 F6 | 	mov	COUNT_, #1
15558     A8 00 A0 FD | 	call	#pushregs_
1555c     09 1F 02 F6 | 	mov	local01, arg01
15560     97 06 48 FB | 	callpa	#(@LR__1861-@LR__1860)>>2,fcache_load_ptr_
15564                 | LR__1860
15564     3E FA 9D FA | 	rdpin	result1, #62 wc
15568     FE FC A1 F1 | 	subx	result2, result2
1556c     F4 FF 9F CD |  if_b	jmp	#LR__1860
15570                 | LR__1861
15570     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
15574     C2 01 00 AF 
15578     00 12 06 A6 |  if_e	mov	arg01, ##230400
1557c     80 FF BF AD |  if_e	call	#__system___setbaud
15580     3E 1E 26 FC | 	wypin	local01, #62
15584     01 FA 05 F6 | 	mov	result1, #1
15588     A7 F0 03 F6 | 	mov	ptra, fp
1558c     B2 00 A0 FD | 	call	#popregs_
15590                 | __system___txraw_ret
15590     2D 00 64 FD | 	ret
15594                 | 
15594                 | __system___rxraw
15594     0D 4A 05 F6 | 	mov	COUNT_, #13
15598     A8 00 A0 FD | 	call	#pushregs_
1559c     09 1F 02 F6 | 	mov	local01, arg01
155a0     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
155a4     C2 01 00 AF 
155a8     00 12 06 A6 |  if_e	mov	arg01, ##230400
155ac     50 FF BF AD |  if_e	call	#__system___setbaud
155b0     00 1E 0E F2 | 	cmp	local01, #0 wz
155b4     20 00 90 AD |  if_e	jmp	#LR__1870
155b8     14 22 06 FB | 	rdlong	local03, #20
155bc     0A 22 46 F0 | 	shr	local03, #10
155c0     11 1F 02 FD | 	qmul	local01, local03
155c4     1A FA 61 FD | 	getct	result1
155c8     18 24 62 FD | 	getqx	local04
155cc     12 FB 01 F1 | 	add	result1, local04
155d0     FD 26 02 F6 | 	mov	local05, result1
155d4     04 00 90 FD | 	jmp	#LR__1871
155d8                 | LR__1870
155d8     00 26 06 F6 | 	mov	local05, #0
155dc                 | LR__1871
155dc     01 28 66 F6 | 	neg	local06, #1
155e0     3F 2A 06 F6 | 	mov	local07, #63
155e4     00 2C 06 F6 | 	mov	local08, #0
155e8     04 E8 05 F1 | 	add	ptr___system__dat__, #4
155ec     F4 2E 02 FB | 	rdlong	local09, ptr___system__dat__
155f0     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
155f4                 | LR__1872
155f4     08 2E 16 F4 | 	testb	local09, #8 wc
155f8     09 2E 76 F4 | 	testbn	local09, #9 andc
155fc     0A 2E 46 F0 | 	shr	local09, #10
15600     01 2C 06 C6 |  if_b	mov	local08, #1
15604     40 7E 6C 3D |  if_ae	testp	#63 wz
15608     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
1560c     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
15610     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
15614                 | LR__1873
15614     00 20 06 F6 | 	mov	local02, #0
15618     00 2C 0E F2 | 	cmp	local08, #0 wz
1561c     01 20 66 56 |  if_ne	neg	local02, #1
15620     00 30 06 F6 | 	mov	local10, #0
15624     00 22 06 F6 | 	mov	local03, #0
15628     00 1E 0E F2 | 	cmp	local01, #0 wz
1562c     01 22 66 56 |  if_ne	neg	local03, #1
15630     00 24 06 F6 | 	mov	local04, #0
15634     00 32 06 F6 | 	mov	local11, #0
15638     1A FA 61 FD | 	getct	result1
1563c     FD 34 02 F6 | 	mov	local12, result1
15640     1A 37 02 F6 | 	mov	local13, local12
15644     13 37 82 F1 | 	sub	local13, local05
15648     00 36 56 F2 | 	cmps	local13, #0 wc
1564c     00 32 26 C6 |  if_b	not	local11, #0
15650     00 32 0E F2 | 	cmp	local11, #0 wz
15654     00 24 26 56 |  if_ne	not	local04, #0
15658     12 23 CA F7 | 	test	local03, local04 wz
1565c     00 30 26 56 |  if_ne	not	local10, #0
15660     18 21 4A F5 | 	or	local02, local10 wz
15664     8C FF 9F AD |  if_e	jmp	#LR__1872
15668     00 2C 0E F2 | 	cmp	local08, #0 wz
1566c     17 29 02 56 |  if_ne	mov	local06, local09
15670     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
15674     04 E8 05 F1 | 	add	ptr___system__dat__, #4
15678     F4 2E 62 FC | 	wrlong	local09, ptr___system__dat__
1567c     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
15680     14 FB 01 F6 | 	mov	result1, local06
15684     A7 F0 03 F6 | 	mov	ptra, fp
15688     B2 00 A0 FD | 	call	#popregs_
1568c                 | __system___rxraw_ret
1568c     2D 00 64 FD | 	ret
15690                 | 
15690                 | __system___getus
15690     1A FC 71 FD | 	getct	result2 wc
15694     1A 00 62 FD | 	getct	_var01
15698     10 E8 05 F1 | 	add	ptr___system__dat__, #16
1569c     F4 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
156a0     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
156a4     20 00 90 5D |  if_ne	jmp	#LR__1880
156a8     14 02 06 FB | 	rdlong	_var02, #20
156ac     A1 07 00 FF 
156b0     40 02 16 FD | 	qdiv	_var02, ##1000000
156b4     10 E8 05 F1 | 	add	ptr___system__dat__, #16
156b8     18 FA 61 FD | 	getqx	result1
156bc     FD 02 02 F6 | 	mov	_var02, result1
156c0     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
156c4     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
156c8                 | LR__1880
156c8     01 FD 11 FD | 	qdiv	result2, _var02
156cc     19 FC 61 FD | 	getqy	result2
156d0     28 FC 61 FD | 	setq	result2
156d4     01 01 12 FD | 	qdiv	_var01, _var02
156d8     18 FA 61 FD | 	getqx	result1
156dc                 | __system___getus_ret
156dc     2D 00 64 FD | 	ret
156e0                 | 
156e0                 | __system____builtin_memmove
156e0     09 01 02 F6 | 	mov	_var01, arg01
156e4     0A 13 52 F2 | 	cmps	arg01, arg02 wc
156e8     10 00 90 CD |  if_b	jmp	#LR__1890
156ec     0A 03 02 F6 | 	mov	_var02, arg02
156f0     0B 03 02 F1 | 	add	_var02, arg03
156f4     01 13 52 F2 | 	cmps	arg01, _var02 wc
156f8     48 00 90 CD |  if_b	jmp	#LR__1896
156fc                 | LR__1890
156fc     0B 05 02 F6 | 	mov	_var03, arg03
15700     02 04 4E F0 | 	shr	_var03, #2 wz
15704     18 00 90 AD |  if_e	jmp	#LR__1895
15708     97 0A 48 FB | 	callpa	#(@LR__1893-@LR__1891)>>2,fcache_load_ptr_
1570c                 | LR__1891
1570c     02 09 D8 FC | 	rep	@LR__1894, _var03
15710                 | LR__1892
15710     0A 05 02 FB | 	rdlong	_var03, arg02
15714     09 05 62 FC | 	wrlong	_var03, arg01
15718     04 12 06 F1 | 	add	arg01, #4
1571c     04 14 06 F1 | 	add	arg02, #4
15720                 | LR__1893
15720                 | LR__1894
15720                 | LR__1895
15720     02 16 CE F7 | 	test	arg03, #2 wz
15724     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
15728     09 03 52 5C |  if_ne	wrword	_var02, arg01
1572c     02 12 06 51 |  if_ne	add	arg01, #2
15730     02 14 06 51 |  if_ne	add	arg02, #2
15734     01 16 CE F7 | 	test	arg03, #1 wz
15738     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1573c     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
15740     28 00 90 FD | 	jmp	#LR__1902
15744                 | LR__1896
15744     0B 13 02 F1 | 	add	arg01, arg03
15748     0B 15 02 F1 | 	add	arg02, arg03
1574c     0B 07 0A F6 | 	mov	_var04, arg03 wz
15750     18 00 90 AD |  if_e	jmp	#LR__1901
15754     97 0A 48 FB | 	callpa	#(@LR__1899-@LR__1897)>>2,fcache_load_ptr_
15758                 | LR__1897
15758     03 09 D8 FC | 	rep	@LR__1900, _var04
1575c                 | LR__1898
1575c     01 12 86 F1 | 	sub	arg01, #1
15760     01 14 86 F1 | 	sub	arg02, #1
15764     0A 03 C2 FA | 	rdbyte	_var02, arg02
15768     09 03 42 FC | 	wrbyte	_var02, arg01
1576c                 | LR__1899
1576c                 | LR__1900
1576c                 | LR__1901
1576c                 | LR__1902
1576c     00 FB 01 F6 | 	mov	result1, _var01
15770                 | __system____builtin_memmove_ret
15770     2D 00 64 FD | 	ret
15774                 | 
15774                 | __system____builtin_strcpy
15774     09 01 02 F6 | 	mov	_var01, arg01
15778     97 0A 48 FB | 	callpa	#(@LR__1911-@LR__1910)>>2,fcache_load_ptr_
1577c                 | LR__1910
1577c     0A FB C9 FA | 	rdbyte	result1, arg02 wz
15780     09 FB 41 FC | 	wrbyte	result1, arg01
15784     01 14 06 F1 | 	add	arg02, #1
15788     01 12 06 F1 | 	add	arg01, #1
1578c     EC FF 9F 5D |  if_ne	jmp	#LR__1910
15790                 | LR__1911
15790     00 FB 01 F6 | 	mov	result1, _var01
15794                 | __system____builtin_strcpy_ret
15794     2D 00 64 FD | 	ret
15798                 | 
15798                 | __system____topofstack
15798     00 4A 05 F6 | 	mov	COUNT_, #0
1579c     A8 00 A0 FD | 	call	#pushregs_
157a0     08 F0 07 F1 | 	add	ptra, #8
157a4     04 4E 05 F1 | 	add	fp, #4
157a8     A7 12 62 FC | 	wrlong	arg01, fp
157ac     A7 FA 01 F6 | 	mov	result1, fp
157b0     04 4E 85 F1 | 	sub	fp, #4
157b4     A7 F0 03 F6 | 	mov	ptra, fp
157b8     B2 00 A0 FD | 	call	#popregs_
157bc                 | __system____topofstack_ret
157bc     2D 00 64 FD | 	ret
157c0                 | 
157c0                 | __system___lockmem
157c0     00 FA 05 F6 | 	mov	result1, #0
157c4     01 FA 61 FD | 	cogid	result1
157c8     00 FB 05 F1 | 	add	result1, #256
157cc                 | LR__1920
157cc     09 01 0A FB | 	rdlong	_var01, arg01 wz
157d0     09 FB 61 AC |  if_e	wrlong	result1, arg01
157d4     09 01 02 AB |  if_e	rdlong	_var01, arg01
157d8     09 01 02 AB |  if_e	rdlong	_var01, arg01
157dc     FD 00 0A F2 | 	cmp	_var01, result1 wz
157e0     E8 FF 9F 5D |  if_ne	jmp	#LR__1920
157e4                 | __system___lockmem_ret
157e4     2D 00 64 FD | 	ret
157e8                 | 
157e8                 | __system___string_cmp
157e8     97 14 48 FB | 	callpa	#(@LR__1931-@LR__1930)>>2,fcache_load_ptr_
157ec                 | LR__1930
157ec     09 01 C2 FA | 	rdbyte	_var01, arg01
157f0     0A 03 C2 FA | 	rdbyte	_var02, arg02
157f4     00 05 02 F6 | 	mov	_var03, _var01
157f8     01 05 8A F1 | 	sub	_var03, _var02 wz
157fc     01 12 06 F1 | 	add	arg01, #1
15800     01 14 06 F1 | 	add	arg02, #1
15804     0C 00 90 5D |  if_ne	jmp	#LR__1932
15808     00 00 0E F2 | 	cmp	_var01, #0 wz
1580c     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
15810     D8 FF 9F 5D |  if_ne	jmp	#LR__1930
15814                 | LR__1931
15814                 | LR__1932
15814     02 FB 01 F6 | 	mov	result1, _var03
15818                 | __system___string_cmp_ret
15818     2D 00 64 FD | 	ret
1581c                 | 
1581c                 | __system___string_concat
1581c     05 4A 05 F6 | 	mov	COUNT_, #5
15820     A8 00 A0 FD | 	call	#pushregs_
15824     09 1F 02 F6 | 	mov	local01, arg01
15828     0A 21 02 F6 | 	mov	local02, arg02
1582c     0F 13 02 F6 | 	mov	arg01, local01
15830     09 23 02 F6 | 	mov	local03, arg01
15834     97 06 48 FB | 	callpa	#(@LR__1941-@LR__1940)>>2,fcache_load_ptr_
15838                 | LR__1940
15838     11 FB C9 FA | 	rdbyte	result1, local03 wz
1583c     01 22 06 51 |  if_ne	add	local03, #1
15840     F4 FF 9F 5D |  if_ne	jmp	#LR__1940
15844                 | LR__1941
15844     09 23 82 F1 | 	sub	local03, arg01
15848     11 25 02 F6 | 	mov	local04, local03
1584c     10 13 02 F6 | 	mov	arg01, local02
15850     09 23 02 F6 | 	mov	local03, arg01
15854     97 06 48 FB | 	callpa	#(@LR__1943-@LR__1942)>>2,fcache_load_ptr_
15858                 | LR__1942
15858     11 FB C9 FA | 	rdbyte	result1, local03 wz
1585c     01 22 06 51 |  if_ne	add	local03, #1
15860     F4 FF 9F 5D |  if_ne	jmp	#LR__1942
15864                 | LR__1943
15864     09 23 82 F1 | 	sub	local03, arg01
15868     12 13 02 F6 | 	mov	arg01, local04
1586c     11 13 02 F1 | 	add	arg01, local03
15870     01 12 06 F1 | 	add	arg01, #1
15874     B0 39 B0 FD | 	call	#__system___gc_alloc_managed
15878     FD 26 0A F6 | 	mov	local05, result1 wz
1587c     28 00 90 AD |  if_e	jmp	#LR__1944
15880     13 13 02 F6 | 	mov	arg01, local05
15884     0F 15 02 F6 | 	mov	arg02, local01
15888     12 17 02 F6 | 	mov	arg03, local04
1588c     50 FE BF FD | 	call	#__system____builtin_memmove
15890     13 13 02 F6 | 	mov	arg01, local05
15894     12 13 02 F1 | 	add	arg01, local04
15898     01 22 06 F1 | 	add	local03, #1
1589c     10 15 02 F6 | 	mov	arg02, local02
158a0     11 17 02 F6 | 	mov	arg03, local03
158a4     38 FE BF FD | 	call	#__system____builtin_memmove
158a8                 | LR__1944
158a8     13 FB 01 F6 | 	mov	result1, local05
158ac     A7 F0 03 F6 | 	mov	ptra, fp
158b0     B2 00 A0 FD | 	call	#popregs_
158b4                 | __system___string_concat_ret
158b4     2D 00 64 FD | 	ret
158b8                 | 
158b8                 | __system___tx
158b8     02 4A 05 F6 | 	mov	COUNT_, #2
158bc     A8 00 A0 FD | 	call	#pushregs_
158c0     09 1F 02 F6 | 	mov	local01, arg01
158c4     0A 1E 0E F2 | 	cmp	local01, #10 wz
158c8     18 00 90 5D |  if_ne	jmp	#LR__1950
158cc     08 E8 05 F1 | 	add	ptr___system__dat__, #8
158d0     F4 20 02 FB | 	rdlong	local02, ptr___system__dat__
158d4     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
158d8     02 20 CE F7 | 	test	local02, #2 wz
158dc     0D 12 06 56 |  if_ne	mov	arg01, #13
158e0     70 FC BF 5D |  if_ne	call	#__system___txraw
158e4                 | LR__1950
158e4     0F 13 02 F6 | 	mov	arg01, local01
158e8     68 FC BF FD | 	call	#__system___txraw
158ec     A7 F0 03 F6 | 	mov	ptra, fp
158f0     B2 00 A0 FD | 	call	#popregs_
158f4                 | __system___tx_ret
158f4     2D 00 64 FD | 	ret
158f8                 | 
158f8                 | __system___rx
158f8     01 4A 05 F6 | 	mov	COUNT_, #1
158fc     A8 00 A0 FD | 	call	#pushregs_
15900                 | LR__1960
15900     00 12 06 F6 | 	mov	arg01, #0
15904     8C FC BF FD | 	call	#__system___rxraw
15908     FD 1E 02 F6 | 	mov	local01, result1
1590c     FF FF 7F FF 
15910     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
15914     E8 FF 9F AD |  if_e	jmp	#LR__1960
15918     0D 1E 0E F2 | 	cmp	local01, #13 wz
1591c     14 00 90 5D |  if_ne	jmp	#LR__1961
15920     08 E8 05 F1 | 	add	ptr___system__dat__, #8
15924     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
15928     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1592c     02 FA CD F7 | 	test	result1, #2 wz
15930     0A 1E 06 56 |  if_ne	mov	local01, #10
15934                 | LR__1961
15934     08 E8 05 F1 | 	add	ptr___system__dat__, #8
15938     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1593c     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
15940     01 12 CE F7 | 	test	arg01, #1 wz
15944     1C 00 90 AD |  if_e	jmp	#LR__1964
15948     7F 1E 0E F2 | 	cmp	local01, #127 wz
1594c     0C 00 90 5D |  if_ne	jmp	#LR__1962
15950     08 12 06 F6 | 	mov	arg01, #8
15954     60 FF BF FD | 	call	#__system___tx
15958     08 00 90 FD | 	jmp	#LR__1963
1595c                 | LR__1962
1595c     0F 13 02 F6 | 	mov	arg01, local01
15960     54 FF BF FD | 	call	#__system___tx
15964                 | LR__1963
15964                 | LR__1964
15964     0F FB 01 F6 | 	mov	result1, local01
15968     A7 F0 03 F6 | 	mov	ptra, fp
1596c     B2 00 A0 FD | 	call	#popregs_
15970                 | __system___rx_ret
15970     2D 00 64 FD | 	ret
15974                 | 
15974                 | __system___pinwrite
15974     09 01 02 F6 | 	mov	_var01, arg01
15978     1F 00 06 F5 | 	and	_var01, #31
1597c     20 12 CE F7 | 	test	arg01, #32 wz
15980     06 12 46 F0 | 	shr	arg01, #6
15984     09 13 CA F9 | 	bmask	arg01, arg01
15988     00 13 62 F0 | 	shl	arg01, _var01
1598c     00 15 62 F0 | 	shl	arg02, _var01
15990     1C 00 90 AD |  if_e	jmp	#LR__1970
15994     09 F7 43 F5 | 	or	dirb, arg01
15998     FD 01 02 F6 | 	mov	_var01, outb
1599c     09 01 22 F5 | 	andn	_var01, arg01
159a0     09 15 02 F5 | 	and	arg02, arg01
159a4     0A 01 42 F5 | 	or	_var01, arg02
159a8     00 FB 03 F6 | 	mov	outb, _var01
159ac     18 00 90 FD | 	jmp	#LR__1971
159b0                 | LR__1970
159b0     09 F5 43 F5 | 	or	dira, arg01
159b4     FC 01 02 F6 | 	mov	_var01, outa
159b8     09 01 22 F5 | 	andn	_var01, arg01
159bc     09 15 02 F5 | 	and	arg02, arg01
159c0     0A 01 42 F5 | 	or	_var01, arg02
159c4     00 F9 03 F6 | 	mov	outa, _var01
159c8                 | LR__1971
159c8                 | __system___pinwrite_ret
159c8     2D 00 64 FD | 	ret
159cc                 | 
159cc                 | __system___basic_read_line
159cc     06 4A 05 F6 | 	mov	COUNT_, #6
159d0     A8 00 A0 FD | 	call	#pushregs_
159d4     09 1F 02 F6 | 	mov	local01, arg01
159d8     00 20 06 F6 | 	mov	local02, #0
159dc     18 22 06 F6 | 	mov	local03, #24
159e0     00 24 06 F6 | 	mov	local04, #0
159e4     18 12 06 F6 | 	mov	arg01, #24
159e8     3C 38 B0 FD | 	call	#__system___gc_alloc_managed
159ec     FD 26 0A F6 | 	mov	local05, result1 wz
159f0     13 FB 01 A6 |  if_e	mov	result1, local05
159f4     B0 00 90 AD |  if_e	jmp	#LR__1983
159f8                 | LR__1980
159f8     0F 13 02 F6 | 	mov	arg01, local01
159fc     78 0B B0 FD | 	call	#__system___basic_get_char
15a00     FD 28 02 F6 | 	mov	local06, result1
15a04     01 28 56 F2 | 	cmps	local06, #1 wc
15a08     8C 00 90 CD |  if_b	jmp	#LR__1982
15a0c     0A 28 0E F2 | 	cmp	local06, #10 wz
15a10     10 00 90 5D |  if_ne	jmp	#LR__1981
15a14     00 24 0E F2 | 	cmp	local04, #0 wz
15a18     01 20 56 52 |  if_ne	cmps	local02, #1 wc
15a1c     01 20 86 11 |  if_a	sub	local02, #1
15a20     74 00 90 FD | 	jmp	#LR__1982
15a24                 | LR__1981
15a24     0D 28 0E F2 | 	cmp	local06, #13 wz
15a28     01 24 06 A6 |  if_e	mov	local04, #1
15a2c     00 24 06 56 |  if_ne	mov	local04, #0
15a30     08 28 0E F2 | 	cmp	local06, #8 wz
15a34     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
15a38     01 20 56 A2 |  if_e	cmps	local02, #1 wc
15a3c     01 20 86 21 |  if_nc_and_z	sub	local02, #1
15a40     B4 FF 9F AD |  if_e	jmp	#LR__1980
15a44     13 17 02 F6 | 	mov	arg03, local05
15a48     10 17 02 F1 | 	add	arg03, local02
15a4c     0B 29 42 FC | 	wrbyte	local06, arg03
15a50     01 20 06 F1 | 	add	local02, #1
15a54     11 21 0A F2 | 	cmp	local02, local03 wz
15a58     9C FF 9F 5D |  if_ne	jmp	#LR__1980
15a5c     11 13 02 F6 | 	mov	arg01, local03
15a60     20 12 06 F1 | 	add	arg01, #32
15a64     C0 37 B0 FD | 	call	#__system___gc_alloc_managed
15a68     FD 28 0A F6 | 	mov	local06, result1 wz
15a6c     14 FB 01 A6 |  if_e	mov	result1, local06
15a70     34 00 90 AD |  if_e	jmp	#LR__1983
15a74     14 13 02 F6 | 	mov	arg01, local06
15a78     13 15 02 F6 | 	mov	arg02, local05
15a7c     11 17 02 F6 | 	mov	arg03, local03
15a80     5C FC BF FD | 	call	#__system____builtin_memmove
15a84     20 22 06 F1 | 	add	local03, #32
15a88     13 13 02 F6 | 	mov	arg01, local05
15a8c     D4 38 B0 FD | 	call	#__system___gc_free
15a90     14 27 02 F6 | 	mov	local05, local06
15a94     60 FF 9F FD | 	jmp	#LR__1980
15a98                 | LR__1982
15a98     13 29 02 F6 | 	mov	local06, local05
15a9c     10 29 02 F1 | 	add	local06, local02
15aa0     14 01 48 FC | 	wrbyte	#0, local06
15aa4     13 FB 01 F6 | 	mov	result1, local05
15aa8                 | LR__1983
15aa8     A7 F0 03 F6 | 	mov	ptra, fp
15aac     B2 00 A0 FD | 	call	#popregs_
15ab0                 | __system___basic_read_line_ret
15ab0     2D 00 64 FD | 	ret
15ab4                 | 
15ab4                 | __system___waitms
15ab4     09 01 02 F6 | 	mov	_var01, arg01
15ab8     1A 02 62 FD | 	getct	_var02
15abc     14 04 06 FB | 	rdlong	_var03, #20
15ac0     97 14 48 FB | 	callpa	#(@LR__1991-@LR__1990)>>2,fcache_load_ptr_
15ac4                 | LR__1990
15ac4     01 00 00 FF 
15ac8     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
15acc     1C 00 90 CD |  if_b	jmp	#LR__1992
15ad0     02 03 02 F1 | 	add	_var02, _var03
15ad4     01 13 02 F6 | 	mov	arg01, _var02
15ad8     00 12 66 FA | 	addct1	arg01, #0
15adc     24 22 60 FD | 	waitct1
15ae0     01 00 00 FF 
15ae4     E8 01 86 F1 | 	sub	_var01, ##1000
15ae8     D8 FF 9F FD | 	jmp	#LR__1990
15aec                 | LR__1991
15aec                 | LR__1992
15aec     01 00 56 F2 | 	cmps	_var01, #1 wc
15af0     28 00 90 CD |  if_b	jmp	#LR__1993
15af4     02 01 02 FD | 	qmul	_var01, _var03
15af8     01 00 00 FF 
15afc     E8 17 06 F6 | 	mov	arg03, ##1000
15b00     19 FA 61 FD | 	getqy	result1
15b04     18 12 62 FD | 	getqx	arg01
15b08     28 FA 61 FD | 	setq	result1
15b0c     0B 13 12 FD | 	qdiv	arg01, arg03
15b10     18 12 62 FD | 	getqx	arg01
15b14     01 13 62 FA | 	addct1	arg01, _var02
15b18     24 22 60 FD | 	waitct1
15b1c                 | LR__1993
15b1c                 | __system___waitms_ret
15b1c     2D 00 64 FD | 	ret
15b20                 | 
15b20                 | __system___waitus
15b20     09 01 02 F6 | 	mov	_var01, arg01
15b24     1A 02 62 FD | 	getct	_var02
15b28     14 04 06 FB | 	rdlong	_var03, #20
15b2c     97 14 48 FB | 	callpa	#(@LR__2001-@LR__2000)>>2,fcache_load_ptr_
15b30                 | LR__2000
15b30     A1 07 00 FF 
15b34     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
15b38     1C 00 90 CD |  if_b	jmp	#LR__2002
15b3c     02 03 02 F1 | 	add	_var02, _var03
15b40     01 13 02 F6 | 	mov	arg01, _var02
15b44     00 12 66 FA | 	addct1	arg01, #0
15b48     24 22 60 FD | 	waitct1
15b4c     A1 07 00 FF 
15b50     40 00 86 F1 | 	sub	_var01, ##1000000
15b54     D8 FF 9F FD | 	jmp	#LR__2000
15b58                 | LR__2001
15b58                 | LR__2002
15b58     01 00 56 F2 | 	cmps	_var01, #1 wc
15b5c     28 00 90 CD |  if_b	jmp	#LR__2003
15b60     02 01 02 FD | 	qmul	_var01, _var03
15b64     A1 07 00 FF 
15b68     40 16 06 F6 | 	mov	arg03, ##1000000
15b6c     19 FA 61 FD | 	getqy	result1
15b70     18 12 62 FD | 	getqx	arg01
15b74     28 FA 61 FD | 	setq	result1
15b78     0B 13 12 FD | 	qdiv	arg01, arg03
15b7c     18 FA 61 FD | 	getqx	result1
15b80     FD 02 62 FA | 	addct1	_var02, result1
15b84     24 22 60 FD | 	waitct1
15b88                 | LR__2003
15b88                 | __system___waitus_ret
15b88     2D 00 64 FD | 	ret
15b8c                 | 
15b8c                 | __system___mount
15b8c     0B 4A 05 F6 | 	mov	COUNT_, #11
15b90     A8 00 A0 FD | 	call	#pushregs_
15b94     09 1F 02 F6 | 	mov	local01, arg01
15b98     0A 21 0A F6 | 	mov	local02, arg02 wz
15b9c     01 22 66 F6 | 	neg	local03, #1
15ba0     01 FA 65 A6 |  if_e	neg	result1, #1
15ba4     98 02 90 AD |  if_e	jmp	#LR__2025
15ba8     0F FB C1 FA | 	rdbyte	result1, local01
15bac     2F FA 0D F2 | 	cmp	result1, #47 wz
15bb0     28 00 90 5D |  if_ne	jmp	#LR__2012
15bb4     0F 13 02 F6 | 	mov	arg01, local01
15bb8     09 25 02 F6 | 	mov	local04, arg01
15bbc     97 06 48 FB | 	callpa	#(@LR__2011-@LR__2010)>>2,fcache_load_ptr_
15bc0                 | LR__2010
15bc0     12 FB C9 FA | 	rdbyte	result1, local04 wz
15bc4     01 24 06 51 |  if_ne	add	local04, #1
15bc8     F4 FF 9F 5D |  if_ne	jmp	#LR__2010
15bcc                 | LR__2011
15bcc     09 25 82 F1 | 	sub	local04, arg01
15bd0     12 FB 01 F6 | 	mov	result1, local04
15bd4     10 FA 55 F2 | 	cmps	result1, #16 wc
15bd8     14 00 90 CD |  if_b	jmp	#LR__2013
15bdc                 | LR__2012
15bdc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
15be0     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
15be4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
15be8     01 FA 65 F6 | 	neg	result1, #1
15bec     50 02 90 FD | 	jmp	#LR__2025
15bf0                 | LR__2013
15bf0     00 26 06 F6 | 	mov	local05, #0
15bf4                 | LR__2014
15bf4     04 26 56 F2 | 	cmps	local05, #4 wc
15bf8     B0 00 90 3D |  if_ae	jmp	#LR__2019
15bfc     13 13 02 F6 | 	mov	arg01, local05
15c00     02 12 66 F0 | 	shl	arg01, #2
15c04     64 E8 05 F1 | 	add	ptr___system__dat__, #100
15c08     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
15c0c     09 FB 09 FB | 	rdlong	result1, arg01 wz
15c10     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15c14     00 22 56 A2 |  if_e	cmps	local03, #0 wc
15c18     13 23 02 86 |  if_c_and_z	mov	local03, local05
15c1c     84 00 90 8D |  if_c_and_z	jmp	#LR__2018
15c20     13 13 02 F6 | 	mov	arg01, local05
15c24     02 12 66 F0 | 	shl	arg01, #2
15c28     64 E8 05 F1 | 	add	ptr___system__dat__, #100
15c2c     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
15c30     09 13 02 FB | 	rdlong	arg01, arg01
15c34     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15c38     09 25 02 F6 | 	mov	local04, arg01
15c3c     97 06 48 FB | 	callpa	#(@LR__2016-@LR__2015)>>2,fcache_load_ptr_
15c40                 | LR__2015
15c40     12 FB C9 FA | 	rdbyte	result1, local04 wz
15c44     01 24 06 51 |  if_ne	add	local04, #1
15c48     F4 FF 9F 5D |  if_ne	jmp	#LR__2015
15c4c                 | LR__2016
15c4c     09 25 82 F1 | 	sub	local04, arg01
15c50     12 29 02 F6 | 	mov	local06, local04
15c54     14 13 02 F6 | 	mov	arg01, local06
15c58     0F 13 02 F1 | 	add	arg01, local01
15c5c     09 FB C1 FA | 	rdbyte	result1, arg01
15c60     2F FA 0D F2 | 	cmp	result1, #47 wz
15c64     14 2B 02 56 |  if_ne	mov	local07, local06
15c68     0F 2B 02 51 |  if_ne	add	local07, local01
15c6c     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
15c70     30 00 90 5D |  if_ne	jmp	#LR__2017
15c74     13 17 02 F6 | 	mov	arg03, local05
15c78     02 16 66 F0 | 	shl	arg03, #2
15c7c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
15c80     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
15c84     0B 15 02 FB | 	rdlong	arg02, arg03
15c88     0F 13 02 F6 | 	mov	arg01, local01
15c8c     14 17 02 F6 | 	mov	arg03, local06
15c90     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15c94     D0 49 B0 FD | 	call	#__system__strncmp
15c98     00 FA 0D F2 | 	cmp	result1, #0 wz
15c9c     13 23 02 A6 |  if_e	mov	local03, local05
15ca0     08 00 90 AD |  if_e	jmp	#LR__2019
15ca4                 | LR__2017
15ca4                 | LR__2018
15ca4     01 26 06 F1 | 	add	local05, #1
15ca8     48 FF 9F FD | 	jmp	#LR__2014
15cac                 | LR__2019
15cac     FF FF 7F FF 
15cb0     FF 23 0E F2 | 	cmp	local03, ##-1 wz
15cb4     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
15cb8     F4 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
15cbc     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
15cc0     01 FA 65 A6 |  if_e	neg	result1, #1
15cc4     78 01 90 AD |  if_e	jmp	#LR__2025
15cc8     11 27 02 F6 | 	mov	local05, local03
15ccc     13 2B 02 F6 | 	mov	local07, local05
15cd0     02 2A 66 F0 | 	shl	local07, #2
15cd4     74 E8 05 F1 | 	add	ptr___system__dat__, #116
15cd8     F4 2A 02 F1 | 	add	local07, ptr___system__dat__
15cdc     15 29 0A FB | 	rdlong	local06, local07 wz
15ce0     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
15ce4     58 00 90 AD |  if_e	jmp	#LR__2020
15ce8     4C 28 06 F1 | 	add	local06, #76
15cec     14 2B 0A FB | 	rdlong	local07, local06 wz
15cf0     4C 28 86 F1 | 	sub	local06, #76
15cf4     48 00 90 AD |  if_e	jmp	#LR__2020
15cf8     4C 28 06 F1 | 	add	local06, #76
15cfc     14 2B 02 FB | 	rdlong	local07, local06
15d00     15 23 02 F6 | 	mov	local03, local07
15d04     13 2A 46 F7 | 	zerox	local07, #19
15d08     14 22 46 F0 | 	shr	local03, #20
15d0c     02 22 66 F0 | 	shl	local03, #2
15d10     ED 22 02 F1 | 	add	local03, __methods__
15d14     11 23 02 FB | 	rdlong	local03, local03
15d18     13 29 02 F6 | 	mov	local06, local05
15d1c     02 28 66 F0 | 	shl	local06, #2
15d20     64 E8 05 F1 | 	add	ptr___system__dat__, #100
15d24     F4 28 02 F1 | 	add	local06, ptr___system__dat__
15d28     14 13 02 FB | 	rdlong	arg01, local06
15d2c     F2 28 02 F6 | 	mov	local06, objptr
15d30     15 E5 01 F6 | 	mov	objptr, local07
15d34     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15d38     2D 22 62 FD | 	call	local03
15d3c     14 E5 01 F6 | 	mov	objptr, local06
15d40                 | LR__2020
15d40     13 2D 02 F6 | 	mov	local08, local05
15d44     02 2C 66 F0 | 	shl	local08, #2
15d48     74 E8 05 F1 | 	add	ptr___system__dat__, #116
15d4c     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
15d50     16 21 62 FC | 	wrlong	local02, local08
15d54     00 20 0E F2 | 	cmp	local02, #0 wz
15d58     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
15d5c     18 00 90 5D |  if_ne	jmp	#LR__2021
15d60     02 26 66 F0 | 	shl	local05, #2
15d64     64 E8 05 F1 | 	add	ptr___system__dat__, #100
15d68     F4 26 02 F1 | 	add	local05, ptr___system__dat__
15d6c     13 01 68 FC | 	wrlong	#0, local05
15d70     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15d74     C4 00 90 FD | 	jmp	#LR__2024
15d78                 | LR__2021
15d78     13 2F 02 F6 | 	mov	local09, local05
15d7c     04 2E 66 F0 | 	shl	local09, #4
15d80     24 E8 05 F1 | 	add	ptr___system__dat__, #36
15d84     F4 2E 02 F1 | 	add	local09, ptr___system__dat__
15d88     17 13 02 F6 | 	mov	arg01, local09
15d8c     0F 15 02 F6 | 	mov	arg02, local01
15d90     10 16 06 F6 | 	mov	arg03, #16
15d94     24 E8 85 F1 | 	sub	ptr___system__dat__, #36
15d98     20 48 B0 FD | 	call	#__system__strncpy
15d9c     48 20 06 F1 | 	add	local02, #72
15da0     10 2D 0A FB | 	rdlong	local08, local02 wz
15da4     48 20 86 F1 | 	sub	local02, #72
15da8     7C 00 90 AD |  if_e	jmp	#LR__2023
15dac     48 20 06 F1 | 	add	local02, #72
15db0     10 2D 02 FB | 	rdlong	local08, local02
15db4     16 31 02 F6 | 	mov	local10, local08
15db8     13 2C 46 F7 | 	zerox	local08, #19
15dbc     14 30 46 F0 | 	shr	local10, #20
15dc0     02 30 66 F0 | 	shl	local10, #2
15dc4     ED 30 02 F1 | 	add	local10, __methods__
15dc8     18 31 02 FB | 	rdlong	local10, local10
15dcc     17 13 02 F6 | 	mov	arg01, local09
15dd0     F2 32 02 F6 | 	mov	local11, objptr
15dd4     16 E5 01 F6 | 	mov	objptr, local08
15dd8     2D 30 62 FD | 	call	local10
15ddc     19 E5 01 F6 | 	mov	objptr, local11
15de0     FD 12 0A F6 | 	mov	arg01, result1 wz
15de4     40 00 90 AD |  if_e	jmp	#LR__2022
15de8     13 2D 02 F6 | 	mov	local08, local05
15dec     02 2C 66 F0 | 	shl	local08, #2
15df0     74 E8 05 F1 | 	add	ptr___system__dat__, #116
15df4     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
15df8     16 01 68 FC | 	wrlong	#0, local08
15dfc     02 26 66 F0 | 	shl	local05, #2
15e00     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
15e04     F4 26 02 F1 | 	add	local05, ptr___system__dat__
15e08     13 01 68 FC | 	wrlong	#0, local05
15e0c     09 13 6A F6 | 	neg	arg01, arg01 wz
15e10     44 E8 85 F1 | 	sub	ptr___system__dat__, #68
15e14     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
15e18     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
15e1c     01 FA 65 56 |  if_ne	neg	result1, #1
15e20     00 FA 05 A6 |  if_e	mov	result1, #0
15e24     18 00 90 FD | 	jmp	#LR__2025
15e28                 | LR__2022
15e28                 | LR__2023
15e28     02 26 66 F0 | 	shl	local05, #2
15e2c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
15e30     F4 26 02 F1 | 	add	local05, ptr___system__dat__
15e34     13 2F 62 FC | 	wrlong	local09, local05
15e38     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15e3c                 | LR__2024
15e3c     00 FA 05 F6 | 	mov	result1, #0
15e40                 | LR__2025
15e40     A7 F0 03 F6 | 	mov	ptra, fp
15e44     B2 00 A0 FD | 	call	#popregs_
15e48                 | __system___mount_ret
15e48     2D 00 64 FD | 	ret
15e4c                 | 
15e4c                 | __system___chdir
15e4c     00 4A 05 F6 | 	mov	COUNT_, #0
15e50     A8 00 A0 FD | 	call	#pushregs_
15e54     40 F0 07 F1 | 	add	ptra, #64
15e58     04 4E 05 F1 | 	add	fp, #4
15e5c     A7 12 62 FC | 	wrlong	arg01, fp
15e60     04 4E 05 F1 | 	add	fp, #4
15e64     A7 14 02 F6 | 	mov	arg02, fp
15e68     08 4E 85 F1 | 	sub	fp, #8
15e6c     2C 44 B0 FD | 	call	#__system__stat
15e70     3C 4E 05 F1 | 	add	fp, #60
15e74     A7 FA 61 FC | 	wrlong	result1, fp
15e78     3C 4E 85 F1 | 	sub	fp, #60
15e7c     00 FA 0D F2 | 	cmp	result1, #0 wz
15e80     3C 4E 05 51 |  if_ne	add	fp, #60
15e84     A7 FA 01 5B |  if_ne	rdlong	result1, fp
15e88     3C 4E 85 51 |  if_ne	sub	fp, #60
15e8c     BC 00 90 5D |  if_ne	jmp	#LR__2032
15e90     10 4E 05 F1 | 	add	fp, #16
15e94     A7 12 02 FB | 	rdlong	arg01, fp
15e98     10 4E 85 F1 | 	sub	fp, #16
15e9c     78 00 00 FF 
15ea0     00 12 06 F5 | 	and	arg01, ##61440
15ea4     08 00 00 FF 
15ea8     00 12 0E F2 | 	cmp	arg01, ##4096 wz
15eac     20 E8 05 51 |  if_ne	add	ptr___system__dat__, #32
15eb0     F4 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
15eb4     20 E8 85 51 |  if_ne	sub	ptr___system__dat__, #32
15eb8     01 FA 65 56 |  if_ne	neg	result1, #1
15ebc     8C 00 90 5D |  if_ne	jmp	#LR__2032
15ec0     04 4E 05 F1 | 	add	fp, #4
15ec4     A7 16 02 FB | 	rdlong	arg03, fp
15ec8     04 4E 85 F1 | 	sub	fp, #4
15ecc     0B 17 C2 FA | 	rdbyte	arg03, arg03
15ed0     2F 16 0E F2 | 	cmp	arg03, #47 wz
15ed4     24 00 90 5D |  if_ne	jmp	#LR__2030
15ed8     84 E8 05 F1 | 	add	ptr___system__dat__, #132
15edc     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
15ee0     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
15ee4     04 4E 05 F1 | 	add	fp, #4
15ee8     A7 14 02 FB | 	rdlong	arg02, fp
15eec     04 4E 85 F1 | 	sub	fp, #4
15ef0     00 17 06 F6 | 	mov	arg03, #256
15ef4     C4 46 B0 FD | 	call	#__system__strncpy
15ef8     4C 00 90 FD | 	jmp	#LR__2031
15efc                 | LR__2030
15efc     84 E9 05 F1 | 	add	ptr___system__dat__, #388
15f00     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
15f04     38 4E 05 F1 | 	add	fp, #56
15f08     A7 12 62 FC | 	wrlong	arg01, fp
15f0c     38 4E 85 F1 | 	sub	fp, #56
15f10     00 E9 85 F1 | 	sub	ptr___system__dat__, #256
15f14     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
15f18     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
15f1c     00 17 06 F6 | 	mov	arg03, #256
15f20     98 46 B0 FD | 	call	#__system__strncpy
15f24     38 4E 05 F1 | 	add	fp, #56
15f28     A7 12 02 FB | 	rdlong	arg01, fp
15f2c     34 4E 85 F1 | 	sub	fp, #52
15f30     A7 14 02 FB | 	rdlong	arg02, fp
15f34     04 4E 85 F1 | 	sub	fp, #4
15f38     84 E8 05 F1 | 	add	ptr___system__dat__, #132
15f3c     F4 16 02 F6 | 	mov	arg03, ptr___system__dat__
15f40     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
15f44     10 00 B0 FD | 	call	#__system____getvfsforfile
15f48                 | LR__2031
15f48     00 FA 05 F6 | 	mov	result1, #0
15f4c                 | LR__2032
15f4c     A7 F0 03 F6 | 	mov	ptra, fp
15f50     B2 00 A0 FD | 	call	#popregs_
15f54                 | __system___chdir_ret
15f54     2D 00 64 FD | 	ret
15f58                 | 
15f58                 | __system____getvfsforfile
15f58     0E 4A 05 F6 | 	mov	COUNT_, #14
15f5c     A8 00 A0 FD | 	call	#pushregs_
15f60     09 1F 02 F6 | 	mov	local01, arg01
15f64     0A 21 02 F6 | 	mov	local02, arg02
15f68     0B 23 02 F6 | 	mov	local03, arg03
15f6c     97 10 48 FB | 	callpa	#(@LR__2041-@LR__2040)>>2,fcache_load_ptr_
15f70                 | LR__2040
15f70     10 FB C1 FA | 	rdbyte	result1, local02
15f74     2F FA 0D F2 | 	cmp	result1, #47 wz
15f78     01 20 06 A1 |  if_e	add	local02, #1
15f7c     10 25 C2 AA |  if_e	rdbyte	local04, local02
15f80     01 20 86 A1 |  if_e	sub	local02, #1
15f84     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
15f88     01 20 06 A1 |  if_e	add	local02, #1
15f8c     E0 FF 9F AD |  if_e	jmp	#LR__2040
15f90                 | LR__2041
15f90     10 25 C2 FA | 	rdbyte	local04, local02
15f94     2F 24 0E F2 | 	cmp	local04, #47 wz
15f98     14 00 90 5D |  if_ne	jmp	#LR__2042
15f9c     0F 13 02 F6 | 	mov	arg01, local01
15fa0     10 15 02 F6 | 	mov	arg02, local02
15fa4     00 17 06 F6 | 	mov	arg03, #256
15fa8     10 46 B0 FD | 	call	#__system__strncpy
15fac     7C 00 90 FD | 	jmp	#LR__2044
15fb0                 | LR__2042
15fb0     84 E8 05 F1 | 	add	ptr___system__dat__, #132
15fb4     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
15fb8     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
15fbc     0F 13 02 F6 | 	mov	arg01, local01
15fc0     00 17 06 F6 | 	mov	arg03, #256
15fc4     F4 45 B0 FD | 	call	#__system__strncpy
15fc8     10 25 CA FA | 	rdbyte	local04, local02 wz
15fcc     5C 00 90 AD |  if_e	jmp	#LR__2043
15fd0     10 25 C2 FA | 	rdbyte	local04, local02
15fd4     2E 24 0E F2 | 	cmp	local04, #46 wz
15fd8     01 20 06 A1 |  if_e	add	local02, #1
15fdc     10 27 C2 AA |  if_e	rdbyte	local05, local02
15fe0     01 20 86 A1 |  if_e	sub	local02, #1
15fe4     13 29 02 A6 |  if_e	mov	local06, local05
15fe8     07 28 4E A7 |  if_e	zerox	local06, #7 wz
15fec     3C 00 90 AD |  if_e	jmp	#LR__2043
15ff0     0F 27 C2 FA | 	rdbyte	local05, local01
15ff4     2F 26 0E F2 | 	cmp	local05, #47 wz
15ff8     01 1E 06 A1 |  if_e	add	local01, #1
15ffc     0F 25 C2 AA |  if_e	rdbyte	local04, local01
16000     01 1E 86 A1 |  if_e	sub	local01, #1
16004     00 24 4E A2 |  if_e	cmps	local04, #0 wz
16008     24 01 00 5F 
1600c     88 15 06 56 |  if_ne	mov	arg02, ##@LR__4070
16010     0F 13 02 56 |  if_ne	mov	arg01, local01
16014     00 17 06 56 |  if_ne	mov	arg03, #256
16018     EC 45 B0 5D |  if_ne	call	#__system__strncat
1601c     0F 13 02 F6 | 	mov	arg01, local01
16020     10 15 02 F6 | 	mov	arg02, local02
16024     00 17 06 F6 | 	mov	arg03, #256
16028     DC 45 B0 FD | 	call	#__system__strncat
1602c                 | LR__2043
1602c                 | LR__2044
1602c     0F 13 02 F6 | 	mov	arg01, local01
16030     94 47 B0 FD | 	call	#__system___normalizeName
16034     0F 25 CA FA | 	rdbyte	local04, local01 wz
16038     1C 00 90 AD |  if_e	jmp	#LR__2045
1603c     0F 25 C2 FA | 	rdbyte	local04, local01
16040     2F 24 0E F2 | 	cmp	local04, #47 wz
16044     01 1E 06 A1 |  if_e	add	local01, #1
16048     0F 29 C2 AA |  if_e	rdbyte	local06, local01
1604c     01 1E 86 A1 |  if_e	sub	local01, #1
16050     00 28 4E A2 |  if_e	cmps	local06, #0 wz
16054     18 00 90 5D |  if_ne	jmp	#LR__2046
16058                 | LR__2045
16058     01 00 00 FF 
1605c     84 E8 05 F1 | 	add	ptr___system__dat__, ##644
16060     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
16064     01 00 00 FF 
16068     84 E8 85 F1 | 	sub	ptr___system__dat__, ##644
1606c     EC 01 90 FD | 	jmp	#LR__2060
16070                 | LR__2046
16070     00 2A 06 F6 | 	mov	local07, #0
16074                 | LR__2047
16074     04 2A 56 F2 | 	cmps	local07, #4 wc
16078     CC 01 90 3D |  if_ae	jmp	#LR__2059
1607c     15 29 02 F6 | 	mov	local06, local07
16080     02 28 66 F0 | 	shl	local06, #2
16084     64 E8 05 F1 | 	add	ptr___system__dat__, #100
16088     F4 28 02 F1 | 	add	local06, ptr___system__dat__
1608c     14 29 0A FB | 	rdlong	local06, local06 wz
16090     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
16094     A8 01 90 AD |  if_e	jmp	#LR__2058
16098     15 25 02 F6 | 	mov	local04, local07
1609c     02 24 66 F0 | 	shl	local04, #2
160a0     64 E8 05 F1 | 	add	ptr___system__dat__, #100
160a4     F4 24 02 F1 | 	add	local04, ptr___system__dat__
160a8     12 13 02 FB | 	rdlong	arg01, local04
160ac     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
160b0     09 2D 02 F6 | 	mov	local08, arg01
160b4     97 06 48 FB | 	callpa	#(@LR__2049-@LR__2048)>>2,fcache_load_ptr_
160b8                 | LR__2048
160b8     16 FB C9 FA | 	rdbyte	result1, local08 wz
160bc     01 2C 06 51 |  if_ne	add	local08, #1
160c0     F4 FF 9F 5D |  if_ne	jmp	#LR__2048
160c4                 | LR__2049
160c4     09 2D 82 F1 | 	sub	local08, arg01
160c8     16 2F 02 F6 | 	mov	local09, local08
160cc     17 25 02 F6 | 	mov	local04, local09
160d0     0F 25 02 F1 | 	add	local04, local01
160d4     12 29 C2 FA | 	rdbyte	local06, local04
160d8     2F 28 0E F2 | 	cmp	local06, #47 wz
160dc     17 31 02 56 |  if_ne	mov	local10, local09
160e0     0F 31 02 51 |  if_ne	add	local10, local01
160e4     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
160e8     54 01 90 5D |  if_ne	jmp	#LR__2057
160ec     15 17 02 F6 | 	mov	arg03, local07
160f0     02 16 66 F0 | 	shl	arg03, #2
160f4     64 E8 05 F1 | 	add	ptr___system__dat__, #100
160f8     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
160fc     0B 15 02 FB | 	rdlong	arg02, arg03
16100     17 17 02 F6 | 	mov	arg03, local09
16104     0F 13 02 F6 | 	mov	arg01, local01
16108     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1610c     58 45 B0 FD | 	call	#__system__strncmp
16110     00 FA 4D F2 | 	cmps	result1, #0 wz
16114     28 01 90 5D |  if_ne	jmp	#LR__2057
16118     15 33 02 F6 | 	mov	local11, local07
1611c     02 32 66 F0 | 	shl	local11, #2
16120     74 E8 05 F1 | 	add	ptr___system__dat__, #116
16124     F4 32 02 F1 | 	add	local11, ptr___system__dat__
16128     19 35 02 FB | 	rdlong	local12, local11
1612c     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
16130     97 22 48 FB | 	callpa	#(@LR__2051-@LR__2050)>>2,fcache_load_ptr_
16134                 | LR__2050
16134     17 29 02 F6 | 	mov	local06, local09
16138     01 28 06 F1 | 	add	local06, #1
1613c     0F 29 02 F1 | 	add	local06, local01
16140     14 33 C2 FA | 	rdbyte	local11, local06
16144     2E 32 0E F2 | 	cmp	local11, #46 wz
16148     2C 00 90 5D |  if_ne	jmp	#LR__2052
1614c     17 33 02 F6 | 	mov	local11, local09
16150     02 32 06 F1 | 	add	local11, #2
16154     0F 33 02 F1 | 	add	local11, local01
16158     19 31 C2 FA | 	rdbyte	local10, local11
1615c     2F 30 0E F2 | 	cmp	local10, #47 wz
16160     17 37 02 56 |  if_ne	mov	local13, local09
16164     02 36 06 51 |  if_ne	add	local13, #2
16168     0F 37 02 51 |  if_ne	add	local13, local01
1616c     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
16170     01 2E 06 A1 |  if_e	add	local09, #1
16174     BC FF 9F AD |  if_e	jmp	#LR__2050
16178                 | LR__2051
16178                 | LR__2052
16178     00 22 0E F2 | 	cmp	local03, #0 wz
1617c     11 13 02 56 |  if_ne	mov	arg01, local03
16180     0F 15 02 56 |  if_ne	mov	arg02, local01
16184     00 17 06 56 |  if_ne	mov	arg03, #256
16188     30 44 B0 5D |  if_ne	call	#__system__strncpy
1618c     0F 15 02 F6 | 	mov	arg02, local01
16190     17 15 02 F1 | 	add	arg02, local09
16194     01 14 06 F1 | 	add	arg02, #1
16198     0F 13 02 F6 | 	mov	arg01, local01
1619c     D4 F5 BF FD | 	call	#__system____builtin_strcpy
161a0     0F 13 02 F6 | 	mov	arg01, local01
161a4     09 2D 02 F6 | 	mov	local08, arg01
161a8     97 06 48 FB | 	callpa	#(@LR__2054-@LR__2053)>>2,fcache_load_ptr_
161ac                 | LR__2053
161ac     16 FB C9 FA | 	rdbyte	result1, local08 wz
161b0     01 2C 06 51 |  if_ne	add	local08, #1
161b4     F4 FF 9F 5D |  if_ne	jmp	#LR__2053
161b8                 | LR__2054
161b8     09 2D 82 F1 | 	sub	local08, arg01
161bc     16 2F 02 F6 | 	mov	local09, local08
161c0                 | LR__2055
161c0     01 2E 56 F2 | 	cmps	local09, #1 wc
161c4     70 00 90 CD |  if_b	jmp	#LR__2056
161c8     17 25 02 F6 | 	mov	local04, local09
161cc     0F 25 02 F1 | 	add	local04, local01
161d0     12 33 C2 FA | 	rdbyte	local11, local04
161d4     2F 32 0E F2 | 	cmp	local11, #47 wz
161d8     17 33 02 A6 |  if_e	mov	local11, local09
161dc     0F 33 02 A1 |  if_e	add	local11, local01
161e0     19 01 48 AC |  if_e	wrbyte	#0, local11
161e4     01 2E 86 A1 |  if_e	sub	local09, #1
161e8     D4 FF 9F AD |  if_e	jmp	#LR__2055
161ec     17 25 02 F6 | 	mov	local04, local09
161f0     0F 25 02 F1 | 	add	local04, local01
161f4     12 33 C2 FA | 	rdbyte	local11, local04
161f8     2E 32 0E F2 | 	cmp	local11, #46 wz
161fc     38 00 90 5D |  if_ne	jmp	#LR__2056
16200     02 2E 56 F2 | 	cmps	local09, #2 wc
16204     30 00 90 CD |  if_b	jmp	#LR__2056
16208     17 39 02 F6 | 	mov	local14, local09
1620c     01 38 86 F1 | 	sub	local14, #1
16210     0F 39 02 F1 | 	add	local14, local01
16214     1C 27 C2 FA | 	rdbyte	local05, local14
16218     2F 26 0E F2 | 	cmp	local05, #47 wz
1621c     18 00 90 5D |  if_ne	jmp	#LR__2056
16220     17 25 02 F6 | 	mov	local04, local09
16224     01 24 86 F1 | 	sub	local04, #1
16228     0F 25 02 F1 | 	add	local04, local01
1622c     12 01 48 FC | 	wrbyte	#0, local04
16230     02 2E 86 F1 | 	sub	local09, #2
16234     88 FF 9F FD | 	jmp	#LR__2055
16238                 | LR__2056
16238     1A FB 01 F6 | 	mov	result1, local12
1623c     1C 00 90 FD | 	jmp	#LR__2060
16240                 | LR__2057
16240                 | LR__2058
16240     01 2A 06 F1 | 	add	local07, #1
16244     2C FE 9F FD | 	jmp	#LR__2047
16248                 | LR__2059
16248     03 00 00 FF 
1624c     38 E9 05 F1 | 	add	ptr___system__dat__, ##1848
16250     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
16254     03 00 00 FF 
16258     38 E9 85 F1 | 	sub	ptr___system__dat__, ##1848
1625c                 | LR__2060
1625c     A7 F0 03 F6 | 	mov	ptra, fp
16260     B2 00 A0 FD | 	call	#popregs_
16264                 | __system____getvfsforfile_ret
16264     2D 00 64 FD | 	ret
16268                 | 
16268                 | __system___basic_open
16268     05 4A 05 F6 | 	mov	COUNT_, #5
1626c     A8 00 A0 FD | 	call	#pushregs_
16270     0A 1F 02 F6 | 	mov	local01, arg02
16274     0B 21 02 F6 | 	mov	local02, arg03
16278     0C 23 02 F6 | 	mov	local03, arg04
1627c     00 24 06 F6 | 	mov	local04, #0
16280     10 43 B0 FD | 	call	#__system____getftab
16284     FD 26 0A F6 | 	mov	local05, result1 wz
16288     18 00 90 5D |  if_ne	jmp	#LR__2070
1628c     EE 12 02 F6 | 	mov	arg01, abortchain
16290     0C 14 06 F6 | 	mov	arg02, #12
16294     01 16 06 F6 | 	mov	arg03, #1
16298     DA 00 A0 FD | 	call	#__longjmp
1629c     01 FA 65 F6 | 	neg	result1, #1
162a0     14 01 90 FD | 	jmp	#LR__2079
162a4                 | LR__2070
162a4     08 26 06 F1 | 	add	local05, #8
162a8     13 FB 09 FB | 	rdlong	result1, local05 wz
162ac     08 26 86 F1 | 	sub	local05, #8
162b0     13 13 02 56 |  if_ne	mov	arg01, local05
162b4     6C 3A B0 5D |  if_ne	call	#__system___closeraw
162b8     00 1E 0E F2 | 	cmp	local01, #0 wz
162bc     00 20 0E A2 |  if_e	cmp	local02, #0 wz
162c0     00 22 0E A2 |  if_e	cmp	local03, #0 wz
162c4     3C 00 90 AD |  if_e	jmp	#LR__2072
162c8     0C 12 06 F6 | 	mov	arg01, #12
162cc     58 2F B0 FD | 	call	#__system___gc_alloc_managed
162d0     FD 24 0A F6 | 	mov	local04, result1 wz
162d4     18 00 90 5D |  if_ne	jmp	#LR__2071
162d8     EE 12 02 F6 | 	mov	arg01, abortchain
162dc     07 14 06 F6 | 	mov	arg02, #7
162e0     01 16 06 F6 | 	mov	arg03, #1
162e4     DA 00 A0 FD | 	call	#__longjmp
162e8     01 FA 65 F6 | 	neg	result1, #1
162ec     C8 00 90 FD | 	jmp	#LR__2079
162f0                 | LR__2071
162f0     12 01 68 FC | 	wrlong	#0, local04
162f4     04 24 06 F1 | 	add	local04, #4
162f8     12 01 68 FC | 	wrlong	#0, local04
162fc     04 24 86 F1 | 	sub	local04, #4
16300     13 25 62 FC | 	wrlong	local04, local05
16304                 | LR__2072
16304     00 1E 0E F2 | 	cmp	local01, #0 wz
16308     20 00 90 AD |  if_e	jmp	#LR__2073
1630c     12 1F 62 FC | 	wrlong	local01, local04
16310     12 FB 01 F6 | 	mov	result1, local04
16314     00 B0 02 FF 
16318     00 FA 45 F5 | 	or	result1, ##90177536
1631c     1C 26 06 F1 | 	add	local05, #28
16320     13 FB 61 FC | 	wrlong	result1, local05
16324     1C 26 86 F1 | 	sub	local05, #28
16328     0C 00 90 FD | 	jmp	#LR__2074
1632c                 | LR__2073
1632c     1C 26 06 F1 | 	add	local05, #28
16330     13 01 68 FC | 	wrlong	#0, local05
16334     1C 26 86 F1 | 	sub	local05, #28
16338                 | LR__2074
16338     00 20 0E F2 | 	cmp	local02, #0 wz
1633c     28 00 90 AD |  if_e	jmp	#LR__2075
16340     04 24 06 F1 | 	add	local04, #4
16344     12 21 62 FC | 	wrlong	local02, local04
16348     04 24 86 F1 | 	sub	local04, #4
1634c     12 FB 01 F6 | 	mov	result1, local04
16350     00 B8 02 FF 
16354     00 FA 45 F5 | 	or	result1, ##91226112
16358     20 26 06 F1 | 	add	local05, #32
1635c     13 FB 61 FC | 	wrlong	result1, local05
16360     20 26 86 F1 | 	sub	local05, #32
16364     0C 00 90 FD | 	jmp	#LR__2076
16368                 | LR__2075
16368     20 26 06 F1 | 	add	local05, #32
1636c     13 01 68 FC | 	wrlong	#0, local05
16370     20 26 86 F1 | 	sub	local05, #32
16374                 | LR__2076
16374     00 22 0E F2 | 	cmp	local03, #0 wz
16378     24 00 90 AD |  if_e	jmp	#LR__2077
1637c     08 24 06 F1 | 	add	local04, #8
16380     12 23 62 FC | 	wrlong	local03, local04
16384     08 24 86 F1 | 	sub	local04, #8
16388     00 C0 02 FF 
1638c     00 24 46 F5 | 	or	local04, ##92274688
16390     24 26 06 F1 | 	add	local05, #36
16394     13 25 62 FC | 	wrlong	local04, local05
16398     24 26 86 F1 | 	sub	local05, #36
1639c     0C 00 90 FD | 	jmp	#LR__2078
163a0                 | LR__2077
163a0     24 26 06 F1 | 	add	local05, #36
163a4     13 01 68 FC | 	wrlong	#0, local05
163a8     24 26 86 F1 | 	sub	local05, #36
163ac                 | LR__2078
163ac     08 26 06 F1 | 	add	local05, #8
163b0     13 0F 68 FC | 	wrlong	#7, local05
163b4     00 FA 05 F6 | 	mov	result1, #0
163b8                 | LR__2079
163b8     A7 F0 03 F6 | 	mov	ptra, fp
163bc     B2 00 A0 FD | 	call	#popregs_
163c0                 | __system___basic_open_ret
163c0     2D 00 64 FD | 	ret
163c4                 | 
163c4                 | __system___basic_open_string
163c4     04 4A 05 F6 | 	mov	COUNT_, #4
163c8     A8 00 A0 FD | 	call	#pushregs_
163cc     0A 1F 02 F6 | 	mov	local01, arg02
163d0     0B 21 02 F6 | 	mov	local02, arg03
163d4     BC 41 B0 FD | 	call	#__system____getftab
163d8     FD 22 0A F6 | 	mov	local03, result1 wz
163dc     18 00 90 5D |  if_ne	jmp	#LR__2080
163e0     EE 12 02 F6 | 	mov	arg01, abortchain
163e4     0C 14 06 F6 | 	mov	arg02, #12
163e8     01 16 06 F6 | 	mov	arg03, #1
163ec     DA 00 A0 FD | 	call	#__longjmp
163f0     01 FA 65 F6 | 	neg	result1, #1
163f4     58 00 90 FD | 	jmp	#LR__2082
163f8                 | LR__2080
163f8     08 22 06 F1 | 	add	local03, #8
163fc     11 19 0A FB | 	rdlong	arg04, local03 wz
16400     08 22 86 F1 | 	sub	local03, #8
16404     11 13 02 56 |  if_ne	mov	arg01, local03
16408     18 39 B0 5D |  if_ne	call	#__system___closeraw
1640c     0F 15 02 F6 | 	mov	arg02, local01
16410     10 17 02 F6 | 	mov	arg03, local02
16414     11 13 02 F6 | 	mov	arg01, local03
16418     B6 19 06 F6 | 	mov	arg04, #438
1641c     04 36 B0 FD | 	call	#__system___openraw
16420     FD 24 02 F6 | 	mov	local04, result1
16424     00 24 56 F2 | 	cmps	local04, #0 wc
16428     20 00 90 3D |  if_ae	jmp	#LR__2081
1642c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
16430     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
16434     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
16438     EE 12 02 F6 | 	mov	arg01, abortchain
1643c     01 16 06 F6 | 	mov	arg03, #1
16440     DA 00 A0 FD | 	call	#__longjmp
16444     01 FA 65 F6 | 	neg	result1, #1
16448     04 00 90 FD | 	jmp	#LR__2082
1644c                 | LR__2081
1644c     12 FB 01 F6 | 	mov	result1, local04
16450                 | LR__2082
16450     A7 F0 03 F6 | 	mov	ptra, fp
16454     B2 00 A0 FD | 	call	#popregs_
16458                 | __system___basic_open_string_ret
16458     2D 00 64 FD | 	ret
1645c                 | 
1645c                 | __system___basic_print_char
1645c     03 4A 05 F6 | 	mov	COUNT_, #3
16460     A8 00 A0 FD | 	call	#pushregs_
16464     0A 1F 02 F6 | 	mov	local01, arg02
16468     7C 48 B0 FD | 	call	#__system___gettxfunc
1646c     FD 20 0A F6 | 	mov	local02, result1 wz
16470     00 FA 05 A6 |  if_e	mov	result1, #0
16474     30 00 90 AD |  if_e	jmp	#LR__2090
16478     10 23 02 F6 | 	mov	local03, local02
1647c     13 20 46 F7 | 	zerox	local02, #19
16480     14 22 46 F0 | 	shr	local03, #20
16484     02 22 66 F0 | 	shl	local03, #2
16488     ED 22 02 F1 | 	add	local03, __methods__
1648c     11 23 02 FB | 	rdlong	local03, local03
16490     0F 13 02 F6 | 	mov	arg01, local01
16494     F2 1E 02 F6 | 	mov	local01, objptr
16498     10 E5 01 F6 | 	mov	objptr, local02
1649c     2D 22 62 FD | 	call	local03
164a0     0F E5 01 F6 | 	mov	objptr, local01
164a4     01 FA 05 F6 | 	mov	result1, #1
164a8                 | LR__2090
164a8     A7 F0 03 F6 | 	mov	ptra, fp
164ac     B2 00 A0 FD | 	call	#popregs_
164b0                 | __system___basic_print_char_ret
164b0     2D 00 64 FD | 	ret
164b4                 | 
164b4                 | __system___basic_print_string
164b4     03 4A 05 F6 | 	mov	COUNT_, #3
164b8     A8 00 A0 FD | 	call	#pushregs_
164bc     0A 1F 02 F6 | 	mov	local01, arg02
164c0     0B 21 02 F6 | 	mov	local02, arg03
164c4     20 48 B0 FD | 	call	#__system___gettxfunc
164c8     FD 22 0A F6 | 	mov	local03, result1 wz
164cc     00 FA 05 A6 |  if_e	mov	result1, #0
164d0     18 00 90 AD |  if_e	jmp	#LR__2100
164d4     00 1E 0E F2 | 	cmp	local01, #0 wz
164d8     00 FA 05 A6 |  if_e	mov	result1, #0
164dc     11 13 02 56 |  if_ne	mov	arg01, local03
164e0     10 15 02 56 |  if_ne	mov	arg02, local02
164e4     0F 17 02 56 |  if_ne	mov	arg03, local01
164e8     9C 01 B0 5D |  if_ne	call	#__system___fmtstr
164ec                 | LR__2100
164ec     A7 F0 03 F6 | 	mov	ptra, fp
164f0     B2 00 A0 FD | 	call	#popregs_
164f4                 | __system___basic_print_string_ret
164f4     2D 00 64 FD | 	ret
164f8                 | 
164f8                 | __system___basic_print_integer
164f8     04 4A 05 F6 | 	mov	COUNT_, #4
164fc     A8 00 A0 FD | 	call	#pushregs_
16500     0A 1F 02 F6 | 	mov	local01, arg02
16504     0B 21 02 F6 | 	mov	local02, arg03
16508     0C 23 02 F6 | 	mov	local03, arg04
1650c     D8 47 B0 FD | 	call	#__system___gettxfunc
16510     FD 24 0A F6 | 	mov	local04, result1 wz
16514     00 FA 05 A6 |  if_e	mov	result1, #0
16518     12 13 02 56 |  if_ne	mov	arg01, local04
1651c     10 15 02 56 |  if_ne	mov	arg02, local02
16520     0F 17 02 56 |  if_ne	mov	arg03, local01
16524     11 19 02 56 |  if_ne	mov	arg04, local03
16528     48 02 B0 5D |  if_ne	call	#__system___fmtnum
1652c     A7 F0 03 F6 | 	mov	ptra, fp
16530     B2 00 A0 FD | 	call	#popregs_
16534                 | __system___basic_print_integer_ret
16534     2D 00 64 FD | 	ret
16538                 | 
16538                 | __system___basic_print_unsigned
16538     03 4A 05 F6 | 	mov	COUNT_, #3
1653c     A8 00 A0 FD | 	call	#pushregs_
16540     0A 1F 02 F6 | 	mov	local01, arg02
16544     0B 21 02 F6 | 	mov	local02, arg03
16548     0C 23 02 F6 | 	mov	local03, arg04
1654c     98 47 B0 FD | 	call	#__system___gettxfunc
16550     FD 12 0A F6 | 	mov	arg01, result1 wz
16554     00 FA 05 A6 |  if_e	mov	result1, #0
16558     3A 20 26 54 |  if_ne	bith	local02, #58
1655c     10 15 02 56 |  if_ne	mov	arg02, local02
16560     0F 17 02 56 |  if_ne	mov	arg03, local01
16564     11 19 02 56 |  if_ne	mov	arg04, local03
16568     08 02 B0 5D |  if_ne	call	#__system___fmtnum
1656c     A7 F0 03 F6 | 	mov	ptra, fp
16570     B2 00 A0 FD | 	call	#popregs_
16574                 | __system___basic_print_unsigned_ret
16574     2D 00 64 FD | 	ret
16578                 | 
16578                 | __system___basic_get_char
16578     03 4A 05 F6 | 	mov	COUNT_, #3
1657c     A8 00 A0 FD | 	call	#pushregs_
16580     A8 47 B0 FD | 	call	#__system___getrxfunc
16584     FD 1E 0A F6 | 	mov	local01, result1 wz
16588     01 FA 65 A6 |  if_e	neg	result1, #1
1658c     28 00 90 AD |  if_e	jmp	#LR__2110
16590     0F 21 02 F6 | 	mov	local02, local01
16594     13 1E 46 F7 | 	zerox	local01, #19
16598     14 20 46 F0 | 	shr	local02, #20
1659c     02 20 66 F0 | 	shl	local02, #2
165a0     ED 20 02 F1 | 	add	local02, __methods__
165a4     10 21 02 FB | 	rdlong	local02, local02
165a8     F2 22 02 F6 | 	mov	local03, objptr
165ac     0F E5 01 F6 | 	mov	objptr, local01
165b0     2D 20 62 FD | 	call	local02
165b4     11 E5 01 F6 | 	mov	objptr, local03
165b8                 | LR__2110
165b8     A7 F0 03 F6 | 	mov	ptra, fp
165bc     B2 00 A0 FD | 	call	#popregs_
165c0                 | __system___basic_get_char_ret
165c0     2D 00 64 FD | 	ret
165c4                 | 
165c4                 | __system___basic_get
165c4     04 4A 05 F6 | 	mov	COUNT_, #4
165c8     A8 00 A0 FD | 	call	#pushregs_
165cc     0D 1F 02 F6 | 	mov	local01, arg05
165d0     0F 19 02 FD | 	qmul	arg04, local01
165d4     09 21 02 F6 | 	mov	local02, arg01
165d8     0B 23 02 F6 | 	mov	local03, arg03
165dc     00 14 0E F2 | 	cmp	arg02, #0 wz
165e0     01 14 86 51 |  if_ne	sub	arg02, #1
165e4     10 13 02 56 |  if_ne	mov	arg01, local02
165e8     00 16 06 56 |  if_ne	mov	arg03, #0
165ec     18 24 62 FD | 	getqx	local04
165f0     E8 3D B0 5D |  if_ne	call	#__system__lseek
165f4     11 15 02 F6 | 	mov	arg02, local03
165f8     12 17 02 F6 | 	mov	arg03, local04
165fc     10 13 02 F6 | 	mov	arg01, local02
16600     60 3D B0 FD | 	call	#__system__read
16604     FD 24 02 F6 | 	mov	local04, result1
16608     01 24 56 F2 | 	cmps	local04, #1 wc
1660c     10 00 90 CD |  if_b	jmp	#LR__2120
16610     12 5F 02 F6 | 	mov	muldiva_, local04
16614     0F 61 02 F6 | 	mov	muldivb_, local01
16618     BA 00 A0 FD | 	call	#divide_
1661c     30 25 02 F6 | 	mov	local04, muldivb_
16620                 | LR__2120
16620     12 FB 01 F6 | 	mov	result1, local04
16624     A7 F0 03 F6 | 	mov	ptra, fp
16628     B2 00 A0 FD | 	call	#popregs_
1662c                 | __system___basic_get_ret
1662c     2D 00 64 FD | 	ret
16630                 | 
16630                 | __system___fmtchar
16630     00 4A 05 F6 | 	mov	COUNT_, #0
16634     A8 00 A0 FD | 	call	#pushregs_
16638     10 F0 07 F1 | 	add	ptra, #16
1663c     04 4E 05 F1 | 	add	fp, #4
16640     A7 12 62 FC | 	wrlong	arg01, fp
16644     04 4E 05 F1 | 	add	fp, #4
16648     A7 14 62 FC | 	wrlong	arg02, fp
1664c     04 4E 05 F1 | 	add	fp, #4
16650     A7 16 62 FC | 	wrlong	arg03, fp
16654     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
16658     A7 16 62 FC | 	wrlong	arg03, fp
1665c     08 4E 85 F1 | 	sub	fp, #8
16660     A7 12 02 FB | 	rdlong	arg01, fp
16664     04 4E 05 F1 | 	add	fp, #4
16668     A7 14 02 FB | 	rdlong	arg02, fp
1666c     04 4E 05 F1 | 	add	fp, #4
16670     A7 16 02 F6 | 	mov	arg03, fp
16674     0C 4E 85 F1 | 	sub	fp, #12
16678     0C 00 B0 FD | 	call	#__system___fmtstr
1667c     A7 F0 03 F6 | 	mov	ptra, fp
16680     B2 00 A0 FD | 	call	#popregs_
16684                 | __system___fmtchar_ret
16684     2D 00 64 FD | 	ret
16688                 | 
16688                 | __system___fmtstr
16688     09 4A 05 F6 | 	mov	COUNT_, #9
1668c     A8 00 A0 FD | 	call	#pushregs_
16690     09 1F 02 F6 | 	mov	local01, arg01
16694     0A 21 02 F6 | 	mov	local02, arg02
16698     0B 23 02 F6 | 	mov	local03, arg03
1669c     10 19 E2 F8 | 	getbyte	arg04, local02, #0
166a0     11 13 02 F6 | 	mov	arg01, local03
166a4     09 25 02 F6 | 	mov	local04, arg01
166a8     97 06 48 FB | 	callpa	#(@LR__2131-@LR__2130)>>2,fcache_load_ptr_
166ac                 | LR__2130
166ac     12 FB C9 FA | 	rdbyte	result1, local04 wz
166b0     01 24 06 51 |  if_ne	add	local04, #1
166b4     F4 FF 9F 5D |  if_ne	jmp	#LR__2130
166b8                 | LR__2131
166b8     09 25 82 F1 | 	sub	local04, arg01
166bc     00 18 0E F2 | 	cmp	arg04, #0 wz
166c0     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
166c4     10 15 02 F6 | 	mov	arg02, local02
166c8     12 17 02 F6 | 	mov	arg03, local04
166cc     0F 13 02 F6 | 	mov	arg01, local01
166d0     02 18 06 F6 | 	mov	arg04, #2
166d4     B0 42 B0 FD | 	call	#__system___fmtpad
166d8     FD 26 02 F6 | 	mov	local05, result1
166dc     00 26 56 F2 | 	cmps	local05, #0 wc
166e0     13 FB 01 C6 |  if_b	mov	result1, local05
166e4     80 00 90 CD |  if_b	jmp	#LR__2134
166e8     01 24 56 F2 | 	cmps	local04, #1 wc
166ec     50 00 90 CD |  if_b	jmp	#LR__2133
166f0     12 29 02 F6 | 	mov	local06, local04
166f4                 | LR__2132
166f4     0F 2B 02 F6 | 	mov	local07, local01
166f8     0F 2D 02 F6 | 	mov	local08, local01
166fc     13 2A 46 F7 | 	zerox	local07, #19
16700     14 2C 46 F0 | 	shr	local08, #20
16704     02 2C 66 F0 | 	shl	local08, #2
16708     ED 2C 02 F1 | 	add	local08, __methods__
1670c     16 2D 02 FB | 	rdlong	local08, local08
16710     11 13 C2 FA | 	rdbyte	arg01, local03
16714     F2 2E 02 F6 | 	mov	local09, objptr
16718     15 E5 01 F6 | 	mov	objptr, local07
1671c     01 22 06 F1 | 	add	local03, #1
16720     2D 2C 62 FD | 	call	local08
16724     17 E5 01 F6 | 	mov	objptr, local09
16728     FD 2E 02 F6 | 	mov	local09, result1
1672c     00 2E 56 F2 | 	cmps	local09, #0 wc
16730     17 FB 01 C6 |  if_b	mov	result1, local09
16734     30 00 90 CD |  if_b	jmp	#LR__2134
16738     17 27 02 F1 | 	add	local05, local09
1673c     ED 29 6E FB | 	djnz	local06, #LR__2132
16740                 | LR__2133
16740     10 15 02 F6 | 	mov	arg02, local02
16744     12 17 02 F6 | 	mov	arg03, local04
16748     0F 13 02 F6 | 	mov	arg01, local01
1674c     01 18 06 F6 | 	mov	arg04, #1
16750     34 42 B0 FD | 	call	#__system___fmtpad
16754     FD 2E 02 F6 | 	mov	local09, result1
16758     00 2E 56 F2 | 	cmps	local09, #0 wc
1675c     17 FB 01 C6 |  if_b	mov	result1, local09
16760     17 27 02 31 |  if_ae	add	local05, local09
16764     13 FB 01 36 |  if_ae	mov	result1, local05
16768                 | LR__2134
16768     A7 F0 03 F6 | 	mov	ptra, fp
1676c     B2 00 A0 FD | 	call	#popregs_
16770                 | __system___fmtstr_ret
16770     2D 00 64 FD | 	ret
16774                 | 
16774                 | __system___fmtnum
16774     0B 4A 05 F6 | 	mov	COUNT_, #11
16778     A8 00 A0 FD | 	call	#pushregs_
1677c     09 1F 02 F6 | 	mov	local01, arg01
16780     0A 21 02 F6 | 	mov	local02, arg02
16784     0B 23 02 F6 | 	mov	local03, arg03
16788     0C 25 02 F6 | 	mov	local04, arg04
1678c     F8 27 02 F6 | 	mov	local05, ptra
16790     13 29 02 F6 | 	mov	local06, local05
16794     00 2A 06 F6 | 	mov	local07, #0
16798     10 2D 02 F6 | 	mov	local08, local02
1679c     10 2C 46 F0 | 	shr	local08, #16
167a0     3F 2C 06 F5 | 	and	local08, #63
167a4     10 2F E2 F8 | 	getbyte	local09, local02, #0
167a8     10 31 02 F6 | 	mov	local10, local02
167ac     1A 30 46 F0 | 	shr	local10, #26
167b0     03 30 06 F5 | 	and	local10, #3
167b4     18 33 02 F6 | 	mov	local11, local10
167b8     01 2C 56 F2 | 	cmps	local08, #1 wc
167bc     44 F0 07 F1 | 	add	ptra, #68
167c0     01 2C 86 31 |  if_ae	sub	local08, #1
167c4     41 2E 56 F2 | 	cmps	local09, #65 wc
167c8     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
167cc     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
167d0     03 32 0E F2 | 	cmp	local11, #3 wz
167d4     00 32 06 A6 |  if_e	mov	local11, #0
167d8     00 22 56 52 |  if_ne	cmps	local03, #0 wc
167dc     04 32 06 46 |  if_c_and_nz	mov	local11, #4
167e0     11 23 62 46 |  if_c_and_nz	neg	local03, local03
167e4     00 32 0E F2 | 	cmp	local11, #0 wz
167e8     4C 00 90 AD |  if_e	jmp	#LR__2143
167ec     01 2A 06 F6 | 	mov	local07, #1
167f0     17 2D 0A F2 | 	cmp	local08, local09 wz
167f4     18 00 90 5D |  if_ne	jmp	#LR__2141
167f8     05 2C 6E FB | 	djnz	local08, #LR__2140
167fc     0F 13 02 F6 | 	mov	arg01, local01
16800     10 15 02 F6 | 	mov	arg02, local02
16804     23 16 06 F6 | 	mov	arg03, #35
16808     24 FE BF FD | 	call	#__system___fmtchar
1680c     88 00 90 FD | 	jmp	#LR__2147
16810                 | LR__2140
16810                 | LR__2141
16810     02 32 0E F2 | 	cmp	local11, #2 wz
16814     14 31 02 A6 |  if_e	mov	local10, local06
16818     01 28 06 A1 |  if_e	add	local06, #1
1681c     18 41 48 AC |  if_e	wrbyte	#32, local10
16820     14 00 90 AD |  if_e	jmp	#LR__2142
16824     04 32 0E F2 | 	cmp	local11, #4 wz
16828     14 5B 48 AC |  if_e	wrbyte	#45, local06
1682c     01 28 06 A1 |  if_e	add	local06, #1
16830     14 57 48 5C |  if_ne	wrbyte	#43, local06
16834     01 28 06 51 |  if_ne	add	local06, #1
16838                 | LR__2142
16838                 | LR__2143
16838     14 13 02 F6 | 	mov	arg01, local06
1683c     11 15 02 F6 | 	mov	arg02, local03
16840     12 17 02 F6 | 	mov	arg03, local04
16844     16 19 02 F6 | 	mov	arg04, local08
16848     00 1A 06 F6 | 	mov	arg05, #0
1684c     1D 20 2E F4 | 	testbn	local02, #29 wz
16850     01 1A 06 56 |  if_ne	mov	arg05, #1
16854     F8 41 B0 FD | 	call	#__system___uitoa
16858     FD 2A 02 F1 | 	add	local07, result1
1685c     17 2B 5A F2 | 	cmps	local07, local09 wcz
16860     24 00 90 ED |  if_be	jmp	#LR__2146
16864     97 0E 48 FB | 	callpa	#(@LR__2145-@LR__2144)>>2,fcache_load_ptr_
16868                 | LR__2144
16868     17 31 02 F6 | 	mov	local10, local09
1686c     01 30 56 F2 | 	cmps	local10, #1 wc
16870     01 2E 86 F1 | 	sub	local09, #1
16874     14 31 02 36 |  if_ae	mov	local10, local06
16878     01 28 06 31 |  if_ae	add	local06, #1
1687c     18 47 48 3C |  if_ae	wrbyte	#35, local10
16880     E4 FF 9F 3D |  if_ae	jmp	#LR__2144
16884                 | LR__2145
16884     14 01 48 FC | 	wrbyte	#0, local06
16888                 | LR__2146
16888     0F 13 02 F6 | 	mov	arg01, local01
1688c     10 15 02 F6 | 	mov	arg02, local02
16890     13 17 02 F6 | 	mov	arg03, local05
16894     F0 FD BF FD | 	call	#__system___fmtstr
16898                 | LR__2147
16898     A7 F0 03 F6 | 	mov	ptra, fp
1689c     B2 00 A0 FD | 	call	#popregs_
168a0                 | __system___fmtnum_ret
168a0     2D 00 64 FD | 	ret
168a4                 | 
168a4                 | __system___fmtfloat
168a4     10 4A 05 F6 | 	mov	COUNT_, #16
168a8     A8 00 A0 FD | 	call	#pushregs_
168ac     24 F1 07 F1 | 	add	ptra, #292
168b0     04 4E 05 F1 | 	add	fp, #4
168b4     A7 12 62 FC | 	wrlong	arg01, fp
168b8     04 4E 05 F1 | 	add	fp, #4
168bc     A7 14 62 FC | 	wrlong	arg02, fp
168c0     04 4E 05 F1 | 	add	fp, #4
168c4     A7 16 62 FC | 	wrlong	arg03, fp
168c8     04 4E 05 F1 | 	add	fp, #4
168cc     A7 18 62 FC | 	wrlong	arg04, fp
168d0     0C 4E 05 F1 | 	add	fp, #12
168d4     A7 14 68 FC | 	wrlong	#10, fp
168d8     08 4E 05 F1 | 	add	fp, #8
168dc     A7 00 68 FC | 	wrlong	#0, fp
168e0     08 4E 05 F1 | 	add	fp, #8
168e4     A7 00 68 FC | 	wrlong	#0, fp
168e8     08 4E 05 F1 | 	add	fp, #8
168ec     A7 00 68 FC | 	wrlong	#0, fp
168f0     04 4E 05 F1 | 	add	fp, #4
168f4     A7 04 68 FC | 	wrlong	#2, fp
168f8     04 4E 05 F1 | 	add	fp, #4
168fc     A7 00 68 FC | 	wrlong	#0, fp
16900     04 4E 05 F1 | 	add	fp, #4
16904     A7 00 68 FC | 	wrlong	#0, fp
16908     04 4E 05 F1 | 	add	fp, #4
1690c     A7 00 68 FC | 	wrlong	#0, fp
16910     04 4E 05 F1 | 	add	fp, #4
16914     A7 00 68 FC | 	wrlong	#0, fp
16918     18 4E 05 F1 | 	add	fp, #24
1691c     A7 00 68 FC | 	wrlong	#0, fp
16920     68 4E 05 F1 | 	add	fp, #104
16924     A7 1E 02 F6 | 	mov	local01, fp
16928     08 4E 85 F1 | 	sub	fp, #8
1692c     A7 1E 62 FC | 	wrlong	local01, fp
16930     04 4E 05 F1 | 	add	fp, #4
16934     A7 1E 62 FC | 	wrlong	local01, fp
16938     BC 4E 85 F1 | 	sub	fp, #188
1693c     A7 1E 02 FB | 	rdlong	local01, fp
16940     10 1E 46 F0 | 	shr	local01, #16
16944     3F 1E 06 F5 | 	and	local01, #63
16948     B0 4E 05 F1 | 	add	fp, #176
1694c     A7 1E 62 FC | 	wrlong	local01, fp
16950     B0 4E 85 F1 | 	sub	fp, #176
16954     A7 1E 02 FB | 	rdlong	local01, fp
16958     1C 1E 46 F0 | 	shr	local01, #28
1695c     01 1E 06 F5 | 	and	local01, #1
16960     08 4F 05 F1 | 	add	fp, #264
16964     A7 1E 62 FC | 	wrlong	local01, fp
16968     58 4E 85 F1 | 	sub	fp, #88
1696c     A7 1E 0A FB | 	rdlong	local01, fp wz
16970     B8 4E 85 F1 | 	sub	fp, #184
16974     3C 00 90 5D |  if_ne	jmp	#LR__2151
16978     10 4E 05 F1 | 	add	fp, #16
1697c     A7 1E 02 FB | 	rdlong	local01, fp
16980     10 4E 85 F1 | 	sub	fp, #16
16984     61 1E 0E F2 | 	cmp	local01, #97 wz
16988     18 00 90 5D |  if_ne	jmp	#LR__2150
1698c     B8 4E 05 F1 | 	add	fp, #184
16990     A7 1A 68 FC | 	wrlong	#13, fp
16994     84 4E 85 F1 | 	sub	fp, #132
16998     A7 02 68 FC | 	wrlong	#1, fp
1699c     34 4E 85 F1 | 	sub	fp, #52
169a0     24 00 90 FD | 	jmp	#LR__2152
169a4                 | LR__2150
169a4     B8 4E 05 F1 | 	add	fp, #184
169a8     A7 0C 68 FC | 	wrlong	#6, fp
169ac     B8 4E 85 F1 | 	sub	fp, #184
169b0     14 00 90 FD | 	jmp	#LR__2152
169b4                 | LR__2151
169b4     B8 4E 05 F1 | 	add	fp, #184
169b8     A7 1E 02 FB | 	rdlong	local01, fp
169bc     01 1E 86 F1 | 	sub	local01, #1
169c0     A7 1E 62 FC | 	wrlong	local01, fp
169c4     B8 4E 85 F1 | 	sub	fp, #184
169c8                 | LR__2152
169c8     08 4E 05 F1 | 	add	fp, #8
169cc     A7 1E 02 FB | 	rdlong	local01, fp
169d0     16 1E 46 F0 | 	shr	local01, #22
169d4     03 1E 06 F5 | 	and	local01, #3
169d8     04 4F 05 F1 | 	add	fp, #260
169dc     A7 1E 62 FC | 	wrlong	local01, fp
169e0     04 4F 85 F1 | 	sub	fp, #260
169e4     A7 1E 02 FB | 	rdlong	local01, fp
169e8     1D 1E 46 F0 | 	shr	local01, #29
169ec     01 1E 06 F5 | 	and	local01, #1
169f0     B4 4E 05 F1 | 	add	fp, #180
169f4     A7 1E 62 FC | 	wrlong	local01, fp
169f8     B4 4E 85 F1 | 	sub	fp, #180
169fc     A7 1E 02 FB | 	rdlong	local01, fp
16a00     0F 1F EA F8 | 	getbyte	local01, local01, #1
16a04     60 4E 05 F1 | 	add	fp, #96
16a08     A7 1E 62 FC | 	wrlong	local01, fp
16a0c     60 4E 85 F1 | 	sub	fp, #96
16a10     A7 1E 02 FB | 	rdlong	local01, fp
16a14     0F 1F E2 F8 | 	getbyte	local01, local01, #0
16a18     64 4E 05 F1 | 	add	fp, #100
16a1c     A7 1E 62 FC | 	wrlong	local01, fp
16a20     00 1E 06 F6 | 	mov	local01, #0
16a24     5C 4E 85 F1 | 	sub	fp, #92
16a28     A7 1A 02 FB | 	rdlong	arg05, fp
16a2c     65 1A 0E F2 | 	cmp	arg05, #101 wz
16a30     01 1E 06 A6 |  if_e	mov	local01, #1
16a34     14 4E 05 F1 | 	add	fp, #20
16a38     A7 1E 62 FC | 	wrlong	local01, fp
16a3c     98 4E 05 F1 | 	add	fp, #152
16a40     A7 20 0A FB | 	rdlong	local02, fp wz
16a44     45 1E 06 56 |  if_ne	mov	local01, #69
16a48     65 1E 06 A6 |  if_e	mov	local01, #101
16a4c     8C 4E 85 F1 | 	sub	fp, #140
16a50     A7 1E 62 FC | 	wrlong	local01, fp
16a54     20 4E 85 F1 | 	sub	fp, #32
16a58     A7 1E 02 FB | 	rdlong	local01, fp
16a5c     10 4E 85 F1 | 	sub	fp, #16
16a60     61 1E 0E F2 | 	cmp	local01, #97 wz
16a64     4C 00 90 5D |  if_ne	jmp	#LR__2153
16a68     24 4E 05 F1 | 	add	fp, #36
16a6c     A7 02 68 FC | 	wrlong	#1, fp
16a70     98 4E 05 F1 | 	add	fp, #152
16a74     A7 20 0A FB | 	rdlong	local02, fp wz
16a78     50 1E 06 56 |  if_ne	mov	local01, #80
16a7c     70 1E 06 A6 |  if_e	mov	local01, #112
16a80     8C 4E 85 F1 | 	sub	fp, #140
16a84     A7 1E 62 FC | 	wrlong	local01, fp
16a88     14 4E 85 F1 | 	sub	fp, #20
16a8c     A7 04 68 FC | 	wrlong	#2, fp
16a90     1C 4E 05 F1 | 	add	fp, #28
16a94     A7 02 68 FC | 	wrlong	#1, fp
16a98     84 4E 05 F1 | 	add	fp, #132
16a9c     A7 20 0A FB | 	rdlong	local02, fp wz
16aa0     58 1E 06 56 |  if_ne	mov	local01, #88
16aa4     78 1E 06 A6 |  if_e	mov	local01, #120
16aa8     7C 4E 85 F1 | 	sub	fp, #124
16aac     A7 1E 62 FC | 	wrlong	local01, fp
16ab0     40 4E 85 F1 | 	sub	fp, #64
16ab4                 | LR__2153
16ab4     10 4E 05 F1 | 	add	fp, #16
16ab8     A7 1E 02 FB | 	rdlong	local01, fp
16abc     10 4E 85 F1 | 	sub	fp, #16
16ac0     23 1E 0E F2 | 	cmp	local01, #35 wz
16ac4     3C 00 90 5D |  if_ne	jmp	#LR__2156
16ac8     48 4E 05 F1 | 	add	fp, #72
16acc     A7 02 68 FC | 	wrlong	#1, fp
16ad0     C8 4E 05 F1 | 	add	fp, #200
16ad4     A7 1E 0A FB | 	rdlong	local01, fp wz
16ad8     10 4F 85 F1 | 	sub	fp, #272
16adc     18 00 90 AD |  if_e	jmp	#LR__2154
16ae0     10 4E 05 F1 | 	add	fp, #16
16ae4     A7 CC 68 FC | 	wrlong	#102, fp
16ae8     00 4F 05 F1 | 	add	fp, #256
16aec     A7 00 68 FC | 	wrlong	#0, fp
16af0     10 4F 85 F1 | 	sub	fp, #272
16af4     0C 00 90 FD | 	jmp	#LR__2155
16af8                 | LR__2154
16af8     10 4F 05 F1 | 	add	fp, #272
16afc     A7 02 68 FC | 	wrlong	#1, fp
16b00     10 4F 85 F1 | 	sub	fp, #272
16b04                 | LR__2155
16b04                 | LR__2156
16b04     08 4E 05 F1 | 	add	fp, #8
16b08     A7 1E 02 FB | 	rdlong	local01, fp
16b0c     1A 1E 46 F0 | 	shr	local01, #26
16b10     03 1E 06 F5 | 	and	local01, #3
16b14     5C 4E 05 F1 | 	add	fp, #92
16b18     A7 1E 62 FC | 	wrlong	local01, fp
16b1c     58 4E 85 F1 | 	sub	fp, #88
16b20     A7 FA 01 FB | 	rdlong	result1, fp
16b24     0C 4E 85 F1 | 	sub	fp, #12
16b28     1F FA 4D F0 | 	shr	result1, #31 wz
16b2c     20 00 90 AD |  if_e	jmp	#LR__2157
16b30     2C 4E 05 F1 | 	add	fp, #44
16b34     A7 5A 68 FC | 	wrlong	#45, fp
16b38     20 4E 85 F1 | 	sub	fp, #32
16b3c     A7 FA 01 FB | 	rdlong	result1, fp
16b40     1F FA E5 F4 | 	bitnot	result1, #31
16b44     A7 FA 61 FC | 	wrlong	result1, fp
16b48     0C 4E 85 F1 | 	sub	fp, #12
16b4c     3C 00 90 FD | 	jmp	#LR__2159
16b50                 | LR__2157
16b50     64 4E 05 F1 | 	add	fp, #100
16b54     A7 1E 02 FB | 	rdlong	local01, fp
16b58     64 4E 85 F1 | 	sub	fp, #100
16b5c     01 1E 0E F2 | 	cmp	local01, #1 wz
16b60     2C 4E 05 A1 |  if_e	add	fp, #44
16b64     A7 56 68 AC |  if_e	wrlong	#43, fp
16b68     2C 4E 85 A1 |  if_e	sub	fp, #44
16b6c     1C 00 90 AD |  if_e	jmp	#LR__2158
16b70     64 4E 05 F1 | 	add	fp, #100
16b74     A7 1E 02 FB | 	rdlong	local01, fp
16b78     64 4E 85 F1 | 	sub	fp, #100
16b7c     02 1E 0E F2 | 	cmp	local01, #2 wz
16b80     2C 4E 05 A1 |  if_e	add	fp, #44
16b84     A7 40 68 AC |  if_e	wrlong	#32, fp
16b88     2C 4E 85 A1 |  if_e	sub	fp, #44
16b8c                 | LR__2158
16b8c                 | LR__2159
16b8c     08 4E 05 F1 | 	add	fp, #8
16b90     A7 1E 02 FB | 	rdlong	local01, fp
16b94     18 1E 46 F0 | 	shr	local01, #24
16b98     03 1E 06 F5 | 	and	local01, #3
16b9c     3C 4E 05 F1 | 	add	fp, #60
16ba0     A7 1E 62 FC | 	wrlong	local01, fp
16ba4     00 1E 06 F6 | 	mov	local01, #0
16ba8     18 4E 85 F1 | 	sub	fp, #24
16bac     A7 22 0A FB | 	rdlong	local03, fp wz
16bb0     2C 4E 85 F1 | 	sub	fp, #44
16bb4     18 00 90 5D |  if_ne	jmp	#LR__2160
16bb8     1C 4E 05 F1 | 	add	fp, #28
16bbc     A7 24 02 FB | 	rdlong	local04, fp
16bc0     1C 4E 85 F1 | 	sub	fp, #28
16bc4     12 27 02 F6 | 	mov	local05, local04
16bc8     0A 26 0E F2 | 	cmp	local05, #10 wz
16bcc     04 00 90 AD |  if_e	jmp	#LR__2161
16bd0                 | LR__2160
16bd0     01 1E 66 F5 | 	xor	local01, #1
16bd4                 | LR__2161
16bd4     3C 4E 05 F1 | 	add	fp, #60
16bd8     A7 1E 62 FC | 	wrlong	local01, fp
16bdc     3C 4E 85 F1 | 	sub	fp, #60
16be0     00 1E 0E F2 | 	cmp	local01, #0 wz
16be4     0C 01 90 AD |  if_e	jmp	#LR__2163
16be8     44 4E 05 F1 | 	add	fp, #68
16bec     A7 26 02 FB | 	rdlong	local05, fp
16bf0     44 4E 85 F1 | 	sub	fp, #68
16bf4     13 23 02 F6 | 	mov	local03, local05
16bf8     02 22 0E F2 | 	cmp	local03, #2 wz
16bfc     F4 00 90 5D |  if_ne	jmp	#LR__2163
16c00     0C 4F 05 F1 | 	add	fp, #268
16c04     A7 28 02 FB | 	rdlong	local06, fp
16c08     0C 4F 85 F1 | 	sub	fp, #268
16c0c     14 25 02 F6 | 	mov	local04, local06
16c10     02 24 0E F2 | 	cmp	local04, #2 wz
16c14     DC 00 90 AD |  if_e	jmp	#LR__2163
16c18     C0 4E 05 F1 | 	add	fp, #192
16c1c     A7 12 02 FB | 	rdlong	arg01, fp
16c20     94 4E 85 F1 | 	sub	fp, #148
16c24     A7 14 02 FB | 	rdlong	arg02, fp
16c28     14 4E 05 F1 | 	add	fp, #20
16c2c     A7 16 02 FB | 	rdlong	arg03, fp
16c30     40 4E 85 F1 | 	sub	fp, #64
16c34     80 40 B0 FD | 	call	#__system__emitsign_0329
16c38     14 4F 05 F1 | 	add	fp, #276
16c3c     A7 FA 61 FC | 	wrlong	result1, fp
16c40     14 4F 85 F1 | 	sub	fp, #276
16c44     00 FA 55 F2 | 	cmps	result1, #0 wc
16c48     14 4F 05 C1 |  if_b	add	fp, #276
16c4c     A7 FA 01 CB |  if_b	rdlong	result1, fp
16c50     14 4F 85 C1 |  if_b	sub	fp, #276
16c54     6C 0B 90 CD |  if_b	jmp	#LR__2213
16c58     C0 4E 05 F1 | 	add	fp, #192
16c5c     A7 1E 02 FB | 	rdlong	local01, fp
16c60     54 4E 05 F1 | 	add	fp, #84
16c64     A7 26 02 FB | 	rdlong	local05, fp
16c68     13 23 02 F6 | 	mov	local03, local05
16c6c     13 1F 02 F1 | 	add	local01, local05
16c70     54 4E 85 F1 | 	sub	fp, #84
16c74     A7 1E 62 FC | 	wrlong	local01, fp
16c78     58 4E 85 F1 | 	sub	fp, #88
16c7c     A7 1E 0A FB | 	rdlong	local01, fp wz
16c80     68 4E 85 F1 | 	sub	fp, #104
16c84     60 00 90 AD |  if_e	jmp	#LR__2162
16c88     68 4E 05 F1 | 	add	fp, #104
16c8c     A7 1E 02 FB | 	rdlong	local01, fp
16c90     AC 4E 05 F1 | 	add	fp, #172
16c94     A7 22 02 FB | 	rdlong	local03, fp
16c98     11 1F 82 F1 | 	sub	local01, local03
16c9c     AC 4E 85 F1 | 	sub	fp, #172
16ca0     A7 1E 62 FC | 	wrlong	local01, fp
16ca4     68 4E 85 F1 | 	sub	fp, #104
16ca8     00 1E 56 F2 | 	cmps	local01, #0 wc
16cac     68 4E 05 C1 |  if_b	add	fp, #104
16cb0     A7 00 68 CC |  if_b	wrlong	#0, fp
16cb4     68 4E 85 C1 |  if_b	sub	fp, #104
16cb8     08 4E 05 F1 | 	add	fp, #8
16cbc     A7 1E 02 FB | 	rdlong	local01, fp
16cc0     E8 1E 06 F4 | 	bitl	local01, #232
16cc4     A7 1E 62 FC | 	wrlong	local01, fp
16cc8     60 4E 05 F1 | 	add	fp, #96
16ccc     A7 26 02 FB | 	rdlong	local05, fp
16cd0     13 23 02 F6 | 	mov	local03, local05
16cd4     08 22 66 F0 | 	shl	local03, #8
16cd8     11 1F 42 F5 | 	or	local01, local03
16cdc     60 4E 85 F1 | 	sub	fp, #96
16ce0     A7 1E 62 FC | 	wrlong	local01, fp
16ce4     08 4E 85 F1 | 	sub	fp, #8
16ce8                 | LR__2162
16ce8     3C 4E 05 F1 | 	add	fp, #60
16cec     A7 00 68 FC | 	wrlong	#0, fp
16cf0     3C 4E 85 F1 | 	sub	fp, #60
16cf4                 | LR__2163
16cf4     0C 4E 05 F1 | 	add	fp, #12
16cf8     A7 12 02 FB | 	rdlong	arg01, fp
16cfc     0C 4E 85 F1 | 	sub	fp, #12
16d00     D0 1D B0 FD | 	call	#__system____builtin_ilogb
16d04     FF FF 3F FF 
16d08     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
16d0c     50 00 90 5D |  if_ne	jmp	#LR__2165
16d10     2C 4E 05 F1 | 	add	fp, #44
16d14     A7 1E 0A FB | 	rdlong	local01, fp wz
16d18     2C 4E 85 F1 | 	sub	fp, #44
16d1c     24 00 90 AD |  if_e	jmp	#LR__2164
16d20     C0 4E 05 F1 | 	add	fp, #192
16d24     A7 20 02 FB | 	rdlong	local02, fp
16d28     10 23 02 F6 | 	mov	local03, local02
16d2c     01 22 06 F1 | 	add	local03, #1
16d30     A7 22 62 FC | 	wrlong	local03, fp
16d34     94 4E 85 F1 | 	sub	fp, #148
16d38     A7 24 02 FB | 	rdlong	local04, fp
16d3c     2C 4E 85 F1 | 	sub	fp, #44
16d40     10 25 42 FC | 	wrbyte	local04, local02
16d44                 | LR__2164
16d44     C0 4E 05 F1 | 	add	fp, #192
16d48     A7 12 02 FB | 	rdlong	arg01, fp
16d4c     C0 4E 85 F1 | 	sub	fp, #192
16d50     24 01 00 FF 
16d54     8A 15 06 F6 | 	mov	arg02, ##@LR__4071
16d58     18 EA BF FD | 	call	#__system____builtin_strcpy
16d5c     A4 08 90 FD | 	jmp	#LR__2201
16d60                 | LR__2165
16d60     0C 4E 05 F1 | 	add	fp, #12
16d64     A7 20 02 FB | 	rdlong	local02, fp
16d68     0C 4E 85 F1 | 	sub	fp, #12
16d6c     10 13 02 F6 | 	mov	arg01, local02
16d70     60 1D B0 FD | 	call	#__system____builtin_ilogb
16d74     00 00 40 FF 
16d78     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
16d7c     50 00 90 5D |  if_ne	jmp	#LR__2167
16d80     2C 4E 05 F1 | 	add	fp, #44
16d84     A7 1E 0A FB | 	rdlong	local01, fp wz
16d88     2C 4E 85 F1 | 	sub	fp, #44
16d8c     24 00 90 AD |  if_e	jmp	#LR__2166
16d90     C0 4E 05 F1 | 	add	fp, #192
16d94     A7 20 02 FB | 	rdlong	local02, fp
16d98     10 23 02 F6 | 	mov	local03, local02
16d9c     01 22 06 F1 | 	add	local03, #1
16da0     A7 22 62 FC | 	wrlong	local03, fp
16da4     94 4E 85 F1 | 	sub	fp, #148
16da8     A7 24 02 FB | 	rdlong	local04, fp
16dac     2C 4E 85 F1 | 	sub	fp, #44
16db0     10 25 42 FC | 	wrbyte	local04, local02
16db4                 | LR__2166
16db4     C0 4E 05 F1 | 	add	fp, #192
16db8     A7 12 02 FB | 	rdlong	arg01, fp
16dbc     C0 4E 85 F1 | 	sub	fp, #192
16dc0     24 01 00 FF 
16dc4     8E 15 06 F6 | 	mov	arg02, ##@LR__4072
16dc8     A8 E9 BF FD | 	call	#__system____builtin_strcpy
16dcc     34 08 90 FD | 	jmp	#LR__2201
16dd0                 | LR__2167
16dd0     10 4E 05 F1 | 	add	fp, #16
16dd4     A7 1E 02 FB | 	rdlong	local01, fp
16dd8     10 4E 85 F1 | 	sub	fp, #16
16ddc     67 1E 0E F2 | 	cmp	local01, #103 wz
16de0     10 4E 05 51 |  if_ne	add	fp, #16
16de4     A7 22 02 5B |  if_ne	rdlong	local03, fp
16de8     10 4E 85 51 |  if_ne	sub	fp, #16
16dec     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
16df0     94 01 90 5D |  if_ne	jmp	#LR__2172
16df4     0C 4E 05 F1 | 	add	fp, #12
16df8     A7 12 02 FB | 	rdlong	arg01, fp
16dfc     08 4E 05 F1 | 	add	fp, #8
16e00     A7 14 02 F6 | 	mov	arg02, fp
16e04     0C 4E 05 F1 | 	add	fp, #12
16e08     A7 16 02 F6 | 	mov	arg03, fp
16e0c     98 4E 05 F1 | 	add	fp, #152
16e10     A7 18 02 FB | 	rdlong	arg04, fp
16e14     9C 4E 85 F1 | 	sub	fp, #156
16e18     A7 1A 02 FB | 	rdlong	arg05, fp
16e1c     1C 4E 85 F1 | 	sub	fp, #28
16e20     A0 3C B0 FD | 	call	#__system__disassemble_0327
16e24     10 4E 05 F1 | 	add	fp, #16
16e28     A7 1E 02 FB | 	rdlong	local01, fp
16e2c     10 4E 85 F1 | 	sub	fp, #16
16e30     23 1E 0E F2 | 	cmp	local01, #35 wz
16e34     A0 00 90 5D |  if_ne	jmp	#LR__2169
16e38     20 4E 05 F1 | 	add	fp, #32
16e3c     A7 1E 02 FB | 	rdlong	local01, fp
16e40     98 4E 05 F1 | 	add	fp, #152
16e44     A7 22 02 FB | 	rdlong	local03, fp
16e48     B8 4E 85 F1 | 	sub	fp, #184
16e4c     11 1F 5A F2 | 	cmps	local01, local03 wcz
16e50     24 4E 05 11 |  if_a	add	fp, #36
16e54     A7 02 68 1C |  if_a	wrlong	#1, fp
16e58     24 4E 85 11 |  if_a	sub	fp, #36
16e5c     A4 01 90 1D |  if_a	jmp	#LR__2175
16e60     20 4E 05 F1 | 	add	fp, #32
16e64     A7 1E 02 FB | 	rdlong	local01, fp
16e68     20 4E 85 F1 | 	sub	fp, #32
16e6c     00 1E 56 F2 | 	cmps	local01, #0 wc
16e70     2C 00 90 3D |  if_ae	jmp	#LR__2168
16e74     B8 4E 05 F1 | 	add	fp, #184
16e78     A7 1E 02 FB | 	rdlong	local01, fp
16e7c     0F 1F 62 F6 | 	neg	local01, local01
16e80     98 4E 85 F1 | 	sub	fp, #152
16e84     A7 22 02 FB | 	rdlong	local03, fp
16e88     20 4E 85 F1 | 	sub	fp, #32
16e8c     0F 23 5A F2 | 	cmps	local03, local01 wcz
16e90     24 4E 05 E1 |  if_be	add	fp, #36
16e94     A7 02 68 EC |  if_be	wrlong	#1, fp
16e98     24 4E 85 E1 |  if_be	sub	fp, #36
16e9c     64 01 90 FD | 	jmp	#LR__2175
16ea0                 | LR__2168
16ea0     20 4E 05 F1 | 	add	fp, #32
16ea4     A7 1E 02 FB | 	rdlong	local01, fp
16ea8     20 4E 85 F1 | 	sub	fp, #32
16eac     01 1E 56 F2 | 	cmps	local01, #1 wc
16eb0     50 01 90 CD |  if_b	jmp	#LR__2175
16eb4     B8 4E 05 F1 | 	add	fp, #184
16eb8     A7 1E 02 FB | 	rdlong	local01, fp
16ebc     98 4E 85 F1 | 	sub	fp, #152
16ec0     A7 22 02 FB | 	rdlong	local03, fp
16ec4     11 1F 82 F1 | 	sub	local01, local03
16ec8     98 4E 05 F1 | 	add	fp, #152
16ecc     A7 1E 62 FC | 	wrlong	local01, fp
16ed0     B8 4E 85 F1 | 	sub	fp, #184
16ed4     2C 01 90 FD | 	jmp	#LR__2175
16ed8                 | LR__2169
16ed8     00 1E 06 F6 | 	mov	local01, #0
16edc     08 4E 05 F1 | 	add	fp, #8
16ee0     A7 20 02 FB | 	rdlong	local02, fp
16ee4     1C 20 46 F0 | 	shr	local02, #28
16ee8     01 20 0E F5 | 	and	local02, #1 wz
16eec     01 1E 06 A6 |  if_e	mov	local01, #1
16ef0     2C 4E 05 F1 | 	add	fp, #44
16ef4     A7 1E 62 FC | 	wrlong	local01, fp
16ef8     14 4E 85 F1 | 	sub	fp, #20
16efc     A7 1E 02 FB | 	rdlong	local01, fp
16f00     98 4E 05 F1 | 	add	fp, #152
16f04     A7 22 02 FB | 	rdlong	local03, fp
16f08     B8 4E 85 F1 | 	sub	fp, #184
16f0c     11 1F 52 F2 | 	cmps	local01, local03 wc
16f10     18 00 90 3D |  if_ae	jmp	#LR__2170
16f14     20 4E 05 F1 | 	add	fp, #32
16f18     A7 24 02 FB | 	rdlong	local04, fp
16f1c     20 4E 85 F1 | 	sub	fp, #32
16f20     FF FF 7F FF 
16f24     FC 25 56 F2 | 	cmps	local04, ##-4 wc
16f28     10 00 90 3D |  if_ae	jmp	#LR__2171
16f2c                 | LR__2170
16f2c     24 4E 05 F1 | 	add	fp, #36
16f30     A7 02 68 FC | 	wrlong	#1, fp
16f34     24 4E 85 F1 | 	sub	fp, #36
16f38     C8 00 90 FD | 	jmp	#LR__2175
16f3c                 | LR__2171
16f3c     B8 4E 05 F1 | 	add	fp, #184
16f40     A7 24 02 FB | 	rdlong	local04, fp
16f44     98 4E 85 F1 | 	sub	fp, #152
16f48     A7 22 02 FB | 	rdlong	local03, fp
16f4c     11 25 82 F1 | 	sub	local04, local03
16f50     98 4E 05 F1 | 	add	fp, #152
16f54     A7 24 62 FC | 	wrlong	local04, fp
16f58     AC 4E 85 F1 | 	sub	fp, #172
16f5c     A7 12 02 FB | 	rdlong	arg01, fp
16f60     08 4E 05 F1 | 	add	fp, #8
16f64     A7 14 02 F6 | 	mov	arg02, fp
16f68     0C 4E 05 F1 | 	add	fp, #12
16f6c     A7 16 02 F6 | 	mov	arg03, fp
16f70     12 19 62 F6 | 	neg	arg04, local04
16f74     04 4E 85 F1 | 	sub	fp, #4
16f78     A7 1A 02 FB | 	rdlong	arg05, fp
16f7c     1C 4E 85 F1 | 	sub	fp, #28
16f80     40 3B B0 FD | 	call	#__system__disassemble_0327
16f84     7C 00 90 FD | 	jmp	#LR__2175
16f88                 | LR__2172
16f88     24 4E 05 F1 | 	add	fp, #36
16f8c     A7 1E 0A FB | 	rdlong	local01, fp wz
16f90     24 4E 85 F1 | 	sub	fp, #36
16f94     34 00 90 AD |  if_e	jmp	#LR__2173
16f98     0C 4E 05 F1 | 	add	fp, #12
16f9c     A7 12 02 FB | 	rdlong	arg01, fp
16fa0     08 4E 05 F1 | 	add	fp, #8
16fa4     A7 14 02 F6 | 	mov	arg02, fp
16fa8     0C 4E 05 F1 | 	add	fp, #12
16fac     A7 16 02 F6 | 	mov	arg03, fp
16fb0     98 4E 05 F1 | 	add	fp, #152
16fb4     A7 18 02 FB | 	rdlong	arg04, fp
16fb8     9C 4E 85 F1 | 	sub	fp, #156
16fbc     A7 1A 02 FB | 	rdlong	arg05, fp
16fc0     1C 4E 85 F1 | 	sub	fp, #28
16fc4     FC 3A B0 FD | 	call	#__system__disassemble_0327
16fc8     38 00 90 FD | 	jmp	#LR__2174
16fcc                 | LR__2173
16fcc     0C 4E 05 F1 | 	add	fp, #12
16fd0     A7 12 02 FB | 	rdlong	arg01, fp
16fd4     08 4E 05 F1 | 	add	fp, #8
16fd8     A7 14 02 F6 | 	mov	arg02, fp
16fdc     0C 4E 05 F1 | 	add	fp, #12
16fe0     A7 16 02 F6 | 	mov	arg03, fp
16fe4     98 4E 05 F1 | 	add	fp, #152
16fe8     A7 24 02 FB | 	rdlong	local04, fp
16fec     01 24 06 F1 | 	add	local04, #1
16ff0     12 19 62 F6 | 	neg	arg04, local04
16ff4     9C 4E 85 F1 | 	sub	fp, #156
16ff8     A7 1A 02 FB | 	rdlong	arg05, fp
16ffc     1C 4E 85 F1 | 	sub	fp, #28
17000     C0 3A B0 FD | 	call	#__system__disassemble_0327
17004                 | LR__2174
17004                 | LR__2175
17004     1C 4E 05 F1 | 	add	fp, #28
17008     A7 1E 02 FB | 	rdlong	local01, fp
1700c     1C 4E 85 F1 | 	sub	fp, #28
17010     02 1E 0E F2 | 	cmp	local01, #2 wz
17014     4C 00 90 5D |  if_ne	jmp	#LR__2178
17018     1C 4E 05 F1 | 	add	fp, #28
1701c     A7 20 68 FC | 	wrlong	#16, fp
17020     1C 4E 85 F1 | 	sub	fp, #28
17024                 | LR__2176
17024     14 4E 05 F1 | 	add	fp, #20
17028     A7 1E 0A FB | 	rdlong	local01, fp wz
1702c     14 4E 85 F1 | 	sub	fp, #20
17030     30 00 90 AD |  if_e	jmp	#LR__2177
17034     14 4E 05 F1 | 	add	fp, #20
17038     A7 22 02 FB | 	rdlong	local03, fp
1703c     14 4E 85 F1 | 	sub	fp, #20
17040     00 80 00 FF 
17044     00 22 16 F2 | 	cmp	local03, ##16777216 wc
17048     18 00 90 3D |  if_ae	jmp	#LR__2177
1704c     14 4E 05 F1 | 	add	fp, #20
17050     A7 1E 02 FB | 	rdlong	local01, fp
17054     01 1E 66 F0 | 	shl	local01, #1
17058     A7 1E 62 FC | 	wrlong	local01, fp
1705c     14 4E 85 F1 | 	sub	fp, #20
17060     C0 FF 9F FD | 	jmp	#LR__2176
17064                 | LR__2177
17064                 | LR__2178
17064     70 4E 05 F1 | 	add	fp, #112
17068     A7 12 02 F6 | 	mov	arg01, fp
1706c     5C 4E 85 F1 | 	sub	fp, #92
17070     A7 14 02 FB | 	rdlong	arg02, fp
17074     08 4E 05 F1 | 	add	fp, #8
17078     A7 16 02 FB | 	rdlong	arg03, fp
1707c     A0 4E 05 F1 | 	add	fp, #160
17080     A7 1A 02 FB | 	rdlong	arg05, fp
17084     BC 4E 85 F1 | 	sub	fp, #188
17088     01 18 06 F6 | 	mov	arg04, #1
1708c     C0 39 B0 FD | 	call	#__system___uitoa
17090     58 4E 05 F1 | 	add	fp, #88
17094     A7 FA 61 FC | 	wrlong	result1, fp
17098     38 4E 85 F1 | 	sub	fp, #56
1709c     A7 1E 02 FB | 	rdlong	local01, fp
170a0     20 4E 85 F1 | 	sub	fp, #32
170a4     00 1E 56 F2 | 	cmps	local01, #0 wc
170a8     50 00 90 3D |  if_ae	jmp	#LR__2179
170ac     60 4E 05 F1 | 	add	fp, #96
170b0     A7 5A 68 FC | 	wrlong	#45, fp
170b4     50 4E 05 F1 | 	add	fp, #80
170b8     A7 12 02 F6 | 	mov	arg01, fp
170bc     90 4E 85 F1 | 	sub	fp, #144
170c0     A7 22 02 FB | 	rdlong	local03, fp
170c4     11 15 62 F6 | 	neg	arg02, local03
170c8     18 4E 05 F1 | 	add	fp, #24
170cc     A7 18 02 FB | 	rdlong	arg04, fp
170d0     84 4E 05 F1 | 	add	fp, #132
170d4     A7 28 02 FB | 	rdlong	local06, fp
170d8     BC 4E 85 F1 | 	sub	fp, #188
170dc     14 25 02 F6 | 	mov	local04, local06
170e0     0A 16 06 F6 | 	mov	arg03, #10
170e4     12 1B 02 F6 | 	mov	arg05, local04
170e8     64 39 B0 FD | 	call	#__system___uitoa
170ec     5C 4E 05 F1 | 	add	fp, #92
170f0     A7 FA 61 FC | 	wrlong	result1, fp
170f4     5C 4E 85 F1 | 	sub	fp, #92
170f8     48 00 90 FD | 	jmp	#LR__2180
170fc                 | LR__2179
170fc     60 4E 05 F1 | 	add	fp, #96
17100     A7 56 68 FC | 	wrlong	#43, fp
17104     50 4E 05 F1 | 	add	fp, #80
17108     A7 12 02 F6 | 	mov	arg01, fp
1710c     90 4E 85 F1 | 	sub	fp, #144
17110     A7 14 02 FB | 	rdlong	arg02, fp
17114     18 4E 05 F1 | 	add	fp, #24
17118     A7 18 02 FB | 	rdlong	arg04, fp
1711c     84 4E 05 F1 | 	add	fp, #132
17120     A7 28 02 FB | 	rdlong	local06, fp
17124     BC 4E 85 F1 | 	sub	fp, #188
17128     14 25 02 F6 | 	mov	local04, local06
1712c     0A 16 06 F6 | 	mov	arg03, #10
17130     12 1B 02 F6 | 	mov	arg05, local04
17134     18 39 B0 FD | 	call	#__system___uitoa
17138     5C 4E 05 F1 | 	add	fp, #92
1713c     A7 FA 61 FC | 	wrlong	result1, fp
17140     5C 4E 85 F1 | 	sub	fp, #92
17144                 | LR__2180
17144     24 4E 05 F1 | 	add	fp, #36
17148     A7 1E 0A FB | 	rdlong	local01, fp wz
1714c     24 4E 85 F1 | 	sub	fp, #36
17150     2C 00 90 AD |  if_e	jmp	#LR__2181
17154     50 4E 05 F1 | 	add	fp, #80
17158     A7 00 68 FC | 	wrlong	#0, fp
1715c     04 4E 85 F1 | 	sub	fp, #4
17160     A7 00 68 FC | 	wrlong	#0, fp
17164     6C 4E 05 F1 | 	add	fp, #108
17168     A7 1E 02 FB | 	rdlong	local01, fp
1716c     01 1E 06 F1 | 	add	local01, #1
17170     64 4E 85 F1 | 	sub	fp, #100
17174     A7 1E 62 FC | 	wrlong	local01, fp
17178     54 4E 85 F1 | 	sub	fp, #84
1717c     88 00 90 FD | 	jmp	#LR__2184
17180                 | LR__2181
17180     20 4E 05 F1 | 	add	fp, #32
17184     A7 1E 02 FB | 	rdlong	local01, fp
17188     20 4E 85 F1 | 	sub	fp, #32
1718c     00 1E 56 F2 | 	cmps	local01, #0 wc
17190     40 00 90 3D |  if_ae	jmp	#LR__2182
17194     20 4E 05 F1 | 	add	fp, #32
17198     A7 20 02 FB | 	rdlong	local02, fp
1719c     30 4E 05 F1 | 	add	fp, #48
171a0     A7 20 62 FC | 	wrlong	local02, fp
171a4     04 4E 85 F1 | 	sub	fp, #4
171a8     A7 20 62 FC | 	wrlong	local02, fp
171ac     2C 4E 85 F1 | 	sub	fp, #44
171b0     A7 1E 02 FB | 	rdlong	local01, fp
171b4     98 4E 05 F1 | 	add	fp, #152
171b8     A7 22 02 FB | 	rdlong	local03, fp
171bc     11 1F 02 F1 | 	add	local01, local03
171c0     01 1E 06 F1 | 	add	local01, #1
171c4     64 4E 85 F1 | 	sub	fp, #100
171c8     A7 1E 62 FC | 	wrlong	local01, fp
171cc     54 4E 85 F1 | 	sub	fp, #84
171d0     34 00 90 FD | 	jmp	#LR__2183
171d4                 | LR__2182
171d4     4C 4E 05 F1 | 	add	fp, #76
171d8     A7 00 68 FC | 	wrlong	#0, fp
171dc     2C 4E 85 F1 | 	sub	fp, #44
171e0     A7 1E 02 FB | 	rdlong	local01, fp
171e4     30 4E 05 F1 | 	add	fp, #48
171e8     A7 1E 62 FC | 	wrlong	local01, fp
171ec     68 4E 05 F1 | 	add	fp, #104
171f0     A7 22 02 FB | 	rdlong	local03, fp
171f4     11 1F 02 F1 | 	add	local01, local03
171f8     01 1E 06 F1 | 	add	local01, #1
171fc     64 4E 85 F1 | 	sub	fp, #100
17200     A7 1E 62 FC | 	wrlong	local01, fp
17204     54 4E 85 F1 | 	sub	fp, #84
17208                 | LR__2183
17208                 | LR__2184
17208     54 4E 05 F1 | 	add	fp, #84
1720c     A7 1E 02 FB | 	rdlong	local01, fp
17210     08 4E 85 F1 | 	sub	fp, #8
17214     A7 22 02 FB | 	rdlong	local03, fp
17218     11 1F 82 F1 | 	sub	local01, local03
1721c     01 1E 06 F1 | 	add	local01, #1
17220     24 4E 85 F1 | 	sub	fp, #36
17224     A7 1E 62 FC | 	wrlong	local01, fp
17228     04 4E 05 F1 | 	add	fp, #4
1722c     A7 1E 0A FB | 	rdlong	local01, fp wz
17230     2C 4E 85 F1 | 	sub	fp, #44
17234     28 4E 05 51 |  if_ne	add	fp, #40
17238     A7 22 02 5B |  if_ne	rdlong	local03, fp
1723c     01 22 06 51 |  if_ne	add	local03, #1
17240     A7 22 62 5C |  if_ne	wrlong	local03, fp
17244     28 4E 85 51 |  if_ne	sub	fp, #40
17248     1C 4E 05 F1 | 	add	fp, #28
1724c     A7 1E 02 FB | 	rdlong	local01, fp
17250     1C 4E 85 F1 | 	sub	fp, #28
17254     10 1E 0E F2 | 	cmp	local01, #16 wz
17258     28 4E 05 A1 |  if_e	add	fp, #40
1725c     A7 1E 02 AB |  if_e	rdlong	local01, fp
17260     02 1E 06 A1 |  if_e	add	local01, #2
17264     A7 1E 62 AC |  if_e	wrlong	local01, fp
17268     28 4E 85 A1 |  if_e	sub	fp, #40
1726c     24 4E 05 F1 | 	add	fp, #36
17270     A7 1E 0A FB | 	rdlong	local01, fp wz
17274     24 4E 85 F1 | 	sub	fp, #36
17278     28 00 90 AD |  if_e	jmp	#LR__2185
1727c     28 4E 05 F1 | 	add	fp, #40
17280     A7 1E 02 FB | 	rdlong	local01, fp
17284     02 22 06 F6 | 	mov	local03, #2
17288     34 4E 05 F1 | 	add	fp, #52
1728c     A7 26 02 FB | 	rdlong	local05, fp
17290     13 23 02 F1 | 	add	local03, local05
17294     11 1F 02 F1 | 	add	local01, local03
17298     34 4E 85 F1 | 	sub	fp, #52
1729c     A7 1E 62 FC | 	wrlong	local01, fp
172a0     28 4E 85 F1 | 	sub	fp, #40
172a4                 | LR__2185
172a4     28 4E 05 F1 | 	add	fp, #40
172a8     A7 1E 02 FB | 	rdlong	local01, fp
172ac     28 4E 85 F1 | 	sub	fp, #40
172b0     41 1E 56 F2 | 	cmps	local01, #65 wc
172b4     01 FA 65 36 |  if_ae	neg	result1, #1
172b8     08 05 90 3D |  if_ae	jmp	#LR__2213
172bc     3C 4E 05 F1 | 	add	fp, #60
172c0     A7 1E 0A FB | 	rdlong	local01, fp wz
172c4     3C 4E 85 F1 | 	sub	fp, #60
172c8     60 00 90 AD |  if_e	jmp	#LR__2186
172cc     C0 4E 05 F1 | 	add	fp, #192
172d0     A7 12 02 FB | 	rdlong	arg01, fp
172d4     94 4E 85 F1 | 	sub	fp, #148
172d8     A7 14 02 FB | 	rdlong	arg02, fp
172dc     14 4E 05 F1 | 	add	fp, #20
172e0     A7 16 02 FB | 	rdlong	arg03, fp
172e4     40 4E 85 F1 | 	sub	fp, #64
172e8     CC 39 B0 FD | 	call	#__system__emitsign_0329
172ec     18 4F 05 F1 | 	add	fp, #280
172f0     A7 FA 61 FC | 	wrlong	result1, fp
172f4     18 4F 85 F1 | 	sub	fp, #280
172f8     00 FA 55 F2 | 	cmps	result1, #0 wc
172fc     18 4F 05 C1 |  if_b	add	fp, #280
17300     A7 FA 01 CB |  if_b	rdlong	result1, fp
17304     18 4F 85 C1 |  if_b	sub	fp, #280
17308     B8 04 90 CD |  if_b	jmp	#LR__2213
1730c     C0 4E 05 F1 | 	add	fp, #192
17310     A7 1E 02 FB | 	rdlong	local01, fp
17314     58 4E 05 F1 | 	add	fp, #88
17318     A7 22 02 FB | 	rdlong	local03, fp
1731c     11 1F 02 F1 | 	add	local01, local03
17320     58 4E 85 F1 | 	sub	fp, #88
17324     A7 1E 62 FC | 	wrlong	local01, fp
17328     C0 4E 85 F1 | 	sub	fp, #192
1732c                 | LR__2186
1732c     4C 4E 05 F1 | 	add	fp, #76
17330     A7 1E 02 FB | 	rdlong	local01, fp
17334     34 4E 85 F1 | 	sub	fp, #52
17338     A7 1E 62 FC | 	wrlong	local01, fp
1733c     18 4E 85 F1 | 	sub	fp, #24
17340     97 9E 48 FB | 	callpa	#(@LR__2192-@LR__2187)>>2,fcache_load_ptr_
17344                 | LR__2187
17344     18 4E 05 F1 | 	add	fp, #24
17348     A7 20 02 FB | 	rdlong	local02, fp
1734c     3C 4E 05 F1 | 	add	fp, #60
17350     A7 26 02 FB | 	rdlong	local05, fp
17354     54 4E 85 F1 | 	sub	fp, #84
17358     13 21 52 F2 | 	cmps	local02, local05 wc
1735c     20 01 90 3D |  if_ae	jmp	#LR__2193
17360     18 4E 05 F1 | 	add	fp, #24
17364     A7 28 02 FB | 	rdlong	local06, fp
17368     18 4E 85 F1 | 	sub	fp, #24
1736c     00 28 56 F2 | 	cmps	local06, #0 wc
17370     58 00 90 CD |  if_b	jmp	#LR__2188
17374     18 4E 05 F1 | 	add	fp, #24
17378     A7 28 02 FB | 	rdlong	local06, fp
1737c     40 4E 05 F1 | 	add	fp, #64
17380     A7 2A 02 FB | 	rdlong	local07, fp
17384     58 4E 85 F1 | 	sub	fp, #88
17388     15 29 52 F2 | 	cmps	local06, local07 wc
1738c     3C 00 90 3D |  if_ae	jmp	#LR__2188
17390     C0 4E 05 F1 | 	add	fp, #192
17394     A7 2C 02 FB | 	rdlong	local08, fp
17398     16 2B 02 F6 | 	mov	local07, local08
1739c     01 2A 06 F1 | 	add	local07, #1
173a0     A7 2A 62 FC | 	wrlong	local07, fp
173a4     A8 4E 85 F1 | 	sub	fp, #168
173a8     A7 2A 02 FB | 	rdlong	local07, fp
173ac     15 2F 02 F6 | 	mov	local09, local07
173b0     58 4E 05 F1 | 	add	fp, #88
173b4     A7 30 02 F6 | 	mov	local10, fp
173b8     A7 2E 02 F1 | 	add	local09, fp
173bc     17 33 C2 FA | 	rdbyte	local11, local09
173c0     16 33 42 FC | 	wrbyte	local11, local08
173c4     70 4E 85 F1 | 	sub	fp, #112
173c8     20 00 90 FD | 	jmp	#LR__2189
173cc                 | LR__2188
173cc     C0 4E 05 F1 | 	add	fp, #192
173d0     A7 2C 02 FB | 	rdlong	local08, fp
173d4     16 2F 02 F6 | 	mov	local09, local08
173d8     01 2E 06 F1 | 	add	local09, #1
173dc     A7 2E 62 FC | 	wrlong	local09, fp
173e0     C0 4E 85 F1 | 	sub	fp, #192
173e4     30 2E 06 F6 | 	mov	local09, #48
173e8     16 61 48 FC | 	wrbyte	#48, local08
173ec                 | LR__2189
173ec     18 4E 05 F1 | 	add	fp, #24
173f0     A7 28 02 FB | 	rdlong	local06, fp
173f4     38 4E 05 F1 | 	add	fp, #56
173f8     A7 34 02 FB | 	rdlong	local12, fp
173fc     50 4E 85 F1 | 	sub	fp, #80
17400     1A 29 0A F2 | 	cmp	local06, local12 wz
17404     5C 00 90 5D |  if_ne	jmp	#LR__2191
17408     10 4F 05 F1 | 	add	fp, #272
1740c     A7 2A 02 FB | 	rdlong	local07, fp
17410     10 4F 85 F1 | 	sub	fp, #272
17414     15 2F 0A F6 | 	mov	local09, local07 wz
17418     28 00 90 5D |  if_ne	jmp	#LR__2190
1741c     54 4E 05 F1 | 	add	fp, #84
17420     A7 32 02 FB | 	rdlong	local11, fp
17424     19 31 02 F6 | 	mov	local10, local11
17428     01 30 86 F1 | 	sub	local10, #1
1742c     3C 4E 85 F1 | 	sub	fp, #60
17430     A7 36 02 FB | 	rdlong	local13, fp
17434     18 4E 85 F1 | 	sub	fp, #24
17438     1B 39 02 F6 | 	mov	local14, local13
1743c     18 39 52 F2 | 	cmps	local14, local10 wc
17440     20 00 90 3D |  if_ae	jmp	#LR__2191
17444                 | LR__2190
17444     C0 4E 05 F1 | 	add	fp, #192
17448     A7 2C 02 FB | 	rdlong	local08, fp
1744c     16 35 02 F6 | 	mov	local12, local08
17450     01 34 06 F1 | 	add	local12, #1
17454     A7 34 62 FC | 	wrlong	local12, fp
17458     C0 4E 85 F1 | 	sub	fp, #192
1745c     2E 2E 06 F6 | 	mov	local09, #46
17460     16 5D 48 FC | 	wrbyte	#46, local08
17464                 | LR__2191
17464     18 4E 05 F1 | 	add	fp, #24
17468     A7 3A 02 FB | 	rdlong	local15, fp
1746c     1D 35 02 F6 | 	mov	local12, local15
17470     01 34 06 F1 | 	add	local12, #1
17474     A7 34 62 FC | 	wrlong	local12, fp
17478     18 4E 85 F1 | 	sub	fp, #24
1747c     C4 FE 9F FD | 	jmp	#LR__2187
17480                 | LR__2192
17480                 | LR__2193
17480     34 4E 05 F1 | 	add	fp, #52
17484     A7 1E 0A FB | 	rdlong	local01, fp wz
17488     34 4E 85 F1 | 	sub	fp, #52
1748c     A0 00 90 AD |  if_e	jmp	#LR__2197
17490     C0 4E 05 F1 | 	add	fp, #192
17494     A7 1E 02 FB | 	rdlong	local01, fp
17498     01 1E 86 F1 | 	sub	local01, #1
1749c     A7 1E 62 FC | 	wrlong	local01, fp
174a0     C0 4E 85 F1 | 	sub	fp, #192
174a4     97 26 48 FB | 	callpa	#(@LR__2195-@LR__2194)>>2,fcache_load_ptr_
174a8                 | LR__2194
174a8     C0 4E 05 F1 | 	add	fp, #192
174ac     A7 1E 02 FB | 	rdlong	local01, fp
174b0     04 4E 05 F1 | 	add	fp, #4
174b4     A7 22 02 FB | 	rdlong	local03, fp
174b8     C4 4E 85 F1 | 	sub	fp, #196
174bc     11 1F 5A F2 | 	cmps	local01, local03 wcz
174c0     30 00 90 ED |  if_be	jmp	#LR__2196
174c4     C0 4E 05 F1 | 	add	fp, #192
174c8     A7 28 02 FB | 	rdlong	local06, fp
174cc     C0 4E 85 F1 | 	sub	fp, #192
174d0     14 25 C2 FA | 	rdbyte	local04, local06
174d4     30 24 0E F2 | 	cmp	local04, #48 wz
174d8     18 00 90 5D |  if_ne	jmp	#LR__2196
174dc     C0 4E 05 F1 | 	add	fp, #192
174e0     A7 1E 02 FB | 	rdlong	local01, fp
174e4     01 1E 86 F1 | 	sub	local01, #1
174e8     A7 1E 62 FC | 	wrlong	local01, fp
174ec     C0 4E 85 F1 | 	sub	fp, #192
174f0     B4 FF 9F FD | 	jmp	#LR__2194
174f4                 | LR__2195
174f4                 | LR__2196
174f4     C0 4E 05 F1 | 	add	fp, #192
174f8     A7 20 02 FB | 	rdlong	local02, fp
174fc     C0 4E 85 F1 | 	sub	fp, #192
17500     10 1F C2 FA | 	rdbyte	local01, local02
17504     2E 1E 0E F2 | 	cmp	local01, #46 wz
17508     C0 4E 05 A1 |  if_e	add	fp, #192
1750c     A7 1E 02 AB |  if_e	rdlong	local01, fp
17510     01 1E 86 A1 |  if_e	sub	local01, #1
17514     A7 1E 62 AC |  if_e	wrlong	local01, fp
17518     C0 4E 85 A1 |  if_e	sub	fp, #192
1751c     C0 4E 05 F1 | 	add	fp, #192
17520     A7 22 02 FB | 	rdlong	local03, fp
17524     01 22 06 F1 | 	add	local03, #1
17528     A7 22 62 FC | 	wrlong	local03, fp
1752c     C0 4E 85 F1 | 	sub	fp, #192
17530                 | LR__2197
17530     24 4E 05 F1 | 	add	fp, #36
17534     A7 1E 0A FB | 	rdlong	local01, fp wz
17538     24 4E 85 F1 | 	sub	fp, #36
1753c     B4 00 90 AD |  if_e	jmp	#LR__2200
17540     C0 4E 05 F1 | 	add	fp, #192
17544     A7 20 02 FB | 	rdlong	local02, fp
17548     10 23 02 F6 | 	mov	local03, local02
1754c     01 22 06 F1 | 	add	local03, #1
17550     A7 22 62 FC | 	wrlong	local03, fp
17554     90 4E 85 F1 | 	sub	fp, #144
17558     A7 24 02 FB | 	rdlong	local04, fp
1755c     10 25 42 FC | 	wrbyte	local04, local02
17560     90 4E 05 F1 | 	add	fp, #144
17564     A7 20 02 FB | 	rdlong	local02, fp
17568     10 23 02 F6 | 	mov	local03, local02
1756c     01 22 06 F1 | 	add	local03, #1
17570     A7 22 62 FC | 	wrlong	local03, fp
17574     60 4E 85 F1 | 	sub	fp, #96
17578     A7 24 02 FB | 	rdlong	local04, fp
1757c     10 25 42 FC | 	wrbyte	local04, local02
17580     48 4E 85 F1 | 	sub	fp, #72
17584     A7 00 68 FC | 	wrlong	#0, fp
17588     18 4E 85 F1 | 	sub	fp, #24
1758c                 | LR__2198
1758c     18 4E 05 F1 | 	add	fp, #24
17590     A7 20 02 FB | 	rdlong	local02, fp
17594     44 4E 05 F1 | 	add	fp, #68
17598     A7 26 02 FB | 	rdlong	local05, fp
1759c     5C 4E 85 F1 | 	sub	fp, #92
175a0     13 21 52 F2 | 	cmps	local02, local05 wc
175a4     4C 00 90 3D |  if_ae	jmp	#LR__2199
175a8     C0 4E 05 F1 | 	add	fp, #192
175ac     A7 2C 02 FB | 	rdlong	local08, fp
175b0     16 35 02 F6 | 	mov	local12, local08
175b4     01 34 06 F1 | 	add	local12, #1
175b8     A7 34 62 FC | 	wrlong	local12, fp
175bc     A8 4E 85 F1 | 	sub	fp, #168
175c0     A7 2A 02 FB | 	rdlong	local07, fp
175c4     15 2F 02 F6 | 	mov	local09, local07
175c8     98 4E 05 F1 | 	add	fp, #152
175cc     A7 30 02 F6 | 	mov	local10, fp
175d0     A7 2E 02 F1 | 	add	local09, fp
175d4     17 33 C2 FA | 	rdbyte	local11, local09
175d8     16 33 42 FC | 	wrbyte	local11, local08
175dc     98 4E 85 F1 | 	sub	fp, #152
175e0     A7 34 02 FB | 	rdlong	local12, fp
175e4     01 34 06 F1 | 	add	local12, #1
175e8     A7 34 62 FC | 	wrlong	local12, fp
175ec     18 4E 85 F1 | 	sub	fp, #24
175f0     98 FF 9F FD | 	jmp	#LR__2198
175f4                 | LR__2199
175f4                 | LR__2200
175f4     C0 4E 05 F1 | 	add	fp, #192
175f8     A7 1E 02 FB | 	rdlong	local01, fp
175fc     C0 4E 85 F1 | 	sub	fp, #192
17600     0F 01 48 FC | 	wrbyte	#0, local01
17604                 | LR__2201
17604     6C 4E 05 F1 | 	add	fp, #108
17608     A7 1E 0A FB | 	rdlong	local01, fp wz
1760c     6C 4E 85 F1 | 	sub	fp, #108
17610     90 01 90 AD |  if_e	jmp	#LR__2212
17614     48 4E 05 F1 | 	add	fp, #72
17618     A7 22 0A FB | 	rdlong	local03, fp wz
1761c     48 4E 85 F1 | 	sub	fp, #72
17620     80 01 90 AD |  if_e	jmp	#LR__2212
17624     C4 4E 05 F1 | 	add	fp, #196
17628     A7 12 02 FB | 	rdlong	arg01, fp
1762c     C4 4E 85 F1 | 	sub	fp, #196
17630     09 3D 02 F6 | 	mov	local16, arg01
17634     97 06 48 FB | 	callpa	#(@LR__2203-@LR__2202)>>2,fcache_load_ptr_
17638                 | LR__2202
17638     1E FB C9 FA | 	rdbyte	result1, local16 wz
1763c     01 3C 06 51 |  if_ne	add	local16, #1
17640     F4 FF 9F 5D |  if_ne	jmp	#LR__2202
17644                 | LR__2203
17644     09 3D 82 F1 | 	sub	local16, arg01
17648     1E 25 02 F6 | 	mov	local04, local16
1764c     6C 4E 05 F1 | 	add	fp, #108
17650     A7 28 02 FB | 	rdlong	local06, fp
17654     6C 4E 85 F1 | 	sub	fp, #108
17658     14 25 5A F2 | 	cmps	local04, local06 wcz
1765c     44 01 90 ED |  if_be	jmp	#LR__2212
17660     C4 4E 05 F1 | 	add	fp, #196
17664     A7 1E 02 FB | 	rdlong	local01, fp
17668     5C 4E 05 F1 | 	add	fp, #92
1766c     A7 1E 62 FC | 	wrlong	local01, fp
17670     FC 4E 85 F1 | 	sub	fp, #252
17674     A7 1E 0A FB | 	rdlong	local01, fp wz
17678     24 4E 85 F1 | 	sub	fp, #36
1767c     20 00 90 AD |  if_e	jmp	#LR__2204
17680     B8 4E 05 F1 | 	add	fp, #184
17684     A7 00 68 FC | 	wrlong	#0, fp
17688     4C 4E 85 F1 | 	sub	fp, #76
1768c     A7 1E 02 FB | 	rdlong	local01, fp
17690     B0 4E 05 F1 | 	add	fp, #176
17694     A7 1E 62 FC | 	wrlong	local01, fp
17698     1C 4F 85 F1 | 	sub	fp, #284
1769c     24 00 90 FD | 	jmp	#LR__2205
176a0                 | LR__2204
176a0     6C 4E 05 F1 | 	add	fp, #108
176a4     A7 1E 02 FB | 	rdlong	local01, fp
176a8     01 1E 86 F1 | 	sub	local01, #1
176ac     4C 4E 05 F1 | 	add	fp, #76
176b0     A7 22 02 FB | 	rdlong	local03, fp
176b4     11 1F 82 F1 | 	sub	local01, local03
176b8     64 4E 05 F1 | 	add	fp, #100
176bc     A7 1E 62 FC | 	wrlong	local01, fp
176c0     1C 4F 85 F1 | 	sub	fp, #284
176c4                 | LR__2205
176c4     97 20 48 FB | 	callpa	#(@LR__2207-@LR__2206)>>2,fcache_load_ptr_
176c8                 | LR__2206
176c8     1C 4F 05 F1 | 	add	fp, #284
176cc     A7 1E 0A FB | 	rdlong	local01, fp wz
176d0     1C 4F 85 F1 | 	sub	fp, #284
176d4     30 00 90 AD |  if_e	jmp	#LR__2208
176d8     20 4F 05 F1 | 	add	fp, #288
176dc     A7 20 02 FB | 	rdlong	local02, fp
176e0     10 23 02 F6 | 	mov	local03, local02
176e4     01 22 06 F1 | 	add	local03, #1
176e8     A7 22 62 FC | 	wrlong	local03, fp
176ec     10 55 48 FC | 	wrbyte	#42, local02
176f0     04 4E 85 F1 | 	sub	fp, #4
176f4     A7 1E 02 FB | 	rdlong	local01, fp
176f8     01 1E 86 F1 | 	sub	local01, #1
176fc     A7 1E 62 FC | 	wrlong	local01, fp
17700     1C 4F 85 F1 | 	sub	fp, #284
17704     C0 FF 9F FD | 	jmp	#LR__2206
17708                 | LR__2207
17708                 | LR__2208
17708     B8 4E 05 F1 | 	add	fp, #184
1770c     A7 1E 0A FB | 	rdlong	local01, fp wz
17710     B8 4E 85 F1 | 	sub	fp, #184
17714     70 00 90 AD |  if_e	jmp	#LR__2211
17718     20 4F 05 F1 | 	add	fp, #288
1771c     A7 20 02 FB | 	rdlong	local02, fp
17720     10 23 02 F6 | 	mov	local03, local02
17724     01 22 06 F1 | 	add	local03, #1
17728     A7 22 62 FC | 	wrlong	local03, fp
1772c     10 5D 48 FC | 	wrbyte	#46, local02
17730     04 4E 85 F1 | 	sub	fp, #4
17734     A7 00 68 FC | 	wrlong	#0, fp
17738     1C 4F 85 F1 | 	sub	fp, #284
1773c                 | LR__2209
1773c     1C 4F 05 F1 | 	add	fp, #284
17740     A7 20 02 FB | 	rdlong	local02, fp
17744     64 4E 85 F1 | 	sub	fp, #100
17748     A7 26 02 FB | 	rdlong	local05, fp
1774c     B8 4E 85 F1 | 	sub	fp, #184
17750     13 21 52 F2 | 	cmps	local02, local05 wc
17754     30 00 90 3D |  if_ae	jmp	#LR__2210
17758     20 4F 05 F1 | 	add	fp, #288
1775c     A7 2C 02 FB | 	rdlong	local08, fp
17760     16 35 02 F6 | 	mov	local12, local08
17764     01 34 06 F1 | 	add	local12, #1
17768     A7 34 62 FC | 	wrlong	local12, fp
1776c     16 55 48 FC | 	wrbyte	#42, local08
17770     04 4E 85 F1 | 	sub	fp, #4
17774     A7 34 02 FB | 	rdlong	local12, fp
17778     01 34 06 F1 | 	add	local12, #1
1777c     A7 34 62 FC | 	wrlong	local12, fp
17780     1C 4F 85 F1 | 	sub	fp, #284
17784     B4 FF 9F FD | 	jmp	#LR__2209
17788                 | LR__2210
17788                 | LR__2211
17788     20 4F 05 F1 | 	add	fp, #288
1778c     A7 20 02 FB | 	rdlong	local02, fp
17790     10 23 02 F6 | 	mov	local03, local02
17794     01 22 06 F1 | 	add	local03, #1
17798     A7 22 62 FC | 	wrlong	local03, fp
1779c     20 4F 85 F1 | 	sub	fp, #288
177a0     10 01 48 FC | 	wrbyte	#0, local02
177a4                 | LR__2212
177a4     04 4E 05 F1 | 	add	fp, #4
177a8     A7 12 02 FB | 	rdlong	arg01, fp
177ac     04 4E 05 F1 | 	add	fp, #4
177b0     A7 14 02 FB | 	rdlong	arg02, fp
177b4     BC 4E 05 F1 | 	add	fp, #188
177b8     A7 16 02 FB | 	rdlong	arg03, fp
177bc     C4 4E 85 F1 | 	sub	fp, #196
177c0     C4 EE BF FD | 	call	#__system___fmtstr
177c4                 | LR__2213
177c4     A7 F0 03 F6 | 	mov	ptra, fp
177c8     B2 00 A0 FD | 	call	#popregs_
177cc                 | __system___fmtfloat_ret
177cc     2D 00 64 FD | 	ret
177d0                 | 
177d0                 | __system__Left_S
177d0     04 4A 05 F6 | 	mov	COUNT_, #4
177d4     A8 00 A0 FD | 	call	#pushregs_
177d8     09 1F 02 F6 | 	mov	local01, arg01
177dc     0A 21 02 F6 | 	mov	local02, arg02
177e0     01 20 56 F2 | 	cmps	local02, #1 wc
177e4     24 01 00 CF 
177e8     92 FB 05 C6 |  if_b	mov	result1, ##@LR__4073
177ec     5C 00 90 CD |  if_b	jmp	#LR__2223
177f0     0F 13 02 F6 | 	mov	arg01, local01
177f4     09 23 02 F6 | 	mov	local03, arg01
177f8     97 06 48 FB | 	callpa	#(@LR__2221-@LR__2220)>>2,fcache_load_ptr_
177fc                 | LR__2220
177fc     11 FB C9 FA | 	rdbyte	result1, local03 wz
17800     01 22 06 51 |  if_ne	add	local03, #1
17804     F4 FF 9F 5D |  if_ne	jmp	#LR__2220
17808                 | LR__2221
17808     09 23 82 F1 | 	sub	local03, arg01
1780c     11 FB 01 F6 | 	mov	result1, local03
17810     10 FB 59 F2 | 	cmps	result1, local02 wcz
17814     0F FB 01 E6 |  if_be	mov	result1, local01
17818     30 00 90 ED |  if_be	jmp	#LR__2223
1781c     10 13 02 F6 | 	mov	arg01, local02
17820     02 12 06 F1 | 	add	arg01, #2
17824     00 1A B0 FD | 	call	#__system___gc_alloc_managed
17828     FD 24 0A F6 | 	mov	local04, result1 wz
1782c     18 00 90 AD |  if_e	jmp	#LR__2222
17830     12 13 02 F6 | 	mov	arg01, local04
17834     0F 15 02 F6 | 	mov	arg02, local01
17838     10 17 02 F6 | 	mov	arg03, local02
1783c     A0 DE BF FD | 	call	#__system____builtin_memmove
17840     12 21 02 F1 | 	add	local02, local04
17844     10 01 48 FC | 	wrbyte	#0, local02
17848                 | LR__2222
17848     12 FB 01 F6 | 	mov	result1, local04
1784c                 | LR__2223
1784c     A7 F0 03 F6 | 	mov	ptra, fp
17850     B2 00 A0 FD | 	call	#popregs_
17854                 | __system__Left_S_ret
17854     2D 00 64 FD | 	ret
17858                 | 
17858                 | __system__Right_S
17858     05 4A 05 F6 | 	mov	COUNT_, #5
1785c     A8 00 A0 FD | 	call	#pushregs_
17860     09 1F 02 F6 | 	mov	local01, arg01
17864     0A 21 02 F6 | 	mov	local02, arg02
17868     01 20 56 F2 | 	cmps	local02, #1 wc
1786c     24 01 00 CF 
17870     93 FB 05 C6 |  if_b	mov	result1, ##@LR__4074
17874     64 00 90 CD |  if_b	jmp	#LR__2233
17878     0F 13 02 F6 | 	mov	arg01, local01
1787c     09 23 02 F6 | 	mov	local03, arg01
17880     97 06 48 FB | 	callpa	#(@LR__2231-@LR__2230)>>2,fcache_load_ptr_
17884                 | LR__2230
17884     11 FB C9 FA | 	rdbyte	result1, local03 wz
17888     01 22 06 51 |  if_ne	add	local03, #1
1788c     F4 FF 9F 5D |  if_ne	jmp	#LR__2230
17890                 | LR__2231
17890     09 23 82 F1 | 	sub	local03, arg01
17894     11 FB 01 F6 | 	mov	result1, local03
17898     FD 24 02 F6 | 	mov	local04, result1
1789c     10 25 5A F2 | 	cmps	local04, local02 wcz
178a0     0F FB 01 E6 |  if_be	mov	result1, local01
178a4     34 00 90 ED |  if_be	jmp	#LR__2233
178a8     10 13 02 F6 | 	mov	arg01, local02
178ac     02 12 06 F1 | 	add	arg01, #2
178b0     74 19 B0 FD | 	call	#__system___gc_alloc_managed
178b4     FD 26 0A F6 | 	mov	local05, result1 wz
178b8     1C 00 90 AD |  if_e	jmp	#LR__2232
178bc     10 25 82 F1 | 	sub	local04, local02
178c0     0F 25 02 F1 | 	add	local04, local01
178c4     01 20 06 F1 | 	add	local02, #1
178c8     13 13 02 F6 | 	mov	arg01, local05
178cc     12 15 02 F6 | 	mov	arg02, local04
178d0     10 17 02 F6 | 	mov	arg03, local02
178d4     08 DE BF FD | 	call	#__system____builtin_memmove
178d8                 | LR__2232
178d8     13 FB 01 F6 | 	mov	result1, local05
178dc                 | LR__2233
178dc     A7 F0 03 F6 | 	mov	ptra, fp
178e0     B2 00 A0 FD | 	call	#popregs_
178e4                 | __system__Right_S_ret
178e4     2D 00 64 FD | 	ret
178e8                 | 
178e8                 | __system__Mid_S
178e8     05 4A 05 F6 | 	mov	COUNT_, #5
178ec     A8 00 A0 FD | 	call	#pushregs_
178f0     09 1F 02 F6 | 	mov	local01, arg01
178f4     0A 21 02 F6 | 	mov	local02, arg02
178f8     01 16 56 F2 | 	cmps	arg03, #1 wc
178fc     24 01 00 CF 
17900     94 FB 05 C6 |  if_b	mov	result1, ##@LR__4075
17904     80 00 90 CD |  if_b	jmp	#LR__2243
17908     01 20 86 F1 | 	sub	local02, #1
1790c     00 20 56 F3 | 	fges	local02, #0 wc
17910     0F 13 02 F6 | 	mov	arg01, local01
17914     09 23 02 F6 | 	mov	local03, arg01
17918     97 06 48 FB | 	callpa	#(@LR__2241-@LR__2240)>>2,fcache_load_ptr_
1791c                 | LR__2240
1791c     11 FB C9 FA | 	rdbyte	result1, local03 wz
17920     01 22 06 51 |  if_ne	add	local03, #1
17924     F4 FF 9F 5D |  if_ne	jmp	#LR__2240
17928                 | LR__2241
17928     09 23 82 F1 | 	sub	local03, arg01
1792c     11 FB 01 F6 | 	mov	result1, local03
17930     FD 14 02 F6 | 	mov	arg02, result1
17934     10 15 52 F2 | 	cmps	arg02, local02 wc
17938     24 01 00 CF 
1793c     95 FB 05 C6 |  if_b	mov	result1, ##@LR__4076
17940     44 00 90 CD |  if_b	jmp	#LR__2243
17944     0A 25 02 F6 | 	mov	local04, arg02
17948     10 25 82 F1 | 	sub	local04, local02
1794c     0B 25 5A F2 | 	cmps	local04, arg03 wcz
17950     0B 25 02 16 |  if_a	mov	local04, arg03
17954     12 13 02 F6 | 	mov	arg01, local04
17958     02 12 06 F1 | 	add	arg01, #2
1795c     C8 18 B0 FD | 	call	#__system___gc_alloc_managed
17960     FD 26 0A F6 | 	mov	local05, result1 wz
17964     1C 00 90 AD |  if_e	jmp	#LR__2242
17968     0F 21 02 F1 | 	add	local02, local01
1796c     13 13 02 F6 | 	mov	arg01, local05
17970     10 15 02 F6 | 	mov	arg02, local02
17974     12 17 02 F6 | 	mov	arg03, local04
17978     64 DD BF FD | 	call	#__system____builtin_memmove
1797c     13 25 02 F1 | 	add	local04, local05
17980     12 01 48 FC | 	wrbyte	#0, local04
17984                 | LR__2242
17984     13 FB 01 F6 | 	mov	result1, local05
17988                 | LR__2243
17988     A7 F0 03 F6 | 	mov	ptra, fp
1798c     B2 00 A0 FD | 	call	#popregs_
17990                 | __system__Mid_S_ret
17990     2D 00 64 FD | 	ret
17994                 | 
17994                 | __system__Chr_S
17994     01 4A 05 F6 | 	mov	COUNT_, #1
17998     A8 00 A0 FD | 	call	#pushregs_
1799c     09 1F 02 F6 | 	mov	local01, arg01
179a0     03 12 06 F6 | 	mov	arg01, #3
179a4     80 18 B0 FD | 	call	#__system___gc_alloc_managed
179a8     00 FA 4D F2 | 	cmps	result1, #0 wz
179ac     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
179b0     01 FA 05 51 |  if_ne	add	result1, #1
179b4     FD 00 48 5C |  if_ne	wrbyte	#0, result1
179b8     01 FA 85 51 |  if_ne	sub	result1, #1
179bc     A7 F0 03 F6 | 	mov	ptra, fp
179c0     B2 00 A0 FD | 	call	#popregs_
179c4                 | __system__Chr_S_ret
179c4     2D 00 64 FD | 	ret
179c8                 | 
179c8                 | __system__Number_S
179c8     08 4A 05 F6 | 	mov	COUNT_, #8
179cc     A8 00 A0 FD | 	call	#pushregs_
179d0     09 1F 02 F6 | 	mov	local01, arg01
179d4     0A 21 0A F6 | 	mov	local02, arg02 wz
179d8     0B 23 02 F6 | 	mov	local03, arg03
179dc     3C 00 90 5D |  if_ne	jmp	#LR__2252
179e0     01 20 06 F6 | 	mov	local02, #1
179e4     11 25 02 F6 | 	mov	local04, local03
179e8     01 26 06 F6 | 	mov	local05, #1
179ec     97 16 48 FB | 	callpa	#(@LR__2251-@LR__2250)>>2,fcache_load_ptr_
179f0                 | LR__2250
179f0     00 28 06 F6 | 	mov	local06, #0
179f4     0F 25 1A F2 | 	cmp	local04, local01 wcz
179f8     01 28 66 E6 |  if_be	neg	local06, #1
179fc     12 27 12 F2 | 	cmp	local05, local04 wc
17a00     15 2B A2 F1 | 	subx	local07, local07
17a04     15 29 CA F7 | 	test	local06, local07 wz
17a08     11 25 02 5D |  if_ne	qmul	local04, local03
17a0c     12 27 02 56 |  if_ne	mov	local05, local04
17a10     01 20 06 51 |  if_ne	add	local02, #1
17a14     18 24 62 5D |  if_ne	getqx	local04
17a18     D4 FF 9F 5D |  if_ne	jmp	#LR__2250
17a1c                 | LR__2251
17a1c                 | LR__2252
17a1c     20 20 36 F3 | 	fle	local02, #32 wc
17a20     10 13 02 F6 | 	mov	arg01, local02
17a24     02 12 06 F1 | 	add	arg01, #2
17a28     FC 17 B0 FD | 	call	#__system___gc_alloc_managed
17a2c     FD 28 02 F6 | 	mov	local06, result1
17a30     10 2B 02 F6 | 	mov	local07, local02
17a34     14 2B 02 F1 | 	add	local07, local06
17a38     15 01 48 FC | 	wrbyte	#0, local07
17a3c     97 1A 48 FB | 	callpa	#(@LR__2254-@LR__2253)>>2,fcache_load_ptr_
17a40                 | LR__2253
17a40     01 20 16 F2 | 	cmp	local02, #1 wc
17a44     2C 00 90 CD |  if_b	jmp	#LR__2255
17a48     11 1F 12 FD | 	qdiv	local01, local03
17a4c     01 20 86 F1 | 	sub	local02, #1
17a50     10 2B 02 F6 | 	mov	local07, local02
17a54     14 2B 02 F1 | 	add	local07, local06
17a58     19 2C 62 FD | 	getqy	local08
17a5c     0A 2C 16 F2 | 	cmp	local08, #10 wc
17a60     30 2C 06 C1 |  if_b	add	local08, #48
17a64     37 2C 06 31 |  if_ae	add	local08, #55
17a68     15 2D 42 FC | 	wrbyte	local08, local07
17a6c     18 1E 62 FD | 	getqx	local01
17a70     CC FF 9F FD | 	jmp	#LR__2253
17a74                 | LR__2254
17a74                 | LR__2255
17a74     14 FB 01 F6 | 	mov	result1, local06
17a78     A7 F0 03 F6 | 	mov	ptra, fp
17a7c     B2 00 A0 FD | 	call	#popregs_
17a80                 | __system__Number_S_ret
17a80     2D 00 64 FD | 	ret
17a84                 | 
17a84                 | __system__LCase_S
17a84     07 4A 05 F6 | 	mov	COUNT_, #7
17a88     A8 00 A0 FD | 	call	#pushregs_
17a8c     09 1F 02 F6 | 	mov	local01, arg01
17a90     09 21 02 F6 | 	mov	local02, arg01
17a94     97 06 48 FB | 	callpa	#(@LR__2261-@LR__2260)>>2,fcache_load_ptr_
17a98                 | LR__2260
17a98     10 FB C9 FA | 	rdbyte	result1, local02 wz
17a9c     01 20 06 51 |  if_ne	add	local02, #1
17aa0     F4 FF 9F 5D |  if_ne	jmp	#LR__2260
17aa4                 | LR__2261
17aa4     09 21 82 F1 | 	sub	local02, arg01
17aa8     10 FB 01 F6 | 	mov	result1, local02
17aac     FD 20 0A F6 | 	mov	local02, result1 wz
17ab0     24 01 00 AF 
17ab4     96 FB 05 A6 |  if_e	mov	result1, ##@LR__4077
17ab8     7C 00 90 AD |  if_e	jmp	#LR__2267
17abc     10 13 02 F6 | 	mov	arg01, local02
17ac0     02 12 06 F1 | 	add	arg01, #2
17ac4     60 17 B0 FD | 	call	#__system___gc_alloc_managed
17ac8     FD 22 0A F6 | 	mov	local03, result1 wz
17acc     64 00 90 AD |  if_e	jmp	#LR__2266
17ad0     01 24 66 F6 | 	neg	local04, #1
17ad4     97 26 48 FB | 	callpa	#(@LR__2265-@LR__2262)>>2,fcache_load_ptr_
17ad8                 | LR__2262
17ad8     01 24 06 F1 | 	add	local04, #1
17adc     12 27 02 F6 | 	mov	local05, local04
17ae0     0F 27 02 F1 | 	add	local05, local01
17ae4     13 29 C2 FA | 	rdbyte	local06, local05
17ae8     41 28 56 F2 | 	cmps	local06, #65 wc
17aec     18 00 90 CD |  if_b	jmp	#LR__2263
17af0     5B 28 56 F2 | 	cmps	local06, #91 wc
17af4     12 2B 02 C6 |  if_b	mov	local07, local04
17af8     11 2B 02 C1 |  if_b	add	local07, local03
17afc     20 28 06 C1 |  if_b	add	local06, #32
17b00     15 29 42 CC |  if_b	wrbyte	local06, local07
17b04     0C 00 90 CD |  if_b	jmp	#LR__2264
17b08                 | LR__2263
17b08     12 2B 02 F6 | 	mov	local07, local04
17b0c     11 2B 02 F1 | 	add	local07, local03
17b10     15 29 42 FC | 	wrbyte	local06, local07
17b14                 | LR__2264
17b14     10 29 02 F6 | 	mov	local06, local02
17b18     01 28 86 F1 | 	sub	local06, #1
17b1c     14 25 0A F2 | 	cmp	local04, local06 wz
17b20     B4 FF 9F 5D |  if_ne	jmp	#LR__2262
17b24                 | LR__2265
17b24     11 21 02 F1 | 	add	local02, local03
17b28     10 01 48 FC | 	wrbyte	#0, local02
17b2c     11 FB 01 F6 | 	mov	result1, local03
17b30     04 00 90 FD | 	jmp	#LR__2267
17b34                 | LR__2266
17b34     11 FB 01 F6 | 	mov	result1, local03
17b38                 | LR__2267
17b38     A7 F0 03 F6 | 	mov	ptra, fp
17b3c     B2 00 A0 FD | 	call	#popregs_
17b40                 | __system__LCase_S_ret
17b40     2D 00 64 FD | 	ret
17b44                 | 
17b44                 | __system__LTrim_S
17b44     05 4A 05 F6 | 	mov	COUNT_, #5
17b48     A8 00 A0 FD | 	call	#pushregs_
17b4c     09 1F 02 F6 | 	mov	local01, arg01
17b50     09 21 02 F6 | 	mov	local02, arg01
17b54     97 06 48 FB | 	callpa	#(@LR__2271-@LR__2270)>>2,fcache_load_ptr_
17b58                 | LR__2270
17b58     10 FB C9 FA | 	rdbyte	result1, local02 wz
17b5c     01 20 06 51 |  if_ne	add	local02, #1
17b60     F4 FF 9F 5D |  if_ne	jmp	#LR__2270
17b64                 | LR__2271
17b64     09 21 82 F1 | 	sub	local02, arg01
17b68     10 FB 01 F6 | 	mov	result1, local02
17b6c     FD 20 0A F6 | 	mov	local02, result1 wz
17b70     24 01 00 AF 
17b74     97 FB 05 A6 |  if_e	mov	result1, ##@LR__4078
17b78     7C 00 90 AD |  if_e	jmp	#LR__2276
17b7c     00 22 06 F6 | 	mov	local03, #0
17b80     10 25 02 F6 | 	mov	local04, local02
17b84                 | LR__2272
17b84     12 23 52 F2 | 	cmps	local03, local04 wc
17b88     68 00 90 3D |  if_ae	jmp	#LR__2275
17b8c     11 17 02 F6 | 	mov	arg03, local03
17b90     0F 17 02 F1 | 	add	arg03, local01
17b94     0B 17 C2 FA | 	rdbyte	arg03, arg03
17b98     20 16 0E F2 | 	cmp	arg03, #32 wz
17b9c     4C 00 90 AD |  if_e	jmp	#LR__2274
17ba0     10 13 02 F6 | 	mov	arg01, local02
17ba4     11 13 82 F1 | 	sub	arg01, local03
17ba8     02 12 06 F1 | 	add	arg01, #2
17bac     78 16 B0 FD | 	call	#__system___gc_alloc_managed
17bb0     FD 26 0A F6 | 	mov	local05, result1 wz
17bb4     2C 00 90 AD |  if_e	jmp	#LR__2273
17bb8     11 15 02 F6 | 	mov	arg02, local03
17bbc     0F 15 02 F1 | 	add	arg02, local01
17bc0     10 17 02 F6 | 	mov	arg03, local02
17bc4     11 17 82 F1 | 	sub	arg03, local03
17bc8     13 13 02 F6 | 	mov	arg01, local05
17bcc     10 DB BF FD | 	call	#__system____builtin_memmove
17bd0     11 21 82 F1 | 	sub	local02, local03
17bd4     13 21 02 F1 | 	add	local02, local05
17bd8     10 01 48 FC | 	wrbyte	#0, local02
17bdc     13 FB 01 F6 | 	mov	result1, local05
17be0     14 00 90 FD | 	jmp	#LR__2276
17be4                 | LR__2273
17be4     13 FB 01 F6 | 	mov	result1, local05
17be8     0C 00 90 FD | 	jmp	#LR__2276
17bec                 | LR__2274
17bec     01 22 06 F1 | 	add	local03, #1
17bf0     90 FF 9F FD | 	jmp	#LR__2272
17bf4                 | LR__2275
17bf4     0F FB 01 F6 | 	mov	result1, local01
17bf8                 | LR__2276
17bf8     A7 F0 03 F6 | 	mov	ptra, fp
17bfc     B2 00 A0 FD | 	call	#popregs_
17c00                 | __system__LTrim_S_ret
17c00     2D 00 64 FD | 	ret
17c04                 | 
17c04                 | __system__RTrim_S
17c04     04 4A 05 F6 | 	mov	COUNT_, #4
17c08     A8 00 A0 FD | 	call	#pushregs_
17c0c     09 1F 02 F6 | 	mov	local01, arg01
17c10     09 21 02 F6 | 	mov	local02, arg01
17c14     97 06 48 FB | 	callpa	#(@LR__2281-@LR__2280)>>2,fcache_load_ptr_
17c18                 | LR__2280
17c18     10 FB C9 FA | 	rdbyte	result1, local02 wz
17c1c     01 20 06 51 |  if_ne	add	local02, #1
17c20     F4 FF 9F 5D |  if_ne	jmp	#LR__2280
17c24                 | LR__2281
17c24     09 21 82 F1 | 	sub	local02, arg01
17c28     10 FB 01 F6 | 	mov	result1, local02
17c2c     FD 20 0A F6 | 	mov	local02, result1 wz
17c30     24 01 00 AF 
17c34     98 FB 05 A6 |  if_e	mov	result1, ##@LR__4079
17c38     74 00 90 AD |  if_e	jmp	#LR__2285
17c3c     10 23 02 F6 | 	mov	local03, local02
17c40     01 22 86 F1 | 	sub	local03, #1
17c44                 | LR__2282
17c44     11 15 02 F6 | 	mov	arg02, local03
17c48     0F 15 02 F1 | 	add	arg02, local01
17c4c     0A 21 C2 FA | 	rdbyte	local02, arg02
17c50     20 20 0E F2 | 	cmp	local02, #32 wz
17c54     44 00 90 AD |  if_e	jmp	#LR__2284
17c58     11 13 02 F6 | 	mov	arg01, local03
17c5c     02 12 06 F1 | 	add	arg01, #2
17c60     C4 15 B0 FD | 	call	#__system___gc_alloc_managed
17c64     FD 24 0A F6 | 	mov	local04, result1 wz
17c68     28 00 90 AD |  if_e	jmp	#LR__2283
17c6c     11 17 02 F6 | 	mov	arg03, local03
17c70     01 16 06 F1 | 	add	arg03, #1
17c74     12 13 02 F6 | 	mov	arg01, local04
17c78     0F 15 02 F6 | 	mov	arg02, local01
17c7c     60 DA BF FD | 	call	#__system____builtin_memmove
17c80     01 22 06 F1 | 	add	local03, #1
17c84     12 23 02 F1 | 	add	local03, local04
17c88     11 01 48 FC | 	wrbyte	#0, local03
17c8c     12 FB 01 F6 | 	mov	result1, local04
17c90     1C 00 90 FD | 	jmp	#LR__2285
17c94                 | LR__2283
17c94     12 FB 01 F6 | 	mov	result1, local04
17c98     14 00 90 FD | 	jmp	#LR__2285
17c9c                 | LR__2284
17c9c     01 22 86 F1 | 	sub	local03, #1
17ca0     00 22 56 F2 | 	cmps	local03, #0 wc
17ca4     9C FF 9F 3D |  if_ae	jmp	#LR__2282
17ca8     24 01 00 FF 
17cac     99 FB 05 F6 | 	mov	result1, ##@LR__4080
17cb0                 | LR__2285
17cb0     A7 F0 03 F6 | 	mov	ptra, fp
17cb4     B2 00 A0 FD | 	call	#popregs_
17cb8                 | __system__RTrim_S_ret
17cb8     2D 00 64 FD | 	ret
17cbc                 | 
17cbc                 | __system__Instr
17cbc     07 4A 05 F6 | 	mov	COUNT_, #7
17cc0     A8 00 A0 FD | 	call	#pushregs_
17cc4     09 1F 02 F6 | 	mov	local01, arg01
17cc8     0A 21 02 F6 | 	mov	local02, arg02
17ccc     0B 23 02 F6 | 	mov	local03, arg03
17cd0     11 13 02 F6 | 	mov	arg01, local03
17cd4     09 25 02 F6 | 	mov	local04, arg01
17cd8     97 06 48 FB | 	callpa	#(@LR__2291-@LR__2290)>>2,fcache_load_ptr_
17cdc                 | LR__2290
17cdc     12 FB C9 FA | 	rdbyte	result1, local04 wz
17ce0     01 24 06 51 |  if_ne	add	local04, #1
17ce4     F4 FF 9F 5D |  if_ne	jmp	#LR__2290
17ce8                 | LR__2291
17ce8     09 25 82 F1 | 	sub	local04, arg01
17cec     12 27 02 F6 | 	mov	local05, local04
17cf0     10 13 02 F6 | 	mov	arg01, local02
17cf4     09 25 02 F6 | 	mov	local04, arg01
17cf8     97 06 48 FB | 	callpa	#(@LR__2293-@LR__2292)>>2,fcache_load_ptr_
17cfc                 | LR__2292
17cfc     12 FB C9 FA | 	rdbyte	result1, local04 wz
17d00     01 24 06 51 |  if_ne	add	local04, #1
17d04     F4 FF 9F 5D |  if_ne	jmp	#LR__2292
17d08                 | LR__2293
17d08     09 25 82 F1 | 	sub	local04, arg01
17d0c     12 FB 01 F6 | 	mov	result1, local04
17d10     FD 18 0A F6 | 	mov	arg04, result1 wz
17d14     00 FA 05 A6 |  if_e	mov	result1, #0
17d18     98 00 90 AD |  if_e	jmp	#LR__2297
17d1c     00 26 0E F2 | 	cmp	local05, #0 wz
17d20     00 FA 05 A6 |  if_e	mov	result1, #0
17d24     8C 00 90 AD |  if_e	jmp	#LR__2297
17d28     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
17d2c     00 FA 05 16 |  if_a	mov	result1, #0
17d30     80 00 90 1D |  if_a	jmp	#LR__2297
17d34     01 1E 56 F2 | 	cmps	local01, #1 wc
17d38     01 1E 06 C6 |  if_b	mov	local01, #1
17d3c     11 29 C2 FA | 	rdbyte	local06, local03
17d40     01 26 0E F2 | 	cmp	local05, #1 wz
17d44     18 00 90 5D |  if_ne	jmp	#LR__2294
17d48     10 13 02 F6 | 	mov	arg01, local02
17d4c     14 15 02 F6 | 	mov	arg02, local06
17d50     0F 17 02 F6 | 	mov	arg03, local01
17d54     00 18 06 F6 | 	mov	arg04, #0
17d58     64 30 B0 FD | 	call	#__system____ScanForChar
17d5c     54 00 90 FD | 	jmp	#LR__2297
17d60                 | LR__2294
17d60     0F 2B 02 F6 | 	mov	local07, local01
17d64                 | LR__2295
17d64     10 13 02 F6 | 	mov	arg01, local02
17d68     14 15 02 F6 | 	mov	arg02, local06
17d6c     15 17 02 F6 | 	mov	arg03, local07
17d70     00 18 06 F6 | 	mov	arg04, #0
17d74     48 30 B0 FD | 	call	#__system____ScanForChar
17d78     FD 2A 0A F6 | 	mov	local07, result1 wz
17d7c     30 00 90 AD |  if_e	jmp	#LR__2296
17d80     13 17 02 F6 | 	mov	arg03, local05
17d84     10 13 02 F6 | 	mov	arg01, local02
17d88     15 15 02 F6 | 	mov	arg02, local07
17d8c     58 FB BF FD | 	call	#__system__Mid_S
17d90     FD 12 02 F6 | 	mov	arg01, result1
17d94     11 15 02 F6 | 	mov	arg02, local03
17d98     4C DA BF FD | 	call	#__system___string_cmp
17d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
17da0     15 FB 01 A6 |  if_e	mov	result1, local07
17da4     0C 00 90 AD |  if_e	jmp	#LR__2297
17da8     13 2B 02 F1 | 	add	local07, local05
17dac     B4 FF 9F FD | 	jmp	#LR__2295
17db0                 | LR__2296
17db0     00 FA 05 F6 | 	mov	result1, #0
17db4                 | LR__2297
17db4     A7 F0 03 F6 | 	mov	ptra, fp
17db8     B2 00 A0 FD | 	call	#popregs_
17dbc                 | __system__Instr_ret
17dbc     2D 00 64 FD | 	ret
17dc0                 | 
17dc0                 | __system___strerror
17dc0     00 12 56 F2 | 	cmps	arg01, #0 wc
17dc4     08 00 90 CD |  if_b	jmp	#LR__2300
17dc8     1A 12 56 F2 | 	cmps	arg01, #26 wc
17dcc     04 00 90 CD |  if_b	jmp	#LR__2301
17dd0                 | LR__2300
17dd0     19 12 06 F6 | 	mov	arg01, #25
17dd4                 | LR__2301
17dd4     02 12 66 F0 | 	shl	arg01, #2
17dd8     01 00 00 FF 
17ddc     D8 E8 05 F1 | 	add	ptr___system__dat__, ##728
17de0     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
17de4     09 FB 01 FB | 	rdlong	result1, arg01
17de8     01 00 00 FF 
17dec     D8 E8 85 F1 | 	sub	ptr___system__dat__, ##728
17df0                 | __system___strerror_ret
17df0     2D 00 64 FD | 	ret
17df4                 | 
17df4                 | __system___int64_shl
17df4     20 16 CE F7 | 	test	arg03, #32 wz
17df8     09 15 02 56 |  if_ne	mov	arg02, arg01
17dfc     00 12 06 56 |  if_ne	mov	arg01, #0
17e00     1F 16 CE F7 | 	test	arg03, #31 wz
17e04     18 00 90 AD |  if_e	jmp	#LR__2310
17e08     0B 15 62 F0 | 	shl	arg02, arg03
17e0c     09 FB 01 F6 | 	mov	result1, arg01
17e10     0B FD 61 F6 | 	neg	result2, arg03
17e14     FE FA 41 F0 | 	shr	result1, result2
17e18     FD 14 42 F5 | 	or	arg02, result1
17e1c     0B 13 62 F0 | 	shl	arg01, arg03
17e20                 | LR__2310
17e20     0A FD 01 F6 | 	mov	result2, arg02
17e24     09 FB 01 F6 | 	mov	result1, arg01
17e28                 | __system___int64_shl_ret
17e28     2D 00 64 FD | 	ret
17e2c                 | 
17e2c                 | __system___usepins
17e2c     14 E8 05 F1 | 	add	ptr___system__dat__, #20
17e30     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
17e34     14 E8 85 F1 | 	sub	ptr___system__dat__, #20
17e38     00 13 CA F7 | 	test	arg01, _var01 wz
17e3c     18 E8 05 A1 |  if_e	add	ptr___system__dat__, #24
17e40     F4 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
17e44     18 E8 85 A1 |  if_e	sub	ptr___system__dat__, #24
17e48     01 15 CA A7 |  if_e	test	arg02, _var02 wz
17e4c     00 FA 05 56 |  if_ne	mov	result1, #0
17e50     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
17e54     14 E8 05 F1 | 	add	ptr___system__dat__, #20
17e58     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
17e5c     09 03 42 F5 | 	or	_var02, arg01
17e60     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
17e64     04 E8 05 F1 | 	add	ptr___system__dat__, #4
17e68     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
17e6c     0A 03 42 F5 | 	or	_var02, arg02
17e70     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
17e74     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
17e78     01 FA 65 F6 | 	neg	result1, #1
17e7c                 | __system___usepins_ret
17e7c     2D 00 64 FD | 	ret
17e80                 | 
17e80                 | __system___freepins
17e80     14 E8 05 F1 | 	add	ptr___system__dat__, #20
17e84     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
17e88     09 01 22 F5 | 	andn	_var01, arg01
17e8c     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
17e90     04 E8 05 F1 | 	add	ptr___system__dat__, #4
17e94     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
17e98     0A 01 22 F5 | 	andn	_var01, arg02
17e9c     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
17ea0     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
17ea4                 | __system___freepins_ret
17ea4     2D 00 64 FD | 	ret
17ea8                 | 
17ea8                 | __system___float_fromuns
17ea8     09 17 0A F6 | 	mov	arg03, arg01 wz
17eac     0B FB 01 A6 |  if_e	mov	result1, arg03
17eb0     24 00 90 AD |  if_e	jmp	#LR__2320
17eb4     0B 15 92 F7 | 	encod	arg02, arg03 wc
17eb8     01 14 06 C1 |  if_b	add	arg02, #1
17ebc     01 14 86 F1 | 	sub	arg02, #1
17ec0     1F 12 06 F6 | 	mov	arg01, #31
17ec4     0A 13 82 F1 | 	sub	arg01, arg02
17ec8     09 17 62 F0 | 	shl	arg03, arg01
17ecc     02 16 46 F0 | 	shr	arg03, #2
17ed0     00 12 06 F6 | 	mov	arg01, #0
17ed4     74 08 B0 FD | 	call	#__system___float_Pack
17ed8                 | LR__2320
17ed8                 | __system___float_fromuns_ret
17ed8     2D 00 64 FD | 	ret
17edc                 | 
17edc                 | __system___float_add
17edc     0F 4A 05 F6 | 	mov	COUNT_, #15
17ee0     A8 00 A0 FD | 	call	#pushregs_
17ee4     09 1F 02 F6 | 	mov	local01, arg01
17ee8     0A 21 02 F6 | 	mov	local02, arg02
17eec     00 22 06 F6 | 	mov	local03, #0
17ef0     0F 25 02 F6 | 	mov	local04, local01
17ef4     12 27 02 F6 | 	mov	local05, local04
17ef8     16 26 46 F7 | 	zerox	local05, #22
17efc     12 29 02 F6 | 	mov	local06, local04
17f00     01 28 66 F0 | 	shl	local06, #1
17f04     18 28 46 F0 | 	shr	local06, #24
17f08     1F 24 46 F0 | 	shr	local04, #31
17f0c     10 13 02 F6 | 	mov	arg01, local02
17f10     09 FB 01 F6 | 	mov	result1, arg01
17f14     FD 2A 02 F6 | 	mov	local07, result1
17f18     15 2D 02 F6 | 	mov	local08, local07
17f1c     16 2C 46 F7 | 	zerox	local08, #22
17f20     15 2F 02 F6 | 	mov	local09, local07
17f24     01 2E 66 F0 | 	shl	local09, #1
17f28     18 2E 46 F0 | 	shr	local09, #24
17f2c     17 31 02 F6 | 	mov	local10, local09
17f30     1F 2A 46 F0 | 	shr	local07, #31
17f34     00 32 06 F6 | 	mov	local11, #0
17f38     00 34 06 F6 | 	mov	local12, #0
17f3c     18 29 12 F2 | 	cmp	local06, local10 wc
17f40     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
17f44     2C 00 90 1D |  if_a	jmp	#LR__2330
17f48     16 27 12 32 |  if_ae	cmp	local05, local08 wc
17f4c     24 00 90 3D |  if_ae	jmp	#LR__2330
17f50     13 37 02 F6 | 	mov	local13, local05
17f54     16 27 02 F6 | 	mov	local05, local08
17f58     1B 2D 02 F6 | 	mov	local08, local13
17f5c     14 37 02 F6 | 	mov	local13, local06
17f60     18 29 02 F6 | 	mov	local06, local10
17f64     1B 31 02 F6 | 	mov	local10, local13
17f68     12 37 02 F6 | 	mov	local13, local04
17f6c     15 25 02 F6 | 	mov	local04, local07
17f70     1B 2B 02 F6 | 	mov	local07, local13
17f74                 | LR__2330
17f74     FF 28 0E F2 | 	cmp	local06, #255 wz
17f78     70 01 90 AD |  if_e	jmp	#LR__2345
17f7c     00 28 0E F2 | 	cmp	local06, #0 wz
17f80     AC 01 90 AD |  if_e	jmp	#LR__2347
17f84     17 26 26 F4 | 	bith	local05, #23
17f88                 | LR__2331
17f88     00 30 0E F2 | 	cmp	local10, #0 wz
17f8c     F0 01 90 AD |  if_e	jmp	#LR__2351
17f90     17 2C 26 F4 | 	bith	local08, #23
17f94                 | LR__2332
17f94     7F 28 86 F1 | 	sub	local06, #127
17f98     7F 30 86 F1 | 	sub	local10, #127
17f9c     14 39 02 F6 | 	mov	local14, local06
17fa0     18 39 82 F1 | 	sub	local14, local10
17fa4     97 14 48 FB | 	callpa	#(@LR__2334-@LR__2333)>>2,fcache_load_ptr_
17fa8                 | LR__2333
17fa8     20 38 56 F2 | 	cmps	local14, #32 wc
17fac     20 00 90 CD |  if_b	jmp	#LR__2335
17fb0     16 2F 02 F6 | 	mov	local09, local08
17fb4     00 32 0E F2 | 	cmp	local11, #0 wz
17fb8     6F 32 62 FD | 	wrnz	local11
17fbc     19 2F 42 F5 | 	or	local09, local11
17fc0     17 33 02 F6 | 	mov	local11, local09
17fc4     00 2C 06 F6 | 	mov	local08, #0
17fc8     20 38 86 F1 | 	sub	local14, #32
17fcc     D8 FF 9F FD | 	jmp	#LR__2333
17fd0                 | LR__2334
17fd0                 | LR__2335
17fd0     00 38 0E F2 | 	cmp	local14, #0 wz
17fd4     38 00 90 AD |  if_e	jmp	#LR__2336
17fd8     16 37 02 F6 | 	mov	local13, local08
17fdc     20 30 06 F6 | 	mov	local10, #32
17fe0     1C 31 82 F1 | 	sub	local10, local14
17fe4     18 37 62 F0 | 	shl	local13, local10
17fe8     19 31 02 F6 | 	mov	local10, local11
17fec     20 2E 06 F6 | 	mov	local09, #32
17ff0     1C 2F 82 F1 | 	sub	local09, local14
17ff4     17 31 6A F0 | 	shl	local10, local09 wz
17ff8     1C 33 42 F0 | 	shr	local11, local14
17ffc     1C 2D 42 F0 | 	shr	local08, local14
18000     1B 33 42 F5 | 	or	local11, local13
18004     00 3A 06 F6 | 	mov	local15, #0
18008     01 3A 06 56 |  if_ne	mov	local15, #1
1800c     1D 33 42 F5 | 	or	local11, local15
18010                 | LR__2336
18010     12 3B 02 F6 | 	mov	local15, local04
18014     15 3B 62 F5 | 	xor	local15, local07
18018     01 3A CE F7 | 	test	local15, #1 wz
1801c     18 00 90 AD |  if_e	jmp	#LR__2337
18020     16 2D 22 F6 | 	not	local08, local08
18024     19 33 22 F6 | 	not	local11, local11
18028     01 32 0E F1 | 	add	local11, #1 wz
1802c     00 3A 06 F6 | 	mov	local15, #0
18030     01 3A 06 A6 |  if_e	mov	local15, #1
18034     1D 2D 02 F1 | 	add	local08, local15
18038                 | LR__2337
18038     19 35 12 F1 | 	add	local12, local11 wc
1803c     16 27 22 F1 | 	addx	local05, local08
18040     00 26 56 F2 | 	cmps	local05, #0 wc
18044     1C 00 90 3D |  if_ae	jmp	#LR__2338
18048     01 24 66 F5 | 	xor	local04, #1
1804c     13 27 22 F6 | 	not	local05, local05
18050     1A 35 22 F6 | 	not	local12, local12
18054     01 34 0E F1 | 	add	local12, #1 wz
18058     00 3A 06 F6 | 	mov	local15, #0
1805c     01 3A 06 A6 |  if_e	mov	local15, #1
18060     1D 27 02 F1 | 	add	local05, local15
18064                 | LR__2338
18064     00 80 00 FF 
18068     00 26 16 F2 | 	cmp	local05, ##16777216 wc
1806c     28 00 90 CD |  if_b	jmp	#LR__2339
18070     01 28 06 F1 | 	add	local06, #1
18074     1A 39 02 F6 | 	mov	local14, local12
18078     01 38 06 F5 | 	and	local14, #1
1807c     01 34 46 F0 | 	shr	local12, #1
18080     13 3B 02 F6 | 	mov	local15, local05
18084     1F 3A 66 F0 | 	shl	local15, #31
18088     1D 35 42 F5 | 	or	local12, local15
1808c     1C 35 42 F5 | 	or	local12, local14
18090     01 26 46 F0 | 	shr	local05, #1
18094     3C 00 90 FD | 	jmp	#LR__2344
18098                 | LR__2339
18098     00 40 00 FF 
1809c     00 26 16 F2 | 	cmp	local05, ##8388608 wc
180a0     30 00 90 3D |  if_ae	jmp	#LR__2343
180a4     00 26 0E F2 | 	cmp	local05, #0 wz
180a8     00 34 0E A2 |  if_e	cmp	local12, #0 wz
180ac     08 24 46 A5 |  if_e	or	local04, #8
180b0     01 24 26 A5 |  if_e	andn	local04, #1
180b4     1C 00 90 AD |  if_e	jmp	#LR__2342
180b8                 | LR__2340
180b8     00 40 00 FF 
180bc     00 26 16 F2 | 	cmp	local05, ##8388608 wc
180c0     10 00 90 3D |  if_ae	jmp	#LR__2341
180c4     1A 35 12 F1 | 	add	local12, local12 wc
180c8     13 27 22 F1 | 	addx	local05, local05
180cc     01 28 86 F1 | 	sub	local06, #1
180d0     E4 FF 9F FD | 	jmp	#LR__2340
180d4                 | LR__2341
180d4                 | LR__2342
180d4                 | LR__2343
180d4                 | LR__2344
180d4     13 13 02 F6 | 	mov	arg01, local05
180d8     1A 15 02 F6 | 	mov	arg02, local12
180dc     14 17 02 F6 | 	mov	arg03, local06
180e0     12 19 02 F6 | 	mov	arg04, local04
180e4     1C 31 B0 FD | 	call	#__system__pack_0435
180e8     DC 00 90 FD | 	jmp	#LR__2355
180ec                 | LR__2345
180ec     FF 30 0E F2 | 	cmp	local10, #255 wz
180f0     10 00 90 5D |  if_ne	jmp	#LR__2346
180f4     12 2B 0A F2 | 	cmp	local07, local04 wz
180f8     00 F8 3F 5F 
180fc     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
18100     C4 00 90 5D |  if_ne	jmp	#LR__2355
18104                 | LR__2346
18104     00 26 0E F2 | 	cmp	local05, #0 wz
18108     00 F8 3F 5F 
1810c     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
18110     B4 00 90 5D |  if_ne	jmp	#LR__2355
18114     1A 15 02 F6 | 	mov	arg02, local12
18118     14 17 02 F6 | 	mov	arg03, local06
1811c     12 19 02 F6 | 	mov	arg04, local04
18120     02 18 46 F5 | 	or	arg04, #2
18124     13 13 02 F6 | 	mov	arg01, local05
18128     D8 30 B0 FD | 	call	#__system__pack_0435
1812c     98 00 90 FD | 	jmp	#LR__2355
18130                 | LR__2347
18130     00 26 0E F2 | 	cmp	local05, #0 wz
18134     28 00 90 AD |  if_e	jmp	#LR__2350
18138     01 26 66 F0 | 	shl	local05, #1
1813c     97 0E 48 FB | 	callpa	#(@LR__2349-@LR__2348)>>2,fcache_load_ptr_
18140                 | LR__2348
18140     00 40 00 FF 
18144     00 26 16 F2 | 	cmp	local05, ##8388608 wc
18148     14 3B 02 C6 |  if_b	mov	local15, local06
1814c     01 3A 86 C1 |  if_b	sub	local15, #1
18150     1D 29 02 C6 |  if_b	mov	local06, local15
18154     01 26 66 C0 |  if_b	shl	local05, #1
18158     E4 FF 9F CD |  if_b	jmp	#LR__2348
1815c                 | LR__2349
1815c     28 FE 9F FD | 	jmp	#LR__2331
18160                 | LR__2350
18160     15 25 02 F5 | 	and	local04, local07
18164     12 19 02 F6 | 	mov	arg04, local04
18168     08 18 46 F5 | 	or	arg04, #8
1816c     00 12 06 F6 | 	mov	arg01, #0
18170     00 14 06 F6 | 	mov	arg02, #0
18174     00 16 06 F6 | 	mov	arg03, #0
18178     88 30 B0 FD | 	call	#__system__pack_0435
1817c     48 00 90 FD | 	jmp	#LR__2355
18180                 | LR__2351
18180     00 2C 0E F2 | 	cmp	local08, #0 wz
18184     28 00 90 AD |  if_e	jmp	#LR__2354
18188     01 2C 66 F0 | 	shl	local08, #1
1818c     97 0E 48 FB | 	callpa	#(@LR__2353-@LR__2352)>>2,fcache_load_ptr_
18190                 | LR__2352
18190     00 40 00 FF 
18194     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
18198     18 3B 02 C6 |  if_b	mov	local15, local10
1819c     01 3A 86 C1 |  if_b	sub	local15, #1
181a0     1D 31 02 C6 |  if_b	mov	local10, local15
181a4     01 2C 66 C0 |  if_b	shl	local08, #1
181a8     E4 FF 9F CD |  if_b	jmp	#LR__2352
181ac                 | LR__2353
181ac     E4 FD 9F FD | 	jmp	#LR__2332
181b0                 | LR__2354
181b0     7F 28 86 F1 | 	sub	local06, #127
181b4     13 13 02 F6 | 	mov	arg01, local05
181b8     1A 15 02 F6 | 	mov	arg02, local12
181bc     14 17 02 F6 | 	mov	arg03, local06
181c0     12 19 02 F6 | 	mov	arg04, local04
181c4     3C 30 B0 FD | 	call	#__system__pack_0435
181c8                 | LR__2355
181c8     A7 F0 03 F6 | 	mov	ptra, fp
181cc     B2 00 A0 FD | 	call	#popregs_
181d0                 | __system___float_add_ret
181d0     2D 00 64 FD | 	ret
181d4                 | 
181d4                 | __system___float_mul
181d4     0B 4A 05 F6 | 	mov	COUNT_, #11
181d8     A8 00 A0 FD | 	call	#pushregs_
181dc     09 1F 02 F6 | 	mov	local01, arg01
181e0     0A 21 02 F6 | 	mov	local02, arg02
181e4     0F 23 02 F6 | 	mov	local03, local01
181e8     11 25 02 F6 | 	mov	local04, local03
181ec     16 24 46 F7 | 	zerox	local04, #22
181f0     11 27 02 F6 | 	mov	local05, local03
181f4     01 26 66 F0 | 	shl	local05, #1
181f8     18 26 46 F0 | 	shr	local05, #24
181fc     1F 22 46 F0 | 	shr	local03, #31
18200     10 FB 01 F6 | 	mov	result1, local02
18204     FD 28 02 F6 | 	mov	local06, result1
18208     14 2B 02 F6 | 	mov	local07, local06
1820c     16 2A 46 F7 | 	zerox	local07, #22
18210     14 2D 02 F6 | 	mov	local08, local06
18214     01 2C 66 F0 | 	shl	local08, #1
18218     18 2C 46 F0 | 	shr	local08, #24
1821c     1F 28 46 F0 | 	shr	local06, #31
18220     14 23 62 F5 | 	xor	local03, local06
18224     FF 26 0E F2 | 	cmp	local05, #255 wz
18228     90 00 90 AD |  if_e	jmp	#LR__2363
1822c     FF 2C 0E F2 | 	cmp	local08, #255 wz
18230     D8 00 90 AD |  if_e	jmp	#LR__2365
18234     00 26 0E F2 | 	cmp	local05, #0 wz
18238     0C 01 90 AD |  if_e	jmp	#LR__2366
1823c     17 24 26 F4 | 	bith	local04, #23
18240                 | LR__2360
18240     00 2C 0E F2 | 	cmp	local08, #0 wz
18244     44 01 90 AD |  if_e	jmp	#LR__2370
18248     17 2A 26 F4 | 	bith	local07, #23
1824c                 | LR__2361
1824c     12 21 02 F6 | 	mov	local02, local04
18250     04 20 66 F0 | 	shl	local02, #4
18254     15 29 02 F6 | 	mov	local06, local07
18258     05 28 66 F0 | 	shl	local06, #5
1825c     14 21 02 FD | 	qmul	local02, local06
18260     16 27 02 F1 | 	add	local05, local08
18264     FE 26 86 F1 | 	sub	local05, #254
18268     13 2F 02 F6 | 	mov	local09, local05
1826c     04 24 66 F0 | 	shl	local04, #4
18270     05 2A 66 F0 | 	shl	local07, #5
18274     18 30 62 FD | 	getqx	local10
18278     15 25 02 FD | 	qmul	local04, local07
1827c     19 32 62 FD | 	getqy	local11
18280     00 80 00 FF 
18284     00 32 16 F2 | 	cmp	local11, ##16777216 wc
18288     18 00 90 CD |  if_b	jmp	#LR__2362
1828c     01 2E 06 F1 | 	add	local09, #1
18290     01 30 46 F0 | 	shr	local10, #1
18294     19 2D 02 F6 | 	mov	local08, local11
18298     1F 2C 66 F0 | 	shl	local08, #31
1829c     16 31 42 F5 | 	or	local10, local08
182a0     01 32 46 F0 | 	shr	local11, #1
182a4                 | LR__2362
182a4     19 13 02 F6 | 	mov	arg01, local11
182a8     18 15 02 F6 | 	mov	arg02, local10
182ac     17 17 02 F6 | 	mov	arg03, local09
182b0     11 19 02 F6 | 	mov	arg04, local03
182b4     4C 2F B0 FD | 	call	#__system__pack_0435
182b8     10 01 90 FD | 	jmp	#LR__2374
182bc                 | LR__2363
182bc     00 24 0E F2 | 	cmp	local04, #0 wz
182c0     0F FB 01 56 |  if_ne	mov	result1, local01
182c4     04 01 90 5D |  if_ne	jmp	#LR__2374
182c8     FF 2C 56 F2 | 	cmps	local08, #255 wc
182cc     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
182d0     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
182d4     18 00 90 4D |  if_c_and_nz	jmp	#LR__2364
182d8     00 F8 3F CF 
182dc     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
182e0     E8 00 90 CD |  if_b	jmp	#LR__2374
182e4     00 2A 0E F2 | 	cmp	local07, #0 wz
182e8     10 FB 01 56 |  if_ne	mov	result1, local02
182ec     DC 00 90 5D |  if_ne	jmp	#LR__2374
182f0                 | LR__2364
182f0     02 22 46 F5 | 	or	local03, #2
182f4     00 12 06 F6 | 	mov	arg01, #0
182f8     00 14 06 F6 | 	mov	arg02, #0
182fc     13 17 02 F6 | 	mov	arg03, local05
18300     11 19 02 F6 | 	mov	arg04, local03
18304     FC 2E B0 FD | 	call	#__system__pack_0435
18308     C0 00 90 FD | 	jmp	#LR__2374
1830c                 | LR__2365
1830c     00 26 0E F2 | 	cmp	local05, #0 wz
18310     00 24 0E A2 |  if_e	cmp	local04, #0 wz
18314     00 F8 3F AF 
18318     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1831c     AC 00 90 AD |  if_e	jmp	#LR__2374
18320     00 2A 0E F2 | 	cmp	local07, #0 wz
18324     10 FB 01 56 |  if_ne	mov	result1, local02
18328     A0 00 90 5D |  if_ne	jmp	#LR__2374
1832c     16 17 02 F6 | 	mov	arg03, local08
18330     11 19 02 F6 | 	mov	arg04, local03
18334     02 18 46 F5 | 	or	arg04, #2
18338     00 12 06 F6 | 	mov	arg01, #0
1833c     00 14 06 F6 | 	mov	arg02, #0
18340     C0 2E B0 FD | 	call	#__system__pack_0435
18344     84 00 90 FD | 	jmp	#LR__2374
18348                 | LR__2366
18348     00 24 0E F2 | 	cmp	local04, #0 wz
1834c     20 00 90 AD |  if_e	jmp	#LR__2369
18350     01 24 66 F0 | 	shl	local04, #1
18354     97 0A 48 FB | 	callpa	#(@LR__2368-@LR__2367)>>2,fcache_load_ptr_
18358                 | LR__2367
18358     00 40 00 FF 
1835c     00 24 16 F2 | 	cmp	local04, ##8388608 wc
18360     01 26 86 C1 |  if_b	sub	local05, #1
18364     01 24 66 C0 |  if_b	shl	local04, #1
18368     EC FF 9F CD |  if_b	jmp	#LR__2367
1836c                 | LR__2368
1836c     D0 FE 9F FD | 	jmp	#LR__2360
18370                 | LR__2369
18370     08 22 46 F5 | 	or	local03, #8
18374     00 12 06 F6 | 	mov	arg01, #0
18378     00 14 06 F6 | 	mov	arg02, #0
1837c     00 16 06 F6 | 	mov	arg03, #0
18380     11 19 02 F6 | 	mov	arg04, local03
18384     7C 2E B0 FD | 	call	#__system__pack_0435
18388     40 00 90 FD | 	jmp	#LR__2374
1838c                 | LR__2370
1838c     00 2A 0E F2 | 	cmp	local07, #0 wz
18390     20 00 90 AD |  if_e	jmp	#LR__2373
18394     01 2A 66 F0 | 	shl	local07, #1
18398     97 0A 48 FB | 	callpa	#(@LR__2372-@LR__2371)>>2,fcache_load_ptr_
1839c                 | LR__2371
1839c     00 40 00 FF 
183a0     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
183a4     01 2C 86 C1 |  if_b	sub	local08, #1
183a8     01 2A 66 C0 |  if_b	shl	local07, #1
183ac     EC FF 9F CD |  if_b	jmp	#LR__2371
183b0                 | LR__2372
183b0     98 FE 9F FD | 	jmp	#LR__2361
183b4                 | LR__2373
183b4     08 22 46 F5 | 	or	local03, #8
183b8     00 12 06 F6 | 	mov	arg01, #0
183bc     00 14 06 F6 | 	mov	arg02, #0
183c0     00 16 06 F6 | 	mov	arg03, #0
183c4     11 19 02 F6 | 	mov	arg04, local03
183c8     38 2E B0 FD | 	call	#__system__pack_0435
183cc                 | LR__2374
183cc     A7 F0 03 F6 | 	mov	ptra, fp
183d0     B2 00 A0 FD | 	call	#popregs_
183d4                 | __system___float_mul_ret
183d4     2D 00 64 FD | 	ret
183d8                 | 
183d8                 | __system___float_div
183d8     0E 4A 05 F6 | 	mov	COUNT_, #14
183dc     A8 00 A0 FD | 	call	#pushregs_
183e0     09 23 02 F6 | 	mov	local03, arg01
183e4     0A 25 02 F6 | 	mov	local04, arg02
183e8     11 27 02 F6 | 	mov	local05, local03
183ec     13 29 02 F6 | 	mov	local06, local05
183f0     16 28 46 F7 | 	zerox	local06, #22
183f4     13 2B 02 F6 | 	mov	local07, local05
183f8     01 2A 66 F0 | 	shl	local07, #1
183fc     18 2A 46 F0 | 	shr	local07, #24
18400     1F 26 46 F0 | 	shr	local05, #31
18404     12 FB 01 F6 | 	mov	result1, local04
18408     FD 2C 02 F6 | 	mov	local08, result1
1840c     16 2F 02 F6 | 	mov	local09, local08
18410     16 2E 46 F7 | 	zerox	local09, #22
18414     16 31 02 F6 | 	mov	local10, local08
18418     01 30 66 F0 | 	shl	local10, #1
1841c     18 30 46 F0 | 	shr	local10, #24
18420     1F 2C 46 F0 | 	shr	local08, #31
18424     16 27 62 F5 | 	xor	local05, local08
18428     FF 2A 0E F2 | 	cmp	local07, #255 wz
1842c     D4 00 90 AD |  if_e	jmp	#LR__2385
18430     FF 30 0E F2 | 	cmp	local10, #255 wz
18434     04 01 90 AD |  if_e	jmp	#LR__2386
18438     00 2A 0E F2 | 	cmp	local07, #0 wz
1843c     24 01 90 AD |  if_e	jmp	#LR__2387
18440     17 28 26 F4 | 	bith	local06, #23
18444                 | LR__2380
18444     00 30 0E F2 | 	cmp	local10, #0 wz
18448     70 01 90 AD |  if_e	jmp	#LR__2391
1844c     17 2E 26 F4 | 	bith	local09, #23
18450                 | LR__2381
18450     18 2B 82 F1 | 	sub	local07, local10
18454     15 33 02 F6 | 	mov	local11, local07
18458     14 13 02 F6 | 	mov	arg01, local06
1845c     02 12 46 F0 | 	shr	arg01, #2
18460     1E 28 66 F0 | 	shl	local06, #30
18464     14 15 02 F6 | 	mov	arg02, local06
18468     17 17 02 F6 | 	mov	arg03, local09
1846c     28 12 62 FD | 	setq	arg01
18470     0B 15 12 FD | 	qdiv	arg02, arg03
18474     00 34 06 F6 | 	mov	local12, #0
18478     18 1E 62 FD | 	getqx	local01
1847c     19 FC 61 FD | 	getqy	result2
18480     FE 20 02 F6 | 	mov	local02, result2
18484     0F 37 02 F6 | 	mov	local13, local01
18488     00 20 4E F2 | 	cmps	local02, #0 wz
1848c     1B 39 02 F6 | 	mov	local14, local13
18490     19 38 66 F0 | 	shl	local14, #25
18494     01 34 06 56 |  if_ne	mov	local12, #1
18498     1A 39 42 F5 | 	or	local14, local12
1849c     07 36 46 F0 | 	shr	local13, #7
184a0     00 80 00 FF 
184a4     00 36 16 F2 | 	cmp	local13, ##16777216 wc
184a8     1C 00 90 CD |  if_b	jmp	#LR__2382
184ac     01 32 06 F1 | 	add	local11, #1
184b0     01 38 46 F0 | 	shr	local14, #1
184b4     1B 35 02 F6 | 	mov	local12, local13
184b8     1F 34 66 F0 | 	shl	local12, #31
184bc     1A 39 42 F5 | 	or	local14, local12
184c0     01 36 46 F0 | 	shr	local13, #1
184c4     24 00 90 FD | 	jmp	#LR__2384
184c8                 | LR__2382
184c8     00 40 00 FF 
184cc     00 36 16 F2 | 	cmp	local13, ##8388608 wc
184d0     18 00 90 3D |  if_ae	jmp	#LR__2383
184d4     01 32 86 F1 | 	sub	local11, #1
184d8     01 36 66 F0 | 	shl	local13, #1
184dc     1C 35 02 F6 | 	mov	local12, local14
184e0     1F 34 46 F0 | 	shr	local12, #31
184e4     1A 37 42 F5 | 	or	local13, local12
184e8     01 38 66 F0 | 	shl	local14, #1
184ec                 | LR__2383
184ec                 | LR__2384
184ec     1B 13 02 F6 | 	mov	arg01, local13
184f0     1C 15 02 F6 | 	mov	arg02, local14
184f4     19 17 02 F6 | 	mov	arg03, local11
184f8     13 19 02 F6 | 	mov	arg04, local05
184fc     04 2D B0 FD | 	call	#__system__pack_0435
18500     F8 00 90 FD | 	jmp	#LR__2395
18504                 | LR__2385
18504     00 28 0E F2 | 	cmp	local06, #0 wz
18508     11 FB 01 56 |  if_ne	mov	result1, local03
1850c     EC 00 90 5D |  if_ne	jmp	#LR__2395
18510     FF 30 0E F2 | 	cmp	local10, #255 wz
18514     00 F8 3F AF 
18518     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1851c     DC 00 90 AD |  if_e	jmp	#LR__2395
18520     02 26 46 F5 | 	or	local05, #2
18524     00 12 06 F6 | 	mov	arg01, #0
18528     00 14 06 F6 | 	mov	arg02, #0
1852c     15 17 02 F6 | 	mov	arg03, local07
18530     13 19 02 F6 | 	mov	arg04, local05
18534     CC 2C B0 FD | 	call	#__system__pack_0435
18538     C0 00 90 FD | 	jmp	#LR__2395
1853c                 | LR__2386
1853c     00 2E 0E F2 | 	cmp	local09, #0 wz
18540     12 FB 01 56 |  if_ne	mov	result1, local04
18544     B4 00 90 5D |  if_ne	jmp	#LR__2395
18548     13 19 02 F6 | 	mov	arg04, local05
1854c     08 18 46 F5 | 	or	arg04, #8
18550     00 12 06 F6 | 	mov	arg01, #0
18554     00 14 06 F6 | 	mov	arg02, #0
18558     00 16 06 F6 | 	mov	arg03, #0
1855c     A4 2C B0 FD | 	call	#__system__pack_0435
18560     98 00 90 FD | 	jmp	#LR__2395
18564                 | LR__2387
18564     00 28 0E F2 | 	cmp	local06, #0 wz
18568     20 00 90 AD |  if_e	jmp	#LR__2390
1856c     01 28 66 F0 | 	shl	local06, #1
18570     97 0A 48 FB | 	callpa	#(@LR__2389-@LR__2388)>>2,fcache_load_ptr_
18574                 | LR__2388
18574     00 40 00 FF 
18578     00 28 16 F2 | 	cmp	local06, ##8388608 wc
1857c     01 2A 86 C1 |  if_b	sub	local07, #1
18580     01 28 66 C0 |  if_b	shl	local06, #1
18584     EC FF 9F CD |  if_b	jmp	#LR__2388
18588                 | LR__2389
18588     B8 FE 9F FD | 	jmp	#LR__2380
1858c                 | LR__2390
1858c     00 30 0E F2 | 	cmp	local10, #0 wz
18590     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
18594     00 F8 3F AF 
18598     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1859c     5C 00 90 AD |  if_e	jmp	#LR__2395
185a0     13 19 02 F6 | 	mov	arg04, local05
185a4     08 18 46 F5 | 	or	arg04, #8
185a8     00 12 06 F6 | 	mov	arg01, #0
185ac     00 14 06 F6 | 	mov	arg02, #0
185b0     00 16 06 F6 | 	mov	arg03, #0
185b4     4C 2C B0 FD | 	call	#__system__pack_0435
185b8     40 00 90 FD | 	jmp	#LR__2395
185bc                 | LR__2391
185bc     00 2E 0E F2 | 	cmp	local09, #0 wz
185c0     20 00 90 AD |  if_e	jmp	#LR__2394
185c4     01 2E 66 F0 | 	shl	local09, #1
185c8     97 0A 48 FB | 	callpa	#(@LR__2393-@LR__2392)>>2,fcache_load_ptr_
185cc                 | LR__2392
185cc     00 40 00 FF 
185d0     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
185d4     01 30 86 C1 |  if_b	sub	local10, #1
185d8     01 2E 66 C0 |  if_b	shl	local09, #1
185dc     EC FF 9F CD |  if_b	jmp	#LR__2392
185e0                 | LR__2393
185e0     6C FE 9F FD | 	jmp	#LR__2381
185e4                 | LR__2394
185e4     02 26 46 F5 | 	or	local05, #2
185e8     00 12 06 F6 | 	mov	arg01, #0
185ec     00 14 06 F6 | 	mov	arg02, #0
185f0     00 16 06 F6 | 	mov	arg03, #0
185f4     13 19 02 F6 | 	mov	arg04, local05
185f8     08 2C B0 FD | 	call	#__system__pack_0435
185fc                 | LR__2395
185fc     A7 F0 03 F6 | 	mov	ptra, fp
18600     B2 00 A0 FD | 	call	#popregs_
18604                 | __system___float_div_ret
18604     2D 00 64 FD | 	ret
18608                 | 
18608                 | __system___float_cmp
18608     00 C0 3F FF 
1860c     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
18610     00 C0 3F CF 
18614     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
18618     0B FB 01 36 |  if_ae	mov	result1, arg03
1861c     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
18620     00 C0 7F FF 
18624     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
18628     00 C0 7F CF 
1862c     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
18630     0B FB 01 36 |  if_ae	mov	result1, arg03
18634     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
18638     00 12 56 F2 | 	cmps	arg01, #0 wc
1863c     2C 00 90 3D |  if_ae	jmp	#LR__2400
18640     00 14 56 F2 | 	cmps	arg02, #0 wc
18644     0A FB 01 C6 |  if_b	mov	result1, arg02
18648     09 FB 81 C1 |  if_b	sub	result1, arg01
1864c     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
18650     00 14 0E F2 | 	cmp	arg02, #0 wz
18654     00 00 40 AF 
18658     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
1865c     00 FA 05 A6 |  if_e	mov	result1, #0
18660     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
18664     01 FA 65 F6 | 	neg	result1, #1
18668     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
1866c                 | LR__2400
1866c     00 14 56 F2 | 	cmps	arg02, #0 wc
18670     1C 00 90 3D |  if_ae	jmp	#LR__2401
18674     00 12 0E F2 | 	cmp	arg01, #0 wz
18678     00 00 40 AF 
1867c     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
18680     00 FA 05 A6 |  if_e	mov	result1, #0
18684     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
18688     01 FA 05 F6 | 	mov	result1, #1
1868c     08 00 90 FD | 	jmp	#__system___float_cmp_ret
18690                 | LR__2401
18690     0A 13 82 F1 | 	sub	arg01, arg02
18694     09 FB 01 F6 | 	mov	result1, arg01
18698                 | __system___float_cmp_ret
18698     2D 00 64 FD | 	ret
1869c                 | 
1869c                 | __system___float_tointeger
1869c     02 4A 05 F6 | 	mov	COUNT_, #2
186a0     A8 00 A0 FD | 	call	#pushregs_
186a4     50 00 B0 FD | 	call	#__system___float_Unpack
186a8     FF FF 7F FF 
186ac     FF FD 55 F2 | 	cmps	result2, ##-1 wc
186b0     34 00 90 CD |  if_b	jmp	#LR__2410
186b4     1F FC 55 F2 | 	cmps	result2, #31 wc
186b8     2C 00 90 3D |  if_ae	jmp	#LR__2410
186bc     02 FE 65 F0 | 	shl	result3, #2
186c0     1E 1E 06 F6 | 	mov	local01, #30
186c4     FE 1E 82 F1 | 	sub	local01, result2
186c8     0F FF 41 F0 | 	shr	result3, local01
186cc     FF 20 02 F6 | 	mov	local02, result3
186d0     0A 21 02 F1 | 	add	local02, arg02
186d4     01 20 46 F0 | 	shr	local02, #1
186d8     00 FA 0D F2 | 	cmp	result1, #0 wz
186dc     10 21 62 56 |  if_ne	neg	local02, local02
186e0     10 FB 01 F6 | 	mov	result1, local02
186e4     04 00 90 FD | 	jmp	#LR__2411
186e8                 | LR__2410
186e8     00 FA 05 F6 | 	mov	result1, #0
186ec                 | LR__2411
186ec     A7 F0 03 F6 | 	mov	ptra, fp
186f0     B2 00 A0 FD | 	call	#popregs_
186f4                 | __system___float_tointeger_ret
186f4     2D 00 64 FD | 	ret
186f8                 | 
186f8                 | __system___float_Unpack
186f8     09 01 02 F6 | 	mov	_var01, arg01
186fc     1F 00 46 F0 | 	shr	_var01, #31
18700     09 03 02 F6 | 	mov	_var02, arg01
18704     01 02 66 F0 | 	shl	_var02, #1
18708     18 02 4E F0 | 	shr	_var02, #24 wz
1870c     17 13 06 F4 | 	bitl	arg01, #279
18710     06 12 66 50 |  if_ne	shl	arg01, #6
18714     1D 12 26 54 |  if_ne	bith	arg01, #29
18718     1C 00 90 5D |  if_ne	jmp	#LR__2420
1871c     09 05 92 F7 | 	encod	_var03, arg01 wc
18720     01 04 06 C1 |  if_b	add	_var03, #1
18724     17 04 86 F1 | 	sub	_var03, #23
18728     02 03 02 F6 | 	mov	_var02, _var03
1872c     07 FC 05 F6 | 	mov	result2, #7
18730     02 FD 81 F1 | 	sub	result2, _var03
18734     FE 12 62 F0 | 	shl	arg01, result2
18738                 | LR__2420
18738     7F 02 86 F1 | 	sub	_var02, #127
1873c     09 FF 01 F6 | 	mov	result3, arg01
18740     00 FB 01 F6 | 	mov	result1, _var01
18744     01 FD 01 F6 | 	mov	result2, _var02
18748                 | __system___float_Unpack_ret
18748     2D 00 64 FD | 	ret
1874c                 | 
1874c                 | __system___float_Pack
1874c     00 00 06 F6 | 	mov	_var01, #0
18750     00 16 0E F2 | 	cmp	arg03, #0 wz
18754     8C 00 90 AD |  if_e	jmp	#LR__2431
18758     0B 03 92 F7 | 	encod	_var02, arg03 wc
1875c     01 02 06 C1 |  if_b	add	_var02, #1
18760     21 00 06 F6 | 	mov	_var01, #33
18764     01 01 82 F1 | 	sub	_var01, _var02
18768     00 17 62 F0 | 	shl	arg03, _var01
1876c     03 02 06 F6 | 	mov	_var02, #3
18770     00 03 82 F1 | 	sub	_var02, _var01
18774     01 15 02 F1 | 	add	arg02, _var02
18778     0A 05 02 F6 | 	mov	_var03, arg02
1877c     00 17 06 F1 | 	add	arg03, #256
18780     0B 03 02 F6 | 	mov	_var02, arg03
18784     FF 02 2E F5 | 	andn	_var02, #255 wz
18788     01 04 06 A1 |  if_e	add	_var03, #1
1878c     7F 04 06 F1 | 	add	_var03, #127
18790     FF FF 7F FF 
18794     E9 05 46 F3 | 	fges	_var03, ##-23
18798     FF 04 66 F3 | 	fles	_var03, #255
1879c     01 04 56 F2 | 	cmps	_var03, #1 wc
187a0     1C 00 90 3D |  if_ae	jmp	#LR__2430
187a4     01 16 46 F0 | 	shr	arg03, #1
187a8     1F 02 C6 F9 | 	decod	_var02, #31
187ac     0B 03 02 F1 | 	add	_var02, arg03
187b0     02 05 62 F6 | 	neg	_var03, _var03
187b4     02 03 42 F0 | 	shr	_var02, _var03
187b8     01 17 02 F6 | 	mov	arg03, _var02
187bc     00 04 06 F6 | 	mov	_var03, #0
187c0                 | LR__2430
187c0     09 FB 01 F6 | 	mov	result1, arg01
187c4     1F FA 65 F0 | 	shl	result1, #31
187c8     02 03 02 F6 | 	mov	_var02, _var03
187cc     17 02 66 F0 | 	shl	_var02, #23
187d0     01 FB 41 F5 | 	or	result1, _var02
187d4     0B 07 02 F6 | 	mov	_var04, arg03
187d8     09 06 46 F0 | 	shr	_var04, #9
187dc     03 FB 41 F5 | 	or	result1, _var04
187e0     04 00 90 FD | 	jmp	#__system___float_Pack_ret
187e4                 | LR__2431
187e4     00 FB 01 F6 | 	mov	result1, _var01
187e8                 | __system___float_Pack_ret
187e8     2D 00 64 FD | 	ret
187ec                 | 
187ec                 | __system___basic_print_float
187ec     05 4A 05 F6 | 	mov	COUNT_, #5
187f0     A8 00 A0 FD | 	call	#pushregs_
187f4     09 1F 02 F6 | 	mov	local01, arg01
187f8     0A 21 02 F6 | 	mov	local02, arg02
187fc     0B 23 0A F6 | 	mov	local03, arg03 wz
18800     0C 25 02 F6 | 	mov	local04, arg04
18804     14 00 90 5D |  if_ne	jmp	#LR__2440
18808     23 24 0E F2 | 	cmp	local04, #35 wz
1880c     80 02 10 AF 
18810     00 26 06 A6 |  if_e	mov	local05, ##537198592
18814     1D 26 C6 59 |  if_ne	decod	local05, #29
18818     13 23 02 F6 | 	mov	local03, local05
1881c                 | LR__2440
1881c     0F 13 02 F6 | 	mov	arg01, local01
18820     C4 24 B0 FD | 	call	#__system___gettxfunc
18824     FD 26 0A F6 | 	mov	local05, result1 wz
18828     00 FA 05 A6 |  if_e	mov	result1, #0
1882c     13 13 02 56 |  if_ne	mov	arg01, local05
18830     11 15 02 56 |  if_ne	mov	arg02, local03
18834     10 17 02 56 |  if_ne	mov	arg03, local02
18838     12 19 02 56 |  if_ne	mov	arg04, local04
1883c     64 E0 BF 5D |  if_ne	call	#__system___fmtfloat
18840     A7 F0 03 F6 | 	mov	ptra, fp
18844     B2 00 A0 FD | 	call	#popregs_
18848                 | __system___basic_print_float_ret
18848     2D 00 64 FD | 	ret
1884c                 | 
1884c                 | __system____builtin_atoi
1884c     07 4A 05 F6 | 	mov	COUNT_, #7
18850     A8 00 A0 FD | 	call	#pushregs_
18854                 | __system____builtin_atoi_enter
18854     09 1F 02 F6 | 	mov	local01, arg01
18858     0A 21 02 F6 | 	mov	local02, arg02
1885c     00 22 06 F6 | 	mov	local03, #0
18860     00 24 06 F6 | 	mov	local04, #0
18864     00 26 06 F6 | 	mov	local05, #0
18868     97 08 48 FB | 	callpa	#(@LR__2451-@LR__2450)>>2,fcache_load_ptr_
1886c                 | LR__2450
1886c     0F 29 C2 FA | 	rdbyte	local06, local01
18870     20 28 0E F2 | 	cmp	local06, #32 wz
18874     01 1E 06 A1 |  if_e	add	local01, #1
18878     F0 FF 9F AD |  if_e	jmp	#LR__2450
1887c                 | LR__2451
1887c     0F 2B C2 FA | 	rdbyte	local07, local01
18880                 | LR__2452
18880     2D 2A 0E F2 | 	cmp	local07, #45 wz
18884     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
18888     18 00 90 5D |  if_ne	jmp	#LR__2453
1888c     01 1E 06 F1 | 	add	local01, #1
18890     2D 2A 0E F2 | 	cmp	local07, #45 wz
18894     01 28 06 A6 |  if_e	mov	local06, #1
18898     14 27 C2 A2 |  if_e	subr	local05, local06
1889c     0F 2B C2 FA | 	rdbyte	local07, local01
188a0     DC FF 9F FD | 	jmp	#LR__2452
188a4                 | LR__2453
188a4     97 48 48 FB | 	callpa	#(@LR__2461-@LR__2454)>>2,fcache_load_ptr_
188a8                 | LR__2454
188a8                 | LR__2455
188a8     0F 2B C2 FA | 	rdbyte	local07, local01
188ac     5F 2A 0E F2 | 	cmp	local07, #95 wz
188b0     01 1E 06 F1 | 	add	local01, #1
188b4     F0 FF 9F AD |  if_e	jmp	#LR__2455
188b8     30 2A 0E F2 | 	cmp	local07, #48 wz
188bc     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
188c0     00 24 06 A6 |  if_e	mov	local04, #0
188c4     60 00 90 AD |  if_e	jmp	#LR__2460
188c8     31 2A 56 F2 | 	cmps	local07, #49 wc
188cc     18 00 90 CD |  if_b	jmp	#LR__2456
188d0     3A 2A 56 F2 | 	cmps	local07, #58 wc
188d4     15 25 02 C6 |  if_b	mov	local04, local07
188d8     30 24 86 C1 |  if_b	sub	local04, #48
188dc     00 20 0E C2 |  if_b	cmp	local02, #0 wz
188e0     0A 20 06 86 |  if_c_and_z	mov	local02, #10
188e4     40 00 90 CD |  if_b	jmp	#LR__2459
188e8                 | LR__2456
188e8     0B 20 56 F2 | 	cmps	local02, #11 wc
188ec     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
188f0     14 00 90 CD |  if_b	jmp	#LR__2457
188f4     67 2A 56 F2 | 	cmps	local07, #103 wc
188f8     61 2A 86 C1 |  if_b	sub	local07, #97
188fc     0A 24 06 C6 |  if_b	mov	local04, #10
18900     15 25 02 C1 |  if_b	add	local04, local07
18904     20 00 90 CD |  if_b	jmp	#LR__2458
18908                 | LR__2457
18908     0B 20 56 F2 | 	cmps	local02, #11 wc
1890c     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
18910     24 00 90 CD |  if_b	jmp	#LR__2462
18914     47 2A 56 F2 | 	cmps	local07, #71 wc
18918     41 2A 86 C1 |  if_b	sub	local07, #65
1891c     0A 24 06 C6 |  if_b	mov	local04, #10
18920     15 25 02 C1 |  if_b	add	local04, local07
18924     10 00 90 3D |  if_ae	jmp	#LR__2462
18928                 | LR__2458
18928                 | LR__2459
18928                 | LR__2460
18928     11 21 02 FD | 	qmul	local02, local03
1892c     18 22 62 FD | 	getqx	local03
18930     12 23 02 F1 | 	add	local03, local04
18934     70 FF 9F FD | 	jmp	#LR__2454
18938                 | LR__2461
18938                 | LR__2462
18938     00 20 0E F2 | 	cmp	local02, #0 wz
1893c     64 00 90 5D |  if_ne	jmp	#LR__2468
18940     78 2A 0E F2 | 	cmp	local07, #120 wz
18944     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
18948     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
1894c     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
18950     14 00 90 5D |  if_ne	jmp	#LR__2463
18954     0F 13 02 F6 | 	mov	arg01, local01
18958     10 14 06 F6 | 	mov	arg02, #16
1895c     EC FE BF FD | 	call	#__system____builtin_atoi
18960     FD 22 02 F6 | 	mov	local03, result1
18964     3C 00 90 FD | 	jmp	#LR__2467
18968                 | LR__2463
18968     62 2A 0E F2 | 	cmp	local07, #98 wz
1896c     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
18970     14 00 90 5D |  if_ne	jmp	#LR__2464
18974     0F 13 02 F6 | 	mov	arg01, local01
18978     02 14 06 F6 | 	mov	arg02, #2
1897c     CC FE BF FD | 	call	#__system____builtin_atoi
18980     FD 22 02 F6 | 	mov	local03, result1
18984     1C 00 90 FD | 	jmp	#LR__2466
18988                 | LR__2464
18988     6F 2A 0E F2 | 	cmp	local07, #111 wz
1898c     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
18990     10 00 90 5D |  if_ne	jmp	#LR__2465
18994     0F 13 02 F6 | 	mov	arg01, local01
18998     08 14 06 F6 | 	mov	arg02, #8
1899c     AC FE BF FD | 	call	#__system____builtin_atoi
189a0     FD 22 02 F6 | 	mov	local03, result1
189a4                 | LR__2465
189a4                 | LR__2466
189a4                 | LR__2467
189a4                 | LR__2468
189a4     00 26 0E F2 | 	cmp	local05, #0 wz
189a8     11 23 62 56 |  if_ne	neg	local03, local03
189ac     11 FB 01 F6 | 	mov	result1, local03
189b0     A7 F0 03 F6 | 	mov	ptra, fp
189b4     B2 00 A0 FD | 	call	#popregs_
189b8                 | __system____builtin_atoi_ret
189b8     2D 00 64 FD | 	ret
189bc                 | 
189bc                 | __system____builtin_atof
189bc     07 4A 05 F6 | 	mov	COUNT_, #7
189c0     A8 00 A0 FD | 	call	#pushregs_
189c4     09 1F 02 F6 | 	mov	local01, arg01
189c8     00 20 06 F6 | 	mov	local02, #0
189cc     00 22 06 F6 | 	mov	local03, #0
189d0     00 24 06 F6 | 	mov	local04, #0
189d4     00 26 06 F6 | 	mov	local05, #0
189d8     97 08 48 FB | 	callpa	#(@LR__2471-@LR__2470)>>2,fcache_load_ptr_
189dc                 | LR__2470
189dc     0F 17 C2 FA | 	rdbyte	arg03, local01
189e0     20 16 0E F2 | 	cmp	arg03, #32 wz
189e4     01 1E 06 A1 |  if_e	add	local01, #1
189e8     F0 FF 9F AD |  if_e	jmp	#LR__2470
189ec                 | LR__2471
189ec     0F 29 C2 FA | 	rdbyte	local06, local01
189f0                 | LR__2472
189f0     2B 28 0E F2 | 	cmp	local06, #43 wz
189f4     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
189f8     14 00 90 5D |  if_ne	jmp	#LR__2473
189fc     2D 28 0E F2 | 	cmp	local06, #45 wz
18a00     1F 24 E6 A4 |  if_e	bitnot	local04, #31
18a04     01 1E 06 F1 | 	add	local01, #1
18a08     0F 29 C2 FA | 	rdbyte	local06, local01
18a0c     E0 FF 9F FD | 	jmp	#LR__2472
18a10                 | LR__2473
18a10                 | LR__2474
18a10     97 08 48 FB | 	callpa	#(@LR__2476-@LR__2475)>>2,fcache_load_ptr_
18a14                 | LR__2475
18a14     0F 29 C2 FA | 	rdbyte	local06, local01
18a18     5F 28 0E F2 | 	cmp	local06, #95 wz
18a1c     01 1E 06 F1 | 	add	local01, #1
18a20     F0 FF 9F AD |  if_e	jmp	#LR__2475
18a24                 | LR__2476
18a24     00 28 0E F2 | 	cmp	local06, #0 wz
18a28     5C 00 90 AD |  if_e	jmp	#LR__2478
18a2c     30 28 56 F2 | 	cmps	local06, #48 wc
18a30     44 00 90 CD |  if_b	jmp	#LR__2477
18a34     3A 28 56 F2 | 	cmps	local06, #58 wc
18a38     3C 00 90 3D |  if_ae	jmp	#LR__2477
18a3c     10 13 02 F6 | 	mov	arg01, local02
18a40     00 90 20 FF 
18a44     00 14 06 F6 | 	mov	arg02, ##1092616192
18a48     88 F7 BF FD | 	call	#__system___float_mul
18a4c     FD 20 02 F6 | 	mov	local02, result1
18a50     30 28 86 F1 | 	sub	local06, #48
18a54     14 13 02 F6 | 	mov	arg01, local06
18a58     4C F4 BF FD | 	call	#__system___float_fromuns
18a5c     FD 14 02 F6 | 	mov	arg02, result1
18a60     10 13 02 F6 | 	mov	arg01, local02
18a64     74 F4 BF FD | 	call	#__system___float_add
18a68     FD 20 02 F6 | 	mov	local02, result1
18a6c     00 26 0E F2 | 	cmp	local05, #0 wz
18a70     01 22 86 51 |  if_ne	sub	local03, #1
18a74     98 FF 9F FD | 	jmp	#LR__2474
18a78                 | LR__2477
18a78     2E 28 0E F2 | 	cmp	local06, #46 wz
18a7c     00 26 0E A2 |  if_e	cmp	local05, #0 wz
18a80     01 26 06 A6 |  if_e	mov	local05, #1
18a84     88 FF 9F AD |  if_e	jmp	#LR__2474
18a88                 | LR__2478
18a88     45 28 0E F2 | 	cmp	local06, #69 wz
18a8c     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
18a90     18 00 90 5D |  if_ne	jmp	#LR__2479
18a94     0F 13 02 F6 | 	mov	arg01, local01
18a98     00 14 06 F6 | 	mov	arg02, #0
18a9c     AC FD BF FD | 	call	#__system____builtin_atoi
18aa0     11 FB 01 F1 | 	add	result1, local03
18aa4     FD 2A 02 F6 | 	mov	local07, result1
18aa8     04 00 90 FD | 	jmp	#LR__2480
18aac                 | LR__2479
18aac     11 2B 02 F6 | 	mov	local07, local03
18ab0                 | LR__2480
18ab0     15 17 02 F6 | 	mov	arg03, local07
18ab4     10 13 02 F6 | 	mov	arg01, local02
18ab8     00 90 20 FF 
18abc     00 14 06 F6 | 	mov	arg02, ##1092616192
18ac0     44 04 B0 FD | 	call	#__system___float_pow_n
18ac4     12 FB 61 F5 | 	xor	result1, local04
18ac8     A7 F0 03 F6 | 	mov	ptra, fp
18acc     B2 00 A0 FD | 	call	#popregs_
18ad0                 | __system____builtin_atof_ret
18ad0     2D 00 64 FD | 	ret
18ad4                 | 
18ad4                 | __system____builtin_ilogb
18ad4     20 FC BF FD | 	call	#__system___float_Unpack
18ad8     00 FE 0D F2 | 	cmp	result3, #0 wz
18adc     00 00 40 AF 
18ae0     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
18ae4     24 00 90 AD |  if_e	jmp	#LR__2491
18ae8     80 FC 0D F2 | 	cmp	result2, #128 wz
18aec     18 00 90 5D |  if_ne	jmp	#LR__2490
18af0     00 00 10 FF 
18af4     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
18af8     1E FA CD A9 |  if_e	bmask	result1, #30
18afc     0C 00 90 AD |  if_e	jmp	#LR__2491
18b00     1F FA C5 F9 | 	decod	result1, #31
18b04     04 00 90 FD | 	jmp	#LR__2491
18b08                 | LR__2490
18b08     FE FA 01 F6 | 	mov	result1, result2
18b0c                 | LR__2491
18b0c                 | __system____builtin_ilogb_ret
18b0c     2D 00 64 FD | 	ret
18b10                 | 
18b10                 | __system____builtin_sinf
18b10     03 4A 05 F6 | 	mov	COUNT_, #3
18b14     A8 00 A0 FD | 	call	#pushregs_
18b18     09 1F 02 F6 | 	mov	local01, arg01
18b1c     66 E6 1E FF 
18b20     CD 14 06 F6 | 	mov	arg02, ##1036831949
18b24     01 16 06 F6 | 	mov	arg03, #1
18b28     DC FA BF FD | 	call	#__system___float_cmp
18b2c     00 FA 55 F2 | 	cmps	result1, #0 wc
18b30     5C 00 90 3D |  if_ae	jmp	#LR__2500
18b34     0F 13 02 F6 | 	mov	arg01, local01
18b38     66 E6 5E FF 
18b3c     CD 14 06 F6 | 	mov	arg02, ##-1110651699
18b40     01 16 66 F6 | 	neg	arg03, #1
18b44     C0 FA BF FD | 	call	#__system___float_cmp
18b48     01 FA 55 F2 | 	cmps	result1, #1 wc
18b4c     40 00 90 CD |  if_b	jmp	#LR__2500
18b50     0F 13 02 F6 | 	mov	arg01, local01
18b54     0F 15 02 F6 | 	mov	arg02, local01
18b58     78 F6 BF FD | 	call	#__system___float_mul
18b5c     FD 12 02 F6 | 	mov	arg01, result1
18b60     0F 15 02 F6 | 	mov	arg02, local01
18b64     6C F6 BF FD | 	call	#__system___float_mul
18b68     FD 12 02 F6 | 	mov	arg01, result1
18b6c     00 60 20 FF 
18b70     00 14 06 F6 | 	mov	arg02, ##1086324736
18b74     60 F8 BF FD | 	call	#__system___float_div
18b78     FD 14 02 F6 | 	mov	arg02, result1
18b7c     0F 13 02 F6 | 	mov	arg01, local01
18b80     1F 14 E6 F4 | 	bitnot	arg02, #31
18b84     54 F3 BF FD | 	call	#__system___float_add
18b88     FD 20 02 F6 | 	mov	local02, result1
18b8c     54 00 90 FD | 	jmp	#LR__2501
18b90                 | LR__2500
18b90     0F 13 02 F6 | 	mov	arg01, local01
18b94     7C 91 26 FF 
18b98     83 15 06 F6 | 	mov	arg02, ##1294137731
18b9c     34 F6 BF FD | 	call	#__system___float_mul
18ba0     FD 12 02 F6 | 	mov	arg01, result1
18ba4     00 14 06 F6 | 	mov	arg02, #0
18ba8     F0 FA BF FD | 	call	#__system___float_tointeger
18bac     02 FA 65 F0 | 	shl	result1, #2
18bb0     00 00 A0 FF 
18bb4     FD 00 48 FD | 	qrotate	##1073741824, result1
18bb8     19 12 62 FD | 	getqy	arg01
18bbc     09 13 52 F6 | 	abs	arg01, arg01 wc
18bc0     1F 22 C6 C9 |  if_b	decod	local03, #31
18bc4     00 22 06 36 |  if_ae	mov	local03, #0
18bc8     DC F2 BF FD | 	call	#__system___float_fromuns
18bcc     11 FB 61 F5 | 	xor	result1, local03
18bd0     FD 12 02 F6 | 	mov	arg01, result1
18bd4     00 40 27 FF 
18bd8     00 14 06 F6 | 	mov	arg02, ##1317011456
18bdc     F8 F7 BF FD | 	call	#__system___float_div
18be0     FD 20 02 F6 | 	mov	local02, result1
18be4                 | LR__2501
18be4     10 FB 01 F6 | 	mov	result1, local02
18be8     A7 F0 03 F6 | 	mov	ptra, fp
18bec     B2 00 A0 FD | 	call	#popregs_
18bf0                 | __system____builtin_sinf_ret
18bf0     2D 00 64 FD | 	ret
18bf4                 | 
18bf4                 | __system____builtin_exp2f
18bf4     04 4A 05 F6 | 	mov	COUNT_, #4
18bf8     A8 00 A0 FD | 	call	#pushregs_
18bfc     09 1F 02 F6 | 	mov	local01, arg01
18c00     00 7F 21 FF 
18c04     00 14 06 F6 | 	mov	arg02, ##1123942400
18c08     01 16 66 F6 | 	neg	arg03, #1
18c0c     F8 F9 BF FD | 	call	#__system___float_cmp
18c10     00 FA 55 F2 | 	cmps	result1, #0 wc
18c14     00 C0 3F 3F 
18c18     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
18c1c     DC 00 90 3D |  if_ae	jmp	#LR__2511
18c20     0F 13 02 F6 | 	mov	arg01, local01
18c24     00 7F 61 FF 
18c28     00 14 06 F6 | 	mov	arg02, ##-1023541248
18c2c     01 16 06 F6 | 	mov	arg03, #1
18c30     D4 F9 BF FD | 	call	#__system___float_cmp
18c34     00 FA 55 F2 | 	cmps	result1, #0 wc
18c38     00 FA 05 C6 |  if_b	mov	result1, #0
18c3c     BC 00 90 CD |  if_b	jmp	#LR__2511
18c40     0F 13 02 F6 | 	mov	arg01, local01
18c44     00 14 06 F6 | 	mov	arg02, #0
18c48     50 FA BF FD | 	call	#__system___float_tointeger
18c4c     FD 20 02 F6 | 	mov	local02, result1
18c50     10 13 52 F6 | 	abs	arg01, local02 wc
18c54     1F 22 C6 C9 |  if_b	decod	local03, #31
18c58     00 22 06 36 |  if_ae	mov	local03, #0
18c5c     48 F2 BF FD | 	call	#__system___float_fromuns
18c60     11 FB 61 F5 | 	xor	result1, local03
18c64     FD 14 02 F6 | 	mov	arg02, result1
18c68     0F 13 02 F6 | 	mov	arg01, local01
18c6c     1F 14 E6 F4 | 	bitnot	arg02, #31
18c70     68 F2 BF FD | 	call	#__system___float_add
18c74     FD 24 02 F6 | 	mov	local04, result1
18c78     12 13 02 F6 | 	mov	arg01, local04
18c7c     00 14 06 F6 | 	mov	arg02, #0
18c80     01 16 06 F6 | 	mov	arg03, #1
18c84     80 F9 BF FD | 	call	#__system___float_cmp
18c88     00 FA 55 F2 | 	cmps	result1, #0 wc
18c8c     18 00 90 3D |  if_ae	jmp	#LR__2510
18c90     12 13 02 F6 | 	mov	arg01, local04
18c94     00 C0 1F FF 
18c98     00 14 06 F6 | 	mov	arg02, ##1065353216
18c9c     3C F2 BF FD | 	call	#__system___float_add
18ca0     FD 24 02 F6 | 	mov	local04, result1
18ca4     01 20 86 F1 | 	sub	local02, #1
18ca8                 | LR__2510
18ca8     7F 20 06 F1 | 	add	local02, #127
18cac     17 20 66 F0 | 	shl	local02, #23
18cb0     12 13 02 F6 | 	mov	arg01, local04
18cb4     00 80 26 FF 
18cb8     00 14 06 F6 | 	mov	arg02, ##1291845632
18cbc     14 F5 BF FD | 	call	#__system___float_mul
18cc0     FD 12 02 F6 | 	mov	arg01, result1
18cc4     00 14 06 F6 | 	mov	arg02, #0
18cc8     D0 F9 BF FD | 	call	#__system___float_tointeger
18ccc     FD 24 0A F6 | 	mov	local04, result1 wz
18cd0     10 FB 01 A6 |  if_e	mov	result1, local02
18cd4     24 00 90 AD |  if_e	jmp	#LR__2511
18cd8     3E 24 26 F4 | 	bith	local04, #62
18cdc     0F 24 62 FD | 	qexp	local04
18ce0     10 13 02 F6 | 	mov	arg01, local02
18ce4     18 14 62 FD | 	getqx	arg02
18ce8     01 14 06 F1 | 	add	arg02, #1
18cec     01 14 46 F0 | 	shr	arg02, #1
18cf0     00 80 1F FF 
18cf4     00 14 06 F1 | 	add	arg02, ##1056964608
18cf8     D8 F4 BF FD | 	call	#__system___float_mul
18cfc                 | LR__2511
18cfc     A7 F0 03 F6 | 	mov	ptra, fp
18d00     B2 00 A0 FD | 	call	#popregs_
18d04                 | __system____builtin_exp2f_ret
18d04     2D 00 64 FD | 	ret
18d08                 | 
18d08                 | __system____builtin_log2f
18d08     06 4A 05 F6 | 	mov	COUNT_, #6
18d0c     A8 00 A0 FD | 	call	#pushregs_
18d10     09 1F 02 F6 | 	mov	local01, arg01
18d14     09 21 0A F6 | 	mov	local02, arg01 wz
18d18     00 00 40 5F 
18d1c     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
18d20     00 40 00 AF 
18d24     00 FA 65 A6 |  if_e	neg	result1, ##8388608
18d28     08 01 90 AD |  if_e	jmp	#LR__2524
18d2c     00 20 56 F2 | 	cmps	local02, #0 wc
18d30     00 E0 3F CF 
18d34     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
18d38     F8 00 90 CD |  if_b	jmp	#LR__2524
18d3c     0F 13 02 F6 | 	mov	arg01, local01
18d40     00 90 20 FF 
18d44     00 14 06 F6 | 	mov	arg02, ##1092616192
18d48     01 16 06 F6 | 	mov	arg03, #1
18d4c     B8 F8 BF FD | 	call	#__system___float_cmp
18d50     00 FA 0D F2 | 	cmp	result1, #0 wz
18d54     4D 2A 20 AF 
18d58     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
18d5c     D4 00 90 AD |  if_e	jmp	#LR__2524
18d60     0F 13 02 F6 | 	mov	arg01, local01
18d64     FC 16 20 FF 
18d68     54 14 06 F6 | 	mov	arg02, ##1076754516
18d6c     01 16 06 F6 | 	mov	arg03, #1
18d70     94 F8 BF FD | 	call	#__system___float_cmp
18d74     00 FA 0D F2 | 	cmp	result1, #0 wz
18d78     55 DC 1F AF 
18d7c     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
18d80     B0 00 90 AD |  if_e	jmp	#LR__2524
18d84     10 23 02 F6 | 	mov	local03, local02
18d88     17 22 46 F0 | 	shr	local03, #23
18d8c     11 23 E2 F8 | 	getbyte	local03, local03, #0
18d90     17 21 06 F4 | 	bitl	local02, #279
18d94     10 25 02 F6 | 	mov	local04, local02
18d98     FF 22 0E F2 | 	cmp	local03, #255 wz
18d9c     1C 00 90 5D |  if_ne	jmp	#LR__2520
18da0     00 24 0E F2 | 	cmp	local04, #0 wz
18da4     00 C0 3F 5F 
18da8     00 26 06 56 |  if_ne	mov	local05, ##2139095040
18dac     00 E0 3F AF 
18db0     00 26 06 A6 |  if_e	mov	local05, ##2143289344
18db4     13 FB 01 F6 | 	mov	result1, local05
18db8     78 00 90 FD | 	jmp	#LR__2524
18dbc                 | LR__2520
18dbc     00 22 0E F2 | 	cmp	local03, #0 wz
18dc0     17 24 26 54 |  if_ne	bith	local04, #23
18dc4     7F 22 86 51 |  if_ne	sub	local03, #127
18dc8     28 00 90 5D |  if_ne	jmp	#LR__2523
18dcc     00 24 0E F2 | 	cmp	local04, #0 wz
18dd0     00 40 00 AF 
18dd4     00 FA 65 A6 |  if_e	neg	result1, ##8388608
18dd8     58 00 90 AD |  if_e	jmp	#LR__2524
18ddc     7E 22 66 F6 | 	neg	local03, #126
18de0     97 08 48 FB | 	callpa	#(@LR__2522-@LR__2521)>>2,fcache_load_ptr_
18de4                 | LR__2521
18de4     17 24 2E F4 | 	testbn	local04, #23 wz
18de8     01 24 66 A0 |  if_e	shl	local04, #1
18dec     01 22 06 A1 |  if_e	add	local03, #1
18df0     F0 FF 9F AD |  if_e	jmp	#LR__2521
18df4                 | LR__2522
18df4                 | LR__2523
18df4     0E 24 62 FD | 	qlog	local04
18df8     01 22 86 F1 | 	sub	local03, #1
18dfc     11 13 52 F6 | 	abs	arg01, local03 wc
18e00     1F 28 C6 C9 |  if_b	decod	local06, #31
18e04     00 28 06 36 |  if_ae	mov	local06, #0
18e08     18 26 62 FD | 	getqx	local05
18e0c     9B 26 06 F4 | 	bitl	local05, #155
18e10     08 26 06 F1 | 	add	local05, #8
18e14     04 26 46 F0 | 	shr	local05, #4
18e18     00 C0 1F FF 
18e1c     00 26 06 F1 | 	add	local05, ##1065353216
18e20     84 F0 BF FD | 	call	#__system___float_fromuns
18e24     14 FB 61 F5 | 	xor	result1, local06
18e28     FD 14 02 F6 | 	mov	arg02, result1
18e2c     13 13 02 F6 | 	mov	arg01, local05
18e30     A8 F0 BF FD | 	call	#__system___float_add
18e34                 | LR__2524
18e34     A7 F0 03 F6 | 	mov	ptra, fp
18e38     B2 00 A0 FD | 	call	#popregs_
18e3c                 | __system____builtin_log2f_ret
18e3c     2D 00 64 FD | 	ret
18e40                 | 
18e40                 | __system____builtin_powf
18e40     04 4A 05 F6 | 	mov	COUNT_, #4
18e44     A8 00 A0 FD | 	call	#pushregs_
18e48     09 1F 02 F6 | 	mov	local01, arg01
18e4c     0A 21 02 F6 | 	mov	local02, arg02
18e50     10 13 02 F6 | 	mov	arg01, local02
18e54     00 14 06 F6 | 	mov	arg02, #0
18e58     40 F8 BF FD | 	call	#__system___float_tointeger
18e5c     FD 22 02 F6 | 	mov	local03, result1
18e60     11 13 52 F6 | 	abs	arg01, local03 wc
18e64     1F 24 C6 C9 |  if_b	decod	local04, #31
18e68     00 24 06 36 |  if_ae	mov	local04, #0
18e6c     38 F0 BF FD | 	call	#__system___float_fromuns
18e70     12 FB 61 F5 | 	xor	result1, local04
18e74     FD 12 02 F6 | 	mov	arg01, result1
18e78     10 15 02 F6 | 	mov	arg02, local02
18e7c     01 16 06 F6 | 	mov	arg03, #1
18e80     84 F7 BF FD | 	call	#__system___float_cmp
18e84     00 FA 0D F2 | 	cmp	result1, #0 wz
18e88     18 00 90 5D |  if_ne	jmp	#LR__2530
18e8c     00 C0 1F FF 
18e90     00 12 06 F6 | 	mov	arg01, ##1065353216
18e94     0F 15 02 F6 | 	mov	arg02, local01
18e98     11 17 02 F6 | 	mov	arg03, local03
18e9c     68 00 B0 FD | 	call	#__system___float_pow_n
18ea0     58 00 90 FD | 	jmp	#LR__2531
18ea4                 | LR__2530
18ea4     0F 13 02 F6 | 	mov	arg01, local01
18ea8     00 14 06 F6 | 	mov	arg02, #0
18eac     01 16 06 F6 | 	mov	arg03, #1
18eb0     54 F7 BF FD | 	call	#__system___float_cmp
18eb4     00 FA 55 F2 | 	cmps	result1, #0 wc
18eb8     00 E0 3F CF 
18ebc     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
18ec0     38 00 90 CD |  if_b	jmp	#LR__2531
18ec4     0F 13 02 F6 | 	mov	arg01, local01
18ec8     00 14 06 F6 | 	mov	arg02, #0
18ecc     01 16 06 F6 | 	mov	arg03, #1
18ed0     34 F7 BF FD | 	call	#__system___float_cmp
18ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
18ed8     00 FA 05 A6 |  if_e	mov	result1, #0
18edc     1C 00 90 AD |  if_e	jmp	#LR__2531
18ee0     0F 13 02 F6 | 	mov	arg01, local01
18ee4     20 FE BF FD | 	call	#__system____builtin_log2f
18ee8     FD 12 02 F6 | 	mov	arg01, result1
18eec     10 15 02 F6 | 	mov	arg02, local02
18ef0     E0 F2 BF FD | 	call	#__system___float_mul
18ef4     FD 12 02 F6 | 	mov	arg01, result1
18ef8     F8 FC BF FD | 	call	#__system____builtin_exp2f
18efc                 | LR__2531
18efc     A7 F0 03 F6 | 	mov	ptra, fp
18f00     B2 00 A0 FD | 	call	#popregs_
18f04                 | __system____builtin_powf_ret
18f04     2D 00 64 FD | 	ret
18f08                 | 
18f08                 | __system___float_pow_n
18f08     05 4A 05 F6 | 	mov	COUNT_, #5
18f0c     A8 00 A0 FD | 	call	#pushregs_
18f10     09 1F 02 F6 | 	mov	local01, arg01
18f14     0A 21 02 F6 | 	mov	local02, arg02
18f18     0B 23 02 F6 | 	mov	local03, arg03
18f1c     00 22 56 F2 | 	cmps	local03, #0 wc
18f20     18 00 90 3D |  if_ae	jmp	#LR__2540
18f24     01 24 06 F6 | 	mov	local04, #1
18f28     11 23 62 F6 | 	neg	local03, local03
18f2c     00 22 56 F2 | 	cmps	local03, #0 wc
18f30     00 FA 05 C6 |  if_b	mov	result1, #0
18f34     94 00 90 CD |  if_b	jmp	#LR__2548
18f38     04 00 90 FD | 	jmp	#LR__2541
18f3c                 | LR__2540
18f3c     00 24 06 F6 | 	mov	local04, #0
18f40                 | LR__2541
18f40     00 C0 1F FF 
18f44     00 26 06 F6 | 	mov	local05, ##1065353216
18f48                 | LR__2542
18f48     01 22 56 F2 | 	cmps	local03, #1 wc
18f4c     30 00 90 CD |  if_b	jmp	#LR__2544
18f50     01 22 CE F7 | 	test	local03, #1 wz
18f54     10 00 90 AD |  if_e	jmp	#LR__2543
18f58     13 13 02 F6 | 	mov	arg01, local05
18f5c     10 15 02 F6 | 	mov	arg02, local02
18f60     70 F2 BF FD | 	call	#__system___float_mul
18f64     FD 26 02 F6 | 	mov	local05, result1
18f68                 | LR__2543
18f68     01 22 C6 F0 | 	sar	local03, #1
18f6c     10 13 02 F6 | 	mov	arg01, local02
18f70     10 15 02 F6 | 	mov	arg02, local02
18f74     5C F2 BF FD | 	call	#__system___float_mul
18f78     FD 20 02 F6 | 	mov	local02, result1
18f7c     C8 FF 9F FD | 	jmp	#LR__2542
18f80                 | LR__2544
18f80     00 24 0E F2 | 	cmp	local04, #0 wz
18f84     14 00 90 AD |  if_e	jmp	#LR__2545
18f88     0F 13 02 F6 | 	mov	arg01, local01
18f8c     13 15 02 F6 | 	mov	arg02, local05
18f90     44 F4 BF FD | 	call	#__system___float_div
18f94     FD 26 02 F6 | 	mov	local05, result1
18f98     2C 00 90 FD | 	jmp	#LR__2547
18f9c                 | LR__2545
18f9c     0F 13 02 F6 | 	mov	arg01, local01
18fa0     00 C0 1F FF 
18fa4     00 14 06 F6 | 	mov	arg02, ##1065353216
18fa8     01 16 06 F6 | 	mov	arg03, #1
18fac     58 F6 BF FD | 	call	#__system___float_cmp
18fb0     00 FA 0D F2 | 	cmp	result1, #0 wz
18fb4     10 00 90 AD |  if_e	jmp	#LR__2546
18fb8     0F 13 02 F6 | 	mov	arg01, local01
18fbc     13 15 02 F6 | 	mov	arg02, local05
18fc0     10 F2 BF FD | 	call	#__system___float_mul
18fc4     FD 26 02 F6 | 	mov	local05, result1
18fc8                 | LR__2546
18fc8                 | LR__2547
18fc8     13 FB 01 F6 | 	mov	result1, local05
18fcc                 | LR__2548
18fcc     A7 F0 03 F6 | 	mov	ptra, fp
18fd0     B2 00 A0 FD | 	call	#popregs_
18fd4                 | __system___float_pow_n_ret
18fd4     2D 00 64 FD | 	ret
18fd8                 | 
18fd8                 | __system___gc_ptrs
18fd8     EC 00 02 F6 | 	mov	_var01, __heap_ptr
18fdc     00 03 02 F6 | 	mov	_var02, _var01
18fe0     F3 01 00 FF 
18fe4     F8 03 06 F1 | 	add	_var02, ##255992
18fe8     00 FD 09 FB | 	rdlong	result2, _var01 wz
18fec     74 00 90 5D |  if_ne	jmp	#LR__2550
18ff0     01 FD 01 F6 | 	mov	result2, _var02
18ff4     00 FD 81 F1 | 	sub	result2, _var01
18ff8     00 03 58 FC | 	wrword	#1, _var01
18ffc     00 FB 01 F6 | 	mov	result1, _var01
19000     02 FA 05 F1 | 	add	result1, #2
19004     36 00 80 FF 
19008     FD 20 59 FC | 	wrword	##27792, result1
1900c     00 FB 01 F6 | 	mov	result1, _var01
19010     04 FA 05 F1 | 	add	result1, #4
19014     FD 00 58 FC | 	wrword	#0, result1
19018     00 FB 01 F6 | 	mov	result1, _var01
1901c     06 FA 05 F1 | 	add	result1, #6
19020     FD 02 58 FC | 	wrword	#1, result1
19024     10 00 06 F1 | 	add	_var01, #16
19028     FE FC 51 F6 | 	abs	result2, result2 wc
1902c     04 FC 45 F0 | 	shr	result2, #4
19030     FE FC 81 F6 | 	negc	result2, result2
19034     00 FD 51 FC | 	wrword	result2, _var01
19038     00 FD 01 F6 | 	mov	result2, _var01
1903c     02 FC 05 F1 | 	add	result2, #2
19040     36 00 80 FF 
19044     FE 1E 59 FC | 	wrword	##27791, result2
19048     00 FD 01 F6 | 	mov	result2, _var01
1904c     04 FC 05 F1 | 	add	result2, #4
19050     FE 00 58 FC | 	wrword	#0, result2
19054     00 FD 01 F6 | 	mov	result2, _var01
19058     06 FC 05 F1 | 	add	result2, #6
1905c     FE 00 58 FC | 	wrword	#0, result2
19060     10 00 86 F1 | 	sub	_var01, #16
19064                 | LR__2550
19064     00 FB 01 F6 | 	mov	result1, _var01
19068     01 FD 01 F6 | 	mov	result2, _var02
1906c                 | __system___gc_ptrs_ret
1906c     2D 00 64 FD | 	ret
19070                 | 
19070                 | __system___gc_tryalloc
19070     0B 4A 05 F6 | 	mov	COUNT_, #11
19074     A8 00 A0 FD | 	call	#pushregs_
19078     09 1F 02 F6 | 	mov	local01, arg01
1907c     0A 21 02 F6 | 	mov	local02, arg02
19080     54 FF BF FD | 	call	#__system___gc_ptrs
19084     FD 22 02 F6 | 	mov	local03, result1
19088     FE 24 02 F6 | 	mov	local04, result2
1908c     11 27 02 F6 | 	mov	local05, local03
19090     00 28 06 F6 | 	mov	local06, #0
19094     97 1E 48 FB | 	callpa	#(@LR__2561-@LR__2560)>>2,fcache_load_ptr_
19098                 | LR__2560
19098     13 2B 02 F6 | 	mov	local07, local05
1909c     06 26 06 F1 | 	add	local05, #6
190a0     13 15 EA FA | 	rdword	arg02, local05 wz
190a4     11 13 02 F6 | 	mov	arg01, local03
190a8     00 FA 05 A6 |  if_e	mov	result1, #0
190ac     04 14 66 50 |  if_ne	shl	arg02, #4
190b0     0A 13 02 51 |  if_ne	add	arg01, arg02
190b4     09 FB 01 56 |  if_ne	mov	result1, arg01
190b8     FD 26 0A F6 | 	mov	local05, result1 wz
190bc     13 29 E2 5A |  if_ne	rdword	local06, local05
190c0     00 26 0E F2 | 	cmp	local05, #0 wz
190c4     12 27 52 52 |  if_ne	cmps	local05, local04 wc
190c8     08 00 90 1D |  if_a	jmp	#LR__2562
190cc     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
190d0     C4 FF 9F 1D |  if_a	jmp	#LR__2560
190d4                 | LR__2561
190d4                 | LR__2562
190d4     00 26 0E F2 | 	cmp	local05, #0 wz
190d8     13 FB 01 A6 |  if_e	mov	result1, local05
190dc     3C 01 90 AD |  if_e	jmp	#LR__2565
190e0     13 FD 01 F6 | 	mov	result2, local05
190e4     06 FC 05 F1 | 	add	result2, #6
190e8     FE 2C E2 FA | 	rdword	local08, result2
190ec     14 1F 52 F2 | 	cmps	local01, local06 wc
190f0     C0 00 90 3D |  if_ae	jmp	#LR__2564
190f4     13 1F 52 FC | 	wrword	local01, local05
190f8     13 13 02 F6 | 	mov	arg01, local05
190fc     0F 2D 02 F6 | 	mov	local08, local01
19100     04 2C 66 F0 | 	shl	local08, #4
19104     16 13 02 F1 | 	add	arg01, local08
19108     0F 29 82 F1 | 	sub	local06, local01
1910c     09 29 52 FC | 	wrword	local06, arg01
19110     09 2D 02 F6 | 	mov	local08, arg01
19114     02 2C 06 F1 | 	add	local08, #2
19118     36 00 80 FF 
1911c     16 1F 59 FC | 	wrword	##27791, local08
19120     13 15 0A F6 | 	mov	arg02, local05 wz
19124     00 FA 05 A6 |  if_e	mov	result1, #0
19128     11 15 82 51 |  if_ne	sub	arg02, local03
1912c     04 14 46 50 |  if_ne	shr	arg02, #4
19130     0A FB 01 56 |  if_ne	mov	result1, arg02
19134     09 2D 02 F6 | 	mov	local08, arg01
19138     04 2C 06 F1 | 	add	local08, #4
1913c     16 FB 51 FC | 	wrword	result1, local08
19140     13 2D 02 F6 | 	mov	local08, local05
19144     06 2C 06 F1 | 	add	local08, #6
19148     09 15 02 F6 | 	mov	arg02, arg01
1914c     16 2D E2 FA | 	rdword	local08, local08
19150     06 14 06 F1 | 	add	arg02, #6
19154     0A 2D 52 FC | 	wrword	local08, arg02
19158     09 2F 02 F6 | 	mov	local09, arg01
1915c     17 15 0A F6 | 	mov	arg02, local09 wz
19160     00 FA 05 A6 |  if_e	mov	result1, #0
19164     11 15 82 51 |  if_ne	sub	arg02, local03
19168     04 14 46 50 |  if_ne	shr	arg02, #4
1916c     0A FB 01 56 |  if_ne	mov	result1, arg02
19170     FD 2C 02 F6 | 	mov	local08, result1
19174     09 31 EA FA | 	rdword	local10, arg01 wz
19178     00 FA 05 A6 |  if_e	mov	result1, #0
1917c     04 30 66 50 |  if_ne	shl	local10, #4
19180     18 13 02 51 |  if_ne	add	arg01, local10
19184     09 FB 01 56 |  if_ne	mov	result1, arg01
19188     FD 32 0A F6 | 	mov	local11, result1 wz
1918c     24 00 90 AD |  if_e	jmp	#LR__2563
19190     12 33 52 F2 | 	cmps	local11, local04 wc
19194     1C 00 90 3D |  if_ae	jmp	#LR__2563
19198     17 15 0A F6 | 	mov	arg02, local09 wz
1919c     00 FA 05 A6 |  if_e	mov	result1, #0
191a0     11 15 82 51 |  if_ne	sub	arg02, local03
191a4     04 14 46 50 |  if_ne	shr	arg02, #4
191a8     0A FB 01 56 |  if_ne	mov	result1, arg02
191ac     04 32 06 F1 | 	add	local11, #4
191b0     19 FB 51 FC | 	wrword	result1, local11
191b4                 | LR__2563
191b4                 | LR__2564
191b4     06 2A 06 F1 | 	add	local07, #6
191b8     15 2D 52 FC | 	wrword	local08, local07
191bc     36 00 00 FF 
191c0     80 2E 06 F6 | 	mov	local09, ##27776
191c4     10 2F 42 F5 | 	or	local09, local02
191c8     00 FA 05 F6 | 	mov	result1, #0
191cc     01 FA 61 FD | 	cogid	result1
191d0     FD 2E 42 F5 | 	or	local09, result1
191d4     13 33 02 F6 | 	mov	local11, local05
191d8     02 32 06 F1 | 	add	local11, #2
191dc     19 2F 52 FC | 	wrword	local09, local11
191e0     11 2F 02 F6 | 	mov	local09, local03
191e4     08 2E 06 F1 | 	add	local09, #8
191e8     13 33 02 F6 | 	mov	local11, local05
191ec     17 2F E2 FA | 	rdword	local09, local09
191f0     06 32 06 F1 | 	add	local11, #6
191f4     19 2F 52 FC | 	wrword	local09, local11
191f8     13 15 0A F6 | 	mov	arg02, local05 wz
191fc     00 FA 05 A6 |  if_e	mov	result1, #0
19200     11 15 82 51 |  if_ne	sub	arg02, local03
19204     04 14 46 50 |  if_ne	shr	arg02, #4
19208     0A FB 01 56 |  if_ne	mov	result1, arg02
1920c     08 22 06 F1 | 	add	local03, #8
19210     11 FB 51 FC | 	wrword	result1, local03
19214     08 26 06 F1 | 	add	local05, #8
19218     13 FB 01 F6 | 	mov	result1, local05
1921c                 | LR__2565
1921c     A7 F0 03 F6 | 	mov	ptra, fp
19220     B2 00 A0 FD | 	call	#popregs_
19224                 | __system___gc_tryalloc_ret
19224     2D 00 64 FD | 	ret
19228                 | 
19228                 | __system___gc_alloc_managed
19228     01 4A 05 F6 | 	mov	COUNT_, #1
1922c     A8 00 A0 FD | 	call	#pushregs_
19230     09 1F 02 F6 | 	mov	local01, arg01
19234     00 14 06 F6 | 	mov	arg02, #0
19238     1C 00 B0 FD | 	call	#__system___gc_doalloc
1923c     FD 14 0A F6 | 	mov	arg02, result1 wz
19240     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
19244     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
19248     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
1924c     A7 F0 03 F6 | 	mov	ptra, fp
19250     B2 00 A0 FD | 	call	#popregs_
19254                 | __system___gc_alloc_managed_ret
19254     2D 00 64 FD | 	ret
19258                 | 
19258                 | __system___gc_doalloc
19258     06 4A 05 F6 | 	mov	COUNT_, #6
1925c     A8 00 A0 FD | 	call	#pushregs_
19260     09 1F 0A F6 | 	mov	local01, arg01 wz
19264     0A 21 02 F6 | 	mov	local02, arg02
19268     00 FA 05 A6 |  if_e	mov	result1, #0
1926c     8C 00 90 AD |  if_e	jmp	#LR__2577
19270     17 1E 06 F1 | 	add	local01, #23
19274     0F 1E 26 F5 | 	andn	local01, #15
19278     04 1E 46 F0 | 	shr	local01, #4
1927c     1C E8 05 F1 | 	add	ptr___system__dat__, #28
19280     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
19284     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
19288     34 C5 BF FD | 	call	#__system___lockmem
1928c     0F 13 02 F6 | 	mov	arg01, local01
19290     10 15 02 F6 | 	mov	arg02, local02
19294     D8 FD BF FD | 	call	#__system___gc_tryalloc
19298     FD 22 0A F6 | 	mov	local03, result1 wz
1929c     14 00 90 5D |  if_ne	jmp	#LR__2570
192a0     70 03 B0 FD | 	call	#__system___gc_docollect
192a4     0F 13 02 F6 | 	mov	arg01, local01
192a8     10 15 02 F6 | 	mov	arg02, local02
192ac     C0 FD BF FD | 	call	#__system___gc_tryalloc
192b0     FD 22 02 F6 | 	mov	local03, result1
192b4                 | LR__2570
192b4     1C E8 05 F1 | 	add	ptr___system__dat__, #28
192b8     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
192bc     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
192c0     09 01 68 FC | 	wrlong	#0, arg01
192c4     00 22 0E F2 | 	cmp	local03, #0 wz
192c8     2C 00 90 AD |  if_e	jmp	#LR__2576
192cc     04 1E 66 F0 | 	shl	local01, #4
192d0     08 1E 86 F1 | 	sub	local01, #8
192d4     0F 25 52 F6 | 	abs	local04, local01 wc
192d8     02 24 46 F0 | 	shr	local04, #2
192dc     12 27 8A F6 | 	negc	local05, local04 wz
192e0     11 29 02 F6 | 	mov	local06, local03
192e4     10 00 90 AD |  if_e	jmp	#LR__2575
192e8     97 06 48 FB | 	callpa	#(@LR__2573-@LR__2571)>>2,fcache_load_ptr_
192ec                 | LR__2571
192ec     13 05 D8 FC | 	rep	@LR__2574, local05
192f0                 | LR__2572
192f0     14 01 68 FC | 	wrlong	#0, local06
192f4     04 28 06 F1 | 	add	local06, #4
192f8                 | LR__2573
192f8                 | LR__2574
192f8                 | LR__2575
192f8                 | LR__2576
192f8     11 FB 01 F6 | 	mov	result1, local03
192fc                 | LR__2577
192fc     A7 F0 03 F6 | 	mov	ptra, fp
19300     B2 00 A0 FD | 	call	#popregs_
19304                 | __system___gc_doalloc_ret
19304     2D 00 64 FD | 	ret
19308                 | 
19308                 | __system___gc_isvalidptr
19308     F8 16 06 F4 | 	bitl	arg03, #248
1930c     08 16 86 F1 | 	sub	arg03, #8
19310     09 17 52 F2 | 	cmps	arg03, arg01 wc
19314     08 00 90 CD |  if_b	jmp	#LR__2580
19318     0A 17 52 F2 | 	cmps	arg03, arg02 wc
1931c     08 00 90 CD |  if_b	jmp	#LR__2581
19320                 | LR__2580
19320     00 FA 05 F6 | 	mov	result1, #0
19324     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
19328                 | LR__2581
19328     0B 01 02 F6 | 	mov	_var01, arg03
1932c     09 01 62 F5 | 	xor	_var01, arg01
19330     0F 00 CE F7 | 	test	_var01, #15 wz
19334     00 FA 05 56 |  if_ne	mov	result1, #0
19338     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
1933c     0B 01 02 F6 | 	mov	_var01, arg03
19340     02 00 06 F1 | 	add	_var01, #2
19344     00 01 E2 FA | 	rdword	_var01, _var01
19348     7F 00 00 FF 
1934c     C0 01 06 F5 | 	and	_var01, ##65472
19350     36 00 00 FF 
19354     80 00 0E F2 | 	cmp	_var01, ##27776 wz
19358     00 FA 05 56 |  if_ne	mov	result1, #0
1935c     0B FB 01 A6 |  if_e	mov	result1, arg03
19360                 | __system___gc_isvalidptr_ret
19360     2D 00 64 FD | 	ret
19364                 | 
19364                 | __system___gc_free
19364     09 17 02 F6 | 	mov	arg03, arg01
19368     6C FC BF FD | 	call	#__system___gc_ptrs
1936c     FD 12 02 F6 | 	mov	arg01, result1
19370     FE 14 02 F6 | 	mov	arg02, result2
19374     90 FF BF FD | 	call	#__system___gc_isvalidptr
19378     FD 14 0A F6 | 	mov	arg02, result1 wz
1937c     28 00 90 AD |  if_e	jmp	#LR__2590
19380     1C E8 05 F1 | 	add	ptr___system__dat__, #28
19384     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
19388     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1938c     30 C4 BF FD | 	call	#__system___lockmem
19390     0A 13 02 F6 | 	mov	arg01, arg02
19394     14 00 B0 FD | 	call	#__system___gc_dofree
19398     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1939c     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
193a0     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
193a4     09 01 68 FC | 	wrlong	#0, arg01
193a8                 | LR__2590
193a8                 | __system___gc_free_ret
193a8     2D 00 64 FD | 	ret
193ac                 | 
193ac                 | __system___gc_dofree
193ac     06 4A 05 F6 | 	mov	COUNT_, #6
193b0     A8 00 A0 FD | 	call	#pushregs_
193b4     09 1F 02 F6 | 	mov	local01, arg01
193b8     1C FC BF FD | 	call	#__system___gc_ptrs
193bc     FD 20 02 F6 | 	mov	local02, result1
193c0     FE 22 02 F6 | 	mov	local03, result2
193c4     0F 15 02 F6 | 	mov	arg02, local01
193c8     02 14 06 F1 | 	add	arg02, #2
193cc     36 00 80 FF 
193d0     0A 1F 59 FC | 	wrword	##27791, arg02
193d4     0F 25 02 F6 | 	mov	local04, local01
193d8     0F 13 02 F6 | 	mov	arg01, local01
193dc     09 27 EA FA | 	rdword	local05, arg01 wz
193e0     00 FA 05 A6 |  if_e	mov	result1, #0
193e4     04 26 66 50 |  if_ne	shl	local05, #4
193e8     13 13 02 51 |  if_ne	add	arg01, local05
193ec     09 FB 01 56 |  if_ne	mov	result1, arg01
193f0     FD 28 02 F6 | 	mov	local06, result1
193f4     97 24 48 FB | 	callpa	#(@LR__2601-@LR__2600)>>2,fcache_load_ptr_
193f8                 | LR__2600
193f8     04 24 06 F1 | 	add	local04, #4
193fc     12 15 EA FA | 	rdword	arg02, local04 wz
19400     10 13 02 F6 | 	mov	arg01, local02
19404     00 FA 05 A6 |  if_e	mov	result1, #0
19408     04 14 66 50 |  if_ne	shl	arg02, #4
1940c     0A 13 02 51 |  if_ne	add	arg01, arg02
19410     09 FB 01 56 |  if_ne	mov	result1, arg01
19414     FD 24 0A F6 | 	mov	local04, result1 wz
19418     24 00 90 AD |  if_e	jmp	#LR__2602
1941c     12 13 02 F6 | 	mov	arg01, local04
19420     00 FA 05 F6 | 	mov	result1, #0
19424     02 12 06 F1 | 	add	arg01, #2
19428     09 13 E2 FA | 	rdword	arg01, arg01
1942c     36 00 00 FF 
19430     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
19434     01 FA 65 A6 |  if_e	neg	result1, #1
19438     00 FA 0D F2 | 	cmp	result1, #0 wz
1943c     B8 FF 9F AD |  if_e	jmp	#LR__2600
19440                 | LR__2601
19440                 | LR__2602
19440     00 24 0E F2 | 	cmp	local04, #0 wz
19444     10 25 02 A6 |  if_e	mov	local04, local02
19448     12 15 02 F6 | 	mov	arg02, local04
1944c     06 14 06 F1 | 	add	arg02, #6
19450     0F 13 02 F6 | 	mov	arg01, local01
19454     0A 15 E2 FA | 	rdword	arg02, arg02
19458     06 12 06 F1 | 	add	arg01, #6
1945c     09 15 52 FC | 	wrword	arg02, arg01
19460     0F 15 0A F6 | 	mov	arg02, local01 wz
19464     00 FA 05 A6 |  if_e	mov	result1, #0
19468     10 15 82 51 |  if_ne	sub	arg02, local02
1946c     04 14 46 50 |  if_ne	shr	arg02, #4
19470     0A FB 01 56 |  if_ne	mov	result1, arg02
19474     12 15 02 F6 | 	mov	arg02, local04
19478     06 14 06 F1 | 	add	arg02, #6
1947c     0A FB 51 FC | 	wrword	result1, arg02
19480     10 25 0A F2 | 	cmp	local04, local02 wz
19484     A4 00 90 AD |  if_e	jmp	#LR__2605
19488     12 13 02 F6 | 	mov	arg01, local04
1948c     09 27 EA FA | 	rdword	local05, arg01 wz
19490     00 FA 05 A6 |  if_e	mov	result1, #0
19494     04 26 66 50 |  if_ne	shl	local05, #4
19498     13 13 02 51 |  if_ne	add	arg01, local05
1949c     09 FB 01 56 |  if_ne	mov	result1, arg01
194a0     0F FB 09 F2 | 	cmp	result1, local01 wz
194a4     84 00 90 5D |  if_ne	jmp	#LR__2604
194a8     12 29 E2 FA | 	rdword	local06, local04
194ac     0F 15 E2 FA | 	rdword	arg02, local01
194b0     0A 29 02 F1 | 	add	local06, arg02
194b4     12 29 52 FC | 	wrword	local06, local04
194b8     0F 29 02 F6 | 	mov	local06, local01
194bc     02 28 06 F1 | 	add	local06, #2
194c0     14 01 58 FC | 	wrword	#0, local06
194c4     0F 13 02 F6 | 	mov	arg01, local01
194c8     09 27 EA FA | 	rdword	local05, arg01 wz
194cc     00 FA 05 A6 |  if_e	mov	result1, #0
194d0     04 26 66 50 |  if_ne	shl	local05, #4
194d4     13 13 02 51 |  if_ne	add	arg01, local05
194d8     09 FB 01 56 |  if_ne	mov	result1, arg01
194dc     FD 28 02 F6 | 	mov	local06, result1
194e0     11 29 52 F2 | 	cmps	local06, local03 wc
194e4     20 00 90 3D |  if_ae	jmp	#LR__2603
194e8     12 15 0A F6 | 	mov	arg02, local04 wz
194ec     00 FA 05 A6 |  if_e	mov	result1, #0
194f0     10 15 82 51 |  if_ne	sub	arg02, local02
194f4     04 14 46 50 |  if_ne	shr	arg02, #4
194f8     0A FB 01 56 |  if_ne	mov	result1, arg02
194fc     14 15 02 F6 | 	mov	arg02, local06
19500     04 14 06 F1 | 	add	arg02, #4
19504     0A FB 51 FC | 	wrword	result1, arg02
19508                 | LR__2603
19508     0F 15 02 F6 | 	mov	arg02, local01
1950c     06 14 06 F1 | 	add	arg02, #6
19510     12 FD 01 F6 | 	mov	result2, local04
19514     0A 15 E2 FA | 	rdword	arg02, arg02
19518     06 FC 05 F1 | 	add	result2, #6
1951c     FE 14 52 FC | 	wrword	arg02, result2
19520     06 1E 06 F1 | 	add	local01, #6
19524     0F 01 58 FC | 	wrword	#0, local01
19528     12 1F 02 F6 | 	mov	local01, local04
1952c                 | LR__2604
1952c                 | LR__2605
1952c     0F 13 02 F6 | 	mov	arg01, local01
19530     09 27 EA FA | 	rdword	local05, arg01 wz
19534     00 FA 05 A6 |  if_e	mov	result1, #0
19538     04 26 66 50 |  if_ne	shl	local05, #4
1953c     13 13 02 51 |  if_ne	add	arg01, local05
19540     09 FB 01 56 |  if_ne	mov	result1, arg01
19544     FD 14 0A F6 | 	mov	arg02, result1 wz
19548     B8 00 90 AD |  if_e	jmp	#LR__2607
1954c     11 15 52 F2 | 	cmps	arg02, local03 wc
19550     B0 00 90 3D |  if_ae	jmp	#LR__2607
19554     0A 13 02 F6 | 	mov	arg01, arg02
19558     00 FA 05 F6 | 	mov	result1, #0
1955c     02 12 06 F1 | 	add	arg01, #2
19560     09 13 E2 FA | 	rdword	arg01, arg01
19564     36 00 00 FF 
19568     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1956c     01 FA 65 A6 |  if_e	neg	result1, #1
19570     00 FA 0D F2 | 	cmp	result1, #0 wz
19574     8C 00 90 AD |  if_e	jmp	#LR__2607
19578     0F 25 02 F6 | 	mov	local04, local01
1957c     12 29 E2 FA | 	rdword	local06, local04
19580     0A 13 02 F6 | 	mov	arg01, arg02
19584     09 1F E2 FA | 	rdword	local01, arg01
19588     0F 29 02 F1 | 	add	local06, local01
1958c     12 29 52 FC | 	wrword	local06, local04
19590     09 29 02 F6 | 	mov	local06, arg01
19594     06 28 06 F1 | 	add	local06, #6
19598     12 1F 02 F6 | 	mov	local01, local04
1959c     14 29 E2 FA | 	rdword	local06, local06
195a0     06 1E 06 F1 | 	add	local01, #6
195a4     0F 29 52 FC | 	wrword	local06, local01
195a8     09 29 02 F6 | 	mov	local06, arg01
195ac     02 28 06 F1 | 	add	local06, #2
195b0     14 55 59 FC | 	wrword	#170, local06
195b4     09 29 02 F6 | 	mov	local06, arg01
195b8     06 28 06 F1 | 	add	local06, #6
195bc     14 01 58 FC | 	wrword	#0, local06
195c0     09 27 EA FA | 	rdword	local05, arg01 wz
195c4     00 FA 05 A6 |  if_e	mov	result1, #0
195c8     04 26 66 50 |  if_ne	shl	local05, #4
195cc     13 13 02 51 |  if_ne	add	arg01, local05
195d0     09 FB 01 56 |  if_ne	mov	result1, arg01
195d4     FD 28 0A F6 | 	mov	local06, result1 wz
195d8     28 00 90 AD |  if_e	jmp	#LR__2606
195dc     11 29 52 F2 | 	cmps	local06, local03 wc
195e0     20 00 90 3D |  if_ae	jmp	#LR__2606
195e4     12 15 0A F6 | 	mov	arg02, local04 wz
195e8     00 FA 05 A6 |  if_e	mov	result1, #0
195ec     10 15 82 51 |  if_ne	sub	arg02, local02
195f0     04 14 46 50 |  if_ne	shr	arg02, #4
195f4     0A FB 01 56 |  if_ne	mov	result1, arg02
195f8     14 25 02 F6 | 	mov	local04, local06
195fc     04 24 06 F1 | 	add	local04, #4
19600     12 FB 51 FC | 	wrword	result1, local04
19604                 | LR__2606
19604                 | LR__2607
19604     14 FB 01 F6 | 	mov	result1, local06
19608     A7 F0 03 F6 | 	mov	ptra, fp
1960c     B2 00 A0 FD | 	call	#popregs_
19610                 | __system___gc_dofree_ret
19610     2D 00 64 FD | 	ret
19614                 | 
19614                 | __system___gc_docollect
19614     05 4A 05 F6 | 	mov	COUNT_, #5
19618     A8 00 A0 FD | 	call	#pushregs_
1961c     B8 F9 BF FD | 	call	#__system___gc_ptrs
19620     FE 1E 02 F6 | 	mov	local01, result2
19624     FD 20 02 F6 | 	mov	local02, result1
19628     10 13 02 F6 | 	mov	arg01, local02
1962c     09 23 EA FA | 	rdword	local03, arg01 wz
19630     00 FA 05 A6 |  if_e	mov	result1, #0
19634     04 22 66 50 |  if_ne	shl	local03, #4
19638     11 13 02 51 |  if_ne	add	arg01, local03
1963c     09 FB 01 56 |  if_ne	mov	result1, arg01
19640     FD 24 0A F6 | 	mov	local04, result1 wz
19644     00 FA 05 F6 | 	mov	result1, #0
19648     01 FA 61 FD | 	cogid	result1
1964c     FD 26 02 F6 | 	mov	local05, result1
19650     48 00 90 AD |  if_e	jmp	#LR__2612
19654     97 22 48 FB | 	callpa	#(@LR__2611-@LR__2610)>>2,fcache_load_ptr_
19658                 | LR__2610
19658     0F 25 52 F2 | 	cmps	local04, local01 wc
1965c     3C 00 90 3D |  if_ae	jmp	#LR__2612
19660     12 15 02 F6 | 	mov	arg02, local04
19664     02 14 06 F1 | 	add	arg02, #2
19668     0A 15 E2 FA | 	rdword	arg02, arg02
1966c     20 14 26 F5 | 	andn	arg02, #32
19670     12 13 02 F6 | 	mov	arg01, local04
19674     02 12 06 F1 | 	add	arg01, #2
19678     09 15 52 FC | 	wrword	arg02, arg01
1967c     12 13 02 F6 | 	mov	arg01, local04
19680     09 23 EA FA | 	rdword	local03, arg01 wz
19684     00 FA 05 A6 |  if_e	mov	result1, #0
19688     04 22 66 50 |  if_ne	shl	local03, #4
1968c     11 13 02 51 |  if_ne	add	arg01, local03
19690     09 FB 01 56 |  if_ne	mov	result1, arg01
19694     FD 24 0A F6 | 	mov	local04, result1 wz
19698     BC FF 9F 5D |  if_ne	jmp	#LR__2610
1969c                 | LR__2611
1969c                 | LR__2612
1969c     00 22 06 F6 | 	mov	local03, #0
196a0     00 12 06 F6 | 	mov	arg01, #0
196a4     F0 C0 BF FD | 	call	#__system____topofstack
196a8     FD 14 02 F6 | 	mov	arg02, result1
196ac     11 13 02 F6 | 	mov	arg01, local03
196b0     90 00 B0 FD | 	call	#__system___gc_markhub
196b4     1C 01 B0 FD | 	call	#__system___gc_markcog
196b8     10 13 02 F6 | 	mov	arg01, local02
196bc     09 23 EA FA | 	rdword	local03, arg01 wz
196c0     00 FA 05 A6 |  if_e	mov	result1, #0
196c4     04 22 66 50 |  if_ne	shl	local03, #4
196c8     11 13 02 51 |  if_ne	add	arg01, local03
196cc     09 FB 01 56 |  if_ne	mov	result1, arg01
196d0     FD 20 0A F6 | 	mov	local02, result1 wz
196d4     60 00 90 AD |  if_e	jmp	#LR__2616
196d8                 | LR__2613
196d8     10 25 02 F6 | 	mov	local04, local02
196dc     12 13 02 F6 | 	mov	arg01, local04
196e0     09 23 EA FA | 	rdword	local03, arg01 wz
196e4     00 FA 05 A6 |  if_e	mov	result1, #0
196e8     04 22 66 50 |  if_ne	shl	local03, #4
196ec     11 13 02 51 |  if_ne	add	arg01, local03
196f0     09 FB 01 56 |  if_ne	mov	result1, arg01
196f4     FD 20 02 F6 | 	mov	local02, result1
196f8     12 15 02 F6 | 	mov	arg02, local04
196fc     02 14 06 F1 | 	add	arg02, #2
19700     0A 15 E2 FA | 	rdword	arg02, arg02
19704     20 14 CE F7 | 	test	arg02, #32 wz
19708     10 14 CE A7 |  if_e	test	arg02, #16 wz
1970c     1C 00 90 5D |  if_ne	jmp	#LR__2615
19710     0A 15 42 F8 | 	getnib	arg02, arg02, #0
19714     13 15 0A F2 | 	cmp	arg02, local05 wz
19718     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
1971c     0C 00 90 5D |  if_ne	jmp	#LR__2614
19720     12 13 02 F6 | 	mov	arg01, local04
19724     84 FC BF FD | 	call	#__system___gc_dofree
19728     FD 20 02 F6 | 	mov	local02, result1
1972c                 | LR__2614
1972c                 | LR__2615
1972c     00 20 0E F2 | 	cmp	local02, #0 wz
19730     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
19734     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__2613
19738                 | LR__2616
19738     A7 F0 03 F6 | 	mov	ptra, fp
1973c     B2 00 A0 FD | 	call	#popregs_
19740                 | __system___gc_docollect_ret
19740     2D 00 64 FD | 	ret
19744                 | 
19744                 | __system___gc_markhub
19744     04 4A 05 F6 | 	mov	COUNT_, #4
19748     A8 00 A0 FD | 	call	#pushregs_
1974c     09 1F 02 F6 | 	mov	local01, arg01
19750     0A 21 02 F6 | 	mov	local02, arg02
19754     80 F8 BF FD | 	call	#__system___gc_ptrs
19758     FD 22 02 F6 | 	mov	local03, result1
1975c     FE 24 02 F6 | 	mov	local04, result2
19760                 | LR__2620
19760     10 1F 52 F2 | 	cmps	local01, local02 wc
19764     60 00 90 3D |  if_ae	jmp	#LR__2621
19768     0F 17 02 FB | 	rdlong	arg03, local01
1976c     04 1E 06 F1 | 	add	local01, #4
19770     12 15 02 F6 | 	mov	arg02, local04
19774     11 13 02 F6 | 	mov	arg01, local03
19778     8C FB BF FD | 	call	#__system___gc_isvalidptr
1977c     FD 16 0A F6 | 	mov	arg03, result1 wz
19780     DC FF 9F AD |  if_e	jmp	#LR__2620
19784     0B 13 02 F6 | 	mov	arg01, arg03
19788     00 FA 05 F6 | 	mov	result1, #0
1978c     02 12 06 F1 | 	add	arg01, #2
19790     09 13 E2 FA | 	rdword	arg01, arg01
19794     36 00 00 FF 
19798     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1979c     01 FA 65 A6 |  if_e	neg	result1, #1
197a0     00 FA 0D F2 | 	cmp	result1, #0 wz
197a4     B8 FF 9F 5D |  if_ne	jmp	#LR__2620
197a8     0B FD 01 F6 | 	mov	result2, arg03
197ac     02 FC 05 F1 | 	add	result2, #2
197b0     FE FC E1 FA | 	rdword	result2, result2
197b4     0F FC 25 F5 | 	andn	result2, #15
197b8     2E FC 45 F5 | 	or	result2, #46
197bc     02 16 06 F1 | 	add	arg03, #2
197c0     0B FD 51 FC | 	wrword	result2, arg03
197c4     98 FF 9F FD | 	jmp	#LR__2620
197c8                 | LR__2621
197c8     A7 F0 03 F6 | 	mov	ptra, fp
197cc     B2 00 A0 FD | 	call	#popregs_
197d0                 | __system___gc_markhub_ret
197d0     2D 00 64 FD | 	ret
197d4                 | 
197d4                 | __system___gc_markcog
197d4     04 4A 05 F6 | 	mov	COUNT_, #4
197d8     A8 00 A0 FD | 	call	#pushregs_
197dc     F8 F7 BF FD | 	call	#__system___gc_ptrs
197e0     FD 1E 02 F6 | 	mov	local01, result1
197e4     FE 20 02 F6 | 	mov	local02, result2
197e8     EF 23 06 F6 | 	mov	local03, #495
197ec                 | LR__2630
197ec                 | 	'.live	local03
197ec     00 22 96 F9 | 	alts	local03, #0
197f0     11 25 02 F6 | 	mov	local04, local03
197f4     0F 13 02 F6 | 	mov	arg01, local01
197f8     10 15 02 F6 | 	mov	arg02, local02
197fc     12 17 02 F6 | 	mov	arg03, local04
19800     04 FB BF FD | 	call	#__system___gc_isvalidptr
19804     00 FA 0D F2 | 	cmp	result1, #0 wz
19808     18 00 90 AD |  if_e	jmp	#LR__2631
1980c     FD 24 02 F6 | 	mov	local04, result1
19810     02 24 06 F1 | 	add	local04, #2
19814     12 25 E2 FA | 	rdword	local04, local04
19818     20 24 46 F5 | 	or	local04, #32
1981c     02 FA 05 F1 | 	add	result1, #2
19820     FD 24 52 FC | 	wrword	local04, result1
19824                 | LR__2631
19824     01 22 86 F1 | 	sub	local03, #1
19828     00 22 56 F2 | 	cmps	local03, #0 wc
1982c     BC FF 9F 3D |  if_ae	jmp	#LR__2630
19830     A7 F0 03 F6 | 	mov	ptra, fp
19834     B2 00 A0 FD | 	call	#popregs_
19838                 | __system___gc_markcog_ret
19838     2D 00 64 FD | 	ret
1983c                 | 
1983c                 | __system__opendir
1983c     06 4A 05 F6 | 	mov	COUNT_, #6
19840     A8 00 A0 FD | 	call	#pushregs_
19844     84 E9 05 F1 | 	add	ptr___system__dat__, #388
19848     F4 1E 02 F6 | 	mov	local01, ptr___system__dat__
1984c     09 15 02 F6 | 	mov	arg02, arg01
19850     0F 13 02 F6 | 	mov	arg01, local01
19854     00 16 06 F6 | 	mov	arg03, #0
19858     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1985c     F8 C6 BF FD | 	call	#__system____getvfsforfile
19860     FD 20 0A F6 | 	mov	local02, result1 wz
19864     10 00 90 AD |  if_e	jmp	#LR__2640
19868     28 20 06 F1 | 	add	local02, #40
1986c     10 17 0A FB | 	rdlong	arg03, local02 wz
19870     28 20 86 F1 | 	sub	local02, #40
19874     14 00 90 5D |  if_ne	jmp	#LR__2641
19878                 | LR__2640
19878     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1987c     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
19880     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19884     00 FA 05 F6 | 	mov	result1, #0
19888     90 00 90 FD | 	jmp	#LR__2643
1988c                 | LR__2641
1988c     5C 12 06 F6 | 	mov	arg01, #92
19890     10 14 06 F6 | 	mov	arg02, #16
19894     C0 F9 BF FD | 	call	#__system___gc_doalloc
19898     FD 22 0A F6 | 	mov	local03, result1 wz
1989c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
198a0     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
198a4     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
198a8     00 FA 05 A6 |  if_e	mov	result1, #0
198ac     6C 00 90 AD |  if_e	jmp	#LR__2643
198b0     28 20 06 F1 | 	add	local02, #40
198b4     10 25 02 FB | 	rdlong	local04, local02
198b8     12 27 02 F6 | 	mov	local05, local04
198bc     28 20 86 F1 | 	sub	local02, #40
198c0     13 26 46 F7 | 	zerox	local05, #19
198c4     14 24 46 F0 | 	shr	local04, #20
198c8     02 24 66 F0 | 	shl	local04, #2
198cc     ED 24 02 F1 | 	add	local04, __methods__
198d0     12 25 02 FB | 	rdlong	local04, local04
198d4     11 13 02 F6 | 	mov	arg01, local03
198d8     0F 15 02 F6 | 	mov	arg02, local01
198dc     F2 28 02 F6 | 	mov	local06, objptr
198e0     13 E5 01 F6 | 	mov	objptr, local05
198e4     2D 24 62 FD | 	call	local04
198e8     14 E5 01 F6 | 	mov	objptr, local06
198ec     FD 16 0A F6 | 	mov	arg03, result1 wz
198f0     20 00 90 AD |  if_e	jmp	#LR__2642
198f4     00 16 4E F2 | 	cmps	arg03, #0 wz
198f8     20 E8 05 F1 | 	add	ptr___system__dat__, #32
198fc     F4 16 62 FC | 	wrlong	arg03, ptr___system__dat__
19900     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19904     11 13 02 F6 | 	mov	arg01, local03
19908     58 FA BF FD | 	call	#__system___gc_free
1990c     00 FA 05 F6 | 	mov	result1, #0
19910     08 00 90 FD | 	jmp	#LR__2643
19914                 | LR__2642
19914     11 21 62 FC | 	wrlong	local02, local03
19918     11 FB 01 F6 | 	mov	result1, local03
1991c                 | LR__2643
1991c     A7 F0 03 F6 | 	mov	ptra, fp
19920     B2 00 A0 FD | 	call	#popregs_
19924                 | __system__opendir_ret
19924     2D 00 64 FD | 	ret
19928                 | 
19928                 | __system__closedir
19928     04 4A 05 F6 | 	mov	COUNT_, #4
1992c     A8 00 A0 FD | 	call	#pushregs_
19930     09 1F 02 F6 | 	mov	local01, arg01
19934     0F 13 02 FB | 	rdlong	arg01, local01
19938     2C 12 06 F1 | 	add	arg01, #44
1993c     09 21 02 FB | 	rdlong	local02, arg01
19940     10 23 02 F6 | 	mov	local03, local02
19944     13 22 46 F7 | 	zerox	local03, #19
19948     14 20 46 F0 | 	shr	local02, #20
1994c     02 20 66 F0 | 	shl	local02, #2
19950     ED 20 02 F1 | 	add	local02, __methods__
19954     10 21 02 FB | 	rdlong	local02, local02
19958     0F 13 02 F6 | 	mov	arg01, local01
1995c     F2 24 02 F6 | 	mov	local04, objptr
19960     11 E5 01 F6 | 	mov	objptr, local03
19964     2D 20 62 FD | 	call	local02
19968     12 E5 01 F6 | 	mov	objptr, local04
1996c     FD 24 02 F6 | 	mov	local04, result1
19970     0F 13 02 F6 | 	mov	arg01, local01
19974     EC F9 BF FD | 	call	#__system___gc_free
19978     00 24 4E F2 | 	cmps	local04, #0 wz
1997c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19980     F4 24 62 FC | 	wrlong	local04, ptr___system__dat__
19984     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19988     01 FA 65 56 |  if_ne	neg	result1, #1
1998c     00 FA 05 A6 |  if_e	mov	result1, #0
19990     A7 F0 03 F6 | 	mov	ptra, fp
19994     B2 00 A0 FD | 	call	#popregs_
19998                 | __system__closedir_ret
19998     2D 00 64 FD | 	ret
1999c                 | 
1999c                 | __system__readdir
1999c     04 4A 05 F6 | 	mov	COUNT_, #4
199a0     A8 00 A0 FD | 	call	#pushregs_
199a4     09 15 0A FB | 	rdlong	arg02, arg01 wz
199a8     08 12 06 F1 | 	add	arg01, #8
199ac     09 1F 02 F6 | 	mov	local01, arg01
199b0     08 12 86 F1 | 	sub	arg01, #8
199b4     00 FA 05 A6 |  if_e	mov	result1, #0
199b8     5C 00 90 AD |  if_e	jmp	#LR__2651
199bc     30 14 06 F1 | 	add	arg02, #48
199c0     0A 21 02 FB | 	rdlong	local02, arg02
199c4     10 23 02 F6 | 	mov	local03, local02
199c8     13 22 46 F7 | 	zerox	local03, #19
199cc     14 20 46 F0 | 	shr	local02, #20
199d0     02 20 66 F0 | 	shl	local02, #2
199d4     ED 20 02 F1 | 	add	local02, __methods__
199d8     10 21 02 FB | 	rdlong	local02, local02
199dc     0F 15 02 F6 | 	mov	arg02, local01
199e0     F2 24 02 F6 | 	mov	local04, objptr
199e4     11 E5 01 F6 | 	mov	objptr, local03
199e8     2D 20 62 FD | 	call	local02
199ec     12 E5 01 F6 | 	mov	objptr, local04
199f0     00 FA 4D F2 | 	cmps	result1, #0 wz
199f4     1C 00 90 AD |  if_e	jmp	#LR__2650
199f8     01 FA 55 F2 | 	cmps	result1, #1 wc
199fc     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
19a00     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
19a04     F4 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
19a08     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
19a0c     00 FA 05 F6 | 	mov	result1, #0
19a10     04 00 90 FD | 	jmp	#LR__2651
19a14                 | LR__2650
19a14     0F FB 01 F6 | 	mov	result1, local01
19a18                 | LR__2651
19a18     A7 F0 03 F6 | 	mov	ptra, fp
19a1c     B2 00 A0 FD | 	call	#popregs_
19a20                 | __system__readdir_ret
19a20     2D 00 64 FD | 	ret
19a24                 | 
19a24                 | __system___openraw
19a24     15 4A 05 F6 | 	mov	COUNT_, #21
19a28     A8 00 A0 FD | 	call	#pushregs_
19a2c     09 1F 02 F6 | 	mov	local01, arg01
19a30     0A 21 02 F6 | 	mov	local02, arg02
19a34     0B 23 02 F6 | 	mov	local03, arg03
19a38     0C 25 02 F6 | 	mov	local04, arg04
19a3c     04 26 06 F6 | 	mov	local05, #4
19a40     0F 29 02 F6 | 	mov	local06, local01
19a44     00 2A 06 F6 | 	mov	local07, #0
19a48     84 E9 05 F1 | 	add	ptr___system__dat__, #388
19a4c     F4 2C 02 F6 | 	mov	local08, ptr___system__dat__
19a50     16 13 02 F6 | 	mov	arg01, local08
19a54     10 15 02 F6 | 	mov	arg02, local02
19a58     00 16 06 F6 | 	mov	arg03, #0
19a5c     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
19a60     F4 C4 BF FD | 	call	#__system____getvfsforfile
19a64     FD 2E 0A F6 | 	mov	local09, result1 wz
19a68     10 00 90 AD |  if_e	jmp	#LR__2660
19a6c     20 2E 06 F1 | 	add	local09, #32
19a70     17 FB 09 FB | 	rdlong	result1, local09 wz
19a74     20 2E 86 F1 | 	sub	local09, #32
19a78     14 00 90 5D |  if_ne	jmp	#LR__2661
19a7c                 | LR__2660
19a7c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19a80     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
19a84     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19a88     01 FA 65 F6 | 	neg	result1, #1
19a8c     88 02 90 FD | 	jmp	#LR__2674
19a90                 | LR__2661
19a90     14 13 02 F6 | 	mov	arg01, local06
19a94     00 14 06 F6 | 	mov	arg02, #0
19a98     34 16 06 F6 | 	mov	arg03, #52
19a9c     09 31 02 F6 | 	mov	local10, arg01
19aa0     98 00 A0 FD | 	call	#\builtin_bytefill_
19aa4     20 2E 06 F1 | 	add	local09, #32
19aa8     17 33 02 FB | 	rdlong	local11, local09
19aac     19 35 02 F6 | 	mov	local12, local11
19ab0     19 37 02 F6 | 	mov	local13, local11
19ab4     20 2E 86 F1 | 	sub	local09, #32
19ab8     1B 39 02 F6 | 	mov	local14, local13
19abc     13 34 46 F7 | 	zerox	local12, #19
19ac0     14 38 46 F0 | 	shr	local14, #20
19ac4     02 38 66 F0 | 	shl	local14, #2
19ac8     ED 38 02 F1 | 	add	local14, __methods__
19acc     1C 39 02 FB | 	rdlong	local14, local14
19ad0     14 3B 02 F6 | 	mov	local15, local06
19ad4     16 3D 02 F6 | 	mov	local16, local08
19ad8     11 3F 02 F6 | 	mov	local17, local03
19adc     1D 13 02 F6 | 	mov	arg01, local15
19ae0     1E 15 02 F6 | 	mov	arg02, local16
19ae4     1F 17 02 F6 | 	mov	arg03, local17
19ae8     F2 40 02 F6 | 	mov	local18, objptr
19aec     1A E5 01 F6 | 	mov	objptr, local12
19af0     2D 38 62 FD | 	call	local14
19af4     20 E5 01 F6 | 	mov	objptr, local18
19af8     FD 42 0A F6 | 	mov	local19, result1 wz
19afc     04 22 CE 57 |  if_ne	test	local03, #4 wz
19b00     58 00 90 AD |  if_e	jmp	#LR__2662
19b04     24 2E 06 F1 | 	add	local09, #36
19b08     17 33 02 FB | 	rdlong	local11, local09
19b0c     19 35 02 F6 | 	mov	local12, local11
19b10     19 37 02 F6 | 	mov	local13, local11
19b14     24 2E 86 F1 | 	sub	local09, #36
19b18     1B 39 02 F6 | 	mov	local14, local13
19b1c     13 34 46 F7 | 	zerox	local12, #19
19b20     14 38 46 F0 | 	shr	local14, #20
19b24     02 38 66 F0 | 	shl	local14, #2
19b28     ED 38 02 F1 | 	add	local14, __methods__
19b2c     1C 39 02 FB | 	rdlong	local14, local14
19b30     14 3B 02 F6 | 	mov	local15, local06
19b34     16 3D 02 F6 | 	mov	local16, local08
19b38     12 3F 02 F6 | 	mov	local17, local04
19b3c     1D 13 02 F6 | 	mov	arg01, local15
19b40     1E 15 02 F6 | 	mov	arg02, local16
19b44     1F 17 02 F6 | 	mov	arg03, local17
19b48     F2 40 02 F6 | 	mov	local18, objptr
19b4c     1A E5 01 F6 | 	mov	objptr, local12
19b50     2D 38 62 FD | 	call	local14
19b54     20 E5 01 F6 | 	mov	objptr, local18
19b58     FD 42 02 F6 | 	mov	local19, result1
19b5c                 | LR__2662
19b5c     00 42 0E F2 | 	cmp	local19, #0 wz
19b60     88 01 90 5D |  if_ne	jmp	#LR__2672
19b64     11 45 02 F6 | 	mov	local20, local03
19b68     03 44 0E F5 | 	and	local20, #3 wz
19b6c     02 26 46 55 |  if_ne	or	local05, #2
19b70     01 44 0E F2 | 	cmp	local20, #1 wz
19b74     01 26 46 55 |  if_ne	or	local05, #1
19b78     20 22 CE F7 | 	test	local03, #32 wz
19b7c     C0 26 46 55 |  if_ne	or	local05, #192
19b80     08 28 06 F1 | 	add	local06, #8
19b84     14 27 62 FC | 	wrlong	local05, local06
19b88     0C 28 06 F1 | 	add	local06, #12
19b8c     14 47 0A FB | 	rdlong	local21, local06 wz
19b90     14 28 86 F1 | 	sub	local06, #20
19b94     18 00 90 5D |  if_ne	jmp	#LR__2663
19b98     04 2E 06 F1 | 	add	local09, #4
19b9c     17 47 02 FB | 	rdlong	local21, local09
19ba0     04 2E 86 F1 | 	sub	local09, #4
19ba4     14 28 06 F1 | 	add	local06, #20
19ba8     14 47 62 FC | 	wrlong	local21, local06
19bac     14 28 86 F1 | 	sub	local06, #20
19bb0                 | LR__2663
19bb0     18 28 06 F1 | 	add	local06, #24
19bb4     14 47 0A FB | 	rdlong	local21, local06 wz
19bb8     18 28 86 F1 | 	sub	local06, #24
19bbc     18 00 90 5D |  if_ne	jmp	#LR__2664
19bc0     08 2E 06 F1 | 	add	local09, #8
19bc4     17 47 02 FB | 	rdlong	local21, local09
19bc8     08 2E 86 F1 | 	sub	local09, #8
19bcc     18 28 06 F1 | 	add	local06, #24
19bd0     14 47 62 FC | 	wrlong	local21, local06
19bd4     18 28 86 F1 | 	sub	local06, #24
19bd8                 | LR__2664
19bd8     24 28 06 F1 | 	add	local06, #36
19bdc     14 47 0A FB | 	rdlong	local21, local06 wz
19be0     24 28 86 F1 | 	sub	local06, #36
19be4     17 47 02 AB |  if_e	rdlong	local21, local09
19be8     24 28 06 A1 |  if_e	add	local06, #36
19bec     14 47 62 AC |  if_e	wrlong	local21, local06
19bf0     24 28 86 A1 |  if_e	sub	local06, #36
19bf4     28 28 06 F1 | 	add	local06, #40
19bf8     14 47 0A FB | 	rdlong	local21, local06 wz
19bfc     28 28 86 F1 | 	sub	local06, #40
19c00     18 00 90 5D |  if_ne	jmp	#LR__2665
19c04     10 2E 06 F1 | 	add	local09, #16
19c08     17 47 02 FB | 	rdlong	local21, local09
19c0c     10 2E 86 F1 | 	sub	local09, #16
19c10     28 28 06 F1 | 	add	local06, #40
19c14     14 47 62 FC | 	wrlong	local21, local06
19c18     28 28 86 F1 | 	sub	local06, #40
19c1c                 | LR__2665
19c1c     30 28 06 F1 | 	add	local06, #48
19c20     14 47 0A FB | 	rdlong	local21, local06 wz
19c24     30 28 86 F1 | 	sub	local06, #48
19c28     18 00 90 5D |  if_ne	jmp	#LR__2666
19c2c     0C 2E 06 F1 | 	add	local09, #12
19c30     17 47 02 FB | 	rdlong	local21, local09
19c34     0C 2E 86 F1 | 	sub	local09, #12
19c38     30 28 06 F1 | 	add	local06, #48
19c3c     14 47 62 FC | 	wrlong	local21, local06
19c40     30 28 86 F1 | 	sub	local06, #48
19c44                 | LR__2666
19c44     1C 28 06 F1 | 	add	local06, #28
19c48     14 47 0A FB | 	rdlong	local21, local06 wz
19c4c     1C 28 86 F1 | 	sub	local06, #28
19c50     18 00 90 5D |  if_ne	jmp	#LR__2667
19c54     01 2A 06 F6 | 	mov	local07, #1
19c58     F2 12 02 F6 | 	mov	arg01, objptr
19c5c     39 12 26 F4 | 	bith	arg01, #57
19c60     1C 28 06 F1 | 	add	local06, #28
19c64     14 13 62 FC | 	wrlong	arg01, local06
19c68     1C 28 86 F1 | 	sub	local06, #28
19c6c                 | LR__2667
19c6c     20 28 06 F1 | 	add	local06, #32
19c70     14 47 0A FB | 	rdlong	local21, local06 wz
19c74     20 28 86 F1 | 	sub	local06, #32
19c78     1C 00 90 5D |  if_ne	jmp	#LR__2668
19c7c     01 2A 06 F6 | 	mov	local07, #1
19c80     F2 12 02 F6 | 	mov	arg01, objptr
19c84     00 08 03 FF 
19c88     00 12 46 F5 | 	or	arg01, ##101711872
19c8c     20 28 06 F1 | 	add	local06, #32
19c90     14 13 62 FC | 	wrlong	arg01, local06
19c94     20 28 86 F1 | 	sub	local06, #32
19c98                 | LR__2668
19c98     2C 28 06 F1 | 	add	local06, #44
19c9c     14 47 0A FB | 	rdlong	local21, local06 wz
19ca0     2C 28 86 F1 | 	sub	local06, #44
19ca4     44 00 90 5D |  if_ne	jmp	#LR__2671
19ca8     14 2E 06 F1 | 	add	local09, #20
19cac     17 47 0A FB | 	rdlong	local21, local09 wz
19cb0     14 2E 86 F1 | 	sub	local09, #20
19cb4     18 00 90 AD |  if_e	jmp	#LR__2669
19cb8     14 2E 06 F1 | 	add	local09, #20
19cbc     17 47 02 FB | 	rdlong	local21, local09
19cc0     2C 28 06 F1 | 	add	local06, #44
19cc4     14 47 62 FC | 	wrlong	local21, local06
19cc8     2C 28 86 F1 | 	sub	local06, #44
19ccc     1C 00 90 FD | 	jmp	#LR__2670
19cd0                 | LR__2669
19cd0     01 2A 06 F6 | 	mov	local07, #1
19cd4     F2 12 02 F6 | 	mov	arg01, objptr
19cd8     00 10 03 FF 
19cdc     00 12 46 F5 | 	or	arg01, ##102760448
19ce0     2C 28 06 F1 | 	add	local06, #44
19ce4     14 13 62 FC | 	wrlong	arg01, local06
19ce8     2C 28 86 F1 | 	sub	local06, #44
19cec                 | LR__2670
19cec                 | LR__2671
19cec                 | LR__2672
19cec     00 2A 0E F2 | 	cmp	local07, #0 wz
19cf0     14 13 02 56 |  if_ne	mov	arg01, local06
19cf4     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
19cf8     00 42 0E F2 | 	cmp	local19, #0 wz
19cfc     00 12 06 A6 |  if_e	mov	arg01, #0
19d00     10 00 90 5D |  if_ne	jmp	#LR__2673
19d04     00 12 4E F2 | 	cmps	arg01, #0 wz
19d08     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19d0c     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
19d10     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19d14                 | LR__2673
19d14     21 FB 01 F6 | 	mov	result1, local19
19d18                 | LR__2674
19d18     A7 F0 03 F6 | 	mov	ptra, fp
19d1c     B2 00 A0 FD | 	call	#popregs_
19d20                 | __system___openraw_ret
19d20     2D 00 64 FD | 	ret
19d24                 | 
19d24                 | __system___closeraw
19d24     05 4A 05 F6 | 	mov	COUNT_, #5
19d28     A8 00 A0 FD | 	call	#pushregs_
19d2c     09 1F 02 F6 | 	mov	local01, arg01
19d30     00 20 06 F6 | 	mov	local02, #0
19d34     08 1E 06 F1 | 	add	local01, #8
19d38     0F FB 09 FB | 	rdlong	result1, local01 wz
19d3c     08 1E 86 F1 | 	sub	local01, #8
19d40     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
19d44     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
19d48     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
19d4c     01 FA 65 A6 |  if_e	neg	result1, #1
19d50     A8 00 90 AD |  if_e	jmp	#LR__2682
19d54     2C 1E 06 F1 | 	add	local01, #44
19d58     0F FB 09 FB | 	rdlong	result1, local01 wz
19d5c     2C 1E 86 F1 | 	sub	local01, #44
19d60     38 00 90 AD |  if_e	jmp	#LR__2680
19d64     2C 1E 06 F1 | 	add	local01, #44
19d68     0F 23 02 FB | 	rdlong	local03, local01
19d6c     11 25 02 F6 | 	mov	local04, local03
19d70     2C 1E 86 F1 | 	sub	local01, #44
19d74     13 24 46 F7 | 	zerox	local04, #19
19d78     14 22 46 F0 | 	shr	local03, #20
19d7c     02 22 66 F0 | 	shl	local03, #2
19d80     ED 22 02 F1 | 	add	local03, __methods__
19d84     11 23 02 FB | 	rdlong	local03, local03
19d88     0F 13 02 F6 | 	mov	arg01, local01
19d8c     F2 26 02 F6 | 	mov	local05, objptr
19d90     12 E5 01 F6 | 	mov	objptr, local04
19d94     2D 22 62 FD | 	call	local03
19d98     13 E5 01 F6 | 	mov	objptr, local05
19d9c                 | LR__2680
19d9c     24 1E 06 F1 | 	add	local01, #36
19da0     0F 27 0A FB | 	rdlong	local05, local01 wz
19da4     24 1E 86 F1 | 	sub	local01, #36
19da8     3C 00 90 AD |  if_e	jmp	#LR__2681
19dac     24 1E 06 F1 | 	add	local01, #36
19db0     0F 23 02 FB | 	rdlong	local03, local01
19db4     11 25 02 F6 | 	mov	local04, local03
19db8     24 1E 86 F1 | 	sub	local01, #36
19dbc     13 24 46 F7 | 	zerox	local04, #19
19dc0     14 22 46 F0 | 	shr	local03, #20
19dc4     02 22 66 F0 | 	shl	local03, #2
19dc8     ED 22 02 F1 | 	add	local03, __methods__
19dcc     11 23 02 FB | 	rdlong	local03, local03
19dd0     0F 13 02 F6 | 	mov	arg01, local01
19dd4     F2 26 02 F6 | 	mov	local05, objptr
19dd8     12 E5 01 F6 | 	mov	objptr, local04
19ddc     2D 22 62 FD | 	call	local03
19de0     13 E5 01 F6 | 	mov	objptr, local05
19de4     FD 20 02 F6 | 	mov	local02, result1
19de8                 | LR__2681
19de8     0F 13 02 F6 | 	mov	arg01, local01
19dec     00 14 06 F6 | 	mov	arg02, #0
19df0     34 16 06 F6 | 	mov	arg03, #52
19df4     98 00 A0 FD | 	call	#\builtin_bytefill_
19df8     10 FB 01 F6 | 	mov	result1, local02
19dfc                 | LR__2682
19dfc     A7 F0 03 F6 | 	mov	ptra, fp
19e00     B2 00 A0 FD | 	call	#popregs_
19e04                 | __system___closeraw_ret
19e04     2D 00 64 FD | 	ret
19e08                 | 
19e08                 | __system___vfs_open_sdcardx
19e08     0B 4A 05 F6 | 	mov	COUNT_, #11
19e0c     A8 00 A0 FD | 	call	#pushregs_
19e10     09 23 02 F6 | 	mov	local03, arg01
19e14     0A 25 02 F6 | 	mov	local04, arg02
19e18     0B 27 02 F6 | 	mov	local05, arg03
19e1c     0C 29 02 F6 | 	mov	local06, arg04
19e20     01 00 00 FF 
19e24     24 12 06 F6 | 	mov	arg01, ##548
19e28     FC F3 BF FD | 	call	#__system___gc_alloc_managed
19e2c     FD 2A 02 F6 | 	mov	local07, result1
19e30     01 00 00 FF 
19e34     34 12 06 F6 | 	mov	arg01, ##564
19e38     EC F3 BF FD | 	call	#__system___gc_alloc_managed
19e3c     FD 2C 02 F6 | 	mov	local08, result1
19e40     11 19 02 F6 | 	mov	arg04, local03
19e44     1F 18 C6 F0 | 	sar	arg04, #31
19e48     11 17 02 F6 | 	mov	arg03, local03
19e4c     01 12 06 F6 | 	mov	arg01, #1
19e50     00 14 06 F6 | 	mov	arg02, #0
19e54     9C DF BF FD | 	call	#__system___int64_shl
19e58     FD 1E 02 F6 | 	mov	local01, result1
19e5c     FE 2E 02 F6 | 	mov	local09, result2
19e60     12 19 02 F6 | 	mov	arg04, local04
19e64     1F 18 C6 F0 | 	sar	arg04, #31
19e68     12 17 02 F6 | 	mov	arg03, local04
19e6c     01 12 06 F6 | 	mov	arg01, #1
19e70     00 14 06 F6 | 	mov	arg02, #0
19e74     7C DF BF FD | 	call	#__system___int64_shl
19e78     FD 1E 42 F5 | 	or	local01, result1
19e7c     FE 2E 42 F5 | 	or	local09, result2
19e80     13 19 02 F6 | 	mov	arg04, local05
19e84     1F 18 C6 F0 | 	sar	arg04, #31
19e88     13 17 02 F6 | 	mov	arg03, local05
19e8c     01 12 06 F6 | 	mov	arg01, #1
19e90     00 14 06 F6 | 	mov	arg02, #0
19e94     5C DF BF FD | 	call	#__system___int64_shl
19e98     FD 1E 42 F5 | 	or	local01, result1
19e9c     FE 2E 42 F5 | 	or	local09, result2
19ea0     14 19 02 F6 | 	mov	arg04, local06
19ea4     1F 18 C6 F0 | 	sar	arg04, #31
19ea8     14 17 02 F6 | 	mov	arg03, local06
19eac     01 12 06 F6 | 	mov	arg01, #1
19eb0     00 14 06 F6 | 	mov	arg02, #0
19eb4     3C DF BF FD | 	call	#__system___int64_shl
19eb8     17 15 02 F6 | 	mov	arg02, local09
19ebc     FD 1E 42 F5 | 	or	local01, result1
19ec0     0A FD 41 F5 | 	or	result2, arg02
19ec4     FE 20 02 F6 | 	mov	local02, result2
19ec8     0F 13 02 F6 | 	mov	arg01, local01
19ecc     10 15 02 F6 | 	mov	arg02, local02
19ed0     58 DF BF FD | 	call	#__system___usepins
19ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
19ed8     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
19edc     F4 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
19ee0     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
19ee4     00 FA 05 A6 |  if_e	mov	result1, #0
19ee8     B4 00 90 AD |  if_e	jmp	#LR__2692
19eec     0F 31 02 F6 | 	mov	local10, local01
19ef0     10 2F 02 F6 | 	mov	local09, local02
19ef4     01 00 00 FF 
19ef8     08 2A 06 F1 | 	add	local07, ##520
19efc     15 31 62 FC | 	wrlong	local10, local07
19f00     04 2A 06 F1 | 	add	local07, #4
19f04     15 2F 62 FC | 	wrlong	local09, local07
19f08     01 00 00 FF 
19f0c     0C 2A 86 F1 | 	sub	local07, ##524
19f10     14 1B 02 F6 | 	mov	arg05, local06
19f14     00 12 06 F6 | 	mov	arg01, #0
19f18     11 15 02 F6 | 	mov	arg02, local03
19f1c     12 17 02 F6 | 	mov	arg03, local04
19f20     13 19 02 F6 | 	mov	arg04, local05
19f24     F2 30 02 F6 | 	mov	local10, objptr
19f28     15 E5 01 F6 | 	mov	objptr, local07
19f2c     7C 27 B0 FD | 	call	#_fatfs_cc_disk_setpins
19f30     18 E5 01 F6 | 	mov	objptr, local10
19f34     FD 32 0A F6 | 	mov	local11, result1 wz
19f38     24 00 90 5D |  if_ne	jmp	#LR__2690
19f3c     24 01 00 FF 
19f40     F2 15 06 F6 | 	mov	arg02, ##@LR__4087
19f44     16 13 02 F6 | 	mov	arg01, local08
19f48     00 16 06 F6 | 	mov	arg03, #0
19f4c     F2 32 02 F6 | 	mov	local11, objptr
19f50     15 E5 01 F6 | 	mov	objptr, local07
19f54     AC 5E B0 FD | 	call	#_fatfs_cc_f_mount
19f58     19 E5 01 F6 | 	mov	objptr, local11
19f5c     FD 32 02 F6 | 	mov	local11, result1
19f60                 | LR__2690
19f60     00 32 0E F2 | 	cmp	local11, #0 wz
19f64     24 00 90 AD |  if_e	jmp	#LR__2691
19f68     0F 13 02 F6 | 	mov	arg01, local01
19f6c     10 15 02 F6 | 	mov	arg02, local02
19f70     0C DF BF FD | 	call	#__system___freepins
19f74     19 13 6A F6 | 	neg	arg01, local11 wz
19f78     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19f7c     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
19f80     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19f84     00 FA 05 F6 | 	mov	result1, #0
19f88     14 00 90 FD | 	jmp	#LR__2692
19f8c                 | LR__2691
19f8c     15 13 02 F6 | 	mov	arg01, local07
19f90     F2 32 02 F6 | 	mov	local11, objptr
19f94     15 E5 01 F6 | 	mov	objptr, local07
19f98     48 9B B0 FD | 	call	#_fatfs_cc_get_vfs
19f9c     19 E5 01 F6 | 	mov	objptr, local11
19fa0                 | LR__2692
19fa0     A7 F0 03 F6 | 	mov	ptra, fp
19fa4     B2 00 A0 FD | 	call	#popregs_
19fa8                 | __system___vfs_open_sdcardx_ret
19fa8     2D 00 64 FD | 	ret
19fac                 | 
19fac                 | __system____default_getc
19fac     03 4A 05 F6 | 	mov	COUNT_, #3
19fb0     A8 00 A0 FD | 	call	#pushregs_
19fb4     09 1F 02 F6 | 	mov	local01, arg01
19fb8     0F 21 02 FB | 	rdlong	local02, local01
19fbc     08 20 06 F1 | 	add	local02, #8
19fc0     10 23 02 FB | 	rdlong	local03, local02
19fc4     02 22 CE F7 | 	test	local03, #2 wz
19fc8     0F 13 02 56 |  if_ne	mov	arg01, local01
19fcc     00 01 B0 5D |  if_ne	call	#__system____default_flush
19fd0     10 23 02 FB | 	rdlong	local03, local02
19fd4     01 22 46 F5 | 	or	local03, #1
19fd8     10 23 62 FC | 	wrlong	local03, local02
19fdc     08 20 86 F1 | 	sub	local02, #8
19fe0     10 23 0A FB | 	rdlong	local03, local02 wz
19fe4     0C 00 90 5D |  if_ne	jmp	#LR__2700
19fe8     0F 13 02 F6 | 	mov	arg01, local01
19fec     64 16 B0 FD | 	call	#__system____default_filbuf
19ff0     FD 22 02 F6 | 	mov	local03, result1
19ff4                 | LR__2700
19ff4     01 22 56 F2 | 	cmps	local03, #1 wc
19ff8     01 FA 65 C6 |  if_b	neg	result1, #1
19ffc     1C 00 90 CD |  if_b	jmp	#LR__2701
1a000     01 22 86 F1 | 	sub	local03, #1
1a004     10 23 62 FC | 	wrlong	local03, local02
1a008     04 20 06 F1 | 	add	local02, #4
1a00c     10 23 02 FB | 	rdlong	local03, local02
1a010     11 FB C1 FA | 	rdbyte	result1, local03
1a014     01 22 06 F1 | 	add	local03, #1
1a018     10 23 62 FC | 	wrlong	local03, local02
1a01c                 | LR__2701
1a01c     A7 F0 03 F6 | 	mov	ptra, fp
1a020     B2 00 A0 FD | 	call	#popregs_
1a024                 | __system____default_getc_ret
1a024     2D 00 64 FD | 	ret
1a028                 | 
1a028                 | __system____default_putc
1a028     06 4A 05 F6 | 	mov	COUNT_, #6
1a02c     A8 00 A0 FD | 	call	#pushregs_
1a030     09 1F 02 F6 | 	mov	local01, arg01
1a034     0A 21 02 F6 | 	mov	local02, arg02
1a038     10 23 02 FB | 	rdlong	local03, local02
1a03c     08 22 06 F1 | 	add	local03, #8
1a040     11 FB 01 FB | 	rdlong	result1, local03
1a044     01 FA CD F7 | 	test	result1, #1 wz
1a048     10 13 02 56 |  if_ne	mov	arg01, local02
1a04c     80 00 B0 5D |  if_ne	call	#__system____default_flush
1a050     11 25 02 FB | 	rdlong	local04, local03
1a054     02 24 46 F5 | 	or	local04, #2
1a058     11 25 62 FC | 	wrlong	local04, local03
1a05c     08 22 86 F1 | 	sub	local03, #8
1a060     11 27 02 FB | 	rdlong	local05, local03
1a064     10 22 06 F1 | 	add	local03, #16
1a068     11 15 02 FB | 	rdlong	arg02, local03
1a06c     10 22 86 F1 | 	sub	local03, #16
1a070     13 FB 01 F6 | 	mov	result1, local05
1a074     0A FB 01 F1 | 	add	result1, arg02
1a078     FD 1E 42 FC | 	wrbyte	local01, result1
1a07c     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1a080     01 26 06 F1 | 	add	local05, #1
1a084     11 27 62 FC | 	wrlong	local05, local03
1a088     06 20 06 F1 | 	add	local02, #6
1a08c     10 29 EA FA | 	rdword	local06, local02 wz
1a090     06 20 86 F1 | 	sub	local02, #6
1a094     0C 22 06 51 |  if_ne	add	local03, #12
1a098     11 25 02 5B |  if_ne	rdlong	local04, local03
1a09c     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
1a0a0     0C 00 90 AD |  if_e	jmp	#LR__2710
1a0a4     0A 1E 0E F2 | 	cmp	local01, #10 wz
1a0a8     01 28 0E A2 |  if_e	cmp	local06, #1 wz
1a0ac     10 00 90 5D |  if_ne	jmp	#LR__2711
1a0b0                 | LR__2710
1a0b0     10 13 02 F6 | 	mov	arg01, local02
1a0b4     18 00 B0 FD | 	call	#__system____default_flush
1a0b8     00 FA 0D F2 | 	cmp	result1, #0 wz
1a0bc     01 1E 66 56 |  if_ne	neg	local01, #1
1a0c0                 | LR__2711
1a0c0     0F FB 01 F6 | 	mov	result1, local01
1a0c4     A7 F0 03 F6 | 	mov	ptra, fp
1a0c8     B2 00 A0 FD | 	call	#popregs_
1a0cc                 | __system____default_putc_ret
1a0cc     2D 00 64 FD | 	ret
1a0d0                 | 
1a0d0                 | __system____default_flush
1a0d0     06 4A 05 F6 | 	mov	COUNT_, #6
1a0d4     A8 00 A0 FD | 	call	#pushregs_
1a0d8     09 1F 02 F6 | 	mov	local01, arg01
1a0dc     0F 21 02 FB | 	rdlong	local02, local01
1a0e0     10 23 02 FB | 	rdlong	local03, local02
1a0e4     08 20 06 F1 | 	add	local02, #8
1a0e8     10 FB 01 FB | 	rdlong	result1, local02
1a0ec     08 20 86 F1 | 	sub	local02, #8
1a0f0     02 FA CD F7 | 	test	result1, #2 wz
1a0f4     D0 00 90 AD |  if_e	jmp	#LR__2722
1a0f8     01 22 56 F2 | 	cmps	local03, #1 wc
1a0fc     20 01 90 CD |  if_b	jmp	#LR__2724
1a100     08 1E 06 F1 | 	add	local01, #8
1a104     0F FB 01 FB | 	rdlong	result1, local01
1a108     08 1E 86 F1 | 	sub	local01, #8
1a10c     40 FA CD F7 | 	test	result1, #64 wz
1a110     68 00 90 AD |  if_e	jmp	#LR__2721
1a114     08 1E 06 F1 | 	add	local01, #8
1a118     0F 17 02 FB | 	rdlong	arg03, local01
1a11c     08 1E 86 F1 | 	sub	local01, #8
1a120     80 16 CE F7 | 	test	arg03, #128 wz
1a124     54 00 90 AD |  if_e	jmp	#LR__2720
1a128     30 1E 06 F1 | 	add	local01, #48
1a12c     0F 25 02 FB | 	rdlong	local04, local01
1a130     12 27 02 F6 | 	mov	local05, local04
1a134     30 1E 86 F1 | 	sub	local01, #48
1a138     13 26 46 F7 | 	zerox	local05, #19
1a13c     14 24 46 F0 | 	shr	local04, #20
1a140     02 24 66 F0 | 	shl	local04, #2
1a144     ED 24 02 F1 | 	add	local04, __methods__
1a148     12 25 02 FB | 	rdlong	local04, local04
1a14c     0F 13 02 F6 | 	mov	arg01, local01
1a150     00 14 06 F6 | 	mov	arg02, #0
1a154     02 16 06 F6 | 	mov	arg03, #2
1a158     F2 28 02 F6 | 	mov	local06, objptr
1a15c     13 E5 01 F6 | 	mov	objptr, local05
1a160     2D 24 62 FD | 	call	local04
1a164     14 E5 01 F6 | 	mov	objptr, local06
1a168     08 1E 06 F1 | 	add	local01, #8
1a16c     0F 29 02 FB | 	rdlong	local06, local01
1a170     80 28 26 F5 | 	andn	local06, #128
1a174     0F 29 62 FC | 	wrlong	local06, local01
1a178     08 1E 86 F1 | 	sub	local01, #8
1a17c                 | LR__2720
1a17c                 | LR__2721
1a17c     18 1E 06 F1 | 	add	local01, #24
1a180     0F 25 02 FB | 	rdlong	local04, local01
1a184     12 27 02 F6 | 	mov	local05, local04
1a188     18 1E 86 F1 | 	sub	local01, #24
1a18c     13 26 46 F7 | 	zerox	local05, #19
1a190     14 24 46 F0 | 	shr	local04, #20
1a194     02 24 66 F0 | 	shl	local04, #2
1a198     ED 24 02 F1 | 	add	local04, __methods__
1a19c     12 25 02 FB | 	rdlong	local04, local04
1a1a0     10 20 06 F1 | 	add	local02, #16
1a1a4     10 15 02 FB | 	rdlong	arg02, local02
1a1a8     10 20 86 F1 | 	sub	local02, #16
1a1ac     0F 13 02 F6 | 	mov	arg01, local01
1a1b0     11 17 02 F6 | 	mov	arg03, local03
1a1b4     F2 28 02 F6 | 	mov	local06, objptr
1a1b8     13 E5 01 F6 | 	mov	objptr, local05
1a1bc     2D 24 62 FD | 	call	local04
1a1c0     14 E5 01 F6 | 	mov	objptr, local06
1a1c4     58 00 90 FD | 	jmp	#LR__2724
1a1c8                 | LR__2722
1a1c8     08 20 06 F1 | 	add	local02, #8
1a1cc     10 29 02 FB | 	rdlong	local06, local02
1a1d0     08 20 86 F1 | 	sub	local02, #8
1a1d4     01 28 CE F7 | 	test	local06, #1 wz
1a1d8     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
1a1dc     40 00 90 AD |  if_e	jmp	#LR__2723
1a1e0     30 1E 06 F1 | 	add	local01, #48
1a1e4     0F 25 02 FB | 	rdlong	local04, local01
1a1e8     12 27 02 F6 | 	mov	local05, local04
1a1ec     30 1E 86 F1 | 	sub	local01, #48
1a1f0     13 26 46 F7 | 	zerox	local05, #19
1a1f4     14 24 46 F0 | 	shr	local04, #20
1a1f8     02 24 66 F0 | 	shl	local04, #2
1a1fc     ED 24 02 F1 | 	add	local04, __methods__
1a200     12 25 02 FB | 	rdlong	local04, local04
1a204     0F 13 02 F6 | 	mov	arg01, local01
1a208     11 15 62 F6 | 	neg	arg02, local03
1a20c     01 16 06 F6 | 	mov	arg03, #1
1a210     F2 28 02 F6 | 	mov	local06, objptr
1a214     13 E5 01 F6 | 	mov	objptr, local05
1a218     2D 24 62 FD | 	call	local04
1a21c     14 E5 01 F6 | 	mov	objptr, local06
1a220                 | LR__2723
1a220                 | LR__2724
1a220     10 01 68 FC | 	wrlong	#0, local02
1a224     04 20 06 F1 | 	add	local02, #4
1a228     10 01 68 FC | 	wrlong	#0, local02
1a22c     04 20 06 F1 | 	add	local02, #4
1a230     10 01 68 FC | 	wrlong	#0, local02
1a234     00 FA 05 F6 | 	mov	result1, #0
1a238     A7 F0 03 F6 | 	mov	ptra, fp
1a23c     B2 00 A0 FD | 	call	#popregs_
1a240                 | __system____default_flush_ret
1a240     2D 00 64 FD | 	ret
1a244                 | 
1a244                 | __system____default_buffer_init
1a244     02 4A 05 F6 | 	mov	COUNT_, #2
1a248     A8 00 A0 FD | 	call	#pushregs_
1a24c     09 1F 02 F6 | 	mov	local01, arg01
1a250     0F 21 02 FB | 	rdlong	local02, local01
1a254     0F 13 02 F6 | 	mov	arg01, local01
1a258     F8 02 B0 FD | 	call	#__system___isatty
1a25c     00 FA 0D F2 | 	cmp	result1, #0 wz
1a260     06 1E 06 51 |  if_ne	add	local01, #6
1a264     0F 0B 58 5C |  if_ne	wrword	#5, local01
1a268     06 1E 06 A1 |  if_e	add	local01, #6
1a26c     0F 0D 58 AC |  if_e	wrword	#6, local01
1a270     14 20 06 F1 | 	add	local02, #20
1a274     10 1F 02 F6 | 	mov	local01, local02
1a278     04 20 86 F1 | 	sub	local02, #4
1a27c     10 1F 62 FC | 	wrlong	local01, local02
1a280     04 20 86 F1 | 	sub	local02, #4
1a284     02 00 80 FF 
1a288     10 01 68 FC | 	wrlong	##1024, local02
1a28c     00 FA 05 F6 | 	mov	result1, #0
1a290     A7 F0 03 F6 | 	mov	ptra, fp
1a294     B2 00 A0 FD | 	call	#popregs_
1a298                 | __system____default_buffer_init_ret
1a298     2D 00 64 FD | 	ret
1a29c                 | 
1a29c                 | __system__stat
1a29c     04 4A 05 F6 | 	mov	COUNT_, #4
1a2a0     A8 00 A0 FD | 	call	#pushregs_
1a2a4     0A 1F 02 F6 | 	mov	local01, arg02
1a2a8     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1a2ac     F4 20 02 F6 | 	mov	local02, ptr___system__dat__
1a2b0     09 15 02 F6 | 	mov	arg02, arg01
1a2b4     10 13 02 F6 | 	mov	arg01, local02
1a2b8     00 16 06 F6 | 	mov	arg03, #0
1a2bc     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1a2c0     94 BC BF FD | 	call	#__system____getvfsforfile
1a2c4     FD 22 0A F6 | 	mov	local03, result1 wz
1a2c8     10 00 90 AD |  if_e	jmp	#LR__2730
1a2cc     34 22 06 F1 | 	add	local03, #52
1a2d0     11 17 0A FB | 	rdlong	arg03, local03 wz
1a2d4     34 22 86 F1 | 	sub	local03, #52
1a2d8     14 00 90 5D |  if_ne	jmp	#LR__2731
1a2dc                 | LR__2730
1a2dc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1a2e0     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1a2e4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1a2e8     01 FA 65 F6 | 	neg	result1, #1
1a2ec     68 00 90 FD | 	jmp	#LR__2732
1a2f0                 | LR__2731
1a2f0     0F 13 02 F6 | 	mov	arg01, local01
1a2f4     00 14 06 F6 | 	mov	arg02, #0
1a2f8     30 16 06 F6 | 	mov	arg03, #48
1a2fc     09 25 02 F6 | 	mov	local04, arg01
1a300     98 00 A0 FD | 	call	#\builtin_bytefill_
1a304     12 FB 01 F6 | 	mov	result1, local04
1a308     10 13 CA FA | 	rdbyte	arg01, local02 wz
1a30c     08 1E 06 A1 |  if_e	add	local01, #8
1a310     08 00 80 AF 
1a314     0F FF 6B AC |  if_e	wrlong	##4607, local01
1a318     00 FA 05 A6 |  if_e	mov	result1, #0
1a31c     38 00 90 AD |  if_e	jmp	#LR__2732
1a320     34 22 06 F1 | 	add	local03, #52
1a324     11 23 02 FB | 	rdlong	local03, local03
1a328     11 25 02 F6 | 	mov	local04, local03
1a32c     13 22 46 F7 | 	zerox	local03, #19
1a330     14 24 46 F0 | 	shr	local04, #20
1a334     02 24 66 F0 | 	shl	local04, #2
1a338     ED 24 02 F1 | 	add	local04, __methods__
1a33c     12 25 02 FB | 	rdlong	local04, local04
1a340     10 13 02 F6 | 	mov	arg01, local02
1a344     0F 15 02 F6 | 	mov	arg02, local01
1a348     F2 20 02 F6 | 	mov	local02, objptr
1a34c     11 E5 01 F6 | 	mov	objptr, local03
1a350     2D 24 62 FD | 	call	local04
1a354     10 E5 01 F6 | 	mov	objptr, local02
1a358                 | LR__2732
1a358     A7 F0 03 F6 | 	mov	ptra, fp
1a35c     B2 00 A0 FD | 	call	#popregs_
1a360                 | __system__stat_ret
1a360     2D 00 64 FD | 	ret
1a364                 | 
1a364                 | __system__read
1a364     0A 12 16 F2 | 	cmp	arg01, #10 wc
1a368     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1a36c     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1a370     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1a374     01 FA 65 36 |  if_ae	neg	result1, #1
1a378     20 00 90 3D |  if_ae	jmp	#LR__2740
1a37c     34 12 06 FD | 	qmul	arg01, #52
1a380     02 00 00 FF 
1a384     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1a388     18 12 62 FD | 	getqx	arg01
1a38c     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1a390     02 00 00 FF 
1a394     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1a398     D0 0F B0 FD | 	call	#__system___vfsread
1a39c                 | LR__2740
1a39c                 | __system__read_ret
1a39c     2D 00 64 FD | 	ret
1a3a0                 | 
1a3a0                 | __system__close
1a3a0     0A 12 16 F2 | 	cmp	arg01, #10 wc
1a3a4     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1a3a8     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1a3ac     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1a3b0     01 FA 65 36 |  if_ae	neg	result1, #1
1a3b4     20 00 90 3D |  if_ae	jmp	#LR__2750
1a3b8     34 12 06 FD | 	qmul	arg01, #52
1a3bc     02 00 00 FF 
1a3c0     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1a3c4     18 12 62 FD | 	getqx	arg01
1a3c8     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1a3cc     02 00 00 FF 
1a3d0     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1a3d4     4C F9 BF FD | 	call	#__system___closeraw
1a3d8                 | LR__2750
1a3d8                 | __system__close_ret
1a3d8     2D 00 64 FD | 	ret
1a3dc                 | 
1a3dc                 | __system__lseek
1a3dc     06 4A 05 F6 | 	mov	COUNT_, #6
1a3e0     A8 00 A0 FD | 	call	#pushregs_
1a3e4     0A 12 16 F2 | 	cmp	arg01, #10 wc
1a3e8     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1a3ec     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1a3f0     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1a3f4     01 FA 65 36 |  if_ae	neg	result1, #1
1a3f8     C4 00 90 3D |  if_ae	jmp	#LR__2761
1a3fc     34 12 06 FD | 	qmul	arg01, #52
1a400     02 00 00 FF 
1a404     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1a408     18 1E 62 FD | 	getqx	local01
1a40c     F4 1E 02 F1 | 	add	local01, ptr___system__dat__
1a410     30 1E 06 F1 | 	add	local01, #48
1a414     0F 13 0A FB | 	rdlong	arg01, local01 wz
1a418     30 1E 86 F1 | 	sub	local01, #48
1a41c     02 00 00 FF 
1a420     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1a424     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1a428     F4 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
1a42c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1a430     01 FA 65 A6 |  if_e	neg	result1, #1
1a434     88 00 90 AD |  if_e	jmp	#LR__2761
1a438     08 1E 06 F1 | 	add	local01, #8
1a43c     0F 21 02 FB | 	rdlong	local02, local01
1a440     08 1E 86 F1 | 	sub	local01, #8
1a444     40 20 CE F7 | 	test	local02, #64 wz
1a448     08 1E 06 51 |  if_ne	add	local01, #8
1a44c     0F 21 02 5B |  if_ne	rdlong	local02, local01
1a450     80 20 46 55 |  if_ne	or	local02, #128
1a454     0F 21 62 5C |  if_ne	wrlong	local02, local01
1a458     08 1E 86 51 |  if_ne	sub	local01, #8
1a45c     30 1E 06 F1 | 	add	local01, #48
1a460     0F 23 02 FB | 	rdlong	local03, local01
1a464     11 25 02 F6 | 	mov	local04, local03
1a468     30 1E 86 F1 | 	sub	local01, #48
1a46c     13 24 46 F7 | 	zerox	local04, #19
1a470     14 22 46 F0 | 	shr	local03, #20
1a474     02 22 66 F0 | 	shl	local03, #2
1a478     ED 22 02 F1 | 	add	local03, __methods__
1a47c     11 23 02 FB | 	rdlong	local03, local03
1a480     0F 13 02 F6 | 	mov	arg01, local01
1a484     F2 26 02 F6 | 	mov	local05, objptr
1a488     12 E5 01 F6 | 	mov	objptr, local04
1a48c     2D 22 62 FD | 	call	local03
1a490     13 E5 01 F6 | 	mov	objptr, local05
1a494     FD 28 02 F6 | 	mov	local06, result1
1a498     00 28 56 F2 | 	cmps	local06, #0 wc
1a49c     1C 00 90 3D |  if_ae	jmp	#LR__2760
1a4a0     14 13 6A F6 | 	neg	arg01, local06 wz
1a4a4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1a4a8     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1a4ac     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1a4b0     01 FA 65 56 |  if_ne	neg	result1, #1
1a4b4     00 FA 05 A6 |  if_e	mov	result1, #0
1a4b8     04 00 90 FD | 	jmp	#LR__2761
1a4bc                 | LR__2760
1a4bc     14 FB 01 F6 | 	mov	result1, local06
1a4c0                 | LR__2761
1a4c0     A7 F0 03 F6 | 	mov	ptra, fp
1a4c4     B2 00 A0 FD | 	call	#popregs_
1a4c8                 | __system__lseek_ret
1a4c8     2D 00 64 FD | 	ret
1a4cc                 | 
1a4cc                 | __system___ioctl
1a4cc     03 4A 05 F6 | 	mov	COUNT_, #3
1a4d0     A8 00 A0 FD | 	call	#pushregs_
1a4d4     00 12 4E F2 | 	cmps	arg01, #0 wz
1a4d8     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1a4dc     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
1a4e0     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1a4e4     01 FA 65 A6 |  if_e	neg	result1, #1
1a4e8     5C 00 90 AD |  if_e	jmp	#LR__2771
1a4ec     28 12 06 F1 | 	add	arg01, #40
1a4f0     09 1F 02 FB | 	rdlong	local01, arg01
1a4f4     0F 21 02 F6 | 	mov	local02, local01
1a4f8     28 12 86 F1 | 	sub	arg01, #40
1a4fc     13 20 46 F7 | 	zerox	local02, #19
1a500     14 1E 46 F0 | 	shr	local01, #20
1a504     02 1E 66 F0 | 	shl	local01, #2
1a508     ED 1E 02 F1 | 	add	local01, __methods__
1a50c     0F 1F 02 FB | 	rdlong	local01, local01
1a510     F2 22 02 F6 | 	mov	local03, objptr
1a514     10 E5 01 F6 | 	mov	objptr, local02
1a518     2D 1E 62 FD | 	call	local01
1a51c     11 E5 01 F6 | 	mov	objptr, local03
1a520     FD 12 0A F6 | 	mov	arg01, result1 wz
1a524     1C 00 90 AD |  if_e	jmp	#LR__2770
1a528     00 12 4E F2 | 	cmps	arg01, #0 wz
1a52c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1a530     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1a534     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1a538     01 FA 65 56 |  if_ne	neg	result1, #1
1a53c     00 FA 05 A6 |  if_e	mov	result1, #0
1a540     04 00 90 FD | 	jmp	#LR__2771
1a544                 | LR__2770
1a544     00 FA 05 F6 | 	mov	result1, #0
1a548                 | LR__2771
1a548     A7 F0 03 F6 | 	mov	ptra, fp
1a54c     B2 00 A0 FD | 	call	#popregs_
1a550                 | __system___ioctl_ret
1a550     2D 00 64 FD | 	ret
1a554                 | 
1a554                 | __system___isatty
1a554     00 4A 05 F6 | 	mov	COUNT_, #0
1a558     A8 00 A0 FD | 	call	#pushregs_
1a55c     0C F0 07 F1 | 	add	ptra, #12
1a560     04 4E 05 F1 | 	add	fp, #4
1a564     A7 12 62 FC | 	wrlong	arg01, fp
1a568     04 4E 05 F1 | 	add	fp, #4
1a56c     A7 16 02 F6 | 	mov	arg03, fp
1a570     08 4E 85 F1 | 	sub	fp, #8
1a574     00 15 06 F6 | 	mov	arg02, #256
1a578     50 FF BF FD | 	call	#__system___ioctl
1a57c     00 FA 0D F2 | 	cmp	result1, #0 wz
1a580     01 FA 05 A6 |  if_e	mov	result1, #1
1a584     00 FA 05 56 |  if_ne	mov	result1, #0
1a588     A7 F0 03 F6 | 	mov	ptra, fp
1a58c     B2 00 A0 FD | 	call	#popregs_
1a590                 | __system___isatty_ret
1a590     2D 00 64 FD | 	ret
1a594                 | 
1a594                 | __system____getftab
1a594     0A 12 16 F2 | 	cmp	arg01, #10 wc
1a598     34 12 06 CD |  if_b	qmul	arg01, #52
1a59c     00 FA 05 36 |  if_ae	mov	result1, #0
1a5a0     02 00 00 CF 
1a5a4     20 E9 05 C1 |  if_b	add	ptr___system__dat__, ##1312
1a5a8     18 FA 61 CD |  if_b	getqx	result1
1a5ac     F4 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
1a5b0     02 00 00 CF 
1a5b4     20 E9 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
1a5b8                 | __system____getftab_ret
1a5b8     2D 00 64 FD | 	ret
1a5bc                 | 
1a5bc                 | __system__strncpy
1a5bc     09 01 02 F6 | 	mov	_var01, arg01
1a5c0                 | LR__2780
1a5c0     01 16 86 F1 | 	sub	arg03, #1
1a5c4     00 16 56 F2 | 	cmps	arg03, #0 wc
1a5c8     18 00 90 CD |  if_b	jmp	#LR__2781
1a5cc     0A FB C1 FA | 	rdbyte	result1, arg02
1a5d0     00 FB 41 FC | 	wrbyte	result1, _var01
1a5d4     01 14 06 F1 | 	add	arg02, #1
1a5d8     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1a5dc     01 00 06 F1 | 	add	_var01, #1
1a5e0     DC FF 9F 5D |  if_ne	jmp	#LR__2780
1a5e4                 | LR__2781
1a5e4     97 0C 48 FB | 	callpa	#(@LR__2783-@LR__2782)>>2,fcache_load_ptr_
1a5e8                 | LR__2782
1a5e8     01 16 86 F1 | 	sub	arg03, #1
1a5ec     00 16 56 F2 | 	cmps	arg03, #0 wc
1a5f0     00 03 02 36 |  if_ae	mov	_var02, _var01
1a5f4     01 00 06 31 |  if_ae	add	_var01, #1
1a5f8     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1a5fc     E8 FF 9F 3D |  if_ae	jmp	#LR__2782
1a600                 | LR__2783
1a600     09 FB 01 F6 | 	mov	result1, arg01
1a604                 | __system__strncpy_ret
1a604     2D 00 64 FD | 	ret
1a608                 | 
1a608                 | __system__strncat
1a608     00 14 4E F2 | 	cmps	arg02, #0 wz
1a60c     50 00 90 AD |  if_e	jmp	#LR__2794
1a610     01 16 16 F2 | 	cmp	arg03, #1 wc
1a614     48 00 90 CD |  if_b	jmp	#LR__2794
1a618     09 01 02 F6 | 	mov	_var01, arg01
1a61c     97 1E 48 FB | 	callpa	#(@LR__2792-@LR__2790)>>2,fcache_load_ptr_
1a620                 | LR__2790
1a620     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1a624     01 00 06 51 |  if_ne	add	_var01, #1
1a628     F4 FF 9F 5D |  if_ne	jmp	#LR__2790
1a62c     0B 03 02 F6 | 	mov	_var02, arg03
1a630                 | LR__2791
1a630     0A 05 C2 FA | 	rdbyte	_var03, arg02
1a634     02 07 02 F6 | 	mov	_var04, _var03
1a638     07 06 4E F7 | 	zerox	_var04, #7 wz
1a63c     01 14 06 F1 | 	add	arg02, #1
1a640     18 00 90 AD |  if_e	jmp	#LR__2793
1a644     01 02 86 F1 | 	sub	_var02, #1
1a648     00 02 56 F2 | 	cmps	_var02, #0 wc
1a64c     00 07 02 36 |  if_ae	mov	_var04, _var01
1a650     01 00 06 31 |  if_ae	add	_var01, #1
1a654     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
1a658     D4 FF 9F 3D |  if_ae	jmp	#LR__2791
1a65c                 | LR__2792
1a65c                 | LR__2793
1a65c     00 01 48 FC | 	wrbyte	#0, _var01
1a660                 | LR__2794
1a660     09 FB 01 F6 | 	mov	result1, arg01
1a664                 | __system__strncat_ret
1a664     2D 00 64 FD | 	ret
1a668                 | 
1a668                 | __system__strncmp
1a668     09 01 0A F6 | 	mov	_var01, arg01 wz
1a66c     14 00 90 5D |  if_ne	jmp	#LR__2800
1a670     00 14 0E F2 | 	cmp	arg02, #0 wz
1a674     01 02 66 56 |  if_ne	neg	_var02, #1
1a678     00 02 06 A6 |  if_e	mov	_var02, #0
1a67c     01 FB 01 F6 | 	mov	result1, _var02
1a680     74 00 90 FD | 	jmp	#__system__strncmp_ret
1a684                 | LR__2800
1a684     00 14 0E F2 | 	cmp	arg02, #0 wz
1a688     01 FA 05 A6 |  if_e	mov	result1, #1
1a68c     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1a690     0B 05 02 F6 | 	mov	_var03, arg03
1a694     97 16 48 FB | 	callpa	#(@LR__2802-@LR__2801)>>2,fcache_load_ptr_
1a698                 | LR__2801
1a698     00 07 C2 FA | 	rdbyte	_var04, _var01
1a69c     0A 09 02 F6 | 	mov	_var05, arg02
1a6a0     04 0B C2 FA | 	rdbyte	_var06, _var05
1a6a4     01 04 86 F1 | 	sub	_var03, #1
1a6a8     00 04 56 F2 | 	cmps	_var03, #0 wc
1a6ac     01 00 06 F1 | 	add	_var01, #1
1a6b0     01 14 06 F1 | 	add	arg02, #1
1a6b4     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1a6b8     08 00 90 2D |  if_nc_and_z	jmp	#LR__2803
1a6bc     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1a6c0     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__2801
1a6c4                 | LR__2802
1a6c4                 | LR__2803
1a6c4     00 04 56 F2 | 	cmps	_var03, #0 wc
1a6c8     00 FA 05 C6 |  if_b	mov	result1, #0
1a6cc     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
1a6d0     05 07 0A F2 | 	cmp	_var04, _var06 wz
1a6d4     00 FA 05 A6 |  if_e	mov	result1, #0
1a6d8     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1a6dc     00 06 0E F2 | 	cmp	_var04, #0 wz
1a6e0     01 FA 65 A6 |  if_e	neg	result1, #1
1a6e4     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1a6e8     00 0A 0E F2 | 	cmp	_var06, #0 wz
1a6ec     01 FA 05 A6 |  if_e	mov	result1, #1
1a6f0     03 FB 01 56 |  if_ne	mov	result1, _var04
1a6f4     05 FB 81 51 |  if_ne	sub	result1, _var06
1a6f8                 | __system__strncmp_ret
1a6f8     2D 00 64 FD | 	ret
1a6fc                 | 
1a6fc                 | __system____root_opendir
1a6fc     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1a700     04 12 06 F1 | 	add	arg01, #4
1a704     09 E9 61 FC | 	wrlong	ptr___system__dat__, arg01
1a708     00 FA 05 F6 | 	mov	result1, #0
1a70c     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1a710                 | __system____root_opendir_ret
1a710     2D 00 64 FD | 	ret
1a714                 | 
1a714                 | __system____root_readdir
1a714     03 4A 05 F6 | 	mov	COUNT_, #3
1a718     A8 00 A0 FD | 	call	#pushregs_
1a71c     09 1F 02 F6 | 	mov	local01, arg01
1a720     0A 21 02 F6 | 	mov	local02, arg02
1a724     04 1E 06 F1 | 	add	local01, #4
1a728     0F 23 02 FB | 	rdlong	local03, local01
1a72c     04 1E 86 F1 | 	sub	local01, #4
1a730                 | LR__2810
1a730     74 E8 05 F1 | 	add	ptr___system__dat__, #116
1a734     F4 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
1a738     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
1a73c     01 FA 65 A6 |  if_e	neg	result1, #1
1a740     48 00 90 AD |  if_e	jmp	#LR__2811
1a744     11 17 0A FB | 	rdlong	arg03, local03 wz
1a748     04 22 06 A1 |  if_e	add	local03, #4
1a74c     E0 FF 9F AD |  if_e	jmp	#LR__2810
1a750     11 15 02 FB | 	rdlong	arg02, local03
1a754     01 14 06 F1 | 	add	arg02, #1
1a758     10 13 02 F6 | 	mov	arg01, local02
1a75c     40 16 06 F6 | 	mov	arg03, #64
1a760     58 FE BF FD | 	call	#__system__strncpy
1a764     50 20 06 F1 | 	add	local02, #80
1a768     10 03 48 FC | 	wrbyte	#1, local02
1a76c     08 20 86 F1 | 	sub	local02, #8
1a770     10 01 68 FC | 	wrlong	#0, local02
1a774     04 20 06 F1 | 	add	local02, #4
1a778     10 01 68 FC | 	wrlong	#0, local02
1a77c     04 22 06 F1 | 	add	local03, #4
1a780     04 1E 06 F1 | 	add	local01, #4
1a784     0F 23 62 FC | 	wrlong	local03, local01
1a788     00 FA 05 F6 | 	mov	result1, #0
1a78c                 | LR__2811
1a78c     A7 F0 03 F6 | 	mov	ptra, fp
1a790     B2 00 A0 FD | 	call	#popregs_
1a794                 | __system____root_readdir_ret
1a794     2D 00 64 FD | 	ret
1a798                 | 
1a798                 | __system____root_closedir
1a798     00 FA 05 F6 | 	mov	result1, #0
1a79c                 | __system____root_closedir_ret
1a79c     2D 00 64 FD | 	ret
1a7a0                 | 
1a7a0                 | __system____root_stat
1a7a0     0A 01 02 F6 | 	mov	_var01, arg02
1a7a4     00 13 02 F6 | 	mov	arg01, _var01
1a7a8     00 14 06 F6 | 	mov	arg02, #0
1a7ac     30 16 06 F6 | 	mov	arg03, #48
1a7b0     98 00 A0 FD | 	call	#\builtin_bytefill_
1a7b4     08 00 06 F1 | 	add	_var01, #8
1a7b8     08 00 80 FF 
1a7bc     00 FF 6B FC | 	wrlong	##4607, _var01
1a7c0     00 FA 05 F6 | 	mov	result1, #0
1a7c4                 | __system____root_stat_ret
1a7c4     2D 00 64 FD | 	ret
1a7c8                 | 
1a7c8                 | __system___normalizeName
1a7c8     00 00 06 F6 | 	mov	_var01, #0
1a7cc     09 03 02 F6 | 	mov	_var02, arg01
1a7d0     01 05 02 F6 | 	mov	_var03, _var02
1a7d4                 | LR__2820
1a7d4     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1a7d8     5C 01 90 AD |  if_e	jmp	#LR__2839
1a7dc     00 00 0E F2 | 	cmp	_var01, #0 wz
1a7e0     02 07 02 56 |  if_ne	mov	_var04, _var03
1a7e4     01 04 06 51 |  if_ne	add	_var03, #1
1a7e8     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
1a7ec     00 00 06 56 |  if_ne	mov	_var01, #0
1a7f0     01 07 C2 FA | 	rdbyte	_var04, _var02
1a7f4     2E 06 0E F2 | 	cmp	_var04, #46 wz
1a7f8     D8 00 90 5D |  if_ne	jmp	#LR__2832
1a7fc     01 02 06 F1 | 	add	_var02, #1
1a800     01 07 C2 FA | 	rdbyte	_var04, _var02
1a804     01 02 86 F1 | 	sub	_var02, #1
1a808     2F 06 0E F2 | 	cmp	_var04, #47 wz
1a80c     18 00 90 AD |  if_e	jmp	#LR__2821
1a810     01 02 06 F1 | 	add	_var02, #1
1a814     01 09 C2 FA | 	rdbyte	_var05, _var02
1a818     01 02 86 F1 | 	sub	_var02, #1
1a81c     04 0B 02 F6 | 	mov	_var06, _var05
1a820     07 0A 4E F7 | 	zerox	_var06, #7 wz
1a824     10 00 90 5D |  if_ne	jmp	#LR__2822
1a828                 | LR__2821
1a828     01 0D 02 F6 | 	mov	_var07, _var02
1a82c     01 0C 06 F1 | 	add	_var07, #1
1a830     06 03 02 F6 | 	mov	_var02, _var07
1a834     E0 00 90 FD | 	jmp	#LR__2836
1a838                 | LR__2822
1a838     01 02 06 F1 | 	add	_var02, #1
1a83c     01 0D C2 FA | 	rdbyte	_var07, _var02
1a840     01 02 86 F1 | 	sub	_var02, #1
1a844     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
1a848     2E 06 0E F2 | 	cmp	_var04, #46 wz
1a84c     84 00 90 5D |  if_ne	jmp	#LR__2831
1a850     02 02 06 F1 | 	add	_var02, #2
1a854     01 0D C2 FA | 	rdbyte	_var07, _var02
1a858     02 02 86 F1 | 	sub	_var02, #2
1a85c     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
1a860     2F 06 0E F2 | 	cmp	_var04, #47 wz
1a864     18 00 90 AD |  if_e	jmp	#LR__2823
1a868     02 02 06 F1 | 	add	_var02, #2
1a86c     01 09 C2 FA | 	rdbyte	_var05, _var02
1a870     02 02 86 F1 | 	sub	_var02, #2
1a874     04 0B 02 F6 | 	mov	_var06, _var05
1a878     07 0A 4E F7 | 	zerox	_var06, #7 wz
1a87c     54 00 90 5D |  if_ne	jmp	#LR__2830
1a880                 | LR__2823
1a880     02 02 06 F1 | 	add	_var02, #2
1a884     09 05 5A F2 | 	cmps	_var03, arg01 wcz
1a888     40 00 90 ED |  if_be	jmp	#LR__2829
1a88c     02 0F 02 F6 | 	mov	_var08, _var03
1a890     01 0E 86 F1 | 	sub	_var08, #1
1a894                 | LR__2824
1a894     07 07 C2 FA | 	rdbyte	_var04, _var08
1a898     2F 06 0E F2 | 	cmp	_var04, #47 wz
1a89c     0C 00 90 5D |  if_ne	jmp	#LR__2825
1a8a0     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1a8a4     01 0E 86 11 |  if_a	sub	_var08, #1
1a8a8     E8 FF 9F 1D |  if_a	jmp	#LR__2824
1a8ac                 | LR__2825
1a8ac     97 0C 48 FB | 	callpa	#(@LR__2827-@LR__2826)>>2,fcache_load_ptr_
1a8b0                 | LR__2826
1a8b0     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1a8b4     10 00 90 ED |  if_be	jmp	#LR__2828
1a8b8     07 07 C2 FA | 	rdbyte	_var04, _var08
1a8bc     2F 06 0E F2 | 	cmp	_var04, #47 wz
1a8c0     01 0E 86 51 |  if_ne	sub	_var08, #1
1a8c4     E8 FF 9F 5D |  if_ne	jmp	#LR__2826
1a8c8                 | LR__2827
1a8c8                 | LR__2828
1a8c8     07 05 02 F6 | 	mov	_var03, _var08
1a8cc                 | LR__2829
1a8cc     01 00 06 F6 | 	mov	_var01, #1
1a8d0     44 00 90 FD | 	jmp	#LR__2836
1a8d4                 | LR__2830
1a8d4                 | LR__2831
1a8d4                 | LR__2832
1a8d4     97 18 48 FB | 	callpa	#(@LR__2834-@LR__2833)>>2,fcache_load_ptr_
1a8d8                 | LR__2833
1a8d8     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1a8dc     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
1a8e0     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
1a8e4     20 00 90 AD |  if_e	jmp	#LR__2835
1a8e8     01 0B 02 F6 | 	mov	_var06, _var02
1a8ec     01 09 02 F6 | 	mov	_var05, _var02
1a8f0     01 08 06 F1 | 	add	_var05, #1
1a8f4     05 11 C2 FA | 	rdbyte	_var09, _var06
1a8f8     04 03 02 F6 | 	mov	_var02, _var05
1a8fc     02 11 42 FC | 	wrbyte	_var09, _var03
1a900     01 04 06 F1 | 	add	_var03, #1
1a904     D0 FF 9F FD | 	jmp	#LR__2833
1a908                 | LR__2834
1a908                 | LR__2835
1a908     01 07 C2 FA | 	rdbyte	_var04, _var02
1a90c     2F 06 0E F2 | 	cmp	_var04, #47 wz
1a910     C0 FE 9F 5D |  if_ne	jmp	#LR__2820
1a914     01 00 06 F6 | 	mov	_var01, #1
1a918                 | LR__2836
1a918     97 0C 48 FB | 	callpa	#(@LR__2838-@LR__2837)>>2,fcache_load_ptr_
1a91c                 | LR__2837
1a91c     01 07 C2 FA | 	rdbyte	_var04, _var02
1a920     2F 06 0E F2 | 	cmp	_var04, #47 wz
1a924     01 0D 02 A6 |  if_e	mov	_var07, _var02
1a928     01 0C 06 A1 |  if_e	add	_var07, #1
1a92c     06 03 02 A6 |  if_e	mov	_var02, _var07
1a930     E8 FF 9F AD |  if_e	jmp	#LR__2837
1a934                 | LR__2838
1a934     9C FE 9F FD | 	jmp	#LR__2820
1a938                 | LR__2839
1a938     02 01 48 FC | 	wrbyte	#0, _var03
1a93c                 | __system___normalizeName_ret
1a93c     2D 00 64 FD | 	ret
1a940                 | 
1a940                 | __system___strrev
1a940     09 01 CA FA | 	rdbyte	_var01, arg01 wz
1a944     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
1a948     09 03 02 F6 | 	mov	_var02, arg01
1a94c     97 1A 48 FB | 	callpa	#(@LR__2842-@LR__2840)>>2,fcache_load_ptr_
1a950                 | LR__2840
1a950     01 01 CA FA | 	rdbyte	_var01, _var02 wz
1a954     01 02 06 51 |  if_ne	add	_var02, #1
1a958     F4 FF 9F 5D |  if_ne	jmp	#LR__2840
1a95c     01 02 86 F1 | 	sub	_var02, #1
1a960                 | LR__2841
1a960     09 03 5A F2 | 	cmps	_var02, arg01 wcz
1a964     1C 00 90 ED |  if_be	jmp	#LR__2843
1a968     09 01 C2 FA | 	rdbyte	_var01, arg01
1a96c     01 05 C2 FA | 	rdbyte	_var03, _var02
1a970     09 05 42 FC | 	wrbyte	_var03, arg01
1a974     01 01 42 FC | 	wrbyte	_var01, _var02
1a978     01 12 06 F1 | 	add	arg01, #1
1a97c     01 02 86 F1 | 	sub	_var02, #1
1a980     DC FF 9F FD | 	jmp	#LR__2841
1a984                 | LR__2842
1a984                 | LR__2843
1a984                 | __system___strrev_ret
1a984     2D 00 64 FD | 	ret
1a988                 | 
1a988                 | __system___fmtpad
1a988     06 4A 05 F6 | 	mov	COUNT_, #6
1a98c     A8 00 A0 FD | 	call	#pushregs_
1a990     09 1F 02 F6 | 	mov	local01, arg01
1a994     0A 21 02 F6 | 	mov	local02, arg02
1a998     0B 23 02 F6 | 	mov	local03, arg03
1a99c     10 13 EA F8 | 	getbyte	arg01, local02, #1
1a9a0     16 20 46 F0 | 	shr	local02, #22
1a9a4     03 20 0E F5 | 	and	local02, #3 wz
1a9a8     00 24 06 F6 | 	mov	local04, #0
1a9ac     01 20 06 A6 |  if_e	mov	local02, #1
1a9b0     0C 21 CA F7 | 	test	local02, arg04 wz
1a9b4     00 FA 05 A6 |  if_e	mov	result1, #0
1a9b8     88 00 90 AD |  if_e	jmp	#LR__2853
1a9bc     09 23 C2 F2 | 	subr	local03, arg01
1a9c0     01 22 56 F2 | 	cmps	local03, #1 wc
1a9c4     00 FA 05 C6 |  if_b	mov	result1, #0
1a9c8     78 00 90 CD |  if_b	jmp	#LR__2853
1a9cc     03 20 0E F2 | 	cmp	local02, #3 wz
1a9d0     18 00 90 5D |  if_ne	jmp	#LR__2850
1a9d4     01 18 0E F2 | 	cmp	arg04, #1 wz
1a9d8     6E 20 62 FD | 	wrz	local02
1a9dc     10 23 02 F1 | 	add	local03, local02
1a9e0     11 23 52 F6 | 	abs	local03, local03 wc
1a9e4     01 22 46 F0 | 	shr	local03, #1
1a9e8     11 23 82 F6 | 	negc	local03, local03
1a9ec                 | LR__2850
1a9ec     01 22 56 F2 | 	cmps	local03, #1 wc
1a9f0     4C 00 90 CD |  if_b	jmp	#LR__2852
1a9f4     11 27 02 F6 | 	mov	local05, local03
1a9f8                 | LR__2851
1a9f8     0F 21 02 F6 | 	mov	local02, local01
1a9fc     0F 29 02 F6 | 	mov	local06, local01
1aa00     13 20 46 F7 | 	zerox	local02, #19
1aa04     14 28 46 F0 | 	shr	local06, #20
1aa08     02 28 66 F0 | 	shl	local06, #2
1aa0c     ED 28 02 F1 | 	add	local06, __methods__
1aa10     14 29 02 FB | 	rdlong	local06, local06
1aa14     20 12 06 F6 | 	mov	arg01, #32
1aa18     F2 22 02 F6 | 	mov	local03, objptr
1aa1c     10 E5 01 F6 | 	mov	objptr, local02
1aa20     2D 28 62 FD | 	call	local06
1aa24     11 E5 01 F6 | 	mov	objptr, local03
1aa28     FD 28 02 F6 | 	mov	local06, result1
1aa2c     00 28 56 F2 | 	cmps	local06, #0 wc
1aa30     14 FB 01 C6 |  if_b	mov	result1, local06
1aa34     0C 00 90 CD |  if_b	jmp	#LR__2853
1aa38     14 25 02 F1 | 	add	local04, local06
1aa3c     EE 27 6E FB | 	djnz	local05, #LR__2851
1aa40                 | LR__2852
1aa40     12 FB 01 F6 | 	mov	result1, local04
1aa44                 | LR__2853
1aa44     A7 F0 03 F6 | 	mov	ptra, fp
1aa48     B2 00 A0 FD | 	call	#popregs_
1aa4c                 | __system___fmtpad_ret
1aa4c     2D 00 64 FD | 	ret
1aa50                 | 
1aa50                 | __system___uitoa
1aa50     04 4A 05 F6 | 	mov	COUNT_, #4
1aa54     A8 00 A0 FD | 	call	#pushregs_
1aa58     09 1F 02 F6 | 	mov	local01, arg01
1aa5c     00 1A 4E F2 | 	cmps	arg05, #0 wz
1aa60     0F 1B 02 F6 | 	mov	arg05, local01
1aa64     00 20 06 F6 | 	mov	local02, #0
1aa68     37 22 06 56 |  if_ne	mov	local03, #55
1aa6c     57 22 06 A6 |  if_e	mov	local03, #87
1aa70                 | LR__2860
1aa70     0B 15 12 FD | 	qdiv	arg02, arg03
1aa74     19 24 62 FD | 	getqy	local04
1aa78     0B 15 12 FD | 	qdiv	arg02, arg03
1aa7c     0A 24 16 F2 | 	cmp	local04, #10 wc
1aa80     30 24 06 C1 |  if_b	add	local04, #48
1aa84     11 25 02 31 |  if_ae	add	local04, local03
1aa88     0D 25 42 FC | 	wrbyte	local04, arg05
1aa8c     01 1A 06 F1 | 	add	arg05, #1
1aa90     01 20 06 F1 | 	add	local02, #1
1aa94     18 14 62 FD | 	getqx	arg02
1aa98     00 14 0E F2 | 	cmp	arg02, #0 wz
1aa9c     D0 FF 9F 5D |  if_ne	jmp	#LR__2860
1aaa0     0C 21 12 F2 | 	cmp	local02, arg04 wc
1aaa4     C8 FF 9F CD |  if_b	jmp	#LR__2860
1aaa8     0D 01 48 FC | 	wrbyte	#0, arg05
1aaac     0F 13 02 F6 | 	mov	arg01, local01
1aab0     8C FE BF FD | 	call	#__system___strrev
1aab4     10 FB 01 F6 | 	mov	result1, local02
1aab8     A7 F0 03 F6 | 	mov	ptra, fp
1aabc     B2 00 A0 FD | 	call	#popregs_
1aac0                 | __system___uitoa_ret
1aac0     2D 00 64 FD | 	ret
1aac4                 | 
1aac4                 | __system__disassemble_0327
1aac4     10 4A 05 F6 | 	mov	COUNT_, #16
1aac8     A8 00 A0 FD | 	call	#pushregs_
1aacc     09 1F 02 F6 | 	mov	local01, arg01
1aad0     0A 21 02 F6 | 	mov	local02, arg02
1aad4     0B 23 02 F6 | 	mov	local03, arg03
1aad8     0C 25 02 F6 | 	mov	local04, arg04
1aadc     0D 27 02 F6 | 	mov	local05, arg05
1aae0     13 13 52 F6 | 	abs	arg01, local05 wc
1aae4     1F 28 C6 C9 |  if_b	decod	local06, #31
1aae8     00 28 06 36 |  if_ae	mov	local06, #0
1aaec     B8 D3 BF FD | 	call	#__system___float_fromuns
1aaf0     14 FB 61 F5 | 	xor	result1, local06
1aaf4     FD 2A 02 F6 | 	mov	local07, result1
1aaf8     00 2C 06 F6 | 	mov	local08, #0
1aafc     0F 13 02 F6 | 	mov	arg01, local01
1ab00     00 14 06 F6 | 	mov	arg02, #0
1ab04     01 16 06 F6 | 	mov	arg03, #1
1ab08     FC DA BF FD | 	call	#__system___float_cmp
1ab0c     00 FA 0D F2 | 	cmp	result1, #0 wz
1ab10     00 2E 06 A6 |  if_e	mov	local09, #0
1ab14     10 01 68 AC |  if_e	wrlong	#0, local02
1ab18     11 2F 62 AC |  if_e	wrlong	local09, local03
1ab1c     8C 01 90 AD |  if_e	jmp	#LR__2882
1ab20     0F 13 02 F6 | 	mov	arg01, local01
1ab24     AC DF BF FD | 	call	#__system____builtin_ilogb
1ab28     FD 30 02 F6 | 	mov	local10, result1
1ab2c     0A 26 0E F2 | 	cmp	local05, #10 wz
1ab30     24 00 90 5D |  if_ne	jmp	#LR__2870
1ab34     18 2F 02 F6 | 	mov	local09, local10
1ab38     01 2E 66 F0 | 	shl	local09, #1
1ab3c     18 2F 02 F1 | 	add	local09, local10
1ab40     17 31 52 F6 | 	abs	local10, local09 wc
1ab44     0A 30 16 FD | 	qdiv	local10, #10
1ab48     09 32 06 F6 | 	mov	local11, #9
1ab4c     18 30 62 FD | 	getqx	local10
1ab50     18 31 82 F6 | 	negc	local10, local10
1ab54     04 00 90 FD | 	jmp	#LR__2871
1ab58                 | LR__2870
1ab58     18 32 06 F6 | 	mov	local11, #24
1ab5c                 | LR__2871
1ab5c                 | LR__2872
1ab5c     08 2C 56 F2 | 	cmps	local08, #8 wc
1ab60     01 2C 06 F1 | 	add	local08, #1
1ab64     60 00 90 3D |  if_ae	jmp	#LR__2873
1ab68     00 C0 1F FF 
1ab6c     00 12 06 F6 | 	mov	arg01, ##1065353216
1ab70     15 15 02 F6 | 	mov	arg02, local07
1ab74     18 17 02 F6 | 	mov	arg03, local10
1ab78     8C E3 BF FD | 	call	#__system___float_pow_n
1ab7c     FD 14 02 F6 | 	mov	arg02, result1
1ab80     0F 13 02 F6 | 	mov	arg01, local01
1ab84     50 D8 BF FD | 	call	#__system___float_div
1ab88     FD 34 02 F6 | 	mov	local12, result1
1ab8c     1A 13 02 F6 | 	mov	arg01, local12
1ab90     00 C0 1F FF 
1ab94     00 14 06 F6 | 	mov	arg02, ##1065353216
1ab98     01 16 06 F6 | 	mov	arg03, #1
1ab9c     68 DA BF FD | 	call	#__system___float_cmp
1aba0     00 FA 55 F2 | 	cmps	result1, #0 wc
1aba4     01 30 86 C1 |  if_b	sub	local10, #1
1aba8     B0 FF 9F CD |  if_b	jmp	#LR__2872
1abac     15 15 02 F6 | 	mov	arg02, local07
1abb0     1A 13 02 F6 | 	mov	arg01, local12
1abb4     01 16 66 F6 | 	neg	arg03, #1
1abb8     4C DA BF FD | 	call	#__system___float_cmp
1abbc     00 FA 55 F2 | 	cmps	result1, #0 wc
1abc0     01 30 06 31 |  if_ae	add	local10, #1
1abc4     94 FF 9F 3D |  if_ae	jmp	#LR__2872
1abc8                 | LR__2873
1abc8     1A 13 02 F6 | 	mov	arg01, local12
1abcc     04 DF BF FD | 	call	#__system____builtin_ilogb
1abd0     FD 36 02 F6 | 	mov	local13, result1
1abd4     1A 39 02 F6 | 	mov	local14, local12
1abd8     17 39 06 F4 | 	bitl	local14, #279
1abdc     17 38 26 F4 | 	bith	local14, #23
1abe0     1B 39 62 F0 | 	shl	local14, local13
1abe4     02 26 0E F2 | 	cmp	local05, #2 wz
1abe8     02 24 66 A0 |  if_e	shl	local04, #2
1abec     00 3A 06 F6 | 	mov	local15, #0
1abf0     00 24 56 F2 | 	cmps	local04, #0 wc
1abf4     10 00 90 3D |  if_ae	jmp	#LR__2874
1abf8     18 25 C2 F2 | 	subr	local04, local10
1abfc     00 24 56 F2 | 	cmps	local04, #0 wc
1ac00     A0 00 90 CD |  if_b	jmp	#LR__2881
1ac04     04 00 90 FD | 	jmp	#LR__2875
1ac08                 | LR__2874
1ac08     01 24 06 F1 | 	add	local04, #1
1ac0c                 | LR__2875
1ac0c     19 25 7A F3 | 	fles	local04, local11 wcz
1ac10     01 3C 06 F6 | 	mov	local16, #1
1ac14     97 22 48 FB | 	callpa	#(@LR__2877-@LR__2876)>>2,fcache_load_ptr_
1ac18                 | LR__2876
1ac18     00 40 00 FF 
1ac1c     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
1ac20     38 00 90 3D |  if_ae	jmp	#LR__2878
1ac24     01 24 56 F2 | 	cmps	local04, #1 wc
1ac28     01 24 86 F1 | 	sub	local04, #1
1ac2c     2C 00 90 CD |  if_b	jmp	#LR__2878
1ac30     13 3B 02 FD | 	qmul	local15, local05
1ac34     1C 37 02 F6 | 	mov	local13, local14
1ac38     17 36 46 F0 | 	shr	local13, #23
1ac3c     17 39 06 F4 | 	bitl	local14, #279
1ac40     18 3A 62 FD | 	getqx	local15
1ac44     13 3D 02 FD | 	qmul	local16, local05
1ac48     18 3C 62 FD | 	getqx	local16
1ac4c     13 39 02 FD | 	qmul	local14, local05
1ac50     1B 3B 02 F1 | 	add	local15, local13
1ac54     18 38 62 FD | 	getqx	local14
1ac58     BC FF 9F FD | 	jmp	#LR__2876
1ac5c                 | LR__2877
1ac5c                 | LR__2878
1ac5c     13 2F 02 F6 | 	mov	local09, local05
1ac60     17 2E 66 F0 | 	shl	local09, #23
1ac64     17 37 52 F6 | 	abs	local13, local09 wc
1ac68     01 36 46 F0 | 	shr	local13, #1
1ac6c     1B 37 82 F6 | 	negc	local13, local13
1ac70     1B 39 1A F2 | 	cmp	local14, local13 wcz
1ac74     20 00 90 1D |  if_a	jmp	#LR__2879
1ac78     17 26 66 F0 | 	shl	local05, #23
1ac7c     13 37 52 F6 | 	abs	local13, local05 wc
1ac80     01 36 46 F0 | 	shr	local13, #1
1ac84     1B 37 82 F6 | 	negc	local13, local13
1ac88     1B 39 0A F2 | 	cmp	local14, local13 wz
1ac8c     14 00 90 5D |  if_ne	jmp	#LR__2880
1ac90     01 3A CE F7 | 	test	local15, #1 wz
1ac94     0C 00 90 AD |  if_e	jmp	#LR__2880
1ac98                 | LR__2879
1ac98     01 3A 06 F1 | 	add	local15, #1
1ac9c     1E 3B 0A F2 | 	cmp	local15, local16 wz
1aca0     01 30 06 A1 |  if_e	add	local10, #1
1aca4                 | LR__2880
1aca4                 | LR__2881
1aca4     10 3B 62 FC | 	wrlong	local15, local02
1aca8     11 31 62 FC | 	wrlong	local10, local03
1acac                 | LR__2882
1acac     A7 F0 03 F6 | 	mov	ptra, fp
1acb0     B2 00 A0 FD | 	call	#popregs_
1acb4                 | __system__disassemble_0327_ret
1acb4     2D 00 64 FD | 	ret
1acb8                 | 
1acb8                 | __system__emitsign_0329
1acb8     00 FA 05 F6 | 	mov	result1, #0
1acbc     00 14 0E F2 | 	cmp	arg02, #0 wz
1acc0     09 01 02 56 |  if_ne	mov	_var01, arg01
1acc4     01 12 06 51 |  if_ne	add	arg01, #1
1acc8     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
1accc     01 FA 05 56 |  if_ne	mov	result1, #1
1acd0     00 16 0E F2 | 	cmp	arg03, #0 wz
1acd4     09 61 48 5C |  if_ne	wrbyte	#48, arg01
1acd8     01 12 06 51 |  if_ne	add	arg01, #1
1acdc     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
1ace0     02 FA 05 51 |  if_ne	add	result1, #2
1ace4                 | __system__emitsign_0329_ret
1ace4     2D 00 64 FD | 	ret
1ace8                 | 
1ace8                 | __system___gettxfunc
1ace8     01 4A 05 F6 | 	mov	COUNT_, #1
1acec     A8 00 A0 FD | 	call	#pushregs_
1acf0     A0 F8 BF FD | 	call	#__system____getftab
1acf4     FD 1E 0A F6 | 	mov	local01, result1 wz
1acf8     10 00 90 AD |  if_e	jmp	#LR__2890
1acfc     08 1E 06 F1 | 	add	local01, #8
1ad00     0F 15 0A FB | 	rdlong	arg02, local01 wz
1ad04     08 1E 86 F1 | 	sub	local01, #8
1ad08     08 00 90 5D |  if_ne	jmp	#LR__2891
1ad0c                 | LR__2890
1ad0c     00 FA 05 F6 | 	mov	result1, #0
1ad10     0C 00 90 FD | 	jmp	#LR__2892
1ad14                 | LR__2891
1ad14     00 C8 02 FF 
1ad18     00 1E 46 F5 | 	or	local01, ##93323264
1ad1c     0F FB 01 F6 | 	mov	result1, local01
1ad20                 | LR__2892
1ad20     A7 F0 03 F6 | 	mov	ptra, fp
1ad24     B2 00 A0 FD | 	call	#popregs_
1ad28                 | __system___gettxfunc_ret
1ad28     2D 00 64 FD | 	ret
1ad2c                 | 
1ad2c                 | __system___getrxfunc
1ad2c     01 4A 05 F6 | 	mov	COUNT_, #1
1ad30     A8 00 A0 FD | 	call	#pushregs_
1ad34     5C F8 BF FD | 	call	#__system____getftab
1ad38     FD 1E 0A F6 | 	mov	local01, result1 wz
1ad3c     10 00 90 AD |  if_e	jmp	#LR__2900
1ad40     08 1E 06 F1 | 	add	local01, #8
1ad44     0F 15 0A FB | 	rdlong	arg02, local01 wz
1ad48     08 1E 86 F1 | 	sub	local01, #8
1ad4c     08 00 90 5D |  if_ne	jmp	#LR__2901
1ad50                 | LR__2900
1ad50     00 FA 05 F6 | 	mov	result1, #0
1ad54     0C 00 90 FD | 	jmp	#LR__2902
1ad58                 | LR__2901
1ad58     00 D0 02 FF 
1ad5c     00 1E 46 F5 | 	or	local01, ##94371840
1ad60     0F FB 01 F6 | 	mov	result1, local01
1ad64                 | LR__2902
1ad64     A7 F0 03 F6 | 	mov	ptra, fp
1ad68     B2 00 A0 FD | 	call	#popregs_
1ad6c                 | __system___getrxfunc_ret
1ad6c     2D 00 64 FD | 	ret
1ad70                 | 
1ad70                 | __system___getiolock_0369
1ad70     01 4A 05 F6 | 	mov	COUNT_, #1
1ad74     A8 00 A0 FD | 	call	#pushregs_
1ad78     18 F8 BF FD | 	call	#__system____getftab
1ad7c     FD 1E 0A F6 | 	mov	local01, result1 wz
1ad80     10 00 90 AD |  if_e	jmp	#LR__2910
1ad84     08 1E 06 F1 | 	add	local01, #8
1ad88     0F FB 09 FB | 	rdlong	result1, local01 wz
1ad8c     08 1E 86 F1 | 	sub	local01, #8
1ad90     18 00 90 5D |  if_ne	jmp	#LR__2911
1ad94                 | LR__2910
1ad94     01 00 00 FF 
1ad98     D4 E8 05 F1 | 	add	ptr___system__dat__, ##724
1ad9c     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
1ada0     01 00 00 FF 
1ada4     D4 E8 85 F1 | 	sub	ptr___system__dat__, ##724
1ada8     08 00 90 FD | 	jmp	#LR__2912
1adac                 | LR__2911
1adac     0C 1E 06 F1 | 	add	local01, #12
1adb0     0F FB 01 F6 | 	mov	result1, local01
1adb4                 | LR__2912
1adb4     A7 F0 03 F6 | 	mov	ptra, fp
1adb8     B2 00 A0 FD | 	call	#popregs_
1adbc                 | __system___getiolock_0369_ret
1adbc     2D 00 64 FD | 	ret
1adc0                 | 
1adc0                 | __system____ScanForChar
1adc0     09 01 02 F6 | 	mov	_var01, arg01
1adc4     09 03 02 F6 | 	mov	_var02, arg01
1adc8     97 06 48 FB | 	callpa	#(@LR__2921-@LR__2920)>>2,fcache_load_ptr_
1adcc                 | LR__2920
1adcc     01 FB C9 FA | 	rdbyte	result1, _var02 wz
1add0     01 02 06 51 |  if_ne	add	_var02, #1
1add4     F4 FF 9F 5D |  if_ne	jmp	#LR__2920
1add8                 | LR__2921
1add8     09 03 82 F1 | 	sub	_var02, arg01
1addc     01 FB 01 F6 | 	mov	result1, _var02
1ade0     FD 12 0A F6 | 	mov	arg01, result1 wz
1ade4     00 FA 05 A6 |  if_e	mov	result1, #0
1ade8     B8 00 90 AD |  if_e	jmp	#LR__2928
1adec     0A 05 02 F6 | 	mov	_var03, arg02
1adf0     07 04 4E F7 | 	zerox	_var03, #7 wz
1adf4     00 FA 05 A6 |  if_e	mov	result1, #0
1adf8     A8 00 90 AD |  if_e	jmp	#LR__2928
1adfc     01 16 16 F2 | 	cmp	arg03, #1 wc
1ae00     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
1ae04     01 16 06 86 |  if_c_and_z	mov	arg03, #1
1ae08     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
1ae0c     94 00 90 4D |  if_c_and_nz	jmp	#LR__2928
1ae10     09 17 1A F2 | 	cmp	arg03, arg01 wcz
1ae14     10 00 90 ED |  if_be	jmp	#LR__2922
1ae18     00 18 0E F2 | 	cmp	arg04, #0 wz
1ae1c     00 FA 05 A6 |  if_e	mov	result1, #0
1ae20     80 00 90 AD |  if_e	jmp	#LR__2928
1ae24     09 17 02 F6 | 	mov	arg03, arg01
1ae28                 | LR__2922
1ae28     01 16 86 F1 | 	sub	arg03, #1
1ae2c     00 18 0E F2 | 	cmp	arg04, #0 wz
1ae30     38 00 90 5D |  if_ne	jmp	#LR__2924
1ae34     0B 07 02 F6 | 	mov	_var04, arg03
1ae38     09 09 02 F6 | 	mov	_var05, arg01
1ae3c                 | LR__2923
1ae3c     04 07 12 F2 | 	cmp	_var04, _var05 wc
1ae40     5C 00 90 3D |  if_ae	jmp	#LR__2927
1ae44     03 05 02 F6 | 	mov	_var03, _var04
1ae48     00 05 02 F1 | 	add	_var03, _var01
1ae4c     02 05 C2 FA | 	rdbyte	_var03, _var03
1ae50     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
1ae54     0C 05 0A F2 | 	cmp	_var03, arg04 wz
1ae58     01 06 06 A1 |  if_e	add	_var04, #1
1ae5c     03 FB 01 A6 |  if_e	mov	result1, _var04
1ae60     40 00 90 AD |  if_e	jmp	#LR__2928
1ae64     01 06 06 F1 | 	add	_var04, #1
1ae68     D0 FF 9F FD | 	jmp	#LR__2923
1ae6c                 | LR__2924
1ae6c     0B 07 02 F6 | 	mov	_var04, arg03
1ae70                 | LR__2925
1ae70     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
1ae74     28 00 90 1D |  if_a	jmp	#LR__2926
1ae78     03 09 02 F6 | 	mov	_var05, _var04
1ae7c     00 09 02 F1 | 	add	_var05, _var01
1ae80     04 05 C2 FA | 	rdbyte	_var03, _var05
1ae84     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
1ae88     04 05 0A F2 | 	cmp	_var03, _var05 wz
1ae8c     01 06 06 A1 |  if_e	add	_var04, #1
1ae90     03 FB 01 A6 |  if_e	mov	result1, _var04
1ae94     0C 00 90 AD |  if_e	jmp	#LR__2928
1ae98     01 06 86 F1 | 	sub	_var04, #1
1ae9c     D0 FF 9F FD | 	jmp	#LR__2925
1aea0                 | LR__2926
1aea0                 | LR__2927
1aea0     00 FA 05 F6 | 	mov	result1, #0
1aea4                 | LR__2928
1aea4                 | __system____ScanForChar_ret
1aea4     2D 00 64 FD | 	ret
1aea8                 | 
1aea8                 | __system___basic_dir
1aea8     05 4A 05 F6 | 	mov	COUNT_, #5
1aeac     A8 00 A0 FD | 	call	#pushregs_
1aeb0     4C F0 07 F1 | 	add	ptra, #76
1aeb4     04 4E 05 F1 | 	add	fp, #4
1aeb8     A7 12 62 FC | 	wrlong	arg01, fp
1aebc     04 4E 05 F1 | 	add	fp, #4
1aec0     A7 14 62 FC | 	wrlong	arg02, fp
1aec4     04 4E 85 F1 | 	sub	fp, #4
1aec8     A7 14 0A FB | 	rdlong	arg02, fp wz
1aecc     04 4E 85 F1 | 	sub	fp, #4
1aed0     04 4E 05 51 |  if_ne	add	fp, #4
1aed4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1aed8     04 4E 85 51 |  if_ne	sub	fp, #4
1aedc     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
1aee0     70 00 90 AD |  if_e	jmp	#LR__2930
1aee4     03 00 00 FF 
1aee8     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1aeec     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1aef0     03 00 00 FF 
1aef4     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1aef8     03 00 00 5F 
1aefc     28 E9 05 51 |  if_ne	add	ptr___system__dat__, ##1832
1af00     F4 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
1af04     03 00 00 5F 
1af08     28 E9 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
1af0c     18 EA BF 5D |  if_ne	call	#__system__closedir
1af10     24 01 00 FF 
1af14     F4 13 06 F6 | 	mov	arg01, ##@LR__4088
1af18     20 E9 BF FD | 	call	#__system__opendir
1af1c     03 00 00 FF 
1af20     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1af24     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1af28     08 4E 05 F1 | 	add	fp, #8
1af2c     A7 20 02 FB | 	rdlong	local02, fp
1af30     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1af34     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1af38     04 4E 85 F1 | 	sub	fp, #4
1af3c     A7 20 02 FB | 	rdlong	local02, fp
1af40     04 4E 85 F1 | 	sub	fp, #4
1af44     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1af48     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1af4c     03 00 00 FF 
1af50     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1af54                 | LR__2930
1af54     03 00 00 FF 
1af58     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1af5c     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1af60     03 00 00 FF 
1af64     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1af68     24 01 00 AF 
1af6c     F6 FB 05 A6 |  if_e	mov	result1, ##@LR__4089
1af70     84 02 90 AD |  if_e	jmp	#LR__2943
1af74                 | LR__2931
1af74     03 00 00 FF 
1af78     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1af7c     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1af80     03 00 00 FF 
1af84     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1af88     10 EA BF FD | 	call	#__system__readdir
1af8c     0C 4E 05 F1 | 	add	fp, #12
1af90     A7 FA 61 FC | 	wrlong	result1, fp
1af94     0C 4E 85 F1 | 	sub	fp, #12
1af98     00 FA 0D F2 | 	cmp	result1, #0 wz
1af9c     38 00 90 5D |  if_ne	jmp	#LR__2932
1afa0     03 00 00 FF 
1afa4     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1afa8     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1afac     03 00 00 FF 
1afb0     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1afb4     70 E9 BF FD | 	call	#__system__closedir
1afb8     03 00 00 FF 
1afbc     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1afc0     F4 00 68 FC | 	wrlong	#0, ptr___system__dat__
1afc4     03 00 00 FF 
1afc8     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1afcc     24 01 00 FF 
1afd0     F8 FB 05 F6 | 	mov	result1, ##@LR__4090
1afd4     20 02 90 FD | 	jmp	#LR__2943
1afd8                 | LR__2932
1afd8     0C 4E 05 F1 | 	add	fp, #12
1afdc     A7 12 02 FB | 	rdlong	arg01, fp
1afe0     0C 4E 85 F1 | 	sub	fp, #12
1afe4     03 00 00 FF 
1afe8     30 E9 05 F1 | 	add	ptr___system__dat__, ##1840
1afec     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1aff0     03 00 00 FF 
1aff4     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1aff8     48 07 B0 FD | 	call	#__system___pat_match
1affc     00 FA 0D F2 | 	cmp	result1, #0 wz
1b000     70 FF 9F AD |  if_e	jmp	#LR__2931
1b004     03 00 00 FF 
1b008     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1b00c     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1b010     03 00 00 FF 
1b014     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1b018     78 01 90 AD |  if_e	jmp	#LR__2939
1b01c     0C 4E 05 F1 | 	add	fp, #12
1b020     A7 12 02 FB | 	rdlong	arg01, fp
1b024     04 4E 05 F1 | 	add	fp, #4
1b028     A7 14 02 F6 | 	mov	arg02, fp
1b02c     10 4E 85 F1 | 	sub	fp, #16
1b030     68 F2 BF FD | 	call	#__system__stat
1b034     40 4E 05 F1 | 	add	fp, #64
1b038     A7 FA 61 FC | 	wrlong	result1, fp
1b03c     40 4E 85 F1 | 	sub	fp, #64
1b040     00 FA 0D F2 | 	cmp	result1, #0 wz
1b044     24 01 00 5F 
1b048     FA FB 05 56 |  if_ne	mov	result1, ##@LR__4091
1b04c     A8 01 90 5D |  if_ne	jmp	#LR__2943
1b050     18 4E 05 F1 | 	add	fp, #24
1b054     A7 20 02 FB | 	rdlong	local02, fp
1b058     78 00 00 FF 
1b05c     00 20 06 F5 | 	and	local02, ##61440
1b060     2C 4E 05 F1 | 	add	fp, #44
1b064     A7 20 62 FC | 	wrlong	local02, fp
1b068     38 4E 85 F1 | 	sub	fp, #56
1b06c     A7 20 02 FB | 	rdlong	local02, fp
1b070     0C 4E 85 F1 | 	sub	fp, #12
1b074     10 21 C2 FA | 	rdbyte	local02, local02
1b078     2E 20 0E F2 | 	cmp	local02, #46 wz
1b07c     08 4E 05 A1 |  if_e	add	fp, #8
1b080     A7 04 68 AC |  if_e	wrlong	#2, fp
1b084     08 4E C5 F3 | 	sumz	fp, #8
1b088     A7 00 68 5C |  if_ne	wrlong	#0, fp
1b08c     08 4E 85 51 |  if_ne	sub	fp, #8
1b090     44 4E 05 F1 | 	add	fp, #68
1b094     A7 20 02 FB | 	rdlong	local02, fp
1b098     44 4E 85 F1 | 	sub	fp, #68
1b09c     08 00 00 FF 
1b0a0     00 20 0E F2 | 	cmp	local02, ##4096 wz
1b0a4     18 00 90 5D |  if_ne	jmp	#LR__2933
1b0a8     08 4E 05 F1 | 	add	fp, #8
1b0ac     A7 20 02 FB | 	rdlong	local02, fp
1b0b0     10 20 46 F5 | 	or	local02, #16
1b0b4     A7 20 62 FC | 	wrlong	local02, fp
1b0b8     08 4E 85 F1 | 	sub	fp, #8
1b0bc     AC 00 90 FD | 	jmp	#LR__2938
1b0c0                 | LR__2933
1b0c0     44 4E 05 F1 | 	add	fp, #68
1b0c4     A7 20 02 FB | 	rdlong	local02, fp
1b0c8     44 4E 85 F1 | 	sub	fp, #68
1b0cc     10 00 00 FF 
1b0d0     00 20 0E F2 | 	cmp	local02, ##8192 wz
1b0d4     44 4E 05 51 |  if_ne	add	fp, #68
1b0d8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1b0dc     44 4E 85 51 |  if_ne	sub	fp, #68
1b0e0     18 00 00 5F 
1b0e4     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
1b0e8     44 4E 05 51 |  if_ne	add	fp, #68
1b0ec     0F 23 02 56 |  if_ne	mov	local03, local01
1b0f0     44 4E 85 51 |  if_ne	sub	fp, #68
1b0f4     20 00 00 5F 
1b0f8     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
1b0fc     18 00 90 5D |  if_ne	jmp	#LR__2934
1b100     08 4E 05 F1 | 	add	fp, #8
1b104     A7 20 02 FB | 	rdlong	local02, fp
1b108     04 20 46 F5 | 	or	local02, #4
1b10c     A7 20 62 FC | 	wrlong	local02, fp
1b110     08 4E 85 F1 | 	sub	fp, #8
1b114     54 00 90 FD | 	jmp	#LR__2937
1b118                 | LR__2934
1b118     18 4E 05 F1 | 	add	fp, #24
1b11c     A7 20 02 FB | 	rdlong	local02, fp
1b120     18 4E 85 F1 | 	sub	fp, #24
1b124     92 20 CE F7 | 	test	local02, #146 wz
1b128     18 00 90 5D |  if_ne	jmp	#LR__2935
1b12c     08 4E 05 F1 | 	add	fp, #8
1b130     A7 20 02 FB | 	rdlong	local02, fp
1b134     01 20 46 F5 | 	or	local02, #1
1b138     A7 20 62 FC | 	wrlong	local02, fp
1b13c     08 4E 85 F1 | 	sub	fp, #8
1b140     28 00 90 FD | 	jmp	#LR__2936
1b144                 | LR__2935
1b144     44 4E 05 F1 | 	add	fp, #68
1b148     A7 24 02 FB | 	rdlong	local04, fp
1b14c     44 4E 85 F1 | 	sub	fp, #68
1b150     08 00 00 FF 
1b154     00 24 0E F2 | 	cmp	local04, ##4096 wz
1b158     08 4E 05 51 |  if_ne	add	fp, #8
1b15c     A7 24 02 5B |  if_ne	rdlong	local04, fp
1b160     20 24 46 55 |  if_ne	or	local04, #32
1b164     A7 24 62 5C |  if_ne	wrlong	local04, fp
1b168     08 4E 85 51 |  if_ne	sub	fp, #8
1b16c                 | LR__2936
1b16c                 | LR__2937
1b16c                 | LR__2938
1b16c     08 4E 05 F1 | 	add	fp, #8
1b170     A7 24 02 FB | 	rdlong	local04, fp
1b174     08 4E 85 F1 | 	sub	fp, #8
1b178     03 00 00 FF 
1b17c     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1b180     F4 1E 02 FB | 	rdlong	local01, ptr___system__dat__
1b184     03 00 00 FF 
1b188     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1b18c     0F 25 CA F7 | 	test	local04, local01 wz
1b190     E0 FD 9F AD |  if_e	jmp	#LR__2931
1b194                 | LR__2939
1b194     0C 4E 05 F1 | 	add	fp, #12
1b198     A7 12 02 FB | 	rdlong	arg01, fp
1b19c     0C 4E 85 F1 | 	sub	fp, #12
1b1a0     09 27 02 F6 | 	mov	local05, arg01
1b1a4     97 06 48 FB | 	callpa	#(@LR__2941-@LR__2940)>>2,fcache_load_ptr_
1b1a8                 | LR__2940
1b1a8     13 FB C9 FA | 	rdbyte	result1, local05 wz
1b1ac     01 26 06 51 |  if_ne	add	local05, #1
1b1b0     F4 FF 9F 5D |  if_ne	jmp	#LR__2940
1b1b4                 | LR__2941
1b1b4     13 13 C2 F2 | 	subr	arg01, local05
1b1b8     01 12 06 F1 | 	add	arg01, #1
1b1bc     68 E0 BF FD | 	call	#__system___gc_alloc_managed
1b1c0     48 4E 05 F1 | 	add	fp, #72
1b1c4     A7 FA 61 FC | 	wrlong	result1, fp
1b1c8     48 4E 85 F1 | 	sub	fp, #72
1b1cc     00 FA 0D F2 | 	cmp	result1, #0 wz
1b1d0     18 00 90 AD |  if_e	jmp	#LR__2942
1b1d4     48 4E 05 F1 | 	add	fp, #72
1b1d8     A7 12 02 FB | 	rdlong	arg01, fp
1b1dc     3C 4E 85 F1 | 	sub	fp, #60
1b1e0     A7 14 02 FB | 	rdlong	arg02, fp
1b1e4     0C 4E 85 F1 | 	sub	fp, #12
1b1e8     88 A5 BF FD | 	call	#__system____builtin_strcpy
1b1ec                 | LR__2942
1b1ec     48 4E 05 F1 | 	add	fp, #72
1b1f0     A7 FA 01 FB | 	rdlong	result1, fp
1b1f4     48 4E 85 F1 | 	sub	fp, #72
1b1f8                 | LR__2943
1b1f8     A7 F0 03 F6 | 	mov	ptra, fp
1b1fc     B2 00 A0 FD | 	call	#popregs_
1b200                 | __system___basic_dir_ret
1b200     2D 00 64 FD | 	ret
1b204                 | 
1b204                 | __system__pack_0435
1b204     09 01 02 F6 | 	mov	_var01, arg01
1b208     7F 16 06 F1 | 	add	arg03, #127
1b20c     04 18 CE F7 | 	test	arg04, #4 wz
1b210     10 00 90 AD |  if_e	jmp	#LR__2950
1b214     00 00 0E F2 | 	cmp	_var01, #0 wz
1b218     16 00 C6 A9 |  if_e	decod	_var01, #22
1b21c     F7 00 26 F4 | 	bith	_var01, #247
1b220     B4 00 90 FD | 	jmp	#LR__2959
1b224                 | LR__2950
1b224     02 18 CE F7 | 	test	arg04, #2 wz
1b228     00 C0 3F 5F 
1b22c     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
1b230     00 14 06 56 |  if_ne	mov	arg02, #0
1b234     A0 00 90 5D |  if_ne	jmp	#LR__2958
1b238     08 18 CE F7 | 	test	arg04, #8 wz
1b23c     00 00 06 56 |  if_ne	mov	_var01, #0
1b240     94 00 90 5D |  if_ne	jmp	#LR__2957
1b244     FF 16 56 F2 | 	cmps	arg03, #255 wc
1b248     00 C0 3F 3F 
1b24c     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
1b250     00 14 06 36 |  if_ae	mov	arg02, #0
1b254     80 00 90 3D |  if_ae	jmp	#LR__2956
1b258     01 16 56 F2 | 	cmps	arg03, #1 wc
1b25c     6C 00 90 3D |  if_ae	jmp	#LR__2954
1b260     01 14 46 F0 | 	shr	arg02, #1
1b264     00 03 02 F6 | 	mov	_var02, _var01
1b268     01 02 06 F5 | 	and	_var02, #1
1b26c     1F 02 66 F0 | 	shl	_var02, #31
1b270     01 15 42 F5 | 	or	arg02, _var02
1b274     01 00 46 F0 | 	shr	_var01, #1
1b278     97 1E 48 FB | 	callpa	#(@LR__2952-@LR__2951)>>2,fcache_load_ptr_
1b27c                 | LR__2951
1b27c     00 16 56 F2 | 	cmps	arg03, #0 wc
1b280     34 00 90 3D |  if_ae	jmp	#LR__2953
1b284     00 00 0E F2 | 	cmp	_var01, #0 wz
1b288     2C 00 90 AD |  if_e	jmp	#LR__2953
1b28c     0A 13 02 F6 | 	mov	arg01, arg02
1b290     01 12 06 F5 | 	and	arg01, #1
1b294     01 16 06 F1 | 	add	arg03, #1
1b298     01 14 46 F0 | 	shr	arg02, #1
1b29c     00 03 02 F6 | 	mov	_var02, _var01
1b2a0     01 02 06 F5 | 	and	_var02, #1
1b2a4     1F 02 66 F0 | 	shl	_var02, #31
1b2a8     01 15 42 F5 | 	or	arg02, _var02
1b2ac     09 15 42 F5 | 	or	arg02, arg01
1b2b0     01 00 46 F0 | 	shr	_var01, #1
1b2b4     C4 FF 9F FD | 	jmp	#LR__2951
1b2b8                 | LR__2952
1b2b8                 | LR__2953
1b2b8     00 16 56 F2 | 	cmps	arg03, #0 wc
1b2bc     18 00 90 3D |  if_ae	jmp	#LR__2955
1b2c0     00 14 0E F2 | 	cmp	arg02, #0 wz
1b2c4     6F 14 62 FD | 	wrnz	arg02
1b2c8     0C 00 90 FD | 	jmp	#LR__2955
1b2cc                 | LR__2954
1b2cc     17 01 06 F4 | 	bitl	_var01, #279
1b2d0     17 16 66 F0 | 	shl	arg03, #23
1b2d4     0B 01 42 F5 | 	or	_var01, arg03
1b2d8                 | LR__2955
1b2d8                 | LR__2956
1b2d8                 | LR__2957
1b2d8                 | LR__2958
1b2d8                 | LR__2959
1b2d8     01 00 CE F7 | 	test	_var01, #1 wz
1b2dc     01 14 46 55 |  if_ne	or	arg02, #1
1b2e0     0A 17 02 F6 | 	mov	arg03, arg02
1b2e4     00 02 06 F6 | 	mov	_var02, #0
1b2e8     FF FF 3F FF 
1b2ec     FF 15 06 F1 | 	add	arg02, ##2147483647
1b2f0     0B 15 12 F2 | 	cmp	arg02, arg03 wc
1b2f4     01 02 06 C6 |  if_b	mov	_var02, #1
1b2f8     01 01 02 F1 | 	add	_var01, _var02
1b2fc     01 18 CE F7 | 	test	arg04, #1 wz
1b300     1F 00 26 54 |  if_ne	bith	_var01, #31
1b304     00 FB 01 F6 | 	mov	result1, _var01
1b308                 | __system__pack_0435_ret
1b308     2D 00 64 FD | 	ret
1b30c                 | 
1b30c                 | __system___rxtxioctl_0524
1b30c     00 15 0E F2 | 	cmp	arg02, #256 wz
1b310     0C 00 90 AD |  if_e	jmp	#LR__2960
1b314     01 15 0E F2 | 	cmp	arg02, #257 wz
1b318     1C 00 90 AD |  if_e	jmp	#LR__2961
1b31c     30 00 90 FD | 	jmp	#LR__2962
1b320                 | LR__2960
1b320     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1b324     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1b328     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1b32c     0B FB 61 FC | 	wrlong	result1, arg03
1b330     00 FA 05 F6 | 	mov	result1, #0
1b334     28 00 90 FD | 	jmp	#LR__2963
1b338                 | LR__2961
1b338     0B 13 02 FB | 	rdlong	arg01, arg03
1b33c     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1b340     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1b344     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1b348     00 FA 05 F6 | 	mov	result1, #0
1b34c     10 00 90 FD | 	jmp	#LR__2963
1b350                 | LR__2962
1b350     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1b354     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
1b358     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1b35c     01 FA 65 F6 | 	neg	result1, #1
1b360                 | LR__2963
1b360                 | __system___rxtxioctl_0524_ret
1b360     2D 00 64 FD | 	ret
1b364                 | 
1b364                 | __system____dummy_flush_0525
1b364     00 FA 05 F6 | 	mov	result1, #0
1b368                 | __system____dummy_flush_0525_ret
1b368     2D 00 64 FD | 	ret
1b36c                 | 
1b36c                 | __system___vfsread
1b36c     03 4A 05 F6 | 	mov	COUNT_, #3
1b370     A8 00 A0 FD | 	call	#pushregs_
1b374     28 F0 07 F1 | 	add	ptra, #40
1b378     04 4E 05 F1 | 	add	fp, #4
1b37c     A7 12 62 FC | 	wrlong	arg01, fp
1b380     04 4E 05 F1 | 	add	fp, #4
1b384     A7 14 62 FC | 	wrlong	arg02, fp
1b388     04 4E 05 F1 | 	add	fp, #4
1b38c     A7 16 62 FC | 	wrlong	arg03, fp
1b390     04 4E 85 F1 | 	sub	fp, #4
1b394     A7 FA 01 FB | 	rdlong	result1, fp
1b398     14 4E 05 F1 | 	add	fp, #20
1b39c     A7 FA 61 FC | 	wrlong	result1, fp
1b3a0     04 4E 05 F1 | 	add	fp, #4
1b3a4     A7 00 68 FC | 	wrlong	#0, fp
1b3a8     1C 4E 85 F1 | 	sub	fp, #28
1b3ac     A7 12 02 FB | 	rdlong	arg01, fp
1b3b0     04 4E 85 F1 | 	sub	fp, #4
1b3b4     08 12 06 F1 | 	add	arg01, #8
1b3b8     09 FB 01 FB | 	rdlong	result1, arg01
1b3bc     01 FA CD F7 | 	test	result1, #1 wz
1b3c0     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1b3c4     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1b3c8     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1b3cc     01 FA 65 A6 |  if_e	neg	result1, #1
1b3d0     74 02 90 AD |  if_e	jmp	#LR__2976
1b3d4     04 4E 05 F1 | 	add	fp, #4
1b3d8     A7 12 02 FB | 	rdlong	arg01, fp
1b3dc     04 4E 85 F1 | 	sub	fp, #4
1b3e0     14 12 06 F1 | 	add	arg01, #20
1b3e4     09 FB 09 FB | 	rdlong	result1, arg01 wz
1b3e8     B8 00 90 AD |  if_e	jmp	#LR__2971
1b3ec     04 4E 05 F1 | 	add	fp, #4
1b3f0     A7 12 02 FB | 	rdlong	arg01, fp
1b3f4     09 17 02 F6 | 	mov	arg03, arg01
1b3f8     14 16 06 F1 | 	add	arg03, #20
1b3fc     0B 1F 02 FB | 	rdlong	local01, arg03
1b400     0F 21 02 F6 | 	mov	local02, local01
1b404     13 1E 46 F7 | 	zerox	local01, #19
1b408     14 20 46 F0 | 	shr	local02, #20
1b40c     02 20 66 F0 | 	shl	local02, #2
1b410     ED 20 02 F1 | 	add	local02, __methods__
1b414     10 21 02 FB | 	rdlong	local02, local02
1b418     04 4E 05 F1 | 	add	fp, #4
1b41c     A7 14 02 FB | 	rdlong	arg02, fp
1b420     04 4E 05 F1 | 	add	fp, #4
1b424     A7 16 02 FB | 	rdlong	arg03, fp
1b428     0C 4E 85 F1 | 	sub	fp, #12
1b42c     F2 22 02 F6 | 	mov	local03, objptr
1b430     0F E5 01 F6 | 	mov	objptr, local01
1b434     2D 20 62 FD | 	call	local02
1b438     11 E5 01 F6 | 	mov	objptr, local03
1b43c     10 4E 05 F1 | 	add	fp, #16
1b440     A7 FA 61 FC | 	wrlong	result1, fp
1b444     10 4E 85 F1 | 	sub	fp, #16
1b448     00 FA 55 F2 | 	cmps	result1, #0 wc
1b44c     44 00 90 3D |  if_ae	jmp	#LR__2970
1b450     04 4E 05 F1 | 	add	fp, #4
1b454     A7 22 02 FB | 	rdlong	local03, fp
1b458     11 1F 02 F6 | 	mov	local01, local03
1b45c     08 22 06 F1 | 	add	local03, #8
1b460     11 21 02 FB | 	rdlong	local02, local03
1b464     20 20 46 F5 | 	or	local02, #32
1b468     08 1E 06 F1 | 	add	local01, #8
1b46c     0F 21 62 FC | 	wrlong	local02, local01
1b470     0C 4E 05 F1 | 	add	fp, #12
1b474     A7 12 0A FB | 	rdlong	arg01, fp wz
1b478     10 4E 85 F1 | 	sub	fp, #16
1b47c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1b480     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1b484     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1b488     01 FA 65 56 |  if_ne	neg	result1, #1
1b48c     00 FA 05 A6 |  if_e	mov	result1, #0
1b490     B4 01 90 FD | 	jmp	#LR__2976
1b494                 | LR__2970
1b494     10 4E 05 F1 | 	add	fp, #16
1b498     A7 FA 01 FB | 	rdlong	result1, fp
1b49c     10 4E 85 F1 | 	sub	fp, #16
1b4a0     A4 01 90 FD | 	jmp	#LR__2976
1b4a4                 | LR__2971
1b4a4     04 4E 05 F1 | 	add	fp, #4
1b4a8     A7 12 02 FB | 	rdlong	arg01, fp
1b4ac     20 12 06 F1 | 	add	arg01, #32
1b4b0     09 13 0A FB | 	rdlong	arg01, arg01 wz
1b4b4     14 4E 05 F1 | 	add	fp, #20
1b4b8     A7 12 62 FC | 	wrlong	arg01, fp
1b4bc     18 4E 85 F1 | 	sub	fp, #24
1b4c0     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1b4c4     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1b4c8     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1b4cc     01 FA 65 A6 |  if_e	neg	result1, #1
1b4d0     74 01 90 AD |  if_e	jmp	#LR__2976
1b4d4     04 4E 05 F1 | 	add	fp, #4
1b4d8     A7 22 02 FB | 	rdlong	local03, fp
1b4dc     04 4E 85 F1 | 	sub	fp, #4
1b4e0     28 22 06 F1 | 	add	local03, #40
1b4e4     11 21 0A FB | 	rdlong	local02, local03 wz
1b4e8     7C 00 90 AD |  if_e	jmp	#LR__2973
1b4ec     04 4E 05 F1 | 	add	fp, #4
1b4f0     A7 12 02 FB | 	rdlong	arg01, fp
1b4f4     09 23 02 F6 | 	mov	local03, arg01
1b4f8     28 22 06 F1 | 	add	local03, #40
1b4fc     11 1F 02 FB | 	rdlong	local01, local03
1b500     0F 21 02 F6 | 	mov	local02, local01
1b504     13 1E 46 F7 | 	zerox	local01, #19
1b508     14 20 46 F0 | 	shr	local02, #20
1b50c     02 20 66 F0 | 	shl	local02, #2
1b510     ED 20 02 F1 | 	add	local02, __methods__
1b514     10 21 02 FB | 	rdlong	local02, local02
1b518     20 4E 05 F1 | 	add	fp, #32
1b51c     A7 16 02 F6 | 	mov	arg03, fp
1b520     24 4E 85 F1 | 	sub	fp, #36
1b524     00 15 06 F6 | 	mov	arg02, #256
1b528     F2 22 02 F6 | 	mov	local03, objptr
1b52c     0F E5 01 F6 | 	mov	objptr, local01
1b530     2D 20 62 FD | 	call	local02
1b534     11 E5 01 F6 | 	mov	objptr, local03
1b538     10 4E 05 F1 | 	add	fp, #16
1b53c     A7 FA 61 FC | 	wrlong	result1, fp
1b540     00 FA 4D F2 | 	cmps	result1, #0 wz
1b544     10 4E 85 F1 | 	sub	fp, #16
1b548     1C 00 90 5D |  if_ne	jmp	#LR__2972
1b54c     24 4E 05 F1 | 	add	fp, #36
1b550     A7 20 02 FB | 	rdlong	local02, fp
1b554     24 4E 85 F1 | 	sub	fp, #36
1b558     02 20 CE F7 | 	test	local02, #2 wz
1b55c     20 4E 05 51 |  if_ne	add	fp, #32
1b560     A7 02 68 5C |  if_ne	wrlong	#1, fp
1b564     20 4E 85 51 |  if_ne	sub	fp, #32
1b568                 | LR__2972
1b568                 | LR__2973
1b568     10 4E 05 F1 | 	add	fp, #16
1b56c     A7 00 68 FC | 	wrlong	#0, fp
1b570     10 4E 85 F1 | 	sub	fp, #16
1b574                 | LR__2974
1b574     0C 4E 05 F1 | 	add	fp, #12
1b578     A7 22 02 FB | 	rdlong	local03, fp
1b57c     0C 4E 85 F1 | 	sub	fp, #12
1b580     01 22 16 F2 | 	cmp	local03, #1 wc
1b584     B4 00 90 CD |  if_b	jmp	#LR__2975
1b588     18 4E 05 F1 | 	add	fp, #24
1b58c     A7 20 02 FB | 	rdlong	local02, fp
1b590     10 23 02 F6 | 	mov	local03, local02
1b594     13 22 46 F7 | 	zerox	local03, #19
1b598     14 20 46 F0 | 	shr	local02, #20
1b59c     02 20 66 F0 | 	shl	local02, #2
1b5a0     ED 20 02 F1 | 	add	local02, __methods__
1b5a4     10 21 02 FB | 	rdlong	local02, local02
1b5a8     14 4E 85 F1 | 	sub	fp, #20
1b5ac     A7 12 02 FB | 	rdlong	arg01, fp
1b5b0     04 4E 85 F1 | 	sub	fp, #4
1b5b4     F2 1E 02 F6 | 	mov	local01, objptr
1b5b8     11 E5 01 F6 | 	mov	objptr, local03
1b5bc     2D 20 62 FD | 	call	local02
1b5c0     0F E5 01 F6 | 	mov	objptr, local01
1b5c4     14 4E 05 F1 | 	add	fp, #20
1b5c8     A7 FA 61 FC | 	wrlong	result1, fp
1b5cc     14 4E 85 F1 | 	sub	fp, #20
1b5d0     00 FA 55 F2 | 	cmps	result1, #0 wc
1b5d4     64 00 90 CD |  if_b	jmp	#LR__2975
1b5d8     1C 4E 05 F1 | 	add	fp, #28
1b5dc     A7 22 02 FB | 	rdlong	local03, fp
1b5e0     11 21 02 F6 | 	mov	local02, local03
1b5e4     01 20 06 F1 | 	add	local02, #1
1b5e8     A7 20 62 FC | 	wrlong	local02, fp
1b5ec     08 4E 85 F1 | 	sub	fp, #8
1b5f0     A7 20 02 FB | 	rdlong	local02, fp
1b5f4     11 21 42 FC | 	wrbyte	local02, local03
1b5f8     04 4E 85 F1 | 	sub	fp, #4
1b5fc     A7 22 02 FB | 	rdlong	local03, fp
1b600     01 22 06 F1 | 	add	local03, #1
1b604     A7 22 62 FC | 	wrlong	local03, fp
1b608     04 4E 85 F1 | 	sub	fp, #4
1b60c     A7 22 02 FB | 	rdlong	local03, fp
1b610     01 22 86 F1 | 	sub	local03, #1
1b614     A7 22 62 FC | 	wrlong	local03, fp
1b618     14 4E 05 F1 | 	add	fp, #20
1b61c     A7 22 0A FB | 	rdlong	local03, fp wz
1b620     20 4E 85 F1 | 	sub	fp, #32
1b624     4C FF 9F AD |  if_e	jmp	#LR__2974
1b628     14 4E 05 F1 | 	add	fp, #20
1b62c     A7 20 02 FB | 	rdlong	local02, fp
1b630     14 4E 85 F1 | 	sub	fp, #20
1b634     0A 20 0E F2 | 	cmp	local02, #10 wz
1b638     38 FF 9F 5D |  if_ne	jmp	#LR__2974
1b63c                 | LR__2975
1b63c     10 4E 05 F1 | 	add	fp, #16
1b640     A7 FA 01 FB | 	rdlong	result1, fp
1b644     10 4E 85 F1 | 	sub	fp, #16
1b648                 | LR__2976
1b648     A7 F0 03 F6 | 	mov	ptra, fp
1b64c     B2 00 A0 FD | 	call	#popregs_
1b650                 | __system___vfsread_ret
1b650     2D 00 64 FD | 	ret
1b654                 | 
1b654                 | __system____default_filbuf
1b654     04 4A 05 F6 | 	mov	COUNT_, #4
1b658     A8 00 A0 FD | 	call	#pushregs_
1b65c     09 1F 02 F6 | 	mov	local01, arg01
1b660     0F 21 02 FB | 	rdlong	local02, local01
1b664     0C 20 06 F1 | 	add	local02, #12
1b668     10 FB 09 FB | 	rdlong	result1, local02 wz
1b66c     0C 20 86 F1 | 	sub	local02, #12
1b670     20 00 90 5D |  if_ne	jmp	#LR__2980
1b674     14 20 06 F1 | 	add	local02, #20
1b678     10 FB 01 F6 | 	mov	result1, local02
1b67c     04 20 86 F1 | 	sub	local02, #4
1b680     10 FB 61 FC | 	wrlong	result1, local02
1b684     04 20 86 F1 | 	sub	local02, #4
1b688     02 00 80 FF 
1b68c     10 01 68 FC | 	wrlong	##1024, local02
1b690     0C 20 86 F1 | 	sub	local02, #12
1b694                 | LR__2980
1b694     14 1E 06 F1 | 	add	local01, #20
1b698     0F 23 02 FB | 	rdlong	local03, local01
1b69c     11 25 02 F6 | 	mov	local04, local03
1b6a0     14 1E 86 F1 | 	sub	local01, #20
1b6a4     13 24 46 F7 | 	zerox	local04, #19
1b6a8     14 22 46 F0 | 	shr	local03, #20
1b6ac     02 22 66 F0 | 	shl	local03, #2
1b6b0     ED 22 02 F1 | 	add	local03, __methods__
1b6b4     11 23 02 FB | 	rdlong	local03, local03
1b6b8     10 20 06 F1 | 	add	local02, #16
1b6bc     10 15 02 FB | 	rdlong	arg02, local02
1b6c0     04 20 86 F1 | 	sub	local02, #4
1b6c4     10 17 02 FB | 	rdlong	arg03, local02
1b6c8     0C 20 86 F1 | 	sub	local02, #12
1b6cc     0F 13 02 F6 | 	mov	arg01, local01
1b6d0     F2 1E 02 F6 | 	mov	local01, objptr
1b6d4     12 E5 01 F6 | 	mov	objptr, local04
1b6d8     2D 22 62 FD | 	call	local03
1b6dc     0F E5 01 F6 | 	mov	objptr, local01
1b6e0     FD 24 02 F6 | 	mov	local04, result1
1b6e4     00 24 56 F2 | 	cmps	local04, #0 wc
1b6e8     01 FA 65 C6 |  if_b	neg	result1, #1
1b6ec     28 00 90 CD |  if_b	jmp	#LR__2981
1b6f0     10 25 62 FC | 	wrlong	local04, local02
1b6f4     10 20 06 F1 | 	add	local02, #16
1b6f8     10 23 02 FB | 	rdlong	local03, local02
1b6fc     0C 20 86 F1 | 	sub	local02, #12
1b700     10 23 62 FC | 	wrlong	local03, local02
1b704     04 20 06 F1 | 	add	local02, #4
1b708     10 23 02 FB | 	rdlong	local03, local02
1b70c     01 22 46 F5 | 	or	local03, #1
1b710     10 23 62 FC | 	wrlong	local03, local02
1b714     12 FB 01 F6 | 	mov	result1, local04
1b718                 | LR__2981
1b718     A7 F0 03 F6 | 	mov	ptra, fp
1b71c     B2 00 A0 FD | 	call	#popregs_
1b720                 | __system____default_filbuf_ret
1b720     2D 00 64 FD | 	ret
1b724                 | 
1b724                 | __system__getlower_0910
1b724     41 12 56 F2 | 	cmps	arg01, #65 wc
1b728     10 00 90 CD |  if_b	jmp	#LR__2990
1b72c     5B 12 56 F2 | 	cmps	arg01, #91 wc
1b730     09 FB 01 C6 |  if_b	mov	result1, arg01
1b734     20 FA 05 C1 |  if_b	add	result1, #32
1b738     04 00 90 CD |  if_b	jmp	#__system__getlower_0910_ret
1b73c                 | LR__2990
1b73c     09 FB 01 F6 | 	mov	result1, arg01
1b740                 | __system__getlower_0910_ret
1b740     2D 00 64 FD | 	ret
1b744                 | 
1b744                 | __system___pat_match
1b744     08 4A 05 F6 | 	mov	COUNT_, #8
1b748     A8 00 A0 FD | 	call	#pushregs_
1b74c     09 1F 02 F6 | 	mov	local01, arg01
1b750                 | LR__3000
1b750     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
1b754     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
1b758     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
1b75c     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
1b760     2C 00 90 AD |  if_e	jmp	#LR__3001
1b764     0A 13 C2 FA | 	rdbyte	arg01, arg02
1b768     B8 FF BF FD | 	call	#__system__getlower_0910
1b76c     FD 22 02 F6 | 	mov	local03, result1
1b770     0F 13 C2 FA | 	rdbyte	arg01, local01
1b774     AC FF BF FD | 	call	#__system__getlower_0910
1b778     11 FB 09 F2 | 	cmp	result1, local03 wz
1b77c     00 FA 05 56 |  if_ne	mov	result1, #0
1b780     FC 00 90 5D |  if_ne	jmp	#LR__3009
1b784     01 1E 06 F1 | 	add	local01, #1
1b788     01 14 06 F1 | 	add	arg02, #1
1b78c     C0 FF 9F FD | 	jmp	#LR__3000
1b790                 | LR__3001
1b790     0A 23 C2 FA | 	rdbyte	local03, arg02
1b794     2A 22 0E F2 | 	cmp	local03, #42 wz
1b798     D4 00 90 5D |  if_ne	jmp	#LR__3008
1b79c     01 14 06 F1 | 	add	arg02, #1
1b7a0     0A 21 C2 FA | 	rdbyte	local02, arg02
1b7a4     01 14 86 F1 | 	sub	arg02, #1
1b7a8     2E 20 0E F2 | 	cmp	local02, #46 wz
1b7ac     28 00 90 5D |  if_ne	jmp	#LR__3002
1b7b0     02 14 06 F1 | 	add	arg02, #2
1b7b4     0A 21 C2 FA | 	rdbyte	local02, arg02
1b7b8     02 14 86 F1 | 	sub	arg02, #2
1b7bc     2A 20 0E F2 | 	cmp	local02, #42 wz
1b7c0     03 14 06 A1 |  if_e	add	arg02, #3
1b7c4     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
1b7c8     03 14 86 A1 |  if_e	sub	arg02, #3
1b7cc     12 27 0A A6 |  if_e	mov	local05, local04 wz
1b7d0     01 FA 05 A6 |  if_e	mov	result1, #1
1b7d4     A8 00 90 AD |  if_e	jmp	#LR__3009
1b7d8                 | LR__3002
1b7d8     01 14 06 F1 | 	add	arg02, #1
1b7dc     00 28 06 F6 | 	mov	local06, #0
1b7e0     97 1E 48 FB | 	callpa	#(@LR__3005-@LR__3003)>>2,fcache_load_ptr_
1b7e4                 | LR__3003
1b7e4     14 2B 02 F6 | 	mov	local07, local06
1b7e8     0A 2B 02 F1 | 	add	local07, arg02
1b7ec     15 2B CA FA | 	rdbyte	local07, local07 wz
1b7f0     14 27 02 56 |  if_ne	mov	local05, local06
1b7f4     01 26 06 51 |  if_ne	add	local05, #1
1b7f8     13 29 02 56 |  if_ne	mov	local06, local05
1b7fc     E4 FF 9F 5D |  if_ne	jmp	#LR__3003
1b800     00 2C 06 F6 | 	mov	local08, #0
1b804                 | LR__3004
1b804     16 2B 02 F6 | 	mov	local07, local08
1b808     0F 2B 02 F1 | 	add	local07, local01
1b80c     15 2B CA FA | 	rdbyte	local07, local07 wz
1b810     16 27 02 56 |  if_ne	mov	local05, local08
1b814     01 26 06 51 |  if_ne	add	local05, #1
1b818     13 2D 02 56 |  if_ne	mov	local08, local05
1b81c     E4 FF 9F 5D |  if_ne	jmp	#LR__3004
1b820                 | LR__3005
1b820     14 2D 52 F2 | 	cmps	local08, local06 wc
1b824     00 FA 05 C6 |  if_b	mov	result1, #0
1b828     54 00 90 CD |  if_b	jmp	#LR__3009
1b82c     16 21 02 F6 | 	mov	local02, local08
1b830     14 21 82 F1 | 	sub	local02, local06
1b834     10 1F 02 F1 | 	add	local01, local02
1b838                 | LR__3006
1b838     01 28 56 F2 | 	cmps	local06, #1 wc
1b83c     30 00 90 CD |  if_b	jmp	#LR__3007
1b840     0F 13 C2 FA | 	rdbyte	arg01, local01
1b844     DC FE BF FD | 	call	#__system__getlower_0910
1b848     FD 2C 02 F6 | 	mov	local08, result1
1b84c     0A 13 C2 FA | 	rdbyte	arg01, arg02
1b850     D0 FE BF FD | 	call	#__system__getlower_0910
1b854     FD 2C 0A F2 | 	cmp	local08, result1 wz
1b858     00 FA 05 56 |  if_ne	mov	result1, #0
1b85c     20 00 90 5D |  if_ne	jmp	#LR__3009
1b860     01 1E 06 F1 | 	add	local01, #1
1b864     01 14 06 F1 | 	add	arg02, #1
1b868     01 28 86 F1 | 	sub	local06, #1
1b86c     C8 FF 9F FD | 	jmp	#LR__3006
1b870                 | LR__3007
1b870                 | LR__3008
1b870     0A 2D CA FA | 	rdbyte	local08, arg02 wz
1b874     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
1b878     01 FA 05 A6 |  if_e	mov	result1, #1
1b87c     00 FA 05 56 |  if_ne	mov	result1, #0
1b880                 | LR__3009
1b880     A7 F0 03 F6 | 	mov	ptra, fp
1b884     B2 00 A0 FD | 	call	#popregs_
1b888                 | __system___pat_match_ret
1b888     2D 00 64 FD | 	ret
1b88c                 | 
1b88c                 | _fatfs_cc_ff_uni2oem
1b88c     00 00 06 F6 | 	mov	_var01, #0
1b890     80 12 16 F2 | 	cmp	arg01, #128 wc
1b894     09 01 02 C6 |  if_b	mov	_var01, arg01
1b898     58 00 90 CD |  if_b	jmp	#LR__3014
1b89c     80 00 00 FF 
1b8a0     00 12 16 F2 | 	cmp	arg01, ##65536 wc
1b8a4     4C 00 90 3D |  if_ae	jmp	#LR__3013
1b8a8     0A FB 31 F9 | 	getword	result1, arg02, #0
1b8ac     01 00 00 FF 
1b8b0     52 FB 0D F2 | 	cmp	result1, ##850 wz
1b8b4     3C 00 90 5D |  if_ne	jmp	#LR__3013
1b8b8                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
1b8b8     00 00 06 F6 | 	mov	_var01, #0
1b8bc     97 14 48 FB | 	callpa	#(@LR__3011-@LR__3010)>>2,fcache_load_ptr_
1b8c0                 | LR__3010
1b8c0     00 FB 31 F9 | 	getword	result1, _var01, #0
1b8c4     80 FA 15 F2 | 	cmp	result1, #128 wc
1b8c8     1C 00 90 3D |  if_ae	jmp	#LR__3012
1b8cc     00 FB 31 F9 | 	getword	result1, _var01, #0
1b8d0     01 FA 65 F0 | 	shl	result1, #1
1b8d4     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
1b8d8     FD FA E1 FA | 	rdword	result1, result1
1b8dc     FD 12 0A F2 | 	cmp	arg01, result1 wz
1b8e0     01 00 06 51 |  if_ne	add	_var01, #1
1b8e4     D8 FF 9F 5D |  if_ne	jmp	#LR__3010
1b8e8                 | LR__3011
1b8e8                 | LR__3012
1b8e8     00 01 32 F9 | 	getword	_var01, _var01, #0
1b8ec     80 00 06 F1 | 	add	_var01, #128
1b8f0     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
1b8f4                 | LR__3013
1b8f4                 | LR__3014
1b8f4                 | ' 			c = (c + 0x80) & 0xFF;
1b8f4                 | ' 		}
1b8f4                 | ' 	}
1b8f4                 | ' 
1b8f4                 | ' 	return c;
1b8f4     00 FB 01 F6 | 	mov	result1, _var01
1b8f8                 | _fatfs_cc_ff_uni2oem_ret
1b8f8     2D 00 64 FD | 	ret
1b8fc                 | 
1b8fc                 | _fatfs_cc_ff_oem2uni
1b8fc     00 00 06 F6 | 	mov	_var01, #0
1b900     09 FB 31 F9 | 	getword	result1, arg01, #0
1b904     80 FA 15 F2 | 	cmp	result1, #128 wc
1b908     09 01 02 C6 |  if_b	mov	_var01, arg01
1b90c     2C 00 90 CD |  if_b	jmp	#LR__3021
1b910     0A 15 32 F9 | 	getword	arg02, arg02, #0
1b914     01 00 00 FF 
1b918     52 15 0E F2 | 	cmp	arg02, ##850 wz
1b91c     1C 00 90 5D |  if_ne	jmp	#LR__3020
1b920     09 FB 31 F9 | 	getword	result1, arg01, #0
1b924     00 FB 15 F2 | 	cmp	result1, #256 wc
1b928     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
1b92c     80 12 86 C1 |  if_b	sub	arg01, #128
1b930     01 12 66 C0 |  if_b	shl	arg01, #1
1b934     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
1b938     09 01 E2 CA |  if_b	rdword	_var01, arg01
1b93c                 | LR__3020
1b93c                 | LR__3021
1b93c                 | ' 		}
1b93c                 | ' 	}
1b93c                 | ' 
1b93c                 | ' 	return c;
1b93c     00 FB 01 F6 | 	mov	result1, _var01
1b940                 | _fatfs_cc_ff_oem2uni_ret
1b940     2D 00 64 FD | 	ret
1b944                 | 
1b944                 | _fatfs_cc_ff_wtoupper
1b944     09 01 02 F6 | 	mov	_var01, arg01
1b948     80 00 00 FF 
1b94c     00 00 16 F2 | 	cmp	_var01, ##65536 wc
1b950     60 01 90 3D |  if_ae	jmp	#LR__3043
1b954     00 03 02 F6 | 	mov	_var02, _var01
1b958     01 01 32 F9 | 	getword	_var01, _var02, #0
1b95c     08 00 00 FF 
1b960     00 00 16 F2 | 	cmp	_var01, ##4096 wc
1b964     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
1b968     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
1b96c     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
1b970     01 00 00 3F 
1b974     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
1b978     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
1b97c     01 00 00 3F 
1b980     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
1b984     02 07 02 F6 | 	mov	_var04, _var03
1b988                 | ' 		uc = (WORD)uni;
1b988                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
1b988                 | ' 		for (;;) {
1b988                 | LR__3030
1b988     03 09 E2 FA | 	rdword	_var05, _var04
1b98c     04 05 02 F6 | 	mov	_var03, _var05
1b990     0F 04 4E F7 | 	zerox	_var03, #15 wz
1b994     02 06 06 F1 | 	add	_var04, #2
1b998     14 01 90 AD |  if_e	jmp	#LR__3042
1b99c     01 05 32 F9 | 	getword	_var03, _var02, #0
1b9a0     04 01 32 F9 | 	getword	_var01, _var05, #0
1b9a4     00 05 12 F2 | 	cmp	_var03, _var01 wc
1b9a8     04 01 90 CD |  if_b	jmp	#LR__3042
1b9ac     03 0B E2 FA | 	rdword	_var06, _var04
1b9b0     05 0D 32 F9 | 	getword	_var07, _var06, #0
1b9b4     08 0C 46 F0 | 	shr	_var07, #8
1b9b8     05 0B 32 F9 | 	getword	_var06, _var06, #0
1b9bc     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
1b9c0     01 05 32 F9 | 	getword	_var03, _var02, #0
1b9c4     04 0F 32 F9 | 	getword	_var08, _var05, #0
1b9c8     05 01 32 F9 | 	getword	_var01, _var06, #0
1b9cc     00 0F 02 F1 | 	add	_var08, _var01
1b9d0     07 05 52 F2 | 	cmps	_var03, _var08 wc
1b9d4     02 06 06 F1 | 	add	_var04, #2
1b9d8     C4 00 90 3D |  if_ae	jmp	#LR__3041
1b9dc                 | ' 				switch (cmd) {
1b9dc     06 11 32 F9 | 	getword	_var09, _var07, #0
1b9e0     09 10 26 F3 | 	fle	_var09, #9
1b9e4     30 10 62 FD | 	jmprel	_var09
1b9e8                 | LR__3031
1b9e8     24 00 90 FD | 	jmp	#LR__3032
1b9ec     3C 00 90 FD | 	jmp	#LR__3033
1b9f0     54 00 90 FD | 	jmp	#LR__3034
1b9f4     5C 00 90 FD | 	jmp	#LR__3035
1b9f8     64 00 90 FD | 	jmp	#LR__3036
1b9fc     6C 00 90 FD | 	jmp	#LR__3037
1ba00     74 00 90 FD | 	jmp	#LR__3038
1ba04     7C 00 90 FD | 	jmp	#LR__3039
1ba08     84 00 90 FD | 	jmp	#LR__3040
1ba0c     A0 00 90 FD | 	jmp	#LR__3042
1ba10                 | LR__3032
1ba10     01 03 32 F9 | 	getword	_var02, _var02, #0
1ba14     04 09 32 F9 | 	getword	_var05, _var05, #0
1ba18     04 03 82 F1 | 	sub	_var02, _var05
1ba1c     01 02 66 F0 | 	shl	_var02, #1
1ba20     03 03 02 F1 | 	add	_var02, _var04
1ba24     01 03 E2 FA | 	rdword	_var02, _var02
1ba28     84 00 90 FD | 	jmp	#LR__3042
1ba2c                 | LR__3033
1ba2c     01 05 32 F9 | 	getword	_var03, _var02, #0
1ba30     01 03 32 F9 | 	getword	_var02, _var02, #0
1ba34     04 09 32 F9 | 	getword	_var05, _var05, #0
1ba38     04 03 82 F1 | 	sub	_var02, _var05
1ba3c     01 02 06 F5 | 	and	_var02, #1
1ba40     02 03 C2 F2 | 	subr	_var02, _var03
1ba44     68 00 90 FD | 	jmp	#LR__3042
1ba48                 | LR__3034
1ba48     01 03 32 F9 | 	getword	_var02, _var02, #0
1ba4c     10 02 86 F1 | 	sub	_var02, #16
1ba50     5C 00 90 FD | 	jmp	#LR__3042
1ba54                 | LR__3035
1ba54     01 03 32 F9 | 	getword	_var02, _var02, #0
1ba58     20 02 86 F1 | 	sub	_var02, #32
1ba5c     50 00 90 FD | 	jmp	#LR__3042
1ba60                 | LR__3036
1ba60     01 03 32 F9 | 	getword	_var02, _var02, #0
1ba64     30 02 86 F1 | 	sub	_var02, #48
1ba68     44 00 90 FD | 	jmp	#LR__3042
1ba6c                 | LR__3037
1ba6c     01 03 32 F9 | 	getword	_var02, _var02, #0
1ba70     1A 02 86 F1 | 	sub	_var02, #26
1ba74     38 00 90 FD | 	jmp	#LR__3042
1ba78                 | LR__3038
1ba78     01 03 32 F9 | 	getword	_var02, _var02, #0
1ba7c     08 02 06 F1 | 	add	_var02, #8
1ba80     2C 00 90 FD | 	jmp	#LR__3042
1ba84                 | LR__3039
1ba84     01 03 32 F9 | 	getword	_var02, _var02, #0
1ba88     50 02 86 F1 | 	sub	_var02, #80
1ba8c     20 00 90 FD | 	jmp	#LR__3042
1ba90                 | LR__3040
1ba90     01 03 32 F9 | 	getword	_var02, _var02, #0
1ba94     0E 00 00 FF 
1ba98     60 02 86 F1 | 	sub	_var02, ##7264
1ba9c                 | ' 				}
1ba9c                 | ' 				break;
1ba9c     10 00 90 FD | 	jmp	#LR__3042
1baa0                 | LR__3041
1baa0     0F 0C 4E F7 | 	zerox	_var07, #15 wz
1baa4     02 0A 06 AA |  if_e	mul	_var06, #2
1baa8     05 07 02 A1 |  if_e	add	_var04, _var06
1baac     D8 FE 9F FD | 	jmp	#LR__3030
1bab0                 | LR__3042
1bab0     01 01 32 F9 | 	getword	_var01, _var02, #0
1bab4                 | LR__3043
1bab4                 | ' 		}
1bab4                 | ' 		uni = uc;
1bab4                 | ' 	}
1bab4                 | ' 
1bab4                 | ' 	return uni;
1bab4     00 FB 01 F6 | 	mov	result1, _var01
1bab8                 | _fatfs_cc_ff_wtoupper_ret
1bab8     2D 00 64 FD | 	ret
1babc                 | 
1babc                 | _fatfs_cc_strncpy
1babc     09 01 02 F6 | 	mov	_var01, arg01
1bac0     97 12 48 FB | 	callpa	#(@LR__3051-@LR__3050)>>2,fcache_load_ptr_
1bac4                 | ' 
1bac4                 | ' 	dscan = dst;
1bac4                 | ' 	sscan = src;
1bac4                 | ' 	count = n;
1bac4                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
1bac4                 | LR__3050
1bac4     01 16 86 F1 | 	sub	arg03, #1
1bac8     00 16 56 F2 | 	cmps	arg03, #0 wc
1bacc     18 00 90 CD |  if_b	jmp	#LR__3052
1bad0     0A FB C1 FA | 	rdbyte	result1, arg02
1bad4     00 FB 41 FC | 	wrbyte	result1, _var01
1bad8     01 14 06 F1 | 	add	arg02, #1
1badc     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1bae0                 | ' 		continue;
1bae0     01 00 06 F1 | 	add	_var01, #1
1bae4     DC FF 9F 5D |  if_ne	jmp	#LR__3050
1bae8                 | LR__3051
1bae8                 | LR__3052
1bae8     97 0C 48 FB | 	callpa	#(@LR__3054-@LR__3053)>>2,fcache_load_ptr_
1baec                 | ' 	while (--count >= 0)
1baec                 | LR__3053
1baec     01 16 86 F1 | 	sub	arg03, #1
1baf0     00 16 56 F2 | 	cmps	arg03, #0 wc
1baf4     00 03 02 36 |  if_ae	mov	_var02, _var01
1baf8     01 00 06 31 |  if_ae	add	_var01, #1
1bafc     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1bb00     E8 FF 9F 3D |  if_ae	jmp	#LR__3053
1bb04                 | LR__3054
1bb04                 | ' 		*dscan++ = '\0';
1bb04                 | ' 	return(dst);
1bb04     09 FB 01 F6 | 	mov	result1, arg01
1bb08                 | _fatfs_cc_strncpy_ret
1bb08     2D 00 64 FD | 	ret
1bb0c                 | 
1bb0c                 | _fatfs_cc_memcmp
1bb0c                 | ' 	for (n = size; n > 0; n--)
1bb0c     00 16 0E F2 | 	cmp	arg03, #0 wz
1bb10     28 00 90 AD |  if_e	jmp	#LR__3061
1bb14                 | LR__3060
1bb14     09 01 C2 FA | 	rdbyte	_var01, arg01
1bb18     0A 03 C2 FA | 	rdbyte	_var02, arg02
1bb1c     01 01 0A F2 | 	cmp	_var01, _var02 wz
1bb20     01 12 06 A1 |  if_e	add	arg01, #1
1bb24     01 14 06 A1 |  if_e	add	arg02, #1
1bb28                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
1bb28     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
1bb2c     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1bb30     01 FB 81 51 |  if_ne	sub	result1, _var02
1bb34     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
1bb38     F6 17 6E FB | 	djnz	arg03, #LR__3060
1bb3c                 | LR__3061
1bb3c                 | ' 
1bb3c                 | ' 	return(0);
1bb3c     00 FA 05 F6 | 	mov	result1, #0
1bb40                 | _fatfs_cc_memcmp_ret
1bb40     2D 00 64 FD | 	ret
1bb44                 | 
1bb44                 | _fatfs_cc_strncmp
1bb44     09 01 0A F6 | 	mov	_var01, arg01 wz
1bb48     14 00 90 5D |  if_ne	jmp	#LR__3070
1bb4c                 | ' 		return scan2 ? -1 : 0;
1bb4c     00 14 0E F2 | 	cmp	arg02, #0 wz
1bb50     01 02 66 56 |  if_ne	neg	_var02, #1
1bb54     00 02 06 A6 |  if_e	mov	_var02, #0
1bb58     01 FB 01 F6 | 	mov	result1, _var02
1bb5c     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
1bb60                 | LR__3070
1bb60     00 14 0E F2 | 	cmp	arg02, #0 wz
1bb64     01 FA 05 A6 |  if_e	mov	result1, #1
1bb68     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1bb6c     0B 05 02 F6 | 	mov	_var03, arg03
1bb70     97 16 48 FB | 	callpa	#(@LR__3072-@LR__3071)>>2,fcache_load_ptr_
1bb74                 | ' 	count = n;
1bb74                 | ' 	do {
1bb74                 | LR__3071
1bb74     00 07 C2 FA | 	rdbyte	_var04, _var01
1bb78     0A 09 02 F6 | 	mov	_var05, arg02
1bb7c     04 0B C2 FA | 	rdbyte	_var06, _var05
1bb80     01 04 86 F1 | 	sub	_var03, #1
1bb84     00 04 56 F2 | 	cmps	_var03, #0 wc
1bb88     01 00 06 F1 | 	add	_var01, #1
1bb8c     01 14 06 F1 | 	add	arg02, #1
1bb90     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1bb94     08 00 90 2D |  if_nc_and_z	jmp	#LR__3073
1bb98     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1bb9c     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3071
1bba0                 | LR__3072
1bba0                 | LR__3073
1bba0     00 04 56 F2 | 	cmps	_var03, #0 wc
1bba4                 | ' 		return(0);
1bba4     00 FA 05 C6 |  if_b	mov	result1, #0
1bba8     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
1bbac     05 07 0A F2 | 	cmp	_var04, _var06 wz
1bbb0                 | ' 		return(0);
1bbb0     00 FA 05 A6 |  if_e	mov	result1, #0
1bbb4     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1bbb8     00 06 0E F2 | 	cmp	_var04, #0 wz
1bbbc                 | ' 		return(-1);
1bbbc     01 FA 65 A6 |  if_e	neg	result1, #1
1bbc0     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1bbc4     00 0A 0E F2 | 	cmp	_var06, #0 wz
1bbc8                 | ' 		return(1);
1bbc8     01 FA 05 A6 |  if_e	mov	result1, #1
1bbcc                 | ' 		return(c1 - c2);
1bbcc     03 FB 01 56 |  if_ne	mov	result1, _var04
1bbd0     05 FB 81 51 |  if_ne	sub	result1, _var06
1bbd4                 | _fatfs_cc_strncmp_ret
1bbd4     2D 00 64 FD | 	ret
1bbd8                 | 
1bbd8                 | _fatfs_cc_strchr
1bbd8                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/libc/string/strchr.c"
1bbd8                 | ' 	while ((c = *s++) != (char) charwanted)
1bbd8                 | LR__3080
1bbd8     09 01 02 F6 | 	mov	_var01, arg01
1bbdc     00 03 C2 FA | 	rdbyte	_var02, _var01
1bbe0     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
1bbe4     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
1bbe8     03 05 0A F2 | 	cmp	_var03, _var04 wz
1bbec     01 12 06 F1 | 	add	arg01, #1
1bbf0     14 00 90 AD |  if_e	jmp	#LR__3081
1bbf4     01 05 02 F6 | 	mov	_var03, _var02
1bbf8     07 04 4E F7 | 	zerox	_var03, #7 wz
1bbfc     00 FA 05 A6 |  if_e	mov	result1, #0
1bc00     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
1bc04     D0 FF 9F FD | 	jmp	#LR__3080
1bc08                 | LR__3081
1bc08                 | ' 	return((char *)--s);
1bc08     01 12 86 F1 | 	sub	arg01, #1
1bc0c     09 FB 01 F6 | 	mov	result1, arg01
1bc10                 | _fatfs_cc_strchr_ret
1bc10     2D 00 64 FD | 	ret
1bc14                 | 
1bc14                 | _fatfs_cc_disk_initialize
1bc14     04 4A 05 F6 | 	mov	COUNT_, #4
1bc18     A8 00 A0 FD | 	call	#pushregs_
1bc1c     40 F0 07 F1 | 	add	ptra, #64
1bc20     04 4E 05 F1 | 	add	fp, #4
1bc24     A7 12 42 FC | 	wrbyte	arg01, fp
1bc28     01 00 00 FF 
1bc2c     14 E4 05 F1 | 	add	objptr, ##532
1bc30     F2 18 02 FB | 	rdlong	arg04, objptr
1bc34     2C 4E 05 F1 | 	add	fp, #44
1bc38     A7 18 62 FC | 	wrlong	arg04, fp
1bc3c     04 E4 85 F1 | 	sub	objptr, #4
1bc40     F2 18 02 FB | 	rdlong	arg04, objptr
1bc44     04 4E 05 F1 | 	add	fp, #4
1bc48     A7 18 62 FC | 	wrlong	arg04, fp
1bc4c     08 E4 05 F1 | 	add	objptr, #8
1bc50     F2 18 02 FB | 	rdlong	arg04, objptr
1bc54     04 4E 05 F1 | 	add	fp, #4
1bc58     A7 18 62 FC | 	wrlong	arg04, fp
1bc5c     04 E4 05 F1 | 	add	objptr, #4
1bc60     F2 18 02 FB | 	rdlong	arg04, objptr
1bc64     04 4E 05 F1 | 	add	fp, #4
1bc68     A7 18 62 FC | 	wrlong	arg04, fp
1bc6c     04 E4 05 F1 | 	add	objptr, #4
1bc70     F2 02 48 FC | 	wrbyte	#1, objptr
1bc74     01 00 00 FF 
1bc78     20 E4 85 F1 | 	sub	objptr, ##544
1bc7c     38 4E 85 F1 | 	sub	fp, #56
1bc80     A7 18 CA FA | 	rdbyte	arg04, fp wz
1bc84     04 4E 85 F1 | 	sub	fp, #4
1bc88                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
1bc88                 | '             return RES_NOTRDY;
1bc88     03 FA 05 56 |  if_ne	mov	result1, #3
1bc8c     D8 05 90 5D |  if_ne	jmp	#LR__3108
1bc90     13 00 00 FF 
1bc94     10 13 06 F6 | 	mov	arg01, ##10000
1bc98     84 9E BF FD | 	call	#__system___waitus
1bc9c     30 4E 05 F1 | 	add	fp, #48
1bca0     A7 12 02 FB | 	rdlong	arg01, fp
1bca4     09 01 08 FC | 	wrpin	#0, arg01
1bca8     04 4E 05 F1 | 	add	fp, #4
1bcac     A7 12 02 FB | 	rdlong	arg01, fp
1bcb0     09 01 08 FC | 	wrpin	#0, arg01
1bcb4     04 4E 05 F1 | 	add	fp, #4
1bcb8     A7 12 02 FB | 	rdlong	arg01, fp
1bcbc     09 01 08 FC | 	wrpin	#0, arg01
1bcc0     04 4E 05 F1 | 	add	fp, #4
1bcc4     A7 12 02 FB | 	rdlong	arg01, fp
1bcc8     09 00 80 FF 
1bccc     09 01 08 FC | 	wrpin	##4608, arg01
1bcd0     0C 4E 85 F1 | 	sub	fp, #12
1bcd4     A7 12 02 FB | 	rdlong	arg01, fp
1bcd8     59 12 62 FD | 	drvh	arg01
1bcdc     04 4E 05 F1 | 	add	fp, #4
1bce0     A7 12 02 FB | 	rdlong	arg01, fp
1bce4     59 12 62 FD | 	drvh	arg01
1bce8     04 4E 05 F1 | 	add	fp, #4
1bcec     A7 12 02 FB | 	rdlong	arg01, fp
1bcf0     59 12 62 FD | 	drvh	arg01
1bcf4     04 4E 05 F1 | 	add	fp, #4
1bcf8     A7 12 02 FB | 	rdlong	arg01, fp
1bcfc     59 12 62 FD | 	drvh	arg01
1bd00     20 4E 85 F1 | 	sub	fp, #32
1bd04     00 04 80 FF 
1bd08     A7 20 68 FC | 	wrlong	##524304, fp
1bd0c     04 4E 05 F1 | 	add	fp, #4
1bd10     20 03 80 FF 
1bd14     A7 90 68 FC | 	wrlong	##409672, fp
1bd18     14 4E 05 F1 | 	add	fp, #20
1bd1c     A7 1E 02 FB | 	rdlong	local01, fp
1bd20     18 4E 85 F1 | 	sub	fp, #24
1bd24     A7 16 02 FB | 	rdlong	arg03, fp
1bd28     40 1E 62 FD | 	dirl	local01
1bd2c     A0 03 80 FF 
1bd30     0F 91 08 FC | 	wrpin	##475208, local01
1bd34     0F 17 12 FC | 	wxpin	arg03, local01
1bd38     0F 01 28 FC | 	wypin	#0, local01
1bd3c     41 1E 62 FD | 	dirh	local01
1bd40     1C 4E 05 F1 | 	add	fp, #28
1bd44     A7 20 02 FB | 	rdlong	local02, fp
1bd48     10 1F 82 F1 | 	sub	local01, local02
1bd4c     07 1E 06 F5 | 	and	local01, #7
1bd50     18 1E 66 F0 | 	shl	local01, #24
1bd54     78 14 06 F6 | 	mov	arg02, #120
1bd58     0F 15 42 F5 | 	or	arg02, local01
1bd5c     14 4E 85 F1 | 	sub	fp, #20
1bd60     A7 14 62 FC | 	wrlong	arg02, fp
1bd64     14 4E 05 F1 | 	add	fp, #20
1bd68     A7 12 02 FB | 	rdlong	arg01, fp
1bd6c     10 14 26 F4 | 	bith	arg02, #16
1bd70     40 12 62 FD | 	dirl	arg01
1bd74     09 15 02 FC | 	wrpin	arg02, arg01
1bd78     09 3F 18 FC | 	wxpin	#31, arg01
1bd7c     FF FF FF FF 
1bd80     09 FF 2B FC | 	wypin	##-1, arg01
1bd84     41 12 62 FD | 	dirh	arg01
1bd88     04 4E 85 F1 | 	sub	fp, #4
1bd8c     A7 14 02 FB | 	rdlong	arg02, fp
1bd90     08 4E 05 F1 | 	add	fp, #8
1bd94     A7 22 02 FB | 	rdlong	local03, fp
1bd98     11 15 82 F1 | 	sub	arg02, local03
1bd9c     07 14 06 F5 | 	and	arg02, #7
1bda0     18 14 66 F0 | 	shl	arg02, #24
1bda4     14 4E 85 F1 | 	sub	fp, #20
1bda8     A7 14 62 FC | 	wrlong	arg02, fp
1bdac     29 00 00 FF 
1bdb0     7A 14 46 F5 | 	or	arg02, ##21114
1bdb4     A7 14 62 FC | 	wrlong	arg02, fp
1bdb8     14 4E 05 F1 | 	add	fp, #20
1bdbc     A7 12 02 FB | 	rdlong	arg01, fp
1bdc0     40 12 62 FD | 	dirl	arg01
1bdc4     09 15 02 FC | 	wrpin	arg02, arg01
1bdc8     09 4F 18 FC | 	wxpin	#39, arg01
1bdcc     09 01 28 FC | 	wypin	#0, arg01
1bdd0     41 12 62 FD | 	dirh	arg01
1bdd4     28 4E 85 F1 | 	sub	fp, #40
1bdd8     A7 12 02 F6 | 	mov	arg01, fp
1bddc     14 4E 85 F1 | 	sub	fp, #20
1bde0     0A 14 06 F6 | 	mov	arg02, #10
1bde4     1C 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0944
1bde8     00 12 06 F6 | 	mov	arg01, #0
1bdec     00 14 06 F6 | 	mov	arg02, #0
1bdf0     E8 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0968
1bdf4     24 80 B0 FD | 	call	#_fatfs_cc_deselect_0954
1bdf8     64 12 06 F6 | 	mov	arg01, #100
1bdfc     20 9D BF FD | 	call	#__system___waitus
1be00     14 4E 05 F1 | 	add	fp, #20
1be04     A7 12 02 F6 | 	mov	arg01, fp
1be08     14 4E 85 F1 | 	sub	fp, #20
1be0c     0A 14 06 F6 | 	mov	arg02, #10
1be10     F0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0944
1be14     0C 4E 05 F1 | 	add	fp, #12
1be18     A7 00 48 FC | 	wrbyte	#0, fp
1be1c     0C 4E 85 F1 | 	sub	fp, #12
1be20     00 12 06 F6 | 	mov	arg01, #0
1be24     00 14 06 F6 | 	mov	arg02, #0
1be28     B0 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0968
1be2c     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
1be30     01 18 0E F2 | 	cmp	arg04, #1 wz
1be34     B8 03 90 5D |  if_ne	jmp	#LR__3107
1be38     08 12 06 F6 | 	mov	arg01, #8
1be3c     AA 15 06 F6 | 	mov	arg02, #426
1be40     98 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0968
1be44     FD FA E1 F8 | 	getbyte	result1, result1, #0
1be48     01 FA 0D F2 | 	cmp	result1, #1 wz
1be4c     98 01 90 5D |  if_ne	jmp	#LR__3093
1be50     14 4E 05 F1 | 	add	fp, #20
1be54     A7 12 02 F6 | 	mov	arg01, fp
1be58     14 4E 85 F1 | 	sub	fp, #20
1be5c     04 14 06 F6 | 	mov	arg02, #4
1be60     A0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0944
1be64     16 4E 05 F1 | 	add	fp, #22
1be68     A7 24 C2 FA | 	rdbyte	local04, fp
1be6c     16 4E 85 F1 | 	sub	fp, #22
1be70     01 24 0E F2 | 	cmp	local04, #1 wz
1be74     17 4E 05 A1 |  if_e	add	fp, #23
1be78     A7 22 C2 AA |  if_e	rdbyte	local03, fp
1be7c     17 4E 85 A1 |  if_e	sub	fp, #23
1be80     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
1be84     68 03 90 5D |  if_ne	jmp	#LR__3106
1be88                 | ' 				for (tmr = 1000; tmr; tmr--) {
1be88     18 4E 05 F1 | 	add	fp, #24
1be8c     01 00 80 FF 
1be90     A7 D0 6B FC | 	wrlong	##1000, fp
1be94     18 4E 85 F1 | 	sub	fp, #24
1be98                 | LR__3090
1be98     18 4E 05 F1 | 	add	fp, #24
1be9c     A7 1E 0A FB | 	rdlong	local01, fp wz
1bea0     18 4E 85 F1 | 	sub	fp, #24
1bea4     3C 00 90 AD |  if_e	jmp	#LR__3091
1bea8     A9 12 06 F6 | 	mov	arg01, #169
1beac     1E 14 C6 F9 | 	decod	arg02, #30
1beb0     28 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0968
1beb4     FD 24 02 F6 | 	mov	local04, result1
1beb8     07 24 4E F7 | 	zerox	local04, #7 wz
1bebc     24 00 90 AD |  if_e	jmp	#LR__3091
1bec0     01 00 00 FF 
1bec4     E8 13 06 F6 | 	mov	arg01, ##1000
1bec8     54 9C BF FD | 	call	#__system___waitus
1becc     18 4E 05 F1 | 	add	fp, #24
1bed0     A7 24 02 FB | 	rdlong	local04, fp
1bed4     01 24 86 F1 | 	sub	local04, #1
1bed8     A7 24 62 FC | 	wrlong	local04, fp
1bedc     18 4E 85 F1 | 	sub	fp, #24
1bee0     B4 FF 9F FD | 	jmp	#LR__3090
1bee4                 | LR__3091
1bee4     18 4E 05 F1 | 	add	fp, #24
1bee8     A7 24 0A FB | 	rdlong	local04, fp wz
1beec     18 4E 85 F1 | 	sub	fp, #24
1bef0     4C 00 90 AD |  if_e	jmp	#LR__3092
1bef4     3A 12 06 F6 | 	mov	arg01, #58
1bef8     00 14 06 F6 | 	mov	arg02, #0
1befc     DC 81 B0 FD | 	call	#_fatfs_cc_send_cmd_0968
1bf00     FD 22 02 F6 | 	mov	local03, result1
1bf04     07 22 4E F7 | 	zerox	local03, #7 wz
1bf08     34 00 90 5D |  if_ne	jmp	#LR__3092
1bf0c     14 4E 05 F1 | 	add	fp, #20
1bf10     A7 12 02 F6 | 	mov	arg01, fp
1bf14     14 4E 85 F1 | 	sub	fp, #20
1bf18     04 14 06 F6 | 	mov	arg02, #4
1bf1c     E4 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0944
1bf20     14 4E 05 F1 | 	add	fp, #20
1bf24     A7 1E C2 FA | 	rdbyte	local01, fp
1bf28     40 1E CE F7 | 	test	local01, #64 wz
1bf2c     0C 24 06 56 |  if_ne	mov	local04, #12
1bf30     04 24 06 A6 |  if_e	mov	local04, #4
1bf34     08 4E 85 F1 | 	sub	fp, #8
1bf38     A7 24 42 FC | 	wrbyte	local04, fp
1bf3c     0C 4E 85 F1 | 	sub	fp, #12
1bf40                 | LR__3092
1bf40     14 24 06 FB | 	rdlong	local04, #20
1bf44     18 4E 05 F1 | 	add	fp, #24
1bf48     A7 24 62 FC | 	wrlong	local04, fp
1bf4c     0C 4E 05 F1 | 	add	fp, #12
1bf50     A7 24 02 FB | 	rdlong	local04, fp
1bf54     1B 24 26 F4 | 	bith	local04, #27
1bf58     A7 24 62 FC | 	wrlong	local04, fp
1bf5c     0C 4E 85 F1 | 	sub	fp, #12
1bf60     A7 24 02 FB | 	rdlong	local04, fp
1bf64     18 4E 85 F1 | 	sub	fp, #24
1bf68     68 78 04 FF 
1bf6c     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1bf70     1C 4E 05 C1 |  if_b	add	fp, #28
1bf74     00 01 80 CF 
1bf78     A7 08 68 CC |  if_b	wrlong	##131076, fp
1bf7c     1C 4E 85 C1 |  if_b	sub	fp, #28
1bf80     6C 02 90 CD |  if_b	jmp	#LR__3106
1bf84     18 4E 05 F1 | 	add	fp, #24
1bf88     A7 24 02 FB | 	rdlong	local04, fp
1bf8c     18 4E 85 F1 | 	sub	fp, #24
1bf90     E1 F5 05 FF 
1bf94     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1bf98     1C 4E 05 C1 |  if_b	add	fp, #28
1bf9c     00 01 80 CF 
1bfa0     A7 0A 68 CC |  if_b	wrlong	##131077, fp
1bfa4     1C 4E 85 C1 |  if_b	sub	fp, #28
1bfa8     44 02 90 CD |  if_b	jmp	#LR__3106
1bfac     18 4E 05 F1 | 	add	fp, #24
1bfb0     A7 24 02 FB | 	rdlong	local04, fp
1bfb4     18 4E 85 F1 | 	sub	fp, #24
1bfb8     3B 58 08 FF 
1bfbc     01 24 16 F2 | 	cmp	local04, ##280000001 wc
1bfc0     1C 4E 05 C1 |  if_b	add	fp, #28
1bfc4     00 01 80 CF 
1bfc8     A7 0C 68 CC |  if_b	wrlong	##131078, fp
1bfcc     1C 4E 85 C1 |  if_b	sub	fp, #28
1bfd0     1C 02 90 CD |  if_b	jmp	#LR__3106
1bfd4     1C 4E 05 F1 | 	add	fp, #28
1bfd8     80 01 80 FF 
1bfdc     A7 10 68 FC | 	wrlong	##196616, fp
1bfe0     1C 4E 85 F1 | 	sub	fp, #28
1bfe4     08 02 90 FD | 	jmp	#LR__3106
1bfe8                 | LR__3093
1bfe8     A9 12 06 F6 | 	mov	arg01, #169
1bfec     00 14 06 F6 | 	mov	arg02, #0
1bff0     E8 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0968
1bff4     FD 24 E2 F8 | 	getbyte	local04, result1, #0
1bff8     02 24 16 F2 | 	cmp	local04, #2 wc
1bffc     18 00 90 3D |  if_ae	jmp	#LR__3094
1c000     0C 4E 05 F1 | 	add	fp, #12
1c004     A7 04 48 FC | 	wrbyte	#2, fp
1c008     04 4E 05 F1 | 	add	fp, #4
1c00c     A7 52 49 FC | 	wrbyte	#169, fp
1c010     10 4E 85 F1 | 	sub	fp, #16
1c014     14 00 90 FD | 	jmp	#LR__3095
1c018                 | LR__3094
1c018     0C 4E 05 F1 | 	add	fp, #12
1c01c     A7 02 48 FC | 	wrbyte	#1, fp
1c020     04 4E 05 F1 | 	add	fp, #4
1c024     A7 02 48 FC | 	wrbyte	#1, fp
1c028     10 4E 85 F1 | 	sub	fp, #16
1c02c                 | LR__3095
1c02c                 | ' 				ty =  0x01 ; cmd =  (1) ;
1c02c                 | ' 			}
1c02c                 | ' 			for (tmr = 1000; tmr; tmr--) {
1c02c     18 4E 05 F1 | 	add	fp, #24
1c030     01 00 80 FF 
1c034     A7 D0 6B FC | 	wrlong	##1000, fp
1c038     18 4E 85 F1 | 	sub	fp, #24
1c03c                 | LR__3096
1c03c     18 4E 05 F1 | 	add	fp, #24
1c040     A7 22 0A FB | 	rdlong	local03, fp wz
1c044     18 4E 85 F1 | 	sub	fp, #24
1c048     44 00 90 AD |  if_e	jmp	#LR__3097
1c04c     10 4E 05 F1 | 	add	fp, #16
1c050     A7 12 C2 FA | 	rdbyte	arg01, fp
1c054     10 4E 85 F1 | 	sub	fp, #16
1c058     00 14 06 F6 | 	mov	arg02, #0
1c05c     7C 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0968
1c060     FD 24 02 F6 | 	mov	local04, result1
1c064     07 24 4E F7 | 	zerox	local04, #7 wz
1c068     24 00 90 AD |  if_e	jmp	#LR__3097
1c06c     01 00 00 FF 
1c070     E8 13 06 F6 | 	mov	arg01, ##1000
1c074     A8 9A BF FD | 	call	#__system___waitus
1c078     18 4E 05 F1 | 	add	fp, #24
1c07c     A7 24 02 FB | 	rdlong	local04, fp
1c080     01 24 86 F1 | 	sub	local04, #1
1c084     A7 24 62 FC | 	wrlong	local04, fp
1c088     18 4E 85 F1 | 	sub	fp, #24
1c08c     AC FF 9F FD | 	jmp	#LR__3096
1c090                 | LR__3097
1c090     18 4E 05 F1 | 	add	fp, #24
1c094     A7 24 0A FB | 	rdlong	local04, fp wz
1c098     18 4E 85 F1 | 	sub	fp, #24
1c09c     14 00 90 AD |  if_e	jmp	#LR__3098
1c0a0     10 12 06 F6 | 	mov	arg01, #16
1c0a4     09 14 C6 F9 | 	decod	arg02, #9
1c0a8     30 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0968
1c0ac     07 FA 4D F7 | 	zerox	result1, #7 wz
1c0b0     0C 00 90 AD |  if_e	jmp	#LR__3099
1c0b4                 | LR__3098
1c0b4     0C 4E 05 F1 | 	add	fp, #12
1c0b8     A7 00 48 FC | 	wrbyte	#0, fp
1c0bc     0C 4E 85 F1 | 	sub	fp, #12
1c0c0                 | LR__3099
1c0c0     14 24 06 FB | 	rdlong	local04, #20
1c0c4     18 4E 05 F1 | 	add	fp, #24
1c0c8     A7 24 62 FC | 	wrlong	local04, fp
1c0cc     18 4E 85 F1 | 	sub	fp, #24
1c0d0     F0 FA 02 FF 
1c0d4     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1c0d8     18 00 90 3D |  if_ae	jmp	#LR__3100
1c0dc     24 4E 05 F1 | 	add	fp, #36
1c0e0     A7 24 02 FB | 	rdlong	local04, fp
1c0e4     1B 24 26 F4 | 	bith	local04, #27
1c0e8     A7 24 62 FC | 	wrlong	local04, fp
1c0ec     24 4E 85 F1 | 	sub	fp, #36
1c0f0     2C 00 90 FD | 	jmp	#LR__3101
1c0f4                 | LR__3100
1c0f4     18 4E 05 F1 | 	add	fp, #24
1c0f8     A7 24 02 FB | 	rdlong	local04, fp
1c0fc     18 4E 85 F1 | 	sub	fp, #24
1c100     E1 F5 05 FF 
1c104     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1c108     24 4E 05 C1 |  if_b	add	fp, #36
1c10c     A7 24 02 CB |  if_b	rdlong	local04, fp
1c110     80 00 04 CF 
1c114     00 24 46 C5 |  if_b	or	local04, ##134283264
1c118     A7 24 62 CC |  if_b	wrlong	local04, fp
1c11c     24 4E 85 C1 |  if_b	sub	fp, #36
1c120                 | LR__3101
1c120     18 4E 05 F1 | 	add	fp, #24
1c124     A7 24 02 FB | 	rdlong	local04, fp
1c128     18 4E 85 F1 | 	sub	fp, #24
1c12c     F0 FA 02 FF 
1c130     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1c134     1C 4E 05 C1 |  if_b	add	fp, #28
1c138     00 01 80 CF 
1c13c     A7 08 68 CC |  if_b	wrlong	##131076, fp
1c140     1C 4E 85 C1 |  if_b	sub	fp, #28
1c144     A8 00 90 CD |  if_b	jmp	#LR__3105
1c148     18 4E 05 F1 | 	add	fp, #24
1c14c     A7 24 02 FB | 	rdlong	local04, fp
1c150     18 4E 85 F1 | 	sub	fp, #24
1c154     68 78 04 FF 
1c158     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1c15c     1C 4E 05 C1 |  if_b	add	fp, #28
1c160     80 01 80 CF 
1c164     A7 0C 68 CC |  if_b	wrlong	##196614, fp
1c168     1C 4E 85 C1 |  if_b	sub	fp, #28
1c16c     80 00 90 CD |  if_b	jmp	#LR__3104
1c170     18 4E 05 F1 | 	add	fp, #24
1c174     A7 24 02 FB | 	rdlong	local04, fp
1c178     18 4E 85 F1 | 	sub	fp, #24
1c17c     E1 F5 05 FF 
1c180     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1c184     1C 4E 05 C1 |  if_b	add	fp, #28
1c188     00 02 80 CF 
1c18c     A7 10 68 CC |  if_b	wrlong	##262152, fp
1c190     1C 4E 85 C1 |  if_b	sub	fp, #28
1c194     58 00 90 CD |  if_b	jmp	#LR__3103
1c198     18 4E 05 F1 | 	add	fp, #24
1c19c     A7 24 02 FB | 	rdlong	local04, fp
1c1a0     18 4E 85 F1 | 	sub	fp, #24
1c1a4     59 73 07 FF 
1c1a8     81 24 16 F2 | 	cmp	local04, ##250000001 wc
1c1ac     1C 4E 05 C1 |  if_b	add	fp, #28
1c1b0     80 02 80 CF 
1c1b4     A7 14 68 CC |  if_b	wrlong	##327690, fp
1c1b8     1C 4E 85 C1 |  if_b	sub	fp, #28
1c1bc     30 00 90 CD |  if_b	jmp	#LR__3102
1c1c0     18 4E 05 F1 | 	add	fp, #24
1c1c4     A7 24 02 FB | 	rdlong	local04, fp
1c1c8     18 4E 85 F1 | 	sub	fp, #24
1c1cc     D1 F0 08 FF 
1c1d0     01 25 16 F2 | 	cmp	local04, ##300000001 wc
1c1d4     1C 4E 05 C1 |  if_b	add	fp, #28
1c1d8     00 03 80 CF 
1c1dc     A7 18 68 CC |  if_b	wrlong	##393228, fp
1c1e0     1C 4E 85 F3 | 	sumc	fp, #28
1c1e4     80 03 80 3F 
1c1e8     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
1c1ec     1C 4E 85 31 |  if_ae	sub	fp, #28
1c1f0                 | LR__3102
1c1f0                 | LR__3103
1c1f0                 | LR__3104
1c1f0                 | LR__3105
1c1f0                 | LR__3106
1c1f0                 | LR__3107
1c1f0     0C 4E 05 F1 | 	add	fp, #12
1c1f4     A7 24 C2 FA | 	rdbyte	local04, fp
1c1f8     01 00 00 FF 
1c1fc     21 E4 05 F1 | 	add	objptr, ##545
1c200     F2 24 42 FC | 	wrbyte	local04, objptr
1c204     A7 1E CA FA | 	rdbyte	local01, fp wz
1c208     00 24 06 56 |  if_ne	mov	local04, #0
1c20c     01 24 06 A6 |  if_e	mov	local04, #1
1c210     20 4E 05 F1 | 	add	fp, #32
1c214     A7 24 42 FC | 	wrbyte	local04, fp
1c218     A7 24 C2 FA | 	rdbyte	local04, fp
1c21c     2C 4E 85 F1 | 	sub	fp, #44
1c220     01 E4 85 F1 | 	sub	objptr, #1
1c224     F2 24 42 FC | 	wrbyte	local04, objptr
1c228     01 00 00 FF 
1c22c     20 E4 85 F1 | 	sub	objptr, ##544
1c230     E8 7B B0 FD | 	call	#_fatfs_cc_deselect_0954
1c234     34 4E 05 F1 | 	add	fp, #52
1c238     A7 12 02 FB | 	rdlong	arg01, fp
1c23c     18 4E 85 F1 | 	sub	fp, #24
1c240     A7 14 02 FB | 	rdlong	arg02, fp
1c244     09 15 12 FC | 	wxpin	arg02, arg01
1c248     1C 4E 05 F1 | 	add	fp, #28
1c24c     A7 12 02 FB | 	rdlong	arg01, fp
1c250     14 4E 85 F1 | 	sub	fp, #20
1c254     A7 14 02 FB | 	rdlong	arg02, fp
1c258     09 15 02 FC | 	wrpin	arg02, arg01
1c25c                 | ' 
1c25c                 | ' 		}
1c25c                 | ' 	}
1c25c                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
1c25c                 | ' 	CardType = ty;
1c25c                 | ' 	s = ty ? 0 :  0x01 ;
1c25c                 | ' 	Stat = s;
1c25c                 | ' 
1c25c                 | ' 	deselect();
1c25c                 | ' 
1c25c                 | ' 
1c25c                 | ' 	_wxpin( PIN_CLK, ck_div );
1c25c                 | ' 	_wrpin( PIN_DI, spm_tx );
1c25c                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
1c25c                 | ' 	return s;
1c25c     08 4E 05 F1 | 	add	fp, #8
1c260     A7 FA C1 FA | 	rdbyte	result1, fp
1c264     2C 4E 85 F1 | 	sub	fp, #44
1c268                 | LR__3108
1c268     A7 F0 03 F6 | 	mov	ptra, fp
1c26c     B2 00 A0 FD | 	call	#popregs_
1c270                 | _fatfs_cc_disk_initialize_ret
1c270     2D 00 64 FD | 	ret
1c274                 | 
1c274                 | _fatfs_cc_disk_read
1c274     05 4A 05 F6 | 	mov	COUNT_, #5
1c278     A8 00 A0 FD | 	call	#pushregs_
1c27c     0A 1F 02 F6 | 	mov	local01, arg02
1c280     0B 21 02 F6 | 	mov	local02, arg03
1c284     0C 23 02 F6 | 	mov	local03, arg04
1c288     00 12 0E F2 | 	cmp	arg01, #0 wz
1c28c     01 FA 05 56 |  if_ne	mov	result1, #1
1c290                 | ' 
1c290                 | ' 	return Stat;
1c290     01 00 00 AF 
1c294     20 E4 05 A1 |  if_e	add	objptr, ##544
1c298     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1c29c     01 00 00 AF 
1c2a0     20 E4 85 A1 |  if_e	sub	objptr, ##544
1c2a4     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c2a8     01 FA CD F7 | 	test	result1, #1 wz
1c2ac     03 FA 05 56 |  if_ne	mov	result1, #3
1c2b0     84 00 90 5D |  if_ne	jmp	#LR__3112
1c2b4     01 00 00 FF 
1c2b8     21 E4 05 F1 | 	add	objptr, ##545
1c2bc     F2 24 C2 FA | 	rdbyte	local04, objptr
1c2c0     01 00 00 FF 
1c2c4     21 E4 85 F1 | 	sub	objptr, ##545
1c2c8     08 24 CE F7 | 	test	local04, #8 wz
1c2cc     09 20 66 A0 |  if_e	shl	local02, #9
1c2d0     02 22 16 F2 | 	cmp	local03, #2 wc
1c2d4     12 24 06 36 |  if_ae	mov	local04, #18
1c2d8     11 24 06 C6 |  if_b	mov	local04, #17
1c2dc     10 15 02 F6 | 	mov	arg02, local02
1c2e0     12 13 02 F6 | 	mov	arg01, local04
1c2e4     F4 7D B0 FD | 	call	#_fatfs_cc_send_cmd_0968
1c2e8     FD 26 02 F6 | 	mov	local05, result1
1c2ec     07 26 4E F7 | 	zerox	local05, #7 wz
1c2f0     30 00 90 5D |  if_ne	jmp	#LR__3111
1c2f4                 | ' 		do {
1c2f4                 | LR__3110
1c2f4     0F 13 02 F6 | 	mov	arg01, local01
1c2f8     09 14 C6 F9 | 	decod	arg02, #9
1c2fc     30 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_0962
1c300     00 FA 0D F2 | 	cmp	result1, #0 wz
1c304     01 00 00 5F 
1c308     00 1E 06 51 |  if_ne	add	local01, ##512
1c30c     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3110
1c310     12 25 E2 F8 | 	getbyte	local04, local04, #0
1c314     12 24 0E F2 | 	cmp	local04, #18 wz
1c318     0C 12 06 A6 |  if_e	mov	arg01, #12
1c31c     00 14 06 A6 |  if_e	mov	arg02, #0
1c320     B8 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_0968
1c324                 | LR__3111
1c324     F4 7A B0 FD | 	call	#_fatfs_cc_deselect_0954
1c328                 | ' 	}
1c328                 | ' 	deselect();
1c328                 | ' 
1c328                 | ' 	return count ? RES_ERROR : RES_OK;
1c328     00 22 0E F2 | 	cmp	local03, #0 wz
1c32c     01 26 06 56 |  if_ne	mov	local05, #1
1c330     00 26 06 A6 |  if_e	mov	local05, #0
1c334     13 FB 01 F6 | 	mov	result1, local05
1c338                 | LR__3112
1c338     A7 F0 03 F6 | 	mov	ptra, fp
1c33c     B2 00 A0 FD | 	call	#popregs_
1c340                 | _fatfs_cc_disk_read_ret
1c340     2D 00 64 FD | 	ret
1c344                 | 
1c344                 | _fatfs_cc_disk_write
1c344     04 4A 05 F6 | 	mov	COUNT_, #4
1c348     A8 00 A0 FD | 	call	#pushregs_
1c34c     0A 1F 02 F6 | 	mov	local01, arg02
1c350     0C 21 02 F6 | 	mov	local02, arg04
1c354     0B 23 02 F6 | 	mov	local03, arg03
1c358     00 12 0E F2 | 	cmp	arg01, #0 wz
1c35c     01 FA 05 56 |  if_ne	mov	result1, #1
1c360                 | ' 
1c360                 | ' 	return Stat;
1c360     01 00 00 AF 
1c364     20 E4 05 A1 |  if_e	add	objptr, ##544
1c368     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1c36c     01 00 00 AF 
1c370     20 E4 85 A1 |  if_e	sub	objptr, ##544
1c374     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c378     01 FA CD F7 | 	test	result1, #1 wz
1c37c     03 FA 05 56 |  if_ne	mov	result1, #3
1c380     D4 00 90 5D |  if_ne	jmp	#LR__3124
1c384     01 00 00 FF 
1c388     21 E4 05 F1 | 	add	objptr, ##545
1c38c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1c390     01 00 00 FF 
1c394     21 E4 85 F1 | 	sub	objptr, ##545
1c398     08 16 CE F7 | 	test	arg03, #8 wz
1c39c     09 22 66 A0 |  if_e	shl	local03, #9
1c3a0     01 20 0E F2 | 	cmp	local02, #1 wz
1c3a4     30 00 90 5D |  if_ne	jmp	#LR__3120
1c3a8     18 12 06 F6 | 	mov	arg01, #24
1c3ac     11 15 02 F6 | 	mov	arg02, local03
1c3b0     28 7D B0 FD | 	call	#_fatfs_cc_send_cmd_0968
1c3b4     FD 24 02 F6 | 	mov	local04, result1
1c3b8     07 24 4E F7 | 	zerox	local04, #7 wz
1c3bc     84 00 90 5D |  if_ne	jmp	#LR__3123
1c3c0     0F 13 02 F6 | 	mov	arg01, local01
1c3c4     FE 14 06 F6 | 	mov	arg02, #254
1c3c8     44 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_0964
1c3cc     00 FA 0D F2 | 	cmp	result1, #0 wz
1c3d0     00 20 06 56 |  if_ne	mov	local02, #0
1c3d4     6C 00 90 FD | 	jmp	#LR__3123
1c3d8                 | LR__3120
1c3d8     01 00 00 FF 
1c3dc     21 E4 05 F1 | 	add	objptr, ##545
1c3e0     F2 24 C2 FA | 	rdbyte	local04, objptr
1c3e4     01 00 00 FF 
1c3e8     21 E4 85 F1 | 	sub	objptr, ##545
1c3ec     06 24 CE F7 | 	test	local04, #6 wz
1c3f0     97 12 06 56 |  if_ne	mov	arg01, #151
1c3f4     10 15 02 56 |  if_ne	mov	arg02, local02
1c3f8     E0 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_0968
1c3fc     11 15 02 F6 | 	mov	arg02, local03
1c400     19 12 06 F6 | 	mov	arg01, #25
1c404     D4 7C B0 FD | 	call	#_fatfs_cc_send_cmd_0968
1c408     FD 24 02 F6 | 	mov	local04, result1
1c40c     07 24 4E F7 | 	zerox	local04, #7 wz
1c410     30 00 90 5D |  if_ne	jmp	#LR__3122
1c414                 | ' 			do {
1c414                 | LR__3121
1c414     0F 13 02 F6 | 	mov	arg01, local01
1c418     FC 14 06 F6 | 	mov	arg02, #252
1c41c     F0 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_0964
1c420     00 FA 0D F2 | 	cmp	result1, #0 wz
1c424     01 00 00 5F 
1c428     00 1E 06 51 |  if_ne	add	local01, ##512
1c42c     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3121
1c430     00 12 06 F6 | 	mov	arg01, #0
1c434     FD 14 06 F6 | 	mov	arg02, #253
1c438     D4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_0964
1c43c     00 FA 0D F2 | 	cmp	result1, #0 wz
1c440     01 20 06 A6 |  if_e	mov	local02, #1
1c444                 | LR__3122
1c444                 | LR__3123
1c444     D4 79 B0 FD | 	call	#_fatfs_cc_deselect_0954
1c448                 | ' 				count = 1;
1c448                 | ' 		}
1c448                 | ' 	}
1c448                 | ' 	deselect();
1c448                 | ' 
1c448                 | ' 	return count ? RES_ERROR : RES_OK;
1c448     00 20 0E F2 | 	cmp	local02, #0 wz
1c44c     01 24 06 56 |  if_ne	mov	local04, #1
1c450     00 24 06 A6 |  if_e	mov	local04, #0
1c454     12 FB 01 F6 | 	mov	result1, local04
1c458                 | LR__3124
1c458     A7 F0 03 F6 | 	mov	ptra, fp
1c45c     B2 00 A0 FD | 	call	#popregs_
1c460                 | _fatfs_cc_disk_write_ret
1c460     2D 00 64 FD | 	ret
1c464                 | 
1c464                 | _fatfs_cc_disk_ioctl
1c464     01 4A 05 F6 | 	mov	COUNT_, #1
1c468     A8 00 A0 FD | 	call	#pushregs_
1c46c     30 F0 07 F1 | 	add	ptra, #48
1c470     04 4E 05 F1 | 	add	fp, #4
1c474     A7 12 42 FC | 	wrbyte	arg01, fp
1c478     04 4E 05 F1 | 	add	fp, #4
1c47c     A7 14 42 FC | 	wrbyte	arg02, fp
1c480     04 4E 05 F1 | 	add	fp, #4
1c484     A7 16 62 FC | 	wrlong	arg03, fp
1c488     08 4E 85 F1 | 	sub	fp, #8
1c48c     A7 12 CA FA | 	rdbyte	arg01, fp wz
1c490     04 4E 85 F1 | 	sub	fp, #4
1c494     01 FA 05 56 |  if_ne	mov	result1, #1
1c498                 | ' 
1c498                 | ' 	return Stat;
1c498     01 00 00 AF 
1c49c     20 E4 05 A1 |  if_e	add	objptr, ##544
1c4a0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1c4a4     01 00 00 AF 
1c4a8     20 E4 85 A1 |  if_e	sub	objptr, ##544
1c4ac     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c4b0     01 FA CD F7 | 	test	result1, #1 wz
1c4b4     03 FA 05 56 |  if_ne	mov	result1, #3
1c4b8     E4 01 90 5D |  if_ne	jmp	#LR__3138
1c4bc     10 4E 05 F1 | 	add	fp, #16
1c4c0     A7 02 68 FC | 	wrlong	#1, fp
1c4c4                 | ' 
1c4c4                 | ' 	res = RES_ERROR;
1c4c4                 | ' 	switch (ctrl) {
1c4c4     08 4E 85 F1 | 	sub	fp, #8
1c4c8     A7 1E C2 FA | 	rdbyte	local01, fp
1c4cc     08 4E 85 F1 | 	sub	fp, #8
1c4d0     04 1E 26 F3 | 	fle	local01, #4
1c4d4     30 1E 62 FD | 	jmprel	local01
1c4d8                 | LR__3130
1c4d8     10 00 90 FD | 	jmp	#LR__3131
1c4dc     24 00 90 FD | 	jmp	#LR__3132
1c4e0     A0 01 90 FD | 	jmp	#LR__3136
1c4e4     80 01 90 FD | 	jmp	#LR__3135
1c4e8     98 01 90 FD | 	jmp	#LR__3136
1c4ec                 | LR__3131
1c4ec     B0 79 B0 FD | 	call	#_fatfs_cc_select_0958
1c4f0     00 FA 0D F2 | 	cmp	result1, #0 wz
1c4f4     10 4E 05 51 |  if_ne	add	fp, #16
1c4f8     A7 00 68 5C |  if_ne	wrlong	#0, fp
1c4fc     10 4E 85 51 |  if_ne	sub	fp, #16
1c500                 | ' 			break;
1c500     8C 01 90 FD | 	jmp	#LR__3137
1c504                 | LR__3132
1c504     09 12 06 F6 | 	mov	arg01, #9
1c508     00 14 06 F6 | 	mov	arg02, #0
1c50c     CC 7B B0 FD | 	call	#_fatfs_cc_send_cmd_0968
1c510     FD 1E 02 F6 | 	mov	local01, result1
1c514     07 1E 4E F7 | 	zerox	local01, #7 wz
1c518     74 01 90 5D |  if_ne	jmp	#LR__3137
1c51c     18 4E 05 F1 | 	add	fp, #24
1c520     A7 12 02 F6 | 	mov	arg01, fp
1c524     18 4E 85 F1 | 	sub	fp, #24
1c528     10 14 06 F6 | 	mov	arg02, #16
1c52c     00 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_0962
1c530     00 FA 0D F2 | 	cmp	result1, #0 wz
1c534     58 01 90 AD |  if_e	jmp	#LR__3137
1c538     18 4E 05 F1 | 	add	fp, #24
1c53c     A7 1E C2 FA | 	rdbyte	local01, fp
1c540     18 4E 85 F1 | 	sub	fp, #24
1c544     06 1E 46 F0 | 	shr	local01, #6
1c548     01 1E 0E F2 | 	cmp	local01, #1 wz
1c54c     5C 00 90 5D |  if_ne	jmp	#LR__3133
1c550     21 4E 05 F1 | 	add	fp, #33
1c554     A7 1E C2 FA | 	rdbyte	local01, fp
1c558     01 4E 85 F1 | 	sub	fp, #1
1c55c     A7 FA C1 FA | 	rdbyte	result1, fp
1c560     FD FA 31 F9 | 	getword	result1, result1, #0
1c564     08 FA 65 F0 | 	shl	result1, #8
1c568     FD 1E 02 F1 | 	add	local01, result1
1c56c     01 4E 85 F1 | 	sub	fp, #1
1c570     A7 FA C1 FA | 	rdbyte	result1, fp
1c574     3F FA 05 F5 | 	and	result1, #63
1c578     10 FA 65 F0 | 	shl	result1, #16
1c57c     FD 1E 02 F1 | 	add	local01, result1
1c580     01 1E 06 F1 | 	add	local01, #1
1c584     09 4E 05 F1 | 	add	fp, #9
1c588     A7 1E 62 FC | 	wrlong	local01, fp
1c58c     1C 4E 85 F1 | 	sub	fp, #28
1c590     A7 1E 02 FB | 	rdlong	local01, fp
1c594     1C 4E 05 F1 | 	add	fp, #28
1c598     A7 FA 01 FB | 	rdlong	result1, fp
1c59c     28 4E 85 F1 | 	sub	fp, #40
1c5a0     0A FA 65 F0 | 	shl	result1, #10
1c5a4     0F FB 61 FC | 	wrlong	result1, local01
1c5a8     AC 00 90 FD | 	jmp	#LR__3134
1c5ac                 | LR__3133
1c5ac     1D 4E 05 F1 | 	add	fp, #29
1c5b0     A7 1E C2 FA | 	rdbyte	local01, fp
1c5b4     0F 1F 42 F8 | 	getnib	local01, local01, #0
1c5b8     05 4E 05 F1 | 	add	fp, #5
1c5bc     A7 FA C1 FA | 	rdbyte	result1, fp
1c5c0     80 FA 05 F5 | 	and	result1, #128
1c5c4     07 FA C5 F0 | 	sar	result1, #7
1c5c8     FD 1E 02 F1 | 	add	local01, result1
1c5cc     01 4E 85 F1 | 	sub	fp, #1
1c5d0     A7 FA C1 FA | 	rdbyte	result1, fp
1c5d4     03 FA 05 F5 | 	and	result1, #3
1c5d8     01 FA 65 F0 | 	shl	result1, #1
1c5dc     FD 1E 02 F1 | 	add	local01, result1
1c5e0     02 1E 06 F1 | 	add	local01, #2
1c5e4     0D 4E 85 F1 | 	sub	fp, #13
1c5e8     A7 1E 42 FC | 	wrbyte	local01, fp
1c5ec     0C 4E 05 F1 | 	add	fp, #12
1c5f0     A7 1E C2 FA | 	rdbyte	local01, fp
1c5f4     06 1E 46 F0 | 	shr	local01, #6
1c5f8     01 4E 85 F1 | 	sub	fp, #1
1c5fc     A7 FA C1 FA | 	rdbyte	result1, fp
1c600     FD FA 31 F9 | 	getword	result1, result1, #0
1c604     02 FA 65 F0 | 	shl	result1, #2
1c608     FD 1E 02 F1 | 	add	local01, result1
1c60c     01 4E 85 F1 | 	sub	fp, #1
1c610     A7 FA C1 FA | 	rdbyte	result1, fp
1c614     03 FA 05 F5 | 	and	result1, #3
1c618     FD FA 31 F9 | 	getword	result1, result1, #0
1c61c     0A FA 65 F0 | 	shl	result1, #10
1c620     FD 1E 02 F1 | 	add	local01, result1
1c624     01 1E 06 F1 | 	add	local01, #1
1c628     0A 4E 05 F1 | 	add	fp, #10
1c62c     A7 1E 62 FC | 	wrlong	local01, fp
1c630     1C 4E 85 F1 | 	sub	fp, #28
1c634     A7 1E 02 FB | 	rdlong	local01, fp
1c638     1C 4E 05 F1 | 	add	fp, #28
1c63c     A7 FA 01 FB | 	rdlong	result1, fp
1c640     14 4E 85 F1 | 	sub	fp, #20
1c644     A7 16 C2 FA | 	rdbyte	arg03, fp
1c648     14 4E 85 F1 | 	sub	fp, #20
1c64c     09 16 86 F1 | 	sub	arg03, #9
1c650     0B FB 61 F0 | 	shl	result1, arg03
1c654     0F FB 61 FC | 	wrlong	result1, local01
1c658                 | LR__3134
1c658     10 4E 05 F1 | 	add	fp, #16
1c65c     A7 00 68 FC | 	wrlong	#0, fp
1c660     10 4E 85 F1 | 	sub	fp, #16
1c664                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
1c664                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
1c664                 | ' 					*(LBA_t*)buff = cs << (n - 9);
1c664                 | ' 				}
1c664                 | ' 				res = RES_OK;
1c664                 | ' 			}
1c664                 | ' 			break;
1c664     28 00 90 FD | 	jmp	#LR__3137
1c668                 | LR__3135
1c668     0C 4E 05 F1 | 	add	fp, #12
1c66c     A7 1E 02 FB | 	rdlong	local01, fp
1c670     0F 01 69 FC | 	wrlong	#128, local01
1c674     04 4E 05 F1 | 	add	fp, #4
1c678     A7 00 68 FC | 	wrlong	#0, fp
1c67c     10 4E 85 F1 | 	sub	fp, #16
1c680                 | ' 			*(DWORD*)buff = 128;
1c680                 | ' 			res = RES_OK;
1c680                 | ' 			break;
1c680     0C 00 90 FD | 	jmp	#LR__3137
1c684                 | LR__3136
1c684     10 4E 05 F1 | 	add	fp, #16
1c688     A7 08 68 FC | 	wrlong	#4, fp
1c68c     10 4E 85 F1 | 	sub	fp, #16
1c690                 | LR__3137
1c690     88 77 B0 FD | 	call	#_fatfs_cc_deselect_0954
1c694                 | ' 			res = RES_PARERR;
1c694                 | ' 	}
1c694                 | ' 
1c694                 | ' 	deselect();
1c694                 | ' 
1c694                 | ' 	return res;
1c694     10 4E 05 F1 | 	add	fp, #16
1c698     A7 FA 01 FB | 	rdlong	result1, fp
1c69c     10 4E 85 F1 | 	sub	fp, #16
1c6a0                 | LR__3138
1c6a0     A7 F0 03 F6 | 	mov	ptra, fp
1c6a4     B2 00 A0 FD | 	call	#popregs_
1c6a8                 | _fatfs_cc_disk_ioctl_ret
1c6a8     2D 00 64 FD | 	ret
1c6ac                 | 
1c6ac                 | _fatfs_cc_disk_setpins
1c6ac     00 12 0E F2 | 	cmp	arg01, #0 wz
1c6b0     01 FA 65 56 |  if_ne	neg	result1, #1
1c6b4     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
1c6b8     01 00 00 FF 
1c6bc     10 E4 05 F1 | 	add	objptr, ##528
1c6c0     F2 14 62 FC | 	wrlong	arg02, objptr
1c6c4     04 E4 05 F1 | 	add	objptr, #4
1c6c8     F2 16 62 FC | 	wrlong	arg03, objptr
1c6cc     04 E4 05 F1 | 	add	objptr, #4
1c6d0     F2 18 62 FC | 	wrlong	arg04, objptr
1c6d4     04 E4 05 F1 | 	add	objptr, #4
1c6d8     F2 1A 62 FC | 	wrlong	arg05, objptr
1c6dc     01 00 00 FF 
1c6e0     1C E4 85 F1 | 	sub	objptr, ##540
1c6e4     00 FA 05 F6 | 	mov	result1, #0
1c6e8                 | _fatfs_cc_disk_setpins_ret
1c6e8     2D 00 64 FD | 	ret
1c6ec                 | 
1c6ec                 | _fatfs_cc_tchar2uni
1c6ec     09 01 02 FB | 	rdlong	_var01, arg01
1c6f0     00 03 02 F6 | 	mov	_var02, _var01
1c6f4     01 00 06 F1 | 	add	_var01, #1
1c6f8     00 05 02 F6 | 	mov	_var03, _var01
1c6fc     01 07 C2 FA | 	rdbyte	_var04, _var02
1c700     80 06 CE F7 | 	test	_var04, #128 wz
1c704     E8 00 90 AD |  if_e	jmp	#LR__3147
1c708     03 09 02 F6 | 	mov	_var05, _var04
1c70c     E0 08 06 F5 | 	and	_var05, #224
1c710     C0 08 0E F2 | 	cmp	_var05, #192 wz
1c714     1F 06 06 A5 |  if_e	and	_var04, #31
1c718     01 0A 06 A6 |  if_e	mov	_var06, #1
1c71c     34 00 90 AD |  if_e	jmp	#LR__3141
1c720     03 09 02 F6 | 	mov	_var05, _var04
1c724     F0 08 06 F5 | 	and	_var05, #240
1c728     E0 08 0E F2 | 	cmp	_var05, #224 wz
1c72c     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
1c730     02 0A 06 A6 |  if_e	mov	_var06, #2
1c734     1C 00 90 AD |  if_e	jmp	#LR__3140
1c738     03 09 02 F6 | 	mov	_var05, _var04
1c73c     F8 08 06 F5 | 	and	_var05, #248
1c740     F0 08 0E F2 | 	cmp	_var05, #240 wz
1c744     07 06 06 A5 |  if_e	and	_var04, #7
1c748     03 0A 06 A6 |  if_e	mov	_var06, #3
1c74c                 | ' 			return 0xFFFFFFFF;
1c74c     01 FA 65 56 |  if_ne	neg	result1, #1
1c750     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
1c754                 | LR__3140
1c754                 | LR__3141
1c754                 | ' 		}
1c754                 | ' 		do {
1c754                 | LR__3142
1c754     02 0D C2 FA | 	rdbyte	_var07, _var03
1c758     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
1c75c     C0 08 06 F5 | 	and	_var05, #192
1c760     80 08 0E F2 | 	cmp	_var05, #128 wz
1c764     01 04 06 F1 | 	add	_var03, #1
1c768     01 FA 65 56 |  if_ne	neg	result1, #1
1c76c     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
1c770     06 06 66 F0 | 	shl	_var04, #6
1c774     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
1c778     3F 02 06 F5 | 	and	_var02, #63
1c77c     01 07 42 F5 | 	or	_var04, _var02
1c780     F4 0B 6E FB | 	djnz	_var06, #LR__3142
1c784     80 06 16 F2 | 	cmp	_var04, #128 wc
1c788     24 00 90 CD |  if_b	jmp	#LR__3144
1c78c     6C 00 00 FF 
1c790     00 06 16 F2 | 	cmp	_var04, ##55296 wc
1c794     0C 00 90 CD |  if_b	jmp	#LR__3143
1c798     70 00 00 FF 
1c79c     00 06 16 F2 | 	cmp	_var04, ##57344 wc
1c7a0     0C 00 90 CD |  if_b	jmp	#LR__3144
1c7a4                 | LR__3143
1c7a4     80 08 00 FF 
1c7a8     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
1c7ac     08 00 90 CD |  if_b	jmp	#LR__3145
1c7b0                 | LR__3144
1c7b0     01 FA 65 F6 | 	neg	result1, #1
1c7b4     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
1c7b8                 | LR__3145
1c7b8     80 00 00 FF 
1c7bc     00 06 16 F2 | 	cmp	_var04, ##65536 wc
1c7c0     2C 00 90 CD |  if_b	jmp	#LR__3146
1c7c4     03 03 02 F6 | 	mov	_var02, _var04
1c7c8     80 00 00 FF 
1c7cc     00 02 86 F1 | 	sub	_var02, ##65536
1c7d0     06 02 66 F0 | 	shl	_var02, #6
1c7d4     80 FF 01 FF 
1c7d8     00 02 06 F5 | 	and	_var02, ##67043328
1c7dc     6E 00 6C FF 
1c7e0     00 08 06 F6 | 	mov	_var05, ##-671032320
1c7e4     01 09 42 F5 | 	or	_var05, _var02
1c7e8     09 06 46 F7 | 	zerox	_var04, #9
1c7ec     04 07 42 F5 | 	or	_var04, _var05
1c7f0                 | LR__3146
1c7f0                 | LR__3147
1c7f0     09 05 62 FC | 	wrlong	_var03, arg01
1c7f4                 | ' 	}
1c7f4                 | ' #line 811 "ff.c"
1c7f4                 | ' 	*str = p;
1c7f4                 | ' 	return uc;
1c7f4     03 FB 01 F6 | 	mov	result1, _var04
1c7f8                 | _fatfs_cc_tchar2uni_ret
1c7f8     2D 00 64 FD | 	ret
1c7fc                 | 
1c7fc                 | _fatfs_cc_put_utf
1c7fc     80 12 16 F2 | 	cmp	arg01, #128 wc
1c800     18 00 90 3D |  if_ae	jmp	#LR__3150
1c804     01 16 16 F2 | 	cmp	arg03, #1 wc
1c808     00 FA 05 C6 |  if_b	mov	result1, #0
1c80c     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1c810     0A 13 42 FC | 	wrbyte	arg01, arg02
1c814                 | ' 		*buf = (TCHAR)chr;
1c814                 | ' 		return 1;
1c814     01 FA 05 F6 | 	mov	result1, #1
1c818     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1c81c                 | LR__3150
1c81c     04 00 00 FF 
1c820     00 12 16 F2 | 	cmp	arg01, ##2048 wc
1c824     40 00 90 3D |  if_ae	jmp	#LR__3151
1c828     02 16 16 F2 | 	cmp	arg03, #2 wc
1c82c     00 FA 05 C6 |  if_b	mov	result1, #0
1c830     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1c834     09 FB 01 F6 | 	mov	result1, arg01
1c838     06 FA 45 F0 | 	shr	result1, #6
1c83c     1F FA 05 F5 | 	and	result1, #31
1c840     C0 16 06 F6 | 	mov	arg03, #192
1c844     FD 16 42 F5 | 	or	arg03, result1
1c848     0A 17 42 FC | 	wrbyte	arg03, arg02
1c84c     01 14 06 F1 | 	add	arg02, #1
1c850     3F 12 06 F5 | 	and	arg01, #63
1c854     80 FA 05 F6 | 	mov	result1, #128
1c858     09 FB 41 F5 | 	or	result1, arg01
1c85c     0A FB 41 FC | 	wrbyte	result1, arg02
1c860                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
1c860                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1c860                 | ' 		return 2;
1c860     02 FA 05 F6 | 	mov	result1, #2
1c864     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1c868                 | LR__3151
1c868     80 00 00 FF 
1c86c     00 12 16 F2 | 	cmp	arg01, ##65536 wc
1c870     70 00 90 3D |  if_ae	jmp	#LR__3154
1c874     03 16 16 F2 | 	cmp	arg03, #3 wc
1c878     18 00 90 CD |  if_b	jmp	#LR__3152
1c87c     6C 00 00 FF 
1c880     00 12 16 F2 | 	cmp	arg01, ##55296 wc
1c884     14 00 90 CD |  if_b	jmp	#LR__3153
1c888     70 00 00 FF 
1c88c     00 12 16 F2 | 	cmp	arg01, ##57344 wc
1c890     08 00 90 3D |  if_ae	jmp	#LR__3153
1c894                 | LR__3152
1c894     00 FA 05 F6 | 	mov	result1, #0
1c898     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1c89c                 | LR__3153
1c89c     09 FB 59 F8 | 	getnib	result1, arg01, #3
1c8a0     E0 16 06 F6 | 	mov	arg03, #224
1c8a4     FD 16 42 F5 | 	or	arg03, result1
1c8a8     0A 17 42 FC | 	wrbyte	arg03, arg02
1c8ac     01 14 06 F1 | 	add	arg02, #1
1c8b0     09 FB 01 F6 | 	mov	result1, arg01
1c8b4     06 FA 45 F0 | 	shr	result1, #6
1c8b8     3F FA 05 F5 | 	and	result1, #63
1c8bc     80 16 06 F6 | 	mov	arg03, #128
1c8c0     FD 16 42 F5 | 	or	arg03, result1
1c8c4     0A 17 42 FC | 	wrbyte	arg03, arg02
1c8c8     01 14 06 F1 | 	add	arg02, #1
1c8cc     3F 12 06 F5 | 	and	arg01, #63
1c8d0     80 FA 05 F6 | 	mov	result1, #128
1c8d4     09 FB 41 F5 | 	or	result1, arg01
1c8d8     0A FB 41 FC | 	wrbyte	result1, arg02
1c8dc                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
1c8dc                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
1c8dc                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1c8dc                 | ' 		return 3;
1c8dc     03 FA 05 F6 | 	mov	result1, #3
1c8e0     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1c8e4                 | LR__3154
1c8e4     04 16 16 F2 | 	cmp	arg03, #4 wc
1c8e8     00 FA 05 C6 |  if_b	mov	result1, #0
1c8ec     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1c8f0     09 01 02 F6 | 	mov	_var01, arg01
1c8f4     E0 01 06 F4 | 	bitl	_var01, #480
1c8f8     00 00 6C FF 
1c8fc     00 00 86 F1 | 	sub	_var01, ##-671088640
1c900     06 00 46 F0 | 	shr	_var01, #6
1c904     09 13 32 F9 | 	getword	arg01, arg01, #0
1c908     6E 00 00 FF 
1c90c     00 12 86 F1 | 	sub	arg01, ##56320
1c910     00 08 00 FF 
1c914     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
1c918     02 00 00 CF 
1c91c     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
1c920     00 FA 05 36 |  if_ae	mov	result1, #0
1c924     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
1c928     09 01 42 F5 | 	or	_var01, arg01
1c92c     80 00 00 FF 
1c930     00 00 06 F1 | 	add	_var01, ##65536
1c934     00 FB 01 F6 | 	mov	result1, _var01
1c938     12 FA 45 F0 | 	shr	result1, #18
1c93c     07 FA 05 F5 | 	and	result1, #7
1c940     F0 16 06 F6 | 	mov	arg03, #240
1c944     FD 16 42 F5 | 	or	arg03, result1
1c948     0A 17 42 FC | 	wrbyte	arg03, arg02
1c94c     01 14 06 F1 | 	add	arg02, #1
1c950     00 FB 01 F6 | 	mov	result1, _var01
1c954     0C FA 45 F0 | 	shr	result1, #12
1c958     3F FA 05 F5 | 	and	result1, #63
1c95c     80 16 06 F6 | 	mov	arg03, #128
1c960     FD 16 42 F5 | 	or	arg03, result1
1c964     0A 17 42 FC | 	wrbyte	arg03, arg02
1c968     01 14 06 F1 | 	add	arg02, #1
1c96c     00 FB 01 F6 | 	mov	result1, _var01
1c970     06 FA 45 F0 | 	shr	result1, #6
1c974     3F FA 05 F5 | 	and	result1, #63
1c978     80 16 06 F6 | 	mov	arg03, #128
1c97c     FD 16 42 F5 | 	or	arg03, result1
1c980     0A 17 42 FC | 	wrbyte	arg03, arg02
1c984     01 14 06 F1 | 	add	arg02, #1
1c988     3F 00 06 F5 | 	and	_var01, #63
1c98c     80 FA 05 F6 | 	mov	result1, #128
1c990     00 FB 41 F5 | 	or	result1, _var01
1c994     0A FB 41 FC | 	wrbyte	result1, arg02
1c998                 | ' 	chr = (hc | chr) + 0x10000;
1c998                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
1c998                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
1c998                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
1c998                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1c998                 | ' 	return 4;
1c998     04 FA 05 F6 | 	mov	result1, #4
1c99c                 | _fatfs_cc_put_utf_ret
1c99c     2D 00 64 FD | 	ret
1c9a0                 | 
1c9a0                 | _fatfs_cc_sync_window
1c9a0     02 4A 05 F6 | 	mov	COUNT_, #2
1c9a4     A8 00 A0 FD | 	call	#pushregs_
1c9a8     09 1F 02 F6 | 	mov	local01, arg01
1c9ac     00 20 06 F6 | 	mov	local02, #0
1c9b0     03 1E 06 F1 | 	add	local01, #3
1c9b4     0F FB C9 FA | 	rdbyte	result1, local01 wz
1c9b8     03 1E 86 F1 | 	sub	local01, #3
1c9bc     A4 00 90 AD |  if_e	jmp	#LR__3162
1c9c0     01 1E 06 F1 | 	add	local01, #1
1c9c4     0F 13 C2 FA | 	rdbyte	arg01, local01
1c9c8     33 1E 06 F1 | 	add	local01, #51
1c9cc     0F 15 02 F6 | 	mov	arg02, local01
1c9d0     04 1E 86 F1 | 	sub	local01, #4
1c9d4     0F 17 02 FB | 	rdlong	arg03, local01
1c9d8     30 1E 86 F1 | 	sub	local01, #48
1c9dc     01 18 06 F6 | 	mov	arg04, #1
1c9e0     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
1c9e4     00 FA 0D F2 | 	cmp	result1, #0 wz
1c9e8     74 00 90 5D |  if_ne	jmp	#LR__3160
1c9ec     03 1E 06 F1 | 	add	local01, #3
1c9f0     0F 01 48 FC | 	wrbyte	#0, local01
1c9f4     2D 1E 06 F1 | 	add	local01, #45
1c9f8     0F FB 01 FB | 	rdlong	result1, local01
1c9fc     0C 1E 86 F1 | 	sub	local01, #12
1ca00     0F 19 02 FB | 	rdlong	arg04, local01
1ca04     0C FB 81 F1 | 	sub	result1, arg04
1ca08     08 1E 86 F1 | 	sub	local01, #8
1ca0c     0F 19 02 FB | 	rdlong	arg04, local01
1ca10     1C 1E 86 F1 | 	sub	local01, #28
1ca14     0C FB 11 F2 | 	cmp	result1, arg04 wc
1ca18     48 00 90 3D |  if_ae	jmp	#LR__3161
1ca1c     02 1E 06 F1 | 	add	local01, #2
1ca20     0F 19 C2 FA | 	rdbyte	arg04, local01
1ca24     02 1E 86 F1 | 	sub	local01, #2
1ca28     02 18 0E F2 | 	cmp	arg04, #2 wz
1ca2c     34 00 90 5D |  if_ne	jmp	#LR__3161
1ca30     01 1E 06 F1 | 	add	local01, #1
1ca34     0F 13 C2 FA | 	rdbyte	arg01, local01
1ca38     33 1E 06 F1 | 	add	local01, #51
1ca3c     0F 15 02 F6 | 	mov	arg02, local01
1ca40     04 1E 86 F1 | 	sub	local01, #4
1ca44     0F 17 02 FB | 	rdlong	arg03, local01
1ca48     14 1E 86 F1 | 	sub	local01, #20
1ca4c     0F 1F 02 FB | 	rdlong	local01, local01
1ca50     0F 17 02 F1 | 	add	arg03, local01
1ca54     01 18 06 F6 | 	mov	arg04, #1
1ca58     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
1ca5c     04 00 90 FD | 	jmp	#LR__3161
1ca60                 | LR__3160
1ca60     01 20 06 F6 | 	mov	local02, #1
1ca64                 | LR__3161
1ca64                 | LR__3162
1ca64                 | ' 			res = FR_DISK_ERR;
1ca64                 | ' 		}
1ca64                 | ' 	}
1ca64                 | ' 	return res;
1ca64     10 FB 01 F6 | 	mov	result1, local02
1ca68     A7 F0 03 F6 | 	mov	ptra, fp
1ca6c     B2 00 A0 FD | 	call	#popregs_
1ca70                 | _fatfs_cc_sync_window_ret
1ca70     2D 00 64 FD | 	ret
1ca74                 | 
1ca74                 | _fatfs_cc_move_window
1ca74     03 4A 05 F6 | 	mov	COUNT_, #3
1ca78     A8 00 A0 FD | 	call	#pushregs_
1ca7c     09 1F 02 F6 | 	mov	local01, arg01
1ca80     0A 21 02 F6 | 	mov	local02, arg02
1ca84     00 22 06 F6 | 	mov	local03, #0
1ca88     30 1E 06 F1 | 	add	local01, #48
1ca8c     0F 19 02 FB | 	rdlong	arg04, local01
1ca90     30 1E 86 F1 | 	sub	local01, #48
1ca94     0C 21 0A F2 | 	cmp	local02, arg04 wz
1ca98     40 00 90 AD |  if_e	jmp	#LR__3171
1ca9c     0F 13 02 F6 | 	mov	arg01, local01
1caa0     FC FE BF FD | 	call	#_fatfs_cc_sync_window
1caa4     FD 22 0A F6 | 	mov	local03, result1 wz
1caa8     30 00 90 5D |  if_ne	jmp	#LR__3170
1caac     01 1E 06 F1 | 	add	local01, #1
1cab0     0F 13 C2 FA | 	rdbyte	arg01, local01
1cab4     33 1E 06 F1 | 	add	local01, #51
1cab8     0F 15 02 F6 | 	mov	arg02, local01
1cabc     10 17 02 F6 | 	mov	arg03, local02
1cac0     01 18 06 F6 | 	mov	arg04, #1
1cac4     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
1cac8     00 FA 0D F2 | 	cmp	result1, #0 wz
1cacc     01 20 66 56 |  if_ne	neg	local02, #1
1cad0     01 22 06 56 |  if_ne	mov	local03, #1
1cad4     04 1E 86 F1 | 	sub	local01, #4
1cad8     0F 21 62 FC | 	wrlong	local02, local01
1cadc                 | LR__3170
1cadc                 | LR__3171
1cadc                 | ' 				sect = (LBA_t)0 - 1;
1cadc                 | ' 				res = FR_DISK_ERR;
1cadc                 | ' 			}
1cadc                 | ' 			fs->winsect = sect;
1cadc                 | ' 		}
1cadc                 | ' 	}
1cadc                 | ' 	return res;
1cadc     11 FB 01 F6 | 	mov	result1, local03
1cae0     A7 F0 03 F6 | 	mov	ptra, fp
1cae4     B2 00 A0 FD | 	call	#popregs_
1cae8                 | _fatfs_cc_move_window_ret
1cae8     2D 00 64 FD | 	ret
1caec                 | 
1caec                 | _fatfs_cc_sync_fs
1caec     02 4A 05 F6 | 	mov	COUNT_, #2
1caf0     A8 00 A0 FD | 	call	#pushregs_
1caf4     09 1F 02 F6 | 	mov	local01, arg01
1caf8     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
1cafc     FD 20 0A F6 | 	mov	local02, result1 wz
1cb00     D8 00 90 5D |  if_ne	jmp	#LR__3181
1cb04     0F 19 C2 FA | 	rdbyte	arg04, local01
1cb08     03 18 0E F2 | 	cmp	arg04, #3 wz
1cb0c     04 1E 06 A1 |  if_e	add	local01, #4
1cb10     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
1cb14     04 1E 86 A1 |  if_e	sub	local01, #4
1cb18     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
1cb1c     A0 00 90 5D |  if_ne	jmp	#LR__3180
1cb20     34 1E 06 F1 | 	add	local01, #52
1cb24     0F 13 02 F6 | 	mov	arg01, local01
1cb28     00 14 06 F6 | 	mov	arg02, #0
1cb2c     09 16 C6 F9 | 	decod	arg03, #9
1cb30     98 00 A0 FD | 	call	#\builtin_bytefill_
1cb34     0F 13 02 F6 | 	mov	arg01, local01
1cb38     FE 13 06 F1 | 	add	arg01, #510
1cb3c     55 00 80 FF 
1cb40     09 AB 58 FC | 	wrword	##43605, arg01
1cb44     A9 B0 A0 FF 
1cb48     0F A5 68 FC | 	wrlong	##1096897106, local01
1cb4c     0F 13 02 F6 | 	mov	arg01, local01
1cb50     E4 13 06 F1 | 	add	arg01, #484
1cb54     B9 A0 B0 FF 
1cb58     09 E5 68 FC | 	wrlong	##1631679090, arg01
1cb5c     0F 13 02 F6 | 	mov	arg01, local01
1cb60     E8 13 06 F1 | 	add	arg01, #488
1cb64     20 1E 86 F1 | 	sub	local01, #32
1cb68     0F 15 02 FB | 	rdlong	arg02, local01
1cb6c     09 15 62 FC | 	wrlong	arg02, arg01
1cb70     20 1E 06 F1 | 	add	local01, #32
1cb74     0F 13 02 F6 | 	mov	arg01, local01
1cb78     EC 13 06 F1 | 	add	arg01, #492
1cb7c     24 1E 86 F1 | 	sub	local01, #36
1cb80     0F 15 02 FB | 	rdlong	arg02, local01
1cb84     09 15 62 FC | 	wrlong	arg02, arg01
1cb88     10 1E 06 F1 | 	add	local01, #16
1cb8c     0F 17 02 FB | 	rdlong	arg03, local01
1cb90     01 16 06 F1 | 	add	arg03, #1
1cb94     10 1E 06 F1 | 	add	local01, #16
1cb98     0F 17 62 FC | 	wrlong	arg03, local01
1cb9c     2F 1E 86 F1 | 	sub	local01, #47
1cba0     0F 13 C2 FA | 	rdbyte	arg01, local01
1cba4     33 1E 06 F1 | 	add	local01, #51
1cba8     0F 15 02 F6 | 	mov	arg02, local01
1cbac     01 18 06 F6 | 	mov	arg04, #1
1cbb0     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
1cbb4     30 1E 86 F1 | 	sub	local01, #48
1cbb8     0F 01 48 FC | 	wrbyte	#0, local01
1cbbc     04 1E 86 F1 | 	sub	local01, #4
1cbc0                 | LR__3180
1cbc0     01 1E 06 F1 | 	add	local01, #1
1cbc4     0F 13 C2 FA | 	rdbyte	arg01, local01
1cbc8     00 14 06 F6 | 	mov	arg02, #0
1cbcc     00 16 06 F6 | 	mov	arg03, #0
1cbd0     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
1cbd4     00 FA 0D F2 | 	cmp	result1, #0 wz
1cbd8     01 20 06 56 |  if_ne	mov	local02, #1
1cbdc                 | LR__3181
1cbdc                 | ' 	}
1cbdc                 | ' 
1cbdc                 | ' 	return res;
1cbdc     10 FB 01 F6 | 	mov	result1, local02
1cbe0     A7 F0 03 F6 | 	mov	ptra, fp
1cbe4     B2 00 A0 FD | 	call	#popregs_
1cbe8                 | _fatfs_cc_sync_fs_ret
1cbe8     2D 00 64 FD | 	ret
1cbec                 | 
1cbec                 | _fatfs_cc_clst2sect
1cbec     02 14 86 F1 | 	sub	arg02, #2
1cbf0     18 12 06 F1 | 	add	arg01, #24
1cbf4     09 01 02 FB | 	rdlong	_var01, arg01
1cbf8     18 12 86 F1 | 	sub	arg01, #24
1cbfc     02 00 86 F1 | 	sub	_var01, #2
1cc00     00 15 12 F2 | 	cmp	arg02, _var01 wc
1cc04     00 FA 05 36 |  if_ae	mov	result1, #0
1cc08     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
1cc0c     0A 12 06 F1 | 	add	arg01, #10
1cc10     09 01 E2 FA | 	rdword	_var01, arg01
1cc14     0A 01 02 FD | 	qmul	_var01, arg02
1cc18                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
1cc18     22 12 06 F1 | 	add	arg01, #34
1cc1c     09 FB 01 FB | 	rdlong	result1, arg01
1cc20     18 00 62 FD | 	getqx	_var01
1cc24     00 FB 01 F1 | 	add	result1, _var01
1cc28                 | _fatfs_cc_clst2sect_ret
1cc28     2D 00 64 FD | 	ret
1cc2c                 | 
1cc2c                 | _fatfs_cc_get_fat
1cc2c     07 4A 05 F6 | 	mov	COUNT_, #7
1cc30     A8 00 A0 FD | 	call	#pushregs_
1cc34     0A 1F 02 F6 | 	mov	local01, arg02
1cc38     09 21 02 FB | 	rdlong	local02, arg01
1cc3c     02 1E 16 F2 | 	cmp	local01, #2 wc
1cc40     14 00 90 CD |  if_b	jmp	#LR__3190
1cc44     18 20 06 F1 | 	add	local02, #24
1cc48     10 23 02 FB | 	rdlong	local03, local02
1cc4c     18 20 86 F1 | 	sub	local02, #24
1cc50     11 1F 12 F2 | 	cmp	local01, local03 wc
1cc54     08 00 90 CD |  if_b	jmp	#LR__3191
1cc58                 | LR__3190
1cc58     01 24 06 F6 | 	mov	local04, #1
1cc5c     60 01 90 FD | 	jmp	#LR__3198
1cc60                 | LR__3191
1cc60     01 24 66 F6 | 	neg	local04, #1
1cc64                 | ' 		val = 0xFFFFFFFF;
1cc64                 | ' 
1cc64                 | ' 		switch (fs->fs_type) {
1cc64     10 27 C2 FA | 	rdbyte	local05, local02
1cc68     01 26 86 F1 | 	sub	local05, #1
1cc6c     03 26 26 F3 | 	fle	local05, #3
1cc70     30 26 62 FD | 	jmprel	local05
1cc74                 | LR__3192
1cc74     0C 00 90 FD | 	jmp	#LR__3193
1cc78     B8 00 90 FD | 	jmp	#LR__3194
1cc7c     F8 00 90 FD | 	jmp	#LR__3195
1cc80     38 01 90 FD | 	jmp	#LR__3196
1cc84                 | LR__3193
1cc84     0F 27 02 F6 | 	mov	local05, local01
1cc88     0F 13 02 F6 | 	mov	arg01, local01
1cc8c     01 12 46 F0 | 	shr	arg01, #1
1cc90     09 27 02 F1 | 	add	local05, arg01
1cc94     10 13 02 F6 | 	mov	arg01, local02
1cc98     13 29 02 F6 | 	mov	local06, local05
1cc9c     09 28 46 F0 | 	shr	local06, #9
1cca0     24 20 06 F1 | 	add	local02, #36
1cca4     10 15 02 FB | 	rdlong	arg02, local02
1cca8     24 20 86 F1 | 	sub	local02, #36
1ccac     14 15 02 F1 | 	add	arg02, local06
1ccb0     C0 FD BF FD | 	call	#_fatfs_cc_move_window
1ccb4     00 FA 0D F2 | 	cmp	result1, #0 wz
1ccb8     04 01 90 5D |  if_ne	jmp	#LR__3197
1ccbc     13 29 02 F6 | 	mov	local06, local05
1ccc0     FF 29 06 F5 | 	and	local06, #511
1ccc4     34 20 06 F1 | 	add	local02, #52
1ccc8     10 29 02 F1 | 	add	local06, local02
1cccc     14 2B C2 FA | 	rdbyte	local07, local06
1ccd0     34 20 86 F1 | 	sub	local02, #52
1ccd4     10 13 02 F6 | 	mov	arg01, local02
1ccd8     01 26 06 F1 | 	add	local05, #1
1ccdc     13 29 02 F6 | 	mov	local06, local05
1cce0     09 28 46 F0 | 	shr	local06, #9
1cce4     24 20 06 F1 | 	add	local02, #36
1cce8     10 15 02 FB | 	rdlong	arg02, local02
1ccec     24 20 86 F1 | 	sub	local02, #36
1ccf0     14 15 02 F1 | 	add	arg02, local06
1ccf4     7C FD BF FD | 	call	#_fatfs_cc_move_window
1ccf8     00 FA 0D F2 | 	cmp	result1, #0 wz
1ccfc     C0 00 90 5D |  if_ne	jmp	#LR__3197
1cd00     FF 27 06 F5 | 	and	local05, #511
1cd04     34 20 06 F1 | 	add	local02, #52
1cd08     10 27 02 F1 | 	add	local05, local02
1cd0c     13 29 C2 FA | 	rdbyte	local06, local05
1cd10     08 28 66 F0 | 	shl	local06, #8
1cd14     14 2B 42 F5 | 	or	local07, local06
1cd18     01 1E CE F7 | 	test	local01, #1 wz
1cd1c     04 2A 46 50 |  if_ne	shr	local07, #4
1cd20     15 23 02 56 |  if_ne	mov	local03, local07
1cd24     0B 2A 46 A7 |  if_e	zerox	local07, #11
1cd28     15 23 02 A6 |  if_e	mov	local03, local07
1cd2c     11 25 02 F6 | 	mov	local04, local03
1cd30                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
1cd30                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
1cd30                 | ' 			break;
1cd30     8C 00 90 FD | 	jmp	#LR__3197
1cd34                 | LR__3194
1cd34     10 13 02 F6 | 	mov	arg01, local02
1cd38     0F 29 02 F6 | 	mov	local06, local01
1cd3c     08 28 46 F0 | 	shr	local06, #8
1cd40     24 20 06 F1 | 	add	local02, #36
1cd44     10 15 02 FB | 	rdlong	arg02, local02
1cd48     24 20 86 F1 | 	sub	local02, #36
1cd4c     14 15 02 F1 | 	add	arg02, local06
1cd50     20 FD BF FD | 	call	#_fatfs_cc_move_window
1cd54     00 FA 0D F2 | 	cmp	result1, #0 wz
1cd58     64 00 90 5D |  if_ne	jmp	#LR__3197
1cd5c     34 20 06 F1 | 	add	local02, #52
1cd60     01 1E 66 F0 | 	shl	local01, #1
1cd64     FF 1F 06 F5 | 	and	local01, #511
1cd68     0F 21 02 F1 | 	add	local02, local01
1cd6c                 | ' {
1cd6c                 | ' 
1cd6c                 | ' 	return *((WORD*)ptr);
1cd6c     10 FB E1 FA | 	rdword	result1, local02
1cd70     FD 24 32 F9 | 	getword	local04, result1, #0
1cd74                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
1cd74                 | ' 			break;
1cd74     48 00 90 FD | 	jmp	#LR__3197
1cd78                 | LR__3195
1cd78     10 13 02 F6 | 	mov	arg01, local02
1cd7c     0F 29 02 F6 | 	mov	local06, local01
1cd80     07 28 46 F0 | 	shr	local06, #7
1cd84     24 20 06 F1 | 	add	local02, #36
1cd88     10 15 02 FB | 	rdlong	arg02, local02
1cd8c     24 20 86 F1 | 	sub	local02, #36
1cd90     14 15 02 F1 | 	add	arg02, local06
1cd94     DC FC BF FD | 	call	#_fatfs_cc_move_window
1cd98     00 FA 0D F2 | 	cmp	result1, #0 wz
1cd9c     20 00 90 5D |  if_ne	jmp	#LR__3197
1cda0     34 20 06 F1 | 	add	local02, #52
1cda4     02 1E 66 F0 | 	shl	local01, #2
1cda8     FF 1F 06 F5 | 	and	local01, #511
1cdac     0F 21 02 F1 | 	add	local02, local01
1cdb0                 | ' {
1cdb0                 | ' 
1cdb0                 | ' 	return *((DWORD*)ptr);
1cdb0     10 25 02 FB | 	rdlong	local04, local02
1cdb4     7C 24 06 F4 | 	bitl	local04, #124
1cdb8                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
1cdb8                 | ' 			break;
1cdb8     04 00 90 FD | 	jmp	#LR__3197
1cdbc                 | LR__3196
1cdbc     01 24 06 F6 | 	mov	local04, #1
1cdc0                 | LR__3197
1cdc0                 | LR__3198
1cdc0                 | ' 			val = 1;
1cdc0                 | ' 		}
1cdc0                 | ' 	}
1cdc0                 | ' 
1cdc0                 | ' 	return val;
1cdc0     12 FB 01 F6 | 	mov	result1, local04
1cdc4     A7 F0 03 F6 | 	mov	ptra, fp
1cdc8     B2 00 A0 FD | 	call	#popregs_
1cdcc                 | _fatfs_cc_get_fat_ret
1cdcc     2D 00 64 FD | 	ret
1cdd0                 | 
1cdd0                 | _fatfs_cc_put_fat
1cdd0     08 4A 05 F6 | 	mov	COUNT_, #8
1cdd4     A8 00 A0 FD | 	call	#pushregs_
1cdd8     09 1F 02 F6 | 	mov	local01, arg01
1cddc     0A 21 02 F6 | 	mov	local02, arg02
1cde0     0B 23 02 F6 | 	mov	local03, arg03
1cde4     02 24 06 F6 | 	mov	local04, #2
1cde8     02 20 16 F2 | 	cmp	local02, #2 wc
1cdec     E0 01 90 CD |  if_b	jmp	#LR__3207
1cdf0     18 1E 06 F1 | 	add	local01, #24
1cdf4     0F 27 02 FB | 	rdlong	local05, local01
1cdf8     18 1E 86 F1 | 	sub	local01, #24
1cdfc     13 21 12 F2 | 	cmp	local02, local05 wc
1ce00     CC 01 90 3D |  if_ae	jmp	#LR__3207
1ce04                 | ' 		switch (fs->fs_type) {
1ce04     0F 29 C2 FA | 	rdbyte	local06, local01
1ce08     01 28 86 F1 | 	sub	local06, #1
1ce0c     03 28 26 F3 | 	fle	local06, #3
1ce10     30 28 62 FD | 	jmprel	local06
1ce14                 | LR__3200
1ce14     0C 00 90 FD | 	jmp	#LR__3201
1ce18     F8 00 90 FD | 	jmp	#LR__3204
1ce1c     40 01 90 FD | 	jmp	#LR__3205
1ce20     AC 01 90 FD | 	jmp	#LR__3206
1ce24                 | LR__3201
1ce24     10 2B 02 F6 | 	mov	local07, local02
1ce28     10 27 02 F6 | 	mov	local05, local02
1ce2c     01 26 46 F0 | 	shr	local05, #1
1ce30     13 2B 02 F1 | 	add	local07, local05
1ce34     0F 13 02 F6 | 	mov	arg01, local01
1ce38     15 29 02 F6 | 	mov	local06, local07
1ce3c     09 28 46 F0 | 	shr	local06, #9
1ce40     24 1E 06 F1 | 	add	local01, #36
1ce44     0F 15 02 FB | 	rdlong	arg02, local01
1ce48     24 1E 86 F1 | 	sub	local01, #36
1ce4c     14 15 02 F1 | 	add	arg02, local06
1ce50     20 FC BF FD | 	call	#_fatfs_cc_move_window
1ce54     FD 24 0A F6 | 	mov	local04, result1 wz
1ce58     74 01 90 5D |  if_ne	jmp	#LR__3206
1ce5c     34 1E 06 F1 | 	add	local01, #52
1ce60     0F 2D 02 F6 | 	mov	local08, local01
1ce64     15 27 02 F6 | 	mov	local05, local07
1ce68     FF 27 06 F5 | 	and	local05, #511
1ce6c     13 2D 02 F1 | 	add	local08, local05
1ce70     01 20 CE F7 | 	test	local02, #1 wz
1ce74     34 1E 86 F1 | 	sub	local01, #52
1ce78     01 2A 06 F1 | 	add	local07, #1
1ce7c     18 00 90 AD |  if_e	jmp	#LR__3202
1ce80     16 27 C2 FA | 	rdbyte	local05, local08
1ce84     13 27 42 F8 | 	getnib	local05, local05, #0
1ce88     11 29 E2 F8 | 	getbyte	local06, local03, #0
1ce8c     04 28 66 F0 | 	shl	local06, #4
1ce90     14 27 42 F5 | 	or	local05, local06
1ce94     04 00 90 FD | 	jmp	#LR__3203
1ce98                 | LR__3202
1ce98     11 27 02 F6 | 	mov	local05, local03
1ce9c                 | LR__3203
1ce9c     16 27 42 FC | 	wrbyte	local05, local08
1cea0     03 1E 06 F1 | 	add	local01, #3
1cea4     0F 03 48 FC | 	wrbyte	#1, local01
1cea8     03 1E 86 F1 | 	sub	local01, #3
1ceac     0F 13 02 F6 | 	mov	arg01, local01
1ceb0     15 2D 02 F6 | 	mov	local08, local07
1ceb4     09 2C 46 F0 | 	shr	local08, #9
1ceb8     24 1E 06 F1 | 	add	local01, #36
1cebc     0F 15 02 FB | 	rdlong	arg02, local01
1cec0     24 1E 86 F1 | 	sub	local01, #36
1cec4     16 15 02 F1 | 	add	arg02, local08
1cec8     A8 FB BF FD | 	call	#_fatfs_cc_move_window
1cecc     FD 24 0A F6 | 	mov	local04, result1 wz
1ced0     FC 00 90 5D |  if_ne	jmp	#LR__3206
1ced4     34 1E 06 F1 | 	add	local01, #52
1ced8     0F 2D 02 F6 | 	mov	local08, local01
1cedc     FF 2B 06 F5 | 	and	local07, #511
1cee0     15 2D 02 F1 | 	add	local08, local07
1cee4     01 20 CE F7 | 	test	local02, #1 wz
1cee8     04 22 46 50 |  if_ne	shr	local03, #4
1ceec     11 27 02 56 |  if_ne	mov	local05, local03
1cef0     16 27 C2 AA |  if_e	rdbyte	local05, local08
1cef4     F0 26 06 A5 |  if_e	and	local05, #240
1cef8     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
1cefc     11 23 42 A8 |  if_e	getnib	local03, local03, #0
1cf00     11 27 42 A5 |  if_e	or	local05, local03
1cf04     16 27 42 FC | 	wrbyte	local05, local08
1cf08     31 1E 86 F1 | 	sub	local01, #49
1cf0c     0F 03 48 FC | 	wrbyte	#1, local01
1cf10                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
1cf10                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
1cf10                 | ' 			fs->wflag = 1;
1cf10                 | ' 			break;
1cf10     BC 00 90 FD | 	jmp	#LR__3206
1cf14                 | LR__3204
1cf14     0F 13 02 F6 | 	mov	arg01, local01
1cf18     10 2D 02 F6 | 	mov	local08, local02
1cf1c     08 2C 46 F0 | 	shr	local08, #8
1cf20     24 1E 06 F1 | 	add	local01, #36
1cf24     0F 15 02 FB | 	rdlong	arg02, local01
1cf28     24 1E 86 F1 | 	sub	local01, #36
1cf2c     16 15 02 F1 | 	add	arg02, local08
1cf30     40 FB BF FD | 	call	#_fatfs_cc_move_window
1cf34     FD 24 0A F6 | 	mov	local04, result1 wz
1cf38     94 00 90 5D |  if_ne	jmp	#LR__3206
1cf3c     34 1E 06 F1 | 	add	local01, #52
1cf40     0F 13 02 F6 | 	mov	arg01, local01
1cf44     01 20 66 F0 | 	shl	local02, #1
1cf48     FF 21 06 F5 | 	and	local02, #511
1cf4c     10 13 02 F1 | 	add	arg01, local02
1cf50     09 23 52 FC | 	wrword	local03, arg01
1cf54     31 1E 86 F1 | 	sub	local01, #49
1cf58     0F 03 48 FC | 	wrbyte	#1, local01
1cf5c                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
1cf5c                 | ' 			fs->wflag = 1;
1cf5c                 | ' 			break;
1cf5c     70 00 90 FD | 	jmp	#LR__3206
1cf60                 | LR__3205
1cf60     0F 13 02 F6 | 	mov	arg01, local01
1cf64     10 2D 02 F6 | 	mov	local08, local02
1cf68     07 2C 46 F0 | 	shr	local08, #7
1cf6c     24 1E 06 F1 | 	add	local01, #36
1cf70     0F 15 02 FB | 	rdlong	arg02, local01
1cf74     24 1E 86 F1 | 	sub	local01, #36
1cf78     16 15 02 F1 | 	add	arg02, local08
1cf7c     F4 FA BF FD | 	call	#_fatfs_cc_move_window
1cf80     FD 24 0A F6 | 	mov	local04, result1 wz
1cf84     48 00 90 5D |  if_ne	jmp	#LR__3206
1cf88     7C 22 06 F4 | 	bitl	local03, #124
1cf8c     34 1E 06 F1 | 	add	local01, #52
1cf90     10 2D 02 F6 | 	mov	local08, local02
1cf94     02 2C 66 F0 | 	shl	local08, #2
1cf98     FF 2D 06 F5 | 	and	local08, #511
1cf9c     0F 13 02 F6 | 	mov	arg01, local01
1cfa0     16 13 02 F1 | 	add	arg01, local08
1cfa4                 | ' {
1cfa4                 | ' 
1cfa4                 | ' 	return *((DWORD*)ptr);
1cfa4     09 2D 02 FB | 	rdlong	local08, arg01
1cfa8     00 00 78 FF 
1cfac     00 2C 06 F5 | 	and	local08, ##-268435456
1cfb0     16 23 42 F5 | 	or	local03, local08
1cfb4     0F 13 02 F6 | 	mov	arg01, local01
1cfb8     02 20 66 F0 | 	shl	local02, #2
1cfbc     FF 21 06 F5 | 	and	local02, #511
1cfc0     10 13 02 F1 | 	add	arg01, local02
1cfc4     09 23 62 FC | 	wrlong	local03, arg01
1cfc8     31 1E 86 F1 | 	sub	local01, #49
1cfcc     0F 03 48 FC | 	wrbyte	#1, local01
1cfd0                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
1cfd0                 | ' 			}
1cfd0                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
1cfd0                 | ' 			fs->wflag = 1;
1cfd0                 | ' 			break;
1cfd0                 | LR__3206
1cfd0                 | LR__3207
1cfd0                 | ' 		}
1cfd0                 | ' 	}
1cfd0                 | ' 	return res;
1cfd0     12 FB 01 F6 | 	mov	result1, local04
1cfd4     A7 F0 03 F6 | 	mov	ptra, fp
1cfd8     B2 00 A0 FD | 	call	#popregs_
1cfdc                 | _fatfs_cc_put_fat_ret
1cfdc     2D 00 64 FD | 	ret
1cfe0                 | 
1cfe0                 | _fatfs_cc_remove_chain
1cfe0     05 4A 05 F6 | 	mov	COUNT_, #5
1cfe4     A8 00 A0 FD | 	call	#pushregs_
1cfe8     09 1F 02 F6 | 	mov	local01, arg01
1cfec     0A 21 02 F6 | 	mov	local02, arg02
1cff0     0B 23 02 F6 | 	mov	local03, arg03
1cff4     0F 25 02 FB | 	rdlong	local04, local01
1cff8     02 20 16 F2 | 	cmp	local02, #2 wc
1cffc     14 00 90 CD |  if_b	jmp	#LR__3210
1d000     18 24 06 F1 | 	add	local04, #24
1d004     12 FB 01 FB | 	rdlong	result1, local04
1d008     18 24 86 F1 | 	sub	local04, #24
1d00c     FD 20 12 F2 | 	cmp	local02, result1 wc
1d010     08 00 90 CD |  if_b	jmp	#LR__3211
1d014                 | LR__3210
1d014     02 FA 05 F6 | 	mov	result1, #2
1d018     CC 00 90 FD | 	jmp	#LR__3216
1d01c                 | LR__3211
1d01c     00 22 0E F2 | 	cmp	local03, #0 wz
1d020     18 00 90 AD |  if_e	jmp	#LR__3212
1d024     11 15 02 F6 | 	mov	arg02, local03
1d028     12 13 02 F6 | 	mov	arg01, local04
1d02c     01 16 66 F6 | 	neg	arg03, #1
1d030     9C FD BF FD | 	call	#_fatfs_cc_put_fat
1d034     00 FA 0D F2 | 	cmp	result1, #0 wz
1d038     AC 00 90 5D |  if_ne	jmp	#LR__3216
1d03c                 | LR__3212
1d03c                 | ' 	}
1d03c                 | ' 
1d03c                 | ' 
1d03c                 | ' 	do {
1d03c                 | LR__3213
1d03c     10 15 02 F6 | 	mov	arg02, local02
1d040     0F 13 02 F6 | 	mov	arg01, local01
1d044     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
1d048     FD 26 0A F6 | 	mov	local05, result1 wz
1d04c     94 00 90 AD |  if_e	jmp	#LR__3215
1d050     01 26 0E F2 | 	cmp	local05, #1 wz
1d054     02 FA 05 A6 |  if_e	mov	result1, #2
1d058     8C 00 90 AD |  if_e	jmp	#LR__3216
1d05c     FF FF 7F FF 
1d060     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1d064     01 FA 05 A6 |  if_e	mov	result1, #1
1d068     7C 00 90 AD |  if_e	jmp	#LR__3216
1d06c     10 15 02 F6 | 	mov	arg02, local02
1d070     12 13 02 F6 | 	mov	arg01, local04
1d074     00 16 06 F6 | 	mov	arg03, #0
1d078     54 FD BF FD | 	call	#_fatfs_cc_put_fat
1d07c     FD 22 0A F6 | 	mov	local03, result1 wz
1d080     11 FB 01 56 |  if_ne	mov	result1, local03
1d084     60 00 90 5D |  if_ne	jmp	#LR__3216
1d088     18 24 06 F1 | 	add	local04, #24
1d08c     12 23 02 FB | 	rdlong	local03, local04
1d090     02 22 86 F1 | 	sub	local03, #2
1d094     04 24 86 F1 | 	sub	local04, #4
1d098     12 21 02 FB | 	rdlong	local02, local04
1d09c     14 24 86 F1 | 	sub	local04, #20
1d0a0     11 21 12 F2 | 	cmp	local02, local03 wc
1d0a4     24 00 90 3D |  if_ae	jmp	#LR__3214
1d0a8     14 24 06 F1 | 	add	local04, #20
1d0ac     12 23 02 FB | 	rdlong	local03, local04
1d0b0     01 22 06 F1 | 	add	local03, #1
1d0b4     12 23 62 FC | 	wrlong	local03, local04
1d0b8     10 24 86 F1 | 	sub	local04, #16
1d0bc     12 23 C2 FA | 	rdbyte	local03, local04
1d0c0     01 22 46 F5 | 	or	local03, #1
1d0c4     12 23 42 FC | 	wrbyte	local03, local04
1d0c8     04 24 86 F1 | 	sub	local04, #4
1d0cc                 | LR__3214
1d0cc     13 21 02 F6 | 	mov	local02, local05
1d0d0     18 24 06 F1 | 	add	local04, #24
1d0d4     12 27 02 FB | 	rdlong	local05, local04
1d0d8     18 24 86 F1 | 	sub	local04, #24
1d0dc     13 21 12 F2 | 	cmp	local02, local05 wc
1d0e0     58 FF 9F CD |  if_b	jmp	#LR__3213
1d0e4                 | LR__3215
1d0e4                 | ' #line 1500 "ff.c"
1d0e4                 | ' 	return FR_OK;
1d0e4     00 FA 05 F6 | 	mov	result1, #0
1d0e8                 | LR__3216
1d0e8     A7 F0 03 F6 | 	mov	ptra, fp
1d0ec     B2 00 A0 FD | 	call	#popregs_
1d0f0                 | _fatfs_cc_remove_chain_ret
1d0f0     2D 00 64 FD | 	ret
1d0f4                 | 
1d0f4                 | _fatfs_cc_create_chain
1d0f4     09 4A 05 F6 | 	mov	COUNT_, #9
1d0f8     A8 00 A0 FD | 	call	#pushregs_
1d0fc     09 1F 02 F6 | 	mov	local01, arg01
1d100     0A 21 0A F6 | 	mov	local02, arg02 wz
1d104     0F 23 02 FB | 	rdlong	local03, local01
1d108     28 00 90 5D |  if_ne	jmp	#LR__3220
1d10c     10 22 06 F1 | 	add	local03, #16
1d110     11 25 0A FB | 	rdlong	local04, local03 wz
1d114     10 22 86 F1 | 	sub	local03, #16
1d118     18 22 06 51 |  if_ne	add	local03, #24
1d11c     11 27 02 5B |  if_ne	rdlong	local05, local03
1d120     18 22 86 51 |  if_ne	sub	local03, #24
1d124     13 25 12 52 |  if_ne	cmp	local04, local05 wc
1d128     50 00 90 4D |  if_c_and_nz	jmp	#LR__3221
1d12c     01 24 06 F6 | 	mov	local04, #1
1d130     48 00 90 FD | 	jmp	#LR__3221
1d134                 | LR__3220
1d134     10 15 02 F6 | 	mov	arg02, local02
1d138     0F 13 02 F6 | 	mov	arg01, local01
1d13c     EC FA BF FD | 	call	#_fatfs_cc_get_fat
1d140     FD 24 02 F6 | 	mov	local04, result1
1d144     02 24 16 F2 | 	cmp	local04, #2 wc
1d148     01 FA 05 C6 |  if_b	mov	result1, #1
1d14c     BC 01 90 CD |  if_b	jmp	#LR__3231
1d150     FF FF 7F FF 
1d154     FF 25 0E F2 | 	cmp	local04, ##-1 wz
1d158     12 FB 01 A6 |  if_e	mov	result1, local04
1d15c     AC 01 90 AD |  if_e	jmp	#LR__3231
1d160     18 22 06 F1 | 	add	local03, #24
1d164     11 27 02 FB | 	rdlong	local05, local03
1d168     18 22 86 F1 | 	sub	local03, #24
1d16c     13 25 12 F2 | 	cmp	local04, local05 wc
1d170     12 FB 01 C6 |  if_b	mov	result1, local04
1d174     94 01 90 CD |  if_b	jmp	#LR__3231
1d178     10 25 02 F6 | 	mov	local04, local02
1d17c                 | LR__3221
1d17c     14 22 06 F1 | 	add	local03, #20
1d180     11 27 0A FB | 	rdlong	local05, local03 wz
1d184     14 22 86 F1 | 	sub	local03, #20
1d188     00 FA 05 A6 |  if_e	mov	result1, #0
1d18c     7C 01 90 AD |  if_e	jmp	#LR__3231
1d190     00 28 06 F6 | 	mov	local06, #0
1d194     10 25 0A F2 | 	cmp	local04, local02 wz
1d198     74 00 90 5D |  if_ne	jmp	#LR__3224
1d19c     12 29 02 F6 | 	mov	local06, local04
1d1a0     01 28 06 F1 | 	add	local06, #1
1d1a4     18 22 06 F1 | 	add	local03, #24
1d1a8     11 27 02 FB | 	rdlong	local05, local03
1d1ac     18 22 86 F1 | 	sub	local03, #24
1d1b0     13 29 12 F2 | 	cmp	local06, local05 wc
1d1b4     02 28 06 36 |  if_ae	mov	local06, #2
1d1b8     14 15 02 F6 | 	mov	arg02, local06
1d1bc     0F 13 02 F6 | 	mov	arg01, local01
1d1c0     68 FA BF FD | 	call	#_fatfs_cc_get_fat
1d1c4     FD 26 02 F6 | 	mov	local05, result1
1d1c8     01 26 0E F2 | 	cmp	local05, #1 wz
1d1cc     FF FF 7F 5F 
1d1d0     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
1d1d4     13 FB 01 A6 |  if_e	mov	result1, local05
1d1d8     30 01 90 AD |  if_e	jmp	#LR__3231
1d1dc     00 26 0E F2 | 	cmp	local05, #0 wz
1d1e0     2C 00 90 AD |  if_e	jmp	#LR__3223
1d1e4     10 22 06 F1 | 	add	local03, #16
1d1e8     11 2B 02 FB | 	rdlong	local07, local03
1d1ec     10 22 86 F1 | 	sub	local03, #16
1d1f0     02 2A 16 F2 | 	cmp	local07, #2 wc
1d1f4     14 00 90 CD |  if_b	jmp	#LR__3222
1d1f8     18 22 06 F1 | 	add	local03, #24
1d1fc     11 27 02 FB | 	rdlong	local05, local03
1d200     18 22 86 F1 | 	sub	local03, #24
1d204     13 2B 12 F2 | 	cmp	local07, local05 wc
1d208     15 25 02 C6 |  if_b	mov	local04, local07
1d20c                 | LR__3222
1d20c     00 28 06 F6 | 	mov	local06, #0
1d210                 | LR__3223
1d210                 | LR__3224
1d210     00 28 0E F2 | 	cmp	local06, #0 wz
1d214     60 00 90 5D |  if_ne	jmp	#LR__3227
1d218     12 29 02 F6 | 	mov	local06, local04
1d21c                 | ' 			ncl = scl;
1d21c                 | ' 			for (;;) {
1d21c                 | LR__3225
1d21c     01 28 06 F1 | 	add	local06, #1
1d220     18 22 06 F1 | 	add	local03, #24
1d224     11 27 02 FB | 	rdlong	local05, local03
1d228     18 22 86 F1 | 	sub	local03, #24
1d22c     13 29 12 F2 | 	cmp	local06, local05 wc
1d230     02 28 06 36 |  if_ae	mov	local06, #2
1d234     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
1d238     00 FA 05 16 |  if_a	mov	result1, #0
1d23c     CC 00 90 1D |  if_a	jmp	#LR__3231
1d240     14 15 02 F6 | 	mov	arg02, local06
1d244     0F 13 02 F6 | 	mov	arg01, local01
1d248     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
1d24c     FD 2A 0A F6 | 	mov	local07, result1 wz
1d250     24 00 90 AD |  if_e	jmp	#LR__3226
1d254     01 2A 0E F2 | 	cmp	local07, #1 wz
1d258     FF FF 7F 5F 
1d25c     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
1d260     15 FB 01 A6 |  if_e	mov	result1, local07
1d264     A4 00 90 AD |  if_e	jmp	#LR__3231
1d268     12 29 0A F2 | 	cmp	local06, local04 wz
1d26c     00 FA 05 A6 |  if_e	mov	result1, #0
1d270     98 00 90 AD |  if_e	jmp	#LR__3231
1d274     A4 FF 9F FD | 	jmp	#LR__3225
1d278                 | LR__3226
1d278                 | LR__3227
1d278     11 13 02 F6 | 	mov	arg01, local03
1d27c     14 15 02 F6 | 	mov	arg02, local06
1d280     01 16 66 F6 | 	neg	arg03, #1
1d284     48 FB BF FD | 	call	#_fatfs_cc_put_fat
1d288     FD 2C 0A F6 | 	mov	local08, result1 wz
1d28c     1C 00 90 5D |  if_ne	jmp	#LR__3228
1d290     00 20 0E F2 | 	cmp	local02, #0 wz
1d294     14 00 90 AD |  if_e	jmp	#LR__3228
1d298     11 13 02 F6 | 	mov	arg01, local03
1d29c     10 15 02 F6 | 	mov	arg02, local02
1d2a0     14 17 02 F6 | 	mov	arg03, local06
1d2a4     28 FB BF FD | 	call	#_fatfs_cc_put_fat
1d2a8     FD 2C 02 F6 | 	mov	local08, result1
1d2ac                 | LR__3228
1d2ac     00 2C 0E F2 | 	cmp	local08, #0 wz
1d2b0     4C 00 90 5D |  if_ne	jmp	#LR__3229
1d2b4     10 22 06 F1 | 	add	local03, #16
1d2b8     11 29 62 FC | 	wrlong	local06, local03
1d2bc     08 22 06 F1 | 	add	local03, #8
1d2c0     11 27 02 FB | 	rdlong	local05, local03
1d2c4     02 26 86 F1 | 	sub	local05, #2
1d2c8     04 22 86 F1 | 	sub	local03, #4
1d2cc     11 2F 02 FB | 	rdlong	local09, local03
1d2d0     14 22 86 F1 | 	sub	local03, #20
1d2d4     13 2F 1A F2 | 	cmp	local09, local05 wcz
1d2d8     14 22 06 E1 |  if_be	add	local03, #20
1d2dc     11 2F 02 EB |  if_be	rdlong	local09, local03
1d2e0     01 2E 86 E1 |  if_be	sub	local09, #1
1d2e4     11 2F 62 EC |  if_be	wrlong	local09, local03
1d2e8     14 22 86 E1 |  if_be	sub	local03, #20
1d2ec     04 22 06 F1 | 	add	local03, #4
1d2f0     11 27 C2 FA | 	rdbyte	local05, local03
1d2f4     01 26 46 F5 | 	or	local05, #1
1d2f8     11 27 42 FC | 	wrbyte	local05, local03
1d2fc     08 00 90 FD | 	jmp	#LR__3230
1d300                 | LR__3229
1d300     01 2C 0E F2 | 	cmp	local08, #1 wz
1d304     01 28 C6 F6 | 	negz	local06, #1
1d308                 | LR__3230
1d308                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
1d308                 | ' 	}
1d308                 | ' 
1d308                 | ' 	return ncl;
1d308     14 FB 01 F6 | 	mov	result1, local06
1d30c                 | LR__3231
1d30c     A7 F0 03 F6 | 	mov	ptra, fp
1d310     B2 00 A0 FD | 	call	#popregs_
1d314                 | _fatfs_cc_create_chain_ret
1d314     2D 00 64 FD | 	ret
1d318                 | 
1d318                 | _fatfs_cc_dir_clear
1d318     06 4A 05 F6 | 	mov	COUNT_, #6
1d31c     A8 00 A0 FD | 	call	#pushregs_
1d320     09 1F 02 F6 | 	mov	local01, arg01
1d324     0A 21 02 F6 | 	mov	local02, arg02
1d328     0F 13 02 F6 | 	mov	arg01, local01
1d32c     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
1d330     00 FA 0D F2 | 	cmp	result1, #0 wz
1d334     01 FA 05 56 |  if_ne	mov	result1, #1
1d338     90 00 90 5D |  if_ne	jmp	#LR__3242
1d33c     0F 13 02 F6 | 	mov	arg01, local01
1d340     10 15 02 F6 | 	mov	arg02, local02
1d344     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
1d348     FD 22 02 F6 | 	mov	local03, result1
1d34c     30 1E 06 F1 | 	add	local01, #48
1d350     0F 23 62 FC | 	wrlong	local03, local01
1d354     04 1E 06 F1 | 	add	local01, #4
1d358     0F 13 02 F6 | 	mov	arg01, local01
1d35c     00 14 06 F6 | 	mov	arg02, #0
1d360     09 16 C6 F9 | 	decod	arg03, #9
1d364     98 00 A0 FD | 	call	#\builtin_bytefill_
1d368     0F 25 02 F6 | 	mov	local04, local01
1d36c                 | ' #line 1667 "ff.c"
1d36c                 | ' 	{
1d36c                 | ' 		ibuf = fs->win; szb = 1;
1d36c                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
1d36c     00 26 06 F6 | 	mov	local05, #0
1d370     34 1E 86 F1 | 	sub	local01, #52
1d374                 | LR__3240
1d374     0A 1E 06 F1 | 	add	local01, #10
1d378     0F 29 E2 FA | 	rdword	local06, local01
1d37c     0A 1E 86 F1 | 	sub	local01, #10
1d380     14 27 12 F2 | 	cmp	local05, local06 wc
1d384     2C 00 90 3D |  if_ae	jmp	#LR__3241
1d388     01 1E 06 F1 | 	add	local01, #1
1d38c     0F 13 C2 FA | 	rdbyte	arg01, local01
1d390     01 1E 86 F1 | 	sub	local01, #1
1d394     12 15 02 F6 | 	mov	arg02, local04
1d398     11 17 02 F6 | 	mov	arg03, local03
1d39c     13 17 02 F1 | 	add	arg03, local05
1d3a0     01 18 06 F6 | 	mov	arg04, #1
1d3a4     9C EF BF FD | 	call	#_fatfs_cc_disk_write
1d3a8     00 FA 0D F2 | 	cmp	result1, #0 wz
1d3ac     01 26 06 A1 |  if_e	add	local05, #1
1d3b0     C0 FF 9F AD |  if_e	jmp	#LR__3240
1d3b4                 | LR__3241
1d3b4                 | ' 	}
1d3b4                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
1d3b4     0A 1E 06 F1 | 	add	local01, #10
1d3b8     0F 25 E2 FA | 	rdword	local04, local01
1d3bc     12 27 0A F2 | 	cmp	local05, local04 wz
1d3c0     00 28 06 A6 |  if_e	mov	local06, #0
1d3c4     01 28 06 56 |  if_ne	mov	local06, #1
1d3c8     14 FB 01 F6 | 	mov	result1, local06
1d3cc                 | LR__3242
1d3cc     A7 F0 03 F6 | 	mov	ptra, fp
1d3d0     B2 00 A0 FD | 	call	#popregs_
1d3d4                 | _fatfs_cc_dir_clear_ret
1d3d4     2D 00 64 FD | 	ret
1d3d8                 | 
1d3d8                 | _fatfs_cc_dir_sdi
1d3d8     06 4A 05 F6 | 	mov	COUNT_, #6
1d3dc     A8 00 A0 FD | 	call	#pushregs_
1d3e0     09 1F 02 F6 | 	mov	local01, arg01
1d3e4     0A 21 02 F6 | 	mov	local02, arg02
1d3e8     0F 23 02 FB | 	rdlong	local03, local01
1d3ec     00 10 00 FF 
1d3f0     00 20 16 F2 | 	cmp	local02, ##2097152 wc
1d3f4     1F 20 CE C7 |  if_b	test	local02, #31 wz
1d3f8                 | ' 		return FR_INT_ERR;
1d3f8     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
1d3fc     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3256
1d400     10 1E 06 F1 | 	add	local01, #16
1d404     0F 21 62 FC | 	wrlong	local02, local01
1d408     08 1E 86 F1 | 	sub	local01, #8
1d40c     0F 25 0A FB | 	rdlong	local04, local01 wz
1d410     08 1E 86 F1 | 	sub	local01, #8
1d414     11 27 C2 AA |  if_e	rdbyte	local05, local03
1d418     03 26 16 A2 |  if_e	cmp	local05, #3 wc
1d41c     28 22 06 21 |  if_nc_and_z	add	local03, #40
1d420     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
1d424     28 22 86 21 |  if_nc_and_z	sub	local03, #40
1d428     00 24 0E F2 | 	cmp	local04, #0 wz
1d42c     3C 00 90 5D |  if_ne	jmp	#LR__3250
1d430     10 27 02 F6 | 	mov	local05, local02
1d434     05 26 46 F0 | 	shr	local05, #5
1d438     08 22 06 F1 | 	add	local03, #8
1d43c     11 15 E2 FA | 	rdword	arg02, local03
1d440     08 22 86 F1 | 	sub	local03, #8
1d444     0A 27 12 F2 | 	cmp	local05, arg02 wc
1d448     02 FA 05 36 |  if_ae	mov	result1, #2
1d44c     E4 00 90 3D |  if_ae	jmp	#LR__3256
1d450     28 22 06 F1 | 	add	local03, #40
1d454     11 27 02 FB | 	rdlong	local05, local03
1d458     28 22 86 F1 | 	sub	local03, #40
1d45c     18 1E 06 F1 | 	add	local01, #24
1d460     0F 27 62 FC | 	wrlong	local05, local01
1d464     18 1E 86 F1 | 	sub	local01, #24
1d468     7C 00 90 FD | 	jmp	#LR__3255
1d46c                 | LR__3250
1d46c     0A 22 06 F1 | 	add	local03, #10
1d470     11 29 E2 FA | 	rdword	local06, local03
1d474     0A 22 86 F1 | 	sub	local03, #10
1d478     09 28 66 F0 | 	shl	local06, #9
1d47c                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
1d47c                 | ' 		while (ofs >= csz) {
1d47c                 | LR__3251
1d47c     14 21 12 F2 | 	cmp	local02, local06 wc
1d480     4C 00 90 CD |  if_b	jmp	#LR__3254
1d484     0F 13 02 F6 | 	mov	arg01, local01
1d488     12 15 02 F6 | 	mov	arg02, local04
1d48c     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
1d490     FD 24 02 F6 | 	mov	local04, result1
1d494     FF FF 7F FF 
1d498     FF 25 0E F2 | 	cmp	local04, ##-1 wz
1d49c     01 FA 05 A6 |  if_e	mov	result1, #1
1d4a0     90 00 90 AD |  if_e	jmp	#LR__3256
1d4a4     02 24 16 F2 | 	cmp	local04, #2 wc
1d4a8     14 00 90 CD |  if_b	jmp	#LR__3252
1d4ac     18 22 06 F1 | 	add	local03, #24
1d4b0     11 27 02 FB | 	rdlong	local05, local03
1d4b4     18 22 86 F1 | 	sub	local03, #24
1d4b8     13 25 12 F2 | 	cmp	local04, local05 wc
1d4bc     08 00 90 CD |  if_b	jmp	#LR__3253
1d4c0                 | LR__3252
1d4c0     02 FA 05 F6 | 	mov	result1, #2
1d4c4     6C 00 90 FD | 	jmp	#LR__3256
1d4c8                 | LR__3253
1d4c8     14 21 82 F1 | 	sub	local02, local06
1d4cc     AC FF 9F FD | 	jmp	#LR__3251
1d4d0                 | LR__3254
1d4d0     11 13 02 F6 | 	mov	arg01, local03
1d4d4     12 15 02 F6 | 	mov	arg02, local04
1d4d8     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
1d4dc     18 1E 06 F1 | 	add	local01, #24
1d4e0     0F FB 61 FC | 	wrlong	result1, local01
1d4e4     18 1E 86 F1 | 	sub	local01, #24
1d4e8                 | LR__3255
1d4e8     14 1E 06 F1 | 	add	local01, #20
1d4ec     0F 25 62 FC | 	wrlong	local04, local01
1d4f0     04 1E 06 F1 | 	add	local01, #4
1d4f4     0F 27 0A FB | 	rdlong	local05, local01 wz
1d4f8     18 1E 86 F1 | 	sub	local01, #24
1d4fc     02 FA 05 A6 |  if_e	mov	result1, #2
1d500     30 00 90 AD |  if_e	jmp	#LR__3256
1d504     10 29 02 F6 | 	mov	local06, local02
1d508     09 28 46 F0 | 	shr	local06, #9
1d50c     18 1E 06 F1 | 	add	local01, #24
1d510     0F 27 02 FB | 	rdlong	local05, local01
1d514     14 27 02 F1 | 	add	local05, local06
1d518     0F 27 62 FC | 	wrlong	local05, local01
1d51c     34 22 06 F1 | 	add	local03, #52
1d520     FF 21 06 F5 | 	and	local02, #511
1d524     10 23 02 F1 | 	add	local03, local02
1d528     04 1E 06 F1 | 	add	local01, #4
1d52c     0F 23 62 FC | 	wrlong	local03, local01
1d530                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
1d530                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
1d530                 | ' 
1d530                 | ' 	return FR_OK;
1d530     00 FA 05 F6 | 	mov	result1, #0
1d534                 | LR__3256
1d534     A7 F0 03 F6 | 	mov	ptra, fp
1d538     B2 00 A0 FD | 	call	#popregs_
1d53c                 | _fatfs_cc_dir_sdi_ret
1d53c     2D 00 64 FD | 	ret
1d540                 | 
1d540                 | _fatfs_cc_dir_next
1d540     05 4A 05 F6 | 	mov	COUNT_, #5
1d544     A8 00 A0 FD | 	call	#pushregs_
1d548     09 1F 02 F6 | 	mov	local01, arg01
1d54c     0A 21 02 F6 | 	mov	local02, arg02
1d550     0F 23 02 FB | 	rdlong	local03, local01
1d554     10 1E 06 F1 | 	add	local01, #16
1d558     0F 25 02 FB | 	rdlong	local04, local01
1d55c     10 1E 86 F1 | 	sub	local01, #16
1d560     20 24 06 F1 | 	add	local04, #32
1d564     00 10 00 FF 
1d568     00 24 16 F2 | 	cmp	local04, ##2097152 wc
1d56c     18 1E 06 31 |  if_ae	add	local01, #24
1d570     0F 01 68 3C |  if_ae	wrlong	#0, local01
1d574     18 1E 86 31 |  if_ae	sub	local01, #24
1d578     18 1E 06 F1 | 	add	local01, #24
1d57c     0F 15 0A FB | 	rdlong	arg02, local01 wz
1d580     18 1E 86 F1 | 	sub	local01, #24
1d584     04 FA 05 A6 |  if_e	mov	result1, #4
1d588     64 01 90 AD |  if_e	jmp	#LR__3265
1d58c     FF 25 CE F7 | 	test	local04, #511 wz
1d590     3C 01 90 5D |  if_ne	jmp	#LR__3264
1d594     18 1E 06 F1 | 	add	local01, #24
1d598     0F 15 02 FB | 	rdlong	arg02, local01
1d59c     01 14 06 F1 | 	add	arg02, #1
1d5a0     0F 15 62 FC | 	wrlong	arg02, local01
1d5a4     04 1E 86 F1 | 	sub	local01, #4
1d5a8     0F 15 0A FB | 	rdlong	arg02, local01 wz
1d5ac     14 1E 86 F1 | 	sub	local01, #20
1d5b0     2C 00 90 5D |  if_ne	jmp	#LR__3260
1d5b4     12 15 02 F6 | 	mov	arg02, local04
1d5b8     05 14 46 F0 | 	shr	arg02, #5
1d5bc     08 22 06 F1 | 	add	local03, #8
1d5c0     11 21 E2 FA | 	rdword	local02, local03
1d5c4     08 22 86 F1 | 	sub	local03, #8
1d5c8     10 15 12 F2 | 	cmp	arg02, local02 wc
1d5cc     18 1E 06 31 |  if_ae	add	local01, #24
1d5d0     0F 01 68 3C |  if_ae	wrlong	#0, local01
1d5d4                 | ' 				dp->sect = 0; return FR_NO_FILE;
1d5d4     04 FA 05 36 |  if_ae	mov	result1, #4
1d5d8     14 01 90 3D |  if_ae	jmp	#LR__3265
1d5dc     F0 00 90 FD | 	jmp	#LR__3263
1d5e0                 | LR__3260
1d5e0     12 13 02 F6 | 	mov	arg01, local04
1d5e4     09 12 46 F0 | 	shr	arg01, #9
1d5e8     0A 22 06 F1 | 	add	local03, #10
1d5ec     11 15 E2 FA | 	rdword	arg02, local03
1d5f0     0A 22 86 F1 | 	sub	local03, #10
1d5f4     01 14 86 F1 | 	sub	arg02, #1
1d5f8     0A 13 CA F7 | 	test	arg01, arg02 wz
1d5fc     D0 00 90 5D |  if_ne	jmp	#LR__3262
1d600     0F 13 02 F6 | 	mov	arg01, local01
1d604     14 1E 06 F1 | 	add	local01, #20
1d608     0F 15 02 FB | 	rdlong	arg02, local01
1d60c     14 1E 86 F1 | 	sub	local01, #20
1d610     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
1d614     FD 26 02 F6 | 	mov	local05, result1
1d618     02 26 16 F2 | 	cmp	local05, #2 wc
1d61c     02 FA 05 C6 |  if_b	mov	result1, #2
1d620     CC 00 90 CD |  if_b	jmp	#LR__3265
1d624     FF FF 7F FF 
1d628     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1d62c     01 FA 05 A6 |  if_e	mov	result1, #1
1d630     BC 00 90 AD |  if_e	jmp	#LR__3265
1d634     18 22 06 F1 | 	add	local03, #24
1d638     11 15 02 FB | 	rdlong	arg02, local03
1d63c     18 22 86 F1 | 	sub	local03, #24
1d640     0A 27 12 F2 | 	cmp	local05, arg02 wc
1d644     68 00 90 CD |  if_b	jmp	#LR__3261
1d648     00 20 0E F2 | 	cmp	local02, #0 wz
1d64c     18 1E 06 A1 |  if_e	add	local01, #24
1d650     0F 01 68 AC |  if_e	wrlong	#0, local01
1d654                 | ' 						dp->sect = 0; return FR_NO_FILE;
1d654     04 FA 05 A6 |  if_e	mov	result1, #4
1d658     94 00 90 AD |  if_e	jmp	#LR__3265
1d65c     0F 13 02 F6 | 	mov	arg01, local01
1d660     14 1E 06 F1 | 	add	local01, #20
1d664     0F 15 02 FB | 	rdlong	arg02, local01
1d668     14 1E 86 F1 | 	sub	local01, #20
1d66c     84 FA BF FD | 	call	#_fatfs_cc_create_chain
1d670     FD 26 0A F6 | 	mov	local05, result1 wz
1d674     07 FA 05 A6 |  if_e	mov	result1, #7
1d678     74 00 90 AD |  if_e	jmp	#LR__3265
1d67c     01 26 0E F2 | 	cmp	local05, #1 wz
1d680     02 FA 05 A6 |  if_e	mov	result1, #2
1d684     68 00 90 AD |  if_e	jmp	#LR__3265
1d688     FF FF 7F FF 
1d68c     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1d690     01 FA 05 A6 |  if_e	mov	result1, #1
1d694     58 00 90 AD |  if_e	jmp	#LR__3265
1d698     13 15 02 F6 | 	mov	arg02, local05
1d69c     11 13 02 F6 | 	mov	arg01, local03
1d6a0     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
1d6a4     00 FA 0D F2 | 	cmp	result1, #0 wz
1d6a8     01 FA 05 56 |  if_ne	mov	result1, #1
1d6ac     40 00 90 5D |  if_ne	jmp	#LR__3265
1d6b0                 | LR__3261
1d6b0     14 1E 06 F1 | 	add	local01, #20
1d6b4     0F 27 62 FC | 	wrlong	local05, local01
1d6b8     11 13 02 F6 | 	mov	arg01, local03
1d6bc     13 15 02 F6 | 	mov	arg02, local05
1d6c0     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
1d6c4     04 1E 06 F1 | 	add	local01, #4
1d6c8     0F FB 61 FC | 	wrlong	result1, local01
1d6cc     18 1E 86 F1 | 	sub	local01, #24
1d6d0                 | LR__3262
1d6d0                 | LR__3263
1d6d0                 | LR__3264
1d6d0     10 1E 06 F1 | 	add	local01, #16
1d6d4     0F 25 62 FC | 	wrlong	local04, local01
1d6d8     34 22 06 F1 | 	add	local03, #52
1d6dc     FF 25 06 F5 | 	and	local04, #511
1d6e0     12 23 02 F1 | 	add	local03, local04
1d6e4     0C 1E 06 F1 | 	add	local01, #12
1d6e8     0F 23 62 FC | 	wrlong	local03, local01
1d6ec                 | ' #line 1771 "ff.c"
1d6ec                 | ' 				}
1d6ec                 | ' 				dp->clust = clst;
1d6ec                 | ' 				dp->sect = clst2sect(fs, clst);
1d6ec                 | ' 			}
1d6ec                 | ' 		}
1d6ec                 | ' 	}
1d6ec                 | ' 	dp->dptr = ofs;
1d6ec                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
1d6ec                 | ' 
1d6ec                 | ' 	return FR_OK;
1d6ec     00 FA 05 F6 | 	mov	result1, #0
1d6f0                 | LR__3265
1d6f0     A7 F0 03 F6 | 	mov	ptra, fp
1d6f4     B2 00 A0 FD | 	call	#popregs_
1d6f8                 | _fatfs_cc_dir_next_ret
1d6f8     2D 00 64 FD | 	ret
1d6fc                 | 
1d6fc                 | _fatfs_cc_dir_alloc
1d6fc     08 4A 05 F6 | 	mov	COUNT_, #8
1d700     A8 00 A0 FD | 	call	#pushregs_
1d704     09 1F 02 F6 | 	mov	local01, arg01
1d708     0A 21 02 F6 | 	mov	local02, arg02
1d70c     0F 23 02 FB | 	rdlong	local03, local01
1d710     0F 13 02 F6 | 	mov	arg01, local01
1d714     00 14 06 F6 | 	mov	arg02, #0
1d718     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
1d71c     FD 24 0A F6 | 	mov	local04, result1 wz
1d720     70 00 90 5D |  if_ne	jmp	#LR__3274
1d724     00 26 06 F6 | 	mov	local05, #0
1d728                 | ' 		n = 0;
1d728                 | ' 		do {
1d728                 | LR__3270
1d728     18 1E 06 F1 | 	add	local01, #24
1d72c     0F 15 02 FB | 	rdlong	arg02, local01
1d730     18 1E 86 F1 | 	sub	local01, #24
1d734     11 13 02 F6 | 	mov	arg01, local03
1d738     38 F3 BF FD | 	call	#_fatfs_cc_move_window
1d73c     FD 24 0A F6 | 	mov	local04, result1 wz
1d740     50 00 90 5D |  if_ne	jmp	#LR__3273
1d744     1C 1E 06 F1 | 	add	local01, #28
1d748     0F 29 02 FB | 	rdlong	local06, local01
1d74c     1C 1E 86 F1 | 	sub	local01, #28
1d750     14 29 C2 FA | 	rdbyte	local06, local06
1d754     E5 28 0E F2 | 	cmp	local06, #229 wz
1d758     1C 1E 06 51 |  if_ne	add	local01, #28
1d75c     0F 2B 02 5B |  if_ne	rdlong	local07, local01
1d760     1C 1E 86 51 |  if_ne	sub	local01, #28
1d764     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
1d768     10 00 90 5D |  if_ne	jmp	#LR__3271
1d76c     01 26 06 F1 | 	add	local05, #1
1d770     10 27 0A F2 | 	cmp	local05, local02 wz
1d774     1C 00 90 AD |  if_e	jmp	#LR__3273
1d778     04 00 90 FD | 	jmp	#LR__3272
1d77c                 | LR__3271
1d77c     00 26 06 F6 | 	mov	local05, #0
1d780                 | LR__3272
1d780     0F 13 02 F6 | 	mov	arg01, local01
1d784     01 14 06 F6 | 	mov	arg02, #1
1d788     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
1d78c     FD 24 0A F6 | 	mov	local04, result1 wz
1d790     94 FF 9F AD |  if_e	jmp	#LR__3270
1d794                 | LR__3273
1d794                 | LR__3274
1d794     04 24 0E F2 | 	cmp	local04, #4 wz
1d798     07 24 06 A6 |  if_e	mov	local04, #7
1d79c                 | ' 	return res;
1d79c     12 FB 01 F6 | 	mov	result1, local04
1d7a0     A7 F0 03 F6 | 	mov	ptra, fp
1d7a4     B2 00 A0 FD | 	call	#popregs_
1d7a8                 | _fatfs_cc_dir_alloc_ret
1d7a8     2D 00 64 FD | 	ret
1d7ac                 | 
1d7ac                 | _fatfs_cc_ld_clust
1d7ac     09 01 02 F6 | 	mov	_var01, arg01
1d7b0     0A 13 02 F6 | 	mov	arg01, arg02
1d7b4     1A 12 06 F1 | 	add	arg01, #26
1d7b8                 | ' {
1d7b8                 | ' 
1d7b8                 | ' 	return *((WORD*)ptr);
1d7b8     09 FB E1 FA | 	rdword	result1, arg01
1d7bc     FD 12 32 F9 | 	getword	arg01, result1, #0
1d7c0     00 01 C2 FA | 	rdbyte	_var01, _var01
1d7c4     03 00 0E F2 | 	cmp	_var01, #3 wz
1d7c8     14 14 06 A1 |  if_e	add	arg02, #20
1d7cc                 | ' {
1d7cc                 | ' 
1d7cc                 | ' 	return *((WORD*)ptr);
1d7cc     0A FB E1 AA |  if_e	rdword	result1, arg02
1d7d0     10 FA 65 A0 |  if_e	shl	result1, #16
1d7d4     FD 12 42 A5 |  if_e	or	arg01, result1
1d7d8                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
1d7d8                 | ' 	}
1d7d8                 | ' 
1d7d8                 | ' 	return cl;
1d7d8     09 FB 01 F6 | 	mov	result1, arg01
1d7dc                 | _fatfs_cc_ld_clust_ret
1d7dc     2D 00 64 FD | 	ret
1d7e0                 | 
1d7e0                 | _fatfs_cc_st_clust
1d7e0     09 01 02 F6 | 	mov	_var01, arg01
1d7e4     0A 13 02 F6 | 	mov	arg01, arg02
1d7e8     1A 12 06 F1 | 	add	arg01, #26
1d7ec     09 17 52 FC | 	wrword	arg03, arg01
1d7f0     00 01 C2 FA | 	rdbyte	_var01, _var01
1d7f4     03 00 0E F2 | 	cmp	_var01, #3 wz
1d7f8     14 14 06 A1 |  if_e	add	arg02, #20
1d7fc     10 16 46 A0 |  if_e	shr	arg03, #16
1d800     0A 17 52 AC |  if_e	wrword	arg03, arg02
1d804                 | _fatfs_cc_st_clust_ret
1d804     2D 00 64 FD | 	ret
1d808                 | 
1d808                 | _fatfs_cc_cmp_lfn
1d808     07 4A 05 F6 | 	mov	COUNT_, #7
1d80c     A8 00 A0 FD | 	call	#pushregs_
1d810     09 1F 02 F6 | 	mov	local01, arg01
1d814     0A 13 02 F6 | 	mov	arg01, arg02
1d818     1A 12 06 F1 | 	add	arg01, #26
1d81c                 | ' {
1d81c                 | ' 
1d81c                 | ' 	return *((WORD*)ptr);
1d81c     09 FB E9 FA | 	rdword	result1, arg01 wz
1d820     00 FA 05 56 |  if_ne	mov	result1, #0
1d824     E0 00 90 5D |  if_ne	jmp	#LR__3286
1d828     0A 21 C2 FA | 	rdbyte	local02, arg02
1d82c     3F 20 06 F5 | 	and	local02, #63
1d830     01 20 86 F1 | 	sub	local02, #1
1d834     0D 20 06 FD | 	qmul	local02, #13
1d838                 | ' 
1d838                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
1d838                 | ' 
1d838                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
1d838     01 22 06 F6 | 	mov	local03, #1
1d83c     00 24 06 F6 | 	mov	local04, #0
1d840     18 26 62 FD | 	getqx	local05
1d844                 | LR__3280
1d844     0D 24 16 F2 | 	cmp	local04, #13 wc
1d848     9C 00 90 3D |  if_ae	jmp	#LR__3285
1d84c     0A 13 02 F6 | 	mov	arg01, arg02
1d850     12 21 02 F6 | 	mov	local02, local04
1d854     01 00 00 FF 
1d858     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
1d85c     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
1d860     10 21 C2 FA | 	rdbyte	local02, local02
1d864     01 20 06 FA | 	mul	local02, #1
1d868     10 13 02 F1 | 	add	arg01, local02
1d86c     01 00 00 FF 
1d870     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
1d874                 | ' {
1d874                 | ' 
1d874                 | ' 	return *((WORD*)ptr);
1d874     09 FB E1 FA | 	rdword	result1, arg01
1d878     FD 28 02 F6 | 	mov	local06, result1
1d87c     11 21 02 F6 | 	mov	local02, local03
1d880     0F 20 4E F7 | 	zerox	local02, #15 wz
1d884     44 00 90 AD |  if_e	jmp	#LR__3283
1d888     00 27 16 F2 | 	cmp	local05, #256 wc
1d88c     2C 00 90 3D |  if_ae	jmp	#LR__3281
1d890     14 13 32 F9 | 	getword	arg01, local06, #0
1d894     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
1d898     FD 20 02 F6 | 	mov	local02, result1
1d89c     13 23 02 F6 | 	mov	local03, local05
1d8a0     01 22 66 F0 | 	shl	local03, #1
1d8a4     0F 23 02 F1 | 	add	local03, local01
1d8a8     11 13 E2 FA | 	rdword	arg01, local03
1d8ac     01 26 06 F1 | 	add	local05, #1
1d8b0     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
1d8b4     FD 20 0A F2 | 	cmp	local02, result1 wz
1d8b8     08 00 90 AD |  if_e	jmp	#LR__3282
1d8bc                 | LR__3281
1d8bc                 | ' 				return 0;
1d8bc     00 FA 05 F6 | 	mov	result1, #0
1d8c0     44 00 90 FD | 	jmp	#LR__3286
1d8c4                 | LR__3282
1d8c4     14 23 02 F6 | 	mov	local03, local06
1d8c8     14 00 90 FD | 	jmp	#LR__3284
1d8cc                 | LR__3283
1d8cc     14 29 32 F9 | 	getword	local06, local06, #0
1d8d0     7F 00 00 FF 
1d8d4     FF 29 0E F2 | 	cmp	local06, ##65535 wz
1d8d8     00 FA 05 56 |  if_ne	mov	result1, #0
1d8dc     28 00 90 5D |  if_ne	jmp	#LR__3286
1d8e0                 | LR__3284
1d8e0     01 24 06 F1 | 	add	local04, #1
1d8e4     5C FF 9F FD | 	jmp	#LR__3280
1d8e8                 | LR__3285
1d8e8     0A 21 C2 FA | 	rdbyte	local02, arg02
1d8ec     40 20 CE F7 | 	test	local02, #64 wz
1d8f0     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
1d8f4     01 26 66 50 |  if_ne	shl	local05, #1
1d8f8     0F 27 02 51 |  if_ne	add	local05, local01
1d8fc     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
1d900     00 FA 05 56 |  if_ne	mov	result1, #0
1d904                 | ' 
1d904                 | ' 	return 1;
1d904     01 FA 05 A6 |  if_e	mov	result1, #1
1d908                 | LR__3286
1d908     A7 F0 03 F6 | 	mov	ptra, fp
1d90c     B2 00 A0 FD | 	call	#popregs_
1d910                 | _fatfs_cc_cmp_lfn_ret
1d910     2D 00 64 FD | 	ret
1d914                 | 
1d914                 | _fatfs_cc_pick_lfn
1d914     09 01 02 F6 | 	mov	_var01, arg01
1d918     0A 13 02 F6 | 	mov	arg01, arg02
1d91c     1A 12 06 F1 | 	add	arg01, #26
1d920                 | ' {
1d920                 | ' 
1d920                 | ' 	return *((WORD*)ptr);
1d920     09 FB E9 FA | 	rdword	result1, arg01 wz
1d924     00 FA 05 56 |  if_ne	mov	result1, #0
1d928     D4 00 90 5D |  if_ne	jmp	#LR__3295
1d92c     0A 03 C2 FA | 	rdbyte	_var02, arg02
1d930     40 02 26 F5 | 	andn	_var02, #64
1d934     01 02 86 F1 | 	sub	_var02, #1
1d938     0D 02 06 FD | 	qmul	_var02, #13
1d93c                 | ' 
1d93c                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
1d93c                 | ' 
1d93c                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
1d93c     01 04 06 F6 | 	mov	_var03, #1
1d940     00 06 06 F6 | 	mov	_var04, #0
1d944     18 08 62 FD | 	getqx	_var05
1d948                 | LR__3290
1d948     0D 06 16 F2 | 	cmp	_var04, #13 wc
1d94c     80 00 90 3D |  if_ae	jmp	#LR__3293
1d950     0A 13 02 F6 | 	mov	arg01, arg02
1d954     03 03 02 F6 | 	mov	_var02, _var04
1d958     01 00 00 FF 
1d95c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
1d960     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
1d964     01 03 C2 FA | 	rdbyte	_var02, _var02
1d968     01 02 06 FA | 	mul	_var02, #1
1d96c     01 13 02 F1 | 	add	arg01, _var02
1d970     01 00 00 FF 
1d974     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
1d978                 | ' {
1d978                 | ' 
1d978                 | ' 	return *((WORD*)ptr);
1d978     09 FB E1 FA | 	rdword	result1, arg01
1d97c     FD 0A 02 F6 | 	mov	_var06, result1
1d980     02 03 02 F6 | 	mov	_var02, _var03
1d984     0F 02 4E F7 | 	zerox	_var02, #15 wz
1d988     28 00 90 AD |  if_e	jmp	#LR__3291
1d98c     00 09 16 F2 | 	cmp	_var05, #256 wc
1d990     00 FA 05 36 |  if_ae	mov	result1, #0
1d994     68 00 90 3D |  if_ae	jmp	#LR__3295
1d998     04 03 02 F6 | 	mov	_var02, _var05
1d99c     01 02 66 F0 | 	shl	_var02, #1
1d9a0     00 03 02 F1 | 	add	_var02, _var01
1d9a4     05 05 02 F6 | 	mov	_var03, _var06
1d9a8     01 05 52 FC | 	wrword	_var03, _var02
1d9ac     01 08 06 F1 | 	add	_var05, #1
1d9b0     14 00 90 FD | 	jmp	#LR__3292
1d9b4                 | LR__3291
1d9b4     05 0B 32 F9 | 	getword	_var06, _var06, #0
1d9b8     7F 00 00 FF 
1d9bc     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
1d9c0     00 FA 05 56 |  if_ne	mov	result1, #0
1d9c4     38 00 90 5D |  if_ne	jmp	#LR__3295
1d9c8                 | LR__3292
1d9c8     01 06 06 F1 | 	add	_var04, #1
1d9cc     78 FF 9F FD | 	jmp	#LR__3290
1d9d0                 | LR__3293
1d9d0     0A 03 C2 FA | 	rdbyte	_var02, arg02
1d9d4     40 02 CE F7 | 	test	_var02, #64 wz
1d9d8     02 0D 02 56 |  if_ne	mov	_var07, _var03
1d9dc     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
1d9e0     18 00 90 AD |  if_e	jmp	#LR__3294
1d9e4     00 09 16 F2 | 	cmp	_var05, #256 wc
1d9e8     00 FA 05 36 |  if_ae	mov	result1, #0
1d9ec     10 00 90 3D |  if_ae	jmp	#LR__3295
1d9f0     01 08 66 F0 | 	shl	_var05, #1
1d9f4     00 09 02 F1 | 	add	_var05, _var01
1d9f8     04 01 58 FC | 	wrword	#0, _var05
1d9fc                 | LR__3294
1d9fc                 | ' 		lfnbuf[i] = 0;
1d9fc                 | ' 	}
1d9fc                 | ' 
1d9fc                 | ' 	return 1;
1d9fc     01 FA 05 F6 | 	mov	result1, #1
1da00                 | LR__3295
1da00                 | _fatfs_cc_pick_lfn_ret
1da00     2D 00 64 FD | 	ret
1da04                 | 
1da04                 | _fatfs_cc_put_lfn
1da04     0D 14 06 F1 | 	add	arg02, #13
1da08     0A 19 42 FC | 	wrbyte	arg04, arg02
1da0c     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
1da10     01 18 86 F1 | 	sub	arg04, #1
1da14     0D 18 06 FD | 	qmul	arg04, #13
1da18     09 01 02 F6 | 	mov	_var01, arg01
1da1c     02 14 86 F1 | 	sub	arg02, #2
1da20     0A 1F 48 FC | 	wrbyte	#15, arg02
1da24     01 14 06 F1 | 	add	arg02, #1
1da28     0A 01 48 FC | 	wrbyte	#0, arg02
1da2c     0C 14 86 F1 | 	sub	arg02, #12
1da30     0A 13 02 F6 | 	mov	arg01, arg02
1da34     1A 12 06 F1 | 	add	arg01, #26
1da38     09 01 58 FC | 	wrword	#0, arg01
1da3c     00 02 06 F6 | 	mov	_var02, #0
1da40     00 04 06 F6 | 	mov	_var03, #0
1da44                 | ' 	BYTE* dir,
1da44                 | ' 	BYTE ord,
1da44                 | ' 	BYTE sum
1da44                 | ' )
1da44                 | ' {
1da44                 | ' 	UINT i, s;
1da44                 | ' 	WCHAR wc;
1da44                 | ' 
1da44                 | ' 
1da44                 | ' 	dir[ 13 ] = sum;
1da44                 | ' 	dir[ 11 ] =  0x0F ;
1da44                 | ' 	dir[ 12 ] = 0;
1da44                 | ' 	st_word(dir +  26 , 0);
1da44                 | ' 
1da44                 | ' 	i = (ord - 1) * 13;
1da44                 | ' 	s = wc = 0;
1da44                 | ' 	do {
1da44     01 00 00 FF 
1da48     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
1da4c     18 06 62 FD | 	getqx	_var04
1da50     97 2A 48 FB | 	callpa	#(@LR__3301-@LR__3300)>>2,fcache_load_ptr_
1da54                 | LR__3300
1da54     01 19 32 F9 | 	getword	arg04, _var02, #0
1da58     7F 00 00 FF 
1da5c     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
1da60     03 13 02 56 |  if_ne	mov	arg01, _var04
1da64     01 06 06 51 |  if_ne	add	_var04, #1
1da68     01 12 66 50 |  if_ne	shl	arg01, #1
1da6c     00 13 02 51 |  if_ne	add	arg01, _var01
1da70     09 03 E2 5A |  if_ne	rdword	_var02, arg01
1da74     0A 13 02 F6 | 	mov	arg01, arg02
1da78     02 19 02 F6 | 	mov	arg04, _var03
1da7c     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
1da80     0C 19 C2 FA | 	rdbyte	arg04, arg04
1da84     01 18 06 FA | 	mul	arg04, #1
1da88     0C 13 02 F1 | 	add	arg01, arg04
1da8c     09 03 52 FC | 	wrword	_var02, arg01
1da90     01 19 02 F6 | 	mov	arg04, _var02
1da94     0F 18 4E F7 | 	zerox	arg04, #15 wz
1da98     0F 02 CE A9 |  if_e	bmask	_var02, #15
1da9c     01 04 06 F1 | 	add	_var03, #1
1daa0     0D 04 16 F2 | 	cmp	_var03, #13 wc
1daa4     AC FF 9F CD |  if_b	jmp	#LR__3300
1daa8                 | LR__3301
1daa8     01 00 00 FF 
1daac     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
1dab0     01 03 32 F9 | 	getword	_var02, _var02, #0
1dab4     7F 00 00 FF 
1dab8     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
1dabc     01 06 66 50 |  if_ne	shl	_var04, #1
1dac0     00 07 02 51 |  if_ne	add	_var04, _var01
1dac4     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
1dac8     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
1dacc     40 16 46 A5 |  if_e	or	arg03, #64
1dad0     0A 17 42 FC | 	wrbyte	arg03, arg02
1dad4                 | _fatfs_cc_put_lfn_ret
1dad4     2D 00 64 FD | 	ret
1dad8                 | 
1dad8                 | _fatfs_cc_gen_numname
1dad8     08 4A 05 F6 | 	mov	COUNT_, #8
1dadc     A8 00 A0 FD | 	call	#pushregs_
1dae0     2C F0 07 F1 | 	add	ptra, #44
1dae4     09 1F 02 F6 | 	mov	local01, arg01
1dae8     0A 21 02 F6 | 	mov	local02, arg02
1daec     0B 23 02 F6 | 	mov	local03, arg03
1daf0     0C 25 02 F6 | 	mov	local04, arg04
1daf4     0F 13 02 F6 | 	mov	arg01, local01
1daf8     10 15 02 F6 | 	mov	arg02, local02
1dafc     0B 16 06 F6 | 	mov	arg03, #11
1db00     DC 7B BF FD | 	call	#__system____builtin_memmove
1db04     06 24 16 F2 | 	cmp	local04, #6 wc
1db08     48 00 90 CD |  if_b	jmp	#LR__3315
1db0c     12 27 02 F6 | 	mov	local05, local04
1db10     97 1E 48 FB | 	callpa	#(@LR__3313-@LR__3310)>>2,fcache_load_ptr_
1db14                 | ' 		sreg = seq;
1db14                 | ' 		while (*lfn) {
1db14                 | LR__3310
1db14     11 29 EA FA | 	rdword	local06, local03 wz
1db18     34 00 90 AD |  if_e	jmp	#LR__3314
1db1c     11 2B E2 FA | 	rdword	local07, local03
1db20                 | ' 			wc = *lfn++;
1db20                 | ' 			for (i = 0; i < 16; i++) {
1db20     02 22 06 F1 | 	add	local03, #2
1db24     10 12 DC FC | 	rep	@LR__3312, #16
1db28                 | LR__3311
1db28     01 26 66 F0 | 	shl	local05, #1
1db2c     15 29 32 F9 | 	getword	local06, local07, #0
1db30     01 28 06 F5 | 	and	local06, #1
1db34     14 27 02 F1 | 	add	local05, local06
1db38     15 2B 32 F9 | 	getword	local07, local07, #0
1db3c     01 2A 46 F0 | 	shr	local07, #1
1db40     10 26 2E F4 | 	testbn	local05, #16 wz
1db44     88 00 00 5F 
1db48     21 26 66 55 |  if_ne	xor	local05, ##69665
1db4c                 | LR__3312
1db4c     C4 FF 9F FD | 	jmp	#LR__3310
1db50                 | LR__3313
1db50                 | LR__3314
1db50     13 25 02 F6 | 	mov	local04, local05
1db54                 | LR__3315
1db54     07 2A 06 F6 | 	mov	local07, #7
1db58                 | ' 			}
1db58                 | ' 		}
1db58                 | ' 		seq = (UINT)sreg;
1db58                 | ' 	}
1db58                 | ' 
1db58                 | ' 
1db58                 | ' 	i = 7;
1db58                 | ' 	do {
1db58     10 4E 05 F1 | 	add	fp, #16
1db5c     97 1A 48 FB | 	callpa	#(@LR__3317-@LR__3316)>>2,fcache_load_ptr_
1db60                 | LR__3316
1db60     12 27 42 F8 | 	getnib	local05, local04, #0
1db64     30 26 06 F1 | 	add	local05, #48
1db68     04 24 46 F0 | 	shr	local04, #4
1db6c     13 29 E2 F8 | 	getbyte	local06, local05, #0
1db70     3A 28 16 F2 | 	cmp	local06, #58 wc
1db74     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
1db78     07 26 06 31 |  if_ae	add	local05, #7
1db7c     15 29 02 F6 | 	mov	local06, local07
1db80     01 2A 8E F1 | 	sub	local07, #1 wz
1db84     A7 28 02 F1 | 	add	local06, fp
1db88     14 27 42 FC | 	wrbyte	local05, local06
1db8c     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
1db90     CC FF 9F 5D |  if_ne	jmp	#LR__3316
1db94                 | LR__3317
1db94     15 29 02 F6 | 	mov	local06, local07
1db98     A7 28 02 F1 | 	add	local06, fp
1db9c     14 FD 48 FC | 	wrbyte	#126, local06
1dba0                 | ' 	ns[i] = '~';
1dba0                 | ' 
1dba0                 | ' 
1dba0                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
1dba0     00 26 06 F6 | 	mov	local05, #0
1dba4     10 4E 85 F1 | 	sub	fp, #16
1dba8     97 2A 48 FB | 	callpa	#(@LR__3320-@LR__3318)>>2,fcache_load_ptr_
1dbac                 | LR__3318
1dbac     15 27 12 F2 | 	cmp	local05, local07 wc
1dbb0     4C 00 90 3D |  if_ae	jmp	#LR__3321
1dbb4     13 29 02 F6 | 	mov	local06, local05
1dbb8     0F 29 02 F1 | 	add	local06, local01
1dbbc     14 29 C2 FA | 	rdbyte	local06, local06
1dbc0     20 28 0E F2 | 	cmp	local06, #32 wz
1dbc4     38 00 90 AD |  if_e	jmp	#LR__3321
1dbc8     13 13 02 F6 | 	mov	arg01, local05
1dbcc     0F 13 02 F1 | 	add	arg01, local01
1dbd0     09 13 CA FA | 	rdbyte	arg01, arg01 wz
1dbd4     00 FA 05 56 |  if_ne	mov	result1, #0
1dbd8                 | ' 
1dbd8                 | ' 	return 0;
1dbd8     00 FA 05 A6 |  if_e	mov	result1, #0
1dbdc     00 FA 0D F2 | 	cmp	result1, #0 wz
1dbe0     14 00 90 AD |  if_e	jmp	#LR__3319
1dbe4     15 29 02 F6 | 	mov	local06, local07
1dbe8     01 28 86 F1 | 	sub	local06, #1
1dbec     14 27 0A F2 | 	cmp	local05, local06 wz
1dbf0     0C 00 90 AD |  if_e	jmp	#LR__3321
1dbf4     01 26 06 F1 | 	add	local05, #1
1dbf8                 | LR__3319
1dbf8     01 26 06 F1 | 	add	local05, #1
1dbfc     AC FF 9F FD | 	jmp	#LR__3318
1dc00                 | LR__3320
1dc00                 | LR__3321
1dc00     97 20 48 FB | 	callpa	#(@LR__3325-@LR__3322)>>2,fcache_load_ptr_
1dc04                 | ' 			j++;
1dc04                 | ' 		}
1dc04                 | ' 	}
1dc04                 | ' 	do {
1dc04                 | LR__3322
1dc04     13 29 02 F6 | 	mov	local06, local05
1dc08     0F 29 02 F1 | 	add	local06, local01
1dc0c     08 2A 16 F2 | 	cmp	local07, #8 wc
1dc10     01 26 06 F1 | 	add	local05, #1
1dc14     1C 00 90 3D |  if_ae	jmp	#LR__3323
1dc18     15 25 02 F6 | 	mov	local04, local07
1dc1c     10 4E 05 F1 | 	add	fp, #16
1dc20     A7 24 02 F1 | 	add	local04, fp
1dc24     12 2D C2 FA | 	rdbyte	local08, local04
1dc28     01 2A 06 F1 | 	add	local07, #1
1dc2c     10 4E 85 F1 | 	sub	fp, #16
1dc30     04 00 90 FD | 	jmp	#LR__3324
1dc34                 | LR__3323
1dc34     20 2C 06 F6 | 	mov	local08, #32
1dc38                 | LR__3324
1dc38     14 2D 42 FC | 	wrbyte	local08, local06
1dc3c     08 26 16 F2 | 	cmp	local05, #8 wc
1dc40     C0 FF 9F CD |  if_b	jmp	#LR__3322
1dc44                 | LR__3325
1dc44     A7 F0 03 F6 | 	mov	ptra, fp
1dc48     B2 00 A0 FD | 	call	#popregs_
1dc4c                 | _fatfs_cc_gen_numname_ret
1dc4c     2D 00 64 FD | 	ret
1dc50                 | 
1dc50                 | _fatfs_cc_sum_sfn
1dc50     00 00 06 F6 | 	mov	_var01, #0
1dc54                 | ' )
1dc54                 | ' {
1dc54                 | ' 	BYTE sum = 0;
1dc54                 | ' 	UINT n = 11;
1dc54                 | ' 
1dc54                 | ' 	do {
1dc54     97 12 48 FB | 	callpa	#(@LR__3332-@LR__3330)>>2,fcache_load_ptr_
1dc58                 | LR__3330
1dc58     0B 10 DC FC | 	rep	@LR__3333, #11
1dc5c                 | LR__3331
1dc5c     00 FB E1 F8 | 	getbyte	result1, _var01, #0
1dc60     01 FA 45 F0 | 	shr	result1, #1
1dc64     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
1dc68     07 00 66 F0 | 	shl	_var01, #7
1dc6c     00 FB 01 F1 | 	add	result1, _var01
1dc70     09 01 C2 FA | 	rdbyte	_var01, arg01
1dc74     FD 00 02 F1 | 	add	_var01, result1
1dc78     01 12 06 F1 | 	add	arg01, #1
1dc7c                 | LR__3332
1dc7c                 | LR__3333
1dc7c                 | ' 	return sum;
1dc7c     00 FB 01 F6 | 	mov	result1, _var01
1dc80                 | _fatfs_cc_sum_sfn_ret
1dc80     2D 00 64 FD | 	ret
1dc84                 | 
1dc84                 | _fatfs_cc_dir_read
1dc84     0C 4A 05 F6 | 	mov	COUNT_, #12
1dc88     A8 00 A0 FD | 	call	#pushregs_
1dc8c     09 1F 02 F6 | 	mov	local01, arg01
1dc90     0A 21 02 F6 | 	mov	local02, arg02
1dc94     04 22 06 F6 | 	mov	local03, #4
1dc98     0F 25 02 FB | 	rdlong	local04, local01
1dc9c     FF 26 06 F6 | 	mov	local05, #255
1dca0     FF 28 06 F6 | 	mov	local06, #255
1dca4                 | ' )
1dca4                 | ' {
1dca4                 | ' 	FRESULT res = FR_NO_FILE;
1dca4                 | ' 	FATFS *fs = dp->obj.fs;
1dca4                 | ' 	BYTE attr, b;
1dca4                 | ' 
1dca4                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
1dca4                 | ' 
1dca4                 | ' 
1dca4                 | ' 	while (dp->sect) {
1dca4                 | LR__3340
1dca4     18 1E 06 F1 | 	add	local01, #24
1dca8     0F FB 09 FB | 	rdlong	result1, local01 wz
1dcac     18 1E 86 F1 | 	sub	local01, #24
1dcb0     AC 01 90 AD |  if_e	jmp	#LR__3350
1dcb4     18 1E 06 F1 | 	add	local01, #24
1dcb8     0F 15 02 FB | 	rdlong	arg02, local01
1dcbc     18 1E 86 F1 | 	sub	local01, #24
1dcc0     12 13 02 F6 | 	mov	arg01, local04
1dcc4     AC ED BF FD | 	call	#_fatfs_cc_move_window
1dcc8     FD 22 0A F6 | 	mov	local03, result1 wz
1dccc     90 01 90 5D |  if_ne	jmp	#LR__3350
1dcd0     1C 1E 06 F1 | 	add	local01, #28
1dcd4     0F FB 01 FB | 	rdlong	result1, local01
1dcd8     1C 1E 86 F1 | 	sub	local01, #28
1dcdc     FD 2A C2 FA | 	rdbyte	local07, result1
1dce0     15 FB 01 F6 | 	mov	result1, local07
1dce4     07 FA 4D F7 | 	zerox	result1, #7 wz
1dce8     04 22 06 A6 |  if_e	mov	local03, #4
1dcec                 | ' 			res = FR_NO_FILE; break;
1dcec     70 01 90 AD |  if_e	jmp	#LR__3350
1dcf0     1C 1E 06 F1 | 	add	local01, #28
1dcf4     0F 2D 02 FB | 	rdlong	local08, local01
1dcf8     0B 2C 06 F1 | 	add	local08, #11
1dcfc     16 2F C2 FA | 	rdbyte	local09, local08
1dd00     3F 2E 06 F5 | 	and	local09, #63
1dd04     16 1E 86 F1 | 	sub	local01, #22
1dd08     0F 2F 42 FC | 	wrbyte	local09, local01
1dd0c     06 1E 86 F1 | 	sub	local01, #6
1dd10     15 FB E1 F8 | 	getbyte	result1, local07, #0
1dd14     E5 FA 0D F2 | 	cmp	result1, #229 wz
1dd18     15 2D 02 56 |  if_ne	mov	local08, local07
1dd1c     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
1dd20     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
1dd24     1C 00 90 AD |  if_e	jmp	#LR__3341
1dd28     00 30 06 F6 | 	mov	local10, #0
1dd2c     17 2D E2 F8 | 	getbyte	local08, local09, #0
1dd30     20 2C 26 F5 | 	andn	local08, #32
1dd34     08 2C 0E F2 | 	cmp	local08, #8 wz
1dd38     01 30 06 A6 |  if_e	mov	local10, #1
1dd3c     10 31 0A F2 | 	cmp	local10, local02 wz
1dd40     08 00 90 AD |  if_e	jmp	#LR__3342
1dd44                 | LR__3341
1dd44     FF 26 06 F6 | 	mov	local05, #255
1dd48     00 01 90 FD | 	jmp	#LR__3349
1dd4c                 | LR__3342
1dd4c     17 2F E2 F8 | 	getbyte	local09, local09, #0
1dd50     0F 2E 0E F2 | 	cmp	local09, #15 wz
1dd54     B4 00 90 5D |  if_ne	jmp	#LR__3346
1dd58     15 33 E2 F8 | 	getbyte	local11, local07, #0
1dd5c     40 32 CE F7 | 	test	local11, #64 wz
1dd60     30 00 90 AD |  if_e	jmp	#LR__3343
1dd64     1C 1E 06 F1 | 	add	local01, #28
1dd68     0F 33 02 FB | 	rdlong	local11, local01
1dd6c     0D 32 06 F1 | 	add	local11, #13
1dd70     19 29 C2 FA | 	rdbyte	local06, local11
1dd74     15 2B E2 F8 | 	getbyte	local07, local07, #0
1dd78     BF 2A 06 F5 | 	and	local07, #191
1dd7c     15 27 02 F6 | 	mov	local05, local07
1dd80     0C 1E 86 F1 | 	sub	local01, #12
1dd84     0F 33 02 FB | 	rdlong	local11, local01
1dd88     1C 1E 06 F1 | 	add	local01, #28
1dd8c     0F 33 62 FC | 	wrlong	local11, local01
1dd90     2C 1E 86 F1 | 	sub	local01, #44
1dd94                 | LR__3343
1dd94     15 2D E2 F8 | 	getbyte	local08, local07, #0
1dd98     13 31 E2 F8 | 	getbyte	local10, local05, #0
1dd9c     18 2D 0A F2 | 	cmp	local08, local10 wz
1dda0     5C 00 90 5D |  if_ne	jmp	#LR__3344
1dda4     14 31 E2 F8 | 	getbyte	local10, local06, #0
1dda8     1C 1E 06 F1 | 	add	local01, #28
1ddac     0F 2F 02 FB | 	rdlong	local09, local01
1ddb0     1C 1E 86 F1 | 	sub	local01, #28
1ddb4     0D 2E 06 F1 | 	add	local09, #13
1ddb8     17 2D C2 FA | 	rdbyte	local08, local09
1ddbc     16 2F E2 F8 | 	getbyte	local09, local08, #0
1ddc0     17 31 0A F2 | 	cmp	local10, local09 wz
1ddc4     38 00 90 5D |  if_ne	jmp	#LR__3344
1ddc8     0C 24 06 F1 | 	add	local04, #12
1ddcc     12 13 02 FB | 	rdlong	arg01, local04
1ddd0     0C 24 86 F1 | 	sub	local04, #12
1ddd4     1C 1E 06 F1 | 	add	local01, #28
1ddd8     0F 35 02 FB | 	rdlong	local12, local01
1dddc     1C 1E 86 F1 | 	sub	local01, #28
1dde0     1A 15 02 F6 | 	mov	arg02, local12
1dde4     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
1dde8     00 FA 4D F2 | 	cmps	result1, #0 wz
1ddec     13 35 02 56 |  if_ne	mov	local12, local05
1ddf0     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
1ddf4     01 34 86 51 |  if_ne	sub	local12, #1
1ddf8     1A 33 02 56 |  if_ne	mov	local11, local12
1ddfc     04 00 90 5D |  if_ne	jmp	#LR__3345
1de00                 | LR__3344
1de00     FF 32 06 F6 | 	mov	local11, #255
1de04                 | LR__3345
1de04     19 27 02 F6 | 	mov	local05, local11
1de08     40 00 90 FD | 	jmp	#LR__3348
1de0c                 | LR__3346
1de0c     13 33 02 F6 | 	mov	local11, local05
1de10     07 32 4E F7 | 	zerox	local11, #7 wz
1de14     20 00 90 5D |  if_ne	jmp	#LR__3347
1de18     14 29 E2 F8 | 	getbyte	local06, local06, #0
1de1c     1C 1E 06 F1 | 	add	local01, #28
1de20     0F 13 02 FB | 	rdlong	arg01, local01
1de24     1C 1E 86 F1 | 	sub	local01, #28
1de28     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
1de2c     FD FA E1 F8 | 	getbyte	result1, result1, #0
1de30     FD 28 0A F2 | 	cmp	local06, result1 wz
1de34     28 00 90 AD |  if_e	jmp	#LR__3350
1de38                 | LR__3347
1de38     2C 1E 06 F1 | 	add	local01, #44
1de3c     FF FF FF FF 
1de40     0F FF 6B FC | 	wrlong	##-1, local01
1de44     2C 1E 86 F1 | 	sub	local01, #44
1de48                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
1de48                 | ' 					}
1de48                 | ' 					break;
1de48     14 00 90 FD | 	jmp	#LR__3350
1de4c                 | LR__3348
1de4c                 | LR__3349
1de4c     0F 13 02 F6 | 	mov	arg01, local01
1de50     00 14 06 F6 | 	mov	arg02, #0
1de54     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
1de58     FD 22 0A F6 | 	mov	local03, result1 wz
1de5c     44 FE 9F AD |  if_e	jmp	#LR__3340
1de60                 | LR__3350
1de60     00 22 0E F2 | 	cmp	local03, #0 wz
1de64     18 1E 06 51 |  if_ne	add	local01, #24
1de68     0F 01 68 5C |  if_ne	wrlong	#0, local01
1de6c                 | ' 	return res;
1de6c     11 FB 01 F6 | 	mov	result1, local03
1de70     A7 F0 03 F6 | 	mov	ptra, fp
1de74     B2 00 A0 FD | 	call	#popregs_
1de78                 | _fatfs_cc_dir_read_ret
1de78     2D 00 64 FD | 	ret
1de7c                 | 
1de7c                 | _fatfs_cc_dir_find
1de7c     0B 4A 05 F6 | 	mov	COUNT_, #11
1de80     A8 00 A0 FD | 	call	#pushregs_
1de84     09 1F 02 F6 | 	mov	local01, arg01
1de88     0F 21 02 FB | 	rdlong	local02, local01
1de8c     0F 13 02 F6 | 	mov	arg01, local01
1de90     00 14 06 F6 | 	mov	arg02, #0
1de94     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
1de98     00 FA 0D F2 | 	cmp	result1, #0 wz
1de9c     18 02 90 5D |  if_ne	jmp	#LR__3372
1dea0     FF 22 06 F6 | 	mov	local03, #255
1dea4     FF 24 06 F6 | 	mov	local04, #255
1dea8     2C 1E 06 F1 | 	add	local01, #44
1deac     FF FF FF FF 
1deb0     0F FF 6B FC | 	wrlong	##-1, local01
1deb4     2C 1E 86 F1 | 	sub	local01, #44
1deb8                 | ' #line 2404 "ff.c"
1deb8                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
1deb8                 | ' 
1deb8                 | ' 	do {
1deb8                 | LR__3360
1deb8     18 1E 06 F1 | 	add	local01, #24
1debc     0F 15 02 FB | 	rdlong	arg02, local01
1dec0     18 1E 86 F1 | 	sub	local01, #24
1dec4     10 13 02 F6 | 	mov	arg01, local02
1dec8     A8 EB BF FD | 	call	#_fatfs_cc_move_window
1decc     FD 26 0A F6 | 	mov	local05, result1 wz
1ded0     E0 01 90 5D |  if_ne	jmp	#LR__3371
1ded4     1C 1E 06 F1 | 	add	local01, #28
1ded8     0F 17 02 FB | 	rdlong	arg03, local01
1dedc     1C 1E 86 F1 | 	sub	local01, #28
1dee0     0B 29 C2 FA | 	rdbyte	local06, arg03
1dee4     14 17 02 F6 | 	mov	arg03, local06
1dee8     07 16 4E F7 | 	zerox	arg03, #7 wz
1deec     04 26 06 A6 |  if_e	mov	local05, #4
1def0     C0 01 90 AD |  if_e	jmp	#LR__3371
1def4     1C 1E 06 F1 | 	add	local01, #28
1def8     0F 2B 02 FB | 	rdlong	local07, local01
1defc     15 17 02 F6 | 	mov	arg03, local07
1df00     0B 16 06 F1 | 	add	arg03, #11
1df04     0B 2D C2 FA | 	rdbyte	local08, arg03
1df08     3F 2C 06 F5 | 	and	local08, #63
1df0c     16 1E 86 F1 | 	sub	local01, #22
1df10     0F 2D 42 FC | 	wrbyte	local08, local01
1df14     06 1E 86 F1 | 	sub	local01, #6
1df18     14 17 E2 F8 | 	getbyte	arg03, local06, #0
1df1c     E5 16 0E F2 | 	cmp	arg03, #229 wz
1df20     18 00 90 AD |  if_e	jmp	#LR__3361
1df24     16 17 E2 F8 | 	getbyte	arg03, local08, #0
1df28     08 16 CE F7 | 	test	arg03, #8 wz
1df2c     16 2B 02 56 |  if_ne	mov	local07, local08
1df30     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
1df34     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
1df38     18 00 90 AD |  if_e	jmp	#LR__3362
1df3c                 | LR__3361
1df3c     FF 24 06 F6 | 	mov	local04, #255
1df40     2C 1E 06 F1 | 	add	local01, #44
1df44     FF FF FF FF 
1df48     0F FF 6B FC | 	wrlong	##-1, local01
1df4c     2C 1E 86 F1 | 	sub	local01, #44
1df50     4C 01 90 FD | 	jmp	#LR__3370
1df54                 | LR__3362
1df54     16 2D E2 F8 | 	getbyte	local08, local08, #0
1df58     0F 2C 0E F2 | 	cmp	local08, #15 wz
1df5c     C8 00 90 5D |  if_ne	jmp	#LR__3366
1df60     2B 1E 06 F1 | 	add	local01, #43
1df64     0F 2D C2 FA | 	rdbyte	local08, local01
1df68     2B 1E 86 F1 | 	sub	local01, #43
1df6c     40 2C CE F7 | 	test	local08, #64 wz
1df70     2C 01 90 5D |  if_ne	jmp	#LR__3369
1df74     14 2F E2 F8 | 	getbyte	local09, local06, #0
1df78     40 2E CE F7 | 	test	local09, #64 wz
1df7c     30 00 90 AD |  if_e	jmp	#LR__3363
1df80     1C 1E 06 F1 | 	add	local01, #28
1df84     0F 2F 02 FB | 	rdlong	local09, local01
1df88     0D 2E 06 F1 | 	add	local09, #13
1df8c     17 23 C2 FA | 	rdbyte	local03, local09
1df90     14 29 E2 F8 | 	getbyte	local06, local06, #0
1df94     BF 28 06 F5 | 	and	local06, #191
1df98     14 25 02 F6 | 	mov	local04, local06
1df9c     0C 1E 86 F1 | 	sub	local01, #12
1dfa0     0F 2F 02 FB | 	rdlong	local09, local01
1dfa4     1C 1E 06 F1 | 	add	local01, #28
1dfa8     0F 2F 62 FC | 	wrlong	local09, local01
1dfac     2C 1E 86 F1 | 	sub	local01, #44
1dfb0                 | LR__3363
1dfb0     14 31 E2 F8 | 	getbyte	local10, local06, #0
1dfb4     12 2B E2 F8 | 	getbyte	local07, local04, #0
1dfb8     15 31 0A F2 | 	cmp	local10, local07 wz
1dfbc     5C 00 90 5D |  if_ne	jmp	#LR__3364
1dfc0     11 2D E2 F8 | 	getbyte	local08, local03, #0
1dfc4     1C 1E 06 F1 | 	add	local01, #28
1dfc8     0F 2B 02 FB | 	rdlong	local07, local01
1dfcc     1C 1E 86 F1 | 	sub	local01, #28
1dfd0     0D 2A 06 F1 | 	add	local07, #13
1dfd4     15 29 C2 FA | 	rdbyte	local06, local07
1dfd8     14 2B E2 F8 | 	getbyte	local07, local06, #0
1dfdc     15 2D 0A F2 | 	cmp	local08, local07 wz
1dfe0     38 00 90 5D |  if_ne	jmp	#LR__3364
1dfe4     0C 20 06 F1 | 	add	local02, #12
1dfe8     10 13 02 FB | 	rdlong	arg01, local02
1dfec     0C 20 86 F1 | 	sub	local02, #12
1dff0     1C 1E 06 F1 | 	add	local01, #28
1dff4     0F 33 02 FB | 	rdlong	local11, local01
1dff8     1C 1E 86 F1 | 	sub	local01, #28
1dffc     19 15 02 F6 | 	mov	arg02, local11
1e000     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
1e004     00 FA 4D F2 | 	cmps	result1, #0 wz
1e008     12 33 02 56 |  if_ne	mov	local11, local04
1e00c     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
1e010     01 32 86 51 |  if_ne	sub	local11, #1
1e014     19 2F 02 56 |  if_ne	mov	local09, local11
1e018     04 00 90 5D |  if_ne	jmp	#LR__3365
1e01c                 | LR__3364
1e01c     FF 2E 06 F6 | 	mov	local09, #255
1e020                 | LR__3365
1e020     17 25 02 F6 | 	mov	local04, local09
1e024     78 00 90 FD | 	jmp	#LR__3369
1e028                 | LR__3366
1e028     12 2F 02 F6 | 	mov	local09, local04
1e02c     07 2E 4E F7 | 	zerox	local09, #7 wz
1e030     20 00 90 5D |  if_ne	jmp	#LR__3367
1e034     11 31 E2 F8 | 	getbyte	local10, local03, #0
1e038     1C 1E 06 F1 | 	add	local01, #28
1e03c     0F 13 02 FB | 	rdlong	arg01, local01
1e040     1C 1E 86 F1 | 	sub	local01, #28
1e044     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
1e048     FD FA E1 F8 | 	getbyte	result1, result1, #0
1e04c     FD 30 0A F2 | 	cmp	local10, result1 wz
1e050     60 00 90 AD |  if_e	jmp	#LR__3371
1e054                 | LR__3367
1e054     2B 1E 06 F1 | 	add	local01, #43
1e058     0F 2F C2 FA | 	rdbyte	local09, local01
1e05c     2B 1E 86 F1 | 	sub	local01, #43
1e060     01 2E CE F7 | 	test	local09, #1 wz
1e064     24 00 90 5D |  if_ne	jmp	#LR__3368
1e068     1C 1E 06 F1 | 	add	local01, #28
1e06c     0F 13 02 FB | 	rdlong	arg01, local01
1e070     04 1E 06 F1 | 	add	local01, #4
1e074     0F 15 02 F6 | 	mov	arg02, local01
1e078     20 1E 86 F1 | 	sub	local01, #32
1e07c     0B 16 06 F6 | 	mov	arg03, #11
1e080     88 DA BF FD | 	call	#_fatfs_cc_memcmp
1e084     00 FA 0D F2 | 	cmp	result1, #0 wz
1e088     28 00 90 AD |  if_e	jmp	#LR__3371
1e08c                 | LR__3368
1e08c     FF 24 06 F6 | 	mov	local04, #255
1e090     2C 1E 06 F1 | 	add	local01, #44
1e094     FF FF FF FF 
1e098     0F FF 6B FC | 	wrlong	##-1, local01
1e09c     2C 1E 86 F1 | 	sub	local01, #44
1e0a0                 | LR__3369
1e0a0                 | LR__3370
1e0a0     0F 13 02 F6 | 	mov	arg01, local01
1e0a4     00 14 06 F6 | 	mov	arg02, #0
1e0a8     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
1e0ac     FD 26 0A F6 | 	mov	local05, result1 wz
1e0b0     04 FE 9F AD |  if_e	jmp	#LR__3360
1e0b4                 | LR__3371
1e0b4                 | ' 
1e0b4                 | ' 	return res;
1e0b4     13 FB 01 F6 | 	mov	result1, local05
1e0b8                 | LR__3372
1e0b8     A7 F0 03 F6 | 	mov	ptra, fp
1e0bc     B2 00 A0 FD | 	call	#popregs_
1e0c0                 | _fatfs_cc_dir_find_ret
1e0c0     2D 00 64 FD | 	ret
1e0c4                 | 
1e0c4                 | _fatfs_cc_dir_register
1e0c4     0A 4A 05 F6 | 	mov	COUNT_, #10
1e0c8     A8 00 A0 FD | 	call	#pushregs_
1e0cc     2C F0 07 F1 | 	add	ptra, #44
1e0d0     04 4E 05 F1 | 	add	fp, #4
1e0d4     A7 12 62 FC | 	wrlong	arg01, fp
1e0d8     09 1F 02 FB | 	rdlong	local01, arg01
1e0dc     08 4E 05 F1 | 	add	fp, #8
1e0e0     A7 1E 62 FC | 	wrlong	local01, fp
1e0e4     08 4E 85 F1 | 	sub	fp, #8
1e0e8     A7 20 02 FB | 	rdlong	local02, fp
1e0ec     04 4E 85 F1 | 	sub	fp, #4
1e0f0     2B 20 06 F1 | 	add	local02, #43
1e0f4     10 21 C2 FA | 	rdbyte	local02, local02
1e0f8     A0 20 CE F7 | 	test	local02, #160 wz
1e0fc     06 FA 05 56 |  if_ne	mov	result1, #6
1e100     F8 03 90 5D |  if_ne	jmp	#LR__3395
1e104                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
1e104     14 4E 05 F1 | 	add	fp, #20
1e108     A7 00 68 FC | 	wrlong	#0, fp
1e10c     14 4E 85 F1 | 	sub	fp, #20
1e110     97 28 48 FB | 	callpa	#(@LR__3381-@LR__3380)>>2,fcache_load_ptr_
1e114                 | LR__3380
1e114     0C 4E 05 F1 | 	add	fp, #12
1e118     A7 20 02 FB | 	rdlong	local02, fp
1e11c     0C 20 06 F1 | 	add	local02, #12
1e120     10 23 02 FB | 	rdlong	local03, local02
1e124     08 4E 05 F1 | 	add	fp, #8
1e128     A7 24 02 FB | 	rdlong	local04, fp
1e12c     14 4E 85 F1 | 	sub	fp, #20
1e130     01 24 66 F0 | 	shl	local04, #1
1e134     11 25 02 F1 | 	add	local04, local03
1e138     12 21 EA FA | 	rdword	local02, local04 wz
1e13c     24 00 90 AD |  if_e	jmp	#LR__3382
1e140     14 4E 05 F1 | 	add	fp, #20
1e144     A7 26 02 FB | 	rdlong	local05, fp
1e148     13 29 02 F6 | 	mov	local06, local05
1e14c     13 2B 02 F6 | 	mov	local07, local05
1e150     15 2D 02 F6 | 	mov	local08, local07
1e154     01 2C 06 F1 | 	add	local08, #1
1e158     A7 2C 62 FC | 	wrlong	local08, fp
1e15c     14 4E 85 F1 | 	sub	fp, #20
1e160     B0 FF 9F FD | 	jmp	#LR__3380
1e164                 | LR__3381
1e164                 | LR__3382
1e164     1C 4E 05 F1 | 	add	fp, #28
1e168     A7 12 02 F6 | 	mov	arg01, fp
1e16c     18 4E 85 F1 | 	sub	fp, #24
1e170     A7 14 02 FB | 	rdlong	arg02, fp
1e174     04 4E 85 F1 | 	sub	fp, #4
1e178     20 14 06 F1 | 	add	arg02, #32
1e17c     0C 16 06 F6 | 	mov	arg03, #12
1e180     5C 75 BF FD | 	call	#__system____builtin_memmove
1e184     27 4E 05 F1 | 	add	fp, #39
1e188     A7 2E C2 FA | 	rdbyte	local09, fp
1e18c     27 4E 85 F1 | 	sub	fp, #39
1e190     01 2E CE F7 | 	test	local09, #1 wz
1e194     F4 00 90 AD |  if_e	jmp	#LR__3385
1e198     04 4E 05 F1 | 	add	fp, #4
1e19c     A7 30 02 FB | 	rdlong	local10, fp
1e1a0     2B 30 06 F1 | 	add	local10, #43
1e1a4     18 81 48 FC | 	wrbyte	#64, local10
1e1a8                 | ' 		dp->fn[ 11 ] =  0x40 ;
1e1a8                 | ' 		for (n = 1; n < 100; n++) {
1e1a8     0C 4E 05 F1 | 	add	fp, #12
1e1ac     A7 02 68 FC | 	wrlong	#1, fp
1e1b0     10 4E 85 F1 | 	sub	fp, #16
1e1b4                 | LR__3383
1e1b4     10 4E 05 F1 | 	add	fp, #16
1e1b8     A7 20 02 FB | 	rdlong	local02, fp
1e1bc     10 4E 85 F1 | 	sub	fp, #16
1e1c0     64 20 16 F2 | 	cmp	local02, #100 wc
1e1c4     70 00 90 3D |  if_ae	jmp	#LR__3384
1e1c8     04 4E 05 F1 | 	add	fp, #4
1e1cc     A7 12 02 FB | 	rdlong	arg01, fp
1e1d0     20 12 06 F1 | 	add	arg01, #32
1e1d4     18 4E 05 F1 | 	add	fp, #24
1e1d8     A7 14 02 F6 | 	mov	arg02, fp
1e1dc     10 4E 85 F1 | 	sub	fp, #16
1e1e0     A7 30 02 FB | 	rdlong	local10, fp
1e1e4     0C 30 06 F1 | 	add	local10, #12
1e1e8     18 17 02 FB | 	rdlong	arg03, local10
1e1ec     04 4E 05 F1 | 	add	fp, #4
1e1f0     A7 18 02 FB | 	rdlong	arg04, fp
1e1f4     10 4E 85 F1 | 	sub	fp, #16
1e1f8     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
1e1fc     04 4E 05 F1 | 	add	fp, #4
1e200     A7 12 02 FB | 	rdlong	arg01, fp
1e204     04 4E 85 F1 | 	sub	fp, #4
1e208     70 FC BF FD | 	call	#_fatfs_cc_dir_find
1e20c     08 4E 05 F1 | 	add	fp, #8
1e210     A7 FA 61 FC | 	wrlong	result1, fp
1e214     00 FA 4D F2 | 	cmps	result1, #0 wz
1e218     08 4E 85 F1 | 	sub	fp, #8
1e21c     18 00 90 5D |  if_ne	jmp	#LR__3384
1e220     10 4E 05 F1 | 	add	fp, #16
1e224     A7 30 02 FB | 	rdlong	local10, fp
1e228     01 30 06 F1 | 	add	local10, #1
1e22c     A7 30 62 FC | 	wrlong	local10, fp
1e230     10 4E 85 F1 | 	sub	fp, #16
1e234     7C FF 9F FD | 	jmp	#LR__3383
1e238                 | LR__3384
1e238     10 4E 05 F1 | 	add	fp, #16
1e23c     A7 30 02 FB | 	rdlong	local10, fp
1e240     10 4E 85 F1 | 	sub	fp, #16
1e244     64 30 0E F2 | 	cmp	local10, #100 wz
1e248     07 FA 05 A6 |  if_e	mov	result1, #7
1e24c     AC 02 90 AD |  if_e	jmp	#LR__3395
1e250     08 4E 05 F1 | 	add	fp, #8
1e254     A7 30 02 FB | 	rdlong	local10, fp
1e258     08 4E 85 F1 | 	sub	fp, #8
1e25c     04 30 0E F2 | 	cmp	local10, #4 wz
1e260     08 4E 05 51 |  if_ne	add	fp, #8
1e264     A7 FA 01 5B |  if_ne	rdlong	result1, fp
1e268     08 4E 85 51 |  if_ne	sub	fp, #8
1e26c     8C 02 90 5D |  if_ne	jmp	#LR__3395
1e270     04 4E 05 F1 | 	add	fp, #4
1e274     A7 30 02 FB | 	rdlong	local10, fp
1e278     23 4E 05 F1 | 	add	fp, #35
1e27c     A7 1E C2 FA | 	rdbyte	local01, fp
1e280     27 4E 85 F1 | 	sub	fp, #39
1e284     2B 30 06 F1 | 	add	local10, #43
1e288     18 1F 42 FC | 	wrbyte	local01, local10
1e28c                 | LR__3385
1e28c     27 4E 05 F1 | 	add	fp, #39
1e290     A7 20 C2 FA | 	rdbyte	local02, fp
1e294     27 4E 85 F1 | 	sub	fp, #39
1e298     02 20 CE F7 | 	test	local02, #2 wz
1e29c     20 00 90 AD |  if_e	jmp	#LR__3386
1e2a0     14 4E 05 F1 | 	add	fp, #20
1e2a4     A7 30 02 FB | 	rdlong	local10, fp
1e2a8     0C 30 06 F1 | 	add	local10, #12
1e2ac     0D 30 16 FD | 	qdiv	local10, #13
1e2b0     14 4E 85 F1 | 	sub	fp, #20
1e2b4     18 30 62 FD | 	getqx	local10
1e2b8     01 30 06 F1 | 	add	local10, #1
1e2bc     04 00 90 FD | 	jmp	#LR__3387
1e2c0                 | LR__3386
1e2c0     01 30 06 F6 | 	mov	local10, #1
1e2c4                 | LR__3387
1e2c4     18 4E 05 F1 | 	add	fp, #24
1e2c8     A7 30 62 FC | 	wrlong	local10, fp
1e2cc     14 4E 85 F1 | 	sub	fp, #20
1e2d0     A7 12 02 FB | 	rdlong	arg01, fp
1e2d4     18 15 02 F6 | 	mov	arg02, local10
1e2d8     04 4E 85 F1 | 	sub	fp, #4
1e2dc     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
1e2e0     08 4E 05 F1 | 	add	fp, #8
1e2e4     A7 FA 61 FC | 	wrlong	result1, fp
1e2e8     08 4E 85 F1 | 	sub	fp, #8
1e2ec     00 FA 0D F2 | 	cmp	result1, #0 wz
1e2f0     38 01 90 5D |  if_ne	jmp	#LR__3392
1e2f4     18 4E 05 F1 | 	add	fp, #24
1e2f8     A7 30 02 FB | 	rdlong	local10, fp
1e2fc     01 30 8E F1 | 	sub	local10, #1 wz
1e300     A7 30 62 FC | 	wrlong	local10, fp
1e304     18 4E 85 F1 | 	sub	fp, #24
1e308     20 01 90 AD |  if_e	jmp	#LR__3392
1e30c     04 4E 05 F1 | 	add	fp, #4
1e310     A7 30 02 FB | 	rdlong	local10, fp
1e314     18 13 02 F6 | 	mov	arg01, local10
1e318     14 4E 05 F1 | 	add	fp, #20
1e31c     A7 18 02 FB | 	rdlong	arg04, fp
1e320     18 4E 85 F1 | 	sub	fp, #24
1e324     05 18 66 F0 | 	shl	arg04, #5
1e328     10 30 06 F1 | 	add	local10, #16
1e32c     18 15 02 FB | 	rdlong	arg02, local10
1e330     0C 15 82 F1 | 	sub	arg02, arg04
1e334     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
1e338     08 4E 05 F1 | 	add	fp, #8
1e33c     A7 FA 61 FC | 	wrlong	result1, fp
1e340     08 4E 85 F1 | 	sub	fp, #8
1e344     00 FA 0D F2 | 	cmp	result1, #0 wz
1e348     E0 00 90 5D |  if_ne	jmp	#LR__3391
1e34c     04 4E 05 F1 | 	add	fp, #4
1e350     A7 12 02 FB | 	rdlong	arg01, fp
1e354     04 4E 85 F1 | 	sub	fp, #4
1e358     20 12 06 F1 | 	add	arg01, #32
1e35c     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
1e360     FD 30 02 F6 | 	mov	local10, result1
1e364     28 4E 05 F1 | 	add	fp, #40
1e368     A7 30 42 FC | 	wrbyte	local10, fp
1e36c     28 4E 85 F1 | 	sub	fp, #40
1e370                 | ' 			sum = sum_sfn(dp->fn);
1e370                 | ' 			do {
1e370                 | LR__3388
1e370     0C 4E 05 F1 | 	add	fp, #12
1e374     A7 12 02 FB | 	rdlong	arg01, fp
1e378     08 4E 85 F1 | 	sub	fp, #8
1e37c     A7 1E 02 FB | 	rdlong	local01, fp
1e380     04 4E 85 F1 | 	sub	fp, #4
1e384     18 1E 06 F1 | 	add	local01, #24
1e388     0F 15 02 FB | 	rdlong	arg02, local01
1e38c     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
1e390     08 4E 05 F1 | 	add	fp, #8
1e394     A7 FA 61 FC | 	wrlong	result1, fp
1e398     00 FA 4D F2 | 	cmps	result1, #0 wz
1e39c     08 4E 85 F1 | 	sub	fp, #8
1e3a0     88 00 90 5D |  if_ne	jmp	#LR__3390
1e3a4     0C 4E 05 F1 | 	add	fp, #12
1e3a8     A7 20 02 FB | 	rdlong	local02, fp
1e3ac     0C 20 06 F1 | 	add	local02, #12
1e3b0     10 13 02 FB | 	rdlong	arg01, local02
1e3b4     08 4E 85 F1 | 	sub	fp, #8
1e3b8     A7 1E 02 FB | 	rdlong	local01, fp
1e3bc     1C 1E 06 F1 | 	add	local01, #28
1e3c0     0F 15 02 FB | 	rdlong	arg02, local01
1e3c4     14 4E 05 F1 | 	add	fp, #20
1e3c8     A7 16 02 FB | 	rdlong	arg03, fp
1e3cc     10 4E 05 F1 | 	add	fp, #16
1e3d0     A7 18 C2 FA | 	rdbyte	arg04, fp
1e3d4     28 4E 85 F1 | 	sub	fp, #40
1e3d8     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
1e3dc     0C 4E 05 F1 | 	add	fp, #12
1e3e0     A7 30 02 FB | 	rdlong	local10, fp
1e3e4     03 30 06 F1 | 	add	local10, #3
1e3e8     18 03 48 FC | 	wrbyte	#1, local10
1e3ec     08 4E 85 F1 | 	sub	fp, #8
1e3f0     A7 12 02 FB | 	rdlong	arg01, fp
1e3f4     04 4E 85 F1 | 	sub	fp, #4
1e3f8     00 14 06 F6 | 	mov	arg02, #0
1e3fc     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
1e400     08 4E 05 F1 | 	add	fp, #8
1e404     A7 FA 61 FC | 	wrlong	result1, fp
1e408     00 FA 4D F2 | 	cmps	result1, #0 wz
1e40c     08 4E 85 F1 | 	sub	fp, #8
1e410     18 00 90 5D |  if_ne	jmp	#LR__3389
1e414     18 4E 05 F1 | 	add	fp, #24
1e418     A7 30 02 FB | 	rdlong	local10, fp
1e41c     01 30 8E F1 | 	sub	local10, #1 wz
1e420     A7 30 62 FC | 	wrlong	local10, fp
1e424     18 4E 85 F1 | 	sub	fp, #24
1e428     44 FF 9F 5D |  if_ne	jmp	#LR__3388
1e42c                 | LR__3389
1e42c                 | LR__3390
1e42c                 | LR__3391
1e42c                 | LR__3392
1e42c     08 4E 05 F1 | 	add	fp, #8
1e430     A7 30 0A FB | 	rdlong	local10, fp wz
1e434     08 4E 85 F1 | 	sub	fp, #8
1e438     B4 00 90 5D |  if_ne	jmp	#LR__3394
1e43c     0C 4E 05 F1 | 	add	fp, #12
1e440     A7 12 02 FB | 	rdlong	arg01, fp
1e444     08 4E 85 F1 | 	sub	fp, #8
1e448     A7 1E 02 FB | 	rdlong	local01, fp
1e44c     04 4E 85 F1 | 	sub	fp, #4
1e450     18 1E 06 F1 | 	add	local01, #24
1e454     0F 15 02 FB | 	rdlong	arg02, local01
1e458     18 E6 BF FD | 	call	#_fatfs_cc_move_window
1e45c     08 4E 05 F1 | 	add	fp, #8
1e460     A7 FA 61 FC | 	wrlong	result1, fp
1e464     08 4E 85 F1 | 	sub	fp, #8
1e468     00 FA 0D F2 | 	cmp	result1, #0 wz
1e46c     80 00 90 5D |  if_ne	jmp	#LR__3393
1e470     04 4E 05 F1 | 	add	fp, #4
1e474     A7 20 02 FB | 	rdlong	local02, fp
1e478     04 4E 85 F1 | 	sub	fp, #4
1e47c     1C 20 06 F1 | 	add	local02, #28
1e480     10 13 02 FB | 	rdlong	arg01, local02
1e484     00 14 06 F6 | 	mov	arg02, #0
1e488     20 16 06 F6 | 	mov	arg03, #32
1e48c     98 00 A0 FD | 	call	#\builtin_bytefill_
1e490     04 4E 05 F1 | 	add	fp, #4
1e494     A7 14 02 FB | 	rdlong	arg02, fp
1e498     0A 1F 02 F6 | 	mov	local01, arg02
1e49c     1C 1E 06 F1 | 	add	local01, #28
1e4a0     0F 13 02 FB | 	rdlong	arg01, local01
1e4a4     04 4E 85 F1 | 	sub	fp, #4
1e4a8     20 14 06 F1 | 	add	arg02, #32
1e4ac     0B 16 06 F6 | 	mov	arg03, #11
1e4b0     2C 72 BF FD | 	call	#__system____builtin_memmove
1e4b4     04 4E 05 F1 | 	add	fp, #4
1e4b8     A7 2E 02 FB | 	rdlong	local09, fp
1e4bc     17 31 02 F6 | 	mov	local10, local09
1e4c0     1C 30 06 F1 | 	add	local10, #28
1e4c4     18 1F 02 FB | 	rdlong	local01, local10
1e4c8     2B 2E 06 F1 | 	add	local09, #43
1e4cc     17 31 C2 FA | 	rdbyte	local10, local09
1e4d0     18 30 06 F5 | 	and	local10, #24
1e4d4     0C 1E 06 F1 | 	add	local01, #12
1e4d8     0F 31 42 FC | 	wrbyte	local10, local01
1e4dc     08 4E 05 F1 | 	add	fp, #8
1e4e0     A7 30 02 FB | 	rdlong	local10, fp
1e4e4     0C 4E 85 F1 | 	sub	fp, #12
1e4e8     03 30 06 F1 | 	add	local10, #3
1e4ec     18 03 48 FC | 	wrbyte	#1, local10
1e4f0                 | LR__3393
1e4f0                 | LR__3394
1e4f0                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
1e4f0                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
1e4f0                 | ' 
1e4f0                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
1e4f0                 | ' 
1e4f0                 | ' 			fs->wflag = 1;
1e4f0                 | ' 		}
1e4f0                 | ' 	}
1e4f0                 | ' 
1e4f0                 | ' 	return res;
1e4f0     08 4E 05 F1 | 	add	fp, #8
1e4f4     A7 FA 01 FB | 	rdlong	result1, fp
1e4f8     08 4E 85 F1 | 	sub	fp, #8
1e4fc                 | LR__3395
1e4fc     A7 F0 03 F6 | 	mov	ptra, fp
1e500     B2 00 A0 FD | 	call	#popregs_
1e504                 | _fatfs_cc_dir_register_ret
1e504     2D 00 64 FD | 	ret
1e508                 | 
1e508                 | _fatfs_cc_dir_remove
1e508     05 4A 05 F6 | 	mov	COUNT_, #5
1e50c     A8 00 A0 FD | 	call	#pushregs_
1e510     09 1F 02 F6 | 	mov	local01, arg01
1e514     0F 21 02 FB | 	rdlong	local02, local01
1e518     10 1E 06 F1 | 	add	local01, #16
1e51c     0F 23 02 FB | 	rdlong	local03, local01
1e520     1C 1E 06 F1 | 	add	local01, #28
1e524     0F 15 02 FB | 	rdlong	arg02, local01
1e528     2C 1E 86 F1 | 	sub	local01, #44
1e52c     FF FF 7F FF 
1e530     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
1e534     00 24 06 A6 |  if_e	mov	local04, #0
1e538     18 00 90 AD |  if_e	jmp	#LR__3400
1e53c     0F 13 02 F6 | 	mov	arg01, local01
1e540     2C 1E 06 F1 | 	add	local01, #44
1e544     0F 15 02 FB | 	rdlong	arg02, local01
1e548     2C 1E 86 F1 | 	sub	local01, #44
1e54c     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
1e550     FD 24 02 F6 | 	mov	local04, result1
1e554                 | LR__3400
1e554     12 27 0A F6 | 	mov	local05, local04 wz
1e558     64 00 90 5D |  if_ne	jmp	#LR__3403
1e55c                 | ' 		do {
1e55c                 | LR__3401
1e55c     18 1E 06 F1 | 	add	local01, #24
1e560     0F 15 02 FB | 	rdlong	arg02, local01
1e564     18 1E 86 F1 | 	sub	local01, #24
1e568     10 13 02 F6 | 	mov	arg01, local02
1e56c     04 E5 BF FD | 	call	#_fatfs_cc_move_window
1e570     FD 26 0A F6 | 	mov	local05, result1 wz
1e574     40 00 90 5D |  if_ne	jmp	#LR__3402
1e578     1C 1E 06 F1 | 	add	local01, #28
1e57c     0F 25 02 FB | 	rdlong	local04, local01
1e580     12 CB 49 FC | 	wrbyte	#229, local04
1e584     03 20 06 F1 | 	add	local02, #3
1e588     10 03 48 FC | 	wrbyte	#1, local02
1e58c     03 20 86 F1 | 	sub	local02, #3
1e590     0C 1E 86 F1 | 	sub	local01, #12
1e594     0F 25 02 FB | 	rdlong	local04, local01
1e598     10 1E 86 F1 | 	sub	local01, #16
1e59c     11 25 12 F2 | 	cmp	local04, local03 wc
1e5a0     14 00 90 3D |  if_ae	jmp	#LR__3402
1e5a4     0F 13 02 F6 | 	mov	arg01, local01
1e5a8     00 14 06 F6 | 	mov	arg02, #0
1e5ac     90 EF BF FD | 	call	#_fatfs_cc_dir_next
1e5b0     FD 26 0A F6 | 	mov	local05, result1 wz
1e5b4     A4 FF 9F AD |  if_e	jmp	#LR__3401
1e5b8                 | LR__3402
1e5b8     04 26 0E F2 | 	cmp	local05, #4 wz
1e5bc     02 26 06 A6 |  if_e	mov	local05, #2
1e5c0                 | LR__3403
1e5c0                 | ' 	}
1e5c0                 | ' #line 2590 "ff.c"
1e5c0                 | ' 	return res;
1e5c0     13 FB 01 F6 | 	mov	result1, local05
1e5c4     A7 F0 03 F6 | 	mov	ptra, fp
1e5c8     B2 00 A0 FD | 	call	#popregs_
1e5cc                 | _fatfs_cc_dir_remove_ret
1e5cc     2D 00 64 FD | 	ret
1e5d0                 | 
1e5d0                 | _fatfs_cc_get_fileinfo
1e5d0     0F 4A 05 F6 | 	mov	COUNT_, #15
1e5d4     A8 00 A0 FD | 	call	#pushregs_
1e5d8     09 1F 02 F6 | 	mov	local01, arg01
1e5dc     0A 21 02 F6 | 	mov	local02, arg02
1e5e0     0F 23 02 FB | 	rdlong	local03, local01
1e5e4     1C 20 06 F1 | 	add	local02, #28
1e5e8     10 01 48 FC | 	wrbyte	#0, local02
1e5ec     1C 20 86 F1 | 	sub	local02, #28
1e5f0     18 1E 06 F1 | 	add	local01, #24
1e5f4     0F 25 0A FB | 	rdlong	local04, local01 wz
1e5f8     18 1E 86 F1 | 	sub	local01, #24
1e5fc     90 03 90 AD |  if_e	jmp	#LR__3424
1e600     2C 1E 06 F1 | 	add	local01, #44
1e604     0F 25 02 FB | 	rdlong	local04, local01
1e608     2C 1E 86 F1 | 	sub	local01, #44
1e60c     FF FF 7F FF 
1e610     FF 25 0E F2 | 	cmp	local04, ##-1 wz
1e614     D8 00 90 AD |  if_e	jmp	#LR__3413
1e618     00 26 06 F6 | 	mov	local05, #0
1e61c     00 28 06 F6 | 	mov	local06, #0
1e620     00 2A 06 F6 | 	mov	local07, #0
1e624                 | ' 			si = di = 0;
1e624                 | ' 			hs = 0;
1e624                 | ' 			while (fs->lfnbuf[si] != 0) {
1e624                 | LR__3410
1e624     0C 22 06 F1 | 	add	local03, #12
1e628     11 25 02 FB | 	rdlong	local04, local03
1e62c     0C 22 86 F1 | 	sub	local03, #12
1e630     14 2D 02 F6 | 	mov	local08, local06
1e634     01 2C 66 F0 | 	shl	local08, #1
1e638     12 2D 02 F1 | 	add	local08, local04
1e63c     16 25 EA FA | 	rdword	local04, local08 wz
1e640     90 00 90 AD |  if_e	jmp	#LR__3412
1e644     0C 22 06 F1 | 	add	local03, #12
1e648     11 2F 02 FB | 	rdlong	local09, local03
1e64c     0C 22 86 F1 | 	sub	local03, #12
1e650     14 31 02 F6 | 	mov	local10, local06
1e654     01 30 66 F0 | 	shl	local10, #1
1e658     17 31 02 F1 | 	add	local10, local09
1e65c     18 33 E2 FA | 	rdword	local11, local10
1e660     15 25 02 F6 | 	mov	local04, local07
1e664     0F 24 4E F7 | 	zerox	local04, #15 wz
1e668     01 28 06 F1 | 	add	local06, #1
1e66c     24 00 90 5D |  if_ne	jmp	#LR__3411
1e670     19 35 32 F9 | 	getword	local12, local11, #0
1e674     6C 00 00 FF 
1e678     00 34 16 F2 | 	cmp	local12, ##55296 wc
1e67c     14 00 90 CD |  if_b	jmp	#LR__3411
1e680     19 37 32 F9 | 	getword	local13, local11, #0
1e684     70 00 00 FF 
1e688     00 36 16 F2 | 	cmp	local13, ##57344 wc
1e68c     19 2B 02 C6 |  if_b	mov	local07, local11
1e690                 | ' 					hs = wc; continue;
1e690     90 FF 9F CD |  if_b	jmp	#LR__3410
1e694                 | LR__3411
1e694     15 13 32 F9 | 	getword	arg01, local07, #0
1e698     10 12 66 F0 | 	shl	arg01, #16
1e69c     19 33 32 F9 | 	getword	local11, local11, #0
1e6a0     19 13 42 F5 | 	or	arg01, local11
1e6a4     13 15 02 F6 | 	mov	arg02, local05
1e6a8     1C 20 06 F1 | 	add	local02, #28
1e6ac     10 15 02 F1 | 	add	arg02, local02
1e6b0     FF 16 06 F6 | 	mov	arg03, #255
1e6b4     13 17 82 F1 | 	sub	arg03, local05
1e6b8     1C 20 86 F1 | 	sub	local02, #28
1e6bc     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
1e6c0     FD 38 0A F6 | 	mov	local14, result1 wz
1e6c4     00 26 06 A6 |  if_e	mov	local05, #0
1e6c8     1C 27 02 51 |  if_ne	add	local05, local14
1e6cc     00 2A 06 56 |  if_ne	mov	local07, #0
1e6d0     50 FF 9F 5D |  if_ne	jmp	#LR__3410
1e6d4                 | LR__3412
1e6d4     15 25 02 F6 | 	mov	local04, local07
1e6d8     0F 24 4E F7 | 	zerox	local04, #15 wz
1e6dc     00 26 06 56 |  if_ne	mov	local05, #0
1e6e0     1C 20 06 F1 | 	add	local02, #28
1e6e4     10 27 02 F1 | 	add	local05, local02
1e6e8     13 01 48 FC | 	wrbyte	#0, local05
1e6ec     1C 20 86 F1 | 	sub	local02, #28
1e6f0                 | LR__3413
1e6f0     00 26 06 F6 | 	mov	local05, #0
1e6f4     00 28 06 F6 | 	mov	local06, #0
1e6f8                 | ' 			fno->fname[di] = 0;
1e6f8                 | ' 		}
1e6f8                 | ' 	}
1e6f8                 | ' 
1e6f8                 | ' 	si = di = 0;
1e6f8                 | ' 	while (si < 11) {
1e6f8                 | LR__3414
1e6f8     0B 28 16 F2 | 	cmp	local06, #11 wc
1e6fc     20 01 90 3D |  if_ae	jmp	#LR__3417
1e700     1C 1E 06 F1 | 	add	local01, #28
1e704     0F 2F 02 FB | 	rdlong	local09, local01
1e708     1C 1E 86 F1 | 	sub	local01, #28
1e70c     14 31 02 F6 | 	mov	local10, local06
1e710     17 31 02 F1 | 	add	local10, local09
1e714     18 33 C2 FA | 	rdbyte	local11, local10
1e718     19 25 32 F9 | 	getword	local04, local11, #0
1e71c     20 24 0E F2 | 	cmp	local04, #32 wz
1e720     01 28 06 F1 | 	add	local06, #1
1e724     D0 FF 9F AD |  if_e	jmp	#LR__3414
1e728     19 25 32 F9 | 	getword	local04, local11, #0
1e72c     05 24 0E F2 | 	cmp	local04, #5 wz
1e730     E5 32 06 A6 |  if_e	mov	local11, #229
1e734     09 28 0E F2 | 	cmp	local06, #9 wz
1e738     20 00 90 5D |  if_ne	jmp	#LR__3415
1e73c     0C 26 16 F2 | 	cmp	local05, #12 wc
1e740     18 00 90 3D |  if_ae	jmp	#LR__3415
1e744     13 37 02 F6 | 	mov	local13, local05
1e748     0C 20 06 F1 | 	add	local02, #12
1e74c     10 37 02 F1 | 	add	local13, local02
1e750     1B 5D 48 FC | 	wrbyte	#46, local13
1e754     01 26 06 F1 | 	add	local05, #1
1e758     0C 20 86 F1 | 	sub	local02, #12
1e75c                 | LR__3415
1e75c     19 13 32 F9 | 	getword	arg01, local11, #0
1e760     07 12 4E F7 | 	zerox	arg01, #7 wz
1e764     00 FA 05 56 |  if_ne	mov	result1, #0
1e768                 | ' 
1e768                 | ' 	return 0;
1e768     00 FA 05 A6 |  if_e	mov	result1, #0
1e76c     00 FA 0D F2 | 	cmp	result1, #0 wz
1e770     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
1e774     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
1e778     50 00 90 AD |  if_e	jmp	#LR__3416
1e77c     1C 1E 06 F1 | 	add	local01, #28
1e780     0F 31 02 FB | 	rdlong	local10, local01
1e784     1C 1E 86 F1 | 	sub	local01, #28
1e788     14 2D 02 F6 | 	mov	local08, local06
1e78c     18 2D 02 F1 | 	add	local08, local10
1e790     16 13 CA FA | 	rdbyte	arg01, local08 wz
1e794     00 FA 05 56 |  if_ne	mov	result1, #0
1e798                 | ' 
1e798                 | ' 	return 0;
1e798     00 FA 05 A6 |  if_e	mov	result1, #0
1e79c     00 FA 0D F2 | 	cmp	result1, #0 wz
1e7a0     28 00 90 AD |  if_e	jmp	#LR__3416
1e7a4     19 33 32 F9 | 	getword	local11, local11, #0
1e7a8     08 32 66 F0 | 	shl	local11, #8
1e7ac     1C 1E 06 F1 | 	add	local01, #28
1e7b0     0F 39 02 FB | 	rdlong	local14, local01
1e7b4     1C 1E 86 F1 | 	sub	local01, #28
1e7b8     14 2F 02 F6 | 	mov	local09, local06
1e7bc     1C 2F 02 F1 | 	add	local09, local14
1e7c0     17 35 C2 FA | 	rdbyte	local12, local09
1e7c4     1A 33 42 F5 | 	or	local11, local12
1e7c8     01 28 06 F1 | 	add	local06, #1
1e7cc                 | LR__3416
1e7cc     19 13 02 F6 | 	mov	arg01, local11
1e7d0     01 00 00 FF 
1e7d4     52 15 06 F6 | 	mov	arg02, ##850
1e7d8     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
1e7dc     FD 32 02 F6 | 	mov	local11, result1
1e7e0     19 25 02 F6 | 	mov	local04, local11
1e7e4     0F 24 4E F7 | 	zerox	local04, #15 wz
1e7e8     00 26 06 A6 |  if_e	mov	local05, #0
1e7ec     30 00 90 AD |  if_e	jmp	#LR__3417
1e7f0     19 13 32 F9 | 	getword	arg01, local11, #0
1e7f4     13 15 02 F6 | 	mov	arg02, local05
1e7f8     0C 20 06 F1 | 	add	local02, #12
1e7fc     10 15 02 F1 | 	add	arg02, local02
1e800     0C 16 06 F6 | 	mov	arg03, #12
1e804     13 17 82 F1 | 	sub	arg03, local05
1e808     0C 20 86 F1 | 	sub	local02, #12
1e80c     EC DF BF FD | 	call	#_fatfs_cc_put_utf
1e810     FD 38 0A F6 | 	mov	local14, result1 wz
1e814     00 26 06 A6 |  if_e	mov	local05, #0
1e818     1C 27 02 51 |  if_ne	add	local05, local14
1e81c     D8 FE 9F 5D |  if_ne	jmp	#LR__3414
1e820                 | LR__3417
1e820     13 25 02 F6 | 	mov	local04, local05
1e824     0C 20 06 F1 | 	add	local02, #12
1e828     10 25 02 F1 | 	add	local04, local02
1e82c     12 01 48 FC | 	wrbyte	#0, local04
1e830     10 20 06 F1 | 	add	local02, #16
1e834     10 25 CA FA | 	rdbyte	local04, local02 wz
1e838     1C 20 86 F1 | 	sub	local02, #28
1e83c     F8 00 90 5D |  if_ne	jmp	#LR__3423
1e840     00 26 0E F2 | 	cmp	local05, #0 wz
1e844     1C 00 90 5D |  if_ne	jmp	#LR__3418
1e848     13 37 02 F6 | 	mov	local13, local05
1e84c     1C 20 06 F1 | 	add	local02, #28
1e850     10 37 02 F1 | 	add	local13, local02
1e854     1B 7F 48 FC | 	wrbyte	#63, local13
1e858     01 26 06 F1 | 	add	local05, #1
1e85c     1C 20 86 F1 | 	sub	local02, #28
1e860     A4 00 90 FD | 	jmp	#LR__3422
1e864                 | LR__3418
1e864                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
1e864     00 26 06 F6 | 	mov	local05, #0
1e868     00 28 06 F6 | 	mov	local06, #0
1e86c     08 3A 06 F6 | 	mov	local15, #8
1e870                 | LR__3419
1e870     14 25 02 F6 | 	mov	local04, local06
1e874     0C 20 06 F1 | 	add	local02, #12
1e878     10 25 02 F1 | 	add	local04, local02
1e87c     12 37 CA FA | 	rdbyte	local13, local04 wz
1e880     0C 20 86 F1 | 	sub	local02, #12
1e884     80 00 90 AD |  if_e	jmp	#LR__3421
1e888     14 2D 02 F6 | 	mov	local08, local06
1e88c     0C 20 06 F1 | 	add	local02, #12
1e890     10 2D 02 F1 | 	add	local08, local02
1e894     16 33 C2 FA | 	rdbyte	local11, local08
1e898     19 39 32 F9 | 	getword	local14, local11, #0
1e89c     2E 38 0E F2 | 	cmp	local14, #46 wz
1e8a0     0C 20 86 F1 | 	sub	local02, #12
1e8a4     10 3A 06 A6 |  if_e	mov	local15, #16
1e8a8     19 39 32 F9 | 	getword	local14, local11, #0
1e8ac     41 38 16 F2 | 	cmp	local14, #65 wc
1e8b0     30 00 90 CD |  if_b	jmp	#LR__3420
1e8b4     19 2D 32 F9 | 	getword	local08, local11, #0
1e8b8     5B 2C 16 F2 | 	cmp	local08, #91 wc
1e8bc     24 00 90 3D |  if_ae	jmp	#LR__3420
1e8c0     1C 1E 06 F1 | 	add	local01, #28
1e8c4     0F 2F 02 FB | 	rdlong	local09, local01
1e8c8     1C 1E 86 F1 | 	sub	local01, #28
1e8cc     0C 2E 06 F1 | 	add	local09, #12
1e8d0     17 31 C2 FA | 	rdbyte	local10, local09
1e8d4     1D 39 E2 F8 | 	getbyte	local14, local15, #0
1e8d8     1C 31 CA F7 | 	test	local10, local14 wz
1e8dc     19 33 32 59 |  if_ne	getword	local11, local11, #0
1e8e0     20 32 06 51 |  if_ne	add	local11, #32
1e8e4                 | LR__3420
1e8e4     13 39 02 F6 | 	mov	local14, local05
1e8e8     1C 20 06 F1 | 	add	local02, #28
1e8ec     10 39 02 F1 | 	add	local14, local02
1e8f0     19 33 32 F9 | 	getword	local11, local11, #0
1e8f4     1C 33 42 FC | 	wrbyte	local11, local14
1e8f8     01 28 06 F1 | 	add	local06, #1
1e8fc     01 26 06 F1 | 	add	local05, #1
1e900     1C 20 86 F1 | 	sub	local02, #28
1e904     68 FF 9F FD | 	jmp	#LR__3419
1e908                 | LR__3421
1e908                 | LR__3422
1e908     1C 20 06 F1 | 	add	local02, #28
1e90c     10 27 02 F1 | 	add	local05, local02
1e910     13 01 48 FC | 	wrbyte	#0, local05
1e914     1C 1E 06 F1 | 	add	local01, #28
1e918     0F 25 02 FB | 	rdlong	local04, local01
1e91c     1C 1E 86 F1 | 	sub	local01, #28
1e920     0C 24 06 F1 | 	add	local04, #12
1e924     12 37 CA FA | 	rdbyte	local13, local04 wz
1e928     1C 20 86 F1 | 	sub	local02, #28
1e92c     0C 20 06 A1 |  if_e	add	local02, #12
1e930     10 01 48 AC |  if_e	wrbyte	#0, local02
1e934     0C 20 86 A1 |  if_e	sub	local02, #12
1e938                 | LR__3423
1e938     1C 1E 06 F1 | 	add	local01, #28
1e93c     0F 35 02 FB | 	rdlong	local12, local01
1e940     0B 34 06 F1 | 	add	local12, #11
1e944     1A 25 C2 FA | 	rdbyte	local04, local12
1e948     3F 24 06 F5 | 	and	local04, #63
1e94c     08 20 06 F1 | 	add	local02, #8
1e950     10 25 42 FC | 	wrbyte	local04, local02
1e954     08 20 86 F1 | 	sub	local02, #8
1e958     0F 13 02 FB | 	rdlong	arg01, local01
1e95c     1C 12 06 F1 | 	add	arg01, #28
1e960                 | ' {
1e960                 | ' 
1e960                 | ' 	return *((DWORD*)ptr);
1e960     09 FB 01 FB | 	rdlong	result1, arg01
1e964     10 FB 61 FC | 	wrlong	result1, local02
1e968     0F 13 02 FB | 	rdlong	arg01, local01
1e96c     16 12 06 F1 | 	add	arg01, #22
1e970                 | ' {
1e970                 | ' 
1e970                 | ' 	return *((WORD*)ptr);
1e970     09 FB E1 FA | 	rdword	result1, arg01
1e974     06 20 06 F1 | 	add	local02, #6
1e978     10 FB 51 FC | 	wrword	result1, local02
1e97c     0F 13 02 FB | 	rdlong	arg01, local01
1e980     18 12 06 F1 | 	add	arg01, #24
1e984                 | ' {
1e984                 | ' 
1e984                 | ' 	return *((WORD*)ptr);
1e984     09 FB E1 FA | 	rdword	result1, arg01
1e988     02 20 86 F1 | 	sub	local02, #2
1e98c     10 FB 51 FC | 	wrword	result1, local02
1e990                 | LR__3424
1e990     A7 F0 03 F6 | 	mov	ptra, fp
1e994     B2 00 A0 FD | 	call	#popregs_
1e998                 | _fatfs_cc_get_fileinfo_ret
1e998     2D 00 64 FD | 	ret
1e99c                 | 
1e99c                 | _fatfs_cc_create_name
1e99c     0D 4A 05 F6 | 	mov	COUNT_, #13
1e9a0     A8 00 A0 FD | 	call	#pushregs_
1e9a4     34 F0 07 F1 | 	add	ptra, #52
1e9a8     04 4E 05 F1 | 	add	fp, #4
1e9ac     A7 12 62 FC | 	wrlong	arg01, fp
1e9b0     04 4E 05 F1 | 	add	fp, #4
1e9b4     A7 14 62 FC | 	wrlong	arg02, fp
1e9b8     0A FB 01 FB | 	rdlong	result1, arg02
1e9bc     28 4E 05 F1 | 	add	fp, #40
1e9c0     A7 FA 61 FC | 	wrlong	result1, fp
1e9c4     2C 4E 85 F1 | 	sub	fp, #44
1e9c8     A7 FA 01 FB | 	rdlong	result1, fp
1e9cc     FD 1E 02 FB | 	rdlong	local01, result1
1e9d0     0C 1E 06 F1 | 	add	local01, #12
1e9d4     0F 21 02 FB | 	rdlong	local02, local01
1e9d8     14 4E 05 F1 | 	add	fp, #20
1e9dc     A7 20 62 FC | 	wrlong	local02, fp
1e9e0     14 4E 05 F1 | 	add	fp, #20
1e9e4     A7 00 68 FC | 	wrlong	#0, fp
1e9e8     2C 4E 85 F1 | 	sub	fp, #44
1e9ec                 | ' 
1e9ec                 | ' 
1e9ec                 | ' 
1e9ec                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
1e9ec                 | ' 	for (;;) {
1e9ec                 | LR__3430
1e9ec     30 4E 05 F1 | 	add	fp, #48
1e9f0     A7 12 02 F6 | 	mov	arg01, fp
1e9f4     30 4E 85 F1 | 	sub	fp, #48
1e9f8     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
1e9fc     1C 4E 05 F1 | 	add	fp, #28
1ea00     A7 FA 61 FC | 	wrlong	result1, fp
1ea04     1C 4E 85 F1 | 	sub	fp, #28
1ea08     FF FF 7F FF 
1ea0c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1ea10     06 FA 05 A6 |  if_e	mov	result1, #6
1ea14     74 08 90 AD |  if_e	jmp	#LR__3470
1ea18     1C 4E 05 F1 | 	add	fp, #28
1ea1c     A7 1E 02 FB | 	rdlong	local01, fp
1ea20     1C 4E 85 F1 | 	sub	fp, #28
1ea24     80 00 00 FF 
1ea28     00 1E 16 F2 | 	cmp	local01, ##65536 wc
1ea2c     3C 00 90 CD |  if_b	jmp	#LR__3431
1ea30     18 4E 05 F1 | 	add	fp, #24
1ea34     A7 22 02 FB | 	rdlong	local03, fp
1ea38     14 4E 05 F1 | 	add	fp, #20
1ea3c     A7 1E 02 FB | 	rdlong	local01, fp
1ea40     0F 25 02 F6 | 	mov	local04, local01
1ea44     01 24 06 F1 | 	add	local04, #1
1ea48     A7 24 62 FC | 	wrlong	local04, fp
1ea4c     01 1E 66 F0 | 	shl	local01, #1
1ea50     11 1F 02 F1 | 	add	local01, local03
1ea54     10 4E 85 F1 | 	sub	fp, #16
1ea58     A7 26 02 FB | 	rdlong	local05, fp
1ea5c     1C 4E 85 F1 | 	sub	fp, #28
1ea60     13 29 02 F6 | 	mov	local06, local05
1ea64     10 28 46 F0 | 	shr	local06, #16
1ea68     0F 29 52 FC | 	wrword	local06, local01
1ea6c                 | LR__3431
1ea6c     1C 4E 05 F1 | 	add	fp, #28
1ea70     A7 1E 02 FB | 	rdlong	local01, fp
1ea74     08 4E 85 F1 | 	sub	fp, #8
1ea78     A7 1E 52 FC | 	wrword	local01, fp
1ea7c     A7 1E E2 FA | 	rdword	local01, fp
1ea80     14 4E 85 F1 | 	sub	fp, #20
1ea84     20 1E 16 F2 | 	cmp	local01, #32 wc
1ea88     B0 00 90 CD |  if_b	jmp	#LR__3433
1ea8c     14 4E 05 F1 | 	add	fp, #20
1ea90     A7 1E E2 FA | 	rdword	local01, fp
1ea94     14 4E 85 F1 | 	sub	fp, #20
1ea98     2F 1E 0E F2 | 	cmp	local01, #47 wz
1ea9c     14 4E 05 51 |  if_ne	add	fp, #20
1eaa0     A7 24 E2 5A |  if_ne	rdword	local04, fp
1eaa4     14 4E 85 51 |  if_ne	sub	fp, #20
1eaa8     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
1eaac     8C 00 90 AD |  if_e	jmp	#LR__3433
1eab0     14 4E 05 F1 | 	add	fp, #20
1eab4     A7 12 E2 FA | 	rdword	arg01, fp
1eab8     14 4E 85 F1 | 	sub	fp, #20
1eabc     80 12 16 F2 | 	cmp	arg01, #128 wc
1eac0     24 00 90 3D |  if_ae	jmp	#LR__3432
1eac4     24 01 00 FF 
1eac8     FC 13 06 F6 | 	mov	arg01, ##@LR__4092
1eacc     14 4E 05 F1 | 	add	fp, #20
1ead0     A7 14 E2 FA | 	rdword	arg02, fp
1ead4     14 4E 85 F1 | 	sub	fp, #20
1ead8     FC D0 BF FD | 	call	#_fatfs_cc_strchr
1eadc     00 FA 0D F2 | 	cmp	result1, #0 wz
1eae0     06 FA 05 56 |  if_ne	mov	result1, #6
1eae4     A4 07 90 5D |  if_ne	jmp	#LR__3470
1eae8                 | LR__3432
1eae8     2C 4E 05 F1 | 	add	fp, #44
1eaec     A7 28 02 FB | 	rdlong	local06, fp
1eaf0     2C 4E 85 F1 | 	sub	fp, #44
1eaf4     FF 28 16 F2 | 	cmp	local06, #255 wc
1eaf8     06 FA 05 36 |  if_ae	mov	result1, #6
1eafc     8C 07 90 3D |  if_ae	jmp	#LR__3470
1eb00     18 4E 05 F1 | 	add	fp, #24
1eb04     A7 22 02 FB | 	rdlong	local03, fp
1eb08     14 4E 05 F1 | 	add	fp, #20
1eb0c     A7 20 02 FB | 	rdlong	local02, fp
1eb10     10 25 02 F6 | 	mov	local04, local02
1eb14     01 24 06 F1 | 	add	local04, #1
1eb18     A7 24 62 FC | 	wrlong	local04, fp
1eb1c     10 1F 02 F6 | 	mov	local01, local02
1eb20     01 1E 66 F0 | 	shl	local01, #1
1eb24     11 1F 02 F1 | 	add	local01, local03
1eb28     18 4E 85 F1 | 	sub	fp, #24
1eb2c     A7 28 E2 FA | 	rdword	local06, fp
1eb30     14 4E 85 F1 | 	sub	fp, #20
1eb34     0F 29 52 FC | 	wrword	local06, local01
1eb38     B0 FE 9F FD | 	jmp	#LR__3430
1eb3c                 | LR__3433
1eb3c     14 4E 05 F1 | 	add	fp, #20
1eb40     A7 2A E2 FA | 	rdword	local07, fp
1eb44     14 4E 85 F1 | 	sub	fp, #20
1eb48     20 2A 16 F2 | 	cmp	local07, #32 wc
1eb4c     10 4E 05 C1 |  if_b	add	fp, #16
1eb50     A7 08 48 CC |  if_b	wrbyte	#4, fp
1eb54     10 4E 85 C1 |  if_b	sub	fp, #16
1eb58     74 00 90 CD |  if_b	jmp	#LR__3438
1eb5c     97 24 48 FB | 	callpa	#(@LR__3436-@LR__3434)>>2,fcache_load_ptr_
1eb60                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
1eb60                 | LR__3434
1eb60     30 4E 05 F1 | 	add	fp, #48
1eb64     A7 24 02 FB | 	rdlong	local04, fp
1eb68     30 4E 85 F1 | 	sub	fp, #48
1eb6c     12 2B C2 FA | 	rdbyte	local07, local04
1eb70     2F 2A 0E F2 | 	cmp	local07, #47 wz
1eb74     18 00 90 AD |  if_e	jmp	#LR__3435
1eb78     30 4E 05 F1 | 	add	fp, #48
1eb7c     A7 24 02 FB | 	rdlong	local04, fp
1eb80     30 4E 85 F1 | 	sub	fp, #48
1eb84     12 21 C2 FA | 	rdbyte	local02, local04
1eb88     5C 20 0E F2 | 	cmp	local02, #92 wz
1eb8c     18 00 90 5D |  if_ne	jmp	#LR__3437
1eb90                 | LR__3435
1eb90     30 4E 05 F1 | 	add	fp, #48
1eb94     A7 1E 02 FB | 	rdlong	local01, fp
1eb98     01 1E 06 F1 | 	add	local01, #1
1eb9c     A7 1E 62 FC | 	wrlong	local01, fp
1eba0     30 4E 85 F1 | 	sub	fp, #48
1eba4     B8 FF 9F FD | 	jmp	#LR__3434
1eba8                 | LR__3436
1eba8                 | LR__3437
1eba8     10 4E 05 F1 | 	add	fp, #16
1ebac     A7 00 48 FC | 	wrbyte	#0, fp
1ebb0     20 4E 05 F1 | 	add	fp, #32
1ebb4     A7 28 02 FB | 	rdlong	local06, fp
1ebb8     30 4E 85 F1 | 	sub	fp, #48
1ebbc     14 2B C2 FA | 	rdbyte	local07, local06
1ebc0     20 2A 16 F2 | 	cmp	local07, #32 wc
1ebc4     10 4E 05 C1 |  if_b	add	fp, #16
1ebc8     A7 08 48 CC |  if_b	wrbyte	#4, fp
1ebcc     10 4E 85 C1 |  if_b	sub	fp, #16
1ebd0                 | LR__3438
1ebd0     08 4E 05 F1 | 	add	fp, #8
1ebd4     A7 2A 02 FB | 	rdlong	local07, fp
1ebd8     28 4E 05 F1 | 	add	fp, #40
1ebdc     A7 1E 02 FB | 	rdlong	local01, fp
1ebe0     30 4E 85 F1 | 	sub	fp, #48
1ebe4     15 1F 62 FC | 	wrlong	local01, local07
1ebe8     97 38 48 FB | 	callpa	#(@LR__3440-@LR__3439)>>2,fcache_load_ptr_
1ebec                 | ' 	}
1ebec                 | ' 	*path = p;
1ebec                 | ' #line 2862 "ff.c"
1ebec                 | ' 	while (di) {
1ebec                 | LR__3439
1ebec     2C 4E 05 F1 | 	add	fp, #44
1ebf0     A7 2A 0A FB | 	rdlong	local07, fp wz
1ebf4     2C 4E 85 F1 | 	sub	fp, #44
1ebf8     60 00 90 AD |  if_e	jmp	#LR__3441
1ebfc     18 4E 05 F1 | 	add	fp, #24
1ec00     A7 28 02 FB | 	rdlong	local06, fp
1ec04     14 4E 05 F1 | 	add	fp, #20
1ec08     A7 24 02 FB | 	rdlong	local04, fp
1ec0c     01 24 86 F1 | 	sub	local04, #1
1ec10     01 24 66 F0 | 	shl	local04, #1
1ec14     14 25 02 F1 | 	add	local04, local06
1ec18     12 29 E2 FA | 	rdword	local06, local04
1ec1c     18 4E 85 F1 | 	sub	fp, #24
1ec20     A7 28 52 FC | 	wrword	local06, fp
1ec24     A7 2A E2 FA | 	rdword	local07, fp
1ec28     14 4E 85 F1 | 	sub	fp, #20
1ec2c     20 2A 0E F2 | 	cmp	local07, #32 wz
1ec30     14 4E 05 51 |  if_ne	add	fp, #20
1ec34     A7 1E E2 5A |  if_ne	rdword	local01, fp
1ec38     14 4E 85 51 |  if_ne	sub	fp, #20
1ec3c     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
1ec40     18 00 90 5D |  if_ne	jmp	#LR__3441
1ec44     2C 4E 05 F1 | 	add	fp, #44
1ec48     A7 1E 02 FB | 	rdlong	local01, fp
1ec4c     01 1E 86 F1 | 	sub	local01, #1
1ec50     A7 1E 62 FC | 	wrlong	local01, fp
1ec54     2C 4E 85 F1 | 	sub	fp, #44
1ec58     90 FF 9F FD | 	jmp	#LR__3439
1ec5c                 | LR__3440
1ec5c                 | LR__3441
1ec5c     18 4E 05 F1 | 	add	fp, #24
1ec60     A7 2C 02 FB | 	rdlong	local08, fp
1ec64     14 4E 05 F1 | 	add	fp, #20
1ec68     A7 24 02 FB | 	rdlong	local04, fp
1ec6c     01 24 66 F0 | 	shl	local04, #1
1ec70     16 25 02 F1 | 	add	local04, local08
1ec74     12 01 58 FC | 	wrword	#0, local04
1ec78     A7 2A 0A FB | 	rdlong	local07, fp wz
1ec7c     2C 4E 85 F1 | 	sub	fp, #44
1ec80     06 FA 05 A6 |  if_e	mov	result1, #6
1ec84     04 06 90 AD |  if_e	jmp	#LR__3470
1ec88                 | ' 
1ec88                 | ' 
1ec88                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
1ec88     28 4E 05 F1 | 	add	fp, #40
1ec8c     A7 00 68 FC | 	wrlong	#0, fp
1ec90     28 4E 85 F1 | 	sub	fp, #40
1ec94     97 22 48 FB | 	callpa	#(@LR__3443-@LR__3442)>>2,fcache_load_ptr_
1ec98                 | LR__3442
1ec98     18 4E 05 F1 | 	add	fp, #24
1ec9c     A7 2E 02 FB | 	rdlong	local09, fp
1eca0     10 4E 05 F1 | 	add	fp, #16
1eca4     A7 30 02 FB | 	rdlong	local10, fp
1eca8     28 4E 85 F1 | 	sub	fp, #40
1ecac     01 30 66 F0 | 	shl	local10, #1
1ecb0     17 31 02 F1 | 	add	local10, local09
1ecb4     18 33 E2 FA | 	rdword	local11, local10
1ecb8     20 32 0E F2 | 	cmp	local11, #32 wz
1ecbc     1C 00 90 5D |  if_ne	jmp	#LR__3444
1ecc0     28 4E 05 F1 | 	add	fp, #40
1ecc4     A7 34 02 FB | 	rdlong	local12, fp
1ecc8     1A 27 02 F6 | 	mov	local05, local12
1eccc     01 26 06 F1 | 	add	local05, #1
1ecd0     A7 26 62 FC | 	wrlong	local05, fp
1ecd4     28 4E 85 F1 | 	sub	fp, #40
1ecd8     BC FF 9F FD | 	jmp	#LR__3442
1ecdc                 | LR__3443
1ecdc                 | LR__3444
1ecdc     28 4E 05 F1 | 	add	fp, #40
1ece0     A7 2A 02 FB | 	rdlong	local07, fp
1ece4     28 4E 85 F1 | 	sub	fp, #40
1ece8     01 2A 16 F2 | 	cmp	local07, #1 wc
1ecec     28 00 90 3D |  if_ae	jmp	#LR__3445
1ecf0     18 4E 05 F1 | 	add	fp, #24
1ecf4     A7 22 02 FB | 	rdlong	local03, fp
1ecf8     10 4E 05 F1 | 	add	fp, #16
1ecfc     A7 2E 02 FB | 	rdlong	local09, fp
1ed00     28 4E 85 F1 | 	sub	fp, #40
1ed04     01 2E 66 F0 | 	shl	local09, #1
1ed08     11 2F 02 F1 | 	add	local09, local03
1ed0c     17 1F E2 FA | 	rdword	local01, local09
1ed10     2E 1E 0E F2 | 	cmp	local01, #46 wz
1ed14     14 00 90 5D |  if_ne	jmp	#LR__3446
1ed18                 | LR__3445
1ed18     10 4E 05 F1 | 	add	fp, #16
1ed1c     A7 2A C2 FA | 	rdbyte	local07, fp
1ed20     03 2A 46 F5 | 	or	local07, #3
1ed24     A7 2A 42 FC | 	wrbyte	local07, fp
1ed28     10 4E 85 F1 | 	sub	fp, #16
1ed2c                 | LR__3446
1ed2c     97 2C 48 FB | 	callpa	#(@LR__3448-@LR__3447)>>2,fcache_load_ptr_
1ed30                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
1ed30                 | LR__3447
1ed30     2C 4E 05 F1 | 	add	fp, #44
1ed34     A7 2A 02 FB | 	rdlong	local07, fp
1ed38     2C 4E 85 F1 | 	sub	fp, #44
1ed3c     01 2A 16 F2 | 	cmp	local07, #1 wc
1ed40     44 00 90 CD |  if_b	jmp	#LR__3449
1ed44     18 4E 05 F1 | 	add	fp, #24
1ed48     A7 28 02 FB | 	rdlong	local06, fp
1ed4c     14 4E 05 F1 | 	add	fp, #20
1ed50     A7 22 02 FB | 	rdlong	local03, fp
1ed54     2C 4E 85 F1 | 	sub	fp, #44
1ed58     01 22 86 F1 | 	sub	local03, #1
1ed5c     01 22 66 F0 | 	shl	local03, #1
1ed60     14 23 02 F1 | 	add	local03, local06
1ed64     11 1F E2 FA | 	rdword	local01, local03
1ed68     2E 1E 0E F2 | 	cmp	local01, #46 wz
1ed6c     18 00 90 AD |  if_e	jmp	#LR__3449
1ed70     2C 4E 05 F1 | 	add	fp, #44
1ed74     A7 1E 02 FB | 	rdlong	local01, fp
1ed78     01 1E 86 F1 | 	sub	local01, #1
1ed7c     A7 1E 62 FC | 	wrlong	local01, fp
1ed80     2C 4E 85 F1 | 	sub	fp, #44
1ed84     A8 FF 9F FD | 	jmp	#LR__3447
1ed88                 | LR__3448
1ed88                 | LR__3449
1ed88     04 4E 05 F1 | 	add	fp, #4
1ed8c     A7 12 02 FB | 	rdlong	arg01, fp
1ed90     04 4E 85 F1 | 	sub	fp, #4
1ed94     20 12 06 F1 | 	add	arg01, #32
1ed98     20 14 06 F6 | 	mov	arg02, #32
1ed9c     0B 16 06 F6 | 	mov	arg03, #11
1eda0     09 37 02 F6 | 	mov	local13, arg01
1eda4     98 00 A0 FD | 	call	#\builtin_bytefill_
1eda8     1B FB 01 F6 | 	mov	result1, local13
1edac     0C 4E 05 F1 | 	add	fp, #12
1edb0     A7 00 48 FC | 	wrbyte	#0, fp
1edb4     A7 2A C2 FA | 	rdbyte	local07, fp
1edb8     14 4E 05 F1 | 	add	fp, #20
1edbc     A7 2A 62 FC | 	wrlong	local07, fp
1edc0     04 4E 05 F1 | 	add	fp, #4
1edc4     A7 10 68 FC | 	wrlong	#8, fp
1edc8     24 4E 85 F1 | 	sub	fp, #36
1edcc                 | ' 
1edcc                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
1edcc                 | ' 	i = b = 0; ni = 8;
1edcc                 | ' 	for (;;) {
1edcc                 | LR__3450
1edcc     18 4E 05 F1 | 	add	fp, #24
1edd0     A7 22 02 FB | 	rdlong	local03, fp
1edd4     10 4E 05 F1 | 	add	fp, #16
1edd8     A7 2E 02 FB | 	rdlong	local09, fp
1eddc     17 25 02 F6 | 	mov	local04, local09
1ede0     01 24 06 F1 | 	add	local04, #1
1ede4     A7 24 62 FC | 	wrlong	local04, fp
1ede8     01 2E 66 F0 | 	shl	local09, #1
1edec     11 2F 02 F1 | 	add	local09, local03
1edf0     17 29 E2 FA | 	rdword	local06, local09
1edf4     14 4E 85 F1 | 	sub	fp, #20
1edf8     A7 28 52 FC | 	wrword	local06, fp
1edfc     A7 2A EA FA | 	rdword	local07, fp wz
1ee00     14 4E 85 F1 | 	sub	fp, #20
1ee04     74 03 90 AD |  if_e	jmp	#LR__3466
1ee08     14 4E 05 F1 | 	add	fp, #20
1ee0c     A7 2A E2 FA | 	rdword	local07, fp
1ee10     14 4E 85 F1 | 	sub	fp, #20
1ee14     20 2A 0E F2 | 	cmp	local07, #32 wz
1ee18     30 00 90 AD |  if_e	jmp	#LR__3451
1ee1c     14 4E 05 F1 | 	add	fp, #20
1ee20     A7 1E E2 FA | 	rdword	local01, fp
1ee24     14 4E 85 F1 | 	sub	fp, #20
1ee28     2E 1E 0E F2 | 	cmp	local01, #46 wz
1ee2c     34 00 90 5D |  if_ne	jmp	#LR__3452
1ee30     28 4E 05 F1 | 	add	fp, #40
1ee34     A7 24 02 FB | 	rdlong	local04, fp
1ee38     04 4E 05 F1 | 	add	fp, #4
1ee3c     A7 30 02 FB | 	rdlong	local10, fp
1ee40     2C 4E 85 F1 | 	sub	fp, #44
1ee44     18 25 0A F2 | 	cmp	local04, local10 wz
1ee48     18 00 90 AD |  if_e	jmp	#LR__3452
1ee4c                 | LR__3451
1ee4c     10 4E 05 F1 | 	add	fp, #16
1ee50     A7 2A C2 FA | 	rdbyte	local07, fp
1ee54     03 2A 46 F5 | 	or	local07, #3
1ee58     A7 2A 42 FC | 	wrbyte	local07, fp
1ee5c     10 4E 85 F1 | 	sub	fp, #16
1ee60                 | ' 			cf |=  0x01  |  0x02 ;
1ee60                 | ' 			continue;
1ee60     68 FF 9F FD | 	jmp	#LR__3450
1ee64                 | LR__3452
1ee64     20 4E 05 F1 | 	add	fp, #32
1ee68     A7 2A 02 FB | 	rdlong	local07, fp
1ee6c     04 4E 05 F1 | 	add	fp, #4
1ee70     A7 1E 02 FB | 	rdlong	local01, fp
1ee74     24 4E 85 F1 | 	sub	fp, #36
1ee78     0F 2B 12 F2 | 	cmp	local07, local01 wc
1ee7c     1C 00 90 3D |  if_ae	jmp	#LR__3453
1ee80     28 4E 05 F1 | 	add	fp, #40
1ee84     A7 2C 02 FB | 	rdlong	local08, fp
1ee88     04 4E 05 F1 | 	add	fp, #4
1ee8c     A7 30 02 FB | 	rdlong	local10, fp
1ee90     2C 4E 85 F1 | 	sub	fp, #44
1ee94     18 2D 0A F2 | 	cmp	local08, local10 wz
1ee98     B0 00 90 5D |  if_ne	jmp	#LR__3455
1ee9c                 | LR__3453
1ee9c     24 4E 05 F1 | 	add	fp, #36
1eea0     A7 2A 02 FB | 	rdlong	local07, fp
1eea4     24 4E 85 F1 | 	sub	fp, #36
1eea8     0B 2A 0E F2 | 	cmp	local07, #11 wz
1eeac     18 00 90 5D |  if_ne	jmp	#LR__3454
1eeb0     10 4E 05 F1 | 	add	fp, #16
1eeb4     A7 2A C2 FA | 	rdbyte	local07, fp
1eeb8     03 2A 46 F5 | 	or	local07, #3
1eebc     A7 2A 42 FC | 	wrbyte	local07, fp
1eec0     10 4E 85 F1 | 	sub	fp, #16
1eec4                 | ' 				cf |=  0x01  |  0x02 ;
1eec4                 | ' 				break;
1eec4     B4 02 90 FD | 	jmp	#LR__3466
1eec8                 | LR__3454
1eec8     28 4E 05 F1 | 	add	fp, #40
1eecc     A7 2A 02 FB | 	rdlong	local07, fp
1eed0     04 4E 05 F1 | 	add	fp, #4
1eed4     A7 1E 02 FB | 	rdlong	local01, fp
1eed8     2C 4E 85 F1 | 	sub	fp, #44
1eedc     0F 2B 0A F2 | 	cmp	local07, local01 wz
1eee0     10 4E 05 51 |  if_ne	add	fp, #16
1eee4     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
1eee8     03 2A 46 55 |  if_ne	or	local07, #3
1eeec     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
1eef0     10 4E 85 51 |  if_ne	sub	fp, #16
1eef4     28 4E 05 F1 | 	add	fp, #40
1eef8     A7 2A 02 FB | 	rdlong	local07, fp
1eefc     04 4E 05 F1 | 	add	fp, #4
1ef00     A7 20 02 FB | 	rdlong	local02, fp
1ef04     2C 4E 85 F1 | 	sub	fp, #44
1ef08     10 2B 1A F2 | 	cmp	local07, local02 wcz
1ef0c     6C 02 90 1D |  if_a	jmp	#LR__3466
1ef10     2C 4E 05 F1 | 	add	fp, #44
1ef14     A7 2A 02 FB | 	rdlong	local07, fp
1ef18     04 4E 85 F1 | 	sub	fp, #4
1ef1c     A7 2A 62 FC | 	wrlong	local07, fp
1ef20     08 4E 85 F1 | 	sub	fp, #8
1ef24     A7 10 68 FC | 	wrlong	#8, fp
1ef28     04 4E 05 F1 | 	add	fp, #4
1ef2c     A7 16 68 FC | 	wrlong	#11, fp
1ef30     18 4E 85 F1 | 	sub	fp, #24
1ef34     A7 32 C2 FA | 	rdbyte	local11, fp
1ef38     19 2B E2 F8 | 	getbyte	local07, local11, #0
1ef3c     02 2A 66 F0 | 	shl	local07, #2
1ef40     A7 2A 42 FC | 	wrbyte	local07, fp
1ef44     0C 4E 85 F1 | 	sub	fp, #12
1ef48                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
1ef48                 | ' 			continue;
1ef48     80 FE 9F FD | 	jmp	#LR__3450
1ef4c                 | LR__3455
1ef4c     14 4E 05 F1 | 	add	fp, #20
1ef50     A7 2A E2 FA | 	rdword	local07, fp
1ef54     14 4E 85 F1 | 	sub	fp, #20
1ef58     80 2A 16 F2 | 	cmp	local07, #128 wc
1ef5c     6C 00 90 CD |  if_b	jmp	#LR__3457
1ef60     10 4E 05 F1 | 	add	fp, #16
1ef64     A7 2A C2 FA | 	rdbyte	local07, fp
1ef68     02 2A 46 F5 | 	or	local07, #2
1ef6c     A7 2A 42 FC | 	wrbyte	local07, fp
1ef70     04 4E 05 F1 | 	add	fp, #4
1ef74     A7 12 E2 FA | 	rdword	arg01, fp
1ef78     14 4E 85 F1 | 	sub	fp, #20
1ef7c     01 00 00 FF 
1ef80     52 15 06 F6 | 	mov	arg02, ##850
1ef84     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
1ef88     14 4E 05 F1 | 	add	fp, #20
1ef8c     A7 FA 51 FC | 	wrword	result1, fp
1ef90     A7 2A E2 FA | 	rdword	local07, fp
1ef94     14 4E 85 F1 | 	sub	fp, #20
1ef98     80 2A CE F7 | 	test	local07, #128 wz
1ef9c     2C 00 90 AD |  if_e	jmp	#LR__3456
1efa0     14 4E 05 F1 | 	add	fp, #20
1efa4     A7 20 E2 FA | 	rdword	local02, fp
1efa8     7F 20 06 F5 | 	and	local02, #127
1efac     01 00 00 FF 
1efb0     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
1efb4     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
1efb8     10 2B C2 FA | 	rdbyte	local07, local02
1efbc     A7 2A 52 FC | 	wrword	local07, fp
1efc0     14 4E 85 F1 | 	sub	fp, #20
1efc4     01 00 00 FF 
1efc8     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
1efcc                 | LR__3456
1efcc                 | LR__3457
1efcc     14 4E 05 F1 | 	add	fp, #20
1efd0     A7 2A E2 FA | 	rdword	local07, fp
1efd4     14 4E 85 F1 | 	sub	fp, #20
1efd8     00 2B 16 F2 | 	cmp	local07, #256 wc
1efdc     88 00 90 CD |  if_b	jmp	#LR__3459
1efe0     24 4E 05 F1 | 	add	fp, #36
1efe4     A7 2A 02 FB | 	rdlong	local07, fp
1efe8     01 2A 86 F1 | 	sub	local07, #1
1efec     04 4E 85 F1 | 	sub	fp, #4
1eff0     A7 20 02 FB | 	rdlong	local02, fp
1eff4     20 4E 85 F1 | 	sub	fp, #32
1eff8     15 21 12 F2 | 	cmp	local02, local07 wc
1effc     2C 00 90 CD |  if_b	jmp	#LR__3458
1f000     10 4E 05 F1 | 	add	fp, #16
1f004     A7 32 C2 FA | 	rdbyte	local11, fp
1f008     19 2B E2 F8 | 	getbyte	local07, local11, #0
1f00c     03 2A 46 F5 | 	or	local07, #3
1f010     A7 2A 42 FC | 	wrbyte	local07, fp
1f014     14 4E 05 F1 | 	add	fp, #20
1f018     A7 2A 02 FB | 	rdlong	local07, fp
1f01c     04 4E 85 F1 | 	sub	fp, #4
1f020     A7 2A 62 FC | 	wrlong	local07, fp
1f024     20 4E 85 F1 | 	sub	fp, #32
1f028                 | ' 				cf |=  0x01  |  0x02 ;
1f028                 | ' 				i = ni; continue;
1f028     A0 FD 9F FD | 	jmp	#LR__3450
1f02c                 | LR__3458
1f02c     04 4E 05 F1 | 	add	fp, #4
1f030     A7 2E 02 FB | 	rdlong	local09, fp
1f034     1C 4E 05 F1 | 	add	fp, #28
1f038     A7 30 02 FB | 	rdlong	local10, fp
1f03c     18 25 02 F6 | 	mov	local04, local10
1f040     01 24 06 F1 | 	add	local04, #1
1f044     A7 24 62 FC | 	wrlong	local04, fp
1f048     20 2E 06 F1 | 	add	local09, #32
1f04c     17 31 02 F1 | 	add	local10, local09
1f050     0C 4E 85 F1 | 	sub	fp, #12
1f054     A7 22 E2 FA | 	rdword	local03, fp
1f058     14 4E 85 F1 | 	sub	fp, #20
1f05c     08 22 46 F0 | 	shr	local03, #8
1f060     18 23 42 FC | 	wrbyte	local03, local10
1f064     D4 00 90 FD | 	jmp	#LR__3465
1f068                 | LR__3459
1f068     14 4E 05 F1 | 	add	fp, #20
1f06c     A7 2A EA FA | 	rdword	local07, fp wz
1f070     14 4E 85 F1 | 	sub	fp, #20
1f074     20 00 90 AD |  if_e	jmp	#LR__3460
1f078     25 01 00 FF 
1f07c     05 12 06 F6 | 	mov	arg01, ##@LR__4093
1f080     14 4E 05 F1 | 	add	fp, #20
1f084     A7 14 E2 FA | 	rdword	arg02, fp
1f088     14 4E 85 F1 | 	sub	fp, #20
1f08c     48 CB BF FD | 	call	#_fatfs_cc_strchr
1f090     00 FA 0D F2 | 	cmp	result1, #0 wz
1f094     20 00 90 AD |  if_e	jmp	#LR__3461
1f098                 | LR__3460
1f098     14 4E 05 F1 | 	add	fp, #20
1f09c     A7 BE 58 FC | 	wrword	#95, fp
1f0a0     04 4E 85 F1 | 	sub	fp, #4
1f0a4     A7 2A C2 FA | 	rdbyte	local07, fp
1f0a8     03 2A 46 F5 | 	or	local07, #3
1f0ac     A7 2A 42 FC | 	wrbyte	local07, fp
1f0b0     10 4E 85 F1 | 	sub	fp, #16
1f0b4     84 00 90 FD | 	jmp	#LR__3464
1f0b8                 | LR__3461
1f0b8     14 4E 05 F1 | 	add	fp, #20
1f0bc     A7 2A E2 FA | 	rdword	local07, fp
1f0c0     14 4E 85 F1 | 	sub	fp, #20
1f0c4     41 2A 16 F2 | 	cmp	local07, #65 wc
1f0c8     24 00 90 CD |  if_b	jmp	#LR__3462
1f0cc     14 4E 05 F1 | 	add	fp, #20
1f0d0     A7 1E E2 FA | 	rdword	local01, fp
1f0d4     14 4E 85 F1 | 	sub	fp, #20
1f0d8     5B 1E 16 F2 | 	cmp	local01, #91 wc
1f0dc     0C 4E 05 C1 |  if_b	add	fp, #12
1f0e0     A7 2A C2 CA |  if_b	rdbyte	local07, fp
1f0e4     02 2A 46 C5 |  if_b	or	local07, #2
1f0e8     A7 2A 42 CC |  if_b	wrbyte	local07, fp
1f0ec     0C 4E 85 C1 |  if_b	sub	fp, #12
1f0f0                 | LR__3462
1f0f0     14 4E 05 F1 | 	add	fp, #20
1f0f4     A7 2A E2 FA | 	rdword	local07, fp
1f0f8     14 4E 85 F1 | 	sub	fp, #20
1f0fc     61 2A 16 F2 | 	cmp	local07, #97 wc
1f100     38 00 90 CD |  if_b	jmp	#LR__3463
1f104     14 4E 05 F1 | 	add	fp, #20
1f108     A7 1E E2 FA | 	rdword	local01, fp
1f10c     14 4E 85 F1 | 	sub	fp, #20
1f110     7B 1E 16 F2 | 	cmp	local01, #123 wc
1f114     24 00 90 3D |  if_ae	jmp	#LR__3463
1f118     0C 4E 05 F1 | 	add	fp, #12
1f11c     A7 2A C2 FA | 	rdbyte	local07, fp
1f120     01 2A 46 F5 | 	or	local07, #1
1f124     A7 2A 42 FC | 	wrbyte	local07, fp
1f128     08 4E 05 F1 | 	add	fp, #8
1f12c     A7 2A E2 FA | 	rdword	local07, fp
1f130     20 2A 86 F1 | 	sub	local07, #32
1f134     A7 2A 52 FC | 	wrword	local07, fp
1f138     14 4E 85 F1 | 	sub	fp, #20
1f13c                 | LR__3463
1f13c                 | LR__3464
1f13c                 | LR__3465
1f13c     04 4E 05 F1 | 	add	fp, #4
1f140     A7 32 02 FB | 	rdlong	local11, fp
1f144     19 2F 02 F6 | 	mov	local09, local11
1f148     1C 4E 05 F1 | 	add	fp, #28
1f14c     A7 20 02 FB | 	rdlong	local02, fp
1f150     10 25 02 F6 | 	mov	local04, local02
1f154     01 24 06 F1 | 	add	local04, #1
1f158     A7 24 62 FC | 	wrlong	local04, fp
1f15c     10 31 02 F6 | 	mov	local10, local02
1f160     20 2E 06 F1 | 	add	local09, #32
1f164     17 31 02 F1 | 	add	local10, local09
1f168     0C 4E 85 F1 | 	sub	fp, #12
1f16c     A7 22 E2 FA | 	rdword	local03, fp
1f170     14 4E 85 F1 | 	sub	fp, #20
1f174     18 23 42 FC | 	wrbyte	local03, local10
1f178     50 FC 9F FD | 	jmp	#LR__3450
1f17c                 | LR__3466
1f17c     04 4E 05 F1 | 	add	fp, #4
1f180     A7 32 02 FB | 	rdlong	local11, fp
1f184     04 4E 85 F1 | 	sub	fp, #4
1f188     20 32 06 F1 | 	add	local11, #32
1f18c     19 2B C2 FA | 	rdbyte	local07, local11
1f190     E5 2A 0E F2 | 	cmp	local07, #229 wz
1f194     04 4E 05 A1 |  if_e	add	fp, #4
1f198     A7 2A 02 AB |  if_e	rdlong	local07, fp
1f19c     04 4E 85 A1 |  if_e	sub	fp, #4
1f1a0     20 2A 06 A1 |  if_e	add	local07, #32
1f1a4     15 0B 48 AC |  if_e	wrbyte	#5, local07
1f1a8     24 4E 05 F1 | 	add	fp, #36
1f1ac     A7 2A 02 FB | 	rdlong	local07, fp
1f1b0     24 4E 85 F1 | 	sub	fp, #36
1f1b4     08 2A 0E F2 | 	cmp	local07, #8 wz
1f1b8     0C 4E 05 A1 |  if_e	add	fp, #12
1f1bc     A7 2A C2 AA |  if_e	rdbyte	local07, fp
1f1c0     02 2A 66 A0 |  if_e	shl	local07, #2
1f1c4     A7 2A 42 AC |  if_e	wrbyte	local07, fp
1f1c8     0C 4E 85 A1 |  if_e	sub	fp, #12
1f1cc     0C 4E 05 F1 | 	add	fp, #12
1f1d0     A7 2A C2 FA | 	rdbyte	local07, fp
1f1d4     0C 4E 85 F1 | 	sub	fp, #12
1f1d8     0C 2A 06 F5 | 	and	local07, #12
1f1dc     0C 2A 0E F2 | 	cmp	local07, #12 wz
1f1e0     18 00 90 AD |  if_e	jmp	#LR__3467
1f1e4     0C 4E 05 F1 | 	add	fp, #12
1f1e8     A7 1E C2 FA | 	rdbyte	local01, fp
1f1ec     0C 4E 85 F1 | 	sub	fp, #12
1f1f0     03 1E 06 F5 | 	and	local01, #3
1f1f4     03 1E 0E F2 | 	cmp	local01, #3 wz
1f1f8     14 00 90 5D |  if_ne	jmp	#LR__3468
1f1fc                 | LR__3467
1f1fc     10 4E 05 F1 | 	add	fp, #16
1f200     A7 2A C2 FA | 	rdbyte	local07, fp
1f204     02 2A 46 F5 | 	or	local07, #2
1f208     A7 2A 42 FC | 	wrbyte	local07, fp
1f20c     10 4E 85 F1 | 	sub	fp, #16
1f210                 | LR__3468
1f210     10 4E 05 F1 | 	add	fp, #16
1f214     A7 2A C2 FA | 	rdbyte	local07, fp
1f218     10 4E 85 F1 | 	sub	fp, #16
1f21c     02 2A CE F7 | 	test	local07, #2 wz
1f220     48 00 90 5D |  if_ne	jmp	#LR__3469
1f224     0C 4E 05 F1 | 	add	fp, #12
1f228     A7 2A C2 FA | 	rdbyte	local07, fp
1f22c     0C 4E 85 F1 | 	sub	fp, #12
1f230     01 2A CE F7 | 	test	local07, #1 wz
1f234     10 4E 05 51 |  if_ne	add	fp, #16
1f238     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
1f23c     10 2A 46 55 |  if_ne	or	local07, #16
1f240     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
1f244     10 4E 85 51 |  if_ne	sub	fp, #16
1f248     0C 4E 05 F1 | 	add	fp, #12
1f24c     A7 2A C2 FA | 	rdbyte	local07, fp
1f250     0C 4E 85 F1 | 	sub	fp, #12
1f254     04 2A CE F7 | 	test	local07, #4 wz
1f258     10 4E 05 51 |  if_ne	add	fp, #16
1f25c     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
1f260     08 2A 46 55 |  if_ne	or	local07, #8
1f264     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
1f268     10 4E 85 51 |  if_ne	sub	fp, #16
1f26c                 | LR__3469
1f26c     04 4E 05 F1 | 	add	fp, #4
1f270     A7 2A 02 FB | 	rdlong	local07, fp
1f274     0C 4E 05 F1 | 	add	fp, #12
1f278     A7 1E C2 FA | 	rdbyte	local01, fp
1f27c     10 4E 85 F1 | 	sub	fp, #16
1f280     2B 2A 06 F1 | 	add	local07, #43
1f284     15 1F 42 FC | 	wrbyte	local01, local07
1f288                 | ' 	}
1f288                 | ' 
1f288                 | ' 	dp->fn[ 11 ] = cf;
1f288                 | ' 
1f288                 | ' 	return FR_OK;
1f288     00 FA 05 F6 | 	mov	result1, #0
1f28c                 | LR__3470
1f28c     A7 F0 03 F6 | 	mov	ptra, fp
1f290     B2 00 A0 FD | 	call	#popregs_
1f294                 | _fatfs_cc_create_name_ret
1f294     2D 00 64 FD | 	ret
1f298                 | 
1f298                 | _fatfs_cc_follow_path
1f298     02 4A 05 F6 | 	mov	COUNT_, #2
1f29c     A8 00 A0 FD | 	call	#pushregs_
1f2a0     18 F0 07 F1 | 	add	ptra, #24
1f2a4     04 4E 05 F1 | 	add	fp, #4
1f2a8     A7 12 62 FC | 	wrlong	arg01, fp
1f2ac     04 4E 05 F1 | 	add	fp, #4
1f2b0     A7 14 62 FC | 	wrlong	arg02, fp
1f2b4     04 4E 85 F1 | 	sub	fp, #4
1f2b8     A7 FA 01 FB | 	rdlong	result1, fp
1f2bc     FD 1E 02 FB | 	rdlong	local01, result1
1f2c0     10 4E 05 F1 | 	add	fp, #16
1f2c4     A7 1E 62 FC | 	wrlong	local01, fp
1f2c8     14 4E 85 F1 | 	sub	fp, #20
1f2cc     97 24 48 FB | 	callpa	#(@LR__3482-@LR__3480)>>2,fcache_load_ptr_
1f2d0                 | ' )
1f2d0                 | ' {
1f2d0                 | ' 	FRESULT res;
1f2d0                 | ' 	BYTE ns;
1f2d0                 | ' 	FATFS *fs = dp->obj.fs;
1f2d0                 | ' #line 3034 "ff.c"
1f2d0                 | ' 	{
1f2d0                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
1f2d0                 | LR__3480
1f2d0     08 4E 05 F1 | 	add	fp, #8
1f2d4     A7 1E 02 FB | 	rdlong	local01, fp
1f2d8     08 4E 85 F1 | 	sub	fp, #8
1f2dc     0F 1F C2 FA | 	rdbyte	local01, local01
1f2e0     2F 1E 0E F2 | 	cmp	local01, #47 wz
1f2e4     18 00 90 AD |  if_e	jmp	#LR__3481
1f2e8     08 4E 05 F1 | 	add	fp, #8
1f2ec     A7 1E 02 FB | 	rdlong	local01, fp
1f2f0     08 4E 85 F1 | 	sub	fp, #8
1f2f4     0F 1F C2 FA | 	rdbyte	local01, local01
1f2f8     5C 1E 0E F2 | 	cmp	local01, #92 wz
1f2fc     18 00 90 5D |  if_ne	jmp	#LR__3483
1f300                 | LR__3481
1f300     08 4E 05 F1 | 	add	fp, #8
1f304     A7 1E 02 FB | 	rdlong	local01, fp
1f308     01 1E 06 F1 | 	add	local01, #1
1f30c     A7 1E 62 FC | 	wrlong	local01, fp
1f310     08 4E 85 F1 | 	sub	fp, #8
1f314     B8 FF 9F FD | 	jmp	#LR__3480
1f318                 | LR__3482
1f318                 | LR__3483
1f318     04 4E 05 F1 | 	add	fp, #4
1f31c     A7 1E 02 FB | 	rdlong	local01, fp
1f320     08 1E 06 F1 | 	add	local01, #8
1f324     0F 01 68 FC | 	wrlong	#0, local01
1f328     04 4E 05 F1 | 	add	fp, #4
1f32c     A7 1E 02 FB | 	rdlong	local01, fp
1f330     08 4E 85 F1 | 	sub	fp, #8
1f334     0F 1F C2 FA | 	rdbyte	local01, local01
1f338     20 1E 16 F2 | 	cmp	local01, #32 wc
1f33c     30 00 90 3D |  if_ae	jmp	#LR__3484
1f340     04 4E 05 F1 | 	add	fp, #4
1f344     A7 1E 02 FB | 	rdlong	local01, fp
1f348     2B 1E 06 F1 | 	add	local01, #43
1f34c     0F 01 49 FC | 	wrbyte	#128, local01
1f350     A7 12 02 FB | 	rdlong	arg01, fp
1f354     04 4E 85 F1 | 	sub	fp, #4
1f358     00 14 06 F6 | 	mov	arg02, #0
1f35c     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
1f360     0C 4E 05 F1 | 	add	fp, #12
1f364     A7 FA 61 FC | 	wrlong	result1, fp
1f368     0C 4E 85 F1 | 	sub	fp, #12
1f36c     1C 01 90 FD | 	jmp	#LR__3488
1f370                 | LR__3484
1f370                 | ' 		for (;;) {
1f370                 | LR__3485
1f370     04 4E 05 F1 | 	add	fp, #4
1f374     A7 12 02 FB | 	rdlong	arg01, fp
1f378     04 4E 05 F1 | 	add	fp, #4
1f37c     A7 14 02 F6 | 	mov	arg02, fp
1f380     08 4E 85 F1 | 	sub	fp, #8
1f384     14 F6 BF FD | 	call	#_fatfs_cc_create_name
1f388     0C 4E 05 F1 | 	add	fp, #12
1f38c     A7 FA 61 FC | 	wrlong	result1, fp
1f390     00 FA 4D F2 | 	cmps	result1, #0 wz
1f394     0C 4E 85 F1 | 	sub	fp, #12
1f398     F0 00 90 5D |  if_ne	jmp	#LR__3487
1f39c     04 4E 05 F1 | 	add	fp, #4
1f3a0     A7 12 02 FB | 	rdlong	arg01, fp
1f3a4     04 4E 85 F1 | 	sub	fp, #4
1f3a8     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
1f3ac     0C 4E 05 F1 | 	add	fp, #12
1f3b0     A7 FA 61 FC | 	wrlong	result1, fp
1f3b4     08 4E 85 F1 | 	sub	fp, #8
1f3b8     A7 1E 02 FB | 	rdlong	local01, fp
1f3bc     2B 1E 06 F1 | 	add	local01, #43
1f3c0     0F 1F C2 FA | 	rdbyte	local01, local01
1f3c4     0C 4E 05 F1 | 	add	fp, #12
1f3c8     A7 1E 42 FC | 	wrbyte	local01, fp
1f3cc     04 4E 85 F1 | 	sub	fp, #4
1f3d0     A7 1E 0A FB | 	rdlong	local01, fp wz
1f3d4     0C 4E 85 F1 | 	sub	fp, #12
1f3d8     34 00 90 AD |  if_e	jmp	#LR__3486
1f3dc     0C 4E 05 F1 | 	add	fp, #12
1f3e0     A7 1E 02 FB | 	rdlong	local01, fp
1f3e4     0C 4E 85 F1 | 	sub	fp, #12
1f3e8     04 1E 0E F2 | 	cmp	local01, #4 wz
1f3ec     9C 00 90 5D |  if_ne	jmp	#LR__3487
1f3f0     10 4E 05 F1 | 	add	fp, #16
1f3f4     A7 1E C2 FA | 	rdbyte	local01, fp
1f3f8     10 4E 85 F1 | 	sub	fp, #16
1f3fc     04 1E CE F7 | 	test	local01, #4 wz
1f400     0C 4E 05 A1 |  if_e	add	fp, #12
1f404     A7 0A 68 AC |  if_e	wrlong	#5, fp
1f408     0C 4E 85 A1 |  if_e	sub	fp, #12
1f40c                 | ' 					}
1f40c                 | ' 				}
1f40c                 | ' 				break;
1f40c     7C 00 90 FD | 	jmp	#LR__3487
1f410                 | LR__3486
1f410     10 4E 05 F1 | 	add	fp, #16
1f414     A7 1E C2 FA | 	rdbyte	local01, fp
1f418     10 4E 85 F1 | 	sub	fp, #16
1f41c     04 1E CE F7 | 	test	local01, #4 wz
1f420     68 00 90 5D |  if_ne	jmp	#LR__3487
1f424     04 4E 05 F1 | 	add	fp, #4
1f428     A7 1E 02 FB | 	rdlong	local01, fp
1f42c     04 4E 85 F1 | 	sub	fp, #4
1f430     06 1E 06 F1 | 	add	local01, #6
1f434     0F 1F C2 FA | 	rdbyte	local01, local01
1f438     10 1E CE F7 | 	test	local01, #16 wz
1f43c     0C 4E 05 A1 |  if_e	add	fp, #12
1f440     A7 0A 68 AC |  if_e	wrlong	#5, fp
1f444     0C 4E 85 A1 |  if_e	sub	fp, #12
1f448                 | ' 				res = FR_NO_PATH; break;
1f448     40 00 90 AD |  if_e	jmp	#LR__3487
1f44c     04 4E 05 F1 | 	add	fp, #4
1f450     A7 20 02 FB | 	rdlong	local02, fp
1f454     10 1F 02 F6 | 	mov	local01, local02
1f458     10 4E 05 F1 | 	add	fp, #16
1f45c     A7 14 02 FB | 	rdlong	arg02, fp
1f460     0A 13 02 F6 | 	mov	arg01, arg02
1f464     34 14 06 F1 | 	add	arg02, #52
1f468     14 4E 85 F1 | 	sub	fp, #20
1f46c     10 20 06 F1 | 	add	local02, #16
1f470     10 21 02 FB | 	rdlong	local02, local02
1f474     FF 21 06 F5 | 	and	local02, #511
1f478     10 15 02 F1 | 	add	arg02, local02
1f47c     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
1f480     08 1E 06 F1 | 	add	local01, #8
1f484     0F FB 61 FC | 	wrlong	result1, local01
1f488     E4 FE 9F FD | 	jmp	#LR__3485
1f48c                 | LR__3487
1f48c                 | LR__3488
1f48c                 | ' 			}
1f48c                 | ' #line 3090 "ff.c"
1f48c                 | ' 			{
1f48c                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
1f48c                 | ' 			}
1f48c                 | ' 		}
1f48c                 | ' 	}
1f48c                 | ' 
1f48c                 | ' 	return res;
1f48c     0C 4E 05 F1 | 	add	fp, #12
1f490     A7 FA 01 FB | 	rdlong	result1, fp
1f494     0C 4E 85 F1 | 	sub	fp, #12
1f498     A7 F0 03 F6 | 	mov	ptra, fp
1f49c     B2 00 A0 FD | 	call	#popregs_
1f4a0                 | _fatfs_cc_follow_path_ret
1f4a0     2D 00 64 FD | 	ret
1f4a4                 | 
1f4a4                 | _fatfs_cc_get_ldnumber
1f4a4     01 00 66 F6 | 	neg	_var01, #1
1f4a8     09 03 0A FB | 	rdlong	_var02, arg01 wz
1f4ac     01 05 02 F6 | 	mov	_var03, _var02
1f4b0     01 FA 65 A6 |  if_e	neg	result1, #1
1f4b4     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
1f4b8     97 10 48 FB | 	callpa	#(@LR__3491-@LR__3490)>>2,fcache_load_ptr_
1f4bc                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
1f4bc                 | LR__3490
1f4bc     02 07 C2 FA | 	rdbyte	_var04, _var03
1f4c0     03 FB E1 F8 | 	getbyte	result1, _var04, #0
1f4c4     20 FA 15 F2 | 	cmp	result1, #32 wc
1f4c8     01 04 06 F1 | 	add	_var03, #1
1f4cc     03 09 02 36 |  if_ae	mov	_var05, _var04
1f4d0     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
1f4d4     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
1f4d8     E0 FF 9F 1D |  if_a	jmp	#LR__3490
1f4dc                 | LR__3491
1f4dc     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
1f4e0     3A 06 0E F2 | 	cmp	_var04, #58 wz
1f4e4     40 00 90 5D |  if_ne	jmp	#LR__3493
1f4e8     01 0A 06 F6 | 	mov	_var06, #1
1f4ec     01 09 C2 FA | 	rdbyte	_var05, _var02
1f4f0     30 08 16 F2 | 	cmp	_var05, #48 wc
1f4f4     1C 00 90 CD |  if_b	jmp	#LR__3492
1f4f8     01 09 C2 FA | 	rdbyte	_var05, _var02
1f4fc     3A 08 16 F2 | 	cmp	_var05, #58 wc
1f500     01 0D 02 C6 |  if_b	mov	_var07, _var02
1f504     02 0C 06 C1 |  if_b	add	_var07, #2
1f508     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
1f50c     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
1f510     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
1f514                 | LR__3492
1f514     01 0A 56 F2 | 	cmps	_var06, #1 wc
1f518     05 01 02 C6 |  if_b	mov	_var01, _var06
1f51c     09 05 62 CC |  if_b	wrlong	_var03, arg01
1f520                 | ' 			vol = i;
1f520                 | ' 			*path = tt;
1f520                 | ' 		}
1f520                 | ' 		return vol;
1f520     00 FB 01 F6 | 	mov	result1, _var01
1f524     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
1f528                 | LR__3493
1f528                 | ' 	}
1f528                 | ' #line 3170 "ff.c"
1f528                 | ' 	vol = 0;
1f528                 | ' 
1f528                 | ' 	return vol;
1f528     00 FA 05 F6 | 	mov	result1, #0
1f52c                 | _fatfs_cc_get_ldnumber_ret
1f52c     2D 00 64 FD | 	ret
1f530                 | 
1f530                 | _fatfs_cc_check_fs
1f530     04 4A 05 F6 | 	mov	COUNT_, #4
1f534     A8 00 A0 FD | 	call	#pushregs_
1f538     09 1F 02 F6 | 	mov	local01, arg01
1f53c     03 1E 06 F1 | 	add	local01, #3
1f540     0F 01 48 FC | 	wrbyte	#0, local01
1f544     2D 1E 06 F1 | 	add	local01, #45
1f548     FF FF FF FF 
1f54c     0F FF 6B FC | 	wrlong	##-1, local01
1f550     30 1E 86 F1 | 	sub	local01, #48
1f554     0F 13 02 F6 | 	mov	arg01, local01
1f558     18 D5 BF FD | 	call	#_fatfs_cc_move_window
1f55c     00 FA 0D F2 | 	cmp	result1, #0 wz
1f560     04 FA 05 56 |  if_ne	mov	result1, #4
1f564     94 01 90 5D |  if_ne	jmp	#LR__3504
1f568     34 1E 06 F1 | 	add	local01, #52
1f56c     0F 13 02 F6 | 	mov	arg01, local01
1f570     FE 13 06 F1 | 	add	arg01, #510
1f574                 | ' {
1f574                 | ' 
1f574                 | ' 	return *((WORD*)ptr);
1f574     09 21 E2 FA | 	rdword	local02, arg01
1f578     0F 23 C2 FA | 	rdbyte	local03, local01
1f57c     34 1E 86 F1 | 	sub	local01, #52
1f580     11 25 E2 F8 | 	getbyte	local04, local03, #0
1f584     EB 24 0E F2 | 	cmp	local04, #235 wz
1f588     11 17 02 56 |  if_ne	mov	arg03, local03
1f58c     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
1f590     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
1f594     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
1f598     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
1f59c     44 01 90 5D |  if_ne	jmp	#LR__3503
1f5a0     10 25 32 F9 | 	getword	local04, local02, #0
1f5a4     55 00 00 FF 
1f5a8     55 24 0E F2 | 	cmp	local04, ##43605 wz
1f5ac     2C 00 90 5D |  if_ne	jmp	#LR__3500
1f5b0     34 1E 06 F1 | 	add	local01, #52
1f5b4     0F 13 02 F6 | 	mov	arg01, local01
1f5b8     34 1E 86 F1 | 	sub	local01, #52
1f5bc     52 12 06 F1 | 	add	arg01, #82
1f5c0     25 01 00 FF 
1f5c4     0C 14 06 F6 | 	mov	arg02, ##@LR__4094
1f5c8     08 16 06 F6 | 	mov	arg03, #8
1f5cc     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
1f5d0     00 FA 0D F2 | 	cmp	result1, #0 wz
1f5d4                 | ' 			return 0;
1f5d4     00 FA 05 A6 |  if_e	mov	result1, #0
1f5d8     20 01 90 AD |  if_e	jmp	#LR__3504
1f5dc                 | LR__3500
1f5dc     34 1E 06 F1 | 	add	local01, #52
1f5e0     0F 13 02 F6 | 	mov	arg01, local01
1f5e4     0B 12 06 F1 | 	add	arg01, #11
1f5e8                 | ' {
1f5e8                 | ' 
1f5e8                 | ' 	return *((WORD*)ptr);
1f5e8     09 FB E1 FA | 	rdword	result1, arg01
1f5ec     0D 1E 06 F1 | 	add	local01, #13
1f5f0     0F 23 C2 FA | 	rdbyte	local03, local01
1f5f4     41 1E 86 F1 | 	sub	local01, #65
1f5f8     FD 24 32 F9 | 	getword	local04, result1, #0
1f5fc     FD 14 32 F9 | 	getword	arg02, result1, #0
1f600     01 14 86 F1 | 	sub	arg02, #1
1f604     0A 25 CA F7 | 	test	local04, arg02 wz
1f608     D8 00 90 5D |  if_ne	jmp	#LR__3502
1f60c     FD 14 32 F9 | 	getword	arg02, result1, #0
1f610     01 00 00 FF 
1f614     00 14 16 F2 | 	cmp	arg02, ##512 wc
1f618     C8 00 90 CD |  if_b	jmp	#LR__3502
1f61c     FD 14 32 F9 | 	getword	arg02, result1, #0
1f620     01 00 00 FF 
1f624     01 14 16 F2 | 	cmp	arg02, ##513 wc
1f628     B8 00 90 3D |  if_ae	jmp	#LR__3502
1f62c     11 13 02 F6 | 	mov	arg01, local03
1f630     07 12 4E F7 | 	zerox	arg01, #7 wz
1f634     AC 00 90 AD |  if_e	jmp	#LR__3502
1f638     11 13 E2 F8 | 	getbyte	arg01, local03, #0
1f63c     11 23 E2 F8 | 	getbyte	local03, local03, #0
1f640     01 22 86 F1 | 	sub	local03, #1
1f644     11 13 CA F7 | 	test	arg01, local03 wz
1f648     98 00 90 5D |  if_ne	jmp	#LR__3502
1f64c     34 1E 06 F1 | 	add	local01, #52
1f650     0F 13 02 F6 | 	mov	arg01, local01
1f654     34 1E 86 F1 | 	sub	local01, #52
1f658     0E 12 06 F1 | 	add	arg01, #14
1f65c                 | ' {
1f65c                 | ' 
1f65c                 | ' 	return *((WORD*)ptr);
1f65c     09 FB E9 FA | 	rdword	result1, arg01 wz
1f660     80 00 90 AD |  if_e	jmp	#LR__3502
1f664     44 1E 06 F1 | 	add	local01, #68
1f668     0F 13 C2 FA | 	rdbyte	arg01, local01
1f66c     44 1E 86 F1 | 	sub	local01, #68
1f670     01 12 86 F1 | 	sub	arg01, #1
1f674     02 12 16 F2 | 	cmp	arg01, #2 wc
1f678     68 00 90 3D |  if_ae	jmp	#LR__3502
1f67c     34 1E 06 F1 | 	add	local01, #52
1f680     0F 13 02 F6 | 	mov	arg01, local01
1f684     34 1E 86 F1 | 	sub	local01, #52
1f688     11 12 06 F1 | 	add	arg01, #17
1f68c                 | ' {
1f68c                 | ' 
1f68c                 | ' 	return *((WORD*)ptr);
1f68c     09 FB E9 FA | 	rdword	result1, arg01 wz
1f690     50 00 90 AD |  if_e	jmp	#LR__3502
1f694     34 1E 06 F1 | 	add	local01, #52
1f698     0F 13 02 F6 | 	mov	arg01, local01
1f69c     34 1E 86 F1 | 	sub	local01, #52
1f6a0     13 12 06 F1 | 	add	arg01, #19
1f6a4                 | ' {
1f6a4                 | ' 
1f6a4                 | ' 	return *((WORD*)ptr);
1f6a4     09 FB E1 FA | 	rdword	result1, arg01
1f6a8     FD 22 32 F9 | 	getword	local03, result1, #0
1f6ac     80 22 16 F2 | 	cmp	local03, #128 wc
1f6b0     20 00 90 3D |  if_ae	jmp	#LR__3501
1f6b4     34 1E 06 F1 | 	add	local01, #52
1f6b8     0F 13 02 F6 | 	mov	arg01, local01
1f6bc     34 1E 86 F1 | 	sub	local01, #52
1f6c0     20 12 06 F1 | 	add	arg01, #32
1f6c4                 | ' {
1f6c4                 | ' 
1f6c4                 | ' 	return *((DWORD*)ptr);
1f6c4     09 FB 01 FB | 	rdlong	result1, arg01
1f6c8     80 00 00 FF 
1f6cc     00 FA 15 F2 | 	cmp	result1, ##65536 wc
1f6d0     10 00 90 CD |  if_b	jmp	#LR__3502
1f6d4                 | LR__3501
1f6d4     4A 1E 06 F1 | 	add	local01, #74
1f6d8                 | ' {
1f6d8                 | ' 
1f6d8                 | ' 	return *((WORD*)ptr);
1f6d8     0F FB E9 FA | 	rdword	result1, local01 wz
1f6dc                 | ' 			&& b != 0 && (b & (b - 1)) == 0
1f6dc                 | ' 			&& ld_word(fs->win +  14 ) != 0
1f6dc                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
1f6dc                 | ' 			&& ld_word(fs->win +  17 ) != 0
1f6dc                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
1f6dc                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
1f6dc                 | ' 				return 0;
1f6dc     00 FA 05 56 |  if_ne	mov	result1, #0
1f6e0     18 00 90 5D |  if_ne	jmp	#LR__3504
1f6e4                 | LR__3502
1f6e4                 | LR__3503
1f6e4                 | ' 		}
1f6e4                 | ' 	}
1f6e4                 | ' 	return sign == 0xAA55 ? 2 : 3;
1f6e4     10 23 32 F9 | 	getword	local03, local02, #0
1f6e8     55 00 00 FF 
1f6ec     55 22 0E F2 | 	cmp	local03, ##43605 wz
1f6f0     02 24 06 A6 |  if_e	mov	local04, #2
1f6f4     03 24 06 56 |  if_ne	mov	local04, #3
1f6f8     12 FB 01 F6 | 	mov	result1, local04
1f6fc                 | LR__3504
1f6fc     A7 F0 03 F6 | 	mov	ptra, fp
1f700     B2 00 A0 FD | 	call	#popregs_
1f704                 | _fatfs_cc_check_fs_ret
1f704     2D 00 64 FD | 	ret
1f708                 | 
1f708                 | _fatfs_cc_find_volume
1f708     05 4A 05 F6 | 	mov	COUNT_, #5
1f70c     A8 00 A0 FD | 	call	#pushregs_
1f710     24 F0 07 F1 | 	add	ptra, #36
1f714     09 1F 02 F6 | 	mov	local01, arg01
1f718     0A 21 02 F6 | 	mov	local02, arg02
1f71c     0F 13 02 F6 | 	mov	arg01, local01
1f720     00 14 06 F6 | 	mov	arg02, #0
1f724     08 FE BF FD | 	call	#_fatfs_cc_check_fs
1f728     02 FA 0D F2 | 	cmp	result1, #2 wz
1f72c     0C 00 90 AD |  if_e	jmp	#LR__3510
1f730     03 FA 15 F2 | 	cmp	result1, #3 wc
1f734     00 20 0E C2 |  if_b	cmp	local02, #0 wz
1f738     D0 00 90 BD |  if_nc_or_z	jmp	#LR__3518
1f73c                 | LR__3510
1f73c                 | ' 	for (i = 0; i < 4; i++) {
1f73c     00 22 06 F6 | 	mov	local03, #0
1f740     97 26 48 FB | 	callpa	#(@LR__3512-@LR__3511)>>2,fcache_load_ptr_
1f744                 | LR__3511
1f744     04 22 16 F2 | 	cmp	local03, #4 wc
1f748     44 00 90 3D |  if_ae	jmp	#LR__3513
1f74c     11 25 02 F6 | 	mov	local04, local03
1f750     02 24 66 F0 | 	shl	local04, #2
1f754     14 4E 05 F1 | 	add	fp, #20
1f758     A7 24 02 F1 | 	add	local04, fp
1f75c     34 1E 06 F1 | 	add	local01, #52
1f760     0F 13 02 F6 | 	mov	arg01, local01
1f764     34 1E 86 F1 | 	sub	local01, #52
1f768     BE 13 06 F1 | 	add	arg01, #446
1f76c     11 15 02 F6 | 	mov	arg02, local03
1f770     04 14 66 F0 | 	shl	arg02, #4
1f774     0A 13 02 F1 | 	add	arg01, arg02
1f778     08 12 06 F1 | 	add	arg01, #8
1f77c                 | ' {
1f77c                 | ' 
1f77c                 | ' 	return *((DWORD*)ptr);
1f77c     09 FB 01 FB | 	rdlong	result1, arg01
1f780     14 4E 85 F1 | 	sub	fp, #20
1f784     12 FB 61 FC | 	wrlong	result1, local04
1f788     01 22 06 F1 | 	add	local03, #1
1f78c     B4 FF 9F FD | 	jmp	#LR__3511
1f790                 | LR__3512
1f790                 | LR__3513
1f790     00 20 0E F2 | 	cmp	local02, #0 wz
1f794     10 25 02 56 |  if_ne	mov	local04, local02
1f798     01 24 86 51 |  if_ne	sub	local04, #1
1f79c     00 24 06 A6 |  if_e	mov	local04, #0
1f7a0     12 23 02 F6 | 	mov	local03, local04
1f7a4                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
1f7a4                 | ' 	}
1f7a4                 | ' 	i = part ? part - 1 : 0;
1f7a4                 | ' 	do {
1f7a4                 | LR__3514
1f7a4     11 25 02 F6 | 	mov	local04, local03
1f7a8     02 24 66 F0 | 	shl	local04, #2
1f7ac     14 4E 05 F1 | 	add	fp, #20
1f7b0     A7 24 02 F1 | 	add	local04, fp
1f7b4     12 25 0A FB | 	rdlong	local04, local04 wz
1f7b8     14 4E 85 F1 | 	sub	fp, #20
1f7bc     28 00 90 AD |  if_e	jmp	#LR__3515
1f7c0     11 25 02 F6 | 	mov	local04, local03
1f7c4     02 24 66 F0 | 	shl	local04, #2
1f7c8     14 4E 05 F1 | 	add	fp, #20
1f7cc     A7 24 02 F1 | 	add	local04, fp
1f7d0     12 15 02 FB | 	rdlong	arg02, local04
1f7d4     0F 13 02 F6 | 	mov	arg01, local01
1f7d8     14 4E 85 F1 | 	sub	fp, #20
1f7dc     50 FD BF FD | 	call	#_fatfs_cc_check_fs
1f7e0     FD 24 02 F6 | 	mov	local04, result1
1f7e4     04 00 90 FD | 	jmp	#LR__3516
1f7e8                 | LR__3515
1f7e8     03 24 06 F6 | 	mov	local04, #3
1f7ec                 | LR__3516
1f7ec     12 27 02 F6 | 	mov	local05, local04
1f7f0     00 20 0E F2 | 	cmp	local02, #0 wz
1f7f4     02 26 16 A2 |  if_e	cmp	local05, #2 wc
1f7f8     0C 00 90 8D |  if_c_and_z	jmp	#LR__3517
1f7fc     01 22 06 A1 |  if_e	add	local03, #1
1f800     04 22 16 A2 |  if_e	cmp	local03, #4 wc
1f804     9C FF 9F 8D |  if_c_and_z	jmp	#LR__3514
1f808                 | LR__3517
1f808                 | ' 	return fmt;
1f808     13 FB 01 F6 | 	mov	result1, local05
1f80c                 | LR__3518
1f80c     A7 F0 03 F6 | 	mov	ptra, fp
1f810     B2 00 A0 FD | 	call	#popregs_
1f814                 | _fatfs_cc_find_volume_ret
1f814     2D 00 64 FD | 	ret
1f818                 | 
1f818                 | _fatfs_cc_mount_volume
1f818     0B 4A 05 F6 | 	mov	COUNT_, #11
1f81c     A8 00 A0 FD | 	call	#pushregs_
1f820     0A 1F 02 F6 | 	mov	local01, arg02
1f824     0B 21 02 F6 | 	mov	local02, arg03
1f828     0F 01 68 FC | 	wrlong	#0, local01
1f82c     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
1f830     FD 22 02 F6 | 	mov	local03, result1
1f834     00 22 56 F2 | 	cmps	local03, #0 wc
1f838     0B FA 05 C6 |  if_b	mov	result1, #11
1f83c     3C 05 90 CD |  if_b	jmp	#LR__3530
1f840     11 17 02 F6 | 	mov	arg03, local03
1f844     02 16 66 F0 | 	shl	arg03, #2
1f848     F2 16 02 F1 | 	add	arg03, objptr
1f84c     0B 25 0A FB | 	rdlong	local04, arg03 wz
1f850     0C FA 05 A6 |  if_e	mov	result1, #12
1f854     24 05 90 AD |  if_e	jmp	#LR__3530
1f858     0F 25 62 FC | 	wrlong	local04, local01
1f85c     10 21 E2 F8 | 	getbyte	local02, local02, #0
1f860     FE 20 06 F5 | 	and	local02, #254
1f864     12 17 CA FA | 	rdbyte	arg03, local04 wz
1f868     4C 00 90 AD |  if_e	jmp	#LR__3521
1f86c     01 24 06 F1 | 	add	local04, #1
1f870     12 13 CA FA | 	rdbyte	arg01, local04 wz
1f874     01 24 86 F1 | 	sub	local04, #1
1f878     01 FA 05 56 |  if_ne	mov	result1, #1
1f87c                 | ' 
1f87c                 | ' 	return Stat;
1f87c     01 00 00 AF 
1f880     20 E4 05 A1 |  if_e	add	objptr, ##544
1f884     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1f888     01 00 00 AF 
1f88c     20 E4 85 A1 |  if_e	sub	objptr, ##544
1f890     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
1f894     01 16 CE F7 | 	test	arg03, #1 wz
1f898     1C 00 90 5D |  if_ne	jmp	#LR__3520
1f89c     00 20 0E F2 | 	cmp	local02, #0 wz
1f8a0     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
1f8a4     04 FA CD 57 |  if_ne	test	result1, #4 wz
1f8a8                 | ' 				return FR_WRITE_PROTECTED;
1f8a8     0A FA 05 56 |  if_ne	mov	result1, #10
1f8ac     CC 04 90 5D |  if_ne	jmp	#LR__3530
1f8b0                 | ' 			}
1f8b0                 | ' 			return FR_OK;
1f8b0     00 FA 05 F6 | 	mov	result1, #0
1f8b4     C4 04 90 FD | 	jmp	#LR__3530
1f8b8                 | LR__3520
1f8b8                 | LR__3521
1f8b8     12 01 48 FC | 	wrbyte	#0, local04
1f8bc     01 24 06 F1 | 	add	local04, #1
1f8c0     12 23 42 FC | 	wrbyte	local03, local04
1f8c4     12 13 C2 FA | 	rdbyte	arg01, local04
1f8c8     01 24 86 F1 | 	sub	local04, #1
1f8cc     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
1f8d0     FD 16 02 F6 | 	mov	arg03, result1
1f8d4     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
1f8d8     01 26 CE F7 | 	test	local05, #1 wz
1f8dc                 | ' 		return FR_NOT_READY;
1f8dc     03 FA 05 56 |  if_ne	mov	result1, #3
1f8e0     98 04 90 5D |  if_ne	jmp	#LR__3530
1f8e4     00 20 0E F2 | 	cmp	local02, #0 wz
1f8e8     0B 27 02 56 |  if_ne	mov	local05, arg03
1f8ec     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
1f8f0     04 26 CE 57 |  if_ne	test	local05, #4 wz
1f8f4                 | ' 		return FR_WRITE_PROTECTED;
1f8f4     0A FA 05 56 |  if_ne	mov	result1, #10
1f8f8     80 04 90 5D |  if_ne	jmp	#LR__3530
1f8fc     12 13 02 F6 | 	mov	arg01, local04
1f900     00 14 06 F6 | 	mov	arg02, #0
1f904     00 FE BF FD | 	call	#_fatfs_cc_find_volume
1f908     FD 12 02 F6 | 	mov	arg01, result1
1f90c     04 12 0E F2 | 	cmp	arg01, #4 wz
1f910     01 FA 05 A6 |  if_e	mov	result1, #1
1f914     64 04 90 AD |  if_e	jmp	#LR__3530
1f918     02 12 16 F2 | 	cmp	arg01, #2 wc
1f91c     0D FA 05 36 |  if_ae	mov	result1, #13
1f920     58 04 90 3D |  if_ae	jmp	#LR__3530
1f924     30 24 06 F1 | 	add	local04, #48
1f928     12 29 02 FB | 	rdlong	local06, local04
1f92c     04 24 06 F1 | 	add	local04, #4
1f930     12 13 02 F6 | 	mov	arg01, local04
1f934     34 24 86 F1 | 	sub	local04, #52
1f938     0B 12 06 F1 | 	add	arg01, #11
1f93c                 | ' {
1f93c                 | ' 
1f93c                 | ' 	return *((WORD*)ptr);
1f93c     09 FB E1 FA | 	rdword	result1, arg01
1f940     01 00 00 FF 
1f944     00 FA 0D F2 | 	cmp	result1, ##512 wz
1f948     0D FA 05 56 |  if_ne	mov	result1, #13
1f94c     2C 04 90 5D |  if_ne	jmp	#LR__3530
1f950     34 24 06 F1 | 	add	local04, #52
1f954     12 13 02 F6 | 	mov	arg01, local04
1f958     34 24 86 F1 | 	sub	local04, #52
1f95c     16 12 06 F1 | 	add	arg01, #22
1f960                 | ' {
1f960                 | ' 
1f960                 | ' 	return *((WORD*)ptr);
1f960     09 FB E1 FA | 	rdword	result1, arg01
1f964     FD 2A 0A F6 | 	mov	local07, result1 wz
1f968     18 00 90 5D |  if_ne	jmp	#LR__3522
1f96c     34 24 06 F1 | 	add	local04, #52
1f970     12 13 02 F6 | 	mov	arg01, local04
1f974     34 24 86 F1 | 	sub	local04, #52
1f978     24 12 06 F1 | 	add	arg01, #36
1f97c                 | ' {
1f97c                 | ' 
1f97c                 | ' 	return *((DWORD*)ptr);
1f97c     09 FB 01 FB | 	rdlong	result1, arg01
1f980     FD 2A 02 F6 | 	mov	local07, result1
1f984                 | LR__3522
1f984     1C 24 06 F1 | 	add	local04, #28
1f988     12 2B 62 FC | 	wrlong	local07, local04
1f98c     28 24 06 F1 | 	add	local04, #40
1f990     12 27 C2 FA | 	rdbyte	local05, local04
1f994     42 24 86 F1 | 	sub	local04, #66
1f998     12 27 42 FC | 	wrbyte	local05, local04
1f99c     12 27 C2 FA | 	rdbyte	local05, local04
1f9a0     02 24 86 F1 | 	sub	local04, #2
1f9a4     01 26 0E F2 | 	cmp	local05, #1 wz
1f9a8     02 24 06 51 |  if_ne	add	local04, #2
1f9ac     12 27 C2 5A |  if_ne	rdbyte	local05, local04
1f9b0     02 24 86 51 |  if_ne	sub	local04, #2
1f9b4     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
1f9b8     0D FA 05 56 |  if_ne	mov	result1, #13
1f9bc     BC 03 90 5D |  if_ne	jmp	#LR__3530
1f9c0     02 24 06 F1 | 	add	local04, #2
1f9c4     12 27 C2 FA | 	rdbyte	local05, local04
1f9c8     13 2B 02 FD | 	qmul	local07, local05
1f9cc     3F 24 06 F1 | 	add	local04, #63
1f9d0     12 27 C2 FA | 	rdbyte	local05, local04
1f9d4     37 24 86 F1 | 	sub	local04, #55
1f9d8     12 27 52 FC | 	wrword	local05, local04
1f9dc     12 27 EA FA | 	rdword	local05, local04 wz
1f9e0     0A 24 86 F1 | 	sub	local04, #10
1f9e4     18 2A 62 FD | 	getqx	local07
1f9e8     20 00 90 AD |  if_e	jmp	#LR__3523
1f9ec     0A 24 06 F1 | 	add	local04, #10
1f9f0     12 27 E2 FA | 	rdword	local05, local04
1f9f4     13 23 32 F9 | 	getword	local03, local05, #0
1f9f8     0A 24 86 F1 | 	sub	local04, #10
1f9fc     13 27 32 F9 | 	getword	local05, local05, #0
1fa00     01 26 86 F1 | 	sub	local05, #1
1fa04     13 23 CA F7 | 	test	local03, local05 wz
1fa08     08 00 90 AD |  if_e	jmp	#LR__3524
1fa0c                 | LR__3523
1fa0c     0D FA 05 F6 | 	mov	result1, #13
1fa10     68 03 90 FD | 	jmp	#LR__3530
1fa14                 | LR__3524
1fa14     34 24 06 F1 | 	add	local04, #52
1fa18     12 13 02 F6 | 	mov	arg01, local04
1fa1c     11 12 06 F1 | 	add	arg01, #17
1fa20                 | ' {
1fa20                 | ' 
1fa20                 | ' 	return *((WORD*)ptr);
1fa20     09 FB E1 FA | 	rdword	result1, arg01
1fa24     2C 24 86 F1 | 	sub	local04, #44
1fa28     12 FB 51 FC | 	wrword	result1, local04
1fa2c     12 27 E2 FA | 	rdword	local05, local04
1fa30     08 24 86 F1 | 	sub	local04, #8
1fa34     13 13 52 F6 | 	abs	arg01, local05 wc
1fa38     09 13 42 F8 | 	getnib	arg01, arg01, #0
1fa3c     09 13 8A F6 | 	negc	arg01, arg01 wz
1fa40     0D FA 05 56 |  if_ne	mov	result1, #13
1fa44     34 03 90 5D |  if_ne	jmp	#LR__3530
1fa48     34 24 06 F1 | 	add	local04, #52
1fa4c     12 13 02 F6 | 	mov	arg01, local04
1fa50     34 24 86 F1 | 	sub	local04, #52
1fa54     13 12 06 F1 | 	add	arg01, #19
1fa58                 | ' {
1fa58                 | ' 
1fa58                 | ' 	return *((WORD*)ptr);
1fa58     09 FB E1 FA | 	rdword	result1, arg01
1fa5c     FD 2C 0A F6 | 	mov	local08, result1 wz
1fa60     34 24 06 A1 |  if_e	add	local04, #52
1fa64     12 13 02 A6 |  if_e	mov	arg01, local04
1fa68     34 24 86 A1 |  if_e	sub	local04, #52
1fa6c     20 12 06 A1 |  if_e	add	arg01, #32
1fa70                 | ' {
1fa70                 | ' 
1fa70                 | ' 	return *((DWORD*)ptr);
1fa70     09 2D 02 AB |  if_e	rdlong	local08, arg01
1fa74     34 24 06 F1 | 	add	local04, #52
1fa78     12 13 02 F6 | 	mov	arg01, local04
1fa7c     34 24 86 F1 | 	sub	local04, #52
1fa80     0E 12 06 F1 | 	add	arg01, #14
1fa84                 | ' {
1fa84                 | ' 
1fa84                 | ' 	return *((WORD*)ptr);
1fa84     09 FB E1 FA | 	rdword	result1, arg01
1fa88     FD 12 02 F6 | 	mov	arg01, result1
1fa8c     09 27 02 F6 | 	mov	local05, arg01
1fa90     0F 26 4E F7 | 	zerox	local05, #15 wz
1fa94     0D FA 05 A6 |  if_e	mov	result1, #13
1fa98     E0 02 90 AD |  if_e	jmp	#LR__3530
1fa9c     09 2F 32 F9 | 	getword	local09, arg01, #0
1faa0     15 2F 02 F1 | 	add	local09, local07
1faa4     08 24 06 F1 | 	add	local04, #8
1faa8     12 27 E2 FA | 	rdword	local05, local04
1faac     08 24 86 F1 | 	sub	local04, #8
1fab0     13 27 52 F6 | 	abs	local05, local05 wc
1fab4     04 26 46 F0 | 	shr	local05, #4
1fab8     13 2F 82 F3 | 	sumc	local09, local05
1fabc     17 2D 12 F2 | 	cmp	local08, local09 wc
1fac0     0D FA 05 C6 |  if_b	mov	result1, #13
1fac4     B4 02 90 CD |  if_b	jmp	#LR__3530
1fac8     17 2D 82 F1 | 	sub	local08, local09
1facc     0A 24 06 F1 | 	add	local04, #10
1fad0     12 27 E2 FA | 	rdword	local05, local04
1fad4     13 2D 12 FD | 	qdiv	local08, local05
1fad8     0A 24 86 F1 | 	sub	local04, #10
1fadc     18 26 62 FD | 	getqx	local05
1fae0     00 26 0E F2 | 	cmp	local05, #0 wz
1fae4     0D FA 05 A6 |  if_e	mov	result1, #13
1fae8     90 02 90 AD |  if_e	jmp	#LR__3530
1faec     00 30 06 F6 | 	mov	local10, #0
1faf0     FF FF 07 FF 
1faf4     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
1faf8     03 30 06 C6 |  if_b	mov	local10, #3
1fafc     7F 00 00 FF 
1fb00     F6 27 16 F2 | 	cmp	local05, ##65526 wc
1fb04     02 30 06 C6 |  if_b	mov	local10, #2
1fb08     07 00 00 FF 
1fb0c     F6 27 16 F2 | 	cmp	local05, ##4086 wc
1fb10     01 30 06 C6 |  if_b	mov	local10, #1
1fb14     00 30 0E F2 | 	cmp	local10, #0 wz
1fb18     0D FA 05 A6 |  if_e	mov	result1, #13
1fb1c     5C 02 90 AD |  if_e	jmp	#LR__3530
1fb20     02 26 06 F1 | 	add	local05, #2
1fb24     18 24 06 F1 | 	add	local04, #24
1fb28     12 27 62 FC | 	wrlong	local05, local04
1fb2c     08 24 06 F1 | 	add	local04, #8
1fb30     12 29 62 FC | 	wrlong	local06, local04
1fb34     14 27 02 F6 | 	mov	local05, local06
1fb38     09 13 32 F9 | 	getword	arg01, arg01, #0
1fb3c     09 27 02 F1 | 	add	local05, arg01
1fb40     04 24 06 F1 | 	add	local04, #4
1fb44     12 27 62 FC | 	wrlong	local05, local04
1fb48     14 27 02 F6 | 	mov	local05, local06
1fb4c     17 27 02 F1 | 	add	local05, local09
1fb50     08 24 06 F1 | 	add	local04, #8
1fb54     12 27 62 FC | 	wrlong	local05, local04
1fb58     2C 24 86 F1 | 	sub	local04, #44
1fb5c     03 30 0E F2 | 	cmp	local10, #3 wz
1fb60     5C 00 90 5D |  if_ne	jmp	#LR__3525
1fb64     34 24 06 F1 | 	add	local04, #52
1fb68     12 13 02 F6 | 	mov	arg01, local04
1fb6c     34 24 86 F1 | 	sub	local04, #52
1fb70     2A 12 06 F1 | 	add	arg01, #42
1fb74                 | ' {
1fb74                 | ' 
1fb74                 | ' 	return *((WORD*)ptr);
1fb74     09 FB E9 FA | 	rdword	result1, arg01 wz
1fb78     0D FA 05 56 |  if_ne	mov	result1, #13
1fb7c     FC 01 90 5D |  if_ne	jmp	#LR__3530
1fb80     08 24 06 F1 | 	add	local04, #8
1fb84     12 27 EA FA | 	rdword	local05, local04 wz
1fb88     08 24 86 F1 | 	sub	local04, #8
1fb8c     0D FA 05 56 |  if_ne	mov	result1, #13
1fb90     E8 01 90 5D |  if_ne	jmp	#LR__3530
1fb94     34 24 06 F1 | 	add	local04, #52
1fb98     12 13 02 F6 | 	mov	arg01, local04
1fb9c     2C 12 06 F1 | 	add	arg01, #44
1fba0                 | ' {
1fba0                 | ' 
1fba0                 | ' 	return *((DWORD*)ptr);
1fba0     09 FB 01 FB | 	rdlong	result1, arg01
1fba4     0C 24 86 F1 | 	sub	local04, #12
1fba8     12 FB 61 FC | 	wrlong	result1, local04
1fbac     10 24 86 F1 | 	sub	local04, #16
1fbb0     12 33 02 FB | 	rdlong	local11, local04
1fbb4     18 24 86 F1 | 	sub	local04, #24
1fbb8     02 32 66 F0 | 	shl	local11, #2
1fbbc     6C 00 90 FD | 	jmp	#LR__3527
1fbc0                 | LR__3525
1fbc0     08 24 06 F1 | 	add	local04, #8
1fbc4     12 27 EA FA | 	rdword	local05, local04 wz
1fbc8     08 24 86 F1 | 	sub	local04, #8
1fbcc     0D FA 05 A6 |  if_e	mov	result1, #13
1fbd0     A8 01 90 AD |  if_e	jmp	#LR__3530
1fbd4     24 24 06 F1 | 	add	local04, #36
1fbd8     12 27 02 FB | 	rdlong	local05, local04
1fbdc     15 27 02 F1 | 	add	local05, local07
1fbe0     04 24 06 F1 | 	add	local04, #4
1fbe4     12 27 62 FC | 	wrlong	local05, local04
1fbe8     28 24 86 F1 | 	sub	local04, #40
1fbec     02 30 0E F2 | 	cmp	local10, #2 wz
1fbf0     18 24 06 A1 |  if_e	add	local04, #24
1fbf4     12 27 02 AB |  if_e	rdlong	local05, local04
1fbf8     18 24 86 A1 |  if_e	sub	local04, #24
1fbfc     01 26 66 A0 |  if_e	shl	local05, #1
1fc00     24 00 90 AD |  if_e	jmp	#LR__3526
1fc04     18 24 06 F1 | 	add	local04, #24
1fc08     12 33 02 FB | 	rdlong	local11, local04
1fc0c     19 27 02 F6 | 	mov	local05, local11
1fc10     01 26 66 F0 | 	shl	local05, #1
1fc14     19 27 02 F1 | 	add	local05, local11
1fc18     01 26 46 F0 | 	shr	local05, #1
1fc1c     18 24 86 F1 | 	sub	local04, #24
1fc20     01 32 06 F5 | 	and	local11, #1
1fc24     19 27 02 F1 | 	add	local05, local11
1fc28                 | LR__3526
1fc28     13 33 02 F6 | 	mov	local11, local05
1fc2c                 | LR__3527
1fc2c     FF 33 06 F1 | 	add	local11, #511
1fc30     09 32 46 F0 | 	shr	local11, #9
1fc34     1C 24 06 F1 | 	add	local04, #28
1fc38     12 17 02 FB | 	rdlong	arg03, local04
1fc3c     1C 24 86 F1 | 	sub	local04, #28
1fc40     19 17 12 F2 | 	cmp	arg03, local11 wc
1fc44     0D FA 05 C6 |  if_b	mov	result1, #13
1fc48     30 01 90 CD |  if_b	jmp	#LR__3530
1fc4c     14 24 06 F1 | 	add	local04, #20
1fc50     FF FF FF FF 
1fc54     12 FF 6B FC | 	wrlong	##-1, local04
1fc58     04 24 86 F1 | 	sub	local04, #4
1fc5c     FF FF FF FF 
1fc60     12 FF 6B FC | 	wrlong	##-1, local04
1fc64     0C 24 86 F1 | 	sub	local04, #12
1fc68     12 01 49 FC | 	wrbyte	#128, local04
1fc6c     04 24 86 F1 | 	sub	local04, #4
1fc70     03 30 0E F2 | 	cmp	local10, #3 wz
1fc74     D0 00 90 5D |  if_ne	jmp	#LR__3529
1fc78     34 24 06 F1 | 	add	local04, #52
1fc7c     12 13 02 F6 | 	mov	arg01, local04
1fc80     34 24 86 F1 | 	sub	local04, #52
1fc84     30 12 06 F1 | 	add	arg01, #48
1fc88                 | ' {
1fc88                 | ' 
1fc88                 | ' 	return *((WORD*)ptr);
1fc88     09 FB E1 FA | 	rdword	result1, arg01
1fc8c     FD 26 32 F9 | 	getword	local05, result1, #0
1fc90     01 26 0E F2 | 	cmp	local05, #1 wz
1fc94     B0 00 90 5D |  if_ne	jmp	#LR__3529
1fc98     01 28 06 F1 | 	add	local06, #1
1fc9c     12 13 02 F6 | 	mov	arg01, local04
1fca0     14 15 02 F6 | 	mov	arg02, local06
1fca4     CC CD BF FD | 	call	#_fatfs_cc_move_window
1fca8     00 FA 0D F2 | 	cmp	result1, #0 wz
1fcac     98 00 90 5D |  if_ne	jmp	#LR__3529
1fcb0     04 24 06 F1 | 	add	local04, #4
1fcb4     12 01 48 FC | 	wrbyte	#0, local04
1fcb8     30 24 06 F1 | 	add	local04, #48
1fcbc     12 13 02 F6 | 	mov	arg01, local04
1fcc0     34 24 86 F1 | 	sub	local04, #52
1fcc4     FE 13 06 F1 | 	add	arg01, #510
1fcc8                 | ' {
1fcc8                 | ' 
1fcc8                 | ' 	return *((WORD*)ptr);
1fcc8     09 FB E1 FA | 	rdword	result1, arg01
1fccc     FD 26 32 F9 | 	getword	local05, result1, #0
1fcd0     55 00 00 FF 
1fcd4     55 26 0E F2 | 	cmp	local05, ##43605 wz
1fcd8     34 24 06 A1 |  if_e	add	local04, #52
1fcdc     12 13 02 A6 |  if_e	mov	arg01, local04
1fce0     34 24 86 A1 |  if_e	sub	local04, #52
1fce4                 | ' {
1fce4                 | ' 
1fce4                 | ' 	return *((DWORD*)ptr);
1fce4     09 FB 01 AB |  if_e	rdlong	result1, arg01
1fce8     A9 B0 20 AF 
1fcec     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
1fcf0     54 00 90 5D |  if_ne	jmp	#LR__3528
1fcf4     34 24 06 F1 | 	add	local04, #52
1fcf8     12 13 02 F6 | 	mov	arg01, local04
1fcfc     34 24 86 F1 | 	sub	local04, #52
1fd00     E4 13 06 F1 | 	add	arg01, #484
1fd04                 | ' {
1fd04                 | ' 
1fd04                 | ' 	return *((DWORD*)ptr);
1fd04     09 FB 01 FB | 	rdlong	result1, arg01
1fd08     B9 A0 30 FF 
1fd0c     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
1fd10     34 00 90 5D |  if_ne	jmp	#LR__3528
1fd14     34 24 06 F1 | 	add	local04, #52
1fd18     12 13 02 F6 | 	mov	arg01, local04
1fd1c     E8 13 06 F1 | 	add	arg01, #488
1fd20                 | ' {
1fd20                 | ' 
1fd20                 | ' 	return *((DWORD*)ptr);
1fd20     09 FB 01 FB | 	rdlong	result1, arg01
1fd24     20 24 86 F1 | 	sub	local04, #32
1fd28     12 FB 61 FC | 	wrlong	result1, local04
1fd2c     20 24 06 F1 | 	add	local04, #32
1fd30     12 13 02 F6 | 	mov	arg01, local04
1fd34     EC 13 06 F1 | 	add	arg01, #492
1fd38                 | ' {
1fd38                 | ' 
1fd38                 | ' 	return *((DWORD*)ptr);
1fd38     09 FB 01 FB | 	rdlong	result1, arg01
1fd3c     24 24 86 F1 | 	sub	local04, #36
1fd40     12 FB 61 FC | 	wrlong	result1, local04
1fd44     10 24 86 F1 | 	sub	local04, #16
1fd48                 | LR__3528
1fd48                 | LR__3529
1fd48     12 31 42 FC | 	wrbyte	local10, local04
1fd4c     04 E4 05 F1 | 	add	objptr, #4
1fd50     F2 26 E2 FA | 	rdword	local05, objptr
1fd54     01 26 06 F1 | 	add	local05, #1
1fd58     F2 26 52 FC | 	wrword	local05, objptr
1fd5c     F2 32 E2 FA | 	rdword	local11, objptr
1fd60     06 24 06 F1 | 	add	local04, #6
1fd64     12 33 52 FC | 	wrword	local11, local04
1fd68     04 E4 05 F1 | 	add	objptr, #4
1fd6c     06 24 06 F1 | 	add	local04, #6
1fd70     12 E5 61 FC | 	wrlong	objptr, local04
1fd74                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
1fd74                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
1fd74                 | ' 			{
1fd74                 | ' 
1fd74                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
1fd74                 | ' 
1fd74                 | ' 
1fd74                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
1fd74                 | ' 
1fd74                 | ' 			}
1fd74                 | ' 		}
1fd74                 | ' 
1fd74                 | ' 
1fd74                 | ' 	}
1fd74                 | ' 
1fd74                 | ' 	fs->fs_type = (BYTE)fmt;
1fd74                 | ' 	fs->id = ++Fsid;
1fd74                 | ' 
1fd74                 | ' 	fs->lfnbuf = LfnBuf;
1fd74                 | ' #line 3567 "ff.c"
1fd74                 | ' 	return FR_OK;
1fd74     00 FA 05 F6 | 	mov	result1, #0
1fd78     08 E4 85 F1 | 	sub	objptr, #8
1fd7c                 | LR__3530
1fd7c     A7 F0 03 F6 | 	mov	ptra, fp
1fd80     B2 00 A0 FD | 	call	#popregs_
1fd84                 | _fatfs_cc_mount_volume_ret
1fd84     2D 00 64 FD | 	ret
1fd88                 | 
1fd88                 | _fatfs_cc_validate
1fd88     09 01 0A F6 | 	mov	_var01, arg01 wz
1fd8c     09 02 06 F6 | 	mov	_var02, #9
1fd90     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
1fd94     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
1fd98     50 00 90 AD |  if_e	jmp	#LR__3540
1fd9c     04 00 06 F1 | 	add	_var01, #4
1fda0     00 07 E2 FA | 	rdword	_var04, _var01
1fda4     04 00 86 F1 | 	sub	_var01, #4
1fda8     00 13 02 FB | 	rdlong	arg01, _var01
1fdac     06 12 06 F1 | 	add	arg01, #6
1fdb0     09 FB E1 FA | 	rdword	result1, arg01
1fdb4     FD 06 0A F2 | 	cmp	_var04, result1 wz
1fdb8     30 00 90 5D |  if_ne	jmp	#LR__3540
1fdbc     00 07 02 FB | 	rdlong	_var04, _var01
1fdc0     01 06 06 F1 | 	add	_var04, #1
1fdc4     03 13 CA FA | 	rdbyte	arg01, _var04 wz
1fdc8     01 FA 05 56 |  if_ne	mov	result1, #1
1fdcc                 | ' 
1fdcc                 | ' 	return Stat;
1fdcc     01 00 00 AF 
1fdd0     20 E4 05 A1 |  if_e	add	objptr, ##544
1fdd4     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1fdd8     01 00 00 AF 
1fddc     20 E4 85 A1 |  if_e	sub	objptr, ##544
1fde0     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
1fde4     01 04 CE F7 | 	test	_var03, #1 wz
1fde8     00 02 06 A6 |  if_e	mov	_var02, #0
1fdec                 | LR__3540
1fdec     00 02 0E F2 | 	cmp	_var02, #0 wz
1fdf0     00 05 02 AB |  if_e	rdlong	_var03, _var01
1fdf4     00 04 06 56 |  if_ne	mov	_var03, #0
1fdf8     0A 05 62 FC | 	wrlong	_var03, arg02
1fdfc                 | ' 			res = FR_OK;
1fdfc                 | ' 		}
1fdfc                 | ' 
1fdfc                 | ' 	}
1fdfc                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
1fdfc                 | ' 	return res;
1fdfc     01 FB 01 F6 | 	mov	result1, _var02
1fe00                 | _fatfs_cc_validate_ret
1fe00     2D 00 64 FD | 	ret
1fe04                 | 
1fe04                 | _fatfs_cc_f_mount
1fe04     01 4A 05 F6 | 	mov	COUNT_, #1
1fe08     A8 00 A0 FD | 	call	#pushregs_
1fe0c     20 F0 07 F1 | 	add	ptra, #32
1fe10     04 4E 05 F1 | 	add	fp, #4
1fe14     A7 12 62 FC | 	wrlong	arg01, fp
1fe18     04 4E 05 F1 | 	add	fp, #4
1fe1c     A7 14 62 FC | 	wrlong	arg02, fp
1fe20     04 4E 05 F1 | 	add	fp, #4
1fe24     A7 16 42 FC | 	wrbyte	arg03, fp
1fe28     04 4E 85 F1 | 	sub	fp, #4
1fe2c     A7 16 02 FB | 	rdlong	arg03, fp
1fe30     14 4E 05 F1 | 	add	fp, #20
1fe34     A7 16 62 FC | 	wrlong	arg03, fp
1fe38     A7 12 02 F6 | 	mov	arg01, fp
1fe3c     1C 4E 85 F1 | 	sub	fp, #28
1fe40     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
1fe44     14 4E 05 F1 | 	add	fp, #20
1fe48     A7 FA 61 FC | 	wrlong	result1, fp
1fe4c     14 4E 85 F1 | 	sub	fp, #20
1fe50     00 FA 55 F2 | 	cmps	result1, #0 wc
1fe54     0B FA 05 C6 |  if_b	mov	result1, #11
1fe58     C0 00 90 CD |  if_b	jmp	#LR__3551
1fe5c     14 4E 05 F1 | 	add	fp, #20
1fe60     A7 16 02 FB | 	rdlong	arg03, fp
1fe64     02 16 66 F0 | 	shl	arg03, #2
1fe68     F2 16 02 F1 | 	add	arg03, objptr
1fe6c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1fe70     04 4E 85 F1 | 	sub	fp, #4
1fe74     A7 16 62 FC | 	wrlong	arg03, fp
1fe78     10 4E 85 F1 | 	sub	fp, #16
1fe7c     28 00 90 AD |  if_e	jmp	#LR__3550
1fe80     10 4E 05 F1 | 	add	fp, #16
1fe84     A7 16 02 FB | 	rdlong	arg03, fp
1fe88     10 4E 85 F1 | 	sub	fp, #16
1fe8c     01 16 06 F1 | 	add	arg03, #1
1fe90     0B 13 C2 FA | 	rdbyte	arg01, arg03
1fe94     30 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
1fe98     10 4E 05 F1 | 	add	fp, #16
1fe9c     A7 16 02 FB | 	rdlong	arg03, fp
1fea0     10 4E 85 F1 | 	sub	fp, #16
1fea4     0B 01 48 FC | 	wrbyte	#0, arg03
1fea8                 | LR__3550
1fea8     04 4E 05 F1 | 	add	fp, #4
1feac     A7 1E 0A FB | 	rdlong	local01, fp wz
1feb0     04 4E 85 F1 | 	sub	fp, #4
1feb4     04 4E 05 51 |  if_ne	add	fp, #4
1feb8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1febc     04 4E 85 51 |  if_ne	sub	fp, #4
1fec0     0F 01 48 5C |  if_ne	wrbyte	#0, local01
1fec4     14 4E 05 F1 | 	add	fp, #20
1fec8     A7 1E 02 FB | 	rdlong	local01, fp
1fecc     02 1E 66 F0 | 	shl	local01, #2
1fed0     F2 1E 02 F1 | 	add	local01, objptr
1fed4     10 4E 85 F1 | 	sub	fp, #16
1fed8     A7 16 02 FB | 	rdlong	arg03, fp
1fedc     0F 17 62 FC | 	wrlong	arg03, local01
1fee0     08 4E 05 F1 | 	add	fp, #8
1fee4     A7 1E CA FA | 	rdbyte	local01, fp wz
1fee8     0C 4E 85 F1 | 	sub	fp, #12
1feec     00 FA 05 A6 |  if_e	mov	result1, #0
1fef0     28 00 90 AD |  if_e	jmp	#LR__3551
1fef4     08 4E 05 F1 | 	add	fp, #8
1fef8     A7 12 02 F6 | 	mov	arg01, fp
1fefc     04 4E 85 F1 | 	sub	fp, #4
1ff00     A7 14 02 F6 | 	mov	arg02, fp
1ff04     04 4E 85 F1 | 	sub	fp, #4
1ff08     00 16 06 F6 | 	mov	arg03, #0
1ff0c     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
1ff10     18 4E 05 F1 | 	add	fp, #24
1ff14     A7 FA 61 FC | 	wrlong	result1, fp
1ff18                 | ' 
1ff18                 | ' 	res = mount_volume(&path, &fs, 0);
1ff18                 | ' 	return res ;
1ff18     18 4E 85 F1 | 	sub	fp, #24
1ff1c                 | LR__3551
1ff1c     A7 F0 03 F6 | 	mov	ptra, fp
1ff20     B2 00 A0 FD | 	call	#popregs_
1ff24                 | _fatfs_cc_f_mount_ret
1ff24     2D 00 64 FD | 	ret
1ff28                 | 
1ff28                 | _fatfs_cc_f_open
1ff28     02 4A 05 F6 | 	mov	COUNT_, #2
1ff2c     A8 00 A0 FD | 	call	#pushregs_
1ff30     60 F0 07 F1 | 	add	ptra, #96
1ff34     04 4E 05 F1 | 	add	fp, #4
1ff38     A7 12 62 FC | 	wrlong	arg01, fp
1ff3c     04 4E 05 F1 | 	add	fp, #4
1ff40     A7 14 62 FC | 	wrlong	arg02, fp
1ff44     04 4E 05 F1 | 	add	fp, #4
1ff48     A7 16 42 FC | 	wrbyte	arg03, fp
1ff4c     08 4E 85 F1 | 	sub	fp, #8
1ff50     A7 18 0A FB | 	rdlong	arg04, fp wz
1ff54     04 4E 85 F1 | 	sub	fp, #4
1ff58     09 FA 05 A6 |  if_e	mov	result1, #9
1ff5c     98 06 90 AD |  if_e	jmp	#LR__3577
1ff60     0C 4E 05 F1 | 	add	fp, #12
1ff64     A7 18 C2 FA | 	rdbyte	arg04, fp
1ff68     3F 18 06 F5 | 	and	arg04, #63
1ff6c     A7 18 42 FC | 	wrbyte	arg04, fp
1ff70     04 4E 85 F1 | 	sub	fp, #4
1ff74     A7 12 02 F6 | 	mov	arg01, fp
1ff78     3C 4E 05 F1 | 	add	fp, #60
1ff7c     A7 14 02 F6 | 	mov	arg02, fp
1ff80     38 4E 85 F1 | 	sub	fp, #56
1ff84     A7 16 C2 FA | 	rdbyte	arg03, fp
1ff88     0C 4E 85 F1 | 	sub	fp, #12
1ff8c     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
1ff90     10 4E 05 F1 | 	add	fp, #16
1ff94     A7 FA 61 FC | 	wrlong	result1, fp
1ff98     10 4E 85 F1 | 	sub	fp, #16
1ff9c     00 FA 0D F2 | 	cmp	result1, #0 wz
1ffa0     2C 06 90 5D |  if_ne	jmp	#LR__3576
1ffa4     44 4E 05 F1 | 	add	fp, #68
1ffa8     A7 18 02 FB | 	rdlong	arg04, fp
1ffac     30 4E 85 F1 | 	sub	fp, #48
1ffb0     A7 18 62 FC | 	wrlong	arg04, fp
1ffb4     A7 12 02 F6 | 	mov	arg01, fp
1ffb8     0C 4E 85 F1 | 	sub	fp, #12
1ffbc     A7 1E 02 FB | 	rdlong	local01, fp
1ffc0     08 4E 85 F1 | 	sub	fp, #8
1ffc4     0F 15 02 F6 | 	mov	arg02, local01
1ffc8     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
1ffcc     10 4E 05 F1 | 	add	fp, #16
1ffd0     A7 FA 61 FC | 	wrlong	result1, fp
1ffd4     10 4E 85 F1 | 	sub	fp, #16
1ffd8     00 FA 0D F2 | 	cmp	result1, #0 wz
1ffdc     1C 00 90 5D |  if_ne	jmp	#LR__3560
1ffe0     3F 4E 05 F1 | 	add	fp, #63
1ffe4     A7 18 C2 FA | 	rdbyte	arg04, fp
1ffe8     3F 4E 85 F1 | 	sub	fp, #63
1ffec     80 18 CE F7 | 	test	arg04, #128 wz
1fff0     10 4E 05 51 |  if_ne	add	fp, #16
1fff4     A7 0C 68 5C |  if_ne	wrlong	#6, fp
1fff8     10 4E 85 51 |  if_ne	sub	fp, #16
1fffc                 | LR__3560
1fffc     0C 4E 05 F1 | 	add	fp, #12
20000     A7 18 C2 FA | 	rdbyte	arg04, fp
20004     0C 4E 85 F1 | 	sub	fp, #12
20008     1C 18 CE F7 | 	test	arg04, #28 wz
2000c     F0 01 90 AD |  if_e	jmp	#LR__3565
20010     10 4E 05 F1 | 	add	fp, #16
20014     A7 1E 0A FB | 	rdlong	local01, fp wz
20018     10 4E 85 F1 | 	sub	fp, #16
2001c     48 00 90 AD |  if_e	jmp	#LR__3562
20020     10 4E 05 F1 | 	add	fp, #16
20024     A7 18 02 FB | 	rdlong	arg04, fp
20028     10 4E 85 F1 | 	sub	fp, #16
2002c     04 18 0E F2 | 	cmp	arg04, #4 wz
20030     1C 00 90 5D |  if_ne	jmp	#LR__3561
20034     14 4E 05 F1 | 	add	fp, #20
20038     A7 12 02 F6 | 	mov	arg01, fp
2003c     14 4E 85 F1 | 	sub	fp, #20
20040     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
20044     10 4E 05 F1 | 	add	fp, #16
20048     A7 FA 61 FC | 	wrlong	result1, fp
2004c     10 4E 85 F1 | 	sub	fp, #16
20050                 | LR__3561
20050     0C 4E 05 F1 | 	add	fp, #12
20054     A7 1E C2 FA | 	rdbyte	local01, fp
20058     08 1E 46 F5 | 	or	local01, #8
2005c     A7 1E 42 FC | 	wrbyte	local01, fp
20060     0C 4E 85 F1 | 	sub	fp, #12
20064     3C 00 90 FD | 	jmp	#LR__3564
20068                 | LR__3562
20068     1A 4E 05 F1 | 	add	fp, #26
2006c     A7 1E C2 FA | 	rdbyte	local01, fp
20070     1A 4E 85 F1 | 	sub	fp, #26
20074     11 1E CE F7 | 	test	local01, #17 wz
20078     10 4E 05 51 |  if_ne	add	fp, #16
2007c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
20080     10 4E 85 51 |  if_ne	sub	fp, #16
20084     1C 00 90 5D |  if_ne	jmp	#LR__3563
20088     0C 4E 05 F1 | 	add	fp, #12
2008c     A7 1E C2 FA | 	rdbyte	local01, fp
20090     0C 4E 85 F1 | 	sub	fp, #12
20094     04 1E CE F7 | 	test	local01, #4 wz
20098     10 4E 05 51 |  if_ne	add	fp, #16
2009c     A7 10 68 5C |  if_ne	wrlong	#8, fp
200a0     10 4E 85 51 |  if_ne	sub	fp, #16
200a4                 | LR__3563
200a4                 | LR__3564
200a4     10 4E 05 F1 | 	add	fp, #16
200a8     A7 1E 0A FB | 	rdlong	local01, fp wz
200ac     10 4E 85 F1 | 	sub	fp, #16
200b0     A8 01 90 5D |  if_ne	jmp	#LR__3568
200b4     0C 4E 05 F1 | 	add	fp, #12
200b8     A7 1E C2 FA | 	rdbyte	local01, fp
200bc     0C 4E 85 F1 | 	sub	fp, #12
200c0     08 1E CE F7 | 	test	local01, #8 wz
200c4     94 01 90 AD |  if_e	jmp	#LR__3568
200c8     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
200cc     54 4E 05 F1 | 	add	fp, #84
200d0     A7 FA 61 FC | 	wrlong	result1, fp
200d4     24 4E 85 F1 | 	sub	fp, #36
200d8     A7 12 02 FB | 	rdlong	arg01, fp
200dc     0E 12 06 F1 | 	add	arg01, #14
200e0     09 FB 61 FC | 	wrlong	result1, arg01
200e4     A7 12 02 FB | 	rdlong	arg01, fp
200e8     16 12 06 F1 | 	add	arg01, #22
200ec     24 4E 05 F1 | 	add	fp, #36
200f0     A7 14 02 FB | 	rdlong	arg02, fp
200f4     09 15 62 FC | 	wrlong	arg02, arg01
200f8     10 4E 85 F1 | 	sub	fp, #16
200fc     A7 12 02 FB | 	rdlong	arg01, fp
20100     14 4E 85 F1 | 	sub	fp, #20
20104     A7 14 02 FB | 	rdlong	arg02, fp
20108     30 4E 85 F1 | 	sub	fp, #48
2010c     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
20110     48 4E 05 F1 | 	add	fp, #72
20114     A7 FA 61 FC | 	wrlong	result1, fp
20118     18 4E 85 F1 | 	sub	fp, #24
2011c     A7 1E 02 FB | 	rdlong	local01, fp
20120     0B 1E 06 F1 | 	add	local01, #11
20124     0F 41 48 FC | 	wrbyte	#32, local01
20128     14 4E 05 F1 | 	add	fp, #20
2012c     A7 12 02 FB | 	rdlong	arg01, fp
20130     14 4E 85 F1 | 	sub	fp, #20
20134     A7 14 02 FB | 	rdlong	arg02, fp
20138     30 4E 85 F1 | 	sub	fp, #48
2013c     00 16 06 F6 | 	mov	arg03, #0
20140     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
20144     30 4E 05 F1 | 	add	fp, #48
20148     A7 12 02 FB | 	rdlong	arg01, fp
2014c     1C 12 06 F1 | 	add	arg01, #28
20150     09 01 68 FC | 	wrlong	#0, arg01
20154     14 4E 05 F1 | 	add	fp, #20
20158     A7 1E 02 FB | 	rdlong	local01, fp
2015c     03 1E 06 F1 | 	add	local01, #3
20160     0F 03 48 FC | 	wrbyte	#1, local01
20164     04 4E 05 F1 | 	add	fp, #4
20168     A7 1E 0A FB | 	rdlong	local01, fp wz
2016c     48 4E 85 F1 | 	sub	fp, #72
20170     E8 00 90 AD |  if_e	jmp	#LR__3568
20174     44 4E 05 F1 | 	add	fp, #68
20178     A7 1E 02 FB | 	rdlong	local01, fp
2017c     30 1E 06 F1 | 	add	local01, #48
20180     0F 1F 02 FB | 	rdlong	local01, local01
20184     14 4E 05 F1 | 	add	fp, #20
20188     A7 1E 62 FC | 	wrlong	local01, fp
2018c     44 4E 85 F1 | 	sub	fp, #68
20190     A7 12 02 F6 | 	mov	arg01, fp
20194     34 4E 05 F1 | 	add	fp, #52
20198     A7 14 02 FB | 	rdlong	arg02, fp
2019c     48 4E 85 F1 | 	sub	fp, #72
201a0     00 16 06 F6 | 	mov	arg03, #0
201a4     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
201a8     10 4E 05 F1 | 	add	fp, #16
201ac     A7 FA 61 FC | 	wrlong	result1, fp
201b0     10 4E 85 F1 | 	sub	fp, #16
201b4     00 FA 0D F2 | 	cmp	result1, #0 wz
201b8     A0 00 90 5D |  if_ne	jmp	#LR__3568
201bc     44 4E 05 F1 | 	add	fp, #68
201c0     A7 12 02 FB | 	rdlong	arg01, fp
201c4     14 4E 05 F1 | 	add	fp, #20
201c8     A7 14 02 FB | 	rdlong	arg02, fp
201cc     58 4E 85 F1 | 	sub	fp, #88
201d0     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
201d4     10 4E 05 F1 | 	add	fp, #16
201d8     A7 FA 61 FC | 	wrlong	result1, fp
201dc     34 4E 05 F1 | 	add	fp, #52
201e0     A7 18 02 FB | 	rdlong	arg04, fp
201e4     04 4E 05 F1 | 	add	fp, #4
201e8     A7 1E 02 FB | 	rdlong	local01, fp
201ec     48 4E 85 F1 | 	sub	fp, #72
201f0     01 1E 86 F1 | 	sub	local01, #1
201f4     10 18 06 F1 | 	add	arg04, #16
201f8     0C 1F 62 FC | 	wrlong	local01, arg04
201fc     5C 00 90 FD | 	jmp	#LR__3568
20200                 | LR__3565
20200     10 4E 05 F1 | 	add	fp, #16
20204     A7 18 0A FB | 	rdlong	arg04, fp wz
20208     10 4E 85 F1 | 	sub	fp, #16
2020c     4C 00 90 5D |  if_ne	jmp	#LR__3567
20210     1A 4E 05 F1 | 	add	fp, #26
20214     A7 18 C2 FA | 	rdbyte	arg04, fp
20218     1A 4E 85 F1 | 	sub	fp, #26
2021c     10 18 CE F7 | 	test	arg04, #16 wz
20220     10 4E 05 51 |  if_ne	add	fp, #16
20224     A7 08 68 5C |  if_ne	wrlong	#4, fp
20228     10 4E 85 51 |  if_ne	sub	fp, #16
2022c     2C 00 90 5D |  if_ne	jmp	#LR__3566
20230     0C 4E 05 F1 | 	add	fp, #12
20234     A7 18 C2 FA | 	rdbyte	arg04, fp
20238     0C 4E 85 F1 | 	sub	fp, #12
2023c     02 18 CE F7 | 	test	arg04, #2 wz
20240     1A 4E 05 51 |  if_ne	add	fp, #26
20244     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
20248     1A 4E 85 51 |  if_ne	sub	fp, #26
2024c     01 1E CE 57 |  if_ne	test	local01, #1 wz
20250     10 4E 05 51 |  if_ne	add	fp, #16
20254     A7 0E 68 5C |  if_ne	wrlong	#7, fp
20258     10 4E 85 51 |  if_ne	sub	fp, #16
2025c                 | LR__3566
2025c                 | LR__3567
2025c                 | LR__3568
2025c     10 4E 05 F1 | 	add	fp, #16
20260     A7 1E 0A FB | 	rdlong	local01, fp wz
20264     10 4E 85 F1 | 	sub	fp, #16
20268     60 00 90 5D |  if_ne	jmp	#LR__3569
2026c     0C 4E 05 F1 | 	add	fp, #12
20270     A7 20 C2 FA | 	rdbyte	local02, fp
20274     0C 4E 85 F1 | 	sub	fp, #12
20278     08 20 CE F7 | 	test	local02, #8 wz
2027c     0C 4E 05 51 |  if_ne	add	fp, #12
20280     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
20284     40 20 46 55 |  if_ne	or	local02, #64
20288     A7 20 42 5C |  if_ne	wrbyte	local02, fp
2028c     0C 4E 85 51 |  if_ne	sub	fp, #12
20290     04 4E 05 F1 | 	add	fp, #4
20294     A7 20 02 FB | 	rdlong	local02, fp
20298     40 4E 05 F1 | 	add	fp, #64
2029c     A7 1E 02 FB | 	rdlong	local01, fp
202a0     30 1E 06 F1 | 	add	local01, #48
202a4     0F 1F 02 FB | 	rdlong	local01, local01
202a8     20 20 06 F1 | 	add	local02, #32
202ac     10 1F 62 FC | 	wrlong	local01, local02
202b0     40 4E 85 F1 | 	sub	fp, #64
202b4     A7 20 02 FB | 	rdlong	local02, fp
202b8     2C 4E 05 F1 | 	add	fp, #44
202bc     A7 1E 02 FB | 	rdlong	local01, fp
202c0     30 4E 85 F1 | 	sub	fp, #48
202c4     24 20 06 F1 | 	add	local02, #36
202c8     10 1F 62 FC | 	wrlong	local01, local02
202cc                 | LR__3569
202cc     10 4E 05 F1 | 	add	fp, #16
202d0     A7 20 0A FB | 	rdlong	local02, fp wz
202d4     10 4E 85 F1 | 	sub	fp, #16
202d8     F4 02 90 5D |  if_ne	jmp	#LR__3575
202dc     04 4E 05 F1 | 	add	fp, #4
202e0     A7 20 02 FB | 	rdlong	local02, fp
202e4     40 4E 05 F1 | 	add	fp, #64
202e8     A7 12 02 FB | 	rdlong	arg01, fp
202ec     14 4E 85 F1 | 	sub	fp, #20
202f0     A7 14 02 FB | 	rdlong	arg02, fp
202f4     30 4E 85 F1 | 	sub	fp, #48
202f8     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
202fc     08 20 06 F1 | 	add	local02, #8
20300     10 FB 61 FC | 	wrlong	result1, local02
20304     04 4E 05 F1 | 	add	fp, #4
20308     A7 20 02 FB | 	rdlong	local02, fp
2030c     2C 4E 05 F1 | 	add	fp, #44
20310     A7 12 02 FB | 	rdlong	arg01, fp
20314     1C 12 06 F1 | 	add	arg01, #28
20318                 | ' {
20318                 | ' 
20318                 | ' 	return *((DWORD*)ptr);
20318     09 FB 01 FB | 	rdlong	result1, arg01
2031c     0C 20 06 F1 | 	add	local02, #12
20320     10 FB 61 FC | 	wrlong	result1, local02
20324     2C 4E 85 F1 | 	sub	fp, #44
20328     A7 20 02 FB | 	rdlong	local02, fp
2032c     40 4E 05 F1 | 	add	fp, #64
20330     A7 1E 02 FB | 	rdlong	local01, fp
20334     10 1F 62 FC | 	wrlong	local01, local02
20338     40 4E 85 F1 | 	sub	fp, #64
2033c     A7 20 02 FB | 	rdlong	local02, fp
20340     40 4E 05 F1 | 	add	fp, #64
20344     A7 1E 02 FB | 	rdlong	local01, fp
20348     06 1E 06 F1 | 	add	local01, #6
2034c     0F 1F E2 FA | 	rdword	local01, local01
20350     04 20 06 F1 | 	add	local02, #4
20354     10 1F 52 FC | 	wrword	local01, local02
20358     40 4E 85 F1 | 	sub	fp, #64
2035c     A7 20 02 FB | 	rdlong	local02, fp
20360     08 4E 05 F1 | 	add	fp, #8
20364     A7 1E C2 FA | 	rdbyte	local01, fp
20368     10 20 06 F1 | 	add	local02, #16
2036c     10 1F 42 FC | 	wrbyte	local01, local02
20370     08 4E 85 F1 | 	sub	fp, #8
20374     A7 20 02 FB | 	rdlong	local02, fp
20378     11 20 06 F1 | 	add	local02, #17
2037c     10 01 48 FC | 	wrbyte	#0, local02
20380     A7 20 02 FB | 	rdlong	local02, fp
20384     1C 20 06 F1 | 	add	local02, #28
20388     10 01 68 FC | 	wrlong	#0, local02
2038c     A7 20 02 FB | 	rdlong	local02, fp
20390     14 20 06 F1 | 	add	local02, #20
20394     10 01 68 FC | 	wrlong	#0, local02
20398     A7 12 02 FB | 	rdlong	arg01, fp
2039c     04 4E 85 F1 | 	sub	fp, #4
203a0     28 12 06 F1 | 	add	arg01, #40
203a4     00 14 06 F6 | 	mov	arg02, #0
203a8     09 16 C6 F9 | 	decod	arg03, #9
203ac     98 00 A0 FD | 	call	#\builtin_bytefill_
203b0     0C 4E 05 F1 | 	add	fp, #12
203b4     A7 20 C2 FA | 	rdbyte	local02, fp
203b8     0C 4E 85 F1 | 	sub	fp, #12
203bc     20 20 CE F7 | 	test	local02, #32 wz
203c0     0C 02 90 AD |  if_e	jmp	#LR__3574
203c4     04 4E 05 F1 | 	add	fp, #4
203c8     A7 1E 02 FB | 	rdlong	local01, fp
203cc     04 4E 85 F1 | 	sub	fp, #4
203d0     0C 1E 06 F1 | 	add	local01, #12
203d4     0F 21 02 FB | 	rdlong	local02, local01
203d8     01 20 16 F2 | 	cmp	local02, #1 wc
203dc     F0 01 90 CD |  if_b	jmp	#LR__3574
203e0     04 4E 05 F1 | 	add	fp, #4
203e4     A7 1E 02 FB | 	rdlong	local01, fp
203e8     0F 21 02 F6 | 	mov	local02, local01
203ec     0C 1E 06 F1 | 	add	local01, #12
203f0     0F 1F 02 FB | 	rdlong	local01, local01
203f4     14 20 06 F1 | 	add	local02, #20
203f8     10 1F 62 FC | 	wrlong	local01, local02
203fc     40 4E 05 F1 | 	add	fp, #64
20400     A7 20 02 FB | 	rdlong	local02, fp
20404     0A 20 06 F1 | 	add	local02, #10
20408     10 21 E2 FA | 	rdword	local02, local02
2040c     09 20 66 F0 | 	shl	local02, #9
20410     08 4E 05 F1 | 	add	fp, #8
20414     A7 20 62 FC | 	wrlong	local02, fp
20418     48 4E 85 F1 | 	sub	fp, #72
2041c     A7 20 02 FB | 	rdlong	local02, fp
20420     08 20 06 F1 | 	add	local02, #8
20424     10 1F 02 FB | 	rdlong	local01, local02
20428     4C 4E 05 F1 | 	add	fp, #76
2042c     A7 1E 62 FC | 	wrlong	local01, fp
20430                 | ' 				fp->fptr = fp->obj.objsize;
20430                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
20430                 | ' 				clst = fp->obj.sclust;
20430                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
20430     4C 4E 85 F1 | 	sub	fp, #76
20434     A7 20 02 FB | 	rdlong	local02, fp
20438     0C 20 06 F1 | 	add	local02, #12
2043c     10 1F 02 FB | 	rdlong	local01, local02
20440     58 4E 05 F1 | 	add	fp, #88
20444     A7 1E 62 FC | 	wrlong	local01, fp
20448     5C 4E 85 F1 | 	sub	fp, #92
2044c                 | LR__3570
2044c     10 4E 05 F1 | 	add	fp, #16
20450     A7 20 0A FB | 	rdlong	local02, fp wz
20454     10 4E 85 F1 | 	sub	fp, #16
20458     94 00 90 5D |  if_ne	jmp	#LR__3571
2045c     5C 4E 05 F1 | 	add	fp, #92
20460     A7 20 02 FB | 	rdlong	local02, fp
20464     10 4E 85 F1 | 	sub	fp, #16
20468     A7 1E 02 FB | 	rdlong	local01, fp
2046c     4C 4E 85 F1 | 	sub	fp, #76
20470     0F 21 1A F2 | 	cmp	local02, local01 wcz
20474     78 00 90 ED |  if_be	jmp	#LR__3571
20478     04 4E 05 F1 | 	add	fp, #4
2047c     A7 12 02 FB | 	rdlong	arg01, fp
20480     4C 4E 05 F1 | 	add	fp, #76
20484     A7 14 02 FB | 	rdlong	arg02, fp
20488     50 4E 85 F1 | 	sub	fp, #80
2048c     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
20490     50 4E 05 F1 | 	add	fp, #80
20494     A7 FA 61 FC | 	wrlong	result1, fp
20498     50 4E 85 F1 | 	sub	fp, #80
2049c     02 FA 15 F2 | 	cmp	result1, #2 wc
204a0     10 4E 05 C1 |  if_b	add	fp, #16
204a4     A7 04 68 CC |  if_b	wrlong	#2, fp
204a8     10 4E 85 C1 |  if_b	sub	fp, #16
204ac     50 4E 05 F1 | 	add	fp, #80
204b0     A7 20 02 FB | 	rdlong	local02, fp
204b4     50 4E 85 F1 | 	sub	fp, #80
204b8     FF FF 7F FF 
204bc     FF 21 0E F2 | 	cmp	local02, ##-1 wz
204c0     10 4E 05 A1 |  if_e	add	fp, #16
204c4     A7 02 68 AC |  if_e	wrlong	#1, fp
204c8     10 4E 85 A1 |  if_e	sub	fp, #16
204cc     5C 4E 05 F1 | 	add	fp, #92
204d0     A7 20 02 FB | 	rdlong	local02, fp
204d4     10 4E 85 F1 | 	sub	fp, #16
204d8     A7 1E 02 FB | 	rdlong	local01, fp
204dc     0F 21 82 F1 | 	sub	local02, local01
204e0     10 4E 05 F1 | 	add	fp, #16
204e4     A7 20 62 FC | 	wrlong	local02, fp
204e8     5C 4E 85 F1 | 	sub	fp, #92
204ec     5C FF 9F FD | 	jmp	#LR__3570
204f0                 | LR__3571
204f0     04 4E 05 F1 | 	add	fp, #4
204f4     A7 20 02 FB | 	rdlong	local02, fp
204f8     4C 4E 05 F1 | 	add	fp, #76
204fc     A7 1E 02 FB | 	rdlong	local01, fp
20500     18 20 06 F1 | 	add	local02, #24
20504     10 1F 62 FC | 	wrlong	local01, local02
20508     40 4E 85 F1 | 	sub	fp, #64
2050c     A7 20 0A FB | 	rdlong	local02, fp wz
20510     10 4E 85 F1 | 	sub	fp, #16
20514     B8 00 90 5D |  if_ne	jmp	#LR__3573
20518     5C 4E 05 F1 | 	add	fp, #92
2051c     A7 1E 02 FB | 	rdlong	local01, fp
20520     5C 4E 85 F1 | 	sub	fp, #92
20524     FF 1F CE F7 | 	test	local01, #511 wz
20528     A4 00 90 AD |  if_e	jmp	#LR__3573
2052c     44 4E 05 F1 | 	add	fp, #68
20530     A7 12 02 FB | 	rdlong	arg01, fp
20534     0C 4E 05 F1 | 	add	fp, #12
20538     A7 14 02 FB | 	rdlong	arg02, fp
2053c     50 4E 85 F1 | 	sub	fp, #80
20540     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
20544     58 4E 05 F1 | 	add	fp, #88
20548     A7 FA 61 FC | 	wrlong	result1, fp
2054c     00 FA 4D F2 | 	cmps	result1, #0 wz
20550     58 4E 85 F1 | 	sub	fp, #88
20554     10 4E 05 A1 |  if_e	add	fp, #16
20558     A7 04 68 AC |  if_e	wrlong	#2, fp
2055c     10 4E 85 A1 |  if_e	sub	fp, #16
20560     6C 00 90 AD |  if_e	jmp	#LR__3572
20564     04 4E 05 F1 | 	add	fp, #4
20568     A7 20 02 FB | 	rdlong	local02, fp
2056c     54 4E 05 F1 | 	add	fp, #84
20570     A7 1E 02 FB | 	rdlong	local01, fp
20574     04 4E 05 F1 | 	add	fp, #4
20578     A7 18 02 FB | 	rdlong	arg04, fp
2057c     09 18 46 F0 | 	shr	arg04, #9
20580     0C 1F 02 F1 | 	add	local01, arg04
20584     1C 20 06 F1 | 	add	local02, #28
20588     10 1F 62 FC | 	wrlong	local01, local02
2058c     18 4E 85 F1 | 	sub	fp, #24
20590     A7 20 02 FB | 	rdlong	local02, fp
20594     01 20 06 F1 | 	add	local02, #1
20598     10 13 C2 FA | 	rdbyte	arg01, local02
2059c     40 4E 85 F1 | 	sub	fp, #64
205a0     A7 20 02 FB | 	rdlong	local02, fp
205a4     10 15 02 F6 | 	mov	arg02, local02
205a8     28 14 06 F1 | 	add	arg02, #40
205ac     04 4E 85 F1 | 	sub	fp, #4
205b0     1C 20 06 F1 | 	add	local02, #28
205b4     10 17 02 FB | 	rdlong	arg03, local02
205b8     01 18 06 F6 | 	mov	arg04, #1
205bc     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
205c0     00 FA 0D F2 | 	cmp	result1, #0 wz
205c4     10 4E 05 51 |  if_ne	add	fp, #16
205c8     A7 02 68 5C |  if_ne	wrlong	#1, fp
205cc     10 4E 85 51 |  if_ne	sub	fp, #16
205d0                 | LR__3572
205d0                 | LR__3573
205d0                 | LR__3574
205d0                 | LR__3575
205d0                 | LR__3576
205d0     10 4E 05 F1 | 	add	fp, #16
205d4     A7 20 0A FB | 	rdlong	local02, fp wz
205d8     10 4E 85 F1 | 	sub	fp, #16
205dc     04 4E 05 51 |  if_ne	add	fp, #4
205e0     A7 20 02 5B |  if_ne	rdlong	local02, fp
205e4     04 4E 85 51 |  if_ne	sub	fp, #4
205e8     10 01 68 5C |  if_ne	wrlong	#0, local02
205ec                 | ' 
205ec                 | ' 	return res ;
205ec     10 4E 05 F1 | 	add	fp, #16
205f0     A7 FA 01 FB | 	rdlong	result1, fp
205f4     10 4E 85 F1 | 	sub	fp, #16
205f8                 | LR__3577
205f8     A7 F0 03 F6 | 	mov	ptra, fp
205fc     B2 00 A0 FD | 	call	#popregs_
20600                 | _fatfs_cc_f_open_ret
20600     2D 00 64 FD | 	ret
20604                 | 
20604                 | _fatfs_cc_f_read
20604     0E 4A 05 F6 | 	mov	COUNT_, #14
20608     A8 00 A0 FD | 	call	#pushregs_
2060c     38 F0 07 F1 | 	add	ptra, #56
20610     04 4E 05 F1 | 	add	fp, #4
20614     A7 12 62 FC | 	wrlong	arg01, fp
20618     04 4E 05 F1 | 	add	fp, #4
2061c     A7 14 62 FC | 	wrlong	arg02, fp
20620     04 4E 05 F1 | 	add	fp, #4
20624     A7 16 62 FC | 	wrlong	arg03, fp
20628     04 4E 05 F1 | 	add	fp, #4
2062c     A7 18 62 FC | 	wrlong	arg04, fp
20630     08 4E 85 F1 | 	sub	fp, #8
20634     A7 FA 01 FB | 	rdlong	result1, fp
20638     2C 4E 05 F1 | 	add	fp, #44
2063c     A7 FA 61 FC | 	wrlong	result1, fp
20640     24 4E 85 F1 | 	sub	fp, #36
20644     A7 FA 01 FB | 	rdlong	result1, fp
20648     FD 00 68 FC | 	wrlong	#0, result1
2064c     0C 4E 85 F1 | 	sub	fp, #12
20650     A7 12 02 FB | 	rdlong	arg01, fp
20654     14 4E 05 F1 | 	add	fp, #20
20658     A7 14 02 F6 | 	mov	arg02, fp
2065c     18 4E 85 F1 | 	sub	fp, #24
20660     24 F7 BF FD | 	call	#_fatfs_cc_validate
20664     14 4E 05 F1 | 	add	fp, #20
20668     A7 FA 61 FC | 	wrlong	result1, fp
2066c     00 FA 4D F2 | 	cmps	result1, #0 wz
20670     14 4E 85 F1 | 	sub	fp, #20
20674     20 00 90 5D |  if_ne	jmp	#LR__3580
20678     04 4E 05 F1 | 	add	fp, #4
2067c     A7 14 02 FB | 	rdlong	arg02, fp
20680     11 14 06 F1 | 	add	arg02, #17
20684     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
20688     10 4E 05 F1 | 	add	fp, #16
2068c     A7 14 62 FC | 	wrlong	arg02, fp
20690     14 4E 85 F1 | 	sub	fp, #20
20694     10 00 90 AD |  if_e	jmp	#LR__3581
20698                 | LR__3580
20698     14 4E 05 F1 | 	add	fp, #20
2069c     A7 FA 01 FB | 	rdlong	result1, fp
206a0     14 4E 85 F1 | 	sub	fp, #20
206a4     EC 05 90 FD | 	jmp	#LR__3600
206a8                 | LR__3581
206a8     04 4E 05 F1 | 	add	fp, #4
206ac     A7 18 02 FB | 	rdlong	arg04, fp
206b0     04 4E 85 F1 | 	sub	fp, #4
206b4     10 18 06 F1 | 	add	arg04, #16
206b8     0C 19 C2 FA | 	rdbyte	arg04, arg04
206bc     01 18 CE F7 | 	test	arg04, #1 wz
206c0     07 FA 05 A6 |  if_e	mov	result1, #7
206c4     CC 05 90 AD |  if_e	jmp	#LR__3600
206c8     04 4E 05 F1 | 	add	fp, #4
206cc     A7 1E 02 FB | 	rdlong	local01, fp
206d0     0F 21 02 F6 | 	mov	local02, local01
206d4     0C 20 06 F1 | 	add	local02, #12
206d8     10 23 02 FB | 	rdlong	local03, local02
206dc     14 1E 06 F1 | 	add	local01, #20
206e0     0F 1F 02 FB | 	rdlong	local01, local01
206e4     0F 23 82 F1 | 	sub	local03, local01
206e8     20 4E 05 F1 | 	add	fp, #32
206ec     A7 22 62 FC | 	wrlong	local03, fp
206f0     18 4E 85 F1 | 	sub	fp, #24
206f4     A7 24 02 FB | 	rdlong	local04, fp
206f8     0C 4E 85 F1 | 	sub	fp, #12
206fc     11 25 1A F2 | 	cmp	local04, local03 wcz
20700     24 4E 05 11 |  if_a	add	fp, #36
20704     A7 24 02 1B |  if_a	rdlong	local04, fp
20708     18 4E 85 11 |  if_a	sub	fp, #24
2070c     A7 24 62 1C |  if_a	wrlong	local04, fp
20710     0C 4E 85 11 |  if_a	sub	fp, #12
20714                 | ' 
20714                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
20714                 | LR__3582
20714     0C 4E 05 F1 | 	add	fp, #12
20718     A7 20 02 FB | 	rdlong	local02, fp
2071c     0C 4E 85 F1 | 	sub	fp, #12
20720     10 25 02 F6 | 	mov	local04, local02
20724     01 24 16 F2 | 	cmp	local04, #1 wc
20728     64 05 90 CD |  if_b	jmp	#LR__3599
2072c     04 4E 05 F1 | 	add	fp, #4
20730     A7 22 02 FB | 	rdlong	local03, fp
20734     04 4E 85 F1 | 	sub	fp, #4
20738     14 22 06 F1 | 	add	local03, #20
2073c     11 23 02 FB | 	rdlong	local03, local03
20740     FF 23 CE F7 | 	test	local03, #511 wz
20744     3C 04 90 5D |  if_ne	jmp	#LR__3597
20748     04 4E 05 F1 | 	add	fp, #4
2074c     A7 1E 02 FB | 	rdlong	local01, fp
20750     14 1E 06 F1 | 	add	local01, #20
20754     0F 23 02 FB | 	rdlong	local03, local01
20758     09 22 46 F0 | 	shr	local03, #9
2075c     14 4E 05 F1 | 	add	fp, #20
20760     A7 26 02 FB | 	rdlong	local05, fp
20764     13 29 02 F6 | 	mov	local06, local05
20768     0A 28 06 F1 | 	add	local06, #10
2076c     14 2B E2 FA | 	rdword	local07, local06
20770     0A 28 86 F1 | 	sub	local06, #10
20774     15 2D 32 F9 | 	getword	local08, local07, #0
20778     01 2C 86 F1 | 	sub	local08, #1
2077c     16 23 0A F5 | 	and	local03, local08 wz
20780     18 4E 05 F1 | 	add	fp, #24
20784     A7 22 62 FC | 	wrlong	local03, fp
20788     30 4E 85 F1 | 	sub	fp, #48
2078c     E0 00 90 5D |  if_ne	jmp	#LR__3587
20790     04 4E 05 F1 | 	add	fp, #4
20794     A7 22 02 FB | 	rdlong	local03, fp
20798     04 4E 85 F1 | 	sub	fp, #4
2079c     14 22 06 F1 | 	add	local03, #20
207a0     11 23 0A FB | 	rdlong	local03, local03 wz
207a4     20 00 90 5D |  if_ne	jmp	#LR__3583
207a8     04 4E 05 F1 | 	add	fp, #4
207ac     A7 22 02 FB | 	rdlong	local03, fp
207b0     08 22 06 F1 | 	add	local03, #8
207b4     11 23 02 FB | 	rdlong	local03, local03
207b8     18 4E 05 F1 | 	add	fp, #24
207bc     A7 22 62 FC | 	wrlong	local03, fp
207c0     1C 4E 85 F1 | 	sub	fp, #28
207c4     28 00 90 FD | 	jmp	#LR__3584
207c8                 | LR__3583
207c8     04 4E 05 F1 | 	add	fp, #4
207cc     A7 2C 02 FB | 	rdlong	local08, fp
207d0     16 13 02 F6 | 	mov	arg01, local08
207d4     04 4E 85 F1 | 	sub	fp, #4
207d8     18 2C 06 F1 | 	add	local08, #24
207dc     16 15 02 FB | 	rdlong	arg02, local08
207e0     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
207e4     1C 4E 05 F1 | 	add	fp, #28
207e8     A7 FA 61 FC | 	wrlong	result1, fp
207ec     1C 4E 85 F1 | 	sub	fp, #28
207f0                 | LR__3584
207f0     1C 4E 05 F1 | 	add	fp, #28
207f4     A7 22 02 FB | 	rdlong	local03, fp
207f8     1C 4E 85 F1 | 	sub	fp, #28
207fc     02 22 16 F2 | 	cmp	local03, #2 wc
20800     1C 00 90 3D |  if_ae	jmp	#LR__3585
20804     04 4E 05 F1 | 	add	fp, #4
20808     A7 22 02 FB | 	rdlong	local03, fp
2080c     04 4E 85 F1 | 	sub	fp, #4
20810     11 22 06 F1 | 	add	local03, #17
20814     11 05 48 FC | 	wrbyte	#2, local03
20818     02 FA 05 F6 | 	mov	result1, #2
2081c     74 04 90 FD | 	jmp	#LR__3600
20820                 | LR__3585
20820     1C 4E 05 F1 | 	add	fp, #28
20824     A7 22 02 FB | 	rdlong	local03, fp
20828     1C 4E 85 F1 | 	sub	fp, #28
2082c     FF FF 7F FF 
20830     FF 23 0E F2 | 	cmp	local03, ##-1 wz
20834     1C 00 90 5D |  if_ne	jmp	#LR__3586
20838     04 4E 05 F1 | 	add	fp, #4
2083c     A7 22 02 FB | 	rdlong	local03, fp
20840     04 4E 85 F1 | 	sub	fp, #4
20844     11 22 06 F1 | 	add	local03, #17
20848     11 03 48 FC | 	wrbyte	#1, local03
2084c     01 FA 05 F6 | 	mov	result1, #1
20850     40 04 90 FD | 	jmp	#LR__3600
20854                 | LR__3586
20854     04 4E 05 F1 | 	add	fp, #4
20858     A7 22 02 FB | 	rdlong	local03, fp
2085c     18 4E 05 F1 | 	add	fp, #24
20860     A7 2C 02 FB | 	rdlong	local08, fp
20864     1C 4E 85 F1 | 	sub	fp, #28
20868     18 22 06 F1 | 	add	local03, #24
2086c     11 2D 62 FC | 	wrlong	local08, local03
20870                 | LR__3587
20870     18 4E 05 F1 | 	add	fp, #24
20874     A7 12 02 FB | 	rdlong	arg01, fp
20878     14 4E 85 F1 | 	sub	fp, #20
2087c     A7 22 02 FB | 	rdlong	local03, fp
20880     04 4E 85 F1 | 	sub	fp, #4
20884     18 22 06 F1 | 	add	local03, #24
20888     11 15 02 FB | 	rdlong	arg02, local03
2088c     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
20890     20 4E 05 F1 | 	add	fp, #32
20894     A7 FA 61 FC | 	wrlong	result1, fp
20898     20 4E 85 F1 | 	sub	fp, #32
2089c     00 FA 0D F2 | 	cmp	result1, #0 wz
208a0     1C 00 90 5D |  if_ne	jmp	#LR__3588
208a4     04 4E 05 F1 | 	add	fp, #4
208a8     A7 22 02 FB | 	rdlong	local03, fp
208ac     04 4E 85 F1 | 	sub	fp, #4
208b0     11 22 06 F1 | 	add	local03, #17
208b4     11 05 48 FC | 	wrbyte	#2, local03
208b8     02 FA 05 F6 | 	mov	result1, #2
208bc     D4 03 90 FD | 	jmp	#LR__3600
208c0                 | LR__3588
208c0     20 4E 05 F1 | 	add	fp, #32
208c4     A7 22 02 FB | 	rdlong	local03, fp
208c8     10 4E 05 F1 | 	add	fp, #16
208cc     A7 2C 02 FB | 	rdlong	local08, fp
208d0     16 23 02 F1 | 	add	local03, local08
208d4     10 4E 85 F1 | 	sub	fp, #16
208d8     A7 22 62 FC | 	wrlong	local03, fp
208dc     14 4E 85 F1 | 	sub	fp, #20
208e0     A7 22 02 FB | 	rdlong	local03, fp
208e4     09 22 46 F0 | 	shr	local03, #9
208e8     20 4E 05 F1 | 	add	fp, #32
208ec     A7 22 62 FC | 	wrlong	local03, fp
208f0     2C 4E 85 F1 | 	sub	fp, #44
208f4     01 22 16 F2 | 	cmp	local03, #1 wc
208f8     5C 01 90 CD |  if_b	jmp	#LR__3592
208fc     30 4E 05 F1 | 	add	fp, #48
20900     A7 22 02 FB | 	rdlong	local03, fp
20904     04 4E 85 F1 | 	sub	fp, #4
20908     A7 2C 02 FB | 	rdlong	local08, fp
2090c     16 23 02 F1 | 	add	local03, local08
20910     14 4E 85 F1 | 	sub	fp, #20
20914     A7 2C 02 FB | 	rdlong	local08, fp
20918     18 4E 85 F1 | 	sub	fp, #24
2091c     0A 2C 06 F1 | 	add	local08, #10
20920     16 2D E2 FA | 	rdword	local08, local08
20924     16 23 1A F2 | 	cmp	local03, local08 wcz
20928     28 00 90 ED |  if_be	jmp	#LR__3589
2092c     18 4E 05 F1 | 	add	fp, #24
20930     A7 1E 02 FB | 	rdlong	local01, fp
20934     0A 1E 06 F1 | 	add	local01, #10
20938     0F 23 E2 FA | 	rdword	local03, local01
2093c     18 4E 05 F1 | 	add	fp, #24
20940     A7 2C 02 FB | 	rdlong	local08, fp
20944     16 23 82 F1 | 	sub	local03, local08
20948     04 4E 85 F1 | 	sub	fp, #4
2094c     A7 22 62 FC | 	wrlong	local03, fp
20950     2C 4E 85 F1 | 	sub	fp, #44
20954                 | LR__3589
20954     18 4E 05 F1 | 	add	fp, #24
20958     A7 1E 02 FB | 	rdlong	local01, fp
2095c     01 1E 06 F1 | 	add	local01, #1
20960     0F 13 C2 FA | 	rdbyte	arg01, local01
20964     1C 4E 05 F1 | 	add	fp, #28
20968     A7 14 02 FB | 	rdlong	arg02, fp
2096c     14 4E 85 F1 | 	sub	fp, #20
20970     A7 16 02 FB | 	rdlong	arg03, fp
20974     0C 4E 05 F1 | 	add	fp, #12
20978     A7 18 02 FB | 	rdlong	arg04, fp
2097c     2C 4E 85 F1 | 	sub	fp, #44
20980     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
20984     00 FA 0D F2 | 	cmp	result1, #0 wz
20988     1C 00 90 AD |  if_e	jmp	#LR__3590
2098c     04 4E 05 F1 | 	add	fp, #4
20990     A7 22 02 FB | 	rdlong	local03, fp
20994     04 4E 85 F1 | 	sub	fp, #4
20998     11 22 06 F1 | 	add	local03, #17
2099c     11 03 48 FC | 	wrbyte	#1, local03
209a0     01 FA 05 F6 | 	mov	result1, #1
209a4     EC 02 90 FD | 	jmp	#LR__3600
209a8                 | LR__3590
209a8     04 4E 05 F1 | 	add	fp, #4
209ac     A7 1E 02 FB | 	rdlong	local01, fp
209b0     04 4E 85 F1 | 	sub	fp, #4
209b4     10 1E 06 F1 | 	add	local01, #16
209b8     0F 23 C2 FA | 	rdbyte	local03, local01
209bc     80 22 CE F7 | 	test	local03, #128 wz
209c0     78 00 90 AD |  if_e	jmp	#LR__3591
209c4     04 4E 05 F1 | 	add	fp, #4
209c8     A7 2C 02 FB | 	rdlong	local08, fp
209cc     1C 2C 06 F1 | 	add	local08, #28
209d0     16 2D 02 FB | 	rdlong	local08, local08
209d4     1C 4E 05 F1 | 	add	fp, #28
209d8     A7 2E 02 FB | 	rdlong	local09, fp
209dc     17 2D 82 F1 | 	sub	local08, local09
209e0     0C 4E 05 F1 | 	add	fp, #12
209e4     A7 30 02 FB | 	rdlong	local10, fp
209e8     2C 4E 85 F1 | 	sub	fp, #44
209ec     18 33 02 F6 | 	mov	local11, local10
209f0     19 2D 12 F2 | 	cmp	local08, local11 wc
209f4     44 00 90 3D |  if_ae	jmp	#LR__3591
209f8     34 4E 05 F1 | 	add	fp, #52
209fc     A7 12 02 FB | 	rdlong	arg01, fp
20a00     30 4E 85 F1 | 	sub	fp, #48
20a04     A7 14 02 FB | 	rdlong	arg02, fp
20a08     0A 33 02 F6 | 	mov	local11, arg02
20a0c     1C 32 06 F1 | 	add	local11, #28
20a10     19 2F 02 FB | 	rdlong	local09, local11
20a14     1C 4E 05 F1 | 	add	fp, #28
20a18     A7 26 02 FB | 	rdlong	local05, fp
20a1c     13 2F 82 F1 | 	sub	local09, local05
20a20     09 2E 66 F0 | 	shl	local09, #9
20a24     17 33 02 F6 | 	mov	local11, local09
20a28     17 13 02 F1 | 	add	arg01, local09
20a2c     20 4E 85 F1 | 	sub	fp, #32
20a30     28 14 06 F1 | 	add	arg02, #40
20a34     09 16 C6 F9 | 	decod	arg03, #9
20a38     A4 4C BF FD | 	call	#__system____builtin_memmove
20a3c                 | LR__3591
20a3c     2C 4E 05 F1 | 	add	fp, #44
20a40     A7 22 02 FB | 	rdlong	local03, fp
20a44     09 22 66 F0 | 	shl	local03, #9
20a48     04 4E 85 F1 | 	sub	fp, #4
20a4c     A7 22 62 FC | 	wrlong	local03, fp
20a50     28 4E 85 F1 | 	sub	fp, #40
20a54                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
20a54                 | ' 				}
20a54                 | ' 
20a54                 | ' 
20a54                 | ' 				rcnt =  ((UINT) 512 )  * cc;
20a54                 | ' 				continue;
20a54     B4 01 90 FD | 	jmp	#LR__3598
20a58                 | LR__3592
20a58     04 4E 05 F1 | 	add	fp, #4
20a5c     A7 22 02 FB | 	rdlong	local03, fp
20a60     1C 22 06 F1 | 	add	local03, #28
20a64     11 23 02 FB | 	rdlong	local03, local03
20a68     1C 4E 05 F1 | 	add	fp, #28
20a6c     A7 1E 02 FB | 	rdlong	local01, fp
20a70     20 4E 85 F1 | 	sub	fp, #32
20a74     0F 23 0A F2 | 	cmp	local03, local01 wz
20a78     EC 00 90 AD |  if_e	jmp	#LR__3596
20a7c     04 4E 05 F1 | 	add	fp, #4
20a80     A7 1E 02 FB | 	rdlong	local01, fp
20a84     04 4E 85 F1 | 	sub	fp, #4
20a88     10 1E 06 F1 | 	add	local01, #16
20a8c     0F 23 C2 FA | 	rdbyte	local03, local01
20a90     80 22 CE F7 | 	test	local03, #128 wz
20a94     7C 00 90 AD |  if_e	jmp	#LR__3594
20a98     18 4E 05 F1 | 	add	fp, #24
20a9c     A7 1E 02 FB | 	rdlong	local01, fp
20aa0     01 1E 06 F1 | 	add	local01, #1
20aa4     0F 13 C2 FA | 	rdbyte	arg01, local01
20aa8     14 4E 85 F1 | 	sub	fp, #20
20aac     A7 22 02 FB | 	rdlong	local03, fp
20ab0     11 15 02 F6 | 	mov	arg02, local03
20ab4     28 14 06 F1 | 	add	arg02, #40
20ab8     04 4E 85 F1 | 	sub	fp, #4
20abc     1C 22 06 F1 | 	add	local03, #28
20ac0     11 17 02 FB | 	rdlong	arg03, local03
20ac4     01 18 06 F6 | 	mov	arg04, #1
20ac8     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
20acc     00 FA 0D F2 | 	cmp	result1, #0 wz
20ad0     1C 00 90 AD |  if_e	jmp	#LR__3593
20ad4     04 4E 05 F1 | 	add	fp, #4
20ad8     A7 22 02 FB | 	rdlong	local03, fp
20adc     04 4E 85 F1 | 	sub	fp, #4
20ae0     11 22 06 F1 | 	add	local03, #17
20ae4     11 03 48 FC | 	wrbyte	#1, local03
20ae8     01 FA 05 F6 | 	mov	result1, #1
20aec     A4 01 90 FD | 	jmp	#LR__3600
20af0                 | LR__3593
20af0     04 4E 05 F1 | 	add	fp, #4
20af4     A7 32 02 FB | 	rdlong	local11, fp
20af8     19 23 02 F6 | 	mov	local03, local11
20afc     04 4E 85 F1 | 	sub	fp, #4
20b00     10 32 06 F1 | 	add	local11, #16
20b04     19 33 C2 FA | 	rdbyte	local11, local11
20b08     7F 32 06 F5 | 	and	local11, #127
20b0c     10 22 06 F1 | 	add	local03, #16
20b10     11 33 42 FC | 	wrbyte	local11, local03
20b14                 | LR__3594
20b14     18 4E 05 F1 | 	add	fp, #24
20b18     A7 1E 02 FB | 	rdlong	local01, fp
20b1c     01 1E 06 F1 | 	add	local01, #1
20b20     0F 13 C2 FA | 	rdbyte	arg01, local01
20b24     14 4E 85 F1 | 	sub	fp, #20
20b28     A7 14 02 FB | 	rdlong	arg02, fp
20b2c     28 14 06 F1 | 	add	arg02, #40
20b30     1C 4E 05 F1 | 	add	fp, #28
20b34     A7 16 02 FB | 	rdlong	arg03, fp
20b38     20 4E 85 F1 | 	sub	fp, #32
20b3c     01 18 06 F6 | 	mov	arg04, #1
20b40     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
20b44     00 FA 0D F2 | 	cmp	result1, #0 wz
20b48     1C 00 90 AD |  if_e	jmp	#LR__3595
20b4c     04 4E 05 F1 | 	add	fp, #4
20b50     A7 22 02 FB | 	rdlong	local03, fp
20b54     04 4E 85 F1 | 	sub	fp, #4
20b58     11 22 06 F1 | 	add	local03, #17
20b5c     11 03 48 FC | 	wrbyte	#1, local03
20b60     01 FA 05 F6 | 	mov	result1, #1
20b64     2C 01 90 FD | 	jmp	#LR__3600
20b68                 | LR__3595
20b68                 | LR__3596
20b68     04 4E 05 F1 | 	add	fp, #4
20b6c     A7 22 02 FB | 	rdlong	local03, fp
20b70     1C 4E 05 F1 | 	add	fp, #28
20b74     A7 32 02 FB | 	rdlong	local11, fp
20b78     20 4E 85 F1 | 	sub	fp, #32
20b7c     1C 22 06 F1 | 	add	local03, #28
20b80     11 33 62 FC | 	wrlong	local11, local03
20b84                 | LR__3597
20b84     04 4E 05 F1 | 	add	fp, #4
20b88     A7 1E 02 FB | 	rdlong	local01, fp
20b8c     14 1E 06 F1 | 	add	local01, #20
20b90     0F 33 02 FB | 	rdlong	local11, local01
20b94     FF 33 06 F5 | 	and	local11, #511
20b98     09 22 C6 F9 | 	decod	local03, #9
20b9c     19 23 82 F1 | 	sub	local03, local11
20ba0     24 4E 05 F1 | 	add	fp, #36
20ba4     A7 22 62 FC | 	wrlong	local03, fp
20ba8     1C 4E 85 F1 | 	sub	fp, #28
20bac     A7 32 02 FB | 	rdlong	local11, fp
20bb0     0C 4E 85 F1 | 	sub	fp, #12
20bb4     19 23 1A F2 | 	cmp	local03, local11 wcz
20bb8     0C 4E 05 11 |  if_a	add	fp, #12
20bbc     A7 22 02 1B |  if_a	rdlong	local03, fp
20bc0     1C 4E 05 11 |  if_a	add	fp, #28
20bc4     A7 22 62 1C |  if_a	wrlong	local03, fp
20bc8     28 4E 85 11 |  if_a	sub	fp, #40
20bcc     34 4E 05 F1 | 	add	fp, #52
20bd0     A7 12 02 FB | 	rdlong	arg01, fp
20bd4     30 4E 85 F1 | 	sub	fp, #48
20bd8     A7 28 02 FB | 	rdlong	local06, fp
20bdc     14 15 02 F6 | 	mov	arg02, local06
20be0     28 14 06 F1 | 	add	arg02, #40
20be4     14 28 06 F1 | 	add	local06, #20
20be8     14 33 02 FB | 	rdlong	local11, local06
20bec     19 2F 02 F6 | 	mov	local09, local11
20bf0     17 31 02 F6 | 	mov	local10, local09
20bf4     FF 31 06 F5 | 	and	local10, #511
20bf8     18 15 02 F1 | 	add	arg02, local10
20bfc     24 4E 05 F1 | 	add	fp, #36
20c00     A7 16 02 FB | 	rdlong	arg03, fp
20c04     28 4E 85 F1 | 	sub	fp, #40
20c08     D4 4A BF FD | 	call	#__system____builtin_memmove
20c0c                 | LR__3598
20c0c     0C 4E 05 F1 | 	add	fp, #12
20c10     A7 22 02 FB | 	rdlong	local03, fp
20c14     1C 4E 05 F1 | 	add	fp, #28
20c18     A7 2C 02 FB | 	rdlong	local08, fp
20c1c     16 23 82 F1 | 	sub	local03, local08
20c20     1C 4E 85 F1 | 	sub	fp, #28
20c24     A7 22 62 FC | 	wrlong	local03, fp
20c28     04 4E 05 F1 | 	add	fp, #4
20c2c     A7 1E 02 FB | 	rdlong	local01, fp
20c30     0F 2B 02 FB | 	rdlong	local07, local01
20c34     18 4E 05 F1 | 	add	fp, #24
20c38     A7 2C 02 FB | 	rdlong	local08, fp
20c3c     16 2B 02 F1 | 	add	local07, local08
20c40     0F 2B 62 FC | 	wrlong	local07, local01
20c44     0C 4E 05 F1 | 	add	fp, #12
20c48     A7 22 02 FB | 	rdlong	local03, fp
20c4c     0C 4E 85 F1 | 	sub	fp, #12
20c50     A7 34 02 FB | 	rdlong	local12, fp
20c54     1A 23 02 F1 | 	add	local03, local12
20c58     0C 4E 05 F1 | 	add	fp, #12
20c5c     A7 22 62 FC | 	wrlong	local03, fp
20c60     30 4E 85 F1 | 	sub	fp, #48
20c64     A7 36 02 FB | 	rdlong	local13, fp
20c68     1B 23 02 F6 | 	mov	local03, local13
20c6c     14 36 06 F1 | 	add	local13, #20
20c70     1B 39 02 FB | 	rdlong	local14, local13
20c74     24 4E 05 F1 | 	add	fp, #36
20c78     A7 28 02 FB | 	rdlong	local06, fp
20c7c     28 4E 85 F1 | 	sub	fp, #40
20c80     14 39 02 F1 | 	add	local14, local06
20c84     14 22 06 F1 | 	add	local03, #20
20c88     11 39 62 FC | 	wrlong	local14, local03
20c8c     84 FA 9F FD | 	jmp	#LR__3582
20c90                 | LR__3599
20c90                 | ' 
20c90                 | ' 
20c90                 | ' 
20c90                 | ' 
20c90                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
20c90                 | ' 
20c90                 | ' 	}
20c90                 | ' 
20c90                 | ' 	return FR_OK ;
20c90     00 FA 05 F6 | 	mov	result1, #0
20c94                 | LR__3600
20c94     A7 F0 03 F6 | 	mov	ptra, fp
20c98     B2 00 A0 FD | 	call	#popregs_
20c9c                 | _fatfs_cc_f_read_ret
20c9c     2D 00 64 FD | 	ret
20ca0                 | 
20ca0                 | _fatfs_cc_f_write
20ca0     15 4A 05 F6 | 	mov	COUNT_, #21
20ca4     A8 00 A0 FD | 	call	#pushregs_
20ca8     34 F0 07 F1 | 	add	ptra, #52
20cac     04 4E 05 F1 | 	add	fp, #4
20cb0     A7 12 62 FC | 	wrlong	arg01, fp
20cb4     04 4E 05 F1 | 	add	fp, #4
20cb8     A7 14 62 FC | 	wrlong	arg02, fp
20cbc     04 4E 05 F1 | 	add	fp, #4
20cc0     A7 16 62 FC | 	wrlong	arg03, fp
20cc4     04 4E 05 F1 | 	add	fp, #4
20cc8     A7 18 62 FC | 	wrlong	arg04, fp
20ccc     08 4E 85 F1 | 	sub	fp, #8
20cd0     A7 FA 01 FB | 	rdlong	result1, fp
20cd4     28 4E 05 F1 | 	add	fp, #40
20cd8     A7 FA 61 FC | 	wrlong	result1, fp
20cdc     20 4E 85 F1 | 	sub	fp, #32
20ce0     A7 FA 01 FB | 	rdlong	result1, fp
20ce4     FD 00 68 FC | 	wrlong	#0, result1
20ce8     0C 4E 85 F1 | 	sub	fp, #12
20cec     A7 12 02 FB | 	rdlong	arg01, fp
20cf0     14 4E 05 F1 | 	add	fp, #20
20cf4     A7 14 02 F6 | 	mov	arg02, fp
20cf8     18 4E 85 F1 | 	sub	fp, #24
20cfc     88 F0 BF FD | 	call	#_fatfs_cc_validate
20d00     14 4E 05 F1 | 	add	fp, #20
20d04     A7 FA 61 FC | 	wrlong	result1, fp
20d08     00 FA 4D F2 | 	cmps	result1, #0 wz
20d0c     14 4E 85 F1 | 	sub	fp, #20
20d10     20 00 90 5D |  if_ne	jmp	#LR__3610
20d14     04 4E 05 F1 | 	add	fp, #4
20d18     A7 14 02 FB | 	rdlong	arg02, fp
20d1c     11 14 06 F1 | 	add	arg02, #17
20d20     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
20d24     10 4E 05 F1 | 	add	fp, #16
20d28     A7 14 62 FC | 	wrlong	arg02, fp
20d2c     14 4E 85 F1 | 	sub	fp, #20
20d30     10 00 90 AD |  if_e	jmp	#LR__3611
20d34                 | LR__3610
20d34     14 4E 05 F1 | 	add	fp, #20
20d38     A7 FA 01 FB | 	rdlong	result1, fp
20d3c     14 4E 85 F1 | 	sub	fp, #20
20d40     44 07 90 FD | 	jmp	#LR__3633
20d44                 | LR__3611
20d44     04 4E 05 F1 | 	add	fp, #4
20d48     A7 14 02 FB | 	rdlong	arg02, fp
20d4c     04 4E 85 F1 | 	sub	fp, #4
20d50     10 14 06 F1 | 	add	arg02, #16
20d54     0A 15 C2 FA | 	rdbyte	arg02, arg02
20d58     02 14 CE F7 | 	test	arg02, #2 wz
20d5c     07 FA 05 A6 |  if_e	mov	result1, #7
20d60     24 07 90 AD |  if_e	jmp	#LR__3633
20d64     04 4E 05 F1 | 	add	fp, #4
20d68     A7 14 02 FB | 	rdlong	arg02, fp
20d6c     0A 13 02 F6 | 	mov	arg01, arg02
20d70     14 12 06 F1 | 	add	arg01, #20
20d74     09 13 02 FB | 	rdlong	arg01, arg01
20d78     08 4E 05 F1 | 	add	fp, #8
20d7c     A7 FA 01 FB | 	rdlong	result1, fp
20d80     FD 12 02 F1 | 	add	arg01, result1
20d84     0C 4E 85 F1 | 	sub	fp, #12
20d88     14 14 06 F1 | 	add	arg02, #20
20d8c     0A FB 01 FB | 	rdlong	result1, arg02
20d90     FD 12 12 F2 | 	cmp	arg01, result1 wc
20d94     24 00 90 3D |  if_ae	jmp	#LR__3612
20d98     04 4E 05 F1 | 	add	fp, #4
20d9c     A7 14 02 FB | 	rdlong	arg02, fp
20da0     01 FA 65 F6 | 	neg	result1, #1
20da4     14 14 06 F1 | 	add	arg02, #20
20da8     0A 15 02 FB | 	rdlong	arg02, arg02
20dac     0A FB 81 F1 | 	sub	result1, arg02
20db0     08 4E 05 F1 | 	add	fp, #8
20db4     A7 FA 61 FC | 	wrlong	result1, fp
20db8     0C 4E 85 F1 | 	sub	fp, #12
20dbc                 | LR__3612
20dbc                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
20dbc                 | ' 	}
20dbc                 | ' 
20dbc                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
20dbc                 | LR__3613
20dbc     0C 4E 05 F1 | 	add	fp, #12
20dc0     A7 FA 01 FB | 	rdlong	result1, fp
20dc4     0C 4E 85 F1 | 	sub	fp, #12
20dc8     01 FA 15 F2 | 	cmp	result1, #1 wc
20dcc     90 06 90 CD |  if_b	jmp	#LR__3632
20dd0     04 4E 05 F1 | 	add	fp, #4
20dd4     A7 FA 01 FB | 	rdlong	result1, fp
20dd8     04 4E 85 F1 | 	sub	fp, #4
20ddc     14 FA 05 F1 | 	add	result1, #20
20de0     FD FA 01 FB | 	rdlong	result1, result1
20de4     FF FB CD F7 | 	test	result1, #511 wz
20de8     D8 04 90 5D |  if_ne	jmp	#LR__3628
20dec     04 4E 05 F1 | 	add	fp, #4
20df0     A7 FA 01 FB | 	rdlong	result1, fp
20df4     14 FA 05 F1 | 	add	result1, #20
20df8     FD FA 01 FB | 	rdlong	result1, result1
20dfc     09 FA 45 F0 | 	shr	result1, #9
20e00     14 4E 05 F1 | 	add	fp, #20
20e04     A7 14 02 FB | 	rdlong	arg02, fp
20e08     0A 14 06 F1 | 	add	arg02, #10
20e0c     0A 19 E2 FA | 	rdword	arg04, arg02
20e10     0C 15 32 F9 | 	getword	arg02, arg04, #0
20e14     01 14 86 F1 | 	sub	arg02, #1
20e18     0A FB 09 F5 | 	and	result1, arg02 wz
20e1c     14 4E 05 F1 | 	add	fp, #20
20e20     A7 FA 61 FC | 	wrlong	result1, fp
20e24     2C 4E 85 F1 | 	sub	fp, #44
20e28     44 01 90 5D |  if_ne	jmp	#LR__3619
20e2c     04 4E 05 F1 | 	add	fp, #4
20e30     A7 FA 01 FB | 	rdlong	result1, fp
20e34     04 4E 85 F1 | 	sub	fp, #4
20e38     14 FA 05 F1 | 	add	result1, #20
20e3c     FD 14 0A FB | 	rdlong	arg02, result1 wz
20e40     44 00 90 5D |  if_ne	jmp	#LR__3614
20e44     04 4E 05 F1 | 	add	fp, #4
20e48     A7 14 02 FB | 	rdlong	arg02, fp
20e4c     08 14 06 F1 | 	add	arg02, #8
20e50     0A 15 0A FB | 	rdlong	arg02, arg02 wz
20e54     18 4E 05 F1 | 	add	fp, #24
20e58     A7 14 62 FC | 	wrlong	arg02, fp
20e5c     1C 4E 85 F1 | 	sub	fp, #28
20e60     4C 00 90 5D |  if_ne	jmp	#LR__3615
20e64     04 4E 05 F1 | 	add	fp, #4
20e68     A7 12 02 FB | 	rdlong	arg01, fp
20e6c     04 4E 85 F1 | 	sub	fp, #4
20e70     00 14 06 F6 | 	mov	arg02, #0
20e74     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
20e78     1C 4E 05 F1 | 	add	fp, #28
20e7c     A7 FA 61 FC | 	wrlong	result1, fp
20e80     1C 4E 85 F1 | 	sub	fp, #28
20e84     28 00 90 FD | 	jmp	#LR__3615
20e88                 | LR__3614
20e88     04 4E 05 F1 | 	add	fp, #4
20e8c     A7 18 02 FB | 	rdlong	arg04, fp
20e90     0C 13 02 F6 | 	mov	arg01, arg04
20e94     04 4E 85 F1 | 	sub	fp, #4
20e98     18 18 06 F1 | 	add	arg04, #24
20e9c     0C 15 02 FB | 	rdlong	arg02, arg04
20ea0     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
20ea4     1C 4E 05 F1 | 	add	fp, #28
20ea8     A7 FA 61 FC | 	wrlong	result1, fp
20eac     1C 4E 85 F1 | 	sub	fp, #28
20eb0                 | LR__3615
20eb0     1C 4E 05 F1 | 	add	fp, #28
20eb4     A7 FA 09 FB | 	rdlong	result1, fp wz
20eb8     1C 4E 85 F1 | 	sub	fp, #28
20ebc     A0 05 90 AD |  if_e	jmp	#LR__3632
20ec0     1C 4E 05 F1 | 	add	fp, #28
20ec4     A7 FA 01 FB | 	rdlong	result1, fp
20ec8     1C 4E 85 F1 | 	sub	fp, #28
20ecc     01 FA 0D F2 | 	cmp	result1, #1 wz
20ed0     1C 00 90 5D |  if_ne	jmp	#LR__3616
20ed4     04 4E 05 F1 | 	add	fp, #4
20ed8     A7 FA 01 FB | 	rdlong	result1, fp
20edc     04 4E 85 F1 | 	sub	fp, #4
20ee0     11 FA 05 F1 | 	add	result1, #17
20ee4     FD 04 48 FC | 	wrbyte	#2, result1
20ee8     02 FA 05 F6 | 	mov	result1, #2
20eec     98 05 90 FD | 	jmp	#LR__3633
20ef0                 | LR__3616
20ef0     1C 4E 05 F1 | 	add	fp, #28
20ef4     A7 FA 01 FB | 	rdlong	result1, fp
20ef8     1C 4E 85 F1 | 	sub	fp, #28
20efc     FF FF 7F FF 
20f00     FF FB 0D F2 | 	cmp	result1, ##-1 wz
20f04     1C 00 90 5D |  if_ne	jmp	#LR__3617
20f08     04 4E 05 F1 | 	add	fp, #4
20f0c     A7 FA 01 FB | 	rdlong	result1, fp
20f10     04 4E 85 F1 | 	sub	fp, #4
20f14     11 FA 05 F1 | 	add	result1, #17
20f18     FD 02 48 FC | 	wrbyte	#1, result1
20f1c     01 FA 05 F6 | 	mov	result1, #1
20f20     64 05 90 FD | 	jmp	#LR__3633
20f24                 | LR__3617
20f24     04 4E 05 F1 | 	add	fp, #4
20f28     A7 FA 01 FB | 	rdlong	result1, fp
20f2c     18 4E 05 F1 | 	add	fp, #24
20f30     A7 18 02 FB | 	rdlong	arg04, fp
20f34     18 FA 05 F1 | 	add	result1, #24
20f38     FD 18 62 FC | 	wrlong	arg04, result1
20f3c     18 4E 85 F1 | 	sub	fp, #24
20f40     A7 FA 01 FB | 	rdlong	result1, fp
20f44     04 4E 85 F1 | 	sub	fp, #4
20f48     08 FA 05 F1 | 	add	result1, #8
20f4c     FD FA 09 FB | 	rdlong	result1, result1 wz
20f50     1C 00 90 5D |  if_ne	jmp	#LR__3618
20f54     04 4E 05 F1 | 	add	fp, #4
20f58     A7 18 02 FB | 	rdlong	arg04, fp
20f5c     18 4E 05 F1 | 	add	fp, #24
20f60     A7 FA 01 FB | 	rdlong	result1, fp
20f64     1C 4E 85 F1 | 	sub	fp, #28
20f68     08 18 06 F1 | 	add	arg04, #8
20f6c     0C FB 61 FC | 	wrlong	result1, arg04
20f70                 | LR__3618
20f70                 | LR__3619
20f70     04 4E 05 F1 | 	add	fp, #4
20f74     A7 18 02 FB | 	rdlong	arg04, fp
20f78     04 4E 85 F1 | 	sub	fp, #4
20f7c     10 18 06 F1 | 	add	arg04, #16
20f80     0C 19 C2 FA | 	rdbyte	arg04, arg04
20f84     80 18 CE F7 | 	test	arg04, #128 wz
20f88     7C 00 90 AD |  if_e	jmp	#LR__3621
20f8c     18 4E 05 F1 | 	add	fp, #24
20f90     A7 18 02 FB | 	rdlong	arg04, fp
20f94     01 18 06 F1 | 	add	arg04, #1
20f98     0C 13 C2 FA | 	rdbyte	arg01, arg04
20f9c     14 4E 85 F1 | 	sub	fp, #20
20fa0     A7 18 02 FB | 	rdlong	arg04, fp
20fa4     0C 15 02 F6 | 	mov	arg02, arg04
20fa8     28 14 06 F1 | 	add	arg02, #40
20fac     04 4E 85 F1 | 	sub	fp, #4
20fb0     1C 18 06 F1 | 	add	arg04, #28
20fb4     0C 17 02 FB | 	rdlong	arg03, arg04
20fb8     01 18 06 F6 | 	mov	arg04, #1
20fbc     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
20fc0     00 FA 0D F2 | 	cmp	result1, #0 wz
20fc4     1C 00 90 AD |  if_e	jmp	#LR__3620
20fc8     04 4E 05 F1 | 	add	fp, #4
20fcc     A7 FA 01 FB | 	rdlong	result1, fp
20fd0     04 4E 85 F1 | 	sub	fp, #4
20fd4     11 FA 05 F1 | 	add	result1, #17
20fd8     FD 02 48 FC | 	wrbyte	#1, result1
20fdc     01 FA 05 F6 | 	mov	result1, #1
20fe0     A4 04 90 FD | 	jmp	#LR__3633
20fe4                 | LR__3620
20fe4     04 4E 05 F1 | 	add	fp, #4
20fe8     A7 18 02 FB | 	rdlong	arg04, fp
20fec     0C FB 01 F6 | 	mov	result1, arg04
20ff0     04 4E 85 F1 | 	sub	fp, #4
20ff4     10 18 06 F1 | 	add	arg04, #16
20ff8     0C 19 C2 FA | 	rdbyte	arg04, arg04
20ffc     7F 18 06 F5 | 	and	arg04, #127
21000     10 FA 05 F1 | 	add	result1, #16
21004     FD 18 42 FC | 	wrbyte	arg04, result1
21008                 | LR__3621
21008     18 4E 05 F1 | 	add	fp, #24
2100c     A7 12 02 FB | 	rdlong	arg01, fp
21010     14 4E 85 F1 | 	sub	fp, #20
21014     A7 14 02 FB | 	rdlong	arg02, fp
21018     04 4E 85 F1 | 	sub	fp, #4
2101c     18 14 06 F1 | 	add	arg02, #24
21020     0A 15 02 FB | 	rdlong	arg02, arg02
21024     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
21028     20 4E 05 F1 | 	add	fp, #32
2102c     A7 FA 61 FC | 	wrlong	result1, fp
21030     20 4E 85 F1 | 	sub	fp, #32
21034     00 FA 0D F2 | 	cmp	result1, #0 wz
21038     1C 00 90 5D |  if_ne	jmp	#LR__3622
2103c     04 4E 05 F1 | 	add	fp, #4
21040     A7 FA 01 FB | 	rdlong	result1, fp
21044     04 4E 85 F1 | 	sub	fp, #4
21048     11 FA 05 F1 | 	add	result1, #17
2104c     FD 04 48 FC | 	wrbyte	#2, result1
21050     02 FA 05 F6 | 	mov	result1, #2
21054     30 04 90 FD | 	jmp	#LR__3633
21058                 | LR__3622
21058     20 4E 05 F1 | 	add	fp, #32
2105c     A7 FA 01 FB | 	rdlong	result1, fp
21060     0C 4E 05 F1 | 	add	fp, #12
21064     A7 1E 02 FB | 	rdlong	local01, fp
21068     0F FB 01 F1 | 	add	result1, local01
2106c     0C 4E 85 F1 | 	sub	fp, #12
21070     A7 FA 61 FC | 	wrlong	result1, fp
21074     14 4E 85 F1 | 	sub	fp, #20
21078     A7 FA 01 FB | 	rdlong	result1, fp
2107c     09 FA 45 F0 | 	shr	result1, #9
21080     1C 4E 05 F1 | 	add	fp, #28
21084     A7 FA 61 FC | 	wrlong	result1, fp
21088     28 4E 85 F1 | 	sub	fp, #40
2108c     01 FA 15 F2 | 	cmp	result1, #1 wc
21090     60 01 90 CD |  if_b	jmp	#LR__3626
21094     2C 4E 05 F1 | 	add	fp, #44
21098     A7 FA 01 FB | 	rdlong	result1, fp
2109c     04 4E 85 F1 | 	sub	fp, #4
210a0     A7 18 02 FB | 	rdlong	arg04, fp
210a4     0C FB 01 F1 | 	add	result1, arg04
210a8     10 4E 85 F1 | 	sub	fp, #16
210ac     A7 18 02 FB | 	rdlong	arg04, fp
210b0     18 4E 85 F1 | 	sub	fp, #24
210b4     0A 18 06 F1 | 	add	arg04, #10
210b8     0C 19 E2 FA | 	rdword	arg04, arg04
210bc     0C FB 19 F2 | 	cmp	result1, arg04 wcz
210c0     28 00 90 ED |  if_be	jmp	#LR__3623
210c4     18 4E 05 F1 | 	add	fp, #24
210c8     A7 FA 01 FB | 	rdlong	result1, fp
210cc     0A FA 05 F1 | 	add	result1, #10
210d0     FD FA E1 FA | 	rdword	result1, result1
210d4     14 4E 05 F1 | 	add	fp, #20
210d8     A7 18 02 FB | 	rdlong	arg04, fp
210dc     0C FB 81 F1 | 	sub	result1, arg04
210e0     04 4E 85 F1 | 	sub	fp, #4
210e4     A7 FA 61 FC | 	wrlong	result1, fp
210e8     28 4E 85 F1 | 	sub	fp, #40
210ec                 | LR__3623
210ec     18 4E 05 F1 | 	add	fp, #24
210f0     A7 18 02 FB | 	rdlong	arg04, fp
210f4     01 18 06 F1 | 	add	arg04, #1
210f8     0C 13 C2 FA | 	rdbyte	arg01, arg04
210fc     18 4E 05 F1 | 	add	fp, #24
21100     A7 14 02 FB | 	rdlong	arg02, fp
21104     10 4E 85 F1 | 	sub	fp, #16
21108     A7 16 02 FB | 	rdlong	arg03, fp
2110c     08 4E 05 F1 | 	add	fp, #8
21110     A7 18 02 FB | 	rdlong	arg04, fp
21114     28 4E 85 F1 | 	sub	fp, #40
21118     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
2111c     00 FA 0D F2 | 	cmp	result1, #0 wz
21120     1C 00 90 AD |  if_e	jmp	#LR__3624
21124     04 4E 05 F1 | 	add	fp, #4
21128     A7 1E 02 FB | 	rdlong	local01, fp
2112c     04 4E 85 F1 | 	sub	fp, #4
21130     11 1E 06 F1 | 	add	local01, #17
21134     0F 03 48 FC | 	wrbyte	#1, local01
21138     01 FA 05 F6 | 	mov	result1, #1
2113c     48 03 90 FD | 	jmp	#LR__3633
21140                 | LR__3624
21140     04 4E 05 F1 | 	add	fp, #4
21144     A7 FA 01 FB | 	rdlong	result1, fp
21148     1C FA 05 F1 | 	add	result1, #28
2114c     FD FA 01 FB | 	rdlong	result1, result1
21150     1C 4E 05 F1 | 	add	fp, #28
21154     A7 20 02 FB | 	rdlong	local02, fp
21158     10 FB 81 F1 | 	sub	result1, local02
2115c     08 4E 05 F1 | 	add	fp, #8
21160     A7 18 02 FB | 	rdlong	arg04, fp
21164     28 4E 85 F1 | 	sub	fp, #40
21168     0C FB 11 F2 | 	cmp	result1, arg04 wc
2116c     68 00 90 3D |  if_ae	jmp	#LR__3625
21170     04 4E 05 F1 | 	add	fp, #4
21174     A7 12 02 FB | 	rdlong	arg01, fp
21178     28 12 06 F1 | 	add	arg01, #40
2117c     2C 4E 05 F1 | 	add	fp, #44
21180     A7 14 02 FB | 	rdlong	arg02, fp
21184     2C 4E 85 F1 | 	sub	fp, #44
21188     A7 FA 01 FB | 	rdlong	result1, fp
2118c     1C FA 05 F1 | 	add	result1, #28
21190     FD 22 02 FB | 	rdlong	local03, result1
21194     1C 4E 05 F1 | 	add	fp, #28
21198     A7 18 02 FB | 	rdlong	arg04, fp
2119c     20 4E 85 F1 | 	sub	fp, #32
211a0     0C 23 82 F1 | 	sub	local03, arg04
211a4     09 22 66 F0 | 	shl	local03, #9
211a8     11 15 02 F1 | 	add	arg02, local03
211ac     09 16 C6 F9 | 	decod	arg03, #9
211b0     2C 45 BF FD | 	call	#__system____builtin_memmove
211b4     04 4E 05 F1 | 	add	fp, #4
211b8     A7 18 02 FB | 	rdlong	arg04, fp
211bc     0C FB 01 F6 | 	mov	result1, arg04
211c0     04 4E 85 F1 | 	sub	fp, #4
211c4     10 18 06 F1 | 	add	arg04, #16
211c8     0C 19 C2 FA | 	rdbyte	arg04, arg04
211cc     7F 18 06 F5 | 	and	arg04, #127
211d0     10 FA 05 F1 | 	add	result1, #16
211d4     FD 18 42 FC | 	wrbyte	arg04, result1
211d8                 | LR__3625
211d8     28 4E 05 F1 | 	add	fp, #40
211dc     A7 FA 01 FB | 	rdlong	result1, fp
211e0     09 FA 65 F0 | 	shl	result1, #9
211e4     04 4E 85 F1 | 	sub	fp, #4
211e8     A7 FA 61 FC | 	wrlong	result1, fp
211ec     24 4E 85 F1 | 	sub	fp, #36
211f0                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
211f0                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
211f0                 | ' 				}
211f0                 | ' 
211f0                 | ' 
211f0                 | ' 				wcnt =  ((UINT) 512 )  * cc;
211f0                 | ' 				continue;
211f0     74 01 90 FD | 	jmp	#LR__3629
211f4                 | LR__3626
211f4     04 4E 05 F1 | 	add	fp, #4
211f8     A7 20 02 FB | 	rdlong	local02, fp
211fc     1C 20 06 F1 | 	add	local02, #28
21200     10 FB 01 FB | 	rdlong	result1, local02
21204     1C 4E 05 F1 | 	add	fp, #28
21208     A7 20 02 FB | 	rdlong	local02, fp
2120c     20 4E 85 F1 | 	sub	fp, #32
21210     10 FB 09 F2 | 	cmp	result1, local02 wz
21214     90 00 90 AD |  if_e	jmp	#LR__3627
21218     04 4E 05 F1 | 	add	fp, #4
2121c     A7 FA 01 FB | 	rdlong	result1, fp
21220     FD 22 02 F6 | 	mov	local03, result1
21224     04 4E 85 F1 | 	sub	fp, #4
21228     14 22 06 F1 | 	add	local03, #20
2122c     11 23 02 FB | 	rdlong	local03, local03
21230     0C FA 05 F1 | 	add	result1, #12
21234     FD 24 02 FB | 	rdlong	local04, result1
21238     12 27 02 F6 | 	mov	local05, local04
2123c     13 23 12 F2 | 	cmp	local03, local05 wc
21240     64 00 90 3D |  if_ae	jmp	#LR__3627
21244     18 4E 05 F1 | 	add	fp, #24
21248     A7 18 02 FB | 	rdlong	arg04, fp
2124c     01 18 06 F1 | 	add	arg04, #1
21250     0C 13 C2 FA | 	rdbyte	arg01, arg04
21254     14 4E 85 F1 | 	sub	fp, #20
21258     A7 28 02 FB | 	rdlong	local06, fp
2125c     28 28 06 F1 | 	add	local06, #40
21260     14 2B 02 F6 | 	mov	local07, local06
21264     1C 4E 05 F1 | 	add	fp, #28
21268     A7 2C 02 FB | 	rdlong	local08, fp
2126c     20 4E 85 F1 | 	sub	fp, #32
21270     01 2E 06 F6 | 	mov	local09, #1
21274     15 15 02 F6 | 	mov	arg02, local07
21278     16 17 02 F6 | 	mov	arg03, local08
2127c     01 18 06 F6 | 	mov	arg04, #1
21280     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
21284     FD 30 0A F6 | 	mov	local10, result1 wz
21288     1C 00 90 AD |  if_e	jmp	#LR__3627
2128c     04 4E 05 F1 | 	add	fp, #4
21290     A7 30 02 FB | 	rdlong	local10, fp
21294     04 4E 85 F1 | 	sub	fp, #4
21298     11 30 06 F1 | 	add	local10, #17
2129c     18 03 48 FC | 	wrbyte	#1, local10
212a0                 | ' 				fp->fptr < fp->obj.objsize &&
212a0                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
212a0                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
212a0     01 FA 05 F6 | 	mov	result1, #1
212a4     E0 01 90 FD | 	jmp	#LR__3633
212a8                 | LR__3627
212a8     04 4E 05 F1 | 	add	fp, #4
212ac     A7 18 02 FB | 	rdlong	arg04, fp
212b0     1C 4E 05 F1 | 	add	fp, #28
212b4     A7 FA 01 FB | 	rdlong	result1, fp
212b8     20 4E 85 F1 | 	sub	fp, #32
212bc     1C 18 06 F1 | 	add	arg04, #28
212c0     0C FB 61 FC | 	wrlong	result1, arg04
212c4                 | LR__3628
212c4     04 4E 05 F1 | 	add	fp, #4
212c8     A7 FA 01 FB | 	rdlong	result1, fp
212cc     14 FA 05 F1 | 	add	result1, #20
212d0     FD FA 01 FB | 	rdlong	result1, result1
212d4     FF FB 05 F5 | 	and	result1, #511
212d8     09 32 C6 F9 | 	decod	local11, #9
212dc     FD 32 82 F1 | 	sub	local11, result1
212e0     20 4E 05 F1 | 	add	fp, #32
212e4     A7 32 62 FC | 	wrlong	local11, fp
212e8     18 4E 85 F1 | 	sub	fp, #24
212ec     A7 FA 01 FB | 	rdlong	result1, fp
212f0     0C 4E 85 F1 | 	sub	fp, #12
212f4     FD 32 1A F2 | 	cmp	local11, result1 wcz
212f8     0C 4E 05 11 |  if_a	add	fp, #12
212fc     A7 32 02 1B |  if_a	rdlong	local11, fp
21300     18 4E 05 11 |  if_a	add	fp, #24
21304     A7 32 62 1C |  if_a	wrlong	local11, fp
21308     24 4E 85 11 |  if_a	sub	fp, #36
2130c     04 4E 05 F1 | 	add	fp, #4
21310     A7 32 02 FB | 	rdlong	local11, fp
21314     19 13 02 F6 | 	mov	arg01, local11
21318     28 12 06 F1 | 	add	arg01, #40
2131c     14 32 06 F1 | 	add	local11, #20
21320     19 33 02 FB | 	rdlong	local11, local11
21324     FF 33 06 F5 | 	and	local11, #511
21328     19 13 02 F1 | 	add	arg01, local11
2132c     2C 4E 05 F1 | 	add	fp, #44
21330     A7 14 02 FB | 	rdlong	arg02, fp
21334     0C 4E 85 F1 | 	sub	fp, #12
21338     A7 16 02 FB | 	rdlong	arg03, fp
2133c     24 4E 85 F1 | 	sub	fp, #36
21340     9C 43 BF FD | 	call	#__system____builtin_memmove
21344     04 4E 05 F1 | 	add	fp, #4
21348     A7 FA 01 FB | 	rdlong	result1, fp
2134c     FD 32 02 F6 | 	mov	local11, result1
21350     04 4E 85 F1 | 	sub	fp, #4
21354     10 FA 05 F1 | 	add	result1, #16
21358     FD FA C1 FA | 	rdbyte	result1, result1
2135c     80 FA 45 F5 | 	or	result1, #128
21360     10 32 06 F1 | 	add	local11, #16
21364     19 FB 41 FC | 	wrbyte	result1, local11
21368                 | LR__3629
21368     0C 4E 05 F1 | 	add	fp, #12
2136c     A7 32 02 FB | 	rdlong	local11, fp
21370     18 4E 05 F1 | 	add	fp, #24
21374     A7 FA 01 FB | 	rdlong	result1, fp
21378     FD 32 82 F1 | 	sub	local11, result1
2137c     18 4E 85 F1 | 	sub	fp, #24
21380     A7 32 62 FC | 	wrlong	local11, fp
21384     04 4E 05 F1 | 	add	fp, #4
21388     A7 34 02 FB | 	rdlong	local12, fp
2138c     1A 33 02 FB | 	rdlong	local11, local12
21390     14 4E 05 F1 | 	add	fp, #20
21394     A7 36 02 FB | 	rdlong	local13, fp
21398     1B 33 02 F1 | 	add	local11, local13
2139c     1A 33 62 FC | 	wrlong	local11, local12
213a0     0C 4E 05 F1 | 	add	fp, #12
213a4     A7 32 02 FB | 	rdlong	local11, fp
213a8     0C 4E 85 F1 | 	sub	fp, #12
213ac     A7 38 02 FB | 	rdlong	local14, fp
213b0     1C 33 02 F1 | 	add	local11, local14
213b4     0C 4E 05 F1 | 	add	fp, #12
213b8     A7 32 62 FC | 	wrlong	local11, fp
213bc     2C 4E 85 F1 | 	sub	fp, #44
213c0     A7 3A 02 FB | 	rdlong	local15, fp
213c4     1D 33 02 F6 | 	mov	local11, local15
213c8     14 3A 06 F1 | 	add	local15, #20
213cc     1D 3B 02 FB | 	rdlong	local15, local15
213d0     20 4E 05 F1 | 	add	fp, #32
213d4     A7 3C 02 FB | 	rdlong	local16, fp
213d8     1E 3B 02 F1 | 	add	local15, local16
213dc     14 32 06 F1 | 	add	local11, #20
213e0     19 3B 62 FC | 	wrlong	local15, local11
213e4     20 4E 85 F1 | 	sub	fp, #32
213e8     A7 3E 02 FB | 	rdlong	local17, fp
213ec     1F 33 02 F6 | 	mov	local11, local17
213f0     1F 41 02 F6 | 	mov	local18, local17
213f4     04 4E 85 F1 | 	sub	fp, #4
213f8     14 3E 06 F1 | 	add	local17, #20
213fc     1F 43 02 FB | 	rdlong	local19, local17
21400     0C 40 06 F1 | 	add	local18, #12
21404     20 45 02 FB | 	rdlong	local20, local18
21408     22 43 1A F2 | 	cmp	local19, local20 wcz
2140c     24 00 90 ED |  if_be	jmp	#LR__3630
21410     04 4E 05 F1 | 	add	fp, #4
21414     A7 26 02 FB | 	rdlong	local05, fp
21418     04 4E 85 F1 | 	sub	fp, #4
2141c     13 23 02 F6 | 	mov	local03, local05
21420     14 22 06 F1 | 	add	local03, #20
21424     11 25 02 FB | 	rdlong	local04, local03
21428     14 22 86 F1 | 	sub	local03, #20
2142c     12 47 02 F6 | 	mov	local21, local04
21430     20 00 90 FD | 	jmp	#LR__3631
21434                 | LR__3630
21434     04 4E 05 F1 | 	add	fp, #4
21438     A7 2A 02 FB | 	rdlong	local07, fp
2143c     04 4E 85 F1 | 	sub	fp, #4
21440     15 31 02 F6 | 	mov	local10, local07
21444     0C 30 06 F1 | 	add	local10, #12
21448     18 2D 02 FB | 	rdlong	local08, local10
2144c     0C 30 86 F1 | 	sub	local10, #12
21450     16 47 02 F6 | 	mov	local21, local08
21454                 | LR__3631
21454     0C 32 06 F1 | 	add	local11, #12
21458     19 47 62 FC | 	wrlong	local21, local11
2145c     5C F9 9F FD | 	jmp	#LR__3613
21460                 | LR__3632
21460     04 4E 05 F1 | 	add	fp, #4
21464     A7 34 02 FB | 	rdlong	local12, fp
21468     1A 1F 02 F6 | 	mov	local01, local12
2146c     04 4E 85 F1 | 	sub	fp, #4
21470     10 34 06 F1 | 	add	local12, #16
21474     1A 33 C2 FA | 	rdbyte	local11, local12
21478     40 32 46 F5 | 	or	local11, #64
2147c     10 1E 06 F1 | 	add	local01, #16
21480     0F 33 42 FC | 	wrbyte	local11, local01
21484                 | ' 
21484                 | ' 
21484                 | ' 
21484                 | ' 
21484                 | ' 
21484                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
21484                 | ' 		fp->flag |=  0x80 ;
21484                 | ' 
21484                 | ' 	}
21484                 | ' 
21484                 | ' 	fp->flag |=  0x40 ;
21484                 | ' 
21484                 | ' 	return FR_OK ;
21484     00 FA 05 F6 | 	mov	result1, #0
21488                 | LR__3633
21488     A7 F0 03 F6 | 	mov	ptra, fp
2148c     B2 00 A0 FD | 	call	#popregs_
21490                 | _fatfs_cc_f_write_ret
21490     2D 00 64 FD | 	ret
21494                 | 
21494                 | _fatfs_cc_f_sync
21494     00 4A 05 F6 | 	mov	COUNT_, #0
21498     A8 00 A0 FD | 	call	#pushregs_
2149c     18 F0 07 F1 | 	add	ptra, #24
214a0     04 4E 05 F1 | 	add	fp, #4
214a4     A7 12 62 FC | 	wrlong	arg01, fp
214a8     08 4E 05 F1 | 	add	fp, #8
214ac     A7 14 02 F6 | 	mov	arg02, fp
214b0     0C 4E 85 F1 | 	sub	fp, #12
214b4     D0 E8 BF FD | 	call	#_fatfs_cc_validate
214b8     08 4E 05 F1 | 	add	fp, #8
214bc     A7 FA 61 FC | 	wrlong	result1, fp
214c0     08 4E 85 F1 | 	sub	fp, #8
214c4     00 FA 0D F2 | 	cmp	result1, #0 wz
214c8     C0 01 90 5D |  if_ne	jmp	#LR__3643
214cc     04 4E 05 F1 | 	add	fp, #4
214d0     A7 18 02 FB | 	rdlong	arg04, fp
214d4     04 4E 85 F1 | 	sub	fp, #4
214d8     10 18 06 F1 | 	add	arg04, #16
214dc     0C 19 C2 FA | 	rdbyte	arg04, arg04
214e0     40 18 CE F7 | 	test	arg04, #64 wz
214e4     A4 01 90 AD |  if_e	jmp	#LR__3642
214e8     04 4E 05 F1 | 	add	fp, #4
214ec     A7 18 02 FB | 	rdlong	arg04, fp
214f0     04 4E 85 F1 | 	sub	fp, #4
214f4     10 18 06 F1 | 	add	arg04, #16
214f8     0C 19 C2 FA | 	rdbyte	arg04, arg04
214fc     80 18 CE F7 | 	test	arg04, #128 wz
21500     64 00 90 AD |  if_e	jmp	#LR__3640
21504     0C 4E 05 F1 | 	add	fp, #12
21508     A7 18 02 FB | 	rdlong	arg04, fp
2150c     01 18 06 F1 | 	add	arg04, #1
21510     0C 13 C2 FA | 	rdbyte	arg01, arg04
21514     08 4E 85 F1 | 	sub	fp, #8
21518     A7 18 02 FB | 	rdlong	arg04, fp
2151c     0C 15 02 F6 | 	mov	arg02, arg04
21520     28 14 06 F1 | 	add	arg02, #40
21524     04 4E 85 F1 | 	sub	fp, #4
21528     1C 18 06 F1 | 	add	arg04, #28
2152c     0C 17 02 FB | 	rdlong	arg03, arg04
21530     01 18 06 F6 | 	mov	arg04, #1
21534     0C AE BF FD | 	call	#_fatfs_cc_disk_write
21538     00 FA 0D F2 | 	cmp	result1, #0 wz
2153c     01 FA 05 56 |  if_ne	mov	result1, #1
21540     54 01 90 5D |  if_ne	jmp	#LR__3644
21544     04 4E 05 F1 | 	add	fp, #4
21548     A7 18 02 FB | 	rdlong	arg04, fp
2154c     0C 17 02 F6 | 	mov	arg03, arg04
21550     04 4E 85 F1 | 	sub	fp, #4
21554     10 18 06 F1 | 	add	arg04, #16
21558     0C 19 C2 FA | 	rdbyte	arg04, arg04
2155c     7F 18 06 F5 | 	and	arg04, #127
21560     10 16 06 F1 | 	add	arg03, #16
21564     0B 19 42 FC | 	wrbyte	arg04, arg03
21568                 | LR__3640
21568     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
2156c     10 4E 05 F1 | 	add	fp, #16
21570     A7 FA 61 FC | 	wrlong	result1, fp
21574     04 4E 85 F1 | 	sub	fp, #4
21578     A7 12 02 FB | 	rdlong	arg01, fp
2157c     08 4E 85 F1 | 	sub	fp, #8
21580     A7 18 02 FB | 	rdlong	arg04, fp
21584     04 4E 85 F1 | 	sub	fp, #4
21588     20 18 06 F1 | 	add	arg04, #32
2158c     0C 15 02 FB | 	rdlong	arg02, arg04
21590     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
21594     08 4E 05 F1 | 	add	fp, #8
21598     A7 FA 61 FC | 	wrlong	result1, fp
2159c     08 4E 85 F1 | 	sub	fp, #8
215a0     00 FA 0D F2 | 	cmp	result1, #0 wz
215a4     E4 00 90 5D |  if_ne	jmp	#LR__3641
215a8     04 4E 05 F1 | 	add	fp, #4
215ac     A7 18 02 FB | 	rdlong	arg04, fp
215b0     24 18 06 F1 | 	add	arg04, #36
215b4     0C 19 02 FB | 	rdlong	arg04, arg04
215b8     10 4E 05 F1 | 	add	fp, #16
215bc     A7 18 62 FC | 	wrlong	arg04, fp
215c0     0C 17 02 F6 | 	mov	arg03, arg04
215c4     0B 16 06 F1 | 	add	arg03, #11
215c8     0B 17 C2 FA | 	rdbyte	arg03, arg03
215cc     20 16 46 F5 | 	or	arg03, #32
215d0     0B 18 06 F1 | 	add	arg04, #11
215d4     0C 17 42 FC | 	wrbyte	arg03, arg04
215d8     10 4E 85 F1 | 	sub	fp, #16
215dc     A7 18 02 FB | 	rdlong	arg04, fp
215e0     0C 13 02 FB | 	rdlong	arg01, arg04
215e4     10 4E 05 F1 | 	add	fp, #16
215e8     A7 14 02 FB | 	rdlong	arg02, fp
215ec     14 4E 85 F1 | 	sub	fp, #20
215f0     08 18 06 F1 | 	add	arg04, #8
215f4     0C 17 02 FB | 	rdlong	arg03, arg04
215f8     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
215fc     14 4E 05 F1 | 	add	fp, #20
21600     A7 12 02 FB | 	rdlong	arg01, fp
21604     1C 12 06 F1 | 	add	arg01, #28
21608     10 4E 85 F1 | 	sub	fp, #16
2160c     A7 18 02 FB | 	rdlong	arg04, fp
21610     0C 18 06 F1 | 	add	arg04, #12
21614     0C 15 02 FB | 	rdlong	arg02, arg04
21618     09 15 62 FC | 	wrlong	arg02, arg01
2161c     10 4E 05 F1 | 	add	fp, #16
21620     A7 12 02 FB | 	rdlong	arg01, fp
21624     16 12 06 F1 | 	add	arg01, #22
21628     04 4E 85 F1 | 	sub	fp, #4
2162c     A7 14 02 FB | 	rdlong	arg02, fp
21630     09 15 62 FC | 	wrlong	arg02, arg01
21634     04 4E 05 F1 | 	add	fp, #4
21638     A7 12 02 FB | 	rdlong	arg01, fp
2163c     12 12 06 F1 | 	add	arg01, #18
21640     09 01 58 FC | 	wrword	#0, arg01
21644     08 4E 85 F1 | 	sub	fp, #8
21648     A7 18 02 FB | 	rdlong	arg04, fp
2164c     03 18 06 F1 | 	add	arg04, #3
21650     0C 03 48 FC | 	wrbyte	#1, arg04
21654     A7 12 02 FB | 	rdlong	arg01, fp
21658     0C 4E 85 F1 | 	sub	fp, #12
2165c     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
21660     08 4E 05 F1 | 	add	fp, #8
21664     A7 FA 61 FC | 	wrlong	result1, fp
21668     04 4E 85 F1 | 	sub	fp, #4
2166c     A7 18 02 FB | 	rdlong	arg04, fp
21670     0C 17 02 F6 | 	mov	arg03, arg04
21674     04 4E 85 F1 | 	sub	fp, #4
21678     10 18 06 F1 | 	add	arg04, #16
2167c     0C 19 C2 FA | 	rdbyte	arg04, arg04
21680     BF 18 06 F5 | 	and	arg04, #191
21684     10 16 06 F1 | 	add	arg03, #16
21688     0B 19 42 FC | 	wrbyte	arg04, arg03
2168c                 | LR__3641
2168c                 | LR__3642
2168c                 | LR__3643
2168c                 | ' 					dir = fp->dir_ptr;
2168c                 | ' 					dir[ 11 ] |=  0x20 ;
2168c                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
2168c                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
2168c                 | ' 					st_dword(dir +  22 , tm);
2168c                 | ' 					st_word(dir +  18 , 0);
2168c                 | ' 					fs->wflag = 1;
2168c                 | ' 					res = sync_fs(fs);
2168c                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
2168c                 | ' 				}
2168c                 | ' 			}
2168c                 | ' 		}
2168c                 | ' 	}
2168c                 | ' 
2168c                 | ' 	return res ;
2168c     08 4E 05 F1 | 	add	fp, #8
21690     A7 FA 01 FB | 	rdlong	result1, fp
21694     08 4E 85 F1 | 	sub	fp, #8
21698                 | LR__3644
21698     A7 F0 03 F6 | 	mov	ptra, fp
2169c     B2 00 A0 FD | 	call	#popregs_
216a0                 | _fatfs_cc_f_sync_ret
216a0     2D 00 64 FD | 	ret
216a4                 | 
216a4                 | _fatfs_cc_f_close
216a4     01 4A 05 F6 | 	mov	COUNT_, #1
216a8     A8 00 A0 FD | 	call	#pushregs_
216ac     10 F0 07 F1 | 	add	ptra, #16
216b0     04 4E 05 F1 | 	add	fp, #4
216b4     A7 12 62 FC | 	wrlong	arg01, fp
216b8     04 4E 85 F1 | 	sub	fp, #4
216bc     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
216c0     08 4E 05 F1 | 	add	fp, #8
216c4     A7 FA 61 FC | 	wrlong	result1, fp
216c8     08 4E 85 F1 | 	sub	fp, #8
216cc     00 FA 0D F2 | 	cmp	result1, #0 wz
216d0     38 00 90 5D |  if_ne	jmp	#LR__3650
216d4     04 4E 05 F1 | 	add	fp, #4
216d8     A7 12 02 FB | 	rdlong	arg01, fp
216dc     08 4E 05 F1 | 	add	fp, #8
216e0     A7 14 02 F6 | 	mov	arg02, fp
216e4     0C 4E 85 F1 | 	sub	fp, #12
216e8     9C E6 BF FD | 	call	#_fatfs_cc_validate
216ec     08 4E 05 F1 | 	add	fp, #8
216f0     A7 FA 61 FC | 	wrlong	result1, fp
216f4     08 4E 85 F1 | 	sub	fp, #8
216f8     00 FA 0D F2 | 	cmp	result1, #0 wz
216fc     04 4E 05 A1 |  if_e	add	fp, #4
21700     A7 1E 02 AB |  if_e	rdlong	local01, fp
21704     04 4E 85 A1 |  if_e	sub	fp, #4
21708     0F 01 68 AC |  if_e	wrlong	#0, local01
2170c                 | LR__3650
2170c                 | ' 
2170c                 | ' 
2170c                 | ' 
2170c                 | ' 
2170c                 | ' 			fp->obj.fs = 0;
2170c                 | ' #line 4192 "ff.c"
2170c                 | ' 		}
2170c                 | ' 	}
2170c                 | ' 	return res;
2170c     08 4E 05 F1 | 	add	fp, #8
21710     A7 FA 01 FB | 	rdlong	result1, fp
21714     08 4E 85 F1 | 	sub	fp, #8
21718     A7 F0 03 F6 | 	mov	ptra, fp
2171c     B2 00 A0 FD | 	call	#popregs_
21720                 | _fatfs_cc_f_close_ret
21720     2D 00 64 FD | 	ret
21724                 | 
21724                 | _fatfs_cc_f_lseek
21724     00 4A 05 F6 | 	mov	COUNT_, #0
21728     A8 00 A0 FD | 	call	#pushregs_
2172c     24 F0 07 F1 | 	add	ptra, #36
21730     04 4E 05 F1 | 	add	fp, #4
21734     A7 12 62 FC | 	wrlong	arg01, fp
21738     04 4E 05 F1 | 	add	fp, #4
2173c     A7 14 62 FC | 	wrlong	arg02, fp
21740     04 4E 85 F1 | 	sub	fp, #4
21744     A7 12 02 FB | 	rdlong	arg01, fp
21748     0C 4E 05 F1 | 	add	fp, #12
2174c     A7 14 02 F6 | 	mov	arg02, fp
21750     10 4E 85 F1 | 	sub	fp, #16
21754     30 E6 BF FD | 	call	#_fatfs_cc_validate
21758     0C 4E 05 F1 | 	add	fp, #12
2175c     A7 FA 61 FC | 	wrlong	result1, fp
21760     0C 4E 85 F1 | 	sub	fp, #12
21764     00 FA 0D F2 | 	cmp	result1, #0 wz
21768     1C 00 90 5D |  if_ne	jmp	#LR__3660
2176c     04 4E 05 F1 | 	add	fp, #4
21770     A7 18 02 FB | 	rdlong	arg04, fp
21774     11 18 06 F1 | 	add	arg04, #17
21778     0C 19 C2 FA | 	rdbyte	arg04, arg04
2177c     08 4E 05 F1 | 	add	fp, #8
21780     A7 18 62 FC | 	wrlong	arg04, fp
21784     0C 4E 85 F1 | 	sub	fp, #12
21788                 | LR__3660
21788     0C 4E 05 F1 | 	add	fp, #12
2178c     A7 18 0A FB | 	rdlong	arg04, fp wz
21790     0C 4E 85 F1 | 	sub	fp, #12
21794     0C 4E 05 51 |  if_ne	add	fp, #12
21798     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2179c     0C 4E 85 51 |  if_ne	sub	fp, #12
217a0     40 06 90 5D |  if_ne	jmp	#LR__3683
217a4     04 4E 05 F1 | 	add	fp, #4
217a8     A7 18 02 FB | 	rdlong	arg04, fp
217ac     04 4E 05 F1 | 	add	fp, #4
217b0     A7 16 02 FB | 	rdlong	arg03, fp
217b4     08 4E 85 F1 | 	sub	fp, #8
217b8     0C 18 06 F1 | 	add	arg04, #12
217bc     0C 19 02 FB | 	rdlong	arg04, arg04
217c0     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
217c4     3C 00 90 ED |  if_be	jmp	#LR__3661
217c8     04 4E 05 F1 | 	add	fp, #4
217cc     A7 16 02 FB | 	rdlong	arg03, fp
217d0     04 4E 85 F1 | 	sub	fp, #4
217d4     10 16 06 F1 | 	add	arg03, #16
217d8     0B 17 C2 FA | 	rdbyte	arg03, arg03
217dc     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
217e0     02 16 CE F7 | 	test	arg03, #2 wz
217e4     1C 00 90 5D |  if_ne	jmp	#LR__3661
217e8     04 4E 05 F1 | 	add	fp, #4
217ec     A7 16 02 FB | 	rdlong	arg03, fp
217f0     0C 16 06 F1 | 	add	arg03, #12
217f4     0B 17 02 FB | 	rdlong	arg03, arg03
217f8     04 4E 05 F1 | 	add	fp, #4
217fc     A7 16 62 FC | 	wrlong	arg03, fp
21800     08 4E 85 F1 | 	sub	fp, #8
21804                 | LR__3661
21804     04 4E 05 F1 | 	add	fp, #4
21808     A7 16 02 FB | 	rdlong	arg03, fp
2180c     14 16 06 F1 | 	add	arg03, #20
21810     0B 17 02 FB | 	rdlong	arg03, arg03
21814     1C 4E 05 F1 | 	add	fp, #28
21818     A7 16 62 FC | 	wrlong	arg03, fp
2181c     1C 4E 85 F1 | 	sub	fp, #28
21820     A7 16 02 FB | 	rdlong	arg03, fp
21824     18 4E 05 F1 | 	add	fp, #24
21828     A7 00 68 FC | 	wrlong	#0, fp
2182c     14 16 06 F1 | 	add	arg03, #20
21830     0B 01 68 FC | 	wrlong	#0, arg03
21834     14 4E 85 F1 | 	sub	fp, #20
21838     A7 16 02 FB | 	rdlong	arg03, fp
2183c     08 4E 85 F1 | 	sub	fp, #8
21840     01 16 16 F2 | 	cmp	arg03, #1 wc
21844     E4 03 90 CD |  if_b	jmp	#LR__3677
21848     10 4E 05 F1 | 	add	fp, #16
2184c     A7 16 02 FB | 	rdlong	arg03, fp
21850     0A 16 06 F1 | 	add	arg03, #10
21854     0B 19 E2 FA | 	rdword	arg04, arg03
21858     09 18 66 F0 | 	shl	arg04, #9
2185c     08 4E 05 F1 | 	add	fp, #8
21860     A7 18 62 FC | 	wrlong	arg04, fp
21864     08 4E 05 F1 | 	add	fp, #8
21868     A7 18 02 FB | 	rdlong	arg04, fp
2186c     20 4E 85 F1 | 	sub	fp, #32
21870     01 18 16 F2 | 	cmp	arg04, #1 wc
21874     AC 00 90 CD |  if_b	jmp	#LR__3662
21878     08 4E 05 F1 | 	add	fp, #8
2187c     A7 18 02 FB | 	rdlong	arg04, fp
21880     01 18 86 F1 | 	sub	arg04, #1
21884     10 4E 05 F1 | 	add	fp, #16
21888     A7 16 02 FB | 	rdlong	arg03, fp
2188c     0B 19 12 FD | 	qdiv	arg04, arg03
21890     08 4E 05 F1 | 	add	fp, #8
21894     A7 FA 01 FB | 	rdlong	result1, fp
21898     01 FA 85 F1 | 	sub	result1, #1
2189c     18 18 62 FD | 	getqx	arg04
218a0     0B FB 11 FD | 	qdiv	result1, arg03
218a4     20 4E 85 F1 | 	sub	fp, #32
218a8     18 16 62 FD | 	getqx	arg03
218ac     0B 19 12 F2 | 	cmp	arg04, arg03 wc
218b0     70 00 90 CD |  if_b	jmp	#LR__3662
218b4     04 4E 05 F1 | 	add	fp, #4
218b8     A7 16 02 FB | 	rdlong	arg03, fp
218bc     1C 4E 05 F1 | 	add	fp, #28
218c0     A7 FA 01 FB | 	rdlong	result1, fp
218c4     01 FA 85 F1 | 	sub	result1, #1
218c8     08 4E 85 F1 | 	sub	fp, #8
218cc     A7 18 02 FB | 	rdlong	arg04, fp
218d0     01 18 86 F1 | 	sub	arg04, #1
218d4     0C FB 21 F5 | 	andn	result1, arg04
218d8     14 16 06 F1 | 	add	arg03, #20
218dc     0B FB 61 FC | 	wrlong	result1, arg03
218e0     10 4E 85 F1 | 	sub	fp, #16
218e4     A7 16 02 FB | 	rdlong	arg03, fp
218e8     04 4E 85 F1 | 	sub	fp, #4
218ec     A7 18 02 FB | 	rdlong	arg04, fp
218f0     14 18 06 F1 | 	add	arg04, #20
218f4     0C 19 02 FB | 	rdlong	arg04, arg04
218f8     0C 17 82 F1 | 	sub	arg03, arg04
218fc     04 4E 05 F1 | 	add	fp, #4
21900     A7 16 62 FC | 	wrlong	arg03, fp
21904     04 4E 85 F1 | 	sub	fp, #4
21908     A7 16 02 FB | 	rdlong	arg03, fp
2190c     18 16 06 F1 | 	add	arg03, #24
21910     0B 17 02 FB | 	rdlong	arg03, arg03
21914     10 4E 05 F1 | 	add	fp, #16
21918     A7 16 62 FC | 	wrlong	arg03, fp
2191c     14 4E 85 F1 | 	sub	fp, #20
21920     D0 00 90 FD | 	jmp	#LR__3666
21924                 | LR__3662
21924     04 4E 05 F1 | 	add	fp, #4
21928     A7 16 02 FB | 	rdlong	arg03, fp
2192c     08 16 06 F1 | 	add	arg03, #8
21930     0B 17 0A FB | 	rdlong	arg03, arg03 wz
21934     10 4E 05 F1 | 	add	fp, #16
21938     A7 16 62 FC | 	wrlong	arg03, fp
2193c     14 4E 85 F1 | 	sub	fp, #20
21940     94 00 90 5D |  if_ne	jmp	#LR__3665
21944     04 4E 05 F1 | 	add	fp, #4
21948     A7 12 02 FB | 	rdlong	arg01, fp
2194c     04 4E 85 F1 | 	sub	fp, #4
21950     00 14 06 F6 | 	mov	arg02, #0
21954     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
21958     14 4E 05 F1 | 	add	fp, #20
2195c     A7 FA 61 FC | 	wrlong	result1, fp
21960     14 4E 85 F1 | 	sub	fp, #20
21964     01 FA 0D F2 | 	cmp	result1, #1 wz
21968     1C 00 90 5D |  if_ne	jmp	#LR__3663
2196c     04 4E 05 F1 | 	add	fp, #4
21970     A7 16 02 FB | 	rdlong	arg03, fp
21974     04 4E 85 F1 | 	sub	fp, #4
21978     11 16 06 F1 | 	add	arg03, #17
2197c     0B 05 48 FC | 	wrbyte	#2, arg03
21980     02 FA 05 F6 | 	mov	result1, #2
21984     5C 04 90 FD | 	jmp	#LR__3683
21988                 | LR__3663
21988     14 4E 05 F1 | 	add	fp, #20
2198c     A7 FA 01 FB | 	rdlong	result1, fp
21990     14 4E 85 F1 | 	sub	fp, #20
21994     FF FF 7F FF 
21998     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2199c     1C 00 90 5D |  if_ne	jmp	#LR__3664
219a0     04 4E 05 F1 | 	add	fp, #4
219a4     A7 16 02 FB | 	rdlong	arg03, fp
219a8     04 4E 85 F1 | 	sub	fp, #4
219ac     11 16 06 F1 | 	add	arg03, #17
219b0     0B 03 48 FC | 	wrbyte	#1, arg03
219b4     01 FA 05 F6 | 	mov	result1, #1
219b8     28 04 90 FD | 	jmp	#LR__3683
219bc                 | LR__3664
219bc     04 4E 05 F1 | 	add	fp, #4
219c0     A7 16 02 FB | 	rdlong	arg03, fp
219c4     10 4E 05 F1 | 	add	fp, #16
219c8     A7 18 02 FB | 	rdlong	arg04, fp
219cc     14 4E 85 F1 | 	sub	fp, #20
219d0     08 16 06 F1 | 	add	arg03, #8
219d4     0B 19 62 FC | 	wrlong	arg04, arg03
219d8                 | LR__3665
219d8     04 4E 05 F1 | 	add	fp, #4
219dc     A7 16 02 FB | 	rdlong	arg03, fp
219e0     10 4E 05 F1 | 	add	fp, #16
219e4     A7 18 02 FB | 	rdlong	arg04, fp
219e8     14 4E 85 F1 | 	sub	fp, #20
219ec     18 16 06 F1 | 	add	arg03, #24
219f0     0B 19 62 FC | 	wrlong	arg04, arg03
219f4                 | LR__3666
219f4     14 4E 05 F1 | 	add	fp, #20
219f8     A7 16 0A FB | 	rdlong	arg03, fp wz
219fc     14 4E 85 F1 | 	sub	fp, #20
21a00     28 02 90 AD |  if_e	jmp	#LR__3676
21a04                 | ' 				while (ofs > bcs) {
21a04                 | LR__3667
21a04     08 4E 05 F1 | 	add	fp, #8
21a08     A7 18 02 FB | 	rdlong	arg04, fp
21a0c     10 4E 05 F1 | 	add	fp, #16
21a10     A7 16 02 FB | 	rdlong	arg03, fp
21a14     18 4E 85 F1 | 	sub	fp, #24
21a18     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
21a1c     68 01 90 ED |  if_be	jmp	#LR__3673
21a20     08 4E 05 F1 | 	add	fp, #8
21a24     A7 18 02 FB | 	rdlong	arg04, fp
21a28     10 4E 05 F1 | 	add	fp, #16
21a2c     A7 16 02 FB | 	rdlong	arg03, fp
21a30     0B 19 82 F1 | 	sub	arg04, arg03
21a34     10 4E 85 F1 | 	sub	fp, #16
21a38     A7 18 62 FC | 	wrlong	arg04, fp
21a3c     04 4E 85 F1 | 	sub	fp, #4
21a40     A7 18 02 FB | 	rdlong	arg04, fp
21a44     0C FB 01 F6 | 	mov	result1, arg04
21a48     14 18 06 F1 | 	add	arg04, #20
21a4c     0C 19 02 FB | 	rdlong	arg04, arg04
21a50     14 4E 05 F1 | 	add	fp, #20
21a54     A7 16 02 FB | 	rdlong	arg03, fp
21a58     0B 19 02 F1 | 	add	arg04, arg03
21a5c     14 FA 05 F1 | 	add	result1, #20
21a60     FD 18 62 FC | 	wrlong	arg04, result1
21a64     14 4E 85 F1 | 	sub	fp, #20
21a68     A7 16 02 FB | 	rdlong	arg03, fp
21a6c     04 4E 85 F1 | 	sub	fp, #4
21a70     10 16 06 F1 | 	add	arg03, #16
21a74     0B 17 C2 FA | 	rdbyte	arg03, arg03
21a78     02 16 CE F7 | 	test	arg03, #2 wz
21a7c     3C 00 90 AD |  if_e	jmp	#LR__3668
21a80     04 4E 05 F1 | 	add	fp, #4
21a84     A7 12 02 FB | 	rdlong	arg01, fp
21a88     10 4E 05 F1 | 	add	fp, #16
21a8c     A7 14 02 FB | 	rdlong	arg02, fp
21a90     14 4E 85 F1 | 	sub	fp, #20
21a94     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
21a98     14 4E 05 F1 | 	add	fp, #20
21a9c     A7 FA 61 FC | 	wrlong	result1, fp
21aa0     00 FA 4D F2 | 	cmps	result1, #0 wz
21aa4     14 4E 85 F1 | 	sub	fp, #20
21aa8     08 4E 05 A1 |  if_e	add	fp, #8
21aac     A7 00 68 AC |  if_e	wrlong	#0, fp
21ab0     08 4E 85 A1 |  if_e	sub	fp, #8
21ab4                 | ' 							ofs = 0; break;
21ab4     D0 00 90 AD |  if_e	jmp	#LR__3673
21ab8     24 00 90 FD | 	jmp	#LR__3669
21abc                 | LR__3668
21abc     04 4E 05 F1 | 	add	fp, #4
21ac0     A7 12 02 FB | 	rdlong	arg01, fp
21ac4     10 4E 05 F1 | 	add	fp, #16
21ac8     A7 14 02 FB | 	rdlong	arg02, fp
21acc     14 4E 85 F1 | 	sub	fp, #20
21ad0     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
21ad4     14 4E 05 F1 | 	add	fp, #20
21ad8     A7 FA 61 FC | 	wrlong	result1, fp
21adc     14 4E 85 F1 | 	sub	fp, #20
21ae0                 | LR__3669
21ae0     14 4E 05 F1 | 	add	fp, #20
21ae4     A7 16 02 FB | 	rdlong	arg03, fp
21ae8     14 4E 85 F1 | 	sub	fp, #20
21aec     FF FF 7F FF 
21af0     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
21af4     1C 00 90 5D |  if_ne	jmp	#LR__3670
21af8     04 4E 05 F1 | 	add	fp, #4
21afc     A7 16 02 FB | 	rdlong	arg03, fp
21b00     04 4E 85 F1 | 	sub	fp, #4
21b04     11 16 06 F1 | 	add	arg03, #17
21b08     0B 03 48 FC | 	wrbyte	#1, arg03
21b0c     01 FA 05 F6 | 	mov	result1, #1
21b10     D0 02 90 FD | 	jmp	#LR__3683
21b14                 | LR__3670
21b14     14 4E 05 F1 | 	add	fp, #20
21b18     A7 16 02 FB | 	rdlong	arg03, fp
21b1c     14 4E 85 F1 | 	sub	fp, #20
21b20     02 16 16 F2 | 	cmp	arg03, #2 wc
21b24     24 00 90 CD |  if_b	jmp	#LR__3671
21b28     10 4E 05 F1 | 	add	fp, #16
21b2c     A7 18 02 FB | 	rdlong	arg04, fp
21b30     04 4E 05 F1 | 	add	fp, #4
21b34     A7 16 02 FB | 	rdlong	arg03, fp
21b38     14 4E 85 F1 | 	sub	fp, #20
21b3c     18 18 06 F1 | 	add	arg04, #24
21b40     0C 19 02 FB | 	rdlong	arg04, arg04
21b44     0C 17 12 F2 | 	cmp	arg03, arg04 wc
21b48     1C 00 90 CD |  if_b	jmp	#LR__3672
21b4c                 | LR__3671
21b4c     04 4E 05 F1 | 	add	fp, #4
21b50     A7 16 02 FB | 	rdlong	arg03, fp
21b54     04 4E 85 F1 | 	sub	fp, #4
21b58     11 16 06 F1 | 	add	arg03, #17
21b5c     0B 05 48 FC | 	wrbyte	#2, arg03
21b60     02 FA 05 F6 | 	mov	result1, #2
21b64     7C 02 90 FD | 	jmp	#LR__3683
21b68                 | LR__3672
21b68     04 4E 05 F1 | 	add	fp, #4
21b6c     A7 18 02 FB | 	rdlong	arg04, fp
21b70     10 4E 05 F1 | 	add	fp, #16
21b74     A7 16 02 FB | 	rdlong	arg03, fp
21b78     14 4E 85 F1 | 	sub	fp, #20
21b7c     18 18 06 F1 | 	add	arg04, #24
21b80     0C 17 62 FC | 	wrlong	arg03, arg04
21b84     7C FE 9F FD | 	jmp	#LR__3667
21b88                 | LR__3673
21b88     04 4E 05 F1 | 	add	fp, #4
21b8c     A7 16 02 FB | 	rdlong	arg03, fp
21b90     0B 13 02 F6 | 	mov	arg01, arg03
21b94     14 16 06 F1 | 	add	arg03, #20
21b98     0B 15 02 FB | 	rdlong	arg02, arg03
21b9c     04 4E 05 F1 | 	add	fp, #4
21ba0     A7 16 02 FB | 	rdlong	arg03, fp
21ba4     0B 15 02 F1 | 	add	arg02, arg03
21ba8     14 12 06 F1 | 	add	arg01, #20
21bac     09 15 62 FC | 	wrlong	arg02, arg01
21bb0     A7 16 02 FB | 	rdlong	arg03, fp
21bb4     08 4E 85 F1 | 	sub	fp, #8
21bb8     FF 17 CE F7 | 	test	arg03, #511 wz
21bbc     6C 00 90 AD |  if_e	jmp	#LR__3675
21bc0     10 4E 05 F1 | 	add	fp, #16
21bc4     A7 12 02 FB | 	rdlong	arg01, fp
21bc8     04 4E 05 F1 | 	add	fp, #4
21bcc     A7 14 02 FB | 	rdlong	arg02, fp
21bd0     14 4E 85 F1 | 	sub	fp, #20
21bd4     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
21bd8     1C 4E 05 F1 | 	add	fp, #28
21bdc     A7 FA 61 FC | 	wrlong	result1, fp
21be0     1C 4E 85 F1 | 	sub	fp, #28
21be4     00 FA 0D F2 | 	cmp	result1, #0 wz
21be8     1C 00 90 5D |  if_ne	jmp	#LR__3674
21bec     04 4E 05 F1 | 	add	fp, #4
21bf0     A7 16 02 FB | 	rdlong	arg03, fp
21bf4     04 4E 85 F1 | 	sub	fp, #4
21bf8     11 16 06 F1 | 	add	arg03, #17
21bfc     0B 05 48 FC | 	wrbyte	#2, arg03
21c00     02 FA 05 F6 | 	mov	result1, #2
21c04     DC 01 90 FD | 	jmp	#LR__3683
21c08                 | LR__3674
21c08     1C 4E 05 F1 | 	add	fp, #28
21c0c     A7 18 02 FB | 	rdlong	arg04, fp
21c10     14 4E 85 F1 | 	sub	fp, #20
21c14     A7 16 02 FB | 	rdlong	arg03, fp
21c18     09 16 46 F0 | 	shr	arg03, #9
21c1c     0B 19 02 F1 | 	add	arg04, arg03
21c20     14 4E 05 F1 | 	add	fp, #20
21c24     A7 18 62 FC | 	wrlong	arg04, fp
21c28     1C 4E 85 F1 | 	sub	fp, #28
21c2c                 | LR__3675
21c2c                 | LR__3676
21c2c                 | LR__3677
21c2c     04 4E 05 F1 | 	add	fp, #4
21c30     A7 18 02 FB | 	rdlong	arg04, fp
21c34     0C 17 02 F6 | 	mov	arg03, arg04
21c38     04 4E 85 F1 | 	sub	fp, #4
21c3c     14 16 06 F1 | 	add	arg03, #20
21c40     0B 17 02 FB | 	rdlong	arg03, arg03
21c44     0C 18 06 F1 | 	add	arg04, #12
21c48     0C 19 02 FB | 	rdlong	arg04, arg04
21c4c     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
21c50     3C 00 90 ED |  if_be	jmp	#LR__3678
21c54     04 4E 05 F1 | 	add	fp, #4
21c58     A7 18 02 FB | 	rdlong	arg04, fp
21c5c     0C 17 02 F6 | 	mov	arg03, arg04
21c60     14 18 06 F1 | 	add	arg04, #20
21c64     0C 19 02 FB | 	rdlong	arg04, arg04
21c68     0C 16 06 F1 | 	add	arg03, #12
21c6c     0B 19 62 FC | 	wrlong	arg04, arg03
21c70     A7 18 02 FB | 	rdlong	arg04, fp
21c74     0C 17 02 F6 | 	mov	arg03, arg04
21c78     04 4E 85 F1 | 	sub	fp, #4
21c7c     10 18 06 F1 | 	add	arg04, #16
21c80     0C 19 C2 FA | 	rdbyte	arg04, arg04
21c84     40 18 46 F5 | 	or	arg04, #64
21c88     10 16 06 F1 | 	add	arg03, #16
21c8c     0B 19 42 FC | 	wrbyte	arg04, arg03
21c90                 | LR__3678
21c90     04 4E 05 F1 | 	add	fp, #4
21c94     A7 16 02 FB | 	rdlong	arg03, fp
21c98     04 4E 85 F1 | 	sub	fp, #4
21c9c     14 16 06 F1 | 	add	arg03, #20
21ca0     0B 17 02 FB | 	rdlong	arg03, arg03
21ca4     FF 17 CE F7 | 	test	arg03, #511 wz
21ca8     2C 01 90 AD |  if_e	jmp	#LR__3682
21cac     04 4E 05 F1 | 	add	fp, #4
21cb0     A7 18 02 FB | 	rdlong	arg04, fp
21cb4     18 4E 05 F1 | 	add	fp, #24
21cb8     A7 16 02 FB | 	rdlong	arg03, fp
21cbc     1C 4E 85 F1 | 	sub	fp, #28
21cc0     1C 18 06 F1 | 	add	arg04, #28
21cc4     0C 19 02 FB | 	rdlong	arg04, arg04
21cc8     0C 17 0A F2 | 	cmp	arg03, arg04 wz
21ccc     08 01 90 AD |  if_e	jmp	#LR__3682
21cd0     04 4E 05 F1 | 	add	fp, #4
21cd4     A7 16 02 FB | 	rdlong	arg03, fp
21cd8     04 4E 85 F1 | 	sub	fp, #4
21cdc     10 16 06 F1 | 	add	arg03, #16
21ce0     0B 17 C2 FA | 	rdbyte	arg03, arg03
21ce4     80 16 CE F7 | 	test	arg03, #128 wz
21ce8     7C 00 90 AD |  if_e	jmp	#LR__3680
21cec     10 4E 05 F1 | 	add	fp, #16
21cf0     A7 16 02 FB | 	rdlong	arg03, fp
21cf4     01 16 06 F1 | 	add	arg03, #1
21cf8     0B 13 C2 FA | 	rdbyte	arg01, arg03
21cfc     0C 4E 85 F1 | 	sub	fp, #12
21d00     A7 16 02 FB | 	rdlong	arg03, fp
21d04     0B 15 02 F6 | 	mov	arg02, arg03
21d08     28 14 06 F1 | 	add	arg02, #40
21d0c     04 4E 85 F1 | 	sub	fp, #4
21d10     1C 16 06 F1 | 	add	arg03, #28
21d14     0B 17 02 FB | 	rdlong	arg03, arg03
21d18     01 18 06 F6 | 	mov	arg04, #1
21d1c     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
21d20     00 FA 0D F2 | 	cmp	result1, #0 wz
21d24     1C 00 90 AD |  if_e	jmp	#LR__3679
21d28     04 4E 05 F1 | 	add	fp, #4
21d2c     A7 16 02 FB | 	rdlong	arg03, fp
21d30     04 4E 85 F1 | 	sub	fp, #4
21d34     11 16 06 F1 | 	add	arg03, #17
21d38     0B 03 48 FC | 	wrbyte	#1, arg03
21d3c     01 FA 05 F6 | 	mov	result1, #1
21d40     A0 00 90 FD | 	jmp	#LR__3683
21d44                 | LR__3679
21d44     04 4E 05 F1 | 	add	fp, #4
21d48     A7 18 02 FB | 	rdlong	arg04, fp
21d4c     0C 17 02 F6 | 	mov	arg03, arg04
21d50     04 4E 85 F1 | 	sub	fp, #4
21d54     10 18 06 F1 | 	add	arg04, #16
21d58     0C 19 C2 FA | 	rdbyte	arg04, arg04
21d5c     7F 18 06 F5 | 	and	arg04, #127
21d60     10 16 06 F1 | 	add	arg03, #16
21d64     0B 19 42 FC | 	wrbyte	arg04, arg03
21d68                 | LR__3680
21d68     10 4E 05 F1 | 	add	fp, #16
21d6c     A7 16 02 FB | 	rdlong	arg03, fp
21d70     01 16 06 F1 | 	add	arg03, #1
21d74     0B 13 C2 FA | 	rdbyte	arg01, arg03
21d78     0C 4E 85 F1 | 	sub	fp, #12
21d7c     A7 14 02 FB | 	rdlong	arg02, fp
21d80     28 14 06 F1 | 	add	arg02, #40
21d84     18 4E 05 F1 | 	add	fp, #24
21d88     A7 16 02 FB | 	rdlong	arg03, fp
21d8c     1C 4E 85 F1 | 	sub	fp, #28
21d90     01 18 06 F6 | 	mov	arg04, #1
21d94     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
21d98     00 FA 0D F2 | 	cmp	result1, #0 wz
21d9c     1C 00 90 AD |  if_e	jmp	#LR__3681
21da0     04 4E 05 F1 | 	add	fp, #4
21da4     A7 16 02 FB | 	rdlong	arg03, fp
21da8     04 4E 85 F1 | 	sub	fp, #4
21dac     11 16 06 F1 | 	add	arg03, #17
21db0     0B 03 48 FC | 	wrbyte	#1, arg03
21db4     01 FA 05 F6 | 	mov	result1, #1
21db8     28 00 90 FD | 	jmp	#LR__3683
21dbc                 | LR__3681
21dbc     04 4E 05 F1 | 	add	fp, #4
21dc0     A7 18 02 FB | 	rdlong	arg04, fp
21dc4     18 4E 05 F1 | 	add	fp, #24
21dc8     A7 16 02 FB | 	rdlong	arg03, fp
21dcc     1C 4E 85 F1 | 	sub	fp, #28
21dd0     1C 18 06 F1 | 	add	arg04, #28
21dd4     0C 17 62 FC | 	wrlong	arg03, arg04
21dd8                 | LR__3682
21dd8                 | ' 
21dd8                 | ' 			fp->sect = nsect;
21dd8                 | ' 		}
21dd8                 | ' 	}
21dd8                 | ' 
21dd8                 | ' 	return res ;
21dd8     0C 4E 05 F1 | 	add	fp, #12
21ddc     A7 FA 01 FB | 	rdlong	result1, fp
21de0     0C 4E 85 F1 | 	sub	fp, #12
21de4                 | LR__3683
21de4     A7 F0 03 F6 | 	mov	ptra, fp
21de8     B2 00 A0 FD | 	call	#popregs_
21dec                 | _fatfs_cc_f_lseek_ret
21dec     2D 00 64 FD | 	ret
21df0                 | 
21df0                 | _fatfs_cc_f_opendir
21df0     01 4A 05 F6 | 	mov	COUNT_, #1
21df4     A8 00 A0 FD | 	call	#pushregs_
21df8     14 F0 07 F1 | 	add	ptra, #20
21dfc     04 4E 05 F1 | 	add	fp, #4
21e00     A7 12 62 FC | 	wrlong	arg01, fp
21e04     04 4E 05 F1 | 	add	fp, #4
21e08     A7 14 62 FC | 	wrlong	arg02, fp
21e0c     04 4E 85 F1 | 	sub	fp, #4
21e10     A7 16 0A FB | 	rdlong	arg03, fp wz
21e14     04 4E 85 F1 | 	sub	fp, #4
21e18     09 FA 05 A6 |  if_e	mov	result1, #9
21e1c     78 01 90 AD |  if_e	jmp	#LR__3696
21e20     08 4E 05 F1 | 	add	fp, #8
21e24     A7 12 02 F6 | 	mov	arg01, fp
21e28     08 4E 05 F1 | 	add	fp, #8
21e2c     A7 14 02 F6 | 	mov	arg02, fp
21e30     10 4E 85 F1 | 	sub	fp, #16
21e34     00 16 06 F6 | 	mov	arg03, #0
21e38     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
21e3c     0C 4E 05 F1 | 	add	fp, #12
21e40     A7 FA 61 FC | 	wrlong	result1, fp
21e44     0C 4E 85 F1 | 	sub	fp, #12
21e48     00 FA 0D F2 | 	cmp	result1, #0 wz
21e4c     20 01 90 5D |  if_ne	jmp	#LR__3695
21e50     04 4E 05 F1 | 	add	fp, #4
21e54     A7 16 02 FB | 	rdlong	arg03, fp
21e58     0C 4E 05 F1 | 	add	fp, #12
21e5c     A7 FA 01 FB | 	rdlong	result1, fp
21e60     0B FB 61 FC | 	wrlong	result1, arg03
21e64     0C 4E 85 F1 | 	sub	fp, #12
21e68     A7 12 02 FB | 	rdlong	arg01, fp
21e6c     04 4E 05 F1 | 	add	fp, #4
21e70     A7 14 02 FB | 	rdlong	arg02, fp
21e74     08 4E 85 F1 | 	sub	fp, #8
21e78     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
21e7c     0C 4E 05 F1 | 	add	fp, #12
21e80     A7 FA 61 FC | 	wrlong	result1, fp
21e84     0C 4E 85 F1 | 	sub	fp, #12
21e88     00 FA 0D F2 | 	cmp	result1, #0 wz
21e8c     C4 00 90 5D |  if_ne	jmp	#LR__3694
21e90     04 4E 05 F1 | 	add	fp, #4
21e94     A7 16 02 FB | 	rdlong	arg03, fp
21e98     04 4E 85 F1 | 	sub	fp, #4
21e9c     2B 16 06 F1 | 	add	arg03, #43
21ea0     0B 17 C2 FA | 	rdbyte	arg03, arg03
21ea4     80 16 CE F7 | 	test	arg03, #128 wz
21ea8     58 00 90 5D |  if_ne	jmp	#LR__3692
21eac     04 4E 05 F1 | 	add	fp, #4
21eb0     A7 16 02 FB | 	rdlong	arg03, fp
21eb4     04 4E 85 F1 | 	sub	fp, #4
21eb8     06 16 06 F1 | 	add	arg03, #6
21ebc     0B 17 C2 FA | 	rdbyte	arg03, arg03
21ec0     10 16 CE F7 | 	test	arg03, #16 wz
21ec4     30 00 90 AD |  if_e	jmp	#LR__3690
21ec8     04 4E 05 F1 | 	add	fp, #4
21ecc     A7 16 02 FB | 	rdlong	arg03, fp
21ed0     0B 1F 02 F6 | 	mov	local01, arg03
21ed4     0C 4E 05 F1 | 	add	fp, #12
21ed8     A7 12 02 FB | 	rdlong	arg01, fp
21edc     10 4E 85 F1 | 	sub	fp, #16
21ee0     1C 16 06 F1 | 	add	arg03, #28
21ee4     0B 15 02 FB | 	rdlong	arg02, arg03
21ee8     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
21eec     08 1E 06 F1 | 	add	local01, #8
21ef0     0F FB 61 FC | 	wrlong	result1, local01
21ef4     0C 00 90 FD | 	jmp	#LR__3691
21ef8                 | LR__3690
21ef8     0C 4E 05 F1 | 	add	fp, #12
21efc     A7 0A 68 FC | 	wrlong	#5, fp
21f00     0C 4E 85 F1 | 	sub	fp, #12
21f04                 | LR__3691
21f04                 | LR__3692
21f04     0C 4E 05 F1 | 	add	fp, #12
21f08     A7 1E 0A FB | 	rdlong	local01, fp wz
21f0c     0C 4E 85 F1 | 	sub	fp, #12
21f10     40 00 90 5D |  if_ne	jmp	#LR__3693
21f14     04 4E 05 F1 | 	add	fp, #4
21f18     A7 1E 02 FB | 	rdlong	local01, fp
21f1c     0C 4E 05 F1 | 	add	fp, #12
21f20     A7 16 02 FB | 	rdlong	arg03, fp
21f24     06 16 06 F1 | 	add	arg03, #6
21f28     0B 17 E2 FA | 	rdword	arg03, arg03
21f2c     04 1E 06 F1 | 	add	local01, #4
21f30     0F 17 52 FC | 	wrword	arg03, local01
21f34     0C 4E 85 F1 | 	sub	fp, #12
21f38     A7 12 02 FB | 	rdlong	arg01, fp
21f3c     04 4E 85 F1 | 	sub	fp, #4
21f40     00 14 06 F6 | 	mov	arg02, #0
21f44     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
21f48     0C 4E 05 F1 | 	add	fp, #12
21f4c     A7 FA 61 FC | 	wrlong	result1, fp
21f50     0C 4E 85 F1 | 	sub	fp, #12
21f54                 | LR__3693
21f54                 | LR__3694
21f54     0C 4E 05 F1 | 	add	fp, #12
21f58     A7 1E 02 FB | 	rdlong	local01, fp
21f5c     0C 4E 85 F1 | 	sub	fp, #12
21f60     04 1E 0E F2 | 	cmp	local01, #4 wz
21f64     0C 4E 05 A1 |  if_e	add	fp, #12
21f68     A7 0A 68 AC |  if_e	wrlong	#5, fp
21f6c     0C 4E 85 A1 |  if_e	sub	fp, #12
21f70                 | LR__3695
21f70     0C 4E 05 F1 | 	add	fp, #12
21f74     A7 1E 0A FB | 	rdlong	local01, fp wz
21f78     0C 4E 85 F1 | 	sub	fp, #12
21f7c     04 4E 05 51 |  if_ne	add	fp, #4
21f80     A7 1E 02 5B |  if_ne	rdlong	local01, fp
21f84     04 4E 85 51 |  if_ne	sub	fp, #4
21f88     0F 01 68 5C |  if_ne	wrlong	#0, local01
21f8c                 | ' 
21f8c                 | ' 	return res ;
21f8c     0C 4E 05 F1 | 	add	fp, #12
21f90     A7 FA 01 FB | 	rdlong	result1, fp
21f94     0C 4E 85 F1 | 	sub	fp, #12
21f98                 | LR__3696
21f98     A7 F0 03 F6 | 	mov	ptra, fp
21f9c     B2 00 A0 FD | 	call	#popregs_
21fa0                 | _fatfs_cc_f_opendir_ret
21fa0     2D 00 64 FD | 	ret
21fa4                 | 
21fa4                 | _fatfs_cc_f_closedir
21fa4     00 4A 05 F6 | 	mov	COUNT_, #0
21fa8     A8 00 A0 FD | 	call	#pushregs_
21fac     10 F0 07 F1 | 	add	ptra, #16
21fb0     04 4E 05 F1 | 	add	fp, #4
21fb4     A7 12 62 FC | 	wrlong	arg01, fp
21fb8     08 4E 05 F1 | 	add	fp, #8
21fbc     A7 14 02 F6 | 	mov	arg02, fp
21fc0     0C 4E 85 F1 | 	sub	fp, #12
21fc4     C0 DD BF FD | 	call	#_fatfs_cc_validate
21fc8     08 4E 05 F1 | 	add	fp, #8
21fcc     A7 FA 61 FC | 	wrlong	result1, fp
21fd0     08 4E 85 F1 | 	sub	fp, #8
21fd4     00 FA 0D F2 | 	cmp	result1, #0 wz
21fd8     04 4E 05 A1 |  if_e	add	fp, #4
21fdc     A7 FA 01 AB |  if_e	rdlong	result1, fp
21fe0     04 4E 85 A1 |  if_e	sub	fp, #4
21fe4     FD 00 68 AC |  if_e	wrlong	#0, result1
21fe8                 | ' 
21fe8                 | ' 
21fe8                 | ' 
21fe8                 | ' 
21fe8                 | ' 		dp->obj.fs = 0;
21fe8                 | ' #line 4633 "ff.c"
21fe8                 | ' 	}
21fe8                 | ' 	return res;
21fe8     08 4E 05 F1 | 	add	fp, #8
21fec     A7 FA 01 FB | 	rdlong	result1, fp
21ff0     08 4E 85 F1 | 	sub	fp, #8
21ff4     A7 F0 03 F6 | 	mov	ptra, fp
21ff8     B2 00 A0 FD | 	call	#popregs_
21ffc                 | _fatfs_cc_f_closedir_ret
21ffc     2D 00 64 FD | 	ret
22000                 | 
22000                 | _fatfs_cc_f_readdir
22000     00 4A 05 F6 | 	mov	COUNT_, #0
22004     A8 00 A0 FD | 	call	#pushregs_
22008     14 F0 07 F1 | 	add	ptra, #20
2200c     04 4E 05 F1 | 	add	fp, #4
22010     A7 12 62 FC | 	wrlong	arg01, fp
22014     04 4E 05 F1 | 	add	fp, #4
22018     A7 14 62 FC | 	wrlong	arg02, fp
2201c     04 4E 85 F1 | 	sub	fp, #4
22020     A7 12 02 FB | 	rdlong	arg01, fp
22024     0C 4E 05 F1 | 	add	fp, #12
22028     A7 14 02 F6 | 	mov	arg02, fp
2202c     10 4E 85 F1 | 	sub	fp, #16
22030     54 DD BF FD | 	call	#_fatfs_cc_validate
22034     0C 4E 05 F1 | 	add	fp, #12
22038     A7 FA 61 FC | 	wrlong	result1, fp
2203c     0C 4E 85 F1 | 	sub	fp, #12
22040     00 FA 0D F2 | 	cmp	result1, #0 wz
22044     BC 00 90 5D |  if_ne	jmp	#LR__3703
22048     08 4E 05 F1 | 	add	fp, #8
2204c     A7 FA 09 FB | 	rdlong	result1, fp wz
22050     08 4E 85 F1 | 	sub	fp, #8
22054     24 00 90 5D |  if_ne	jmp	#LR__3700
22058     04 4E 05 F1 | 	add	fp, #4
2205c     A7 12 02 FB | 	rdlong	arg01, fp
22060     04 4E 85 F1 | 	sub	fp, #4
22064     00 14 06 F6 | 	mov	arg02, #0
22068     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
2206c     0C 4E 05 F1 | 	add	fp, #12
22070     A7 FA 61 FC | 	wrlong	result1, fp
22074     0C 4E 85 F1 | 	sub	fp, #12
22078     88 00 90 FD | 	jmp	#LR__3702
2207c                 | LR__3700
2207c     04 4E 05 F1 | 	add	fp, #4
22080     A7 12 02 FB | 	rdlong	arg01, fp
22084     04 4E 85 F1 | 	sub	fp, #4
22088     00 14 06 F6 | 	mov	arg02, #0
2208c     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
22090     0C 4E 05 F1 | 	add	fp, #12
22094     A7 FA 61 FC | 	wrlong	result1, fp
22098     0C 4E 85 F1 | 	sub	fp, #12
2209c     04 FA 0D F2 | 	cmp	result1, #4 wz
220a0     0C 4E 05 A1 |  if_e	add	fp, #12
220a4     A7 00 68 AC |  if_e	wrlong	#0, fp
220a8     0C 4E 85 A1 |  if_e	sub	fp, #12
220ac     0C 4E 05 F1 | 	add	fp, #12
220b0     A7 FA 09 FB | 	rdlong	result1, fp wz
220b4     0C 4E 85 F1 | 	sub	fp, #12
220b8     48 00 90 5D |  if_ne	jmp	#LR__3701
220bc     04 4E 05 F1 | 	add	fp, #4
220c0     A7 12 02 FB | 	rdlong	arg01, fp
220c4     04 4E 05 F1 | 	add	fp, #4
220c8     A7 14 02 FB | 	rdlong	arg02, fp
220cc     08 4E 85 F1 | 	sub	fp, #8
220d0     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
220d4     04 4E 05 F1 | 	add	fp, #4
220d8     A7 12 02 FB | 	rdlong	arg01, fp
220dc     04 4E 85 F1 | 	sub	fp, #4
220e0     00 14 06 F6 | 	mov	arg02, #0
220e4     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
220e8     0C 4E 05 F1 | 	add	fp, #12
220ec     A7 FA 61 FC | 	wrlong	result1, fp
220f0     0C 4E 85 F1 | 	sub	fp, #12
220f4     04 FA 0D F2 | 	cmp	result1, #4 wz
220f8     0C 4E 05 A1 |  if_e	add	fp, #12
220fc     A7 00 68 AC |  if_e	wrlong	#0, fp
22100     0C 4E 85 A1 |  if_e	sub	fp, #12
22104                 | LR__3701
22104                 | LR__3702
22104                 | LR__3703
22104                 | ' 			}
22104                 | ' 			;
22104                 | ' 		}
22104                 | ' 	}
22104                 | ' 	return res ;
22104     0C 4E 05 F1 | 	add	fp, #12
22108     A7 FA 01 FB | 	rdlong	result1, fp
2210c     0C 4E 85 F1 | 	sub	fp, #12
22110     A7 F0 03 F6 | 	mov	ptra, fp
22114     B2 00 A0 FD | 	call	#popregs_
22118                 | _fatfs_cc_f_readdir_ret
22118     2D 00 64 FD | 	ret
2211c                 | 
2211c                 | _fatfs_cc_f_stat
2211c     00 4A 05 F6 | 	mov	COUNT_, #0
22120     A8 00 A0 FD | 	call	#pushregs_
22124     40 F0 07 F1 | 	add	ptra, #64
22128     04 4E 05 F1 | 	add	fp, #4
2212c     A7 12 62 FC | 	wrlong	arg01, fp
22130     04 4E 05 F1 | 	add	fp, #4
22134     A7 14 62 FC | 	wrlong	arg02, fp
22138     04 4E 85 F1 | 	sub	fp, #4
2213c     A7 12 02 F6 | 	mov	arg01, fp
22140     0C 4E 05 F1 | 	add	fp, #12
22144     A7 14 02 F6 | 	mov	arg02, fp
22148     10 4E 85 F1 | 	sub	fp, #16
2214c     00 16 06 F6 | 	mov	arg03, #0
22150     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
22154     0C 4E 05 F1 | 	add	fp, #12
22158     A7 FA 61 FC | 	wrlong	result1, fp
2215c     0C 4E 85 F1 | 	sub	fp, #12
22160     00 FA 0D F2 | 	cmp	result1, #0 wz
22164     74 00 90 5D |  if_ne	jmp	#LR__3713
22168     10 4E 05 F1 | 	add	fp, #16
2216c     A7 12 02 F6 | 	mov	arg01, fp
22170     0C 4E 85 F1 | 	sub	fp, #12
22174     A7 14 02 FB | 	rdlong	arg02, fp
22178     04 4E 85 F1 | 	sub	fp, #4
2217c     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
22180     0C 4E 05 F1 | 	add	fp, #12
22184     A7 FA 61 FC | 	wrlong	result1, fp
22188     0C 4E 85 F1 | 	sub	fp, #12
2218c     00 FA 0D F2 | 	cmp	result1, #0 wz
22190     48 00 90 5D |  if_ne	jmp	#LR__3712
22194     3B 4E 05 F1 | 	add	fp, #59
22198     A7 FA C1 FA | 	rdbyte	result1, fp
2219c     3B 4E 85 F1 | 	sub	fp, #59
221a0     80 FA CD F7 | 	test	result1, #128 wz
221a4     0C 4E 05 51 |  if_ne	add	fp, #12
221a8     A7 0C 68 5C |  if_ne	wrlong	#6, fp
221ac     0C 4E 85 51 |  if_ne	sub	fp, #12
221b0     28 00 90 5D |  if_ne	jmp	#LR__3711
221b4     08 4E 05 F1 | 	add	fp, #8
221b8     A7 FA 09 FB | 	rdlong	result1, fp wz
221bc     08 4E 85 F1 | 	sub	fp, #8
221c0     18 00 90 AD |  if_e	jmp	#LR__3710
221c4     10 4E 05 F1 | 	add	fp, #16
221c8     A7 12 02 F6 | 	mov	arg01, fp
221cc     08 4E 85 F1 | 	sub	fp, #8
221d0     A7 14 02 FB | 	rdlong	arg02, fp
221d4     08 4E 85 F1 | 	sub	fp, #8
221d8     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
221dc                 | LR__3710
221dc                 | LR__3711
221dc                 | LR__3712
221dc                 | LR__3713
221dc                 | ' 			}
221dc                 | ' 		}
221dc                 | ' 		;
221dc                 | ' 	}
221dc                 | ' 
221dc                 | ' 	return res ;
221dc     0C 4E 05 F1 | 	add	fp, #12
221e0     A7 FA 01 FB | 	rdlong	result1, fp
221e4     0C 4E 85 F1 | 	sub	fp, #12
221e8     A7 F0 03 F6 | 	mov	ptra, fp
221ec     B2 00 A0 FD | 	call	#popregs_
221f0                 | _fatfs_cc_f_stat_ret
221f0     2D 00 64 FD | 	ret
221f4                 | 
221f4                 | _fatfs_cc_f_unlink
221f4     00 4A 05 F6 | 	mov	COUNT_, #0
221f8     A8 00 A0 FD | 	call	#pushregs_
221fc     74 F0 07 F1 | 	add	ptra, #116
22200     04 4E 05 F1 | 	add	fp, #4
22204     A7 12 62 FC | 	wrlong	arg01, fp
22208     68 4E 05 F1 | 	add	fp, #104
2220c     A7 00 68 FC | 	wrlong	#0, fp
22210     68 4E 85 F1 | 	sub	fp, #104
22214     A7 12 02 F6 | 	mov	arg01, fp
22218     6C 4E 05 F1 | 	add	fp, #108
2221c     A7 14 02 F6 | 	mov	arg02, fp
22220     70 4E 85 F1 | 	sub	fp, #112
22224     02 16 06 F6 | 	mov	arg03, #2
22228     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
2222c     08 4E 05 F1 | 	add	fp, #8
22230     A7 FA 61 FC | 	wrlong	result1, fp
22234     08 4E 85 F1 | 	sub	fp, #8
22238     00 FA 0D F2 | 	cmp	result1, #0 wz
2223c     E4 01 90 5D |  if_ne	jmp	#LR__3728
22240     70 4E 05 F1 | 	add	fp, #112
22244     A7 16 02 FB | 	rdlong	arg03, fp
22248     64 4E 85 F1 | 	sub	fp, #100
2224c     A7 16 62 FC | 	wrlong	arg03, fp
22250     A7 12 02 F6 | 	mov	arg01, fp
22254     08 4E 85 F1 | 	sub	fp, #8
22258     A7 14 02 FB | 	rdlong	arg02, fp
2225c     04 4E 85 F1 | 	sub	fp, #4
22260     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
22264     08 4E 05 F1 | 	add	fp, #8
22268     A7 FA 61 FC | 	wrlong	result1, fp
2226c     00 FA 4D F2 | 	cmps	result1, #0 wz
22270     08 4E 85 F1 | 	sub	fp, #8
22274     AC 01 90 5D |  if_ne	jmp	#LR__3727
22278     37 4E 05 F1 | 	add	fp, #55
2227c     A7 FA C1 FA | 	rdbyte	result1, fp
22280     37 4E 85 F1 | 	sub	fp, #55
22284     80 FA CD F7 | 	test	result1, #128 wz
22288     08 4E 05 51 |  if_ne	add	fp, #8
2228c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
22290     08 4E 85 51 |  if_ne	sub	fp, #8
22294     1C 00 90 5D |  if_ne	jmp	#LR__3720
22298     12 4E 05 F1 | 	add	fp, #18
2229c     A7 FA C1 FA | 	rdbyte	result1, fp
222a0     12 4E 85 F1 | 	sub	fp, #18
222a4     01 FA CD F7 | 	test	result1, #1 wz
222a8     08 4E 05 51 |  if_ne	add	fp, #8
222ac     A7 0E 68 5C |  if_ne	wrlong	#7, fp
222b0     08 4E 85 51 |  if_ne	sub	fp, #8
222b4                 | LR__3720
222b4     08 4E 05 F1 | 	add	fp, #8
222b8     A7 FA 09 FB | 	rdlong	result1, fp wz
222bc     08 4E 85 F1 | 	sub	fp, #8
222c0     C8 00 90 5D |  if_ne	jmp	#LR__3723
222c4     70 4E 05 F1 | 	add	fp, #112
222c8     A7 12 02 FB | 	rdlong	arg01, fp
222cc     48 4E 85 F1 | 	sub	fp, #72
222d0     A7 14 02 FB | 	rdlong	arg02, fp
222d4     28 4E 85 F1 | 	sub	fp, #40
222d8     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
222dc     6C 4E 05 F1 | 	add	fp, #108
222e0     A7 FA 61 FC | 	wrlong	result1, fp
222e4     5A 4E 85 F1 | 	sub	fp, #90
222e8     A7 FA C1 FA | 	rdbyte	result1, fp
222ec     12 4E 85 F1 | 	sub	fp, #18
222f0     10 FA CD F7 | 	test	result1, #16 wz
222f4     94 00 90 AD |  if_e	jmp	#LR__3722
222f8     70 4E 05 F1 | 	add	fp, #112
222fc     A7 FA 01 FB | 	rdlong	result1, fp
22300     34 4E 85 F1 | 	sub	fp, #52
22304     A7 FA 61 FC | 	wrlong	result1, fp
22308     30 4E 05 F1 | 	add	fp, #48
2230c     A7 16 02 FB | 	rdlong	arg03, fp
22310     28 4E 85 F1 | 	sub	fp, #40
22314     A7 16 62 FC | 	wrlong	arg03, fp
22318     08 4E 85 F1 | 	sub	fp, #8
2231c     A7 12 02 F6 | 	mov	arg01, fp
22320     3C 4E 85 F1 | 	sub	fp, #60
22324     00 14 06 F6 | 	mov	arg02, #0
22328     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
2232c     08 4E 05 F1 | 	add	fp, #8
22330     A7 FA 61 FC | 	wrlong	result1, fp
22334     08 4E 85 F1 | 	sub	fp, #8
22338     00 FA 0D F2 | 	cmp	result1, #0 wz
2233c     4C 00 90 5D |  if_ne	jmp	#LR__3721
22340     3C 4E 05 F1 | 	add	fp, #60
22344     A7 12 02 F6 | 	mov	arg01, fp
22348     3C 4E 85 F1 | 	sub	fp, #60
2234c     00 14 06 F6 | 	mov	arg02, #0
22350     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
22354     08 4E 05 F1 | 	add	fp, #8
22358     A7 FA 61 FC | 	wrlong	result1, fp
2235c     00 FA 4D F2 | 	cmps	result1, #0 wz
22360     08 4E 85 F1 | 	sub	fp, #8
22364     08 4E 05 A1 |  if_e	add	fp, #8
22368     A7 0E 68 AC |  if_e	wrlong	#7, fp
2236c     08 4E 85 A1 |  if_e	sub	fp, #8
22370     08 4E 05 F1 | 	add	fp, #8
22374     A7 FA 01 FB | 	rdlong	result1, fp
22378     08 4E 85 F1 | 	sub	fp, #8
2237c     04 FA 0D F2 | 	cmp	result1, #4 wz
22380     08 4E 05 A1 |  if_e	add	fp, #8
22384     A7 00 68 AC |  if_e	wrlong	#0, fp
22388     08 4E 85 A1 |  if_e	sub	fp, #8
2238c                 | LR__3721
2238c                 | LR__3722
2238c                 | LR__3723
2238c     08 4E 05 F1 | 	add	fp, #8
22390     A7 FA 09 FB | 	rdlong	result1, fp wz
22394     08 4E 85 F1 | 	sub	fp, #8
22398     88 00 90 5D |  if_ne	jmp	#LR__3726
2239c     0C 4E 05 F1 | 	add	fp, #12
223a0     A7 12 02 F6 | 	mov	arg01, fp
223a4     0C 4E 85 F1 | 	sub	fp, #12
223a8     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
223ac     08 4E 05 F1 | 	add	fp, #8
223b0     A7 FA 61 FC | 	wrlong	result1, fp
223b4     08 4E 85 F1 | 	sub	fp, #8
223b8     00 FA 0D F2 | 	cmp	result1, #0 wz
223bc     38 00 90 5D |  if_ne	jmp	#LR__3724
223c0     6C 4E 05 F1 | 	add	fp, #108
223c4     A7 FA 09 FB | 	rdlong	result1, fp wz
223c8     6C 4E 85 F1 | 	sub	fp, #108
223cc     28 00 90 AD |  if_e	jmp	#LR__3724
223d0     0C 4E 05 F1 | 	add	fp, #12
223d4     A7 12 02 F6 | 	mov	arg01, fp
223d8     60 4E 05 F1 | 	add	fp, #96
223dc     A7 14 02 FB | 	rdlong	arg02, fp
223e0     6C 4E 85 F1 | 	sub	fp, #108
223e4     00 16 06 F6 | 	mov	arg03, #0
223e8     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
223ec     08 4E 05 F1 | 	add	fp, #8
223f0     A7 FA 61 FC | 	wrlong	result1, fp
223f4     08 4E 85 F1 | 	sub	fp, #8
223f8                 | LR__3724
223f8     08 4E 05 F1 | 	add	fp, #8
223fc     A7 FA 09 FB | 	rdlong	result1, fp wz
22400     08 4E 85 F1 | 	sub	fp, #8
22404     1C 00 90 5D |  if_ne	jmp	#LR__3725
22408     70 4E 05 F1 | 	add	fp, #112
2240c     A7 12 02 FB | 	rdlong	arg01, fp
22410     70 4E 85 F1 | 	sub	fp, #112
22414     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
22418     08 4E 05 F1 | 	add	fp, #8
2241c     A7 FA 61 FC | 	wrlong	result1, fp
22420     08 4E 85 F1 | 	sub	fp, #8
22424                 | LR__3725
22424                 | LR__3726
22424                 | LR__3727
22424                 | LR__3728
22424                 | ' 			}
22424                 | ' 		}
22424                 | ' 		;
22424                 | ' 	}
22424                 | ' 
22424                 | ' 	return res ;
22424     08 4E 05 F1 | 	add	fp, #8
22428     A7 FA 01 FB | 	rdlong	result1, fp
2242c     08 4E 85 F1 | 	sub	fp, #8
22430     A7 F0 03 F6 | 	mov	ptra, fp
22434     B2 00 A0 FD | 	call	#popregs_
22438                 | _fatfs_cc_f_unlink_ret
22438     2D 00 64 FD | 	ret
2243c                 | 
2243c                 | _fatfs_cc_f_mkdir
2243c     00 4A 05 F6 | 	mov	COUNT_, #0
22440     A8 00 A0 FD | 	call	#pushregs_
22444     5C F0 07 F1 | 	add	ptra, #92
22448     04 4E 05 F1 | 	add	fp, #4
2244c     A7 12 62 FC | 	wrlong	arg01, fp
22450     A7 12 02 F6 | 	mov	arg01, fp
22454     48 4E 05 F1 | 	add	fp, #72
22458     A7 14 02 F6 | 	mov	arg02, fp
2245c     4C 4E 85 F1 | 	sub	fp, #76
22460     02 16 06 F6 | 	mov	arg03, #2
22464     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
22468     08 4E 05 F1 | 	add	fp, #8
2246c     A7 FA 61 FC | 	wrlong	result1, fp
22470     08 4E 85 F1 | 	sub	fp, #8
22474     00 FA 0D F2 | 	cmp	result1, #0 wz
22478     C4 02 90 5D |  if_ne	jmp	#LR__3735
2247c     4C 4E 05 F1 | 	add	fp, #76
22480     A7 16 02 FB | 	rdlong	arg03, fp
22484     40 4E 85 F1 | 	sub	fp, #64
22488     A7 16 62 FC | 	wrlong	arg03, fp
2248c     A7 12 02 F6 | 	mov	arg01, fp
22490     08 4E 85 F1 | 	sub	fp, #8
22494     A7 14 02 FB | 	rdlong	arg02, fp
22498     04 4E 85 F1 | 	sub	fp, #4
2249c     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
224a0     08 4E 05 F1 | 	add	fp, #8
224a4     A7 FA 61 FC | 	wrlong	result1, fp
224a8     00 FA 4D F2 | 	cmps	result1, #0 wz
224ac     08 4E 85 F1 | 	sub	fp, #8
224b0     08 4E 05 A1 |  if_e	add	fp, #8
224b4     A7 10 68 AC |  if_e	wrlong	#8, fp
224b8     08 4E 85 A1 |  if_e	sub	fp, #8
224bc     08 4E 05 F1 | 	add	fp, #8
224c0     A7 FA 01 FB | 	rdlong	result1, fp
224c4     08 4E 85 F1 | 	sub	fp, #8
224c8     04 FA 0D F2 | 	cmp	result1, #4 wz
224cc     70 02 90 5D |  if_ne	jmp	#LR__3734
224d0     4C 4E 05 F1 | 	add	fp, #76
224d4     A7 16 02 FB | 	rdlong	arg03, fp
224d8     10 4E 85 F1 | 	sub	fp, #16
224dc     A7 16 62 FC | 	wrlong	arg03, fp
224e0     A7 12 02 F6 | 	mov	arg01, fp
224e4     3C 4E 85 F1 | 	sub	fp, #60
224e8     00 14 06 F6 | 	mov	arg02, #0
224ec     04 AC BF FD | 	call	#_fatfs_cc_create_chain
224f0     50 4E 05 F1 | 	add	fp, #80
224f4     A7 FA 61 FC | 	wrlong	result1, fp
224f8     48 4E 85 F1 | 	sub	fp, #72
224fc     A7 00 68 FC | 	wrlong	#0, fp
22500     48 4E 05 F1 | 	add	fp, #72
22504     A7 FA 09 FB | 	rdlong	result1, fp wz
22508     50 4E 85 F1 | 	sub	fp, #80
2250c     08 4E 05 A1 |  if_e	add	fp, #8
22510     A7 0E 68 AC |  if_e	wrlong	#7, fp
22514     08 4E 85 A1 |  if_e	sub	fp, #8
22518     50 4E 05 F1 | 	add	fp, #80
2251c     A7 FA 01 FB | 	rdlong	result1, fp
22520     50 4E 85 F1 | 	sub	fp, #80
22524     01 FA 0D F2 | 	cmp	result1, #1 wz
22528     08 4E 05 A1 |  if_e	add	fp, #8
2252c     A7 04 68 AC |  if_e	wrlong	#2, fp
22530     08 4E 85 A1 |  if_e	sub	fp, #8
22534     50 4E 05 F1 | 	add	fp, #80
22538     A7 16 02 FB | 	rdlong	arg03, fp
2253c     50 4E 85 F1 | 	sub	fp, #80
22540     FF FF 7F FF 
22544     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
22548     08 4E 05 A1 |  if_e	add	fp, #8
2254c     A7 02 68 AC |  if_e	wrlong	#1, fp
22550     08 4E 85 A1 |  if_e	sub	fp, #8
22554     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
22558     58 4E 05 F1 | 	add	fp, #88
2255c     A7 FA 61 FC | 	wrlong	result1, fp
22560     50 4E 85 F1 | 	sub	fp, #80
22564     A7 FA 09 FB | 	rdlong	result1, fp wz
22568     08 4E 85 F1 | 	sub	fp, #8
2256c     1C 01 90 5D |  if_ne	jmp	#LR__3731
22570     4C 4E 05 F1 | 	add	fp, #76
22574     A7 12 02 FB | 	rdlong	arg01, fp
22578     04 4E 05 F1 | 	add	fp, #4
2257c     A7 14 02 FB | 	rdlong	arg02, fp
22580     50 4E 85 F1 | 	sub	fp, #80
22584     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
22588     08 4E 05 F1 | 	add	fp, #8
2258c     A7 FA 61 FC | 	wrlong	result1, fp
22590     00 FA 4D F2 | 	cmps	result1, #0 wz
22594     08 4E 85 F1 | 	sub	fp, #8
22598     F0 00 90 5D |  if_ne	jmp	#LR__3730
2259c     4C 4E 05 F1 | 	add	fp, #76
225a0     A7 12 02 FB | 	rdlong	arg01, fp
225a4     4C 4E 85 F1 | 	sub	fp, #76
225a8     34 12 06 F1 | 	add	arg01, #52
225ac     20 14 06 F6 | 	mov	arg02, #32
225b0     0B 16 06 F6 | 	mov	arg03, #11
225b4     98 00 A0 FD | 	call	#\builtin_bytefill_
225b8     4C 4E 05 F1 | 	add	fp, #76
225bc     A7 FA 01 FB | 	rdlong	result1, fp
225c0     34 FA 05 F1 | 	add	result1, #52
225c4     FD 5C 48 FC | 	wrbyte	#46, result1
225c8     A7 16 02 FB | 	rdlong	arg03, fp
225cc     3F 16 06 F1 | 	add	arg03, #63
225d0     0B 21 48 FC | 	wrbyte	#16, arg03
225d4     A7 12 02 FB | 	rdlong	arg01, fp
225d8     4A 12 06 F1 | 	add	arg01, #74
225dc     0C 4E 05 F1 | 	add	fp, #12
225e0     A7 14 02 FB | 	rdlong	arg02, fp
225e4     09 15 62 FC | 	wrlong	arg02, arg01
225e8     0C 4E 85 F1 | 	sub	fp, #12
225ec     A7 14 02 FB | 	rdlong	arg02, fp
225f0     0A 13 02 F6 | 	mov	arg01, arg02
225f4     34 14 06 F1 | 	add	arg02, #52
225f8     04 4E 05 F1 | 	add	fp, #4
225fc     A7 16 02 FB | 	rdlong	arg03, fp
22600     50 4E 85 F1 | 	sub	fp, #80
22604     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
22608     4C 4E 05 F1 | 	add	fp, #76
2260c     A7 14 02 FB | 	rdlong	arg02, fp
22610     0A 13 02 F6 | 	mov	arg01, arg02
22614     54 12 06 F1 | 	add	arg01, #84
22618     4C 4E 85 F1 | 	sub	fp, #76
2261c     34 14 06 F1 | 	add	arg02, #52
22620     20 16 06 F6 | 	mov	arg03, #32
22624     B8 30 BF FD | 	call	#__system____builtin_memmove
22628     4C 4E 05 F1 | 	add	fp, #76
2262c     A7 16 02 FB | 	rdlong	arg03, fp
22630     55 16 06 F1 | 	add	arg03, #85
22634     0B 5D 48 FC | 	wrbyte	#46, arg03
22638     38 4E 85 F1 | 	sub	fp, #56
2263c     A7 16 02 FB | 	rdlong	arg03, fp
22640     40 4E 05 F1 | 	add	fp, #64
22644     A7 16 62 FC | 	wrlong	arg03, fp
22648     08 4E 85 F1 | 	sub	fp, #8
2264c     A7 14 02 FB | 	rdlong	arg02, fp
22650     0A 13 02 F6 | 	mov	arg01, arg02
22654     54 14 06 F1 | 	add	arg02, #84
22658     4C 4E 85 F1 | 	sub	fp, #76
2265c     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
22660     4C 4E 05 F1 | 	add	fp, #76
22664     A7 16 02 FB | 	rdlong	arg03, fp
22668     03 16 06 F1 | 	add	arg03, #3
2266c     0B 03 48 FC | 	wrbyte	#1, arg03
22670     40 4E 85 F1 | 	sub	fp, #64
22674     A7 12 02 F6 | 	mov	arg01, fp
22678     0C 4E 85 F1 | 	sub	fp, #12
2267c     44 BA BF FD | 	call	#_fatfs_cc_dir_register
22680     08 4E 05 F1 | 	add	fp, #8
22684     A7 FA 61 FC | 	wrlong	result1, fp
22688     08 4E 85 F1 | 	sub	fp, #8
2268c                 | LR__3730
2268c                 | LR__3731
2268c     08 4E 05 F1 | 	add	fp, #8
22690     A7 FA 09 FB | 	rdlong	result1, fp wz
22694     08 4E 85 F1 | 	sub	fp, #8
22698     88 00 90 5D |  if_ne	jmp	#LR__3732
2269c     28 4E 05 F1 | 	add	fp, #40
226a0     A7 12 02 FB | 	rdlong	arg01, fp
226a4     16 12 06 F1 | 	add	arg01, #22
226a8     30 4E 05 F1 | 	add	fp, #48
226ac     A7 14 02 FB | 	rdlong	arg02, fp
226b0     09 15 62 FC | 	wrlong	arg02, arg01
226b4     0C 4E 85 F1 | 	sub	fp, #12
226b8     A7 12 02 FB | 	rdlong	arg01, fp
226bc     24 4E 85 F1 | 	sub	fp, #36
226c0     A7 14 02 FB | 	rdlong	arg02, fp
226c4     28 4E 05 F1 | 	add	fp, #40
226c8     A7 16 02 FB | 	rdlong	arg03, fp
226cc     50 4E 85 F1 | 	sub	fp, #80
226d0     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
226d4     28 4E 05 F1 | 	add	fp, #40
226d8     A7 FA 01 FB | 	rdlong	result1, fp
226dc     0B FA 05 F1 | 	add	result1, #11
226e0     FD 20 48 FC | 	wrbyte	#16, result1
226e4     24 4E 05 F1 | 	add	fp, #36
226e8     A7 FA 01 FB | 	rdlong	result1, fp
226ec     03 FA 05 F1 | 	add	result1, #3
226f0     FD 02 48 FC | 	wrbyte	#1, result1
226f4     44 4E 85 F1 | 	sub	fp, #68
226f8     A7 FA 09 FB | 	rdlong	result1, fp wz
226fc     08 4E 85 F1 | 	sub	fp, #8
22700     3C 00 90 5D |  if_ne	jmp	#LR__3733
22704     4C 4E 05 F1 | 	add	fp, #76
22708     A7 12 02 FB | 	rdlong	arg01, fp
2270c     4C 4E 85 F1 | 	sub	fp, #76
22710     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
22714     08 4E 05 F1 | 	add	fp, #8
22718     A7 FA 61 FC | 	wrlong	result1, fp
2271c     08 4E 85 F1 | 	sub	fp, #8
22720     1C 00 90 FD | 	jmp	#LR__3733
22724                 | LR__3732
22724     3C 4E 05 F1 | 	add	fp, #60
22728     A7 12 02 F6 | 	mov	arg01, fp
2272c     14 4E 05 F1 | 	add	fp, #20
22730     A7 14 02 FB | 	rdlong	arg02, fp
22734     50 4E 85 F1 | 	sub	fp, #80
22738     00 16 06 F6 | 	mov	arg03, #0
2273c     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
22740                 | LR__3733
22740                 | LR__3734
22740                 | LR__3735
22740                 | ' 				remove_chain(&sobj, dcl, 0);
22740                 | ' 			}
22740                 | ' 		}
22740                 | ' 		;
22740                 | ' 	}
22740                 | ' 
22740                 | ' 	return res ;
22740     08 4E 05 F1 | 	add	fp, #8
22744     A7 FA 01 FB | 	rdlong	result1, fp
22748     08 4E 85 F1 | 	sub	fp, #8
2274c     A7 F0 03 F6 | 	mov	ptra, fp
22750     B2 00 A0 FD | 	call	#popregs_
22754                 | _fatfs_cc_f_mkdir_ret
22754     2D 00 64 FD | 	ret
22758                 | 
22758                 | _fatfs_cc_f_rename
22758     01 4A 05 F6 | 	mov	COUNT_, #1
2275c     A8 00 A0 FD | 	call	#pushregs_
22760     9C F0 07 F1 | 	add	ptra, #156
22764     04 4E 05 F1 | 	add	fp, #4
22768     A7 12 62 FC | 	wrlong	arg01, fp
2276c     04 4E 05 F1 | 	add	fp, #4
22770     A7 14 62 FC | 	wrlong	arg02, fp
22774     A7 12 02 F6 | 	mov	arg01, fp
22778     08 4E 85 F1 | 	sub	fp, #8
2277c     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
22780     04 4E 05 F1 | 	add	fp, #4
22784     A7 12 02 F6 | 	mov	arg01, fp
22788     6C 4E 05 F1 | 	add	fp, #108
2278c     A7 14 02 F6 | 	mov	arg02, fp
22790     70 4E 85 F1 | 	sub	fp, #112
22794     02 16 06 F6 | 	mov	arg03, #2
22798     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
2279c     0C 4E 05 F1 | 	add	fp, #12
227a0     A7 FA 61 FC | 	wrlong	result1, fp
227a4     0C 4E 85 F1 | 	sub	fp, #12
227a8     00 FA 0D F2 | 	cmp	result1, #0 wz
227ac     44 03 90 5D |  if_ne	jmp	#LR__3753
227b0     70 4E 05 F1 | 	add	fp, #112
227b4     A7 16 02 FB | 	rdlong	arg03, fp
227b8     60 4E 85 F1 | 	sub	fp, #96
227bc     A7 16 62 FC | 	wrlong	arg03, fp
227c0     A7 12 02 F6 | 	mov	arg01, fp
227c4     0C 4E 85 F1 | 	sub	fp, #12
227c8     A7 14 02 FB | 	rdlong	arg02, fp
227cc     04 4E 85 F1 | 	sub	fp, #4
227d0     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
227d4     0C 4E 05 F1 | 	add	fp, #12
227d8     A7 FA 61 FC | 	wrlong	result1, fp
227dc     00 FA 4D F2 | 	cmps	result1, #0 wz
227e0     0C 4E 85 F1 | 	sub	fp, #12
227e4     1C 00 90 5D |  if_ne	jmp	#LR__3740
227e8     3B 4E 05 F1 | 	add	fp, #59
227ec     A7 FA C1 FA | 	rdbyte	result1, fp
227f0     3B 4E 85 F1 | 	sub	fp, #59
227f4     A0 FA CD F7 | 	test	result1, #160 wz
227f8     0C 4E 05 51 |  if_ne	add	fp, #12
227fc     A7 0C 68 5C |  if_ne	wrlong	#6, fp
22800     0C 4E 85 51 |  if_ne	sub	fp, #12
22804                 | LR__3740
22804     0C 4E 05 F1 | 	add	fp, #12
22808     A7 1E 0A FB | 	rdlong	local01, fp wz
2280c     0C 4E 85 F1 | 	sub	fp, #12
22810     E0 02 90 5D |  if_ne	jmp	#LR__3752
22814     74 4E 05 F1 | 	add	fp, #116
22818     A7 12 02 F6 | 	mov	arg01, fp
2281c     48 4E 85 F1 | 	sub	fp, #72
22820     A7 14 02 FB | 	rdlong	arg02, fp
22824     2C 4E 85 F1 | 	sub	fp, #44
22828     20 16 06 F6 | 	mov	arg03, #32
2282c     B0 2E BF FD | 	call	#__system____builtin_memmove
22830     40 4E 05 F1 | 	add	fp, #64
22834     A7 12 02 F6 | 	mov	arg01, fp
22838     30 4E 85 F1 | 	sub	fp, #48
2283c     A7 14 02 F6 | 	mov	arg02, fp
22840     10 4E 85 F1 | 	sub	fp, #16
22844     30 16 06 F6 | 	mov	arg03, #48
22848     94 2E BF FD | 	call	#__system____builtin_memmove
2284c     40 4E 05 F1 | 	add	fp, #64
22850     A7 12 02 F6 | 	mov	arg01, fp
22854     38 4E 85 F1 | 	sub	fp, #56
22858     A7 14 02 FB | 	rdlong	arg02, fp
2285c     08 4E 85 F1 | 	sub	fp, #8
22860     34 CA BF FD | 	call	#_fatfs_cc_follow_path
22864     0C 4E 05 F1 | 	add	fp, #12
22868     A7 FA 61 FC | 	wrlong	result1, fp
2286c     0C 4E 85 F1 | 	sub	fp, #12
22870     00 FA 0D F2 | 	cmp	result1, #0 wz
22874     4C 00 90 5D |  if_ne	jmp	#LR__3743
22878     48 4E 05 F1 | 	add	fp, #72
2287c     A7 FA 01 FB | 	rdlong	result1, fp
22880     30 4E 85 F1 | 	sub	fp, #48
22884     A7 16 02 FB | 	rdlong	arg03, fp
22888     18 4E 85 F1 | 	sub	fp, #24
2288c     0B FB 09 F2 | 	cmp	result1, arg03 wz
22890     20 00 90 5D |  if_ne	jmp	#LR__3741
22894     50 4E 05 F1 | 	add	fp, #80
22898     A7 FA 01 FB | 	rdlong	result1, fp
2289c     30 4E 85 F1 | 	sub	fp, #48
228a0     A7 16 02 FB | 	rdlong	arg03, fp
228a4     20 4E 85 F1 | 	sub	fp, #32
228a8     0B FB 09 F2 | 	cmp	result1, arg03 wz
228ac     04 1E 06 A6 |  if_e	mov	local01, #4
228b0     04 00 90 AD |  if_e	jmp	#LR__3742
228b4                 | LR__3741
228b4     08 1E 06 F6 | 	mov	local01, #8
228b8                 | LR__3742
228b8     0C 4E 05 F1 | 	add	fp, #12
228bc     A7 1E 62 FC | 	wrlong	local01, fp
228c0     0C 4E 85 F1 | 	sub	fp, #12
228c4                 | LR__3743
228c4     0C 4E 05 F1 | 	add	fp, #12
228c8     A7 1E 02 FB | 	rdlong	local01, fp
228cc     0C 4E 85 F1 | 	sub	fp, #12
228d0     04 1E 0E F2 | 	cmp	local01, #4 wz
228d4     CC 01 90 5D |  if_ne	jmp	#LR__3749
228d8     40 4E 05 F1 | 	add	fp, #64
228dc     A7 12 02 F6 | 	mov	arg01, fp
228e0     40 4E 85 F1 | 	sub	fp, #64
228e4     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
228e8     0C 4E 05 F1 | 	add	fp, #12
228ec     A7 FA 61 FC | 	wrlong	result1, fp
228f0     0C 4E 85 F1 | 	sub	fp, #12
228f4     00 FA 0D F2 | 	cmp	result1, #0 wz
228f8     A8 01 90 5D |  if_ne	jmp	#LR__3748
228fc     5C 4E 05 F1 | 	add	fp, #92
22900     A7 12 02 FB | 	rdlong	arg01, fp
22904     38 4E 05 F1 | 	add	fp, #56
22908     A7 12 62 FC | 	wrlong	arg01, fp
2290c     0D 12 06 F1 | 	add	arg01, #13
22910     20 4E 85 F1 | 	sub	fp, #32
22914     A7 14 02 F6 | 	mov	arg02, fp
22918     74 4E 85 F1 | 	sub	fp, #116
2291c     0D 14 06 F1 | 	add	arg02, #13
22920     13 16 06 F6 | 	mov	arg03, #19
22924     B8 2D BF FD | 	call	#__system____builtin_memmove
22928     94 4E 05 F1 | 	add	fp, #148
2292c     A7 1E 02 FB | 	rdlong	local01, fp
22930     15 4E 85 F1 | 	sub	fp, #21
22934     A7 FA C1 FA | 	rdbyte	result1, fp
22938     0B 1E 06 F1 | 	add	local01, #11
2293c     0F FB 41 FC | 	wrbyte	result1, local01
22940     15 4E 05 F1 | 	add	fp, #21
22944     A7 1E 02 FB | 	rdlong	local01, fp
22948     94 4E 85 F1 | 	sub	fp, #148
2294c     0B 1E 06 F1 | 	add	local01, #11
22950     0F 1F C2 FA | 	rdbyte	local01, local01
22954     10 1E CE F7 | 	test	local01, #16 wz
22958     24 00 90 5D |  if_ne	jmp	#LR__3744
2295c     94 4E 05 F1 | 	add	fp, #148
22960     A7 FA 01 FB | 	rdlong	result1, fp
22964     FD 1E 02 F6 | 	mov	local01, result1
22968     94 4E 85 F1 | 	sub	fp, #148
2296c     0B FA 05 F1 | 	add	result1, #11
22970     FD FA C1 FA | 	rdbyte	result1, result1
22974     20 FA 45 F5 | 	or	result1, #32
22978     0B 1E 06 F1 | 	add	local01, #11
2297c     0F FB 41 FC | 	wrbyte	result1, local01
22980                 | LR__3744
22980     70 4E 05 F1 | 	add	fp, #112
22984     A7 1E 02 FB | 	rdlong	local01, fp
22988     03 1E 06 F1 | 	add	local01, #3
2298c     0F 03 48 FC | 	wrbyte	#1, local01
22990     24 4E 05 F1 | 	add	fp, #36
22994     A7 1E 02 FB | 	rdlong	local01, fp
22998     94 4E 85 F1 | 	sub	fp, #148
2299c     0B 1E 06 F1 | 	add	local01, #11
229a0     0F 1F C2 FA | 	rdbyte	local01, local01
229a4     10 1E CE F7 | 	test	local01, #16 wz
229a8     F8 00 90 AD |  if_e	jmp	#LR__3747
229ac     18 4E 05 F1 | 	add	fp, #24
229b0     A7 16 02 FB | 	rdlong	arg03, fp
229b4     30 4E 05 F1 | 	add	fp, #48
229b8     A7 1E 02 FB | 	rdlong	local01, fp
229bc     48 4E 85 F1 | 	sub	fp, #72
229c0     0F 17 0A F2 | 	cmp	arg03, local01 wz
229c4     DC 00 90 AD |  if_e	jmp	#LR__3747
229c8     70 4E 05 F1 | 	add	fp, #112
229cc     A7 12 02 FB | 	rdlong	arg01, fp
229d0     09 1F 02 F6 | 	mov	local01, arg01
229d4     24 4E 05 F1 | 	add	fp, #36
229d8     A7 14 02 FB | 	rdlong	arg02, fp
229dc     94 4E 85 F1 | 	sub	fp, #148
229e0     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
229e4     FD 14 02 F6 | 	mov	arg02, result1
229e8     0F 13 02 F6 | 	mov	arg01, local01
229ec     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
229f0     98 4E 05 F1 | 	add	fp, #152
229f4     A7 FA 61 FC | 	wrlong	result1, fp
229f8     00 FA 4D F2 | 	cmps	result1, #0 wz
229fc     98 4E 85 F1 | 	sub	fp, #152
22a00     0C 4E 05 A1 |  if_e	add	fp, #12
22a04     A7 04 68 AC |  if_e	wrlong	#2, fp
22a08     0C 4E 85 A1 |  if_e	sub	fp, #12
22a0c     94 00 90 AD |  if_e	jmp	#LR__3746
22a10     70 4E 05 F1 | 	add	fp, #112
22a14     A7 12 02 FB | 	rdlong	arg01, fp
22a18     28 4E 05 F1 | 	add	fp, #40
22a1c     A7 14 02 FB | 	rdlong	arg02, fp
22a20     98 4E 85 F1 | 	sub	fp, #152
22a24     4C A0 BF FD | 	call	#_fatfs_cc_move_window
22a28     0C 4E 05 F1 | 	add	fp, #12
22a2c     A7 FA 61 FC | 	wrlong	result1, fp
22a30     64 4E 05 F1 | 	add	fp, #100
22a34     A7 1E 02 FB | 	rdlong	local01, fp
22a38     54 1E 06 F1 | 	add	local01, #84
22a3c     24 4E 05 F1 | 	add	fp, #36
22a40     A7 1E 62 FC | 	wrlong	local01, fp
22a44     88 4E 85 F1 | 	sub	fp, #136
22a48     A7 1E 0A FB | 	rdlong	local01, fp wz
22a4c     0C 4E 85 F1 | 	sub	fp, #12
22a50     50 00 90 5D |  if_ne	jmp	#LR__3745
22a54     94 4E 05 F1 | 	add	fp, #148
22a58     A7 1E 02 FB | 	rdlong	local01, fp
22a5c     94 4E 85 F1 | 	sub	fp, #148
22a60     01 1E 06 F1 | 	add	local01, #1
22a64     0F 1F C2 FA | 	rdbyte	local01, local01
22a68     2E 1E 0E F2 | 	cmp	local01, #46 wz
22a6c     34 00 90 5D |  if_ne	jmp	#LR__3745
22a70     70 4E 05 F1 | 	add	fp, #112
22a74     A7 12 02 FB | 	rdlong	arg01, fp
22a78     24 4E 05 F1 | 	add	fp, #36
22a7c     A7 14 02 FB | 	rdlong	arg02, fp
22a80     4C 4E 85 F1 | 	sub	fp, #76
22a84     A7 16 02 FB | 	rdlong	arg03, fp
22a88     48 4E 85 F1 | 	sub	fp, #72
22a8c     50 AD BF FD | 	call	#_fatfs_cc_st_clust
22a90     70 4E 05 F1 | 	add	fp, #112
22a94     A7 1E 02 FB | 	rdlong	local01, fp
22a98     70 4E 85 F1 | 	sub	fp, #112
22a9c     03 1E 06 F1 | 	add	local01, #3
22aa0     0F 03 48 FC | 	wrbyte	#1, local01
22aa4                 | LR__3745
22aa4                 | LR__3746
22aa4                 | LR__3747
22aa4                 | LR__3748
22aa4                 | LR__3749
22aa4     0C 4E 05 F1 | 	add	fp, #12
22aa8     A7 1E 0A FB | 	rdlong	local01, fp wz
22aac     0C 4E 85 F1 | 	sub	fp, #12
22ab0     40 00 90 5D |  if_ne	jmp	#LR__3751
22ab4     10 4E 05 F1 | 	add	fp, #16
22ab8     A7 12 02 F6 | 	mov	arg01, fp
22abc     10 4E 85 F1 | 	sub	fp, #16
22ac0     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
22ac4     0C 4E 05 F1 | 	add	fp, #12
22ac8     A7 FA 61 FC | 	wrlong	result1, fp
22acc     0C 4E 85 F1 | 	sub	fp, #12
22ad0     00 FA 0D F2 | 	cmp	result1, #0 wz
22ad4     1C 00 90 5D |  if_ne	jmp	#LR__3750
22ad8     70 4E 05 F1 | 	add	fp, #112
22adc     A7 12 02 FB | 	rdlong	arg01, fp
22ae0     70 4E 85 F1 | 	sub	fp, #112
22ae4     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
22ae8     0C 4E 05 F1 | 	add	fp, #12
22aec     A7 FA 61 FC | 	wrlong	result1, fp
22af0     0C 4E 85 F1 | 	sub	fp, #12
22af4                 | LR__3750
22af4                 | LR__3751
22af4                 | LR__3752
22af4                 | LR__3753
22af4                 | ' 					res = sync_fs(fs);
22af4                 | ' 				}
22af4                 | ' 			}
22af4                 | ' 
22af4                 | ' 		}
22af4                 | ' 		;
22af4                 | ' 	}
22af4                 | ' 
22af4                 | ' 	return res ;
22af4     0C 4E 05 F1 | 	add	fp, #12
22af8     A7 FA 01 FB | 	rdlong	result1, fp
22afc     0C 4E 85 F1 | 	sub	fp, #12
22b00     A7 F0 03 F6 | 	mov	ptra, fp
22b04     B2 00 A0 FD | 	call	#popregs_
22b08                 | _fatfs_cc_f_rename_ret
22b08     2D 00 64 FD | 	ret
22b0c                 | 
22b0c                 | _fatfs_cc_time
22b0c     00 4A 05 F6 | 	mov	COUNT_, #0
22b10     A8 00 A0 FD | 	call	#pushregs_
22b14     14 F0 07 F1 | 	add	ptra, #20
22b18     04 4E 05 F1 | 	add	fp, #4
22b1c     A7 12 62 FC | 	wrlong	arg01, fp
22b20     04 4E 05 F1 | 	add	fp, #4
22b24     A7 12 02 F6 | 	mov	arg01, fp
22b28     08 4E 85 F1 | 	sub	fp, #8
22b2c     00 14 06 F6 | 	mov	arg02, #0
22b30     0C 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
22b34     08 4E 05 F1 | 	add	fp, #8
22b38     A7 FA 01 FB | 	rdlong	result1, fp
22b3c     08 4E 05 F1 | 	add	fp, #8
22b40     A7 FA 61 FC | 	wrlong	result1, fp
22b44     0C 4E 85 F1 | 	sub	fp, #12
22b48     A7 FA 09 FB | 	rdlong	result1, fp wz
22b4c     04 4E 85 F1 | 	sub	fp, #4
22b50     18 00 90 AD |  if_e	jmp	#LR__3760
22b54     04 4E 05 F1 | 	add	fp, #4
22b58     A7 FA 01 FB | 	rdlong	result1, fp
22b5c     0C 4E 05 F1 | 	add	fp, #12
22b60     A7 14 02 FB | 	rdlong	arg02, fp
22b64     10 4E 85 F1 | 	sub	fp, #16
22b68     FD 14 62 FC | 	wrlong	arg02, result1
22b6c                 | LR__3760
22b6c                 | '         *tp = now;
22b6c                 | '     return now;
22b6c     10 4E 05 F1 | 	add	fp, #16
22b70     A7 FA 01 FB | 	rdlong	result1, fp
22b74     10 4E 85 F1 | 	sub	fp, #16
22b78     A7 F0 03 F6 | 	mov	ptra, fp
22b7c     B2 00 A0 FD | 	call	#popregs_
22b80                 | _fatfs_cc_time_ret
22b80     2D 00 64 FD | 	ret
22b84                 | 
22b84                 | _fatfs_cc_mktime
22b84     06 4A 05 F6 | 	mov	COUNT_, #6
22b88     A8 00 A0 FD | 	call	#pushregs_
22b8c     09 1F 02 F6 | 	mov	local01, arg01
22b90     14 1E 06 F1 | 	add	local01, #20
22b94     0F 13 02 FB | 	rdlong	arg01, local01
22b98     14 1E 86 F1 | 	sub	local01, #20
22b9c     46 12 56 F2 | 	cmps	arg01, #70 wc
22ba0                 | '                 return (time_t) -1;
22ba0     01 FA 65 C6 |  if_b	neg	result1, #1
22ba4     7C 01 90 CD |  if_b	jmp	#LR__3774
22ba8     03 00 00 FF 
22bac     6C 21 06 F6 | 	mov	local02, ##1900
22bb0     14 1E 06 F1 | 	add	local01, #20
22bb4     0F FB 01 FB | 	rdlong	result1, local01
22bb8     FD 20 02 F1 | 	add	local02, result1
22bbc     08 1E 86 F1 | 	sub	local01, #8
22bc0     0F 23 02 FB | 	rdlong	local03, local01
22bc4     01 22 86 F1 | 	sub	local03, #1
22bc8     04 1E 06 F1 | 	add	local01, #4
22bcc     0F 13 02 FB | 	rdlong	arg01, local01
22bd0     10 1E 86 F1 | 	sub	local01, #16
22bd4     02 12 66 F0 | 	shl	arg01, #2
22bd8     02 00 00 FF 
22bdc     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
22be0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
22be4     09 FB 01 FB | 	rdlong	result1, arg01
22be8     FD 22 02 F1 | 	add	local03, result1
22bec     10 13 02 F6 | 	mov	arg01, local02
22bf0     02 00 00 FF 
22bf4     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
22bf8     EC 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
22bfc     00 FA 0D F2 | 	cmp	result1, #0 wz
22c00     1C 00 90 AD |  if_e	jmp	#LR__3770
22c04     00 24 06 F6 | 	mov	local04, #0
22c08     10 1E 06 F1 | 	add	local01, #16
22c0c     0F FB 01 FB | 	rdlong	result1, local01
22c10     10 1E 86 F1 | 	sub	local01, #16
22c14     02 FA 55 F2 | 	cmps	result1, #2 wc
22c18     01 24 06 36 |  if_ae	mov	local04, #1
22c1c     04 00 90 FD | 	jmp	#LR__3771
22c20                 | LR__3770
22c20     00 24 06 F6 | 	mov	local04, #0
22c24                 | LR__3771
22c24     04 1E 06 F1 | 	add	local01, #4
22c28     0F FB 01 FB | 	rdlong	result1, local01
22c2c     04 1E 86 F1 | 	sub	local01, #4
22c30     0F 27 02 FB | 	rdlong	local05, local01
22c34     08 1E 06 F1 | 	add	local01, #8
22c38     0F 13 02 FB | 	rdlong	arg01, local01
22c3c     07 00 00 FF 
22c40     10 12 06 FD | 	qmul	arg01, ##3600
22c44     12 23 02 F1 | 	add	local03, local04
22c48     FD 24 02 F6 | 	mov	local04, result1
22c4c     04 24 66 F0 | 	shl	local04, #4
22c50     FD 24 82 F1 | 	sub	local04, result1
22c54     02 24 66 F0 | 	shl	local04, #2
22c58     12 27 02 F1 | 	add	local05, local04
22c5c     08 1E 86 F1 | 	sub	local01, #8
22c60     18 24 62 FD | 	getqx	local04
22c64     A8 00 00 FF 
22c68     80 23 06 FD | 	qmul	local03, ##86400
22c6c     12 27 02 F1 | 	add	local05, local04
22c70     10 23 02 F6 | 	mov	local03, local02
22c74     03 00 00 FF 
22c78     B2 23 86 F1 | 	sub	local03, ##1970
22c7c     18 24 62 FD | 	getqx	local04
22c80     99 F0 00 FF 
22c84     80 23 06 FD | 	qmul	local03, ##31536000
22c88     12 27 02 F1 | 	add	local05, local04
22c8c     10 23 02 F6 | 	mov	local03, local02
22c90     03 00 00 FF 
22c94     B1 23 86 F1 | 	sub	local03, ##1969
22c98     11 29 52 F6 | 	abs	local06, local03 wc
22c9c     02 28 46 F0 | 	shr	local06, #2
22ca0     14 29 82 F6 | 	negc	local06, local06
22ca4     03 00 00 FF 
22ca8     D1 21 56 F2 | 	cmps	local02, ##2001 wc
22cac     18 24 62 FD | 	getqx	local04
22cb0     12 27 02 F1 | 	add	local05, local04
22cb4     18 00 90 CD |  if_b	jmp	#LR__3772
22cb8     03 00 00 FF 
22cbc     D0 21 86 F1 | 	sub	local02, ##2000
22cc0     10 25 52 F6 | 	abs	local04, local02 wc
22cc4     64 24 16 FD | 	qdiv	local04, #100
22cc8     18 24 62 FD | 	getqx	local04
22ccc     12 29 A2 F3 | 	sumnc	local06, local04
22cd0                 | LR__3772
22cd0     A8 00 00 FF 
22cd4     80 29 06 FD | 	qmul	local06, ##86400
22cd8     18 28 62 FD | 	getqx	local06
22cdc     14 27 02 F1 | 	add	local05, local06
22ce0     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
22ce4     02 00 00 FF 
22ce8     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
22cec     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
22cf0     14 27 02 F1 | 	add	local05, local06
22cf4     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
22cf8     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
22cfc     02 00 00 FF 
22d00     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
22d04     01 22 0E F2 | 	cmp	local03, #1 wz
22d08     14 00 90 5D |  if_ne	jmp	#LR__3773
22d0c     0F 13 02 F6 | 	mov	arg01, local01
22d10     D8 19 B0 FD | 	call	#_fatfs_cc___indst
22d14     00 FA 0D F2 | 	cmp	result1, #0 wz
22d18     07 00 00 5F 
22d1c     10 26 86 51 |  if_ne	sub	local05, ##3600
22d20                 | LR__3773
22d20                 | '                 s -=  (3600L) ;
22d20                 | ' 
22d20                 | '         return s;
22d20     13 FB 01 F6 | 	mov	result1, local05
22d24                 | LR__3774
22d24     A7 F0 03 F6 | 	mov	ptra, fp
22d28     B2 00 A0 FD | 	call	#popregs_
22d2c                 | _fatfs_cc_mktime_ret
22d2c     2D 00 64 FD | 	ret
22d30                 | 
22d30                 | _fatfs_cc__gmtime_r
22d30     03 4A 05 F6 | 	mov	COUNT_, #3
22d34     A8 00 A0 FD | 	call	#pushregs_
22d38     09 1F 02 FB | 	rdlong	local01, arg01
22d3c     A8 00 00 FF 
22d40     80 1F 16 FD | 	qdiv	local01, ##86400
22d44     18 FA 61 FD | 	getqx	result1
22d48     04 FA 05 F1 | 	add	result1, #4
22d4c     07 FA 15 FD | 	qdiv	result1, #7
22d50     18 14 06 F1 | 	add	arg02, #24
22d54     D1 7F 27 FF 
22d58     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
22d5c     D1 7F 27 3F 
22d60     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
22d64     03 00 00 3F 
22d68     DC 21 06 36 |  if_ae	mov	local02, ##2012
22d6c     03 00 00 CF 
22d70     B2 21 06 C6 |  if_b	mov	local02, ##1970
22d74                 | ' 	  year = 1970;
22d74                 | ' 	}
22d74                 | ' 
22d74                 | ' 	for(;;) {
22d74     19 FA 61 FD | 	getqy	result1
22d78     0A FB 61 FC | 	wrlong	result1, arg02
22d7c     18 14 86 F1 | 	sub	arg02, #24
22d80                 | LR__3780
22d80     10 13 02 F6 | 	mov	arg01, local02
22d84     60 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
22d88     00 FA 0D F2 | 	cmp	result1, #0 wz
22d8c     42 F1 00 5F 
22d90     00 23 06 56 |  if_ne	mov	local03, ##31622400
22d94     99 F0 00 AF 
22d98     80 23 06 A6 |  if_e	mov	local03, ##31536000
22d9c     11 1F 12 F2 | 	cmp	local01, local03 wc
22da0                 | ' 	    break;
22da0     01 20 06 31 |  if_ae	add	local02, #1
22da4     11 1F 82 31 |  if_ae	sub	local01, local03
22da8     D4 FF 9F 3D |  if_ae	jmp	#LR__3780
22dac     A8 00 00 FF 
22db0     80 1F 16 FD | 	qdiv	local01, ##86400
22db4     10 23 02 F6 | 	mov	local03, local02
22db8     03 00 00 FF 
22dbc     6C 23 86 F1 | 	sub	local03, ##1900
22dc0     14 14 06 F1 | 	add	arg02, #20
22dc4     0A 23 62 FC | 	wrlong	local03, arg02
22dc8     08 14 06 F1 | 	add	arg02, #8
22dcc     10 13 02 F6 | 	mov	arg01, local02
22dd0     18 20 62 FD | 	getqx	local02
22dd4     0A 21 62 FC | 	wrlong	local02, arg02
22dd8     1C 14 86 F1 | 	sub	arg02, #28
22ddc     08 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
22de0     00 FA 0D F2 | 	cmp	result1, #0 wz
22de4     1D 22 06 56 |  if_ne	mov	local03, #29
22de8     1C 22 06 A6 |  if_e	mov	local03, #28
22dec     02 00 00 FF 
22df0     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
22df4     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
22df8     02 00 00 FF 
22dfc     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
22e00                 | ' 
22e00                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
22e00                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
22e00     00 12 06 F6 | 	mov	arg01, #0
22e04     97 2A 48 FB | 	callpa	#(@LR__3782-@LR__3781)>>2,fcache_load_ptr_
22e08                 | LR__3781
22e08     09 23 02 F6 | 	mov	local03, arg01
22e0c     02 22 66 F0 | 	shl	local03, #2
22e10     02 00 00 FF 
22e14     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
22e18     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
22e1c     11 23 02 FB | 	rdlong	local03, local03
22e20     11 21 52 F2 | 	cmps	local02, local03 wc
22e24     02 00 00 FF 
22e28     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
22e2c     2C 00 90 CD |  if_b	jmp	#LR__3783
22e30     09 23 02 F6 | 	mov	local03, arg01
22e34     02 22 66 F0 | 	shl	local03, #2
22e38     02 00 00 FF 
22e3c     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
22e40     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
22e44     11 23 02 FB | 	rdlong	local03, local03
22e48     11 21 82 F1 | 	sub	local02, local03
22e4c     01 12 06 F1 | 	add	arg01, #1
22e50     02 00 00 FF 
22e54     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
22e58     AC FF 9F FD | 	jmp	#LR__3781
22e5c                 | LR__3782
22e5c                 | LR__3783
22e5c     A8 00 00 FF 
22e60     80 1F 16 FD | 	qdiv	local01, ##86400
22e64     10 14 06 F1 | 	add	arg02, #16
22e68     0A 13 62 FC | 	wrlong	arg01, arg02
22e6c     01 20 06 F1 | 	add	local02, #1
22e70     04 14 86 F1 | 	sub	arg02, #4
22e74     0A 21 62 FC | 	wrlong	local02, arg02
22e78     19 1E 62 FD | 	getqy	local01
22e7c     07 00 00 FF 
22e80     10 1E 16 FD | 	qdiv	local01, ##3600
22e84     18 22 62 FD | 	getqx	local03
22e88     07 00 00 FF 
22e8c     10 1E 16 FD | 	qdiv	local01, ##3600
22e90     04 14 86 F1 | 	sub	arg02, #4
22e94     0A 23 62 FC | 	wrlong	local03, arg02
22e98     19 1E 62 FD | 	getqy	local01
22e9c     3C 1E 16 FD | 	qdiv	local01, #60
22ea0     18 22 62 FD | 	getqx	local03
22ea4     3C 1E 16 FD | 	qdiv	local01, #60
22ea8     04 14 86 F1 | 	sub	arg02, #4
22eac     0A 23 62 FC | 	wrlong	local03, arg02
22eb0     04 14 86 F1 | 	sub	arg02, #4
22eb4                 | '         stm->tm_isdst = 0;
22eb4                 | ' 
22eb4                 | ' ;
22eb4                 | '         return stm;
22eb4     0A FB 01 F6 | 	mov	result1, arg02
22eb8     19 22 62 FD | 	getqy	local03
22ebc     0A 23 62 FC | 	wrlong	local03, arg02
22ec0     20 14 06 F1 | 	add	arg02, #32
22ec4     0A 01 68 FC | 	wrlong	#0, arg02
22ec8     A7 F0 03 F6 | 	mov	ptra, fp
22ecc     B2 00 A0 FD | 	call	#popregs_
22ed0                 | _fatfs_cc__gmtime_r_ret
22ed0     2D 00 64 FD | 	ret
22ed4                 | 
22ed4                 | _fatfs_cc__tzset
22ed4     25 01 00 FF 
22ed8     15 12 06 F6 | 	mov	arg01, ##@LR__4095
22edc     34 00 B0 FD | 	call	#_fatfs_cc_getenv
22ee0     FD 12 02 F6 | 	mov	arg01, result1
22ee4     02 00 00 FF 
22ee8     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
22eec     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
22ef0     02 00 00 FF 
22ef4     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
22ef8     3C 15 B0 FD | 	call	#_fatfs_cc___tzoffset
22efc     02 00 00 FF 
22f00     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
22f04     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
22f08     02 00 00 FF 
22f0c     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
22f10                 | _fatfs_cc__tzset_ret
22f10     2D 00 64 FD | 	ret
22f14                 | 
22f14                 | _fatfs_cc_getenv
22f14     06 4A 05 F6 | 	mov	COUNT_, #6
22f18     A8 00 A0 FD | 	call	#pushregs_
22f1c     09 1F 02 F6 | 	mov	local01, arg01
22f20     09 21 02 F6 | 	mov	local02, arg01
22f24     97 06 48 FB | 	callpa	#(@LR__3791-@LR__3790)>>2,fcache_load_ptr_
22f28                 | LR__3790
22f28     10 FB C9 FA | 	rdbyte	result1, local02 wz
22f2c     01 20 06 51 |  if_ne	add	local02, #1
22f30     F4 FF 9F 5D |  if_ne	jmp	#LR__3790
22f34                 | LR__3791
22f34     09 21 82 F1 | 	sub	local02, arg01
22f38     10 FB 01 F6 | 	mov	result1, local02
22f3c     02 00 00 FF 
22f40     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
22f44     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
22f48     02 00 00 FF 
22f4c     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
22f50                 | '             return 0;
22f50     00 FA 05 A6 |  if_e	mov	result1, #0
22f54     5C 00 90 AD |  if_e	jmp	#LR__3794
22f58                 | ' 
22f58                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
22f58     02 00 00 FF 
22f5c     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
22f60     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
22f64     02 00 00 FF 
22f68     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
22f6c                 | LR__3792
22f6c     11 25 0A FB | 	rdlong	local04, local03 wz
22f70     3C 00 90 AD |  if_e	jmp	#LR__3793
22f74     12 13 02 F6 | 	mov	arg01, local04
22f78     0F 15 02 F6 | 	mov	arg02, local01
22f7c     10 17 02 F6 | 	mov	arg03, local02
22f80     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
22f84     00 FA 0D F2 | 	cmp	result1, #0 wz
22f88     10 27 02 A6 |  if_e	mov	local05, local02
22f8c     12 27 02 A1 |  if_e	add	local05, local04
22f90     13 29 C2 AA |  if_e	rdbyte	local06, local05
22f94     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
22f98                 | ' 			return name+len+1;
22f98     10 25 02 A1 |  if_e	add	local04, local02
22f9c     01 24 06 A1 |  if_e	add	local04, #1
22fa0     12 FB 01 A6 |  if_e	mov	result1, local04
22fa4     0C 00 90 AD |  if_e	jmp	#LR__3794
22fa8     04 22 06 F1 | 	add	local03, #4
22fac     BC FF 9F FD | 	jmp	#LR__3792
22fb0                 | LR__3793
22fb0                 | ' 	}
22fb0                 | ' 	return 0;
22fb0     00 FA 05 F6 | 	mov	result1, #0
22fb4                 | LR__3794
22fb4     A7 F0 03 F6 | 	mov	ptra, fp
22fb8     B2 00 A0 FD | 	call	#popregs_
22fbc                 | _fatfs_cc_getenv_ret
22fbc     2D 00 64 FD | 	ret
22fc0                 | 
22fc0                 | _fatfs_cc__get_fattime
22fc0     00 4A 05 F6 | 	mov	COUNT_, #0
22fc4     A8 00 A0 FD | 	call	#pushregs_
22fc8     34 F0 07 F1 | 	add	ptra, #52
22fcc     00 12 06 F6 | 	mov	arg01, #0
22fd0     38 FB BF FD | 	call	#_fatfs_cc_time
22fd4     04 4E 05 F1 | 	add	fp, #4
22fd8     A7 FA 61 FC | 	wrlong	result1, fp
22fdc     A7 12 02 F6 | 	mov	arg01, fp
22fe0     0C 4E 05 F1 | 	add	fp, #12
22fe4     A7 14 02 F6 | 	mov	arg02, fp
22fe8     10 4E 85 F1 | 	sub	fp, #16
22fec     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
22ff0     24 4E 05 F1 | 	add	fp, #36
22ff4     A7 14 02 FB | 	rdlong	arg02, fp
22ff8     50 14 86 F1 | 	sub	arg02, #80
22ffc     09 14 66 F0 | 	shl	arg02, #9
23000     04 4E 85 F1 | 	sub	fp, #4
23004     A7 FA 01 FB | 	rdlong	result1, fp
23008     01 FA 05 F1 | 	add	result1, #1
2300c     05 FA 65 F0 | 	shl	result1, #5
23010     FD 14 42 F5 | 	or	arg02, result1
23014     04 4E 85 F1 | 	sub	fp, #4
23018     A7 FA 01 FB | 	rdlong	result1, fp
2301c     FD 14 42 F5 | 	or	arg02, result1
23020     14 4E 85 F1 | 	sub	fp, #20
23024     A7 14 62 FC | 	wrlong	arg02, fp
23028     10 4E 05 F1 | 	add	fp, #16
2302c     A7 14 02 FB | 	rdlong	arg02, fp
23030     0B 14 66 F0 | 	shl	arg02, #11
23034     04 4E 85 F1 | 	sub	fp, #4
23038     A7 FA 01 FB | 	rdlong	result1, fp
2303c     05 FA 65 F0 | 	shl	result1, #5
23040     FD 14 42 F5 | 	or	arg02, result1
23044     04 4E 85 F1 | 	sub	fp, #4
23048     A7 FA 01 FB | 	rdlong	result1, fp
2304c     FD 14 42 F5 | 	or	arg02, result1
23050     04 4E 85 F1 | 	sub	fp, #4
23054     A7 14 62 FC | 	wrlong	arg02, fp
23058                 | ' 
23058                 | '     now = time(0);
23058                 | '     _gmtime_r (&now, &date);
23058                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
23058                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
23058                 | '     return (ffdate << 16) | fftime;
23058     04 4E 85 F1 | 	sub	fp, #4
2305c     A7 FA 01 FB | 	rdlong	result1, fp
23060     10 FA 65 F0 | 	shl	result1, #16
23064     08 4E 85 F1 | 	sub	fp, #8
23068     0A FB 41 F5 | 	or	result1, arg02
2306c     A7 F0 03 F6 | 	mov	ptra, fp
23070     B2 00 A0 FD | 	call	#popregs_
23074                 | _fatfs_cc__get_fattime_ret
23074     2D 00 64 FD | 	ret
23078                 | 
23078                 | _fatfs_cc_unixtime_0788
23078     00 4A 05 F6 | 	mov	COUNT_, #0
2307c     A8 00 A0 FD | 	call	#pushregs_
23080     34 F0 07 F1 | 	add	ptra, #52
23084     04 4E 05 F1 | 	add	fp, #4
23088     A7 12 62 FC | 	wrlong	arg01, fp
2308c     04 4E 05 F1 | 	add	fp, #4
23090     A7 14 62 FC | 	wrlong	arg02, fp
23094     04 4E 85 F1 | 	sub	fp, #4
23098     A7 14 02 FB | 	rdlong	arg02, fp
2309c     09 14 46 F0 | 	shr	arg02, #9
230a0     7F 14 06 F5 | 	and	arg02, #127
230a4     50 FA 05 F6 | 	mov	result1, #80
230a8     0A FB 01 F1 | 	add	result1, arg02
230ac     20 4E 05 F1 | 	add	fp, #32
230b0     A7 FA 61 FC | 	wrlong	result1, fp
230b4     20 4E 85 F1 | 	sub	fp, #32
230b8     A7 FA 01 FB | 	rdlong	result1, fp
230bc     05 FA 45 F0 | 	shr	result1, #5
230c0     FD FA 41 F8 | 	getnib	result1, result1, #0
230c4     01 FA 85 F1 | 	sub	result1, #1
230c8     1C 4E 05 F1 | 	add	fp, #28
230cc     A7 FA 61 FC | 	wrlong	result1, fp
230d0     1C 4E 85 F1 | 	sub	fp, #28
230d4     A7 FA 01 FB | 	rdlong	result1, fp
230d8     1F FA 05 F5 | 	and	result1, #31
230dc     18 4E 05 F1 | 	add	fp, #24
230e0     A7 FA 61 FC | 	wrlong	result1, fp
230e4     14 4E 85 F1 | 	sub	fp, #20
230e8     A7 FA 01 FB | 	rdlong	result1, fp
230ec     0B FA 45 F0 | 	shr	result1, #11
230f0     1F FA 05 F5 | 	and	result1, #31
230f4     10 4E 05 F1 | 	add	fp, #16
230f8     A7 FA 61 FC | 	wrlong	result1, fp
230fc     10 4E 85 F1 | 	sub	fp, #16
23100     A7 FA 01 FB | 	rdlong	result1, fp
23104     05 FA 45 F0 | 	shr	result1, #5
23108     3F FA 05 F5 | 	and	result1, #63
2310c     0C 4E 05 F1 | 	add	fp, #12
23110     A7 FA 61 FC | 	wrlong	result1, fp
23114     0C 4E 85 F1 | 	sub	fp, #12
23118     A7 14 02 FB | 	rdlong	arg02, fp
2311c     1F 14 06 F5 | 	and	arg02, #31
23120     01 14 66 F0 | 	shl	arg02, #1
23124     08 4E 05 F1 | 	add	fp, #8
23128     A7 14 62 FC | 	wrlong	arg02, fp
2312c     A7 12 02 F6 | 	mov	arg01, fp
23130     10 4E 85 F1 | 	sub	fp, #16
23134     4C FA BF FD | 	call	#_fatfs_cc_mktime
23138     0C 4E 05 F1 | 	add	fp, #12
2313c     A7 FA 61 FC | 	wrlong	result1, fp
23140                 | ' 
23140                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
23140                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
23140                 | '     date.tm_mday = (dosdate & 0x1f);
23140                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
23140                 | '     date.tm_min = (dostime >> 5) & 0x3f;
23140                 | '     date.tm_sec = (dostime & 0x1f) << 1;
23140                 | ' 
23140                 | '     t = mktime(&date);
23140                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
23140                 | '     return t;
23140     0C 4E 85 F1 | 	sub	fp, #12
23144     A7 F0 03 F6 | 	mov	ptra, fp
23148     B2 00 A0 FD | 	call	#popregs_
2314c                 | _fatfs_cc_unixtime_0788_ret
2314c     2D 00 64 FD | 	ret
23150                 | 
23150                 | _fatfs_cc__set_dos_error_0790
23150     09 01 02 F6 | 	mov	_var01, arg01
23154                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
23154                 | '     switch (derr) {
23154     14 00 26 F3 | 	fle	_var01, #20
23158     30 00 62 FD | 	jmprel	_var01
2315c                 | LR__3800
2315c     50 00 90 FD | 	jmp	#LR__3801
23160     84 00 90 FD | 	jmp	#LR__3815
23164     80 00 90 FD | 	jmp	#LR__3816
23168     7C 00 90 FD | 	jmp	#LR__3817
2316c     48 00 90 FD | 	jmp	#LR__3802
23170     44 00 90 FD | 	jmp	#LR__3803
23174     40 00 90 FD | 	jmp	#LR__3804
23178     44 00 90 FD | 	jmp	#LR__3805
2317c     48 00 90 FD | 	jmp	#LR__3807
23180     54 00 90 FD | 	jmp	#LR__3810
23184     38 00 90 FD | 	jmp	#LR__3806
23188     4C 00 90 FD | 	jmp	#LR__3811
2318c     48 00 90 FD | 	jmp	#LR__3812
23190     44 00 90 FD | 	jmp	#LR__3813
23194     50 00 90 FD | 	jmp	#LR__3818
23198     4C 00 90 FD | 	jmp	#LR__3818
2319c     48 00 90 FD | 	jmp	#LR__3818
231a0     2C 00 90 FD | 	jmp	#LR__3808
231a4     38 00 90 FD | 	jmp	#LR__3814
231a8     2C 00 90 FD | 	jmp	#LR__3809
231ac     38 00 90 FD | 	jmp	#LR__3818
231b0                 | LR__3801
231b0     00 02 06 F6 | 	mov	_var02, #0
231b4                 | '         r = 0;
231b4                 | '         break;
231b4     34 00 90 FD | 	jmp	#LR__3819
231b8                 | LR__3802
231b8                 | LR__3803
231b8                 | LR__3804
231b8     04 02 06 F6 | 	mov	_var02, #4
231bc                 | '         r =  4 ;
231bc                 | '         break;
231bc     2C 00 90 FD | 	jmp	#LR__3819
231c0                 | LR__3805
231c0                 | LR__3806
231c0     06 02 06 F6 | 	mov	_var02, #6
231c4                 | '         r =  6 ;
231c4                 | '         break;
231c4     24 00 90 FD | 	jmp	#LR__3819
231c8                 | LR__3807
231c8     09 02 06 F6 | 	mov	_var02, #9
231cc                 | '         r =  9 ;
231cc                 | '         break;
231cc     1C 00 90 FD | 	jmp	#LR__3819
231d0                 | LR__3808
231d0     07 02 06 F6 | 	mov	_var02, #7
231d4                 | '         r =  7 ;
231d4                 | '         break;
231d4     14 00 90 FD | 	jmp	#LR__3819
231d8                 | LR__3809
231d8                 | LR__3810
231d8                 | LR__3811
231d8                 | LR__3812
231d8                 | LR__3813
231d8     0A 02 06 F6 | 	mov	_var02, #10
231dc                 | '         r =  10 ;
231dc                 | '         break;
231dc     0C 00 90 FD | 	jmp	#LR__3819
231e0                 | LR__3814
231e0     0B 02 06 F6 | 	mov	_var02, #11
231e4                 | '         r =  11 ;
231e4                 | '         break;
231e4     04 00 90 FD | 	jmp	#LR__3819
231e8                 | LR__3815
231e8                 | LR__3816
231e8                 | LR__3817
231e8                 | LR__3818
231e8     0C 02 06 F6 | 	mov	_var02, #12
231ec                 | '         r =  12 ;
231ec                 | '         break;
231ec                 | LR__3819
231ec                 | '     }
231ec                 | '     return _seterror(r);
231ec     00 02 4E F2 | 	cmps	_var02, #0 wz
231f0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
231f4     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
231f8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
231fc     01 FA 65 56 |  if_ne	neg	result1, #1
23200     00 FA 05 A6 |  if_e	mov	result1, #0
23204                 | _fatfs_cc__set_dos_error_0790_ret
23204     2D 00 64 FD | 	ret
23208                 | 
23208                 | _fatfs_cc_v_creat
23208     04 4A 05 F6 | 	mov	COUNT_, #4
2320c     A8 00 A0 FD | 	call	#pushregs_
23210     09 1F 02 F6 | 	mov	local01, arg01
23214     0A 21 02 F6 | 	mov	local02, arg02
23218     03 00 00 FF 
2321c     3C 12 06 F6 | 	mov	arg01, ##1596
23220                 | '     return _gc_alloc(size);
23220     10 14 06 F6 | 	mov	arg02, #16
23224     30 60 BF FD | 	call	#__system___gc_doalloc
23228     FD 22 0A F6 | 	mov	local03, result1 wz
2322c                 | '       return _seterror( 7 );
2322c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
23230     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
23234     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
23238     01 FA 65 A6 |  if_e	neg	result1, #1
2323c     58 00 90 AD |  if_e	jmp	#LR__3821
23240     11 13 02 F6 | 	mov	arg01, local03
23244     00 14 06 F6 | 	mov	arg02, #0
23248     03 00 00 FF 
2324c     3C 16 06 F6 | 	mov	arg03, ##1596
23250     98 00 A0 FD | 	call	#\builtin_bytefill_
23254     02 00 00 FF 
23258     14 22 06 F1 | 	add	local03, ##1044
2325c     11 13 02 F6 | 	mov	arg01, local03
23260     02 00 00 FF 
23264     14 22 86 F1 | 	sub	local03, ##1044
23268     10 15 02 F6 | 	mov	arg02, local02
2326c     07 16 06 F6 | 	mov	arg03, #7
23270     B4 CC BF FD | 	call	#_fatfs_cc_f_open
23274     FD 24 0A F6 | 	mov	local04, result1 wz
23278     14 00 90 AD |  if_e	jmp	#LR__3820
2327c     11 13 02 F6 | 	mov	arg01, local03
23280                 | '     return _gc_free(ptr);
23280     E0 60 BF FD | 	call	#__system___gc_free
23284                 | '     free(f);
23284                 | '     return _set_dos_error(r);
23284     12 13 02 F6 | 	mov	arg01, local04
23288     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0790
2328c     08 00 90 FD | 	jmp	#LR__3821
23290                 | LR__3820
23290     0F 23 62 FC | 	wrlong	local03, local01
23294                 | '   }
23294                 | '   fil->vfsdata = f;
23294                 | '   return 0;
23294     00 FA 05 F6 | 	mov	result1, #0
23298                 | LR__3821
23298     A7 F0 03 F6 | 	mov	ptra, fp
2329c     B2 00 A0 FD | 	call	#popregs_
232a0                 | _fatfs_cc_v_creat_ret
232a0     2D 00 64 FD | 	ret
232a4                 | 
232a4                 | _fatfs_cc_v_close
232a4     02 4A 05 F6 | 	mov	COUNT_, #2
232a8     A8 00 A0 FD | 	call	#pushregs_
232ac     09 1F 02 FB | 	rdlong	local01, arg01
232b0     02 00 00 FF 
232b4     14 1E 06 F1 | 	add	local01, ##1044
232b8     0F 13 02 F6 | 	mov	arg01, local01
232bc     02 00 00 FF 
232c0     14 1E 86 F1 | 	sub	local01, ##1044
232c4     DC E3 BF FD | 	call	#_fatfs_cc_f_close
232c8     FD 20 02 F6 | 	mov	local02, result1
232cc     0F 13 02 F6 | 	mov	arg01, local01
232d0                 | '     return _gc_free(ptr);
232d0     90 60 BF FD | 	call	#__system___gc_free
232d4                 | '     FAT_FIL *f = fil->vfsdata;
232d4                 | '     r=f_close(&f->fil);
232d4                 | '     free(f);
232d4                 | '     return _set_dos_error(r);
232d4     10 13 02 F6 | 	mov	arg01, local02
232d8     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0790
232dc     A7 F0 03 F6 | 	mov	ptra, fp
232e0     B2 00 A0 FD | 	call	#popregs_
232e4                 | _fatfs_cc_v_close_ret
232e4     2D 00 64 FD | 	ret
232e8                 | 
232e8                 | _fatfs_cc_v_opendir
232e8     04 4A 05 F6 | 	mov	COUNT_, #4
232ec     A8 00 A0 FD | 	call	#pushregs_
232f0     09 1F 02 F6 | 	mov	local01, arg01
232f4     0A 21 02 F6 | 	mov	local02, arg02
232f8     30 12 06 F6 | 	mov	arg01, #48
232fc                 | '     return _gc_alloc(size);
232fc     10 14 06 F6 | 	mov	arg02, #16
23300     54 5F BF FD | 	call	#__system___gc_doalloc
23304     FD 22 0A F6 | 	mov	local03, result1 wz
23308                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
23308                 | '       return _seterror( 7 );
23308     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
2330c     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
23310     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
23314     01 FA 65 A6 |  if_e	neg	result1, #1
23318     34 00 90 AD |  if_e	jmp	#LR__3831
2331c     10 15 02 F6 | 	mov	arg02, local02
23320     11 13 02 F6 | 	mov	arg01, local03
23324     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
23328     FD 24 0A F6 | 	mov	local04, result1 wz
2332c     14 00 90 AD |  if_e	jmp	#LR__3830
23330     11 13 02 F6 | 	mov	arg01, local03
23334                 | '     return _gc_free(ptr);
23334     2C 60 BF FD | 	call	#__system___gc_free
23338                 | '         free(f);
23338                 | '         return _set_dos_error(r);
23338     12 13 02 F6 | 	mov	arg01, local04
2333c     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0790
23340     0C 00 90 FD | 	jmp	#LR__3831
23344                 | LR__3830
23344     04 1E 06 F1 | 	add	local01, #4
23348     0F 23 62 FC | 	wrlong	local03, local01
2334c                 | '     }
2334c                 | '     dir->vfsdata = f;
2334c                 | '     return 0;
2334c     00 FA 05 F6 | 	mov	result1, #0
23350                 | LR__3831
23350     A7 F0 03 F6 | 	mov	ptra, fp
23354     B2 00 A0 FD | 	call	#popregs_
23358                 | _fatfs_cc_v_opendir_ret
23358     2D 00 64 FD | 	ret
2335c                 | 
2335c                 | _fatfs_cc_v_closedir
2335c     02 4A 05 F6 | 	mov	COUNT_, #2
23360     A8 00 A0 FD | 	call	#pushregs_
23364     04 12 06 F1 | 	add	arg01, #4
23368     09 1F 02 FB | 	rdlong	local01, arg01
2336c     0F 13 02 F6 | 	mov	arg01, local01
23370     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
23374     FD 20 02 F6 | 	mov	local02, result1
23378     0F 13 02 F6 | 	mov	arg01, local01
2337c                 | '     return _gc_free(ptr);
2337c     E4 5F BF FD | 	call	#__system___gc_free
23380     00 20 0E F2 | 	cmp	local02, #0 wz
23384     10 13 02 56 |  if_ne	mov	arg01, local02
23388     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0790
2338c                 | '     return r;
2338c     10 FB 01 F6 | 	mov	result1, local02
23390     A7 F0 03 F6 | 	mov	ptra, fp
23394     B2 00 A0 FD | 	call	#popregs_
23398                 | _fatfs_cc_v_closedir_ret
23398     2D 00 64 FD | 	ret
2339c                 | 
2339c                 | _fatfs_cc_v_readdir
2339c     01 4A 05 F6 | 	mov	COUNT_, #1
233a0     A8 00 A0 FD | 	call	#pushregs_
233a4     2C F1 07 F1 | 	add	ptra, #300
233a8     04 4E 05 F1 | 	add	fp, #4
233ac     A7 12 62 FC | 	wrlong	arg01, fp
233b0     04 4E 05 F1 | 	add	fp, #4
233b4     A7 14 62 FC | 	wrlong	arg02, fp
233b8     04 4E 85 F1 | 	sub	fp, #4
233bc     A7 16 02 FB | 	rdlong	arg03, fp
233c0     04 16 06 F1 | 	add	arg03, #4
233c4     0B 13 02 FB | 	rdlong	arg01, arg03
233c8     08 4E 05 F1 | 	add	fp, #8
233cc     A7 14 02 F6 | 	mov	arg02, fp
233d0     0C 4E 85 F1 | 	sub	fp, #12
233d4     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
233d8     28 4F 05 F1 | 	add	fp, #296
233dc     A7 FA 61 FC | 	wrlong	result1, fp
233e0     28 4F 85 F1 | 	sub	fp, #296
233e4     00 FA 0D F2 | 	cmp	result1, #0 wz
233e8     14 00 90 AD |  if_e	jmp	#LR__3840
233ec                 | '         return _set_dos_error(r);
233ec     28 4F 05 F1 | 	add	fp, #296
233f0     A7 12 02 FB | 	rdlong	arg01, fp
233f4     28 4F 85 F1 | 	sub	fp, #296
233f8     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0790
233fc     C4 00 90 FD | 	jmp	#LR__3843
23400                 | LR__3840
23400     28 4E 05 F1 | 	add	fp, #40
23404     A7 16 CA FA | 	rdbyte	arg03, fp wz
23408     28 4E 85 F1 | 	sub	fp, #40
2340c                 | '         return -1;
2340c     01 FA 65 A6 |  if_e	neg	result1, #1
23410     B0 00 90 AD |  if_e	jmp	#LR__3843
23414     08 4E 05 F1 | 	add	fp, #8
23418     A7 12 02 FB | 	rdlong	arg01, fp
2341c     20 4E 05 F1 | 	add	fp, #32
23420     A7 14 02 F6 | 	mov	arg02, fp
23424     28 4E 85 F1 | 	sub	fp, #40
23428     3F 16 06 F6 | 	mov	arg03, #63
2342c     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
23430     08 4E 05 F1 | 	add	fp, #8
23434     A7 16 02 FB | 	rdlong	arg03, fp
23438     3F 16 06 F1 | 	add	arg03, #63
2343c     0B 01 48 FC | 	wrbyte	#0, arg03
23440     0C 4E 05 F1 | 	add	fp, #12
23444     A7 16 C2 FA | 	rdbyte	arg03, fp
23448     14 4E 85 F1 | 	sub	fp, #20
2344c     10 16 CE F7 | 	test	arg03, #16 wz
23450     18 00 90 AD |  if_e	jmp	#LR__3841
23454     08 4E 05 F1 | 	add	fp, #8
23458     A7 16 02 FB | 	rdlong	arg03, fp
2345c     08 4E 85 F1 | 	sub	fp, #8
23460     50 16 06 F1 | 	add	arg03, #80
23464     0B 03 48 FC | 	wrbyte	#1, arg03
23468     14 00 90 FD | 	jmp	#LR__3842
2346c                 | LR__3841
2346c     08 4E 05 F1 | 	add	fp, #8
23470     A7 16 02 FB | 	rdlong	arg03, fp
23474     08 4E 85 F1 | 	sub	fp, #8
23478     50 16 06 F1 | 	add	arg03, #80
2347c     0B 01 48 FC | 	wrbyte	#0, arg03
23480                 | LR__3842
23480     08 4E 05 F1 | 	add	fp, #8
23484     A7 16 02 FB | 	rdlong	arg03, fp
23488     04 4E 05 F1 | 	add	fp, #4
2348c     A7 14 02 FB | 	rdlong	arg02, fp
23490     48 16 06 F1 | 	add	arg03, #72
23494     0B 15 62 FC | 	wrlong	arg02, arg03
23498     04 4E 85 F1 | 	sub	fp, #4
2349c     A7 1E 02 FB | 	rdlong	local01, fp
234a0     08 4E 05 F1 | 	add	fp, #8
234a4     A7 12 E2 FA | 	rdword	arg01, fp
234a8     02 4E 05 F1 | 	add	fp, #2
234ac     A7 14 E2 FA | 	rdword	arg02, fp
234b0     12 4E 85 F1 | 	sub	fp, #18
234b4     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0788
234b8     4C 1E 06 F1 | 	add	local01, #76
234bc     0F FB 61 FC | 	wrlong	result1, local01
234c0                 | '         ent->d_type =  (0) ;
234c0                 | '     }
234c0                 | '     ent->d_size = finfo.fsize;
234c0                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
234c0                 | '     return 0;
234c0     00 FA 05 F6 | 	mov	result1, #0
234c4                 | LR__3843
234c4     A7 F0 03 F6 | 	mov	ptra, fp
234c8     B2 00 A0 FD | 	call	#popregs_
234cc                 | _fatfs_cc_v_readdir_ret
234cc     2D 00 64 FD | 	ret
234d0                 | 
234d0                 | _fatfs_cc_v_stat
234d0     03 4A 05 F6 | 	mov	COUNT_, #3
234d4     A8 00 A0 FD | 	call	#pushregs_
234d8     30 F1 07 F1 | 	add	ptra, #304
234dc     04 4E 05 F1 | 	add	fp, #4
234e0     A7 12 62 FC | 	wrlong	arg01, fp
234e4     04 4E 05 F1 | 	add	fp, #4
234e8     A7 14 62 FC | 	wrlong	arg02, fp
234ec     08 4E 85 F1 | 	sub	fp, #8
234f0     0A 13 02 F6 | 	mov	arg01, arg02
234f4     00 14 06 F6 | 	mov	arg02, #0
234f8     30 16 06 F6 | 	mov	arg03, #48
234fc     98 00 A0 FD | 	call	#\builtin_bytefill_
23500     04 4E 05 F1 | 	add	fp, #4
23504     A7 FA 01 FB | 	rdlong	result1, fp
23508     04 4E 85 F1 | 	sub	fp, #4
2350c     FD FA C9 FA | 	rdbyte	result1, result1 wz
23510     2C 00 90 AD |  if_e	jmp	#LR__3850
23514     04 4E 05 F1 | 	add	fp, #4
23518     A7 FA 01 FB | 	rdlong	result1, fp
2351c     04 4E 85 F1 | 	sub	fp, #4
23520     FD FA C1 FA | 	rdbyte	result1, result1
23524     2E FA 0D F2 | 	cmp	result1, #46 wz
23528     04 4E 05 A1 |  if_e	add	fp, #4
2352c     A7 1E 02 AB |  if_e	rdlong	local01, fp
23530     04 4E 85 A1 |  if_e	sub	fp, #4
23534     01 1E 06 A1 |  if_e	add	local01, #1
23538     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
2353c     18 00 90 5D |  if_ne	jmp	#LR__3851
23540                 | LR__3850
23540     18 4E 05 F1 | 	add	fp, #24
23544     A7 20 48 FC | 	wrbyte	#16, fp
23548     0C 4E 85 F1 | 	sub	fp, #12
2354c     A7 00 68 FC | 	wrlong	#0, fp
23550     0C 4E 85 F1 | 	sub	fp, #12
23554     24 00 90 FD | 	jmp	#LR__3852
23558                 | LR__3851
23558     04 4E 05 F1 | 	add	fp, #4
2355c     A7 12 02 FB | 	rdlong	arg01, fp
23560     0C 4E 05 F1 | 	add	fp, #12
23564     A7 14 02 F6 | 	mov	arg02, fp
23568     10 4E 85 F1 | 	sub	fp, #16
2356c     AC EB BF FD | 	call	#_fatfs_cc_f_stat
23570     0C 4E 05 F1 | 	add	fp, #12
23574     A7 FA 61 FC | 	wrlong	result1, fp
23578     0C 4E 85 F1 | 	sub	fp, #12
2357c                 | LR__3852
2357c     0C 4E 05 F1 | 	add	fp, #12
23580     A7 20 0A FB | 	rdlong	local02, fp wz
23584     0C 4E 85 F1 | 	sub	fp, #12
23588     14 00 90 AD |  if_e	jmp	#LR__3853
2358c                 | '         return _set_dos_error(r);
2358c     0C 4E 05 F1 | 	add	fp, #12
23590     A7 12 02 FB | 	rdlong	arg01, fp
23594     0C 4E 85 F1 | 	sub	fp, #12
23598     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0790
2359c     14 01 90 FD | 	jmp	#LR__3854
235a0                 | LR__3853
235a0     2C 4F 05 F1 | 	add	fp, #300
235a4     A7 48 6A FC | 	wrlong	#292, fp
235a8     14 4F 85 F1 | 	sub	fp, #276
235ac     A7 22 C2 FA | 	rdbyte	local03, fp
235b0     18 4E 85 F1 | 	sub	fp, #24
235b4     01 22 CE F7 | 	test	local03, #1 wz
235b8     2C 4F 05 51 |  if_ne	add	fp, #300
235bc     A7 22 02 5B |  if_ne	rdlong	local03, fp
235c0     92 22 46 55 |  if_ne	or	local03, #146
235c4     A7 22 62 5C |  if_ne	wrlong	local03, fp
235c8     2C 4F 85 51 |  if_ne	sub	fp, #300
235cc     18 4E 05 F1 | 	add	fp, #24
235d0     A7 22 C2 FA | 	rdbyte	local03, fp
235d4     18 4E 85 F1 | 	sub	fp, #24
235d8     10 22 CE F7 | 	test	local03, #16 wz
235dc     2C 4F 05 51 |  if_ne	add	fp, #300
235e0     A7 22 02 5B |  if_ne	rdlong	local03, fp
235e4     08 00 00 5F 
235e8     49 22 46 55 |  if_ne	or	local03, ##4169
235ec     A7 22 62 5C |  if_ne	wrlong	local03, fp
235f0     2C 4F 85 51 |  if_ne	sub	fp, #300
235f4     08 4E 05 F1 | 	add	fp, #8
235f8     A7 22 02 FB | 	rdlong	local03, fp
235fc     24 4F 05 F1 | 	add	fp, #292
23600     A7 20 02 FB | 	rdlong	local02, fp
23604     08 22 06 F1 | 	add	local03, #8
23608     11 21 62 FC | 	wrlong	local02, local03
2360c     24 4F 85 F1 | 	sub	fp, #292
23610     A7 22 02 FB | 	rdlong	local03, fp
23614     0C 22 06 F1 | 	add	local03, #12
23618     11 03 68 FC | 	wrlong	#1, local03
2361c     A7 22 02 FB | 	rdlong	local03, fp
23620     08 4E 05 F1 | 	add	fp, #8
23624     A7 20 02 FB | 	rdlong	local02, fp
23628     18 22 06 F1 | 	add	local03, #24
2362c     11 21 62 FC | 	wrlong	local02, local03
23630     08 4E 85 F1 | 	sub	fp, #8
23634     A7 22 02 FB | 	rdlong	local03, fp
23638     1C 22 06 F1 | 	add	local03, #28
2363c     01 00 80 FF 
23640     11 01 68 FC | 	wrlong	##512, local03
23644     A7 20 02 FB | 	rdlong	local02, fp
23648     10 23 02 F6 | 	mov	local03, local02
2364c     18 20 06 F1 | 	add	local02, #24
23650     10 21 02 FB | 	rdlong	local02, local02
23654     FF 21 06 F1 | 	add	local02, #511
23658     10 21 52 F6 | 	abs	local02, local02 wc
2365c     09 20 46 F0 | 	shr	local02, #9
23660     10 21 82 F6 | 	negc	local02, local02
23664     20 22 06 F1 | 	add	local03, #32
23668     11 21 62 FC | 	wrlong	local02, local03
2366c     A7 20 02 FB | 	rdlong	local02, fp
23670     10 23 02 F6 | 	mov	local03, local02
23674     10 1F 02 F6 | 	mov	local01, local02
23678     0C 4E 05 F1 | 	add	fp, #12
2367c     A7 12 E2 FA | 	rdword	arg01, fp
23680     02 4E 05 F1 | 	add	fp, #2
23684     A7 14 E2 FA | 	rdword	arg02, fp
23688     16 4E 85 F1 | 	sub	fp, #22
2368c     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0788
23690     2C 1E 06 F1 | 	add	local01, #44
23694     0F FB 61 FC | 	wrlong	result1, local01
23698     28 20 06 F1 | 	add	local02, #40
2369c     10 FB 61 FC | 	wrlong	result1, local02
236a0     24 22 06 F1 | 	add	local03, #36
236a4     11 FB 61 FC | 	wrlong	result1, local03
236a8                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
236a8                 | '     }
236a8                 | '     buf->st_mode = mode;
236a8                 | '     buf->st_nlink = 1;
236a8                 | '     buf->st_size = finfo.fsize;
236a8                 | '     buf->st_blksize = 512;
236a8                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
236a8                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
236a8                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
236a8                 | '     return r;
236a8     0C 4E 05 F1 | 	add	fp, #12
236ac     A7 FA 01 FB | 	rdlong	result1, fp
236b0     0C 4E 85 F1 | 	sub	fp, #12
236b4                 | LR__3854
236b4     A7 F0 03 F6 | 	mov	ptra, fp
236b8     B2 00 A0 FD | 	call	#popregs_
236bc                 | _fatfs_cc_v_stat_ret
236bc     2D 00 64 FD | 	ret
236c0                 | 
236c0                 | _fatfs_cc_v_read
236c0     00 4A 05 F6 | 	mov	COUNT_, #0
236c4     A8 00 A0 FD | 	call	#pushregs_
236c8     1C F0 07 F1 | 	add	ptra, #28
236cc     04 4E 05 F1 | 	add	fp, #4
236d0     A7 12 62 FC | 	wrlong	arg01, fp
236d4     04 4E 05 F1 | 	add	fp, #4
236d8     A7 14 62 FC | 	wrlong	arg02, fp
236dc     04 4E 05 F1 | 	add	fp, #4
236e0     A7 16 62 FC | 	wrlong	arg03, fp
236e4     08 4E 85 F1 | 	sub	fp, #8
236e8     A7 12 02 FB | 	rdlong	arg01, fp
236ec     09 13 0A FB | 	rdlong	arg01, arg01 wz
236f0     0C 4E 05 F1 | 	add	fp, #12
236f4     A7 12 62 FC | 	wrlong	arg01, fp
236f8     10 4E 85 F1 | 	sub	fp, #16
236fc                 | '         return _seterror( 5 );
236fc     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
23700     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
23704     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
23708     01 FA 65 A6 |  if_e	neg	result1, #1
2370c     B8 00 90 AD |  if_e	jmp	#LR__3862
23710     10 4E 05 F1 | 	add	fp, #16
23714     A7 12 02 FB | 	rdlong	arg01, fp
23718     02 00 00 FF 
2371c     14 12 06 F1 | 	add	arg01, ##1044
23720     08 4E 85 F1 | 	sub	fp, #8
23724     A7 14 02 FB | 	rdlong	arg02, fp
23728     04 4E 05 F1 | 	add	fp, #4
2372c     A7 16 02 FB | 	rdlong	arg03, fp
23730     0C 4E 05 F1 | 	add	fp, #12
23734     A7 18 02 F6 | 	mov	arg04, fp
23738     18 4E 85 F1 | 	sub	fp, #24
2373c     C4 CE BF FD | 	call	#_fatfs_cc_f_read
23740     14 4E 05 F1 | 	add	fp, #20
23744     A7 FA 61 FC | 	wrlong	result1, fp
23748     14 4E 85 F1 | 	sub	fp, #20
2374c     00 FA 0D F2 | 	cmp	result1, #0 wz
23750     34 00 90 AD |  if_e	jmp	#LR__3860
23754     04 4E 05 F1 | 	add	fp, #4
23758     A7 18 02 FB | 	rdlong	arg04, fp
2375c     0C 17 02 F6 | 	mov	arg03, arg04
23760     08 18 06 F1 | 	add	arg04, #8
23764     0C 19 02 FB | 	rdlong	arg04, arg04
23768     20 18 46 F5 | 	or	arg04, #32
2376c     08 16 06 F1 | 	add	arg03, #8
23770     0B 19 62 FC | 	wrlong	arg04, arg03
23774                 | '         fil->state |=  (0x20) ;
23774                 | '         return _set_dos_error(r);
23774     10 4E 05 F1 | 	add	fp, #16
23778     A7 12 02 FB | 	rdlong	arg01, fp
2377c     14 4E 85 F1 | 	sub	fp, #20
23780     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0790
23784     40 00 90 FD | 	jmp	#LR__3862
23788                 | LR__3860
23788     18 4E 05 F1 | 	add	fp, #24
2378c     A7 FA 09 FB | 	rdlong	result1, fp wz
23790     18 4E 85 F1 | 	sub	fp, #24
23794     24 00 90 5D |  if_ne	jmp	#LR__3861
23798     04 4E 05 F1 | 	add	fp, #4
2379c     A7 FA 01 FB | 	rdlong	result1, fp
237a0     FD 18 02 F6 | 	mov	arg04, result1
237a4     04 4E 85 F1 | 	sub	fp, #4
237a8     08 FA 05 F1 | 	add	result1, #8
237ac     FD FA 01 FB | 	rdlong	result1, result1
237b0     10 FA 45 F5 | 	or	result1, #16
237b4     08 18 06 F1 | 	add	arg04, #8
237b8     0C FB 61 FC | 	wrlong	result1, arg04
237bc                 | LR__3861
237bc                 | '         fil->state |=  (0x10) ;
237bc                 | '     }
237bc                 | '     return x;
237bc     18 4E 05 F1 | 	add	fp, #24
237c0     A7 FA 01 FB | 	rdlong	result1, fp
237c4     18 4E 85 F1 | 	sub	fp, #24
237c8                 | LR__3862
237c8     A7 F0 03 F6 | 	mov	ptra, fp
237cc     B2 00 A0 FD | 	call	#popregs_
237d0                 | _fatfs_cc_v_read_ret
237d0     2D 00 64 FD | 	ret
237d4                 | 
237d4                 | _fatfs_cc_v_write
237d4     00 4A 05 F6 | 	mov	COUNT_, #0
237d8     A8 00 A0 FD | 	call	#pushregs_
237dc     1C F0 07 F1 | 	add	ptra, #28
237e0     04 4E 05 F1 | 	add	fp, #4
237e4     A7 12 62 FC | 	wrlong	arg01, fp
237e8     04 4E 05 F1 | 	add	fp, #4
237ec     A7 14 62 FC | 	wrlong	arg02, fp
237f0     04 4E 05 F1 | 	add	fp, #4
237f4     A7 16 62 FC | 	wrlong	arg03, fp
237f8     08 4E 85 F1 | 	sub	fp, #8
237fc     A7 12 02 FB | 	rdlong	arg01, fp
23800     09 13 0A FB | 	rdlong	arg01, arg01 wz
23804     0C 4E 05 F1 | 	add	fp, #12
23808     A7 12 62 FC | 	wrlong	arg01, fp
2380c     10 4E 85 F1 | 	sub	fp, #16
23810                 | '         return _seterror( 5 );
23810     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
23814     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
23818     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
2381c     01 FA 65 A6 |  if_e	neg	result1, #1
23820     84 00 90 AD |  if_e	jmp	#LR__3871
23824     10 4E 05 F1 | 	add	fp, #16
23828     A7 12 02 FB | 	rdlong	arg01, fp
2382c     02 00 00 FF 
23830     14 12 06 F1 | 	add	arg01, ##1044
23834     08 4E 85 F1 | 	sub	fp, #8
23838     A7 14 02 FB | 	rdlong	arg02, fp
2383c     04 4E 05 F1 | 	add	fp, #4
23840     A7 16 02 FB | 	rdlong	arg03, fp
23844     0C 4E 05 F1 | 	add	fp, #12
23848     A7 18 02 F6 | 	mov	arg04, fp
2384c     18 4E 85 F1 | 	sub	fp, #24
23850     4C D4 BF FD | 	call	#_fatfs_cc_f_write
23854     14 4E 05 F1 | 	add	fp, #20
23858     A7 FA 61 FC | 	wrlong	result1, fp
2385c     14 4E 85 F1 | 	sub	fp, #20
23860     00 FA 0D F2 | 	cmp	result1, #0 wz
23864     34 00 90 AD |  if_e	jmp	#LR__3870
23868     04 4E 05 F1 | 	add	fp, #4
2386c     A7 18 02 FB | 	rdlong	arg04, fp
23870     0C 17 02 F6 | 	mov	arg03, arg04
23874     08 18 06 F1 | 	add	arg04, #8
23878     0C 19 02 FB | 	rdlong	arg04, arg04
2387c     20 18 46 F5 | 	or	arg04, #32
23880     08 16 06 F1 | 	add	arg03, #8
23884     0B 19 62 FC | 	wrlong	arg04, arg03
23888                 | '         fil->state |=  (0x20) ;
23888                 | '         return _set_dos_error(r);
23888     10 4E 05 F1 | 	add	fp, #16
2388c     A7 12 02 FB | 	rdlong	arg01, fp
23890     14 4E 85 F1 | 	sub	fp, #20
23894     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0790
23898     0C 00 90 FD | 	jmp	#LR__3871
2389c                 | LR__3870
2389c                 | '     }
2389c                 | '     return x;
2389c     18 4E 05 F1 | 	add	fp, #24
238a0     A7 FA 01 FB | 	rdlong	result1, fp
238a4     18 4E 85 F1 | 	sub	fp, #24
238a8                 | LR__3871
238a8     A7 F0 03 F6 | 	mov	ptra, fp
238ac     B2 00 A0 FD | 	call	#popregs_
238b0                 | _fatfs_cc_v_write_ret
238b0     2D 00 64 FD | 	ret
238b4                 | 
238b4                 | _fatfs_cc_v_lseek
238b4     04 4A 05 F6 | 	mov	COUNT_, #4
238b8     A8 00 A0 FD | 	call	#pushregs_
238bc     0A 1F 02 F6 | 	mov	local01, arg02
238c0     0B 21 02 F6 | 	mov	local02, arg03
238c4     09 23 02 FB | 	rdlong	local03, arg01
238c8     02 00 00 FF 
238cc     14 22 0E F1 | 	add	local03, ##1044 wz
238d0                 | '         return _seterror( 5 );
238d0     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
238d4     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
238d8     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
238dc     01 FA 65 A6 |  if_e	neg	result1, #1
238e0     4C 00 90 AD |  if_e	jmp	#LR__3882
238e4     00 20 0E F2 | 	cmp	local02, #0 wz
238e8     24 00 90 AD |  if_e	jmp	#LR__3880
238ec     01 20 0E F2 | 	cmp	local02, #1 wz
238f0     14 22 06 A1 |  if_e	add	local03, #20
238f4     11 25 02 AB |  if_e	rdlong	local04, local03
238f8     14 22 86 A1 |  if_e	sub	local03, #20
238fc     12 1F 02 A1 |  if_e	add	local01, local04
23900     0C 22 06 51 |  if_ne	add	local03, #12
23904     11 25 02 5B |  if_ne	rdlong	local04, local03
23908     0C 22 86 51 |  if_ne	sub	local03, #12
2390c     12 1F 02 51 |  if_ne	add	local01, local04
23910                 | LR__3880
23910     0F 15 02 F6 | 	mov	arg02, local01
23914     11 13 02 F6 | 	mov	arg01, local03
23918     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
2391c     FD 12 0A F6 | 	mov	arg01, result1 wz
23920     08 00 90 AD |  if_e	jmp	#LR__3881
23924                 | '         return _set_dos_error(result);
23924     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0790
23928     04 00 90 FD | 	jmp	#LR__3882
2392c                 | LR__3881
2392c                 | '     }
2392c                 | '     return offset;
2392c     0F FB 01 F6 | 	mov	result1, local01
23930                 | LR__3882
23930     A7 F0 03 F6 | 	mov	ptra, fp
23934     B2 00 A0 FD | 	call	#popregs_
23938                 | _fatfs_cc_v_lseek_ret
23938     2D 00 64 FD | 	ret
2393c                 | 
2393c                 | _fatfs_cc_v_ioctl
2393c                 | ' {
2393c                 | '     return _seterror( 10 );
2393c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
23940     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
23944     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
23948     01 FA 65 F6 | 	neg	result1, #1
2394c                 | _fatfs_cc_v_ioctl_ret
2394c     2D 00 64 FD | 	ret
23950                 | 
23950                 | _fatfs_cc_v_mkdir
23950     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
23954     FD 12 02 F6 | 	mov	arg01, result1
23958                 | ' 
23958                 | '     r = f_mkdir(name);
23958                 | '     return _set_dos_error(r);
23958     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0790
2395c                 | _fatfs_cc_v_mkdir_ret
2395c     2D 00 64 FD | 	ret
23960                 | 
23960                 | _fatfs_cc_v_remove
23960     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
23964     FD 12 02 F6 | 	mov	arg01, result1
23968                 | ' 
23968                 | '     r = f_unlink(name);
23968                 | '     return _set_dos_error(r);
23968     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0790
2396c                 | _fatfs_cc_v_remove_ret
2396c     2D 00 64 FD | 	ret
23970                 | 
23970                 | _fatfs_cc_v_rmdir
23970     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
23974     FD 12 02 F6 | 	mov	arg01, result1
23978                 | ' 
23978                 | '     r = f_unlink(name);
23978                 | '     return _set_dos_error(r);
23978     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0790
2397c                 | _fatfs_cc_v_rmdir_ret
2397c     2D 00 64 FD | 	ret
23980                 | 
23980                 | _fatfs_cc_v_rename
23980     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
23984     FD 12 02 F6 | 	mov	arg01, result1
23988                 | '     return _set_dos_error(r);
23988     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0790
2398c                 | _fatfs_cc_v_rename_ret
2398c     2D 00 64 FD | 	ret
23990                 | 
23990                 | _fatfs_cc_v_open
23990     07 4A 05 F6 | 	mov	COUNT_, #7
23994     A8 00 A0 FD | 	call	#pushregs_
23998     09 1F 02 F6 | 	mov	local01, arg01
2399c     0A 21 02 F6 | 	mov	local02, arg02
239a0     0B 23 02 F6 | 	mov	local03, arg03
239a4     03 00 00 FF 
239a8     3C 12 06 F6 | 	mov	arg01, ##1596
239ac                 | '     return _gc_alloc(size);
239ac     10 14 06 F6 | 	mov	arg02, #16
239b0     A4 58 BF FD | 	call	#__system___gc_doalloc
239b4     FD 24 0A F6 | 	mov	local04, result1 wz
239b8                 | '       return _seterror( 7 );
239b8     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
239bc     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
239c0     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
239c4     01 FA 65 A6 |  if_e	neg	result1, #1
239c8     98 00 90 AD |  if_e	jmp	#LR__3896
239cc     12 13 02 F6 | 	mov	arg01, local04
239d0     00 14 06 F6 | 	mov	arg02, #0
239d4     03 00 00 FF 
239d8     3C 16 06 F6 | 	mov	arg03, ##1596
239dc     98 00 A0 FD | 	call	#\builtin_bytefill_
239e0                 | '   switch (flags & 3) {
239e0     11 27 02 F6 | 	mov	local05, local03
239e4     03 26 0E F5 | 	and	local05, #3 wz
239e8     0C 00 90 AD |  if_e	jmp	#LR__3890
239ec     01 26 0E F2 | 	cmp	local05, #1 wz
239f0     0C 00 90 AD |  if_e	jmp	#LR__3891
239f4     10 00 90 FD | 	jmp	#LR__3892
239f8                 | LR__3890
239f8     01 28 06 F6 | 	mov	local06, #1
239fc                 | '       fs_flags =  0x01 ;
239fc                 | '       break;
239fc     0C 00 90 FD | 	jmp	#LR__3893
23a00                 | LR__3891
23a00     02 28 06 F6 | 	mov	local06, #2
23a04                 | '       fs_flags =  0x02 ;
23a04                 | '       break;
23a04     04 00 90 FD | 	jmp	#LR__3893
23a08                 | LR__3892
23a08     03 28 06 F6 | 	mov	local06, #3
23a0c                 | '       fs_flags =  0x01  |  0x02 ;
23a0c                 | '       break;
23a0c                 | LR__3893
23a0c     08 22 CE F7 | 	test	local03, #8 wz
23a10     18 28 46 55 |  if_ne	or	local06, #24
23a14     08 00 90 5D |  if_ne	jmp	#LR__3894
23a18     20 22 CE F7 | 	test	local03, #32 wz
23a1c     30 28 46 55 |  if_ne	or	local06, #48
23a20                 | LR__3894
23a20     02 00 00 FF 
23a24     14 24 06 F1 | 	add	local04, ##1044
23a28     12 13 02 F6 | 	mov	arg01, local04
23a2c     02 00 00 FF 
23a30     14 24 86 F1 | 	sub	local04, ##1044
23a34     10 15 02 F6 | 	mov	arg02, local02
23a38     14 17 02 F6 | 	mov	arg03, local06
23a3c     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
23a40     FD 2A 0A F6 | 	mov	local07, result1 wz
23a44     14 00 90 AD |  if_e	jmp	#LR__3895
23a48     12 13 02 F6 | 	mov	arg01, local04
23a4c                 | '     return _gc_free(ptr);
23a4c     14 59 BF FD | 	call	#__system___gc_free
23a50                 | '     free(f);
23a50                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
23a50                 | '     return _set_dos_error(r);
23a50     15 13 02 F6 | 	mov	arg01, local07
23a54     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0790
23a58     08 00 90 FD | 	jmp	#LR__3896
23a5c                 | LR__3895
23a5c     0F 25 62 FC | 	wrlong	local04, local01
23a60                 | '   }
23a60                 | '   fil->vfsdata = f;
23a60                 | '   return 0;
23a60     00 FA 05 F6 | 	mov	result1, #0
23a64                 | LR__3896
23a64     A7 F0 03 F6 | 	mov	ptra, fp
23a68     B2 00 A0 FD | 	call	#popregs_
23a6c                 | _fatfs_cc_v_open_ret
23a6c     2D 00 64 FD | 	ret
23a70                 | 
23a70                 | _fatfs_cc_v_flush
23a70     09 13 02 FB | 	rdlong	arg01, arg01
23a74     02 00 00 FF 
23a78     14 12 0E F1 | 	add	arg01, ##1044 wz
23a7c                 | '         return _seterror( 5 );
23a7c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
23a80     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
23a84     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
23a88     01 FA 65 A6 |  if_e	neg	result1, #1
23a8c     0C 00 90 AD |  if_e	jmp	#LR__3900
23a90     00 DA BF FD | 	call	#_fatfs_cc_f_sync
23a94     FD 12 02 F6 | 	mov	arg01, result1
23a98                 | '     }
23a98                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
23a98                 | '     result = f_sync(f);
23a98                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
23a98                 | '     return _set_dos_error(result);
23a98     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0790
23a9c                 | LR__3900
23a9c                 | _fatfs_cc_v_flush_ret
23a9c     2D 00 64 FD | 	ret
23aa0                 | 
23aa0                 | _fatfs_cc_v_init
23aa0                 | ' {
23aa0                 | '     return 0;
23aa0     00 FA 05 F6 | 	mov	result1, #0
23aa4                 | _fatfs_cc_v_init_ret
23aa4     2D 00 64 FD | 	ret
23aa8                 | 
23aa8                 | _fatfs_cc_v_deinit
23aa8     25 01 00 FF 
23aac     18 14 06 F6 | 	mov	arg02, ##@LR__4096
23ab0     00 12 06 F6 | 	mov	arg01, #0
23ab4     00 16 06 F6 | 	mov	arg03, #0
23ab8     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
23abc     01 00 00 FF 
23ac0     08 E4 05 F1 | 	add	objptr, ##520
23ac4     F2 12 02 FB | 	rdlong	arg01, objptr
23ac8     04 E4 05 F1 | 	add	objptr, #4
23acc     F2 14 02 FB | 	rdlong	arg02, objptr
23ad0     01 00 00 FF 
23ad4     0C E4 85 F1 | 	sub	objptr, ##524
23ad8     A4 43 BF FD | 	call	#__system___freepins
23adc                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
23adc                 | '     _freepins(f_pinmask);
23adc                 | '     return 0;
23adc     00 FA 05 F6 | 	mov	result1, #0
23ae0                 | _fatfs_cc_v_deinit_ret
23ae0     2D 00 64 FD | 	ret
23ae4                 | 
23ae4                 | _fatfs_cc_get_vfs
23ae4     01 4A 05 F6 | 	mov	COUNT_, #1
23ae8     A8 00 A0 FD | 	call	#pushregs_
23aec     09 1F 02 F6 | 	mov	local01, arg01
23af0     50 12 06 F6 | 	mov	arg01, #80
23af4     30 57 BF FD | 	call	#__system___gc_alloc_managed
23af8     FD 12 02 F6 | 	mov	arg01, result1
23afc     F2 FA 01 F6 | 	mov	result1, objptr
23b00     00 18 03 FF 
23b04     00 FA 45 F5 | 	or	result1, ##103809024
23b08     09 FB 61 FC | 	wrlong	result1, arg01
23b0c     F2 FA 01 F6 | 	mov	result1, objptr
23b10     00 20 03 FF 
23b14     00 FA 45 F5 | 	or	result1, ##104857600
23b18     04 12 06 F1 | 	add	arg01, #4
23b1c     09 FB 61 FC | 	wrlong	result1, arg01
23b20     F2 FA 01 F6 | 	mov	result1, objptr
23b24     00 28 03 FF 
23b28     00 FA 45 F5 | 	or	result1, ##105906176
23b2c     04 12 06 F1 | 	add	arg01, #4
23b30     09 FB 61 FC | 	wrlong	result1, arg01
23b34     F2 FA 01 F6 | 	mov	result1, objptr
23b38     00 30 03 FF 
23b3c     00 FA 45 F5 | 	or	result1, ##106954752
23b40     04 12 06 F1 | 	add	arg01, #4
23b44     09 FB 61 FC | 	wrlong	result1, arg01
23b48     F2 FA 01 F6 | 	mov	result1, objptr
23b4c     00 38 03 FF 
23b50     00 FA 45 F5 | 	or	result1, ##108003328
23b54     04 12 06 F1 | 	add	arg01, #4
23b58     09 FB 61 FC | 	wrlong	result1, arg01
23b5c     04 12 06 F1 | 	add	arg01, #4
23b60     09 01 68 FC | 	wrlong	#0, arg01
23b64     04 12 06 F1 | 	add	arg01, #4
23b68     09 1F 62 FC | 	wrlong	local01, arg01
23b6c     04 12 06 F1 | 	add	arg01, #4
23b70     09 01 68 FC | 	wrlong	#0, arg01
23b74     F2 FA 01 F6 | 	mov	result1, objptr
23b78     00 40 03 FF 
23b7c     00 FA 45 F5 | 	or	result1, ##109051904
23b80     04 12 06 F1 | 	add	arg01, #4
23b84     09 FB 61 FC | 	wrlong	result1, arg01
23b88     F2 FA 01 F6 | 	mov	result1, objptr
23b8c     00 48 03 FF 
23b90     00 FA 45 F5 | 	or	result1, ##110100480
23b94     04 12 06 F1 | 	add	arg01, #4
23b98     09 FB 61 FC | 	wrlong	result1, arg01
23b9c     F2 FA 01 F6 | 	mov	result1, objptr
23ba0     00 50 03 FF 
23ba4     00 FA 45 F5 | 	or	result1, ##111149056
23ba8     04 12 06 F1 | 	add	arg01, #4
23bac     09 FB 61 FC | 	wrlong	result1, arg01
23bb0     F2 FA 01 F6 | 	mov	result1, objptr
23bb4     00 58 03 FF 
23bb8     00 FA 45 F5 | 	or	result1, ##112197632
23bbc     04 12 06 F1 | 	add	arg01, #4
23bc0     09 FB 61 FC | 	wrlong	result1, arg01
23bc4     F2 FA 01 F6 | 	mov	result1, objptr
23bc8     00 60 03 FF 
23bcc     00 FA 45 F5 | 	or	result1, ##113246208
23bd0     04 12 06 F1 | 	add	arg01, #4
23bd4     09 FB 61 FC | 	wrlong	result1, arg01
23bd8     F2 FA 01 F6 | 	mov	result1, objptr
23bdc     00 68 03 FF 
23be0     00 FA 45 F5 | 	or	result1, ##114294784
23be4     04 12 06 F1 | 	add	arg01, #4
23be8     09 FB 61 FC | 	wrlong	result1, arg01
23bec     F2 FA 01 F6 | 	mov	result1, objptr
23bf0     00 70 03 FF 
23bf4     00 FA 45 F5 | 	or	result1, ##115343360
23bf8     04 12 06 F1 | 	add	arg01, #4
23bfc     09 FB 61 FC | 	wrlong	result1, arg01
23c00     F2 FA 01 F6 | 	mov	result1, objptr
23c04     00 78 03 FF 
23c08     00 FA 45 F5 | 	or	result1, ##116391936
23c0c     04 12 06 F1 | 	add	arg01, #4
23c10     09 FB 61 FC | 	wrlong	result1, arg01
23c14     F2 FA 01 F6 | 	mov	result1, objptr
23c18     58 FA 25 F4 | 	bith	result1, #88
23c1c     04 12 06 F1 | 	add	arg01, #4
23c20     09 FB 61 FC | 	wrlong	result1, arg01
23c24     F2 FA 01 F6 | 	mov	result1, objptr
23c28     00 88 03 FF 
23c2c     00 FA 45 F5 | 	or	result1, ##118489088
23c30     04 12 06 F1 | 	add	arg01, #4
23c34     09 FB 61 FC | 	wrlong	result1, arg01
23c38     F2 FA 01 F6 | 	mov	result1, objptr
23c3c     00 90 03 FF 
23c40     00 FA 45 F5 | 	or	result1, ##119537664
23c44     04 12 06 F1 | 	add	arg01, #4
23c48     09 FB 61 FC | 	wrlong	result1, arg01
23c4c     F2 FA 01 F6 | 	mov	result1, objptr
23c50     00 98 03 FF 
23c54     00 FA 45 F5 | 	or	result1, ##120586240
23c58     04 12 06 F1 | 	add	arg01, #4
23c5c     09 FB 61 FC | 	wrlong	result1, arg01
23c60     4C 12 86 F1 | 	sub	arg01, #76
23c64                 | ' 
23c64                 | '     v->close = &v_close;
23c64                 | '     v->read = &v_read;
23c64                 | '     v->write = &v_write;
23c64                 | '     v->lseek = &v_lseek;
23c64                 | '     v->ioctl = &v_ioctl;
23c64                 | '     v->flush = 0;
23c64                 | '     v->vfs_data = ptr;
23c64                 | '     v->reserved = 0;
23c64                 | ' 
23c64                 | '     v->open = &v_open;
23c64                 | '     v->creat = &v_creat;
23c64                 | '     v->opendir = &v_opendir;
23c64                 | '     v->closedir = &v_closedir;
23c64                 | '     v->readdir = &v_readdir;
23c64                 | '     v->stat = &v_stat;
23c64                 | ' 
23c64                 | '     v->mkdir = &v_mkdir;
23c64                 | '     v->rmdir = &v_rmdir;
23c64                 | ' 
23c64                 | '     v->remove = &v_remove;
23c64                 | '     v->rename = &v_rename;
23c64                 | ' 
23c64                 | '     v->init = &v_init;
23c64                 | '     v->deinit = &v_deinit;
23c64                 | ' 
23c64                 | '     return v;
23c64     09 FB 01 F6 | 	mov	result1, arg01
23c68     A7 F0 03 F6 | 	mov	ptra, fp
23c6c     B2 00 A0 FD | 	call	#popregs_
23c70                 | _fatfs_cc_get_vfs_ret
23c70     2D 00 64 FD | 	ret
23c74                 | 
23c74                 | _fatfs_cc_xmit_mmc_0937
23c74     01 00 00 FF 
23c78     10 E4 05 F1 | 	add	objptr, ##528
23c7c     F2 00 02 FB | 	rdlong	_var01, objptr
23c80     08 E4 05 F1 | 	add	objptr, #8
23c84     F2 02 02 FB | 	rdlong	_var02, objptr
23c88     01 00 00 FF 
23c8c     18 E4 85 F1 | 	sub	objptr, ##536
23c90     40 02 62 FD | 	dirl	_var02
23c94     28 02 64 FD | 	setq	#1
23c98     09 05 02 FB | 	rdlong	_var03, arg01
23c9c     69 04 62 FD | 	rev	_var03
23ca0     1B 04 FE F9 | 	movbyts	_var03, #27
23ca4     01 05 22 FC | 	wypin	_var03, _var02
23ca8     0A 05 02 F6 | 	mov	_var03, arg02
23cac     02 14 4E F0 | 	shr	arg02, #2 wz
23cb0     03 04 66 F0 | 	shl	_var03, #3
23cb4     00 05 22 FC | 	wypin	_var03, _var01
23cb8     41 02 62 FD | 	dirh	_var02
23cbc     08 12 06 F1 | 	add	arg01, #8
23cc0     69 06 62 FD | 	rev	_var04
23cc4     1B 06 FE F9 | 	movbyts	_var04, #27
23cc8                 | LR__3910
23cc8     01 07 22 5C |  if_ne	wypin	_var04, _var02
23ccc     09 07 02 5B |  if_ne	rdlong	_var04, arg01
23cd0     04 12 06 51 |  if_ne	add	arg01, #4
23cd4     69 06 62 5D |  if_ne	rev	_var04
23cd8     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
23cdc                 | LR__3911
23cdc     40 02 72 5D |  if_ne	testp	_var02 wc
23ce0     F8 FF 9F 1D |  if_a	jmp	#LR__3911
23ce4     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__3910
23ce8                 | LR__3912
23ce8     40 00 72 FD | 	testp	_var01 wc
23cec     F8 FF 9F 3D |  if_ae	jmp	#LR__3912
23cf0     40 02 62 FD | 	dirl	_var02
23cf4     FF FF FF FF 
23cf8     01 FF 2B FC | 	wypin	##-1, _var02
23cfc     41 02 62 FD | 	dirh	_var02
23d00                 | _fatfs_cc_xmit_mmc_0937_ret
23d00     2D 00 64 FD | 	ret
23d04                 | 
23d04                 | _fatfs_cc_rcvr_mmc_0944
23d04     01 00 00 FF 
23d08     10 E4 05 F1 | 	add	objptr, ##528
23d0c     F2 00 02 FB | 	rdlong	_var01, objptr
23d10     0C E4 05 F1 | 	add	objptr, #12
23d14     F2 02 02 FB | 	rdlong	_var02, objptr
23d18     01 00 00 FF 
23d1c     1C E4 85 F1 | 	sub	objptr, ##540
23d20     01 03 08 FC | 	akpin	_var02
23d24     0A 05 0A F6 | 	mov	_var03, arg02 wz
23d28     02 04 4E F0 | 	shr	_var03, #2 wz
23d2c     30 00 90 AD |  if_e	jmp	#LR__3922
23d30     02 07 02 F6 | 	mov	_var04, _var03
23d34     05 06 66 F0 | 	shl	_var04, #5
23d38     00 07 22 FC | 	wypin	_var04, _var01
23d3c     01 7F 18 FC | 	wxpin	#63, _var02
23d40                 | LR__3920
23d40                 | LR__3921
23d40     40 02 72 FD | 	testp	_var02 wc
23d44     F8 FF 9F 3D |  if_ae	jmp	#LR__3921
23d48     01 07 8A FA | 	rdpin	_var04, _var02
23d4c     69 06 62 FD | 	rev	_var04
23d50     1B 06 FE F9 | 	movbyts	_var04, #27
23d54     09 07 62 FC | 	wrlong	_var04, arg01
23d58     04 12 06 F1 | 	add	arg01, #4
23d5c     F8 05 6E FB | 	djnz	_var03, #LR__3920
23d60                 | LR__3922
23d60     03 14 0E F5 | 	and	arg02, #3 wz
23d64     24 00 90 AD |  if_e	jmp	#LR__3925
23d68     01 4F 18 FC | 	wxpin	#39, _var02
23d6c                 | LR__3923
23d6c     00 11 28 FC | 	wypin	#8, _var01
23d70                 | LR__3924
23d70     40 02 72 FD | 	testp	_var02 wc
23d74     F8 FF 9F 3D |  if_ae	jmp	#LR__3924
23d78     01 07 8A FA | 	rdpin	_var04, _var02
23d7c     69 06 62 FD | 	rev	_var04
23d80     09 07 42 FC | 	wrbyte	_var04, arg01
23d84     01 12 06 F1 | 	add	arg01, #1
23d88     F8 15 6E FB | 	djnz	arg02, #LR__3923
23d8c                 | LR__3925
23d8c                 | _fatfs_cc_rcvr_mmc_0944_ret
23d8c     2D 00 64 FD | 	ret
23d90                 | 
23d90                 | _fatfs_cc_wait_ready_0948
23d90     01 4A 05 F6 | 	mov	COUNT_, #1
23d94     A8 00 A0 FD | 	call	#pushregs_
23d98     10 F0 07 F1 | 	add	ptra, #16
23d9c     1A FA 61 FD | 	getct	result1
23da0     08 4E 05 F1 | 	add	fp, #8
23da4     A7 FA 61 FC | 	wrlong	result1, fp
23da8     14 1E 06 FB | 	rdlong	local01, #20
23dac     01 1E 46 F0 | 	shr	local01, #1
23db0     04 4E 05 F1 | 	add	fp, #4
23db4     A7 1E 62 FC | 	wrlong	local01, fp
23db8     0C 4E 85 F1 | 	sub	fp, #12
23dbc                 | ' {
23dbc                 | ' 	BYTE d;
23dbc                 | ' 	UINT tmr, tmout;
23dbc                 | ' 
23dbc                 | ' 	tmr = _cnt();
23dbc                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
23dbc                 | ' 	for(;;) {
23dbc                 | LR__3930
23dbc     04 4E 05 F1 | 	add	fp, #4
23dc0     A7 12 02 F6 | 	mov	arg01, fp
23dc4     04 4E 85 F1 | 	sub	fp, #4
23dc8     01 14 06 F6 | 	mov	arg02, #1
23dcc     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_0944
23dd0     04 4E 05 F1 | 	add	fp, #4
23dd4     A7 1E C2 FA | 	rdbyte	local01, fp
23dd8     04 4E 85 F1 | 	sub	fp, #4
23ddc     FF 1E 0E F2 | 	cmp	local01, #255 wz
23de0     01 FA 05 A6 |  if_e	mov	result1, #1
23de4     28 00 90 AD |  if_e	jmp	#LR__3931
23de8     1A FA 61 FD | 	getct	result1
23dec     08 4E 05 F1 | 	add	fp, #8
23df0     A7 1E 02 FB | 	rdlong	local01, fp
23df4     0F FB 81 F1 | 	sub	result1, local01
23df8     04 4E 05 F1 | 	add	fp, #4
23dfc     A7 1E 02 FB | 	rdlong	local01, fp
23e00     0C 4E 85 F1 | 	sub	fp, #12
23e04     0F FB 11 F2 | 	cmp	result1, local01 wc
23e08     00 FA 05 36 |  if_ae	mov	result1, #0
23e0c     AC FF 9F CD |  if_b	jmp	#LR__3930
23e10                 | LR__3931
23e10     A7 F0 03 F6 | 	mov	ptra, fp
23e14     B2 00 A0 FD | 	call	#popregs_
23e18                 | _fatfs_cc_wait_ready_0948_ret
23e18     2D 00 64 FD | 	ret
23e1c                 | 
23e1c                 | _fatfs_cc_deselect_0954
23e1c     00 4A 05 F6 | 	mov	COUNT_, #0
23e20     A8 00 A0 FD | 	call	#pushregs_
23e24     14 F0 07 F1 | 	add	ptra, #20
23e28     01 00 00 FF 
23e2c     14 E4 05 F1 | 	add	objptr, ##532
23e30     F2 14 02 FB | 	rdlong	arg02, objptr
23e34     04 4E 05 F1 | 	add	fp, #4
23e38     A7 14 62 FC | 	wrlong	arg02, fp
23e3c     04 E4 85 F1 | 	sub	objptr, #4
23e40     F2 14 02 FB | 	rdlong	arg02, objptr
23e44     04 4E 05 F1 | 	add	fp, #4
23e48     A7 14 62 FC | 	wrlong	arg02, fp
23e4c     08 E4 05 F1 | 	add	objptr, #8
23e50     F2 14 02 FB | 	rdlong	arg02, objptr
23e54     04 4E 05 F1 | 	add	fp, #4
23e58     A7 14 62 FC | 	wrlong	arg02, fp
23e5c     04 E4 05 F1 | 	add	objptr, #4
23e60     F2 14 02 FB | 	rdlong	arg02, objptr
23e64     01 00 00 FF 
23e68     1C E4 85 F1 | 	sub	objptr, ##540
23e6c     04 4E 05 F1 | 	add	fp, #4
23e70     A7 14 62 FC | 	wrlong	arg02, fp
23e74     0C 4E 85 F1 | 	sub	fp, #12
23e78     A7 12 02 FB | 	rdlong	arg01, fp
23e7c     04 4E 85 F1 | 	sub	fp, #4
23e80     59 12 62 FD | 	drvh	arg01
23e84     1F 20 64 FD | 	waitx	#16
23e88     A7 12 02 F6 | 	mov	arg01, fp
23e8c     01 14 06 F6 | 	mov	arg02, #1
23e90     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_0944
23e94     A7 F0 03 F6 | 	mov	ptra, fp
23e98     B2 00 A0 FD | 	call	#popregs_
23e9c                 | _fatfs_cc_deselect_0954_ret
23e9c     2D 00 64 FD | 	ret
23ea0                 | 
23ea0                 | _fatfs_cc_select_0958
23ea0     00 4A 05 F6 | 	mov	COUNT_, #0
23ea4     A8 00 A0 FD | 	call	#pushregs_
23ea8     10 F0 07 F1 | 	add	ptra, #16
23eac     01 00 00 FF 
23eb0     14 E4 05 F1 | 	add	objptr, ##532
23eb4     F2 14 02 FB | 	rdlong	arg02, objptr
23eb8     08 4E 05 F1 | 	add	fp, #8
23ebc     A7 14 62 FC | 	wrlong	arg02, fp
23ec0     08 E4 05 F1 | 	add	objptr, #8
23ec4     F2 12 02 FB | 	rdlong	arg01, objptr
23ec8     01 00 00 FF 
23ecc     1C E4 85 F1 | 	sub	objptr, ##540
23ed0     04 4E 05 F1 | 	add	fp, #4
23ed4     A7 12 62 FC | 	wrlong	arg01, fp
23ed8     50 12 62 FD | 	fltl	arg01
23edc     04 4E 85 F1 | 	sub	fp, #4
23ee0     A7 12 02 FB | 	rdlong	arg01, fp
23ee4     58 12 62 FD | 	drvl	arg01
23ee8     1F 20 64 FD | 	waitx	#16
23eec     04 4E 05 F1 | 	add	fp, #4
23ef0     A7 12 02 FB | 	rdlong	arg01, fp
23ef4     41 12 62 FD | 	dirh	arg01
23ef8     08 4E 85 F1 | 	sub	fp, #8
23efc     A7 12 02 F6 | 	mov	arg01, fp
23f00     04 4E 85 F1 | 	sub	fp, #4
23f04     01 14 06 F6 | 	mov	arg02, #1
23f08     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0944
23f0c     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_0948
23f10     00 FA 0D F2 | 	cmp	result1, #0 wz
23f14     01 FA 05 56 |  if_ne	mov	result1, #1
23f18     08 00 90 5D |  if_ne	jmp	#LR__3940
23f1c     FC FE BF FD | 	call	#_fatfs_cc_deselect_0954
23f20                 | ' 
23f20                 | ' 	deselect();
23f20                 | ' 	return 0;
23f20     00 FA 05 F6 | 	mov	result1, #0
23f24                 | LR__3940
23f24     A7 F0 03 F6 | 	mov	ptra, fp
23f28     B2 00 A0 FD | 	call	#popregs_
23f2c                 | _fatfs_cc_select_0958_ret
23f2c     2D 00 64 FD | 	ret
23f30                 | 
23f30                 | _fatfs_cc_rcvr_datablock_0962
23f30     01 4A 05 F6 | 	mov	COUNT_, #1
23f34     A8 00 A0 FD | 	call	#pushregs_
23f38     18 F0 07 F1 | 	add	ptra, #24
23f3c     04 4E 05 F1 | 	add	fp, #4
23f40     A7 12 62 FC | 	wrlong	arg01, fp
23f44     04 4E 05 F1 | 	add	fp, #4
23f48     A7 14 62 FC | 	wrlong	arg02, fp
23f4c     1A FA 61 FD | 	getct	result1
23f50     08 4E 05 F1 | 	add	fp, #8
23f54     A7 FA 61 FC | 	wrlong	result1, fp
23f58     14 1E 06 FB | 	rdlong	local01, #20
23f5c     03 1E 46 F0 | 	shr	local01, #3
23f60     04 4E 05 F1 | 	add	fp, #4
23f64     A7 1E 62 FC | 	wrlong	local01, fp
23f68     14 4E 85 F1 | 	sub	fp, #20
23f6c                 | ' 	BYTE *buff,
23f6c                 | ' 	UINT btr
23f6c                 | ' )
23f6c                 | ' {
23f6c                 | ' 	BYTE d[2];
23f6c                 | ' 	UINT tmr, tmout;
23f6c                 | ' 
23f6c                 | ' 	tmr = _cnt();
23f6c                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
23f6c                 | ' 	for(;;) {
23f6c                 | LR__3950
23f6c     0C 4E 05 F1 | 	add	fp, #12
23f70     A7 12 02 F6 | 	mov	arg01, fp
23f74     0C 4E 85 F1 | 	sub	fp, #12
23f78     01 14 06 F6 | 	mov	arg02, #1
23f7c     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0944
23f80     0C 4E 05 F1 | 	add	fp, #12
23f84     A7 1E C2 FA | 	rdbyte	local01, fp
23f88     0C 4E 85 F1 | 	sub	fp, #12
23f8c     FF 1E 0E F2 | 	cmp	local01, #255 wz
23f90     28 00 90 5D |  if_ne	jmp	#LR__3951
23f94     1A FA 61 FD | 	getct	result1
23f98     FD 1E 02 F6 | 	mov	local01, result1
23f9c     10 4E 05 F1 | 	add	fp, #16
23fa0     A7 14 02 FB | 	rdlong	arg02, fp
23fa4     0A 1F 82 F1 | 	sub	local01, arg02
23fa8     04 4E 05 F1 | 	add	fp, #4
23fac     A7 14 02 FB | 	rdlong	arg02, fp
23fb0     14 4E 85 F1 | 	sub	fp, #20
23fb4     0A 1F 12 F2 | 	cmp	local01, arg02 wc
23fb8     B0 FF 9F CD |  if_b	jmp	#LR__3950
23fbc                 | LR__3951
23fbc     0C 4E 05 F1 | 	add	fp, #12
23fc0     A7 1E C2 FA | 	rdbyte	local01, fp
23fc4     0C 4E 85 F1 | 	sub	fp, #12
23fc8     FE 1E 0E F2 | 	cmp	local01, #254 wz
23fcc     00 FA 05 56 |  if_ne	mov	result1, #0
23fd0     30 00 90 5D |  if_ne	jmp	#LR__3952
23fd4     04 4E 05 F1 | 	add	fp, #4
23fd8     A7 12 02 FB | 	rdlong	arg01, fp
23fdc     04 4E 05 F1 | 	add	fp, #4
23fe0     A7 14 02 FB | 	rdlong	arg02, fp
23fe4     08 4E 85 F1 | 	sub	fp, #8
23fe8     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0944
23fec     0C 4E 05 F1 | 	add	fp, #12
23ff0     A7 12 02 F6 | 	mov	arg01, fp
23ff4     0C 4E 85 F1 | 	sub	fp, #12
23ff8     02 14 06 F6 | 	mov	arg02, #2
23ffc     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0944
24000                 | ' 
24000                 | ' 	rcvr_mmc(buff, btr);
24000                 | ' 	rcvr_mmc(d, 2);
24000                 | ' 
24000                 | ' 	return 1;
24000     01 FA 05 F6 | 	mov	result1, #1
24004                 | LR__3952
24004     A7 F0 03 F6 | 	mov	ptra, fp
24008     B2 00 A0 FD | 	call	#popregs_
2400c                 | _fatfs_cc_rcvr_datablock_0962_ret
2400c     2D 00 64 FD | 	ret
24010                 | 
24010                 | _fatfs_cc_xmit_datablock_0964
24010     00 4A 05 F6 | 	mov	COUNT_, #0
24014     A8 00 A0 FD | 	call	#pushregs_
24018     10 F0 07 F1 | 	add	ptra, #16
2401c     04 4E 05 F1 | 	add	fp, #4
24020     A7 12 62 FC | 	wrlong	arg01, fp
24024     04 4E 05 F1 | 	add	fp, #4
24028     A7 14 42 FC | 	wrbyte	arg02, fp
2402c     08 4E 85 F1 | 	sub	fp, #8
24030     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_0948
24034     00 FA 0D F2 | 	cmp	result1, #0 wz
24038     00 FA 05 A6 |  if_e	mov	result1, #0
2403c     90 00 90 AD |  if_e	jmp	#LR__3961
24040     08 4E 05 F1 | 	add	fp, #8
24044     A7 14 C2 FA | 	rdbyte	arg02, fp
24048     04 4E 05 F1 | 	add	fp, #4
2404c     A7 14 42 FC | 	wrbyte	arg02, fp
24050     A7 12 02 F6 | 	mov	arg01, fp
24054     0C 4E 85 F1 | 	sub	fp, #12
24058     01 14 06 F6 | 	mov	arg02, #1
2405c     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_0937
24060     08 4E 05 F1 | 	add	fp, #8
24064     A7 14 C2 FA | 	rdbyte	arg02, fp
24068     08 4E 85 F1 | 	sub	fp, #8
2406c     FD 14 0E F2 | 	cmp	arg02, #253 wz
24070     58 00 90 AD |  if_e	jmp	#LR__3960
24074     04 4E 05 F1 | 	add	fp, #4
24078     A7 12 02 FB | 	rdlong	arg01, fp
2407c     04 4E 85 F1 | 	sub	fp, #4
24080     09 14 C6 F9 | 	decod	arg02, #9
24084     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_0937
24088     0C 4E 05 F1 | 	add	fp, #12
2408c     A7 12 02 F6 | 	mov	arg01, fp
24090     0C 4E 85 F1 | 	sub	fp, #12
24094     02 14 06 F6 | 	mov	arg02, #2
24098     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0944
2409c     0C 4E 05 F1 | 	add	fp, #12
240a0     A7 12 02 F6 | 	mov	arg01, fp
240a4     0C 4E 85 F1 | 	sub	fp, #12
240a8     01 14 06 F6 | 	mov	arg02, #1
240ac     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0944
240b0     0C 4E 05 F1 | 	add	fp, #12
240b4     A7 14 C2 FA | 	rdbyte	arg02, fp
240b8     0C 4E 85 F1 | 	sub	fp, #12
240bc     1F 14 06 F5 | 	and	arg02, #31
240c0     05 14 0E F2 | 	cmp	arg02, #5 wz
240c4                 | ' 			return 0;
240c4     00 FA 05 56 |  if_ne	mov	result1, #0
240c8     04 00 90 5D |  if_ne	jmp	#LR__3961
240cc                 | LR__3960
240cc                 | ' 	}
240cc                 | ' 
240cc                 | ' 	return 1;
240cc     01 FA 05 F6 | 	mov	result1, #1
240d0                 | LR__3961
240d0     A7 F0 03 F6 | 	mov	ptra, fp
240d4     B2 00 A0 FD | 	call	#popregs_
240d8                 | _fatfs_cc_xmit_datablock_0964_ret
240d8     2D 00 64 FD | 	ret
240dc                 | 
240dc                 | _fatfs_cc_send_cmd_0968
240dc     01 4A 05 F6 | 	mov	COUNT_, #1
240e0     A8 00 A0 FD | 	call	#pushregs_
240e4     1C F0 07 F1 | 	add	ptra, #28
240e8                 | _fatfs_cc_send_cmd_0968_enter
240e8     04 4E 05 F1 | 	add	fp, #4
240ec     A7 12 42 FC | 	wrbyte	arg01, fp
240f0     04 4E 05 F1 | 	add	fp, #4
240f4     A7 14 62 FC | 	wrlong	arg02, fp
240f8     04 4E 85 F1 | 	sub	fp, #4
240fc     A7 FA C1 FA | 	rdbyte	result1, fp
24100     04 4E 85 F1 | 	sub	fp, #4
24104     80 FA CD F7 | 	test	result1, #128 wz
24108     44 00 90 AD |  if_e	jmp	#LR__3970
2410c     04 4E 05 F1 | 	add	fp, #4
24110     A7 14 C2 FA | 	rdbyte	arg02, fp
24114     7F 14 06 F5 | 	and	arg02, #127
24118     A7 14 42 FC | 	wrbyte	arg02, fp
2411c     04 4E 85 F1 | 	sub	fp, #4
24120     37 12 06 F6 | 	mov	arg01, #55
24124     00 14 06 F6 | 	mov	arg02, #0
24128     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_0968
2412c     0C 4E 05 F1 | 	add	fp, #12
24130     A7 FA 41 FC | 	wrbyte	result1, fp
24134     A7 14 C2 FA | 	rdbyte	arg02, fp
24138     0C 4E 85 F1 | 	sub	fp, #12
2413c     02 14 16 F2 | 	cmp	arg02, #2 wc
24140     0C 4E 05 31 |  if_ae	add	fp, #12
24144     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
24148     0C 4E 85 31 |  if_ae	sub	fp, #12
2414c     6C 01 90 3D |  if_ae	jmp	#LR__3974
24150                 | LR__3970
24150     04 4E 05 F1 | 	add	fp, #4
24154     A7 14 C2 FA | 	rdbyte	arg02, fp
24158     04 4E 85 F1 | 	sub	fp, #4
2415c     0C 14 0E F2 | 	cmp	arg02, #12 wz
24160     14 00 90 AD |  if_e	jmp	#LR__3971
24164     B4 FC BF FD | 	call	#_fatfs_cc_deselect_0954
24168     34 FD BF FD | 	call	#_fatfs_cc_select_0958
2416c     00 FA 0D F2 | 	cmp	result1, #0 wz
24170     FF FA 05 A6 |  if_e	mov	result1, #255
24174     44 01 90 AD |  if_e	jmp	#LR__3974
24178                 | LR__3971
24178     04 4E 05 F1 | 	add	fp, #4
2417c     A7 14 C2 FA | 	rdbyte	arg02, fp
24180     40 FA 05 F6 | 	mov	result1, #64
24184     0A FB 41 F5 | 	or	result1, arg02
24188     10 4E 05 F1 | 	add	fp, #16
2418c     A7 FA 41 FC | 	wrbyte	result1, fp
24190     0C 4E 85 F1 | 	sub	fp, #12
24194     A7 FA 01 FB | 	rdlong	result1, fp
24198     18 FA 45 F0 | 	shr	result1, #24
2419c     0D 4E 05 F1 | 	add	fp, #13
241a0     A7 FA 41 FC | 	wrbyte	result1, fp
241a4     0D 4E 85 F1 | 	sub	fp, #13
241a8     A7 FA 01 FB | 	rdlong	result1, fp
241ac     10 FA 45 F0 | 	shr	result1, #16
241b0     0E 4E 05 F1 | 	add	fp, #14
241b4     A7 FA 41 FC | 	wrbyte	result1, fp
241b8     0E 4E 85 F1 | 	sub	fp, #14
241bc     A7 FA 01 FB | 	rdlong	result1, fp
241c0     08 FA 45 F0 | 	shr	result1, #8
241c4     0F 4E 05 F1 | 	add	fp, #15
241c8     A7 FA 41 FC | 	wrbyte	result1, fp
241cc     0F 4E 85 F1 | 	sub	fp, #15
241d0     A7 FA 01 FB | 	rdlong	result1, fp
241d4     10 4E 05 F1 | 	add	fp, #16
241d8     A7 FA 41 FC | 	wrbyte	result1, fp
241dc     0C 4E 85 F1 | 	sub	fp, #12
241e0     A7 02 48 FC | 	wrbyte	#1, fp
241e4     08 4E 85 F1 | 	sub	fp, #8
241e8     A7 FA C9 FA | 	rdbyte	result1, fp wz
241ec     04 4E 85 F1 | 	sub	fp, #4
241f0     0C 4E 05 A1 |  if_e	add	fp, #12
241f4     A7 2A 49 AC |  if_e	wrbyte	#149, fp
241f8     0C 4E 85 A1 |  if_e	sub	fp, #12
241fc     04 4E 05 F1 | 	add	fp, #4
24200     A7 FA C1 FA | 	rdbyte	result1, fp
24204     04 4E 85 F1 | 	sub	fp, #4
24208     08 FA 0D F2 | 	cmp	result1, #8 wz
2420c     0C 4E 05 A1 |  if_e	add	fp, #12
24210     A7 0E 49 AC |  if_e	wrbyte	#135, fp
24214     0C 4E 85 A1 |  if_e	sub	fp, #12
24218     0C 4E 05 F1 | 	add	fp, #12
2421c     A7 14 C2 FA | 	rdbyte	arg02, fp
24220     0D 4E 05 F1 | 	add	fp, #13
24224     A7 14 42 FC | 	wrbyte	arg02, fp
24228     05 4E 85 F1 | 	sub	fp, #5
2422c     A7 12 02 F6 | 	mov	arg01, fp
24230     14 4E 85 F1 | 	sub	fp, #20
24234     06 14 06 F6 | 	mov	arg02, #6
24238     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_0937
2423c     04 4E 05 F1 | 	add	fp, #4
24240     A7 1E C2 FA | 	rdbyte	local01, fp
24244     04 4E 85 F1 | 	sub	fp, #4
24248     0C 1E 0E F2 | 	cmp	local01, #12 wz
2424c     10 4E 05 A1 |  if_e	add	fp, #16
24250     A7 12 02 A6 |  if_e	mov	arg01, fp
24254     10 4E 85 A1 |  if_e	sub	fp, #16
24258     01 14 06 A6 |  if_e	mov	arg02, #1
2425c     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_0944
24260     0C 4E 05 F1 | 	add	fp, #12
24264     A7 14 48 FC | 	wrbyte	#10, fp
24268     0C 4E 85 F1 | 	sub	fp, #12
2426c                 | ' 	n = 10;
2426c                 | ' 	do
2426c                 | LR__3972
2426c     10 4E 05 F1 | 	add	fp, #16
24270     A7 12 02 F6 | 	mov	arg01, fp
24274     10 4E 85 F1 | 	sub	fp, #16
24278     01 14 06 F6 | 	mov	arg02, #1
2427c     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_0944
24280     10 4E 05 F1 | 	add	fp, #16
24284     A7 1E C2 FA | 	rdbyte	local01, fp
24288     10 4E 85 F1 | 	sub	fp, #16
2428c     80 1E CE F7 | 	test	local01, #128 wz
24290     1C 00 90 AD |  if_e	jmp	#LR__3973
24294     0C 4E 05 F1 | 	add	fp, #12
24298     A7 1E C2 FA | 	rdbyte	local01, fp
2429c     01 1E 86 F1 | 	sub	local01, #1
242a0     A7 1E 42 FC | 	wrbyte	local01, fp
242a4     A7 1E CA FA | 	rdbyte	local01, fp wz
242a8     0C 4E 85 F1 | 	sub	fp, #12
242ac     BC FF 9F 5D |  if_ne	jmp	#LR__3972
242b0                 | LR__3973
242b0                 | ' 
242b0                 | ' 	return d;
242b0     10 4E 05 F1 | 	add	fp, #16
242b4     A7 FA C1 FA | 	rdbyte	result1, fp
242b8     10 4E 85 F1 | 	sub	fp, #16
242bc                 | LR__3974
242bc     A7 F0 03 F6 | 	mov	ptra, fp
242c0     B2 00 A0 FD | 	call	#popregs_
242c4                 | _fatfs_cc_send_cmd_0968_ret
242c4     2D 00 64 FD | 	ret
242c8                 | 
242c8                 | _fatfs_cc_disk_deinitialize
242c8     03 4A 05 F6 | 	mov	COUNT_, #3
242cc     A8 00 A0 FD | 	call	#pushregs_
242d0     00 12 4E F2 | 	cmps	arg01, #0 wz
242d4     01 00 00 FF 
242d8     14 E4 05 F1 | 	add	objptr, ##532
242dc     F2 12 02 FB | 	rdlong	arg01, objptr
242e0     04 E4 85 F1 | 	sub	objptr, #4
242e4     F2 1E 02 FB | 	rdlong	local01, objptr
242e8     08 E4 05 F1 | 	add	objptr, #8
242ec     F2 20 02 FB | 	rdlong	local02, objptr
242f0     04 E4 05 F1 | 	add	objptr, #4
242f4     F2 22 02 FB | 	rdlong	local03, objptr
242f8     01 00 00 FF 
242fc     1C E4 85 F1 | 	sub	objptr, ##540
24300                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
24300                 | '         return RES_NOTRDY;
24300     03 FA 05 56 |  if_ne	mov	result1, #3
24304     2C 00 90 5D |  if_ne	jmp	#LR__3980
24308     50 12 62 FD | 	fltl	arg01
2430c     09 01 08 FC | 	wrpin	#0, arg01
24310     50 1E 62 FD | 	fltl	local01
24314     0F 01 08 FC | 	wrpin	#0, local01
24318     50 20 62 FD | 	fltl	local02
2431c     10 01 08 FC | 	wrpin	#0, local02
24320     50 22 62 FD | 	fltl	local03
24324     11 01 08 FC | 	wrpin	#0, local03
24328     0A 12 06 F6 | 	mov	arg01, #10
2432c     84 17 BF FD | 	call	#__system___waitms
24330                 | '     }
24330                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
24330                 | '     _pinclear(PIN_SS);
24330                 | '     _pinclear(PIN_CLK);
24330                 | '     _pinclear(PIN_DI);
24330                 | '     _pinclear(PIN_DO);
24330                 | ' 
24330                 | '     _waitms(10);
24330                 | ' 
24330                 | '     return 0;
24330     00 FA 05 F6 | 	mov	result1, #0
24334                 | LR__3980
24334     A7 F0 03 F6 | 	mov	ptra, fp
24338     B2 00 A0 FD | 	call	#popregs_
2433c                 | _fatfs_cc_disk_deinitialize_ret
2433c     2D 00 64 FD | 	ret
24340                 | 
24340                 | _fatfs_cc_gettimeofday
24340     04 4A 05 F6 | 	mov	COUNT_, #4
24344     A8 00 A0 FD | 	call	#pushregs_
24348     09 1F 02 F6 | 	mov	local01, arg01
2434c     40 13 BF FD | 	call	#__system___getus
24350     FD 12 02 F6 | 	mov	arg01, result1
24354     02 00 00 FF 
24358     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
2435c     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
24360     09 FB 01 F6 | 	mov	result1, arg01
24364     10 FB 81 F1 | 	sub	result1, local02
24368     A1 07 00 FF 
2436c     40 FA 15 FD | 	qdiv	result1, ##1000000
24370     02 00 00 FF 
24374     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
24378     18 20 62 FD | 	getqx	local02
2437c     A1 07 00 FF 
24380     40 FA 15 FD | 	qdiv	result1, ##1000000
24384     00 20 0E F2 | 	cmp	local02, #0 wz
24388     19 22 62 FD | 	getqy	local03
2438c     28 00 90 AD |  if_e	jmp	#LR__3990
24390     02 00 00 FF 
24394     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
24398     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2439c     10 25 02 F1 | 	add	local04, local02
243a0     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
243a4     11 13 82 F1 | 	sub	arg01, local03
243a8     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
243ac     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
243b0     02 00 00 FF 
243b4     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
243b8                 | LR__3990
243b8     02 00 00 FF 
243bc     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
243c0     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
243c4     02 00 00 FF 
243c8     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
243cc     0F 25 62 FC | 	wrlong	local04, local01
243d0     04 1E 06 F1 | 	add	local01, #4
243d4     0F 23 62 FC | 	wrlong	local03, local01
243d8                 | '         lastsec += secs;
243d8                 | '         lastus = now - leftover;
243d8                 | '     }
243d8                 | '     tv->tv_sec = lastsec;
243d8                 | '     tv->tv_usec = leftover;
243d8                 | '     return 0;
243d8     00 FA 05 F6 | 	mov	result1, #0
243dc     A7 F0 03 F6 | 	mov	ptra, fp
243e0     B2 00 A0 FD | 	call	#popregs_
243e4                 | _fatfs_cc_gettimeofday_ret
243e4     2D 00 64 FD | 	ret
243e8                 | 
243e8                 | _fatfs_cc__is_leap_year
243e8     09 FB 51 F6 | 	abs	result1, arg01 wc
243ec     03 FA 05 F5 | 	and	result1, #3
243f0     FD FA 89 F6 | 	negc	result1, result1 wz
243f4     38 00 90 5D |  if_ne	jmp	#LR__4001
243f8     09 FB 51 F6 | 	abs	result1, arg01 wc
243fc     64 FA 15 FD | 	qdiv	result1, #100
24400     19 FA 61 FD | 	getqy	result1
24404     FD FA 89 F6 | 	negc	result1, result1 wz
24408     1C 00 90 5D |  if_ne	jmp	#LR__4000
2440c     09 FB 51 F6 | 	abs	result1, arg01 wc
24410     90 FB 15 FD | 	qdiv	result1, #400
24414                 | '       return (0 == y % 400);
24414     00 FA 05 F6 | 	mov	result1, #0
24418     19 00 62 FD | 	getqy	_var01
2441c     00 01 8A F6 | 	negc	_var01, _var01 wz
24420     01 FA 05 A6 |  if_e	mov	result1, #1
24424     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
24428                 | LR__4000
24428                 | '     return 1;
24428     01 FA 05 F6 | 	mov	result1, #1
2442c     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
24430                 | LR__4001
24430                 | '   }
24430                 | '   return 0;
24430     00 FA 05 F6 | 	mov	result1, #0
24434                 | _fatfs_cc__is_leap_year_ret
24434     2D 00 64 FD | 	ret
24438                 | 
24438                 | _fatfs_cc___tzoffset
24438     09 01 0A F6 | 	mov	_var01, arg01 wz
2443c     FF FF FF FF 
24440     0A FF 6B FC | 	wrlong	##-1, arg02
24444     01 02 06 F6 | 	mov	_var02, #1
24448     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
2444c                 | '                 return 0;
2444c     00 FA 05 A6 |  if_e	mov	result1, #0
24450     94 02 90 AD |  if_e	jmp	#LR__4027
24454     0A 01 68 FC | 	wrlong	#0, arg02
24458     02 00 00 FF 
2445c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
24460     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
24464                 | ' 
24464                 | '        *hasdst = 0;
24464                 | ' 
24464                 | ' 	n = stdname;
24464                 | '         while (*s && isalpha(*s)) {
24464     02 00 00 FF 
24468     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2446c     97 28 48 FB | 	callpa	#(@LR__4011-@LR__4010)>>2,fcache_load_ptr_
24470                 | LR__4010
24470     00 05 CA FA | 	rdbyte	_var03, _var01 wz
24474     48 00 90 AD |  if_e	jmp	#LR__4012
24478     00 13 C2 FA | 	rdbyte	arg01, _var01
2447c                 | ' {
2447c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2447c     80 12 36 F3 | 	fle	arg01, #128 wc
24480                 | '     return __ctype[c];
24480     02 00 00 FF 
24484     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
24488     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2448c     09 FB C1 FA | 	rdbyte	result1, arg01
24490     02 00 00 FF 
24494     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
24498     0C FA CD F7 | 	test	result1, #12 wz
2449c     20 00 90 AD |  if_e	jmp	#LR__4012
244a0     00 09 02 F6 | 	mov	_var05, _var01
244a4     00 0B 02 F6 | 	mov	_var06, _var01
244a8     01 0A 06 F1 | 	add	_var06, #1
244ac     04 0D C2 FA | 	rdbyte	_var07, _var05
244b0     05 01 02 F6 | 	mov	_var01, _var06
244b4     03 0D 42 FC | 	wrbyte	_var07, _var04
244b8     01 06 06 F1 | 	add	_var04, #1
244bc     B0 FF 9F FD | 	jmp	#LR__4010
244c0                 | LR__4011
244c0                 | LR__4012
244c0     03 01 48 FC | 	wrbyte	#0, _var04
244c4     00 0E 06 F6 | 	mov	_var08, #0
244c8     00 05 C2 FA | 	rdbyte	_var03, _var01
244cc     2D 04 0E F2 | 	cmp	_var03, #45 wz
244d0     01 02 66 A6 |  if_e	neg	_var02, #1
244d4     01 00 06 A1 |  if_e	add	_var01, #1
244d8     97 28 48 FB | 	callpa	#(@LR__4014-@LR__4013)>>2,fcache_load_ptr_
244dc                 | '                 sgn = -1;
244dc                 | '                 s++;
244dc                 | '         }
244dc                 | '         while (isdigit(*s)) {
244dc                 | LR__4013
244dc     00 13 C2 FA | 	rdbyte	arg01, _var01
244e0                 | ' {
244e0                 | '   return  (__ctype_get(c) & 0x02 ) ;
244e0     80 12 36 F3 | 	fle	arg01, #128 wc
244e4                 | '     return __ctype[c];
244e4     02 00 00 FF 
244e8     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
244ec     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
244f0     09 FB C1 FA | 	rdbyte	result1, arg01
244f4     02 00 00 FF 
244f8     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
244fc     02 FA CD F7 | 	test	result1, #2 wz
24500     28 00 90 AD |  if_e	jmp	#LR__4015
24504     07 05 02 F6 | 	mov	_var03, _var08
24508     02 04 66 F0 | 	shl	_var03, #2
2450c     07 05 02 F1 | 	add	_var03, _var08
24510     01 04 66 F0 | 	shl	_var03, #1
24514     00 09 C2 FA | 	rdbyte	_var05, _var01
24518     30 08 86 F1 | 	sub	_var05, #48
2451c     04 05 02 F1 | 	add	_var03, _var05
24520     02 0F 02 F6 | 	mov	_var08, _var03
24524     01 00 06 F1 | 	add	_var01, #1
24528     B0 FF 9F FD | 	jmp	#LR__4013
2452c                 | LR__4014
2452c                 | LR__4015
2452c     07 00 00 FF 
24530     10 0E 06 FD | 	qmul	_var08, ##3600
24534     00 05 C2 FA | 	rdbyte	_var03, _var01
24538     3A 04 0E F2 | 	cmp	_var03, #58 wz
2453c     18 10 62 FD | 	getqx	_var09
24540     70 00 90 5D |  if_ne	jmp	#LR__4019
24544     00 0E 06 F6 | 	mov	_var08, #0
24548     01 00 06 F1 | 	add	_var01, #1
2454c     97 28 48 FB | 	callpa	#(@LR__4017-@LR__4016)>>2,fcache_load_ptr_
24550                 | '                 x = 0;
24550                 | '                 s++;
24550                 | '                 while (isdigit(*s)) {
24550                 | LR__4016
24550     00 13 C2 FA | 	rdbyte	arg01, _var01
24554                 | ' {
24554                 | '   return  (__ctype_get(c) & 0x02 ) ;
24554     80 12 36 F3 | 	fle	arg01, #128 wc
24558                 | '     return __ctype[c];
24558     02 00 00 FF 
2455c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
24560     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
24564     09 FB C1 FA | 	rdbyte	result1, arg01
24568     02 00 00 FF 
2456c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
24570     02 FA CD F7 | 	test	result1, #2 wz
24574     28 00 90 AD |  if_e	jmp	#LR__4018
24578     07 05 02 F6 | 	mov	_var03, _var08
2457c     02 04 66 F0 | 	shl	_var03, #2
24580     07 05 02 F1 | 	add	_var03, _var08
24584     01 04 66 F0 | 	shl	_var03, #1
24588     00 09 C2 FA | 	rdbyte	_var05, _var01
2458c     30 08 86 F1 | 	sub	_var05, #48
24590     04 05 02 F1 | 	add	_var03, _var05
24594     02 0F 02 F6 | 	mov	_var08, _var03
24598     01 00 06 F1 | 	add	_var01, #1
2459c     B0 FF 9F FD | 	jmp	#LR__4016
245a0                 | LR__4017
245a0                 | LR__4018
245a0     07 0D 02 F6 | 	mov	_var07, _var08
245a4     04 0C 66 F0 | 	shl	_var07, #4
245a8     07 0D 82 F1 | 	sub	_var07, _var08
245ac     02 0C 66 F0 | 	shl	_var07, #2
245b0     06 11 02 F1 | 	add	_var09, _var07
245b4                 | LR__4019
245b4     02 00 00 FF 
245b8     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
245bc     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
245c0     00 13 C2 FA | 	rdbyte	arg01, _var01
245c4                 | ' {
245c4                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
245c4     80 12 36 F3 | 	fle	arg01, #128 wc
245c8                 | '     return __ctype[c];
245c8     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
245cc     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
245d0     09 FB C1 FA | 	rdbyte	result1, arg01
245d4     02 00 00 FF 
245d8     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
245dc     0C FA CD F7 | 	test	result1, #12 wz
245e0     50 00 90 AD |  if_e	jmp	#LR__4022
245e4     0A 03 68 FC | 	wrlong	#1, arg02
245e8                 | '                 *hasdst = 1;
245e8                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
245e8                 | LR__4020
245e8     00 05 CA FA | 	rdbyte	_var03, _var01 wz
245ec     44 00 90 AD |  if_e	jmp	#LR__4021
245f0     00 13 C2 FA | 	rdbyte	arg01, _var01
245f4                 | ' {
245f4                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
245f4     80 12 36 F3 | 	fle	arg01, #128 wc
245f8                 | '     return __ctype[c];
245f8     02 00 00 FF 
245fc     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
24600     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
24604     09 FB C1 FA | 	rdbyte	result1, arg01
24608     02 00 00 FF 
2460c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
24610     0C FA CD F7 | 	test	result1, #12 wz
24614     1C 00 90 AD |  if_e	jmp	#LR__4021
24618     00 0B 02 F6 | 	mov	_var06, _var01
2461c     01 0A 06 F1 | 	add	_var06, #1
24620     00 0D C2 FA | 	rdbyte	_var07, _var01
24624     05 01 02 F6 | 	mov	_var01, _var06
24628     03 0D 42 FC | 	wrbyte	_var07, _var04
2462c     01 06 06 F1 | 	add	_var04, #1
24630     B4 FF 9F FD | 	jmp	#LR__4020
24634                 | LR__4021
24634                 | LR__4022
24634     03 01 48 FC | 	wrbyte	#0, _var04
24638     02 00 00 FF 
2463c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
24640     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
24644     02 00 00 FF 
24648     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2464c     20 00 90 AD |  if_e	jmp	#LR__4023
24650     02 00 00 FF 
24654     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
24658     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2465c     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
24660     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
24664     02 00 00 FF 
24668     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2466c     1C 00 90 FD | 	jmp	#LR__4024
24670                 | LR__4023
24670     02 00 00 FF 
24674     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
24678     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2467c     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
24680     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
24684     02 00 00 FF 
24688     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2468c                 | LR__4024
2468c     02 00 00 FF 
24690     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
24694     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
24698     02 00 00 FF 
2469c     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
246a0     20 00 90 AD |  if_e	jmp	#LR__4025
246a4     02 00 00 FF 
246a8     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
246ac     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
246b0     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
246b4     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
246b8     02 00 00 FF 
246bc     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
246c0     1C 00 90 FD | 	jmp	#LR__4026
246c4                 | LR__4025
246c4     02 00 00 FF 
246c8     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
246cc     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
246d0     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
246d4     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
246d8     02 00 00 FF 
246dc     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
246e0                 | LR__4026
246e0     08 03 02 FD | 	qmul	_var02, _var09
246e4                 | ' 		_tzname[1] = stdname;
246e4                 | ' 
246e4                 | '         return sgn * off;
246e4     18 FA 61 FD | 	getqx	result1
246e8                 | LR__4027
246e8                 | _fatfs_cc___tzoffset_ret
246e8     2D 00 64 FD | 	ret
246ec                 | 
246ec                 | _fatfs_cc___indst
246ec     10 12 06 F1 | 	add	arg01, #16
246f0     09 01 02 FB | 	rdlong	_var01, arg01
246f4     10 12 86 F1 | 	sub	arg01, #16
246f8     02 00 0E F2 | 	cmp	_var01, #2 wz
246fc     30 00 90 5D |  if_ne	jmp	#LR__4030
24700     07 00 06 F6 | 	mov	_var01, #7
24704     18 12 06 F1 | 	add	arg01, #24
24708     09 03 02 FB | 	rdlong	_var02, arg01
2470c     01 01 02 F1 | 	add	_var01, _var02
24710     0C 12 86 F1 | 	sub	arg01, #12
24714     09 05 02 FB | 	rdlong	_var03, arg01
24718     02 01 82 F1 | 	sub	_var01, _var03
2471c     00 00 56 F2 | 	cmps	_var01, #0 wc
24720                 | '                         return 1;
24720     01 FA 05 C6 |  if_b	mov	result1, #1
24724     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
24728                 | '                 return 0;
24728     00 FA 05 F6 | 	mov	result1, #0
2472c     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
24730                 | LR__4030
24730     10 12 06 F1 | 	add	arg01, #16
24734     09 01 02 FB | 	rdlong	_var01, arg01
24738     10 12 86 F1 | 	sub	arg01, #16
2473c     0A 00 0E F2 | 	cmp	_var01, #10 wz
24740     28 00 90 5D |  if_ne	jmp	#LR__4031
24744     18 12 06 F1 | 	add	arg01, #24
24748     09 01 02 FB | 	rdlong	_var01, arg01
2474c     0C 12 86 F1 | 	sub	arg01, #12
24750     09 07 02 FB | 	rdlong	_var04, arg01
24754     03 01 82 F1 | 	sub	_var01, _var04
24758     00 00 56 F2 | 	cmps	_var01, #0 wc
2475c                 | '                         return 0;
2475c     00 FA 05 C6 |  if_b	mov	result1, #0
24760     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
24764                 | '                 return 1;
24764     01 FA 05 F6 | 	mov	result1, #1
24768     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2476c                 | LR__4031
2476c                 | '         }
2476c                 | ' 
2476c                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
2476c     00 00 06 F6 | 	mov	_var01, #0
24770     10 12 06 F1 | 	add	arg01, #16
24774     09 03 02 FB | 	rdlong	_var02, arg01
24778     10 12 86 F1 | 	sub	arg01, #16
2477c     03 02 56 F2 | 	cmps	_var02, #3 wc
24780     10 00 90 CD |  if_b	jmp	#LR__4032
24784     10 12 06 F1 | 	add	arg01, #16
24788     09 05 02 FB | 	rdlong	_var03, arg01
2478c     0A 04 56 F2 | 	cmps	_var03, #10 wc
24790     01 00 06 C6 |  if_b	mov	_var01, #1
24794                 | LR__4032
24794     00 FB 01 F6 | 	mov	result1, _var01
24798                 | _fatfs_cc___indst_ret
24798     2D 00 64 FD | 	ret
2479c                 | 
2479c                 | ' 	
2479c                 | ' 	FUNCTION pfunc(c as integer) as integer
2479c                 | ___strs_cl_pfunc
2479c                 | ' 		if (i < 16) then
2479c     04 E4 05 F1 | 	add	objptr, #4
247a0     F2 FA 01 FB | 	rdlong	result1, objptr
247a4     04 E4 85 F1 | 	sub	objptr, #4
247a8     10 FA 55 F2 | 	cmps	result1, #16 wc
247ac     2C 00 90 3D |  if_ae	jmp	#LR__4040
247b0     F2 FA 01 FB | 	rdlong	result1, objptr
247b4     04 E4 05 F1 | 	add	objptr, #4
247b8     F2 00 02 FB | 	rdlong	_var01, objptr
247bc     FD 00 02 F1 | 	add	_var01, result1
247c0     00 13 42 FC | 	wrbyte	arg01, _var01
247c4     F2 FA 01 FB | 	rdlong	result1, objptr
247c8     01 FA 05 F1 | 	add	result1, #1
247cc     F2 FA 61 FC | 	wrlong	result1, objptr
247d0     04 E4 85 F1 | 	sub	objptr, #4
247d4                 | ' 			p(i) = c
247d4                 | ' 			i = i+1
247d4                 | ' 			return 1
247d4     01 FA 05 F6 | 	mov	result1, #1
247d8     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
247dc                 | LR__4040
247dc                 | ' 			return -1
247dc     01 FA 65 F6 | 	neg	result1, #1
247e0                 | ___strs_cl_pfunc_ret
247e0     2D 00 64 FD | 	ret
247e4                 | 
247e4                 | __struct__s_vfs_file_t_putchar
247e4     04 4A 05 F6 | 	mov	COUNT_, #4
247e8     A8 00 A0 FD | 	call	#pushregs_
247ec     1C E4 05 F1 | 	add	objptr, #28
247f0     F2 1E 0A FB | 	rdlong	local01, objptr wz
247f4     1C E4 85 F1 | 	sub	objptr, #28
247f8     00 FA 05 A6 |  if_e	mov	result1, #0
247fc     48 00 90 AD |  if_e	jmp	#LR__4050
24800     1C E4 05 F1 | 	add	objptr, #28
24804     F2 20 02 FB | 	rdlong	local02, objptr
24808     10 23 02 F6 | 	mov	local03, local02
2480c     1C E4 85 F1 | 	sub	objptr, #28
24810     13 22 46 F7 | 	zerox	local03, #19
24814     14 20 46 F0 | 	shr	local02, #20
24818     02 20 66 F0 | 	shl	local02, #2
2481c     ED 20 02 F1 | 	add	local02, __methods__
24820     10 21 02 FB | 	rdlong	local02, local02
24824     F2 14 02 F6 | 	mov	arg02, objptr
24828     F2 24 02 F6 | 	mov	local04, objptr
2482c     11 E5 01 F6 | 	mov	objptr, local03
24830     2D 20 62 FD | 	call	local02
24834     12 E5 01 F6 | 	mov	objptr, local04
24838                 | '     return (i < 0) ? 0 : 1;
24838     00 FA 55 F2 | 	cmps	result1, #0 wc
2483c     00 1E 06 C6 |  if_b	mov	local01, #0
24840     01 1E 06 36 |  if_ae	mov	local01, #1
24844     0F FB 01 F6 | 	mov	result1, local01
24848                 | LR__4050
24848     A7 F0 03 F6 | 	mov	ptra, fp
2484c     B2 00 A0 FD | 	call	#popregs_
24850                 | __struct__s_vfs_file_t_putchar_ret
24850     2D 00 64 FD | 	ret
24854                 | 
24854                 | __struct__s_vfs_file_t_getchar
24854     03 4A 05 F6 | 	mov	COUNT_, #3
24858     A8 00 A0 FD | 	call	#pushregs_
2485c     20 E4 05 F1 | 	add	objptr, #32
24860     F2 12 0A FB | 	rdlong	arg01, objptr wz
24864     20 E4 85 F1 | 	sub	objptr, #32
24868     01 FA 65 A6 |  if_e	neg	result1, #1
2486c     38 00 90 AD |  if_e	jmp	#LR__4060
24870                 | '     return getcf(__this);
24870     20 E4 05 F1 | 	add	objptr, #32
24874     F2 1E 02 FB | 	rdlong	local01, objptr
24878     0F 21 02 F6 | 	mov	local02, local01
2487c     20 E4 85 F1 | 	sub	objptr, #32
24880     13 20 46 F7 | 	zerox	local02, #19
24884     14 1E 46 F0 | 	shr	local01, #20
24888     02 1E 66 F0 | 	shl	local01, #2
2488c     ED 1E 02 F1 | 	add	local01, __methods__
24890     0F 1F 02 FB | 	rdlong	local01, local01
24894     F2 12 02 F6 | 	mov	arg01, objptr
24898     F2 22 02 F6 | 	mov	local03, objptr
2489c     10 E5 01 F6 | 	mov	objptr, local02
248a0     2D 1E 62 FD | 	call	local01
248a4     11 E5 01 F6 | 	mov	objptr, local03
248a8                 | LR__4060
248a8     A7 F0 03 F6 | 	mov	ptra, fp
248ac     B2 00 A0 FD | 	call	#popregs_
248b0                 | __struct__s_vfs_file_t_getchar_ret
248b0     2D 00 64 FD | 	ret
248b4                 | 
248b4                 | __struct___bas_wrap_sender_tx
248b4     03 4A 05 F6 | 	mov	COUNT_, #3
248b8     A8 00 A0 FD | 	call	#pushregs_
248bc     F2 1E 02 FB | 	rdlong	local01, objptr
248c0     0F 21 02 F6 | 	mov	local02, local01
248c4     13 1E 46 F7 | 	zerox	local01, #19
248c8     14 20 46 F0 | 	shr	local02, #20
248cc     02 20 66 F0 | 	shl	local02, #2
248d0     ED 20 02 F1 | 	add	local02, __methods__
248d4     10 21 02 FB | 	rdlong	local02, local02
248d8     F2 22 02 F6 | 	mov	local03, objptr
248dc     0F E5 01 F6 | 	mov	objptr, local01
248e0     2D 20 62 FD | 	call	local02
248e4     11 E5 01 F6 | 	mov	objptr, local03
248e8     01 FA 05 F6 | 	mov	result1, #1
248ec     A7 F0 03 F6 | 	mov	ptra, fp
248f0     B2 00 A0 FD | 	call	#popregs_
248f4                 | __struct___bas_wrap_sender_tx_ret
248f4     2D 00 64 FD | 	ret
248f8                 | 
248f8                 | __struct___bas_wrap_sender_rx
248f8     03 4A 05 F6 | 	mov	COUNT_, #3
248fc     A8 00 A0 FD | 	call	#pushregs_
24900     04 E4 05 F1 | 	add	objptr, #4
24904     F2 1E 02 FB | 	rdlong	local01, objptr
24908     0F 21 02 F6 | 	mov	local02, local01
2490c     04 E4 85 F1 | 	sub	objptr, #4
24910     13 20 46 F7 | 	zerox	local02, #19
24914     14 1E 46 F0 | 	shr	local01, #20
24918     02 1E 66 F0 | 	shl	local01, #2
2491c     ED 1E 02 F1 | 	add	local01, __methods__
24920     0F 1F 02 FB | 	rdlong	local01, local01
24924     F2 22 02 F6 | 	mov	local03, objptr
24928     10 E5 01 F6 | 	mov	objptr, local02
2492c     2D 1E 62 FD | 	call	local01
24930     11 E5 01 F6 | 	mov	objptr, local03
24934     A7 F0 03 F6 | 	mov	ptra, fp
24938     B2 00 A0 FD | 	call	#popregs_
2493c                 | __struct___bas_wrap_sender_rx_ret
2493c     2D 00 64 FD | 	ret
24940                 | 
24940                 | __struct___bas_wrap_sender_close
24940     03 4A 05 F6 | 	mov	COUNT_, #3
24944     A8 00 A0 FD | 	call	#pushregs_
24948     08 E4 05 F1 | 	add	objptr, #8
2494c     F2 1E 02 FB | 	rdlong	local01, objptr
24950     0F 21 02 F6 | 	mov	local02, local01
24954     08 E4 85 F1 | 	sub	objptr, #8
24958     13 20 46 F7 | 	zerox	local02, #19
2495c     14 1E 46 F0 | 	shr	local01, #20
24960     02 1E 66 F0 | 	shl	local01, #2
24964     ED 1E 02 F1 | 	add	local01, __methods__
24968     0F 1F 02 FB | 	rdlong	local01, local01
2496c     F2 22 02 F6 | 	mov	local03, objptr
24970     10 E5 01 F6 | 	mov	objptr, local02
24974     2D 1E 62 FD | 	call	local01
24978     11 E5 01 F6 | 	mov	objptr, local03
2497c     A7 F0 03 F6 | 	mov	ptra, fp
24980     B2 00 A0 FD | 	call	#popregs_
24984                 | __struct___bas_wrap_sender_close_ret
24984     2D 00 64 FD | 	ret
24988                 | 
24988                 | LR__4070
24988     2F          | 	byte	"/"
24989     00          | 	byte	0
2498a                 | LR__4071
2498a     69 6E 66    | 	byte	"inf"
2498d     00          | 	byte	0
2498e                 | LR__4072
2498e     6E 61 6E    | 	byte	"nan"
24991     00          | 	byte	0
24992                 | LR__4073
24992                 | 	byte	
24992     00          | 	byte	0
24993                 | LR__4074
24993                 | 	byte	
24993     00          | 	byte	0
24994                 | LR__4075
24994                 | 	byte	
24994     00          | 	byte	0
24995                 | LR__4076
24995                 | 	byte	
24995     00          | 	byte	0
24996                 | LR__4077
24996                 | 	byte	
24996     00          | 	byte	0
24997                 | LR__4078
24997                 | 	byte	
24997     00          | 	byte	0
24998                 | LR__4079
24998                 | 	byte	
24998     00          | 	byte	0
24999                 | LR__4080
24999                 | 	byte	
24999     00          | 	byte	0
2499a                 | LR__4081
2499a     00          | 	byte	0
2499b     00          | 	byte	0
2499c                 | LR__4082
2499c     00          | 	byte	0
2499d     00          | 	byte	0
2499e                 | LR__4083
2499e     00          | 	byte	0
2499f     00          | 	byte	0
249a0                 | LR__4084
249a0     20 21 21 21 
249a4     20 63 6F 72 
249a8     72 75 70 74 
249ac     65 64 20 68 
249b0     65 61 70 3F 
249b4     3F 3F 20 21 
249b8     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
249bb     00          | 	byte	0
249bc                 | LR__4085
249bc     20 21 21 21 
249c0     20 6F 75 74 
249c4     20 6F 66 20 
249c8     68 65 61 70 
249cc     20 6D 65 6D 
249d0     6F 72 79 20 
249d4     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
249d8     00          | 	byte	0
249d9                 | LR__4086
249d9     20 21 21 21 
249dd     20 63 6F 72 
249e1     72 75 70 74 
249e5     65 64 20 68 
249e9     65 61 70 20 
249ed     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
249f1     00          | 	byte	0
249f2                 | LR__4087
249f2     00          | 	byte	0
249f3     00          | 	byte	0
249f4                 | LR__4088
249f4     2E          | 	byte	"."
249f5     00          | 	byte	0
249f6                 | LR__4089
249f6     00          | 	byte	0
249f7     00          | 	byte	0
249f8                 | LR__4090
249f8     00          | 	byte	0
249f9     00          | 	byte	0
249fa                 | LR__4091
249fa     00          | 	byte	0
249fb     00          | 	byte	0
249fc                 | LR__4092
249fc     2A 3A 3C 3E 
24a00     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
24a04     00          | 	byte	0
24a05                 | LR__4093
24a05     2B 2C 3B 3D 
24a09     5B 5D       | 	byte	"+,;=[]"
24a0b     00          | 	byte	0
24a0c                 | LR__4094
24a0c     46 41 54 33 
24a10     32 20 20 20 | 	byte	"FAT32   "
24a14     00          | 	byte	0
24a15                 | LR__4095
24a15     54 5A       | 	byte	"TZ"
24a17     00          | 	byte	0
24a18                 | LR__4096
24a18     00          | 	byte	0
24a19     00          | 	byte	0
24a1a                 | LR__4097
24a1a                 | 	byte	
24a1a     00          | 	byte	0
24a1b                 | LR__4098
24a1b                 | 	byte	
24a1b     00          | 	byte	0
24a1c                 | LR__4099
24a1c     3A          | 	byte	":"
24a1d     00          | 	byte	0
24a1e                 | LR__4100
24a1e                 | 	byte	
24a1e     00          | 	byte	0
24a1f                 | LR__4101
24a1f                 | 	byte	
24a1f     00          | 	byte	0
24a20                 | LR__4102
24a20                 | 	byte	
24a20     00          | 	byte	0
24a21                 | LR__4103
24a21                 | 	byte	
24a21     00          | 	byte	0
24a22                 | LR__4104
24a22                 | 	byte	
24a22     00          | 	byte	0
24a23                 | LR__4105
24a23                 | 	byte	
24a23     00          | 	byte	0
24a24                 | LR__4106
24a24                 | 	byte	
24a24     00          | 	byte	0
24a25                 | LR__4107
24a25     22          | 	byte	34
24a26     00          | 	byte	0
24a27                 | LR__4108
24a27     22          | 	byte	34
24a28     00          | 	byte	0
24a29                 | LR__4109
24a29     22          | 	byte	34
24a2a     00          | 	byte	0
24a2b                 | LR__4110
24a2b     22          | 	byte	34
24a2c     00          | 	byte	0
24a2d                 | LR__4111
24a2d     22          | 	byte	34
24a2e     00          | 	byte	0
24a2f                 | LR__4112
24a2f     3E          | 	byte	">"
24a30     00          | 	byte	0
24a31                 | LR__4113
24a31     3E          | 	byte	">"
24a32     00          | 	byte	0
24a33                 | LR__4114
24a33     2B          | 	byte	"+"
24a34     00          | 	byte	0
24a35                 | LR__4115
24a35     2D          | 	byte	"-"
24a36     00          | 	byte	0
24a37                 | LR__4116
24a37     2A          | 	byte	"*"
24a38     00          | 	byte	0
24a39                 | LR__4117
24a39     2F          | 	byte	"/"
24a3a     00          | 	byte	0
24a3b                 | LR__4118
24a3b     5E          | 	byte	"^"
24a3c     00          | 	byte	0
24a3d                 | LR__4119
24a3d     3D          | 	byte	"="
24a3e     00          | 	byte	0
24a3f                 | LR__4120
24a3f     2B          | 	byte	"+"
24a40     00          | 	byte	0
24a41                 | LR__4121
24a41     2B          | 	byte	"+"
24a42     00          | 	byte	0
24a43                 | LR__4122
24a43     2D          | 	byte	"-"
24a44     00          | 	byte	0
24a45                 | LR__4123
24a45     2D          | 	byte	"-"
24a46     00          | 	byte	0
24a47                 | LR__4124
24a47     3C          | 	byte	"<"
24a48     00          | 	byte	0
24a49                 | LR__4125
24a49     3E          | 	byte	">"
24a4a     00          | 	byte	0
24a4b                 | LR__4126
24a4b     22          | 	byte	34
24a4c     00          | 	byte	0
24a4d                 | LR__4127
24a4d     22          | 	byte	34
24a4e     00          | 	byte	0
24a4f                 | LR__4128
24a4f                 | 	byte	
24a4f     00          | 	byte	0
24a50                 | LR__4129
24a50     6C 6F 61 64 | 	byte	"load"
24a54     00          | 	byte	0
24a55                 | LR__4130
24a55     73 61 76 65 | 	byte	"save"
24a59     00          | 	byte	0
24a5a                 | LR__4131
24a5a     62 72 75 6E | 	byte	"brun"
24a5e     00          | 	byte	0
24a5f                 | LR__4132
24a5f     6D 6F 75 73 
24a63     65          | 	byte	"mouse"
24a64     00          | 	byte	0
24a65                 | LR__4133
24a65     63 75 72 73 
24a69     6F 72       | 	byte	"cursor"
24a6b     00          | 	byte	0
24a6c                 | LR__4134
24a6c     63 6C 69 63 
24a70     6B          | 	byte	"click"
24a71     00          | 	byte	0
24a72                 | LR__4135
24a72     6F 6E       | 	byte	"on"
24a74     00          | 	byte	0
24a75                 | LR__4136
24a75     31          | 	byte	"1"
24a76     00          | 	byte	0
24a77                 | LR__4137
24a77     6F 66 66    | 	byte	"off"
24a7a     00          | 	byte	0
24a7b                 | LR__4138
24a7b     30          | 	byte	"0"
24a7c     00          | 	byte	0
24a7d                 | LR__4139
24a7d                 | 	byte	
24a7d     00          | 	byte	0
24a7e                 | LR__4140
24a7e                 | 	byte	
24a7e     00          | 	byte	0
24a7f                 | LR__4141
24a7f                 | 	byte	
24a7f     00          | 	byte	0
24a80                 | LR__4142
24a80                 | 	byte	
24a80     00          | 	byte	0
24a81                 | LR__4143
24a81     20 55 73 65 
24a85     72 20 66 75 
24a89     6E 63 74 69 
24a8d     6F 6E 73 20 
24a91     61 6E 64 20 
24a95     61 72 72 61 
24a99     79 73 20 6E 
24a9d     6F 74 20 79 
24aa1     65 74 20 69 
24aa5     6D 70 6C 65 
24aa9     6D 65 6E 74 
24aad     65 64       | 	byte	" User functions and arrays not yet implemented"
24aaf     00          | 	byte	0
24ab0                 | LR__4144
24ab0                 | 	byte	
24ab0     00          | 	byte	0
24ab1                 | LR__4145
24ab1                 | 	byte	
24ab1     00          | 	byte	0
24ab2                 | LR__4146
24ab2     52 65 61 64 
24ab6     79          | 	byte	"Ready"
24ab7     00          | 	byte	0
24ab8                 | LR__4147
24ab8     2B          | 	byte	"+"
24ab9     00          | 	byte	0
24aba                 | LR__4148
24aba     2D          | 	byte	"-"
24abb     00          | 	byte	0
24abc                 | LR__4149
24abc     6F 72       | 	byte	"or"
24abe     00          | 	byte	0
24abf                 | LR__4150
24abf     78 6F 72    | 	byte	"xor"
24ac2     00          | 	byte	0
24ac3                 | LR__4151
24ac3     2A          | 	byte	"*"
24ac4     00          | 	byte	0
24ac5                 | LR__4152
24ac5     2F          | 	byte	"/"
24ac6     00          | 	byte	0
24ac7                 | LR__4153
24ac7     61 6E 64    | 	byte	"and"
24aca     00          | 	byte	0
24acb                 | LR__4154
24acb     64 69 76    | 	byte	"div"
24ace     00          | 	byte	0
24acf                 | LR__4155
24acf     6D 6F 64    | 	byte	"mod"
24ad2     00          | 	byte	0
24ad3                 | LR__4156
24ad3     73 68 6C    | 	byte	"shl"
24ad6     00          | 	byte	0
24ad7                 | LR__4157
24ad7     73 68 72    | 	byte	"shr"
24ada     00          | 	byte	0
24adb                 | LR__4158
24adb     5E          | 	byte	"^"
24adc     00          | 	byte	0
24add                 | LR__4159
24add     6E 6F 74    | 	byte	"not"
24ae0     00          | 	byte	0
24ae1                 | LR__4160
24ae1     40          | 	byte	"@"
24ae2     00          | 	byte	0
24ae3                 | LR__4161
24ae3     3D          | 	byte	"="
24ae4     00          | 	byte	0
24ae5                 | LR__4162
24ae5     3E 3D       | 	byte	">="
24ae7     00          | 	byte	0
24ae8                 | LR__4163
24ae8     3C 3D       | 	byte	"<="
24aea     00          | 	byte	0
24aeb                 | LR__4164
24aeb     3C          | 	byte	"<"
24aec     00          | 	byte	0
24aed                 | LR__4165
24aed     3E          | 	byte	">"
24aee     00          | 	byte	0
24aef                 | LR__4166
24aef     3C 3E       | 	byte	"<>"
24af1     00          | 	byte	0
24af2                 | LR__4167
24af2     2B 2B       | 	byte	"++"
24af4     00          | 	byte	0
24af5                 | LR__4168
24af5     2D 2D       | 	byte	"--"
24af7     00          | 	byte	0
24af8                 | LR__4169
24af8     2B          | 	byte	"+"
24af9     00          | 	byte	0
24afa                 | LR__4170
24afa     2D          | 	byte	"-"
24afb     00          | 	byte	0
24afc                 | LR__4171
24afc     3D          | 	byte	"="
24afd     00          | 	byte	0
24afe                 | LR__4172
24afe     2C          | 	byte	","
24aff     00          | 	byte	0
24b00                 | LR__4173
24b00     2A          | 	byte	"*"
24b01     00          | 	byte	0
24b02                 | LR__4174
24b02     2F          | 	byte	"/"
24b03     00          | 	byte	0
24b04                 | LR__4175
24b04     3B          | 	byte	";"
24b05     00          | 	byte	0
24b06                 | LR__4176
24b06     22          | 	byte	34
24b07     00          | 	byte	0
24b08                 | LR__4177
24b08     5E          | 	byte	"^"
24b09     00          | 	byte	0
24b0a                 | LR__4178
24b0a     29          | 	byte	")"
24b0b     00          | 	byte	0
24b0c                 | LR__4179
24b0c     28          | 	byte	"("
24b0d     00          | 	byte	0
24b0e                 | LR__4180
24b0e     3A          | 	byte	":"
24b0f     00          | 	byte	0
24b10                 | LR__4181
24b10     20          | 	byte	" "
24b11     00          | 	byte	0
24b12                 | LR__4182
24b12     3E          | 	byte	">"
24b13     00          | 	byte	0
24b14                 | LR__4183
24b14     3C          | 	byte	"<"
24b15     00          | 	byte	0
24b16                 | LR__4184
24b16     3D          | 	byte	"="
24b17     00          | 	byte	0
24b18                 | LR__4185
24b18     63 6C 73    | 	byte	"cls"
24b1b     00          | 	byte	0
24b1c                 | LR__4186
24b1c     6E 65 77    | 	byte	"new"
24b1f     00          | 	byte	0
24b20                 | LR__4187
24b20     70 6C 6F 74 | 	byte	"plot"
24b24     00          | 	byte	0
24b25                 | LR__4188
24b25     64 72 61 77 | 	byte	"draw"
24b29     00          | 	byte	0
24b2a                 | LR__4189
24b2a     70 72 69 6E 
24b2e     74          | 	byte	"print"
24b2f     00          | 	byte	0
24b30                 | LR__4190
24b30     63 69 72 63 
24b34     6C 65       | 	byte	"circle"
24b36     00          | 	byte	0
24b37                 | LR__4191
24b37     66 63 69 72 
24b3b     63 6C 65    | 	byte	"fcircle"
24b3e     00          | 	byte	0
24b3f                 | LR__4192
24b3f     62 6F 78    | 	byte	"box"
24b42     00          | 	byte	0
24b43                 | LR__4193
24b43     66 72 61 6D 
24b47     65          | 	byte	"frame"
24b48     00          | 	byte	0
24b49                 | LR__4194
24b49     63 6F 6C 6F 
24b4d     72          | 	byte	"color"
24b4e     00          | 	byte	0
24b4f                 | LR__4195
24b4f     70 72 69 6E 
24b53     74          | 	byte	"print"
24b54     00          | 	byte	0
24b55                 | LR__4196
24b55     6C 69 73 74 | 	byte	"list"
24b59     00          | 	byte	0
24b5a                 | LR__4197
24b5a     72 75 6E    | 	byte	"run"
24b5d     00          | 	byte	0
24b5e                 | LR__4198
24b5e     67 6F 74 6F | 	byte	"goto"
24b62     00          | 	byte	0
24b63                 | LR__4199
24b63     63 73 61 76 
24b67     65          | 	byte	"csave"
24b68     00          | 	byte	0
24b69                 | LR__4200
24b69     73 61 76 65 | 	byte	"save"
24b6d     00          | 	byte	0
24b6e                 | LR__4201
24b6e     6C 6F 61 64 | 	byte	"load"
24b72     00          | 	byte	0
24b73                 | LR__4202
24b73     62 72 75 6E | 	byte	"brun"
24b77     00          | 	byte	0
24b78                 | LR__4203
24b78     70 69 6E 77 
24b7c     72 69 74 65 | 	byte	"pinwrite"
24b80     00          | 	byte	0
24b81                 | LR__4204
24b81     77 61 69 74 
24b85     6D 73       | 	byte	"waitms"
24b87     00          | 	byte	0
24b88                 | LR__4205
24b88     77 61 69 74 
24b8c     76 62 6C    | 	byte	"waitvbl"
24b8f     00          | 	byte	0
24b90                 | LR__4206
24b90     69 66       | 	byte	"if"
24b92     00          | 	byte	0
24b93                 | LR__4207
24b93     65 6C 73 65 | 	byte	"else"
24b97     00          | 	byte	0
24b98                 | LR__4208
24b98     74 68 65 6E | 	byte	"then"
24b9c     00          | 	byte	0
24b9d                 | LR__4209
24b9d     62 65 65 70 | 	byte	"beep"
24ba1     00          | 	byte	0
24ba2                 | LR__4210
24ba2     64 69 72    | 	byte	"dir"
24ba5     00          | 	byte	0
24ba6                 | LR__4211
24ba6     66 6F 72    | 	byte	"for"
24ba9     00          | 	byte	0
24baa                 | LR__4212
24baa     6E 65 78 74 | 	byte	"next"
24bae     00          | 	byte	0
24baf                 | LR__4213
24baf     70 61 70 65 
24bb3     72          | 	byte	"paper"
24bb4     00          | 	byte	0
24bb5                 | LR__4214
24bb5     69 6E 6B    | 	byte	"ink"
24bb8     00          | 	byte	0
24bb9                 | LR__4215
24bb9     66 6F 6E 74 | 	byte	"font"
24bbd     00          | 	byte	0
24bbe                 | LR__4216
24bbe     6D 6F 64 65 | 	byte	"mode"
24bc2     00          | 	byte	0
24bc3                 | LR__4217
24bc3     6D 6F 75 73 
24bc7     65          | 	byte	"mouse"
24bc8     00          | 	byte	0
24bc9                 | LR__4218
24bc9     63 75 72 73 
24bcd     6F 72       | 	byte	"cursor"
24bcf     00          | 	byte	0
24bd0                 | LR__4219
24bd0     63 6C 69 63 
24bd4     6B          | 	byte	"click"
24bd5     00          | 	byte	0
24bd6                 | LR__4220
24bd6     64 65 66 73 
24bda     70 72 69 74 
24bde     65          | 	byte	"defsprite"
24bdf     00          | 	byte	0
24be0                 | LR__4221
24be0     73 70 72 69 
24be4     74 65       | 	byte	"sprite"
24be6     00          | 	byte	0
24be7                 | LR__4222
24be7     77 61 69 74 
24beb     63 6C 6F 63 
24bef     6B          | 	byte	"waitclock"
24bf0     00          | 	byte	0
24bf1                 | LR__4223
24bf1     66 69 6C 6C | 	byte	"fill"
24bf5     00          | 	byte	0
24bf6                 | LR__4224
24bf6     64 69 6D    | 	byte	"dim"
24bf9     00          | 	byte	0
24bfa                 | LR__4225
24bfa     77 72 70 69 
24bfe     6E          | 	byte	"wrpin"
24bff     00          | 	byte	0
24c00                 | LR__4226
24c00     77 78 70 69 
24c04     6E          | 	byte	"wxpin"
24c05     00          | 	byte	0
24c06                 | LR__4227
24c06     77 79 70 69 
24c0a     6E          | 	byte	"wypin"
24c0b     00          | 	byte	0
24c0c                 | LR__4228
24c0c     70 69 6E 66 
24c10     6C 6F 61 74 | 	byte	"pinfloat"
24c14     00          | 	byte	0
24c15                 | LR__4229
24c15     70 69 6E 6C 
24c19     6F          | 	byte	"pinlo"
24c1a     00          | 	byte	0
24c1b                 | LR__4230
24c1b     70 69 6E 68 
24c1f     69          | 	byte	"pinhi"
24c20     00          | 	byte	0
24c21                 | LR__4231
24c21     70 69 6E 73 
24c25     74 61 72 74 | 	byte	"pinstart"
24c29     00          | 	byte	0
24c2a                 | LR__4232
24c2a     70 69 6E 74 
24c2e     6F 67 67 6C 
24c32     65          | 	byte	"pintoggle"
24c33     00          | 	byte	0
24c34                 | LR__4233
24c34     72 6E 64    | 	byte	"rnd"
24c37     00          | 	byte	0
24c38                 | LR__4234
24c38     6D 6F 75 73 
24c3c     65 78       | 	byte	"mousex"
24c3e     00          | 	byte	0
24c3f                 | LR__4235
24c3f     6D 6F 75 73 
24c43     65 79       | 	byte	"mousey"
24c45     00          | 	byte	0
24c46                 | LR__4236
24c46     6D 6F 75 73 
24c4a     65 6B       | 	byte	"mousek"
24c4c     00          | 	byte	0
24c4d                 | LR__4237
24c4d     6D 6F 75 73 
24c51     65 77       | 	byte	"mousew"
24c53     00          | 	byte	0
24c54                 | LR__4238
24c54     67 65 74 74 
24c58     69 6D 65    | 	byte	"gettime"
24c5b     00          | 	byte	0
24c5c                 | LR__4239
24c5c     73 69 6E    | 	byte	"sin"
24c5f     00          | 	byte	0
24c60                 | LR__4240
24c60     73 74 69 63 
24c64     6B          | 	byte	"stick"
24c65     00          | 	byte	0
24c66                 | LR__4241
24c66     73 74 72 69 
24c6a     67          | 	byte	"strig"
24c6b     00          | 	byte	0
24c6c                 | LR__4242
24c6c     67 65 74 70 
24c70     69 78 65 6C | 	byte	"getpixel"
24c74     00          | 	byte	0
24c75                 | LR__4243
24c75     72 64 70 69 
24c79     6E          | 	byte	"rdpin"
24c7a     00          | 	byte	0
24c7b                 | LR__4244
24c7b     70 69 6E 72 
24c7f     65 61 64    | 	byte	"pinread"
24c82     00          | 	byte	0
24c83                 | LR__4245
24c83     72 71 70 69 
24c87     6E          | 	byte	"rqpin"
24c88     00          | 	byte	0
24c89                 | LR__4246
24c89     61          | 	byte	"a"
24c8a     00          | 	byte	0
24c8b                 | LR__4247
24c8b     7A          | 	byte	"z"
24c8c     00          | 	byte	0
24c8d                 | LR__4248
24c8d     5F          | 	byte	"_"
24c8e     00          | 	byte	0
24c8f                 | LR__4249
24c8f     61          | 	byte	"a"
24c90     00          | 	byte	0
24c91                 | LR__4250
24c91     7A          | 	byte	"z"
24c92     00          | 	byte	0
24c93                 | LR__4251
24c93     30          | 	byte	"0"
24c94     00          | 	byte	0
24c95                 | LR__4252
24c95     39          | 	byte	"9"
24c96     00          | 	byte	0
24c97                 | LR__4253
24c97     5F          | 	byte	"_"
24c98     00          | 	byte	0
24c99                 | LR__4254
24c99     2E          | 	byte	"."
24c9a     00          | 	byte	0
24c9b                 | LR__4255
24c9b     61          | 	byte	"a"
24c9c     00          | 	byte	0
24c9d                 | LR__4256
24c9d     7A          | 	byte	"z"
24c9e     00          | 	byte	0
24c9f                 | LR__4257
24c9f     30          | 	byte	"0"
24ca0     00          | 	byte	0
24ca1                 | LR__4258
24ca1     39          | 	byte	"9"
24ca2     00          | 	byte	0
24ca3                 | LR__4259
24ca3     5F          | 	byte	"_"
24ca4     00          | 	byte	0
24ca5                 | LR__4260
24ca5     24          | 	byte	"$"
24ca6     00          | 	byte	0
24ca7                 | LR__4261
24ca7     25          | 	byte	"%"
24ca8     00          | 	byte	0
24ca9                 | LR__4262
24ca9     21          | 	byte	"!"
24caa     00          | 	byte	0
24cab                 | LR__4263
24cab     30          | 	byte	"0"
24cac     00          | 	byte	0
24cad                 | LR__4264
24cad     39          | 	byte	"9"
24cae     00          | 	byte	0
24caf                 | LR__4265
24caf     2E          | 	byte	"."
24cb0     00          | 	byte	0
24cb1                 | LR__4266
24cb1     24          | 	byte	"$"
24cb2     00          | 	byte	0
24cb3                 | LR__4267
24cb3     25          | 	byte	"%"
24cb4     00          | 	byte	0
24cb5                 | LR__4268
24cb5     2D          | 	byte	"-"
24cb6     00          | 	byte	0
24cb7                 | LR__4269
24cb7     2E          | 	byte	"."
24cb8     00          | 	byte	0
24cb9                 | LR__4270
24cb9     30          | 	byte	"0"
24cba     00          | 	byte	0
24cbb                 | LR__4271
24cbb     39          | 	byte	"9"
24cbc     00          | 	byte	0
24cbd                 | LR__4272
24cbd     5F          | 	byte	"_"
24cbe     00          | 	byte	0
24cbf                 | LR__4273
24cbf     2E          | 	byte	"."
24cc0     00          | 	byte	0
24cc1                 | LR__4274
24cc1     45          | 	byte	"E"
24cc2     00          | 	byte	0
24cc3                 | LR__4275
24cc3     65          | 	byte	"e"
24cc4     00          | 	byte	0
24cc5                 | LR__4276
24cc5     2D          | 	byte	"-"
24cc6     00          | 	byte	0
24cc7                 | LR__4277
24cc7     2D          | 	byte	"-"
24cc8     00          | 	byte	0
24cc9                 | LR__4278
24cc9     65          | 	byte	"e"
24cca     00          | 	byte	0
24ccb                 | LR__4279
24ccb     2E          | 	byte	"."
24ccc     00          | 	byte	0
24ccd                 | LR__4280
24ccd     45          | 	byte	"E"
24cce     00          | 	byte	0
24ccf                 | LR__4281
24ccf     65          | 	byte	"e"
24cd0     00          | 	byte	0
24cd1                 | LR__4282
24cd1     30          | 	byte	"0"
24cd2     00          | 	byte	0
24cd3                 | LR__4283
24cd3     39          | 	byte	"9"
24cd4     00          | 	byte	0
24cd5                 | LR__4284
24cd5     24          | 	byte	"$"
24cd6     00          | 	byte	0
24cd7                 | LR__4285
24cd7     25          | 	byte	"%"
24cd8     00          | 	byte	0
24cd9                 | LR__4286
24cd9     2D          | 	byte	"-"
24cda     00          | 	byte	0
24cdb                 | LR__4287
24cdb     30          | 	byte	"0"
24cdc     00          | 	byte	0
24cdd                 | LR__4288
24cdd     39          | 	byte	"9"
24cde     00          | 	byte	0
24cdf                 | LR__4289
24cdf     5F          | 	byte	"_"
24ce0     00          | 	byte	0
24ce1                 | LR__4290
24ce1     30          | 	byte	"0"
24ce2     00          | 	byte	0
24ce3                 | LR__4291
24ce3     39          | 	byte	"9"
24ce4     00          | 	byte	0
24ce5                 | LR__4292
24ce5     5F          | 	byte	"_"
24ce6     00          | 	byte	0
24ce7                 | LR__4293
24ce7     22          | 	byte	34
24ce8     00          | 	byte	0
24ce9                 | LR__4294
24ce9     22          | 	byte	34
24cea     00          | 	byte	0
24ceb                 | LR__4295
24ceb     28          | 	byte	"("
24cec     00          | 	byte	0
24ced                 | LR__4296
24ced     61 73       | 	byte	"as"
24cef     00          | 	byte	0
24cf0                 | LR__4297
24cf0     61 73       | 	byte	"as"
24cf2     00          | 	byte	0
24cf3                 | LR__4298
24cf3     2C          | 	byte	","
24cf4     00          | 	byte	0
24cf5                 | LR__4299
24cf5     29          | 	byte	")"
24cf6     00          | 	byte	0
24cf7                 | LR__4300
24cf7     29          | 	byte	")"
24cf8     00          | 	byte	0
24cf9                 | LR__4301
24cf9     61 73       | 	byte	"as"
24cfb     00          | 	byte	0
24cfc                 | LR__4302
24cfc     62 79 74 65 | 	byte	"byte"
24d00     00          | 	byte	0
24d01                 | LR__4303
24d01     75 62 79 74 
24d05     65          | 	byte	"ubyte"
24d06     00          | 	byte	0
24d07                 | LR__4304
24d07     73 68 6F 72 
24d0b     74          | 	byte	"short"
24d0c     00          | 	byte	0
24d0d                 | LR__4305
24d0d     75 73 68 6F 
24d11     72 74       | 	byte	"ushort"
24d13     00          | 	byte	0
24d14                 | LR__4306
24d14     6C 6F 6E 67 | 	byte	"long"
24d18     00          | 	byte	0
24d19                 | LR__4307
24d19     69 6E 74 65 
24d1d     67 65 72    | 	byte	"integer"
24d20     00          | 	byte	0
24d21                 | LR__4308
24d21     75 6C 6F 6E 
24d25     67          | 	byte	"ulong"
24d26     00          | 	byte	0
24d27                 | LR__4309
24d27     69 6E 74 36 
24d2b     34          | 	byte	"int64"
24d2c     00          | 	byte	0
24d2d                 | LR__4310
24d2d     75 69 6E 74 
24d31     36 34       | 	byte	"uint64"
24d33     00          | 	byte	0
24d34                 | LR__4311
24d34     73 69 6E 67 
24d38     6C 65       | 	byte	"single"
24d3a     00          | 	byte	0
24d3b                 | LR__4312
24d3b     64 6F 75 62 
24d3f     6C 65       | 	byte	"double"
24d41     00          | 	byte	0
24d42                 | LR__4313
24d42     73 74 72 69 
24d46     6E 67       | 	byte	"string"
24d48     00          | 	byte	0
24d49                 | LR__4314
24d49     74 6F       | 	byte	"to"
24d4b     00          | 	byte	0
24d4c                 | LR__4315
24d4c     73 74 65 70 | 	byte	"step"
24d50     00          | 	byte	0
24d51                 | LR__4316
24d51     57 65 20 68 
24d55     61 76 65 20 
24d59     61 20 73 6C 
24d5d     6F 77 20 67 
24d61     6F 74 6F 2C 
24d65     20 74 6F 64 
24d69     6F 20 20    | 	byte	"We have a slow goto, todo  "
24d6c     00          | 	byte	0
24d6d                 | LR__4317
24d6d     6E 6F 6E 61 
24d71     6D 65 2E 62 
24d75     61 73       | 	byte	"noname.bas"
24d77     00          | 	byte	0
24d78                 | LR__4318
24d78                 | 	byte	
24d78     00          | 	byte	0
24d79                 | LR__4319
24d79     6E 6F 6E 61 
24d7d     6D 65 2E 62 
24d81     61 73       | 	byte	"noname.bas"
24d83     00          | 	byte	0
24d84                 | LR__4320
24d84     2F          | 	byte	"/"
24d85     00          | 	byte	0
24d86                 | LR__4321
24d86                 | 	byte	
24d86     00          | 	byte	0
24d87                 | LR__4322
24d87                 | 	byte	
24d87     00          | 	byte	0
24d88                 | LR__4323
24d88     6E 6F 6E 61 
24d8c     6D 65 2E 62 
24d90     61 73       | 	byte	"noname.bas"
24d92     00          | 	byte	0
24d93                 | LR__4324
24d93     2F          | 	byte	"/"
24d94     00          | 	byte	0
24d95                 | LR__4325
24d95     53 79 73 74 
24d99     65 6D 20 65 
24d9d     72 72 6F 72 
24da1     20          | 	byte	"System error "
24da2     00          | 	byte	0
24da3                 | LR__4326
24da3     3A 20       | 	byte	": "
24da5     00          | 	byte	0
24da6                 | LR__4327
24da6     2F          | 	byte	"/"
24da7     00          | 	byte	0
24da8                 | LR__4328
24da8     30          | 	byte	"0"
24da9     00          | 	byte	0
24daa                 | LR__4329
24daa     39          | 	byte	"9"
24dab     00          | 	byte	0
24dac                 | LR__4330
24dac                 | 	byte	
24dac     00          | 	byte	0
24dad                 | LR__4331
24dad     53 74 6F 70 
24db1     70 65 64 20 
24db5     61 74 20 6C 
24db9     69 6E 65 20 | 	byte	"Stopped at line "
24dbd     00          | 	byte	0
24dbe                 | LR__4332
24dbe     45 72 72 6F 
24dc2     72 20       | 	byte	"Error "
24dc4     00          | 	byte	0
24dc5                 | LR__4333
24dc5     3A 20       | 	byte	": "
24dc7     00          | 	byte	0
24dc8                 | LR__4334
24dc8                 | 	byte	
24dc8     00          | 	byte	0
24dc9                 | LR__4335
24dc9     72 6E 64 3A 
24dcd     20          | 	byte	"rnd: "
24dce     00          | 	byte	0
24dcf                 | LR__4336
24dcf     72 6E 64 3A 
24dd3     20          | 	byte	"rnd: "
24dd4     00          | 	byte	0
24dd5                 | LR__4337
24dd5     73 69 6E 3A 
24dd9     20          | 	byte	"sin: "
24dda     00          | 	byte	0
24ddb                 | LR__4338
24ddb     73 69 6E 3A 
24ddf     20          | 	byte	"sin: "
24de0     00          | 	byte	0
24de1                 | LR__4339
24de1     73 74 69 63 
24de5     6B 3A 20    | 	byte	"stick: "
24de8     00          | 	byte	0
24de9                 | LR__4340
24de9     73 74 72 69 
24ded     67 3A 20    | 	byte	"strig: "
24df0     00          | 	byte	0
24df1                 | LR__4341
24df1     67 65 74 70 
24df5     69 78 65 6C 
24df9     3A 20       | 	byte	"getpixel: "
24dfb     00          | 	byte	0
24dfc                 | LR__4342
24dfc                 | 	byte	
24dfc     00          | 	byte	0
24dfd                 | LR__4343
24dfd     2F 73 64 2F 
24e01     62 61 73    | 	byte	"/sd/bas"
24e04     00          | 	byte	0
24e05                 | LR__4344
24e05     57 6F 72 6B 
24e09     69 6E 67 20 
24e0d     64 69 72 65 
24e11     63 74 6F 72 
24e15     79 3A 20    | 	byte	"Working directory: "
24e18     00          | 	byte	0
24e19                 | LR__4345
24e19     2A          | 	byte	"*"
24e1a     00          | 	byte	0
24e1b                 | LR__4346
24e1b                 | 	byte	
24e1b     00          | 	byte	0
24e1c                 | LR__4347
24e1c     5B 64 69 72 
24e20     5D 20       | 	byte	"[dir] "
24e22     00          | 	byte	0
24e23                 | LR__4348
24e23     2A          | 	byte	"*"
24e24     00          | 	byte	0
24e25                 | LR__4349
24e25                 | 	byte	
24e25     00          | 	byte	0
24e26                 | LR__4350
24e26     2D 2D 2D 2D 
24e2a     2D 6D 6F 72 
24e2e     65 2C 20 70 
24e32     72 65 73 73 
24e36     20 61 6E 79 
24e3a     20 6B 65 79 | 	byte	"-----more, press any key"
24e3e     00          | 	byte	0
24e3f                 | LR__4351
24e3f     20 20 20 20 
      ...             
24e57     20 20 20 20 
24e5b     20          | 	byte	"                             "
24e5c     00          | 	byte	0
24e5d                 | LR__4352
24e5d     2F          | 	byte	"/"
24e5e     00          | 	byte	0
24e5f                 | LR__4353
24e5f     2F 73 64 2F 
24e63     62 69 6E 2F | 	byte	"/sd/bin/"
24e67     00          | 	byte	0
24e68                 | LR__4354
24e68     53 79 73 74 
24e6c     65 6D 20 65 
24e70     72 72 6F 72 
24e74     20          | 	byte	"System error "
24e75     00          | 	byte	0
24e76                 | LR__4355
24e76     3A 20       | 	byte	": "
24e78     00          | 	byte	0
24e79                 | LR__4356
24e79                 | 	byte	
24e79     00          | 	byte	0
24e7a                 | LR__4357
24e7a     45 78 70 65 
24e7e     63 74 65 64 
24e82     20 6E 75 6D 
24e86     62 65 72 2C 
24e8a     20 67 6F 74 
24e8e     20 73 6F 6D 
24e92     65 74 68 69 
24e96     6E 67 20 65 
24e9a     6C 73 65 2E | 	byte	"Expected number, got something else."
24e9e     00          | 	byte	0
24e9f                 | LR__4358
24e9f     43 61 6E 6E 
24ea3     6F 74 20 61 
24ea7     64 64 20 61 
24eab     20 6E 75 6D 
24eaf     62 65 72 20 
24eb3     74 6F 20 61 
24eb7     20 73 74 72 
24ebb     69 6E 67 2E | 	byte	"Cannot add a number to a string."
24ebf     00          | 	byte	0
24ec0                 | LR__4359
24ec0     43 61 6E 6E 
24ec4     6F 74 20 73 
24ec8     75 62 73 74 
24ecc     72 61 63 74 
24ed0     20 73 74 72 
24ed4     69 6E 67 73 
24ed8     2E          | 	byte	"Cannot substract strings."
24ed9     00          | 	byte	0
24eda                 | LR__4360
24eda     55 6E 6B 6E 
24ede     6F 77 6E 20 
24ee2     65 72 72 6F 
24ee6     72 20 77 68 
24eea     69 6C 65 20 
24eee     61 64 64 69 
24ef2     6E 67 2E    | 	byte	"Unknown error while adding."
24ef5     00          | 	byte	0
24ef6                 | LR__4361
24ef6     55 6E 6B 6E 
24efa     6F 77 6E 20 
24efe     65 72 72 6F 
24f02     72 20 77 68 
24f06     69 6C 65 20 
24f0a     73 75 62 73 
24f0e     74 72 61 63 
24f12     74 69 6E 67 
24f16     2E          | 	byte	"Unknown error while substracting."
24f17     00          | 	byte	0
24f18                 | LR__4362
24f18     43 61 6E 6E 
24f1c     6F 74 20 64 
24f20     6F 20 6C 6F 
24f24     67 69 63 20 
24f28     6F 70 65 72 
24f2c     61 74 69 6F 
24f30     6E 20 6F 6E 
24f34     20 73 74 72 
24f38     69 6E 67 20 
24f3c     6F 72 20 66 
24f40     6C 6F 61 74 
24f44     2E          | 	byte	"Cannot do logic operation on string or float."
24f45     00          | 	byte	0
24f46                 | LR__4363
24f46     55 6E 6B 6E 
24f4a     6F 77 6E 20 
24f4e     65 72 72 6F 
24f52     72 20 77 68 
24f56     69 6C 65 20 
24f5a     64 6F 69 6E 
24f5e     67 20 6C 6F 
24f62     67 69 63 20 
24f66     6F 70 65 72 
24f6a     61 74 69 6F 
24f6e     6E 2E       | 	byte	"Unknown error while doing logic operation."
24f70     00          | 	byte	0
24f71                 | LR__4364
24f71     43 61 6E 6E 
24f75     6F 74 20 6D 
24f79     75 6C 74 69 
24f7d     70 6C 79 20 
24f81     73 74 72 69 
24f85     6E 67 73 2E | 	byte	"Cannot multiply strings."
24f89     00          | 	byte	0
24f8a                 | LR__4365
24f8a     55 6E 6B 6E 
24f8e     6F 77 6E 20 
24f92     65 72 72 6F 
24f96     72 20 77 68 
24f9a     69 6C 65 20 
24f9e     6D 75 6C 74 
24fa2     69 70 6C 79 
24fa6     69 6E 67 2E | 	byte	"Unknown error while multiplying."
24faa     00          | 	byte	0
24fab                 | LR__4366
24fab     43 61 6E 6E 
24faf     6F 74 20 64 
24fb3     69 76 69 64 
24fb7     65 20 73 74 
24fbb     72 69 6E 67 
24fbf     73 2E       | 	byte	"Cannot divide strings."
24fc1     00          | 	byte	0
24fc2                 | LR__4367
24fc2     55 6E 6B 6E 
24fc6     6F 77 6E 20 
24fca     65 72 72 6F 
24fce     72 20 77 68 
24fd2     69 6C 65 20 
24fd6     64 69 76 69 
24fda     64 69 6E 67 
24fde     2E          | 	byte	"Unknown error while dividing."
24fdf     00          | 	byte	0
24fe0                 | LR__4368
24fe0     43 61 6E 6E 
24fe4     6F 74 20 63 
24fe8     6F 6D 70 75 
24fec     74 65 20 61 
24ff0     20 70 6F 77 
24ff4     65 72 20 6F 
24ff8     66 20 61 20 
24ffc     73 74 72 69 
25000     6E 67 2E    | 	byte	"Cannot compute a power of a string."
25003     00          | 	byte	0
25004                 | LR__4369
25004     55 6E 6B 6E 
25008     6F 77 6E 20 
2500c     65 72 72 6F 
25010     72 20 77 68 
25014     69 6C 65 20 
25018     63 6F 6D 70 
2501c     75 74 69 6E 
25020     67 20 61 20 
25024     70 6F 77 65 
25028     72 2E       | 	byte	"Unknown error while computing a power."
2502a     00          | 	byte	0
2502b                 | LR__4370
2502b     52 69 67 68 
2502f     74 20 70 61 
25033     72 65 6E 74 
25037     68 65 73 69 
2503b     73 20 65 78 
2503f     70 65 63 74 
25043     65 64 2E    | 	byte	"Right parenthesis expected."
25046     00          | 	byte	0
25047                 | LR__4371
25047     45 78 70 65 
2504b     63 74 65 64 
2504f     20 73 74 72 
25053     69 6E 67 2E | 	byte	"Expected string."
25057     00          | 	byte	0
25058                 | LR__4372
25058     45 78 70 65 
2505c     63 74 65 64 
25060     20 66 6C 6F 
25064     61 74 2E    | 	byte	"Expected float."
25067     00          | 	byte	0
25068                 | LR__4373
25068     45 78 70 65 
2506c     63 74 65 64 
25070     20 75 6E 73 
25074     69 67 6E 65 
25078     64 20 69 6E 
2507c     74 65 67 65 
25080     72 2E       | 	byte	"Expected unsigned integer."
25082     00          | 	byte	0
25083                 | LR__4374
25083     45 78 70 65 
25087     63 74 65 64 
2508b     20 69 6E 74 
2508f     65 67 65 72 
25093     2E          | 	byte	"Expected integer."
25094     00          | 	byte	0
25095                 | LR__4375
25095     4E 6F 20 6D 
25099     6F 72 65 20 
2509d     76 61 72 69 
250a1     61 62 6C 65 
250a5     20 73 6C 6F 
250a9     74 73 2E    | 	byte	"No more variable slots."
250ac     00          | 	byte	0
250ad                 | LR__4376
250ad     56 61 72 69 
250b1     61 62 6C 65 
250b5     20 6E 6F 74 
250b9     20 66 6F 75 
250bd     6E 64 2E    | 	byte	"Variable not found."
250c0     00          | 	byte	0
250c1                 | LR__4377
250c1     43 6F 6D 6D 
250c5     61 20 65 78 
250c9     70 65 63 74 
250cd     65 64 2E    | 	byte	"Comma expected."
250d0     00          | 	byte	0
250d1                 | LR__4378
250d1     43 6F 6D 6D 
250d5     61 20 6F 72 
250d9     20 73 65 6D 
250dd     69 63 6F 6C 
250e1     6F 6E 20 65 
250e5     78 70 65 63 
250e9     74 65 64 2E | 	byte	"Comma or semicolon expected."
250ed     00          | 	byte	0
250ee                 | LR__4379
250ee     55 6E 6B 6E 
250f2     6F 77 6E 20 
250f6     63 6F 6D 6D 
250fa     61 6E 64 2E | 	byte	"Unknown command."
250fe     00          | 	byte	0
250ff                 | LR__4380
250ff     53 74 61 63 
25103     6B 20 75 6E 
25107     64 65 72 66 
2510b     6C 6F 77 2E | 	byte	"Stack underflow."
2510f     00          | 	byte	0
25110                 | LR__4381
25110     43 61 6E 6E 
25114     6F 74 20 65 
25118     78 65 63 75 
2511c     74 65 20 67 
25120     6F 74 6F 20 
25124     69 6E 20 74 
25128     68 65 20 69 
2512c     6D 6D 65 64 
25130     69 61 74 65 
25134     20 6D 6F 64 
25138     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
2513a     00          | 	byte	0
2513b                 | LR__4382
2513b     43 61 6E 6E 
2513f     6F 74 20 6C 
25143     6F 61 64 20 
25147     66 72 6F 6D 
2514b     20 74 68 69 
2514f     73 20 66 69 
25153     6C 65 2E    | 	byte	"Cannot load from this file."
25156     00          | 	byte	0
25157                 | LR__4383
25157     54 68 65 20 
2515b     70 72 6F 67 
2515f     72 61 6D 20 
25163     69 73 20 65 
25167     6D 70 74 79 
2516b     2E          | 	byte	"The program is empty."
2516c     00          | 	byte	0
2516d                 | LR__4384
2516d     49 66 20 61 
25171     66 74 65 72 
25175     20 69 66 2E | 	byte	"If after if."
25179     00          | 	byte	0
2517a                 | LR__4385
2517a     45 6D 70 74 
2517e     79 20 65 78 
25182     70 72 65 73 
25186     73 69 6F 6E 
2518a     2E          | 	byte	"Empty expression."
2518b     00          | 	byte	0
2518c                 | LR__4386
2518c     53 74 72 69 
25190     6E 67 20 65 
25194     78 70 65 63 
25198     74 65 64 2E | 	byte	"String expected."
2519c     00          | 	byte	0
2519d                 | LR__4387
2519d     49 6E 74 65 
251a1     72 70 72 65 
251a5     74 65 72 20 
251a9     69 6E 74 65 
251ad     72 6E 61 6C 
251b1     20 65 72 72 
251b5     6F 72 2E    | 	byte	"Interpreter internal error."
251b8     00          | 	byte	0
251b9                 | LR__4388
251b9     45 78 70 65 
251bd     63 74 65 64 
251c1     20 61 73 73 
251c5     69 67 6E 2E | 	byte	"Expected assign."
251c9     00          | 	byte	0
251ca                 | LR__4389
251ca     45 78 70 65 
251ce     63 74 65 64 
251d2     20 27 74 6F 
251d6     27 2E       | 	byte	"Expected 'to'."
251d8     00          | 	byte	0
251d9                 | LR__4390
251d9     45 78 70 65 
251dd     63 74 65 64 
251e1     20 69 6E 74 
251e5     65 67 65 72 
251e9     20 76 61 72 
251ed     69 61 62 6C 
251f1     65 2E       | 	byte	"Expected integer variable."
251f3     00          | 	byte	0
251f4                 | LR__4391
251f4     55 6E 69 6E 
251f8     69 74 69 61 
251fc     6C 69 7A 65 
25200     64 20 76 61 
25204     72 69 61 62 
25208     6C 65 20 69 
2520c     6E 20 27 6E 
25210     65 78 74 27 
25214     2C 20 75 73 
25218     65 20 27 66 
2521c     6F 72 27 20 
25220     62 65 66 6F 
25224     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
25227     00          | 	byte	0
25228                 | LR__4392
25228     4E 6F 20 6D 
2522c     6F 72 65 20 
25230     73 6C 6F 74 
25234     73 20 66 6F 
25238     72 20 27 66 
2523c     6F 72 27 2E | 	byte	"No more slots for 'for'."
25240     00          | 	byte	0
25241                 | LR__4393
25241     27 4E 65 78 
25245     74 27 20 64 
25249     6F 65 73 6E 
2524d     27 74 20 6D 
25251     61 74 63 68 
25255     20 27 66 6F 
25259     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
2525c     00          | 	byte	0
2525d                 | LR__4394
2525d     27 47 6F 74 
25261     6F 27 20 74 
25265     61 72 67 65 
25269     74 20 6C 69 
2526d     6E 65 20 6E 
25271     6F 74 20 66 
25275     6F 75 6E 64 
25279     2E          | 	byte	"'Goto' target line not found."
2527a     00          | 	byte	0
2527b                 | LR__4395
2527b     42 61 64 20 
2527f     6E 75 6D 62 
25283     65 72 20 6F 
25287     66 20 70 61 
2528b     72 61 6D 65 
2528f     74 65 72 73 | 	byte	"Bad number of parameters"
25293     00          | 	byte	0
25294                 | LR__4396
25294     46 75 6E 63 
25298     74 69 6F 6E 
2529c     20 75 6E 64 
252a0     65 66 69 6E 
252a4     65 64 20 66 
252a8     6F 72 20 73 
252ac     74 72 69 6E 
252b0     67 73       | 	byte	"Function undefined for strings"
252b2     00          | 	byte	0
252b3                 | LR__4397
252b3     42 61 64 20 
252b7     70 61 72 61 
252bb     6D 65 74 65 
252bf     72 2E       | 	byte	"Bad parameter."
252c1     00          | 	byte	0
252c2                 | LR__4398
252c2     43 61 6E 6E 
252c6     6F 74 20 64 
252ca     65 63 6C 61 
252ce     72 65 20 61 
252d2     6E 20 61 72 
252d6     72 61 79 3A 
252da     20 74 68 65 
252de     20 76 61 72 
252e2     69 61 62 6C 
252e6     65 20 65 78 
252ea     69 73 74 73 
252ee     2E          | 	byte	"Cannot declare an array: the variable exists."
252ef     00          | 	byte	0
252f0                 | LR__4399
252f0     45 78 70 65 
252f4     63 74 65 64 
252f8     20 27 28 27 
252fc     2E          | 	byte	"Expected '('."
252fd     00          | 	byte	0
252fe                 | LR__4400
252fe     45 78 70 65 
25302     63 74 65 64 
25306     20 27 29 27 
2530a     20 6F 72 20 
2530e     27 2C 27 2E | 	byte	"Expected ')' or ','."
25312     00          | 	byte	0
25313                 | LR__4401
25313     4E 6F 20 6D 
25317     6F 72 65 20 
2531b     74 68 61 6E 
2531f     20 33 20 64 
25323     69 6D 65 6E 
25327     73 69 6F 6E 
2532b     73 20 73 75 
2532f     70 70 6F 72 
25333     74 65 64    | 	byte	"No more than 3 dimensions supported"
25336     00          | 	byte	0
25337                 | LR__4402
25337     56 61 72 69 
2533b     61 62 6C 65 
2533f     20 6E 61 6D 
25343     65 20 65 78 
25347     70 65 63 74 
2534b     65 64       | 	byte	"Variable name expected"
2534d     00          | 	byte	0
2534e                 | LR__4403
2534e     54 79 70 65 
25352     20 6E 61 6D 
25356     65 20 65 78 
2535a     70 65 63 74 
2535e     65 64       | 	byte	"Type name expected"
25360     00          | 	byte	0
25361                 | LR__4404
25361     54 79 70 65 
25365     20 6E 6F 74 
25369     20 73 75 70 
2536d     70 6F 72 74 
25371     65 64 20 79 
25375     65 74       | 	byte	"Type not supported yet"
25377     00          | 	byte	0
25378                 | LR__4405
25378     45 72 72 6F 
2537c     72 20       | 	byte	"Error "
2537e     00          | 	byte	0
2537f                 | LR__4406
2537f     3A 20       | 	byte	": "
25381     00          | 	byte	0
25382                 | LR__4407
25382     2F 73 64    | 	byte	"/sd"
25385     00          | 	byte	0
25386                 | LR__4408
25386     2F 73 64 2F 
2538a     62 61 73    | 	byte	"/sd/bas"
2538d     00          | 	byte	0
2538e                 | LR__4409
2538e     2F 73 64 2F 
25392     62 61 73    | 	byte	"/sd/bas"
25395     00          | 	byte	0
25396                 | LR__4410
25396     20 42 41 53 
2539a     49 43 20 62 
2539e     79 74 65 73 
253a2     20 66 72 65 
253a6     65          | 	byte	" BASIC bytes free"
253a7     00          | 	byte	0
253a8                 | LR__4411
253a8     52 65 61 64 
253ac     79          | 	byte	"Ready"
253ad     00          | 	byte	0
253ae                 | LR__4412
253ae     20          | 	byte	" "
253af     00          | 	byte	0
253b0                 | LR__4413
253b0     20          | 	byte	" "
253b1     00          | 	byte	0
253b2                 | LR__4414
253b2                 | 	byte	
253b2     00          | 	byte	0
253b3                 | LR__4415
253b3                 | 	byte	
253b3     00          | 	byte	0
253b4                 | 	alignl
253b4                 | _dat_
253b4     00 00 00 00 
253b8     00 00 00 00 
253bc     00 00 00 00 
253c0     00 00 00 00 | 	byte	$00[16]
253c4     61 41 17 0E 
253c8     62 42 00 00 
253cc     63 43 19 10 
253d0     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
253d4     65 45 18 0F 
253d8     66 46 00 00 
253dc     67 47 00 00 
253e0     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
253e4     69 49 00 00 
253e8     6A 4A 00 00 
253ec     6B 4B 00 00 
253f0     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
253f4     6D 4D 00 00 
253f8     6E 4E 1A 11 
253fc     6F 4F 1E 15 
25400     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
25404     71 51 00 00 
25408     72 52 00 00 
2540c     73 53 1B 12 
25410     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
25414     75 55 00 00 
25418     76 56 00 00 
2541c     77 57 00 00 
25420     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
25424     79 59 00 00 
25428     7A 5A 1D 14 
2542c     31 21 04 00 
25430     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
25434     33 23 06 00 
25438     34 24 07 00 
2543c     35 25 08 00 
25440     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
25444     37 26 0A 00 
25448     38 2A 0B 00 
2544c     39 28 0C 00 
25450     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
25454     8D 8D 00 00 
25458     9B 9B 00 00 
2545c     88 88 00 00 
25460     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
25464     20 20 00 00 
25468     2D 5F 00 00 
2546c     3D 2B 00 00 
25470     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
25474     5D 7D 00 00 
25478     5C 7C 00 00 
2547c     23 7E 00 00 
25480     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
25484     27 22 00 00 
25488     60 7E 03 00 
2548c     2C 3C 00 00 
25490     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
25494     2F 3F 00 00 
25498     B9 B9 00 00 
2549c     BA 00 00 00 
254a0     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
254a4     BC 00 00 00 
254a8     BD 00 00 00 
254ac     BE 00 00 00 
254b0     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
254b4     C0 00 00 00 
254b8     C1 00 00 00 
254bc     C2 00 00 00 
254c0     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
254c4     C4 00 00 00 
254c8     C5 00 00 00 
254cc     C6 00 00 00 
254d0     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
254d4     C8 00 00 00 
254d8     C9 00 00 00 
254dc     CA 00 00 00 
254e0     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
254e4     7F 7F 00 00 
254e8     CC 00 00 00 
254ec     CD 00 00 00 
254f0     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
254f4     CF 00 00 00 
254f8     D0 00 00 00 
254fc     D1 00 00 00 
25500     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
25504     2F 2F 00 00 
25508     2A 2A 00 00 
2550c     2D 2D 00 00 
25510     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
25514     8D 8D 00 00 
25518     31 31 00 00 
2551c     32 32 00 00 
25520     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
25524     34 34 00 00 
25528     35 35 00 00 
2552c     36 36 00 00 
25530     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
25534     38 38 00 00 
25538     39 39 00 00 
2553c     30 30 00 00 
25540     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
25544     5C 7C 00 00 
25548     00 00 00 00 
2554c     00 00 00 00 
25550     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
25554     00 00 00 00 
      ...             
255ac     00 00 00 00 
255b0     00 00 00 00 | 	byte	$00[96]
255b4     2B 00 A6 F2 
255b8     24 A7 09 80 
255bc     5B 88 4D 89 
255c0     80 88 A5 88 | atari_spl file "atari.spl"
255c4     6D 88 B8 88 
255c8     80 88 CB 88 
255cc     92 88 A5 88 
255d0     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
255d4     A5 88 CA 88 
255d8     A6 88 DD 88 
255dc     B8 88 AB 89 
255e0     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
255e4     C8 AD C6 F1 
255e8     91 06 B6 FF 
255ec     13 00 4A 00 
255f0     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
255f4     5D 00 5E 00 
255f8     5D 00 5E 00 
255fc     5E 00 5D 00 
25600     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
25604     38 00 83 00 
25608     25 00 83 00 
2560c     C3 FE D1 04 
25610     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
25614     48 88 38 85 
25618     41 8A CB 88 
2561c     28 89 B8 88 
25620     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
25624     15 89 03 89 
25628     02 89 15 89 
2562c     16 89 15 89 
25630     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
25634     15 89 3A 89 
25638     72 89 E3 89 
2563c     52 83 AD 97 
25640     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
25644     0C 02 B6 FF 
25648     E1 00 A8 00 
2564c     F3 00 A8 00 
25650     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
25654     CE 00 CD 00 
25658     CD 00 BA 00 
2565c     E1 00 BB 00 
25660     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
25664     DF 00 C9 FF 
25668     E6 01 B6 06 
2566c     EE DD 8D 98 
25670     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
25674     97 89 73 89 
25678     3B 89 60 89 
2567c     60 89 60 89 
25680     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
25684     73 89 72 89 
25688     85 89 73 89 
2568c     AA 89 60 89 
25690     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
25694     E8 8A 18 86 
25698     92 88 A5 C2 
2569c     E0 00 C3 05 
256a0     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
256a4     F2 00 64 01 
256a8     06 01 3E 01 
256ac     2B 01 2B 01 
256b0     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
256b4     2B 01 2A 01 
256b8     2B 01 2B 01 
256bc     2B 01 18 01 
256c0     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
256c4     39 07 61 F3 
256c8     C0 AF 37 85 
256cc     0F 88 8B 8A 
256d0     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
256d4     AB 89 D0 89 
256d8     AB 89 D0 89 
256dc     D0 89 CF 89 
256e0     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
256e4     D0 89 F5 89 
256e8     BD 89 08 8A 
256ec     CF 89 E8 8A 
256f0     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
256f4     53 B3 0D F8 
256f8     F4 07 38 00 
256fc     63 01 63 01 
25700     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
25704     88 01 88 01 
25708     76 01 88 01 
2570c     88 01 89 01 
25710     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
25714     75 01 AE 01 
25718     76 01 88 01 
2571c     4A 00 46 06 
25720     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
25724     08 8A 9A 86 
25728     33 8B 08 8A 
2572c     2D 8A F5 89 
25730     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
25734     2D 8A 2D 8A 
25738     2E 8A 1B 8A 
2573c     40 8A 2D 8A 
25740     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
25744     2E 8A 79 8A 
25748     66 8A C8 8B 
2574c     72 82 2B 97 
25750     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
25754     1D 02 05 01 
25758     F8 01 C0 01 
2575c     0B 02 C0 01 
25760     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
25764     F9 01 D3 01 
25768     F8 01 D3 01 
2576c     F8 01 D2 01 
25770     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
25774     E6 01 2B 01 
25778     8E 02 5F 07 
2577c     F7 E2 ED 9C 
25780     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
25784     E8 8A 78 8A 
25788     78 8A 65 8A 
2578c     8B 8A 78 8A 
25790     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
25794     8B 8A 9D 8A 
25798     9D 8A 8B 8A 
2579c     C2 8A 78 8A 
257a0     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
257a4     70 8C 18 86 
257a8     8B 8A 23 C9 
257ac     CB 03 C4 05 
257b0     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
257b4     0B 02 7B 02 
257b8     1E 02 55 02 
257bc     30 02 43 02 
257c0     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
257c4     43 02 44 02 
257c8     43 02 30 02 
257cc     68 02 31 02 
257d0     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
257d4     07 08 3F F7 
257d8     73 B2 13 85 
257dc     15 89 ED 8B 
257e0     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
257e4     B0 8A FB 8A 
257e8     D5 8A FA 8A 
257ec     E8 8A FB 8A 
257f0     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
257f4     E8 8A 21 8B 
257f8     E7 8A 33 8B 
257fc     E8 8A 26 8C 
25800     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
25804     8D B0 27 F6 
25808     9C 08 AD 01 
2580c     7B 02 8D 02 
25810     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
25814     A1 02 A0 02 
25818     A1 02 A0 02 
2581c     A0 02 A0 02 
25820     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
25824     7B 02 D8 02 
25828     7B 02 C6 02 
2582c     3E 01 C3 05 
25830     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
25834     00 8C 2A 86 
25838     E0 8C FA 8A 
2583c     6A 8B FB 8A 
25840     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
25844     45 8B 45 8B 
25848     45 8B 6B 8B 
2584c     46 8B 59 8B 
25850     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
25854     6B 8B 6B 8B 
25858     6B 8B 6B 8B 
2585c     7D 8B 7D 8B 
25860     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
25864     90 8B 91 8B 
25868     90 8B 90 8B 
2586c     A3 8B A3 8B 
25870     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
25874     B5 8B B6 8B 
25878     B5 8B B5 8B 
2587c     B6 8B C8 8B 
25880     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
25884     C8 8B DA 8B 
25888     DB 8B DB 8B 
2588c     DB 8B DC 8B 
25890     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
25894     EE 8B EE 8B 
25898     00 8C 01 8C 
2589c     00 8C 01 8C 
258a0     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
258a4     12 8C 13 8C 
258a8     13 8C 26 8C 
258ac     26 8C 26 8C 
258b0     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
258b4     38 8C 38 8C 
258b8     38 8C 38 8C 
258bc     4B 8C 4B 8C 
258c0     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
258c4     5E 8C 5E 8C 
258c8     5E 8C 5E 8C 
258cc     70 8C 70 8C 
258d0     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
258d4     70 8C 83 8C 
258d8     83 8C 83 8C 
258dc     83 8C 96 8C 
258e0     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
258e4     95 8C A9 8C 
258e8     A9 8C A8 8C 
258ec     A8 8C A8 8C 
258f0     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
258f4     BB 8C BB 8C 
258f8     BB 8C CE 8C 
258fc     CE 8C CE 8C 
25900     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
25904     E0 8C E1 8C 
25908     E1 8C E0 8C 
2590c     F4 8C F2 8C 
25910     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
25914     05 8D 05 8D 
25918     06 8D 06 8D 
2591c     19 8D 19 8D 
25920     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
25924     18 8D 2B 8D 
25928     2B 8D 2B 8D 
2592c     2A 8D 3E 8D 
25930     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
25934     3E 8D 51 8D 
25938     50 8D 50 8D 
2593c     50 8D 51 8D 
25940     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
25944     63 8D 64 8D 
25948     76 8D 75 8D 
2594c     75 8D 76 8D 
25950     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
25954     88 8D 88 8D 
25958     89 8D 9B 8D 
2595c     9A 8D 9B 8D 
25960     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
25964     AD 8D AE 8D 
25968     AD 8D AE 8D 
2596c     C1 8D C1 8D 
25970     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
25974     D3 8D D3 8D 
25978     D3 8D D3 8D 
2597c     D3 8D E6 8D 
25980     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
25984     E6 8D E6 8D 
25988     F9 8D F9 8D 
2598c     F9 8D F8 8D 
25990     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
25994     0B 8E 0B 8E 
25998     1D 8E 1D 8E 
2599c     1E 8E 1E 8E 
259a0     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
259a4     31 8E 31 8E 
259a8     31 8E 42 8E 
259ac     43 8E 43 8E 
259b0     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
259b4     56 8E 56 8E 
259b8     55 8E 56 8E 
259bc     68 8E 69 8E 
259c0     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
259c4     69 8E 7B 8E 
259c8     7C 8E 7B 8E 
259cc     7B 8E 8D 8E 
259d0     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
259d4     8D 8E A1 8E 
259d8     A0 8E A1 8E 
259dc     A1 8E A0 8E 
259e0     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
259e4     B3 8E B3 8E 
259e8     C6 8E C5 8E 
259ec     C6 8E C6 8E 
259f0     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
259f4     D8 8E D9 8E 
259f8     D8 8E EC 8E 
259fc     EB 8E EC 8E 
25a00     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
25a04     FE 8E FE 8E 
25a08     FE 8E FE 8E 
25a0c     10 8F 10 8F 
25a10     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
25a14     11 8F 23 8F 
25a18     24 8F 23 8F 
25a1c     24 8F 37 8F 
25a20     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
25a24     36 8F 36 8F 
25a28     48 8F 49 8F 
25a2c     49 8F 49 8F 
25a30     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
25a34     5B 8F 5C 8F 
25a38     5B 8F 6E 8F 
25a3c     6E 8F 6E 8F 
25a40     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
25a44     81 8F 81 8F 
25a48     81 8F 81 8F 
25a4c     93 8F 93 8F 
25a50     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
25a54     93 8F A6 8F 
25a58     A6 8F A6 8F 
25a5c     A6 8F B9 8F 
25a60     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
25a64     B9 8F B9 8F 
25a68     CC 8F CB 8F 
25a6c     CB 8F CC 8F 
25a70     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
25a74     DF 8F DE 8F 
25a78     DE 8F F1 8F 
25a7c     F1 8F F1 8F 
25a80     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
25a84     03 90 04 90 
25a88     04 90 04 90 
25a8c     16 90 17 90 
25a90     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
25a94     29 90 28 90 
25a98     29 90 28 90 
25a9c     29 90 3C 90 
25aa0     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
25aa4     3C 90 4F 90 
25aa8     4E 90 4E 90 
25aac     4E 90 4E 90 
25ab0     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
25ab4     61 90 61 90 
25ab8     73 90 74 90 
25abc     74 90 74 90 
25ac0     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
25ac4     87 90 86 90 
25ac8     87 90 86 90 
25acc     99 90 99 90 
25ad0     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
25ad4     AB 90 AB 90 
25ad8     AC 90 AB 90 
25adc     AB 90 BF 90 
25ae0     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
25ae4     BE 90 D1 90 
25ae8     D0 90 D1 90 
25aec     D1 90 D1 90 
25af0     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
25af4     E3 90 E4 90 
25af8     F6 90 F6 90 
25afc     F6 90 F6 90 
25b00     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
25b04     09 91 0A 91 
25b08     0A 91 1C 91 
25b0c     1C 91 1C 91 
25b10     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
25b14     2F 91 2E 91 
25b18     2F 91 2F 91 
25b1c     2E 91 41 91 
25b20     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
25b24     41 91 53 91 
25b28     54 91 54 91 
25b2c     53 91 54 91 
25b30     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
25b34     67 91 67 91 
25b38     79 91 7A 91 
25b3c     79 91 78 91 
25b40     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
25b44     8C 91 8B 91 
25b48     8C 91 8C 91 
25b4c     9E 91 9E 91 
25b50     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
25b54     B1 91 B1 91 
25b58     B2 91 B1 91 
25b5c     B1 91 C4 91 
25b60     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
25b64     C4 91 D6 91 
25b68     D7 91 D7 91 
25b6c     D7 91 D6 91 
25b70     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
25b74     EA 91 EA 91 
25b78     EA 91 FC 91 
25b7c     FC 91 FB 91 
25b80     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
25b84     0E 92 0F 92 
25b88     0F 92 0E 92 
25b8c     21 92 21 92 
25b90     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
25b94     21 92 34 92 
25b98     33 92 34 92 
25b9c     34 92 47 92 
25ba0     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
25ba4     46 92 47 92 
25ba8     59 92 59 92 
25bac     59 92 59 92 
25bb0     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
25bb4     6C 92 6C 92 
25bb8     6B 92 7E 92 
25bbc     7E 92 7E 92 
25bc0     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
25bc4     92 92 91 92 
25bc8     91 92 90 92 
25bcc     91 92 A4 92 
25bd0     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
25bd4     A3 92 B6 92 
25bd8     B6 92 B7 92 
25bdc     B7 92 B6 92 
25be0     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
25be4     CA 92 C9 92 
25be8     CA 92 DC 92 
25bec     DC 92 DC 92 
25bf0     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
25bf4     EF 92 EF 92 
25bf8     EF 92 EF 92 
25bfc     01 93 01 93 
25c00     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
25c04     15 93 14 93 
25c08     14 93 14 93 
25c0c     14 93 27 93 
25c10     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
25c14     27 93 39 93 
25c18     3A 93 39 93 
25c1c     39 93 39 93 
25c20     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
25c24     4B 93 4C 93 
25c28     5F 93 5F 93 
25c2c     5F 93 5E 93 
25c30     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
25c34     5F 93 84 93 
25c38     4C 93 96 93 
25c3c     5F 93 AE 94 
25c40     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
25c44     7B C1 00 00 | 	byte	$7b, $c1, $00, $00
25c48     7A D7 00 80 
25c4c     87 8A 48 8F 
25c50     EC 8C 76 8D 
25c54     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
25c58     3C 8D 82 8D 
25c5c     42 8D 88 8D 
25c60     8C 8D 8E 8D 
25c64     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
25c68     97 8D DE 8D 
25c6c     E1 8D F1 8E 
25c70     D8 8C A3 83 
25c74     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
25c78     65 71 C9 65 
25c7c     FC 64 C4 65 
25c80     C1 65 BF 65 
25c84     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
25c88     B6 65 B4 65 
25c8c     B2 65 AE 65 
25c90     AC 65 ED 65 
25c94     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
25c98     5E 65 25 66 
25c9c     FA 62 23 6B 
25ca0     B5 6C 61 0A 
25ca4     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
25ca8     5D 90 BE 8D 
25cac     47 8E C3 8D 
25cb0     09 8E C9 8D 
25cb4     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
25cb8     15 8E 19 8E 
25cbc     1B 8E 62 8E 
25cc0     64 8E 68 8E 
25cc4     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
25cc8     B5 8E 4C 90 
25ccc     FA 84 3C 9D 
25cd0     98 13 79 6D 
25cd4     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
25cd8     D9 66 50 66 
25cdc     D4 66 4B 66 
25ce0     8C 66 46 66 
25ce4     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
25ce8     81 66 3A 66 
25cec     7C 66 36 66 
25cf0     76 66 30 66 
25cf4     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
25cf8     6B 66 88 72 
25cfc     BF 37 E7 B7 
25d00     75 83 8B 8E 
25d04     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
25d08     94 8E 96 8E 
25d0c     DD 8E 9C 8E 
25d10     E2 8E A2 8E 
25d14     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
25d18     EE 8E AE 8E 
25d1c     38 8F B5 8E 
25d20     3F 8F FD 8E 
25d24     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
25d28     A5 87 1E E3 
25d2c     6D 5D FA 71 
25d30     41 64 25 67 
25d34     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
25d38     D9 66 1A 67 
25d3c     18 67 15 67 
25d40     12 67 0F 67 
25d44     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
25d48     07 67 C0 66 
25d4c     01 67 BC 66 
25d50     B8 66 DE 64 
25d54     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
25d58     43 E5 1F 8B 
25d5c     14 8A F1 90 
25d60     1C 8F 63 8F 
25d64     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
25d68     29 8F 6E 8F 
25d6c     72 8F 75 8F 
25d70     34 8F BE 8F 
25d74     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
25d78     84 8F 87 8F 
25d7c     CC 8F 56 90 
25d80     67 91 49 80 
25d84     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
25d88     46 77 A6 66 
25d8c     E8 66 B0 67 
25d90     AD 67 ED 67 
25d94     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
25d98     A2 67 E3 67 
25d9c     9D 67 9A 67 
25da0     98 67 94 67 
25da4     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
25da8     49 67 CD 67 
25dac     28 65 5F 6E 
25db0     82 67 3A 01 
25db4     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
25db8     C2 91 A9 8F 
25dbc     EF 8F AE 8F 
25dc0     F4 8F B5 8F 
25dc4     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
25dc8     01 90 03 90 
25dcc     07 90 09 90 
25dd0     0C 90 53 90 
25dd4     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
25dd8     18 90 44 93 
25ddc     85 84 D6 9D 
25de0     87 1F 2F 75 
25de4     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
25de8     C4 68 F6 67 
25dec     BE 68 F1 67 
25df0     76 68 2E 68 
25df4     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
25df8     27 68 24 68 
25dfc     64 68 1E 68 
25e00     5F 68 19 68 
25e04     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
25e08     DC 68 56 72 
25e0c     7E 36 C2 B8 
25e10     D7 84 73 90 
25e14     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
25e18     7B 90 7F 90 
25e1c     82 90 84 90 
25e20     CB 90 8B 90 
25e24     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
25e28     D7 90 96 90 
25e2c     20 91 59 90 
25e30     25 91 A2 90 
25e34     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
25e38     D0 89 40 EE 
25e3c     12 64 C4 71 
25e40     29 66 0C 69 
25e44     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
25e48     C0 68 02 69 
25e4c     FE 68 FB 68 
25e50     F9 68 F6 68 
25e54     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
25e58     EE 68 A8 68 
25e5c     2C 69 5F 68 
25e60     E2 68 81 66 
25e64     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
25e68     1E EB A6 8A 
25e6c     73 8B 5E 93 
25e70     7B 90 48 91 
25e74     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
25e78     0D 91 11 91 
25e7c     14 91 16 91 
25e80     5C 91 1C 91 
25e84     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
25e88     68 91 AF 91 
25e8c     2A 91 B5 91 
25e90     75 91 1A 94 
25e94     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
25e98     70 0E CB 6C 
25e9c     5D 6E C4 67 
25ea0     99 69 54 69 
25ea4     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
25ea8     D2 69 49 69 
25eac     89 69 86 69 
25eb0     40 69 C4 69 
25eb4     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
25eb8     35 69 76 69 
25ebc     58 67 EB 6D 
25ec0     E9 6D 89 0F 
25ec4     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
25ec8     33 94 94 91 
25ecc     D9 91 56 91 
25ed0     E0 91 9F 91 
25ed4     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
25ed8     EC 91 EE 91 
25edc     F1 91 F4 91 
25ee0     F7 91 3D 92 
25ee4     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
25ee8     46 92 21 94 
25eec     11 89 A4 9D 
25ef0     FD 0E 8F 6C 
25ef4     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
25ef8     28 6A E1 69 
25efc     65 6A 1F 6A 
25f00     5F 6A 1A 6A 
25f04     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
25f08     54 6A 0F 6A 
25f0c     4F 6A 09 6A 
25f10     06 6A 03 6A 
25f14     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
25f18     23 68 69 77 
25f1c     3A 4D 38 CA 
25f20     38 86 4E 91 
25f24     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
25f28     64 92 24 92 
25f2c     6A 92 2A 92 
25f30     70 92 30 92 
25f34     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
25f38     7B 92 7E 92 
25f3c     C5 92 84 92 
25f40     CB 92 8A 92 
25f44     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
25f48     4D 8D F9 E2 
25f4c     97 59 FE 74 
25f50     DB 68 6D 6A 
25f54     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
25f58     A8 6A A5 6A 
25f5c     A3 6A 9F 6A 
25f60     9D 6A 9B 6A 
25f64     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
25f68     D6 6A 8F 6A 
25f6c     CF 6A 46 6A 
25f70     CA 6A E1 67 
25f74     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
25f78     D3 F7 15 92 
25f7c     90 8C BF 94 
25f80     A6 92 EB 92 
25f84     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
25f88     B1 92 F7 92 
25f8c     FA 92 FD 92 
25f90     00 93 02 93 
25f94     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
25f98     4F 93 52 93 
25f9c     54 93 22 94 
25fa0     5A 93 8F 88 
25fa4     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
25fa8     1C 77 07 6C 
25fac     E8 69 7A 6B 
25fb0     34 6B 75 6B 
25fb4     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
25fb8     29 6B 26 6B 
25fbc     24 6B 21 6B 
25fc0     1D 6B 5E 6B 
25fc4     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
25fc8     12 6B 52 6B 
25fcc     34 69 34 6E 
25fd0     BA 73 A4 24 
25fd4     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
25fd8     7A 94 B3 93 
25fdc     72 93 31 93 
25fe0     78 93 7A 93 
25fe4     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
25fe8     83 93 86 93 
25fec     89 93 D0 93 
25ff0     D2 93 D5 93 
25ff4     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
25ff8     DD 93 40 96 
25ffc     30 8B 99 9C 
26000     52 10 94 71 
26004     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
26008     46 6C 79 6B 
2600c     40 6C B7 6B 
26010     F7 6B B1 6B 
26014     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
26018     EC 6B A5 6B 
2601c     A2 6B 9F 6B 
26020     9D 6B 9A 6B 
26024     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
26028     C8 6A E4 76 
2602c     20 4B F9 CE 
26030     2E 8A 1A 92 
26034     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
26038     FB 93 BA 93 
2603c     01 94 03 94 
26040     4A 94 09 94 
26044     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
26048     55 94 14 94 
2604c     9E 94 1A 94 
26050     61 94 20 94 
26054     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
26058     3E 87 E5 CD 
2605c     5F 50 6C 78 
26060     B5 6A 04 6C 
26064     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
26068     83 6C 7F 6C 
2606c     7C 6C 36 6C 
26070     76 6C 74 6C 
26074     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
26078     6B 6C 25 6C 
2607c     66 6C 1F 6C 
26080     1D 6C 41 6A 
26084     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
26088     BA FA FC 94 
2608c     5B 8D 97 96 
26090     3B 94 C5 94 
26094     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
26098     89 94 8C 94 
2609c     8F 94 92 94 
260a0     94 94 DB 94 
260a4     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
260a8     E4 94 E7 94 
260ac     2D 95 74 95 
260b0     C8 96 15 89 
260b4     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
260b8     CB 75 31 6F 
260bc     7E 6B 10 6D 
260c0     C9 6C 0A 6D 
260c4     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
260c8     BD 6C FF 6C 
260cc     FB 6C F9 6C 
260d0     B2 6C F3 6C 
260d4     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
260d8     A7 6C E8 6C 
260dc     0D 6B 85 6F 
260e0     C7 74 10 28 
260e4     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
260e8     96 96 47 95 
260ec     06 95 0A 95 
260f0     0C 95 0F 95 
260f4     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
260f8     17 95 5E 95 
260fc     61 95 63 95 
26100     22 95 AC 95 
26104     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
26108     72 95 17 98 
2610c     59 8E 01 96 
26110     CF FC 5A 68 
26114     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
26118     96 6D 50 6D 
2611c     D5 6D 4A 6D 
26120     8C 6D 89 6D 
26124     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
26128     80 6D 3A 6D 
2612c     7A 6D 77 6D 
26130     75 6D 71 6D 
26134     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
26138     18 6C BC 78 
2613c     9A 4F 7E CF 
26140     1F 89 F1 93 
26144     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
26148     D2 95 4E 95 
2614c     D7 95 53 95 
26150     DD 95 E0 95 
26154     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
26158     A5 95 EB 95 
2615c     EE 95 F0 95 
26160     37 96 B3 95 
26164     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
26168     1A 98 D5 8D 
2616c     C5 9F CD 0F 
26170     0F 71 F3 73 
26174     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
26178     D9 6D 5E 6E 
2617c     D3 6D 58 6E 
26180     12 6E 0F 6E 
26184     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
26188     49 6E BF 6D 
2618c     87 6E 76 6D 
26190     81 6E 11 6B 
26194     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
26198     3F 09 44 95 
2619c     E5 8D 3F 99 
261a0     D4 95 A2 96 
261a4     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
261a8     23 96 69 96 
261ac     6B 96 6E 96 
261b0     71 96 74 96 
261b4     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
261b8     BF 96 3C 96 
261bc     C6 96 C8 96 
261c0     A3 98 51 8D 
261c4     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
261c8     CF 75 29 73 
261cc     90 6C EC 6E 
261d0     62 6E E7 6E 
261d4     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
261d8     9A 6E 98 6E 
261dc     95 6E 91 6E 
261e0     8E 6E CF 6E 
261e4     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
261e8     40 6E C3 6E 
261ec     E8 6C 45 6F 
261f0     A5 7B C9 35 
261f4     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
261f8     2D 98 23 97 
261fc     E1 96 A0 96 
26200     A4 96 EA 96 
26204     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
26208     AF 96 F4 96 
2620c     F8 96 3E 97 
26210     FD 96 43 97 
26214     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
26218     08 97 6B 99 
2621c     D6 92 88 91 
26220     D8 EE 84 66 
26224     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
26228     2E 6F E7 6E 
2622c     6C 6F 24 6F 
26230     21 6F 1F 6F 
26234     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
26238     17 6F 13 6F 
2623c     54 6F 0E 6F 
26240     0B 6F 4B 6F 
26244     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
26248     27 6D 1C 7B 
2624c     19 59 9F DB 
26250     66 8E BC 94 
26254     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
26258     67 97 26 97 
2625c     6D 97 2B 97 
26260     72 97 32 97 
26264     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
26268     C1 97 7F 97 
2626c     C6 97 85 97 
26270     CB 97 CE 97 
26274     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
26278     EC 8A C4 C6 
2627c     68 4C F4 7D 
26280     63 6E E8 6E 
26284     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
26288     ED 6F A7 6F 
2628c     E7 6F A0 6F 
26290     E1 6F 9B 6F 
26294     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
26298     D5 6F 8F 6F 
2629c     CE 6F 45 6F 
262a0     86 6F 68 6D 
262a4     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
262a8     C0 13 AD A2 
262ac     A7 8E 79 99 
262b0     E6 97 E8 97 
262b4     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
262b8     F1 97 F3 97 
262bc     F6 97 F9 97 
262c0     FB 97 FE 97 
262c4     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
262c8     4A 98 0A 98 
262cc     93 98 0F 98 
262d0     7F 9B BF 8C 
262d4     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
262d8     91 7B 62 73 
262dc     1A 6E B9 70 
262e0     EB 6F B3 70 
262e4     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
262e8     25 70 20 70 
262ec     1E 70 1B 70 
262f0     18 70 15 70 
262f4     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
262f8     0D 70 09 70 
262fc     07 70 03 70 
26300     01 70 FD 6F 
26304     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
26308     F6 6F F2 6F 
2630c     EF 6F EC 6F 
26310     2C 70 E6 6F 
26314     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
26318     DD 6F 97 6F 
2631c     D7 6F 84 6E 
26320     8F 6F 3F 7D 
26324     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
26326     01 00 00 00 
2632a     00 00 00 00 
2632e     00 00 00 00 
26332     00 00 00 00 | mouse  file "mouse.def"
26336     00 00 00 00 
2633a     00 00 00 00 
2633e     00 00 00 00 
26342     00 00 00 00 | 	byte	$00[16]
26346     01 01 00 00 
2634a     00 00 00 00 
2634e     00 00 00 00 
26352     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26356     00 00 00 00 
2635a     00 00 00 00 
2635e     00 00 00 00 
26362     00 00 00 00 | 	byte	$00[16]
26366     01 0D 01 00 
2636a     00 00 00 00 
2636e     00 00 00 00 
26372     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26376     00 00 00 00 
2637a     00 00 00 00 
2637e     00 00 00 00 
26382     00 00 00 00 | 	byte	$00[16]
26386     01 0D 0D 01 
2638a     00 00 00 00 
2638e     00 00 00 00 
26392     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26396     00 00 00 00 
2639a     00 00 00 00 
2639e     00 00 00 00 
263a2     00 00 00 00 | 	byte	$00[16]
263a6     01 0D 0D 0D 
263aa     01 00 00 00 
263ae     00 00 00 00 
263b2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
263b6     00 00 00 00 
263ba     00 00 00 00 
263be     00 00 00 00 
263c2     00 00 00 00 | 	byte	$00[16]
263c6     01 0D 0D 0D 
263ca     0D 01 00 00 
263ce     00 00 00 00 
263d2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
263d6     00 00 00 00 
263da     00 00 00 00 
263de     00 00 00 00 
263e2     00 00 00 00 | 	byte	$00[16]
263e6     01 0D 0D 0D 
263ea     0D 0D 01 00 
263ee     00 00 00 00 
263f2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
263f6     00 00 00 00 
263fa     00 00 00 00 
263fe     00 00 00 00 
26402     00 00 00 00 | 	byte	$00[16]
26406     01 0D 0D 0D 
2640a     0D 0D 0D 01 
2640e     00 00 00 00 
26412     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
26416     00 00 00 00 
2641a     00 00 00 00 
2641e     00 00 00 00 
26422     00 00 00 00 | 	byte	$00[16]
26426     01 0D 0D 0D 
2642a     0D 0D 0D 0C 
2642e     01 00 00 00 
26432     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
26436     00 00 00 00 
2643a     00 00 00 00 
2643e     00 00 00 00 
26442     00 00 00 00 | 	byte	$00[16]
26446     01 0D 0D 0D 
2644a     0D 0D 0D 0D 
2644e     0C 01 00 00 
26452     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
26456     00 00 00 00 
2645a     00 00 00 00 
2645e     00 00 00 00 
26462     00 00 00 00 | 	byte	$00[16]
26466     01 0D 0D 0D 
2646a     0D 0D 0D 0D 
2646e     0D 0C 01 00 
26472     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
26476     00 00 00 00 
2647a     00 00 00 00 
2647e     00 00 00 00 
26482     00 00 00 00 | 	byte	$00[16]
26486     01 0D 0D 0D 
2648a     0D 0D 0D 0D 
2648e     0D 0D 0B 01 
26492     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
26496     00 00 00 00 
2649a     00 00 00 00 
2649e     00 00 00 00 
264a2     00 00 00 00 | 	byte	$00[16]
264a6     01 0D 0D 0D 
264aa     0C 0D 0D 03 
264ae     01 01 01 01 
264b2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
264b6     00 00 00 00 
264ba     00 00 00 00 
264be     00 00 00 00 
264c2     00 00 00 00 | 	byte	$00[16]
264c6     01 0D 0D 0C 
264ca     01 09 0D 03 
264ce     00 00 00 00 
264d2     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
264d6     00 00 00 00 
264da     00 00 00 00 
264de     00 00 00 00 
264e2     00 00 00 00 | 	byte	$00[16]
264e6     01 0D 0C 00 
264ea     00 01 0D 0B 
264ee     01 00 00 00 
264f2     00 00 00 00 | 	byte	$01, $0d, $0c, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
264f6     00 00 00 00 
264fa     00 00 00 00 
264fe     00 00 00 00 
26502     00 00 00 00 | 	byte	$00[16]
26506     01 0C 00 00 
2650a     00 01 0A 0D 
2650e     01 00 00 00 
26512     00 00 00 00 | 	byte	$01, $0c, $00, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
26516     00 00 00 00 
2651a     00 00 00 00 
2651e     00 00 00 00 
26522     00 00 00 00 | 	byte	$00[16]
26526     01 00 00 00 
2652a     00 00 01 0D 
2652e     0B 01 00 00 
26532     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
26536     00 00 00 00 
2653a     00 00 00 00 
2653e     00 00 00 00 
26542     00 00 00 00 
26546     00 00 00 00 
2654a     00 00       | 	byte	$00[22]
2654c     01 0B 0D 01 
26550     00 00 00 00 
26554     00 00 00 00 
26558     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2655c     00 00 00 00 
26560     00 00 00 00 
26564     00 00 00 00 
26568     00 00 00 00 
2656c     00          | 	byte	$00[17]
2656d     01 00 00 00 
26571     00 00 00 00 
26575     00 00 00 00 
26579     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2657d     00 00 00 00 
      ...             
26721     00 00 00 00 
26725     00          | 	byte	$00[425]
26726                 | 
26726     00 00       |              	org
26728 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
2672c 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
26730 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
26734 003             | 
26734 003 00 30 04 F6 |                 mov     psramaddr,#0
26738 004             | 
26738 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
2673c 005 20 00 00 FF 
26740 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
26744 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
26748 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
2674c 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
26750 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
26754 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
26758 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
2675c 00d             | 
2675c 00d 20 00 00 FF 
26760 00e 00 30 04 F1 |                 add 	psramaddr,##16384
26764 00f E0 03 00 FF 
26768 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
2676c 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
26770 012             | 
26770 012             |                 
26770 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
26774 013             |     
26774 013 01 2C 60 FD |                 cogid 	t11				' get id
26778 014 00 00 EC FC |                 coginit #0,#0				' start the new program
2677c 015 03 2C 60 FD |                 cogstop t11				' stop the loader
26780 016             | 
26780 016 00 00 00 00 | t11 		long 	0
26784 017 00 FF 07 00 | mailbox 	long 	$7FF00
26788 018 00 00 00 00 | psramaddr 	long 	0
2678c 019 00 00 00 00 | pslockval	long 	0
26790 01a 00 00 00 00 | cmd             long    0
26794 01b 00 00 00 00 | buf1            long    0
26798 01c 00 40 00 00 | buf2            long    16384
2679c 01d A0 67 02 00 | 	long	@@@_dat_ + 5100
267a0 01e 50 32 20 52 
267a4 01f 65 74 72 6F 
267a8 020 6D 61 63 68 
267ac 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
267b0 022 42 41 53 49 
267b4 023 43 20 76 65 
267b8 024 72 73 69 6F 
267bc 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
267c0 026 32 33 61 00 | 	byte	$32, $33, $61, $00
267c4 027             | 	alignl
267c4 027             | _hg010b_spin2_dat_
267c4 027             | 
267c4 027 00 00 00 00 
267c8 028 00 00 00 00 
267cc 029 00 00 00 00 
267d0 02a 00 00 00 00 
267d4 02b 00 00 00    | vga_font       file "vgafont.def"
267d7 02b 7E 81 A5 81 
267db 02c 81 BD 99 81 
267df 02d 81 7E 00 00 
267e3 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
267e7 02f 7E FF DB FF 
267eb 030 FF C3 E7 FF 
267ef 031 FF 7E 00 00 
267f3 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
267f7 033 00 36 7F 7F 
267fb 034 7F 7F 3E 1C 
267ff 035 08 00 00 00 
26803 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
26807 037 00 08 1C 3E 
2680b 038 7F 3E 1C 08 
2680f 039 00 00 00 00 
26813 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
26817 03b 18 3C 3C E7 
2681b 03c E7 E7 18 18 
2681f 03d 3C 00 00 00 
26823 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
26827 03f 18 3C 7E FF 
2682b 040 FF 7E 18 18 
2682f 041 3C 00 00 00 
26833 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
26837 043 00 00 00 18 
2683b 044 3C 3C 18 00 
2683f 045 00 00 00 00 
26843 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
26847 047 FF FF FF E7 
2684b 048 C3 C3 E7 FF 
2684f 049 FF FF FF FF 
26853 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
26857 04b 00 00 3C 66 
2685b 04c 42 42 66 3C 
2685f 04d 00 00 00 00 
26863 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
26867 04f FF FF C3 99 
2686b 050 BD BD 99 C3 
2686f 051 FF FF FF FF 
26873 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
26877 053 78 70 58 4C 
2687b 054 1E 33 33 33 
2687f 055 33 1E 00 00 
26883 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
26887 057 3C 66 66 66 
2688b 058 66 3C 18 7E 
2688f 059 18 18 00 00 
26893 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
26897 05b FC CC FC 0C 
2689b 05c 0C 0C 0C 0E 
2689f 05d 0F 07 00 00 
268a3 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
268a7 05f FE C6 FE C6 
268ab 060 C6 C6 C6 E6 
268af 061 E7 67 03 00 
268b3 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
268b7 063 18 18 DB 3C 
268bb 064 E7 3C DB 18 
268bf 065 18 00 00 00 
268c3 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
268c7 067 03 07 0F 1F 
268cb 068 7F 1F 0F 07 
268cf 069 03 01 00 00 
268d3 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
268d7 06b 60 70 78 7C 
268db 06c 7F 7C 78 70 
268df 06d 60 40 00 00 
268e3 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
268e7 06f 18 3C 7E 18 
268eb 070 18 18 7E 3C 
268ef 071 18 00 00 00 
268f3 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
268f7 073 66 66 66 66 
268fb 074 66 66 66    | 	byte	$66[7]
268fe 075 00 66 66 00 
26902 076 00 00 00 00 
26906 077 00 FE DB DB 
2690a 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
2690e 079 D8 D8 D8 00 
26912 07a 00 00 00 3E 
26916 07b 63 06 1C 36 
2691a 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
2691e 07d 30 63 3E 00 
26922 07e 00 00 00 00 
26926 07f 00 00 00 00 
2692a 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
2692e 081 7F 7F 7F 00 
26932 082 00 00 00 00 
26936 083 00 18 3C 7E 
2693a 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
2693e 085 3C 18 7E 00 
26942 086 00 00 00 00 
26946 087 00 18 3C 7E 
2694a 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
2694e 089 18 18 18 00 
26952 08a 00 00 00 00 
26956 08b 00 18 18 18 
2695a 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2695e 08d 7E 3C 18 00 
26962 08e 00 00 00 00 
26966 08f 00 00 00 18 
2696a 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
2696e 091 00 00 00 00 
26972 092 00 00 00 00 
26976 093 00 00 00    | 	byte	$00[11]
26979 094 0C 06 7F 06 
2697d 095 0C 00 00 00 
26981 096 00 00 00 00 
26985 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26989 098 00 03 03 03 
2698d 099 7F 00 00 00 
26991 09a 00 00 00 00 
26995 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26999 09c 14 36 7F 36 
2699d 09d 14 00 00 00 
269a1 09e 00 00 00 00 
269a5 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
269a9 0a0 1C 1C 3E 3E 
269ad 0a1 7F 7F 00 00 
269b1 0a2 00 00 00 00 
269b5 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
269b9 0a4 7F 3E 3E 1C 
269bd 0a5 1C 08 00 00 
269c1 0a6 00 00 00 00 
269c5 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
269c9 0a8 00 00 00 00 
269cd 0a9 00 00 00 00 
269d1 0aa 00 00 00 00 
269d5 0ab 00 00       | 	byte	$00[14]
269d7 0ab 18 3C 3C 3C 
269db 0ac 18 18 18 00 
269df 0ad 18 18 00 00 
269e3 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
269e7 0af 66 24 00 00 
269eb 0b0 00 00 00 00 
269ef 0b1 00 00 00 00 
269f3 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
269f7 0b3 00 36 36 7F 
269fb 0b4 36 36 36 7F 
269ff 0b5 36 36 00 00 
26a03 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
26a07 0b7 3E 63 43 03 
26a0b 0b8 3E 60 60 61 
26a0f 0b9 63 3E 18 18 
26a13 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
26a17 0bb 00 00 43 63 
26a1b 0bc 30 18 0C 06 
26a1f 0bd 63 61 00 00 
26a23 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
26a27 0bf 1C 36 36 1C 
26a2b 0c0 6E 3B 33 33 
26a2f 0c1 33 6E 00 00 
26a33 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
26a37 0c3 0C 0C 0C 06 
26a3b 0c4 00 00 00 00 
26a3f 0c5 00 00 00 00 
26a43 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26a47 0c7 30 18 0C 0C 
26a4b 0c8 0C 0C 0C 0C 
26a4f 0c9 18 30 00 00 
26a53 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
26a57 0cb 0C 18 30 30 
26a5b 0cc 30 30 30 30 
26a5f 0cd 18 0C 00 00 
26a63 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
26a67 0cf 00 00 00 66 
26a6b 0d0 3C FF 3C 66 
26a6f 0d1 00 00 00 00 
26a73 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
26a77 0d3 00 00 00 18 
26a7b 0d4 18 7E 18 18 
26a7f 0d5 00 00 00 00 
26a83 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
26a87 0d7 00 00 00 00 
26a8b 0d8 00 00 00 00 | 	byte	$00[8]
26a8f 0d9 18 18 18 0C 
26a93 0da 00 00 00 00 
26a97 0db 00 00 00 00 
26a9b 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
26a9f 0dd 00 00 00 00 
26aa3 0de 00 00 00 00 
26aa7 0df 00 00 00 00 
26aab 0e0 00 00 00 00 | 	byte	$00[16]
26aaf 0e1 18 18 00 00 
26ab3 0e2 00 00 00 00 
26ab7 0e3 00 00 40 60 
26abb 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
26abf 0e5 03 01 00 00 
26ac3 0e6 00 00 00 00 
26ac7 0e7 1C 36 63 63 
26acb 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
26acf 0e9 36 1C 00 00 
26ad3 0ea 00 00 00 00 
26ad7 0eb 18 1C 1E 18 
26adb 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
26adf 0ed 18 7E 00 00 
26ae3 0ee 00 00 00 00 
26ae7 0ef 3E 63 60 30 
26aeb 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
26aef 0f1 63 7F 00 00 
26af3 0f2 00 00 00 00 
26af7 0f3 3E 63 60 60 
26afb 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
26aff 0f5 63 3E 00 00 
26b03 0f6 00 00 00 00 
26b07 0f7 30 38 3C 36 
26b0b 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
26b0f 0f9 30 78 00 00 
26b13 0fa 00 00 00 00 
26b17 0fb 7F 03 03 03 
26b1b 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
26b1f 0fd 63 3E 00 00 
26b23 0fe 00 00 00 00 
26b27 0ff 1C 06 03 03 
26b2b 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
26b2f 101 63 3E 00 00 
26b33 102 00 00 00 00 
26b37 103 7F 63 60 60 
26b3b 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
26b3f 105 0C 0C 00 00 
26b43 106 00 00 00 00 
26b47 107 3E 63 63 63 
26b4b 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
26b4f 109 63 3E 00 00 
26b53 10a 00 00 00 00 
26b57 10b 3E 63 63 63 
26b5b 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
26b5f 10d 30 1E 00 00 
26b63 10e 00 00 00 00 
26b67 10f 00 00 00 18 
26b6b 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
26b6f 111 18 18 00 00 
26b73 112 00 00 00 00 
26b77 113 00 00 00 18 
26b7b 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
26b7f 115 18 18 0C 00 
26b83 116 00 00 00 00 
26b87 117 00 60 30 18 
26b8b 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
26b8f 119 30 60 00 00 
26b93 11a 00 00 00 00 
26b97 11b 00 00 00 7E 
26b9b 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
26b9f 11d 00 00 00 00 
26ba3 11e 00 00 00 00 
26ba7 11f 00          | 	byte	$00[9]
26ba8 120 06 0C 18 30 
26bac 121 60 30 18 0C 
26bb0 122 06 00 00 00 
26bb4 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
26bb8 124 63 63 30 18 
26bbc 125 18 18 00 18 
26bc0 126 18 00 00 00 
26bc4 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
26bc8 128 3E 63 63 7B 
26bcc 129 7B 7B 3B 03 
26bd0 12a 3E 00 00 00 
26bd4 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
26bd8 12c 1C 36 63 63 
26bdc 12d 7F 63 63 63 
26be0 12e 63 00 00 00 
26be4 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
26be8 130 66 66 66 3E 
26bec 131 66 66 66 66 
26bf0 132 3F 00 00 00 
26bf4 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
26bf8 134 66 43 03 03 
26bfc 135 03 03 43 66 
26c00 136 3C 00 00 00 
26c04 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
26c08 138 36 66 66 66 
26c0c 139 66 66 66 36 
26c10 13a 1F 00 00 00 
26c14 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
26c18 13c 66 46 16 1E 
26c1c 13d 16 06 46 66 
26c20 13e 7F 00 00 00 
26c24 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
26c28 140 66 46 16 1E 
26c2c 141 16 06 06 06 
26c30 142 0F 00 00 00 
26c34 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
26c38 144 66 43 03 03 
26c3c 145 7B 63 63 66 
26c40 146 5C 00 00 00 
26c44 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
26c48 148 63 63 63 7F 
26c4c 149 63 63 63 63 
26c50 14a 63 00 00 00 
26c54 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
26c58 14c 18 18 18 18 
26c5c 14d 18 18 18 18 | 	byte	$18[8]
26c60 14e 3C 00 00 00 
26c64 14f 00 00 00 78 
26c68 150 30 30 30 30 
26c6c 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
26c70 152 1E 00 00 00 
26c74 153 00 00 00 67 
26c78 154 66 66 36 1E 
26c7c 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
26c80 156 67 00 00 00 
26c84 157 00 00 00 0F 
26c88 158 06 06 06 06 
26c8c 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
26c90 15a 7F 00 00 00 
26c94 15b 00 00 00 63 
26c98 15c 77 7F 7F 6B 
26c9c 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
26ca0 15e 63 00 00 00 
26ca4 15f 00 00 00 63 
26ca8 160 67 6F 7F 7B 
26cac 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
26cb0 162 63 00 00 00 
26cb4 163 00 00 00 3E 
26cb8 164 63 63 63 63 
26cbc 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
26cc0 166 3E 00 00 00 
26cc4 167 00 00 00 3F 
26cc8 168 66 66 66 3E 
26ccc 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
26cd0 16a 0F 00 00 00 
26cd4 16b 00 00 00 3E 
26cd8 16c 63 63 63 63 
26cdc 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
26ce0 16e 3E 30 70 00 
26ce4 16f 00 00 00 3F 
26ce8 170 66 66 66 3E 
26cec 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
26cf0 172 67 00 00 00 
26cf4 173 00 00 00 3E 
26cf8 174 63 63 06 1C 
26cfc 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
26d00 176 3E 00 00 00 
26d04 177 00 00 00 7E 
26d08 178 7E 5A 18 18 
26d0c 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
26d10 17a 3C 00 00 00 
26d14 17b 00 00 00 63 
26d18 17c 63 63 63 63 
26d1c 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
26d20 17e 3E 00 00 00 
26d24 17f 00 00 00 63 
26d28 180 63 63 63 63 
26d2c 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
26d30 182 08 00 00 00 
26d34 183 00 00 00 63 
26d38 184 63 63 63 6B 
26d3c 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
26d40 186 36 00 00 00 
26d44 187 00 00 00 63 
26d48 188 63 36 3E 1C 
26d4c 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
26d50 18a 63 00 00 00 
26d54 18b 00 00 00 66 
26d58 18c 66 66 66 3C 
26d5c 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
26d60 18e 3C 00 00 00 
26d64 18f 00 00 00 7F 
26d68 190 63 61 30 18 
26d6c 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
26d70 192 7F 00 00 00 
26d74 193 00 00 00 3C 
26d78 194 0C 0C 0C 0C 
26d7c 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
26d80 196 3C 00 00 00 
26d84 197 00 00 00 00 
26d88 198 01 03 07 0E 
26d8c 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
26d90 19a 40 00 00 00 
26d94 19b 00 00 00 3C 
26d98 19c 30 30 30 30 
26d9c 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
26da0 19e 3C 00 00 00 
26da4 19f 1C 36 00 00 
26da8 1a0 00 00 00 00 
26dac 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26db0 1a2 00 00 00 00 
26db4 1a3 00 00 00 00 
26db8 1a4 00 00 00 00 
26dbc 1a5 00 00 00 00 
26dc0 1a6 00          | 	byte	$00[17]
26dc1 1a6 FF 00 00 0C 
26dc5 1a7 18 00 00 00 
26dc9 1a8 00 00 00 00 
26dcd 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26dd1 1aa 00 00 00 00 
26dd5 1ab 00 00 00 00 
26dd9 1ac 00          | 	byte	$00[9]
26dda 1ac 1E 30 3E 33 
26dde 1ad 33 33 6E 00 
26de2 1ae 00 00 00 00 
26de6 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
26dea 1b0 1E 36 66 66 
26dee 1b1 66 66 3E 00 
26df2 1b2 00 00 00 00 
26df6 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
26dfa 1b4 3E 63 03 03 
26dfe 1b5 03 63 3E 00 
26e02 1b6 00 00 00 00 
26e06 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
26e0a 1b8 3C 36 33 33 
26e0e 1b9 33 33 6E 00 
26e12 1ba 00 00 00 00 
26e16 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
26e1a 1bc 3E 63 7F 03 
26e1e 1bd 03 63 3E 00 
26e22 1be 00 00 00 00 
26e26 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
26e2a 1c0 0C 1E 0C 0C 
26e2e 1c1 0C 0C 1E 00 
26e32 1c2 00 00 00 00 
26e36 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
26e3a 1c4 6E 33 33 33 
26e3e 1c5 33 33 3E 30 
26e42 1c6 33 1E 00 00 
26e46 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
26e4a 1c8 36 6E 66 66 
26e4e 1c9 66 66 67 00 
26e52 1ca 00 00 00 00 
26e56 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
26e5a 1cc 1C 18 18 18 
26e5e 1cd 18 18 3C 00 
26e62 1ce 00 00 00 00 
26e66 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
26e6a 1d0 70 60 60 60 
26e6e 1d1 60 60 60 66 
26e72 1d2 66 3C 00 00 
26e76 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
26e7a 1d4 66 36 1E 1E 
26e7e 1d5 36 66 67 00 
26e82 1d6 00 00 00 00 
26e86 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
26e8a 1d8 18 18 18 18 
26e8e 1d9 18 18       | 	byte	$18[6]
26e90 1da 3C 00 00 00 
26e94 1db 00 00 00 00 
26e98 1dc 00 00 37 7F 
26e9c 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
26ea0 1de 63 00 00 00 
26ea4 1df 00 00 00 00 
26ea8 1e0 00 00 3B 66 
26eac 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
26eb0 1e2 66 00 00 00 
26eb4 1e3 00 00 00 00 
26eb8 1e4 00 00 3E 63 
26ebc 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
26ec0 1e6 3E 00 00 00 
26ec4 1e7 00 00 00 00 
26ec8 1e8 00 00 3B 66 
26ecc 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
26ed0 1ea 3E 06 06 0F 
26ed4 1eb 00 00 00 00 
26ed8 1ec 00 00 6E 33 
26edc 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
26ee0 1ee 3E 30 30 78 
26ee4 1ef 00 00 00 00 
26ee8 1f0 00 00 3B 6E 
26eec 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
26ef0 1f2 0F 00 00 00 
26ef4 1f3 00 00 00 00 
26ef8 1f4 00 00 3E 63 
26efc 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
26f00 1f6 3E 00 00 00 
26f04 1f7 00 00 00 08 
26f08 1f8 0C 0C 3F 0C 
26f0c 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
26f10 1fa 38 00 00 00 
26f14 1fb 00 00 00 00 
26f18 1fc 00 00 33 33 
26f1c 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
26f20 1fe 6E 00 00 00 
26f24 1ff 00 00 00 00 
26f28 200 00 00 63 63 
26f2c 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
26f30 202 1C 00 00 00 
26f34 203 00 00 00 00 
26f38 204 00 00 63 63 
26f3c 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
26f40 206 36 00 00 00 
26f44 207 00 00 00 00 
26f48 208 00 00 63 36 
26f4c 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
26f50 20a 63 00 00 00 
26f54 20b 00 00 00 00 
26f58 20c 00 00 63 63 
26f5c 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
26f60 20e 7E 60 30 1F 
26f64 20f 00 00 00 00 
26f68 210 00 00 7F 33 
26f6c 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
26f70 212 7F 00 00 00 
26f74 213 00 00 00 70 
26f78 214 18 18 18 0E 
26f7c 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
26f80 216 70 00 00 00 
26f84 217 00 00 00 18 
26f88 218 18 18 18 18 
26f8c 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
26f90 21a 18 00 00 00 
26f94 21b 00 00 00 0E 
26f98 21c 18 18 18 70 
26f9c 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
26fa0 21e 0E 00 00 00 
26fa4 21f 6E 3B 00 00 
26fa8 220 00 00 00 00 
26fac 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26fb0 222 00 00 00 00 
26fb4 223 00 00 00 00 
26fb8 224 00 00       | 	byte	$00[10]
26fba 224 08 1C 36 63 
26fbe 225 63 63 7F 00 
26fc2 226 00 00 00 00 
26fc6 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
26fca 228 03 03 03 03 
26fce 229 43 66 3C 18 
26fd2 22a 30 1E 00 00 
26fd6 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
26fda 22c 33 33 33 33 
26fde 22d 33 33       | 	byte	$33[6]
26fe0 22e 6E 00 00 00 
26fe4 22f 00 00 60 30 
26fe8 230 18 00 3E 63 
26fec 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
26ff0 232 3E 00 00 00 
26ff4 233 00 00 08 1C 
26ff8 234 36 00 1E 30 
26ffc 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
27000 236 6E 00 00 00 
27004 237 00 00 00 00 
27008 238 33 00 1E 30 
2700c 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
27010 23a 6E 00 00 00 
27014 23b 00 00 1C 36 
27018 23c 1C 00 33 33 
2701c 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
27020 23e 6E 00 00 00 
27024 23f 00 00 60 30 
27028 240 18 00 3E 63 
2702c 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
27030 242 3E 00 00 00 
27034 243 00 00 00 00 
27038 244 00 00 3E 63 
2703c 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
27040 246 3E 18 30 1E 
27044 247 00 00 00 1C 
27048 248 58 78 38 18 
2704c 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
27050 24a 3C 00 00 00 
27054 24b 00 00 00 00 
27058 24c 63 00 3E 63 
2705c 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
27060 24e 3E 00 00 00 
27064 24f 66 33 00 3E 
27068 250 63 63 63 63 
2706c 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
27070 252 3E 00 00 00 
27074 253 00 00 CC 66 
27078 254 33 00 3E 63 
2707c 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
27080 256 3E 00 00 00 
27084 257 00 00 18 3C 
27088 258 66 00 1C 18 
2708c 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
27090 25a 3C 00 00 00 
27094 25b 30 18 00 7F 
27098 25c 63 61 30 18 
2709c 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
270a0 25e 7F 00 00 00 
270a4 25f 00 63 00 08 
270a8 260 1C 36 63 63 
270ac 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
270b0 262 63 00 00 00 
270b4 263 30 18 00 3C 
270b8 264 66 43 03 03 
270bc 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
270c0 266 3C 00 00 00 
270c4 267 30 18 00 7F 
270c8 268 66 46 16 1E 
270cc 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
270d0 26a 7F 00 00 00 
270d4 26b 0C 06 00 0F 
270d8 26c 06 06 06 06 
270dc 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
270e0 26e 7F 00 00 00 
270e4 26f 30 18 00 1C 
270e8 270 18 18 18 18 
270ec 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
270f0 272 3C 00 00 00 
270f4 273 00 00 08 1C 
270f8 274 36 00 3E 63 
270fc 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
27100 276 3E 00 00 00 
27104 277 00 00 00 00 
27108 278 63 00 3E 63 
2710c 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
27110 27a 3E 00 00 00 
27114 27b 00 00 00 6F 
27118 27c 46 26 06 06 
2711c 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
27120 27e 7F 00 00 00 
27124 27f 00 00 00 6E 
27128 280 4C 2C 0C 0C 
2712c 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
27130 282 1E 00 00 00 
27134 283 30 18 00 3E 
27138 284 63 63 06 1C 
2713c 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
27140 286 3E 00 00 00 
27144 287 00 00 60 30 
27148 288 18 00 3E 63 
2714c 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
27150 28a 3E 00 00 00 
27154 28b 00 63 00 3E 
27158 28c 63 63 63 63 
2715c 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
27160 28e 3E 00 00 00 
27164 28f 00 63 00 63 
27168 290 63 63 63 63 
2716c 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
27170 292 3E 00 00 00 
27174 293 6C 38 00 7E 
27178 294 7E 5A 18 18 
2717c 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
27180 296 3C 00 00 00 
27184 297 00 00 60 48 
27188 298 2C 0C 3F 0C 
2718c 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
27190 29a 38 00 00 00 
27194 29b 00 00 00 0F 
27198 29c 26 36 1E 0E 
2719c 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
271a0 29e 7F 00 00 00 
271a4 29f 00 00 00 00 
271a8 2a0 00 63 36 1C 
271ac 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
271b0 2a2 00 00 00 00 
271b4 2a3 00 00       | 	byte	$00[6]
271b6 2a3 36 1C 08 00 
271ba 2a4 3E 63 03 03 
271be 2a5 03 63 3E 00 
271c2 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
271c6 2a7 30 18 0C 00 
271ca 2a8 1E 30 3E 33 
271ce 2a9 33 33 6E 00 
271d2 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
271d6 2ab 60 30 18 00 
271da 2ac 1C 18 18 18 
271de 2ad 18 18 3C 00 
271e2 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
271e6 2af 60 30 18 00 
271ea 2b0 3E 63 63 63 
271ee 2b1 63 63 3E 00 
271f2 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
271f6 2b3 30 18 0C 00 
271fa 2b4 33 33 33 33 
271fe 2b5 33 33 6E 00 
27202 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
27206 2b7 00 08 1C 36 
2720a 2b8 63 63 7F 63 
2720e 2b9 63 63 63 18 
27212 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
27216 2bb 00 00 00 00 
2721a 2bc 1E 30 3E 33 
2721e 2bd 33 33 6E 18 
27222 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
27226 2bf 00 7F 63 61 
2722a 2c0 30 18 0C 06 
2722e 2c1 43 63 7F 00 
27232 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
27236 2c3 36 1C 08 00 
2723a 2c4 7F 33 18 0C 
2723e 2c5 06 63 7F 00 
27242 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
27246 2c7 00 7F 66 46 
2724a 2c8 16 1E 16 06 
2724e 2c9 46 66 7F 18 
27252 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
27256 2cb 00 00 00 00 
2725a 2cc 3E 63 7F 03 
2725e 2cd 03 63 3E 18 
27262 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
27266 2cf 00 3C 66 03 
2726a 2d0 1F 03 0F 03 
2726e 2d1 03 66 3C 00 
27272 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
27276 2d3 60 30 18 00 
2727a 2d4 7F 33 18 0C 
2727e 2d5 06 63 7F 00 
27282 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
27286 2d7 00 3C 66 43 
2728a 2d8 03 03 03 03 
2728e 2d9 43 66 3C 00 
27292 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
27296 2db 00 00 00 00 
2729a 2dc 3E 63 06 1C 
2729e 2dd 30 63 3E 18 
272a2 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
272a6 2df 00 00 00 00 
272aa 2e0 00 00       | 	byte	$00[6]
272ac 2e1 6C 36 1B 36 
272b0 2e2 6C 00 00 00 
272b4 2e3 00 00 00 00 
272b8 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
272bc 2e5 1B 36 6C 36 
272c0 2e6 1B 00 00 00 
272c4 2e7 88 22 88 22 
272c8 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
272cc 2e9 88 22 88 22 
272d0 2ea 88 22 88 22 
272d4 2eb AA 55 AA 55 
272d8 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
272dc 2ed AA 55 AA 55 
272e0 2ee AA 55 AA 55 
272e4 2ef BB EE BB EE 
272e8 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
272ec 2f1 BB EE BB EE 
272f0 2f2 BB EE BB EE 
272f4 2f3 18 18 18 18 
272f8 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
272fc 2f5 18 18 18 18 
27300 2f6 18 18 18 18 
27304 2f7 18 18 18 18 
27308 2f8 18 18 18    | 	byte	$18[15]
2730b 2f8 1F 18 18 18 
2730f 2f9 18 18 18 18 
27313 2fa 18 30 18 00 
27317 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
2731b 2fc 63 7F 63 63 
2731f 2fd 63 63 00 00 
27323 2fe 00 1C 36 00 
27327 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
2732b 300 63 7F 63 63 
2732f 301 63 63 00 00 
27333 302 00 36 1C 00 
27337 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
2733b 304 1E 16 06 46 
2733f 305 66 7F 00 00 
27343 306 00 00 00 00 
27347 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
2734b 308 1C 30 60 63 
2734f 309 63 3E 18 30 
27353 30a 1E 6C 6C 6C 
27357 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
2735b 30c 6F 6C 6C 6C 
2735f 30d 6C 6C 6C 6C 
27363 30e 6C 6C 6C 6C 
27367 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2736b 310 6C 6C 6C 6C 
2736f 311 6C 6C 6C 6C 
27373 312 6C          | 	byte	$6c[9]
27374 313 00 00 00 00 
27378 314 00          | 	byte	$00[5]
27379 314 7F 60 6F 6C 
2737d 315 6C 6C 6C 6C 
27381 316 6C 6C 6C 6C 
27385 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
27389 318 6F 60 7F 00 
2738d 319 00 00 00 00 
27391 31a 00 00 00 18 
27395 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
27399 31c 61 30 18 0C 
2739d 31d 06 43 63 7F 
273a1 31e 00 00 00 00 
273a5 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
273a9 320 00 7F 33 18 
273ad 321 0C 06 63 7F 
273b1 322 00 00 00 00 
273b5 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
273b9 324 00 00 1F 18 
273bd 325 18 18 18 18 
273c1 326 18 18 18 18 
273c5 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
273c9 328 18 18 F8 00 
273cd 329 00 00 00 00 
273d1 32a 00 00 00 18 
273d5 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
273d9 32c 18 18 FF 00 
273dd 32d 00 00 00 00 
273e1 32e 00 00 00 00 
273e5 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
273e9 330 00 00 FF 18 
273ed 331 18 18 18 18 
273f1 332 18 18 18 18 
273f5 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
273f9 334 18 18 F8 18 
273fd 335 18 18 18 18 
27401 336 18 18 18 00 
27405 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
27409 338 00 00 FF 00 
2740d 339 00 00 00 00 
27411 33a 00 00 00 18 
27415 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
27419 33c 18 18 FF 18 
2741d 33d 18 18 18 18 
27421 33e 18 18 18 63 
27425 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
27429 340 36 63 63 7F 
2742d 341 63 63 63 63 
27431 342 00 00 00 00 
27435 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
27439 344 00 1E 30 3E 
2743d 345 33 33 33 6E 
27441 346 00 00 00 6C 
27445 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
27449 348 EC 0C FC 00 
2744d 349 00 00 00 00 
27451 34a 00 00 00 00 
27455 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27459 34c FC 0C EC 6C 
2745d 34d 6C 6C 6C 6C 
27461 34e 6C 6C 6C 6C 
27465 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
27469 350 EF 00 FF 00 
2746d 351 00 00 00 00 
27471 352 00 00 00 00 
27475 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27479 354 FF 00 EF 6C 
2747d 355 6C 6C 6C 6C 
27481 356 6C 6C 6C 6C 
27485 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
27489 358 EC 0C EC 6C 
2748d 359 6C 6C 6C 6C 
27491 35a 6C 6C 6C 00 
27495 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
27499 35c FF 00 FF 00 
2749d 35d 00 00 00 00 
274a1 35e 00 00 00 6C 
274a5 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
274a9 360 EF 00 EF 6C 
274ad 361 6C 6C 6C 6C 
274b1 362 6C 6C 6C 00 
274b5 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
274b9 364 63 3E 63 63 
274bd 365 63 63 3E 63 
274c1 366 00 00 00 00 
274c5 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
274c9 368 30 3C 36 33 
274cd 369 33 33 33 6E 
274d1 36a 00 00 00 00 
274d5 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
274d9 36c 66 66 6F 66 
274dd 36d 66 66 36 1F 
274e1 36e 00 00 00 36 
274e5 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
274e9 370 66 66 66 66 
274ed 371 66 66       | 	byte	$66[6]
274ef 371 36 1F 00 00 
274f3 372 00 00 63 00 
274f7 373 7F 66 46 16 
274fb 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
274ff 375 66 7F 00 00 
27503 376 00 6C 38 00 
27507 377 38 30 30 3C 
2750b 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
2750f 379 33 6E 00 00 
27513 37a 00 36 1C 00 
27517 37b 63 67 6F 7F 
2751b 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
2751f 37d 63 63 00 00 
27523 37e 00 30 18 00 
27527 37f 3C 18 18 18 
2752b 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
2752f 381 18 3C 00 00 
27533 382 00 3C 66 00 
27537 383 3C 18 18 18 
2753b 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
2753f 385 18 3C 00 00 
27543 386 00 00 00 36 
27547 387 1C 08 00 3E 
2754b 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
2754f 389 63 3E 00 00 
27553 38a 00 18 18 18 
27557 38b 18 18 18 18 
2755b 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
2755f 38d 00 00 00 00 
27563 38e 00 00 00 00 
27567 38f 00 00 00 00 | 	byte	$00[12]
2756b 390 F8 18 18 18 
2756f 391 18 18 18 18 
27573 392 18 FF FF FF 
27577 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
2757b 394 FF FF FF FF 
2757f 395 FF FF FF FF 
27583 396 FF          | 	byte	$ff[9]
27584 397 00 00 00 00 
27588 398 00 00 00    | 	byte	$00[7]
2758b 398 FF FF FF FF 
2758f 399 FF FF FF FF 
27593 39a FF          | 	byte	$ff[9]
27594 39b 00 00 00 7E 
27598 39c 7E 5A 18 18 
2759c 39d 18 18 18 18 
275a0 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
275a4 39f 1C 36 1C 63 
275a8 3a0 63 63 63 63 
275ac 3a1 63 63 63 63 
275b0 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
275b4 3a3 FF FF FF FF 
275b8 3a4 FF FF FF    | 	byte	$ff[7]
275bb 3a4 00 00 00 00 
275bf 3a5 00 00 00 00 
275c3 3a6 00          | 	byte	$00[9]
275c4 3a7 30 18 00 3E 
275c8 3a8 63 63 63 63 
275cc 3a9 63 63 63 63 
275d0 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
275d4 3ab 00 00 00 1E 
275d8 3ac 33 33 33 1B 
275dc 3ad 33 63 63 63 
275e0 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
275e4 3af 1C 36 00 3E 
275e8 3b0 63 63 63 63 
275ec 3b1 63 63 63 63 
275f0 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
275f4 3b3 30 18 00 63 
275f8 3b4 67 6F 7F 7B 
275fc 3b5 73 63 63 63 
27600 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
27604 3b7 00 00 60 30 
27608 3b8 18 00 3B 66 
2760c 3b9 66 66 66 66 
27610 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
27614 3bb 00 00 36 1C 
27618 3bc 08 00 3B 66 
2761c 3bd 66 66 66 66 
27620 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
27624 3bf 36 1C 00 3E 
27628 3c0 63 63 06 1C 
2762c 3c1 30 60 63 63 
27630 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
27634 3c3 00 00 36 1C 
27638 3c4 08 00 3E 63 
2763c 3c5 06 1C 30 63 
27640 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
27644 3c7 30 18 00 3F 
27648 3c8 66 66 66 3E 
2764c 3c9 36 66 66 66 
27650 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
27654 3cb 30 18 00 63 
27658 3cc 63 63 63 63 
2765c 3cd 63 63 63 63 
27660 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
27664 3cf 00 00 60 30 
27668 3d0 18 00 3B 6E 
2766c 3d1 66 06 06 06 
27670 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
27674 3d3 66 33 00 63 
27678 3d4 63 63 63 63 
2767c 3d5 63 63 63 63 
27680 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
27684 3d7 00 00 60 30 
27688 3d8 18 00 63 63 
2768c 3d9 63 63 63 63 
27690 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
27694 3db 30 18 00 66 
27698 3dc 66 66 66 3C 
2769c 3dd 18 18 18 18 
276a0 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
276a4 3df 00 00 00 08 
276a8 3e0 0C 0C 3F 0C 
276ac 3e1 0C 0C 0C 6C 
276b0 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
276b4 3e3 30 18 00 00 
276b8 3e4 00 00 00 00 
276bc 3e5 00 00 00 00 
276c0 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
276c4 3e7 00 00 00 00 
276c8 3e8 00 00 00 00 | 	byte	$00[8]
276cc 3e9 7F 00 00 00 
276d0 3ea 00 00 00 00 
276d4 3eb 66 33 00 00 
276d8 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
276dc 3ed 00 00 00 00 
276e0 3ee 00 00 00 00 
276e4 3ef 00 00 00 00 
276e8 3f0 00 00 00 00 
276ec 3f1 00 00 00 00 
276f0 3f2 00          | 	byte	$00[21]
276f1 3f2 0C 06 3C 36 
276f5 3f3 1C 00 00 00 
276f9 3f4 00 00 00 00 
276fd 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27701 3f6 00 00 00 63 
27705 3f7 3E 00 00 00 
27709 3f8 00 00 00 00 
2770d 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27711 3fa 00 00 00 00 
27715 3fb 3E 63 06 1C 
27719 3fc 36 63 63 36 
2771d 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
27721 3fe 00 00 00 00 
27725 3ff 00 00 00 00 | 	byte	$00[8]
27729 400 18 00 7E 00 
2772d 401 18 00 00 00 
27731 402 00 00 00 00 
27735 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27739 404 00 00 00 00 
2773d 405 00 00 00 00 | 	byte	$00[8]
27741 406 18 30 1E 00 
27745 407 00 00 1C 36 
27749 408 36 1C 00 00 
2774d 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
27751 40a 00 00 00 00 
27755 40b 63 00 00 00 
27759 40c 00 00 00 00 
2775d 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27761 40e 00 00 00 18 
27765 40f 18 00 00 00 
27769 410 00 00 00 00 
2776d 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27771 412 00 00 00 00 
27775 413 00          | 	byte	$00[5]
27776 413 CC 66 33 00 
2777a 414 33 33 33 33 
2777e 415 33 33 6E 00 
27782 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
27786 417 00 3F 66 66 
2778a 418 66 3E 36 66 
2778e 419 66 66 6F 00 
27792 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
27796 41b 36 1C 08 00 
2779a 41c 3B 6E 66 06 
2779e 41d 06 06 0F 00 
277a2 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
277a6 41f 00 00 00 7E 
277aa 420 7E 7E 7E 7E 
277ae 421 7E 7E 00 00 
277b2 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
277b6 423 00 00 00 00 
277ba 424 00 00 00 00 
277be 425 00 00 00 00 
277c2 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
277c4 427             | 'vga_font       file "vgafont.def"
277c4 427 00 00 00 00 
      ...             
277f4 433 00 00 00 00 
277f8 434 00 00 00    | st_font        file "st4font.def"
277fb 434 FF FF 00 00 
277ff 435 00 00 00 00 
27803 436 00 18 18 18 
27807 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2780b 438 18 18 18 18 
2780f 439 18 18 18 18 
27813 43a 18          | 	byte	$18[9]
27814 43b 00 00 00 00 
27818 43c 00 00 00    | 	byte	$00[7]
2781b 43c FF FF 18 18 
2781f 43d 18 18 18 18 
27823 43e 18 18 18 18 
27827 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2782b 440 FF FF 00 00 
2782f 441 00 00 00 00 
27833 442 00 18 18 18 
27837 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2783b 444 1F 1F 18 18 
2783f 445 18 18 18 18 
27843 446 18 18 18 18 
27847 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2784b 448 F8 F8 18 18 
2784f 449 18 18 18 18 
27853 44a 18 00 00 00 
27857 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2785b 44c 1F 1F 18 18 
2785f 44d 18 18 18 18 
27863 44e 18 00 00 00 
27867 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2786b 450 F8 F8 18 18 
2786f 451 18 18 18 18 
27873 452 18 18 18 18 
27877 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2787b 454 1F 1F 00 00 
2787f 455 00 00 00 00 
27883 456 00 18 18 18 
27887 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2788b 458 F8 F8 00 00 
2788f 459 00 00 00 00 
27893 45a 00 18 18 18 
27897 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2789b 45c FF FF 18 18 
2789f 45d 18 18 18 18 
278a3 45e 18 00 00 18 
278a7 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
278ab 460 66 7E 7E 66 
278af 461 66 66 66 30 
278b3 462 18 00 00 7E 
278b7 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
278bb 464 3E 06 06 06 
278bf 465 06 7E 7E 18 
278c3 466 0C 30 18 3C 
278c7 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
278cb 468 06 06 06 66 
278cf 469 66 7E 3C 00 
278d3 46a 00 30 18 66 
278d7 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
278db 46c 7E 7E 76 76 
278df 46d 66 66 66 00 
278e3 46e 00 30 18 7C 
278e7 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
278eb 470 1C 38 70 60 
278ef 471 60 7E 3E 00 
278f3 472 00 30 18 7E 
278f7 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
278fb 474 18 0C 0C 06 
278ff 475 06 7E 7E 00 
27903 476 00 18 18 00 
27907 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
2790b 478 18 18 0C 0C 
2790f 479 06 7E 7E 00 
27913 47a 00 30 18 3C 
27917 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
2791b 47c 66 66 66 66 
2791f 47d 66          | 	byte	$66[5]
27920 47e 7E 3C 00 00 
27924 47f 00 00 06 06 
27928 480 06 06 16 1E 
2792c 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
27930 482 7E 7E 00 00 
27934 483 00 00 00 00 
27938 484 00 3C 7C 60 
2793c 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
27940 486 7E 7C 30 18 
27944 487 00 00 00 00 
27948 488 00 3C 7E 66 
2794c 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
27950 48a 7E 7C 18 0C 
27954 48b 00 00 30 18 
27958 48c 00 3C 3E 06 
2795c 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
27960 48e 7E 7C 00 00 
27964 48f 00 00 30 18 
27968 490 00 3E 7E 66 
2796c 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
27970 492 66 66 00 00 
27974 493 00 00 30 18 
27978 494 00 7C 7E 06 
2797c 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
27980 496 7E 3E 00 00 
27984 497 00 00 30 18 
27988 498 00 7E 7E 30 
2798c 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
27990 49a 7E 7E 00 00 
27994 49b 00 00 18 18 
27998 49c 00 7E 7E 30 
2799c 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
279a0 49e 7E 7E 00 00 
279a4 49f 00 00 30 18 
279a8 4a0 00 3C 7E 66 
279ac 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
279b0 4a2 7E 3C 00 00 
279b4 4a3 00 00 1C 1C 
279b8 4a4 18 18 38 3C 
279bc 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
279c0 4a6 3C 3C 00 00 
279c4 4a7 00 00 00 00 
279c8 4a8 00 00 00 00 
279cc 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
279d0 4aa 00 00 00 00 
279d4 4ab 00 00       | 	byte	$00[6]
279d6 4ab 18 18 18 18 
279da 4ac 18 18 18 18 | 	byte	$18[8]
279de 4ad 00 00 18 18 
279e2 4ae 00 00 00 00 
279e6 4af 66 66 66 66 
279ea 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
279ee 4b1 00 00 00 00 
279f2 4b2 00 00 00 00 
279f6 4b3 00          | 	byte	$00[9]
279f7 4b3 66 66 FF FF 
279fb 4b4 66 66 FF FF 
279ff 4b5 66 66 00 00 
27a03 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
27a07 4b7 7C 7E 06 06 
27a0b 4b8 3E 7C 60 60 
27a0f 4b9 7E 3E 18 18 
27a13 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
27a17 4bb 66 30 30 18 
27a1b 4bc 18 0C 0C 66 
27a1f 4bd 66 00 00 00 
27a23 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
27a27 4bf 66 66 3C 1C 
27a2b 4c0 1C FC FE 66 
27a2f 4c1 66 FE FC 00 
27a33 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
27a37 4c3 18 18 18 18 
27a3b 4c4 00 00 00 00 
27a3f 4c5 00 00 00 00 
27a43 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
27a47 4c7 18 1C 0C 0C 
27a4b 4c8 0C 0C 0C 0C 
27a4f 4c9 1C 18 30 00 
27a53 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
27a57 4cb 18 38 30 30 
27a5b 4cc 30 30 30 30 
27a5f 4cd 38 18 0C 00 
27a63 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
27a67 4cf 66 66 3C 3C 
27a6b 4d0 FF FF 3C 3C 
27a6f 4d1 66 66 00 00 
27a73 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
27a77 4d3 00 18 18 18 
27a7b 4d4 7E 7E 18 18 
27a7f 4d5 18 00 00 00 
27a83 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
27a87 4d7 00 00 00 00 
27a8b 4d8 00 00       | 	byte	$00[6]
27a8d 4d9 18 18 18 18 
27a91 4da 18          | 	byte	$18[5]
27a92 4da 0C 04 00 00 
27a96 4db 00 00 00 00 
27a9a 4dc 7E 7E 00 00 
27a9e 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
27aa2 4de 00 00 00 00 
27aa6 4df 00 00 00 00 
27aaa 4e0 00 00 00 00 
27aae 4e1 00          | 	byte	$00[13]
27aaf 4e1 18 18 18 00 
27ab3 4e2 00 00 00 60 
27ab7 4e3 60 60 30 30 
27abb 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
27abf 4e5 06 06 06 00 
27ac3 4e6 00 00 00 3C 
27ac7 4e7 7E 66 66 66 
27acb 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
27acf 4e9 66 7E 3C 00 
27ad3 4ea 00 00 00 18 
27ad7 4eb 18 1C 1C 18 
27adb 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
27adf 4ed 18 7E 7E 00 
27ae3 4ee 00 00 00 3C 
27ae7 4ef 7E 66 66 30 
27aeb 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
27aef 4f1 0C 7E 7E 00 
27af3 4f2 00 00 00 7E 
27af7 4f3 7E 30 30 18 
27afb 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
27aff 4f5 66 7E 3C 00 
27b03 4f6 00 00 00 30 
27b07 4f7 30 38 38 3C 
27b0b 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
27b0f 4f9 7E 30 30 00 
27b13 4fa 00 00 00 7E 
27b17 4fb 7E 06 06 3E 
27b1b 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
27b1f 4fd 66 7E 3C 00 
27b23 4fe 00 00 00 38 
27b27 4ff 3C 0E 06 06 
27b2b 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
27b2f 501 66 7E 3C 00 
27b33 502 00 00 00 7E 
27b37 503 7E 60 60 30 
27b3b 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
27b3f 505 0C 0C 0C 00 
27b43 506 00 00 00 3C 
27b47 507 7E 66 66 3C 
27b4b 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
27b4f 509 66 7E 3C 00 
27b53 50a 00 00 00 3C 
27b57 50b 7E 66 66 7E 
27b5b 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
27b5f 50d 70 3C 1C 00 
27b63 50e 00 00 00 00 
27b67 50f 00 00 18 18 
27b6b 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
27b6f 511 18 18 18 00 
27b73 512 00 00 00 00 
27b77 513 00 00 18 18 
27b7b 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
27b7f 515 18 18 18 0C 
27b83 516 04 00 00 00 
27b87 517 70 38 1C 0E 
27b8b 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
27b8f 519 70 00 00 00 
27b93 51a 00 00 00 00 
27b97 51b 00 00 7E 7E 
27b9b 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
27b9f 51d 00 00 00 00 
27ba3 51e 00 00 00 00 | 	byte	$00[8]
27ba7 51f 0E 1C 38 70 
27bab 520 E0 70 38 1C 
27baf 521 0E 00 00 00 
27bb3 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
27bb7 523 7E 66 66 30 
27bbb 524 30 18 18 18 
27bbf 525 00 18 18 00 
27bc3 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
27bc7 527 7E 66 66 66 
27bcb 528 66 36 06 66 
27bcf 529 66 7E 3C 00 
27bd3 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
27bd7 52b 3C 7E 66 66 
27bdb 52c 66 7E 7E 66 
27bdf 52d 66 66 66 00 
27be3 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
27be7 52f 7E 66 66 7E 
27beb 530 3E 66 66 66 
27bef 531 66 7E 3E 00 
27bf3 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
27bf7 533 7E 66 66 06 
27bfb 534 06 06 06 66 
27bff 535 66 7E 3C 00 
27c03 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
27c07 537 7E 66 66 66 
27c0b 538 66 66 66 66 
27c0f 539 66 7E 3E 00 
27c13 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
27c17 53b 7E 06 06 3E 
27c1b 53c 3E 06 06 06 
27c1f 53d 06 7E 7E 00 
27c23 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
27c27 53f 7E 06 06 3E 
27c2b 540 3E 06 06 06 
27c2f 541 06 06 06 00 
27c33 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
27c37 543 7E 06 06 76 
27c3b 544 76 66 66 66 
27c3f 545 66 7E 3C 00 
27c43 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
27c47 547 66 66 66 7E 
27c4b 548 7E 66 66 66 
27c4f 549 66 66 66 00 
27c53 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
27c57 54b 7E 18 18 18 
27c5b 54c 18 18 18 18 
27c5f 54d 18 7E 7E 00 
27c63 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
27c67 54f 60 60 60 60 
27c6b 550 60 60 60    | 	byte	$60[7]
27c6e 551 66 66 7E 3C 
27c72 552 00 00 00 00 
27c76 553 66 66 36 36 
27c7a 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
27c7e 555 66 66 C6 C6 
27c82 556 00 00 00 00 
27c86 557 06 06 06 06 
27c8a 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
27c8e 559 06 06 7E 7E 
27c92 55a 00 00 00 00 
27c96 55b C6 C6 EE EE 
27c9a 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
27c9e 55d C6 C6 C6 C6 
27ca2 55e 00 00 00 00 
27ca6 55f 66 66 66 6E 
27caa 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
27cae 561 76 66 66 66 
27cb2 562 00 00 00 00 
27cb6 563 3C 7E 66 66 
27cba 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
27cbe 565 66 66 7E 3C 
27cc2 566 00 00 00 00 
27cc6 567 3E 7E 66 66 
27cca 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
27cce 569 06 06 06 06 
27cd2 56a 00 00 00 00 
27cd6 56b 3C 7E 66 66 
27cda 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
27cde 56d 66 56 3E 6C 
27ce2 56e 00 00 00 00 
27ce6 56f 3E 7E 66 66 
27cea 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
27cee 571 66 66 C6 C6 
27cf2 572 00 00 00 00 
27cf6 573 7C 7E 06 06 
27cfa 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
27cfe 575 60 60 7E 3E 
27d02 576 00 00 00 00 
27d06 577 7E 7E 18 18 
27d0a 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
27d0e 579 18 18 18 18 
27d12 57a 00 00 00 00 
27d16 57b 66 66 66 66 
27d1a 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
27d1e 57d 66 66 7E 3C 
27d22 57e 00 00 00 00 
27d26 57f 66 66 66 66 
27d2a 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
27d2e 581 3C 3C 18 18 
27d32 582 00 00 00 00 
27d36 583 C6 C6 C6 C6 
27d3a 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
27d3e 585 FE EE C6 82 
27d42 586 00 00 00 00 
27d46 587 66 66 66 3C 
27d4a 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
27d4e 589 3C 66 66 66 
27d52 58a 00 00 00 00 
27d56 58b 66 66 66 66 
27d5a 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
27d5e 58d 18 18 18 18 
27d62 58e 00 00 00 00 
27d66 58f 7E 7E 30 30 
27d6a 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
27d6e 591 06 06 7E 7E 
27d72 592 00 00 00 00 
27d76 593 3C 3C 0C 0C 
27d7a 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
27d7e 595 0C 0C 3C 3C 
27d82 596 00 00 00 00 
27d86 597 06 06 0C 0C 
27d8a 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
27d8e 599 60 60 C0 C0 
27d92 59a 00 00 00 00 
27d96 59b 3C 3C 30 30 
27d9a 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
27d9e 59d 30 30 3C 3C 
27da2 59e 00 00 00 00 
27da6 59f 18 18 3C 3C 
27daa 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
27dae 5a1 00 00 00 00 
27db2 5a2 00 00 00 00 
27db6 5a3 00 00 00 00 
27dba 5a4 00 00 00 00 
27dbe 5a5 00 00       | 	byte	$00[18]
27dc0 5a6 FE FE 00 00 
27dc4 5a7 00 00 0C 0C 
27dc8 5a8 18 18 00 00 
27dcc 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
27dd0 5aa 00 00 00 00 
27dd4 5ab 00 00 00 00 
27dd8 5ac 00          | 	byte	$00[9]
27dd9 5ac 3C 7C 60 7C 
27ddd 5ad 7E 66 66 7E 
27de1 5ae 7C 00 00 00 
27de5 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
27de9 5b0 3E 7E 66 66 
27ded 5b1 66 66 66 7E 
27df1 5b2 3E 00 00 00 
27df5 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
27df9 5b4 3C 3E 06 06 
27dfd 5b5 06 06 06 7E 
27e01 5b6 7C 00 00 00 
27e05 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
27e09 5b8 7C 7E 66 66 
27e0d 5b9 66 66 66 7E 
27e11 5ba 7C 00 00 00 
27e15 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
27e19 5bc 3C 7E 66 66 
27e1d 5bd 7E 06 06 7E 
27e21 5be 7C 00 00 00 
27e25 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
27e29 5c0 18 7E 7E 18 
27e2d 5c1 18 18 18 18 
27e31 5c2 18 00 00 00 
27e35 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
27e39 5c4 7C 7E 66 66 
27e3d 5c5 66 66 7E 7C 
27e41 5c6 60 7E 3E 00 
27e45 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
27e49 5c8 3E 7E 66 66 
27e4d 5c9 66 66 66 66 
27e51 5ca 66 00 00 00 
27e55 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
27e59 5cc 1C 1C 18 18 
27e5d 5cd 18 18 18 3C 
27e61 5ce 3C 00 00 00 
27e65 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
27e69 5d0 30 30 30 30 
27e6d 5d1 30 30 30 30 
27e71 5d2 30          | 	byte	$30[9]
27e72 5d2 3E 1E 00 00 
27e76 5d3 06 06 06 36 
27e7a 5d4 36 1E 1E 1E 
27e7e 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
27e82 5d6 00 00 00 00 
27e86 5d7 1C 1C 18 18 
27e8a 5d8 18 18 18 18 
27e8e 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
27e92 5da 00 00 00 00 
27e96 5db 00 00 00    | 	byte	$00[7]
27e99 5dc 6C FE FE D6 
27e9d 5dd D6 C6 C6 C6 
27ea1 5de C6 00 00 00 
27ea5 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
27ea9 5e0 3E 7E 66 66 
27ead 5e1 66 66 66 66 
27eb1 5e2 66 00 00 00 
27eb5 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
27eb9 5e4 3C 7E 66 66 
27ebd 5e5 66 66 66 7E 
27ec1 5e6 3C 00 00 00 
27ec5 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
27ec9 5e8 3E 7E 66 66 
27ecd 5e9 66 66 66 7E 
27ed1 5ea 3E 06 06 00 
27ed5 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
27ed9 5ec 7C 7E 66 66 
27edd 5ed 66 66 66 7E 
27ee1 5ee 7C 60 60 00 
27ee5 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
27ee9 5f0 3E 7E 66 06 
27eed 5f1 06 06 06 06 
27ef1 5f2 06 00 00 00 
27ef5 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
27ef9 5f4 7C 7E 06 0E 
27efd 5f5 3C 70 60 7E 
27f01 5f6 3E 00 00 00 
27f05 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
27f09 5f8 7E 7E 18 18 
27f0d 5f9 18 18 18 78 
27f11 5fa 70 00 00 00 
27f15 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
27f19 5fc 66 66 66 66 
27f1d 5fd 66 66 66    | 	byte	$66[7]
27f20 5fe 7E 7C 00 00 
27f24 5ff 00 00 00 00 
27f28 600 00 66 66 66 
27f2c 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
27f30 602 18 18 00 00 
27f34 603 00 00 00 00 
27f38 604 00 C6 C6 D6 
27f3c 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
27f40 606 C6 82 00 00 
27f44 607 00 00 00 00 
27f48 608 00 66 66 3C 
27f4c 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
27f50 60a 66 66 00 00 
27f54 60b 00 00 00 00 
27f58 60c 00 66 66 66 
27f5c 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
27f60 60e 7C 60 7E 3E 
27f64 60f 00 00 00 00 
27f68 610 00 7E 7E 30 
27f6c 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
27f70 612 7E 7E 00 00 
27f74 613 00 00 30 18 
27f78 614 18 18 18 0C 
27f7c 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
27f80 616 18 30 00 00 
27f84 617 00 00 18 18 
27f88 618 18 18 18 18 
27f8c 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
27f90 61a 18 18 00 00 
27f94 61b 00 00 0C 18 
27f98 61c 18 18 18 30 
27f9c 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
27fa0 61e 18 0C 00 00 
27fa4 61f 00 00 6C 7E 
27fa8 620 36 00 00 00 
27fac 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
27fb0 622 00 00 00 00 
27fb4 623 00 00 00 00 
27fb8 624 00          | 	byte	$00[9]
27fb9 624 18 18 18 18 
27fbd 625 18 18 00 00 
27fc1 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
27fc4 627             | 'amiga_font     file "amigafont.def"
27fc4 627 00 6C FE FE 
27fc8 628 7C 38 10 00 
27fcc 629 18 18 18 F8 
27fd0 62a F8 18 18 18 | a8_font        file "atari8.fnt"
27fd4 62b C0 C0 C0 C0 
27fd8 62c C0 C0 C0 C0 | 	byte	$c0[8]
27fdc 62d 18 18 18 1F 
27fe0 62e 1F 00 00 00 
27fe4 62f 18 18 18 1F 
27fe8 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
27fec 631 00 00 00 1F 
27ff0 632 1F 18 18 18 
27ff4 633 C0 E0 70 38 
27ff8 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
27ffc 635 03 07 0E 1C 
28000 636 38 70 E0 C0 
28004 637 80 C0 E0 F0 
28008 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
2800c 639 00 00 00 00 
28010 63a F0 F0 F0 F0 
28014 63b 01 03 07 0F 
28018 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
2801c 63d F0 F0 F0 F0 
28020 63e 00 00 00 00 
28024 63f 0F 0F 0F 0F 
28028 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
2802c 641 FF FF 00 00 
28030 642 00 00 00 00 
28034 643 00 00 00 00 
28038 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
2803c 645 00 00 00 00 
28040 646 0F 0F 0F 0F 
28044 647 00 38 38 EE 
28048 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
2804c 649 00 00 00 F8 
28050 64a F8 18 18 18 
28054 64b 00 00 00 FF 
28058 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
2805c 64d 18 18 18 FF 
28060 64e FF 18 18 18 
28064 64f 00 00 3C 7E 
28068 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
2806c 651 00 00 00 00 
28070 652 FF FF FF FF 
28074 653 03 03 03 03 
28078 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
2807c 655 00 00 00 FF 
28080 656 FF 18 18 18 
28084 657 18 18 18 FF 
28088 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
2808c 659 0F 0F 0F 0F 
28090 65a 0F 0F 0F 0F | 	byte	$0f[8]
28094 65b 18 18 18 F8 
28098 65c F8 00 00 00 
2809c 65d 1E 06 1E 06 
280a0 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
280a4 65f 00 18 3C 7E 
280a8 660 18 18 18 00 
280ac 661 00 18 18 18 
280b0 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
280b4 663 00 18 0C 7E 
280b8 664 0C 18 00 00 
280bc 665 00 18 30 7E 
280c0 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
280c4 667 00 00 00 00 
280c8 668 00 00 00 00 
280cc 669 00          | 	byte	$00[9]
280cd 669 18 18 18 18 
280d1 66a 00 18 00 00 
280d5 66b 66 66 66 00 
280d9 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
280dd 66d 66 FF 66 66 
280e1 66e FF 66 00 18 
280e5 66f 7C 06 3C 60 
280e9 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
280ed 671 66 36 18 0C 
280f1 672 66 62 00 38 
280f5 673 6C 38 1C F6 
280f9 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
280fd 675 18 18 18 00 
28101 676 00 00 00 00 
28105 677 70 38 18 18 
28109 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
2810d 679 0E 1C 18 18 
28111 67a 1C 0E 00 00 
28115 67b 66 3C FF 3C 
28119 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
2811d 67d 18 18 7E 18 
28121 67e 18 00 00 00 
28125 67f 00 00 00 00 
28129 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
2812d 681 00 00 7E 00 
28131 682 00 00 00 00 
28135 683 00 00 00 00 
28139 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
2813d 685 60 30 18 0C 
28141 686 06 02 00 00 
28145 687 3C 66 76 6E 
28149 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
2814d 689 18 1C 18 18 
28151 68a 18 7E 00 00 
28155 68b 3C 66 30 18 
28159 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
2815d 68d 7E 30 18 30 
28161 68e 66 3C 00 00 
28165 68f 30 38 3C 36 
28169 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
2816d 691 7E 06 3E 60 
28171 692 66 3C 00 00 
28175 693 3C 06 3E 66 
28179 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
2817d 695 7E 60 30 18 
28181 696 0C 0C 00 00 
28185 697 3C 66 3C 66 
28189 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
2818d 699 3C 66 7C 60 
28191 69a 30 1C 00 00 
28195 69b 00 18 18 00 
28199 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
2819d 69d 00 18 18 00 
281a1 69e 18 18 0C 60 
281a5 69f 30 18 0C 18 
281a9 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
281ad 6a1 00 7E 00 00 
281b1 6a2 7E 00 00 06 
281b5 6a3 0C 18 30 18 
281b9 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
281bd 6a5 3C 66 30 18 
281c1 6a6 00 18 00 00 
281c5 6a7 3C 66 76 76 
281c9 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
281cd 6a9 18 3C 66 66 
281d1 6aa 7E 66 00 00 
281d5 6ab 3E 66 3E 66 
281d9 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
281dd 6ad 3C 66 06 06 
281e1 6ae 66 3C 00 00 
281e5 6af 1E 36 66 66 
281e9 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
281ed 6b1 7E 06 3E 06 
281f1 6b2 06 7E 00 00 
281f5 6b3 7E 06 3E 06 
281f9 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
281fd 6b5 7C 06 06 76 
28201 6b6 66 7C 00 00 
28205 6b7 66 66 7E 66 
28209 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
2820d 6b9 7E 18 18 18 
28211 6ba 18 7E 00 00 
28215 6bb 60 60 60 60 
28219 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
2821d 6bd 66 36 1E 1E 
28221 6be 36 66 00 00 
28225 6bf 06 06 06 06 
28229 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
2822d 6c1 C6 EE FE D6 
28231 6c2 C6 C6 00 00 
28235 6c3 66 6E 7E 7E 
28239 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
2823d 6c5 3C 66 66 66 
28241 6c6 66 3C 00 00 
28245 6c7 3E 66 66 3E 
28249 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
2824d 6c9 3C 66 66 66 
28251 6ca 36 6C 00 00 
28255 6cb 3E 66 66 3E 
28259 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
2825d 6cd 3C 06 3C 60 
28261 6ce 60 3C 00 00 
28265 6cf 7E 18 18 18 
28269 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
2826d 6d1 66 66 66 66 
28271 6d2 66          | 	byte	$66[5]
28272 6d2 7E 00 00 66 
28276 6d3 66 66 66 3C 
2827a 6d4 18 00 00 C6 
2827e 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
28282 6d6 C6 00 00 66 
28286 6d7 66 3C 3C 66 
2828a 6d8 66 00 00 66 
2828e 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
28292 6da 18 00 00 7E 
28296 6db 30 18 0C 06 
2829a 6dc 7E 00 00 78 
2829e 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
282a2 6de 78 00 00 02 
282a6 6df 06 0C 18 30 
282aa 6e0 60 00 00 1E 
282ae 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
282b2 6e2 1E 00 00 10 
282b6 6e3 38 6C C6 00 
282ba 6e4 00 00 00 00 
282be 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
282c2 6e6 FF 00 00 18 
282c6 6e7 3C 7E 7E 3C 
282ca 6e8 18 00 00 00 
282ce 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
282d2 6ea 7C 00 00 06 
282d6 6eb 06 3E 66 66 
282da 6ec 3E 00 00 00 
282de 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
282e2 6ee 3C 00 00 60 
282e6 6ef 60 7C 66 66 
282ea 6f0 7C 00 00 00 
282ee 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
282f2 6f2 3C 00 00 70 
282f6 6f3 18 7C 18 18 
282fa 6f4 18 00 00 00 
282fe 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
28302 6f6 60 3E 00 06 
28306 6f7 06 3E 66 66 
2830a 6f8 66 00 00 18 
2830e 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
28312 6fa 3C 00 00 60 
28316 6fb 00 60 60 60 
2831a 6fc 60 3C 00 06 
2831e 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
28322 6fe 66 00 00 1C 
28326 6ff 18 18 18 18 
2832a 700 3C 00 00 00 
2832e 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
28332 702 C6 00 00 00 
28336 703 3E 66 66 66 
2833a 704 66 00 00 00 
2833e 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
28342 706 3C 00 00 00 
28346 707 3E 66 66 3E 
2834a 708 06 06 00 00 
2834e 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
28352 70a 60 60 00 00 
28356 70b 3E 66 06 06 
2835a 70c 06 00 00 00 
2835e 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
28362 70e 3E 00 00 18 
28366 70f 7E 18 18 18 
2836a 710 70 00 00 00 
2836e 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
28372 712 7C 00 00 00 
28376 713 66 66 66 3C 
2837a 714 18 00 00 00 
2837e 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
28382 716 6C 00 00 00 
28386 717 66 3C 18 3C 
2838a 718 66 00 00 00 
2838e 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
28392 71a 30 1E 00 00 
28396 71b 7E 30 18 0C 
2839a 71c 7E 00 00 18 
2839e 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
283a2 71e 3C 00 18 18 
283a6 71f 18 18 18 18 
283aa 720 18 18 00 7E 
283ae 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
283b2 722 60 00 10 18 
283b6 723 1C 1E 1C 18 
283ba 724 10 00 08 18 
283be 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
283c2 726 08 00       | 	byte	$08, $00
283c4 727 00 00 00 00 
283c8 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
283c9 728 80 00 00 00 
283cd 729 00 80 00 00 
283d1 72a 80 80 00 00 
283d5 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
283d9 72c 80 00 80 00 
283dd 72d 00 40 80 00 
283e1 72e AA AA AA 00 
283e5 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
283e9 730 FF 00 00 00 
283ed 731 00 FF 00 00 
283f1 732 FF FF 00 00 
283f5 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
283f9 734 FF 00 FF 00 
283fd 735 00 FF FF 00 
28401 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
28404 737 00 00 00 00 
28408 738 00          | ataripalette   file "ataripalettep2.def"
28409 738 11 11 11 00 
2840d 739 22 22 22 00 
28411 73a 33 33 33 00 
28415 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
28419 73c 55 55 55 00 
2841d 73d 66 66 66 00 
28421 73e 77 77 77 00 
28425 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
28429 740 99 99 99 00 
2842d 741 AA AA AA 00 
28431 742 BB BB BB 00 
28435 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
28439 744 DD DD DD 00 
2843d 745 EE EE EE 00 
28441 746 FF FF FF 00 
28445 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
28449 748 00 14 40 00 
2844d 749 00 1E 60 00 
28451 74a 00 28 80 00 
28455 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
28459 74c 00 3C BF 00 
2845d 74d 00 46 DF 00 
28461 74e 00 50 FF 00 
28465 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
28469 750 39 77 FF 00 
2846d 751 55 8A FF 00 
28471 752 71 9E FF 00 
28475 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
28479 754 AA C5 FF 00 
2847d 755 C6 D8 FF 00 
28481 756 E3 EC FF 00 
28485 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
28489 758 00 00 40 00 
2848d 759 00 00 60 00 
28491 75a 00 00 80 00 
28495 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
28499 75c 00 00 BF 00 
2849d 75d 00 00 DF 00 
284a1 75e 00 00 FF 00 
284a5 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
284a9 760 39 39 FF 00 
284ad 761 55 55 FF 00 
284b1 762 71 71 FF 00 
284b5 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
284b9 764 AA AA FF 00 
284bd 765 C6 C6 FF 00 
284c1 766 E3 E3 FF 00 
284c5 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
284c9 768 20 00 40 00 
284cd 769 30 00 60 00 
284d1 76a 40 00 80 00 
284d5 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
284d9 76c 60 00 BF 00 
284dd 76d 70 00 DF 00 
284e1 76e 80 00 FF 00 
284e5 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
284e9 770 9C 39 FF 00 
284ed 771 AA 55 FF 00 
284f1 772 B8 71 FF 00 
284f5 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
284f9 774 D5 AA FF 00 
284fd 775 E3 C6 FF 00 
28501 776 F1 E3 FF 00 
28505 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
28509 778 40 00 40 00 
2850d 779 60 00 60 00 
28511 77a 80 00 80 00 
28515 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
28519 77c BF 00 BF 00 
2851d 77d DF 00 DF 00 
28521 77e FF 00 FF 00 
28525 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
28529 780 FF 39 FF 00 
2852d 781 FF 55 FF 00 
28531 782 FF 71 FF 00 
28535 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
28539 784 FF AA FF 00 
2853d 785 FF C6 FF 00 
28541 786 FF E3 FF 00 
28545 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
28549 788 40 00 20 00 
2854d 789 60 00 30 00 
28551 78a 80 00 40 00 
28555 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
28559 78c BF 00 60 00 
2855d 78d DF 00 70 00 
28561 78e FF 00 80 00 
28565 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
28569 790 FF 39 9C 00 
2856d 791 FF 55 AA 00 
28571 792 FF 71 B8 00 
28575 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
28579 794 FF AA D5 00 
2857d 795 FF C6 E3 00 
28581 796 FF E3 F1 00 
28585 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
28589 798 40 00 00 00 
2858d 799 60 00 00 00 
28591 79a 80 00 00 00 
28595 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
28599 79c BF 00 00 00 
2859d 79d DF 00 00 00 
285a1 79e FF 00 00 00 
285a5 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
285a9 7a0 FF 39 39 00 
285ad 7a1 FF 55 55 00 
285b1 7a2 FF 71 71 00 
285b5 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
285b9 7a4 FF AA AA 00 
285bd 7a5 FF C6 C6 00 
285c1 7a6 FF E3 E3 00 
285c5 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
285c9 7a8 40 10 00 00 
285cd 7a9 60 18 00 00 
285d1 7aa 80 20 00 00 
285d5 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
285d9 7ac BF 30 00 00 
285dd 7ad DF 38 00 00 
285e1 7ae FF 40 00 00 
285e5 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
285e9 7b0 FF 6A 39 00 
285ed 7b1 FF 80 55 00 
285f1 7b2 FF 95 71 00 
285f5 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
285f9 7b4 FF BF AA 00 
285fd 7b5 FF D5 C6 00 
28601 7b6 FF EA E3 00 
28605 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
28609 7b8 40 20 00 00 
2860d 7b9 60 30 00 00 
28611 7ba 80 40 00 00 
28615 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
28619 7bc BF 60 00 00 
2861d 7bd DF 70 00 00 
28621 7be FF 80 00 00 
28625 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
28629 7c0 FF 9C 39 00 
2862d 7c1 FF AA 55 00 
28631 7c2 FF B8 71 00 
28635 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
28639 7c4 FF D5 AA 00 
2863d 7c5 FF E3 C6 00 
28641 7c6 FF F1 E3 00 
28645 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
28649 7c8 40 30 00 00 
2864d 7c9 60 48 00 00 
28651 7ca 80 60 00 00 
28655 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
28659 7cc BF 90 00 00 
2865d 7cd DF A8 00 00 
28661 7ce FF C0 00 00 
28665 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
28669 7d0 FF CE 39 00 
2866d 7d1 FF D5 55 00 
28671 7d2 FF DC 71 00 
28675 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
28679 7d4 FF EA AA 00 
2867d 7d5 FF F1 C6 00 
28681 7d6 FF F8 E3 00 
28685 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
28689 7d8 30 40 00 00 
2868d 7d9 48 60 00 00 
28691 7da 60 80 00 00 
28695 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
28699 7dc 90 BF 00 00 
2869d 7dd A8 DF 00 00 
286a1 7de C0 FF 00 00 
286a5 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
286a9 7e0 CE FF 39 00 
286ad 7e1 D5 FF 55 00 
286b1 7e2 DC FF 71 00 
286b5 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
286b9 7e4 EA FF AA 00 
286bd 7e5 F1 FF C6 00 
286c1 7e6 F8 FF E3 00 
286c5 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
286c9 7e8 00 40 00 00 
286cd 7e9 00 60 00 00 
286d1 7ea 00 80 00 00 
286d5 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
286d9 7ec 00 BF 00 00 
286dd 7ed 00 DF 00 00 
286e1 7ee 00 FF 00 00 
286e5 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
286e9 7f0 39 FF 39 00 
286ed 7f1 55 FF 55 00 
286f1 7f2 71 FF 71 00 
286f5 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
286f9 7f4 AA FF AA 00 
286fd 7f5 C6 FF C6 00 
28701 7f6 E3 FF E3 00 
28705 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
28709 7f8 00 40 14 00 
2870d 7f9 00 60 1E 00 
28711 7fa 00 80 28 00 
28715 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
28719 7fc 00 BF 3C 00 
2871d 7fd 00 DF 46 00 
28721 7fe 00 FF 50 00 
28725 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
28729 800 39 FF 77 00 
2872d 801 55 FF 8A 00 
28731 802 71 FF 9E 00 
28735 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
28739 804 AA FF C5 00 
2873d 805 C6 FF D8 00 
28741 806 E3 FF EC 00 
28745 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
28749 808 00 40 28 00 
2874d 809 00 60 3C 00 
28751 80a 00 80 50 00 
28755 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
28759 80c 00 BF 78 00 
2875d 80d 00 DF 8C 00 
28761 80e 00 FF A0 00 
28765 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
28769 810 39 FF B5 00 
2876d 811 55 FF C0 00 
28771 812 71 FF CA 00 
28775 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
28779 814 AA FF DF 00 
2877d 815 C6 FF EA 00 
28781 816 E3 FF F4 00 
28785 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
28789 818 00 40 40 00 
2878d 819 00 60 60 00 
28791 81a 00 80 80 00 
28795 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
28799 81c 00 BF BF 00 
2879d 81d 00 DF DF 00 
287a1 81e 00 FF FF 00 
287a5 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
287a9 820 39 FF FF 00 
287ad 821 55 FF FF 00 
287b1 822 71 FF FF 00 
287b5 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
287b9 824 AA FF FF 00 
287bd 825 C6 FF FF 00 
287c1 826 E3 FF FF 00 
287c5 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
287c9 828 00 28 40 00 
287cd 829 00 3C 60 00 
287d1 82a 00 50 80 00 
287d5 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
287d9 82c 00 78 BF 00 
287dd 82d 00 8C DF 00 
287e1 82e 00 A0 FF 00 
287e5 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
287e9 830 39 B5 FF 00 
287ed 831 55 C0 FF 00 
287f1 832 71 CA FF 00 
287f5 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
287f9 834 AA DF FF 00 
287fd 835 C6 EA FF 00 
28801 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
28804 837             | 
28804 837             | '**********************************************************************************
28804 837             | '
28804 837             | '        Timings and colors definitions
28804 837             | '
28804 837             | '**********************************************************************************
28804 837             | 
28804 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
28804 837 10 00 00 00 
28808 838 50 00 00 00 
2880c 839 0C 00 00 00 
28810 83a 00 04 00 00 | timings         long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
28814 83b 08 00 00 00 
28818 83c 04 00 00 00 
2881c 83d 08 00 00 00 
28820 83e 80 00 00 00 | 	byte	$08, $00, $00, $00, $04, $00, $00, $00, $08, $00, $00, $00, $80, $00, $00, $00
28824 83f 40 02 00 00 
28828 840 6A 8C 15 14 
2882c 841 FB 06 B7 01 
28830 842 40 02 00 00 | 	byte	$40, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $40, $02, $00, $00
28834 843 00 00 00 00 
28838 844 C0 00 00 00 
2883c 845 00 00 00 00 
28840 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
28844 847 00 75 C7 97 
28848 848 27 47 F6 0A 
2884c 849 05 79 CB 9B 
28850 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
28854 84b             | 
28854 84b             | ''--------  Initialization  ----------------------------------------------------------------
28854 84b             | 
28854 84b 28 0C 64 FD | hdmi            setq    #6
28858 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
2885c 84d 28 10 64 FD |                 setq    #8
28860 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
28864 84f             | 
28864 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
28868 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
2886c 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
28870 852 D6 C6 01 F1 |                 add     t1,hbase
28874 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
28878 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
2887c 855 7B 0B 80 5F 
28880 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
28884 857 66 66 86 FF 
28888 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
2888c 859             | '
2888c 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
28890 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
28894 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
28898 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
2889c 85d             | 
2889c 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
288a0 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
288a4 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
288a8 860             | 
288a8 860             | ''--------  frame rendering main loop  ---------------------------------------------------
288a8 860             | 
288a8 860 28 06 64 FD | p101            setq 	#3
288ac 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
288b0 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
288b4 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
288b8 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
288bc 865 00 A0 05 F6 |                 mov     dlinum, #0
288c0 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
288c4 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
288c8 868             | 
288c8 868             | 
288c8 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
288cc 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
288d0 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
288d4 86b             |                 
288d4 86b             | 
288d4 86b             | 
288d4 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
288d4 86b             |   
288d4 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
288d8 86c 29 FE 65 3D |          if_nc  setq2   #255
288dc 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
288e0 86e             | 
288e0 86e             | '' -----   up porch (before the picture)
288e0 86e             | 
288e0 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
288e4 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
288e8 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
288ec 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
288f0 872             |  
288f0 872             |    
288f0 872             |  
288f0 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
288f4 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
288f8 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
288fc 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
28900 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
28904 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
28908 878             | 
28908 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
2890c 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
28910 87a 48 00 B0 FD | 		call    #dli
28914 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
28918 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
2891c 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
28920 87e             |                 	
28920 87e             |                 
28920 87e             | 
28920 87e             |  
28920 87e             | '' ------- the main screen drawing starts here
28920 87e             | 
28920 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
28924 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
28928 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
2892c 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
28930 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
28934 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
28938 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
2893c 885             |               
2893c 885             | 
2893c 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
28940 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
28944 887             | 
28944 887             | ' ---------------- All visible lines displayed now, start vblank  
28944 887             | 
28944 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
28948 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
2894c 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
28950 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
28954 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
28958 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
2895c 88d             | 
2895c 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
2895c 88d             | 
2895c 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
2895c 88d             | 
2895c 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
28960 88e             | 
28960 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
28964 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
28968 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
2896c 891             | 
2896c 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
28970 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
28974 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
28978 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
2897c 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
28980 896             | 
28980 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
28984 897 DD C6 41 F8 |                 getnib  t1,dl,#0
28988 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
2898c 899 70 00 90 AD |     if_z        jmp     #preload
28990 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
28994 89b 94 00 90 AD |     if_z        jmp     #preload2
28998 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
2899c 89d 0C 00 90 AD |     if_z        jmp     #p390
289a0 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
289a4 89f 28 00 90 AD |     if_z        jmp     #p391  
289a8 8a0             | 
289a8 8a0 2D 00 64 FD | p308            ret
289ac 8a1             |    
289ac 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
289b0 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
289b4 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
289b8 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
289bc 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
289c0 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
289c4 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
289c8 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
289cc 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
289d0 8aa             |  
289d0 8aa             | '' --------  Reload palette. To do 
289d0 8aa             | 
289d0 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
289d4 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
289d8 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
289dc 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
289e0 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
289e4 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
289e8 8b0 70 FF 9F FD |         	jmp     #dli                
289ec 8b1             |       
289ec 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
289ec 8b1             | 
289ec 8b1             | 
289ec 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
289ec 8b1             | 
289ec 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
289f0 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
289f4 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
289f8 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
289fc 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
28a00 8b6             |         
28a00 8b6             | '' -------------- Preload a line from PSRAM        
28a00 8b6             |         
28a00 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
28a04 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
28a08 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
28a0c 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
28a10 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
28a14 8bb             | 
28a14 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
28a18 8bc 32 B7 01 F6 |                 mov     buf2,a1024
28a1c 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
28a20 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
28a24 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
28a28 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
28a2c 8c1             |  
28a2c 8c1             |  
28a2c 8c1             | preload2      '  incmod  dlinum,#3
28a2c 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
28a30 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
28a34 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
28a38 8c4 28 02 64 FD |                 setq	#1
28a3c 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
28a40 8c6             |                 
28a40 8c6             | 
28a40 8c6             | '' -------------- Draw sprites
28a40 8c6             | 
28a40 8c6 CF 5C 02 F6 | sprite          mov t8,frames
28a44 8c7 10 5C 0E F5 | 		and t8,#16 wz
28a48 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
28a4c 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
28a50 8ca             | 		
28a50 8ca             | 
28a50 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
28a54 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
28a58 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
28a5c 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
28a60 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
28a64 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
28a68 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
28a6c 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
28a70 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
28a74 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
28a78 8d4 01 52 86 F1 |                 sub     sprite_h,#1
28a7c 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
28a80 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
28a84 8d7             | 
28a84 8d7             | 
28a84 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
28a88 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
28a8c 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
28a90 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
28a94 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
28a98 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
28a9c 8dd 00 5E 06 F6 |                 mov 	t9,#0
28aa0 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
28aa4 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
28aa8 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
28aac 8e1             |      
28aac 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
28ab0 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
28ab4 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
28ab8 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
28abc 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
28ac0 8e6             |                 
28ac0 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
28ac4 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
28ac8 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
28acc 8e9             |   		
28acc 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
28ad0 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
28ad4 8eb             | 
28ad4 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
28ad8 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
28adc 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
28ae0 8ee             |  
28ae0 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
28ae4 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
28ae8 8f0 10 00 90 CD |      if_c 	jmp     #p899		
28aec 8f1             | 	
28aec 8f1             | 	
28aec 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
28af0 8f2 28 CD 01 F1 | 		add	t4,sprite_w
28af4 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
28af8 8f4             | 
28af8 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
28afc 8f5             | 
28afc 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
28b00 8f6 01 58 86 F1 | 	 	sub     t6,#1
28b04 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
28b08 8f8             | 
28b08 8f8 28 58 62 FD |                 setq   	t6
28b0c 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
28b10 8fa 28 5D 02 F6 |                 mov t8,sprite_w
28b14 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
28b18 8fc 24 00 90 AD |         if_z    jmp #p898
28b1c 8fd             |          
28b1c 8fd             |         
28b1c 8fd 70 5F 06 F6 |                 mov  t9,#368
28b20 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
28b24 8ff             | 
28b24 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
28b28 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
28b2c 901 FF FF 7F FF 
28b30 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
28b34 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
28b38 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
28b3c 905 2D 01 00 F5 |                 and 0-0, t7
28b40 906             |                
28b40 906             | 
28b40 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
28b44 907 E5 E0 7A FA |                 wmlong 368,t3				
28b48 908             |                 
28b48 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
28b4c 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
28b50 90a 2D 00 64 FD |                 ret
28b54 90b             | 	
28b54 90b             | 	
28b54 90b             |                
28b54 90b             |  
28b54 90b             | '' -------------- Graphics line ------------------------------------------------------------
28b54 90b             |  
28b54 90b             | 
28b54 90b             | '' consts and vars
28b54 90b             | 
28b54 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
28b58 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
28b5c 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
28b60 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
28b64 90f             | 
28b64 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
28b68 910             | 
28b68 910             | '------ these longs will be set by setmode function
28b68 910             | 
28b68 910 00 00 00 00 | m_bs            long    0        'blanks before sync
28b6c 911 00 00 00 00 | m_sn            long    0        'sync
28b70 912 00 00 00 00 | m_bv            long    0        'blanks before visible
28b74 913 00 00 00 00 | m_vi            long    0        'visible pixels #
28b78 914             | 'm_border        long    0        'left/right borders
28b78 914 00 00 00 00 | i_upporch       long    0        'up porch lines
28b7c 915 00 00 00 00 | i_vsync         long    0        'vsync lines
28b80 916 00 00 00 00 | i_downporch     long    0        'down porch lines
28b84 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
28b88 918 00 00 00 00 | i_totalvis      long    0
28b8c 919             | 
28b8c 919             | '-------------------------------------
28b8c 919             |  
28b8c 919 00 00 00 00 | linenum         long    0
28b90 91a 00 00 00 00 | frames          long    0
28b94 91b 00 00 00 00 | dlinum long 0
28b98 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
28b9c 91d             | 
28b9c 91d 00 00 00 00 | vblankptr       long    0
28ba0 91e 00 00 00 00 | modeptr         long    0
28ba4 91f 00 00 00 00 | paletteptr      long    0
28ba8 920 00 00 00 00 | dlptr           long    0
28bac 921 01 00 00 00 | hbase           long    1
28bb0 922 00 00 00 00 | mailbox         long    0
28bb4 923 00 00 00 00 | spriteptr          long 0
28bb8 924             | 
28bb8 924 00 00 00 00 | cmd             long    0
28bbc 925 00 B0 07 00 | buf1            long    $80000-16384-4096
28bc0 926 00 04 00 00 | buf2            long    1024
28bc4 927 01 00 00 00 | dlptr2          long    1
28bc8 928 01 00 00 00 | dl              long    1
28bcc 929             | 
28bcc 929 00 00 00 00 | buf1c long 0
28bd0 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
28bd4 92b 01 00 00 00 | framebuf2       long    1
28bd8 92c 01 00 00 00 | hsync0          long    1
28bdc 92d 01 00 00 00 | hsync1          long    1
28be0 92e             | 
28be0 92e 01 00 00 00 | t1              long    1
28be4 92f 00 00 00 00 | t2 long 0
28be8 930 00 00 00 00 | t3 long 0
28bec 931 00 00 00 00 | t4 long 0
28bf0 932             | 
28bf0 932 00 00 00 00 | rcnt            long    0  'dl repeat count
28bf4 933 00 00 00 00 | rcnt2           long    0
28bf8 934 00 00 00 00 | rcnt2a          long    0
28bfc 935 00 00 00 00 | roffset         long    0
28c00 936 00 00 00 00 | rdl             long    0  'dl repeat line
28c04 937 00 00 00 00 | dlc             long    0  'dl command
28c08 938             | 
28c08 938 FF FF FF FF | affffffff       long    $ffffffff
28c0c 939 00 00 00 00 | sprite1pointer long 0
28c10 93a 00 00 00 00 | sprite1xy      long 0
28c14 93b 00 00 00 00 | sprite1wh      long 0
28c18 93c 00 00 00 00 | sprite2pointer long 0
28c1c 93d 00 00 00 00 | sprite2xy      long 0
28c20 93e 00 00 00 00 | sprite2wh      long 0
28c24 93f 00 00 00 00 | sprite3pointer long 0
28c28 940 00 00 00 00 | sprite3xy      long 0
28c2c 941 00 00 00 00 | sprite3wh      long 0
28c30 942 00 00 00 00 | sprite4pointer long 0
28c34 943 00 00 00 00 | sprite4xy      long 0
28c38 944 00 00 00 00 | sprite4wh      long 0
28c3c 945 00 00 00 00 | sprite5pointer long 0
28c40 946 00 00 00 00 | sprite5xy      long 0
28c44 947 00 00 00 00 | sprite5wh      long 0
28c48 948 00 00 00 00 | sprite6pointer long 0
28c4c 949 00 00 00 00 | sprite6xy      long 0
28c50 94a 00 00 00 00 | sprite6wh      long 0
28c54 94b 00 00 00 00 | sprite7pointer long 0
28c58 94c 00 00 00 00 | sprite7xy      long 0
28c5c 94d 00 00 00 00 | sprite7wh      long 0
28c60 94e 00 00 00 00 | sprite8pointer long 0
28c64 94f 00 00 00 00 | sprite8xy      long 0
28c68 950 00 00 00 00 | sprite8wh      long 0
28c6c 951 00 00 00 00 | sprite9pointer long 0
28c70 952 00 00 00 00 | sprite9xy      long 0
28c74 953 00 00 00 00 | sprite9wh      long 0
28c78 954 00 00 00 00 | sprite10pointer long 0
28c7c 955 00 00 00 00 | sprite10xy      long 0
28c80 956 00 00 00 00 | sprite10wh      long 0
28c84 957 00 00 00 00 | sprite11pointer long 0
28c88 958 00 00 00 00 | sprite11xy      long 0
28c8c 959 00 00 00 00 | sprite11wh      long 0
28c90 95a 00 00 00 00 | sprite12pointer long 0
28c94 95b 00 00 00 00 | sprite12xy      long 0
28c98 95c 00 00 00 00 | sprite12wh      long 0
28c9c 95d 00 00 00 00 | sprite13pointer long 0
28ca0 95e 00 00 00 00 | sprite13xy      long 0
28ca4 95f 00 00 00 00 | sprite13wh      long 0
28ca8 960 00 00 00 00 | sprite14pointer long 0
28cac 961 00 00 00 00 | sprite14xy      long 0
28cb0 962 00 00 00 00 | sprite14wh      long 0
28cb4 963 00 00 00 00 | sprite15pointer long 0
28cb8 964 00 00 00 00 | sprite15xy      long 0
28cbc 965 00 00 00 00 | sprite15wh      long 0
28cc0 966 00 00 00 00 | sprite16pointer long 0
28cc4 967 00 00 00 00 | sprite16xy      long 0
28cc8 968 00 00 00 00 | sprite16wh      long 0
28ccc 969 00 00 00 00 | sprite17pointer long 0
28cd0 96a 00 00 00 00 | sprite17xy      long 0
28cd4 96b 00 00 00 00 | sprite17wh      long 0
28cd8 96c 00 00 00 00 | sprite18pointer long 0
28cdc 96d 00 00 00 00 | sprite18xy      long 0
28ce0 96e 00 00 00 00 | sprite18wh      long 0
28ce4 96f 00 00 00 00 | spritenum long 0
28ce8 970             | 
28ce8 970 00 00 00 00 | spriteline long 0
28cec 971 84 03 00 00 | sprite_x long 900
28cf0 972 00 00 00 00 | sprite_y long 0
28cf4 973 10 00 00 00 | sprite_w long 16
28cf8 974 40 00 00 00 | sprite_h long 64
28cfc 975 00 00 00 00 | l2 long 0
28d00 976 00 00 00 00 | t5 long 0
28d04 977 00 00 00 00 | t6 long 0
28d08 978 00 00 00 00 | t7 long 0
28d0c 979 00 00 00 00 | t8 long 0
28d10 97a 00 00 00 00 | t9 long 0
28d14 97b 00 00 00 00 | preloadaddr long 0
28d18 97c 00 00 00 00 | preloadlineaddr long 0
28d1c 97d 00 04 00 00 | a1024 long 1024
28d20 97e             | 
28d20 97e E0 03 00 00 | aa long 992
28d24 97f FF 03 00 00 | a1023 long 1023
28d28 980 00 10 00 00 | a4096 long 4096
28d2c 981             |  fit 368
28d2c 981             | _psram_spin2_dat_
28d2c 981 00 00 00 00 
      ...             
28e24 9bf 00 00 00 00 
28e28 9c0 00 00 00 00 |     listdata long 0[8*8]
28e2c 9c1             |             orgh
28e2c                 | 
28e2c                 | ' driver state
28e2c     FF FF FF FF | drivercog   long    -1  ' COG id of driver
28e30     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
28e34                 | 
28e34                 | ' delay profile
28e34     07 00 00 00 
28e38     00 CF 7B 05 
28e3c     80 D1 F0 08 
28e40     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
28e44     80 C4 60 0F 
28e48     80 39 7A 12 
28e4c     40 2D D9 13 
28e50     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
28e54                 | 
28e54                 | ' data to be passed to driver when starting it
28e54                 | startupData
28e54     00 00 00 00 |     long    0           ' current frequency
28e58     00 00 00 00 |     long    FLAGS       ' optional flags for driver
28e5c     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
28e60     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
28e64     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
28e68     74 8E 02 00 |     long    deviceData  ' address of devices data structure in HUBRAM
28e6c     F4 8E 02 00 |     long    qosData     ' address of QoS data structure in HUBRAM
28e70     14 8F 02 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
28e74                 | 
28e74                 | ' data for memory
28e74                 | deviceData
28e74                 |     ' 16 bank parameters follow (16MB per bank)
28e74     00 00 00 00 
      ...             
28eac     00 00 00 00 
28eb0     00 00 00 00 |     long    0[16]                               ' banks 0-15
28eb4                 |     ' 16 banks of pin parameters follow
28eb4     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
28eb8     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
28ebc     FF FF FF FF 
      ...             
28eec     FF FF FF FF 
28ef0     FF FF FF FF |     long    -1[14]                              ' banks 2-15
28ef4                 | 
28ef4                 | ' data for COG polling
28ef4                 | qosData 
28ef4     00 00 FF FF 
28ef8     00 00 FF FF 
28efc     00 00 FF FF 
28f00     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
28f04     00 00 FF FF 
28f08     00 00 FF FF 
28f0c     00 00 FF FF 
28f10     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
28f14                 |     
28f14                 | ' mailbox storage
28f14                 | 
28f14                 | mailboxes
28f14     00 00 00 00 
      ...             
28f6c     00 00 00 00 
28f70     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
28f74                 | 	alignl
28f74                 | _psram16drv_spin2_dat_
28f74                 |                             orgh
28f74     00 00 00 00 
      ...             
28f8c     00 00 00 00 
28f90     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
28f94                 | 
28f94                 | driver_start
28f94                 |                             org
28f94 000             | '..................................................................................................
28f94 000             | ' Memory layout for COG RAM once operational:
28f94 000             | '
28f94 000             | '  COG RAM address      Usage
28f94 000             | '  ---------------      ----
28f94 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
28f94 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
28f94 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
28f94 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
28f94 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
28f94 000             | '  ~$198-$1F3           State and register variables
28f94 000             | '
28f94 000             | ' Also during driver COG startup:
28f94 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
28f94 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
28f94 000             | '..................................................................................................
28f94 000             |                             
28f94 000             | ' Mailbox storage after vector initialization
28f94 000             | 
28f94 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
28f98 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
28f9c 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
28fa0 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
28fa4 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
28fa8 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
28fac 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
28fb0 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
28fb4 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
28fb8 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
28fbc 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
28fc0 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
28fc4 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
28fc8 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
28fcc 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
28fd0 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
28fd4 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
28fd8 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
28fdc 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
28fe0 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
28fe4 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
28fe8 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
28fec 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
28ff0 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
28ff4 018             | 
28ff4 018             | ' Mailbox parameter addresses per COG once patched
28ff4 018             |                             
28ff4 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
28ff8 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
28ffc 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
29000 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
29004 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
29008 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
2900c 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
29010 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
29014 020             | 
29014 020             | '..................................................................................................
29014 020             | ' Per COG request and state setup and service branching
29014 020             |         
29014 020             | cog0                 
29014 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
29018 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
2901c 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
29020 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
29024 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
29028 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2902c 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
29030 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
29034 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
29038 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2903c 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
29040 02b 33 CA 63 FD |                             execf   request-0               'jump to service
29044 02c             | cog1                        
29044 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
29048 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
2904c 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
29050 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
29054 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
29058 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2905c 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
29060 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
29064 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
29068 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2906c 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
29070 037 33 CA 63 FD |                             execf   request-0               'jump to service
29074 038             | cog2                         
29074 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
29078 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
2907c 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
29080 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
29084 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
29088 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2908c 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
29090 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
29094 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
29098 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2909c 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
290a0 043 33 CA 63 FD |                             execf   request-0               'jump to service
290a4 044             | cog3                        
290a4 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
290a8 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
290ac 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
290b0 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
290b4 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
290b8 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
290bc 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
290c0 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
290c4 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
290c8 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
290cc 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
290d0 04f 33 CA 63 FD |                             execf   request-0               'jump to service
290d4 050             | cog4                        
290d4 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
290d8 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
290dc 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
290e0 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
290e4 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
290e8 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
290ec 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
290f0 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
290f4 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
290f8 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
290fc 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
29100 05b 33 CA 63 FD |                             execf   request-0               'jump to service
29104 05c             | cog5                        
29104 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
29108 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
2910c 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
29110 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
29114 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
29118 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2911c 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
29120 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
29124 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
29128 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2912c 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
29130 067 33 CA 63 FD |                             execf   request-0               'jump to service
29134 068             | cog6                        
29134 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
29138 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
2913c 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
29140 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
29144 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
29148 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2914c 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
29150 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
29154 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
29158 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2915c 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
29160 073 33 CA 63 FD |                             execf   request-0               'jump to service
29164 074             | cog7                        
29164 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
29168 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
2916c 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
29170 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
29174 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
29178 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2917c 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
29180 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
29184 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
29188 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2918c 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
29190 07f 33 CA 63 FD |                             execf   request-0               'jump to service
29194 080             |                             fit     128
29194 080             | 
29194 080             |                             fit     128
29194 080             | pad                         long    0[128-$]                'align init code to $80
29194 080             | 
29194 080             | '..................................................................................................
29194 080             | 
29194 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
29194 080             | 
29194 080             | init                        
29194 080             |                             ' get driver scratch long address in hub
29194 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
29198 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
2919c 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
291a0 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
291a4 084             |                     
291a4 084             |                             ' read in the additional LUT RAM code
291a4 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
291a8 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
291ac 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
291b0 087             | 
291b0 087             |                             ' read the startup parameters
291b0 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
291b4 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
291b8 089             | 
291b8 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
291b8 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
291bc 08a             | 
291bc 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
291c0 08b 01 00 00 5F 
291c4 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
291c8 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
291cc 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
291d0 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
291d4 090             | 
291d4 090             |                             ' setup data pin modes and data bus pin group in streamer commands
291d4 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
291d8 091 01 00 00 FF 
291dc 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
291e0 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
291e4 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
291e8 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
291ec 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
291f0 097 08 DE 47 F5 |                             or      a, #8
291f4 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
291f8 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
291fc 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
29200 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
29204 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
29208 09d 01 DE 07 F1 |                             add     a, #1
2920c 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
29210 09f             |  
29210 09f             |                             ' setup device control pin states
29210 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
29214 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
29218 0a1 01 00 00 FF 
2921c 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
29220 0a3             | 
29220 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
29224 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
29228 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
2922c 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
29230 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
29234 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
29238 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
2923c 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
29240 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
29244 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
29248 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
2924c 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
29250 0af             | pinloop
29250 0af             |                             ' generate minimum CE high time before access
29250 0af A1 07 00 FF 
29254 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
29258 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
2925c 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
29260 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
29264 0b4 1F DE 63 FD |                             waitx   a                       'delay
29268 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
2926c 0b6             | 
2926c 0b6             |                             ' setup the COG mailboxes and addresses 
2926c 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
29270 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
29274 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
29278 0b9             | 
29278 0b9 28 2E 64 FD |                             setq    #24-1
2927c 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
29280 0bb             | 
29280 0bb             |                             ' setup the polling loop for active COGs 
29280 0bb 01 C2 63 FD |                             cogid   id
29284 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
29288 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
2928c 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
29290 0bf 0A F0 07 F6 |                             mov     ptra, #10
29294 0c0 E1 F1 03 FA |                             mul     ptra, id
29298 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
2929c 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
292a0 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
292a4 0c4 03 C2 07 FA |                             mul     id, #3
292a8 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
292ac 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
292b0 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
292b4 0c8 D8 01 B0 FD |                             call    #reloadcogs
292b8 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
292bc 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
292c0 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
292c0 0cb D8 E5 B7 F9 |                             setd    d, #addr1
292c4 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
292c8 0cd 08 04 DC FC |                             rep     #2, #8
292cc 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
292d0 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
292d4 0d0             | 
292d4 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
292d4 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
292d4 0d0 01 C2 63 FD |                             cogid   id
292d8 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
292dc 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
292e0 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
292e4 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
292e8 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
292ec 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
292f0 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
292f4 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
292f8 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
292fc 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
29300 0db 3F E4 A7 F9 |                             alti    d, #%111_111
29304 0dc 00 00 00 F6 |                             mov     0-0, 0-0
29308 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
2930c 0de A5 E5 03 F1 |                             add     d, const512
29310 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
29314 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
29318 0e1 00 00 00 F6 |                             mov     0-0, 0-0
2931c 0e2             |                             
2931c 0e2             |                             ' setup register values for control vector loop setup after we return
2931c 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
29320 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
29324 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
29328 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
2932c 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
29330 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
29334 0e8 D0 C3 8F F9 |                             altd    id, #id0
29338 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
2933c 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
29340 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
29344 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
29348 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
2934c 0ee             |  
2934c 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
29350 0ef 07 CA 07 F5 |                             and     request, #7
29354 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
29358 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
2935c 0f2             |                             fit     $100                    'ensure all init code fits this space
2935c 0f2             | 
2935c 0f2             |                             fit     $100                    'ensure all init code fits this space
2935c 0f2             | 
2935c 0f2 00 00 00 00 
      ...             
2938c 0fe 00 00 00 00 
29390 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
29394 100             | 
29394 100             | '..................................................................................................
29394 100             | ' Error result handling and COG notification of request completion
29394 100             | 
29394 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
29398 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
2939c 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
293a0 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
293a4 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
293a8 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
293ac 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
293b0 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
293b4 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
293b8 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
293bc 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
293c0 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
293c4 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
293c8 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
293cc 10e             | ' Poller re-starts here after a COG is serviced
293cc 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
293d0 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
293d4 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
293d8 111             | ' Main dynamic polling loop repeats until a request arrives
293d8 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
293dc 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
293e0 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
293e4 114             | 
293e4 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
293e8 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
293ec 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
293f0 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
293f4 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
293f8 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
293fc 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
29400 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
29404 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
29408 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
2940c 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
29410 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
29414 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
29418 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
2941c 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
29420 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
29424 124             | 
29424 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
29428 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
2942c 126             |  
2942c 126             | '..................................................................................................
2942c 126             | ' List handler                               
2942c 126             | 
2942c 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
29430 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
29434 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
29438 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
2943c 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
29440 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
29444 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
29448 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
2944c 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
29450 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
29454 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
29458 131 33 00 60 FD |                             execf   0-0                     'process the request 
2945c 132             | 
2945c 132             | '..................................................................................................
2945c 132             | ' Restoring per COG state and resuming where we left off
2945c 132             | 
2945c 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
29460 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
29464 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
29468 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
2946c 136 D8 CB FB F8 |                             getbyte request, addr1, #3
29470 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
29474 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
29478 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
2947c 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
29480 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
29484 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
29488 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
2948c 13e             |                    
2948c 13e             | '..................................................................................................
2948c 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
2948c 13e             | 
2948c 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
29490 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
29494 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
29498 141 D0 DF B7 F9 |                             setd    a, #id0
2949c 142 D8 DF BF F9 |                             sets    a, #addr1
294a0 143 FE FF FF FF 
294a4 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
294a8 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
294ac 146 3F DE A7 F9 |                             alti    a, #%111_111 
294b0 147 00 00 F0 F9 |                             muxq    0-0, 0-0
294b4 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
294b8 149 01 E2 63 FD |                             cogid   c
294bc 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
294c0 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
294c4 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
294c8 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
294cc 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
294d0 14f 00 E0 03 F6 |                             mov     b, 0-0
294d4 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
294d8 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
294dc 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
294e0 153 0C 00 90 AD |             if_z            jmp     #excluded               
294e4 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
294e8 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
294ec 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
294f0 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
294f4 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
294f8 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
294fc 15a             | 
294fc 15a             | 'determine priority cogs and build instructions for the polling sequence
294fc 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
29500 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
29504 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
29508 15d             | 
29508 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
2950c 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
29510 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
29514 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
29518 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
2951c 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
29520 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
29524 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
29528 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
2952c 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
29530 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
29534 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
29538 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
2953c 16a             | endprioloop
2953c 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
29540 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
29544 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
29548 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
2954c 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
29550 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
29554 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
29558 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
2955c 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
29560 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
29564 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
29568 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
2956c 176             | 
2956c 176             | ' populate the round robin COG polling instructions
2956c 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
29570 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
29574 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
29578 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
2957c 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
29580 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
29584 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
29588 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
2958c 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
29590 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
29594 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
29598 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
2959c 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
295a0 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
295a4 184             | '..................................................................................................
295a4 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
295a4 184             | 
295a4 184             | set_latency                                                 '            (a) set latency
295a4 184             | get_latency                                                 '            (b) get latency
295a4 184             | set_burst                                                   '            (c) set burst size of bank
295a4 184             | get_burst                                                   '            (d) get burst size of bank
295a4 184             |                                                             '            (e) dump state
295a4 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
295a8 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
295ac 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
295b0 187             |                                                             ' | | | | e  account for following AUGS
295b0 187 04 00 00 FF 
295b4 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
295b8 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
295bc 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
295c0 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
295c4 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
295c8 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
295cc 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
295d0 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
295d4 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
295d8 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
295dc 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
295e0 193             | 
295e0 193             | '..................................................................................................
295e0 193             | ' Misc EXECF code
295e0 193             | 
295e0 193 33 72 63 FD | start_read_exec             execf   newburstr
295e4 194 33 7C 63 FD | start_write_exec            execf   resumewrites
295e8 195 33 78 63 FD | continue_read_exec          execf   lockedreads
295ec 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
295f0 197             | 
295f0 197             | '..................................................................................................
295f0 197             | ' Variables
295f0 197             | 
295f0 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
295f4 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
295f8 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
295fc 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
29600 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
29604 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
29608 19d             | 
29608 19d 00 00 00 80 | xfreq1          long    $80000000
2960c 19e 00 00 00 40 | xfreq2          long    $40000000
29610 19f 03 00 00 00 | delay           long    3
29614 1a0             | 
29614 1a0             | lutcodeaddr                 
29614 1a0             | startupparams
29614 1a0             | excludedcogs                                    'careful: shared register use!
29614 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
29618 1a1 00 00 00 00 | flags           long    0
2961c 1a2             | mask                                            'careful: shared register use!
2961c 1a2 00 00 00 00 | resetmaskA      long    0
29620 1a3             | limit                                           'careful: shared register use!
29620 1a3 00 00 00 00 | resetmaskB      long    0
29624 1a4 00 00 00 00 | datapins        long    0
29628 1a5             | const512                                        'careful: shared register use!
29628 1a5 00 00 00 00 | devicelist      long    0
2962c 1a6 00 00 00 00 | coglist         long    0
29630 1a7 00 00 00 00 | mbox            long    0 
29634 1a8             | 
29634 1a8             | clkpin                                          'shared with code patched during init
29634 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
29638 1a9             | cspin                                           'shared with code patched during init
29638 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
2963c 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
29640 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
29644 1ac 01 00 00 00 | clkdelay        long    1
29648 1ad 00 00 00 00 | regdatabus      long    0
2964c 1ae             | 
2964c 1ae 10 00 00 00 | deviceaddr      long    $10
29650 1af             | rrcounter
29650 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
29654 1b0             | 
29654 1b0             | ' jump addresses for the per COG handlers
29654 1b0 20 00 00 00 | cog0_handler    long    cog0
29658 1b1 2C 00 00 00 | cog1_handler    long    cog1
2965c 1b2 38 00 00 00 | cog2_handler    long    cog2
29660 1b3 44 00 00 00 | cog3_handler    long    cog3
29664 1b4 50 00 00 00 | cog4_handler    long    cog4
29668 1b5 5C 00 00 00 | cog5_handler    long    cog5
2966c 1b6 68 00 00 00 | cog6_handler    long    cog6
29670 1b7 74 00 00 00 | cog7_handler    long    cog7
29674 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
29678 1b9             | 
29678 1b9             | ' EXECF sequences
29678 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
2967c 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
29680 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
29684 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
29688 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
2968c 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
29690 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
29694 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
29694 1c0             | 
29694 1c0             | 
29694 1c0             | ' SKIPF sequences
29694 1c0             | skiptable
29694 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
29698 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
2969c 1c2 00 00 00 00 |                 long    0                      ' read modify write long
296a0 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
296a4 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
296a8 1c5 00 00 00 00 | pattern2        long    0
296ac 1c6 00 00 00 00 | pattern3        long    0
296b0 1c7 77 02 00 00 | singlelong      long    %1001110111  
296b4 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
296b8 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
296bc 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
296c0 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
296c4 1cc             | 
296c4 1cc             | ' LUT RAM address values
296c4 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
296c8 1cd DD 02 00 00 | continue_read   long    continue_read_lut
296cc 1ce DB 02 00 00 | continue_write  long    continue_write_lut
296d0 1cf F6 02 00 00 | noread          long    noread_lut
296d4 1d0             | 
296d4 1d0 00 00 00 00 | id0             long    0
296d8 1d1 01 00 00 00 | id1             long    1
296dc 1d2 02 00 00 00 | id2             long    2
296e0 1d3 03 00 00 00 | id3             long    3
296e4 1d4 04 00 00 00 | id4             long    4
296e8 1d5 05 00 00 00 | id5             long    5
296ec 1d6 06 00 00 00 | id6             long    6
296f0 1d7 07 00 00 00 | id7             long    7
296f4 1d8             | 
296f4 1d8             | 'These next 10 request registers below are also temporarily reused during init 
296f4 1d8             | 'and COG updates and need to follow immediately after id0-id7
296f4 1d8 00 00 00 00 | addr1           long    0
296f8 1d9 00 00 00 00 | hubdata         long    0
296fc 1da 00 00 00 00 | count           long    0
29700 1db 00 00 00 00 | addr2           long    0
29704 1dc 00 00 00 00 | total           long    0
29708 1dd 00 00 00 00 | offset1         long    0
2970c 1de 00 00 00 00 | offset2         long    0
29710 1df 00 00 00 00 | link            long    0
29714 1e0             | 
29714 1e0             | burstwrite                                      'note shared register use during init
29714 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
29718 1e1 00 00 00 00 | id              long    0
2971c 1e2             | 
2971c 1e2 00 00 00 00 | header          long    0
29720 1e3 00 00 00 00 | trailer         long    0
29724 1e4 00 00 00 00 | cmdaddr         long    0
29728 1e5 00 00 00 00 | request         long    0
2972c 1e6 00 00 00 00 | rrlimit         long    0
29730 1e7 00 00 00 00 | pinconfig       long    0
29734 1e8 00 00 00 00 | clks            long    0
29738 1e9 00 00 00 00 | resume          long    0
2973c 1ea 00 00 00 00 | orighubsize     long    0
29740 1eb 00 00 00 00 | wrclks          long    0
29744 1ec             | 
29744 1ec 00 00 00 00 | pattern         long    0
29748 1ed 00 00 00 00 | hubscratch      long    0
2974c 1ee 00 10 00 00 | val4k           long    4096
29750 1ef             | 
29750 1ef             | ' temporary general purpose regs
29750 1ef 00 00 00 00 | a               long    0
29754 1f0 00 00 00 00 | b               long    0
29758 1f1 00 00 00 00 | c               long    0
2975c 1f2 00 00 00 00 | d               long    0
29760 1f3             |                 fit     502
29760 1f3             | 
29760 1f3             |                 fit     502
29760 1f3             | 
29760 1f3             | '..................................................................................................
29760 1f3             | 
29760 1f3             |             orgh
29760                 | 
29760                 | lut_code
29760                 | 'HW init code up to 80 longs
29760                 | 
29760                 | '..................................................................................................
29760                 | ' Memory layout for LUT RAM once operational:
29760                 | '
29760                 | '  LUT RAM address      Usage
29760                 | '  ---------------      ----
29760                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
29760                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
29760                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
29760                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
29760                 | '
29760                 | ' Also during driver COG startup:
29760                 | ' $230-$24F is used for HW init setup
29760                 | ' $250-$26F is used as temporary vector storage 
29760                 | '..................................................................................................
29760                 | 
29760                 |                 org $230    
29760 230             | 
29760 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
29760 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
29764 231 24 16 60 FD |                             pollxfi
29768 232 FF AA 2A FF 
2976c 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
29770 234 28 00 B0 FD |                             call    #sendqspi
29774 235 07 F8 07 FF 
29778 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
2977c 237 28 00 B0 FD |                             call    #sendspi
29780 238 F8 07 78 FF 
29784 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
29788 23a 1C 00 B0 FD |                             call    #sendspi
2978c 23b 7F 78 78 FF 
29790 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
29794 23d 10 00 B0 FD |                             call    #sendspi 
29798 23e 2D 00 64 FD |                             ret
2979c 23f             | 
2979c 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
297a0 240 32 0C 64 FD |                             skipf   #%110
297a4 241 9C EF 03 F6 |                             mov     pb, xsendimm
297a8 242             | 
297a8 242 10 D0 07 F6 | sendspi                     mov     clks, #16
297ac 243 97 EF 03 F6 |                             mov     pb, ximm8lut
297b0 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
297b4 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
297b8 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
297bc 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
297c0 248 24 36 60 FD |                             waitxfi                         'wait for the completion
297c4 249 50 48 63 FD |                             fltl    datapins                'float data bus
297c8 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
297cc 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
297d0 24c             | 
297d0 24c 00 00 00 00 
297d4 24d 00 00 00 00 
297d8 24e 00 00 00 00 
297dc 24f 00 00 00 00 |                 long    0[$270-32-$]
297e0 250             |                 fit     $270-32  ' keep room for 32 vector longs
297e0 250             |     
297e0 250             |                 fit     $270-32  ' keep room for 32 vector longs
297e0 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
297e0 250             | rw_vect ' PSRAM jump vectors
297e0 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
297e4 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
297e8 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
297ec 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
297f0 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
297f4 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
297f8 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
297fc 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
29800 258             | ro_vect ' R/O PSRAM jump vectors
29800 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
29804 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
29808 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
2980c 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
29810 25c 00 01 00 00 |                 long    unsupported
29814 25d 00 01 00 00 |                 long    unsupported
29818 25e 00 01 00 00 |                 long    unsupported
2981c 25f 00 01 00 00 |                 long    unsupported
29820 260             | ctrl_vect ' Control jump vectors
29820 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
29824 261 00 01 00 00 |                 long    unsupported
29828 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
2982c 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
29830 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
29834 265 00 01 00 00 |                 long    unsupported
29838 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
2983c 267 3E 01 00 00 |                 long    reconfig 
29840 268             | no_vect ' Invalid bank jump vectors
29840 268 01 01 00 00 |                 long    invalidbank
29844 269 01 01 00 00 |                 long    invalidbank
29848 26a 01 01 00 00 |                 long    invalidbank
2984c 26b 01 01 00 00 |                 long    invalidbank
29850 26c 01 01 00 00 |                 long    invalidbank
29854 26d 01 01 00 00 |                 long    invalidbank
29858 26e 01 01 00 00 |                 long    invalidbank
2985c 26f 01 01 00 00 |                 long    invalidbank
29860 270             |                 fit     $270
29860 270             | 
29860 270             |                 fit     $270
29860 270             | '..................................................................................................
29860 270             | ' PSRAM READS
29860 270             |                                                             ' a b c d e f
29860 270             |                                                             ' B W L B R L  (a) byte read
29860 270             |                                                             ' Y O O U E O  (b) word read
29860 270             |                                                             ' T R N R S C  (c) long read
29860 270             |                                                             ' E D G S U K  (d) new burst read
29860 270             |                                                             '       T M E  (e) resumed sub-burst
29860 270             |                                                             '         E D  (f) locked sub-burst
29860 270             | 
29860 270             | 
29860 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
29864 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
29868 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
2986c 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
29870 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
29874 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
29878 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
2987c 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
29880 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
29884 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
29888 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
2988c 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
29890 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
29894 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
29898 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
2989c 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
298a0 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
298a4 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
298a8 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
298ac 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
298b0 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
298b4 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
298b8 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
298bc 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
298c0 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
298c4 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
298c8 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
298cc 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
298d0 28c             | 
298d0 28c             |                             ' fall through to read bursts
298d0 28c             |                         
298d0 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
298d0 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
298d4 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
298d8 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
298dc 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
298e0 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
298e4 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
298e8 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
298ec 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
298f0 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
298f4 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
298f8 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
298fc 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
29900 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
29904 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
29908 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
2990c 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
29910 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
29914 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
29918 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
2991c 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
29920 2a0 E8 D1 03 F1 |                             add     clks, clks
29924 2a1             | readcommon
29924 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
29928 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
2992c 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
29930 2a4             | 
29930 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
29934 2a5 69 C8 63 FD |                             rev     cmdaddr
29938 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
2993c 2a7 61 C8 63 FD |                             mergeb  cmdaddr
29940 2a8             | 
29940 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
29944 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
29948 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
29948 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
2994c 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
29950 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
29954 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
29958 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
29958 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
2995c 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
29960 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
29964 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
29968 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
2996c 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
29970 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
29970 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
29974 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
29978 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
2997c 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
29980 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
29984 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
29988 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
2998c 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
29990 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
29994 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
29998 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
2999c 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
299a0 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
299a4 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
299a8 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
299a8 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
299ac 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
299b0 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
299b4 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
299b8 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
299bc 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
299c0 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
299c4 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
299c8 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
299cc 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
299d0 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
299d4 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
299d8 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
299dc 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
299e0 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
299e4 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
299e8 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
299ec 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
299f0 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
299f4 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
299f8 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
299fc 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
29a00 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
29a04 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
29a08 2da 10 03 90 FD |                             jmp     #writecommon
29a0c 2db             | 
29a0c 2db             | '..................................................................................................
29a0c 2db             | ' Burst continuation testing
29a0c 2db             | 
29a0c 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
29a10 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
29a14 2dd             | continue_read_lut          
29a14 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
29a18 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
29a1c 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
29a20 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
29a24 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
29a28 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
29a2c 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
29a30 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
29a34 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
29a38 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
29a3c 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
29a40 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
29a44 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
29a48 2ea             | 
29a48 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
29a4c 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
29a50 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
29a54 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
29a58 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
29a5c 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
29a60 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
29a64 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
29a68 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
29a6c 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
29a70 2f4 2A 1C 66 0D |             _ret_           push    #poller
29a74 2f5             | 
29a74 2f5             | 
29a74 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
29a78 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
29a78 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
29a7c 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
29a80 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
29a84 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
29a88 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
29a8c 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
29a90 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
29a94 2fd 2D 00 64 FD |                             ret                             ' | continue processing
29a98 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
29a9c 2ff             | '..................................................................................................
29a9c 2ff             | ' Completion of requests
29a9c 2ff             | 
29a9c 2ff             | complete_rw_lut             
29a9c 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
29aa0 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
29aa4 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
29aa8 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
29aac 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
29ab0 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
29ab4 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
29ab8 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
29abc 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
29ac0 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
29ac4 309 32 62 64 AD |             if_z            skipf   #%110001
29ac8 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
29acc 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
29ad0 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
29ad4 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
29ad8 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
29adc 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
29ae0 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
29ae4 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
29ae8 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
29aec 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
29af0 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
29af4 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
29af8 316             |                                                             ' skipcase (a) gfx copy to/from hub
29af8 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
29af8 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
29af8 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
29afc 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
29b00 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
29b04 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
29b08 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
29b0c 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
29b10 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
29b14 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
29b18 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
29b1c 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
29b20 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
29b24 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
29b28 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
29b2c 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
29b30 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
29b34 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
29b38 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
29b3c 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
29b40 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
29b44 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
29b48 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
29b4c 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
29b50 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
29b54 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
29b58 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
29b5c 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
29b60 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
29b64 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
29b68 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
29b6c 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
29b70 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
29b74 335 DF B7 03 A6 |             if_z            mov     addr2, link
29b78 336 34 FF 9F AD |             if_z            jmp     #checknext
29b7c 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
29b80 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
29b84 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
29b88 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
29b8c 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
29b90 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
29b94 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
29b98 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
29b9c 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
29ba0 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
29ba4 341             | 
29ba4 341             | '..................................................................................................
29ba4 341             | ' PSRAM WRITES
29ba4 341             |                                                             '  a b c d e f g h
29ba4 341             | 
29ba4 341             |                                                             '  B W L F B R L L (a) byte write(s)
29ba4 341             |                                                             '  Y O O I U E O O (b) word write(s)
29ba4 341             |                                                             '  T R N L R S C C (c) long write(s)
29ba4 341             |                                                             '  E D G L S U K K (d) resumed fill
29ba4 341             |                                                             '          T M E E (e) new burst write
29ba4 341             |                                                             '            E D D (f) resumed burst
29ba4 341             |                                                             '              F B (g) locked fill
29ba4 341             |                                                             '              I U (h) locked burst write
29ba4 341             |                                                             '              L R 
29ba4 341             |                                                             '              L S 
29ba4 341             |                                                             '                T 
29ba4 341             | 
29ba4 341             | w_single                   
29ba4 341             | w_fill_cont           
29ba4 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
29ba8 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
29bac 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
29bb0 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
29bb4 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
29bb8 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
29bbc 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
29bc0 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
29bc4 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
29bc8 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
29bcc 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
29bd0 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
29bd4 34d             |                ' disable call to r_resume_burst for single longs when z=0
29bd4 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
29bd8 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
29bdc 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
29be0 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
29be4 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
29be8 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
29bec 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
29bf0 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
29bf4 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
29bf8 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
29bfc 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
29c00 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
29c04 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
29c08 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
29c0c 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
29c10 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
29c14 35d             |         
29c14 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
29c14 35d             |             '
29c14 35d             |             '  At least one of these 3 optional components will be sent
29c14 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
29c14 35d             |             '     body - N x full longs of data
29c14 35d             |             '     trailer - last partial long of data
29c14 35d             |             '
29c14 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
29c14 35d             |             '
29c14 35d             |             'Case    Type                           Sends
29c14 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
29c14 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
29c14 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
29c14 35d             |             ' 4)     Multiple long fill             body only
29c14 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
29c14 35d             | 
29c14 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
29c14 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
29c18 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
29c1c 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
29c20 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
29c24 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
29c28 362 13 8C 07 F6 |                             mov     pattern3, #%10011
29c2c 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
29c30 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
29c34 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
29c38 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
29c3c 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
29c40 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
29c44 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
29c48 36a             |                             
29c48 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
29c4c 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
29c50 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
29c54 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
29c58 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
29c5c 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
29c60 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
29c64 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
29c68 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
29c6c 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
29c70 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
29c74 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
29c78 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
29c7c 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
29c80 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
29c84 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
29c88 37a             | 
29c88 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
29c8c 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
29c90 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
29c94 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
29c98 37e             |                  
29c98 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
29c9c 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
29ca0 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
29ca4 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
29ca8 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
29cac 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
29cb0 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
29cb4 385             | 
29cb4 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
29cb8 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
29cbc 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
29cc0 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
29cc4 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
29cc8 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
29ccc 38b             | 
29ccc 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
29ccc 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
29cd0 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
29cd4 38d 2A B0 63 FD |                             push    addr1                   'save address
29cd8 38e             | 
29cd8 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
29cd8 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
29cdc 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
29ce0 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
29ce4 391             |             
29ce4 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
29ce8 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
29cec 393 2B B0 63 FD |                             pop     addr1                   'restore address
29cf0 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
29cf4 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
29cf8 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
29cfc 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
29d00 398             | 
29d00 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
29d04 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
29d08 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
29d0c 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
29d10 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
29d14 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
29d18 39e             | 
29d18 39e             |                             'trailer is done
29d18 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
29d1c 39f             | 
29d1c 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
29d20 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
29d24 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
29d28 3a2             | 
29d28 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
29d2c 3a3 69 C8 63 FD |                             rev     cmdaddr                 
29d30 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
29d34 3a5 61 C8 63 FD |                             mergeb  cmdaddr
29d38 3a6             |                             
29d38 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
29d3c 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
29d40 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
29d44 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
29d48 3aa             |                                                          
29d48 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
29d4c 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
29d50 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
29d54 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
29d58 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
29d5c 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
29d60 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
29d64 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
29d68 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
29d6c 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
29d70 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
29d74 3b5             |  
29d74 3b5 59 52 63 FD |                             drvh    cspin
29d78 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
29d7c 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
29d80 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
29d84 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
29d88 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
29d8c 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
29d90 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
29d94 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
29d98 3be EA E5 03 F6 |                             mov     d, orighubsize
29d9c 3bf EF E5 63 F0 |                             shl     d, a
29da0 3c0 F2 E3 83 F1 |                             sub     c, d
29da4 3c1 DD E3 03 F1 |                             add     c, offset1
29da8 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
29dac 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
29db0 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
29db4 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
29db8 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
29dbc 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
29dc0 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
29dc4 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
29dc8 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
29dcc 3cb BB D3 03 F6 |                             mov     resume, restorefill
29dd0 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
29dd4 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
29dd8 3ce 6C FC BF CD |             if_c            call    #yield
29ddc 3cf 2D 00 64 FD |                             ret
29de0 3d0             |                            
29de0 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
29de0 3d0             |                       '     rczl    pa                      'rotate left into address offset
29de0 3d0             |                       '     rczl    c wcz                   'restore count and flags
29de0 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
29de4 3d1 02 EC 67 F0 |                             shl     pa, #2
29de8 3d2 28 06 64 AD |             if_z            setq    #3
29dec 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
29df0 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
29df4 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
29df8 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
29dfc 3d7             | 
29dfc 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
29e00 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
29e04 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
29e08 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
29e0c 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
29e10 3dc             |                 fit 1024-32
29e10 3dc             |         
29e10 3dc             | 
29e10 3dc             | '..................................................................................................
29e10 3dc             | 
29e10 3dc             |                 fit 1024-32
29e10 3dc 00 00 00 00 
29e14 3dd 00 00 00 00 
29e18 3de 00 00 00 00 
29e1c 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
29e20 3e0             |                 org 1024-32
29e20 000             | 
29e20 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
29e20 000 00 00 00 00 |                 long $0000
29e24 001 11 11 00 00 |                 long $1111
29e28 002 22 22 00 00 |                 long $2222
29e2c 003 33 33 00 00 |                 long $3333
29e30 004 44 44 00 00 |                 long $4444
29e34 005 55 55 00 00 |                 long $5555
29e38 006 66 66 00 00 |                 long $6666
29e3c 007 77 77 00 00 |                 long $7777
29e40 008 88 88 00 00 |                 long $8888
29e44 009 99 99 00 00 |                 long $9999
29e48 00a AA AA 00 00 |                 long $aaaa
29e4c 00b BB BB 00 00 |                 long $bbbb
29e50 00c CC CC 00 00 |                 long $cccc
29e54 00d DD DD 00 00 |                 long $dddd
29e58 00e EE EE 00 00 |                 long $eeee
29e5c 00f FF FF 00 00 |                 long $ffff
29e60 010             | 
29e60 010             | 'masks
29e60 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
29e64 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
29e68 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
29e6c 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
29e70 014             | 
29e70 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
29e74 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
29e78 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
29e7c 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
29e80 018             | 
29e80 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
29e84 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
29e88 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
29e8c 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
29e90 01c             | 
29e90 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
29e94 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
29e98 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
29e9c 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
29ea0 020             |         fit 1024
29ea0 020             | 
29ea0 020             |         fit 1024
29ea0 020             | 
29ea0 020             | '--------------------------------------------------------------------------------------------------
29ea0 020             |         orgh
29ea0                 | 
29ea0                 | gfxexpansion
29ea0                 |                             'simple line drawing graphics expansion of memory driver
29ea0                 |                             'jmp     #donerepeats                'just return for now
29ea0                 | 
29ea0     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
29ea4     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
29ea8     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
29eac     DD E1 03 F6 |                             mov     b, offset1              'get error term
29eb0     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
29eb4     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
29eb8     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
29ebc     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
29ec0     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
29ec4     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
29ec8     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
29ecc     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
29ed0     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
29ed4     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
29ed8     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
29edc     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
29ee0     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
29ee4     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
29ee8     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
29eec     DC E5 33 F9 |                             getword d, total, #0            'get line width
29ef0     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
29ef4     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
29ef8     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
29efc     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
29f00     C3 03 80 FD |                             jmp     #readmask               'continue filling
29f04                 | 	alignl
29f04                 | _usbnew_spin2_dat_
29f04                 |                 org     $000
29f04 000             | 
29f04 000             | usb_host_start
29f04 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
29f08 001             | 
29f08 001 03 00 00 FF 
29f0c 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
29f10 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
29f14 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
29f18 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
29f1c 006 29 70 63 FD |                 setq2   htmp
29f20 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
29f24 008             | 
29f24 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
29f28 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
29f2c 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
29f30 00b             | 
29f30 00b             | '------------------------------------------------------------------------------
29f30 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
29f30 00b             | ' special because the receiving function must not respond with either STALL or
29f30 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
29f30 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
29f30 00b             | ' corrupt packet, it must ignore the transaction
29f30 00b             | '------------------------------------------------------------------------------
29f30 00b             | ' On entry:
29f30 00b             | '   PTRA - start address of the SETUP data struct.
29f30 00b             | ' On exit:
29f30 00b             | '   retval - PID_ACK on success, otherwise error code.
29f30 00b             | '------------------------------------------------------------------------------
29f30 00b             | txn_setup
29f30 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
29f34 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
29f38 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
29f3c 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
29f40 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
29f44 010             | .setup
29f44 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
29f48 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29f4c 012 2D 00 64 AD |         if_z    ret
29f50 013 7C 0B B0 FD |                 call    #retry_wait
29f54 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
29f58 015 2D 00 64 AD |         if_z    ret
29f5c 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
29f60 017 E0 FF 9F FD |                 jmp     #.setup
29f64 018             | 
29f64 018             | '------------------------------------------------------------------------------
29f64 018             | ' IN/INTERRUPT transaction.
29f64 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
29f64 018             | '------------------------------------------------------------------------------
29f64 018             | ' On entry:
29f64 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
29f64 018             | '     CRC(b19..23).
29f64 018             | ' On exit:
29f64 018             | '------------------------------------------------------------------------------
29f64 018             | txn_in
29f64 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
29f68 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
29f6c 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
29f70 01b             | 
29f70 01b             |                 ' Fall through to urx_packet
29f70 01b             | 
29f70 01b             | '------------------------------------------------------------------------------
29f70 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
29f70 01b             | ' received are handshakes and IN DATAx.
29f70 01b             | '------------------------------------------------------------------------------
29f70 01b             | ' On entry:
29f70 01b             | ' On exit:
29f70 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
29f70 01b             | '     returned.
29f70 01b             | '------------------------------------------------------------------------------
29f70 01b             | urx_packet
29f70 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
29f74 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
29f78 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
29f7c 01e 1A 92 63 FD |                 getct   hct2
29f80 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
29f84 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
29f88 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
29f8c 022             | .wait_sop
29f8c 022 22 A7 8A FA |                 rdpin   urx, dm
29f90 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
29f94 024 08 00 90 CD |         if_c    jmp     #.get_pid
29f98 025 FC 25 CC FB |                 jnct2   #.wait_sop
29f9c 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
29fa0 027             | .get_pid
29fa0 027 28 02 B0 FD |                 call    #urx_next
29fa4 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
29fa8 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
29fac 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
29fb0 02b             | .chk_pid
29fb0 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29fb4 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
29fb8 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
29fbc 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
29fc0 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
29fc4 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
29fc8 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
29fcc 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
29fd0 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
29fd4 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
29fd8 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
29fdc 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
29fe0 037             | .ack_resend
29fe0 037 22 A7 82 FA |                 rqpin   urx, dm
29fe4 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
29fe8 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
29fec 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
29ff0 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
29ff4 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
29ff8 03d             | .chk_eop
29ff8 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
29ffc 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
2a000 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
2a004 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
2a008 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
2a00c 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
2a010 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
2a014 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
2a018 045 2D 00 64 FD |                 ret
2a01c 046             | .idle
2a01c 046 22 A7 82 FA |                 rqpin   urx, dm
2a020 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2a024 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
2a028 049 2D 00 64 FD |                 ret
2a02c 04a             | 
2a02c 04a             | '------------------------------------------------------------------------------
2a02c 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
2a02c 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
2a02c 04a             | ' if one is required.
2a02c 04a             | '------------------------------------------------------------------------------
2a02c 04a             | ' On entry:
2a02c 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
2a02c 04a             | ' On exit:
2a02c 04a             | '------------------------------------------------------------------------------
2a02c 04a             | utx_token
2a02c 04a 22 A7 82 FA |                 rqpin   urx, dm
2a030 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2a034 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
2a038 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2a03c 04e 34 0D B0 CD |         if_c    call    #utx_pre
2a040 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2a044 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
2a048 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
2a04c 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
2a050 053             | .next_byte
2a050 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
2a054 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
2a058 055             | .wait
2a058 055 40 46 72 FD |                 testp   dp                      wc
2a05c 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
2a060 057 23 03 08 FC |                 akpin   dp
2a064 058 22 A5 22 FC |                 wypin   utx, dm
2a068 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
2a06c 05a             | 
2a06c 05a             | '------------------------------------------------------------------------------
2a06c 05a             | ' SETUP/OUT/INTERRUPT transaction.
2a06c 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
2a06c 05a             | '------------------------------------------------------------------------------
2a06c 05a             | ' On entry:
2a06c 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
2a06c 05a             | '     CRC(b19..23).
2a06c 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
2a06c 05a             | '   pkt_data - count of DATAx payload bytes to send.
2a06c 05a             | ' On exit:
2a06c 05a             | '------------------------------------------------------------------------------
2a06c 05a             | txn_out
2a06c 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
2a070 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
2a074 05c 00 00 C0 FF 
2a078 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
2a07c 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
2a080 05f             | 
2a080 05f             |                 ' Fall through to utx_data
2a080 05f             | 
2a080 05f             | '------------------------------------------------------------------------------
2a080 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
2a080 05f             | ' calculated while the data byte is being shifted out. Since data stage
2a080 05f             | ' success/fail is not determined until the status stage of the transaction,
2a080 05f             | ' this routine is only concerned about the current DATAx packet.
2a080 05f             | '------------------------------------------------------------------------------
2a080 05f             | ' On entry:
2a080 05f             | '   PTRA - hub start address of the data to read.
2a080 05f             | '   pkt_cnt - data payload size.
2a080 05f             | ' On exit:
2a080 05f             | '------------------------------------------------------------------------------
2a080 05f             | utx_data
2a080 05f 22 A7 82 FA |                 rqpin   urx, dm
2a084 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2a088 061 F4 FF 9F CD |         if_c    jmp     #utx_data
2a08c 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
2a090 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
2a094 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2a098 065 D8 0C B0 CD |         if_c    call    #utx_pre
2a09c 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2a0a0 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
2a0a4 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
2a0a8 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
2a0ac 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
2a0b0 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
2a0b4 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
2a0b8 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
2a0bc 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
2a0c0 06f             | .read_byte
2a0c0 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
2a0c4 070 F0 00 B0 FD |                 call    #utx_byte
2a0c8 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
2a0cc 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
2a0d0 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
2a0d4 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
2a0d8 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
2a0dc 076             | .send_crc
2a0dc 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
2a0e0 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
2a0e4 078 D0 00 B0 FD |                 call    #utx_byte
2a0e8 079 5D A5 EA F8 |                 getbyte utx, crc, #1
2a0ec 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
2a0f0 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
2a0f4 07c             | 
2a0f4 07c             | '------------------------------------------------------------------------------
2a0f4 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
2a0f4 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
2a0f4 07c             | ' expects that the packet includes at least the CRC word.
2a0f4 07c             | '
2a0f4 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
2a0f4 07c             | ' was requested, which makes it difficult to determine where the data stops
2a0f4 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
2a0f4 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
2a0f4 07c             | ' USB-16 expected residual value of 0xB001.
2a0f4 07c             | '
2a0f4 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
2a0f4 07c             | ' so the caller can verify IN success before writing the data to its final
2a0f4 07c             | ' destination.
2a0f4 07c             | '------------------------------------------------------------------------------
2a0f4 07c             | ' On entry:
2a0f4 07c             | '   pkt_data - max byte count expected to be in the packet.
2a0f4 07c             | '   newb_flg - signals new byte ready when toggled.
2a0f4 07c             | ' On exit:
2a0f4 07c             | '   pkt_cnt - actual number of bytes read.
2a0f4 07c             | '------------------------------------------------------------------------------
2a0f4 07c             | urx_data
2a0f4 07c F7 75 03 F6 |                 mov     htmp2, pb
2a0f8 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
2a0fc 07e 00 00 C0 FF 
2a100 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
2a104 080 BA EF 03 F6 |                 mov     pb, htmp2
2a108 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
2a10c 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
2a110 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
2a114 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
2a118 085             | .wait_byte
2a118 085             | ' In-line rx for max speed
2a118 085 22 A7 82 FA |                 rqpin   urx, dm
2a11c 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
2a120 087 53 A5 02 F5 |                 and     utx, urx
2a124 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
2a128 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
2a12c 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
2a130 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
2a134 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
2a138 08d DC FF 9F FD |                 jmp     #.wait_byte
2a13c 08e             | .get_byte
2a13c 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
2a140 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
2a144 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
2a148 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
2a14c 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
2a150 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
2a154 094             | .end_crc
2a154 094 01 B8 06 F1 |                 add     pkt_cnt, #1
2a158 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
2a15c 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
2a160 097 2D 00 64 1D |         if_a    ret
2a164 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
2a164 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
2a164 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
2a164 098             | ' to miss it, so cheat a bit and look for SOP clear here.
2a164 098 22 A7 82 FA |                 rqpin   urx, dm
2a168 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
2a16c 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
2a170 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
2a170 09b             | .chk_crc
2a170 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
2a174 09c 58 00 00 FF 
2a178 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
2a17c 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
2a180 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
2a184 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
2a188 0a1 34 09 B0 FD |                 call    #poll_waitx
2a18c 0a2             | 
2a18c 0a2             |                 ' Fall through to utx_handshake
2a18c 0a2             | 
2a18c 0a2             | '------------------------------------------------------------------------------
2a18c 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
2a18c 0a2             | ' the appropriate IP delay has been inserted.
2a18c 0a2             | '------------------------------------------------------------------------------
2a18c 0a2             | ' On entry:
2a18c 0a2             | '   retval - handshake PID to send.
2a18c 0a2             | ' On exit:
2a18c 0a2             | '   retval unchanged.
2a18c 0a2             | '------------------------------------------------------------------------------
2a18c 0a2             | utx_handshake
2a18c 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2a190 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
2a194 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2a198 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
2a19c 0a6 5F A5 02 F6 |                 mov     utx, retval
2a1a0 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
2a1a4 0a8             | .idle
2a1a4 0a8 22 A7 82 FA |                 rqpin   urx, dm
2a1a8 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2a1ac 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
2a1b0 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
2a1b4 0ac 08 09 90 FD |                 jmp     #poll_waitx
2a1b8 0ad             | 
2a1b8 0ad             | '------------------------------------------------------------------------------
2a1b8 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
2a1b8 0ad             | '------------------------------------------------------------------------------
2a1b8 0ad             | ' On entry:
2a1b8 0ad             | '   utx - byte to transmit.
2a1b8 0ad             | ' On exit:
2a1b8 0ad             | '------------------------------------------------------------------------------
2a1b8 0ad             | utx_byte
2a1b8 0ad 40 46 72 FD |                 testp   dp                      wc
2a1bc 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
2a1c0 0af 23 03 08 FC |                 akpin   dp
2a1c4 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
2a1c8 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
2a1cc 0b2             | 
2a1cc 0b2             | '------------------------------------------------------------------------------
2a1cc 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
2a1cc 0b2             | '------------------------------------------------------------------------------
2a1cc 0b2             | ' On entry:
2a1cc 0b2             | ' On exit:
2a1cc 0b2             | '   retval - the byte read.
2a1cc 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
2a1cc 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
2a1cc 0b2             | '     received.
2a1cc 0b2             | '------------------------------------------------------------------------------
2a1cc 0b2             | urx_next
2a1cc 0b2 22 A7 8A FA |                 rdpin   urx, dm
2a1d0 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
2a1d4 0b4 53 A5 02 F5 |                 and     utx, urx
2a1d8 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
2a1dc 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
2a1e0 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
2a1e4 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
2a1e8 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2a1ec 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
2a1f0 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
2a1f4 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
2a1f8 0bd 2D 00 64 FD |                 ret
2a1fc 0be             | 
2a1fc 0be             | '------------------------------------------------------------------------------
2a1fc 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
2a1fc 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
2a1fc 0be             | ' length, and the PID is not included in the CRC calculation:
2a1fc 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
2a1fc 0be             | '  CRC5  ENDP ADDRESS PID
2a1fc 0be             | ' %00000_1111_1111111_xxxxxxxx
2a1fc 0be             | '------------------------------------------------------------------------------
2a1fc 0be             | ' On entry:
2a1fc 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
2a1fc 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
2a1fc 0be             | ' On exit:
2a1fc 0be             | '   ep_addr_pid - CRC value appended to the packet.
2a1fc 0be             | '------------------------------------------------------------------------------
2a1fc 0be             | calc_crc5
2a1fc 0be FF 03 00 FF 
2a200 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
2a204 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
2a208 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
2a20c 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
2a210 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
2a214 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
2a218 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
2a21c 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
2a220 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
2a224 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
2a228 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
2a22c 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
2a230 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
2a234 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
2a238 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
2a23c 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
2a240 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
2a244 0d0             | 
2a244 0d0             | '------------------------------------------------------------------------------
2a244 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
2a244 0d0             | '------------------------------------------------------------------------------
2a244 0d0             | isr1_fsframe
2a244 0d0 1A 92 62 FD |                 getct   iframe_ct_base
2a248 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2a24c 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2a250 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2a254 0d4             | .wait
2a254 0d4 40 46 72 FD |                 testp   dp                      wc
2a258 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
2a25c 0d6 23 03 08 FC |                 akpin   dp
2a260 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
2a264 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
2a268 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
2a26c 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
2a270 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
2a274 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
2a278 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
2a27c 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
2a280 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
2a284 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
2a288 0e1 2C FF BF FD |                 call    #utx_byte
2a28c 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
2a290 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
2a294 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
2a298 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
2a29c 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
2a2a0 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
2a2a4 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
2a2a8 0e9 5B A5 42 F5 |                 or      utx, icrc
2a2ac 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
2a2b0 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
2a2b4 0ec 20 00 90 FD |                 jmp     #isr1_wait
2a2b8 0ed             | isr1_lsframe
2a2b8 0ed 1A 92 62 FD |                 getct   iframe_ct_base
2a2bc 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2a2c0 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2a2c4 0f0             | .wait
2a2c4 0f0 40 46 72 FD |                 testp   dp                      wc
2a2c8 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
2a2cc 0f2 23 03 08 FC |                 akpin   dp
2a2d0 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
2a2d4 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
2a2d8 0f5             | isr1_wait
2a2d8 0f5 22 A5 82 FA |                 rqpin   utx, dm
2a2dc 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
2a2e0 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
2a2e4 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
2a2e8 0f9 03 00 00 FF 
2a2ec 0fa FF B3 06 F5 |                 and     frame, ##$7ff
2a2f0 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
2a2f4 0fc F5 FF 3B FB |                 reti1
2a2f8 0fd             | 
2a2f8 0fd             | '------------------------------------------------------------------------------
2a2f8 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
2a2f8 0fd             | ' transaction will complete before the next frame is triggered.
2a2f8 0fd             | '------------------------------------------------------------------------------
2a2f8 0fd             | ' On entry:
2a2f8 0fd             | ' On exit:
2a2f8 0fd             | '------------------------------------------------------------------------------
2a2f8 0fd             | wait_txn_ok
2a2f8 0fd 1A 74 63 FD |                 getct   htmp2
2a2fc 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
2a300 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2a304 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
2a308 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
2a30c 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
2a310 103 2D 00 64 FD |                 ret
2a314 104             | 
2a314 104             | '------------------------------------------------------------------------------
2a314 104             | ' A device connection was detected, or a bus reset was requested by the USB
2a314 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
2a314 104             | ' and perform a reset sequence prior to device enumeration.
2a314 104             | '------------------------------------------------------------------------------
2a314 104             | dev_reset
2a314 104 22 A7 82 FA |                 rqpin   urx, dm
2a318 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
2a31c 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
2a320 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
2a324 108             | reset
2a324 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
2a328 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
2a32c 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
2a330 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2a334 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
2a338 10d 1A 92 62 FD |                 getct   iframe_ct_base
2a33c 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2a340 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2a344 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
2a348 111 24 70 07 F1 |                 add     htmp, #36
2a34c 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
2a350 113             | .framewait
2a350 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
2a354 114 F8 FF 9F CD |         if_b    jmp     #.framewait
2a358 115 2D 00 64 FD |                 ret
2a35c 116             | 
2a35c 116             | '------------------------------------------------------------------------------
2a35c 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
2a35c 116             | '------------------------------------------------------------------------------
2a35c 116             | ' On entry:
2a35c 116             | '   PTRA - source address.
2a35c 116             | '   PB - destination address.
2a35c 116             | '   hr0 - length of copy, in bytes.
2a35c 116             | ' On exit:
2a35c 116             | '------------------------------------------------------------------------------
2a35c 116             | hmemcpy
2a35c 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
2a360 117 F7 71 43 FC |                 wrbyte  htmp, pb
2a364 118 01 EE 07 F1 |                 add     pb, #1
2a368 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
2a36c 11a             | 
2a36c 11a             | '------------------------------------------------------------------------------
2a36c 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
2a36c 11a             | ' loop until the errant device is disconnected.
2a36c 11a             | '------------------------------------------------------------------------------
2a36c 11a             | ' On entry:
2a36c 11a             | ' On exit:
2a36c 11a             | '------------------------------------------------------------------------------
2a36c 11a             | host_error
2a36c 11a             |           if ERROR_LED >= 0
2a36c 11a             |           end
2a36c 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
2a370 11b             | 
2a370 11b             | '------------------------------------------------------------------------------
2a370 11b             | ' Get HID descriptor buffer for current port
2a370 11b             | '------------------------------------------------------------------------------
2a370 11b             | ' On entry:
2a370 11b             | ' On exit:
2a370 11b             | '   PB - HID descriptor buffer pointer
2a370 11b             | '------------------------------------------------------------------------------
2a370 11b             | get_hid_descr_buffer
2a370 11b 2D EF 03 F6 |                 mov     pb, hdev_port
2a374 11c 01 EE E7 F2 |                 cmpsub  pb, #1
2a378 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
2a37c 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
2a380 11f             | 
2a380 11f             | 
2a380 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
2a384 120             | 
2a384 120             | ' USB commands and error codes
2a384 120 00 00 00 00 | cmd_data        long    0
2a388 121 00 00 00 00 | usb_err_code    long    ERR_NONE
2a38c 122             | 
2a38c 122             | ' Parameters block assigned at cog startup
2a38c 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
2a390 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
2a394 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
2a398 125             | if ACTIVITY_LED >= 0
2a398 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
2a398 125             | end
2a398 125             | if ERROR_LED >= 0
2a398 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
2a398 125             | end
2a398 125 00 00 00 00 | hid_descr_p     long    0
2a39c 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
2a39c 126             | 'hkbd_report_p   long    0
2a39c 126 00 00 00 00 | hub_descr_p     long    0
2a3a0 127 00 00 00 00 | urx_buff_p      long    0
2a3a4 128 00 00 00 00 | dev_desc_buff_p long    0
2a3a8 129 00 00 00 00 | con_desc_buff_p long    0
2a3ac 12a 00 00 00 00 | cache_start_p   long    0
2a3b0 12b 00 00 00 00 | cache_end_p     long    0
2a3b4 12c             | if EMUPAD_MAX_PLAYER > 0
2a3b4 12c             | emupad_out_ptr  long    0
2a3b4 12c             | end
2a3b4 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
2a3b8 12d             | 
2a3b8 12d             | hdev_init_start
2a3b8 12d             | hdev_port       res     1
2a3b8 12d             | hdev_port       res     1
2a3b8 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
2a3b8 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
2a3b8 12d             | kbm_next_datax  res     1
2a3b8 12d             | kbm_next_datax  res     1
2a3b8 12d             | hub_intf_num    res     1
2a3b8 12d             | hub_intf_num    res     1
2a3b8 12d             | hub_next_datax  res     1
2a3b8 12d             | hub_next_datax  res     1
2a3b8 12d             | hub_status_chg  res     1
2a3b8 12d             | hub_status_chg  res     1
2a3b8 12d             | hub_port_status res     1
2a3b8 12d             | hub_port_status res     1
2a3b8 12d             | if HAVE_MOUSE
2a3b8 12d             | ms_intf_num     res     1
2a3b8 12d             | ms_intf_num     res     1
2a3b8 12d             | ms_in_max_pkt   res     1
2a3b8 12d             | ms_in_max_pkt   res     1
2a3b8 12d             | end
2a3b8 12d             | kb_intf_num     res     1
2a3b8 12d             | kb_intf_num     res     1
2a3b8 12d             | kb_interval     res     1
2a3b8 12d             | kb_interval     res     1
2a3b8 12d             | kb_in_max_pkt   res     1
2a3b8 12d             | kb_in_max_pkt   res     1
2a3b8 12d             | kb_max_index    res     1
2a3b8 12d             | kb_max_index    res     1
2a3b8 12d             | kb_led_states   res     1
2a3b8 12d             | kb_led_states   res     1
2a3b8 12d             | gp_intf_num     res     1
2a3b8 12d             | gp_intf_num     res     1
2a3b8 12d             | gp_interval     res     1
2a3b8 12d             | gp_interval     res     1
2a3b8 12d             | gp_max_index    res     1
2a3b8 12d             | gp_max_index    res     1
2a3b8 12d             | gp_descr_len    res     1+MAX_DEVICES
2a3b8 12d             | gp_descr_len    res     1+MAX_DEVICES
2a3b8 12d             | hdev_init_end
2a3b8 12d             | 
2a3b8 12d             | ' Initialized at cog startup:
2a3b8 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
2a3b8 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
2a3b8 12d             | iframe_ct_new   res     1
2a3b8 12d             | iframe_ct_new   res     1
2a3b8 12d             | iframe_ct_base  res     1
2a3b8 12d             | iframe_ct_base  res     1
2a3b8 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
2a3b8 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
2a3b8 12d             | 
2a3b8 12d             | ' This register block is reset to zero when a USB device connects
2a3b8 12d             | hreg_init_start
2a3b8 12d             | hstatus         res     1         ' Host status flags
2a3b8 12d             | hstatus         res     1         ' Host status flags
2a3b8 12d             | hctwait         res     1         ' Poll-based wait clocks
2a3b8 12d             | hctwait         res     1         ' Poll-based wait clocks
2a3b8 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
2a3b8 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
2a3b8 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
2a3b8 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
2a3b8 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
2a3b8 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
2a3b8 12d             | xfer_retry      res     1         ' Control transfer retry count
2a3b8 12d             | xfer_retry      res     1         ' Control transfer retry count
2a3b8 12d             | retry           res     1         ' Transaction retry count
2a3b8 12d             | retry           res     1         ' Transaction retry count
2a3b8 12d             | utx             res     1         ' Byte to transmit on USB
2a3b8 12d             | utx             res     1         ' Byte to transmit on USB
2a3b8 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
2a3b8 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
2a3b8 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
2a3b8 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
2a3b8 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
2a3b8 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
2a3b8 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
2a3b8 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
2a3b8 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
2a3b8 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
2a3b8 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
2a3b8 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
2a3b8 12d             | frame           res     1         ' USB 1ms frame counter value
2a3b8 12d             | frame           res     1         ' USB 1ms frame counter value
2a3b8 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
2a3b8 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
2a3b8 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
2a3b8 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
2a3b8 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
2a3b8 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
2a3b8 12d             | crc             res     1         ' Used for CRC16 calculation
2a3b8 12d             | crc             res     1         ' Used for CRC16 calculation
2a3b8 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
2a3b8 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
2a3b8 12d             | retval          res     1         ' Global success/fail return parameter
2a3b8 12d             | retval          res     1         ' Global success/fail return parameter
2a3b8 12d             | context_retval  res     1         ' Operation contextual return parameter
2a3b8 12d             | context_retval  res     1         ' Operation contextual return parameter
2a3b8 12d             | ' Device stuff
2a3b8 12d             | hdev_id         res     1+MAX_DEVICES
2a3b8 12d             | hdev_id         res     1+MAX_DEVICES
2a3b8 12d             | hdev_bcd        res     1
2a3b8 12d             | hdev_bcd        res     1
2a3b8 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
2a3b8 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
2a3b8 12d             | ' Keyboard/mouse stuff
2a3b8 12d             | hctrl_ep_addr   res     1
2a3b8 12d             | hctrl_ep_addr   res     1
2a3b8 12d             | hctrl_max_pkt   res     1
2a3b8 12d             | hctrl_max_pkt   res     1
2a3b8 12d             | hconfig_base    res     1
2a3b8 12d             | hconfig_base    res     1
2a3b8 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
2a3b8 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
2a3b8 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
2a3b8 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
2a3b8 12d             | hdev_class      res     1
2a3b8 12d             | hdev_class      res     1
2a3b8 12d             | hdev_subclass   res     1
2a3b8 12d             | hdev_subclass   res     1
2a3b8 12d             | hdev_protocol   res     1
2a3b8 12d             | hdev_protocol   res     1
2a3b8 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
2a3b8 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
2a3b8 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
2a3b8 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
2a3b8 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
2a3b8 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
2a3b8 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
2a3b8 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
2a3b8 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
2a3b8 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
2a3b8 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
2a3b8 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
2a3b8 12d             | if HAVE_MOUSE
2a3b8 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
2a3b8 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
2a3b8 12d             | end
2a3b8 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
2a3b8 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
2a3b8 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
2a3b8 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
2a3b8 12d             | hdev_ep_addr    res     1+MAX_DEVICES
2a3b8 12d             | hdev_ep_addr    res     1+MAX_DEVICES
2a3b8 12d             | hdev_out_addr   res     1
2a3b8 12d             | hdev_out_addr   res     1
2a3b8 12d             | 
2a3b8 12d             | if EMUPAD_MAX_PLAYER > 0
2a3b8 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
2a3b8 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
2a3b8 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
2a3b8 12d             | end
2a3b8 12d             | 
2a3b8 12d             | hreg_init_end
2a3b8 12d             | 
2a3b8 12d             | hidr_start
2a3b8 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
2a3b8 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
2a3b8 12d             | hidr_flags      res     1
2a3b8 12d             | hidr_flags      res     1
2a3b8 12d             | hidr_axis       res     3
2a3b8 12d             | hidr_axis       res     3
2a3b8 12d             | hidr_buttons    res     1
2a3b8 12d             | hidr_buttons    res     1
2a3b8 12d             | hidr_hats       res     1
2a3b8 12d             | hidr_hats       res     1
2a3b8 12d             | '' Above are actually useful values, 6 longs
2a3b8 12d             | hidr_id         res     1
2a3b8 12d             | hidr_id         res     1
2a3b8 12d             | hidr_state      res     1
2a3b8 12d             | hidr_state      res     1
2a3b8 12d             | hidr_size       res     1
2a3b8 12d             | hidr_size       res     1
2a3b8 12d             | hidr_count      res     1
2a3b8 12d             | hidr_count      res     1
2a3b8 12d             | hidr_offset     res     1
2a3b8 12d             | hidr_offset     res     1
2a3b8 12d             | hidr_usage_idx  res     1
2a3b8 12d             | hidr_usage_idx  res     1
2a3b8 12d             | hidr_lminmax    res     1
2a3b8 12d             | hidr_lminmax    res     1
2a3b8 12d             | hidr_pminmax    res     1
2a3b8 12d             | hidr_pminmax    res     1
2a3b8 12d             | hidr_type       res     1
2a3b8 12d             | hidr_type       res     1
2a3b8 12d             | hidr_end
2a3b8 12d             | 
2a3b8 12d             | ' Variables dependent on the system freqency
2a3b8 12d             | _var_64_lower_  res     1
2a3b8 12d             | _var_64_lower_  res     1
2a3b8 12d             | _var_64_upper_  res     1
2a3b8 12d             | _var_64_upper_  res     1
2a3b8 12d             | _12Mbps_        res     1
2a3b8 12d             | _12Mbps_        res     1
2a3b8 12d             | _1_5Mbps_       res     1
2a3b8 12d             | _1_5Mbps_       res     1
2a3b8 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
2a3b8 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
2a3b8 12d             | _1us_           res     1         ' 1us
2a3b8 12d             | _1us_           res     1         ' 1us
2a3b8 12d             | _10us_          res     1         ' 10us
2a3b8 12d             | _10us_          res     1         ' 10us
2a3b8 12d             | _33us_          res     1         ' 33us
2a3b8 12d             | _33us_          res     1         ' 33us
2a3b8 12d             | _txn_err_       res     1         ' 250us
2a3b8 12d             | _txn_err_       res     1         ' 250us
2a3b8 12d             | _500us_         res     1         ' 500us
2a3b8 12d             | _500us_         res     1         ' 500us
2a3b8 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
2a3b8 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
2a3b8 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
2a3b8 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
2a3b8 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
2a3b8 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
2a3b8 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
2a3b8 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
2a3b8 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
2a3b8 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
2a3b8 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
2a3b8 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
2a3b8 12d             | _preamble_wait_ res     1
2a3b8 12d             | _preamble_wait_ res     1
2a3b8 12d             | _1ms_           res     1         ' 1ms
2a3b8 12d             | _1ms_           res     1         ' 1ms
2a3b8 12d             | _2ms_           res     1         ' 2ms
2a3b8 12d             | _2ms_           res     1         ' 2ms
2a3b8 12d             | _suspend_wait_  res     1         ' 3ms
2a3b8 12d             | _suspend_wait_  res     1         ' 3ms
2a3b8 12d             | _4ms_           res     1         ' 4ms
2a3b8 12d             | _4ms_           res     1         ' 4ms
2a3b8 12d             | _xfer_wait_     res     1         ' 5ms
2a3b8 12d             | _xfer_wait_     res     1         ' 5ms
2a3b8 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
2a3b8 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
2a3b8 12d             | _reset_hold_    res     1         ' 15ms
2a3b8 12d             | _reset_hold_    res     1         ' 15ms
2a3b8 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
2a3b8 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
2a3b8 12d             | _21ms_          res     1         ' 21ms
2a3b8 12d             | _21ms_          res     1         ' 21ms
2a3b8 12d             | _100ms_         res     1         ' 100ms
2a3b8 12d             | _100ms_         res     1         ' 100ms
2a3b8 12d             | _500ms_         res     1         ' 500ms
2a3b8 12d             | _500ms_         res     1         ' 500ms
2a3b8 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
2a3b8 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
2a3b8 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
2a3b8 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
2a3b8 12d             | '------------------------------------------------------------------------------
2a3b8 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
2a3b8 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
2a3b8 12d             | _usb_d_ls_nco_  res     1
2a3b8 12d             | _usb_d_ls_nco_  res     1
2a3b8 12d             | _usb_h_fs_nco_  res     1
2a3b8 12d             | _usb_h_fs_nco_  res     1
2a3b8 12d             | _usb_d_fs_nco_  res     1
2a3b8 12d             | _usb_d_fs_nco_  res     1
2a3b8 12d             | '------------------------------------------------------------------------------
2a3b8 12d             | ' Scratch registers
2a3b8 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
2a3b8 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
2a3b8 12d             | htmp1           res     1
2a3b8 12d             | htmp1           res     1
2a3b8 12d             | htmp2           res     1
2a3b8 12d             | htmp2           res     1
2a3b8 12d             | htmp3           res     1
2a3b8 12d             | htmp3           res     1
2a3b8 12d             | hrep            res     1         ' Repeat count
2a3b8 12d             | hrep            res     1         ' Repeat count
2a3b8 12d             | hsave0          res     1         ' Subroutine parameter saves
2a3b8 12d             | hsave0          res     1         ' Subroutine parameter saves
2a3b8 12d             | hsave1          res     1
2a3b8 12d             | hsave1          res     1
2a3b8 12d             | hsave2          res     1
2a3b8 12d             | hsave2          res     1
2a3b8 12d             | isrtmp1         res     1
2a3b8 12d             | isrtmp1         res     1
2a3b8 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
2a3b8 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
2a3b8 12d             | hr0             res     1         ' Multi-purpose registers
2a3b8 12d             | hr0             res     1         ' Multi-purpose registers
2a3b8 12d             | hr1             res     1
2a3b8 12d             | hr1             res     1
2a3b8 12d             | hr2             res     1
2a3b8 12d             | hr2             res     1
2a3b8 12d             | hr3             res     1
2a3b8 12d             | hr3             res     1
2a3b8 12d             | hpar1           res     1         ' Routine entry/exit parameters
2a3b8 12d             | hpar1           res     1         ' Routine entry/exit parameters
2a3b8 12d             | hpar2           res     1
2a3b8 12d             | hpar2           res     1
2a3b8 12d             | hpar3           res     1
2a3b8 12d             | hpar3           res     1
2a3b8 12d             | hct2            res     1         ' Function response bus turn-around timer
2a3b8 12d             | hct2            res     1         ' Function response bus turn-around timer
2a3b8 12d             | hct3            res     1         ' Keyboard/mouse poll timer
2a3b8 12d             | hct3            res     1         ' Keyboard/mouse poll timer
2a3b8 12d             | mod_cnt         res     1         ' Used in idle loops
2a3b8 12d             | mod_cnt         res     1         ' Used in idle loops
2a3b8 12d             |                 fit     $1F0
2a3b8 12d             |                 org     $200
2a3b8 200             | hlut_start
2a3b8 200             | 
2a3b8 200             | '------------------------------------------------------------------------------
2a3b8 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
2a3b8 200             | ' settings to startup defaults.
2a3b8 200             | '------------------------------------------------------------------------------
2a3b8 200             | ' On entry:
2a3b8 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
2a3b8 200             | '------------------------------------------------------------------------------
2a3b8 200             | set_speed_full
2a3b8 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
2a3bc 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
2a3c0 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
2a3c4 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
2a3c8 204             | '                ret                             wcz     ' Restore caller flags on exit
2a3c8 204             | 
2a3c8 204             | '------------------------------------------------------------------------------
2a3c8 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
2a3c8 204             | ' is a downstream hub connected (not yet implemented), the baud generator
2a3c8 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
2a3c8 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
2a3c8 204             | ' putting the smart pins into reset.
2a3c8 204             | '------------------------------------------------------------------------------
2a3c8 204             | ' On entry:
2a3c8 204             | ' On exit: CZ flags restored to caller states
2a3c8 204             | '------------------------------------------------------------------------------
2a3c8 204             | set_speed_low
2a3c8 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
2a3cc 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
2a3d0 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
2a3d4 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
2a3d8 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2a3dc 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
2a3e0 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
2a3e4 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
2a3e8 20c             | 
2a3e8 20c             | '------------------------------------------------------------------------------
2a3e8 20c             | ' Perform configuration stuff required when a device intitially connects.
2a3e8 20c             | '------------------------------------------------------------------------------
2a3e8 20c             | ' On entry:
2a3e8 20c             | ' On exit:
2a3e8 20c             | '------------------------------------------------------------------------------
2a3e8 20c             | on_connect
2a3e8 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
2a3ec 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
2a3f0 20e             | .retry
2a3f0 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2a3f4 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
2a3f8 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
2a3fc 211 00 08 00 FF 
2a400 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
2a404 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
2a408 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2a40c 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
2a410 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
2a414 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
2a418 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a41c 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
2a420 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
2a424 21b 4C 03 B0 FD |                 call    #poll_waitx
2a428 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
2a42c 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
2a430 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
2a434 21f B8 FF 9F FD |                 jmp     #.retry
2a438 220             | .get_dev_desc
2a438 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
2a43c 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
2a440 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
2a444 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
2a448 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
2a44c 225 88 FB BF FD |                 call    #reset
2a450 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
2a454 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2a458 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
2a45c 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
2a460 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a464 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
2a468 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
2a46c 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
2a470 22e 04 00 00 FF 
2a474 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
2a478 230 34 FA BF FD |                 call    #calc_crc5
2a47c 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
2a480 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2a484 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
2a488 234 F7 AD C2 FA |                 rdbyte  total_data, pb
2a48c 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
2a490 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
2a494 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a498 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
2a49c 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
2a4a0 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
2a4a4 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
2a4a8 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
2a4ac 23d C4 02 B0 FD |                 call    #poll_waitx
2a4b0 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
2a4b4 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2a4b8 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
2a4bc 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
2a4c0 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
2a4c4 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a4c8 244 2D 00 64 5D |         if_nz   ret
2a4cc 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
2a4d0 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
2a4d4 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
2a4d8 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
2a4dc 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
2a4e0 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
2a4e4 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
2a4e8 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
2a4ec 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
2a4f0 24e 2C FB 9F CD |         if_b    jmp     #host_error
2a4f4 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
2a4f8 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
2a4fc 251 2D EC 63 FD |                 call    pa
2a500 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
2a504 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
2a508 254 2C EC 63 FD |                 jmp     pa
2a50c 255             | 
2a50c 255             | '------------------------------------------------------------------------------
2a50c 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
2a50c 255             | ' Status reporting is always in the function-to-host direction.
2a50c 255             | '------------------------------------------------------------------------------
2a50c 255             | ' On entry:
2a50c 255             | '   PTRA - start address of the SETUP data in hub.
2a50c 255             | '   PB - start address of the buffer/struct to be written to during the IN data
2a50c 255             | '     stage.
2a50c 255             | '   ep_addr_pid - device address, endpoint and CRC5.
2a50c 255             | ' On exit:
2a50c 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
2a50c 255             | '     contains the count of data stage bytes actually received, which must
2a50c 255             | '     always be <= the count requested.
2a50c 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2a50c 255             | '     more specific USB operation error code.
2a50c 255             | '------------------------------------------------------------------------------
2a50c 255             | control_read
2a50c 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
2a510 256 F8 8F 03 F6 |                 mov     hpar2, ptra
2a514 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
2a518 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2a51c 259             | .xfer_start
2a51c 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
2a520 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2a524 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a528 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
2a52c 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
2a530 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2a534 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2a538 260 61 00 00 FF 
2a53c 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
2a540 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2a544 263             | .data
2a544 263 56 B1 02 F6 |                 mov     pkt_data, total_data
2a548 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
2a54c 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
2a550 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
2a554 267             | .nak_retry
2a554 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
2a558 268             | .in_retry
2a558 268 BC F6 BF FD |                 call    #txn_in
2a55c 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
2a560 26a 28 00 90 AD |         if_z    jmp     #.commit
2a564 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2a568 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2a56c 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2a570 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2a574 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
2a578 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
2a57c 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
2a580 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2a584 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
2a588 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
2a58c 275             | .commit
2a58c 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
2a590 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
2a594 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
2a598 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
2a59c 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
2a5a0 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2a5a4 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
2a5a8 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
2a5ac 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
2a5b0 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
2a5b4 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
2a5b8 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
2a5bc 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
2a5c0 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
2a5c4 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
2a5c8 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
2a5cc 285             | .pre_status
2a5cc 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
2a5d0 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
2a5d4 287 00 B0 06 F6 |                 mov     pkt_data, #0
2a5d8 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
2a5dc 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2a5e0 28a 61 00 00 FF 
2a5e4 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
2a5e8 28c             | .out_retry
2a5e8 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
2a5ec 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a5f0 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
2a5f4 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2a5f8 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2a5fc 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2a600 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
2a604 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
2a608 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2a60c 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
2a610 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
2a614 297             | ' I've encountered transfer STALL, even though the data looks correct, and
2a614 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
2a614 297             | ' ControlRead() transfer gets things unstuck most of the time...
2a614 297             | .xfer_retry
2a614 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
2a618 298 58 01 B0 FD |                 call    #poll_waitx
2a61c 299 8C F9 BF FD |                 call    #wait_txn_ok
2a620 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
2a624 29b C7 F1 03 F6 |                 mov     ptra, hpar2
2a628 29c C8 EF 03 F6 |                 mov     pb, hpar3
2a62c 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
2a630 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
2a634 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
2a638 2a0             | 
2a638 2a0             | '------------------------------------------------------------------------------
2a638 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
2a638 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
2a638 2a0             | ' the SETUP data struct is filled with the required values.
2a638 2a0             | '------------------------------------------------------------------------------
2a638 2a0             | ' On entry:
2a638 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
2a638 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
2a638 2a0             | '     stage.
2a638 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
2a638 2a0             | ' On exit:
2a638 2a0             | '   retval - used to convey the success/failure of each stage.
2a638 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2a638 2a0             | '     more specific USB operation error code.
2a638 2a0             | '------------------------------------------------------------------------------
2a638 2a0             | control_write
2a638 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2a63c 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2a640 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2a644 2a3             | 
2a644 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
2a648 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
2a64c 2a5 F7 91 03 F6 |                 mov     hpar3, pb
2a650 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2a654 2a7             | .xfer_start
2a654 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
2a658 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
2a65c 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2a660 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a664 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
2a668 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
2a66c 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2a670 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2a674 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
2a678 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2a67c 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2a680 2b2             | .data
2a680 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
2a684 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
2a688 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
2a68c 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
2a690 2b6             | .out_retry
2a690 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
2a694 2b7 88 F6 BF FD |                 call    #txn_out
2a698 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a69c 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
2a6a0 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2a6a4 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
2a6a8 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
2a6ac 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
2a6b0 2be             | .commit
2a6b0 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
2a6b4 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
2a6b8 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
2a6bc 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
2a6c0 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
2a6c4 2c3             | pre_status_in
2a6c4 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
2a6c8 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2a6cc 2c5             | .status_retry
2a6cc 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
2a6d0 2c6 44 F5 BF FD |                 call    #txn_in
2a6d4 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
2a6d8 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
2a6dc 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
2a6e0 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
2a6e4 2cb 2D 00 64 AD |         if_z    ret
2a6e8 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
2a6ec 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2a6f0 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
2a6f4 2cf             | '               ret                                     ' Caller must handle transfer retirement
2a6f4 2cf             | 
2a6f4 2cf             | '------------------------------------------------------------------------------
2a6f4 2cf             | ' Execute an IN interrupt transaction.
2a6f4 2cf             | '------------------------------------------------------------------------------
2a6f4 2cf             | ' On entry:
2a6f4 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
2a6f4 2cf             | '   hpar2 - Address of the IN data buffer
2a6f4 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
2a6f4 2cf             | ' On exit:
2a6f4 2cf             | '   retval - the result of the operation.
2a6f4 2cf             | '   hpar3 - the count of IN data bytes actually received.
2a6f4 2cf             | '------------------------------------------------------------------------------
2a6f4 2cf             | do_int_in
2a6f4 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2a6f8 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2a6fc 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2a700 2d2             | 
2a700 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
2a704 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
2a708 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
2a70c 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
2a710 2d6             | .retry
2a710 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
2a714 2d7 00 F5 BF FD |                 call    #txn_in
2a718 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
2a71c 2d9 1C 00 90 AD |         if_z    jmp     #.commit
2a720 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
2a724 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
2a728 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
2a72c 2dd 54 00 B0 FD |                 call    #retry_wait
2a730 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2a734 2df 18 00 90 AD |         if_z    jmp     #.post_ret
2a738 2e0 D4 FF 9F FD |                 jmp     #.retry
2a73c 2e1             | .commit
2a73c 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
2a740 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
2a744 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
2a748 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
2a74c 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2a750 2e6             | .post_ret
2a750 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
2a754 2e7             | 
2a754 2e7             | 
2a754 2e7             | '------------------------------------------------------------------------------
2a754 2e7             | ' Resets the downstream hub port to FS
2a754 2e7             | '------------------------------------------------------------------------------
2a754 2e7             | dwnstream_reset
2a754 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2a758 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
2a75c 2e9             | 
2a75c 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
2a760 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
2a764 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2a768 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
2a76c 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
2a770 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
2a774 2ef             | 
2a774 2ef             | '------------------------------------------------------------------------------
2a774 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
2a774 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
2a774 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
2a774 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
2a774 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
2a774 2ef             | '------------------------------------------------------------------------------
2a774 2ef             | ' On entry:
2a774 2ef             | '   hctwait - wait interval in sysclocks.
2a774 2ef             | ' On exit:
2a774 2ef             | '------------------------------------------------------------------------------
2a774 2ef             | poll_waitx
2a774 2ef 1A 92 63 FD |                 getct   hct2
2a778 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
2a77c 2f1             | .wait
2a77c 2f1 FF 25 CC FB |                 jnct2   #.wait
2a780 2f2 2D 00 64 FD |                 ret
2a784 2f3             | 
2a784 2f3             | '------------------------------------------------------------------------------
2a784 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
2a784 2f3             | '------------------------------------------------------------------------------
2a784 2f3             | ' On entry:
2a784 2f3             | '   retval - transaction response PID or error code.
2a784 2f3             | ' On exit:
2a784 2f3             | '------------------------------------------------------------------------------
2a784 2f3             | retry_wait
2a784 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2a788 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
2a78c 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2a790 2f6 14 00 90 AD |         if_z    jmp     #.nak
2a794 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
2a798 2f8 D8 FF BF FD |                 call    #poll_waitx
2a79c 2f9             | .dec
2a79c 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
2a7a0 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
2a7a4 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
2a7a8 2fc             | .nak
2a7a8 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
2a7ac 2fd C4 FF BF FD |                 call    #poll_waitx
2a7b0 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
2a7b4 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
2a7b8 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
2a7bc 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
2a7c0 302 2D 00 64 FD |                 ret
2a7c4 303             | 
2a7c4 303             | host_reset
2a7c4 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
2a7c8 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
2a7cc 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
2a7cc 305 BD 01 05 FF 
2a7d0 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
2a7d4 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
2a7d8 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
2a7dc 309             | ' Check to see if the system clock has been changed.
2a7dc 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2a7e0 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
2a7e4 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
2a7e8 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
2a7ec 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2a7f0 30e 40 46 62 FD |                 dirl    dp
2a7f4 30f             | 
2a7f4 30f 28 02 64 FD |                 setq    #1
2a7f8 310 80 00 80 FF 
2a7fc 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2a800 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
2a804 313             | .enable
2a804 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2a808 314 41 46 62 FD |                 dirh    dp
2a80c 315 1F 36 63 FD |                 waitx   _1us_
2a810 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2a814 317             | 
2a814 317             |                 ' Handle Port protection enable and startup delay
2a814 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
2a818 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
2a81c 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
2a820 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
2a824 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
2a828 31c             | 
2a828 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
2a82c 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
2a830 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
2a834 31f 00 00 04 F6 |                 mov     0-0, #0
2a838 320             | .regloop
2a838 320             | 
2a838 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
2a838 320             | 
2a838 320             | discon_entry
2a838 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
2a83c 321             | 
2a83c 321             |               
2a83c 321             |         if HAVE_HIDPAD
2a83c 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
2a840 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
2a844 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
2a848 324 F7 01 68 FC |                 wrlong  #0,pb
2a84c 325             |         end
2a84c 325             |         if EMUPAD_MAX_PLAYER > 0
2a84c 325             |         end
2a84c 325             | 
2a84c 325             |                 ' Fall through to disconnected loop
2a84c 325             | 
2a84c 325             | '-----------------------------------------------------------------------------------------------------------------
2a84c 325             | ' Device connect handling (Section 7.1.7.3).
2a84c 325             | '-----------------------------------------------------------------------------------------------------------------
2a84c 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
2a84c 325             | ' device to connect (Section 7.1.7.3).
2a84c 325             | '-----------------------------------------------------------------------------------------------------------------
2a84c 325             | disconnected
2a84c 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
2a850 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
2a854 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
2a858 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
2a85c 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
2a860 32a             |         if ACTIVITY_LED >= 0
2a860 32a             |         end
2a860 32a 22 A7 82 FA |                 rqpin   urx, dm
2a864 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
2a868 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
2a86c 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
2a870 32e             | .se1_test
2a870 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
2a874 32f FC FE BF FD |                 call    #poll_waitx
2a878 330 22 A7 82 FA |                 rqpin   urx, dm
2a87c 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
2a880 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
2a884 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
2a888 334             | .se1            'SE1 is a fatal error condition
2a888 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
2a88c 335 E4 FE BF FD |                 call    #poll_waitx
2a890 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
2a894 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
2a898 338             | .connect_test                                           ' Test lines until stable J/K state seen
2a898 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
2a89c 339 22 A7 82 FA |                 rqpin   urx, dm
2a8a0 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
2a8a4 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
2a8a8 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
2a8ac 33d             | connected
2a8ac 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
2a8b0 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
2a8b4 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
2a8b8 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
2a8bc 341             | .set_pulse
2a8bc 341 1A 64 63 FD |                 getct   _pulse_time_
2a8c0 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
2a8c4 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
2a8c4 343             | ' of 1ms and make a correction, if necessary.
2a8c4 343             | '                mov     htmp, _1ms_
2a8c4 343             | '                subs    htmp, iframe_delta
2a8c4 343             | '                adds    _frame1ms_clks_, htmp
2a8c4 343             | '                debug(udec(_frame1ms_clks_))
2a8c4 343             | 
2a8c4 343             |                 ' Fall through to idle/processing loop
2a8c4 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
2a8c8 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
2a8cc 345             | 
2a8cc 345             | hidle
2a8cc 345 22 A7 82 FA |                 rqpin   urx, dm
2a8d0 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2a8d4 347 98 00 90 CD |         if_c    jmp     #.se0_test
2a8d8 348 24 06 70 FD |                 pollct3                         wc
2a8dc 349 68 00 90 3D |         if_nc   jmp     #.nopoll
2a8e0 34a 1A 94 63 FD |                 getct   hct3
2a8e4 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
2a8e8 34c             | 
2a8e8 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2a8ec 34d 00 70 E3 F8 |                 getbyte htmp
2a8f0 34e             | 
2a8f0 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
2a8f4 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
2a8f8 350 40 00 90 AD |         if_z    jmp     #.poll
2a8fc 351             | 
2a8fc 351             |         if _HAVE_GAMEPAD
2a8fc 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
2a900 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
2a904 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
2a908 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
2a90c 355 2C 00 90 AD |         if_z    jmp     #.poll
2a910 356             |         end
2a910 356             | 
2a910 356             |         if HAVE_MOUSE
2a910 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
2a914 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
2a918 358 20 00 90 AD |         if_z    jmp     #.poll
2a91c 359             |         end
2a91c 359             | 
2a91c 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
2a920 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
2a924 35b 14 00 90 AD |         if_z    jmp     #.poll
2a928 35c             | 
2a928 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
2a92c 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
2a930 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
2a934 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
2a938 360             |         if HAVE_MOUSE
2a938 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
2a93c 361             |         else
2a93c 361             |         end
2a93c 361             | 
2a93c 361             | .poll
2a93c 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
2a940 362 2D EC 63 FD |                 call    pa
2a944 363             | .skip_poll
2a944 363             | 
2a944 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
2a948 364             | 
2a948 364             | .nopoll
2a948 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
2a94c 365 44 00 90 AD |         if_z    jmp     #hsuspend
2a950 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
2a954 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
2a958 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
2a95c 369 1A 84 63 FD |                 getct   hr0
2a960 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
2a964 36b             |         if ACTIVITY_LED >= 0
2a964 36b             |         end
2a964 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
2a968 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
2a96c 36d 5C FF 9F FD |                 jmp     #hidle
2a970 36e             | ' Check for extended SE0 state on the bus
2a970 36e             | .se0_test
2a970 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
2a974 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
2a978 370 22 A7 82 FA |                 rqpin   urx, dm
2a97c 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2a980 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
2a984 373 24 F6 BF FD |                 call    #wait_txn_ok
2a988 374 00 00 80 FF 
2a98c 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
2a990 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
2a990 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
2a994 377             | 
2a994 377             | hsuspend
2a994 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
2a998 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
2a99c 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
2a9a0 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
2a9a4 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
2a9a8 37c 00 96 07 F6 |                 mov     mod_cnt, #0
2a9ac 37d             | 
2a9ac 37d             |                 ' Fall through to resume wait loop
2a9ac 37d             | 
2a9ac 37d             | hwait_resume
2a9ac 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
2a9b0 37e 02 86 47 F0 |                 shr     hr1, #2
2a9b4 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
2a9b8 380             |         if ACTIVITY_LED >= 0
2a9b8 380             |         end
2a9b8 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
2a9bc 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
2a9c0 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
2a9c4 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2a9c8 384 18 00 90 AD |         if_z    jmp     #.resume
2a9cc 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
2a9d0 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
2a9d4 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
2a9d8 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2a9dc 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
2a9e0 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
2a9e4 38b             | .resume
2a9e4 38b 22 05 28 FC |                 wypin   #OUT_K, dm
2a9e8 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
2a9ec 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
2a9f0 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
2a9f4 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
2a9f8 390 1F 70 63 FD |                 waitx   htmp
2a9fc 391 22 07 28 FC |                 wypin   #OUT_J, dm
2aa00 392 01 70 47 F0 |                 shr     htmp, #1
2aa04 393 1F 70 63 FD |                 waitx   htmp
2aa08 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2aa0c 395 1A 92 62 FD |                 getct   iframe_ct_base
2aa10 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2aa14 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2aa18 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
2aa1c 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
2aa20 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
2aa24 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
2aa28 39c             | 
2aa28 39c             | '------------------------------------------------------------------------------
2aa28 39c             | ' Send preamble to enable low-speed HUB ports
2aa28 39c             | '------------------------------------------------------------------------------
2aa28 39c             | ' On entry:
2aa28 39c             | ' On exit:
2aa28 39c             | '   USB baud rate set to low-speed
2aa28 39c             | '------------------------------------------------------------------------------
2aa28 39c             | utx_pre
2aa28 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2aa2c 39d 40 46 62 FD |                 dirl    dp
2aa30 39e 28 02 64 FD |                 setq    #1
2aa34 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
2aa38 3a0 58 44 62 FD |                 drvl    dm
2aa3c 3a1 59 46 62 FD |                 drvh    dp
2aa40 3a2             | 
2aa40 3a2 1E 00 00 FF 
2aa44 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
2aa48 3a4             | 
2aa48 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
2aa4c 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
2aa50 3a6 28 02 64 3D |         if_nc   setq    #1
2aa54 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
2aa58 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
2aa5c 3a9             | .l1
2aa5c 3a9             | 
2aa5c 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2aa60 3aa 40 46 62 FD |                 dirl    dp
2aa64 3ab 28 02 64 FD |                 setq    #1
2aa68 3ac 80 00 80 FF 
2aa6c 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2aa70 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
2aa74 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2aa78 3b0 41 46 62 FD |                 dirh    dp
2aa7c 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2aa80 3b2             | 
2aa80 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
2aa84 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2aa88 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
2aa8c 3b5             | 
2aa8c 3b5             | hlut_end
2aa8c 3b5             |                 fit     $400
2aa8c 3b5             |                 orgh
2aa8c                 | if OVERLAP_MEMORY
2aa8c                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
2aa8c                 | end
2aa8c                 | '------------------------------------------------------------------------------
2aa8c                 | ' Routines called from cog space.
2aa8c                 | '------------------------------------------------------------------------------
2aa8c                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
2aa8c                 | '------------------------------------------------------------------------------
2aa8c                 | 
2aa8c                 | '------------------------------------------------------------------------------
2aa8c                 | ' USB host cog initialization.
2aa8c                 | '------------------------------------------------------------------------------
2aa8c                 | usb_host_init
2aa8c                 |                 ' Initialize buffer pointers
2aa8c                 |         if OVERLAP_MEMORY
2aa8c                 |         else
2aa8c     40 15 B0 FE |                 loc     pb, #hid_descr
2aa90                 |         end
2aa90     F7 4B 02 F6 |                 mov     hid_descr_p, pb
2aa94                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
2aa94                 |                 {
2aa94                 |                 }
2aa94                 |         
2aa94                 |                 {
2aa94                 |                 }
2aa94                 |                 'loc     pb,#hkbd_report
2aa94                 |                 'mov     hkbd_report_p,pb
2aa94                 | 
2aa94     08 1D B0 FE |                 loc     pb, #hub_descr
2aa98     F7 4D 02 F6 |                 mov     hub_descr_p, pb
2aa9c     1D 1D B0 FE |                 loc     pb, #urx_buff
2aaa0     F7 4F 02 F6 |                 mov     urx_buff_p, pb
2aaa4     95 1D B0 FE |                 loc     pb, #dev_desc_buff
2aaa8     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
2aaac     9F 1D B0 FE |                 loc     pb, #con_desc_buff
2aab0     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
2aab4     18 15 B0 FE |                 loc     pb, #usb_cache_start
2aab8     F7 55 02 F6 |                 mov     cache_start_p, pb
2aabc     E9 1C B0 FE |                 loc     pb, #usb_cache_end
2aac0     F7 57 02 F6 |                 mov     cache_end_p, pb
2aac4                 | 
2aac4                 |         if ERROR_LED >= 0
2aac4                 |         end
2aac4                 | 
2aac4                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
2aac4                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
2aac4                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
2aac4                 | ' Configure and enable the Serial Host USB port.
2aac4     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
2aac8                 | 
2aac8                 | '------------------------------------------------------------------------------
2aac8                 | ' Timing calculations happen before any interrupt(s) are enabled.
2aac8                 | '------------------------------------------------------------------------------
2aac8                 | ' On entry:
2aac8                 | '   htmp - current CLKFREQ value.
2aac8                 | '------------------------------------------------------------------------------
2aac8                 | hinit_usb_timings
2aac8                 | '                getct   htmp2
2aac8     B8 59 02 F6 |                 mov     save_sysclk, htmp
2aacc     8D 5B 80 FF 
2aad0     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
2aad4     18 30 63 FD |                 getqx   _12Mbps_
2aad8     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
2aadc     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
2aae0     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
2aae4     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
2aae8     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
2aaec     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
2aaf0     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
2aaf4     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
2aaf8     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
2aafc     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
2ab00     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
2ab04     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
2ab08     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
2ab0c     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
2ab10     80 00 00 FF 
2ab14     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
2ab18     18 2C 63 FD |                 getqx   _var_64_lower_
2ab1c     19 2E 63 FD |                 getqy   _var_64_upper_
2ab20     28 2C 63 FD |                 setq    _var_64_lower_
2ab24     65 CD 1D FF 
2ab28     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
2ab2c     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
2ab30     01 00 00 FF 
2ab34     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
2ab38     18 2C 63 FD |                 getqx   _var_64_lower_
2ab3c     19 2E 63 FD |                 getqy   _var_64_upper_
2ab40     28 2C 63 FD |                 setq    _var_64_lower_
2ab44     A1 07 00 FF 
2ab48     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
2ab4c     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
2ab50     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
2ab54     09 36 57 F0 |                 shr     _1us_, #9               wc
2ab58     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
2ab5c     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
2ab60     18 38 63 FD |                 getqx   _10us_
2ab64     09 38 57 F0 |                 shr     _10us_, #9              wc
2ab68     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
2ab6c     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
2ab70     18 3A 63 FD |                 getqx   _33us_
2ab74     09 3A 57 F0 |                 shr     _33us_, #9              wc
2ab78     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
2ab7c     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
2ab80     18 3C 63 FD |                 getqx   _txn_err_
2ab84     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
2ab88     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
2ab8c     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
2ab90     18 3E 63 FD |                 getqx   _500us_
2ab94     09 3E 57 F0 |                 shr     _500us_, #9             wc
2ab98     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
2ab9c     01 00 00 FF 
2aba0     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
2aba4     18 40 63 FD |                 getqx   _txn_ok_ls_
2aba8     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
2abac     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
2abb0     01 00 00 FF 
2abb4     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
2abb8     18 42 63 FD |                 getqx   _txn_ok_fs_
2abbc     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
2abc0     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
2abc4     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
2abc8     05 00 00 FF 
2abcc     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
2abd0     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
2abd4     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
2abd8     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
2abdc     1C 00 00 FF 
2abe0     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
2abe4     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
2abe8     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
2abec     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
2abf0     00 00 00 FF 
2abf4     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
2abf8     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
2abfc     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
2ac00     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
2ac04     04 00 00 FF 
2ac08     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
2ac0c     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
2ac10     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
2ac14     8D 5B 00 FF 
2ac18     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
2ac1c     18 4C 63 FD |                 getqx   _preamble_wait_
2ac20     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
2ac24     01 00 00 FF 
2ac28     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
2ac2c     18 2C 63 FD |                 getqx   _var_64_lower_
2ac30     19 2E 63 FD |                 getqy   _var_64_upper_
2ac34     28 2C 63 FD |                 setq    _var_64_lower_
2ac38     01 00 00 FF 
2ac3c     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
2ac40     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
2ac44     09 4E 57 F0 |                 shr     _1ms_, #9               wc
2ac48     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
2ac4c     FF FF 7F FF 
2ac50     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
2ac54     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
2ac58     A7 51 03 F6 |                 mov     _2ms_, _1ms_
2ac5c     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
2ac60     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
2ac64     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
2ac68     A7 55 03 F6 |                 mov     _4ms_, _1ms_
2ac6c     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
2ac70     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
2ac74     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
2ac78     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
2ac7c     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
2ac80     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
2ac84     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
2ac88     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
2ac8c     A7 59 03 F6 |                 mov     _8ms_, _1ms_
2ac90     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
2ac94     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
2ac98     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
2ac9c     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
2aca0     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
2aca4     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
2aca8     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
2acac     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
2acb0     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
2acb4     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
2acb8     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
2acbc                 | '        _ret_   mov     _1sec_, save_sysclk
2acbc                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
2acbc                 | '                ret
2acbc                 | {
2acbc                 | }
2acbc                 | 
2acbc                 | '------------------------------------------------------------------------------
2acbc                 | ' Parse a configuration descriptor chain to see if the device is a recognized
2acbc                 | ' one. If it is, start the task progression that will configure the device for
2acbc                 | ' use.
2acbc                 | '------------------------------------------------------------------------------
2acbc                 | ' On entry:
2acbc                 | '   hconfig_base - start address of the cached config descriptor chain.
2acbc                 | ' On exit:
2acbc                 | '------------------------------------------------------------------------------
2acbc                 | hparse_con_desc
2acbc     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
2acc0     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
2acc4     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
2acc8     4E 70 FF F9 |                 movbyts htmp,#%%1032
2accc     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
2acd0                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
2acd0                 | 
2acd0     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
2acd4     6E ED 03 F1 |                 add     pa, hconfig_base
2acd8     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
2acdc                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
2acdc                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
2acdc                 | ' that defines a keyboard and/or mouse.
2acdc     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
2ace0                 | .next_intf
2ace0     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2ace4     BC 01 90 3D |         if_ae   jmp     #hset_config
2ace8     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2acec     75 F3 03 F1 |                 add     ptrb, hnext_desc
2acf0     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2acf4     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2acf8     0C 00 90 AD |         if_z    jmp     #.intf
2acfc     80 71 C7 FA |                 rdbyte  htmp, ptrb
2ad00     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2ad04     D8 FF 9F FD |                 jmp     #.next_intf
2ad08                 | .intf
2ad08     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
2ad0c     00 90 07 F6 |                 mov     hpar3, #0
2ad10     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
2ad14     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
2ad18     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
2ad1c     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
2ad20                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
2ad20                 | 
2ad20                 | .endp
2ad20     80 71 C7 FA |                 rdbyte  htmp, ptrb
2ad24     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2ad28     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2ad2c     78 00 90 3D |         if_ae   jmp     #.get_device
2ad30     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2ad34     75 F3 03 F1 |                 add     ptrb, hnext_desc
2ad38     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2ad3c     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2ad40     64 00 90 AD |         if_z    jmp     #.get_device
2ad44     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
2ad48     04 00 90 AD |         if_z    jmp     #.get_ep
2ad4c     D0 FF 9F FD |                 jmp     #.endp
2ad50                 | .get_ep
2ad50     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
2ad54     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
2ad58     0F 86 67 F0 |                 shl     hr1, #8 + 7
2ad5c     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
2ad60     3F 00 00 FF 
2ad64     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
2ad68     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
2ad6c     00 8E 0F F2 |                 cmp     hpar2, #0               wz
2ad70     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
2ad74     00 90 0F F2 |                 cmp     hpar3, #0               wz
2ad78     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
2ad7c     A0 FF 9F FD |                 jmp     #.endp
2ad80                 | .in_ep
2ad80     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
2ad84     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
2ad88                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2ad88     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2ad8c     C2 89 DB F8 |                 setbyte hr2, hr0, #3
2ad90     8C FF 9F FD |                 jmp     #.endp
2ad94                 | .out_ep
2ad94     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
2ad98     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
2ad9c                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2ad9c     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2ada0     C2 8B DB F8 |                 setbyte hr3, hr0, #3
2ada4     78 FF 9F FD |                 jmp     #.endp
2ada8                 | 
2ada8                 | .get_device
2ada8     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
2adac     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
2adb0     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
2adb4     68 00 90 AD |         if_z    jmp     #.gamepad
2adb8     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
2adbc     AC 00 90 AD |         if_z    jmp     #.hub
2adc0     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
2adc4     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
2adc8     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2adcc     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2add0     4C 00 90 AD |         if_z    jmp     #.gamepad
2add4     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
2add8     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
2addc                 | .keyboard
2addc     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
2ade0                 |         if HAVE_MOUSE
2ade0     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
2ade4                 |         else
2ade4                 |         end
2ade4     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
2ade8     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
2adec     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2adf0     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
2adf4     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
2adf8     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
2adfc                 |                 'debug(udec(kb_intf_num))
2adfc                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2adfc     E0 FE 9F FD |                 jmp     #.next_intf
2ae00                 | if HAVE_MOUSE
2ae00                 | .mouse
2ae00     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
2ae04     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
2ae08     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
2ae0c     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
2ae10     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2ae14                 |                 'getbyte ms_interval, hr2, #3
2ae14     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
2ae18     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
2ae1c                 |                 'debug(udec(kb_intf_num))
2ae1c                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2ae1c     C0 FE 9F FD |                 jmp     #.next_intf
2ae20                 | end
2ae20                 | .gamepad
2ae20     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2ae24     C7 71 63 F5 |                 xor     htmp, hpar2
2ae28     3F 00 00 FF 
2ae2c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2ae30     AC FE 9F AD |         if_z    jmp     #.next_intf
2ae34                 |         if HAVE_MOUSE
2ae34     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2ae38     C7 71 63 F5 |                 xor     htmp, hpar2
2ae3c     3F 00 00 FF 
2ae40     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2ae44     98 FE 9F AD |         if_z    jmp     #.next_intf
2ae48                 |         end
2ae48     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
2ae4c     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
2ae50     8C FE 9F 5D |         if_nz   jmp     #.next_intf
2ae54                 | 
2ae54     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2ae58     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
2ae5c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2ae60     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
2ae64     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
2ae68                 |                 'debug(udec(gp_intf_num))
2ae68                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
2ae68     74 FE 9F FD |                 jmp     #.next_intf
2ae6c                 | .hub
2ae6c     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2ae70     6C FE 9F 5D |         if_nz   jmp     #.next_intf
2ae74     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2ae78     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
2ae7c     60 FE 9F 5D |         if_nz   jmp     #.next_intf
2ae80     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2ae84     58 FE 9F 5D |         if_nz   jmp     #.next_intf
2ae88     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
2ae8c     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2ae90     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
2ae94     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2ae98     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
2ae9c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
2aea0                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
2aea0     3C FE 9F FD |                 jmp     #.next_intf
2aea4                 | 
2aea4                 | '------------------------------------------------------------------------------
2aea4                 | ' If a newly-connected device is recognized, do whatever is needed to configure
2aea4                 | ' it according to its function, or functions. In the case of this boot protocol
2aea4                 | ' keyboard/mouse class driver:
2aea4                 | ' - SetConfiguration(config_num)
2aea4                 | ' - SetProtocol(boot)
2aea4                 | ' - SetIdle(indefinite)
2aea4                 | ' - Enter the device interrupt IN polling task stage.
2aea4                 | '------------------------------------------------------------------------------
2aea4                 | ' On entry:
2aea4                 | ' On exit:
2aea4                 | '------------------------------------------------------------------------------
2aea4                 | hset_config
2aea4                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
2aea4                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
2aea4     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
2aea8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2aeac     00 00 0C F2 |                 cmp     0-0, #0                 wz
2aeb0     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
2aeb4                 |         if HAVE_MOUSE
2aeb4     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
2aeb8                 |         end
2aeb8     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
2aebc     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
2aec0                 | .set_config
2aec0     6C 0E D0 FE |                 loc     ptra, #set_config
2aec4     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
2aec8     6E ED 03 F1 |                 add     pa, hconfig_base
2aecc     F6 8D C3 FA |                 rdbyte  hpar1, pa
2aed0     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
2aed4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
2aed8     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
2aedc     A0 02 A0 FD |                 call    #control_write
2aee0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2aee4     2D 00 64 5D |         if_nz   ret
2aee8                 | .kbd_config
2aee8     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
2aeec     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
2aef0                 | 
2aef0     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2aef4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2aef8     3F 00 00 FF 
2aefc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2af00     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
2af04                 | 
2af04     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2af08     34 0E D0 FE |                 loc     ptra, #set_protocol
2af0c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2af10     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2af14     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2af18     A0 02 A0 FD |                 call    #control_write
2af1c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2af20     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2af24     E4 02 90 5D |         if_nz   jmp     #.notify_client
2af28     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2af2c     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
2af30     30 03 B0 FD |                 call    #hset_idle
2af34                 |                 'cmp     retval, #PID_ACK        wz
2af34                 |         'if_nz   mov     hkbd_ep_addr, #0
2af34                 |         'if_nz   jmp     #.notify_client
2af34     A8 99 02 F6 |                 mov     hctwait, _2ms_
2af38     EF 02 A0 FD |                 call    #poll_waitx
2af3c     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
2af40     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
2af44     90 17 90 FE |                 loc     pa, #hkbd_led_rep
2af48     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
2af4c     2C 03 B0 FD |                 call    #hset_kbdled_report
2af50     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2af54     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2af58     B0 02 90 5D |         if_nz   jmp     #.notify_client
2af5c     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2af60     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2af64     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2af68     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2af6c     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
2af70     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2af74     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
2af78     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2af7c     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
2af80     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
2af84     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
2af88                 |         if !!HAVE_MOUSE
2af88                 |         end
2af88                 | 
2af88                 | .mouse_config
2af88                 | if HAVE_MOUSE
2af88     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
2af8c     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2af90     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2af94     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2af98     3F 00 00 FF 
2af9c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2afa0     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2afa4                 | 
2afa4                 |                 debug("mouse passed addr check")
2afa4                 | 
2afa4     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2afa8     00 00 80 FF 
2afac     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
2afb0     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
2afb4     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2afb8     55 02 A0 FD |                 call    #control_read
2afbc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2afc0     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2afc4     44 02 90 5D |         if_nz   jmp     #.notify_client
2afc8     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2afcc     56 01 00 F6 |                 mov     0-0, total_data
2afd0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2afd4                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2afd4                 | 
2afd4     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
2afd8     64 0D D0 FE |                 loc     ptra, #set_protocol
2afdc     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2afe0     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2afe4     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2afe8     A0 02 A0 FD |                 call    #control_write
2afec     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2aff0     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2aff4     14 02 90 5D |         if_nz   jmp     #.notify_client
2aff8                 |                 debug("mouse passed SetProtocol")
2aff8     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2affc     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
2b000     60 02 B0 FD |                 call    #hset_idle
2b004                 |                 'cmp     retval, #PID_ACK        wz
2b004                 |         'if_nz   mov     hmouse_ep_addr, #0
2b004                 |         'if_nz   jmp     #.notify_client
2b004                 |                 debug("mouse passed SetIdle")
2b004     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2b008     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2b00c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2b010     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2b014     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
2b018     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2b01c     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
2b020     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
2b024     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
2b028     3F 00 00 FF 
2b02c     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
2b030     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
2b034     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
2b038     D0 01 90 FD |                 jmp     #.notify_client
2b03c                 | end
2b03c                 | .gamepad_config
2b03c                 | if _HAVE_GAMEPAD
2b03c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2b040     00 00 0C F2 |                 cmp     0-0, #0                 wz
2b044     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
2b048     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2b04c     00 70 03 F6 |                 mov     htmp, 0-0
2b050     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2b054     3F 00 00 FF 
2b058     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2b05c     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
2b060                 | 
2b060     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2b064     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2b068     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2b06c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2b070     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2b074     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2b078     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
2b07c     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
2b080     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
2b084     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2b088     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2b08c     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
2b090     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
2b094     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2b098                 | 
2b098                 |                 if EMUPAD_MAX_PLAYER > 0
2b098                 |                 
2b098                 | .rule_loop           
2b098                 |                 end
2b098                 | 
2b098     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
2b09c     5C 00 90 AD |         if_e    jmp     #.xinput
2b0a0     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
2b0a4     00 70 03 F6 |                 mov     htmp,0-0
2b0a8     01 A6 02 FF 
2b0ac     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
2b0b0     7C 00 90 AD |         if_e    jmp     #.ps3
2b0b4                 | 
2b0b4     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2b0b8     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
2b0bc     00 00 80 5F 
2b0c0     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
2b0c4     03 00 80 AF 
2b0c8     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
2b0cc     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
2b0d0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2b0d4     55 02 A0 FD |                 call    #control_read
2b0d8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b0dc     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2b0e0     00 00 04 56 |         if_nz   mov     0-0, #0
2b0e4     24 01 90 5D |         if_nz   jmp     #.notify_client
2b0e8     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2b0ec     56 01 00 F6 |                 mov     0-0, total_data
2b0f0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2b0f4                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2b0f4                 | 
2b0f4     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
2b0f8     10 01 90 FD |                 jmp     #.notify_client
2b0fc                 | .xinput
2b0fc     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
2b100     2D EF 03 F6 |                 mov     pb,hdev_port
2b104     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
2b108     03 EE 27 F3 |                 fle     pb,#3
2b10c     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
2b110     02 EF 47 FC |                 wrbyte  pb, ptra[2]
2b114                 | 
2b114     03 B0 06 F6 |                 mov     pkt_data, #3
2b118     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
2b11c     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
2b120     5A 00 A0 FD |                 call    #txn_out
2b124     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
2b128                 | 
2b128     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
2b12c     DC 00 90 FD |                 jmp     #.notify_client
2b130                 | .ps3
2b130     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
2b134     2D EF 03 F6 |                 mov     pb,hdev_port
2b138     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
2b13c     04 EE 27 F3 |                 fle     pb,#4
2b140     F7 EF C3 F9 |                 decod   pb
2b144     09 EF 47 FC |                 wrbyte  pb, ptra[9]
2b148                 | 
2b148     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2b14c     00 0C D0 FE |                 loc     ptra, #set_report
2b150     01 00 80 FF 
2b154     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
2b158     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2b15c     03 61 5C FC |                 wrword  #48, ptra[wLength]
2b160     20 0C B0 FE |                 loc     pb, #ps3_command_buff
2b164     A0 02 A0 FD |                 call    #control_write
2b168                 | 
2b168     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2b16c     E0 0B D0 FE |                 loc     ptra, #set_report
2b170     01 00 80 FF 
2b174     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
2b178     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2b17c     03 09 5C FC |                 wrword  #4, ptra[wLength]
2b180     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
2b184     A0 02 A0 FD |                 call    #control_write
2b188     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
2b18c     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2b190     00 00 04 56 |         if_nz   mov     0-0, #0
2b194     74 00 90 5D |         if_nz   jmp     #.notify_client
2b198                 | 
2b198     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
2b19c     6C 00 90 FD |                 jmp     #.notify_client
2b1a0                 | end
2b1a0                 | 
2b1a0                 | .hub_config
2b1a0     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2b1a4     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
2b1a8     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
2b1ac     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2b1b0     3F 00 00 FF 
2b1b4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2b1b8     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
2b1bc                 | 
2b1bc     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
2b1c0     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
2b1c4     26 EF 03 F6 |                 mov     pb, hub_descr_p
2b1c8     55 02 A0 FD |                 call    #control_read
2b1cc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b1d0     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
2b1d4     34 00 90 5D |         if_nz   jmp     #.notify_client
2b1d8                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
2b1d8                 | 
2b1d8     26 F1 03 F6 |                 mov     ptra, hub_descr_p
2b1dc     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
2b1e0     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
2b1e4                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
2b1e4                 | .pwr_loop
2b1e4     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
2b1e8     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
2b1ec     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
2b1f0     A0 02 A0 FD |                 call    #control_write
2b1f4     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
2b1f8                 | 
2b1f8     B1 99 02 F6 |                 mov     hctwait, _500ms_
2b1fc     B0 99 02 F1 |                 add     hctwait, _100ms_
2b200     EF 02 A0 FD |                 call    #poll_waitx
2b204                 | 
2b204     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
2b208     00 00 90 FD |                 jmp     #.notify_client
2b20c                 | 
2b20c                 | .notify_client
2b20c     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
2b210     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
2b214                 |                 debug(uhex_long(hdev_type,hdev_type+1))
2b214                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
2b214     2D 00 64 FD |                 ret
2b218                 | 
2b218                 | '------------------------------------------------------------------------------
2b218                 | ' Initialize the keyboard/mouse data area to start-up values.
2b218                 | '------------------------------------------------------------------------------
2b218                 | ' On entry:
2b218                 | ' On exit:
2b218                 | '------------------------------------------------------------------------------
2b218                 | init_kbdm_data
2b218     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
2b21c     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
2b220                 | 
2b220     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
2b224     2B ED 03 F6 |                 mov     pa, cache_end_p
2b228                 | .loop
2b228     61 01 4C FC |                 wrbyte  #0, ptra++
2b22c     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
2b230     F4 FF 9F CD |         if_b    jmp     #.loop
2b234                 |         
2b234                 |         if EMUPAD_MAX_PLAYER > 0
2b234                 |         end
2b234                 | 
2b234                 | 
2b234     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
2b238                 | .regloop
2b238     00 EC 8F F9 |                 altd    pa
2b23c     00 00 04 F6 |                 mov     0-0, #0
2b240     01 EC 07 F1 |                 add     pa, #1
2b244     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
2b248     EC FF 9F 5D |         if_nz   jmp     #.regloop
2b24c                 | 
2b24c     E1 E1 61 FF 
2b250     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
2b254     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
2b258     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
2b25c     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
2b260                 | 
2b260     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
2b264                 | 
2b264                 | '------------------------------------------------------------------------------
2b264                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
2b264                 | ' function.
2b264                 | '------------------------------------------------------------------------------
2b264                 | ' On entry:
2b264                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
2b264                 | '   hpar2 - index number of the target interface.
2b264                 | ' On exit:
2b264                 | '------------------------------------------------------------------------------
2b264                 | hset_idle
2b264     A8 99 02 F6 |                 mov     hctwait, _2ms_
2b268     EF 02 A0 FD |                 call    #poll_waitx
2b26c     D8 0A D0 FE |                 loc     ptra, #set_idle
2b270     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
2b274     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
2b278     A0 02 80 FD |                 jmp     #control_write
2b27c                 | 
2b27c                 | '------------------------------------------------------------------------------
2b27c                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
2b27c                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
2b27c                 | '------------------------------------------------------------------------------
2b27c                 | ' On entry:
2b27c                 | '   ep_addr_pid - device address and enpoint for the request.
2b27c                 | ' On exit:
2b27c                 | '   retval - transaction result.
2b27c                 | '------------------------------------------------------------------------------
2b27c                 | hset_kbdled_report
2b27c     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2b280     CC 0A D0 FE |                 loc     ptra, #set_report
2b284     01 00 80 FF 
2b288     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
2b28c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2b290     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
2b294     27 EF 03 F6 |                 mov     pb, urx_buff_p
2b298     F7 77 42 FC |                 wrbyte  kb_led_states, pb
2b29c     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
2b2a0                 | 
2b2a0                 | '------------------------------------------------------------------------------
2b2a0                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
2b2a0                 | '------------------------------------------------------------------------------
2b2a0                 | ' On entry:
2b2a0                 | ' On exit:
2b2a0                 | '------------------------------------------------------------------------------
2b2a0                 | hget_kbd_in_report
2b2a0     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2b2a4     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2b2a8     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
2b2ac     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
2b2b0     CF 02 A0 FD |                 call    #do_int_in
2b2b4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b2b8     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2b2bc                 | 
2b2bc     00 90 0F F2 |                 cmp     hpar3, #0               wz
2b2c0     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2b2c4                 | 
2b2c4     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
2b2c8     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2b2cc     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
2b2d0     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
2b2d4                 | 
2b2d4     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
2b2d8     18 00 B0 FD |                 call    #hkbd_compare
2b2dc                 |         if EMUPAD_MAX_PLAYER > 0
2b2dc                 |         end
2b2dc                 | 
2b2dc                 | .led_check
2b2dc     3B 71 03 F6 |                 mov     htmp, kb_led_states
2b2e0     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
2b2e4     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
2b2e8     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
2b2ec     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
2b2f0     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
2b2f4                 | 
2b2f4                 | '------------------------------------------------------------------------------
2b2f4                 | ' Compare current and previous keyboard data buffers for keypress changes.
2b2f4                 | '------------------------------------------------------------------------------
2b2f4                 | hkbd_compare
2b2f4     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2b2f8     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
2b2fc     61 73 07 FB |                 rdlong  htmp1, ptra++
2b300     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2b304     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
2b308     61 73 07 FB |                 rdlong  htmp1, ptra++
2b30c     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2b310     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
2b314     2D 00 64 AD |         if_z    ret
2b318                 | 
2b318     B4 13 D0 FE |                 loc     ptra, #hkbd_report
2b31c                 | 
2b31c                 |                 ' Handle modifiers
2b31c     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
2b320     00 87 C7 FA |                 rdbyte  hr1, ptra
2b324     C7 87 43 F9 |                 rolword hr1,hpar2,#0
2b328     63 86 63 FD |                 mergew  hr1
2b32c     08 EC 07 F6 |                 mov     pa,#8
2b330                 | .modloop
2b330     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
2b334     E8 8C 07 F6 |                 mov     hpar1,#$E8
2b338     F6 8D 83 F1 |                 sub     hpar1,pa
2b33c     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
2b340     FB ED 6F FB |                 djnz    pa,#.modloop
2b344                 | 
2b344     6F E0 75 FD | .release        modc    _set    wc
2b348                 |                 'alts    hdev_port, #hid_report_p
2b348                 |                 'mov     ptra, hid_report_p
2b348     02 F0 07 F1 |                 add     ptra, #2
2b34c     06 EC 07 F6 |                 mov     pa, #6
2b350     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
2b354     20 00 90 AD |         if_z    jmp     #.rl3
2b358     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2b35c     02 F2 07 F1 |                 add     ptrb, #2
2b360     06 EE 07 F6 |                 mov     pb, #6
2b364     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
2b368     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2b36c     08 00 90 AD |         if_z    jmp     #.rl3
2b370     FC EF 6F FB |                 djnz    pb, #.rl2
2b374     68 00 B0 FD |                 call    #hkbd_translate
2b378     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
2b37c                 | 
2b37c     00 90 07 F6 |                 mov     hpar3, #0
2b380     1F 90 27 F4 |                 bith    hpar3, #31
2b384                 | 
2b384     6F 00 74 FD | .press          modc    _clr    wc
2b388     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2b38c     02 F0 07 F1 |                 add     ptra, #2
2b390     06 EC 07 F6 |                 mov     pa, #6
2b394     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
2b398     20 00 90 AD |         if_z    jmp     #.pl3
2b39c     30 13 F0 FE |                 loc     ptrb, #hkbd_report
2b3a0     02 F2 07 F1 |                 add     ptrb, #2
2b3a4     06 EE 07 F6 |                 mov     pb, #6
2b3a8     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
2b3ac     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2b3b0     08 00 90 AD |         if_z    jmp     #.pl3
2b3b4     FC EF 6F FB |                 djnz    pb, #.pl2
2b3b8     24 00 B0 FD |                 call    #hkbd_translate
2b3bc     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
2b3c0                 | 
2b3c0     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
2b3c4     08 13 F0 FE |                 loc     ptrb, #hkbd_report
2b3c8     28 02 64 FD |                 setq #1
2b3cc     61 73 07 FB |                 rdlong  htmp1, ptra++
2b3d0     28 02 64 FD |                 setq #1
2b3d4     E1 73 67 FC |                 wrlong  htmp1, ptrb++
2b3d8     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
2b3dc                 | 
2b3dc     2D 00 64 FD |                 ret
2b3e0                 | 
2b3e0                 | '------------------------------------------------------------------------------
2b3e0                 | ' Translate keyboard scancode to ASCII
2b3e0                 | '------------------------------------------------------------------------------
2b3e0                 | ' On entry:
2b3e0                 | '   hpar1 - scancode
2b3e0                 | '   hpar2 - key modifiers state
2b3e0                 | '       c - pressed (0) or released (1) flag
2b3e0                 | ' On exit:
2b3e0                 | '   hpar1 - bit     31 = 0 pressed, 1 released
2b3e0                 | '               30..17 = unused
2b3e0                 | '                   18 = scroll-lock state 
2b3e0                 | '                   17 = caps-lock state
2b3e0                 | '                   16 = num-lock state 
2b3e0                 | '                15..8 = key modifiers state
2b3e0                 | '                 7..0 = scancode
2b3e0                 | '------------------------------------------------------------------------------
2b3e0                 | hkbd_translate
2b3e0     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
2b3e4     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
2b3e8     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
2b3ec     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
2b3f0     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
2b3f4     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
2b3f8                 | 
2b3f8                 |         if EMUPAD_MAX_PLAYER > 0
2b3f8                 | 
2b3f8                 |         if EMUPAD_BT0_BIT >= 0
2b3f8                 |         end
2b3f8                 |         if EMUPAD_BT1_BIT >= 0
2b3f8                 |         end
2b3f8                 |         if EMUPAD_BT2_BIT >= 0
2b3f8                 |         end
2b3f8                 |         if EMUPAD_BT3_BIT >= 0
2b3f8                 |         end
2b3f8                 |         if EMUPAD_BT4_BIT >= 0
2b3f8                 |         end
2b3f8                 |         if EMUPAD_BT5_BIT >= 0
2b3f8                 |         end
2b3f8                 |         if EMUPAD_BT6_BIT >= 0
2b3f8                 |         end
2b3f8                 |         if EMUPAD_BT7_BIT >= 0
2b3f8                 |         end
2b3f8                 |         if EMUPAD_BT8_BIT >= 0
2b3f8                 |         end
2b3f8                 |         if EMUPAD_BT9_BIT >= 0
2b3f8                 |         end
2b3f8                 | 
2b3f8                 |         end
2b3f8     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
2b3fc     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
2b400     1F 8C 47 F4 |                 bitc    hpar1, #31
2b404                 |         if KEYQUEUE_SIZE > 0
2b404     C4 09 B0 FE |                 loc pb,#keyq_head
2b408     F7 71 E3 FA |                 rdword htmp,pb
2b40c     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
2b410     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
2b414     B8 75 03 F6 |                 mov htmp2,htmp
2b418     04 74 07 FA |                 mul htmp2,#4
2b41c     F7 75 03 F1 |                 add htmp2,pb
2b420     02 74 07 F1 |                 add htmp2,#2
2b424     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
2b428     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
2b42c     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
2b430     F7 71 43 5C |         if_nz   wrbyte htmp,pb
2b434                 |         end
2b434     2D 00 7C FD |                 ret wcz
2b438                 | 
2b438                 | if HAVE_MOUSE
2b438                 | '------------------------------------------------------------------------------
2b438                 | ' Execute an IN interrupt transaction to poll for mouse activity.
2b438                 | '------------------------------------------------------------------------------
2b438                 | ' On entry:
2b438                 | ' On exit:
2b438                 | '------------------------------------------------------------------------------
2b438                 | hget_mouse_in_report
2b438     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2b43c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2b440     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
2b444     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
2b448     CF 02 A0 FD |                 call    #do_int_in
2b44c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b450     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2b454                 | 
2b454     00 90 0F F2 |                 cmp     hpar3, #0               wz
2b458     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2b45c                 | 
2b45c     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
2b460     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2b464     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
2b468     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
2b46c                 | 
2b46c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2b470     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
2b474     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
2b478     01 90 87 31 |         if_ae   sub     hpar3, #1
2b47c                 | 
2b47c     40 09 90 FE |                 loc     pa, #mouse_limits
2b480     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
2b484                 | 
2b484                 |                 ' load xacc,yacc,zacc
2b484     28 04 64 FD |                 setq    #3-1
2b488     80 87 07 FB |                 rdlong  hr1,ptrb
2b48c                 |                 ' load limits and outptr
2b48c     28 04 64 FD |                 setq    #3-1
2b490     F6 73 03 FB |                 rdlong  htmp1,pa
2b494                 | 
2b494     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
2b498     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
2b49c     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
2b4a0     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
2b4a4     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
2b4a8     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
2b4ac     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
2b4b0     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
2b4b4                 |               
2b4b4                 | 
2b4b4     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
2b4b8     07 70 67 F7 |                 signx   htmp, #7
2b4bc     B8 87 03 F1 |                 add     hr1,htmp
2b4c0     00 72 0F F2 |                 cmp     htmp1,#0 wz
2b4c4     B9 87 63 53 |         if_ne   fles    hr1,htmp1
2b4c8     00 86 47 53 |         if_ne   fges    hr1,#0
2b4cc                 | 
2b4cc     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
2b4d0     07 70 67 F7 |                 signx   htmp, #7
2b4d4     B8 89 03 F1 |                 add     hr2,htmp
2b4d8     00 74 0F F2 |                 cmp     htmp2,#0 wz
2b4dc     BA 89 63 53 |         if_ne   fles    hr2,htmp2
2b4e0     00 88 47 53 |         if_ne   fges    hr2,#0
2b4e4                 |                 
2b4e4                 | 
2b4e4     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
2b4e8     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
2b4ec     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
2b4f0     B8 8B 03 A1 |         if_z    add     hr3,htmp
2b4f4                 | 
2b4f4     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
2b4f8     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
2b4fc                 | 
2b4fc                 |                 ' write back accumulators
2b4fc     28 04 64 FD |                 setq    #3-1
2b500     80 87 67 FC |                 wrlong  hr1,ptrb
2b504                 |                 ' if outptr set, write X/Y words
2b504     00 76 0F F2 |                 cmp htmp3,#0                    wz
2b508     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
2b50c     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
2b510     2D 00 64 FD |                 ret
2b514                 | end
2b514                 | 
2b514                 | '------------------------------------------------------------------------------
2b514                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
2b514                 | '------------------------------------------------------------------------------
2b514                 | ' On entry:
2b514                 | ' On exit:
2b514                 | '------------------------------------------------------------------------------
2b514                 | if _HAVE_GAMEPAD
2b514                 | hget_gp_in_report
2b514     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2b518     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2b51c                 | 
2b51c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2b520     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
2b524     00 90 E3 F8 |                 getbyte hpar3
2b528     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
2b52c     CF 02 A0 FD |                 call    #do_int_in
2b530     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b534     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2b538                 | 
2b538     00 90 0F F2 |                 cmp     hpar3, #0               wz
2b53c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2b540                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
2b540                 | 
2b540     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
2b544     00 70 E3 F8 |                 getbyte htmp                            ' |
2b548     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2b54c     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
2b550     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
2b554     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
2b558     B8 01 C0 F8 |                 setbyte htmp                            ' |
2b55c                 | 
2b55c                 | ' Note: the following code compares the current and previous reports
2b55c                 | ' and process the data if there are changes to ease the debug output.
2b55c                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
2b55c                 | ' gpPreReport buffer.
2b55c                 | 
2b55c                 |                 ' ----- start of block to remove
2b55c                 |                 {
2b55c                 |                 }
2b55c                 |                 ' ----- end of block to remove
2b55c     F4 04 90 FE |                 loc pa,#hpad_translate
2b560     2A EC 63 FD |                 push pa
2b564                 | 
2b564                 |                 ' FALL THROUGH !!!!
2b564                 | 
2b564                 | '------------------------------------------------------------------------------
2b564                 | ' Decode controller report
2b564                 | '------------------------------------------------------------------------------
2b564                 | hid_decode
2b564                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
2b564     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
2b568     00 04 00 FF 
2b56c     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
2b570                 | 
2b570     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2b574                 | 
2b574     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2b578     00 2A E3 F8 |                 getbyte hidr_type
2b57c     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
2b580     34 02 90 AD |         if_z    jmp     #hpad_xinput
2b584     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
2b588     1C 03 90 AD |         if_z    jmp     #hpad_ps3
2b58c     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
2b590     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
2b594     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
2b598                 |                 
2b598                 | 
2b598                 | '------------------------------------------------------------------------------
2b598                 | ' Handle HID controller (or mouse now
2b598                 | ' On entry:
2b598                 | '   ptrb - controller report
2b598                 | '------------------------------------------------------------------------------
2b598                 | hpad_hid
2b598     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2b59c     F7 F1 03 F6 |                 mov     ptra, pb
2b5a0     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
2b5a4     00 EC 03 F6 |                 mov     pa, 0-0
2b5a8                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
2b5a8     19 2A 3B FF 
2b5ac     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
2b5b0                 | 
2b5b0                 | .next
2b5b0     00 EC 5F F2 |                 cmps    pa, #0      wcz
2b5b4     2D 00 7C ED |         if_be   ret     wcz
2b5b8                 | 
2b5b8     61 8D C7 FA |                 rdbyte  hpar1, ptra++
2b5bc     01 EC 87 F1 |                 sub     pa, #1
2b5c0     00 8E 07 F6 |                 mov     hpar2, #0
2b5c4                 | 
2b5c4     C6 71 03 F6 |                 mov     htmp, hpar1
2b5c8     03 70 07 F5 |                 and     htmp, #$03
2b5cc     01 70 0F F2 |                 cmp     htmp, #1    wz
2b5d0     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
2b5d4     07 8E 67 A7 |         if_z    signx   hpar2,#7
2b5d8     01 EC 87 A1 |         if_z    sub     pa, #1
2b5dc     02 70 0F F2 |                 cmp     htmp, #2    wz
2b5e0     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
2b5e4     0F 8E 67 A7 |         if_z    signx   hpar2,#15
2b5e8     02 EC 87 A1 |         if_z    sub     pa, #2
2b5ec     03 70 0F F2 |                 cmp     htmp, #3    wz
2b5f0     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
2b5f4     04 EC 87 A1 |         if_z    sub     pa, #4
2b5f8                 | 
2b5f8     FC 8C 07 F5 |                 and     hpar1, #$FC
2b5fc                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
2b5fc                 | 
2b5fc     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
2b600     0C 01 90 AD |         if_z    jmp     #.report_id
2b604     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
2b608     24 01 90 AD |         if_z    jmp     #.usage_page
2b60c     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
2b610     2C 01 90 AD |         if_z    jmp     #.usage
2b614     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
2b618     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
2b61c     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
2b620     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
2b624     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
2b628     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
2b62c     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
2b630     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
2b634     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
2b638     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
2b63c     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
2b640     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
2b644     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
2b648     64 FF 9F 5D |         if_nz   jmp     #.next
2b64c                 | 
2b64c     D8 1D A7 FB |                 tjf     hidr_state,#.next
2b650                 | 
2b650     03 8E 07 F5 |                 and     hpar2, #$03
2b654     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
2b658     18 00 90 5D |         if_nz   jmp     #.skip
2b65c                 | 
2b65c     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
2b660     20 00 90 AD |         if_z    jmp     #.axes
2b664     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
2b668     5C 00 90 AD |         if_z    jmp     #.hats
2b66c     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
2b670     70 00 90 AD |         if_z    jmp     #.buttons
2b674                 | .skip
2b674     8F 71 03 F6 |                 mov     htmp, hidr_size
2b678     90 71 03 FA |                 mul     htmp, hidr_count
2b67c     B8 23 03 F1 |                 add     hidr_offset, htmp
2b680     2C FF 9F FD |                 jmp     #.next
2b684                 | .axes
2b684                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
2b684     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
2b688     90 87 03 F6 |                 mov     hr1, hidr_count
2b68c                 | .l1
2b68c     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2b690     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2b694     04 03 B0 FD |                 call    #hpad_getbits
2b698     64 03 B0 FD |                 call    #hpad_normalize
2b69c     06 84 1F F2 |                 cmp     hr0, #6         wcz
2b6a0     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
2b6a4     00 88 43 C8 |         if_b    getnib  hr2
2b6a8     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
2b6ac     5F 01 20 C9 |         if_b    setword retval
2b6b0     01 84 07 C1 |         if_b    add     hr0, #1
2b6b4     8F 23 03 F1 |                 add     hidr_offset, hidr_size
2b6b8     F4 87 6F FB |                 djnz    hr1, #.l1
2b6bc                 | 
2b6bc     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
2b6c0     01 1C 07 F6 |                 mov     hidr_state, #1
2b6c4     E8 FE 9F FD |                 jmp     #.next
2b6c8                 | .hats
2b6c8                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
2b6c8     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2b6cc     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2b6d0     C8 02 B0 FD |                 call    #hpad_getbits
2b6d4     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
2b6d8     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2b6dc     01 1C 07 F6 |                 mov     hidr_state, #1
2b6e0     90 FF 9F FD |                 jmp     #.skip
2b6e4                 | .buttons
2b6e4                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
2b6e4     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2b6e8     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2b6ec     90 8F 03 FA |                 mul     hpar2, hidr_count
2b6f0     A8 02 B0 FD |                 call    #hpad_getbits
2b6f4     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
2b6f8     B8 BF 62 F0 |                 shl     retval, htmp
2b6fc     5F 17 43 F5 |                 or      hidr_buttons, retval
2b700     90 71 03 F1 |                 add     htmp, hidr_count
2b704     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
2b708     01 1C 07 F6 |                 mov     hidr_state, #1
2b70c     64 FF 9F FD |                 jmp     #.skip
2b710                 | .report_id
2b710     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
2b714     2D 00 7C 5D |         if_nz   ret     wcz
2b718     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
2b71c     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
2b720     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
2b724     01 1C 67 56 |         if_nz   neg     hidr_state,#1
2b728     01 F2 87 51 |         if_nz   sub     ptrb,#1
2b72c     80 FE 9F FD |                 jmp     #.next
2b730                 | .usage_page
2b730     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
2b734     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
2b738     04 1C 07 A6 |         if_z    mov     hidr_state, #4
2b73c     70 FE 9F FD |                 jmp     #.next
2b740                 | .usage
2b740     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
2b744     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
2b748     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
2b74c     01 1C 07 A6 |         if_z    mov     hidr_state, #1
2b750     5C FE 9F AD |         if_z    jmp     #.next
2b754     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
2b758     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
2b75c     01 1C 07 A6 |         if_z    mov     hidr_state, #1
2b760     4C FE 9F AD |         if_z    jmp     #.next
2b764     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
2b768     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
2b76c     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
2b770     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
2b774     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
2b778     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
2b77c     10 00 90 AD |         if_z    jmp     #.usage_axis
2b780     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
2b784     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
2b788     03 1C 07 A6 |         if_z    mov     hidr_state, #3
2b78c     20 FE 9F FD |                 jmp     #.next
2b790                 | .usage_axis
2b790     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
2b794     18 FE 9F CD |         if_b    jmp     #.next
2b798     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
2b79c     C7 01 00 F8 |                 setnib  hpar2
2b7a0                 | 
2b7a0     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
2b7a4     C7 8F C3 F9 |                 decod   hpar2
2b7a8     C7 0F 43 F5 |                 or      hidr_flags, hpar2
2b7ac                 | 
2b7ac     01 24 07 F1 |                 add     hidr_usage_idx, #1
2b7b0     02 1C 07 F6 |                 mov     hidr_state, #2
2b7b4     F8 FD 9F FD |                 jmp     #.next
2b7b8                 | 
2b7b8                 | '------------------------------------------------------------------------------
2b7b8                 | ' Handle XInput controller
2b7b8                 | ' On entry:
2b7b8                 | '   ptrb - controller report
2b7b8                 | '------------------------------------------------------------------------------
2b7b8                 | '   Default implementation translates the report to a pseudo-defacto hid
2b7b8                 | '   standard and jumps to hpad_translate for actions.
2b7b8                 | '   Implementors may take specific actions for this kind of controller.
2b7b8                 | '------------------------------------------------------------------------------
2b7b8                 | hpad_xinput
2b7b8     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
2b7bc     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
2b7c0     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
2b7c4     14 70 0F F2 |                 cmp     htmp, #$14      wz
2b7c8     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
2b7cc                 | 
2b7cc                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
2b7cc                 | 
2b7cc     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
2b7d0     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
2b7d4                 | 
2b7d4     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
2b7d8     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
2b7dc     5F BF 22 F6 |                 not     retval
2b7e0     5F 11 2B F9 |                 setword hidr_axis, retval, #1
2b7e4     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
2b7e8     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
2b7ec     5F BF 22 F6 |                 not     retval
2b7f0     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
2b7f4                 | 
2b7f4     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
2b7f8     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
2b7fc     C0 BE 1E F2 |                 cmp     retval, #192    wcz
2b800     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
2b804     F8 01 B0 FD |                 call    #hpad_normalize
2b808     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
2b80c     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
2b810     C0 BE 1E F2 |                 cmp     retval, #192    wcz
2b814     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
2b818     E4 01 B0 FD |                 call    #hpad_normalize
2b81c     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
2b820                 | 
2b820     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
2b824     81 BF E6 FA |                 rdword  retval, ptrb[1]
2b828     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
2b82c     00 16 47 F4 |                 bitc    hidr_buttons, #0
2b830     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
2b834     01 16 47 F4 |                 bitc    hidr_buttons, #1
2b838     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
2b83c     02 16 47 F4 |                 bitc    hidr_buttons, #2
2b840     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
2b844     03 16 47 F4 |                 bitc    hidr_buttons, #3
2b848     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
2b84c     04 16 47 F4 |                 bitc    hidr_buttons, #4
2b850     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
2b854     05 16 47 F4 |                 bitc    hidr_buttons, #5
2b858     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
2b85c     08 16 47 F4 |                 bitc    hidr_buttons, #8
2b860     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
2b864     09 16 47 F4 |                 bitc    hidr_buttons, #9
2b868     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
2b86c     0A 16 47 F4 |                 bitc    hidr_buttons, #10
2b870     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
2b874     0B 16 47 F4 |                 bitc    hidr_buttons, #11
2b878     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
2b87c     0C 16 47 F4 |                 bitc    hidr_buttons, #12
2b880                 | 
2b880     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2b884     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
2b888     7A BB 7A FF 
2b88c     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
2b890     F9 FF 7F FF 
2b894     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
2b898     B9 71 5F F9 |                 altgn   htmp, #htmp1
2b89c     00 70 43 F8 |                 getnib  htmp
2b8a0     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
2b8a4                 | 
2b8a4     AC 01 90 FD |                 jmp     #hpad_translate
2b8a8                 | 
2b8a8                 | '------------------------------------------------------------------------------
2b8a8                 | ' Handle PS3 controller
2b8a8                 | ' On entry:
2b8a8                 | '   ptrb - controller report
2b8a8                 | '------------------------------------------------------------------------------
2b8a8                 | '   Default implementation translates the report to a pseudo-defacto hid
2b8a8                 | '   standard and jumps to hpad_translate for actions.
2b8a8                 | '   Implementors may take specific actions for this kind of controller.
2b8a8                 | '------------------------------------------------------------------------------
2b8a8                 | hpad_ps3
2b8a8     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
2b8ac     01 70 0F F2 |                 cmp     htmp, #$01      wz
2b8b0     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
2b8b4                 | 
2b8b4                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
2b8b4                 | 
2b8b4     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
2b8b8     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
2b8bc     40 01 B0 FD |                 call    #hpad_normalize
2b8c0     5F 11 23 F9 |                 setword hidr_axis, retval, #0
2b8c4     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
2b8c8     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
2b8cc     30 01 B0 FD |                 call    #hpad_normalize
2b8d0     5F 11 2B F9 |                 setword hidr_axis, retval, #1
2b8d4     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
2b8d8     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
2b8dc     20 01 B0 FD |                 call    #hpad_normalize
2b8e0     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
2b8e4     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
2b8e8     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
2b8ec     10 01 B0 FD |                 call    #hpad_normalize
2b8f0     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
2b8f4     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
2b8f8     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
2b8fc                 | 
2b8fc     08 8C 07 F6 |                 mov     hpar1, #8
2b900     13 8E 07 F6 |                 mov     hpar2, #19
2b904     94 00 B0 FD |                 call    #hpad_getbits
2b908                 | 
2b908     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
2b90c     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
2b910     00 16 47 F4 |                 bitc    hidr_buttons, #0
2b914     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
2b918     01 16 47 F4 |                 bitc    hidr_buttons, #1
2b91c     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
2b920     02 16 47 F4 |                 bitc    hidr_buttons, #2
2b924     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
2b928     03 16 47 F4 |                 bitc    hidr_buttons, #3
2b92c     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
2b930     04 16 47 F4 |                 bitc    hidr_buttons, #4
2b934     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
2b938     05 16 47 F4 |                 bitc    hidr_buttons, #5
2b93c     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
2b940     06 16 47 F4 |                 bitc    hidr_buttons, #6
2b944     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
2b948     07 16 47 F4 |                 bitc    hidr_buttons, #7
2b94c     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
2b950     08 16 47 F4 |                 bitc    hidr_buttons, #8
2b954     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
2b958     09 16 47 F4 |                 bitc    hidr_buttons, #9
2b95c     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
2b960     0A 16 47 F4 |                 bitc    hidr_buttons, #10
2b964     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
2b968     0B 16 47 F4 |                 bitc    hidr_buttons, #11
2b96c     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
2b970     0C 16 47 F4 |                 bitc    hidr_buttons, #12
2b974                 | 
2b974     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2b978     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
2b97c     09 FA 79 FF 
2b980     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
2b984     FF FA 7F FF 
2b988     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
2b98c     B9 71 5F F9 |                 altgn   htmp, #htmp1
2b990     00 70 43 F8 |                 getnib  htmp
2b994     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
2b998                 | 
2b998     B8 00 90 FD |                 jmp     #hpad_translate
2b99c                 | 
2b99c                 | '------------------------------------------------------------------------------
2b99c                 | ' Read bits from report data buffer
2b99c                 | '------------------------------------------------------------------------------
2b99c                 | ' On entry:
2b99c                 | '   PTRB - report buffer
2b99c                 | '   hpar1 - start bit
2b99c                 | '   hpar2 - number of bits
2b99c                 | ' On exit:
2b99c                 | '   retval - bits
2b99c                 | '------------------------------------------------------------------------------
2b99c                 | hpad_getbits
2b99c     C6 71 03 F6 |                 mov     htmp, hpar1
2b9a0     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
2b9a4     F9 71 03 F1 |                 add     htmp, ptrb
2b9a8     B8 BF 02 FB |                 rdlong  retval, htmp
2b9ac                 | 
2b9ac     C6 73 03 F6 |                 mov     htmp1, hpar1
2b9b0     07 72 07 F5 |                 and     htmp1, #$07     ' shift
2b9b4     B9 BF 42 F0 |                 shr     retval, htmp1
2b9b8                 | 
2b9b8     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
2b9bc     10 00 90 1D |         if_a    jmp     #.l1
2b9c0                 | 
2b9c0     C7 8F C3 F9 |                 decod   hpar2
2b9c4     01 8E 87 F1 |                 sub     hpar2, #1
2b9c8     C7 BF 02 F5 |                 and     retval, hpar2
2b9cc     2D 00 64 FD |                 ret
2b9d0                 | .l1
2b9d0     FF 7F 00 FF 
2b9d4     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
2b9d8     03 70 07 F1 |                 add     htmp, #3
2b9dc     B8 75 03 FB |                 rdlong  htmp2, htmp
2b9e0     18 8E 87 F1 |                 sub     hpar2, #24
2b9e4     C7 8F C3 F9 |                 decod   hpar2
2b9e8     01 8E 87 F1 |                 sub     hpar2, #1
2b9ec     B9 75 43 F0 |                 shr     htmp2, htmp1
2b9f0     C7 75 03 F5 |                 and     htmp2, hpar2
2b9f4     18 74 67 F0 |                 shl     htmp2, #24
2b9f8     BA BF 42 F5 |                 or      retval, htmp2
2b9fc     2D 00 64 FD |                 ret
2ba00                 | 
2ba00                 | '------------------------------------------------------------------------------
2ba00                 | ' Normalize value to signed word (-32768 / 32767)
2ba00                 | '------------------------------------------------------------------------------
2ba00                 | ' On entry:
2ba00                 | '   retval - value to normalize
2ba00                 | '   hidr_lminmax - min (word 1) max (word 0) value range
2ba00                 | '   - or -
2ba00                 | '   hidr_pminmax - min (word 1) max (word 0) value range
2ba00                 | '   hidr_size - value bits length
2ba00                 | ' On exit:
2ba00                 | '   retval - normalized value
2ba00                 | '------------------------------------------------------------------------------
2ba00                 | hpad_normalize
2ba00     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
2ba04     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
2ba08     2D 00 64 AD |         if_z    ret
2ba0c     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
2ba10     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
2ba14     0F 72 77 F7 |                 signx   htmp1, #15      wc
2ba18     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
2ba1c     00 BE 66 C7 |         if_c    signx   retval, #0-0
2ba20     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
2ba24     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
2ba28     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
2ba2c     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
2ba30     B8 71 53 F6 |                 abs     htmp            wc
2ba34     1F BE 0E F4 |                 testb   retval, #31     wz
2ba38     5F BF 42 F6 |                 abs     retval
2ba3c     B8 BF 12 FD |                 qdiv    retval, htmp
2ba40     18 BE 62 FD |                 getqx   retval
2ba44     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
2ba48     C0 FF 7F FF 
2ba4c     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
2ba50     2D 00 64 FD |                 ret
2ba54                 | 
2ba54                 | '------------------------------------------------------------------------------
2ba54                 | ' Perform controller actions
2ba54                 | ' On entry:
2ba54                 | '    hidr_id        report id
2ba54                 | '    hidr_axis      axis value (signed word, 2 axes per long)
2ba54                 | '                      X = hidr_axis+0, #0
2ba54                 | '                      Y = hidr_axis+0, #1
2ba54                 | '                      Z = hidr_axis+1, #0
2ba54                 | '                     RX = hidr_axis+1, #1
2ba54                 | '                     RY = hidr_axis+2, #0
2ba54                 | '                     RZ = hidr_axis+2, #1
2ba54                 | '    hidr_buttons   buttons state (bits 0 to 31)
2ba54                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
2ba54                 | '
2ba54                 | '                     -------3 -------2 -------1 -------0 byte
2ba54                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
2ba54                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
2ba54                 | '                                zyx||| |||||||| ++++++++ n. buttons
2ba54                 | '                                |||||| ||||++++--------- n. axes
2ba54                 | '                                |||||| ++++------------- n. hats
2ba54                 | '                                ++++++------------------ valid axes
2ba54                 | '------------------------------------------------------------------------------
2ba54                 | hpad_translate
2ba54                 | 
2ba54                 | 
2ba54                 |         if HAVE_HIDPAD
2ba54     84 0C F0 FE |                 loc     ptrb,#hidpad_report
2ba58     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
2ba5c     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
2ba60     01 70 E7 F2 |                 cmpsub  htmp,#1
2ba64     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
2ba68     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
2ba6c     2D 00 7C 3D |         if_ae   ret     wcz
2ba70     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
2ba74     B8 F3 03 F1 |                 add     ptrb,htmp
2ba78     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
2ba7c     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
2ba80     28 0C 64 FD |                 setq    #7-1
2ba84     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
2ba88                 |         end
2ba88                 | 
2ba88                 | 
2ba88                 |         if EMUPAD_MAX_PLAYER > 0
2ba88                 | .emupad_no_hat
2ba88                 |         if EMUPAD_BT0_BIT >= 0
2ba88                 |         end
2ba88                 |         if EMUPAD_BT1_BIT >= 0
2ba88                 |         end
2ba88                 |         if EMUPAD_BT2_BIT >= 0
2ba88                 |         end
2ba88                 |         if EMUPAD_BT3_BIT >= 0
2ba88                 |         end
2ba88                 |         if EMUPAD_BT4_BIT >= 0
2ba88                 |         end
2ba88                 |         if EMUPAD_BT5_BIT >= 0
2ba88                 |         end
2ba88                 |         if EMUPAD_BT6_BIT >= 0
2ba88                 |         end
2ba88                 |         if EMUPAD_BT7_BIT >= 0
2ba88                 |         end
2ba88                 |         if EMUPAD_BT8_BIT >= 0
2ba88                 |         end
2ba88                 |         if EMUPAD_BT9_BIT >= 0
2ba88                 |         end
2ba88                 | .emupad_slot_over
2ba88                 |         end
2ba88                 | 
2ba88                 |         if 0
2ba88                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
2ba88                 | 
2ba88                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
2ba88                 | 
2ba88                 |         end
2ba88     2D 00 64 FD |                 ret
2ba8c                 | end
2ba8c                 | 
2ba8c                 | if EMUPAD_MAX_PLAYER > 0
2ba8c                 | '------------------------------------------------------------------------------
2ba8c                 | ' Clear EmuPad state
2ba8c                 | '------------------------------------------------------------------------------
2ba8c                 | emupad_reset
2ba8c                 | 
2ba8c                 | '------------------------------------------------------------------------------
2ba8c                 | ' Get EmuPad Player number for current device (into retval)
2ba8c                 | ' Z flag is also set if current device is valid
2ba8c                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
2ba8c                 | '------------------------------------------------------------------------------
2ba8c                 | emupad_getnum
2ba8c                 | .loop
2ba8c                 | '------------------------------------------------------------------------------
2ba8c                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
2ba8c                 | '------------------------------------------------------------------------------
2ba8c                 | emupad_discon
2ba8c                 | .loop         
2ba8c                 |         
2ba8c                 |         ' FALL THROUGH!!!
2ba8c                 | 
2ba8c                 | '------------------------------------------------------------------------------
2ba8c                 | ' Update EmuPad reports (all of them...)
2ba8c                 | '------------------------------------------------------------------------------
2ba8c                 | emupad_write_reports
2ba8c                 | .devloop
2ba8c                 | 
2ba8c                 | end
2ba8c                 | 
2ba8c                 | 
2ba8c                 | '------------------------------------------------------------------------------
2ba8c                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
2ba8c                 | '------------------------------------------------------------------------------
2ba8c                 | ' On entry:
2ba8c                 | ' On exit:
2ba8c                 | '------------------------------------------------------------------------------
2ba8c                 | hget_hub_status
2ba8c     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
2ba90     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2ba94     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
2ba98     01 90 2F F9 |                 setword hpar3, #1, #1
2ba9c     CF 02 A0 FD |                 call    #do_int_in
2baa0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2baa4     0C 00 90 AD |         if_z    jmp     #.data
2baa8     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2baac     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
2bab0     2D 00 64 FD |                 ret
2bab4                 | .data
2bab4     00 90 0F F2 |                 cmp     hpar3, #0               wz
2bab8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2babc                 | 
2babc     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
2bac0     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
2bac4     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
2bac8     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
2bacc                 |                 debug(ubin_long(hub_status_chg))
2bacc                 | 
2bacc     01 5A 06 F6 |                 mov     hdev_port, #1
2bad0                 | .loop
2bad0     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
2bad4     0C 00 B0 AD |         if_x1   call    #hub_port_handler
2bad8     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
2badc     F0 FF 9F 3D |         if_nc   jmp     #.loop
2bae0     2D 00 64 FD |                 ret
2bae4                 | 
2bae4                 | hub_port_handler
2bae4     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
2bae8     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2baec     27 EF 03 F6 |                 mov     pb, urx_buff_p
2baf0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2baf4     55 02 A0 FD |                 call    #control_read
2baf8     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
2bafc                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
2bafc                 | 
2bafc     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
2bb00     50 01 90 5D |         if_x0   jmp     #.other
2bb04     68 02 D0 FE |                 loc     ptra, #clr_port_feat
2bb08     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
2bb0c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2bb10     A0 02 A0 FD |                 call    #control_write
2bb14     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
2bb18     7C 01 90 5D |         if_x0   jmp     #.disconnect
2bb1c     B0 99 02 F6 |                 mov     hctwait, _100ms_
2bb20     EF 02 A0 FD |                 call    #poll_waitx
2bb24                 | 
2bb24     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
2bb28     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
2bb2c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2bb30     A0 02 A0 FD |                 call    #control_write
2bb34                 | 
2bb34     02 76 07 F6 |                 mov     htmp3, #2
2bb38                 | .wait_reset
2bb38     AC 99 02 F6 |                 mov     hctwait, _8ms_
2bb3c     EF 02 A0 FD |                 call    #poll_waitx
2bb40     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2bb44     27 EF 03 F6 |                 mov     pb, urx_buff_p
2bb48     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2bb4c     55 02 A0 FD |                 call    #control_read
2bb50     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
2bb54     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
2bb58     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
2bb5c                 | 
2bb5c     10 02 D0 FE |                 loc     ptra, #clr_port_feat
2bb60     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
2bb64     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2bb68     A0 02 A0 FD |                 call    #control_write
2bb6c                 | 
2bb6c     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
2bb70                 | .wait_recover
2bb70     A7 99 02 F6 |                 mov     hctwait, _1ms_
2bb74     EF 02 A0 FD |                 call    #poll_waitx
2bb78     FD 71 6F FB |                 djnz    htmp,#.wait_recover
2bb7c                 | 
2bb7c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2bb80     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2bb84     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2bb88                 | 
2bb88     00 08 00 FF 
2bb8c     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
2bb90     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
2bb94     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
2bb98     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
2bb9c     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
2bba0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2bba4     48 01 90 5D |         if_nz   jmp     #.done
2bba8                 | .get_dev_desc
2bba8     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
2bbac     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
2bbb0     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
2bbb4     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
2bbb8     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
2bbbc     01 71 57 FC |                 wrword  htmp, ptra[wValue]
2bbc0     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
2bbc4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2bbc8     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
2bbcc     AC 99 02 F6 |                 mov     hctwait, _8ms_
2bbd0     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
2bbd4     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
2bbd8     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
2bbdc     BE 00 A0 FD |                 call    #calc_crc5
2bbe0     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
2bbe4     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
2bbe8     F7 AD C2 FA |                 rdbyte  total_data, pb
2bbec     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
2bbf0     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
2bbf4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2bbf8     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
2bbfc     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
2bc00     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
2bc04                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
2bc04     9F 99 02 F6 |                 mov     hctwait, _500us_
2bc08     EF 02 A0 FD |                 call    #poll_waitx
2bc0c     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
2bc10     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
2bc14     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
2bc18     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
2bc1c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2bc20     CC 00 90 5D |         if_nz   jmp     #.done
2bc24     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
2bc28     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
2bc2c     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
2bc30     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
2bc34     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
2bc38     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
2bc3c     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
2bc40     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
2bc44     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
2bc48     A4 00 90 CD |         if_b    jmp     #.done
2bc4c     6C F0 BF FD |                 call    #hparse_con_desc
2bc50     9C 00 90 FD |                 jmp     #.done
2bc54                 | 
2bc54                 | .other
2bc54     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
2bc58     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
2bc5c     28 00 90 AD |         if_x1   jmp     #.reset_feature
2bc60     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
2bc64     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
2bc68     1C 00 90 AD |         if_x1   jmp     #.reset_feature
2bc6c     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
2bc70     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
2bc74     10 00 90 AD |         if_x1   jmp     #.reset_feature
2bc78     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
2bc7c     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
2bc80     04 00 90 AD |         if_x1   jmp     #.reset_feature
2bc84     68 00 90 FD |                 jmp     #.done
2bc88                 | .reset_feature
2bc88     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
2bc8c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2bc90     A0 02 A0 FD |                 call    #control_write
2bc94     58 00 90 FD |                 jmp     #.done
2bc98                 | .disconnect
2bc98                 | 
2bc98     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2bc9c     00 70 E3 F8 |                 getbyte htmp
2bca0     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
2bca4     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
2bca8     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
2bcac     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
2bcb0     00 76 06 A6 |         if_z    mov     kb_led_states, #0
2bcb4     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
2bcb8                 |         if EMUPAD_MAX_PLAYER > 0
2bcb8                 |         end
2bcb8                 |         if HAVE_MOUSE
2bcb8     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
2bcbc     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
2bcc0     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
2bcc4                 |         end
2bcc4                 |         if HAVE_HIDPAD
2bcc4     14 0A F0 FE |                 loc ptrb,#hidpad_report
2bcc8     2D 71 03 F6 |                 mov htmp,hdev_port
2bccc     01 70 E7 F2 |                 cmpsub htmp,#1
2bcd0     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
2bcd4     B8 F3 03 F1 |                 add ptrb,htmp
2bcd8     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
2bcdc     80 01 6C FC |                 wrlong #0,ptrb
2bce0                 |         end
2bce0                 | 
2bce0     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
2bce4     00 00 C4 F8 |                 setbyte #0
2bce8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2bcec     00 00 04 F6 |                 mov     0-0, #0
2bcf0                 | 
2bcf0                 | .done
2bcf0     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
2bcf4     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
2bcf8     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2bcfc     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
2bd00     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
2bd04     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
2bd08                 | 
2bd08     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2bd0c     27 EF 03 F6 |                 mov     pb, urx_buff_p
2bd10     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2bd14     55 02 A0 FD |                 call    #control_read
2bd18     00 69 06 FB |                 rdlong  hub_port_status, ptra
2bd1c                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
2bd1c     2D 00 64 FD |                 ret
2bd20                 | 
2bd20                 | '------------------------------------------------------------------------------
2bd20                 | ' Partially populated SETUP packets
2bd20                 | '------------------------------------------------------------------------------
2bd20     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
2bd21     06          |                 byte    REQ_GET_DESC
2bd22     00 01       |                 word    TYPE_DEVICE << 8
2bd24     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2bd26     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2bd28     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
2bd29     06          |                 byte    REQ_GET_DESC
2bd2a     00 02       |                 word    TYPE_CONFIG << 8
2bd2c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2bd2e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2bd30     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
2bd31     09          |                 byte    REQ_SET_CONFIG
2bd32     00 00       |                 word    0       ' Configuration value
2bd34     00 00       |                 word    0       ' Zero
2bd36     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
2bd38     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
2bd39     05          |                 byte    REQ_SET_ADDR
2bd3a     00 00       |                 word    0       ' Zero
2bd3c     00 00       |                 word    0       ' Zero
2bd3e     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
2bd40                 | '------------------------------------------------------------------------------
2bd40                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
2bd40                 | ' wValue field dictates which protocol should be used.
2bd40                 | '
2bd40                 | ' When initialized, all devices default to report protocol. However the host
2bd40                 | ' should not make any assumptions about the device state and should set the
2bd40                 | ' desired protocol whenever initializing a device.
2bd40                 | '------------------------------------------------------------------------------
2bd40     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2bd41     0B          |                 byte    HID_SET_PROTO
2bd42     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
2bd44                 |                                                 ' (HID 1.11 Section 7.2.6).
2bd44     00 00       |                 word    0               ' Interface index number.
2bd46     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
2bd48                 | '------------------------------------------------------------------------------
2bd48     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2bd49     0A          |                 byte    HID_SET_IDLE
2bd4a     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
2bd4c                 |                                         ' reporting until a change is detected in the report data
2bd4c                 | 
2bd4c                 |                                         ' (HID 1.11 Section 7.2.4).
2bd4c     00 00       |                 word    0       ' Interface index number.
2bd4e     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
2bd50     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2bd51     09          |                 byte    HID_SET_REPORT
2bd52     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
2bd54                 |                                         ' (HID 1.11 Section 7.2.2).
2bd54     00 00       |                 word    0       ' Interface index number.
2bd56     00 00       |                 word    0       ' Size of the report, in bytes.
2bd58     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
2bd59     06          |                 byte    REQ_GET_DESC
2bd5a     00 22       |                 word    TYPE_REPORT << 8
2bd5c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2bd5e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2bd60                 | '------------------------------------------------------------------------------
2bd60     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
2bd61     06          |                 byte    REQ_GET_DESC
2bd62     00 29       |                 word    TYPE_HUB << 8
2bd64     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2bd66     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2bd68     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
2bd69     03          |                 byte    REQ_SET_FEATURE
2bd6a     00 00       |                 word    0       ' port power
2bd6c     01 00       |                 word    1       ' Port index number (1+)
2bd6e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2bd70     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
2bd71     01          |                 byte    REQ_CLEAR_FEATURE
2bd72     00 00       |                 word    0       ' port power
2bd74     01 00       |                 word    1       ' Port index number (1+)
2bd76     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2bd78     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
2bd79     00          |                 byte    REQ_GET_STATUS
2bd7a     00 00       |                 word    0
2bd7c     01 00       |                 word    1       ' Port index number (1+)
2bd7e     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
2bd80                 | '------------------------------------------------------------------------------
2bd80                 | if _HAVE_GAMEPAD
2bd80     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
2bd84                 | ps3_command_buff
2bd84     00 00 00 00 
2bd88     00          |                 byte    $00, $00, $00, $00, $00
2bd89     00 00 00 00 
2bd8d     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
2bd8e     FF 27 10 00 
2bd92     32          |                 byte    $FF, $27, $10, $00, $32
2bd93     FF 27 10 00 
2bd97     32          |                 byte    $FF, $27, $10, $00, $32
2bd98     FF 27 10 00 
2bd9c     32          |                 byte    $FF, $27, $10, $00, $32
2bd9d     FF 27 10 00 
2bda1     32          |                 byte    $FF, $27, $10, $00, $32
2bda2     00 00 00 00 
2bda6     00          |                 byte    $00, $00, $00, $00, $00
2bda7     00 00 00 00 
2bdab     00          |                 byte    $00, $00, $00, $00, $00
2bdac     00 00 00 00 
2bdb0     00          |                 byte    $00, $00, $00, $00, $00
2bdb1     00 00 00    |                 byte    $00, $00, $00
2bdb4                 | '------------------------------------------------------------------------------
2bdb4     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
2bdb7                 |                                         ' 0x01 All blinking
2bdb7                 |                                         ' 0x02 1 flashes, then on
2bdb7                 |                                         ' 0x03 2 flashes, then on
2bdb7                 |                                         ' 0x04 3 flashes, then on
2bdb7                 |                                         ' 0x05 4 flashes, then on
2bdb7                 |                                         ' 0x06 1 on
2bdb7                 |                                         ' 0x07 2 on
2bdb7                 |                                         ' 0x08 3 on
2bdb7                 |                                         ' 0x09 4 on
2bdb7                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
2bdb7                 |                                         ' 0x0B Blinking*
2bdb7                 |                                         ' 0x0C Slow blinking*
2bdb7                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
2bdb7     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
2bdba     00          |                 byte    $00             ' Left rumble
2bdbb     00          |                 byte    $00             ' Right rumble
2bdbc     00 00 00    |                 byte    $00, $00, $00
2bdbf     00          | end
2bdc0                 | alignl
2bdc0                 | 
2bdc0                 | if HAVE_MOUSE
2bdc0     00 00 00 00 
2bdc4     00 00 00 00 | mouse_limits long 0[2]
2bdc8     00 00 00 00 | mouse_outptr long 0
2bdcc                 | end
2bdcc                 | 
2bdcc                 | if KEYQUEUE_SIZE > 0
2bdcc     00          | keyq_head byte 0
2bdcd     00          | keyq_tail byte 0
2bdce     00 00 00 00 
      ...             
2bfca     00 00 00 00 
2bfce     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
2bfd0                 | alignl
2bfd0                 | end
2bfd0                 | 
2bfd0                 | if EMUPAD_MAX_PLAYER > 0
2bfd0                 | emupad_rule_buffer
2bfd0                 | if EMUPAD_BUILTIN_RULES
2bfd0                 | file "padmap_builtin.dat"
2bfd0                 | end
2bfd0                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
2bfd0                 | '' Default rule directly follows!
2bfd0                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
2bfd0                 | end
2bfd0                 | 
2bfd0                 | '------------------------------------------------------------------------------
2bfd0                 | ' The USB data cache area gets zero-filled at every device disconnect
2bfd0                 | '------------------------------------------------------------------------------
2bfd0                 | usb_cache_start
2bfd0                 | 
2bfd0                 | ' HID descriptor and report buffers
2bfd0                 | if !!OVERLAP_MEMORY
2bfd0     00 00 00 00 
      ...             
2c6c8     00 00 00 00 
2c6cc     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
2c6d0                 | end
2c6d0     00 00 00 00 
2c6d4     00 00 00 00 | hkbd_report     byte    0[8]
2c6d8     00 00 00 00 | hkbd_led_rep    byte    0
2c6dc                 | alignl
2c6dc                 | 
2c6dc                 | if HAVE_HIDPAD
2c6dc     00 00 00 00 
      ...             
2c798     00 00 00 00 
2c79c     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
2c7a0                 | end
2c7a0                 | 
2c7a0                 | ' HUB descriptor
2c7a0     00          | hub_descr       byte    0   ' bDescLength
2c7a1     00          |                 byte    0   ' bDescriptorType
2c7a2     00          |                 byte    0   ' bNbrPorts
2c7a3     00 00       |                 word    0   ' wHubCharacteristics
2c7a5     00          |                 byte    0   ' bPwrOn2PwrGood
2c7a6     00          |                 byte    0   ' bHubContrCurrent
2c7a7     00          |                 byte    0   ' DeviceRemoveable
2c7a8     00          |                 byte    0   ' PortPwrCtrlMask
2c7a9                 | 
2c7a9                 | usb_cache_end
2c7a9                 | 
2c7a9                 | if HAVE_MOUSE
2c7a9     00 00 00 00 | mouse_xacc      long 0
2c7ad     00 00 00 00 | mouse_yacc      long 0
2c7b1     00 00 00 00 | mouse_zacc      long 0
2c7b5     00          | mouse_bstate    byte 0
2c7b6     00          | mouse_lpending  byte 0
2c7b7     00          | mouse_rpending  byte 0
2c7b8     00          | mouse_mpending  byte 0
2c7b9     00          | mouse_lock      byte 0
2c7ba     00 00 00    |                 byte 0[3] ' padding
2c7bd                 | end
2c7bd                 | 
2c7bd     00 00 00 00 
      ...             
2c835     00 00 00 00 
2c839     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
2c83d     00 00 00 00 
2c841     00 00 00 00 
2c845     00 00 00 00 
2c849     00 00 00 00 
2c84d     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
2c84f     00 00 00 00 
      ...             
2c947     00 00 00 00 
2c94b     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
2c94f                 | 
2c94f     00          | driver_cog      byte    0                       ' Current driver cog + 1
2c950                 | 	alignl
2c950                 | _Audio093b_8_sc_spin2_dat_
2c950                 | 
2c950                 | audio       org     0
2c950                 | 
2c950     61 85 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
2c954     61 C3 05 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
2c958     61 CF 05 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
2c95c                 | 
2c95c     01 EC 63 FD |             cogid   pa                   ' compute cogid
2c960     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
2c964     F6 85 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
2c968     C2 82 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
2c96c                 | 
2c96c     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
2c970     0E CA 05 FC |             wrpin   dac,#left            ' Noise dither DACs at clk/100
2c974     0E BE 1C FC |             wxpin   #95,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
2c978     0F CA 05 FC |             wrpin   dac,#right
2c97c     0F BE 1C FC |             wxpin   #95,#right    
2c980     41 9C 64 FD |             dirh    #left addpins 1
2c984     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
2c988     A9 E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
2c98c     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
2c990                 |             
2c990                 | '---------------------------------------------------------------------------------        
2c990                 | '----------------- The main loop -------------------------------------------------
2c990                 | '---------------------------------------------------------------------------------
2c990                 | 
2c990     B2 66 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
2c994     10 00 90 CD |       if_c  jmp     #loop1
2c998                 |   
2c998     09 A8 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
2c99c     B2 A8 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
2c9a0     B1 00 80 F1 |             sub     0-0,a40000000
2c9a4     FD A9 6D FB |             djnz    cn,#p402
2c9a8                 |     
2c9a8     00 A8 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
2c9ac     B4 AA 01 F6 |             mov     ct,time1            ' with the lowest next sample time
2c9b0     B5 AA 39 F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
2c9b4     01 A8 05 C6 |     if_c    mov     cn,#1
2c9b8     B6 AA 39 F3 |             fle     ct,time3 wcz
2c9bc     02 A8 05 C6 |     if_c    mov     cn,#2     
2c9c0     B7 AA 39 F3 |             fle     ct,time4 wcz
2c9c4     03 A8 05 C6 |     if_c    mov     cn,#3
2c9c8     B8 AA 39 F3 |             fle     ct,time5 wcz
2c9cc     04 A8 05 C6 |     if_c    mov     cn,#4
2c9d0     B9 AA 39 F3 |             fle     ct,time6 wcz
2c9d4     05 A8 05 C6 |     if_c    mov     cn,#5
2c9d8     BA AA 39 F3 |             fle     ct,time7 wcz
2c9dc     06 A8 05 C6 |     if_c    mov     cn,#6
2c9e0     BB AA 39 F3 |             fle     ct,time8 wcz
2c9e4     07 A8 05 C6 |     if_c    mov     cn,#7
2c9e8                 | 
2c9e8                 | 
2c9e8                 | '----------------------------------------------------------------------------------
2c9e8                 | '------------- Compute channel samples --------------------------------------------
2c9e8                 | '----------------------------------------------------------------------------------
2c9e8                 | 
2c9e8                 | 
2c9e8     D4 78 01 F6 | p401        mov     channeladd,cn             ' compute the pointer to channel parameters block
2c9ec     05 78 65 F0 |             shl     channeladd,#5
2c9f0     BC F0 03 F1 |             add     ptra,channeladd
2c9f4                 | 
2c9f4     28 0E 64 FD |             setq    #7                        ' read parameters
2c9f8     00 8F 05 FB |             rdlong  pointer0,ptra
2c9fc                 | '            testb   command0,#29 wz
2c9fc                 | '    if_nz   jmp     #p408
2c9fc                 | '    	    getword envptr,command0,#0
2c9fc                 | '    	    getbyte envspeed,command0,#2
2c9fc                 | '    	    jmp     #p404                     'if envelope then no sample rate
2c9fc                 |     	    
2c9fc     1F 9C 0D F4 | p408        testb   command0,#31 wz	      ' bit #31 command - set the DAC sample rate
2ca00     18 00 90 5D |     if_nz   jmp     #p404                     ' if not set, proceed
2ca04     CE 7C 31 F9 |             getword qq,command0,#0            ' get the new rate
2ca08     4E 7C 15 FC |             wxpin   qq,#left addpins 1        ' and program the pins
2ca0c     BE 7C E1 F8 |             getbyte qq,qq,#0 		      ' check if the rate is n*256
2ca10     00 7C 0D F2 |             cmp     qq,#0 wz                         
2ca14     4E CC 05 AC |     if_z    wrpin   dac2,#left addpins 1      ' if yes, set PWM DAC mode
2ca18     4E CA 05 5C |     if_nz   wrpin   dac,#left addpins 1       ' else set noise DAC mode
2ca1c                 |             
2ca1c     1E 9C 1D F4 | p404        bitl    command0,#30 wcz             ' bit #30: select PSRAM/HUB
2ca20     C2 82 01 56 |     if_nz   mov     mailbox,mailbox2             ' if not set, use PSRAM
2ca24     00 82 05 A6 |     if_z    mov     mailbox,#0                   ' if set, use HUB : TODO: this can be done at a channel level!
2ca28                 | 
2ca28                 | 
2ca28     C8 AE 31 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
2ca2c     C8 B0 39 F9 |             getword oldrs,sample0,#1
2ca30     CC A4 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
2ca34     CC A2 31 F9 |     	    getword avol0,volpan0,#0
2ca38     CD A0 39 F9 |             getword askip0,freqskip0,#1    	    
2ca3c     CD 9E 31 F9 |             getword afreq0,freqskip0,#0
2ca40                 | 
2ca40     B4 A8 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
2ca44     00 AC 01 F6 |             mov     dt0,0-0    
2ca48     B3 AC 81 F1 |             sub     dt0,time0
2ca4c                 |             
2ca4c     B4 A8 8D F9 |             altd    cn, #time1                ' add channel period to channel time
2ca50     CF 00 00 F1 |             add     0-0,afreq0  	
2ca54                 | 
2ca54     D0 8E 01 F1 |             add     pointer0,askip0           ' compute the pointer to the next sample       
2ca58     C7 EA C1 F8 |             setbyte pointer00,pointer0,#0
2ca5c     08 8E 45 F0 |             shr     pointer0,#8
2ca60                 |          
2ca60     1F 92 0D F4 |             testb   sstart0,#31 wz            
2ca64     01 8E 65 A0 |     if_z    shl     pointer0,#1        
2ca68     1C 92 0D F4 |             testb   sstart0,#28 wz            
2ca6c     01 8E 65 A0 |     if_z    shl     pointer0,#1        
2ca70                 |             
2ca70     CB 8E 19 F2 |             cmp     pointer0,lend0 wcz
2ca74     CB 8E 81 31 |     if_ge   sub     pointer0,lend0	      ' and loop if needed     
2ca78     CA 8E 01 31 |     if_ge   add     pointer0,lstart0       
2ca7c                 |             
2ca7c     C7 7C 01 F6 |             mov     qq,pointer0               ' compute place in the memory from where the sample will be loaded
2ca80     C9 7C 01 F1 |             add     qq,sstart0            
2ca84                 | 
2ca84                 | 
2ca84                 | 
2ca84     FF 83 5D F2 |             cmps    mailbox,#$1FF wcz            ' the mailbox has to point somewhere not at the start of HUB RAM
2ca88     BE 7E E1 EA |     if_le   rdword  spl,qq                     ' if not, use HUB RAM for samples
2ca8c     04 01 B0 1D |     if_gt   call    #cache_read
2ca90                 |          
2ca90                 |          
2ca90                 |  
2ca90                 |          
2ca90     1F 92 0D F4 |             testb   sstart0,#31 wz 
2ca94     08 7E 65 50 |     if_nz   shl     spl,#8
2ca98     08 8E 65 50 |     if_nz   shl     pointer0,#8
2ca9c     07 8E 65 A0 |     if_z    shl     pointer0,#7
2caa0     1C 92 0D F4 |             testb   sstart0,#28 wz            
2caa4     01 8E 45 A0 |     if_z    shr     pointer0,#1    
2caa8     F5 8E C1 F8 | 	    setbyte pointer0,pointer00,#0       
2caac                 |     
2caac                 | 
2caac     D1 7E 31 FA | p406        scas    spl,avol0                 ' apply volume
2cab0     00 7E 01 F6 |             mov     spl,0-0
2cab4                 |  
2cab4     D2 7E 31 FA |             scas    spl,apan0                 ' apply pan
2cab8     00 B2 01 F6 |             mov     ls0,0-0
2cabc     20 00 00 FF 
2cac0     00 7C 05 F6 |             mov     qq,##16384
2cac4     D2 7C 81 F1 |             sub     qq,apan0
2cac8     BE 7E 31 FA |             scas    spl,qq
2cacc     00 B4 01 F6 |             mov     rs0, 0-0
2cad0                 | 
2cad0     D8 B8 81 F1 |             sub     rs,oldrs 		      ' replace the old sample with the new one in the mix
2cad4     DA B8 01 F1 |             add     rs,rs0
2cad8     D7 B6 81 F1 |             sub     ls,oldls
2cadc     D9 B6 01 F1 |             add     ls,ls0
2cae0                 |    
2cae0     DA 90 29 F9 |             setword sample0,rs0,#1           ' pack samples into long
2cae4     D9 90 21 F9 |             setword sample0,ls0,#0
2cae8                 |             
2cae8     1E 92 1D F4 |             bitl    sstart0, #30 wcz          ' if bit #30 of start pointer is set, the current pointer needs resetting  
2caec     00 8E 05 A6 |     if_z    mov     pointer0, #0  
2caf0     02 93 65 AC |     if_z    wrlong  sstart0, ptra[2]          ' reset bit #30 in hub
2caf4     1D 92 1D F4 |             bitl    sstart0, #29 wcz	      ' if bit #29 is set, synchronize stereo at channels 1 and 2
2caf8     04 00 00 AF 
2cafc     00 68 05 A1 |     if_z    add     time1,##2048
2cb00     B4 6A 01 A6 |     if_z    mov     time2,time1
2cb04     02 93 65 AC |     if_z    wrlong  sstart0,ptra[2]
2cb08                 |             
2cb08     28 02 64 FD | p403        setq #1                          ' write new pointer and sample value to the hub
2cb0c     00 8F 65 FC |             wrlong  pointer0,ptra
2cb10     BC F0 83 F1 |             sub     ptra, channeladd         ' reset the pointer to channel parameters
2cb14                 |                       
2cb14     B3 A6 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
2cb18     FF 7B 25 A7 |     if_z    decmod  front, #511          
2cb1c                 |          
2cb1c     DB AE 31 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
2cb20     DC B0 31 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
2cb24     0F AE E5 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
2cb28     0F B0 E5 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
2cb2c                 | 	    
2cb2c                 | 		    
2cb2c     D7 B0 29 F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
2cb30     DE BA 01 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
2cb34     D8 BC 01 F6 |             mov     newsample, oldrs       
2cb38                 | 
2cb38     B3 A6 01 F6 |             mov     oldt0,time0              ' update global time
2cb3c     D6 66 01 F1 |             add     time0,dt0    
2cb40                 |                                      
2cb40     00 AC 0D F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
2cb44     60 FE 9F AD |     if_z    jmp     #loop1
2cb48     D6 7C 01 F6 |             mov     qq,dt0
2cb4c                 |   
2cb4c     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
2cb50     00 7A 9D F2 |             cmpr    front, #0-0 wcz
2cb54     F4 FF 9F AD |     if_e    jmp     #p301    
2cb58                 | 		
2cb58     00 C2 0D F2 | 	    cmp     scbase,#0 wz
2cb5c     20 00 90 AD |     if_z    jmp #p302	   
2cb60                 |  
2cb60                 |  
2cb60     3F C8 15 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
2cb64     E2 C6 01 C6 |     if_c    mov scptr2,scptr
2cb68     02 C6 65 C0 |     if_c    shl scptr2,#2
2cb6c     E1 C6 01 C1 |     if_c    add scptr2,scbase     
2cb70     60 C6 65 FC |             wrlong scptr2,#$60
2cb74     E3 BA 61 CC |     if_c    wrlong oldsample,scptr2
2cb78     01 00 00 CF 
2cb7c     7F C4 05 C7 |     if_c    incmod scptr,##639
2cb80                 | 			    
2cb80     BD BA 31 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
2cb84     00 00 00 FF 
2cb88     FF 7B 05 F7 |             incmod  front, ##511
2cb8c     EF 7D 6D FB |             djnz    qq,#p301
2cb90                 |             
2cb90     FC FD 9F FD |             jmp     #loop            'loop
2cb94                 | 
2cb94                 | '----------------------------------------------------------------------------------
2cb94                 | '------------- This is the end of the main loop -----------------------------------
2cb94                 | '----------------------------------------------------------------------------------
2cb94                 | 
2cb94                 | '----------------------------------------------------------------------------------
2cb94                 | '------------- PSRAM cache ----------- --------------------------------------------
2cb94                 | '----------------------------------------------------------------------------------
2cb94                 | 
2cb94                 | ' There are 8 cache pointers for 8 channels
2cb94                 | ' if 24 higher bits of address=cache, then ger a word from the cache
2cb94                 | ' else load the cache from PSRAM, update the pointer, then read a sample
2cb94                 | 
2cb94                 | 
2cb94     BE E6 E1 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
2cb98                 |             
2cb98     BE E8 01 F6 | 	    mov     addrhi,qq		
2cb9c     08 E8 45 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
2cba0     E8 A8 95 F9 | 	    alts    cn,#cache1            
2cba4     00 E8 09 F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
2cba8     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
2cbac                 | 	
2cbac     E8 A8 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
2cbb0     F4 00 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
2cbb4     F4 E0 01 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
2cbb8     08 E0 65 F0 | 	    shl     cmd,#8
2cbbc     0B E0 3D F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
2cbc0     D4 E2 01 F6 |             mov     hubaddr,cn                  ' to the channel cache
2cbc4     08 E2 65 F0 |             shl     hubaddr,#8                  '
2cbc8     E7 E2 01 F1 |             add     hubaddr,hubptr 
2cbcc     00 E5 05 F6 |             mov     count,#256                  ' 256 bytes
2cbd0     28 04 64 FD |             setq    #2                          ' write 3 longs
2cbd4     C1 E0 61 FC |             wrlong  cmd, mailbox                ' run it
2cbd8     C1 E0 01 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
2cbdc     FE E1 B5 FB |             tjs     cmd, #poll1                 ' retry until valid 
2cbe0                 |             
2cbe0                 | 	
2cbe0     D4 7C 01 F6 | p701	    mov     qq,cn			' cache hit
2cbe4     08 7C 65 F0 | 	    shl     qq,#8			' compute the cache start
2cbe8     E7 7C 01 F1 | 	    add     qq,hubptr
2cbec     F3 7C 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
2cbf0     BE 7E E1 0A |     _ret_   rdword  spl,qq                      ' read a word
2cbf4                 |           
2cbf4                 | 
2cbf4                 | '--------------------------------------------------------------------------
2cbf4                 | '------ Interrupt service -------------------------------------------------
2cbf4                 | '------ Output the sample, get the next one if exists ---------------------
2cbf4                 | '--------------------------------------------------------------------------
2cbf4                 | 
2cbf4     0E 86 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 100 cycles     
2cbf8     0F 88 25 FC |             wypin   rsample,#right       '4
2cbfc     BD F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
2cc00     80 8B A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
2cc04     FF F3 07 57 |     if_ne   incmod  ptrb,#511
2cc08     C5 88 39 59 |     if_ne   getword rsample,lsnext,#1    '13
2cc0c     C5 86 31 59 |     if_ne   getword lsample,lsnext,#0    '15
2cc10                 |     
2cc10     F5 FF 3B FB |             reti1                        '17/19 
2cc14                 |           
2cc14                 | '---------------------------------------------------------------------------
2cc14                 | '-------- End of interrupt -------------------------------------------------
2cc14                 | '---------------------------------------------------------------------------    
2cc14                 | 
2cc14                 | 
2cc14                 | '---------------------------------------------------------------------------
2cc14                 | '------- Variables ---------------------------------------------------------
2cc14                 | '---------------------------------------------------------------------------
2cc14                 | 
2cc14                 | ' constants
2cc14                 | 
2cc14     00 00 00 40 | a40000000   long $40000000
2cc18     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
2cc1c                 | 
2cc1c                 | ' Time variables
2cc1c                 | 
2cc1c     00 00 00 00 | time0       long 0    ' Global sample computing time
2cc20     01 00 00 00 | time1       long 1    ' Local channels time
2cc24     02 00 00 00 | time2       long 2
2cc28     03 00 00 00 | time3       long 3
2cc2c     04 00 00 00 | time4       long 4
2cc30     05 00 00 00 | time5       long 5
2cc34     06 00 00 00 | time6       long 6
2cc38     07 00 00 00 | time7       long 7
2cc3c     08 00 00 00 | time8       long 8
2cc40                 | 
2cc40     00 00 00 00 | channeladd long 0
2cc44                 | 
2cc44     00 00 00 00 | front       long 0
2cc48                 | 
2cc48                 | ' temporary variables 
2cc48     00 00 00 00 | qq          long 0
2cc4c     00 00 00 00 | spl         long 0
2cc50     00 00 00 00 | zero        long 0
2cc54     00 00 00 00 | mailbox     long 0
2cc58     00 00 00 00 | mailbox2 long 0
2cc5c                 | 
2cc5c                 | ' Interrupt ISR variables
2cc5c                 | 
2cc5c     00 00 00 00 | lsample     long 0
2cc60     00 00 00 00 | rsample     long 0
2cc64     00 00 00 00 | lsnext      long 0
2cc68     00 00 00 00 | rsnext      long 0 
2cc6c                 | 
2cc6c                 | ' channel parameter block
2cc6c                 | 
2cc6c     00 00 00 00 | pointer0    long 0     
2cc70     00 00 00 00 | sample0     long 0
2cc74     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
2cc78     00 00 00 00 | lstart0     long 0
2cc7c     00 00 00 00 | lend0       long 0
2cc80     00 00 00 00 | volpan0     long 0
2cc84     00 00 00 00 | freqskip0   long 0
2cc88     00 00 00 00 | command0    long 0
2cc8c                 | 
2cc8c     00 00 00 00 | afreq0      long 0
2cc90     00 00 00 00 | askip0      long 0
2cc94     00 00 00 00 | avol0       long 0
2cc98     00 00 00 00 | apan0       long 0
2cc9c                 | 
2cc9c     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
2cca0     00 00 00 00 | cn          long 0
2cca4     00 00 00 00 | ct          long 0
2cca8     00 00 00 00 | dt0         long 0
2ccac                 | 
2ccac                 | ' Samples
2ccac     00 00 00 00 | oldls       long 0
2ccb0     00 00 00 00 | oldrs       long 0
2ccb4                 | 
2ccb4     00 00 00 00 | ls0         long 0
2ccb8     00 00 00 00 | rs0         long 0
2ccbc                 | 
2ccbc     00 00 00 00 | ls          long 0    
2ccc0     00 00 00 00 | rs          long 0
2ccc4                 | 
2ccc4     00 00 00 00 | oldsample   long 0
2ccc8     00 00 00 00 | newsample   long 0
2cccc                 | 
2cccc     00 00 00 00 | nrsample    long 0
2ccd0     00 00 00 00 | nlsample    long 0
2ccd4                 | 
2ccd4     00 00 00 00 | scbase long 0
2ccd8     00 00 00 00 | scptr long 0
2ccdc     00 00 00 00 | scptr2 long 0
2cce0     00 00 00 00 | scope long 0
2cce4                 | 
2cce4     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
2cce8     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
2ccec                 | 
2ccec     00 18 07 00 | hubptr      long $71800
2ccf0     00 00 00 00 | cache1      long 0
2ccf4     00 00 00 00 | cache2      long 0
2ccf8     00 00 00 00 | cache3      long 0
2ccfc     00 00 00 00 | cache4      long 0
2cd00     00 00 00 00 | cache5      long 0
2cd04     00 00 00 00 | cache6      long 0
2cd08     00 00 00 00 | cache7      long 0
2cd0c     00 00 00 00 | cache8      long 0
2cd10                 | 
2cd10                 | 
2cd10     00 00 00 00 | cmd         long 0
2cd14     00 00 00 00 | hubaddr     long 0
2cd18     00 01 00 00 | count       long 256
2cd1c     00 00 00 00 | addrlo long 0
2cd20     00 00 00 00 | addrhi long 0
2cd24     00 00 00 00 | pointer00 long 0
2cd28     00 00 00 00 
2cd2c     00 00 00 00 | null  			long 	0,0           ' for channel reset
2cd30                 | 	alignl
2cd30                 | __system__dat_
2cd30     00 00 00 00 
2cd34     00 00 00 00 | 	byte	$00[8]
2cd38     03 00 00 00 
2cd3c     00 00 00 00 
2cd40     00 00 00 00 
2cd44     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2cd48     00 00 00 00 
      ...             
2cfd4     00 00 00 00 
2cfd8     00 00 00 00 | 	byte	$00[660]
2cfdc     00 00 C0 05 | 	long	(92 {__system____root_opendir})<<20
2cfe0     00 00 D0 05 | 	long	(93 {__system____root_closedir})<<20
2cfe4     00 00 E0 05 | 	long	(94 {__system____root_readdir})<<20
2cfe8     00 00 F0 05 | 	long	(95 {__system____root_stat})<<20
2cfec     00 00 00 00 
2cff0     00 00 00 00 
2cff4     00 00 00 00 
2cff8     00 00 00 00 
2cffc     00 00 00 00 
2d000     00 00 00 00 
2d004     00 00 00 00 | 	byte	$00[28]
2d008     70 D0 02 00 | 	long	@@@__system__dat_ + 832
2d00c     73 D0 02 00 | 	long	@@@__system__dat_ + 835
2d010     94 D0 02 00 | 	long	@@@__system__dat_ + 868
2d014     AD D0 02 00 | 	long	@@@__system__dat_ + 893
2d018     C8 D0 02 00 | 	long	@@@__system__dat_ + 920
2d01c     E2 D0 02 00 | 	long	@@@__system__dat_ + 946
2d020     F2 D0 02 00 | 	long	@@@__system__dat_ + 962
2d024     04 D1 02 00 | 	long	@@@__system__dat_ + 980
2d028     16 D1 02 00 | 	long	@@@__system__dat_ + 998
2d02c     28 D1 02 00 | 	long	@@@__system__dat_ + 1016
2d030     34 D1 02 00 | 	long	@@@__system__dat_ + 1028
2d034     45 D1 02 00 | 	long	@@@__system__dat_ + 1045
2d038     59 D1 02 00 | 	long	@@@__system__dat_ + 1065
2d03c     63 D1 02 00 | 	long	@@@__system__dat_ + 1075
2d040     73 D1 02 00 | 	long	@@@__system__dat_ + 1091
2d044     82 D1 02 00 | 	long	@@@__system__dat_ + 1106
2d048     98 D1 02 00 | 	long	@@@__system__dat_ + 1128
2d04c     B1 D1 02 00 | 	long	@@@__system__dat_ + 1153
2d050     C5 D1 02 00 | 	long	@@@__system__dat_ + 1173
2d054     D3 D1 02 00 | 	long	@@@__system__dat_ + 1187
2d058     E7 D1 02 00 | 	long	@@@__system__dat_ + 1207
2d05c     F3 D1 02 00 | 	long	@@@__system__dat_ + 1219
2d060     05 D2 02 00 | 	long	@@@__system__dat_ + 1237
2d064     1D D2 02 00 | 	long	@@@__system__dat_ + 1261
2d068     2F D2 02 00 | 	long	@@@__system__dat_ + 1279
2d06c     42 D2 02 00 | 	long	@@@__system__dat_ + 1298
2d070     4F 4B 00 4E 
2d074     75 6D 65 72 
2d078     69 63 61 6C 
2d07c     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
2d080     75 6D 65 6E 
2d084     74 20 6F 75 
2d088     74 20 6F 66 
2d08c     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
2d090     61 69 6E 00 
2d094     52 65 73 75 
2d098     6C 74 20 6E 
2d09c     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
2d0a0     65 70 72 65 
2d0a4     73 65 6E 74 
2d0a8     61 62 6C 65 
2d0ac     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
2d0b0     65 67 61 6C 
2d0b4     20 6D 75 6C 
2d0b8     74 69 62 79 
2d0bc     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
2d0c0     65 71 75 65 
2d0c4     6E 63 65 00 
2d0c8     4E 6F 20 73 
2d0cc     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
2d0d0     66 69 6C 65 
2d0d4     20 6F 72 20 
2d0d8     64 69 72 65 
2d0dc     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
2d0e0     79 00 42 61 
2d0e4     64 20 66 69 
2d0e8     6C 65 20 6E 
2d0ec     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
2d0f0     72 00 50 65 
2d0f4     72 6D 69 73 
2d0f8     73 69 6F 6E 
2d0fc     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
2d100     69 65 64 00 
2d104     4E 6F 74 20 
2d108     65 6E 6F 75 
2d10c     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
2d110     65 6D 6F 72 
2d114     79 00 54 65 
2d118     6D 70 6F 72 
2d11c     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
2d120     66 61 69 6C 
2d124     75 72 65 00 
2d128     46 69 6C 65 
2d12c     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
2d130     73 74 73 00 
2d134     49 6E 76 61 
2d138     6C 69 64 20 
2d13c     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
2d140     6D 65 6E 74 
2d144     00 54 6F 6F 
2d148     20 6D 61 6E 
2d14c     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
2d150     65 6E 20 66 
2d154     69 6C 65 73 
2d158     00 49 2F 4F 
2d15c     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
2d160     6F 72 00 4E 
2d164     6F 74 20 61 
2d168     20 64 69 72 
2d16c     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
2d170     72 79 00 49 
2d174     73 20 61 20 
2d178     64 69 72 65 
2d17c     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
2d180     79 00 52 65 
2d184     61 64 20 6F 
2d188     6E 6C 79 20 
2d18c     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
2d190     20 73 79 73 
2d194     74 65 6D 00 
2d198     46 75 6E 63 
2d19c     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
2d1a0     20 6E 6F 74 
2d1a4     20 69 6D 70 
2d1a8     6C 65 6D 65 
2d1ac     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
2d1b0     00 44 69 72 
2d1b4     65 63 74 6F 
2d1b8     72 79 20 6E 
2d1bc     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
2d1c0     6D 70 74 79 
2d1c4     00 4E 61 6D 
2d1c8     65 20 74 6F 
2d1cc     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
2d1d0     6E 67 00 44 
2d1d4     65 76 69 63 
2d1d8     65 20 6E 6F 
2d1dc     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
2d1e0     65 6B 61 62 
2d1e4     6C 65 00 42 
2d1e8     61 64 20 61 
2d1ec     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
2d1f0     73 73 00 42 
2d1f4     72 6F 6B 65 
2d1f8     6E 20 63 6F 
2d1fc     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
2d200     74 69 6F 6E 
2d204     00 44 65 76 
2d208     69 63 65 20 
2d20c     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
2d210     65 73 6F 75 
2d214     72 63 65 20 
2d218     62 75 73 79 
2d21c     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
2d220     73 73 20 64 
2d224     65 76 69 63 
2d228     65 20 6C 69 
2d22c     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
2d230     6F 20 73 70 
2d234     61 63 65 20 
2d238     6F 6E 20 64 
2d23c     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
2d240     65 00 55 6E 
2d244     6B 6E 6F 77 
2d248     6E 20 65 72 
2d24c     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
2d250     00 00 00 00 
2d254     00 00 00 00 | 	byte	$00[8]
2d258     05 00 00 00 
2d25c     00 00 00 00 
2d260     00 00 00 00 
2d264     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2d268     00 00 00 00 | 	byte	$00, $00, $00, $00
2d26c     00 00 40 07 | 	long	(116 {__system___tx})<<20
2d270     00 00 50 07 | 	long	(117 {__system___rx})<<20
2d274     00 00 00 00 | 	byte	$00, $00, $00, $00
2d278     00 00 60 07 | 	long	(118 {__system___rxtxioctl_0524})<<20
2d27c     00 00 70 07 | 	long	(119 {__system____dummy_flush_0525})<<20
2d280     00 00 00 00 
2d284     00 00 00 00 | 	byte	$00[8]
2d288     01 00 00 00 
2d28c     06 00 00 00 
2d290     00 00 00 00 
2d294     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2d298     00 00 00 00 
2d29c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
2d2a0     00 00 40 07 | 	long	(116 {__system___tx})<<20
2d2a4     00 00 50 07 | 	long	(117 {__system___rx})<<20
2d2a8     00 00 00 00 | 	byte	$00, $00, $00, $00
2d2ac     00 00 60 07 | 	long	(118 {__system___rxtxioctl_0524})<<20
2d2b0     00 00 70 07 | 	long	(119 {__system____dummy_flush_0525})<<20
2d2b4     00 00 00 00 
2d2b8     00 00 00 00 | 	byte	$00[8]
2d2bc     01 00 00 00 
2d2c0     06 00 00 00 
2d2c4     00 00 00 00 
2d2c8     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2d2cc     00 00 00 00 
2d2d0     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
2d2d4     00 00 40 07 | 	long	(116 {__system___tx})<<20
2d2d8     00 00 50 07 | 	long	(117 {__system___rx})<<20
2d2dc     00 00 00 00 | 	byte	$00, $00, $00, $00
2d2e0     00 00 60 07 | 	long	(118 {__system___rxtxioctl_0524})<<20
2d2e4     00 00 70 07 | 	long	(119 {__system____dummy_flush_0525})<<20
2d2e8     00 00 00 00 
      ...             
2d458     00 00 00 00 
2d45c     00 00 00 00 | 	byte	$00[376]
2d460     64 D4 02 00 | 	long	@@@__system__dat_ + 1844
2d464     00 00 00 00 
2d468     00 00 00 00 
2d46c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2d470                 | 	alignl
2d470                 | _fatfs_cc_dat_
2d470     C7 00 FC 00 
2d474     E9 00 E2 00 
2d478     E4 00 E0 00 
2d47c     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
2d480     EA 00 EB 00 
2d484     E8 00 EF 00 
2d488     EE 00 EC 00 
2d48c     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
2d490     C9 00 E6 00 
2d494     C6 00 F4 00 
2d498     F6 00 F2 00 
2d49c     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
2d4a0     FF 00 D6 00 
2d4a4     DC 00 F8 00 
2d4a8     A3 00 D8 00 
2d4ac     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
2d4b0     E1 00 ED 00 
2d4b4     F3 00 FA 00 
2d4b8     F1 00 D1 00 
2d4bc     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
2d4c0     BF 00 AE 00 
2d4c4     AC 00 BD 00 
2d4c8     BC 00 A1 00 
2d4cc     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
2d4d0     91 25 92 25 
2d4d4     93 25 02 25 
2d4d8     24 25 C1 00 
2d4dc     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
2d4e0     A9 00 63 25 
2d4e4     51 25 57 25 
2d4e8     5D 25 A2 00 
2d4ec     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
2d4f0     14 25 34 25 
2d4f4     2C 25 1C 25 
2d4f8     00 25 3C 25 
2d4fc     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
2d500     5A 25 54 25 
2d504     69 25 66 25 
2d508     60 25 50 25 
2d50c     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
2d510     F0 00 D0 00 
2d514     CA 00 CB 00 
2d518     C8 00 31 01 
2d51c     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
2d520     CF 00 18 25 
2d524     0C 25 88 25 
2d528     84 25 A6 00 
2d52c     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
2d530     D3 00 DF 00 
2d534     D4 00 D2 00 
2d538     F5 00 D5 00 
2d53c     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
2d540     DE 00 DA 00 
2d544     DB 00 D9 00 
2d548     FD 00 DD 00 
2d54c     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
2d550     AD 00 B1 00 
2d554     17 20 BE 00 
2d558     B6 00 A7 00 
2d55c     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
2d560     B0 00 A8 00 
2d564     B7 00 B9 00 
2d568     B3 00 B2 00 
2d56c     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
2d570     61 00 1A 03 
2d574     E0 00 17 03 
2d578     F8 00 07 03 
2d57c     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
2d580     78 01 00 01 
2d584     30 01 32 01 
2d588     06 01 39 01 
2d58c     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
2d590     2E 01 79 01 
2d594     06 01 80 01 
2d598     4D 00 43 02 
2d59c     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
2d5a0     82 01 84 01 
2d5a4     84 01 86 01 
2d5a8     87 01 87 01 
2d5ac     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
2d5b0     8B 01 8B 01 
2d5b4     8D 01 8E 01 
2d5b8     8F 01 90 01 
2d5bc     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
2d5c0     93 01 94 01 
2d5c4     F6 01 96 01 
2d5c8     97 01 98 01 
2d5cc     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
2d5d0     9B 01 9C 01 
2d5d4     9D 01 20 02 
2d5d8     9F 01 A0 01 
2d5dc     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
2d5e0     A2 01 A4 01 
2d5e4     A4 01 A6 01 
2d5e8     A7 01 A7 01 
2d5ec     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
2d5f0     AB 01 AC 01 
2d5f4     AC 01 AE 01 
2d5f8     AF 01 AF 01 
2d5fc     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
2d600     B3 01 B3 01 
2d604     B5 01 B5 01 
2d608     B7 01 B8 01 
2d60c     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
2d610     BB 01 BC 01 
2d614     BC 01 BE 01 
2d618     F7 01 C0 01 
2d61c     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
2d620     C3 01 C4 01 
2d624     C5 01 C4 01 
2d628     C7 01 C8 01 
2d62c     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
2d630     CB 01 CA 01 
2d634     CD 01 10 01 
2d638     DD 01 01 00 
2d63c     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
2d640     12 01 F3 01 
2d644     03 00 F1 01 
2d648     F4 01 F4 01 
2d64c     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
2d650     22 02 12 01 
2d654     3A 02 09 00 
2d658     65 2C 3B 02 
2d65c     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
2d660     66 2C 3F 02 
2d664     40 02 41 02 
2d668     41 02 46 02 
2d66c     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
2d670     40 00 81 01 
2d674     86 01 55 02 
2d678     89 01 8A 01 
2d67c     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
2d680     5A 02 90 01 
2d684     5C 02 5D 02 
2d688     5E 02 5F 02 
2d68c     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
2d690     62 02 94 01 
2d694     64 02 65 02 
2d698     66 02 67 02 
2d69c     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
2d6a0     6A 02 62 2C 
2d6a4     6C 02 6D 02 
2d6a8     6E 02 9C 01 
2d6ac     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
2d6b0     9D 01 73 02 
2d6b4     74 02 9F 01 
2d6b8     76 02 77 02 
2d6bc     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
2d6c0     7A 02 7B 02 
2d6c4     7C 02 64 2C 
2d6c8     7E 02 7F 02 
2d6cc     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
2d6d0     82 02 A9 01 
2d6d4     84 02 85 02 
2d6d8     86 02 87 02 
2d6dc     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
2d6e0     B1 01 B2 01 
2d6e4     45 02 8D 02 
2d6e8     8E 02 8F 02 
2d6ec     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
2d6f0     B7 01 7B 03 
2d6f4     03 00 FD 03 
2d6f8     FE 03 FF 03 
2d6fc     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
2d700     86 03 88 03 
2d704     89 03 8A 03 
2d708     B1 03 11 03 
2d70c     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
2d710     A3 03 A3 03 
2d714     C4 03 08 03 
2d718     CC 03 03 00 
2d71c     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
2d720     8F 03 D8 03 
2d724     18 01 F2 03 
2d728     0A 00 F9 03 
2d72c     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
2d730     F5 03 F6 03 
2d734     F7 03 F7 03 
2d738     F9 03 FA 03 
2d73c     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
2d740     20 03 50 04 
2d744     10 07 60 04 
2d748     22 01 8A 04 
2d74c     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
2d750     0E 01 CF 04 
2d754     01 00 C0 04 
2d758     D0 04 44 01 
2d75c     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
2d760     00 00 7D 1D 
2d764     01 00 63 2C 
2d768     00 1E 96 01 
2d76c     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
2d770     00 1F 08 06 
2d774     10 1F 06 06 
2d778     20 1F 08 06 
2d77c     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
2d780     40 1F 06 06 
2d784     51 1F 07 00 
2d788     59 1F 52 1F 
2d78c     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
2d790     5D 1F 56 1F 
2d794     5F 1F 60 1F 
2d798     08 06 70 1F 
2d79c     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
2d7a0     BB 1F C8 1F 
2d7a4     C9 1F CA 1F 
2d7a8     CB 1F DA 1F 
2d7ac     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
2d7b0     F9 1F EA 1F 
2d7b4     EB 1F FA 1F 
2d7b8     FB 1F 80 1F 
2d7bc     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
2d7c0     08 06 A0 1F 
2d7c4     08 06 B0 1F 
2d7c8     04 00 B8 1F 
2d7cc     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
2d7d0     BC 1F CC 1F 
2d7d4     01 00 C3 1F 
2d7d8     D0 1F 02 06 
2d7dc     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
2d7e0     E5 1F 01 00 
2d7e4     EC 1F F3 1F 
2d7e8     01 00 FC 1F 
2d7ec     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
2d7f0     32 21 70 21 
2d7f4     10 02 84 21 
2d7f8     01 00 83 21 
2d7fc     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
2d800     30 2C 2F 04 
2d804     60 2C 02 01 
2d808     67 2C 06 01 
2d80c     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
2d810     80 2C 64 01 
2d814     00 2D 26 08 
2d818     41 FF 1A 03 
2d81c     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
2d820     05 07 09 0E 
2d824     10 12 14 16 
2d828     18 1C 1E 43 
2d82c     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
2d830     41 41 43 45 
2d834     45 45 49 49 
2d838     49 41 41 45 
2d83c     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
2d840     4F 55 55 59 
2d844     4F 55 4F 9C 
2d848     4F 9E 9F 41 
2d84c     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
2d850     A5 A6 A7 A8 
2d854     A9 AA AB AC 
2d858     AD AE AF B0 
2d85c     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
2d860     41 41 41 B8 
2d864     B9 BA BB BC 
2d868     BD BE BF C0 
2d86c     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
2d870     C5 41 41 C8 
2d874     C9 CA CB CC 
2d878     CD CE CF D1 
2d87c     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
2d880     49 49 49 49 
2d884     D9 DA DB DC 
2d888     DD 49 DF 4F 
2d88c     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
2d890     4F E6 E8 E8 
2d894     55 55 55 59 
2d898     59 EE EF F0 
2d89c     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
2d8a0     F5 F6 F7 F8 
2d8a4     F9 FA FB FC 
2d8a8     FD FE FF 00 
2d8ac     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
2d8b0     00 00 00 00 | 	byte	$00, $00, $00, $00
2d8b4     00 00 30 06 | 	long	(99 {_fatfs_cc_v_close})<<20
2d8b8     00 00 40 06 | 	long	(100 {_fatfs_cc_v_read})<<20
2d8bc     00 00 50 06 | 	long	(101 {_fatfs_cc_v_write})<<20
2d8c0     00 00 60 06 | 	long	(102 {_fatfs_cc_v_lseek})<<20
2d8c4     00 00 70 06 | 	long	(103 {_fatfs_cc_v_ioctl})<<20
2d8c8     00 00 80 07 | 	long	(120 {_fatfs_cc_v_flush})<<20
2d8cc     00 00 00 00 
2d8d0     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
2d8d4     00 00 80 06 | 	long	(104 {_fatfs_cc_v_open})<<20
2d8d8     00 00 90 06 | 	long	(105 {_fatfs_cc_v_creat})<<20
2d8dc     00 00 A0 06 | 	long	(106 {_fatfs_cc_v_opendir})<<20
2d8e0     00 00 B0 06 | 	long	(107 {_fatfs_cc_v_closedir})<<20
2d8e4     00 00 C0 06 | 	long	(108 {_fatfs_cc_v_readdir})<<20
2d8e8     00 00 D0 06 | 	long	(109 {_fatfs_cc_v_stat})<<20
2d8ec     00 00 E0 06 | 	long	(110 {_fatfs_cc_v_mkdir})<<20
2d8f0     00 00 F0 06 | 	long	(111 {_fatfs_cc_v_rmdir})<<20
2d8f4     00 00 00 07 | 	long	(112 {_fatfs_cc_v_remove})<<20
2d8f8     00 00 10 07 | 	long	(113 {_fatfs_cc_v_rename})<<20
2d8fc     00 00 20 07 | 	long	(114 {_fatfs_cc_v_init})<<20
2d900     00 00 30 07 | 	long	(115 {_fatfs_cc_v_deinit})<<20
2d904     FF FF FF FF 
2d908     1F 00 00 00 
2d90c     1C 00 00 00 
2d910     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
2d914     1E 00 00 00 
2d918     1F 00 00 00 
2d91c     1E 00 00 00 
2d920     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
2d924     1F 00 00 00 
2d928     1E 00 00 00 
2d92c     1F 00 00 00 
2d930     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
2d934     1F 00 00 00 
2d938     00 00 00 00 
2d93c     1F 00 00 00 
2d940     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
2d944     5A 00 00 00 
2d948     78 00 00 00 
2d94c     97 00 00 00 
2d950     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
2d954     D4 00 00 00 
2d958     F3 00 00 00 
2d95c     11 01 00 00 
2d960     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
2d964     4E 01 00 00 
2d968     6D 01 00 00 
2d96c     FF FF FF FF 
2d970     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
2d974     00 00 00 00 
      ...             
2d98c     00 00 00 00 
2d990     00 00 00 00 | 	byte	$00[32]
2d994     B2 D9 02 00 | 	long	@@@_fatfs_cc_dat_ + 1346
2d998     B6 D9 02 00 | 	long	@@@_fatfs_cc_dat_ + 1350
2d99c     00 00 00 00 
2d9a0     00 00 00 00 
2d9a4     00 00 00 00 
2d9a8     00 00 00 00 
2d9ac     00 00       | 	byte	$00[18]
2d9ae     3F 3F 3F 00 
2d9b2     55 43 54 00 
2d9b6     55 43 54 00 
2d9ba     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
2d9be     00 00 00 00 
2d9c2     00 00 00    | 	byte	$00[7]
2d9c5     CA 9A 3B 00 
2d9c9     00 00 00 01 
2d9cd     01 01 01 01 
2d9d1     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
2d9d5     91 11 11 11 
2d9d9     11 01 01 01 
2d9dd     01 01 01 01 
2d9e1     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
2d9e5     01 01 01 01 
2d9e9     01 01 01    | 	byte	$01[7]
2d9ec     90 20 20 20 
2d9f0     20 20 20 20 
2d9f4     20 20 20 20 
2d9f8     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
2d9fc     42 42 42 42 
2da00     42 42 42 42 
2da04     42 42       | 	byte	$42[10]
2da06     20 20 20 20 
2da0a     20 20 20    | 	byte	$20[7]
2da0d     44 44 44 44 
2da11     44 44       | 	byte	$44[6]
2da13     04 04 04 04 
2da17     04 04 04 04 
2da1b     04 04 04 04 
2da1f     04 04 04 04 
2da23     04 04 04 04 | 	byte	$04[20]
2da27     20 20 20 20 
2da2b     20 20       | 	byte	$20[6]
2da2d     48 48 48 48 
2da31     48 48       | 	byte	$48[6]
2da33     08 08 08 08 
2da37     08 08 08 08 
2da3b     08 08 08 08 
2da3f     08 08 08 08 
2da43     08 08 08 08 | 	byte	$08[20]
2da47     20 20 20 20 
2da4b     01 00 00 00 
2da4f     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
2da50                 | __methodtable__
2da50     8C 13 01 00 | 	long	@_do_no_command
2da54     18 B3 00 00 | 	long	@_do_plus
2da58     F8 B6 00 00 | 	long	@_do_minus
2da5c     C0 BB 00 00 | 	long	@_do_or
2da60     D8 BC 00 00 | 	long	@_do_mul
2da64     64 C2 00 00 | 	long	@_do_fdiv
2da68     A8 BA 00 00 | 	long	@_do_and
2da6c     44 C0 00 00 | 	long	@_do_div
2da70     2C C4 00 00 | 	long	@_do_mod
2da74     4C C6 00 00 | 	long	@_do_shl
2da78     64 C7 00 00 | 	long	@_do_shr
2da7c     7C C8 00 00 | 	long	@_do_power
2da80     8C AD 00 00 | 	long	@_do_getvar
2da84     EC 8A 00 00 | 	long	@_do_push
2da88     D4 A6 00 00 | 	long	@_do_assign
2da8c     E4 F1 00 00 | 	long	@_do_cls
2da90     04 A1 00 00 | 	long	@_do_new
2da94     88 F2 00 00 | 	long	@_do_plot
2da98     C0 F3 00 00 | 	long	@_do_draw
2da9c     A8 FD 00 00 | 	long	@_do_print
2daa0     A0 F6 00 00 | 	long	@_do_circle
2daa4     28 F5 00 00 | 	long	@_do_fcircle
2daa8     18 F8 00 00 | 	long	@_do_box
2daac     C0 FB 00 00 | 	long	@_do_frame
2dab0     50 F2 00 00 | 	long	@_do_color
2dab4     F0 6A 00 00 | 	long	@_do_for
2dab8     1C 6D 00 00 | 	long	@_do_next
2dabc     68 9E 00 00 | 	long	@_do_list
2dac0     3C 9B 00 00 | 	long	@_do_run
2dac4     90 A5 00 00 | 	long	@_do_error
2dac8     8C A2 00 00 | 	long	@_do_fast_goto
2dacc     7C A3 00 00 | 	long	@_do_find_goto
2dad0     8C A5 00 00 | 	long	@_do_slow_goto
2dad4     B4 E0 00 00 | 	long	@_do_converttoint
2dad8     30 91 00 00 | 	long	@_test_csave
2dadc     84 94 00 00 | 	long	@_do_save
2dae0     70 97 00 00 | 	long	@_do_load
2dae4     44 06 01 00 | 	long	@_do_pinwrite
2dae8     5C 0A 01 00 | 	long	@_do_waitms
2daec     98 0B 01 00 | 	long	@_do_waitvbl
2daf0     A0 0E 01 00 | 	long	@_do_if
2daf4     84 0F 01 00 | 	long	@_do_else
2daf8     A8 0F 01 00 | 	long	@_do_nothing
2dafc     44 CA 00 00 | 	long	@_do_eq
2db00     74 D5 00 00 | 	long	@_do_ge
2db04     34 D9 00 00 | 	long	@_do_le
2db08     04 CE 00 00 | 	long	@_do_gt
2db0c     C4 D1 00 00 | 	long	@_do_lt
2db10     F4 DC 00 00 | 	long	@_do_ne
2db14     84 E2 00 00 | 	long	@_do_rnd
2db18     AC 0F 01 00 | 	long	@_do_brun
2db1c     78 12 01 00 | 	long	@_do_beep
2db20     C8 0B 01 00 | 	long	@_do_dir
2db24     54 02 01 00 | 	long	@_do_paper
2db28     DC 02 01 00 | 	long	@_do_ink
2db2c     78 03 01 00 | 	long	@_do_font
2db30     F4 03 01 00 | 	long	@_do_mode
2db34     E4 11 01 00 | 	long	@_do_mouse
2db38     7C F1 00 00 | 	long	@_do_gettime
2db3c     18 12 01 00 | 	long	@_do_cursor
2db40     4C 12 01 00 | 	long	@_do_click
2db44     08 EF 00 00 | 	long	@_do_mousex
2db48     4C EF 00 00 | 	long	@_do_mousey
2db4c     D4 EF 00 00 | 	long	@_do_mousek
2db50     90 EF 00 00 | 	long	@_do_mousew
2db54     4C E4 00 00 | 	long	@_do_sin
2db58     34 E6 00 00 | 	long	@_do_stick
2db5c     B8 E7 00 00 | 	long	@_do_strig
2db60     1C EE 00 00 | 	long	@_do_sprite
2db64     8C EA 00 00 | 	long	@_do_defsprite
2db68     3C E9 00 00 | 	long	@_do_getpixel
2db6c     A4 0B 01 00 | 	long	@_do_waitclock
2db70     98 13 01 00 | 	long	@_do_negative
2db74     18 F0 00 00 | 	long	@_do_rdpin
2db78     84 F0 00 00 | 	long	@_do_rqpin
2db7c     F8 F0 00 00 | 	long	@_do_pinread
2db80     DC 08 01 00 | 	long	@_do_wrpin
2db84     5C 09 01 00 | 	long	@_do_wxpin
2db88     DC 09 01 00 | 	long	@_do_wypin
2db8c     CC 06 01 00 | 	long	@_do_pinfloat
2db90     0C 07 01 00 | 	long	@_do_pinlo
2db94     4C 07 01 00 | 	long	@_do_pinhi
2db98     CC 07 01 00 | 	long	@_do_pinstart
2db9c     8C 07 01 00 | 	long	@_do_pintoggle
2dba0     00 FA 00 00 | 	long	@_do_fill
2dba4     80 45 01 00 | 	long	@_hg010b_spin2_putchar
2dba8     B4 48 02 00 | 	long	@__struct___bas_wrap_sender_tx
2dbac     F8 48 02 00 | 	long	@__struct___bas_wrap_sender_rx
2dbb0     40 49 02 00 | 	long	@__struct___bas_wrap_sender_close
2dbb4     E4 47 02 00 | 	long	@__struct__s_vfs_file_t_putchar
2dbb8     54 48 02 00 | 	long	@__struct__s_vfs_file_t_getchar
2dbbc     9C 47 02 00 | 	long	@___strs_cl_pfunc
2dbc0     FC A6 01 00 | 	long	@__system____root_opendir
2dbc4     98 A7 01 00 | 	long	@__system____root_closedir
2dbc8     14 A7 01 00 | 	long	@__system____root_readdir
2dbcc     A0 A7 01 00 | 	long	@__system____root_stat
2dbd0     28 A0 01 00 | 	long	@__system____default_putc
2dbd4     AC 9F 01 00 | 	long	@__system____default_getc
2dbd8     D0 A0 01 00 | 	long	@__system____default_flush
2dbdc     A4 32 02 00 | 	long	@_fatfs_cc_v_close
2dbe0     C0 36 02 00 | 	long	@_fatfs_cc_v_read
2dbe4     D4 37 02 00 | 	long	@_fatfs_cc_v_write
2dbe8     B4 38 02 00 | 	long	@_fatfs_cc_v_lseek
2dbec     3C 39 02 00 | 	long	@_fatfs_cc_v_ioctl
2dbf0     90 39 02 00 | 	long	@_fatfs_cc_v_open
2dbf4     08 32 02 00 | 	long	@_fatfs_cc_v_creat
2dbf8     E8 32 02 00 | 	long	@_fatfs_cc_v_opendir
2dbfc     5C 33 02 00 | 	long	@_fatfs_cc_v_closedir
2dc00     9C 33 02 00 | 	long	@_fatfs_cc_v_readdir
2dc04     D0 34 02 00 | 	long	@_fatfs_cc_v_stat
2dc08     50 39 02 00 | 	long	@_fatfs_cc_v_mkdir
2dc0c     70 39 02 00 | 	long	@_fatfs_cc_v_rmdir
2dc10     60 39 02 00 | 	long	@_fatfs_cc_v_remove
2dc14     80 39 02 00 | 	long	@_fatfs_cc_v_rename
2dc18     A0 3A 02 00 | 	long	@_fatfs_cc_v_init
2dc1c     A8 3A 02 00 | 	long	@_fatfs_cc_v_deinit
2dc20     B8 58 01 00 | 	long	@__system___tx
2dc24     F8 58 01 00 | 	long	@__system___rx
2dc28     0C B3 01 00 | 	long	@__system___rxtxioctl_0524
2dc2c     64 B3 01 00 | 	long	@__system____dummy_flush_0525
2dc30     70 3A 02 00 | 	long	@_fatfs_cc_v_flush
2dc34                 | __heap_base
2dc34     00 00 00 00 
      ...             
6c434     00 00 00 00 
6c438     00 00 00 00 | 	long	0[64002]
6c43c                 | objmem
6c43c     00 00 00 00 
      ...             
768e4     00 00 00 00 
768e8     00 00 00 00 | 	long	0[10540]
768ec                 | stackspace
768ec     00 00 00 00 | 	long	0[1]
768f0 100             | 	org	COG_BSS_START
768f0 100             | _var01
768f0 100             | 	res	1
768f0 101             | _var02
768f0 101             | 	res	1
768f0 102             | _var03
768f0 102             | 	res	1
768f0 103             | _var04
768f0 103             | 	res	1
768f0 104             | _var05
768f0 104             | 	res	1
768f0 105             | _var06
768f0 105             | 	res	1
768f0 106             | _var07
768f0 106             | 	res	1
768f0 107             | _var08
768f0 107             | 	res	1
768f0 108             | _var09
768f0 108             | 	res	1
768f0 109             | arg01
768f0 109             | 	res	1
768f0 10a             | arg02
768f0 10a             | 	res	1
768f0 10b             | arg03
768f0 10b             | 	res	1
768f0 10c             | arg04
768f0 10c             | 	res	1
768f0 10d             | arg05
768f0 10d             | 	res	1
768f0 10e             | arg06
768f0 10e             | 	res	1
768f0 10f             | local01
768f0 10f             | 	res	1
768f0 110             | local02
768f0 110             | 	res	1
768f0 111             | local03
768f0 111             | 	res	1
768f0 112             | local04
768f0 112             | 	res	1
768f0 113             | local05
768f0 113             | 	res	1
768f0 114             | local06
768f0 114             | 	res	1
768f0 115             | local07
768f0 115             | 	res	1
768f0 116             | local08
768f0 116             | 	res	1
768f0 117             | local09
768f0 117             | 	res	1
768f0 118             | local10
768f0 118             | 	res	1
768f0 119             | local11
768f0 119             | 	res	1
768f0 11a             | local12
768f0 11a             | 	res	1
768f0 11b             | local13
768f0 11b             | 	res	1
768f0 11c             | local14
768f0 11c             | 	res	1
768f0 11d             | local15
768f0 11d             | 	res	1
768f0 11e             | local16
768f0 11e             | 	res	1
768f0 11f             | local17
768f0 11f             | 	res	1
768f0 120             | local18
768f0 120             | 	res	1
768f0 121             | local19
768f0 121             | 	res	1
768f0 122             | local20
768f0 122             | 	res	1
768f0 123             | local21
768f0 123             | 	res	1
768f0 124             | local22
768f0 124             | 	res	1
768f0 125             | local23
768f0 125             | 	res	1
768f0 126             | local24
768f0 126             | 	res	1
768f0 127             | local25
768f0 127             | 	res	1
768f0 128             | local26
768f0 128             | 	res	1
768f0 129             | local27
768f0 129             | 	res	1
768f0 12a             | local28
768f0 12a             | 	res	1
768f0 12b             | local29
768f0 12b             | 	res	1
768f0 12c             | local30
768f0 12c             | 	res	1
768f0 12d             | local31
768f0 12d             | 	res	1
768f0 12e             | local32
768f0 12e             | 	res	1
768f0 12f             | muldiva_
768f0 12f             | 	res	1
768f0 130             | muldivb_
768f0 130             | 	res	1
768f0 131             | 	fit	480
768f0 131             | 
