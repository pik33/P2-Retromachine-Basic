00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic023a.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 256000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 23
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getivar = 17
00000                 | 	fun_getuvar = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1023
00000                 | 	maxstack = 512
00000                 | 	maxfor = 128
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 2C 26 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 30 61 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 2F 5F 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 30 5F 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 60 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 5E 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 2F 5F 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 30 61 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec E4 DC 02 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 00 DB 02 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 EC C4 06 00 | 	long	@objmem
007d0 0f3             | ptr__Audio093b_8_sc_spin2_dat__
007d0 0f3 00 CA 02 00 | 	long	@_Audio093b_8_sc_spin2_dat_
007d4 0f4             | ptr___system__dat__
007d4 0f4 E0 CD 02 00 | 	long	@__system__dat_
007d8 0f5             | ptr__dat__
007d8 0f5 64 54 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 20 D5 02 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 74 68 02 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 24 90 02 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa DC 8D 02 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb B4 9F 02 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 9C 69 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     45 E4 05 F1 | 	add	objptr, #69
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     51 00 00 FF 
00818     F3 E5 05 F1 | 	add	objptr, ##41971
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     52 00 00 FF 
0082c     38 E4 85 F1 | 	sub	objptr, ##42040
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     28 53 B1 FD | 	call	#__system___waitms
0083c     52 00 00 FF 
00840     38 E4 05 F1 | 	add	objptr, ##42040
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     52 00 00 FF 
00854     38 E4 85 F1 | 	sub	objptr, ##42040
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     00 53 B1 FD | 	call	#__system___waitms
00864     52 00 00 FF 
00868     38 E4 05 F1 | 	add	objptr, ##42040
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     52 00 00 FF 
0087c     38 E4 85 F1 | 	sub	objptr, ##42040
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     D8 52 B1 FD | 	call	#__system___waitms
0088c     52 00 00 FF 
00890     38 E4 05 F1 | 	add	objptr, ##42040
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     52 00 00 FF 
008a4     38 E4 85 F1 | 	sub	objptr, ##42040
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     51 00 00 FF 
008d4     B0 E5 05 F1 | 	add	objptr, ##41904
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     51 00 00 FF 
00914     B8 E5 85 F1 | 	sub	objptr, ##41912
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     E8 48 B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     38 49 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     28 49 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     51 00 00 FF 
00980     C0 E5 05 F1 | 	add	objptr, ##41920
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     51 00 00 FF 
009ac     DC E5 85 F1 | 	sub	objptr, ##41948
009b0     8C 48 B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     51 00 00 FF 
009e0     C0 E5 05 F1 | 	add	objptr, ##41920
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     51 00 00 FF 
00a08     DC E5 85 F1 | 	sub	objptr, ##41948
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     20 4A 05 F6 | 	mov	COUNT_, #32
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     44 F0 07 F1 | 	add	ptra, ##580
00a2c     2D 00 00 FF 
00a30     E0 E5 05 F1 | 	add	objptr, ##23520
00a34     F2 1E 02 FB | 	rdlong	local01, objptr
00a38     04 E4 05 F1 | 	add	objptr, #4
00a3c     F2 1E 62 FC | 	wrlong	local01, objptr
00a40     04 E4 05 F1 | 	add	objptr, #4
00a44     FF FF FF FF 
00a48     F2 FE 6B FC | 	wrlong	##-1, objptr
00a4c     00 20 06 F6 | 	mov	local02, #0
00a50     13 00 00 FF 
00a54     58 E4 05 F1 | 	add	objptr, ##9816
00a58     F2 00 68 FC | 	wrlong	#0, objptr
00a5c     41 00 00 FF 
00a60     40 E4 85 F1 | 	sub	objptr, ##33344
00a64     00 22 06 F6 | 	mov	local03, #0
00a68                 | LR__0020
00a68                 | ' 
00a68                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a68                 | ' 
00a68                 | ' fullline$=line$: cont=-1  : linenum=0 : lineptr=0 : err=0
00a68                 | ' 
00a68                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a68     00 24 06 F6 | 	mov	local04, #0
00a6c     20 4E 05 F1 | 	add	fp, #32
00a70     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a74                 | LR__0021
00a74     12 27 02 F6 | 	mov	local05, local04
00a78     02 26 66 F0 | 	shl	local05, #2
00a7c     A7 26 02 F1 | 	add	local05, fp
00a80     13 01 68 FC | 	wrlong	#0, local05
00a84     01 24 06 F1 | 	add	local04, #1
00a88     7E 24 56 F2 | 	cmps	local04, #126 wc
00a8c     E4 FF 9F CD |  if_b	jmp	#LR__0021
00a90                 | LR__0022
00a90     20 4E 85 F1 | 	sub	fp, #32
00a94                 | ' for i=0 to 125: lparts(i).part$="": next i
00a94     00 24 06 F6 | 	mov	local04, #0
00a98     2B 00 00 FF 
00a9c     D0 E5 05 F1 | 	add	objptr, ##22480
00aa0     97 12 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00aa4                 | LR__0023
00aa4     12 29 02 F6 | 	mov	local06, local04
00aa8     03 28 66 F0 | 	shl	local06, #3
00aac     F2 28 02 F1 | 	add	local06, objptr
00ab0     25 01 00 FF 
00ab4     CA 2A 06 F6 | 	mov	local07, ##@LR__4097
00ab8     14 2B 62 FC | 	wrlong	local07, local06
00abc     01 24 06 F1 | 	add	local04, #1
00ac0     7E 24 56 F2 | 	cmps	local04, #126 wc
00ac4     DC FF 9F CD |  if_b	jmp	#LR__0023
00ac8                 | LR__0024
00ac8     02 00 00 FF 
00acc     10 E4 05 F1 | 	add	objptr, ##1040
00ad0     F2 12 02 FB | 	rdlong	arg01, objptr
00ad4     2D 00 00 FF 
00ad8     E0 E5 85 F1 | 	sub	objptr, ##23520
00adc     D4 71 B1 FD | 	call	#__system__RTrim_S
00ae0     FD 12 02 F6 | 	mov	arg01, result1
00ae4     0C 71 B1 FD | 	call	#__system__LTrim_S
00ae8     2D 00 00 FF 
00aec     E0 E5 05 F1 | 	add	objptr, ##23520
00af0     F2 FA 61 FC | 	wrlong	result1, objptr
00af4     25 01 00 FF 
00af8     CB 1E 06 F6 | 	mov	local01, ##@LR__4098
00afc     24 00 00 FF 
00b00     7C E4 05 F1 | 	add	objptr, ##18556
00b04     F2 1E 62 FC | 	wrlong	local01, objptr
00b08     24 00 00 FF 
00b0c     7C E4 85 F1 | 	sub	objptr, ##18556
00b10     F2 12 02 FB | 	rdlong	arg01, objptr
00b14     2D 00 00 FF 
00b18     E0 E5 85 F1 | 	sub	objptr, ##23520
00b1c     09 2D 02 F6 | 	mov	local08, arg01
00b20     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b24                 | LR__0025
00b24     16 FB C9 FA | 	rdbyte	result1, local08 wz
00b28     01 2C 06 51 |  if_ne	add	local08, #1
00b2c     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b30                 | LR__0026
00b30     09 2D 82 F1 | 	sub	local08, arg01
00b34     16 FB 09 F6 | 	mov	result1, local08 wz
00b38     52 00 00 FF 
00b3c     60 E4 05 F1 | 	add	objptr, ##42080
00b40     F2 FA 61 FC | 	wrlong	result1, objptr
00b44                 | ' if l=0 then goto 101
00b44     52 00 00 FF 
00b48     60 E4 85 F1 | 	sub	objptr, ##42080
00b4c     34 1C 90 AD |  if_e	jmp	#LR__0119
00b50     2D 00 00 FF 
00b54     E0 E5 05 F1 | 	add	objptr, ##23520
00b58     F2 14 02 FB | 	rdlong	arg02, objptr
00b5c     2D 00 00 FF 
00b60     E0 E5 85 F1 | 	sub	objptr, ##23520
00b64     25 01 00 FF 
00b68     CC 16 06 F6 | 	mov	arg03, ##@LR__4099
00b6c     01 12 06 F6 | 	mov	arg01, #1
00b70     F8 71 B1 FD | 	call	#__system__Instr
00b74     52 00 00 FF 
00b78     64 E4 05 F1 | 	add	objptr, ##42084
00b7c     F2 FA 61 FC | 	wrlong	result1, objptr
00b80     FD 1E 02 F6 | 	mov	local01, result1
00b84     52 00 00 FF 
00b88     64 E4 85 F1 | 	sub	objptr, ##42084
00b8c     01 1E 56 F2 | 	cmps	local01, #1 wc
00b90     0C 01 90 CD |  if_b	jmp	#LR__0031
00b94     2D 00 00 FF 
00b98     E0 E5 05 F1 | 	add	objptr, ##23520
00b9c     F2 12 02 FB | 	rdlong	arg01, objptr
00ba0     2D 00 00 FF 
00ba4     E0 E5 85 F1 | 	sub	objptr, ##23520
00ba8     09 2D 02 F6 | 	mov	local08, arg01
00bac     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00bb0                 | LR__0027
00bb0     16 FB C9 FA | 	rdbyte	result1, local08 wz
00bb4     01 2C 06 51 |  if_ne	add	local08, #1
00bb8     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00bbc                 | LR__0028
00bbc     09 2D 82 F1 | 	sub	local08, arg01
00bc0     16 29 02 F6 | 	mov	local06, local08
00bc4     52 00 00 FF 
00bc8     64 E4 05 F1 | 	add	objptr, ##42084
00bcc     F2 2A 02 FB | 	rdlong	local07, objptr
00bd0     52 00 00 FF 
00bd4     64 E4 85 F1 | 	sub	objptr, ##42084
00bd8     14 2B 52 F2 | 	cmps	local07, local06 wc
00bdc     C0 00 90 3D |  if_ae	jmp	#LR__0031
00be0     2D 00 00 FF 
00be4     E0 E5 05 F1 | 	add	objptr, ##23520
00be8     F2 12 02 FB | 	rdlong	arg01, objptr
00bec     09 1F 02 F6 | 	mov	local01, arg01
00bf0     2D 00 00 FF 
00bf4     E0 E5 85 F1 | 	sub	objptr, ##23520
00bf8     09 2D 02 F6 | 	mov	local08, arg01
00bfc     97 06 48 FB | 	callpa	#(@LR__0030-@LR__0029)>>2,fcache_load_ptr_
00c00                 | LR__0029
00c00     16 FB C9 FA | 	rdbyte	result1, local08 wz
00c04     01 2C 06 51 |  if_ne	add	local08, #1
00c08     F4 FF 9F 5D |  if_ne	jmp	#LR__0029
00c0c                 | LR__0030
00c0c     09 2D 82 F1 | 	sub	local08, arg01
00c10     16 15 02 F6 | 	mov	arg02, local08
00c14     52 00 00 FF 
00c18     64 E4 05 F1 | 	add	objptr, ##42084
00c1c     F2 2E 02 FB | 	rdlong	local09, objptr
00c20     52 00 00 FF 
00c24     64 E4 85 F1 | 	sub	objptr, ##42084
00c28     17 15 82 F1 | 	sub	arg02, local09
00c2c     0F 13 02 F6 | 	mov	arg01, local01
00c30     D4 6C B1 FD | 	call	#__system__Right_S
00c34     FD 12 02 F6 | 	mov	arg01, result1
00c38     78 70 B1 FD | 	call	#__system__RTrim_S
00c3c     FD 12 02 F6 | 	mov	arg01, result1
00c40     B0 6F B1 FD | 	call	#__system__LTrim_S
00c44     52 00 00 FF 
00c48     68 E4 05 F1 | 	add	objptr, ##42088
00c4c     F2 FA 61 FC | 	wrlong	result1, objptr
00c50     24 00 00 FF 
00c54     88 E4 85 F1 | 	sub	objptr, ##18568
00c58     F2 12 02 FB | 	rdlong	arg01, objptr
00c5c     24 00 00 FF 
00c60     84 E4 05 F1 | 	add	objptr, ##18564
00c64     F2 14 02 FB | 	rdlong	arg02, objptr
00c68     52 00 00 FF 
00c6c     64 E4 85 F1 | 	sub	objptr, ##42084
00c70     01 14 86 F1 | 	sub	arg02, #1
00c74     08 6C B1 FD | 	call	#__system__Left_S
00c78     FD 12 02 F6 | 	mov	arg01, result1
00c7c     34 70 B1 FD | 	call	#__system__RTrim_S
00c80     FD 12 02 F6 | 	mov	arg01, result1
00c84     6C 6F B1 FD | 	call	#__system__LTrim_S
00c88     2D 00 00 FF 
00c8c     E0 E5 05 F1 | 	add	objptr, ##23520
00c90     F2 FA 61 FC | 	wrlong	result1, objptr
00c94     2D 00 00 FF 
00c98     E0 E5 85 F1 | 	sub	objptr, ##23520
00c9c     1C 00 90 FD | 	jmp	#LR__0032
00ca0                 | LR__0031
00ca0     25 01 00 FF 
00ca4     CE 1E 06 F6 | 	mov	local01, ##@LR__4100
00ca8     52 00 00 FF 
00cac     68 E4 05 F1 | 	add	objptr, ##42088
00cb0     F2 1E 62 FC | 	wrlong	local01, objptr
00cb4     52 00 00 FF 
00cb8     68 E4 85 F1 | 	sub	objptr, ##42088
00cbc                 | LR__0032
00cbc                 | ' 
00cbc                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00cbc     2D 00 00 FF 
00cc0     E8 E5 05 F1 | 	add	objptr, ##23528
00cc4     F2 1E 02 FB | 	rdlong	local01, objptr
00cc8     2D 00 00 FF 
00ccc     E8 E5 85 F1 | 	sub	objptr, ##23528
00cd0     FF FF 7F FF 
00cd4     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00cd8     3C 00 90 5D |  if_ne	jmp	#LR__0033
00cdc     52 00 00 FF 
00ce0     68 E4 05 F1 | 	add	objptr, ##42088
00ce4     F2 12 02 FB | 	rdlong	arg01, objptr
00ce8     52 00 00 FF 
00cec     68 E4 85 F1 | 	sub	objptr, ##42088
00cf0     25 01 00 FF 
00cf4     CF 14 06 F6 | 	mov	arg02, ##@LR__4101
00cf8     9C 4B B1 FD | 	call	#__system___string_cmp
00cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
00d00     2D 00 00 5F 
00d04     E8 E5 05 51 |  if_ne	add	objptr, ##23528
00d08     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00d0c     2D 00 00 5F 
00d10     E8 E5 85 51 |  if_ne	sub	objptr, ##23528
00d14     08 01 90 5D |  if_ne	jmp	#LR__0037
00d18                 | LR__0033
00d18                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00d18     2D 00 00 FF 
00d1c     E8 E5 05 F1 | 	add	objptr, ##23528
00d20     F2 1E 02 FB | 	rdlong	local01, objptr
00d24     2D 00 00 FF 
00d28     E8 E5 85 F1 | 	sub	objptr, ##23528
00d2c     FF FF 7F FF 
00d30     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00d34     3C 00 90 5D |  if_ne	jmp	#LR__0034
00d38     52 00 00 FF 
00d3c     68 E4 05 F1 | 	add	objptr, ##42088
00d40     F2 12 02 FB | 	rdlong	arg01, objptr
00d44     52 00 00 FF 
00d48     68 E4 85 F1 | 	sub	objptr, ##42088
00d4c     25 01 00 FF 
00d50     D0 14 06 F6 | 	mov	arg02, ##@LR__4102
00d54     40 4B B1 FD | 	call	#__system___string_cmp
00d58     00 FA 0D F2 | 	cmp	result1, #0 wz
00d5c     2D 00 00 AF 
00d60     E8 E5 05 A1 |  if_e	add	objptr, ##23528
00d64     F2 06 68 AC |  if_e	wrlong	#3, objptr
00d68     2D 00 00 AF 
00d6c     E8 E5 85 A1 |  if_e	sub	objptr, ##23528
00d70     AC 00 90 AD |  if_e	jmp	#LR__0037
00d74                 | LR__0034
00d74                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00d74     2D 00 00 FF 
00d78     E8 E5 05 F1 | 	add	objptr, ##23528
00d7c     F2 1E 02 FB | 	rdlong	local01, objptr
00d80     2D 00 00 FF 
00d84     E8 E5 85 F1 | 	sub	objptr, ##23528
00d88     04 1E 0E F2 | 	cmp	local01, #4 wz
00d8c     3C 00 90 5D |  if_ne	jmp	#LR__0035
00d90     52 00 00 FF 
00d94     68 E4 05 F1 | 	add	objptr, ##42088
00d98     F2 12 02 FB | 	rdlong	arg01, objptr
00d9c     52 00 00 FF 
00da0     68 E4 85 F1 | 	sub	objptr, ##42088
00da4     25 01 00 FF 
00da8     D1 14 06 F6 | 	mov	arg02, ##@LR__4103
00dac     E8 4A B1 FD | 	call	#__system___string_cmp
00db0     00 FA 0D F2 | 	cmp	result1, #0 wz
00db4     2D 00 00 5F 
00db8     E8 E5 05 51 |  if_ne	add	objptr, ##23528
00dbc     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00dc0     2D 00 00 5F 
00dc4     E8 E5 85 51 |  if_ne	sub	objptr, ##23528
00dc8     54 00 90 5D |  if_ne	jmp	#LR__0037
00dcc                 | LR__0035
00dcc                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00dcc     2D 00 00 FF 
00dd0     E8 E5 05 F1 | 	add	objptr, ##23528
00dd4     F2 1E 02 FB | 	rdlong	local01, objptr
00dd8     2D 00 00 FF 
00ddc     E8 E5 85 F1 | 	sub	objptr, ##23528
00de0     04 1E 0E F2 | 	cmp	local01, #4 wz
00de4     38 00 90 5D |  if_ne	jmp	#LR__0036
00de8     52 00 00 FF 
00dec     68 E4 05 F1 | 	add	objptr, ##42088
00df0     F2 12 02 FB | 	rdlong	arg01, objptr
00df4     52 00 00 FF 
00df8     68 E4 85 F1 | 	sub	objptr, ##42088
00dfc     25 01 00 FF 
00e00     D2 14 06 F6 | 	mov	arg02, ##@LR__4104
00e04     90 4A B1 FD | 	call	#__system___string_cmp
00e08     00 FA 0D F2 | 	cmp	result1, #0 wz
00e0c     2D 00 00 AF 
00e10     E8 E5 05 A1 |  if_e	add	objptr, ##23528
00e14     F2 04 68 AC |  if_e	wrlong	#2, objptr
00e18     2D 00 00 AF 
00e1c     E8 E5 85 A1 |  if_e	sub	objptr, ##23528
00e20                 | LR__0036
00e20                 | LR__0037
00e20     20 4E 05 F1 | 	add	fp, #32
00e24     A7 00 68 FC | 	wrlong	#0, fp
00e28     20 4E 85 F1 | 	sub	fp, #32
00e2c     00 24 06 F6 | 	mov	local04, #0
00e30     01 30 06 F6 | 	mov	local10, #1
00e34                 | ' 
00e34                 | ' ' 1b: find separators
00e34                 | ' 
00e34                 | ' 107
00e34                 | ' separators(0)=0
00e34                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00e34                 | LR__0038
00e34     01 24 06 F1 | 	add	local04, #1
00e38     2D 00 00 FF 
00e3c     E0 E5 05 F1 | 	add	objptr, ##23520
00e40     F2 12 02 FB | 	rdlong	arg01, objptr
00e44     2D 00 00 FF 
00e48     E0 E5 85 F1 | 	sub	objptr, ##23520
00e4c     12 15 02 F6 | 	mov	arg02, local04
00e50     01 16 06 F6 | 	mov	arg03, #1
00e54     40 6B B1 FD | 	call	#__system__Mid_S
00e58     52 00 00 FF 
00e5c     6C E4 05 F1 | 	add	objptr, ##42092
00e60     F2 FA 61 FC | 	wrlong	result1, objptr
00e64                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00e64     FD 12 02 F6 | 	mov	arg01, result1
00e68     52 00 00 FF 
00e6c     6C E4 85 F1 | 	sub	objptr, ##42092
00e70     1C 1C B0 FD | 	call	#_isseparator
00e74     00 FA 0D F2 | 	cmp	result1, #0 wz
00e78     1C 00 90 AD |  if_e	jmp	#LR__0039
00e7c     18 27 02 F6 | 	mov	local05, local10
00e80     02 26 66 F0 | 	shl	local05, #2
00e84     20 4E 05 F1 | 	add	fp, #32
00e88     A7 26 02 F1 | 	add	local05, fp
00e8c     13 25 62 FC | 	wrlong	local04, local05
00e90     01 30 06 F1 | 	add	local10, #1
00e94     20 4E 85 F1 | 	sub	fp, #32
00e98                 | LR__0039
00e98     52 00 00 FF 
00e9c     60 E4 05 F1 | 	add	objptr, ##42080
00ea0     F2 1E 02 FB | 	rdlong	local01, objptr
00ea4     52 00 00 FF 
00ea8     60 E4 85 F1 | 	sub	objptr, ##42080
00eac     0F 25 5A F2 | 	cmps	local04, local01 wcz
00eb0     80 FF 9F ED |  if_be	jmp	#LR__0038
00eb4     18 27 02 F6 | 	mov	local05, local10
00eb8     02 26 66 F0 | 	shl	local05, #2
00ebc     20 4E 05 F1 | 	add	fp, #32
00ec0     A7 26 02 F1 | 	add	local05, fp
00ec4     13 25 62 FC | 	wrlong	local04, local05
00ec8     00 32 06 F6 | 	mov	local11, #0
00ecc                 | ' for i=0 to j-1 
00ecc     00 24 06 F6 | 	mov	local04, #0
00ed0     18 35 02 F6 | 	mov	local12, local10
00ed4     20 4E 85 F1 | 	sub	fp, #32
00ed8                 | LR__0040
00ed8     1A 25 52 F2 | 	cmps	local04, local12 wc
00edc     88 01 90 3D |  if_ae	jmp	#LR__0044
00ee0     12 27 02 F6 | 	mov	local05, local04
00ee4     02 26 66 F0 | 	shl	local05, #2
00ee8     20 4E 05 F1 | 	add	fp, #32
00eec     A7 26 02 F1 | 	add	local05, fp
00ef0     13 2F 02 FB | 	rdlong	local09, local05
00ef4     52 00 00 FF 
00ef8     74 E4 05 F1 | 	add	objptr, ##42100
00efc     F2 2E 62 FC | 	wrlong	local09, objptr
00f00     12 27 02 F6 | 	mov	local05, local04
00f04     01 26 06 F1 | 	add	local05, #1
00f08     02 26 66 F0 | 	shl	local05, #2
00f0c     A7 28 02 F6 | 	mov	local06, fp
00f10     A7 26 02 F1 | 	add	local05, fp
00f14     13 1F 02 FB | 	rdlong	local01, local05
00f18     04 E4 05 F1 | 	add	objptr, #4
00f1c     F2 1E 62 FC | 	wrlong	local01, objptr
00f20                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
00f20     04 E4 85 F1 | 	sub	objptr, #4
00f24     F2 1E 02 FB | 	rdlong	local01, objptr
00f28     52 00 00 FF 
00f2c     74 E4 85 F1 | 	sub	objptr, ##42100
00f30     01 1E 56 F2 | 	cmps	local01, #1 wc
00f34     20 4E 85 F1 | 	sub	fp, #32
00f38     84 00 90 CD |  if_b	jmp	#LR__0042
00f3c     2D 00 00 FF 
00f40     E0 E5 05 F1 | 	add	objptr, ##23520
00f44     F2 12 02 FB | 	rdlong	arg01, objptr
00f48     24 00 00 FF 
00f4c     94 E4 05 F1 | 	add	objptr, ##18580
00f50     F2 14 02 FB | 	rdlong	arg02, objptr
00f54     52 00 00 FF 
00f58     74 E4 85 F1 | 	sub	objptr, ##42100
00f5c     01 16 06 F6 | 	mov	arg03, #1
00f60     34 6A B1 FD | 	call	#__system__Mid_S
00f64     52 00 00 FF 
00f68     7C E4 05 F1 | 	add	objptr, ##42108
00f6c     F2 FA 61 FC | 	wrlong	result1, objptr
00f70     52 00 00 FF 
00f74     7C E4 85 F1 | 	sub	objptr, ##42108
00f78     FD 12 02 F6 | 	mov	arg01, result1
00f7c     25 01 00 FF 
00f80     D3 14 06 F6 | 	mov	arg02, ##@LR__4105
00f84     10 49 B1 FD | 	call	#__system___string_cmp
00f88     00 FA 0D F2 | 	cmp	result1, #0 wz
00f8c     30 00 90 AD |  if_e	jmp	#LR__0041
00f90     19 29 02 F6 | 	mov	local06, local11
00f94     03 28 66 F0 | 	shl	local06, #3
00f98     2B 00 00 FF 
00f9c     D0 E5 05 F1 | 	add	objptr, ##22480
00fa0     F2 28 02 F1 | 	add	local06, objptr
00fa4     26 00 00 FF 
00fa8     AC E4 05 F1 | 	add	objptr, ##19628
00fac     F2 2A 02 FB | 	rdlong	local07, objptr
00fb0     52 00 00 FF 
00fb4     7C E4 85 F1 | 	sub	objptr, ##42108
00fb8     14 2B 62 FC | 	wrlong	local07, local06
00fbc     01 32 06 F1 | 	add	local11, #1
00fc0                 | LR__0041
00fc0                 | LR__0042
00fc0     2D 00 00 FF 
00fc4     E0 E5 05 F1 | 	add	objptr, ##23520
00fc8     F2 12 02 FB | 	rdlong	arg01, objptr
00fcc     24 00 00 FF 
00fd0     94 E4 05 F1 | 	add	objptr, ##18580
00fd4     F2 14 02 FB | 	rdlong	arg02, objptr
00fd8     01 14 06 F1 | 	add	arg02, #1
00fdc     04 E4 05 F1 | 	add	objptr, #4
00fe0     F2 16 02 FB | 	rdlong	arg03, objptr
00fe4     04 E4 85 F1 | 	sub	objptr, #4
00fe8     F2 36 02 FB | 	rdlong	local13, objptr
00fec     52 00 00 FF 
00ff0     74 E4 85 F1 | 	sub	objptr, ##42100
00ff4     1B 2F 02 F6 | 	mov	local09, local13
00ff8     17 17 82 F1 | 	sub	arg03, local09
00ffc     01 16 86 F1 | 	sub	arg03, #1
01000     94 69 B1 FD | 	call	#__system__Mid_S
01004     52 00 00 FF 
01008     7C E4 05 F1 | 	add	objptr, ##42108
0100c     F2 FA 61 FC | 	wrlong	result1, objptr
01010     52 00 00 FF 
01014     7C E4 85 F1 | 	sub	objptr, ##42108
01018     FD 12 02 F6 | 	mov	arg01, result1
0101c     25 01 00 FF 
01020     D4 14 06 F6 | 	mov	arg02, ##@LR__4106
01024     70 48 B1 FD | 	call	#__system___string_cmp
01028     00 FA 0D F2 | 	cmp	result1, #0 wz
0102c     30 00 90 AD |  if_e	jmp	#LR__0043
01030     19 29 02 F6 | 	mov	local06, local11
01034     03 28 66 F0 | 	shl	local06, #3
01038     2B 00 00 FF 
0103c     D0 E5 05 F1 | 	add	objptr, ##22480
01040     F2 28 02 F1 | 	add	local06, objptr
01044     26 00 00 FF 
01048     AC E4 05 F1 | 	add	objptr, ##19628
0104c     F2 2A 02 FB | 	rdlong	local07, objptr
01050     52 00 00 FF 
01054     7C E4 85 F1 | 	sub	objptr, ##42108
01058     14 2B 62 FC | 	wrlong	local07, local06
0105c     01 32 06 F1 | 	add	local11, #1
01060                 | LR__0043
01060     01 24 06 F1 | 	add	local04, #1
01064     70 FE 9F FD | 	jmp	#LR__0040
01068                 | LR__0044
01068     00 24 06 F6 | 	mov	local04, #0
0106c                 | ' 
0106c                 | ' ' 1d : find strings
0106c                 | ' 
0106c                 | ' i=0
0106c                 | ' do
0106c                 | LR__0045
0106c                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
0106c     12 15 02 F6 | 	mov	arg02, local04
01070     03 14 66 F0 | 	shl	arg02, #3
01074     2B 00 00 FF 
01078     D0 E5 05 F1 | 	add	objptr, ##22480
0107c     F2 14 02 F1 | 	add	arg02, objptr
01080     0A 13 02 FB | 	rdlong	arg01, arg02
01084     25 01 00 FF 
01088     D5 14 06 F6 | 	mov	arg02, ##@LR__4107
0108c     2B 00 00 FF 
01090     D0 E5 85 F1 | 	sub	objptr, ##22480
01094     00 48 B1 FD | 	call	#__system___string_cmp
01098     00 FA 0D F2 | 	cmp	result1, #0 wz
0109c     01 24 06 51 |  if_ne	add	local04, #1
010a0     50 01 90 5D |  if_ne	jmp	#LR__0050
010a4     12 39 02 F6 | 	mov	local14, local04
010a8                 | LR__0046
010a8     12 29 02 F6 | 	mov	local06, local04
010ac     01 28 06 F1 | 	add	local06, #1
010b0     03 28 66 F0 | 	shl	local06, #3
010b4     2B 00 00 FF 
010b8     D0 E5 05 F1 | 	add	objptr, ##22480
010bc     F2 28 02 F1 | 	add	local06, objptr
010c0     14 37 02 FB | 	rdlong	local13, local06
010c4     26 00 00 FF 
010c8     AC E4 05 F1 | 	add	objptr, ##19628
010cc     F2 36 62 FC | 	wrlong	local13, objptr
010d0     1C 29 02 F6 | 	mov	local06, local14
010d4     03 28 66 F0 | 	shl	local06, #3
010d8     26 00 00 FF 
010dc     AC E4 85 F1 | 	sub	objptr, ##19628
010e0     F2 28 02 F1 | 	add	local06, objptr
010e4     1C 31 02 F6 | 	mov	local10, local14
010e8     03 30 66 F0 | 	shl	local10, #3
010ec     F2 30 02 F1 | 	add	local10, objptr
010f0     18 13 02 FB | 	rdlong	arg01, local10
010f4     2B 00 00 FF 
010f8     D0 E5 85 F1 | 	sub	objptr, ##22480
010fc     1B 2F 02 F6 | 	mov	local09, local13
01100     17 15 02 F6 | 	mov	arg02, local09
01104     C4 47 B1 FD | 	call	#__system___string_concat
01108     14 FB 61 FC | 	wrlong	result1, local06
0110c     12 31 02 F6 | 	mov	local10, local04
01110     01 30 06 F1 | 	add	local10, #1
01114     19 3B 02 F6 | 	mov	local15, local11
01118     01 3A 06 F1 | 	add	local15, #1
0111c     97 3C 48 FB | 	callpa	#(@LR__0048-@LR__0047)>>2,fcache_load_ptr_
01120                 | LR__0047
01120     1D 31 52 F2 | 	cmps	local10, local15 wc
01124     70 00 90 3D |  if_ae	jmp	#LR__0049
01128     18 37 02 F6 | 	mov	local13, local10
0112c     01 36 06 F1 | 	add	local13, #1
01130     03 36 66 F0 | 	shl	local13, #3
01134     2B 00 00 FF 
01138     D0 E5 05 F1 | 	add	objptr, ##22480
0113c     F2 36 02 F1 | 	add	local13, objptr
01140     1B 1F 02 FB | 	rdlong	local01, local13
01144     18 2B 02 F6 | 	mov	local07, local10
01148     01 2A 06 F1 | 	add	local07, #1
0114c     03 2A 66 F0 | 	shl	local07, #3
01150     F2 2A 02 F1 | 	add	local07, objptr
01154     04 2A 06 F1 | 	add	local07, #4
01158     15 27 02 FB | 	rdlong	local05, local07
0115c     18 2B 02 F6 | 	mov	local07, local10
01160     03 2A 66 F0 | 	shl	local07, #3
01164     F2 2E 02 F6 | 	mov	local09, objptr
01168     F2 2A 02 F1 | 	add	local07, objptr
0116c     15 1F 62 FC | 	wrlong	local01, local07
01170     18 37 02 F6 | 	mov	local13, local10
01174     1B 2B 02 F6 | 	mov	local07, local13
01178     03 2A 66 F0 | 	shl	local07, #3
0117c     F2 2A 02 F1 | 	add	local07, objptr
01180     04 2A 06 F1 | 	add	local07, #4
01184     15 27 62 FC | 	wrlong	local05, local07
01188     01 30 06 F1 | 	add	local10, #1
0118c     2B 00 00 FF 
01190     D0 E5 85 F1 | 	sub	objptr, ##22480
01194     88 FF 9F FD | 	jmp	#LR__0047
01198                 | LR__0048
01198                 | LR__0049
01198     01 32 86 F1 | 	sub	local11, #1
0119c     52 00 00 FF 
011a0     7C E4 05 F1 | 	add	objptr, ##42108
011a4     F2 12 02 FB | 	rdlong	arg01, objptr
011a8     52 00 00 FF 
011ac     7C E4 85 F1 | 	sub	objptr, ##42108
011b0     25 01 00 FF 
011b4     D7 14 06 F6 | 	mov	arg02, ##@LR__4108
011b8     DC 46 B1 FD | 	call	#__system___string_cmp
011bc     00 FA 0D F2 | 	cmp	result1, #0 wz
011c0     19 25 52 52 |  if_ne	cmps	local04, local11 wc
011c4     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0046
011c8                 | '   if p$<>"""" then k+=1:i+=1
011c8     52 00 00 FF 
011cc     7C E4 05 F1 | 	add	objptr, ##42108
011d0     F2 12 02 FB | 	rdlong	arg01, objptr
011d4     52 00 00 FF 
011d8     7C E4 85 F1 | 	sub	objptr, ##42108
011dc     25 01 00 FF 
011e0     D9 14 06 F6 | 	mov	arg02, ##@LR__4109
011e4     B0 46 B1 FD | 	call	#__system___string_cmp
011e8     00 FA 0D F2 | 	cmp	result1, #0 wz
011ec     01 32 06 51 |  if_ne	add	local11, #1
011f0     01 24 06 51 |  if_ne	add	local04, #1
011f4                 | LR__0050
011f4     19 25 52 F2 | 	cmps	local04, local11 wc
011f8     70 FE 9F CD |  if_b	jmp	#LR__0045
011fc     00 24 06 F6 | 	mov	local04, #0
01200                 | ' 
01200                 | ' ' 1e : concatenate strings if "" detected between
01200                 | '  
01200                 | ' i=0 : do
01200                 | LR__0051
01200                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
01200     12 3D 02 F6 | 	mov	local16, local04
01204     03 3C 66 F0 | 	shl	local16, #3
01208     2B 00 00 FF 
0120c     D0 E5 05 F1 | 	add	objptr, ##22480
01210     F2 3C 02 F1 | 	add	local16, objptr
01214     1E 13 02 FB | 	rdlong	arg01, local16
01218     01 14 06 F6 | 	mov	arg02, #1
0121c     2B 00 00 FF 
01220     D0 E5 85 F1 | 	sub	objptr, ##22480
01224     E0 66 B1 FD | 	call	#__system__Right_S
01228     FD 12 02 F6 | 	mov	arg01, result1
0122c     25 01 00 FF 
01230     DB 14 06 F6 | 	mov	arg02, ##@LR__4110
01234     60 46 B1 FD | 	call	#__system___string_cmp
01238     00 FA 0D F2 | 	cmp	result1, #0 wz
0123c     78 01 90 5D |  if_ne	jmp	#LR__0057
01240     12 2B 02 F6 | 	mov	local07, local04
01244     01 2A 06 F1 | 	add	local07, #1
01248     03 2A 66 F0 | 	shl	local07, #3
0124c     2B 00 00 FF 
01250     D0 E5 05 F1 | 	add	objptr, ##22480
01254     F2 2E 02 F6 | 	mov	local09, objptr
01258     F2 2A 02 F1 | 	add	local07, objptr
0125c     15 13 02 FB | 	rdlong	arg01, local07
01260     01 14 06 F6 | 	mov	arg02, #1
01264     2B 00 00 FF 
01268     D0 E5 85 F1 | 	sub	objptr, ##22480
0126c     10 66 B1 FD | 	call	#__system__Left_S
01270     FD 12 02 F6 | 	mov	arg01, result1
01274     25 01 00 FF 
01278     DD 14 06 F6 | 	mov	arg02, ##@LR__4111
0127c     18 46 B1 FD | 	call	#__system___string_cmp
01280     00 FA 0D F2 | 	cmp	result1, #0 wz
01284     30 01 90 5D |  if_ne	jmp	#LR__0057
01288     12 29 02 F6 | 	mov	local06, local04
0128c     03 28 66 F0 | 	shl	local06, #3
01290     2B 00 00 FF 
01294     D0 E5 05 F1 | 	add	objptr, ##22480
01298     F2 28 02 F1 | 	add	local06, objptr
0129c     12 37 02 F6 | 	mov	local13, local04
012a0     03 36 66 F0 | 	shl	local13, #3
012a4     F2 36 02 F1 | 	add	local13, objptr
012a8     1B 2B 02 FB | 	rdlong	local07, local13
012ac     12 37 02 F6 | 	mov	local13, local04
012b0     01 36 06 F1 | 	add	local13, #1
012b4     03 36 66 F0 | 	shl	local13, #3
012b8     F2 36 02 F1 | 	add	local13, objptr
012bc     1B 2F 02 FB | 	rdlong	local09, local13
012c0     12 3F 02 F6 | 	mov	local17, local04
012c4     01 3E 06 F1 | 	add	local17, #1
012c8     1F 41 02 F6 | 	mov	local18, local17
012cc     03 40 66 F0 | 	shl	local18, #3
012d0     F2 42 02 F6 | 	mov	local19, objptr
012d4     F2 40 02 F1 | 	add	local18, objptr
012d8     20 13 02 FB | 	rdlong	arg01, local18
012dc     2B 00 00 FF 
012e0     D0 E5 85 F1 | 	sub	objptr, ##22480
012e4     09 2D 02 F6 | 	mov	local08, arg01
012e8     97 06 48 FB | 	callpa	#(@LR__0053-@LR__0052)>>2,fcache_load_ptr_
012ec                 | LR__0052
012ec     16 FB C9 FA | 	rdbyte	result1, local08 wz
012f0     01 2C 06 51 |  if_ne	add	local08, #1
012f4     F4 FF 9F 5D |  if_ne	jmp	#LR__0052
012f8                 | LR__0053
012f8     09 2D 82 F1 | 	sub	local08, arg01
012fc     16 37 02 F6 | 	mov	local13, local08
01300     01 36 86 F1 | 	sub	local13, #1
01304     17 13 02 F6 | 	mov	arg01, local09
01308     1B 15 02 F6 | 	mov	arg02, local13
0130c     F8 65 B1 FD | 	call	#__system__Right_S
01310     FD 2E 02 F6 | 	mov	local09, result1
01314     15 13 02 F6 | 	mov	arg01, local07
01318     17 15 02 F6 | 	mov	arg02, local09
0131c     AC 45 B1 FD | 	call	#__system___string_concat
01320     14 FB 61 FC | 	wrlong	result1, local06
01324                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
01324     12 31 02 F6 | 	mov	local10, local04
01328     01 30 06 F1 | 	add	local10, #1
0132c     19 45 02 F6 | 	mov	local20, local11
01330     01 44 06 F1 | 	add	local20, #1
01334     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
01338                 | LR__0054
01338     22 31 52 F2 | 	cmps	local10, local20 wc
0133c     70 00 90 3D |  if_ae	jmp	#LR__0056
01340     18 3D 02 F6 | 	mov	local16, local10
01344     01 3C 06 F1 | 	add	local16, #1
01348     03 3C 66 F0 | 	shl	local16, #3
0134c     2B 00 00 FF 
01350     D0 E5 05 F1 | 	add	objptr, ##22480
01354     F2 3C 02 F1 | 	add	local16, objptr
01358     1E 1F 02 FB | 	rdlong	local01, local16
0135c     18 2B 02 F6 | 	mov	local07, local10
01360     01 2A 06 F1 | 	add	local07, #1
01364     03 2A 66 F0 | 	shl	local07, #3
01368     F2 2A 02 F1 | 	add	local07, objptr
0136c     04 2A 06 F1 | 	add	local07, #4
01370     15 27 02 FB | 	rdlong	local05, local07
01374     18 2B 02 F6 | 	mov	local07, local10
01378     03 2A 66 F0 | 	shl	local07, #3
0137c     F2 2E 02 F6 | 	mov	local09, objptr
01380     F2 2A 02 F1 | 	add	local07, objptr
01384     15 1F 62 FC | 	wrlong	local01, local07
01388     18 37 02 F6 | 	mov	local13, local10
0138c     1B 2B 02 F6 | 	mov	local07, local13
01390     03 2A 66 F0 | 	shl	local07, #3
01394     F2 2A 02 F1 | 	add	local07, objptr
01398     04 2A 06 F1 | 	add	local07, #4
0139c     15 27 62 FC | 	wrlong	local05, local07
013a0     01 30 06 F1 | 	add	local10, #1
013a4     2B 00 00 FF 
013a8     D0 E5 85 F1 | 	sub	objptr, ##22480
013ac     88 FF 9F FD | 	jmp	#LR__0054
013b0                 | LR__0055
013b0                 | LR__0056
013b0     01 24 86 F1 | 	sub	local04, #1
013b4     01 32 86 F1 | 	sub	local11, #1
013b8                 | LR__0057
013b8     01 24 06 F1 | 	add	local04, #1
013bc     19 25 52 F2 | 	cmps	local04, local11 wc
013c0     3C FE 9F CD |  if_b	jmp	#LR__0051
013c4     00 24 06 F6 | 	mov	local04, #0
013c8                 | '  
013c8                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
013c8                 | '  
013c8                 | ' i=0 : do
013c8                 | LR__0058
013c8     12 29 02 F6 | 	mov	local06, local04
013cc     03 28 66 F0 | 	shl	local06, #3
013d0     2B 00 00 FF 
013d4     D0 E5 05 F1 | 	add	objptr, ##22480
013d8     F2 28 02 F1 | 	add	local06, objptr
013dc     14 2B 02 FB | 	rdlong	local07, local06
013e0     26 00 00 FF 
013e4     B4 E4 05 F1 | 	add	objptr, ##19636
013e8     F2 2A 62 FC | 	wrlong	local07, objptr
013ec     12 29 02 F6 | 	mov	local06, local04
013f0     01 28 06 F1 | 	add	local06, #1
013f4     03 28 66 F0 | 	shl	local06, #3
013f8     26 00 00 FF 
013fc     B4 E4 85 F1 | 	sub	objptr, ##19636
01400     F2 28 02 F1 | 	add	local06, objptr
01404     14 2B 02 FB | 	rdlong	local07, local06
01408     26 00 00 FF 
0140c     B8 E4 05 F1 | 	add	objptr, ##19640
01410     F2 2A 62 FC | 	wrlong	local07, objptr
01414                 | '   if ((s1$=">" orelse s1$=">" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
01414     04 E4 85 F1 | 	sub	objptr, #4
01418     F2 12 02 FB | 	rdlong	arg01, objptr
0141c     52 00 00 FF 
01420     84 E4 85 F1 | 	sub	objptr, ##42116
01424     25 01 00 FF 
01428     DF 14 06 F6 | 	mov	arg02, ##@LR__4112
0142c     68 44 B1 FD | 	call	#__system___string_cmp
01430     00 FA 0D F2 | 	cmp	result1, #0 wz
01434     04 01 90 AD |  if_e	jmp	#LR__0059
01438     52 00 00 FF 
0143c     84 E4 05 F1 | 	add	objptr, ##42116
01440     F2 12 02 FB | 	rdlong	arg01, objptr
01444     52 00 00 FF 
01448     84 E4 85 F1 | 	sub	objptr, ##42116
0144c     25 01 00 FF 
01450     E1 14 06 F6 | 	mov	arg02, ##@LR__4113
01454     40 44 B1 FD | 	call	#__system___string_cmp
01458     FD 26 0A F6 | 	mov	local05, result1 wz
0145c     DC 00 90 AD |  if_e	jmp	#LR__0059
01460     52 00 00 FF 
01464     84 E4 05 F1 | 	add	objptr, ##42116
01468     F2 12 02 FB | 	rdlong	arg01, objptr
0146c     52 00 00 FF 
01470     84 E4 85 F1 | 	sub	objptr, ##42116
01474     25 01 00 FF 
01478     E3 14 06 F6 | 	mov	arg02, ##@LR__4114
0147c     18 44 B1 FD | 	call	#__system___string_cmp
01480     00 FA 0D F2 | 	cmp	result1, #0 wz
01484     B4 00 90 AD |  if_e	jmp	#LR__0059
01488     52 00 00 FF 
0148c     84 E4 05 F1 | 	add	objptr, ##42116
01490     F2 12 02 FB | 	rdlong	arg01, objptr
01494     52 00 00 FF 
01498     84 E4 85 F1 | 	sub	objptr, ##42116
0149c     25 01 00 FF 
014a0     E5 2E 06 F6 | 	mov	local09, ##@LR__4115
014a4     17 15 02 F6 | 	mov	arg02, local09
014a8     EC 43 B1 FD | 	call	#__system___string_cmp
014ac     00 FA 0D F2 | 	cmp	result1, #0 wz
014b0     88 00 90 AD |  if_e	jmp	#LR__0059
014b4     52 00 00 FF 
014b8     84 E4 05 F1 | 	add	objptr, ##42116
014bc     F2 12 02 FB | 	rdlong	arg01, objptr
014c0     52 00 00 FF 
014c4     84 E4 85 F1 | 	sub	objptr, ##42116
014c8     25 01 00 FF 
014cc     E7 36 06 F6 | 	mov	local13, ##@LR__4116
014d0     1B 2F 02 F6 | 	mov	local09, local13
014d4     17 15 02 F6 | 	mov	arg02, local09
014d8     BC 43 B1 FD | 	call	#__system___string_cmp
014dc     00 FA 0D F2 | 	cmp	result1, #0 wz
014e0     58 00 90 AD |  if_e	jmp	#LR__0059
014e4     52 00 00 FF 
014e8     84 E4 05 F1 | 	add	objptr, ##42116
014ec     F2 12 02 FB | 	rdlong	arg01, objptr
014f0     52 00 00 FF 
014f4     84 E4 85 F1 | 	sub	objptr, ##42116
014f8     25 01 00 FF 
014fc     E9 36 06 F6 | 	mov	local13, ##@LR__4117
01500     1B 15 02 F6 | 	mov	arg02, local13
01504     90 43 B1 FD | 	call	#__system___string_cmp
01508     FD 2E 0A F6 | 	mov	local09, result1 wz
0150c     2C 00 90 AD |  if_e	jmp	#LR__0059
01510     52 00 00 FF 
01514     84 E4 05 F1 | 	add	objptr, ##42116
01518     F2 12 02 FB | 	rdlong	arg01, objptr
0151c     52 00 00 FF 
01520     84 E4 85 F1 | 	sub	objptr, ##42116
01524     25 01 00 FF 
01528     EB 46 06 F6 | 	mov	local21, ##@LR__4118
0152c     23 15 02 F6 | 	mov	arg02, local21
01530     64 43 B1 FD | 	call	#__system___string_cmp
01534     FD 36 0A F6 | 	mov	local13, result1 wz
01538     30 00 90 5D |  if_ne	jmp	#LR__0060
0153c                 | LR__0059
0153c     52 00 00 FF 
01540     88 E4 05 F1 | 	add	objptr, ##42120
01544     F2 12 02 FB | 	rdlong	arg01, objptr
01548     52 00 00 FF 
0154c     88 E4 85 F1 | 	sub	objptr, ##42120
01550     25 01 00 FF 
01554     ED 48 06 F6 | 	mov	local22, ##@LR__4119
01558     24 4B 02 F6 | 	mov	local23, local22
0155c     25 15 02 F6 | 	mov	arg02, local23
01560     34 43 B1 FD | 	call	#__system___string_cmp
01564     FD 46 0A F6 | 	mov	local21, result1 wz
01568     18 01 90 AD |  if_e	jmp	#LR__0063
0156c                 | LR__0060
0156c     52 00 00 FF 
01570     84 E4 05 F1 | 	add	objptr, ##42116
01574     F2 12 02 FB | 	rdlong	arg01, objptr
01578     52 00 00 FF 
0157c     84 E4 85 F1 | 	sub	objptr, ##42116
01580     25 01 00 FF 
01584     EF 48 06 F6 | 	mov	local22, ##@LR__4120
01588     24 15 02 F6 | 	mov	arg02, local22
0158c     08 43 B1 FD | 	call	#__system___string_cmp
01590     FD 4A 0A F6 | 	mov	local23, result1 wz
01594     30 00 90 5D |  if_ne	jmp	#LR__0061
01598     52 00 00 FF 
0159c     88 E4 05 F1 | 	add	objptr, ##42120
015a0     F2 12 02 FB | 	rdlong	arg01, objptr
015a4     52 00 00 FF 
015a8     88 E4 85 F1 | 	sub	objptr, ##42120
015ac     25 01 00 FF 
015b0     F1 40 06 F6 | 	mov	local18, ##@LR__4121
015b4     20 3F 02 F6 | 	mov	local17, local18
015b8     1F 15 02 F6 | 	mov	arg02, local17
015bc     D8 42 B1 FD | 	call	#__system___string_cmp
015c0     FD 48 0A F6 | 	mov	local22, result1 wz
015c4     BC 00 90 AD |  if_e	jmp	#LR__0063
015c8                 | LR__0061
015c8     52 00 00 FF 
015cc     84 E4 05 F1 | 	add	objptr, ##42116
015d0     F2 12 02 FB | 	rdlong	arg01, objptr
015d4     52 00 00 FF 
015d8     84 E4 85 F1 | 	sub	objptr, ##42116
015dc     25 01 00 FF 
015e0     F3 40 06 F6 | 	mov	local18, ##@LR__4122
015e4     20 15 02 F6 | 	mov	arg02, local18
015e8     AC 42 B1 FD | 	call	#__system___string_cmp
015ec     FD 3E 0A F6 | 	mov	local17, result1 wz
015f0     30 00 90 5D |  if_ne	jmp	#LR__0062
015f4     52 00 00 FF 
015f8     88 E4 05 F1 | 	add	objptr, ##42120
015fc     F2 12 02 FB | 	rdlong	arg01, objptr
01600     52 00 00 FF 
01604     88 E4 85 F1 | 	sub	objptr, ##42120
01608     25 01 00 FF 
0160c     F5 4C 06 F6 | 	mov	local24, ##@LR__4123
01610     26 43 02 F6 | 	mov	local19, local24
01614     21 15 02 F6 | 	mov	arg02, local19
01618     7C 42 B1 FD | 	call	#__system___string_cmp
0161c     FD 40 0A F6 | 	mov	local18, result1 wz
01620     60 00 90 AD |  if_e	jmp	#LR__0063
01624                 | LR__0062
01624     52 00 00 FF 
01628     84 E4 05 F1 | 	add	objptr, ##42116
0162c     F2 12 02 FB | 	rdlong	arg01, objptr
01630     52 00 00 FF 
01634     84 E4 85 F1 | 	sub	objptr, ##42116
01638     25 01 00 FF 
0163c     F7 4E 06 F6 | 	mov	local25, ##@LR__4124
01640     27 4D 02 F6 | 	mov	local24, local25
01644     26 15 02 F6 | 	mov	arg02, local24
01648     4C 42 B1 FD | 	call	#__system___string_cmp
0164c     FD 42 0A F6 | 	mov	local19, result1 wz
01650     10 01 90 5D |  if_ne	jmp	#LR__0067
01654     52 00 00 FF 
01658     88 E4 05 F1 | 	add	objptr, ##42120
0165c     F2 12 02 FB | 	rdlong	arg01, objptr
01660     52 00 00 FF 
01664     88 E4 85 F1 | 	sub	objptr, ##42120
01668     25 01 00 FF 
0166c     F9 50 06 F6 | 	mov	local26, ##@LR__4125
01670     28 4F 02 F6 | 	mov	local25, local26
01674     27 15 02 F6 | 	mov	arg02, local25
01678     1C 42 B1 FD | 	call	#__system___string_cmp
0167c     FD 4C 0A F6 | 	mov	local24, result1 wz
01680     E0 00 90 5D |  if_ne	jmp	#LR__0067
01684                 | LR__0063
01684     12 29 02 F6 | 	mov	local06, local04
01688     03 28 66 F0 | 	shl	local06, #3
0168c     2B 00 00 FF 
01690     D0 E5 05 F1 | 	add	objptr, ##22480
01694     F2 28 02 F1 | 	add	local06, objptr
01698     26 00 00 FF 
0169c     B4 E4 05 F1 | 	add	objptr, ##19636
016a0     F2 12 02 FB | 	rdlong	arg01, objptr
016a4     04 E4 05 F1 | 	add	objptr, #4
016a8     F2 36 02 FB | 	rdlong	local13, objptr
016ac     52 00 00 FF 
016b0     88 E4 85 F1 | 	sub	objptr, ##42120
016b4     1B 2F 02 F6 | 	mov	local09, local13
016b8     17 15 02 F6 | 	mov	arg02, local09
016bc     0C 42 B1 FD | 	call	#__system___string_concat
016c0     14 FB 61 FC | 	wrlong	result1, local06
016c4                 | '     lparts(i).part$=s1$+s2$
016c4                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
016c4     12 31 02 F6 | 	mov	local10, local04
016c8     01 30 06 F1 | 	add	local10, #1
016cc     19 53 02 F6 | 	mov	local27, local11
016d0     01 52 06 F1 | 	add	local27, #1
016d4     97 42 48 FB | 	callpa	#(@LR__0065-@LR__0064)>>2,fcache_load_ptr_
016d8                 | LR__0064
016d8     29 31 52 F2 | 	cmps	local10, local27 wc
016dc     7C 00 90 3D |  if_ae	jmp	#LR__0066
016e0     18 3D 02 F6 | 	mov	local16, local10
016e4     01 3C 06 F1 | 	add	local16, #1
016e8     03 3C 66 F0 | 	shl	local16, #3
016ec     2B 00 00 FF 
016f0     D0 E5 05 F1 | 	add	objptr, ##22480
016f4     F2 3C 02 F1 | 	add	local16, objptr
016f8     1E 1F 02 FB | 	rdlong	local01, local16
016fc     18 2B 02 F6 | 	mov	local07, local10
01700     01 2A 06 F1 | 	add	local07, #1
01704     03 2A 66 F0 | 	shl	local07, #3
01708     F2 2A 02 F1 | 	add	local07, objptr
0170c     04 2A 06 F1 | 	add	local07, #4
01710     15 27 02 FB | 	rdlong	local05, local07
01714     18 2B 02 F6 | 	mov	local07, local10
01718     03 2A 66 F0 | 	shl	local07, #3
0171c     F2 2E 02 F6 | 	mov	local09, objptr
01720     F2 2A 02 F1 | 	add	local07, objptr
01724     15 1F 62 FC | 	wrlong	local01, local07
01728     18 37 02 F6 | 	mov	local13, local10
0172c     1B 47 02 F6 | 	mov	local21, local13
01730     23 4B 02 F6 | 	mov	local23, local21
01734     03 4A 66 F0 | 	shl	local23, #3
01738     F2 48 02 F6 | 	mov	local22, objptr
0173c     F2 4A 02 F1 | 	add	local23, objptr
01740     04 4A 06 F1 | 	add	local23, #4
01744     25 27 62 FC | 	wrlong	local05, local23
01748     04 4A 86 F1 | 	sub	local23, #4
0174c     01 30 06 F1 | 	add	local10, #1
01750     2B 00 00 FF 
01754     D0 E5 85 F1 | 	sub	objptr, ##22480
01758     7C FF 9F FD | 	jmp	#LR__0064
0175c                 | LR__0065
0175c                 | LR__0066
0175c     01 24 86 F1 | 	sub	local04, #1
01760     01 32 86 F1 | 	sub	local11, #1
01764                 | LR__0067
01764     01 24 06 F1 | 	add	local04, #1
01768     19 25 52 F2 | 	cmps	local04, local11 wc
0176c     58 FC 9F CD |  if_b	jmp	#LR__0058
01770                 | '  
01770                 | ' ' 1f : now remove parts that are spaces
01770                 | ' 
01770                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
01770     00 24 06 F6 | 	mov	local04, #0
01774     19 55 02 F6 | 	mov	local28, local11
01778     01 54 06 F1 | 	add	local28, #1
0177c                 | LR__0068
0177c     2A 25 52 F2 | 	cmps	local04, local28 wc
01780     50 00 90 3D |  if_ae	jmp	#LR__0069
01784     12 29 02 F6 | 	mov	local06, local04
01788     03 28 66 F0 | 	shl	local06, #3
0178c     2B 00 00 FF 
01790     D0 E5 05 F1 | 	add	objptr, ##22480
01794     F2 28 02 F1 | 	add	local06, objptr
01798     12 2F 02 F6 | 	mov	local09, local04
0179c     17 37 02 F6 | 	mov	local13, local09
017a0     1B 47 02 F6 | 	mov	local21, local13
017a4     03 46 66 F0 | 	shl	local21, #3
017a8     F2 4A 02 F6 | 	mov	local23, objptr
017ac     F2 46 02 F1 | 	add	local21, objptr
017b0     23 13 02 FB | 	rdlong	arg01, local21
017b4     2B 00 00 FF 
017b8     D0 E5 85 F1 | 	sub	objptr, ##22480
017bc     F4 64 B1 FD | 	call	#__system__RTrim_S
017c0     FD 12 02 F6 | 	mov	arg01, result1
017c4     2C 64 B1 FD | 	call	#__system__LTrim_S
017c8     14 FB 61 FC | 	wrlong	result1, local06
017cc     01 24 06 F1 | 	add	local04, #1
017d0     A8 FF 9F FD | 	jmp	#LR__0068
017d4                 | LR__0069
017d4     00 24 06 F6 | 	mov	local04, #0
017d8     97 8A 48 FB | 	callpa	#(@LR__0076-@LR__0070)>>2,fcache_load_ptr_
017dc                 | ' 
017dc                 | ' i=0
017dc                 | ' do 
017dc                 | LR__0070
017dc                 | '   if len(lparts(i).part$)=0 then 
017dc     12 3D 02 F6 | 	mov	local16, local04
017e0     03 3C 66 F0 | 	shl	local16, #3
017e4     2B 00 00 FF 
017e8     D0 E5 05 F1 | 	add	objptr, ##22480
017ec     F2 2A 02 F6 | 	mov	local07, objptr
017f0     F2 3C 02 F1 | 	add	local16, objptr
017f4     1E 13 02 FB | 	rdlong	arg01, local16
017f8     2B 00 00 FF 
017fc     D0 E5 85 F1 | 	sub	objptr, ##22480
01800     09 2D 02 F6 | 	mov	local08, arg01
01804                 | LR__0071
01804     16 FB C9 FA | 	rdbyte	result1, local08 wz
01808     01 2C 06 51 |  if_ne	add	local08, #1
0180c     F4 FF 9F 5D |  if_ne	jmp	#LR__0071
01810     09 2D 8A F1 | 	sub	local08, arg01 wz
01814     C4 00 90 5D |  if_ne	jmp	#LR__0075
01818                 | '     if i=k-1 then k-=1  :  exit
01818     19 1F 02 F6 | 	mov	local01, local11
0181c     01 1E 86 F1 | 	sub	local01, #1
01820     0F 25 0A F2 | 	cmp	local04, local01 wz
01824     01 32 86 A1 |  if_e	sub	local11, #1
01828     C4 00 90 AD |  if_e	jmp	#LR__0077
0182c                 | '     if i<k-1 then 
0182c     19 1F 02 F6 | 	mov	local01, local11
01830     01 1E 86 F1 | 	sub	local01, #1
01834     0F 25 52 F2 | 	cmps	local04, local01 wc
01838     A0 00 90 3D |  if_ae	jmp	#LR__0074
0183c                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
0183c     12 31 02 F6 | 	mov	local10, local04
01840     19 57 02 F6 | 	mov	local29, local11
01844     01 56 86 F1 | 	sub	local29, #1
01848                 | LR__0072
01848     2B 31 52 F2 | 	cmps	local10, local29 wc
0184c     80 00 90 3D |  if_ae	jmp	#LR__0073
01850     18 3D 02 F6 | 	mov	local16, local10
01854     01 3C 06 F1 | 	add	local16, #1
01858     03 3C 66 F0 | 	shl	local16, #3
0185c     2B 00 00 FF 
01860     D0 E5 05 F1 | 	add	objptr, ##22480
01864     F2 3C 02 F1 | 	add	local16, objptr
01868     1E 1F 02 FB | 	rdlong	local01, local16
0186c     18 2B 02 F6 | 	mov	local07, local10
01870     01 2A 06 F1 | 	add	local07, #1
01874     03 2A 66 F0 | 	shl	local07, #3
01878     F2 2A 02 F1 | 	add	local07, objptr
0187c     04 2A 06 F1 | 	add	local07, #4
01880     15 27 02 FB | 	rdlong	local05, local07
01884     18 29 02 F6 | 	mov	local06, local10
01888     14 2B 02 F6 | 	mov	local07, local06
0188c     03 2A 66 F0 | 	shl	local07, #3
01890     F2 2E 02 F6 | 	mov	local09, objptr
01894     F2 2A 02 F1 | 	add	local07, objptr
01898     15 1F 62 FC | 	wrlong	local01, local07
0189c     18 37 02 F6 | 	mov	local13, local10
018a0     1B 47 02 F6 | 	mov	local21, local13
018a4     23 4B 02 F6 | 	mov	local23, local21
018a8     03 4A 66 F0 | 	shl	local23, #3
018ac     F2 48 02 F6 | 	mov	local22, objptr
018b0     F2 4A 02 F1 | 	add	local23, objptr
018b4     04 4A 06 F1 | 	add	local23, #4
018b8     25 27 62 FC | 	wrlong	local05, local23
018bc     04 4A 86 F1 | 	sub	local23, #4
018c0     01 30 06 F1 | 	add	local10, #1
018c4     2B 00 00 FF 
018c8     D0 E5 85 F1 | 	sub	objptr, ##22480
018cc     78 FF 9F FD | 	jmp	#LR__0072
018d0                 | LR__0073
018d0     01 32 86 F1 | 	sub	local11, #1
018d4                 | '       if i>0 then i-=1 
018d4     01 24 56 F2 | 	cmps	local04, #1 wc
018d8     01 24 86 31 |  if_ae	sub	local04, #1
018dc                 | LR__0074
018dc                 | LR__0075
018dc     01 24 06 F1 | 	add	local04, #1
018e0     19 1F 02 F6 | 	mov	local01, local11
018e4     01 1E 86 F1 | 	sub	local01, #1
018e8     0F 25 5A F2 | 	cmps	local04, local01 wcz
018ec     EC FE 9F ED |  if_be	jmp	#LR__0070
018f0                 | LR__0076
018f0                 | LR__0077
018f0                 | ' 
018f0                 | ' ' 1g: lowercase all that is not a string
018f0                 | ' 
018f0                 | ' for j=0 to k-1
018f0     00 30 06 F6 | 	mov	local10, #0
018f4     19 59 02 F6 | 	mov	local30, local11
018f8                 | LR__0078
018f8     2C 31 52 F2 | 	cmps	local10, local30 wc
018fc     D0 00 90 3D |  if_ae	jmp	#LR__0081
01900                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01900     18 3D 02 F6 | 	mov	local16, local10
01904     03 3C 66 F0 | 	shl	local16, #3
01908     2B 00 00 FF 
0190c     D0 E5 05 F1 | 	add	objptr, ##22480
01910     F2 2A 02 F6 | 	mov	local07, objptr
01914     F2 3C 02 F1 | 	add	local16, objptr
01918     1E 13 02 FB | 	rdlong	arg01, local16
0191c     01 14 06 F6 | 	mov	arg02, #1
01920     2B 00 00 FF 
01924     D0 E5 85 F1 | 	sub	objptr, ##22480
01928     54 5F B1 FD | 	call	#__system__Left_S
0192c     FD 12 02 F6 | 	mov	arg01, result1
01930     25 01 00 FF 
01934     FB 14 06 F6 | 	mov	arg02, ##@LR__4126
01938     5C 3F B1 FD | 	call	#__system___string_cmp
0193c     00 FA 0D F2 | 	cmp	result1, #0 wz
01940     44 00 90 5D |  if_ne	jmp	#LR__0079
01944     18 2B 02 F6 | 	mov	local07, local10
01948     03 2A 66 F0 | 	shl	local07, #3
0194c     2B 00 00 FF 
01950     D0 E5 05 F1 | 	add	objptr, ##22480
01954     F2 2E 02 F6 | 	mov	local09, objptr
01958     F2 2A 02 F1 | 	add	local07, objptr
0195c     15 13 02 FB | 	rdlong	arg01, local07
01960     01 14 06 F6 | 	mov	arg02, #1
01964     2B 00 00 FF 
01968     D0 E5 85 F1 | 	sub	objptr, ##22480
0196c     98 5F B1 FD | 	call	#__system__Right_S
01970     FD 12 02 F6 | 	mov	arg01, result1
01974     25 01 00 FF 
01978     FD 14 06 F6 | 	mov	arg02, ##@LR__4127
0197c     18 3F B1 FD | 	call	#__system___string_cmp
01980     00 FA 0D F2 | 	cmp	result1, #0 wz
01984     40 00 90 AD |  if_e	jmp	#LR__0080
01988                 | LR__0079
01988     18 29 02 F6 | 	mov	local06, local10
0198c     03 28 66 F0 | 	shl	local06, #3
01990     2B 00 00 FF 
01994     D0 E5 05 F1 | 	add	objptr, ##22480
01998     F2 28 02 F1 | 	add	local06, objptr
0199c     18 2F 02 F6 | 	mov	local09, local10
019a0     17 37 02 F6 | 	mov	local13, local09
019a4     1B 47 02 F6 | 	mov	local21, local13
019a8     03 46 66 F0 | 	shl	local21, #3
019ac     F2 4A 02 F6 | 	mov	local23, objptr
019b0     F2 46 02 F1 | 	add	local21, objptr
019b4     23 13 02 FB | 	rdlong	arg01, local21
019b8     2B 00 00 FF 
019bc     D0 E5 85 F1 | 	sub	objptr, ##22480
019c0     70 61 B1 FD | 	call	#__system__LCase_S
019c4     14 FB 61 FC | 	wrlong	result1, local06
019c8                 | LR__0080
019c8     01 30 06 F1 | 	add	local10, #1
019cc     28 FF 9F FD | 	jmp	#LR__0078
019d0                 | LR__0081
019d0                 | ' 
019d0                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
019d0                 | ' 
019d0                 | ' for i=0 to k: lparts(i).token=-1: next i
019d0     00 24 06 F6 | 	mov	local04, #0
019d4     19 5B 02 F6 | 	mov	local31, local11
019d8     01 5A 06 F1 | 	add	local31, #1
019dc     97 1C 48 FB | 	callpa	#(@LR__0083-@LR__0082)>>2,fcache_load_ptr_
019e0                 | LR__0082
019e0     2D 25 52 F2 | 	cmps	local04, local31 wc
019e4     30 00 90 3D |  if_ae	jmp	#LR__0084
019e8     12 29 02 F6 | 	mov	local06, local04
019ec     03 28 66 F0 | 	shl	local06, #3
019f0     2B 00 00 FF 
019f4     D0 E5 05 F1 | 	add	objptr, ##22480
019f8     F2 28 02 F1 | 	add	local06, objptr
019fc     04 28 06 F1 | 	add	local06, #4
01a00     FF FF FF FF 
01a04     14 FF 6B FC | 	wrlong	##-1, local06
01a08     01 24 06 F1 | 	add	local04, #1
01a0c     2B 00 00 FF 
01a10     D0 E5 85 F1 | 	sub	objptr, ##22480
01a14     C8 FF 9F FD | 	jmp	#LR__0082
01a18                 | LR__0083
01a18                 | LR__0084
01a18                 | ' 
01a18                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01a18                 | ' 
01a18                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01a18     2B 00 00 FF 
01a1c     D0 E5 05 F1 | 	add	objptr, ##22480
01a20     F2 12 02 FB | 	rdlong	arg01, objptr
01a24     2B 00 00 FF 
01a28     D0 E5 85 F1 | 	sub	objptr, ##22480
01a2c     09 2D 02 F6 | 	mov	local08, arg01
01a30     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01a34                 | LR__0085
01a34     16 FB C9 FA | 	rdbyte	result1, local08 wz
01a38     01 2C 06 51 |  if_ne	add	local08, #1
01a3c     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01a40                 | LR__0086
01a40     09 2D 8A F1 | 	sub	local08, arg01 wz
01a44     3C 0D 90 AD |  if_e	jmp	#LR__0119
01a48                 | ' 
01a48                 | ' ' 2a find part types 
01a48                 | ' 
01a48                 | ' for i=0 to k-1
01a48     00 24 06 F6 | 	mov	local04, #0
01a4c     19 5D 02 F6 | 	mov	local32, local11
01a50                 | LR__0087
01a50     2E 25 52 F2 | 	cmps	local04, local32 wc
01a54     9C 05 90 3D |  if_ae	jmp	#LR__0096
01a58     12 29 02 F6 | 	mov	local06, local04
01a5c     03 28 66 F0 | 	shl	local06, #3
01a60     2B 00 00 FF 
01a64     D0 E5 05 F1 | 	add	objptr, ##22480
01a68     F2 28 02 F1 | 	add	local06, objptr
01a6c     12 37 02 F6 | 	mov	local13, local04
01a70     1B 47 02 F6 | 	mov	local21, local13
01a74     23 4B 02 F6 | 	mov	local23, local21
01a78     03 4A 66 F0 | 	shl	local23, #3
01a7c     F2 48 02 F6 | 	mov	local22, objptr
01a80     F2 4A 02 F1 | 	add	local23, objptr
01a84     25 13 02 FB | 	rdlong	arg01, local23
01a88     2B 00 00 FF 
01a8c     D0 E5 85 F1 | 	sub	objptr, ##22480
01a90     FC 0F B0 FD | 	call	#_isseparator
01a94     FD FA E1 F8 | 	getbyte	result1, result1, #0
01a98     04 28 06 F1 | 	add	local06, #4
01a9c     14 FB 61 FC | 	wrlong	result1, local06
01aa0                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
01aa0     12 29 02 F6 | 	mov	local06, local04
01aa4     03 28 66 F0 | 	shl	local06, #3
01aa8     2B 00 00 FF 
01aac     D0 E5 05 F1 | 	add	objptr, ##22480
01ab0     F2 28 02 F1 | 	add	local06, objptr
01ab4     04 28 06 F1 | 	add	local06, #4
01ab8     14 2F 02 FB | 	rdlong	local09, local06
01abc     01 2E 56 F2 | 	cmps	local09, #1 wc
01ac0     2B 00 00 FF 
01ac4     D0 E5 85 F1 | 	sub	objptr, ##22480
01ac8     20 05 90 3D |  if_ae	jmp	#LR__0095
01acc     12 29 02 F6 | 	mov	local06, local04
01ad0     03 28 66 F0 | 	shl	local06, #3
01ad4     2B 00 00 FF 
01ad8     D0 E5 05 F1 | 	add	objptr, ##22480
01adc     F2 28 02 F1 | 	add	local06, objptr
01ae0     12 37 02 F6 | 	mov	local13, local04
01ae4     1B 47 02 F6 | 	mov	local21, local13
01ae8     23 4B 02 F6 | 	mov	local23, local21
01aec     03 4A 66 F0 | 	shl	local23, #3
01af0     F2 48 02 F6 | 	mov	local22, objptr
01af4     F2 4A 02 F1 | 	add	local23, objptr
01af8     25 13 02 FB | 	rdlong	arg01, local23
01afc     2B 00 00 FF 
01b00     D0 E5 85 F1 | 	sub	objptr, ##22480
01b04     A8 0C B0 FD | 	call	#_isoperator
01b08     FD FA E1 F8 | 	getbyte	result1, result1, #0
01b0c     04 28 06 F1 | 	add	local06, #4
01b10     14 FB 61 FC | 	wrlong	result1, local06
01b14                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
01b14     12 29 02 F6 | 	mov	local06, local04
01b18     03 28 66 F0 | 	shl	local06, #3
01b1c     2B 00 00 FF 
01b20     D0 E5 05 F1 | 	add	objptr, ##22480
01b24     F2 28 02 F1 | 	add	local06, objptr
01b28     04 28 06 F1 | 	add	local06, #4
01b2c     14 2F 02 FB | 	rdlong	local09, local06
01b30     01 2E 56 F2 | 	cmps	local09, #1 wc
01b34     2B 00 00 FF 
01b38     D0 E5 85 F1 | 	sub	objptr, ##22480
01b3c     AC 04 90 3D |  if_ae	jmp	#LR__0095
01b40     12 29 02 F6 | 	mov	local06, local04
01b44     03 28 66 F0 | 	shl	local06, #3
01b48     2B 00 00 FF 
01b4c     D0 E5 05 F1 | 	add	objptr, ##22480
01b50     F2 28 02 F1 | 	add	local06, objptr
01b54     12 37 02 F6 | 	mov	local13, local04
01b58     1B 47 02 F6 | 	mov	local21, local13
01b5c     23 4B 02 F6 | 	mov	local23, local21
01b60     03 4A 66 F0 | 	shl	local23, #3
01b64     F2 48 02 F6 | 	mov	local22, objptr
01b68     F2 4A 02 F1 | 	add	local23, objptr
01b6c     25 13 02 FB | 	rdlong	arg01, local23
01b70     2B 00 00 FF 
01b74     D0 E5 85 F1 | 	sub	objptr, ##22480
01b78                 | ' 
01b78                 | ' select case s
01b78     25 01 00 FF 
01b7c     C6 15 06 F6 | 	mov	arg02, ##@LR__4184
01b80     14 3D B1 FD | 	call	#__system___string_cmp
01b84     00 FA 0D F2 | 	cmp	result1, #0 wz
01b88     1B FA 05 A6 |  if_e	mov	result1, #27
01b8c     00 FA 05 56 |  if_ne	mov	result1, #0
01b90     FD FA E1 F8 | 	getbyte	result1, result1, #0
01b94     04 28 06 F1 | 	add	local06, #4
01b98     14 FB 61 FC | 	wrlong	result1, local06
01b9c                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
01b9c     12 29 02 F6 | 	mov	local06, local04
01ba0     03 28 66 F0 | 	shl	local06, #3
01ba4     2B 00 00 FF 
01ba8     D0 E5 05 F1 | 	add	objptr, ##22480
01bac     F2 28 02 F1 | 	add	local06, objptr
01bb0     04 28 06 F1 | 	add	local06, #4
01bb4     14 2F 02 FB | 	rdlong	local09, local06
01bb8     01 2E 56 F2 | 	cmps	local09, #1 wc
01bbc     2B 00 00 FF 
01bc0     D0 E5 85 F1 | 	sub	objptr, ##22480
01bc4     24 04 90 3D |  if_ae	jmp	#LR__0095
01bc8     12 29 02 F6 | 	mov	local06, local04
01bcc     03 28 66 F0 | 	shl	local06, #3
01bd0     2B 00 00 FF 
01bd4     D0 E5 05 F1 | 	add	objptr, ##22480
01bd8     F2 28 02 F1 | 	add	local06, objptr
01bdc     12 37 02 F6 | 	mov	local13, local04
01be0     1B 47 02 F6 | 	mov	local21, local13
01be4     23 4B 02 F6 | 	mov	local23, local21
01be8     03 4A 66 F0 | 	shl	local23, #3
01bec     F2 48 02 F6 | 	mov	local22, objptr
01bf0     F2 4A 02 F1 | 	add	local23, objptr
01bf4     25 13 02 FB | 	rdlong	arg01, local23
01bf8     2B 00 00 FF 
01bfc     D0 E5 85 F1 | 	sub	objptr, ##22480
01c00     8C 10 B0 FD | 	call	#_iscommand
01c04     FD FA E1 F8 | 	getbyte	result1, result1, #0
01c08     04 28 06 F1 | 	add	local06, #4
01c0c     14 FB 61 FC | 	wrlong	result1, local06
01c10                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
01c10     12 29 02 F6 | 	mov	local06, local04
01c14     03 28 66 F0 | 	shl	local06, #3
01c18     2B 00 00 FF 
01c1c     D0 E5 05 F1 | 	add	objptr, ##22480
01c20     F2 28 02 F1 | 	add	local06, objptr
01c24     04 28 06 F1 | 	add	local06, #4
01c28     14 2F 02 FB | 	rdlong	local09, local06
01c2c     01 2E 56 F2 | 	cmps	local09, #1 wc
01c30     2B 00 00 FF 
01c34     D0 E5 85 F1 | 	sub	objptr, ##22480
01c38     B0 03 90 3D |  if_ae	jmp	#LR__0095
01c3c     12 29 02 F6 | 	mov	local06, local04
01c40     03 28 66 F0 | 	shl	local06, #3
01c44     2B 00 00 FF 
01c48     D0 E5 05 F1 | 	add	objptr, ##22480
01c4c     F2 28 02 F1 | 	add	local06, objptr
01c50     12 37 02 F6 | 	mov	local13, local04
01c54     1B 47 02 F6 | 	mov	local21, local13
01c58     23 4B 02 F6 | 	mov	local23, local21
01c5c     03 4A 66 F0 | 	shl	local23, #3
01c60     F2 48 02 F6 | 	mov	local22, objptr
01c64     F2 4A 02 F1 | 	add	local23, objptr
01c68     25 13 02 FB | 	rdlong	arg01, local23
01c6c     2B 00 00 FF 
01c70     D0 E5 85 F1 | 	sub	objptr, ##22480
01c74     38 16 B0 FD | 	call	#_isfunction
01c78     FD FA E1 F8 | 	getbyte	result1, result1, #0
01c7c     04 28 06 F1 | 	add	local06, #4
01c80     14 FB 61 FC | 	wrlong	result1, local06
01c84                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
01c84     12 29 02 F6 | 	mov	local06, local04
01c88     03 28 66 F0 | 	shl	local06, #3
01c8c     2B 00 00 FF 
01c90     D0 E5 05 F1 | 	add	objptr, ##22480
01c94     F2 28 02 F1 | 	add	local06, objptr
01c98     04 28 06 F1 | 	add	local06, #4
01c9c     14 2F 02 FB | 	rdlong	local09, local06
01ca0     01 2E 56 F2 | 	cmps	local09, #1 wc
01ca4     2B 00 00 FF 
01ca8     D0 E5 85 F1 | 	sub	objptr, ##22480
01cac     3C 03 90 3D |  if_ae	jmp	#LR__0095
01cb0     12 3D 02 F6 | 	mov	local16, local04
01cb4     03 3C 66 F0 | 	shl	local16, #3
01cb8     2B 00 00 FF 
01cbc     D0 E5 05 F1 | 	add	objptr, ##22480
01cc0     F2 3C 02 F1 | 	add	local16, objptr
01cc4     1E 13 02 FB | 	rdlong	arg01, local16
01cc8     2B 00 00 FF 
01ccc     D0 E5 85 F1 | 	sub	objptr, ##22480
01cd0     10 1A B0 FD | 	call	#_isnum
01cd4     FD 1E 02 F6 | 	mov	local01, result1
01cd8     52 00 00 FF 
01cdc     8C E4 05 F1 | 	add	objptr, ##42124
01ce0     F2 1E 62 FC | 	wrlong	local01, objptr
01ce4     12 3D 02 F6 | 	mov	local16, local04
01ce8     03 3C 66 F0 | 	shl	local16, #3
01cec     26 00 00 FF 
01cf0     BC E4 85 F1 | 	sub	objptr, ##19644
01cf4     F2 3C 02 F1 | 	add	local16, objptr
01cf8     1E 13 02 FB | 	rdlong	arg01, local16
01cfc     2B 00 00 FF 
01d00     D0 E5 85 F1 | 	sub	objptr, ##22480
01d04     B4 1C B0 FD | 	call	#_isint
01d08     FD 1E 02 F6 | 	mov	local01, result1
01d0c     52 00 00 FF 
01d10     90 E4 05 F1 | 	add	objptr, ##42128
01d14     F2 1E 62 FC | 	wrlong	local01, objptr
01d18     12 3D 02 F6 | 	mov	local16, local04
01d1c     03 3C 66 F0 | 	shl	local16, #3
01d20     26 00 00 FF 
01d24     C0 E4 85 F1 | 	sub	objptr, ##19648
01d28     F2 2A 02 F6 | 	mov	local07, objptr
01d2c     F2 3C 02 F1 | 	add	local16, objptr
01d30     1E 13 02 FB | 	rdlong	arg01, local16
01d34     2B 00 00 FF 
01d38     D0 E5 85 F1 | 	sub	objptr, ##22480
01d3c     D4 1D B0 FD | 	call	#_isdec
01d40     52 00 00 FF 
01d44     94 E4 05 F1 | 	add	objptr, ##42132
01d48     F2 FA 61 FC | 	wrlong	result1, objptr
01d4c                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
01d4c     08 E4 85 F1 | 	sub	objptr, #8
01d50     F2 1E 0A FB | 	rdlong	local01, objptr wz
01d54     52 00 00 FF 
01d58     8C E4 85 F1 | 	sub	objptr, ##42124
01d5c     60 00 90 AD |  if_e	jmp	#LR__0088
01d60     52 00 00 FF 
01d64     90 E4 05 F1 | 	add	objptr, ##42128
01d68     F2 28 0A FB | 	rdlong	local06, objptr wz
01d6c     52 00 00 FF 
01d70     90 E4 85 F1 | 	sub	objptr, ##42128
01d74     48 00 90 AD |  if_e	jmp	#LR__0088
01d78     52 00 00 FF 
01d7c     94 E4 05 F1 | 	add	objptr, ##42132
01d80     F2 2E 0A FB | 	rdlong	local09, objptr wz
01d84     52 00 00 FF 
01d88     94 E4 85 F1 | 	sub	objptr, ##42132
01d8c     30 00 90 AD |  if_e	jmp	#LR__0088
01d90     12 27 02 F6 | 	mov	local05, local04
01d94     13 29 02 F6 | 	mov	local06, local05
01d98     03 28 66 F0 | 	shl	local06, #3
01d9c     2B 00 00 FF 
01da0     D0 E5 05 F1 | 	add	objptr, ##22480
01da4     F2 28 02 F1 | 	add	local06, objptr
01da8     04 28 06 F1 | 	add	local06, #4
01dac     01 00 80 FF 
01db0     14 01 68 FC | 	wrlong	##512, local06
01db4     2B 00 00 FF 
01db8     D0 E5 85 F1 | 	sub	objptr, ##22480
01dbc     2C 02 90 FD | 	jmp	#LR__0095
01dc0                 | LR__0088
01dc0                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
01dc0     52 00 00 FF 
01dc4     8C E4 05 F1 | 	add	objptr, ##42124
01dc8     F2 1E 0A FB | 	rdlong	local01, objptr wz
01dcc     52 00 00 FF 
01dd0     8C E4 85 F1 | 	sub	objptr, ##42124
01dd4     64 00 90 AD |  if_e	jmp	#LR__0089
01dd8     52 00 00 FF 
01ddc     90 E4 05 F1 | 	add	objptr, ##42128
01de0     F2 28 0A FB | 	rdlong	local06, objptr wz
01de4     52 00 00 FF 
01de8     90 E4 85 F1 | 	sub	objptr, ##42128
01dec     52 00 00 5F 
01df0     94 E4 05 51 |  if_ne	add	objptr, ##42132
01df4     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
01df8     52 00 00 5F 
01dfc     94 E4 85 51 |  if_ne	sub	objptr, ##42132
01e00     17 2B 22 56 |  if_ne	not	local07, local09
01e04     00 2A 0E 52 |  if_ne	cmp	local07, #0 wz
01e08     30 00 90 AD |  if_e	jmp	#LR__0089
01e0c     12 27 02 F6 | 	mov	local05, local04
01e10     13 29 02 F6 | 	mov	local06, local05
01e14     03 28 66 F0 | 	shl	local06, #3
01e18     2B 00 00 FF 
01e1c     D0 E5 05 F1 | 	add	objptr, ##22480
01e20     F2 28 02 F1 | 	add	local06, objptr
01e24     04 28 06 F1 | 	add	local06, #4
01e28     01 00 80 FF 
01e2c     14 03 68 FC | 	wrlong	##513, local06
01e30     2B 00 00 FF 
01e34     D0 E5 85 F1 | 	sub	objptr, ##22480
01e38     B0 01 90 FD | 	jmp	#LR__0095
01e3c                 | LR__0089
01e3c                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
01e3c     52 00 00 FF 
01e40     8C E4 05 F1 | 	add	objptr, ##42124
01e44     F2 1E 0A FB | 	rdlong	local01, objptr wz
01e48     52 00 00 FF 
01e4c     8C E4 85 F1 | 	sub	objptr, ##42124
01e50     52 00 00 5F 
01e54     90 E4 05 51 |  if_ne	add	objptr, ##42128
01e58     F2 28 02 5B |  if_ne	rdlong	local06, objptr
01e5c     52 00 00 5F 
01e60     90 E4 85 51 |  if_ne	sub	objptr, ##42128
01e64     14 29 22 56 |  if_ne	not	local06, local06
01e68     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
01e6c     52 00 00 5F 
01e70     94 E4 05 51 |  if_ne	add	objptr, ##42132
01e74     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
01e78     52 00 00 5F 
01e7c     94 E4 85 51 |  if_ne	sub	objptr, ##42132
01e80     17 2B 22 56 |  if_ne	not	local07, local09
01e84     00 2A 0E 52 |  if_ne	cmp	local07, #0 wz
01e88     30 00 90 AD |  if_e	jmp	#LR__0090
01e8c     12 27 02 F6 | 	mov	local05, local04
01e90     13 29 02 F6 | 	mov	local06, local05
01e94     03 28 66 F0 | 	shl	local06, #3
01e98     2B 00 00 FF 
01e9c     D0 E5 05 F1 | 	add	objptr, ##22480
01ea0     F2 28 02 F1 | 	add	local06, objptr
01ea4     04 28 06 F1 | 	add	local06, #4
01ea8     01 00 80 FF 
01eac     14 05 68 FC | 	wrlong	##514, local06
01eb0     2B 00 00 FF 
01eb4     D0 E5 85 F1 | 	sub	objptr, ##22480
01eb8     30 01 90 FD | 	jmp	#LR__0095
01ebc                 | LR__0090
01ebc                 | ' 
01ebc                 | ' if isstring(lparts(i).part$) then 
01ebc     12 3D 02 F6 | 	mov	local16, local04
01ec0     03 3C 66 F0 | 	shl	local16, #3
01ec4     2B 00 00 FF 
01ec8     D0 E5 05 F1 | 	add	objptr, ##22480
01ecc     F2 3C 02 F1 | 	add	local16, objptr
01ed0     1E 13 02 FB | 	rdlong	arg01, local16
01ed4     2B 00 00 FF 
01ed8     D0 E5 85 F1 | 	sub	objptr, ##22480
01edc     F4 1C B0 FD | 	call	#_isstring
01ee0     00 FA 0D F2 | 	cmp	result1, #0 wz
01ee4     A8 00 90 AD |  if_e	jmp	#LR__0093
01ee8     12 29 02 F6 | 	mov	local06, local04
01eec     03 28 66 F0 | 	shl	local06, #3
01ef0     2B 00 00 FF 
01ef4     D0 E5 05 F1 | 	add	objptr, ##22480
01ef8     F2 28 02 F1 | 	add	local06, objptr
01efc     04 28 06 F1 | 	add	local06, #4
01f00     01 00 80 FF 
01f04     14 07 68 FC | 	wrlong	##515, local06
01f08     12 27 02 F6 | 	mov	local05, local04
01f0c     13 29 02 F6 | 	mov	local06, local05
01f10     03 28 66 F0 | 	shl	local06, #3
01f14     F2 28 02 F1 | 	add	local06, objptr
01f18     12 47 02 F6 | 	mov	local21, local04
01f1c     03 46 66 F0 | 	shl	local21, #3
01f20     F2 46 02 F1 | 	add	local21, objptr
01f24     23 2B 02 FB | 	rdlong	local07, local21
01f28     02 2E 06 F6 | 	mov	local09, #2
01f2c     12 49 02 F6 | 	mov	local22, local04
01f30     24 3F 02 F6 | 	mov	local17, local22
01f34     1F 41 02 F6 | 	mov	local18, local17
01f38     03 40 66 F0 | 	shl	local18, #3
01f3c     F2 42 02 F6 | 	mov	local19, objptr
01f40     F2 40 02 F1 | 	add	local18, objptr
01f44     20 13 02 FB | 	rdlong	arg01, local18
01f48     2B 00 00 FF 
01f4c     D0 E5 85 F1 | 	sub	objptr, ##22480
01f50     09 2D 02 F6 | 	mov	local08, arg01
01f54     97 06 48 FB | 	callpa	#(@LR__0092-@LR__0091)>>2,fcache_load_ptr_
01f58                 | LR__0091
01f58     16 FB C9 FA | 	rdbyte	result1, local08 wz
01f5c     01 2C 06 51 |  if_ne	add	local08, #1
01f60     F4 FF 9F 5D |  if_ne	jmp	#LR__0091
01f64                 | LR__0092
01f64     09 2D 82 F1 | 	sub	local08, arg01
01f68     16 4B 02 F6 | 	mov	local23, local08
01f6c     25 47 02 F6 | 	mov	local21, local23
01f70     02 46 86 F1 | 	sub	local21, #2
01f74     23 37 02 F6 | 	mov	local13, local21
01f78     15 13 02 F6 | 	mov	arg01, local07
01f7c     17 15 02 F6 | 	mov	arg02, local09
01f80     1B 17 02 F6 | 	mov	arg03, local13
01f84     10 5A B1 FD | 	call	#__system__Mid_S
01f88     14 FB 61 FC | 	wrlong	result1, local06
01f8c     5C 00 90 FD | 	jmp	#LR__0095
01f90                 | LR__0093
01f90                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
01f90     12 27 02 F6 | 	mov	local05, local04
01f94     13 3D 02 F6 | 	mov	local16, local05
01f98     03 3C 66 F0 | 	shl	local16, #3
01f9c     2B 00 00 FF 
01fa0     D0 E5 05 F1 | 	add	objptr, ##22480
01fa4     F2 3C 02 F1 | 	add	local16, objptr
01fa8     1E 13 02 FB | 	rdlong	arg01, local16
01fac     2B 00 00 FF 
01fb0     D0 E5 85 F1 | 	sub	objptr, ##22480
01fb4     B8 14 B0 FD | 	call	#_isname
01fb8     00 FA 0D F2 | 	cmp	result1, #0 wz
01fbc     2C 00 90 AD |  if_e	jmp	#LR__0094
01fc0     12 27 02 F6 | 	mov	local05, local04
01fc4     13 29 02 F6 | 	mov	local06, local05
01fc8     03 28 66 F0 | 	shl	local06, #3
01fcc     2B 00 00 FF 
01fd0     D0 E5 05 F1 | 	add	objptr, ##22480
01fd4     F2 28 02 F1 | 	add	local06, objptr
01fd8     04 28 06 F1 | 	add	local06, #4
01fdc     01 00 80 FF 
01fe0     14 09 68 FC | 	wrlong	##516, local06
01fe4     2B 00 00 FF 
01fe8     D0 E5 85 F1 | 	sub	objptr, ##22480
01fec                 | LR__0094
01fec                 | LR__0095
01fec     01 24 06 F1 | 	add	local04, #1
01ff0     5C FA 9F FD | 	jmp	#LR__0087
01ff4                 | LR__0096
01ff4     19 29 02 F6 | 	mov	local06, local11
01ff8     03 28 66 F0 | 	shl	local06, #3
01ffc     2B 00 00 FF 
02000     D0 E5 05 F1 | 	add	objptr, ##22480
02004     F2 28 02 F1 | 	add	local06, objptr
02008     04 28 06 F1 | 	add	local06, #4
0200c     14 FD 6B FC | 	wrlong	#510, local06
02010     19 29 02 F6 | 	mov	local06, local11
02014     03 28 66 F0 | 	shl	local06, #3
02018     F2 28 02 F1 | 	add	local06, objptr
0201c     25 01 00 FF 
02020     FF 2A 06 F6 | 	mov	local07, ##@LR__4128
02024     14 2B 62 FC | 	wrlong	local07, local06
02028     10 00 00 FF 
0202c     54 E4 05 F1 | 	add	objptr, ##8276
02030     F2 32 62 FC | 	wrlong	local11, objptr
02034                 | ' 
02034                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
02034                 | ' 
02034                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
02034                 | ' 
02034                 | ' ' process the case when simple load or save is called without ""
02034                 | ' 
02034                 | ' if (lparts(0).part$="load" orelse lparts(0).part$="save" orelse lparts(0).part$="brun") andalso lparts(1).token=token_name andalso lparts(2).token=token_end then lparts(1).token=token_string
02034     10 00 00 FF 
02038     54 E4 85 F1 | 	sub	objptr, ##8276
0203c     F2 12 02 FB | 	rdlong	arg01, objptr
02040     2B 00 00 FF 
02044     D0 E5 85 F1 | 	sub	objptr, ##22480
02048     25 01 00 FF 
0204c     00 15 06 F6 | 	mov	arg02, ##@LR__4129
02050     44 38 B1 FD | 	call	#__system___string_cmp
02054     00 FA 0D F2 | 	cmp	result1, #0 wz
02058     50 00 90 AD |  if_e	jmp	#LR__0097
0205c     2B 00 00 FF 
02060     D0 E5 05 F1 | 	add	objptr, ##22480
02064     F2 12 02 FB | 	rdlong	arg01, objptr
02068     2B 00 00 FF 
0206c     D0 E5 85 F1 | 	sub	objptr, ##22480
02070     25 01 00 FF 
02074     05 15 06 F6 | 	mov	arg02, ##@LR__4130
02078     1C 38 B1 FD | 	call	#__system___string_cmp
0207c     00 FA 0D F2 | 	cmp	result1, #0 wz
02080     28 00 90 AD |  if_e	jmp	#LR__0097
02084     2B 00 00 FF 
02088     D0 E5 05 F1 | 	add	objptr, ##22480
0208c     F2 12 02 FB | 	rdlong	arg01, objptr
02090     2B 00 00 FF 
02094     D0 E5 85 F1 | 	sub	objptr, ##22480
02098     25 01 00 FF 
0209c     0A 15 06 F6 | 	mov	arg02, ##@LR__4131
020a0     F4 37 B1 FD | 	call	#__system___string_cmp
020a4     00 FA 0D F2 | 	cmp	result1, #0 wz
020a8     50 00 90 5D |  if_ne	jmp	#LR__0098
020ac                 | LR__0097
020ac     2B 00 00 FF 
020b0     DC E5 05 F1 | 	add	objptr, ##22492
020b4     F2 3C 02 FB | 	rdlong	local16, objptr
020b8     2B 00 00 FF 
020bc     DC E5 85 F1 | 	sub	objptr, ##22492
020c0     01 00 00 FF 
020c4     04 3C 0E F2 | 	cmp	local16, ##516 wz
020c8     2B 00 00 AF 
020cc     E4 E5 05 A1 |  if_e	add	objptr, ##22500
020d0     F2 36 02 AB |  if_e	rdlong	local13, objptr
020d4     2B 00 00 AF 
020d8     E4 E5 85 A1 |  if_e	sub	objptr, ##22500
020dc     1B 2F 02 A6 |  if_e	mov	local09, local13
020e0     FE 2F 0E A2 |  if_e	cmp	local09, #510 wz
020e4     2B 00 00 AF 
020e8     DC E5 05 A1 |  if_e	add	objptr, ##22492
020ec     01 00 80 AF 
020f0     F2 06 68 AC |  if_e	wrlong	##515, objptr
020f4     2B 00 00 AF 
020f8     DC E5 85 A1 |  if_e	sub	objptr, ##22492
020fc                 | LR__0098
020fc                 | ' if (lparts(0).part$="mouse" orelse lparts(0).part$="cursor" orelse lparts(0).part$="click") andalso lparts(1).token=token_name andalso lparts(2).token=token_end then 
020fc     2B 00 00 FF 
02100     D0 E5 05 F1 | 	add	objptr, ##22480
02104     F2 12 02 FB | 	rdlong	arg01, objptr
02108     2B 00 00 FF 
0210c     D0 E5 85 F1 | 	sub	objptr, ##22480
02110     25 01 00 FF 
02114     0F 29 06 F6 | 	mov	local06, ##@LR__4132
02118     14 15 02 F6 | 	mov	arg02, local06
0211c     78 37 B1 FD | 	call	#__system___string_cmp
02120     00 FA 0D F2 | 	cmp	result1, #0 wz
02124     5C 00 90 AD |  if_e	jmp	#LR__0099
02128     2B 00 00 FF 
0212c     D0 E5 05 F1 | 	add	objptr, ##22480
02130     F2 12 02 FB | 	rdlong	arg01, objptr
02134     2B 00 00 FF 
02138     D0 E5 85 F1 | 	sub	objptr, ##22480
0213c     25 01 00 FF 
02140     15 29 06 F6 | 	mov	local06, ##@LR__4133
02144     14 15 02 F6 | 	mov	arg02, local06
02148     4C 37 B1 FD | 	call	#__system___string_cmp
0214c     00 FA 0D F2 | 	cmp	result1, #0 wz
02150     30 00 90 AD |  if_e	jmp	#LR__0099
02154     2B 00 00 FF 
02158     D0 E5 05 F1 | 	add	objptr, ##22480
0215c     F2 12 02 FB | 	rdlong	arg01, objptr
02160     2B 00 00 FF 
02164     D0 E5 85 F1 | 	sub	objptr, ##22480
02168     25 01 00 FF 
0216c     1C 2B 06 F6 | 	mov	local07, ##@LR__4134
02170     15 3D 02 F6 | 	mov	local16, local07
02174     1E 15 02 F6 | 	mov	arg02, local16
02178     1C 37 B1 FD | 	call	#__system___string_cmp
0217c     FD 28 0A F6 | 	mov	local06, result1 wz
02180     E4 00 90 5D |  if_ne	jmp	#LR__0102
02184                 | LR__0099
02184     2B 00 00 FF 
02188     DC E5 05 F1 | 	add	objptr, ##22492
0218c     F2 2A 02 FB | 	rdlong	local07, objptr
02190     2B 00 00 FF 
02194     DC E5 85 F1 | 	sub	objptr, ##22492
02198     15 3D 02 F6 | 	mov	local16, local07
0219c     01 00 00 FF 
021a0     04 3C 0E F2 | 	cmp	local16, ##516 wz
021a4     2B 00 00 AF 
021a8     E4 E5 05 A1 |  if_e	add	objptr, ##22500
021ac     F2 36 02 AB |  if_e	rdlong	local13, objptr
021b0     2B 00 00 AF 
021b4     E4 E5 85 A1 |  if_e	sub	objptr, ##22500
021b8     1B 2F 02 A6 |  if_e	mov	local09, local13
021bc     FE 2F 0E A2 |  if_e	cmp	local09, #510 wz
021c0     A4 00 90 5D |  if_ne	jmp	#LR__0102
021c4                 | '   if lparts(1).part$="on" then lparts(1).part$="1" :lparts(1).token=token_decimal
021c4     2B 00 00 FF 
021c8     D8 E5 05 F1 | 	add	objptr, ##22488
021cc     F2 12 02 FB | 	rdlong	arg01, objptr
021d0     2B 00 00 FF 
021d4     D8 E5 85 F1 | 	sub	objptr, ##22488
021d8     25 01 00 FF 
021dc     22 15 06 F6 | 	mov	arg02, ##@LR__4135
021e0     B4 36 B1 FD | 	call	#__system___string_cmp
021e4     00 FA 0D F2 | 	cmp	result1, #0 wz
021e8     28 00 90 5D |  if_ne	jmp	#LR__0100
021ec     25 01 00 FF 
021f0     25 1F 06 F6 | 	mov	local01, ##@LR__4136
021f4     2B 00 00 FF 
021f8     D8 E5 05 F1 | 	add	objptr, ##22488
021fc     F2 1E 62 FC | 	wrlong	local01, objptr
02200     04 E4 05 F1 | 	add	objptr, #4
02204     01 00 80 FF 
02208     F2 00 68 FC | 	wrlong	##512, objptr
0220c     2B 00 00 FF 
02210     DC E5 85 F1 | 	sub	objptr, ##22492
02214                 | LR__0100
02214                 | '   if lparts(1).part$="off" then lparts(1).part$="0" :lparts(1).token=token_decimal
02214     2B 00 00 FF 
02218     D8 E5 05 F1 | 	add	objptr, ##22488
0221c     F2 12 02 FB | 	rdlong	arg01, objptr
02220     2B 00 00 FF 
02224     D8 E5 85 F1 | 	sub	objptr, ##22488
02228     25 01 00 FF 
0222c     27 29 06 F6 | 	mov	local06, ##@LR__4137
02230     14 15 02 F6 | 	mov	arg02, local06
02234     60 36 B1 FD | 	call	#__system___string_cmp
02238     00 FA 0D F2 | 	cmp	result1, #0 wz
0223c     28 00 90 5D |  if_ne	jmp	#LR__0101
02240     25 01 00 FF 
02244     2B 1F 06 F6 | 	mov	local01, ##@LR__4138
02248     2B 00 00 FF 
0224c     D8 E5 05 F1 | 	add	objptr, ##22488
02250     F2 1E 62 FC | 	wrlong	local01, objptr
02254     04 E4 05 F1 | 	add	objptr, #4
02258     01 00 80 FF 
0225c     F2 00 68 FC | 	wrlong	##512, objptr
02260     2B 00 00 FF 
02264     DC E5 85 F1 | 	sub	objptr, ##22492
02268                 | LR__0101
02268                 | LR__0102
02268                 | ' 
02268                 | ' '2b determine a type of the line
02268                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
02268     2B 00 00 FF 
0226c     D0 E5 05 F1 | 	add	objptr, ##22480
02270     F2 12 02 FB | 	rdlong	arg01, objptr
02274     2B 00 00 FF 
02278     D0 E5 85 F1 | 	sub	objptr, ##22480
0227c     94 18 B0 FD | 	call	#_isdec
02280     00 FA 0D F2 | 	cmp	result1, #0 wz
02284     20 00 90 AD |  if_e	jmp	#LR__0103
02288     2B 00 00 FF 
0228c     D0 E5 05 F1 | 	add	objptr, ##22480
02290     F2 12 02 FB | 	rdlong	arg01, objptr
02294     2B 00 00 FF 
02298     D0 E5 85 F1 | 	sub	objptr, ##22480
0229c     00 14 06 F6 | 	mov	arg02, #0
022a0     58 66 B1 FD | 	call	#__system____builtin_atoi
022a4     FD 20 02 F6 | 	mov	local02, result1
022a8                 | LR__0103
022a8                 | ' 
022a8                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
022a8     01 20 16 F2 | 	cmp	local02, #1 wc
022ac     2C 00 90 CD |  if_b	jmp	#LR__0104
022b0     01 32 0E F2 | 	cmp	local11, #1 wz
022b4     2D 00 00 AF 
022b8     E8 E5 05 A1 |  if_e	add	objptr, ##23528
022bc     F2 1E 02 AB |  if_e	rdlong	local01, objptr
022c0     2D 00 00 AF 
022c4     E8 E5 85 A1 |  if_e	sub	objptr, ##23528
022c8     03 1E 0E A2 |  if_e	cmp	local01, #3 wz
022cc     0C 00 90 5D |  if_ne	jmp	#LR__0104
022d0     10 13 02 F6 | 	mov	arg01, local02
022d4     60 19 B0 FD | 	call	#_deleteline
022d8     C8 04 90 FD | 	jmp	#LR__0120
022dc                 | LR__0104
022dc                 | ' 
022dc                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
022dc     01 20 16 F2 | 	cmp	local02, #1 wc
022e0     E0 00 90 CD |  if_b	jmp	#LR__0107
022e4     2D 00 00 FF 
022e8     E8 E5 05 F1 | 	add	objptr, ##23528
022ec     F2 1E 0A FB | 	rdlong	local01, objptr wz
022f0     2D 00 00 FF 
022f4     E8 E5 85 F1 | 	sub	objptr, ##23528
022f8     20 00 90 AD |  if_e	jmp	#LR__0105
022fc     2D 00 00 FF 
02300     E8 E5 05 F1 | 	add	objptr, ##23528
02304     F2 3C 02 FB | 	rdlong	local16, objptr
02308     2D 00 00 FF 
0230c     E8 E5 85 F1 | 	sub	objptr, ##23528
02310     1E 29 02 F6 | 	mov	local06, local16
02314     03 28 0E F2 | 	cmp	local06, #3 wz
02318     A8 00 90 5D |  if_ne	jmp	#LR__0107
0231c                 | LR__0105
0231c     2B 00 00 FF 
02320     E4 E5 05 F1 | 	add	objptr, ##22500
02324     F2 2E 02 FB | 	rdlong	local09, objptr
02328     2B 00 00 FF 
0232c     E4 E5 85 F1 | 	sub	objptr, ##22500
02330     17 2B 02 F6 | 	mov	local07, local09
02334     1B 2A 0E F2 | 	cmp	local07, #27 wz
02338     88 00 90 AD |  if_e	jmp	#LR__0107
0233c     2D 00 00 FF 
02340     E8 E5 05 F1 | 	add	objptr, ##23528
02344     F2 16 02 FB | 	rdlong	arg03, objptr
02348     2D 00 00 FF 
0234c     E8 E5 85 F1 | 	sub	objptr, ##23528
02350     10 13 02 F6 | 	mov	arg01, local02
02354     00 14 06 F6 | 	mov	arg02, #0
02358     54 2B B0 FD | 	call	#_compile
0235c     FD 22 0A F6 | 	mov	local03, result1 wz
02360                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02360                 | '   if err<>0 then printerror(err): goto 104
02360     0C 00 90 AD |  if_e	jmp	#LR__0106
02364     11 13 02 F6 | 	mov	arg01, local03
02368     08 00 B1 FD | 	call	#_printerror
0236c     34 04 90 FD | 	jmp	#LR__0120
02370                 | LR__0106
02370                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
02370     52 00 00 FF 
02374     68 E4 05 F1 | 	add	objptr, ##42088
02378     F2 12 02 FB | 	rdlong	arg01, objptr
0237c     52 00 00 FF 
02380     68 E4 85 F1 | 	sub	objptr, ##42088
02384     25 01 00 FF 
02388     2D 15 06 F6 | 	mov	arg02, ##@LR__4139
0238c     08 35 B1 FD | 	call	#__system___string_cmp
02390     00 FA 0D F2 | 	cmp	result1, #0 wz
02394     0C 04 90 AD |  if_e	jmp	#LR__0120
02398     52 00 00 FF 
0239c     68 E4 05 F1 | 	add	objptr, ##42088
023a0     F2 1E 02 FB | 	rdlong	local01, objptr
023a4     24 00 00 FF 
023a8     88 E4 85 F1 | 	sub	objptr, ##18568
023ac     F2 1E 62 FC | 	wrlong	local01, objptr
023b0     08 E4 05 F1 | 	add	objptr, #8
023b4     F2 08 68 FC | 	wrlong	#4, objptr
023b8     2D 00 00 FF 
023bc     E8 E5 85 F1 | 	sub	objptr, ##23528
023c0     A4 E6 9F FD | 	jmp	#LR__0020
023c4                 | LR__0107
023c4                 | '       							
023c4                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
023c4     01 20 16 F2 | 	cmp	local02, #1 wc
023c8     E4 00 90 CD |  if_b	jmp	#LR__0110
023cc     2D 00 00 FF 
023d0     E8 E5 05 F1 | 	add	objptr, ##23528
023d4     F2 1E 02 FB | 	rdlong	local01, objptr
023d8     2D 00 00 FF 
023dc     E8 E5 85 F1 | 	sub	objptr, ##23528
023e0     01 1E 0E F2 | 	cmp	local01, #1 wz
023e4     20 00 90 AD |  if_e	jmp	#LR__0108
023e8     2D 00 00 FF 
023ec     E8 E5 05 F1 | 	add	objptr, ##23528
023f0     F2 3C 02 FB | 	rdlong	local16, objptr
023f4     2D 00 00 FF 
023f8     E8 E5 85 F1 | 	sub	objptr, ##23528
023fc     1E 29 02 F6 | 	mov	local06, local16
02400     02 28 0E F2 | 	cmp	local06, #2 wz
02404     A8 00 90 5D |  if_ne	jmp	#LR__0110
02408                 | LR__0108
02408     2B 00 00 FF 
0240c     DC E5 05 F1 | 	add	objptr, ##22492
02410     F2 2E 02 FB | 	rdlong	local09, objptr
02414     2B 00 00 FF 
02418     DC E5 85 F1 | 	sub	objptr, ##22492
0241c     17 2B 02 F6 | 	mov	local07, local09
02420     1B 2A 0E F2 | 	cmp	local07, #27 wz
02424     88 00 90 AD |  if_e	jmp	#LR__0110
02428     2D 00 00 FF 
0242c     E8 E5 05 F1 | 	add	objptr, ##23528
02430     F2 16 02 FB | 	rdlong	arg03, objptr
02434     2D 00 00 FF 
02438     E8 E5 85 F1 | 	sub	objptr, ##23528
0243c     10 13 02 F6 | 	mov	arg01, local02
02440     00 14 06 F6 | 	mov	arg02, #0
02444     68 2A B0 FD | 	call	#_compile
02448     FD 22 0A F6 | 	mov	local03, result1 wz
0244c                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
0244c                 | '   if err<>0 then printerror(err): goto 104
0244c     0C 00 90 AD |  if_e	jmp	#LR__0109
02450     11 13 02 F6 | 	mov	arg01, local03
02454     1C FF B0 FD | 	call	#_printerror
02458     48 03 90 FD | 	jmp	#LR__0120
0245c                 | LR__0109
0245c                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
0245c     52 00 00 FF 
02460     68 E4 05 F1 | 	add	objptr, ##42088
02464     F2 12 02 FB | 	rdlong	arg01, objptr
02468     52 00 00 FF 
0246c     68 E4 85 F1 | 	sub	objptr, ##42088
02470     25 01 00 FF 
02474     2E 15 06 F6 | 	mov	arg02, ##@LR__4140
02478     1C 34 B1 FD | 	call	#__system___string_cmp
0247c     00 FA 0D F2 | 	cmp	result1, #0 wz
02480     20 03 90 AD |  if_e	jmp	#LR__0120
02484     52 00 00 FF 
02488     68 E4 05 F1 | 	add	objptr, ##42088
0248c     F2 1E 02 FB | 	rdlong	local01, objptr
02490     24 00 00 FF 
02494     88 E4 85 F1 | 	sub	objptr, ##18568
02498     F2 1E 62 FC | 	wrlong	local01, objptr
0249c     08 E4 05 F1 | 	add	objptr, #8
024a0     F2 08 68 FC | 	wrlong	#4, objptr
024a4     2D 00 00 FF 
024a8     E8 E5 85 F1 | 	sub	objptr, ##23528
024ac     B8 E5 9F FD | 	jmp	#LR__0020
024b0                 | LR__0110
024b0                 | ' 							 
024b0                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
024b0     01 20 16 F2 | 	cmp	local02, #1 wc
024b4     C0 00 90 CD |  if_b	jmp	#LR__0111
024b8     2D 00 00 FF 
024bc     E8 E5 05 F1 | 	add	objptr, ##23528
024c0     F2 1E 0A FB | 	rdlong	local01, objptr wz
024c4     2D 00 00 FF 
024c8     E8 E5 85 F1 | 	sub	objptr, ##23528
024cc     2D 00 00 5F 
024d0     E8 E5 05 51 |  if_ne	add	objptr, ##23528
024d4     F2 3C 02 5B |  if_ne	rdlong	local16, objptr
024d8     2D 00 00 5F 
024dc     E8 E5 85 51 |  if_ne	sub	objptr, ##23528
024e0     03 3C 0E 52 |  if_ne	cmp	local16, #3 wz
024e4     2B 00 00 AF 
024e8     E4 E5 05 A1 |  if_e	add	objptr, ##22500
024ec     F2 2E 02 AB |  if_e	rdlong	local09, objptr
024f0     2B 00 00 AF 
024f4     E4 E5 85 A1 |  if_e	sub	objptr, ##22500
024f8     17 2B 02 A6 |  if_e	mov	local07, local09
024fc     1B 2A 0E A2 |  if_e	cmp	local07, #27 wz
02500     74 00 90 5D |  if_ne	jmp	#LR__0111
02504     2D 00 00 FF 
02508     E8 E5 05 F1 | 	add	objptr, ##23528
0250c     F2 16 02 FB | 	rdlong	arg03, objptr
02510     2D 00 00 FF 
02514     E8 E5 85 F1 | 	sub	objptr, ##23528
02518     10 13 02 F6 | 	mov	arg01, local02
0251c     00 14 06 F6 | 	mov	arg02, #0
02520     5C 2A B0 FD | 	call	#_compile_assign
02524                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
02524                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
02524     52 00 00 FF 
02528     68 E4 05 F1 | 	add	objptr, ##42088
0252c     F2 12 02 FB | 	rdlong	arg01, objptr
02530     52 00 00 FF 
02534     68 E4 85 F1 | 	sub	objptr, ##42088
02538     25 01 00 FF 
0253c     2F 15 06 F6 | 	mov	arg02, ##@LR__4141
02540     54 33 B1 FD | 	call	#__system___string_cmp
02544     00 FA 0D F2 | 	cmp	result1, #0 wz
02548     58 02 90 AD |  if_e	jmp	#LR__0120
0254c     52 00 00 FF 
02550     68 E4 05 F1 | 	add	objptr, ##42088
02554     F2 1E 02 FB | 	rdlong	local01, objptr
02558     24 00 00 FF 
0255c     88 E4 85 F1 | 	sub	objptr, ##18568
02560     F2 1E 62 FC | 	wrlong	local01, objptr
02564     08 E4 05 F1 | 	add	objptr, #8
02568     F2 08 68 FC | 	wrlong	#4, objptr
0256c     2D 00 00 FF 
02570     E8 E5 85 F1 | 	sub	objptr, ##23528
02574     F0 E4 9F FD | 	jmp	#LR__0020
02578                 | LR__0111
02578                 | '     							 
02578                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
02578     01 20 16 F2 | 	cmp	local02, #1 wc
0257c     C0 00 90 CD |  if_b	jmp	#LR__0112
02580     2D 00 00 FF 
02584     E8 E5 05 F1 | 	add	objptr, ##23528
02588     F2 1E 02 FB | 	rdlong	local01, objptr
0258c     2D 00 00 FF 
02590     E8 E5 85 F1 | 	sub	objptr, ##23528
02594     01 1E 0E F2 | 	cmp	local01, #1 wz
02598     2D 00 00 5F 
0259c     E8 E5 05 51 |  if_ne	add	objptr, ##23528
025a0     F2 28 02 5B |  if_ne	rdlong	local06, objptr
025a4     2D 00 00 5F 
025a8     E8 E5 85 51 |  if_ne	sub	objptr, ##23528
025ac     02 28 0E 52 |  if_ne	cmp	local06, #2 wz
025b0     2B 00 00 AF 
025b4     DC E5 05 A1 |  if_e	add	objptr, ##22492
025b8     F2 2E 02 AB |  if_e	rdlong	local09, objptr
025bc     2B 00 00 AF 
025c0     DC E5 85 A1 |  if_e	sub	objptr, ##22492
025c4     1B 2E 0E A2 |  if_e	cmp	local09, #27 wz
025c8     74 00 90 5D |  if_ne	jmp	#LR__0112
025cc     2D 00 00 FF 
025d0     E8 E5 05 F1 | 	add	objptr, ##23528
025d4     F2 16 02 FB | 	rdlong	arg03, objptr
025d8     2D 00 00 FF 
025dc     E8 E5 85 F1 | 	sub	objptr, ##23528
025e0     10 13 02 F6 | 	mov	arg01, local02
025e4     00 14 06 F6 | 	mov	arg02, #0
025e8     94 29 B0 FD | 	call	#_compile_assign
025ec                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
025ec                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
025ec     52 00 00 FF 
025f0     68 E4 05 F1 | 	add	objptr, ##42088
025f4     F2 12 02 FB | 	rdlong	arg01, objptr
025f8     52 00 00 FF 
025fc     68 E4 85 F1 | 	sub	objptr, ##42088
02600     25 01 00 FF 
02604     30 15 06 F6 | 	mov	arg02, ##@LR__4142
02608     8C 32 B1 FD | 	call	#__system___string_cmp
0260c     00 FA 0D F2 | 	cmp	result1, #0 wz
02610     90 01 90 AD |  if_e	jmp	#LR__0120
02614     52 00 00 FF 
02618     68 E4 05 F1 | 	add	objptr, ##42088
0261c     F2 1E 02 FB | 	rdlong	local01, objptr
02620     24 00 00 FF 
02624     88 E4 85 F1 | 	sub	objptr, ##18568
02628     F2 1E 62 FC | 	wrlong	local01, objptr
0262c     08 E4 05 F1 | 	add	objptr, #8
02630     F2 08 68 FC | 	wrlong	#4, objptr
02634     2D 00 00 FF 
02638     E8 E5 85 F1 | 	sub	objptr, ##23528
0263c     28 E4 9F FD | 	jmp	#LR__0020
02640                 | LR__0112
02640                 | ' 
02640                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
02640     2B 00 00 FF 
02644     D4 E5 05 F1 | 	add	objptr, ##22484
02648     F2 1E 02 FB | 	rdlong	local01, objptr
0264c     2B 00 00 FF 
02650     D4 E5 85 F1 | 	sub	objptr, ##22484
02654     01 00 00 FF 
02658     04 1E 0E F2 | 	cmp	local01, ##516 wz
0265c     2B 00 00 AF 
02660     DC E5 05 A1 |  if_e	add	objptr, ##22492
02664     F2 28 02 AB |  if_e	rdlong	local06, objptr
02668     2B 00 00 AF 
0266c     DC E5 85 A1 |  if_e	sub	objptr, ##22492
02670     1B 28 0E A2 |  if_e	cmp	local06, #27 wz
02674     14 00 90 5D |  if_ne	jmp	#LR__0113
02678     00 12 06 F6 | 	mov	arg01, #0
0267c     00 14 06 F6 | 	mov	arg02, #0
02680     00 16 06 F6 | 	mov	arg03, #0
02684     F8 28 B0 FD | 	call	#_compile_assign
02688     90 00 90 FD | 	jmp	#LR__0115
0268c                 | LR__0113
0268c                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
0268c     2B 00 00 FF 
02690     D4 E5 05 F1 | 	add	objptr, ##22484
02694     F2 1E 02 FB | 	rdlong	local01, objptr
02698     2B 00 00 FF 
0269c     D4 E5 85 F1 | 	sub	objptr, ##22484
026a0     01 00 00 FF 
026a4     04 1E 0E F2 | 	cmp	local01, ##516 wz
026a8     2B 00 00 AF 
026ac     DC E5 05 A1 |  if_e	add	objptr, ##22492
026b0     F2 28 02 AB |  if_e	rdlong	local06, objptr
026b4     2B 00 00 AF 
026b8     DC E5 85 A1 |  if_e	sub	objptr, ##22492
026bc     14 28 0E A2 |  if_e	cmp	local06, #20 wz
026c0     44 00 90 5D |  if_ne	jmp	#LR__0114
026c4     00 12 06 F6 | 	mov	arg01, #0
026c8     54 87 B1 FD | 	call	#__system___getiolock_0370
026cc     FD 12 02 F6 | 	mov	arg01, result1
026d0     9C 31 B1 FD | 	call	#__system___lockmem
026d4     25 01 00 FF 
026d8     31 15 06 F6 | 	mov	arg02, ##@LR__4143
026dc     00 12 06 F6 | 	mov	arg01, #0
026e0     00 16 06 F6 | 	mov	arg03, #0
026e4     7C 3E B1 FD | 	call	#__system___basic_print_string
026e8     00 12 06 F6 | 	mov	arg01, #0
026ec     0A 14 06 F6 | 	mov	arg02, #10
026f0     00 16 06 F6 | 	mov	arg03, #0
026f4     14 3E B1 FD | 	call	#__system___basic_print_char
026f8     00 12 06 F6 | 	mov	arg01, #0
026fc     20 87 B1 FD | 	call	#__system___getiolock_0370
02700     FD 00 68 FC | 	wrlong	#0, result1
02704     7C 00 90 FD | 	jmp	#LR__0119
02708                 | LR__0114
02708     00 12 06 F6 | 	mov	arg01, #0
0270c     00 14 06 F6 | 	mov	arg02, #0
02710     00 16 06 F6 | 	mov	arg03, #0
02714     98 27 B0 FD | 	call	#_compile
02718     FD 22 02 F6 | 	mov	local03, result1
0271c                 | LR__0115
0271c                 | ' 
0271c                 | ' ' if we are here, this is not a program line to add, so try to execute this
0271c                 | ' 
0271c                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
0271c                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
0271c                 | ' if err=0 then execute_line() else printerror(err)
0271c     00 22 0E F2 | 	cmp	local03, #0 wz
02720     0C 00 90 5D |  if_ne	jmp	#LR__0116
02724     00 12 06 F6 | 	mov	arg01, #0
02728     44 61 B0 FD | 	call	#_execute_line
0272c     08 00 90 FD | 	jmp	#LR__0117
02730                 | LR__0116
02730     11 13 02 F6 | 	mov	arg01, local03
02734     3C FC B0 FD | 	call	#_printerror
02738                 | LR__0117
02738                 | ' if rest$<>"" then line$=rest$:  goto 108 
02738     52 00 00 FF 
0273c     68 E4 05 F1 | 	add	objptr, ##42088
02740     F2 12 02 FB | 	rdlong	arg01, objptr
02744     52 00 00 FF 
02748     68 E4 85 F1 | 	sub	objptr, ##42088
0274c     25 01 00 FF 
02750     60 15 06 F6 | 	mov	arg02, ##@LR__4144
02754     40 31 B1 FD | 	call	#__system___string_cmp
02758     00 FA 0D F2 | 	cmp	result1, #0 wz
0275c     24 00 90 AD |  if_e	jmp	#LR__0118
02760     52 00 00 FF 
02764     68 E4 05 F1 | 	add	objptr, ##42088
02768     F2 1E 02 FB | 	rdlong	local01, objptr
0276c     24 00 00 FF 
02770     88 E4 85 F1 | 	sub	objptr, ##18568
02774     F2 1E 62 FC | 	wrlong	local01, objptr
02778     2D 00 00 FF 
0277c     E0 E5 85 F1 | 	sub	objptr, ##23520
02780     E4 E2 9F FD | 	jmp	#LR__0020
02784                 | LR__0118
02784                 | LR__0119
02784     25 01 00 FF 
02788     61 13 06 F6 | 	mov	arg01, ##@LR__4145
0278c                 | ' 
0278c                 | ' write(text)
0278c     BC 20 B1 FD | 	call	#_hg010b_spin2_write
02790                 | ' crlf
02790     18 22 B1 FD | 	call	#_hg010b_spin2_crlf
02794     25 01 00 FF 
02798     62 13 06 F6 | 	mov	arg01, ##@LR__4146
0279c                 | ' 
0279c                 | ' write(text)
0279c     AC 20 B1 FD | 	call	#_hg010b_spin2_write
027a0                 | ' crlf
027a0     08 22 B1 FD | 	call	#_hg010b_spin2_crlf
027a4                 | LR__0120
027a4     A7 F0 03 F6 | 	mov	ptra, fp
027a8     B2 00 A0 FD | 	call	#popregs_
027ac                 | _interpret_ret
027ac     2D 00 64 FD | 	ret
027b0                 | 
027b0                 | ' 
027b0                 | ' 
027b0                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
027b0                 | ' 
027b0                 | ' function isoperator(s as string) as ubyte
027b0                 | _isoperator
027b0     01 4A 05 F6 | 	mov	COUNT_, #1
027b4     A8 00 A0 FD | 	call	#pushregs_
027b8                 | ' 
027b8                 | ' select case s
027b8     09 1F 02 F6 | 	mov	local01, arg01
027bc     25 01 00 FF 
027c0     68 15 06 F6 | 	mov	arg02, ##@LR__4147
027c4     0F 13 02 F6 | 	mov	arg01, local01
027c8     CC 30 B1 FD | 	call	#__system___string_cmp
027cc     00 FA 0D F2 | 	cmp	result1, #0 wz
027d0     FC 01 90 AD |  if_e	jmp	#LR__0130
027d4     25 01 00 FF 
027d8     6A 15 06 F6 | 	mov	arg02, ##@LR__4148
027dc     0F 13 02 F6 | 	mov	arg01, local01
027e0     B4 30 B1 FD | 	call	#__system___string_cmp
027e4     00 FA 0D F2 | 	cmp	result1, #0 wz
027e8     EC 01 90 AD |  if_e	jmp	#LR__0131
027ec     25 01 00 FF 
027f0     6C 15 06 F6 | 	mov	arg02, ##@LR__4149
027f4     0F 13 02 F6 | 	mov	arg01, local01
027f8     9C 30 B1 FD | 	call	#__system___string_cmp
027fc     00 FA 0D F2 | 	cmp	result1, #0 wz
02800     DC 01 90 AD |  if_e	jmp	#LR__0132
02804     25 01 00 FF 
02808     6F 15 06 F6 | 	mov	arg02, ##@LR__4150
0280c     0F 13 02 F6 | 	mov	arg01, local01
02810     84 30 B1 FD | 	call	#__system___string_cmp
02814     00 FA 0D F2 | 	cmp	result1, #0 wz
02818     CC 01 90 AD |  if_e	jmp	#LR__0133
0281c     25 01 00 FF 
02820     73 15 06 F6 | 	mov	arg02, ##@LR__4151
02824     0F 13 02 F6 | 	mov	arg01, local01
02828     6C 30 B1 FD | 	call	#__system___string_cmp
0282c     00 FA 0D F2 | 	cmp	result1, #0 wz
02830     BC 01 90 AD |  if_e	jmp	#LR__0134
02834     25 01 00 FF 
02838     75 15 06 F6 | 	mov	arg02, ##@LR__4152
0283c     0F 13 02 F6 | 	mov	arg01, local01
02840     54 30 B1 FD | 	call	#__system___string_cmp
02844     00 FA 0D F2 | 	cmp	result1, #0 wz
02848     AC 01 90 AD |  if_e	jmp	#LR__0135
0284c     25 01 00 FF 
02850     77 15 06 F6 | 	mov	arg02, ##@LR__4153
02854     0F 13 02 F6 | 	mov	arg01, local01
02858     3C 30 B1 FD | 	call	#__system___string_cmp
0285c     00 FA 0D F2 | 	cmp	result1, #0 wz
02860     9C 01 90 AD |  if_e	jmp	#LR__0136
02864     25 01 00 FF 
02868     7B 15 06 F6 | 	mov	arg02, ##@LR__4154
0286c     0F 13 02 F6 | 	mov	arg01, local01
02870     24 30 B1 FD | 	call	#__system___string_cmp
02874     00 FA 0D F2 | 	cmp	result1, #0 wz
02878     8C 01 90 AD |  if_e	jmp	#LR__0137
0287c     25 01 00 FF 
02880     7F 15 06 F6 | 	mov	arg02, ##@LR__4155
02884     0F 13 02 F6 | 	mov	arg01, local01
02888     0C 30 B1 FD | 	call	#__system___string_cmp
0288c     00 FA 0D F2 | 	cmp	result1, #0 wz
02890     7C 01 90 AD |  if_e	jmp	#LR__0138
02894     25 01 00 FF 
02898     83 15 06 F6 | 	mov	arg02, ##@LR__4156
0289c     0F 13 02 F6 | 	mov	arg01, local01
028a0     F4 2F B1 FD | 	call	#__system___string_cmp
028a4     00 FA 0D F2 | 	cmp	result1, #0 wz
028a8     6C 01 90 AD |  if_e	jmp	#LR__0139
028ac     25 01 00 FF 
028b0     87 15 06 F6 | 	mov	arg02, ##@LR__4157
028b4     0F 13 02 F6 | 	mov	arg01, local01
028b8     DC 2F B1 FD | 	call	#__system___string_cmp
028bc     00 FA 0D F2 | 	cmp	result1, #0 wz
028c0     5C 01 90 AD |  if_e	jmp	#LR__0140
028c4     25 01 00 FF 
028c8     8B 15 06 F6 | 	mov	arg02, ##@LR__4158
028cc     0F 13 02 F6 | 	mov	arg01, local01
028d0     C4 2F B1 FD | 	call	#__system___string_cmp
028d4     00 FA 0D F2 | 	cmp	result1, #0 wz
028d8     4C 01 90 AD |  if_e	jmp	#LR__0141
028dc     25 01 00 FF 
028e0     8D 15 06 F6 | 	mov	arg02, ##@LR__4159
028e4     0F 13 02 F6 | 	mov	arg01, local01
028e8     AC 2F B1 FD | 	call	#__system___string_cmp
028ec     00 FA 0D F2 | 	cmp	result1, #0 wz
028f0     3C 01 90 AD |  if_e	jmp	#LR__0142
028f4     25 01 00 FF 
028f8     91 15 06 F6 | 	mov	arg02, ##@LR__4160
028fc     0F 13 02 F6 | 	mov	arg01, local01
02900     94 2F B1 FD | 	call	#__system___string_cmp
02904     00 FA 0D F2 | 	cmp	result1, #0 wz
02908     2C 01 90 AD |  if_e	jmp	#LR__0143
0290c     25 01 00 FF 
02910     93 15 06 F6 | 	mov	arg02, ##@LR__4161
02914     0F 13 02 F6 | 	mov	arg01, local01
02918     7C 2F B1 FD | 	call	#__system___string_cmp
0291c     00 FA 0D F2 | 	cmp	result1, #0 wz
02920     1C 01 90 AD |  if_e	jmp	#LR__0144
02924     25 01 00 FF 
02928     95 15 06 F6 | 	mov	arg02, ##@LR__4162
0292c     0F 13 02 F6 | 	mov	arg01, local01
02930     64 2F B1 FD | 	call	#__system___string_cmp
02934     00 FA 0D F2 | 	cmp	result1, #0 wz
02938     0C 01 90 AD |  if_e	jmp	#LR__0145
0293c     25 01 00 FF 
02940     98 15 06 F6 | 	mov	arg02, ##@LR__4163
02944     0F 13 02 F6 | 	mov	arg01, local01
02948     4C 2F B1 FD | 	call	#__system___string_cmp
0294c     00 FA 0D F2 | 	cmp	result1, #0 wz
02950     FC 00 90 AD |  if_e	jmp	#LR__0146
02954     25 01 00 FF 
02958     9B 15 06 F6 | 	mov	arg02, ##@LR__4164
0295c     0F 13 02 F6 | 	mov	arg01, local01
02960     34 2F B1 FD | 	call	#__system___string_cmp
02964     00 FA 0D F2 | 	cmp	result1, #0 wz
02968     EC 00 90 AD |  if_e	jmp	#LR__0147
0296c     25 01 00 FF 
02970     9D 15 06 F6 | 	mov	arg02, ##@LR__4165
02974     0F 13 02 F6 | 	mov	arg01, local01
02978     1C 2F B1 FD | 	call	#__system___string_cmp
0297c     00 FA 0D F2 | 	cmp	result1, #0 wz
02980     DC 00 90 AD |  if_e	jmp	#LR__0148
02984     25 01 00 FF 
02988     9F 15 06 F6 | 	mov	arg02, ##@LR__4166
0298c     0F 13 02 F6 | 	mov	arg01, local01
02990     04 2F B1 FD | 	call	#__system___string_cmp
02994     00 FA 0D F2 | 	cmp	result1, #0 wz
02998     CC 00 90 AD |  if_e	jmp	#LR__0149
0299c     25 01 00 FF 
029a0     A2 15 06 F6 | 	mov	arg02, ##@LR__4167
029a4     0F 13 02 F6 | 	mov	arg01, local01
029a8     EC 2E B1 FD | 	call	#__system___string_cmp
029ac     00 FA 0D F2 | 	cmp	result1, #0 wz
029b0     BC 00 90 AD |  if_e	jmp	#LR__0150
029b4     25 01 00 FF 
029b8     A5 15 06 F6 | 	mov	arg02, ##@LR__4168
029bc     0F 13 02 F6 | 	mov	arg01, local01
029c0     D4 2E B1 FD | 	call	#__system___string_cmp
029c4     00 FA 0D F2 | 	cmp	result1, #0 wz
029c8     AC 00 90 AD |  if_e	jmp	#LR__0151
029cc     B0 00 90 FD | 	jmp	#LR__0152
029d0                 | LR__0130
029d0     01 FA 05 F6 | 	mov	result1, #1
029d4     AC 00 90 FD | 	jmp	#LR__0153
029d8                 | LR__0131
029d8     02 FA 05 F6 | 	mov	result1, #2
029dc     A4 00 90 FD | 	jmp	#LR__0153
029e0                 | LR__0132
029e0     03 FA 05 F6 | 	mov	result1, #3
029e4     9C 00 90 FD | 	jmp	#LR__0153
029e8                 | LR__0133
029e8     04 FA 05 F6 | 	mov	result1, #4
029ec     94 00 90 FD | 	jmp	#LR__0153
029f0                 | LR__0134
029f0     05 FA 05 F6 | 	mov	result1, #5
029f4     8C 00 90 FD | 	jmp	#LR__0153
029f8                 | LR__0135
029f8     06 FA 05 F6 | 	mov	result1, #6
029fc     84 00 90 FD | 	jmp	#LR__0153
02a00                 | LR__0136
02a00     07 FA 05 F6 | 	mov	result1, #7
02a04     7C 00 90 FD | 	jmp	#LR__0153
02a08                 | LR__0137
02a08     08 FA 05 F6 | 	mov	result1, #8
02a0c     74 00 90 FD | 	jmp	#LR__0153
02a10                 | LR__0138
02a10     09 FA 05 F6 | 	mov	result1, #9
02a14     6C 00 90 FD | 	jmp	#LR__0153
02a18                 | LR__0139
02a18     0A FA 05 F6 | 	mov	result1, #10
02a1c     64 00 90 FD | 	jmp	#LR__0153
02a20                 | LR__0140
02a20     0B FA 05 F6 | 	mov	result1, #11
02a24     5C 00 90 FD | 	jmp	#LR__0153
02a28                 | LR__0141
02a28     0C FA 05 F6 | 	mov	result1, #12
02a2c     54 00 90 FD | 	jmp	#LR__0153
02a30                 | LR__0142
02a30     0D FA 05 F6 | 	mov	result1, #13
02a34     4C 00 90 FD | 	jmp	#LR__0153
02a38                 | LR__0143
02a38     0E FA 05 F6 | 	mov	result1, #14
02a3c     44 00 90 FD | 	jmp	#LR__0153
02a40                 | LR__0144
02a40     1B FA 05 F6 | 	mov	result1, #27
02a44     3C 00 90 FD | 	jmp	#LR__0153
02a48                 | LR__0145
02a48     27 FA 05 F6 | 	mov	result1, #39
02a4c     34 00 90 FD | 	jmp	#LR__0153
02a50                 | LR__0146
02a50     26 FA 05 F6 | 	mov	result1, #38
02a54     2C 00 90 FD | 	jmp	#LR__0153
02a58                 | LR__0147
02a58     10 FA 05 F6 | 	mov	result1, #16
02a5c     24 00 90 FD | 	jmp	#LR__0153
02a60                 | LR__0148
02a60     0F FA 05 F6 | 	mov	result1, #15
02a64     1C 00 90 FD | 	jmp	#LR__0153
02a68                 | LR__0149
02a68     2A FA 05 F6 | 	mov	result1, #42
02a6c     14 00 90 FD | 	jmp	#LR__0153
02a70                 | LR__0150
02a70     28 FA 05 F6 | 	mov	result1, #40
02a74     0C 00 90 FD | 	jmp	#LR__0153
02a78                 | LR__0151
02a78     29 FA 05 F6 | 	mov	result1, #41
02a7c     04 00 90 FD | 	jmp	#LR__0153
02a80                 | LR__0152
02a80     00 FA 05 F6 | 	mov	result1, #0
02a84                 | LR__0153
02a84     A7 F0 03 F6 | 	mov	ptra, fp
02a88     B2 00 A0 FD | 	call	#popregs_
02a8c                 | _isoperator_ret
02a8c     2D 00 64 FD | 	ret
02a90                 | 
02a90                 | ' 
02a90                 | ' function isseparator(s as string) as ubyte
02a90                 | _isseparator
02a90     01 4A 05 F6 | 	mov	COUNT_, #1
02a94     A8 00 A0 FD | 	call	#pushregs_
02a98                 | ' 
02a98                 | ' select case s
02a98     09 1F 02 F6 | 	mov	local01, arg01
02a9c     25 01 00 FF 
02aa0     A8 15 06 F6 | 	mov	arg02, ##@LR__4169
02aa4     0F 13 02 F6 | 	mov	arg01, local01
02aa8     EC 2D B1 FD | 	call	#__system___string_cmp
02aac     00 FA 0D F2 | 	cmp	result1, #0 wz
02ab0     54 01 90 AD |  if_e	jmp	#LR__0160
02ab4     25 01 00 FF 
02ab8     AA 15 06 F6 | 	mov	arg02, ##@LR__4170
02abc     0F 13 02 F6 | 	mov	arg01, local01
02ac0     D4 2D B1 FD | 	call	#__system___string_cmp
02ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ac8     44 01 90 AD |  if_e	jmp	#LR__0161
02acc     25 01 00 FF 
02ad0     AC 15 06 F6 | 	mov	arg02, ##@LR__4171
02ad4     0F 13 02 F6 | 	mov	arg01, local01
02ad8     BC 2D B1 FD | 	call	#__system___string_cmp
02adc     00 FA 0D F2 | 	cmp	result1, #0 wz
02ae0     34 01 90 AD |  if_e	jmp	#LR__0162
02ae4     25 01 00 FF 
02ae8     AE 15 06 F6 | 	mov	arg02, ##@LR__4172
02aec     0F 13 02 F6 | 	mov	arg01, local01
02af0     A4 2D B1 FD | 	call	#__system___string_cmp
02af4     00 FA 0D F2 | 	cmp	result1, #0 wz
02af8     24 01 90 AD |  if_e	jmp	#LR__0163
02afc     25 01 00 FF 
02b00     B0 15 06 F6 | 	mov	arg02, ##@LR__4173
02b04     0F 13 02 F6 | 	mov	arg01, local01
02b08     8C 2D B1 FD | 	call	#__system___string_cmp
02b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
02b10     14 01 90 AD |  if_e	jmp	#LR__0164
02b14     25 01 00 FF 
02b18     B2 15 06 F6 | 	mov	arg02, ##@LR__4174
02b1c     0F 13 02 F6 | 	mov	arg01, local01
02b20     74 2D B1 FD | 	call	#__system___string_cmp
02b24     00 FA 0D F2 | 	cmp	result1, #0 wz
02b28     04 01 90 AD |  if_e	jmp	#LR__0165
02b2c     25 01 00 FF 
02b30     B4 15 06 F6 | 	mov	arg02, ##@LR__4175
02b34     0F 13 02 F6 | 	mov	arg01, local01
02b38     5C 2D B1 FD | 	call	#__system___string_cmp
02b3c     00 FA 0D F2 | 	cmp	result1, #0 wz
02b40     F4 00 90 AD |  if_e	jmp	#LR__0166
02b44     25 01 00 FF 
02b48     B6 15 06 F6 | 	mov	arg02, ##@LR__4176
02b4c     0F 13 02 F6 | 	mov	arg01, local01
02b50     44 2D B1 FD | 	call	#__system___string_cmp
02b54     00 FA 0D F2 | 	cmp	result1, #0 wz
02b58     E4 00 90 AD |  if_e	jmp	#LR__0167
02b5c     25 01 00 FF 
02b60     B8 15 06 F6 | 	mov	arg02, ##@LR__4177
02b64     0F 13 02 F6 | 	mov	arg01, local01
02b68     2C 2D B1 FD | 	call	#__system___string_cmp
02b6c     00 FA 0D F2 | 	cmp	result1, #0 wz
02b70     D4 00 90 AD |  if_e	jmp	#LR__0168
02b74     25 01 00 FF 
02b78     BA 15 06 F6 | 	mov	arg02, ##@LR__4178
02b7c     0F 13 02 F6 | 	mov	arg01, local01
02b80     14 2D B1 FD | 	call	#__system___string_cmp
02b84     00 FA 0D F2 | 	cmp	result1, #0 wz
02b88     C4 00 90 AD |  if_e	jmp	#LR__0169
02b8c     25 01 00 FF 
02b90     BC 15 06 F6 | 	mov	arg02, ##@LR__4179
02b94     0F 13 02 F6 | 	mov	arg01, local01
02b98     FC 2C B1 FD | 	call	#__system___string_cmp
02b9c     00 FA 0D F2 | 	cmp	result1, #0 wz
02ba0     B4 00 90 AD |  if_e	jmp	#LR__0170
02ba4     25 01 00 FF 
02ba8     BE 15 06 F6 | 	mov	arg02, ##@LR__4180
02bac     0F 13 02 F6 | 	mov	arg01, local01
02bb0     E4 2C B1 FD | 	call	#__system___string_cmp
02bb4     00 FA 0D F2 | 	cmp	result1, #0 wz
02bb8     A4 00 90 AD |  if_e	jmp	#LR__0171
02bbc     25 01 00 FF 
02bc0     C0 15 06 F6 | 	mov	arg02, ##@LR__4181
02bc4     0F 13 02 F6 | 	mov	arg01, local01
02bc8     CC 2C B1 FD | 	call	#__system___string_cmp
02bcc     00 FA 0D F2 | 	cmp	result1, #0 wz
02bd0     94 00 90 AD |  if_e	jmp	#LR__0172
02bd4     25 01 00 FF 
02bd8     C2 15 06 F6 | 	mov	arg02, ##@LR__4182
02bdc     0F 13 02 F6 | 	mov	arg01, local01
02be0     B4 2C B1 FD | 	call	#__system___string_cmp
02be4     00 FA 0D F2 | 	cmp	result1, #0 wz
02be8     84 00 90 AD |  if_e	jmp	#LR__0173
02bec     25 01 00 FF 
02bf0     C4 15 06 F6 | 	mov	arg02, ##@LR__4183
02bf4     0F 13 02 F6 | 	mov	arg01, local01
02bf8     9C 2C B1 FD | 	call	#__system___string_cmp
02bfc     00 FA 0D F2 | 	cmp	result1, #0 wz
02c00     74 00 90 AD |  if_e	jmp	#LR__0174
02c04     78 00 90 FD | 	jmp	#LR__0175
02c08                 | LR__0160
02c08     01 FA 05 F6 | 	mov	result1, #1
02c0c     74 00 90 FD | 	jmp	#LR__0176
02c10                 | LR__0161
02c10     02 FA 05 F6 | 	mov	result1, #2
02c14     6C 00 90 FD | 	jmp	#LR__0176
02c18                 | LR__0162
02c18     1B FA 05 F6 | 	mov	result1, #27
02c1c     64 00 90 FD | 	jmp	#LR__0176
02c20                 | LR__0163
02c20     11 FA 05 F6 | 	mov	result1, #17
02c24     5C 00 90 FD | 	jmp	#LR__0176
02c28                 | LR__0164
02c28     05 FA 05 F6 | 	mov	result1, #5
02c2c     54 00 90 FD | 	jmp	#LR__0176
02c30                 | LR__0165
02c30     06 FA 05 F6 | 	mov	result1, #6
02c34     4C 00 90 FD | 	jmp	#LR__0176
02c38                 | LR__0166
02c38     12 FA 05 F6 | 	mov	result1, #18
02c3c     44 00 90 FD | 	jmp	#LR__0176
02c40                 | LR__0167
02c40     13 FA 05 F6 | 	mov	result1, #19
02c44     3C 00 90 FD | 	jmp	#LR__0176
02c48                 | LR__0168
02c48     0C FA 05 F6 | 	mov	result1, #12
02c4c     34 00 90 FD | 	jmp	#LR__0176
02c50                 | LR__0169
02c50     14 FA 05 F6 | 	mov	result1, #20
02c54     2C 00 90 FD | 	jmp	#LR__0176
02c58                 | LR__0170
02c58     15 FA 05 F6 | 	mov	result1, #21
02c5c     24 00 90 FD | 	jmp	#LR__0176
02c60                 | LR__0171
02c60     16 FA 05 F6 | 	mov	result1, #22
02c64     1C 00 90 FD | 	jmp	#LR__0176
02c68                 | LR__0172
02c68     FF FB 05 F6 | 	mov	result1, #511
02c6c     14 00 90 FD | 	jmp	#LR__0176
02c70                 | LR__0173
02c70     0F FA 05 F6 | 	mov	result1, #15
02c74     0C 00 90 FD | 	jmp	#LR__0176
02c78                 | LR__0174
02c78     10 FA 05 F6 | 	mov	result1, #16
02c7c     04 00 90 FD | 	jmp	#LR__0176
02c80                 | LR__0175
02c80     00 FA 05 F6 | 	mov	result1, #0
02c84                 | LR__0176
02c84     A7 F0 03 F6 | 	mov	ptra, fp
02c88     B2 00 A0 FD | 	call	#popregs_
02c8c                 | _isseparator_ret
02c8c     2D 00 64 FD | 	ret
02c90                 | 
02c90                 | ' 
02c90                 | ' 
02c90                 | ' function iscommand(s as string) as ubyte
02c90                 | _iscommand
02c90     01 4A 05 F6 | 	mov	COUNT_, #1
02c94     A8 00 A0 FD | 	call	#pushregs_
02c98                 | ' 
02c98                 | ' select case s
02c98     09 1F 02 F6 | 	mov	local01, arg01
02c9c     25 01 00 FF 
02ca0     C8 15 06 F6 | 	mov	arg02, ##@LR__4185
02ca4     0F 13 02 F6 | 	mov	arg01, local01
02ca8     EC 2B B1 FD | 	call	#__system___string_cmp
02cac     00 FA 0D F2 | 	cmp	result1, #0 wz
02cb0     6C 04 90 AD |  if_e	jmp	#LR__0180
02cb4     25 01 00 FF 
02cb8     CC 15 06 F6 | 	mov	arg02, ##@LR__4186
02cbc     0F 13 02 F6 | 	mov	arg01, local01
02cc0     D4 2B B1 FD | 	call	#__system___string_cmp
02cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
02cc8     5C 04 90 AD |  if_e	jmp	#LR__0181
02ccc     25 01 00 FF 
02cd0     D0 15 06 F6 | 	mov	arg02, ##@LR__4187
02cd4     0F 13 02 F6 | 	mov	arg01, local01
02cd8     BC 2B B1 FD | 	call	#__system___string_cmp
02cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
02ce0     4C 04 90 AD |  if_e	jmp	#LR__0182
02ce4     25 01 00 FF 
02ce8     D5 15 06 F6 | 	mov	arg02, ##@LR__4188
02cec     0F 13 02 F6 | 	mov	arg01, local01
02cf0     A4 2B B1 FD | 	call	#__system___string_cmp
02cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
02cf8     3C 04 90 AD |  if_e	jmp	#LR__0183
02cfc     25 01 00 FF 
02d00     DA 15 06 F6 | 	mov	arg02, ##@LR__4189
02d04     0F 13 02 F6 | 	mov	arg01, local01
02d08     8C 2B B1 FD | 	call	#__system___string_cmp
02d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d10     2C 04 90 AD |  if_e	jmp	#LR__0184
02d14     25 01 00 FF 
02d18     E0 15 06 F6 | 	mov	arg02, ##@LR__4190
02d1c     0F 13 02 F6 | 	mov	arg01, local01
02d20     74 2B B1 FD | 	call	#__system___string_cmp
02d24     00 FA 0D F2 | 	cmp	result1, #0 wz
02d28     1C 04 90 AD |  if_e	jmp	#LR__0185
02d2c     25 01 00 FF 
02d30     E7 15 06 F6 | 	mov	arg02, ##@LR__4191
02d34     0F 13 02 F6 | 	mov	arg01, local01
02d38     5C 2B B1 FD | 	call	#__system___string_cmp
02d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d40     0C 04 90 AD |  if_e	jmp	#LR__0186
02d44     25 01 00 FF 
02d48     EF 15 06 F6 | 	mov	arg02, ##@LR__4192
02d4c     0F 13 02 F6 | 	mov	arg01, local01
02d50     44 2B B1 FD | 	call	#__system___string_cmp
02d54     00 FA 0D F2 | 	cmp	result1, #0 wz
02d58     FC 03 90 AD |  if_e	jmp	#LR__0187
02d5c     25 01 00 FF 
02d60     F3 15 06 F6 | 	mov	arg02, ##@LR__4193
02d64     0F 13 02 F6 | 	mov	arg01, local01
02d68     2C 2B B1 FD | 	call	#__system___string_cmp
02d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d70     EC 03 90 AD |  if_e	jmp	#LR__0188
02d74     25 01 00 FF 
02d78     F9 15 06 F6 | 	mov	arg02, ##@LR__4194
02d7c     0F 13 02 F6 | 	mov	arg01, local01
02d80     14 2B B1 FD | 	call	#__system___string_cmp
02d84     00 FA 0D F2 | 	cmp	result1, #0 wz
02d88     DC 03 90 AD |  if_e	jmp	#LR__0189
02d8c     25 01 00 FF 
02d90     FF 15 06 F6 | 	mov	arg02, ##@LR__4195
02d94     0F 13 02 F6 | 	mov	arg01, local01
02d98     FC 2A B1 FD | 	call	#__system___string_cmp
02d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
02da0     CC 03 90 AD |  if_e	jmp	#LR__0190
02da4     26 01 00 FF 
02da8     05 14 06 F6 | 	mov	arg02, ##@LR__4196
02dac     0F 13 02 F6 | 	mov	arg01, local01
02db0     E4 2A B1 FD | 	call	#__system___string_cmp
02db4     00 FA 0D F2 | 	cmp	result1, #0 wz
02db8     BC 03 90 AD |  if_e	jmp	#LR__0191
02dbc     26 01 00 FF 
02dc0     0A 14 06 F6 | 	mov	arg02, ##@LR__4197
02dc4     0F 13 02 F6 | 	mov	arg01, local01
02dc8     CC 2A B1 FD | 	call	#__system___string_cmp
02dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
02dd0     AC 03 90 AD |  if_e	jmp	#LR__0192
02dd4     26 01 00 FF 
02dd8     0E 14 06 F6 | 	mov	arg02, ##@LR__4198
02ddc     0F 13 02 F6 | 	mov	arg01, local01
02de0     B4 2A B1 FD | 	call	#__system___string_cmp
02de4     00 FA 0D F2 | 	cmp	result1, #0 wz
02de8     9C 03 90 AD |  if_e	jmp	#LR__0193
02dec     26 01 00 FF 
02df0     13 14 06 F6 | 	mov	arg02, ##@LR__4199
02df4     0F 13 02 F6 | 	mov	arg01, local01
02df8     9C 2A B1 FD | 	call	#__system___string_cmp
02dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
02e00     8C 03 90 AD |  if_e	jmp	#LR__0194
02e04     26 01 00 FF 
02e08     19 14 06 F6 | 	mov	arg02, ##@LR__4200
02e0c     0F 13 02 F6 | 	mov	arg01, local01
02e10     84 2A B1 FD | 	call	#__system___string_cmp
02e14     00 FA 0D F2 | 	cmp	result1, #0 wz
02e18     7C 03 90 AD |  if_e	jmp	#LR__0195
02e1c     26 01 00 FF 
02e20     1E 14 06 F6 | 	mov	arg02, ##@LR__4201
02e24     0F 13 02 F6 | 	mov	arg01, local01
02e28     6C 2A B1 FD | 	call	#__system___string_cmp
02e2c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e30     6C 03 90 AD |  if_e	jmp	#LR__0196
02e34     26 01 00 FF 
02e38     23 14 06 F6 | 	mov	arg02, ##@LR__4202
02e3c     0F 13 02 F6 | 	mov	arg01, local01
02e40     54 2A B1 FD | 	call	#__system___string_cmp
02e44     00 FA 0D F2 | 	cmp	result1, #0 wz
02e48     5C 03 90 AD |  if_e	jmp	#LR__0197
02e4c     26 01 00 FF 
02e50     28 14 06 F6 | 	mov	arg02, ##@LR__4203
02e54     0F 13 02 F6 | 	mov	arg01, local01
02e58     3C 2A B1 FD | 	call	#__system___string_cmp
02e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e60     4C 03 90 AD |  if_e	jmp	#LR__0198
02e64     26 01 00 FF 
02e68     31 14 06 F6 | 	mov	arg02, ##@LR__4204
02e6c     0F 13 02 F6 | 	mov	arg01, local01
02e70     24 2A B1 FD | 	call	#__system___string_cmp
02e74     00 FA 0D F2 | 	cmp	result1, #0 wz
02e78     3C 03 90 AD |  if_e	jmp	#LR__0199
02e7c     26 01 00 FF 
02e80     38 14 06 F6 | 	mov	arg02, ##@LR__4205
02e84     0F 13 02 F6 | 	mov	arg01, local01
02e88     0C 2A B1 FD | 	call	#__system___string_cmp
02e8c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e90     2C 03 90 AD |  if_e	jmp	#LR__0200
02e94     26 01 00 FF 
02e98     40 14 06 F6 | 	mov	arg02, ##@LR__4206
02e9c     0F 13 02 F6 | 	mov	arg01, local01
02ea0     F4 29 B1 FD | 	call	#__system___string_cmp
02ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ea8     1C 03 90 AD |  if_e	jmp	#LR__0201
02eac     26 01 00 FF 
02eb0     43 14 06 F6 | 	mov	arg02, ##@LR__4207
02eb4     0F 13 02 F6 | 	mov	arg01, local01
02eb8     DC 29 B1 FD | 	call	#__system___string_cmp
02ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
02ec0     0C 03 90 AD |  if_e	jmp	#LR__0202
02ec4     26 01 00 FF 
02ec8     48 14 06 F6 | 	mov	arg02, ##@LR__4208
02ecc     0F 13 02 F6 | 	mov	arg01, local01
02ed0     C4 29 B1 FD | 	call	#__system___string_cmp
02ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ed8     FC 02 90 AD |  if_e	jmp	#LR__0203
02edc     26 01 00 FF 
02ee0     4D 14 06 F6 | 	mov	arg02, ##@LR__4209
02ee4     0F 13 02 F6 | 	mov	arg01, local01
02ee8     AC 29 B1 FD | 	call	#__system___string_cmp
02eec     00 FA 0D F2 | 	cmp	result1, #0 wz
02ef0     EC 02 90 AD |  if_e	jmp	#LR__0204
02ef4     26 01 00 FF 
02ef8     52 14 06 F6 | 	mov	arg02, ##@LR__4210
02efc     0F 13 02 F6 | 	mov	arg01, local01
02f00     94 29 B1 FD | 	call	#__system___string_cmp
02f04     00 FA 0D F2 | 	cmp	result1, #0 wz
02f08     DC 02 90 AD |  if_e	jmp	#LR__0205
02f0c     26 01 00 FF 
02f10     56 14 06 F6 | 	mov	arg02, ##@LR__4211
02f14     0F 13 02 F6 | 	mov	arg01, local01
02f18     7C 29 B1 FD | 	call	#__system___string_cmp
02f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
02f20     CC 02 90 AD |  if_e	jmp	#LR__0206
02f24     26 01 00 FF 
02f28     5A 14 06 F6 | 	mov	arg02, ##@LR__4212
02f2c     0F 13 02 F6 | 	mov	arg01, local01
02f30     64 29 B1 FD | 	call	#__system___string_cmp
02f34     00 FA 0D F2 | 	cmp	result1, #0 wz
02f38     BC 02 90 AD |  if_e	jmp	#LR__0207
02f3c     26 01 00 FF 
02f40     5F 14 06 F6 | 	mov	arg02, ##@LR__4213
02f44     0F 13 02 F6 | 	mov	arg01, local01
02f48     4C 29 B1 FD | 	call	#__system___string_cmp
02f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
02f50     AC 02 90 AD |  if_e	jmp	#LR__0208
02f54     26 01 00 FF 
02f58     65 14 06 F6 | 	mov	arg02, ##@LR__4214
02f5c     0F 13 02 F6 | 	mov	arg01, local01
02f60     34 29 B1 FD | 	call	#__system___string_cmp
02f64     00 FA 0D F2 | 	cmp	result1, #0 wz
02f68     9C 02 90 AD |  if_e	jmp	#LR__0209
02f6c     26 01 00 FF 
02f70     69 14 06 F6 | 	mov	arg02, ##@LR__4215
02f74     0F 13 02 F6 | 	mov	arg01, local01
02f78     1C 29 B1 FD | 	call	#__system___string_cmp
02f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
02f80     8C 02 90 AD |  if_e	jmp	#LR__0210
02f84     26 01 00 FF 
02f88     6E 14 06 F6 | 	mov	arg02, ##@LR__4216
02f8c     0F 13 02 F6 | 	mov	arg01, local01
02f90     04 29 B1 FD | 	call	#__system___string_cmp
02f94     00 FA 0D F2 | 	cmp	result1, #0 wz
02f98     7C 02 90 AD |  if_e	jmp	#LR__0211
02f9c     26 01 00 FF 
02fa0     73 14 06 F6 | 	mov	arg02, ##@LR__4217
02fa4     0F 13 02 F6 | 	mov	arg01, local01
02fa8     EC 28 B1 FD | 	call	#__system___string_cmp
02fac     00 FA 0D F2 | 	cmp	result1, #0 wz
02fb0     6C 02 90 AD |  if_e	jmp	#LR__0212
02fb4     26 01 00 FF 
02fb8     79 14 06 F6 | 	mov	arg02, ##@LR__4218
02fbc     0F 13 02 F6 | 	mov	arg01, local01
02fc0     D4 28 B1 FD | 	call	#__system___string_cmp
02fc4     00 FA 0D F2 | 	cmp	result1, #0 wz
02fc8     5C 02 90 AD |  if_e	jmp	#LR__0213
02fcc     26 01 00 FF 
02fd0     80 14 06 F6 | 	mov	arg02, ##@LR__4219
02fd4     0F 13 02 F6 | 	mov	arg01, local01
02fd8     BC 28 B1 FD | 	call	#__system___string_cmp
02fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
02fe0     4C 02 90 AD |  if_e	jmp	#LR__0214
02fe4     26 01 00 FF 
02fe8     86 14 06 F6 | 	mov	arg02, ##@LR__4220
02fec     0F 13 02 F6 | 	mov	arg01, local01
02ff0     A4 28 B1 FD | 	call	#__system___string_cmp
02ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ff8     3C 02 90 AD |  if_e	jmp	#LR__0215
02ffc     26 01 00 FF 
03000     90 14 06 F6 | 	mov	arg02, ##@LR__4221
03004     0F 13 02 F6 | 	mov	arg01, local01
03008     8C 28 B1 FD | 	call	#__system___string_cmp
0300c     00 FA 0D F2 | 	cmp	result1, #0 wz
03010     2C 02 90 AD |  if_e	jmp	#LR__0216
03014     26 01 00 FF 
03018     97 14 06 F6 | 	mov	arg02, ##@LR__4222
0301c     0F 13 02 F6 | 	mov	arg01, local01
03020     74 28 B1 FD | 	call	#__system___string_cmp
03024     00 FA 0D F2 | 	cmp	result1, #0 wz
03028     1C 02 90 AD |  if_e	jmp	#LR__0217
0302c     26 01 00 FF 
03030     A1 14 06 F6 | 	mov	arg02, ##@LR__4223
03034     0F 13 02 F6 | 	mov	arg01, local01
03038     5C 28 B1 FD | 	call	#__system___string_cmp
0303c     00 FA 0D F2 | 	cmp	result1, #0 wz
03040     0C 02 90 AD |  if_e	jmp	#LR__0218
03044     26 01 00 FF 
03048     A6 14 06 F6 | 	mov	arg02, ##@LR__4224
0304c     0F 13 02 F6 | 	mov	arg01, local01
03050     44 28 B1 FD | 	call	#__system___string_cmp
03054     00 FA 0D F2 | 	cmp	result1, #0 wz
03058     FC 01 90 AD |  if_e	jmp	#LR__0219
0305c     26 01 00 FF 
03060     AA 14 06 F6 | 	mov	arg02, ##@LR__4225
03064     0F 13 02 F6 | 	mov	arg01, local01
03068     2C 28 B1 FD | 	call	#__system___string_cmp
0306c     00 FA 0D F2 | 	cmp	result1, #0 wz
03070     EC 01 90 AD |  if_e	jmp	#LR__0220
03074     26 01 00 FF 
03078     B0 14 06 F6 | 	mov	arg02, ##@LR__4226
0307c     0F 13 02 F6 | 	mov	arg01, local01
03080     14 28 B1 FD | 	call	#__system___string_cmp
03084     00 FA 0D F2 | 	cmp	result1, #0 wz
03088     DC 01 90 AD |  if_e	jmp	#LR__0221
0308c     26 01 00 FF 
03090     B6 14 06 F6 | 	mov	arg02, ##@LR__4227
03094     0F 13 02 F6 | 	mov	arg01, local01
03098     FC 27 B1 FD | 	call	#__system___string_cmp
0309c     00 FA 0D F2 | 	cmp	result1, #0 wz
030a0     CC 01 90 AD |  if_e	jmp	#LR__0222
030a4     26 01 00 FF 
030a8     BC 14 06 F6 | 	mov	arg02, ##@LR__4228
030ac     0F 13 02 F6 | 	mov	arg01, local01
030b0     E4 27 B1 FD | 	call	#__system___string_cmp
030b4     00 FA 0D F2 | 	cmp	result1, #0 wz
030b8     BC 01 90 AD |  if_e	jmp	#LR__0223
030bc     26 01 00 FF 
030c0     C5 14 06 F6 | 	mov	arg02, ##@LR__4229
030c4     0F 13 02 F6 | 	mov	arg01, local01
030c8     CC 27 B1 FD | 	call	#__system___string_cmp
030cc     00 FA 0D F2 | 	cmp	result1, #0 wz
030d0     AC 01 90 AD |  if_e	jmp	#LR__0224
030d4     26 01 00 FF 
030d8     CB 14 06 F6 | 	mov	arg02, ##@LR__4230
030dc     0F 13 02 F6 | 	mov	arg01, local01
030e0     B4 27 B1 FD | 	call	#__system___string_cmp
030e4     00 FA 0D F2 | 	cmp	result1, #0 wz
030e8     9C 01 90 AD |  if_e	jmp	#LR__0225
030ec     26 01 00 FF 
030f0     D1 14 06 F6 | 	mov	arg02, ##@LR__4231
030f4     0F 13 02 F6 | 	mov	arg01, local01
030f8     9C 27 B1 FD | 	call	#__system___string_cmp
030fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03100     8C 01 90 AD |  if_e	jmp	#LR__0226
03104     26 01 00 FF 
03108     DA 14 06 F6 | 	mov	arg02, ##@LR__4232
0310c     0F 13 02 F6 | 	mov	arg01, local01
03110     84 27 B1 FD | 	call	#__system___string_cmp
03114     00 FA 0D F2 | 	cmp	result1, #0 wz
03118     7C 01 90 AD |  if_e	jmp	#LR__0227
0311c     80 01 90 FD | 	jmp	#LR__0228
03120                 | LR__0180
03120     40 FA 05 F6 | 	mov	result1, #64
03124     7C 01 90 FD | 	jmp	#LR__0229
03128                 | LR__0181
03128     41 FA 05 F6 | 	mov	result1, #65
0312c     74 01 90 FD | 	jmp	#LR__0229
03130                 | LR__0182
03130     42 FA 05 F6 | 	mov	result1, #66
03134     6C 01 90 FD | 	jmp	#LR__0229
03138                 | LR__0183
03138     43 FA 05 F6 | 	mov	result1, #67
0313c     64 01 90 FD | 	jmp	#LR__0229
03140                 | LR__0184
03140     44 FA 05 F6 | 	mov	result1, #68
03144     5C 01 90 FD | 	jmp	#LR__0229
03148                 | LR__0185
03148     45 FA 05 F6 | 	mov	result1, #69
0314c     54 01 90 FD | 	jmp	#LR__0229
03150                 | LR__0186
03150     46 FA 05 F6 | 	mov	result1, #70
03154     4C 01 90 FD | 	jmp	#LR__0229
03158                 | LR__0187
03158     47 FA 05 F6 | 	mov	result1, #71
0315c     44 01 90 FD | 	jmp	#LR__0229
03160                 | LR__0188
03160     48 FA 05 F6 | 	mov	result1, #72
03164     3C 01 90 FD | 	jmp	#LR__0229
03168                 | LR__0189
03168     49 FA 05 F6 | 	mov	result1, #73
0316c     34 01 90 FD | 	jmp	#LR__0229
03170                 | LR__0190
03170     44 FA 05 F6 | 	mov	result1, #68
03174     2C 01 90 FD | 	jmp	#LR__0229
03178                 | LR__0191
03178     4C FA 05 F6 | 	mov	result1, #76
0317c     24 01 90 FD | 	jmp	#LR__0229
03180                 | LR__0192
03180     4D FA 05 F6 | 	mov	result1, #77
03184     1C 01 90 FD | 	jmp	#LR__0229
03188                 | LR__0193
03188     4E FA 05 F6 | 	mov	result1, #78
0318c     14 01 90 FD | 	jmp	#LR__0229
03190                 | LR__0194
03190     50 FA 05 F6 | 	mov	result1, #80
03194     0C 01 90 FD | 	jmp	#LR__0229
03198                 | LR__0195
03198     51 FA 05 F6 | 	mov	result1, #81
0319c     04 01 90 FD | 	jmp	#LR__0229
031a0                 | LR__0196
031a0     52 FA 05 F6 | 	mov	result1, #82
031a4     FC 00 90 FD | 	jmp	#LR__0229
031a8                 | LR__0197
031a8     59 FA 05 F6 | 	mov	result1, #89
031ac     F4 00 90 FD | 	jmp	#LR__0229
031b0                 | LR__0198
031b0     55 FA 05 F6 | 	mov	result1, #85
031b4     EC 00 90 FD | 	jmp	#LR__0229
031b8                 | LR__0199
031b8     56 FA 05 F6 | 	mov	result1, #86
031bc     E4 00 90 FD | 	jmp	#LR__0229
031c0                 | LR__0200
031c0     57 FA 05 F6 | 	mov	result1, #87
031c4     DC 00 90 FD | 	jmp	#LR__0229
031c8                 | LR__0201
031c8     58 FA 05 F6 | 	mov	result1, #88
031cc     D4 00 90 FD | 	jmp	#LR__0229
031d0                 | LR__0202
031d0     5A FA 05 F6 | 	mov	result1, #90
031d4     CC 00 90 FD | 	jmp	#LR__0229
031d8                 | LR__0203
031d8     5B FA 05 F6 | 	mov	result1, #91
031dc     C4 00 90 FD | 	jmp	#LR__0229
031e0                 | LR__0204
031e0     5C FA 05 F6 | 	mov	result1, #92
031e4     BC 00 90 FD | 	jmp	#LR__0229
031e8                 | LR__0205
031e8     5D FA 05 F6 | 	mov	result1, #93
031ec     B4 00 90 FD | 	jmp	#LR__0229
031f0                 | LR__0206
031f0     4A FA 05 F6 | 	mov	result1, #74
031f4     AC 00 90 FD | 	jmp	#LR__0229
031f8                 | LR__0207
031f8     4B FA 05 F6 | 	mov	result1, #75
031fc     A4 00 90 FD | 	jmp	#LR__0229
03200                 | LR__0208
03200     5E FA 05 F6 | 	mov	result1, #94
03204     9C 00 90 FD | 	jmp	#LR__0229
03208                 | LR__0209
03208     5F FA 05 F6 | 	mov	result1, #95
0320c     94 00 90 FD | 	jmp	#LR__0229
03210                 | LR__0210
03210     60 FA 05 F6 | 	mov	result1, #96
03214     8C 00 90 FD | 	jmp	#LR__0229
03218                 | LR__0211
03218     61 FA 05 F6 | 	mov	result1, #97
0321c     84 00 90 FD | 	jmp	#LR__0229
03220                 | LR__0212
03220     63 FA 05 F6 | 	mov	result1, #99
03224     7C 00 90 FD | 	jmp	#LR__0229
03228                 | LR__0213
03228     68 FA 05 F6 | 	mov	result1, #104
0322c     74 00 90 FD | 	jmp	#LR__0229
03230                 | LR__0214
03230     69 FA 05 F6 | 	mov	result1, #105
03234     6C 00 90 FD | 	jmp	#LR__0229
03238                 | LR__0215
03238     6C FA 05 F6 | 	mov	result1, #108
0323c     64 00 90 FD | 	jmp	#LR__0229
03240                 | LR__0216
03240     6D FA 05 F6 | 	mov	result1, #109
03244     5C 00 90 FD | 	jmp	#LR__0229
03248                 | LR__0217
03248     70 FA 05 F6 | 	mov	result1, #112
0324c     54 00 90 FD | 	jmp	#LR__0229
03250                 | LR__0218
03250     71 FA 05 F6 | 	mov	result1, #113
03254     4C 00 90 FD | 	jmp	#LR__0229
03258                 | LR__0219
03258     72 FA 05 F6 | 	mov	result1, #114
0325c     44 00 90 FD | 	jmp	#LR__0229
03260                 | LR__0220
03260     79 FA 05 F6 | 	mov	result1, #121
03264     3C 00 90 FD | 	jmp	#LR__0229
03268                 | LR__0221
03268     77 FA 05 F6 | 	mov	result1, #119
0326c     34 00 90 FD | 	jmp	#LR__0229
03270                 | LR__0222
03270     78 FA 05 F6 | 	mov	result1, #120
03274     2C 00 90 FD | 	jmp	#LR__0229
03278                 | LR__0223
03278     7C FA 05 F6 | 	mov	result1, #124
0327c     24 00 90 FD | 	jmp	#LR__0229
03280                 | LR__0224
03280     7D FA 05 F6 | 	mov	result1, #125
03284     1C 00 90 FD | 	jmp	#LR__0229
03288                 | LR__0225
03288     7E FA 05 F6 | 	mov	result1, #126
0328c     14 00 90 FD | 	jmp	#LR__0229
03290                 | LR__0226
03290     7F FA 05 F6 | 	mov	result1, #127
03294     0C 00 90 FD | 	jmp	#LR__0229
03298                 | LR__0227
03298     80 FA 05 F6 | 	mov	result1, #128
0329c     04 00 90 FD | 	jmp	#LR__0229
032a0                 | LR__0228
032a0     00 FA 05 F6 | 	mov	result1, #0
032a4                 | LR__0229
032a4     A7 F0 03 F6 | 	mov	ptra, fp
032a8     B2 00 A0 FD | 	call	#popregs_
032ac                 | _iscommand_ret
032ac     2D 00 64 FD | 	ret
032b0                 | 
032b0                 | ' 
032b0                 | ' function isfunction(s as string) as ubyte
032b0                 | _isfunction
032b0     01 4A 05 F6 | 	mov	COUNT_, #1
032b4     A8 00 A0 FD | 	call	#pushregs_
032b8                 | ' 
032b8                 | ' select case s
032b8     09 1F 02 F6 | 	mov	local01, arg01
032bc     26 01 00 FF 
032c0     E4 14 06 F6 | 	mov	arg02, ##@LR__4233
032c4     0F 13 02 F6 | 	mov	arg01, local01
032c8     CC 25 B1 FD | 	call	#__system___string_cmp
032cc     00 FA 0D F2 | 	cmp	result1, #0 wz
032d0     24 01 90 AD |  if_e	jmp	#LR__0230
032d4     26 01 00 FF 
032d8     E8 14 06 F6 | 	mov	arg02, ##@LR__4234
032dc     0F 13 02 F6 | 	mov	arg01, local01
032e0     B4 25 B1 FD | 	call	#__system___string_cmp
032e4     00 FA 0D F2 | 	cmp	result1, #0 wz
032e8     14 01 90 AD |  if_e	jmp	#LR__0231
032ec     26 01 00 FF 
032f0     EF 14 06 F6 | 	mov	arg02, ##@LR__4235
032f4     0F 13 02 F6 | 	mov	arg01, local01
032f8     9C 25 B1 FD | 	call	#__system___string_cmp
032fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03300     04 01 90 AD |  if_e	jmp	#LR__0232
03304     26 01 00 FF 
03308     F6 14 06 F6 | 	mov	arg02, ##@LR__4236
0330c     0F 13 02 F6 | 	mov	arg01, local01
03310     84 25 B1 FD | 	call	#__system___string_cmp
03314     00 FA 0D F2 | 	cmp	result1, #0 wz
03318     F4 00 90 AD |  if_e	jmp	#LR__0233
0331c     26 01 00 FF 
03320     FD 14 06 F6 | 	mov	arg02, ##@LR__4237
03324     0F 13 02 F6 | 	mov	arg01, local01
03328     6C 25 B1 FD | 	call	#__system___string_cmp
0332c     00 FA 0D F2 | 	cmp	result1, #0 wz
03330     E4 00 90 AD |  if_e	jmp	#LR__0234
03334     26 01 00 FF 
03338     04 15 06 F6 | 	mov	arg02, ##@LR__4238
0333c     0F 13 02 F6 | 	mov	arg01, local01
03340     54 25 B1 FD | 	call	#__system___string_cmp
03344     00 FA 0D F2 | 	cmp	result1, #0 wz
03348     D4 00 90 AD |  if_e	jmp	#LR__0235
0334c     26 01 00 FF 
03350     0C 15 06 F6 | 	mov	arg02, ##@LR__4239
03354     0F 13 02 F6 | 	mov	arg01, local01
03358     3C 25 B1 FD | 	call	#__system___string_cmp
0335c     00 FA 0D F2 | 	cmp	result1, #0 wz
03360     C4 00 90 AD |  if_e	jmp	#LR__0236
03364     26 01 00 FF 
03368     10 15 06 F6 | 	mov	arg02, ##@LR__4240
0336c     0F 13 02 F6 | 	mov	arg01, local01
03370     24 25 B1 FD | 	call	#__system___string_cmp
03374     00 FA 0D F2 | 	cmp	result1, #0 wz
03378     B4 00 90 AD |  if_e	jmp	#LR__0237
0337c     26 01 00 FF 
03380     16 15 06 F6 | 	mov	arg02, ##@LR__4241
03384     0F 13 02 F6 | 	mov	arg01, local01
03388     0C 25 B1 FD | 	call	#__system___string_cmp
0338c     00 FA 0D F2 | 	cmp	result1, #0 wz
03390     A4 00 90 AD |  if_e	jmp	#LR__0238
03394     26 01 00 FF 
03398     1C 15 06 F6 | 	mov	arg02, ##@LR__4242
0339c     0F 13 02 F6 | 	mov	arg01, local01
033a0     F4 24 B1 FD | 	call	#__system___string_cmp
033a4     00 FA 0D F2 | 	cmp	result1, #0 wz
033a8     94 00 90 AD |  if_e	jmp	#LR__0239
033ac     26 01 00 FF 
033b0     25 15 06 F6 | 	mov	arg02, ##@LR__4243
033b4     0F 13 02 F6 | 	mov	arg01, local01
033b8     DC 24 B1 FD | 	call	#__system___string_cmp
033bc     00 FA 0D F2 | 	cmp	result1, #0 wz
033c0     84 00 90 AD |  if_e	jmp	#LR__0240
033c4     26 01 00 FF 
033c8     2B 15 06 F6 | 	mov	arg02, ##@LR__4244
033cc     0F 13 02 F6 | 	mov	arg01, local01
033d0     C4 24 B1 FD | 	call	#__system___string_cmp
033d4     00 FA 0D F2 | 	cmp	result1, #0 wz
033d8     74 00 90 AD |  if_e	jmp	#LR__0241
033dc     26 01 00 FF 
033e0     33 15 06 F6 | 	mov	arg02, ##@LR__4245
033e4     0F 13 02 F6 | 	mov	arg01, local01
033e8     AC 24 B1 FD | 	call	#__system___string_cmp
033ec     00 FA 0D F2 | 	cmp	result1, #0 wz
033f0     64 00 90 AD |  if_e	jmp	#LR__0242
033f4     68 00 90 FD | 	jmp	#LR__0243
033f8                 | LR__0230
033f8     54 FA 05 F6 | 	mov	result1, #84
033fc     64 00 90 FD | 	jmp	#LR__0244
03400                 | LR__0231
03400     64 FA 05 F6 | 	mov	result1, #100
03404     5C 00 90 FD | 	jmp	#LR__0244
03408                 | LR__0232
03408     65 FA 05 F6 | 	mov	result1, #101
0340c     54 00 90 FD | 	jmp	#LR__0244
03410                 | LR__0233
03410     66 FA 05 F6 | 	mov	result1, #102
03414     4C 00 90 FD | 	jmp	#LR__0244
03418                 | LR__0234
03418     67 FA 05 F6 | 	mov	result1, #103
0341c     44 00 90 FD | 	jmp	#LR__0244
03420                 | LR__0235
03420     62 FA 05 F6 | 	mov	result1, #98
03424     3C 00 90 FD | 	jmp	#LR__0244
03428                 | LR__0236
03428     6B FA 05 F6 | 	mov	result1, #107
0342c     34 00 90 FD | 	jmp	#LR__0244
03430                 | LR__0237
03430     6A FA 05 F6 | 	mov	result1, #106
03434     2C 00 90 FD | 	jmp	#LR__0244
03438                 | LR__0238
03438     6E FA 05 F6 | 	mov	result1, #110
0343c     24 00 90 FD | 	jmp	#LR__0244
03440                 | LR__0239
03440     6F FA 05 F6 | 	mov	result1, #111
03444     1C 00 90 FD | 	jmp	#LR__0244
03448                 | LR__0240
03448     76 FA 05 F6 | 	mov	result1, #118
0344c     14 00 90 FD | 	jmp	#LR__0244
03450                 | LR__0241
03450     7B FA 05 F6 | 	mov	result1, #123
03454     0C 00 90 FD | 	jmp	#LR__0244
03458                 | LR__0242
03458     7A FA 05 F6 | 	mov	result1, #122
0345c     04 00 90 FD | 	jmp	#LR__0244
03460                 | LR__0243
03460     00 FA 05 F6 | 	mov	result1, #0
03464                 | LR__0244
03464     A7 F0 03 F6 | 	mov	ptra, fp
03468     B2 00 A0 FD | 	call	#popregs_
0346c                 | _isfunction_ret
0346c     2D 00 64 FD | 	ret
03470                 | 
03470                 | ' 
03470                 | ' function isname(s as string) as boolean
03470                 | _isname
03470     0D 4A 05 F6 | 	mov	COUNT_, #13
03474     A8 00 A0 FD | 	call	#pushregs_
03478     09 1F 02 F6 | 	mov	local01, arg01
0347c     09 21 02 F6 | 	mov	local02, arg01
03480     97 06 48 FB | 	callpa	#(@LR__0251-@LR__0250)>>2,fcache_load_ptr_
03484                 | LR__0250
03484     10 FB C9 FA | 	rdbyte	result1, local02 wz
03488     01 20 06 51 |  if_ne	add	local02, #1
0348c     F4 FF 9F 5D |  if_ne	jmp	#LR__0250
03490                 | LR__0251
03490     09 21 82 F1 | 	sub	local02, arg01
03494     10 FB 01 F6 | 	mov	result1, local02
03498     FD 22 0A F6 | 	mov	local03, result1 wz
0349c     00 FA 05 A6 |  if_e	mov	result1, #0
034a0     34 02 90 AD |  if_e	jmp	#LR__0263
034a4     0F 13 02 F6 | 	mov	arg01, local01
034a8     01 14 06 F6 | 	mov	arg02, #1
034ac     01 16 06 F6 | 	mov	arg03, #1
034b0     E4 44 B1 FD | 	call	#__system__Mid_S
034b4     FD 24 02 F6 | 	mov	local04, result1
034b8                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
034b8     26 01 00 FF 
034bc     39 15 06 F6 | 	mov	arg02, ##@LR__4246
034c0     12 13 02 F6 | 	mov	arg01, local04
034c4     D0 23 B1 FD | 	call	#__system___string_cmp
034c8     00 FA 55 F2 | 	cmps	result1, #0 wc
034cc     18 00 90 CD |  if_b	jmp	#LR__0252
034d0     26 01 00 FF 
034d4     3B 15 06 F6 | 	mov	arg02, ##@LR__4247
034d8     12 13 02 F6 | 	mov	arg01, local04
034dc     B8 23 B1 FD | 	call	#__system___string_cmp
034e0     01 FA 55 F2 | 	cmps	result1, #1 wc
034e4     1C 00 90 CD |  if_b	jmp	#LR__0253
034e8                 | LR__0252
034e8     26 01 00 FF 
034ec     3D 15 06 F6 | 	mov	arg02, ##@LR__4248
034f0     12 13 02 F6 | 	mov	arg01, local04
034f4     A0 23 B1 FD | 	call	#__system___string_cmp
034f8     00 FA 0D F2 | 	cmp	result1, #0 wz
034fc     00 FA 05 56 |  if_ne	mov	result1, #0
03500     D4 01 90 5D |  if_ne	jmp	#LR__0263
03504                 | LR__0253
03504                 | ' if l>2 then 
03504     03 22 56 F2 | 	cmps	local03, #3 wc
03508     C8 01 90 CD |  if_b	jmp	#LR__0262
0350c                 | '   for i=2 to l
0350c     02 26 06 F6 | 	mov	local05, #2
03510     11 29 02 F6 | 	mov	local06, local03
03514     01 28 06 F1 | 	add	local06, #1
03518                 | LR__0254
03518     14 27 52 F2 | 	cmps	local05, local06 wc
0351c     B4 01 90 3D |  if_ae	jmp	#LR__0261
03520     0F 13 02 F6 | 	mov	arg01, local01
03524     13 15 02 F6 | 	mov	arg02, local05
03528     01 16 06 F6 | 	mov	arg03, #1
0352c     68 44 B1 FD | 	call	#__system__Mid_S
03530     FD 24 02 F6 | 	mov	local04, result1
03534                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
03534     11 27 52 F2 | 	cmps	local05, local03 wc
03538     9C 00 90 3D |  if_ae	jmp	#LR__0257
0353c     26 01 00 FF 
03540     3F 15 06 F6 | 	mov	arg02, ##@LR__4249
03544     12 13 02 F6 | 	mov	arg01, local04
03548     4C 23 B1 FD | 	call	#__system___string_cmp
0354c     00 FA 55 F2 | 	cmps	result1, #0 wc
03550     18 00 90 CD |  if_b	jmp	#LR__0255
03554     26 01 00 FF 
03558     41 15 06 F6 | 	mov	arg02, ##@LR__4250
0355c     12 13 02 F6 | 	mov	arg01, local04
03560     34 23 B1 FD | 	call	#__system___string_cmp
03564     01 FA 55 F2 | 	cmps	result1, #1 wc
03568     6C 00 90 CD |  if_b	jmp	#LR__0257
0356c                 | LR__0255
0356c     26 01 00 FF 
03570     43 15 06 F6 | 	mov	arg02, ##@LR__4251
03574     12 13 02 F6 | 	mov	arg01, local04
03578     1C 23 B1 FD | 	call	#__system___string_cmp
0357c     00 FA 55 F2 | 	cmps	result1, #0 wc
03580     18 00 90 CD |  if_b	jmp	#LR__0256
03584     26 01 00 FF 
03588     45 15 06 F6 | 	mov	arg02, ##@LR__4252
0358c     12 13 02 F6 | 	mov	arg01, local04
03590     04 23 B1 FD | 	call	#__system___string_cmp
03594     01 FA 55 F2 | 	cmps	result1, #1 wc
03598     3C 00 90 CD |  if_b	jmp	#LR__0257
0359c                 | LR__0256
0359c     26 01 00 FF 
035a0     47 2B 06 F6 | 	mov	local07, ##@LR__4253
035a4     12 13 02 F6 | 	mov	arg01, local04
035a8     15 15 02 F6 | 	mov	arg02, local07
035ac     E8 22 B1 FD | 	call	#__system___string_cmp
035b0     00 FA 0D F2 | 	cmp	result1, #0 wz
035b4     20 00 90 AD |  if_e	jmp	#LR__0257
035b8     26 01 00 FF 
035bc     49 2D 06 F6 | 	mov	local08, ##@LR__4254
035c0     12 13 02 F6 | 	mov	arg01, local04
035c4     16 15 02 F6 | 	mov	arg02, local08
035c8     CC 22 B1 FD | 	call	#__system___string_cmp
035cc     FD 2E 0A F6 | 	mov	local09, result1 wz
035d0     00 FA 05 56 |  if_ne	mov	result1, #0
035d4     00 01 90 5D |  if_ne	jmp	#LR__0263
035d8                 | LR__0257
035d8                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
035d8     11 27 0A F2 | 	cmp	local05, local03 wz
035dc     EC 00 90 5D |  if_ne	jmp	#LR__0260
035e0     26 01 00 FF 
035e4     4B 31 06 F6 | 	mov	local10, ##@LR__4255
035e8     12 13 02 F6 | 	mov	arg01, local04
035ec     18 15 02 F6 | 	mov	arg02, local10
035f0     A4 22 B1 FD | 	call	#__system___string_cmp
035f4     FD 32 02 F6 | 	mov	local11, result1
035f8     00 32 56 F2 | 	cmps	local11, #0 wc
035fc     1C 00 90 CD |  if_b	jmp	#LR__0258
03600     26 01 00 FF 
03604     4D 15 06 F6 | 	mov	arg02, ##@LR__4256
03608     12 13 02 F6 | 	mov	arg01, local04
0360c     88 22 B1 FD | 	call	#__system___string_cmp
03610     FD 30 02 F6 | 	mov	local10, result1
03614     01 30 56 F2 | 	cmps	local10, #1 wc
03618     B0 00 90 CD |  if_b	jmp	#LR__0260
0361c                 | LR__0258
0361c     26 01 00 FF 
03620     4F 15 06 F6 | 	mov	arg02, ##@LR__4257
03624     12 13 02 F6 | 	mov	arg01, local04
03628     6C 22 B1 FD | 	call	#__system___string_cmp
0362c     00 FA 55 F2 | 	cmps	result1, #0 wc
03630     1C 00 90 CD |  if_b	jmp	#LR__0259
03634     26 01 00 FF 
03638     51 2F 06 F6 | 	mov	local09, ##@LR__4258
0363c     12 13 02 F6 | 	mov	arg01, local04
03640     17 15 02 F6 | 	mov	arg02, local09
03644     50 22 B1 FD | 	call	#__system___string_cmp
03648     01 FA 55 F2 | 	cmps	result1, #1 wc
0364c     7C 00 90 CD |  if_b	jmp	#LR__0260
03650                 | LR__0259
03650     26 01 00 FF 
03654     53 2F 06 F6 | 	mov	local09, ##@LR__4259
03658     12 13 02 F6 | 	mov	arg01, local04
0365c     17 15 02 F6 | 	mov	arg02, local09
03660     34 22 B1 FD | 	call	#__system___string_cmp
03664     00 FA 4D F2 | 	cmps	result1, #0 wz
03668     60 00 90 AD |  if_e	jmp	#LR__0260
0366c     26 01 00 FF 
03670     55 2D 06 F6 | 	mov	local08, ##@LR__4260
03674     12 13 02 F6 | 	mov	arg01, local04
03678     16 15 02 F6 | 	mov	arg02, local08
0367c     18 22 B1 FD | 	call	#__system___string_cmp
03680     FD 2E 0A F6 | 	mov	local09, result1 wz
03684     44 00 90 AD |  if_e	jmp	#LR__0260
03688     26 01 00 FF 
0368c     57 35 06 F6 | 	mov	local12, ##@LR__4261
03690     1A 2D 02 F6 | 	mov	local08, local12
03694     12 13 02 F6 | 	mov	arg01, local04
03698     16 15 02 F6 | 	mov	arg02, local08
0369c     F8 21 B1 FD | 	call	#__system___string_cmp
036a0     FD 2A 0A F6 | 	mov	local07, result1 wz
036a4     24 00 90 AD |  if_e	jmp	#LR__0260
036a8     26 01 00 FF 
036ac     59 37 06 F6 | 	mov	local13, ##@LR__4262
036b0     1B 35 02 F6 | 	mov	local12, local13
036b4     12 13 02 F6 | 	mov	arg01, local04
036b8     1A 15 02 F6 | 	mov	arg02, local12
036bc     D8 21 B1 FD | 	call	#__system___string_cmp
036c0     FD 2C 0A F6 | 	mov	local08, result1 wz
036c4     00 FA 05 56 |  if_ne	mov	result1, #0
036c8     0C 00 90 5D |  if_ne	jmp	#LR__0263
036cc                 | LR__0260
036cc     01 26 06 F1 | 	add	local05, #1
036d0     44 FE 9F FD | 	jmp	#LR__0254
036d4                 | LR__0261
036d4                 | LR__0262
036d4                 | ' return true
036d4     01 FA 65 F6 | 	neg	result1, #1
036d8                 | LR__0263
036d8     A7 F0 03 F6 | 	mov	ptra, fp
036dc     B2 00 A0 FD | 	call	#popregs_
036e0                 | _isname_ret
036e0     2D 00 64 FD | 	ret
036e4                 | 
036e4                 | ' 
036e4                 | ' function isnum(s as string) as boolean
036e4                 | _isnum
036e4     0D 4A 05 F6 | 	mov	COUNT_, #13
036e8     A8 00 A0 FD | 	call	#pushregs_
036ec     09 1F 02 F6 | 	mov	local01, arg01
036f0     00 20 06 F6 | 	mov	local02, #0
036f4     00 22 06 F6 | 	mov	local03, #0
036f8     0F 13 02 F6 | 	mov	arg01, local01
036fc     09 25 02 F6 | 	mov	local04, arg01
03700     97 06 48 FB | 	callpa	#(@LR__0271-@LR__0270)>>2,fcache_load_ptr_
03704                 | LR__0270
03704     12 FB C9 FA | 	rdbyte	result1, local04 wz
03708     01 24 06 51 |  if_ne	add	local04, #1
0370c     F4 FF 9F 5D |  if_ne	jmp	#LR__0270
03710                 | LR__0271
03710     09 25 82 F1 | 	sub	local04, arg01
03714     12 FB 01 F6 | 	mov	result1, local04
03718     FD 26 0A F6 | 	mov	local05, result1 wz
0371c     00 FA 05 A6 |  if_e	mov	result1, #0
03720     8C 02 90 AD |  if_e	jmp	#LR__0282
03724     0F 13 02 F6 | 	mov	arg01, local01
03728     01 14 06 F6 | 	mov	arg02, #1
0372c     01 16 06 F6 | 	mov	arg03, #1
03730     64 42 B1 FD | 	call	#__system__Mid_S
03734     FD 28 02 F6 | 	mov	local06, result1
03738                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
03738     26 01 00 FF 
0373c     5B 15 06 F6 | 	mov	arg02, ##@LR__4263
03740     14 13 02 F6 | 	mov	arg01, local06
03744     50 21 B1 FD | 	call	#__system___string_cmp
03748     00 FA 55 F2 | 	cmps	result1, #0 wc
0374c     18 00 90 CD |  if_b	jmp	#LR__0272
03750     26 01 00 FF 
03754     5D 15 06 F6 | 	mov	arg02, ##@LR__4264
03758     14 13 02 F6 | 	mov	arg01, local06
0375c     38 21 B1 FD | 	call	#__system___string_cmp
03760     01 FA 55 F2 | 	cmps	result1, #1 wc
03764     78 00 90 CD |  if_b	jmp	#LR__0273
03768                 | LR__0272
03768     26 01 00 FF 
0376c     5F 15 06 F6 | 	mov	arg02, ##@LR__4265
03770     14 13 02 F6 | 	mov	arg01, local06
03774     20 21 B1 FD | 	call	#__system___string_cmp
03778     00 FA 0D F2 | 	cmp	result1, #0 wz
0377c     60 00 90 AD |  if_e	jmp	#LR__0273
03780     26 01 00 FF 
03784     61 2B 06 F6 | 	mov	local07, ##@LR__4266
03788     14 13 02 F6 | 	mov	arg01, local06
0378c     15 15 02 F6 | 	mov	arg02, local07
03790     04 21 B1 FD | 	call	#__system___string_cmp
03794     00 FA 0D F2 | 	cmp	result1, #0 wz
03798     44 00 90 AD |  if_e	jmp	#LR__0273
0379c     26 01 00 FF 
037a0     63 2D 06 F6 | 	mov	local08, ##@LR__4267
037a4     16 2B 02 F6 | 	mov	local07, local08
037a8     14 13 02 F6 | 	mov	arg01, local06
037ac     15 15 02 F6 | 	mov	arg02, local07
037b0     E4 20 B1 FD | 	call	#__system___string_cmp
037b4     00 FA 4D F2 | 	cmps	result1, #0 wz
037b8     24 00 90 AD |  if_e	jmp	#LR__0273
037bc     26 01 00 FF 
037c0     65 2F 06 F6 | 	mov	local09, ##@LR__4268
037c4     17 2D 02 F6 | 	mov	local08, local09
037c8     14 13 02 F6 | 	mov	arg01, local06
037cc     16 15 02 F6 | 	mov	arg02, local08
037d0     C4 20 B1 FD | 	call	#__system___string_cmp
037d4     FD 2A 0A F6 | 	mov	local07, result1 wz
037d8     00 FA 05 56 |  if_ne	mov	result1, #0
037dc     D0 01 90 5D |  if_ne	jmp	#LR__0282
037e0                 | LR__0273
037e0                 | ' if m$="." then ds=1
037e0     26 01 00 FF 
037e4     67 15 06 F6 | 	mov	arg02, ##@LR__4269
037e8     14 13 02 F6 | 	mov	arg01, local06
037ec     A8 20 B1 FD | 	call	#__system___string_cmp
037f0     00 FA 0D F2 | 	cmp	result1, #0 wz
037f4     01 20 06 A6 |  if_e	mov	local02, #1
037f8                 | ' if l>1 then 
037f8     02 26 56 F2 | 	cmps	local05, #2 wc
037fc     AC 01 90 CD |  if_b	jmp	#LR__0281
03800                 | '   for i=2 to l
03800     02 30 06 F6 | 	mov	local10, #2
03804     13 33 02 F6 | 	mov	local11, local05
03808     01 32 06 F1 | 	add	local11, #1
0380c                 | LR__0274
0380c     19 31 52 F2 | 	cmps	local10, local11 wc
03810     98 01 90 3D |  if_ae	jmp	#LR__0280
03814     0F 13 02 F6 | 	mov	arg01, local01
03818     18 15 02 F6 | 	mov	arg02, local10
0381c     01 16 06 F6 | 	mov	arg03, #1
03820     74 41 B1 FD | 	call	#__system__Mid_S
03824     FD 28 02 F6 | 	mov	local06, result1
03828                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
03828     26 01 00 FF 
0382c     69 15 06 F6 | 	mov	arg02, ##@LR__4270
03830     14 13 02 F6 | 	mov	arg01, local06
03834     60 20 B1 FD | 	call	#__system___string_cmp
03838     00 FA 55 F2 | 	cmps	result1, #0 wc
0383c     18 00 90 CD |  if_b	jmp	#LR__0275
03840     26 01 00 FF 
03844     6B 15 06 F6 | 	mov	arg02, ##@LR__4271
03848     14 13 02 F6 | 	mov	arg01, local06
0384c     48 20 B1 FD | 	call	#__system___string_cmp
03850     01 FA 55 F2 | 	cmps	result1, #1 wc
03854     98 00 90 CD |  if_b	jmp	#LR__0276
03858                 | LR__0275
03858     26 01 00 FF 
0385c     6D 15 06 F6 | 	mov	arg02, ##@LR__4272
03860     14 13 02 F6 | 	mov	arg01, local06
03864     30 20 B1 FD | 	call	#__system___string_cmp
03868     00 FA 0D F2 | 	cmp	result1, #0 wz
0386c     80 00 90 AD |  if_e	jmp	#LR__0276
03870     26 01 00 FF 
03874     6F 2B 06 F6 | 	mov	local07, ##@LR__4273
03878     14 13 02 F6 | 	mov	arg01, local06
0387c     15 15 02 F6 | 	mov	arg02, local07
03880     14 20 B1 FD | 	call	#__system___string_cmp
03884     00 FA 4D F2 | 	cmps	result1, #0 wz
03888     64 00 90 AD |  if_e	jmp	#LR__0276
0388c     26 01 00 FF 
03890     71 2D 06 F6 | 	mov	local08, ##@LR__4274
03894     16 2B 02 F6 | 	mov	local07, local08
03898     14 13 02 F6 | 	mov	arg01, local06
0389c     15 15 02 F6 | 	mov	arg02, local07
038a0     F4 1F B1 FD | 	call	#__system___string_cmp
038a4     FD 34 0A F6 | 	mov	local12, result1 wz
038a8     44 00 90 AD |  if_e	jmp	#LR__0276
038ac     26 01 00 FF 
038b0     73 2F 06 F6 | 	mov	local09, ##@LR__4275
038b4     17 2D 02 F6 | 	mov	local08, local09
038b8     14 13 02 F6 | 	mov	arg01, local06
038bc     16 15 02 F6 | 	mov	arg02, local08
038c0     D4 1F B1 FD | 	call	#__system___string_cmp
038c4     FD 2A 0A F6 | 	mov	local07, result1 wz
038c8     24 00 90 AD |  if_e	jmp	#LR__0276
038cc     26 01 00 FF 
038d0     75 37 06 F6 | 	mov	local13, ##@LR__4276
038d4     1B 2F 02 F6 | 	mov	local09, local13
038d8     14 13 02 F6 | 	mov	arg01, local06
038dc     17 15 02 F6 | 	mov	arg02, local09
038e0     B4 1F B1 FD | 	call	#__system___string_cmp
038e4     FD 2C 0A F6 | 	mov	local08, result1 wz
038e8     00 FA 05 56 |  if_ne	mov	result1, #0
038ec     C0 00 90 5D |  if_ne	jmp	#LR__0282
038f0                 | LR__0276
038f0                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
038f0     26 01 00 FF 
038f4     77 15 06 F6 | 	mov	arg02, ##@LR__4277
038f8     14 13 02 F6 | 	mov	arg01, local06
038fc     98 1F B1 FD | 	call	#__system___string_cmp
03900     00 FA 0D F2 | 	cmp	result1, #0 wz
03904     38 00 90 5D |  if_ne	jmp	#LR__0277
03908     18 15 02 F6 | 	mov	arg02, local10
0390c     01 14 86 F1 | 	sub	arg02, #1
03910     0F 13 02 F6 | 	mov	arg01, local01
03914     01 16 06 F6 | 	mov	arg03, #1
03918     7C 40 B1 FD | 	call	#__system__Mid_S
0391c     FD 12 02 F6 | 	mov	arg01, result1
03920     10 42 B1 FD | 	call	#__system__LCase_S
03924     FD 12 02 F6 | 	mov	arg01, result1
03928     26 01 00 FF 
0392c     79 15 06 F6 | 	mov	arg02, ##@LR__4278
03930     64 1F B1 FD | 	call	#__system___string_cmp
03934     00 FA 0D F2 | 	cmp	result1, #0 wz
03938     00 FA 05 56 |  if_ne	mov	result1, #0
0393c     70 00 90 5D |  if_ne	jmp	#LR__0282
03940                 | LR__0277
03940                 | '     if m$="." then ds+=1: if ds>1 then return false
03940     26 01 00 FF 
03944     7B 15 06 F6 | 	mov	arg02, ##@LR__4279
03948     14 13 02 F6 | 	mov	arg01, local06
0394c     48 1F B1 FD | 	call	#__system___string_cmp
03950     00 FA 0D F2 | 	cmp	result1, #0 wz
03954     01 20 06 A1 |  if_e	add	local02, #1
03958     02 20 56 A2 |  if_e	cmps	local02, #2 wc
0395c     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
03960     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0282
03964                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
03964     26 01 00 FF 
03968     7D 15 06 F6 | 	mov	arg02, ##@LR__4280
0396c     14 13 02 F6 | 	mov	arg01, local06
03970     24 1F B1 FD | 	call	#__system___string_cmp
03974     00 FA 4D F2 | 	cmps	result1, #0 wz
03978     18 00 90 AD |  if_e	jmp	#LR__0278
0397c     26 01 00 FF 
03980     7F 15 06 F6 | 	mov	arg02, ##@LR__4281
03984     14 13 02 F6 | 	mov	arg01, local06
03988     0C 1F B1 FD | 	call	#__system___string_cmp
0398c     00 FA 4D F2 | 	cmps	result1, #0 wz
03990     10 00 90 5D |  if_ne	jmp	#LR__0279
03994                 | LR__0278
03994     01 22 06 F1 | 	add	local03, #1
03998     02 22 56 F2 | 	cmps	local03, #2 wc
0399c     00 FA 05 36 |  if_ae	mov	result1, #0
039a0     0C 00 90 3D |  if_ae	jmp	#LR__0282
039a4                 | LR__0279
039a4     01 30 06 F1 | 	add	local10, #1
039a8     60 FE 9F FD | 	jmp	#LR__0274
039ac                 | LR__0280
039ac                 | LR__0281
039ac                 | ' return true
039ac     01 FA 65 F6 | 	neg	result1, #1
039b0                 | LR__0282
039b0     A7 F0 03 F6 | 	mov	ptra, fp
039b4     B2 00 A0 FD | 	call	#popregs_
039b8                 | _isnum_ret
039b8     2D 00 64 FD | 	ret
039bc                 | 
039bc                 | '   
039bc                 | ' function isint(s as string) as boolean
039bc                 | _isint
039bc     05 4A 05 F6 | 	mov	COUNT_, #5
039c0     A8 00 A0 FD | 	call	#pushregs_
039c4     09 1F 02 F6 | 	mov	local01, arg01
039c8     09 21 02 F6 | 	mov	local02, arg01
039cc     97 06 48 FB | 	callpa	#(@LR__0291-@LR__0290)>>2,fcache_load_ptr_
039d0                 | LR__0290
039d0     10 FB C9 FA | 	rdbyte	result1, local02 wz
039d4     01 20 06 51 |  if_ne	add	local02, #1
039d8     F4 FF 9F 5D |  if_ne	jmp	#LR__0290
039dc                 | LR__0291
039dc     09 21 82 F1 | 	sub	local02, arg01
039e0     10 FB 01 F6 | 	mov	result1, local02
039e4     FD 20 0A F6 | 	mov	local02, result1 wz
039e8     00 FA 05 A6 |  if_e	mov	result1, #0
039ec     18 01 90 AD |  if_e	jmp	#LR__0299
039f0     0F 13 02 F6 | 	mov	arg01, local01
039f4     01 14 06 F6 | 	mov	arg02, #1
039f8     01 16 06 F6 | 	mov	arg03, #1
039fc     98 3F B1 FD | 	call	#__system__Mid_S
03a00     FD 22 02 F6 | 	mov	local03, result1
03a04                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
03a04     26 01 00 FF 
03a08     81 15 06 F6 | 	mov	arg02, ##@LR__4282
03a0c     11 13 02 F6 | 	mov	arg01, local03
03a10     84 1E B1 FD | 	call	#__system___string_cmp
03a14     00 FA 55 F2 | 	cmps	result1, #0 wc
03a18     18 00 90 CD |  if_b	jmp	#LR__0292
03a1c     26 01 00 FF 
03a20     83 15 06 F6 | 	mov	arg02, ##@LR__4283
03a24     11 13 02 F6 | 	mov	arg01, local03
03a28     6C 1E B1 FD | 	call	#__system___string_cmp
03a2c     01 FA 55 F2 | 	cmps	result1, #1 wc
03a30     4C 00 90 CD |  if_b	jmp	#LR__0293
03a34                 | LR__0292
03a34     26 01 00 FF 
03a38     85 15 06 F6 | 	mov	arg02, ##@LR__4284
03a3c     11 13 02 F6 | 	mov	arg01, local03
03a40     54 1E B1 FD | 	call	#__system___string_cmp
03a44     00 FA 0D F2 | 	cmp	result1, #0 wz
03a48     34 00 90 AD |  if_e	jmp	#LR__0293
03a4c     26 01 00 FF 
03a50     87 15 06 F6 | 	mov	arg02, ##@LR__4285
03a54     11 13 02 F6 | 	mov	arg01, local03
03a58     3C 1E B1 FD | 	call	#__system___string_cmp
03a5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a60     1C 00 90 AD |  if_e	jmp	#LR__0293
03a64     26 01 00 FF 
03a68     89 15 06 F6 | 	mov	arg02, ##@LR__4286
03a6c     11 13 02 F6 | 	mov	arg01, local03
03a70     24 1E B1 FD | 	call	#__system___string_cmp
03a74     00 FA 0D F2 | 	cmp	result1, #0 wz
03a78     00 FA 05 56 |  if_ne	mov	result1, #0
03a7c     88 00 90 5D |  if_ne	jmp	#LR__0299
03a80                 | LR__0293
03a80                 | ' 
03a80                 | ' if l>1 then 
03a80     02 20 56 F2 | 	cmps	local02, #2 wc
03a84     7C 00 90 CD |  if_b	jmp	#LR__0298
03a88                 | '   for i=2 to l
03a88     02 24 06 F6 | 	mov	local04, #2
03a8c     10 27 02 F6 | 	mov	local05, local02
03a90     01 26 06 F1 | 	add	local05, #1
03a94                 | LR__0294
03a94     13 25 52 F2 | 	cmps	local04, local05 wc
03a98     68 00 90 3D |  if_ae	jmp	#LR__0297
03a9c     0F 13 02 F6 | 	mov	arg01, local01
03aa0     12 15 02 F6 | 	mov	arg02, local04
03aa4     01 16 06 F6 | 	mov	arg03, #1
03aa8     EC 3E B1 FD | 	call	#__system__Mid_S
03aac     FD 22 02 F6 | 	mov	local03, result1
03ab0                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
03ab0     26 01 00 FF 
03ab4     8B 15 06 F6 | 	mov	arg02, ##@LR__4287
03ab8     11 13 02 F6 | 	mov	arg01, local03
03abc     D8 1D B1 FD | 	call	#__system___string_cmp
03ac0     00 FA 55 F2 | 	cmps	result1, #0 wc
03ac4     18 00 90 CD |  if_b	jmp	#LR__0295
03ac8     26 01 00 FF 
03acc     8D 15 06 F6 | 	mov	arg02, ##@LR__4288
03ad0     11 13 02 F6 | 	mov	arg01, local03
03ad4     C0 1D B1 FD | 	call	#__system___string_cmp
03ad8     01 FA 55 F2 | 	cmps	result1, #1 wc
03adc     1C 00 90 CD |  if_b	jmp	#LR__0296
03ae0                 | LR__0295
03ae0     26 01 00 FF 
03ae4     8F 15 06 F6 | 	mov	arg02, ##@LR__4289
03ae8     11 13 02 F6 | 	mov	arg01, local03
03aec     A8 1D B1 FD | 	call	#__system___string_cmp
03af0     00 FA 0D F2 | 	cmp	result1, #0 wz
03af4     00 FA 05 56 |  if_ne	mov	result1, #0
03af8     0C 00 90 5D |  if_ne	jmp	#LR__0299
03afc                 | LR__0296
03afc     01 24 06 F1 | 	add	local04, #1
03b00     90 FF 9F FD | 	jmp	#LR__0294
03b04                 | LR__0297
03b04                 | LR__0298
03b04                 | ' return true
03b04     01 FA 65 F6 | 	neg	result1, #1
03b08                 | LR__0299
03b08     A7 F0 03 F6 | 	mov	ptra, fp
03b0c     B2 00 A0 FD | 	call	#popregs_
03b10                 | _isint_ret
03b10     2D 00 64 FD | 	ret
03b14                 | 
03b14                 | ' 
03b14                 | ' function isdec(s as string) as boolean
03b14                 | _isdec
03b14     05 4A 05 F6 | 	mov	COUNT_, #5
03b18     A8 00 A0 FD | 	call	#pushregs_
03b1c     09 1F 02 F6 | 	mov	local01, arg01
03b20     09 21 02 F6 | 	mov	local02, arg01
03b24     97 06 48 FB | 	callpa	#(@LR__0301-@LR__0300)>>2,fcache_load_ptr_
03b28                 | LR__0300
03b28     10 FB C9 FA | 	rdbyte	result1, local02 wz
03b2c     01 20 06 51 |  if_ne	add	local02, #1
03b30     F4 FF 9F 5D |  if_ne	jmp	#LR__0300
03b34                 | LR__0301
03b34     09 21 82 F1 | 	sub	local02, arg01
03b38     10 FB 01 F6 | 	mov	result1, local02
03b3c     FD 20 0A F6 | 	mov	local02, result1 wz
03b40     00 FA 05 A6 |  if_e	mov	result1, #0
03b44     80 00 90 AD |  if_e	jmp	#LR__0306
03b48                 | ' for i=1 to l
03b48     01 22 06 F6 | 	mov	local03, #1
03b4c     10 25 02 F6 | 	mov	local04, local02
03b50     01 24 06 F1 | 	add	local04, #1
03b54                 | LR__0302
03b54     12 23 52 F2 | 	cmps	local03, local04 wc
03b58     68 00 90 3D |  if_ae	jmp	#LR__0305
03b5c     0F 13 02 F6 | 	mov	arg01, local01
03b60     11 15 02 F6 | 	mov	arg02, local03
03b64     01 16 06 F6 | 	mov	arg03, #1
03b68     2C 3E B1 FD | 	call	#__system__Mid_S
03b6c     FD 26 02 F6 | 	mov	local05, result1
03b70                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
03b70     26 01 00 FF 
03b74     91 15 06 F6 | 	mov	arg02, ##@LR__4290
03b78     13 13 02 F6 | 	mov	arg01, local05
03b7c     18 1D B1 FD | 	call	#__system___string_cmp
03b80     00 FA 55 F2 | 	cmps	result1, #0 wc
03b84     18 00 90 CD |  if_b	jmp	#LR__0303
03b88     26 01 00 FF 
03b8c     93 15 06 F6 | 	mov	arg02, ##@LR__4291
03b90     13 13 02 F6 | 	mov	arg01, local05
03b94     00 1D B1 FD | 	call	#__system___string_cmp
03b98     01 FA 55 F2 | 	cmps	result1, #1 wc
03b9c     1C 00 90 CD |  if_b	jmp	#LR__0304
03ba0                 | LR__0303
03ba0     26 01 00 FF 
03ba4     95 15 06 F6 | 	mov	arg02, ##@LR__4292
03ba8     13 13 02 F6 | 	mov	arg01, local05
03bac     E8 1C B1 FD | 	call	#__system___string_cmp
03bb0     00 FA 0D F2 | 	cmp	result1, #0 wz
03bb4     00 FA 05 56 |  if_ne	mov	result1, #0
03bb8     0C 00 90 5D |  if_ne	jmp	#LR__0306
03bbc                 | LR__0304
03bbc     01 22 06 F1 | 	add	local03, #1
03bc0     90 FF 9F FD | 	jmp	#LR__0302
03bc4                 | LR__0305
03bc4                 | ' return true
03bc4     01 FA 65 F6 | 	neg	result1, #1
03bc8                 | LR__0306
03bc8     A7 F0 03 F6 | 	mov	ptra, fp
03bcc     B2 00 A0 FD | 	call	#popregs_
03bd0                 | _isdec_ret
03bd0     2D 00 64 FD | 	ret
03bd4                 | 
03bd4                 | ' 
03bd4                 | ' function isstring(s as string) as boolean
03bd4                 | _isstring
03bd4     01 4A 05 F6 | 	mov	COUNT_, #1
03bd8     A8 00 A0 FD | 	call	#pushregs_
03bdc                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
03bdc     09 1F 02 F6 | 	mov	local01, arg01
03be0     01 14 06 F6 | 	mov	arg02, #1
03be4     98 3C B1 FD | 	call	#__system__Left_S
03be8     FD 12 02 F6 | 	mov	arg01, result1
03bec     26 01 00 FF 
03bf0     97 15 06 F6 | 	mov	arg02, ##@LR__4293
03bf4     A0 1C B1 FD | 	call	#__system___string_cmp
03bf8     00 FA 4D F2 | 	cmps	result1, #0 wz
03bfc     28 00 90 5D |  if_ne	jmp	#LR__0310
03c00     0F 13 02 F6 | 	mov	arg01, local01
03c04     01 14 06 F6 | 	mov	arg02, #1
03c08     FC 3C B1 FD | 	call	#__system__Right_S
03c0c     FD 12 02 F6 | 	mov	arg01, result1
03c10     26 01 00 FF 
03c14     99 15 06 F6 | 	mov	arg02, ##@LR__4294
03c18     7C 1C B1 FD | 	call	#__system___string_cmp
03c1c     00 FA 4D F2 | 	cmps	result1, #0 wz
03c20     01 FA 65 A6 |  if_e	neg	result1, #1
03c24     04 00 90 AD |  if_e	jmp	#LR__0311
03c28                 | LR__0310
03c28     00 FA 05 F6 | 	mov	result1, #0
03c2c                 | LR__0311
03c2c     A7 F0 03 F6 | 	mov	ptra, fp
03c30     B2 00 A0 FD | 	call	#popregs_
03c34                 | _isstring_ret
03c34     2D 00 64 FD | 	ret
03c38                 | 
03c38                 | ' 
03c38                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
03c38                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
03c38                 | ' 
03c38                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
03c38                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
03c38                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
03c38                 | ' 
03c38                 | ' '----- delete a line from a program
03c38                 | ' 
03c38                 | ' function deleteline(aline as ulong) as integer
03c38                 | _deleteline
03c38     03 4A 05 F6 | 	mov	COUNT_, #3
03c3c     A8 00 A0 FD | 	call	#pushregs_
03c40     2C F0 07 F1 | 	add	ptra, #44
03c44     04 4E 05 F1 | 	add	fp, #4
03c48     A7 12 62 FC | 	wrlong	arg01, fp
03c4c     41 00 00 FF 
03c50     48 E4 05 F1 | 	add	objptr, ##33352
03c54     F2 1E 02 FB | 	rdlong	local01, objptr
03c58     0C 4E 05 F1 | 	add	fp, #12
03c5c     A7 1E 62 FC | 	wrlong	local01, fp
03c60     10 4E 85 F1 | 	sub	fp, #16
03c64                 | ' 
03c64                 | ' 
03c64                 | ' searchptr=programstart
03c64                 | ' 
03c64                 | ' do
03c64     35 00 00 FF 
03c68     88 E5 85 F1 | 	sub	objptr, ##27528
03c6c                 | LR__0320
03c6c     14 4E 05 F1 | 	add	fp, #20
03c70     A7 12 02 F6 | 	mov	arg01, fp
03c74     04 4E 85 F1 | 	sub	fp, #4
03c78     A7 14 02 FB | 	rdlong	arg02, fp
03c7c     10 4E 85 F1 | 	sub	fp, #16
03c80     18 16 06 F6 | 	mov	arg03, #24
03c84     FC 10 B1 FD | 	call	#_psram_spin2_read1
03c88     10 4E 05 F1 | 	add	fp, #16
03c8c     A7 1E 02 FB | 	rdlong	local01, fp
03c90     08 4E 85 F1 | 	sub	fp, #8
03c94     A7 1E 62 FC | 	wrlong	local01, fp
03c98     20 4E 05 F1 | 	add	fp, #32
03c9c     A7 1E 02 FB | 	rdlong	local01, fp
03ca0     18 4E 85 F1 | 	sub	fp, #24
03ca4     A7 1E 62 FC | 	wrlong	local01, fp
03ca8     04 4E 05 F1 | 	add	fp, #4
03cac     A7 1E 02 FB | 	rdlong	local01, fp
03cb0     10 4E 85 F1 | 	sub	fp, #16
03cb4     A7 16 02 FB | 	rdlong	arg03, fp
03cb8     04 4E 85 F1 | 	sub	fp, #4
03cbc     0B 1F 12 F2 | 	cmp	local01, arg03 wc
03cc0     28 4E 05 C1 |  if_b	add	fp, #40
03cc4     A7 20 02 CB |  if_b	rdlong	local02, fp
03cc8     28 4E 85 C1 |  if_b	sub	fp, #40
03ccc     FF FF 3F CF 
03cd0     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
03cd4     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0320
03cd8     0B 00 00 FF 
03cdc     C0 E4 85 F1 | 	sub	objptr, ##5824
03ce0                 | ' 
03ce0                 | ' 
03ce0                 | ' if header(0)<>aline then return -1
03ce0     14 4E 05 F1 | 	add	fp, #20
03ce4     A7 1E 02 FB | 	rdlong	local01, fp
03ce8     10 4E 85 F1 | 	sub	fp, #16
03cec     A7 22 02 FB | 	rdlong	local03, fp
03cf0     04 4E 85 F1 | 	sub	fp, #4
03cf4     11 1F 0A F2 | 	cmp	local01, local03 wz
03cf8     01 FA 65 56 |  if_ne	neg	result1, #1
03cfc     4C 03 90 5D |  if_ne	jmp	#LR__0326
03d00     08 4E 05 F1 | 	add	fp, #8
03d04     A7 12 02 FB | 	rdlong	arg01, fp
03d08     08 4E 85 F1 | 	sub	fp, #8
03d0c     01 14 66 F6 | 	neg	arg02, #1
03d10     01 16 06 F6 | 	mov	arg03, #1
03d14     00 18 06 F6 | 	mov	arg04, #0
03d18     0B 00 00 FF 
03d1c     C0 E4 05 F1 | 	add	objptr, ##5824
03d20                 | '     return fill(addr, pattern, count, listPtr, 4)
03d20     04 1A 06 F6 | 	mov	arg05, #4
03d24     94 11 B1 FD | 	call	#_psram_spin2_fill
03d28     0B 00 00 FF 
03d2c     C0 E4 85 F1 | 	sub	objptr, ##5824
03d30                 | ' 
03d30                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
03d30                 | ' 
03d30                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is one and only line in the program
03d30     28 4E 05 F1 | 	add	fp, #40
03d34     A7 1E 02 FB | 	rdlong	local01, fp
03d38     28 4E 85 F1 | 	sub	fp, #40
03d3c     FF FF 3F FF 
03d40     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03d44     24 4E 05 A1 |  if_e	add	fp, #36
03d48     A7 22 02 AB |  if_e	rdlong	local03, fp
03d4c     24 4E 85 A1 |  if_e	sub	fp, #36
03d50     FF FF 7F AF 
03d54     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
03d58     90 00 90 5D |  if_ne	jmp	#LR__0321
03d5c     41 00 00 FF 
03d60     48 E4 05 F1 | 	add	objptr, ##33352
03d64     F2 00 68 FC | 	wrlong	#0, objptr
03d68     07 00 00 FF 
03d6c     28 E4 85 F1 | 	sub	objptr, ##3624
03d70     F2 00 68 FC | 	wrlong	#0, objptr
03d74     07 00 00 FF 
03d78     2C E4 05 F1 | 	add	objptr, ##3628
03d7c     F2 00 68 FC | 	wrlong	#0, objptr
03d80     04 E4 05 F1 | 	add	objptr, #4
03d84     FF FF FF FF 
03d88     F2 FE 6B FC | 	wrlong	##-1, objptr
03d8c     00 12 06 F6 | 	mov	arg01, #0
03d90     10 E4 85 F1 | 	sub	objptr, #16
03d94     F2 00 68 FC | 	wrlong	#0, objptr
03d98     01 14 66 F6 | 	neg	arg02, #1
03d9c     01 16 06 F6 | 	mov	arg03, #1
03da0     00 18 06 F6 | 	mov	arg04, #0
03da4     35 00 00 FF 
03da8     80 E5 85 F1 | 	sub	objptr, ##27520
03dac                 | '     return fill(addr, pattern, count, listPtr, 4)
03dac     04 1A 06 F6 | 	mov	arg05, #4
03db0     08 11 B1 FD | 	call	#_psram_spin2_fill
03db4     10 12 06 F6 | 	mov	arg01, #16
03db8     01 14 66 F6 | 	neg	arg02, #1
03dbc     01 16 06 F6 | 	mov	arg03, #1
03dc0     00 18 06 F6 | 	mov	arg04, #0
03dc4                 | '     return fill(addr, pattern, count, listPtr, 4)
03dc4     04 1A 06 F6 | 	mov	arg05, #4
03dc8     F0 10 B1 FD | 	call	#_psram_spin2_fill
03dcc     14 12 06 F6 | 	mov	arg01, #20
03dd0     1E 14 CE F9 | 	bmask	arg02, #30
03dd4     01 16 06 F6 | 	mov	arg03, #1
03dd8     00 18 06 F6 | 	mov	arg04, #0
03ddc                 | '     return fill(addr, pattern, count, listPtr, 4)
03ddc     04 1A 06 F6 | 	mov	arg05, #4
03de0     D8 10 B1 FD | 	call	#_psram_spin2_fill
03de4     0B 00 00 FF 
03de8     C0 E4 85 F1 | 	sub	objptr, ##5824
03dec                 | LR__0321
03dec                 | ' 
03dec                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
03dec     28 4E 05 F1 | 	add	fp, #40
03df0     A7 1E 02 FB | 	rdlong	local01, fp
03df4     28 4E 85 F1 | 	sub	fp, #40
03df8     FF FF 3F FF 
03dfc     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03e00     88 00 90 5D |  if_ne	jmp	#LR__0322
03e04     24 4E 05 F1 | 	add	fp, #36
03e08     A7 22 02 FB | 	rdlong	local03, fp
03e0c     24 4E 85 F1 | 	sub	fp, #36
03e10     FF FF 7F FF 
03e14     FF 23 0E F2 | 	cmp	local03, ##-1 wz
03e18     70 00 90 AD |  if_e	jmp	#LR__0322
03e1c     24 4E 05 F1 | 	add	fp, #36
03e20     A7 12 02 FB | 	rdlong	arg01, fp
03e24     24 4E 85 F1 | 	sub	fp, #36
03e28     14 12 06 F1 | 	add	arg01, #20
03e2c     1E 14 CE F9 | 	bmask	arg02, #30
03e30     01 16 06 F6 | 	mov	arg03, #1
03e34     00 18 06 F6 | 	mov	arg04, #0
03e38     0B 00 00 FF 
03e3c     C0 E4 05 F1 | 	add	objptr, ##5824
03e40                 | '     return fill(addr, pattern, count, listPtr, 4)
03e40     04 1A 06 F6 | 	mov	arg05, #4
03e44     74 10 B1 FD | 	call	#_psram_spin2_fill
03e48     24 4E 05 F1 | 	add	fp, #36
03e4c     A7 1E 02 FB | 	rdlong	local01, fp
03e50     35 00 00 FF 
03e54     90 E5 05 F1 | 	add	objptr, ##27536
03e58     F2 1E 62 FC | 	wrlong	local01, objptr
03e5c     41 00 00 FF 
03e60     50 E4 85 F1 | 	sub	objptr, ##33360
03e64     A7 12 02 FB | 	rdlong	arg01, fp
03e68     24 4E 85 F1 | 	sub	fp, #36
03e6c     C0 E6 B0 FD | 	call	#_pslpeek
03e70     41 00 00 FF 
03e74     4C E4 05 F1 | 	add	objptr, ##33356
03e78     F2 FA 61 FC | 	wrlong	result1, objptr
03e7c     41 00 00 FF 
03e80     4C E4 85 F1 | 	sub	objptr, ##33356
03e84                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
03e84                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
03e84                 | '   lastline=pslpeek(header(4))
03e84                 | '   return 0
03e84     00 FA 05 F6 | 	mov	result1, #0
03e88     C0 01 90 FD | 	jmp	#LR__0326
03e8c                 | LR__0322
03e8c                 | ' 
03e8c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
03e8c     28 4E 05 F1 | 	add	fp, #40
03e90     A7 1E 02 FB | 	rdlong	local01, fp
03e94     28 4E 85 F1 | 	sub	fp, #40
03e98     FF FF 3F FF 
03e9c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03ea0     6C 00 90 AD |  if_e	jmp	#LR__0323
03ea4     24 4E 05 F1 | 	add	fp, #36
03ea8     A7 22 02 FB | 	rdlong	local03, fp
03eac     24 4E 85 F1 | 	sub	fp, #36
03eb0     FF FF 7F FF 
03eb4     FF 23 0E F2 | 	cmp	local03, ##-1 wz
03eb8     54 00 90 5D |  if_ne	jmp	#LR__0323
03ebc     28 4E 05 F1 | 	add	fp, #40
03ec0     A7 12 02 FB | 	rdlong	arg01, fp
03ec4     28 4E 85 F1 | 	sub	fp, #40
03ec8     10 12 06 F1 | 	add	arg01, #16
03ecc     01 14 66 F6 | 	neg	arg02, #1
03ed0     01 16 06 F6 | 	mov	arg03, #1
03ed4     00 18 06 F6 | 	mov	arg04, #0
03ed8     0B 00 00 FF 
03edc     C0 E4 05 F1 | 	add	objptr, ##5824
03ee0                 | '     return fill(addr, pattern, count, listPtr, 4)
03ee0     04 1A 06 F6 | 	mov	arg05, #4
03ee4     D4 0F B1 FD | 	call	#_psram_spin2_fill
03ee8     28 4E 05 F1 | 	add	fp, #40
03eec     A7 1E 02 FB | 	rdlong	local01, fp
03ef0     28 4E 85 F1 | 	sub	fp, #40
03ef4     35 00 00 FF 
03ef8     88 E5 05 F1 | 	add	objptr, ##27528
03efc     F2 1E 62 FC | 	wrlong	local01, objptr
03f00     41 00 00 FF 
03f04     48 E4 85 F1 | 	sub	objptr, ##33352
03f08                 | ' '   print "deleted first line"
03f08                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
03f08                 | '   programstart=header(5) ' adjust the program start to point on the first new line
03f08                 | '   return 0
03f08     00 FA 05 F6 | 	mov	result1, #0
03f0c     3C 01 90 FD | 	jmp	#LR__0326
03f10                 | LR__0323
03f10                 | ' 
03f10                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
03f10     28 4E 05 F1 | 	add	fp, #40
03f14     A7 1E 02 FB | 	rdlong	local01, fp
03f18     28 4E 85 F1 | 	sub	fp, #40
03f1c     FF FF 3F FF 
03f20     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03f24     24 4E 05 51 |  if_ne	add	fp, #36
03f28     A7 22 02 5B |  if_ne	rdlong	local03, fp
03f2c     24 4E 85 51 |  if_ne	sub	fp, #36
03f30     FF FF 7F 5F 
03f34     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
03f38     68 00 90 AD |  if_e	jmp	#LR__0324
03f3c     28 4E 05 F1 | 	add	fp, #40
03f40     A7 12 02 FB | 	rdlong	arg01, fp
03f44     10 12 06 F1 | 	add	arg01, #16
03f48     04 4E 85 F1 | 	sub	fp, #4
03f4c     A7 14 02 FB | 	rdlong	arg02, fp
03f50     24 4E 85 F1 | 	sub	fp, #36
03f54     01 16 06 F6 | 	mov	arg03, #1
03f58     00 18 06 F6 | 	mov	arg04, #0
03f5c     0B 00 00 FF 
03f60     C0 E4 05 F1 | 	add	objptr, ##5824
03f64                 | '     return fill(addr, pattern, count, listPtr, 4)
03f64     04 1A 06 F6 | 	mov	arg05, #4
03f68     50 0F B1 FD | 	call	#_psram_spin2_fill
03f6c     24 4E 05 F1 | 	add	fp, #36
03f70     A7 12 02 FB | 	rdlong	arg01, fp
03f74     14 12 06 F1 | 	add	arg01, #20
03f78     04 4E 05 F1 | 	add	fp, #4
03f7c     A7 14 02 FB | 	rdlong	arg02, fp
03f80     28 4E 85 F1 | 	sub	fp, #40
03f84     01 16 06 F6 | 	mov	arg03, #1
03f88     00 18 06 F6 | 	mov	arg04, #0
03f8c                 | '     return fill(addr, pattern, count, listPtr, 4)
03f8c     04 1A 06 F6 | 	mov	arg05, #4
03f90     28 0F B1 FD | 	call	#_psram_spin2_fill
03f94     0B 00 00 FF 
03f98     C0 E4 85 F1 | 	sub	objptr, ##5824
03f9c                 | '    pslpoke(header(5)+16,header(4))  
03f9c                 | '    pslpoke(header(4)+20, header(5))
03f9c                 | '    return 0
03f9c     00 FA 05 F6 | 	mov	result1, #0
03fa0     A8 00 90 FD | 	jmp	#LR__0326
03fa4                 | LR__0324
03fa4     10 4E 05 F1 | 	add	fp, #16
03fa8     A7 1E 02 FB | 	rdlong	local01, fp
03fac     08 4E 85 F1 | 	sub	fp, #8
03fb0     A7 1E 62 FC | 	wrlong	local01, fp
03fb4     41 00 00 FF 
03fb8     48 E4 05 F1 | 	add	objptr, ##33352
03fbc     F2 1E 02 FB | 	rdlong	local01, objptr
03fc0     08 4E 05 F1 | 	add	fp, #8
03fc4     A7 1E 62 FC | 	wrlong	local01, fp
03fc8     10 4E 85 F1 | 	sub	fp, #16
03fcc                 | ' 
03fcc                 | ' 
03fcc                 | ' 
03fcc                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
03fcc                 | ' 
03fcc                 | ' lineptr2=searchptr
03fcc                 | ' searchptr=programstart
03fcc                 | ' 
03fcc                 | ' do
03fcc     35 00 00 FF 
03fd0     88 E5 85 F1 | 	sub	objptr, ##27528
03fd4                 | LR__0325
03fd4     14 4E 05 F1 | 	add	fp, #20
03fd8     A7 12 02 F6 | 	mov	arg01, fp
03fdc     04 4E 85 F1 | 	sub	fp, #4
03fe0     A7 14 02 FB | 	rdlong	arg02, fp
03fe4     10 4E 85 F1 | 	sub	fp, #16
03fe8     18 16 06 F6 | 	mov	arg03, #24
03fec     94 0D B1 FD | 	call	#_psram_spin2_read1
03ff0     10 4E 05 F1 | 	add	fp, #16
03ff4     A7 1E 02 FB | 	rdlong	local01, fp
03ff8     08 4E 85 F1 | 	sub	fp, #8
03ffc     A7 1E 62 FC | 	wrlong	local01, fp
04000     20 4E 05 F1 | 	add	fp, #32
04004     A7 1E 02 FB | 	rdlong	local01, fp
04008     18 4E 85 F1 | 	sub	fp, #24
0400c     A7 1E 62 FC | 	wrlong	local01, fp
04010     04 4E 05 F1 | 	add	fp, #4
04014     A7 1E 02 FB | 	rdlong	local01, fp
04018     10 4E 85 F1 | 	sub	fp, #16
0401c     A7 22 02 FB | 	rdlong	local03, fp
04020     04 4E 85 F1 | 	sub	fp, #4
04024     11 1F 12 F2 | 	cmp	local01, local03 wc
04028     28 4E 05 C1 |  if_b	add	fp, #40
0402c     A7 20 02 CB |  if_b	rdlong	local02, fp
04030     28 4E 85 C1 |  if_b	sub	fp, #40
04034     FF FF 3F CF 
04038     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
0403c     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0325
04040     0B 00 00 FF 
04044     C0 E4 85 F1 | 	sub	objptr, ##5824
04048     00 FA 05 F6 | 	mov	result1, #0
0404c                 | LR__0326
0404c     A7 F0 03 F6 | 	mov	ptra, fp
04050     B2 00 A0 FD | 	call	#popregs_
04054                 | _deleteline_ret
04054     2D 00 64 FD | 	ret
04058                 | 
04058                 | ' 
04058                 | ' sub save_line
04058                 | _save_line
04058     03 4A 05 F6 | 	mov	COUNT_, #3
0405c     A8 00 A0 FD | 	call	#pushregs_
04060     41 00 00 FF 
04064     40 E4 05 F1 | 	add	objptr, ##33344
04068     F2 16 02 FB | 	rdlong	arg03, objptr
0406c     01 16 06 F1 | 	add	arg03, #1
04070     05 00 00 FF 
04074     18 E4 85 F1 | 	sub	objptr, ##2584
04078     F2 14 02 FB | 	rdlong	arg02, objptr
0407c     0B 15 02 FD | 	qmul	arg02, arg03
04080     0E 00 00 FF 
04084     44 E4 85 F1 | 	sub	objptr, ##7236
04088     F2 12 02 FB | 	rdlong	arg01, objptr
0408c     2D 00 00 FF 
04090     E4 E5 85 F1 | 	sub	objptr, ##23524
04094     09 1F 02 F6 | 	mov	local01, arg01
04098     18 20 62 FD | 	getqx	local02
0409c     97 06 48 FB | 	callpa	#(@LR__0331-@LR__0330)>>2,fcache_load_ptr_
040a0                 | LR__0330
040a0     0F FB C9 FA | 	rdbyte	result1, local01 wz
040a4     01 1E 06 51 |  if_ne	add	local01, #1
040a8     F4 FF 9F 5D |  if_ne	jmp	#LR__0330
040ac                 | LR__0331
040ac     09 1F 82 F1 | 	sub	local01, arg01
040b0     03 1E CE F7 | 	test	local01, #3 wz
040b4     02 1E 46 50 |  if_ne	shr	local01, #2
040b8     01 1E 06 51 |  if_ne	add	local01, #1
040bc     02 1E 66 50 |  if_ne	shl	local01, #2
040c0     10 23 02 F6 | 	mov	local03, local02
040c4     0F 23 02 F1 | 	add	local03, local01
040c8     3A 00 00 FF 
040cc     20 E4 05 F1 | 	add	objptr, ##29728
040d0     F2 16 02 FB | 	rdlong	arg03, objptr
040d4     10 17 02 F1 | 	add	arg03, local02
040d8     04 00 00 FF 
040dc     28 E4 05 F1 | 	add	objptr, ##2088
040e0     F2 16 62 FC | 	wrlong	arg03, objptr
040e4     04 E4 05 F1 | 	add	objptr, #4
040e8     F2 1E 62 FC | 	wrlong	local01, objptr
040ec     0C E4 85 F1 | 	sub	objptr, #12
040f0     F2 12 02 F6 | 	mov	arg01, objptr
040f4     04 00 00 FF 
040f8     20 E4 85 F1 | 	sub	objptr, ##2080
040fc     F2 14 02 FB | 	rdlong	arg02, objptr
04100     10 17 02 F6 | 	mov	arg03, local02
04104     2E 00 00 FF 
04108     60 E5 85 F1 | 	sub	objptr, ##23904
0410c     10 0D B1 FD | 	call	#_psram_spin2_write
04110     22 00 00 FF 
04114     24 E5 05 F1 | 	add	objptr, ##17700
04118     F2 12 02 FB | 	rdlong	arg01, objptr
0411c     0C 00 00 FF 
04120     3C E4 05 F1 | 	add	objptr, ##6204
04124     F2 14 02 FB | 	rdlong	arg02, objptr
04128     10 15 02 F1 | 	add	arg02, local02
0412c     0F 17 02 F6 | 	mov	arg03, local01
04130     2E 00 00 FF 
04134     60 E5 85 F1 | 	sub	objptr, ##23904
04138     E4 0C B1 FD | 	call	#_psram_spin2_write
0413c     2E 00 00 FF 
04140     60 E5 05 F1 | 	add	objptr, ##23904
04144     F2 1E 02 FB | 	rdlong	local01, objptr
04148     11 1F 02 F1 | 	add	local01, local03
0414c     F2 1E 62 FC | 	wrlong	local01, objptr
04150     3A 00 00 FF 
04154     20 E4 85 F1 | 	sub	objptr, ##29728
04158     A7 F0 03 F6 | 	mov	ptra, fp
0415c     B2 00 A0 FD | 	call	#popregs_
04160                 | _save_line_ret
04160     2D 00 64 FD | 	ret
04164                 | 
04164                 | ' 
04164                 | ' 
04164                 | ' function insertline(aline as ulong) as integer
04164                 | _insertline
04164     02 4A 05 F6 | 	mov	COUNT_, #2
04168     A8 00 A0 FD | 	call	#pushregs_
0416c     28 F0 07 F1 | 	add	ptra, #40
04170     04 4E 05 F1 | 	add	fp, #4
04174     A7 12 62 FC | 	wrlong	arg01, fp
04178     41 00 00 FF 
0417c     48 E4 05 F1 | 	add	objptr, ##33352
04180     F2 1E 02 FB | 	rdlong	local01, objptr
04184     04 4E 05 F1 | 	add	fp, #4
04188     A7 1E 62 FC | 	wrlong	local01, fp
0418c     08 4E 85 F1 | 	sub	fp, #8
04190                 | ' 
04190                 | ' do
04190     35 00 00 FF 
04194     88 E5 85 F1 | 	sub	objptr, ##27528
04198                 | LR__0340
04198     10 4E 05 F1 | 	add	fp, #16
0419c     A7 12 02 F6 | 	mov	arg01, fp
041a0     08 4E 85 F1 | 	sub	fp, #8
041a4     A7 14 02 FB | 	rdlong	arg02, fp
041a8     08 4E 85 F1 | 	sub	fp, #8
041ac     18 16 06 F6 | 	mov	arg03, #24
041b0     D0 0B B1 FD | 	call	#_psram_spin2_read1
041b4     08 4E 05 F1 | 	add	fp, #8
041b8     A7 1E 02 FB | 	rdlong	local01, fp
041bc     04 4E 05 F1 | 	add	fp, #4
041c0     A7 1E 62 FC | 	wrlong	local01, fp
041c4     18 4E 05 F1 | 	add	fp, #24
041c8     A7 1E 02 FB | 	rdlong	local01, fp
041cc     1C 4E 85 F1 | 	sub	fp, #28
041d0     A7 1E 62 FC | 	wrlong	local01, fp
041d4     08 4E 05 F1 | 	add	fp, #8
041d8     A7 1E 02 FB | 	rdlong	local01, fp
041dc     0C 4E 85 F1 | 	sub	fp, #12
041e0     A7 16 02 FB | 	rdlong	arg03, fp
041e4     04 4E 85 F1 | 	sub	fp, #4
041e8     0B 1F 12 F2 | 	cmp	local01, arg03 wc
041ec     24 4E 05 C1 |  if_b	add	fp, #36
041f0     A7 20 02 CB |  if_b	rdlong	local02, fp
041f4     24 4E 85 C1 |  if_b	sub	fp, #36
041f8     FF FF 3F CF 
041fc     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
04200     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0340
04204     0B 00 00 FF 
04208     C0 E4 85 F1 | 	sub	objptr, ##5824
0420c                 | ' 
0420c                 | ' if header(0)=aline then return -1 ' delete it first
0420c     10 4E 05 F1 | 	add	fp, #16
04210     A7 1E 02 FB | 	rdlong	local01, fp
04214     0C 4E 85 F1 | 	sub	fp, #12
04218     A7 20 02 FB | 	rdlong	local02, fp
0421c     04 4E 85 F1 | 	sub	fp, #4
04220     10 1F 0A F2 | 	cmp	local01, local02 wz
04224     01 FA 65 A6 |  if_e	neg	result1, #1
04228     74 01 90 AD |  if_e	jmp	#LR__0343
0422c                 | ' if header(0)<aline then return -2 ' end of program reached
0422c     10 4E 05 F1 | 	add	fp, #16
04230     A7 1E 02 FB | 	rdlong	local01, fp
04234     0C 4E 85 F1 | 	sub	fp, #12
04238     A7 16 02 FB | 	rdlong	arg03, fp
0423c     04 4E 85 F1 | 	sub	fp, #4
04240     0B 1F 12 F2 | 	cmp	local01, arg03 wc
04244     02 FA 65 C6 |  if_b	neg	result1, #2
04248     54 01 90 CD |  if_b	jmp	#LR__0343
0424c                 | ' 
0424c                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
0424c     20 4E 05 F1 | 	add	fp, #32
04250     A7 1E 02 FB | 	rdlong	local01, fp
04254     20 4E 85 F1 | 	sub	fp, #32
04258     FF FF 7F FF 
0425c     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
04260     84 00 90 5D |  if_ne	jmp	#LR__0341
04264     3A 00 00 FF 
04268     20 E4 05 F1 | 	add	objptr, ##29728
0426c     F2 1E 02 FB | 	rdlong	local01, objptr
04270     07 00 00 FF 
04274     28 E4 05 F1 | 	add	objptr, ##3624
04278     F2 1E 62 FC | 	wrlong	local01, objptr
0427c     0C 4E 05 F1 | 	add	fp, #12
04280     A7 12 02 FB | 	rdlong	arg01, fp
04284     0C 4E 85 F1 | 	sub	fp, #12
04288     10 12 06 F1 | 	add	arg01, #16
0428c     07 00 00 FF 
04290     28 E4 85 F1 | 	sub	objptr, ##3624
04294     F2 14 02 FB | 	rdlong	arg02, objptr
04298     01 16 06 F6 | 	mov	arg03, #1
0429c     00 18 06 F6 | 	mov	arg04, #0
042a0     2E 00 00 FF 
042a4     60 E5 85 F1 | 	sub	objptr, ##23904
042a8                 | '     return fill(addr, pattern, count, listPtr, 4)
042a8     04 1A 06 F6 | 	mov	arg05, #4
042ac     0C 0C B1 FD | 	call	#_psram_spin2_fill
042b0     32 00 00 FF 
042b4     90 E5 05 F1 | 	add	objptr, ##26000
042b8     FF FF FF FF 
042bc     F2 FE 6B FC | 	wrlong	##-1, objptr
042c0     0C 4E 05 F1 | 	add	fp, #12
042c4     A7 1E 02 FB | 	rdlong	local01, fp
042c8     0C 4E 85 F1 | 	sub	fp, #12
042cc     04 E4 05 F1 | 	add	objptr, #4
042d0     F2 1E 62 FC | 	wrlong	local01, objptr
042d4     3E 00 00 FF 
042d8     54 E4 85 F1 | 	sub	objptr, ##31828
042dc     78 FD BF FD | 	call	#_save_line
042e0                 | '   programstart=programptr
042e0                 | '   pslpoke(lineptr2+16,programptr)
042e0                 | '   ucompiledline(4)=$FFFF_FFFF
042e0                 | '   ucompiledline(5)=lineptr2
042e0                 | '   save_line
042e0                 | '   return 0
042e0     00 FA 05 F6 | 	mov	result1, #0
042e4     B8 00 90 FD | 	jmp	#LR__0343
042e8                 | LR__0341
042e8                 | ' 
042e8                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
042e8     20 4E 05 F1 | 	add	fp, #32
042ec     A7 1E 02 FB | 	rdlong	local01, fp
042f0     20 4E 85 F1 | 	sub	fp, #32
042f4     FF FF 7F FF 
042f8     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
042fc     9C 00 90 AD |  if_e	jmp	#LR__0342
04300     20 4E 05 F1 | 	add	fp, #32
04304     A7 1E 02 FB | 	rdlong	local01, fp
04308     3E 00 00 FF 
0430c     50 E4 05 F1 | 	add	objptr, ##31824
04310     F2 1E 62 FC | 	wrlong	local01, objptr
04314     14 4E 85 F1 | 	sub	fp, #20
04318     A7 1E 02 FB | 	rdlong	local01, fp
0431c     04 E4 05 F1 | 	add	objptr, #4
04320     F2 1E 62 FC | 	wrlong	local01, objptr
04324     A7 12 02 FB | 	rdlong	arg01, fp
04328     0C 4E 85 F1 | 	sub	fp, #12
0432c     10 12 06 F1 | 	add	arg01, #16
04330     04 00 00 FF 
04334     34 E4 85 F1 | 	sub	objptr, ##2100
04338     F2 14 02 FB | 	rdlong	arg02, objptr
0433c     01 16 06 F6 | 	mov	arg03, #1
04340     00 18 06 F6 | 	mov	arg04, #0
04344     2E 00 00 FF 
04348     60 E5 85 F1 | 	sub	objptr, ##23904
0434c                 | '     return fill(addr, pattern, count, listPtr, 4)
0434c     04 1A 06 F6 | 	mov	arg05, #4
04350     68 0B B1 FD | 	call	#_psram_spin2_fill
04354     20 4E 05 F1 | 	add	fp, #32
04358     A7 12 02 FB | 	rdlong	arg01, fp
0435c     20 4E 85 F1 | 	sub	fp, #32
04360     14 12 06 F1 | 	add	arg01, #20
04364     2E 00 00 FF 
04368     60 E5 05 F1 | 	add	objptr, ##23904
0436c     F2 14 02 FB | 	rdlong	arg02, objptr
04370     01 16 06 F6 | 	mov	arg03, #1
04374     00 18 06 F6 | 	mov	arg04, #0
04378     2E 00 00 FF 
0437c     60 E5 85 F1 | 	sub	objptr, ##23904
04380                 | '     return fill(addr, pattern, count, listPtr, 4)
04380     04 1A 06 F6 | 	mov	arg05, #4
04384     34 0B B1 FD | 	call	#_psram_spin2_fill
04388     0B 00 00 FF 
0438c     C0 E4 85 F1 | 	sub	objptr, ##5824
04390     C4 FC BF FD | 	call	#_save_line
04394                 | '   ucompiledline(4)=header(4)
04394                 | '   ucompiledline(5)=lineptr2
04394                 | '   pslpoke(lineptr2+16,programptr)
04394                 | '   pslpoke(header(4)+20,programptr)
04394                 | '   save_line
04394                 | '   return 0
04394     00 FA 05 F6 | 	mov	result1, #0
04398     04 00 90 FD | 	jmp	#LR__0343
0439c                 | LR__0342
0439c     00 FA 05 F6 | 	mov	result1, #0
043a0                 | LR__0343
043a0     A7 F0 03 F6 | 	mov	ptra, fp
043a4     B2 00 A0 FD | 	call	#popregs_
043a8                 | _insertline_ret
043a8     2D 00 64 FD | 	ret
043ac                 | 
043ac                 | ' 
043ac                 | ' sub add_line_at_end(aline) 
043ac                 | _add_line_at_end
043ac     41 00 00 FF 
043b0     4C E4 05 F1 | 	add	objptr, ##33356
043b4     F2 12 62 FC | 	wrlong	arg01, objptr
043b8     04 E4 05 F1 | 	add	objptr, #4
043bc     F2 14 02 FB | 	rdlong	arg02, objptr
043c0     03 00 00 FF 
043c4     00 E4 85 F1 | 	sub	objptr, ##1536
043c8     F2 14 62 FC | 	wrlong	arg02, objptr
043cc     03 00 00 FF 
043d0     00 E4 05 F1 | 	add	objptr, ##1536
043d4     F2 12 02 FB | 	rdlong	arg01, objptr
043d8     14 12 06 F1 | 	add	arg01, #20
043dc     07 00 00 FF 
043e0     30 E4 85 F1 | 	sub	objptr, ##3632
043e4     F2 14 02 FB | 	rdlong	arg02, objptr
043e8     01 16 06 F6 | 	mov	arg03, #1
043ec     00 18 06 F6 | 	mov	arg04, #0
043f0     2E 00 00 FF 
043f4     60 E5 85 F1 | 	sub	objptr, ##23904
043f8                 | '     return fill(addr, pattern, count, listPtr, 4)
043f8     04 1A 06 F6 | 	mov	arg05, #4
043fc     BC 0A B1 FD | 	call	#_psram_spin2_fill
04400     2E 00 00 FF 
04404     60 E5 05 F1 | 	add	objptr, ##23904
04408     F2 14 02 FB | 	rdlong	arg02, objptr
0440c     07 00 00 FF 
04410     30 E4 05 F1 | 	add	objptr, ##3632
04414     F2 14 62 FC | 	wrlong	arg02, objptr
04418     02 00 00 FF 
0441c     FC E5 85 F1 | 	sub	objptr, ##1532
04420     FF FF BF FF 
04424     F2 FE 6B FC | 	wrlong	##2147483647, objptr
04428                 | ' 
04428                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
04428                 | ' if programptr=0 then ucompiledline(4)=$FFFFFFFF ' that is the first line
04428     04 00 00 FF 
0442c     34 E4 85 F1 | 	sub	objptr, ##2100
04430     F2 14 0A FB | 	rdlong	arg02, objptr wz
04434     3A 00 00 FF 
04438     20 E4 85 F1 | 	sub	objptr, ##29728
0443c     3E 00 00 AF 
04440     50 E4 05 A1 |  if_e	add	objptr, ##31824
04444     FF FF FF AF 
04448     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
0444c     3E 00 00 AF 
04450     50 E4 85 A1 |  if_e	sub	objptr, ##31824
04454     00 FC BF FD | 	call	#_save_line
04458     3A 00 00 FF 
0445c     20 E4 05 F1 | 	add	objptr, ##29728
04460     F2 12 02 FB | 	rdlong	arg01, objptr
04464     01 14 66 F6 | 	neg	arg02, #1
04468     01 16 06 F6 | 	mov	arg03, #1
0446c     00 18 06 F6 | 	mov	arg04, #0
04470     2E 00 00 FF 
04474     60 E5 85 F1 | 	sub	objptr, ##23904
04478                 | '     return fill(addr, pattern, count, listPtr, 4)
04478     04 1A 06 F6 | 	mov	arg05, #4
0447c     3C 0A B1 FD | 	call	#_psram_spin2_fill
04480     0B 00 00 FF 
04484     C0 E4 85 F1 | 	sub	objptr, ##5824
04488                 | _add_line_at_end_ret
04488     2D 00 64 FD | 	ret
0448c                 | 
0448c                 | ' 
0448c                 | ' function compile_immediate(linetype as ulong) as integer
0448c                 | _compile_immediate
0448c     09 4A 05 F6 | 	mov	COUNT_, #9
04490     A8 00 A0 FD | 	call	#pushregs_
04494                 | _compile_immediate_enter
04494     09 25 0A F6 | 	mov	local04, arg01 wz
04498     00 26 06 F6 | 	mov	local05, #0
0449c     00 28 06 F6 | 	mov	local06, #0
044a0                 | ' 
044a0                 | ' ' linetype=cont+1, linetype=0 immediate
044a0                 | ' '  : 1: this is the first part of the line that will continue
044a0                 | ' ' 2 - this is the continuation of the line
044a0                 | ' ' 3 - this is the last continued line
044a0                 | ' ' 4 - this is the one and only part
044a0                 | ' 
044a0                 | ' err=0
044a0                 | ' cmd=0
044a0                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
044a0     2C 00 90 5D |  if_ne	jmp	#LR__0350
044a4     2B 00 00 FF 
044a8     D4 E5 05 F1 | 	add	objptr, ##22484
044ac     F2 28 02 FB | 	rdlong	local06, objptr
044b0     02 00 00 FF 
044b4     34 E4 05 F1 | 	add	objptr, ##1076
044b8     F2 02 68 FC | 	wrlong	#1, objptr
044bc     13 00 00 FF 
044c0     38 E4 05 F1 | 	add	objptr, ##9784
044c4     F2 00 68 FC | 	wrlong	#0, objptr
044c8     41 00 00 FF 
044cc     40 E4 85 F1 | 	sub	objptr, ##33344
044d0                 | LR__0350
044d0                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
044d0     02 24 0E F2 | 	cmp	local04, #2 wz
044d4     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
044d8     2B 00 00 AF 
044dc     D4 E5 05 A1 |  if_e	add	objptr, ##22484
044e0     F2 28 02 AB |  if_e	rdlong	local06, objptr
044e4     02 00 00 AF 
044e8     34 E4 05 A1 |  if_e	add	objptr, ##1076
044ec     F2 02 68 AC |  if_e	wrlong	#1, objptr
044f0     2E 00 00 AF 
044f4     08 E4 85 A1 |  if_e	sub	objptr, ##23560
044f8                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
044f8     04 24 0E F2 | 	cmp	local04, #4 wz
044fc     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
04500     2C 00 90 5D |  if_ne	jmp	#LR__0351
04504     2B 00 00 FF 
04508     DC E5 05 F1 | 	add	objptr, ##22492
0450c     F2 28 02 FB | 	rdlong	local06, objptr
04510     02 00 00 FF 
04514     2C E4 05 F1 | 	add	objptr, ##1068
04518     F2 04 68 FC | 	wrlong	#2, objptr
0451c     13 00 00 FF 
04520     38 E4 05 F1 | 	add	objptr, ##9784
04524     F2 04 68 FC | 	wrlong	#2, objptr
04528     41 00 00 FF 
0452c     40 E4 85 F1 | 	sub	objptr, ##33344
04530                 | LR__0351
04530                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
04530     05 24 0E F2 | 	cmp	local04, #5 wz
04534     40 00 90 5D |  if_ne	jmp	#LR__0352
04538     2E 00 00 FF 
0453c     08 E4 05 F1 | 	add	objptr, ##23560
04540     F2 2A 02 FB | 	rdlong	local07, objptr
04544     15 29 02 F6 | 	mov	local06, local07
04548     03 28 66 F0 | 	shl	local06, #3
0454c     02 00 00 FF 
04550     38 E4 85 F1 | 	sub	objptr, ##1080
04554     F2 28 02 F1 | 	add	local06, objptr
04558     04 28 06 F1 | 	add	local06, #4
0455c     14 29 02 FB | 	rdlong	local06, local06
04560     01 2A 06 F1 | 	add	local07, #1
04564     02 00 00 FF 
04568     38 E4 05 F1 | 	add	objptr, ##1080
0456c     F2 2A 62 FC | 	wrlong	local07, objptr
04570     2E 00 00 FF 
04574     08 E4 85 F1 | 	sub	objptr, ##23560
04578                 | LR__0352
04578     00 2C 06 F6 | 	mov	local08, #0
0457c                 | ' vars=0
0457c                 | ' 'print  "In compile_immediate cmd=:", cmd
0457c                 | ' 451 select case cmd
0457c     40 28 0E F2 | 	cmp	local06, #64 wz
04580     41 28 0E 52 |  if_ne	cmp	local06, #65 wz
04584     F8 02 90 AD |  if_e	jmp	#LR__0396
04588     4C 28 0E F2 | 	cmp	local06, #76 wz
0458c     64 01 90 AD |  if_e	jmp	#LR__0353
04590     4D 28 0E F2 | 	cmp	local06, #77 wz
04594     E8 02 90 AD |  if_e	jmp	#LR__0396
04598     42 28 0E F2 | 	cmp	local06, #66 wz
0459c     60 01 90 AD |  if_e	jmp	#LR__0354
045a0     43 28 0E F2 | 	cmp	local06, #67 wz
045a4     64 01 90 AD |  if_e	jmp	#LR__0355
045a8     45 28 0E F2 | 	cmp	local06, #69 wz
045ac     68 01 90 AD |  if_e	jmp	#LR__0356
045b0     46 28 0E F2 | 	cmp	local06, #70 wz
045b4     6C 01 90 AD |  if_e	jmp	#LR__0357
045b8     47 28 0E F2 | 	cmp	local06, #71 wz
045bc     70 01 90 AD |  if_e	jmp	#LR__0358
045c0     48 28 0E F2 | 	cmp	local06, #72 wz
045c4     74 01 90 AD |  if_e	jmp	#LR__0359
045c8     49 28 0E F2 | 	cmp	local06, #73 wz
045cc     78 01 90 AD |  if_e	jmp	#LR__0360
045d0     44 28 0E F2 | 	cmp	local06, #68 wz
045d4     7C 01 90 AD |  if_e	jmp	#LR__0361
045d8     4E 28 0E F2 | 	cmp	local06, #78 wz
045dc     80 01 90 AD |  if_e	jmp	#LR__0362
045e0     50 28 0E F2 | 	cmp	local06, #80 wz
045e4     94 01 90 AD |  if_e	jmp	#LR__0364
045e8     51 28 0E F2 | 	cmp	local06, #81 wz
045ec     94 01 90 AD |  if_e	jmp	#LR__0365
045f0     52 28 0E F2 | 	cmp	local06, #82 wz
045f4     94 01 90 AD |  if_e	jmp	#LR__0366
045f8     59 28 0E F2 | 	cmp	local06, #89 wz
045fc     94 01 90 AD |  if_e	jmp	#LR__0367
04600     55 28 0E F2 | 	cmp	local06, #85 wz
04604     94 01 90 AD |  if_e	jmp	#LR__0368
04608     56 28 0E F2 | 	cmp	local06, #86 wz
0460c     94 01 90 AD |  if_e	jmp	#LR__0369
04610     57 28 0E F2 | 	cmp	local06, #87 wz
04614     70 28 0E 52 |  if_ne	cmp	local06, #112 wz
04618     64 02 90 AD |  if_e	jmp	#LR__0396
0461c     58 28 0E F2 | 	cmp	local06, #88 wz
04620     88 01 90 AD |  if_e	jmp	#LR__0370
04624     4A 28 0E F2 | 	cmp	local06, #74 wz
04628     88 01 90 AD |  if_e	jmp	#LR__0371
0462c     4B 28 0E F2 | 	cmp	local06, #75 wz
04630     88 01 90 AD |  if_e	jmp	#LR__0372
04634     5A 28 0E F2 | 	cmp	local06, #90 wz
04638     88 01 90 AD |  if_e	jmp	#LR__0373
0463c     5C 28 0E F2 | 	cmp	local06, #92 wz
04640     88 01 90 AD |  if_e	jmp	#LR__0374
04644     5D 28 0E F2 | 	cmp	local06, #93 wz
04648     34 02 90 AD |  if_e	jmp	#LR__0396
0464c     5E 28 0E F2 | 	cmp	local06, #94 wz
04650     84 01 90 AD |  if_e	jmp	#LR__0375
04654     5F 28 0E F2 | 	cmp	local06, #95 wz
04658     84 01 90 AD |  if_e	jmp	#LR__0376
0465c     60 28 0E F2 | 	cmp	local06, #96 wz
04660     84 01 90 AD |  if_e	jmp	#LR__0377
04664     61 28 0E F2 | 	cmp	local06, #97 wz
04668     84 01 90 AD |  if_e	jmp	#LR__0378
0466c     63 28 0E F2 | 	cmp	local06, #99 wz
04670     84 01 90 AD |  if_e	jmp	#LR__0379
04674     68 28 0E F2 | 	cmp	local06, #104 wz
04678     84 01 90 AD |  if_e	jmp	#LR__0380
0467c     69 28 0E F2 | 	cmp	local06, #105 wz
04680     84 01 90 AD |  if_e	jmp	#LR__0381
04684     6D 28 0E F2 | 	cmp	local06, #109 wz
04688     84 01 90 AD |  if_e	jmp	#LR__0382
0468c     6C 28 0E F2 | 	cmp	local06, #108 wz
04690     84 01 90 AD |  if_e	jmp	#LR__0383
04694     71 28 0E F2 | 	cmp	local06, #113 wz
04698     84 01 90 AD |  if_e	jmp	#LR__0384
0469c     79 28 0E F2 | 	cmp	local06, #121 wz
046a0     84 01 90 AD |  if_e	jmp	#LR__0385
046a4     77 28 0E F2 | 	cmp	local06, #119 wz
046a8     84 01 90 AD |  if_e	jmp	#LR__0386
046ac     78 28 0E F2 | 	cmp	local06, #120 wz
046b0     84 01 90 AD |  if_e	jmp	#LR__0387
046b4     7C 28 0E F2 | 	cmp	local06, #124 wz
046b8     84 01 90 AD |  if_e	jmp	#LR__0388
046bc     7D 28 0E F2 | 	cmp	local06, #125 wz
046c0     84 01 90 AD |  if_e	jmp	#LR__0389
046c4     7E 28 0E F2 | 	cmp	local06, #126 wz
046c8     84 01 90 AD |  if_e	jmp	#LR__0390
046cc     7F 28 0E F2 | 	cmp	local06, #127 wz
046d0     84 01 90 AD |  if_e	jmp	#LR__0391
046d4     80 28 0E F2 | 	cmp	local06, #128 wz
046d8     84 01 90 AD |  if_e	jmp	#LR__0392
046dc     72 28 0E F2 | 	cmp	local06, #114 wz
046e0     84 01 90 AD |  if_e	jmp	#LR__0393
046e4     01 00 00 FF 
046e8     04 28 0E F2 | 	cmp	local06, ##516 wz
046ec     80 01 90 AD |  if_e	jmp	#LR__0394
046f0     84 01 90 FD | 	jmp	#LR__0395
046f4                 | LR__0353
046f4     88 0F B0 FD | 	call	#_compile_fun_varp
046f8     FD 2C 02 F6 | 	mov	local08, result1
046fc     80 01 90 FD | 	jmp	#LR__0396
04700                 | LR__0354
04700     9C 0B B0 FD | 	call	#_compile_fun_2p
04704     FD 26 02 F6 | 	mov	local05, result1
04708     74 01 90 FD | 	jmp	#LR__0396
0470c                 | LR__0355
0470c     90 0B B0 FD | 	call	#_compile_fun_2p
04710     FD 26 02 F6 | 	mov	local05, result1
04714     68 01 90 FD | 	jmp	#LR__0396
04718                 | LR__0356
04718     F8 0B B0 FD | 	call	#_compile_fun_3p
0471c     FD 26 02 F6 | 	mov	local05, result1
04720     5C 01 90 FD | 	jmp	#LR__0396
04724                 | LR__0357
04724     EC 0B B0 FD | 	call	#_compile_fun_3p
04728     FD 26 02 F6 | 	mov	local05, result1
0472c     50 01 90 FD | 	jmp	#LR__0396
04730                 | LR__0358
04730     AC 0C B0 FD | 	call	#_compile_fun_4p
04734     FD 26 02 F6 | 	mov	local05, result1
04738     44 01 90 FD | 	jmp	#LR__0396
0473c                 | LR__0359
0473c     A0 0C B0 FD | 	call	#_compile_fun_4p
04740     FD 26 02 F6 | 	mov	local05, result1
04744     38 01 90 FD | 	jmp	#LR__0396
04748                 | LR__0360
04748     78 2D B0 FD | 	call	#_expr
0474c                 | ' 
0474c                 | ' 
0474c                 | ' expr()
0474c                 | ' return 0
0474c     00 26 06 F6 | 	mov	local05, #0
04750     2C 01 90 FD | 	jmp	#LR__0396
04754                 | LR__0361
04754     54 10 B0 FD | 	call	#_compile_print
04758     FD 26 02 F6 | 	mov	local05, result1
0475c     DC 01 90 FD | 	jmp	#LR__0397
04760                 | LR__0362
04760     01 24 16 F2 | 	cmp	local04, #1 wc
04764     08 00 90 CD |  if_b	jmp	#LR__0363
04768     F8 29 B0 FD | 	call	#_compile_goto
0476c     CC 01 90 FD | 	jmp	#LR__0397
04770                 | LR__0363
04770     19 12 06 F6 | 	mov	arg01, #25
04774     FC DB B0 FD | 	call	#_printerror
04778     C0 01 90 FD | 	jmp	#LR__0397
0477c                 | LR__0364
0477c     44 2D B0 FD | 	call	#_expr
04780                 | ' 
04780                 | ' 
04780                 | ' expr()
04780                 | ' return 0
04780     FC 00 90 FD | 	jmp	#LR__0396
04784                 | LR__0365
04784     3C 2D B0 FD | 	call	#_expr
04788                 | ' 
04788                 | ' 
04788                 | ' expr()
04788                 | ' return 0
04788     F4 00 90 FD | 	jmp	#LR__0396
0478c                 | LR__0366
0478c     34 2D B0 FD | 	call	#_expr
04790                 | ' 
04790                 | ' 
04790                 | ' expr()
04790                 | ' return 0
04790     EC 00 90 FD | 	jmp	#LR__0396
04794                 | LR__0367
04794     2C 2D B0 FD | 	call	#_expr
04798                 | ' 
04798                 | ' 
04798                 | ' expr()
04798                 | ' return 0
04798     E4 00 90 FD | 	jmp	#LR__0396
0479c                 | LR__0368
0479c     8C 0F B0 FD | 	call	#_compile_int_fun_2p
047a0     DC 00 90 FD | 	jmp	#LR__0396
047a4                 | LR__0369
047a4     10 0A B0 FD | 	call	#_compile_converttoint
047a8                 | ' return err
047a8     D4 00 90 FD | 	jmp	#LR__0396
047ac                 | LR__0370
047ac     D4 16 B0 FD | 	call	#_compile_if
047b0     88 01 90 FD | 	jmp	#LR__0397
047b4                 | LR__0371
047b4     10 20 B0 FD | 	call	#_compile_for
047b8     80 01 90 FD | 	jmp	#LR__0397
047bc                 | LR__0372
047bc     F4 27 B0 FD | 	call	#_compile_next
047c0     78 01 90 FD | 	jmp	#LR__0397
047c4                 | LR__0373
047c4     FC 17 B0 FD | 	call	#_compile_else
047c8     70 01 90 FD | 	jmp	#LR__0397
047cc                 | LR__0374
047cc     D0 0A B0 FD | 	call	#_compile_fun_2p
047d0     FD 26 02 F6 | 	mov	local05, result1
047d4     A8 00 90 FD | 	jmp	#LR__0396
047d8                 | LR__0375
047d8     E8 2C B0 FD | 	call	#_expr
047dc                 | ' 
047dc                 | ' 
047dc                 | ' expr()
047dc                 | ' return 0
047dc     A0 00 90 FD | 	jmp	#LR__0396
047e0                 | LR__0376
047e0     E0 2C B0 FD | 	call	#_expr
047e4                 | ' 
047e4                 | ' 
047e4                 | ' expr()
047e4                 | ' return 0
047e4     98 00 90 FD | 	jmp	#LR__0396
047e8                 | LR__0377
047e8     D8 2C B0 FD | 	call	#_expr
047ec                 | ' 
047ec                 | ' 
047ec                 | ' expr()
047ec                 | ' return 0
047ec     90 00 90 FD | 	jmp	#LR__0396
047f0                 | LR__0378
047f0     D0 2C B0 FD | 	call	#_expr
047f4                 | ' 
047f4                 | ' 
047f4                 | ' expr()
047f4                 | ' return 0
047f4     88 00 90 FD | 	jmp	#LR__0396
047f8                 | LR__0379
047f8     C8 2C B0 FD | 	call	#_expr
047fc                 | ' 
047fc                 | ' 
047fc                 | ' expr()
047fc                 | ' return 0
047fc     80 00 90 FD | 	jmp	#LR__0396
04800                 | LR__0380
04800     C0 2C B0 FD | 	call	#_expr
04804                 | ' 
04804                 | ' 
04804                 | ' expr()
04804                 | ' return 0
04804     78 00 90 FD | 	jmp	#LR__0396
04808                 | LR__0381
04808     B8 2C B0 FD | 	call	#_expr
0480c                 | ' 
0480c                 | ' 
0480c                 | ' expr()
0480c                 | ' return 0
0480c     70 00 90 FD | 	jmp	#LR__0396
04810                 | LR__0382
04810     00 0B B0 FD | 	call	#_compile_fun_3p
04814     68 00 90 FD | 	jmp	#LR__0396
04818                 | LR__0383
04818     E8 0C B0 FD | 	call	#_compile_fun_5p
0481c     60 00 90 FD | 	jmp	#LR__0396
04820                 | LR__0384
04820     BC 0B B0 FD | 	call	#_compile_fun_4p
04824     58 00 90 FD | 	jmp	#LR__0396
04828                 | LR__0385
04828     74 0A B0 FD | 	call	#_compile_fun_2p
0482c     50 00 90 FD | 	jmp	#LR__0396
04830                 | LR__0386
04830     6C 0A B0 FD | 	call	#_compile_fun_2p
04834     48 00 90 FD | 	jmp	#LR__0396
04838                 | LR__0387
04838     64 0A B0 FD | 	call	#_compile_fun_2p
0483c     40 00 90 FD | 	jmp	#LR__0396
04840                 | LR__0388
04840     80 2C B0 FD | 	call	#_expr
04844                 | ' 
04844                 | ' 
04844                 | ' expr()
04844                 | ' return 0
04844     38 00 90 FD | 	jmp	#LR__0396
04848                 | LR__0389
04848     78 2C B0 FD | 	call	#_expr
0484c                 | ' 
0484c                 | ' 
0484c                 | ' expr()
0484c                 | ' return 0
0484c     30 00 90 FD | 	jmp	#LR__0396
04850                 | LR__0390
04850     70 2C B0 FD | 	call	#_expr
04854                 | ' 
04854                 | ' 
04854                 | ' expr()
04854                 | ' return 0
04854     28 00 90 FD | 	jmp	#LR__0396
04858                 | LR__0391
04858     84 0B B0 FD | 	call	#_compile_fun_4p
0485c     20 00 90 FD | 	jmp	#LR__0396
04860                 | LR__0392
04860     60 2C B0 FD | 	call	#_expr
04864                 | ' 
04864                 | ' 
04864                 | ' expr()
04864                 | ' return 0
04864     18 00 90 FD | 	jmp	#LR__0396
04868                 | LR__0393
04868     80 18 B0 FD | 	call	#_compile_dim
0486c     CC 00 90 FD | 	jmp	#LR__0397
04870                 | LR__0394
04870     20 01 B0 FD | 	call	#_compile_array_assign
04874     C4 00 90 FD | 	jmp	#LR__0397
04878                 | LR__0395
04878     80 08 B0 FD | 	call	#_compile_unknown
0487c     BC 00 90 FD | 	jmp	#LR__0397
04880                 | LR__0396
04880     14 23 02 F6 | 	mov	local03, local06
04884     16 1F 02 F6 | 	mov	local01, local08
04888     0F 2B 02 F6 | 	mov	local07, local01
0488c     10 2F 02 F6 | 	mov	local09, local02
04890     11 1F 02 F6 | 	mov	local01, local03
04894     41 00 00 FF 
04898     40 E4 05 F1 | 	add	objptr, ##33344
0489c     F2 2C 02 FB | 	rdlong	local08, objptr
048a0     16 29 02 F6 | 	mov	local06, local08
048a4     01 28 66 F0 | 	shl	local06, #1
048a8     16 29 02 F1 | 	add	local06, local08
048ac     02 28 66 F0 | 	shl	local06, #2
048b0     03 00 00 FF 
048b4     00 E4 85 F1 | 	sub	objptr, ##1536
048b8     F2 28 02 F1 | 	add	local06, objptr
048bc     14 2B 62 FC | 	wrlong	local07, local06
048c0     03 00 00 FF 
048c4     00 E4 05 F1 | 	add	objptr, ##1536
048c8     F2 2C 02 FB | 	rdlong	local08, objptr
048cc     16 2B 02 F6 | 	mov	local07, local08
048d0     01 2A 66 F0 | 	shl	local07, #1
048d4     16 2B 02 F1 | 	add	local07, local08
048d8     02 2A 66 F0 | 	shl	local07, #2
048dc     03 00 00 FF 
048e0     00 E4 85 F1 | 	sub	objptr, ##1536
048e4     F2 2A 02 F1 | 	add	local07, objptr
048e8     04 2A 06 F1 | 	add	local07, #4
048ec     15 2F 62 FC | 	wrlong	local09, local07
048f0     03 00 00 FF 
048f4     00 E4 05 F1 | 	add	objptr, ##1536
048f8     F2 2E 02 FB | 	rdlong	local09, objptr
048fc     17 2D 02 F6 | 	mov	local08, local09
04900     01 2C 66 F0 | 	shl	local08, #1
04904     17 2D 02 F1 | 	add	local08, local09
04908     02 2C 66 F0 | 	shl	local08, #2
0490c     03 00 00 FF 
04910     00 E4 85 F1 | 	sub	objptr, ##1536
04914     F2 2C 02 F1 | 	add	local08, objptr
04918     08 2C 06 F1 | 	add	local08, #8
0491c     16 1F 62 FC | 	wrlong	local01, local08
04920     03 00 00 FF 
04924     00 E4 05 F1 | 	add	objptr, ##1536
04928     F2 2A 02 FB | 	rdlong	local07, objptr
0492c     01 2A 06 F1 | 	add	local07, #1
04930     F2 2A 62 FC | 	wrlong	local07, objptr
04934     41 00 00 FF 
04938     40 E4 85 F1 | 	sub	objptr, ##33344
0493c                 | LR__0397
0493c                 | ' 
0493c                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
0493c                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
0493c     00 24 0E F2 | 	cmp	local04, #0 wz
04940     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
04944     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
04948     38 00 90 5D |  if_ne	jmp	#LR__0398
0494c     41 00 00 FF 
04950     40 E4 05 F1 | 	add	objptr, ##33344
04954     F2 2E 02 FB | 	rdlong	local09, objptr
04958     17 1F 02 F6 | 	mov	local01, local09
0495c     01 1E 66 F0 | 	shl	local01, #1
04960     17 1F 02 F1 | 	add	local01, local09
04964     02 1E 66 F0 | 	shl	local01, #2
04968     03 00 00 FF 
0496c     00 E4 85 F1 | 	sub	objptr, ##1536
04970     F2 1E 02 F1 | 	add	local01, objptr
04974     08 1E 06 F1 | 	add	local01, #8
04978     0F FD 6B FC | 	wrlong	#510, local01
0497c     3E 00 00 FF 
04980     40 E4 85 F1 | 	sub	objptr, ##31808
04984                 | LR__0398
04984                 | ' 
04984                 | ' 'print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
04984                 | ' return err
04984     13 FB 01 F6 | 	mov	result1, local05
04988     A7 F0 03 F6 | 	mov	ptra, fp
0498c     B2 00 A0 FD | 	call	#popregs_
04990                 | _compile_immediate_ret
04990     2D 00 64 FD | 	ret
04994                 | 
04994                 | ' 
04994                 | ' sub compile_array_assign
04994                 | _compile_array_assign
04994     0A 4A 05 F6 | 	mov	COUNT_, #10
04998     A8 00 A0 FD | 	call	#pushregs_
0499c     00 24 06 F6 | 	mov	local04, #0
049a0     2E 00 00 FF 
049a4     08 E4 05 F1 | 	add	objptr, ##23560
049a8     F2 26 02 FB | 	rdlong	local05, objptr
049ac     13 FB 01 F6 | 	mov	result1, local05
049b0     01 FA 85 F1 | 	sub	result1, #1
049b4     03 FA 65 F0 | 	shl	result1, #3
049b8     02 00 00 FF 
049bc     38 E4 85 F1 | 	sub	objptr, ##1080
049c0     F2 FA 01 F1 | 	add	result1, objptr
049c4     FD 28 02 FB | 	rdlong	local06, result1
049c8                 | ' numpar=0
049c8                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
049c8                 | ' ' todo here: recognize params and t1.result.twowords=numpar
049c8                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
049c8                 | ' if lparts(ct).token=token_lpar then
049c8     03 26 66 F0 | 	shl	local05, #3
049cc     F2 26 02 F1 | 	add	local05, objptr
049d0     04 26 06 F1 | 	add	local05, #4
049d4     13 27 02 FB | 	rdlong	local05, local05
049d8     15 26 0E F2 | 	cmp	local05, #21 wz
049dc     2B 00 00 FF 
049e0     D0 E5 85 F1 | 	sub	objptr, ##22480
049e4     D4 01 90 5D |  if_ne	jmp	#LR__0404
049e8     2E 00 00 FF 
049ec     08 E4 05 F1 | 	add	objptr, ##23560
049f0     F2 2A 02 FB | 	rdlong	local07, objptr
049f4     01 2A 06 F1 | 	add	local07, #1
049f8     F2 2A 62 FC | 	wrlong	local07, objptr
049fc     2E 00 00 FF 
04a00     08 E4 85 F1 | 	sub	objptr, ##23560
04a04                 | '   ct+=1 											' omit this lpar, this is for expr list
04a04                 | '   do
04a04                 | LR__0400
04a04     BC 2A B0 FD | 	call	#_expr
04a08     2E 00 00 FF 
04a0c     08 E4 05 F1 | 	add	objptr, ##23560
04a10     F2 26 02 FB | 	rdlong	local05, objptr
04a14     01 26 06 F1 | 	add	local05, #1
04a18     F2 26 62 FC | 	wrlong	local05, objptr
04a1c     01 24 06 F1 | 	add	local04, #1
04a20     01 26 86 F1 | 	sub	local05, #1
04a24     03 26 66 F0 | 	shl	local05, #3
04a28     02 00 00 FF 
04a2c     38 E4 85 F1 | 	sub	objptr, ##1080
04a30     F2 26 02 F1 | 	add	local05, objptr
04a34     04 26 06 F1 | 	add	local05, #4
04a38     13 2B 02 FB | 	rdlong	local07, local05
04a3c     14 2A 0E F2 | 	cmp	local07, #20 wz
04a40     2B 00 00 FF 
04a44     D0 E5 85 F1 | 	sub	objptr, ##22480
04a48     34 00 90 AD |  if_e	jmp	#LR__0401
04a4c     2E 00 00 FF 
04a50     08 E4 05 F1 | 	add	objptr, ##23560
04a54     F2 2A 02 FB | 	rdlong	local07, objptr
04a58     03 2A 66 F0 | 	shl	local07, #3
04a5c     02 00 00 FF 
04a60     38 E4 85 F1 | 	sub	objptr, ##1080
04a64     F2 2A 02 F1 | 	add	local07, objptr
04a68     04 2A 06 F1 | 	add	local07, #4
04a6c     15 2B 02 FB | 	rdlong	local07, local07
04a70     FE 2B 0E F2 | 	cmp	local07, #510 wz
04a74     2B 00 00 FF 
04a78     D0 E5 85 F1 | 	sub	objptr, ##22480
04a7c     84 FF 9F 5D |  if_ne	jmp	#LR__0400
04a80                 | LR__0401
04a80     2E 00 00 FF 
04a84     08 E4 05 F1 | 	add	objptr, ##23560
04a88     F2 2A 02 FB | 	rdlong	local07, objptr
04a8c     01 2A 06 F1 | 	add	local07, #1
04a90     F2 2A 62 FC | 	wrlong	local07, objptr
04a94     2E 00 00 FF 
04a98     08 E4 85 F1 | 	sub	objptr, ##23560
04a9c     24 2A B0 FD | 	call	#_expr
04aa0     01 2C 66 F6 | 	neg	local08, #1
04aa4     00 2E 06 F6 | 	mov	local09, #0
04aa8                 | ' '   print "in array_assign, rpar found, numpar=",numpar
04aa8                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
04aa8                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
04aa8                 | ' ct+=1 : expr()
04aa8                 | ' ' now find the vae
04aa8                 | ' 
04aa8                 | ' j=-1 : i=0 : do : 
04aa8                 | LR__0402
04aa8                 | '   if variables(i).name=varname$ then j=i: exit loop
04aa8     17 27 02 F6 | 	mov	local05, local09
04aac     04 26 66 F0 | 	shl	local05, #4
04ab0     0B 00 00 FF 
04ab4     CC E5 05 F1 | 	add	objptr, ##6092
04ab8     F2 26 02 F1 | 	add	local05, objptr
04abc     13 13 02 FB | 	rdlong	arg01, local05
04ac0     14 15 02 F6 | 	mov	arg02, local06
04ac4     0B 00 00 FF 
04ac8     CC E5 85 F1 | 	sub	objptr, ##6092
04acc     C8 0D B1 FD | 	call	#__system___string_cmp
04ad0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ad4     17 2D 02 A6 |  if_e	mov	local08, local09
04ad8     20 00 90 AD |  if_e	jmp	#LR__0403
04adc     01 2E 06 F1 | 	add	local09, #1
04ae0     2B 00 00 FF 
04ae4     CC E5 05 F1 | 	add	objptr, ##22476
04ae8     F2 2A 02 FB | 	rdlong	local07, objptr
04aec     2B 00 00 FF 
04af0     CC E5 85 F1 | 	sub	objptr, ##22476
04af4     15 2F 5A F2 | 	cmps	local09, local07 wcz
04af8     AC FF 9F ED |  if_be	jmp	#LR__0402
04afc                 | LR__0403
04afc     16 1F 02 F6 | 	mov	local01, local08
04b00     12 21 02 F6 | 	mov	local02, local04
04b04     17 22 06 F6 | 	mov	local03, #23
04b08     0F 2B 02 F6 | 	mov	local07, local01
04b0c     10 31 02 F6 | 	mov	local10, local02
04b10     11 2D 02 F6 | 	mov	local08, local03
04b14     41 00 00 FF 
04b18     40 E4 05 F1 | 	add	objptr, ##33344
04b1c     F2 1E 02 FB | 	rdlong	local01, objptr
04b20     0F 2F 02 F6 | 	mov	local09, local01
04b24     01 2E 66 F0 | 	shl	local09, #1
04b28     0F 2F 02 F1 | 	add	local09, local01
04b2c     02 2E 66 F0 | 	shl	local09, #2
04b30     03 00 00 FF 
04b34     00 E4 85 F1 | 	sub	objptr, ##1536
04b38     F2 2E 02 F1 | 	add	local09, objptr
04b3c     17 2B 62 FC | 	wrlong	local07, local09
04b40     03 00 00 FF 
04b44     00 E4 05 F1 | 	add	objptr, ##1536
04b48     F2 1E 02 FB | 	rdlong	local01, objptr
04b4c     0F 2F 02 F6 | 	mov	local09, local01
04b50     01 2E 66 F0 | 	shl	local09, #1
04b54     0F 2F 02 F1 | 	add	local09, local01
04b58     02 2E 66 F0 | 	shl	local09, #2
04b5c     03 00 00 FF 
04b60     00 E4 85 F1 | 	sub	objptr, ##1536
04b64     F2 2E 02 F1 | 	add	local09, objptr
04b68     04 2E 06 F1 | 	add	local09, #4
04b6c     17 31 62 FC | 	wrlong	local10, local09
04b70     03 00 00 FF 
04b74     00 E4 05 F1 | 	add	objptr, ##1536
04b78     F2 30 02 FB | 	rdlong	local10, objptr
04b7c     18 1F 02 F6 | 	mov	local01, local10
04b80     01 1E 66 F0 | 	shl	local01, #1
04b84     18 1F 02 F1 | 	add	local01, local10
04b88     02 1E 66 F0 | 	shl	local01, #2
04b8c     03 00 00 FF 
04b90     00 E4 85 F1 | 	sub	objptr, ##1536
04b94     F2 1E 02 F1 | 	add	local01, objptr
04b98     08 1E 06 F1 | 	add	local01, #8
04b9c     0F 2D 62 FC | 	wrlong	local08, local01
04ba0     03 00 00 FF 
04ba4     00 E4 05 F1 | 	add	objptr, ##1536
04ba8     F2 2A 02 FB | 	rdlong	local07, objptr
04bac     01 2A 06 F1 | 	add	local07, #1
04bb0     F2 2A 62 FC | 	wrlong	local07, objptr
04bb4     41 00 00 FF 
04bb8     40 E4 85 F1 | 	sub	objptr, ##33344
04bbc                 | LR__0404
04bbc     A7 F0 03 F6 | 	mov	ptra, fp
04bc0     B2 00 A0 FD | 	call	#popregs_
04bc4                 | _compile_array_assign_ret
04bc4     2D 00 64 FD | 	ret
04bc8                 | 
04bc8                 | ' 
04bc8                 | ' 
04bc8                 | ' sub compile_immediate_assign(linetype as ulong)
04bc8                 | _compile_immediate_assign
04bc8     09 4A 05 F6 | 	mov	COUNT_, #9
04bcc     A8 00 A0 FD | 	call	#pushregs_
04bd0     09 25 0A F6 | 	mov	local04, arg01 wz
04bd4     FF 22 06 F6 | 	mov	local03, #255
04bd8     01 26 66 F6 | 	neg	local05, #1
04bdc                 | ' 
04bdc                 | ' t1.result_type=result_error : t1.result.uresult=0
04bdc                 | ' i=-1: j=-1
04bdc                 | ' 
04bdc                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
04bdc     2C 00 90 5D |  if_ne	jmp	#LR__0410
04be0     2B 00 00 FF 
04be4     D0 E5 05 F1 | 	add	objptr, ##22480
04be8     F2 28 02 FB | 	rdlong	local06, objptr
04bec     02 00 00 FF 
04bf0     38 E4 05 F1 | 	add	objptr, ##1080
04bf4     F2 04 68 FC | 	wrlong	#2, objptr
04bf8     13 00 00 FF 
04bfc     38 E4 05 F1 | 	add	objptr, ##9784
04c00     F2 00 68 FC | 	wrlong	#0, objptr
04c04     41 00 00 FF 
04c08     40 E4 85 F1 | 	sub	objptr, ##33344
04c0c                 | LR__0410
04c0c                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
04c0c     02 24 0E F2 | 	cmp	local04, #2 wz
04c10     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
04c14     2B 00 00 AF 
04c18     D0 E5 05 A1 |  if_e	add	objptr, ##22480
04c1c     F2 28 02 AB |  if_e	rdlong	local06, objptr
04c20     02 00 00 AF 
04c24     38 E4 05 A1 |  if_e	add	objptr, ##1080
04c28     F2 04 68 AC |  if_e	wrlong	#2, objptr
04c2c     2E 00 00 AF 
04c30     08 E4 85 A1 |  if_e	sub	objptr, ##23560
04c34                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
04c34     04 24 0E F2 | 	cmp	local04, #4 wz
04c38     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
04c3c     2C 00 90 5D |  if_ne	jmp	#LR__0411
04c40     2B 00 00 FF 
04c44     D8 E5 05 F1 | 	add	objptr, ##22488
04c48     F2 28 02 FB | 	rdlong	local06, objptr
04c4c     02 00 00 FF 
04c50     30 E4 05 F1 | 	add	objptr, ##1072
04c54     F2 06 68 FC | 	wrlong	#3, objptr
04c58     13 00 00 FF 
04c5c     38 E4 05 F1 | 	add	objptr, ##9784
04c60     F2 04 68 FC | 	wrlong	#2, objptr
04c64     41 00 00 FF 
04c68     40 E4 85 F1 | 	sub	objptr, ##33344
04c6c                 | LR__0411
04c6c                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
04c6c     05 24 0E F2 | 	cmp	local04, #5 wz
04c70     3C 00 90 5D |  if_ne	jmp	#LR__0412
04c74     2E 00 00 FF 
04c78     08 E4 05 F1 | 	add	objptr, ##23560
04c7c     F2 FA 01 FB | 	rdlong	result1, objptr
04c80     FD 28 02 F6 | 	mov	local06, result1
04c84     03 28 66 F0 | 	shl	local06, #3
04c88     02 00 00 FF 
04c8c     38 E4 85 F1 | 	sub	objptr, ##1080
04c90     F2 28 02 F1 | 	add	local06, objptr
04c94     14 29 02 FB | 	rdlong	local06, local06
04c98     02 FA 05 F1 | 	add	result1, #2
04c9c     02 00 00 FF 
04ca0     38 E4 05 F1 | 	add	objptr, ##1080
04ca4     F2 FA 61 FC | 	wrlong	result1, objptr
04ca8     2E 00 00 FF 
04cac     08 E4 85 F1 | 	sub	objptr, ##23560
04cb0                 | LR__0412
04cb0     14 13 02 F6 | 	mov	arg01, local06
04cb4     01 14 06 F6 | 	mov	arg02, #1
04cb8     4C 2C B1 FD | 	call	#__system__Right_S
04cbc     04 28 B0 FD | 	call	#_expr
04cc0                 | '  
04cc0                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
04cc0                 | ' 
04cc0                 | ' suffix2$=right$(varname2$,1)
04cc0                 | ' expr()
04cc0                 | ' 
04cc0                 | ' 
04cc0                 | ' if varnum>0 then
04cc0     2B 00 00 FF 
04cc4     CC E5 05 F1 | 	add	objptr, ##22476
04cc8     F2 2A 02 FB | 	rdlong	local07, objptr
04ccc     2B 00 00 FF 
04cd0     CC E5 85 F1 | 	sub	objptr, ##22476
04cd4     01 2A 56 F2 | 	cmps	local07, #1 wc
04cd8     58 00 90 CD |  if_b	jmp	#LR__0415
04cdc                 | '   for i=0 to varnum-1
04cdc     00 2C 06 F6 | 	mov	local08, #0
04ce0     2B 00 00 FF 
04ce4     CC E5 05 F1 | 	add	objptr, ##22476
04ce8     F2 2E 02 FB | 	rdlong	local09, objptr
04cec     2B 00 00 FF 
04cf0     CC E5 85 F1 | 	sub	objptr, ##22476
04cf4                 | LR__0413
04cf4     17 2D 52 F2 | 	cmps	local08, local09 wc
04cf8     38 00 90 3D |  if_ae	jmp	#LR__0414
04cfc                 | '     if variables(i).name=varname2$ then j=i : exit
04cfc     16 2B 02 F6 | 	mov	local07, local08
04d00     04 2A 66 F0 | 	shl	local07, #4
04d04     0B 00 00 FF 
04d08     CC E5 05 F1 | 	add	objptr, ##6092
04d0c     F2 2A 02 F1 | 	add	local07, objptr
04d10     15 13 02 FB | 	rdlong	arg01, local07
04d14     14 15 02 F6 | 	mov	arg02, local06
04d18     0B 00 00 FF 
04d1c     CC E5 85 F1 | 	sub	objptr, ##6092
04d20     74 0B B1 FD | 	call	#__system___string_cmp
04d24     00 FA 0D F2 | 	cmp	result1, #0 wz
04d28     16 27 02 A6 |  if_e	mov	local05, local08
04d2c     01 2C 06 51 |  if_ne	add	local08, #1
04d30     C0 FF 9F 5D |  if_ne	jmp	#LR__0413
04d34                 | LR__0414
04d34                 | LR__0415
04d34                 | ' if  j=-1 andalso varnum<maxvars then   
04d34     FF FF 7F FF 
04d38     FF 27 0E F2 | 	cmp	local05, ##-1 wz
04d3c     60 00 90 5D |  if_ne	jmp	#LR__0416
04d40     2B 00 00 FF 
04d44     CC E5 05 F1 | 	add	objptr, ##22476
04d48     F2 2A 02 FB | 	rdlong	local07, objptr
04d4c     2B 00 00 FF 
04d50     CC E5 85 F1 | 	sub	objptr, ##22476
04d54     01 00 00 FF 
04d58     FF 2B 56 F2 | 	cmps	local07, ##1023 wc
04d5c     40 00 90 3D |  if_ae	jmp	#LR__0416
04d60     2B 00 00 FF 
04d64     CC E5 05 F1 | 	add	objptr, ##22476
04d68     F2 2E 02 FB | 	rdlong	local09, objptr
04d6c     04 2E 66 F0 | 	shl	local09, #4
04d70     20 00 00 FF 
04d74     00 E4 85 F1 | 	sub	objptr, ##16384
04d78     F2 2E 02 F1 | 	add	local09, objptr
04d7c     17 29 62 FC | 	wrlong	local06, local09
04d80     20 00 00 FF 
04d84     00 E4 05 F1 | 	add	objptr, ##16384
04d88     F2 2A 02 FB | 	rdlong	local07, objptr
04d8c     15 27 02 F6 | 	mov	local05, local07
04d90     01 2A 06 F1 | 	add	local07, #1
04d94     F2 2A 62 FC | 	wrlong	local07, objptr
04d98     2B 00 00 FF 
04d9c     CC E5 85 F1 | 	sub	objptr, ##22476
04da0                 | LR__0416
04da0     13 1F 02 F6 | 	mov	local01, local05
04da4     17 22 06 F6 | 	mov	local03, #23
04da8     0F 2B 02 F6 | 	mov	local07, local01
04dac     10 2F 02 F6 | 	mov	local09, local02
04db0     11 1F 02 F6 | 	mov	local01, local03
04db4     41 00 00 FF 
04db8     40 E4 05 F1 | 	add	objptr, ##33344
04dbc     F2 2C 02 FB | 	rdlong	local08, objptr
04dc0     16 29 02 F6 | 	mov	local06, local08
04dc4     01 28 66 F0 | 	shl	local06, #1
04dc8     16 29 02 F1 | 	add	local06, local08
04dcc     02 28 66 F0 | 	shl	local06, #2
04dd0     03 00 00 FF 
04dd4     00 E4 85 F1 | 	sub	objptr, ##1536
04dd8     F2 28 02 F1 | 	add	local06, objptr
04ddc     14 2B 62 FC | 	wrlong	local07, local06
04de0     03 00 00 FF 
04de4     00 E4 05 F1 | 	add	objptr, ##1536
04de8     F2 2C 02 FB | 	rdlong	local08, objptr
04dec     16 2B 02 F6 | 	mov	local07, local08
04df0     01 2A 66 F0 | 	shl	local07, #1
04df4     16 2B 02 F1 | 	add	local07, local08
04df8     02 2A 66 F0 | 	shl	local07, #2
04dfc     03 00 00 FF 
04e00     00 E4 85 F1 | 	sub	objptr, ##1536
04e04     F2 2A 02 F1 | 	add	local07, objptr
04e08     04 2A 06 F1 | 	add	local07, #4
04e0c     15 2F 62 FC | 	wrlong	local09, local07
04e10     03 00 00 FF 
04e14     00 E4 05 F1 | 	add	objptr, ##1536
04e18     F2 2E 02 FB | 	rdlong	local09, objptr
04e1c     17 2D 02 F6 | 	mov	local08, local09
04e20     01 2C 66 F0 | 	shl	local08, #1
04e24     17 2D 02 F1 | 	add	local08, local09
04e28     02 2C 66 F0 | 	shl	local08, #2
04e2c     03 00 00 FF 
04e30     00 E4 85 F1 | 	sub	objptr, ##1536
04e34     F2 2C 02 F1 | 	add	local08, objptr
04e38     08 2C 06 F1 | 	add	local08, #8
04e3c     16 1F 62 FC | 	wrlong	local01, local08
04e40     03 00 00 FF 
04e44     00 E4 05 F1 | 	add	objptr, ##1536
04e48     F2 2A 02 FB | 	rdlong	local07, objptr
04e4c     01 2A 06 F1 | 	add	local07, #1
04e50     F2 2A 62 FC | 	wrlong	local07, objptr
04e54     41 00 00 FF 
04e58     40 E4 85 F1 | 	sub	objptr, ##33344
04e5c                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
04e5c                 | ' 
04e5c                 | ' 
04e5c                 | ' 
04e5c                 | ' 
04e5c                 | ' 
04e5c                 | ' 
04e5c                 | ' compiledline(lineptr)=t1:  lineptr+=1 
04e5c                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
04e5c     00 24 0E F2 | 	cmp	local04, #0 wz
04e60     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
04e64     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
04e68     38 00 90 5D |  if_ne	jmp	#LR__0417
04e6c     41 00 00 FF 
04e70     40 E4 05 F1 | 	add	objptr, ##33344
04e74     F2 1E 02 FB | 	rdlong	local01, objptr
04e78     0F 2F 02 F6 | 	mov	local09, local01
04e7c     01 2E 66 F0 | 	shl	local09, #1
04e80     0F 2F 02 F1 | 	add	local09, local01
04e84     02 2E 66 F0 | 	shl	local09, #2
04e88     03 00 00 FF 
04e8c     00 E4 85 F1 | 	sub	objptr, ##1536
04e90     F2 2E 02 F1 | 	add	local09, objptr
04e94     08 2E 06 F1 | 	add	local09, #8
04e98     17 FD 6B FC | 	wrlong	#510, local09
04e9c     3E 00 00 FF 
04ea0     40 E4 85 F1 | 	sub	objptr, ##31808
04ea4                 | LR__0417
04ea4     A7 F0 03 F6 | 	mov	ptra, fp
04ea8     B2 00 A0 FD | 	call	#popregs_
04eac                 | _compile_immediate_assign_ret
04eac     2D 00 64 FD | 	ret
04eb0                 | 
04eb0                 | ' 
04eb0                 | ' ' ------------------ compile the line that is calling a command 
04eb0                 | ' 
04eb0                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
04eb0                 | _compile
04eb0     04 4A 05 F6 | 	mov	COUNT_, #4
04eb4     A8 00 A0 FD | 	call	#pushregs_
04eb8     09 1F 0A F6 | 	mov	local01, arg01 wz
04ebc     0A 21 02 F6 | 	mov	local02, arg02
04ec0     0B 23 02 F6 | 	mov	local03, arg03
04ec4                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
04ec4                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
04ec4                 | '  
04ec4                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
04ec4                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
04ec4     0C 00 90 5D |  if_ne	jmp	#LR__0420
04ec8     00 12 06 F6 | 	mov	arg01, #0
04ecc     BC F5 BF FD | 	call	#_compile_immediate
04ed0     A0 00 90 FD | 	jmp	#LR__0427
04ed4                 | LR__0420
04ed4     3E 00 00 FF 
04ed8     40 E4 05 F1 | 	add	objptr, ##31808
04edc     F2 1E 62 FC | 	wrlong	local01, objptr
04ee0     04 E4 05 F1 | 	add	objptr, #4
04ee4     F2 20 62 FC | 	wrlong	local02, objptr
04ee8     3E 00 00 FF 
04eec     44 E4 85 F1 | 	sub	objptr, ##31812
04ef0     11 13 02 F6 | 	mov	arg01, local03
04ef4     01 12 06 F1 | 	add	arg01, #1
04ef8     90 F5 BF FD | 	call	#_compile_immediate
04efc     FD 24 0A F6 | 	mov	local04, result1 wz
04f00                 | ' 
04f00                 | ' ucompiledline(0)=alinemajor
04f00                 | ' ucompiledline(1)=alineminor
04f00                 | ' 
04f00                 | ' 
04f00                 | ' ' cont: 0: this is the first part of the line that will continue
04f00                 | ' ' 1 - this is the continuation of the line
04f00                 | ' ' 2 - this is the last continued line
04f00                 | ' ' 3 - this is the ome and only part
04f00                 | ' 
04f00                 | ' 
04f00                 | ' err=compile_immediate(cont+1) 
04f00                 | ' if err=0 then
04f00     6C 00 90 5D |  if_ne	jmp	#LR__0426
04f04                 | '   if cont=3 orelse cont=2 then 
04f04     03 22 0E F2 | 	cmp	local03, #3 wz
04f08     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
04f0c     60 00 90 5D |  if_ne	jmp	#LR__0425
04f10                 | '     if alinemajor >lastline then 
04f10     41 00 00 FF 
04f14     4C E4 05 F1 | 	add	objptr, ##33356
04f18     F2 16 02 FB | 	rdlong	arg03, objptr
04f1c     41 00 00 FF 
04f20     4C E4 85 F1 | 	sub	objptr, ##33356
04f24     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
04f28     0C 00 90 ED |  if_be	jmp	#LR__0421
04f2c     0F 13 02 F6 | 	mov	arg01, local01
04f30     78 F4 BF FD | 	call	#_add_line_at_end
04f34     38 00 90 FD | 	jmp	#LR__0424
04f38                 | LR__0421
04f38     0F 13 02 F6 | 	mov	arg01, local01
04f3c     F8 EC BF FD | 	call	#_deleteline
04f40                 | '       deleteline(alinemajor)  
04f40                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor) ' yes I know that's not optimal    
04f40     41 00 00 FF 
04f44     4C E4 05 F1 | 	add	objptr, ##33356
04f48     F2 16 02 FB | 	rdlong	arg03, objptr
04f4c     41 00 00 FF 
04f50     4C E4 85 F1 | 	sub	objptr, ##33356
04f54     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
04f58     0C 00 90 ED |  if_be	jmp	#LR__0422
04f5c     0F 13 02 F6 | 	mov	arg01, local01
04f60     48 F4 BF FD | 	call	#_add_line_at_end
04f64     08 00 90 FD | 	jmp	#LR__0423
04f68                 | LR__0422
04f68     0F 13 02 F6 | 	mov	arg01, local01
04f6c     F4 F1 BF FD | 	call	#_insertline
04f70                 | LR__0423
04f70                 | LR__0424
04f70                 | LR__0425
04f70                 | LR__0426
04f70                 | ' return err
04f70     12 FB 01 F6 | 	mov	result1, local04
04f74                 | LR__0427
04f74     A7 F0 03 F6 | 	mov	ptra, fp
04f78     B2 00 A0 FD | 	call	#popregs_
04f7c                 | _compile_ret
04f7c     2D 00 64 FD | 	ret
04f80                 | 
04f80                 | ' 
04f80                 | ' ' ------------------ compile the line that is assigning to a variable
04f80                 | ' 
04f80                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
04f80                 | _compile_assign
04f80     03 4A 05 F6 | 	mov	COUNT_, #3
04f84     A8 00 A0 FD | 	call	#pushregs_
04f88     09 1F 0A F6 | 	mov	local01, arg01 wz
04f8c     0A 21 02 F6 | 	mov	local02, arg02
04f90     0B 23 02 F6 | 	mov	local03, arg03
04f94                 | ' 
04f94                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
04f94                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
04f94     0C 00 90 5D |  if_ne	jmp	#LR__0430
04f98     00 12 06 F6 | 	mov	arg01, #0
04f9c     28 FC BF FD | 	call	#_compile_immediate_assign
04fa0     94 00 90 FD | 	jmp	#LR__0436
04fa4                 | LR__0430
04fa4     3E 00 00 FF 
04fa8     40 E4 05 F1 | 	add	objptr, ##31808
04fac     F2 1E 62 FC | 	wrlong	local01, objptr
04fb0     04 E4 05 F1 | 	add	objptr, #4
04fb4     F2 20 62 FC | 	wrlong	local02, objptr
04fb8     3E 00 00 FF 
04fbc     44 E4 85 F1 | 	sub	objptr, ##31812
04fc0     11 13 02 F6 | 	mov	arg01, local03
04fc4     01 12 06 F1 | 	add	arg01, #1
04fc8     FC FB BF FD | 	call	#_compile_immediate_assign
04fcc                 | ' 
04fcc                 | ' ucompiledline(0)=alinemajor
04fcc                 | ' ucompiledline(1)=alineminor
04fcc                 | ' 
04fcc                 | ' compile_immediate_assign(cont+1) 
04fcc                 | ' 
04fcc                 | ' if cont=3 orelse cont=2 then 
04fcc     03 22 0E F2 | 	cmp	local03, #3 wz
04fd0     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
04fd4     60 00 90 5D |  if_ne	jmp	#LR__0435
04fd8                 | '   if alinemajor >lastline then 
04fd8     41 00 00 FF 
04fdc     4C E4 05 F1 | 	add	objptr, ##33356
04fe0     F2 16 02 FB | 	rdlong	arg03, objptr
04fe4     41 00 00 FF 
04fe8     4C E4 85 F1 | 	sub	objptr, ##33356
04fec     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
04ff0     0C 00 90 ED |  if_be	jmp	#LR__0431
04ff4     0F 13 02 F6 | 	mov	arg01, local01
04ff8     B0 F3 BF FD | 	call	#_add_line_at_end
04ffc     38 00 90 FD | 	jmp	#LR__0434
05000                 | LR__0431
05000     0F 13 02 F6 | 	mov	arg01, local01
05004     30 EC BF FD | 	call	#_deleteline
05008                 | '     deleteline(alinemajor)  
05008                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
05008     41 00 00 FF 
0500c     4C E4 05 F1 | 	add	objptr, ##33356
05010     F2 16 02 FB | 	rdlong	arg03, objptr
05014     41 00 00 FF 
05018     4C E4 85 F1 | 	sub	objptr, ##33356
0501c     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
05020     0C 00 90 ED |  if_be	jmp	#LR__0432
05024     0F 13 02 F6 | 	mov	arg01, local01
05028     80 F3 BF FD | 	call	#_add_line_at_end
0502c     08 00 90 FD | 	jmp	#LR__0433
05030                 | LR__0432
05030     0F 13 02 F6 | 	mov	arg01, local01
05034     2C F1 BF FD | 	call	#_insertline
05038                 | LR__0433
05038                 | LR__0434
05038                 | LR__0435
05038                 | LR__0436
05038     A7 F0 03 F6 | 	mov	ptra, fp
0503c     B2 00 A0 FD | 	call	#popregs_
05040                 | _compile_assign_ret
05040     2D 00 64 FD | 	ret
05044                 | 
05044                 | ' 
05044                 | ' sub compile_error(errno)
05044                 | _compile_error
05044     FF 04 06 F6 | 	mov	_var03, #255
05048     01 07 02 F6 | 	mov	_var04, _var02
0504c     02 09 02 F6 | 	mov	_var05, _var03
05050     41 00 00 FF 
05054     40 E4 05 F1 | 	add	objptr, ##33344
05058     F2 0A 02 FB | 	rdlong	_var06, objptr
0505c     05 0D 02 F6 | 	mov	_var07, _var06
05060     01 0C 66 F0 | 	shl	_var07, #1
05064     05 0D 02 F1 | 	add	_var07, _var06
05068     02 0C 66 F0 | 	shl	_var07, #2
0506c     03 00 00 FF 
05070     00 E4 85 F1 | 	sub	objptr, ##1536
05074     F2 0C 02 F1 | 	add	_var07, objptr
05078     06 13 62 FC | 	wrlong	arg01, _var07
0507c     03 00 00 FF 
05080     00 E4 05 F1 | 	add	objptr, ##1536
05084     F2 0C 02 FB | 	rdlong	_var07, objptr
05088     06 0B 02 F6 | 	mov	_var06, _var07
0508c     01 0A 66 F0 | 	shl	_var06, #1
05090     06 0B 02 F1 | 	add	_var06, _var07
05094     02 0A 66 F0 | 	shl	_var06, #2
05098     03 00 00 FF 
0509c     00 E4 85 F1 | 	sub	objptr, ##1536
050a0     F2 0A 02 F1 | 	add	_var06, objptr
050a4     04 0A 06 F1 | 	add	_var06, #4
050a8     05 07 62 FC | 	wrlong	_var04, _var06
050ac     03 00 00 FF 
050b0     00 E4 05 F1 | 	add	objptr, ##1536
050b4     F2 0C 02 FB | 	rdlong	_var07, objptr
050b8     06 0B 02 F6 | 	mov	_var06, _var07
050bc     01 0A 66 F0 | 	shl	_var06, #1
050c0     06 0B 02 F1 | 	add	_var06, _var07
050c4     02 0A 66 F0 | 	shl	_var06, #2
050c8     03 00 00 FF 
050cc     00 E4 85 F1 | 	sub	objptr, ##1536
050d0     F2 0A 02 F1 | 	add	_var06, objptr
050d4     08 0A 06 F1 | 	add	_var06, #8
050d8     05 09 62 FC | 	wrlong	_var05, _var06
050dc     03 00 00 FF 
050e0     00 E4 05 F1 | 	add	objptr, ##1536
050e4     F2 12 02 FB | 	rdlong	arg01, objptr
050e8     01 12 06 F1 | 	add	arg01, #1
050ec     F2 12 62 FC | 	wrlong	arg01, objptr
050f0     41 00 00 FF 
050f4     40 E4 85 F1 | 	sub	objptr, ##33344
050f8                 | _compile_error_ret
050f8     2D 00 64 FD | 	ret
050fc                 | 
050fc                 | ' 
050fc                 | ' 
050fc                 | ' sub compile_unknown() 
050fc                 | _compile_unknown
050fc     FF 04 06 F6 | 	mov	_var03, #255
05100     17 00 06 F6 | 	mov	_var01, #23
05104     01 07 02 F6 | 	mov	_var04, _var02
05108     02 01 02 F6 | 	mov	_var01, _var03
0510c     41 00 00 FF 
05110     40 E4 05 F1 | 	add	objptr, ##33344
05114     F2 08 02 FB | 	rdlong	_var05, objptr
05118     04 0B 02 F6 | 	mov	_var06, _var05
0511c     01 0A 66 F0 | 	shl	_var06, #1
05120     04 0B 02 F1 | 	add	_var06, _var05
05124     02 0A 66 F0 | 	shl	_var06, #2
05128     03 00 00 FF 
0512c     00 E4 85 F1 | 	sub	objptr, ##1536
05130     F2 0A 02 F1 | 	add	_var06, objptr
05134     05 2F 68 FC | 	wrlong	#23, _var06
05138     03 00 00 FF 
0513c     00 E4 05 F1 | 	add	objptr, ##1536
05140     F2 0A 02 FB | 	rdlong	_var06, objptr
05144     05 09 02 F6 | 	mov	_var05, _var06
05148     01 08 66 F0 | 	shl	_var05, #1
0514c     05 09 02 F1 | 	add	_var05, _var06
05150     02 08 66 F0 | 	shl	_var05, #2
05154     03 00 00 FF 
05158     00 E4 85 F1 | 	sub	objptr, ##1536
0515c     F2 08 02 F1 | 	add	_var05, objptr
05160     04 08 06 F1 | 	add	_var05, #4
05164     04 07 62 FC | 	wrlong	_var04, _var05
05168     03 00 00 FF 
0516c     00 E4 05 F1 | 	add	objptr, ##1536
05170     F2 0A 02 FB | 	rdlong	_var06, objptr
05174     05 09 02 F6 | 	mov	_var05, _var06
05178     01 08 66 F0 | 	shl	_var05, #1
0517c     05 09 02 F1 | 	add	_var05, _var06
05180     02 08 66 F0 | 	shl	_var05, #2
05184     03 00 00 FF 
05188     00 E4 85 F1 | 	sub	objptr, ##1536
0518c     F2 08 02 F1 | 	add	_var05, objptr
05190     08 08 06 F1 | 	add	_var05, #8
05194     04 01 62 FC | 	wrlong	_var01, _var05
05198     03 00 00 FF 
0519c     00 E4 05 F1 | 	add	objptr, ##1536
051a0     F2 0A 02 FB | 	rdlong	_var06, objptr
051a4     01 0A 06 F1 | 	add	_var06, #1
051a8     F2 0A 62 FC | 	wrlong	_var06, objptr
051ac     41 00 00 FF 
051b0     40 E4 85 F1 | 	sub	objptr, ##33344
051b4                 | _compile_unknown_ret
051b4     2D 00 64 FD | 	ret
051b8                 | 
051b8                 | ' 
051b8                 | ' function compile_converttoint() as integer
051b8                 | _compile_converttoint
051b8     06 4A 05 F6 | 	mov	COUNT_, #6
051bc     A8 00 A0 FD | 	call	#pushregs_
051c0     00 1E 06 F6 | 	mov	local01, #0
051c4     FC 22 B0 FD | 	call	#_expr
051c8     FD 24 0A F6 | 	mov	local04, result1 wz
051cc                 | ' err=0
051cc                 | ' t1.result.uresult=0
051cc                 | ' err=expr()
051cc                 | ' if err=0 then
051cc     C0 00 90 5D |  if_ne	jmp	#LR__0440
051d0     16 22 06 F6 | 	mov	local03, #22
051d4     0F 27 02 F6 | 	mov	local05, local01
051d8     10 29 02 F6 | 	mov	local06, local02
051dc     11 25 02 F6 | 	mov	local04, local03
051e0     41 00 00 FF 
051e4     40 E4 05 F1 | 	add	objptr, ##33344
051e8     F2 1E 02 FB | 	rdlong	local01, objptr
051ec     0F FB 01 F6 | 	mov	result1, local01
051f0     01 FA 65 F0 | 	shl	result1, #1
051f4     0F FB 01 F1 | 	add	result1, local01
051f8     02 FA 65 F0 | 	shl	result1, #2
051fc     03 00 00 FF 
05200     00 E4 85 F1 | 	sub	objptr, ##1536
05204     F2 FA 01 F1 | 	add	result1, objptr
05208     FD 26 62 FC | 	wrlong	local05, result1
0520c     03 00 00 FF 
05210     00 E4 05 F1 | 	add	objptr, ##1536
05214     F2 26 02 FB | 	rdlong	local05, objptr
05218     13 1F 02 F6 | 	mov	local01, local05
0521c     01 1E 66 F0 | 	shl	local01, #1
05220     13 1F 02 F1 | 	add	local01, local05
05224     02 1E 66 F0 | 	shl	local01, #2
05228     03 00 00 FF 
0522c     00 E4 85 F1 | 	sub	objptr, ##1536
05230     F2 1E 02 F1 | 	add	local01, objptr
05234     04 1E 06 F1 | 	add	local01, #4
05238     0F 29 62 FC | 	wrlong	local06, local01
0523c     03 00 00 FF 
05240     00 E4 05 F1 | 	add	objptr, ##1536
05244     F2 28 02 FB | 	rdlong	local06, objptr
05248     14 27 02 F6 | 	mov	local05, local06
0524c     01 26 66 F0 | 	shl	local05, #1
05250     14 27 02 F1 | 	add	local05, local06
05254     02 26 66 F0 | 	shl	local05, #2
05258     03 00 00 FF 
0525c     00 E4 85 F1 | 	sub	objptr, ##1536
05260     F2 26 02 F1 | 	add	local05, objptr
05264     08 26 06 F1 | 	add	local05, #8
05268     13 25 62 FC | 	wrlong	local04, local05
0526c     03 00 00 FF 
05270     00 E4 05 F1 | 	add	objptr, ##1536
05274     F2 26 02 FB | 	rdlong	local05, objptr
05278     01 26 06 F1 | 	add	local05, #1
0527c     F2 26 62 FC | 	wrlong	local05, objptr
05280     41 00 00 FF 
05284     40 E4 85 F1 | 	sub	objptr, ##33344
05288                 | '   t1.result_type=fun_converttoint
05288                 | '   compiledline(lineptr)=t1: lineptr+=1 
05288                 | '   return 0
05288     00 FA 05 F6 | 	mov	result1, #0
0528c     04 00 90 FD | 	jmp	#LR__0441
05290                 | LR__0440
05290                 | '   return err
05290     12 FB 01 F6 | 	mov	result1, local04
05294                 | LR__0441
05294     A7 F0 03 F6 | 	mov	ptra, fp
05298     B2 00 A0 FD | 	call	#popregs_
0529c                 | _compile_converttoint_ret
0529c     2D 00 64 FD | 	ret
052a0                 | 
052a0                 | ' 
052a0                 | ' 
052a0                 | ' function compile_fun_2p() as ulong
052a0                 | _compile_fun_2p
052a0     01 4A 05 F6 | 	mov	COUNT_, #1
052a4     A8 00 A0 FD | 	call	#pushregs_
052a8     18 22 B0 FD | 	call	#_expr
052ac                 | ' 
052ac                 | ' expr()
052ac                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
052ac     2E 00 00 FF 
052b0     08 E4 05 F1 | 	add	objptr, ##23560
052b4     F2 1E 02 FB | 	rdlong	local01, objptr
052b8     03 1E 66 F0 | 	shl	local01, #3
052bc     02 00 00 FF 
052c0     38 E4 85 F1 | 	sub	objptr, ##1080
052c4     F2 1E 02 F1 | 	add	local01, objptr
052c8     04 1E 06 F1 | 	add	local01, #4
052cc     0F 1F 02 FB | 	rdlong	local01, local01
052d0     11 1E 0E F2 | 	cmp	local01, #17 wz
052d4     2B 00 00 FF 
052d8     D0 E5 85 F1 | 	sub	objptr, ##22480
052dc     15 FA 05 56 |  if_ne	mov	result1, #21
052e0     24 00 90 5D |  if_ne	jmp	#LR__0450
052e4     2E 00 00 FF 
052e8     08 E4 05 F1 | 	add	objptr, ##23560
052ec     F2 1E 02 FB | 	rdlong	local01, objptr
052f0     01 1E 06 F1 | 	add	local01, #1
052f4     F2 1E 62 FC | 	wrlong	local01, objptr
052f8     2E 00 00 FF 
052fc     08 E4 85 F1 | 	sub	objptr, ##23560
05300     C0 21 B0 FD | 	call	#_expr
05304     00 FA 05 F6 | 	mov	result1, #0
05308                 | LR__0450
05308     A7 F0 03 F6 | 	mov	ptra, fp
0530c     B2 00 A0 FD | 	call	#popregs_
05310                 | _compile_fun_2p_ret
05310     2D 00 64 FD | 	ret
05314                 | 
05314                 | ' 
05314                 | ' function compile_fun_3p() as ulong
05314                 | _compile_fun_3p
05314     01 4A 05 F6 | 	mov	COUNT_, #1
05318     A8 00 A0 FD | 	call	#pushregs_
0531c     A4 21 B0 FD | 	call	#_expr
05320                 | ' 
05320                 | ' expr()
05320                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05320     2E 00 00 FF 
05324     08 E4 05 F1 | 	add	objptr, ##23560
05328     F2 1E 02 FB | 	rdlong	local01, objptr
0532c     03 1E 66 F0 | 	shl	local01, #3
05330     02 00 00 FF 
05334     38 E4 85 F1 | 	sub	objptr, ##1080
05338     F2 1E 02 F1 | 	add	local01, objptr
0533c     04 1E 06 F1 | 	add	local01, #4
05340     0F 1F 02 FB | 	rdlong	local01, local01
05344     11 1E 0E F2 | 	cmp	local01, #17 wz
05348     2B 00 00 FF 
0534c     D0 E5 85 F1 | 	sub	objptr, ##22480
05350     15 FA 05 56 |  if_ne	mov	result1, #21
05354     7C 00 90 5D |  if_ne	jmp	#LR__0460
05358     2E 00 00 FF 
0535c     08 E4 05 F1 | 	add	objptr, ##23560
05360     F2 1E 02 FB | 	rdlong	local01, objptr
05364     01 1E 06 F1 | 	add	local01, #1
05368     F2 1E 62 FC | 	wrlong	local01, objptr
0536c     2E 00 00 FF 
05370     08 E4 85 F1 | 	sub	objptr, ##23560
05374     4C 21 B0 FD | 	call	#_expr
05378                 | ' expr()
05378                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05378     2E 00 00 FF 
0537c     08 E4 05 F1 | 	add	objptr, ##23560
05380     F2 1E 02 FB | 	rdlong	local01, objptr
05384     03 1E 66 F0 | 	shl	local01, #3
05388     02 00 00 FF 
0538c     38 E4 85 F1 | 	sub	objptr, ##1080
05390     F2 1E 02 F1 | 	add	local01, objptr
05394     04 1E 06 F1 | 	add	local01, #4
05398     0F 1F 02 FB | 	rdlong	local01, local01
0539c     11 1E 0E F2 | 	cmp	local01, #17 wz
053a0     2B 00 00 FF 
053a4     D0 E5 85 F1 | 	sub	objptr, ##22480
053a8     15 FA 05 56 |  if_ne	mov	result1, #21
053ac     24 00 90 5D |  if_ne	jmp	#LR__0460
053b0     2E 00 00 FF 
053b4     08 E4 05 F1 | 	add	objptr, ##23560
053b8     F2 1E 02 FB | 	rdlong	local01, objptr
053bc     01 1E 06 F1 | 	add	local01, #1
053c0     F2 1E 62 FC | 	wrlong	local01, objptr
053c4     2E 00 00 FF 
053c8     08 E4 85 F1 | 	sub	objptr, ##23560
053cc     F4 20 B0 FD | 	call	#_expr
053d0     00 FA 05 F6 | 	mov	result1, #0
053d4                 | LR__0460
053d4     A7 F0 03 F6 | 	mov	ptra, fp
053d8     B2 00 A0 FD | 	call	#popregs_
053dc                 | _compile_fun_3p_ret
053dc     2D 00 64 FD | 	ret
053e0                 | 
053e0                 | ' 
053e0                 | ' function compile_fun_4p() as ulong
053e0                 | _compile_fun_4p
053e0     01 4A 05 F6 | 	mov	COUNT_, #1
053e4     A8 00 A0 FD | 	call	#pushregs_
053e8     D8 20 B0 FD | 	call	#_expr
053ec                 | ' 
053ec                 | ' expr()
053ec                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
053ec     2E 00 00 FF 
053f0     08 E4 05 F1 | 	add	objptr, ##23560
053f4     F2 1E 02 FB | 	rdlong	local01, objptr
053f8     03 1E 66 F0 | 	shl	local01, #3
053fc     02 00 00 FF 
05400     38 E4 85 F1 | 	sub	objptr, ##1080
05404     F2 1E 02 F1 | 	add	local01, objptr
05408     04 1E 06 F1 | 	add	local01, #4
0540c     0F 1F 02 FB | 	rdlong	local01, local01
05410     11 1E 0E F2 | 	cmp	local01, #17 wz
05414     2B 00 00 FF 
05418     D0 E5 85 F1 | 	sub	objptr, ##22480
0541c     15 FA 05 56 |  if_ne	mov	result1, #21
05420     D4 00 90 5D |  if_ne	jmp	#LR__0470
05424     2E 00 00 FF 
05428     08 E4 05 F1 | 	add	objptr, ##23560
0542c     F2 1E 02 FB | 	rdlong	local01, objptr
05430     01 1E 06 F1 | 	add	local01, #1
05434     F2 1E 62 FC | 	wrlong	local01, objptr
05438     2E 00 00 FF 
0543c     08 E4 85 F1 | 	sub	objptr, ##23560
05440     80 20 B0 FD | 	call	#_expr
05444                 | ' expr()
05444                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05444     2E 00 00 FF 
05448     08 E4 05 F1 | 	add	objptr, ##23560
0544c     F2 1E 02 FB | 	rdlong	local01, objptr
05450     03 1E 66 F0 | 	shl	local01, #3
05454     02 00 00 FF 
05458     38 E4 85 F1 | 	sub	objptr, ##1080
0545c     F2 1E 02 F1 | 	add	local01, objptr
05460     04 1E 06 F1 | 	add	local01, #4
05464     0F 1F 02 FB | 	rdlong	local01, local01
05468     11 1E 0E F2 | 	cmp	local01, #17 wz
0546c     2B 00 00 FF 
05470     D0 E5 85 F1 | 	sub	objptr, ##22480
05474     15 FA 05 56 |  if_ne	mov	result1, #21
05478     7C 00 90 5D |  if_ne	jmp	#LR__0470
0547c     2E 00 00 FF 
05480     08 E4 05 F1 | 	add	objptr, ##23560
05484     F2 1E 02 FB | 	rdlong	local01, objptr
05488     01 1E 06 F1 | 	add	local01, #1
0548c     F2 1E 62 FC | 	wrlong	local01, objptr
05490     2E 00 00 FF 
05494     08 E4 85 F1 | 	sub	objptr, ##23560
05498     28 20 B0 FD | 	call	#_expr
0549c                 | ' expr()
0549c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0549c     2E 00 00 FF 
054a0     08 E4 05 F1 | 	add	objptr, ##23560
054a4     F2 1E 02 FB | 	rdlong	local01, objptr
054a8     03 1E 66 F0 | 	shl	local01, #3
054ac     02 00 00 FF 
054b0     38 E4 85 F1 | 	sub	objptr, ##1080
054b4     F2 1E 02 F1 | 	add	local01, objptr
054b8     04 1E 06 F1 | 	add	local01, #4
054bc     0F 1F 02 FB | 	rdlong	local01, local01
054c0     11 1E 0E F2 | 	cmp	local01, #17 wz
054c4     2B 00 00 FF 
054c8     D0 E5 85 F1 | 	sub	objptr, ##22480
054cc     15 FA 05 56 |  if_ne	mov	result1, #21
054d0     24 00 90 5D |  if_ne	jmp	#LR__0470
054d4     2E 00 00 FF 
054d8     08 E4 05 F1 | 	add	objptr, ##23560
054dc     F2 1E 02 FB | 	rdlong	local01, objptr
054e0     01 1E 06 F1 | 	add	local01, #1
054e4     F2 1E 62 FC | 	wrlong	local01, objptr
054e8     2E 00 00 FF 
054ec     08 E4 85 F1 | 	sub	objptr, ##23560
054f0     D0 1F B0 FD | 	call	#_expr
054f4     00 FA 05 F6 | 	mov	result1, #0
054f8                 | LR__0470
054f8     A7 F0 03 F6 | 	mov	ptra, fp
054fc     B2 00 A0 FD | 	call	#popregs_
05500                 | _compile_fun_4p_ret
05500     2D 00 64 FD | 	ret
05504                 | 
05504                 | ' 
05504                 | ' 
05504                 | ' function compile_fun_5p() as ulong
05504                 | _compile_fun_5p
05504     01 4A 05 F6 | 	mov	COUNT_, #1
05508     A8 00 A0 FD | 	call	#pushregs_
0550c     B4 1F B0 FD | 	call	#_expr
05510                 | ' 
05510                 | ' expr()
05510                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05510     2E 00 00 FF 
05514     08 E4 05 F1 | 	add	objptr, ##23560
05518     F2 1E 02 FB | 	rdlong	local01, objptr
0551c     03 1E 66 F0 | 	shl	local01, #3
05520     02 00 00 FF 
05524     38 E4 85 F1 | 	sub	objptr, ##1080
05528     F2 1E 02 F1 | 	add	local01, objptr
0552c     04 1E 06 F1 | 	add	local01, #4
05530     0F 1F 02 FB | 	rdlong	local01, local01
05534     11 1E 0E F2 | 	cmp	local01, #17 wz
05538     2B 00 00 FF 
0553c     D0 E5 85 F1 | 	sub	objptr, ##22480
05540     15 FA 05 56 |  if_ne	mov	result1, #21
05544     2C 01 90 5D |  if_ne	jmp	#LR__0480
05548     2E 00 00 FF 
0554c     08 E4 05 F1 | 	add	objptr, ##23560
05550     F2 1E 02 FB | 	rdlong	local01, objptr
05554     01 1E 06 F1 | 	add	local01, #1
05558     F2 1E 62 FC | 	wrlong	local01, objptr
0555c     2E 00 00 FF 
05560     08 E4 85 F1 | 	sub	objptr, ##23560
05564     5C 1F B0 FD | 	call	#_expr
05568                 | ' expr()
05568                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05568     2E 00 00 FF 
0556c     08 E4 05 F1 | 	add	objptr, ##23560
05570     F2 1E 02 FB | 	rdlong	local01, objptr
05574     03 1E 66 F0 | 	shl	local01, #3
05578     02 00 00 FF 
0557c     38 E4 85 F1 | 	sub	objptr, ##1080
05580     F2 1E 02 F1 | 	add	local01, objptr
05584     04 1E 06 F1 | 	add	local01, #4
05588     0F 1F 02 FB | 	rdlong	local01, local01
0558c     11 1E 0E F2 | 	cmp	local01, #17 wz
05590     2B 00 00 FF 
05594     D0 E5 85 F1 | 	sub	objptr, ##22480
05598     15 FA 05 56 |  if_ne	mov	result1, #21
0559c     D4 00 90 5D |  if_ne	jmp	#LR__0480
055a0     2E 00 00 FF 
055a4     08 E4 05 F1 | 	add	objptr, ##23560
055a8     F2 1E 02 FB | 	rdlong	local01, objptr
055ac     01 1E 06 F1 | 	add	local01, #1
055b0     F2 1E 62 FC | 	wrlong	local01, objptr
055b4     2E 00 00 FF 
055b8     08 E4 85 F1 | 	sub	objptr, ##23560
055bc     04 1F B0 FD | 	call	#_expr
055c0                 | ' expr()
055c0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
055c0     2E 00 00 FF 
055c4     08 E4 05 F1 | 	add	objptr, ##23560
055c8     F2 1E 02 FB | 	rdlong	local01, objptr
055cc     03 1E 66 F0 | 	shl	local01, #3
055d0     02 00 00 FF 
055d4     38 E4 85 F1 | 	sub	objptr, ##1080
055d8     F2 1E 02 F1 | 	add	local01, objptr
055dc     04 1E 06 F1 | 	add	local01, #4
055e0     0F 1F 02 FB | 	rdlong	local01, local01
055e4     11 1E 0E F2 | 	cmp	local01, #17 wz
055e8     2B 00 00 FF 
055ec     D0 E5 85 F1 | 	sub	objptr, ##22480
055f0     15 FA 05 56 |  if_ne	mov	result1, #21
055f4     7C 00 90 5D |  if_ne	jmp	#LR__0480
055f8     2E 00 00 FF 
055fc     08 E4 05 F1 | 	add	objptr, ##23560
05600     F2 1E 02 FB | 	rdlong	local01, objptr
05604     01 1E 06 F1 | 	add	local01, #1
05608     F2 1E 62 FC | 	wrlong	local01, objptr
0560c     2E 00 00 FF 
05610     08 E4 85 F1 | 	sub	objptr, ##23560
05614     AC 1E B0 FD | 	call	#_expr
05618                 | ' expr()
05618                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05618     2E 00 00 FF 
0561c     08 E4 05 F1 | 	add	objptr, ##23560
05620     F2 1E 02 FB | 	rdlong	local01, objptr
05624     03 1E 66 F0 | 	shl	local01, #3
05628     02 00 00 FF 
0562c     38 E4 85 F1 | 	sub	objptr, ##1080
05630     F2 1E 02 F1 | 	add	local01, objptr
05634     04 1E 06 F1 | 	add	local01, #4
05638     0F 1F 02 FB | 	rdlong	local01, local01
0563c     11 1E 0E F2 | 	cmp	local01, #17 wz
05640     2B 00 00 FF 
05644     D0 E5 85 F1 | 	sub	objptr, ##22480
05648     15 FA 05 56 |  if_ne	mov	result1, #21
0564c     24 00 90 5D |  if_ne	jmp	#LR__0480
05650     2E 00 00 FF 
05654     08 E4 05 F1 | 	add	objptr, ##23560
05658     F2 1E 02 FB | 	rdlong	local01, objptr
0565c     01 1E 06 F1 | 	add	local01, #1
05660     F2 1E 62 FC | 	wrlong	local01, objptr
05664     2E 00 00 FF 
05668     08 E4 85 F1 | 	sub	objptr, ##23560
0566c     54 1E B0 FD | 	call	#_expr
05670     00 FA 05 F6 | 	mov	result1, #0
05674                 | LR__0480
05674     A7 F0 03 F6 | 	mov	ptra, fp
05678     B2 00 A0 FD | 	call	#popregs_
0567c                 | _compile_fun_5p_ret
0567c     2D 00 64 FD | 	ret
05680                 | 
05680                 | ' 
05680                 | ' function compile_fun_varp() as ulong ' parameter # on top of the stack
05680                 | _compile_fun_varp
05680     02 4A 05 F6 | 	mov	COUNT_, #2
05684     A8 00 A0 FD | 	call	#pushregs_
05688     00 1E 06 F6 | 	mov	local01, #0
0568c                 | ' i=0
0568c                 | ' if lparts(ct).token<>token_end then
0568c     2E 00 00 FF 
05690     08 E4 05 F1 | 	add	objptr, ##23560
05694     F2 20 02 FB | 	rdlong	local02, objptr
05698     03 20 66 F0 | 	shl	local02, #3
0569c     02 00 00 FF 
056a0     38 E4 85 F1 | 	sub	objptr, ##1080
056a4     F2 20 02 F1 | 	add	local02, objptr
056a8     04 20 06 F1 | 	add	local02, #4
056ac     10 21 02 FB | 	rdlong	local02, local02
056b0     FE 21 0E F2 | 	cmp	local02, #510 wz
056b4     2B 00 00 FF 
056b8     D0 E5 85 F1 | 	sub	objptr, ##22480
056bc     5C 00 90 AD |  if_e	jmp	#LR__0492
056c0                 | '   do
056c0                 | LR__0490
056c0     00 1E B0 FD | 	call	#_expr
056c4     01 1E 06 F1 | 	add	local01, #1
056c8                 | '   expr()
056c8                 | '    i+=1
056c8                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
056c8     2E 00 00 FF 
056cc     08 E4 05 F1 | 	add	objptr, ##23560
056d0     F2 20 02 FB | 	rdlong	local02, objptr
056d4     03 20 66 F0 | 	shl	local02, #3
056d8     02 00 00 FF 
056dc     38 E4 85 F1 | 	sub	objptr, ##1080
056e0     F2 20 02 F1 | 	add	local02, objptr
056e4     04 20 06 F1 | 	add	local02, #4
056e8     10 21 02 FB | 	rdlong	local02, local02
056ec     11 20 0E F2 | 	cmp	local02, #17 wz
056f0     2B 00 00 FF 
056f4     D0 E5 85 F1 | 	sub	objptr, ##22480
056f8     20 00 90 5D |  if_ne	jmp	#LR__0491
056fc     2E 00 00 FF 
05700     08 E4 05 F1 | 	add	objptr, ##23560
05704     F2 20 02 FB | 	rdlong	local02, objptr
05708     01 20 06 F1 | 	add	local02, #1
0570c     F2 20 62 FC | 	wrlong	local02, objptr
05710     2E 00 00 FF 
05714     08 E4 85 F1 | 	sub	objptr, ##23560
05718     A4 FF 9F FD | 	jmp	#LR__0490
0571c                 | LR__0491
0571c                 | LR__0492
0571c                 | ' return i
0571c     0F FB 01 F6 | 	mov	result1, local01
05720     A7 F0 03 F6 | 	mov	ptra, fp
05724     B2 00 A0 FD | 	call	#popregs_
05728                 | _compile_fun_varp_ret
05728     2D 00 64 FD | 	ret
0572c                 | 
0572c                 | ' 
0572c                 | ' 
0572c                 | ' function compile_int_fun_2p() as ulong
0572c                 | _compile_int_fun_2p
0572c     01 4A 05 F6 | 	mov	COUNT_, #1
05730     A8 00 A0 FD | 	call	#pushregs_
05734     80 FA BF FD | 	call	#_compile_converttoint
05738     FD 1E 02 F6 | 	mov	local01, result1
0573c                 | ' err=compile_converttoint() : if err>0 then return err
0573c     01 1E 56 F2 | 	cmps	local01, #1 wc
05740     0F FB 01 36 |  if_ae	mov	result1, local01
05744     58 00 90 3D |  if_ae	jmp	#LR__0500
05748                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05748     2E 00 00 FF 
0574c     08 E4 05 F1 | 	add	objptr, ##23560
05750     F2 1E 02 FB | 	rdlong	local01, objptr
05754     03 1E 66 F0 | 	shl	local01, #3
05758     02 00 00 FF 
0575c     38 E4 85 F1 | 	sub	objptr, ##1080
05760     F2 1E 02 F1 | 	add	local01, objptr
05764     04 1E 06 F1 | 	add	local01, #4
05768     0F 1F 02 FB | 	rdlong	local01, local01
0576c     11 1E 0E F2 | 	cmp	local01, #17 wz
05770     2B 00 00 FF 
05774     D0 E5 85 F1 | 	sub	objptr, ##22480
05778     15 FA 05 56 |  if_ne	mov	result1, #21
0577c     20 00 90 5D |  if_ne	jmp	#LR__0500
05780     2E 00 00 FF 
05784     08 E4 05 F1 | 	add	objptr, ##23560
05788     F2 1E 02 FB | 	rdlong	local01, objptr
0578c     01 1E 06 F1 | 	add	local01, #1
05790     F2 1E 62 FC | 	wrlong	local01, objptr
05794     2E 00 00 FF 
05798     08 E4 85 F1 | 	sub	objptr, ##23560
0579c     18 FA BF FD | 	call	#_compile_converttoint
057a0                 | ' err=compile_converttoint() 
057a0                 | ' return err
057a0                 | LR__0500
057a0     A7 F0 03 F6 | 	mov	ptra, fp
057a4     B2 00 A0 FD | 	call	#popregs_
057a8                 | _compile_int_fun_2p_ret
057a8     2D 00 64 FD | 	ret
057ac                 | 
057ac                 | ' 
057ac                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
057ac                 | _compile_print
057ac     0B 4A 05 F6 | 	mov	COUNT_, #11
057b0     A8 00 A0 FD | 	call	#pushregs_
057b4     00 1E 06 F6 | 	mov	local01, #0
057b8     1D 22 06 F6 | 	mov	local03, #29
057bc                 | ' t1.result.uresult=0 : t1.result_type=result_uint
057bc                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
057bc     2E 00 00 FF 
057c0     08 E4 05 F1 | 	add	objptr, ##23560
057c4     F2 24 02 FB | 	rdlong	local04, objptr
057c8     03 24 66 F0 | 	shl	local04, #3
057cc     02 00 00 FF 
057d0     38 E4 85 F1 | 	sub	objptr, ##1080
057d4     F2 24 02 F1 | 	add	local04, objptr
057d8     04 24 06 F1 | 	add	local04, #4
057dc     12 25 02 FB | 	rdlong	local04, local04
057e0     FE 25 0E F2 | 	cmp	local04, #510 wz
057e4     2B 00 00 FF 
057e8     D0 E5 85 F1 | 	sub	objptr, ##22480
057ec     68 01 90 5D |  if_ne	jmp	#LR__0510
057f0     20 22 06 F6 | 	mov	local03, #32
057f4     0F 27 02 F6 | 	mov	local05, local01
057f8     10 29 02 F6 | 	mov	local06, local02
057fc     11 2B 02 F6 | 	mov	local07, local03
05800     41 00 00 FF 
05804     40 E4 05 F1 | 	add	objptr, ##33344
05808     F2 2C 02 FB | 	rdlong	local08, objptr
0580c     16 2F 02 F6 | 	mov	local09, local08
05810     01 2E 66 F0 | 	shl	local09, #1
05814     16 2F 02 F1 | 	add	local09, local08
05818     02 2E 66 F0 | 	shl	local09, #2
0581c     03 00 00 FF 
05820     00 E4 85 F1 | 	sub	objptr, ##1536
05824     F2 2E 02 F1 | 	add	local09, objptr
05828     17 27 62 FC | 	wrlong	local05, local09
0582c     03 00 00 FF 
05830     00 E4 05 F1 | 	add	objptr, ##1536
05834     F2 26 02 FB | 	rdlong	local05, objptr
05838     13 31 02 F6 | 	mov	local10, local05
0583c     01 30 66 F0 | 	shl	local10, #1
05840     13 31 02 F1 | 	add	local10, local05
05844     02 30 66 F0 | 	shl	local10, #2
05848     03 00 00 FF 
0584c     00 E4 85 F1 | 	sub	objptr, ##1536
05850     F2 30 02 F1 | 	add	local10, objptr
05854     04 30 06 F1 | 	add	local10, #4
05858     18 29 62 FC | 	wrlong	local06, local10
0585c     03 00 00 FF 
05860     00 E4 05 F1 | 	add	objptr, ##1536
05864     F2 26 02 FB | 	rdlong	local05, objptr
05868     13 33 02 F6 | 	mov	local11, local05
0586c     01 32 66 F0 | 	shl	local11, #1
05870     13 33 02 F1 | 	add	local11, local05
05874     02 32 66 F0 | 	shl	local11, #2
05878     03 00 00 FF 
0587c     00 E4 85 F1 | 	sub	objptr, ##1536
05880     F2 32 02 F1 | 	add	local11, objptr
05884     08 32 06 F1 | 	add	local11, #8
05888     19 2B 62 FC | 	wrlong	local07, local11
0588c     03 00 00 FF 
05890     00 E4 05 F1 | 	add	objptr, ##1536
05894     F2 26 02 FB | 	rdlong	local05, objptr
05898     01 26 06 F1 | 	add	local05, #1
0589c     F2 26 62 FC | 	wrlong	local05, objptr
058a0     44 22 06 F6 | 	mov	local03, #68
058a4     0F 27 02 F6 | 	mov	local05, local01
058a8     10 29 02 F6 | 	mov	local06, local02
058ac     11 2B 02 F6 | 	mov	local07, local03
058b0     F2 2C 02 FB | 	rdlong	local08, objptr
058b4     16 2F 02 F6 | 	mov	local09, local08
058b8     01 2E 66 F0 | 	shl	local09, #1
058bc     16 2F 02 F1 | 	add	local09, local08
058c0     02 2E 66 F0 | 	shl	local09, #2
058c4     03 00 00 FF 
058c8     00 E4 85 F1 | 	sub	objptr, ##1536
058cc     F2 2E 02 F1 | 	add	local09, objptr
058d0     17 27 62 FC | 	wrlong	local05, local09
058d4     03 00 00 FF 
058d8     00 E4 05 F1 | 	add	objptr, ##1536
058dc     F2 32 02 FB | 	rdlong	local11, objptr
058e0     19 31 02 F6 | 	mov	local10, local11
058e4     01 30 66 F0 | 	shl	local10, #1
058e8     19 31 02 F1 | 	add	local10, local11
058ec     02 30 66 F0 | 	shl	local10, #2
058f0     03 00 00 FF 
058f4     00 E4 85 F1 | 	sub	objptr, ##1536
058f8     F2 30 02 F1 | 	add	local10, objptr
058fc     04 30 06 F1 | 	add	local10, #4
05900     18 29 62 FC | 	wrlong	local06, local10
05904     03 00 00 FF 
05908     00 E4 05 F1 | 	add	objptr, ##1536
0590c     F2 30 02 FB | 	rdlong	local10, objptr
05910     18 33 02 F6 | 	mov	local11, local10
05914     01 32 66 F0 | 	shl	local11, #1
05918     18 33 02 F1 | 	add	local11, local10
0591c     02 32 66 F0 | 	shl	local11, #2
05920     03 00 00 FF 
05924     00 E4 85 F1 | 	sub	objptr, ##1536
05928     F2 32 02 F1 | 	add	local11, objptr
0592c     08 32 06 F1 | 	add	local11, #8
05930     19 2B 62 FC | 	wrlong	local07, local11
05934     03 00 00 FF 
05938     00 E4 05 F1 | 	add	objptr, ##1536
0593c     F2 26 02 FB | 	rdlong	local05, objptr
05940     01 26 06 F1 | 	add	local05, #1
05944     F2 26 62 FC | 	wrlong	local05, objptr
05948     41 00 00 FF 
0594c     40 E4 85 F1 | 	sub	objptr, ##33344
05950     00 FA 05 F6 | 	mov	result1, #0
05954     20 05 90 FD | 	jmp	#LR__0517
05958                 | LR__0510
05958                 | ' do
05958                 | LR__0511
05958     68 1B B0 FD | 	call	#_expr
0595c                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
0595c                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
0595c     2E 00 00 FF 
05960     08 E4 05 F1 | 	add	objptr, ##23560
05964     F2 24 02 FB | 	rdlong	local04, objptr
05968     03 24 66 F0 | 	shl	local04, #3
0596c     02 00 00 FF 
05970     38 E4 85 F1 | 	sub	objptr, ##1080
05974     F2 24 02 F1 | 	add	local04, objptr
05978     04 24 06 F1 | 	add	local04, #4
0597c     12 2D 02 FB | 	rdlong	local08, local04
05980     11 2C 0E F2 | 	cmp	local08, #17 wz
05984     2B 00 00 FF 
05988     D0 E5 85 F1 | 	sub	objptr, ##22480
0598c     60 01 90 5D |  if_ne	jmp	#LR__0512
05990     21 22 06 F6 | 	mov	local03, #33
05994     0F 27 02 F6 | 	mov	local05, local01
05998     10 29 02 F6 | 	mov	local06, local02
0599c     11 2B 02 F6 | 	mov	local07, local03
059a0     41 00 00 FF 
059a4     40 E4 05 F1 | 	add	objptr, ##33344
059a8     F2 2C 02 FB | 	rdlong	local08, objptr
059ac     16 2F 02 F6 | 	mov	local09, local08
059b0     01 2E 66 F0 | 	shl	local09, #1
059b4     16 2F 02 F1 | 	add	local09, local08
059b8     02 2E 66 F0 | 	shl	local09, #2
059bc     03 00 00 FF 
059c0     00 E4 85 F1 | 	sub	objptr, ##1536
059c4     F2 2E 02 F1 | 	add	local09, objptr
059c8     17 27 62 FC | 	wrlong	local05, local09
059cc     03 00 00 FF 
059d0     00 E4 05 F1 | 	add	objptr, ##1536
059d4     F2 32 02 FB | 	rdlong	local11, objptr
059d8     19 31 02 F6 | 	mov	local10, local11
059dc     01 30 66 F0 | 	shl	local10, #1
059e0     19 31 02 F1 | 	add	local10, local11
059e4     02 30 66 F0 | 	shl	local10, #2
059e8     03 00 00 FF 
059ec     00 E4 85 F1 | 	sub	objptr, ##1536
059f0     F2 30 02 F1 | 	add	local10, objptr
059f4     04 30 06 F1 | 	add	local10, #4
059f8     18 29 62 FC | 	wrlong	local06, local10
059fc     03 00 00 FF 
05a00     00 E4 05 F1 | 	add	objptr, ##1536
05a04     F2 26 02 FB | 	rdlong	local05, objptr
05a08     13 33 02 F6 | 	mov	local11, local05
05a0c     01 32 66 F0 | 	shl	local11, #1
05a10     13 33 02 F1 | 	add	local11, local05
05a14     02 32 66 F0 | 	shl	local11, #2
05a18     03 00 00 FF 
05a1c     00 E4 85 F1 | 	sub	objptr, ##1536
05a20     F2 32 02 F1 | 	add	local11, objptr
05a24     08 32 06 F1 | 	add	local11, #8
05a28     19 2B 62 FC | 	wrlong	local07, local11
05a2c     03 00 00 FF 
05a30     00 E4 05 F1 | 	add	objptr, ##1536
05a34     F2 26 02 FB | 	rdlong	local05, objptr
05a38     01 26 06 F1 | 	add	local05, #1
05a3c     F2 26 62 FC | 	wrlong	local05, objptr
05a40     44 22 06 F6 | 	mov	local03, #68
05a44     0F 27 02 F6 | 	mov	local05, local01
05a48     10 29 02 F6 | 	mov	local06, local02
05a4c     11 2B 02 F6 | 	mov	local07, local03
05a50     F2 2C 02 FB | 	rdlong	local08, objptr
05a54     16 2F 02 F6 | 	mov	local09, local08
05a58     01 2E 66 F0 | 	shl	local09, #1
05a5c     16 2F 02 F1 | 	add	local09, local08
05a60     02 2E 66 F0 | 	shl	local09, #2
05a64     03 00 00 FF 
05a68     00 E4 85 F1 | 	sub	objptr, ##1536
05a6c     F2 2E 02 F1 | 	add	local09, objptr
05a70     17 27 62 FC | 	wrlong	local05, local09
05a74     03 00 00 FF 
05a78     00 E4 05 F1 | 	add	objptr, ##1536
05a7c     F2 32 02 FB | 	rdlong	local11, objptr
05a80     19 31 02 F6 | 	mov	local10, local11
05a84     01 30 66 F0 | 	shl	local10, #1
05a88     19 31 02 F1 | 	add	local10, local11
05a8c     02 30 66 F0 | 	shl	local10, #2
05a90     03 00 00 FF 
05a94     00 E4 85 F1 | 	sub	objptr, ##1536
05a98     F2 30 02 F1 | 	add	local10, objptr
05a9c     04 30 06 F1 | 	add	local10, #4
05aa0     18 29 62 FC | 	wrlong	local06, local10
05aa4     03 00 00 FF 
05aa8     00 E4 05 F1 | 	add	objptr, ##1536
05aac     F2 30 02 FB | 	rdlong	local10, objptr
05ab0     18 33 02 F6 | 	mov	local11, local10
05ab4     01 32 66 F0 | 	shl	local11, #1
05ab8     18 33 02 F1 | 	add	local11, local10
05abc     02 32 66 F0 | 	shl	local11, #2
05ac0     03 00 00 FF 
05ac4     00 E4 85 F1 | 	sub	objptr, ##1536
05ac8     F2 32 02 F1 | 	add	local11, objptr
05acc     08 32 06 F1 | 	add	local11, #8
05ad0     19 2B 62 FC | 	wrlong	local07, local11
05ad4     03 00 00 FF 
05ad8     00 E4 05 F1 | 	add	objptr, ##1536
05adc     F2 26 02 FB | 	rdlong	local05, objptr
05ae0     01 26 06 F1 | 	add	local05, #1
05ae4     F2 26 62 FC | 	wrlong	local05, objptr
05ae8     41 00 00 FF 
05aec     40 E4 85 F1 | 	sub	objptr, ##33344
05af0                 | LR__0512
05af0                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
05af0     2E 00 00 FF 
05af4     08 E4 05 F1 | 	add	objptr, ##23560
05af8     F2 24 02 FB | 	rdlong	local04, objptr
05afc     03 24 66 F0 | 	shl	local04, #3
05b00     02 00 00 FF 
05b04     38 E4 85 F1 | 	sub	objptr, ##1080
05b08     F2 24 02 F1 | 	add	local04, objptr
05b0c     04 24 06 F1 | 	add	local04, #4
05b10     12 2D 02 FB | 	rdlong	local08, local04
05b14     12 2C 0E F2 | 	cmp	local08, #18 wz
05b18     2B 00 00 FF 
05b1c     D0 E5 85 F1 | 	sub	objptr, ##22480
05b20     60 01 90 5D |  if_ne	jmp	#LR__0513
05b24     22 22 06 F6 | 	mov	local03, #34
05b28     0F 27 02 F6 | 	mov	local05, local01
05b2c     10 29 02 F6 | 	mov	local06, local02
05b30     11 2B 02 F6 | 	mov	local07, local03
05b34     41 00 00 FF 
05b38     40 E4 05 F1 | 	add	objptr, ##33344
05b3c     F2 2C 02 FB | 	rdlong	local08, objptr
05b40     16 2F 02 F6 | 	mov	local09, local08
05b44     01 2E 66 F0 | 	shl	local09, #1
05b48     16 2F 02 F1 | 	add	local09, local08
05b4c     02 2E 66 F0 | 	shl	local09, #2
05b50     03 00 00 FF 
05b54     00 E4 85 F1 | 	sub	objptr, ##1536
05b58     F2 2E 02 F1 | 	add	local09, objptr
05b5c     17 27 62 FC | 	wrlong	local05, local09
05b60     03 00 00 FF 
05b64     00 E4 05 F1 | 	add	objptr, ##1536
05b68     F2 32 02 FB | 	rdlong	local11, objptr
05b6c     19 31 02 F6 | 	mov	local10, local11
05b70     01 30 66 F0 | 	shl	local10, #1
05b74     19 31 02 F1 | 	add	local10, local11
05b78     02 30 66 F0 | 	shl	local10, #2
05b7c     03 00 00 FF 
05b80     00 E4 85 F1 | 	sub	objptr, ##1536
05b84     F2 30 02 F1 | 	add	local10, objptr
05b88     04 30 06 F1 | 	add	local10, #4
05b8c     18 29 62 FC | 	wrlong	local06, local10
05b90     03 00 00 FF 
05b94     00 E4 05 F1 | 	add	objptr, ##1536
05b98     F2 26 02 FB | 	rdlong	local05, objptr
05b9c     13 33 02 F6 | 	mov	local11, local05
05ba0     01 32 66 F0 | 	shl	local11, #1
05ba4     13 33 02 F1 | 	add	local11, local05
05ba8     02 32 66 F0 | 	shl	local11, #2
05bac     03 00 00 FF 
05bb0     00 E4 85 F1 | 	sub	objptr, ##1536
05bb4     F2 32 02 F1 | 	add	local11, objptr
05bb8     08 32 06 F1 | 	add	local11, #8
05bbc     19 2B 62 FC | 	wrlong	local07, local11
05bc0     03 00 00 FF 
05bc4     00 E4 05 F1 | 	add	objptr, ##1536
05bc8     F2 26 02 FB | 	rdlong	local05, objptr
05bcc     01 26 06 F1 | 	add	local05, #1
05bd0     F2 26 62 FC | 	wrlong	local05, objptr
05bd4     44 22 06 F6 | 	mov	local03, #68
05bd8     0F 27 02 F6 | 	mov	local05, local01
05bdc     10 29 02 F6 | 	mov	local06, local02
05be0     11 2B 02 F6 | 	mov	local07, local03
05be4     F2 2C 02 FB | 	rdlong	local08, objptr
05be8     16 2F 02 F6 | 	mov	local09, local08
05bec     01 2E 66 F0 | 	shl	local09, #1
05bf0     16 2F 02 F1 | 	add	local09, local08
05bf4     02 2E 66 F0 | 	shl	local09, #2
05bf8     03 00 00 FF 
05bfc     00 E4 85 F1 | 	sub	objptr, ##1536
05c00     F2 2E 02 F1 | 	add	local09, objptr
05c04     17 27 62 FC | 	wrlong	local05, local09
05c08     03 00 00 FF 
05c0c     00 E4 05 F1 | 	add	objptr, ##1536
05c10     F2 32 02 FB | 	rdlong	local11, objptr
05c14     19 31 02 F6 | 	mov	local10, local11
05c18     01 30 66 F0 | 	shl	local10, #1
05c1c     19 31 02 F1 | 	add	local10, local11
05c20     02 30 66 F0 | 	shl	local10, #2
05c24     03 00 00 FF 
05c28     00 E4 85 F1 | 	sub	objptr, ##1536
05c2c     F2 30 02 F1 | 	add	local10, objptr
05c30     04 30 06 F1 | 	add	local10, #4
05c34     18 29 62 FC | 	wrlong	local06, local10
05c38     03 00 00 FF 
05c3c     00 E4 05 F1 | 	add	objptr, ##1536
05c40     F2 30 02 FB | 	rdlong	local10, objptr
05c44     18 33 02 F6 | 	mov	local11, local10
05c48     01 32 66 F0 | 	shl	local11, #1
05c4c     18 33 02 F1 | 	add	local11, local10
05c50     02 32 66 F0 | 	shl	local11, #2
05c54     03 00 00 FF 
05c58     00 E4 85 F1 | 	sub	objptr, ##1536
05c5c     F2 32 02 F1 | 	add	local11, objptr
05c60     08 32 06 F1 | 	add	local11, #8
05c64     19 2B 62 FC | 	wrlong	local07, local11
05c68     03 00 00 FF 
05c6c     00 E4 05 F1 | 	add	objptr, ##1536
05c70     F2 26 02 FB | 	rdlong	local05, objptr
05c74     01 26 06 F1 | 	add	local05, #1
05c78     F2 26 62 FC | 	wrlong	local05, objptr
05c7c     41 00 00 FF 
05c80     40 E4 85 F1 | 	sub	objptr, ##33344
05c84                 | LR__0513
05c84                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
05c84     2E 00 00 FF 
05c88     08 E4 05 F1 | 	add	objptr, ##23560
05c8c     F2 24 02 FB | 	rdlong	local04, objptr
05c90     03 24 66 F0 | 	shl	local04, #3
05c94     02 00 00 FF 
05c98     38 E4 85 F1 | 	sub	objptr, ##1080
05c9c     F2 24 02 F1 | 	add	local04, objptr
05ca0     04 24 06 F1 | 	add	local04, #4
05ca4     12 2D 02 FB | 	rdlong	local08, local04
05ca8     FE 2D 0E F2 | 	cmp	local08, #510 wz
05cac     2B 00 00 FF 
05cb0     D0 E5 85 F1 | 	sub	objptr, ##22480
05cb4     B8 00 90 5D |  if_ne	jmp	#LR__0514
05cb8     44 22 06 F6 | 	mov	local03, #68
05cbc     0F 27 02 F6 | 	mov	local05, local01
05cc0     10 29 02 F6 | 	mov	local06, local02
05cc4     11 2B 02 F6 | 	mov	local07, local03
05cc8     41 00 00 FF 
05ccc     40 E4 05 F1 | 	add	objptr, ##33344
05cd0     F2 2C 02 FB | 	rdlong	local08, objptr
05cd4     16 2F 02 F6 | 	mov	local09, local08
05cd8     01 2E 66 F0 | 	shl	local09, #1
05cdc     16 2F 02 F1 | 	add	local09, local08
05ce0     02 2E 66 F0 | 	shl	local09, #2
05ce4     03 00 00 FF 
05ce8     00 E4 85 F1 | 	sub	objptr, ##1536
05cec     F2 2E 02 F1 | 	add	local09, objptr
05cf0     17 27 62 FC | 	wrlong	local05, local09
05cf4     03 00 00 FF 
05cf8     00 E4 05 F1 | 	add	objptr, ##1536
05cfc     F2 32 02 FB | 	rdlong	local11, objptr
05d00     19 31 02 F6 | 	mov	local10, local11
05d04     01 30 66 F0 | 	shl	local10, #1
05d08     19 31 02 F1 | 	add	local10, local11
05d0c     02 30 66 F0 | 	shl	local10, #2
05d10     03 00 00 FF 
05d14     00 E4 85 F1 | 	sub	objptr, ##1536
05d18     F2 30 02 F1 | 	add	local10, objptr
05d1c     04 30 06 F1 | 	add	local10, #4
05d20     18 29 62 FC | 	wrlong	local06, local10
05d24     03 00 00 FF 
05d28     00 E4 05 F1 | 	add	objptr, ##1536
05d2c     F2 30 02 FB | 	rdlong	local10, objptr
05d30     18 33 02 F6 | 	mov	local11, local10
05d34     01 32 66 F0 | 	shl	local11, #1
05d38     18 33 02 F1 | 	add	local11, local10
05d3c     02 32 66 F0 | 	shl	local11, #2
05d40     03 00 00 FF 
05d44     00 E4 85 F1 | 	sub	objptr, ##1536
05d48     F2 32 02 F1 | 	add	local11, objptr
05d4c     08 32 06 F1 | 	add	local11, #8
05d50     19 2B 62 FC | 	wrlong	local07, local11
05d54     03 00 00 FF 
05d58     00 E4 05 F1 | 	add	objptr, ##1536
05d5c     F2 26 02 FB | 	rdlong	local05, objptr
05d60     01 26 06 F1 | 	add	local05, #1
05d64     F2 26 62 FC | 	wrlong	local05, objptr
05d68     41 00 00 FF 
05d6c     40 E4 85 F1 | 	sub	objptr, ##33344
05d70                 | LR__0514
05d70                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
05d70     2E 00 00 FF 
05d74     08 E4 05 F1 | 	add	objptr, ##23560
05d78     F2 24 02 FB | 	rdlong	local04, objptr
05d7c     03 24 66 F0 | 	shl	local04, #3
05d80     02 00 00 FF 
05d84     38 E4 85 F1 | 	sub	objptr, ##1080
05d88     F2 24 02 F1 | 	add	local04, objptr
05d8c     04 24 06 F1 | 	add	local04, #4
05d90     12 2D 02 FB | 	rdlong	local08, local04
05d94     11 2C 0E F2 | 	cmp	local08, #17 wz
05d98     2B 00 00 FF 
05d9c     D0 E5 85 F1 | 	sub	objptr, ##22480
05da0     6C 00 90 AD |  if_e	jmp	#LR__0515
05da4     2E 00 00 FF 
05da8     08 E4 05 F1 | 	add	objptr, ##23560
05dac     F2 2C 02 FB | 	rdlong	local08, objptr
05db0     03 2C 66 F0 | 	shl	local08, #3
05db4     02 00 00 FF 
05db8     38 E4 85 F1 | 	sub	objptr, ##1080
05dbc     F2 2C 02 F1 | 	add	local08, objptr
05dc0     04 2C 06 F1 | 	add	local08, #4
05dc4     16 2D 02 FB | 	rdlong	local08, local08
05dc8     12 2C 0E F2 | 	cmp	local08, #18 wz
05dcc     2B 00 00 FF 
05dd0     D0 E5 85 F1 | 	sub	objptr, ##22480
05dd4     38 00 90 AD |  if_e	jmp	#LR__0515
05dd8     2E 00 00 FF 
05ddc     08 E4 05 F1 | 	add	objptr, ##23560
05de0     F2 32 02 FB | 	rdlong	local11, objptr
05de4     03 32 66 F0 | 	shl	local11, #3
05de8     02 00 00 FF 
05dec     38 E4 85 F1 | 	sub	objptr, ##1080
05df0     F2 32 02 F1 | 	add	local11, objptr
05df4     04 32 06 F1 | 	add	local11, #4
05df8     19 33 02 FB | 	rdlong	local11, local11
05dfc     FE 33 0E F2 | 	cmp	local11, #510 wz
05e00     2B 00 00 FF 
05e04     D0 E5 85 F1 | 	sub	objptr, ##22480
05e08     16 FA 05 56 |  if_ne	mov	result1, #22
05e0c     68 00 90 5D |  if_ne	jmp	#LR__0517
05e10                 | LR__0515
05e10     2E 00 00 FF 
05e14     08 E4 05 F1 | 	add	objptr, ##23560
05e18     F2 24 02 FB | 	rdlong	local04, objptr
05e1c     01 24 06 F1 | 	add	local04, #1
05e20     F2 24 62 FC | 	wrlong	local04, objptr
05e24     03 24 66 F0 | 	shl	local04, #3
05e28     02 00 00 FF 
05e2c     38 E4 85 F1 | 	sub	objptr, ##1080
05e30     F2 24 02 F1 | 	add	local04, objptr
05e34     04 24 06 F1 | 	add	local04, #4
05e38     12 2D 02 FB | 	rdlong	local08, local04
05e3c     FE 2D 0E F2 | 	cmp	local08, #510 wz
05e40     2B 00 00 FF 
05e44     D0 E5 85 F1 | 	sub	objptr, ##22480
05e48     28 00 90 AD |  if_e	jmp	#LR__0516
05e4c     2E 00 00 FF 
05e50     08 E4 05 F1 | 	add	objptr, ##23560
05e54     F2 32 02 FB | 	rdlong	local11, objptr
05e58     0E 00 00 FF 
05e5c     1C E4 05 F1 | 	add	objptr, ##7196
05e60     F2 30 02 FB | 	rdlong	local10, objptr
05e64     3C 00 00 FF 
05e68     24 E4 85 F1 | 	sub	objptr, ##30756
05e6c     18 33 52 F2 | 	cmps	local11, local10 wc
05e70     E4 FA 9F CD |  if_b	jmp	#LR__0511
05e74                 | LR__0516
05e74                 | ' return 0
05e74     00 FA 05 F6 | 	mov	result1, #0
05e78                 | LR__0517
05e78     A7 F0 03 F6 | 	mov	ptra, fp
05e7c     B2 00 A0 FD | 	call	#popregs_
05e80                 | _compile_print_ret
05e80     2D 00 64 FD | 	ret
05e84                 | 
05e84                 | ' 
05e84                 | ' function compile_if() as ulong  
05e84                 | _compile_if
05e84     05 4A 05 F6 | 	mov	COUNT_, #5
05e88     A8 00 A0 FD | 	call	#pushregs_
05e8c                 | _compile_if_enter
05e8c     28 F3 BF FD | 	call	#_compile_converttoint
05e90                 | ' return err
05e90     2E 00 00 FF 
05e94     08 E4 05 F1 | 	add	objptr, ##23560
05e98     F2 FA 01 FB | 	rdlong	result1, objptr
05e9c     01 FA 05 F1 | 	add	result1, #1
05ea0     F2 FA 61 FC | 	wrlong	result1, objptr
05ea4     58 22 06 F6 | 	mov	local03, #88
05ea8     0F 25 02 F6 | 	mov	local04, local01
05eac     10 27 02 F6 | 	mov	local05, local02
05eb0     11 1F 02 F6 | 	mov	local01, local03
05eb4     13 00 00 FF 
05eb8     38 E4 05 F1 | 	add	objptr, ##9784
05ebc     F2 12 02 FB | 	rdlong	arg01, objptr
05ec0     09 FB 01 F6 | 	mov	result1, arg01
05ec4     01 FA 65 F0 | 	shl	result1, #1
05ec8     09 FB 01 F1 | 	add	result1, arg01
05ecc     02 FA 65 F0 | 	shl	result1, #2
05ed0     03 00 00 FF 
05ed4     00 E4 85 F1 | 	sub	objptr, ##1536
05ed8     F2 FA 01 F1 | 	add	result1, objptr
05edc     FD 24 62 FC | 	wrlong	local04, result1
05ee0     03 00 00 FF 
05ee4     00 E4 05 F1 | 	add	objptr, ##1536
05ee8     F2 12 02 FB | 	rdlong	arg01, objptr
05eec     09 25 02 F6 | 	mov	local04, arg01
05ef0     01 24 66 F0 | 	shl	local04, #1
05ef4     09 25 02 F1 | 	add	local04, arg01
05ef8     02 24 66 F0 | 	shl	local04, #2
05efc     03 00 00 FF 
05f00     00 E4 85 F1 | 	sub	objptr, ##1536
05f04     F2 24 02 F1 | 	add	local04, objptr
05f08     04 24 06 F1 | 	add	local04, #4
05f0c     12 27 62 FC | 	wrlong	local05, local04
05f10     03 00 00 FF 
05f14     00 E4 05 F1 | 	add	objptr, ##1536
05f18     F2 24 02 FB | 	rdlong	local04, objptr
05f1c     12 27 02 F6 | 	mov	local05, local04
05f20     01 26 66 F0 | 	shl	local05, #1
05f24     12 27 02 F1 | 	add	local05, local04
05f28     02 26 66 F0 | 	shl	local05, #2
05f2c     03 00 00 FF 
05f30     00 E4 85 F1 | 	sub	objptr, ##1536
05f34     F2 26 02 F1 | 	add	local05, objptr
05f38     08 26 06 F1 | 	add	local05, #8
05f3c     13 1F 62 FC | 	wrlong	local01, local05
05f40     03 00 00 FF 
05f44     00 E4 05 F1 | 	add	objptr, ##1536
05f48     F2 24 02 FB | 	rdlong	local04, objptr
05f4c     01 24 06 F1 | 	add	local04, #1
05f50     F2 24 62 FC | 	wrlong	local04, objptr
05f54                 | ' 
05f54                 | ' 'print "In compile_if"
05f54                 | ' compile_int_fun_1p()
05f54                 | ' cmd=lparts(ct).token : ct+=1
05f54                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
05f54                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
05f54                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
05f54     13 00 00 FF 
05f58     38 E4 85 F1 | 	sub	objptr, ##9784
05f5c     F2 26 02 FB | 	rdlong	local05, objptr
05f60     01 26 06 F1 | 	add	local05, #1
05f64     03 26 66 F0 | 	shl	local05, #3
05f68     02 00 00 FF 
05f6c     38 E4 85 F1 | 	sub	objptr, ##1080
05f70     F2 26 02 F1 | 	add	local05, objptr
05f74     13 13 02 FB | 	rdlong	arg01, local05
05f78     2B 00 00 FF 
05f7c     D0 E5 85 F1 | 	sub	objptr, ##22480
05f80                 | ' 
05f80                 | ' select case s
05f80     25 01 00 FF 
05f84     C6 15 06 F6 | 	mov	arg02, ##@LR__4184
05f88     0C F9 B0 FD | 	call	#__system___string_cmp
05f8c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f90     1B FA 05 A6 |  if_e	mov	result1, #27
05f94     00 FA 05 56 |  if_ne	mov	result1, #0
05f98     00 FA 0D F2 | 	cmp	result1, #0 wz
05f9c     0C 00 90 AD |  if_e	jmp	#LR__0520
05fa0     05 12 06 F6 | 	mov	arg01, #5
05fa4     20 EC BF FD | 	call	#_compile_immediate_assign
05fa8     08 00 90 FD | 	jmp	#LR__0521
05fac                 | LR__0520
05fac     05 12 06 F6 | 	mov	arg01, #5
05fb0     D8 E4 BF FD | 	call	#_compile_immediate
05fb4                 | LR__0521
05fb4                 | ' 
05fb4                 | ' 
05fb4                 | ' return 0
05fb4     00 FA 05 F6 | 	mov	result1, #0
05fb8     A7 F0 03 F6 | 	mov	ptra, fp
05fbc     B2 00 A0 FD | 	call	#popregs_
05fc0                 | _compile_if_ret
05fc0     2D 00 64 FD | 	ret
05fc4                 | 
05fc4                 | ' 
05fc4                 | ' function compile_else() as ulong  
05fc4                 | _compile_else
05fc4     05 4A 05 F6 | 	mov	COUNT_, #5
05fc8     A8 00 A0 FD | 	call	#pushregs_
05fcc                 | _compile_else_enter
05fcc     5A 22 06 F6 | 	mov	local03, #90
05fd0     0F 25 02 F6 | 	mov	local04, local01
05fd4     10 27 02 F6 | 	mov	local05, local02
05fd8     11 1F 02 F6 | 	mov	local01, local03
05fdc     41 00 00 FF 
05fe0     40 E4 05 F1 | 	add	objptr, ##33344
05fe4     F2 12 02 FB | 	rdlong	arg01, objptr
05fe8     09 FB 01 F6 | 	mov	result1, arg01
05fec     01 FA 65 F0 | 	shl	result1, #1
05ff0     09 FB 01 F1 | 	add	result1, arg01
05ff4     02 FA 65 F0 | 	shl	result1, #2
05ff8     03 00 00 FF 
05ffc     00 E4 85 F1 | 	sub	objptr, ##1536
06000     F2 FA 01 F1 | 	add	result1, objptr
06004     FD 24 62 FC | 	wrlong	local04, result1
06008     03 00 00 FF 
0600c     00 E4 05 F1 | 	add	objptr, ##1536
06010     F2 FA 01 FB | 	rdlong	result1, objptr
06014     FD 24 02 F6 | 	mov	local04, result1
06018     01 24 66 F0 | 	shl	local04, #1
0601c     FD 24 02 F1 | 	add	local04, result1
06020     02 24 66 F0 | 	shl	local04, #2
06024     03 00 00 FF 
06028     00 E4 85 F1 | 	sub	objptr, ##1536
0602c     F2 24 02 F1 | 	add	local04, objptr
06030     04 24 06 F1 | 	add	local04, #4
06034     12 27 62 FC | 	wrlong	local05, local04
06038     03 00 00 FF 
0603c     00 E4 05 F1 | 	add	objptr, ##1536
06040     F2 24 02 FB | 	rdlong	local04, objptr
06044     12 27 02 F6 | 	mov	local05, local04
06048     01 26 66 F0 | 	shl	local05, #1
0604c     12 27 02 F1 | 	add	local05, local04
06050     02 26 66 F0 | 	shl	local05, #2
06054     03 00 00 FF 
06058     00 E4 85 F1 | 	sub	objptr, ##1536
0605c     F2 26 02 F1 | 	add	local05, objptr
06060     08 26 06 F1 | 	add	local05, #8
06064     13 1F 62 FC | 	wrlong	local01, local05
06068     03 00 00 FF 
0606c     00 E4 05 F1 | 	add	objptr, ##1536
06070     F2 24 02 FB | 	rdlong	local04, objptr
06074     01 24 06 F1 | 	add	local04, #1
06078     F2 24 62 FC | 	wrlong	local04, objptr
0607c                 | ' 
0607c                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
0607c                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
0607c     13 00 00 FF 
06080     38 E4 85 F1 | 	sub	objptr, ##9784
06084     F2 26 02 FB | 	rdlong	local05, objptr
06088     01 26 06 F1 | 	add	local05, #1
0608c     03 26 66 F0 | 	shl	local05, #3
06090     02 00 00 FF 
06094     38 E4 85 F1 | 	sub	objptr, ##1080
06098     F2 26 02 F1 | 	add	local05, objptr
0609c     13 13 02 FB | 	rdlong	arg01, local05
060a0     2B 00 00 FF 
060a4     D0 E5 85 F1 | 	sub	objptr, ##22480
060a8                 | ' 
060a8                 | ' select case s
060a8     25 01 00 FF 
060ac     C6 15 06 F6 | 	mov	arg02, ##@LR__4184
060b0     E4 F7 B0 FD | 	call	#__system___string_cmp
060b4     00 FA 0D F2 | 	cmp	result1, #0 wz
060b8     1B FA 05 A6 |  if_e	mov	result1, #27
060bc     00 FA 05 56 |  if_ne	mov	result1, #0
060c0     00 FA 0D F2 | 	cmp	result1, #0 wz
060c4     0C 00 90 AD |  if_e	jmp	#LR__0530
060c8     05 12 06 F6 | 	mov	arg01, #5
060cc     F8 EA BF FD | 	call	#_compile_immediate_assign
060d0     08 00 90 FD | 	jmp	#LR__0531
060d4                 | LR__0530
060d4     05 12 06 F6 | 	mov	arg01, #5
060d8     B0 E3 BF FD | 	call	#_compile_immediate
060dc                 | LR__0531
060dc                 | ' 
060dc                 | ' 
060dc                 | ' return 0
060dc     00 FA 05 F6 | 	mov	result1, #0
060e0     A7 F0 03 F6 | 	mov	ptra, fp
060e4     B2 00 A0 FD | 	call	#popregs_
060e8                 | _compile_else_ret
060e8     2D 00 64 FD | 	ret
060ec                 | 
060ec                 | ' 
060ec                 | ' 
060ec                 | ' function compile_dim() as ulong  
060ec                 | _compile_dim
060ec     11 4A 05 F6 | 	mov	COUNT_, #17
060f0     A8 00 A0 FD | 	call	#pushregs_
060f4     01 1E 06 F6 | 	mov	local01, #1
060f8     01 20 06 F6 | 	mov	local02, #1
060fc     01 22 06 F6 | 	mov	local03, #1
06100                 | ' 
06100                 | ' dims(0)=1: dims(1)=1: dims(2)=1
06100                 | ' 
06100                 | ' if isname(lparts(ct).part$) then 
06100     2E 00 00 FF 
06104     08 E4 05 F1 | 	add	objptr, ##23560
06108     F2 14 02 FB | 	rdlong	arg02, objptr
0610c     03 14 66 F0 | 	shl	arg02, #3
06110     02 00 00 FF 
06114     38 E4 85 F1 | 	sub	objptr, ##1080
06118     F2 14 02 F1 | 	add	arg02, objptr
0611c     0A 13 02 FB | 	rdlong	arg01, arg02
06120     2B 00 00 FF 
06124     D0 E5 85 F1 | 	sub	objptr, ##22480
06128     44 D3 BF FD | 	call	#_isname
0612c     00 FA 0D F2 | 	cmp	result1, #0 wz
06130     30 05 90 AD |  if_e	jmp	#LR__0564
06134     2E 00 00 FF 
06138     08 E4 05 F1 | 	add	objptr, ##23560
0613c     F2 24 02 FB | 	rdlong	local04, objptr
06140     03 24 66 F0 | 	shl	local04, #3
06144     02 00 00 FF 
06148     38 E4 85 F1 | 	sub	objptr, ##1080
0614c     F2 24 02 F1 | 	add	local04, objptr
06150     12 27 02 FB | 	rdlong	local05, local04
06154     01 28 66 F6 | 	neg	local06, #1
06158                 | '   varname2$=lparts(ct).part$ 
06158                 | '   j=-1
06158                 | '   if varnum>0 then
06158     04 E4 85 F1 | 	sub	objptr, #4
0615c     F2 2A 02 FB | 	rdlong	local07, objptr
06160     2B 00 00 FF 
06164     CC E5 85 F1 | 	sub	objptr, ##22476
06168     01 2A 56 F2 | 	cmps	local07, #1 wc
0616c     58 00 90 CD |  if_b	jmp	#LR__0542
06170                 | '  '   print "in dim, varnum=";varnum
06170                 | '     for i=0 to varnum-1
06170     00 2C 06 F6 | 	mov	local08, #0
06174     2B 00 00 FF 
06178     CC E5 05 F1 | 	add	objptr, ##22476
0617c     F2 2E 02 FB | 	rdlong	local09, objptr
06180     2B 00 00 FF 
06184     CC E5 85 F1 | 	sub	objptr, ##22476
06188                 | LR__0540
06188     17 2D 52 F2 | 	cmps	local08, local09 wc
0618c     38 00 90 3D |  if_ae	jmp	#LR__0541
06190                 | '       if variables(i).name=varname2$ then j=i : exit
06190     16 25 02 F6 | 	mov	local04, local08
06194     04 24 66 F0 | 	shl	local04, #4
06198     0B 00 00 FF 
0619c     CC E5 05 F1 | 	add	objptr, ##6092
061a0     F2 24 02 F1 | 	add	local04, objptr
061a4     12 13 02 FB | 	rdlong	arg01, local04
061a8     13 15 02 F6 | 	mov	arg02, local05
061ac     0B 00 00 FF 
061b0     CC E5 85 F1 | 	sub	objptr, ##6092
061b4     E0 F6 B0 FD | 	call	#__system___string_cmp
061b8     00 FA 0D F2 | 	cmp	result1, #0 wz
061bc     16 29 02 A6 |  if_e	mov	local06, local08
061c0     01 2C 06 51 |  if_ne	add	local08, #1
061c4     C0 FF 9F 5D |  if_ne	jmp	#LR__0540
061c8                 | LR__0541
061c8                 | LR__0542
061c8                 | '   if j<>-1 then printerror (42) : return 42
061c8     FF FF 7F FF 
061cc     FF 29 0E F2 | 	cmp	local06, ##-1 wz
061d0     10 00 90 AD |  if_e	jmp	#LR__0543
061d4     2A 12 06 F6 | 	mov	arg01, #42
061d8     98 C1 B0 FD | 	call	#_printerror
061dc     2A FA 05 F6 | 	mov	result1, #42
061e0     D8 05 90 FD | 	jmp	#LR__0566
061e4                 | LR__0543
061e4                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
061e4     2E 00 00 FF 
061e8     08 E4 05 F1 | 	add	objptr, ##23560
061ec     F2 14 02 FB | 	rdlong	arg02, objptr
061f0     01 14 06 F1 | 	add	arg02, #1
061f4     03 14 66 F0 | 	shl	arg02, #3
061f8     02 00 00 FF 
061fc     38 E4 85 F1 | 	sub	objptr, ##1080
06200     F2 14 02 F1 | 	add	arg02, objptr
06204     0A 13 02 FB | 	rdlong	arg01, arg02
06208     26 01 00 FF 
0620c     9B 15 06 F6 | 	mov	arg02, ##@LR__4295
06210     2B 00 00 FF 
06214     D0 E5 85 F1 | 	sub	objptr, ##22480
06218     7C F6 B0 FD | 	call	#__system___string_cmp
0621c     00 FA 0D F2 | 	cmp	result1, #0 wz
06220     50 00 90 AD |  if_e	jmp	#LR__0544
06224     2E 00 00 FF 
06228     08 E4 05 F1 | 	add	objptr, ##23560
0622c     F2 2E 02 FB | 	rdlong	local09, objptr
06230     01 2E 06 F1 | 	add	local09, #1
06234     03 2E 66 F0 | 	shl	local09, #3
06238     02 00 00 FF 
0623c     38 E4 85 F1 | 	sub	objptr, ##1080
06240     F2 2E 02 F1 | 	add	local09, objptr
06244     17 13 02 FB | 	rdlong	arg01, local09
06248     26 01 00 FF 
0624c     9D 15 06 F6 | 	mov	arg02, ##@LR__4296
06250     2B 00 00 FF 
06254     D0 E5 85 F1 | 	sub	objptr, ##22480
06258     3C F6 B0 FD | 	call	#__system___string_cmp
0625c     00 FA 0D F2 | 	cmp	result1, #0 wz
06260     10 00 90 AD |  if_e	jmp	#LR__0544
06264     2B 12 06 F6 | 	mov	arg01, #43
06268     08 C1 B0 FD | 	call	#_printerror
0626c     2B FA 05 F6 | 	mov	result1, #43
06270     48 05 90 FD | 	jmp	#LR__0566
06274                 | LR__0544
06274                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
06274     2E 00 00 FF 
06278     08 E4 05 F1 | 	add	objptr, ##23560
0627c     F2 14 02 FB | 	rdlong	arg02, objptr
06280     01 14 06 F1 | 	add	arg02, #1
06284     03 14 66 F0 | 	shl	arg02, #3
06288     02 00 00 FF 
0628c     38 E4 85 F1 | 	sub	objptr, ##1080
06290     F2 14 02 F1 | 	add	arg02, objptr
06294     0A 13 02 FB | 	rdlong	arg01, arg02
06298     26 01 00 FF 
0629c     A0 15 06 F6 | 	mov	arg02, ##@LR__4297
062a0     2B 00 00 FF 
062a4     D0 E5 85 F1 | 	sub	objptr, ##22480
062a8     EC F5 B0 FD | 	call	#__system___string_cmp
062ac     00 FA 0D F2 | 	cmp	result1, #0 wz
062b0     2E 00 00 AF 
062b4     08 E4 05 A1 |  if_e	add	objptr, ##23560
062b8     F2 30 02 AB |  if_e	rdlong	local10, objptr
062bc     2E 00 00 AF 
062c0     08 E4 85 A1 |  if_e	sub	objptr, ##23560
062c4     01 30 06 A1 |  if_e	add	local10, #1
062c8     7C 01 90 AD |  if_e	jmp	#LR__0550
062cc     2E 00 00 FF 
062d0     08 E4 05 F1 | 	add	objptr, ##23560
062d4     F2 30 02 FB | 	rdlong	local10, objptr
062d8     2E 00 00 FF 
062dc     08 E4 85 F1 | 	sub	objptr, ##23560
062e0     02 30 06 F1 | 	add	local10, #2
062e4     00 32 06 F6 | 	mov	local11, #0
062e8                 | '   l=ct+2 : m=0 : do
062e8                 | LR__0545
062e8                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
062e8                 | '     if isdec(lparts(l).part$) then 
062e8     18 25 02 F6 | 	mov	local04, local10
062ec     03 24 66 F0 | 	shl	local04, #3
062f0     2B 00 00 FF 
062f4     D0 E5 05 F1 | 	add	objptr, ##22480
062f8     F2 24 02 F1 | 	add	local04, objptr
062fc     12 13 02 FB | 	rdlong	arg01, local04
06300     2B 00 00 FF 
06304     D0 E5 85 F1 | 	sub	objptr, ##22480
06308     08 D8 BF FD | 	call	#_isdec
0630c     00 FA 0D F2 | 	cmp	result1, #0 wz
06310     44 00 90 AD |  if_e	jmp	#LR__0546
06314     19 35 02 F6 | 	mov	local12, local11
06318     0F 35 06 F1 | 	add	local12, #local01
0631c     18 2F 02 F6 | 	mov	local09, local10
06320     03 2E 66 F0 | 	shl	local09, #3
06324     2B 00 00 FF 
06328     D0 E5 05 F1 | 	add	objptr, ##22480
0632c     F2 2E 02 F1 | 	add	local09, objptr
06330     17 13 02 FB | 	rdlong	arg01, local09
06334     00 14 06 F6 | 	mov	arg02, #0
06338     2B 00 00 FF 
0633c     D0 E5 85 F1 | 	sub	objptr, ##22480
06340     B8 25 B1 FD | 	call	#__system____builtin_atoi
06344     FD 36 02 F6 | 	mov	local13, result1
06348                 | 	'.live	local13
06348                 | 	'.live	local12
06348     00 34 8E F9 | 	altd	local12, #0
0634c     1B 35 02 F6 | 	mov	local12, local13
06350     01 32 06 F1 | 	add	local11, #1
06354     10 00 90 FD | 	jmp	#LR__0547
06358                 | LR__0546
06358     11 12 06 F6 | 	mov	arg01, #17
0635c     14 C0 B0 FD | 	call	#_printerror
06360                 | '       printerror (17)  : return(17)
06360     11 FA 05 F6 | 	mov	result1, #17
06364     54 04 90 FD | 	jmp	#LR__0566
06368                 | LR__0547
06368                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
06368     18 25 02 F6 | 	mov	local04, local10
0636c     01 24 06 F1 | 	add	local04, #1
06370     03 24 66 F0 | 	shl	local04, #3
06374     2B 00 00 FF 
06378     D0 E5 05 F1 | 	add	objptr, ##22480
0637c     F2 24 02 F1 | 	add	local04, objptr
06380     12 13 02 FB | 	rdlong	arg01, local04
06384     26 01 00 FF 
06388     A3 15 06 F6 | 	mov	arg02, ##@LR__4298
0638c     2B 00 00 FF 
06390     D0 E5 85 F1 | 	sub	objptr, ##22480
06394     00 F5 B0 FD | 	call	#__system___string_cmp
06398     00 FA 0D F2 | 	cmp	result1, #0 wz
0639c     48 00 90 AD |  if_e	jmp	#LR__0548
063a0     18 37 02 F6 | 	mov	local13, local10
063a4     01 36 06 F1 | 	add	local13, #1
063a8     03 36 66 F0 | 	shl	local13, #3
063ac     2B 00 00 FF 
063b0     D0 E5 05 F1 | 	add	objptr, ##22480
063b4     F2 36 02 F1 | 	add	local13, objptr
063b8     1B 13 02 FB | 	rdlong	arg01, local13
063bc     26 01 00 FF 
063c0     A5 15 06 F6 | 	mov	arg02, ##@LR__4299
063c4     2B 00 00 FF 
063c8     D0 E5 85 F1 | 	sub	objptr, ##22480
063cc     C8 F4 B0 FD | 	call	#__system___string_cmp
063d0     00 FA 0D F2 | 	cmp	result1, #0 wz
063d4     10 00 90 AD |  if_e	jmp	#LR__0548
063d8     2C 12 06 F6 | 	mov	arg01, #44
063dc     94 BF B0 FD | 	call	#_printerror
063e0     2C FA 05 F6 | 	mov	result1, #44
063e4     D4 03 90 FD | 	jmp	#LR__0566
063e8                 | LR__0548
063e8     02 30 06 F1 | 	add	local10, #2
063ec     18 25 02 F6 | 	mov	local04, local10
063f0     01 24 86 F1 | 	sub	local04, #1
063f4     03 24 66 F0 | 	shl	local04, #3
063f8     2B 00 00 FF 
063fc     D0 E5 05 F1 | 	add	objptr, ##22480
06400     F2 24 02 F1 | 	add	local04, objptr
06404     12 13 02 FB | 	rdlong	arg01, local04
06408     26 01 00 FF 
0640c     A7 15 06 F6 | 	mov	arg02, ##@LR__4300
06410     2B 00 00 FF 
06414     D0 E5 85 F1 | 	sub	objptr, ##22480
06418     7C F4 B0 FD | 	call	#__system___string_cmp
0641c     00 FA 0D F2 | 	cmp	result1, #0 wz
06420     03 32 56 52 |  if_ne	cmps	local11, #3 wc
06424     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0545
06428                 | '   if m>3 then printerror(45): return(45)
06428     04 32 56 F2 | 	cmps	local11, #4 wc
0642c     10 00 90 CD |  if_b	jmp	#LR__0549
06430     2D 12 06 F6 | 	mov	arg01, #45
06434     3C BF B0 FD | 	call	#_printerror
06438     2D FA 05 F6 | 	mov	result1, #45
0643c     7C 03 90 FD | 	jmp	#LR__0566
06440                 | LR__0549
06440     00 39 06 F6 | 	mov	local14, #256
06444     0C 3A 06 F6 | 	mov	local15, #12
06448                 | LR__0550
06448                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
06448                 | '   arraytype=array_no_type : esize=12
06448                 | ' 1350 
06448                 | '   if lparts(l).part$="as" then
06448     18 25 02 F6 | 	mov	local04, local10
0644c     03 24 66 F0 | 	shl	local04, #3
06450     2B 00 00 FF 
06454     D0 E5 05 F1 | 	add	objptr, ##22480
06458     F2 24 02 F1 | 	add	local04, objptr
0645c     12 13 02 FB | 	rdlong	arg01, local04
06460     26 01 00 FF 
06464     A9 15 06 F6 | 	mov	arg02, ##@LR__4301
06468     2B 00 00 FF 
0646c     D0 E5 85 F1 | 	sub	objptr, ##22480
06470     24 F4 B0 FD | 	call	#__system___string_cmp
06474     00 FA 0D F2 | 	cmp	result1, #0 wz
06478     F8 01 90 5D |  if_ne	jmp	#LR__0565
0647c                 | '     select case lparts(l+1).part$
0647c     18 35 02 F6 | 	mov	local12, local10
06480     01 34 06 F1 | 	add	local12, #1
06484     03 34 66 F0 | 	shl	local12, #3
06488     2B 00 00 FF 
0648c     D0 E5 05 F1 | 	add	objptr, ##22480
06490     F2 34 02 F1 | 	add	local12, objptr
06494     1A 3D 02 FB | 	rdlong	local16, local12
06498     26 01 00 FF 
0649c     AC 15 06 F6 | 	mov	arg02, ##@LR__4302
064a0     1E 13 02 F6 | 	mov	arg01, local16
064a4     2B 00 00 FF 
064a8     D0 E5 85 F1 | 	sub	objptr, ##22480
064ac     E8 F3 B0 FD | 	call	#__system___string_cmp
064b0     00 FA 0D F2 | 	cmp	result1, #0 wz
064b4     0C 01 90 AD |  if_e	jmp	#LR__0551
064b8     26 01 00 FF 
064bc     B1 15 06 F6 | 	mov	arg02, ##@LR__4303
064c0     1E 13 02 F6 | 	mov	arg01, local16
064c4     D0 F3 B0 FD | 	call	#__system___string_cmp
064c8     00 FA 0D F2 | 	cmp	result1, #0 wz
064cc     00 01 90 AD |  if_e	jmp	#LR__0552
064d0     26 01 00 FF 
064d4     B7 15 06 F6 | 	mov	arg02, ##@LR__4304
064d8     1E 13 02 F6 | 	mov	arg01, local16
064dc     B8 F3 B0 FD | 	call	#__system___string_cmp
064e0     00 FA 0D F2 | 	cmp	result1, #0 wz
064e4     F4 00 90 AD |  if_e	jmp	#LR__0553
064e8     26 01 00 FF 
064ec     BD 15 06 F6 | 	mov	arg02, ##@LR__4305
064f0     1E 13 02 F6 | 	mov	arg01, local16
064f4     A0 F3 B0 FD | 	call	#__system___string_cmp
064f8     00 FA 0D F2 | 	cmp	result1, #0 wz
064fc     E8 00 90 AD |  if_e	jmp	#LR__0554
06500     26 01 00 FF 
06504     C4 15 06 F6 | 	mov	arg02, ##@LR__4306
06508     1E 13 02 F6 | 	mov	arg01, local16
0650c     88 F3 B0 FD | 	call	#__system___string_cmp
06510     00 FA 0D F2 | 	cmp	result1, #0 wz
06514     DC 00 90 AD |  if_e	jmp	#LR__0555
06518     26 01 00 FF 
0651c     C9 15 06 F6 | 	mov	arg02, ##@LR__4307
06520     1E 13 02 F6 | 	mov	arg01, local16
06524     70 F3 B0 FD | 	call	#__system___string_cmp
06528     00 FA 0D F2 | 	cmp	result1, #0 wz
0652c     D0 00 90 AD |  if_e	jmp	#LR__0556
06530     26 01 00 FF 
06534     D1 15 06 F6 | 	mov	arg02, ##@LR__4308
06538     1E 13 02 F6 | 	mov	arg01, local16
0653c     58 F3 B0 FD | 	call	#__system___string_cmp
06540     00 FA 0D F2 | 	cmp	result1, #0 wz
06544     C4 00 90 AD |  if_e	jmp	#LR__0557
06548     26 01 00 FF 
0654c     D7 15 06 F6 | 	mov	arg02, ##@LR__4309
06550     1E 13 02 F6 | 	mov	arg01, local16
06554     40 F3 B0 FD | 	call	#__system___string_cmp
06558     00 FA 0D F2 | 	cmp	result1, #0 wz
0655c     B8 00 90 AD |  if_e	jmp	#LR__0558
06560     26 01 00 FF 
06564     DD 15 06 F6 | 	mov	arg02, ##@LR__4310
06568     1E 13 02 F6 | 	mov	arg01, local16
0656c     28 F3 B0 FD | 	call	#__system___string_cmp
06570     00 FA 0D F2 | 	cmp	result1, #0 wz
06574     AC 00 90 AD |  if_e	jmp	#LR__0559
06578     26 01 00 FF 
0657c     E4 15 06 F6 | 	mov	arg02, ##@LR__4311
06580     1E 13 02 F6 | 	mov	arg01, local16
06584     10 F3 B0 FD | 	call	#__system___string_cmp
06588     00 FA 0D F2 | 	cmp	result1, #0 wz
0658c     A0 00 90 AD |  if_e	jmp	#LR__0560
06590     26 01 00 FF 
06594     EB 15 06 F6 | 	mov	arg02, ##@LR__4312
06598     1E 13 02 F6 | 	mov	arg01, local16
0659c     F8 F2 B0 FD | 	call	#__system___string_cmp
065a0     00 FA 0D F2 | 	cmp	result1, #0 wz
065a4     94 00 90 AD |  if_e	jmp	#LR__0561
065a8     26 01 00 FF 
065ac     F2 15 06 F6 | 	mov	arg02, ##@LR__4313
065b0     1E 13 02 F6 | 	mov	arg01, local16
065b4     E0 F2 B0 FD | 	call	#__system___string_cmp
065b8     00 FA 0D F2 | 	cmp	result1, #0 wz
065bc     88 00 90 AD |  if_e	jmp	#LR__0562
065c0     90 00 90 FD | 	jmp	#LR__0563
065c4                 | LR__0551
065c4     01 39 06 F6 | 	mov	local14, #257
065c8     01 3A 06 F6 | 	mov	local15, #1
065cc     A4 00 90 FD | 	jmp	#LR__0565
065d0                 | LR__0552
065d0     02 39 06 F6 | 	mov	local14, #258
065d4     01 3A 06 F6 | 	mov	local15, #1
065d8     98 00 90 FD | 	jmp	#LR__0565
065dc                 | LR__0553
065dc     03 39 06 F6 | 	mov	local14, #259
065e0     02 3A 06 F6 | 	mov	local15, #2
065e4     8C 00 90 FD | 	jmp	#LR__0565
065e8                 | LR__0554
065e8     04 39 06 F6 | 	mov	local14, #260
065ec     02 3A 06 F6 | 	mov	local15, #2
065f0     80 00 90 FD | 	jmp	#LR__0565
065f4                 | LR__0555
065f4     05 39 06 F6 | 	mov	local14, #261
065f8     04 3A 06 F6 | 	mov	local15, #4
065fc     74 00 90 FD | 	jmp	#LR__0565
06600                 | LR__0556
06600     05 39 06 F6 | 	mov	local14, #261
06604     04 3A 06 F6 | 	mov	local15, #4
06608     68 00 90 FD | 	jmp	#LR__0565
0660c                 | LR__0557
0660c     06 39 06 F6 | 	mov	local14, #262
06610     04 3A 06 F6 | 	mov	local15, #4
06614     5C 00 90 FD | 	jmp	#LR__0565
06618                 | LR__0558
06618     07 39 06 F6 | 	mov	local14, #263
0661c     08 3A 06 F6 | 	mov	local15, #8
06620     50 00 90 FD | 	jmp	#LR__0565
06624                 | LR__0559
06624     08 39 06 F6 | 	mov	local14, #264
06628     08 3A 06 F6 | 	mov	local15, #8
0662c     44 00 90 FD | 	jmp	#LR__0565
06630                 | LR__0560
06630     09 39 06 F6 | 	mov	local14, #265
06634     04 3A 06 F6 | 	mov	local15, #4
06638     38 00 90 FD | 	jmp	#LR__0565
0663c                 | LR__0561
0663c     0A 39 06 F6 | 	mov	local14, #266
06640     08 3A 06 F6 | 	mov	local15, #8
06644     2C 00 90 FD | 	jmp	#LR__0565
06648                 | LR__0562
06648     0B 39 06 F6 | 	mov	local14, #267
0664c     04 3A 06 F6 | 	mov	local15, #4
06650     20 00 90 FD | 	jmp	#LR__0565
06654                 | LR__0563
06654     2F 12 06 F6 | 	mov	arg01, #47
06658     18 BD B0 FD | 	call	#_printerror
0665c     2F FA 05 F6 | 	mov	result1, #47
06660     58 01 90 FD | 	jmp	#LR__0566
06664                 | LR__0564
06664     2E 12 06 F6 | 	mov	arg01, #46
06668     08 BD B0 FD | 	call	#_printerror
0666c                 | '   printerror(46): return 46
0666c     2E FA 05 F6 | 	mov	result1, #46
06670     48 01 90 FD | 	jmp	#LR__0566
06674                 | LR__0565
06674     0F 3B 02 FD | 	qmul	local15, local01
06678     18 2A 62 FD | 	getqx	local07
0667c     10 2B 02 FD | 	qmul	local07, local02
06680     18 3C 62 FD | 	getqx	local16
06684     11 3D 02 FD | 	qmul	local16, local03
06688     52 00 00 FF 
0668c     3C E4 05 F1 | 	add	objptr, ##42044
06690     F2 3E 02 FB | 	rdlong	local17, objptr
06694     1C 15 02 F6 | 	mov	arg02, local14
06698     01 16 06 F6 | 	mov	arg03, #1
0669c     00 18 06 F6 | 	mov	arg04, #0
066a0                 | '     return fill(addr, pattern, count, listPtr, 4)
066a0     04 1A 06 F6 | 	mov	arg05, #4
066a4     18 3C 62 FD | 	getqx	local16
066a8     1E 3F 82 F1 | 	sub	local17, local16
066ac     10 3E 86 F1 | 	sub	local17, #16
066b0     F2 3E 62 FC | 	wrlong	local17, objptr
066b4     1F 13 02 F6 | 	mov	arg01, local17
066b8     46 00 00 FF 
066bc     7C E5 85 F1 | 	sub	objptr, ##36220
066c0     F8 E7 B0 FD | 	call	#_psram_spin2_fill
066c4     1F 13 02 F6 | 	mov	arg01, local17
066c8     02 12 06 F1 | 	add	arg01, #2
066cc     1D 15 02 F6 | 	mov	arg02, local15
066d0     01 16 06 F6 | 	mov	arg03, #1
066d4     00 18 06 F6 | 	mov	arg04, #0
066d8                 | '     return fill(addr, pattern, count, listPtr, 1)
066d8     01 1A 06 F6 | 	mov	arg05, #1
066dc     DC E7 B0 FD | 	call	#_psram_spin2_fill
066e0     1F 13 02 F6 | 	mov	arg01, local17
066e4     04 12 06 F1 | 	add	arg01, #4
066e8     0F 15 02 F6 | 	mov	arg02, local01
066ec     01 16 06 F6 | 	mov	arg03, #1
066f0     00 18 06 F6 | 	mov	arg04, #0
066f4                 | '     return fill(addr, pattern, count, listPtr, 4)
066f4     04 1A 06 F6 | 	mov	arg05, #4
066f8     C0 E7 B0 FD | 	call	#_psram_spin2_fill
066fc     1F 13 02 F6 | 	mov	arg01, local17
06700     08 12 06 F1 | 	add	arg01, #8
06704     10 15 02 F6 | 	mov	arg02, local02
06708     01 16 06 F6 | 	mov	arg03, #1
0670c     00 18 06 F6 | 	mov	arg04, #0
06710                 | '     return fill(addr, pattern, count, listPtr, 4)
06710     04 1A 06 F6 | 	mov	arg05, #4
06714     A4 E7 B0 FD | 	call	#_psram_spin2_fill
06718     1F 13 02 F6 | 	mov	arg01, local17
0671c     0C 12 06 F1 | 	add	arg01, #12
06720     11 15 02 F6 | 	mov	arg02, local03
06724     01 16 06 F6 | 	mov	arg03, #1
06728     00 18 06 F6 | 	mov	arg04, #0
0672c                 | '     return fill(addr, pattern, count, listPtr, 4)
0672c     04 1A 06 F6 | 	mov	arg05, #4
06730     88 E7 B0 FD | 	call	#_psram_spin2_fill
06734     20 00 00 FF 
06738     0C E5 05 F1 | 	add	objptr, ##16652
0673c     F2 24 02 FB | 	rdlong	local04, objptr
06740     04 24 66 F0 | 	shl	local04, #4
06744     20 00 00 FF 
06748     00 E4 85 F1 | 	sub	objptr, ##16384
0674c     F2 24 02 F1 | 	add	local04, objptr
06750     12 27 62 FC | 	wrlong	local05, local04
06754     20 00 00 FF 
06758     00 E4 05 F1 | 	add	objptr, ##16384
0675c     F2 24 02 FB | 	rdlong	local04, objptr
06760     04 24 66 F0 | 	shl	local04, #4
06764     20 00 00 FF 
06768     00 E4 85 F1 | 	sub	objptr, ##16384
0676c     F2 24 02 F1 | 	add	local04, objptr
06770     04 24 06 F1 | 	add	local04, #4
06774     12 3F 62 FC | 	wrlong	local17, local04
06778     20 00 00 FF 
0677c     00 E4 05 F1 | 	add	objptr, ##16384
06780     F2 24 02 FB | 	rdlong	local04, objptr
06784     04 24 66 F0 | 	shl	local04, #4
06788     20 00 00 FF 
0678c     00 E4 85 F1 | 	sub	objptr, ##16384
06790     F2 24 02 F1 | 	add	local04, objptr
06794     0C 24 06 F1 | 	add	local04, #12
06798     12 39 62 FC | 	wrlong	local14, local04
0679c     20 00 00 FF 
067a0     00 E4 05 F1 | 	add	objptr, ##16384
067a4     F2 2A 02 FB | 	rdlong	local07, objptr
067a8     01 2A 06 F1 | 	add	local07, #1
067ac     F2 2A 62 FC | 	wrlong	local07, objptr
067b0     2B 00 00 FF 
067b4     CC E5 85 F1 | 	sub	objptr, ##22476
067b8                 | ' 'print dims(0),dims(1),dims(2),arraytype
067b8                 | ' 
067b8                 | ' arraysize=esize*dims(0)*dims(1)*dims(2)
067b8                 | ' arrayptr=memtop-arraysize-16
067b8                 | ' memtop=arrayptr
067b8                 | ' 
067b8                 | ' pslpoke arrayptr,arraytype
067b8                 | ' pspoke arrayptr+2,esize
067b8                 | ' pslpoke arrayptr+4,dims(0)
067b8                 | ' pslpoke arrayptr+8,dims(1)
067b8                 | ' pslpoke arrayptr+12,dims(2)
067b8                 | ' 
067b8                 | ' variables(varnum).name=varname2$
067b8                 | ' variables(varnum).value.uresult=arrayptr
067b8                 | ' variables(varnum).vartype=arraytype
067b8                 | ' varnum+=1
067b8                 | ' 
067b8                 | ' return 0
067b8     00 FA 05 F6 | 	mov	result1, #0
067bc                 | LR__0566
067bc     A7 F0 03 F6 | 	mov	ptra, fp
067c0     B2 00 A0 FD | 	call	#popregs_
067c4                 | _compile_dim_ret
067c4     2D 00 64 FD | 	ret
067c8                 | 
067c8                 | ' 
067c8                 | ' 
067c8                 | ' function compile_for() as ulong  
067c8                 | _compile_for
067c8     07 4A 05 F6 | 	mov	COUNT_, #7
067cc     A8 00 A0 FD | 	call	#pushregs_
067d0                 | ' 
067d0                 | ' 
067d0                 | ' 
067d0                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
067d0     2E 00 00 FF 
067d4     08 E4 05 F1 | 	add	objptr, ##23560
067d8     F2 14 02 FB | 	rdlong	arg02, objptr
067dc     01 14 06 F1 | 	add	arg02, #1
067e0     03 14 66 F0 | 	shl	arg02, #3
067e4     02 00 00 FF 
067e8     38 E4 85 F1 | 	sub	objptr, ##1080
067ec     F2 14 02 F1 | 	add	arg02, objptr
067f0     0A 13 02 FB | 	rdlong	arg01, arg02
067f4     2B 00 00 FF 
067f8     D0 E5 85 F1 | 	sub	objptr, ##22480
067fc                 | ' 
067fc                 | ' select case s
067fc     25 01 00 FF 
06800     C6 15 06 F6 | 	mov	arg02, ##@LR__4184
06804     90 F0 B0 FD | 	call	#__system___string_cmp
06808     00 FA 0D F2 | 	cmp	result1, #0 wz
0680c     1B FA 05 A6 |  if_e	mov	result1, #27
06810     00 FA 05 56 |  if_ne	mov	result1, #0
06814     00 FA 0D F2 | 	cmp	result1, #0 wz
06818     0C 00 90 AD |  if_e	jmp	#LR__0570
0681c     05 12 06 F6 | 	mov	arg01, #5
06820     A4 E3 BF FD | 	call	#_compile_immediate_assign
06824     10 00 90 FD | 	jmp	#LR__0571
06828                 | LR__0570
06828     20 12 06 F6 | 	mov	arg01, #32
0682c     14 E8 BF FD | 	call	#_compile_error
06830     20 FA 05 F6 | 	mov	result1, #32
06834     AC 02 90 FD | 	jmp	#LR__0576
06838                 | LR__0571
06838     41 00 00 FF 
0683c     40 E4 05 F1 | 	add	objptr, ##33344
06840     F2 12 02 FB | 	rdlong	arg01, objptr
06844     09 25 02 F6 | 	mov	local04, arg01
06848     01 24 86 F1 | 	sub	local04, #1
0684c     12 15 02 F6 | 	mov	arg02, local04
06850     01 14 66 F0 | 	shl	arg02, #1
06854     12 15 02 F1 | 	add	arg02, local04
06858     02 14 66 F0 | 	shl	arg02, #2
0685c     03 00 00 FF 
06860     00 E4 85 F1 | 	sub	objptr, ##1536
06864     F2 14 02 F1 | 	add	arg02, objptr
06868     0A 1F 02 FB | 	rdlong	local01, arg02
0686c     04 14 06 F1 | 	add	arg02, #4
06870     0A 27 02 FB | 	rdlong	local05, arg02
06874     01 12 86 F1 | 	sub	arg01, #1
06878     09 29 02 F6 | 	mov	local06, arg01
0687c     01 28 66 F0 | 	shl	local06, #1
06880     09 29 02 F1 | 	add	local06, arg01
06884     02 28 66 F0 | 	shl	local06, #2
06888     F2 28 02 F1 | 	add	local06, objptr
0688c     08 28 06 F1 | 	add	local06, #8
06890     14 13 02 FB | 	rdlong	arg01, local06
06894     13 21 02 F6 | 	mov	local02, local05
06898     09 23 02 F6 | 	mov	local03, arg01
0689c                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
0689c                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
0689c     17 22 0E F2 | 	cmp	local03, #23 wz
068a0     3E 00 00 FF 
068a4     40 E4 85 F1 | 	sub	objptr, ##31808
068a8     10 00 90 AD |  if_e	jmp	#LR__0572
068ac     22 12 06 F6 | 	mov	arg01, #34
068b0     90 E7 BF FD | 	call	#_compile_error
068b4     22 FA 05 F6 | 	mov	result1, #34
068b8     28 02 90 FD | 	jmp	#LR__0576
068bc                 | LR__0572
068bc     0F 2B 02 F6 | 	mov	local07, local01
068c0                 | ' varnum=t1.result.uresult
068c0                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
068c0     2E 00 00 FF 
068c4     08 E4 05 F1 | 	add	objptr, ##23560
068c8     F2 24 02 FB | 	rdlong	local04, objptr
068cc     03 24 66 F0 | 	shl	local04, #3
068d0     02 00 00 FF 
068d4     38 E4 85 F1 | 	sub	objptr, ##1080
068d8     F2 24 02 F1 | 	add	local04, objptr
068dc     12 13 02 FB | 	rdlong	arg01, local04
068e0     26 01 00 FF 
068e4     F9 15 06 F6 | 	mov	arg02, ##@LR__4314
068e8     2B 00 00 FF 
068ec     D0 E5 85 F1 | 	sub	objptr, ##22480
068f0     A4 EF B0 FD | 	call	#__system___string_cmp
068f4     00 FA 0D F2 | 	cmp	result1, #0 wz
068f8     10 00 90 AD |  if_e	jmp	#LR__0573
068fc     21 12 06 F6 | 	mov	arg01, #33
06900     40 E7 BF FD | 	call	#_compile_error
06904     21 FA 05 F6 | 	mov	result1, #33
06908     D8 01 90 FD | 	jmp	#LR__0576
0690c                 | LR__0573
0690c     2E 00 00 FF 
06910     08 E4 05 F1 | 	add	objptr, ##23560
06914     F2 28 02 FB | 	rdlong	local06, objptr
06918     01 28 06 F1 | 	add	local06, #1
0691c     F2 28 62 FC | 	wrlong	local06, objptr
06920     2E 00 00 FF 
06924     08 E4 85 F1 | 	sub	objptr, ##23560
06928     98 0B B0 FD | 	call	#_expr
0692c                 | ' ct+=1
0692c                 | ' expr()  ' there is "to" value pushed on the stack
0692c                 | ' if lparts(ct).part$="step" then 
0692c     2E 00 00 FF 
06930     08 E4 05 F1 | 	add	objptr, ##23560
06934     F2 24 02 FB | 	rdlong	local04, objptr
06938     03 24 66 F0 | 	shl	local04, #3
0693c     02 00 00 FF 
06940     38 E4 85 F1 | 	sub	objptr, ##1080
06944     F2 24 02 F1 | 	add	local04, objptr
06948     12 13 02 FB | 	rdlong	arg01, local04
0694c     26 01 00 FF 
06950     FC 15 06 F6 | 	mov	arg02, ##@LR__4315
06954     2B 00 00 FF 
06958     D0 E5 85 F1 | 	sub	objptr, ##22480
0695c     38 EF B0 FD | 	call	#__system___string_cmp
06960     00 FA 0D F2 | 	cmp	result1, #0 wz
06964     24 00 90 5D |  if_ne	jmp	#LR__0574
06968     2E 00 00 FF 
0696c     08 E4 05 F1 | 	add	objptr, ##23560
06970     F2 28 02 FB | 	rdlong	local06, objptr
06974     01 28 06 F1 | 	add	local06, #1
06978     F2 28 62 FC | 	wrlong	local06, objptr
0697c     2E 00 00 FF 
06980     08 E4 85 F1 | 	sub	objptr, ##23560
06984     3C 0B B0 FD | 	call	#_expr
06988     78 00 90 FD | 	jmp	#LR__0575
0698c                 | LR__0574
0698c     41 00 00 FF 
06990     40 E4 05 F1 | 	add	objptr, ##33344
06994     F2 28 02 FB | 	rdlong	local06, objptr
06998     14 27 02 F6 | 	mov	local05, local06
0699c     01 26 66 F0 | 	shl	local05, #1
069a0     14 27 02 F1 | 	add	local05, local06
069a4     02 26 66 F0 | 	shl	local05, #2
069a8     03 00 00 FF 
069ac     00 E4 85 F1 | 	sub	objptr, ##1536
069b0     F2 26 02 F1 | 	add	local05, objptr
069b4     08 26 06 F1 | 	add	local05, #8
069b8     13 39 68 FC | 	wrlong	#28, local05
069bc     03 00 00 FF 
069c0     00 E4 05 F1 | 	add	objptr, ##1536
069c4     F2 28 02 FB | 	rdlong	local06, objptr
069c8     14 27 02 F6 | 	mov	local05, local06
069cc     01 26 66 F0 | 	shl	local05, #1
069d0     14 27 02 F1 | 	add	local05, local06
069d4     02 26 66 F0 | 	shl	local05, #2
069d8     03 00 00 FF 
069dc     00 E4 85 F1 | 	sub	objptr, ##1536
069e0     F2 26 02 F1 | 	add	local05, objptr
069e4     13 03 68 FC | 	wrlong	#1, local05
069e8     03 00 00 FF 
069ec     00 E4 05 F1 | 	add	objptr, ##1536
069f0     F2 28 02 FB | 	rdlong	local06, objptr
069f4     01 28 06 F1 | 	add	local06, #1
069f8     F2 28 62 FC | 	wrlong	local06, objptr
069fc     41 00 00 FF 
06a00     40 E4 85 F1 | 	sub	objptr, ##33344
06a04                 | LR__0575
06a04     41 00 00 FF 
06a08     40 E4 05 F1 | 	add	objptr, ##33344
06a0c     F2 28 02 FB | 	rdlong	local06, objptr
06a10     14 27 02 F6 | 	mov	local05, local06
06a14     01 26 66 F0 | 	shl	local05, #1
06a18     14 27 02 F1 | 	add	local05, local06
06a1c     02 26 66 F0 | 	shl	local05, #2
06a20     03 00 00 FF 
06a24     00 E4 85 F1 | 	sub	objptr, ##1536
06a28     F2 26 02 F1 | 	add	local05, objptr
06a2c     08 26 06 F1 | 	add	local05, #8
06a30     13 39 68 FC | 	wrlong	#28, local05
06a34     03 00 00 FF 
06a38     00 E4 05 F1 | 	add	objptr, ##1536
06a3c     F2 28 02 FB | 	rdlong	local06, objptr
06a40     14 27 02 F6 | 	mov	local05, local06
06a44     01 26 66 F0 | 	shl	local05, #1
06a48     14 27 02 F1 | 	add	local05, local06
06a4c     02 26 66 F0 | 	shl	local05, #2
06a50     03 00 00 FF 
06a54     00 E4 85 F1 | 	sub	objptr, ##1536
06a58     F2 26 02 F1 | 	add	local05, objptr
06a5c     13 2B 62 FC | 	wrlong	local07, local05
06a60     03 00 00 FF 
06a64     00 E4 05 F1 | 	add	objptr, ##1536
06a68     F2 2A 02 FB | 	rdlong	local07, objptr
06a6c     01 2A 06 F1 | 	add	local07, #1
06a70     F2 2A 62 FC | 	wrlong	local07, objptr
06a74     15 29 02 F6 | 	mov	local06, local07
06a78     01 28 66 F0 | 	shl	local06, #1
06a7c     15 29 02 F1 | 	add	local06, local07
06a80     02 28 66 F0 | 	shl	local06, #2
06a84     03 00 00 FF 
06a88     00 E4 85 F1 | 	sub	objptr, ##1536
06a8c     F2 28 02 F1 | 	add	local06, objptr
06a90     08 28 06 F1 | 	add	local06, #8
06a94     14 95 68 FC | 	wrlong	#74, local06
06a98     03 00 00 FF 
06a9c     00 E4 05 F1 | 	add	objptr, ##1536
06aa0     F2 2A 02 FB | 	rdlong	local07, objptr
06aa4     15 29 02 F6 | 	mov	local06, local07
06aa8     01 28 66 F0 | 	shl	local06, #1
06aac     15 29 02 F1 | 	add	local06, local07
06ab0     02 28 66 F0 | 	shl	local06, #2
06ab4     03 00 00 FF 
06ab8     00 E4 85 F1 | 	sub	objptr, ##1536
06abc     F2 28 02 F1 | 	add	local06, objptr
06ac0     14 01 68 FC | 	wrlong	#0, local06
06ac4     03 00 00 FF 
06ac8     00 E4 05 F1 | 	add	objptr, ##1536
06acc     F2 2A 02 FB | 	rdlong	local07, objptr
06ad0     01 2A 06 F1 | 	add	local07, #1
06ad4     F2 2A 62 FC | 	wrlong	local07, objptr
06ad8     41 00 00 FF 
06adc     40 E4 85 F1 | 	sub	objptr, ##33344
06ae0                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
06ae0                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
06ae0                 | ' 
06ae0                 | ' 
06ae0                 | ' return 0
06ae0     00 FA 05 F6 | 	mov	result1, #0
06ae4                 | LR__0576
06ae4     A7 F0 03 F6 | 	mov	ptra, fp
06ae8     B2 00 A0 FD | 	call	#popregs_
06aec                 | _compile_for_ret
06aec     2D 00 64 FD | 	ret
06af0                 | 
06af0                 | ' 
06af0                 | ' 
06af0                 | ' sub do_for()
06af0                 | _do_for
06af0     05 4A 05 F6 | 	mov	COUNT_, #5
06af4     A8 00 A0 FD | 	call	#pushregs_
06af8     50 00 00 FF 
06afc     9C E5 05 F1 | 	add	objptr, ##41372
06b00     F2 24 02 FB | 	rdlong	local04, objptr
06b04     01 24 06 F1 | 	add	local04, #1
06b08     F2 24 62 FC | 	wrlong	local04, objptr
06b0c     50 00 00 FF 
06b10     9C E5 85 F1 | 	sub	objptr, ##41372
06b14     5C 1E B0 FD | 	call	#_pop
06b18     FD 1E 02 F6 | 	mov	local01, result1
06b1c     FE 20 02 F6 | 	mov	local02, result2
06b20     FF 22 02 F6 | 	mov	local03, result3
06b24     50 00 00 FF 
06b28     9C E5 05 F1 | 	add	objptr, ##41372
06b2c     F2 24 02 FB | 	rdlong	local04, objptr
06b30     12 27 02 F6 | 	mov	local05, local04
06b34     02 26 66 F0 | 	shl	local05, #2
06b38     12 27 02 F1 | 	add	local05, local04
06b3c     02 26 66 F0 | 	shl	local05, #2
06b40     07 00 00 FF 
06b44     40 E5 85 F1 | 	sub	objptr, ##3904
06b48     F2 26 02 F1 | 	add	local05, objptr
06b4c     08 26 06 F1 | 	add	local05, #8
06b50     13 1F 62 FC | 	wrlong	local01, local05
06b54     49 00 00 FF 
06b58     5C E4 85 F1 | 	sub	objptr, ##37468
06b5c     14 1E B0 FD | 	call	#_pop
06b60     FD 1E 02 F6 | 	mov	local01, result1
06b64     FE 20 02 F6 | 	mov	local02, result2
06b68     FF 22 02 F6 | 	mov	local03, result3
06b6c     50 00 00 FF 
06b70     9C E5 05 F1 | 	add	objptr, ##41372
06b74     F2 24 02 FB | 	rdlong	local04, objptr
06b78     12 27 02 F6 | 	mov	local05, local04
06b7c     02 26 66 F0 | 	shl	local05, #2
06b80     12 27 02 F1 | 	add	local05, local04
06b84     02 26 66 F0 | 	shl	local05, #2
06b88     07 00 00 FF 
06b8c     40 E5 85 F1 | 	sub	objptr, ##3904
06b90     F2 26 02 F1 | 	add	local05, objptr
06b94     0C 26 06 F1 | 	add	local05, #12
06b98     13 1F 62 FC | 	wrlong	local01, local05
06b9c     49 00 00 FF 
06ba0     5C E4 85 F1 | 	sub	objptr, ##37468
06ba4     CC 1D B0 FD | 	call	#_pop
06ba8     FD 1E 02 F6 | 	mov	local01, result1
06bac     FE 20 02 F6 | 	mov	local02, result2
06bb0     FF 22 02 F6 | 	mov	local03, result3
06bb4     50 00 00 FF 
06bb8     9C E5 05 F1 | 	add	objptr, ##41372
06bbc     F2 24 02 FB | 	rdlong	local04, objptr
06bc0     12 27 02 F6 | 	mov	local05, local04
06bc4     02 26 66 F0 | 	shl	local05, #2
06bc8     12 27 02 F1 | 	add	local05, local04
06bcc     02 26 66 F0 | 	shl	local05, #2
06bd0     07 00 00 FF 
06bd4     40 E5 85 F1 | 	sub	objptr, ##3904
06bd8     F2 26 02 F1 | 	add	local05, objptr
06bdc     10 26 06 F1 | 	add	local05, #16
06be0     13 1F 62 FC | 	wrlong	local01, local05
06be4                 | ' fortop+=1
06be4                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
06be4                 | ' 'if i> maxfor then printerror(36) : return
06be4                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
06be4                 | ' t1=pop() : fortable(fortop).stepval=t1.result.iresult
06be4                 | ' t1=pop() : fortable(fortop).endval=t1.result.iresult
06be4                 | ' if compiledline(lineptr_e).result_type=token_end then
06be4     08 00 00 FF 
06be8     18 E4 85 F1 | 	sub	objptr, ##4120
06bec     F2 1E 02 FB | 	rdlong	local01, objptr
06bf0     0F 27 02 F6 | 	mov	local05, local01
06bf4     01 26 66 F0 | 	shl	local05, #1
06bf8     0F 27 02 F1 | 	add	local05, local01
06bfc     02 26 66 F0 | 	shl	local05, #2
06c00     03 00 00 FF 
06c04     04 E4 85 F1 | 	sub	objptr, ##1540
06c08     F2 26 02 F1 | 	add	local05, objptr
06c0c     08 26 06 F1 | 	add	local05, #8
06c10     13 27 02 FB | 	rdlong	local05, local05
06c14     FE 27 0E F2 | 	cmp	local05, #510 wz
06c18     3E 00 00 FF 
06c1c     40 E4 85 F1 | 	sub	objptr, ##31808
06c20     70 00 90 5D |  if_ne	jmp	#LR__0580
06c24     50 00 00 FF 
06c28     9C E5 05 F1 | 	add	objptr, ##41372
06c2c     F2 1E 02 FB | 	rdlong	local01, objptr
06c30     0F 27 02 F6 | 	mov	local05, local01
06c34     02 26 66 F0 | 	shl	local05, #2
06c38     0F 27 02 F1 | 	add	local05, local01
06c3c     02 26 66 F0 | 	shl	local05, #2
06c40     07 00 00 FF 
06c44     40 E5 85 F1 | 	sub	objptr, ##3904
06c48     F2 26 02 F1 | 	add	local05, objptr
06c4c     07 00 00 FF 
06c50     18 E5 05 F1 | 	add	objptr, ##3864
06c54     F2 1E 02 FB | 	rdlong	local01, objptr
06c58     13 1F 62 FC | 	wrlong	local01, local05
06c5c     28 E4 05 F1 | 	add	objptr, #40
06c60     F2 1E 02 FB | 	rdlong	local01, objptr
06c64     0F 27 02 F6 | 	mov	local05, local01
06c68     02 26 66 F0 | 	shl	local05, #2
06c6c     0F 27 02 F1 | 	add	local05, local01
06c70     02 26 66 F0 | 	shl	local05, #2
06c74     07 00 00 FF 
06c78     40 E5 85 F1 | 	sub	objptr, ##3904
06c7c     F2 26 02 F1 | 	add	local05, objptr
06c80     04 26 06 F1 | 	add	local05, #4
06c84     13 01 68 FC | 	wrlong	#0, local05
06c88     49 00 00 FF 
06c8c     5C E4 85 F1 | 	sub	objptr, ##37468
06c90     7C 00 90 FD | 	jmp	#LR__0581
06c94                 | LR__0580
06c94     50 00 00 FF 
06c98     9C E5 05 F1 | 	add	objptr, ##41372
06c9c     F2 1E 02 FB | 	rdlong	local01, objptr
06ca0     0F 27 02 F6 | 	mov	local05, local01
06ca4     02 26 66 F0 | 	shl	local05, #2
06ca8     0F 27 02 F1 | 	add	local05, local01
06cac     02 26 66 F0 | 	shl	local05, #2
06cb0     07 00 00 FF 
06cb4     40 E5 85 F1 | 	sub	objptr, ##3904
06cb8     F2 26 02 F1 | 	add	local05, objptr
06cbc     07 00 00 FF 
06cc0     20 E5 05 F1 | 	add	objptr, ##3872
06cc4     F2 1E 02 FB | 	rdlong	local01, objptr
06cc8     13 1F 62 FC | 	wrlong	local01, local05
06ccc     20 E4 05 F1 | 	add	objptr, #32
06cd0     F2 1E 02 FB | 	rdlong	local01, objptr
06cd4     0F 27 02 F6 | 	mov	local05, local01
06cd8     02 26 66 F0 | 	shl	local05, #2
06cdc     0F 27 02 F1 | 	add	local05, local01
06ce0     02 26 66 F0 | 	shl	local05, #2
06ce4     07 00 00 FF 
06ce8     40 E5 85 F1 | 	sub	objptr, ##3904
06cec     F2 26 02 F1 | 	add	local05, objptr
06cf0     08 00 00 FF 
06cf4     18 E4 85 F1 | 	sub	objptr, ##4120
06cf8     F2 1E 02 FB | 	rdlong	local01, objptr
06cfc     41 00 00 FF 
06d00     44 E4 85 F1 | 	sub	objptr, ##33348
06d04     01 1E 06 F1 | 	add	local01, #1
06d08     04 26 06 F1 | 	add	local05, #4
06d0c     13 1F 62 FC | 	wrlong	local01, local05
06d10                 | LR__0581
06d10     A7 F0 03 F6 | 	mov	ptra, fp
06d14     B2 00 A0 FD | 	call	#popregs_
06d18                 | _do_for_ret
06d18     2D 00 64 FD | 	ret
06d1c                 | 
06d1c                 | ' 
06d1c                 | ' ' now do_next todo
06d1c                 | ' 
06d1c                 | ' sub do_next()
06d1c                 | _do_next
06d1c     04 4A 05 F6 | 	mov	COUNT_, #4
06d20     A8 00 A0 FD | 	call	#pushregs_
06d24     4C 1C B0 FD | 	call	#_pop
06d28     FD 1E 02 F6 | 	mov	local01, result1
06d2c     FE 20 02 F6 | 	mov	local02, result2
06d30     FF 22 02 F6 | 	mov	local03, result3
06d34                 | ' 
06d34                 | ' t1=pop() :varnum=t1.result.uresult
06d34                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
06d34     50 00 00 FF 
06d38     9C E5 05 F1 | 	add	objptr, ##41372
06d3c     F2 12 02 FB | 	rdlong	arg01, objptr
06d40     09 25 02 F6 | 	mov	local04, arg01
06d44     02 24 66 F0 | 	shl	local04, #2
06d48     09 25 02 F1 | 	add	local04, arg01
06d4c     02 24 66 F0 | 	shl	local04, #2
06d50     07 00 00 FF 
06d54     40 E5 85 F1 | 	sub	objptr, ##3904
06d58     F2 24 02 F1 | 	add	local04, objptr
06d5c     08 24 06 F1 | 	add	local04, #8
06d60     12 25 02 FB | 	rdlong	local04, local04
06d64     0F 25 0A F2 | 	cmp	local04, local01 wz
06d68     49 00 00 FF 
06d6c     5C E4 85 F1 | 	sub	objptr, ##37468
06d70     0C 00 90 AD |  if_e	jmp	#LR__0590
06d74     25 12 06 F6 | 	mov	arg01, #37
06d78     F8 B5 B0 FD | 	call	#_printerror
06d7c     28 02 90 FD | 	jmp	#LR__0594
06d80                 | LR__0590
06d80     50 00 00 FF 
06d84     9C E5 05 F1 | 	add	objptr, ##41372
06d88     F2 12 02 FB | 	rdlong	arg01, objptr
06d8c     09 25 02 F6 | 	mov	local04, arg01
06d90     02 24 66 F0 | 	shl	local04, #2
06d94     09 25 02 F1 | 	add	local04, arg01
06d98     02 24 66 F0 | 	shl	local04, #2
06d9c     07 00 00 FF 
06da0     40 E5 85 F1 | 	sub	objptr, ##3904
06da4     F2 24 02 F1 | 	add	local04, objptr
06da8     0C 24 06 F1 | 	add	local04, #12
06dac     12 25 02 FB | 	rdlong	local04, local04
06db0     0F 13 02 F6 | 	mov	arg01, local01
06db4     04 12 66 F0 | 	shl	arg01, #4
06db8     3D 00 00 FF 
06dbc     90 E4 85 F1 | 	sub	objptr, ##31376
06dc0     F2 12 02 F1 | 	add	arg01, objptr
06dc4     0F FF 01 F6 | 	mov	result3, local01
06dc8     04 FE 65 F0 | 	shl	result3, #4
06dcc     F2 FE 01 F1 | 	add	result3, objptr
06dd0     04 FE 05 F1 | 	add	result3, #4
06dd4     FF FE 01 FB | 	rdlong	result3, result3
06dd8     12 FF 01 F1 | 	add	result3, local04
06ddc     04 12 06 F1 | 	add	arg01, #4
06de0     09 FF 61 FC | 	wrlong	result3, arg01
06de4                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
06de4                 | ' if fortable(fortop).stepval>=0 then
06de4     44 00 00 FF 
06de8     D0 E5 05 F1 | 	add	objptr, ##35280
06dec     F2 12 02 FB | 	rdlong	arg01, objptr
06df0     09 25 02 F6 | 	mov	local04, arg01
06df4     02 24 66 F0 | 	shl	local04, #2
06df8     09 25 02 F1 | 	add	local04, arg01
06dfc     02 24 66 F0 | 	shl	local04, #2
06e00     07 00 00 FF 
06e04     40 E5 85 F1 | 	sub	objptr, ##3904
06e08     F2 24 02 F1 | 	add	local04, objptr
06e0c     0C 24 06 F1 | 	add	local04, #12
06e10     12 25 02 FB | 	rdlong	local04, local04
06e14     00 24 56 F2 | 	cmps	local04, #0 wc
06e18     49 00 00 FF 
06e1c     5C E4 85 F1 | 	sub	objptr, ##37468
06e20     78 00 90 CD |  if_b	jmp	#LR__0591
06e24                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
06e24     04 1E 66 F0 | 	shl	local01, #4
06e28     0B 00 00 FF 
06e2c     CC E5 05 F1 | 	add	objptr, ##6092
06e30     F2 1E 02 F1 | 	add	local01, objptr
06e34     44 00 00 FF 
06e38     D0 E5 05 F1 | 	add	objptr, ##35280
06e3c     F2 24 02 FB | 	rdlong	local04, objptr
06e40     12 13 02 F6 | 	mov	arg01, local04
06e44     02 12 66 F0 | 	shl	arg01, #2
06e48     12 13 02 F1 | 	add	arg01, local04
06e4c     02 12 66 F0 | 	shl	arg01, #2
06e50     07 00 00 FF 
06e54     40 E5 85 F1 | 	sub	objptr, ##3904
06e58     F2 12 02 F1 | 	add	arg01, objptr
06e5c     04 1E 06 F1 | 	add	local01, #4
06e60     0F 25 02 FB | 	rdlong	local04, local01
06e64     10 12 06 F1 | 	add	arg01, #16
06e68     09 13 02 FB | 	rdlong	arg01, arg01
06e6c     09 25 5A F2 | 	cmps	local04, arg01 wcz
06e70     49 00 00 FF 
06e74     5C E4 85 F1 | 	sub	objptr, ##37468
06e78     9C 00 90 ED |  if_be	jmp	#LR__0593
06e7c     50 00 00 FF 
06e80     9C E5 05 F1 | 	add	objptr, ##41372
06e84     F2 24 02 FB | 	rdlong	local04, objptr
06e88     01 24 86 F1 | 	sub	local04, #1
06e8c     F2 24 62 FC | 	wrlong	local04, objptr
06e90     50 00 00 FF 
06e94     9C E5 85 F1 | 	sub	objptr, ##41372
06e98     0C 01 90 FD | 	jmp	#LR__0594
06e9c                 | LR__0591
06e9c                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
06e9c     0F 13 02 F6 | 	mov	arg01, local01
06ea0     04 12 66 F0 | 	shl	arg01, #4
06ea4     0B 00 00 FF 
06ea8     CC E5 05 F1 | 	add	objptr, ##6092
06eac     F2 12 02 F1 | 	add	arg01, objptr
06eb0     44 00 00 FF 
06eb4     D0 E5 05 F1 | 	add	objptr, ##35280
06eb8     F2 24 02 FB | 	rdlong	local04, objptr
06ebc     12 1F 02 F6 | 	mov	local01, local04
06ec0     02 1E 66 F0 | 	shl	local01, #2
06ec4     12 1F 02 F1 | 	add	local01, local04
06ec8     02 1E 66 F0 | 	shl	local01, #2
06ecc     07 00 00 FF 
06ed0     40 E5 85 F1 | 	sub	objptr, ##3904
06ed4     F2 1E 02 F1 | 	add	local01, objptr
06ed8     04 12 06 F1 | 	add	arg01, #4
06edc     09 13 02 FB | 	rdlong	arg01, arg01
06ee0     10 1E 06 F1 | 	add	local01, #16
06ee4     0F 1F 02 FB | 	rdlong	local01, local01
06ee8     0F 13 52 F2 | 	cmps	arg01, local01 wc
06eec     49 00 00 FF 
06ef0     5C E4 85 F1 | 	sub	objptr, ##37468
06ef4     20 00 90 3D |  if_ae	jmp	#LR__0592
06ef8     50 00 00 FF 
06efc     9C E5 05 F1 | 	add	objptr, ##41372
06f00     F2 24 02 FB | 	rdlong	local04, objptr
06f04     01 24 86 F1 | 	sub	local04, #1
06f08     F2 24 62 FC | 	wrlong	local04, objptr
06f0c     50 00 00 FF 
06f10     9C E5 85 F1 | 	sub	objptr, ##41372
06f14     90 00 90 FD | 	jmp	#LR__0594
06f18                 | LR__0592
06f18                 | LR__0593
06f18     50 00 00 FF 
06f1c     9C E5 05 F1 | 	add	objptr, ##41372
06f20     F2 1E 02 FB | 	rdlong	local01, objptr
06f24     0F 25 02 F6 | 	mov	local04, local01
06f28     02 24 66 F0 | 	shl	local04, #2
06f2c     0F 25 02 F1 | 	add	local04, local01
06f30     02 24 66 F0 | 	shl	local04, #2
06f34     07 00 00 FF 
06f38     40 E5 85 F1 | 	sub	objptr, ##3904
06f3c     F2 24 02 F1 | 	add	local04, objptr
06f40     12 25 02 FB | 	rdlong	local04, local04
06f44     07 00 00 FF 
06f48     18 E5 05 F1 | 	add	objptr, ##3864
06f4c     F2 24 62 FC | 	wrlong	local04, objptr
06f50     28 E4 05 F1 | 	add	objptr, #40
06f54     F2 1E 02 FB | 	rdlong	local01, objptr
06f58     0F 25 02 F6 | 	mov	local04, local01
06f5c     02 24 66 F0 | 	shl	local04, #2
06f60     0F 25 02 F1 | 	add	local04, local01
06f64     02 24 66 F0 | 	shl	local04, #2
06f68     07 00 00 FF 
06f6c     40 E5 85 F1 | 	sub	objptr, ##3904
06f70     F2 24 02 F1 | 	add	local04, objptr
06f74     04 24 06 F1 | 	add	local04, #4
06f78     12 25 02 FB | 	rdlong	local04, local04
06f7c     07 00 00 FF 
06f80     1C E5 05 F1 | 	add	objptr, ##3868
06f84     F2 24 62 FC | 	wrlong	local04, objptr
06f88     0F 00 00 FF 
06f8c     38 E5 85 F1 | 	sub	objptr, ##7992
06f90     F2 24 02 FB | 	rdlong	local04, objptr
06f94     01 24 86 F1 | 	sub	local04, #1
06f98     04 E4 05 F1 | 	add	objptr, #4
06f9c     F2 24 62 FC | 	wrlong	local04, objptr
06fa0     41 00 00 FF 
06fa4     44 E4 85 F1 | 	sub	objptr, ##33348
06fa8                 | LR__0594
06fa8     A7 F0 03 F6 | 	mov	ptra, fp
06fac     B2 00 A0 FD | 	call	#popregs_
06fb0                 | _do_next_ret
06fb0     2D 00 64 FD | 	ret
06fb4                 | 
06fb4                 | ' 
06fb4                 | ' 
06fb4                 | ' function compile_next() as ulong
06fb4                 | _compile_next
06fb4     04 4A 05 F6 | 	mov	COUNT_, #4
06fb8     A8 00 A0 FD | 	call	#pushregs_
06fbc     2E 00 00 FF 
06fc0     08 E4 05 F1 | 	add	objptr, ##23560
06fc4     F2 12 02 FB | 	rdlong	arg01, objptr
06fc8     03 12 66 F0 | 	shl	arg01, #3
06fcc     02 00 00 FF 
06fd0     38 E4 85 F1 | 	sub	objptr, ##1080
06fd4     F2 12 02 F1 | 	add	arg01, objptr
06fd8     09 1F 02 FB | 	rdlong	local01, arg01
06fdc                 | ' 
06fdc                 | ' varname$=lparts(ct).part$ 
06fdc                 | ' 'suffix$=right$(varname$,1)
06fdc                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
06fdc                 | ' if varnum=0 then compile_error(35)  : return 35
06fdc     04 E4 85 F1 | 	sub	objptr, #4
06fe0     F2 14 0A FB | 	rdlong	arg02, objptr wz
06fe4     2B 00 00 FF 
06fe8     CC E5 85 F1 | 	sub	objptr, ##22476
06fec     10 00 90 5D |  if_ne	jmp	#LR__0600
06ff0     23 12 06 F6 | 	mov	arg01, #35
06ff4     4C E0 BF FD | 	call	#_compile_error
06ff8     23 FA 05 F6 | 	mov	result1, #35
06ffc     58 01 90 FD | 	jmp	#LR__0604
07000                 | LR__0600
07000     01 20 66 F6 | 	neg	local02, #1
07004                 | ' j=-1
07004                 | ' for i=0 to varnum-1
07004     00 22 06 F6 | 	mov	local03, #0
07008     2B 00 00 FF 
0700c     CC E5 05 F1 | 	add	objptr, ##22476
07010     F2 24 02 FB | 	rdlong	local04, objptr
07014     2B 00 00 FF 
07018     CC E5 85 F1 | 	sub	objptr, ##22476
0701c                 | LR__0601
0701c     12 23 12 F2 | 	cmp	local03, local04 wc
07020     38 00 90 3D |  if_ae	jmp	#LR__0602
07024                 | '   if variables(i).name=varname$ then j=i : exit
07024     11 15 02 F6 | 	mov	arg02, local03
07028     04 14 66 F0 | 	shl	arg02, #4
0702c     0B 00 00 FF 
07030     CC E5 05 F1 | 	add	objptr, ##6092
07034     F2 14 02 F1 | 	add	arg02, objptr
07038     0A 13 02 FB | 	rdlong	arg01, arg02
0703c     0F 15 02 F6 | 	mov	arg02, local01
07040     0B 00 00 FF 
07044     CC E5 85 F1 | 	sub	objptr, ##6092
07048     4C E8 B0 FD | 	call	#__system___string_cmp
0704c     00 FA 0D F2 | 	cmp	result1, #0 wz
07050     11 21 02 A6 |  if_e	mov	local02, local03
07054     01 22 06 51 |  if_ne	add	local03, #1
07058     C0 FF 9F 5D |  if_ne	jmp	#LR__0601
0705c                 | LR__0602
0705c                 | ' if j=-1 then compile_error(35) : return 35
0705c     FF FF 7F FF 
07060     FF 21 0E F2 | 	cmp	local02, ##-1 wz
07064     10 00 90 5D |  if_ne	jmp	#LR__0603
07068     23 12 06 F6 | 	mov	arg01, #35
0706c     D4 DF BF FD | 	call	#_compile_error
07070     23 FA 05 F6 | 	mov	result1, #35
07074     E0 00 90 FD | 	jmp	#LR__0604
07078                 | LR__0603
07078     41 00 00 FF 
0707c     40 E4 05 F1 | 	add	objptr, ##33344
07080     F2 24 02 FB | 	rdlong	local04, objptr
07084     12 23 02 F6 | 	mov	local03, local04
07088     01 22 66 F0 | 	shl	local03, #1
0708c     12 23 02 F1 | 	add	local03, local04
07090     02 22 66 F0 | 	shl	local03, #2
07094     03 00 00 FF 
07098     00 E4 85 F1 | 	sub	objptr, ##1536
0709c     F2 22 02 F1 | 	add	local03, objptr
070a0     08 22 06 F1 | 	add	local03, #8
070a4     11 39 68 FC | 	wrlong	#28, local03
070a8     03 00 00 FF 
070ac     00 E4 05 F1 | 	add	objptr, ##1536
070b0     F2 24 02 FB | 	rdlong	local04, objptr
070b4     12 23 02 F6 | 	mov	local03, local04
070b8     01 22 66 F0 | 	shl	local03, #1
070bc     12 23 02 F1 | 	add	local03, local04
070c0     02 22 66 F0 | 	shl	local03, #2
070c4     03 00 00 FF 
070c8     00 E4 85 F1 | 	sub	objptr, ##1536
070cc     F2 22 02 F1 | 	add	local03, objptr
070d0     11 21 62 FC | 	wrlong	local02, local03
070d4     03 00 00 FF 
070d8     00 E4 05 F1 | 	add	objptr, ##1536
070dc     F2 24 02 FB | 	rdlong	local04, objptr
070e0     01 24 06 F1 | 	add	local04, #1
070e4     F2 24 62 FC | 	wrlong	local04, objptr
070e8     12 23 02 F6 | 	mov	local03, local04
070ec     01 22 66 F0 | 	shl	local03, #1
070f0     12 23 02 F1 | 	add	local03, local04
070f4     02 22 66 F0 | 	shl	local03, #2
070f8     03 00 00 FF 
070fc     00 E4 85 F1 | 	sub	objptr, ##1536
07100     F2 22 02 F1 | 	add	local03, objptr
07104     08 22 06 F1 | 	add	local03, #8
07108     11 97 68 FC | 	wrlong	#75, local03
0710c     03 00 00 FF 
07110     00 E4 05 F1 | 	add	objptr, ##1536
07114     F2 24 02 FB | 	rdlong	local04, objptr
07118     12 23 02 F6 | 	mov	local03, local04
0711c     01 22 66 F0 | 	shl	local03, #1
07120     12 23 02 F1 | 	add	local03, local04
07124     02 22 66 F0 | 	shl	local03, #2
07128     03 00 00 FF 
0712c     00 E4 85 F1 | 	sub	objptr, ##1536
07130     F2 22 02 F1 | 	add	local03, objptr
07134     11 01 68 FC | 	wrlong	#0, local03
07138     03 00 00 FF 
0713c     00 E4 05 F1 | 	add	objptr, ##1536
07140     F2 24 02 FB | 	rdlong	local04, objptr
07144     01 24 06 F1 | 	add	local04, #1
07148     F2 24 62 FC | 	wrlong	local04, objptr
0714c     41 00 00 FF 
07150     40 E4 85 F1 | 	sub	objptr, ##33344
07154                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
07154                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
07154                 | ' return 0
07154     00 FA 05 F6 | 	mov	result1, #0
07158                 | LR__0604
07158     A7 F0 03 F6 | 	mov	ptra, fp
0715c     B2 00 A0 FD | 	call	#popregs_
07160                 | _compile_next_ret
07160     2D 00 64 FD | 	ret
07164                 | 
07164                 | ' 
07164                 | ' 
07164                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
07164                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
07164                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
07164                 | ' 
07164                 | ' 
07164                 | ' function compile_goto( ) as ulong
07164                 | _compile_goto
07164     03 4A 05 F6 | 	mov	COUNT_, #3
07168     A8 00 A0 FD | 	call	#pushregs_
0716c     28 F0 07 F1 | 	add	ptra, #40
07170                 | ' 
07170                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
07170     2E 00 00 FF 
07174     08 E4 05 F1 | 	add	objptr, ##23560
07178     F2 16 02 FB | 	rdlong	arg03, objptr
0717c     03 16 66 F0 | 	shl	arg03, #3
07180     02 00 00 FF 
07184     38 E4 85 F1 | 	sub	objptr, ##1080
07188     F2 16 02 F1 | 	add	arg03, objptr
0718c     04 16 06 F1 | 	add	arg03, #4
07190     0B 17 02 FB | 	rdlong	arg03, arg03
07194     01 00 00 FF 
07198     00 16 0E F2 | 	cmp	arg03, ##512 wz
0719c     2B 00 00 FF 
071a0     D0 E5 85 F1 | 	sub	objptr, ##22480
071a4     CC 02 90 5D |  if_ne	jmp	#LR__0615
071a8     2E 00 00 FF 
071ac     08 E4 05 F1 | 	add	objptr, ##23560
071b0     F2 16 02 FB | 	rdlong	arg03, objptr
071b4     01 16 06 F1 | 	add	arg03, #1
071b8     03 16 66 F0 | 	shl	arg03, #3
071bc     02 00 00 FF 
071c0     38 E4 85 F1 | 	sub	objptr, ##1080
071c4     F2 16 02 F1 | 	add	arg03, objptr
071c8     04 16 06 F1 | 	add	arg03, #4
071cc     0B 17 02 FB | 	rdlong	arg03, arg03
071d0     FE 17 0E F2 | 	cmp	arg03, #510 wz
071d4     2B 00 00 FF 
071d8     D0 E5 85 F1 | 	sub	objptr, ##22480
071dc     94 02 90 5D |  if_ne	jmp	#LR__0615
071e0     2E 00 00 FF 
071e4     08 E4 05 F1 | 	add	objptr, ##23560
071e8     F2 16 02 FB | 	rdlong	arg03, objptr
071ec     03 16 66 F0 | 	shl	arg03, #3
071f0     02 00 00 FF 
071f4     38 E4 85 F1 | 	sub	objptr, ##1080
071f8     F2 16 02 F1 | 	add	arg03, objptr
071fc     0B 13 02 FB | 	rdlong	arg01, arg03
07200     00 14 06 F6 | 	mov	arg02, #0
07204     2B 00 00 FF 
07208     D0 E5 85 F1 | 	sub	objptr, ##22480
0720c     EC 16 B1 FD | 	call	#__system____builtin_atoi
07210     04 4E 05 F1 | 	add	fp, #4
07214     A7 FA 61 FC | 	wrlong	result1, fp
07218     41 00 00 FF 
0721c     40 E4 05 F1 | 	add	objptr, ##33344
07220     F2 1E 02 FB | 	rdlong	local01, objptr
07224     0F 21 02 F6 | 	mov	local02, local01
07228     01 20 66 F0 | 	shl	local02, #1
0722c     0F 21 02 F1 | 	add	local02, local01
07230     02 20 66 F0 | 	shl	local02, #2
07234     03 00 00 FF 
07238     00 E4 85 F1 | 	sub	objptr, ##1536
0723c     F2 20 02 F1 | 	add	local02, objptr
07240     08 20 06 F1 | 	add	local02, #8
07244     10 9D 68 FC | 	wrlong	#78, local02
07248     03 00 00 FF 
0724c     08 E4 05 F1 | 	add	objptr, ##1544
07250     F2 22 02 FB | 	rdlong	local03, objptr
07254     41 00 00 FF 
07258     48 E4 85 F1 | 	sub	objptr, ##33352
0725c     04 4E 05 F1 | 	add	fp, #4
07260     A7 22 62 FC | 	wrlong	local03, fp
07264     08 4E 85 F1 | 	sub	fp, #8
07268                 | ' 
07268                 | '   gotoline=val%(lparts(ct).part$) 
07268                 | '   compiledline(lineptr).result_type=token_fast_goto
07268                 | ' ' now find a pointer to goto
07268                 | '   gotoptr=programstart
07268                 | '   do
07268                 | LR__0610
07268     10 4E 05 F1 | 	add	fp, #16
0726c     A7 12 02 F6 | 	mov	arg01, fp
07270     08 4E 85 F1 | 	sub	fp, #8
07274     A7 14 02 FB | 	rdlong	arg02, fp
07278     08 4E 85 F1 | 	sub	fp, #8
0727c     18 16 06 F6 | 	mov	arg03, #24
07280     0B 00 00 FF 
07284     C0 E4 05 F1 | 	add	objptr, ##5824
07288     F8 DA B0 FD | 	call	#_psram_spin2_read1
0728c     0B 00 00 FF 
07290     C0 E4 85 F1 | 	sub	objptr, ##5824
07294                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
07294                 | '     if gotoheader(0)<>$FFFFFFFF then
07294     10 4E 05 F1 | 	add	fp, #16
07298     A7 22 02 FB | 	rdlong	local03, fp
0729c     10 4E 85 F1 | 	sub	fp, #16
072a0     FF FF 7F FF 
072a4     FF 23 0E F2 | 	cmp	local03, ##-1 wz
072a8     24 00 90 AD |  if_e	jmp	#LR__0611
072ac     08 4E 05 F1 | 	add	fp, #8
072b0     A7 22 02 FB | 	rdlong	local03, fp
072b4     04 4E 05 F1 | 	add	fp, #4
072b8     A7 22 62 FC | 	wrlong	local03, fp
072bc     18 4E 05 F1 | 	add	fp, #24
072c0     A7 22 02 FB | 	rdlong	local03, fp
072c4     1C 4E 85 F1 | 	sub	fp, #28
072c8     A7 22 62 FC | 	wrlong	local03, fp
072cc     08 4E 85 F1 | 	sub	fp, #8
072d0                 | LR__0611
072d0     24 4E 05 F1 | 	add	fp, #36
072d4     A7 22 02 FB | 	rdlong	local03, fp
072d8     24 4E 85 F1 | 	sub	fp, #36
072dc     FF FF 3F FF 
072e0     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
072e4     10 4E 05 51 |  if_ne	add	fp, #16
072e8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
072ec     10 4E 85 51 |  if_ne	sub	fp, #16
072f0     FF FF 7F 5F 
072f4     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
072f8     1C 00 90 AD |  if_e	jmp	#LR__0612
072fc     10 4E 05 F1 | 	add	fp, #16
07300     A7 22 02 FB | 	rdlong	local03, fp
07304     0C 4E 85 F1 | 	sub	fp, #12
07308     A7 20 02 FB | 	rdlong	local02, fp
0730c     04 4E 85 F1 | 	sub	fp, #4
07310     10 23 0A F2 | 	cmp	local03, local02 wz
07314     50 FF 9F 5D |  if_ne	jmp	#LR__0610
07318                 | LR__0612
07318                 | '   if gotoheader(0)=gotoline then
07318     10 4E 05 F1 | 	add	fp, #16
0731c     A7 22 02 FB | 	rdlong	local03, fp
07320     0C 4E 85 F1 | 	sub	fp, #12
07324     A7 1E 02 FB | 	rdlong	local01, fp
07328     04 4E 85 F1 | 	sub	fp, #4
0732c     0F 23 0A F2 | 	cmp	local03, local01 wz
07330     7C 00 90 5D |  if_ne	jmp	#LR__0613
07334     41 00 00 FF 
07338     40 E4 05 F1 | 	add	objptr, ##33344
0733c     F2 1E 02 FB | 	rdlong	local01, objptr
07340     0F 21 02 F6 | 	mov	local02, local01
07344     01 20 66 F0 | 	shl	local02, #1
07348     0F 21 02 F1 | 	add	local02, local01
0734c     02 20 66 F0 | 	shl	local02, #2
07350     03 00 00 FF 
07354     00 E4 85 F1 | 	sub	objptr, ##1536
07358     F2 20 02 F1 | 	add	local02, objptr
0735c     0C 4E 05 F1 | 	add	fp, #12
07360     A7 22 02 FB | 	rdlong	local03, fp
07364     10 23 62 FC | 	wrlong	local03, local02
07368     03 00 00 FF 
0736c     00 E4 05 F1 | 	add	objptr, ##1536
07370     F2 1E 02 FB | 	rdlong	local01, objptr
07374     0F 21 02 F6 | 	mov	local02, local01
07378     01 20 66 F0 | 	shl	local02, #1
0737c     0F 21 02 F1 | 	add	local02, local01
07380     02 20 66 F0 | 	shl	local02, #2
07384     03 00 00 FF 
07388     00 E4 85 F1 | 	sub	objptr, ##1536
0738c     F2 20 02 F1 | 	add	local02, objptr
07390     08 4E 85 F1 | 	sub	fp, #8
07394     A7 22 02 FB | 	rdlong	local03, fp
07398     04 4E 85 F1 | 	sub	fp, #4
0739c     04 20 06 F1 | 	add	local02, #4
073a0     10 23 62 FC | 	wrlong	local03, local02
073a4     3E 00 00 FF 
073a8     40 E4 85 F1 | 	sub	objptr, ##31808
073ac     A4 00 90 FD | 	jmp	#LR__0614
073b0                 | LR__0613
073b0     41 00 00 FF 
073b4     40 E4 05 F1 | 	add	objptr, ##33344
073b8     F2 1E 02 FB | 	rdlong	local01, objptr
073bc     0F 21 02 F6 | 	mov	local02, local01
073c0     01 20 66 F0 | 	shl	local02, #1
073c4     0F 21 02 F1 | 	add	local02, local01
073c8     02 20 66 F0 | 	shl	local02, #2
073cc     03 00 00 FF 
073d0     00 E4 85 F1 | 	sub	objptr, ##1536
073d4     F2 20 02 F1 | 	add	local02, objptr
073d8     00 00 C0 FF 
073dc     10 01 68 FC | 	wrlong	##-2147483648, local02
073e0     03 00 00 FF 
073e4     00 E4 05 F1 | 	add	objptr, ##1536
073e8     F2 1E 02 FB | 	rdlong	local01, objptr
073ec     0F 21 02 F6 | 	mov	local02, local01
073f0     01 20 66 F0 | 	shl	local02, #1
073f4     0F 21 02 F1 | 	add	local02, local01
073f8     02 20 66 F0 | 	shl	local02, #2
073fc     03 00 00 FF 
07400     00 E4 85 F1 | 	sub	objptr, ##1536
07404     F2 20 02 F1 | 	add	local02, objptr
07408     04 4E 05 F1 | 	add	fp, #4
0740c     A7 22 02 FB | 	rdlong	local03, fp
07410     04 4E 85 F1 | 	sub	fp, #4
07414     04 20 06 F1 | 	add	local02, #4
07418     10 23 62 FC | 	wrlong	local03, local02
0741c     03 00 00 FF 
07420     00 E4 05 F1 | 	add	objptr, ##1536
07424     F2 1E 02 FB | 	rdlong	local01, objptr
07428     0F 21 02 F6 | 	mov	local02, local01
0742c     01 20 66 F0 | 	shl	local02, #1
07430     0F 21 02 F1 | 	add	local02, local01
07434     02 20 66 F0 | 	shl	local02, #2
07438     03 00 00 FF 
0743c     00 E4 85 F1 | 	sub	objptr, ##1536
07440     F2 20 02 F1 | 	add	local02, objptr
07444     08 20 06 F1 | 	add	local02, #8
07448     10 A7 68 FC | 	wrlong	#83, local02
0744c     3E 00 00 FF 
07450     40 E4 85 F1 | 	sub	objptr, ##31808
07454                 | LR__0614
07454     41 00 00 FF 
07458     40 E4 05 F1 | 	add	objptr, ##33344
0745c     F2 22 02 FB | 	rdlong	local03, objptr
07460     01 22 06 F1 | 	add	local03, #1
07464     F2 22 62 FC | 	wrlong	local03, objptr
07468     41 00 00 FF 
0746c     40 E4 85 F1 | 	sub	objptr, ##33344
07470     40 00 90 FD | 	jmp	#LR__0616
07474                 | LR__0615
07474                 | '    print "We have a slow goto, todo  "
07474     00 12 06 F6 | 	mov	arg01, #0
07478     A4 39 B1 FD | 	call	#__system___getiolock_0370
0747c     FD 12 02 F6 | 	mov	arg01, result1
07480     EC E3 B0 FD | 	call	#__system___lockmem
07484     27 01 00 FF 
07488     01 14 06 F6 | 	mov	arg02, ##@LR__4316
0748c     00 12 06 F6 | 	mov	arg01, #0
07490     00 16 06 F6 | 	mov	arg03, #0
07494     CC F0 B0 FD | 	call	#__system___basic_print_string
07498     00 12 06 F6 | 	mov	arg01, #0
0749c     0A 14 06 F6 | 	mov	arg02, #10
074a0     00 16 06 F6 | 	mov	arg03, #0
074a4     64 F0 B0 FD | 	call	#__system___basic_print_char
074a8     00 12 06 F6 | 	mov	arg01, #0
074ac     70 39 B1 FD | 	call	#__system___getiolock_0370
074b0     FD 00 68 FC | 	wrlong	#0, result1
074b4                 | LR__0616
074b4                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
074b4                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
074b4                 | ' return 0
074b4     00 FA 05 F6 | 	mov	result1, #0
074b8     A7 F0 03 F6 | 	mov	ptra, fp
074bc     B2 00 A0 FD | 	call	#popregs_
074c0                 | _compile_goto_ret
074c0     2D 00 64 FD | 	ret
074c4                 | 
074c4                 | ' 
074c4                 | ' 
074c4                 | ' 
074c4                 | ' 
074c4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
074c4                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
074c4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
074c4                 | ' 
074c4                 | ' 
074c4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
074c4                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
074c4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
074c4                 | ' 
074c4                 | ' 
074c4                 | ' function expr() as integer 
074c4                 | _expr
074c4     07 4A 05 F6 | 	mov	COUNT_, #7
074c8     A8 00 A0 FD | 	call	#pushregs_
074cc                 | _expr_enter
074cc     2E 00 00 FF 
074d0     08 E4 05 F1 | 	add	objptr, ##23560
074d4     F2 24 02 FB | 	rdlong	local04, objptr
074d8     03 24 66 F0 | 	shl	local04, #3
074dc     02 00 00 FF 
074e0     38 E4 85 F1 | 	sub	objptr, ##1080
074e4     F2 24 02 F1 | 	add	local04, objptr
074e8     04 24 06 F1 | 	add	local04, #4
074ec     12 27 02 FB | 	rdlong	local05, local04
074f0                 | ' 
074f0                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
074f0     FE 27 0E F2 | 	cmp	local05, #510 wz
074f4     2B 00 00 FF 
074f8     D0 E5 85 F1 | 	sub	objptr, ##22480
074fc     C4 00 90 5D |  if_ne	jmp	#LR__0620
07500     1D 1E 06 F6 | 	mov	local01, #29
07504     FF 22 06 F6 | 	mov	local03, #255
07508     0F 29 02 F6 | 	mov	local06, local01
0750c     10 2B 02 F6 | 	mov	local07, local02
07510     11 1F 02 F6 | 	mov	local01, local03
07514     41 00 00 FF 
07518     40 E4 05 F1 | 	add	objptr, ##33344
0751c     F2 26 02 FB | 	rdlong	local05, objptr
07520     13 25 02 F6 | 	mov	local04, local05
07524     01 24 66 F0 | 	shl	local04, #1
07528     13 25 02 F1 | 	add	local04, local05
0752c     02 24 66 F0 | 	shl	local04, #2
07530     03 00 00 FF 
07534     00 E4 85 F1 | 	sub	objptr, ##1536
07538     F2 24 02 F1 | 	add	local04, objptr
0753c     12 29 62 FC | 	wrlong	local06, local04
07540     03 00 00 FF 
07544     00 E4 05 F1 | 	add	objptr, ##1536
07548     F2 28 02 FB | 	rdlong	local06, objptr
0754c     14 27 02 F6 | 	mov	local05, local06
07550     01 26 66 F0 | 	shl	local05, #1
07554     14 27 02 F1 | 	add	local05, local06
07558     02 26 66 F0 | 	shl	local05, #2
0755c     03 00 00 FF 
07560     00 E4 85 F1 | 	sub	objptr, ##1536
07564     F2 26 02 F1 | 	add	local05, objptr
07568     04 26 06 F1 | 	add	local05, #4
0756c     13 2B 62 FC | 	wrlong	local07, local05
07570     03 00 00 FF 
07574     00 E4 05 F1 | 	add	objptr, ##1536
07578     F2 2A 02 FB | 	rdlong	local07, objptr
0757c     15 29 02 F6 | 	mov	local06, local07
07580     01 28 66 F0 | 	shl	local06, #1
07584     15 29 02 F1 | 	add	local06, local07
07588     02 28 66 F0 | 	shl	local06, #2
0758c     03 00 00 FF 
07590     00 E4 85 F1 | 	sub	objptr, ##1536
07594     F2 28 02 F1 | 	add	local06, objptr
07598     08 28 06 F1 | 	add	local06, #8
0759c     14 1F 62 FC | 	wrlong	local01, local06
075a0     03 00 00 FF 
075a4     00 E4 05 F1 | 	add	objptr, ##1536
075a8     F2 28 02 FB | 	rdlong	local06, objptr
075ac     01 28 06 F1 | 	add	local06, #1
075b0     F2 28 62 FC | 	wrlong	local06, objptr
075b4     41 00 00 FF 
075b8     40 E4 85 F1 | 	sub	objptr, ##33344
075bc     1D FA 05 F6 | 	mov	result1, #29
075c0     54 01 90 FD | 	jmp	#LR__0623
075c4                 | LR__0620
075c4     00 1E 06 F6 | 	mov	local01, #0
075c8     58 01 B0 FD | 	call	#_addsub
075cc     2E 00 00 FF 
075d0     08 E4 05 F1 | 	add	objptr, ##23560
075d4     F2 24 02 FB | 	rdlong	local04, objptr
075d8     03 24 66 F0 | 	shl	local04, #3
075dc     02 00 00 FF 
075e0     38 E4 85 F1 | 	sub	objptr, ##1080
075e4     F2 24 02 F1 | 	add	local04, objptr
075e8     04 24 06 F1 | 	add	local04, #4
075ec     12 27 02 FB | 	rdlong	local05, local04
075f0                 | ' t3.result.uresult=0
075f0                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
075f0                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
075f0                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
075f0     2B 00 00 FF 
075f4     D0 E5 85 F1 | 	sub	objptr, ##22480
075f8                 | LR__0621
075f8     1B 26 0E F2 | 	cmp	local05, #27 wz
075fc     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
07600     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
07604     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
07608     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
0760c     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
07610     00 01 90 5D |  if_ne	jmp	#LR__0622
07614     2E 00 00 FF 
07618     08 E4 05 F1 | 	add	objptr, ##23560
0761c     F2 28 02 FB | 	rdlong	local06, objptr
07620     01 28 06 F1 | 	add	local06, #1
07624     F2 28 62 FC | 	wrlong	local06, objptr
07628     2E 00 00 FF 
0762c     08 E4 85 F1 | 	sub	objptr, ##23560
07630     F0 00 B0 FD | 	call	#_addsub
07634     13 23 02 F6 | 	mov	local03, local05
07638     0F 29 02 F6 | 	mov	local06, local01
0763c     10 2B 02 F6 | 	mov	local07, local02
07640     11 27 02 F6 | 	mov	local05, local03
07644     41 00 00 FF 
07648     40 E4 05 F1 | 	add	objptr, ##33344
0764c     F2 24 02 FB | 	rdlong	local04, objptr
07650     12 FB 01 F6 | 	mov	result1, local04
07654     01 FA 65 F0 | 	shl	result1, #1
07658     12 FB 01 F1 | 	add	result1, local04
0765c     02 FA 65 F0 | 	shl	result1, #2
07660     03 00 00 FF 
07664     00 E4 85 F1 | 	sub	objptr, ##1536
07668     F2 FA 01 F1 | 	add	result1, objptr
0766c     FD 28 62 FC | 	wrlong	local06, result1
07670     03 00 00 FF 
07674     00 E4 05 F1 | 	add	objptr, ##1536
07678     F2 28 02 FB | 	rdlong	local06, objptr
0767c     14 25 02 F6 | 	mov	local04, local06
07680     01 24 66 F0 | 	shl	local04, #1
07684     14 25 02 F1 | 	add	local04, local06
07688     02 24 66 F0 | 	shl	local04, #2
0768c     03 00 00 FF 
07690     00 E4 85 F1 | 	sub	objptr, ##1536
07694     F2 24 02 F1 | 	add	local04, objptr
07698     04 24 06 F1 | 	add	local04, #4
0769c     12 2B 62 FC | 	wrlong	local07, local04
076a0     03 00 00 FF 
076a4     00 E4 05 F1 | 	add	objptr, ##1536
076a8     F2 2A 02 FB | 	rdlong	local07, objptr
076ac     15 29 02 F6 | 	mov	local06, local07
076b0     01 28 66 F0 | 	shl	local06, #1
076b4     15 29 02 F1 | 	add	local06, local07
076b8     02 28 66 F0 | 	shl	local06, #2
076bc     03 00 00 FF 
076c0     00 E4 85 F1 | 	sub	objptr, ##1536
076c4     F2 28 02 F1 | 	add	local06, objptr
076c8     08 28 06 F1 | 	add	local06, #8
076cc     14 27 62 FC | 	wrlong	local05, local06
076d0     03 00 00 FF 
076d4     00 E4 05 F1 | 	add	objptr, ##1536
076d8     F2 28 02 FB | 	rdlong	local06, objptr
076dc     01 28 06 F1 | 	add	local06, #1
076e0     F2 28 62 FC | 	wrlong	local06, objptr
076e4     13 00 00 FF 
076e8     38 E4 85 F1 | 	sub	objptr, ##9784
076ec     F2 24 02 FB | 	rdlong	local04, objptr
076f0     03 24 66 F0 | 	shl	local04, #3
076f4     02 00 00 FF 
076f8     38 E4 85 F1 | 	sub	objptr, ##1080
076fc     F2 24 02 F1 | 	add	local04, objptr
07700     04 24 06 F1 | 	add	local04, #4
07704     12 27 02 FB | 	rdlong	local05, local04
07708     2B 00 00 FF 
0770c     D0 E5 85 F1 | 	sub	objptr, ##22480
07710     E4 FE 9F FD | 	jmp	#LR__0621
07714                 | LR__0622
07714                 | ' return 0  
07714     00 FA 05 F6 | 	mov	result1, #0
07718                 | LR__0623
07718     A7 F0 03 F6 | 	mov	ptra, fp
0771c     B2 00 A0 FD | 	call	#popregs_
07720                 | _expr_ret
07720     2D 00 64 FD | 	ret
07724                 | 
07724                 | ' 
07724                 | ' 
07724                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
07724                 | ' 
07724                 | ' function addsub() as integer 
07724                 | _addsub
07724     07 4A 05 F6 | 	mov	COUNT_, #7
07728     A8 00 A0 FD | 	call	#pushregs_
0772c                 | _addsub_enter
0772c     00 1E 06 F6 | 	mov	local01, #0
07730     50 01 B0 FD | 	call	#_muldiv
07734     2E 00 00 FF 
07738     08 E4 05 F1 | 	add	objptr, ##23560
0773c     F2 24 02 FB | 	rdlong	local04, objptr
07740     03 24 66 F0 | 	shl	local04, #3
07744     02 00 00 FF 
07748     38 E4 85 F1 | 	sub	objptr, ##1080
0774c     F2 24 02 F1 | 	add	local04, objptr
07750     04 24 06 F1 | 	add	local04, #4
07754     12 27 02 FB | 	rdlong	local05, local04
07758                 | ' t3.result.uresult=0
07758                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
07758                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
07758                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
07758     2B 00 00 FF 
0775c     D0 E5 85 F1 | 	sub	objptr, ##22480
07760                 | LR__0630
07760     01 26 0E F2 | 	cmp	local05, #1 wz
07764     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
07768     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
0776c     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
07770     00 01 90 5D |  if_ne	jmp	#LR__0631
07774     2E 00 00 FF 
07778     08 E4 05 F1 | 	add	objptr, ##23560
0777c     F2 24 02 FB | 	rdlong	local04, objptr
07780     01 24 06 F1 | 	add	local04, #1
07784     F2 24 62 FC | 	wrlong	local04, objptr
07788     2E 00 00 FF 
0778c     08 E4 85 F1 | 	sub	objptr, ##23560
07790     F0 00 B0 FD | 	call	#_muldiv
07794     13 23 02 F6 | 	mov	local03, local05
07798     0F 29 02 F6 | 	mov	local06, local01
0779c     10 2B 02 F6 | 	mov	local07, local02
077a0     11 27 02 F6 | 	mov	local05, local03
077a4     41 00 00 FF 
077a8     40 E4 05 F1 | 	add	objptr, ##33344
077ac     F2 24 02 FB | 	rdlong	local04, objptr
077b0     12 FB 01 F6 | 	mov	result1, local04
077b4     01 FA 65 F0 | 	shl	result1, #1
077b8     12 FB 01 F1 | 	add	result1, local04
077bc     02 FA 65 F0 | 	shl	result1, #2
077c0     03 00 00 FF 
077c4     00 E4 85 F1 | 	sub	objptr, ##1536
077c8     F2 FA 01 F1 | 	add	result1, objptr
077cc     FD 28 62 FC | 	wrlong	local06, result1
077d0     03 00 00 FF 
077d4     00 E4 05 F1 | 	add	objptr, ##1536
077d8     F2 28 02 FB | 	rdlong	local06, objptr
077dc     14 25 02 F6 | 	mov	local04, local06
077e0     01 24 66 F0 | 	shl	local04, #1
077e4     14 25 02 F1 | 	add	local04, local06
077e8     02 24 66 F0 | 	shl	local04, #2
077ec     03 00 00 FF 
077f0     00 E4 85 F1 | 	sub	objptr, ##1536
077f4     F2 24 02 F1 | 	add	local04, objptr
077f8     04 24 06 F1 | 	add	local04, #4
077fc     12 2B 62 FC | 	wrlong	local07, local04
07800     03 00 00 FF 
07804     00 E4 05 F1 | 	add	objptr, ##1536
07808     F2 2A 02 FB | 	rdlong	local07, objptr
0780c     15 29 02 F6 | 	mov	local06, local07
07810     01 28 66 F0 | 	shl	local06, #1
07814     15 29 02 F1 | 	add	local06, local07
07818     02 28 66 F0 | 	shl	local06, #2
0781c     03 00 00 FF 
07820     00 E4 85 F1 | 	sub	objptr, ##1536
07824     F2 28 02 F1 | 	add	local06, objptr
07828     08 28 06 F1 | 	add	local06, #8
0782c     14 27 62 FC | 	wrlong	local05, local06
07830     03 00 00 FF 
07834     00 E4 05 F1 | 	add	objptr, ##1536
07838     F2 28 02 FB | 	rdlong	local06, objptr
0783c     01 28 06 F1 | 	add	local06, #1
07840     F2 28 62 FC | 	wrlong	local06, objptr
07844     13 00 00 FF 
07848     38 E4 85 F1 | 	sub	objptr, ##9784
0784c     F2 24 02 FB | 	rdlong	local04, objptr
07850     03 24 66 F0 | 	shl	local04, #3
07854     02 00 00 FF 
07858     38 E4 85 F1 | 	sub	objptr, ##1080
0785c     F2 24 02 F1 | 	add	local04, objptr
07860     04 24 06 F1 | 	add	local04, #4
07864     12 27 02 FB | 	rdlong	local05, local04
07868     2B 00 00 FF 
0786c     D0 E5 85 F1 | 	sub	objptr, ##22480
07870     EC FE 9F FD | 	jmp	#LR__0630
07874                 | LR__0631
07874                 | '   return 0
07874     00 FA 05 F6 | 	mov	result1, #0
07878     A7 F0 03 F6 | 	mov	ptra, fp
0787c     B2 00 A0 FD | 	call	#popregs_
07880                 | _addsub_ret
07880     2D 00 64 FD | 	ret
07884                 | 
07884                 | ' 
07884                 | ' sub muldiv()
07884                 | _muldiv
07884     08 4A 05 F6 | 	mov	COUNT_, #8
07888     A8 00 A0 FD | 	call	#pushregs_
0788c                 | _muldiv_enter
0788c     00 1E 06 F6 | 	mov	local01, #0
07890     58 01 B0 FD | 	call	#_getvalue
07894     2E 00 00 FF 
07898     08 E4 05 F1 | 	add	objptr, ##23560
0789c     F2 24 02 FB | 	rdlong	local04, objptr
078a0     03 24 66 F0 | 	shl	local04, #3
078a4     02 00 00 FF 
078a8     38 E4 85 F1 | 	sub	objptr, ##1080
078ac     F2 24 02 F1 | 	add	local04, objptr
078b0     04 24 06 F1 | 	add	local04, #4
078b4     12 27 02 FB | 	rdlong	local05, local04
078b8                 | ' t3.result.uresult=0
078b8                 | ' getvalue()    
078b8                 | ' op = lparts(ct).token
078b8                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
078b8     2B 00 00 FF 
078bc     D0 E5 85 F1 | 	sub	objptr, ##22480
078c0                 | LR__0640
078c0     05 26 0E F2 | 	cmp	local05, #5 wz
078c4     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
078c8     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
078cc     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
078d0     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
078d4     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
078d8     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
078dc     00 01 90 5D |  if_ne	jmp	#LR__0641
078e0     2E 00 00 FF 
078e4     08 E4 05 F1 | 	add	objptr, ##23560
078e8     F2 24 02 FB | 	rdlong	local04, objptr
078ec     01 24 06 F1 | 	add	local04, #1
078f0     F2 24 62 FC | 	wrlong	local04, objptr
078f4     2E 00 00 FF 
078f8     08 E4 85 F1 | 	sub	objptr, ##23560
078fc     EC 00 B0 FD | 	call	#_getvalue
07900     13 23 02 F6 | 	mov	local03, local05
07904     0F 29 02 F6 | 	mov	local06, local01
07908     10 2B 02 F6 | 	mov	local07, local02
0790c     11 27 02 F6 | 	mov	local05, local03
07910     41 00 00 FF 
07914     40 E4 05 F1 | 	add	objptr, ##33344
07918     F2 24 02 FB | 	rdlong	local04, objptr
0791c     12 2D 02 F6 | 	mov	local08, local04
07920     01 2C 66 F0 | 	shl	local08, #1
07924     12 2D 02 F1 | 	add	local08, local04
07928     02 2C 66 F0 | 	shl	local08, #2
0792c     03 00 00 FF 
07930     00 E4 85 F1 | 	sub	objptr, ##1536
07934     F2 2C 02 F1 | 	add	local08, objptr
07938     16 29 62 FC | 	wrlong	local06, local08
0793c     03 00 00 FF 
07940     00 E4 05 F1 | 	add	objptr, ##1536
07944     F2 2C 02 FB | 	rdlong	local08, objptr
07948     16 29 02 F6 | 	mov	local06, local08
0794c     01 28 66 F0 | 	shl	local06, #1
07950     16 29 02 F1 | 	add	local06, local08
07954     02 28 66 F0 | 	shl	local06, #2
07958     03 00 00 FF 
0795c     00 E4 85 F1 | 	sub	objptr, ##1536
07960     F2 28 02 F1 | 	add	local06, objptr
07964     04 28 06 F1 | 	add	local06, #4
07968     14 2B 62 FC | 	wrlong	local07, local06
0796c     03 00 00 FF 
07970     00 E4 05 F1 | 	add	objptr, ##1536
07974     F2 2C 02 FB | 	rdlong	local08, objptr
07978     16 2B 02 F6 | 	mov	local07, local08
0797c     01 2A 66 F0 | 	shl	local07, #1
07980     16 2B 02 F1 | 	add	local07, local08
07984     02 2A 66 F0 | 	shl	local07, #2
07988     03 00 00 FF 
0798c     00 E4 85 F1 | 	sub	objptr, ##1536
07990     F2 2A 02 F1 | 	add	local07, objptr
07994     08 2A 06 F1 | 	add	local07, #8
07998     15 27 62 FC | 	wrlong	local05, local07
0799c     03 00 00 FF 
079a0     00 E4 05 F1 | 	add	objptr, ##1536
079a4     F2 28 02 FB | 	rdlong	local06, objptr
079a8     01 28 06 F1 | 	add	local06, #1
079ac     F2 28 62 FC | 	wrlong	local06, objptr
079b0     13 00 00 FF 
079b4     38 E4 85 F1 | 	sub	objptr, ##9784
079b8     F2 24 02 FB | 	rdlong	local04, objptr
079bc     03 24 66 F0 | 	shl	local04, #3
079c0     02 00 00 FF 
079c4     38 E4 85 F1 | 	sub	objptr, ##1080
079c8     F2 24 02 F1 | 	add	local04, objptr
079cc     04 24 06 F1 | 	add	local04, #4
079d0     12 27 02 FB | 	rdlong	local05, local04
079d4     2B 00 00 FF 
079d8     D0 E5 85 F1 | 	sub	objptr, ##22480
079dc     E0 FE 9F FD | 	jmp	#LR__0640
079e0                 | LR__0641
079e0     A7 F0 03 F6 | 	mov	ptra, fp
079e4     B2 00 A0 FD | 	call	#popregs_
079e8                 | _muldiv_ret
079e8     2D 00 64 FD | 	ret
079ec                 | 
079ec                 | ' 
079ec                 | ' sub getvalue() 
079ec                 | _getvalue
079ec     0B 4A 05 F6 | 	mov	COUNT_, #11
079f0     A8 00 A0 FD | 	call	#pushregs_
079f4                 | _getvalue_enter
079f4     01 24 06 F6 | 	mov	local04, #1
079f8     00 1E 06 F6 | 	mov	local01, #0
079fc     1D 22 06 F6 | 	mov	local03, #29
07a00     2E 00 00 FF 
07a04     08 E4 05 F1 | 	add	objptr, ##23560
07a08     F2 16 02 FB | 	rdlong	arg03, objptr
07a0c     03 16 66 F0 | 	shl	arg03, #3
07a10     02 00 00 FF 
07a14     38 E4 85 F1 | 	sub	objptr, ##1080
07a18     F2 16 02 F1 | 	add	arg03, objptr
07a1c     04 16 06 F1 | 	add	arg03, #4
07a20     0B 27 02 FB | 	rdlong	local05, arg03
07a24                 | ' m=1
07a24                 | ' t1.result.uresult=0: t1.result_type=result_uint
07a24                 | ' op=lparts(ct).token
07a24                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
07a24     02 26 0E F2 | 	cmp	local05, #2 wz
07a28     2B 00 00 FF 
07a2c     D0 E5 85 F1 | 	sub	objptr, ##22480
07a30     38 00 90 5D |  if_ne	jmp	#LR__0650
07a34     01 24 66 F6 | 	neg	local04, #1
07a38     2E 00 00 FF 
07a3c     08 E4 05 F1 | 	add	objptr, ##23560
07a40     F2 26 02 FB | 	rdlong	local05, objptr
07a44     01 26 06 F1 | 	add	local05, #1
07a48     F2 26 62 FC | 	wrlong	local05, objptr
07a4c     03 26 66 F0 | 	shl	local05, #3
07a50     02 00 00 FF 
07a54     38 E4 85 F1 | 	sub	objptr, ##1080
07a58     F2 26 02 F1 | 	add	local05, objptr
07a5c     04 26 06 F1 | 	add	local05, #4
07a60     13 27 02 FB | 	rdlong	local05, local05
07a64     2B 00 00 FF 
07a68     D0 E5 85 F1 | 	sub	objptr, ##22480
07a6c                 | LR__0650
07a6c                 | ' select case op
07a6c     01 00 00 FF 
07a70     00 26 0E F2 | 	cmp	local05, ##512 wz
07a74     3C 00 90 AD |  if_e	jmp	#LR__0651
07a78     01 00 00 FF 
07a7c     01 26 0E F2 | 	cmp	local05, ##513 wz
07a80     88 01 90 AD |  if_e	jmp	#LR__0654
07a84     01 00 00 FF 
07a88     02 26 0E F2 | 	cmp	local05, ##514 wz
07a8c     84 02 90 AD |  if_e	jmp	#LR__0655
07a90     01 00 00 FF 
07a94     03 26 0E F2 | 	cmp	local05, ##515 wz
07a98     E8 03 90 AD |  if_e	jmp	#LR__0658
07a9c     01 00 00 FF 
07aa0     04 26 0E F2 | 	cmp	local05, ##516 wz
07aa4     E0 05 90 AD |  if_e	jmp	#LR__0663
07aa8     15 26 0E F2 | 	cmp	local05, #21 wz
07aac     00 06 90 AD |  if_e	jmp	#LR__0664
07ab0     70 06 90 FD | 	jmp	#LR__0665
07ab4                 | LR__0651
07ab4                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_uint ' todo token_int64
07ab4     01 24 0E F2 | 	cmp	local04, #1 wz
07ab8     3C 00 90 5D |  if_ne	jmp	#LR__0652
07abc     2E 00 00 FF 
07ac0     08 E4 05 F1 | 	add	objptr, ##23560
07ac4     F2 26 02 FB | 	rdlong	local05, objptr
07ac8     03 26 66 F0 | 	shl	local05, #3
07acc     02 00 00 FF 
07ad0     38 E4 85 F1 | 	sub	objptr, ##1080
07ad4     F2 26 02 F1 | 	add	local05, objptr
07ad8     13 13 02 FB | 	rdlong	arg01, local05
07adc     00 14 06 F6 | 	mov	arg02, #0
07ae0     2B 00 00 FF 
07ae4     D0 E5 85 F1 | 	sub	objptr, ##22480
07ae8     10 0E B1 FD | 	call	#__system____builtin_atoi
07aec     FD 24 02 FD | 	qmul	local04, result1
07af0     18 1E 62 FD | 	getqx	local01
07af4     1D 22 06 F6 | 	mov	local03, #29
07af8                 | LR__0652
07af8                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
07af8     FF FF 7F FF 
07afc     FF 25 0E F2 | 	cmp	local04, ##-1 wz
07b00     3C 00 90 5D |  if_ne	jmp	#LR__0653
07b04     2E 00 00 FF 
07b08     08 E4 05 F1 | 	add	objptr, ##23560
07b0c     F2 26 02 FB | 	rdlong	local05, objptr
07b10     03 26 66 F0 | 	shl	local05, #3
07b14     02 00 00 FF 
07b18     38 E4 85 F1 | 	sub	objptr, ##1080
07b1c     F2 26 02 F1 | 	add	local05, objptr
07b20     13 13 02 FB | 	rdlong	arg01, local05
07b24     00 14 06 F6 | 	mov	arg02, #0
07b28     2B 00 00 FF 
07b2c     D0 E5 85 F1 | 	sub	objptr, ##22480
07b30     C8 0D B1 FD | 	call	#__system____builtin_atoi
07b34     FD 24 02 FD | 	qmul	local04, result1
07b38     18 1E 62 FD | 	getqx	local01
07b3c     1C 22 06 F6 | 	mov	local03, #28
07b40                 | LR__0653
07b40     0F 29 02 F6 | 	mov	local06, local01
07b44     10 2B 02 F6 | 	mov	local07, local02
07b48     11 27 02 F6 | 	mov	local05, local03
07b4c     41 00 00 FF 
07b50     40 E4 05 F1 | 	add	objptr, ##33344
07b54     F2 1E 02 FB | 	rdlong	local01, objptr
07b58     0F 25 02 F6 | 	mov	local04, local01
07b5c     01 24 66 F0 | 	shl	local04, #1
07b60     0F 25 02 F1 | 	add	local04, local01
07b64     02 24 66 F0 | 	shl	local04, #2
07b68     03 00 00 FF 
07b6c     00 E4 85 F1 | 	sub	objptr, ##1536
07b70     F2 24 02 F1 | 	add	local04, objptr
07b74     12 29 62 FC | 	wrlong	local06, local04
07b78     03 00 00 FF 
07b7c     00 E4 05 F1 | 	add	objptr, ##1536
07b80     F2 28 02 FB | 	rdlong	local06, objptr
07b84     14 1F 02 F6 | 	mov	local01, local06
07b88     01 1E 66 F0 | 	shl	local01, #1
07b8c     14 1F 02 F1 | 	add	local01, local06
07b90     02 1E 66 F0 | 	shl	local01, #2
07b94     03 00 00 FF 
07b98     00 E4 85 F1 | 	sub	objptr, ##1536
07b9c     F2 1E 02 F1 | 	add	local01, objptr
07ba0     04 1E 06 F1 | 	add	local01, #4
07ba4     0F 2B 62 FC | 	wrlong	local07, local01
07ba8     03 00 00 FF 
07bac     00 E4 05 F1 | 	add	objptr, ##1536
07bb0     F2 2A 02 FB | 	rdlong	local07, objptr
07bb4     15 29 02 F6 | 	mov	local06, local07
07bb8     01 28 66 F0 | 	shl	local06, #1
07bbc     15 29 02 F1 | 	add	local06, local07
07bc0     02 28 66 F0 | 	shl	local06, #2
07bc4     03 00 00 FF 
07bc8     00 E4 85 F1 | 	sub	objptr, ##1536
07bcc     F2 28 02 F1 | 	add	local06, objptr
07bd0     08 28 06 F1 | 	add	local06, #8
07bd4     14 27 62 FC | 	wrlong	local05, local06
07bd8     03 00 00 FF 
07bdc     00 E4 05 F1 | 	add	objptr, ##1536
07be0     F2 28 02 FB | 	rdlong	local06, objptr
07be4     01 28 06 F1 | 	add	local06, #1
07be8     F2 28 62 FC | 	wrlong	local06, objptr
07bec     13 00 00 FF 
07bf0     38 E4 85 F1 | 	sub	objptr, ##9784
07bf4     F2 28 02 FB | 	rdlong	local06, objptr
07bf8     01 28 06 F1 | 	add	local06, #1
07bfc     F2 28 62 FC | 	wrlong	local06, objptr
07c00     2E 00 00 FF 
07c04     08 E4 85 F1 | 	sub	objptr, ##23560
07c08     3C 05 90 FD | 	jmp	#LR__0666
07c0c                 | LR__0654
07c0c     2E 00 00 FF 
07c10     08 E4 05 F1 | 	add	objptr, ##23560
07c14     F2 28 02 FB | 	rdlong	local06, objptr
07c18     03 28 66 F0 | 	shl	local06, #3
07c1c     02 00 00 FF 
07c20     38 E4 85 F1 | 	sub	objptr, ##1080
07c24     F2 28 02 F1 | 	add	local06, objptr
07c28     14 13 02 FB | 	rdlong	arg01, local06
07c2c     00 14 06 F6 | 	mov	arg02, #0
07c30     2B 00 00 FF 
07c34     D0 E5 85 F1 | 	sub	objptr, ##22480
07c38     C0 0C B1 FD | 	call	#__system____builtin_atoi
07c3c     FD 24 02 FD | 	qmul	local04, result1
07c40     41 00 00 FF 
07c44     40 E4 05 F1 | 	add	objptr, ##33344
07c48     F2 28 02 FB | 	rdlong	local06, objptr
07c4c     14 2D 02 F6 | 	mov	local08, local06
07c50     01 2C 66 F0 | 	shl	local08, #1
07c54     14 2D 02 F1 | 	add	local08, local06
07c58     02 2C 66 F0 | 	shl	local08, #2
07c5c     03 00 00 FF 
07c60     00 E4 85 F1 | 	sub	objptr, ##1536
07c64     F2 2C 02 F1 | 	add	local08, objptr
07c68     03 00 00 FF 
07c6c     00 E4 05 F1 | 	add	objptr, ##1536
07c70     18 1E 62 FD | 	getqx	local01
07c74     1C 22 06 F6 | 	mov	local03, #28
07c78     0F 29 02 F6 | 	mov	local06, local01
07c7c     10 2B 02 F6 | 	mov	local07, local02
07c80     16 29 62 FC | 	wrlong	local06, local08
07c84     11 2D 02 F6 | 	mov	local08, local03
07c88     F2 28 02 FB | 	rdlong	local06, objptr
07c8c     14 27 02 F6 | 	mov	local05, local06
07c90     01 26 66 F0 | 	shl	local05, #1
07c94     14 27 02 F1 | 	add	local05, local06
07c98     02 26 66 F0 | 	shl	local05, #2
07c9c     03 00 00 FF 
07ca0     00 E4 85 F1 | 	sub	objptr, ##1536
07ca4     F2 26 02 F1 | 	add	local05, objptr
07ca8     04 26 06 F1 | 	add	local05, #4
07cac     13 2B 62 FC | 	wrlong	local07, local05
07cb0     03 00 00 FF 
07cb4     00 E4 05 F1 | 	add	objptr, ##1536
07cb8     F2 2A 02 FB | 	rdlong	local07, objptr
07cbc     15 29 02 F6 | 	mov	local06, local07
07cc0     01 28 66 F0 | 	shl	local06, #1
07cc4     15 29 02 F1 | 	add	local06, local07
07cc8     02 28 66 F0 | 	shl	local06, #2
07ccc     03 00 00 FF 
07cd0     00 E4 85 F1 | 	sub	objptr, ##1536
07cd4     F2 28 02 F1 | 	add	local06, objptr
07cd8     08 28 06 F1 | 	add	local06, #8
07cdc     14 2D 62 FC | 	wrlong	local08, local06
07ce0     03 00 00 FF 
07ce4     00 E4 05 F1 | 	add	objptr, ##1536
07ce8     F2 28 02 FB | 	rdlong	local06, objptr
07cec     01 28 06 F1 | 	add	local06, #1
07cf0     F2 28 62 FC | 	wrlong	local06, objptr
07cf4     13 00 00 FF 
07cf8     38 E4 85 F1 | 	sub	objptr, ##9784
07cfc     F2 28 02 FB | 	rdlong	local06, objptr
07d00     01 28 06 F1 | 	add	local06, #1
07d04     F2 28 62 FC | 	wrlong	local06, objptr
07d08     2E 00 00 FF 
07d0c     08 E4 85 F1 | 	sub	objptr, ##23560
07d10     34 04 90 FD | 	jmp	#LR__0666
07d14                 | LR__0655
07d14                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
07d14     01 24 0E F2 | 	cmp	local04, #1 wz
07d18     48 00 90 5D |  if_ne	jmp	#LR__0656
07d1c     00 C0 1F FF 
07d20     00 28 06 F6 | 	mov	local06, ##1065353216
07d24     2E 00 00 FF 
07d28     08 E4 05 F1 | 	add	objptr, ##23560
07d2c     F2 2C 02 FB | 	rdlong	local08, objptr
07d30     03 2C 66 F0 | 	shl	local08, #3
07d34     02 00 00 FF 
07d38     38 E4 85 F1 | 	sub	objptr, ##1080
07d3c     F2 2C 02 F1 | 	add	local08, objptr
07d40     16 13 02 FB | 	rdlong	arg01, local08
07d44     2B 00 00 FF 
07d48     D0 E5 85 F1 | 	sub	objptr, ##22480
07d4c     1C 0D B1 FD | 	call	#__system____builtin_atof
07d50     FD 14 02 F6 | 	mov	arg02, result1
07d54     14 13 02 F6 | 	mov	arg01, local06
07d58     28 05 B1 FD | 	call	#__system___float_mul
07d5c     FD 1E 02 F6 | 	mov	local01, result1
07d60     1E 22 06 F6 | 	mov	local03, #30
07d64                 | LR__0656
07d64                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
07d64     FF FF 7F FF 
07d68     FF 25 0E F2 | 	cmp	local04, ##-1 wz
07d6c     48 00 90 5D |  if_ne	jmp	#LR__0657
07d70     00 C0 5F FF 
07d74     00 28 06 F6 | 	mov	local06, ##-1082130432
07d78     2E 00 00 FF 
07d7c     08 E4 05 F1 | 	add	objptr, ##23560
07d80     F2 2C 02 FB | 	rdlong	local08, objptr
07d84     03 2C 66 F0 | 	shl	local08, #3
07d88     02 00 00 FF 
07d8c     38 E4 85 F1 | 	sub	objptr, ##1080
07d90     F2 2C 02 F1 | 	add	local08, objptr
07d94     16 13 02 FB | 	rdlong	arg01, local08
07d98     2B 00 00 FF 
07d9c     D0 E5 85 F1 | 	sub	objptr, ##22480
07da0     C8 0C B1 FD | 	call	#__system____builtin_atof
07da4     FD 14 02 F6 | 	mov	arg02, result1
07da8     14 13 02 F6 | 	mov	arg01, local06
07dac     D4 04 B1 FD | 	call	#__system___float_mul
07db0     FD 1E 02 F6 | 	mov	local01, result1
07db4     1E 22 06 F6 | 	mov	local03, #30
07db8                 | LR__0657
07db8     0F 29 02 F6 | 	mov	local06, local01
07dbc     10 2B 02 F6 | 	mov	local07, local02
07dc0     11 27 02 F6 | 	mov	local05, local03
07dc4     41 00 00 FF 
07dc8     40 E4 05 F1 | 	add	objptr, ##33344
07dcc     F2 1E 02 FB | 	rdlong	local01, objptr
07dd0     0F 2D 02 F6 | 	mov	local08, local01
07dd4     01 2C 66 F0 | 	shl	local08, #1
07dd8     0F 2D 02 F1 | 	add	local08, local01
07ddc     02 2C 66 F0 | 	shl	local08, #2
07de0     03 00 00 FF 
07de4     00 E4 85 F1 | 	sub	objptr, ##1536
07de8     F2 2C 02 F1 | 	add	local08, objptr
07dec     16 29 62 FC | 	wrlong	local06, local08
07df0     03 00 00 FF 
07df4     00 E4 05 F1 | 	add	objptr, ##1536
07df8     F2 2C 02 FB | 	rdlong	local08, objptr
07dfc     16 29 02 F6 | 	mov	local06, local08
07e00     01 28 66 F0 | 	shl	local06, #1
07e04     16 29 02 F1 | 	add	local06, local08
07e08     02 28 66 F0 | 	shl	local06, #2
07e0c     03 00 00 FF 
07e10     00 E4 85 F1 | 	sub	objptr, ##1536
07e14     F2 28 02 F1 | 	add	local06, objptr
07e18     04 28 06 F1 | 	add	local06, #4
07e1c     14 2B 62 FC | 	wrlong	local07, local06
07e20     03 00 00 FF 
07e24     00 E4 05 F1 | 	add	objptr, ##1536
07e28     F2 2C 02 FB | 	rdlong	local08, objptr
07e2c     16 2B 02 F6 | 	mov	local07, local08
07e30     01 2A 66 F0 | 	shl	local07, #1
07e34     16 2B 02 F1 | 	add	local07, local08
07e38     02 2A 66 F0 | 	shl	local07, #2
07e3c     03 00 00 FF 
07e40     00 E4 85 F1 | 	sub	objptr, ##1536
07e44     F2 2A 02 F1 | 	add	local07, objptr
07e48     08 2A 06 F1 | 	add	local07, #8
07e4c     15 27 62 FC | 	wrlong	local05, local07
07e50     03 00 00 FF 
07e54     00 E4 05 F1 | 	add	objptr, ##1536
07e58     F2 28 02 FB | 	rdlong	local06, objptr
07e5c     01 28 06 F1 | 	add	local06, #1
07e60     F2 28 62 FC | 	wrlong	local06, objptr
07e64     13 00 00 FF 
07e68     38 E4 85 F1 | 	sub	objptr, ##9784
07e6c     F2 28 02 FB | 	rdlong	local06, objptr
07e70     01 28 06 F1 | 	add	local06, #1
07e74     F2 28 62 FC | 	wrlong	local06, objptr
07e78     2E 00 00 FF 
07e7c     08 E4 85 F1 | 	sub	objptr, ##23560
07e80     C4 02 90 FD | 	jmp	#LR__0666
07e84                 | LR__0658
07e84     1F 22 06 F6 | 	mov	local03, #31
07e88     2E 00 00 FF 
07e8c     08 E4 05 F1 | 	add	objptr, ##23560
07e90     F2 16 02 FB | 	rdlong	arg03, objptr
07e94     03 16 66 F0 | 	shl	arg03, #3
07e98     02 00 00 FF 
07e9c     38 E4 85 F1 | 	sub	objptr, ##1080
07ea0     F2 16 02 F1 | 	add	arg03, objptr
07ea4     0B 13 02 FB | 	rdlong	arg01, arg03
07ea8     2B 00 00 FF 
07eac     D0 E5 85 F1 | 	sub	objptr, ##22480
07eb0     09 2F 02 F6 | 	mov	local09, arg01
07eb4     97 06 48 FB | 	callpa	#(@LR__0660-@LR__0659)>>2,fcache_load_ptr_
07eb8                 | LR__0659
07eb8     17 FB C9 FA | 	rdbyte	result1, local09 wz
07ebc     01 2E 06 51 |  if_ne	add	local09, #1
07ec0     F4 FF 9F 5D |  if_ne	jmp	#LR__0659
07ec4                 | LR__0660
07ec4     09 2F 82 F1 | 	sub	local09, arg01
07ec8     17 FB 01 F6 | 	mov	result1, local09
07ecc     52 00 00 FF 
07ed0     60 E4 05 F1 | 	add	objptr, ##42080
07ed4     F2 FA 61 FC | 	wrlong	result1, objptr
07ed8     24 E4 85 F1 | 	sub	objptr, #36
07edc     F2 12 02 FB | 	rdlong	arg01, objptr
07ee0     FD 12 82 F1 | 	sub	arg01, result1
07ee4     04 12 86 F1 | 	sub	arg01, #4
07ee8     03 12 26 F5 | 	andn	arg01, #3
07eec     F2 12 62 FC | 	wrlong	arg01, objptr
07ef0     24 E4 05 F1 | 	add	objptr, #36
07ef4     F2 14 02 FB | 	rdlong	arg02, objptr
07ef8     01 16 06 F6 | 	mov	arg03, #1
07efc     00 18 06 F6 | 	mov	arg04, #0
07f00     46 00 00 FF 
07f04     A0 E5 85 F1 | 	sub	objptr, ##36256
07f08                 | '     return fill(addr, pattern, count, listPtr, 4)
07f08     04 1A 06 F6 | 	mov	arg05, #4
07f0c     AC CF B0 FD | 	call	#_psram_spin2_fill
07f10                 | '     pslpoke memtop,l
07f10                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
07f10     01 30 06 F6 | 	mov	local10, #1
07f14     46 00 00 FF 
07f18     A0 E5 05 F1 | 	add	objptr, ##36256
07f1c     F2 32 02 FB | 	rdlong	local11, objptr
07f20     52 00 00 FF 
07f24     60 E4 85 F1 | 	sub	objptr, ##42080
07f28     01 32 06 F1 | 	add	local11, #1
07f2c                 | LR__0661
07f2c     19 31 52 F2 | 	cmps	local10, local11 wc
07f30     78 00 90 3D |  if_ae	jmp	#LR__0662
07f34     52 00 00 FF 
07f38     3C E4 05 F1 | 	add	objptr, ##42044
07f3c     F2 2A 02 FB | 	rdlong	local07, objptr
07f40     03 2A 06 F1 | 	add	local07, #3
07f44     18 2B 02 F1 | 	add	local07, local10
07f48     24 00 00 FF 
07f4c     34 E4 85 F1 | 	sub	objptr, ##18484
07f50     F2 2C 02 FB | 	rdlong	local08, objptr
07f54     03 2C 66 F0 | 	shl	local08, #3
07f58     02 00 00 FF 
07f5c     38 E4 85 F1 | 	sub	objptr, ##1080
07f60     F2 2C 02 F1 | 	add	local08, objptr
07f64     16 13 02 FB | 	rdlong	arg01, local08
07f68     18 15 02 F6 | 	mov	arg02, local10
07f6c     01 16 06 F6 | 	mov	arg03, #1
07f70     2B 00 00 FF 
07f74     D0 E5 85 F1 | 	sub	objptr, ##22480
07f78     1C FA B0 FD | 	call	#__system__Mid_S
07f7c     FD 14 C2 FA | 	rdbyte	arg02, result1
07f80     15 13 02 F6 | 	mov	arg01, local07
07f84     01 16 06 F6 | 	mov	arg03, #1
07f88     00 18 06 F6 | 	mov	arg04, #0
07f8c     0B 00 00 FF 
07f90     C0 E4 05 F1 | 	add	objptr, ##5824
07f94                 | '     return fill(addr, pattern, count, listPtr, 1)
07f94     01 1A 06 F6 | 	mov	arg05, #1
07f98     20 CF B0 FD | 	call	#_psram_spin2_fill
07f9c     0B 00 00 FF 
07fa0     C0 E4 85 F1 | 	sub	objptr, ##5824
07fa4     01 30 06 F1 | 	add	local10, #1
07fa8     80 FF 9F FD | 	jmp	#LR__0661
07fac                 | LR__0662
07fac     52 00 00 FF 
07fb0     3C E4 05 F1 | 	add	objptr, ##42044
07fb4     F2 1E 02 FB | 	rdlong	local01, objptr
07fb8     2B 22 06 F6 | 	mov	local03, #43
07fbc     0F 29 02 F6 | 	mov	local06, local01
07fc0     10 2B 02 F6 | 	mov	local07, local02
07fc4     11 33 02 F6 | 	mov	local11, local03
07fc8     10 00 00 FF 
07fcc     FC E5 85 F1 | 	sub	objptr, ##8700
07fd0     F2 30 02 FB | 	rdlong	local10, objptr
07fd4     18 2D 02 F6 | 	mov	local08, local10
07fd8     01 2C 66 F0 | 	shl	local08, #1
07fdc     18 2D 02 F1 | 	add	local08, local10
07fe0     02 2C 66 F0 | 	shl	local08, #2
07fe4     03 00 00 FF 
07fe8     00 E4 85 F1 | 	sub	objptr, ##1536
07fec     F2 2C 02 F1 | 	add	local08, objptr
07ff0     16 29 62 FC | 	wrlong	local06, local08
07ff4     03 00 00 FF 
07ff8     00 E4 05 F1 | 	add	objptr, ##1536
07ffc     F2 30 02 FB | 	rdlong	local10, objptr
08000     18 2D 02 F6 | 	mov	local08, local10
08004     01 2C 66 F0 | 	shl	local08, #1
08008     18 2D 02 F1 | 	add	local08, local10
0800c     02 2C 66 F0 | 	shl	local08, #2
08010     03 00 00 FF 
08014     00 E4 85 F1 | 	sub	objptr, ##1536
08018     F2 2C 02 F1 | 	add	local08, objptr
0801c     04 2C 06 F1 | 	add	local08, #4
08020     16 2B 62 FC | 	wrlong	local07, local08
08024     03 00 00 FF 
08028     00 E4 05 F1 | 	add	objptr, ##1536
0802c     F2 30 02 FB | 	rdlong	local10, objptr
08030     18 2D 02 F6 | 	mov	local08, local10
08034     01 2C 66 F0 | 	shl	local08, #1
08038     18 2D 02 F1 | 	add	local08, local10
0803c     02 2C 66 F0 | 	shl	local08, #2
08040     03 00 00 FF 
08044     00 E4 85 F1 | 	sub	objptr, ##1536
08048     F2 2C 02 F1 | 	add	local08, objptr
0804c     08 2C 06 F1 | 	add	local08, #8
08050     16 33 62 FC | 	wrlong	local11, local08
08054     03 00 00 FF 
08058     00 E4 05 F1 | 	add	objptr, ##1536
0805c     F2 28 02 FB | 	rdlong	local06, objptr
08060     01 28 06 F1 | 	add	local06, #1
08064     F2 28 62 FC | 	wrlong	local06, objptr
08068     13 00 00 FF 
0806c     38 E4 85 F1 | 	sub	objptr, ##9784
08070     F2 28 02 FB | 	rdlong	local06, objptr
08074     01 28 06 F1 | 	add	local06, #1
08078     F2 28 62 FC | 	wrlong	local06, objptr
0807c     2E 00 00 FF 
08080     08 E4 85 F1 | 	sub	objptr, ##23560
08084     C0 00 90 FD | 	jmp	#LR__0666
08088                 | LR__0663
08088     12 13 02 F6 | 	mov	arg01, local04
0808c     B8 03 B0 FD | 	call	#_getvar
08090     2E 00 00 FF 
08094     08 E4 05 F1 | 	add	objptr, ##23560
08098     F2 28 02 FB | 	rdlong	local06, objptr
0809c     01 28 06 F1 | 	add	local06, #1
080a0     F2 28 62 FC | 	wrlong	local06, objptr
080a4     2E 00 00 FF 
080a8     08 E4 85 F1 | 	sub	objptr, ##23560
080ac     98 00 90 FD | 	jmp	#LR__0666
080b0                 | LR__0664
080b0     2E 00 00 FF 
080b4     08 E4 05 F1 | 	add	objptr, ##23560
080b8     F2 28 02 FB | 	rdlong	local06, objptr
080bc     01 28 06 F1 | 	add	local06, #1
080c0     F2 28 62 FC | 	wrlong	local06, objptr
080c4     2E 00 00 FF 
080c8     08 E4 85 F1 | 	sub	objptr, ##23560
080cc     F4 F3 BF FD | 	call	#_expr
080d0                 | '     ct+=1
080d0                 | '     expr() 
080d0                 | '     if lparts(ct).token=token_rpar then ct+=1
080d0     2E 00 00 FF 
080d4     08 E4 05 F1 | 	add	objptr, ##23560
080d8     F2 32 02 FB | 	rdlong	local11, objptr
080dc     03 32 66 F0 | 	shl	local11, #3
080e0     02 00 00 FF 
080e4     38 E4 85 F1 | 	sub	objptr, ##1080
080e8     F2 32 02 F1 | 	add	local11, objptr
080ec     04 32 06 F1 | 	add	local11, #4
080f0     19 33 02 FB | 	rdlong	local11, local11
080f4     14 32 0E F2 | 	cmp	local11, #20 wz
080f8     2B 00 00 FF 
080fc     D0 E5 85 F1 | 	sub	objptr, ##22480
08100     44 00 90 5D |  if_ne	jmp	#LR__0666
08104     2E 00 00 FF 
08108     08 E4 05 F1 | 	add	objptr, ##23560
0810c     F2 28 02 FB | 	rdlong	local06, objptr
08110     01 28 06 F1 | 	add	local06, #1
08114     F2 28 62 FC | 	wrlong	local06, objptr
08118     2E 00 00 FF 
0811c     08 E4 85 F1 | 	sub	objptr, ##23560
08120     24 00 90 FD | 	jmp	#LR__0666
08124                 | LR__0665
08124     12 13 02 F6 | 	mov	arg01, local04
08128     28 00 B0 FD | 	call	#_getfun
0812c     2E 00 00 FF 
08130     08 E4 05 F1 | 	add	objptr, ##23560
08134     F2 28 02 FB | 	rdlong	local06, objptr
08138     01 28 06 F1 | 	add	local06, #1
0813c     F2 28 62 FC | 	wrlong	local06, objptr
08140     2E 00 00 FF 
08144     08 E4 85 F1 | 	sub	objptr, ##23560
08148                 | LR__0666
08148     A7 F0 03 F6 | 	mov	ptra, fp
0814c     B2 00 A0 FD | 	call	#popregs_
08150                 | _getvalue_ret
08150     2D 00 64 FD | 	ret
08154                 | 
08154                 | ' 
08154                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
08154                 | _getfun
08154     0A 4A 05 F6 | 	mov	COUNT_, #10
08158     A8 00 A0 FD | 	call	#pushregs_
0815c                 | _getfun_enter
0815c     09 25 02 F6 | 	mov	local04, arg01
08160     2E 00 00 FF 
08164     08 E4 05 F1 | 	add	objptr, ##23560
08168     F2 26 02 FB | 	rdlong	local05, objptr
0816c     13 29 02 F6 | 	mov	local06, local05
08170     00 2A 06 F6 | 	mov	local07, #0
08174                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
08174                 | ' oldct=ct
08174                 | ' numpar=0
08174                 | '   
08174                 | ' if lparts(ct+1).token=token_lpar then
08174     01 26 06 F1 | 	add	local05, #1
08178     03 26 66 F0 | 	shl	local05, #3
0817c     02 00 00 FF 
08180     38 E4 85 F1 | 	sub	objptr, ##1080
08184     F2 26 02 F1 | 	add	local05, objptr
08188     04 26 06 F1 | 	add	local05, #4
0818c     13 27 02 FB | 	rdlong	local05, local05
08190     15 26 0E F2 | 	cmp	local05, #21 wz
08194     2B 00 00 FF 
08198     D0 E5 85 F1 | 	sub	objptr, ##22480
0819c     08 01 90 5D |  if_ne	jmp	#LR__0674
081a0     2E 00 00 FF 
081a4     08 E4 05 F1 | 	add	objptr, ##23560
081a8     F2 2C 02 FB | 	rdlong	local08, objptr
081ac     01 2C 06 F1 | 	add	local08, #1
081b0     F2 2C 62 FC | 	wrlong	local08, objptr
081b4     2E 00 00 FF 
081b8     08 E4 85 F1 | 	sub	objptr, ##23560
081bc                 | '   ct+=1 											' omit this lpar, this is for expr list
081bc                 | '   do
081bc                 | LR__0670
081bc     2E 00 00 FF 
081c0     08 E4 05 F1 | 	add	objptr, ##23560
081c4     F2 26 02 FB | 	rdlong	local05, objptr
081c8     01 26 06 F1 | 	add	local05, #1
081cc     F2 26 62 FC | 	wrlong	local05, objptr
081d0                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
081d0                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
081d0     03 26 66 F0 | 	shl	local05, #3
081d4     02 00 00 FF 
081d8     38 E4 85 F1 | 	sub	objptr, ##1080
081dc     F2 26 02 F1 | 	add	local05, objptr
081e0     04 26 06 F1 | 	add	local05, #4
081e4     13 2D 02 FB | 	rdlong	local08, local05
081e8     15 2C 0E F2 | 	cmp	local08, #21 wz
081ec     2B 00 00 FF 
081f0     D0 E5 85 F1 | 	sub	objptr, ##22480
081f4     40 00 90 5D |  if_ne	jmp	#LR__0671
081f8     2E 00 00 FF 
081fc     08 E4 05 F1 | 	add	objptr, ##23560
08200     F2 2C 02 FB | 	rdlong	local08, objptr
08204     01 2C 06 F1 | 	add	local08, #1
08208     F2 2C 62 FC | 	wrlong	local08, objptr
0820c     2E 00 00 FF 
08210     08 E4 85 F1 | 	sub	objptr, ##23560
08214     AC F2 BF FD | 	call	#_expr
08218     2E 00 00 FF 
0821c     08 E4 05 F1 | 	add	objptr, ##23560
08220     F2 2C 02 FB | 	rdlong	local08, objptr
08224     01 2C 06 F1 | 	add	local08, #1
08228     F2 2C 62 FC | 	wrlong	local08, objptr
0822c     2E 00 00 FF 
08230     08 E4 85 F1 | 	sub	objptr, ##23560
08234     04 00 90 FD | 	jmp	#LR__0672
08238                 | LR__0671
08238     88 F2 BF FD | 	call	#_expr
0823c                 | LR__0672
0823c     01 2A 06 F1 | 	add	local07, #1
08240     2E 00 00 FF 
08244     08 E4 05 F1 | 	add	objptr, ##23560
08248     F2 26 02 FB | 	rdlong	local05, objptr
0824c     03 26 66 F0 | 	shl	local05, #3
08250     02 00 00 FF 
08254     38 E4 85 F1 | 	sub	objptr, ##1080
08258     F2 26 02 F1 | 	add	local05, objptr
0825c     04 26 06 F1 | 	add	local05, #4
08260     13 2D 02 FB | 	rdlong	local08, local05
08264     14 2C 0E F2 | 	cmp	local08, #20 wz
08268     2B 00 00 FF 
0826c     D0 E5 85 F1 | 	sub	objptr, ##22480
08270     34 00 90 AD |  if_e	jmp	#LR__0673
08274     2E 00 00 FF 
08278     08 E4 05 F1 | 	add	objptr, ##23560
0827c     F2 2C 02 FB | 	rdlong	local08, objptr
08280     03 2C 66 F0 | 	shl	local08, #3
08284     02 00 00 FF 
08288     38 E4 85 F1 | 	sub	objptr, ##1080
0828c     F2 2C 02 F1 | 	add	local08, objptr
08290     04 2C 06 F1 | 	add	local08, #4
08294     16 2D 02 FB | 	rdlong	local08, local08
08298     FE 2D 0E F2 | 	cmp	local08, #510 wz
0829c     2B 00 00 FF 
082a0     D0 E5 85 F1 | 	sub	objptr, ##22480
082a4     14 FF 9F 5D |  if_ne	jmp	#LR__0670
082a8                 | LR__0673
082a8                 | LR__0674
082a8     15 1F 02 F6 | 	mov	local01, local07
082ac     03 28 66 F0 | 	shl	local06, #3
082b0     2B 00 00 FF 
082b4     D0 E5 05 F1 | 	add	objptr, ##22480
082b8     F2 28 02 F1 | 	add	local06, objptr
082bc     04 28 06 F1 | 	add	local06, #4
082c0     14 23 02 FB | 	rdlong	local03, local06
082c4     0F 2D 02 F6 | 	mov	local08, local01
082c8     10 2B 02 F6 | 	mov	local07, local02
082cc     11 29 02 F6 | 	mov	local06, local03
082d0     15 00 00 FF 
082d4     70 E4 05 F1 | 	add	objptr, ##10864
082d8     F2 26 02 FB | 	rdlong	local05, objptr
082dc     13 13 02 F6 | 	mov	arg01, local05
082e0     01 12 66 F0 | 	shl	arg01, #1
082e4     13 13 02 F1 | 	add	arg01, local05
082e8     02 12 66 F0 | 	shl	arg01, #2
082ec     03 00 00 FF 
082f0     00 E4 85 F1 | 	sub	objptr, ##1536
082f4     F2 12 02 F1 | 	add	arg01, objptr
082f8     09 2D 62 FC | 	wrlong	local08, arg01
082fc     03 00 00 FF 
08300     00 E4 05 F1 | 	add	objptr, ##1536
08304     F2 2C 02 FB | 	rdlong	local08, objptr
08308     16 2F 02 F6 | 	mov	local09, local08
0830c     01 2E 66 F0 | 	shl	local09, #1
08310     16 2F 02 F1 | 	add	local09, local08
08314     02 2E 66 F0 | 	shl	local09, #2
08318     03 00 00 FF 
0831c     00 E4 85 F1 | 	sub	objptr, ##1536
08320     F2 2E 02 F1 | 	add	local09, objptr
08324     04 2E 06 F1 | 	add	local09, #4
08328     17 2B 62 FC | 	wrlong	local07, local09
0832c     03 00 00 FF 
08330     00 E4 05 F1 | 	add	objptr, ##1536
08334     F2 2C 02 FB | 	rdlong	local08, objptr
08338     16 31 02 F6 | 	mov	local10, local08
0833c     01 30 66 F0 | 	shl	local10, #1
08340     16 31 02 F1 | 	add	local10, local08
08344     02 30 66 F0 | 	shl	local10, #2
08348     03 00 00 FF 
0834c     00 E4 85 F1 | 	sub	objptr, ##1536
08350     F2 30 02 F1 | 	add	local10, objptr
08354     08 30 06 F1 | 	add	local10, #8
08358     18 29 62 FC | 	wrlong	local06, local10
0835c     03 00 00 FF 
08360     00 E4 05 F1 | 	add	objptr, ##1536
08364     F2 2C 02 FB | 	rdlong	local08, objptr
08368     01 2C 06 F1 | 	add	local08, #1
0836c     F2 2C 62 FC | 	wrlong	local08, objptr
08370     41 00 00 FF 
08374     40 E4 85 F1 | 	sub	objptr, ##33344
08378                 | ' 
08378                 | ' t2.result.uresult=numpar
08378                 | ' 
08378                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
08378                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
08378                 | ' 
08378                 | '   
08378                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
08378     FF FF 7F FF 
0837c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
08380     B8 00 90 5D |  if_ne	jmp	#LR__0675
08384     15 22 06 F6 | 	mov	local03, #21
08388     0F 2D 02 F6 | 	mov	local08, local01
0838c     10 2B 02 F6 | 	mov	local07, local02
08390     11 29 02 F6 | 	mov	local06, local03
08394     41 00 00 FF 
08398     40 E4 05 F1 | 	add	objptr, ##33344
0839c     F2 26 02 FB | 	rdlong	local05, objptr
083a0     13 13 02 F6 | 	mov	arg01, local05
083a4     01 12 66 F0 | 	shl	arg01, #1
083a8     13 13 02 F1 | 	add	arg01, local05
083ac     02 12 66 F0 | 	shl	arg01, #2
083b0     03 00 00 FF 
083b4     00 E4 85 F1 | 	sub	objptr, ##1536
083b8     F2 12 02 F1 | 	add	arg01, objptr
083bc     09 2D 62 FC | 	wrlong	local08, arg01
083c0     03 00 00 FF 
083c4     00 E4 05 F1 | 	add	objptr, ##1536
083c8     F2 30 02 FB | 	rdlong	local10, objptr
083cc     18 2F 02 F6 | 	mov	local09, local10
083d0     01 2E 66 F0 | 	shl	local09, #1
083d4     18 2F 02 F1 | 	add	local09, local10
083d8     02 2E 66 F0 | 	shl	local09, #2
083dc     03 00 00 FF 
083e0     00 E4 85 F1 | 	sub	objptr, ##1536
083e4     F2 2E 02 F1 | 	add	local09, objptr
083e8     04 2E 06 F1 | 	add	local09, #4
083ec     17 2B 62 FC | 	wrlong	local07, local09
083f0     03 00 00 FF 
083f4     00 E4 05 F1 | 	add	objptr, ##1536
083f8     F2 2E 02 FB | 	rdlong	local09, objptr
083fc     17 31 02 F6 | 	mov	local10, local09
08400     01 30 66 F0 | 	shl	local10, #1
08404     17 31 02 F1 | 	add	local10, local09
08408     02 30 66 F0 | 	shl	local10, #2
0840c     03 00 00 FF 
08410     00 E4 85 F1 | 	sub	objptr, ##1536
08414     F2 30 02 F1 | 	add	local10, objptr
08418     08 30 06 F1 | 	add	local10, #8
0841c     18 29 62 FC | 	wrlong	local06, local10
08420     03 00 00 FF 
08424     00 E4 05 F1 | 	add	objptr, ##1536
08428     F2 2C 02 FB | 	rdlong	local08, objptr
0842c     01 2C 06 F1 | 	add	local08, #1
08430     F2 2C 62 FC | 	wrlong	local08, objptr
08434     41 00 00 FF 
08438     40 E4 85 F1 | 	sub	objptr, ##33344
0843c                 | LR__0675
0843c     A7 F0 03 F6 | 	mov	ptra, fp
08440     B2 00 A0 FD | 	call	#popregs_
08444                 | _getfun_ret
08444     2D 00 64 FD | 	ret
08448                 | 
08448                 | '   
08448                 | '   
08448                 | ' sub getvar(m as integer) 
08448                 | _getvar
08448     0A 4A 05 F6 | 	mov	COUNT_, #10
0844c     A8 00 A0 FD | 	call	#pushregs_
08450                 | _getvar_enter
08450     09 25 02 F6 | 	mov	local04, arg01
08454     2E 00 00 FF 
08458     08 E4 05 F1 | 	add	objptr, ##23560
0845c     F2 14 02 FB | 	rdlong	arg02, objptr
08460     03 14 66 F0 | 	shl	arg02, #3
08464     02 00 00 FF 
08468     38 E4 85 F1 | 	sub	objptr, ##1080
0846c     F2 14 02 F1 | 	add	arg02, objptr
08470     0A 27 02 FB | 	rdlong	local05, arg02
08474     13 13 02 F6 | 	mov	arg01, local05
08478     01 14 06 F6 | 	mov	arg02, #1
0847c     2B 00 00 FF 
08480     D0 E5 85 F1 | 	sub	objptr, ##22480
08484     80 F4 B0 FD | 	call	#__system__Right_S
08488     FD 28 02 F6 | 	mov	local06, result1
0848c     01 2A 66 F6 | 	neg	local07, #1
08490                 | ' 
08490                 | ' varname$=lparts(ct).part$
08490                 | ' suffix$=right$(varname$,1)
08490                 | ' j=-1
08490                 | ' 
08490                 | ' for i=0 to varnum-1
08490     00 2C 06 F6 | 	mov	local08, #0
08494     2B 00 00 FF 
08498     CC E5 05 F1 | 	add	objptr, ##22476
0849c     F2 2E 02 FB | 	rdlong	local09, objptr
084a0     2B 00 00 FF 
084a4     CC E5 85 F1 | 	sub	objptr, ##22476
084a8                 | LR__0680
084a8     17 2D 52 F2 | 	cmps	local08, local09 wc
084ac     38 00 90 3D |  if_ae	jmp	#LR__0681
084b0                 | '   if variables(i).name=varname$ then j=i : exit
084b0     16 15 02 F6 | 	mov	arg02, local08
084b4     04 14 66 F0 | 	shl	arg02, #4
084b8     0B 00 00 FF 
084bc     CC E5 05 F1 | 	add	objptr, ##6092
084c0     F2 14 02 F1 | 	add	arg02, objptr
084c4     0A 13 02 FB | 	rdlong	arg01, arg02
084c8     13 15 02 F6 | 	mov	arg02, local05
084cc     0B 00 00 FF 
084d0     CC E5 85 F1 | 	sub	objptr, ##6092
084d4     C0 D3 B0 FD | 	call	#__system___string_cmp
084d8     00 FA 0D F2 | 	cmp	result1, #0 wz
084dc     16 2B 02 A6 |  if_e	mov	local07, local08
084e0     01 2C 06 51 |  if_ne	add	local08, #1
084e4     C0 FF 9F 5D |  if_ne	jmp	#LR__0680
084e8                 | LR__0681
084e8                 | ' if  j=-1 andalso varnum<maxvars then   
084e8     FF FF 7F FF 
084ec     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
084f0     A8 00 90 5D |  if_ne	jmp	#LR__0682
084f4     2B 00 00 FF 
084f8     CC E5 05 F1 | 	add	objptr, ##22476
084fc     F2 2E 02 FB | 	rdlong	local09, objptr
08500     2B 00 00 FF 
08504     CC E5 85 F1 | 	sub	objptr, ##22476
08508     01 00 00 FF 
0850c     FF 2F 56 F2 | 	cmps	local09, ##1023 wc
08510     88 00 90 3D |  if_ae	jmp	#LR__0682
08514     2B 00 00 FF 
08518     CC E5 05 F1 | 	add	objptr, ##22476
0851c     F2 2E 02 FB | 	rdlong	local09, objptr
08520     04 2E 66 F0 | 	shl	local09, #4
08524     20 00 00 FF 
08528     00 E4 85 F1 | 	sub	objptr, ##16384
0852c     F2 2E 02 F1 | 	add	local09, objptr
08530     17 27 62 FC | 	wrlong	local05, local09
08534     20 00 00 FF 
08538     00 E4 05 F1 | 	add	objptr, ##16384
0853c     F2 2E 02 FB | 	rdlong	local09, objptr
08540     04 2E 66 F0 | 	shl	local09, #4
08544     20 00 00 FF 
08548     00 E4 85 F1 | 	sub	objptr, ##16384
0854c     F2 2E 02 F1 | 	add	local09, objptr
08550     04 2E 06 F1 | 	add	local09, #4
08554     17 01 68 FC | 	wrlong	#0, local09
08558     20 00 00 FF 
0855c     00 E4 05 F1 | 	add	objptr, ##16384
08560     F2 2E 02 FB | 	rdlong	local09, objptr
08564     04 2E 66 F0 | 	shl	local09, #4
08568     20 00 00 FF 
0856c     00 E4 85 F1 | 	sub	objptr, ##16384
08570     F2 2E 02 F1 | 	add	local09, objptr
08574     0C 2E 06 F1 | 	add	local09, #12
08578     17 39 68 FC | 	wrlong	#28, local09
0857c     20 00 00 FF 
08580     00 E4 05 F1 | 	add	objptr, ##16384
08584     F2 2E 02 FB | 	rdlong	local09, objptr
08588     17 2B 02 F6 | 	mov	local07, local09
0858c     01 2E 06 F1 | 	add	local09, #1
08590     F2 2E 62 FC | 	wrlong	local09, objptr
08594     2B 00 00 FF 
08598     CC E5 85 F1 | 	sub	objptr, ##22476
0859c                 | LR__0682
0859c     00 2E 06 F6 | 	mov	local09, #0
085a0                 | ' numpar=0
085a0                 | ' ' check if it is an array
085a0                 | ' 
085a0                 | ' if lparts(ct+1).token=token_lpar then
085a0     2E 00 00 FF 
085a4     08 E4 05 F1 | 	add	objptr, ##23560
085a8     F2 2C 02 FB | 	rdlong	local08, objptr
085ac     01 2C 06 F1 | 	add	local08, #1
085b0     03 2C 66 F0 | 	shl	local08, #3
085b4     02 00 00 FF 
085b8     38 E4 85 F1 | 	sub	objptr, ##1080
085bc     F2 2C 02 F1 | 	add	local08, objptr
085c0     04 2C 06 F1 | 	add	local08, #4
085c4     16 2D 02 FB | 	rdlong	local08, local08
085c8     15 2C 0E F2 | 	cmp	local08, #21 wz
085cc     2B 00 00 FF 
085d0     D0 E5 85 F1 | 	sub	objptr, ##22480
085d4     08 01 90 5D |  if_ne	jmp	#LR__0687
085d8     2E 00 00 FF 
085dc     08 E4 05 F1 | 	add	objptr, ##23560
085e0     F2 30 02 FB | 	rdlong	local10, objptr
085e4     01 30 06 F1 | 	add	local10, #1
085e8     F2 30 62 FC | 	wrlong	local10, objptr
085ec     2E 00 00 FF 
085f0     08 E4 85 F1 | 	sub	objptr, ##23560
085f4                 | '   ct+=1 											' omit this lpar, this is for expr list
085f4                 | '   do
085f4                 | LR__0683
085f4     2E 00 00 FF 
085f8     08 E4 05 F1 | 	add	objptr, ##23560
085fc     F2 2C 02 FB | 	rdlong	local08, objptr
08600     01 2C 06 F1 | 	add	local08, #1
08604     F2 2C 62 FC | 	wrlong	local08, objptr
08608                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
08608                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
08608     03 2C 66 F0 | 	shl	local08, #3
0860c     02 00 00 FF 
08610     38 E4 85 F1 | 	sub	objptr, ##1080
08614     F2 2C 02 F1 | 	add	local08, objptr
08618     04 2C 06 F1 | 	add	local08, #4
0861c     16 31 02 FB | 	rdlong	local10, local08
08620     15 30 0E F2 | 	cmp	local10, #21 wz
08624     2B 00 00 FF 
08628     D0 E5 85 F1 | 	sub	objptr, ##22480
0862c     40 00 90 5D |  if_ne	jmp	#LR__0684
08630     2E 00 00 FF 
08634     08 E4 05 F1 | 	add	objptr, ##23560
08638     F2 30 02 FB | 	rdlong	local10, objptr
0863c     01 30 06 F1 | 	add	local10, #1
08640     F2 30 62 FC | 	wrlong	local10, objptr
08644     2E 00 00 FF 
08648     08 E4 85 F1 | 	sub	objptr, ##23560
0864c     74 EE BF FD | 	call	#_expr
08650     2E 00 00 FF 
08654     08 E4 05 F1 | 	add	objptr, ##23560
08658     F2 30 02 FB | 	rdlong	local10, objptr
0865c     01 30 06 F1 | 	add	local10, #1
08660     F2 30 62 FC | 	wrlong	local10, objptr
08664     2E 00 00 FF 
08668     08 E4 85 F1 | 	sub	objptr, ##23560
0866c     04 00 90 FD | 	jmp	#LR__0685
08670                 | LR__0684
08670     50 EE BF FD | 	call	#_expr
08674                 | LR__0685
08674     01 2E 06 F1 | 	add	local09, #1
08678     2E 00 00 FF 
0867c     08 E4 05 F1 | 	add	objptr, ##23560
08680     F2 2C 02 FB | 	rdlong	local08, objptr
08684     03 2C 66 F0 | 	shl	local08, #3
08688     02 00 00 FF 
0868c     38 E4 85 F1 | 	sub	objptr, ##1080
08690     F2 2C 02 F1 | 	add	local08, objptr
08694     04 2C 06 F1 | 	add	local08, #4
08698     16 31 02 FB | 	rdlong	local10, local08
0869c     14 30 0E F2 | 	cmp	local10, #20 wz
086a0     2B 00 00 FF 
086a4     D0 E5 85 F1 | 	sub	objptr, ##22480
086a8     34 00 90 AD |  if_e	jmp	#LR__0686
086ac     2E 00 00 FF 
086b0     08 E4 05 F1 | 	add	objptr, ##23560
086b4     F2 30 02 FB | 	rdlong	local10, objptr
086b8     03 30 66 F0 | 	shl	local10, #3
086bc     02 00 00 FF 
086c0     38 E4 85 F1 | 	sub	objptr, ##1080
086c4     F2 30 02 F1 | 	add	local10, objptr
086c8     04 30 06 F1 | 	add	local10, #4
086cc     18 31 02 FB | 	rdlong	local10, local10
086d0     FE 31 0E F2 | 	cmp	local10, #510 wz
086d4     2B 00 00 FF 
086d8     D0 E5 85 F1 | 	sub	objptr, ##22480
086dc     14 FF 9F 5D |  if_ne	jmp	#LR__0683
086e0                 | LR__0686
086e0                 | LR__0687
086e0     17 21 02 F6 | 	mov	local02, local09
086e4     11 22 06 F6 | 	mov	local03, #17
086e8     15 1F 02 F6 | 	mov	local01, local07
086ec     0F 31 02 F6 | 	mov	local10, local01
086f0     10 2F 02 F6 | 	mov	local09, local02
086f4     11 2D 02 F6 | 	mov	local08, local03
086f8     41 00 00 FF 
086fc     40 E4 05 F1 | 	add	objptr, ##33344
08700     F2 2A 02 FB | 	rdlong	local07, objptr
08704     15 29 02 F6 | 	mov	local06, local07
08708     01 28 66 F0 | 	shl	local06, #1
0870c     15 29 02 F1 | 	add	local06, local07
08710     02 28 66 F0 | 	shl	local06, #2
08714     03 00 00 FF 
08718     00 E4 85 F1 | 	sub	objptr, ##1536
0871c     F2 28 02 F1 | 	add	local06, objptr
08720     14 31 62 FC | 	wrlong	local10, local06
08724     03 00 00 FF 
08728     00 E4 05 F1 | 	add	objptr, ##1536
0872c     F2 30 02 FB | 	rdlong	local10, objptr
08730     18 27 02 F6 | 	mov	local05, local10
08734     01 26 66 F0 | 	shl	local05, #1
08738     18 27 02 F1 | 	add	local05, local10
0873c     02 26 66 F0 | 	shl	local05, #2
08740     03 00 00 FF 
08744     00 E4 85 F1 | 	sub	objptr, ##1536
08748     F2 26 02 F1 | 	add	local05, objptr
0874c     04 26 06 F1 | 	add	local05, #4
08750     13 2F 62 FC | 	wrlong	local09, local05
08754     03 00 00 FF 
08758     00 E4 05 F1 | 	add	objptr, ##1536
0875c     F2 30 02 FB | 	rdlong	local10, objptr
08760     18 FB 01 F6 | 	mov	result1, local10
08764     01 FA 65 F0 | 	shl	result1, #1
08768     18 FB 01 F1 | 	add	result1, local10
0876c     02 FA 65 F0 | 	shl	result1, #2
08770     03 00 00 FF 
08774     00 E4 85 F1 | 	sub	objptr, ##1536
08778     F2 FA 01 F1 | 	add	result1, objptr
0877c     08 FA 05 F1 | 	add	result1, #8
08780     FD 2C 62 FC | 	wrlong	local08, result1
08784     03 00 00 FF 
08788     00 E4 05 F1 | 	add	objptr, ##1536
0878c     F2 30 02 FB | 	rdlong	local10, objptr
08790     01 30 06 F1 | 	add	local10, #1
08794     F2 30 62 FC | 	wrlong	local10, objptr
08798     41 00 00 FF 
0879c     40 E4 85 F1 | 	sub	objptr, ##33344
087a0                 | ' 
087a0                 | ' t2.result.twowords(1)=numpar
087a0                 | ' 
087a0                 | ' 
087a0                 | ' 
087a0                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
087a0                 | ' 
087a0                 | ' 
087a0                 | '  
087a0                 | ' 
087a0                 | ' 701 
087a0                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
087a0                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
087a0     FF FF 7F FF 
087a4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
087a8     B8 00 90 5D |  if_ne	jmp	#LR__0688
087ac     15 22 06 F6 | 	mov	local03, #21
087b0     0F 31 02 F6 | 	mov	local10, local01
087b4     10 2F 02 F6 | 	mov	local09, local02
087b8     11 2D 02 F6 | 	mov	local08, local03
087bc     41 00 00 FF 
087c0     40 E4 05 F1 | 	add	objptr, ##33344
087c4     F2 2A 02 FB | 	rdlong	local07, objptr
087c8     15 29 02 F6 | 	mov	local06, local07
087cc     01 28 66 F0 | 	shl	local06, #1
087d0     15 29 02 F1 | 	add	local06, local07
087d4     02 28 66 F0 | 	shl	local06, #2
087d8     03 00 00 FF 
087dc     00 E4 85 F1 | 	sub	objptr, ##1536
087e0     F2 28 02 F1 | 	add	local06, objptr
087e4     14 31 62 FC | 	wrlong	local10, local06
087e8     03 00 00 FF 
087ec     00 E4 05 F1 | 	add	objptr, ##1536
087f0     F2 1E 02 FB | 	rdlong	local01, objptr
087f4     0F 27 02 F6 | 	mov	local05, local01
087f8     01 26 66 F0 | 	shl	local05, #1
087fc     0F 27 02 F1 | 	add	local05, local01
08800     02 26 66 F0 | 	shl	local05, #2
08804     03 00 00 FF 
08808     00 E4 85 F1 | 	sub	objptr, ##1536
0880c     F2 26 02 F1 | 	add	local05, objptr
08810     04 26 06 F1 | 	add	local05, #4
08814     13 2F 62 FC | 	wrlong	local09, local05
08818     03 00 00 FF 
0881c     00 E4 05 F1 | 	add	objptr, ##1536
08820     F2 1E 02 FB | 	rdlong	local01, objptr
08824     0F FB 01 F6 | 	mov	result1, local01
08828     01 FA 65 F0 | 	shl	result1, #1
0882c     0F FB 01 F1 | 	add	result1, local01
08830     02 FA 65 F0 | 	shl	result1, #2
08834     03 00 00 FF 
08838     00 E4 85 F1 | 	sub	objptr, ##1536
0883c     F2 FA 01 F1 | 	add	result1, objptr
08840     08 FA 05 F1 | 	add	result1, #8
08844     FD 2C 62 FC | 	wrlong	local08, result1
08848     03 00 00 FF 
0884c     00 E4 05 F1 | 	add	objptr, ##1536
08850     F2 30 02 FB | 	rdlong	local10, objptr
08854     01 30 06 F1 | 	add	local10, #1
08858     F2 30 62 FC | 	wrlong	local10, objptr
0885c     41 00 00 FF 
08860     40 E4 85 F1 | 	sub	objptr, ##33344
08864                 | LR__0688
08864     A7 F0 03 F6 | 	mov	ptra, fp
08868     B2 00 A0 FD | 	call	#popregs_
0886c                 | _getvar_ret
0886c     2D 00 64 FD | 	ret
08870                 | 
08870                 | ' 
08870                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
08870                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
08870                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
08870                 | ' 
08870                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
08870                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
08870                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
08870                 | ' 
08870                 | ' function execute_line (astart=0 as integer) as integer
08870                 | _execute_line
08870     04 4A 05 F6 | 	mov	COUNT_, #4
08874     A8 00 A0 FD | 	call	#pushregs_
08878     50 00 00 FF 
0887c     78 E5 05 F1 | 	add	objptr, ##41336
08880     F2 00 68 FC | 	wrlong	#0, objptr
08884                 | ' runptr2=0
08884                 | ' for lineptr_e=astart to lineptr-1
08884     0F 00 00 FF 
08888     34 E5 85 F1 | 	sub	objptr, ##7988
0888c     F2 12 62 FC | 	wrlong	arg01, objptr
08890     04 E4 85 F1 | 	sub	objptr, #4
08894     F2 1E 02 FB | 	rdlong	local01, objptr
08898     41 00 00 FF 
0889c     40 E4 85 F1 | 	sub	objptr, ##33344
088a0                 | LR__0690
088a0     41 00 00 FF 
088a4     44 E4 05 F1 | 	add	objptr, ##33348
088a8     F2 FA 01 FB | 	rdlong	result1, objptr
088ac     41 00 00 FF 
088b0     44 E4 85 F1 | 	sub	objptr, ##33348
088b4     0F FB 51 F2 | 	cmps	result1, local01 wc
088b8     98 00 90 3D |  if_ae	jmp	#LR__0691
088bc     41 00 00 FF 
088c0     44 E4 05 F1 | 	add	objptr, ##33348
088c4     F2 FA 01 FB | 	rdlong	result1, objptr
088c8     FD 20 02 F6 | 	mov	local02, result1
088cc     01 20 66 F0 | 	shl	local02, #1
088d0     FD 20 02 F1 | 	add	local02, result1
088d4     02 20 66 F0 | 	shl	local02, #2
088d8     03 00 00 FF 
088dc     04 E4 85 F1 | 	sub	objptr, ##1540
088e0     F2 20 02 F1 | 	add	local02, objptr
088e4     08 20 06 F1 | 	add	local02, #8
088e8     10 21 02 FB | 	rdlong	local02, local02
088ec     10 21 E2 F8 | 	getbyte	local02, local02, #0
088f0     02 20 66 F0 | 	shl	local02, #2
088f4     04 00 00 FF 
088f8     1C E4 85 F1 | 	sub	objptr, ##2076
088fc     F2 20 02 F1 | 	add	local02, objptr
08900     10 21 02 FB | 	rdlong	local02, local02
08904     10 23 02 F6 | 	mov	local03, local02
08908     13 20 46 F7 | 	zerox	local02, #19
0890c     14 22 46 F0 | 	shr	local03, #20
08910     02 22 66 F0 | 	shl	local03, #2
08914     ED 22 02 F1 | 	add	local03, __methods__
08918     11 23 02 FB | 	rdlong	local03, local03
0891c     3A 00 00 FF 
08920     24 E4 85 F1 | 	sub	objptr, ##29732
08924     F2 24 02 F6 | 	mov	local04, objptr
08928     10 E5 01 F6 | 	mov	objptr, local02
0892c     2D 22 62 FD | 	call	local03
08930     12 E5 01 F6 | 	mov	objptr, local04
08934     41 00 00 FF 
08938     44 E4 05 F1 | 	add	objptr, ##33348
0893c     F2 24 02 FB | 	rdlong	local04, objptr
08940     01 24 06 F1 | 	add	local04, #1
08944     F2 24 62 FC | 	wrlong	local04, objptr
08948     41 00 00 FF 
0894c     44 E4 85 F1 | 	sub	objptr, ##33348
08950     4C FF 9F FD | 	jmp	#LR__0690
08954                 | LR__0691
08954                 | ' return runptr2
08954     50 00 00 FF 
08958     78 E5 05 F1 | 	add	objptr, ##41336
0895c     F2 FA 01 FB | 	rdlong	result1, objptr
08960     50 00 00 FF 
08964     78 E5 85 F1 | 	sub	objptr, ##41336
08968     A7 F0 03 F6 | 	mov	ptra, fp
0896c     B2 00 A0 FD | 	call	#popregs_
08970                 | _execute_line_ret
08970     2D 00 64 FD | 	ret
08974                 | 
08974                 | ' 
08974                 | ' 
08974                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
08974                 | ' 
08974                 | ' function pop() as expr_result
08974                 | _pop
08974                 | ' 
08974                 | ' if stackpointer=0 then
08974     3A 00 00 FF 
08978     1C E4 05 F1 | 	add	objptr, ##29724
0897c     F2 FA 09 FB | 	rdlong	result1, objptr wz
08980     3A 00 00 FF 
08984     1C E4 85 F1 | 	sub	objptr, ##29724
08988     FF 04 06 A6 |  if_e	mov	_var03, #255
0898c     18 00 06 A6 |  if_e	mov	_var01, #24
08990     68 00 90 AD |  if_e	jmp	#LR__0700
08994     3A 00 00 FF 
08998     1C E4 05 F1 | 	add	objptr, ##29724
0899c     F2 FA 01 FB | 	rdlong	result1, objptr
089a0     01 FA 85 F1 | 	sub	result1, #1
089a4     F2 FA 61 FC | 	wrlong	result1, objptr
089a8     FD FE 01 F6 | 	mov	result3, result1
089ac     01 FE 65 F0 | 	shl	result3, #1
089b0     FD FE 01 F1 | 	add	result3, result1
089b4     02 FE 65 F0 | 	shl	result3, #2
089b8     0C 00 00 FF 
089bc     0C E4 85 F1 | 	sub	objptr, ##6156
089c0     F2 FE 01 F1 | 	add	result3, objptr
089c4     FF 00 02 FB | 	rdlong	_var01, result3
089c8     04 FE 05 F1 | 	add	result3, #4
089cc     FF FE 01 FB | 	rdlong	result3, result3
089d0     FD FC 01 F6 | 	mov	result2, result1
089d4     01 FC 65 F0 | 	shl	result2, #1
089d8     FD FC 01 F1 | 	add	result2, result1
089dc     02 FC 65 F0 | 	shl	result2, #2
089e0     F2 FC 01 F1 | 	add	result2, objptr
089e4     08 FC 05 F1 | 	add	result2, #8
089e8     FE FA 01 FB | 	rdlong	result1, result2
089ec     FF 02 02 F6 | 	mov	_var02, result3
089f0     FD 04 02 F6 | 	mov	_var03, result1
089f4     2E 00 00 FF 
089f8     10 E4 85 F1 | 	sub	objptr, ##23568
089fc                 | LR__0700
089fc                 | ' return t1
089fc     01 FD 01 F6 | 	mov	result2, _var02
08a00     02 FF 01 F6 | 	mov	result3, _var03
08a04     00 FB 01 F6 | 	mov	result1, _var01
08a08                 | _pop_ret
08a08     2D 00 64 FD | 	ret
08a0c                 | 
08a0c                 | ' 
08a0c                 | ' sub push(t1 as expr_result )
08a0c                 | _push
08a0c                 | ' 
08a0c                 | ' 'print "In push: "; t1.result_type
08a0c                 | ' 'print "In push: "; t1.result.uresult
08a0c                 | ' 
08a0c                 | ' if stackpointer<maxstack then 
08a0c     3A 00 00 FF 
08a10     1C E4 05 F1 | 	add	objptr, ##29724
08a14     F2 00 02 FB | 	rdlong	_var01, objptr
08a18     3A 00 00 FF 
08a1c     1C E4 85 F1 | 	sub	objptr, ##29724
08a20     01 00 00 FF 
08a24     00 00 56 F2 | 	cmps	_var01, ##512 wc
08a28     BC 00 90 3D |  if_ae	jmp	#LR__0710
08a2c     09 01 02 FB | 	rdlong	_var01, arg01
08a30     04 12 06 F1 | 	add	arg01, #4
08a34     09 03 02 FB | 	rdlong	_var02, arg01
08a38     04 12 06 F1 | 	add	arg01, #4
08a3c     09 13 02 FB | 	rdlong	arg01, arg01
08a40     3A 00 00 FF 
08a44     1C E4 05 F1 | 	add	objptr, ##29724
08a48     F2 04 02 FB | 	rdlong	_var03, objptr
08a4c     02 07 02 F6 | 	mov	_var04, _var03
08a50     01 06 66 F0 | 	shl	_var04, #1
08a54     02 07 02 F1 | 	add	_var04, _var03
08a58     02 06 66 F0 | 	shl	_var04, #2
08a5c     0C 00 00 FF 
08a60     0C E4 85 F1 | 	sub	objptr, ##6156
08a64     F2 06 02 F1 | 	add	_var04, objptr
08a68     03 01 62 FC | 	wrlong	_var01, _var04
08a6c     0C 00 00 FF 
08a70     0C E4 05 F1 | 	add	objptr, ##6156
08a74     F2 06 02 FB | 	rdlong	_var04, objptr
08a78     03 05 02 F6 | 	mov	_var03, _var04
08a7c     01 04 66 F0 | 	shl	_var03, #1
08a80     03 05 02 F1 | 	add	_var03, _var04
08a84     02 04 66 F0 | 	shl	_var03, #2
08a88     0C 00 00 FF 
08a8c     0C E4 85 F1 | 	sub	objptr, ##6156
08a90     F2 04 02 F1 | 	add	_var03, objptr
08a94     04 04 06 F1 | 	add	_var03, #4
08a98     02 03 62 FC | 	wrlong	_var02, _var03
08a9c     0C 00 00 FF 
08aa0     0C E4 05 F1 | 	add	objptr, ##6156
08aa4     F2 06 02 FB | 	rdlong	_var04, objptr
08aa8     03 05 02 F6 | 	mov	_var03, _var04
08aac     01 04 66 F0 | 	shl	_var03, #1
08ab0     03 05 02 F1 | 	add	_var03, _var04
08ab4     02 04 66 F0 | 	shl	_var03, #2
08ab8     0C 00 00 FF 
08abc     0C E4 85 F1 | 	sub	objptr, ##6156
08ac0     F2 04 02 F1 | 	add	_var03, objptr
08ac4     08 04 06 F1 | 	add	_var03, #8
08ac8     02 13 62 FC | 	wrlong	arg01, _var03
08acc     0C 00 00 FF 
08ad0     0C E4 05 F1 | 	add	objptr, ##6156
08ad4     F2 00 02 FB | 	rdlong	_var01, objptr
08ad8     01 00 06 F1 | 	add	_var01, #1
08adc     F2 00 62 FC | 	wrlong	_var01, objptr
08ae0     3A 00 00 FF 
08ae4     1C E4 85 F1 | 	sub	objptr, ##29724
08ae8                 | LR__0710
08ae8                 | _push_ret
08ae8     2D 00 64 FD | 	ret
08aec                 | 
08aec                 | ' 
08aec                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
08aec                 | ' 
08aec                 | ' sub do_push
08aec                 | _do_push
08aec                 | ' if stackpointer<maxstack then 
08aec     3A 00 00 FF 
08af0     1C E4 05 F1 | 	add	objptr, ##29724
08af4     F2 00 02 FB | 	rdlong	_var01, objptr
08af8     3A 00 00 FF 
08afc     1C E4 85 F1 | 	sub	objptr, ##29724
08b00     01 00 00 FF 
08b04     00 00 56 F2 | 	cmps	_var01, ##512 wc
08b08     F8 00 90 3D |  if_ae	jmp	#LR__0720
08b0c     41 00 00 FF 
08b10     44 E4 05 F1 | 	add	objptr, ##33348
08b14     F2 02 02 FB | 	rdlong	_var02, objptr
08b18     01 05 02 F6 | 	mov	_var03, _var02
08b1c     01 04 66 F0 | 	shl	_var03, #1
08b20     01 05 02 F1 | 	add	_var03, _var02
08b24     02 04 66 F0 | 	shl	_var03, #2
08b28     03 00 00 FF 
08b2c     04 E4 85 F1 | 	sub	objptr, ##1540
08b30     F2 04 02 F1 | 	add	_var03, objptr
08b34     02 01 02 FB | 	rdlong	_var01, _var03
08b38     04 04 06 F1 | 	add	_var03, #4
08b3c     02 07 02 FB | 	rdlong	_var04, _var03
08b40     01 05 02 F6 | 	mov	_var03, _var02
08b44     01 04 66 F0 | 	shl	_var03, #1
08b48     01 05 02 F1 | 	add	_var03, _var02
08b4c     02 04 66 F0 | 	shl	_var03, #2
08b50     F2 04 02 F1 | 	add	_var03, objptr
08b54     08 04 06 F1 | 	add	_var03, #8
08b58     02 03 02 FB | 	rdlong	_var02, _var03
08b5c     04 00 00 FF 
08b60     24 E4 85 F1 | 	sub	objptr, ##2084
08b64     F2 04 02 FB | 	rdlong	_var03, objptr
08b68     02 09 02 F6 | 	mov	_var05, _var03
08b6c     01 08 66 F0 | 	shl	_var05, #1
08b70     02 09 02 F1 | 	add	_var05, _var03
08b74     02 08 66 F0 | 	shl	_var05, #2
08b78     0C 00 00 FF 
08b7c     0C E4 85 F1 | 	sub	objptr, ##6156
08b80     F2 08 02 F1 | 	add	_var05, objptr
08b84     04 01 62 FC | 	wrlong	_var01, _var05
08b88     0C 00 00 FF 
08b8c     0C E4 05 F1 | 	add	objptr, ##6156
08b90     F2 08 02 FB | 	rdlong	_var05, objptr
08b94     04 05 02 F6 | 	mov	_var03, _var05
08b98     01 04 66 F0 | 	shl	_var03, #1
08b9c     04 05 02 F1 | 	add	_var03, _var05
08ba0     02 04 66 F0 | 	shl	_var03, #2
08ba4     0C 00 00 FF 
08ba8     0C E4 85 F1 | 	sub	objptr, ##6156
08bac     F2 04 02 F1 | 	add	_var03, objptr
08bb0     04 04 06 F1 | 	add	_var03, #4
08bb4     02 07 62 FC | 	wrlong	_var04, _var03
08bb8     0C 00 00 FF 
08bbc     0C E4 05 F1 | 	add	objptr, ##6156
08bc0     F2 08 02 FB | 	rdlong	_var05, objptr
08bc4     04 07 02 F6 | 	mov	_var04, _var05
08bc8     01 06 66 F0 | 	shl	_var04, #1
08bcc     04 07 02 F1 | 	add	_var04, _var05
08bd0     02 06 66 F0 | 	shl	_var04, #2
08bd4     0C 00 00 FF 
08bd8     0C E4 85 F1 | 	sub	objptr, ##6156
08bdc     F2 06 02 F1 | 	add	_var04, objptr
08be0     08 06 06 F1 | 	add	_var04, #8
08be4     03 03 62 FC | 	wrlong	_var02, _var04
08be8     0C 00 00 FF 
08bec     0C E4 05 F1 | 	add	objptr, ##6156
08bf0     F2 00 02 FB | 	rdlong	_var01, objptr
08bf4     01 00 06 F1 | 	add	_var01, #1
08bf8     F2 00 62 FC | 	wrlong	_var01, objptr
08bfc     3A 00 00 FF 
08c00     1C E4 85 F1 | 	sub	objptr, ##29724
08c04                 | LR__0720
08c04                 | _do_push_ret
08c04     2D 00 64 FD | 	ret
08c08                 | 
08c08                 | ' 
08c08                 | '   
08c08                 | ' sub csave_block(address as ulong)
08c08                 | _csave_block
08c08     09 01 02 F6 | 	mov	_var01, arg01
08c0c                 | ' 
08c0c                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
08c0c                 | ' ' we enter it at the state of playing 1 kHz header tone
08c0c                 | ' 
08c0c                 | ' for i=0 to 63 step 2
08c0c     00 02 06 F6 | 	mov	_var02, #0
08c10                 | LR__0730
08c10                 | '   do: loop until lpeek(base+32*7)>32768
08c10     2D 00 00 FF 
08c14     D4 E5 05 F1 | 	add	objptr, ##23508
08c18     97 0C 48 FB | 	callpa	#(@LR__0732-@LR__0731)>>2,fcache_load_ptr_
08c1c                 | LR__0731
08c1c     F2 12 02 FB | 	rdlong	arg01, objptr
08c20     E0 12 06 F1 | 	add	arg01, #224
08c24     09 FB 01 FB | 	rdlong	result1, arg01
08c28     40 00 00 FF 
08c2c     01 FA 55 F2 | 	cmps	result1, ##32769 wc
08c30     E8 FF 9F CD |  if_b	jmp	#LR__0731
08c34                 | LR__0732
08c34     00 13 02 F6 | 	mov	arg01, _var01
08c38     01 05 02 F6 | 	mov	_var03, _var02
08c3c     02 04 66 F0 | 	shl	_var03, #2
08c40     02 13 02 F1 | 	add	arg01, _var03
08c44     09 07 02 FB | 	rdlong	_var04, arg01
08c48     24 00 00 FF 
08c4c     AC E4 05 F1 | 	add	objptr, ##18604
08c50     F2 06 62 FC | 	wrlong	_var04, objptr
08c54     52 00 00 FF 
08c58     80 E4 85 F1 | 	sub	objptr, ##42112
08c5c                 | '   q=lpeek(address+4*i)
08c5c                 | '      for bit=0 to 31
08c5c     00 08 06 F6 | 	mov	_var05, #0
08c60     97 84 48 FB | 	callpa	#(@LR__0737-@LR__0733)>>2,fcache_load_ptr_
08c64                 | LR__0733
08c64                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
08c64     52 00 00 FF 
08c68     80 E4 05 F1 | 	add	objptr, ##42112
08c6c     F2 06 02 FB | 	rdlong	_var04, objptr
08c70     52 00 00 FF 
08c74     80 E4 85 F1 | 	sub	objptr, ##42112
08c78     04 05 C2 F9 | 	decod	_var03, _var05
08c7c     02 07 CA F7 | 	test	_var04, _var03 wz
08c80     60 00 90 AD |  if_e	jmp	#LR__0734
08c84     04 05 02 F6 | 	mov	_var03, _var05
08c88     02 04 66 F0 | 	shl	_var03, #2
08c8c     4E 00 00 FF 
08c90     70 E4 05 F1 | 	add	objptr, ##40048
08c94     F2 04 02 F1 | 	add	_var03, objptr
08c98     02 FF 48 FC | 	wrbyte	#127, _var03
08c9c     04 05 02 F6 | 	mov	_var03, _var05
08ca0     02 04 66 F0 | 	shl	_var03, #2
08ca4     01 04 06 F1 | 	add	_var03, #1
08ca8     F2 04 02 F1 | 	add	_var03, objptr
08cac     02 01 49 FC | 	wrbyte	#128, _var03
08cb0     04 05 02 F6 | 	mov	_var03, _var05
08cb4     02 04 66 F0 | 	shl	_var03, #2
08cb8     02 04 06 F1 | 	add	_var03, #2
08cbc     F2 04 02 F1 | 	add	_var03, objptr
08cc0     02 FF 48 FC | 	wrbyte	#127, _var03
08cc4     04 05 02 F6 | 	mov	_var03, _var05
08cc8     02 04 66 F0 | 	shl	_var03, #2
08ccc     03 04 06 F1 | 	add	_var03, #3
08cd0     F2 04 02 F1 | 	add	_var03, objptr
08cd4     02 01 49 FC | 	wrbyte	#128, _var03
08cd8     4E 00 00 FF 
08cdc     70 E4 85 F1 | 	sub	objptr, ##40048
08ce0     5C 00 90 FD | 	jmp	#LR__0735
08ce4                 | LR__0734
08ce4     04 05 02 F6 | 	mov	_var03, _var05
08ce8     02 04 66 F0 | 	shl	_var03, #2
08cec     4E 00 00 FF 
08cf0     70 E4 05 F1 | 	add	objptr, ##40048
08cf4     F2 04 02 F1 | 	add	_var03, objptr
08cf8     02 01 49 FC | 	wrbyte	#128, _var03
08cfc     04 05 02 F6 | 	mov	_var03, _var05
08d00     02 04 66 F0 | 	shl	_var03, #2
08d04     01 04 06 F1 | 	add	_var03, #1
08d08     F2 04 02 F1 | 	add	_var03, objptr
08d0c     02 01 49 FC | 	wrbyte	#128, _var03
08d10     04 05 02 F6 | 	mov	_var03, _var05
08d14     02 04 66 F0 | 	shl	_var03, #2
08d18     02 04 06 F1 | 	add	_var03, #2
08d1c     F2 04 02 F1 | 	add	_var03, objptr
08d20     02 FF 48 FC | 	wrbyte	#127, _var03
08d24     04 05 02 F6 | 	mov	_var03, _var05
08d28     02 04 66 F0 | 	shl	_var03, #2
08d2c     03 04 06 F1 | 	add	_var03, #3
08d30     F2 04 02 F1 | 	add	_var03, objptr
08d34     02 FF 48 FC | 	wrbyte	#127, _var03
08d38     4E 00 00 FF 
08d3c     70 E4 85 F1 | 	sub	objptr, ##40048
08d40                 | LR__0735
08d40     01 08 06 F1 | 	add	_var05, #1
08d44     20 08 56 F2 | 	cmps	_var05, #32 wc
08d48     18 FF 9F CD |  if_b	jmp	#LR__0733
08d4c                 | '   do: loop until lpeek(base+32*7)<32768
08d4c     2D 00 00 FF 
08d50     D4 E5 05 F1 | 	add	objptr, ##23508
08d54                 | LR__0736
08d54     F2 12 02 FB | 	rdlong	arg01, objptr
08d58     E0 12 06 F1 | 	add	arg01, #224
08d5c     09 FB 01 FB | 	rdlong	result1, arg01
08d60     40 00 00 FF 
08d64     00 FA 55 F2 | 	cmps	result1, ##32768 wc
08d68     E8 FF 9F 3D |  if_ae	jmp	#LR__0736
08d6c                 | LR__0737
08d6c     00 13 02 F6 | 	mov	arg01, _var01
08d70     04 12 06 F1 | 	add	arg01, #4
08d74     01 05 02 F6 | 	mov	_var03, _var02
08d78     02 04 66 F0 | 	shl	_var03, #2
08d7c     02 13 02 F1 | 	add	arg01, _var03
08d80     09 07 02 FB | 	rdlong	_var04, arg01
08d84     24 00 00 FF 
08d88     AC E4 05 F1 | 	add	objptr, ##18604
08d8c     F2 06 62 FC | 	wrlong	_var04, objptr
08d90     52 00 00 FF 
08d94     80 E4 85 F1 | 	sub	objptr, ##42112
08d98                 | '   q=lpeek(address+4+4*i)
08d98                 | '      for bit=0 to 31
08d98     00 08 06 F6 | 	mov	_var05, #0
08d9c     97 94 48 FB | 	callpa	#(@LR__0741-@LR__0738)>>2,fcache_load_ptr_
08da0                 | LR__0738
08da0                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
08da0     52 00 00 FF 
08da4     80 E4 05 F1 | 	add	objptr, ##42112
08da8     F2 06 02 FB | 	rdlong	_var04, objptr
08dac     52 00 00 FF 
08db0     80 E4 85 F1 | 	sub	objptr, ##42112
08db4     04 05 C2 F9 | 	decod	_var03, _var05
08db8     02 07 CA F7 | 	test	_var04, _var03 wz
08dbc     80 00 90 AD |  if_e	jmp	#LR__0739
08dc0     04 0B 02 F6 | 	mov	_var06, _var05
08dc4     02 0A 66 F0 | 	shl	_var06, #2
08dc8     80 04 06 F6 | 	mov	_var03, #128
08dcc     05 05 02 F1 | 	add	_var03, _var06
08dd0     4E 00 00 FF 
08dd4     70 E4 05 F1 | 	add	objptr, ##40048
08dd8     F2 04 02 F1 | 	add	_var03, objptr
08ddc     02 FF 48 FC | 	wrbyte	#127, _var03
08de0     04 0B 02 F6 | 	mov	_var06, _var05
08de4     02 0A 66 F0 | 	shl	_var06, #2
08de8     80 04 06 F6 | 	mov	_var03, #128
08dec     05 05 02 F1 | 	add	_var03, _var06
08df0     01 04 06 F1 | 	add	_var03, #1
08df4     F2 04 02 F1 | 	add	_var03, objptr
08df8     02 01 49 FC | 	wrbyte	#128, _var03
08dfc     04 0B 02 F6 | 	mov	_var06, _var05
08e00     02 0A 66 F0 | 	shl	_var06, #2
08e04     80 04 06 F6 | 	mov	_var03, #128
08e08     05 05 02 F1 | 	add	_var03, _var06
08e0c     02 04 06 F1 | 	add	_var03, #2
08e10     F2 04 02 F1 | 	add	_var03, objptr
08e14     02 FF 48 FC | 	wrbyte	#127, _var03
08e18     04 0B 02 F6 | 	mov	_var06, _var05
08e1c     02 0A 66 F0 | 	shl	_var06, #2
08e20     80 04 06 F6 | 	mov	_var03, #128
08e24     05 05 02 F1 | 	add	_var03, _var06
08e28     03 04 06 F1 | 	add	_var03, #3
08e2c     F2 04 02 F1 | 	add	_var03, objptr
08e30     02 01 49 FC | 	wrbyte	#128, _var03
08e34     4E 00 00 FF 
08e38     70 E4 85 F1 | 	sub	objptr, ##40048
08e3c     7C 00 90 FD | 	jmp	#LR__0740
08e40                 | LR__0739
08e40     04 0B 02 F6 | 	mov	_var06, _var05
08e44     02 0A 66 F0 | 	shl	_var06, #2
08e48     80 04 06 F6 | 	mov	_var03, #128
08e4c     05 05 02 F1 | 	add	_var03, _var06
08e50     4E 00 00 FF 
08e54     70 E4 05 F1 | 	add	objptr, ##40048
08e58     F2 04 02 F1 | 	add	_var03, objptr
08e5c     02 01 49 FC | 	wrbyte	#128, _var03
08e60     04 0B 02 F6 | 	mov	_var06, _var05
08e64     02 0A 66 F0 | 	shl	_var06, #2
08e68     80 04 06 F6 | 	mov	_var03, #128
08e6c     05 05 02 F1 | 	add	_var03, _var06
08e70     01 04 06 F1 | 	add	_var03, #1
08e74     F2 04 02 F1 | 	add	_var03, objptr
08e78     02 01 49 FC | 	wrbyte	#128, _var03
08e7c     04 0B 02 F6 | 	mov	_var06, _var05
08e80     02 0A 66 F0 | 	shl	_var06, #2
08e84     80 04 06 F6 | 	mov	_var03, #128
08e88     05 05 02 F1 | 	add	_var03, _var06
08e8c     02 04 06 F1 | 	add	_var03, #2
08e90     F2 04 02 F1 | 	add	_var03, objptr
08e94     02 FF 48 FC | 	wrbyte	#127, _var03
08e98     04 0B 02 F6 | 	mov	_var06, _var05
08e9c     02 0A 66 F0 | 	shl	_var06, #2
08ea0     80 04 06 F6 | 	mov	_var03, #128
08ea4     05 05 02 F1 | 	add	_var03, _var06
08ea8     03 04 06 F1 | 	add	_var03, #3
08eac     F2 04 02 F1 | 	add	_var03, objptr
08eb0     02 FF 48 FC | 	wrbyte	#127, _var03
08eb4     4E 00 00 FF 
08eb8     70 E4 85 F1 | 	sub	objptr, ##40048
08ebc                 | LR__0740
08ebc     01 08 06 F1 | 	add	_var05, #1
08ec0     20 08 56 F2 | 	cmps	_var05, #32 wc
08ec4     D8 FE 9F CD |  if_b	jmp	#LR__0738
08ec8                 | LR__0741
08ec8     02 02 06 F1 | 	add	_var02, #2
08ecc     40 02 56 F2 | 	cmps	_var02, #64 wc
08ed0     3C FD 9F CD |  if_b	jmp	#LR__0730
08ed4                 | ' do: loop until lpeek(base+32*7)>32768
08ed4     2D 00 00 FF 
08ed8     D4 E5 05 F1 | 	add	objptr, ##23508
08edc     97 84 48 FB | 	callpa	#(@LR__0750-@LR__0742)>>2,fcache_load_ptr_
08ee0                 | LR__0742
08ee0     F2 12 02 FB | 	rdlong	arg01, objptr
08ee4     E0 12 06 F1 | 	add	arg01, #224
08ee8     09 FB 01 FB | 	rdlong	result1, arg01
08eec     40 00 00 FF 
08ef0     01 FA 55 F2 | 	cmps	result1, ##32769 wc
08ef4     E8 FF 9F CD |  if_b	jmp	#LR__0742
08ef8     2D 00 00 FF 
08efc     D4 E5 85 F1 | 	sub	objptr, ##23508
08f00                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
08f00     00 02 06 F6 | 	mov	_var02, #0
08f04                 | LR__0743
08f04     01 07 52 F6 | 	abs	_var04, _var02 wc
08f08     07 06 06 F5 | 	and	_var04, #7
08f0c     03 07 82 F6 | 	negc	_var04, _var04
08f10     04 06 56 F2 | 	cmps	_var04, #4 wc
08f14     20 00 90 3D |  if_ae	jmp	#LR__0744
08f18     01 0B 02 F6 | 	mov	_var06, _var02
08f1c     4E 00 00 FF 
08f20     70 E4 05 F1 | 	add	objptr, ##40048
08f24     F2 0A 02 F1 | 	add	_var06, objptr
08f28     05 FF 48 FC | 	wrbyte	#127, _var06
08f2c     4E 00 00 FF 
08f30     70 E4 85 F1 | 	sub	objptr, ##40048
08f34     1C 00 90 FD | 	jmp	#LR__0745
08f38                 | LR__0744
08f38     01 0B 02 F6 | 	mov	_var06, _var02
08f3c     4E 00 00 FF 
08f40     70 E4 05 F1 | 	add	objptr, ##40048
08f44     F2 0A 02 F1 | 	add	_var06, objptr
08f48     05 01 49 FC | 	wrbyte	#128, _var06
08f4c     4E 00 00 FF 
08f50     70 E4 85 F1 | 	sub	objptr, ##40048
08f54                 | LR__0745
08f54     01 02 06 F1 | 	add	_var02, #1
08f58     80 02 56 F2 | 	cmps	_var02, #128 wc
08f5c     A4 FF 9F CD |  if_b	jmp	#LR__0743
08f60                 | ' 
08f60                 | ' do: loop until lpeek(base+32*7)<32768
08f60     2D 00 00 FF 
08f64     D4 E5 05 F1 | 	add	objptr, ##23508
08f68                 | LR__0746
08f68     F2 12 02 FB | 	rdlong	arg01, objptr
08f6c     E0 12 06 F1 | 	add	arg01, #224
08f70     09 FB 01 FB | 	rdlong	result1, arg01
08f74     40 00 00 FF 
08f78     00 FA 55 F2 | 	cmps	result1, ##32768 wc
08f7c     E8 FF 9F 3D |  if_ae	jmp	#LR__0746
08f80     2D 00 00 FF 
08f84     D4 E5 85 F1 | 	sub	objptr, ##23508
08f88                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
08f88     80 02 06 F6 | 	mov	_var02, #128
08f8c                 | LR__0747
08f8c     01 07 52 F6 | 	abs	_var04, _var02 wc
08f90     07 06 06 F5 | 	and	_var04, #7
08f94     03 07 82 F6 | 	negc	_var04, _var04
08f98     04 06 56 F2 | 	cmps	_var04, #4 wc
08f9c     20 00 90 3D |  if_ae	jmp	#LR__0748
08fa0     01 0B 02 F6 | 	mov	_var06, _var02
08fa4     4E 00 00 FF 
08fa8     70 E4 05 F1 | 	add	objptr, ##40048
08fac     F2 0A 02 F1 | 	add	_var06, objptr
08fb0     05 FF 48 FC | 	wrbyte	#127, _var06
08fb4     4E 00 00 FF 
08fb8     70 E4 85 F1 | 	sub	objptr, ##40048
08fbc     1C 00 90 FD | 	jmp	#LR__0749
08fc0                 | LR__0748
08fc0     01 0B 02 F6 | 	mov	_var06, _var02
08fc4     4E 00 00 FF 
08fc8     70 E4 05 F1 | 	add	objptr, ##40048
08fcc     F2 0A 02 F1 | 	add	_var06, objptr
08fd0     05 01 49 FC | 	wrbyte	#128, _var06
08fd4     4E 00 00 FF 
08fd8     70 E4 85 F1 | 	sub	objptr, ##40048
08fdc                 | LR__0749
08fdc     01 02 06 F1 | 	add	_var02, #1
08fe0     00 03 16 F2 | 	cmp	_var02, #256 wc
08fe4     A4 FF 9F CD |  if_b	jmp	#LR__0747
08fe8                 | LR__0750
08fe8                 | _csave_block_ret
08fe8     2D 00 64 FD | 	ret
08fec                 | 
08fec                 | ' 
08fec                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
08fec                 | _csave_addtoblock
08fec     04 4A 05 F6 | 	mov	COUNT_, #4
08ff0     A8 00 A0 FD | 	call	#pushregs_
08ff4     09 1F 02 F6 | 	mov	local01, arg01
08ff8                 | ' 
08ff8                 | ' 
08ff8                 | ' if force=0 then
08ff8     07 14 4E F7 | 	zerox	arg02, #7 wz
08ffc     78 00 90 5D |  if_ne	jmp	#LR__0760
09000     50 00 00 FF 
09004     70 E5 05 F1 | 	add	objptr, ##41328
09008     F2 14 02 FB | 	rdlong	arg02, objptr
0900c     02 00 00 FF 
09010     00 E4 85 F1 | 	sub	objptr, ##1024
09014     F2 14 02 F1 | 	add	arg02, objptr
09018     0A 1F 42 FC | 	wrbyte	local01, arg02
0901c     02 00 00 FF 
09020     00 E4 05 F1 | 	add	objptr, ##1024
09024     F2 1E 02 FB | 	rdlong	local01, objptr
09028     01 1E 06 F1 | 	add	local01, #1
0902c     F2 1E 62 FC | 	wrlong	local01, objptr
09030                 | '   block(blockptr)=d
09030                 | '   blockptr+=1
09030                 | '   if blockptr>=255 then
09030     50 00 00 FF 
09034     70 E5 85 F1 | 	sub	objptr, ##41328
09038     FF 1E 16 F2 | 	cmp	local01, #255 wc
0903c     E4 00 90 CD |  if_b	jmp	#LR__0764
09040     4E 00 00 FF 
09044     70 E5 05 F1 | 	add	objptr, ##40304
09048     F2 12 02 F6 | 	mov	arg01, objptr
0904c     4E 00 00 FF 
09050     70 E5 85 F1 | 	sub	objptr, ##40304
09054     B0 FB BF FD | 	call	#_csave_block
09058     50 00 00 FF 
0905c     70 E5 05 F1 | 	add	objptr, ##41328
09060     F2 00 68 FC | 	wrlong	#0, objptr
09064     50 00 00 FF 
09068     70 E5 85 F1 | 	sub	objptr, ##41328
0906c     2C 13 06 F6 | 	mov	arg01, #300
09070     F0 CA B0 FD | 	call	#__system___waitms
09074     AC 00 90 FD | 	jmp	#LR__0764
09078                 | LR__0760
09078     50 00 00 FF 
0907c     70 E5 05 F1 | 	add	objptr, ##41328
09080     F2 20 02 FB | 	rdlong	local02, objptr
09084     02 00 00 FF 
09088     00 E4 85 F1 | 	sub	objptr, ##1024
0908c     F2 20 02 F1 | 	add	local02, objptr
09090     10 1F 42 FC | 	wrbyte	local01, local02
09094                 | '   block(blockptr)=d
09094                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
09094     02 00 00 FF 
09098     00 E4 05 F1 | 	add	objptr, ##1024
0909c     F2 22 02 FB | 	rdlong	local03, objptr
090a0     50 00 00 FF 
090a4     70 E5 85 F1 | 	sub	objptr, ##41328
090a8     FF 22 16 F2 | 	cmp	local03, #255 wc
090ac     40 00 90 3D |  if_ae	jmp	#LR__0763
090b0     50 00 00 FF 
090b4     70 E5 05 F1 | 	add	objptr, ##41328
090b8     F2 24 02 FB | 	rdlong	local04, objptr
090bc     50 00 00 FF 
090c0     70 E5 85 F1 | 	sub	objptr, ##41328
090c4                 | LR__0761
090c4     00 25 56 F2 | 	cmps	local04, #256 wc
090c8     24 00 90 3D |  if_ae	jmp	#LR__0762
090cc     12 21 02 F6 | 	mov	local02, local04
090d0     4E 00 00 FF 
090d4     70 E5 05 F1 | 	add	objptr, ##40304
090d8     F2 20 02 F1 | 	add	local02, objptr
090dc     10 01 48 FC | 	wrbyte	#0, local02
090e0     01 24 06 F1 | 	add	local04, #1
090e4     4E 00 00 FF 
090e8     70 E5 85 F1 | 	sub	objptr, ##40304
090ec     D4 FF 9F FD | 	jmp	#LR__0761
090f0                 | LR__0762
090f0                 | LR__0763
090f0     4E 00 00 FF 
090f4     70 E5 05 F1 | 	add	objptr, ##40304
090f8     F2 12 02 F6 | 	mov	arg01, objptr
090fc     4E 00 00 FF 
09100     70 E5 85 F1 | 	sub	objptr, ##40304
09104     00 FB BF FD | 	call	#_csave_block
09108     50 00 00 FF 
0910c     70 E5 05 F1 | 	add	objptr, ##41328
09110     F2 00 68 FC | 	wrlong	#0, objptr
09114     50 00 00 FF 
09118     70 E5 85 F1 | 	sub	objptr, ##41328
0911c     2C 13 06 F6 | 	mov	arg01, #300
09120     40 CA B0 FD | 	call	#__system___waitms
09124                 | LR__0764
09124     A7 F0 03 F6 | 	mov	ptra, fp
09128     B2 00 A0 FD | 	call	#popregs_
0912c                 | _csave_addtoblock_ret
0912c     2D 00 64 FD | 	ret
09130                 | 
09130                 | ' 
09130                 | ' sub test_csave
09130                 | _test_csave
09130     04 4A 05 F6 | 	mov	COUNT_, #4
09134     A8 00 A0 FD | 	call	#pushregs_
09138     C0 F0 07 F1 | 	add	ptra, #192
0913c                 | ' 'dim fileheader,savestart, saveptr as ulong
0913c                 | ' 
0913c                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0913c     41 00 00 FF 
09140     48 E4 05 F1 | 	add	objptr, ##33352
09144     F2 12 02 FB | 	rdlong	arg01, objptr
09148     41 00 00 FF 
0914c     48 E4 85 F1 | 	sub	objptr, ##33352
09150     DC 93 B0 FD | 	call	#_pslpeek
09154     FF FF 7F FF 
09158     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0915c     0C 00 90 5D |  if_ne	jmp	#LR__0770
09160     1B 12 06 F6 | 	mov	arg01, #27
09164     0C 92 B0 FD | 	call	#_printerror
09168     0C 03 90 FD | 	jmp	#LR__0782
0916c                 | LR__0770
0916c     04 F8 BF FD | 	call	#_pop
09170     FF 1E 02 F6 | 	mov	local01, result3
09174     90 4E 05 F1 | 	add	fp, #144
09178     A7 FA 61 FC | 	wrlong	result1, fp
0917c     04 4E 05 F1 | 	add	fp, #4
09180     A7 FC 61 FC | 	wrlong	result2, fp
09184     04 4E 05 F1 | 	add	fp, #4
09188     A7 1E 62 FC | 	wrlong	local01, fp
0918c                 | ' t1=pop()
0918c                 | ' if t1.result_type<>result_string then name$="noname.bas" else name$=t1.result.sresult
0918c     98 4E 85 F1 | 	sub	fp, #152
09190     1F 1E 0E F2 | 	cmp	local01, #31 wz
09194     27 01 00 5F 
09198     1D 1E 06 56 |  if_ne	mov	local01, ##@LR__4317
0919c     8C 4E 05 51 |  if_ne	add	fp, #140
091a0     A7 1E 62 5C |  if_ne	wrlong	local01, fp
091a4     8C 4E 85 51 |  if_ne	sub	fp, #140
091a8     90 4E 05 A1 |  if_e	add	fp, #144
091ac     A7 1E 02 AB |  if_e	rdlong	local01, fp
091b0     04 4E 85 A1 |  if_e	sub	fp, #4
091b4     A7 1E 62 AC |  if_e	wrlong	local01, fp
091b8     8C 4E 85 A1 |  if_e	sub	fp, #140
091bc                 | ' 
091bc                 | ' ' prepare 1 kHz header wave
091bc                 | ' 
091bc                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
091bc     A7 00 68 FC | 	wrlong	#0, fp
091c0     97 34 48 FB | 	callpa	#(@LR__0774-@LR__0771)>>2,fcache_load_ptr_
091c4                 | LR__0771
091c4     A7 1E 02 FB | 	rdlong	local01, fp
091c8     0F 1F 52 F6 | 	abs	local01, local01 wc
091cc     07 1E 06 F5 | 	and	local01, #7
091d0     0F 1F 82 F6 | 	negc	local01, local01
091d4     04 1E 56 F2 | 	cmps	local01, #4 wc
091d8     20 00 90 3D |  if_ae	jmp	#LR__0772
091dc     A7 1E 02 FB | 	rdlong	local01, fp
091e0     4E 00 00 FF 
091e4     70 E4 05 F1 | 	add	objptr, ##40048
091e8     F2 1E 02 F1 | 	add	local01, objptr
091ec     0F FF 48 FC | 	wrbyte	#127, local01
091f0     4E 00 00 FF 
091f4     70 E4 85 F1 | 	sub	objptr, ##40048
091f8     1C 00 90 FD | 	jmp	#LR__0773
091fc                 | LR__0772
091fc     A7 1E 02 FB | 	rdlong	local01, fp
09200     4E 00 00 FF 
09204     70 E4 05 F1 | 	add	objptr, ##40048
09208     F2 1E 02 F1 | 	add	local01, objptr
0920c     0F 01 49 FC | 	wrbyte	#128, local01
09210     4E 00 00 FF 
09214     70 E4 85 F1 | 	sub	objptr, ##40048
09218                 | LR__0773
09218     A7 1E 02 FB | 	rdlong	local01, fp
0921c     01 1E 06 F1 | 	add	local01, #1
09220     A7 1E 62 FC | 	wrlong	local01, fp
09224     00 1F 56 F2 | 	cmps	local01, #256 wc
09228     98 FF 9F CD |  if_b	jmp	#LR__0771
0922c                 | LR__0774
0922c     4E 00 00 FF 
09230     70 E4 05 F1 | 	add	objptr, ##40048
09234     F2 14 02 F6 | 	mov	arg02, objptr
09238     07 12 06 F6 | 	mov	arg01, #7
0923c     0F 00 00 FF 
09240     40 17 06 F6 | 	mov	arg03, ##8000
09244     0E 18 C6 F9 | 	decod	arg04, #14
09248     00 1B 06 F6 | 	mov	arg05, #256
0924c     00 1C 06 F6 | 	mov	arg06, #0
09250     42 00 00 FF 
09254     B0 E5 85 F1 | 	sub	objptr, ##34224
09258     7C C2 B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
0925c     0B 00 00 FF 
09260     C0 E4 85 F1 | 	sub	objptr, ##5824
09264     05 00 00 FF 
09268     B8 13 06 F6 | 	mov	arg01, ##3000
0926c     F4 C8 B0 FD | 	call	#__system___waitms
09270     50 00 00 FF 
09274     70 E5 05 F1 | 	add	objptr, ##41328
09278     F2 00 68 FC | 	wrlong	#0, objptr
0927c     50 00 00 FF 
09280     70 E5 85 F1 | 	sub	objptr, ##41328
09284     72 12 06 F6 | 	mov	arg01, #114
09288     00 14 06 F6 | 	mov	arg02, #0
0928c     5C FD BF FD | 	call	#_csave_addtoblock
09290     62 12 06 F6 | 	mov	arg01, #98
09294     00 14 06 F6 | 	mov	arg02, #0
09298     50 FD BF FD | 	call	#_csave_addtoblock
0929c     61 12 06 F6 | 	mov	arg01, #97
092a0     00 14 06 F6 | 	mov	arg02, #0
092a4     44 FD BF FD | 	call	#_csave_addtoblock
092a8     0D 12 06 F6 | 	mov	arg01, #13
092ac     00 14 06 F6 | 	mov	arg02, #0
092b0     38 FD BF FD | 	call	#_csave_addtoblock
092b4                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
092b4                 | ' waitms 3000 
092b4                 | ' 
092b4                 | ' blockptr=0
092b4                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
092b4                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
092b4     A7 02 68 FC | 	wrlong	#1, fp
092b8     8C 4E 05 F1 | 	add	fp, #140
092bc     A7 12 02 FB | 	rdlong	arg01, fp
092c0     8C 4E 85 F1 | 	sub	fp, #140
092c4     09 21 02 F6 | 	mov	local02, arg01
092c8     97 06 48 FB | 	callpa	#(@LR__0776-@LR__0775)>>2,fcache_load_ptr_
092cc                 | LR__0775
092cc     10 FB C9 FA | 	rdbyte	result1, local02 wz
092d0     01 20 06 51 |  if_ne	add	local02, #1
092d4     F4 FF 9F 5D |  if_ne	jmp	#LR__0775
092d8                 | LR__0776
092d8     09 21 82 F1 | 	sub	local02, arg01
092dc     10 23 02 F6 | 	mov	local03, local02
092e0     01 22 06 F1 | 	add	local03, #1
092e4                 | LR__0777
092e4     A7 1E 02 FB | 	rdlong	local01, fp
092e8     11 1F 52 F2 | 	cmps	local01, local03 wc
092ec     34 00 90 3D |  if_ae	jmp	#LR__0778
092f0     8C 4E 05 F1 | 	add	fp, #140
092f4     A7 12 02 FB | 	rdlong	arg01, fp
092f8     8C 4E 85 F1 | 	sub	fp, #140
092fc     A7 14 02 FB | 	rdlong	arg02, fp
09300     01 16 06 F6 | 	mov	arg03, #1
09304     90 E6 B0 FD | 	call	#__system__Mid_S
09308     FD 12 C2 FA | 	rdbyte	arg01, result1
0930c     00 14 06 F6 | 	mov	arg02, #0
09310     D8 FC BF FD | 	call	#_csave_addtoblock
09314     A7 1E 02 FB | 	rdlong	local01, fp
09318     01 1E 06 F1 | 	add	local01, #1
0931c     A7 1E 62 FC | 	wrlong	local01, fp
09320     C0 FF 9F FD | 	jmp	#LR__0777
09324                 | LR__0778
09324     00 12 06 F6 | 	mov	arg01, #0
09328     00 14 06 F6 | 	mov	arg02, #0
0932c     BC FC BF FD | 	call	#_csave_addtoblock
09330     72 12 06 F6 | 	mov	arg01, #114
09334     00 14 06 F6 | 	mov	arg02, #0
09338     B0 FC BF FD | 	call	#_csave_addtoblock
0933c     62 12 06 F6 | 	mov	arg01, #98
09340     00 14 06 F6 | 	mov	arg02, #0
09344     A4 FC BF FD | 	call	#_csave_addtoblock
09348     73 12 06 F6 | 	mov	arg01, #115
0934c     00 14 06 F6 | 	mov	arg02, #0
09350     98 FC BF FD | 	call	#_csave_addtoblock
09354     0D 12 06 F6 | 	mov	arg01, #13
09358     00 14 06 F6 | 	mov	arg02, #0
0935c     8C FC BF FD | 	call	#_csave_addtoblock
09360     41 00 00 FF 
09364     48 E4 05 F1 | 	add	objptr, ##33352
09368     F2 1E 02 FB | 	rdlong	local01, objptr
0936c     41 00 00 FF 
09370     48 E4 85 F1 | 	sub	objptr, ##33352
09374     9C 4E 05 F1 | 	add	fp, #156
09378     A7 1E 62 FC | 	wrlong	local01, fp
0937c     9C 4E 85 F1 | 	sub	fp, #156
09380                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
09380                 | ' 
09380                 | ' saveptr=programstart
09380                 | ' do
09380                 | LR__0779
09380     A0 4E 05 F1 | 	add	fp, #160
09384     A7 12 02 F6 | 	mov	arg01, fp
09388     04 4E 85 F1 | 	sub	fp, #4
0938c     A7 14 02 FB | 	rdlong	arg02, fp
09390     9C 4E 85 F1 | 	sub	fp, #156
09394     18 16 06 F6 | 	mov	arg03, #24
09398     0B 00 00 FF 
0939c     C0 E4 05 F1 | 	add	objptr, ##5824
093a0     E0 B9 B0 FD | 	call	#_psram_spin2_read1
093a4     0C 4E 05 F1 | 	add	fp, #12
093a8     A7 12 02 F6 | 	mov	arg01, fp
093ac     9C 4E 05 F1 | 	add	fp, #156
093b0     A7 14 02 FB | 	rdlong	arg02, fp
093b4     04 4E 05 F1 | 	add	fp, #4
093b8     A7 16 02 FB | 	rdlong	arg03, fp
093bc     AC 4E 85 F1 | 	sub	fp, #172
093c0     C0 B9 B0 FD | 	call	#_psram_spin2_read1
093c4     0B 00 00 FF 
093c8     C0 E4 85 F1 | 	sub	objptr, ##5824
093cc     AC 4E 05 F1 | 	add	fp, #172
093d0     A7 12 02 FB | 	rdlong	arg01, fp
093d4     AC 4E 85 F1 | 	sub	fp, #172
093d8     00 14 06 F6 | 	mov	arg02, #0
093dc     0C FC BF FD | 	call	#_csave_addtoblock
093e0                 | '   psram.read1(varptr(header(0)),saveptr,24)
093e0                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
093e0                 | '   csave_addtoblock(header(3),0) ' that's always <255
093e0                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
093e0     A7 00 68 FC | 	wrlong	#0, fp
093e4     AC 4E 05 F1 | 	add	fp, #172
093e8     A7 24 02 FB | 	rdlong	local04, fp
093ec     AC 4E 85 F1 | 	sub	fp, #172
093f0                 | LR__0780
093f0     A7 1E 02 FB | 	rdlong	local01, fp
093f4     12 1F 52 F2 | 	cmps	local01, local04 wc
093f8     2C 00 90 3D |  if_ae	jmp	#LR__0781
093fc     A7 22 02 FB | 	rdlong	local03, fp
09400     0C 4E 05 F1 | 	add	fp, #12
09404     A7 22 02 F1 | 	add	local03, fp
09408     11 13 C2 FA | 	rdbyte	arg01, local03
0940c     00 14 06 F6 | 	mov	arg02, #0
09410     0C 4E 85 F1 | 	sub	fp, #12
09414     D4 FB BF FD | 	call	#_csave_addtoblock
09418     A7 22 02 FB | 	rdlong	local03, fp
0941c     01 22 06 F1 | 	add	local03, #1
09420     A7 22 62 FC | 	wrlong	local03, fp
09424     C8 FF 9F FD | 	jmp	#LR__0780
09428                 | LR__0781
09428     B4 4E 05 F1 | 	add	fp, #180
0942c     A7 1E 02 FB | 	rdlong	local01, fp
09430     18 4E 85 F1 | 	sub	fp, #24
09434     A7 1E 62 FC | 	wrlong	local01, fp
09438     18 4E 05 F1 | 	add	fp, #24
0943c     A7 1E 02 FB | 	rdlong	local01, fp
09440     B4 4E 85 F1 | 	sub	fp, #180
09444     FF FF 3F FF 
09448     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0944c     30 FF 9F 5D |  if_ne	jmp	#LR__0779
09450     00 12 06 F6 | 	mov	arg01, #0
09454     01 14 06 F6 | 	mov	arg02, #1
09458     90 FB BF FD | 	call	#_csave_addtoblock
0945c     2D 00 00 FF 
09460     D4 E5 05 F1 | 	add	objptr, ##23508
09464     F2 12 02 FB | 	rdlong	arg01, objptr
09468     2D 00 00 FF 
0946c     D4 E5 85 F1 | 	sub	objptr, ##23508
09470     F4 12 06 F1 | 	add	arg01, #244
09474     09 01 58 FC | 	wrword	#0, arg01
09478                 | LR__0782
09478     A7 F0 03 F6 | 	mov	ptra, fp
0947c     B2 00 A0 FD | 	call	#popregs_
09480                 | _test_csave_ret
09480     2D 00 64 FD | 	ret
09484                 | 
09484                 | ' 
09484                 | ' ' ----------------- Save the program
09484                 | ' 
09484                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
09484                 | _do_save
09484     02 4A 05 F6 | 	mov	COUNT_, #2
09488     A8 00 A0 FD | 	call	#pushregs_
0948c     01 00 00 FF 
09490     BC F0 07 F1 | 	add	ptra, ##700
09494     01 00 00 FF 
09498     10 4E 05 F1 | 	add	fp, ##528
0949c     B1 B0 86 FF 
094a0     A7 E4 68 FC | 	wrlong	##224486002, fp
094a4     01 00 00 FF 
094a8     10 4E 85 F1 | 	sub	fp, ##528
094ac     C4 F4 BF FD | 	call	#_pop
094b0     FF 16 02 F6 | 	mov	arg03, result3
094b4     A7 FA 61 FC | 	wrlong	result1, fp
094b8     04 4E 05 F1 | 	add	fp, #4
094bc     A7 FC 61 FC | 	wrlong	result2, fp
094c0     04 4E 05 F1 | 	add	fp, #4
094c4     A7 16 62 FC | 	wrlong	arg03, fp
094c8     08 4E 85 F1 | 	sub	fp, #8
094cc                 | ' 
094cc                 | ' fileheader=$0D616272' rba+ver'
094cc                 | ' 
094cc                 | ' t1=pop() 
094cc                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
094cc     41 00 00 FF 
094d0     48 E4 05 F1 | 	add	objptr, ##33352
094d4     F2 12 02 FB | 	rdlong	arg01, objptr
094d8     41 00 00 FF 
094dc     48 E4 85 F1 | 	sub	objptr, ##33352
094e0     4C 90 B0 FD | 	call	#_pslpeek
094e4     FF FF 7F FF 
094e8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
094ec     0C 00 90 5D |  if_ne	jmp	#LR__0790
094f0     1B 12 06 F6 | 	mov	arg01, #27
094f4     7C 8E B0 FD | 	call	#_printerror
094f8     68 02 90 FD | 	jmp	#LR__0796
094fc                 | LR__0790
094fc                 | ' if t1.result_type=result_string2 then t1.result.sresult=do_convertstring(t1.result.uresult): t1.result_type=result_string
094fc     08 4E 05 F1 | 	add	fp, #8
09500     A7 16 02 FB | 	rdlong	arg03, fp
09504     08 4E 85 F1 | 	sub	fp, #8
09508     2B 16 0E F2 | 	cmp	arg03, #43 wz
0950c     18 00 90 5D |  if_ne	jmp	#LR__0791
09510     A7 12 02 FB | 	rdlong	arg01, fp
09514     50 11 B0 FD | 	call	#_do_convertstring
09518     A7 FA 61 FC | 	wrlong	result1, fp
0951c     08 4E 05 F1 | 	add	fp, #8
09520     A7 3E 68 FC | 	wrlong	#31, fp
09524     08 4E 85 F1 | 	sub	fp, #8
09528                 | LR__0791
09528                 | ' if t1.result_type=result_string then
09528     08 4E 05 F1 | 	add	fp, #8
0952c     A7 1E 02 FB | 	rdlong	local01, fp
09530     08 4E 85 F1 | 	sub	fp, #8
09534     1F 1E 0E F2 | 	cmp	local01, #31 wz
09538     28 02 90 5D |  if_ne	jmp	#LR__0795
0953c                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas"
0953c     A7 12 02 FB | 	rdlong	arg01, fp
09540     27 01 00 FF 
09544     28 14 06 F6 | 	mov	arg02, ##@LR__4318
09548     4C C3 B0 FD | 	call	#__system___string_cmp
0954c     00 FA 0D F2 | 	cmp	result1, #0 wz
09550     27 01 00 AF 
09554     29 1E 06 A6 |  if_e	mov	local01, ##@LR__4319
09558     A7 1E 62 AC |  if_e	wrlong	local01, fp
0955c                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0955c     09 12 06 F6 | 	mov	arg01, #9
09560     EC 0E B1 FD | 	call	#__system__close
09564     09 1E 06 F6 | 	mov	local01, #9
09568     49 00 00 FF 
0956c     58 E4 05 F1 | 	add	objptr, ##37464
09570     F2 12 02 FB | 	rdlong	arg01, objptr
09574     49 00 00 FF 
09578     58 E4 85 F1 | 	sub	objptr, ##37464
0957c     27 01 00 FF 
09580     34 14 06 F6 | 	mov	arg02, ##@LR__4320
09584     44 C3 B0 FD | 	call	#__system___string_concat
09588     FD 12 02 F6 | 	mov	arg01, result1
0958c     A7 14 02 FB | 	rdlong	arg02, fp
09590     38 C3 B0 FD | 	call	#__system___string_concat
09594     FD 14 02 F6 | 	mov	arg02, result1
09598     0F 13 02 F6 | 	mov	arg01, local01
0959c     0D 16 06 F6 | 	mov	arg03, #13
095a0     D0 CE B0 FD | 	call	#__system___basic_open_string
095a4     01 00 00 FF 
095a8     0C 4E 05 F1 | 	add	fp, ##524
095ac     A7 0A 68 FC | 	wrlong	#5, fp
095b0     41 00 00 FF 
095b4     48 E4 05 F1 | 	add	objptr, ##33352
095b8     F2 1E 02 FB | 	rdlong	local01, objptr
095bc     41 00 00 FF 
095c0     48 E4 85 F1 | 	sub	objptr, ##33352
095c4     0C 4E 05 F1 | 	add	fp, #12
095c8     A7 1E 62 FC | 	wrlong	local01, fp
095cc     01 00 00 FF 
095d0     18 4E 85 F1 | 	sub	fp, ##536
095d4                 | ' '  put #9,1,fileheader,1
095d4                 | '   i=5
095d4                 | '   saveptr=programstart
095d4                 | '   do
095d4                 | LR__0792
095d4     01 00 00 FF 
095d8     1C 4E 05 F1 | 	add	fp, ##540
095dc     A7 12 02 F6 | 	mov	arg01, fp
095e0     04 4E 85 F1 | 	sub	fp, #4
095e4     A7 14 02 FB | 	rdlong	arg02, fp
095e8     01 00 00 FF 
095ec     18 4E 85 F1 | 	sub	fp, ##536
095f0     18 16 06 F6 | 	mov	arg03, #24
095f4     0B 00 00 FF 
095f8     C0 E4 05 F1 | 	add	objptr, ##5824
095fc     84 B7 B0 FD | 	call	#_psram_spin2_read1
09600     01 00 00 FF 
09604     34 4E 05 F1 | 	add	fp, ##564
09608     A7 12 02 F6 | 	mov	arg01, fp
0960c     10 4E 85 F1 | 	sub	fp, #16
09610     A7 14 02 FB | 	rdlong	arg02, fp
09614     04 4E 05 F1 | 	add	fp, #4
09618     A7 16 02 FB | 	rdlong	arg03, fp
0961c     01 00 00 FF 
09620     28 4E 85 F1 | 	sub	fp, ##552
09624     5C B7 B0 FD | 	call	#_psram_spin2_read1
09628     0B 00 00 FF 
0962c     C0 E4 85 F1 | 	sub	objptr, ##5824
09630     27 01 00 FF 
09634     36 1E 06 F6 | 	mov	local01, ##@LR__4321
09638     01 00 00 FF 
0963c     B4 4E 05 F1 | 	add	fp, ##692
09640     A7 1E 62 FC | 	wrlong	local01, fp
09644                 | '     psram.read1(varptr(header(0)),saveptr,24)
09644                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
09644                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
09644     A8 4E 85 F1 | 	sub	fp, #168
09648     A7 02 68 FC | 	wrlong	#1, fp
0964c     1C 4E 05 F1 | 	add	fp, #28
09650     A7 20 02 FB | 	rdlong	local02, fp
09654     01 00 00 FF 
09658     28 4E 85 F1 | 	sub	fp, ##552
0965c     01 20 06 F1 | 	add	local02, #1
09660                 | LR__0793
09660     01 00 00 FF 
09664     0C 4E 05 F1 | 	add	fp, ##524
09668     A7 1E 02 FB | 	rdlong	local01, fp
0966c     01 00 00 FF 
09670     0C 4E 85 F1 | 	sub	fp, ##524
09674     10 1F 52 F2 | 	cmps	local01, local02 wc
09678     64 00 90 3D |  if_ae	jmp	#LR__0794
0967c     01 00 00 FF 
09680     B4 4E 05 F1 | 	add	fp, ##692
09684     A7 1E 02 FB | 	rdlong	local01, fp
09688     A8 4E 85 F1 | 	sub	fp, #168
0968c     A7 16 02 FB | 	rdlong	arg03, fp
09690     01 16 86 F1 | 	sub	arg03, #1
09694     28 4E 05 F1 | 	add	fp, #40
09698     A7 16 02 F1 | 	add	arg03, fp
0969c     0B 13 C2 FA | 	rdbyte	arg01, arg03
096a0     01 00 00 FF 
096a4     34 4E 85 F1 | 	sub	fp, ##564
096a8     98 E3 B0 FD | 	call	#__system__Chr_S
096ac     FD 14 02 F6 | 	mov	arg02, result1
096b0     0F 13 02 F6 | 	mov	arg01, local01
096b4     14 C2 B0 FD | 	call	#__system___string_concat
096b8     01 00 00 FF 
096bc     B4 4E 05 F1 | 	add	fp, ##692
096c0     A7 FA 61 FC | 	wrlong	result1, fp
096c4     A8 4E 85 F1 | 	sub	fp, #168
096c8     A7 1E 02 FB | 	rdlong	local01, fp
096cc     01 1E 06 F1 | 	add	local01, #1
096d0     A7 1E 62 FC | 	wrlong	local01, fp
096d4     01 00 00 FF 
096d8     0C 4E 85 F1 | 	sub	fp, ##524
096dc     80 FF 9F FD | 	jmp	#LR__0793
096e0                 | LR__0794
096e0                 | '  '   put #9,i,header(3),1 : i+=4
096e0                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
096e0                 | '      print #9, saveline$
096e0     09 12 06 F6 | 	mov	arg01, #9
096e4     38 17 B1 FD | 	call	#__system___getiolock_0370
096e8     FD 12 02 F6 | 	mov	arg01, result1
096ec     80 C1 B0 FD | 	call	#__system___lockmem
096f0     01 00 00 FF 
096f4     B4 4E 05 F1 | 	add	fp, ##692
096f8     A7 14 02 FB | 	rdlong	arg02, fp
096fc     01 00 00 FF 
09700     B4 4E 85 F1 | 	sub	fp, ##692
09704     09 12 06 F6 | 	mov	arg01, #9
09708     00 16 06 F6 | 	mov	arg03, #0
0970c     54 CE B0 FD | 	call	#__system___basic_print_string
09710     09 12 06 F6 | 	mov	arg01, #9
09714     0A 14 06 F6 | 	mov	arg02, #10
09718     00 16 06 F6 | 	mov	arg03, #0
0971c     EC CD B0 FD | 	call	#__system___basic_print_char
09720     09 12 06 F6 | 	mov	arg01, #9
09724     F8 16 B1 FD | 	call	#__system___getiolock_0370
09728     FD 00 68 FC | 	wrlong	#0, result1
0972c     01 00 00 FF 
09730     30 4E 05 F1 | 	add	fp, ##560
09734     A7 1E 02 FB | 	rdlong	local01, fp
09738     18 4E 85 F1 | 	sub	fp, #24
0973c     A7 1E 62 FC | 	wrlong	local01, fp
09740     18 4E 05 F1 | 	add	fp, #24
09744     A7 1E 02 FB | 	rdlong	local01, fp
09748     01 00 00 FF 
0974c     30 4E 85 F1 | 	sub	fp, ##560
09750     FF FF 3F FF 
09754     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
09758     78 FE 9F 5D |  if_ne	jmp	#LR__0792
0975c                 | '   close #9  
0975c     09 12 06 F6 | 	mov	arg01, #9
09760     EC 0C B1 FD | 	call	#__system__close
09764                 | LR__0795
09764                 | LR__0796
09764     A7 F0 03 F6 | 	mov	ptra, fp
09768     B2 00 A0 FD | 	call	#popregs_
0976c                 | _do_save_ret
0976c     2D 00 64 FD | 	ret
09770                 | 
09770                 | ' 
09770                 | ' '----------------- Load the program
09770                 | ' 'lo todo: errors while loading
09770                 | ' sub do_load
09770                 | _do_load
09770     01 4A 05 F6 | 	mov	COUNT_, #1
09774     A8 00 A0 FD | 	call	#pushregs_
09778     A4 F0 07 F1 | 	add	ptra, #164
0977c     A0 4E 05 F1 | 	add	fp, #160
09780     A7 12 02 F6 | 	mov	arg01, fp
09784     80 4E 85 F1 | 	sub	fp, #128
09788     A7 14 02 F6 | 	mov	arg02, fp
0978c     20 4E 85 F1 | 	sub	fp, #32
09790     09 15 62 FC | 	wrlong	arg02, arg01
09794     DC F1 BF FD | 	call	#_pop
09798     FF 1A 02 F6 | 	mov	arg05, result3
0979c     A7 FA 61 FC | 	wrlong	result1, fp
097a0     04 4E 05 F1 | 	add	fp, #4
097a4     A7 FC 61 FC | 	wrlong	result2, fp
097a8     04 4E 05 F1 | 	add	fp, #4
097ac     A7 1A 62 FC | 	wrlong	arg05, fp
097b0                 | ' 
097b0                 | ' lpoke varptr(line2$),varptr(line2)
097b0                 | ' t1=pop() 
097b0                 | ' 'print "popped "; t1.result.uresult, t1.result_type
097b0                 | ' if t1.result_type=result_string2 then t1.result.sresult=do_convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
097b0     08 4E 85 F1 | 	sub	fp, #8
097b4     2B 1A 0E F2 | 	cmp	arg05, #43 wz
097b8     18 00 90 5D |  if_ne	jmp	#LR__0800
097bc     A7 12 02 FB | 	rdlong	arg01, fp
097c0     A4 0E B0 FD | 	call	#_do_convertstring
097c4     A7 FA 61 FC | 	wrlong	result1, fp
097c8     08 4E 05 F1 | 	add	fp, #8
097cc     A7 3E 68 FC | 	wrlong	#31, fp
097d0     08 4E 85 F1 | 	sub	fp, #8
097d4                 | LR__0800
097d4                 | ' if t1.result_type=result_string then
097d4     08 4E 05 F1 | 	add	fp, #8
097d8     A7 1E 02 FB | 	rdlong	local01, fp
097dc     08 4E 85 F1 | 	sub	fp, #8
097e0     1F 1E 0E F2 | 	cmp	local01, #31 wz
097e4     40 03 90 5D |  if_ne	jmp	#LR__0807
097e8     18 09 B0 FD | 	call	#_do_new
097ec                 | '   do_new
097ec                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas" 
097ec     A7 12 02 FB | 	rdlong	arg01, fp
097f0     27 01 00 FF 
097f4     37 14 06 F6 | 	mov	arg02, ##@LR__4322
097f8     9C C0 B0 FD | 	call	#__system___string_cmp
097fc     00 FA 0D F2 | 	cmp	result1, #0 wz
09800     27 01 00 AF 
09804     38 1E 06 A6 |  if_e	mov	local01, ##@LR__4323
09808     A7 1E 62 AC |  if_e	wrlong	local01, fp
0980c                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0980c     09 12 06 F6 | 	mov	arg01, #9
09810     3C 0C B1 FD | 	call	#__system__close
09814     09 1E 06 F6 | 	mov	local01, #9
09818     49 00 00 FF 
0981c     58 E4 05 F1 | 	add	objptr, ##37464
09820     F2 12 02 FB | 	rdlong	arg01, objptr
09824     49 00 00 FF 
09828     58 E4 85 F1 | 	sub	objptr, ##37464
0982c     27 01 00 FF 
09830     43 14 06 F6 | 	mov	arg02, ##@LR__4324
09834     94 C0 B0 FD | 	call	#__system___string_concat
09838     FD 12 02 F6 | 	mov	arg01, result1
0983c     A7 14 02 FB | 	rdlong	arg02, fp
09840     88 C0 B0 FD | 	call	#__system___string_concat
09844     FD 14 02 F6 | 	mov	arg02, result1
09848     0F 13 02 F6 | 	mov	arg01, local01
0984c     00 16 06 F6 | 	mov	arg03, #0
09850     20 CC B0 FD | 	call	#__system___basic_open_string
09854     20 E8 05 F1 | 	add	ptr___system__dat__, #32
09858     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0985c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
09860     10 4E 05 F1 | 	add	fp, #16
09864     A7 FA 61 FC | 	wrlong	result1, fp
09868                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
09868     10 4E 85 F1 | 	sub	fp, #16
0986c     9C 00 90 AD |  if_e	jmp	#LR__0801
09870     00 12 06 F6 | 	mov	arg01, #0
09874     A8 15 B1 FD | 	call	#__system___getiolock_0370
09878     FD 12 02 F6 | 	mov	arg01, result1
0987c     F0 BF B0 FD | 	call	#__system___lockmem
09880     27 01 00 FF 
09884     45 14 06 F6 | 	mov	arg02, ##@LR__4325
09888     00 12 06 F6 | 	mov	arg01, #0
0988c     00 16 06 F6 | 	mov	arg03, #0
09890     D0 CC B0 FD | 	call	#__system___basic_print_string
09894     10 4E 05 F1 | 	add	fp, #16
09898     A7 14 02 FB | 	rdlong	arg02, fp
0989c     10 4E 85 F1 | 	sub	fp, #16
098a0     00 12 06 F6 | 	mov	arg01, #0
098a4     00 16 06 F6 | 	mov	arg03, #0
098a8     0A 18 06 F6 | 	mov	arg04, #10
098ac     F8 CC B0 FD | 	call	#__system___basic_print_integer
098b0     27 01 00 FF 
098b4     53 14 06 F6 | 	mov	arg02, ##@LR__4326
098b8     00 12 06 F6 | 	mov	arg01, #0
098bc     00 16 06 F6 | 	mov	arg03, #0
098c0     A0 CC B0 FD | 	call	#__system___basic_print_string
098c4     10 4E 05 F1 | 	add	fp, #16
098c8     A7 12 02 FB | 	rdlong	arg01, fp
098cc     10 4E 85 F1 | 	sub	fp, #16
098d0     9C E5 B0 FD | 	call	#__system___strerror
098d4     FD 14 02 F6 | 	mov	arg02, result1
098d8     00 12 06 F6 | 	mov	arg01, #0
098dc     00 16 06 F6 | 	mov	arg03, #0
098e0     80 CC B0 FD | 	call	#__system___basic_print_string
098e4     00 12 06 F6 | 	mov	arg01, #0
098e8     0A 14 06 F6 | 	mov	arg02, #10
098ec     00 16 06 F6 | 	mov	arg03, #0
098f0     18 CC B0 FD | 	call	#__system___basic_print_char
098f4     00 12 06 F6 | 	mov	arg01, #0
098f8     24 15 B1 FD | 	call	#__system___getiolock_0370
098fc     FD 00 68 FC | 	wrlong	#0, result1
09900     09 12 06 F6 | 	mov	arg01, #9
09904     48 0B B1 FD | 	call	#__system__close
09908     24 02 90 FD | 	jmp	#LR__0809
0990c                 | LR__0801
0990c     0C 4E 05 F1 | 	add	fp, #12
09910     A7 0A 68 FC | 	wrlong	#5, fp
09914                 | '   i=5
09914                 | '   get #9,1,header,1
09914     0C 4E 05 F1 | 	add	fp, #12
09918     A7 16 02 F6 | 	mov	arg03, fp
0991c     18 4E 85 F1 | 	sub	fp, #24
09920     09 12 06 F6 | 	mov	arg01, #9
09924     01 14 06 F6 | 	mov	arg02, #1
09928     01 18 06 F6 | 	mov	arg04, #1
0992c     04 1A 06 F6 | 	mov	arg05, #4
09930     40 CD B0 FD | 	call	#__system___basic_get
09934                 | '   
09934                 | '   if header<>$0D616272 then 
09934     18 4E 05 F1 | 	add	fp, #24
09938     A7 1E 02 FB | 	rdlong	local01, fp
0993c     18 4E 85 F1 | 	sub	fp, #24
09940     B1 B0 06 FF 
09944     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
09948     F0 00 90 AD |  if_e	jmp	#LR__0804
0994c                 | '     close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0994c     09 12 06 F6 | 	mov	arg01, #9
09950     FC 0A B1 FD | 	call	#__system__close
09954     09 1E 06 F6 | 	mov	local01, #9
09958     49 00 00 FF 
0995c     58 E4 05 F1 | 	add	objptr, ##37464
09960     F2 12 02 FB | 	rdlong	arg01, objptr
09964     49 00 00 FF 
09968     58 E4 85 F1 | 	sub	objptr, ##37464
0996c     27 01 00 FF 
09970     56 14 06 F6 | 	mov	arg02, ##@LR__4327
09974     54 BF B0 FD | 	call	#__system___string_concat
09978     FD 12 02 F6 | 	mov	arg01, result1
0997c     A7 14 02 FB | 	rdlong	arg02, fp
09980     48 BF B0 FD | 	call	#__system___string_concat
09984     FD 14 02 F6 | 	mov	arg02, result1
09988     0F 13 02 F6 | 	mov	arg01, local01
0998c     00 16 06 F6 | 	mov	arg03, #0
09990     E0 CA B0 FD | 	call	#__system___basic_open_string
09994                 | '     do
09994                 | LR__0802
09994     09 12 06 F6 | 	mov	arg01, #9
09998     E0 C0 B0 FD | 	call	#__system___basic_read_line
0999c     2D 00 00 FF 
099a0     E0 E5 05 F1 | 	add	objptr, ##23520
099a4     F2 FA 61 FC | 	wrlong	result1, objptr
099a8                 | '       if left$(line$,1) >="0" andalso left$(line$,1)<="9" then interpret
099a8     2D 00 00 FF 
099ac     E0 E5 85 F1 | 	sub	objptr, ##23520
099b0     FD 12 02 F6 | 	mov	arg01, result1
099b4     01 14 06 F6 | 	mov	arg02, #1
099b8     C4 DE B0 FD | 	call	#__system__Left_S
099bc     FD 12 02 F6 | 	mov	arg01, result1
099c0     27 01 00 FF 
099c4     58 14 06 F6 | 	mov	arg02, ##@LR__4328
099c8     CC BE B0 FD | 	call	#__system___string_cmp
099cc     00 FA 55 F2 | 	cmps	result1, #0 wc
099d0     34 00 90 CD |  if_b	jmp	#LR__0803
099d4     2D 00 00 FF 
099d8     E0 E5 05 F1 | 	add	objptr, ##23520
099dc     F2 12 02 FB | 	rdlong	arg01, objptr
099e0     2D 00 00 FF 
099e4     E0 E5 85 F1 | 	sub	objptr, ##23520
099e8     01 14 06 F6 | 	mov	arg02, #1
099ec     90 DE B0 FD | 	call	#__system__Left_S
099f0     FD 12 02 F6 | 	mov	arg01, result1
099f4     27 01 00 FF 
099f8     5A 14 06 F6 | 	mov	arg02, ##@LR__4329
099fc     98 BE B0 FD | 	call	#__system___string_cmp
09a00     01 FA 55 F2 | 	cmps	result1, #1 wc
09a04     14 70 BF CD |  if_b	call	#_interpret
09a08                 | LR__0803
09a08     2D 00 00 FF 
09a0c     E0 E5 05 F1 | 	add	objptr, ##23520
09a10     F2 12 02 FB | 	rdlong	arg01, objptr
09a14     2D 00 00 FF 
09a18     E0 E5 85 F1 | 	sub	objptr, ##23520
09a1c     27 01 00 FF 
09a20     5C 14 06 F6 | 	mov	arg02, ##@LR__4330
09a24     70 BE B0 FD | 	call	#__system___string_cmp
09a28     00 FA 0D F2 | 	cmp	result1, #0 wz
09a2c     64 FF 9F 5D |  if_ne	jmp	#LR__0802
09a30                 | '     close #9
09a30     09 12 06 F6 | 	mov	arg01, #9
09a34     18 0A B1 FD | 	call	#__system__close
09a38     F4 00 90 FD | 	jmp	#LR__0808
09a3c                 | LR__0804
09a3c                 | '   'printerror(26) : close #9 : return
09a3c                 | '     do
09a3c                 | LR__0805
09a3c                 | '       get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
09a3c     0C 4E 05 F1 | 	add	fp, #12
09a40     A7 14 02 FB | 	rdlong	arg02, fp
09a44     10 4E 05 F1 | 	add	fp, #16
09a48     A7 16 02 F6 | 	mov	arg03, fp
09a4c     1C 4E 85 F1 | 	sub	fp, #28
09a50     09 12 06 F6 | 	mov	arg01, #9
09a54     01 18 06 F6 | 	mov	arg04, #1
09a58     04 1A 06 F6 | 	mov	arg05, #4
09a5c     14 CC B0 FD | 	call	#__system___basic_get
09a60     14 4E 05 F1 | 	add	fp, #20
09a64     A7 FA 61 FC | 	wrlong	result1, fp
09a68     08 4E 85 F1 | 	sub	fp, #8
09a6c     A7 1E 02 FB | 	rdlong	local01, fp
09a70     04 1E 06 F1 | 	add	local01, #4
09a74     A7 1E 62 FC | 	wrlong	local01, fp
09a78     10 4E 05 F1 | 	add	fp, #16
09a7c     A7 1E 02 FB | 	rdlong	local01, fp
09a80     04 4E 05 F1 | 	add	fp, #4
09a84     A7 1E 02 F1 | 	add	local01, fp
09a88     0F 01 48 FC | 	wrbyte	#0, local01
09a8c                 | '       if amount=1 then  
09a8c     0C 4E 85 F1 | 	sub	fp, #12
09a90     A7 1E 02 FB | 	rdlong	local01, fp
09a94     14 4E 85 F1 | 	sub	fp, #20
09a98     01 1E 0E F2 | 	cmp	local01, #1 wz
09a9c     68 00 90 5D |  if_ne	jmp	#LR__0806
09aa0                 | '         get #9,i,line2(0),linelength : i+=linelength
09aa0     0C 4E 05 F1 | 	add	fp, #12
09aa4     A7 14 02 FB | 	rdlong	arg02, fp
09aa8     14 4E 05 F1 | 	add	fp, #20
09aac     A7 16 02 F6 | 	mov	arg03, fp
09ab0     04 4E 85 F1 | 	sub	fp, #4
09ab4     A7 18 02 FB | 	rdlong	arg04, fp
09ab8     1C 4E 85 F1 | 	sub	fp, #28
09abc     09 12 06 F6 | 	mov	arg01, #9
09ac0     01 1A 06 F6 | 	mov	arg05, #1
09ac4     AC CB B0 FD | 	call	#__system___basic_get
09ac8     0C 4E 05 F1 | 	add	fp, #12
09acc     A7 1E 02 FB | 	rdlong	local01, fp
09ad0     10 4E 05 F1 | 	add	fp, #16
09ad4     A7 1A 02 FB | 	rdlong	arg05, fp
09ad8     0D 1F 02 F1 | 	add	local01, arg05
09adc     10 4E 85 F1 | 	sub	fp, #16
09ae0     A7 1E 62 FC | 	wrlong	local01, fp
09ae4     94 4E 05 F1 | 	add	fp, #148
09ae8     A7 1E 02 FB | 	rdlong	local01, fp
09aec     A0 4E 85 F1 | 	sub	fp, #160
09af0     2D 00 00 FF 
09af4     E0 E5 05 F1 | 	add	objptr, ##23520
09af8     F2 1E 62 FC | 	wrlong	local01, objptr
09afc     2D 00 00 FF 
09b00     E0 E5 85 F1 | 	sub	objptr, ##23520
09b04     14 6F BF FD | 	call	#_interpret
09b08                 | LR__0806
09b08     14 4E 05 F1 | 	add	fp, #20
09b0c     A7 1E 02 FB | 	rdlong	local01, fp
09b10     14 4E 85 F1 | 	sub	fp, #20
09b14     01 1E 56 F2 | 	cmps	local01, #1 wc
09b18     20 FF 9F 3D |  if_ae	jmp	#LR__0805
09b1c                 | '     close #9 
09b1c     09 12 06 F6 | 	mov	arg01, #9
09b20     2C 09 B1 FD | 	call	#__system__close
09b24     08 00 90 FD | 	jmp	#LR__0808
09b28                 | LR__0807
09b28     1E 12 06 F6 | 	mov	arg01, #30
09b2c     44 88 B0 FD | 	call	#_printerror
09b30                 | LR__0808
09b30                 | LR__0809
09b30     A7 F0 03 F6 | 	mov	ptra, fp
09b34     B2 00 A0 FD | 	call	#popregs_
09b38                 | _do_load_ret
09b38     2D 00 64 FD | 	ret
09b3c                 | 
09b3c                 | ' 
09b3c                 | ' '----------------- Run the program 
09b3c                 | ' 
09b3c                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
09b3c                 | ' 
09b3c                 | ' sub do_run
09b3c                 | _do_run
09b3c     01 4A 05 F6 | 	mov	COUNT_, #1
09b40     A8 00 A0 FD | 	call	#pushregs_
09b44     41 00 00 FF 
09b48     48 E4 05 F1 | 	add	objptr, ##33352
09b4c     F2 1C 02 FB | 	rdlong	arg06, objptr
09b50     0F 00 00 FF 
09b54     2C E5 05 F1 | 	add	objptr, ##7980
09b58     F2 1C 62 FC | 	wrlong	arg06, objptr
09b5c     04 E4 05 F1 | 	add	objptr, #4
09b60     F2 00 68 FC | 	wrlong	#0, objptr
09b64     04 E4 05 F1 | 	add	objptr, #4
09b68     FF FF FF FF 
09b6c     F2 FE 6B FC | 	wrlong	##-1, objptr
09b70                 | ' if inrun>0 then 
09b70     04 E4 05 F1 | 	add	objptr, #4
09b74     F2 1C 02 FB | 	rdlong	arg06, objptr
09b78     50 00 00 FF 
09b7c     80 E5 85 F1 | 	sub	objptr, ##41344
09b80     01 1C 16 F2 | 	cmp	arg06, #1 wc
09b84     30 00 90 CD |  if_b	jmp	#LR__0810
09b88     50 00 00 FF 
09b8c     84 E5 05 F1 | 	add	objptr, ##41348
09b90     F2 12 02 F6 | 	mov	arg01, objptr
09b94     10 E4 85 F1 | 	sub	objptr, #16
09b98     F2 14 02 FB | 	rdlong	arg02, objptr
09b9c     18 16 06 F6 | 	mov	arg03, #24
09ba0     45 00 00 FF 
09ba4     B4 E4 85 F1 | 	sub	objptr, ##35508
09ba8     D8 B1 B0 FD | 	call	#_psram_spin2_read1
09bac     0B 00 00 FF 
09bb0     C0 E4 85 F1 | 	sub	objptr, ##5824
09bb4                 | '   psram.read1(varptr(runheader),runptr,24)  
09bb4                 | '   return
09bb4     A4 02 90 FD | 	jmp	#LR__0816
09bb8                 | LR__0810
09bb8     50 00 00 FF 
09bbc     80 E5 05 F1 | 	add	objptr, ##41344
09bc0     F2 02 68 FC | 	wrlong	#1, objptr
09bc4     04 E4 05 F1 | 	add	objptr, #4
09bc8     F2 12 02 F6 | 	mov	arg01, objptr
09bcc     10 E4 85 F1 | 	sub	objptr, #16
09bd0     F2 14 02 FB | 	rdlong	arg02, objptr
09bd4     18 16 06 F6 | 	mov	arg03, #24
09bd8     45 00 00 FF 
09bdc     B4 E4 85 F1 | 	sub	objptr, ##35508
09be0     A0 B1 B0 FD | 	call	#_psram_spin2_read1
09be4                 | ' inrun=1
09be4                 | ' psram.read1(varptr(runheader),runptr,24) 
09be4                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
09be4     45 00 00 FF 
09be8     C4 E4 05 F1 | 	add	objptr, ##35524
09bec     F2 1E 02 FB | 	rdlong	local01, objptr
09bf0     50 00 00 FF 
09bf4     84 E5 85 F1 | 	sub	objptr, ##41348
09bf8     FF FF 7F FF 
09bfc     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
09c00     50 00 00 AF 
09c04     80 E5 05 A1 |  if_e	add	objptr, ##41344
09c08     F2 00 68 AC |  if_e	wrlong	#0, objptr
09c0c     50 00 00 AF 
09c10     80 E5 85 A1 |  if_e	sub	objptr, ##41344
09c14     44 02 90 AD |  if_e	jmp	#LR__0816
09c18                 | ' do 
09c18                 | LR__0811
09c18                 | '   if runptr<>oldrunptr then
09c18     50 00 00 FF 
09c1c     74 E5 05 F1 | 	add	objptr, ##41332
09c20     F2 1E 02 FB | 	rdlong	local01, objptr
09c24     08 E4 05 F1 | 	add	objptr, #8
09c28     F2 1C 02 FB | 	rdlong	arg06, objptr
09c2c     50 00 00 FF 
09c30     7C E5 85 F1 | 	sub	objptr, ##41340
09c34     0E 1F 0A F2 | 	cmp	local01, arg06 wz
09c38     CC 00 90 AD |  if_e	jmp	#LR__0812
09c3c     50 00 00 FF 
09c40     84 E5 05 F1 | 	add	objptr, ##41348
09c44     F2 12 02 F6 | 	mov	arg01, objptr
09c48     10 E4 85 F1 | 	sub	objptr, #16
09c4c     F2 14 02 FB | 	rdlong	arg02, objptr
09c50     18 16 06 F6 | 	mov	arg03, #24
09c54     45 00 00 FF 
09c58     B4 E4 85 F1 | 	sub	objptr, ##35508
09c5c     24 B1 B0 FD | 	call	#_psram_spin2_read1
09c60     32 00 00 FF 
09c64     80 E5 05 F1 | 	add	objptr, ##25984
09c68     F2 12 02 F6 | 	mov	arg01, objptr
09c6c     12 00 00 FF 
09c70     34 E5 05 F1 | 	add	objptr, ##9524
09c74     F2 14 02 FB | 	rdlong	arg02, objptr
09c78     14 00 00 FF 
09c7c     4C E5 85 F1 | 	sub	objptr, ##10572
09c80     F2 1E 02 FB | 	rdlong	local01, objptr
09c84     01 1E 66 F0 | 	shl	local01, #1
09c88     0F 15 02 F1 | 	add	arg02, local01
09c8c     14 00 00 FF 
09c90     64 E5 05 F1 | 	add	objptr, ##10596
09c94     F2 16 02 FB | 	rdlong	arg03, objptr
09c98     18 E4 85 F1 | 	sub	objptr, #24
09c9c     F2 1E 02 FB | 	rdlong	local01, objptr
09ca0     0F 17 82 F1 | 	sub	arg03, local01
09ca4     45 00 00 FF 
09ca8     B4 E4 85 F1 | 	sub	objptr, ##35508
09cac     D4 B0 B0 FD | 	call	#_psram_spin2_read1
09cb0     45 00 00 FF 
09cb4     CC E4 05 F1 | 	add	objptr, ##35532
09cb8     F2 1E 02 FB | 	rdlong	local01, objptr
09cbc     18 E4 85 F1 | 	sub	objptr, #24
09cc0     F2 1C 02 FB | 	rdlong	arg06, objptr
09cc4     0E 1F 82 F1 | 	sub	local01, arg06
09cc8     14 00 00 FF 
09ccc     4C E5 85 F1 | 	sub	objptr, ##10572
09cd0     F2 1C 02 FB | 	rdlong	arg06, objptr
09cd4     0E 1F 12 FD | 	qdiv	local01, arg06
09cd8     05 00 00 FF 
09cdc     18 E4 05 F1 | 	add	objptr, ##2584
09ce0     18 1E 62 FD | 	getqx	local01
09ce4     03 1E 86 F1 | 	sub	local01, #3
09ce8     F2 1E 62 FC | 	wrlong	local01, objptr
09cec     0F 00 00 FF 
09cf0     34 E5 05 F1 | 	add	objptr, ##7988
09cf4     F2 1E 02 FB | 	rdlong	local01, objptr
09cf8     08 E4 05 F1 | 	add	objptr, #8
09cfc     F2 1E 62 FC | 	wrlong	local01, objptr
09d00     50 00 00 FF 
09d04     7C E5 85 F1 | 	sub	objptr, ##41340
09d08                 | LR__0812
09d08     50 00 00 FF 
09d0c     98 E5 05 F1 | 	add	objptr, ##41368
09d10     F2 1E 02 FB | 	rdlong	local01, objptr
09d14     24 E4 85 F1 | 	sub	objptr, #36
09d18     F2 1E 62 FC | 	wrlong	local01, objptr
09d1c     04 E4 05 F1 | 	add	objptr, #4
09d20     F2 12 02 FB | 	rdlong	arg01, objptr
09d24     50 00 00 FF 
09d28     78 E5 85 F1 | 	sub	objptr, ##41336
09d2c     40 EB BF FD | 	call	#_execute_line
09d30     50 00 00 FF 
09d34     78 E5 05 F1 | 	add	objptr, ##41336
09d38     F2 FA 61 FC | 	wrlong	result1, objptr
09d3c     04 E4 85 F1 | 	sub	objptr, #4
09d40     F2 1E 02 FB | 	rdlong	local01, objptr
09d44     50 00 00 FF 
09d48     74 E5 85 F1 | 	sub	objptr, ##41332
09d4c     FF FF 3F FF 
09d50     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
09d54     0C 00 90 AD |  if_e	jmp	#LR__0813
09d58     B8 B3 B0 FD | 	call	#_usbnew_spin2_get_key
09d5c     06 FB 0D F2 | 	cmp	result1, #262 wz
09d60     B4 FE 9F 5D |  if_ne	jmp	#LR__0811
09d64                 | LR__0813
09d64                 | ' if runheader(5)<>$7FFF_FFFF then 
09d64     50 00 00 FF 
09d68     98 E5 05 F1 | 	add	objptr, ##41368
09d6c     F2 1E 02 FB | 	rdlong	local01, objptr
09d70     50 00 00 FF 
09d74     98 E5 85 F1 | 	sub	objptr, ##41368
09d78     FF FF 3F FF 
09d7c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
09d80     C4 00 90 AD |  if_e	jmp	#LR__0815
09d84                 | '   if keyclick=1 then paula.play(7,@atari_spl,44100,16384,1684)  
09d84     50 00 00 FF 
09d88     A4 E5 05 F1 | 	add	objptr, ##41380
09d8c     F2 1E 02 FB | 	rdlong	local01, objptr
09d90     50 00 00 FF 
09d94     A4 E5 85 F1 | 	sub	objptr, ##41380
09d98     01 1E 0E F2 | 	cmp	local01, #1 wz
09d9c     44 00 90 5D |  if_ne	jmp	#LR__0814
09da0     01 00 00 FF 
09da4     00 EA 05 F1 | 	add	ptr__dat__, ##512
09da8     F5 14 02 F6 | 	mov	arg02, ptr__dat__
09dac     01 00 00 FF 
09db0     00 EA 85 F1 | 	sub	ptr__dat__, ##512
09db4     07 12 06 F6 | 	mov	arg01, #7
09db8     56 00 00 FF 
09dbc     44 16 06 F6 | 	mov	arg03, ##44100
09dc0     0E 18 C6 F9 | 	decod	arg04, #14
09dc4     03 00 00 FF 
09dc8     94 1A 06 F6 | 	mov	arg05, ##1684
09dcc     01 1C 66 F6 | 	neg	arg06, #1
09dd0     0B 00 00 FF 
09dd4     C0 E4 05 F1 | 	add	objptr, ##5824
09dd8     60 B6 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
09ddc     0B 00 00 FF 
09de0     C0 E4 85 F1 | 	sub	objptr, ##5824
09de4                 | LR__0814
09de4                 | '   print "Stopped at line ";runheader(0)
09de4     00 12 06 F6 | 	mov	arg01, #0
09de8     34 10 B1 FD | 	call	#__system___getiolock_0370
09dec     FD 12 02 F6 | 	mov	arg01, result1
09df0     7C BA B0 FD | 	call	#__system___lockmem
09df4     27 01 00 FF 
09df8     5D 14 06 F6 | 	mov	arg02, ##@LR__4331
09dfc     00 12 06 F6 | 	mov	arg01, #0
09e00     00 16 06 F6 | 	mov	arg03, #0
09e04     5C C7 B0 FD | 	call	#__system___basic_print_string
09e08     50 00 00 FF 
09e0c     84 E5 05 F1 | 	add	objptr, ##41348
09e10     F2 14 02 FB | 	rdlong	arg02, objptr
09e14     50 00 00 FF 
09e18     84 E5 85 F1 | 	sub	objptr, ##41348
09e1c     00 12 06 F6 | 	mov	arg01, #0
09e20     00 16 06 F6 | 	mov	arg03, #0
09e24     0A 18 06 F6 | 	mov	arg04, #10
09e28     BC C7 B0 FD | 	call	#__system___basic_print_unsigned
09e2c     00 12 06 F6 | 	mov	arg01, #0
09e30     0A 14 06 F6 | 	mov	arg02, #10
09e34     00 16 06 F6 | 	mov	arg03, #0
09e38     D0 C6 B0 FD | 	call	#__system___basic_print_char
09e3c     00 12 06 F6 | 	mov	arg01, #0
09e40     DC 0F B1 FD | 	call	#__system___getiolock_0370
09e44     FD 00 68 FC | 	wrlong	#0, result1
09e48                 | LR__0815
09e48     50 00 00 FF 
09e4c     80 E5 05 F1 | 	add	objptr, ##41344
09e50     F2 00 68 FC | 	wrlong	#0, objptr
09e54     50 00 00 FF 
09e58     80 E5 85 F1 | 	sub	objptr, ##41344
09e5c                 | LR__0816
09e5c     A7 F0 03 F6 | 	mov	ptra, fp
09e60     B2 00 A0 FD | 	call	#popregs_
09e64                 | _do_run_ret
09e64     2D 00 64 FD | 	ret
09e68                 | 
09e68                 | ' 
09e68                 | ' ' ---------------  List the program. Todo: it should accept parameters and do "more"
09e68                 | ' 
09e68                 | ' sub do_list
09e68                 | _do_list
09e68     02 4A 05 F6 | 	mov	COUNT_, #2
09e6c     A8 00 A0 FD | 	call	#pushregs_
09e70     B8 F0 07 F1 | 	add	ptra, #184
09e74     04 4E 05 F1 | 	add	fp, #4
09e78     A7 00 68 FC | 	wrlong	#0, fp
09e7c     04 4E 05 F1 | 	add	fp, #4
09e80     FF FF BF FF 
09e84     A7 FE 6B FC | 	wrlong	##2147483647, fp
09e88     08 4E 85 F1 | 	sub	fp, #8
09e8c     41 00 00 FF 
09e90     44 E4 05 F1 | 	add	objptr, ##33348
09e94     F2 1E 02 FB | 	rdlong	local01, objptr
09e98     0F 17 02 F6 | 	mov	arg03, local01
09e9c     01 16 66 F0 | 	shl	arg03, #1
09ea0     0F 17 02 F1 | 	add	arg03, local01
09ea4     02 16 66 F0 | 	shl	arg03, #2
09ea8     03 00 00 FF 
09eac     04 E4 85 F1 | 	sub	objptr, ##1540
09eb0     F2 16 02 F1 | 	add	arg03, objptr
09eb4     0B 17 02 FB | 	rdlong	arg03, arg03
09eb8     A7 16 62 FC | 	wrlong	arg03, fp
09ebc                 | ' 
09ebc                 | ' startline=0 : endline=$7FFFFFFF
09ebc                 | ' numpar=compiledline(lineptr_e).result.uresult
09ebc                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
09ebc     01 16 0E F2 | 	cmp	arg03, #1 wz
09ec0     3E 00 00 FF 
09ec4     40 E4 85 F1 | 	sub	objptr, ##31808
09ec8     3C 00 90 5D |  if_ne	jmp	#LR__0820
09ecc     A4 EA BF FD | 	call	#_pop
09ed0     FF 1E 02 F6 | 	mov	local01, result3
09ed4     0C 4E 05 F1 | 	add	fp, #12
09ed8     A7 FA 61 FC | 	wrlong	result1, fp
09edc     04 4E 05 F1 | 	add	fp, #4
09ee0     A7 FC 61 FC | 	wrlong	result2, fp
09ee4     04 4E 05 F1 | 	add	fp, #4
09ee8     A7 1E 62 FC | 	wrlong	local01, fp
09eec     08 4E 85 F1 | 	sub	fp, #8
09ef0     A7 12 02 F6 | 	mov	arg01, fp
09ef4     0C 4E 85 F1 | 	sub	fp, #12
09ef8     08 43 B0 FD | 	call	#_converttoint
09efc     04 4E 05 F1 | 	add	fp, #4
09f00     A7 FA 61 FC | 	wrlong	result1, fp
09f04     04 4E 85 F1 | 	sub	fp, #4
09f08                 | LR__0820
09f08                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
09f08     A7 16 02 FB | 	rdlong	arg03, fp
09f0c     02 16 0E F2 | 	cmp	arg03, #2 wz
09f10     7C 00 90 5D |  if_ne	jmp	#LR__0821
09f14     5C EA BF FD | 	call	#_pop
09f18     FF 1E 02 F6 | 	mov	local01, result3
09f1c     0C 4E 05 F1 | 	add	fp, #12
09f20     A7 FA 61 FC | 	wrlong	result1, fp
09f24     04 4E 05 F1 | 	add	fp, #4
09f28     A7 FC 61 FC | 	wrlong	result2, fp
09f2c     04 4E 05 F1 | 	add	fp, #4
09f30     A7 1E 62 FC | 	wrlong	local01, fp
09f34     08 4E 85 F1 | 	sub	fp, #8
09f38     A7 12 02 F6 | 	mov	arg01, fp
09f3c     0C 4E 85 F1 | 	sub	fp, #12
09f40     C0 42 B0 FD | 	call	#_converttoint
09f44     FD 1E 02 F6 | 	mov	local01, result1
09f48     08 4E 05 F1 | 	add	fp, #8
09f4c     A7 1E 62 FC | 	wrlong	local01, fp
09f50     08 4E 85 F1 | 	sub	fp, #8
09f54     1C EA BF FD | 	call	#_pop
09f58     FF 1E 02 F6 | 	mov	local01, result3
09f5c     0C 4E 05 F1 | 	add	fp, #12
09f60     A7 FA 61 FC | 	wrlong	result1, fp
09f64     04 4E 05 F1 | 	add	fp, #4
09f68     A7 FC 61 FC | 	wrlong	result2, fp
09f6c     04 4E 05 F1 | 	add	fp, #4
09f70     A7 1E 62 FC | 	wrlong	local01, fp
09f74     08 4E 85 F1 | 	sub	fp, #8
09f78     A7 12 02 F6 | 	mov	arg01, fp
09f7c     0C 4E 85 F1 | 	sub	fp, #12
09f80     80 42 B0 FD | 	call	#_converttoint
09f84     04 4E 05 F1 | 	add	fp, #4
09f88     A7 FA 61 FC | 	wrlong	result1, fp
09f8c     04 4E 85 F1 | 	sub	fp, #4
09f90                 | LR__0821
09f90                 | ' 
09f90                 | ' 
09f90                 | ' print
09f90     00 12 06 F6 | 	mov	arg01, #0
09f94     88 0E B1 FD | 	call	#__system___getiolock_0370
09f98     FD 12 02 F6 | 	mov	arg01, result1
09f9c     D0 B8 B0 FD | 	call	#__system___lockmem
09fa0     00 12 06 F6 | 	mov	arg01, #0
09fa4     0A 14 06 F6 | 	mov	arg02, #10
09fa8     00 16 06 F6 | 	mov	arg03, #0
09fac     5C C5 B0 FD | 	call	#__system___basic_print_char
09fb0     00 12 06 F6 | 	mov	arg01, #0
09fb4     68 0E B1 FD | 	call	#__system___getiolock_0370
09fb8     FD 00 68 FC | 	wrlong	#0, result1
09fbc     41 00 00 FF 
09fc0     48 E4 05 F1 | 	add	objptr, ##33352
09fc4     F2 20 02 FB | 	rdlong	local02, objptr
09fc8     11 00 00 FF 
09fcc     54 E4 05 F1 | 	add	objptr, ##8788
09fd0     F2 20 62 FC | 	wrlong	local02, objptr
09fd4     52 00 00 FF 
09fd8     9C E4 85 F1 | 	sub	objptr, ##42140
09fdc                 | ' do 
09fdc                 | LR__0822
09fdc     20 4E 05 F1 | 	add	fp, #32
09fe0     A7 12 02 F6 | 	mov	arg01, fp
09fe4     20 4E 85 F1 | 	sub	fp, #32
09fe8     52 00 00 FF 
09fec     9C E4 05 F1 | 	add	objptr, ##42140
09ff0     F2 14 02 FB | 	rdlong	arg02, objptr
09ff4     18 16 06 F6 | 	mov	arg03, #24
09ff8     46 00 00 FF 
09ffc     DC E5 85 F1 | 	sub	objptr, ##36316
0a000     80 AD B0 FD | 	call	#_psram_spin2_read1
0a004     0B 00 00 FF 
0a008     C0 E4 85 F1 | 	sub	objptr, ##5824
0a00c                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart
0a00c                 | '   if header(0)<> $FFFFFFFF then
0a00c     20 4E 05 F1 | 	add	fp, #32
0a010     A7 20 02 FB | 	rdlong	local02, fp
0a014     20 4E 85 F1 | 	sub	fp, #32
0a018     FF FF 7F FF 
0a01c     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0a020     A8 00 90 AD |  if_e	jmp	#LR__0824
0a024     38 4E 05 F1 | 	add	fp, #56
0a028     3F 16 06 F6 | 	mov	arg03, #63
0a02c     28 16 62 FD | 	setq	arg03
0a030     A7 00 68 FC | 	wrlong	#0, fp
0a034     A7 12 02 F6 | 	mov	arg01, fp
0a038     10 4E 85 F1 | 	sub	fp, #16
0a03c     A7 14 02 FB | 	rdlong	arg02, fp
0a040     04 4E 05 F1 | 	add	fp, #4
0a044     A7 16 02 FB | 	rdlong	arg03, fp
0a048     2C 4E 85 F1 | 	sub	fp, #44
0a04c     0B 00 00 FF 
0a050     C0 E4 05 F1 | 	add	objptr, ##5824
0a054     2C AD B0 FD | 	call	#_psram_spin2_read1
0a058     0B 00 00 FF 
0a05c     C0 E4 85 F1 | 	sub	objptr, ##5824
0a060                 | '     longfill(linebuf,0,64)
0a060                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0a060                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0a060     20 4E 05 F1 | 	add	fp, #32
0a064     A7 20 02 FB | 	rdlong	local02, fp
0a068     1C 4E 85 F1 | 	sub	fp, #28
0a06c     A7 1E 02 FB | 	rdlong	local01, fp
0a070     04 4E 85 F1 | 	sub	fp, #4
0a074     0F 21 52 F2 | 	cmps	local02, local01 wc
0a078     30 00 90 CD |  if_b	jmp	#LR__0823
0a07c     20 4E 05 F1 | 	add	fp, #32
0a080     A7 20 02 FB | 	rdlong	local02, fp
0a084     18 4E 85 F1 | 	sub	fp, #24
0a088     A7 16 02 FB | 	rdlong	arg03, fp
0a08c     08 4E 85 F1 | 	sub	fp, #8
0a090     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0a094     14 00 90 1D |  if_a	jmp	#LR__0823
0a098     38 4E 05 F1 | 	add	fp, #56
0a09c     A7 12 02 F6 | 	mov	arg01, fp
0a0a0     38 4E 85 F1 | 	sub	fp, #56
0a0a4                 | ' 
0a0a4                 | ' write(text)
0a0a4     A4 A7 B0 FD | 	call	#_hg010b_spin2_write
0a0a8                 | ' crlf
0a0a8     00 A9 B0 FD | 	call	#_hg010b_spin2_crlf
0a0ac                 | LR__0823
0a0ac     34 4E 05 F1 | 	add	fp, #52
0a0b0     A7 20 02 FB | 	rdlong	local02, fp
0a0b4     34 4E 85 F1 | 	sub	fp, #52
0a0b8     52 00 00 FF 
0a0bc     9C E4 05 F1 | 	add	objptr, ##42140
0a0c0     F2 20 62 FC | 	wrlong	local02, objptr
0a0c4     52 00 00 FF 
0a0c8     9C E4 85 F1 | 	sub	objptr, ##42140
0a0cc                 | LR__0824
0a0cc     34 4E 05 F1 | 	add	fp, #52
0a0d0     A7 20 02 FB | 	rdlong	local02, fp
0a0d4     34 4E 85 F1 | 	sub	fp, #52
0a0d8     FF FF 3F FF 
0a0dc     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0a0e0     20 4E 05 51 |  if_ne	add	fp, #32
0a0e4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0a0e8     20 4E 85 51 |  if_ne	sub	fp, #32
0a0ec     FF FF 7F 5F 
0a0f0     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0a0f4     E4 FE 9F 5D |  if_ne	jmp	#LR__0822
0a0f8     A7 F0 03 F6 | 	mov	ptra, fp
0a0fc     B2 00 A0 FD | 	call	#popregs_
0a100                 | _do_list_ret
0a100     2D 00 64 FD | 	ret
0a104                 | 
0a104                 | ' 
0a104                 | ' '---------------- Clear the program
0a104                 | ' 
0a104                 | ' sub do_new
0a104                 | _do_new
0a104     03 4A 05 F6 | 	mov	COUNT_, #3
0a108     A8 00 A0 FD | 	call	#pushregs_
0a10c     00 12 06 F6 | 	mov	arg01, #0
0a110     01 14 66 F6 | 	neg	arg02, #1
0a114     01 16 06 F6 | 	mov	arg03, #1
0a118     00 18 06 F6 | 	mov	arg04, #0
0a11c     0B 00 00 FF 
0a120     C0 E4 05 F1 | 	add	objptr, ##5824
0a124                 | '     return fill(addr, pattern, count, listPtr, 4)
0a124     04 1A 06 F6 | 	mov	arg05, #4
0a128     90 AD B0 FD | 	call	#_psram_spin2_fill
0a12c     20 00 00 FF 
0a130     0C E5 05 F1 | 	add	objptr, ##16652
0a134     F2 00 68 FC | 	wrlong	#0, objptr
0a138     15 00 00 FF 
0a13c     7C E4 05 F1 | 	add	objptr, ##10876
0a140     F2 00 68 FC | 	wrlong	#0, objptr
0a144     0F 00 00 FF 
0a148     2C E5 05 F1 | 	add	objptr, ##7980
0a14c     F2 00 68 FC | 	wrlong	#0, objptr
0a150     04 E4 05 F1 | 	add	objptr, #4
0a154     F2 00 68 FC | 	wrlong	#0, objptr
0a158     16 00 00 FF 
0a15c     5C E5 85 F1 | 	sub	objptr, ##11612
0a160     F2 00 68 FC | 	wrlong	#0, objptr
0a164     07 00 00 FF 
0a168     24 E4 05 F1 | 	add	objptr, ##3620
0a16c     F2 00 68 FC | 	wrlong	#0, objptr
0a170     07 00 00 FF 
0a174     20 E4 85 F1 | 	sub	objptr, ##3616
0a178     F2 00 68 FC | 	wrlong	#0, objptr
0a17c     0F 00 00 FF 
0a180     34 E4 05 F1 | 	add	objptr, ##7732
0a184     F2 00 68 FC | 	wrlong	#0, objptr
0a188     08 00 00 FF 
0a18c     08 E4 85 F1 | 	sub	objptr, ##4104
0a190     F2 00 68 FC | 	wrlong	#0, objptr
0a194     04 E4 05 F1 | 	add	objptr, #4
0a198     FF FF FF FF 
0a19c     F2 FE 6B FC | 	wrlong	##-1, objptr
0a1a0     0F 00 00 FF 
0a1a4     4C E5 05 F1 | 	add	objptr, ##8012
0a1a8     F2 00 68 FC | 	wrlong	#0, objptr
0a1ac                 | ' 
0a1ac                 | ' pslpoke(0,$FFFFFFFF)
0a1ac                 | ' varnum=0
0a1ac                 | ' programstart=0 :runptr=0 : runptr2=0
0a1ac                 | ' stackpointer=0
0a1ac                 | ' lineptr=0 
0a1ac                 | ' programptr=0 : stringptr=0
0a1ac                 | ' lastline=0 : lastlineptr=-1 :fortop=0
0a1ac                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0a1ac     00 1E 06 F6 | 	mov	local01, #0
0a1b0     07 00 00 FF 
0a1b4     40 E5 85 F1 | 	sub	objptr, ##3904
0a1b8     97 16 48 FB | 	callpa	#(@LR__0831-@LR__0830)>>2,fcache_load_ptr_
0a1bc                 | LR__0830
0a1bc     0F 21 02 F6 | 	mov	local02, local01
0a1c0     02 20 66 F0 | 	shl	local02, #2
0a1c4     0F 21 02 F1 | 	add	local02, local01
0a1c8     02 20 66 F0 | 	shl	local02, #2
0a1cc     F2 20 02 F1 | 	add	local02, objptr
0a1d0     08 20 06 F1 | 	add	local02, #8
0a1d4     FF FF FF FF 
0a1d8     10 FF 6B FC | 	wrlong	##-1, local02
0a1dc     01 1E 06 F1 | 	add	local01, #1
0a1e0     81 1E 56 F2 | 	cmps	local01, #129 wc
0a1e4     D4 FF 9F CD |  if_b	jmp	#LR__0830
0a1e8                 | LR__0831
0a1e8     49 00 00 FF 
0a1ec     5C E4 85 F1 | 	sub	objptr, ##37468
0a1f0                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i))
0a1f0     00 1E 06 F6 | 	mov	local01, #0
0a1f4                 | LR__0832
0a1f4     0F 21 02 F6 | 	mov	local02, local01
0a1f8     02 20 66 F0 | 	shl	local02, #2
0a1fc     51 00 00 FF 
0a200     F8 E5 05 F1 | 	add	objptr, ##41976
0a204     F2 20 02 F1 | 	add	local02, objptr
0a208     10 21 0A FB | 	rdlong	local02, local02 wz
0a20c     51 00 00 FF 
0a210     F8 E5 85 F1 | 	sub	objptr, ##41976
0a214     34 00 90 AD |  if_e	jmp	#LR__0833
0a218     0F 13 02 F6 | 	mov	arg01, local01
0a21c     00 14 06 F6 | 	mov	arg02, #0
0a220     00 16 06 F6 | 	mov	arg03, #0
0a224     B0 96 B0 FD | 	call	#_hg010b_spin2_setspritesize
0a228     0F 21 02 F6 | 	mov	local02, local01
0a22c     02 20 66 F0 | 	shl	local02, #2
0a230     51 00 00 FF 
0a234     F8 E5 05 F1 | 	add	objptr, ##41976
0a238     F2 20 02 F1 | 	add	local02, objptr
0a23c     10 13 02 FB | 	rdlong	arg01, local02
0a240     51 00 00 FF 
0a244     F8 E5 85 F1 | 	sub	objptr, ##41976
0a248     C8 F1 B0 FD | 	call	#__system___gc_free
0a24c                 | LR__0833
0a24c     F2 22 02 FB | 	rdlong	local03, objptr
0a250     52 00 00 FF 
0a254     3C E4 05 F1 | 	add	objptr, ##42044
0a258     F2 22 62 FC | 	wrlong	local03, objptr
0a25c     52 00 00 FF 
0a260     3C E4 85 F1 | 	sub	objptr, ##42044
0a264     11 12 06 F6 | 	mov	arg01, #17
0a268     08 14 06 F6 | 	mov	arg02, #8
0a26c     10 16 06 F6 | 	mov	arg03, #16
0a270     64 96 B0 FD | 	call	#_hg010b_spin2_setspritesize
0a274     01 1E 06 F1 | 	add	local01, #1
0a278     10 1E 56 F2 | 	cmps	local01, #16 wc
0a27c     74 FF 9F CD |  if_b	jmp	#LR__0832
0a280     A7 F0 03 F6 | 	mov	ptra, fp
0a284     B2 00 A0 FD | 	call	#popregs_
0a288                 | _do_new_ret
0a288     2D 00 64 FD | 	ret
0a28c                 | 
0a28c                 | ' 
0a28c                 | ' '----------------------- goto
0a28c                 | ' sub do_fast_goto
0a28c                 | _do_fast_goto
0a28c     02 4A 05 F6 | 	mov	COUNT_, #2
0a290     A8 00 A0 FD | 	call	#pushregs_
0a294                 | _do_fast_goto_enter
0a294     41 00 00 FF 
0a298     44 E4 05 F1 | 	add	objptr, ##33348
0a29c     F2 12 02 FB | 	rdlong	arg01, objptr
0a2a0     09 1F 02 F6 | 	mov	local01, arg01
0a2a4     01 1E 66 F0 | 	shl	local01, #1
0a2a8     09 1F 02 F1 | 	add	local01, arg01
0a2ac     02 1E 66 F0 | 	shl	local01, #2
0a2b0     03 00 00 FF 
0a2b4     04 E4 85 F1 | 	sub	objptr, ##1540
0a2b8     F2 1E 02 F1 | 	add	local01, objptr
0a2bc     0F 21 02 FB | 	rdlong	local02, local01
0a2c0     10 13 02 F6 | 	mov	arg01, local02
0a2c4     3E 00 00 FF 
0a2c8     40 E4 85 F1 | 	sub	objptr, ##31808
0a2cc     60 82 B0 FD | 	call	#_pslpeek
0a2d0     FD 12 02 F6 | 	mov	arg01, result1
0a2d4                 | ' 
0a2d4                 | ' testptr=compiledline(lineptr_e).result.uresult
0a2d4                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0a2d4                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0a2d4     41 00 00 FF 
0a2d8     44 E4 05 F1 | 	add	objptr, ##33348
0a2dc     F2 FA 01 FB | 	rdlong	result1, objptr
0a2e0     FD 1E 02 F6 | 	mov	local01, result1
0a2e4     01 1E 66 F0 | 	shl	local01, #1
0a2e8     FD 1E 02 F1 | 	add	local01, result1
0a2ec     02 1E 66 F0 | 	shl	local01, #2
0a2f0     03 00 00 FF 
0a2f4     04 E4 85 F1 | 	sub	objptr, ##1540
0a2f8     F2 1E 02 F1 | 	add	local01, objptr
0a2fc     04 1E 06 F1 | 	add	local01, #4
0a300     0F 1F 02 FB | 	rdlong	local01, local01
0a304     0F 13 0A F2 | 	cmp	arg01, local01 wz
0a308     3E 00 00 FF 
0a30c     40 E4 85 F1 | 	sub	objptr, ##31808
0a310     58 00 90 5D |  if_ne	jmp	#LR__0840
0a314     50 00 00 FF 
0a318     74 E5 05 F1 | 	add	objptr, ##41332
0a31c     F2 20 62 FC | 	wrlong	local02, objptr
0a320     0F 00 00 FF 
0a324     34 E5 85 F1 | 	sub	objptr, ##7988
0a328     F2 20 02 FB | 	rdlong	local02, objptr
0a32c     01 20 86 F1 | 	sub	local02, #1
0a330     04 E4 05 F1 | 	add	objptr, #4
0a334     F2 20 62 FC | 	wrlong	local02, objptr
0a338                 | '   runptr=testptr
0a338                 | '   lineptr_e=lineptr-1
0a338                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0a338     0F 00 00 FF 
0a33c     54 E5 05 F1 | 	add	objptr, ##8020
0a340     F2 20 02 FB | 	rdlong	local02, objptr
0a344     50 00 00 FF 
0a348     98 E5 85 F1 | 	sub	objptr, ##41368
0a34c     FF FF 3F FF 
0a350     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0a354     50 00 00 AF 
0a358     98 E5 05 A1 |  if_e	add	objptr, ##41368
0a35c     F2 00 68 AC |  if_e	wrlong	#0, objptr
0a360     50 00 00 AF 
0a364     98 E5 85 A1 |  if_e	sub	objptr, ##41368
0a368     04 00 90 FD | 	jmp	#LR__0841
0a36c                 | LR__0840
0a36c     0C 00 B0 FD | 	call	#_do_find_goto
0a370                 | LR__0841
0a370     A7 F0 03 F6 | 	mov	ptra, fp
0a374     B2 00 A0 FD | 	call	#popregs_
0a378                 | _do_fast_goto_ret
0a378     2D 00 64 FD | 	ret
0a37c                 | 
0a37c                 | ' 
0a37c                 | ' 
0a37c                 | ' 
0a37c                 | ' 
0a37c                 | ' sub do_find_goto
0a37c                 | _do_find_goto
0a37c     03 4A 05 F6 | 	mov	COUNT_, #3
0a380     A8 00 A0 FD | 	call	#pushregs_
0a384     24 F0 07 F1 | 	add	ptra, #36
0a388                 | _do_find_goto_enter
0a388     41 00 00 FF 
0a38c     44 E4 05 F1 | 	add	objptr, ##33348
0a390     F2 1E 02 FB | 	rdlong	local01, objptr
0a394     0F 21 02 F6 | 	mov	local02, local01
0a398     01 20 66 F0 | 	shl	local02, #1
0a39c     0F 21 02 F1 | 	add	local02, local01
0a3a0     02 20 66 F0 | 	shl	local02, #2
0a3a4     03 00 00 FF 
0a3a8     04 E4 85 F1 | 	sub	objptr, ##1540
0a3ac     F2 20 02 F1 | 	add	local02, objptr
0a3b0     04 20 06 F1 | 	add	local02, #4
0a3b4     10 21 02 FB | 	rdlong	local02, local02
0a3b8     A7 20 62 FC | 	wrlong	local02, fp
0a3bc     03 00 00 FF 
0a3c0     08 E4 05 F1 | 	add	objptr, ##1544
0a3c4     F2 22 02 FB | 	rdlong	local03, objptr
0a3c8     41 00 00 FF 
0a3cc     48 E4 85 F1 | 	sub	objptr, ##33352
0a3d0     04 4E 05 F1 | 	add	fp, #4
0a3d4     A7 22 62 FC | 	wrlong	local03, fp
0a3d8     04 4E 85 F1 | 	sub	fp, #4
0a3dc                 | ' 
0a3dc                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
0a3dc                 | '  ' print "find goto"                                                                     'print gotoline 
0a3dc                 | ' gotoptr=programstart
0a3dc                 | ' do
0a3dc                 | LR__0850
0a3dc     0C 4E 05 F1 | 	add	fp, #12
0a3e0     A7 12 02 F6 | 	mov	arg01, fp
0a3e4     08 4E 85 F1 | 	sub	fp, #8
0a3e8     A7 14 02 FB | 	rdlong	arg02, fp
0a3ec     04 4E 85 F1 | 	sub	fp, #4
0a3f0     18 16 06 F6 | 	mov	arg03, #24
0a3f4     0B 00 00 FF 
0a3f8     C0 E4 05 F1 | 	add	objptr, ##5824
0a3fc     84 A9 B0 FD | 	call	#_psram_spin2_read1
0a400     0B 00 00 FF 
0a404     C0 E4 85 F1 | 	sub	objptr, ##5824
0a408                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0a408                 | '   if gotoheader(0)<>$FFFFFFFF then
0a408     0C 4E 05 F1 | 	add	fp, #12
0a40c     A7 22 02 FB | 	rdlong	local03, fp
0a410     0C 4E 85 F1 | 	sub	fp, #12
0a414     FF FF 7F FF 
0a418     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0a41c     24 00 90 AD |  if_e	jmp	#LR__0851
0a420     04 4E 05 F1 | 	add	fp, #4
0a424     A7 22 02 FB | 	rdlong	local03, fp
0a428     04 4E 05 F1 | 	add	fp, #4
0a42c     A7 22 62 FC | 	wrlong	local03, fp
0a430     18 4E 05 F1 | 	add	fp, #24
0a434     A7 22 02 FB | 	rdlong	local03, fp
0a438     1C 4E 85 F1 | 	sub	fp, #28
0a43c     A7 22 62 FC | 	wrlong	local03, fp
0a440     04 4E 85 F1 | 	sub	fp, #4
0a444                 | LR__0851
0a444     20 4E 05 F1 | 	add	fp, #32
0a448     A7 22 02 FB | 	rdlong	local03, fp
0a44c     20 4E 85 F1 | 	sub	fp, #32
0a450     FF FF 3F FF 
0a454     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0a458     0C 4E 05 51 |  if_ne	add	fp, #12
0a45c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0a460     0C 4E 85 51 |  if_ne	sub	fp, #12
0a464     FF FF 7F 5F 
0a468     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0a46c     18 00 90 AD |  if_e	jmp	#LR__0852
0a470     0C 4E 05 F1 | 	add	fp, #12
0a474     A7 22 02 FB | 	rdlong	local03, fp
0a478     0C 4E 85 F1 | 	sub	fp, #12
0a47c     A7 20 02 FB | 	rdlong	local02, fp
0a480     10 23 0A F2 | 	cmp	local03, local02 wz
0a484     54 FF 9F 5D |  if_ne	jmp	#LR__0850
0a488                 | LR__0852
0a488                 | ' 
0a488                 | ' if gotoheader(0)=gotoline then
0a488     0C 4E 05 F1 | 	add	fp, #12
0a48c     A7 22 02 FB | 	rdlong	local03, fp
0a490     0C 4E 85 F1 | 	sub	fp, #12
0a494     A7 1E 02 FB | 	rdlong	local01, fp
0a498     0F 23 0A F2 | 	cmp	local03, local01 wz
0a49c     D8 00 90 5D |  if_ne	jmp	#LR__0853
0a4a0     41 00 00 FF 
0a4a4     44 E4 05 F1 | 	add	objptr, ##33348
0a4a8     F2 1E 02 FB | 	rdlong	local01, objptr
0a4ac     0F 21 02 F6 | 	mov	local02, local01
0a4b0     01 20 66 F0 | 	shl	local02, #1
0a4b4     0F 21 02 F1 | 	add	local02, local01
0a4b8     02 20 66 F0 | 	shl	local02, #2
0a4bc     03 00 00 FF 
0a4c0     04 E4 85 F1 | 	sub	objptr, ##1540
0a4c4     F2 20 02 F1 | 	add	local02, objptr
0a4c8     08 4E 05 F1 | 	add	fp, #8
0a4cc     A7 22 02 FB | 	rdlong	local03, fp
0a4d0     10 23 62 FC | 	wrlong	local03, local02
0a4d4     03 00 00 FF 
0a4d8     04 E4 05 F1 | 	add	objptr, ##1540
0a4dc     F2 1E 02 FB | 	rdlong	local01, objptr
0a4e0     0F 21 02 F6 | 	mov	local02, local01
0a4e4     01 20 66 F0 | 	shl	local02, #1
0a4e8     0F 21 02 F1 | 	add	local02, local01
0a4ec     02 20 66 F0 | 	shl	local02, #2
0a4f0     03 00 00 FF 
0a4f4     04 E4 85 F1 | 	sub	objptr, ##1540
0a4f8     F2 20 02 F1 | 	add	local02, objptr
0a4fc     08 20 06 F1 | 	add	local02, #8
0a500     10 9D 68 FC | 	wrlong	#78, local02
0a504     03 00 00 FF 
0a508     04 E4 05 F1 | 	add	objptr, ##1540
0a50c     F2 20 02 FB | 	rdlong	local02, objptr
0a510     10 13 02 F6 | 	mov	arg01, local02
0a514     01 12 66 F0 | 	shl	arg01, #1
0a518     10 13 02 F1 | 	add	arg01, local02
0a51c     02 12 66 F0 | 	shl	arg01, #2
0a520     03 00 00 FF 
0a524     04 E4 85 F1 | 	sub	objptr, ##1540
0a528     F2 12 02 F1 | 	add	arg01, objptr
0a52c     12 00 00 FF 
0a530     3C E5 05 F1 | 	add	objptr, ##9532
0a534     F2 14 02 FB | 	rdlong	arg02, objptr
0a538     02 22 06 F6 | 	mov	local03, #2
0a53c     10 23 02 F1 | 	add	local03, local02
0a540     14 00 00 FF 
0a544     54 E5 85 F1 | 	sub	objptr, ##10580
0a548     F2 16 02 FB | 	rdlong	arg03, objptr
0a54c     0B 23 02 FD | 	qmul	local03, arg03
0a550     08 4E 85 F1 | 	sub	fp, #8
0a554     30 00 00 FF 
0a558     68 E5 85 F1 | 	sub	objptr, ##24936
0a55c     18 22 62 FD | 	getqx	local03
0a560     11 15 02 F1 | 	add	arg02, local03
0a564     B8 A8 B0 FD | 	call	#_psram_spin2_write
0a568     0B 00 00 FF 
0a56c     C0 E4 85 F1 | 	sub	objptr, ##5824
0a570     18 FD BF FD | 	call	#_do_fast_goto
0a574     08 00 90 FD | 	jmp	#LR__0854
0a578                 | LR__0853
0a578     26 12 06 F6 | 	mov	arg01, #38
0a57c     F4 7D B0 FD | 	call	#_printerror
0a580                 | LR__0854
0a580     A7 F0 03 F6 | 	mov	ptra, fp
0a584     B2 00 A0 FD | 	call	#popregs_
0a588                 | _do_find_goto_ret
0a588     2D 00 64 FD | 	ret
0a58c                 | 
0a58c                 | ' 
0a58c                 | ' sub do_slow_goto
0a58c                 | _do_slow_goto
0a58c                 | _do_slow_goto_ret
0a58c     2D 00 64 FD | 	ret
0a590                 | 
0a590                 | ' 
0a590                 | ' '----------------------- Error processing
0a590                 | ' 
0a590                 | ' sub do_error
0a590                 | _do_error
0a590     01 4A 05 F6 | 	mov	COUNT_, #1
0a594     A8 00 A0 FD | 	call	#pushregs_
0a598     41 00 00 FF 
0a59c     44 E4 05 F1 | 	add	objptr, ##33348
0a5a0     F2 18 02 FB | 	rdlong	arg04, objptr
0a5a4     0C 17 02 F6 | 	mov	arg03, arg04
0a5a8     01 16 66 F0 | 	shl	arg03, #1
0a5ac     0C 17 02 F1 | 	add	arg03, arg04
0a5b0     02 16 66 F0 | 	shl	arg03, #2
0a5b4     03 00 00 FF 
0a5b8     04 E4 85 F1 | 	sub	objptr, ##1540
0a5bc     F2 16 02 F1 | 	add	arg03, objptr
0a5c0     0B 1F 02 FB | 	rdlong	local01, arg03
0a5c4                 | ' r=compiledline(lineptr_e).result.uresult
0a5c4                 | ' print "Error ";r;": ";errors$(r)
0a5c4     00 12 06 F6 | 	mov	arg01, #0
0a5c8     3E 00 00 FF 
0a5cc     40 E4 85 F1 | 	sub	objptr, ##31808
0a5d0     4C 08 B1 FD | 	call	#__system___getiolock_0370
0a5d4     FD 12 02 F6 | 	mov	arg01, result1
0a5d8     94 B2 B0 FD | 	call	#__system___lockmem
0a5dc     27 01 00 FF 
0a5e0     6E 14 06 F6 | 	mov	arg02, ##@LR__4332
0a5e4     00 12 06 F6 | 	mov	arg01, #0
0a5e8     00 16 06 F6 | 	mov	arg03, #0
0a5ec     74 BF B0 FD | 	call	#__system___basic_print_string
0a5f0     00 12 06 F6 | 	mov	arg01, #0
0a5f4     0F 15 02 F6 | 	mov	arg02, local01
0a5f8     00 16 06 F6 | 	mov	arg03, #0
0a5fc     0A 18 06 F6 | 	mov	arg04, #10
0a600     E4 BF B0 FD | 	call	#__system___basic_print_unsigned
0a604     27 01 00 FF 
0a608     75 14 06 F6 | 	mov	arg02, ##@LR__4333
0a60c     00 12 06 F6 | 	mov	arg01, #0
0a610     00 16 06 F6 | 	mov	arg03, #0
0a614     4C BF B0 FD | 	call	#__system___basic_print_string
0a618     02 1E 66 F0 | 	shl	local01, #2
0a61c     3C 00 00 FF 
0a620     40 E4 05 F1 | 	add	objptr, ##30784
0a624     F2 1E 02 F1 | 	add	local01, objptr
0a628     0F 15 02 FB | 	rdlong	arg02, local01
0a62c     00 12 06 F6 | 	mov	arg01, #0
0a630     00 16 06 F6 | 	mov	arg03, #0
0a634     3C 00 00 FF 
0a638     40 E4 85 F1 | 	sub	objptr, ##30784
0a63c     24 BF B0 FD | 	call	#__system___basic_print_string
0a640     00 12 06 F6 | 	mov	arg01, #0
0a644     0A 14 06 F6 | 	mov	arg02, #10
0a648     00 16 06 F6 | 	mov	arg03, #0
0a64c     BC BE B0 FD | 	call	#__system___basic_print_char
0a650     00 12 06 F6 | 	mov	arg01, #0
0a654     C8 07 B1 FD | 	call	#__system___getiolock_0370
0a658     FD 00 68 FC | 	wrlong	#0, result1
0a65c     A7 F0 03 F6 | 	mov	ptra, fp
0a660     B2 00 A0 FD | 	call	#popregs_
0a664                 | _do_error_ret
0a664     2D 00 64 FD | 	ret
0a668                 | 
0a668                 | ' 
0a668                 | ' 
0a668                 | ' '------------------ Assigning to a variable  
0a668                 | ' 
0a668                 | ' function  do_convertstring(psaddr as ulong) as string
0a668                 | _do_convertstring
0a668     04 4A 05 F6 | 	mov	COUNT_, #4
0a66c     A8 00 A0 FD | 	call	#pushregs_
0a670     09 1F 02 F6 | 	mov	local01, arg01
0a674     B8 7E B0 FD | 	call	#_pslpeek
0a678     FD 20 02 F6 | 	mov	local02, result1
0a67c     27 01 00 FF 
0a680     78 22 06 F6 | 	mov	local03, ##@LR__4334
0a684                 | ' 'print "in do_convertstring: psaddr=";psaddr
0a684                 | ' l=pslpeek(psaddr)
0a684                 | ' 'print "in do_convertstring: len=";l
0a684                 | ' s="" 
0a684                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0a684     01 24 06 F6 | 	mov	local04, #1
0a688     01 20 06 F1 | 	add	local02, #1
0a68c                 | LR__0860
0a68c     10 25 52 F2 | 	cmps	local04, local02 wc
0a690     30 00 90 3D |  if_ae	jmp	#LR__0861
0a694     0F 13 02 F6 | 	mov	arg01, local01
0a698     03 12 06 F1 | 	add	arg01, #3
0a69c     12 13 02 F1 | 	add	arg01, local04
0a6a0     34 7E B0 FD | 	call	#_pspeek
0a6a4     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0a6a8     98 D3 B0 FD | 	call	#__system__Chr_S
0a6ac     FD 14 02 F6 | 	mov	arg02, result1
0a6b0     11 13 02 F6 | 	mov	arg01, local03
0a6b4     14 B2 B0 FD | 	call	#__system___string_concat
0a6b8     FD 22 02 F6 | 	mov	local03, result1
0a6bc     01 24 06 F1 | 	add	local04, #1
0a6c0     C8 FF 9F FD | 	jmp	#LR__0860
0a6c4                 | LR__0861
0a6c4                 | ' 'print "in do_convertstring: str=";s
0a6c4                 | ' return s
0a6c4     11 FB 01 F6 | 	mov	result1, local03
0a6c8     A7 F0 03 F6 | 	mov	ptra, fp
0a6cc     B2 00 A0 FD | 	call	#popregs_
0a6d0                 | _do_convertstring_ret
0a6d0     2D 00 64 FD | 	ret
0a6d4                 | 
0a6d4                 | ' 
0a6d4                 | ' sub do_assign
0a6d4                 | _do_assign
0a6d4     05 4A 05 F6 | 	mov	COUNT_, #5
0a6d8     A8 00 A0 FD | 	call	#pushregs_
0a6dc     44 F0 07 F1 | 	add	ptra, #68
0a6e0     41 00 00 FF 
0a6e4     44 E4 05 F1 | 	add	objptr, ##33348
0a6e8     F2 16 02 FB | 	rdlong	arg03, objptr
0a6ec     0B 15 02 F6 | 	mov	arg02, arg03
0a6f0     01 14 66 F0 | 	shl	arg02, #1
0a6f4     0B 15 02 F1 | 	add	arg02, arg03
0a6f8     02 14 66 F0 | 	shl	arg02, #2
0a6fc     03 00 00 FF 
0a700     04 E4 85 F1 | 	sub	objptr, ##1540
0a704     F2 14 02 F1 | 	add	arg02, objptr
0a708     0A 15 02 FB | 	rdlong	arg02, arg02
0a70c     18 4E 05 F1 | 	add	fp, #24
0a710     A7 14 62 FC | 	wrlong	arg02, fp
0a714                 | ' 
0a714                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
0a714                 | ' 
0a714                 | ' if variables(varnum).vartype<array_no_type then 
0a714     18 4E 85 F1 | 	sub	fp, #24
0a718     04 14 66 F0 | 	shl	arg02, #4
0a71c     32 00 00 FF 
0a720     74 E4 85 F1 | 	sub	objptr, ##25716
0a724     F2 14 02 F1 | 	add	arg02, objptr
0a728     0C 14 06 F1 | 	add	arg02, #12
0a72c     0A 17 02 FB | 	rdlong	arg03, arg02
0a730     00 17 16 F2 | 	cmp	arg03, #256 wc
0a734     0B 00 00 FF 
0a738     CC E5 85 F1 | 	sub	objptr, ##6092
0a73c     18 01 90 3D |  if_ae	jmp	#LR__0870
0a740     30 E2 BF FD | 	call	#_pop
0a744     A7 FA 61 FC | 	wrlong	result1, fp
0a748     04 4E 05 F1 | 	add	fp, #4
0a74c     A7 FC 61 FC | 	wrlong	result2, fp
0a750     04 4E 05 F1 | 	add	fp, #4
0a754     A7 FE 61 FC | 	wrlong	result3, fp
0a758     08 4E 85 F1 | 	sub	fp, #8
0a75c     A7 16 02 FB | 	rdlong	arg03, fp
0a760     04 4E 05 F1 | 	add	fp, #4
0a764     A7 14 02 FB | 	rdlong	arg02, fp
0a768     14 4E 05 F1 | 	add	fp, #20
0a76c     A7 12 02 FB | 	rdlong	arg01, fp
0a770     04 12 66 F0 | 	shl	arg01, #4
0a774     0B 00 00 FF 
0a778     CC E5 05 F1 | 	add	objptr, ##6092
0a77c     F2 12 02 F1 | 	add	arg01, objptr
0a780     04 12 06 F1 | 	add	arg01, #4
0a784     09 17 62 FC | 	wrlong	arg03, arg01
0a788     A7 16 02 FB | 	rdlong	arg03, fp
0a78c     04 16 66 F0 | 	shl	arg03, #4
0a790     F2 16 02 F1 | 	add	arg03, objptr
0a794     08 16 06 F1 | 	add	arg03, #8
0a798     0B 15 62 FC | 	wrlong	arg02, arg03
0a79c     A7 16 02 FB | 	rdlong	arg03, fp
0a7a0     04 16 66 F0 | 	shl	arg03, #4
0a7a4     F2 16 02 F1 | 	add	arg03, objptr
0a7a8     10 4E 85 F1 | 	sub	fp, #16
0a7ac     A7 14 02 FB | 	rdlong	arg02, fp
0a7b0     0C 16 06 F1 | 	add	arg03, #12
0a7b4     0B 15 62 FC | 	wrlong	arg02, arg03
0a7b8                 | '   t1=pop() : variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
0a7b8                 | '   if variables(varnum).vartype<>result_string2 then return
0a7b8     10 4E 05 F1 | 	add	fp, #16
0a7bc     A7 16 02 FB | 	rdlong	arg03, fp
0a7c0     18 4E 85 F1 | 	sub	fp, #24
0a7c4     04 16 66 F0 | 	shl	arg03, #4
0a7c8     F2 16 02 F1 | 	add	arg03, objptr
0a7cc     0C 16 06 F1 | 	add	arg03, #12
0a7d0     0B 17 02 FB | 	rdlong	arg03, arg03
0a7d4     2B 16 0E F2 | 	cmp	arg03, #43 wz
0a7d8     0B 00 00 FF 
0a7dc     CC E5 85 F1 | 	sub	objptr, ##6092
0a7e0     9C 05 90 5D |  if_ne	jmp	#LR__0891
0a7e4     18 4E 05 F1 | 	add	fp, #24
0a7e8     A7 16 02 FB | 	rdlong	arg03, fp
0a7ec     0B 1F 02 F6 | 	mov	local01, arg03
0a7f0     04 1E 66 F0 | 	shl	local01, #4
0a7f4     0B 00 00 FF 
0a7f8     CC E5 05 F1 | 	add	objptr, ##6092
0a7fc     F2 1E 02 F1 | 	add	local01, objptr
0a800     18 4E 85 F1 | 	sub	fp, #24
0a804     04 16 66 F0 | 	shl	arg03, #4
0a808     F2 16 02 F1 | 	add	arg03, objptr
0a80c     04 16 06 F1 | 	add	arg03, #4
0a810     0B 13 02 FB | 	rdlong	arg01, arg03
0a814     0B 00 00 FF 
0a818     CC E5 85 F1 | 	sub	objptr, ##6092
0a81c     48 FE BF FD | 	call	#_do_convertstring
0a820     04 1E 06 F1 | 	add	local01, #4
0a824     0F FB 61 FC | 	wrlong	result1, local01
0a828     18 4E 05 F1 | 	add	fp, #24
0a82c     A7 1E 02 FB | 	rdlong	local01, fp
0a830     18 4E 85 F1 | 	sub	fp, #24
0a834     04 1E 66 F0 | 	shl	local01, #4
0a838     0B 00 00 FF 
0a83c     CC E5 05 F1 | 	add	objptr, ##6092
0a840     F2 1E 02 F1 | 	add	local01, objptr
0a844     0C 1E 06 F1 | 	add	local01, #12
0a848     0F 3F 68 FC | 	wrlong	#31, local01
0a84c                 | '   variables(varnum).value.sresult=do_convertstring(variables(varnum).value.uresult)
0a84c                 | '   variables(varnum).vartype=result_string
0a84c                 | '   return
0a84c     0B 00 00 FF 
0a850     CC E5 85 F1 | 	sub	objptr, ##6092
0a854     28 05 90 FD | 	jmp	#LR__0891
0a858                 | LR__0870
0a858                 | ' for i=0 to 2 : arrid(i)=0 : next i
0a858     1C 4E 05 F1 | 	add	fp, #28
0a85c     A7 00 68 FC | 	wrlong	#0, fp
0a860     97 16 48 FB | 	callpa	#(@LR__0872-@LR__0871)>>2,fcache_load_ptr_
0a864                 | LR__0871
0a864     A7 1E 02 FB | 	rdlong	local01, fp
0a868     02 1E 66 F0 | 	shl	local01, #2
0a86c     18 4E 05 F1 | 	add	fp, #24
0a870     A7 1E 02 F1 | 	add	local01, fp
0a874     0F 01 68 FC | 	wrlong	#0, local01
0a878     18 4E 85 F1 | 	sub	fp, #24
0a87c     A7 1E 02 FB | 	rdlong	local01, fp
0a880     01 1E 06 F1 | 	add	local01, #1
0a884     A7 1E 62 FC | 	wrlong	local01, fp
0a888     03 1E 16 F2 | 	cmp	local01, #3 wc
0a88c     D4 FF 9F CD |  if_b	jmp	#LR__0871
0a890                 | LR__0872
0a890     41 00 00 FF 
0a894     44 E4 05 F1 | 	add	objptr, ##33348
0a898     F2 16 02 FB | 	rdlong	arg03, objptr
0a89c     0B 1F 02 F6 | 	mov	local01, arg03
0a8a0     01 1E 66 F0 | 	shl	local01, #1
0a8a4     0B 1F 02 F1 | 	add	local01, arg03
0a8a8     02 1E 66 F0 | 	shl	local01, #2
0a8ac     03 00 00 FF 
0a8b0     04 E4 85 F1 | 	sub	objptr, ##1540
0a8b4     F2 1E 02 F1 | 	add	local01, objptr
0a8b8     04 1E 06 F1 | 	add	local01, #4
0a8bc     0F 21 02 FB | 	rdlong	local02, local01
0a8c0     04 4E 05 F1 | 	add	fp, #4
0a8c4     A7 20 62 FC | 	wrlong	local02, fp
0a8c8     20 4E 85 F1 | 	sub	fp, #32
0a8cc     3E 00 00 FF 
0a8d0     40 E4 85 F1 | 	sub	objptr, ##31808
0a8d4     9C E0 BF FD | 	call	#_pop
0a8d8     A7 FA 61 FC | 	wrlong	result1, fp
0a8dc     04 4E 05 F1 | 	add	fp, #4
0a8e0     A7 FC 61 FC | 	wrlong	result2, fp
0a8e4     04 4E 05 F1 | 	add	fp, #4
0a8e8     A7 FE 61 FC | 	wrlong	result3, fp
0a8ec                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
0a8ec                 | ' t1=pop() ' var value
0a8ec                 | ' if numpar>0 then
0a8ec     18 4E 05 F1 | 	add	fp, #24
0a8f0     A7 22 02 FB | 	rdlong	local03, fp
0a8f4     20 4E 85 F1 | 	sub	fp, #32
0a8f8     01 22 16 F2 | 	cmp	local03, #1 wc
0a8fc     70 00 90 CD |  if_b	jmp	#LR__0875
0a900                 | '   for i=numpar to 1 step -1
0a900     20 4E 05 F1 | 	add	fp, #32
0a904     A7 24 0A FB | 	rdlong	local04, fp wz
0a908     04 4E 85 F1 | 	sub	fp, #4
0a90c     A7 24 62 FC | 	wrlong	local04, fp
0a910     1C 4E 85 F1 | 	sub	fp, #28
0a914     58 00 90 AD |  if_e	jmp	#LR__0874
0a918                 | LR__0873
0a918     58 E0 BF FD | 	call	#_pop
0a91c     0C 4E 05 F1 | 	add	fp, #12
0a920     A7 FA 61 FC | 	wrlong	result1, fp
0a924     04 4E 05 F1 | 	add	fp, #4
0a928     A7 FC 61 FC | 	wrlong	result2, fp
0a92c     04 4E 05 F1 | 	add	fp, #4
0a930     A7 FE 61 FC | 	wrlong	result3, fp
0a934     08 4E 05 F1 | 	add	fp, #8
0a938     A7 22 02 FB | 	rdlong	local03, fp
0a93c     01 22 86 F1 | 	sub	local03, #1
0a940     02 22 66 F0 | 	shl	local03, #2
0a944     18 4E 05 F1 | 	add	fp, #24
0a948     A7 22 02 F1 | 	add	local03, fp
0a94c     28 4E 85 F1 | 	sub	fp, #40
0a950     A7 24 02 FB | 	rdlong	local04, fp
0a954     11 25 62 FC | 	wrlong	local04, local03
0a958     10 4E 05 F1 | 	add	fp, #16
0a95c     A7 24 02 FB | 	rdlong	local04, fp
0a960     01 24 8E F1 | 	sub	local04, #1 wz
0a964     A7 24 62 FC | 	wrlong	local04, fp
0a968     1C 4E 85 F1 | 	sub	fp, #28
0a96c     A8 FF 9F 5D |  if_ne	jmp	#LR__0873
0a970                 | LR__0874
0a970                 | LR__0875
0a970     18 4E 05 F1 | 	add	fp, #24
0a974     A7 1E 02 FB | 	rdlong	local01, fp
0a978     04 1E 66 F0 | 	shl	local01, #4
0a97c     0B 00 00 FF 
0a980     CC E5 05 F1 | 	add	objptr, ##6092
0a984     F2 1E 02 F1 | 	add	local01, objptr
0a988     04 1E 06 F1 | 	add	local01, #4
0a98c     0F 13 02 FB | 	rdlong	arg01, local01
0a990     0C 4E 05 F1 | 	add	fp, #12
0a994     A7 12 62 FC | 	wrlong	arg01, fp
0a998     24 4E 85 F1 | 	sub	fp, #36
0a99c     0B 00 00 FF 
0a9a0     CC E5 85 F1 | 	sub	objptr, ##6092
0a9a4     88 7B B0 FD | 	call	#_pslpeek
0a9a8     FD 24 32 F9 | 	getword	local04, result1, #0
0a9ac     28 4E 05 F1 | 	add	fp, #40
0a9b0     A7 24 62 FC | 	wrlong	local04, fp
0a9b4     04 4E 85 F1 | 	sub	fp, #4
0a9b8     A7 12 02 FB | 	rdlong	arg01, fp
0a9bc     24 4E 85 F1 | 	sub	fp, #36
0a9c0     02 12 06 F1 | 	add	arg01, #2
0a9c4     10 7B B0 FD | 	call	#_pspeek
0a9c8     FD FA E1 F8 | 	getbyte	result1, result1, #0
0a9cc     2C 4E 05 F1 | 	add	fp, #44
0a9d0     A7 FA 61 FC | 	wrlong	result1, fp
0a9d4     08 4E 85 F1 | 	sub	fp, #8
0a9d8     A7 12 02 FB | 	rdlong	arg01, fp
0a9dc     09 25 02 F6 | 	mov	local04, arg01
0a9e0     10 24 06 F1 | 	add	local04, #16
0a9e4     24 4E 85 F1 | 	sub	fp, #36
0a9e8     04 12 06 F1 | 	add	arg01, #4
0a9ec     40 7B B0 FD | 	call	#_pslpeek
0a9f0     FD 1E 02 F6 | 	mov	local01, result1
0a9f4     38 4E 05 F1 | 	add	fp, #56
0a9f8     A7 20 02 FB | 	rdlong	local02, fp
0a9fc     10 1F 02 FD | 	qmul	local01, local02
0aa00     04 4E 85 F1 | 	sub	fp, #4
0aa04     A7 22 02 FB | 	rdlong	local03, fp
0aa08     10 4E 85 F1 | 	sub	fp, #16
0aa0c     A7 12 02 FB | 	rdlong	arg01, fp
0aa10     24 4E 85 F1 | 	sub	fp, #36
0aa14     08 12 06 F1 | 	add	arg01, #8
0aa18     18 20 62 FD | 	getqx	local02
0aa1c     10 23 02 F1 | 	add	local03, local02
0aa20     0C 7B B0 FD | 	call	#_pslpeek
0aa24     FD 20 02 F6 | 	mov	local02, result1
0aa28     24 4E 05 F1 | 	add	fp, #36
0aa2c     A7 12 02 FB | 	rdlong	arg01, fp
0aa30     24 4E 85 F1 | 	sub	fp, #36
0aa34     04 12 06 F1 | 	add	arg01, #4
0aa38     F4 7A B0 FD | 	call	#_pslpeek
0aa3c     FD 20 02 FD | 	qmul	local02, result1
0aa40     3C 4E 05 F1 | 	add	fp, #60
0aa44     A7 20 02 FB | 	rdlong	local02, fp
0aa48     18 1E 62 FD | 	getqx	local01
0aa4c     10 1F 02 FD | 	qmul	local01, local02
0aa50     10 4E 85 F1 | 	sub	fp, #16
0aa54     A7 20 02 FB | 	rdlong	local02, fp
0aa58     18 1E 62 FD | 	getqx	local01
0aa5c     0F 23 02 F1 | 	add	local03, local01
0aa60     11 21 02 FD | 	qmul	local02, local03
0aa64     04 4E 05 F1 | 	add	fp, #4
0aa68                 | ' esize=pspeek(arrptr+2)
0aa68                 | ' 'print " in do_assign, pslpeek(arrptr+4)="; pslpeek(arrptr+4)
0aa68                 | ' 'print " in do_assign, pslpeek(arrptr+8)="; pslpeek(arrptr+8)
0aa68                 | ' 'print " in do_assign, pslpeek(arrptr+12)="; pslpeek(arrptr+12)
0aa68                 | ' 
0aa68                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
0aa68                 | ' select case arrtype
0aa68     18 22 62 FD | 	getqx	local03
0aa6c     11 25 02 F1 | 	add	local04, local03
0aa70     A7 24 62 FC | 	wrlong	local04, fp
0aa74     08 4E 85 F1 | 	sub	fp, #8
0aa78     A7 26 02 FB | 	rdlong	local05, fp
0aa7c     28 4E 85 F1 | 	sub	fp, #40
0aa80     00 27 86 F1 | 	sub	local05, #256
0aa84     0C 26 26 F3 | 	fle	local05, #12
0aa88     30 26 62 FD | 	jmprel	local05
0aa8c                 | LR__0876
0aa8c     30 00 90 FD | 	jmp	#LR__0877
0aa90     58 00 90 FD | 	jmp	#LR__0878
0aa94     88 00 90 FD | 	jmp	#LR__0879
0aa98     B8 00 90 FD | 	jmp	#LR__0880
0aa9c     10 01 90 FD | 	jmp	#LR__0881
0aaa0     68 01 90 FD | 	jmp	#LR__0882
0aaa4     98 01 90 FD | 	jmp	#LR__0883
0aaa8     C8 01 90 FD | 	jmp	#LR__0884
0aaac     F8 01 90 FD | 	jmp	#LR__0885
0aab0     28 02 90 FD | 	jmp	#LR__0886
0aab4     58 02 90 FD | 	jmp	#LR__0887
0aab8     88 02 90 FD | 	jmp	#LR__0888
0aabc     B8 02 90 FD | 	jmp	#LR__0889
0aac0                 | LR__0877
0aac0     A7 12 02 F6 | 	mov	arg01, fp
0aac4     30 4E 05 F1 | 	add	fp, #48
0aac8     A7 14 02 FB | 	rdlong	arg02, fp
0aacc     30 4E 85 F1 | 	sub	fp, #48
0aad0     0C 16 06 F6 | 	mov	arg03, #12
0aad4     0B 00 00 FF 
0aad8     C0 E4 05 F1 | 	add	objptr, ##5824
0aadc     40 A3 B0 FD | 	call	#_psram_spin2_write
0aae0     0B 00 00 FF 
0aae4     C0 E4 85 F1 | 	sub	objptr, ##5824
0aae8     94 02 90 FD | 	jmp	#LR__0890
0aaec                 | LR__0878
0aaec     30 4E 05 F1 | 	add	fp, #48
0aaf0     A7 12 02 FB | 	rdlong	arg01, fp
0aaf4     30 4E 85 F1 | 	sub	fp, #48
0aaf8     A7 14 02 FB | 	rdlong	arg02, fp
0aafc     01 16 06 F6 | 	mov	arg03, #1
0ab00     00 18 06 F6 | 	mov	arg04, #0
0ab04     0B 00 00 FF 
0ab08     C0 E4 05 F1 | 	add	objptr, ##5824
0ab0c                 | '     return fill(addr, pattern, count, listPtr, 1)
0ab0c     01 1A 06 F6 | 	mov	arg05, #1
0ab10     A8 A3 B0 FD | 	call	#_psram_spin2_fill
0ab14     0B 00 00 FF 
0ab18     C0 E4 85 F1 | 	sub	objptr, ##5824
0ab1c     60 02 90 FD | 	jmp	#LR__0890
0ab20                 | LR__0879
0ab20     30 4E 05 F1 | 	add	fp, #48
0ab24     A7 12 02 FB | 	rdlong	arg01, fp
0ab28     30 4E 85 F1 | 	sub	fp, #48
0ab2c     A7 14 02 FB | 	rdlong	arg02, fp
0ab30     01 16 06 F6 | 	mov	arg03, #1
0ab34     00 18 06 F6 | 	mov	arg04, #0
0ab38     0B 00 00 FF 
0ab3c     C0 E4 05 F1 | 	add	objptr, ##5824
0ab40                 | '     return fill(addr, pattern, count, listPtr, 1)
0ab40     01 1A 06 F6 | 	mov	arg05, #1
0ab44     74 A3 B0 FD | 	call	#_psram_spin2_fill
0ab48     0B 00 00 FF 
0ab4c     C0 E4 85 F1 | 	sub	objptr, ##5824
0ab50     2C 02 90 FD | 	jmp	#LR__0890
0ab54                 | LR__0880
0ab54     30 4E 05 F1 | 	add	fp, #48
0ab58     A7 12 02 FB | 	rdlong	arg01, fp
0ab5c     30 4E 85 F1 | 	sub	fp, #48
0ab60     A7 14 02 FB | 	rdlong	arg02, fp
0ab64     01 16 06 F6 | 	mov	arg03, #1
0ab68     00 18 06 F6 | 	mov	arg04, #0
0ab6c     0B 00 00 FF 
0ab70     C0 E4 05 F1 | 	add	objptr, ##5824
0ab74                 | '     return fill(addr, pattern, count, listPtr, 1)
0ab74     01 1A 06 F6 | 	mov	arg05, #1
0ab78     40 A3 B0 FD | 	call	#_psram_spin2_fill
0ab7c     30 4E 05 F1 | 	add	fp, #48
0ab80     A7 12 02 FB | 	rdlong	arg01, fp
0ab84     30 4E 85 F1 | 	sub	fp, #48
0ab88     01 12 06 F1 | 	add	arg01, #1
0ab8c     A7 14 02 FB | 	rdlong	arg02, fp
0ab90     08 14 46 F0 | 	shr	arg02, #8
0ab94     01 16 06 F6 | 	mov	arg03, #1
0ab98     00 18 06 F6 | 	mov	arg04, #0
0ab9c                 | '     return fill(addr, pattern, count, listPtr, 1)
0ab9c     01 1A 06 F6 | 	mov	arg05, #1
0aba0     18 A3 B0 FD | 	call	#_psram_spin2_fill
0aba4     0B 00 00 FF 
0aba8     C0 E4 85 F1 | 	sub	objptr, ##5824
0abac     D0 01 90 FD | 	jmp	#LR__0890
0abb0                 | LR__0881
0abb0     30 4E 05 F1 | 	add	fp, #48
0abb4     A7 12 02 FB | 	rdlong	arg01, fp
0abb8     30 4E 85 F1 | 	sub	fp, #48
0abbc     A7 14 02 FB | 	rdlong	arg02, fp
0abc0     01 16 06 F6 | 	mov	arg03, #1
0abc4     00 18 06 F6 | 	mov	arg04, #0
0abc8     0B 00 00 FF 
0abcc     C0 E4 05 F1 | 	add	objptr, ##5824
0abd0                 | '     return fill(addr, pattern, count, listPtr, 1)
0abd0     01 1A 06 F6 | 	mov	arg05, #1
0abd4     E4 A2 B0 FD | 	call	#_psram_spin2_fill
0abd8     30 4E 05 F1 | 	add	fp, #48
0abdc     A7 12 02 FB | 	rdlong	arg01, fp
0abe0     30 4E 85 F1 | 	sub	fp, #48
0abe4     01 12 06 F1 | 	add	arg01, #1
0abe8     A7 14 02 FB | 	rdlong	arg02, fp
0abec     08 14 46 F0 | 	shr	arg02, #8
0abf0     01 16 06 F6 | 	mov	arg03, #1
0abf4     00 18 06 F6 | 	mov	arg04, #0
0abf8                 | '     return fill(addr, pattern, count, listPtr, 1)
0abf8     01 1A 06 F6 | 	mov	arg05, #1
0abfc     BC A2 B0 FD | 	call	#_psram_spin2_fill
0ac00     0B 00 00 FF 
0ac04     C0 E4 85 F1 | 	sub	objptr, ##5824
0ac08     74 01 90 FD | 	jmp	#LR__0890
0ac0c                 | LR__0882
0ac0c     30 4E 05 F1 | 	add	fp, #48
0ac10     A7 12 02 FB | 	rdlong	arg01, fp
0ac14     30 4E 85 F1 | 	sub	fp, #48
0ac18     A7 14 02 FB | 	rdlong	arg02, fp
0ac1c     01 16 06 F6 | 	mov	arg03, #1
0ac20     00 18 06 F6 | 	mov	arg04, #0
0ac24     0B 00 00 FF 
0ac28     C0 E4 05 F1 | 	add	objptr, ##5824
0ac2c                 | '     return fill(addr, pattern, count, listPtr, 4)
0ac2c     04 1A 06 F6 | 	mov	arg05, #4
0ac30     88 A2 B0 FD | 	call	#_psram_spin2_fill
0ac34     0B 00 00 FF 
0ac38     C0 E4 85 F1 | 	sub	objptr, ##5824
0ac3c     40 01 90 FD | 	jmp	#LR__0890
0ac40                 | LR__0883
0ac40     30 4E 05 F1 | 	add	fp, #48
0ac44     A7 12 02 FB | 	rdlong	arg01, fp
0ac48     30 4E 85 F1 | 	sub	fp, #48
0ac4c     A7 14 02 FB | 	rdlong	arg02, fp
0ac50     01 16 06 F6 | 	mov	arg03, #1
0ac54     00 18 06 F6 | 	mov	arg04, #0
0ac58     0B 00 00 FF 
0ac5c     C0 E4 05 F1 | 	add	objptr, ##5824
0ac60                 | '     return fill(addr, pattern, count, listPtr, 4)
0ac60     04 1A 06 F6 | 	mov	arg05, #4
0ac64     54 A2 B0 FD | 	call	#_psram_spin2_fill
0ac68     0B 00 00 FF 
0ac6c     C0 E4 85 F1 | 	sub	objptr, ##5824
0ac70     0C 01 90 FD | 	jmp	#LR__0890
0ac74                 | LR__0884
0ac74     30 4E 05 F1 | 	add	fp, #48
0ac78     A7 12 02 FB | 	rdlong	arg01, fp
0ac7c     30 4E 85 F1 | 	sub	fp, #48
0ac80     A7 14 02 FB | 	rdlong	arg02, fp
0ac84     01 16 06 F6 | 	mov	arg03, #1
0ac88     00 18 06 F6 | 	mov	arg04, #0
0ac8c     0B 00 00 FF 
0ac90     C0 E4 05 F1 | 	add	objptr, ##5824
0ac94                 | '     return fill(addr, pattern, count, listPtr, 4)
0ac94     04 1A 06 F6 | 	mov	arg05, #4
0ac98     20 A2 B0 FD | 	call	#_psram_spin2_fill
0ac9c     0B 00 00 FF 
0aca0     C0 E4 85 F1 | 	sub	objptr, ##5824
0aca4     D8 00 90 FD | 	jmp	#LR__0890
0aca8                 | LR__0885
0aca8     30 4E 05 F1 | 	add	fp, #48
0acac     A7 12 02 FB | 	rdlong	arg01, fp
0acb0     30 4E 85 F1 | 	sub	fp, #48
0acb4     A7 14 02 FB | 	rdlong	arg02, fp
0acb8     01 16 06 F6 | 	mov	arg03, #1
0acbc     00 18 06 F6 | 	mov	arg04, #0
0acc0     0B 00 00 FF 
0acc4     C0 E4 05 F1 | 	add	objptr, ##5824
0acc8                 | '     return fill(addr, pattern, count, listPtr, 4)
0acc8     04 1A 06 F6 | 	mov	arg05, #4
0accc     EC A1 B0 FD | 	call	#_psram_spin2_fill
0acd0     0B 00 00 FF 
0acd4     C0 E4 85 F1 | 	sub	objptr, ##5824
0acd8     A4 00 90 FD | 	jmp	#LR__0890
0acdc                 | LR__0886
0acdc     30 4E 05 F1 | 	add	fp, #48
0ace0     A7 12 02 FB | 	rdlong	arg01, fp
0ace4     30 4E 85 F1 | 	sub	fp, #48
0ace8     A7 14 02 FB | 	rdlong	arg02, fp
0acec     01 16 06 F6 | 	mov	arg03, #1
0acf0     00 18 06 F6 | 	mov	arg04, #0
0acf4     0B 00 00 FF 
0acf8     C0 E4 05 F1 | 	add	objptr, ##5824
0acfc                 | '     return fill(addr, pattern, count, listPtr, 4)
0acfc     04 1A 06 F6 | 	mov	arg05, #4
0ad00     B8 A1 B0 FD | 	call	#_psram_spin2_fill
0ad04     0B 00 00 FF 
0ad08     C0 E4 85 F1 | 	sub	objptr, ##5824
0ad0c     70 00 90 FD | 	jmp	#LR__0890
0ad10                 | LR__0887
0ad10     30 4E 05 F1 | 	add	fp, #48
0ad14     A7 12 02 FB | 	rdlong	arg01, fp
0ad18     30 4E 85 F1 | 	sub	fp, #48
0ad1c     A7 14 02 FB | 	rdlong	arg02, fp
0ad20     01 16 06 F6 | 	mov	arg03, #1
0ad24     00 18 06 F6 | 	mov	arg04, #0
0ad28     0B 00 00 FF 
0ad2c     C0 E4 05 F1 | 	add	objptr, ##5824
0ad30                 | '     return fill(addr, pattern, count, listPtr, 4)
0ad30     04 1A 06 F6 | 	mov	arg05, #4
0ad34     84 A1 B0 FD | 	call	#_psram_spin2_fill
0ad38     0B 00 00 FF 
0ad3c     C0 E4 85 F1 | 	sub	objptr, ##5824
0ad40     3C 00 90 FD | 	jmp	#LR__0890
0ad44                 | LR__0888
0ad44     30 4E 05 F1 | 	add	fp, #48
0ad48     A7 12 02 FB | 	rdlong	arg01, fp
0ad4c     30 4E 85 F1 | 	sub	fp, #48
0ad50     A7 14 02 FB | 	rdlong	arg02, fp
0ad54     01 16 06 F6 | 	mov	arg03, #1
0ad58     00 18 06 F6 | 	mov	arg04, #0
0ad5c     0B 00 00 FF 
0ad60     C0 E4 05 F1 | 	add	objptr, ##5824
0ad64                 | '     return fill(addr, pattern, count, listPtr, 4)
0ad64     04 1A 06 F6 | 	mov	arg05, #4
0ad68     50 A1 B0 FD | 	call	#_psram_spin2_fill
0ad6c     0B 00 00 FF 
0ad70     C0 E4 85 F1 | 	sub	objptr, ##5824
0ad74     08 00 90 FD | 	jmp	#LR__0890
0ad78                 | LR__0889
0ad78     2F 12 06 F6 | 	mov	arg01, #47
0ad7c     F4 75 B0 FD | 	call	#_printerror
0ad80                 | LR__0890
0ad80                 | LR__0891
0ad80     A7 F0 03 F6 | 	mov	ptra, fp
0ad84     B2 00 A0 FD | 	call	#popregs_
0ad88                 | _do_assign_ret
0ad88     2D 00 64 FD | 	ret
0ad8c                 | 
0ad8c                 | ' 
0ad8c                 | ' 
0ad8c                 | ' ' --------------------- Read a variable and push to the stack
0ad8c                 | ' 
0ad8c                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
0ad8c                 | ' 
0ad8c                 | ' sub do_getvar
0ad8c                 | _do_getvar
0ad8c     04 4A 05 F6 | 	mov	COUNT_, #4
0ad90     A8 00 A0 FD | 	call	#pushregs_
0ad94     3C F0 07 F1 | 	add	ptra, #60
0ad98                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0ad98                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0ad98     41 00 00 FF 
0ad9c     44 E4 05 F1 | 	add	objptr, ##33348
0ada0     F2 1E 02 FB | 	rdlong	local01, objptr
0ada4     0F 17 02 F6 | 	mov	arg03, local01
0ada8     01 16 66 F0 | 	shl	arg03, #1
0adac     0F 17 02 F1 | 	add	arg03, local01
0adb0     02 16 66 F0 | 	shl	arg03, #2
0adb4     03 00 00 FF 
0adb8     04 E4 85 F1 | 	sub	objptr, ##1540
0adbc     F2 16 02 F1 | 	add	arg03, objptr
0adc0     04 16 06 F1 | 	add	arg03, #4
0adc4     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0adc8     3E 00 00 FF 
0adcc     40 E4 85 F1 | 	sub	objptr, ##31808
0add0     C4 00 90 5D |  if_ne	jmp	#LR__0901
0add4     41 00 00 FF 
0add8     44 E4 05 F1 | 	add	objptr, ##33348
0addc     F2 1E 02 FB | 	rdlong	local01, objptr
0ade0     0F 13 02 F6 | 	mov	arg01, local01
0ade4     01 12 66 F0 | 	shl	arg01, #1
0ade8     0F 13 02 F1 | 	add	arg01, local01
0adec     02 12 66 F0 | 	shl	arg01, #2
0adf0     03 00 00 FF 
0adf4     04 E4 85 F1 | 	sub	objptr, ##1540
0adf8     F2 12 02 F1 | 	add	arg01, objptr
0adfc     09 1F 02 FB | 	rdlong	local01, arg01
0ae00     04 1E 66 F0 | 	shl	local01, #4
0ae04     32 00 00 FF 
0ae08     74 E4 85 F1 | 	sub	objptr, ##25716
0ae0c     F2 1E 02 F1 | 	add	local01, objptr
0ae10     04 1E 06 F1 | 	add	local01, #4
0ae14     0F 13 02 FB | 	rdlong	arg01, local01
0ae18     04 1E 06 F1 | 	add	local01, #4
0ae1c     0F 1F 02 FB | 	rdlong	local01, local01
0ae20     A7 12 62 FC | 	wrlong	arg01, fp
0ae24     04 4E 05 F1 | 	add	fp, #4
0ae28     A7 1E 62 FC | 	wrlong	local01, fp
0ae2c     35 00 00 FF 
0ae30     78 E4 05 F1 | 	add	objptr, ##27256
0ae34     F2 1E 02 FB | 	rdlong	local01, objptr
0ae38     0F 13 02 F6 | 	mov	arg01, local01
0ae3c     01 12 66 F0 | 	shl	arg01, #1
0ae40     0F 13 02 F1 | 	add	arg01, local01
0ae44     02 12 66 F0 | 	shl	arg01, #2
0ae48     03 00 00 FF 
0ae4c     04 E4 85 F1 | 	sub	objptr, ##1540
0ae50     F2 12 02 F1 | 	add	arg01, objptr
0ae54     09 1F 02 FB | 	rdlong	local01, arg01
0ae58     04 1E 66 F0 | 	shl	local01, #4
0ae5c     32 00 00 FF 
0ae60     74 E4 85 F1 | 	sub	objptr, ##25716
0ae64     F2 1E 02 F1 | 	add	local01, objptr
0ae68     0C 1E 06 F1 | 	add	local01, #12
0ae6c     0F 1F 02 FB | 	rdlong	local01, local01
0ae70     04 4E 05 F1 | 	add	fp, #4
0ae74     A7 1E 62 FC | 	wrlong	local01, fp
0ae78                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
0ae78                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0ae78                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
0ae78     08 4E 85 F1 | 	sub	fp, #8
0ae7c     00 1F 16 F2 | 	cmp	local01, #256 wc
0ae80     0B 00 00 FF 
0ae84     CC E5 85 F1 | 	sub	objptr, ##6092
0ae88     0C 00 90 3D |  if_ae	jmp	#LR__0900
0ae8c     A7 12 02 F6 | 	mov	arg01, fp
0ae90     78 DB BF FD | 	call	#_push
0ae94     74 04 90 FD | 	jmp	#LR__0922
0ae98                 | LR__0900
0ae98                 | LR__0901
0ae98     41 00 00 FF 
0ae9c     44 E4 05 F1 | 	add	objptr, ##33348
0aea0     F2 16 02 FB | 	rdlong	arg03, objptr
0aea4     0B 15 02 F6 | 	mov	arg02, arg03
0aea8     01 14 66 F0 | 	shl	arg02, #1
0aeac     0B 15 02 F1 | 	add	arg02, arg03
0aeb0     02 14 66 F0 | 	shl	arg02, #2
0aeb4     03 00 00 FF 
0aeb8     04 E4 85 F1 | 	sub	objptr, ##1540
0aebc     F2 14 02 F1 | 	add	arg02, objptr
0aec0     0A 17 02 FB | 	rdlong	arg03, arg02
0aec4     04 16 66 F0 | 	shl	arg03, #4
0aec8     32 00 00 FF 
0aecc     74 E4 85 F1 | 	sub	objptr, ##25716
0aed0     F2 16 02 F1 | 	add	arg03, objptr
0aed4     04 16 06 F1 | 	add	arg03, #4
0aed8     0B 13 02 FB | 	rdlong	arg01, arg03
0aedc     0C 4E 05 F1 | 	add	fp, #12
0aee0     A7 12 62 FC | 	wrlong	arg01, fp
0aee4     0C 4E 85 F1 | 	sub	fp, #12
0aee8     0B 00 00 FF 
0aeec     CC E5 85 F1 | 	sub	objptr, ##6092
0aef0     3C 76 B0 FD | 	call	#_pslpeek
0aef4     FD FA 31 F9 | 	getword	result1, result1, #0
0aef8     10 4E 05 F1 | 	add	fp, #16
0aefc     A7 FA 61 FC | 	wrlong	result1, fp
0af00     41 00 00 FF 
0af04     44 E4 05 F1 | 	add	objptr, ##33348
0af08     F2 16 02 FB | 	rdlong	arg03, objptr
0af0c     0B 15 02 F6 | 	mov	arg02, arg03
0af10     01 14 66 F0 | 	shl	arg02, #1
0af14     0B 15 02 F1 | 	add	arg02, arg03
0af18     02 14 66 F0 | 	shl	arg02, #2
0af1c     03 00 00 FF 
0af20     04 E4 85 F1 | 	sub	objptr, ##1540
0af24     F2 14 02 F1 | 	add	arg02, objptr
0af28     04 14 06 F1 | 	add	arg02, #4
0af2c     0A 17 02 FB | 	rdlong	arg03, arg02
0af30     04 4E 05 F1 | 	add	fp, #4
0af34     A7 16 62 FC | 	wrlong	arg03, fp
0af38     08 4E 85 F1 | 	sub	fp, #8
0af3c     A7 12 02 FB | 	rdlong	arg01, fp
0af40     0C 4E 85 F1 | 	sub	fp, #12
0af44     02 12 06 F1 | 	add	arg01, #2
0af48     3E 00 00 FF 
0af4c     40 E4 85 F1 | 	sub	objptr, ##31808
0af50     84 75 B0 FD | 	call	#_pspeek
0af54     FD FA E1 F8 | 	getbyte	result1, result1, #0
0af58     18 4E 05 F1 | 	add	fp, #24
0af5c     A7 FA 61 FC | 	wrlong	result1, fp
0af60     0C 4E 85 F1 | 	sub	fp, #12
0af64     A7 12 02 FB | 	rdlong	arg01, fp
0af68     0C 4E 85 F1 | 	sub	fp, #12
0af6c     04 12 06 F1 | 	add	arg01, #4
0af70     BC 75 B0 FD | 	call	#_pslpeek
0af74     1C 4E 05 F1 | 	add	fp, #28
0af78     A7 FA 61 FC | 	wrlong	result1, fp
0af7c     10 4E 85 F1 | 	sub	fp, #16
0af80     A7 12 02 FB | 	rdlong	arg01, fp
0af84     0C 4E 85 F1 | 	sub	fp, #12
0af88     08 12 06 F1 | 	add	arg01, #8
0af8c     A0 75 B0 FD | 	call	#_pslpeek
0af90     20 4E 05 F1 | 	add	fp, #32
0af94     A7 FA 61 FC | 	wrlong	result1, fp
0af98     14 4E 85 F1 | 	sub	fp, #20
0af9c     A7 12 02 FB | 	rdlong	arg01, fp
0afa0     0C 4E 85 F1 | 	sub	fp, #12
0afa4     0C 12 06 F1 | 	add	arg01, #12
0afa8     84 75 B0 FD | 	call	#_pslpeek
0afac     24 4E 05 F1 | 	add	fp, #36
0afb0     A7 FA 61 FC | 	wrlong	result1, fp
0afb4                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0afb4                 | ' esize=pspeek(arrptr+2)
0afb4                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0afb4                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0afb4                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0afb4                 | ' if numpar>2 then t1=pop() : i3=t1.result.uresult   else i3=0 
0afb4     10 4E 85 F1 | 	sub	fp, #16
0afb8     A7 16 02 FB | 	rdlong	arg03, fp
0afbc     14 4E 85 F1 | 	sub	fp, #20
0afc0     03 16 16 F2 | 	cmp	arg03, #3 wc
0afc4     30 00 90 CD |  if_b	jmp	#LR__0902
0afc8     A8 D9 BF FD | 	call	#_pop
0afcc     A7 FA 61 FC | 	wrlong	result1, fp
0afd0     04 4E 05 F1 | 	add	fp, #4
0afd4     A7 FC 61 FC | 	wrlong	result2, fp
0afd8     04 4E 05 F1 | 	add	fp, #4
0afdc     A7 FE 61 FC | 	wrlong	result3, fp
0afe0     08 4E 85 F1 | 	sub	fp, #8
0afe4     A7 16 02 FB | 	rdlong	arg03, fp
0afe8     30 4E 05 F1 | 	add	fp, #48
0afec     A7 16 62 FC | 	wrlong	arg03, fp
0aff0     30 4E 85 F1 | 	sub	fp, #48
0aff4     0C 00 90 FD | 	jmp	#LR__0903
0aff8                 | LR__0902
0aff8     30 4E 05 F1 | 	add	fp, #48
0affc     A7 00 68 FC | 	wrlong	#0, fp
0b000     30 4E 85 F1 | 	sub	fp, #48
0b004                 | LR__0903
0b004                 | ' if numpar>1 then t1=pop() : i2=t1.result.uresult   else i2=0 
0b004     14 4E 05 F1 | 	add	fp, #20
0b008     A7 16 02 FB | 	rdlong	arg03, fp
0b00c     14 4E 85 F1 | 	sub	fp, #20
0b010     02 16 16 F2 | 	cmp	arg03, #2 wc
0b014     30 00 90 CD |  if_b	jmp	#LR__0904
0b018     58 D9 BF FD | 	call	#_pop
0b01c     A7 FA 61 FC | 	wrlong	result1, fp
0b020     04 4E 05 F1 | 	add	fp, #4
0b024     A7 FC 61 FC | 	wrlong	result2, fp
0b028     04 4E 05 F1 | 	add	fp, #4
0b02c     A7 FE 61 FC | 	wrlong	result3, fp
0b030     08 4E 85 F1 | 	sub	fp, #8
0b034     A7 16 02 FB | 	rdlong	arg03, fp
0b038     2C 4E 05 F1 | 	add	fp, #44
0b03c     A7 16 62 FC | 	wrlong	arg03, fp
0b040     2C 4E 85 F1 | 	sub	fp, #44
0b044     0C 00 90 FD | 	jmp	#LR__0905
0b048                 | LR__0904
0b048     2C 4E 05 F1 | 	add	fp, #44
0b04c     A7 00 68 FC | 	wrlong	#0, fp
0b050     2C 4E 85 F1 | 	sub	fp, #44
0b054                 | LR__0905
0b054                 | ' if numpar>0 then t1=pop() : i1=t1.result.uresult   else i1=0 
0b054     14 4E 05 F1 | 	add	fp, #20
0b058     A7 16 02 FB | 	rdlong	arg03, fp
0b05c     14 4E 85 F1 | 	sub	fp, #20
0b060     01 16 16 F2 | 	cmp	arg03, #1 wc
0b064     30 00 90 CD |  if_b	jmp	#LR__0906
0b068     08 D9 BF FD | 	call	#_pop
0b06c     A7 FA 61 FC | 	wrlong	result1, fp
0b070     04 4E 05 F1 | 	add	fp, #4
0b074     A7 FC 61 FC | 	wrlong	result2, fp
0b078     04 4E 05 F1 | 	add	fp, #4
0b07c     A7 FE 61 FC | 	wrlong	result3, fp
0b080     08 4E 85 F1 | 	sub	fp, #8
0b084     A7 16 02 FB | 	rdlong	arg03, fp
0b088     28 4E 05 F1 | 	add	fp, #40
0b08c     A7 16 62 FC | 	wrlong	arg03, fp
0b090     28 4E 85 F1 | 	sub	fp, #40
0b094     0C 00 90 FD | 	jmp	#LR__0907
0b098                 | LR__0906
0b098     28 4E 05 F1 | 	add	fp, #40
0b09c     A7 00 68 FC | 	wrlong	#0, fp
0b0a0     28 4E 85 F1 | 	sub	fp, #40
0b0a4                 | LR__0907
0b0a4     0C 4E 05 F1 | 	add	fp, #12
0b0a8     A7 20 02 FB | 	rdlong	local02, fp
0b0ac     1C 4E 05 F1 | 	add	fp, #28
0b0b0     A7 22 02 FB | 	rdlong	local03, fp
0b0b4     04 4E 05 F1 | 	add	fp, #4
0b0b8     A7 FE 01 FB | 	rdlong	result3, fp
0b0bc     10 4E 85 F1 | 	sub	fp, #16
0b0c0     A7 FC 01 FB | 	rdlong	result2, fp
0b0c4     FE FE 01 FD | 	qmul	result3, result2
0b0c8     10 20 06 F1 | 	add	local02, #16
0b0cc     14 4E 05 F1 | 	add	fp, #20
0b0d0     A7 FE 01 FB | 	rdlong	result3, fp
0b0d4     18 FA 61 FD | 	getqx	result1
0b0d8     FE FE 01 FD | 	qmul	result3, result2
0b0dc     FD 22 02 F1 | 	add	local03, result1
0b0e0     10 4E 85 F1 | 	sub	fp, #16
0b0e4     A7 FC 01 FB | 	rdlong	result2, fp
0b0e8     18 FE 61 FD | 	getqx	result3
0b0ec     FE FE 01 FD | 	qmul	result3, result2
0b0f0     08 4E 85 F1 | 	sub	fp, #8
0b0f4     A7 FC 01 FB | 	rdlong	result2, fp
0b0f8     18 FE 61 FD | 	getqx	result3
0b0fc     FF 22 02 F1 | 	add	local03, result3
0b100     FE 22 02 FD | 	qmul	local03, result2
0b104     1C 4E 05 F1 | 	add	fp, #28
0b108                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0b108                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
0b108                 | ' 
0b108                 | ' select case vartype
0b108     18 FE 61 FD | 	getqx	result3
0b10c     FF 20 02 F1 | 	add	local02, result3
0b110     A7 20 62 FC | 	wrlong	local02, fp
0b114     24 4E 85 F1 | 	sub	fp, #36
0b118     A7 24 02 FB | 	rdlong	local04, fp
0b11c     10 4E 85 F1 | 	sub	fp, #16
0b120     00 25 86 F1 | 	sub	local04, #256
0b124     0C 24 26 F3 | 	fle	local04, #12
0b128     30 24 62 FD | 	jmprel	local04
0b12c                 | LR__0908
0b12c     30 00 90 FD | 	jmp	#LR__0909
0b130     58 00 90 FD | 	jmp	#LR__0910
0b134     8C 00 90 FD | 	jmp	#LR__0911
0b138     AC 00 90 FD | 	jmp	#LR__0912
0b13c     E8 00 90 FD | 	jmp	#LR__0913
0b140     08 01 90 FD | 	jmp	#LR__0914
0b144     24 01 90 FD | 	jmp	#LR__0915
0b148     40 01 90 FD | 	jmp	#LR__0916
0b14c     50 01 90 FD | 	jmp	#LR__0917
0b150     60 01 90 FD | 	jmp	#LR__0918
0b154     7C 01 90 FD | 	jmp	#LR__0919
0b158     8C 01 90 FD | 	jmp	#LR__0920
0b15c     A4 01 90 FD | 	jmp	#LR__0921
0b160                 | LR__0909
0b160     A7 12 02 F6 | 	mov	arg01, fp
0b164     34 4E 05 F1 | 	add	fp, #52
0b168     A7 14 02 FB | 	rdlong	arg02, fp
0b16c     34 4E 85 F1 | 	sub	fp, #52
0b170     0C 16 06 F6 | 	mov	arg03, #12
0b174     0B 00 00 FF 
0b178     C0 E4 05 F1 | 	add	objptr, ##5824
0b17c     04 9C B0 FD | 	call	#_psram_spin2_read1
0b180     0B 00 00 FF 
0b184     C0 E4 85 F1 | 	sub	objptr, ##5824
0b188     78 01 90 FD | 	jmp	#LR__0921
0b18c                 | LR__0910
0b18c     08 4E 05 F1 | 	add	fp, #8
0b190     A7 38 68 FC | 	wrlong	#28, fp
0b194     2C 4E 05 F1 | 	add	fp, #44
0b198     A7 12 02 FB | 	rdlong	arg01, fp
0b19c     34 4E 85 F1 | 	sub	fp, #52
0b1a0     34 73 B0 FD | 	call	#_pspeek
0b1a4     FD FA E1 F8 | 	getbyte	result1, result1, #0
0b1a8     A7 FA 61 FC | 	wrlong	result1, fp
0b1ac     80 FA 15 F2 | 	cmp	result1, #128 wc
0b1b0     00 1F 66 36 |  if_ae	neg	local01, #256
0b1b4     A7 22 02 3B |  if_ae	rdlong	local03, fp
0b1b8     11 1F 42 35 |  if_ae	or	local01, local03
0b1bc     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0b1c0     40 01 90 FD | 	jmp	#LR__0921
0b1c4                 | LR__0911
0b1c4     08 4E 05 F1 | 	add	fp, #8
0b1c8     A7 3A 68 FC | 	wrlong	#29, fp
0b1cc     2C 4E 05 F1 | 	add	fp, #44
0b1d0     A7 12 02 FB | 	rdlong	arg01, fp
0b1d4     34 4E 85 F1 | 	sub	fp, #52
0b1d8     FC 72 B0 FD | 	call	#_pspeek
0b1dc     FD FA E1 F8 | 	getbyte	result1, result1, #0
0b1e0     A7 FA 61 FC | 	wrlong	result1, fp
0b1e4     1C 01 90 FD | 	jmp	#LR__0921
0b1e8                 | LR__0912
0b1e8     08 4E 05 F1 | 	add	fp, #8
0b1ec     A7 38 68 FC | 	wrlong	#28, fp
0b1f0     2C 4E 05 F1 | 	add	fp, #44
0b1f4     A7 12 02 FB | 	rdlong	arg01, fp
0b1f8     34 4E 85 F1 | 	sub	fp, #52
0b1fc     30 73 B0 FD | 	call	#_pslpeek
0b200     FD FA 31 F9 | 	getword	result1, result1, #0
0b204     A7 FA 61 FC | 	wrlong	result1, fp
0b208     40 00 00 FF 
0b20c     00 FA 15 F2 | 	cmp	result1, ##32768 wc
0b210     FF 7F 00 3F 
0b214     00 1F 06 36 |  if_ae	mov	local01, ##16776960
0b218     A7 22 02 3B |  if_ae	rdlong	local03, fp
0b21c     11 1F 42 35 |  if_ae	or	local01, local03
0b220     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0b224     DC 00 90 FD | 	jmp	#LR__0921
0b228                 | LR__0913
0b228     08 4E 05 F1 | 	add	fp, #8
0b22c     A7 3A 68 FC | 	wrlong	#29, fp
0b230     2C 4E 05 F1 | 	add	fp, #44
0b234     A7 12 02 FB | 	rdlong	arg01, fp
0b238     34 4E 85 F1 | 	sub	fp, #52
0b23c     F0 72 B0 FD | 	call	#_pslpeek
0b240     FD FA 31 F9 | 	getword	result1, result1, #0
0b244     A7 FA 61 FC | 	wrlong	result1, fp
0b248     B8 00 90 FD | 	jmp	#LR__0921
0b24c                 | LR__0914
0b24c     08 4E 05 F1 | 	add	fp, #8
0b250     A7 38 68 FC | 	wrlong	#28, fp
0b254     2C 4E 05 F1 | 	add	fp, #44
0b258     A7 12 02 FB | 	rdlong	arg01, fp
0b25c     34 4E 85 F1 | 	sub	fp, #52
0b260     CC 72 B0 FD | 	call	#_pslpeek
0b264     A7 FA 61 FC | 	wrlong	result1, fp
0b268     98 00 90 FD | 	jmp	#LR__0921
0b26c                 | LR__0915
0b26c     08 4E 05 F1 | 	add	fp, #8
0b270     A7 3A 68 FC | 	wrlong	#29, fp
0b274     2C 4E 05 F1 | 	add	fp, #44
0b278     A7 12 02 FB | 	rdlong	arg01, fp
0b27c     34 4E 85 F1 | 	sub	fp, #52
0b280     AC 72 B0 FD | 	call	#_pslpeek
0b284     A7 FA 61 FC | 	wrlong	result1, fp
0b288     78 00 90 FD | 	jmp	#LR__0921
0b28c                 | LR__0916
0b28c     08 4E 05 F1 | 	add	fp, #8
0b290     A7 FE 69 FC | 	wrlong	#255, fp
0b294     08 4E 85 F1 | 	sub	fp, #8
0b298     A7 60 68 FC | 	wrlong	#48, fp
0b29c     64 00 90 FD | 	jmp	#LR__0921
0b2a0                 | LR__0917
0b2a0     08 4E 05 F1 | 	add	fp, #8
0b2a4     A7 FE 69 FC | 	wrlong	#255, fp
0b2a8     08 4E 85 F1 | 	sub	fp, #8
0b2ac     A7 60 68 FC | 	wrlong	#48, fp
0b2b0     50 00 90 FD | 	jmp	#LR__0921
0b2b4                 | LR__0918
0b2b4     08 4E 05 F1 | 	add	fp, #8
0b2b8     A7 3C 68 FC | 	wrlong	#30, fp
0b2bc     2C 4E 05 F1 | 	add	fp, #44
0b2c0     A7 12 02 FB | 	rdlong	arg01, fp
0b2c4     34 4E 85 F1 | 	sub	fp, #52
0b2c8     64 72 B0 FD | 	call	#_pslpeek
0b2cc     A7 FA 61 FC | 	wrlong	result1, fp
0b2d0     30 00 90 FD | 	jmp	#LR__0921
0b2d4                 | LR__0919
0b2d4     08 4E 05 F1 | 	add	fp, #8
0b2d8     A7 FE 69 FC | 	wrlong	#255, fp
0b2dc     08 4E 85 F1 | 	sub	fp, #8
0b2e0     A7 60 68 FC | 	wrlong	#48, fp
0b2e4     1C 00 90 FD | 	jmp	#LR__0921
0b2e8                 | LR__0920
0b2e8     08 4E 05 F1 | 	add	fp, #8
0b2ec     A7 3E 68 FC | 	wrlong	#31, fp
0b2f0     2C 4E 05 F1 | 	add	fp, #44
0b2f4     A7 12 02 FB | 	rdlong	arg01, fp
0b2f8     34 4E 85 F1 | 	sub	fp, #52
0b2fc     30 72 B0 FD | 	call	#_pslpeek
0b300     A7 FA 61 FC | 	wrlong	result1, fp
0b304                 | LR__0921
0b304     A7 12 02 F6 | 	mov	arg01, fp
0b308     00 D7 BF FD | 	call	#_push
0b30c                 | LR__0922
0b30c     A7 F0 03 F6 | 	mov	ptra, fp
0b310     B2 00 A0 FD | 	call	#popregs_
0b314                 | _do_getvar_ret
0b314     2D 00 64 FD | 	ret
0b318                 | 
0b318                 | ' 
0b318                 | ' '------------------------ Operators 
0b318                 | ' 
0b318                 | ' sub do_plus 
0b318                 | _do_plus
0b318     05 4A 05 F6 | 	mov	COUNT_, #5
0b31c     A8 00 A0 FD | 	call	#pushregs_
0b320     18 F0 07 F1 | 	add	ptra, #24
0b324     4C D6 BF FD | 	call	#_pop
0b328     FD 1E 02 F6 | 	mov	local01, result1
0b32c     FE 20 02 F6 | 	mov	local02, result2
0b330     FF 22 02 F6 | 	mov	local03, result3
0b334     0C 4E 05 F1 | 	add	fp, #12
0b338     A7 1E 62 FC | 	wrlong	local01, fp
0b33c     04 4E 05 F1 | 	add	fp, #4
0b340     A7 20 62 FC | 	wrlong	local02, fp
0b344     04 4E 05 F1 | 	add	fp, #4
0b348     A7 22 62 FC | 	wrlong	local03, fp
0b34c     14 4E 85 F1 | 	sub	fp, #20
0b350     20 D6 BF FD | 	call	#_pop
0b354     FF 22 02 F6 | 	mov	local03, result3
0b358     A7 FA 61 FC | 	wrlong	result1, fp
0b35c     04 4E 05 F1 | 	add	fp, #4
0b360     A7 FC 61 FC | 	wrlong	result2, fp
0b364     04 4E 05 F1 | 	add	fp, #4
0b368     A7 22 62 FC | 	wrlong	local03, fp
0b36c                 | ' 
0b36c                 | ' t2=pop()
0b36c                 | ' t1=pop()
0b36c                 | ' 
0b36c                 | ' 
0b36c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
0b36c     08 4E 85 F1 | 	sub	fp, #8
0b370     1D 22 0E F2 | 	cmp	local03, #29 wz
0b374     14 4E 05 A1 |  if_e	add	fp, #20
0b378     A7 24 02 AB |  if_e	rdlong	local04, fp
0b37c     14 4E 85 A1 |  if_e	sub	fp, #20
0b380     12 23 02 A6 |  if_e	mov	local03, local04
0b384     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b388     1C 00 90 5D |  if_ne	jmp	#LR__0930
0b38c     A7 1E 02 FB | 	rdlong	local01, fp
0b390     0C 4E 05 F1 | 	add	fp, #12
0b394     A7 20 02 FB | 	rdlong	local02, fp
0b398     0C 4E 85 F1 | 	sub	fp, #12
0b39c     10 1F 02 F1 | 	add	local01, local02
0b3a0     A7 1E 62 FC | 	wrlong	local01, fp
0b3a4     3C 03 90 FD | 	jmp	#LR__0942
0b3a8                 | LR__0930
0b3a8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
0b3a8     08 4E 05 F1 | 	add	fp, #8
0b3ac     A7 1E 02 FB | 	rdlong	local01, fp
0b3b0     08 4E 85 F1 | 	sub	fp, #8
0b3b4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0b3b8     14 4E 05 A1 |  if_e	add	fp, #20
0b3bc     A7 24 02 AB |  if_e	rdlong	local04, fp
0b3c0     14 4E 85 A1 |  if_e	sub	fp, #20
0b3c4     12 23 02 A6 |  if_e	mov	local03, local04
0b3c8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b3cc     28 00 90 5D |  if_ne	jmp	#LR__0931
0b3d0     A7 1E 02 FB | 	rdlong	local01, fp
0b3d4     0C 4E 05 F1 | 	add	fp, #12
0b3d8     A7 20 02 FB | 	rdlong	local02, fp
0b3dc     0C 4E 85 F1 | 	sub	fp, #12
0b3e0     10 1F 02 F1 | 	add	local01, local02
0b3e4     A7 1E 62 FC | 	wrlong	local01, fp
0b3e8     08 4E 05 F1 | 	add	fp, #8
0b3ec     A7 38 68 FC | 	wrlong	#28, fp
0b3f0     08 4E 85 F1 | 	sub	fp, #8
0b3f4     EC 02 90 FD | 	jmp	#LR__0942
0b3f8                 | LR__0931
0b3f8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0b3f8     08 4E 05 F1 | 	add	fp, #8
0b3fc     A7 1E 02 FB | 	rdlong	local01, fp
0b400     08 4E 85 F1 | 	sub	fp, #8
0b404     1D 1E 0E F2 | 	cmp	local01, #29 wz
0b408     14 4E 05 A1 |  if_e	add	fp, #20
0b40c     A7 24 02 AB |  if_e	rdlong	local04, fp
0b410     14 4E 85 A1 |  if_e	sub	fp, #20
0b414     12 23 02 A6 |  if_e	mov	local03, local04
0b418     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b41c     30 00 90 5D |  if_ne	jmp	#LR__0932
0b420     A7 12 02 FB | 	rdlong	arg01, fp
0b424     30 CB B0 FD | 	call	#__system___float_fromuns
0b428     FD 12 02 F6 | 	mov	arg01, result1
0b42c     0C 4E 05 F1 | 	add	fp, #12
0b430     A7 14 02 FB | 	rdlong	arg02, fp
0b434     0C 4E 85 F1 | 	sub	fp, #12
0b438     50 CB B0 FD | 	call	#__system___float_add
0b43c     A7 FA 61 FC | 	wrlong	result1, fp
0b440     08 4E 05 F1 | 	add	fp, #8
0b444     A7 3C 68 FC | 	wrlong	#30, fp
0b448     08 4E 85 F1 | 	sub	fp, #8
0b44c     94 02 90 FD | 	jmp	#LR__0942
0b450                 | LR__0932
0b450                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
0b450     08 4E 05 F1 | 	add	fp, #8
0b454     A7 1E 02 FB | 	rdlong	local01, fp
0b458     08 4E 85 F1 | 	sub	fp, #8
0b45c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b460     14 4E 05 A1 |  if_e	add	fp, #20
0b464     A7 24 02 AB |  if_e	rdlong	local04, fp
0b468     14 4E 85 A1 |  if_e	sub	fp, #20
0b46c     12 23 02 A6 |  if_e	mov	local03, local04
0b470     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b474     1C 00 90 5D |  if_ne	jmp	#LR__0933
0b478     A7 1E 02 FB | 	rdlong	local01, fp
0b47c     0C 4E 05 F1 | 	add	fp, #12
0b480     A7 20 02 FB | 	rdlong	local02, fp
0b484     0C 4E 85 F1 | 	sub	fp, #12
0b488     10 1F 02 F1 | 	add	local01, local02
0b48c     A7 1E 62 FC | 	wrlong	local01, fp
0b490     50 02 90 FD | 	jmp	#LR__0942
0b494                 | LR__0933
0b494                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
0b494     08 4E 05 F1 | 	add	fp, #8
0b498     A7 1E 02 FB | 	rdlong	local01, fp
0b49c     08 4E 85 F1 | 	sub	fp, #8
0b4a0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b4a4     14 4E 05 A1 |  if_e	add	fp, #20
0b4a8     A7 24 02 AB |  if_e	rdlong	local04, fp
0b4ac     14 4E 85 A1 |  if_e	sub	fp, #20
0b4b0     12 23 02 A6 |  if_e	mov	local03, local04
0b4b4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b4b8     1C 00 90 5D |  if_ne	jmp	#LR__0934
0b4bc     A7 1E 02 FB | 	rdlong	local01, fp
0b4c0     0C 4E 05 F1 | 	add	fp, #12
0b4c4     A7 20 02 FB | 	rdlong	local02, fp
0b4c8     0C 4E 85 F1 | 	sub	fp, #12
0b4cc     10 1F 02 F1 | 	add	local01, local02
0b4d0     A7 1E 62 FC | 	wrlong	local01, fp
0b4d4     0C 02 90 FD | 	jmp	#LR__0942
0b4d8                 | LR__0934
0b4d8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0b4d8     08 4E 05 F1 | 	add	fp, #8
0b4dc     A7 1E 02 FB | 	rdlong	local01, fp
0b4e0     08 4E 85 F1 | 	sub	fp, #8
0b4e4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b4e8     14 4E 05 A1 |  if_e	add	fp, #20
0b4ec     A7 24 02 AB |  if_e	rdlong	local04, fp
0b4f0     14 4E 85 A1 |  if_e	sub	fp, #20
0b4f4     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
0b4f8     40 00 90 5D |  if_ne	jmp	#LR__0935
0b4fc     A7 12 02 FB | 	rdlong	arg01, fp
0b500     09 13 52 F6 | 	abs	arg01, arg01 wc
0b504     1F 26 C6 C9 |  if_b	decod	local05, #31
0b508     00 26 06 36 |  if_ae	mov	local05, #0
0b50c     48 CA B0 FD | 	call	#__system___float_fromuns
0b510     13 FB 61 F5 | 	xor	result1, local05
0b514     FD 12 02 F6 | 	mov	arg01, result1
0b518     0C 4E 05 F1 | 	add	fp, #12
0b51c     A7 14 02 FB | 	rdlong	arg02, fp
0b520     0C 4E 85 F1 | 	sub	fp, #12
0b524     64 CA B0 FD | 	call	#__system___float_add
0b528     A7 FA 61 FC | 	wrlong	result1, fp
0b52c     08 4E 05 F1 | 	add	fp, #8
0b530     A7 3C 68 FC | 	wrlong	#30, fp
0b534     08 4E 85 F1 | 	sub	fp, #8
0b538     A8 01 90 FD | 	jmp	#LR__0942
0b53c                 | LR__0935
0b53c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
0b53c     08 4E 05 F1 | 	add	fp, #8
0b540     A7 1E 02 FB | 	rdlong	local01, fp
0b544     08 4E 85 F1 | 	sub	fp, #8
0b548     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b54c     14 4E 05 A1 |  if_e	add	fp, #20
0b550     A7 22 02 AB |  if_e	rdlong	local03, fp
0b554     14 4E 85 A1 |  if_e	sub	fp, #20
0b558     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b55c     28 00 90 5D |  if_ne	jmp	#LR__0936
0b560     A7 1E 02 FB | 	rdlong	local01, fp
0b564     0C 4E 05 F1 | 	add	fp, #12
0b568     A7 12 02 FB | 	rdlong	arg01, fp
0b56c     0C 4E 85 F1 | 	sub	fp, #12
0b570     E4 C9 B0 FD | 	call	#__system___float_fromuns
0b574     FD 14 02 F6 | 	mov	arg02, result1
0b578     0F 13 02 F6 | 	mov	arg01, local01
0b57c     0C CA B0 FD | 	call	#__system___float_add
0b580     A7 FA 61 FC | 	wrlong	result1, fp
0b584     5C 01 90 FD | 	jmp	#LR__0942
0b588                 | LR__0936
0b588                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
0b588     08 4E 05 F1 | 	add	fp, #8
0b58c     A7 1E 02 FB | 	rdlong	local01, fp
0b590     08 4E 85 F1 | 	sub	fp, #8
0b594     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b598     14 4E 05 A1 |  if_e	add	fp, #20
0b59c     A7 22 02 AB |  if_e	rdlong	local03, fp
0b5a0     14 4E 85 A1 |  if_e	sub	fp, #20
0b5a4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b5a8     38 00 90 5D |  if_ne	jmp	#LR__0937
0b5ac     A7 1E 02 FB | 	rdlong	local01, fp
0b5b0     0C 4E 05 F1 | 	add	fp, #12
0b5b4     A7 12 02 FB | 	rdlong	arg01, fp
0b5b8     0C 4E 85 F1 | 	sub	fp, #12
0b5bc     09 13 52 F6 | 	abs	arg01, arg01 wc
0b5c0     1F 26 C6 C9 |  if_b	decod	local05, #31
0b5c4     00 26 06 36 |  if_ae	mov	local05, #0
0b5c8     8C C9 B0 FD | 	call	#__system___float_fromuns
0b5cc     13 FB 61 F5 | 	xor	result1, local05
0b5d0     FD 14 02 F6 | 	mov	arg02, result1
0b5d4     0F 13 02 F6 | 	mov	arg01, local01
0b5d8     B0 C9 B0 FD | 	call	#__system___float_add
0b5dc     A7 FA 61 FC | 	wrlong	result1, fp
0b5e0     00 01 90 FD | 	jmp	#LR__0942
0b5e4                 | LR__0937
0b5e4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
0b5e4     08 4E 05 F1 | 	add	fp, #8
0b5e8     A7 1E 02 FB | 	rdlong	local01, fp
0b5ec     08 4E 85 F1 | 	sub	fp, #8
0b5f0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b5f4     14 4E 05 A1 |  if_e	add	fp, #20
0b5f8     A7 22 02 AB |  if_e	rdlong	local03, fp
0b5fc     14 4E 85 A1 |  if_e	sub	fp, #20
0b600     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b604     1C 00 90 5D |  if_ne	jmp	#LR__0938
0b608     A7 12 02 FB | 	rdlong	arg01, fp
0b60c     0C 4E 05 F1 | 	add	fp, #12
0b610     A7 14 02 FB | 	rdlong	arg02, fp
0b614     0C 4E 85 F1 | 	sub	fp, #12
0b618     70 C9 B0 FD | 	call	#__system___float_add
0b61c     A7 FA 61 FC | 	wrlong	result1, fp
0b620     C0 00 90 FD | 	jmp	#LR__0942
0b624                 | LR__0938
0b624                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0b624     08 4E 05 F1 | 	add	fp, #8
0b628     A7 1E 02 FB | 	rdlong	local01, fp
0b62c     08 4E 85 F1 | 	sub	fp, #8
0b630     1F 1E 0E F2 | 	cmp	local01, #31 wz
0b634     24 00 90 5D |  if_ne	jmp	#LR__0939
0b638     14 4E 05 F1 | 	add	fp, #20
0b63c     A7 22 02 FB | 	rdlong	local03, fp
0b640     14 4E 85 F1 | 	sub	fp, #20
0b644     1F 22 0E F2 | 	cmp	local03, #31 wz
0b648     A7 04 68 5C |  if_ne	wrlong	#2, fp
0b64c     08 4E 05 51 |  if_ne	add	fp, #8
0b650     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0b654     08 4E 85 51 |  if_ne	sub	fp, #8
0b658     88 00 90 5D |  if_ne	jmp	#LR__0942
0b65c                 | LR__0939
0b65c                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0b65c     14 4E 05 F1 | 	add	fp, #20
0b660     A7 1E 02 FB | 	rdlong	local01, fp
0b664     14 4E 85 F1 | 	sub	fp, #20
0b668     1F 1E 0E F2 | 	cmp	local01, #31 wz
0b66c     24 00 90 5D |  if_ne	jmp	#LR__0940
0b670     08 4E 05 F1 | 	add	fp, #8
0b674     A7 22 02 FB | 	rdlong	local03, fp
0b678     08 4E 85 F1 | 	sub	fp, #8
0b67c     1F 22 0E F2 | 	cmp	local03, #31 wz
0b680     A7 04 68 5C |  if_ne	wrlong	#2, fp
0b684     08 4E 05 51 |  if_ne	add	fp, #8
0b688     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0b68c     08 4E 85 51 |  if_ne	sub	fp, #8
0b690     50 00 90 5D |  if_ne	jmp	#LR__0942
0b694                 | LR__0940
0b694                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
0b694     08 4E 05 F1 | 	add	fp, #8
0b698     A7 1E 02 FB | 	rdlong	local01, fp
0b69c     08 4E 85 F1 | 	sub	fp, #8
0b6a0     1F 1E 0E F2 | 	cmp	local01, #31 wz
0b6a4     14 4E 05 A1 |  if_e	add	fp, #20
0b6a8     A7 22 02 AB |  if_e	rdlong	local03, fp
0b6ac     14 4E 85 A1 |  if_e	sub	fp, #20
0b6b0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0b6b4     1C 00 90 5D |  if_ne	jmp	#LR__0941
0b6b8     A7 12 02 FB | 	rdlong	arg01, fp
0b6bc     0C 4E 05 F1 | 	add	fp, #12
0b6c0     A7 14 02 FB | 	rdlong	arg02, fp
0b6c4     0C 4E 85 F1 | 	sub	fp, #12
0b6c8     00 A2 B0 FD | 	call	#__system___string_concat
0b6cc     A7 FA 61 FC | 	wrlong	result1, fp
0b6d0     10 00 90 FD | 	jmp	#LR__0942
0b6d4                 | LR__0941
0b6d4     A7 08 68 FC | 	wrlong	#4, fp
0b6d8     08 4E 05 F1 | 	add	fp, #8
0b6dc     A7 FE 69 FC | 	wrlong	#255, fp
0b6e0     08 4E 85 F1 | 	sub	fp, #8
0b6e4                 | LR__0942
0b6e4     A7 12 02 F6 | 	mov	arg01, fp
0b6e8     20 D3 BF FD | 	call	#_push
0b6ec     A7 F0 03 F6 | 	mov	ptra, fp
0b6f0     B2 00 A0 FD | 	call	#popregs_
0b6f4                 | _do_plus_ret
0b6f4     2D 00 64 FD | 	ret
0b6f8                 | 
0b6f8                 | ' 
0b6f8                 | ' sub do_minus
0b6f8                 | _do_minus
0b6f8     05 4A 05 F6 | 	mov	COUNT_, #5
0b6fc     A8 00 A0 FD | 	call	#pushregs_
0b700     18 F0 07 F1 | 	add	ptra, #24
0b704     6C D2 BF FD | 	call	#_pop
0b708     FD 1E 02 F6 | 	mov	local01, result1
0b70c     FE 20 02 F6 | 	mov	local02, result2
0b710     FF 22 02 F6 | 	mov	local03, result3
0b714     0C 4E 05 F1 | 	add	fp, #12
0b718     A7 1E 62 FC | 	wrlong	local01, fp
0b71c     04 4E 05 F1 | 	add	fp, #4
0b720     A7 20 62 FC | 	wrlong	local02, fp
0b724     04 4E 05 F1 | 	add	fp, #4
0b728     A7 22 62 FC | 	wrlong	local03, fp
0b72c     14 4E 85 F1 | 	sub	fp, #20
0b730     40 D2 BF FD | 	call	#_pop
0b734     FF 22 02 F6 | 	mov	local03, result3
0b738     A7 FA 61 FC | 	wrlong	result1, fp
0b73c     04 4E 05 F1 | 	add	fp, #4
0b740     A7 FC 61 FC | 	wrlong	result2, fp
0b744     04 4E 05 F1 | 	add	fp, #4
0b748     A7 22 62 FC | 	wrlong	local03, fp
0b74c                 | ' 
0b74c                 | ' t2=pop()
0b74c                 | ' t1=pop()
0b74c                 | ' 
0b74c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
0b74c     08 4E 85 F1 | 	sub	fp, #8
0b750     1D 22 0E F2 | 	cmp	local03, #29 wz
0b754     14 4E 05 A1 |  if_e	add	fp, #20
0b758     A7 24 02 AB |  if_e	rdlong	local04, fp
0b75c     14 4E 85 A1 |  if_e	sub	fp, #20
0b760     12 23 02 A6 |  if_e	mov	local03, local04
0b764     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b768     5C 00 90 5D |  if_ne	jmp	#LR__0951
0b76c                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
0b76c     0C 4E 05 F1 | 	add	fp, #12
0b770     A7 1E 02 FB | 	rdlong	local01, fp
0b774     0C 4E 85 F1 | 	sub	fp, #12
0b778     A7 22 02 FB | 	rdlong	local03, fp
0b77c     11 1F 12 F2 | 	cmp	local01, local03 wc
0b780     1C 00 90 3D |  if_ae	jmp	#LR__0950
0b784     A7 1E 02 FB | 	rdlong	local01, fp
0b788     0C 4E 05 F1 | 	add	fp, #12
0b78c     A7 20 02 FB | 	rdlong	local02, fp
0b790     0C 4E 85 F1 | 	sub	fp, #12
0b794     10 1F 82 F1 | 	sub	local01, local02
0b798     A7 1E 62 FC | 	wrlong	local01, fp
0b79c     F4 02 90 FD | 	jmp	#LR__0960
0b7a0                 | LR__0950
0b7a0     A7 1E 02 FB | 	rdlong	local01, fp
0b7a4     0C 4E 05 F1 | 	add	fp, #12
0b7a8     A7 20 02 FB | 	rdlong	local02, fp
0b7ac     0C 4E 85 F1 | 	sub	fp, #12
0b7b0     10 1F 82 F1 | 	sub	local01, local02
0b7b4     A7 1E 62 FC | 	wrlong	local01, fp
0b7b8     08 4E 05 F1 | 	add	fp, #8
0b7bc     A7 38 68 FC | 	wrlong	#28, fp
0b7c0     08 4E 85 F1 | 	sub	fp, #8
0b7c4     CC 02 90 FD | 	jmp	#LR__0960
0b7c8                 | LR__0951
0b7c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
0b7c8     08 4E 05 F1 | 	add	fp, #8
0b7cc     A7 1E 02 FB | 	rdlong	local01, fp
0b7d0     08 4E 85 F1 | 	sub	fp, #8
0b7d4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0b7d8     14 4E 05 A1 |  if_e	add	fp, #20
0b7dc     A7 24 02 AB |  if_e	rdlong	local04, fp
0b7e0     14 4E 85 A1 |  if_e	sub	fp, #20
0b7e4     12 23 02 A6 |  if_e	mov	local03, local04
0b7e8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b7ec     28 00 90 5D |  if_ne	jmp	#LR__0952
0b7f0     A7 1E 02 FB | 	rdlong	local01, fp
0b7f4     0C 4E 05 F1 | 	add	fp, #12
0b7f8     A7 20 02 FB | 	rdlong	local02, fp
0b7fc     0C 4E 85 F1 | 	sub	fp, #12
0b800     10 1F 82 F1 | 	sub	local01, local02
0b804     A7 1E 62 FC | 	wrlong	local01, fp
0b808     08 4E 05 F1 | 	add	fp, #8
0b80c     A7 38 68 FC | 	wrlong	#28, fp
0b810     08 4E 85 F1 | 	sub	fp, #8
0b814     7C 02 90 FD | 	jmp	#LR__0960
0b818                 | LR__0952
0b818                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0b818     08 4E 05 F1 | 	add	fp, #8
0b81c     A7 1E 02 FB | 	rdlong	local01, fp
0b820     08 4E 85 F1 | 	sub	fp, #8
0b824     1D 1E 0E F2 | 	cmp	local01, #29 wz
0b828     14 4E 05 A1 |  if_e	add	fp, #20
0b82c     A7 24 02 AB |  if_e	rdlong	local04, fp
0b830     14 4E 85 A1 |  if_e	sub	fp, #20
0b834     12 23 02 A6 |  if_e	mov	local03, local04
0b838     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b83c     34 00 90 5D |  if_ne	jmp	#LR__0953
0b840     A7 12 02 FB | 	rdlong	arg01, fp
0b844     10 C7 B0 FD | 	call	#__system___float_fromuns
0b848     FD 12 02 F6 | 	mov	arg01, result1
0b84c     0C 4E 05 F1 | 	add	fp, #12
0b850     A7 14 02 FB | 	rdlong	arg02, fp
0b854     0C 4E 85 F1 | 	sub	fp, #12
0b858     1F 14 E6 F4 | 	bitnot	arg02, #31
0b85c     2C C7 B0 FD | 	call	#__system___float_add
0b860     A7 FA 61 FC | 	wrlong	result1, fp
0b864     08 4E 05 F1 | 	add	fp, #8
0b868     A7 3C 68 FC | 	wrlong	#30, fp
0b86c     08 4E 85 F1 | 	sub	fp, #8
0b870     20 02 90 FD | 	jmp	#LR__0960
0b874                 | LR__0953
0b874                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
0b874     08 4E 05 F1 | 	add	fp, #8
0b878     A7 1E 02 FB | 	rdlong	local01, fp
0b87c     08 4E 85 F1 | 	sub	fp, #8
0b880     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b884     14 4E 05 A1 |  if_e	add	fp, #20
0b888     A7 24 02 AB |  if_e	rdlong	local04, fp
0b88c     14 4E 85 A1 |  if_e	sub	fp, #20
0b890     12 23 02 A6 |  if_e	mov	local03, local04
0b894     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b898     1C 00 90 5D |  if_ne	jmp	#LR__0954
0b89c     A7 1E 02 FB | 	rdlong	local01, fp
0b8a0     0C 4E 05 F1 | 	add	fp, #12
0b8a4     A7 20 02 FB | 	rdlong	local02, fp
0b8a8     0C 4E 85 F1 | 	sub	fp, #12
0b8ac     10 1F 82 F1 | 	sub	local01, local02
0b8b0     A7 1E 62 FC | 	wrlong	local01, fp
0b8b4     DC 01 90 FD | 	jmp	#LR__0960
0b8b8                 | LR__0954
0b8b8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
0b8b8     08 4E 05 F1 | 	add	fp, #8
0b8bc     A7 1E 02 FB | 	rdlong	local01, fp
0b8c0     08 4E 85 F1 | 	sub	fp, #8
0b8c4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b8c8     14 4E 05 A1 |  if_e	add	fp, #20
0b8cc     A7 24 02 AB |  if_e	rdlong	local04, fp
0b8d0     14 4E 85 A1 |  if_e	sub	fp, #20
0b8d4     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0b8d8     1C 00 90 5D |  if_ne	jmp	#LR__0955
0b8dc     A7 1E 02 FB | 	rdlong	local01, fp
0b8e0     0C 4E 05 F1 | 	add	fp, #12
0b8e4     A7 20 02 FB | 	rdlong	local02, fp
0b8e8     0C 4E 85 F1 | 	sub	fp, #12
0b8ec     10 1F 82 F1 | 	sub	local01, local02
0b8f0     A7 1E 62 FC | 	wrlong	local01, fp
0b8f4     9C 01 90 FD | 	jmp	#LR__0960
0b8f8                 | LR__0955
0b8f8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0b8f8     08 4E 05 F1 | 	add	fp, #8
0b8fc     A7 1E 02 FB | 	rdlong	local01, fp
0b900     08 4E 85 F1 | 	sub	fp, #8
0b904     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b908     14 4E 05 A1 |  if_e	add	fp, #20
0b90c     A7 22 02 AB |  if_e	rdlong	local03, fp
0b910     14 4E 85 A1 |  if_e	sub	fp, #20
0b914     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b918     44 00 90 5D |  if_ne	jmp	#LR__0956
0b91c     A7 12 02 FB | 	rdlong	arg01, fp
0b920     09 13 52 F6 | 	abs	arg01, arg01 wc
0b924     1F 26 C6 C9 |  if_b	decod	local05, #31
0b928     00 26 06 36 |  if_ae	mov	local05, #0
0b92c     28 C6 B0 FD | 	call	#__system___float_fromuns
0b930     13 FB 61 F5 | 	xor	result1, local05
0b934     FD 12 02 F6 | 	mov	arg01, result1
0b938     0C 4E 05 F1 | 	add	fp, #12
0b93c     A7 14 02 FB | 	rdlong	arg02, fp
0b940     0C 4E 85 F1 | 	sub	fp, #12
0b944     1F 14 E6 F4 | 	bitnot	arg02, #31
0b948     40 C6 B0 FD | 	call	#__system___float_add
0b94c     A7 FA 61 FC | 	wrlong	result1, fp
0b950     08 4E 05 F1 | 	add	fp, #8
0b954     A7 3C 68 FC | 	wrlong	#30, fp
0b958     08 4E 85 F1 | 	sub	fp, #8
0b95c     34 01 90 FD | 	jmp	#LR__0960
0b960                 | LR__0956
0b960                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
0b960     08 4E 05 F1 | 	add	fp, #8
0b964     A7 1E 02 FB | 	rdlong	local01, fp
0b968     08 4E 85 F1 | 	sub	fp, #8
0b96c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b970     14 4E 05 A1 |  if_e	add	fp, #20
0b974     A7 22 02 AB |  if_e	rdlong	local03, fp
0b978     14 4E 85 A1 |  if_e	sub	fp, #20
0b97c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b980     2C 00 90 5D |  if_ne	jmp	#LR__0957
0b984     A7 1E 02 FB | 	rdlong	local01, fp
0b988     0C 4E 05 F1 | 	add	fp, #12
0b98c     A7 12 02 FB | 	rdlong	arg01, fp
0b990     0C 4E 85 F1 | 	sub	fp, #12
0b994     C0 C5 B0 FD | 	call	#__system___float_fromuns
0b998     FD 14 02 F6 | 	mov	arg02, result1
0b99c     0F 13 02 F6 | 	mov	arg01, local01
0b9a0     1F 14 E6 F4 | 	bitnot	arg02, #31
0b9a4     E4 C5 B0 FD | 	call	#__system___float_add
0b9a8     A7 FA 61 FC | 	wrlong	result1, fp
0b9ac     E4 00 90 FD | 	jmp	#LR__0960
0b9b0                 | LR__0957
0b9b0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
0b9b0     08 4E 05 F1 | 	add	fp, #8
0b9b4     A7 1E 02 FB | 	rdlong	local01, fp
0b9b8     08 4E 85 F1 | 	sub	fp, #8
0b9bc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b9c0     14 4E 05 A1 |  if_e	add	fp, #20
0b9c4     A7 22 02 AB |  if_e	rdlong	local03, fp
0b9c8     14 4E 85 A1 |  if_e	sub	fp, #20
0b9cc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b9d0     3C 00 90 5D |  if_ne	jmp	#LR__0958
0b9d4     A7 1E 02 FB | 	rdlong	local01, fp
0b9d8     0C 4E 05 F1 | 	add	fp, #12
0b9dc     A7 12 02 FB | 	rdlong	arg01, fp
0b9e0     0C 4E 85 F1 | 	sub	fp, #12
0b9e4     09 13 52 F6 | 	abs	arg01, arg01 wc
0b9e8     1F 26 C6 C9 |  if_b	decod	local05, #31
0b9ec     00 26 06 36 |  if_ae	mov	local05, #0
0b9f0     64 C5 B0 FD | 	call	#__system___float_fromuns
0b9f4     13 FB 61 F5 | 	xor	result1, local05
0b9f8     FD 14 02 F6 | 	mov	arg02, result1
0b9fc     0F 13 02 F6 | 	mov	arg01, local01
0ba00     1F 14 E6 F4 | 	bitnot	arg02, #31
0ba04     84 C5 B0 FD | 	call	#__system___float_add
0ba08     A7 FA 61 FC | 	wrlong	result1, fp
0ba0c     84 00 90 FD | 	jmp	#LR__0960
0ba10                 | LR__0958
0ba10                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
0ba10     08 4E 05 F1 | 	add	fp, #8
0ba14     A7 1E 02 FB | 	rdlong	local01, fp
0ba18     08 4E 85 F1 | 	sub	fp, #8
0ba1c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ba20     14 4E 05 A1 |  if_e	add	fp, #20
0ba24     A7 22 02 AB |  if_e	rdlong	local03, fp
0ba28     14 4E 85 A1 |  if_e	sub	fp, #20
0ba2c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ba30     20 00 90 5D |  if_ne	jmp	#LR__0959
0ba34     A7 12 02 FB | 	rdlong	arg01, fp
0ba38     0C 4E 05 F1 | 	add	fp, #12
0ba3c     A7 14 02 FB | 	rdlong	arg02, fp
0ba40     0C 4E 85 F1 | 	sub	fp, #12
0ba44     1F 14 E6 F4 | 	bitnot	arg02, #31
0ba48     40 C5 B0 FD | 	call	#__system___float_add
0ba4c     A7 FA 61 FC | 	wrlong	result1, fp
0ba50     40 00 90 FD | 	jmp	#LR__0960
0ba54                 | LR__0959
0ba54                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
0ba54     08 4E 05 F1 | 	add	fp, #8
0ba58     A7 1E 02 FB | 	rdlong	local01, fp
0ba5c     08 4E 85 F1 | 	sub	fp, #8
0ba60     1F 1E 0E F2 | 	cmp	local01, #31 wz
0ba64     14 4E 05 51 |  if_ne	add	fp, #20
0ba68     A7 22 02 5B |  if_ne	rdlong	local03, fp
0ba6c     14 4E 85 51 |  if_ne	sub	fp, #20
0ba70     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0ba74     A7 06 68 AC |  if_e	wrlong	#3, fp
0ba78     08 4E 05 A1 |  if_e	add	fp, #8
0ba7c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0ba80     08 4E 85 A1 |  if_e	sub	fp, #8
0ba84     A7 0A 68 5C |  if_ne	wrlong	#5, fp
0ba88     08 4E 05 51 |  if_ne	add	fp, #8
0ba8c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0ba90     08 4E 85 51 |  if_ne	sub	fp, #8
0ba94                 | LR__0960
0ba94     A7 12 02 F6 | 	mov	arg01, fp
0ba98     70 CF BF FD | 	call	#_push
0ba9c     A7 F0 03 F6 | 	mov	ptra, fp
0baa0     B2 00 A0 FD | 	call	#popregs_
0baa4                 | _do_minus_ret
0baa4     2D 00 64 FD | 	ret
0baa8                 | 
0baa8                 | ' 
0baa8                 | ' sub do_and 
0baa8                 | _do_and
0baa8     03 4A 05 F6 | 	mov	COUNT_, #3
0baac     A8 00 A0 FD | 	call	#pushregs_
0bab0     18 F0 07 F1 | 	add	ptra, #24
0bab4     BC CE BF FD | 	call	#_pop
0bab8     FD 12 02 F6 | 	mov	arg01, result1
0babc     FE 1E 02 F6 | 	mov	local01, result2
0bac0     FF 20 02 F6 | 	mov	local02, result3
0bac4     0C 4E 05 F1 | 	add	fp, #12
0bac8     A7 12 62 FC | 	wrlong	arg01, fp
0bacc     04 4E 05 F1 | 	add	fp, #4
0bad0     A7 1E 62 FC | 	wrlong	local01, fp
0bad4     04 4E 05 F1 | 	add	fp, #4
0bad8     A7 20 62 FC | 	wrlong	local02, fp
0badc     14 4E 85 F1 | 	sub	fp, #20
0bae0     90 CE BF FD | 	call	#_pop
0bae4     FF 22 02 F6 | 	mov	local03, result3
0bae8     A7 FA 61 FC | 	wrlong	result1, fp
0baec     04 4E 05 F1 | 	add	fp, #4
0baf0     A7 FC 61 FC | 	wrlong	result2, fp
0baf4     04 4E 05 F1 | 	add	fp, #4
0baf8     A7 22 62 FC | 	wrlong	local03, fp
0bafc                 | ' 
0bafc                 | ' t2=pop()
0bafc                 | ' t1=pop()
0bafc                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0bafc     08 4E 85 F1 | 	sub	fp, #8
0bb00     1C 22 0E F2 | 	cmp	local03, #28 wz
0bb04     A7 22 02 AB |  if_e	rdlong	local03, fp
0bb08     A7 22 62 AC |  if_e	wrlong	local03, fp
0bb0c     08 4E 05 A1 |  if_e	add	fp, #8
0bb10     A7 3A 68 AC |  if_e	wrlong	#29, fp
0bb14     08 4E 85 A1 |  if_e	sub	fp, #8
0bb18                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0bb18     14 4E 05 F1 | 	add	fp, #20
0bb1c     A7 22 02 FB | 	rdlong	local03, fp
0bb20     14 4E 85 F1 | 	sub	fp, #20
0bb24     1C 22 0E F2 | 	cmp	local03, #28 wz
0bb28     18 00 90 5D |  if_ne	jmp	#LR__0970
0bb2c     0C 4E 05 F1 | 	add	fp, #12
0bb30     A7 22 02 FB | 	rdlong	local03, fp
0bb34     A7 22 62 FC | 	wrlong	local03, fp
0bb38     08 4E 05 F1 | 	add	fp, #8
0bb3c     A7 3A 68 FC | 	wrlong	#29, fp
0bb40     14 4E 85 F1 | 	sub	fp, #20
0bb44                 | LR__0970
0bb44                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
0bb44     08 4E 05 F1 | 	add	fp, #8
0bb48     A7 22 02 FB | 	rdlong	local03, fp
0bb4c     08 4E 85 F1 | 	sub	fp, #8
0bb50     1F 22 0E F2 | 	cmp	local03, #31 wz
0bb54     14 4E 05 51 |  if_ne	add	fp, #20
0bb58     A7 20 02 5B |  if_ne	rdlong	local02, fp
0bb5c     14 4E 85 51 |  if_ne	sub	fp, #20
0bb60     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0bb64     08 4E 05 51 |  if_ne	add	fp, #8
0bb68     A7 22 02 5B |  if_ne	rdlong	local03, fp
0bb6c     08 4E 85 51 |  if_ne	sub	fp, #8
0bb70     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0bb74     14 4E 05 51 |  if_ne	add	fp, #20
0bb78     14 4E 85 51 |  if_ne	sub	fp, #20
0bb7c     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0bb80     A7 0C 68 AC |  if_e	wrlong	#6, fp
0bb84     08 4E 05 A1 |  if_e	add	fp, #8
0bb88     A7 FE 69 AC |  if_e	wrlong	#255, fp
0bb8c     08 4E 85 A1 |  if_e	sub	fp, #8
0bb90     18 00 90 AD |  if_e	jmp	#LR__0971
0bb94     A7 22 02 FB | 	rdlong	local03, fp
0bb98     0C 4E 05 F1 | 	add	fp, #12
0bb9c     A7 1E 02 FB | 	rdlong	local01, fp
0bba0     0C 4E 85 F1 | 	sub	fp, #12
0bba4     0F 23 02 F5 | 	and	local03, local01
0bba8     A7 22 62 FC | 	wrlong	local03, fp
0bbac                 | LR__0971
0bbac     A7 12 02 F6 | 	mov	arg01, fp
0bbb0     58 CE BF FD | 	call	#_push
0bbb4     A7 F0 03 F6 | 	mov	ptra, fp
0bbb8     B2 00 A0 FD | 	call	#popregs_
0bbbc                 | _do_and_ret
0bbbc     2D 00 64 FD | 	ret
0bbc0                 | 
0bbc0                 | ' 
0bbc0                 | ' sub do_or 
0bbc0                 | _do_or
0bbc0     03 4A 05 F6 | 	mov	COUNT_, #3
0bbc4     A8 00 A0 FD | 	call	#pushregs_
0bbc8     18 F0 07 F1 | 	add	ptra, #24
0bbcc     A4 CD BF FD | 	call	#_pop
0bbd0     FD 12 02 F6 | 	mov	arg01, result1
0bbd4     FE 1E 02 F6 | 	mov	local01, result2
0bbd8     FF 20 02 F6 | 	mov	local02, result3
0bbdc     0C 4E 05 F1 | 	add	fp, #12
0bbe0     A7 12 62 FC | 	wrlong	arg01, fp
0bbe4     04 4E 05 F1 | 	add	fp, #4
0bbe8     A7 1E 62 FC | 	wrlong	local01, fp
0bbec     04 4E 05 F1 | 	add	fp, #4
0bbf0     A7 20 62 FC | 	wrlong	local02, fp
0bbf4     14 4E 85 F1 | 	sub	fp, #20
0bbf8     78 CD BF FD | 	call	#_pop
0bbfc     FF 22 02 F6 | 	mov	local03, result3
0bc00     A7 FA 61 FC | 	wrlong	result1, fp
0bc04     04 4E 05 F1 | 	add	fp, #4
0bc08     A7 FC 61 FC | 	wrlong	result2, fp
0bc0c     04 4E 05 F1 | 	add	fp, #4
0bc10     A7 22 62 FC | 	wrlong	local03, fp
0bc14                 | ' 
0bc14                 | ' t2=pop()
0bc14                 | ' t1=pop()
0bc14                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0bc14     08 4E 85 F1 | 	sub	fp, #8
0bc18     1C 22 0E F2 | 	cmp	local03, #28 wz
0bc1c     A7 22 02 AB |  if_e	rdlong	local03, fp
0bc20     A7 22 62 AC |  if_e	wrlong	local03, fp
0bc24     08 4E 05 A1 |  if_e	add	fp, #8
0bc28     A7 3A 68 AC |  if_e	wrlong	#29, fp
0bc2c     08 4E 85 A1 |  if_e	sub	fp, #8
0bc30                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0bc30     14 4E 05 F1 | 	add	fp, #20
0bc34     A7 22 02 FB | 	rdlong	local03, fp
0bc38     14 4E 85 F1 | 	sub	fp, #20
0bc3c     1C 22 0E F2 | 	cmp	local03, #28 wz
0bc40     18 00 90 5D |  if_ne	jmp	#LR__0980
0bc44     0C 4E 05 F1 | 	add	fp, #12
0bc48     A7 22 02 FB | 	rdlong	local03, fp
0bc4c     A7 22 62 FC | 	wrlong	local03, fp
0bc50     08 4E 05 F1 | 	add	fp, #8
0bc54     A7 3A 68 FC | 	wrlong	#29, fp
0bc58     14 4E 85 F1 | 	sub	fp, #20
0bc5c                 | LR__0980
0bc5c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
0bc5c     08 4E 05 F1 | 	add	fp, #8
0bc60     A7 22 02 FB | 	rdlong	local03, fp
0bc64     08 4E 85 F1 | 	sub	fp, #8
0bc68     1F 22 0E F2 | 	cmp	local03, #31 wz
0bc6c     14 4E 05 51 |  if_ne	add	fp, #20
0bc70     A7 20 02 5B |  if_ne	rdlong	local02, fp
0bc74     14 4E 85 51 |  if_ne	sub	fp, #20
0bc78     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0bc7c     08 4E 05 51 |  if_ne	add	fp, #8
0bc80     A7 22 02 5B |  if_ne	rdlong	local03, fp
0bc84     08 4E 85 51 |  if_ne	sub	fp, #8
0bc88     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0bc8c     14 4E 05 51 |  if_ne	add	fp, #20
0bc90     14 4E 85 51 |  if_ne	sub	fp, #20
0bc94     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0bc98     A7 0C 68 AC |  if_e	wrlong	#6, fp
0bc9c     08 4E 05 A1 |  if_e	add	fp, #8
0bca0     A7 FE 69 AC |  if_e	wrlong	#255, fp
0bca4     08 4E 85 A1 |  if_e	sub	fp, #8
0bca8     18 00 90 AD |  if_e	jmp	#LR__0981
0bcac     A7 22 02 FB | 	rdlong	local03, fp
0bcb0     0C 4E 05 F1 | 	add	fp, #12
0bcb4     A7 1E 02 FB | 	rdlong	local01, fp
0bcb8     0C 4E 85 F1 | 	sub	fp, #12
0bcbc     0F 23 42 F5 | 	or	local03, local01
0bcc0     A7 22 62 FC | 	wrlong	local03, fp
0bcc4                 | LR__0981
0bcc4     A7 12 02 F6 | 	mov	arg01, fp
0bcc8     40 CD BF FD | 	call	#_push
0bccc     A7 F0 03 F6 | 	mov	ptra, fp
0bcd0     B2 00 A0 FD | 	call	#popregs_
0bcd4                 | _do_or_ret
0bcd4     2D 00 64 FD | 	ret
0bcd8                 | 
0bcd8                 | ' 
0bcd8                 | ' sub do_mul
0bcd8                 | _do_mul
0bcd8     05 4A 05 F6 | 	mov	COUNT_, #5
0bcdc     A8 00 A0 FD | 	call	#pushregs_
0bce0     18 F0 07 F1 | 	add	ptra, #24
0bce4     8C CC BF FD | 	call	#_pop
0bce8     FD 1E 02 F6 | 	mov	local01, result1
0bcec     FE 20 02 F6 | 	mov	local02, result2
0bcf0     FF 22 02 F6 | 	mov	local03, result3
0bcf4     0C 4E 05 F1 | 	add	fp, #12
0bcf8     A7 1E 62 FC | 	wrlong	local01, fp
0bcfc     04 4E 05 F1 | 	add	fp, #4
0bd00     A7 20 62 FC | 	wrlong	local02, fp
0bd04     04 4E 05 F1 | 	add	fp, #4
0bd08     A7 22 62 FC | 	wrlong	local03, fp
0bd0c     14 4E 85 F1 | 	sub	fp, #20
0bd10     60 CC BF FD | 	call	#_pop
0bd14     FF 22 02 F6 | 	mov	local03, result3
0bd18     A7 FA 61 FC | 	wrlong	result1, fp
0bd1c     04 4E 05 F1 | 	add	fp, #4
0bd20     A7 FC 61 FC | 	wrlong	result2, fp
0bd24     04 4E 05 F1 | 	add	fp, #4
0bd28     A7 22 62 FC | 	wrlong	local03, fp
0bd2c                 | ' 
0bd2c                 | ' t2=pop()
0bd2c                 | ' t1=pop()
0bd2c                 | ' 
0bd2c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
0bd2c     08 4E 85 F1 | 	sub	fp, #8
0bd30     1D 22 0E F2 | 	cmp	local03, #29 wz
0bd34     14 4E 05 A1 |  if_e	add	fp, #20
0bd38     A7 24 02 AB |  if_e	rdlong	local04, fp
0bd3c     14 4E 85 A1 |  if_e	sub	fp, #20
0bd40     12 23 02 A6 |  if_e	mov	local03, local04
0bd44     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0bd48     20 00 90 5D |  if_ne	jmp	#LR__0990
0bd4c     A7 20 02 FB | 	rdlong	local02, fp
0bd50     0C 4E 05 F1 | 	add	fp, #12
0bd54     A7 22 02 FB | 	rdlong	local03, fp
0bd58     11 21 02 FD | 	qmul	local02, local03
0bd5c     0C 4E 85 F1 | 	sub	fp, #12
0bd60     18 1E 62 FD | 	getqx	local01
0bd64     A7 1E 62 FC | 	wrlong	local01, fp
0bd68     C4 02 90 FD | 	jmp	#LR__0999
0bd6c                 | LR__0990
0bd6c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
0bd6c     08 4E 05 F1 | 	add	fp, #8
0bd70     A7 1E 02 FB | 	rdlong	local01, fp
0bd74     08 4E 85 F1 | 	sub	fp, #8
0bd78     1D 1E 0E F2 | 	cmp	local01, #29 wz
0bd7c     14 4E 05 A1 |  if_e	add	fp, #20
0bd80     A7 24 02 AB |  if_e	rdlong	local04, fp
0bd84     14 4E 85 A1 |  if_e	sub	fp, #20
0bd88     12 23 02 A6 |  if_e	mov	local03, local04
0bd8c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0bd90     2C 00 90 5D |  if_ne	jmp	#LR__0991
0bd94     A7 20 02 FB | 	rdlong	local02, fp
0bd98     0C 4E 05 F1 | 	add	fp, #12
0bd9c     A7 22 02 FB | 	rdlong	local03, fp
0bda0     11 21 02 FD | 	qmul	local02, local03
0bda4     0C 4E 85 F1 | 	sub	fp, #12
0bda8     18 1E 62 FD | 	getqx	local01
0bdac     A7 1E 62 FC | 	wrlong	local01, fp
0bdb0     08 4E 05 F1 | 	add	fp, #8
0bdb4     A7 38 68 FC | 	wrlong	#28, fp
0bdb8     08 4E 85 F1 | 	sub	fp, #8
0bdbc     70 02 90 FD | 	jmp	#LR__0999
0bdc0                 | LR__0991
0bdc0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0bdc0     08 4E 05 F1 | 	add	fp, #8
0bdc4     A7 1E 02 FB | 	rdlong	local01, fp
0bdc8     08 4E 85 F1 | 	sub	fp, #8
0bdcc     1D 1E 0E F2 | 	cmp	local01, #29 wz
0bdd0     14 4E 05 A1 |  if_e	add	fp, #20
0bdd4     A7 24 02 AB |  if_e	rdlong	local04, fp
0bdd8     14 4E 85 A1 |  if_e	sub	fp, #20
0bddc     12 23 02 A6 |  if_e	mov	local03, local04
0bde0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0bde4     30 00 90 5D |  if_ne	jmp	#LR__0992
0bde8     A7 12 02 FB | 	rdlong	arg01, fp
0bdec     68 C1 B0 FD | 	call	#__system___float_fromuns
0bdf0     FD 12 02 F6 | 	mov	arg01, result1
0bdf4     0C 4E 05 F1 | 	add	fp, #12
0bdf8     A7 14 02 FB | 	rdlong	arg02, fp
0bdfc     0C 4E 85 F1 | 	sub	fp, #12
0be00     80 C4 B0 FD | 	call	#__system___float_mul
0be04     A7 FA 61 FC | 	wrlong	result1, fp
0be08     08 4E 05 F1 | 	add	fp, #8
0be0c     A7 3C 68 FC | 	wrlong	#30, fp
0be10     08 4E 85 F1 | 	sub	fp, #8
0be14     18 02 90 FD | 	jmp	#LR__0999
0be18                 | LR__0992
0be18                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
0be18     08 4E 05 F1 | 	add	fp, #8
0be1c     A7 1E 02 FB | 	rdlong	local01, fp
0be20     08 4E 85 F1 | 	sub	fp, #8
0be24     1C 1E 0E F2 | 	cmp	local01, #28 wz
0be28     14 4E 05 A1 |  if_e	add	fp, #20
0be2c     A7 24 02 AB |  if_e	rdlong	local04, fp
0be30     14 4E 85 A1 |  if_e	sub	fp, #20
0be34     12 23 02 A6 |  if_e	mov	local03, local04
0be38     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0be3c     20 00 90 5D |  if_ne	jmp	#LR__0993
0be40     A7 20 02 FB | 	rdlong	local02, fp
0be44     0C 4E 05 F1 | 	add	fp, #12
0be48     A7 22 02 FB | 	rdlong	local03, fp
0be4c     11 21 02 FD | 	qmul	local02, local03
0be50     0C 4E 85 F1 | 	sub	fp, #12
0be54     18 1E 62 FD | 	getqx	local01
0be58     A7 1E 62 FC | 	wrlong	local01, fp
0be5c     D0 01 90 FD | 	jmp	#LR__0999
0be60                 | LR__0993
0be60                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
0be60     08 4E 05 F1 | 	add	fp, #8
0be64     A7 1E 02 FB | 	rdlong	local01, fp
0be68     08 4E 85 F1 | 	sub	fp, #8
0be6c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0be70     14 4E 05 A1 |  if_e	add	fp, #20
0be74     A7 24 02 AB |  if_e	rdlong	local04, fp
0be78     14 4E 85 A1 |  if_e	sub	fp, #20
0be7c     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0be80     20 00 90 5D |  if_ne	jmp	#LR__0994
0be84     A7 20 02 FB | 	rdlong	local02, fp
0be88     0C 4E 05 F1 | 	add	fp, #12
0be8c     A7 22 02 FB | 	rdlong	local03, fp
0be90     11 21 02 FD | 	qmul	local02, local03
0be94     0C 4E 85 F1 | 	sub	fp, #12
0be98     18 1E 62 FD | 	getqx	local01
0be9c     A7 1E 62 FC | 	wrlong	local01, fp
0bea0     8C 01 90 FD | 	jmp	#LR__0999
0bea4                 | LR__0994
0bea4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0bea4     08 4E 05 F1 | 	add	fp, #8
0bea8     A7 1E 02 FB | 	rdlong	local01, fp
0beac     08 4E 85 F1 | 	sub	fp, #8
0beb0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0beb4     14 4E 05 A1 |  if_e	add	fp, #20
0beb8     A7 22 02 AB |  if_e	rdlong	local03, fp
0bebc     14 4E 85 A1 |  if_e	sub	fp, #20
0bec0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0bec4     40 00 90 5D |  if_ne	jmp	#LR__0995
0bec8     A7 12 02 FB | 	rdlong	arg01, fp
0becc     09 13 52 F6 | 	abs	arg01, arg01 wc
0bed0     1F 26 C6 C9 |  if_b	decod	local05, #31
0bed4     00 26 06 36 |  if_ae	mov	local05, #0
0bed8     7C C0 B0 FD | 	call	#__system___float_fromuns
0bedc     13 FB 61 F5 | 	xor	result1, local05
0bee0     FD 12 02 F6 | 	mov	arg01, result1
0bee4     0C 4E 05 F1 | 	add	fp, #12
0bee8     A7 14 02 FB | 	rdlong	arg02, fp
0beec     0C 4E 85 F1 | 	sub	fp, #12
0bef0     90 C3 B0 FD | 	call	#__system___float_mul
0bef4     A7 FA 61 FC | 	wrlong	result1, fp
0bef8     08 4E 05 F1 | 	add	fp, #8
0befc     A7 3C 68 FC | 	wrlong	#30, fp
0bf00     08 4E 85 F1 | 	sub	fp, #8
0bf04     28 01 90 FD | 	jmp	#LR__0999
0bf08                 | LR__0995
0bf08                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
0bf08     08 4E 05 F1 | 	add	fp, #8
0bf0c     A7 1E 02 FB | 	rdlong	local01, fp
0bf10     08 4E 85 F1 | 	sub	fp, #8
0bf14     1E 1E 0E F2 | 	cmp	local01, #30 wz
0bf18     14 4E 05 A1 |  if_e	add	fp, #20
0bf1c     A7 22 02 AB |  if_e	rdlong	local03, fp
0bf20     14 4E 85 A1 |  if_e	sub	fp, #20
0bf24     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0bf28     28 00 90 5D |  if_ne	jmp	#LR__0996
0bf2c     A7 1E 02 FB | 	rdlong	local01, fp
0bf30     0C 4E 05 F1 | 	add	fp, #12
0bf34     A7 12 02 FB | 	rdlong	arg01, fp
0bf38     0C 4E 85 F1 | 	sub	fp, #12
0bf3c     18 C0 B0 FD | 	call	#__system___float_fromuns
0bf40     FD 14 02 F6 | 	mov	arg02, result1
0bf44     0F 13 02 F6 | 	mov	arg01, local01
0bf48     38 C3 B0 FD | 	call	#__system___float_mul
0bf4c     A7 FA 61 FC | 	wrlong	result1, fp
0bf50     DC 00 90 FD | 	jmp	#LR__0999
0bf54                 | LR__0996
0bf54                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
0bf54     08 4E 05 F1 | 	add	fp, #8
0bf58     A7 1E 02 FB | 	rdlong	local01, fp
0bf5c     08 4E 85 F1 | 	sub	fp, #8
0bf60     1E 1E 0E F2 | 	cmp	local01, #30 wz
0bf64     14 4E 05 A1 |  if_e	add	fp, #20
0bf68     A7 22 02 AB |  if_e	rdlong	local03, fp
0bf6c     14 4E 85 A1 |  if_e	sub	fp, #20
0bf70     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0bf74     38 00 90 5D |  if_ne	jmp	#LR__0997
0bf78     A7 1E 02 FB | 	rdlong	local01, fp
0bf7c     0C 4E 05 F1 | 	add	fp, #12
0bf80     A7 12 02 FB | 	rdlong	arg01, fp
0bf84     0C 4E 85 F1 | 	sub	fp, #12
0bf88     09 13 52 F6 | 	abs	arg01, arg01 wc
0bf8c     1F 26 C6 C9 |  if_b	decod	local05, #31
0bf90     00 26 06 36 |  if_ae	mov	local05, #0
0bf94     C0 BF B0 FD | 	call	#__system___float_fromuns
0bf98     13 FB 61 F5 | 	xor	result1, local05
0bf9c     FD 14 02 F6 | 	mov	arg02, result1
0bfa0     0F 13 02 F6 | 	mov	arg01, local01
0bfa4     DC C2 B0 FD | 	call	#__system___float_mul
0bfa8     A7 FA 61 FC | 	wrlong	result1, fp
0bfac     80 00 90 FD | 	jmp	#LR__0999
0bfb0                 | LR__0997
0bfb0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
0bfb0     08 4E 05 F1 | 	add	fp, #8
0bfb4     A7 1E 02 FB | 	rdlong	local01, fp
0bfb8     08 4E 85 F1 | 	sub	fp, #8
0bfbc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0bfc0     14 4E 05 A1 |  if_e	add	fp, #20
0bfc4     A7 22 02 AB |  if_e	rdlong	local03, fp
0bfc8     14 4E 85 A1 |  if_e	sub	fp, #20
0bfcc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0bfd0     1C 00 90 5D |  if_ne	jmp	#LR__0998
0bfd4     A7 12 02 FB | 	rdlong	arg01, fp
0bfd8     0C 4E 05 F1 | 	add	fp, #12
0bfdc     A7 14 02 FB | 	rdlong	arg02, fp
0bfe0     0C 4E 85 F1 | 	sub	fp, #12
0bfe4     9C C2 B0 FD | 	call	#__system___float_mul
0bfe8     A7 FA 61 FC | 	wrlong	result1, fp
0bfec     40 00 90 FD | 	jmp	#LR__0999
0bff0                 | LR__0998
0bff0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
0bff0     08 4E 05 F1 | 	add	fp, #8
0bff4     A7 1E 02 FB | 	rdlong	local01, fp
0bff8     08 4E 85 F1 | 	sub	fp, #8
0bffc     1F 1E 0E F2 | 	cmp	local01, #31 wz
0c000     14 4E 05 51 |  if_ne	add	fp, #20
0c004     A7 22 02 5B |  if_ne	rdlong	local03, fp
0c008     14 4E 85 51 |  if_ne	sub	fp, #20
0c00c     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0c010     A7 10 68 AC |  if_e	wrlong	#8, fp
0c014     08 4E 05 A1 |  if_e	add	fp, #8
0c018     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c01c     08 4E 85 A1 |  if_e	sub	fp, #8
0c020     A7 12 68 5C |  if_ne	wrlong	#9, fp
0c024     08 4E 05 51 |  if_ne	add	fp, #8
0c028     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0c02c     08 4E 85 51 |  if_ne	sub	fp, #8
0c030                 | LR__0999
0c030     A7 12 02 F6 | 	mov	arg01, fp
0c034     D4 C9 BF FD | 	call	#_push
0c038     A7 F0 03 F6 | 	mov	ptra, fp
0c03c     B2 00 A0 FD | 	call	#popregs_
0c040                 | _do_mul_ret
0c040     2D 00 64 FD | 	ret
0c044                 | 
0c044                 | ' 
0c044                 | ' sub do_div 
0c044                 | _do_div
0c044     01 4A 05 F6 | 	mov	COUNT_, #1
0c048     A8 00 A0 FD | 	call	#pushregs_
0c04c     18 F0 07 F1 | 	add	ptra, #24
0c050     20 C9 BF FD | 	call	#_pop
0c054     FD 60 02 F6 | 	mov	muldivb_, result1
0c058     FE 5E 02 F6 | 	mov	muldiva_, result2
0c05c     FF 1E 02 F6 | 	mov	local01, result3
0c060     0C 4E 05 F1 | 	add	fp, #12
0c064     A7 60 62 FC | 	wrlong	muldivb_, fp
0c068     04 4E 05 F1 | 	add	fp, #4
0c06c     A7 5E 62 FC | 	wrlong	muldiva_, fp
0c070     04 4E 05 F1 | 	add	fp, #4
0c074     A7 1E 62 FC | 	wrlong	local01, fp
0c078     14 4E 85 F1 | 	sub	fp, #20
0c07c     F4 C8 BF FD | 	call	#_pop
0c080     A7 FA 61 FC | 	wrlong	result1, fp
0c084     04 4E 05 F1 | 	add	fp, #4
0c088     A7 FC 61 FC | 	wrlong	result2, fp
0c08c     04 4E 05 F1 | 	add	fp, #4
0c090     A7 FE 61 FC | 	wrlong	result3, fp
0c094                 | ' 
0c094                 | ' t2=pop()
0c094                 | ' t1=pop()
0c094                 | ' 
0c094                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
0c094     08 4E 85 F1 | 	sub	fp, #8
0c098     1F FE 0D F2 | 	cmp	result3, #31 wz
0c09c     14 4E 05 51 |  if_ne	add	fp, #20
0c0a0     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0c0a4     14 4E 85 51 |  if_ne	sub	fp, #20
0c0a8     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0c0ac     A7 14 68 AC |  if_e	wrlong	#10, fp
0c0b0     08 4E 05 A1 |  if_e	add	fp, #8
0c0b4     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c0b8     08 4E 85 A1 |  if_e	sub	fp, #8
0c0bc     90 01 90 AD |  if_e	jmp	#LR__1006
0c0c0                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0c0c0     08 4E 05 F1 | 	add	fp, #8
0c0c4     A7 60 02 FB | 	rdlong	muldivb_, fp
0c0c8     08 4E 85 F1 | 	sub	fp, #8
0c0cc     1E 60 0E F2 | 	cmp	muldivb_, #30 wz
0c0d0     1C 00 90 5D |  if_ne	jmp	#LR__1000
0c0d4     08 4E 05 F1 | 	add	fp, #8
0c0d8     A7 38 68 FC | 	wrlong	#28, fp
0c0dc     08 4E 85 F1 | 	sub	fp, #8
0c0e0     A7 12 02 FB | 	rdlong	arg01, fp
0c0e4     00 14 06 F6 | 	mov	arg02, #0
0c0e8     60 C6 B0 FD | 	call	#__system___float_tointeger
0c0ec     A7 FA 61 FC | 	wrlong	result1, fp
0c0f0                 | LR__1000
0c0f0                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0c0f0     14 4E 05 F1 | 	add	fp, #20
0c0f4     A7 60 02 FB | 	rdlong	muldivb_, fp
0c0f8     14 4E 85 F1 | 	sub	fp, #20
0c0fc     1E 60 0E F2 | 	cmp	muldivb_, #30 wz
0c100     28 00 90 5D |  if_ne	jmp	#LR__1001
0c104     14 4E 05 F1 | 	add	fp, #20
0c108     A7 38 68 FC | 	wrlong	#28, fp
0c10c     08 4E 85 F1 | 	sub	fp, #8
0c110     A7 12 02 FB | 	rdlong	arg01, fp
0c114     0C 4E 85 F1 | 	sub	fp, #12
0c118     00 14 06 F6 | 	mov	arg02, #0
0c11c     2C C6 B0 FD | 	call	#__system___float_tointeger
0c120     0C 4E 05 F1 | 	add	fp, #12
0c124     A7 FA 61 FC | 	wrlong	result1, fp
0c128     0C 4E 85 F1 | 	sub	fp, #12
0c12c                 | LR__1001
0c12c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
0c12c     08 4E 05 F1 | 	add	fp, #8
0c130     A7 60 02 FB | 	rdlong	muldivb_, fp
0c134     08 4E 85 F1 | 	sub	fp, #8
0c138     1D 60 0E F2 | 	cmp	muldivb_, #29 wz
0c13c     14 4E 05 A1 |  if_e	add	fp, #20
0c140     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c144     14 4E 85 A1 |  if_e	sub	fp, #20
0c148     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0c14c     20 00 90 5D |  if_ne	jmp	#LR__1002
0c150     0C 4E 05 F1 | 	add	fp, #12
0c154     A7 1E 02 FB | 	rdlong	local01, fp
0c158     0C 4E 85 F1 | 	sub	fp, #12
0c15c     A7 60 02 FB | 	rdlong	muldivb_, fp
0c160     0F 61 12 FD | 	qdiv	muldivb_, local01
0c164     18 1E 62 FD | 	getqx	local01
0c168     A7 1E 62 FC | 	wrlong	local01, fp
0c16c     E0 00 90 FD | 	jmp	#LR__1006
0c170                 | LR__1002
0c170                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
0c170     08 4E 05 F1 | 	add	fp, #8
0c174     A7 60 02 FB | 	rdlong	muldivb_, fp
0c178     08 4E 85 F1 | 	sub	fp, #8
0c17c     1D 60 0E F2 | 	cmp	muldivb_, #29 wz
0c180     14 4E 05 A1 |  if_e	add	fp, #20
0c184     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c188     14 4E 85 A1 |  if_e	sub	fp, #20
0c18c     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0c190     2C 00 90 5D |  if_ne	jmp	#LR__1003
0c194     0C 4E 05 F1 | 	add	fp, #12
0c198     A7 1E 02 FB | 	rdlong	local01, fp
0c19c     0C 4E 85 F1 | 	sub	fp, #12
0c1a0     A7 60 02 FB | 	rdlong	muldivb_, fp
0c1a4     0F 61 12 FD | 	qdiv	muldivb_, local01
0c1a8     18 1E 62 FD | 	getqx	local01
0c1ac     A7 1E 62 FC | 	wrlong	local01, fp
0c1b0     08 4E 05 F1 | 	add	fp, #8
0c1b4     A7 38 68 FC | 	wrlong	#28, fp
0c1b8     08 4E 85 F1 | 	sub	fp, #8
0c1bc     90 00 90 FD | 	jmp	#LR__1006
0c1c0                 | LR__1003
0c1c0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
0c1c0     08 4E 05 F1 | 	add	fp, #8
0c1c4     A7 60 02 FB | 	rdlong	muldivb_, fp
0c1c8     08 4E 85 F1 | 	sub	fp, #8
0c1cc     1C 60 0E F2 | 	cmp	muldivb_, #28 wz
0c1d0     14 4E 05 A1 |  if_e	add	fp, #20
0c1d4     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c1d8     14 4E 85 A1 |  if_e	sub	fp, #20
0c1dc     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0c1e0     1C 00 90 5D |  if_ne	jmp	#LR__1004
0c1e4     A7 5E 02 FB | 	rdlong	muldiva_, fp
0c1e8     0C 4E 05 F1 | 	add	fp, #12
0c1ec     A7 60 02 FB | 	rdlong	muldivb_, fp
0c1f0     0C 4E 85 F1 | 	sub	fp, #12
0c1f4     BA 00 A0 FD | 	call	#divide_
0c1f8     A7 60 62 FC | 	wrlong	muldivb_, fp
0c1fc     50 00 90 FD | 	jmp	#LR__1006
0c200                 | LR__1004
0c200                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
0c200     08 4E 05 F1 | 	add	fp, #8
0c204     A7 60 02 FB | 	rdlong	muldivb_, fp
0c208     08 4E 85 F1 | 	sub	fp, #8
0c20c     1C 60 0E F2 | 	cmp	muldivb_, #28 wz
0c210     14 4E 05 A1 |  if_e	add	fp, #20
0c214     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c218     14 4E 85 A1 |  if_e	sub	fp, #20
0c21c     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0c220     1C 00 90 5D |  if_ne	jmp	#LR__1005
0c224     A7 5E 02 FB | 	rdlong	muldiva_, fp
0c228     0C 4E 05 F1 | 	add	fp, #12
0c22c     A7 60 02 FB | 	rdlong	muldivb_, fp
0c230     0C 4E 85 F1 | 	sub	fp, #12
0c234     BA 00 A0 FD | 	call	#divide_
0c238     A7 60 62 FC | 	wrlong	muldivb_, fp
0c23c     10 00 90 FD | 	jmp	#LR__1006
0c240                 | LR__1005
0c240     A7 16 68 FC | 	wrlong	#11, fp
0c244     08 4E 05 F1 | 	add	fp, #8
0c248     A7 FE 69 FC | 	wrlong	#255, fp
0c24c     08 4E 85 F1 | 	sub	fp, #8
0c250                 | LR__1006
0c250     A7 12 02 F6 | 	mov	arg01, fp
0c254     B4 C7 BF FD | 	call	#_push
0c258     A7 F0 03 F6 | 	mov	ptra, fp
0c25c     B2 00 A0 FD | 	call	#popregs_
0c260                 | _do_div_ret
0c260     2D 00 64 FD | 	ret
0c264                 | 
0c264                 | ' 
0c264                 | ' sub do_fdiv 
0c264                 | _do_fdiv
0c264     02 4A 05 F6 | 	mov	COUNT_, #2
0c268     A8 00 A0 FD | 	call	#pushregs_
0c26c     18 F0 07 F1 | 	add	ptra, #24
0c270     00 C7 BF FD | 	call	#_pop
0c274     FD 14 02 F6 | 	mov	arg02, result1
0c278     FE 12 02 F6 | 	mov	arg01, result2
0c27c     FF 1E 02 F6 | 	mov	local01, result3
0c280     0C 4E 05 F1 | 	add	fp, #12
0c284     A7 14 62 FC | 	wrlong	arg02, fp
0c288     04 4E 05 F1 | 	add	fp, #4
0c28c     A7 12 62 FC | 	wrlong	arg01, fp
0c290     04 4E 05 F1 | 	add	fp, #4
0c294     A7 1E 62 FC | 	wrlong	local01, fp
0c298     14 4E 85 F1 | 	sub	fp, #20
0c29c     D4 C6 BF FD | 	call	#_pop
0c2a0     A7 FA 61 FC | 	wrlong	result1, fp
0c2a4     04 4E 05 F1 | 	add	fp, #4
0c2a8     A7 FC 61 FC | 	wrlong	result2, fp
0c2ac     04 4E 05 F1 | 	add	fp, #4
0c2b0     A7 FE 61 FC | 	wrlong	result3, fp
0c2b4                 | ' 
0c2b4                 | ' t2=pop()
0c2b4                 | ' t1=pop()
0c2b4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
0c2b4     08 4E 85 F1 | 	sub	fp, #8
0c2b8     1F FE 0D F2 | 	cmp	result3, #31 wz
0c2bc     14 4E 05 51 |  if_ne	add	fp, #20
0c2c0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c2c4     14 4E 85 51 |  if_ne	sub	fp, #20
0c2c8     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0c2cc     A7 14 68 AC |  if_e	wrlong	#10, fp
0c2d0     08 4E 05 A1 |  if_e	add	fp, #8
0c2d4     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c2d8     08 4E 85 A1 |  if_e	sub	fp, #8
0c2dc     38 01 90 AD |  if_e	jmp	#LR__1015
0c2e0                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0c2e0     08 4E 05 F1 | 	add	fp, #8
0c2e4     A7 14 02 FB | 	rdlong	arg02, fp
0c2e8     08 4E 85 F1 | 	sub	fp, #8
0c2ec     1C 14 0E F2 | 	cmp	arg02, #28 wz
0c2f0     28 00 90 5D |  if_ne	jmp	#LR__1010
0c2f4     08 4E 05 F1 | 	add	fp, #8
0c2f8     A7 3C 68 FC | 	wrlong	#30, fp
0c2fc     08 4E 85 F1 | 	sub	fp, #8
0c300     A7 12 02 FB | 	rdlong	arg01, fp
0c304     09 13 52 F6 | 	abs	arg01, arg01 wc
0c308     1F 20 C6 C9 |  if_b	decod	local02, #31
0c30c     00 20 06 36 |  if_ae	mov	local02, #0
0c310     44 BC B0 FD | 	call	#__system___float_fromuns
0c314     10 FB 61 F5 | 	xor	result1, local02
0c318     A7 FA 61 FC | 	wrlong	result1, fp
0c31c                 | LR__1010
0c31c                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
0c31c     08 4E 05 F1 | 	add	fp, #8
0c320     A7 14 02 FB | 	rdlong	arg02, fp
0c324     08 4E 85 F1 | 	sub	fp, #8
0c328     1D 14 0E F2 | 	cmp	arg02, #29 wz
0c32c     18 00 90 5D |  if_ne	jmp	#LR__1011
0c330     08 4E 05 F1 | 	add	fp, #8
0c334     A7 3C 68 FC | 	wrlong	#30, fp
0c338     08 4E 85 F1 | 	sub	fp, #8
0c33c     A7 12 02 FB | 	rdlong	arg01, fp
0c340     14 BC B0 FD | 	call	#__system___float_fromuns
0c344     A7 FA 61 FC | 	wrlong	result1, fp
0c348                 | LR__1011
0c348                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0c348     14 4E 05 F1 | 	add	fp, #20
0c34c     A7 14 02 FB | 	rdlong	arg02, fp
0c350     14 4E 85 F1 | 	sub	fp, #20
0c354     1C 14 0E F2 | 	cmp	arg02, #28 wz
0c358     34 00 90 5D |  if_ne	jmp	#LR__1012
0c35c     14 4E 05 F1 | 	add	fp, #20
0c360     A7 3C 68 FC | 	wrlong	#30, fp
0c364     08 4E 85 F1 | 	sub	fp, #8
0c368     A7 12 02 FB | 	rdlong	arg01, fp
0c36c     0C 4E 85 F1 | 	sub	fp, #12
0c370     09 13 52 F6 | 	abs	arg01, arg01 wc
0c374     1F 20 C6 C9 |  if_b	decod	local02, #31
0c378     00 20 06 36 |  if_ae	mov	local02, #0
0c37c     D8 BB B0 FD | 	call	#__system___float_fromuns
0c380     10 FB 61 F5 | 	xor	result1, local02
0c384     0C 4E 05 F1 | 	add	fp, #12
0c388     A7 FA 61 FC | 	wrlong	result1, fp
0c38c     0C 4E 85 F1 | 	sub	fp, #12
0c390                 | LR__1012
0c390                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0c390     14 4E 05 F1 | 	add	fp, #20
0c394     A7 14 02 FB | 	rdlong	arg02, fp
0c398     14 4E 85 F1 | 	sub	fp, #20
0c39c     1D 14 0E F2 | 	cmp	arg02, #29 wz
0c3a0     24 00 90 5D |  if_ne	jmp	#LR__1013
0c3a4     14 4E 05 F1 | 	add	fp, #20
0c3a8     A7 3C 68 FC | 	wrlong	#30, fp
0c3ac     08 4E 85 F1 | 	sub	fp, #8
0c3b0     A7 12 02 FB | 	rdlong	arg01, fp
0c3b4     0C 4E 85 F1 | 	sub	fp, #12
0c3b8     9C BB B0 FD | 	call	#__system___float_fromuns
0c3bc     0C 4E 05 F1 | 	add	fp, #12
0c3c0     A7 FA 61 FC | 	wrlong	result1, fp
0c3c4     0C 4E 85 F1 | 	sub	fp, #12
0c3c8                 | LR__1013
0c3c8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
0c3c8     08 4E 05 F1 | 	add	fp, #8
0c3cc     A7 14 02 FB | 	rdlong	arg02, fp
0c3d0     08 4E 85 F1 | 	sub	fp, #8
0c3d4     1E 14 0E F2 | 	cmp	arg02, #30 wz
0c3d8     14 4E 05 A1 |  if_e	add	fp, #20
0c3dc     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c3e0     14 4E 85 A1 |  if_e	sub	fp, #20
0c3e4     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0c3e8     1C 00 90 5D |  if_ne	jmp	#LR__1014
0c3ec     A7 12 02 FB | 	rdlong	arg01, fp
0c3f0     0C 4E 05 F1 | 	add	fp, #12
0c3f4     A7 14 02 FB | 	rdlong	arg02, fp
0c3f8     0C 4E 85 F1 | 	sub	fp, #12
0c3fc     88 C0 B0 FD | 	call	#__system___float_div
0c400     A7 FA 61 FC | 	wrlong	result1, fp
0c404     10 00 90 FD | 	jmp	#LR__1015
0c408                 | LR__1014
0c408     A7 16 68 FC | 	wrlong	#11, fp
0c40c     08 4E 05 F1 | 	add	fp, #8
0c410     A7 FE 69 FC | 	wrlong	#255, fp
0c414     08 4E 85 F1 | 	sub	fp, #8
0c418                 | LR__1015
0c418     A7 12 02 F6 | 	mov	arg01, fp
0c41c     EC C5 BF FD | 	call	#_push
0c420     A7 F0 03 F6 | 	mov	ptra, fp
0c424     B2 00 A0 FD | 	call	#popregs_
0c428                 | _do_fdiv_ret
0c428     2D 00 64 FD | 	ret
0c42c                 | 
0c42c                 | ' 
0c42c                 | ' 
0c42c                 | ' sub do_mod 
0c42c                 | _do_mod
0c42c     01 4A 05 F6 | 	mov	COUNT_, #1
0c430     A8 00 A0 FD | 	call	#pushregs_
0c434     18 F0 07 F1 | 	add	ptra, #24
0c438     38 C5 BF FD | 	call	#_pop
0c43c     FD 60 02 F6 | 	mov	muldivb_, result1
0c440     FE 5E 02 F6 | 	mov	muldiva_, result2
0c444     FF 1E 02 F6 | 	mov	local01, result3
0c448     0C 4E 05 F1 | 	add	fp, #12
0c44c     A7 60 62 FC | 	wrlong	muldivb_, fp
0c450     04 4E 05 F1 | 	add	fp, #4
0c454     A7 5E 62 FC | 	wrlong	muldiva_, fp
0c458     04 4E 05 F1 | 	add	fp, #4
0c45c     A7 1E 62 FC | 	wrlong	local01, fp
0c460     14 4E 85 F1 | 	sub	fp, #20
0c464     0C C5 BF FD | 	call	#_pop
0c468     A7 FA 61 FC | 	wrlong	result1, fp
0c46c     04 4E 05 F1 | 	add	fp, #4
0c470     A7 FC 61 FC | 	wrlong	result2, fp
0c474     04 4E 05 F1 | 	add	fp, #4
0c478     A7 FE 61 FC | 	wrlong	result3, fp
0c47c                 | ' 
0c47c                 | ' t2=pop()
0c47c                 | ' t1=pop()
0c47c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
0c47c     08 4E 85 F1 | 	sub	fp, #8
0c480     1F FE 0D F2 | 	cmp	result3, #31 wz
0c484     14 4E 05 51 |  if_ne	add	fp, #20
0c488     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0c48c     14 4E 85 51 |  if_ne	sub	fp, #20
0c490     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0c494     A7 14 68 AC |  if_e	wrlong	#10, fp
0c498     08 4E 05 A1 |  if_e	add	fp, #8
0c49c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c4a0     08 4E 85 A1 |  if_e	sub	fp, #8
0c4a4     90 01 90 AD |  if_e	jmp	#LR__1026
0c4a8                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0c4a8     08 4E 05 F1 | 	add	fp, #8
0c4ac     A7 60 02 FB | 	rdlong	muldivb_, fp
0c4b0     08 4E 85 F1 | 	sub	fp, #8
0c4b4     1E 60 0E F2 | 	cmp	muldivb_, #30 wz
0c4b8     1C 00 90 5D |  if_ne	jmp	#LR__1020
0c4bc     08 4E 05 F1 | 	add	fp, #8
0c4c0     A7 38 68 FC | 	wrlong	#28, fp
0c4c4     08 4E 85 F1 | 	sub	fp, #8
0c4c8     A7 12 02 FB | 	rdlong	arg01, fp
0c4cc     00 14 06 F6 | 	mov	arg02, #0
0c4d0     78 C2 B0 FD | 	call	#__system___float_tointeger
0c4d4     A7 FA 61 FC | 	wrlong	result1, fp
0c4d8                 | LR__1020
0c4d8                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0c4d8     14 4E 05 F1 | 	add	fp, #20
0c4dc     A7 60 02 FB | 	rdlong	muldivb_, fp
0c4e0     14 4E 85 F1 | 	sub	fp, #20
0c4e4     1E 60 0E F2 | 	cmp	muldivb_, #30 wz
0c4e8     28 00 90 5D |  if_ne	jmp	#LR__1021
0c4ec     14 4E 05 F1 | 	add	fp, #20
0c4f0     A7 38 68 FC | 	wrlong	#28, fp
0c4f4     08 4E 85 F1 | 	sub	fp, #8
0c4f8     A7 12 02 FB | 	rdlong	arg01, fp
0c4fc     0C 4E 85 F1 | 	sub	fp, #12
0c500     00 14 06 F6 | 	mov	arg02, #0
0c504     44 C2 B0 FD | 	call	#__system___float_tointeger
0c508     0C 4E 05 F1 | 	add	fp, #12
0c50c     A7 FA 61 FC | 	wrlong	result1, fp
0c510     0C 4E 85 F1 | 	sub	fp, #12
0c514                 | LR__1021
0c514                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
0c514     08 4E 05 F1 | 	add	fp, #8
0c518     A7 60 02 FB | 	rdlong	muldivb_, fp
0c51c     08 4E 85 F1 | 	sub	fp, #8
0c520     1D 60 0E F2 | 	cmp	muldivb_, #29 wz
0c524     14 4E 05 A1 |  if_e	add	fp, #20
0c528     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c52c     14 4E 85 A1 |  if_e	sub	fp, #20
0c530     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0c534     20 00 90 5D |  if_ne	jmp	#LR__1022
0c538     0C 4E 05 F1 | 	add	fp, #12
0c53c     A7 1E 02 FB | 	rdlong	local01, fp
0c540     0C 4E 85 F1 | 	sub	fp, #12
0c544     A7 60 02 FB | 	rdlong	muldivb_, fp
0c548     0F 61 12 FD | 	qdiv	muldivb_, local01
0c54c     19 1E 62 FD | 	getqy	local01
0c550     A7 1E 62 FC | 	wrlong	local01, fp
0c554     E0 00 90 FD | 	jmp	#LR__1026
0c558                 | LR__1022
0c558                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
0c558     08 4E 05 F1 | 	add	fp, #8
0c55c     A7 60 02 FB | 	rdlong	muldivb_, fp
0c560     08 4E 85 F1 | 	sub	fp, #8
0c564     1D 60 0E F2 | 	cmp	muldivb_, #29 wz
0c568     14 4E 05 A1 |  if_e	add	fp, #20
0c56c     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c570     14 4E 85 A1 |  if_e	sub	fp, #20
0c574     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0c578     2C 00 90 5D |  if_ne	jmp	#LR__1023
0c57c     0C 4E 05 F1 | 	add	fp, #12
0c580     A7 1E 02 FB | 	rdlong	local01, fp
0c584     0C 4E 85 F1 | 	sub	fp, #12
0c588     A7 60 02 FB | 	rdlong	muldivb_, fp
0c58c     0F 61 12 FD | 	qdiv	muldivb_, local01
0c590     19 1E 62 FD | 	getqy	local01
0c594     A7 1E 62 FC | 	wrlong	local01, fp
0c598     08 4E 05 F1 | 	add	fp, #8
0c59c     A7 38 68 FC | 	wrlong	#28, fp
0c5a0     08 4E 85 F1 | 	sub	fp, #8
0c5a4     90 00 90 FD | 	jmp	#LR__1026
0c5a8                 | LR__1023
0c5a8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
0c5a8     08 4E 05 F1 | 	add	fp, #8
0c5ac     A7 60 02 FB | 	rdlong	muldivb_, fp
0c5b0     08 4E 85 F1 | 	sub	fp, #8
0c5b4     1C 60 0E F2 | 	cmp	muldivb_, #28 wz
0c5b8     14 4E 05 A1 |  if_e	add	fp, #20
0c5bc     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c5c0     14 4E 85 A1 |  if_e	sub	fp, #20
0c5c4     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0c5c8     1C 00 90 5D |  if_ne	jmp	#LR__1024
0c5cc     A7 5E 02 FB | 	rdlong	muldiva_, fp
0c5d0     0C 4E 05 F1 | 	add	fp, #12
0c5d4     A7 60 02 FB | 	rdlong	muldivb_, fp
0c5d8     0C 4E 85 F1 | 	sub	fp, #12
0c5dc     BA 00 A0 FD | 	call	#divide_
0c5e0     A7 5E 62 FC | 	wrlong	muldiva_, fp
0c5e4     50 00 90 FD | 	jmp	#LR__1026
0c5e8                 | LR__1024
0c5e8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
0c5e8     08 4E 05 F1 | 	add	fp, #8
0c5ec     A7 60 02 FB | 	rdlong	muldivb_, fp
0c5f0     08 4E 85 F1 | 	sub	fp, #8
0c5f4     1C 60 0E F2 | 	cmp	muldivb_, #28 wz
0c5f8     14 4E 05 A1 |  if_e	add	fp, #20
0c5fc     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c600     14 4E 85 A1 |  if_e	sub	fp, #20
0c604     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0c608     1C 00 90 5D |  if_ne	jmp	#LR__1025
0c60c     A7 5E 02 FB | 	rdlong	muldiva_, fp
0c610     0C 4E 05 F1 | 	add	fp, #12
0c614     A7 60 02 FB | 	rdlong	muldivb_, fp
0c618     0C 4E 85 F1 | 	sub	fp, #12
0c61c     BA 00 A0 FD | 	call	#divide_
0c620     A7 5E 62 FC | 	wrlong	muldiva_, fp
0c624     10 00 90 FD | 	jmp	#LR__1026
0c628                 | LR__1025
0c628     A7 16 68 FC | 	wrlong	#11, fp
0c62c     08 4E 05 F1 | 	add	fp, #8
0c630     A7 FE 69 FC | 	wrlong	#255, fp
0c634     08 4E 85 F1 | 	sub	fp, #8
0c638                 | LR__1026
0c638     A7 12 02 F6 | 	mov	arg01, fp
0c63c     CC C3 BF FD | 	call	#_push
0c640     A7 F0 03 F6 | 	mov	ptra, fp
0c644     B2 00 A0 FD | 	call	#popregs_
0c648                 | _do_mod_ret
0c648     2D 00 64 FD | 	ret
0c64c                 | 
0c64c                 | ' 
0c64c                 | ' sub do_shl 
0c64c                 | _do_shl
0c64c     03 4A 05 F6 | 	mov	COUNT_, #3
0c650     A8 00 A0 FD | 	call	#pushregs_
0c654     18 F0 07 F1 | 	add	ptra, #24
0c658     18 C3 BF FD | 	call	#_pop
0c65c     FD 12 02 F6 | 	mov	arg01, result1
0c660     FE 1E 02 F6 | 	mov	local01, result2
0c664     FF 20 02 F6 | 	mov	local02, result3
0c668     0C 4E 05 F1 | 	add	fp, #12
0c66c     A7 12 62 FC | 	wrlong	arg01, fp
0c670     04 4E 05 F1 | 	add	fp, #4
0c674     A7 1E 62 FC | 	wrlong	local01, fp
0c678     04 4E 05 F1 | 	add	fp, #4
0c67c     A7 20 62 FC | 	wrlong	local02, fp
0c680     14 4E 85 F1 | 	sub	fp, #20
0c684     EC C2 BF FD | 	call	#_pop
0c688     FF 22 02 F6 | 	mov	local03, result3
0c68c     A7 FA 61 FC | 	wrlong	result1, fp
0c690     04 4E 05 F1 | 	add	fp, #4
0c694     A7 FC 61 FC | 	wrlong	result2, fp
0c698     04 4E 05 F1 | 	add	fp, #4
0c69c     A7 22 62 FC | 	wrlong	local03, fp
0c6a0                 | ' 
0c6a0                 | ' t2=pop()
0c6a0                 | ' t1=pop()
0c6a0                 | ' 
0c6a0                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0c6a0     08 4E 85 F1 | 	sub	fp, #8
0c6a4     1C 22 0E F2 | 	cmp	local03, #28 wz
0c6a8     A7 22 02 AB |  if_e	rdlong	local03, fp
0c6ac     A7 22 62 AC |  if_e	wrlong	local03, fp
0c6b0     08 4E 05 A1 |  if_e	add	fp, #8
0c6b4     A7 3A 68 AC |  if_e	wrlong	#29, fp
0c6b8     08 4E 85 A1 |  if_e	sub	fp, #8
0c6bc                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0c6bc     14 4E 05 F1 | 	add	fp, #20
0c6c0     A7 22 02 FB | 	rdlong	local03, fp
0c6c4     14 4E 85 F1 | 	sub	fp, #20
0c6c8     1C 22 0E F2 | 	cmp	local03, #28 wz
0c6cc     18 00 90 5D |  if_ne	jmp	#LR__1030
0c6d0     0C 4E 05 F1 | 	add	fp, #12
0c6d4     A7 22 02 FB | 	rdlong	local03, fp
0c6d8     A7 22 62 FC | 	wrlong	local03, fp
0c6dc     08 4E 05 F1 | 	add	fp, #8
0c6e0     A7 3A 68 FC | 	wrlong	#29, fp
0c6e4     14 4E 85 F1 | 	sub	fp, #20
0c6e8                 | LR__1030
0c6e8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
0c6e8     08 4E 05 F1 | 	add	fp, #8
0c6ec     A7 22 02 FB | 	rdlong	local03, fp
0c6f0     08 4E 85 F1 | 	sub	fp, #8
0c6f4     1F 22 0E F2 | 	cmp	local03, #31 wz
0c6f8     14 4E 05 51 |  if_ne	add	fp, #20
0c6fc     A7 20 02 5B |  if_ne	rdlong	local02, fp
0c700     14 4E 85 51 |  if_ne	sub	fp, #20
0c704     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0c708     08 4E 05 51 |  if_ne	add	fp, #8
0c70c     A7 22 02 5B |  if_ne	rdlong	local03, fp
0c710     08 4E 85 51 |  if_ne	sub	fp, #8
0c714     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0c718     14 4E 05 51 |  if_ne	add	fp, #20
0c71c     14 4E 85 51 |  if_ne	sub	fp, #20
0c720     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0c724     A7 0C 68 AC |  if_e	wrlong	#6, fp
0c728     08 4E 05 A1 |  if_e	add	fp, #8
0c72c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c730     08 4E 85 A1 |  if_e	sub	fp, #8
0c734     18 00 90 AD |  if_e	jmp	#LR__1031
0c738     A7 22 02 FB | 	rdlong	local03, fp
0c73c     0C 4E 05 F1 | 	add	fp, #12
0c740     A7 1E 02 FB | 	rdlong	local01, fp
0c744     0C 4E 85 F1 | 	sub	fp, #12
0c748     0F 23 62 F0 | 	shl	local03, local01
0c74c     A7 22 62 FC | 	wrlong	local03, fp
0c750                 | LR__1031
0c750     A7 12 02 F6 | 	mov	arg01, fp
0c754     B4 C2 BF FD | 	call	#_push
0c758     A7 F0 03 F6 | 	mov	ptra, fp
0c75c     B2 00 A0 FD | 	call	#popregs_
0c760                 | _do_shl_ret
0c760     2D 00 64 FD | 	ret
0c764                 | 
0c764                 | ' 
0c764                 | ' sub do_shr 
0c764                 | _do_shr
0c764     03 4A 05 F6 | 	mov	COUNT_, #3
0c768     A8 00 A0 FD | 	call	#pushregs_
0c76c     18 F0 07 F1 | 	add	ptra, #24
0c770     00 C2 BF FD | 	call	#_pop
0c774     FD 12 02 F6 | 	mov	arg01, result1
0c778     FE 1E 02 F6 | 	mov	local01, result2
0c77c     FF 20 02 F6 | 	mov	local02, result3
0c780     0C 4E 05 F1 | 	add	fp, #12
0c784     A7 12 62 FC | 	wrlong	arg01, fp
0c788     04 4E 05 F1 | 	add	fp, #4
0c78c     A7 1E 62 FC | 	wrlong	local01, fp
0c790     04 4E 05 F1 | 	add	fp, #4
0c794     A7 20 62 FC | 	wrlong	local02, fp
0c798     14 4E 85 F1 | 	sub	fp, #20
0c79c     D4 C1 BF FD | 	call	#_pop
0c7a0     FF 22 02 F6 | 	mov	local03, result3
0c7a4     A7 FA 61 FC | 	wrlong	result1, fp
0c7a8     04 4E 05 F1 | 	add	fp, #4
0c7ac     A7 FC 61 FC | 	wrlong	result2, fp
0c7b0     04 4E 05 F1 | 	add	fp, #4
0c7b4     A7 22 62 FC | 	wrlong	local03, fp
0c7b8                 | ' t2=pop()
0c7b8                 | ' t1=pop()
0c7b8                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0c7b8     08 4E 85 F1 | 	sub	fp, #8
0c7bc     1C 22 0E F2 | 	cmp	local03, #28 wz
0c7c0     A7 22 02 AB |  if_e	rdlong	local03, fp
0c7c4     A7 22 62 AC |  if_e	wrlong	local03, fp
0c7c8     08 4E 05 A1 |  if_e	add	fp, #8
0c7cc     A7 3A 68 AC |  if_e	wrlong	#29, fp
0c7d0     08 4E 85 A1 |  if_e	sub	fp, #8
0c7d4                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0c7d4     14 4E 05 F1 | 	add	fp, #20
0c7d8     A7 22 02 FB | 	rdlong	local03, fp
0c7dc     14 4E 85 F1 | 	sub	fp, #20
0c7e0     1C 22 0E F2 | 	cmp	local03, #28 wz
0c7e4     18 00 90 5D |  if_ne	jmp	#LR__1040
0c7e8     0C 4E 05 F1 | 	add	fp, #12
0c7ec     A7 22 02 FB | 	rdlong	local03, fp
0c7f0     A7 22 62 FC | 	wrlong	local03, fp
0c7f4     08 4E 05 F1 | 	add	fp, #8
0c7f8     A7 3A 68 FC | 	wrlong	#29, fp
0c7fc     14 4E 85 F1 | 	sub	fp, #20
0c800                 | LR__1040
0c800                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
0c800     08 4E 05 F1 | 	add	fp, #8
0c804     A7 22 02 FB | 	rdlong	local03, fp
0c808     08 4E 85 F1 | 	sub	fp, #8
0c80c     1F 22 0E F2 | 	cmp	local03, #31 wz
0c810     14 4E 05 51 |  if_ne	add	fp, #20
0c814     A7 20 02 5B |  if_ne	rdlong	local02, fp
0c818     14 4E 85 51 |  if_ne	sub	fp, #20
0c81c     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0c820     08 4E 05 51 |  if_ne	add	fp, #8
0c824     A7 22 02 5B |  if_ne	rdlong	local03, fp
0c828     08 4E 85 51 |  if_ne	sub	fp, #8
0c82c     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0c830     14 4E 05 51 |  if_ne	add	fp, #20
0c834     14 4E 85 51 |  if_ne	sub	fp, #20
0c838     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0c83c     A7 0C 68 AC |  if_e	wrlong	#6, fp
0c840     08 4E 05 A1 |  if_e	add	fp, #8
0c844     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c848     08 4E 85 A1 |  if_e	sub	fp, #8
0c84c     18 00 90 AD |  if_e	jmp	#LR__1041
0c850     A7 22 02 FB | 	rdlong	local03, fp
0c854     0C 4E 05 F1 | 	add	fp, #12
0c858     A7 1E 02 FB | 	rdlong	local01, fp
0c85c     0C 4E 85 F1 | 	sub	fp, #12
0c860     0F 23 42 F0 | 	shr	local03, local01
0c864     A7 22 62 FC | 	wrlong	local03, fp
0c868                 | LR__1041
0c868     A7 12 02 F6 | 	mov	arg01, fp
0c86c     9C C1 BF FD | 	call	#_push
0c870     A7 F0 03 F6 | 	mov	ptra, fp
0c874     B2 00 A0 FD | 	call	#popregs_
0c878                 | _do_shr_ret
0c878     2D 00 64 FD | 	ret
0c87c                 | 
0c87c                 | ' 
0c87c                 | ' sub do_power 
0c87c                 | _do_power
0c87c     02 4A 05 F6 | 	mov	COUNT_, #2
0c880     A8 00 A0 FD | 	call	#pushregs_
0c884     18 F0 07 F1 | 	add	ptra, #24
0c888     E8 C0 BF FD | 	call	#_pop
0c88c     FD 14 02 F6 | 	mov	arg02, result1
0c890     FE 12 02 F6 | 	mov	arg01, result2
0c894     FF 1E 02 F6 | 	mov	local01, result3
0c898     0C 4E 05 F1 | 	add	fp, #12
0c89c     A7 14 62 FC | 	wrlong	arg02, fp
0c8a0     04 4E 05 F1 | 	add	fp, #4
0c8a4     A7 12 62 FC | 	wrlong	arg01, fp
0c8a8     04 4E 05 F1 | 	add	fp, #4
0c8ac     A7 1E 62 FC | 	wrlong	local01, fp
0c8b0     14 4E 85 F1 | 	sub	fp, #20
0c8b4     BC C0 BF FD | 	call	#_pop
0c8b8     A7 FA 61 FC | 	wrlong	result1, fp
0c8bc     04 4E 05 F1 | 	add	fp, #4
0c8c0     A7 FC 61 FC | 	wrlong	result2, fp
0c8c4     04 4E 05 F1 | 	add	fp, #4
0c8c8     A7 FE 61 FC | 	wrlong	result3, fp
0c8cc                 | ' t2=pop()
0c8cc                 | ' t1=pop()
0c8cc                 | ' 
0c8cc                 | ' 
0c8cc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
0c8cc     08 4E 85 F1 | 	sub	fp, #8
0c8d0     1F FE 0D F2 | 	cmp	result3, #31 wz
0c8d4     14 4E 05 51 |  if_ne	add	fp, #20
0c8d8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c8dc     14 4E 85 51 |  if_ne	sub	fp, #20
0c8e0     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0c8e4     A7 18 68 AC |  if_e	wrlong	#12, fp
0c8e8     08 4E 05 A1 |  if_e	add	fp, #8
0c8ec     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c8f0     08 4E 85 A1 |  if_e	sub	fp, #8
0c8f4     38 01 90 AD |  if_e	jmp	#LR__1055
0c8f8                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0c8f8     08 4E 05 F1 | 	add	fp, #8
0c8fc     A7 14 02 FB | 	rdlong	arg02, fp
0c900     08 4E 85 F1 | 	sub	fp, #8
0c904     1C 14 0E F2 | 	cmp	arg02, #28 wz
0c908     28 00 90 5D |  if_ne	jmp	#LR__1050
0c90c     08 4E 05 F1 | 	add	fp, #8
0c910     A7 3C 68 FC | 	wrlong	#30, fp
0c914     08 4E 85 F1 | 	sub	fp, #8
0c918     A7 12 02 FB | 	rdlong	arg01, fp
0c91c     09 13 52 F6 | 	abs	arg01, arg01 wc
0c920     1F 20 C6 C9 |  if_b	decod	local02, #31
0c924     00 20 06 36 |  if_ae	mov	local02, #0
0c928     2C B6 B0 FD | 	call	#__system___float_fromuns
0c92c     10 FB 61 F5 | 	xor	result1, local02
0c930     A7 FA 61 FC | 	wrlong	result1, fp
0c934                 | LR__1050
0c934                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
0c934     08 4E 05 F1 | 	add	fp, #8
0c938     A7 14 02 FB | 	rdlong	arg02, fp
0c93c     08 4E 85 F1 | 	sub	fp, #8
0c940     1D 14 0E F2 | 	cmp	arg02, #29 wz
0c944     18 00 90 5D |  if_ne	jmp	#LR__1051
0c948     08 4E 05 F1 | 	add	fp, #8
0c94c     A7 3C 68 FC | 	wrlong	#30, fp
0c950     08 4E 85 F1 | 	sub	fp, #8
0c954     A7 12 02 FB | 	rdlong	arg01, fp
0c958     FC B5 B0 FD | 	call	#__system___float_fromuns
0c95c     A7 FA 61 FC | 	wrlong	result1, fp
0c960                 | LR__1051
0c960                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0c960     14 4E 05 F1 | 	add	fp, #20
0c964     A7 14 02 FB | 	rdlong	arg02, fp
0c968     14 4E 85 F1 | 	sub	fp, #20
0c96c     1C 14 0E F2 | 	cmp	arg02, #28 wz
0c970     34 00 90 5D |  if_ne	jmp	#LR__1052
0c974     14 4E 05 F1 | 	add	fp, #20
0c978     A7 3C 68 FC | 	wrlong	#30, fp
0c97c     08 4E 85 F1 | 	sub	fp, #8
0c980     A7 12 02 FB | 	rdlong	arg01, fp
0c984     0C 4E 85 F1 | 	sub	fp, #12
0c988     09 13 52 F6 | 	abs	arg01, arg01 wc
0c98c     1F 20 C6 C9 |  if_b	decod	local02, #31
0c990     00 20 06 36 |  if_ae	mov	local02, #0
0c994     C0 B5 B0 FD | 	call	#__system___float_fromuns
0c998     10 FB 61 F5 | 	xor	result1, local02
0c99c     0C 4E 05 F1 | 	add	fp, #12
0c9a0     A7 FA 61 FC | 	wrlong	result1, fp
0c9a4     0C 4E 85 F1 | 	sub	fp, #12
0c9a8                 | LR__1052
0c9a8                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0c9a8     14 4E 05 F1 | 	add	fp, #20
0c9ac     A7 14 02 FB | 	rdlong	arg02, fp
0c9b0     14 4E 85 F1 | 	sub	fp, #20
0c9b4     1D 14 0E F2 | 	cmp	arg02, #29 wz
0c9b8     24 00 90 5D |  if_ne	jmp	#LR__1053
0c9bc     14 4E 05 F1 | 	add	fp, #20
0c9c0     A7 3C 68 FC | 	wrlong	#30, fp
0c9c4     08 4E 85 F1 | 	sub	fp, #8
0c9c8     A7 12 02 FB | 	rdlong	arg01, fp
0c9cc     0C 4E 85 F1 | 	sub	fp, #12
0c9d0     84 B5 B0 FD | 	call	#__system___float_fromuns
0c9d4     0C 4E 05 F1 | 	add	fp, #12
0c9d8     A7 FA 61 FC | 	wrlong	result1, fp
0c9dc     0C 4E 85 F1 | 	sub	fp, #12
0c9e0                 | LR__1053
0c9e0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
0c9e0     08 4E 05 F1 | 	add	fp, #8
0c9e4     A7 14 02 FB | 	rdlong	arg02, fp
0c9e8     08 4E 85 F1 | 	sub	fp, #8
0c9ec     1E 14 0E F2 | 	cmp	arg02, #30 wz
0c9f0     14 4E 05 A1 |  if_e	add	fp, #20
0c9f4     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c9f8     14 4E 85 A1 |  if_e	sub	fp, #20
0c9fc     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0ca00     1C 00 90 5D |  if_ne	jmp	#LR__1054
0ca04     A7 12 02 FB | 	rdlong	arg01, fp
0ca08     0C 4E 05 F1 | 	add	fp, #12
0ca0c     A7 14 02 FB | 	rdlong	arg02, fp
0ca10     0C 4E 85 F1 | 	sub	fp, #12
0ca14     D8 C4 B0 FD | 	call	#__system____builtin_powf
0ca18     A7 FA 61 FC | 	wrlong	result1, fp
0ca1c     10 00 90 FD | 	jmp	#LR__1055
0ca20                 | LR__1054
0ca20     A7 1A 68 FC | 	wrlong	#13, fp
0ca24     08 4E 05 F1 | 	add	fp, #8
0ca28     A7 FE 69 FC | 	wrlong	#255, fp
0ca2c     08 4E 85 F1 | 	sub	fp, #8
0ca30                 | LR__1055
0ca30     A7 12 02 F6 | 	mov	arg01, fp
0ca34     D4 BF BF FD | 	call	#_push
0ca38     A7 F0 03 F6 | 	mov	ptra, fp
0ca3c     B2 00 A0 FD | 	call	#popregs_
0ca40                 | _do_power_ret
0ca40     2D 00 64 FD | 	ret
0ca44                 | 
0ca44                 | ' 
0ca44                 | ' 
0ca44                 | ' sub do_eq
0ca44                 | _do_eq
0ca44     05 4A 05 F6 | 	mov	COUNT_, #5
0ca48     A8 00 A0 FD | 	call	#pushregs_
0ca4c     18 F0 07 F1 | 	add	ptra, #24
0ca50     20 BF BF FD | 	call	#_pop
0ca54     FD 1E 02 F6 | 	mov	local01, result1
0ca58     FE 20 02 F6 | 	mov	local02, result2
0ca5c     FF 22 02 F6 | 	mov	local03, result3
0ca60     0C 4E 05 F1 | 	add	fp, #12
0ca64     A7 1E 62 FC | 	wrlong	local01, fp
0ca68     04 4E 05 F1 | 	add	fp, #4
0ca6c     A7 20 62 FC | 	wrlong	local02, fp
0ca70     04 4E 05 F1 | 	add	fp, #4
0ca74     A7 22 62 FC | 	wrlong	local03, fp
0ca78     14 4E 85 F1 | 	sub	fp, #20
0ca7c     F4 BE BF FD | 	call	#_pop
0ca80     FF 22 02 F6 | 	mov	local03, result3
0ca84     A7 FA 61 FC | 	wrlong	result1, fp
0ca88     04 4E 05 F1 | 	add	fp, #4
0ca8c     A7 FC 61 FC | 	wrlong	result2, fp
0ca90     04 4E 05 F1 | 	add	fp, #4
0ca94     A7 22 62 FC | 	wrlong	local03, fp
0ca98                 | ' t2=pop()
0ca98                 | ' t1=pop()
0ca98                 | ' 
0ca98                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
0ca98     08 4E 85 F1 | 	sub	fp, #8
0ca9c     1F 22 0E F2 | 	cmp	local03, #31 wz
0caa0     14 4E 05 A1 |  if_e	add	fp, #20
0caa4     A7 24 02 AB |  if_e	rdlong	local04, fp
0caa8     14 4E 85 A1 |  if_e	sub	fp, #20
0caac     12 23 02 A6 |  if_e	mov	local03, local04
0cab0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0cab4     28 00 90 5D |  if_ne	jmp	#LR__1060
0cab8     00 1E 06 F6 | 	mov	local01, #0
0cabc     A7 12 02 FB | 	rdlong	arg01, fp
0cac0     0C 4E 05 F1 | 	add	fp, #12
0cac4     A7 14 02 FB | 	rdlong	arg02, fp
0cac8     0C 4E 85 F1 | 	sub	fp, #12
0cacc     C8 8D B0 FD | 	call	#__system___string_cmp
0cad0     00 FA 0D F2 | 	cmp	result1, #0 wz
0cad4     00 1E 26 A6 |  if_e	not	local01, #0
0cad8     A7 1E 62 FC | 	wrlong	local01, fp
0cadc     04 03 90 FD | 	jmp	#LR__1070
0cae0                 | LR__1060
0cae0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
0cae0     08 4E 05 F1 | 	add	fp, #8
0cae4     A7 1E 02 FB | 	rdlong	local01, fp
0cae8     08 4E 85 F1 | 	sub	fp, #8
0caec     1E 1E 0E F2 | 	cmp	local01, #30 wz
0caf0     14 4E 05 A1 |  if_e	add	fp, #20
0caf4     A7 24 02 AB |  if_e	rdlong	local04, fp
0caf8     14 4E 85 A1 |  if_e	sub	fp, #20
0cafc     12 23 02 A6 |  if_e	mov	local03, local04
0cb00     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0cb04     2C 00 90 5D |  if_ne	jmp	#LR__1061
0cb08     00 1E 06 F6 | 	mov	local01, #0
0cb0c     A7 12 02 FB | 	rdlong	arg01, fp
0cb10     0C 4E 05 F1 | 	add	fp, #12
0cb14     A7 14 02 FB | 	rdlong	arg02, fp
0cb18     0C 4E 85 F1 | 	sub	fp, #12
0cb1c     01 16 06 F6 | 	mov	arg03, #1
0cb20     94 BB B0 FD | 	call	#__system___float_cmp
0cb24     00 FA 0D F2 | 	cmp	result1, #0 wz
0cb28     00 1E 26 A6 |  if_e	not	local01, #0
0cb2c     A7 1E 62 FC | 	wrlong	local01, fp
0cb30     B0 02 90 FD | 	jmp	#LR__1070
0cb34                 | LR__1061
0cb34                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
0cb34     08 4E 05 F1 | 	add	fp, #8
0cb38     A7 1E 02 FB | 	rdlong	local01, fp
0cb3c     08 4E 85 F1 | 	sub	fp, #8
0cb40     1E 1E 0E F2 | 	cmp	local01, #30 wz
0cb44     14 4E 05 A1 |  if_e	add	fp, #20
0cb48     A7 24 02 AB |  if_e	rdlong	local04, fp
0cb4c     14 4E 85 A1 |  if_e	sub	fp, #20
0cb50     12 23 02 A6 |  if_e	mov	local03, local04
0cb54     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0cb58     48 00 90 5D |  if_ne	jmp	#LR__1062
0cb5c     00 1E 06 F6 | 	mov	local01, #0
0cb60     A7 20 02 FB | 	rdlong	local02, fp
0cb64     0C 4E 05 F1 | 	add	fp, #12
0cb68     A7 12 02 FB | 	rdlong	arg01, fp
0cb6c     0C 4E 85 F1 | 	sub	fp, #12
0cb70     09 13 52 F6 | 	abs	arg01, arg01 wc
0cb74     1F 26 C6 C9 |  if_b	decod	local05, #31
0cb78     00 26 06 36 |  if_ae	mov	local05, #0
0cb7c     D8 B3 B0 FD | 	call	#__system___float_fromuns
0cb80     13 FB 61 F5 | 	xor	result1, local05
0cb84     FD 14 02 F6 | 	mov	arg02, result1
0cb88     10 13 02 F6 | 	mov	arg01, local02
0cb8c     01 16 06 F6 | 	mov	arg03, #1
0cb90     24 BB B0 FD | 	call	#__system___float_cmp
0cb94     00 FA 0D F2 | 	cmp	result1, #0 wz
0cb98     00 1E 26 A6 |  if_e	not	local01, #0
0cb9c     A7 1E 62 FC | 	wrlong	local01, fp
0cba0     40 02 90 FD | 	jmp	#LR__1070
0cba4                 | LR__1062
0cba4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
0cba4     08 4E 05 F1 | 	add	fp, #8
0cba8     A7 1E 02 FB | 	rdlong	local01, fp
0cbac     08 4E 85 F1 | 	sub	fp, #8
0cbb0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0cbb4     14 4E 05 A1 |  if_e	add	fp, #20
0cbb8     A7 24 02 AB |  if_e	rdlong	local04, fp
0cbbc     14 4E 85 A1 |  if_e	sub	fp, #20
0cbc0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0cbc4     38 00 90 5D |  if_ne	jmp	#LR__1063
0cbc8     00 1E 06 F6 | 	mov	local01, #0
0cbcc     A7 20 02 FB | 	rdlong	local02, fp
0cbd0     0C 4E 05 F1 | 	add	fp, #12
0cbd4     A7 12 02 FB | 	rdlong	arg01, fp
0cbd8     0C 4E 85 F1 | 	sub	fp, #12
0cbdc     78 B3 B0 FD | 	call	#__system___float_fromuns
0cbe0     FD 14 02 F6 | 	mov	arg02, result1
0cbe4     10 13 02 F6 | 	mov	arg01, local02
0cbe8     01 16 06 F6 | 	mov	arg03, #1
0cbec     C8 BA B0 FD | 	call	#__system___float_cmp
0cbf0     00 FA 0D F2 | 	cmp	result1, #0 wz
0cbf4     00 1E 26 A6 |  if_e	not	local01, #0
0cbf8     A7 1E 62 FC | 	wrlong	local01, fp
0cbfc     E4 01 90 FD | 	jmp	#LR__1070
0cc00                 | LR__1063
0cc00                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
0cc00     08 4E 05 F1 | 	add	fp, #8
0cc04     A7 1E 02 FB | 	rdlong	local01, fp
0cc08     08 4E 85 F1 | 	sub	fp, #8
0cc0c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0cc10     14 4E 05 A1 |  if_e	add	fp, #20
0cc14     A7 22 02 AB |  if_e	rdlong	local03, fp
0cc18     14 4E 85 A1 |  if_e	sub	fp, #20
0cc1c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0cc20     44 00 90 5D |  if_ne	jmp	#LR__1064
0cc24     00 1E 06 F6 | 	mov	local01, #0
0cc28     A7 12 02 FB | 	rdlong	arg01, fp
0cc2c     09 13 52 F6 | 	abs	arg01, arg01 wc
0cc30     1F 26 C6 C9 |  if_b	decod	local05, #31
0cc34     00 26 06 36 |  if_ae	mov	local05, #0
0cc38     1C B3 B0 FD | 	call	#__system___float_fromuns
0cc3c     13 FB 61 F5 | 	xor	result1, local05
0cc40     FD 12 02 F6 | 	mov	arg01, result1
0cc44     0C 4E 05 F1 | 	add	fp, #12
0cc48     A7 14 02 FB | 	rdlong	arg02, fp
0cc4c     0C 4E 85 F1 | 	sub	fp, #12
0cc50     01 16 06 F6 | 	mov	arg03, #1
0cc54     60 BA B0 FD | 	call	#__system___float_cmp
0cc58     00 FA 0D F2 | 	cmp	result1, #0 wz
0cc5c     00 1E 26 A6 |  if_e	not	local01, #0
0cc60     A7 1E 62 FC | 	wrlong	local01, fp
0cc64     7C 01 90 FD | 	jmp	#LR__1070
0cc68                 | LR__1064
0cc68                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
0cc68     08 4E 05 F1 | 	add	fp, #8
0cc6c     A7 1E 02 FB | 	rdlong	local01, fp
0cc70     08 4E 85 F1 | 	sub	fp, #8
0cc74     1C 1E 0E F2 | 	cmp	local01, #28 wz
0cc78     14 4E 05 A1 |  if_e	add	fp, #20
0cc7c     A7 22 02 AB |  if_e	rdlong	local03, fp
0cc80     14 4E 85 A1 |  if_e	sub	fp, #20
0cc84     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0cc88     24 00 90 5D |  if_ne	jmp	#LR__1065
0cc8c     00 1E 06 F6 | 	mov	local01, #0
0cc90     A7 20 02 FB | 	rdlong	local02, fp
0cc94     0C 4E 05 F1 | 	add	fp, #12
0cc98     A7 22 02 FB | 	rdlong	local03, fp
0cc9c     0C 4E 85 F1 | 	sub	fp, #12
0cca0     11 21 0A F2 | 	cmp	local02, local03 wz
0cca4     01 1E 66 A6 |  if_e	neg	local01, #1
0cca8     A7 1E 62 FC | 	wrlong	local01, fp
0ccac     34 01 90 FD | 	jmp	#LR__1070
0ccb0                 | LR__1065
0ccb0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
0ccb0     08 4E 05 F1 | 	add	fp, #8
0ccb4     A7 1E 02 FB | 	rdlong	local01, fp
0ccb8     08 4E 85 F1 | 	sub	fp, #8
0ccbc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ccc0     14 4E 05 A1 |  if_e	add	fp, #20
0ccc4     A7 22 02 AB |  if_e	rdlong	local03, fp
0ccc8     14 4E 85 A1 |  if_e	sub	fp, #20
0cccc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0ccd0     24 00 90 5D |  if_ne	jmp	#LR__1066
0ccd4     00 1E 06 F6 | 	mov	local01, #0
0ccd8     A7 20 02 FB | 	rdlong	local02, fp
0ccdc     0C 4E 05 F1 | 	add	fp, #12
0cce0     A7 22 02 FB | 	rdlong	local03, fp
0cce4     0C 4E 85 F1 | 	sub	fp, #12
0cce8     11 21 0A F2 | 	cmp	local02, local03 wz
0ccec     01 1E 66 A6 |  if_e	neg	local01, #1
0ccf0     A7 1E 62 FC | 	wrlong	local01, fp
0ccf4     EC 00 90 FD | 	jmp	#LR__1070
0ccf8                 | LR__1066
0ccf8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
0ccf8     08 4E 05 F1 | 	add	fp, #8
0ccfc     A7 1E 02 FB | 	rdlong	local01, fp
0cd00     08 4E 85 F1 | 	sub	fp, #8
0cd04     1D 1E 0E F2 | 	cmp	local01, #29 wz
0cd08     14 4E 05 A1 |  if_e	add	fp, #20
0cd0c     A7 22 02 AB |  if_e	rdlong	local03, fp
0cd10     14 4E 85 A1 |  if_e	sub	fp, #20
0cd14     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0cd18     34 00 90 5D |  if_ne	jmp	#LR__1067
0cd1c     00 1E 06 F6 | 	mov	local01, #0
0cd20     A7 12 02 FB | 	rdlong	arg01, fp
0cd24     30 B2 B0 FD | 	call	#__system___float_fromuns
0cd28     FD 12 02 F6 | 	mov	arg01, result1
0cd2c     0C 4E 05 F1 | 	add	fp, #12
0cd30     A7 14 02 FB | 	rdlong	arg02, fp
0cd34     0C 4E 85 F1 | 	sub	fp, #12
0cd38     01 16 06 F6 | 	mov	arg03, #1
0cd3c     78 B9 B0 FD | 	call	#__system___float_cmp
0cd40     00 FA 0D F2 | 	cmp	result1, #0 wz
0cd44     00 1E 26 A6 |  if_e	not	local01, #0
0cd48     A7 1E 62 FC | 	wrlong	local01, fp
0cd4c     94 00 90 FD | 	jmp	#LR__1070
0cd50                 | LR__1067
0cd50                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
0cd50     08 4E 05 F1 | 	add	fp, #8
0cd54     A7 1E 02 FB | 	rdlong	local01, fp
0cd58     08 4E 85 F1 | 	sub	fp, #8
0cd5c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0cd60     14 4E 05 A1 |  if_e	add	fp, #20
0cd64     A7 22 02 AB |  if_e	rdlong	local03, fp
0cd68     14 4E 85 A1 |  if_e	sub	fp, #20
0cd6c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0cd70     24 00 90 5D |  if_ne	jmp	#LR__1068
0cd74     00 1E 06 F6 | 	mov	local01, #0
0cd78     A7 20 02 FB | 	rdlong	local02, fp
0cd7c     0C 4E 05 F1 | 	add	fp, #12
0cd80     A7 22 02 FB | 	rdlong	local03, fp
0cd84     0C 4E 85 F1 | 	sub	fp, #12
0cd88     11 21 0A F2 | 	cmp	local02, local03 wz
0cd8c     01 1E 66 A6 |  if_e	neg	local01, #1
0cd90     A7 1E 62 FC | 	wrlong	local01, fp
0cd94     4C 00 90 FD | 	jmp	#LR__1070
0cd98                 | LR__1068
0cd98                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
0cd98     08 4E 05 F1 | 	add	fp, #8
0cd9c     A7 1E 02 FB | 	rdlong	local01, fp
0cda0     08 4E 85 F1 | 	sub	fp, #8
0cda4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0cda8     14 4E 05 A1 |  if_e	add	fp, #20
0cdac     A7 22 02 AB |  if_e	rdlong	local03, fp
0cdb0     14 4E 85 A1 |  if_e	sub	fp, #20
0cdb4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0cdb8     24 00 90 5D |  if_ne	jmp	#LR__1069
0cdbc     00 1E 06 F6 | 	mov	local01, #0
0cdc0     A7 20 02 FB | 	rdlong	local02, fp
0cdc4     0C 4E 05 F1 | 	add	fp, #12
0cdc8     A7 22 02 FB | 	rdlong	local03, fp
0cdcc     0C 4E 85 F1 | 	sub	fp, #12
0cdd0     11 21 0A F2 | 	cmp	local02, local03 wz
0cdd4     01 1E 66 A6 |  if_e	neg	local01, #1
0cdd8     A7 1E 62 FC | 	wrlong	local01, fp
0cddc     04 00 90 FD | 	jmp	#LR__1070
0cde0                 | LR__1069
0cde0     A7 00 68 FC | 	wrlong	#0, fp
0cde4                 | LR__1070
0cde4     08 4E 05 F1 | 	add	fp, #8
0cde8     A7 38 68 FC | 	wrlong	#28, fp
0cdec     08 4E 85 F1 | 	sub	fp, #8
0cdf0     A7 12 02 F6 | 	mov	arg01, fp
0cdf4     14 BC BF FD | 	call	#_push
0cdf8     A7 F0 03 F6 | 	mov	ptra, fp
0cdfc     B2 00 A0 FD | 	call	#popregs_
0ce00                 | _do_eq_ret
0ce00     2D 00 64 FD | 	ret
0ce04                 | 
0ce04                 | ' 
0ce04                 | ' sub do_gt
0ce04                 | _do_gt
0ce04     05 4A 05 F6 | 	mov	COUNT_, #5
0ce08     A8 00 A0 FD | 	call	#pushregs_
0ce0c     18 F0 07 F1 | 	add	ptra, #24
0ce10     60 BB BF FD | 	call	#_pop
0ce14     FD 1E 02 F6 | 	mov	local01, result1
0ce18     FE 20 02 F6 | 	mov	local02, result2
0ce1c     FF 22 02 F6 | 	mov	local03, result3
0ce20     0C 4E 05 F1 | 	add	fp, #12
0ce24     A7 1E 62 FC | 	wrlong	local01, fp
0ce28     04 4E 05 F1 | 	add	fp, #4
0ce2c     A7 20 62 FC | 	wrlong	local02, fp
0ce30     04 4E 05 F1 | 	add	fp, #4
0ce34     A7 22 62 FC | 	wrlong	local03, fp
0ce38     14 4E 85 F1 | 	sub	fp, #20
0ce3c     34 BB BF FD | 	call	#_pop
0ce40     FF 22 02 F6 | 	mov	local03, result3
0ce44     A7 FA 61 FC | 	wrlong	result1, fp
0ce48     04 4E 05 F1 | 	add	fp, #4
0ce4c     A7 FC 61 FC | 	wrlong	result2, fp
0ce50     04 4E 05 F1 | 	add	fp, #4
0ce54     A7 22 62 FC | 	wrlong	local03, fp
0ce58                 | ' t2=pop()
0ce58                 | ' t1=pop()
0ce58                 | ' 
0ce58                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
0ce58     08 4E 85 F1 | 	sub	fp, #8
0ce5c     1F 22 0E F2 | 	cmp	local03, #31 wz
0ce60     14 4E 05 A1 |  if_e	add	fp, #20
0ce64     A7 24 02 AB |  if_e	rdlong	local04, fp
0ce68     14 4E 85 A1 |  if_e	sub	fp, #20
0ce6c     12 23 02 A6 |  if_e	mov	local03, local04
0ce70     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0ce74     28 00 90 5D |  if_ne	jmp	#LR__1080
0ce78     00 1E 06 F6 | 	mov	local01, #0
0ce7c     A7 12 02 FB | 	rdlong	arg01, fp
0ce80     0C 4E 05 F1 | 	add	fp, #12
0ce84     A7 14 02 FB | 	rdlong	arg02, fp
0ce88     0C 4E 85 F1 | 	sub	fp, #12
0ce8c     08 8A B0 FD | 	call	#__system___string_cmp
0ce90     01 FA 55 F2 | 	cmps	result1, #1 wc
0ce94     00 1E 26 36 |  if_ae	not	local01, #0
0ce98     A7 1E 62 FC | 	wrlong	local01, fp
0ce9c     04 03 90 FD | 	jmp	#LR__1090
0cea0                 | LR__1080
0cea0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
0cea0     08 4E 05 F1 | 	add	fp, #8
0cea4     A7 1E 02 FB | 	rdlong	local01, fp
0cea8     08 4E 85 F1 | 	sub	fp, #8
0ceac     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ceb0     14 4E 05 A1 |  if_e	add	fp, #20
0ceb4     A7 24 02 AB |  if_e	rdlong	local04, fp
0ceb8     14 4E 85 A1 |  if_e	sub	fp, #20
0cebc     12 23 02 A6 |  if_e	mov	local03, local04
0cec0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0cec4     2C 00 90 5D |  if_ne	jmp	#LR__1081
0cec8     00 1E 06 F6 | 	mov	local01, #0
0cecc     A7 12 02 FB | 	rdlong	arg01, fp
0ced0     0C 4E 05 F1 | 	add	fp, #12
0ced4     A7 14 02 FB | 	rdlong	arg02, fp
0ced8     0C 4E 85 F1 | 	sub	fp, #12
0cedc     01 16 66 F6 | 	neg	arg03, #1
0cee0     D4 B7 B0 FD | 	call	#__system___float_cmp
0cee4     01 FA 55 F2 | 	cmps	result1, #1 wc
0cee8     00 1E 26 36 |  if_ae	not	local01, #0
0ceec     A7 1E 62 FC | 	wrlong	local01, fp
0cef0     B0 02 90 FD | 	jmp	#LR__1090
0cef4                 | LR__1081
0cef4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
0cef4     08 4E 05 F1 | 	add	fp, #8
0cef8     A7 1E 02 FB | 	rdlong	local01, fp
0cefc     08 4E 85 F1 | 	sub	fp, #8
0cf00     1E 1E 0E F2 | 	cmp	local01, #30 wz
0cf04     14 4E 05 A1 |  if_e	add	fp, #20
0cf08     A7 24 02 AB |  if_e	rdlong	local04, fp
0cf0c     14 4E 85 A1 |  if_e	sub	fp, #20
0cf10     12 23 02 A6 |  if_e	mov	local03, local04
0cf14     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0cf18     48 00 90 5D |  if_ne	jmp	#LR__1082
0cf1c     00 1E 06 F6 | 	mov	local01, #0
0cf20     A7 20 02 FB | 	rdlong	local02, fp
0cf24     0C 4E 05 F1 | 	add	fp, #12
0cf28     A7 12 02 FB | 	rdlong	arg01, fp
0cf2c     0C 4E 85 F1 | 	sub	fp, #12
0cf30     09 13 52 F6 | 	abs	arg01, arg01 wc
0cf34     1F 26 C6 C9 |  if_b	decod	local05, #31
0cf38     00 26 06 36 |  if_ae	mov	local05, #0
0cf3c     18 B0 B0 FD | 	call	#__system___float_fromuns
0cf40     13 FB 61 F5 | 	xor	result1, local05
0cf44     FD 14 02 F6 | 	mov	arg02, result1
0cf48     10 13 02 F6 | 	mov	arg01, local02
0cf4c     01 16 66 F6 | 	neg	arg03, #1
0cf50     64 B7 B0 FD | 	call	#__system___float_cmp
0cf54     01 FA 55 F2 | 	cmps	result1, #1 wc
0cf58     00 1E 26 36 |  if_ae	not	local01, #0
0cf5c     A7 1E 62 FC | 	wrlong	local01, fp
0cf60     40 02 90 FD | 	jmp	#LR__1090
0cf64                 | LR__1082
0cf64                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
0cf64     08 4E 05 F1 | 	add	fp, #8
0cf68     A7 1E 02 FB | 	rdlong	local01, fp
0cf6c     08 4E 85 F1 | 	sub	fp, #8
0cf70     1E 1E 0E F2 | 	cmp	local01, #30 wz
0cf74     14 4E 05 A1 |  if_e	add	fp, #20
0cf78     A7 24 02 AB |  if_e	rdlong	local04, fp
0cf7c     14 4E 85 A1 |  if_e	sub	fp, #20
0cf80     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0cf84     38 00 90 5D |  if_ne	jmp	#LR__1083
0cf88     00 1E 06 F6 | 	mov	local01, #0
0cf8c     A7 20 02 FB | 	rdlong	local02, fp
0cf90     0C 4E 05 F1 | 	add	fp, #12
0cf94     A7 12 02 FB | 	rdlong	arg01, fp
0cf98     0C 4E 85 F1 | 	sub	fp, #12
0cf9c     B8 AF B0 FD | 	call	#__system___float_fromuns
0cfa0     FD 14 02 F6 | 	mov	arg02, result1
0cfa4     10 13 02 F6 | 	mov	arg01, local02
0cfa8     01 16 66 F6 | 	neg	arg03, #1
0cfac     08 B7 B0 FD | 	call	#__system___float_cmp
0cfb0     01 FA 55 F2 | 	cmps	result1, #1 wc
0cfb4     00 1E 26 36 |  if_ae	not	local01, #0
0cfb8     A7 1E 62 FC | 	wrlong	local01, fp
0cfbc     E4 01 90 FD | 	jmp	#LR__1090
0cfc0                 | LR__1083
0cfc0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
0cfc0     08 4E 05 F1 | 	add	fp, #8
0cfc4     A7 1E 02 FB | 	rdlong	local01, fp
0cfc8     08 4E 85 F1 | 	sub	fp, #8
0cfcc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0cfd0     14 4E 05 A1 |  if_e	add	fp, #20
0cfd4     A7 22 02 AB |  if_e	rdlong	local03, fp
0cfd8     14 4E 85 A1 |  if_e	sub	fp, #20
0cfdc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0cfe0     44 00 90 5D |  if_ne	jmp	#LR__1084
0cfe4     00 1E 06 F6 | 	mov	local01, #0
0cfe8     A7 12 02 FB | 	rdlong	arg01, fp
0cfec     09 13 52 F6 | 	abs	arg01, arg01 wc
0cff0     1F 26 C6 C9 |  if_b	decod	local05, #31
0cff4     00 26 06 36 |  if_ae	mov	local05, #0
0cff8     5C AF B0 FD | 	call	#__system___float_fromuns
0cffc     13 FB 61 F5 | 	xor	result1, local05
0d000     FD 12 02 F6 | 	mov	arg01, result1
0d004     0C 4E 05 F1 | 	add	fp, #12
0d008     A7 14 02 FB | 	rdlong	arg02, fp
0d00c     0C 4E 85 F1 | 	sub	fp, #12
0d010     01 16 66 F6 | 	neg	arg03, #1
0d014     A0 B6 B0 FD | 	call	#__system___float_cmp
0d018     01 FA 55 F2 | 	cmps	result1, #1 wc
0d01c     00 1E 26 36 |  if_ae	not	local01, #0
0d020     A7 1E 62 FC | 	wrlong	local01, fp
0d024     7C 01 90 FD | 	jmp	#LR__1090
0d028                 | LR__1084
0d028                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
0d028     08 4E 05 F1 | 	add	fp, #8
0d02c     A7 1E 02 FB | 	rdlong	local01, fp
0d030     08 4E 85 F1 | 	sub	fp, #8
0d034     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d038     14 4E 05 A1 |  if_e	add	fp, #20
0d03c     A7 22 02 AB |  if_e	rdlong	local03, fp
0d040     14 4E 85 A1 |  if_e	sub	fp, #20
0d044     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d048     24 00 90 5D |  if_ne	jmp	#LR__1085
0d04c     00 1E 06 F6 | 	mov	local01, #0
0d050     A7 20 02 FB | 	rdlong	local02, fp
0d054     0C 4E 05 F1 | 	add	fp, #12
0d058     A7 22 02 FB | 	rdlong	local03, fp
0d05c     0C 4E 85 F1 | 	sub	fp, #12
0d060     11 21 5A F2 | 	cmps	local02, local03 wcz
0d064     01 1E 66 16 |  if_a	neg	local01, #1
0d068     A7 1E 62 FC | 	wrlong	local01, fp
0d06c     34 01 90 FD | 	jmp	#LR__1090
0d070                 | LR__1085
0d070                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
0d070     08 4E 05 F1 | 	add	fp, #8
0d074     A7 1E 02 FB | 	rdlong	local01, fp
0d078     08 4E 85 F1 | 	sub	fp, #8
0d07c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d080     14 4E 05 A1 |  if_e	add	fp, #20
0d084     A7 22 02 AB |  if_e	rdlong	local03, fp
0d088     14 4E 85 A1 |  if_e	sub	fp, #20
0d08c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d090     24 00 90 5D |  if_ne	jmp	#LR__1086
0d094     00 1E 06 F6 | 	mov	local01, #0
0d098     A7 20 02 FB | 	rdlong	local02, fp
0d09c     0C 4E 05 F1 | 	add	fp, #12
0d0a0     A7 22 02 FB | 	rdlong	local03, fp
0d0a4     0C 4E 85 F1 | 	sub	fp, #12
0d0a8     11 21 5A F2 | 	cmps	local02, local03 wcz
0d0ac     01 1E 66 16 |  if_a	neg	local01, #1
0d0b0     A7 1E 62 FC | 	wrlong	local01, fp
0d0b4     EC 00 90 FD | 	jmp	#LR__1090
0d0b8                 | LR__1086
0d0b8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
0d0b8     08 4E 05 F1 | 	add	fp, #8
0d0bc     A7 1E 02 FB | 	rdlong	local01, fp
0d0c0     08 4E 85 F1 | 	sub	fp, #8
0d0c4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d0c8     14 4E 05 A1 |  if_e	add	fp, #20
0d0cc     A7 22 02 AB |  if_e	rdlong	local03, fp
0d0d0     14 4E 85 A1 |  if_e	sub	fp, #20
0d0d4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d0d8     34 00 90 5D |  if_ne	jmp	#LR__1087
0d0dc     00 1E 06 F6 | 	mov	local01, #0
0d0e0     A7 12 02 FB | 	rdlong	arg01, fp
0d0e4     70 AE B0 FD | 	call	#__system___float_fromuns
0d0e8     FD 12 02 F6 | 	mov	arg01, result1
0d0ec     0C 4E 05 F1 | 	add	fp, #12
0d0f0     A7 14 02 FB | 	rdlong	arg02, fp
0d0f4     0C 4E 85 F1 | 	sub	fp, #12
0d0f8     01 16 66 F6 | 	neg	arg03, #1
0d0fc     B8 B5 B0 FD | 	call	#__system___float_cmp
0d100     01 FA 55 F2 | 	cmps	result1, #1 wc
0d104     00 1E 26 36 |  if_ae	not	local01, #0
0d108     A7 1E 62 FC | 	wrlong	local01, fp
0d10c     94 00 90 FD | 	jmp	#LR__1090
0d110                 | LR__1087
0d110                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
0d110     08 4E 05 F1 | 	add	fp, #8
0d114     A7 1E 02 FB | 	rdlong	local01, fp
0d118     08 4E 85 F1 | 	sub	fp, #8
0d11c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d120     14 4E 05 A1 |  if_e	add	fp, #20
0d124     A7 22 02 AB |  if_e	rdlong	local03, fp
0d128     14 4E 85 A1 |  if_e	sub	fp, #20
0d12c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d130     24 00 90 5D |  if_ne	jmp	#LR__1088
0d134     00 1E 06 F6 | 	mov	local01, #0
0d138     A7 20 02 FB | 	rdlong	local02, fp
0d13c     0C 4E 05 F1 | 	add	fp, #12
0d140     A7 22 02 FB | 	rdlong	local03, fp
0d144     0C 4E 85 F1 | 	sub	fp, #12
0d148     11 21 5A F2 | 	cmps	local02, local03 wcz
0d14c     01 1E 66 16 |  if_a	neg	local01, #1
0d150     A7 1E 62 FC | 	wrlong	local01, fp
0d154     4C 00 90 FD | 	jmp	#LR__1090
0d158                 | LR__1088
0d158                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
0d158     08 4E 05 F1 | 	add	fp, #8
0d15c     A7 1E 02 FB | 	rdlong	local01, fp
0d160     08 4E 85 F1 | 	sub	fp, #8
0d164     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d168     14 4E 05 A1 |  if_e	add	fp, #20
0d16c     A7 22 02 AB |  if_e	rdlong	local03, fp
0d170     14 4E 85 A1 |  if_e	sub	fp, #20
0d174     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d178     24 00 90 5D |  if_ne	jmp	#LR__1089
0d17c     00 1E 06 F6 | 	mov	local01, #0
0d180     A7 20 02 FB | 	rdlong	local02, fp
0d184     0C 4E 05 F1 | 	add	fp, #12
0d188     A7 22 02 FB | 	rdlong	local03, fp
0d18c     0C 4E 85 F1 | 	sub	fp, #12
0d190     11 21 1A F2 | 	cmp	local02, local03 wcz
0d194     01 1E 66 16 |  if_a	neg	local01, #1
0d198     A7 1E 62 FC | 	wrlong	local01, fp
0d19c     04 00 90 FD | 	jmp	#LR__1090
0d1a0                 | LR__1089
0d1a0     A7 00 68 FC | 	wrlong	#0, fp
0d1a4                 | LR__1090
0d1a4     08 4E 05 F1 | 	add	fp, #8
0d1a8     A7 38 68 FC | 	wrlong	#28, fp
0d1ac     08 4E 85 F1 | 	sub	fp, #8
0d1b0     A7 12 02 F6 | 	mov	arg01, fp
0d1b4     54 B8 BF FD | 	call	#_push
0d1b8     A7 F0 03 F6 | 	mov	ptra, fp
0d1bc     B2 00 A0 FD | 	call	#popregs_
0d1c0                 | _do_gt_ret
0d1c0     2D 00 64 FD | 	ret
0d1c4                 | 
0d1c4                 | ' 
0d1c4                 | ' sub do_lt
0d1c4                 | _do_lt
0d1c4     05 4A 05 F6 | 	mov	COUNT_, #5
0d1c8     A8 00 A0 FD | 	call	#pushregs_
0d1cc     18 F0 07 F1 | 	add	ptra, #24
0d1d0     A0 B7 BF FD | 	call	#_pop
0d1d4     FD 1E 02 F6 | 	mov	local01, result1
0d1d8     FE 20 02 F6 | 	mov	local02, result2
0d1dc     FF 22 02 F6 | 	mov	local03, result3
0d1e0     0C 4E 05 F1 | 	add	fp, #12
0d1e4     A7 1E 62 FC | 	wrlong	local01, fp
0d1e8     04 4E 05 F1 | 	add	fp, #4
0d1ec     A7 20 62 FC | 	wrlong	local02, fp
0d1f0     04 4E 05 F1 | 	add	fp, #4
0d1f4     A7 22 62 FC | 	wrlong	local03, fp
0d1f8     14 4E 85 F1 | 	sub	fp, #20
0d1fc     74 B7 BF FD | 	call	#_pop
0d200     FF 22 02 F6 | 	mov	local03, result3
0d204     A7 FA 61 FC | 	wrlong	result1, fp
0d208     04 4E 05 F1 | 	add	fp, #4
0d20c     A7 FC 61 FC | 	wrlong	result2, fp
0d210     04 4E 05 F1 | 	add	fp, #4
0d214     A7 22 62 FC | 	wrlong	local03, fp
0d218                 | ' t2=pop()
0d218                 | ' t1=pop()
0d218                 | ' 
0d218                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
0d218     08 4E 85 F1 | 	sub	fp, #8
0d21c     1F 22 0E F2 | 	cmp	local03, #31 wz
0d220     14 4E 05 A1 |  if_e	add	fp, #20
0d224     A7 24 02 AB |  if_e	rdlong	local04, fp
0d228     14 4E 85 A1 |  if_e	sub	fp, #20
0d22c     12 23 02 A6 |  if_e	mov	local03, local04
0d230     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0d234     28 00 90 5D |  if_ne	jmp	#LR__1100
0d238     00 1E 06 F6 | 	mov	local01, #0
0d23c     A7 12 02 FB | 	rdlong	arg01, fp
0d240     0C 4E 05 F1 | 	add	fp, #12
0d244     A7 14 02 FB | 	rdlong	arg02, fp
0d248     0C 4E 85 F1 | 	sub	fp, #12
0d24c     48 86 B0 FD | 	call	#__system___string_cmp
0d250     00 FA 55 F2 | 	cmps	result1, #0 wc
0d254     00 1E 26 C6 |  if_b	not	local01, #0
0d258     A7 1E 62 FC | 	wrlong	local01, fp
0d25c     F4 02 90 FD | 	jmp	#LR__1110
0d260                 | LR__1100
0d260                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
0d260     08 4E 05 F1 | 	add	fp, #8
0d264     A7 1E 02 FB | 	rdlong	local01, fp
0d268     08 4E 85 F1 | 	sub	fp, #8
0d26c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d270     14 4E 05 A1 |  if_e	add	fp, #20
0d274     A7 24 02 AB |  if_e	rdlong	local04, fp
0d278     14 4E 85 A1 |  if_e	sub	fp, #20
0d27c     12 23 02 A6 |  if_e	mov	local03, local04
0d280     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d284     2C 00 90 5D |  if_ne	jmp	#LR__1101
0d288     00 1E 06 F6 | 	mov	local01, #0
0d28c     A7 12 02 FB | 	rdlong	arg01, fp
0d290     0C 4E 05 F1 | 	add	fp, #12
0d294     A7 14 02 FB | 	rdlong	arg02, fp
0d298     0C 4E 85 F1 | 	sub	fp, #12
0d29c     01 16 06 F6 | 	mov	arg03, #1
0d2a0     14 B4 B0 FD | 	call	#__system___float_cmp
0d2a4     00 FA 55 F2 | 	cmps	result1, #0 wc
0d2a8     00 1E 26 C6 |  if_b	not	local01, #0
0d2ac     A7 1E 62 FC | 	wrlong	local01, fp
0d2b0     A0 02 90 FD | 	jmp	#LR__1110
0d2b4                 | LR__1101
0d2b4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
0d2b4     08 4E 05 F1 | 	add	fp, #8
0d2b8     A7 1E 02 FB | 	rdlong	local01, fp
0d2bc     08 4E 85 F1 | 	sub	fp, #8
0d2c0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d2c4     14 4E 05 A1 |  if_e	add	fp, #20
0d2c8     A7 24 02 AB |  if_e	rdlong	local04, fp
0d2cc     14 4E 85 A1 |  if_e	sub	fp, #20
0d2d0     12 23 02 A6 |  if_e	mov	local03, local04
0d2d4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d2d8     48 00 90 5D |  if_ne	jmp	#LR__1102
0d2dc     00 1E 06 F6 | 	mov	local01, #0
0d2e0     A7 20 02 FB | 	rdlong	local02, fp
0d2e4     0C 4E 05 F1 | 	add	fp, #12
0d2e8     A7 12 02 FB | 	rdlong	arg01, fp
0d2ec     0C 4E 85 F1 | 	sub	fp, #12
0d2f0     09 13 52 F6 | 	abs	arg01, arg01 wc
0d2f4     1F 26 C6 C9 |  if_b	decod	local05, #31
0d2f8     00 26 06 36 |  if_ae	mov	local05, #0
0d2fc     58 AC B0 FD | 	call	#__system___float_fromuns
0d300     13 FB 61 F5 | 	xor	result1, local05
0d304     FD 14 02 F6 | 	mov	arg02, result1
0d308     10 13 02 F6 | 	mov	arg01, local02
0d30c     01 16 06 F6 | 	mov	arg03, #1
0d310     A4 B3 B0 FD | 	call	#__system___float_cmp
0d314     00 FA 55 F2 | 	cmps	result1, #0 wc
0d318     00 1E 26 C6 |  if_b	not	local01, #0
0d31c     A7 1E 62 FC | 	wrlong	local01, fp
0d320     30 02 90 FD | 	jmp	#LR__1110
0d324                 | LR__1102
0d324                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
0d324     08 4E 05 F1 | 	add	fp, #8
0d328     A7 1E 02 FB | 	rdlong	local01, fp
0d32c     08 4E 85 F1 | 	sub	fp, #8
0d330     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d334     14 4E 05 A1 |  if_e	add	fp, #20
0d338     A7 24 02 AB |  if_e	rdlong	local04, fp
0d33c     14 4E 85 A1 |  if_e	sub	fp, #20
0d340     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0d344     38 00 90 5D |  if_ne	jmp	#LR__1103
0d348     00 1E 06 F6 | 	mov	local01, #0
0d34c     A7 20 02 FB | 	rdlong	local02, fp
0d350     0C 4E 05 F1 | 	add	fp, #12
0d354     A7 12 02 FB | 	rdlong	arg01, fp
0d358     0C 4E 85 F1 | 	sub	fp, #12
0d35c     F8 AB B0 FD | 	call	#__system___float_fromuns
0d360     FD 14 02 F6 | 	mov	arg02, result1
0d364     10 13 02 F6 | 	mov	arg01, local02
0d368     01 16 06 F6 | 	mov	arg03, #1
0d36c     48 B3 B0 FD | 	call	#__system___float_cmp
0d370     00 FA 55 F2 | 	cmps	result1, #0 wc
0d374     00 1E 26 C6 |  if_b	not	local01, #0
0d378     A7 1E 62 FC | 	wrlong	local01, fp
0d37c     D4 01 90 FD | 	jmp	#LR__1110
0d380                 | LR__1103
0d380                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
0d380     08 4E 05 F1 | 	add	fp, #8
0d384     A7 1E 02 FB | 	rdlong	local01, fp
0d388     08 4E 85 F1 | 	sub	fp, #8
0d38c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d390     14 4E 05 A1 |  if_e	add	fp, #20
0d394     A7 22 02 AB |  if_e	rdlong	local03, fp
0d398     14 4E 85 A1 |  if_e	sub	fp, #20
0d39c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d3a0     44 00 90 5D |  if_ne	jmp	#LR__1104
0d3a4     00 1E 06 F6 | 	mov	local01, #0
0d3a8     A7 12 02 FB | 	rdlong	arg01, fp
0d3ac     09 13 52 F6 | 	abs	arg01, arg01 wc
0d3b0     1F 26 C6 C9 |  if_b	decod	local05, #31
0d3b4     00 26 06 36 |  if_ae	mov	local05, #0
0d3b8     9C AB B0 FD | 	call	#__system___float_fromuns
0d3bc     13 FB 61 F5 | 	xor	result1, local05
0d3c0     FD 12 02 F6 | 	mov	arg01, result1
0d3c4     0C 4E 05 F1 | 	add	fp, #12
0d3c8     A7 14 02 FB | 	rdlong	arg02, fp
0d3cc     0C 4E 85 F1 | 	sub	fp, #12
0d3d0     01 16 06 F6 | 	mov	arg03, #1
0d3d4     E0 B2 B0 FD | 	call	#__system___float_cmp
0d3d8     00 FA 55 F2 | 	cmps	result1, #0 wc
0d3dc     00 1E 26 C6 |  if_b	not	local01, #0
0d3e0     A7 1E 62 FC | 	wrlong	local01, fp
0d3e4     6C 01 90 FD | 	jmp	#LR__1110
0d3e8                 | LR__1104
0d3e8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
0d3e8     08 4E 05 F1 | 	add	fp, #8
0d3ec     A7 1E 02 FB | 	rdlong	local01, fp
0d3f0     08 4E 85 F1 | 	sub	fp, #8
0d3f4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d3f8     14 4E 05 A1 |  if_e	add	fp, #20
0d3fc     A7 22 02 AB |  if_e	rdlong	local03, fp
0d400     14 4E 85 A1 |  if_e	sub	fp, #20
0d404     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d408     20 00 90 5D |  if_ne	jmp	#LR__1105
0d40c     A7 20 02 FB | 	rdlong	local02, fp
0d410     0C 4E 05 F1 | 	add	fp, #12
0d414     A7 22 02 FB | 	rdlong	local03, fp
0d418     0C 4E 85 F1 | 	sub	fp, #12
0d41c     11 21 52 F2 | 	cmps	local02, local03 wc
0d420     0F 1F A2 F1 | 	subx	local01, local01
0d424     A7 1E 62 FC | 	wrlong	local01, fp
0d428     28 01 90 FD | 	jmp	#LR__1110
0d42c                 | LR__1105
0d42c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
0d42c     08 4E 05 F1 | 	add	fp, #8
0d430     A7 1E 02 FB | 	rdlong	local01, fp
0d434     08 4E 85 F1 | 	sub	fp, #8
0d438     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d43c     14 4E 05 A1 |  if_e	add	fp, #20
0d440     A7 22 02 AB |  if_e	rdlong	local03, fp
0d444     14 4E 85 A1 |  if_e	sub	fp, #20
0d448     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d44c     20 00 90 5D |  if_ne	jmp	#LR__1106
0d450     A7 20 02 FB | 	rdlong	local02, fp
0d454     0C 4E 05 F1 | 	add	fp, #12
0d458     A7 22 02 FB | 	rdlong	local03, fp
0d45c     0C 4E 85 F1 | 	sub	fp, #12
0d460     11 21 52 F2 | 	cmps	local02, local03 wc
0d464     0F 1F A2 F1 | 	subx	local01, local01
0d468     A7 1E 62 FC | 	wrlong	local01, fp
0d46c     E4 00 90 FD | 	jmp	#LR__1110
0d470                 | LR__1106
0d470                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
0d470     08 4E 05 F1 | 	add	fp, #8
0d474     A7 1E 02 FB | 	rdlong	local01, fp
0d478     08 4E 85 F1 | 	sub	fp, #8
0d47c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d480     14 4E 05 A1 |  if_e	add	fp, #20
0d484     A7 22 02 AB |  if_e	rdlong	local03, fp
0d488     14 4E 85 A1 |  if_e	sub	fp, #20
0d48c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d490     34 00 90 5D |  if_ne	jmp	#LR__1107
0d494     00 1E 06 F6 | 	mov	local01, #0
0d498     A7 12 02 FB | 	rdlong	arg01, fp
0d49c     B8 AA B0 FD | 	call	#__system___float_fromuns
0d4a0     FD 12 02 F6 | 	mov	arg01, result1
0d4a4     0C 4E 05 F1 | 	add	fp, #12
0d4a8     A7 14 02 FB | 	rdlong	arg02, fp
0d4ac     0C 4E 85 F1 | 	sub	fp, #12
0d4b0     01 16 06 F6 | 	mov	arg03, #1
0d4b4     00 B2 B0 FD | 	call	#__system___float_cmp
0d4b8     00 FA 55 F2 | 	cmps	result1, #0 wc
0d4bc     00 1E 26 C6 |  if_b	not	local01, #0
0d4c0     A7 1E 62 FC | 	wrlong	local01, fp
0d4c4     8C 00 90 FD | 	jmp	#LR__1110
0d4c8                 | LR__1107
0d4c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
0d4c8     08 4E 05 F1 | 	add	fp, #8
0d4cc     A7 1E 02 FB | 	rdlong	local01, fp
0d4d0     08 4E 85 F1 | 	sub	fp, #8
0d4d4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d4d8     14 4E 05 A1 |  if_e	add	fp, #20
0d4dc     A7 22 02 AB |  if_e	rdlong	local03, fp
0d4e0     14 4E 85 A1 |  if_e	sub	fp, #20
0d4e4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d4e8     20 00 90 5D |  if_ne	jmp	#LR__1108
0d4ec     A7 20 02 FB | 	rdlong	local02, fp
0d4f0     0C 4E 05 F1 | 	add	fp, #12
0d4f4     A7 22 02 FB | 	rdlong	local03, fp
0d4f8     0C 4E 85 F1 | 	sub	fp, #12
0d4fc     11 21 52 F2 | 	cmps	local02, local03 wc
0d500     0F 1F A2 F1 | 	subx	local01, local01
0d504     A7 1E 62 FC | 	wrlong	local01, fp
0d508     48 00 90 FD | 	jmp	#LR__1110
0d50c                 | LR__1108
0d50c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
0d50c     08 4E 05 F1 | 	add	fp, #8
0d510     A7 1E 02 FB | 	rdlong	local01, fp
0d514     08 4E 85 F1 | 	sub	fp, #8
0d518     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d51c     14 4E 05 A1 |  if_e	add	fp, #20
0d520     A7 22 02 AB |  if_e	rdlong	local03, fp
0d524     14 4E 85 A1 |  if_e	sub	fp, #20
0d528     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d52c     20 00 90 5D |  if_ne	jmp	#LR__1109
0d530     A7 20 02 FB | 	rdlong	local02, fp
0d534     0C 4E 05 F1 | 	add	fp, #12
0d538     A7 22 02 FB | 	rdlong	local03, fp
0d53c     0C 4E 85 F1 | 	sub	fp, #12
0d540     11 21 12 F2 | 	cmp	local02, local03 wc
0d544     0F 1F A2 F1 | 	subx	local01, local01
0d548     A7 1E 62 FC | 	wrlong	local01, fp
0d54c     04 00 90 FD | 	jmp	#LR__1110
0d550                 | LR__1109
0d550     A7 00 68 FC | 	wrlong	#0, fp
0d554                 | LR__1110
0d554     08 4E 05 F1 | 	add	fp, #8
0d558     A7 38 68 FC | 	wrlong	#28, fp
0d55c     08 4E 85 F1 | 	sub	fp, #8
0d560     A7 12 02 F6 | 	mov	arg01, fp
0d564     A4 B4 BF FD | 	call	#_push
0d568     A7 F0 03 F6 | 	mov	ptra, fp
0d56c     B2 00 A0 FD | 	call	#popregs_
0d570                 | _do_lt_ret
0d570     2D 00 64 FD | 	ret
0d574                 | 
0d574                 | ' 
0d574                 | ' sub do_ge
0d574                 | _do_ge
0d574     05 4A 05 F6 | 	mov	COUNT_, #5
0d578     A8 00 A0 FD | 	call	#pushregs_
0d57c     18 F0 07 F1 | 	add	ptra, #24
0d580     F0 B3 BF FD | 	call	#_pop
0d584     FD 1E 02 F6 | 	mov	local01, result1
0d588     FE 20 02 F6 | 	mov	local02, result2
0d58c     FF 22 02 F6 | 	mov	local03, result3
0d590     0C 4E 05 F1 | 	add	fp, #12
0d594     A7 1E 62 FC | 	wrlong	local01, fp
0d598     04 4E 05 F1 | 	add	fp, #4
0d59c     A7 20 62 FC | 	wrlong	local02, fp
0d5a0     04 4E 05 F1 | 	add	fp, #4
0d5a4     A7 22 62 FC | 	wrlong	local03, fp
0d5a8     14 4E 85 F1 | 	sub	fp, #20
0d5ac     C4 B3 BF FD | 	call	#_pop
0d5b0     FF 22 02 F6 | 	mov	local03, result3
0d5b4     A7 FA 61 FC | 	wrlong	result1, fp
0d5b8     04 4E 05 F1 | 	add	fp, #4
0d5bc     A7 FC 61 FC | 	wrlong	result2, fp
0d5c0     04 4E 05 F1 | 	add	fp, #4
0d5c4     A7 22 62 FC | 	wrlong	local03, fp
0d5c8                 | ' t2=pop()
0d5c8                 | ' t1=pop()
0d5c8                 | ' 
0d5c8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
0d5c8     08 4E 85 F1 | 	sub	fp, #8
0d5cc     1F 22 0E F2 | 	cmp	local03, #31 wz
0d5d0     14 4E 05 A1 |  if_e	add	fp, #20
0d5d4     A7 24 02 AB |  if_e	rdlong	local04, fp
0d5d8     14 4E 85 A1 |  if_e	sub	fp, #20
0d5dc     12 23 02 A6 |  if_e	mov	local03, local04
0d5e0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0d5e4     28 00 90 5D |  if_ne	jmp	#LR__1120
0d5e8     00 1E 06 F6 | 	mov	local01, #0
0d5ec     A7 12 02 FB | 	rdlong	arg01, fp
0d5f0     0C 4E 05 F1 | 	add	fp, #12
0d5f4     A7 14 02 FB | 	rdlong	arg02, fp
0d5f8     0C 4E 85 F1 | 	sub	fp, #12
0d5fc     98 82 B0 FD | 	call	#__system___string_cmp
0d600     00 FA 55 F2 | 	cmps	result1, #0 wc
0d604     00 1E 26 36 |  if_ae	not	local01, #0
0d608     A7 1E 62 FC | 	wrlong	local01, fp
0d60c     04 03 90 FD | 	jmp	#LR__1130
0d610                 | LR__1120
0d610                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
0d610     08 4E 05 F1 | 	add	fp, #8
0d614     A7 1E 02 FB | 	rdlong	local01, fp
0d618     08 4E 85 F1 | 	sub	fp, #8
0d61c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d620     14 4E 05 A1 |  if_e	add	fp, #20
0d624     A7 24 02 AB |  if_e	rdlong	local04, fp
0d628     14 4E 85 A1 |  if_e	sub	fp, #20
0d62c     12 23 02 A6 |  if_e	mov	local03, local04
0d630     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d634     2C 00 90 5D |  if_ne	jmp	#LR__1121
0d638     00 1E 06 F6 | 	mov	local01, #0
0d63c     A7 12 02 FB | 	rdlong	arg01, fp
0d640     0C 4E 05 F1 | 	add	fp, #12
0d644     A7 14 02 FB | 	rdlong	arg02, fp
0d648     0C 4E 85 F1 | 	sub	fp, #12
0d64c     01 16 66 F6 | 	neg	arg03, #1
0d650     64 B0 B0 FD | 	call	#__system___float_cmp
0d654     00 FA 55 F2 | 	cmps	result1, #0 wc
0d658     00 1E 26 36 |  if_ae	not	local01, #0
0d65c     A7 1E 62 FC | 	wrlong	local01, fp
0d660     B0 02 90 FD | 	jmp	#LR__1130
0d664                 | LR__1121
0d664                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
0d664     08 4E 05 F1 | 	add	fp, #8
0d668     A7 1E 02 FB | 	rdlong	local01, fp
0d66c     08 4E 85 F1 | 	sub	fp, #8
0d670     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d674     14 4E 05 A1 |  if_e	add	fp, #20
0d678     A7 24 02 AB |  if_e	rdlong	local04, fp
0d67c     14 4E 85 A1 |  if_e	sub	fp, #20
0d680     12 23 02 A6 |  if_e	mov	local03, local04
0d684     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d688     48 00 90 5D |  if_ne	jmp	#LR__1122
0d68c     00 1E 06 F6 | 	mov	local01, #0
0d690     A7 20 02 FB | 	rdlong	local02, fp
0d694     0C 4E 05 F1 | 	add	fp, #12
0d698     A7 12 02 FB | 	rdlong	arg01, fp
0d69c     0C 4E 85 F1 | 	sub	fp, #12
0d6a0     09 13 52 F6 | 	abs	arg01, arg01 wc
0d6a4     1F 26 C6 C9 |  if_b	decod	local05, #31
0d6a8     00 26 06 36 |  if_ae	mov	local05, #0
0d6ac     A8 A8 B0 FD | 	call	#__system___float_fromuns
0d6b0     13 FB 61 F5 | 	xor	result1, local05
0d6b4     FD 14 02 F6 | 	mov	arg02, result1
0d6b8     10 13 02 F6 | 	mov	arg01, local02
0d6bc     01 16 66 F6 | 	neg	arg03, #1
0d6c0     F4 AF B0 FD | 	call	#__system___float_cmp
0d6c4     00 FA 55 F2 | 	cmps	result1, #0 wc
0d6c8     00 1E 26 36 |  if_ae	not	local01, #0
0d6cc     A7 1E 62 FC | 	wrlong	local01, fp
0d6d0     40 02 90 FD | 	jmp	#LR__1130
0d6d4                 | LR__1122
0d6d4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
0d6d4     08 4E 05 F1 | 	add	fp, #8
0d6d8     A7 1E 02 FB | 	rdlong	local01, fp
0d6dc     08 4E 85 F1 | 	sub	fp, #8
0d6e0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d6e4     14 4E 05 A1 |  if_e	add	fp, #20
0d6e8     A7 24 02 AB |  if_e	rdlong	local04, fp
0d6ec     14 4E 85 A1 |  if_e	sub	fp, #20
0d6f0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0d6f4     38 00 90 5D |  if_ne	jmp	#LR__1123
0d6f8     00 1E 06 F6 | 	mov	local01, #0
0d6fc     A7 20 02 FB | 	rdlong	local02, fp
0d700     0C 4E 05 F1 | 	add	fp, #12
0d704     A7 12 02 FB | 	rdlong	arg01, fp
0d708     0C 4E 85 F1 | 	sub	fp, #12
0d70c     48 A8 B0 FD | 	call	#__system___float_fromuns
0d710     FD 14 02 F6 | 	mov	arg02, result1
0d714     10 13 02 F6 | 	mov	arg01, local02
0d718     01 16 66 F6 | 	neg	arg03, #1
0d71c     98 AF B0 FD | 	call	#__system___float_cmp
0d720     00 FA 55 F2 | 	cmps	result1, #0 wc
0d724     00 1E 26 36 |  if_ae	not	local01, #0
0d728     A7 1E 62 FC | 	wrlong	local01, fp
0d72c     E4 01 90 FD | 	jmp	#LR__1130
0d730                 | LR__1123
0d730                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
0d730     08 4E 05 F1 | 	add	fp, #8
0d734     A7 1E 02 FB | 	rdlong	local01, fp
0d738     08 4E 85 F1 | 	sub	fp, #8
0d73c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d740     14 4E 05 A1 |  if_e	add	fp, #20
0d744     A7 22 02 AB |  if_e	rdlong	local03, fp
0d748     14 4E 85 A1 |  if_e	sub	fp, #20
0d74c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d750     44 00 90 5D |  if_ne	jmp	#LR__1124
0d754     00 1E 06 F6 | 	mov	local01, #0
0d758     A7 12 02 FB | 	rdlong	arg01, fp
0d75c     09 13 52 F6 | 	abs	arg01, arg01 wc
0d760     1F 26 C6 C9 |  if_b	decod	local05, #31
0d764     00 26 06 36 |  if_ae	mov	local05, #0
0d768     EC A7 B0 FD | 	call	#__system___float_fromuns
0d76c     13 FB 61 F5 | 	xor	result1, local05
0d770     FD 12 02 F6 | 	mov	arg01, result1
0d774     0C 4E 05 F1 | 	add	fp, #12
0d778     A7 14 02 FB | 	rdlong	arg02, fp
0d77c     0C 4E 85 F1 | 	sub	fp, #12
0d780     01 16 66 F6 | 	neg	arg03, #1
0d784     30 AF B0 FD | 	call	#__system___float_cmp
0d788     00 FA 55 F2 | 	cmps	result1, #0 wc
0d78c     00 1E 26 36 |  if_ae	not	local01, #0
0d790     A7 1E 62 FC | 	wrlong	local01, fp
0d794     7C 01 90 FD | 	jmp	#LR__1130
0d798                 | LR__1124
0d798                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
0d798     08 4E 05 F1 | 	add	fp, #8
0d79c     A7 1E 02 FB | 	rdlong	local01, fp
0d7a0     08 4E 85 F1 | 	sub	fp, #8
0d7a4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d7a8     14 4E 05 A1 |  if_e	add	fp, #20
0d7ac     A7 22 02 AB |  if_e	rdlong	local03, fp
0d7b0     14 4E 85 A1 |  if_e	sub	fp, #20
0d7b4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d7b8     24 00 90 5D |  if_ne	jmp	#LR__1125
0d7bc     00 1E 06 F6 | 	mov	local01, #0
0d7c0     A7 20 02 FB | 	rdlong	local02, fp
0d7c4     0C 4E 05 F1 | 	add	fp, #12
0d7c8     A7 22 02 FB | 	rdlong	local03, fp
0d7cc     0C 4E 85 F1 | 	sub	fp, #12
0d7d0     11 21 52 F2 | 	cmps	local02, local03 wc
0d7d4     01 1E 66 36 |  if_ae	neg	local01, #1
0d7d8     A7 1E 62 FC | 	wrlong	local01, fp
0d7dc     34 01 90 FD | 	jmp	#LR__1130
0d7e0                 | LR__1125
0d7e0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
0d7e0     08 4E 05 F1 | 	add	fp, #8
0d7e4     A7 1E 02 FB | 	rdlong	local01, fp
0d7e8     08 4E 85 F1 | 	sub	fp, #8
0d7ec     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d7f0     14 4E 05 A1 |  if_e	add	fp, #20
0d7f4     A7 22 02 AB |  if_e	rdlong	local03, fp
0d7f8     14 4E 85 A1 |  if_e	sub	fp, #20
0d7fc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d800     24 00 90 5D |  if_ne	jmp	#LR__1126
0d804     00 1E 06 F6 | 	mov	local01, #0
0d808     A7 20 02 FB | 	rdlong	local02, fp
0d80c     0C 4E 05 F1 | 	add	fp, #12
0d810     A7 22 02 FB | 	rdlong	local03, fp
0d814     0C 4E 85 F1 | 	sub	fp, #12
0d818     11 21 52 F2 | 	cmps	local02, local03 wc
0d81c     01 1E 66 36 |  if_ae	neg	local01, #1
0d820     A7 1E 62 FC | 	wrlong	local01, fp
0d824     EC 00 90 FD | 	jmp	#LR__1130
0d828                 | LR__1126
0d828                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
0d828     08 4E 05 F1 | 	add	fp, #8
0d82c     A7 1E 02 FB | 	rdlong	local01, fp
0d830     08 4E 85 F1 | 	sub	fp, #8
0d834     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d838     14 4E 05 A1 |  if_e	add	fp, #20
0d83c     A7 22 02 AB |  if_e	rdlong	local03, fp
0d840     14 4E 85 A1 |  if_e	sub	fp, #20
0d844     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d848     34 00 90 5D |  if_ne	jmp	#LR__1127
0d84c     00 1E 06 F6 | 	mov	local01, #0
0d850     A7 12 02 FB | 	rdlong	arg01, fp
0d854     00 A7 B0 FD | 	call	#__system___float_fromuns
0d858     FD 12 02 F6 | 	mov	arg01, result1
0d85c     0C 4E 05 F1 | 	add	fp, #12
0d860     A7 14 02 FB | 	rdlong	arg02, fp
0d864     0C 4E 85 F1 | 	sub	fp, #12
0d868     01 16 66 F6 | 	neg	arg03, #1
0d86c     48 AE B0 FD | 	call	#__system___float_cmp
0d870     00 FA 55 F2 | 	cmps	result1, #0 wc
0d874     00 1E 26 36 |  if_ae	not	local01, #0
0d878     A7 1E 62 FC | 	wrlong	local01, fp
0d87c     94 00 90 FD | 	jmp	#LR__1130
0d880                 | LR__1127
0d880                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
0d880     08 4E 05 F1 | 	add	fp, #8
0d884     A7 1E 02 FB | 	rdlong	local01, fp
0d888     08 4E 85 F1 | 	sub	fp, #8
0d88c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d890     14 4E 05 A1 |  if_e	add	fp, #20
0d894     A7 22 02 AB |  if_e	rdlong	local03, fp
0d898     14 4E 85 A1 |  if_e	sub	fp, #20
0d89c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d8a0     24 00 90 5D |  if_ne	jmp	#LR__1128
0d8a4     00 1E 06 F6 | 	mov	local01, #0
0d8a8     A7 20 02 FB | 	rdlong	local02, fp
0d8ac     0C 4E 05 F1 | 	add	fp, #12
0d8b0     A7 22 02 FB | 	rdlong	local03, fp
0d8b4     0C 4E 85 F1 | 	sub	fp, #12
0d8b8     11 21 52 F2 | 	cmps	local02, local03 wc
0d8bc     01 1E 66 36 |  if_ae	neg	local01, #1
0d8c0     A7 1E 62 FC | 	wrlong	local01, fp
0d8c4     4C 00 90 FD | 	jmp	#LR__1130
0d8c8                 | LR__1128
0d8c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
0d8c8     08 4E 05 F1 | 	add	fp, #8
0d8cc     A7 1E 02 FB | 	rdlong	local01, fp
0d8d0     08 4E 85 F1 | 	sub	fp, #8
0d8d4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d8d8     14 4E 05 A1 |  if_e	add	fp, #20
0d8dc     A7 22 02 AB |  if_e	rdlong	local03, fp
0d8e0     14 4E 85 A1 |  if_e	sub	fp, #20
0d8e4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d8e8     24 00 90 5D |  if_ne	jmp	#LR__1129
0d8ec     00 1E 06 F6 | 	mov	local01, #0
0d8f0     A7 20 02 FB | 	rdlong	local02, fp
0d8f4     0C 4E 05 F1 | 	add	fp, #12
0d8f8     A7 22 02 FB | 	rdlong	local03, fp
0d8fc     0C 4E 85 F1 | 	sub	fp, #12
0d900     11 21 12 F2 | 	cmp	local02, local03 wc
0d904     01 1E 66 36 |  if_ae	neg	local01, #1
0d908     A7 1E 62 FC | 	wrlong	local01, fp
0d90c     04 00 90 FD | 	jmp	#LR__1130
0d910                 | LR__1129
0d910     A7 00 68 FC | 	wrlong	#0, fp
0d914                 | LR__1130
0d914     08 4E 05 F1 | 	add	fp, #8
0d918     A7 38 68 FC | 	wrlong	#28, fp
0d91c     08 4E 85 F1 | 	sub	fp, #8
0d920     A7 12 02 F6 | 	mov	arg01, fp
0d924     E4 B0 BF FD | 	call	#_push
0d928     A7 F0 03 F6 | 	mov	ptra, fp
0d92c     B2 00 A0 FD | 	call	#popregs_
0d930                 | _do_ge_ret
0d930     2D 00 64 FD | 	ret
0d934                 | 
0d934                 | ' 
0d934                 | ' sub do_le
0d934                 | _do_le
0d934     05 4A 05 F6 | 	mov	COUNT_, #5
0d938     A8 00 A0 FD | 	call	#pushregs_
0d93c     18 F0 07 F1 | 	add	ptra, #24
0d940     30 B0 BF FD | 	call	#_pop
0d944     FD 1E 02 F6 | 	mov	local01, result1
0d948     FE 20 02 F6 | 	mov	local02, result2
0d94c     FF 22 02 F6 | 	mov	local03, result3
0d950     0C 4E 05 F1 | 	add	fp, #12
0d954     A7 1E 62 FC | 	wrlong	local01, fp
0d958     04 4E 05 F1 | 	add	fp, #4
0d95c     A7 20 62 FC | 	wrlong	local02, fp
0d960     04 4E 05 F1 | 	add	fp, #4
0d964     A7 22 62 FC | 	wrlong	local03, fp
0d968     14 4E 85 F1 | 	sub	fp, #20
0d96c     04 B0 BF FD | 	call	#_pop
0d970     FF 22 02 F6 | 	mov	local03, result3
0d974     A7 FA 61 FC | 	wrlong	result1, fp
0d978     04 4E 05 F1 | 	add	fp, #4
0d97c     A7 FC 61 FC | 	wrlong	result2, fp
0d980     04 4E 05 F1 | 	add	fp, #4
0d984     A7 22 62 FC | 	wrlong	local03, fp
0d988                 | ' t2=pop()
0d988                 | ' t1=pop()
0d988                 | ' 
0d988                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
0d988     08 4E 85 F1 | 	sub	fp, #8
0d98c     1F 22 0E F2 | 	cmp	local03, #31 wz
0d990     14 4E 05 A1 |  if_e	add	fp, #20
0d994     A7 24 02 AB |  if_e	rdlong	local04, fp
0d998     14 4E 85 A1 |  if_e	sub	fp, #20
0d99c     12 23 02 A6 |  if_e	mov	local03, local04
0d9a0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0d9a4     28 00 90 5D |  if_ne	jmp	#LR__1140
0d9a8     00 1E 06 F6 | 	mov	local01, #0
0d9ac     A7 12 02 FB | 	rdlong	arg01, fp
0d9b0     0C 4E 05 F1 | 	add	fp, #12
0d9b4     A7 14 02 FB | 	rdlong	arg02, fp
0d9b8     0C 4E 85 F1 | 	sub	fp, #12
0d9bc     D8 7E B0 FD | 	call	#__system___string_cmp
0d9c0     01 FA 55 F2 | 	cmps	result1, #1 wc
0d9c4     00 1E 26 C6 |  if_b	not	local01, #0
0d9c8     A7 1E 62 FC | 	wrlong	local01, fp
0d9cc     04 03 90 FD | 	jmp	#LR__1150
0d9d0                 | LR__1140
0d9d0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
0d9d0     08 4E 05 F1 | 	add	fp, #8
0d9d4     A7 1E 02 FB | 	rdlong	local01, fp
0d9d8     08 4E 85 F1 | 	sub	fp, #8
0d9dc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d9e0     14 4E 05 A1 |  if_e	add	fp, #20
0d9e4     A7 24 02 AB |  if_e	rdlong	local04, fp
0d9e8     14 4E 85 A1 |  if_e	sub	fp, #20
0d9ec     12 23 02 A6 |  if_e	mov	local03, local04
0d9f0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d9f4     2C 00 90 5D |  if_ne	jmp	#LR__1141
0d9f8     00 1E 06 F6 | 	mov	local01, #0
0d9fc     A7 12 02 FB | 	rdlong	arg01, fp
0da00     0C 4E 05 F1 | 	add	fp, #12
0da04     A7 14 02 FB | 	rdlong	arg02, fp
0da08     0C 4E 85 F1 | 	sub	fp, #12
0da0c     01 16 06 F6 | 	mov	arg03, #1
0da10     A4 AC B0 FD | 	call	#__system___float_cmp
0da14     01 FA 55 F2 | 	cmps	result1, #1 wc
0da18     00 1E 26 C6 |  if_b	not	local01, #0
0da1c     A7 1E 62 FC | 	wrlong	local01, fp
0da20     B0 02 90 FD | 	jmp	#LR__1150
0da24                 | LR__1141
0da24                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
0da24     08 4E 05 F1 | 	add	fp, #8
0da28     A7 1E 02 FB | 	rdlong	local01, fp
0da2c     08 4E 85 F1 | 	sub	fp, #8
0da30     1E 1E 0E F2 | 	cmp	local01, #30 wz
0da34     14 4E 05 A1 |  if_e	add	fp, #20
0da38     A7 24 02 AB |  if_e	rdlong	local04, fp
0da3c     14 4E 85 A1 |  if_e	sub	fp, #20
0da40     12 23 02 A6 |  if_e	mov	local03, local04
0da44     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0da48     48 00 90 5D |  if_ne	jmp	#LR__1142
0da4c     00 1E 06 F6 | 	mov	local01, #0
0da50     A7 20 02 FB | 	rdlong	local02, fp
0da54     0C 4E 05 F1 | 	add	fp, #12
0da58     A7 12 02 FB | 	rdlong	arg01, fp
0da5c     0C 4E 85 F1 | 	sub	fp, #12
0da60     09 13 52 F6 | 	abs	arg01, arg01 wc
0da64     1F 26 C6 C9 |  if_b	decod	local05, #31
0da68     00 26 06 36 |  if_ae	mov	local05, #0
0da6c     E8 A4 B0 FD | 	call	#__system___float_fromuns
0da70     13 FB 61 F5 | 	xor	result1, local05
0da74     FD 14 02 F6 | 	mov	arg02, result1
0da78     10 13 02 F6 | 	mov	arg01, local02
0da7c     01 16 06 F6 | 	mov	arg03, #1
0da80     34 AC B0 FD | 	call	#__system___float_cmp
0da84     01 FA 55 F2 | 	cmps	result1, #1 wc
0da88     00 1E 26 C6 |  if_b	not	local01, #0
0da8c     A7 1E 62 FC | 	wrlong	local01, fp
0da90     40 02 90 FD | 	jmp	#LR__1150
0da94                 | LR__1142
0da94                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
0da94     08 4E 05 F1 | 	add	fp, #8
0da98     A7 1E 02 FB | 	rdlong	local01, fp
0da9c     08 4E 85 F1 | 	sub	fp, #8
0daa0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0daa4     14 4E 05 A1 |  if_e	add	fp, #20
0daa8     A7 24 02 AB |  if_e	rdlong	local04, fp
0daac     14 4E 85 A1 |  if_e	sub	fp, #20
0dab0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0dab4     38 00 90 5D |  if_ne	jmp	#LR__1143
0dab8     00 1E 06 F6 | 	mov	local01, #0
0dabc     A7 20 02 FB | 	rdlong	local02, fp
0dac0     0C 4E 05 F1 | 	add	fp, #12
0dac4     A7 12 02 FB | 	rdlong	arg01, fp
0dac8     0C 4E 85 F1 | 	sub	fp, #12
0dacc     88 A4 B0 FD | 	call	#__system___float_fromuns
0dad0     FD 14 02 F6 | 	mov	arg02, result1
0dad4     10 13 02 F6 | 	mov	arg01, local02
0dad8     01 16 06 F6 | 	mov	arg03, #1
0dadc     D8 AB B0 FD | 	call	#__system___float_cmp
0dae0     01 FA 55 F2 | 	cmps	result1, #1 wc
0dae4     00 1E 26 C6 |  if_b	not	local01, #0
0dae8     A7 1E 62 FC | 	wrlong	local01, fp
0daec     E4 01 90 FD | 	jmp	#LR__1150
0daf0                 | LR__1143
0daf0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
0daf0     08 4E 05 F1 | 	add	fp, #8
0daf4     A7 1E 02 FB | 	rdlong	local01, fp
0daf8     08 4E 85 F1 | 	sub	fp, #8
0dafc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0db00     14 4E 05 A1 |  if_e	add	fp, #20
0db04     A7 22 02 AB |  if_e	rdlong	local03, fp
0db08     14 4E 85 A1 |  if_e	sub	fp, #20
0db0c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0db10     44 00 90 5D |  if_ne	jmp	#LR__1144
0db14     00 1E 06 F6 | 	mov	local01, #0
0db18     A7 12 02 FB | 	rdlong	arg01, fp
0db1c     09 13 52 F6 | 	abs	arg01, arg01 wc
0db20     1F 26 C6 C9 |  if_b	decod	local05, #31
0db24     00 26 06 36 |  if_ae	mov	local05, #0
0db28     2C A4 B0 FD | 	call	#__system___float_fromuns
0db2c     13 FB 61 F5 | 	xor	result1, local05
0db30     FD 12 02 F6 | 	mov	arg01, result1
0db34     0C 4E 05 F1 | 	add	fp, #12
0db38     A7 14 02 FB | 	rdlong	arg02, fp
0db3c     0C 4E 85 F1 | 	sub	fp, #12
0db40     01 16 06 F6 | 	mov	arg03, #1
0db44     70 AB B0 FD | 	call	#__system___float_cmp
0db48     01 FA 55 F2 | 	cmps	result1, #1 wc
0db4c     00 1E 26 C6 |  if_b	not	local01, #0
0db50     A7 1E 62 FC | 	wrlong	local01, fp
0db54     7C 01 90 FD | 	jmp	#LR__1150
0db58                 | LR__1144
0db58                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
0db58     08 4E 05 F1 | 	add	fp, #8
0db5c     A7 1E 02 FB | 	rdlong	local01, fp
0db60     08 4E 85 F1 | 	sub	fp, #8
0db64     1C 1E 0E F2 | 	cmp	local01, #28 wz
0db68     14 4E 05 A1 |  if_e	add	fp, #20
0db6c     A7 22 02 AB |  if_e	rdlong	local03, fp
0db70     14 4E 85 A1 |  if_e	sub	fp, #20
0db74     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0db78     24 00 90 5D |  if_ne	jmp	#LR__1145
0db7c     00 1E 06 F6 | 	mov	local01, #0
0db80     A7 20 02 FB | 	rdlong	local02, fp
0db84     0C 4E 05 F1 | 	add	fp, #12
0db88     A7 22 02 FB | 	rdlong	local03, fp
0db8c     0C 4E 85 F1 | 	sub	fp, #12
0db90     11 21 5A F2 | 	cmps	local02, local03 wcz
0db94     01 1E 66 E6 |  if_be	neg	local01, #1
0db98     A7 1E 62 FC | 	wrlong	local01, fp
0db9c     34 01 90 FD | 	jmp	#LR__1150
0dba0                 | LR__1145
0dba0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
0dba0     08 4E 05 F1 | 	add	fp, #8
0dba4     A7 1E 02 FB | 	rdlong	local01, fp
0dba8     08 4E 85 F1 | 	sub	fp, #8
0dbac     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dbb0     14 4E 05 A1 |  if_e	add	fp, #20
0dbb4     A7 22 02 AB |  if_e	rdlong	local03, fp
0dbb8     14 4E 85 A1 |  if_e	sub	fp, #20
0dbbc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0dbc0     24 00 90 5D |  if_ne	jmp	#LR__1146
0dbc4     00 1E 06 F6 | 	mov	local01, #0
0dbc8     A7 20 02 FB | 	rdlong	local02, fp
0dbcc     0C 4E 05 F1 | 	add	fp, #12
0dbd0     A7 22 02 FB | 	rdlong	local03, fp
0dbd4     0C 4E 85 F1 | 	sub	fp, #12
0dbd8     11 21 5A F2 | 	cmps	local02, local03 wcz
0dbdc     01 1E 66 E6 |  if_be	neg	local01, #1
0dbe0     A7 1E 62 FC | 	wrlong	local01, fp
0dbe4     EC 00 90 FD | 	jmp	#LR__1150
0dbe8                 | LR__1146
0dbe8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
0dbe8     08 4E 05 F1 | 	add	fp, #8
0dbec     A7 1E 02 FB | 	rdlong	local01, fp
0dbf0     08 4E 85 F1 | 	sub	fp, #8
0dbf4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0dbf8     14 4E 05 A1 |  if_e	add	fp, #20
0dbfc     A7 22 02 AB |  if_e	rdlong	local03, fp
0dc00     14 4E 85 A1 |  if_e	sub	fp, #20
0dc04     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0dc08     34 00 90 5D |  if_ne	jmp	#LR__1147
0dc0c     00 1E 06 F6 | 	mov	local01, #0
0dc10     A7 12 02 FB | 	rdlong	arg01, fp
0dc14     40 A3 B0 FD | 	call	#__system___float_fromuns
0dc18     FD 12 02 F6 | 	mov	arg01, result1
0dc1c     0C 4E 05 F1 | 	add	fp, #12
0dc20     A7 14 02 FB | 	rdlong	arg02, fp
0dc24     0C 4E 85 F1 | 	sub	fp, #12
0dc28     01 16 06 F6 | 	mov	arg03, #1
0dc2c     88 AA B0 FD | 	call	#__system___float_cmp
0dc30     01 FA 55 F2 | 	cmps	result1, #1 wc
0dc34     00 1E 26 C6 |  if_b	not	local01, #0
0dc38     A7 1E 62 FC | 	wrlong	local01, fp
0dc3c     94 00 90 FD | 	jmp	#LR__1150
0dc40                 | LR__1147
0dc40                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
0dc40     08 4E 05 F1 | 	add	fp, #8
0dc44     A7 1E 02 FB | 	rdlong	local01, fp
0dc48     08 4E 85 F1 | 	sub	fp, #8
0dc4c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0dc50     14 4E 05 A1 |  if_e	add	fp, #20
0dc54     A7 22 02 AB |  if_e	rdlong	local03, fp
0dc58     14 4E 85 A1 |  if_e	sub	fp, #20
0dc5c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0dc60     24 00 90 5D |  if_ne	jmp	#LR__1148
0dc64     00 1E 06 F6 | 	mov	local01, #0
0dc68     A7 20 02 FB | 	rdlong	local02, fp
0dc6c     0C 4E 05 F1 | 	add	fp, #12
0dc70     A7 22 02 FB | 	rdlong	local03, fp
0dc74     0C 4E 85 F1 | 	sub	fp, #12
0dc78     11 21 5A F2 | 	cmps	local02, local03 wcz
0dc7c     01 1E 66 E6 |  if_be	neg	local01, #1
0dc80     A7 1E 62 FC | 	wrlong	local01, fp
0dc84     4C 00 90 FD | 	jmp	#LR__1150
0dc88                 | LR__1148
0dc88                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
0dc88     08 4E 05 F1 | 	add	fp, #8
0dc8c     A7 1E 02 FB | 	rdlong	local01, fp
0dc90     08 4E 85 F1 | 	sub	fp, #8
0dc94     1D 1E 0E F2 | 	cmp	local01, #29 wz
0dc98     14 4E 05 A1 |  if_e	add	fp, #20
0dc9c     A7 22 02 AB |  if_e	rdlong	local03, fp
0dca0     14 4E 85 A1 |  if_e	sub	fp, #20
0dca4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0dca8     24 00 90 5D |  if_ne	jmp	#LR__1149
0dcac     00 1E 06 F6 | 	mov	local01, #0
0dcb0     A7 20 02 FB | 	rdlong	local02, fp
0dcb4     0C 4E 05 F1 | 	add	fp, #12
0dcb8     A7 22 02 FB | 	rdlong	local03, fp
0dcbc     0C 4E 85 F1 | 	sub	fp, #12
0dcc0     11 21 1A F2 | 	cmp	local02, local03 wcz
0dcc4     01 1E 66 E6 |  if_be	neg	local01, #1
0dcc8     A7 1E 62 FC | 	wrlong	local01, fp
0dccc     04 00 90 FD | 	jmp	#LR__1150
0dcd0                 | LR__1149
0dcd0     A7 00 68 FC | 	wrlong	#0, fp
0dcd4                 | LR__1150
0dcd4     08 4E 05 F1 | 	add	fp, #8
0dcd8     A7 38 68 FC | 	wrlong	#28, fp
0dcdc     08 4E 85 F1 | 	sub	fp, #8
0dce0     A7 12 02 F6 | 	mov	arg01, fp
0dce4     24 AD BF FD | 	call	#_push
0dce8     A7 F0 03 F6 | 	mov	ptra, fp
0dcec     B2 00 A0 FD | 	call	#popregs_
0dcf0                 | _do_le_ret
0dcf0     2D 00 64 FD | 	ret
0dcf4                 | 
0dcf4                 | ' 
0dcf4                 | ' 
0dcf4                 | ' sub do_ne
0dcf4                 | _do_ne
0dcf4     05 4A 05 F6 | 	mov	COUNT_, #5
0dcf8     A8 00 A0 FD | 	call	#pushregs_
0dcfc     18 F0 07 F1 | 	add	ptra, #24
0dd00     70 AC BF FD | 	call	#_pop
0dd04     FD 1E 02 F6 | 	mov	local01, result1
0dd08     FE 20 02 F6 | 	mov	local02, result2
0dd0c     FF 22 02 F6 | 	mov	local03, result3
0dd10     0C 4E 05 F1 | 	add	fp, #12
0dd14     A7 1E 62 FC | 	wrlong	local01, fp
0dd18     04 4E 05 F1 | 	add	fp, #4
0dd1c     A7 20 62 FC | 	wrlong	local02, fp
0dd20     04 4E 05 F1 | 	add	fp, #4
0dd24     A7 22 62 FC | 	wrlong	local03, fp
0dd28     14 4E 85 F1 | 	sub	fp, #20
0dd2c     44 AC BF FD | 	call	#_pop
0dd30     FF 22 02 F6 | 	mov	local03, result3
0dd34     A7 FA 61 FC | 	wrlong	result1, fp
0dd38     04 4E 05 F1 | 	add	fp, #4
0dd3c     A7 FC 61 FC | 	wrlong	result2, fp
0dd40     04 4E 05 F1 | 	add	fp, #4
0dd44     A7 22 62 FC | 	wrlong	local03, fp
0dd48                 | ' t2=pop()
0dd48                 | ' t1=pop()
0dd48                 | ' 
0dd48                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
0dd48     08 4E 85 F1 | 	sub	fp, #8
0dd4c     1F 22 0E F2 | 	cmp	local03, #31 wz
0dd50     14 4E 05 A1 |  if_e	add	fp, #20
0dd54     A7 24 02 AB |  if_e	rdlong	local04, fp
0dd58     14 4E 85 A1 |  if_e	sub	fp, #20
0dd5c     12 23 02 A6 |  if_e	mov	local03, local04
0dd60     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0dd64     28 00 90 5D |  if_ne	jmp	#LR__1160
0dd68     00 1E 06 F6 | 	mov	local01, #0
0dd6c     A7 12 02 FB | 	rdlong	arg01, fp
0dd70     0C 4E 05 F1 | 	add	fp, #12
0dd74     A7 14 02 FB | 	rdlong	arg02, fp
0dd78     0C 4E 85 F1 | 	sub	fp, #12
0dd7c     18 7B B0 FD | 	call	#__system___string_cmp
0dd80     00 FA 0D F2 | 	cmp	result1, #0 wz
0dd84     00 1E 26 56 |  if_ne	not	local01, #0
0dd88     A7 1E 62 FC | 	wrlong	local01, fp
0dd8c     04 03 90 FD | 	jmp	#LR__1170
0dd90                 | LR__1160
0dd90                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
0dd90     08 4E 05 F1 | 	add	fp, #8
0dd94     A7 1E 02 FB | 	rdlong	local01, fp
0dd98     08 4E 85 F1 | 	sub	fp, #8
0dd9c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0dda0     14 4E 05 A1 |  if_e	add	fp, #20
0dda4     A7 24 02 AB |  if_e	rdlong	local04, fp
0dda8     14 4E 85 A1 |  if_e	sub	fp, #20
0ddac     12 23 02 A6 |  if_e	mov	local03, local04
0ddb0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ddb4     2C 00 90 5D |  if_ne	jmp	#LR__1161
0ddb8     00 1E 06 F6 | 	mov	local01, #0
0ddbc     A7 12 02 FB | 	rdlong	arg01, fp
0ddc0     0C 4E 05 F1 | 	add	fp, #12
0ddc4     A7 14 02 FB | 	rdlong	arg02, fp
0ddc8     0C 4E 85 F1 | 	sub	fp, #12
0ddcc     01 16 06 F6 | 	mov	arg03, #1
0ddd0     E4 A8 B0 FD | 	call	#__system___float_cmp
0ddd4     00 FA 0D F2 | 	cmp	result1, #0 wz
0ddd8     00 1E 26 56 |  if_ne	not	local01, #0
0dddc     A7 1E 62 FC | 	wrlong	local01, fp
0dde0     B0 02 90 FD | 	jmp	#LR__1170
0dde4                 | LR__1161
0dde4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
0dde4     08 4E 05 F1 | 	add	fp, #8
0dde8     A7 1E 02 FB | 	rdlong	local01, fp
0ddec     08 4E 85 F1 | 	sub	fp, #8
0ddf0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ddf4     14 4E 05 A1 |  if_e	add	fp, #20
0ddf8     A7 24 02 AB |  if_e	rdlong	local04, fp
0ddfc     14 4E 85 A1 |  if_e	sub	fp, #20
0de00     12 23 02 A6 |  if_e	mov	local03, local04
0de04     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0de08     48 00 90 5D |  if_ne	jmp	#LR__1162
0de0c     00 1E 06 F6 | 	mov	local01, #0
0de10     A7 20 02 FB | 	rdlong	local02, fp
0de14     0C 4E 05 F1 | 	add	fp, #12
0de18     A7 12 02 FB | 	rdlong	arg01, fp
0de1c     0C 4E 85 F1 | 	sub	fp, #12
0de20     09 13 52 F6 | 	abs	arg01, arg01 wc
0de24     1F 26 C6 C9 |  if_b	decod	local05, #31
0de28     00 26 06 36 |  if_ae	mov	local05, #0
0de2c     28 A1 B0 FD | 	call	#__system___float_fromuns
0de30     13 FB 61 F5 | 	xor	result1, local05
0de34     FD 14 02 F6 | 	mov	arg02, result1
0de38     10 13 02 F6 | 	mov	arg01, local02
0de3c     01 16 06 F6 | 	mov	arg03, #1
0de40     74 A8 B0 FD | 	call	#__system___float_cmp
0de44     00 FA 0D F2 | 	cmp	result1, #0 wz
0de48     00 1E 26 56 |  if_ne	not	local01, #0
0de4c     A7 1E 62 FC | 	wrlong	local01, fp
0de50     40 02 90 FD | 	jmp	#LR__1170
0de54                 | LR__1162
0de54                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
0de54     08 4E 05 F1 | 	add	fp, #8
0de58     A7 1E 02 FB | 	rdlong	local01, fp
0de5c     08 4E 85 F1 | 	sub	fp, #8
0de60     1E 1E 0E F2 | 	cmp	local01, #30 wz
0de64     14 4E 05 A1 |  if_e	add	fp, #20
0de68     A7 24 02 AB |  if_e	rdlong	local04, fp
0de6c     14 4E 85 A1 |  if_e	sub	fp, #20
0de70     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0de74     38 00 90 5D |  if_ne	jmp	#LR__1163
0de78     00 1E 06 F6 | 	mov	local01, #0
0de7c     A7 20 02 FB | 	rdlong	local02, fp
0de80     0C 4E 05 F1 | 	add	fp, #12
0de84     A7 12 02 FB | 	rdlong	arg01, fp
0de88     0C 4E 85 F1 | 	sub	fp, #12
0de8c     C8 A0 B0 FD | 	call	#__system___float_fromuns
0de90     FD 14 02 F6 | 	mov	arg02, result1
0de94     10 13 02 F6 | 	mov	arg01, local02
0de98     01 16 06 F6 | 	mov	arg03, #1
0de9c     18 A8 B0 FD | 	call	#__system___float_cmp
0dea0     00 FA 0D F2 | 	cmp	result1, #0 wz
0dea4     00 1E 26 56 |  if_ne	not	local01, #0
0dea8     A7 1E 62 FC | 	wrlong	local01, fp
0deac     E4 01 90 FD | 	jmp	#LR__1170
0deb0                 | LR__1163
0deb0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
0deb0     08 4E 05 F1 | 	add	fp, #8
0deb4     A7 1E 02 FB | 	rdlong	local01, fp
0deb8     08 4E 85 F1 | 	sub	fp, #8
0debc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dec0     14 4E 05 A1 |  if_e	add	fp, #20
0dec4     A7 22 02 AB |  if_e	rdlong	local03, fp
0dec8     14 4E 85 A1 |  if_e	sub	fp, #20
0decc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ded0     44 00 90 5D |  if_ne	jmp	#LR__1164
0ded4     00 1E 06 F6 | 	mov	local01, #0
0ded8     A7 12 02 FB | 	rdlong	arg01, fp
0dedc     09 13 52 F6 | 	abs	arg01, arg01 wc
0dee0     1F 26 C6 C9 |  if_b	decod	local05, #31
0dee4     00 26 06 36 |  if_ae	mov	local05, #0
0dee8     6C A0 B0 FD | 	call	#__system___float_fromuns
0deec     13 FB 61 F5 | 	xor	result1, local05
0def0     FD 12 02 F6 | 	mov	arg01, result1
0def4     0C 4E 05 F1 | 	add	fp, #12
0def8     A7 14 02 FB | 	rdlong	arg02, fp
0defc     0C 4E 85 F1 | 	sub	fp, #12
0df00     01 16 06 F6 | 	mov	arg03, #1
0df04     B0 A7 B0 FD | 	call	#__system___float_cmp
0df08     00 FA 0D F2 | 	cmp	result1, #0 wz
0df0c     00 1E 26 56 |  if_ne	not	local01, #0
0df10     A7 1E 62 FC | 	wrlong	local01, fp
0df14     7C 01 90 FD | 	jmp	#LR__1170
0df18                 | LR__1164
0df18                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
0df18     08 4E 05 F1 | 	add	fp, #8
0df1c     A7 1E 02 FB | 	rdlong	local01, fp
0df20     08 4E 85 F1 | 	sub	fp, #8
0df24     1C 1E 0E F2 | 	cmp	local01, #28 wz
0df28     14 4E 05 A1 |  if_e	add	fp, #20
0df2c     A7 22 02 AB |  if_e	rdlong	local03, fp
0df30     14 4E 85 A1 |  if_e	sub	fp, #20
0df34     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0df38     24 00 90 5D |  if_ne	jmp	#LR__1165
0df3c     00 1E 06 F6 | 	mov	local01, #0
0df40     A7 20 02 FB | 	rdlong	local02, fp
0df44     0C 4E 05 F1 | 	add	fp, #12
0df48     A7 22 02 FB | 	rdlong	local03, fp
0df4c     0C 4E 85 F1 | 	sub	fp, #12
0df50     11 21 0A F2 | 	cmp	local02, local03 wz
0df54     01 1E 66 56 |  if_ne	neg	local01, #1
0df58     A7 1E 62 FC | 	wrlong	local01, fp
0df5c     34 01 90 FD | 	jmp	#LR__1170
0df60                 | LR__1165
0df60                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
0df60     08 4E 05 F1 | 	add	fp, #8
0df64     A7 1E 02 FB | 	rdlong	local01, fp
0df68     08 4E 85 F1 | 	sub	fp, #8
0df6c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0df70     14 4E 05 A1 |  if_e	add	fp, #20
0df74     A7 22 02 AB |  if_e	rdlong	local03, fp
0df78     14 4E 85 A1 |  if_e	sub	fp, #20
0df7c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0df80     24 00 90 5D |  if_ne	jmp	#LR__1166
0df84     00 1E 06 F6 | 	mov	local01, #0
0df88     A7 20 02 FB | 	rdlong	local02, fp
0df8c     0C 4E 05 F1 | 	add	fp, #12
0df90     A7 22 02 FB | 	rdlong	local03, fp
0df94     0C 4E 85 F1 | 	sub	fp, #12
0df98     11 21 0A F2 | 	cmp	local02, local03 wz
0df9c     01 1E 66 56 |  if_ne	neg	local01, #1
0dfa0     A7 1E 62 FC | 	wrlong	local01, fp
0dfa4     EC 00 90 FD | 	jmp	#LR__1170
0dfa8                 | LR__1166
0dfa8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
0dfa8     08 4E 05 F1 | 	add	fp, #8
0dfac     A7 1E 02 FB | 	rdlong	local01, fp
0dfb0     08 4E 85 F1 | 	sub	fp, #8
0dfb4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0dfb8     14 4E 05 A1 |  if_e	add	fp, #20
0dfbc     A7 22 02 AB |  if_e	rdlong	local03, fp
0dfc0     14 4E 85 A1 |  if_e	sub	fp, #20
0dfc4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0dfc8     34 00 90 5D |  if_ne	jmp	#LR__1167
0dfcc     00 1E 06 F6 | 	mov	local01, #0
0dfd0     A7 12 02 FB | 	rdlong	arg01, fp
0dfd4     80 9F B0 FD | 	call	#__system___float_fromuns
0dfd8     FD 12 02 F6 | 	mov	arg01, result1
0dfdc     0C 4E 05 F1 | 	add	fp, #12
0dfe0     A7 14 02 FB | 	rdlong	arg02, fp
0dfe4     0C 4E 85 F1 | 	sub	fp, #12
0dfe8     01 16 06 F6 | 	mov	arg03, #1
0dfec     C8 A6 B0 FD | 	call	#__system___float_cmp
0dff0     00 FA 0D F2 | 	cmp	result1, #0 wz
0dff4     00 1E 26 56 |  if_ne	not	local01, #0
0dff8     A7 1E 62 FC | 	wrlong	local01, fp
0dffc     94 00 90 FD | 	jmp	#LR__1170
0e000                 | LR__1167
0e000                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
0e000     08 4E 05 F1 | 	add	fp, #8
0e004     A7 1E 02 FB | 	rdlong	local01, fp
0e008     08 4E 85 F1 | 	sub	fp, #8
0e00c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e010     14 4E 05 A1 |  if_e	add	fp, #20
0e014     A7 22 02 AB |  if_e	rdlong	local03, fp
0e018     14 4E 85 A1 |  if_e	sub	fp, #20
0e01c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e020     24 00 90 5D |  if_ne	jmp	#LR__1168
0e024     00 1E 06 F6 | 	mov	local01, #0
0e028     A7 20 02 FB | 	rdlong	local02, fp
0e02c     0C 4E 05 F1 | 	add	fp, #12
0e030     A7 22 02 FB | 	rdlong	local03, fp
0e034     0C 4E 85 F1 | 	sub	fp, #12
0e038     11 21 0A F2 | 	cmp	local02, local03 wz
0e03c     01 1E 66 56 |  if_ne	neg	local01, #1
0e040     A7 1E 62 FC | 	wrlong	local01, fp
0e044     4C 00 90 FD | 	jmp	#LR__1170
0e048                 | LR__1168
0e048                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
0e048     08 4E 05 F1 | 	add	fp, #8
0e04c     A7 1E 02 FB | 	rdlong	local01, fp
0e050     08 4E 85 F1 | 	sub	fp, #8
0e054     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e058     14 4E 05 A1 |  if_e	add	fp, #20
0e05c     A7 22 02 AB |  if_e	rdlong	local03, fp
0e060     14 4E 85 A1 |  if_e	sub	fp, #20
0e064     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e068     24 00 90 5D |  if_ne	jmp	#LR__1169
0e06c     00 1E 06 F6 | 	mov	local01, #0
0e070     A7 20 02 FB | 	rdlong	local02, fp
0e074     0C 4E 05 F1 | 	add	fp, #12
0e078     A7 22 02 FB | 	rdlong	local03, fp
0e07c     0C 4E 85 F1 | 	sub	fp, #12
0e080     11 21 0A F2 | 	cmp	local02, local03 wz
0e084     01 1E 66 56 |  if_ne	neg	local01, #1
0e088     A7 1E 62 FC | 	wrlong	local01, fp
0e08c     04 00 90 FD | 	jmp	#LR__1170
0e090                 | LR__1169
0e090     A7 00 68 FC | 	wrlong	#0, fp
0e094                 | LR__1170
0e094     08 4E 05 F1 | 	add	fp, #8
0e098     A7 38 68 FC | 	wrlong	#28, fp
0e09c     08 4E 85 F1 | 	sub	fp, #8
0e0a0     A7 12 02 F6 | 	mov	arg01, fp
0e0a4     64 A9 BF FD | 	call	#_push
0e0a8     A7 F0 03 F6 | 	mov	ptra, fp
0e0ac     B2 00 A0 FD | 	call	#popregs_
0e0b0                 | _do_ne_ret
0e0b0     2D 00 64 FD | 	ret
0e0b4                 | 
0e0b4                 | ' 
0e0b4                 | ' 
0e0b4                 | ' 
0e0b4                 | ' ' -------------------   convert a variable on the top of stack to integer
0e0b4                 | ' 
0e0b4                 | ' sub do_converttoint
0e0b4                 | _do_converttoint
0e0b4     02 4A 05 F6 | 	mov	COUNT_, #2
0e0b8     A8 00 A0 FD | 	call	#pushregs_
0e0bc     18 F0 07 F1 | 	add	ptra, #24
0e0c0     B0 A8 BF FD | 	call	#_pop
0e0c4     FE 1E 02 F6 | 	mov	local01, result2
0e0c8     FF 20 02 F6 | 	mov	local02, result3
0e0cc     A7 FA 61 FC | 	wrlong	result1, fp
0e0d0     04 4E 05 F1 | 	add	fp, #4
0e0d4     A7 1E 62 FC | 	wrlong	local01, fp
0e0d8     04 4E 05 F1 | 	add	fp, #4
0e0dc     A7 20 62 FC | 	wrlong	local02, fp
0e0e0                 | ' t1=pop() 
0e0e0                 | ' select case t1.result_type
0e0e0     08 4E 85 F1 | 	sub	fp, #8
0e0e4     1C 20 0E F2 | 	cmp	local02, #28 wz
0e0e8     24 00 90 AD |  if_e	jmp	#LR__1180
0e0ec     1D 20 0E F2 | 	cmp	local02, #29 wz
0e0f0     38 00 90 AD |  if_e	jmp	#LR__1181
0e0f4     1E 20 0E F2 | 	cmp	local02, #30 wz
0e0f8     4C 00 90 AD |  if_e	jmp	#LR__1182
0e0fc     1F 20 0E F2 | 	cmp	local02, #31 wz
0e100     68 00 90 AD |  if_e	jmp	#LR__1183
0e104     FF 20 0E F2 | 	cmp	local02, #255 wz
0e108     8C 00 90 AD |  if_e	jmp	#LR__1184
0e10c     A8 00 90 FD | 	jmp	#LR__1185
0e110                 | LR__1180
0e110     A7 20 02 FB | 	rdlong	local02, fp
0e114     0C 4E 05 F1 | 	add	fp, #12
0e118     A7 20 62 FC | 	wrlong	local02, fp
0e11c     04 4E 05 F1 | 	add	fp, #4
0e120     A7 38 68 FC | 	wrlong	#28, fp
0e124     10 4E 85 F1 | 	sub	fp, #16
0e128     A0 00 90 FD | 	jmp	#LR__1186
0e12c                 | LR__1181
0e12c     A7 20 02 FB | 	rdlong	local02, fp
0e130     0C 4E 05 F1 | 	add	fp, #12
0e134     A7 20 62 FC | 	wrlong	local02, fp
0e138     04 4E 05 F1 | 	add	fp, #4
0e13c     A7 38 68 FC | 	wrlong	#28, fp
0e140     10 4E 85 F1 | 	sub	fp, #16
0e144     84 00 90 FD | 	jmp	#LR__1186
0e148                 | LR__1182
0e148     A7 12 02 FB | 	rdlong	arg01, fp
0e14c     01 14 06 F6 | 	mov	arg02, #1
0e150     F8 A5 B0 FD | 	call	#__system___float_tointeger
0e154     0C 4E 05 F1 | 	add	fp, #12
0e158     A7 FA 61 FC | 	wrlong	result1, fp
0e15c     04 4E 05 F1 | 	add	fp, #4
0e160     A7 38 68 FC | 	wrlong	#28, fp
0e164     10 4E 85 F1 | 	sub	fp, #16
0e168     60 00 90 FD | 	jmp	#LR__1186
0e16c                 | LR__1183
0e16c     A7 12 02 FB | 	rdlong	arg01, fp
0e170     F8 A8 B0 FD | 	call	#__system____builtin_atof
0e174     FD 12 02 F6 | 	mov	arg01, result1
0e178     00 14 06 F6 | 	mov	arg02, #0
0e17c     CC A5 B0 FD | 	call	#__system___float_tointeger
0e180     0C 4E 05 F1 | 	add	fp, #12
0e184     A7 FA 61 FC | 	wrlong	result1, fp
0e188     04 4E 05 F1 | 	add	fp, #4
0e18c     A7 38 68 FC | 	wrlong	#28, fp
0e190     10 4E 85 F1 | 	sub	fp, #16
0e194     34 00 90 FD | 	jmp	#LR__1186
0e198                 | LR__1184
0e198     0C 4E 05 F1 | 	add	fp, #12
0e19c     A7 00 68 FC | 	wrlong	#0, fp
0e1a0     0C 4E 85 F1 | 	sub	fp, #12
0e1a4     A7 20 02 FB | 	rdlong	local02, fp
0e1a8     10 4E 05 F1 | 	add	fp, #16
0e1ac     A7 20 62 FC | 	wrlong	local02, fp
0e1b0     10 4E 85 F1 | 	sub	fp, #16
0e1b4     14 00 90 FD | 	jmp	#LR__1186
0e1b8                 | LR__1185
0e1b8     0C 4E 05 F1 | 	add	fp, #12
0e1bc     A7 00 68 FC | 	wrlong	#0, fp
0e1c0     04 4E 05 F1 | 	add	fp, #4
0e1c4     A7 02 68 FC | 	wrlong	#1, fp
0e1c8     10 4E 85 F1 | 	sub	fp, #16
0e1cc                 | LR__1186
0e1cc     0C 4E 05 F1 | 	add	fp, #12
0e1d0     A7 20 02 FB | 	rdlong	local02, fp
0e1d4     0C 4E 85 F1 | 	sub	fp, #12
0e1d8     A7 20 62 FC | 	wrlong	local02, fp
0e1dc     10 4E 05 F1 | 	add	fp, #16
0e1e0     A7 20 02 FB | 	rdlong	local02, fp
0e1e4     08 4E 85 F1 | 	sub	fp, #8
0e1e8     A7 20 62 FC | 	wrlong	local02, fp
0e1ec     08 4E 85 F1 | 	sub	fp, #8
0e1f0     A7 12 02 F6 | 	mov	arg01, fp
0e1f4     14 A8 BF FD | 	call	#_push
0e1f8     A7 F0 03 F6 | 	mov	ptra, fp
0e1fc     B2 00 A0 FD | 	call	#popregs_
0e200                 | _do_converttoint_ret
0e200     2D 00 64 FD | 	ret
0e204                 | 
0e204                 | ' 
0e204                 | ' function converttoint (t1 as expr_result) as integer
0e204                 | _converttoint
0e204     02 4A 05 F6 | 	mov	COUNT_, #2
0e208     A8 00 A0 FD | 	call	#pushregs_
0e20c     09 1F 02 F6 | 	mov	local01, arg01
0e210                 | ' 
0e210                 | ' select case t1.result_type
0e210     08 1E 06 F1 | 	add	local01, #8
0e214     0F 21 02 FB | 	rdlong	local02, local01
0e218     08 1E 86 F1 | 	sub	local01, #8
0e21c     1C 20 86 F1 | 	sub	local02, #28
0e220     04 20 26 F3 | 	fle	local02, #4
0e224     30 20 62 FD | 	jmprel	local02
0e228                 | LR__1190
0e228     10 00 90 FD | 	jmp	#LR__1191
0e22c     14 00 90 FD | 	jmp	#LR__1192
0e230     18 00 90 FD | 	jmp	#LR__1193
0e234     24 00 90 FD | 	jmp	#LR__1194
0e238     38 00 90 FD | 	jmp	#LR__1195
0e23c                 | LR__1191
0e23c     0F FB 01 FB | 	rdlong	result1, local01
0e240     34 00 90 FD | 	jmp	#LR__1196
0e244                 | LR__1192
0e244     0F FB 01 FB | 	rdlong	result1, local01
0e248     2C 00 90 FD | 	jmp	#LR__1196
0e24c                 | LR__1193
0e24c     0F 13 02 FB | 	rdlong	arg01, local01
0e250     01 14 06 F6 | 	mov	arg02, #1
0e254     F4 A4 B0 FD | 	call	#__system___float_tointeger
0e258     1C 00 90 FD | 	jmp	#LR__1196
0e25c                 | LR__1194
0e25c     0F 13 02 FB | 	rdlong	arg01, local01
0e260     08 A8 B0 FD | 	call	#__system____builtin_atof
0e264     FD 12 02 F6 | 	mov	arg01, result1
0e268     00 14 06 F6 | 	mov	arg02, #0
0e26c     DC A4 B0 FD | 	call	#__system___float_tointeger
0e270     04 00 90 FD | 	jmp	#LR__1196
0e274                 | LR__1195
0e274     00 FA 05 F6 | 	mov	result1, #0
0e278                 | LR__1196
0e278     A7 F0 03 F6 | 	mov	ptra, fp
0e27c     B2 00 A0 FD | 	call	#popregs_
0e280                 | _converttoint_ret
0e280     2D 00 64 FD | 	ret
0e284                 | 
0e284                 | ' 
0e284                 | ' sub do_rnd
0e284                 | _do_rnd
0e284     01 4A 05 F6 | 	mov	COUNT_, #1
0e288     A8 00 A0 FD | 	call	#pushregs_
0e28c     10 F0 07 F1 | 	add	ptra, #16
0e290     41 00 00 FF 
0e294     44 E4 05 F1 | 	add	objptr, ##33348
0e298     F2 1E 02 FB | 	rdlong	local01, objptr
0e29c     0F 17 02 F6 | 	mov	arg03, local01
0e2a0     01 16 66 F0 | 	shl	arg03, #1
0e2a4     0F 17 02 F1 | 	add	arg03, local01
0e2a8     02 16 66 F0 | 	shl	arg03, #2
0e2ac     03 00 00 FF 
0e2b0     04 E4 85 F1 | 	sub	objptr, ##1540
0e2b4     F2 16 02 F1 | 	add	arg03, objptr
0e2b8     0B 17 02 FB | 	rdlong	arg03, arg03
0e2bc     0C 4E 05 F1 | 	add	fp, #12
0e2c0     A7 16 62 FC | 	wrlong	arg03, fp
0e2c4                 | ' 
0e2c4                 | ' numpar=compiledline(lineptr_e).result.uresult
0e2c4                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
0e2c4     0C 4E 85 F1 | 	sub	fp, #12
0e2c8     02 16 16 F2 | 	cmp	arg03, #2 wc
0e2cc     3E 00 00 FF 
0e2d0     40 E4 85 F1 | 	sub	objptr, ##31808
0e2d4     3C 00 90 CD |  if_b	jmp	#LR__1200
0e2d8     00 12 06 F6 | 	mov	arg01, #0
0e2dc     40 CB B0 FD | 	call	#__system___getiolock_0370
0e2e0     FD 12 02 F6 | 	mov	arg01, result1
0e2e4     88 75 B0 FD | 	call	#__system___lockmem
0e2e8     27 01 00 FF 
0e2ec     79 14 06 F6 | 	mov	arg02, ##@LR__4335
0e2f0     00 12 06 F6 | 	mov	arg01, #0
0e2f4     00 16 06 F6 | 	mov	arg03, #0
0e2f8     68 82 B0 FD | 	call	#__system___basic_print_string
0e2fc     00 12 06 F6 | 	mov	arg01, #0
0e300     1C CB B0 FD | 	call	#__system___getiolock_0370
0e304     FD 00 68 FC | 	wrlong	#0, result1
0e308     27 12 06 F6 | 	mov	arg01, #39
0e30c     64 40 B0 FD | 	call	#_printerror
0e310     2C 01 90 FD | 	jmp	#LR__1207
0e314                 | LR__1200
0e314                 | ' if numpar=0 then
0e314     0C 4E 05 F1 | 	add	fp, #12
0e318     A7 FE 09 FB | 	rdlong	result3, fp wz
0e31c     0C 4E 85 F1 | 	sub	fp, #12
0e320     20 00 90 5D |  if_ne	jmp	#LR__1201
0e324     08 4E 05 F1 | 	add	fp, #8
0e328     A7 3A 68 FC | 	wrlong	#29, fp
0e32c     08 4E 85 F1 | 	sub	fp, #8
0e330     1B FA 61 FD | 	getrnd	result1
0e334     A7 FA 61 FC | 	wrlong	result1, fp
0e338     A7 12 02 F6 | 	mov	arg01, fp
0e33c     CC A6 BF FD | 	call	#_push
0e340     FC 00 90 FD | 	jmp	#LR__1206
0e344                 | LR__1201
0e344     2C A6 BF FD | 	call	#_pop
0e348     A7 FA 61 FC | 	wrlong	result1, fp
0e34c     04 4E 05 F1 | 	add	fp, #4
0e350     A7 FC 61 FC | 	wrlong	result2, fp
0e354     04 4E 05 F1 | 	add	fp, #4
0e358     A7 FE 61 FC | 	wrlong	result3, fp
0e35c                 | '   t1=pop()
0e35c                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
0e35c     08 4E 85 F1 | 	sub	fp, #8
0e360     1C FE 0D F2 | 	cmp	result3, #28 wz
0e364     08 4E 05 51 |  if_ne	add	fp, #8
0e368     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e36c     08 4E 85 51 |  if_ne	sub	fp, #8
0e370     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0e374     2C 00 90 5D |  if_ne	jmp	#LR__1202
0e378     1B FA 61 FD | 	getrnd	result1
0e37c     A7 1E 02 FB | 	rdlong	local01, fp
0e380     0F FB 11 FD | 	qdiv	result1, local01
0e384     A7 12 02 F6 | 	mov	arg01, fp
0e388     19 1E 62 FD | 	getqy	local01
0e38c     A7 1E 62 FC | 	wrlong	local01, fp
0e390     08 4E 05 F1 | 	add	fp, #8
0e394     A7 3A 68 FC | 	wrlong	#29, fp
0e398     08 4E 85 F1 | 	sub	fp, #8
0e39c     6C A6 BF FD | 	call	#_push
0e3a0     9C 00 90 FD | 	jmp	#LR__1205
0e3a4                 | LR__1202
0e3a4     08 4E 05 F1 | 	add	fp, #8
0e3a8     A7 1E 02 FB | 	rdlong	local01, fp
0e3ac     08 4E 85 F1 | 	sub	fp, #8
0e3b0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e3b4     48 00 90 5D |  if_ne	jmp	#LR__1203
0e3b8     A7 12 02 FB | 	rdlong	arg01, fp
0e3bc     00 C0 24 FF 
0e3c0     00 14 06 F6 | 	mov	arg02, ##1233125376
0e3c4     C0 A0 B0 FD | 	call	#__system___float_div
0e3c8     FD 1E 02 F6 | 	mov	local01, result1
0e3cc     1B 12 62 FD | 	getrnd	arg01
0e3d0     74 13 06 F4 | 	bitl	arg01, #372
0e3d4     80 9B B0 FD | 	call	#__system___float_fromuns
0e3d8     FD 14 02 F6 | 	mov	arg02, result1
0e3dc     0F 13 02 F6 | 	mov	arg01, local01
0e3e0     A0 9E B0 FD | 	call	#__system___float_mul
0e3e4     A7 FA 61 FC | 	wrlong	result1, fp
0e3e8     08 4E 05 F1 | 	add	fp, #8
0e3ec     A7 3C 68 FC | 	wrlong	#30, fp
0e3f0     08 4E 85 F1 | 	sub	fp, #8
0e3f4     A7 12 02 F6 | 	mov	arg01, fp
0e3f8     10 A6 BF FD | 	call	#_push
0e3fc     40 00 90 FD | 	jmp	#LR__1204
0e400                 | LR__1203
0e400                 | '     print "rnd: "; : printerror(40) 
0e400     00 12 06 F6 | 	mov	arg01, #0
0e404     18 CA B0 FD | 	call	#__system___getiolock_0370
0e408     FD 12 02 F6 | 	mov	arg01, result1
0e40c     60 74 B0 FD | 	call	#__system___lockmem
0e410     27 01 00 FF 
0e414     7F 14 06 F6 | 	mov	arg02, ##@LR__4336
0e418     00 12 06 F6 | 	mov	arg01, #0
0e41c     00 16 06 F6 | 	mov	arg03, #0
0e420     40 81 B0 FD | 	call	#__system___basic_print_string
0e424     00 12 06 F6 | 	mov	arg01, #0
0e428     F4 C9 B0 FD | 	call	#__system___getiolock_0370
0e42c     FD 00 68 FC | 	wrlong	#0, result1
0e430     28 12 06 F6 | 	mov	arg01, #40
0e434     3C 3F B0 FD | 	call	#_printerror
0e438     A7 12 02 F6 | 	mov	arg01, fp
0e43c     CC A5 BF FD | 	call	#_push
0e440                 | LR__1204
0e440                 | LR__1205
0e440                 | LR__1206
0e440                 | LR__1207
0e440     A7 F0 03 F6 | 	mov	ptra, fp
0e444     B2 00 A0 FD | 	call	#popregs_
0e448                 | _do_rnd_ret
0e448     2D 00 64 FD | 	ret
0e44c                 | 
0e44c                 | ' 
0e44c                 | ' sub do_sin
0e44c                 | _do_sin
0e44c     03 4A 05 F6 | 	mov	COUNT_, #3
0e450     A8 00 A0 FD | 	call	#pushregs_
0e454     10 F0 07 F1 | 	add	ptra, #16
0e458     41 00 00 FF 
0e45c     44 E4 05 F1 | 	add	objptr, ##33348
0e460     F2 1E 02 FB | 	rdlong	local01, objptr
0e464     0F 17 02 F6 | 	mov	arg03, local01
0e468     01 16 66 F0 | 	shl	arg03, #1
0e46c     0F 17 02 F1 | 	add	arg03, local01
0e470     02 16 66 F0 | 	shl	arg03, #2
0e474     03 00 00 FF 
0e478     04 E4 85 F1 | 	sub	objptr, ##1540
0e47c     F2 16 02 F1 | 	add	arg03, objptr
0e480     0B 17 02 FB | 	rdlong	arg03, arg03
0e484     0C 4E 05 F1 | 	add	fp, #12
0e488     A7 16 62 FC | 	wrlong	arg03, fp
0e48c                 | ' 
0e48c                 | ' numpar=compiledline(lineptr_e).result.uresult
0e48c                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
0e48c     0C 4E 85 F1 | 	sub	fp, #12
0e490     02 16 16 F2 | 	cmp	arg03, #2 wc
0e494     3E 00 00 FF 
0e498     40 E4 85 F1 | 	sub	objptr, ##31808
0e49c     0C 4E 05 C1 |  if_b	add	fp, #12
0e4a0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0e4a4     0C 4E 85 C1 |  if_b	sub	fp, #12
0e4a8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1210
0e4ac     00 12 06 F6 | 	mov	arg01, #0
0e4b0     6C C9 B0 FD | 	call	#__system___getiolock_0370
0e4b4     FD 12 02 F6 | 	mov	arg01, result1
0e4b8     B4 73 B0 FD | 	call	#__system___lockmem
0e4bc     27 01 00 FF 
0e4c0     85 14 06 F6 | 	mov	arg02, ##@LR__4337
0e4c4     00 12 06 F6 | 	mov	arg01, #0
0e4c8     00 16 06 F6 | 	mov	arg03, #0
0e4cc     94 80 B0 FD | 	call	#__system___basic_print_string
0e4d0     00 12 06 F6 | 	mov	arg01, #0
0e4d4     48 C9 B0 FD | 	call	#__system___getiolock_0370
0e4d8     FD 00 68 FC | 	wrlong	#0, result1
0e4dc     27 12 06 F6 | 	mov	arg01, #39
0e4e0     90 3E B0 FD | 	call	#_printerror
0e4e4     40 01 90 FD | 	jmp	#LR__1215
0e4e8                 | LR__1210
0e4e8     88 A4 BF FD | 	call	#_pop
0e4ec     A7 FA 61 FC | 	wrlong	result1, fp
0e4f0     04 4E 05 F1 | 	add	fp, #4
0e4f4     A7 FC 61 FC | 	wrlong	result2, fp
0e4f8     04 4E 05 F1 | 	add	fp, #4
0e4fc     A7 FE 61 FC | 	wrlong	result3, fp
0e500                 | ' t1=pop()
0e500                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then
0e500     08 4E 85 F1 | 	sub	fp, #8
0e504     1C FE 0D F2 | 	cmp	result3, #28 wz
0e508     08 4E 05 51 |  if_ne	add	fp, #8
0e50c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e510     08 4E 85 51 |  if_ne	sub	fp, #8
0e514     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0e518     70 00 90 5D |  if_ne	jmp	#LR__1211
0e51c     A7 1E 02 FB | 	rdlong	local01, fp
0e520     0F 1F 52 F6 | 	abs	local01, local01 wc
0e524     68 1F 16 FD | 	qdiv	local01, #360
0e528     87 24 20 FF 
0e52c     DB 21 06 F6 | 	mov	local02, ##1078530011
0e530     19 1E 62 FD | 	getqy	local01
0e534     0F 13 82 F6 | 	negc	arg01, local01
0e538     09 13 52 F6 | 	abs	arg01, arg01 wc
0e53c     1F 22 C6 C9 |  if_b	decod	local03, #31
0e540     00 22 06 36 |  if_ae	mov	local03, #0
0e544     10 9A B0 FD | 	call	#__system___float_fromuns
0e548     11 FB 61 F5 | 	xor	result1, local03
0e54c     FD 12 02 F6 | 	mov	arg01, result1
0e550     00 9A 21 FF 
0e554     00 14 06 F6 | 	mov	arg02, ##1127481344
0e558     2C 9F B0 FD | 	call	#__system___float_div
0e55c     FD 14 02 F6 | 	mov	arg02, result1
0e560     10 13 02 F6 | 	mov	arg01, local02
0e564     1C 9D B0 FD | 	call	#__system___float_mul
0e568     FD 12 02 F6 | 	mov	arg01, result1
0e56c     50 A6 B0 FD | 	call	#__system____builtin_sinf
0e570     A7 FA 61 FC | 	wrlong	result1, fp
0e574     08 4E 05 F1 | 	add	fp, #8
0e578     A7 3C 68 FC | 	wrlong	#30, fp
0e57c     08 4E 85 F1 | 	sub	fp, #8
0e580     A7 12 02 F6 | 	mov	arg01, fp
0e584     84 A4 BF FD | 	call	#_push
0e588     9C 00 90 FD | 	jmp	#LR__1214
0e58c                 | LR__1211
0e58c     08 4E 05 F1 | 	add	fp, #8
0e590     A7 20 02 FB | 	rdlong	local02, fp
0e594     08 4E 85 F1 | 	sub	fp, #8
0e598     1E 20 0E F2 | 	cmp	local02, #30 wz
0e59c     48 00 90 5D |  if_ne	jmp	#LR__1212
0e5a0     87 24 20 FF 
0e5a4     DB 21 06 F6 | 	mov	local02, ##1078530011
0e5a8     A7 12 02 FB | 	rdlong	arg01, fp
0e5ac     00 9A 21 FF 
0e5b0     00 14 06 F6 | 	mov	arg02, ##1127481344
0e5b4     D0 9E B0 FD | 	call	#__system___float_div
0e5b8     FD 14 02 F6 | 	mov	arg02, result1
0e5bc     10 13 02 F6 | 	mov	arg01, local02
0e5c0     C0 9C B0 FD | 	call	#__system___float_mul
0e5c4     FD 12 02 F6 | 	mov	arg01, result1
0e5c8     F4 A5 B0 FD | 	call	#__system____builtin_sinf
0e5cc     A7 FA 61 FC | 	wrlong	result1, fp
0e5d0     08 4E 05 F1 | 	add	fp, #8
0e5d4     A7 3C 68 FC | 	wrlong	#30, fp
0e5d8     08 4E 85 F1 | 	sub	fp, #8
0e5dc     A7 12 02 F6 | 	mov	arg01, fp
0e5e0     28 A4 BF FD | 	call	#_push
0e5e4     40 00 90 FD | 	jmp	#LR__1213
0e5e8                 | LR__1212
0e5e8                 | '   print "sin: "; : printerror(40) 
0e5e8     00 12 06 F6 | 	mov	arg01, #0
0e5ec     30 C8 B0 FD | 	call	#__system___getiolock_0370
0e5f0     FD 12 02 F6 | 	mov	arg01, result1
0e5f4     78 72 B0 FD | 	call	#__system___lockmem
0e5f8     27 01 00 FF 
0e5fc     8B 14 06 F6 | 	mov	arg02, ##@LR__4338
0e600     00 12 06 F6 | 	mov	arg01, #0
0e604     00 16 06 F6 | 	mov	arg03, #0
0e608     58 7F B0 FD | 	call	#__system___basic_print_string
0e60c     00 12 06 F6 | 	mov	arg01, #0
0e610     0C C8 B0 FD | 	call	#__system___getiolock_0370
0e614     FD 00 68 FC | 	wrlong	#0, result1
0e618     28 12 06 F6 | 	mov	arg01, #40
0e61c     54 3D B0 FD | 	call	#_printerror
0e620     A7 12 02 F6 | 	mov	arg01, fp
0e624     E4 A3 BF FD | 	call	#_push
0e628                 | LR__1213
0e628                 | LR__1214
0e628                 | LR__1215
0e628     A7 F0 03 F6 | 	mov	ptra, fp
0e62c     B2 00 A0 FD | 	call	#popregs_
0e630                 | _do_sin_ret
0e630     2D 00 64 FD | 	ret
0e634                 | 
0e634                 | ' 
0e634                 | ' sub do_stick
0e634                 | _do_stick
0e634     01 4A 05 F6 | 	mov	COUNT_, #1
0e638     A8 00 A0 FD | 	call	#pushregs_
0e63c     10 F0 07 F1 | 	add	ptra, #16
0e640     41 00 00 FF 
0e644     44 E4 05 F1 | 	add	objptr, ##33348
0e648     F2 1E 02 FB | 	rdlong	local01, objptr
0e64c     0F 17 02 F6 | 	mov	arg03, local01
0e650     01 16 66 F0 | 	shl	arg03, #1
0e654     0F 17 02 F1 | 	add	arg03, local01
0e658     02 16 66 F0 | 	shl	arg03, #2
0e65c     03 00 00 FF 
0e660     04 E4 85 F1 | 	sub	objptr, ##1540
0e664     F2 16 02 F1 | 	add	arg03, objptr
0e668     0B 17 02 FB | 	rdlong	arg03, arg03
0e66c     0C 4E 05 F1 | 	add	fp, #12
0e670     A7 16 62 FC | 	wrlong	arg03, fp
0e674                 | ' 
0e674                 | ' numpar=compiledline(lineptr_e).result.uresult
0e674                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
0e674     0C 4E 85 F1 | 	sub	fp, #12
0e678     02 16 16 F2 | 	cmp	arg03, #2 wc
0e67c     3E 00 00 FF 
0e680     40 E4 85 F1 | 	sub	objptr, ##31808
0e684     3C 00 90 CD |  if_b	jmp	#LR__1220
0e688     00 12 06 F6 | 	mov	arg01, #0
0e68c     90 C7 B0 FD | 	call	#__system___getiolock_0370
0e690     FD 12 02 F6 | 	mov	arg01, result1
0e694     D8 71 B0 FD | 	call	#__system___lockmem
0e698     27 01 00 FF 
0e69c     91 14 06 F6 | 	mov	arg02, ##@LR__4339
0e6a0     00 12 06 F6 | 	mov	arg01, #0
0e6a4     00 16 06 F6 | 	mov	arg03, #0
0e6a8     B8 7E B0 FD | 	call	#__system___basic_print_string
0e6ac     00 12 06 F6 | 	mov	arg01, #0
0e6b0     6C C7 B0 FD | 	call	#__system___getiolock_0370
0e6b4     FD 00 68 FC | 	wrlong	#0, result1
0e6b8     27 12 06 F6 | 	mov	arg01, #39
0e6bc     B4 3C B0 FD | 	call	#_printerror
0e6c0     E8 00 90 FD | 	jmp	#LR__1224
0e6c4                 | LR__1220
0e6c4                 | ' 
0e6c4                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
0e6c4     0C 4E 05 F1 | 	add	fp, #12
0e6c8     A7 FE 09 FB | 	rdlong	result3, fp wz
0e6cc     0C 4E 85 F1 | 	sub	fp, #12
0e6d0     30 00 90 5D |  if_ne	jmp	#LR__1221
0e6d4     51 00 00 FF 
0e6d8     C0 E5 05 F1 | 	add	objptr, ##41920
0e6dc     F2 1E 02 FB | 	rdlong	local01, objptr
0e6e0     51 00 00 FF 
0e6e4     C0 E5 85 F1 | 	sub	objptr, ##41920
0e6e8     A7 1E 62 FC | 	wrlong	local01, fp
0e6ec     08 4E 05 F1 | 	add	fp, #8
0e6f0     A7 3A 68 FC | 	wrlong	#29, fp
0e6f4     08 4E 85 F1 | 	sub	fp, #8
0e6f8     A7 12 02 F6 | 	mov	arg01, fp
0e6fc     0C A3 BF FD | 	call	#_push
0e700     A8 00 90 FD | 	jmp	#LR__1224
0e704                 | LR__1221
0e704     6C A2 BF FD | 	call	#_pop
0e708     A7 FA 61 FC | 	wrlong	result1, fp
0e70c     04 4E 05 F1 | 	add	fp, #4
0e710     A7 FC 61 FC | 	wrlong	result2, fp
0e714     04 4E 05 F1 | 	add	fp, #4
0e718     A7 FE 61 FC | 	wrlong	result3, fp
0e71c                 | ' 
0e71c                 | ' t1=pop()
0e71c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
0e71c     08 4E 85 F1 | 	sub	fp, #8
0e720     1C FE 0D F2 | 	cmp	result3, #28 wz
0e724     08 4E 05 51 |  if_ne	add	fp, #8
0e728     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e72c     08 4E 85 51 |  if_ne	sub	fp, #8
0e730     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0e734     6C 00 90 5D |  if_ne	jmp	#LR__1223
0e738     A7 1E 02 FB | 	rdlong	local01, fp
0e73c     52 00 00 FF 
0e740     80 E4 05 F1 | 	add	objptr, ##42112
0e744     F2 1E 62 FC | 	wrlong	local01, objptr
0e748                 | '   q=t1.result.uresult
0e748                 | '   if q<7 then 
0e748     52 00 00 FF 
0e74c     80 E4 85 F1 | 	sub	objptr, ##42112
0e750     07 1E 56 F2 | 	cmps	local01, #7 wc
0e754     40 00 90 3D |  if_ae	jmp	#LR__1222
0e758     52 00 00 FF 
0e75c     80 E4 05 F1 | 	add	objptr, ##42112
0e760     F2 1E 02 FB | 	rdlong	local01, objptr
0e764     02 1E 66 F0 | 	shl	local01, #2
0e768     C0 E4 85 F1 | 	sub	objptr, #192
0e76c     F2 1E 02 F1 | 	add	local01, objptr
0e770     0F 1F 02 FB | 	rdlong	local01, local01
0e774     A7 1E 62 FC | 	wrlong	local01, fp
0e778     08 4E 05 F1 | 	add	fp, #8
0e77c     A7 3A 68 FC | 	wrlong	#29, fp
0e780     08 4E 85 F1 | 	sub	fp, #8
0e784     A7 12 02 F6 | 	mov	arg01, fp
0e788     51 00 00 FF 
0e78c     C0 E5 85 F1 | 	sub	objptr, ##41920
0e790     78 A2 BF FD | 	call	#_push
0e794                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
0e794     14 00 90 FD | 	jmp	#LR__1224
0e798                 | LR__1222
0e798     29 12 06 F6 | 	mov	arg01, #41
0e79c     D4 3B B0 FD | 	call	#_printerror
0e7a0                 | '      printerror(41) : return
0e7a0     08 00 90 FD | 	jmp	#LR__1224
0e7a4                 | LR__1223
0e7a4     29 12 06 F6 | 	mov	arg01, #41
0e7a8     C8 3B B0 FD | 	call	#_printerror
0e7ac                 | LR__1224
0e7ac     A7 F0 03 F6 | 	mov	ptra, fp
0e7b0     B2 00 A0 FD | 	call	#popregs_
0e7b4                 | _do_stick_ret
0e7b4     2D 00 64 FD | 	ret
0e7b8                 | 
0e7b8                 | ' 
0e7b8                 | ' sub do_strig
0e7b8                 | _do_strig
0e7b8     01 4A 05 F6 | 	mov	COUNT_, #1
0e7bc     A8 00 A0 FD | 	call	#pushregs_
0e7c0     10 F0 07 F1 | 	add	ptra, #16
0e7c4     41 00 00 FF 
0e7c8     44 E4 05 F1 | 	add	objptr, ##33348
0e7cc     F2 1E 02 FB | 	rdlong	local01, objptr
0e7d0     0F 17 02 F6 | 	mov	arg03, local01
0e7d4     01 16 66 F0 | 	shl	arg03, #1
0e7d8     0F 17 02 F1 | 	add	arg03, local01
0e7dc     02 16 66 F0 | 	shl	arg03, #2
0e7e0     03 00 00 FF 
0e7e4     04 E4 85 F1 | 	sub	objptr, ##1540
0e7e8     F2 16 02 F1 | 	add	arg03, objptr
0e7ec     0B 17 02 FB | 	rdlong	arg03, arg03
0e7f0     0C 4E 05 F1 | 	add	fp, #12
0e7f4     A7 16 62 FC | 	wrlong	arg03, fp
0e7f8                 | ' 
0e7f8                 | ' numpar=compiledline(lineptr_e).result.uresult
0e7f8                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
0e7f8     0C 4E 85 F1 | 	sub	fp, #12
0e7fc     02 16 16 F2 | 	cmp	arg03, #2 wc
0e800     3E 00 00 FF 
0e804     40 E4 85 F1 | 	sub	objptr, ##31808
0e808     3C 00 90 CD |  if_b	jmp	#LR__1230
0e80c     00 12 06 F6 | 	mov	arg01, #0
0e810     0C C6 B0 FD | 	call	#__system___getiolock_0370
0e814     FD 12 02 F6 | 	mov	arg01, result1
0e818     54 70 B0 FD | 	call	#__system___lockmem
0e81c     27 01 00 FF 
0e820     99 14 06 F6 | 	mov	arg02, ##@LR__4340
0e824     00 12 06 F6 | 	mov	arg01, #0
0e828     00 16 06 F6 | 	mov	arg03, #0
0e82c     34 7D B0 FD | 	call	#__system___basic_print_string
0e830     00 12 06 F6 | 	mov	arg01, #0
0e834     E8 C5 B0 FD | 	call	#__system___getiolock_0370
0e838     FD 00 68 FC | 	wrlong	#0, result1
0e83c     27 12 06 F6 | 	mov	arg01, #39
0e840     30 3B B0 FD | 	call	#_printerror
0e844     E8 00 90 FD | 	jmp	#LR__1234
0e848                 | LR__1230
0e848                 | ' 
0e848                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
0e848     0C 4E 05 F1 | 	add	fp, #12
0e84c     A7 FE 09 FB | 	rdlong	result3, fp wz
0e850     0C 4E 85 F1 | 	sub	fp, #12
0e854     30 00 90 5D |  if_ne	jmp	#LR__1231
0e858     51 00 00 FF 
0e85c     DC E5 05 F1 | 	add	objptr, ##41948
0e860     F2 1E 02 FB | 	rdlong	local01, objptr
0e864     51 00 00 FF 
0e868     DC E5 85 F1 | 	sub	objptr, ##41948
0e86c     A7 1E 62 FC | 	wrlong	local01, fp
0e870     08 4E 05 F1 | 	add	fp, #8
0e874     A7 3A 68 FC | 	wrlong	#29, fp
0e878     08 4E 85 F1 | 	sub	fp, #8
0e87c     A7 12 02 F6 | 	mov	arg01, fp
0e880     88 A1 BF FD | 	call	#_push
0e884     A8 00 90 FD | 	jmp	#LR__1234
0e888                 | LR__1231
0e888     E8 A0 BF FD | 	call	#_pop
0e88c     A7 FA 61 FC | 	wrlong	result1, fp
0e890     04 4E 05 F1 | 	add	fp, #4
0e894     A7 FC 61 FC | 	wrlong	result2, fp
0e898     04 4E 05 F1 | 	add	fp, #4
0e89c     A7 FE 61 FC | 	wrlong	result3, fp
0e8a0                 | ' 
0e8a0                 | ' t1=pop()
0e8a0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
0e8a0     08 4E 85 F1 | 	sub	fp, #8
0e8a4     1C FE 0D F2 | 	cmp	result3, #28 wz
0e8a8     08 4E 05 51 |  if_ne	add	fp, #8
0e8ac     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e8b0     08 4E 85 51 |  if_ne	sub	fp, #8
0e8b4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0e8b8     6C 00 90 5D |  if_ne	jmp	#LR__1233
0e8bc     A7 1E 02 FB | 	rdlong	local01, fp
0e8c0     52 00 00 FF 
0e8c4     80 E4 05 F1 | 	add	objptr, ##42112
0e8c8     F2 1E 62 FC | 	wrlong	local01, objptr
0e8cc                 | '   q=t1.result.uresult
0e8cc                 | '   if q<7 then 
0e8cc     52 00 00 FF 
0e8d0     80 E4 85 F1 | 	sub	objptr, ##42112
0e8d4     07 1E 56 F2 | 	cmps	local01, #7 wc
0e8d8     40 00 90 3D |  if_ae	jmp	#LR__1232
0e8dc     52 00 00 FF 
0e8e0     80 E4 05 F1 | 	add	objptr, ##42112
0e8e4     F2 1E 02 FB | 	rdlong	local01, objptr
0e8e8     02 1E 66 F0 | 	shl	local01, #2
0e8ec     A4 E4 85 F1 | 	sub	objptr, #164
0e8f0     F2 1E 02 F1 | 	add	local01, objptr
0e8f4     0F 1F 02 FB | 	rdlong	local01, local01
0e8f8     A7 1E 62 FC | 	wrlong	local01, fp
0e8fc     08 4E 05 F1 | 	add	fp, #8
0e900     A7 3A 68 FC | 	wrlong	#29, fp
0e904     08 4E 85 F1 | 	sub	fp, #8
0e908     A7 12 02 F6 | 	mov	arg01, fp
0e90c     51 00 00 FF 
0e910     DC E5 85 F1 | 	sub	objptr, ##41948
0e914     F4 A0 BF FD | 	call	#_push
0e918                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
0e918     14 00 90 FD | 	jmp	#LR__1234
0e91c                 | LR__1232
0e91c     29 12 06 F6 | 	mov	arg01, #41
0e920     50 3A B0 FD | 	call	#_printerror
0e924                 | '      printerror(41) : return
0e924     08 00 90 FD | 	jmp	#LR__1234
0e928                 | LR__1233
0e928     29 12 06 F6 | 	mov	arg01, #41
0e92c     44 3A B0 FD | 	call	#_printerror
0e930                 | LR__1234
0e930     A7 F0 03 F6 | 	mov	ptra, fp
0e934     B2 00 A0 FD | 	call	#popregs_
0e938                 | _do_strig_ret
0e938     2D 00 64 FD | 	ret
0e93c                 | 
0e93c                 | ' 
0e93c                 | ' sub do_getpixel
0e93c                 | _do_getpixel
0e93c     00 4A 05 F6 | 	mov	COUNT_, #0
0e940     A8 00 A0 FD | 	call	#pushregs_
0e944     24 F0 07 F1 | 	add	ptra, #36
0e948     41 00 00 FF 
0e94c     44 E4 05 F1 | 	add	objptr, ##33348
0e950     F2 16 02 FB | 	rdlong	arg03, objptr
0e954     0B 15 02 F6 | 	mov	arg02, arg03
0e958     01 14 66 F0 | 	shl	arg02, #1
0e95c     0B 15 02 F1 | 	add	arg02, arg03
0e960     02 14 66 F0 | 	shl	arg02, #2
0e964     03 00 00 FF 
0e968     04 E4 85 F1 | 	sub	objptr, ##1540
0e96c     F2 14 02 F1 | 	add	arg02, objptr
0e970     0A 17 02 FB | 	rdlong	arg03, arg02
0e974     18 4E 05 F1 | 	add	fp, #24
0e978     A7 16 62 FC | 	wrlong	arg03, fp
0e97c                 | ' 
0e97c                 | ' numpar=compiledline(lineptr_e).result.uresult
0e97c                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
0e97c     18 4E 85 F1 | 	sub	fp, #24
0e980     02 16 0E F2 | 	cmp	arg03, #2 wz
0e984     3E 00 00 FF 
0e988     40 E4 85 F1 | 	sub	objptr, ##31808
0e98c     3C 00 90 AD |  if_e	jmp	#LR__1240
0e990     00 12 06 F6 | 	mov	arg01, #0
0e994     88 C4 B0 FD | 	call	#__system___getiolock_0370
0e998     FD 12 02 F6 | 	mov	arg01, result1
0e99c     D0 6E B0 FD | 	call	#__system___lockmem
0e9a0     27 01 00 FF 
0e9a4     A1 14 06 F6 | 	mov	arg02, ##@LR__4341
0e9a8     00 12 06 F6 | 	mov	arg01, #0
0e9ac     00 16 06 F6 | 	mov	arg03, #0
0e9b0     B0 7B B0 FD | 	call	#__system___basic_print_string
0e9b4     00 12 06 F6 | 	mov	arg01, #0
0e9b8     64 C4 B0 FD | 	call	#__system___getiolock_0370
0e9bc     FD 00 68 FC | 	wrlong	#0, result1
0e9c0     27 12 06 F6 | 	mov	arg01, #39
0e9c4     AC 39 B0 FD | 	call	#_printerror
0e9c8     B4 00 90 FD | 	jmp	#LR__1241
0e9cc                 | LR__1240
0e9cc     A4 9F BF FD | 	call	#_pop
0e9d0     FD 16 02 F6 | 	mov	arg03, result1
0e9d4     FE 14 02 F6 | 	mov	arg02, result2
0e9d8     FF 12 02 F6 | 	mov	arg01, result3
0e9dc     0C 4E 05 F1 | 	add	fp, #12
0e9e0     A7 16 62 FC | 	wrlong	arg03, fp
0e9e4     04 4E 05 F1 | 	add	fp, #4
0e9e8     A7 14 62 FC | 	wrlong	arg02, fp
0e9ec     04 4E 05 F1 | 	add	fp, #4
0e9f0     A7 12 62 FC | 	wrlong	arg01, fp
0e9f4     14 4E 85 F1 | 	sub	fp, #20
0e9f8     78 9F BF FD | 	call	#_pop
0e9fc     FF 16 02 F6 | 	mov	arg03, result3
0ea00     A7 FA 61 FC | 	wrlong	result1, fp
0ea04     04 4E 05 F1 | 	add	fp, #4
0ea08     A7 FC 61 FC | 	wrlong	result2, fp
0ea0c     04 4E 05 F1 | 	add	fp, #4
0ea10     A7 16 62 FC | 	wrlong	arg03, fp
0ea14     08 4E 85 F1 | 	sub	fp, #8
0ea18     A7 12 02 F6 | 	mov	arg01, fp
0ea1c     E4 F7 BF FD | 	call	#_converttoint
0ea20     1C 4E 05 F1 | 	add	fp, #28
0ea24     A7 FA 61 FC | 	wrlong	result1, fp
0ea28     10 4E 85 F1 | 	sub	fp, #16
0ea2c     A7 12 02 F6 | 	mov	arg01, fp
0ea30     0C 4E 85 F1 | 	sub	fp, #12
0ea34     CC F7 BF FD | 	call	#_converttoint
0ea38     FD 16 02 F6 | 	mov	arg03, result1
0ea3c     20 4E 05 F1 | 	add	fp, #32
0ea40     A7 16 62 FC | 	wrlong	arg03, fp
0ea44     F2 12 02 FB | 	rdlong	arg01, objptr
0ea48     04 4E 85 F1 | 	sub	fp, #4
0ea4c     A7 FE 01 FB | 	rdlong	result3, fp
0ea50     FF 12 02 F1 | 	add	arg01, result3
0ea54     1C 4E 85 F1 | 	sub	fp, #28
0ea58     0A 16 66 F0 | 	shl	arg03, #10
0ea5c     0B 13 02 F1 | 	add	arg01, arg03
0ea60     74 3A B0 FD | 	call	#_pspeek
0ea64     FD FA E1 F8 | 	getbyte	result1, result1, #0
0ea68     A7 FA 61 FC | 	wrlong	result1, fp
0ea6c     08 4E 05 F1 | 	add	fp, #8
0ea70     A7 3A 68 FC | 	wrlong	#29, fp
0ea74     08 4E 85 F1 | 	sub	fp, #8
0ea78     A7 12 02 F6 | 	mov	arg01, fp
0ea7c     8C 9F BF FD | 	call	#_push
0ea80                 | LR__1241
0ea80     A7 F0 03 F6 | 	mov	ptra, fp
0ea84     B2 00 A0 FD | 	call	#popregs_
0ea88                 | _do_getpixel_ret
0ea88     2D 00 64 FD | 	ret
0ea8c                 | 
0ea8c                 | ' 
0ea8c                 | ' 
0ea8c                 | ' 
0ea8c                 | ' sub do_defsprite
0ea8c                 | _do_defsprite
0ea8c     07 4A 05 F6 | 	mov	COUNT_, #7
0ea90     A8 00 A0 FD | 	call	#pushregs_
0ea94     5C F0 07 F1 | 	add	ptra, #92
0ea98     D8 9E BF FD | 	call	#_pop
0ea9c     FD 16 02 F6 | 	mov	arg03, result1
0eaa0     FE 14 02 F6 | 	mov	arg02, result2
0eaa4     FF 12 02 F6 | 	mov	arg01, result3
0eaa8     30 4E 05 F1 | 	add	fp, #48
0eaac     A7 16 62 FC | 	wrlong	arg03, fp
0eab0     04 4E 05 F1 | 	add	fp, #4
0eab4     A7 14 62 FC | 	wrlong	arg02, fp
0eab8     04 4E 05 F1 | 	add	fp, #4
0eabc     A7 12 62 FC | 	wrlong	arg01, fp
0eac0     38 4E 85 F1 | 	sub	fp, #56
0eac4     AC 9E BF FD | 	call	#_pop
0eac8     FD 16 02 F6 | 	mov	arg03, result1
0eacc     FE 14 02 F6 | 	mov	arg02, result2
0ead0     FF 12 02 F6 | 	mov	arg01, result3
0ead4     24 4E 05 F1 | 	add	fp, #36
0ead8     A7 16 62 FC | 	wrlong	arg03, fp
0eadc     04 4E 05 F1 | 	add	fp, #4
0eae0     A7 14 62 FC | 	wrlong	arg02, fp
0eae4     04 4E 05 F1 | 	add	fp, #4
0eae8     A7 12 62 FC | 	wrlong	arg01, fp
0eaec     2C 4E 85 F1 | 	sub	fp, #44
0eaf0     80 9E BF FD | 	call	#_pop
0eaf4     FD 16 02 F6 | 	mov	arg03, result1
0eaf8     FE 14 02 F6 | 	mov	arg02, result2
0eafc     FF 12 02 F6 | 	mov	arg01, result3
0eb00     18 4E 05 F1 | 	add	fp, #24
0eb04     A7 16 62 FC | 	wrlong	arg03, fp
0eb08     04 4E 05 F1 | 	add	fp, #4
0eb0c     A7 14 62 FC | 	wrlong	arg02, fp
0eb10     04 4E 05 F1 | 	add	fp, #4
0eb14     A7 12 62 FC | 	wrlong	arg01, fp
0eb18     20 4E 85 F1 | 	sub	fp, #32
0eb1c     54 9E BF FD | 	call	#_pop
0eb20     FD 16 02 F6 | 	mov	arg03, result1
0eb24     FE 14 02 F6 | 	mov	arg02, result2
0eb28     FF 12 02 F6 | 	mov	arg01, result3
0eb2c     0C 4E 05 F1 | 	add	fp, #12
0eb30     A7 16 62 FC | 	wrlong	arg03, fp
0eb34     04 4E 05 F1 | 	add	fp, #4
0eb38     A7 14 62 FC | 	wrlong	arg02, fp
0eb3c     04 4E 05 F1 | 	add	fp, #4
0eb40     A7 12 62 FC | 	wrlong	arg01, fp
0eb44     14 4E 85 F1 | 	sub	fp, #20
0eb48     28 9E BF FD | 	call	#_pop
0eb4c     FF 16 02 F6 | 	mov	arg03, result3
0eb50     A7 FA 61 FC | 	wrlong	result1, fp
0eb54     04 4E 05 F1 | 	add	fp, #4
0eb58     A7 FC 61 FC | 	wrlong	result2, fp
0eb5c     04 4E 05 F1 | 	add	fp, #4
0eb60     A7 16 62 FC | 	wrlong	arg03, fp
0eb64     08 4E 85 F1 | 	sub	fp, #8
0eb68     A7 12 02 F6 | 	mov	arg01, fp
0eb6c     94 F6 BF FD | 	call	#_converttoint
0eb70     3C 4E 05 F1 | 	add	fp, #60
0eb74     A7 FA 61 FC | 	wrlong	result1, fp
0eb78     30 4E 85 F1 | 	sub	fp, #48
0eb7c     A7 12 02 F6 | 	mov	arg01, fp
0eb80     0C 4E 85 F1 | 	sub	fp, #12
0eb84     7C F6 BF FD | 	call	#_converttoint
0eb88     40 4E 05 F1 | 	add	fp, #64
0eb8c     A7 FA 61 FC | 	wrlong	result1, fp
0eb90     28 4E 85 F1 | 	sub	fp, #40
0eb94     A7 12 02 F6 | 	mov	arg01, fp
0eb98     18 4E 85 F1 | 	sub	fp, #24
0eb9c     64 F6 BF FD | 	call	#_converttoint
0eba0     44 4E 05 F1 | 	add	fp, #68
0eba4     A7 FA 61 FC | 	wrlong	result1, fp
0eba8     20 4E 85 F1 | 	sub	fp, #32
0ebac     A7 12 02 F6 | 	mov	arg01, fp
0ebb0     24 4E 85 F1 | 	sub	fp, #36
0ebb4     4C F6 BF FD | 	call	#_converttoint
0ebb8     48 4E 05 F1 | 	add	fp, #72
0ebbc     A7 FA 61 FC | 	wrlong	result1, fp
0ebc0     18 4E 85 F1 | 	sub	fp, #24
0ebc4     A7 12 02 F6 | 	mov	arg01, fp
0ebc8     30 4E 85 F1 | 	sub	fp, #48
0ebcc     34 F6 BF FD | 	call	#_converttoint
0ebd0     4C 4E 05 F1 | 	add	fp, #76
0ebd4     A7 FA 61 FC | 	wrlong	result1, fp
0ebd8                 | ' 
0ebd8                 | ' t5=pop()
0ebd8                 | ' t4=pop()
0ebd8                 | ' t3=pop()
0ebd8                 | ' t2=pop()
0ebd8                 | ' t1=pop()
0ebd8                 | ' 
0ebd8                 | ' ' do convert, defsprite is not a racing command
0ebd8                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
0ebd8                 | '  
0ebd8                 | ' ' todo: check parameters for linits
0ebd8                 | ' if sprite(a1)<> nil then delete(sprite(a1))
0ebd8     10 4E 85 F1 | 	sub	fp, #16
0ebdc     A7 16 02 FB | 	rdlong	arg03, fp
0ebe0     3C 4E 85 F1 | 	sub	fp, #60
0ebe4     02 16 66 F0 | 	shl	arg03, #2
0ebe8     51 00 00 FF 
0ebec     F8 E5 05 F1 | 	add	objptr, ##41976
0ebf0     F2 16 02 F1 | 	add	arg03, objptr
0ebf4     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0ebf8     51 00 00 FF 
0ebfc     F8 E5 85 F1 | 	sub	objptr, ##41976
0ec00     2C 00 90 AD |  if_e	jmp	#LR__1250
0ec04     3C 4E 05 F1 | 	add	fp, #60
0ec08     A7 16 02 FB | 	rdlong	arg03, fp
0ec0c     3C 4E 85 F1 | 	sub	fp, #60
0ec10     02 16 66 F0 | 	shl	arg03, #2
0ec14     51 00 00 FF 
0ec18     F8 E5 05 F1 | 	add	objptr, ##41976
0ec1c     F2 16 02 F1 | 	add	arg03, objptr
0ec20     0B 13 02 FB | 	rdlong	arg01, arg03
0ec24     51 00 00 FF 
0ec28     F8 E5 85 F1 | 	sub	objptr, ##41976
0ec2c     E4 A7 B0 FD | 	call	#__system___gc_free
0ec30                 | LR__1250
0ec30     3C 4E 05 F1 | 	add	fp, #60
0ec34     A7 1E 02 FB | 	rdlong	local01, fp
0ec38     0C 4E 05 F1 | 	add	fp, #12
0ec3c     A7 16 02 FB | 	rdlong	arg03, fp
0ec40     04 4E 05 F1 | 	add	fp, #4
0ec44     A7 14 02 FB | 	rdlong	arg02, fp
0ec48     0A 17 02 FD | 	qmul	arg03, arg02
0ec4c     02 1E 66 F0 | 	shl	local01, #2
0ec50     51 00 00 FF 
0ec54     F8 E5 05 F1 | 	add	objptr, ##41976
0ec58     F2 1E 02 F1 | 	add	local01, objptr
0ec5c     4C 4E 85 F1 | 	sub	fp, #76
0ec60     51 00 00 FF 
0ec64     F8 E5 85 F1 | 	sub	objptr, ##41976
0ec68     18 12 62 FD | 	getqx	arg01
0ec6c     68 A6 B0 FD | 	call	#__system___gc_alloc_managed
0ec70     0F FB 61 FC | 	wrlong	result1, local01
0ec74                 | ' for y=a3 to a3+a5-1
0ec74     44 4E 05 F1 | 	add	fp, #68
0ec78     A7 20 02 FB | 	rdlong	local02, fp
0ec7c     0C 4E 05 F1 | 	add	fp, #12
0ec80     A7 20 62 FC | 	wrlong	local02, fp
0ec84     0C 4E 85 F1 | 	sub	fp, #12
0ec88     A7 22 02 FB | 	rdlong	local03, fp
0ec8c     08 4E 05 F1 | 	add	fp, #8
0ec90     A7 24 02 FB | 	rdlong	local04, fp
0ec94     4C 4E 85 F1 | 	sub	fp, #76
0ec98     12 23 02 F1 | 	add	local03, local04
0ec9c                 | LR__1251
0ec9c     50 4E 05 F1 | 	add	fp, #80
0eca0     A7 20 02 FB | 	rdlong	local02, fp
0eca4     50 4E 85 F1 | 	sub	fp, #80
0eca8     11 21 52 F2 | 	cmps	local02, local03 wc
0ecac     10 01 90 3D |  if_ae	jmp	#LR__1254
0ecb0                 | '   for x=a2 to a4+a2-1
0ecb0     40 4E 05 F1 | 	add	fp, #64
0ecb4     A7 1E 02 FB | 	rdlong	local01, fp
0ecb8     52 00 00 FF 
0ecbc     54 E4 05 F1 | 	add	objptr, ##42068
0ecc0     F2 1E 62 FC | 	wrlong	local01, objptr
0ecc4     52 00 00 FF 
0ecc8     54 E4 85 F1 | 	sub	objptr, ##42068
0eccc     08 4E 05 F1 | 	add	fp, #8
0ecd0     A7 26 02 FB | 	rdlong	local05, fp
0ecd4     08 4E 85 F1 | 	sub	fp, #8
0ecd8     A7 28 02 FB | 	rdlong	local06, fp
0ecdc     40 4E 85 F1 | 	sub	fp, #64
0ece0     14 27 02 F1 | 	add	local05, local06
0ece4                 | LR__1252
0ece4     52 00 00 FF 
0ece8     54 E4 05 F1 | 	add	objptr, ##42068
0ecec     F2 1E 02 FB | 	rdlong	local01, objptr
0ecf0     52 00 00 FF 
0ecf4     54 E4 85 F1 | 	sub	objptr, ##42068
0ecf8     13 1F 52 F2 | 	cmps	local01, local05 wc
0ecfc     A8 00 90 3D |  if_ae	jmp	#LR__1253
0ed00     3C 4E 05 F1 | 	add	fp, #60
0ed04     A7 28 02 FB | 	rdlong	local06, fp
0ed08     04 4E 05 F1 | 	add	fp, #4
0ed0c     A7 24 02 FB | 	rdlong	local04, fp
0ed10     10 4E 05 F1 | 	add	fp, #16
0ed14     A7 20 02 FB | 	rdlong	local02, fp
0ed18     10 1F 02 F6 | 	mov	local01, local02
0ed1c     0C 4E 85 F1 | 	sub	fp, #12
0ed20     A7 16 02 FB | 	rdlong	arg03, fp
0ed24     0B 1F 82 F1 | 	sub	local01, arg03
0ed28     04 4E 05 F1 | 	add	fp, #4
0ed2c     A7 16 02 FB | 	rdlong	arg03, fp
0ed30     0B 1F 02 FD | 	qmul	local01, arg03
0ed34     02 28 66 F0 | 	shl	local06, #2
0ed38     51 00 00 FF 
0ed3c     F8 E5 05 F1 | 	add	objptr, ##41976
0ed40     F2 28 02 F1 | 	add	local06, objptr
0ed44     14 29 02 FB | 	rdlong	local06, local06
0ed48     5C E4 05 F1 | 	add	objptr, #92
0ed4c     F2 1E 02 FB | 	rdlong	local01, objptr
0ed50     52 00 00 FF 
0ed54     54 E4 85 F1 | 	sub	objptr, ##42068
0ed58     0F 2B 02 F6 | 	mov	local07, local01
0ed5c     12 2B 82 F1 | 	sub	local07, local04
0ed60     F2 12 02 FB | 	rdlong	arg01, objptr
0ed64     0F 13 02 F1 | 	add	arg01, local01
0ed68     48 4E 85 F1 | 	sub	fp, #72
0ed6c     0A 20 66 F0 | 	shl	local02, #10
0ed70     10 13 02 F1 | 	add	arg01, local02
0ed74     18 24 62 FD | 	getqx	local04
0ed78     12 2B 02 F1 | 	add	local07, local04
0ed7c     14 2B 02 F1 | 	add	local07, local06
0ed80     54 37 B0 FD | 	call	#_pspeek
0ed84     15 FB 41 FC | 	wrbyte	result1, local07
0ed88     52 00 00 FF 
0ed8c     54 E4 05 F1 | 	add	objptr, ##42068
0ed90     F2 2A 02 FB | 	rdlong	local07, objptr
0ed94     01 2A 06 F1 | 	add	local07, #1
0ed98     F2 2A 62 FC | 	wrlong	local07, objptr
0ed9c     52 00 00 FF 
0eda0     54 E4 85 F1 | 	sub	objptr, ##42068
0eda4     3C FF 9F FD | 	jmp	#LR__1252
0eda8                 | LR__1253
0eda8     50 4E 05 F1 | 	add	fp, #80
0edac     A7 2A 02 FB | 	rdlong	local07, fp
0edb0     01 2A 06 F1 | 	add	local07, #1
0edb4     A7 2A 62 FC | 	wrlong	local07, fp
0edb8     50 4E 85 F1 | 	sub	fp, #80
0edbc     DC FE 9F FD | 	jmp	#LR__1251
0edc0                 | LR__1254
0edc0     3C 4E 05 F1 | 	add	fp, #60
0edc4     A7 2A 02 FB | 	rdlong	local07, fp
0edc8     15 13 02 F6 | 	mov	arg01, local07
0edcc     3C 4E 85 F1 | 	sub	fp, #60
0edd0     02 2A 66 F0 | 	shl	local07, #2
0edd4     51 00 00 FF 
0edd8     F8 E5 05 F1 | 	add	objptr, ##41976
0eddc     F2 2A 02 F1 | 	add	local07, objptr
0ede0     15 15 02 FB | 	rdlong	arg02, local07
0ede4     51 00 00 FF 
0ede8     F8 E5 85 F1 | 	sub	objptr, ##41976
0edec     74 4A B0 FD | 	call	#_hg010b_spin2_setspriteptr
0edf0     3C 4E 05 F1 | 	add	fp, #60
0edf4     A7 12 02 FB | 	rdlong	arg01, fp
0edf8     0C 4E 05 F1 | 	add	fp, #12
0edfc     A7 14 02 FB | 	rdlong	arg02, fp
0ee00     04 4E 05 F1 | 	add	fp, #4
0ee04     A7 16 02 FB | 	rdlong	arg03, fp
0ee08     4C 4E 85 F1 | 	sub	fp, #76
0ee0c     C8 4A B0 FD | 	call	#_hg010b_spin2_setspritesize
0ee10     A7 F0 03 F6 | 	mov	ptra, fp
0ee14     B2 00 A0 FD | 	call	#popregs_
0ee18                 | _do_defsprite_ret
0ee18     2D 00 64 FD | 	ret
0ee1c                 | 
0ee1c                 | ' 
0ee1c                 | ' sub do_sprite
0ee1c                 | _do_sprite
0ee1c     00 4A 05 F6 | 	mov	COUNT_, #0
0ee20     A8 00 A0 FD | 	call	#pushregs_
0ee24     30 F0 07 F1 | 	add	ptra, #48
0ee28     48 9B BF FD | 	call	#_pop
0ee2c     FD 16 02 F6 | 	mov	arg03, result1
0ee30     FE 14 02 F6 | 	mov	arg02, result2
0ee34     FF 12 02 F6 | 	mov	arg01, result3
0ee38     18 4E 05 F1 | 	add	fp, #24
0ee3c     A7 16 62 FC | 	wrlong	arg03, fp
0ee40     04 4E 05 F1 | 	add	fp, #4
0ee44     A7 14 62 FC | 	wrlong	arg02, fp
0ee48     04 4E 05 F1 | 	add	fp, #4
0ee4c     A7 12 62 FC | 	wrlong	arg01, fp
0ee50     20 4E 85 F1 | 	sub	fp, #32
0ee54     1C 9B BF FD | 	call	#_pop
0ee58     FD 16 02 F6 | 	mov	arg03, result1
0ee5c     FE 14 02 F6 | 	mov	arg02, result2
0ee60     FF 12 02 F6 | 	mov	arg01, result3
0ee64     0C 4E 05 F1 | 	add	fp, #12
0ee68     A7 16 62 FC | 	wrlong	arg03, fp
0ee6c     04 4E 05 F1 | 	add	fp, #4
0ee70     A7 14 62 FC | 	wrlong	arg02, fp
0ee74     04 4E 05 F1 | 	add	fp, #4
0ee78     A7 12 62 FC | 	wrlong	arg01, fp
0ee7c     14 4E 85 F1 | 	sub	fp, #20
0ee80     F0 9A BF FD | 	call	#_pop
0ee84     FF 16 02 F6 | 	mov	arg03, result3
0ee88     A7 FA 61 FC | 	wrlong	result1, fp
0ee8c     04 4E 05 F1 | 	add	fp, #4
0ee90     A7 FC 61 FC | 	wrlong	result2, fp
0ee94     04 4E 05 F1 | 	add	fp, #4
0ee98     A7 16 62 FC | 	wrlong	arg03, fp
0ee9c     08 4E 85 F1 | 	sub	fp, #8
0eea0     A7 12 02 F6 | 	mov	arg01, fp
0eea4     5C F3 BF FD | 	call	#_converttoint
0eea8     24 4E 05 F1 | 	add	fp, #36
0eeac     A7 FA 61 FC | 	wrlong	result1, fp
0eeb0     18 4E 85 F1 | 	sub	fp, #24
0eeb4     A7 12 02 F6 | 	mov	arg01, fp
0eeb8     0C 4E 85 F1 | 	sub	fp, #12
0eebc     44 F3 BF FD | 	call	#_converttoint
0eec0     28 4E 05 F1 | 	add	fp, #40
0eec4     A7 FA 61 FC | 	wrlong	result1, fp
0eec8     10 4E 85 F1 | 	sub	fp, #16
0eecc     A7 12 02 F6 | 	mov	arg01, fp
0eed0     18 4E 85 F1 | 	sub	fp, #24
0eed4     2C F3 BF FD | 	call	#_converttoint
0eed8     2C 4E 05 F1 | 	add	fp, #44
0eedc     A7 FA 61 FC | 	wrlong	result1, fp
0eee0     08 4E 85 F1 | 	sub	fp, #8
0eee4     A7 12 02 FB | 	rdlong	arg01, fp
0eee8     04 4E 05 F1 | 	add	fp, #4
0eeec     A7 14 02 FB | 	rdlong	arg02, fp
0eef0     FD 16 02 F6 | 	mov	arg03, result1
0eef4     28 4E 85 F1 | 	sub	fp, #40
0eef8     90 49 B0 FD | 	call	#_hg010b_spin2_setspritepos
0eefc     A7 F0 03 F6 | 	mov	ptra, fp
0ef00     B2 00 A0 FD | 	call	#popregs_
0ef04                 | _do_sprite_ret
0ef04     2D 00 64 FD | 	ret
0ef08                 | 
0ef08                 | ' 
0ef08                 | ' sub do_mousex
0ef08                 | _do_mousex
0ef08     00 4A 05 F6 | 	mov	COUNT_, #0
0ef0c     A8 00 A0 FD | 	call	#pushregs_
0ef10     0C F0 07 F1 | 	add	ptra, #12
0ef14     08 4E 05 F1 | 	add	fp, #8
0ef18     A7 3A 68 FC | 	wrlong	#29, fp
0ef1c     08 4E 85 F1 | 	sub	fp, #8
0ef20     51 00 00 FF 
0ef24     B0 E5 05 F1 | 	add	objptr, ##41904
0ef28     F2 12 02 FB | 	rdlong	arg01, objptr
0ef2c     51 00 00 FF 
0ef30     B0 E5 85 F1 | 	sub	objptr, ##41904
0ef34     A7 12 62 FC | 	wrlong	arg01, fp
0ef38     A7 12 02 F6 | 	mov	arg01, fp
0ef3c     CC 9A BF FD | 	call	#_push
0ef40     A7 F0 03 F6 | 	mov	ptra, fp
0ef44     B2 00 A0 FD | 	call	#popregs_
0ef48                 | _do_mousex_ret
0ef48     2D 00 64 FD | 	ret
0ef4c                 | 
0ef4c                 | ' 
0ef4c                 | ' sub do_mousey
0ef4c                 | _do_mousey
0ef4c     00 4A 05 F6 | 	mov	COUNT_, #0
0ef50     A8 00 A0 FD | 	call	#pushregs_
0ef54     0C F0 07 F1 | 	add	ptra, #12
0ef58     08 4E 05 F1 | 	add	fp, #8
0ef5c     A7 3A 68 FC | 	wrlong	#29, fp
0ef60     08 4E 85 F1 | 	sub	fp, #8
0ef64     51 00 00 FF 
0ef68     B4 E5 05 F1 | 	add	objptr, ##41908
0ef6c     F2 12 02 FB | 	rdlong	arg01, objptr
0ef70     51 00 00 FF 
0ef74     B4 E5 85 F1 | 	sub	objptr, ##41908
0ef78     A7 12 62 FC | 	wrlong	arg01, fp
0ef7c     A7 12 02 F6 | 	mov	arg01, fp
0ef80     88 9A BF FD | 	call	#_push
0ef84     A7 F0 03 F6 | 	mov	ptra, fp
0ef88     B2 00 A0 FD | 	call	#popregs_
0ef8c                 | _do_mousey_ret
0ef8c     2D 00 64 FD | 	ret
0ef90                 | 
0ef90                 | ' 
0ef90                 | ' sub do_mousew
0ef90                 | _do_mousew
0ef90     00 4A 05 F6 | 	mov	COUNT_, #0
0ef94     A8 00 A0 FD | 	call	#pushregs_
0ef98     0C F0 07 F1 | 	add	ptra, #12
0ef9c     08 4E 05 F1 | 	add	fp, #8
0efa0     A7 38 68 FC | 	wrlong	#28, fp
0efa4     08 4E 85 F1 | 	sub	fp, #8
0efa8     51 00 00 FF 
0efac     BC E5 05 F1 | 	add	objptr, ##41916
0efb0     F2 12 02 FB | 	rdlong	arg01, objptr
0efb4     51 00 00 FF 
0efb8     BC E5 85 F1 | 	sub	objptr, ##41916
0efbc     A7 12 62 FC | 	wrlong	arg01, fp
0efc0     A7 12 02 F6 | 	mov	arg01, fp
0efc4     44 9A BF FD | 	call	#_push
0efc8     A7 F0 03 F6 | 	mov	ptra, fp
0efcc     B2 00 A0 FD | 	call	#popregs_
0efd0                 | _do_mousew_ret
0efd0     2D 00 64 FD | 	ret
0efd4                 | 
0efd4                 | ' 
0efd4                 | ' sub do_mousek
0efd4                 | _do_mousek
0efd4     00 4A 05 F6 | 	mov	COUNT_, #0
0efd8     A8 00 A0 FD | 	call	#pushregs_
0efdc     0C F0 07 F1 | 	add	ptra, #12
0efe0     08 4E 05 F1 | 	add	fp, #8
0efe4     A7 3A 68 FC | 	wrlong	#29, fp
0efe8     08 4E 85 F1 | 	sub	fp, #8
0efec     51 00 00 FF 
0eff0     B8 E5 05 F1 | 	add	objptr, ##41912
0eff4     F2 12 02 FB | 	rdlong	arg01, objptr
0eff8     51 00 00 FF 
0effc     B8 E5 85 F1 | 	sub	objptr, ##41912
0f000     A7 12 62 FC | 	wrlong	arg01, fp
0f004     A7 12 02 F6 | 	mov	arg01, fp
0f008     00 9A BF FD | 	call	#_push
0f00c     A7 F0 03 F6 | 	mov	ptra, fp
0f010     B2 00 A0 FD | 	call	#popregs_
0f014                 | _do_mousek_ret
0f014     2D 00 64 FD | 	ret
0f018                 | 
0f018                 | ' 
0f018                 | ' 
0f018                 | ' sub do_rdpin
0f018                 | _do_rdpin
0f018     00 4A 05 F6 | 	mov	COUNT_, #0
0f01c     A8 00 A0 FD | 	call	#pushregs_
0f020     0C F0 07 F1 | 	add	ptra, #12
0f024     4C 99 BF FD | 	call	#_pop
0f028     A7 FA 61 FC | 	wrlong	result1, fp
0f02c     04 4E 05 F1 | 	add	fp, #4
0f030     A7 FC 61 FC | 	wrlong	result2, fp
0f034     04 4E 05 F1 | 	add	fp, #4
0f038     A7 FE 61 FC | 	wrlong	result3, fp
0f03c     08 4E 85 F1 | 	sub	fp, #8
0f040     A7 12 02 F6 | 	mov	arg01, fp
0f044     BC F1 BF FD | 	call	#_converttoint
0f048     FD FA 89 FA | 	rdpin	result1, result1
0f04c     52 00 00 FF 
0f050     A4 E4 05 F1 | 	add	objptr, ##42148
0f054     F2 FA 61 FC | 	wrlong	result1, objptr
0f058     52 00 00 FF 
0f05c     A4 E4 85 F1 | 	sub	objptr, ##42148
0f060     08 4E 05 F1 | 	add	fp, #8
0f064     A7 3A 68 FC | 	wrlong	#29, fp
0f068     08 4E 85 F1 | 	sub	fp, #8
0f06c     A7 08 68 FC | 	wrlong	#4, fp
0f070     A7 12 02 F6 | 	mov	arg01, fp
0f074     94 99 BF FD | 	call	#_push
0f078     A7 F0 03 F6 | 	mov	ptra, fp
0f07c     B2 00 A0 FD | 	call	#popregs_
0f080                 | _do_rdpin_ret
0f080     2D 00 64 FD | 	ret
0f084                 | 
0f084                 | ' 
0f084                 | ' sub do_rqpin
0f084                 | _do_rqpin
0f084     00 4A 05 F6 | 	mov	COUNT_, #0
0f088     A8 00 A0 FD | 	call	#pushregs_
0f08c     0C F0 07 F1 | 	add	ptra, #12
0f090     E0 98 BF FD | 	call	#_pop
0f094     A7 FA 61 FC | 	wrlong	result1, fp
0f098     04 4E 05 F1 | 	add	fp, #4
0f09c     A7 FC 61 FC | 	wrlong	result2, fp
0f0a0     04 4E 05 F1 | 	add	fp, #4
0f0a4     A7 FE 61 FC | 	wrlong	result3, fp
0f0a8     08 4E 85 F1 | 	sub	fp, #8
0f0ac     A7 12 02 F6 | 	mov	arg01, fp
0f0b0     50 F1 BF FD | 	call	#_converttoint
0f0b4     FD 12 02 F6 | 	mov	arg01, result1
0f0b8     00 FA 05 F6 | 	mov	result1, #0
0f0bc     09 FB 81 FA | 	rqpin	result1, arg01
0f0c0     52 00 00 FF 
0f0c4     A4 E4 05 F1 | 	add	objptr, ##42148
0f0c8     F2 FA 61 FC | 	wrlong	result1, objptr
0f0cc     52 00 00 FF 
0f0d0     A4 E4 85 F1 | 	sub	objptr, ##42148
0f0d4     08 4E 05 F1 | 	add	fp, #8
0f0d8     A7 3A 68 FC | 	wrlong	#29, fp
0f0dc     08 4E 85 F1 | 	sub	fp, #8
0f0e0     A7 08 68 FC | 	wrlong	#4, fp
0f0e4     A7 12 02 F6 | 	mov	arg01, fp
0f0e8     20 99 BF FD | 	call	#_push
0f0ec     A7 F0 03 F6 | 	mov	ptra, fp
0f0f0     B2 00 A0 FD | 	call	#popregs_
0f0f4                 | _do_rqpin_ret
0f0f4     2D 00 64 FD | 	ret
0f0f8                 | 
0f0f8                 | ' 
0f0f8                 | ' sub do_pinread
0f0f8                 | _do_pinread
0f0f8     00 4A 05 F6 | 	mov	COUNT_, #0
0f0fc     A8 00 A0 FD | 	call	#pushregs_
0f100     0C F0 07 F1 | 	add	ptra, #12
0f104     6C 98 BF FD | 	call	#_pop
0f108     A7 FA 61 FC | 	wrlong	result1, fp
0f10c     04 4E 05 F1 | 	add	fp, #4
0f110     A7 FC 61 FC | 	wrlong	result2, fp
0f114     04 4E 05 F1 | 	add	fp, #4
0f118     A7 FE 61 FC | 	wrlong	result3, fp
0f11c     08 4E 85 F1 | 	sub	fp, #8
0f120     A7 12 02 F6 | 	mov	arg01, fp
0f124     DC F0 BF FD | 	call	#_converttoint
0f128     FD 12 02 F6 | 	mov	arg01, result1
0f12c     20 12 CE F7 | 	test	arg01, #32 wz
0f130     FF FB 01 56 |  if_ne	mov	result1, inb
0f134     FE FB 01 A6 |  if_e	mov	result1, ina
0f138     09 FB 41 F0 | 	shr	result1, arg01
0f13c     06 12 46 F0 | 	shr	arg01, #6
0f140     09 FB 41 F7 | 	zerox	result1, arg01
0f144     52 00 00 FF 
0f148     A4 E4 05 F1 | 	add	objptr, ##42148
0f14c     F2 FA 61 FC | 	wrlong	result1, objptr
0f150     52 00 00 FF 
0f154     A4 E4 85 F1 | 	sub	objptr, ##42148
0f158     08 4E 05 F1 | 	add	fp, #8
0f15c     A7 3A 68 FC | 	wrlong	#29, fp
0f160     08 4E 85 F1 | 	sub	fp, #8
0f164     A7 08 68 FC | 	wrlong	#4, fp
0f168     A7 12 02 F6 | 	mov	arg01, fp
0f16c     9C 98 BF FD | 	call	#_push
0f170     A7 F0 03 F6 | 	mov	ptra, fp
0f174     B2 00 A0 FD | 	call	#popregs_
0f178                 | _do_pinread_ret
0f178     2D 00 64 FD | 	ret
0f17c                 | 
0f17c                 | ' 
0f17c                 | ' sub do_gettime
0f17c                 | _do_gettime
0f17c     02 4A 05 F6 | 	mov	COUNT_, #2
0f180     A8 00 A0 FD | 	call	#pushregs_
0f184     14 F0 07 F1 | 	add	ptra, #20
0f188                 | ' 
0f188                 | ' const asm 
0f188     1A 1E 72 FD | 	getct	local01 wc
0f18c     1A 20 62 FD | 	getct	local02
0f190                 | ' 
0f190                 | ' return hi1, lo1
0f190     10 FD 01 F6 | 	mov	result2, local02
0f194     A7 1E 62 FC | 	wrlong	local01, fp
0f198     04 4E 05 F1 | 	add	fp, #4
0f19c     A7 FC 61 FC | 	wrlong	result2, fp
0f1a0     0C 4E 05 F1 | 	add	fp, #12
0f1a4     A7 3A 68 FC | 	wrlong	#29, fp
0f1a8     0C 4E 85 F1 | 	sub	fp, #12
0f1ac     A7 12 02 FB | 	rdlong	arg01, fp
0f1b0     04 4E 05 F1 | 	add	fp, #4
0f1b4     A7 12 62 FC | 	wrlong	arg01, fp
0f1b8     08 4E 85 F1 | 	sub	fp, #8
0f1bc     A7 12 02 FB | 	rdlong	arg01, fp
0f1c0     0C 4E 05 F1 | 	add	fp, #12
0f1c4     A7 12 62 FC | 	wrlong	arg01, fp
0f1c8     04 4E 85 F1 | 	sub	fp, #4
0f1cc     A7 12 02 F6 | 	mov	arg01, fp
0f1d0     08 4E 85 F1 | 	sub	fp, #8
0f1d4     34 98 BF FD | 	call	#_push
0f1d8     A7 F0 03 F6 | 	mov	ptra, fp
0f1dc     B2 00 A0 FD | 	call	#popregs_
0f1e0                 | _do_gettime_ret
0f1e0     2D 00 64 FD | 	ret
0f1e4                 | 
0f1e4                 | '    
0f1e4                 | ' 
0f1e4                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
0f1e4                 | ' 
0f1e4                 | ' '' ----------------------------- Clear the screen
0f1e4                 | ' 
0f1e4                 | ' sub do_cls
0f1e4                 | _do_cls
0f1e4     2E 00 00 FF 
0f1e8     00 E4 05 F1 | 	add	objptr, ##23552
0f1ec     F2 12 02 FB | 	rdlong	arg01, objptr
0f1f0     04 E4 85 F1 | 	sub	objptr, #4
0f1f4     F2 14 02 FB | 	rdlong	arg02, objptr
0f1f8     2D 00 00 FF 
0f1fc     FC E5 85 F1 | 	sub	objptr, ##23548
0f200     8C 53 B0 FD | 	call	#_hg010b_spin2_cls
0f204     2E 00 00 FF 
0f208     00 E4 05 F1 | 	add	objptr, ##23552
0f20c     F2 14 02 FB | 	rdlong	arg02, objptr
0f210     14 E4 85 F1 | 	sub	objptr, #20
0f214     F2 14 62 FC | 	wrlong	arg02, objptr
0f218     2D 00 00 FF 
0f21c     EC E5 85 F1 | 	sub	objptr, ##23532
0f220                 | ' cls(ink,paper): plot_color=ink: print
0f220     00 12 06 F6 | 	mov	arg01, #0
0f224     F8 BB B0 FD | 	call	#__system___getiolock_0370
0f228     FD 12 02 F6 | 	mov	arg01, result1
0f22c     40 66 B0 FD | 	call	#__system___lockmem
0f230     00 12 06 F6 | 	mov	arg01, #0
0f234     0A 14 06 F6 | 	mov	arg02, #10
0f238     00 16 06 F6 | 	mov	arg03, #0
0f23c     CC 72 B0 FD | 	call	#__system___basic_print_char
0f240     00 12 06 F6 | 	mov	arg01, #0
0f244     D8 BB B0 FD | 	call	#__system___getiolock_0370
0f248     FD 00 68 FC | 	wrlong	#0, result1
0f24c                 | _do_cls_ret
0f24c     2D 00 64 FD | 	ret
0f250                 | 
0f250                 | ' 
0f250                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
0f250                 | ' 
0f250                 | ' sub do_color
0f250                 | _do_color
0f250     03 4A 05 F6 | 	mov	COUNT_, #3
0f254     A8 00 A0 FD | 	call	#pushregs_
0f258     18 97 BF FD | 	call	#_pop
0f25c     FD 1E 02 F6 | 	mov	local01, result1
0f260     FE 20 02 F6 | 	mov	local02, result2
0f264     FF 22 02 F6 | 	mov	local03, result3
0f268     2D 00 00 FF 
0f26c     EC E5 05 F1 | 	add	objptr, ##23532
0f270     F2 1E 62 FC | 	wrlong	local01, objptr
0f274     2D 00 00 FF 
0f278     EC E5 85 F1 | 	sub	objptr, ##23532
0f27c     A7 F0 03 F6 | 	mov	ptra, fp
0f280     B2 00 A0 FD | 	call	#popregs_
0f284                 | _do_color_ret
0f284     2D 00 64 FD | 	ret
0f288                 | 
0f288                 | ' 
0f288                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
0f288                 | ' 
0f288                 | ' sub do_plot
0f288                 | _do_plot
0f288     08 4A 05 F6 | 	mov	COUNT_, #8
0f28c     A8 00 A0 FD | 	call	#pushregs_
0f290     E0 96 BF FD | 	call	#_pop
0f294     FD 1E 02 F6 | 	mov	local01, result1
0f298     FE 14 02 F6 | 	mov	arg02, result2
0f29c     FF 16 02 F6 | 	mov	arg03, result3
0f2a0     0A 21 02 F6 | 	mov	local02, arg02
0f2a4     0B 23 02 F6 | 	mov	local03, arg03
0f2a8     C8 96 BF FD | 	call	#_pop
0f2ac     FD 24 02 F6 | 	mov	local04, result1
0f2b0     FE 26 02 F6 | 	mov	local05, result2
0f2b4     FF 28 02 F6 | 	mov	local06, result3
0f2b8     12 2B 02 F6 | 	mov	local07, local04
0f2bc     0F 2D 02 F6 | 	mov	local08, local01
0f2c0                 | ' t2=pop() 					 
0f2c0                 | ' t1=pop()
0f2c0                 | ' 
0f2c0                 | ' x=t1.result.iresult
0f2c0                 | ' y=t2.result.iresult	
0f2c0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) then 					  
0f2c0     1C 28 0E F2 | 	cmp	local06, #28 wz
0f2c4     1D 28 0E 52 |  if_ne	cmp	local06, #29 wz
0f2c8     44 00 90 5D |  if_ne	jmp	#LR__1260
0f2cc     1C 22 0E F2 | 	cmp	local03, #28 wz
0f2d0     1D 22 0E 52 |  if_ne	cmp	local03, #29 wz
0f2d4     38 00 90 5D |  if_ne	jmp	#LR__1260
0f2d8     2D 00 00 FF 
0f2dc     F0 E5 05 F1 | 	add	objptr, ##23536
0f2e0     F2 2A 62 FC | 	wrlong	local07, objptr
0f2e4     04 E4 05 F1 | 	add	objptr, #4
0f2e8     F2 2C 62 FC | 	wrlong	local08, objptr
0f2ec     04 E4 85 F1 | 	sub	objptr, #4
0f2f0     F2 12 02 FB | 	rdlong	arg01, objptr
0f2f4     04 E4 85 F1 | 	sub	objptr, #4
0f2f8     F2 16 02 FB | 	rdlong	arg03, objptr
0f2fc     2D 00 00 FF 
0f300     EC E5 85 F1 | 	sub	objptr, ##23532
0f304     16 15 02 F6 | 	mov	arg02, local08
0f308     18 46 B0 FD | 	call	#_hg010b_spin2_putpixel
0f30c     A4 00 90 FD | 	jmp	#LR__1265
0f310                 | LR__1260
0f310                 | '   if t1.result_type=result_float then x=round(t1.result.fresult)
0f310     1E 28 0E F2 | 	cmp	local06, #30 wz
0f314     10 00 90 5D |  if_ne	jmp	#LR__1261
0f318     12 13 02 F6 | 	mov	arg01, local04
0f31c     01 14 06 F6 | 	mov	arg02, #1
0f320     28 94 B0 FD | 	call	#__system___float_tointeger
0f324     FD 2A 02 F6 | 	mov	local07, result1
0f328                 | LR__1261
0f328                 | '   if t2.result_type=result_float then y=round(t2.result.fresult)
0f328     1E 22 0E F2 | 	cmp	local03, #30 wz
0f32c     10 00 90 5D |  if_ne	jmp	#LR__1262
0f330     0F 13 02 F6 | 	mov	arg01, local01
0f334     01 14 06 F6 | 	mov	arg02, #1
0f338     10 94 B0 FD | 	call	#__system___float_tointeger
0f33c     FD 2C 02 F6 | 	mov	local08, result1
0f340                 | LR__1262
0f340                 | '   if t1.result_type=result_string then x=val(t1.result.sresult)
0f340     1F 28 0E F2 | 	cmp	local06, #31 wz
0f344     18 00 90 5D |  if_ne	jmp	#LR__1263
0f348     12 13 02 F6 | 	mov	arg01, local04
0f34c     1C 97 B0 FD | 	call	#__system____builtin_atof
0f350     FD 12 02 F6 | 	mov	arg01, result1
0f354     00 14 06 F6 | 	mov	arg02, #0
0f358     F0 93 B0 FD | 	call	#__system___float_tointeger
0f35c     FD 2A 02 F6 | 	mov	local07, result1
0f360                 | LR__1263
0f360                 | '   if t2.result_type=result_string then y=val(t2.result.sresult)
0f360     1F 22 0E F2 | 	cmp	local03, #31 wz
0f364     18 00 90 5D |  if_ne	jmp	#LR__1264
0f368     0F 13 02 F6 | 	mov	arg01, local01
0f36c     FC 96 B0 FD | 	call	#__system____builtin_atof
0f370     FD 12 02 F6 | 	mov	arg01, result1
0f374     00 14 06 F6 | 	mov	arg02, #0
0f378     D0 93 B0 FD | 	call	#__system___float_tointeger
0f37c     FD 2C 02 F6 | 	mov	local08, result1
0f380                 | LR__1264
0f380     2D 00 00 FF 
0f384     F0 E5 05 F1 | 	add	objptr, ##23536
0f388     F2 2A 62 FC | 	wrlong	local07, objptr
0f38c     04 E4 05 F1 | 	add	objptr, #4
0f390     F2 2C 62 FC | 	wrlong	local08, objptr
0f394     04 E4 85 F1 | 	sub	objptr, #4
0f398     F2 12 02 FB | 	rdlong	arg01, objptr
0f39c     04 E4 85 F1 | 	sub	objptr, #4
0f3a0     F2 16 02 FB | 	rdlong	arg03, objptr
0f3a4     2D 00 00 FF 
0f3a8     EC E5 85 F1 | 	sub	objptr, ##23532
0f3ac     16 15 02 F6 | 	mov	arg02, local08
0f3b0     70 45 B0 FD | 	call	#_hg010b_spin2_putpixel
0f3b4                 | LR__1265
0f3b4     A7 F0 03 F6 | 	mov	ptra, fp
0f3b8     B2 00 A0 FD | 	call	#popregs_
0f3bc                 | _do_plot_ret
0f3bc     2D 00 64 FD | 	ret
0f3c0                 | 
0f3c0                 | ' 
0f3c0                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
0f3c0                 | ' 
0f3c0                 | ' sub do_draw
0f3c0                 | _do_draw
0f3c0     08 4A 05 F6 | 	mov	COUNT_, #8
0f3c4     A8 00 A0 FD | 	call	#pushregs_
0f3c8     A8 95 BF FD | 	call	#_pop
0f3cc     FD 1E 02 F6 | 	mov	local01, result1
0f3d0     FE 18 02 F6 | 	mov	arg04, result2
0f3d4     FF 16 02 F6 | 	mov	arg03, result3
0f3d8     0C 21 02 F6 | 	mov	local02, arg04
0f3dc     0B 23 02 F6 | 	mov	local03, arg03
0f3e0     90 95 BF FD | 	call	#_pop
0f3e4     FD 24 02 F6 | 	mov	local04, result1
0f3e8     FE 26 02 F6 | 	mov	local05, result2
0f3ec     FF 28 02 F6 | 	mov	local06, result3
0f3f0     12 2B 02 F6 | 	mov	local07, local04
0f3f4     0F 2D 02 F6 | 	mov	local08, local01
0f3f8                 | ' 
0f3f8                 | ' t2=pop()
0f3f8                 | ' t1=pop()
0f3f8                 | ' x=t1.result.iresult
0f3f8                 | ' y=t2.result.iresult
0f3f8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) then 					  
0f3f8     1C 28 0E F2 | 	cmp	local06, #28 wz
0f3fc     1D 28 0E 52 |  if_ne	cmp	local06, #29 wz
0f400     5C 00 90 5D |  if_ne	jmp	#LR__1270
0f404     1C 22 0E F2 | 	cmp	local03, #28 wz
0f408     1D 22 0E 52 |  if_ne	cmp	local03, #29 wz
0f40c     50 00 90 5D |  if_ne	jmp	#LR__1270
0f410     2D 00 00 FF 
0f414     F0 E5 05 F1 | 	add	objptr, ##23536
0f418     F2 12 02 FB | 	rdlong	arg01, objptr
0f41c     04 E4 05 F1 | 	add	objptr, #4
0f420     F2 14 02 FB | 	rdlong	arg02, objptr
0f424     08 E4 85 F1 | 	sub	objptr, #8
0f428     F2 1A 02 FB | 	rdlong	arg05, objptr
0f42c     2D 00 00 FF 
0f430     EC E5 85 F1 | 	sub	objptr, ##23532
0f434     15 17 02 F6 | 	mov	arg03, local07
0f438     16 19 02 F6 | 	mov	arg04, local08
0f43c     94 47 B0 FD | 	call	#_hg010b_spin2_draw
0f440     2D 00 00 FF 
0f444     F0 E5 05 F1 | 	add	objptr, ##23536
0f448     F2 2A 62 FC | 	wrlong	local07, objptr
0f44c     04 E4 05 F1 | 	add	objptr, #4
0f450     F2 2C 62 FC | 	wrlong	local08, objptr
0f454     2D 00 00 FF 
0f458     F4 E5 85 F1 | 	sub	objptr, ##23540
0f45c     BC 00 90 FD | 	jmp	#LR__1275
0f460                 | LR__1270
0f460                 | '   if t1.result_type=result_float then x=round(t1.result.fresult)
0f460     1E 28 0E F2 | 	cmp	local06, #30 wz
0f464     10 00 90 5D |  if_ne	jmp	#LR__1271
0f468     12 13 02 F6 | 	mov	arg01, local04
0f46c     01 14 06 F6 | 	mov	arg02, #1
0f470     D8 92 B0 FD | 	call	#__system___float_tointeger
0f474     FD 2A 02 F6 | 	mov	local07, result1
0f478                 | LR__1271
0f478                 | '   if t2.result_type=result_float then y=round(t2.result.fresult)
0f478     1E 22 0E F2 | 	cmp	local03, #30 wz
0f47c     10 00 90 5D |  if_ne	jmp	#LR__1272
0f480     0F 13 02 F6 | 	mov	arg01, local01
0f484     01 14 06 F6 | 	mov	arg02, #1
0f488     C0 92 B0 FD | 	call	#__system___float_tointeger
0f48c     FD 2C 02 F6 | 	mov	local08, result1
0f490                 | LR__1272
0f490                 | '   if t1.result_type=result_string then x=val(t1.result.fresult)
0f490     1F 28 0E F2 | 	cmp	local06, #31 wz
0f494     18 00 90 5D |  if_ne	jmp	#LR__1273
0f498     12 13 02 F6 | 	mov	arg01, local04
0f49c     CC 95 B0 FD | 	call	#__system____builtin_atof
0f4a0     FD 12 02 F6 | 	mov	arg01, result1
0f4a4     00 14 06 F6 | 	mov	arg02, #0
0f4a8     A0 92 B0 FD | 	call	#__system___float_tointeger
0f4ac     FD 2A 02 F6 | 	mov	local07, result1
0f4b0                 | LR__1273
0f4b0                 | '   if t2.result_type=result_string then y=val(t2.result.fresult)    
0f4b0     1F 22 0E F2 | 	cmp	local03, #31 wz
0f4b4     18 00 90 5D |  if_ne	jmp	#LR__1274
0f4b8     0F 13 02 F6 | 	mov	arg01, local01
0f4bc     AC 95 B0 FD | 	call	#__system____builtin_atof
0f4c0     FD 12 02 F6 | 	mov	arg01, result1
0f4c4     00 14 06 F6 | 	mov	arg02, #0
0f4c8     80 92 B0 FD | 	call	#__system___float_tointeger
0f4cc     FD 2C 02 F6 | 	mov	local08, result1
0f4d0                 | LR__1274
0f4d0     2D 00 00 FF 
0f4d4     F0 E5 05 F1 | 	add	objptr, ##23536
0f4d8     F2 12 02 FB | 	rdlong	arg01, objptr
0f4dc     04 E4 05 F1 | 	add	objptr, #4
0f4e0     F2 14 02 FB | 	rdlong	arg02, objptr
0f4e4     08 E4 85 F1 | 	sub	objptr, #8
0f4e8     F2 1A 02 FB | 	rdlong	arg05, objptr
0f4ec     2D 00 00 FF 
0f4f0     EC E5 85 F1 | 	sub	objptr, ##23532
0f4f4     15 17 02 F6 | 	mov	arg03, local07
0f4f8     16 19 02 F6 | 	mov	arg04, local08
0f4fc     D4 46 B0 FD | 	call	#_hg010b_spin2_draw
0f500     2D 00 00 FF 
0f504     F0 E5 05 F1 | 	add	objptr, ##23536
0f508     F2 2A 62 FC | 	wrlong	local07, objptr
0f50c     04 E4 05 F1 | 	add	objptr, #4
0f510     F2 2C 62 FC | 	wrlong	local08, objptr
0f514     2D 00 00 FF 
0f518     F4 E5 85 F1 | 	sub	objptr, ##23540
0f51c                 | LR__1275
0f51c     A7 F0 03 F6 | 	mov	ptra, fp
0f520     B2 00 A0 FD | 	call	#popregs_
0f524                 | _do_draw_ret
0f524     2D 00 64 FD | 	ret
0f528                 | 
0f528                 | ' 
0f528                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
0f528                 | ' 
0f528                 | ' sub do_fcircle
0f528                 | _do_fcircle
0f528     02 4A 05 F6 | 	mov	COUNT_, #2
0f52c     A8 00 A0 FD | 	call	#pushregs_
0f530     24 F0 07 F1 | 	add	ptra, #36
0f534     3C 94 BF FD | 	call	#_pop
0f538     FD 18 02 F6 | 	mov	arg04, result1
0f53c     FE 16 02 F6 | 	mov	arg03, result2
0f540     FF 14 02 F6 | 	mov	arg02, result3
0f544     18 4E 05 F1 | 	add	fp, #24
0f548     A7 18 62 FC | 	wrlong	arg04, fp
0f54c     04 4E 05 F1 | 	add	fp, #4
0f550     A7 16 62 FC | 	wrlong	arg03, fp
0f554     04 4E 05 F1 | 	add	fp, #4
0f558     A7 14 62 FC | 	wrlong	arg02, fp
0f55c     20 4E 85 F1 | 	sub	fp, #32
0f560     10 94 BF FD | 	call	#_pop
0f564     FD 18 02 F6 | 	mov	arg04, result1
0f568     FE 16 02 F6 | 	mov	arg03, result2
0f56c     FF 1E 02 F6 | 	mov	local01, result3
0f570     0C 4E 05 F1 | 	add	fp, #12
0f574     A7 18 62 FC | 	wrlong	arg04, fp
0f578     04 4E 05 F1 | 	add	fp, #4
0f57c     A7 16 62 FC | 	wrlong	arg03, fp
0f580     04 4E 05 F1 | 	add	fp, #4
0f584     A7 1E 62 FC | 	wrlong	local01, fp
0f588     14 4E 85 F1 | 	sub	fp, #20
0f58c     E4 93 BF FD | 	call	#_pop
0f590     A7 FA 61 FC | 	wrlong	result1, fp
0f594     04 4E 05 F1 | 	add	fp, #4
0f598     A7 FC 61 FC | 	wrlong	result2, fp
0f59c     04 4E 05 F1 | 	add	fp, #4
0f5a0     A7 FE 61 FC | 	wrlong	result3, fp
0f5a4                 | ' 
0f5a4                 | ' t3=pop()
0f5a4                 | ' t2=pop()
0f5a4                 | ' t1=pop()
0f5a4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f5a4     FF 18 02 F6 | 	mov	arg04, result3
0f5a8     08 4E 85 F1 | 	sub	fp, #8
0f5ac     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f5b0     08 4E 05 51 |  if_ne	add	fp, #8
0f5b4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0f5b8     08 4E 85 51 |  if_ne	sub	fp, #8
0f5bc     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0f5c0     7C 00 90 5D |  if_ne	jmp	#LR__1280
0f5c4     14 4E 05 F1 | 	add	fp, #20
0f5c8     A7 1E 02 FB | 	rdlong	local01, fp
0f5cc     14 4E 85 F1 | 	sub	fp, #20
0f5d0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f5d4     14 4E 05 51 |  if_ne	add	fp, #20
0f5d8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f5dc     14 4E 85 51 |  if_ne	sub	fp, #20
0f5e0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f5e4     58 00 90 5D |  if_ne	jmp	#LR__1280
0f5e8     20 4E 05 F1 | 	add	fp, #32
0f5ec     A7 1E 02 FB | 	rdlong	local01, fp
0f5f0     20 4E 85 F1 | 	sub	fp, #32
0f5f4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f5f8     20 4E 05 51 |  if_ne	add	fp, #32
0f5fc     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f600     20 4E 85 51 |  if_ne	sub	fp, #32
0f604     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f608     34 00 90 5D |  if_ne	jmp	#LR__1280
0f60c     A7 12 02 FB | 	rdlong	arg01, fp
0f610     0C 4E 05 F1 | 	add	fp, #12
0f614     A7 14 02 FB | 	rdlong	arg02, fp
0f618     0C 4E 05 F1 | 	add	fp, #12
0f61c     A7 16 02 FB | 	rdlong	arg03, fp
0f620     18 4E 85 F1 | 	sub	fp, #24
0f624     2D 00 00 FF 
0f628     EC E5 05 F1 | 	add	objptr, ##23532
0f62c     F2 18 02 FB | 	rdlong	arg04, objptr
0f630     2D 00 00 FF 
0f634     EC E5 85 F1 | 	sub	objptr, ##23532
0f638     1C 4A B0 FD | 	call	#_hg010b_spin2_fcircle
0f63c                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f63c     54 00 90 FD | 	jmp	#LR__1281
0f640                 | LR__1280
0f640     A7 12 02 F6 | 	mov	arg01, fp
0f644     BC EB BF FD | 	call	#_converttoint
0f648     FD 1E 02 F6 | 	mov	local01, result1
0f64c     0C 4E 05 F1 | 	add	fp, #12
0f650     A7 12 02 F6 | 	mov	arg01, fp
0f654     0C 4E 85 F1 | 	sub	fp, #12
0f658     A8 EB BF FD | 	call	#_converttoint
0f65c     FD 20 02 F6 | 	mov	local02, result1
0f660     18 4E 05 F1 | 	add	fp, #24
0f664     A7 12 02 F6 | 	mov	arg01, fp
0f668     18 4E 85 F1 | 	sub	fp, #24
0f66c     94 EB BF FD | 	call	#_converttoint
0f670     FD 16 02 F6 | 	mov	arg03, result1
0f674     2D 00 00 FF 
0f678     EC E5 05 F1 | 	add	objptr, ##23532
0f67c     F2 18 02 FB | 	rdlong	arg04, objptr
0f680     2D 00 00 FF 
0f684     EC E5 85 F1 | 	sub	objptr, ##23532
0f688     0F 13 02 F6 | 	mov	arg01, local01
0f68c     10 15 02 F6 | 	mov	arg02, local02
0f690     C4 49 B0 FD | 	call	#_hg010b_spin2_fcircle
0f694                 | LR__1281
0f694     A7 F0 03 F6 | 	mov	ptra, fp
0f698     B2 00 A0 FD | 	call	#popregs_
0f69c                 | _do_fcircle_ret
0f69c     2D 00 64 FD | 	ret
0f6a0                 | 
0f6a0                 | ' 
0f6a0                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
0f6a0                 | ' 
0f6a0                 | ' sub do_circle
0f6a0                 | _do_circle
0f6a0     02 4A 05 F6 | 	mov	COUNT_, #2
0f6a4     A8 00 A0 FD | 	call	#pushregs_
0f6a8     24 F0 07 F1 | 	add	ptra, #36
0f6ac     C4 92 BF FD | 	call	#_pop
0f6b0     FD 18 02 F6 | 	mov	arg04, result1
0f6b4     FE 16 02 F6 | 	mov	arg03, result2
0f6b8     FF 14 02 F6 | 	mov	arg02, result3
0f6bc     18 4E 05 F1 | 	add	fp, #24
0f6c0     A7 18 62 FC | 	wrlong	arg04, fp
0f6c4     04 4E 05 F1 | 	add	fp, #4
0f6c8     A7 16 62 FC | 	wrlong	arg03, fp
0f6cc     04 4E 05 F1 | 	add	fp, #4
0f6d0     A7 14 62 FC | 	wrlong	arg02, fp
0f6d4     20 4E 85 F1 | 	sub	fp, #32
0f6d8     98 92 BF FD | 	call	#_pop
0f6dc     FD 18 02 F6 | 	mov	arg04, result1
0f6e0     FE 16 02 F6 | 	mov	arg03, result2
0f6e4     FF 1E 02 F6 | 	mov	local01, result3
0f6e8     0C 4E 05 F1 | 	add	fp, #12
0f6ec     A7 18 62 FC | 	wrlong	arg04, fp
0f6f0     04 4E 05 F1 | 	add	fp, #4
0f6f4     A7 16 62 FC | 	wrlong	arg03, fp
0f6f8     04 4E 05 F1 | 	add	fp, #4
0f6fc     A7 1E 62 FC | 	wrlong	local01, fp
0f700     14 4E 85 F1 | 	sub	fp, #20
0f704     6C 92 BF FD | 	call	#_pop
0f708     A7 FA 61 FC | 	wrlong	result1, fp
0f70c     04 4E 05 F1 | 	add	fp, #4
0f710     A7 FC 61 FC | 	wrlong	result2, fp
0f714     04 4E 05 F1 | 	add	fp, #4
0f718     A7 FE 61 FC | 	wrlong	result3, fp
0f71c                 | ' 
0f71c                 | ' t3=pop()
0f71c                 | ' t2=pop()
0f71c                 | ' t1=pop()
0f71c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f71c     FF 18 02 F6 | 	mov	arg04, result3
0f720     08 4E 85 F1 | 	sub	fp, #8
0f724     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f728     08 4E 05 51 |  if_ne	add	fp, #8
0f72c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0f730     08 4E 85 51 |  if_ne	sub	fp, #8
0f734     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0f738     7C 00 90 5D |  if_ne	jmp	#LR__1290
0f73c     14 4E 05 F1 | 	add	fp, #20
0f740     A7 1E 02 FB | 	rdlong	local01, fp
0f744     14 4E 85 F1 | 	sub	fp, #20
0f748     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f74c     14 4E 05 51 |  if_ne	add	fp, #20
0f750     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f754     14 4E 85 51 |  if_ne	sub	fp, #20
0f758     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f75c     58 00 90 5D |  if_ne	jmp	#LR__1290
0f760     20 4E 05 F1 | 	add	fp, #32
0f764     A7 1E 02 FB | 	rdlong	local01, fp
0f768     20 4E 85 F1 | 	sub	fp, #32
0f76c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f770     20 4E 05 51 |  if_ne	add	fp, #32
0f774     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f778     20 4E 85 51 |  if_ne	sub	fp, #32
0f77c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f780     34 00 90 5D |  if_ne	jmp	#LR__1290
0f784     A7 12 02 FB | 	rdlong	arg01, fp
0f788     0C 4E 05 F1 | 	add	fp, #12
0f78c     A7 14 02 FB | 	rdlong	arg02, fp
0f790     0C 4E 05 F1 | 	add	fp, #12
0f794     A7 16 02 FB | 	rdlong	arg03, fp
0f798     18 4E 85 F1 | 	sub	fp, #24
0f79c     2D 00 00 FF 
0f7a0     EC E5 05 F1 | 	add	objptr, ##23532
0f7a4     F2 18 02 FB | 	rdlong	arg04, objptr
0f7a8     2D 00 00 FF 
0f7ac     EC E5 85 F1 | 	sub	objptr, ##23532
0f7b0     B0 49 B0 FD | 	call	#_hg010b_spin2_circle
0f7b4                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f7b4     54 00 90 FD | 	jmp	#LR__1291
0f7b8                 | LR__1290
0f7b8     A7 12 02 F6 | 	mov	arg01, fp
0f7bc     44 EA BF FD | 	call	#_converttoint
0f7c0     FD 1E 02 F6 | 	mov	local01, result1
0f7c4     0C 4E 05 F1 | 	add	fp, #12
0f7c8     A7 12 02 F6 | 	mov	arg01, fp
0f7cc     0C 4E 85 F1 | 	sub	fp, #12
0f7d0     30 EA BF FD | 	call	#_converttoint
0f7d4     FD 20 02 F6 | 	mov	local02, result1
0f7d8     18 4E 05 F1 | 	add	fp, #24
0f7dc     A7 12 02 F6 | 	mov	arg01, fp
0f7e0     18 4E 85 F1 | 	sub	fp, #24
0f7e4     1C EA BF FD | 	call	#_converttoint
0f7e8     FD 16 02 F6 | 	mov	arg03, result1
0f7ec     2D 00 00 FF 
0f7f0     EC E5 05 F1 | 	add	objptr, ##23532
0f7f4     F2 18 02 FB | 	rdlong	arg04, objptr
0f7f8     2D 00 00 FF 
0f7fc     EC E5 85 F1 | 	sub	objptr, ##23532
0f800     0F 13 02 F6 | 	mov	arg01, local01
0f804     10 15 02 F6 | 	mov	arg02, local02
0f808     58 49 B0 FD | 	call	#_hg010b_spin2_circle
0f80c                 | LR__1291
0f80c     A7 F0 03 F6 | 	mov	ptra, fp
0f810     B2 00 A0 FD | 	call	#popregs_
0f814                 | _do_circle_ret
0f814     2D 00 64 FD | 	ret
0f818                 | 
0f818                 | ' 
0f818                 | ' ' -------------------------- Draw a rectangle
0f818                 | ' 
0f818                 | ' sub do_box
0f818                 | _do_box
0f818     03 4A 05 F6 | 	mov	COUNT_, #3
0f81c     A8 00 A0 FD | 	call	#pushregs_
0f820     30 F0 07 F1 | 	add	ptra, #48
0f824     4C 91 BF FD | 	call	#_pop
0f828     FD 1A 02 F6 | 	mov	arg05, result1
0f82c     FE 18 02 F6 | 	mov	arg04, result2
0f830     FF 16 02 F6 | 	mov	arg03, result3
0f834     24 4E 05 F1 | 	add	fp, #36
0f838     A7 1A 62 FC | 	wrlong	arg05, fp
0f83c     04 4E 05 F1 | 	add	fp, #4
0f840     A7 18 62 FC | 	wrlong	arg04, fp
0f844     04 4E 05 F1 | 	add	fp, #4
0f848     A7 16 62 FC | 	wrlong	arg03, fp
0f84c     2C 4E 85 F1 | 	sub	fp, #44
0f850     20 91 BF FD | 	call	#_pop
0f854     FD 1A 02 F6 | 	mov	arg05, result1
0f858     FE 18 02 F6 | 	mov	arg04, result2
0f85c     FF 16 02 F6 | 	mov	arg03, result3
0f860     18 4E 05 F1 | 	add	fp, #24
0f864     A7 1A 62 FC | 	wrlong	arg05, fp
0f868     04 4E 05 F1 | 	add	fp, #4
0f86c     A7 18 62 FC | 	wrlong	arg04, fp
0f870     04 4E 05 F1 | 	add	fp, #4
0f874     A7 16 62 FC | 	wrlong	arg03, fp
0f878     20 4E 85 F1 | 	sub	fp, #32
0f87c     F4 90 BF FD | 	call	#_pop
0f880     FD 1A 02 F6 | 	mov	arg05, result1
0f884     FE 18 02 F6 | 	mov	arg04, result2
0f888     FF 1E 02 F6 | 	mov	local01, result3
0f88c     0C 4E 05 F1 | 	add	fp, #12
0f890     A7 1A 62 FC | 	wrlong	arg05, fp
0f894     04 4E 05 F1 | 	add	fp, #4
0f898     A7 18 62 FC | 	wrlong	arg04, fp
0f89c     04 4E 05 F1 | 	add	fp, #4
0f8a0     A7 1E 62 FC | 	wrlong	local01, fp
0f8a4     14 4E 85 F1 | 	sub	fp, #20
0f8a8     C8 90 BF FD | 	call	#_pop
0f8ac     A7 FA 61 FC | 	wrlong	result1, fp
0f8b0     04 4E 05 F1 | 	add	fp, #4
0f8b4     A7 FC 61 FC | 	wrlong	result2, fp
0f8b8     04 4E 05 F1 | 	add	fp, #4
0f8bc     A7 FE 61 FC | 	wrlong	result3, fp
0f8c0                 | ' 
0f8c0                 | ' t4=pop()
0f8c0                 | ' t3=pop()
0f8c0                 | ' t2=pop()
0f8c0                 | ' t1=pop()
0f8c0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0f8c0     FF 1A 02 F6 | 	mov	arg05, result3
0f8c4     08 4E 85 F1 | 	sub	fp, #8
0f8c8     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0f8cc     08 4E 05 51 |  if_ne	add	fp, #8
0f8d0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0f8d4     08 4E 85 51 |  if_ne	sub	fp, #8
0f8d8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0f8dc     A8 00 90 5D |  if_ne	jmp	#LR__1300
0f8e0     14 4E 05 F1 | 	add	fp, #20
0f8e4     A7 1E 02 FB | 	rdlong	local01, fp
0f8e8     14 4E 85 F1 | 	sub	fp, #20
0f8ec     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f8f0     14 4E 05 51 |  if_ne	add	fp, #20
0f8f4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0f8f8     14 4E 85 51 |  if_ne	sub	fp, #20
0f8fc     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0f900     84 00 90 5D |  if_ne	jmp	#LR__1300
0f904     20 4E 05 F1 | 	add	fp, #32
0f908     A7 1E 02 FB | 	rdlong	local01, fp
0f90c     20 4E 85 F1 | 	sub	fp, #32
0f910     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f914     20 4E 05 51 |  if_ne	add	fp, #32
0f918     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0f91c     20 4E 85 51 |  if_ne	sub	fp, #32
0f920     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0f924     60 00 90 5D |  if_ne	jmp	#LR__1300
0f928     2C 4E 05 F1 | 	add	fp, #44
0f92c     A7 1E 02 FB | 	rdlong	local01, fp
0f930     2C 4E 85 F1 | 	sub	fp, #44
0f934     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f938     2C 4E 05 51 |  if_ne	add	fp, #44
0f93c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0f940     2C 4E 85 51 |  if_ne	sub	fp, #44
0f944     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0f948     3C 00 90 5D |  if_ne	jmp	#LR__1300
0f94c     A7 12 02 FB | 	rdlong	arg01, fp
0f950     0C 4E 05 F1 | 	add	fp, #12
0f954     A7 14 02 FB | 	rdlong	arg02, fp
0f958     0C 4E 05 F1 | 	add	fp, #12
0f95c     A7 16 02 FB | 	rdlong	arg03, fp
0f960     0C 4E 05 F1 | 	add	fp, #12
0f964     A7 18 02 FB | 	rdlong	arg04, fp
0f968     24 4E 85 F1 | 	sub	fp, #36
0f96c     2D 00 00 FF 
0f970     EC E5 05 F1 | 	add	objptr, ##23532
0f974     F2 1A 02 FB | 	rdlong	arg05, objptr
0f978     2D 00 00 FF 
0f97c     EC E5 85 F1 | 	sub	objptr, ##23532
0f980     AC 49 B0 FD | 	call	#_hg010b_spin2_box
0f984                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0f984     6C 00 90 FD | 	jmp	#LR__1301
0f988                 | LR__1300
0f988     A7 12 02 F6 | 	mov	arg01, fp
0f98c     74 E8 BF FD | 	call	#_converttoint
0f990     FD 20 02 F6 | 	mov	local02, result1
0f994     0C 4E 05 F1 | 	add	fp, #12
0f998     A7 12 02 F6 | 	mov	arg01, fp
0f99c     0C 4E 85 F1 | 	sub	fp, #12
0f9a0     60 E8 BF FD | 	call	#_converttoint
0f9a4     FD 22 02 F6 | 	mov	local03, result1
0f9a8     18 4E 05 F1 | 	add	fp, #24
0f9ac     A7 12 02 F6 | 	mov	arg01, fp
0f9b0     18 4E 85 F1 | 	sub	fp, #24
0f9b4     4C E8 BF FD | 	call	#_converttoint
0f9b8     FD 1E 02 F6 | 	mov	local01, result1
0f9bc     24 4E 05 F1 | 	add	fp, #36
0f9c0     A7 12 02 F6 | 	mov	arg01, fp
0f9c4     24 4E 85 F1 | 	sub	fp, #36
0f9c8     38 E8 BF FD | 	call	#_converttoint
0f9cc     FD 18 02 F6 | 	mov	arg04, result1
0f9d0     2D 00 00 FF 
0f9d4     EC E5 05 F1 | 	add	objptr, ##23532
0f9d8     F2 1A 02 FB | 	rdlong	arg05, objptr
0f9dc     2D 00 00 FF 
0f9e0     EC E5 85 F1 | 	sub	objptr, ##23532
0f9e4     10 13 02 F6 | 	mov	arg01, local02
0f9e8     11 15 02 F6 | 	mov	arg02, local03
0f9ec     0F 17 02 F6 | 	mov	arg03, local01
0f9f0     3C 49 B0 FD | 	call	#_hg010b_spin2_box
0f9f4                 | LR__1301
0f9f4     A7 F0 03 F6 | 	mov	ptra, fp
0f9f8     B2 00 A0 FD | 	call	#popregs_
0f9fc                 | _do_box_ret
0f9fc     2D 00 64 FD | 	ret
0fa00                 | 
0fa00                 | ' 
0fa00                 | ' sub do_fill
0fa00                 | _do_fill
0fa00     03 4A 05 F6 | 	mov	COUNT_, #3
0fa04     A8 00 A0 FD | 	call	#pushregs_
0fa08     30 F0 07 F1 | 	add	ptra, #48
0fa0c     64 8F BF FD | 	call	#_pop
0fa10     FD 18 02 F6 | 	mov	arg04, result1
0fa14     FE 16 02 F6 | 	mov	arg03, result2
0fa18     FF 14 02 F6 | 	mov	arg02, result3
0fa1c     24 4E 05 F1 | 	add	fp, #36
0fa20     A7 18 62 FC | 	wrlong	arg04, fp
0fa24     04 4E 05 F1 | 	add	fp, #4
0fa28     A7 16 62 FC | 	wrlong	arg03, fp
0fa2c     04 4E 05 F1 | 	add	fp, #4
0fa30     A7 14 62 FC | 	wrlong	arg02, fp
0fa34     2C 4E 85 F1 | 	sub	fp, #44
0fa38     38 8F BF FD | 	call	#_pop
0fa3c     FD 18 02 F6 | 	mov	arg04, result1
0fa40     FE 16 02 F6 | 	mov	arg03, result2
0fa44     FF 14 02 F6 | 	mov	arg02, result3
0fa48     18 4E 05 F1 | 	add	fp, #24
0fa4c     A7 18 62 FC | 	wrlong	arg04, fp
0fa50     04 4E 05 F1 | 	add	fp, #4
0fa54     A7 16 62 FC | 	wrlong	arg03, fp
0fa58     04 4E 05 F1 | 	add	fp, #4
0fa5c     A7 14 62 FC | 	wrlong	arg02, fp
0fa60     20 4E 85 F1 | 	sub	fp, #32
0fa64     0C 8F BF FD | 	call	#_pop
0fa68     FD 18 02 F6 | 	mov	arg04, result1
0fa6c     FE 16 02 F6 | 	mov	arg03, result2
0fa70     FF 1E 02 F6 | 	mov	local01, result3
0fa74     0C 4E 05 F1 | 	add	fp, #12
0fa78     A7 18 62 FC | 	wrlong	arg04, fp
0fa7c     04 4E 05 F1 | 	add	fp, #4
0fa80     A7 16 62 FC | 	wrlong	arg03, fp
0fa84     04 4E 05 F1 | 	add	fp, #4
0fa88     A7 1E 62 FC | 	wrlong	local01, fp
0fa8c     14 4E 85 F1 | 	sub	fp, #20
0fa90     E0 8E BF FD | 	call	#_pop
0fa94     A7 FA 61 FC | 	wrlong	result1, fp
0fa98     04 4E 05 F1 | 	add	fp, #4
0fa9c     A7 FC 61 FC | 	wrlong	result2, fp
0faa0     04 4E 05 F1 | 	add	fp, #4
0faa4     A7 FE 61 FC | 	wrlong	result3, fp
0faa8                 | ' 
0faa8                 | ' t4=pop()
0faa8                 | ' t3=pop()
0faa8                 | ' t2=pop()
0faa8                 | ' t1=pop()
0faa8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0faa8     FF 18 02 F6 | 	mov	arg04, result3
0faac     08 4E 85 F1 | 	sub	fp, #8
0fab0     1C 18 0E F2 | 	cmp	arg04, #28 wz
0fab4     08 4E 05 51 |  if_ne	add	fp, #8
0fab8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0fabc     08 4E 85 51 |  if_ne	sub	fp, #8
0fac0     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0fac4     94 00 90 5D |  if_ne	jmp	#LR__1310
0fac8     14 4E 05 F1 | 	add	fp, #20
0facc     A7 1E 02 FB | 	rdlong	local01, fp
0fad0     14 4E 85 F1 | 	sub	fp, #20
0fad4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fad8     14 4E 05 51 |  if_ne	add	fp, #20
0fadc     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0fae0     14 4E 85 51 |  if_ne	sub	fp, #20
0fae4     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0fae8     70 00 90 5D |  if_ne	jmp	#LR__1310
0faec     20 4E 05 F1 | 	add	fp, #32
0faf0     A7 1E 02 FB | 	rdlong	local01, fp
0faf4     20 4E 85 F1 | 	sub	fp, #32
0faf8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fafc     20 4E 05 51 |  if_ne	add	fp, #32
0fb00     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0fb04     20 4E 85 51 |  if_ne	sub	fp, #32
0fb08     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0fb0c     4C 00 90 5D |  if_ne	jmp	#LR__1310
0fb10     2C 4E 05 F1 | 	add	fp, #44
0fb14     A7 1E 02 FB | 	rdlong	local01, fp
0fb18     2C 4E 85 F1 | 	sub	fp, #44
0fb1c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fb20     2C 4E 05 51 |  if_ne	add	fp, #44
0fb24     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0fb28     2C 4E 85 51 |  if_ne	sub	fp, #44
0fb2c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0fb30     28 00 90 5D |  if_ne	jmp	#LR__1310
0fb34     A7 12 02 FB | 	rdlong	arg01, fp
0fb38     0C 4E 05 F1 | 	add	fp, #12
0fb3c     A7 14 02 FB | 	rdlong	arg02, fp
0fb40     0C 4E 05 F1 | 	add	fp, #12
0fb44     A7 16 02 FB | 	rdlong	arg03, fp
0fb48     0C 4E 05 F1 | 	add	fp, #12
0fb4c     A7 18 02 FB | 	rdlong	arg04, fp
0fb50     24 4E 85 F1 | 	sub	fp, #36
0fb54     6C 42 B0 FD | 	call	#_hg010b_spin2_fill
0fb58                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
0fb58     58 00 90 FD | 	jmp	#LR__1311
0fb5c                 | LR__1310
0fb5c     A7 12 02 F6 | 	mov	arg01, fp
0fb60     A0 E6 BF FD | 	call	#_converttoint
0fb64     FD 20 02 F6 | 	mov	local02, result1
0fb68     0C 4E 05 F1 | 	add	fp, #12
0fb6c     A7 12 02 F6 | 	mov	arg01, fp
0fb70     0C 4E 85 F1 | 	sub	fp, #12
0fb74     8C E6 BF FD | 	call	#_converttoint
0fb78     FD 22 02 F6 | 	mov	local03, result1
0fb7c     18 4E 05 F1 | 	add	fp, #24
0fb80     A7 12 02 F6 | 	mov	arg01, fp
0fb84     18 4E 85 F1 | 	sub	fp, #24
0fb88     78 E6 BF FD | 	call	#_converttoint
0fb8c     FD 1E 02 F6 | 	mov	local01, result1
0fb90     24 4E 05 F1 | 	add	fp, #36
0fb94     A7 12 02 F6 | 	mov	arg01, fp
0fb98     24 4E 85 F1 | 	sub	fp, #36
0fb9c     64 E6 BF FD | 	call	#_converttoint
0fba0     FD 18 02 F6 | 	mov	arg04, result1
0fba4     10 13 02 F6 | 	mov	arg01, local02
0fba8     11 15 02 F6 | 	mov	arg02, local03
0fbac     0F 17 02 F6 | 	mov	arg03, local01
0fbb0     10 42 B0 FD | 	call	#_hg010b_spin2_fill
0fbb4                 | LR__1311
0fbb4     A7 F0 03 F6 | 	mov	ptra, fp
0fbb8     B2 00 A0 FD | 	call	#popregs_
0fbbc                 | _do_fill_ret
0fbbc     2D 00 64 FD | 	ret
0fbc0                 | 
0fbc0                 | ' 
0fbc0                 | ' ' -------------------------- Draw a frane
0fbc0                 | ' 
0fbc0                 | ' sub do_frame
0fbc0                 | _do_frame
0fbc0     03 4A 05 F6 | 	mov	COUNT_, #3
0fbc4     A8 00 A0 FD | 	call	#pushregs_
0fbc8     30 F0 07 F1 | 	add	ptra, #48
0fbcc     A4 8D BF FD | 	call	#_pop
0fbd0     FD 1A 02 F6 | 	mov	arg05, result1
0fbd4     FE 18 02 F6 | 	mov	arg04, result2
0fbd8     FF 16 02 F6 | 	mov	arg03, result3
0fbdc     24 4E 05 F1 | 	add	fp, #36
0fbe0     A7 1A 62 FC | 	wrlong	arg05, fp
0fbe4     04 4E 05 F1 | 	add	fp, #4
0fbe8     A7 18 62 FC | 	wrlong	arg04, fp
0fbec     04 4E 05 F1 | 	add	fp, #4
0fbf0     A7 16 62 FC | 	wrlong	arg03, fp
0fbf4     2C 4E 85 F1 | 	sub	fp, #44
0fbf8     78 8D BF FD | 	call	#_pop
0fbfc     FD 1A 02 F6 | 	mov	arg05, result1
0fc00     FE 18 02 F6 | 	mov	arg04, result2
0fc04     FF 16 02 F6 | 	mov	arg03, result3
0fc08     18 4E 05 F1 | 	add	fp, #24
0fc0c     A7 1A 62 FC | 	wrlong	arg05, fp
0fc10     04 4E 05 F1 | 	add	fp, #4
0fc14     A7 18 62 FC | 	wrlong	arg04, fp
0fc18     04 4E 05 F1 | 	add	fp, #4
0fc1c     A7 16 62 FC | 	wrlong	arg03, fp
0fc20     20 4E 85 F1 | 	sub	fp, #32
0fc24     4C 8D BF FD | 	call	#_pop
0fc28     FD 1A 02 F6 | 	mov	arg05, result1
0fc2c     FE 18 02 F6 | 	mov	arg04, result2
0fc30     FF 1E 02 F6 | 	mov	local01, result3
0fc34     0C 4E 05 F1 | 	add	fp, #12
0fc38     A7 1A 62 FC | 	wrlong	arg05, fp
0fc3c     04 4E 05 F1 | 	add	fp, #4
0fc40     A7 18 62 FC | 	wrlong	arg04, fp
0fc44     04 4E 05 F1 | 	add	fp, #4
0fc48     A7 1E 62 FC | 	wrlong	local01, fp
0fc4c     14 4E 85 F1 | 	sub	fp, #20
0fc50     20 8D BF FD | 	call	#_pop
0fc54     A7 FA 61 FC | 	wrlong	result1, fp
0fc58     04 4E 05 F1 | 	add	fp, #4
0fc5c     A7 FC 61 FC | 	wrlong	result2, fp
0fc60     04 4E 05 F1 | 	add	fp, #4
0fc64     A7 FE 61 FC | 	wrlong	result3, fp
0fc68                 | ' 
0fc68                 | ' t4=pop()
0fc68                 | ' t3=pop()
0fc68                 | ' t2=pop()
0fc68                 | ' t1=pop()
0fc68                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0fc68     FF 1A 02 F6 | 	mov	arg05, result3
0fc6c     08 4E 85 F1 | 	sub	fp, #8
0fc70     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0fc74     08 4E 05 51 |  if_ne	add	fp, #8
0fc78     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0fc7c     08 4E 85 51 |  if_ne	sub	fp, #8
0fc80     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0fc84     A8 00 90 5D |  if_ne	jmp	#LR__1320
0fc88     14 4E 05 F1 | 	add	fp, #20
0fc8c     A7 1E 02 FB | 	rdlong	local01, fp
0fc90     14 4E 85 F1 | 	sub	fp, #20
0fc94     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fc98     14 4E 05 51 |  if_ne	add	fp, #20
0fc9c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0fca0     14 4E 85 51 |  if_ne	sub	fp, #20
0fca4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0fca8     84 00 90 5D |  if_ne	jmp	#LR__1320
0fcac     20 4E 05 F1 | 	add	fp, #32
0fcb0     A7 1E 02 FB | 	rdlong	local01, fp
0fcb4     20 4E 85 F1 | 	sub	fp, #32
0fcb8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fcbc     20 4E 05 51 |  if_ne	add	fp, #32
0fcc0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0fcc4     20 4E 85 51 |  if_ne	sub	fp, #32
0fcc8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0fccc     60 00 90 5D |  if_ne	jmp	#LR__1320
0fcd0     2C 4E 05 F1 | 	add	fp, #44
0fcd4     A7 1E 02 FB | 	rdlong	local01, fp
0fcd8     2C 4E 85 F1 | 	sub	fp, #44
0fcdc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fce0     2C 4E 05 51 |  if_ne	add	fp, #44
0fce4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0fce8     2C 4E 85 51 |  if_ne	sub	fp, #44
0fcec     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0fcf0     3C 00 90 5D |  if_ne	jmp	#LR__1320
0fcf4     A7 12 02 FB | 	rdlong	arg01, fp
0fcf8     0C 4E 05 F1 | 	add	fp, #12
0fcfc     A7 14 02 FB | 	rdlong	arg02, fp
0fd00     0C 4E 05 F1 | 	add	fp, #12
0fd04     A7 16 02 FB | 	rdlong	arg03, fp
0fd08     0C 4E 05 F1 | 	add	fp, #12
0fd0c     A7 18 02 FB | 	rdlong	arg04, fp
0fd10     24 4E 85 F1 | 	sub	fp, #36
0fd14     2D 00 00 FF 
0fd18     EC E5 05 F1 | 	add	objptr, ##23532
0fd1c     F2 1A 02 FB | 	rdlong	arg05, objptr
0fd20     2D 00 00 FF 
0fd24     EC E5 85 F1 | 	sub	objptr, ##23532
0fd28     84 45 B0 FD | 	call	#_hg010b_spin2_frame
0fd2c                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0fd2c     6C 00 90 FD | 	jmp	#LR__1321
0fd30                 | LR__1320
0fd30     A7 12 02 F6 | 	mov	arg01, fp
0fd34     CC E4 BF FD | 	call	#_converttoint
0fd38     FD 20 02 F6 | 	mov	local02, result1
0fd3c     0C 4E 05 F1 | 	add	fp, #12
0fd40     A7 12 02 F6 | 	mov	arg01, fp
0fd44     0C 4E 85 F1 | 	sub	fp, #12
0fd48     B8 E4 BF FD | 	call	#_converttoint
0fd4c     FD 22 02 F6 | 	mov	local03, result1
0fd50     18 4E 05 F1 | 	add	fp, #24
0fd54     A7 12 02 F6 | 	mov	arg01, fp
0fd58     18 4E 85 F1 | 	sub	fp, #24
0fd5c     A4 E4 BF FD | 	call	#_converttoint
0fd60     FD 1E 02 F6 | 	mov	local01, result1
0fd64     24 4E 05 F1 | 	add	fp, #36
0fd68     A7 12 02 F6 | 	mov	arg01, fp
0fd6c     24 4E 85 F1 | 	sub	fp, #36
0fd70     90 E4 BF FD | 	call	#_converttoint
0fd74     FD 18 02 F6 | 	mov	arg04, result1
0fd78     2D 00 00 FF 
0fd7c     EC E5 05 F1 | 	add	objptr, ##23532
0fd80     F2 1A 02 FB | 	rdlong	arg05, objptr
0fd84     2D 00 00 FF 
0fd88     EC E5 85 F1 | 	sub	objptr, ##23532
0fd8c     10 13 02 F6 | 	mov	arg01, local02
0fd90     11 15 02 F6 | 	mov	arg02, local03
0fd94     0F 17 02 F6 | 	mov	arg03, local01
0fd98     14 45 B0 FD | 	call	#_hg010b_spin2_frame
0fd9c                 | LR__1321
0fd9c     A7 F0 03 F6 | 	mov	ptra, fp
0fda0     B2 00 A0 FD | 	call	#popregs_
0fda4                 | _do_frame_ret
0fda4     2D 00 64 FD | 	ret
0fda8                 | 
0fda8                 | ' 
0fda8                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
0fda8                 | ' 
0fda8                 | ' ' ------------------------- Print to the screem
0fda8                 | ' 
0fda8                 | ' sub do_print  
0fda8                 | _do_print
0fda8     0A 4A 05 F6 | 	mov	COUNT_, #10
0fdac     A8 00 A0 FD | 	call	#pushregs_
0fdb0     00 24 06 F6 | 	mov	local04, #0
0fdb4     BC 8B BF FD | 	call	#_pop
0fdb8     FD 26 02 F6 | 	mov	local05, result1
0fdbc     FE 28 02 F6 | 	mov	local06, result2
0fdc0     FF 2A 02 F6 | 	mov	local07, result3
0fdc4     13 1F 02 F6 | 	mov	local01, local05
0fdc8     14 21 02 F6 | 	mov	local02, local06
0fdcc     15 23 02 F6 | 	mov	local03, local07
0fdd0                 | '  
0fdd0                 | ' r=0
0fdd0                 | ' t1=pop() 
0fdd0                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
0fdd0     21 22 0E F2 | 	cmp	local03, #33 wz
0fdd4     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
0fdd8     20 00 90 5D |  if_ne	jmp	#LR__1330
0fddc     11 25 02 F6 | 	mov	local04, local03
0fde0     90 8B BF FD | 	call	#_pop
0fde4     FD 26 02 F6 | 	mov	local05, result1
0fde8     FE 28 02 F6 | 	mov	local06, result2
0fdec     FF 2A 02 F6 | 	mov	local07, result3
0fdf0     13 1F 02 F6 | 	mov	local01, local05
0fdf4     14 21 02 F6 | 	mov	local02, local06
0fdf8     15 23 02 F6 | 	mov	local03, local07
0fdfc                 | LR__1330
0fdfc                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
0fdfc     20 22 0E F2 | 	cmp	local03, #32 wz
0fe00     11 25 02 A6 |  if_e	mov	local04, local03
0fe04                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
0fe04     FF 22 0E F2 | 	cmp	local03, #255 wz
0fe08     0C 00 90 5D |  if_ne	jmp	#LR__1331
0fe0c     0F 13 02 F6 | 	mov	arg01, local01
0fe10     60 25 B0 FD | 	call	#_printerror
0fe14     30 04 90 FD | 	jmp	#LR__1348
0fe18                 | LR__1331
0fe18                 | ' 
0fe18                 | ' if r=print_mod_comma  then
0fe18     21 24 0E F2 | 	cmp	local04, #33 wz
0fe1c     AC 01 90 5D |  if_ne	jmp	#LR__1336
0fe20                 | '   if t1.result_type=result_int then print t1.result.iresult,
0fe20     1C 22 0E F2 | 	cmp	local03, #28 wz
0fe24     64 00 90 5D |  if_ne	jmp	#LR__1332
0fe28     00 12 06 F6 | 	mov	arg01, #0
0fe2c     F0 AF B0 FD | 	call	#__system___getiolock_0370
0fe30     FD 12 02 F6 | 	mov	arg01, result1
0fe34     38 5A B0 FD | 	call	#__system___lockmem
0fe38     00 28 06 F6 | 	mov	local06, #0
0fe3c     00 12 06 F6 | 	mov	arg01, #0
0fe40     0F 15 02 F6 | 	mov	arg02, local01
0fe44     00 16 06 F6 | 	mov	arg03, #0
0fe48     0A 18 06 F6 | 	mov	arg04, #10
0fe4c     58 67 B0 FD | 	call	#__system___basic_print_integer
0fe50     FD 2A 02 F6 | 	mov	local07, result1
0fe54     14 27 02 F6 | 	mov	local05, local06
0fe58     15 27 02 F1 | 	add	local05, local07
0fe5c     00 2C 06 F6 | 	mov	local08, #0
0fe60     00 12 06 F6 | 	mov	arg01, #0
0fe64     09 14 06 F6 | 	mov	arg02, #9
0fe68     00 16 06 F6 | 	mov	arg03, #0
0fe6c     9C 66 B0 FD | 	call	#__system___basic_print_char
0fe70     FD 2E 02 F6 | 	mov	local09, result1
0fe74     FD 26 02 F1 | 	add	local05, result1
0fe78     00 12 06 F6 | 	mov	arg01, #0
0fe7c     A0 AF B0 FD | 	call	#__system___getiolock_0370
0fe80     FD 00 68 FC | 	wrlong	#0, result1
0fe84     00 FA 05 F6 | 	mov	result1, #0
0fe88     00 30 06 F6 | 	mov	local10, #0
0fe8c                 | LR__1332
0fe8c                 | '   if t1.result_type=result_uint then print t1.result.uresult,
0fe8c     1D 22 0E F2 | 	cmp	local03, #29 wz
0fe90     64 00 90 5D |  if_ne	jmp	#LR__1333
0fe94     00 12 06 F6 | 	mov	arg01, #0
0fe98     84 AF B0 FD | 	call	#__system___getiolock_0370
0fe9c     FD 12 02 F6 | 	mov	arg01, result1
0fea0     CC 59 B0 FD | 	call	#__system___lockmem
0fea4     00 28 06 F6 | 	mov	local06, #0
0fea8     00 12 06 F6 | 	mov	arg01, #0
0feac     0F 15 02 F6 | 	mov	arg02, local01
0feb0     00 16 06 F6 | 	mov	arg03, #0
0feb4     0A 18 06 F6 | 	mov	arg04, #10
0feb8     2C 67 B0 FD | 	call	#__system___basic_print_unsigned
0febc     FD 2A 02 F6 | 	mov	local07, result1
0fec0     14 27 02 F6 | 	mov	local05, local06
0fec4     15 27 02 F1 | 	add	local05, local07
0fec8     00 2C 06 F6 | 	mov	local08, #0
0fecc     00 12 06 F6 | 	mov	arg01, #0
0fed0     09 14 06 F6 | 	mov	arg02, #9
0fed4     00 16 06 F6 | 	mov	arg03, #0
0fed8     30 66 B0 FD | 	call	#__system___basic_print_char
0fedc     FD 2E 02 F6 | 	mov	local09, result1
0fee0     FD 26 02 F1 | 	add	local05, result1
0fee4     00 12 06 F6 | 	mov	arg01, #0
0fee8     34 AF B0 FD | 	call	#__system___getiolock_0370
0feec     FD 00 68 FC | 	wrlong	#0, result1
0fef0     00 FA 05 F6 | 	mov	result1, #0
0fef4     00 30 06 F6 | 	mov	local10, #0
0fef8                 | LR__1333
0fef8                 | '   if t1.result_type=result_float then print t1.result.fresult,
0fef8     1E 22 0E F2 | 	cmp	local03, #30 wz
0fefc     64 00 90 5D |  if_ne	jmp	#LR__1334
0ff00     00 12 06 F6 | 	mov	arg01, #0
0ff04     18 AF B0 FD | 	call	#__system___getiolock_0370
0ff08     FD 12 02 F6 | 	mov	arg01, result1
0ff0c     60 59 B0 FD | 	call	#__system___lockmem
0ff10     00 28 06 F6 | 	mov	local06, #0
0ff14     00 12 06 F6 | 	mov	arg01, #0
0ff18     0F 15 02 F6 | 	mov	arg02, local01
0ff1c     00 16 06 F6 | 	mov	arg03, #0
0ff20     23 18 06 F6 | 	mov	arg04, #35
0ff24     74 89 B0 FD | 	call	#__system___basic_print_float
0ff28     FD 2A 02 F6 | 	mov	local07, result1
0ff2c     14 27 02 F6 | 	mov	local05, local06
0ff30     15 27 02 F1 | 	add	local05, local07
0ff34     00 2C 06 F6 | 	mov	local08, #0
0ff38     00 12 06 F6 | 	mov	arg01, #0
0ff3c     09 14 06 F6 | 	mov	arg02, #9
0ff40     00 16 06 F6 | 	mov	arg03, #0
0ff44     C4 65 B0 FD | 	call	#__system___basic_print_char
0ff48     FD 2E 02 F6 | 	mov	local09, result1
0ff4c     FD 26 02 F1 | 	add	local05, result1
0ff50     00 12 06 F6 | 	mov	arg01, #0
0ff54     C8 AE B0 FD | 	call	#__system___getiolock_0370
0ff58     FD 00 68 FC | 	wrlong	#0, result1
0ff5c     00 FA 05 F6 | 	mov	result1, #0
0ff60     00 30 06 F6 | 	mov	local10, #0
0ff64                 | LR__1334
0ff64                 | '   if t1.result_type=result_string then print t1.result.sresult,
0ff64     1F 22 0E F2 | 	cmp	local03, #31 wz
0ff68     60 00 90 5D |  if_ne	jmp	#LR__1335
0ff6c     00 12 06 F6 | 	mov	arg01, #0
0ff70     AC AE B0 FD | 	call	#__system___getiolock_0370
0ff74     FD 12 02 F6 | 	mov	arg01, result1
0ff78     F4 58 B0 FD | 	call	#__system___lockmem
0ff7c     00 28 06 F6 | 	mov	local06, #0
0ff80     00 12 06 F6 | 	mov	arg01, #0
0ff84     0F 15 02 F6 | 	mov	arg02, local01
0ff88     00 16 06 F6 | 	mov	arg03, #0
0ff8c     D4 65 B0 FD | 	call	#__system___basic_print_string
0ff90     FD 2A 02 F6 | 	mov	local07, result1
0ff94     14 27 02 F6 | 	mov	local05, local06
0ff98     15 27 02 F1 | 	add	local05, local07
0ff9c     00 2C 06 F6 | 	mov	local08, #0
0ffa0     00 12 06 F6 | 	mov	arg01, #0
0ffa4     09 14 06 F6 | 	mov	arg02, #9
0ffa8     00 16 06 F6 | 	mov	arg03, #0
0ffac     5C 65 B0 FD | 	call	#__system___basic_print_char
0ffb0     FD 2E 02 F6 | 	mov	local09, result1
0ffb4     FD 26 02 F1 | 	add	local05, result1
0ffb8     00 12 06 F6 | 	mov	arg01, #0
0ffbc     60 AE B0 FD | 	call	#__system___getiolock_0370
0ffc0     FD 00 68 FC | 	wrlong	#0, result1
0ffc4     00 FA 05 F6 | 	mov	result1, #0
0ffc8     00 30 06 F6 | 	mov	local10, #0
0ffcc                 | LR__1335
0ffcc                 | LR__1336
0ffcc                 | ' if r=print_mod_semicolon then 
0ffcc     22 24 0E F2 | 	cmp	local04, #34 wz
0ffd0     1C 01 90 5D |  if_ne	jmp	#LR__1341
0ffd4                 | '   if t1.result_type=result_int then print t1.result.iresult;
0ffd4     1C 22 0E F2 | 	cmp	local03, #28 wz
0ffd8     50 00 90 5D |  if_ne	jmp	#LR__1337
0ffdc     00 12 06 F6 | 	mov	arg01, #0
0ffe0     3C AE B0 FD | 	call	#__system___getiolock_0370
0ffe4     FD 12 02 F6 | 	mov	arg01, result1
0ffe8     84 58 B0 FD | 	call	#__system___lockmem
0ffec     00 28 06 F6 | 	mov	local06, #0
0fff0     00 30 06 F6 | 	mov	local10, #0
0fff4     0A 2C 06 F6 | 	mov	local08, #10
0fff8     00 12 06 F6 | 	mov	arg01, #0
0fffc     0F 15 02 F6 | 	mov	arg02, local01
10000     00 16 06 F6 | 	mov	arg03, #0
10004     0A 18 06 F6 | 	mov	arg04, #10
10008     9C 65 B0 FD | 	call	#__system___basic_print_integer
1000c     FD 2A 02 F6 | 	mov	local07, result1
10010     14 27 02 F6 | 	mov	local05, local06
10014     15 27 02 F1 | 	add	local05, local07
10018     00 12 06 F6 | 	mov	arg01, #0
1001c     00 AE B0 FD | 	call	#__system___getiolock_0370
10020     FD 00 68 FC | 	wrlong	#0, result1
10024     00 FA 05 F6 | 	mov	result1, #0
10028     00 2E 06 F6 | 	mov	local09, #0
1002c                 | LR__1337
1002c                 | '   if t1.result_type=result_uint then print t1.result.uresult;
1002c     1D 22 0E F2 | 	cmp	local03, #29 wz
10030     50 00 90 5D |  if_ne	jmp	#LR__1338
10034     00 12 06 F6 | 	mov	arg01, #0
10038     E4 AD B0 FD | 	call	#__system___getiolock_0370
1003c     FD 12 02 F6 | 	mov	arg01, result1
10040     2C 58 B0 FD | 	call	#__system___lockmem
10044     00 28 06 F6 | 	mov	local06, #0
10048     00 30 06 F6 | 	mov	local10, #0
1004c     0A 2C 06 F6 | 	mov	local08, #10
10050     00 12 06 F6 | 	mov	arg01, #0
10054     0F 15 02 F6 | 	mov	arg02, local01
10058     00 16 06 F6 | 	mov	arg03, #0
1005c     0A 18 06 F6 | 	mov	arg04, #10
10060     84 65 B0 FD | 	call	#__system___basic_print_unsigned
10064     FD 2A 02 F6 | 	mov	local07, result1
10068     14 27 02 F6 | 	mov	local05, local06
1006c     15 27 02 F1 | 	add	local05, local07
10070     00 12 06 F6 | 	mov	arg01, #0
10074     A8 AD B0 FD | 	call	#__system___getiolock_0370
10078     FD 00 68 FC | 	wrlong	#0, result1
1007c     00 FA 05 F6 | 	mov	result1, #0
10080     00 2E 06 F6 | 	mov	local09, #0
10084                 | LR__1338
10084                 | '   if t1.result_type=result_float then print t1.result.fresult;
10084     1E 22 0E F2 | 	cmp	local03, #30 wz
10088     30 00 90 5D |  if_ne	jmp	#LR__1339
1008c     00 12 06 F6 | 	mov	arg01, #0
10090     8C AD B0 FD | 	call	#__system___getiolock_0370
10094     FD 12 02 F6 | 	mov	arg01, result1
10098     D4 57 B0 FD | 	call	#__system___lockmem
1009c     00 12 06 F6 | 	mov	arg01, #0
100a0     0F 15 02 F6 | 	mov	arg02, local01
100a4     00 16 06 F6 | 	mov	arg03, #0
100a8     23 18 06 F6 | 	mov	arg04, #35
100ac     EC 87 B0 FD | 	call	#__system___basic_print_float
100b0     00 12 06 F6 | 	mov	arg01, #0
100b4     68 AD B0 FD | 	call	#__system___getiolock_0370
100b8     FD 00 68 FC | 	wrlong	#0, result1
100bc                 | LR__1339
100bc                 | '   if t1.result_type=result_string then print t1.result.sresult;
100bc     1F 22 0E F2 | 	cmp	local03, #31 wz
100c0     2C 00 90 5D |  if_ne	jmp	#LR__1340
100c4     00 12 06 F6 | 	mov	arg01, #0
100c8     54 AD B0 FD | 	call	#__system___getiolock_0370
100cc     FD 12 02 F6 | 	mov	arg01, result1
100d0     9C 57 B0 FD | 	call	#__system___lockmem
100d4     00 12 06 F6 | 	mov	arg01, #0
100d8     0F 15 02 F6 | 	mov	arg02, local01
100dc     00 16 06 F6 | 	mov	arg03, #0
100e0     80 64 B0 FD | 	call	#__system___basic_print_string
100e4     00 12 06 F6 | 	mov	arg01, #0
100e8     34 AD B0 FD | 	call	#__system___getiolock_0370
100ec     FD 00 68 FC | 	wrlong	#0, result1
100f0                 | LR__1340
100f0                 | LR__1341
100f0                 | ' if r=0 then 
100f0     00 24 0E F2 | 	cmp	local04, #0 wz
100f4     1C 01 90 5D |  if_ne	jmp	#LR__1346
100f8                 | '   if t1.result_type=result_int then print t1.result.iresult
100f8     1C 22 0E F2 | 	cmp	local03, #28 wz
100fc     40 00 90 5D |  if_ne	jmp	#LR__1342
10100     00 12 06 F6 | 	mov	arg01, #0
10104     18 AD B0 FD | 	call	#__system___getiolock_0370
10108     FD 12 02 F6 | 	mov	arg01, result1
1010c     60 57 B0 FD | 	call	#__system___lockmem
10110     00 12 06 F6 | 	mov	arg01, #0
10114     0F 15 02 F6 | 	mov	arg02, local01
10118     00 16 06 F6 | 	mov	arg03, #0
1011c     0A 18 06 F6 | 	mov	arg04, #10
10120     84 64 B0 FD | 	call	#__system___basic_print_integer
10124     00 12 06 F6 | 	mov	arg01, #0
10128     0A 14 06 F6 | 	mov	arg02, #10
1012c     00 16 06 F6 | 	mov	arg03, #0
10130     D8 63 B0 FD | 	call	#__system___basic_print_char
10134     00 12 06 F6 | 	mov	arg01, #0
10138     E4 AC B0 FD | 	call	#__system___getiolock_0370
1013c     FD 00 68 FC | 	wrlong	#0, result1
10140                 | LR__1342
10140                 | '   if t1.result_type=result_uint then print t1.result.uresult
10140     1D 22 0E F2 | 	cmp	local03, #29 wz
10144     40 00 90 5D |  if_ne	jmp	#LR__1343
10148     00 12 06 F6 | 	mov	arg01, #0
1014c     D0 AC B0 FD | 	call	#__system___getiolock_0370
10150     FD 12 02 F6 | 	mov	arg01, result1
10154     18 57 B0 FD | 	call	#__system___lockmem
10158     00 12 06 F6 | 	mov	arg01, #0
1015c     0F 15 02 F6 | 	mov	arg02, local01
10160     00 16 06 F6 | 	mov	arg03, #0
10164     0A 18 06 F6 | 	mov	arg04, #10
10168     7C 64 B0 FD | 	call	#__system___basic_print_unsigned
1016c     00 12 06 F6 | 	mov	arg01, #0
10170     0A 14 06 F6 | 	mov	arg02, #10
10174     00 16 06 F6 | 	mov	arg03, #0
10178     90 63 B0 FD | 	call	#__system___basic_print_char
1017c     00 12 06 F6 | 	mov	arg01, #0
10180     9C AC B0 FD | 	call	#__system___getiolock_0370
10184     FD 00 68 FC | 	wrlong	#0, result1
10188                 | LR__1343
10188                 | '   if t1.result_type=result_float then print t1.result.fresult
10188     1E 22 0E F2 | 	cmp	local03, #30 wz
1018c     40 00 90 5D |  if_ne	jmp	#LR__1344
10190     00 12 06 F6 | 	mov	arg01, #0
10194     88 AC B0 FD | 	call	#__system___getiolock_0370
10198     FD 12 02 F6 | 	mov	arg01, result1
1019c     D0 56 B0 FD | 	call	#__system___lockmem
101a0     00 12 06 F6 | 	mov	arg01, #0
101a4     0F 15 02 F6 | 	mov	arg02, local01
101a8     00 16 06 F6 | 	mov	arg03, #0
101ac     23 18 06 F6 | 	mov	arg04, #35
101b0     E8 86 B0 FD | 	call	#__system___basic_print_float
101b4     00 12 06 F6 | 	mov	arg01, #0
101b8     0A 14 06 F6 | 	mov	arg02, #10
101bc     00 16 06 F6 | 	mov	arg03, #0
101c0     48 63 B0 FD | 	call	#__system___basic_print_char
101c4     00 12 06 F6 | 	mov	arg01, #0
101c8     54 AC B0 FD | 	call	#__system___getiolock_0370
101cc     FD 00 68 FC | 	wrlong	#0, result1
101d0                 | LR__1344
101d0                 | '   if t1.result_type=result_string then print t1.result.sresult
101d0     1F 22 0E F2 | 	cmp	local03, #31 wz
101d4     3C 00 90 5D |  if_ne	jmp	#LR__1345
101d8     00 12 06 F6 | 	mov	arg01, #0
101dc     40 AC B0 FD | 	call	#__system___getiolock_0370
101e0     FD 12 02 F6 | 	mov	arg01, result1
101e4     88 56 B0 FD | 	call	#__system___lockmem
101e8     00 12 06 F6 | 	mov	arg01, #0
101ec     0F 15 02 F6 | 	mov	arg02, local01
101f0     00 16 06 F6 | 	mov	arg03, #0
101f4     6C 63 B0 FD | 	call	#__system___basic_print_string
101f8     00 12 06 F6 | 	mov	arg01, #0
101fc     0A 14 06 F6 | 	mov	arg02, #10
10200     00 16 06 F6 | 	mov	arg03, #0
10204     04 63 B0 FD | 	call	#__system___basic_print_char
10208     00 12 06 F6 | 	mov	arg01, #0
1020c     10 AC B0 FD | 	call	#__system___getiolock_0370
10210     FD 00 68 FC | 	wrlong	#0, result1
10214                 | LR__1345
10214                 | LR__1346
10214                 | ' if r=print_mod_empty then print
10214     20 24 0E F2 | 	cmp	local04, #32 wz
10218     2C 00 90 5D |  if_ne	jmp	#LR__1347
1021c     00 12 06 F6 | 	mov	arg01, #0
10220     FC AB B0 FD | 	call	#__system___getiolock_0370
10224     FD 12 02 F6 | 	mov	arg01, result1
10228     44 56 B0 FD | 	call	#__system___lockmem
1022c     00 12 06 F6 | 	mov	arg01, #0
10230     0A 14 06 F6 | 	mov	arg02, #10
10234     00 16 06 F6 | 	mov	arg03, #0
10238     D0 62 B0 FD | 	call	#__system___basic_print_char
1023c     00 12 06 F6 | 	mov	arg01, #0
10240     DC AB B0 FD | 	call	#__system___getiolock_0370
10244     FD 00 68 FC | 	wrlong	#0, result1
10248                 | LR__1347
10248                 | LR__1348
10248     A7 F0 03 F6 | 	mov	ptra, fp
1024c     B2 00 A0 FD | 	call	#popregs_
10250                 | _do_print_ret
10250     2D 00 64 FD | 	ret
10254                 | 
10254                 | ' 
10254                 | ' 
10254                 | ' sub do_paper
10254                 | _do_paper
10254     03 4A 05 F6 | 	mov	COUNT_, #3
10258     A8 00 A0 FD | 	call	#pushregs_
1025c     14 87 BF FD | 	call	#_pop
10260     FD 1E 02 F6 | 	mov	local01, result1
10264     FE 20 02 F6 | 	mov	local02, result2
10268     FF 22 02 F6 | 	mov	local03, result3
1026c                 | ' t1=pop() 
1026c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1026c     1E 22 0E F2 | 	cmp	local03, #30 wz
10270     10 00 90 5D |  if_ne	jmp	#LR__1350
10274     0F 13 02 F6 | 	mov	arg01, local01
10278     00 14 06 F6 | 	mov	arg02, #0
1027c     CC 84 B0 FD | 	call	#__system___float_tointeger
10280     FD 1E 02 F6 | 	mov	local01, result1
10284                 | LR__1350
10284                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
10284     1F 22 0E F2 | 	cmp	local03, #31 wz
10288     18 00 90 5D |  if_ne	jmp	#LR__1351
1028c     0F 13 02 F6 | 	mov	arg01, local01
10290     D8 87 B0 FD | 	call	#__system____builtin_atof
10294     FD 12 02 F6 | 	mov	arg01, result1
10298     00 14 06 F6 | 	mov	arg02, #0
1029c     AC 84 B0 FD | 	call	#__system___float_tointeger
102a0     FD 1E 02 F6 | 	mov	local01, result1
102a4                 | LR__1351
102a4     2D 00 00 FF 
102a8     FC E5 05 F1 | 	add	objptr, ##23548
102ac     F2 1E 62 FC | 	wrlong	local01, objptr
102b0     04 E4 05 F1 | 	add	objptr, #4
102b4     F2 12 02 FB | 	rdlong	arg01, objptr
102b8                 | ' 
102b8                 | ' write_color:=ff
102b8     2D 00 00 FF 
102bc     C3 E5 85 F1 | 	sub	objptr, ##23491
102c0     F2 12 62 FC | 	wrlong	arg01, objptr
102c4                 | ' write_background:=bb
102c4     04 E4 05 F1 | 	add	objptr, #4
102c8     F2 1E 62 FC | 	wrlong	local01, objptr
102cc     41 E4 85 F1 | 	sub	objptr, #65
102d0     A7 F0 03 F6 | 	mov	ptra, fp
102d4     B2 00 A0 FD | 	call	#popregs_
102d8                 | _do_paper_ret
102d8     2D 00 64 FD | 	ret
102dc                 | 
102dc                 | ' 
102dc                 | ' sub do_ink
102dc                 | _do_ink
102dc     03 4A 05 F6 | 	mov	COUNT_, #3
102e0     A8 00 A0 FD | 	call	#pushregs_
102e4     8C 86 BF FD | 	call	#_pop
102e8     FD 1E 02 F6 | 	mov	local01, result1
102ec     FE 20 02 F6 | 	mov	local02, result2
102f0     FF 22 02 F6 | 	mov	local03, result3
102f4                 | ' t1=pop() 
102f4                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
102f4     1E 22 0E F2 | 	cmp	local03, #30 wz
102f8     10 00 90 5D |  if_ne	jmp	#LR__1360
102fc     0F 13 02 F6 | 	mov	arg01, local01
10300     00 14 06 F6 | 	mov	arg02, #0
10304     44 84 B0 FD | 	call	#__system___float_tointeger
10308     FD 1E 02 F6 | 	mov	local01, result1
1030c                 | LR__1360
1030c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
1030c     1F 22 0E F2 | 	cmp	local03, #31 wz
10310     18 00 90 5D |  if_ne	jmp	#LR__1361
10314     0F 13 02 F6 | 	mov	arg01, local01
10318     50 87 B0 FD | 	call	#__system____builtin_atof
1031c     FD 12 02 F6 | 	mov	arg01, result1
10320     00 14 06 F6 | 	mov	arg02, #0
10324     24 84 B0 FD | 	call	#__system___float_tointeger
10328     FD 1E 02 F6 | 	mov	local01, result1
1032c                 | LR__1361
1032c     2E 00 00 FF 
10330     00 E4 05 F1 | 	add	objptr, ##23552
10334     F2 1E 62 FC | 	wrlong	local01, objptr
10338     04 E4 85 F1 | 	sub	objptr, #4
1033c     F2 14 02 FB | 	rdlong	arg02, objptr
10340                 | ' 
10340                 | ' write_color:=ff
10340     2D 00 00 FF 
10344     BF E5 85 F1 | 	sub	objptr, ##23487
10348     F2 1E 62 FC | 	wrlong	local01, objptr
1034c                 | ' write_background:=bb
1034c     04 E4 05 F1 | 	add	objptr, #4
10350     F2 14 62 FC | 	wrlong	arg02, objptr
10354     2D 00 00 FF 
10358     BF E5 05 F1 | 	add	objptr, ##23487
1035c     F2 12 02 FB | 	rdlong	arg01, objptr
10360     2E 00 00 FF 
10364     00 E4 85 F1 | 	sub	objptr, ##23552
10368     DC 31 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
1036c     A7 F0 03 F6 | 	mov	ptra, fp
10370     B2 00 A0 FD | 	call	#popregs_
10374                 | _do_ink_ret
10374     2D 00 64 FD | 	ret
10378                 | 
10378                 | ' 
10378                 | ' 
10378                 | ' sub do_font
10378                 | _do_font
10378     03 4A 05 F6 | 	mov	COUNT_, #3
1037c     A8 00 A0 FD | 	call	#pushregs_
10380     F0 85 BF FD | 	call	#_pop
10384     FD 1E 02 F6 | 	mov	local01, result1
10388     FE 20 02 F6 | 	mov	local02, result2
1038c     FF 22 02 F6 | 	mov	local03, result3
10390                 | ' t1=pop() 
10390                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
10390     1E 22 0E F2 | 	cmp	local03, #30 wz
10394     10 00 90 5D |  if_ne	jmp	#LR__1370
10398     0F 13 02 F6 | 	mov	arg01, local01
1039c     00 14 06 F6 | 	mov	arg02, #0
103a0     A8 83 B0 FD | 	call	#__system___float_tointeger
103a4     FD 1E 02 F6 | 	mov	local01, result1
103a8                 | LR__1370
103a8                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
103a8     1F 22 0E F2 | 	cmp	local03, #31 wz
103ac     18 00 90 5D |  if_ne	jmp	#LR__1371
103b0     0F 13 02 F6 | 	mov	arg01, local01
103b4     B4 86 B0 FD | 	call	#__system____builtin_atof
103b8     FD 12 02 F6 | 	mov	arg01, result1
103bc     00 14 06 F6 | 	mov	arg02, #0
103c0     88 83 B0 FD | 	call	#__system___float_tointeger
103c4     FD 1E 02 F6 | 	mov	local01, result1
103c8                 | LR__1371
103c8     2E 00 00 FF 
103cc     04 E4 05 F1 | 	add	objptr, ##23556
103d0     F2 1E 62 FC | 	wrlong	local01, objptr
103d4     2E 00 00 FF 
103d8     04 E4 85 F1 | 	sub	objptr, ##23556
103dc     02 1E 66 F0 | 	shl	local01, #2
103e0     0F 13 02 F6 | 	mov	arg01, local01
103e4     C0 40 B0 FD | 	call	#_hg010b_spin2_setfontfamily
103e8     A7 F0 03 F6 | 	mov	ptra, fp
103ec     B2 00 A0 FD | 	call	#popregs_
103f0                 | _do_font_ret
103f0     2D 00 64 FD | 	ret
103f4                 | 
103f4                 | ' 
103f4                 | ' sub do_mode
103f4                 | _do_mode
103f4     04 4A 05 F6 | 	mov	COUNT_, #4
103f8     A8 00 A0 FD | 	call	#pushregs_
103fc     74 85 BF FD | 	call	#_pop
10400     FD 1E 02 F6 | 	mov	local01, result1
10404     FE 20 02 F6 | 	mov	local02, result2
10408     FF 22 02 F6 | 	mov	local03, result3
1040c                 | ' t1=pop() 
1040c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1040c     1E 22 0E F2 | 	cmp	local03, #30 wz
10410     10 00 90 5D |  if_ne	jmp	#LR__1380
10414     0F 13 02 F6 | 	mov	arg01, local01
10418     00 14 06 F6 | 	mov	arg02, #0
1041c     2C 83 B0 FD | 	call	#__system___float_tointeger
10420     FD 1E 02 F6 | 	mov	local01, result1
10424                 | LR__1380
10424                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
10424     1F 22 0E F2 | 	cmp	local03, #31 wz
10428     18 00 90 5D |  if_ne	jmp	#LR__1381
1042c     0F 13 02 F6 | 	mov	arg01, local01
10430     38 86 B0 FD | 	call	#__system____builtin_atof
10434     FD 12 02 F6 | 	mov	arg01, result1
10438     00 14 06 F6 | 	mov	arg02, #0
1043c     0C 83 B0 FD | 	call	#__system___float_tointeger
10440     FD 1E 02 F6 | 	mov	local01, result1
10444                 | LR__1381
10444                 | ' select case t1.result.iresult
10444     0F 25 02 F6 | 	mov	local04, local01
10448     05 24 26 F3 | 	fle	local04, #5
1044c     30 24 62 FD | 	jmprel	local04
10450                 | LR__1382
10450     14 00 90 FD | 	jmp	#LR__1383
10454     7C 00 90 FD | 	jmp	#LR__1384
10458     E4 00 90 FD | 	jmp	#LR__1385
1045c     4C 01 90 FD | 	jmp	#LR__1386
10460     B4 01 90 FD | 	jmp	#LR__1387
10464     18 02 90 FD | 	jmp	#LR__1388
10468                 | LR__1383
10468     2E 00 00 FF 
1046c     04 E4 05 F1 | 	add	objptr, ##23556
10470     F2 02 68 FC | 	wrlong	#1, objptr
10474     04 E4 85 F1 | 	sub	objptr, #4
10478     F2 34 69 FC | 	wrlong	#154, objptr
1047c     22 00 00 FF 
10480     A4 E5 05 F1 | 	add	objptr, ##17828
10484     F2 02 68 FC | 	wrlong	#1, objptr
10488     22 00 00 FF 
1048c     A8 E5 85 F1 | 	sub	objptr, ##17832
10490     F2 26 69 FC | 	wrlong	#147, objptr
10494     2D 00 00 FF 
10498     FC E5 85 F1 | 	sub	objptr, ##23548
1049c     04 12 06 F6 | 	mov	arg01, #4
104a0     04 40 B0 FD | 	call	#_hg010b_spin2_setfontfamily
104a4     2E 00 00 FF 
104a8     00 E4 05 F1 | 	add	objptr, ##23552
104ac     F2 12 02 FB | 	rdlong	arg01, objptr
104b0     04 E4 85 F1 | 	sub	objptr, #4
104b4     F2 14 02 FB | 	rdlong	arg02, objptr
104b8                 | ' 
104b8                 | ' write_color:=ff
104b8     2D 00 00 FF 
104bc     BF E5 85 F1 | 	sub	objptr, ##23487
104c0     F2 12 62 FC | 	wrlong	arg01, objptr
104c4                 | ' write_background:=bb
104c4     04 E4 05 F1 | 	add	objptr, #4
104c8     F2 14 62 FC | 	wrlong	arg02, objptr
104cc     41 E4 85 F1 | 	sub	objptr, #65
104d0     AC 01 90 FD | 	jmp	#LR__1388
104d4                 | LR__1384
104d4     2E 00 00 FF 
104d8     04 E4 05 F1 | 	add	objptr, ##23556
104dc     F2 00 68 FC | 	wrlong	#0, objptr
104e0     04 E4 85 F1 | 	sub	objptr, #4
104e4     F2 2E 68 FC | 	wrlong	#23, objptr
104e8     22 00 00 FF 
104ec     A4 E5 05 F1 | 	add	objptr, ##17828
104f0     F2 00 68 FC | 	wrlong	#0, objptr
104f4     22 00 00 FF 
104f8     A8 E5 85 F1 | 	sub	objptr, ##17832
104fc     F2 00 68 FC | 	wrlong	#0, objptr
10500     2D 00 00 FF 
10504     FC E5 85 F1 | 	sub	objptr, ##23548
10508     00 12 06 F6 | 	mov	arg01, #0
1050c     98 3F B0 FD | 	call	#_hg010b_spin2_setfontfamily
10510     2E 00 00 FF 
10514     00 E4 05 F1 | 	add	objptr, ##23552
10518     F2 12 02 FB | 	rdlong	arg01, objptr
1051c     04 E4 85 F1 | 	sub	objptr, #4
10520     F2 14 02 FB | 	rdlong	arg02, objptr
10524                 | ' 
10524                 | ' write_color:=ff
10524     2D 00 00 FF 
10528     BF E5 85 F1 | 	sub	objptr, ##23487
1052c     F2 12 62 FC | 	wrlong	arg01, objptr
10530                 | ' write_background:=bb
10530     04 E4 05 F1 | 	add	objptr, #4
10534     F2 14 62 FC | 	wrlong	arg02, objptr
10538     41 E4 85 F1 | 	sub	objptr, #65
1053c     40 01 90 FD | 	jmp	#LR__1388
10540                 | LR__1385
10540     2E 00 00 FF 
10544     04 E4 05 F1 | 	add	objptr, ##23556
10548     F2 00 68 FC | 	wrlong	#0, objptr
1054c     04 E4 85 F1 | 	sub	objptr, #4
10550     F2 6A 69 FC | 	wrlong	#181, objptr
10554     22 00 00 FF 
10558     A4 E5 05 F1 | 	add	objptr, ##17828
1055c     F2 00 68 FC | 	wrlong	#0, objptr
10560     22 00 00 FF 
10564     A8 E5 85 F1 | 	sub	objptr, ##17832
10568     F2 00 68 FC | 	wrlong	#0, objptr
1056c     2D 00 00 FF 
10570     FC E5 85 F1 | 	sub	objptr, ##23548
10574     00 12 06 F6 | 	mov	arg01, #0
10578     2C 3F B0 FD | 	call	#_hg010b_spin2_setfontfamily
1057c     2E 00 00 FF 
10580     00 E4 05 F1 | 	add	objptr, ##23552
10584     F2 12 02 FB | 	rdlong	arg01, objptr
10588     04 E4 85 F1 | 	sub	objptr, #4
1058c     F2 14 02 FB | 	rdlong	arg02, objptr
10590                 | ' 
10590                 | ' write_color:=ff
10590     2D 00 00 FF 
10594     BF E5 85 F1 | 	sub	objptr, ##23487
10598     F2 12 62 FC | 	wrlong	arg01, objptr
1059c                 | ' write_background:=bb
1059c     04 E4 05 F1 | 	add	objptr, #4
105a0     F2 14 62 FC | 	wrlong	arg02, objptr
105a4     41 E4 85 F1 | 	sub	objptr, #65
105a8     D4 00 90 FD | 	jmp	#LR__1388
105ac                 | LR__1386
105ac     2E 00 00 FF 
105b0     04 E4 05 F1 | 	add	objptr, ##23556
105b4     F2 00 68 FC | 	wrlong	#0, objptr
105b8     04 E4 85 F1 | 	sub	objptr, #4
105bc     F2 1E 68 FC | 	wrlong	#15, objptr
105c0     22 00 00 FF 
105c4     A4 E5 05 F1 | 	add	objptr, ##17828
105c8     F2 00 68 FC | 	wrlong	#0, objptr
105cc     22 00 00 FF 
105d0     A8 E5 85 F1 | 	sub	objptr, ##17832
105d4     F2 00 68 FC | 	wrlong	#0, objptr
105d8     2D 00 00 FF 
105dc     FC E5 85 F1 | 	sub	objptr, ##23548
105e0     00 12 06 F6 | 	mov	arg01, #0
105e4     C0 3E B0 FD | 	call	#_hg010b_spin2_setfontfamily
105e8     2E 00 00 FF 
105ec     00 E4 05 F1 | 	add	objptr, ##23552
105f0     F2 12 02 FB | 	rdlong	arg01, objptr
105f4     04 E4 85 F1 | 	sub	objptr, #4
105f8     F2 14 02 FB | 	rdlong	arg02, objptr
105fc                 | ' 
105fc                 | ' write_color:=ff
105fc     2D 00 00 FF 
10600     BF E5 85 F1 | 	sub	objptr, ##23487
10604     F2 12 62 FC | 	wrlong	arg01, objptr
10608                 | ' write_background:=bb
10608     04 E4 05 F1 | 	add	objptr, #4
1060c     F2 14 62 FC | 	wrlong	arg02, objptr
10610     41 E4 85 F1 | 	sub	objptr, #65
10614     68 00 90 FD | 	jmp	#LR__1388
10618                 | LR__1387
10618     2E 00 00 FF 
1061c     04 E4 05 F1 | 	add	objptr, ##23556
10620     F2 02 68 FC | 	wrlong	#1, objptr
10624     04 E4 85 F1 | 	sub	objptr, #4
10628     F2 00 68 FC | 	wrlong	#0, objptr
1062c     22 00 00 FF 
10630     A4 E5 05 F1 | 	add	objptr, ##17828
10634     F2 02 68 FC | 	wrlong	#1, objptr
10638     22 00 00 FF 
1063c     A8 E5 85 F1 | 	sub	objptr, ##17832
10640     F2 1E 68 FC | 	wrlong	#15, objptr
10644     2D 00 00 FF 
10648     FC E5 85 F1 | 	sub	objptr, ##23548
1064c     04 12 06 F6 | 	mov	arg01, #4
10650     54 3E B0 FD | 	call	#_hg010b_spin2_setfontfamily
10654     2E 00 00 FF 
10658     00 E4 05 F1 | 	add	objptr, ##23552
1065c     F2 12 02 FB | 	rdlong	arg01, objptr
10660     04 E4 85 F1 | 	sub	objptr, #4
10664     F2 14 02 FB | 	rdlong	arg02, objptr
10668                 | ' 
10668                 | ' write_color:=ff
10668     2D 00 00 FF 
1066c     BF E5 85 F1 | 	sub	objptr, ##23487
10670     F2 12 62 FC | 	wrlong	arg01, objptr
10674                 | ' write_background:=bb
10674     04 E4 05 F1 | 	add	objptr, #4
10678     F2 14 62 FC | 	wrlong	arg02, objptr
1067c     41 E4 85 F1 | 	sub	objptr, #65
10680                 | LR__1388
10680     2E 00 00 FF 
10684     00 E4 05 F1 | 	add	objptr, ##23552
10688     F2 12 02 FB | 	rdlong	arg01, objptr
1068c     04 E4 85 F1 | 	sub	objptr, #4
10690     F2 14 02 FB | 	rdlong	arg02, objptr
10694     2D 00 00 FF 
10698     FC E5 85 F1 | 	sub	objptr, ##23548
1069c     F0 3E B0 FD | 	call	#_hg010b_spin2_cls
106a0     27 01 00 FF 
106a4     AC 12 06 F6 | 	mov	arg01, ##@LR__4342
106a8                 | ' 
106a8                 | ' write(text)
106a8     A0 41 B0 FD | 	call	#_hg010b_spin2_write
106ac                 | ' crlf
106ac     FC 42 B0 FD | 	call	#_hg010b_spin2_crlf
106b0     09 00 00 FF 
106b4     E8 EB 05 F1 | 	add	ptr__dat__, ##5096
106b8     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
106bc     09 00 00 FF 
106c0     E8 EB 85 F1 | 	sub	ptr__dat__, ##5096
106c4                 | ' 
106c4                 | ' write(text)
106c4     84 41 B0 FD | 	call	#_hg010b_spin2_write
106c8                 | ' crlf
106c8     E0 42 B0 FD | 	call	#_hg010b_spin2_crlf
106cc     50 00 00 FF 
106d0     A0 E5 05 F1 | 	add	objptr, ##41376
106d4     F2 12 02 FB | 	rdlong	arg01, objptr
106d8     50 00 00 FF 
106dc     A0 E5 85 F1 | 	sub	objptr, ##41376
106e0                 | ' 
106e0                 | ' write(text)
106e0     68 41 B0 FD | 	call	#_hg010b_spin2_write
106e4                 | ' crlf
106e4     C4 42 B0 FD | 	call	#_hg010b_spin2_crlf
106e8     A7 F0 03 F6 | 	mov	ptra, fp
106ec     B2 00 A0 FD | 	call	#popregs_
106f0                 | _do_mode_ret
106f0     2D 00 64 FD | 	ret
106f4                 | 
106f4                 | ' 
106f4                 | ' 
106f4                 | ' 
106f4                 | ' sub do_pinwrite
106f4                 | _do_pinwrite
106f4     01 4A 05 F6 | 	mov	COUNT_, #1
106f8     A8 00 A0 FD | 	call	#pushregs_
106fc     18 F0 07 F1 | 	add	ptra, #24
10700     70 82 BF FD | 	call	#_pop
10704     FD 14 02 F6 | 	mov	arg02, result1
10708     FE 12 02 F6 | 	mov	arg01, result2
1070c     FF 1E 02 F6 | 	mov	local01, result3
10710     A7 14 62 FC | 	wrlong	arg02, fp
10714     04 4E 05 F1 | 	add	fp, #4
10718     A7 12 62 FC | 	wrlong	arg01, fp
1071c     04 4E 05 F1 | 	add	fp, #4
10720     A7 1E 62 FC | 	wrlong	local01, fp
10724     08 4E 85 F1 | 	sub	fp, #8
10728     48 82 BF FD | 	call	#_pop
1072c     FF 1E 02 F6 | 	mov	local01, result3
10730     0C 4E 05 F1 | 	add	fp, #12
10734     A7 FA 61 FC | 	wrlong	result1, fp
10738     04 4E 05 F1 | 	add	fp, #4
1073c     A7 FC 61 FC | 	wrlong	result2, fp
10740     04 4E 05 F1 | 	add	fp, #4
10744     A7 1E 62 FC | 	wrlong	local01, fp
10748     08 4E 85 F1 | 	sub	fp, #8
1074c     A7 12 02 F6 | 	mov	arg01, fp
10750     0C 4E 85 F1 | 	sub	fp, #12
10754     AC DA BF FD | 	call	#_converttoint
10758     FD 1E 02 F6 | 	mov	local01, result1
1075c     A7 12 02 F6 | 	mov	arg01, fp
10760     A0 DA BF FD | 	call	#_converttoint
10764     FD 14 02 F6 | 	mov	arg02, result1
10768     0F 13 02 F6 | 	mov	arg01, local01
1076c     B4 52 B0 FD | 	call	#__system___pinwrite
10770     A7 F0 03 F6 | 	mov	ptra, fp
10774     B2 00 A0 FD | 	call	#popregs_
10778                 | _do_pinwrite_ret
10778     2D 00 64 FD | 	ret
1077c                 | 
1077c                 | ' 
1077c                 | ' sub do_pinfloat
1077c                 | _do_pinfloat
1077c     00 4A 05 F6 | 	mov	COUNT_, #0
10780     A8 00 A0 FD | 	call	#pushregs_
10784     0C F0 07 F1 | 	add	ptra, #12
10788     E8 81 BF FD | 	call	#_pop
1078c     A7 FA 61 FC | 	wrlong	result1, fp
10790     04 4E 05 F1 | 	add	fp, #4
10794     A7 FC 61 FC | 	wrlong	result2, fp
10798     04 4E 05 F1 | 	add	fp, #4
1079c     A7 FE 61 FC | 	wrlong	result3, fp
107a0     08 4E 85 F1 | 	sub	fp, #8
107a4     A7 12 02 F6 | 	mov	arg01, fp
107a8     58 DA BF FD | 	call	#_converttoint
107ac     50 FA 61 FD | 	fltl	result1
107b0     A7 F0 03 F6 | 	mov	ptra, fp
107b4     B2 00 A0 FD | 	call	#popregs_
107b8                 | _do_pinfloat_ret
107b8     2D 00 64 FD | 	ret
107bc                 | 
107bc                 | ' 
107bc                 | ' sub do_pinlo
107bc                 | _do_pinlo
107bc     00 4A 05 F6 | 	mov	COUNT_, #0
107c0     A8 00 A0 FD | 	call	#pushregs_
107c4     0C F0 07 F1 | 	add	ptra, #12
107c8     A8 81 BF FD | 	call	#_pop
107cc     A7 FA 61 FC | 	wrlong	result1, fp
107d0     04 4E 05 F1 | 	add	fp, #4
107d4     A7 FC 61 FC | 	wrlong	result2, fp
107d8     04 4E 05 F1 | 	add	fp, #4
107dc     A7 FE 61 FC | 	wrlong	result3, fp
107e0     08 4E 85 F1 | 	sub	fp, #8
107e4     A7 12 02 F6 | 	mov	arg01, fp
107e8     18 DA BF FD | 	call	#_converttoint
107ec     58 FA 61 FD | 	drvl	result1
107f0     A7 F0 03 F6 | 	mov	ptra, fp
107f4     B2 00 A0 FD | 	call	#popregs_
107f8                 | _do_pinlo_ret
107f8     2D 00 64 FD | 	ret
107fc                 | 
107fc                 | ' 
107fc                 | ' sub do_pinhi
107fc                 | _do_pinhi
107fc     00 4A 05 F6 | 	mov	COUNT_, #0
10800     A8 00 A0 FD | 	call	#pushregs_
10804     0C F0 07 F1 | 	add	ptra, #12
10808     68 81 BF FD | 	call	#_pop
1080c     A7 FA 61 FC | 	wrlong	result1, fp
10810     04 4E 05 F1 | 	add	fp, #4
10814     A7 FC 61 FC | 	wrlong	result2, fp
10818     04 4E 05 F1 | 	add	fp, #4
1081c     A7 FE 61 FC | 	wrlong	result3, fp
10820     08 4E 85 F1 | 	sub	fp, #8
10824     A7 12 02 F6 | 	mov	arg01, fp
10828     D8 D9 BF FD | 	call	#_converttoint
1082c     59 FA 61 FD | 	drvh	result1
10830     A7 F0 03 F6 | 	mov	ptra, fp
10834     B2 00 A0 FD | 	call	#popregs_
10838                 | _do_pinhi_ret
10838     2D 00 64 FD | 	ret
1083c                 | 
1083c                 | ' 
1083c                 | ' sub do_pintoggle
1083c                 | _do_pintoggle
1083c     00 4A 05 F6 | 	mov	COUNT_, #0
10840     A8 00 A0 FD | 	call	#pushregs_
10844     0C F0 07 F1 | 	add	ptra, #12
10848     28 81 BF FD | 	call	#_pop
1084c     A7 FA 61 FC | 	wrlong	result1, fp
10850     04 4E 05 F1 | 	add	fp, #4
10854     A7 FC 61 FC | 	wrlong	result2, fp
10858     04 4E 05 F1 | 	add	fp, #4
1085c     A7 FE 61 FC | 	wrlong	result3, fp
10860     08 4E 85 F1 | 	sub	fp, #8
10864     A7 12 02 F6 | 	mov	arg01, fp
10868     98 D9 BF FD | 	call	#_converttoint
1086c     5F FA 61 FD | 	drvnot	result1
10870     A7 F0 03 F6 | 	mov	ptra, fp
10874     B2 00 A0 FD | 	call	#popregs_
10878                 | _do_pintoggle_ret
10878     2D 00 64 FD | 	ret
1087c                 | 
1087c                 | ' 
1087c                 | ' 
1087c                 | ' sub do_pinstart
1087c                 | _do_pinstart
1087c     03 4A 05 F6 | 	mov	COUNT_, #3
10880     A8 00 A0 FD | 	call	#pushregs_
10884     30 F0 07 F1 | 	add	ptra, #48
10888     E8 80 BF FD | 	call	#_pop
1088c     FD 16 02 F6 | 	mov	arg03, result1
10890     FE 14 02 F6 | 	mov	arg02, result2
10894     FF 18 02 F6 | 	mov	arg04, result3
10898     A7 16 62 FC | 	wrlong	arg03, fp
1089c     04 4E 05 F1 | 	add	fp, #4
108a0     A7 14 62 FC | 	wrlong	arg02, fp
108a4     04 4E 05 F1 | 	add	fp, #4
108a8     A7 18 62 FC | 	wrlong	arg04, fp
108ac     08 4E 85 F1 | 	sub	fp, #8
108b0     C0 80 BF FD | 	call	#_pop
108b4     FD 16 02 F6 | 	mov	arg03, result1
108b8     FE 14 02 F6 | 	mov	arg02, result2
108bc     FF 18 02 F6 | 	mov	arg04, result3
108c0     0C 4E 05 F1 | 	add	fp, #12
108c4     A7 16 62 FC | 	wrlong	arg03, fp
108c8     04 4E 05 F1 | 	add	fp, #4
108cc     A7 14 62 FC | 	wrlong	arg02, fp
108d0     04 4E 05 F1 | 	add	fp, #4
108d4     A7 18 62 FC | 	wrlong	arg04, fp
108d8     14 4E 85 F1 | 	sub	fp, #20
108dc     94 80 BF FD | 	call	#_pop
108e0     FD 16 02 F6 | 	mov	arg03, result1
108e4     FE 14 02 F6 | 	mov	arg02, result2
108e8     FF 18 02 F6 | 	mov	arg04, result3
108ec     18 4E 05 F1 | 	add	fp, #24
108f0     A7 16 62 FC | 	wrlong	arg03, fp
108f4     04 4E 05 F1 | 	add	fp, #4
108f8     A7 14 62 FC | 	wrlong	arg02, fp
108fc     04 4E 05 F1 | 	add	fp, #4
10900     A7 18 62 FC | 	wrlong	arg04, fp
10904     20 4E 85 F1 | 	sub	fp, #32
10908     68 80 BF FD | 	call	#_pop
1090c     FF 16 02 F6 | 	mov	arg03, result3
10910     24 4E 05 F1 | 	add	fp, #36
10914     A7 FA 61 FC | 	wrlong	result1, fp
10918     04 4E 05 F1 | 	add	fp, #4
1091c     A7 FC 61 FC | 	wrlong	result2, fp
10920     04 4E 05 F1 | 	add	fp, #4
10924     A7 16 62 FC | 	wrlong	arg03, fp
10928     08 4E 85 F1 | 	sub	fp, #8
1092c     A7 12 02 F6 | 	mov	arg01, fp
10930     24 4E 85 F1 | 	sub	fp, #36
10934     CC D8 BF FD | 	call	#_converttoint
10938     FD 1E 02 F6 | 	mov	local01, result1
1093c     18 4E 05 F1 | 	add	fp, #24
10940     A7 12 02 F6 | 	mov	arg01, fp
10944     18 4E 85 F1 | 	sub	fp, #24
10948     B8 D8 BF FD | 	call	#_converttoint
1094c     FD 20 02 F6 | 	mov	local02, result1
10950     0C 4E 05 F1 | 	add	fp, #12
10954     A7 12 02 F6 | 	mov	arg01, fp
10958     0C 4E 85 F1 | 	sub	fp, #12
1095c     A4 D8 BF FD | 	call	#_converttoint
10960     FD 22 02 F6 | 	mov	local03, result1
10964     A7 12 02 F6 | 	mov	arg01, fp
10968     98 D8 BF FD | 	call	#_converttoint
1096c     40 1E 62 FD | 	dirl	local01
10970     0F 21 02 FC | 	wrpin	local02, local01
10974     0F 23 12 FC | 	wxpin	local03, local01
10978     0F FB 21 FC | 	wypin	result1, local01
1097c     41 1E 62 FD | 	dirh	local01
10980     A7 F0 03 F6 | 	mov	ptra, fp
10984     B2 00 A0 FD | 	call	#popregs_
10988                 | _do_pinstart_ret
10988     2D 00 64 FD | 	ret
1098c                 | 
1098c                 | ' 
1098c                 | ' 
1098c                 | ' sub do_wrpin
1098c                 | _do_wrpin
1098c     01 4A 05 F6 | 	mov	COUNT_, #1
10990     A8 00 A0 FD | 	call	#pushregs_
10994     18 F0 07 F1 | 	add	ptra, #24
10998     D8 7F BF FD | 	call	#_pop
1099c     FD 14 02 F6 | 	mov	arg02, result1
109a0     FE 12 02 F6 | 	mov	arg01, result2
109a4     FF 1E 02 F6 | 	mov	local01, result3
109a8     A7 14 62 FC | 	wrlong	arg02, fp
109ac     04 4E 05 F1 | 	add	fp, #4
109b0     A7 12 62 FC | 	wrlong	arg01, fp
109b4     04 4E 05 F1 | 	add	fp, #4
109b8     A7 1E 62 FC | 	wrlong	local01, fp
109bc     08 4E 85 F1 | 	sub	fp, #8
109c0     B0 7F BF FD | 	call	#_pop
109c4     FF 1E 02 F6 | 	mov	local01, result3
109c8     0C 4E 05 F1 | 	add	fp, #12
109cc     A7 FA 61 FC | 	wrlong	result1, fp
109d0     04 4E 05 F1 | 	add	fp, #4
109d4     A7 FC 61 FC | 	wrlong	result2, fp
109d8     04 4E 05 F1 | 	add	fp, #4
109dc     A7 1E 62 FC | 	wrlong	local01, fp
109e0     08 4E 85 F1 | 	sub	fp, #8
109e4     A7 12 02 F6 | 	mov	arg01, fp
109e8     0C 4E 85 F1 | 	sub	fp, #12
109ec     14 D8 BF FD | 	call	#_converttoint
109f0     FD 1E 02 F6 | 	mov	local01, result1
109f4     A7 12 02 F6 | 	mov	arg01, fp
109f8     08 D8 BF FD | 	call	#_converttoint
109fc     0F FB 01 FC | 	wrpin	result1, local01
10a00     A7 F0 03 F6 | 	mov	ptra, fp
10a04     B2 00 A0 FD | 	call	#popregs_
10a08                 | _do_wrpin_ret
10a08     2D 00 64 FD | 	ret
10a0c                 | 
10a0c                 | ' 
10a0c                 | ' sub do_wxpin
10a0c                 | _do_wxpin
10a0c     01 4A 05 F6 | 	mov	COUNT_, #1
10a10     A8 00 A0 FD | 	call	#pushregs_
10a14     18 F0 07 F1 | 	add	ptra, #24
10a18     58 7F BF FD | 	call	#_pop
10a1c     FD 14 02 F6 | 	mov	arg02, result1
10a20     FE 12 02 F6 | 	mov	arg01, result2
10a24     FF 1E 02 F6 | 	mov	local01, result3
10a28     A7 14 62 FC | 	wrlong	arg02, fp
10a2c     04 4E 05 F1 | 	add	fp, #4
10a30     A7 12 62 FC | 	wrlong	arg01, fp
10a34     04 4E 05 F1 | 	add	fp, #4
10a38     A7 1E 62 FC | 	wrlong	local01, fp
10a3c     08 4E 85 F1 | 	sub	fp, #8
10a40     30 7F BF FD | 	call	#_pop
10a44     FF 1E 02 F6 | 	mov	local01, result3
10a48     0C 4E 05 F1 | 	add	fp, #12
10a4c     A7 FA 61 FC | 	wrlong	result1, fp
10a50     04 4E 05 F1 | 	add	fp, #4
10a54     A7 FC 61 FC | 	wrlong	result2, fp
10a58     04 4E 05 F1 | 	add	fp, #4
10a5c     A7 1E 62 FC | 	wrlong	local01, fp
10a60     08 4E 85 F1 | 	sub	fp, #8
10a64     A7 12 02 F6 | 	mov	arg01, fp
10a68     0C 4E 85 F1 | 	sub	fp, #12
10a6c     94 D7 BF FD | 	call	#_converttoint
10a70     FD 1E 02 F6 | 	mov	local01, result1
10a74     A7 12 02 F6 | 	mov	arg01, fp
10a78     88 D7 BF FD | 	call	#_converttoint
10a7c     0F FB 11 FC | 	wxpin	result1, local01
10a80     A7 F0 03 F6 | 	mov	ptra, fp
10a84     B2 00 A0 FD | 	call	#popregs_
10a88                 | _do_wxpin_ret
10a88     2D 00 64 FD | 	ret
10a8c                 | 
10a8c                 | ' 
10a8c                 | ' sub do_wypin
10a8c                 | _do_wypin
10a8c     01 4A 05 F6 | 	mov	COUNT_, #1
10a90     A8 00 A0 FD | 	call	#pushregs_
10a94     18 F0 07 F1 | 	add	ptra, #24
10a98     D8 7E BF FD | 	call	#_pop
10a9c     FD 14 02 F6 | 	mov	arg02, result1
10aa0     FE 12 02 F6 | 	mov	arg01, result2
10aa4     FF 1E 02 F6 | 	mov	local01, result3
10aa8     A7 14 62 FC | 	wrlong	arg02, fp
10aac     04 4E 05 F1 | 	add	fp, #4
10ab0     A7 12 62 FC | 	wrlong	arg01, fp
10ab4     04 4E 05 F1 | 	add	fp, #4
10ab8     A7 1E 62 FC | 	wrlong	local01, fp
10abc     08 4E 85 F1 | 	sub	fp, #8
10ac0     B0 7E BF FD | 	call	#_pop
10ac4     FF 1E 02 F6 | 	mov	local01, result3
10ac8     0C 4E 05 F1 | 	add	fp, #12
10acc     A7 FA 61 FC | 	wrlong	result1, fp
10ad0     04 4E 05 F1 | 	add	fp, #4
10ad4     A7 FC 61 FC | 	wrlong	result2, fp
10ad8     04 4E 05 F1 | 	add	fp, #4
10adc     A7 1E 62 FC | 	wrlong	local01, fp
10ae0     08 4E 85 F1 | 	sub	fp, #8
10ae4     A7 12 02 F6 | 	mov	arg01, fp
10ae8     0C 4E 85 F1 | 	sub	fp, #12
10aec     14 D7 BF FD | 	call	#_converttoint
10af0     FD 1E 02 F6 | 	mov	local01, result1
10af4     A7 12 02 F6 | 	mov	arg01, fp
10af8     08 D7 BF FD | 	call	#_converttoint
10afc     0F FB 21 FC | 	wypin	result1, local01
10b00     A7 F0 03 F6 | 	mov	ptra, fp
10b04     B2 00 A0 FD | 	call	#popregs_
10b08                 | _do_wypin_ret
10b08     2D 00 64 FD | 	ret
10b0c                 | 
10b0c                 | ' 
10b0c                 | ' sub do_waitms
10b0c                 | _do_waitms
10b0c     01 4A 05 F6 | 	mov	COUNT_, #1
10b10     A8 00 A0 FD | 	call	#pushregs_
10b14     18 F0 07 F1 | 	add	ptra, #24
10b18     58 7E BF FD | 	call	#_pop
10b1c     A7 FA 61 FC | 	wrlong	result1, fp
10b20     04 4E 05 F1 | 	add	fp, #4
10b24     A7 FC 61 FC | 	wrlong	result2, fp
10b28     04 4E 05 F1 | 	add	fp, #4
10b2c     A7 FE 61 FC | 	wrlong	result3, fp
10b30                 | ' 
10b30                 | ' t1=pop() 'value
10b30                 | ' 
10b30                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
10b30     08 4E 85 F1 | 	sub	fp, #8
10b34     1C FE 0D F2 | 	cmp	result3, #28 wz
10b38     08 4E 05 51 |  if_ne	add	fp, #8
10b3c     A7 12 02 5B |  if_ne	rdlong	arg01, fp
10b40     08 4E 85 51 |  if_ne	sub	fp, #8
10b44     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
10b48     A7 12 02 AB |  if_e	rdlong	arg01, fp
10b4c     0C 4E 05 A1 |  if_e	add	fp, #12
10b50     A7 12 62 AC |  if_e	wrlong	arg01, fp
10b54     0C 4E 85 A1 |  if_e	sub	fp, #12
10b58     14 00 90 AD |  if_e	jmp	#LR__1390
10b5c     A7 12 02 F6 | 	mov	arg01, fp
10b60     A0 D6 BF FD | 	call	#_converttoint
10b64     0C 4E 05 F1 | 	add	fp, #12
10b68     A7 FA 61 FC | 	wrlong	result1, fp
10b6c     0C 4E 85 F1 | 	sub	fp, #12
10b70                 | LR__1390
10b70                 | ' if t<0 then return
10b70     0C 4E 05 F1 | 	add	fp, #12
10b74     A7 12 02 FB | 	rdlong	arg01, fp
10b78     0C 4E 85 F1 | 	sub	fp, #12
10b7c     00 12 56 F2 | 	cmps	arg01, #0 wc
10b80     B8 00 90 CD |  if_b	jmp	#LR__1395
10b84                 | ' if t < 5000 then 
10b84     0C 4E 05 F1 | 	add	fp, #12
10b88     A7 12 02 FB | 	rdlong	arg01, fp
10b8c     0C 4E 85 F1 | 	sub	fp, #12
10b90     09 00 00 FF 
10b94     88 13 56 F2 | 	cmps	arg01, ##5000 wc
10b98     14 00 90 3D |  if_ae	jmp	#LR__1391
10b9c     0C 4E 05 F1 | 	add	fp, #12
10ba0     A7 12 02 FB | 	rdlong	arg01, fp
10ba4     0C 4E 85 F1 | 	sub	fp, #12
10ba8     B8 4F B0 FD | 	call	#__system___waitms
10bac     8C 00 90 FD | 	jmp	#LR__1394
10bb0                 | LR__1391
10bb0     10 4E 05 F1 | 	add	fp, #16
10bb4     A7 02 68 FC | 	wrlong	#1, fp
10bb8     04 4E 85 F1 | 	sub	fp, #4
10bbc     A7 12 02 FB | 	rdlong	arg01, fp
10bc0     09 13 52 F6 | 	abs	arg01, arg01 wc
10bc4     09 00 00 FF 
10bc8     88 13 16 FD | 	qdiv	arg01, ##5000
10bcc                 | '   for i=1 to t/5000
10bcc     0C 4E 85 F1 | 	sub	fp, #12
10bd0     18 1E 62 FD | 	getqx	local01
10bd4     0F 1F 82 F6 | 	negc	local01, local01
10bd8     01 1E 06 F1 | 	add	local01, #1
10bdc                 | LR__1392
10bdc     10 4E 05 F1 | 	add	fp, #16
10be0     A7 12 02 FB | 	rdlong	arg01, fp
10be4     10 4E 85 F1 | 	sub	fp, #16
10be8     0F 13 52 F2 | 	cmps	arg01, local01 wc
10bec     28 00 90 3D |  if_ae	jmp	#LR__1393
10bf0     0C 4E 05 F1 | 	add	fp, #12
10bf4     A7 12 02 FB | 	rdlong	arg01, fp
10bf8     0C 4E 85 F1 | 	sub	fp, #12
10bfc     64 4F B0 FD | 	call	#__system___waitms
10c00     10 4E 05 F1 | 	add	fp, #16
10c04     A7 12 02 FB | 	rdlong	arg01, fp
10c08     01 12 06 F1 | 	add	arg01, #1
10c0c     A7 12 62 FC | 	wrlong	arg01, fp
10c10     10 4E 85 F1 | 	sub	fp, #16
10c14     C4 FF 9F FD | 	jmp	#LR__1392
10c18                 | LR__1393
10c18     0C 4E 05 F1 | 	add	fp, #12
10c1c     A7 1E 02 FB | 	rdlong	local01, fp
10c20     0F 1F 52 F6 | 	abs	local01, local01 wc
10c24     09 00 00 FF 
10c28     88 1F 16 FD | 	qdiv	local01, ##5000
10c2c     0C 4E 85 F1 | 	sub	fp, #12
10c30     19 1E 62 FD | 	getqy	local01
10c34     0F 13 82 F6 | 	negc	arg01, local01
10c38     28 4F B0 FD | 	call	#__system___waitms
10c3c                 | LR__1394
10c3c                 | LR__1395
10c3c     A7 F0 03 F6 | 	mov	ptra, fp
10c40     B2 00 A0 FD | 	call	#popregs_
10c44                 | _do_waitms_ret
10c44     2D 00 64 FD | 	ret
10c48                 | 
10c48                 | ' 
10c48                 | ' sub do_waitvbl
10c48                 | _do_waitvbl
10c48     01 12 06 F6 | 	mov	arg01, #1
10c4c     D0 38 B0 FD | 	call	#_hg010b_spin2_waitvbl
10c50                 | _do_waitvbl_ret
10c50     2D 00 64 FD | 	ret
10c54                 | 
10c54                 | ' 
10c54                 | ' sub do_waitclock
10c54                 | _do_waitclock
10c54     52 00 00 FF 
10c58     38 E4 05 F1 | 	add	objptr, ##42040
10c5c     F2 00 02 FB | 	rdlong	_var01, objptr
10c60                 | ' c=hkcnt
10c60                 | ' do: loop until hkcnt<>c
10c60                 | LR__1400
10c60     F2 02 02 FB | 	rdlong	_var02, objptr
10c64     00 03 0A F2 | 	cmp	_var02, _var01 wz
10c68     F4 FF 9F AD |  if_e	jmp	#LR__1400
10c6c     52 00 00 FF 
10c70     38 E4 85 F1 | 	sub	objptr, ##42040
10c74                 | _do_waitclock_ret
10c74     2D 00 64 FD | 	ret
10c78                 | 
10c78                 | ' 
10c78                 | ' sub do_dir
10c78                 | _do_dir
10c78     03 4A 05 F6 | 	mov	COUNT_, #3
10c7c     A8 00 A0 FD | 	call	#pushregs_
10c80     27 01 00 FF 
10c84     AD 12 06 F6 | 	mov	arg01, ##@LR__4343
10c88     70 52 B0 FD | 	call	#__system___chdir
10c8c                 | ' chdir("/sd/bas")       ' set working directory
10c8c                 | ' print "Working directory: "; currentdir$ 
10c8c     00 12 06 F6 | 	mov	arg01, #0
10c90     8C A1 B0 FD | 	call	#__system___getiolock_0370
10c94     FD 12 02 F6 | 	mov	arg01, result1
10c98     D4 4B B0 FD | 	call	#__system___lockmem
10c9c     27 01 00 FF 
10ca0     B5 14 06 F6 | 	mov	arg02, ##@LR__4344
10ca4     00 12 06 F6 | 	mov	arg01, #0
10ca8     00 16 06 F6 | 	mov	arg03, #0
10cac     B4 58 B0 FD | 	call	#__system___basic_print_string
10cb0     49 00 00 FF 
10cb4     58 E4 05 F1 | 	add	objptr, ##37464
10cb8     F2 14 02 FB | 	rdlong	arg02, objptr
10cbc     49 00 00 FF 
10cc0     58 E4 85 F1 | 	sub	objptr, ##37464
10cc4     00 12 06 F6 | 	mov	arg01, #0
10cc8     00 16 06 F6 | 	mov	arg03, #0
10ccc     94 58 B0 FD | 	call	#__system___basic_print_string
10cd0     00 12 06 F6 | 	mov	arg01, #0
10cd4     0A 14 06 F6 | 	mov	arg02, #10
10cd8     00 16 06 F6 | 	mov	arg03, #0
10cdc     2C 58 B0 FD | 	call	#__system___basic_print_char
10ce0     00 12 06 F6 | 	mov	arg01, #0
10ce4     38 A1 B0 FD | 	call	#__system___getiolock_0370
10ce8     FD 00 68 FC | 	wrlong	#0, result1
10cec     27 01 00 FF 
10cf0     C9 12 06 F6 | 	mov	arg01, ##@LR__4345
10cf4     10 14 06 F6 | 	mov	arg02, #16
10cf8     5C A2 B0 FD | 	call	#__system___basic_dir
10cfc     FD 1E 02 F6 | 	mov	local01, result1
10d00                 | ' 
10d00                 | ' filename=dir$("*", fbDirectory)
10d00                 | ' while filename <> "" and filename <> nil
10d00                 | LR__1410
10d00     00 20 06 F6 | 	mov	local02, #0
10d04     27 01 00 FF 
10d08     CB 14 06 F6 | 	mov	arg02, ##@LR__4346
10d0c     0F 13 02 F6 | 	mov	arg01, local01
10d10     84 4B B0 FD | 	call	#__system___string_cmp
10d14     00 FA 0D F2 | 	cmp	result1, #0 wz
10d18     00 20 26 56 |  if_ne	not	local02, #0
10d1c     00 22 06 F6 | 	mov	local03, #0
10d20     0F 13 02 F6 | 	mov	arg01, local01
10d24     00 14 06 F6 | 	mov	arg02, #0
10d28     6C 4B B0 FD | 	call	#__system___string_cmp
10d2c     00 FA 0D F2 | 	cmp	result1, #0 wz
10d30     00 22 26 56 |  if_ne	not	local03, #0
10d34     11 21 CA F7 | 	test	local02, local03 wz
10d38     64 00 90 AD |  if_e	jmp	#LR__1411
10d3c                 | '   print "[dir] ";filename
10d3c     00 12 06 F6 | 	mov	arg01, #0
10d40     DC A0 B0 FD | 	call	#__system___getiolock_0370
10d44     FD 12 02 F6 | 	mov	arg01, result1
10d48     24 4B B0 FD | 	call	#__system___lockmem
10d4c     27 01 00 FF 
10d50     CC 14 06 F6 | 	mov	arg02, ##@LR__4347
10d54     00 12 06 F6 | 	mov	arg01, #0
10d58     00 16 06 F6 | 	mov	arg03, #0
10d5c     04 58 B0 FD | 	call	#__system___basic_print_string
10d60     00 12 06 F6 | 	mov	arg01, #0
10d64     0F 15 02 F6 | 	mov	arg02, local01
10d68     00 16 06 F6 | 	mov	arg03, #0
10d6c     F4 57 B0 FD | 	call	#__system___basic_print_string
10d70     00 12 06 F6 | 	mov	arg01, #0
10d74     0A 14 06 F6 | 	mov	arg02, #10
10d78     00 16 06 F6 | 	mov	arg03, #0
10d7c     8C 57 B0 FD | 	call	#__system___basic_print_char
10d80     00 12 06 F6 | 	mov	arg01, #0
10d84     98 A0 B0 FD | 	call	#__system___getiolock_0370
10d88     FD 00 68 FC | 	wrlong	#0, result1
10d8c     00 12 06 F6 | 	mov	arg01, #0
10d90     00 14 06 F6 | 	mov	arg02, #0
10d94     C0 A1 B0 FD | 	call	#__system___basic_dir
10d98     FD 1E 02 F6 | 	mov	local01, result1
10d9c     60 FF 9F FD | 	jmp	#LR__1410
10da0                 | LR__1411
10da0     27 01 00 FF 
10da4     D3 12 06 F6 | 	mov	arg01, ##@LR__4348
10da8     21 14 06 F6 | 	mov	arg02, #33
10dac     A8 A1 B0 FD | 	call	#__system___basic_dir
10db0     FD 1E 02 F6 | 	mov	local01, result1
10db4                 | ' 
10db4                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
10db4                 | ' do while filename <> "" and filename <> nil
10db4                 | LR__1412
10db4     00 20 06 F6 | 	mov	local02, #0
10db8     27 01 00 FF 
10dbc     D5 14 06 F6 | 	mov	arg02, ##@LR__4349
10dc0     0F 13 02 F6 | 	mov	arg01, local01
10dc4     D0 4A B0 FD | 	call	#__system___string_cmp
10dc8     00 FA 0D F2 | 	cmp	result1, #0 wz
10dcc     00 20 26 56 |  if_ne	not	local02, #0
10dd0     00 22 06 F6 | 	mov	local03, #0
10dd4     0F 13 02 F6 | 	mov	arg01, local01
10dd8     00 14 06 F6 | 	mov	arg02, #0
10ddc     B8 4A B0 FD | 	call	#__system___string_cmp
10de0     00 FA 0D F2 | 	cmp	result1, #0 wz
10de4     00 22 26 56 |  if_ne	not	local03, #0
10de8     11 21 CA F7 | 	test	local02, local03 wz
10dec     54 01 90 AD |  if_e	jmp	#LR__1416
10df0                 | '   print filename
10df0     00 12 06 F6 | 	mov	arg01, #0
10df4     28 A0 B0 FD | 	call	#__system___getiolock_0370
10df8     FD 12 02 F6 | 	mov	arg01, result1
10dfc     70 4A B0 FD | 	call	#__system___lockmem
10e00     00 12 06 F6 | 	mov	arg01, #0
10e04     0F 15 02 F6 | 	mov	arg02, local01
10e08     00 16 06 F6 | 	mov	arg03, #0
10e0c     54 57 B0 FD | 	call	#__system___basic_print_string
10e10     00 12 06 F6 | 	mov	arg01, #0
10e14     0A 14 06 F6 | 	mov	arg02, #10
10e18     00 16 06 F6 | 	mov	arg03, #0
10e1c     EC 56 B0 FD | 	call	#__system___basic_print_char
10e20     00 12 06 F6 | 	mov	arg01, #0
10e24     F8 9F B0 FD | 	call	#__system___getiolock_0370
10e28     FD 00 68 FC | 	wrlong	#0, result1
10e2c     00 12 06 F6 | 	mov	arg01, #0
10e30     00 14 06 F6 | 	mov	arg02, #0
10e34     20 A1 B0 FD | 	call	#__system___basic_dir
10e38     FD 1E 02 F6 | 	mov	local01, result1
10e3c                 | '   filename = dir$()      ' continue scan
10e3c                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
10e3c                 | ' return cursor_y
10e3c     3A E4 05 F1 | 	add	objptr, #58
10e40     F2 FA C1 FA | 	rdbyte	result1, objptr
10e44     3A E4 85 F1 | 	sub	objptr, #58
10e48     22 FA 0D F2 | 	cmp	result1, #34 wz
10e4c     64 FF 9F 5D |  if_ne	jmp	#LR__1412
10e50                 | '     print "-----more, press any key";
10e50     00 12 06 F6 | 	mov	arg01, #0
10e54     C8 9F B0 FD | 	call	#__system___getiolock_0370
10e58     FD 12 02 F6 | 	mov	arg01, result1
10e5c     10 4A B0 FD | 	call	#__system___lockmem
10e60     27 01 00 FF 
10e64     D6 14 06 F6 | 	mov	arg02, ##@LR__4350
10e68     00 12 06 F6 | 	mov	arg01, #0
10e6c     00 16 06 F6 | 	mov	arg03, #0
10e70     F0 56 B0 FD | 	call	#__system___basic_print_string
10e74     00 12 06 F6 | 	mov	arg01, #0
10e78     A4 9F B0 FD | 	call	#__system___getiolock_0370
10e7c     FD 00 68 FC | 	wrlong	#0, result1
10e80                 | '     do 
10e80                 | LR__1413
10e80     90 42 B0 FD | 	call	#_usbnew_spin2_get_key
10e84     00 FA 0D F2 | 	cmp	result1, #0 wz
10e88     F4 FF 9F 5D |  if_ne	jmp	#LR__1413
10e8c                 | '     do
10e8c                 | LR__1414
10e8c     84 42 B0 FD | 	call	#_usbnew_spin2_get_key
10e90     00 FA 0D F2 | 	cmp	result1, #0 wz
10e94     F4 FF 9F AD |  if_e	jmp	#LR__1414
10e98                 | '       if keyclick=1 then paula.play(7,@atari_spl,44100,16384,1684) 
10e98     50 00 00 FF 
10e9c     A4 E5 05 F1 | 	add	objptr, ##41380
10ea0     F2 20 02 FB | 	rdlong	local02, objptr
10ea4     50 00 00 FF 
10ea8     A4 E5 85 F1 | 	sub	objptr, ##41380
10eac     01 20 0E F2 | 	cmp	local02, #1 wz
10eb0     44 00 90 5D |  if_ne	jmp	#LR__1415
10eb4     01 00 00 FF 
10eb8     00 EA 05 F1 | 	add	ptr__dat__, ##512
10ebc     F5 14 02 F6 | 	mov	arg02, ptr__dat__
10ec0     01 00 00 FF 
10ec4     00 EA 85 F1 | 	sub	ptr__dat__, ##512
10ec8     07 12 06 F6 | 	mov	arg01, #7
10ecc     56 00 00 FF 
10ed0     44 16 06 F6 | 	mov	arg03, ##44100
10ed4     0E 18 C6 F9 | 	decod	arg04, #14
10ed8     03 00 00 FF 
10edc     94 1A 06 F6 | 	mov	arg05, ##1684
10ee0     01 1C 66 F6 | 	neg	arg06, #1
10ee4     0B 00 00 FF 
10ee8     C0 E4 05 F1 | 	add	objptr, ##5824
10eec     4C 45 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
10ef0     0B 00 00 FF 
10ef4     C0 E4 85 F1 | 	sub	objptr, ##5824
10ef8                 | LR__1415
10ef8     00 12 06 F6 | 	mov	arg01, #0
10efc     23 14 06 F6 | 	mov	arg02, #35
10f00     E4 35 B0 FD | 	call	#_hg010b_spin2_setcursorpos
10f04                 | '     position 0,35: print "                             ";: position 4,35  
10f04     00 12 06 F6 | 	mov	arg01, #0
10f08     14 9F B0 FD | 	call	#__system___getiolock_0370
10f0c     FD 12 02 F6 | 	mov	arg01, result1
10f10     5C 49 B0 FD | 	call	#__system___lockmem
10f14     27 01 00 FF 
10f18     EF 14 06 F6 | 	mov	arg02, ##@LR__4351
10f1c     00 12 06 F6 | 	mov	arg01, #0
10f20     00 16 06 F6 | 	mov	arg03, #0
10f24     3C 56 B0 FD | 	call	#__system___basic_print_string
10f28     00 12 06 F6 | 	mov	arg01, #0
10f2c     F0 9E B0 FD | 	call	#__system___getiolock_0370
10f30     FD 00 68 FC | 	wrlong	#0, result1
10f34     04 12 06 F6 | 	mov	arg01, #4
10f38     23 14 06 F6 | 	mov	arg02, #35
10f3c     A8 35 B0 FD | 	call	#_hg010b_spin2_setcursorpos
10f40     70 FE 9F FD | 	jmp	#LR__1412
10f44                 | LR__1416
10f44     A7 F0 03 F6 | 	mov	ptra, fp
10f48     B2 00 A0 FD | 	call	#popregs_
10f4c                 | _do_dir_ret
10f4c     2D 00 64 FD | 	ret
10f50                 | 
10f50                 | ' 
10f50                 | ' sub do_if
10f50                 | _do_if
10f50     05 4A 05 F6 | 	mov	COUNT_, #5
10f54     A8 00 A0 FD | 	call	#pushregs_
10f58     18 7A BF FD | 	call	#_pop
10f5c     FD 1E 0A F6 | 	mov	local01, result1 wz
10f60     FE 20 02 F6 | 	mov	local02, result2
10f64     FF 22 02 F6 | 	mov	local03, result3
10f68                 | ' t1=pop()
10f68                 | ' ' if uresult=0, jump over else
10f68                 | ' if t1.result.uresult = 0 then 
10f68     BC 00 90 5D |  if_ne	jmp	#LR__1422
10f6c                 | '   for i=lineptr_e to lineptr-1
10f6c     41 00 00 FF 
10f70     44 E4 05 F1 | 	add	objptr, ##33348
10f74     F2 24 02 FB | 	rdlong	local04, objptr
10f78     04 E4 85 F1 | 	sub	objptr, #4
10f7c     F2 26 02 FB | 	rdlong	local05, objptr
10f80     41 00 00 FF 
10f84     40 E4 85 F1 | 	sub	objptr, ##33344
10f88                 | LR__1420
10f88     13 25 52 F2 | 	cmps	local04, local05 wc
10f8c     78 00 90 3D |  if_ae	jmp	#LR__1421
10f90     12 FF 01 F6 | 	mov	result3, local04
10f94     01 FE 65 F0 | 	shl	result3, #1
10f98     12 FF 01 F1 | 	add	result3, local04
10f9c     02 FE 65 F0 | 	shl	result3, #2
10fa0     3E 00 00 FF 
10fa4     40 E4 05 F1 | 	add	objptr, ##31808
10fa8     F2 FE 01 F1 | 	add	result3, objptr
10fac     FF 1E 02 FB | 	rdlong	local01, result3
10fb0     04 FE 05 F1 | 	add	result3, #4
10fb4     FF FC 01 FB | 	rdlong	result2, result3
10fb8     12 FF 01 F6 | 	mov	result3, local04
10fbc     01 FE 65 F0 | 	shl	result3, #1
10fc0     12 FF 01 F1 | 	add	result3, local04
10fc4     02 FE 65 F0 | 	shl	result3, #2
10fc8     F2 FE 01 F1 | 	add	result3, objptr
10fcc     08 FE 05 F1 | 	add	result3, #8
10fd0     FF FE 01 FB | 	rdlong	result3, result3
10fd4     FE 20 02 F6 | 	mov	local02, result2
10fd8     FF 22 02 F6 | 	mov	local03, result3
10fdc                 | '     t1=compiledline(i)
10fdc                 | '     if t1.result_type=token_else then lineptr_e=i : return
10fdc     5A 22 0E F2 | 	cmp	local03, #90 wz
10fe0     3E 00 00 FF 
10fe4     40 E4 85 F1 | 	sub	objptr, ##31808
10fe8     41 00 00 AF 
10fec     44 E4 05 A1 |  if_e	add	objptr, ##33348
10ff0     F2 24 62 AC |  if_e	wrlong	local04, objptr
10ff4     41 00 00 AF 
10ff8     44 E4 85 A1 |  if_e	sub	objptr, ##33348
10ffc     28 00 90 AD |  if_e	jmp	#LR__1423
11000     01 24 06 F1 | 	add	local04, #1
11004     80 FF 9F FD | 	jmp	#LR__1420
11008                 | LR__1421
11008     41 00 00 FF 
1100c     40 E4 05 F1 | 	add	objptr, ##33344
11010     F2 26 02 FB | 	rdlong	local05, objptr
11014     01 26 86 F1 | 	sub	local05, #1
11018     04 E4 05 F1 | 	add	objptr, #4
1101c     F2 26 62 FC | 	wrlong	local05, objptr
11020     41 00 00 FF 
11024     44 E4 85 F1 | 	sub	objptr, ##33348
11028                 | LR__1422
11028                 | LR__1423
11028     A7 F0 03 F6 | 	mov	ptra, fp
1102c     B2 00 A0 FD | 	call	#popregs_
11030                 | _do_if_ret
11030     2D 00 64 FD | 	ret
11034                 | 
11034                 | ' 
11034                 | ' sub do_else
11034                 | _do_else
11034     41 00 00 FF 
11038     40 E4 05 F1 | 	add	objptr, ##33344
1103c     F2 00 02 FB | 	rdlong	_var01, objptr
11040     01 00 86 F1 | 	sub	_var01, #1
11044     04 E4 05 F1 | 	add	objptr, #4
11048     F2 00 62 FC | 	wrlong	_var01, objptr
1104c     41 00 00 FF 
11050     44 E4 85 F1 | 	sub	objptr, ##33348
11054                 | _do_else_ret
11054     2D 00 64 FD | 	ret
11058                 | 
11058                 | ' 
11058                 | ' 
11058                 | ' 
11058                 | ' sub do_nothing
11058                 | _do_nothing
11058                 | _do_nothing_ret
11058     2D 00 64 FD | 	ret
1105c                 | 
1105c                 | ' 
1105c                 | ' sub do_brun
1105c                 | _do_brun
1105c     08 4A 05 F6 | 	mov	COUNT_, #8
11060     A8 00 A0 FD | 	call	#pushregs_
11064     0C 79 BF FD | 	call	#_pop
11068     FE 1A 02 F6 | 	mov	arg05, result2
1106c     FF 18 02 F6 | 	mov	arg04, result3
11070     FD 1E 02 F6 | 	mov	local01, result1
11074     0D 21 02 F6 | 	mov	local02, arg05
11078     0C 23 02 F6 | 	mov	local03, arg04
1107c                 | ' 
1107c                 | ' t1=pop() 
1107c                 | ' if t1.result_type=result_string2 then t1.result.sresult=do_convertstring(t1.result.uresult): t1.result_type=result_string
1107c     2B 22 0E F2 | 	cmp	local03, #43 wz
11080     10 00 90 5D |  if_ne	jmp	#LR__1430
11084     0F 13 02 F6 | 	mov	arg01, local01
11088     DC 95 BF FD | 	call	#_do_convertstring
1108c     FD 1E 02 F6 | 	mov	local01, result1
11090     1F 22 06 F6 | 	mov	local03, #31
11094                 | LR__1430
11094                 | ' if t1.result_type=result_string then
11094     1F 22 0E F2 | 	cmp	local03, #31 wz
11098     EC 01 90 5D |  if_ne	jmp	#LR__1434
1109c     0F 25 02 F6 | 	mov	local04, local01
110a0                 | '   filename=t1.result.sresult
110a0                 | '   if left$(filename,1)="/" then 
110a0     12 13 02 F6 | 	mov	arg01, local04
110a4     01 14 06 F6 | 	mov	arg02, #1
110a8     D4 67 B0 FD | 	call	#__system__Left_S
110ac     FD 12 02 F6 | 	mov	arg01, result1
110b0     27 01 00 FF 
110b4     0D 15 06 F6 | 	mov	arg02, ##@LR__4352
110b8     DC 47 B0 FD | 	call	#__system___string_cmp
110bc     00 FA 0D F2 | 	cmp	result1, #0 wz
110c0     12 27 02 A6 |  if_e	mov	local05, local04
110c4     14 00 90 AD |  if_e	jmp	#LR__1431
110c8     27 01 00 FF 
110cc     0F 13 06 F6 | 	mov	arg01, ##@LR__4353
110d0     12 15 02 F6 | 	mov	arg02, local04
110d4     F4 47 B0 FD | 	call	#__system___string_concat
110d8     FD 26 02 F6 | 	mov	local05, result1
110dc                 | LR__1431
110dc                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
110dc                 | '   open fullfilename for input as #9
110dc     09 12 06 F6 | 	mov	arg01, #9
110e0     13 15 02 F6 | 	mov	arg02, local05
110e4     00 16 06 F6 | 	mov	arg03, #0
110e8     88 53 B0 FD | 	call	#__system___basic_open_string
110ec     20 E8 05 F1 | 	add	ptr___system__dat__, #32
110f0     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
110f4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
110f8     FD 28 0A F6 | 	mov	local06, result1 wz
110fc                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
110fc     8C 00 90 AD |  if_e	jmp	#LR__1432
11100     00 12 06 F6 | 	mov	arg01, #0
11104     18 9D B0 FD | 	call	#__system___getiolock_0370
11108     FD 12 02 F6 | 	mov	arg01, result1
1110c     60 47 B0 FD | 	call	#__system___lockmem
11110     27 01 00 FF 
11114     18 15 06 F6 | 	mov	arg02, ##@LR__4354
11118     00 12 06 F6 | 	mov	arg01, #0
1111c     00 16 06 F6 | 	mov	arg03, #0
11120     40 54 B0 FD | 	call	#__system___basic_print_string
11124     00 12 06 F6 | 	mov	arg01, #0
11128     14 15 02 F6 | 	mov	arg02, local06
1112c     00 16 06 F6 | 	mov	arg03, #0
11130     0A 18 06 F6 | 	mov	arg04, #10
11134     70 54 B0 FD | 	call	#__system___basic_print_integer
11138     27 01 00 FF 
1113c     26 15 06 F6 | 	mov	arg02, ##@LR__4355
11140     00 12 06 F6 | 	mov	arg01, #0
11144     00 16 06 F6 | 	mov	arg03, #0
11148     18 54 B0 FD | 	call	#__system___basic_print_string
1114c     14 13 02 F6 | 	mov	arg01, local06
11150     1C 6D B0 FD | 	call	#__system___strerror
11154     FD 14 02 F6 | 	mov	arg02, result1
11158     00 12 06 F6 | 	mov	arg01, #0
1115c     00 16 06 F6 | 	mov	arg03, #0
11160     00 54 B0 FD | 	call	#__system___basic_print_string
11164     00 12 06 F6 | 	mov	arg01, #0
11168     0A 14 06 F6 | 	mov	arg02, #10
1116c     00 16 06 F6 | 	mov	arg03, #0
11170     98 53 B0 FD | 	call	#__system___basic_print_char
11174     00 12 06 F6 | 	mov	arg01, #0
11178     A4 9C B0 FD | 	call	#__system___getiolock_0370
1117c     FD 00 68 FC | 	wrlong	#0, result1
11180     09 12 06 F6 | 	mov	arg01, #9
11184     C8 92 B0 FD | 	call	#__system__close
11188     FC 00 90 FD | 	jmp	#LR__1435
1118c                 | LR__1432
1118c     01 2A 06 F6 | 	mov	local07, #1
11190     00 2C 06 F6 | 	mov	local08, #0
11194                 | '   do
11194                 | LR__1433
11194                 | '     get #9,pos,block(0),1024,r : pos+=r	
11194     4E 00 00 FF 
11198     70 E5 05 F1 | 	add	objptr, ##40304
1119c     F2 16 02 F6 | 	mov	arg03, objptr
111a0     4E 00 00 FF 
111a4     70 E5 85 F1 | 	sub	objptr, ##40304
111a8     09 12 06 F6 | 	mov	arg01, #9
111ac     15 15 02 F6 | 	mov	arg02, local07
111b0     0A 18 C6 F9 | 	decod	arg04, #10
111b4     01 1A 06 F6 | 	mov	arg05, #1
111b8     B8 54 B0 FD | 	call	#__system___basic_get
111bc     FD 28 02 F6 | 	mov	local06, result1
111c0     FD 2A 02 F1 | 	add	local07, result1
111c4     4E 00 00 FF 
111c8     70 E5 05 F1 | 	add	objptr, ##40304
111cc     F2 12 02 F6 | 	mov	arg01, objptr
111d0     16 15 02 F6 | 	mov	arg02, local08
111d4     0A 16 C6 F9 | 	decod	arg03, #10
111d8     43 00 00 FF 
111dc     B0 E4 85 F1 | 	sub	objptr, ##34480
111e0     3C 3C B0 FD | 	call	#_psram_spin2_write
111e4     0B 00 00 FF 
111e8     C0 E4 85 F1 | 	sub	objptr, ##5824
111ec     14 2D 02 F1 | 	add	local08, local06
111f0     02 00 00 FF 
111f4     00 28 0E F2 | 	cmp	local06, ##1024 wz
111f8     E0 03 00 AF 
111fc     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
11200     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1433
11204     2D 00 00 FF 
11208     C0 E5 05 F1 | 	add	objptr, ##23488
1120c     F2 12 02 FB | 	rdlong	arg01, objptr
11210     03 12 62 FD | 	cogstop	arg01
11214     04 E4 05 F1 | 	add	objptr, #4
11218     F2 12 02 FB | 	rdlong	arg01, objptr
1121c     03 12 62 FD | 	cogstop	arg01
11220     04 E4 05 F1 | 	add	objptr, #4
11224     F2 12 02 FB | 	rdlong	arg01, objptr
11228     03 12 62 FD | 	cogstop	arg01
1122c     22 00 00 FF 
11230     E0 E5 05 F1 | 	add	objptr, ##17888
11234     F2 12 02 FB | 	rdlong	arg01, objptr
11238     03 12 62 FD | 	cogstop	arg01
1123c     09 00 00 FF 
11240     74 EB 05 F1 | 	add	ptr__dat__, ##4980
11244     F5 14 02 F6 | 	mov	arg02, ptr__dat__
11248     09 00 00 FF 
1124c     74 EB 85 F1 | 	sub	ptr__dat__, ##4980
11250     22 00 00 FF 
11254     D8 E5 85 F1 | 	sub	objptr, ##17880
11258     1E 2C 06 F6 | 	mov	local08, #30
1125c     28 E4 61 FD | 	setq	objptr
11260     0A 2D F2 FC | 	coginit	local08, arg02 wc
11264     01 2C 66 C6 |  if_b	neg	local08, #1
11268     24 00 00 FF 
1126c     DC E4 05 F1 | 	add	objptr, ##18652
11270     F2 2C 62 FC | 	wrlong	local08, objptr
11274     52 00 00 FF 
11278     AC E4 85 F1 | 	sub	objptr, ##42156
1127c     00 12 06 F6 | 	mov	arg01, #0
11280     01 12 62 FD | 	cogid	arg01
11284     03 12 62 FD | 	cogstop	arg01
11288                 | LR__1434
11288                 | LR__1435
11288     A7 F0 03 F6 | 	mov	ptra, fp
1128c     B2 00 A0 FD | 	call	#popregs_
11290                 | _do_brun_ret
11290     2D 00 64 FD | 	ret
11294                 | 
11294                 | ' 
11294                 | ' 
11294                 | ' sub do_mouse
11294                 | _do_mouse
11294     DC 76 BF FD | 	call	#_pop
11298     00 FA 4D F2 | 	cmps	result1, #0 wz
1129c                 | ' 
1129c                 | ' t1=pop()
1129c                 | ' 
1129c                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
1129c     14 00 90 5D |  if_ne	jmp	#LR__1440
112a0     10 12 06 F6 | 	mov	arg01, #16
112a4     00 14 06 F6 | 	mov	arg02, #0
112a8     00 16 06 F6 | 	mov	arg03, #0
112ac     28 26 B0 FD | 	call	#_hg010b_spin2_setspritesize
112b0     10 00 90 FD | 	jmp	#LR__1441
112b4                 | LR__1440
112b4     10 12 06 F6 | 	mov	arg01, #16
112b8     20 14 06 F6 | 	mov	arg02, #32
112bc     20 16 06 F6 | 	mov	arg03, #32
112c0     14 26 B0 FD | 	call	#_hg010b_spin2_setspritesize
112c4                 | LR__1441
112c4                 | _do_mouse_ret
112c4     2D 00 64 FD | 	ret
112c8                 | 
112c8                 | ' 
112c8                 | ' sub do_cursor
112c8                 | _do_cursor
112c8     A8 76 BF FD | 	call	#_pop
112cc     00 FA 4D F2 | 	cmps	result1, #0 wz
112d0                 | ' 
112d0                 | ' t1=pop()
112d0                 | ' 
112d0                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
112d0     14 00 90 5D |  if_ne	jmp	#LR__1450
112d4     11 12 06 F6 | 	mov	arg01, #17
112d8     00 14 06 F6 | 	mov	arg02, #0
112dc     00 16 06 F6 | 	mov	arg03, #0
112e0     F4 25 B0 FD | 	call	#_hg010b_spin2_setspritesize
112e4     10 00 90 FD | 	jmp	#LR__1451
112e8                 | LR__1450
112e8     11 12 06 F6 | 	mov	arg01, #17
112ec     08 14 06 F6 | 	mov	arg02, #8
112f0     10 16 06 F6 | 	mov	arg03, #16
112f4     E0 25 B0 FD | 	call	#_hg010b_spin2_setspritesize
112f8                 | LR__1451
112f8                 | _do_cursor_ret
112f8     2D 00 64 FD | 	ret
112fc                 | 
112fc                 | ' 
112fc                 | ' 
112fc                 | ' sub do_click
112fc                 | _do_click
112fc     74 76 BF FD | 	call	#_pop
11300     00 FA 4D F2 | 	cmps	result1, #0 wz
11304                 | ' 
11304                 | ' t1=pop()
11304                 | ' 
11304                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
11304     50 00 00 AF 
11308     A4 E5 05 A1 |  if_e	add	objptr, ##41380
1130c     F2 00 68 AC |  if_e	wrlong	#0, objptr
11310     50 00 00 FF 
11314     A4 E5 C5 F3 | 	sumz	objptr, ##41380
11318     F2 02 68 5C |  if_ne	wrlong	#1, objptr
1131c     50 00 00 5F 
11320     A4 E5 85 51 |  if_ne	sub	objptr, ##41380
11324                 | _do_click_ret
11324     2D 00 64 FD | 	ret
11328                 | 
11328                 | ' 
11328                 | ' 
11328                 | ' sub do_beep
11328                 | _do_beep
11328     02 4A 05 F6 | 	mov	COUNT_, #2
1132c     A8 00 A0 FD | 	call	#pushregs_
11330     20 F0 07 F1 | 	add	ptra, #32
11334     3C 76 BF FD | 	call	#_pop
11338     FD 1E 02 F6 | 	mov	local01, result1
1133c     FE 1C 02 F6 | 	mov	arg06, result2
11340     FF 20 02 F6 | 	mov	local02, result3
11344     0C 4E 05 F1 | 	add	fp, #12
11348     A7 1E 62 FC | 	wrlong	local01, fp
1134c     04 4E 05 F1 | 	add	fp, #4
11350     A7 1C 62 FC | 	wrlong	arg06, fp
11354     04 4E 05 F1 | 	add	fp, #4
11358     A7 20 62 FC | 	wrlong	local02, fp
1135c     14 4E 85 F1 | 	sub	fp, #20
11360     10 76 BF FD | 	call	#_pop
11364     A7 FA 61 FC | 	wrlong	result1, fp
11368     04 4E 05 F1 | 	add	fp, #4
1136c     A7 FC 61 FC | 	wrlong	result2, fp
11370     04 4E 05 F1 | 	add	fp, #4
11374     A7 FE 61 FC | 	wrlong	result3, fp
11378                 | ' 
11378                 | ' 
11378                 | ' 
11378                 | ' t2=pop()
11378                 | ' t1=pop()
11378                 | ' 
11378                 | ' 
11378                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
11378     08 4E 85 F1 | 	sub	fp, #8
1137c     1C FE 0D F2 | 	cmp	result3, #28 wz
11380     08 4E 05 51 |  if_ne	add	fp, #8
11384     A7 20 02 5B |  if_ne	rdlong	local02, fp
11388     08 4E 85 51 |  if_ne	sub	fp, #8
1138c     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
11390     A7 1E 02 AB |  if_e	rdlong	local01, fp
11394     18 4E 05 A1 |  if_e	add	fp, #24
11398     A7 1E 62 AC |  if_e	wrlong	local01, fp
1139c     18 4E 85 A1 |  if_e	sub	fp, #24
113a0     14 00 90 AD |  if_e	jmp	#LR__1460
113a4     A7 12 02 F6 | 	mov	arg01, fp
113a8     58 CE BF FD | 	call	#_converttoint
113ac     18 4E 05 F1 | 	add	fp, #24
113b0     A7 FA 61 FC | 	wrlong	result1, fp
113b4     18 4E 85 F1 | 	sub	fp, #24
113b8                 | LR__1460
113b8     1C 4E 05 F1 | 	add	fp, #28
113bc     A7 FE 48 FC | 	wrbyte	#127, fp
113c0     01 4E 05 F1 | 	add	fp, #1
113c4     A7 00 49 FC | 	wrbyte	#128, fp
113c8     01 4E 85 F1 | 	sub	fp, #1
113cc     A7 14 02 F6 | 	mov	arg02, fp
113d0     04 4E 85 F1 | 	sub	fp, #4
113d4     A7 16 02 FB | 	rdlong	arg03, fp
113d8     18 4E 85 F1 | 	sub	fp, #24
113dc     01 16 66 F0 | 	shl	arg03, #1
113e0     07 12 06 F6 | 	mov	arg01, #7
113e4     0E 18 C6 F9 | 	decod	arg04, #14
113e8     02 1A 06 F6 | 	mov	arg05, #2
113ec     00 1C 06 F6 | 	mov	arg06, #0
113f0     0B 00 00 FF 
113f4     C0 E4 05 F1 | 	add	objptr, ##5824
113f8     DC 40 B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
113fc     0B 00 00 FF 
11400     C0 E4 85 F1 | 	sub	objptr, ##5824
11404     0C 4E 05 F1 | 	add	fp, #12
11408     A7 12 02 F6 | 	mov	arg01, fp
1140c     0C 4E 85 F1 | 	sub	fp, #12
11410     F8 75 BF FD | 	call	#_push
11414     F4 F6 BF FD | 	call	#_do_waitms
11418     07 12 06 F6 | 	mov	arg01, #7
1141c     0B 00 00 FF 
11420     C0 E4 05 F1 | 	add	objptr, ##5824
11424     64 41 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
11428     0B 00 00 FF 
1142c     C0 E4 85 F1 | 	sub	objptr, ##5824
11430     A7 F0 03 F6 | 	mov	ptra, fp
11434     B2 00 A0 FD | 	call	#popregs_
11438                 | _do_beep_ret
11438     2D 00 64 FD | 	ret
1143c                 | 
1143c                 | ' 
1143c                 | ' sub do_no_command
1143c                 | _do_no_command
1143c     17 12 06 F6 | 	mov	arg01, #23
11440     30 0F B0 FD | 	call	#_printerror
11444                 | _do_no_command_ret
11444     2D 00 64 FD | 	ret
11448                 | 
11448                 | ' 
11448                 | ' sub do_negative
11448                 | _do_negative
11448     02 4A 05 F6 | 	mov	COUNT_, #2
1144c     A8 00 A0 FD | 	call	#pushregs_
11450     0C F0 07 F1 | 	add	ptra, #12
11454     1C 75 BF FD | 	call	#_pop
11458     FF 1E 02 F6 | 	mov	local01, result3
1145c     A7 FA 61 FC | 	wrlong	result1, fp
11460     04 4E 05 F1 | 	add	fp, #4
11464     A7 FC 61 FC | 	wrlong	result2, fp
11468     04 4E 05 F1 | 	add	fp, #4
1146c     A7 1E 62 FC | 	wrlong	local01, fp
11470                 | ' t1=pop()
11470                 | ' if t1.result_type=result_int then 
11470     08 4E 85 F1 | 	sub	fp, #8
11474     1C 1E 0E F2 | 	cmp	local01, #28 wz
11478     A7 20 02 AB |  if_e	rdlong	local02, fp
1147c     10 1F 62 A6 |  if_e	neg	local01, local02
11480     A7 1E 62 AC |  if_e	wrlong	local01, fp
11484     5C 00 90 AD |  if_e	jmp	#LR__1472
11488     08 4E 05 F1 | 	add	fp, #8
1148c     A7 1E 02 FB | 	rdlong	local01, fp
11490     08 4E 85 F1 | 	sub	fp, #8
11494     1D 1E 0E F2 | 	cmp	local01, #29 wz
11498     1C 00 90 5D |  if_ne	jmp	#LR__1470
1149c     A7 20 02 FB | 	rdlong	local02, fp
114a0     10 1F 62 F6 | 	neg	local01, local02
114a4     A7 1E 62 FC | 	wrlong	local01, fp
114a8     08 4E 05 F1 | 	add	fp, #8
114ac     A7 38 68 FC | 	wrlong	#28, fp
114b0     08 4E 85 F1 | 	sub	fp, #8
114b4     2C 00 90 FD | 	jmp	#LR__1471
114b8                 | LR__1470
114b8     08 4E 05 F1 | 	add	fp, #8
114bc     A7 1E 02 FB | 	rdlong	local01, fp
114c0     08 4E 85 F1 | 	sub	fp, #8
114c4     1E 1E 0E F2 | 	cmp	local01, #30 wz
114c8     A7 FA 01 AB |  if_e	rdlong	result1, fp
114cc     1F FA E5 A4 |  if_e	bitnot	result1, #31
114d0     A7 FA 61 AC |  if_e	wrlong	result1, fp
114d4     08 4E 05 51 |  if_ne	add	fp, #8
114d8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
114dc     08 4E 85 51 |  if_ne	sub	fp, #8
114e0     A7 50 68 5C |  if_ne	wrlong	#40, fp
114e4                 | LR__1471
114e4                 | LR__1472
114e4     A7 12 02 F6 | 	mov	arg01, fp
114e8     20 75 BF FD | 	call	#_push
114ec     A7 F0 03 F6 | 	mov	ptra, fp
114f0     B2 00 A0 FD | 	call	#popregs_
114f4                 | _do_negative_ret
114f4     2D 00 64 FD | 	ret
114f8                 | 
114f8                 | ' 
114f8                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
114f8                 | ' 
114f8                 | ' ''----------------------------------------------------------------------------------------------------
114f8                 | ' ''------------------ Initialization procedures -------------------------------------------------------
114f8                 | ' ''----------------------------------------------------------------------------------------------------
114f8                 | ' 
114f8                 | ' ''--------------------------- Command function pointers
114f8                 | ' 
114f8                 | ' sub init_commands
114f8                 | _init_commands
114f8                 | ' 
114f8                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
114f8     00 00 06 F6 | 	mov	_var01, #0
114fc     97 16 48 FB | 	callpa	#(@LR__1481-@LR__1480)>>2,fcache_load_ptr_
11500                 | LR__1480
11500     00 FB 01 F6 | 	mov	result1, _var01
11504     02 FA 65 F0 | 	shl	result1, #2
11508     3A 00 00 FF 
1150c     24 E4 05 F1 | 	add	objptr, ##29732
11510     F2 FA 01 F1 | 	add	result1, objptr
11514     3A 00 00 FF 
11518     24 E4 85 F1 | 	sub	objptr, ##29732
1151c     FD E4 61 FC | 	wrlong	objptr, result1
11520     01 00 06 F1 | 	add	_var01, #1
11524     00 01 56 F2 | 	cmps	_var01, #256 wc
11528     D4 FF 9F CD |  if_b	jmp	#LR__1480
1152c                 | LR__1481
1152c     F2 FA 01 F6 | 	mov	result1, objptr
11530     14 FA 25 F4 | 	bith	result1, #20
11534     3A 00 00 FF 
11538     28 E4 05 F1 | 	add	objptr, ##29736
1153c     F2 FA 61 FC | 	wrlong	result1, objptr
11540     3A 00 00 FF 
11544     28 E4 85 F1 | 	sub	objptr, ##29736
11548     F2 FA 01 F6 | 	mov	result1, objptr
1154c     15 FA 25 F4 | 	bith	result1, #21
11550     3A 00 00 FF 
11554     2C E4 05 F1 | 	add	objptr, ##29740
11558     F2 FA 61 FC | 	wrlong	result1, objptr
1155c     3A 00 00 FF 
11560     2C E4 85 F1 | 	sub	objptr, ##29740
11564     F2 FA 01 F6 | 	mov	result1, objptr
11568     34 FA 25 F4 | 	bith	result1, #52
1156c     3A 00 00 FF 
11570     30 E4 05 F1 | 	add	objptr, ##29744
11574     F2 FA 61 FC | 	wrlong	result1, objptr
11578     3A 00 00 FF 
1157c     30 E4 85 F1 | 	sub	objptr, ##29744
11580     F2 FA 01 F6 | 	mov	result1, objptr
11584     16 FA 25 F4 | 	bith	result1, #22
11588     3A 00 00 FF 
1158c     38 E4 05 F1 | 	add	objptr, ##29752
11590     F2 FA 61 FC | 	wrlong	result1, objptr
11594     3A 00 00 FF 
11598     38 E4 85 F1 | 	sub	objptr, ##29752
1159c     F2 FA 01 F6 | 	mov	result1, objptr
115a0     00 28 00 FF 
115a4     00 FA 45 F5 | 	or	result1, ##5242880
115a8     3A 00 00 FF 
115ac     3C E4 05 F1 | 	add	objptr, ##29756
115b0     F2 FA 61 FC | 	wrlong	result1, objptr
115b4     3A 00 00 FF 
115b8     3C E4 85 F1 | 	sub	objptr, ##29756
115bc     F2 FA 01 F6 | 	mov	result1, objptr
115c0     35 FA 25 F4 | 	bith	result1, #53
115c4     3A 00 00 FF 
115c8     40 E4 05 F1 | 	add	objptr, ##29760
115cc     F2 FA 61 FC | 	wrlong	result1, objptr
115d0     3A 00 00 FF 
115d4     40 E4 85 F1 | 	sub	objptr, ##29760
115d8     F2 FA 01 F6 | 	mov	result1, objptr
115dc     54 FA 25 F4 | 	bith	result1, #84
115e0     3A 00 00 FF 
115e4     44 E4 05 F1 | 	add	objptr, ##29764
115e8     F2 FA 61 FC | 	wrlong	result1, objptr
115ec     3A 00 00 FF 
115f0     44 E4 85 F1 | 	sub	objptr, ##29764
115f4     F2 FA 01 F6 | 	mov	result1, objptr
115f8     17 FA 25 F4 | 	bith	result1, #23
115fc     3A 00 00 FF 
11600     48 E4 05 F1 | 	add	objptr, ##29768
11604     F2 FA 61 FC | 	wrlong	result1, objptr
11608     3A 00 00 FF 
1160c     48 E4 85 F1 | 	sub	objptr, ##29768
11610     F2 FA 01 F6 | 	mov	result1, objptr
11614     00 48 00 FF 
11618     00 FA 45 F5 | 	or	result1, ##9437184
1161c     3A 00 00 FF 
11620     4C E4 05 F1 | 	add	objptr, ##29772
11624     F2 FA 61 FC | 	wrlong	result1, objptr
11628     3A 00 00 FF 
1162c     4C E4 85 F1 | 	sub	objptr, ##29772
11630     F2 FA 01 F6 | 	mov	result1, objptr
11634     00 50 00 FF 
11638     00 FA 45 F5 | 	or	result1, ##10485760
1163c     3A 00 00 FF 
11640     50 E4 05 F1 | 	add	objptr, ##29776
11644     F2 FA 61 FC | 	wrlong	result1, objptr
11648     3A 00 00 FF 
1164c     50 E4 85 F1 | 	sub	objptr, ##29776
11650     F2 FA 01 F6 | 	mov	result1, objptr
11654     00 58 00 FF 
11658     00 FA 45 F5 | 	or	result1, ##11534336
1165c     3A 00 00 FF 
11660     54 E4 05 F1 | 	add	objptr, ##29780
11664     F2 FA 61 FC | 	wrlong	result1, objptr
11668     3A 00 00 FF 
1166c     54 E4 85 F1 | 	sub	objptr, ##29780
11670     F2 FA 01 F6 | 	mov	result1, objptr
11674     36 FA 25 F4 | 	bith	result1, #54
11678     3A 00 00 FF 
1167c     68 E4 05 F1 | 	add	objptr, ##29800
11680     F2 FA 61 FC | 	wrlong	result1, objptr
11684     3A 00 00 FF 
11688     68 E4 85 F1 | 	sub	objptr, ##29800
1168c     F2 FA 01 F6 | 	mov	result1, objptr
11690     00 68 00 FF 
11694     00 FA 45 F5 | 	or	result1, ##13631488
11698     3A 00 00 FF 
1169c     98 E4 05 F1 | 	add	objptr, ##29848
116a0     F2 FA 61 FC | 	wrlong	result1, objptr
116a4     3A 00 00 FF 
116a8     98 E4 85 F1 | 	sub	objptr, ##29848
116ac     F2 FA 01 F6 | 	mov	result1, objptr
116b0     00 68 00 FF 
116b4     00 FA 45 F5 | 	or	result1, ##13631488
116b8     3A 00 00 FF 
116bc     94 E4 05 F1 | 	add	objptr, ##29844
116c0     F2 FA 61 FC | 	wrlong	result1, objptr
116c4     3A 00 00 FF 
116c8     94 E4 85 F1 | 	sub	objptr, ##29844
116cc     F2 FA 01 F6 | 	mov	result1, objptr
116d0     00 68 00 FF 
116d4     00 FA 45 F5 | 	or	result1, ##13631488
116d8     3A 00 00 FF 
116dc     9C E4 05 F1 | 	add	objptr, ##29852
116e0     F2 FA 61 FC | 	wrlong	result1, objptr
116e4     3A 00 00 FF 
116e8     9C E4 85 F1 | 	sub	objptr, ##29852
116ec     F2 FA 01 F6 | 	mov	result1, objptr
116f0     00 68 00 FF 
116f4     00 FA 45 F5 | 	or	result1, ##13631488
116f8     3A 00 00 FF 
116fc     A0 E4 05 F1 | 	add	objptr, ##29856
11700     F2 FA 61 FC | 	wrlong	result1, objptr
11704     3A 00 00 FF 
11708     A0 E4 85 F1 | 	sub	objptr, ##29856
1170c     F2 FA 01 F6 | 	mov	result1, objptr
11710     00 68 00 FF 
11714     00 FA 45 F5 | 	or	result1, ##13631488
11718     3A 00 00 FF 
1171c     D0 E4 05 F1 | 	add	objptr, ##29904
11720     F2 FA 61 FC | 	wrlong	result1, objptr
11724     3A 00 00 FF 
11728     D0 E4 85 F1 | 	sub	objptr, ##29904
1172c     F2 FA 01 F6 | 	mov	result1, objptr
11730     55 FA 25 F4 | 	bith	result1, #85
11734     3A 00 00 FF 
11738     80 E4 05 F1 | 	add	objptr, ##29824
1173c     F2 FA 61 FC | 	wrlong	result1, objptr
11740     3A 00 00 FF 
11744     80 E4 85 F1 | 	sub	objptr, ##29824
11748     F2 FA 01 F6 | 	mov	result1, objptr
1174c     00 68 00 FF 
11750     00 FA 45 F5 | 	or	result1, ##13631488
11754     3A 00 00 FF 
11758     A4 E4 05 F1 | 	add	objptr, ##29860
1175c     F2 FA 61 FC | 	wrlong	result1, objptr
11760     3A 00 00 FF 
11764     A4 E4 85 F1 | 	sub	objptr, ##29860
11768     F2 FA 01 F6 | 	mov	result1, objptr
1176c     00 68 00 FF 
11770     00 FA 45 F5 | 	or	result1, ##13631488
11774     3A 00 00 FF 
11778     A8 E4 05 F1 | 	add	objptr, ##29864
1177c     F2 FA 61 FC | 	wrlong	result1, objptr
11780     3A 00 00 FF 
11784     A8 E4 85 F1 | 	sub	objptr, ##29864
11788     F2 FA 01 F6 | 	mov	result1, objptr
1178c     00 68 00 FF 
11790     00 FA 45 F5 | 	or	result1, ##13631488
11794     3A 00 00 FF 
11798     AC E4 05 F1 | 	add	objptr, ##29868
1179c     F2 FA 61 FC | 	wrlong	result1, objptr
117a0     3A 00 00 FF 
117a4     AC E4 85 F1 | 	sub	objptr, ##29868
117a8     F2 FA 01 F6 | 	mov	result1, objptr
117ac     74 FA 25 F4 | 	bith	result1, #116
117b0     3A 00 00 FF 
117b4     24 E5 05 F1 | 	add	objptr, ##29988
117b8     F2 FA 61 FC | 	wrlong	result1, objptr
117bc     3A 00 00 FF 
117c0     24 E5 85 F1 | 	sub	objptr, ##29988
117c4     F2 FA 01 F6 | 	mov	result1, objptr
117c8     18 FA 25 F4 | 	bith	result1, #24
117cc     3A 00 00 FF 
117d0     28 E5 05 F1 | 	add	objptr, ##29992
117d4     F2 FA 61 FC | 	wrlong	result1, objptr
117d8     3A 00 00 FF 
117dc     28 E5 85 F1 | 	sub	objptr, ##29992
117e0     F2 FA 01 F6 | 	mov	result1, objptr
117e4     00 88 00 FF 
117e8     00 FA 45 F5 | 	or	result1, ##17825792
117ec     3A 00 00 FF 
117f0     2C E5 05 F1 | 	add	objptr, ##29996
117f4     F2 FA 61 FC | 	wrlong	result1, objptr
117f8     3A 00 00 FF 
117fc     2C E5 85 F1 | 	sub	objptr, ##29996
11800     F2 FA 01 F6 | 	mov	result1, objptr
11804     00 90 00 FF 
11808     00 FA 45 F5 | 	or	result1, ##18874368
1180c     3A 00 00 FF 
11810     30 E5 05 F1 | 	add	objptr, ##30000
11814     F2 FA 61 FC | 	wrlong	result1, objptr
11818     3A 00 00 FF 
1181c     30 E5 85 F1 | 	sub	objptr, ##30000
11820     F2 FA 01 F6 | 	mov	result1, objptr
11824     00 98 00 FF 
11828     00 FA 45 F5 | 	or	result1, ##19922944
1182c     3A 00 00 FF 
11830     34 E5 05 F1 | 	add	objptr, ##30004
11834     F2 FA 61 FC | 	wrlong	result1, objptr
11838     3A 00 00 FF 
1183c     34 E5 85 F1 | 	sub	objptr, ##30004
11840     F2 FA 01 F6 | 	mov	result1, objptr
11844     00 A0 00 FF 
11848     00 FA 45 F5 | 	or	result1, ##20971520
1184c     3A 00 00 FF 
11850     38 E5 05 F1 | 	add	objptr, ##30008
11854     F2 FA 61 FC | 	wrlong	result1, objptr
11858     3A 00 00 FF 
1185c     38 E5 85 F1 | 	sub	objptr, ##30008
11860     F2 FA 01 F6 | 	mov	result1, objptr
11864     00 A8 00 FF 
11868     00 FA 45 F5 | 	or	result1, ##22020096
1186c     3A 00 00 FF 
11870     3C E5 05 F1 | 	add	objptr, ##30012
11874     F2 FA 61 FC | 	wrlong	result1, objptr
11878     3A 00 00 FF 
1187c     3C E5 85 F1 | 	sub	objptr, ##30012
11880     F2 FA 01 F6 | 	mov	result1, objptr
11884     00 B0 00 FF 
11888     00 FA 45 F5 | 	or	result1, ##23068672
1188c     3A 00 00 FF 
11890     40 E5 05 F1 | 	add	objptr, ##30016
11894     F2 FA 61 FC | 	wrlong	result1, objptr
11898     3A 00 00 FF 
1189c     40 E5 85 F1 | 	sub	objptr, ##30016
118a0     F2 FA 01 F6 | 	mov	result1, objptr
118a4     00 B8 00 FF 
118a8     00 FA 45 F5 | 	or	result1, ##24117248
118ac     3A 00 00 FF 
118b0     44 E5 05 F1 | 	add	objptr, ##30020
118b4     F2 FA 61 FC | 	wrlong	result1, objptr
118b8     3A 00 00 FF 
118bc     44 E5 85 F1 | 	sub	objptr, ##30020
118c0     F2 FA 01 F6 | 	mov	result1, objptr
118c4     37 FA 25 F4 | 	bith	result1, #55
118c8     3A 00 00 FF 
118cc     48 E5 05 F1 | 	add	objptr, ##30024
118d0     F2 FA 61 FC | 	wrlong	result1, objptr
118d4     3A 00 00 FF 
118d8     48 E5 85 F1 | 	sub	objptr, ##30024
118dc     F2 FA 01 F6 | 	mov	result1, objptr
118e0     00 C8 00 FF 
118e4     00 FA 45 F5 | 	or	result1, ##26214400
118e8     3A 00 00 FF 
118ec     4C E5 05 F1 | 	add	objptr, ##30028
118f0     F2 FA 61 FC | 	wrlong	result1, objptr
118f4     3A 00 00 FF 
118f8     4C E5 85 F1 | 	sub	objptr, ##30028
118fc     F2 FA 01 F6 | 	mov	result1, objptr
11900     00 D0 00 FF 
11904     00 FA 45 F5 | 	or	result1, ##27262976
11908     3A 00 00 FF 
1190c     50 E5 05 F1 | 	add	objptr, ##30032
11910     F2 FA 61 FC | 	wrlong	result1, objptr
11914     3A 00 00 FF 
11918     50 E5 85 F1 | 	sub	objptr, ##30032
1191c     F2 FA 01 F6 | 	mov	result1, objptr
11920     00 D8 00 FF 
11924     00 FA 45 F5 | 	or	result1, ##28311552
11928     3A 00 00 FF 
1192c     54 E5 05 F1 | 	add	objptr, ##30036
11930     F2 FA 61 FC | 	wrlong	result1, objptr
11934     3A 00 00 FF 
11938     54 E5 85 F1 | 	sub	objptr, ##30036
1193c     F2 FA 01 F6 | 	mov	result1, objptr
11940     56 FA 25 F4 | 	bith	result1, #86
11944     3A 00 00 FF 
11948     58 E5 05 F1 | 	add	objptr, ##30040
1194c     F2 FA 61 FC | 	wrlong	result1, objptr
11950     3A 00 00 FF 
11954     58 E5 85 F1 | 	sub	objptr, ##30040
11958     F2 FA 01 F6 | 	mov	result1, objptr
1195c     00 E8 00 FF 
11960     00 FA 45 F5 | 	or	result1, ##30408704
11964     3C 00 00 FF 
11968     20 E4 05 F1 | 	add	objptr, ##30752
1196c     F2 FA 61 FC | 	wrlong	result1, objptr
11970     3C 00 00 FF 
11974     20 E4 85 F1 | 	sub	objptr, ##30752
11978     F2 FA 01 F6 | 	mov	result1, objptr
1197c     75 FA 25 F4 | 	bith	result1, #117
11980     3A 00 00 FF 
11984     5C E5 05 F1 | 	add	objptr, ##30044
11988     F2 FA 61 FC | 	wrlong	result1, objptr
1198c     3A 00 00 FF 
11990     5C E5 85 F1 | 	sub	objptr, ##30044
11994     F2 FA 01 F6 | 	mov	result1, objptr
11998     94 FA 25 F4 | 	bith	result1, #148
1199c     3A 00 00 FF 
119a0     70 E5 05 F1 | 	add	objptr, ##30064
119a4     F2 FA 61 FC | 	wrlong	result1, objptr
119a8     3A 00 00 FF 
119ac     70 E5 85 F1 | 	sub	objptr, ##30064
119b0     F2 FA 01 F6 | 	mov	result1, objptr
119b4     19 FA 25 F4 | 	bith	result1, #25
119b8     3A 00 00 FF 
119bc     60 E5 05 F1 | 	add	objptr, ##30048
119c0     F2 FA 61 FC | 	wrlong	result1, objptr
119c4     3A 00 00 FF 
119c8     60 E5 85 F1 | 	sub	objptr, ##30048
119cc     F2 FA 01 F6 | 	mov	result1, objptr
119d0     00 08 01 FF 
119d4     00 FA 45 F5 | 	or	result1, ##34603008
119d8     3A 00 00 FF 
119dc     7C E4 05 F1 | 	add	objptr, ##29820
119e0     F2 FA 61 FC | 	wrlong	result1, objptr
119e4     3A 00 00 FF 
119e8     7C E4 85 F1 | 	sub	objptr, ##29820
119ec     F2 FA 01 F6 | 	mov	result1, objptr
119f0     00 10 01 FF 
119f4     00 FA 45 F5 | 	or	result1, ##35651584
119f8     3A 00 00 FF 
119fc     64 E5 05 F1 | 	add	objptr, ##30052
11a00     F2 FA 61 FC | 	wrlong	result1, objptr
11a04     3A 00 00 FF 
11a08     64 E5 85 F1 | 	sub	objptr, ##30052
11a0c     F2 FA 01 F6 | 	mov	result1, objptr
11a10     00 18 01 FF 
11a14     00 FA 45 F5 | 	or	result1, ##36700160
11a18     3A 00 00 FF 
11a1c     68 E5 05 F1 | 	add	objptr, ##30056
11a20     F2 FA 61 FC | 	wrlong	result1, objptr
11a24     3A 00 00 FF 
11a28     68 E5 85 F1 | 	sub	objptr, ##30056
11a2c     F2 FA 01 F6 | 	mov	result1, objptr
11a30     00 20 01 FF 
11a34     00 FA 45 F5 | 	or	result1, ##37748736
11a38     3A 00 00 FF 
11a3c     6C E5 05 F1 | 	add	objptr, ##30060
11a40     F2 FA 61 FC | 	wrlong	result1, objptr
11a44     3A 00 00 FF 
11a48     6C E5 85 F1 | 	sub	objptr, ##30060
11a4c     F2 FA 01 F6 | 	mov	result1, objptr
11a50     00 28 01 FF 
11a54     00 FA 45 F5 | 	or	result1, ##38797312
11a58     3A 00 00 FF 
11a5c     78 E5 05 F1 | 	add	objptr, ##30072
11a60     F2 FA 61 FC | 	wrlong	result1, objptr
11a64     3A 00 00 FF 
11a68     78 E5 85 F1 | 	sub	objptr, ##30072
11a6c     F2 FA 01 F6 | 	mov	result1, objptr
11a70     00 30 01 FF 
11a74     00 FA 45 F5 | 	or	result1, ##39845888
11a78     3A 00 00 FF 
11a7c     7C E5 05 F1 | 	add	objptr, ##30076
11a80     F2 FA 61 FC | 	wrlong	result1, objptr
11a84     3A 00 00 FF 
11a88     7C E5 85 F1 | 	sub	objptr, ##30076
11a8c     F2 FA 01 F6 | 	mov	result1, objptr
11a90     00 38 01 FF 
11a94     00 FA 45 F5 | 	or	result1, ##40894464
11a98     3A 00 00 FF 
11a9c     80 E5 05 F1 | 	add	objptr, ##30080
11aa0     F2 FA 61 FC | 	wrlong	result1, objptr
11aa4     3A 00 00 FF 
11aa8     80 E5 85 F1 | 	sub	objptr, ##30080
11aac     F2 FA 01 F6 | 	mov	result1, objptr
11ab0     00 40 01 FF 
11ab4     00 FA 45 F5 | 	or	result1, ##41943040
11ab8     3A 00 00 FF 
11abc     84 E5 05 F1 | 	add	objptr, ##30084
11ac0     F2 FA 61 FC | 	wrlong	result1, objptr
11ac4     3A 00 00 FF 
11ac8     84 E5 85 F1 | 	sub	objptr, ##30084
11acc     F2 FA 01 F6 | 	mov	result1, objptr
11ad0     00 48 01 FF 
11ad4     00 FA 45 F5 | 	or	result1, ##42991616
11ad8     3A 00 00 FF 
11adc     8C E5 05 F1 | 	add	objptr, ##30092
11ae0     F2 FA 61 FC | 	wrlong	result1, objptr
11ae4     3A 00 00 FF 
11ae8     8C E5 85 F1 | 	sub	objptr, ##30092
11aec     F2 FA 01 F6 | 	mov	result1, objptr
11af0     00 50 01 FF 
11af4     00 FA 45 F5 | 	or	result1, ##44040192
11af8     3A 00 00 FF 
11afc     90 E5 05 F1 | 	add	objptr, ##30096
11b00     F2 FA 61 FC | 	wrlong	result1, objptr
11b04     3A 00 00 FF 
11b08     90 E5 85 F1 | 	sub	objptr, ##30096
11b0c     F2 FA 01 F6 | 	mov	result1, objptr
11b10     00 58 01 FF 
11b14     00 FA 45 F5 | 	or	result1, ##45088768
11b18     3A 00 00 FF 
11b1c     90 E4 05 F1 | 	add	objptr, ##29840
11b20     F2 FA 61 FC | 	wrlong	result1, objptr
11b24     3A 00 00 FF 
11b28     90 E4 85 F1 | 	sub	objptr, ##29840
11b2c     F2 FA 01 F6 | 	mov	result1, objptr
11b30     00 60 01 FF 
11b34     00 FA 45 F5 | 	or	result1, ##46137344
11b38     3A 00 00 FF 
11b3c     C0 E4 05 F1 | 	add	objptr, ##29888
11b40     F2 FA 61 FC | 	wrlong	result1, objptr
11b44     3A 00 00 FF 
11b48     C0 E4 85 F1 | 	sub	objptr, ##29888
11b4c     F2 FA 01 F6 | 	mov	result1, objptr
11b50     00 68 01 FF 
11b54     00 FA 45 F5 | 	or	result1, ##47185920
11b58     3A 00 00 FF 
11b5c     BC E4 05 F1 | 	add	objptr, ##29884
11b60     F2 FA 61 FC | 	wrlong	result1, objptr
11b64     3A 00 00 FF 
11b68     BC E4 85 F1 | 	sub	objptr, ##29884
11b6c     F2 FA 01 F6 | 	mov	result1, objptr
11b70     00 70 01 FF 
11b74     00 FA 45 F5 | 	or	result1, ##48234496
11b78     3A 00 00 FF 
11b7c     60 E4 05 F1 | 	add	objptr, ##29792
11b80     F2 FA 61 FC | 	wrlong	result1, objptr
11b84     3A 00 00 FF 
11b88     60 E4 85 F1 | 	sub	objptr, ##29792
11b8c     F2 FA 01 F6 | 	mov	result1, objptr
11b90     00 78 01 FF 
11b94     00 FA 45 F5 | 	or	result1, ##49283072
11b98     3A 00 00 FF 
11b9c     64 E4 05 F1 | 	add	objptr, ##29796
11ba0     F2 FA 61 FC | 	wrlong	result1, objptr
11ba4     3A 00 00 FF 
11ba8     64 E4 85 F1 | 	sub	objptr, ##29796
11bac     F2 FA 01 F6 | 	mov	result1, objptr
11bb0     38 FA 25 F4 | 	bith	result1, #56
11bb4     3A 00 00 FF 
11bb8     CC E4 05 F1 | 	add	objptr, ##29900
11bbc     F2 FA 61 FC | 	wrlong	result1, objptr
11bc0     3A 00 00 FF 
11bc4     CC E4 85 F1 | 	sub	objptr, ##29900
11bc8     F2 FA 01 F6 | 	mov	result1, objptr
11bcc     00 88 01 FF 
11bd0     00 FA 45 F5 | 	or	result1, ##51380224
11bd4     3A 00 00 FF 
11bd8     74 E5 05 F1 | 	add	objptr, ##30068
11bdc     F2 FA 61 FC | 	wrlong	result1, objptr
11be0     3A 00 00 FF 
11be4     74 E5 85 F1 | 	sub	objptr, ##30068
11be8     F2 FA 01 F6 | 	mov	result1, objptr
11bec     00 90 01 FF 
11bf0     00 FA 45 F5 | 	or	result1, ##52428800
11bf4     3A 00 00 FF 
11bf8     88 E5 05 F1 | 	add	objptr, ##30088
11bfc     F2 FA 61 FC | 	wrlong	result1, objptr
11c00     3A 00 00 FF 
11c04     88 E5 85 F1 | 	sub	objptr, ##30088
11c08     F2 FA 01 F6 | 	mov	result1, objptr
11c0c     00 98 01 FF 
11c10     00 FA 45 F5 | 	or	result1, ##53477376
11c14     3A 00 00 FF 
11c18     94 E5 05 F1 | 	add	objptr, ##30100
11c1c     F2 FA 61 FC | 	wrlong	result1, objptr
11c20     3A 00 00 FF 
11c24     94 E5 85 F1 | 	sub	objptr, ##30100
11c28     F2 FA 01 F6 | 	mov	result1, objptr
11c2c     00 A0 01 FF 
11c30     00 FA 45 F5 | 	or	result1, ##54525952
11c34     3A 00 00 FF 
11c38     98 E5 05 F1 | 	add	objptr, ##30104
11c3c     F2 FA 61 FC | 	wrlong	result1, objptr
11c40     3A 00 00 FF 
11c44     98 E5 85 F1 | 	sub	objptr, ##30104
11c48     F2 FA 01 F6 | 	mov	result1, objptr
11c4c     00 A8 01 FF 
11c50     00 FA 45 F5 | 	or	result1, ##55574528
11c54     3A 00 00 FF 
11c58     9C E5 05 F1 | 	add	objptr, ##30108
11c5c     F2 FA 61 FC | 	wrlong	result1, objptr
11c60     3A 00 00 FF 
11c64     9C E5 85 F1 | 	sub	objptr, ##30108
11c68     F2 FA 01 F6 | 	mov	result1, objptr
11c6c     00 B0 01 FF 
11c70     00 FA 45 F5 | 	or	result1, ##56623104
11c74     3A 00 00 FF 
11c78     A0 E5 05 F1 | 	add	objptr, ##30112
11c7c     F2 FA 61 FC | 	wrlong	result1, objptr
11c80     3A 00 00 FF 
11c84     A0 E5 85 F1 | 	sub	objptr, ##30112
11c88     F2 FA 01 F6 | 	mov	result1, objptr
11c8c     00 B8 01 FF 
11c90     00 FA 45 F5 | 	or	result1, ##57671680
11c94     3A 00 00 FF 
11c98     A4 E5 05 F1 | 	add	objptr, ##30116
11c9c     F2 FA 61 FC | 	wrlong	result1, objptr
11ca0     3A 00 00 FF 
11ca4     A4 E5 85 F1 | 	sub	objptr, ##30116
11ca8     F2 FA 01 F6 | 	mov	result1, objptr
11cac     57 FA 25 F4 | 	bith	result1, #87
11cb0     3A 00 00 FF 
11cb4     A8 E5 05 F1 | 	add	objptr, ##30120
11cb8     F2 FA 61 FC | 	wrlong	result1, objptr
11cbc     3A 00 00 FF 
11cc0     A8 E5 85 F1 | 	sub	objptr, ##30120
11cc4     F2 FA 01 F6 | 	mov	result1, objptr
11cc8     94 FA 25 F4 | 	bith	result1, #148
11ccc     3A 00 00 FF 
11cd0     70 E5 05 F1 | 	add	objptr, ##30064
11cd4     F2 FA 61 FC | 	wrlong	result1, objptr
11cd8     3A 00 00 FF 
11cdc     70 E5 85 F1 | 	sub	objptr, ##30064
11ce0     F2 FA 01 F6 | 	mov	result1, objptr
11ce4     00 C8 01 FF 
11ce8     00 FA 45 F5 | 	or	result1, ##59768832
11cec     3A 00 00 FF 
11cf0     B0 E5 05 F1 | 	add	objptr, ##30128
11cf4     F2 FA 61 FC | 	wrlong	result1, objptr
11cf8     3A 00 00 FF 
11cfc     B0 E5 85 F1 | 	sub	objptr, ##30128
11d00     F2 FA 01 F6 | 	mov	result1, objptr
11d04     00 D0 01 FF 
11d08     00 FA 45 F5 | 	or	result1, ##60817408
11d0c     3A 00 00 FF 
11d10     AC E5 05 F1 | 	add	objptr, ##30124
11d14     F2 FA 61 FC | 	wrlong	result1, objptr
11d18     3A 00 00 FF 
11d1c     AC E5 85 F1 | 	sub	objptr, ##30124
11d20     F2 FA 01 F6 | 	mov	result1, objptr
11d24     00 D8 01 FF 
11d28     00 FA 45 F5 | 	or	result1, ##61865984
11d2c     3A 00 00 FF 
11d30     C4 E5 05 F1 | 	add	objptr, ##30148
11d34     F2 FA 61 FC | 	wrlong	result1, objptr
11d38     3A 00 00 FF 
11d3c     C4 E5 85 F1 | 	sub	objptr, ##30148
11d40     F2 FA 01 F6 | 	mov	result1, objptr
11d44     76 FA 25 F4 | 	bith	result1, #118
11d48     3A 00 00 FF 
11d4c     C8 E5 05 F1 | 	add	objptr, ##30152
11d50     F2 FA 61 FC | 	wrlong	result1, objptr
11d54     3A 00 00 FF 
11d58     C8 E5 85 F1 | 	sub	objptr, ##30152
11d5c     F2 FA 01 F6 | 	mov	result1, objptr
11d60     00 E8 01 FF 
11d64     00 FA 45 F5 | 	or	result1, ##63963136
11d68     3A 00 00 FF 
11d6c     B4 E5 05 F1 | 	add	objptr, ##30132
11d70     F2 FA 61 FC | 	wrlong	result1, objptr
11d74     3A 00 00 FF 
11d78     B4 E5 85 F1 | 	sub	objptr, ##30132
11d7c     F2 FA 01 F6 | 	mov	result1, objptr
11d80     95 FA 25 F4 | 	bith	result1, #149
11d84     3A 00 00 FF 
11d88     B8 E5 05 F1 | 	add	objptr, ##30136
11d8c     F2 FA 61 FC | 	wrlong	result1, objptr
11d90     3A 00 00 FF 
11d94     B8 E5 85 F1 | 	sub	objptr, ##30136
11d98     F2 FA 01 F6 | 	mov	result1, objptr
11d9c     B4 FA 25 F4 | 	bith	result1, #180
11da0     3A 00 00 FF 
11da4     BC E5 05 F1 | 	add	objptr, ##30140
11da8     F2 FA 61 FC | 	wrlong	result1, objptr
11dac     3A 00 00 FF 
11db0     BC E5 85 F1 | 	sub	objptr, ##30140
11db4     F2 FA 01 F6 | 	mov	result1, objptr
11db8     1A FA 25 F4 | 	bith	result1, #26
11dbc     3A 00 00 FF 
11dc0     C0 E5 05 F1 | 	add	objptr, ##30144
11dc4     F2 FA 61 FC | 	wrlong	result1, objptr
11dc8     3A 00 00 FF 
11dcc     C0 E5 85 F1 | 	sub	objptr, ##30144
11dd0     F2 FA 01 F6 | 	mov	result1, objptr
11dd4     00 08 02 FF 
11dd8     00 FA 45 F5 | 	or	result1, ##68157440
11ddc     3A 00 00 FF 
11de0     D0 E5 05 F1 | 	add	objptr, ##30160
11de4     F2 FA 61 FC | 	wrlong	result1, objptr
11de8     3A 00 00 FF 
11dec     D0 E5 85 F1 | 	sub	objptr, ##30160
11df0     F2 FA 01 F6 | 	mov	result1, objptr
11df4     00 10 02 FF 
11df8     00 FA 45 F5 | 	or	result1, ##69206016
11dfc     3A 00 00 FF 
11e00     CC E5 05 F1 | 	add	objptr, ##30156
11e04     F2 FA 61 FC | 	wrlong	result1, objptr
11e08     3A 00 00 FF 
11e0c     CC E5 85 F1 | 	sub	objptr, ##30156
11e10     F2 FA 01 F6 | 	mov	result1, objptr
11e14     00 18 02 FF 
11e18     00 FA 45 F5 | 	or	result1, ##70254592
11e1c     3A 00 00 FF 
11e20     DC E5 05 F1 | 	add	objptr, ##30172
11e24     F2 FA 61 FC | 	wrlong	result1, objptr
11e28     3A 00 00 FF 
11e2c     DC E5 85 F1 | 	sub	objptr, ##30172
11e30     F2 FA 01 F6 | 	mov	result1, objptr
11e34     00 20 02 FF 
11e38     00 FA 45 F5 | 	or	result1, ##71303168
11e3c     3A 00 00 FF 
11e40     D8 E5 05 F1 | 	add	objptr, ##30168
11e44     F2 FA 61 FC | 	wrlong	result1, objptr
11e48     3A 00 00 FF 
11e4c     D8 E5 85 F1 | 	sub	objptr, ##30168
11e50     F2 FA 01 F6 | 	mov	result1, objptr
11e54     00 28 02 FF 
11e58     00 FA 45 F5 | 	or	result1, ##72351744
11e5c     3A 00 00 FF 
11e60     D4 E5 05 F1 | 	add	objptr, ##30164
11e64     F2 FA 61 FC | 	wrlong	result1, objptr
11e68     3A 00 00 FF 
11e6c     D4 E5 85 F1 | 	sub	objptr, ##30164
11e70     F2 FA 01 F6 | 	mov	result1, objptr
11e74     00 30 02 FF 
11e78     00 FA 45 F5 | 	or	result1, ##73400320
11e7c     3A 00 00 FF 
11e80     E0 E5 05 F1 | 	add	objptr, ##30176
11e84     F2 FA 61 FC | 	wrlong	result1, objptr
11e88     3A 00 00 FF 
11e8c     E0 E5 85 F1 | 	sub	objptr, ##30176
11e90     F2 FA 01 F6 | 	mov	result1, objptr
11e94     00 38 02 FF 
11e98     00 FA 45 F5 | 	or	result1, ##74448896
11e9c     3A 00 00 FF 
11ea0     E4 E5 05 F1 | 	add	objptr, ##30180
11ea4     F2 FA 61 FC | 	wrlong	result1, objptr
11ea8     3A 00 00 FF 
11eac     E4 E5 85 F1 | 	sub	objptr, ##30180
11eb0     F2 FA 01 F6 | 	mov	result1, objptr
11eb4     00 40 02 FF 
11eb8     00 FA 45 F5 | 	or	result1, ##75497472
11ebc     3A 00 00 FF 
11ec0     78 E4 05 F1 | 	add	objptr, ##29816
11ec4     F2 FA 61 FC | 	wrlong	result1, objptr
11ec8     3A 00 00 FF 
11ecc     78 E4 85 F1 | 	sub	objptr, ##29816
11ed0     F2 FA 01 F6 | 	mov	result1, objptr
11ed4     00 48 02 FF 
11ed8     00 FA 45 F5 | 	or	result1, ##76546048
11edc     3A 00 00 FF 
11ee0     FC E5 05 F1 | 	add	objptr, ##30204
11ee4     F2 FA 61 FC | 	wrlong	result1, objptr
11ee8     3A 00 00 FF 
11eec     FC E5 85 F1 | 	sub	objptr, ##30204
11ef0     F2 FA 01 F6 | 	mov	result1, objptr
11ef4     00 50 02 FF 
11ef8     00 FA 45 F5 | 	or	result1, ##77594624
11efc     3B 00 00 FF 
11f00     0C E4 05 F1 | 	add	objptr, ##30220
11f04     F2 FA 61 FC | 	wrlong	result1, objptr
11f08     3B 00 00 FF 
11f0c     0C E4 85 F1 | 	sub	objptr, ##30220
11f10     F2 FA 01 F6 | 	mov	result1, objptr
11f14     00 58 02 FF 
11f18     00 FA 45 F5 | 	or	result1, ##78643200
11f1c     3B 00 00 FF 
11f20     10 E4 05 F1 | 	add	objptr, ##30224
11f24     F2 FA 61 FC | 	wrlong	result1, objptr
11f28     3B 00 00 FF 
11f2c     10 E4 85 F1 | 	sub	objptr, ##30224
11f30     F2 FA 01 F6 | 	mov	result1, objptr
11f34     00 60 02 FF 
11f38     00 FA 45 F5 | 	or	result1, ##79691776
11f3c     3B 00 00 FF 
11f40     08 E4 05 F1 | 	add	objptr, ##30216
11f44     F2 FA 61 FC | 	wrlong	result1, objptr
11f48     3B 00 00 FF 
11f4c     08 E4 85 F1 | 	sub	objptr, ##30216
11f50     F2 FA 01 F6 | 	mov	result1, objptr
11f54     00 68 02 FF 
11f58     00 FA 45 F5 | 	or	result1, ##80740352
11f5c     3B 00 00 FF 
11f60     00 E4 05 F1 | 	add	objptr, ##30208
11f64     F2 FA 61 FC | 	wrlong	result1, objptr
11f68     3B 00 00 FF 
11f6c     00 E4 85 F1 | 	sub	objptr, ##30208
11f70     F2 FA 01 F6 | 	mov	result1, objptr
11f74     00 70 02 FF 
11f78     00 FA 45 F5 | 	or	result1, ##81788928
11f7c     3B 00 00 FF 
11f80     04 E4 05 F1 | 	add	objptr, ##30212
11f84     F2 FA 61 FC | 	wrlong	result1, objptr
11f88     3B 00 00 FF 
11f8c     04 E4 85 F1 | 	sub	objptr, ##30212
11f90     F2 FA 01 F6 | 	mov	result1, objptr
11f94     00 78 02 FF 
11f98     00 FA 45 F5 | 	or	result1, ##82837504
11f9c     3B 00 00 FF 
11fa0     14 E4 05 F1 | 	add	objptr, ##30228
11fa4     F2 FA 61 FC | 	wrlong	result1, objptr
11fa8     3B 00 00 FF 
11fac     14 E4 85 F1 | 	sub	objptr, ##30228
11fb0     F2 FA 01 F6 | 	mov	result1, objptr
11fb4     00 80 02 FF 
11fb8     00 FA 45 F5 | 	or	result1, ##83886080
11fbc     3B 00 00 FF 
11fc0     18 E4 05 F1 | 	add	objptr, ##30232
11fc4     F2 FA 61 FC | 	wrlong	result1, objptr
11fc8     3B 00 00 FF 
11fcc     18 E4 85 F1 | 	sub	objptr, ##30232
11fd0     F2 FA 01 F6 | 	mov	result1, objptr
11fd4     00 88 02 FF 
11fd8     00 FA 45 F5 | 	or	result1, ##84934656
11fdc     3B 00 00 FF 
11fe0     1C E4 05 F1 | 	add	objptr, ##30236
11fe4     F2 FA 61 FC | 	wrlong	result1, objptr
11fe8     3B 00 00 FF 
11fec     1C E4 85 F1 | 	sub	objptr, ##30236
11ff0     F2 FA 01 F6 | 	mov	result1, objptr
11ff4     00 90 02 FF 
11ff8     00 FA 45 F5 | 	or	result1, ##85983232
11ffc     3B 00 00 FF 
12000     20 E4 05 F1 | 	add	objptr, ##30240
12004     F2 FA 61 FC | 	wrlong	result1, objptr
12008     3B 00 00 FF 
1200c     20 E4 85 F1 | 	sub	objptr, ##30240
12010     F2 FA 01 F6 | 	mov	result1, objptr
12014     00 98 02 FF 
12018     00 FA 45 F5 | 	or	result1, ##87031808
1201c     3B 00 00 FF 
12020     24 E4 05 F1 | 	add	objptr, ##30244
12024     F2 FA 61 FC | 	wrlong	result1, objptr
12028     3B 00 00 FF 
1202c     24 E4 85 F1 | 	sub	objptr, ##30244
12030     F2 FA 01 F6 | 	mov	result1, objptr
12034     00 A0 02 FF 
12038     00 FA 45 F5 | 	or	result1, ##88080384
1203c     3A 00 00 FF 
12040     E8 E5 05 F1 | 	add	objptr, ##30184
12044     F2 FA 61 FC | 	wrlong	result1, objptr
12048     3A 00 00 FF 
1204c     E8 E5 85 F1 | 	sub	objptr, ##30184
12050                 | _init_commands_ret
12050     2D 00 64 FD | 	ret
12054                 | 
12054                 | ' 
12054                 | ' ''--------------------------------Error strings -------------------------------------
12054                 | ' 
12054                 | ' sub init_error_strings
12054                 | _init_error_strings
12054     27 01 00 FF 
12058     29 01 06 F6 | 	mov	_var01, ##@LR__4356
1205c     3C 00 00 FF 
12060     40 E4 05 F1 | 	add	objptr, ##30784
12064     F2 00 62 FC | 	wrlong	_var01, objptr
12068     27 01 00 FF 
1206c     2A 01 06 F6 | 	mov	_var01, ##@LR__4357
12070     04 E4 05 F1 | 	add	objptr, #4
12074     F2 00 62 FC | 	wrlong	_var01, objptr
12078     27 01 00 FF 
1207c     4F 01 06 F6 | 	mov	_var01, ##@LR__4358
12080     04 E4 05 F1 | 	add	objptr, #4
12084     F2 00 62 FC | 	wrlong	_var01, objptr
12088     27 01 00 FF 
1208c     70 01 06 F6 | 	mov	_var01, ##@LR__4359
12090     04 E4 05 F1 | 	add	objptr, #4
12094     F2 00 62 FC | 	wrlong	_var01, objptr
12098     27 01 00 FF 
1209c     8A 01 06 F6 | 	mov	_var01, ##@LR__4360
120a0     04 E4 05 F1 | 	add	objptr, #4
120a4     F2 00 62 FC | 	wrlong	_var01, objptr
120a8     27 01 00 FF 
120ac     A6 01 06 F6 | 	mov	_var01, ##@LR__4361
120b0     04 E4 05 F1 | 	add	objptr, #4
120b4     F2 00 62 FC | 	wrlong	_var01, objptr
120b8     27 01 00 FF 
120bc     C8 01 06 F6 | 	mov	_var01, ##@LR__4362
120c0     04 E4 05 F1 | 	add	objptr, #4
120c4     F2 00 62 FC | 	wrlong	_var01, objptr
120c8     27 01 00 FF 
120cc     F6 01 06 F6 | 	mov	_var01, ##@LR__4363
120d0     04 E4 05 F1 | 	add	objptr, #4
120d4     F2 00 62 FC | 	wrlong	_var01, objptr
120d8     28 01 00 FF 
120dc     21 00 06 F6 | 	mov	_var01, ##@LR__4364
120e0     04 E4 05 F1 | 	add	objptr, #4
120e4     F2 00 62 FC | 	wrlong	_var01, objptr
120e8     28 01 00 FF 
120ec     3A 00 06 F6 | 	mov	_var01, ##@LR__4365
120f0     04 E4 05 F1 | 	add	objptr, #4
120f4     F2 00 62 FC | 	wrlong	_var01, objptr
120f8     28 01 00 FF 
120fc     5B 00 06 F6 | 	mov	_var01, ##@LR__4366
12100     04 E4 05 F1 | 	add	objptr, #4
12104     F2 00 62 FC | 	wrlong	_var01, objptr
12108     28 01 00 FF 
1210c     72 00 06 F6 | 	mov	_var01, ##@LR__4367
12110     04 E4 05 F1 | 	add	objptr, #4
12114     F2 00 62 FC | 	wrlong	_var01, objptr
12118     28 01 00 FF 
1211c     90 00 06 F6 | 	mov	_var01, ##@LR__4368
12120     04 E4 05 F1 | 	add	objptr, #4
12124     F2 00 62 FC | 	wrlong	_var01, objptr
12128     28 01 00 FF 
1212c     B4 00 06 F6 | 	mov	_var01, ##@LR__4369
12130     04 E4 05 F1 | 	add	objptr, #4
12134     F2 00 62 FC | 	wrlong	_var01, objptr
12138     28 01 00 FF 
1213c     DB 00 06 F6 | 	mov	_var01, ##@LR__4370
12140     04 E4 05 F1 | 	add	objptr, #4
12144     F2 00 62 FC | 	wrlong	_var01, objptr
12148     28 01 00 FF 
1214c     F7 00 06 F6 | 	mov	_var01, ##@LR__4371
12150     04 E4 05 F1 | 	add	objptr, #4
12154     F2 00 62 FC | 	wrlong	_var01, objptr
12158     28 01 00 FF 
1215c     08 01 06 F6 | 	mov	_var01, ##@LR__4372
12160     04 E4 05 F1 | 	add	objptr, #4
12164     F2 00 62 FC | 	wrlong	_var01, objptr
12168     28 01 00 FF 
1216c     18 01 06 F6 | 	mov	_var01, ##@LR__4373
12170     04 E4 05 F1 | 	add	objptr, #4
12174     F2 00 62 FC | 	wrlong	_var01, objptr
12178     28 01 00 FF 
1217c     33 01 06 F6 | 	mov	_var01, ##@LR__4374
12180     04 E4 05 F1 | 	add	objptr, #4
12184     F2 00 62 FC | 	wrlong	_var01, objptr
12188     28 01 00 FF 
1218c     45 01 06 F6 | 	mov	_var01, ##@LR__4375
12190     04 E4 05 F1 | 	add	objptr, #4
12194     F2 00 62 FC | 	wrlong	_var01, objptr
12198     28 01 00 FF 
1219c     5D 01 06 F6 | 	mov	_var01, ##@LR__4376
121a0     04 E4 05 F1 | 	add	objptr, #4
121a4     F2 00 62 FC | 	wrlong	_var01, objptr
121a8     28 01 00 FF 
121ac     71 01 06 F6 | 	mov	_var01, ##@LR__4377
121b0     04 E4 05 F1 | 	add	objptr, #4
121b4     F2 00 62 FC | 	wrlong	_var01, objptr
121b8     28 01 00 FF 
121bc     81 01 06 F6 | 	mov	_var01, ##@LR__4378
121c0     04 E4 05 F1 | 	add	objptr, #4
121c4     F2 00 62 FC | 	wrlong	_var01, objptr
121c8     28 01 00 FF 
121cc     9E 01 06 F6 | 	mov	_var01, ##@LR__4379
121d0     04 E4 05 F1 | 	add	objptr, #4
121d4     F2 00 62 FC | 	wrlong	_var01, objptr
121d8     28 01 00 FF 
121dc     AF 01 06 F6 | 	mov	_var01, ##@LR__4380
121e0     04 E4 05 F1 | 	add	objptr, #4
121e4     F2 00 62 FC | 	wrlong	_var01, objptr
121e8     28 01 00 FF 
121ec     C0 01 06 F6 | 	mov	_var01, ##@LR__4381
121f0     04 E4 05 F1 | 	add	objptr, #4
121f4     F2 00 62 FC | 	wrlong	_var01, objptr
121f8     28 01 00 FF 
121fc     EB 01 06 F6 | 	mov	_var01, ##@LR__4382
12200     04 E4 05 F1 | 	add	objptr, #4
12204     F2 00 62 FC | 	wrlong	_var01, objptr
12208     29 01 00 FF 
1220c     07 00 06 F6 | 	mov	_var01, ##@LR__4383
12210     04 E4 05 F1 | 	add	objptr, #4
12214     F2 00 62 FC | 	wrlong	_var01, objptr
12218     29 01 00 FF 
1221c     1D 00 06 F6 | 	mov	_var01, ##@LR__4384
12220     04 E4 05 F1 | 	add	objptr, #4
12224     F2 00 62 FC | 	wrlong	_var01, objptr
12228     29 01 00 FF 
1222c     2A 00 06 F6 | 	mov	_var01, ##@LR__4385
12230     04 E4 05 F1 | 	add	objptr, #4
12234     F2 00 62 FC | 	wrlong	_var01, objptr
12238     29 01 00 FF 
1223c     3C 00 06 F6 | 	mov	_var01, ##@LR__4386
12240     04 E4 05 F1 | 	add	objptr, #4
12244     F2 00 62 FC | 	wrlong	_var01, objptr
12248     29 01 00 FF 
1224c     4D 00 06 F6 | 	mov	_var01, ##@LR__4387
12250     04 E4 05 F1 | 	add	objptr, #4
12254     F2 00 62 FC | 	wrlong	_var01, objptr
12258     29 01 00 FF 
1225c     69 00 06 F6 | 	mov	_var01, ##@LR__4388
12260     04 E4 05 F1 | 	add	objptr, #4
12264     F2 00 62 FC | 	wrlong	_var01, objptr
12268     29 01 00 FF 
1226c     7A 00 06 F6 | 	mov	_var01, ##@LR__4389
12270     04 E4 05 F1 | 	add	objptr, #4
12274     F2 00 62 FC | 	wrlong	_var01, objptr
12278     29 01 00 FF 
1227c     89 00 06 F6 | 	mov	_var01, ##@LR__4390
12280     04 E4 05 F1 | 	add	objptr, #4
12284     F2 00 62 FC | 	wrlong	_var01, objptr
12288     29 01 00 FF 
1228c     A4 00 06 F6 | 	mov	_var01, ##@LR__4391
12290     04 E4 05 F1 | 	add	objptr, #4
12294     F2 00 62 FC | 	wrlong	_var01, objptr
12298     29 01 00 FF 
1229c     D8 00 06 F6 | 	mov	_var01, ##@LR__4392
122a0     04 E4 05 F1 | 	add	objptr, #4
122a4     F2 00 62 FC | 	wrlong	_var01, objptr
122a8     29 01 00 FF 
122ac     F1 00 06 F6 | 	mov	_var01, ##@LR__4393
122b0     04 E4 05 F1 | 	add	objptr, #4
122b4     F2 00 62 FC | 	wrlong	_var01, objptr
122b8     29 01 00 FF 
122bc     0D 01 06 F6 | 	mov	_var01, ##@LR__4394
122c0     04 E4 05 F1 | 	add	objptr, #4
122c4     F2 00 62 FC | 	wrlong	_var01, objptr
122c8     29 01 00 FF 
122cc     2B 01 06 F6 | 	mov	_var01, ##@LR__4395
122d0     04 E4 05 F1 | 	add	objptr, #4
122d4     F2 00 62 FC | 	wrlong	_var01, objptr
122d8     29 01 00 FF 
122dc     44 01 06 F6 | 	mov	_var01, ##@LR__4396
122e0     04 E4 05 F1 | 	add	objptr, #4
122e4     F2 00 62 FC | 	wrlong	_var01, objptr
122e8     29 01 00 FF 
122ec     63 01 06 F6 | 	mov	_var01, ##@LR__4397
122f0     04 E4 05 F1 | 	add	objptr, #4
122f4     F2 00 62 FC | 	wrlong	_var01, objptr
122f8     29 01 00 FF 
122fc     72 01 06 F6 | 	mov	_var01, ##@LR__4398
12300     04 E4 05 F1 | 	add	objptr, #4
12304     F2 00 62 FC | 	wrlong	_var01, objptr
12308     29 01 00 FF 
1230c     A0 01 06 F6 | 	mov	_var01, ##@LR__4399
12310     04 E4 05 F1 | 	add	objptr, #4
12314     F2 00 62 FC | 	wrlong	_var01, objptr
12318     29 01 00 FF 
1231c     AE 01 06 F6 | 	mov	_var01, ##@LR__4400
12320     04 E4 05 F1 | 	add	objptr, #4
12324     F2 00 62 FC | 	wrlong	_var01, objptr
12328     29 01 00 FF 
1232c     C3 01 06 F6 | 	mov	_var01, ##@LR__4401
12330     04 E4 05 F1 | 	add	objptr, #4
12334     F2 00 62 FC | 	wrlong	_var01, objptr
12338     29 01 00 FF 
1233c     E7 01 06 F6 | 	mov	_var01, ##@LR__4402
12340     04 E4 05 F1 | 	add	objptr, #4
12344     F2 00 62 FC | 	wrlong	_var01, objptr
12348     29 01 00 FF 
1234c     FE 01 06 F6 | 	mov	_var01, ##@LR__4403
12350     04 E4 05 F1 | 	add	objptr, #4
12354     F2 00 62 FC | 	wrlong	_var01, objptr
12358     2A 01 00 FF 
1235c     11 00 06 F6 | 	mov	_var01, ##@LR__4404
12360     04 E4 05 F1 | 	add	objptr, #4
12364     F2 00 62 FC | 	wrlong	_var01, objptr
12368     3C 00 00 FF 
1236c     00 E5 85 F1 | 	sub	objptr, ##30976
12370                 | _init_error_strings_ret
12370     2D 00 64 FD | 	ret
12374                 | 
12374                 | '         
12374                 | ' sub printerror(err as integer)
12374                 | _printerror
12374     01 4A 05 F6 | 	mov	COUNT_, #1
12378     A8 00 A0 FD | 	call	#pushregs_
1237c     09 1F 02 F6 | 	mov	local01, arg01
12380     2A 01 00 FF 
12384     28 12 06 F6 | 	mov	arg01, ##@LR__4405
12388     C0 24 B0 FD | 	call	#_hg010b_spin2_write
1238c     0F 13 02 F6 | 	mov	arg01, local01
12390     B8 26 B0 FD | 	call	#_hg010b_spin2_inttostr
12394     FD 12 02 F6 | 	mov	arg01, result1
12398     B0 24 B0 FD | 	call	#_hg010b_spin2_write
1239c     2A 01 00 FF 
123a0     2F 12 06 F6 | 	mov	arg01, ##@LR__4406
123a4     A4 24 B0 FD | 	call	#_hg010b_spin2_write
123a8     02 1E 66 F0 | 	shl	local01, #2
123ac     3C 00 00 FF 
123b0     40 E4 05 F1 | 	add	objptr, ##30784
123b4     F2 1E 02 F1 | 	add	local01, objptr
123b8     0F 13 02 FB | 	rdlong	arg01, local01
123bc     3C 00 00 FF 
123c0     40 E4 85 F1 | 	sub	objptr, ##30784
123c4                 | ' 
123c4                 | ' write(text)
123c4     84 24 B0 FD | 	call	#_hg010b_spin2_write
123c8                 | ' crlf
123c8     E0 25 B0 FD | 	call	#_hg010b_spin2_crlf
123cc     A7 F0 03 F6 | 	mov	ptra, fp
123d0     B2 00 A0 FD | 	call	#popregs_
123d4                 | _printerror_ret
123d4     2D 00 64 FD | 	ret
123d8                 | 
123d8                 | ' 
123d8                 | ' '' ------------------------------- Hardware start/stop/initialization 
123d8                 | ' 
123d8                 | ' sub startpsram
123d8                 | _startpsram
123d8     00 12 06 F6 | 	mov	arg01, #0
123dc     0A 14 C6 F9 | 	decod	arg02, #10
123e0     0B 16 06 F6 | 	mov	arg03, #11
123e4     07 18 06 F6 | 	mov	arg04, #7
123e8     0B 00 00 FF 
123ec     C0 E4 05 F1 | 	add	objptr, ##5824
123f0     64 27 B0 FD | 	call	#_psram_spin2_startx
123f4     22 00 00 FF 
123f8     0C E5 05 F1 | 	add	objptr, ##17676
123fc     F2 FA 61 FC | 	wrlong	result1, objptr
12400                 | '     return $7FF00 + cog*12
12400     0C E4 05 F1 | 	add	objptr, #12
12404     FF 03 80 FF 
12408     F2 00 6A FC | 	wrlong	##524032, objptr
1240c     2D 00 00 FF 
12410     D8 E5 85 F1 | 	sub	objptr, ##23512
12414                 | _startpsram_ret
12414     2D 00 64 FD | 	ret
12418                 | 
12418                 | ' 
12418                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
12418                 | _startvideo
12418     01 4A 05 F6 | 	mov	COUNT_, #1
1241c     A8 00 A0 FD | 	call	#pushregs_
12420     2D 00 00 FF 
12424     D8 E5 05 F1 | 	add	objptr, ##23512
12428     F2 18 02 FB | 	rdlong	arg04, objptr
1242c     2D 00 00 FF 
12430     D8 E5 85 F1 | 	sub	objptr, ##23512
12434     0A 13 02 F6 | 	mov	arg01, arg02
12438     0C 15 02 F6 | 	mov	arg02, arg04
1243c     2C 0F B0 FD | 	call	#_hg010b_spin2_start
12440     2D 00 00 FF 
12444     C4 E5 05 F1 | 	add	objptr, ##23492
12448     F2 FA 61 FC | 	wrlong	result1, objptr
1244c                 | ' 
1244c                 | ' videocog=v.start(pin,mbox)
1244c                 | ' 
1244c                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
1244c     00 1E 06 F6 | 	mov	local01, #0
12450     22 00 00 FF 
12454     04 E5 85 F1 | 	sub	objptr, ##17668
12458                 | LR__1490
12458     0F 13 02 F6 | 	mov	arg01, local01
1245c     00 28 00 FF 
12460     00 14 06 F6 | 	mov	arg02, ##5242880
12464     48 2B B0 FD | 	call	#_psram_spin2_setQos
12468     01 1E 06 F1 | 	add	local01, #1
1246c     08 1E 56 F2 | 	cmps	local01, #8 wc
12470     E4 FF 9F CD |  if_b	jmp	#LR__1490
12474     22 00 00 FF 
12478     04 E5 05 F1 | 	add	objptr, ##17668
1247c     F2 12 02 FB | 	rdlong	arg01, objptr
12480     7A 00 02 FF 
12484     00 14 06 F6 | 	mov	arg02, ##67171328
12488     22 00 00 FF 
1248c     04 E5 85 F1 | 	sub	objptr, ##17668
12490     1C 2B B0 FD | 	call	#_psram_spin2_setQos
12494     0B 00 00 FF 
12498     C0 E4 85 F1 | 	sub	objptr, ##5824
1249c                 | ' psram.setQoS(videocog, $0400f400) 
1249c                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
1249c     F2 14 02 F6 | 	mov	arg02, objptr
124a0     00 A8 02 FF 
124a4     00 14 46 F5 | 	or	arg02, ##89128960
124a8     00 16 06 F6 | 	mov	arg03, #0
124ac     00 18 06 F6 | 	mov	arg04, #0
124b0     00 12 06 F6 | 	mov	arg01, #0
124b4     60 3E B0 FD | 	call	#__system___basic_open
124b8                 | ' return videocog
124b8     2D 00 00 FF 
124bc     C4 E5 05 F1 | 	add	objptr, ##23492
124c0     F2 FA 01 FB | 	rdlong	result1, objptr
124c4     2D 00 00 FF 
124c8     C4 E5 85 F1 | 	sub	objptr, ##23492
124cc     A7 F0 03 F6 | 	mov	ptra, fp
124d0     B2 00 A0 FD | 	call	#popregs_
124d4                 | _startvideo_ret
124d4     2D 00 64 FD | 	ret
124d8                 | 
124d8                 | ' 
124d8                 | ' function pspeek(adr as ulong) as ubyte
124d8                 | _pspeek
124d8     00 4A 05 F6 | 	mov	COUNT_, #0
124dc     A8 00 A0 FD | 	call	#pushregs_
124e0     0C F0 07 F1 | 	add	ptra, #12
124e4     04 4E 05 F1 | 	add	fp, #4
124e8     A7 12 62 FC | 	wrlong	arg01, fp
124ec     04 4E 05 F1 | 	add	fp, #4
124f0     A7 12 02 F6 | 	mov	arg01, fp
124f4     04 4E 85 F1 | 	sub	fp, #4
124f8     A7 14 02 FB | 	rdlong	arg02, fp
124fc     04 4E 85 F1 | 	sub	fp, #4
12500     01 16 06 F6 | 	mov	arg03, #1
12504     0B 00 00 FF 
12508     C0 E4 05 F1 | 	add	objptr, ##5824
1250c     74 28 B0 FD | 	call	#_psram_spin2_read1
12510     0B 00 00 FF 
12514     C0 E4 85 F1 | 	sub	objptr, ##5824
12518                 | ' psram.read1(varptr(res),adr,1)
12518                 | ' return res
12518     08 4E 05 F1 | 	add	fp, #8
1251c     A7 FA C1 FA | 	rdbyte	result1, fp
12520     08 4E 85 F1 | 	sub	fp, #8
12524     A7 F0 03 F6 | 	mov	ptra, fp
12528     B2 00 A0 FD | 	call	#popregs_
1252c                 | _pspeek_ret
1252c     2D 00 64 FD | 	ret
12530                 | 
12530                 | ' 
12530                 | ' function pslpeek(adr as ulong) as ulong
12530                 | _pslpeek
12530     00 4A 05 F6 | 	mov	COUNT_, #0
12534     A8 00 A0 FD | 	call	#pushregs_
12538     0C F0 07 F1 | 	add	ptra, #12
1253c     04 4E 05 F1 | 	add	fp, #4
12540     A7 12 62 FC | 	wrlong	arg01, fp
12544     04 4E 05 F1 | 	add	fp, #4
12548     A7 12 02 F6 | 	mov	arg01, fp
1254c     04 4E 85 F1 | 	sub	fp, #4
12550     A7 14 02 FB | 	rdlong	arg02, fp
12554     04 4E 85 F1 | 	sub	fp, #4
12558     04 16 06 F6 | 	mov	arg03, #4
1255c     0B 00 00 FF 
12560     C0 E4 05 F1 | 	add	objptr, ##5824
12564     1C 28 B0 FD | 	call	#_psram_spin2_read1
12568     0B 00 00 FF 
1256c     C0 E4 85 F1 | 	sub	objptr, ##5824
12570                 | ' psram.read1(varptr(res),adr,4)
12570                 | ' return res
12570     08 4E 05 F1 | 	add	fp, #8
12574     A7 FA 01 FB | 	rdlong	result1, fp
12578     08 4E 85 F1 | 	sub	fp, #8
1257c     A7 F0 03 F6 | 	mov	ptra, fp
12580     B2 00 A0 FD | 	call	#popregs_
12584                 | _pslpeek_ret
12584     2D 00 64 FD | 	ret
12588                 | 
12588                 | ' 
12588                 | ' '' ------------------------------- USB keyboard scan to char translator
12588                 | ' 
12588                 | ' function scantochar(key)
12588                 | _scantochar
12588                 | ' 
12588                 | ' select case (key shr 8) and 255
12588     09 01 02 F6 | 	mov	_var01, arg01
1258c     08 00 C6 F0 | 	sar	_var01, #8
12590     FF 00 0E F5 | 	and	_var01, #255 wz
12594     24 00 90 AD |  if_e	jmp	#LR__1500
12598     02 00 0E F2 | 	cmp	_var01, #2 wz
1259c     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
125a0     30 00 90 AD |  if_e	jmp	#LR__1501
125a4     40 00 0E F2 | 	cmp	_var01, #64 wz
125a8     44 00 90 AD |  if_e	jmp	#LR__1502
125ac     42 00 0E F2 | 	cmp	_var01, #66 wz
125b0     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
125b4     70 00 90 5D |  if_ne	jmp	#LR__1504
125b8     50 00 90 FD | 	jmp	#LR__1503
125bc                 | LR__1500
125bc     09 FB 01 F6 | 	mov	result1, arg01
125c0     7F FA 05 F5 | 	and	result1, #127
125c4     02 FA 65 F0 | 	shl	result1, #2
125c8     F5 FA 01 F1 | 	add	result1, ptr__dat__
125cc     FD FA C1 FA | 	rdbyte	result1, result1
125d0     54 00 90 FD | 	jmp	#_scantochar_ret
125d4                 | LR__1501
125d4     09 FB 01 F6 | 	mov	result1, arg01
125d8     7F FA 05 F5 | 	and	result1, #127
125dc     02 FA 65 F0 | 	shl	result1, #2
125e0     01 FA 05 F1 | 	add	result1, #1
125e4     F5 FA 01 F1 | 	add	result1, ptr__dat__
125e8     FD FA C1 FA | 	rdbyte	result1, result1
125ec     38 00 90 FD | 	jmp	#_scantochar_ret
125f0                 | LR__1502
125f0     09 FB 01 F6 | 	mov	result1, arg01
125f4     7F FA 05 F5 | 	and	result1, #127
125f8     02 FA 65 F0 | 	shl	result1, #2
125fc     02 FA 05 F1 | 	add	result1, #2
12600     F5 FA 01 F1 | 	add	result1, ptr__dat__
12604     FD FA C1 FA | 	rdbyte	result1, result1
12608     1C 00 90 FD | 	jmp	#_scantochar_ret
1260c                 | LR__1503
1260c     09 FB 01 F6 | 	mov	result1, arg01
12610     7F FA 05 F5 | 	and	result1, #127
12614     02 FA 65 F0 | 	shl	result1, #2
12618     03 FA 05 F1 | 	add	result1, #3
1261c     F5 FA 01 F1 | 	add	result1, ptr__dat__
12620     FD FA C1 FA | 	rdbyte	result1, result1
12624     00 00 90 FD | 	jmp	#_scantochar_ret
12628                 | LR__1504
12628                 | _scantochar_ret
12628     2D 00 64 FD | 	ret
1262c                 | 
1262c                 | _program
1262c     0B 4A 05 F6 | 	mov	COUNT_, #11
12630     A8 00 A0 FD | 	call	#pushregs_
12634     A0 FD BF FD | 	call	#_startpsram
12638     40 12 06 F6 | 	mov	arg01, #64
1263c     00 14 06 F6 | 	mov	arg02, #0
12640     00 16 06 F6 | 	mov	arg03, #0
12644     D0 FD BF FD | 	call	#_startvideo
12648     00 12 06 F6 | 	mov	arg01, #0
1264c     00 14 06 F6 | 	mov	arg02, #0
12650     00 16 06 F6 | 	mov	arg03, #0
12654     0B 00 00 FF 
12658     C0 E4 05 F1 | 	add	objptr, ##5824
1265c     64 2C B0 FD | 	call	#_Audio093b_8_sc_spin2_start
12660     FE 1C 02 F6 | 	mov	arg06, result2
12664     22 00 00 FF 
12668     00 E5 05 F1 | 	add	objptr, ##17664
1266c     F2 FA 61 FC | 	wrlong	result1, objptr
12670     14 E4 05 F1 | 	add	objptr, #20
12674     F2 1C 62 FC | 	wrlong	arg06, objptr
12678     2D 00 00 FF 
1267c     D4 E5 85 F1 | 	sub	objptr, ##23508
12680     32 12 06 F6 | 	mov	arg01, #50
12684     DC 34 B0 FD | 	call	#__system___waitms
12688     2D 00 00 FF 
1268c     D4 E5 05 F1 | 	add	objptr, ##23508
12690     F2 12 02 FB | 	rdlong	arg01, objptr
12694     2D 00 00 FF 
12698     D4 E5 85 F1 | 	sub	objptr, ##23508
1269c     14 12 06 F1 | 	add	arg01, #20
126a0     20 00 80 FF 
126a4     09 01 58 FC | 	wrword	##16384, arg01
126a8     0C 2A B0 FD | 	call	#_usbnew_spin2_start
126ac     2D 00 00 FF 
126b0     C8 E5 05 F1 | 	add	objptr, ##23496
126b4     F2 FA 61 FC | 	wrlong	result1, objptr
126b8                 | '   mouse_limits[0] := xlim
126b8     0F 00 00 FF 
126bc     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
126c0     01 00 80 FF 
126c4     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
126c8                 | '   mouse_limits[1] := ylim
126c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
126cc     01 00 80 FF 
126d0     FB 7E 68 FC | 	wrlong	##575, ptr__usbnew_spin2_dat__
126d4     2D 00 00 FF 
126d8     BB E4 85 F1 | 	sub	objptr, ##23227
126dc     F2 12 02 F6 | 	mov	arg01, objptr
126e0     0D E5 85 F1 | 	sub	objptr, #269
126e4     C4 12 06 F1 | 	add	arg01, #196
126e8                 | '   mouse_outptr := ptr
126e8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
126ec     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
126f0     0F 00 00 FF 
126f4     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
126f8     07 00 00 FF 
126fc     72 EB 05 F1 | 	add	ptr__dat__, ##3954
12700     F5 14 02 F6 | 	mov	arg02, ptr__dat__
12704     07 00 00 FF 
12708     72 EB 85 F1 | 	sub	ptr__dat__, ##3954
1270c     10 12 06 F6 | 	mov	arg01, #16
12710     50 11 B0 FD | 	call	#_hg010b_spin2_setspriteptr
12714     10 12 06 F6 | 	mov	arg01, #16
12718     20 14 06 F6 | 	mov	arg02, #32
1271c     20 16 06 F6 | 	mov	arg03, #32
12720     B4 11 B0 FD | 	call	#_hg010b_spin2_setspritesize
12724     09 12 C6 F9 | 	decod	arg01, #9
12728     20 15 06 F6 | 	mov	arg02, #288
1272c     44 2A B0 FD | 	call	#_usbnew_spin2_mouse_move
12730     F2 1C 02 F6 | 	mov	arg06, objptr
12734     50 00 00 FF 
12738     AC E5 05 F1 | 	add	objptr, ##41388
1273c     F2 1A 02 F6 | 	mov	arg05, objptr
12740     0D 1D 62 FC | 	wrlong	arg06, arg05
12744     04 1A 06 F1 | 	add	arg05, #4
12748     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
1274c     EF 14 02 F6 | 	mov	arg02, entryptr__
12750     F2 1E 02 F6 | 	mov	local01, objptr
12754     1E FA 05 F6 | 	mov	result1, #30
12758     28 1E 62 FD | 	setq	local01
1275c     0A FB F1 FC | 	coginit	result1, arg02 wc
12760     01 FA 65 C6 |  if_b	neg	result1, #1
12764     04 E4 85 F1 | 	sub	objptr, #4
12768     F2 FA 61 FC | 	wrlong	result1, objptr
1276c     01 00 00 FF 
12770     90 E4 05 F1 | 	add	objptr, ##656
12774     F2 00 68 FC | 	wrlong	#0, objptr
12778     24 00 00 FF 
1277c     40 E4 85 F1 | 	sub	objptr, ##18496
12780     F2 04 68 FC | 	wrlong	#2, objptr
12784     04 E4 05 F1 | 	add	objptr, #4
12788     F2 26 69 FC | 	wrlong	#147, objptr
1278c     04 E4 05 F1 | 	add	objptr, #4
12790     F2 34 69 FC | 	wrlong	#154, objptr
12794     04 E4 05 F1 | 	add	objptr, #4
12798     F2 08 68 FC | 	wrlong	#4, objptr
1279c     04 E4 85 F1 | 	sub	objptr, #4
127a0     F2 1C 02 FB | 	rdlong	arg06, objptr
127a4     14 E4 85 F1 | 	sub	objptr, #20
127a8     F2 1C 62 FC | 	wrlong	arg06, objptr
127ac     04 E4 05 F1 | 	add	objptr, #4
127b0     F2 00 68 FC | 	wrlong	#0, objptr
127b4     04 E4 05 F1 | 	add	objptr, #4
127b8     F2 00 68 FC | 	wrlong	#0, objptr
127bc     22 00 00 FF 
127c0     B0 E5 05 F1 | 	add	objptr, ##17840
127c4     F2 02 68 FC | 	wrlong	#1, objptr
127c8     14 00 00 FF 
127cc     7C E5 85 F1 | 	sub	objptr, ##10620
127d0     F2 18 68 FC | 	wrlong	#12, objptr
127d4     3C 00 00 FF 
127d8     28 E4 85 F1 | 	sub	objptr, ##30760
127dc     18 ED BF FD | 	call	#_init_commands
127e0     70 F8 BF FD | 	call	#_init_error_strings
127e4     1C 79 BF FD | 	call	#_do_new
127e8     2E 00 00 FF 
127ec     00 E4 05 F1 | 	add	objptr, ##23552
127f0     F2 12 02 FB | 	rdlong	arg01, objptr
127f4     04 E4 85 F1 | 	sub	objptr, #4
127f8     F2 14 02 FB | 	rdlong	arg02, objptr
127fc     2D 00 00 FF 
12800     FC E5 85 F1 | 	sub	objptr, ##23548
12804     88 1D B0 FD | 	call	#_hg010b_spin2_cls
12808     2E 00 00 FF 
1280c     04 E4 05 F1 | 	add	objptr, ##23556
12810     F2 12 02 FB | 	rdlong	arg01, objptr
12814     2E 00 00 FF 
12818     04 E4 85 F1 | 	sub	objptr, ##23556
1281c     88 1C B0 FD | 	call	#_hg010b_spin2_setfontfamily
12820                 | ' 
12820                 | ' leading_spaces:=amount
12820     01 00 00 FF 
12824     B2 E4 05 F1 | 	add	objptr, ##690
12828     F2 04 68 FC | 	wrlong	#2, objptr
1282c     01 00 00 FF 
12830     B2 E4 85 F1 | 	sub	objptr, ##690
12834     2A 01 00 FF 
12838     32 20 06 F6 | 	mov	local02, ##@LR__4407
1283c     3D 12 06 F6 | 	mov	arg01, #61
12840     3C 14 06 F6 | 	mov	arg02, #60
12844     3B 16 06 F6 | 	mov	arg03, #59
12848     3A 18 06 F6 | 	mov	arg04, #58
1284c     68 76 B0 FD | 	call	#__system___vfs_open_sdcardx
12850     FD 14 02 F6 | 	mov	arg02, result1
12854     10 13 02 F6 | 	mov	arg01, local02
12858     E0 33 B0 FD | 	call	#__system___mount
1285c     2A 01 00 FF 
12860     36 12 06 F6 | 	mov	arg01, ##@LR__4408
12864     94 36 B0 FD | 	call	#__system___chdir
12868     2A 01 00 FF 
1286c     3E 20 06 F6 | 	mov	local02, ##@LR__4409
12870     49 00 00 FF 
12874     58 E4 05 F1 | 	add	objptr, ##37464
12878     F2 20 62 FC | 	wrlong	local02, objptr
1287c     1B 00 00 FF 
12880     60 E4 85 F1 | 	sub	objptr, ##13920
12884     F2 12 02 FB | 	rdlong	arg01, objptr
12888     2D 00 00 FF 
1288c     F8 E5 85 F1 | 	sub	objptr, ##23544
12890     01 12 66 F0 | 	shl	arg01, #1
12894     01 14 06 F6 | 	mov	arg02, #1
12898     4C 1C B0 FD | 	call	#_hg010b_spin2_setcursorpos
1289c                 | ' 
1289c                 | ' init_commands
1289c                 | ' init_error_strings
1289c                 | ' do_new
1289c                 | ' 
1289c                 | ' 
1289c                 | ' cls(ink, paper)
1289c                 | ' 'v.setfontfamily(4) 				' use ST Mono font
1289c                 | ' v.setfontfamily(font) 				' use ST Mono font
1289c                 | ' v.setleadingspaces(2)
1289c                 | ' mount "/sd", _vfs_open_sdcard()
1289c                 | ' chdir "/sd/bas"
1289c                 | ' 
1289c                 | ' currentdir$="/sd/bas"
1289c                 | ' 
1289c                 | ' position 2*editor_spaces,1 : print ver$
1289c     00 12 06 F6 | 	mov	arg01, #0
128a0     7C 85 B0 FD | 	call	#__system___getiolock_0370
128a4     FD 12 02 F6 | 	mov	arg01, result1
128a8     C4 2F B0 FD | 	call	#__system___lockmem
128ac     09 00 00 FF 
128b0     E8 EB 05 F1 | 	add	ptr__dat__, ##5096
128b4     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
128b8     09 00 00 FF 
128bc     E8 EB 85 F1 | 	sub	ptr__dat__, ##5096
128c0     00 12 06 F6 | 	mov	arg01, #0
128c4     00 16 06 F6 | 	mov	arg03, #0
128c8     98 3C B0 FD | 	call	#__system___basic_print_string
128cc     00 12 06 F6 | 	mov	arg01, #0
128d0     0A 14 06 F6 | 	mov	arg02, #10
128d4     00 16 06 F6 | 	mov	arg03, #0
128d8     30 3C B0 FD | 	call	#__system___basic_print_char
128dc     00 12 06 F6 | 	mov	arg01, #0
128e0     3C 85 B0 FD | 	call	#__system___getiolock_0370
128e4     FD 00 68 FC | 	wrlong	#0, result1
128e8     F2 12 02 FB | 	rdlong	arg01, objptr
128ec     00 14 06 F6 | 	mov	arg02, #0
128f0     0A 16 06 F6 | 	mov	arg03, #10
128f4     80 51 B0 FD | 	call	#__system__Number_S
128f8     FD 12 02 F6 | 	mov	arg01, result1
128fc     2A 01 00 FF 
12900     46 14 06 F6 | 	mov	arg02, ##@LR__4410
12904     C4 2F B0 FD | 	call	#__system___string_concat
12908     FD 20 02 F6 | 	mov	local02, result1
1290c     50 00 00 FF 
12910     A0 E5 05 F1 | 	add	objptr, ##41376
12914     F2 20 62 FC | 	wrlong	local02, objptr
12918     50 00 00 FF 
1291c     A0 E5 85 F1 | 	sub	objptr, ##41376
12920                 | ' free$=decuns$(v.buf_ptr)+" BASIC bytes free" : print free$
12920     00 12 06 F6 | 	mov	arg01, #0
12924     F8 84 B0 FD | 	call	#__system___getiolock_0370
12928     FD 12 02 F6 | 	mov	arg01, result1
1292c     40 2F B0 FD | 	call	#__system___lockmem
12930     50 00 00 FF 
12934     A0 E5 05 F1 | 	add	objptr, ##41376
12938     F2 14 02 FB | 	rdlong	arg02, objptr
1293c     50 00 00 FF 
12940     A0 E5 85 F1 | 	sub	objptr, ##41376
12944     00 12 06 F6 | 	mov	arg01, #0
12948     00 16 06 F6 | 	mov	arg03, #0
1294c     14 3C B0 FD | 	call	#__system___basic_print_string
12950     00 12 06 F6 | 	mov	arg01, #0
12954     0A 14 06 F6 | 	mov	arg02, #10
12958     00 16 06 F6 | 	mov	arg03, #0
1295c     AC 3B B0 FD | 	call	#__system___basic_print_char
12960     00 12 06 F6 | 	mov	arg01, #0
12964     B8 84 B0 FD | 	call	#__system___getiolock_0370
12968     FD 00 68 FC | 	wrlong	#0, result1
1296c     2D 00 00 FF 
12970     F8 E5 05 F1 | 	add	objptr, ##23544
12974     F2 12 02 FB | 	rdlong	arg01, objptr
12978     2D 00 00 FF 
1297c     F8 E5 85 F1 | 	sub	objptr, ##23544
12980     01 12 66 F0 | 	shl	arg01, #1
12984     04 14 06 F6 | 	mov	arg02, #4
12988     5C 1B B0 FD | 	call	#_hg010b_spin2_setcursorpos
1298c                 | ' position 2*editor_spaces,4 : print "Ready"
1298c     00 12 06 F6 | 	mov	arg01, #0
12990     8C 84 B0 FD | 	call	#__system___getiolock_0370
12994     FD 12 02 F6 | 	mov	arg01, result1
12998     D4 2E B0 FD | 	call	#__system___lockmem
1299c     2A 01 00 FF 
129a0     58 14 06 F6 | 	mov	arg02, ##@LR__4411
129a4     00 12 06 F6 | 	mov	arg01, #0
129a8     00 16 06 F6 | 	mov	arg03, #0
129ac     B4 3B B0 FD | 	call	#__system___basic_print_string
129b0     FD 22 02 F6 | 	mov	local03, result1
129b4     00 12 06 F6 | 	mov	arg01, #0
129b8     0A 14 06 F6 | 	mov	arg02, #10
129bc     00 16 06 F6 | 	mov	arg03, #0
129c0     48 3B B0 FD | 	call	#__system___basic_print_char
129c4     01 24 06 F6 | 	mov	local04, #1
129c8     00 12 06 F6 | 	mov	arg01, #0
129cc     50 84 B0 FD | 	call	#__system___getiolock_0370
129d0     FD 00 68 FC | 	wrlong	#0, result1
129d4     00 26 06 F6 | 	mov	local05, #0
129d8     00 14 06 F6 | 	mov	arg02, #0
129dc     01 14 D6 F7 | 	test	arg02, #1 wc
129e0     5A 4C 64 FD | 	drvc	#38
129e4     01 14 D6 F7 | 	test	arg02, #1 wc
129e8     5A 4E 64 FD | 	drvc	#39
129ec                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
129ec                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
129ec                 | ' 
129ec                 | ' '-------------------------------------------------------------------------------------------------------- 
129ec                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
129ec                 | ' '--------------------------------------------------------------------------------------------------------
129ec                 | ' 
129ec                 | ' do
129ec                 | LR__1510
129ec     01 12 06 F6 | 	mov	arg01, #1
129f0     2C 1B B0 FD | 	call	#_hg010b_spin2_waitvbl
129f4     1C 27 B0 FD | 	call	#_usbnew_spin2_get_key
129f8     3C 00 00 FF 
129fc     38 E4 05 F1 | 	add	objptr, ##30776
12a00     F2 FA 61 FC | 	wrlong	result1, objptr
12a04                 | '   return hkbd_led_rep
12a04     13 00 00 FF 
12a08     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
12a0c     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
12a10     13 00 00 FF 
12a14     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
12a18     16 00 00 FF 
12a1c     08 E4 05 F1 | 	add	objptr, ##11272
12a20     F2 FA 61 FC | 	wrlong	result1, objptr
12a24                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(10): paula.stop(7)
12a24     16 00 00 FF 
12a28     08 E4 85 F1 | 	sub	objptr, ##11272
12a2c     F2 20 02 FB | 	rdlong	local02, objptr
12a30     3C 00 00 FF 
12a34     38 E4 85 F1 | 	sub	objptr, ##30776
12a38     01 20 16 F2 | 	cmp	local02, #1 wc
12a3c     BC 00 90 CD |  if_b	jmp	#LR__1511
12a40     3C 00 00 FF 
12a44     38 E4 05 F1 | 	add	objptr, ##30776
12a48     F2 24 02 FB | 	rdlong	local04, objptr
12a4c     3C 00 00 FF 
12a50     38 E4 85 F1 | 	sub	objptr, ##30776
12a54     12 23 02 F6 | 	mov	local03, local04
12a58     04 22 16 F2 | 	cmp	local03, #4 wc
12a5c     9C 00 90 3D |  if_ae	jmp	#LR__1511
12a60     50 00 00 FF 
12a64     A4 E5 05 F1 | 	add	objptr, ##41380
12a68     F2 1E 02 FB | 	rdlong	local01, objptr
12a6c     50 00 00 FF 
12a70     A4 E5 85 F1 | 	sub	objptr, ##41380
12a74     0F 27 02 F6 | 	mov	local05, local01
12a78     01 26 0E F2 | 	cmp	local05, #1 wz
12a7c     7C 00 90 5D |  if_ne	jmp	#LR__1511
12a80     04 00 00 FF 
12a84     94 EA 05 F1 | 	add	ptr__dat__, ##2196
12a88     F5 14 02 F6 | 	mov	arg02, ptr__dat__
12a8c     04 00 00 FF 
12a90     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
12a94     56 00 00 FF 
12a98     44 22 06 F6 | 	mov	local03, ##44100
12a9c     0E 24 C6 F9 | 	decod	local04, #14
12aa0     00 26 06 F6 | 	mov	local05, #0
12aa4     03 00 00 FF 
12aa8     DE 1E 06 F6 | 	mov	local01, ##1758
12aac     07 12 06 F6 | 	mov	arg01, #7
12ab0     56 00 00 FF 
12ab4     44 16 06 F6 | 	mov	arg03, ##44100
12ab8     0E 18 C6 F9 | 	decod	arg04, #14
12abc     00 1A 06 F6 | 	mov	arg05, #0
12ac0     03 00 00 FF 
12ac4     DE 1C 06 F6 | 	mov	arg06, ##1758
12ac8     0B 00 00 FF 
12acc     C0 E4 05 F1 | 	add	objptr, ##5824
12ad0     68 29 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
12ad4     0B 00 00 FF 
12ad8     C0 E4 85 F1 | 	sub	objptr, ##5824
12adc     0A 12 06 F6 | 	mov	arg01, #10
12ae0     80 30 B0 FD | 	call	#__system___waitms
12ae4     07 12 06 F6 | 	mov	arg01, #7
12ae8     0B 00 00 FF 
12aec     C0 E4 05 F1 | 	add	objptr, ##5824
12af0     98 2A B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
12af4     0B 00 00 FF 
12af8     C0 E4 85 F1 | 	sub	objptr, ##5824
12afc                 | LR__1511
12afc                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
12afc     3C 00 00 FF 
12b00     38 E4 05 F1 | 	add	objptr, ##30776
12b04     F2 20 02 FB | 	rdlong	local02, objptr
12b08     3C 00 00 FF 
12b0c     38 E4 85 F1 | 	sub	objptr, ##30776
12b10     04 20 16 F2 | 	cmp	local02, #4 wc
12b14     80 00 90 CD |  if_b	jmp	#LR__1512
12b18     3C 00 00 FF 
12b1c     38 E4 05 F1 | 	add	objptr, ##30776
12b20     F2 24 02 FB | 	rdlong	local04, objptr
12b24     3C 00 00 FF 
12b28     38 E4 85 F1 | 	sub	objptr, ##30776
12b2c     12 23 02 F6 | 	mov	local03, local04
12b30     00 00 40 FF 
12b34     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
12b38     3C 00 00 CF 
12b3c     38 E4 05 C1 |  if_b	add	objptr, ##30776
12b40     F2 1E 02 CB |  if_b	rdlong	local01, objptr
12b44     3C 00 00 CF 
12b48     38 E4 85 C1 |  if_b	sub	objptr, ##30776
12b4c     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
12b50     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
12b54     40 00 90 3D |  if_ae	jmp	#LR__1512
12b58     3C 00 00 FF 
12b5c     38 E4 05 F1 | 	add	objptr, ##30776
12b60     F2 20 02 FB | 	rdlong	local02, objptr
12b64     04 E4 05 F1 | 	add	objptr, #4
12b68     F2 20 62 FC | 	wrlong	local02, objptr
12b6c     16 00 00 FF 
12b70     08 E4 05 F1 | 	add	objptr, ##11272
12b74     F2 02 68 FC | 	wrlong	#1, objptr
12b78     16 00 00 FF 
12b7c     08 E4 85 F1 | 	sub	objptr, ##11272
12b80     F2 20 02 FB | 	rdlong	local02, objptr
12b84     16 00 00 FF 
12b88     0C E4 05 F1 | 	add	objptr, ##11276
12b8c     F2 20 62 FC | 	wrlong	local02, objptr
12b90     52 00 00 FF 
12b94     48 E4 85 F1 | 	sub	objptr, ##42056
12b98                 | LR__1512
12b98                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
12b98     3C 00 00 FF 
12b9c     38 E4 05 F1 | 	add	objptr, ##30776
12ba0     F2 20 02 FB | 	rdlong	local02, objptr
12ba4     3C 00 00 FF 
12ba8     38 E4 85 F1 | 	sub	objptr, ##30776
12bac     00 00 40 FF 
12bb0     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
12bb4     52 00 00 3F 
12bb8     4C E4 05 31 |  if_ae	add	objptr, ##42060
12bbc     F2 00 68 3C |  if_ae	wrlong	#0, objptr
12bc0     08 E4 85 31 |  if_ae	sub	objptr, #8
12bc4     F2 00 68 3C |  if_ae	wrlong	#0, objptr
12bc8     52 00 00 3F 
12bcc     44 E4 85 31 |  if_ae	sub	objptr, ##42052
12bd0                 | ' if key=0 andalso rpt=1 then rptcnt+=1
12bd0     3C 00 00 FF 
12bd4     38 E4 05 F1 | 	add	objptr, ##30776
12bd8     F2 20 0A FB | 	rdlong	local02, objptr wz
12bdc     3C 00 00 FF 
12be0     38 E4 85 F1 | 	sub	objptr, ##30776
12be4     52 00 00 AF 
12be8     44 E4 05 A1 |  if_e	add	objptr, ##42052
12bec     F2 24 02 AB |  if_e	rdlong	local04, objptr
12bf0     52 00 00 AF 
12bf4     44 E4 85 A1 |  if_e	sub	objptr, ##42052
12bf8     12 23 02 A6 |  if_e	mov	local03, local04
12bfc     01 22 0E A2 |  if_e	cmp	local03, #1 wz
12c00     52 00 00 AF 
12c04     4C E4 05 A1 |  if_e	add	objptr, ##42060
12c08     F2 20 02 AB |  if_e	rdlong	local02, objptr
12c0c     01 20 06 A1 |  if_e	add	local02, #1
12c10     F2 20 62 AC |  if_e	wrlong	local02, objptr
12c14     52 00 00 AF 
12c18     4C E4 85 A1 |  if_e	sub	objptr, ##42060
12c1c                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
12c1c     3C 00 00 FF 
12c20     38 E4 05 F1 | 	add	objptr, ##30776
12c24     F2 20 02 FB | 	rdlong	local02, objptr
12c28     3C 00 00 FF 
12c2c     38 E4 85 F1 | 	sub	objptr, ##30776
12c30     00 00 40 FF 
12c34     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
12c38     44 00 90 3D |  if_ae	jmp	#LR__1514
12c3c     52 00 00 FF 
12c40     4C E4 05 F1 | 	add	objptr, ##42060
12c44     F2 20 02 FB | 	rdlong	local02, objptr
12c48     52 00 00 FF 
12c4c     4C E4 85 F1 | 	sub	objptr, ##42060
12c50     19 20 0E F2 | 	cmp	local02, #25 wz
12c54     28 00 90 5D |  if_ne	jmp	#LR__1513
12c58     3C 00 00 FF 
12c5c     3C E4 05 F1 | 	add	objptr, ##30780
12c60     F2 20 02 FB | 	rdlong	local02, objptr
12c64     16 00 00 FF 
12c68     0C E4 05 F1 | 	add	objptr, ##11276
12c6c     F2 20 62 FC | 	wrlong	local02, objptr
12c70     04 E4 05 F1 | 	add	objptr, #4
12c74     F2 2A 68 FC | 	wrlong	#21, objptr
12c78     52 00 00 FF 
12c7c     4C E4 85 F1 | 	sub	objptr, ##42060
12c80                 | LR__1513
12c80                 | LR__1514
12c80                 | ' 
12c80                 | ' 
12c80                 | ' if key3<>0 then
12c80     52 00 00 FF 
12c84     48 E4 05 F1 | 	add	objptr, ##42056
12c88     F2 28 0A FB | 	rdlong	local06, objptr wz
12c8c     52 00 00 FF 
12c90     48 E4 85 F1 | 	sub	objptr, ##42056
12c94     54 FD 9F AD |  if_e	jmp	#LR__1510
12c98                 | '   if keyclick=1 then paula.play(7,@atari_spl,44100,16384,1684) 
12c98     50 00 00 FF 
12c9c     A4 E5 05 F1 | 	add	objptr, ##41380
12ca0     F2 20 02 FB | 	rdlong	local02, objptr
12ca4     50 00 00 FF 
12ca8     A4 E5 85 F1 | 	sub	objptr, ##41380
12cac     01 20 0E F2 | 	cmp	local02, #1 wz
12cb0     5C 00 90 5D |  if_ne	jmp	#LR__1515
12cb4     01 00 00 FF 
12cb8     00 EA 05 F1 | 	add	ptr__dat__, ##512
12cbc     F5 14 02 F6 | 	mov	arg02, ptr__dat__
12cc0     01 00 00 FF 
12cc4     00 EA 85 F1 | 	sub	ptr__dat__, ##512
12cc8     56 00 00 FF 
12ccc     44 22 06 F6 | 	mov	local03, ##44100
12cd0     0E 24 C6 F9 | 	decod	local04, #14
12cd4     03 00 00 FF 
12cd8     94 26 06 F6 | 	mov	local05, ##1684
12cdc     01 1E 66 F6 | 	neg	local01, #1
12ce0     07 12 06 F6 | 	mov	arg01, #7
12ce4     56 00 00 FF 
12ce8     44 16 06 F6 | 	mov	arg03, ##44100
12cec     0E 18 C6 F9 | 	decod	arg04, #14
12cf0     03 00 00 FF 
12cf4     94 1A 06 F6 | 	mov	arg05, ##1684
12cf8     01 1C 66 F6 | 	neg	arg06, #1
12cfc     0B 00 00 FF 
12d00     C0 E4 05 F1 | 	add	objptr, ##5824
12d04     34 27 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
12d08     0B 00 00 FF 
12d0c     C0 E4 85 F1 | 	sub	objptr, ##5824
12d10                 | LR__1515
12d10     52 00 00 FF 
12d14     48 E4 05 F1 | 	add	objptr, ##42056
12d18     F2 12 02 FB | 	rdlong	arg01, objptr
12d1c     52 00 00 FF 
12d20     48 E4 85 F1 | 	sub	objptr, ##42056
12d24     60 F8 BF FD | 	call	#_scantochar
12d28     52 00 00 FF 
12d2c     50 E4 05 F1 | 	add	objptr, ##42064
12d30     F2 FA 61 FC | 	wrlong	result1, objptr
12d34                 | '   if leds and 2 = 2 then 
12d34     10 E4 85 F1 | 	sub	objptr, #16
12d38     F2 20 0A FB | 	rdlong	local02, objptr wz
12d3c     52 00 00 FF 
12d40     40 E4 85 F1 | 	sub	objptr, ##42048
12d44     68 01 90 AD |  if_e	jmp	#LR__1523
12d48                 | '     if key4>96 andalso key4<123 then
12d48     52 00 00 FF 
12d4c     50 E4 05 F1 | 	add	objptr, ##42064
12d50     F2 20 02 FB | 	rdlong	local02, objptr
12d54     52 00 00 FF 
12d58     50 E4 85 F1 | 	sub	objptr, ##42064
12d5c     61 20 56 F2 | 	cmps	local02, #97 wc
12d60     40 00 90 CD |  if_b	jmp	#LR__1516
12d64     52 00 00 FF 
12d68     50 E4 05 F1 | 	add	objptr, ##42064
12d6c     F2 24 02 FB | 	rdlong	local04, objptr
12d70     52 00 00 FF 
12d74     50 E4 85 F1 | 	sub	objptr, ##42064
12d78     12 23 02 F6 | 	mov	local03, local04
12d7c     7B 22 56 F2 | 	cmps	local03, #123 wc
12d80     20 00 90 3D |  if_ae	jmp	#LR__1516
12d84     52 00 00 FF 
12d88     50 E4 05 F1 | 	add	objptr, ##42064
12d8c     F2 20 02 FB | 	rdlong	local02, objptr
12d90     20 20 86 F1 | 	sub	local02, #32
12d94     F2 20 62 FC | 	wrlong	local02, objptr
12d98     52 00 00 FF 
12d9c     50 E4 85 F1 | 	sub	objptr, ##42064
12da0     0C 01 90 FD | 	jmp	#LR__1522
12da4                 | LR__1516
12da4     52 00 00 FF 
12da8     50 E4 05 F1 | 	add	objptr, ##42064
12dac     F2 20 02 FB | 	rdlong	local02, objptr
12db0     52 00 00 FF 
12db4     50 E4 85 F1 | 	sub	objptr, ##42064
12db8     41 20 56 F2 | 	cmps	local02, #65 wc
12dbc     40 00 90 CD |  if_b	jmp	#LR__1517
12dc0     52 00 00 FF 
12dc4     50 E4 05 F1 | 	add	objptr, ##42064
12dc8     F2 24 02 FB | 	rdlong	local04, objptr
12dcc     52 00 00 FF 
12dd0     50 E4 85 F1 | 	sub	objptr, ##42064
12dd4     12 23 02 F6 | 	mov	local03, local04
12dd8     5B 22 56 F2 | 	cmps	local03, #91 wc
12ddc     20 00 90 3D |  if_ae	jmp	#LR__1517
12de0     52 00 00 FF 
12de4     50 E4 05 F1 | 	add	objptr, ##42064
12de8     F2 20 02 FB | 	rdlong	local02, objptr
12dec     20 20 06 F1 | 	add	local02, #32
12df0     F2 20 62 FC | 	wrlong	local02, objptr
12df4     52 00 00 FF 
12df8     50 E4 85 F1 | 	sub	objptr, ##42064
12dfc     B0 00 90 FD | 	jmp	#LR__1521
12e00                 | LR__1517
12e00     52 00 00 FF 
12e04     50 E4 05 F1 | 	add	objptr, ##42064
12e08     F2 20 02 FB | 	rdlong	local02, objptr
12e0c     52 00 00 FF 
12e10     50 E4 85 F1 | 	sub	objptr, ##42064
12e14     17 20 56 F2 | 	cmps	local02, #23 wc
12e18     40 00 90 CD |  if_b	jmp	#LR__1518
12e1c     52 00 00 FF 
12e20     50 E4 05 F1 | 	add	objptr, ##42064
12e24     F2 24 02 FB | 	rdlong	local04, objptr
12e28     52 00 00 FF 
12e2c     50 E4 85 F1 | 	sub	objptr, ##42064
12e30     12 23 02 F6 | 	mov	local03, local04
12e34     20 22 56 F2 | 	cmps	local03, #32 wc
12e38     20 00 90 3D |  if_ae	jmp	#LR__1518
12e3c     52 00 00 FF 
12e40     50 E4 05 F1 | 	add	objptr, ##42064
12e44     F2 20 02 FB | 	rdlong	local02, objptr
12e48     09 20 86 F1 | 	sub	local02, #9
12e4c     F2 20 62 FC | 	wrlong	local02, objptr
12e50     52 00 00 FF 
12e54     50 E4 85 F1 | 	sub	objptr, ##42064
12e58     54 00 90 FD | 	jmp	#LR__1520
12e5c                 | LR__1518
12e5c     52 00 00 FF 
12e60     50 E4 05 F1 | 	add	objptr, ##42064
12e64     F2 20 02 FB | 	rdlong	local02, objptr
12e68     52 00 00 FF 
12e6c     50 E4 85 F1 | 	sub	objptr, ##42064
12e70     0E 20 56 F2 | 	cmps	local02, #14 wc
12e74     38 00 90 CD |  if_b	jmp	#LR__1519
12e78     52 00 00 FF 
12e7c     50 E4 05 F1 | 	add	objptr, ##42064
12e80     F2 24 02 FB | 	rdlong	local04, objptr
12e84     52 00 00 FF 
12e88     50 E4 85 F1 | 	sub	objptr, ##42064
12e8c     12 23 02 F6 | 	mov	local03, local04
12e90     17 22 56 F2 | 	cmps	local03, #23 wc
12e94     52 00 00 CF 
12e98     50 E4 05 C1 |  if_b	add	objptr, ##42064
12e9c     F2 20 02 CB |  if_b	rdlong	local02, objptr
12ea0     27 20 06 C1 |  if_b	add	local02, #39
12ea4     F2 20 62 CC |  if_b	wrlong	local02, objptr
12ea8     52 00 00 CF 
12eac     50 E4 85 C1 |  if_b	sub	objptr, ##42064
12eb0                 | LR__1519
12eb0                 | LR__1520
12eb0                 | LR__1521
12eb0                 | LR__1522
12eb0                 | LR__1523
12eb0                 | '  
12eb0                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then line$+=chr$(key4): v.putchar(key4)
12eb0     52 00 00 FF 
12eb4     50 E4 05 F1 | 	add	objptr, ##42064
12eb8     F2 20 02 FB | 	rdlong	local02, objptr
12ebc     52 00 00 FF 
12ec0     50 E4 85 F1 | 	sub	objptr, ##42064
12ec4     01 20 56 F2 | 	cmps	local02, #1 wc
12ec8     90 00 90 CD |  if_b	jmp	#LR__1524
12ecc     52 00 00 FF 
12ed0     50 E4 05 F1 | 	add	objptr, ##42064
12ed4     F2 24 02 FB | 	rdlong	local04, objptr
12ed8     52 00 00 FF 
12edc     50 E4 85 F1 | 	sub	objptr, ##42064
12ee0     12 23 02 F6 | 	mov	local03, local04
12ee4     7F 22 56 F2 | 	cmps	local03, #127 wc
12ee8     38 E4 05 C1 |  if_b	add	objptr, #56
12eec     F2 1E E2 CA |  if_b	rdword	local01, objptr
12ef0     38 E4 85 C1 |  if_b	sub	objptr, #56
12ef4     0F 27 32 C9 |  if_b	getword	local05, local01, #0
12ef8     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
12efc     5C 00 90 3D |  if_ae	jmp	#LR__1524
12f00     52 00 00 FF 
12f04     50 E4 05 F1 | 	add	objptr, ##42064
12f08     F2 12 02 FB | 	rdlong	arg01, objptr
12f0c     52 00 00 FF 
12f10     50 E4 85 F1 | 	sub	objptr, ##42064
12f14     2C 4B B0 FD | 	call	#__system__Chr_S
12f18     FD 2A 02 F6 | 	mov	local07, result1
12f1c     2D 00 00 FF 
12f20     E0 E5 05 F1 | 	add	objptr, ##23520
12f24     F2 12 02 FB | 	rdlong	arg01, objptr
12f28     2D 00 00 FF 
12f2c     E0 E5 85 F1 | 	sub	objptr, ##23520
12f30     15 15 02 F6 | 	mov	arg02, local07
12f34     94 29 B0 FD | 	call	#__system___string_concat
12f38     2D 00 00 FF 
12f3c     E0 E5 05 F1 | 	add	objptr, ##23520
12f40     F2 FA 61 FC | 	wrlong	result1, objptr
12f44     24 00 00 FF 
12f48     70 E4 05 F1 | 	add	objptr, ##18544
12f4c     F2 12 02 FB | 	rdlong	arg01, objptr
12f50     52 00 00 FF 
12f54     50 E4 85 F1 | 	sub	objptr, ##42064
12f58     D4 16 B0 FD | 	call	#_hg010b_spin2_putchar
12f5c                 | LR__1524
12f5c                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0) 'end of line reached
12f5c     52 00 00 FF 
12f60     50 E4 05 F1 | 	add	objptr, ##42064
12f64     F2 20 02 FB | 	rdlong	local02, objptr
12f68     52 00 00 FF 
12f6c     50 E4 85 F1 | 	sub	objptr, ##42064
12f70     01 20 56 F2 | 	cmps	local02, #1 wc
12f74     D0 00 90 CD |  if_b	jmp	#LR__1525
12f78     52 00 00 FF 
12f7c     50 E4 05 F1 | 	add	objptr, ##42064
12f80     F2 24 02 FB | 	rdlong	local04, objptr
12f84     52 00 00 FF 
12f88     50 E4 85 F1 | 	sub	objptr, ##42064
12f8c     12 23 02 F6 | 	mov	local03, local04
12f90     7F 22 56 F2 | 	cmps	local03, #127 wc
12f94     B0 00 90 3D |  if_ae	jmp	#LR__1525
12f98     38 E4 05 F1 | 	add	objptr, #56
12f9c     F2 1E E2 FA | 	rdword	local01, objptr
12fa0     38 E4 85 F1 | 	sub	objptr, #56
12fa4     0F 27 32 F9 | 	getword	local05, local01, #0
12fa8     FE 26 0E F2 | 	cmp	local05, #254 wz
12fac     50 00 00 AF 
12fb0     A4 E5 05 A1 |  if_e	add	objptr, ##41380
12fb4     F2 2C 02 AB |  if_e	rdlong	local08, objptr
12fb8     50 00 00 AF 
12fbc     A4 E5 85 A1 |  if_e	sub	objptr, ##41380
12fc0     16 2F 02 A6 |  if_e	mov	local09, local08
12fc4     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
12fc8     7C 00 90 5D |  if_ne	jmp	#LR__1525
12fcc     04 00 00 FF 
12fd0     94 EA 05 F1 | 	add	ptr__dat__, ##2196
12fd4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
12fd8     04 00 00 FF 
12fdc     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
12fe0     56 00 00 FF 
12fe4     44 22 06 F6 | 	mov	local03, ##44100
12fe8     0E 24 C6 F9 | 	decod	local04, #14
12fec     00 26 06 F6 | 	mov	local05, #0
12ff0     03 00 00 FF 
12ff4     DE 1E 06 F6 | 	mov	local01, ##1758
12ff8     07 12 06 F6 | 	mov	arg01, #7
12ffc     56 00 00 FF 
13000     44 16 06 F6 | 	mov	arg03, ##44100
13004     0E 18 C6 F9 | 	decod	arg04, #14
13008     00 1A 06 F6 | 	mov	arg05, #0
1300c     03 00 00 FF 
13010     DE 1C 06 F6 | 	mov	arg06, ##1758
13014     0B 00 00 FF 
13018     C0 E4 05 F1 | 	add	objptr, ##5824
1301c     1C 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
13020     0B 00 00 FF 
13024     C0 E4 85 F1 | 	sub	objptr, ##5824
13028     2C 13 06 F6 | 	mov	arg01, #300
1302c     34 2B B0 FD | 	call	#__system___waitms
13030     00 12 06 F6 | 	mov	arg01, #0
13034     0B 00 00 FF 
13038     C0 E4 05 F1 | 	add	objptr, ##5824
1303c     4C 25 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
13040     0B 00 00 FF 
13044     C0 E4 85 F1 | 	sub	objptr, ##5824
13048                 | LR__1525
13048                 | '  
13048                 | '   'tab
13048                 | '   if (key3 and 255) = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
13048     52 00 00 FF 
1304c     48 E4 05 F1 | 	add	objptr, ##42056
13050     F2 20 02 FB | 	rdlong	local02, objptr
13054     52 00 00 FF 
13058     48 E4 85 F1 | 	sub	objptr, ##42056
1305c     10 21 E2 F8 | 	getbyte	local02, local02, #0
13060     2B 20 0E F2 | 	cmp	local02, #43 wz
13064     B4 00 90 5D |  if_ne	jmp	#LR__1526
13068     38 E4 05 F1 | 	add	objptr, #56
1306c     F2 24 E2 FA | 	rdword	local04, objptr
13070     38 E4 85 F1 | 	sub	objptr, #56
13074     12 23 32 F9 | 	getword	local03, local04, #0
13078     F0 22 16 F2 | 	cmp	local03, #240 wc
1307c     9C 00 90 CD |  if_b	jmp	#LR__1526
13080     50 00 00 FF 
13084     A4 E5 05 F1 | 	add	objptr, ##41380
13088     F2 1E 02 FB | 	rdlong	local01, objptr
1308c     50 00 00 FF 
13090     A4 E5 85 F1 | 	sub	objptr, ##41380
13094     0F 27 02 F6 | 	mov	local05, local01
13098     01 26 0E F2 | 	cmp	local05, #1 wz
1309c     7C 00 90 5D |  if_ne	jmp	#LR__1526
130a0     04 00 00 FF 
130a4     94 EA 05 F1 | 	add	ptr__dat__, ##2196
130a8     F5 14 02 F6 | 	mov	arg02, ptr__dat__
130ac     04 00 00 FF 
130b0     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
130b4     56 00 00 FF 
130b8     44 22 06 F6 | 	mov	local03, ##44100
130bc     0E 24 C6 F9 | 	decod	local04, #14
130c0     00 26 06 F6 | 	mov	local05, #0
130c4     03 00 00 FF 
130c8     DE 1E 06 F6 | 	mov	local01, ##1758
130cc     00 12 06 F6 | 	mov	arg01, #0
130d0     56 00 00 FF 
130d4     44 16 06 F6 | 	mov	arg03, ##44100
130d8     0E 18 C6 F9 | 	decod	arg04, #14
130dc     00 1A 06 F6 | 	mov	arg05, #0
130e0     03 00 00 FF 
130e4     DE 1C 06 F6 | 	mov	arg06, ##1758
130e8     0B 00 00 FF 
130ec     C0 E4 05 F1 | 	add	objptr, ##5824
130f0     48 23 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
130f4     0B 00 00 FF 
130f8     C0 E4 85 F1 | 	sub	objptr, ##5824
130fc     2C 13 06 F6 | 	mov	arg01, #300
13100     60 2A B0 FD | 	call	#__system___waitms
13104     00 12 06 F6 | 	mov	arg01, #0
13108     0B 00 00 FF 
1310c     C0 E4 05 F1 | 	add	objptr, ##5824
13110     78 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
13114     0B 00 00 FF 
13118     C0 E4 85 F1 | 	sub	objptr, ##5824
1311c                 | LR__1526
1311c                 | '   if (key3 and 255) = 43 andalso v.cursor_x<240 then let x=(v.cursor_x mod 16)/2: for i=x to 7: line$+=" " :  v.write (" ") : next i  
1311c     52 00 00 FF 
13120     48 E4 05 F1 | 	add	objptr, ##42056
13124     F2 20 02 FB | 	rdlong	local02, objptr
13128     52 00 00 FF 
1312c     48 E4 85 F1 | 	sub	objptr, ##42056
13130     10 21 E2 F8 | 	getbyte	local02, local02, #0
13134     2B 20 0E F2 | 	cmp	local02, #43 wz
13138     AC 00 90 5D |  if_ne	jmp	#LR__1529
1313c     38 E4 05 F1 | 	add	objptr, #56
13140     F2 24 E2 FA | 	rdword	local04, objptr
13144     38 E4 85 F1 | 	sub	objptr, #56
13148     12 23 32 F9 | 	getword	local03, local04, #0
1314c     F0 22 16 F2 | 	cmp	local03, #240 wc
13150     94 00 90 3D |  if_ae	jmp	#LR__1529
13154     38 E4 05 F1 | 	add	objptr, #56
13158     F2 20 E2 FA | 	rdword	local02, objptr
1315c     10 23 52 F6 | 	abs	local03, local02 wc
13160     11 23 42 F8 | 	getnib	local03, local03, #0
13164     11 23 82 F6 | 	negc	local03, local03
13168     11 25 52 F6 | 	abs	local04, local03 wc
1316c     01 24 46 F0 | 	shr	local04, #1
13170     12 25 82 F6 | 	negc	local04, local04
13174     52 00 00 FF 
13178     1C E4 05 F1 | 	add	objptr, ##42012
1317c     F2 24 62 FC | 	wrlong	local04, objptr
13180     12 31 02 F6 | 	mov	local10, local04
13184     52 00 00 FF 
13188     54 E4 85 F1 | 	sub	objptr, ##42068
1318c                 | LR__1527
1318c     08 30 56 F2 | 	cmps	local10, #8 wc
13190     54 00 90 3D |  if_ae	jmp	#LR__1528
13194     2D 00 00 FF 
13198     E0 E5 05 F1 | 	add	objptr, ##23520
1319c     F2 12 02 FB | 	rdlong	arg01, objptr
131a0     2D 00 00 FF 
131a4     E0 E5 85 F1 | 	sub	objptr, ##23520
131a8     2A 01 00 FF 
131ac     5E 24 06 F6 | 	mov	local04, ##@LR__4412
131b0     12 15 02 F6 | 	mov	arg02, local04
131b4     14 27 B0 FD | 	call	#__system___string_concat
131b8     2D 00 00 FF 
131bc     E0 E5 05 F1 | 	add	objptr, ##23520
131c0     F2 FA 61 FC | 	wrlong	result1, objptr
131c4     2D 00 00 FF 
131c8     E0 E5 85 F1 | 	sub	objptr, ##23520
131cc     2A 01 00 FF 
131d0     60 12 06 F6 | 	mov	arg01, ##@LR__4413
131d4     74 16 B0 FD | 	call	#_hg010b_spin2_write
131d8     18 23 02 F6 | 	mov	local03, local10
131dc     01 22 06 F1 | 	add	local03, #1
131e0     11 31 02 F6 | 	mov	local10, local03
131e4     A4 FF 9F FD | 	jmp	#LR__1527
131e8                 | LR__1528
131e8                 | LR__1529
131e8                 | '  
131e8                 | '   'backspace
131e8                 | '   if (key3 and 255) = 42 then 
131e8     52 00 00 FF 
131ec     48 E4 05 F1 | 	add	objptr, ##42056
131f0     F2 20 02 FB | 	rdlong	local02, objptr
131f4     52 00 00 FF 
131f8     48 E4 85 F1 | 	sub	objptr, ##42056
131fc     10 21 E2 F8 | 	getbyte	local02, local02, #0
13200     2A 20 0E F2 | 	cmp	local02, #42 wz
13204     D4 00 90 5D |  if_ne	jmp	#LR__1534
13208                 | '       if v.cursor_x>4 then 
13208     38 E4 05 F1 | 	add	objptr, #56
1320c     F2 20 E2 FA | 	rdword	local02, objptr
13210     38 E4 85 F1 | 	sub	objptr, #56
13214     05 20 16 F2 | 	cmp	local02, #5 wc
13218     9C 00 90 CD |  if_b	jmp	#LR__1532
1321c     2D 00 00 FF 
13220     E0 E5 05 F1 | 	add	objptr, ##23520
13224     F2 26 02 FB | 	rdlong	local05, objptr
13228     2D 00 00 FF 
1322c     E0 E5 85 F1 | 	sub	objptr, ##23520
13230     13 13 02 F6 | 	mov	arg01, local05
13234     09 33 02 F6 | 	mov	local11, arg01
13238     97 06 48 FB | 	callpa	#(@LR__1531-@LR__1530)>>2,fcache_load_ptr_
1323c                 | LR__1530
1323c     19 FB C9 FA | 	rdbyte	result1, local11 wz
13240     01 32 06 51 |  if_ne	add	local11, #1
13244     F4 FF 9F 5D |  if_ne	jmp	#LR__1530
13248                 | LR__1531
13248     09 33 82 F1 | 	sub	local11, arg01
1324c     19 15 02 F6 | 	mov	arg02, local11
13250     01 14 86 F1 | 	sub	arg02, #1
13254     13 13 02 F6 | 	mov	arg01, local05
13258     24 46 B0 FD | 	call	#__system__Left_S
1325c     2D 00 00 FF 
13260     E0 E5 05 F1 | 	add	objptr, ##23520
13264     F2 FA 61 FC | 	wrlong	result1, objptr
13268     2D 00 00 FF 
1326c     A8 E5 85 F1 | 	sub	objptr, ##23464
13270     F2 12 E2 FA | 	rdword	arg01, objptr
13274     02 12 86 F1 | 	sub	arg01, #2
13278     02 E4 05 F1 | 	add	objptr, #2
1327c     F2 14 C2 FA | 	rdbyte	arg02, objptr
13280     3A E4 85 F1 | 	sub	objptr, #58
13284     60 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
13288     20 12 06 F6 | 	mov	arg01, #32
1328c     A0 13 B0 FD | 	call	#_hg010b_spin2_putchar
13290     38 E4 05 F1 | 	add	objptr, #56
13294     F2 12 E2 FA | 	rdword	arg01, objptr
13298     02 12 86 F1 | 	sub	arg01, #2
1329c     02 E4 05 F1 | 	add	objptr, #2
132a0     F2 24 C2 FA | 	rdbyte	local04, objptr
132a4     3A E4 85 F1 | 	sub	objptr, #58
132a8     12 23 E2 F8 | 	getbyte	local03, local04, #0
132ac     11 15 02 F6 | 	mov	arg02, local03
132b0     34 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
132b4     24 00 90 FD | 	jmp	#LR__1533
132b8                 | LR__1532
132b8     2A 01 00 FF 
132bc     62 20 06 F6 | 	mov	local02, ##@LR__4414
132c0     2D 00 00 FF 
132c4     E0 E5 05 F1 | 	add	objptr, ##23520
132c8     F2 20 62 FC | 	wrlong	local02, objptr
132cc     2D 00 00 FF 
132d0     A8 E5 85 F1 | 	sub	objptr, ##23464
132d4     F2 08 58 FC | 	wrword	#4, objptr
132d8     38 E4 85 F1 | 	sub	objptr, #56
132dc                 | LR__1533
132dc                 | LR__1534
132dc                 | '    
132dc                 | '  ' To do: arrows and DEL; use textscreen array to implement fullscreen editing
132dc                 | '  
132dc                 | '   if key4=key_enter then 
132dc     52 00 00 FF 
132e0     50 E4 05 F1 | 	add	objptr, ##42064
132e4     F2 28 02 FB | 	rdlong	local06, objptr
132e8     52 00 00 FF 
132ec     50 E4 85 F1 | 	sub	objptr, ##42064
132f0     8D 28 0E F2 | 	cmp	local06, #141 wz
132f4     50 00 90 5D |  if_ne	jmp	#LR__1535
132f8     B0 16 B0 FD | 	call	#_hg010b_spin2_crlf
132fc     1C D7 BE FD | 	call	#_interpret
13300     2A 01 00 FF 
13304     63 20 06 F6 | 	mov	local02, ##@LR__4415
13308     2D 00 00 FF 
1330c     E0 E5 05 F1 | 	add	objptr, ##23520
13310     F2 20 62 FC | 	wrlong	local02, objptr
13314     1A FA 61 FD | 	getct	result1
13318     24 00 00 FF 
1331c     78 E4 05 F1 | 	add	objptr, ##18552
13320     F2 24 02 FB | 	rdlong	local04, objptr
13324     12 23 02 F6 | 	mov	local03, local04
13328     11 FB 81 F1 | 	sub	result1, local03
1332c     F2 FA 61 FC | 	wrlong	result1, objptr
13330     14 E4 85 F1 | 	sub	objptr, #20
13334     F2 00 68 FC | 	wrlong	#0, objptr
13338     08 E4 05 F1 | 	add	objptr, #8
1333c     F2 00 68 FC | 	wrlong	#0, objptr
13340     52 00 00 FF 
13344     4C E4 85 F1 | 	sub	objptr, ##42060
13348                 | LR__1535
13348     52 00 00 FF 
1334c     48 E4 05 F1 | 	add	objptr, ##42056
13350     F2 00 68 FC | 	wrlong	#0, objptr
13354     52 00 00 FF 
13358     48 E4 85 F1 | 	sub	objptr, ##42056
1335c     8C F6 9F FD | 	jmp	#LR__1510
13360     A7 F0 03 F6 | 	mov	ptra, fp
13364     B2 00 A0 FD | 	call	#popregs_
13368                 | _program_ret
13368     2D 00 64 FD | 	ret
1336c                 | 
1336c                 | ' '' this is not a main program.
1336c                 | ' 
1336c                 | ' '****************************************************************************************************************
1336c                 | ' '                                                                                                             	*
1336c                 | ' 'Start the driver with graphics mode 'mode' at pins 'base'                            		rev 20220320 	*
1336c                 | ' '                                                                                                            	*
1336c                 | ' ' mode - mode #, see below											*
1336c                 | ' ' base - HDMI base pin												*
1336c                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
1336c                 | ' '														*
1336c                 | ' '' mode number: :  %p_tn_bb_cc_vv_hh										*
1336c                 | ' '' set bit #15 for custom timings														*
1336c                 | ' '' p - 1 - psram, 0 - hub											*
1336c                 | ' '' t - 1 - graphics, 0 - text											*
1336c                 | ' '' n - 1 - 60 Hz,  0 - 50 Hz 											*
1336c                 | ' '' hh - h.zoom, vv-v.zoom, cc-color depth if graphic, unused in text,						*
1336c                 | ' '' bb - borders, 00-wide, 01 medium, 10 no border, 11 no border, extended resolution (1024x576/896x496)		*
1336c                 | ' '														*
1336c                 | ' '****************************************************************************************************************
1336c                 | ' 
1336c                 | ' pub start(base,mb):result |i
1336c                 | _hg010b_spin2_start
1336c                 | ' 
1336c                 | ' '--------------------------- initialize pointers and variables
1336c                 | ' 
1336c                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
1336c     30 E4 05 F1 | 	add	objptr, #48
13370     F2 FA 01 F6 | 	mov	result1, objptr
13374     28 E4 85 F1 | 	sub	objptr, #40
13378     F2 FA 61 FC | 	wrlong	result1, objptr
1337c                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
1337c                 | ' hdmibase:=base							' HDMI base pin, 8*n
1337c     18 E4 05 F1 | 	add	objptr, #24
13380     F2 12 62 FC | 	wrlong	arg01, objptr
13384                 | ' mailbox_ptr:=mb		
13384     04 E4 05 F1 | 	add	objptr, #4
13388     F2 14 62 FC | 	wrlong	arg02, objptr
1338c                 | ' mailbox0:=mb				' PSRAM mailbox pointer
1338c     C1 E5 05 F1 | 	add	objptr, #449
13390     F2 14 62 FC | 	wrlong	arg02, objptr
13394                 | ' sprite_ptr:=@spr1ptr
13394     D8 E4 85 F1 | 	sub	objptr, #216
13398     F2 FA 01 F6 | 	mov	result1, objptr
1339c     E5 E4 85 F1 | 	sub	objptr, #229
133a0     F2 FA 61 FC | 	wrlong	result1, objptr
133a4                 | ' 
133a4                 | ' 		'
133a4                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
133a4     E5 E4 05 F1 | 	add	objptr, #229
133a8     F2 FA 01 FB | 	rdlong	result1, objptr
133ac     D0 FA 05 F1 | 	add	result1, #208
133b0     FD 10 58 FC | 	wrword	#8, result1
133b4                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
133b4     F2 16 02 FB | 	rdlong	arg03, objptr
133b8     D2 16 06 F1 | 	add	arg03, #210
133bc     0B 21 58 FC | 	wrword	#16, arg03
133c0                 | ' leading_spaces:=0				'
133c0     A5 E5 05 F1 | 	add	objptr, #421
133c4     F2 00 68 FC | 	wrlong	#0, objptr
133c8                 | ' 
133c8                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
133c8     99 E4 85 F1 | 	sub	objptr, #153
133cc     00 00 A0 FF 
133d0     F2 0E 68 FC | 	wrlong	##1073741831, objptr
133d4                 | ' emptydl[1]:=0
133d4     04 E4 05 F1 | 	add	objptr, #4
133d8     F2 00 68 FC | 	wrlong	#0, objptr
133dc                 | ' 
133dc                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
133dc                 | ' 
133dc                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
133dc     28 E5 85 F1 | 	sub	objptr, #296
133e0     F2 02 68 FC | 	wrlong	#1, objptr
133e4                 | ' if s_debug<>0
133e4                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
133e4     20 00 80 FF 
133e8     F2 00 68 FC | 	wrlong	##16384, objptr
133ec     F5 E4 85 F1 | 	sub	objptr, #245
133f0                 | ' setmode()							' set the mode, see below
133f0     A4 01 B0 FD | 	call	#_hg010b_spin2_setmode
133f4                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
133f4     45 E4 05 F1 | 	add	objptr, #69
133f8     F2 FA 01 F6 | 	mov	result1, objptr
133fc     35 E4 85 F1 | 	sub	objptr, #53
13400     F2 FA 61 FC | 	wrlong	result1, objptr
13404                 | ' cursor_ptr:=@cursor_x						
13404     28 E4 05 F1 | 	add	objptr, #40
13408     F2 16 02 F6 | 	mov	arg03, objptr
1340c     2C E4 85 F1 | 	sub	objptr, #44
13410     F2 16 62 FC | 	wrlong	arg03, objptr
13414                 | ' fontnum:=0  							' start with a PC type font 
13414     55 E4 05 F1 | 	add	objptr, #85
13418     F2 00 68 FC | 	wrlong	#0, objptr
1341c                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
1341c     1C E4 05 F1 | 	add	objptr, #28
13420     F2 12 02 F6 | 	mov	arg01, objptr
13424     7D E4 85 F1 | 	sub	objptr, #125
13428     10 00 00 FF 
1342c     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
13430     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
13434     10 00 00 FF 
13438     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
1343c     10 16 06 F6 | 	mov	arg03, #16
13440     4C 23 B0 FD | 	call	#__system____builtin_memmove
13444                 | ' leading_spaces:=0
13444     01 00 00 FF 
13448     B2 E4 05 F1 | 	add	objptr, ##690
1344c     F2 00 68 FC | 	wrlong	#0, objptr
13450     01 00 00 FF 
13454     B2 E4 85 F1 | 	sub	objptr, ##690
13458                 | ' '---------------------------- initialize a cursor (MSDOS type)
13458                 | ' 
13458                 | ' initcursor(154)
13458     9A 12 06 F6 | 	mov	arg01, #154
1345c     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
13460                 | ' 
13460                 | ' '---------------------------- start the cog
13460                 | ' 
13460                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
13460     10 00 00 FF 
13464     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
13468     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1346c     10 00 00 FF 
13470     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
13474     10 E4 05 F1 | 	add	objptr, #16
13478     10 FA 05 F6 | 	mov	result1, #16
1347c     28 E4 61 FD | 	setq	objptr
13480     0A FB F1 FC | 	coginit	result1, arg02 wc
13484     01 FA 65 C6 |  if_b	neg	result1, #1
13488     1C E4 05 F1 | 	add	objptr, #28
1348c     F2 FA 61 FC | 	wrlong	result1, objptr
13490     2C E4 85 F1 | 	sub	objptr, #44
13494                 | ' waitms(40)							' wait for stabilize
13494     28 12 06 F6 | 	mov	arg01, #40
13498     C8 26 B0 FD | 	call	#__system___waitms
1349c                 | ' return cog							' return the driver's cog #
1349c     2C E4 05 F1 | 	add	objptr, #44
134a0     F2 FA 01 FB | 	rdlong	result1, objptr
134a4     2C E4 85 F1 | 	sub	objptr, #44
134a8                 | _hg010b_spin2_start_ret
134a8     2D 00 64 FD | 	ret
134ac                 | 
134ac                 | ' 
134ac                 | ' 
134ac                 | ' '**************************************************************************************************************** 
134ac                 | ' '                                                                                                             	*
134ac                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
134ac                 | ' '  Mode number - see start() above or bits below								*
134ac                 | ' '                                                                                                             	*
134ac                 | ' '****************************************************************************************************************
134ac                 | ' 
134ac                 | ' '---------------------------- initialize a cursor (MSDOS type)
134ac                 | ' pub initcursor(color) |i
134ac                 | _hg010b_spin2_initcursor
134ac     03 4A 05 F6 | 	mov	COUNT_, #3
134b0     A8 00 A0 FD | 	call	#pushregs_
134b4     09 1F 02 F6 | 	mov	local01, arg01
134b8                 | ' 
134b8                 | ' cursor_x:=0							' place the cursor at 0:0
134b8     38 E4 05 F1 | 	add	objptr, #56
134bc     F2 00 58 FC | 	wrword	#0, objptr
134c0                 | ' cursor_y:=0
134c0     02 E4 05 F1 | 	add	objptr, #2
134c4     F2 00 48 FC | 	wrbyte	#0, objptr
134c8                 | ' repeat i from 0 to 111
134c8     00 20 06 F6 | 	mov	local02, #0
134cc     F8 E5 05 F1 | 	add	objptr, #504
134d0     97 1A 48 FB | 	callpa	#(@LR__1542-@LR__1540)>>2,fcache_load_ptr_
134d4                 | LR__1540
134d4                 | '   cursor[i]:=0
134d4     10 23 02 F6 | 	mov	local03, local02
134d8     F2 22 02 F1 | 	add	local03, objptr
134dc     11 01 48 FC | 	wrbyte	#0, local03
134e0     01 20 06 F1 | 	add	local02, #1
134e4     70 20 56 F2 | 	cmps	local02, #112 wc
134e8     E8 FF 9F CD |  if_b	jmp	#LR__1540
134ec                 | ' repeat i from 112 to 127
134ec     70 20 06 F6 | 	mov	local02, #112
134f0                 | LR__1541
134f0                 | '   cursor[i]:=color  
134f0     10 23 02 F6 | 	mov	local03, local02
134f4     F2 22 02 F1 | 	add	local03, objptr
134f8     11 1F 42 FC | 	wrbyte	local01, local03
134fc     01 20 06 F1 | 	add	local02, #1
13500     80 20 16 F2 | 	cmp	local02, #128 wc
13504     E8 FF 9F CD |  if_b	jmp	#LR__1541
13508                 | LR__1542
13508                 | ' 'repeat i from 0 to 127
13508                 | ' '  if ((i/8)//2)
13508                 | ' '    cursor[i]:=15
13508                 | ' '  else
13508                 | ' '    cursor[i]:=0
13508                 | ' '  if i>=120    
13508                 | ' '    cursor[i]:=40
13508                 | ' setspriteptr(17,@cursor)
13508     F2 14 02 F6 | 	mov	arg02, objptr
1350c     01 00 00 FF 
13510     32 E4 85 F1 | 	sub	objptr, ##562
13514     11 12 06 F6 | 	mov	arg01, #17
13518     48 03 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1351c                 | ' setspritesize(17,8,16)
1351c     11 12 06 F6 | 	mov	arg01, #17
13520     08 14 06 F6 | 	mov	arg02, #8
13524     10 16 06 F6 | 	mov	arg03, #16
13528     AC 03 B0 FD | 	call	#_hg010b_spin2_setspritesize
1352c                 | ' setspritepos(17,0,0)
1352c     11 12 06 F6 | 	mov	arg01, #17
13530     00 14 06 F6 | 	mov	arg02, #0
13534     00 16 06 F6 | 	mov	arg03, #0
13538     50 03 B0 FD | 	call	#_hg010b_spin2_setspritepos
1353c     A7 F0 03 F6 | 	mov	ptra, fp
13540     B2 00 A0 FD | 	call	#popregs_
13544                 | _hg010b_spin2_initcursor_ret
13544     2D 00 64 FD | 	ret
13548                 | 
13548                 | ' 
13548                 | '  
13548                 | ' pub setcursorcolor(color) |i
13548                 | _hg010b_spin2_setcursorcolor
13548                 | ' 
13548                 | ' 
13548                 | ' repeat i from 0 to 111
13548     00 00 06 F6 | 	mov	_var01, #0
1354c     01 00 00 FF 
13550     32 E4 05 F1 | 	add	objptr, ##562
13554     97 1A 48 FB | 	callpa	#(@LR__1552-@LR__1550)>>2,fcache_load_ptr_
13558                 | LR__1550
13558                 | '   cursor[i]:=0
13558     00 03 02 F6 | 	mov	_var02, _var01
1355c     F2 02 02 F1 | 	add	_var02, objptr
13560     01 01 48 FC | 	wrbyte	#0, _var02
13564     01 00 06 F1 | 	add	_var01, #1
13568     70 00 56 F2 | 	cmps	_var01, #112 wc
1356c     E8 FF 9F CD |  if_b	jmp	#LR__1550
13570                 | ' repeat i from 112 to 127
13570     70 00 06 F6 | 	mov	_var01, #112
13574                 | LR__1551
13574                 | '   cursor[i]:=color  
13574     00 03 02 F6 | 	mov	_var02, _var01
13578     F2 02 02 F1 | 	add	_var02, objptr
1357c     01 13 42 FC | 	wrbyte	arg01, _var02
13580     01 00 06 F1 | 	add	_var01, #1
13584     80 00 16 F2 | 	cmp	_var01, #128 wc
13588     E8 FF 9F CD |  if_b	jmp	#LR__1551
1358c                 | LR__1552
1358c     01 00 00 FF 
13590     32 E4 85 F1 | 	sub	objptr, ##562
13594                 | _hg010b_spin2_setcursorcolor_ret
13594     2D 00 64 FD | 	ret
13598                 | 
13598                 | '  
13598                 | ' 
13598                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
13598                 | _hg010b_spin2_setmode
13598     02 4A 05 F6 | 	mov	COUNT_, #2
1359c     A8 00 A0 FD | 	call	#pushregs_
135a0                 | ' 
135a0                 | ' 
135a0                 | ' dl_ptr:=@emptydl[0]
135a0     01 00 00 FF 
135a4     19 E4 05 F1 | 	add	objptr, ##537
135a8     F2 60 02 F6 | 	mov	muldivb_, objptr
135ac     FD E5 85 F1 | 	sub	objptr, #509
135b0     F2 60 62 FC | 	wrlong	muldivb_, objptr
135b4                 | ' 
135b4                 | ' if cog>0 
135b4     10 E4 05 F1 | 	add	objptr, #16
135b8     F2 60 02 FB | 	rdlong	muldivb_, objptr
135bc     2C E4 85 F1 | 	sub	objptr, #44
135c0     01 60 56 F2 | 	cmps	muldivb_, #1 wc
135c4                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
135c4     01 12 06 36 |  if_ae	mov	arg01, #1
135c8     54 0F B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
135cc                 | ' xres:=1024
135cc     01 00 00 FF 
135d0     22 E4 05 F1 | 	add	objptr, ##546
135d4     02 00 80 FF 
135d8     F2 00 68 FC | 	wrlong	##1024, objptr
135dc                 | ' yres:=576  
135dc     04 E4 05 F1 | 	add	objptr, #4
135e0     01 00 80 FF 
135e4     F2 80 68 FC | 	wrlong	##576, objptr
135e8                 | ' ppl:=(timings[3])
135e8     10 00 00 FF 
135ec     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
135f0     F7 60 02 FB | 	rdlong	muldivb_, ptr__hg010b_spin2_dat__
135f4     51 E5 85 F1 | 	sub	objptr, #337
135f8     F2 60 62 FC | 	wrlong	muldivb_, objptr
135fc                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
135fc     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
13600     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
13604     01 1E 66 F0 | 	shl	local01, #1
13608     80 E4 85 F1 | 	sub	objptr, #128
1360c     F2 1E 62 FC | 	wrlong	local01, objptr
13610                 | ' cpl1:=cpl '' todo remove
13610     04 E4 05 F1 | 	add	objptr, #4
13614     F2 1E 62 FC | 	wrlong	local01, objptr
13618                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
13618     02 00 00 FF 
1361c     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
13620     41 E4 85 F1 | 	sub	objptr, #65
13624     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
13628                 | ' repeat i from 0 to 3
13628     00 20 06 F6 | 	mov	local02, #0
1362c     02 00 00 FF 
13630     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
13634     08 E4 05 F1 | 	add	objptr, #8
13638     97 20 48 FB | 	callpa	#(@LR__1561-@LR__1560)>>2,fcache_load_ptr_
1363c                 | LR__1560
1363c                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
1363c     10 1F 02 F6 | 	mov	local01, local02
13640     02 1E 66 F0 | 	shl	local01, #2
13644     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
13648     F2 60 02 FB | 	rdlong	muldivb_, objptr
1364c     11 60 66 F0 | 	shl	muldivb_, #17
13650     0F 1F 02 FB | 	rdlong	local01, local01
13654     30 1F 02 F1 | 	add	local01, muldivb_
13658     80 40 38 FF 
1365c     00 1E 06 F1 | 	add	local01, ##1887502336
13660     10 61 02 F6 | 	mov	muldivb_, local02
13664     02 60 66 F0 | 	shl	muldivb_, #2
13668     F7 60 02 F1 | 	add	muldivb_, ptr__hg010b_spin2_dat__
1366c     30 1F 62 FC | 	wrlong	local01, muldivb_
13670     01 20 06 F1 | 	add	local02, #1
13674     04 20 56 F2 | 	cmps	local02, #4 wc
13678     C0 FF 9F CD |  if_b	jmp	#LR__1560
1367c                 | LR__1561
1367c     20 E4 85 F1 | 	sub	objptr, #32
13680                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
13680     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
13684     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
13688     14 1E 66 FC | 	wrlong	local01, #20
1368c                 | ' hubset(timings[10])
1368c     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
13690     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
13694     10 00 00 FF 
13698     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
1369c     00 12 62 FD | 	hubset	arg01
136a0                 | ' waitms(1)                                                   	' wait for stabilization
136a0     01 12 06 F6 | 	mov	arg01, #1
136a4     BC 24 B0 FD | 	call	#__system___waitms
136a8     10 00 00 FF 
136ac     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
136b0     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
136b4     5D E4 05 F1 | 	add	objptr, #93
136b8     F2 20 62 FC | 	wrlong	local02, objptr
136bc     10 1F 52 F6 | 	abs	local01, local02 wc
136c0     04 1E 46 F0 | 	shr	local01, #4
136c4     0F 1F 82 F6 | 	negc	local01, local01
136c8     9C E4 05 F1 | 	add	objptr, #156
136cc     F2 1E 62 FC | 	wrlong	local01, objptr
136d0     A4 E4 85 F1 | 	sub	objptr, #164
136d4     F2 20 02 FB | 	rdlong	local02, objptr
136d8     08 E4 05 F1 | 	add	objptr, #8
136dc     F2 1E 02 FB | 	rdlong	local01, objptr
136e0     0F 21 02 FD | 	qmul	local02, local01
136e4                 | ' lines:=timings[11]
136e4                 | ' t_lines:=lines/16
136e4                 | ' buflen:=cpl*lines						' framebuffer length in longs
136e4     29 E4 85 F1 | 	sub	objptr, #41
136e8                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
136e8     19 1E C6 F9 | 	decod	local01, #25
136ec                 | ' mode_ptr:=@timings						' set pointers to timings
136ec     2C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #44
136f0                 | ' graphmode:=1024+512+192+48							' det global variable
136f0                 | ' makedl(graphmode)							' make a DL for the mode
136f0     03 00 00 FF 
136f4     F0 12 06 F6 | 	mov	arg01, ##1776
136f8     18 20 62 FD | 	getqx	local02
136fc     F2 20 62 FC | 	wrlong	local02, objptr
13700     34 E4 85 F1 | 	sub	objptr, #52
13704     02 20 66 F0 | 	shl	local02, #2
13708     10 1F 82 F1 | 	sub	local01, local02
1370c     F2 1E 62 FC | 	wrlong	local01, objptr
13710     14 E4 05 F1 | 	add	objptr, #20
13714     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
13718     79 E4 05 F1 | 	add	objptr, #121
1371c     03 00 80 FF 
13720     F2 E0 69 FC | 	wrlong	##1776, objptr
13724     8D E4 85 F1 | 	sub	objptr, #141
13728     10 00 00 FF 
1372c     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
13730     AC 00 B0 FD | 	call	#_hg010b_spin2_makedl
13734                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
13734     F2 1E 02 FB | 	rdlong	local01, objptr
13738     D9 E4 05 F1 | 	add	objptr, #217
1373c     F2 1E 62 FC | 	wrlong	local01, objptr
13740                 | ' s_font_ptr:=font_ptr
13740     D5 E4 85 F1 | 	sub	objptr, #213
13744     F2 1E 02 FB | 	rdlong	local01, objptr
13748     D9 E4 05 F1 | 	add	objptr, #217
1374c     F2 1E 62 FC | 	wrlong	local01, objptr
13750                 | ' s_lines:=lines
13750     80 E4 85 F1 | 	sub	objptr, #128
13754     F2 1E 02 FB | 	rdlong	local01, objptr
13758     84 E4 05 F1 | 	add	objptr, #132
1375c     F2 1E 62 FC | 	wrlong	local01, objptr
13760                 | ' s_buflen:=buflen
13760     AD E4 85 F1 | 	sub	objptr, #173
13764     F2 1E 02 FB | 	rdlong	local01, objptr
13768     B5 E4 05 F1 | 	add	objptr, #181
1376c     F2 1E 62 FC | 	wrlong	local01, objptr
13770                 | ' s_cpl:=cpl
13770     94 E4 85 F1 | 	sub	objptr, #148
13774     F2 1E 02 FB | 	rdlong	local01, objptr
13778     90 E4 05 F1 | 	add	objptr, #144
1377c     F2 1E 62 FC | 	wrlong	local01, objptr
13780                 | ' s_cpl1:=cpl
13780     90 E4 85 F1 | 	sub	objptr, #144
13784     F2 1E 02 FB | 	rdlong	local01, objptr
13788     98 E4 05 F1 | 	add	objptr, #152
1378c     F2 1E 62 FC | 	wrlong	local01, objptr
13790                 | ' st_lines:=t_lines
13790     0C E4 05 F1 | 	add	objptr, #12
13794     F2 1E 02 FB | 	rdlong	local01, objptr
13798     04 E4 05 F1 | 	add	objptr, #4
1379c     F2 1E 62 FC | 	wrlong	local01, objptr
137a0                 | ' ppl:=ppl/xzoom  
137a0     28 E4 85 F1 | 	sub	objptr, #40
137a4     F2 5E 02 FB | 	rdlong	muldiva_, objptr
137a8     2C E4 05 F1 | 	add	objptr, #44
137ac     F2 60 02 FB | 	rdlong	muldivb_, objptr
137b0     01 E5 85 F1 | 	sub	objptr, #257
137b4     BA 00 A0 FD | 	call	#divide_
137b8     D5 E4 05 F1 | 	add	objptr, #213
137bc     F2 60 62 FC | 	wrlong	muldivb_, objptr
137c0                 | ' s_ppl:=ppl
137c0     1C E4 05 F1 | 	add	objptr, #28
137c4     F2 60 62 FC | 	wrlong	muldivb_, objptr
137c8     F1 E4 85 F1 | 	sub	objptr, #241
137cc                 | ' waitms(20)							' wait 
137cc     14 12 06 F6 | 	mov	arg01, #20
137d0     90 23 B0 FD | 	call	#__system___waitms
137d4     A7 F0 03 F6 | 	mov	ptra, fp
137d8     B2 00 A0 FD | 	call	#popregs_
137dc                 | _hg010b_spin2_setmode_ret
137dc     2D 00 64 FD | 	ret
137e0                 | 
137e0                 | ' 
137e0                 | ' 
137e0                 | ' '****************************************************************************************************************
137e0                 | ' '                                                                                                             	*
137e0                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
137e0                 | ' '                                                                                                             	*
137e0                 | ' '****************************************************************************************************************
137e0                 | ' 
137e0                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
137e0                 | _hg010b_spin2_makedl
137e0                 | ' 
137e0                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
137e0                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
137e0                 | ' repeat i from 0 to 11                                                           ' clear DL
137e0     00 00 06 F6 | 	mov	_var01, #0
137e4     E9 E5 05 F1 | 	add	objptr, #489
137e8     97 0E 48 FB | 	callpa	#(@LR__1571-@LR__1570)>>2,fcache_load_ptr_
137ec                 | LR__1570
137ec                 | '   displaylist[i]:=0 
137ec     00 03 02 F6 | 	mov	_var02, _var01
137f0     02 02 66 F0 | 	shl	_var02, #2
137f4     F2 02 02 F1 | 	add	_var02, objptr
137f8     01 01 68 FC | 	wrlong	#0, _var02
137fc     01 00 06 F1 | 	add	_var01, #1
13800     0C 00 56 F2 | 	cmps	_var01, #12 wc
13804     E4 FF 9F CD |  if_b	jmp	#LR__1570
13808                 | LR__1571
13808                 | '                         ' 
13808                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
13808     8C E5 85 F1 | 	sub	objptr, #396
1380c     F2 02 02 FB | 	rdlong	_var02, objptr
13810     14 02 66 F0 | 	shl	_var02, #20
13814     01 02 06 F1 | 	add	_var02, #1
13818     04 E4 85 F1 | 	sub	objptr, #4
1381c     F2 00 02 FB | 	rdlong	_var01, objptr
13820     02 00 66 F0 | 	shl	_var01, #2
13824     04 00 66 F0 | 	shl	_var01, #4
13828     00 03 02 F1 | 	add	_var02, _var01
1382c     90 E5 05 F1 | 	add	objptr, #400
13830     F2 02 62 FC | 	wrlong	_var02, objptr
13834     E9 E5 85 F1 | 	sub	objptr, #489
13838                 | ' displaylist[1]:=buf_ptr<<4+%10  
13838     F2 02 02 FB | 	rdlong	_var02, objptr
1383c     04 02 66 F0 | 	shl	_var02, #4
13840     02 02 06 F1 | 	add	_var02, #2
13844     ED E5 05 F1 | 	add	objptr, #493
13848     F2 02 62 FC | 	wrlong	_var02, objptr
1384c                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
1384c     04 E4 85 F1 | 	sub	objptr, #4
13850     F2 02 02 F6 | 	mov	_var02, objptr
13854     CD E5 85 F1 | 	sub	objptr, #461
13858     F2 02 62 FC | 	wrlong	_var02, objptr
1385c     1C E4 85 F1 | 	sub	objptr, #28
13860                 | _hg010b_spin2_makedl_ret
13860     2D 00 64 FD | 	ret
13864                 | 
13864                 | ' 
13864                 | ' 
13864                 | ' '****************************************************************************************************************
13864                 | ' '                                                                        					*
13864                 | ' '  Graphic primitives                                                    					*
13864                 | ' '                                                                        					*
13864                 | ' '****************************************************************************************************************
13864                 | ' 
13864                 | ' pub setspriteptr(num,ptr)
13864                 | _hg010b_spin2_setspriteptr
13864                 | ' long[@spr1ptr+12*num]:=ptr
13864     0D E5 05 F1 | 	add	objptr, #269
13868     F2 00 02 F6 | 	mov	_var01, objptr
1386c     09 03 02 F6 | 	mov	_var02, arg01
13870     01 02 66 F0 | 	shl	_var02, #1
13874     09 03 02 F1 | 	add	_var02, arg01
13878     02 02 66 F0 | 	shl	_var02, #2
1387c     01 01 02 F1 | 	add	_var01, _var02
13880     00 15 62 FC | 	wrlong	arg02, _var01
13884     0D E5 85 F1 | 	sub	objptr, #269
13888                 | _hg010b_spin2_setspriteptr_ret
13888     2D 00 64 FD | 	ret
1388c                 | 
1388c                 | ' 
1388c                 | ' pub setspritepos(num,x,y)
1388c                 | _hg010b_spin2_setspritepos
1388c                 | ' word[@spr1ptr+12*num+4]:=x
1388c     0D E5 05 F1 | 	add	objptr, #269
13890     F2 00 02 F6 | 	mov	_var01, objptr
13894     09 03 02 F6 | 	mov	_var02, arg01
13898     01 02 66 F0 | 	shl	_var02, #1
1389c     09 03 02 F1 | 	add	_var02, arg01
138a0     02 02 66 F0 | 	shl	_var02, #2
138a4     01 01 02 F1 | 	add	_var01, _var02
138a8     04 00 06 F1 | 	add	_var01, #4
138ac     00 15 52 FC | 	wrword	arg02, _var01
138b0                 | ' word[@spr1ptr+12*num+6]:=y
138b0     F2 00 02 F6 | 	mov	_var01, objptr
138b4     09 03 02 F6 | 	mov	_var02, arg01
138b8     01 02 66 F0 | 	shl	_var02, #1
138bc     09 03 02 F1 | 	add	_var02, arg01
138c0     02 02 66 F0 | 	shl	_var02, #2
138c4     01 01 02 F1 | 	add	_var01, _var02
138c8     06 00 06 F1 | 	add	_var01, #6
138cc     00 17 52 FC | 	wrword	arg03, _var01
138d0     0D E5 85 F1 | 	sub	objptr, #269
138d4                 | _hg010b_spin2_setspritepos_ret
138d4     2D 00 64 FD | 	ret
138d8                 | 
138d8                 | ' 
138d8                 | ' pub setspritesize(num,w,h)
138d8                 | _hg010b_spin2_setspritesize
138d8                 | ' word[@spr1ptr+12*num+8]:=w
138d8     0D E5 05 F1 | 	add	objptr, #269
138dc     F2 00 02 F6 | 	mov	_var01, objptr
138e0     09 03 02 F6 | 	mov	_var02, arg01
138e4     01 02 66 F0 | 	shl	_var02, #1
138e8     09 03 02 F1 | 	add	_var02, arg01
138ec     02 02 66 F0 | 	shl	_var02, #2
138f0     01 01 02 F1 | 	add	_var01, _var02
138f4     08 00 06 F1 | 	add	_var01, #8
138f8     00 15 52 FC | 	wrword	arg02, _var01
138fc                 | ' word[@spr1ptr+12*num+10]:=h
138fc     F2 00 02 F6 | 	mov	_var01, objptr
13900     09 03 02 F6 | 	mov	_var02, arg01
13904     01 02 66 F0 | 	shl	_var02, #1
13908     09 03 02 F1 | 	add	_var02, arg01
1390c     02 02 66 F0 | 	shl	_var02, #2
13910     01 01 02 F1 | 	add	_var01, _var02
13914     0A 00 06 F1 | 	add	_var01, #10
13918     00 17 52 FC | 	wrword	arg03, _var01
1391c     0D E5 85 F1 | 	sub	objptr, #269
13920                 | _hg010b_spin2_setspritesize_ret
13920     2D 00 64 FD | 	ret
13924                 | 
13924                 | ' 
13924                 | ' 
13924                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
13924                 | ' 
13924                 | ' 
13924                 | ' pub putpixel(x,y,c)
13924                 | _hg010b_spin2_putpixel
13924     04 4A 05 F6 | 	mov	COUNT_, #4
13928     A8 00 A0 FD | 	call	#pushregs_
1392c     09 1F 02 F6 | 	mov	local01, arg01
13930                 | ' 
13930                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
13930     00 20 06 F6 | 	mov	local02, #0
13934     00 1E 56 F2 | 	cmps	local01, #0 wc
13938     01 20 66 36 |  if_ae	neg	local02, #1
1393c     E5 E4 05 F1 | 	add	objptr, #229
13940     F2 1A 02 FB | 	rdlong	arg05, objptr
13944     02 1A 66 F0 | 	shl	arg05, #2
13948     0D 1F 52 F2 | 	cmps	local01, arg05 wc
1394c     11 23 A2 F1 | 	subx	local03, local03
13950     11 21 02 F5 | 	and	local02, local03
13954     00 22 06 F6 | 	mov	local03, #0
13958     00 14 56 F2 | 	cmps	arg02, #0 wc
1395c     01 22 66 36 |  if_ae	neg	local03, #1
13960     11 21 02 F5 | 	and	local02, local03
13964     04 E4 85 F1 | 	sub	objptr, #4
13968     F2 22 02 FB | 	rdlong	local03, objptr
1396c     E1 E4 85 F1 | 	sub	objptr, #225
13970     11 15 52 F2 | 	cmps	arg02, local03 wc
13974     12 25 A2 F1 | 	subx	local04, local04
13978     12 21 CA F7 | 	test	local02, local04 wz
1397c     48 00 90 AD |  if_e	jmp	#LR__1580
13980     D9 E4 05 F1 | 	add	objptr, #217
13984     F2 12 02 FB | 	rdlong	arg01, objptr
13988     14 E4 05 F1 | 	add	objptr, #20
1398c     F2 24 02 FB | 	rdlong	local04, objptr
13990     02 24 66 F0 | 	shl	local04, #2
13994     0A 25 02 FD | 	qmul	local04, arg02
13998                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
13998     0B 15 02 F6 | 	mov	arg02, arg03
1399c     01 16 06 F6 | 	mov	arg03, #1
139a0     00 18 06 F6 | 	mov	arg04, #0
139a4     01 1A 06 F6 | 	mov	arg05, #1
139a8     0A 00 00 FF 
139ac     D3 E5 05 F1 | 	add	objptr, ##5587
139b0     18 24 62 FD | 	getqx	local04
139b4     0F 25 02 F1 | 	add	local04, local01
139b8     12 13 02 F1 | 	add	arg01, local04
139bc     FC 14 B0 FD | 	call	#_psram_spin2_fill
139c0     0B 00 00 FF 
139c4     C0 E4 85 F1 | 	sub	objptr, ##5824
139c8                 | LR__1580
139c8     A7 F0 03 F6 | 	mov	ptra, fp
139cc     B2 00 A0 FD | 	call	#popregs_
139d0                 | _hg010b_spin2_putpixel_ret
139d0     2D 00 64 FD | 	ret
139d4                 | 
139d4                 | ' 
139d4                 | ' pub putpixel2(x,y,c)
139d4                 | _hg010b_spin2_putpixel2
139d4     02 4A 05 F6 | 	mov	COUNT_, #2
139d8     A8 00 A0 FD | 	call	#pushregs_
139dc     D9 E4 05 F1 | 	add	objptr, #217
139e0     F2 1E 02 FB | 	rdlong	local01, objptr
139e4     14 E4 05 F1 | 	add	objptr, #20
139e8     F2 1A 02 FB | 	rdlong	arg05, objptr
139ec     02 1A 66 F0 | 	shl	arg05, #2
139f0     0A 1B 02 FD | 	qmul	arg05, arg02
139f4                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
139f4     0B 15 02 F6 | 	mov	arg02, arg03
139f8     01 16 06 F6 | 	mov	arg03, #1
139fc     00 18 06 F6 | 	mov	arg04, #0
13a00     01 1A 06 F6 | 	mov	arg05, #1
13a04     0A 00 00 FF 
13a08     D3 E5 05 F1 | 	add	objptr, ##5587
13a0c     18 20 62 FD | 	getqx	local02
13a10     09 21 02 F1 | 	add	local02, arg01
13a14     10 1F 02 F1 | 	add	local01, local02
13a18     0F 13 02 F6 | 	mov	arg01, local01
13a1c     9C 14 B0 FD | 	call	#_psram_spin2_fill
13a20     0B 00 00 FF 
13a24     C0 E4 85 F1 | 	sub	objptr, ##5824
13a28     A7 F0 03 F6 | 	mov	ptra, fp
13a2c     B2 00 A0 FD | 	call	#popregs_
13a30                 | _hg010b_spin2_putpixel2_ret
13a30     2D 00 64 FD | 	ret
13a34                 | 
13a34                 | ' 
13a34                 | ' pub getpixel2(x,y): c 
13a34                 | _hg010b_spin2_getpixel2
13a34     02 4A 05 F6 | 	mov	COUNT_, #2
13a38     A8 00 A0 FD | 	call	#pushregs_
13a3c     0C F0 07 F1 | 	add	ptra, #12
13a40     04 4E 05 F1 | 	add	fp, #4
13a44     A7 12 62 FC | 	wrlong	arg01, fp
13a48     04 4E 05 F1 | 	add	fp, #4
13a4c     A7 14 62 FC | 	wrlong	arg02, fp
13a50     08 4E 85 F1 | 	sub	fp, #8
13a54     A7 00 68 FC | 	wrlong	#0, fp
13a58     A7 12 02 F6 | 	mov	arg01, fp
13a5c     D9 E4 05 F1 | 	add	objptr, #217
13a60     F2 14 02 FB | 	rdlong	arg02, objptr
13a64     14 E4 05 F1 | 	add	objptr, #20
13a68     F2 16 02 FB | 	rdlong	arg03, objptr
13a6c     02 16 66 F0 | 	shl	arg03, #2
13a70     08 4E 05 F1 | 	add	fp, #8
13a74     A7 FA 01 FB | 	rdlong	result1, fp
13a78     FD 16 02 FD | 	qmul	arg03, result1
13a7c                 | ' 
13a7c                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
13a7c     04 4E 85 F1 | 	sub	fp, #4
13a80     A7 1E 02 FB | 	rdlong	local01, fp
13a84     04 4E 85 F1 | 	sub	fp, #4
13a88     01 16 06 F6 | 	mov	arg03, #1
13a8c     0A 00 00 FF 
13a90     D3 E5 05 F1 | 	add	objptr, ##5587
13a94     18 20 62 FD | 	getqx	local02
13a98     0F 21 02 F1 | 	add	local02, local01
13a9c     10 15 02 F1 | 	add	arg02, local02
13aa0     E0 12 B0 FD | 	call	#_psram_spin2_read1
13aa4     0B 00 00 FF 
13aa8     C0 E4 85 F1 | 	sub	objptr, ##5824
13aac                 | ' return c
13aac     A7 FA 01 FB | 	rdlong	result1, fp
13ab0     A7 F0 03 F6 | 	mov	ptra, fp
13ab4     B2 00 A0 FD | 	call	#popregs_
13ab8                 | _hg010b_spin2_getpixel2_ret
13ab8     2D 00 64 FD | 	ret
13abc                 | 
13abc                 | '   
13abc                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
13abc                 | ' 
13abc                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
13abc                 | _hg010b_spin2_fastline
13abc     02 4A 05 F6 | 	mov	COUNT_, #2
13ac0     A8 00 A0 FD | 	call	#pushregs_
13ac4     09 1F 02 F6 | 	mov	local01, arg01
13ac8     0A 21 02 F6 | 	mov	local02, arg02
13acc                 | ' 
13acc                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
13acc     00 16 56 F2 | 	cmps	arg03, #0 wc
13ad0     F4 00 90 CD |  if_b	jmp	#LR__1590
13ad4     01 00 00 FF 
13ad8     26 E4 05 F1 | 	add	objptr, ##550
13adc     F2 1A 02 FB | 	rdlong	arg05, objptr
13ae0     01 00 00 FF 
13ae4     26 E4 85 F1 | 	sub	objptr, ##550
13ae8     0D 17 52 F2 | 	cmps	arg03, arg05 wc
13aec     D8 00 90 3D |  if_ae	jmp	#LR__1590
13af0     00 1E 56 F2 | 	cmps	local01, #0 wc
13af4     00 20 56 C2 |  if_b	cmps	local02, #0 wc
13af8     CC 00 90 CD |  if_b	jmp	#LR__1590
13afc     01 00 00 FF 
13b00     22 E4 05 F1 | 	add	objptr, ##546
13b04     F2 1A 02 FB | 	rdlong	arg05, objptr
13b08     01 00 00 FF 
13b0c     22 E4 85 F1 | 	sub	objptr, ##546
13b10     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
13b14     01 00 00 1F 
13b18     22 E4 05 11 |  if_a	add	objptr, ##546
13b1c     F2 12 02 1B |  if_a	rdlong	arg01, objptr
13b20     01 00 00 1F 
13b24     22 E4 85 11 |  if_a	sub	objptr, ##546
13b28     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
13b2c                 | '   return
13b2c     98 00 90 1D |  if_a	jmp	#LR__1590
13b30     10 1F 5A F2 | 	cmps	local01, local02 wcz
13b34     0F 1B 02 16 |  if_a	mov	arg05, local01
13b38     10 1F 02 16 |  if_a	mov	local01, local02
13b3c     0D 21 02 16 |  if_a	mov	local02, arg05
13b40     00 1E 56 F2 | 	cmps	local01, #0 wc
13b44     00 1E 06 C6 |  if_b	mov	local01, #0
13b48     01 00 00 FF 
13b4c     22 E4 05 F1 | 	add	objptr, ##546
13b50     F2 1A 02 FB | 	rdlong	arg05, objptr
13b54     01 00 00 FF 
13b58     22 E4 85 F1 | 	sub	objptr, ##546
13b5c     0D 21 52 F2 | 	cmps	local02, arg05 wc
13b60     01 00 00 3F 
13b64     22 E4 05 31 |  if_ae	add	objptr, ##546
13b68     F2 20 02 3B |  if_ae	rdlong	local02, objptr
13b6c     01 00 00 3F 
13b70     22 E4 85 31 |  if_ae	sub	objptr, ##546
13b74     D9 E4 05 F1 | 	add	objptr, #217
13b78     F2 12 02 FB | 	rdlong	arg01, objptr
13b7c     14 E4 05 F1 | 	add	objptr, #20
13b80     F2 1A 02 FB | 	rdlong	arg05, objptr
13b84     02 1A 66 F0 | 	shl	arg05, #2
13b88     0B 1B 02 FD | 	qmul	arg05, arg03
13b8c                 | ' if x1>x2
13b8c                 | '   x1,x2:=x2,x1
13b8c                 | ' if x1<0 
13b8c                 | '   x1:=0
13b8c                 | ' if x2>=xres
13b8c                 | '   x2:=xres-1  
13b8c     01 20 86 31 |  if_ae	sub	local02, #1
13b90                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
13b90     01 16 06 F6 | 	mov	arg03, #1
13b94     10 17 02 F1 | 	add	arg03, local02
13b98     0F 17 82 F1 | 	sub	arg03, local01
13b9c     0C 15 02 F6 | 	mov	arg02, arg04
13ba0     00 18 06 F6 | 	mov	arg04, #0
13ba4     01 1A 06 F6 | 	mov	arg05, #1
13ba8     0A 00 00 FF 
13bac     D3 E5 05 F1 | 	add	objptr, ##5587
13bb0     18 20 62 FD | 	getqx	local02
13bb4     0F 21 02 F1 | 	add	local02, local01
13bb8     10 13 02 F1 | 	add	arg01, local02
13bbc     FC 12 B0 FD | 	call	#_psram_spin2_fill
13bc0     0B 00 00 FF 
13bc4     C0 E4 85 F1 | 	sub	objptr, ##5824
13bc8                 | LR__1590
13bc8     A7 F0 03 F6 | 	mov	ptra, fp
13bcc     B2 00 A0 FD | 	call	#popregs_
13bd0                 | _hg010b_spin2_fastline_ret
13bd0     2D 00 64 FD | 	ret
13bd4                 | 
13bd4                 | ' 
13bd4                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
13bd4                 | _hg010b_spin2_draw
13bd4     0E 4A 05 F6 | 	mov	COUNT_, #14
13bd8     A8 00 A0 FD | 	call	#pushregs_
13bdc     09 1F 02 F6 | 	mov	local01, arg01
13be0     0A 21 02 F6 | 	mov	local02, arg02
13be4     0B 23 02 F6 | 	mov	local03, arg03
13be8     0C 25 02 F6 | 	mov	local04, arg04
13bec     0D 27 02 F6 | 	mov	local05, arg05
13bf0                 | ' 
13bf0                 | ' if (y1==y2)
13bf0     12 21 0A F2 | 	cmp	local02, local04 wz
13bf4     18 00 90 5D |  if_ne	jmp	#LR__1600
13bf8                 | '   fastline(x1,x2,y1,c)
13bf8     0F 13 02 F6 | 	mov	arg01, local01
13bfc     11 15 02 F6 | 	mov	arg02, local03
13c00     10 17 02 F6 | 	mov	arg03, local02
13c04     13 19 02 F6 | 	mov	arg04, local05
13c08     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
13c0c     F8 00 90 FD | 	jmp	#LR__1606
13c10                 | LR__1600
13c10                 | ' else  
13c10                 | '   x:=x1
13c10     0F 29 02 F6 | 	mov	local06, local01
13c14                 | '   y:=y1
13c14     10 2B 02 F6 | 	mov	local07, local02
13c18                 | ' 
13c18                 | '   if (x1<x2) 
13c18     11 1F 52 F2 | 	cmps	local01, local03 wc
13c1c                 | '     xi:=1
13c1c     01 2C 06 C6 |  if_b	mov	local08, #1
13c20                 | '     dx:=x2-x1
13c20     11 2F 02 C6 |  if_b	mov	local09, local03
13c24     0F 2F 82 C1 |  if_b	sub	local09, local01
13c28                 | '   else
13c28                 | '     xi:=-1
13c28     01 2C 66 36 |  if_ae	neg	local08, #1
13c2c                 | '     dx:=x1-x2
13c2c     11 1F 82 31 |  if_ae	sub	local01, local03
13c30     0F 2F 02 36 |  if_ae	mov	local09, local01
13c34                 | '   
13c34                 | '   if (y1<y2) 
13c34     12 21 52 F2 | 	cmps	local02, local04 wc
13c38                 | '     yi:=1
13c38     01 30 06 C6 |  if_b	mov	local10, #1
13c3c                 | '     dy:=y2-y1
13c3c     12 33 02 C6 |  if_b	mov	local11, local04
13c40     10 33 82 C1 |  if_b	sub	local11, local02
13c44                 | '   else
13c44                 | '     yi:=-1
13c44     01 30 66 36 |  if_ae	neg	local10, #1
13c48                 | '     dy:=y1-y2
13c48     12 21 82 31 |  if_ae	sub	local02, local04
13c4c     10 33 02 36 |  if_ae	mov	local11, local02
13c50                 | ' 
13c50                 | '   putpixel(x,y,c)
13c50     13 17 02 F6 | 	mov	arg03, local05
13c54     14 13 02 F6 | 	mov	arg01, local06
13c58     15 15 02 F6 | 	mov	arg02, local07
13c5c     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
13c60                 | ' 
13c60                 | '   if (dx>dy)
13c60     19 2F 5A F2 | 	cmps	local09, local11 wcz
13c64     50 00 90 ED |  if_be	jmp	#LR__1602
13c68                 | '     ai:=(dy-dx)*2
13c68     19 35 02 F6 | 	mov	local12, local11
13c6c     17 35 82 F1 | 	sub	local12, local09
13c70     01 34 66 F0 | 	shl	local12, #1
13c74                 | '     bi:=dy*2
13c74     01 32 66 F0 | 	shl	local11, #1
13c78     19 37 02 F6 | 	mov	local13, local11
13c7c                 | '     d:= bi-dx
13c7c     1B 39 02 F6 | 	mov	local14, local13
13c80     17 39 82 F1 | 	sub	local14, local09
13c84                 | '     repeat while (x<>x2) 
13c84                 | LR__1601
13c84     11 29 0A F2 | 	cmp	local06, local03 wz
13c88     7C 00 90 AD |  if_e	jmp	#LR__1605
13c8c                 | '       if (d>=0) 
13c8c     00 38 56 F2 | 	cmps	local14, #0 wc
13c90                 | '         x+=xi
13c90     16 29 02 31 |  if_ae	add	local06, local08
13c94                 | '         y+=yi
13c94     18 2B 02 31 |  if_ae	add	local07, local10
13c98                 | '         d+=ai
13c98     1A 39 02 31 |  if_ae	add	local14, local12
13c9c                 | '       else
13c9c                 | '         d+=bi
13c9c     1B 39 02 C1 |  if_b	add	local14, local13
13ca0                 | '         x+=xi
13ca0     16 29 02 C1 |  if_b	add	local06, local08
13ca4                 | '       putpixel(x,y,c)
13ca4     14 13 02 F6 | 	mov	arg01, local06
13ca8     15 15 02 F6 | 	mov	arg02, local07
13cac     13 17 02 F6 | 	mov	arg03, local05
13cb0     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
13cb4     CC FF 9F FD | 	jmp	#LR__1601
13cb8                 | LR__1602
13cb8                 | '   else
13cb8                 | '     ai:=(dx-dy)*2
13cb8     17 35 02 F6 | 	mov	local12, local09
13cbc     19 35 82 F1 | 	sub	local12, local11
13cc0     01 34 66 F0 | 	shl	local12, #1
13cc4                 | '     bi:=dx*2
13cc4     01 2E 66 F0 | 	shl	local09, #1
13cc8     17 37 02 F6 | 	mov	local13, local09
13ccc                 | '     d:=bi-dy
13ccc     1B 39 02 F6 | 	mov	local14, local13
13cd0     19 39 82 F1 | 	sub	local14, local11
13cd4                 | '     repeat while (y<>y2)
13cd4                 | LR__1603
13cd4     12 2B 0A F2 | 	cmp	local07, local04 wz
13cd8     2C 00 90 AD |  if_e	jmp	#LR__1604
13cdc                 | '       if (d>=0)
13cdc     00 38 56 F2 | 	cmps	local14, #0 wc
13ce0                 | '         x+=xi
13ce0     16 29 02 31 |  if_ae	add	local06, local08
13ce4                 | '         y+=yi
13ce4     18 2B 02 31 |  if_ae	add	local07, local10
13ce8                 | '         d+=ai
13ce8     1A 39 02 31 |  if_ae	add	local14, local12
13cec                 | '       else
13cec                 | '         d+=bi
13cec     1B 39 02 C1 |  if_b	add	local14, local13
13cf0                 | '         y+=yi
13cf0     18 2B 02 C1 |  if_b	add	local07, local10
13cf4                 | '       putpixel(x, y,c)
13cf4     14 13 02 F6 | 	mov	arg01, local06
13cf8     15 15 02 F6 | 	mov	arg02, local07
13cfc     13 17 02 F6 | 	mov	arg03, local05
13d00     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
13d04     CC FF 9F FD | 	jmp	#LR__1603
13d08                 | LR__1604
13d08                 | LR__1605
13d08                 | LR__1606
13d08     A7 F0 03 F6 | 	mov	ptra, fp
13d0c     B2 00 A0 FD | 	call	#popregs_
13d10                 | _hg010b_spin2_draw_ret
13d10     2D 00 64 FD | 	ret
13d14                 | 
13d14                 | '  
13d14                 | ' pub fillpush(val) 
13d14                 | _hg010b_spin2_fillpush
13d14                 | ' fillstack[fillptr]:=val
13d14     0B 00 00 FF 
13d18     B6 E4 05 F1 | 	add	objptr, ##5814
13d1c     F2 00 02 FB | 	rdlong	_var01, objptr
13d20     02 00 66 F0 | 	shl	_var01, #2
13d24     0A 00 00 FF 
13d28     00 E4 85 F1 | 	sub	objptr, ##5120
13d2c     F2 00 02 F1 | 	add	_var01, objptr
13d30     00 13 62 FC | 	wrlong	arg01, _var01
13d34                 | ' fillptr+=1   
13d34     0A 00 00 FF 
13d38     00 E4 05 F1 | 	add	objptr, ##5120
13d3c     F2 00 02 FB | 	rdlong	_var01, objptr
13d40     01 00 06 F1 | 	add	_var01, #1
13d44     F2 00 62 FC | 	wrlong	_var01, objptr
13d48     0B 00 00 FF 
13d4c     B6 E4 85 F1 | 	sub	objptr, ##5814
13d50                 | _hg010b_spin2_fillpush_ret
13d50     2D 00 64 FD | 	ret
13d54                 | 
13d54                 | ' 
13d54                 | '     
13d54                 | ' pub fillpop() : val
13d54                 | _hg010b_spin2_fillpop
13d54                 | ' 
13d54                 | ' fillptr-=1
13d54     0B 00 00 FF 
13d58     B6 E4 05 F1 | 	add	objptr, ##5814
13d5c     F2 FA 01 FB | 	rdlong	result1, objptr
13d60     01 FA 85 F1 | 	sub	result1, #1
13d64     F2 FA 61 FC | 	wrlong	result1, objptr
13d68                 | ' if fillptr<0
13d68     0B 00 00 FF 
13d6c     B6 E4 85 F1 | 	sub	objptr, ##5814
13d70     00 FA 55 F2 | 	cmps	result1, #0 wc
13d74                 | '   fillptr:=0
13d74     0B 00 00 CF 
13d78     B6 E4 05 C1 |  if_b	add	objptr, ##5814
13d7c     F2 00 68 CC |  if_b	wrlong	#0, objptr
13d80     0B 00 00 CF 
13d84     B6 E4 85 C1 |  if_b	sub	objptr, ##5814
13d88                 | '   val:=-12345
13d88     E7 FF 7F CF 
13d8c     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
13d90     28 00 90 CD |  if_b	jmp	#LR__1610
13d94                 | ' else 
13d94                 | '   val:=fillstack[fillptr]
13d94     0B 00 00 FF 
13d98     B6 E4 05 F1 | 	add	objptr, ##5814
13d9c     F2 00 02 FB | 	rdlong	_var01, objptr
13da0     02 00 66 F0 | 	shl	_var01, #2
13da4     0A 00 00 FF 
13da8     00 E4 85 F1 | 	sub	objptr, ##5120
13dac     F2 00 02 F1 | 	add	_var01, objptr
13db0     00 01 02 FB | 	rdlong	_var01, _var01
13db4     01 00 00 FF 
13db8     B6 E4 85 F1 | 	sub	objptr, ##694
13dbc                 | LR__1610
13dbc                 | ' return val
13dbc     00 FB 01 F6 | 	mov	result1, _var01
13dc0                 | _hg010b_spin2_fillpop_ret
13dc0     2D 00 64 FD | 	ret
13dc4                 | 
13dc4                 | ' 
13dc4                 | '       
13dc4                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
13dc4                 | _hg010b_spin2_fill
13dc4     0B 4A 05 F6 | 	mov	COUNT_, #11
13dc8     A8 00 A0 FD | 	call	#pushregs_
13dcc                 | ' 
13dcc                 | ' newcolor:=newcolor & 255
13dcc     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
13dd0                 | ' oldcolor:=oldcolor & 255
13dd0     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
13dd4                 | ' 
13dd4                 | ' if (oldcolor == newcolor) 
13dd4     0F 21 0A F2 | 	cmp	local02, local01 wz
13dd8                 | '   return
13dd8     70 02 90 AD |  if_e	jmp	#LR__1629
13ddc                 | ' 
13ddc                 | ' fillptr:=0
13ddc     0B 00 00 FF 
13de0     B6 E4 05 F1 | 	add	objptr, ##5814
13de4     F2 00 68 FC | 	wrlong	#0, objptr
13de8                 | ' fillmax:=0
13de8     04 E4 05 F1 | 	add	objptr, #4
13dec     F2 00 68 FC | 	wrlong	#0, objptr
13df0     0B 00 00 FF 
13df4     BA E4 85 F1 | 	sub	objptr, ##5818
13df8                 | ' fillpush(x)
13df8     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
13dfc                 | ' fillpush(y)
13dfc     0A 13 02 F6 | 	mov	arg01, arg02
13e00     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
13e04                 | ' y:=fillpop()
13e04     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
13e08     FD 22 02 F6 | 	mov	local03, result1
13e0c                 | ' x:=fillpop()
13e0c     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
13e10     FD 24 02 F6 | 	mov	local04, result1
13e14                 | ' 'pinhigh(38)
13e14                 | ' repeat while (x>-1)       
13e14                 | LR__1620
13e14     00 24 56 F2 | 	cmps	local04, #0 wc
13e18     30 02 90 CD |  if_b	jmp	#LR__1628
13e1c                 | '  ' pintoggle(39)
13e1c                 | '   x1 := x
13e1c     12 27 02 F6 | 	mov	local05, local04
13e20                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
13e20                 | LR__1621
13e20     00 28 06 F6 | 	mov	local06, #0
13e24     00 2A 06 F6 | 	mov	local07, #0
13e28     00 26 56 F2 | 	cmps	local05, #0 wc
13e2c     01 2A 66 36 |  if_ae	neg	local07, #1
13e30     00 2A 0E F2 | 	cmp	local07, #0 wz
13e34     00 28 26 56 |  if_ne	not	local06, #0
13e38     00 2C 06 F6 | 	mov	local08, #0
13e3c     00 2E 06 F6 | 	mov	local09, #0
13e40     11 15 02 F6 | 	mov	arg02, local03
13e44     13 13 02 F6 | 	mov	arg01, local05
13e48     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
13e4c     10 FB 09 F2 | 	cmp	result1, local02 wz
13e50     00 2E 26 A6 |  if_e	not	local09, #0
13e54     00 2E 0E F2 | 	cmp	local09, #0 wz
13e58     00 2C 26 56 |  if_ne	not	local08, #0
13e5c     16 29 CA F7 | 	test	local06, local08 wz
13e60                 | '     x1--
13e60     01 26 86 51 |  if_ne	sub	local05, #1
13e64     B8 FF 9F 5D |  if_ne	jmp	#LR__1621
13e68                 | '   x1++
13e68     01 26 06 F1 | 	add	local05, #1
13e6c                 | '   spanabove := 0
13e6c     00 30 06 F6 | 	mov	local10, #0
13e70                 | '   spanbelow := 0
13e70     00 32 06 F6 | 	mov	local11, #0
13e74                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
13e74                 | LR__1622
13e74     00 28 06 F6 | 	mov	local06, #0
13e78     02 00 00 FF 
13e7c     00 26 56 F2 | 	cmps	local05, ##1024 wc
13e80     00 28 26 C6 |  if_b	not	local06, #0
13e84     00 2C 06 F6 | 	mov	local08, #0
13e88     00 2E 06 F6 | 	mov	local09, #0
13e8c     11 15 02 F6 | 	mov	arg02, local03
13e90     13 13 02 F6 | 	mov	arg01, local05
13e94     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
13e98     10 FB 09 F2 | 	cmp	result1, local02 wz
13e9c     00 2E 26 A6 |  if_e	not	local09, #0
13ea0     00 2E 0E F2 | 	cmp	local09, #0 wz
13ea4     00 2C 26 56 |  if_ne	not	local08, #0
13ea8     16 29 CA F7 | 	test	local06, local08 wz
13eac     88 01 90 AD |  if_e	jmp	#LR__1627
13eb0                 | '     putpixel2 (x1,y, newcolor & 255)
13eb0     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
13eb4     13 13 02 F6 | 	mov	arg01, local05
13eb8     11 15 02 F6 | 	mov	arg02, local03
13ebc     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
13ec0                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
13ec0     00 28 06 F6 | 	mov	local06, #0
13ec4     00 2A 06 F6 | 	mov	local07, #0
13ec8     00 30 0E F2 | 	cmp	local10, #0 wz
13ecc     01 22 56 A2 |  if_e	cmps	local03, #1 wc
13ed0     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
13ed4     00 2A 0E F2 | 	cmp	local07, #0 wz
13ed8     00 28 26 56 |  if_ne	not	local06, #0
13edc     00 2C 06 F6 | 	mov	local08, #0
13ee0     00 2E 06 F6 | 	mov	local09, #0
13ee4     11 15 02 F6 | 	mov	arg02, local03
13ee8     01 14 86 F1 | 	sub	arg02, #1
13eec     13 13 02 F6 | 	mov	arg01, local05
13ef0     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
13ef4     10 FB 09 F2 | 	cmp	result1, local02 wz
13ef8     00 2E 26 A6 |  if_e	not	local09, #0
13efc     00 2E 0E F2 | 	cmp	local09, #0 wz
13f00     00 2C 26 56 |  if_ne	not	local08, #0
13f04     16 29 CA F7 | 	test	local06, local08 wz
13f08     1C 00 90 AD |  if_e	jmp	#LR__1623
13f0c                 | '       fillpush(x1)
13f0c     13 13 02 F6 | 	mov	arg01, local05
13f10     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
13f14                 | '       fillpush(y-1)
13f14     11 13 02 F6 | 	mov	arg01, local03
13f18     01 12 86 F1 | 	sub	arg01, #1
13f1c     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
13f20                 | '       spanabove := 1 
13f20     01 30 06 F6 | 	mov	local10, #1
13f24     4C 00 90 FD | 	jmp	#LR__1624
13f28                 | LR__1623
13f28                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
13f28     00 28 06 F6 | 	mov	local06, #0
13f2c     00 2A 06 F6 | 	mov	local07, #0
13f30     00 30 0E F2 | 	cmp	local10, #0 wz
13f34     01 22 56 52 |  if_ne	cmps	local03, #1 wc
13f38     01 2A 66 16 |  if_a	neg	local07, #1
13f3c     00 2A 0E F2 | 	cmp	local07, #0 wz
13f40     00 28 26 56 |  if_ne	not	local06, #0
13f44     00 2C 06 F6 | 	mov	local08, #0
13f48     00 2E 06 F6 | 	mov	local09, #0
13f4c     11 15 02 F6 | 	mov	arg02, local03
13f50     01 14 86 F1 | 	sub	arg02, #1
13f54     13 13 02 F6 | 	mov	arg01, local05
13f58     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
13f5c     10 FB 09 F2 | 	cmp	result1, local02 wz
13f60     00 2E 26 56 |  if_ne	not	local09, #0
13f64     00 2E 0E F2 | 	cmp	local09, #0 wz
13f68     00 2C 26 56 |  if_ne	not	local08, #0
13f6c     16 29 CA F7 | 	test	local06, local08 wz
13f70                 | '       spanabove := 0 
13f70     00 30 06 56 |  if_ne	mov	local10, #0
13f74                 | LR__1624
13f74                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
13f74     00 28 06 F6 | 	mov	local06, #0
13f78     00 2A 06 F6 | 	mov	local07, #0
13f7c     00 32 0E F2 | 	cmp	local11, #0 wz
13f80     01 00 00 AF 
13f84     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
13f88     01 2A 66 86 |  if_c_and_z	neg	local07, #1
13f8c     00 2A 0E F2 | 	cmp	local07, #0 wz
13f90     00 28 26 56 |  if_ne	not	local06, #0
13f94     00 2C 06 F6 | 	mov	local08, #0
13f98     00 2E 06 F6 | 	mov	local09, #0
13f9c     11 15 02 F6 | 	mov	arg02, local03
13fa0     01 14 06 F1 | 	add	arg02, #1
13fa4     13 13 02 F6 | 	mov	arg01, local05
13fa8     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
13fac     10 FB 09 F2 | 	cmp	result1, local02 wz
13fb0     00 2E 26 A6 |  if_e	not	local09, #0
13fb4     00 2E 0E F2 | 	cmp	local09, #0 wz
13fb8     00 2C 26 56 |  if_ne	not	local08, #0
13fbc     16 29 CA F7 | 	test	local06, local08 wz
13fc0     1C 00 90 AD |  if_e	jmp	#LR__1625
13fc4                 | '       fillpush(x1)
13fc4     13 13 02 F6 | 	mov	arg01, local05
13fc8     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
13fcc                 | '       fillpush(y + 1)
13fcc     11 13 02 F6 | 	mov	arg01, local03
13fd0     01 12 06 F1 | 	add	arg01, #1
13fd4     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
13fd8                 | '       spanBelow := 1
13fd8     01 32 06 F6 | 	mov	local11, #1
13fdc     50 00 90 FD | 	jmp	#LR__1626
13fe0                 | LR__1625
13fe0                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
13fe0     00 28 06 F6 | 	mov	local06, #0
13fe4     00 2A 06 F6 | 	mov	local07, #0
13fe8     00 32 0E F2 | 	cmp	local11, #0 wz
13fec     01 00 00 5F 
13ff0     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
13ff4     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
13ff8     00 2A 0E F2 | 	cmp	local07, #0 wz
13ffc     00 28 26 56 |  if_ne	not	local06, #0
14000     00 2C 06 F6 | 	mov	local08, #0
14004     00 2E 06 F6 | 	mov	local09, #0
14008     11 15 02 F6 | 	mov	arg02, local03
1400c     01 14 06 F1 | 	add	arg02, #1
14010     13 13 02 F6 | 	mov	arg01, local05
14014     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
14018     10 FB 09 F2 | 	cmp	result1, local02 wz
1401c     00 2E 26 56 |  if_ne	not	local09, #0
14020     00 2E 0E F2 | 	cmp	local09, #0 wz
14024     00 2C 26 56 |  if_ne	not	local08, #0
14028     16 29 CA F7 | 	test	local06, local08 wz
1402c                 | '       spanbelow := 0
1402c     00 32 06 56 |  if_ne	mov	local11, #0
14030                 | LR__1626
14030                 | '     x1++
14030     01 26 06 F1 | 	add	local05, #1
14034     3C FE 9F FD | 	jmp	#LR__1622
14038                 | LR__1627
14038                 | '   y:=fillpop()
14038     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
1403c     FD 22 02 F6 | 	mov	local03, result1
14040                 | '   x:=fillpop()
14040     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
14044     FD 24 02 F6 | 	mov	local04, result1
14048     C8 FD 9F FD | 	jmp	#LR__1620
1404c                 | LR__1628
1404c                 | LR__1629
1404c     A7 F0 03 F6 | 	mov	ptra, fp
14050     B2 00 A0 FD | 	call	#popregs_
14054                 | _hg010b_spin2_fill_ret
14054     2D 00 64 FD | 	ret
14058                 | 
14058                 | ' 'pinlow(38)    
14058                 | ' 
14058                 | ' '-- A filled circle -----------------------------------------------------
14058                 | ' 
14058                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
14058                 | _hg010b_spin2_fcircle
14058     08 4A 05 F6 | 	mov	COUNT_, #8
1405c     A8 00 A0 FD | 	call	#pushregs_
14060     0B 1F 02 F6 | 	mov	local01, arg03
14064     FF FF 7F FF 
14068     FE 1F 06 FD | 	qmul	local01, ##-2
1406c     09 21 02 F6 | 	mov	local02, arg01
14070     0A 23 02 F6 | 	mov	local03, arg02
14074     0C 25 02 F6 | 	mov	local04, arg04
14078                 | ' 
14078                 | ' d:=5-4*r
14078     0F 19 02 F6 | 	mov	arg04, local01
1407c     02 18 66 F0 | 	shl	arg04, #2
14080     05 26 06 F6 | 	mov	local05, #5
14084     0C 27 82 F1 | 	sub	local05, arg04
14088                 | ' x:=0
14088     00 28 06 F6 | 	mov	local06, #0
1408c                 | ' y:=r
1408c                 | ' da:=(-2*r+5)*4
1408c                 | ' db:=3*4
1408c     0C 2A 06 F6 | 	mov	local07, #12
14090                 | ' repeat while (x<=y) 
14090     18 2C 62 FD | 	getqx	local08
14094     05 2C 06 F1 | 	add	local08, #5
14098     02 2C 66 F0 | 	shl	local08, #2
1409c                 | LR__1630
1409c     0F 29 5A F2 | 	cmps	local06, local01 wcz
140a0     B4 00 90 1D |  if_a	jmp	#LR__1632
140a4                 | '   fastline(x0-x,x0+x,y0-y,c)
140a4     10 13 02 F6 | 	mov	arg01, local02
140a8     14 13 82 F1 | 	sub	arg01, local06
140ac     10 15 02 F6 | 	mov	arg02, local02
140b0     14 15 02 F1 | 	add	arg02, local06
140b4     11 17 02 F6 | 	mov	arg03, local03
140b8     0F 17 82 F1 | 	sub	arg03, local01
140bc     12 19 02 F6 | 	mov	arg04, local04
140c0     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
140c4                 | '   fastline(x0-x,x0+x,y0+y,c)
140c4     10 13 02 F6 | 	mov	arg01, local02
140c8     14 13 82 F1 | 	sub	arg01, local06
140cc     10 15 02 F6 | 	mov	arg02, local02
140d0     14 15 02 F1 | 	add	arg02, local06
140d4     11 17 02 F6 | 	mov	arg03, local03
140d8     0F 17 02 F1 | 	add	arg03, local01
140dc     12 19 02 F6 | 	mov	arg04, local04
140e0     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
140e4                 | '   fastline(x0-y,x0+y,y0-x,c)
140e4     10 13 02 F6 | 	mov	arg01, local02
140e8     0F 13 82 F1 | 	sub	arg01, local01
140ec     10 15 02 F6 | 	mov	arg02, local02
140f0     0F 15 02 F1 | 	add	arg02, local01
140f4     11 17 02 F6 | 	mov	arg03, local03
140f8     14 17 82 F1 | 	sub	arg03, local06
140fc     12 19 02 F6 | 	mov	arg04, local04
14100     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
14104                 | '   fastline(x0-y,x0+y,y0+x,c)
14104     10 13 02 F6 | 	mov	arg01, local02
14108     0F 13 82 F1 | 	sub	arg01, local01
1410c     10 15 02 F6 | 	mov	arg02, local02
14110     0F 15 02 F1 | 	add	arg02, local01
14114     11 17 02 F6 | 	mov	arg03, local03
14118     14 17 02 F1 | 	add	arg03, local06
1411c     12 19 02 F6 | 	mov	arg04, local04
14120     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
14124                 | '   if d>0 
14124     01 26 56 F2 | 	cmps	local05, #1 wc
14128     18 00 90 CD |  if_b	jmp	#LR__1631
1412c                 | '     d+=da
1412c     16 27 02 F1 | 	add	local05, local08
14130                 | '     y-=1
14130     01 1E 86 F1 | 	sub	local01, #1
14134                 | '     x+=1
14134     01 28 06 F1 | 	add	local06, #1
14138                 | '     da+=4*4
14138     10 2C 06 F1 | 	add	local08, #16
1413c                 | '     db+=2*4
1413c     08 2A 06 F1 | 	add	local07, #8
14140     58 FF 9F FD | 	jmp	#LR__1630
14144                 | LR__1631
14144                 | '   else
14144                 | '     d+=db
14144     15 27 02 F1 | 	add	local05, local07
14148                 | '     x+=1
14148     01 28 06 F1 | 	add	local06, #1
1414c                 | '     da+=2*4
1414c     08 2C 06 F1 | 	add	local08, #8
14150                 | '     db+=2*4
14150     08 2A 06 F1 | 	add	local07, #8
14154     44 FF 9F FD | 	jmp	#LR__1630
14158                 | LR__1632
14158     A7 F0 03 F6 | 	mov	ptra, fp
1415c     B2 00 A0 FD | 	call	#popregs_
14160                 | _hg010b_spin2_fcircle_ret
14160     2D 00 64 FD | 	ret
14164                 | 
14164                 | '  
14164                 | ' '-- A circle ------------------------------------------------------------ 
14164                 | '  
14164                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
14164                 | _hg010b_spin2_circle
14164     08 4A 05 F6 | 	mov	COUNT_, #8
14168     A8 00 A0 FD | 	call	#pushregs_
1416c     0B 1F 02 F6 | 	mov	local01, arg03
14170     FF FF 7F FF 
14174     FE 1F 06 FD | 	qmul	local01, ##-2
14178     09 21 02 F6 | 	mov	local02, arg01
1417c     0A 23 02 F6 | 	mov	local03, arg02
14180     0C 25 02 F6 | 	mov	local04, arg04
14184                 | ' 
14184                 | '  
14184                 | ' d:=5-4*r
14184     0F 19 02 F6 | 	mov	arg04, local01
14188     02 18 66 F0 | 	shl	arg04, #2
1418c     05 26 06 F6 | 	mov	local05, #5
14190     0C 27 82 F1 | 	sub	local05, arg04
14194                 | ' x:=0
14194     00 28 06 F6 | 	mov	local06, #0
14198                 | ' y:=r
14198                 | ' da:=(-2*r+5)*4
14198                 | ' db:=3*4
14198     0C 2A 06 F6 | 	mov	local07, #12
1419c                 | ' repeat while (x<=y) 
1419c     18 2C 62 FD | 	getqx	local08
141a0     05 2C 06 F1 | 	add	local08, #5
141a4     02 2C 66 F0 | 	shl	local08, #2
141a8                 | LR__1640
141a8     0F 29 5A F2 | 	cmps	local06, local01 wcz
141ac     F4 00 90 1D |  if_a	jmp	#LR__1642
141b0                 | '   putpixel(x0-x,y0-y,c)
141b0     10 13 02 F6 | 	mov	arg01, local02
141b4     14 13 82 F1 | 	sub	arg01, local06
141b8     11 15 02 F6 | 	mov	arg02, local03
141bc     0F 15 82 F1 | 	sub	arg02, local01
141c0     12 17 02 F6 | 	mov	arg03, local04
141c4     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
141c8                 | '   putpixel(x0-x,y0+y,c)
141c8     10 13 02 F6 | 	mov	arg01, local02
141cc     14 13 82 F1 | 	sub	arg01, local06
141d0     11 15 02 F6 | 	mov	arg02, local03
141d4     0F 15 02 F1 | 	add	arg02, local01
141d8     12 17 02 F6 | 	mov	arg03, local04
141dc     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
141e0                 | '   putpixel(x0+x,y0-y,c)
141e0     10 13 02 F6 | 	mov	arg01, local02
141e4     14 13 02 F1 | 	add	arg01, local06
141e8     11 15 02 F6 | 	mov	arg02, local03
141ec     0F 15 82 F1 | 	sub	arg02, local01
141f0     12 17 02 F6 | 	mov	arg03, local04
141f4     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
141f8                 | '   putpixel(x0+x,y0+y,c)
141f8     10 13 02 F6 | 	mov	arg01, local02
141fc     14 13 02 F1 | 	add	arg01, local06
14200     11 15 02 F6 | 	mov	arg02, local03
14204     0F 15 02 F1 | 	add	arg02, local01
14208     12 17 02 F6 | 	mov	arg03, local04
1420c     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
14210                 | '   putpixel(x0-y,y0-x,c)
14210     10 13 02 F6 | 	mov	arg01, local02
14214     0F 13 82 F1 | 	sub	arg01, local01
14218     11 15 02 F6 | 	mov	arg02, local03
1421c     14 15 82 F1 | 	sub	arg02, local06
14220     12 17 02 F6 | 	mov	arg03, local04
14224     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
14228                 | '   putpixel(x0-y,y0+x,c)
14228     10 13 02 F6 | 	mov	arg01, local02
1422c     0F 13 82 F1 | 	sub	arg01, local01
14230     11 15 02 F6 | 	mov	arg02, local03
14234     14 15 02 F1 | 	add	arg02, local06
14238     12 17 02 F6 | 	mov	arg03, local04
1423c     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
14240                 | '   putpixel(x0+y,y0-x,c)
14240     10 13 02 F6 | 	mov	arg01, local02
14244     0F 13 02 F1 | 	add	arg01, local01
14248     11 15 02 F6 | 	mov	arg02, local03
1424c     14 15 82 F1 | 	sub	arg02, local06
14250     12 17 02 F6 | 	mov	arg03, local04
14254     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
14258                 | '   putpixel(x0+y,y0+x,c)
14258     10 13 02 F6 | 	mov	arg01, local02
1425c     0F 13 02 F1 | 	add	arg01, local01
14260     11 15 02 F6 | 	mov	arg02, local03
14264     14 15 02 F1 | 	add	arg02, local06
14268     12 17 02 F6 | 	mov	arg03, local04
1426c     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
14270                 | '   if d>0 
14270     01 26 56 F2 | 	cmps	local05, #1 wc
14274     18 00 90 CD |  if_b	jmp	#LR__1641
14278                 | '     d+=da
14278     16 27 02 F1 | 	add	local05, local08
1427c                 | '     y-=1
1427c     01 1E 86 F1 | 	sub	local01, #1
14280                 | '     x+=1
14280     01 28 06 F1 | 	add	local06, #1
14284                 | '     da+=4*4
14284     10 2C 06 F1 | 	add	local08, #16
14288                 | '     db+=2*4
14288     08 2A 06 F1 | 	add	local07, #8
1428c     18 FF 9F FD | 	jmp	#LR__1640
14290                 | LR__1641
14290                 | '   else
14290                 | '     d+=db
14290     15 27 02 F1 | 	add	local05, local07
14294                 | '     x+=1
14294     01 28 06 F1 | 	add	local06, #1
14298                 | '     da+=2*4
14298     08 2C 06 F1 | 	add	local08, #8
1429c                 | '     db+=2*4
1429c     08 2A 06 F1 | 	add	local07, #8
142a0     04 FF 9F FD | 	jmp	#LR__1640
142a4                 | LR__1642
142a4     A7 F0 03 F6 | 	mov	ptra, fp
142a8     B2 00 A0 FD | 	call	#popregs_
142ac                 | _hg010b_spin2_circle_ret
142ac     2D 00 64 FD | 	ret
142b0                 | 
142b0                 | '     
142b0                 | ' '-- A frame (an empty rectangle) ---------------------------------------
142b0                 | ' 
142b0                 | ' pub frame(x1,y1,x2,y2,c)
142b0                 | _hg010b_spin2_frame
142b0     05 4A 05 F6 | 	mov	COUNT_, #5
142b4     A8 00 A0 FD | 	call	#pushregs_
142b8     09 1F 02 F6 | 	mov	local01, arg01
142bc     0A 21 02 F6 | 	mov	local02, arg02
142c0     0B 23 02 F6 | 	mov	local03, arg03
142c4     0C 25 02 F6 | 	mov	local04, arg04
142c8     0D 27 02 F6 | 	mov	local05, arg05
142cc                 | ' 
142cc                 | ' fastline(x1,x2,y1,c)
142cc     0F 13 02 F6 | 	mov	arg01, local01
142d0     11 15 02 F6 | 	mov	arg02, local03
142d4     10 17 02 F6 | 	mov	arg03, local02
142d8     13 19 02 F6 | 	mov	arg04, local05
142dc     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
142e0                 | ' fastline(x1,x2,y2,c)
142e0     0F 13 02 F6 | 	mov	arg01, local01
142e4     11 15 02 F6 | 	mov	arg02, local03
142e8     12 17 02 F6 | 	mov	arg03, local04
142ec     13 19 02 F6 | 	mov	arg04, local05
142f0     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
142f4                 | ' line(x1,y1,x1,y2,c)
142f4     0F 13 02 F6 | 	mov	arg01, local01
142f8     10 15 02 F6 | 	mov	arg02, local02
142fc     0F 17 02 F6 | 	mov	arg03, local01
14300     12 19 02 F6 | 	mov	arg04, local04
14304     13 1B 02 F6 | 	mov	arg05, local05
14308                 | ' draw(x1,y1,x2,y2,c)
14308     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
1430c                 | ' line(x2,y1,x2,y2,c)
1430c     11 13 02 F6 | 	mov	arg01, local03
14310     10 15 02 F6 | 	mov	arg02, local02
14314     11 17 02 F6 | 	mov	arg03, local03
14318     12 19 02 F6 | 	mov	arg04, local04
1431c     13 1B 02 F6 | 	mov	arg05, local05
14320                 | ' draw(x1,y1,x2,y2,c)
14320     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
14324     A7 F0 03 F6 | 	mov	ptra, fp
14328     B2 00 A0 FD | 	call	#popregs_
1432c                 | _hg010b_spin2_frame_ret
1432c     2D 00 64 FD | 	ret
14330                 | 
14330                 | ' 
14330                 | ' '-- A box (a filled rectangle) ----------------------------------------
14330                 | ' 
14330                 | ' pub box(x1,y1,x2,y2,c) |yy
14330                 | _hg010b_spin2_box
14330     06 4A 05 F6 | 	mov	COUNT_, #6
14334     A8 00 A0 FD | 	call	#pushregs_
14338     09 1F 02 F6 | 	mov	local01, arg01
1433c     0A 21 02 F6 | 	mov	local02, arg02
14340     0B 23 02 F6 | 	mov	local03, arg03
14344     0C 25 02 F6 | 	mov	local04, arg04
14348     0D 27 02 F6 | 	mov	local05, arg05
1434c                 | ' 
1434c                 | ' repeat yy from y1 to y2
1434c     10 25 52 F2 | 	cmps	local04, local02 wc
14350     01 28 86 F6 | 	negc	local06, #1
14354     14 25 02 F1 | 	add	local04, local06
14358                 | LR__1650
14358                 | '   fastline(x1,x2,yy,c)
14358     0F 13 02 F6 | 	mov	arg01, local01
1435c     11 15 02 F6 | 	mov	arg02, local03
14360     13 19 02 F6 | 	mov	arg04, local05
14364     10 17 02 F6 | 	mov	arg03, local02
14368     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
1436c     14 21 02 F1 | 	add	local02, local06
14370     12 21 0A F2 | 	cmp	local02, local04 wz
14374     E0 FF 9F 5D |  if_ne	jmp	#LR__1650
14378     A7 F0 03 F6 | 	mov	ptra, fp
1437c     B2 00 A0 FD | 	call	#popregs_
14380                 | _hg010b_spin2_box_ret
14380     2D 00 64 FD | 	ret
14384                 | 
14384                 | '       
14384                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
14384                 | _hg010b_spin2_putcharxycgf
14384                 | ' 
14384                 | '  
14384                 | ' repeat yy from 0 to 15
14384     00 00 06 F6 | 	mov	_var01, #0
14388     97 8C 48 FB | 	callpa	#(@LR__1662-@LR__1660)>>2,fcache_load_ptr_
1438c                 | LR__1660
1438c                 | ' 
1438c                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
1438c     91 E4 05 F1 | 	add	objptr, #145
14390     F2 02 02 FB | 	rdlong	_var02, objptr
14394     0A 02 66 F0 | 	shl	_var02, #10
14398     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
1439c     01 05 02 F1 | 	add	_var03, _var02
143a0     0B 03 02 F6 | 	mov	_var02, arg03
143a4     04 02 66 F0 | 	shl	_var02, #4
143a8     01 05 02 F1 | 	add	_var03, _var02
143ac     00 05 02 F1 | 	add	_var03, _var01
143b0     02 05 C2 FA | 	rdbyte	_var03, _var03
143b4                 | '   asm
143b4     00 04 0E F4 | 	testb	_var03, #0 wz
143b8     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
143bc     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
143c0     01 04 0E F4 | 	testb	_var03, #1 wz
143c4     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
143c8     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
143cc     02 04 0E F4 | 	testb	_var03, #2 wz
143d0     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
143d4     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
143d8     03 04 0E F4 | 	testb	_var03, #3 wz
143dc     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
143e0     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
143e4     04 04 0E F4 | 	testb	_var03, #4 wz
143e8     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
143ec     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
143f0     05 04 0E F4 | 	testb	_var03, #5 wz
143f4     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
143f8     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
143fc     06 04 0E F4 | 	testb	_var03, #6 wz
14400     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
14404     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
14408     07 04 0E F4 | 	testb	_var03, #7 wz
1440c     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
14410     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
14414                 | '   
14414                 | '   ccc[0]:=c1
14414     99 E5 05 F1 | 	add	objptr, #409
14418     F2 06 62 FC | 	wrlong	_var04, objptr
1441c                 | '   ccc[1]:=c2 
1441c     04 E4 05 F1 | 	add	objptr, #4
14420     F2 08 62 FC | 	wrlong	_var05, objptr
14424                 | '   long[mailbox0][2]:=8
14424     49 E4 85 F1 | 	sub	objptr, #73
14428     F2 04 02 FB | 	rdlong	_var03, objptr
1442c     08 04 06 F1 | 	add	_var03, #8
14430     02 11 68 FC | 	wrlong	#8, _var03
14434                 | '   long[mailbox0][1]:=@ccc
14434     45 E4 05 F1 | 	add	objptr, #69
14438     F2 04 02 F6 | 	mov	_var03, objptr
1443c     45 E4 85 F1 | 	sub	objptr, #69
14440     F2 02 02 FB | 	rdlong	_var02, objptr
14444     04 02 06 F1 | 	add	_var02, #4
14448     01 05 62 FC | 	wrlong	_var03, _var02
1444c                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1444c     0C E5 85 F1 | 	sub	objptr, #268
14450     F2 04 02 FB | 	rdlong	_var03, objptr
14454     0A 03 02 F6 | 	mov	_var02, arg02
14458     00 03 02 F1 | 	add	_var02, _var01
1445c     0A 02 66 F0 | 	shl	_var02, #10
14460     09 0B 02 F6 | 	mov	_var06, arg01
14464     02 0A 66 F0 | 	shl	_var06, #2
14468     05 03 02 F1 | 	add	_var02, _var06
1446c     01 05 02 F1 | 	add	_var03, _var02
14470     00 00 78 FF 
14474     00 04 06 F1 | 	add	_var03, ##-268435456
14478     0C E5 05 F1 | 	add	objptr, #268
1447c     F2 0A 02 FB | 	rdlong	_var06, objptr
14480     05 05 62 FC | 	wrlong	_var03, _var06
14484                 | '   repeat
14484                 | LR__1661
14484     F2 04 02 FB | 	rdlong	_var03, objptr
14488     02 03 02 FB | 	rdlong	_var02, _var03
1448c     00 02 56 F2 | 	cmps	_var02, #0 wc
14490     F0 FF 9F CD |  if_b	jmp	#LR__1661
14494     E5 E5 85 F1 | 	sub	objptr, #485
14498     01 00 06 F1 | 	add	_var01, #1
1449c     10 00 56 F2 | 	cmps	_var01, #16 wc
144a0     E8 FE 9F CD |  if_b	jmp	#LR__1660
144a4                 | LR__1662
144a4                 | _hg010b_spin2_putcharxycgf_ret
144a4     2D 00 64 FD | 	ret
144a8                 | 
144a8                 | ' 
144a8                 | ' 
144a8                 | ' '**********************************************************************r***
144a8                 | ' '                                                                        *
144a8                 | ' ' Font related functions                                                 *
144a8                 | ' '                                                                        *
144a8                 | ' '*************************************************************************
144a8                 | ' 
144a8                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
144a8                 | ' 
144a8                 | ' pub setfontfamily(afontnum)
144a8                 | _hg010b_spin2_setfontfamily
144a8                 | ' 
144a8                 | ' font_family:=afontnum
144a8     91 E4 05 F1 | 	add	objptr, #145
144ac     F2 12 62 FC | 	wrlong	arg01, objptr
144b0     91 E4 85 F1 | 	sub	objptr, #145
144b4                 | ' 'if afontnum==8
144b4                 | ' '  font_ptr:=@amiga_font
144b4                 | ' 
144b4                 | ' if afontnum==4
144b4     04 12 0E F2 | 	cmp	arg01, #4 wz
144b8                 | '   font_ptr:=@st_font
144b8     08 00 00 AF 
144bc     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
144c0     04 E4 05 A1 |  if_e	add	objptr, #4
144c4     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
144c8     04 E4 85 A1 |  if_e	sub	objptr, #4
144cc     08 00 00 AF 
144d0     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
144d4                 | ' if afontnum==0
144d4     00 12 0E F2 | 	cmp	arg01, #0 wz
144d8                 | '   font_ptr:=@vga_font
144d8     04 E4 05 A1 |  if_e	add	objptr, #4
144dc     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
144e0     04 E4 85 A1 |  if_e	sub	objptr, #4
144e4                 | _hg010b_spin2_setfontfamily_ret
144e4     2D 00 64 FD | 	ret
144e8                 | 
144e8                 | ' 
144e8                 | ' '*************************************************************************
144e8                 | ' '                                                                        *
144e8                 | ' '  Cursor functions                                                      *
144e8                 | ' '                                                                        *
144e8                 | ' '*************************************************************************
144e8                 | ' 
144e8                 | ' 
144e8                 | ' pub setcursorpos(x,y)
144e8                 | _hg010b_spin2_setcursorpos
144e8                 | ' 
144e8                 | ' ''---------- Set the (x,y) position of cursor
144e8                 | ' 
144e8                 | ' cursor_x:=x
144e8     38 E4 05 F1 | 	add	objptr, #56
144ec     F2 12 52 FC | 	wrword	arg01, objptr
144f0                 | ' cursor_y:=y
144f0     02 E4 05 F1 | 	add	objptr, #2
144f4     F2 14 42 FC | 	wrbyte	arg02, objptr
144f8                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
144f8     02 E4 85 F1 | 	sub	objptr, #2
144fc     F2 14 E2 FA | 	rdword	arg02, objptr
14500     02 14 66 F0 | 	shl	arg02, #2
14504     02 E4 05 F1 | 	add	objptr, #2
14508     F2 16 C2 FA | 	rdbyte	arg03, objptr
1450c     3A E4 85 F1 | 	sub	objptr, #58
14510     04 16 66 F0 | 	shl	arg03, #4
14514     11 12 06 F6 | 	mov	arg01, #17
14518     70 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1451c                 | _hg010b_spin2_setcursorpos_ret
1451c     2D 00 64 FD | 	ret
14520                 | 
14520                 | ' 
14520                 | ' '*************************************************************************
14520                 | ' '                                                                        *
14520                 | ' '  VBlank functions                                                      *
14520                 | ' '                                                                        *
14520                 | ' '*************************************************************************
14520                 | ' 
14520                 | ' pub waitvbl(amount) | i
14520                 | _hg010b_spin2_waitvbl
14520     03 4A 05 F6 | 	mov	COUNT_, #3
14524     A8 00 A0 FD | 	call	#pushregs_
14528     09 1F 02 F6 | 	mov	local01, arg01
1452c                 | ' 
1452c                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
1452c                 | ' 
1452c                 | ' repeat i from 1 to amount
1452c     01 20 06 F6 | 	mov	local02, #1
14530     01 1E 56 F2 | 	cmps	local01, #1 wc
14534     01 22 86 F6 | 	negc	local03, #1
14538     11 1F 02 F1 | 	add	local01, local03
1453c                 | LR__1670
1453c                 | '   repeat until vblank==0
1453c                 | LR__1671
1453c     45 E4 05 F1 | 	add	objptr, #69
14540     F2 12 0A FB | 	rdlong	arg01, objptr wz
14544     45 E4 85 F1 | 	sub	objptr, #69
14548     0C 00 90 AD |  if_e	jmp	#LR__1672
1454c                 | '     waitus(100)
1454c     64 12 06 F6 | 	mov	arg01, #100
14550     7C 16 B0 FD | 	call	#__system___waitus
14554     E4 FF 9F FD | 	jmp	#LR__1671
14558                 | LR__1672
14558                 | '   repeat until vblank==1
14558                 | LR__1673
14558     45 E4 05 F1 | 	add	objptr, #69
1455c     F2 12 02 FB | 	rdlong	arg01, objptr
14560     45 E4 85 F1 | 	sub	objptr, #69
14564     01 12 0E F2 | 	cmp	arg01, #1 wz
14568     0C 00 90 AD |  if_e	jmp	#LR__1674
1456c                 | '     waitus(100)
1456c     64 12 06 F6 | 	mov	arg01, #100
14570     5C 16 B0 FD | 	call	#__system___waitus
14574     E0 FF 9F FD | 	jmp	#LR__1673
14578                 | LR__1674
14578     11 21 02 F1 | 	add	local02, local03
1457c     0F 21 0A F2 | 	cmp	local02, local01 wz
14580     B8 FF 9F 5D |  if_ne	jmp	#LR__1670
14584     A7 F0 03 F6 | 	mov	ptra, fp
14588     B2 00 A0 FD | 	call	#popregs_
1458c                 | _hg010b_spin2_waitvbl_ret
1458c     2D 00 64 FD | 	ret
14590                 | 
14590                 | ' 
14590                 | ' 
14590                 | ' pub cls(fc,bc)   :c,i
14590                 | _hg010b_spin2_cls
14590     02 4A 05 F6 | 	mov	COUNT_, #2
14594     A8 00 A0 FD | 	call	#pushregs_
14598     09 1F 02 F6 | 	mov	local01, arg01
1459c     0A 21 02 F6 | 	mov	local02, arg02
145a0                 | ' 
145a0                 | ' c:=bc
145a0                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
145a0     D9 E4 05 F1 | 	add	objptr, #217
145a4     F2 12 02 FB | 	rdlong	arg01, objptr
145a8     A5 E4 85 F1 | 	sub	objptr, #165
145ac     F2 16 02 FB | 	rdlong	arg03, objptr
145b0     02 16 66 F0 | 	shl	arg03, #2
145b4     10 15 02 F6 | 	mov	arg02, local02
145b8     00 18 06 F6 | 	mov	arg04, #0
145bc     01 1A 06 F6 | 	mov	arg05, #1
145c0     0B 00 00 FF 
145c4     8C E4 05 F1 | 	add	objptr, ##5772
145c8     F0 08 B0 FD | 	call	#_psram_spin2_fill
145cc                 | ' setwritecolors(fc,bc)
145cc                 | ' 
145cc                 | ' write_color:=ff
145cc     0B 00 00 FF 
145d0     83 E4 85 F1 | 	sub	objptr, ##5763
145d4     F2 1E 62 FC | 	wrlong	local01, objptr
145d8                 | ' write_background:=bb
145d8     04 E4 05 F1 | 	add	objptr, #4
145dc     F2 20 62 FC | 	wrlong	local02, objptr
145e0                 | ' cursor_x:=0
145e0     09 E4 85 F1 | 	sub	objptr, #9
145e4     F2 00 58 FC | 	wrword	#0, objptr
145e8                 | ' cursor_y:=0
145e8     02 E4 05 F1 | 	add	objptr, #2
145ec     F2 00 48 FC | 	wrbyte	#0, objptr
145f0                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
145f0     02 E4 85 F1 | 	sub	objptr, #2
145f4     F2 14 E2 FA | 	rdword	arg02, objptr
145f8     02 14 66 F0 | 	shl	arg02, #2
145fc     02 E4 05 F1 | 	add	objptr, #2
14600     F2 16 C2 FA | 	rdbyte	arg03, objptr
14604     3A E4 85 F1 | 	sub	objptr, #58
14608     04 16 66 F0 | 	shl	arg03, #4
1460c     11 12 06 F6 | 	mov	arg01, #17
14610     78 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
14614                 | ' setcursorcolor(fc)
14614     0F 13 02 F6 | 	mov	arg01, local01
14618     2C EF BF FD | 	call	#_hg010b_spin2_setcursorcolor
1461c     10 FB 01 F6 | 	mov	result1, local02
14620     00 FC 05 F6 | 	mov	result2, #0
14624     A7 F0 03 F6 | 	mov	ptra, fp
14628     B2 00 A0 FD | 	call	#popregs_
1462c                 | _hg010b_spin2_cls_ret
1462c     2D 00 64 FD | 	ret
14630                 | 
14630                 | ' 
14630                 | ' ''---------- Output a char at the cursor position, move the cursor 
14630                 | ' 
14630                 | ' pub putchar(achar) | c,x,y,l,newcpl
14630                 | _hg010b_spin2_putchar
14630     01 4A 05 F6 | 	mov	COUNT_, #1
14634     A8 00 A0 FD | 	call	#pushregs_
14638     09 1F 02 F6 | 	mov	local01, arg01
1463c                 | ' 
1463c                 | ' if achar==10
1463c     0A 1E 0E F2 | 	cmp	local01, #10 wz
14640                 | '   crlf()
14640     68 03 B0 AD |  if_e	call	#_hg010b_spin2_crlf
14644                 | ' if achar==9
14644     09 1E 0E F2 | 	cmp	local01, #9 wz
14648     18 00 90 5D |  if_ne	jmp	#LR__1680
1464c                 | '   cursor_x:=(cursor_x& %11110000)+16
1464c     38 E4 05 F1 | 	add	objptr, #56
14650     F2 16 E2 FA | 	rdword	arg03, objptr
14654     F0 16 06 F5 | 	and	arg03, #240
14658     10 16 06 F1 | 	add	arg03, #16
1465c     F2 16 52 FC | 	wrword	arg03, objptr
14660     38 E4 85 F1 | 	sub	objptr, #56
14664                 | LR__1680
14664                 | '   
14664                 | ' if (achar<>9) && (achar<>10) 
14664     09 1E 0E F2 | 	cmp	local01, #9 wz
14668     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
1466c     44 00 90 AD |  if_e	jmp	#LR__1681
14670                 | '   putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
14670     38 E4 05 F1 | 	add	objptr, #56
14674     F2 12 E2 FA | 	rdword	arg01, objptr
14678     02 E4 05 F1 | 	add	objptr, #2
1467c     F2 14 C2 FA | 	rdbyte	arg02, objptr
14680     04 14 66 F0 | 	shl	arg02, #4
14684     03 E4 05 F1 | 	add	objptr, #3
14688     F2 18 02 FB | 	rdlong	arg04, objptr
1468c     04 E4 05 F1 | 	add	objptr, #4
14690     F2 1A 02 FB | 	rdlong	arg05, objptr
14694     41 E4 85 F1 | 	sub	objptr, #65
14698     0F 17 02 F6 | 	mov	arg03, local01
1469c     E4 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
146a0                 | '   cursor_x+=2
146a0     38 E4 05 F1 | 	add	objptr, #56
146a4     F2 1E E2 FA | 	rdword	local01, objptr
146a8     02 1E 06 F1 | 	add	local01, #2
146ac     F2 1E 52 FC | 	wrword	local01, objptr
146b0     38 E4 85 F1 | 	sub	objptr, #56
146b4                 | LR__1681
146b4                 | ' 
146b4                 | ' if cursor_x>=256
146b4     38 E4 05 F1 | 	add	objptr, #56
146b8     F2 1E E2 FA | 	rdword	local01, objptr
146bc     38 E4 85 F1 | 	sub	objptr, #56
146c0     00 1F 56 F2 | 	cmps	local01, #256 wc
146c4     64 00 90 CD |  if_b	jmp	#LR__1683
146c8                 | '   cursor_x:=0
146c8     38 E4 05 F1 | 	add	objptr, #56
146cc     F2 00 58 FC | 	wrword	#0, objptr
146d0                 | '   cursor_y+=1
146d0     02 E4 05 F1 | 	add	objptr, #2
146d4     F2 1E C2 FA | 	rdbyte	local01, objptr
146d8     01 1E 06 F1 | 	add	local01, #1
146dc     F2 1E 42 FC | 	wrbyte	local01, objptr
146e0                 | '   if cursor_y>st_lines-1
146e0     C3 E4 05 F1 | 	add	objptr, #195
146e4     F2 1E 02 FB | 	rdlong	local01, objptr
146e8     01 1E 86 F1 | 	sub	local01, #1
146ec     C3 E4 85 F1 | 	sub	objptr, #195
146f0     F2 16 C2 FA | 	rdbyte	arg03, objptr
146f4     3A E4 85 F1 | 	sub	objptr, #58
146f8     0F 17 5A F2 | 	cmps	arg03, local01 wcz
146fc     2C 00 90 ED |  if_be	jmp	#LR__1682
14700                 | '     scrollup()
14700     00 12 06 F6 | 	mov	arg01, #0
14704     01 00 00 FF 
14708     40 14 06 F6 | 	mov	arg02, ##576
1470c     10 16 06 F6 | 	mov	arg03, #16
14710     9C 01 B0 FD | 	call	#_hg010b_spin2_scrollup
14714                 | '     cursor_y:=st_lines-1
14714     FD E4 05 F1 | 	add	objptr, #253
14718     F2 1E 02 FB | 	rdlong	local01, objptr
1471c     01 1E 86 F1 | 	sub	local01, #1
14720     C3 E4 85 F1 | 	sub	objptr, #195
14724     F2 1E 42 FC | 	wrbyte	local01, objptr
14728     3A E4 85 F1 | 	sub	objptr, #58
1472c                 | LR__1682
1472c                 | LR__1683
1472c                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
1472c     38 E4 05 F1 | 	add	objptr, #56
14730     F2 14 E2 FA | 	rdword	arg02, objptr
14734     02 14 66 F0 | 	shl	arg02, #2
14738     02 E4 05 F1 | 	add	objptr, #2
1473c     F2 16 C2 FA | 	rdbyte	arg03, objptr
14740     3A E4 85 F1 | 	sub	objptr, #58
14744     04 16 66 F0 | 	shl	arg03, #4
14748     11 12 06 F6 | 	mov	arg01, #17
1474c     3C F1 BF FD | 	call	#_hg010b_spin2_setspritepos
14750     A7 F0 03 F6 | 	mov	ptra, fp
14754     B2 00 A0 FD | 	call	#popregs_
14758                 | _hg010b_spin2_putchar_ret
14758     2D 00 64 FD | 	ret
1475c                 | 
1475c                 | '     
1475c                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
1475c                 | ' 
1475c                 | ' pub putchar2(achar) | c,x,y,l,newcpl
1475c                 | _hg010b_spin2_putchar2
1475c     01 4A 05 F6 | 	mov	COUNT_, #1
14760     A8 00 A0 FD | 	call	#pushregs_
14764                 | ' 
14764                 | ' putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
14764     38 E4 05 F1 | 	add	objptr, #56
14768     F2 1E E2 FA | 	rdword	local01, objptr
1476c     02 E4 05 F1 | 	add	objptr, #2
14770     F2 14 C2 FA | 	rdbyte	arg02, objptr
14774     04 14 66 F0 | 	shl	arg02, #4
14778     09 17 02 F6 | 	mov	arg03, arg01
1477c     03 E4 05 F1 | 	add	objptr, #3
14780     F2 18 02 FB | 	rdlong	arg04, objptr
14784     04 E4 05 F1 | 	add	objptr, #4
14788     F2 1A 02 FB | 	rdlong	arg05, objptr
1478c     41 E4 85 F1 | 	sub	objptr, #65
14790     0F 13 02 F6 | 	mov	arg01, local01
14794     EC FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
14798                 | ' cursor_x+=2
14798     38 E4 05 F1 | 	add	objptr, #56
1479c     F2 1E E2 FA | 	rdword	local01, objptr
147a0     02 1E 06 F1 | 	add	local01, #2
147a4     F2 1E 52 FC | 	wrword	local01, objptr
147a8                 | ' if cursor_x>=256
147a8     F2 1E E2 FA | 	rdword	local01, objptr
147ac     38 E4 85 F1 | 	sub	objptr, #56
147b0     00 1F 56 F2 | 	cmps	local01, #256 wc
147b4     64 00 90 CD |  if_b	jmp	#LR__1691
147b8                 | '   cursor_x:=0
147b8     38 E4 05 F1 | 	add	objptr, #56
147bc     F2 00 58 FC | 	wrword	#0, objptr
147c0                 | '   cursor_y+=1
147c0     02 E4 05 F1 | 	add	objptr, #2
147c4     F2 1E C2 FA | 	rdbyte	local01, objptr
147c8     01 1E 06 F1 | 	add	local01, #1
147cc     F2 1E 42 FC | 	wrbyte	local01, objptr
147d0                 | '   if cursor_y>st_lines-1
147d0     C3 E4 05 F1 | 	add	objptr, #195
147d4     F2 1E 02 FB | 	rdlong	local01, objptr
147d8     01 1E 86 F1 | 	sub	local01, #1
147dc     C3 E4 85 F1 | 	sub	objptr, #195
147e0     F2 1A C2 FA | 	rdbyte	arg05, objptr
147e4     3A E4 85 F1 | 	sub	objptr, #58
147e8     0F 1B 5A F2 | 	cmps	arg05, local01 wcz
147ec     2C 00 90 ED |  if_be	jmp	#LR__1690
147f0                 | '     scrollup()
147f0     00 12 06 F6 | 	mov	arg01, #0
147f4     01 00 00 FF 
147f8     40 14 06 F6 | 	mov	arg02, ##576
147fc     10 16 06 F6 | 	mov	arg03, #16
14800     AC 00 B0 FD | 	call	#_hg010b_spin2_scrollup
14804                 | '     cursor_y:=st_lines-1
14804     FD E4 05 F1 | 	add	objptr, #253
14808     F2 1E 02 FB | 	rdlong	local01, objptr
1480c     01 1E 86 F1 | 	sub	local01, #1
14810     C3 E4 85 F1 | 	sub	objptr, #195
14814     F2 1E 42 FC | 	wrbyte	local01, objptr
14818     3A E4 85 F1 | 	sub	objptr, #58
1481c                 | LR__1690
1481c                 | LR__1691
1481c                 | ' setspritepos(17,4*cursor_x,16*cursor_y ) 
1481c     38 E4 05 F1 | 	add	objptr, #56
14820     F2 14 E2 FA | 	rdword	arg02, objptr
14824     02 14 66 F0 | 	shl	arg02, #2
14828     02 E4 05 F1 | 	add	objptr, #2
1482c     F2 16 C2 FA | 	rdbyte	arg03, objptr
14830     3A E4 85 F1 | 	sub	objptr, #58
14834     04 16 66 F0 | 	shl	arg03, #4
14838     11 12 06 F6 | 	mov	arg01, #17
1483c     4C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
14840     A7 F0 03 F6 | 	mov	ptra, fp
14844     B2 00 A0 FD | 	call	#popregs_
14848                 | _hg010b_spin2_putchar2_ret
14848     2D 00 64 FD | 	ret
1484c                 | 
1484c                 | ' ''--------- Output a string at the cursor position, move the cursor  
1484c                 | ' 
1484c                 | ' pub write(text) | iii,c,ncx,ncy
1484c                 | _hg010b_spin2_write
1484c     04 4A 05 F6 | 	mov	COUNT_, #4
14850     A8 00 A0 FD | 	call	#pushregs_
14854     09 1F 02 F6 | 	mov	local01, arg01
14858                 | ' 
14858                 | ' repeat iii from 0 to strsize(text)-1
14858     00 20 06 F6 | 	mov	local02, #0
1485c     0F 13 02 F6 | 	mov	arg01, local01
14860     09 23 02 F6 | 	mov	local03, arg01
14864     97 06 48 FB | 	callpa	#(@LR__1701-@LR__1700)>>2,fcache_load_ptr_
14868                 | LR__1700
14868     11 FB C9 FA | 	rdbyte	result1, local03 wz
1486c     01 22 06 51 |  if_ne	add	local03, #1
14870     F4 FF 9F 5D |  if_ne	jmp	#LR__1700
14874                 | LR__1701
14874     09 23 82 F1 | 	sub	local03, arg01
14878     01 22 86 F1 | 	sub	local03, #1
1487c     00 22 56 F2 | 	cmps	local03, #0 wc
14880     01 24 86 F6 | 	negc	local04, #1
14884     12 23 02 F1 | 	add	local03, local04
14888                 | LR__1702
14888                 | '   putchar2(byte[text+iii])
14888     0F 13 02 F6 | 	mov	arg01, local01
1488c     10 13 02 F1 | 	add	arg01, local02
14890     09 13 C2 FA | 	rdbyte	arg01, arg01
14894     C4 FE BF FD | 	call	#_hg010b_spin2_putchar2
14898     12 21 02 F1 | 	add	local02, local04
1489c     11 21 0A F2 | 	cmp	local02, local03 wz
148a0     E4 FF 9F 5D |  if_ne	jmp	#LR__1702
148a4     A7 F0 03 F6 | 	mov	ptra, fp
148a8     B2 00 A0 FD | 	call	#popregs_
148ac                 | _hg010b_spin2_write_ret
148ac     2D 00 64 FD | 	ret
148b0                 | 
148b0                 | ' 
148b0                 | ' ''-----------  Scroll the screen one line up
148b0                 | ' 
148b0                 | ' pub scrollup(start=0, end=576 , amount=16) | i
148b0                 | _hg010b_spin2_scrollup
148b0     01 4A 05 F6 | 	mov	COUNT_, #1
148b4     A8 00 A0 FD | 	call	#pushregs_
148b8                 | ' 	
148b8                 | ' repeat i from 0 to 559 
148b8     00 1E 06 F6 | 	mov	local01, #0
148bc                 | LR__1710
148bc     F5 E4 05 F1 | 	add	objptr, #245
148c0     F2 18 02 FB | 	rdlong	arg04, objptr
148c4     1C E4 85 F1 | 	sub	objptr, #28
148c8     F2 14 02 FB | 	rdlong	arg02, objptr
148cc     0F 13 02 F6 | 	mov	arg01, local01
148d0     10 12 06 F1 | 	add	arg01, #16
148d4     02 12 66 F0 | 	shl	arg01, #2
148d8     14 E4 05 F1 | 	add	objptr, #20
148dc     F2 16 02 FB | 	rdlong	arg03, objptr
148e0     0B 13 02 FD | 	qmul	arg01, arg03
148e4                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
148e4     F6 03 00 FF 
148e8     00 12 06 F6 | 	mov	arg01, ##519168
148ec     0C 13 82 F1 | 	sub	arg01, arg04
148f0     02 16 66 F0 | 	shl	arg03, #2
148f4     0A 00 00 FF 
148f8     D3 E5 05 F1 | 	add	objptr, ##5587
148fc     18 18 62 FD | 	getqx	arg04
14900     0C 15 02 F1 | 	add	arg02, arg04
14904     7C 04 B0 FD | 	call	#_psram_spin2_read1
14908     0A 00 00 FF 
1490c     CB E5 85 F1 | 	sub	objptr, ##5579
14910     F2 18 02 FB | 	rdlong	arg04, objptr
14914     1C E4 85 F1 | 	sub	objptr, #28
14918     F2 14 02 FB | 	rdlong	arg02, objptr
1491c     0F 13 02 F6 | 	mov	arg01, local01
14920     02 12 66 F0 | 	shl	arg01, #2
14924     14 E4 05 F1 | 	add	objptr, #20
14928     F2 16 02 FB | 	rdlong	arg03, objptr
1492c     0B 13 02 FD | 	qmul	arg01, arg03
14930                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
14930     F6 03 00 FF 
14934     00 12 06 F6 | 	mov	arg01, ##519168
14938     0C 13 82 F1 | 	sub	arg01, arg04
1493c     02 16 66 F0 | 	shl	arg03, #2
14940     0A 00 00 FF 
14944     D3 E5 05 F1 | 	add	objptr, ##5587
14948     18 18 62 FD | 	getqx	arg04
1494c     0C 15 02 F1 | 	add	arg02, arg04
14950     CC 04 B0 FD | 	call	#_psram_spin2_write
14954     0B 00 00 FF 
14958     C0 E4 85 F1 | 	sub	objptr, ##5824
1495c     01 1E 06 F1 | 	add	local01, #1
14960     01 00 00 FF 
14964     30 1E 56 F2 | 	cmps	local01, ##560 wc
14968     50 FF 9F CD |  if_b	jmp	#LR__1710
1496c                 | ' 
1496c                 | ' repeat i from 560 to 575
1496c     01 00 00 FF 
14970     30 1E 06 F6 | 	mov	local01, ##560
14974                 | LR__1711
14974                 | '    fastline(0,1023,i,write_background)   
14974     41 E4 05 F1 | 	add	objptr, #65
14978     F2 18 02 FB | 	rdlong	arg04, objptr
1497c     41 E4 85 F1 | 	sub	objptr, #65
14980     00 12 06 F6 | 	mov	arg01, #0
14984     09 14 CE F9 | 	bmask	arg02, #9
14988     0F 17 02 F6 | 	mov	arg03, local01
1498c     2C F1 BF FD | 	call	#_hg010b_spin2_fastline
14990     01 1E 06 F1 | 	add	local01, #1
14994     01 00 00 FF 
14998     40 1E 16 F2 | 	cmp	local01, ##576 wc
1499c     D4 FF 9F CD |  if_b	jmp	#LR__1711
149a0     A7 F0 03 F6 | 	mov	ptra, fp
149a4     B2 00 A0 FD | 	call	#popregs_
149a8                 | _hg010b_spin2_scrollup_ret
149a8     2D 00 64 FD | 	ret
149ac                 | 
149ac                 | ' 
149ac                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
149ac                 | ' 
149ac                 | ' pub crlf()
149ac                 | _hg010b_spin2_crlf
149ac                 | ' 
149ac                 | ' cursor_x:=leading_spaces*2
149ac     01 00 00 FF 
149b0     B2 E4 05 F1 | 	add	objptr, ##690
149b4     F2 16 02 FB | 	rdlong	arg03, objptr
149b8     01 16 66 F0 | 	shl	arg03, #1
149bc     01 00 00 FF 
149c0     7A E4 85 F1 | 	sub	objptr, ##634
149c4     F2 16 52 FC | 	wrword	arg03, objptr
149c8                 | ' cursor_y+=1
149c8     02 E4 05 F1 | 	add	objptr, #2
149cc     F2 16 C2 FA | 	rdbyte	arg03, objptr
149d0     01 16 06 F1 | 	add	arg03, #1
149d4     F2 16 42 FC | 	wrbyte	arg03, objptr
149d8                 | ' if cursor_y>st_lines-1
149d8     C3 E4 05 F1 | 	add	objptr, #195
149dc     F2 16 02 FB | 	rdlong	arg03, objptr
149e0     01 16 86 F1 | 	sub	arg03, #1
149e4     C3 E4 85 F1 | 	sub	objptr, #195
149e8     F2 14 C2 FA | 	rdbyte	arg02, objptr
149ec     3A E4 85 F1 | 	sub	objptr, #58
149f0     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
149f4     2C 00 90 ED |  if_be	jmp	#LR__1720
149f8                 | '   scrollup()
149f8     00 12 06 F6 | 	mov	arg01, #0
149fc     01 00 00 FF 
14a00     40 14 06 F6 | 	mov	arg02, ##576
14a04     10 16 06 F6 | 	mov	arg03, #16
14a08     A4 FE BF FD | 	call	#_hg010b_spin2_scrollup
14a0c                 | '   cursor_y:=st_lines-1
14a0c     FD E4 05 F1 | 	add	objptr, #253
14a10     F2 16 02 FB | 	rdlong	arg03, objptr
14a14     01 16 86 F1 | 	sub	arg03, #1
14a18     C3 E4 85 F1 | 	sub	objptr, #195
14a1c     F2 16 42 FC | 	wrbyte	arg03, objptr
14a20     3A E4 85 F1 | 	sub	objptr, #58
14a24                 | LR__1720
14a24                 | ' setspritepos(17,4*cursor_x,16*cursor_y )  
14a24     38 E4 05 F1 | 	add	objptr, #56
14a28     F2 14 E2 FA | 	rdword	arg02, objptr
14a2c     02 14 66 F0 | 	shl	arg02, #2
14a30     02 E4 05 F1 | 	add	objptr, #2
14a34     F2 16 C2 FA | 	rdbyte	arg03, objptr
14a38     3A E4 85 F1 | 	sub	objptr, #58
14a3c     04 16 66 F0 | 	shl	arg03, #4
14a40     11 12 06 F6 | 	mov	arg01, #17
14a44     44 EE BF FD | 	call	#_hg010b_spin2_setspritepos
14a48                 | _hg010b_spin2_crlf_ret
14a48     2D 00 64 FD | 	ret
14a4c                 | 
14a4c                 | ' 
14a4c                 | ' 
14a4c                 | ' '*************************************************************************
14a4c                 | ' '                                                                        *
14a4c                 | ' '  Conversions                                                           *
14a4c                 | ' '                                                                        *
14a4c                 | ' '*************************************************************************
14a4c                 | ' 
14a4c                 | ' ''---------- Convert a integer to dec string, return a pointer
14a4c                 | ' 
14a4c                 | ' pub inttostr(i):result |q,pos,k,j
14a4c                 | _hg010b_spin2_inttostr
14a4c     03 4A 05 F6 | 	mov	COUNT_, #3
14a50     A8 00 A0 FD | 	call	#pushregs_
14a54     09 1F 0A F6 | 	mov	local01, arg01 wz
14a58                 | ' 
14a58                 | ' j:=i
14a58                 | ' pos:=10
14a58     0A 20 06 F6 | 	mov	local02, #10
14a5c                 | ' k:=0
14a5c     00 22 06 F6 | 	mov	local03, #0
14a60                 | ' 
14a60                 | ' if (j==0)
14a60     18 00 90 5D |  if_ne	jmp	#LR__1730
14a64                 | '   n_string[0]:=48
14a64     49 E4 05 F1 | 	add	objptr, #73
14a68     F2 60 48 FC | 	wrbyte	#48, objptr
14a6c                 | '   n_string[1]:=0
14a6c     01 E4 05 F1 | 	add	objptr, #1
14a70     F2 00 48 FC | 	wrbyte	#0, objptr
14a74     4A E4 85 F1 | 	sub	objptr, #74
14a78     C4 00 90 FD | 	jmp	#LR__1737
14a7c                 | LR__1730
14a7c                 | ' 
14a7c                 | ' else
14a7c                 | '   if (j<0)
14a7c     0F 1F 52 F6 | 	abs	local01, local01 wc
14a80                 | '     j:=0-j
14a80                 | '     k:=45
14a80     2D 22 06 C6 |  if_b	mov	local03, #45
14a84                 | ' 
14a84                 | '   n_string[11]:=0
14a84     54 E4 05 F1 | 	add	objptr, #84
14a88     F2 00 48 FC | 	wrbyte	#0, objptr
14a8c     54 E4 85 F1 | 	sub	objptr, #84
14a90     97 24 48 FB | 	callpa	#(@LR__1732-@LR__1731)>>2,fcache_load_ptr_
14a94                 | '   repeat while (pos>-1)
14a94                 | LR__1731
14a94     00 20 56 F2 | 	cmps	local02, #0 wc
14a98     40 00 90 CD |  if_b	jmp	#LR__1733
14a9c     0F FB 51 F6 | 	abs	result1, local01 wc
14aa0     0A FA 15 FD | 	qdiv	result1, #10
14aa4                 | '     q:=j//10
14aa4     19 FA 61 FD | 	getqy	result1
14aa8     FD FA 81 F6 | 	negc	result1, result1
14aac     0F 1F 52 F6 | 	abs	local01, local01 wc
14ab0     0A 1E 16 FD | 	qdiv	local01, #10
14ab4                 | '     q:=48+q
14ab4     30 FA 05 F1 | 	add	result1, #48
14ab8                 | '     n_string[pos]:=q
14ab8     10 1F 02 F6 | 	mov	local01, local02
14abc     49 E4 05 F1 | 	add	objptr, #73
14ac0     F2 1E 02 F1 | 	add	local01, objptr
14ac4     0F FB 41 FC | 	wrbyte	result1, local01
14ac8                 | '     j:=j/10
14ac8     49 E4 85 F1 | 	sub	objptr, #73
14acc                 | '     pos-=1
14acc     01 20 86 F1 | 	sub	local02, #1
14ad0     18 1E 62 FD | 	getqx	local01
14ad4     0F 1F 82 F6 | 	negc	local01, local01
14ad8     B8 FF 9F FD | 	jmp	#LR__1731
14adc                 | LR__1732
14adc                 | LR__1733
14adc                 | '   repeat while n_string[0]==48
14adc                 | LR__1734
14adc     49 E4 05 F1 | 	add	objptr, #73
14ae0     F2 16 C2 FA | 	rdbyte	arg03, objptr
14ae4     49 E4 85 F1 | 	sub	objptr, #73
14ae8     30 16 0E F2 | 	cmp	arg03, #48 wz
14aec     20 00 90 5D |  if_ne	jmp	#LR__1735
14af0                 | '     bytemove(@n_string,@n_string+1,12)
14af0     49 E4 05 F1 | 	add	objptr, #73
14af4     F2 12 02 F6 | 	mov	arg01, objptr
14af8     F2 14 02 F6 | 	mov	arg02, objptr
14afc     49 E4 85 F1 | 	sub	objptr, #73
14b00     01 14 06 F1 | 	add	arg02, #1
14b04     0C 16 06 F6 | 	mov	arg03, #12
14b08     84 0C B0 FD | 	call	#__system____builtin_memmove
14b0c     CC FF 9F FD | 	jmp	#LR__1734
14b10                 | LR__1735
14b10                 | ' 
14b10                 | '   if k==45
14b10     2D 22 0E F2 | 	cmp	local03, #45 wz
14b14     28 00 90 5D |  if_ne	jmp	#LR__1736
14b18                 | '      bytemove(@n_string+1,@n_string,12)
14b18     49 E4 05 F1 | 	add	objptr, #73
14b1c     F2 12 02 F6 | 	mov	arg01, objptr
14b20     01 12 06 F1 | 	add	arg01, #1
14b24     F2 14 02 F6 | 	mov	arg02, objptr
14b28     49 E4 85 F1 | 	sub	objptr, #73
14b2c     0C 16 06 F6 | 	mov	arg03, #12
14b30     5C 0C B0 FD | 	call	#__system____builtin_memmove
14b34                 | '      n_string[0]:=k
14b34     49 E4 05 F1 | 	add	objptr, #73
14b38     F2 22 42 FC | 	wrbyte	local03, objptr
14b3c     49 E4 85 F1 | 	sub	objptr, #73
14b40                 | LR__1736
14b40                 | LR__1737
14b40                 | ' 
14b40                 | ' q:=@n_string
14b40     49 E4 05 F1 | 	add	objptr, #73
14b44     F2 FA 01 F6 | 	mov	result1, objptr
14b48     49 E4 85 F1 | 	sub	objptr, #73
14b4c                 | ' return q
14b4c     A7 F0 03 F6 | 	mov	ptra, fp
14b50     B2 00 A0 FD | 	call	#popregs_
14b54                 | _hg010b_spin2_inttostr_ret
14b54     2D 00 64 FD | 	ret
14b58                 | 
14b58                 | ' 
14b58                 | ' '..............................................................................
14b58                 | ' 
14b58                 | ' {{
14b58                 | ' }}
14b58                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
14b58                 | _psram_spin2_startx
14b58     04 4A 05 F6 | 	mov	COUNT_, #4
14b5c     A8 00 A0 FD | 	call	#pushregs_
14b60     09 1F 02 F6 | 	mov	local01, arg01
14b64     0B 21 02 F6 | 	mov	local02, arg03
14b68     0C 23 02 F6 | 	mov	local03, arg04
14b6c                 | '     stop() ' restart driver if required
14b6c     54 01 B0 FD | 	call	#_psram_spin2_stop
14b70     00 1E 0E F2 | 	cmp	local01, #0 wz
14b74     14 1E 06 AB |  if_e	rdlong	local01, #20
14b78     0F 15 52 F6 | 	abs	arg02, local01 wc
14b7c     A1 07 00 FF 
14b80     40 14 16 FD | 	qdiv	arg02, ##1000000
14b84                 | ' 
14b84                 | '     ' use current frequency if none specified
14b84                 | ' 
14b84                 | '     if freq == 0 
14b84                 | '         freq := clkfreq 
14b84                 | ' 
14b84                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
14b84                 | ' 
14b84                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
14b84                 | '     if burst < 0
14b84                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
14b84     18 14 62 FD | 	getqx	arg02
14b88     0A 19 82 F6 | 	negc	arg04, arg02
14b8c     03 18 66 F0 | 	shl	arg04, #3
14b90     84 18 86 F1 | 	sub	arg04, #132
14b94     04 18 46 F0 | 	shr	arg04, #4
14b98     04 18 66 F0 | 	shl	arg04, #4
14b9c     00 18 56 F2 | 	cmps	arg04, #0 wc
14ba0     0E FA 65 C6 |  if_b	neg	result1, #14
14ba4     10 01 90 CD |  if_b	jmp	#LR__1743
14ba8                 | ' 
14ba8                 | '     ' compute the input delay
14ba8                 | ' 
14ba8                 | '     if delay <= 0
14ba8     01 20 56 F2 | 	cmps	local02, #1 wc
14bac     10 00 90 3D |  if_ae	jmp	#LR__1740
14bb0                 | '         delay := lookupDelay(freq)
14bb0     0F 13 02 F6 | 	mov	arg01, local01
14bb4     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
14bb8     FD 20 02 F6 | 	mov	local02, result1
14bbc     04 00 90 FD | 	jmp	#LR__1741
14bc0                 | LR__1740
14bc0                 | '     else
14bc0                 | '         delay <#= $f ' limit to 15
14bc0     0F 20 66 F3 | 	fles	local02, #15
14bc4                 | LR__1741
14bc4                 | ' 
14bc4                 | '     ' create our lock
14bc4                 | ' 
14bc4                 | '     driverlock := LOCKNEW()  
14bc4     00 FA 05 F6 | 	mov	result1, #0
14bc8     04 FA 61 FD | 	locknew	result1
14bcc     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
14bd0     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
14bd4                 | '     if driverlock == -1
14bd4     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
14bd8     FF FF 7F FF 
14bdc     FF FB 0D F2 | 	cmp	result1, ##-1 wz
14be0                 | '         return ERR_NO_LOCK
14be0     1A FA 65 A6 |  if_e	neg	result1, #26
14be4     D0 00 90 AD |  if_e	jmp	#LR__1743
14be8                 | ' 
14be8                 | '     ' patch in the proper data and HUB addresses to the startup structure
14be8                 | ' 
14be8                 | '     long[@startupData][0]:=clkfreq
14be8     14 1E 06 FB | 	rdlong	local01, #20
14bec     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
14bf0     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
14bf4                 | ' '    long[@startupData][1]:=$1000_0000
14bf4                 | '     long[@startupData][5]:=@deviceData
14bf4     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
14bf8     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
14bfc     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
14c00     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
14c04     14 14 06 F1 | 	add	arg02, #20
14c08     0A 1F 62 FC | 	wrlong	local01, arg02
14c0c                 | '     long[@startupData][6]:=@qosData
14c0c     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
14c10     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
14c14     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
14c18     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
14c1c     18 14 06 F1 | 	add	arg02, #24
14c20     0A 1F 62 FC | 	wrlong	local01, arg02
14c24                 | '     long[@startupData][7]:=$7FF00
14c24     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
14c28     1C 1E 06 F1 | 	add	local01, #28
14c2c     FF 03 80 FF 
14c30     0F 01 6A FC | 	wrlong	##524032, local01
14c34                 | ' 
14c34                 | '     ' setup some default bank and QoS parameter values
14c34                 | ' 
14c34                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
14c34     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
14c38     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
14c3c     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
14c40     10 18 66 F0 | 	shl	arg04, #16
14c44     0C 20 66 F0 | 	shl	local02, #12
14c48     10 19 42 F5 | 	or	arg04, local02
14c4c     18 18 46 F5 | 	or	arg04, #24
14c50     0C 15 02 F6 | 	mov	arg02, arg04
14c54     02 16 06 F6 | 	mov	arg03, #2
14c58     A0 00 A0 FD | 	call	#\builtin_longfill_
14c5c                 | '     longfill(@qosData, $FFFF0000, 8)
14c5c     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
14c60     07 16 06 F6 | 	mov	arg03, #7
14c64     28 16 62 FD | 	setq	arg03
14c68     80 FF FF FF 
14c6c     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
14c70                 | ' 
14c70                 | '     ' get the address of the PSRAM memory driver so we can start it
14c70                 | ' 
14c70                 | '     driverAddr:= driver.getDriverAddr()
14c70                 | '     return @driver_start
14c70     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
14c74     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
14c78     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
14c7c                 | ' 
14c7c                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
14c7c                 | ' 
14c7c                 | '     if desiredcog < 0
14c7c     00 22 56 F2 | 	cmps	local03, #0 wc
14c80                 | '         desiredcog := NEWCOG
14c80     10 22 06 C6 |  if_b	mov	local03, #16
14c84                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
14c84     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
14c88     11 25 02 F6 | 	mov	local04, local03
14c8c     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
14c90     0A 25 F2 FC | 	coginit	local04, arg02 wc
14c94     01 24 66 C6 |  if_b	neg	local04, #1
14c98     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
14c9c     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
14ca0                 | '     repeat until long[@startupData] == 0 
14ca0     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
14ca4                 | LR__1742
14ca4     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
14ca8     F8 FF 9F 5D |  if_ne	jmp	#LR__1742
14cac                 | ' 
14cac                 | '     return drivercog
14cac     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
14cb0     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
14cb4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14cb8                 | LR__1743
14cb8     A7 F0 03 F6 | 	mov	ptra, fp
14cbc     B2 00 A0 FD | 	call	#popregs_
14cc0                 | _psram_spin2_startx_ret
14cc0     2D 00 64 FD | 	ret
14cc4                 | 
14cc4                 | ' 
14cc4                 | ' '..............................................................................
14cc4                 | ' 
14cc4                 | ' {{
14cc4                 | ' }}
14cc4                 | ' PUB stop() : i
14cc4                 | _psram_spin2_stop
14cc4     00 00 06 F6 | 	mov	_var01, #0
14cc8                 | '     if drivercog <> -1
14cc8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
14ccc     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
14cd0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14cd4     FF FF 7F FF 
14cd8     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
14cdc     70 00 90 AD |  if_e	jmp	#LR__1753
14ce0                 | '         cogstop(drivercog) ' a rather brutal stop
14ce0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
14ce4     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
14ce8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14cec     03 12 62 FD | 	cogstop	arg01
14cf0     97 26 48 FB | 	callpa	#(@LR__1752-@LR__1750)>>2,fcache_load_ptr_
14cf4                 | '         repeat i from 0 to 7
14cf4                 | LR__1750
14cf4                 | '             if long[$7FF00][i*3] < 0
14cf4     00 FB 01 F6 | 	mov	result1, _var01
14cf8     01 FA 65 F0 | 	shl	result1, #1
14cfc     00 FB 01 F1 | 	add	result1, _var01
14d00     02 FA 65 F0 | 	shl	result1, #2
14d04     FF 03 00 FF 
14d08     00 FB 05 F1 | 	add	result1, ##524032
14d0c     FD FA 01 FB | 	rdlong	result1, result1
14d10     00 FA 55 F2 | 	cmps	result1, #0 wc
14d14     1C 00 90 3D |  if_ae	jmp	#LR__1751
14d18                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
14d18     00 FB 01 F6 | 	mov	result1, _var01
14d1c     01 FA 65 F0 | 	shl	result1, #1
14d20     00 FB 01 F1 | 	add	result1, _var01
14d24     02 FA 65 F0 | 	shl	result1, #2
14d28     FF 03 00 FF 
14d2c     00 FB 05 F1 | 	add	result1, ##524032
14d30     FD 20 68 FC | 	wrlong	#16, result1
14d34                 | LR__1751
14d34     01 00 06 F1 | 	add	_var01, #1
14d38     08 00 56 F2 | 	cmps	_var01, #8 wc
14d3c     B4 FF 9F CD |  if_b	jmp	#LR__1750
14d40                 | LR__1752
14d40                 | '         drivercog := -1
14d40     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
14d44     FF FF FF FF 
14d48     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
14d4c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14d50                 | LR__1753
14d50                 | '     if driverlock <> -1
14d50     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
14d54     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
14d58     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
14d5c     FF FF 7F FF 
14d60     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
14d64                 | '         LOCKRET(driverlock)
14d64     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
14d68     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
14d6c     05 12 62 5D |  if_ne	lockret	arg01
14d70                 | '         driverlock := -1
14d70     FF FF FF 5F 
14d74     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
14d78     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
14d7c     00 FB 01 F6 | 	mov	result1, _var01
14d80                 | _psram_spin2_stop_ret
14d80     2D 00 64 FD | 	ret
14d84                 | 
14d84                 | ' 
14d84                 | ' '..............................................................................
14d84                 | ' 
14d84                 | ' {{
14d84                 | ' }}
14d84                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
14d84                 | _psram_spin2_read1
14d84                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
14d84                 | '     if drivercog == -1 ' driver must be running
14d84     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
14d88     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
14d8c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14d90     FF FF 7F FF 
14d94     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
14d98                 | '         return ERR_INACTIVE
14d98     0F FA 65 A6 |  if_e	neg	result1, #15
14d9c     7C 00 90 AD |  if_e	jmp	#LR__1761
14da0                 | '     if count == 0 ' don't even bother reading
14da0     00 16 0E F2 | 	cmp	arg03, #0 wz
14da4                 | '         return 0
14da4     00 FA 05 A6 |  if_e	mov	result1, #0
14da8     70 00 90 AD |  if_e	jmp	#LR__1761
14dac                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
14dac     00 FA 05 F6 | 	mov	result1, #0
14db0     01 FA 61 FD | 	cogid	result1
14db4     FD 00 02 F6 | 	mov	_var01, result1
14db8     01 00 66 F0 | 	shl	_var01, #1
14dbc     FD 00 02 F1 | 	add	_var01, result1
14dc0     02 00 66 F0 | 	shl	_var01, #2
14dc4     FF 03 00 FF 
14dc8     00 03 06 F6 | 	mov	_var02, ##524032
14dcc     00 03 02 F1 | 	add	_var02, _var01
14dd0                 | '     if long[mailbox] < 0
14dd0     01 01 02 FB | 	rdlong	_var01, _var02
14dd4     00 00 56 F2 | 	cmps	_var01, #0 wc
14dd8                 | '         return ERR_MAILBOX_BUSY
14dd8     1C FA 65 C6 |  if_b	neg	result1, #28
14ddc     3C 00 90 CD |  if_b	jmp	#LR__1761
14de0                 | '     long[mailbox][2] := count
14de0     08 02 06 F1 | 	add	_var02, #8
14de4     01 17 62 FC | 	wrlong	arg03, _var02
14de8                 | '     long[mailbox][1] := dstHubAddr
14de8     04 02 86 F1 | 	sub	_var02, #4
14dec     01 13 62 FC | 	wrlong	arg01, _var02
14df0     04 02 86 F1 | 	sub	_var02, #4
14df4                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
14df4     0A 05 02 F6 | 	mov	_var03, arg02
14df8     D9 04 06 F4 | 	bitl	_var03, #217
14dfc     00 00 58 FF 
14e00     00 00 06 F6 | 	mov	_var01, ##-1342177280
14e04     02 01 02 F1 | 	add	_var01, _var03
14e08     01 01 62 FC | 	wrlong	_var01, _var02
14e0c                 | '     repeat
14e0c                 | LR__1760
14e0c                 | '         result := long[mailbox]    
14e0c     01 05 02 FB | 	rdlong	_var03, _var02
14e10     00 04 56 F2 | 	cmps	_var03, #0 wc
14e14     F4 FF 9F CD |  if_b	jmp	#LR__1760
14e18                 | '     while result < 0   
14e18                 | '     return -result                       'return success or error
14e18     02 FB 61 F6 | 	neg	result1, _var03
14e1c                 | LR__1761
14e1c                 | _psram_spin2_read1_ret
14e1c     2D 00 64 FD | 	ret
14e20                 | 
14e20                 | ' 
14e20                 | ' '..............................................................................
14e20                 | ' 
14e20                 | ' {{
14e20                 | ' }}
14e20                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
14e20                 | _psram_spin2_write
14e20                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
14e20                 | '     if drivercog == -1 ' driver must be running
14e20     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
14e24     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
14e28     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14e2c     FF FF 7F FF 
14e30     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
14e34                 | '         return ERR_INACTIVE
14e34     0F FA 65 A6 |  if_e	neg	result1, #15
14e38     7C 00 90 AD |  if_e	jmp	#LR__1771
14e3c                 | '     if count == 0 ' don't even bother writing
14e3c     00 16 0E F2 | 	cmp	arg03, #0 wz
14e40                 | '         return 0
14e40     00 FA 05 A6 |  if_e	mov	result1, #0
14e44     70 00 90 AD |  if_e	jmp	#LR__1771
14e48                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
14e48     00 FA 05 F6 | 	mov	result1, #0
14e4c     01 FA 61 FD | 	cogid	result1
14e50     FD 00 02 F6 | 	mov	_var01, result1
14e54     01 00 66 F0 | 	shl	_var01, #1
14e58     FD 00 02 F1 | 	add	_var01, result1
14e5c     02 00 66 F0 | 	shl	_var01, #2
14e60     FF 03 00 FF 
14e64     00 03 06 F6 | 	mov	_var02, ##524032
14e68     00 03 02 F1 | 	add	_var02, _var01
14e6c                 | '     if long[mailbox] < 0
14e6c     01 01 02 FB | 	rdlong	_var01, _var02
14e70     00 00 56 F2 | 	cmps	_var01, #0 wc
14e74                 | '         return ERR_MAILBOX_BUSY
14e74     1C FA 65 C6 |  if_b	neg	result1, #28
14e78     3C 00 90 CD |  if_b	jmp	#LR__1771
14e7c                 | '     long[mailbox][2] := count
14e7c     08 02 06 F1 | 	add	_var02, #8
14e80     01 17 62 FC | 	wrlong	arg03, _var02
14e84                 | '     long[mailbox][1] := srcHubAddr
14e84     04 02 86 F1 | 	sub	_var02, #4
14e88     01 13 62 FC | 	wrlong	arg01, _var02
14e8c     04 02 86 F1 | 	sub	_var02, #4
14e90                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
14e90     0A 05 02 F6 | 	mov	_var03, arg02
14e94     D9 04 06 F4 | 	bitl	_var03, #217
14e98     00 00 78 FF 
14e9c     00 00 06 F6 | 	mov	_var01, ##-268435456
14ea0     02 01 02 F1 | 	add	_var01, _var03
14ea4     01 01 62 FC | 	wrlong	_var01, _var02
14ea8                 | '     repeat
14ea8                 | LR__1770
14ea8                 | '         result := long[mailbox]    
14ea8     01 05 02 FB | 	rdlong	_var03, _var02
14eac     00 04 56 F2 | 	cmps	_var03, #0 wc
14eb0     F4 FF 9F CD |  if_b	jmp	#LR__1770
14eb4                 | '     while result < 0   
14eb4                 | '     return -result                       'return success or error
14eb4     02 FB 61 F6 | 	neg	result1, _var03
14eb8                 | LR__1771
14eb8                 | _psram_spin2_write_ret
14eb8     2D 00 64 FD | 	ret
14ebc                 | 
14ebc                 | ' 
14ebc                 | ' ' generalized fill
14ebc                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
14ebc                 | _psram_spin2_fill
14ebc     09 01 02 F6 | 	mov	_var01, arg01
14ec0     0A 03 02 F6 | 	mov	_var02, arg02
14ec4     0B 05 02 F6 | 	mov	_var03, arg03
14ec8     0D 07 02 F6 | 	mov	_var04, arg05
14ecc                 | '     case datasize 
14ecc     01 06 86 F1 | 	sub	_var04, #1
14ed0     04 06 26 F3 | 	fle	_var04, #4
14ed4     30 06 62 FD | 	jmprel	_var04
14ed8                 | LR__1780
14ed8     10 00 90 FD | 	jmp	#LR__1781
14edc     18 00 90 FD | 	jmp	#LR__1782
14ee0     2C 00 90 FD | 	jmp	#LR__1784
14ee4     1C 00 90 FD | 	jmp	#LR__1783
14ee8     24 00 90 FD | 	jmp	#LR__1784
14eec                 | LR__1781
14eec                 | '         1: req := driver.R_WRITEBYTE
14eec     00 00 60 FF 
14ef0     00 08 06 F6 | 	mov	_var05, ##-1073741824
14ef4     20 00 90 FD | 	jmp	#LR__1785
14ef8                 | LR__1782
14ef8                 | '         2: req := driver.R_WRITEWORD
14ef8     00 00 68 FF 
14efc     00 08 06 F6 | 	mov	_var05, ##-805306368
14f00     14 00 90 FD | 	jmp	#LR__1785
14f04                 | LR__1783
14f04                 | '         4: req := driver.R_WRITELONG
14f04     00 00 70 FF 
14f08     00 08 06 F6 | 	mov	_var05, ##-536870912
14f0c     08 00 90 FD | 	jmp	#LR__1785
14f10                 | LR__1784
14f10                 | '         other : return ERR_INVALID
14f10     06 FA 65 F6 | 	neg	result1, #6
14f14     94 00 90 FD | 	jmp	#LR__1787
14f18                 | LR__1785
14f18                 | '     if count == 0   ' nothing to do
14f18     00 04 0E F2 | 	cmp	_var03, #0 wz
14f1c                 | '         return 0
14f1c     00 FA 05 A6 |  if_e	mov	result1, #0
14f20     88 00 90 AD |  if_e	jmp	#LR__1787
14f24                 | '     if drivercog == -1
14f24     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
14f28     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
14f2c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14f30     FF FF 7F FF 
14f34     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
14f38                 | '         return ERR_INACTIVE
14f38     0F FA 65 A6 |  if_e	neg	result1, #15
14f3c     6C 00 90 AD |  if_e	jmp	#LR__1787
14f40                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
14f40     00 FA 05 F6 | 	mov	result1, #0
14f44     01 FA 61 FD | 	cogid	result1
14f48     FD 06 02 F6 | 	mov	_var04, result1
14f4c     01 06 66 F0 | 	shl	_var04, #1
14f50     FD 06 02 F1 | 	add	_var04, result1
14f54     02 06 66 F0 | 	shl	_var04, #2
14f58     FF 03 00 FF 
14f5c     00 0B 06 F6 | 	mov	_var06, ##524032
14f60     03 0B 02 F1 | 	add	_var06, _var04
14f64                 | '     if long[mailbox] < 0
14f64     05 07 02 FB | 	rdlong	_var04, _var06
14f68     00 06 56 F2 | 	cmps	_var04, #0 wc
14f6c                 | '         return ERR_MAILBOX_BUSY
14f6c     1C FA 65 C6 |  if_b	neg	result1, #28
14f70     38 00 90 CD |  if_b	jmp	#LR__1787
14f74                 | '     long[mailbox][2] := count
14f74     08 0A 06 F1 | 	add	_var06, #8
14f78     05 05 62 FC | 	wrlong	_var03, _var06
14f7c                 | '     long[mailbox][1] := pattern
14f7c     04 0A 86 F1 | 	sub	_var06, #4
14f80     05 03 62 FC | 	wrlong	_var02, _var06
14f84     04 0A 86 F1 | 	sub	_var06, #4
14f88                 | '     long[mailbox] := req + (addr & $fffffff)
14f88     04 0D 02 F6 | 	mov	_var07, _var05
14f8c     00 0F 02 F6 | 	mov	_var08, _var01
14f90     7C 0E 06 F4 | 	bitl	_var08, #124
14f94     07 0D 02 F1 | 	add	_var07, _var08
14f98     05 0D 62 FC | 	wrlong	_var07, _var06
14f9c                 | '     repeat
14f9c                 | LR__1786
14f9c                 | '         r := long[mailbox]
14f9c     05 0F 02 FB | 	rdlong	_var08, _var06
14fa0     00 0E 56 F2 | 	cmps	_var08, #0 wc
14fa4     F4 FF 9F CD |  if_b	jmp	#LR__1786
14fa8                 | '     while r < 0
14fa8                 | '     return -r                  ' return 0 for success or negated error code
14fa8     07 FB 61 F6 | 	neg	result1, _var08
14fac                 | LR__1787
14fac                 | _psram_spin2_fill_ret
14fac     2D 00 64 FD | 	ret
14fb0                 | 
14fb0                 | ' 
14fb0                 | ' '..............................................................................
14fb0                 | ' 
14fb0                 | ' {{
14fb0                 | ' }}
14fb0                 | ' PUB setQos(cog, qos) : result | mailbox
14fb0                 | _psram_spin2_setQos
14fb0     09 01 02 F6 | 	mov	_var01, arg01
14fb4                 | '     if drivercog == -1 ' driver must be running
14fb4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
14fb8     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
14fbc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14fc0     FF FF 7F FF 
14fc4     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
14fc8                 | '         return ERR_INACTIVE
14fc8     0F FA 65 A6 |  if_e	neg	result1, #15
14fcc     9C 00 90 AD |  if_e	jmp	#LR__1794
14fd0                 | '     if cog < 0 or cog > 7 ' enforce cog id range
14fd0     00 00 56 F2 | 	cmps	_var01, #0 wc
14fd4     08 00 90 CD |  if_b	jmp	#LR__1790
14fd8     08 00 56 F2 | 	cmps	_var01, #8 wc
14fdc     08 00 90 CD |  if_b	jmp	#LR__1791
14fe0                 | LR__1790
14fe0                 | '         return ERR_INVALID
14fe0     06 FA 65 F6 | 	neg	result1, #6
14fe4     84 00 90 FD | 	jmp	#LR__1794
14fe8                 | LR__1791
14fe8                 | '     long[@qosData][cog] := qos & !$1ff
14fe8     FF 15 26 F5 | 	andn	arg02, #511
14fec     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
14ff0     02 00 66 F0 | 	shl	_var01, #2
14ff4     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
14ff8     00 15 62 FC | 	wrlong	arg02, _var01
14ffc                 | '     mailbox := $7FF00 + drivercog*12
14ffc     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
15000     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
15004     02 07 02 F6 | 	mov	_var04, _var03
15008     01 06 66 F0 | 	shl	_var04, #1
1500c     02 07 02 F1 | 	add	_var04, _var03
15010     02 06 66 F0 | 	shl	_var04, #2
15014     FF 03 00 FF 
15018     00 09 06 F6 | 	mov	_var05, ##524032
1501c     03 09 02 F1 | 	add	_var05, _var04
15020                 | '     repeat until LOCKTRY(driverlock)
15020     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
15024                 | LR__1792
15024     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
15028     06 12 72 FD | 	locktry	arg01 wc
1502c     F4 FF 9F 3D |  if_ae	jmp	#LR__1792
15030     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
15034                 | '     long[mailbox] := driver.R_CONFIG + cogid()
15034     00 06 06 F6 | 	mov	_var04, #0
15038     01 06 62 FD | 	cogid	_var04
1503c     00 00 78 FF 
15040     00 02 06 F6 | 	mov	_var02, ##-268435456
15044     03 03 02 F1 | 	add	_var02, _var04
15048     04 03 62 FC | 	wrlong	_var02, _var05
1504c                 | '     repeat while long[mailbox] < 0
1504c                 | LR__1793
1504c     04 03 02 FB | 	rdlong	_var02, _var05
15050     00 02 56 F2 | 	cmps	_var02, #0 wc
15054     F4 FF 9F CD |  if_b	jmp	#LR__1793
15058                 | '     LOCKREL(driverlock)
15058     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1505c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
15060     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
15064     07 12 72 FD | 	lockrel	arg01 wc
15068     00 FA 05 F6 | 	mov	result1, #0
1506c                 | LR__1794
1506c                 | _psram_spin2_setQos_ret
1506c     2D 00 64 FD | 	ret
15070                 | 
15070                 | ' 
15070                 | ' '..............................................................................
15070                 | ' 
15070                 | ' {{
15070                 | ' }}
15070                 | ' PRI lookupDelay(freq) : delay | profile
15070                 | _psram_spin2_lookupDelay
15070                 | '     profile := @delayTable
15070     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
15074     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
15078                 | '     delay := long[profile][0]
15078     00 03 02 FB | 	rdlong	_var02, _var01
1507c                 | '     repeat while long[profile][1] 
1507c     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
15080     97 16 48 FB | 	callpa	#(@LR__1801-@LR__1800)>>2,fcache_load_ptr_
15084                 | LR__1800
15084     04 00 06 F1 | 	add	_var01, #4
15088     00 FB 09 FB | 	rdlong	result1, _var01 wz
1508c     04 00 86 F1 | 	sub	_var01, #4
15090     1C 00 90 AD |  if_e	jmp	#LR__1802
15094                 | '         if freq +< long[profile][1] 
15094     04 00 06 F1 | 	add	_var01, #4
15098     00 FB 01 FB | 	rdlong	result1, _var01
1509c     04 00 86 F1 | 	sub	_var01, #4
150a0     FD 12 12 F2 | 	cmp	arg01, result1 wc
150a4                 | '             quit
150a4                 | '         profile += 4
150a4     04 00 06 31 |  if_ae	add	_var01, #4
150a8                 | '         delay++
150a8     01 02 06 31 |  if_ae	add	_var02, #1
150ac     D4 FF 9F 3D |  if_ae	jmp	#LR__1800
150b0                 | LR__1801
150b0                 | LR__1802
150b0     01 FB 01 F6 | 	mov	result1, _var02
150b4                 | _psram_spin2_lookupDelay_ret
150b4     2D 00 64 FD | 	ret
150b8                 | 
150b8                 | ' 
150b8                 | ' PUB start() : r
150b8                 | _usbnew_spin2_start
150b8     00 00 06 F6 | 	mov	_var01, #0
150bc                 | '   ifnot driver_cog
150bc     15 00 00 FF 
150c0     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
150c4     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
150c8     15 00 00 FF 
150cc     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
150d0     38 00 90 5D |  if_ne	jmp	#LR__1810
150d4                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
150d4     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
150d8     10 00 06 F6 | 	mov	_var01, #16
150dc     00 16 06 F6 | 	mov	arg03, #0
150e0     28 16 62 FD | 	setq	arg03
150e4     0A 01 F2 FC | 	coginit	_var01, arg02 wc
150e8     01 00 66 C6 |  if_b	neg	_var01, #1
150ec                 | '     if r >= 0
150ec     00 00 56 F2 | 	cmps	_var01, #0 wc
150f0                 | '       driver_cog := r+1
150f0     00 03 02 36 |  if_ae	mov	_var02, _var01
150f4     01 02 06 31 |  if_ae	add	_var02, #1
150f8     15 00 00 3F 
150fc     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
15100     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
15104     15 00 00 3F 
15108     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
1510c                 | LR__1810
1510c     00 FB 01 F6 | 	mov	result1, _var01
15110                 | _usbnew_spin2_start_ret
15110     2D 00 64 FD | 	ret
15114                 | 
15114                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
15114                 | ' 
15114                 | ' '' Return key event from buffer if there is one
15114                 | ' PUB get_key() : r | tail
15114                 | _usbnew_spin2_get_key
15114                 | '   tail := keyq_tail
15114     0F 00 00 FF 
15118     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
1511c     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
15120                 | '   if keyq_head == tail
15120     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
15124     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
15128     0F 00 00 FF 
1512c     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
15130     00 03 0A F2 | 	cmp	_var02, _var01 wz
15134                 | '     return 0 ' No event
15134     00 FA 05 A6 |  if_e	mov	result1, #0
15138     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
1513c                 | '   r := keyq_data[tail]
1513c     00 03 02 F6 | 	mov	_var02, _var01
15140     02 02 66 F0 | 	shl	_var02, #2
15144     0F 00 00 FF 
15148     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
1514c     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
15150     01 FB 01 FB | 	rdlong	result1, _var02
15154                 | '   if ++tail == KEYQUEUE_SIZE
15154     01 00 06 F1 | 	add	_var01, #1
15158     80 00 0E F2 | 	cmp	_var01, #128 wz
1515c                 | '     tail := 0
1515c     00 00 06 A6 |  if_e	mov	_var01, #0
15160                 | '   keyq_tail := tail
15160     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
15164     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
15168     0F 00 00 FF 
1516c     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
15170                 | _usbnew_spin2_get_key_ret
15170     2D 00 64 FD | 	ret
15174                 | 
15174                 | ' 
15174                 | ' '' Emulate mouse movement
15174                 | ' PUB mouse_move(x,y)
15174                 | _usbnew_spin2_mouse_move
15174     02 4A 05 F6 | 	mov	COUNT_, #2
15178     A8 00 A0 FD | 	call	#pushregs_
1517c     09 1F 02 F6 | 	mov	local01, arg01
15180     0A 21 02 F6 | 	mov	local02, arg02
15184                 | '   mouse_lock := 1
15184     14 00 00 FF 
15188     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1518c     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
15190     14 00 00 FF 
15194     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
15198                 | '   waitus(2) ' hope driver is now done
15198     02 12 06 F6 | 	mov	arg01, #2
1519c     30 0A B0 FD | 	call	#__system___waitus
151a0                 | '   mouse_xacc := x
151a0     14 00 00 FF 
151a4     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
151a8     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
151ac                 | '   mouse_yacc := y
151ac     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
151b0     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
151b4                 | '   if mouse_outptr
151b4     04 00 00 FF 
151b8     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
151bc     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
151c0     0F 00 00 FF 
151c4     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
151c8     24 00 90 AD |  if_e	jmp	#LR__1820
151cc                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
151cc     10 20 66 F0 | 	shl	local02, #16
151d0     0F 1F 32 F9 | 	getword	local01, local01, #0
151d4     0F 21 42 F5 | 	or	local02, local01
151d8     0F 00 00 FF 
151dc     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
151e0     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
151e4     0F 00 00 FF 
151e8     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
151ec     0F 21 62 FC | 	wrlong	local02, local01
151f0                 | LR__1820
151f0                 | '   mouse_lock := 0
151f0     14 00 00 FF 
151f4     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
151f8     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
151fc     14 00 00 FF 
15200     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
15204     A7 F0 03 F6 | 	mov	ptra, fp
15208     B2 00 A0 FD | 	call	#popregs_
1520c                 | _usbnew_spin2_mouse_move_ret
1520c     2D 00 64 FD | 	ret
15210                 | 
15210                 | '     '' Set HAVE_HIDPAD to enable.
15210                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
15210                 | ' 
15210                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
15210                 | ' PUB hidpad_id(dev) : r
15210                 | _usbnew_spin2_hidpad_id
15210                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
15210     13 00 00 FF 
15214     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
15218     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1521c     09 01 02 F6 | 	mov	_var01, arg01
15220     03 00 66 F0 | 	shl	_var01, #3
15224     09 01 82 F1 | 	sub	_var01, arg01
15228     02 00 66 F0 | 	shl	_var01, #2
1522c     00 FB 01 F1 | 	add	result1, _var01
15230     FD FA 01 FB | 	rdlong	result1, result1
15234     13 00 00 FF 
15238     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1523c                 | _usbnew_spin2_hidpad_id_ret
1523c     2D 00 64 FD | 	ret
15240                 | 
15240                 | ' 
15240                 | ' '' Get all button states for a device
15240                 | ' PUB hidpad_buttons(dev) : r 
15240                 | _usbnew_spin2_hidpad_buttons
15240                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
15240     13 00 00 FF 
15244     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
15248     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1524c     09 01 02 F6 | 	mov	_var01, arg01
15250     03 00 66 F0 | 	shl	_var01, #3
15254     09 01 82 F1 | 	sub	_var01, arg01
15258     02 00 66 F0 | 	shl	_var01, #2
1525c     00 FB 01 F1 | 	add	result1, _var01
15260     14 FA 05 F1 | 	add	result1, #20
15264     FD FA 01 FB | 	rdlong	result1, result1
15268     13 00 00 FF 
1526c     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
15270                 | _usbnew_spin2_hidpad_buttons_ret
15270     2D 00 64 FD | 	ret
15274                 | 
15274                 | ' 
15274                 | ' '' Get state of an axis (normalized between -32768 and 32767)
15274                 | ' PUB hidpad_axis(dev,axnum) : r
15274                 | _usbnew_spin2_hidpad_axis
15274                 | '   if axnum +>= 6
15274     06 14 16 F2 | 	cmp	arg02, #6 wc
15278                 | '     return 0
15278     00 FA 05 36 |  if_ae	mov	result1, #0
1527c     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
15280                 | '   else 
15280                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
15280     13 00 00 FF 
15284     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
15288     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1528c     09 01 02 F6 | 	mov	_var01, arg01
15290     03 00 66 F0 | 	shl	_var01, #3
15294     09 01 82 F1 | 	sub	_var01, arg01
15298     02 00 66 F0 | 	shl	_var01, #2
1529c     00 FB 01 F1 | 	add	result1, _var01
152a0     04 00 06 F6 | 	mov	_var01, #4
152a4     0A 01 02 F1 | 	add	_var01, arg02
152a8     01 00 66 F0 | 	shl	_var01, #1
152ac     FD 00 02 F1 | 	add	_var01, result1
152b0     00 FB E1 FA | 	rdword	result1, _var01
152b4     0F FA 65 F7 | 	signx	result1, #15
152b8     13 00 00 FF 
152bc     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
152c0                 | _usbnew_spin2_hidpad_axis_ret
152c0     2D 00 64 FD | 	ret
152c4                 | 
152c4                 | ' 
152c4                 | ' 
152c4                 | ' '--------------------------------------------------------------
152c4                 | ' '---------- Init the variables, start the cog. ----------------
152c4                 | ' '--------------------------------------------------------------
152c4                 | ' 
152c4                 | ' pub start(mbox,scope,cache) :cog,base | iii
152c4                 | _Audio093b_8_sc_spin2_start
152c4     04 4A 05 F6 | 	mov	COUNT_, #4
152c8     A8 00 A0 FD | 	call	#pushregs_
152cc     09 1F 02 F6 | 	mov	local01, arg01
152d0                 | ' 
152d0                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
152d0                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
152d0                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
152d0                 | ' 
152d0                 | ' mailboxaddr:=mbox 
152d0     F2 1E 62 FC | 	wrlong	local01, objptr
152d4                 | ' scope_ptr:=scope
152d4     04 E4 05 F1 | 	add	objptr, #4
152d8     F2 14 62 FC | 	wrlong	arg02, objptr
152dc                 | ' cache_ptr:=cache
152dc     04 E4 05 F1 | 	add	objptr, #4
152e0     F2 16 62 FC | 	wrlong	arg03, objptr
152e4                 | ' base:=@channel1[0]
152e4     04 E4 05 F1 | 	add	objptr, #4
152e8     F2 20 02 F6 | 	mov	local02, objptr
152ec                 | ' 
152ec                 | ' repeat iii from 0 to 7
152ec     00 22 06 F6 | 	mov	local03, #0
152f0     01 00 00 FF 
152f4     D8 E7 05 F1 | 	add	ptr__Audio093b_8_sc_spin2_dat__, ##984
152f8     0C E4 85 F1 | 	sub	objptr, #12
152fc     97 80 48 FB | 	callpa	#(@LR__1831-@LR__1830)>>2,fcache_load_ptr_
15300                 | LR__1830
15300                 | '   long[base+32*iii]:=0
15300     10 1F 02 F6 | 	mov	local01, local02
15304     11 FD 01 F6 | 	mov	result2, local03
15308     05 FC 65 F0 | 	shl	result2, #5
1530c     FE 1E 02 F1 | 	add	local01, result2
15310     0F 01 68 FC | 	wrlong	#0, local01
15314                 | '   long[base+32*iii+4]:=0
15314     10 1F 02 F6 | 	mov	local01, local02
15318     11 FD 01 F6 | 	mov	result2, local03
1531c     05 FC 65 F0 | 	shl	result2, #5
15320     FE 1E 02 F1 | 	add	local01, result2
15324     04 1E 06 F1 | 	add	local01, #4
15328     0F 01 68 FC | 	wrlong	#0, local01
1532c                 | '   long[base+32*iii+12]:=0
1532c     10 25 02 F6 | 	mov	local04, local02
15330     11 1F 02 F6 | 	mov	local01, local03
15334     05 1E 66 F0 | 	shl	local01, #5
15338     0F 25 02 F1 | 	add	local04, local01
1533c     0C 24 06 F1 | 	add	local04, #12
15340     12 01 68 FC | 	wrlong	#0, local04
15344                 | '   long[base+32*iii+16]:=2 
15344     10 25 02 F6 | 	mov	local04, local02
15348     11 1F 02 F6 | 	mov	local01, local03
1534c     05 1E 66 F0 | 	shl	local01, #5
15350     0F 25 02 F1 | 	add	local04, local01
15354     10 24 06 F1 | 	add	local04, #16
15358     12 05 68 FC | 	wrlong	#2, local04
1535c                 | '   word[base+32*iii+20]:=0
1535c     10 25 02 F6 | 	mov	local04, local02
15360     11 1F 02 F6 | 	mov	local01, local03
15364     05 1E 66 F0 | 	shl	local01, #5
15368     0F 25 02 F1 | 	add	local04, local01
1536c     14 24 06 F1 | 	add	local04, #20
15370     12 01 58 FC | 	wrword	#0, local04
15374                 | '   word[base+32*iii+22]:=8192
15374     10 25 02 F6 | 	mov	local04, local02
15378     11 1F 02 F6 | 	mov	local01, local03
1537c     05 1E 66 F0 | 	shl	local01, #5
15380     0F 25 02 F1 | 	add	local04, local01
15384     16 24 06 F1 | 	add	local04, #22
15388     10 00 80 FF 
1538c     12 01 58 FC | 	wrword	##8192, local04
15390                 | '   word[base+32*iii+24]:=4000+2*iii
15390     11 25 02 F6 | 	mov	local04, local03
15394     01 24 66 F0 | 	shl	local04, #1
15398     07 00 00 FF 
1539c     A0 1F 06 F6 | 	mov	local01, ##4000
153a0     12 1F 02 F1 | 	add	local01, local04
153a4     10 25 02 F6 | 	mov	local04, local02
153a8     11 FD 01 F6 | 	mov	result2, local03
153ac     05 FC 65 F0 | 	shl	result2, #5
153b0     FE 24 02 F1 | 	add	local04, result2
153b4     18 24 06 F1 | 	add	local04, #24
153b8     12 1F 52 FC | 	wrword	local01, local04
153bc                 | '   word[base+32*iii+26]:=2
153bc     10 25 02 F6 | 	mov	local04, local02
153c0     11 1F 02 F6 | 	mov	local01, local03
153c4     05 1E 66 F0 | 	shl	local01, #5
153c8     0F 25 02 F1 | 	add	local04, local01
153cc     1A 24 06 F1 | 	add	local04, #26
153d0     12 05 58 FC | 	wrword	#2, local04
153d4                 | '   long [base+32*iii+8]:=@null | $C0000000
153d4     F3 1E 02 F6 | 	mov	local01, ptr__Audio093b_8_sc_spin2_dat__
153d8     3E 1E 26 F4 | 	bith	local01, #62
153dc     10 25 02 F6 | 	mov	local04, local02
153e0     11 17 02 F6 | 	mov	arg03, local03
153e4     05 16 66 F0 | 	shl	arg03, #5
153e8     0B 25 02 F1 | 	add	local04, arg03
153ec     08 24 06 F1 | 	add	local04, #8
153f0     12 1F 62 FC | 	wrlong	local01, local04
153f4     01 22 06 F1 | 	add	local03, #1
153f8     08 22 56 F2 | 	cmps	local03, #8 wc
153fc     00 FF 9F CD |  if_b	jmp	#LR__1830
15400                 | LR__1831
15400     01 00 00 FF 
15404     D8 E7 85 F1 | 	sub	ptr__Audio093b_8_sc_spin2_dat__, ##984
15408                 | '   
15408                 | ' cog:=coginit(16,@audio,@mailboxaddr)
15408     F3 14 02 F6 | 	mov	arg02, ptr__Audio093b_8_sc_spin2_dat__
1540c     F2 16 02 F6 | 	mov	arg03, objptr
15410     10 24 06 F6 | 	mov	local04, #16
15414     28 16 62 FD | 	setq	arg03
15418     0A 25 F2 FC | 	coginit	local04, arg02 wc
1541c     01 24 66 C6 |  if_b	neg	local04, #1
15420                 | ' waitms(100)
15420     64 12 06 F6 | 	mov	arg01, #100
15424     3C 07 B0 FD | 	call	#__system___waitms
15428                 | ' return cog,base
15428     10 FD 01 F6 | 	mov	result2, local02
1542c     12 FB 01 F6 | 	mov	result1, local04
15430     A7 F0 03 F6 | 	mov	ptra, fp
15434     B2 00 A0 FD | 	call	#popregs_
15438                 | _Audio093b_8_sc_spin2_start_ret
15438     2D 00 64 FD | 	ret
1543c                 | 
1543c                 | ' 
1543c                 | ' ' a simple play procedure to not poke everything. 
1543c                 | ' 
1543c                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
1543c                 | _Audio093b_8_sc_spin2_play
1543c     0C E4 05 F1 | 	add	objptr, #12
15440     F2 00 02 F6 | 	mov	_var01, objptr
15444     05 12 66 F0 | 	shl	arg01, #5
15448     09 01 02 F1 | 	add	_var01, arg01
1544c     00 00 60 FF 
15450     00 14 06 F1 | 	add	arg02, ##-1073741824
15454     00 13 02 F6 | 	mov	arg01, _var01
15458     08 12 06 F1 | 	add	arg01, #8
1545c     09 15 62 FC | 	wrlong	arg02, arg01
15460     00 15 02 F6 | 	mov	arg02, _var01
15464     0C 14 06 F1 | 	add	arg02, #12
15468     0A 1B 62 FC | 	wrlong	arg05, arg02
1546c     00 1C 56 F2 | 	cmps	arg06, #0 wc
15470     00 15 02 36 |  if_ae	mov	arg02, _var01
15474     10 14 06 31 |  if_ae	add	arg02, #16
15478     0A 1D 62 3C |  if_ae	wrlong	arg06, arg02
1547c     02 1A 06 C1 |  if_b	add	arg05, #2
15480     00 13 02 C6 |  if_b	mov	arg01, _var01
15484     10 12 06 C1 |  if_b	add	arg01, #16
15488     09 1B 62 CC |  if_b	wrlong	arg05, arg01
1548c     0B 15 52 F6 | 	abs	arg02, arg03 wc
15490     0F 1B 80 FF 
15494     0A 3F 1A FD | 	qdiv	##3546911, arg02
15498                 | ' 
15498                 | ' base2:=@channel1[0]+32*channel
15498                 | ' long[base2+8]:=sample+$C0000000 
15498                 | ' long[base2+12]:= len
15498                 | ' if loop >=0 
15498                 | '   long[base2+16]:= loop
15498     0C E4 85 F1 | 	sub	objptr, #12
1549c                 | ' else
1549c                 | '   long[base2+16]:= len+2
1549c                 | ' word[base2+20]:=vol
1549c     00 15 02 F6 | 	mov	arg02, _var01
154a0     14 14 06 F1 | 	add	arg02, #20
154a4     0A 19 52 FC | 	wrword	arg04, arg02
154a8                 | ' word[base2+24]:= 3546911/splfreq 
154a8     00 13 02 F6 | 	mov	arg01, _var01
154ac     18 12 06 F1 | 	add	arg01, #24
154b0                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
154b0                 | ' long[base2+28]:=$40000000
154b0     18 14 62 FD | 	getqx	arg02
154b4     0A 15 82 F6 | 	negc	arg02, arg02
154b8     09 15 52 FC | 	wrword	arg02, arg01
154bc     00 15 02 F6 | 	mov	arg02, _var01
154c0     1A 14 06 F1 | 	add	arg02, #26
154c4     0A 01 5A FC | 	wrword	#256, arg02
154c8     1C 00 06 F1 | 	add	_var01, #28
154cc     00 00 A0 FF 
154d0     00 01 68 FC | 	wrlong	##1073741824, _var01
154d4                 | _Audio093b_8_sc_spin2_play_ret
154d4     2D 00 64 FD | 	ret
154d8                 | 
154d8                 | ' until (i >>8) >=len
154d8                 | ' 
154d8                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
154d8                 | _Audio093b_8_sc_spin2_play8
154d8                 | ' 
154d8                 | ' base2:=@channel1[0]+32*channel
154d8     0C E4 05 F1 | 	add	objptr, #12
154dc     F2 00 02 F6 | 	mov	_var01, objptr
154e0     05 12 66 F0 | 	shl	arg01, #5
154e4     09 01 02 F1 | 	add	_var01, arg01
154e8                 | ' long[base2]:=0
154e8     00 01 68 FC | 	wrlong	#0, _var01
154ec                 | ' long[base2+8]:=sample+$40000000 
154ec     00 00 20 FF 
154f0     00 14 06 F1 | 	add	arg02, ##1073741824
154f4     00 13 02 F6 | 	mov	arg01, _var01
154f8     08 12 06 F1 | 	add	arg01, #8
154fc     09 15 62 FC | 	wrlong	arg02, arg01
15500                 | ' if loop>=0
15500     00 1C 56 F2 | 	cmps	arg06, #0 wc
15504     0C E4 85 F1 | 	sub	objptr, #12
15508     1C 00 90 CD |  if_b	jmp	#LR__1840
1550c                 | '   long[base2+12]:=loop
1550c     00 15 02 F6 | 	mov	arg02, _var01
15510     0C 14 06 F1 | 	add	arg02, #12
15514     0A 1D 62 FC | 	wrlong	arg06, arg02
15518                 | '   long[base2+16]:= len
15518     00 1D 02 F6 | 	mov	arg06, _var01
1551c     10 1C 06 F1 | 	add	arg06, #16
15520     0E 1B 62 FC | 	wrlong	arg05, arg06
15524     1C 00 90 FD | 	jmp	#LR__1841
15528                 | LR__1840
15528                 | ' else
15528                 | '   long[base2+12]:= len
15528     00 1D 02 F6 | 	mov	arg06, _var01
1552c     0C 1C 06 F1 | 	add	arg06, #12
15530     0E 1B 62 FC | 	wrlong	arg05, arg06
15534                 | '   long[base2+16]:= len+1
15534     01 1A 06 F1 | 	add	arg05, #1
15538     00 13 02 F6 | 	mov	arg01, _var01
1553c     10 12 06 F1 | 	add	arg01, #16
15540     09 1B 62 FC | 	wrlong	arg05, arg01
15544                 | LR__1841
15544     0B 17 52 F6 | 	abs	arg03, arg03 wc
15548     0F 1B 80 FF 
1554c     0B 3F 1A FD | 	qdiv	##3546911, arg03
15550                 | ' word[base2+20]:=vol
15550     00 17 02 F6 | 	mov	arg03, _var01
15554     14 16 06 F1 | 	add	arg03, #20
15558     0B 19 52 FC | 	wrword	arg04, arg03
1555c                 | ' word[base2+24]:= 3546911/splfreq 
1555c     00 13 02 F6 | 	mov	arg01, _var01
15560     18 12 06 F1 | 	add	arg01, #24
15564                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
15564                 | ' long[base2+28]:=$40000000
15564     18 18 62 FD | 	getqx	arg04
15568     0C 19 82 F6 | 	negc	arg04, arg04
1556c     09 19 52 FC | 	wrword	arg04, arg01
15570     00 19 02 F6 | 	mov	arg04, _var01
15574     1A 18 06 F1 | 	add	arg04, #26
15578     0C 01 5A FC | 	wrword	#256, arg04
1557c     1C 00 06 F1 | 	add	_var01, #28
15580     00 00 A0 FF 
15584     00 01 68 FC | 	wrlong	##1073741824, _var01
15588                 | _Audio093b_8_sc_spin2_play8_ret
15588     2D 00 64 FD | 	ret
1558c                 | 
1558c                 | ' 
1558c                 | '     
1558c                 | ' pub stop(channel) 'silence it
1558c                 | _Audio093b_8_sc_spin2_stop
1558c                 | ' 
1558c                 | ' word[@channel1[0]+32*channel+20]:=0
1558c     0C E4 05 F1 | 	add	objptr, #12
15590     F2 00 02 F6 | 	mov	_var01, objptr
15594     05 12 66 F0 | 	shl	arg01, #5
15598     09 01 02 F1 | 	add	_var01, arg01
1559c     14 00 06 F1 | 	add	_var01, #20
155a0     00 01 58 FC | 	wrword	#0, _var01
155a4     0C E4 85 F1 | 	sub	objptr, #12
155a8                 | _Audio093b_8_sc_spin2_stop_ret
155a8     2D 00 64 FD | 	ret
155ac                 | hubexit
155ac     81 00 80 FD | 	jmp	#cogexit
155b0                 | 
155b0                 | __system___setbaud
155b0     14 5E 06 FB | 	rdlong	muldiva_, #20
155b4     09 61 02 F6 | 	mov	muldivb_, arg01
155b8     BA 00 A0 FD | 	call	#divide_
155bc     97 06 48 FB | 	callpa	#(@LR__1851-@LR__1850)>>2,fcache_load_ptr_
155c0                 | LR__1850
155c0     3E FA 9D FA | 	rdpin	result1, #62 wc
155c4     FE FC A1 F1 | 	subx	result2, result2
155c8     F4 FF 9F CD |  if_b	jmp	#LR__1850
155cc                 | LR__1851
155cc     40 7C 64 FD | 	dirl	#62
155d0     40 7E 64 FD | 	dirl	#63
155d4     F4 60 62 FC | 	wrlong	muldivb_, ptr___system__dat__
155d8     10 60 66 F0 | 	shl	muldivb_, #16
155dc     07 14 06 F6 | 	mov	arg02, #7
155e0     30 15 02 F1 | 	add	arg02, muldivb_
155e4     3E F8 0C FC | 	wrpin	#124, #62
155e8     3E 14 16 FC | 	wxpin	arg02, #62
155ec     3F 7C 0C FC | 	wrpin	#62, #63
155f0     14 14 06 F1 | 	add	arg02, #20
155f4     3F 14 16 FC | 	wxpin	arg02, #63
155f8     41 7C 64 FD | 	dirh	#62
155fc     41 7E 64 FD | 	dirh	#63
15600                 | __system___setbaud_ret
15600     2D 00 64 FD | 	ret
15604                 | 
15604                 | __system___txraw
15604     01 4A 05 F6 | 	mov	COUNT_, #1
15608     A8 00 A0 FD | 	call	#pushregs_
1560c     09 1F 02 F6 | 	mov	local01, arg01
15610     97 06 48 FB | 	callpa	#(@LR__1861-@LR__1860)>>2,fcache_load_ptr_
15614                 | LR__1860
15614     3E FA 9D FA | 	rdpin	result1, #62 wc
15618     FE FC A1 F1 | 	subx	result2, result2
1561c     F4 FF 9F CD |  if_b	jmp	#LR__1860
15620                 | LR__1861
15620     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
15624     C2 01 00 AF 
15628     00 12 06 A6 |  if_e	mov	arg01, ##230400
1562c     80 FF BF AD |  if_e	call	#__system___setbaud
15630     3E 1E 26 FC | 	wypin	local01, #62
15634     01 FA 05 F6 | 	mov	result1, #1
15638     A7 F0 03 F6 | 	mov	ptra, fp
1563c     B2 00 A0 FD | 	call	#popregs_
15640                 | __system___txraw_ret
15640     2D 00 64 FD | 	ret
15644                 | 
15644                 | __system___rxraw
15644     0D 4A 05 F6 | 	mov	COUNT_, #13
15648     A8 00 A0 FD | 	call	#pushregs_
1564c     09 1F 02 F6 | 	mov	local01, arg01
15650     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
15654     C2 01 00 AF 
15658     00 12 06 A6 |  if_e	mov	arg01, ##230400
1565c     50 FF BF AD |  if_e	call	#__system___setbaud
15660     00 1E 0E F2 | 	cmp	local01, #0 wz
15664     20 00 90 AD |  if_e	jmp	#LR__1870
15668     14 22 06 FB | 	rdlong	local03, #20
1566c     0A 22 46 F0 | 	shr	local03, #10
15670     11 1F 02 FD | 	qmul	local01, local03
15674     1A FA 61 FD | 	getct	result1
15678     18 24 62 FD | 	getqx	local04
1567c     12 FB 01 F1 | 	add	result1, local04
15680     FD 26 02 F6 | 	mov	local05, result1
15684     04 00 90 FD | 	jmp	#LR__1871
15688                 | LR__1870
15688     00 26 06 F6 | 	mov	local05, #0
1568c                 | LR__1871
1568c     01 28 66 F6 | 	neg	local06, #1
15690     3F 2A 06 F6 | 	mov	local07, #63
15694     00 2C 06 F6 | 	mov	local08, #0
15698     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1569c     F4 2E 02 FB | 	rdlong	local09, ptr___system__dat__
156a0     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
156a4                 | LR__1872
156a4     08 2E 16 F4 | 	testb	local09, #8 wc
156a8     09 2E 76 F4 | 	testbn	local09, #9 andc
156ac     0A 2E 46 F0 | 	shr	local09, #10
156b0     01 2C 06 C6 |  if_b	mov	local08, #1
156b4     40 7E 6C 3D |  if_ae	testp	#63 wz
156b8     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
156bc     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
156c0     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
156c4                 | LR__1873
156c4     00 20 06 F6 | 	mov	local02, #0
156c8     00 2C 0E F2 | 	cmp	local08, #0 wz
156cc     01 20 66 56 |  if_ne	neg	local02, #1
156d0     00 30 06 F6 | 	mov	local10, #0
156d4     00 22 06 F6 | 	mov	local03, #0
156d8     00 1E 0E F2 | 	cmp	local01, #0 wz
156dc     01 22 66 56 |  if_ne	neg	local03, #1
156e0     00 24 06 F6 | 	mov	local04, #0
156e4     00 32 06 F6 | 	mov	local11, #0
156e8     1A FA 61 FD | 	getct	result1
156ec     FD 34 02 F6 | 	mov	local12, result1
156f0     1A 37 02 F6 | 	mov	local13, local12
156f4     13 37 82 F1 | 	sub	local13, local05
156f8     00 36 56 F2 | 	cmps	local13, #0 wc
156fc     00 32 26 C6 |  if_b	not	local11, #0
15700     00 32 0E F2 | 	cmp	local11, #0 wz
15704     00 24 26 56 |  if_ne	not	local04, #0
15708     12 23 CA F7 | 	test	local03, local04 wz
1570c     00 30 26 56 |  if_ne	not	local10, #0
15710     18 21 4A F5 | 	or	local02, local10 wz
15714     8C FF 9F AD |  if_e	jmp	#LR__1872
15718     00 2C 0E F2 | 	cmp	local08, #0 wz
1571c     17 29 02 56 |  if_ne	mov	local06, local09
15720     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
15724     04 E8 05 F1 | 	add	ptr___system__dat__, #4
15728     F4 2E 62 FC | 	wrlong	local09, ptr___system__dat__
1572c     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
15730     14 FB 01 F6 | 	mov	result1, local06
15734     A7 F0 03 F6 | 	mov	ptra, fp
15738     B2 00 A0 FD | 	call	#popregs_
1573c                 | __system___rxraw_ret
1573c     2D 00 64 FD | 	ret
15740                 | 
15740                 | __system___getus
15740     1A FC 71 FD | 	getct	result2 wc
15744     1A 00 62 FD | 	getct	_var01
15748     10 E8 05 F1 | 	add	ptr___system__dat__, #16
1574c     F4 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
15750     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
15754     20 00 90 5D |  if_ne	jmp	#LR__1880
15758     14 02 06 FB | 	rdlong	_var02, #20
1575c     A1 07 00 FF 
15760     40 02 16 FD | 	qdiv	_var02, ##1000000
15764     10 E8 05 F1 | 	add	ptr___system__dat__, #16
15768     18 FA 61 FD | 	getqx	result1
1576c     FD 02 02 F6 | 	mov	_var02, result1
15770     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
15774     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
15778                 | LR__1880
15778     01 FD 11 FD | 	qdiv	result2, _var02
1577c     19 FC 61 FD | 	getqy	result2
15780     28 FC 61 FD | 	setq	result2
15784     01 01 12 FD | 	qdiv	_var01, _var02
15788     18 FA 61 FD | 	getqx	result1
1578c                 | __system___getus_ret
1578c     2D 00 64 FD | 	ret
15790                 | 
15790                 | __system____builtin_memmove
15790     09 01 02 F6 | 	mov	_var01, arg01
15794     0A 13 52 F2 | 	cmps	arg01, arg02 wc
15798     10 00 90 CD |  if_b	jmp	#LR__1890
1579c     0A 03 02 F6 | 	mov	_var02, arg02
157a0     0B 03 02 F1 | 	add	_var02, arg03
157a4     01 13 52 F2 | 	cmps	arg01, _var02 wc
157a8     48 00 90 CD |  if_b	jmp	#LR__1896
157ac                 | LR__1890
157ac     0B 05 02 F6 | 	mov	_var03, arg03
157b0     02 04 4E F0 | 	shr	_var03, #2 wz
157b4     18 00 90 AD |  if_e	jmp	#LR__1895
157b8     97 0A 48 FB | 	callpa	#(@LR__1893-@LR__1891)>>2,fcache_load_ptr_
157bc                 | LR__1891
157bc     02 09 D8 FC | 	rep	@LR__1894, _var03
157c0                 | LR__1892
157c0     0A 05 02 FB | 	rdlong	_var03, arg02
157c4     09 05 62 FC | 	wrlong	_var03, arg01
157c8     04 12 06 F1 | 	add	arg01, #4
157cc     04 14 06 F1 | 	add	arg02, #4
157d0                 | LR__1893
157d0                 | LR__1894
157d0                 | LR__1895
157d0     02 16 CE F7 | 	test	arg03, #2 wz
157d4     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
157d8     09 03 52 5C |  if_ne	wrword	_var02, arg01
157dc     02 12 06 51 |  if_ne	add	arg01, #2
157e0     02 14 06 51 |  if_ne	add	arg02, #2
157e4     01 16 CE F7 | 	test	arg03, #1 wz
157e8     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
157ec     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
157f0     28 00 90 FD | 	jmp	#LR__1902
157f4                 | LR__1896
157f4     0B 13 02 F1 | 	add	arg01, arg03
157f8     0B 15 02 F1 | 	add	arg02, arg03
157fc     0B 07 0A F6 | 	mov	_var04, arg03 wz
15800     18 00 90 AD |  if_e	jmp	#LR__1901
15804     97 0A 48 FB | 	callpa	#(@LR__1899-@LR__1897)>>2,fcache_load_ptr_
15808                 | LR__1897
15808     03 09 D8 FC | 	rep	@LR__1900, _var04
1580c                 | LR__1898
1580c     01 12 86 F1 | 	sub	arg01, #1
15810     01 14 86 F1 | 	sub	arg02, #1
15814     0A 03 C2 FA | 	rdbyte	_var02, arg02
15818     09 03 42 FC | 	wrbyte	_var02, arg01
1581c                 | LR__1899
1581c                 | LR__1900
1581c                 | LR__1901
1581c                 | LR__1902
1581c     00 FB 01 F6 | 	mov	result1, _var01
15820                 | __system____builtin_memmove_ret
15820     2D 00 64 FD | 	ret
15824                 | 
15824                 | __system____builtin_strcpy
15824     09 01 02 F6 | 	mov	_var01, arg01
15828     97 0A 48 FB | 	callpa	#(@LR__1911-@LR__1910)>>2,fcache_load_ptr_
1582c                 | LR__1910
1582c     0A FB C9 FA | 	rdbyte	result1, arg02 wz
15830     09 FB 41 FC | 	wrbyte	result1, arg01
15834     01 14 06 F1 | 	add	arg02, #1
15838     01 12 06 F1 | 	add	arg01, #1
1583c     EC FF 9F 5D |  if_ne	jmp	#LR__1910
15840                 | LR__1911
15840     00 FB 01 F6 | 	mov	result1, _var01
15844                 | __system____builtin_strcpy_ret
15844     2D 00 64 FD | 	ret
15848                 | 
15848                 | __system____topofstack
15848     00 4A 05 F6 | 	mov	COUNT_, #0
1584c     A8 00 A0 FD | 	call	#pushregs_
15850     08 F0 07 F1 | 	add	ptra, #8
15854     04 4E 05 F1 | 	add	fp, #4
15858     A7 12 62 FC | 	wrlong	arg01, fp
1585c     A7 FA 01 F6 | 	mov	result1, fp
15860     04 4E 85 F1 | 	sub	fp, #4
15864     A7 F0 03 F6 | 	mov	ptra, fp
15868     B2 00 A0 FD | 	call	#popregs_
1586c                 | __system____topofstack_ret
1586c     2D 00 64 FD | 	ret
15870                 | 
15870                 | __system___lockmem
15870     00 FA 05 F6 | 	mov	result1, #0
15874     01 FA 61 FD | 	cogid	result1
15878     00 FB 05 F1 | 	add	result1, #256
1587c                 | LR__1920
1587c     09 01 0A FB | 	rdlong	_var01, arg01 wz
15880     09 FB 61 AC |  if_e	wrlong	result1, arg01
15884     09 01 02 AB |  if_e	rdlong	_var01, arg01
15888     09 01 02 AB |  if_e	rdlong	_var01, arg01
1588c     FD 00 0A F2 | 	cmp	_var01, result1 wz
15890     E8 FF 9F 5D |  if_ne	jmp	#LR__1920
15894                 | __system___lockmem_ret
15894     2D 00 64 FD | 	ret
15898                 | 
15898                 | __system___string_cmp
15898     97 14 48 FB | 	callpa	#(@LR__1931-@LR__1930)>>2,fcache_load_ptr_
1589c                 | LR__1930
1589c     09 01 C2 FA | 	rdbyte	_var01, arg01
158a0     0A 03 C2 FA | 	rdbyte	_var02, arg02
158a4     00 05 02 F6 | 	mov	_var03, _var01
158a8     01 05 8A F1 | 	sub	_var03, _var02 wz
158ac     01 12 06 F1 | 	add	arg01, #1
158b0     01 14 06 F1 | 	add	arg02, #1
158b4     0C 00 90 5D |  if_ne	jmp	#LR__1932
158b8     00 00 0E F2 | 	cmp	_var01, #0 wz
158bc     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
158c0     D8 FF 9F 5D |  if_ne	jmp	#LR__1930
158c4                 | LR__1931
158c4                 | LR__1932
158c4     02 FB 01 F6 | 	mov	result1, _var03
158c8                 | __system___string_cmp_ret
158c8     2D 00 64 FD | 	ret
158cc                 | 
158cc                 | __system___string_concat
158cc     05 4A 05 F6 | 	mov	COUNT_, #5
158d0     A8 00 A0 FD | 	call	#pushregs_
158d4     09 1F 02 F6 | 	mov	local01, arg01
158d8     0A 21 02 F6 | 	mov	local02, arg02
158dc     0F 13 02 F6 | 	mov	arg01, local01
158e0     09 23 02 F6 | 	mov	local03, arg01
158e4     97 06 48 FB | 	callpa	#(@LR__1941-@LR__1940)>>2,fcache_load_ptr_
158e8                 | LR__1940
158e8     11 FB C9 FA | 	rdbyte	result1, local03 wz
158ec     01 22 06 51 |  if_ne	add	local03, #1
158f0     F4 FF 9F 5D |  if_ne	jmp	#LR__1940
158f4                 | LR__1941
158f4     09 23 82 F1 | 	sub	local03, arg01
158f8     11 25 02 F6 | 	mov	local04, local03
158fc     10 13 02 F6 | 	mov	arg01, local02
15900     09 23 02 F6 | 	mov	local03, arg01
15904     97 06 48 FB | 	callpa	#(@LR__1943-@LR__1942)>>2,fcache_load_ptr_
15908                 | LR__1942
15908     11 FB C9 FA | 	rdbyte	result1, local03 wz
1590c     01 22 06 51 |  if_ne	add	local03, #1
15910     F4 FF 9F 5D |  if_ne	jmp	#LR__1942
15914                 | LR__1943
15914     09 23 82 F1 | 	sub	local03, arg01
15918     12 13 02 F6 | 	mov	arg01, local04
1591c     11 13 02 F1 | 	add	arg01, local03
15920     01 12 06 F1 | 	add	arg01, #1
15924     B0 39 B0 FD | 	call	#__system___gc_alloc_managed
15928     FD 26 0A F6 | 	mov	local05, result1 wz
1592c     28 00 90 AD |  if_e	jmp	#LR__1944
15930     13 13 02 F6 | 	mov	arg01, local05
15934     0F 15 02 F6 | 	mov	arg02, local01
15938     12 17 02 F6 | 	mov	arg03, local04
1593c     50 FE BF FD | 	call	#__system____builtin_memmove
15940     13 13 02 F6 | 	mov	arg01, local05
15944     12 13 02 F1 | 	add	arg01, local04
15948     01 22 06 F1 | 	add	local03, #1
1594c     10 15 02 F6 | 	mov	arg02, local02
15950     11 17 02 F6 | 	mov	arg03, local03
15954     38 FE BF FD | 	call	#__system____builtin_memmove
15958                 | LR__1944
15958     13 FB 01 F6 | 	mov	result1, local05
1595c     A7 F0 03 F6 | 	mov	ptra, fp
15960     B2 00 A0 FD | 	call	#popregs_
15964                 | __system___string_concat_ret
15964     2D 00 64 FD | 	ret
15968                 | 
15968                 | __system___tx
15968     02 4A 05 F6 | 	mov	COUNT_, #2
1596c     A8 00 A0 FD | 	call	#pushregs_
15970     09 1F 02 F6 | 	mov	local01, arg01
15974     0A 1E 0E F2 | 	cmp	local01, #10 wz
15978     18 00 90 5D |  if_ne	jmp	#LR__1950
1597c     08 E8 05 F1 | 	add	ptr___system__dat__, #8
15980     F4 20 02 FB | 	rdlong	local02, ptr___system__dat__
15984     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
15988     02 20 CE F7 | 	test	local02, #2 wz
1598c     0D 12 06 56 |  if_ne	mov	arg01, #13
15990     70 FC BF 5D |  if_ne	call	#__system___txraw
15994                 | LR__1950
15994     0F 13 02 F6 | 	mov	arg01, local01
15998     68 FC BF FD | 	call	#__system___txraw
1599c     A7 F0 03 F6 | 	mov	ptra, fp
159a0     B2 00 A0 FD | 	call	#popregs_
159a4                 | __system___tx_ret
159a4     2D 00 64 FD | 	ret
159a8                 | 
159a8                 | __system___rx
159a8     01 4A 05 F6 | 	mov	COUNT_, #1
159ac     A8 00 A0 FD | 	call	#pushregs_
159b0                 | LR__1960
159b0     00 12 06 F6 | 	mov	arg01, #0
159b4     8C FC BF FD | 	call	#__system___rxraw
159b8     FD 1E 02 F6 | 	mov	local01, result1
159bc     FF FF 7F FF 
159c0     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
159c4     E8 FF 9F AD |  if_e	jmp	#LR__1960
159c8     0D 1E 0E F2 | 	cmp	local01, #13 wz
159cc     14 00 90 5D |  if_ne	jmp	#LR__1961
159d0     08 E8 05 F1 | 	add	ptr___system__dat__, #8
159d4     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
159d8     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
159dc     02 FA CD F7 | 	test	result1, #2 wz
159e0     0A 1E 06 56 |  if_ne	mov	local01, #10
159e4                 | LR__1961
159e4     08 E8 05 F1 | 	add	ptr___system__dat__, #8
159e8     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
159ec     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
159f0     01 12 CE F7 | 	test	arg01, #1 wz
159f4     1C 00 90 AD |  if_e	jmp	#LR__1964
159f8     7F 1E 0E F2 | 	cmp	local01, #127 wz
159fc     0C 00 90 5D |  if_ne	jmp	#LR__1962
15a00     08 12 06 F6 | 	mov	arg01, #8
15a04     60 FF BF FD | 	call	#__system___tx
15a08     08 00 90 FD | 	jmp	#LR__1963
15a0c                 | LR__1962
15a0c     0F 13 02 F6 | 	mov	arg01, local01
15a10     54 FF BF FD | 	call	#__system___tx
15a14                 | LR__1963
15a14                 | LR__1964
15a14     0F FB 01 F6 | 	mov	result1, local01
15a18     A7 F0 03 F6 | 	mov	ptra, fp
15a1c     B2 00 A0 FD | 	call	#popregs_
15a20                 | __system___rx_ret
15a20     2D 00 64 FD | 	ret
15a24                 | 
15a24                 | __system___pinwrite
15a24     09 01 02 F6 | 	mov	_var01, arg01
15a28     1F 00 06 F5 | 	and	_var01, #31
15a2c     20 12 CE F7 | 	test	arg01, #32 wz
15a30     06 12 46 F0 | 	shr	arg01, #6
15a34     09 13 CA F9 | 	bmask	arg01, arg01
15a38     00 13 62 F0 | 	shl	arg01, _var01
15a3c     00 15 62 F0 | 	shl	arg02, _var01
15a40     1C 00 90 AD |  if_e	jmp	#LR__1970
15a44     09 F7 43 F5 | 	or	dirb, arg01
15a48     FD 01 02 F6 | 	mov	_var01, outb
15a4c     09 01 22 F5 | 	andn	_var01, arg01
15a50     09 15 02 F5 | 	and	arg02, arg01
15a54     0A 01 42 F5 | 	or	_var01, arg02
15a58     00 FB 03 F6 | 	mov	outb, _var01
15a5c     18 00 90 FD | 	jmp	#LR__1971
15a60                 | LR__1970
15a60     09 F5 43 F5 | 	or	dira, arg01
15a64     FC 01 02 F6 | 	mov	_var01, outa
15a68     09 01 22 F5 | 	andn	_var01, arg01
15a6c     09 15 02 F5 | 	and	arg02, arg01
15a70     0A 01 42 F5 | 	or	_var01, arg02
15a74     00 F9 03 F6 | 	mov	outa, _var01
15a78                 | LR__1971
15a78                 | __system___pinwrite_ret
15a78     2D 00 64 FD | 	ret
15a7c                 | 
15a7c                 | __system___basic_read_line
15a7c     06 4A 05 F6 | 	mov	COUNT_, #6
15a80     A8 00 A0 FD | 	call	#pushregs_
15a84     09 1F 02 F6 | 	mov	local01, arg01
15a88     00 20 06 F6 | 	mov	local02, #0
15a8c     18 22 06 F6 | 	mov	local03, #24
15a90     00 24 06 F6 | 	mov	local04, #0
15a94     18 12 06 F6 | 	mov	arg01, #24
15a98     3C 38 B0 FD | 	call	#__system___gc_alloc_managed
15a9c     FD 26 0A F6 | 	mov	local05, result1 wz
15aa0     13 FB 01 A6 |  if_e	mov	result1, local05
15aa4     B0 00 90 AD |  if_e	jmp	#LR__1983
15aa8                 | LR__1980
15aa8     0F 13 02 F6 | 	mov	arg01, local01
15aac     78 0B B0 FD | 	call	#__system___basic_get_char
15ab0     FD 28 02 F6 | 	mov	local06, result1
15ab4     01 28 56 F2 | 	cmps	local06, #1 wc
15ab8     8C 00 90 CD |  if_b	jmp	#LR__1982
15abc     0A 28 0E F2 | 	cmp	local06, #10 wz
15ac0     10 00 90 5D |  if_ne	jmp	#LR__1981
15ac4     00 24 0E F2 | 	cmp	local04, #0 wz
15ac8     01 20 56 52 |  if_ne	cmps	local02, #1 wc
15acc     01 20 86 11 |  if_a	sub	local02, #1
15ad0     74 00 90 FD | 	jmp	#LR__1982
15ad4                 | LR__1981
15ad4     0D 28 0E F2 | 	cmp	local06, #13 wz
15ad8     01 24 06 A6 |  if_e	mov	local04, #1
15adc     00 24 06 56 |  if_ne	mov	local04, #0
15ae0     08 28 0E F2 | 	cmp	local06, #8 wz
15ae4     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
15ae8     01 20 56 A2 |  if_e	cmps	local02, #1 wc
15aec     01 20 86 21 |  if_nc_and_z	sub	local02, #1
15af0     B4 FF 9F AD |  if_e	jmp	#LR__1980
15af4     13 17 02 F6 | 	mov	arg03, local05
15af8     10 17 02 F1 | 	add	arg03, local02
15afc     0B 29 42 FC | 	wrbyte	local06, arg03
15b00     01 20 06 F1 | 	add	local02, #1
15b04     11 21 0A F2 | 	cmp	local02, local03 wz
15b08     9C FF 9F 5D |  if_ne	jmp	#LR__1980
15b0c     11 13 02 F6 | 	mov	arg01, local03
15b10     20 12 06 F1 | 	add	arg01, #32
15b14     C0 37 B0 FD | 	call	#__system___gc_alloc_managed
15b18     FD 28 0A F6 | 	mov	local06, result1 wz
15b1c     14 FB 01 A6 |  if_e	mov	result1, local06
15b20     34 00 90 AD |  if_e	jmp	#LR__1983
15b24     14 13 02 F6 | 	mov	arg01, local06
15b28     13 15 02 F6 | 	mov	arg02, local05
15b2c     11 17 02 F6 | 	mov	arg03, local03
15b30     5C FC BF FD | 	call	#__system____builtin_memmove
15b34     20 22 06 F1 | 	add	local03, #32
15b38     13 13 02 F6 | 	mov	arg01, local05
15b3c     D4 38 B0 FD | 	call	#__system___gc_free
15b40     14 27 02 F6 | 	mov	local05, local06
15b44     60 FF 9F FD | 	jmp	#LR__1980
15b48                 | LR__1982
15b48     13 29 02 F6 | 	mov	local06, local05
15b4c     10 29 02 F1 | 	add	local06, local02
15b50     14 01 48 FC | 	wrbyte	#0, local06
15b54     13 FB 01 F6 | 	mov	result1, local05
15b58                 | LR__1983
15b58     A7 F0 03 F6 | 	mov	ptra, fp
15b5c     B2 00 A0 FD | 	call	#popregs_
15b60                 | __system___basic_read_line_ret
15b60     2D 00 64 FD | 	ret
15b64                 | 
15b64                 | __system___waitms
15b64     09 01 02 F6 | 	mov	_var01, arg01
15b68     1A 02 62 FD | 	getct	_var02
15b6c     14 04 06 FB | 	rdlong	_var03, #20
15b70     97 14 48 FB | 	callpa	#(@LR__1991-@LR__1990)>>2,fcache_load_ptr_
15b74                 | LR__1990
15b74     01 00 00 FF 
15b78     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
15b7c     1C 00 90 CD |  if_b	jmp	#LR__1992
15b80     02 03 02 F1 | 	add	_var02, _var03
15b84     01 13 02 F6 | 	mov	arg01, _var02
15b88     00 12 66 FA | 	addct1	arg01, #0
15b8c     24 22 60 FD | 	waitct1
15b90     01 00 00 FF 
15b94     E8 01 86 F1 | 	sub	_var01, ##1000
15b98     D8 FF 9F FD | 	jmp	#LR__1990
15b9c                 | LR__1991
15b9c                 | LR__1992
15b9c     01 00 56 F2 | 	cmps	_var01, #1 wc
15ba0     28 00 90 CD |  if_b	jmp	#LR__1993
15ba4     02 01 02 FD | 	qmul	_var01, _var03
15ba8     01 00 00 FF 
15bac     E8 17 06 F6 | 	mov	arg03, ##1000
15bb0     19 FA 61 FD | 	getqy	result1
15bb4     18 12 62 FD | 	getqx	arg01
15bb8     28 FA 61 FD | 	setq	result1
15bbc     0B 13 12 FD | 	qdiv	arg01, arg03
15bc0     18 12 62 FD | 	getqx	arg01
15bc4     01 13 62 FA | 	addct1	arg01, _var02
15bc8     24 22 60 FD | 	waitct1
15bcc                 | LR__1993
15bcc                 | __system___waitms_ret
15bcc     2D 00 64 FD | 	ret
15bd0                 | 
15bd0                 | __system___waitus
15bd0     09 01 02 F6 | 	mov	_var01, arg01
15bd4     1A 02 62 FD | 	getct	_var02
15bd8     14 04 06 FB | 	rdlong	_var03, #20
15bdc     97 14 48 FB | 	callpa	#(@LR__2001-@LR__2000)>>2,fcache_load_ptr_
15be0                 | LR__2000
15be0     A1 07 00 FF 
15be4     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
15be8     1C 00 90 CD |  if_b	jmp	#LR__2002
15bec     02 03 02 F1 | 	add	_var02, _var03
15bf0     01 13 02 F6 | 	mov	arg01, _var02
15bf4     00 12 66 FA | 	addct1	arg01, #0
15bf8     24 22 60 FD | 	waitct1
15bfc     A1 07 00 FF 
15c00     40 00 86 F1 | 	sub	_var01, ##1000000
15c04     D8 FF 9F FD | 	jmp	#LR__2000
15c08                 | LR__2001
15c08                 | LR__2002
15c08     01 00 56 F2 | 	cmps	_var01, #1 wc
15c0c     28 00 90 CD |  if_b	jmp	#LR__2003
15c10     02 01 02 FD | 	qmul	_var01, _var03
15c14     A1 07 00 FF 
15c18     40 16 06 F6 | 	mov	arg03, ##1000000
15c1c     19 FA 61 FD | 	getqy	result1
15c20     18 12 62 FD | 	getqx	arg01
15c24     28 FA 61 FD | 	setq	result1
15c28     0B 13 12 FD | 	qdiv	arg01, arg03
15c2c     18 FA 61 FD | 	getqx	result1
15c30     FD 02 62 FA | 	addct1	_var02, result1
15c34     24 22 60 FD | 	waitct1
15c38                 | LR__2003
15c38                 | __system___waitus_ret
15c38     2D 00 64 FD | 	ret
15c3c                 | 
15c3c                 | __system___mount
15c3c     0B 4A 05 F6 | 	mov	COUNT_, #11
15c40     A8 00 A0 FD | 	call	#pushregs_
15c44     09 1F 02 F6 | 	mov	local01, arg01
15c48     0A 21 0A F6 | 	mov	local02, arg02 wz
15c4c     01 22 66 F6 | 	neg	local03, #1
15c50     01 FA 65 A6 |  if_e	neg	result1, #1
15c54     98 02 90 AD |  if_e	jmp	#LR__2025
15c58     0F FB C1 FA | 	rdbyte	result1, local01
15c5c     2F FA 0D F2 | 	cmp	result1, #47 wz
15c60     28 00 90 5D |  if_ne	jmp	#LR__2012
15c64     0F 13 02 F6 | 	mov	arg01, local01
15c68     09 25 02 F6 | 	mov	local04, arg01
15c6c     97 06 48 FB | 	callpa	#(@LR__2011-@LR__2010)>>2,fcache_load_ptr_
15c70                 | LR__2010
15c70     12 FB C9 FA | 	rdbyte	result1, local04 wz
15c74     01 24 06 51 |  if_ne	add	local04, #1
15c78     F4 FF 9F 5D |  if_ne	jmp	#LR__2010
15c7c                 | LR__2011
15c7c     09 25 82 F1 | 	sub	local04, arg01
15c80     12 FB 01 F6 | 	mov	result1, local04
15c84     10 FA 55 F2 | 	cmps	result1, #16 wc
15c88     14 00 90 CD |  if_b	jmp	#LR__2013
15c8c                 | LR__2012
15c8c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
15c90     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
15c94     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
15c98     01 FA 65 F6 | 	neg	result1, #1
15c9c     50 02 90 FD | 	jmp	#LR__2025
15ca0                 | LR__2013
15ca0     00 26 06 F6 | 	mov	local05, #0
15ca4                 | LR__2014
15ca4     04 26 56 F2 | 	cmps	local05, #4 wc
15ca8     B0 00 90 3D |  if_ae	jmp	#LR__2019
15cac     13 13 02 F6 | 	mov	arg01, local05
15cb0     02 12 66 F0 | 	shl	arg01, #2
15cb4     64 E8 05 F1 | 	add	ptr___system__dat__, #100
15cb8     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
15cbc     09 FB 09 FB | 	rdlong	result1, arg01 wz
15cc0     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15cc4     00 22 56 A2 |  if_e	cmps	local03, #0 wc
15cc8     13 23 02 86 |  if_c_and_z	mov	local03, local05
15ccc     84 00 90 8D |  if_c_and_z	jmp	#LR__2018
15cd0     13 13 02 F6 | 	mov	arg01, local05
15cd4     02 12 66 F0 | 	shl	arg01, #2
15cd8     64 E8 05 F1 | 	add	ptr___system__dat__, #100
15cdc     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
15ce0     09 13 02 FB | 	rdlong	arg01, arg01
15ce4     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15ce8     09 25 02 F6 | 	mov	local04, arg01
15cec     97 06 48 FB | 	callpa	#(@LR__2016-@LR__2015)>>2,fcache_load_ptr_
15cf0                 | LR__2015
15cf0     12 FB C9 FA | 	rdbyte	result1, local04 wz
15cf4     01 24 06 51 |  if_ne	add	local04, #1
15cf8     F4 FF 9F 5D |  if_ne	jmp	#LR__2015
15cfc                 | LR__2016
15cfc     09 25 82 F1 | 	sub	local04, arg01
15d00     12 29 02 F6 | 	mov	local06, local04
15d04     14 13 02 F6 | 	mov	arg01, local06
15d08     0F 13 02 F1 | 	add	arg01, local01
15d0c     09 FB C1 FA | 	rdbyte	result1, arg01
15d10     2F FA 0D F2 | 	cmp	result1, #47 wz
15d14     14 2B 02 56 |  if_ne	mov	local07, local06
15d18     0F 2B 02 51 |  if_ne	add	local07, local01
15d1c     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
15d20     30 00 90 5D |  if_ne	jmp	#LR__2017
15d24     13 17 02 F6 | 	mov	arg03, local05
15d28     02 16 66 F0 | 	shl	arg03, #2
15d2c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
15d30     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
15d34     0B 15 02 FB | 	rdlong	arg02, arg03
15d38     0F 13 02 F6 | 	mov	arg01, local01
15d3c     14 17 02 F6 | 	mov	arg03, local06
15d40     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15d44     D0 49 B0 FD | 	call	#__system__strncmp
15d48     00 FA 0D F2 | 	cmp	result1, #0 wz
15d4c     13 23 02 A6 |  if_e	mov	local03, local05
15d50     08 00 90 AD |  if_e	jmp	#LR__2019
15d54                 | LR__2017
15d54                 | LR__2018
15d54     01 26 06 F1 | 	add	local05, #1
15d58     48 FF 9F FD | 	jmp	#LR__2014
15d5c                 | LR__2019
15d5c     FF FF 7F FF 
15d60     FF 23 0E F2 | 	cmp	local03, ##-1 wz
15d64     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
15d68     F4 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
15d6c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
15d70     01 FA 65 A6 |  if_e	neg	result1, #1
15d74     78 01 90 AD |  if_e	jmp	#LR__2025
15d78     11 27 02 F6 | 	mov	local05, local03
15d7c     13 2B 02 F6 | 	mov	local07, local05
15d80     02 2A 66 F0 | 	shl	local07, #2
15d84     74 E8 05 F1 | 	add	ptr___system__dat__, #116
15d88     F4 2A 02 F1 | 	add	local07, ptr___system__dat__
15d8c     15 29 0A FB | 	rdlong	local06, local07 wz
15d90     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
15d94     58 00 90 AD |  if_e	jmp	#LR__2020
15d98     4C 28 06 F1 | 	add	local06, #76
15d9c     14 2B 0A FB | 	rdlong	local07, local06 wz
15da0     4C 28 86 F1 | 	sub	local06, #76
15da4     48 00 90 AD |  if_e	jmp	#LR__2020
15da8     4C 28 06 F1 | 	add	local06, #76
15dac     14 2B 02 FB | 	rdlong	local07, local06
15db0     15 23 02 F6 | 	mov	local03, local07
15db4     13 2A 46 F7 | 	zerox	local07, #19
15db8     14 22 46 F0 | 	shr	local03, #20
15dbc     02 22 66 F0 | 	shl	local03, #2
15dc0     ED 22 02 F1 | 	add	local03, __methods__
15dc4     11 23 02 FB | 	rdlong	local03, local03
15dc8     13 29 02 F6 | 	mov	local06, local05
15dcc     02 28 66 F0 | 	shl	local06, #2
15dd0     64 E8 05 F1 | 	add	ptr___system__dat__, #100
15dd4     F4 28 02 F1 | 	add	local06, ptr___system__dat__
15dd8     14 13 02 FB | 	rdlong	arg01, local06
15ddc     F2 28 02 F6 | 	mov	local06, objptr
15de0     15 E5 01 F6 | 	mov	objptr, local07
15de4     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15de8     2D 22 62 FD | 	call	local03
15dec     14 E5 01 F6 | 	mov	objptr, local06
15df0                 | LR__2020
15df0     13 2D 02 F6 | 	mov	local08, local05
15df4     02 2C 66 F0 | 	shl	local08, #2
15df8     74 E8 05 F1 | 	add	ptr___system__dat__, #116
15dfc     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
15e00     16 21 62 FC | 	wrlong	local02, local08
15e04     00 20 0E F2 | 	cmp	local02, #0 wz
15e08     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
15e0c     18 00 90 5D |  if_ne	jmp	#LR__2021
15e10     02 26 66 F0 | 	shl	local05, #2
15e14     64 E8 05 F1 | 	add	ptr___system__dat__, #100
15e18     F4 26 02 F1 | 	add	local05, ptr___system__dat__
15e1c     13 01 68 FC | 	wrlong	#0, local05
15e20     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15e24     C4 00 90 FD | 	jmp	#LR__2024
15e28                 | LR__2021
15e28     13 2F 02 F6 | 	mov	local09, local05
15e2c     04 2E 66 F0 | 	shl	local09, #4
15e30     24 E8 05 F1 | 	add	ptr___system__dat__, #36
15e34     F4 2E 02 F1 | 	add	local09, ptr___system__dat__
15e38     17 13 02 F6 | 	mov	arg01, local09
15e3c     0F 15 02 F6 | 	mov	arg02, local01
15e40     10 16 06 F6 | 	mov	arg03, #16
15e44     24 E8 85 F1 | 	sub	ptr___system__dat__, #36
15e48     20 48 B0 FD | 	call	#__system__strncpy
15e4c     48 20 06 F1 | 	add	local02, #72
15e50     10 2D 0A FB | 	rdlong	local08, local02 wz
15e54     48 20 86 F1 | 	sub	local02, #72
15e58     7C 00 90 AD |  if_e	jmp	#LR__2023
15e5c     48 20 06 F1 | 	add	local02, #72
15e60     10 2D 02 FB | 	rdlong	local08, local02
15e64     16 31 02 F6 | 	mov	local10, local08
15e68     13 2C 46 F7 | 	zerox	local08, #19
15e6c     14 30 46 F0 | 	shr	local10, #20
15e70     02 30 66 F0 | 	shl	local10, #2
15e74     ED 30 02 F1 | 	add	local10, __methods__
15e78     18 31 02 FB | 	rdlong	local10, local10
15e7c     17 13 02 F6 | 	mov	arg01, local09
15e80     F2 32 02 F6 | 	mov	local11, objptr
15e84     16 E5 01 F6 | 	mov	objptr, local08
15e88     2D 30 62 FD | 	call	local10
15e8c     19 E5 01 F6 | 	mov	objptr, local11
15e90     FD 12 0A F6 | 	mov	arg01, result1 wz
15e94     40 00 90 AD |  if_e	jmp	#LR__2022
15e98     13 2D 02 F6 | 	mov	local08, local05
15e9c     02 2C 66 F0 | 	shl	local08, #2
15ea0     74 E8 05 F1 | 	add	ptr___system__dat__, #116
15ea4     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
15ea8     16 01 68 FC | 	wrlong	#0, local08
15eac     02 26 66 F0 | 	shl	local05, #2
15eb0     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
15eb4     F4 26 02 F1 | 	add	local05, ptr___system__dat__
15eb8     13 01 68 FC | 	wrlong	#0, local05
15ebc     09 13 6A F6 | 	neg	arg01, arg01 wz
15ec0     44 E8 85 F1 | 	sub	ptr___system__dat__, #68
15ec4     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
15ec8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
15ecc     01 FA 65 56 |  if_ne	neg	result1, #1
15ed0     00 FA 05 A6 |  if_e	mov	result1, #0
15ed4     18 00 90 FD | 	jmp	#LR__2025
15ed8                 | LR__2022
15ed8                 | LR__2023
15ed8     02 26 66 F0 | 	shl	local05, #2
15edc     64 E8 05 F1 | 	add	ptr___system__dat__, #100
15ee0     F4 26 02 F1 | 	add	local05, ptr___system__dat__
15ee4     13 2F 62 FC | 	wrlong	local09, local05
15ee8     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15eec                 | LR__2024
15eec     00 FA 05 F6 | 	mov	result1, #0
15ef0                 | LR__2025
15ef0     A7 F0 03 F6 | 	mov	ptra, fp
15ef4     B2 00 A0 FD | 	call	#popregs_
15ef8                 | __system___mount_ret
15ef8     2D 00 64 FD | 	ret
15efc                 | 
15efc                 | __system___chdir
15efc     00 4A 05 F6 | 	mov	COUNT_, #0
15f00     A8 00 A0 FD | 	call	#pushregs_
15f04     40 F0 07 F1 | 	add	ptra, #64
15f08     04 4E 05 F1 | 	add	fp, #4
15f0c     A7 12 62 FC | 	wrlong	arg01, fp
15f10     04 4E 05 F1 | 	add	fp, #4
15f14     A7 14 02 F6 | 	mov	arg02, fp
15f18     08 4E 85 F1 | 	sub	fp, #8
15f1c     2C 44 B0 FD | 	call	#__system__stat
15f20     3C 4E 05 F1 | 	add	fp, #60
15f24     A7 FA 61 FC | 	wrlong	result1, fp
15f28     3C 4E 85 F1 | 	sub	fp, #60
15f2c     00 FA 0D F2 | 	cmp	result1, #0 wz
15f30     3C 4E 05 51 |  if_ne	add	fp, #60
15f34     A7 FA 01 5B |  if_ne	rdlong	result1, fp
15f38     3C 4E 85 51 |  if_ne	sub	fp, #60
15f3c     BC 00 90 5D |  if_ne	jmp	#LR__2032
15f40     10 4E 05 F1 | 	add	fp, #16
15f44     A7 12 02 FB | 	rdlong	arg01, fp
15f48     10 4E 85 F1 | 	sub	fp, #16
15f4c     78 00 00 FF 
15f50     00 12 06 F5 | 	and	arg01, ##61440
15f54     08 00 00 FF 
15f58     00 12 0E F2 | 	cmp	arg01, ##4096 wz
15f5c     20 E8 05 51 |  if_ne	add	ptr___system__dat__, #32
15f60     F4 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
15f64     20 E8 85 51 |  if_ne	sub	ptr___system__dat__, #32
15f68     01 FA 65 56 |  if_ne	neg	result1, #1
15f6c     8C 00 90 5D |  if_ne	jmp	#LR__2032
15f70     04 4E 05 F1 | 	add	fp, #4
15f74     A7 16 02 FB | 	rdlong	arg03, fp
15f78     04 4E 85 F1 | 	sub	fp, #4
15f7c     0B 17 C2 FA | 	rdbyte	arg03, arg03
15f80     2F 16 0E F2 | 	cmp	arg03, #47 wz
15f84     24 00 90 5D |  if_ne	jmp	#LR__2030
15f88     84 E8 05 F1 | 	add	ptr___system__dat__, #132
15f8c     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
15f90     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
15f94     04 4E 05 F1 | 	add	fp, #4
15f98     A7 14 02 FB | 	rdlong	arg02, fp
15f9c     04 4E 85 F1 | 	sub	fp, #4
15fa0     00 17 06 F6 | 	mov	arg03, #256
15fa4     C4 46 B0 FD | 	call	#__system__strncpy
15fa8     4C 00 90 FD | 	jmp	#LR__2031
15fac                 | LR__2030
15fac     84 E9 05 F1 | 	add	ptr___system__dat__, #388
15fb0     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
15fb4     38 4E 05 F1 | 	add	fp, #56
15fb8     A7 12 62 FC | 	wrlong	arg01, fp
15fbc     38 4E 85 F1 | 	sub	fp, #56
15fc0     00 E9 85 F1 | 	sub	ptr___system__dat__, #256
15fc4     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
15fc8     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
15fcc     00 17 06 F6 | 	mov	arg03, #256
15fd0     98 46 B0 FD | 	call	#__system__strncpy
15fd4     38 4E 05 F1 | 	add	fp, #56
15fd8     A7 12 02 FB | 	rdlong	arg01, fp
15fdc     34 4E 85 F1 | 	sub	fp, #52
15fe0     A7 14 02 FB | 	rdlong	arg02, fp
15fe4     04 4E 85 F1 | 	sub	fp, #4
15fe8     84 E8 05 F1 | 	add	ptr___system__dat__, #132
15fec     F4 16 02 F6 | 	mov	arg03, ptr___system__dat__
15ff0     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
15ff4     10 00 B0 FD | 	call	#__system____getvfsforfile
15ff8                 | LR__2031
15ff8     00 FA 05 F6 | 	mov	result1, #0
15ffc                 | LR__2032
15ffc     A7 F0 03 F6 | 	mov	ptra, fp
16000     B2 00 A0 FD | 	call	#popregs_
16004                 | __system___chdir_ret
16004     2D 00 64 FD | 	ret
16008                 | 
16008                 | __system____getvfsforfile
16008     0E 4A 05 F6 | 	mov	COUNT_, #14
1600c     A8 00 A0 FD | 	call	#pushregs_
16010     09 1F 02 F6 | 	mov	local01, arg01
16014     0A 21 02 F6 | 	mov	local02, arg02
16018     0B 23 02 F6 | 	mov	local03, arg03
1601c     97 10 48 FB | 	callpa	#(@LR__2041-@LR__2040)>>2,fcache_load_ptr_
16020                 | LR__2040
16020     10 FB C1 FA | 	rdbyte	result1, local02
16024     2F FA 0D F2 | 	cmp	result1, #47 wz
16028     01 20 06 A1 |  if_e	add	local02, #1
1602c     10 25 C2 AA |  if_e	rdbyte	local04, local02
16030     01 20 86 A1 |  if_e	sub	local02, #1
16034     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
16038     01 20 06 A1 |  if_e	add	local02, #1
1603c     E0 FF 9F AD |  if_e	jmp	#LR__2040
16040                 | LR__2041
16040     10 25 C2 FA | 	rdbyte	local04, local02
16044     2F 24 0E F2 | 	cmp	local04, #47 wz
16048     14 00 90 5D |  if_ne	jmp	#LR__2042
1604c     0F 13 02 F6 | 	mov	arg01, local01
16050     10 15 02 F6 | 	mov	arg02, local02
16054     00 17 06 F6 | 	mov	arg03, #256
16058     10 46 B0 FD | 	call	#__system__strncpy
1605c     7C 00 90 FD | 	jmp	#LR__2044
16060                 | LR__2042
16060     84 E8 05 F1 | 	add	ptr___system__dat__, #132
16064     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
16068     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
1606c     0F 13 02 F6 | 	mov	arg01, local01
16070     00 17 06 F6 | 	mov	arg03, #256
16074     F4 45 B0 FD | 	call	#__system__strncpy
16078     10 25 CA FA | 	rdbyte	local04, local02 wz
1607c     5C 00 90 AD |  if_e	jmp	#LR__2043
16080     10 25 C2 FA | 	rdbyte	local04, local02
16084     2E 24 0E F2 | 	cmp	local04, #46 wz
16088     01 20 06 A1 |  if_e	add	local02, #1
1608c     10 27 C2 AA |  if_e	rdbyte	local05, local02
16090     01 20 86 A1 |  if_e	sub	local02, #1
16094     13 29 02 A6 |  if_e	mov	local06, local05
16098     07 28 4E A7 |  if_e	zerox	local06, #7 wz
1609c     3C 00 90 AD |  if_e	jmp	#LR__2043
160a0     0F 27 C2 FA | 	rdbyte	local05, local01
160a4     2F 26 0E F2 | 	cmp	local05, #47 wz
160a8     01 1E 06 A1 |  if_e	add	local01, #1
160ac     0F 25 C2 AA |  if_e	rdbyte	local04, local01
160b0     01 1E 86 A1 |  if_e	sub	local01, #1
160b4     00 24 4E A2 |  if_e	cmps	local04, #0 wz
160b8     25 01 00 5F 
160bc     38 14 06 56 |  if_ne	mov	arg02, ##@LR__4070
160c0     0F 13 02 56 |  if_ne	mov	arg01, local01
160c4     00 17 06 56 |  if_ne	mov	arg03, #256
160c8     EC 45 B0 5D |  if_ne	call	#__system__strncat
160cc     0F 13 02 F6 | 	mov	arg01, local01
160d0     10 15 02 F6 | 	mov	arg02, local02
160d4     00 17 06 F6 | 	mov	arg03, #256
160d8     DC 45 B0 FD | 	call	#__system__strncat
160dc                 | LR__2043
160dc                 | LR__2044
160dc     0F 13 02 F6 | 	mov	arg01, local01
160e0     94 47 B0 FD | 	call	#__system___normalizeName
160e4     0F 25 CA FA | 	rdbyte	local04, local01 wz
160e8     1C 00 90 AD |  if_e	jmp	#LR__2045
160ec     0F 25 C2 FA | 	rdbyte	local04, local01
160f0     2F 24 0E F2 | 	cmp	local04, #47 wz
160f4     01 1E 06 A1 |  if_e	add	local01, #1
160f8     0F 29 C2 AA |  if_e	rdbyte	local06, local01
160fc     01 1E 86 A1 |  if_e	sub	local01, #1
16100     00 28 4E A2 |  if_e	cmps	local06, #0 wz
16104     18 00 90 5D |  if_ne	jmp	#LR__2046
16108                 | LR__2045
16108     01 00 00 FF 
1610c     84 E8 05 F1 | 	add	ptr___system__dat__, ##644
16110     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
16114     01 00 00 FF 
16118     84 E8 85 F1 | 	sub	ptr___system__dat__, ##644
1611c     EC 01 90 FD | 	jmp	#LR__2060
16120                 | LR__2046
16120     00 2A 06 F6 | 	mov	local07, #0
16124                 | LR__2047
16124     04 2A 56 F2 | 	cmps	local07, #4 wc
16128     CC 01 90 3D |  if_ae	jmp	#LR__2059
1612c     15 29 02 F6 | 	mov	local06, local07
16130     02 28 66 F0 | 	shl	local06, #2
16134     64 E8 05 F1 | 	add	ptr___system__dat__, #100
16138     F4 28 02 F1 | 	add	local06, ptr___system__dat__
1613c     14 29 0A FB | 	rdlong	local06, local06 wz
16140     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
16144     A8 01 90 AD |  if_e	jmp	#LR__2058
16148     15 25 02 F6 | 	mov	local04, local07
1614c     02 24 66 F0 | 	shl	local04, #2
16150     64 E8 05 F1 | 	add	ptr___system__dat__, #100
16154     F4 24 02 F1 | 	add	local04, ptr___system__dat__
16158     12 13 02 FB | 	rdlong	arg01, local04
1615c     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
16160     09 2D 02 F6 | 	mov	local08, arg01
16164     97 06 48 FB | 	callpa	#(@LR__2049-@LR__2048)>>2,fcache_load_ptr_
16168                 | LR__2048
16168     16 FB C9 FA | 	rdbyte	result1, local08 wz
1616c     01 2C 06 51 |  if_ne	add	local08, #1
16170     F4 FF 9F 5D |  if_ne	jmp	#LR__2048
16174                 | LR__2049
16174     09 2D 82 F1 | 	sub	local08, arg01
16178     16 2F 02 F6 | 	mov	local09, local08
1617c     17 25 02 F6 | 	mov	local04, local09
16180     0F 25 02 F1 | 	add	local04, local01
16184     12 29 C2 FA | 	rdbyte	local06, local04
16188     2F 28 0E F2 | 	cmp	local06, #47 wz
1618c     17 31 02 56 |  if_ne	mov	local10, local09
16190     0F 31 02 51 |  if_ne	add	local10, local01
16194     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
16198     54 01 90 5D |  if_ne	jmp	#LR__2057
1619c     15 17 02 F6 | 	mov	arg03, local07
161a0     02 16 66 F0 | 	shl	arg03, #2
161a4     64 E8 05 F1 | 	add	ptr___system__dat__, #100
161a8     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
161ac     0B 15 02 FB | 	rdlong	arg02, arg03
161b0     17 17 02 F6 | 	mov	arg03, local09
161b4     0F 13 02 F6 | 	mov	arg01, local01
161b8     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
161bc     58 45 B0 FD | 	call	#__system__strncmp
161c0     00 FA 4D F2 | 	cmps	result1, #0 wz
161c4     28 01 90 5D |  if_ne	jmp	#LR__2057
161c8     15 33 02 F6 | 	mov	local11, local07
161cc     02 32 66 F0 | 	shl	local11, #2
161d0     74 E8 05 F1 | 	add	ptr___system__dat__, #116
161d4     F4 32 02 F1 | 	add	local11, ptr___system__dat__
161d8     19 35 02 FB | 	rdlong	local12, local11
161dc     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
161e0     97 22 48 FB | 	callpa	#(@LR__2051-@LR__2050)>>2,fcache_load_ptr_
161e4                 | LR__2050
161e4     17 29 02 F6 | 	mov	local06, local09
161e8     01 28 06 F1 | 	add	local06, #1
161ec     0F 29 02 F1 | 	add	local06, local01
161f0     14 33 C2 FA | 	rdbyte	local11, local06
161f4     2E 32 0E F2 | 	cmp	local11, #46 wz
161f8     2C 00 90 5D |  if_ne	jmp	#LR__2052
161fc     17 33 02 F6 | 	mov	local11, local09
16200     02 32 06 F1 | 	add	local11, #2
16204     0F 33 02 F1 | 	add	local11, local01
16208     19 31 C2 FA | 	rdbyte	local10, local11
1620c     2F 30 0E F2 | 	cmp	local10, #47 wz
16210     17 37 02 56 |  if_ne	mov	local13, local09
16214     02 36 06 51 |  if_ne	add	local13, #2
16218     0F 37 02 51 |  if_ne	add	local13, local01
1621c     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
16220     01 2E 06 A1 |  if_e	add	local09, #1
16224     BC FF 9F AD |  if_e	jmp	#LR__2050
16228                 | LR__2051
16228                 | LR__2052
16228     00 22 0E F2 | 	cmp	local03, #0 wz
1622c     11 13 02 56 |  if_ne	mov	arg01, local03
16230     0F 15 02 56 |  if_ne	mov	arg02, local01
16234     00 17 06 56 |  if_ne	mov	arg03, #256
16238     30 44 B0 5D |  if_ne	call	#__system__strncpy
1623c     0F 15 02 F6 | 	mov	arg02, local01
16240     17 15 02 F1 | 	add	arg02, local09
16244     01 14 06 F1 | 	add	arg02, #1
16248     0F 13 02 F6 | 	mov	arg01, local01
1624c     D4 F5 BF FD | 	call	#__system____builtin_strcpy
16250     0F 13 02 F6 | 	mov	arg01, local01
16254     09 2D 02 F6 | 	mov	local08, arg01
16258     97 06 48 FB | 	callpa	#(@LR__2054-@LR__2053)>>2,fcache_load_ptr_
1625c                 | LR__2053
1625c     16 FB C9 FA | 	rdbyte	result1, local08 wz
16260     01 2C 06 51 |  if_ne	add	local08, #1
16264     F4 FF 9F 5D |  if_ne	jmp	#LR__2053
16268                 | LR__2054
16268     09 2D 82 F1 | 	sub	local08, arg01
1626c     16 2F 02 F6 | 	mov	local09, local08
16270                 | LR__2055
16270     01 2E 56 F2 | 	cmps	local09, #1 wc
16274     70 00 90 CD |  if_b	jmp	#LR__2056
16278     17 25 02 F6 | 	mov	local04, local09
1627c     0F 25 02 F1 | 	add	local04, local01
16280     12 33 C2 FA | 	rdbyte	local11, local04
16284     2F 32 0E F2 | 	cmp	local11, #47 wz
16288     17 33 02 A6 |  if_e	mov	local11, local09
1628c     0F 33 02 A1 |  if_e	add	local11, local01
16290     19 01 48 AC |  if_e	wrbyte	#0, local11
16294     01 2E 86 A1 |  if_e	sub	local09, #1
16298     D4 FF 9F AD |  if_e	jmp	#LR__2055
1629c     17 25 02 F6 | 	mov	local04, local09
162a0     0F 25 02 F1 | 	add	local04, local01
162a4     12 33 C2 FA | 	rdbyte	local11, local04
162a8     2E 32 0E F2 | 	cmp	local11, #46 wz
162ac     38 00 90 5D |  if_ne	jmp	#LR__2056
162b0     02 2E 56 F2 | 	cmps	local09, #2 wc
162b4     30 00 90 CD |  if_b	jmp	#LR__2056
162b8     17 39 02 F6 | 	mov	local14, local09
162bc     01 38 86 F1 | 	sub	local14, #1
162c0     0F 39 02 F1 | 	add	local14, local01
162c4     1C 27 C2 FA | 	rdbyte	local05, local14
162c8     2F 26 0E F2 | 	cmp	local05, #47 wz
162cc     18 00 90 5D |  if_ne	jmp	#LR__2056
162d0     17 25 02 F6 | 	mov	local04, local09
162d4     01 24 86 F1 | 	sub	local04, #1
162d8     0F 25 02 F1 | 	add	local04, local01
162dc     12 01 48 FC | 	wrbyte	#0, local04
162e0     02 2E 86 F1 | 	sub	local09, #2
162e4     88 FF 9F FD | 	jmp	#LR__2055
162e8                 | LR__2056
162e8     1A FB 01 F6 | 	mov	result1, local12
162ec     1C 00 90 FD | 	jmp	#LR__2060
162f0                 | LR__2057
162f0                 | LR__2058
162f0     01 2A 06 F1 | 	add	local07, #1
162f4     2C FE 9F FD | 	jmp	#LR__2047
162f8                 | LR__2059
162f8     03 00 00 FF 
162fc     38 E9 05 F1 | 	add	ptr___system__dat__, ##1848
16300     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
16304     03 00 00 FF 
16308     38 E9 85 F1 | 	sub	ptr___system__dat__, ##1848
1630c                 | LR__2060
1630c     A7 F0 03 F6 | 	mov	ptra, fp
16310     B2 00 A0 FD | 	call	#popregs_
16314                 | __system____getvfsforfile_ret
16314     2D 00 64 FD | 	ret
16318                 | 
16318                 | __system___basic_open
16318     05 4A 05 F6 | 	mov	COUNT_, #5
1631c     A8 00 A0 FD | 	call	#pushregs_
16320     0A 1F 02 F6 | 	mov	local01, arg02
16324     0B 21 02 F6 | 	mov	local02, arg03
16328     0C 23 02 F6 | 	mov	local03, arg04
1632c     00 24 06 F6 | 	mov	local04, #0
16330     10 43 B0 FD | 	call	#__system____getftab
16334     FD 26 0A F6 | 	mov	local05, result1 wz
16338     18 00 90 5D |  if_ne	jmp	#LR__2070
1633c     EE 12 02 F6 | 	mov	arg01, abortchain
16340     0C 14 06 F6 | 	mov	arg02, #12
16344     01 16 06 F6 | 	mov	arg03, #1
16348     DA 00 A0 FD | 	call	#__longjmp
1634c     01 FA 65 F6 | 	neg	result1, #1
16350     14 01 90 FD | 	jmp	#LR__2079
16354                 | LR__2070
16354     08 26 06 F1 | 	add	local05, #8
16358     13 FB 09 FB | 	rdlong	result1, local05 wz
1635c     08 26 86 F1 | 	sub	local05, #8
16360     13 13 02 56 |  if_ne	mov	arg01, local05
16364     6C 3A B0 5D |  if_ne	call	#__system___closeraw
16368     00 1E 0E F2 | 	cmp	local01, #0 wz
1636c     00 20 0E A2 |  if_e	cmp	local02, #0 wz
16370     00 22 0E A2 |  if_e	cmp	local03, #0 wz
16374     3C 00 90 AD |  if_e	jmp	#LR__2072
16378     0C 12 06 F6 | 	mov	arg01, #12
1637c     58 2F B0 FD | 	call	#__system___gc_alloc_managed
16380     FD 24 0A F6 | 	mov	local04, result1 wz
16384     18 00 90 5D |  if_ne	jmp	#LR__2071
16388     EE 12 02 F6 | 	mov	arg01, abortchain
1638c     07 14 06 F6 | 	mov	arg02, #7
16390     01 16 06 F6 | 	mov	arg03, #1
16394     DA 00 A0 FD | 	call	#__longjmp
16398     01 FA 65 F6 | 	neg	result1, #1
1639c     C8 00 90 FD | 	jmp	#LR__2079
163a0                 | LR__2071
163a0     12 01 68 FC | 	wrlong	#0, local04
163a4     04 24 06 F1 | 	add	local04, #4
163a8     12 01 68 FC | 	wrlong	#0, local04
163ac     04 24 86 F1 | 	sub	local04, #4
163b0     13 25 62 FC | 	wrlong	local04, local05
163b4                 | LR__2072
163b4     00 1E 0E F2 | 	cmp	local01, #0 wz
163b8     20 00 90 AD |  if_e	jmp	#LR__2073
163bc     12 1F 62 FC | 	wrlong	local01, local04
163c0     12 FB 01 F6 | 	mov	result1, local04
163c4     00 B0 02 FF 
163c8     00 FA 45 F5 | 	or	result1, ##90177536
163cc     1C 26 06 F1 | 	add	local05, #28
163d0     13 FB 61 FC | 	wrlong	result1, local05
163d4     1C 26 86 F1 | 	sub	local05, #28
163d8     0C 00 90 FD | 	jmp	#LR__2074
163dc                 | LR__2073
163dc     1C 26 06 F1 | 	add	local05, #28
163e0     13 01 68 FC | 	wrlong	#0, local05
163e4     1C 26 86 F1 | 	sub	local05, #28
163e8                 | LR__2074
163e8     00 20 0E F2 | 	cmp	local02, #0 wz
163ec     28 00 90 AD |  if_e	jmp	#LR__2075
163f0     04 24 06 F1 | 	add	local04, #4
163f4     12 21 62 FC | 	wrlong	local02, local04
163f8     04 24 86 F1 | 	sub	local04, #4
163fc     12 FB 01 F6 | 	mov	result1, local04
16400     00 B8 02 FF 
16404     00 FA 45 F5 | 	or	result1, ##91226112
16408     20 26 06 F1 | 	add	local05, #32
1640c     13 FB 61 FC | 	wrlong	result1, local05
16410     20 26 86 F1 | 	sub	local05, #32
16414     0C 00 90 FD | 	jmp	#LR__2076
16418                 | LR__2075
16418     20 26 06 F1 | 	add	local05, #32
1641c     13 01 68 FC | 	wrlong	#0, local05
16420     20 26 86 F1 | 	sub	local05, #32
16424                 | LR__2076
16424     00 22 0E F2 | 	cmp	local03, #0 wz
16428     24 00 90 AD |  if_e	jmp	#LR__2077
1642c     08 24 06 F1 | 	add	local04, #8
16430     12 23 62 FC | 	wrlong	local03, local04
16434     08 24 86 F1 | 	sub	local04, #8
16438     00 C0 02 FF 
1643c     00 24 46 F5 | 	or	local04, ##92274688
16440     24 26 06 F1 | 	add	local05, #36
16444     13 25 62 FC | 	wrlong	local04, local05
16448     24 26 86 F1 | 	sub	local05, #36
1644c     0C 00 90 FD | 	jmp	#LR__2078
16450                 | LR__2077
16450     24 26 06 F1 | 	add	local05, #36
16454     13 01 68 FC | 	wrlong	#0, local05
16458     24 26 86 F1 | 	sub	local05, #36
1645c                 | LR__2078
1645c     08 26 06 F1 | 	add	local05, #8
16460     13 0F 68 FC | 	wrlong	#7, local05
16464     00 FA 05 F6 | 	mov	result1, #0
16468                 | LR__2079
16468     A7 F0 03 F6 | 	mov	ptra, fp
1646c     B2 00 A0 FD | 	call	#popregs_
16470                 | __system___basic_open_ret
16470     2D 00 64 FD | 	ret
16474                 | 
16474                 | __system___basic_open_string
16474     04 4A 05 F6 | 	mov	COUNT_, #4
16478     A8 00 A0 FD | 	call	#pushregs_
1647c     0A 1F 02 F6 | 	mov	local01, arg02
16480     0B 21 02 F6 | 	mov	local02, arg03
16484     BC 41 B0 FD | 	call	#__system____getftab
16488     FD 22 0A F6 | 	mov	local03, result1 wz
1648c     18 00 90 5D |  if_ne	jmp	#LR__2080
16490     EE 12 02 F6 | 	mov	arg01, abortchain
16494     0C 14 06 F6 | 	mov	arg02, #12
16498     01 16 06 F6 | 	mov	arg03, #1
1649c     DA 00 A0 FD | 	call	#__longjmp
164a0     01 FA 65 F6 | 	neg	result1, #1
164a4     58 00 90 FD | 	jmp	#LR__2082
164a8                 | LR__2080
164a8     08 22 06 F1 | 	add	local03, #8
164ac     11 19 0A FB | 	rdlong	arg04, local03 wz
164b0     08 22 86 F1 | 	sub	local03, #8
164b4     11 13 02 56 |  if_ne	mov	arg01, local03
164b8     18 39 B0 5D |  if_ne	call	#__system___closeraw
164bc     0F 15 02 F6 | 	mov	arg02, local01
164c0     10 17 02 F6 | 	mov	arg03, local02
164c4     11 13 02 F6 | 	mov	arg01, local03
164c8     B6 19 06 F6 | 	mov	arg04, #438
164cc     04 36 B0 FD | 	call	#__system___openraw
164d0     FD 24 02 F6 | 	mov	local04, result1
164d4     00 24 56 F2 | 	cmps	local04, #0 wc
164d8     20 00 90 3D |  if_ae	jmp	#LR__2081
164dc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
164e0     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
164e4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
164e8     EE 12 02 F6 | 	mov	arg01, abortchain
164ec     01 16 06 F6 | 	mov	arg03, #1
164f0     DA 00 A0 FD | 	call	#__longjmp
164f4     01 FA 65 F6 | 	neg	result1, #1
164f8     04 00 90 FD | 	jmp	#LR__2082
164fc                 | LR__2081
164fc     12 FB 01 F6 | 	mov	result1, local04
16500                 | LR__2082
16500     A7 F0 03 F6 | 	mov	ptra, fp
16504     B2 00 A0 FD | 	call	#popregs_
16508                 | __system___basic_open_string_ret
16508     2D 00 64 FD | 	ret
1650c                 | 
1650c                 | __system___basic_print_char
1650c     03 4A 05 F6 | 	mov	COUNT_, #3
16510     A8 00 A0 FD | 	call	#pushregs_
16514     0A 1F 02 F6 | 	mov	local01, arg02
16518     7C 48 B0 FD | 	call	#__system___gettxfunc
1651c     FD 20 0A F6 | 	mov	local02, result1 wz
16520     00 FA 05 A6 |  if_e	mov	result1, #0
16524     30 00 90 AD |  if_e	jmp	#LR__2090
16528     10 23 02 F6 | 	mov	local03, local02
1652c     13 20 46 F7 | 	zerox	local02, #19
16530     14 22 46 F0 | 	shr	local03, #20
16534     02 22 66 F0 | 	shl	local03, #2
16538     ED 22 02 F1 | 	add	local03, __methods__
1653c     11 23 02 FB | 	rdlong	local03, local03
16540     0F 13 02 F6 | 	mov	arg01, local01
16544     F2 1E 02 F6 | 	mov	local01, objptr
16548     10 E5 01 F6 | 	mov	objptr, local02
1654c     2D 22 62 FD | 	call	local03
16550     0F E5 01 F6 | 	mov	objptr, local01
16554     01 FA 05 F6 | 	mov	result1, #1
16558                 | LR__2090
16558     A7 F0 03 F6 | 	mov	ptra, fp
1655c     B2 00 A0 FD | 	call	#popregs_
16560                 | __system___basic_print_char_ret
16560     2D 00 64 FD | 	ret
16564                 | 
16564                 | __system___basic_print_string
16564     03 4A 05 F6 | 	mov	COUNT_, #3
16568     A8 00 A0 FD | 	call	#pushregs_
1656c     0A 1F 02 F6 | 	mov	local01, arg02
16570     0B 21 02 F6 | 	mov	local02, arg03
16574     20 48 B0 FD | 	call	#__system___gettxfunc
16578     FD 22 0A F6 | 	mov	local03, result1 wz
1657c     00 FA 05 A6 |  if_e	mov	result1, #0
16580     18 00 90 AD |  if_e	jmp	#LR__2100
16584     00 1E 0E F2 | 	cmp	local01, #0 wz
16588     00 FA 05 A6 |  if_e	mov	result1, #0
1658c     11 13 02 56 |  if_ne	mov	arg01, local03
16590     10 15 02 56 |  if_ne	mov	arg02, local02
16594     0F 17 02 56 |  if_ne	mov	arg03, local01
16598     9C 01 B0 5D |  if_ne	call	#__system___fmtstr
1659c                 | LR__2100
1659c     A7 F0 03 F6 | 	mov	ptra, fp
165a0     B2 00 A0 FD | 	call	#popregs_
165a4                 | __system___basic_print_string_ret
165a4     2D 00 64 FD | 	ret
165a8                 | 
165a8                 | __system___basic_print_integer
165a8     04 4A 05 F6 | 	mov	COUNT_, #4
165ac     A8 00 A0 FD | 	call	#pushregs_
165b0     0A 1F 02 F6 | 	mov	local01, arg02
165b4     0B 21 02 F6 | 	mov	local02, arg03
165b8     0C 23 02 F6 | 	mov	local03, arg04
165bc     D8 47 B0 FD | 	call	#__system___gettxfunc
165c0     FD 24 0A F6 | 	mov	local04, result1 wz
165c4     00 FA 05 A6 |  if_e	mov	result1, #0
165c8     12 13 02 56 |  if_ne	mov	arg01, local04
165cc     10 15 02 56 |  if_ne	mov	arg02, local02
165d0     0F 17 02 56 |  if_ne	mov	arg03, local01
165d4     11 19 02 56 |  if_ne	mov	arg04, local03
165d8     48 02 B0 5D |  if_ne	call	#__system___fmtnum
165dc     A7 F0 03 F6 | 	mov	ptra, fp
165e0     B2 00 A0 FD | 	call	#popregs_
165e4                 | __system___basic_print_integer_ret
165e4     2D 00 64 FD | 	ret
165e8                 | 
165e8                 | __system___basic_print_unsigned
165e8     03 4A 05 F6 | 	mov	COUNT_, #3
165ec     A8 00 A0 FD | 	call	#pushregs_
165f0     0A 1F 02 F6 | 	mov	local01, arg02
165f4     0B 21 02 F6 | 	mov	local02, arg03
165f8     0C 23 02 F6 | 	mov	local03, arg04
165fc     98 47 B0 FD | 	call	#__system___gettxfunc
16600     FD 12 0A F6 | 	mov	arg01, result1 wz
16604     00 FA 05 A6 |  if_e	mov	result1, #0
16608     3A 20 26 54 |  if_ne	bith	local02, #58
1660c     10 15 02 56 |  if_ne	mov	arg02, local02
16610     0F 17 02 56 |  if_ne	mov	arg03, local01
16614     11 19 02 56 |  if_ne	mov	arg04, local03
16618     08 02 B0 5D |  if_ne	call	#__system___fmtnum
1661c     A7 F0 03 F6 | 	mov	ptra, fp
16620     B2 00 A0 FD | 	call	#popregs_
16624                 | __system___basic_print_unsigned_ret
16624     2D 00 64 FD | 	ret
16628                 | 
16628                 | __system___basic_get_char
16628     03 4A 05 F6 | 	mov	COUNT_, #3
1662c     A8 00 A0 FD | 	call	#pushregs_
16630     A8 47 B0 FD | 	call	#__system___getrxfunc
16634     FD 1E 0A F6 | 	mov	local01, result1 wz
16638     01 FA 65 A6 |  if_e	neg	result1, #1
1663c     28 00 90 AD |  if_e	jmp	#LR__2110
16640     0F 21 02 F6 | 	mov	local02, local01
16644     13 1E 46 F7 | 	zerox	local01, #19
16648     14 20 46 F0 | 	shr	local02, #20
1664c     02 20 66 F0 | 	shl	local02, #2
16650     ED 20 02 F1 | 	add	local02, __methods__
16654     10 21 02 FB | 	rdlong	local02, local02
16658     F2 22 02 F6 | 	mov	local03, objptr
1665c     0F E5 01 F6 | 	mov	objptr, local01
16660     2D 20 62 FD | 	call	local02
16664     11 E5 01 F6 | 	mov	objptr, local03
16668                 | LR__2110
16668     A7 F0 03 F6 | 	mov	ptra, fp
1666c     B2 00 A0 FD | 	call	#popregs_
16670                 | __system___basic_get_char_ret
16670     2D 00 64 FD | 	ret
16674                 | 
16674                 | __system___basic_get
16674     04 4A 05 F6 | 	mov	COUNT_, #4
16678     A8 00 A0 FD | 	call	#pushregs_
1667c     0D 1F 02 F6 | 	mov	local01, arg05
16680     0F 19 02 FD | 	qmul	arg04, local01
16684     09 21 02 F6 | 	mov	local02, arg01
16688     0B 23 02 F6 | 	mov	local03, arg03
1668c     00 14 0E F2 | 	cmp	arg02, #0 wz
16690     01 14 86 51 |  if_ne	sub	arg02, #1
16694     10 13 02 56 |  if_ne	mov	arg01, local02
16698     00 16 06 56 |  if_ne	mov	arg03, #0
1669c     18 24 62 FD | 	getqx	local04
166a0     E8 3D B0 5D |  if_ne	call	#__system__lseek
166a4     11 15 02 F6 | 	mov	arg02, local03
166a8     12 17 02 F6 | 	mov	arg03, local04
166ac     10 13 02 F6 | 	mov	arg01, local02
166b0     60 3D B0 FD | 	call	#__system__read
166b4     FD 24 02 F6 | 	mov	local04, result1
166b8     01 24 56 F2 | 	cmps	local04, #1 wc
166bc     10 00 90 CD |  if_b	jmp	#LR__2120
166c0     12 5F 02 F6 | 	mov	muldiva_, local04
166c4     0F 61 02 F6 | 	mov	muldivb_, local01
166c8     BA 00 A0 FD | 	call	#divide_
166cc     30 25 02 F6 | 	mov	local04, muldivb_
166d0                 | LR__2120
166d0     12 FB 01 F6 | 	mov	result1, local04
166d4     A7 F0 03 F6 | 	mov	ptra, fp
166d8     B2 00 A0 FD | 	call	#popregs_
166dc                 | __system___basic_get_ret
166dc     2D 00 64 FD | 	ret
166e0                 | 
166e0                 | __system___fmtchar
166e0     00 4A 05 F6 | 	mov	COUNT_, #0
166e4     A8 00 A0 FD | 	call	#pushregs_
166e8     10 F0 07 F1 | 	add	ptra, #16
166ec     04 4E 05 F1 | 	add	fp, #4
166f0     A7 12 62 FC | 	wrlong	arg01, fp
166f4     04 4E 05 F1 | 	add	fp, #4
166f8     A7 14 62 FC | 	wrlong	arg02, fp
166fc     04 4E 05 F1 | 	add	fp, #4
16700     A7 16 62 FC | 	wrlong	arg03, fp
16704     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
16708     A7 16 62 FC | 	wrlong	arg03, fp
1670c     08 4E 85 F1 | 	sub	fp, #8
16710     A7 12 02 FB | 	rdlong	arg01, fp
16714     04 4E 05 F1 | 	add	fp, #4
16718     A7 14 02 FB | 	rdlong	arg02, fp
1671c     04 4E 05 F1 | 	add	fp, #4
16720     A7 16 02 F6 | 	mov	arg03, fp
16724     0C 4E 85 F1 | 	sub	fp, #12
16728     0C 00 B0 FD | 	call	#__system___fmtstr
1672c     A7 F0 03 F6 | 	mov	ptra, fp
16730     B2 00 A0 FD | 	call	#popregs_
16734                 | __system___fmtchar_ret
16734     2D 00 64 FD | 	ret
16738                 | 
16738                 | __system___fmtstr
16738     09 4A 05 F6 | 	mov	COUNT_, #9
1673c     A8 00 A0 FD | 	call	#pushregs_
16740     09 1F 02 F6 | 	mov	local01, arg01
16744     0A 21 02 F6 | 	mov	local02, arg02
16748     0B 23 02 F6 | 	mov	local03, arg03
1674c     10 19 E2 F8 | 	getbyte	arg04, local02, #0
16750     11 13 02 F6 | 	mov	arg01, local03
16754     09 25 02 F6 | 	mov	local04, arg01
16758     97 06 48 FB | 	callpa	#(@LR__2131-@LR__2130)>>2,fcache_load_ptr_
1675c                 | LR__2130
1675c     12 FB C9 FA | 	rdbyte	result1, local04 wz
16760     01 24 06 51 |  if_ne	add	local04, #1
16764     F4 FF 9F 5D |  if_ne	jmp	#LR__2130
16768                 | LR__2131
16768     09 25 82 F1 | 	sub	local04, arg01
1676c     00 18 0E F2 | 	cmp	arg04, #0 wz
16770     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
16774     10 15 02 F6 | 	mov	arg02, local02
16778     12 17 02 F6 | 	mov	arg03, local04
1677c     0F 13 02 F6 | 	mov	arg01, local01
16780     02 18 06 F6 | 	mov	arg04, #2
16784     B0 42 B0 FD | 	call	#__system___fmtpad
16788     FD 26 02 F6 | 	mov	local05, result1
1678c     00 26 56 F2 | 	cmps	local05, #0 wc
16790     13 FB 01 C6 |  if_b	mov	result1, local05
16794     80 00 90 CD |  if_b	jmp	#LR__2134
16798     01 24 56 F2 | 	cmps	local04, #1 wc
1679c     50 00 90 CD |  if_b	jmp	#LR__2133
167a0     12 29 02 F6 | 	mov	local06, local04
167a4                 | LR__2132
167a4     0F 2B 02 F6 | 	mov	local07, local01
167a8     0F 2D 02 F6 | 	mov	local08, local01
167ac     13 2A 46 F7 | 	zerox	local07, #19
167b0     14 2C 46 F0 | 	shr	local08, #20
167b4     02 2C 66 F0 | 	shl	local08, #2
167b8     ED 2C 02 F1 | 	add	local08, __methods__
167bc     16 2D 02 FB | 	rdlong	local08, local08
167c0     11 13 C2 FA | 	rdbyte	arg01, local03
167c4     F2 2E 02 F6 | 	mov	local09, objptr
167c8     15 E5 01 F6 | 	mov	objptr, local07
167cc     01 22 06 F1 | 	add	local03, #1
167d0     2D 2C 62 FD | 	call	local08
167d4     17 E5 01 F6 | 	mov	objptr, local09
167d8     FD 2E 02 F6 | 	mov	local09, result1
167dc     00 2E 56 F2 | 	cmps	local09, #0 wc
167e0     17 FB 01 C6 |  if_b	mov	result1, local09
167e4     30 00 90 CD |  if_b	jmp	#LR__2134
167e8     17 27 02 F1 | 	add	local05, local09
167ec     ED 29 6E FB | 	djnz	local06, #LR__2132
167f0                 | LR__2133
167f0     10 15 02 F6 | 	mov	arg02, local02
167f4     12 17 02 F6 | 	mov	arg03, local04
167f8     0F 13 02 F6 | 	mov	arg01, local01
167fc     01 18 06 F6 | 	mov	arg04, #1
16800     34 42 B0 FD | 	call	#__system___fmtpad
16804     FD 2E 02 F6 | 	mov	local09, result1
16808     00 2E 56 F2 | 	cmps	local09, #0 wc
1680c     17 FB 01 C6 |  if_b	mov	result1, local09
16810     17 27 02 31 |  if_ae	add	local05, local09
16814     13 FB 01 36 |  if_ae	mov	result1, local05
16818                 | LR__2134
16818     A7 F0 03 F6 | 	mov	ptra, fp
1681c     B2 00 A0 FD | 	call	#popregs_
16820                 | __system___fmtstr_ret
16820     2D 00 64 FD | 	ret
16824                 | 
16824                 | __system___fmtnum
16824     0B 4A 05 F6 | 	mov	COUNT_, #11
16828     A8 00 A0 FD | 	call	#pushregs_
1682c     09 1F 02 F6 | 	mov	local01, arg01
16830     0A 21 02 F6 | 	mov	local02, arg02
16834     0B 23 02 F6 | 	mov	local03, arg03
16838     0C 25 02 F6 | 	mov	local04, arg04
1683c     F8 27 02 F6 | 	mov	local05, ptra
16840     13 29 02 F6 | 	mov	local06, local05
16844     00 2A 06 F6 | 	mov	local07, #0
16848     10 2D 02 F6 | 	mov	local08, local02
1684c     10 2C 46 F0 | 	shr	local08, #16
16850     3F 2C 06 F5 | 	and	local08, #63
16854     10 2F E2 F8 | 	getbyte	local09, local02, #0
16858     10 31 02 F6 | 	mov	local10, local02
1685c     1A 30 46 F0 | 	shr	local10, #26
16860     03 30 06 F5 | 	and	local10, #3
16864     18 33 02 F6 | 	mov	local11, local10
16868     01 2C 56 F2 | 	cmps	local08, #1 wc
1686c     44 F0 07 F1 | 	add	ptra, #68
16870     01 2C 86 31 |  if_ae	sub	local08, #1
16874     41 2E 56 F2 | 	cmps	local09, #65 wc
16878     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
1687c     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
16880     03 32 0E F2 | 	cmp	local11, #3 wz
16884     00 32 06 A6 |  if_e	mov	local11, #0
16888     00 22 56 52 |  if_ne	cmps	local03, #0 wc
1688c     04 32 06 46 |  if_c_and_nz	mov	local11, #4
16890     11 23 62 46 |  if_c_and_nz	neg	local03, local03
16894     00 32 0E F2 | 	cmp	local11, #0 wz
16898     4C 00 90 AD |  if_e	jmp	#LR__2143
1689c     01 2A 06 F6 | 	mov	local07, #1
168a0     17 2D 0A F2 | 	cmp	local08, local09 wz
168a4     18 00 90 5D |  if_ne	jmp	#LR__2141
168a8     05 2C 6E FB | 	djnz	local08, #LR__2140
168ac     0F 13 02 F6 | 	mov	arg01, local01
168b0     10 15 02 F6 | 	mov	arg02, local02
168b4     23 16 06 F6 | 	mov	arg03, #35
168b8     24 FE BF FD | 	call	#__system___fmtchar
168bc     88 00 90 FD | 	jmp	#LR__2147
168c0                 | LR__2140
168c0                 | LR__2141
168c0     02 32 0E F2 | 	cmp	local11, #2 wz
168c4     14 31 02 A6 |  if_e	mov	local10, local06
168c8     01 28 06 A1 |  if_e	add	local06, #1
168cc     18 41 48 AC |  if_e	wrbyte	#32, local10
168d0     14 00 90 AD |  if_e	jmp	#LR__2142
168d4     04 32 0E F2 | 	cmp	local11, #4 wz
168d8     14 5B 48 AC |  if_e	wrbyte	#45, local06
168dc     01 28 06 A1 |  if_e	add	local06, #1
168e0     14 57 48 5C |  if_ne	wrbyte	#43, local06
168e4     01 28 06 51 |  if_ne	add	local06, #1
168e8                 | LR__2142
168e8                 | LR__2143
168e8     14 13 02 F6 | 	mov	arg01, local06
168ec     11 15 02 F6 | 	mov	arg02, local03
168f0     12 17 02 F6 | 	mov	arg03, local04
168f4     16 19 02 F6 | 	mov	arg04, local08
168f8     00 1A 06 F6 | 	mov	arg05, #0
168fc     1D 20 2E F4 | 	testbn	local02, #29 wz
16900     01 1A 06 56 |  if_ne	mov	arg05, #1
16904     F8 41 B0 FD | 	call	#__system___uitoa
16908     FD 2A 02 F1 | 	add	local07, result1
1690c     17 2B 5A F2 | 	cmps	local07, local09 wcz
16910     24 00 90 ED |  if_be	jmp	#LR__2146
16914     97 0E 48 FB | 	callpa	#(@LR__2145-@LR__2144)>>2,fcache_load_ptr_
16918                 | LR__2144
16918     17 31 02 F6 | 	mov	local10, local09
1691c     01 30 56 F2 | 	cmps	local10, #1 wc
16920     01 2E 86 F1 | 	sub	local09, #1
16924     14 31 02 36 |  if_ae	mov	local10, local06
16928     01 28 06 31 |  if_ae	add	local06, #1
1692c     18 47 48 3C |  if_ae	wrbyte	#35, local10
16930     E4 FF 9F 3D |  if_ae	jmp	#LR__2144
16934                 | LR__2145
16934     14 01 48 FC | 	wrbyte	#0, local06
16938                 | LR__2146
16938     0F 13 02 F6 | 	mov	arg01, local01
1693c     10 15 02 F6 | 	mov	arg02, local02
16940     13 17 02 F6 | 	mov	arg03, local05
16944     F0 FD BF FD | 	call	#__system___fmtstr
16948                 | LR__2147
16948     A7 F0 03 F6 | 	mov	ptra, fp
1694c     B2 00 A0 FD | 	call	#popregs_
16950                 | __system___fmtnum_ret
16950     2D 00 64 FD | 	ret
16954                 | 
16954                 | __system___fmtfloat
16954     10 4A 05 F6 | 	mov	COUNT_, #16
16958     A8 00 A0 FD | 	call	#pushregs_
1695c     24 F1 07 F1 | 	add	ptra, #292
16960     04 4E 05 F1 | 	add	fp, #4
16964     A7 12 62 FC | 	wrlong	arg01, fp
16968     04 4E 05 F1 | 	add	fp, #4
1696c     A7 14 62 FC | 	wrlong	arg02, fp
16970     04 4E 05 F1 | 	add	fp, #4
16974     A7 16 62 FC | 	wrlong	arg03, fp
16978     04 4E 05 F1 | 	add	fp, #4
1697c     A7 18 62 FC | 	wrlong	arg04, fp
16980     0C 4E 05 F1 | 	add	fp, #12
16984     A7 14 68 FC | 	wrlong	#10, fp
16988     08 4E 05 F1 | 	add	fp, #8
1698c     A7 00 68 FC | 	wrlong	#0, fp
16990     08 4E 05 F1 | 	add	fp, #8
16994     A7 00 68 FC | 	wrlong	#0, fp
16998     08 4E 05 F1 | 	add	fp, #8
1699c     A7 00 68 FC | 	wrlong	#0, fp
169a0     04 4E 05 F1 | 	add	fp, #4
169a4     A7 04 68 FC | 	wrlong	#2, fp
169a8     04 4E 05 F1 | 	add	fp, #4
169ac     A7 00 68 FC | 	wrlong	#0, fp
169b0     04 4E 05 F1 | 	add	fp, #4
169b4     A7 00 68 FC | 	wrlong	#0, fp
169b8     04 4E 05 F1 | 	add	fp, #4
169bc     A7 00 68 FC | 	wrlong	#0, fp
169c0     04 4E 05 F1 | 	add	fp, #4
169c4     A7 00 68 FC | 	wrlong	#0, fp
169c8     18 4E 05 F1 | 	add	fp, #24
169cc     A7 00 68 FC | 	wrlong	#0, fp
169d0     68 4E 05 F1 | 	add	fp, #104
169d4     A7 1E 02 F6 | 	mov	local01, fp
169d8     08 4E 85 F1 | 	sub	fp, #8
169dc     A7 1E 62 FC | 	wrlong	local01, fp
169e0     04 4E 05 F1 | 	add	fp, #4
169e4     A7 1E 62 FC | 	wrlong	local01, fp
169e8     BC 4E 85 F1 | 	sub	fp, #188
169ec     A7 1E 02 FB | 	rdlong	local01, fp
169f0     10 1E 46 F0 | 	shr	local01, #16
169f4     3F 1E 06 F5 | 	and	local01, #63
169f8     B0 4E 05 F1 | 	add	fp, #176
169fc     A7 1E 62 FC | 	wrlong	local01, fp
16a00     B0 4E 85 F1 | 	sub	fp, #176
16a04     A7 1E 02 FB | 	rdlong	local01, fp
16a08     1C 1E 46 F0 | 	shr	local01, #28
16a0c     01 1E 06 F5 | 	and	local01, #1
16a10     08 4F 05 F1 | 	add	fp, #264
16a14     A7 1E 62 FC | 	wrlong	local01, fp
16a18     58 4E 85 F1 | 	sub	fp, #88
16a1c     A7 1E 0A FB | 	rdlong	local01, fp wz
16a20     B8 4E 85 F1 | 	sub	fp, #184
16a24     3C 00 90 5D |  if_ne	jmp	#LR__2151
16a28     10 4E 05 F1 | 	add	fp, #16
16a2c     A7 1E 02 FB | 	rdlong	local01, fp
16a30     10 4E 85 F1 | 	sub	fp, #16
16a34     61 1E 0E F2 | 	cmp	local01, #97 wz
16a38     18 00 90 5D |  if_ne	jmp	#LR__2150
16a3c     B8 4E 05 F1 | 	add	fp, #184
16a40     A7 1A 68 FC | 	wrlong	#13, fp
16a44     84 4E 85 F1 | 	sub	fp, #132
16a48     A7 02 68 FC | 	wrlong	#1, fp
16a4c     34 4E 85 F1 | 	sub	fp, #52
16a50     24 00 90 FD | 	jmp	#LR__2152
16a54                 | LR__2150
16a54     B8 4E 05 F1 | 	add	fp, #184
16a58     A7 0C 68 FC | 	wrlong	#6, fp
16a5c     B8 4E 85 F1 | 	sub	fp, #184
16a60     14 00 90 FD | 	jmp	#LR__2152
16a64                 | LR__2151
16a64     B8 4E 05 F1 | 	add	fp, #184
16a68     A7 1E 02 FB | 	rdlong	local01, fp
16a6c     01 1E 86 F1 | 	sub	local01, #1
16a70     A7 1E 62 FC | 	wrlong	local01, fp
16a74     B8 4E 85 F1 | 	sub	fp, #184
16a78                 | LR__2152
16a78     08 4E 05 F1 | 	add	fp, #8
16a7c     A7 1E 02 FB | 	rdlong	local01, fp
16a80     16 1E 46 F0 | 	shr	local01, #22
16a84     03 1E 06 F5 | 	and	local01, #3
16a88     04 4F 05 F1 | 	add	fp, #260
16a8c     A7 1E 62 FC | 	wrlong	local01, fp
16a90     04 4F 85 F1 | 	sub	fp, #260
16a94     A7 1E 02 FB | 	rdlong	local01, fp
16a98     1D 1E 46 F0 | 	shr	local01, #29
16a9c     01 1E 06 F5 | 	and	local01, #1
16aa0     B4 4E 05 F1 | 	add	fp, #180
16aa4     A7 1E 62 FC | 	wrlong	local01, fp
16aa8     B4 4E 85 F1 | 	sub	fp, #180
16aac     A7 1E 02 FB | 	rdlong	local01, fp
16ab0     0F 1F EA F8 | 	getbyte	local01, local01, #1
16ab4     60 4E 05 F1 | 	add	fp, #96
16ab8     A7 1E 62 FC | 	wrlong	local01, fp
16abc     60 4E 85 F1 | 	sub	fp, #96
16ac0     A7 1E 02 FB | 	rdlong	local01, fp
16ac4     0F 1F E2 F8 | 	getbyte	local01, local01, #0
16ac8     64 4E 05 F1 | 	add	fp, #100
16acc     A7 1E 62 FC | 	wrlong	local01, fp
16ad0     00 1E 06 F6 | 	mov	local01, #0
16ad4     5C 4E 85 F1 | 	sub	fp, #92
16ad8     A7 1A 02 FB | 	rdlong	arg05, fp
16adc     65 1A 0E F2 | 	cmp	arg05, #101 wz
16ae0     01 1E 06 A6 |  if_e	mov	local01, #1
16ae4     14 4E 05 F1 | 	add	fp, #20
16ae8     A7 1E 62 FC | 	wrlong	local01, fp
16aec     98 4E 05 F1 | 	add	fp, #152
16af0     A7 20 0A FB | 	rdlong	local02, fp wz
16af4     45 1E 06 56 |  if_ne	mov	local01, #69
16af8     65 1E 06 A6 |  if_e	mov	local01, #101
16afc     8C 4E 85 F1 | 	sub	fp, #140
16b00     A7 1E 62 FC | 	wrlong	local01, fp
16b04     20 4E 85 F1 | 	sub	fp, #32
16b08     A7 1E 02 FB | 	rdlong	local01, fp
16b0c     10 4E 85 F1 | 	sub	fp, #16
16b10     61 1E 0E F2 | 	cmp	local01, #97 wz
16b14     4C 00 90 5D |  if_ne	jmp	#LR__2153
16b18     24 4E 05 F1 | 	add	fp, #36
16b1c     A7 02 68 FC | 	wrlong	#1, fp
16b20     98 4E 05 F1 | 	add	fp, #152
16b24     A7 20 0A FB | 	rdlong	local02, fp wz
16b28     50 1E 06 56 |  if_ne	mov	local01, #80
16b2c     70 1E 06 A6 |  if_e	mov	local01, #112
16b30     8C 4E 85 F1 | 	sub	fp, #140
16b34     A7 1E 62 FC | 	wrlong	local01, fp
16b38     14 4E 85 F1 | 	sub	fp, #20
16b3c     A7 04 68 FC | 	wrlong	#2, fp
16b40     1C 4E 05 F1 | 	add	fp, #28
16b44     A7 02 68 FC | 	wrlong	#1, fp
16b48     84 4E 05 F1 | 	add	fp, #132
16b4c     A7 20 0A FB | 	rdlong	local02, fp wz
16b50     58 1E 06 56 |  if_ne	mov	local01, #88
16b54     78 1E 06 A6 |  if_e	mov	local01, #120
16b58     7C 4E 85 F1 | 	sub	fp, #124
16b5c     A7 1E 62 FC | 	wrlong	local01, fp
16b60     40 4E 85 F1 | 	sub	fp, #64
16b64                 | LR__2153
16b64     10 4E 05 F1 | 	add	fp, #16
16b68     A7 1E 02 FB | 	rdlong	local01, fp
16b6c     10 4E 85 F1 | 	sub	fp, #16
16b70     23 1E 0E F2 | 	cmp	local01, #35 wz
16b74     3C 00 90 5D |  if_ne	jmp	#LR__2156
16b78     48 4E 05 F1 | 	add	fp, #72
16b7c     A7 02 68 FC | 	wrlong	#1, fp
16b80     C8 4E 05 F1 | 	add	fp, #200
16b84     A7 1E 0A FB | 	rdlong	local01, fp wz
16b88     10 4F 85 F1 | 	sub	fp, #272
16b8c     18 00 90 AD |  if_e	jmp	#LR__2154
16b90     10 4E 05 F1 | 	add	fp, #16
16b94     A7 CC 68 FC | 	wrlong	#102, fp
16b98     00 4F 05 F1 | 	add	fp, #256
16b9c     A7 00 68 FC | 	wrlong	#0, fp
16ba0     10 4F 85 F1 | 	sub	fp, #272
16ba4     0C 00 90 FD | 	jmp	#LR__2155
16ba8                 | LR__2154
16ba8     10 4F 05 F1 | 	add	fp, #272
16bac     A7 02 68 FC | 	wrlong	#1, fp
16bb0     10 4F 85 F1 | 	sub	fp, #272
16bb4                 | LR__2155
16bb4                 | LR__2156
16bb4     08 4E 05 F1 | 	add	fp, #8
16bb8     A7 1E 02 FB | 	rdlong	local01, fp
16bbc     1A 1E 46 F0 | 	shr	local01, #26
16bc0     03 1E 06 F5 | 	and	local01, #3
16bc4     5C 4E 05 F1 | 	add	fp, #92
16bc8     A7 1E 62 FC | 	wrlong	local01, fp
16bcc     58 4E 85 F1 | 	sub	fp, #88
16bd0     A7 FA 01 FB | 	rdlong	result1, fp
16bd4     0C 4E 85 F1 | 	sub	fp, #12
16bd8     1F FA 4D F0 | 	shr	result1, #31 wz
16bdc     20 00 90 AD |  if_e	jmp	#LR__2157
16be0     2C 4E 05 F1 | 	add	fp, #44
16be4     A7 5A 68 FC | 	wrlong	#45, fp
16be8     20 4E 85 F1 | 	sub	fp, #32
16bec     A7 FA 01 FB | 	rdlong	result1, fp
16bf0     1F FA E5 F4 | 	bitnot	result1, #31
16bf4     A7 FA 61 FC | 	wrlong	result1, fp
16bf8     0C 4E 85 F1 | 	sub	fp, #12
16bfc     3C 00 90 FD | 	jmp	#LR__2159
16c00                 | LR__2157
16c00     64 4E 05 F1 | 	add	fp, #100
16c04     A7 1E 02 FB | 	rdlong	local01, fp
16c08     64 4E 85 F1 | 	sub	fp, #100
16c0c     01 1E 0E F2 | 	cmp	local01, #1 wz
16c10     2C 4E 05 A1 |  if_e	add	fp, #44
16c14     A7 56 68 AC |  if_e	wrlong	#43, fp
16c18     2C 4E 85 A1 |  if_e	sub	fp, #44
16c1c     1C 00 90 AD |  if_e	jmp	#LR__2158
16c20     64 4E 05 F1 | 	add	fp, #100
16c24     A7 1E 02 FB | 	rdlong	local01, fp
16c28     64 4E 85 F1 | 	sub	fp, #100
16c2c     02 1E 0E F2 | 	cmp	local01, #2 wz
16c30     2C 4E 05 A1 |  if_e	add	fp, #44
16c34     A7 40 68 AC |  if_e	wrlong	#32, fp
16c38     2C 4E 85 A1 |  if_e	sub	fp, #44
16c3c                 | LR__2158
16c3c                 | LR__2159
16c3c     08 4E 05 F1 | 	add	fp, #8
16c40     A7 1E 02 FB | 	rdlong	local01, fp
16c44     18 1E 46 F0 | 	shr	local01, #24
16c48     03 1E 06 F5 | 	and	local01, #3
16c4c     3C 4E 05 F1 | 	add	fp, #60
16c50     A7 1E 62 FC | 	wrlong	local01, fp
16c54     00 1E 06 F6 | 	mov	local01, #0
16c58     18 4E 85 F1 | 	sub	fp, #24
16c5c     A7 22 0A FB | 	rdlong	local03, fp wz
16c60     2C 4E 85 F1 | 	sub	fp, #44
16c64     18 00 90 5D |  if_ne	jmp	#LR__2160
16c68     1C 4E 05 F1 | 	add	fp, #28
16c6c     A7 24 02 FB | 	rdlong	local04, fp
16c70     1C 4E 85 F1 | 	sub	fp, #28
16c74     12 27 02 F6 | 	mov	local05, local04
16c78     0A 26 0E F2 | 	cmp	local05, #10 wz
16c7c     04 00 90 AD |  if_e	jmp	#LR__2161
16c80                 | LR__2160
16c80     01 1E 66 F5 | 	xor	local01, #1
16c84                 | LR__2161
16c84     3C 4E 05 F1 | 	add	fp, #60
16c88     A7 1E 62 FC | 	wrlong	local01, fp
16c8c     3C 4E 85 F1 | 	sub	fp, #60
16c90     00 1E 0E F2 | 	cmp	local01, #0 wz
16c94     0C 01 90 AD |  if_e	jmp	#LR__2163
16c98     44 4E 05 F1 | 	add	fp, #68
16c9c     A7 26 02 FB | 	rdlong	local05, fp
16ca0     44 4E 85 F1 | 	sub	fp, #68
16ca4     13 23 02 F6 | 	mov	local03, local05
16ca8     02 22 0E F2 | 	cmp	local03, #2 wz
16cac     F4 00 90 5D |  if_ne	jmp	#LR__2163
16cb0     0C 4F 05 F1 | 	add	fp, #268
16cb4     A7 28 02 FB | 	rdlong	local06, fp
16cb8     0C 4F 85 F1 | 	sub	fp, #268
16cbc     14 25 02 F6 | 	mov	local04, local06
16cc0     02 24 0E F2 | 	cmp	local04, #2 wz
16cc4     DC 00 90 AD |  if_e	jmp	#LR__2163
16cc8     C0 4E 05 F1 | 	add	fp, #192
16ccc     A7 12 02 FB | 	rdlong	arg01, fp
16cd0     94 4E 85 F1 | 	sub	fp, #148
16cd4     A7 14 02 FB | 	rdlong	arg02, fp
16cd8     14 4E 05 F1 | 	add	fp, #20
16cdc     A7 16 02 FB | 	rdlong	arg03, fp
16ce0     40 4E 85 F1 | 	sub	fp, #64
16ce4     80 40 B0 FD | 	call	#__system__emitsign_0330
16ce8     14 4F 05 F1 | 	add	fp, #276
16cec     A7 FA 61 FC | 	wrlong	result1, fp
16cf0     14 4F 85 F1 | 	sub	fp, #276
16cf4     00 FA 55 F2 | 	cmps	result1, #0 wc
16cf8     14 4F 05 C1 |  if_b	add	fp, #276
16cfc     A7 FA 01 CB |  if_b	rdlong	result1, fp
16d00     14 4F 85 C1 |  if_b	sub	fp, #276
16d04     6C 0B 90 CD |  if_b	jmp	#LR__2213
16d08     C0 4E 05 F1 | 	add	fp, #192
16d0c     A7 1E 02 FB | 	rdlong	local01, fp
16d10     54 4E 05 F1 | 	add	fp, #84
16d14     A7 26 02 FB | 	rdlong	local05, fp
16d18     13 23 02 F6 | 	mov	local03, local05
16d1c     13 1F 02 F1 | 	add	local01, local05
16d20     54 4E 85 F1 | 	sub	fp, #84
16d24     A7 1E 62 FC | 	wrlong	local01, fp
16d28     58 4E 85 F1 | 	sub	fp, #88
16d2c     A7 1E 0A FB | 	rdlong	local01, fp wz
16d30     68 4E 85 F1 | 	sub	fp, #104
16d34     60 00 90 AD |  if_e	jmp	#LR__2162
16d38     68 4E 05 F1 | 	add	fp, #104
16d3c     A7 1E 02 FB | 	rdlong	local01, fp
16d40     AC 4E 05 F1 | 	add	fp, #172
16d44     A7 22 02 FB | 	rdlong	local03, fp
16d48     11 1F 82 F1 | 	sub	local01, local03
16d4c     AC 4E 85 F1 | 	sub	fp, #172
16d50     A7 1E 62 FC | 	wrlong	local01, fp
16d54     68 4E 85 F1 | 	sub	fp, #104
16d58     00 1E 56 F2 | 	cmps	local01, #0 wc
16d5c     68 4E 05 C1 |  if_b	add	fp, #104
16d60     A7 00 68 CC |  if_b	wrlong	#0, fp
16d64     68 4E 85 C1 |  if_b	sub	fp, #104
16d68     08 4E 05 F1 | 	add	fp, #8
16d6c     A7 1E 02 FB | 	rdlong	local01, fp
16d70     E8 1E 06 F4 | 	bitl	local01, #232
16d74     A7 1E 62 FC | 	wrlong	local01, fp
16d78     60 4E 05 F1 | 	add	fp, #96
16d7c     A7 26 02 FB | 	rdlong	local05, fp
16d80     13 23 02 F6 | 	mov	local03, local05
16d84     08 22 66 F0 | 	shl	local03, #8
16d88     11 1F 42 F5 | 	or	local01, local03
16d8c     60 4E 85 F1 | 	sub	fp, #96
16d90     A7 1E 62 FC | 	wrlong	local01, fp
16d94     08 4E 85 F1 | 	sub	fp, #8
16d98                 | LR__2162
16d98     3C 4E 05 F1 | 	add	fp, #60
16d9c     A7 00 68 FC | 	wrlong	#0, fp
16da0     3C 4E 85 F1 | 	sub	fp, #60
16da4                 | LR__2163
16da4     0C 4E 05 F1 | 	add	fp, #12
16da8     A7 12 02 FB | 	rdlong	arg01, fp
16dac     0C 4E 85 F1 | 	sub	fp, #12
16db0     D0 1D B0 FD | 	call	#__system____builtin_ilogb
16db4     FF FF 3F FF 
16db8     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
16dbc     50 00 90 5D |  if_ne	jmp	#LR__2165
16dc0     2C 4E 05 F1 | 	add	fp, #44
16dc4     A7 1E 0A FB | 	rdlong	local01, fp wz
16dc8     2C 4E 85 F1 | 	sub	fp, #44
16dcc     24 00 90 AD |  if_e	jmp	#LR__2164
16dd0     C0 4E 05 F1 | 	add	fp, #192
16dd4     A7 20 02 FB | 	rdlong	local02, fp
16dd8     10 23 02 F6 | 	mov	local03, local02
16ddc     01 22 06 F1 | 	add	local03, #1
16de0     A7 22 62 FC | 	wrlong	local03, fp
16de4     94 4E 85 F1 | 	sub	fp, #148
16de8     A7 24 02 FB | 	rdlong	local04, fp
16dec     2C 4E 85 F1 | 	sub	fp, #44
16df0     10 25 42 FC | 	wrbyte	local04, local02
16df4                 | LR__2164
16df4     C0 4E 05 F1 | 	add	fp, #192
16df8     A7 12 02 FB | 	rdlong	arg01, fp
16dfc     C0 4E 85 F1 | 	sub	fp, #192
16e00     25 01 00 FF 
16e04     3A 14 06 F6 | 	mov	arg02, ##@LR__4071
16e08     18 EA BF FD | 	call	#__system____builtin_strcpy
16e0c     A4 08 90 FD | 	jmp	#LR__2201
16e10                 | LR__2165
16e10     0C 4E 05 F1 | 	add	fp, #12
16e14     A7 20 02 FB | 	rdlong	local02, fp
16e18     0C 4E 85 F1 | 	sub	fp, #12
16e1c     10 13 02 F6 | 	mov	arg01, local02
16e20     60 1D B0 FD | 	call	#__system____builtin_ilogb
16e24     00 00 40 FF 
16e28     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
16e2c     50 00 90 5D |  if_ne	jmp	#LR__2167
16e30     2C 4E 05 F1 | 	add	fp, #44
16e34     A7 1E 0A FB | 	rdlong	local01, fp wz
16e38     2C 4E 85 F1 | 	sub	fp, #44
16e3c     24 00 90 AD |  if_e	jmp	#LR__2166
16e40     C0 4E 05 F1 | 	add	fp, #192
16e44     A7 20 02 FB | 	rdlong	local02, fp
16e48     10 23 02 F6 | 	mov	local03, local02
16e4c     01 22 06 F1 | 	add	local03, #1
16e50     A7 22 62 FC | 	wrlong	local03, fp
16e54     94 4E 85 F1 | 	sub	fp, #148
16e58     A7 24 02 FB | 	rdlong	local04, fp
16e5c     2C 4E 85 F1 | 	sub	fp, #44
16e60     10 25 42 FC | 	wrbyte	local04, local02
16e64                 | LR__2166
16e64     C0 4E 05 F1 | 	add	fp, #192
16e68     A7 12 02 FB | 	rdlong	arg01, fp
16e6c     C0 4E 85 F1 | 	sub	fp, #192
16e70     25 01 00 FF 
16e74     3E 14 06 F6 | 	mov	arg02, ##@LR__4072
16e78     A8 E9 BF FD | 	call	#__system____builtin_strcpy
16e7c     34 08 90 FD | 	jmp	#LR__2201
16e80                 | LR__2167
16e80     10 4E 05 F1 | 	add	fp, #16
16e84     A7 1E 02 FB | 	rdlong	local01, fp
16e88     10 4E 85 F1 | 	sub	fp, #16
16e8c     67 1E 0E F2 | 	cmp	local01, #103 wz
16e90     10 4E 05 51 |  if_ne	add	fp, #16
16e94     A7 22 02 5B |  if_ne	rdlong	local03, fp
16e98     10 4E 85 51 |  if_ne	sub	fp, #16
16e9c     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
16ea0     94 01 90 5D |  if_ne	jmp	#LR__2172
16ea4     0C 4E 05 F1 | 	add	fp, #12
16ea8     A7 12 02 FB | 	rdlong	arg01, fp
16eac     08 4E 05 F1 | 	add	fp, #8
16eb0     A7 14 02 F6 | 	mov	arg02, fp
16eb4     0C 4E 05 F1 | 	add	fp, #12
16eb8     A7 16 02 F6 | 	mov	arg03, fp
16ebc     98 4E 05 F1 | 	add	fp, #152
16ec0     A7 18 02 FB | 	rdlong	arg04, fp
16ec4     9C 4E 85 F1 | 	sub	fp, #156
16ec8     A7 1A 02 FB | 	rdlong	arg05, fp
16ecc     1C 4E 85 F1 | 	sub	fp, #28
16ed0     A0 3C B0 FD | 	call	#__system__disassemble_0328
16ed4     10 4E 05 F1 | 	add	fp, #16
16ed8     A7 1E 02 FB | 	rdlong	local01, fp
16edc     10 4E 85 F1 | 	sub	fp, #16
16ee0     23 1E 0E F2 | 	cmp	local01, #35 wz
16ee4     A0 00 90 5D |  if_ne	jmp	#LR__2169
16ee8     20 4E 05 F1 | 	add	fp, #32
16eec     A7 1E 02 FB | 	rdlong	local01, fp
16ef0     98 4E 05 F1 | 	add	fp, #152
16ef4     A7 22 02 FB | 	rdlong	local03, fp
16ef8     B8 4E 85 F1 | 	sub	fp, #184
16efc     11 1F 5A F2 | 	cmps	local01, local03 wcz
16f00     24 4E 05 11 |  if_a	add	fp, #36
16f04     A7 02 68 1C |  if_a	wrlong	#1, fp
16f08     24 4E 85 11 |  if_a	sub	fp, #36
16f0c     A4 01 90 1D |  if_a	jmp	#LR__2175
16f10     20 4E 05 F1 | 	add	fp, #32
16f14     A7 1E 02 FB | 	rdlong	local01, fp
16f18     20 4E 85 F1 | 	sub	fp, #32
16f1c     00 1E 56 F2 | 	cmps	local01, #0 wc
16f20     2C 00 90 3D |  if_ae	jmp	#LR__2168
16f24     B8 4E 05 F1 | 	add	fp, #184
16f28     A7 1E 02 FB | 	rdlong	local01, fp
16f2c     0F 1F 62 F6 | 	neg	local01, local01
16f30     98 4E 85 F1 | 	sub	fp, #152
16f34     A7 22 02 FB | 	rdlong	local03, fp
16f38     20 4E 85 F1 | 	sub	fp, #32
16f3c     0F 23 5A F2 | 	cmps	local03, local01 wcz
16f40     24 4E 05 E1 |  if_be	add	fp, #36
16f44     A7 02 68 EC |  if_be	wrlong	#1, fp
16f48     24 4E 85 E1 |  if_be	sub	fp, #36
16f4c     64 01 90 FD | 	jmp	#LR__2175
16f50                 | LR__2168
16f50     20 4E 05 F1 | 	add	fp, #32
16f54     A7 1E 02 FB | 	rdlong	local01, fp
16f58     20 4E 85 F1 | 	sub	fp, #32
16f5c     01 1E 56 F2 | 	cmps	local01, #1 wc
16f60     50 01 90 CD |  if_b	jmp	#LR__2175
16f64     B8 4E 05 F1 | 	add	fp, #184
16f68     A7 1E 02 FB | 	rdlong	local01, fp
16f6c     98 4E 85 F1 | 	sub	fp, #152
16f70     A7 22 02 FB | 	rdlong	local03, fp
16f74     11 1F 82 F1 | 	sub	local01, local03
16f78     98 4E 05 F1 | 	add	fp, #152
16f7c     A7 1E 62 FC | 	wrlong	local01, fp
16f80     B8 4E 85 F1 | 	sub	fp, #184
16f84     2C 01 90 FD | 	jmp	#LR__2175
16f88                 | LR__2169
16f88     00 1E 06 F6 | 	mov	local01, #0
16f8c     08 4E 05 F1 | 	add	fp, #8
16f90     A7 20 02 FB | 	rdlong	local02, fp
16f94     1C 20 46 F0 | 	shr	local02, #28
16f98     01 20 0E F5 | 	and	local02, #1 wz
16f9c     01 1E 06 A6 |  if_e	mov	local01, #1
16fa0     2C 4E 05 F1 | 	add	fp, #44
16fa4     A7 1E 62 FC | 	wrlong	local01, fp
16fa8     14 4E 85 F1 | 	sub	fp, #20
16fac     A7 1E 02 FB | 	rdlong	local01, fp
16fb0     98 4E 05 F1 | 	add	fp, #152
16fb4     A7 22 02 FB | 	rdlong	local03, fp
16fb8     B8 4E 85 F1 | 	sub	fp, #184
16fbc     11 1F 52 F2 | 	cmps	local01, local03 wc
16fc0     18 00 90 3D |  if_ae	jmp	#LR__2170
16fc4     20 4E 05 F1 | 	add	fp, #32
16fc8     A7 24 02 FB | 	rdlong	local04, fp
16fcc     20 4E 85 F1 | 	sub	fp, #32
16fd0     FF FF 7F FF 
16fd4     FC 25 56 F2 | 	cmps	local04, ##-4 wc
16fd8     10 00 90 3D |  if_ae	jmp	#LR__2171
16fdc                 | LR__2170
16fdc     24 4E 05 F1 | 	add	fp, #36
16fe0     A7 02 68 FC | 	wrlong	#1, fp
16fe4     24 4E 85 F1 | 	sub	fp, #36
16fe8     C8 00 90 FD | 	jmp	#LR__2175
16fec                 | LR__2171
16fec     B8 4E 05 F1 | 	add	fp, #184
16ff0     A7 24 02 FB | 	rdlong	local04, fp
16ff4     98 4E 85 F1 | 	sub	fp, #152
16ff8     A7 22 02 FB | 	rdlong	local03, fp
16ffc     11 25 82 F1 | 	sub	local04, local03
17000     98 4E 05 F1 | 	add	fp, #152
17004     A7 24 62 FC | 	wrlong	local04, fp
17008     AC 4E 85 F1 | 	sub	fp, #172
1700c     A7 12 02 FB | 	rdlong	arg01, fp
17010     08 4E 05 F1 | 	add	fp, #8
17014     A7 14 02 F6 | 	mov	arg02, fp
17018     0C 4E 05 F1 | 	add	fp, #12
1701c     A7 16 02 F6 | 	mov	arg03, fp
17020     12 19 62 F6 | 	neg	arg04, local04
17024     04 4E 85 F1 | 	sub	fp, #4
17028     A7 1A 02 FB | 	rdlong	arg05, fp
1702c     1C 4E 85 F1 | 	sub	fp, #28
17030     40 3B B0 FD | 	call	#__system__disassemble_0328
17034     7C 00 90 FD | 	jmp	#LR__2175
17038                 | LR__2172
17038     24 4E 05 F1 | 	add	fp, #36
1703c     A7 1E 0A FB | 	rdlong	local01, fp wz
17040     24 4E 85 F1 | 	sub	fp, #36
17044     34 00 90 AD |  if_e	jmp	#LR__2173
17048     0C 4E 05 F1 | 	add	fp, #12
1704c     A7 12 02 FB | 	rdlong	arg01, fp
17050     08 4E 05 F1 | 	add	fp, #8
17054     A7 14 02 F6 | 	mov	arg02, fp
17058     0C 4E 05 F1 | 	add	fp, #12
1705c     A7 16 02 F6 | 	mov	arg03, fp
17060     98 4E 05 F1 | 	add	fp, #152
17064     A7 18 02 FB | 	rdlong	arg04, fp
17068     9C 4E 85 F1 | 	sub	fp, #156
1706c     A7 1A 02 FB | 	rdlong	arg05, fp
17070     1C 4E 85 F1 | 	sub	fp, #28
17074     FC 3A B0 FD | 	call	#__system__disassemble_0328
17078     38 00 90 FD | 	jmp	#LR__2174
1707c                 | LR__2173
1707c     0C 4E 05 F1 | 	add	fp, #12
17080     A7 12 02 FB | 	rdlong	arg01, fp
17084     08 4E 05 F1 | 	add	fp, #8
17088     A7 14 02 F6 | 	mov	arg02, fp
1708c     0C 4E 05 F1 | 	add	fp, #12
17090     A7 16 02 F6 | 	mov	arg03, fp
17094     98 4E 05 F1 | 	add	fp, #152
17098     A7 24 02 FB | 	rdlong	local04, fp
1709c     01 24 06 F1 | 	add	local04, #1
170a0     12 19 62 F6 | 	neg	arg04, local04
170a4     9C 4E 85 F1 | 	sub	fp, #156
170a8     A7 1A 02 FB | 	rdlong	arg05, fp
170ac     1C 4E 85 F1 | 	sub	fp, #28
170b0     C0 3A B0 FD | 	call	#__system__disassemble_0328
170b4                 | LR__2174
170b4                 | LR__2175
170b4     1C 4E 05 F1 | 	add	fp, #28
170b8     A7 1E 02 FB | 	rdlong	local01, fp
170bc     1C 4E 85 F1 | 	sub	fp, #28
170c0     02 1E 0E F2 | 	cmp	local01, #2 wz
170c4     4C 00 90 5D |  if_ne	jmp	#LR__2178
170c8     1C 4E 05 F1 | 	add	fp, #28
170cc     A7 20 68 FC | 	wrlong	#16, fp
170d0     1C 4E 85 F1 | 	sub	fp, #28
170d4                 | LR__2176
170d4     14 4E 05 F1 | 	add	fp, #20
170d8     A7 1E 0A FB | 	rdlong	local01, fp wz
170dc     14 4E 85 F1 | 	sub	fp, #20
170e0     30 00 90 AD |  if_e	jmp	#LR__2177
170e4     14 4E 05 F1 | 	add	fp, #20
170e8     A7 22 02 FB | 	rdlong	local03, fp
170ec     14 4E 85 F1 | 	sub	fp, #20
170f0     00 80 00 FF 
170f4     00 22 16 F2 | 	cmp	local03, ##16777216 wc
170f8     18 00 90 3D |  if_ae	jmp	#LR__2177
170fc     14 4E 05 F1 | 	add	fp, #20
17100     A7 1E 02 FB | 	rdlong	local01, fp
17104     01 1E 66 F0 | 	shl	local01, #1
17108     A7 1E 62 FC | 	wrlong	local01, fp
1710c     14 4E 85 F1 | 	sub	fp, #20
17110     C0 FF 9F FD | 	jmp	#LR__2176
17114                 | LR__2177
17114                 | LR__2178
17114     70 4E 05 F1 | 	add	fp, #112
17118     A7 12 02 F6 | 	mov	arg01, fp
1711c     5C 4E 85 F1 | 	sub	fp, #92
17120     A7 14 02 FB | 	rdlong	arg02, fp
17124     08 4E 05 F1 | 	add	fp, #8
17128     A7 16 02 FB | 	rdlong	arg03, fp
1712c     A0 4E 05 F1 | 	add	fp, #160
17130     A7 1A 02 FB | 	rdlong	arg05, fp
17134     BC 4E 85 F1 | 	sub	fp, #188
17138     01 18 06 F6 | 	mov	arg04, #1
1713c     C0 39 B0 FD | 	call	#__system___uitoa
17140     58 4E 05 F1 | 	add	fp, #88
17144     A7 FA 61 FC | 	wrlong	result1, fp
17148     38 4E 85 F1 | 	sub	fp, #56
1714c     A7 1E 02 FB | 	rdlong	local01, fp
17150     20 4E 85 F1 | 	sub	fp, #32
17154     00 1E 56 F2 | 	cmps	local01, #0 wc
17158     50 00 90 3D |  if_ae	jmp	#LR__2179
1715c     60 4E 05 F1 | 	add	fp, #96
17160     A7 5A 68 FC | 	wrlong	#45, fp
17164     50 4E 05 F1 | 	add	fp, #80
17168     A7 12 02 F6 | 	mov	arg01, fp
1716c     90 4E 85 F1 | 	sub	fp, #144
17170     A7 22 02 FB | 	rdlong	local03, fp
17174     11 15 62 F6 | 	neg	arg02, local03
17178     18 4E 05 F1 | 	add	fp, #24
1717c     A7 18 02 FB | 	rdlong	arg04, fp
17180     84 4E 05 F1 | 	add	fp, #132
17184     A7 28 02 FB | 	rdlong	local06, fp
17188     BC 4E 85 F1 | 	sub	fp, #188
1718c     14 25 02 F6 | 	mov	local04, local06
17190     0A 16 06 F6 | 	mov	arg03, #10
17194     12 1B 02 F6 | 	mov	arg05, local04
17198     64 39 B0 FD | 	call	#__system___uitoa
1719c     5C 4E 05 F1 | 	add	fp, #92
171a0     A7 FA 61 FC | 	wrlong	result1, fp
171a4     5C 4E 85 F1 | 	sub	fp, #92
171a8     48 00 90 FD | 	jmp	#LR__2180
171ac                 | LR__2179
171ac     60 4E 05 F1 | 	add	fp, #96
171b0     A7 56 68 FC | 	wrlong	#43, fp
171b4     50 4E 05 F1 | 	add	fp, #80
171b8     A7 12 02 F6 | 	mov	arg01, fp
171bc     90 4E 85 F1 | 	sub	fp, #144
171c0     A7 14 02 FB | 	rdlong	arg02, fp
171c4     18 4E 05 F1 | 	add	fp, #24
171c8     A7 18 02 FB | 	rdlong	arg04, fp
171cc     84 4E 05 F1 | 	add	fp, #132
171d0     A7 28 02 FB | 	rdlong	local06, fp
171d4     BC 4E 85 F1 | 	sub	fp, #188
171d8     14 25 02 F6 | 	mov	local04, local06
171dc     0A 16 06 F6 | 	mov	arg03, #10
171e0     12 1B 02 F6 | 	mov	arg05, local04
171e4     18 39 B0 FD | 	call	#__system___uitoa
171e8     5C 4E 05 F1 | 	add	fp, #92
171ec     A7 FA 61 FC | 	wrlong	result1, fp
171f0     5C 4E 85 F1 | 	sub	fp, #92
171f4                 | LR__2180
171f4     24 4E 05 F1 | 	add	fp, #36
171f8     A7 1E 0A FB | 	rdlong	local01, fp wz
171fc     24 4E 85 F1 | 	sub	fp, #36
17200     2C 00 90 AD |  if_e	jmp	#LR__2181
17204     50 4E 05 F1 | 	add	fp, #80
17208     A7 00 68 FC | 	wrlong	#0, fp
1720c     04 4E 85 F1 | 	sub	fp, #4
17210     A7 00 68 FC | 	wrlong	#0, fp
17214     6C 4E 05 F1 | 	add	fp, #108
17218     A7 1E 02 FB | 	rdlong	local01, fp
1721c     01 1E 06 F1 | 	add	local01, #1
17220     64 4E 85 F1 | 	sub	fp, #100
17224     A7 1E 62 FC | 	wrlong	local01, fp
17228     54 4E 85 F1 | 	sub	fp, #84
1722c     88 00 90 FD | 	jmp	#LR__2184
17230                 | LR__2181
17230     20 4E 05 F1 | 	add	fp, #32
17234     A7 1E 02 FB | 	rdlong	local01, fp
17238     20 4E 85 F1 | 	sub	fp, #32
1723c     00 1E 56 F2 | 	cmps	local01, #0 wc
17240     40 00 90 3D |  if_ae	jmp	#LR__2182
17244     20 4E 05 F1 | 	add	fp, #32
17248     A7 20 02 FB | 	rdlong	local02, fp
1724c     30 4E 05 F1 | 	add	fp, #48
17250     A7 20 62 FC | 	wrlong	local02, fp
17254     04 4E 85 F1 | 	sub	fp, #4
17258     A7 20 62 FC | 	wrlong	local02, fp
1725c     2C 4E 85 F1 | 	sub	fp, #44
17260     A7 1E 02 FB | 	rdlong	local01, fp
17264     98 4E 05 F1 | 	add	fp, #152
17268     A7 22 02 FB | 	rdlong	local03, fp
1726c     11 1F 02 F1 | 	add	local01, local03
17270     01 1E 06 F1 | 	add	local01, #1
17274     64 4E 85 F1 | 	sub	fp, #100
17278     A7 1E 62 FC | 	wrlong	local01, fp
1727c     54 4E 85 F1 | 	sub	fp, #84
17280     34 00 90 FD | 	jmp	#LR__2183
17284                 | LR__2182
17284     4C 4E 05 F1 | 	add	fp, #76
17288     A7 00 68 FC | 	wrlong	#0, fp
1728c     2C 4E 85 F1 | 	sub	fp, #44
17290     A7 1E 02 FB | 	rdlong	local01, fp
17294     30 4E 05 F1 | 	add	fp, #48
17298     A7 1E 62 FC | 	wrlong	local01, fp
1729c     68 4E 05 F1 | 	add	fp, #104
172a0     A7 22 02 FB | 	rdlong	local03, fp
172a4     11 1F 02 F1 | 	add	local01, local03
172a8     01 1E 06 F1 | 	add	local01, #1
172ac     64 4E 85 F1 | 	sub	fp, #100
172b0     A7 1E 62 FC | 	wrlong	local01, fp
172b4     54 4E 85 F1 | 	sub	fp, #84
172b8                 | LR__2183
172b8                 | LR__2184
172b8     54 4E 05 F1 | 	add	fp, #84
172bc     A7 1E 02 FB | 	rdlong	local01, fp
172c0     08 4E 85 F1 | 	sub	fp, #8
172c4     A7 22 02 FB | 	rdlong	local03, fp
172c8     11 1F 82 F1 | 	sub	local01, local03
172cc     01 1E 06 F1 | 	add	local01, #1
172d0     24 4E 85 F1 | 	sub	fp, #36
172d4     A7 1E 62 FC | 	wrlong	local01, fp
172d8     04 4E 05 F1 | 	add	fp, #4
172dc     A7 1E 0A FB | 	rdlong	local01, fp wz
172e0     2C 4E 85 F1 | 	sub	fp, #44
172e4     28 4E 05 51 |  if_ne	add	fp, #40
172e8     A7 22 02 5B |  if_ne	rdlong	local03, fp
172ec     01 22 06 51 |  if_ne	add	local03, #1
172f0     A7 22 62 5C |  if_ne	wrlong	local03, fp
172f4     28 4E 85 51 |  if_ne	sub	fp, #40
172f8     1C 4E 05 F1 | 	add	fp, #28
172fc     A7 1E 02 FB | 	rdlong	local01, fp
17300     1C 4E 85 F1 | 	sub	fp, #28
17304     10 1E 0E F2 | 	cmp	local01, #16 wz
17308     28 4E 05 A1 |  if_e	add	fp, #40
1730c     A7 1E 02 AB |  if_e	rdlong	local01, fp
17310     02 1E 06 A1 |  if_e	add	local01, #2
17314     A7 1E 62 AC |  if_e	wrlong	local01, fp
17318     28 4E 85 A1 |  if_e	sub	fp, #40
1731c     24 4E 05 F1 | 	add	fp, #36
17320     A7 1E 0A FB | 	rdlong	local01, fp wz
17324     24 4E 85 F1 | 	sub	fp, #36
17328     28 00 90 AD |  if_e	jmp	#LR__2185
1732c     28 4E 05 F1 | 	add	fp, #40
17330     A7 1E 02 FB | 	rdlong	local01, fp
17334     02 22 06 F6 | 	mov	local03, #2
17338     34 4E 05 F1 | 	add	fp, #52
1733c     A7 26 02 FB | 	rdlong	local05, fp
17340     13 23 02 F1 | 	add	local03, local05
17344     11 1F 02 F1 | 	add	local01, local03
17348     34 4E 85 F1 | 	sub	fp, #52
1734c     A7 1E 62 FC | 	wrlong	local01, fp
17350     28 4E 85 F1 | 	sub	fp, #40
17354                 | LR__2185
17354     28 4E 05 F1 | 	add	fp, #40
17358     A7 1E 02 FB | 	rdlong	local01, fp
1735c     28 4E 85 F1 | 	sub	fp, #40
17360     41 1E 56 F2 | 	cmps	local01, #65 wc
17364     01 FA 65 36 |  if_ae	neg	result1, #1
17368     08 05 90 3D |  if_ae	jmp	#LR__2213
1736c     3C 4E 05 F1 | 	add	fp, #60
17370     A7 1E 0A FB | 	rdlong	local01, fp wz
17374     3C 4E 85 F1 | 	sub	fp, #60
17378     60 00 90 AD |  if_e	jmp	#LR__2186
1737c     C0 4E 05 F1 | 	add	fp, #192
17380     A7 12 02 FB | 	rdlong	arg01, fp
17384     94 4E 85 F1 | 	sub	fp, #148
17388     A7 14 02 FB | 	rdlong	arg02, fp
1738c     14 4E 05 F1 | 	add	fp, #20
17390     A7 16 02 FB | 	rdlong	arg03, fp
17394     40 4E 85 F1 | 	sub	fp, #64
17398     CC 39 B0 FD | 	call	#__system__emitsign_0330
1739c     18 4F 05 F1 | 	add	fp, #280
173a0     A7 FA 61 FC | 	wrlong	result1, fp
173a4     18 4F 85 F1 | 	sub	fp, #280
173a8     00 FA 55 F2 | 	cmps	result1, #0 wc
173ac     18 4F 05 C1 |  if_b	add	fp, #280
173b0     A7 FA 01 CB |  if_b	rdlong	result1, fp
173b4     18 4F 85 C1 |  if_b	sub	fp, #280
173b8     B8 04 90 CD |  if_b	jmp	#LR__2213
173bc     C0 4E 05 F1 | 	add	fp, #192
173c0     A7 1E 02 FB | 	rdlong	local01, fp
173c4     58 4E 05 F1 | 	add	fp, #88
173c8     A7 22 02 FB | 	rdlong	local03, fp
173cc     11 1F 02 F1 | 	add	local01, local03
173d0     58 4E 85 F1 | 	sub	fp, #88
173d4     A7 1E 62 FC | 	wrlong	local01, fp
173d8     C0 4E 85 F1 | 	sub	fp, #192
173dc                 | LR__2186
173dc     4C 4E 05 F1 | 	add	fp, #76
173e0     A7 1E 02 FB | 	rdlong	local01, fp
173e4     34 4E 85 F1 | 	sub	fp, #52
173e8     A7 1E 62 FC | 	wrlong	local01, fp
173ec     18 4E 85 F1 | 	sub	fp, #24
173f0     97 9E 48 FB | 	callpa	#(@LR__2192-@LR__2187)>>2,fcache_load_ptr_
173f4                 | LR__2187
173f4     18 4E 05 F1 | 	add	fp, #24
173f8     A7 20 02 FB | 	rdlong	local02, fp
173fc     3C 4E 05 F1 | 	add	fp, #60
17400     A7 26 02 FB | 	rdlong	local05, fp
17404     54 4E 85 F1 | 	sub	fp, #84
17408     13 21 52 F2 | 	cmps	local02, local05 wc
1740c     20 01 90 3D |  if_ae	jmp	#LR__2193
17410     18 4E 05 F1 | 	add	fp, #24
17414     A7 28 02 FB | 	rdlong	local06, fp
17418     18 4E 85 F1 | 	sub	fp, #24
1741c     00 28 56 F2 | 	cmps	local06, #0 wc
17420     58 00 90 CD |  if_b	jmp	#LR__2188
17424     18 4E 05 F1 | 	add	fp, #24
17428     A7 28 02 FB | 	rdlong	local06, fp
1742c     40 4E 05 F1 | 	add	fp, #64
17430     A7 2A 02 FB | 	rdlong	local07, fp
17434     58 4E 85 F1 | 	sub	fp, #88
17438     15 29 52 F2 | 	cmps	local06, local07 wc
1743c     3C 00 90 3D |  if_ae	jmp	#LR__2188
17440     C0 4E 05 F1 | 	add	fp, #192
17444     A7 2C 02 FB | 	rdlong	local08, fp
17448     16 2B 02 F6 | 	mov	local07, local08
1744c     01 2A 06 F1 | 	add	local07, #1
17450     A7 2A 62 FC | 	wrlong	local07, fp
17454     A8 4E 85 F1 | 	sub	fp, #168
17458     A7 2A 02 FB | 	rdlong	local07, fp
1745c     15 2F 02 F6 | 	mov	local09, local07
17460     58 4E 05 F1 | 	add	fp, #88
17464     A7 30 02 F6 | 	mov	local10, fp
17468     A7 2E 02 F1 | 	add	local09, fp
1746c     17 33 C2 FA | 	rdbyte	local11, local09
17470     16 33 42 FC | 	wrbyte	local11, local08
17474     70 4E 85 F1 | 	sub	fp, #112
17478     20 00 90 FD | 	jmp	#LR__2189
1747c                 | LR__2188
1747c     C0 4E 05 F1 | 	add	fp, #192
17480     A7 2C 02 FB | 	rdlong	local08, fp
17484     16 2F 02 F6 | 	mov	local09, local08
17488     01 2E 06 F1 | 	add	local09, #1
1748c     A7 2E 62 FC | 	wrlong	local09, fp
17490     C0 4E 85 F1 | 	sub	fp, #192
17494     30 2E 06 F6 | 	mov	local09, #48
17498     16 61 48 FC | 	wrbyte	#48, local08
1749c                 | LR__2189
1749c     18 4E 05 F1 | 	add	fp, #24
174a0     A7 28 02 FB | 	rdlong	local06, fp
174a4     38 4E 05 F1 | 	add	fp, #56
174a8     A7 34 02 FB | 	rdlong	local12, fp
174ac     50 4E 85 F1 | 	sub	fp, #80
174b0     1A 29 0A F2 | 	cmp	local06, local12 wz
174b4     5C 00 90 5D |  if_ne	jmp	#LR__2191
174b8     10 4F 05 F1 | 	add	fp, #272
174bc     A7 2A 02 FB | 	rdlong	local07, fp
174c0     10 4F 85 F1 | 	sub	fp, #272
174c4     15 2F 0A F6 | 	mov	local09, local07 wz
174c8     28 00 90 5D |  if_ne	jmp	#LR__2190
174cc     54 4E 05 F1 | 	add	fp, #84
174d0     A7 32 02 FB | 	rdlong	local11, fp
174d4     19 31 02 F6 | 	mov	local10, local11
174d8     01 30 86 F1 | 	sub	local10, #1
174dc     3C 4E 85 F1 | 	sub	fp, #60
174e0     A7 36 02 FB | 	rdlong	local13, fp
174e4     18 4E 85 F1 | 	sub	fp, #24
174e8     1B 39 02 F6 | 	mov	local14, local13
174ec     18 39 52 F2 | 	cmps	local14, local10 wc
174f0     20 00 90 3D |  if_ae	jmp	#LR__2191
174f4                 | LR__2190
174f4     C0 4E 05 F1 | 	add	fp, #192
174f8     A7 2C 02 FB | 	rdlong	local08, fp
174fc     16 35 02 F6 | 	mov	local12, local08
17500     01 34 06 F1 | 	add	local12, #1
17504     A7 34 62 FC | 	wrlong	local12, fp
17508     C0 4E 85 F1 | 	sub	fp, #192
1750c     2E 2E 06 F6 | 	mov	local09, #46
17510     16 5D 48 FC | 	wrbyte	#46, local08
17514                 | LR__2191
17514     18 4E 05 F1 | 	add	fp, #24
17518     A7 3A 02 FB | 	rdlong	local15, fp
1751c     1D 35 02 F6 | 	mov	local12, local15
17520     01 34 06 F1 | 	add	local12, #1
17524     A7 34 62 FC | 	wrlong	local12, fp
17528     18 4E 85 F1 | 	sub	fp, #24
1752c     C4 FE 9F FD | 	jmp	#LR__2187
17530                 | LR__2192
17530                 | LR__2193
17530     34 4E 05 F1 | 	add	fp, #52
17534     A7 1E 0A FB | 	rdlong	local01, fp wz
17538     34 4E 85 F1 | 	sub	fp, #52
1753c     A0 00 90 AD |  if_e	jmp	#LR__2197
17540     C0 4E 05 F1 | 	add	fp, #192
17544     A7 1E 02 FB | 	rdlong	local01, fp
17548     01 1E 86 F1 | 	sub	local01, #1
1754c     A7 1E 62 FC | 	wrlong	local01, fp
17550     C0 4E 85 F1 | 	sub	fp, #192
17554     97 26 48 FB | 	callpa	#(@LR__2195-@LR__2194)>>2,fcache_load_ptr_
17558                 | LR__2194
17558     C0 4E 05 F1 | 	add	fp, #192
1755c     A7 1E 02 FB | 	rdlong	local01, fp
17560     04 4E 05 F1 | 	add	fp, #4
17564     A7 22 02 FB | 	rdlong	local03, fp
17568     C4 4E 85 F1 | 	sub	fp, #196
1756c     11 1F 5A F2 | 	cmps	local01, local03 wcz
17570     30 00 90 ED |  if_be	jmp	#LR__2196
17574     C0 4E 05 F1 | 	add	fp, #192
17578     A7 28 02 FB | 	rdlong	local06, fp
1757c     C0 4E 85 F1 | 	sub	fp, #192
17580     14 25 C2 FA | 	rdbyte	local04, local06
17584     30 24 0E F2 | 	cmp	local04, #48 wz
17588     18 00 90 5D |  if_ne	jmp	#LR__2196
1758c     C0 4E 05 F1 | 	add	fp, #192
17590     A7 1E 02 FB | 	rdlong	local01, fp
17594     01 1E 86 F1 | 	sub	local01, #1
17598     A7 1E 62 FC | 	wrlong	local01, fp
1759c     C0 4E 85 F1 | 	sub	fp, #192
175a0     B4 FF 9F FD | 	jmp	#LR__2194
175a4                 | LR__2195
175a4                 | LR__2196
175a4     C0 4E 05 F1 | 	add	fp, #192
175a8     A7 20 02 FB | 	rdlong	local02, fp
175ac     C0 4E 85 F1 | 	sub	fp, #192
175b0     10 1F C2 FA | 	rdbyte	local01, local02
175b4     2E 1E 0E F2 | 	cmp	local01, #46 wz
175b8     C0 4E 05 A1 |  if_e	add	fp, #192
175bc     A7 1E 02 AB |  if_e	rdlong	local01, fp
175c0     01 1E 86 A1 |  if_e	sub	local01, #1
175c4     A7 1E 62 AC |  if_e	wrlong	local01, fp
175c8     C0 4E 85 A1 |  if_e	sub	fp, #192
175cc     C0 4E 05 F1 | 	add	fp, #192
175d0     A7 22 02 FB | 	rdlong	local03, fp
175d4     01 22 06 F1 | 	add	local03, #1
175d8     A7 22 62 FC | 	wrlong	local03, fp
175dc     C0 4E 85 F1 | 	sub	fp, #192
175e0                 | LR__2197
175e0     24 4E 05 F1 | 	add	fp, #36
175e4     A7 1E 0A FB | 	rdlong	local01, fp wz
175e8     24 4E 85 F1 | 	sub	fp, #36
175ec     B4 00 90 AD |  if_e	jmp	#LR__2200
175f0     C0 4E 05 F1 | 	add	fp, #192
175f4     A7 20 02 FB | 	rdlong	local02, fp
175f8     10 23 02 F6 | 	mov	local03, local02
175fc     01 22 06 F1 | 	add	local03, #1
17600     A7 22 62 FC | 	wrlong	local03, fp
17604     90 4E 85 F1 | 	sub	fp, #144
17608     A7 24 02 FB | 	rdlong	local04, fp
1760c     10 25 42 FC | 	wrbyte	local04, local02
17610     90 4E 05 F1 | 	add	fp, #144
17614     A7 20 02 FB | 	rdlong	local02, fp
17618     10 23 02 F6 | 	mov	local03, local02
1761c     01 22 06 F1 | 	add	local03, #1
17620     A7 22 62 FC | 	wrlong	local03, fp
17624     60 4E 85 F1 | 	sub	fp, #96
17628     A7 24 02 FB | 	rdlong	local04, fp
1762c     10 25 42 FC | 	wrbyte	local04, local02
17630     48 4E 85 F1 | 	sub	fp, #72
17634     A7 00 68 FC | 	wrlong	#0, fp
17638     18 4E 85 F1 | 	sub	fp, #24
1763c                 | LR__2198
1763c     18 4E 05 F1 | 	add	fp, #24
17640     A7 20 02 FB | 	rdlong	local02, fp
17644     44 4E 05 F1 | 	add	fp, #68
17648     A7 26 02 FB | 	rdlong	local05, fp
1764c     5C 4E 85 F1 | 	sub	fp, #92
17650     13 21 52 F2 | 	cmps	local02, local05 wc
17654     4C 00 90 3D |  if_ae	jmp	#LR__2199
17658     C0 4E 05 F1 | 	add	fp, #192
1765c     A7 2C 02 FB | 	rdlong	local08, fp
17660     16 35 02 F6 | 	mov	local12, local08
17664     01 34 06 F1 | 	add	local12, #1
17668     A7 34 62 FC | 	wrlong	local12, fp
1766c     A8 4E 85 F1 | 	sub	fp, #168
17670     A7 2A 02 FB | 	rdlong	local07, fp
17674     15 2F 02 F6 | 	mov	local09, local07
17678     98 4E 05 F1 | 	add	fp, #152
1767c     A7 30 02 F6 | 	mov	local10, fp
17680     A7 2E 02 F1 | 	add	local09, fp
17684     17 33 C2 FA | 	rdbyte	local11, local09
17688     16 33 42 FC | 	wrbyte	local11, local08
1768c     98 4E 85 F1 | 	sub	fp, #152
17690     A7 34 02 FB | 	rdlong	local12, fp
17694     01 34 06 F1 | 	add	local12, #1
17698     A7 34 62 FC | 	wrlong	local12, fp
1769c     18 4E 85 F1 | 	sub	fp, #24
176a0     98 FF 9F FD | 	jmp	#LR__2198
176a4                 | LR__2199
176a4                 | LR__2200
176a4     C0 4E 05 F1 | 	add	fp, #192
176a8     A7 1E 02 FB | 	rdlong	local01, fp
176ac     C0 4E 85 F1 | 	sub	fp, #192
176b0     0F 01 48 FC | 	wrbyte	#0, local01
176b4                 | LR__2201
176b4     6C 4E 05 F1 | 	add	fp, #108
176b8     A7 1E 0A FB | 	rdlong	local01, fp wz
176bc     6C 4E 85 F1 | 	sub	fp, #108
176c0     90 01 90 AD |  if_e	jmp	#LR__2212
176c4     48 4E 05 F1 | 	add	fp, #72
176c8     A7 22 0A FB | 	rdlong	local03, fp wz
176cc     48 4E 85 F1 | 	sub	fp, #72
176d0     80 01 90 AD |  if_e	jmp	#LR__2212
176d4     C4 4E 05 F1 | 	add	fp, #196
176d8     A7 12 02 FB | 	rdlong	arg01, fp
176dc     C4 4E 85 F1 | 	sub	fp, #196
176e0     09 3D 02 F6 | 	mov	local16, arg01
176e4     97 06 48 FB | 	callpa	#(@LR__2203-@LR__2202)>>2,fcache_load_ptr_
176e8                 | LR__2202
176e8     1E FB C9 FA | 	rdbyte	result1, local16 wz
176ec     01 3C 06 51 |  if_ne	add	local16, #1
176f0     F4 FF 9F 5D |  if_ne	jmp	#LR__2202
176f4                 | LR__2203
176f4     09 3D 82 F1 | 	sub	local16, arg01
176f8     1E 25 02 F6 | 	mov	local04, local16
176fc     6C 4E 05 F1 | 	add	fp, #108
17700     A7 28 02 FB | 	rdlong	local06, fp
17704     6C 4E 85 F1 | 	sub	fp, #108
17708     14 25 5A F2 | 	cmps	local04, local06 wcz
1770c     44 01 90 ED |  if_be	jmp	#LR__2212
17710     C4 4E 05 F1 | 	add	fp, #196
17714     A7 1E 02 FB | 	rdlong	local01, fp
17718     5C 4E 05 F1 | 	add	fp, #92
1771c     A7 1E 62 FC | 	wrlong	local01, fp
17720     FC 4E 85 F1 | 	sub	fp, #252
17724     A7 1E 0A FB | 	rdlong	local01, fp wz
17728     24 4E 85 F1 | 	sub	fp, #36
1772c     20 00 90 AD |  if_e	jmp	#LR__2204
17730     B8 4E 05 F1 | 	add	fp, #184
17734     A7 00 68 FC | 	wrlong	#0, fp
17738     4C 4E 85 F1 | 	sub	fp, #76
1773c     A7 1E 02 FB | 	rdlong	local01, fp
17740     B0 4E 05 F1 | 	add	fp, #176
17744     A7 1E 62 FC | 	wrlong	local01, fp
17748     1C 4F 85 F1 | 	sub	fp, #284
1774c     24 00 90 FD | 	jmp	#LR__2205
17750                 | LR__2204
17750     6C 4E 05 F1 | 	add	fp, #108
17754     A7 1E 02 FB | 	rdlong	local01, fp
17758     01 1E 86 F1 | 	sub	local01, #1
1775c     4C 4E 05 F1 | 	add	fp, #76
17760     A7 22 02 FB | 	rdlong	local03, fp
17764     11 1F 82 F1 | 	sub	local01, local03
17768     64 4E 05 F1 | 	add	fp, #100
1776c     A7 1E 62 FC | 	wrlong	local01, fp
17770     1C 4F 85 F1 | 	sub	fp, #284
17774                 | LR__2205
17774     97 20 48 FB | 	callpa	#(@LR__2207-@LR__2206)>>2,fcache_load_ptr_
17778                 | LR__2206
17778     1C 4F 05 F1 | 	add	fp, #284
1777c     A7 1E 0A FB | 	rdlong	local01, fp wz
17780     1C 4F 85 F1 | 	sub	fp, #284
17784     30 00 90 AD |  if_e	jmp	#LR__2208
17788     20 4F 05 F1 | 	add	fp, #288
1778c     A7 20 02 FB | 	rdlong	local02, fp
17790     10 23 02 F6 | 	mov	local03, local02
17794     01 22 06 F1 | 	add	local03, #1
17798     A7 22 62 FC | 	wrlong	local03, fp
1779c     10 55 48 FC | 	wrbyte	#42, local02
177a0     04 4E 85 F1 | 	sub	fp, #4
177a4     A7 1E 02 FB | 	rdlong	local01, fp
177a8     01 1E 86 F1 | 	sub	local01, #1
177ac     A7 1E 62 FC | 	wrlong	local01, fp
177b0     1C 4F 85 F1 | 	sub	fp, #284
177b4     C0 FF 9F FD | 	jmp	#LR__2206
177b8                 | LR__2207
177b8                 | LR__2208
177b8     B8 4E 05 F1 | 	add	fp, #184
177bc     A7 1E 0A FB | 	rdlong	local01, fp wz
177c0     B8 4E 85 F1 | 	sub	fp, #184
177c4     70 00 90 AD |  if_e	jmp	#LR__2211
177c8     20 4F 05 F1 | 	add	fp, #288
177cc     A7 20 02 FB | 	rdlong	local02, fp
177d0     10 23 02 F6 | 	mov	local03, local02
177d4     01 22 06 F1 | 	add	local03, #1
177d8     A7 22 62 FC | 	wrlong	local03, fp
177dc     10 5D 48 FC | 	wrbyte	#46, local02
177e0     04 4E 85 F1 | 	sub	fp, #4
177e4     A7 00 68 FC | 	wrlong	#0, fp
177e8     1C 4F 85 F1 | 	sub	fp, #284
177ec                 | LR__2209
177ec     1C 4F 05 F1 | 	add	fp, #284
177f0     A7 20 02 FB | 	rdlong	local02, fp
177f4     64 4E 85 F1 | 	sub	fp, #100
177f8     A7 26 02 FB | 	rdlong	local05, fp
177fc     B8 4E 85 F1 | 	sub	fp, #184
17800     13 21 52 F2 | 	cmps	local02, local05 wc
17804     30 00 90 3D |  if_ae	jmp	#LR__2210
17808     20 4F 05 F1 | 	add	fp, #288
1780c     A7 2C 02 FB | 	rdlong	local08, fp
17810     16 35 02 F6 | 	mov	local12, local08
17814     01 34 06 F1 | 	add	local12, #1
17818     A7 34 62 FC | 	wrlong	local12, fp
1781c     16 55 48 FC | 	wrbyte	#42, local08
17820     04 4E 85 F1 | 	sub	fp, #4
17824     A7 34 02 FB | 	rdlong	local12, fp
17828     01 34 06 F1 | 	add	local12, #1
1782c     A7 34 62 FC | 	wrlong	local12, fp
17830     1C 4F 85 F1 | 	sub	fp, #284
17834     B4 FF 9F FD | 	jmp	#LR__2209
17838                 | LR__2210
17838                 | LR__2211
17838     20 4F 05 F1 | 	add	fp, #288
1783c     A7 20 02 FB | 	rdlong	local02, fp
17840     10 23 02 F6 | 	mov	local03, local02
17844     01 22 06 F1 | 	add	local03, #1
17848     A7 22 62 FC | 	wrlong	local03, fp
1784c     20 4F 85 F1 | 	sub	fp, #288
17850     10 01 48 FC | 	wrbyte	#0, local02
17854                 | LR__2212
17854     04 4E 05 F1 | 	add	fp, #4
17858     A7 12 02 FB | 	rdlong	arg01, fp
1785c     04 4E 05 F1 | 	add	fp, #4
17860     A7 14 02 FB | 	rdlong	arg02, fp
17864     BC 4E 05 F1 | 	add	fp, #188
17868     A7 16 02 FB | 	rdlong	arg03, fp
1786c     C4 4E 85 F1 | 	sub	fp, #196
17870     C4 EE BF FD | 	call	#__system___fmtstr
17874                 | LR__2213
17874     A7 F0 03 F6 | 	mov	ptra, fp
17878     B2 00 A0 FD | 	call	#popregs_
1787c                 | __system___fmtfloat_ret
1787c     2D 00 64 FD | 	ret
17880                 | 
17880                 | __system__Left_S
17880     04 4A 05 F6 | 	mov	COUNT_, #4
17884     A8 00 A0 FD | 	call	#pushregs_
17888     09 1F 02 F6 | 	mov	local01, arg01
1788c     0A 21 02 F6 | 	mov	local02, arg02
17890     01 20 56 F2 | 	cmps	local02, #1 wc
17894     25 01 00 CF 
17898     42 FA 05 C6 |  if_b	mov	result1, ##@LR__4073
1789c     5C 00 90 CD |  if_b	jmp	#LR__2223
178a0     0F 13 02 F6 | 	mov	arg01, local01
178a4     09 23 02 F6 | 	mov	local03, arg01
178a8     97 06 48 FB | 	callpa	#(@LR__2221-@LR__2220)>>2,fcache_load_ptr_
178ac                 | LR__2220
178ac     11 FB C9 FA | 	rdbyte	result1, local03 wz
178b0     01 22 06 51 |  if_ne	add	local03, #1
178b4     F4 FF 9F 5D |  if_ne	jmp	#LR__2220
178b8                 | LR__2221
178b8     09 23 82 F1 | 	sub	local03, arg01
178bc     11 FB 01 F6 | 	mov	result1, local03
178c0     10 FB 59 F2 | 	cmps	result1, local02 wcz
178c4     0F FB 01 E6 |  if_be	mov	result1, local01
178c8     30 00 90 ED |  if_be	jmp	#LR__2223
178cc     10 13 02 F6 | 	mov	arg01, local02
178d0     02 12 06 F1 | 	add	arg01, #2
178d4     00 1A B0 FD | 	call	#__system___gc_alloc_managed
178d8     FD 24 0A F6 | 	mov	local04, result1 wz
178dc     18 00 90 AD |  if_e	jmp	#LR__2222
178e0     12 13 02 F6 | 	mov	arg01, local04
178e4     0F 15 02 F6 | 	mov	arg02, local01
178e8     10 17 02 F6 | 	mov	arg03, local02
178ec     A0 DE BF FD | 	call	#__system____builtin_memmove
178f0     12 21 02 F1 | 	add	local02, local04
178f4     10 01 48 FC | 	wrbyte	#0, local02
178f8                 | LR__2222
178f8     12 FB 01 F6 | 	mov	result1, local04
178fc                 | LR__2223
178fc     A7 F0 03 F6 | 	mov	ptra, fp
17900     B2 00 A0 FD | 	call	#popregs_
17904                 | __system__Left_S_ret
17904     2D 00 64 FD | 	ret
17908                 | 
17908                 | __system__Right_S
17908     05 4A 05 F6 | 	mov	COUNT_, #5
1790c     A8 00 A0 FD | 	call	#pushregs_
17910     09 1F 02 F6 | 	mov	local01, arg01
17914     0A 21 02 F6 | 	mov	local02, arg02
17918     01 20 56 F2 | 	cmps	local02, #1 wc
1791c     25 01 00 CF 
17920     43 FA 05 C6 |  if_b	mov	result1, ##@LR__4074
17924     64 00 90 CD |  if_b	jmp	#LR__2233
17928     0F 13 02 F6 | 	mov	arg01, local01
1792c     09 23 02 F6 | 	mov	local03, arg01
17930     97 06 48 FB | 	callpa	#(@LR__2231-@LR__2230)>>2,fcache_load_ptr_
17934                 | LR__2230
17934     11 FB C9 FA | 	rdbyte	result1, local03 wz
17938     01 22 06 51 |  if_ne	add	local03, #1
1793c     F4 FF 9F 5D |  if_ne	jmp	#LR__2230
17940                 | LR__2231
17940     09 23 82 F1 | 	sub	local03, arg01
17944     11 FB 01 F6 | 	mov	result1, local03
17948     FD 24 02 F6 | 	mov	local04, result1
1794c     10 25 5A F2 | 	cmps	local04, local02 wcz
17950     0F FB 01 E6 |  if_be	mov	result1, local01
17954     34 00 90 ED |  if_be	jmp	#LR__2233
17958     10 13 02 F6 | 	mov	arg01, local02
1795c     02 12 06 F1 | 	add	arg01, #2
17960     74 19 B0 FD | 	call	#__system___gc_alloc_managed
17964     FD 26 0A F6 | 	mov	local05, result1 wz
17968     1C 00 90 AD |  if_e	jmp	#LR__2232
1796c     10 25 82 F1 | 	sub	local04, local02
17970     0F 25 02 F1 | 	add	local04, local01
17974     01 20 06 F1 | 	add	local02, #1
17978     13 13 02 F6 | 	mov	arg01, local05
1797c     12 15 02 F6 | 	mov	arg02, local04
17980     10 17 02 F6 | 	mov	arg03, local02
17984     08 DE BF FD | 	call	#__system____builtin_memmove
17988                 | LR__2232
17988     13 FB 01 F6 | 	mov	result1, local05
1798c                 | LR__2233
1798c     A7 F0 03 F6 | 	mov	ptra, fp
17990     B2 00 A0 FD | 	call	#popregs_
17994                 | __system__Right_S_ret
17994     2D 00 64 FD | 	ret
17998                 | 
17998                 | __system__Mid_S
17998     05 4A 05 F6 | 	mov	COUNT_, #5
1799c     A8 00 A0 FD | 	call	#pushregs_
179a0     09 1F 02 F6 | 	mov	local01, arg01
179a4     0A 21 02 F6 | 	mov	local02, arg02
179a8     01 16 56 F2 | 	cmps	arg03, #1 wc
179ac     25 01 00 CF 
179b0     44 FA 05 C6 |  if_b	mov	result1, ##@LR__4075
179b4     80 00 90 CD |  if_b	jmp	#LR__2243
179b8     01 20 86 F1 | 	sub	local02, #1
179bc     00 20 56 F3 | 	fges	local02, #0 wc
179c0     0F 13 02 F6 | 	mov	arg01, local01
179c4     09 23 02 F6 | 	mov	local03, arg01
179c8     97 06 48 FB | 	callpa	#(@LR__2241-@LR__2240)>>2,fcache_load_ptr_
179cc                 | LR__2240
179cc     11 FB C9 FA | 	rdbyte	result1, local03 wz
179d0     01 22 06 51 |  if_ne	add	local03, #1
179d4     F4 FF 9F 5D |  if_ne	jmp	#LR__2240
179d8                 | LR__2241
179d8     09 23 82 F1 | 	sub	local03, arg01
179dc     11 FB 01 F6 | 	mov	result1, local03
179e0     FD 14 02 F6 | 	mov	arg02, result1
179e4     10 15 52 F2 | 	cmps	arg02, local02 wc
179e8     25 01 00 CF 
179ec     45 FA 05 C6 |  if_b	mov	result1, ##@LR__4076
179f0     44 00 90 CD |  if_b	jmp	#LR__2243
179f4     0A 25 02 F6 | 	mov	local04, arg02
179f8     10 25 82 F1 | 	sub	local04, local02
179fc     0B 25 5A F2 | 	cmps	local04, arg03 wcz
17a00     0B 25 02 16 |  if_a	mov	local04, arg03
17a04     12 13 02 F6 | 	mov	arg01, local04
17a08     02 12 06 F1 | 	add	arg01, #2
17a0c     C8 18 B0 FD | 	call	#__system___gc_alloc_managed
17a10     FD 26 0A F6 | 	mov	local05, result1 wz
17a14     1C 00 90 AD |  if_e	jmp	#LR__2242
17a18     0F 21 02 F1 | 	add	local02, local01
17a1c     13 13 02 F6 | 	mov	arg01, local05
17a20     10 15 02 F6 | 	mov	arg02, local02
17a24     12 17 02 F6 | 	mov	arg03, local04
17a28     64 DD BF FD | 	call	#__system____builtin_memmove
17a2c     13 25 02 F1 | 	add	local04, local05
17a30     12 01 48 FC | 	wrbyte	#0, local04
17a34                 | LR__2242
17a34     13 FB 01 F6 | 	mov	result1, local05
17a38                 | LR__2243
17a38     A7 F0 03 F6 | 	mov	ptra, fp
17a3c     B2 00 A0 FD | 	call	#popregs_
17a40                 | __system__Mid_S_ret
17a40     2D 00 64 FD | 	ret
17a44                 | 
17a44                 | __system__Chr_S
17a44     01 4A 05 F6 | 	mov	COUNT_, #1
17a48     A8 00 A0 FD | 	call	#pushregs_
17a4c     09 1F 02 F6 | 	mov	local01, arg01
17a50     03 12 06 F6 | 	mov	arg01, #3
17a54     80 18 B0 FD | 	call	#__system___gc_alloc_managed
17a58     00 FA 4D F2 | 	cmps	result1, #0 wz
17a5c     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
17a60     01 FA 05 51 |  if_ne	add	result1, #1
17a64     FD 00 48 5C |  if_ne	wrbyte	#0, result1
17a68     01 FA 85 51 |  if_ne	sub	result1, #1
17a6c     A7 F0 03 F6 | 	mov	ptra, fp
17a70     B2 00 A0 FD | 	call	#popregs_
17a74                 | __system__Chr_S_ret
17a74     2D 00 64 FD | 	ret
17a78                 | 
17a78                 | __system__Number_S
17a78     08 4A 05 F6 | 	mov	COUNT_, #8
17a7c     A8 00 A0 FD | 	call	#pushregs_
17a80     09 1F 02 F6 | 	mov	local01, arg01
17a84     0A 21 0A F6 | 	mov	local02, arg02 wz
17a88     0B 23 02 F6 | 	mov	local03, arg03
17a8c     3C 00 90 5D |  if_ne	jmp	#LR__2252
17a90     01 20 06 F6 | 	mov	local02, #1
17a94     11 25 02 F6 | 	mov	local04, local03
17a98     01 26 06 F6 | 	mov	local05, #1
17a9c     97 16 48 FB | 	callpa	#(@LR__2251-@LR__2250)>>2,fcache_load_ptr_
17aa0                 | LR__2250
17aa0     00 28 06 F6 | 	mov	local06, #0
17aa4     0F 25 1A F2 | 	cmp	local04, local01 wcz
17aa8     01 28 66 E6 |  if_be	neg	local06, #1
17aac     12 27 12 F2 | 	cmp	local05, local04 wc
17ab0     15 2B A2 F1 | 	subx	local07, local07
17ab4     15 29 CA F7 | 	test	local06, local07 wz
17ab8     11 25 02 5D |  if_ne	qmul	local04, local03
17abc     12 27 02 56 |  if_ne	mov	local05, local04
17ac0     01 20 06 51 |  if_ne	add	local02, #1
17ac4     18 24 62 5D |  if_ne	getqx	local04
17ac8     D4 FF 9F 5D |  if_ne	jmp	#LR__2250
17acc                 | LR__2251
17acc                 | LR__2252
17acc     20 20 36 F3 | 	fle	local02, #32 wc
17ad0     10 13 02 F6 | 	mov	arg01, local02
17ad4     02 12 06 F1 | 	add	arg01, #2
17ad8     FC 17 B0 FD | 	call	#__system___gc_alloc_managed
17adc     FD 28 02 F6 | 	mov	local06, result1
17ae0     10 2B 02 F6 | 	mov	local07, local02
17ae4     14 2B 02 F1 | 	add	local07, local06
17ae8     15 01 48 FC | 	wrbyte	#0, local07
17aec     97 1A 48 FB | 	callpa	#(@LR__2254-@LR__2253)>>2,fcache_load_ptr_
17af0                 | LR__2253
17af0     01 20 16 F2 | 	cmp	local02, #1 wc
17af4     2C 00 90 CD |  if_b	jmp	#LR__2255
17af8     11 1F 12 FD | 	qdiv	local01, local03
17afc     01 20 86 F1 | 	sub	local02, #1
17b00     10 2B 02 F6 | 	mov	local07, local02
17b04     14 2B 02 F1 | 	add	local07, local06
17b08     19 2C 62 FD | 	getqy	local08
17b0c     0A 2C 16 F2 | 	cmp	local08, #10 wc
17b10     30 2C 06 C1 |  if_b	add	local08, #48
17b14     37 2C 06 31 |  if_ae	add	local08, #55
17b18     15 2D 42 FC | 	wrbyte	local08, local07
17b1c     18 1E 62 FD | 	getqx	local01
17b20     CC FF 9F FD | 	jmp	#LR__2253
17b24                 | LR__2254
17b24                 | LR__2255
17b24     14 FB 01 F6 | 	mov	result1, local06
17b28     A7 F0 03 F6 | 	mov	ptra, fp
17b2c     B2 00 A0 FD | 	call	#popregs_
17b30                 | __system__Number_S_ret
17b30     2D 00 64 FD | 	ret
17b34                 | 
17b34                 | __system__LCase_S
17b34     07 4A 05 F6 | 	mov	COUNT_, #7
17b38     A8 00 A0 FD | 	call	#pushregs_
17b3c     09 1F 02 F6 | 	mov	local01, arg01
17b40     09 21 02 F6 | 	mov	local02, arg01
17b44     97 06 48 FB | 	callpa	#(@LR__2261-@LR__2260)>>2,fcache_load_ptr_
17b48                 | LR__2260
17b48     10 FB C9 FA | 	rdbyte	result1, local02 wz
17b4c     01 20 06 51 |  if_ne	add	local02, #1
17b50     F4 FF 9F 5D |  if_ne	jmp	#LR__2260
17b54                 | LR__2261
17b54     09 21 82 F1 | 	sub	local02, arg01
17b58     10 FB 01 F6 | 	mov	result1, local02
17b5c     FD 20 0A F6 | 	mov	local02, result1 wz
17b60     25 01 00 AF 
17b64     46 FA 05 A6 |  if_e	mov	result1, ##@LR__4077
17b68     7C 00 90 AD |  if_e	jmp	#LR__2267
17b6c     10 13 02 F6 | 	mov	arg01, local02
17b70     02 12 06 F1 | 	add	arg01, #2
17b74     60 17 B0 FD | 	call	#__system___gc_alloc_managed
17b78     FD 22 0A F6 | 	mov	local03, result1 wz
17b7c     64 00 90 AD |  if_e	jmp	#LR__2266
17b80     01 24 66 F6 | 	neg	local04, #1
17b84     97 26 48 FB | 	callpa	#(@LR__2265-@LR__2262)>>2,fcache_load_ptr_
17b88                 | LR__2262
17b88     01 24 06 F1 | 	add	local04, #1
17b8c     12 27 02 F6 | 	mov	local05, local04
17b90     0F 27 02 F1 | 	add	local05, local01
17b94     13 29 C2 FA | 	rdbyte	local06, local05
17b98     41 28 56 F2 | 	cmps	local06, #65 wc
17b9c     18 00 90 CD |  if_b	jmp	#LR__2263
17ba0     5B 28 56 F2 | 	cmps	local06, #91 wc
17ba4     12 2B 02 C6 |  if_b	mov	local07, local04
17ba8     11 2B 02 C1 |  if_b	add	local07, local03
17bac     20 28 06 C1 |  if_b	add	local06, #32
17bb0     15 29 42 CC |  if_b	wrbyte	local06, local07
17bb4     0C 00 90 CD |  if_b	jmp	#LR__2264
17bb8                 | LR__2263
17bb8     12 2B 02 F6 | 	mov	local07, local04
17bbc     11 2B 02 F1 | 	add	local07, local03
17bc0     15 29 42 FC | 	wrbyte	local06, local07
17bc4                 | LR__2264
17bc4     10 29 02 F6 | 	mov	local06, local02
17bc8     01 28 86 F1 | 	sub	local06, #1
17bcc     14 25 0A F2 | 	cmp	local04, local06 wz
17bd0     B4 FF 9F 5D |  if_ne	jmp	#LR__2262
17bd4                 | LR__2265
17bd4     11 21 02 F1 | 	add	local02, local03
17bd8     10 01 48 FC | 	wrbyte	#0, local02
17bdc     11 FB 01 F6 | 	mov	result1, local03
17be0     04 00 90 FD | 	jmp	#LR__2267
17be4                 | LR__2266
17be4     11 FB 01 F6 | 	mov	result1, local03
17be8                 | LR__2267
17be8     A7 F0 03 F6 | 	mov	ptra, fp
17bec     B2 00 A0 FD | 	call	#popregs_
17bf0                 | __system__LCase_S_ret
17bf0     2D 00 64 FD | 	ret
17bf4                 | 
17bf4                 | __system__LTrim_S
17bf4     05 4A 05 F6 | 	mov	COUNT_, #5
17bf8     A8 00 A0 FD | 	call	#pushregs_
17bfc     09 1F 02 F6 | 	mov	local01, arg01
17c00     09 21 02 F6 | 	mov	local02, arg01
17c04     97 06 48 FB | 	callpa	#(@LR__2271-@LR__2270)>>2,fcache_load_ptr_
17c08                 | LR__2270
17c08     10 FB C9 FA | 	rdbyte	result1, local02 wz
17c0c     01 20 06 51 |  if_ne	add	local02, #1
17c10     F4 FF 9F 5D |  if_ne	jmp	#LR__2270
17c14                 | LR__2271
17c14     09 21 82 F1 | 	sub	local02, arg01
17c18     10 FB 01 F6 | 	mov	result1, local02
17c1c     FD 20 0A F6 | 	mov	local02, result1 wz
17c20     25 01 00 AF 
17c24     47 FA 05 A6 |  if_e	mov	result1, ##@LR__4078
17c28     7C 00 90 AD |  if_e	jmp	#LR__2276
17c2c     00 22 06 F6 | 	mov	local03, #0
17c30     10 25 02 F6 | 	mov	local04, local02
17c34                 | LR__2272
17c34     12 23 52 F2 | 	cmps	local03, local04 wc
17c38     68 00 90 3D |  if_ae	jmp	#LR__2275
17c3c     11 17 02 F6 | 	mov	arg03, local03
17c40     0F 17 02 F1 | 	add	arg03, local01
17c44     0B 17 C2 FA | 	rdbyte	arg03, arg03
17c48     20 16 0E F2 | 	cmp	arg03, #32 wz
17c4c     4C 00 90 AD |  if_e	jmp	#LR__2274
17c50     10 13 02 F6 | 	mov	arg01, local02
17c54     11 13 82 F1 | 	sub	arg01, local03
17c58     02 12 06 F1 | 	add	arg01, #2
17c5c     78 16 B0 FD | 	call	#__system___gc_alloc_managed
17c60     FD 26 0A F6 | 	mov	local05, result1 wz
17c64     2C 00 90 AD |  if_e	jmp	#LR__2273
17c68     11 15 02 F6 | 	mov	arg02, local03
17c6c     0F 15 02 F1 | 	add	arg02, local01
17c70     10 17 02 F6 | 	mov	arg03, local02
17c74     11 17 82 F1 | 	sub	arg03, local03
17c78     13 13 02 F6 | 	mov	arg01, local05
17c7c     10 DB BF FD | 	call	#__system____builtin_memmove
17c80     11 21 82 F1 | 	sub	local02, local03
17c84     13 21 02 F1 | 	add	local02, local05
17c88     10 01 48 FC | 	wrbyte	#0, local02
17c8c     13 FB 01 F6 | 	mov	result1, local05
17c90     14 00 90 FD | 	jmp	#LR__2276
17c94                 | LR__2273
17c94     13 FB 01 F6 | 	mov	result1, local05
17c98     0C 00 90 FD | 	jmp	#LR__2276
17c9c                 | LR__2274
17c9c     01 22 06 F1 | 	add	local03, #1
17ca0     90 FF 9F FD | 	jmp	#LR__2272
17ca4                 | LR__2275
17ca4     0F FB 01 F6 | 	mov	result1, local01
17ca8                 | LR__2276
17ca8     A7 F0 03 F6 | 	mov	ptra, fp
17cac     B2 00 A0 FD | 	call	#popregs_
17cb0                 | __system__LTrim_S_ret
17cb0     2D 00 64 FD | 	ret
17cb4                 | 
17cb4                 | __system__RTrim_S
17cb4     04 4A 05 F6 | 	mov	COUNT_, #4
17cb8     A8 00 A0 FD | 	call	#pushregs_
17cbc     09 1F 02 F6 | 	mov	local01, arg01
17cc0     09 21 02 F6 | 	mov	local02, arg01
17cc4     97 06 48 FB | 	callpa	#(@LR__2281-@LR__2280)>>2,fcache_load_ptr_
17cc8                 | LR__2280
17cc8     10 FB C9 FA | 	rdbyte	result1, local02 wz
17ccc     01 20 06 51 |  if_ne	add	local02, #1
17cd0     F4 FF 9F 5D |  if_ne	jmp	#LR__2280
17cd4                 | LR__2281
17cd4     09 21 82 F1 | 	sub	local02, arg01
17cd8     10 FB 01 F6 | 	mov	result1, local02
17cdc     FD 20 0A F6 | 	mov	local02, result1 wz
17ce0     25 01 00 AF 
17ce4     48 FA 05 A6 |  if_e	mov	result1, ##@LR__4079
17ce8     74 00 90 AD |  if_e	jmp	#LR__2285
17cec     10 23 02 F6 | 	mov	local03, local02
17cf0     01 22 86 F1 | 	sub	local03, #1
17cf4                 | LR__2282
17cf4     11 15 02 F6 | 	mov	arg02, local03
17cf8     0F 15 02 F1 | 	add	arg02, local01
17cfc     0A 21 C2 FA | 	rdbyte	local02, arg02
17d00     20 20 0E F2 | 	cmp	local02, #32 wz
17d04     44 00 90 AD |  if_e	jmp	#LR__2284
17d08     11 13 02 F6 | 	mov	arg01, local03
17d0c     02 12 06 F1 | 	add	arg01, #2
17d10     C4 15 B0 FD | 	call	#__system___gc_alloc_managed
17d14     FD 24 0A F6 | 	mov	local04, result1 wz
17d18     28 00 90 AD |  if_e	jmp	#LR__2283
17d1c     11 17 02 F6 | 	mov	arg03, local03
17d20     01 16 06 F1 | 	add	arg03, #1
17d24     12 13 02 F6 | 	mov	arg01, local04
17d28     0F 15 02 F6 | 	mov	arg02, local01
17d2c     60 DA BF FD | 	call	#__system____builtin_memmove
17d30     01 22 06 F1 | 	add	local03, #1
17d34     12 23 02 F1 | 	add	local03, local04
17d38     11 01 48 FC | 	wrbyte	#0, local03
17d3c     12 FB 01 F6 | 	mov	result1, local04
17d40     1C 00 90 FD | 	jmp	#LR__2285
17d44                 | LR__2283
17d44     12 FB 01 F6 | 	mov	result1, local04
17d48     14 00 90 FD | 	jmp	#LR__2285
17d4c                 | LR__2284
17d4c     01 22 86 F1 | 	sub	local03, #1
17d50     00 22 56 F2 | 	cmps	local03, #0 wc
17d54     9C FF 9F 3D |  if_ae	jmp	#LR__2282
17d58     25 01 00 FF 
17d5c     49 FA 05 F6 | 	mov	result1, ##@LR__4080
17d60                 | LR__2285
17d60     A7 F0 03 F6 | 	mov	ptra, fp
17d64     B2 00 A0 FD | 	call	#popregs_
17d68                 | __system__RTrim_S_ret
17d68     2D 00 64 FD | 	ret
17d6c                 | 
17d6c                 | __system__Instr
17d6c     07 4A 05 F6 | 	mov	COUNT_, #7
17d70     A8 00 A0 FD | 	call	#pushregs_
17d74     09 1F 02 F6 | 	mov	local01, arg01
17d78     0A 21 02 F6 | 	mov	local02, arg02
17d7c     0B 23 02 F6 | 	mov	local03, arg03
17d80     11 13 02 F6 | 	mov	arg01, local03
17d84     09 25 02 F6 | 	mov	local04, arg01
17d88     97 06 48 FB | 	callpa	#(@LR__2291-@LR__2290)>>2,fcache_load_ptr_
17d8c                 | LR__2290
17d8c     12 FB C9 FA | 	rdbyte	result1, local04 wz
17d90     01 24 06 51 |  if_ne	add	local04, #1
17d94     F4 FF 9F 5D |  if_ne	jmp	#LR__2290
17d98                 | LR__2291
17d98     09 25 82 F1 | 	sub	local04, arg01
17d9c     12 27 02 F6 | 	mov	local05, local04
17da0     10 13 02 F6 | 	mov	arg01, local02
17da4     09 25 02 F6 | 	mov	local04, arg01
17da8     97 06 48 FB | 	callpa	#(@LR__2293-@LR__2292)>>2,fcache_load_ptr_
17dac                 | LR__2292
17dac     12 FB C9 FA | 	rdbyte	result1, local04 wz
17db0     01 24 06 51 |  if_ne	add	local04, #1
17db4     F4 FF 9F 5D |  if_ne	jmp	#LR__2292
17db8                 | LR__2293
17db8     09 25 82 F1 | 	sub	local04, arg01
17dbc     12 FB 01 F6 | 	mov	result1, local04
17dc0     FD 18 0A F6 | 	mov	arg04, result1 wz
17dc4     00 FA 05 A6 |  if_e	mov	result1, #0
17dc8     98 00 90 AD |  if_e	jmp	#LR__2297
17dcc     00 26 0E F2 | 	cmp	local05, #0 wz
17dd0     00 FA 05 A6 |  if_e	mov	result1, #0
17dd4     8C 00 90 AD |  if_e	jmp	#LR__2297
17dd8     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
17ddc     00 FA 05 16 |  if_a	mov	result1, #0
17de0     80 00 90 1D |  if_a	jmp	#LR__2297
17de4     01 1E 56 F2 | 	cmps	local01, #1 wc
17de8     01 1E 06 C6 |  if_b	mov	local01, #1
17dec     11 29 C2 FA | 	rdbyte	local06, local03
17df0     01 26 0E F2 | 	cmp	local05, #1 wz
17df4     18 00 90 5D |  if_ne	jmp	#LR__2294
17df8     10 13 02 F6 | 	mov	arg01, local02
17dfc     14 15 02 F6 | 	mov	arg02, local06
17e00     0F 17 02 F6 | 	mov	arg03, local01
17e04     00 18 06 F6 | 	mov	arg04, #0
17e08     64 30 B0 FD | 	call	#__system____ScanForChar
17e0c     54 00 90 FD | 	jmp	#LR__2297
17e10                 | LR__2294
17e10     0F 2B 02 F6 | 	mov	local07, local01
17e14                 | LR__2295
17e14     10 13 02 F6 | 	mov	arg01, local02
17e18     14 15 02 F6 | 	mov	arg02, local06
17e1c     15 17 02 F6 | 	mov	arg03, local07
17e20     00 18 06 F6 | 	mov	arg04, #0
17e24     48 30 B0 FD | 	call	#__system____ScanForChar
17e28     FD 2A 0A F6 | 	mov	local07, result1 wz
17e2c     30 00 90 AD |  if_e	jmp	#LR__2296
17e30     13 17 02 F6 | 	mov	arg03, local05
17e34     10 13 02 F6 | 	mov	arg01, local02
17e38     15 15 02 F6 | 	mov	arg02, local07
17e3c     58 FB BF FD | 	call	#__system__Mid_S
17e40     FD 12 02 F6 | 	mov	arg01, result1
17e44     11 15 02 F6 | 	mov	arg02, local03
17e48     4C DA BF FD | 	call	#__system___string_cmp
17e4c     00 FA 0D F2 | 	cmp	result1, #0 wz
17e50     15 FB 01 A6 |  if_e	mov	result1, local07
17e54     0C 00 90 AD |  if_e	jmp	#LR__2297
17e58     13 2B 02 F1 | 	add	local07, local05
17e5c     B4 FF 9F FD | 	jmp	#LR__2295
17e60                 | LR__2296
17e60     00 FA 05 F6 | 	mov	result1, #0
17e64                 | LR__2297
17e64     A7 F0 03 F6 | 	mov	ptra, fp
17e68     B2 00 A0 FD | 	call	#popregs_
17e6c                 | __system__Instr_ret
17e6c     2D 00 64 FD | 	ret
17e70                 | 
17e70                 | __system___strerror
17e70     00 12 56 F2 | 	cmps	arg01, #0 wc
17e74     08 00 90 CD |  if_b	jmp	#LR__2300
17e78     1A 12 56 F2 | 	cmps	arg01, #26 wc
17e7c     04 00 90 CD |  if_b	jmp	#LR__2301
17e80                 | LR__2300
17e80     19 12 06 F6 | 	mov	arg01, #25
17e84                 | LR__2301
17e84     02 12 66 F0 | 	shl	arg01, #2
17e88     01 00 00 FF 
17e8c     D8 E8 05 F1 | 	add	ptr___system__dat__, ##728
17e90     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
17e94     09 FB 01 FB | 	rdlong	result1, arg01
17e98     01 00 00 FF 
17e9c     D8 E8 85 F1 | 	sub	ptr___system__dat__, ##728
17ea0                 | __system___strerror_ret
17ea0     2D 00 64 FD | 	ret
17ea4                 | 
17ea4                 | __system___int64_shl
17ea4     20 16 CE F7 | 	test	arg03, #32 wz
17ea8     09 15 02 56 |  if_ne	mov	arg02, arg01
17eac     00 12 06 56 |  if_ne	mov	arg01, #0
17eb0     1F 16 CE F7 | 	test	arg03, #31 wz
17eb4     18 00 90 AD |  if_e	jmp	#LR__2310
17eb8     0B 15 62 F0 | 	shl	arg02, arg03
17ebc     09 FB 01 F6 | 	mov	result1, arg01
17ec0     0B FD 61 F6 | 	neg	result2, arg03
17ec4     FE FA 41 F0 | 	shr	result1, result2
17ec8     FD 14 42 F5 | 	or	arg02, result1
17ecc     0B 13 62 F0 | 	shl	arg01, arg03
17ed0                 | LR__2310
17ed0     0A FD 01 F6 | 	mov	result2, arg02
17ed4     09 FB 01 F6 | 	mov	result1, arg01
17ed8                 | __system___int64_shl_ret
17ed8     2D 00 64 FD | 	ret
17edc                 | 
17edc                 | __system___usepins
17edc     14 E8 05 F1 | 	add	ptr___system__dat__, #20
17ee0     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
17ee4     14 E8 85 F1 | 	sub	ptr___system__dat__, #20
17ee8     00 13 CA F7 | 	test	arg01, _var01 wz
17eec     18 E8 05 A1 |  if_e	add	ptr___system__dat__, #24
17ef0     F4 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
17ef4     18 E8 85 A1 |  if_e	sub	ptr___system__dat__, #24
17ef8     01 15 CA A7 |  if_e	test	arg02, _var02 wz
17efc     00 FA 05 56 |  if_ne	mov	result1, #0
17f00     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
17f04     14 E8 05 F1 | 	add	ptr___system__dat__, #20
17f08     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
17f0c     09 03 42 F5 | 	or	_var02, arg01
17f10     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
17f14     04 E8 05 F1 | 	add	ptr___system__dat__, #4
17f18     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
17f1c     0A 03 42 F5 | 	or	_var02, arg02
17f20     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
17f24     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
17f28     01 FA 65 F6 | 	neg	result1, #1
17f2c                 | __system___usepins_ret
17f2c     2D 00 64 FD | 	ret
17f30                 | 
17f30                 | __system___freepins
17f30     14 E8 05 F1 | 	add	ptr___system__dat__, #20
17f34     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
17f38     09 01 22 F5 | 	andn	_var01, arg01
17f3c     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
17f40     04 E8 05 F1 | 	add	ptr___system__dat__, #4
17f44     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
17f48     0A 01 22 F5 | 	andn	_var01, arg02
17f4c     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
17f50     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
17f54                 | __system___freepins_ret
17f54     2D 00 64 FD | 	ret
17f58                 | 
17f58                 | __system___float_fromuns
17f58     09 17 0A F6 | 	mov	arg03, arg01 wz
17f5c     0B FB 01 A6 |  if_e	mov	result1, arg03
17f60     24 00 90 AD |  if_e	jmp	#LR__2320
17f64     0B 15 92 F7 | 	encod	arg02, arg03 wc
17f68     01 14 06 C1 |  if_b	add	arg02, #1
17f6c     01 14 86 F1 | 	sub	arg02, #1
17f70     1F 12 06 F6 | 	mov	arg01, #31
17f74     0A 13 82 F1 | 	sub	arg01, arg02
17f78     09 17 62 F0 | 	shl	arg03, arg01
17f7c     02 16 46 F0 | 	shr	arg03, #2
17f80     00 12 06 F6 | 	mov	arg01, #0
17f84     74 08 B0 FD | 	call	#__system___float_Pack
17f88                 | LR__2320
17f88                 | __system___float_fromuns_ret
17f88     2D 00 64 FD | 	ret
17f8c                 | 
17f8c                 | __system___float_add
17f8c     0F 4A 05 F6 | 	mov	COUNT_, #15
17f90     A8 00 A0 FD | 	call	#pushregs_
17f94     09 1F 02 F6 | 	mov	local01, arg01
17f98     0A 21 02 F6 | 	mov	local02, arg02
17f9c     00 22 06 F6 | 	mov	local03, #0
17fa0     0F 25 02 F6 | 	mov	local04, local01
17fa4     12 27 02 F6 | 	mov	local05, local04
17fa8     16 26 46 F7 | 	zerox	local05, #22
17fac     12 29 02 F6 | 	mov	local06, local04
17fb0     01 28 66 F0 | 	shl	local06, #1
17fb4     18 28 46 F0 | 	shr	local06, #24
17fb8     1F 24 46 F0 | 	shr	local04, #31
17fbc     10 13 02 F6 | 	mov	arg01, local02
17fc0     09 FB 01 F6 | 	mov	result1, arg01
17fc4     FD 2A 02 F6 | 	mov	local07, result1
17fc8     15 2D 02 F6 | 	mov	local08, local07
17fcc     16 2C 46 F7 | 	zerox	local08, #22
17fd0     15 2F 02 F6 | 	mov	local09, local07
17fd4     01 2E 66 F0 | 	shl	local09, #1
17fd8     18 2E 46 F0 | 	shr	local09, #24
17fdc     17 31 02 F6 | 	mov	local10, local09
17fe0     1F 2A 46 F0 | 	shr	local07, #31
17fe4     00 32 06 F6 | 	mov	local11, #0
17fe8     00 34 06 F6 | 	mov	local12, #0
17fec     18 29 12 F2 | 	cmp	local06, local10 wc
17ff0     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
17ff4     2C 00 90 1D |  if_a	jmp	#LR__2330
17ff8     16 27 12 32 |  if_ae	cmp	local05, local08 wc
17ffc     24 00 90 3D |  if_ae	jmp	#LR__2330
18000     13 37 02 F6 | 	mov	local13, local05
18004     16 27 02 F6 | 	mov	local05, local08
18008     1B 2D 02 F6 | 	mov	local08, local13
1800c     14 37 02 F6 | 	mov	local13, local06
18010     18 29 02 F6 | 	mov	local06, local10
18014     1B 31 02 F6 | 	mov	local10, local13
18018     12 37 02 F6 | 	mov	local13, local04
1801c     15 25 02 F6 | 	mov	local04, local07
18020     1B 2B 02 F6 | 	mov	local07, local13
18024                 | LR__2330
18024     FF 28 0E F2 | 	cmp	local06, #255 wz
18028     70 01 90 AD |  if_e	jmp	#LR__2345
1802c     00 28 0E F2 | 	cmp	local06, #0 wz
18030     AC 01 90 AD |  if_e	jmp	#LR__2347
18034     17 26 26 F4 | 	bith	local05, #23
18038                 | LR__2331
18038     00 30 0E F2 | 	cmp	local10, #0 wz
1803c     F0 01 90 AD |  if_e	jmp	#LR__2351
18040     17 2C 26 F4 | 	bith	local08, #23
18044                 | LR__2332
18044     7F 28 86 F1 | 	sub	local06, #127
18048     7F 30 86 F1 | 	sub	local10, #127
1804c     14 39 02 F6 | 	mov	local14, local06
18050     18 39 82 F1 | 	sub	local14, local10
18054     97 14 48 FB | 	callpa	#(@LR__2334-@LR__2333)>>2,fcache_load_ptr_
18058                 | LR__2333
18058     20 38 56 F2 | 	cmps	local14, #32 wc
1805c     20 00 90 CD |  if_b	jmp	#LR__2335
18060     16 2F 02 F6 | 	mov	local09, local08
18064     00 32 0E F2 | 	cmp	local11, #0 wz
18068     6F 32 62 FD | 	wrnz	local11
1806c     19 2F 42 F5 | 	or	local09, local11
18070     17 33 02 F6 | 	mov	local11, local09
18074     00 2C 06 F6 | 	mov	local08, #0
18078     20 38 86 F1 | 	sub	local14, #32
1807c     D8 FF 9F FD | 	jmp	#LR__2333
18080                 | LR__2334
18080                 | LR__2335
18080     00 38 0E F2 | 	cmp	local14, #0 wz
18084     38 00 90 AD |  if_e	jmp	#LR__2336
18088     16 37 02 F6 | 	mov	local13, local08
1808c     20 30 06 F6 | 	mov	local10, #32
18090     1C 31 82 F1 | 	sub	local10, local14
18094     18 37 62 F0 | 	shl	local13, local10
18098     19 31 02 F6 | 	mov	local10, local11
1809c     20 2E 06 F6 | 	mov	local09, #32
180a0     1C 2F 82 F1 | 	sub	local09, local14
180a4     17 31 6A F0 | 	shl	local10, local09 wz
180a8     1C 33 42 F0 | 	shr	local11, local14
180ac     1C 2D 42 F0 | 	shr	local08, local14
180b0     1B 33 42 F5 | 	or	local11, local13
180b4     00 3A 06 F6 | 	mov	local15, #0
180b8     01 3A 06 56 |  if_ne	mov	local15, #1
180bc     1D 33 42 F5 | 	or	local11, local15
180c0                 | LR__2336
180c0     12 3B 02 F6 | 	mov	local15, local04
180c4     15 3B 62 F5 | 	xor	local15, local07
180c8     01 3A CE F7 | 	test	local15, #1 wz
180cc     18 00 90 AD |  if_e	jmp	#LR__2337
180d0     16 2D 22 F6 | 	not	local08, local08
180d4     19 33 22 F6 | 	not	local11, local11
180d8     01 32 0E F1 | 	add	local11, #1 wz
180dc     00 3A 06 F6 | 	mov	local15, #0
180e0     01 3A 06 A6 |  if_e	mov	local15, #1
180e4     1D 2D 02 F1 | 	add	local08, local15
180e8                 | LR__2337
180e8     19 35 12 F1 | 	add	local12, local11 wc
180ec     16 27 22 F1 | 	addx	local05, local08
180f0     00 26 56 F2 | 	cmps	local05, #0 wc
180f4     1C 00 90 3D |  if_ae	jmp	#LR__2338
180f8     01 24 66 F5 | 	xor	local04, #1
180fc     13 27 22 F6 | 	not	local05, local05
18100     1A 35 22 F6 | 	not	local12, local12
18104     01 34 0E F1 | 	add	local12, #1 wz
18108     00 3A 06 F6 | 	mov	local15, #0
1810c     01 3A 06 A6 |  if_e	mov	local15, #1
18110     1D 27 02 F1 | 	add	local05, local15
18114                 | LR__2338
18114     00 80 00 FF 
18118     00 26 16 F2 | 	cmp	local05, ##16777216 wc
1811c     28 00 90 CD |  if_b	jmp	#LR__2339
18120     01 28 06 F1 | 	add	local06, #1
18124     1A 39 02 F6 | 	mov	local14, local12
18128     01 38 06 F5 | 	and	local14, #1
1812c     01 34 46 F0 | 	shr	local12, #1
18130     13 3B 02 F6 | 	mov	local15, local05
18134     1F 3A 66 F0 | 	shl	local15, #31
18138     1D 35 42 F5 | 	or	local12, local15
1813c     1C 35 42 F5 | 	or	local12, local14
18140     01 26 46 F0 | 	shr	local05, #1
18144     3C 00 90 FD | 	jmp	#LR__2344
18148                 | LR__2339
18148     00 40 00 FF 
1814c     00 26 16 F2 | 	cmp	local05, ##8388608 wc
18150     30 00 90 3D |  if_ae	jmp	#LR__2343
18154     00 26 0E F2 | 	cmp	local05, #0 wz
18158     00 34 0E A2 |  if_e	cmp	local12, #0 wz
1815c     08 24 46 A5 |  if_e	or	local04, #8
18160     01 24 26 A5 |  if_e	andn	local04, #1
18164     1C 00 90 AD |  if_e	jmp	#LR__2342
18168                 | LR__2340
18168     00 40 00 FF 
1816c     00 26 16 F2 | 	cmp	local05, ##8388608 wc
18170     10 00 90 3D |  if_ae	jmp	#LR__2341
18174     1A 35 12 F1 | 	add	local12, local12 wc
18178     13 27 22 F1 | 	addx	local05, local05
1817c     01 28 86 F1 | 	sub	local06, #1
18180     E4 FF 9F FD | 	jmp	#LR__2340
18184                 | LR__2341
18184                 | LR__2342
18184                 | LR__2343
18184                 | LR__2344
18184     13 13 02 F6 | 	mov	arg01, local05
18188     1A 15 02 F6 | 	mov	arg02, local12
1818c     14 17 02 F6 | 	mov	arg03, local06
18190     12 19 02 F6 | 	mov	arg04, local04
18194     1C 31 B0 FD | 	call	#__system__pack_0436
18198     DC 00 90 FD | 	jmp	#LR__2355
1819c                 | LR__2345
1819c     FF 30 0E F2 | 	cmp	local10, #255 wz
181a0     10 00 90 5D |  if_ne	jmp	#LR__2346
181a4     12 2B 0A F2 | 	cmp	local07, local04 wz
181a8     00 F8 3F 5F 
181ac     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
181b0     C4 00 90 5D |  if_ne	jmp	#LR__2355
181b4                 | LR__2346
181b4     00 26 0E F2 | 	cmp	local05, #0 wz
181b8     00 F8 3F 5F 
181bc     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
181c0     B4 00 90 5D |  if_ne	jmp	#LR__2355
181c4     1A 15 02 F6 | 	mov	arg02, local12
181c8     14 17 02 F6 | 	mov	arg03, local06
181cc     12 19 02 F6 | 	mov	arg04, local04
181d0     02 18 46 F5 | 	or	arg04, #2
181d4     13 13 02 F6 | 	mov	arg01, local05
181d8     D8 30 B0 FD | 	call	#__system__pack_0436
181dc     98 00 90 FD | 	jmp	#LR__2355
181e0                 | LR__2347
181e0     00 26 0E F2 | 	cmp	local05, #0 wz
181e4     28 00 90 AD |  if_e	jmp	#LR__2350
181e8     01 26 66 F0 | 	shl	local05, #1
181ec     97 0E 48 FB | 	callpa	#(@LR__2349-@LR__2348)>>2,fcache_load_ptr_
181f0                 | LR__2348
181f0     00 40 00 FF 
181f4     00 26 16 F2 | 	cmp	local05, ##8388608 wc
181f8     14 3B 02 C6 |  if_b	mov	local15, local06
181fc     01 3A 86 C1 |  if_b	sub	local15, #1
18200     1D 29 02 C6 |  if_b	mov	local06, local15
18204     01 26 66 C0 |  if_b	shl	local05, #1
18208     E4 FF 9F CD |  if_b	jmp	#LR__2348
1820c                 | LR__2349
1820c     28 FE 9F FD | 	jmp	#LR__2331
18210                 | LR__2350
18210     15 25 02 F5 | 	and	local04, local07
18214     12 19 02 F6 | 	mov	arg04, local04
18218     08 18 46 F5 | 	or	arg04, #8
1821c     00 12 06 F6 | 	mov	arg01, #0
18220     00 14 06 F6 | 	mov	arg02, #0
18224     00 16 06 F6 | 	mov	arg03, #0
18228     88 30 B0 FD | 	call	#__system__pack_0436
1822c     48 00 90 FD | 	jmp	#LR__2355
18230                 | LR__2351
18230     00 2C 0E F2 | 	cmp	local08, #0 wz
18234     28 00 90 AD |  if_e	jmp	#LR__2354
18238     01 2C 66 F0 | 	shl	local08, #1
1823c     97 0E 48 FB | 	callpa	#(@LR__2353-@LR__2352)>>2,fcache_load_ptr_
18240                 | LR__2352
18240     00 40 00 FF 
18244     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
18248     18 3B 02 C6 |  if_b	mov	local15, local10
1824c     01 3A 86 C1 |  if_b	sub	local15, #1
18250     1D 31 02 C6 |  if_b	mov	local10, local15
18254     01 2C 66 C0 |  if_b	shl	local08, #1
18258     E4 FF 9F CD |  if_b	jmp	#LR__2352
1825c                 | LR__2353
1825c     E4 FD 9F FD | 	jmp	#LR__2332
18260                 | LR__2354
18260     7F 28 86 F1 | 	sub	local06, #127
18264     13 13 02 F6 | 	mov	arg01, local05
18268     1A 15 02 F6 | 	mov	arg02, local12
1826c     14 17 02 F6 | 	mov	arg03, local06
18270     12 19 02 F6 | 	mov	arg04, local04
18274     3C 30 B0 FD | 	call	#__system__pack_0436
18278                 | LR__2355
18278     A7 F0 03 F6 | 	mov	ptra, fp
1827c     B2 00 A0 FD | 	call	#popregs_
18280                 | __system___float_add_ret
18280     2D 00 64 FD | 	ret
18284                 | 
18284                 | __system___float_mul
18284     0B 4A 05 F6 | 	mov	COUNT_, #11
18288     A8 00 A0 FD | 	call	#pushregs_
1828c     09 1F 02 F6 | 	mov	local01, arg01
18290     0A 21 02 F6 | 	mov	local02, arg02
18294     0F 23 02 F6 | 	mov	local03, local01
18298     11 25 02 F6 | 	mov	local04, local03
1829c     16 24 46 F7 | 	zerox	local04, #22
182a0     11 27 02 F6 | 	mov	local05, local03
182a4     01 26 66 F0 | 	shl	local05, #1
182a8     18 26 46 F0 | 	shr	local05, #24
182ac     1F 22 46 F0 | 	shr	local03, #31
182b0     10 FB 01 F6 | 	mov	result1, local02
182b4     FD 28 02 F6 | 	mov	local06, result1
182b8     14 2B 02 F6 | 	mov	local07, local06
182bc     16 2A 46 F7 | 	zerox	local07, #22
182c0     14 2D 02 F6 | 	mov	local08, local06
182c4     01 2C 66 F0 | 	shl	local08, #1
182c8     18 2C 46 F0 | 	shr	local08, #24
182cc     1F 28 46 F0 | 	shr	local06, #31
182d0     14 23 62 F5 | 	xor	local03, local06
182d4     FF 26 0E F2 | 	cmp	local05, #255 wz
182d8     90 00 90 AD |  if_e	jmp	#LR__2363
182dc     FF 2C 0E F2 | 	cmp	local08, #255 wz
182e0     D8 00 90 AD |  if_e	jmp	#LR__2365
182e4     00 26 0E F2 | 	cmp	local05, #0 wz
182e8     0C 01 90 AD |  if_e	jmp	#LR__2366
182ec     17 24 26 F4 | 	bith	local04, #23
182f0                 | LR__2360
182f0     00 2C 0E F2 | 	cmp	local08, #0 wz
182f4     44 01 90 AD |  if_e	jmp	#LR__2370
182f8     17 2A 26 F4 | 	bith	local07, #23
182fc                 | LR__2361
182fc     12 21 02 F6 | 	mov	local02, local04
18300     04 20 66 F0 | 	shl	local02, #4
18304     15 29 02 F6 | 	mov	local06, local07
18308     05 28 66 F0 | 	shl	local06, #5
1830c     14 21 02 FD | 	qmul	local02, local06
18310     16 27 02 F1 | 	add	local05, local08
18314     FE 26 86 F1 | 	sub	local05, #254
18318     13 2F 02 F6 | 	mov	local09, local05
1831c     04 24 66 F0 | 	shl	local04, #4
18320     05 2A 66 F0 | 	shl	local07, #5
18324     18 30 62 FD | 	getqx	local10
18328     15 25 02 FD | 	qmul	local04, local07
1832c     19 32 62 FD | 	getqy	local11
18330     00 80 00 FF 
18334     00 32 16 F2 | 	cmp	local11, ##16777216 wc
18338     18 00 90 CD |  if_b	jmp	#LR__2362
1833c     01 2E 06 F1 | 	add	local09, #1
18340     01 30 46 F0 | 	shr	local10, #1
18344     19 2D 02 F6 | 	mov	local08, local11
18348     1F 2C 66 F0 | 	shl	local08, #31
1834c     16 31 42 F5 | 	or	local10, local08
18350     01 32 46 F0 | 	shr	local11, #1
18354                 | LR__2362
18354     19 13 02 F6 | 	mov	arg01, local11
18358     18 15 02 F6 | 	mov	arg02, local10
1835c     17 17 02 F6 | 	mov	arg03, local09
18360     11 19 02 F6 | 	mov	arg04, local03
18364     4C 2F B0 FD | 	call	#__system__pack_0436
18368     10 01 90 FD | 	jmp	#LR__2374
1836c                 | LR__2363
1836c     00 24 0E F2 | 	cmp	local04, #0 wz
18370     0F FB 01 56 |  if_ne	mov	result1, local01
18374     04 01 90 5D |  if_ne	jmp	#LR__2374
18378     FF 2C 56 F2 | 	cmps	local08, #255 wc
1837c     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
18380     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
18384     18 00 90 4D |  if_c_and_nz	jmp	#LR__2364
18388     00 F8 3F CF 
1838c     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
18390     E8 00 90 CD |  if_b	jmp	#LR__2374
18394     00 2A 0E F2 | 	cmp	local07, #0 wz
18398     10 FB 01 56 |  if_ne	mov	result1, local02
1839c     DC 00 90 5D |  if_ne	jmp	#LR__2374
183a0                 | LR__2364
183a0     02 22 46 F5 | 	or	local03, #2
183a4     00 12 06 F6 | 	mov	arg01, #0
183a8     00 14 06 F6 | 	mov	arg02, #0
183ac     13 17 02 F6 | 	mov	arg03, local05
183b0     11 19 02 F6 | 	mov	arg04, local03
183b4     FC 2E B0 FD | 	call	#__system__pack_0436
183b8     C0 00 90 FD | 	jmp	#LR__2374
183bc                 | LR__2365
183bc     00 26 0E F2 | 	cmp	local05, #0 wz
183c0     00 24 0E A2 |  if_e	cmp	local04, #0 wz
183c4     00 F8 3F AF 
183c8     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
183cc     AC 00 90 AD |  if_e	jmp	#LR__2374
183d0     00 2A 0E F2 | 	cmp	local07, #0 wz
183d4     10 FB 01 56 |  if_ne	mov	result1, local02
183d8     A0 00 90 5D |  if_ne	jmp	#LR__2374
183dc     16 17 02 F6 | 	mov	arg03, local08
183e0     11 19 02 F6 | 	mov	arg04, local03
183e4     02 18 46 F5 | 	or	arg04, #2
183e8     00 12 06 F6 | 	mov	arg01, #0
183ec     00 14 06 F6 | 	mov	arg02, #0
183f0     C0 2E B0 FD | 	call	#__system__pack_0436
183f4     84 00 90 FD | 	jmp	#LR__2374
183f8                 | LR__2366
183f8     00 24 0E F2 | 	cmp	local04, #0 wz
183fc     20 00 90 AD |  if_e	jmp	#LR__2369
18400     01 24 66 F0 | 	shl	local04, #1
18404     97 0A 48 FB | 	callpa	#(@LR__2368-@LR__2367)>>2,fcache_load_ptr_
18408                 | LR__2367
18408     00 40 00 FF 
1840c     00 24 16 F2 | 	cmp	local04, ##8388608 wc
18410     01 26 86 C1 |  if_b	sub	local05, #1
18414     01 24 66 C0 |  if_b	shl	local04, #1
18418     EC FF 9F CD |  if_b	jmp	#LR__2367
1841c                 | LR__2368
1841c     D0 FE 9F FD | 	jmp	#LR__2360
18420                 | LR__2369
18420     08 22 46 F5 | 	or	local03, #8
18424     00 12 06 F6 | 	mov	arg01, #0
18428     00 14 06 F6 | 	mov	arg02, #0
1842c     00 16 06 F6 | 	mov	arg03, #0
18430     11 19 02 F6 | 	mov	arg04, local03
18434     7C 2E B0 FD | 	call	#__system__pack_0436
18438     40 00 90 FD | 	jmp	#LR__2374
1843c                 | LR__2370
1843c     00 2A 0E F2 | 	cmp	local07, #0 wz
18440     20 00 90 AD |  if_e	jmp	#LR__2373
18444     01 2A 66 F0 | 	shl	local07, #1
18448     97 0A 48 FB | 	callpa	#(@LR__2372-@LR__2371)>>2,fcache_load_ptr_
1844c                 | LR__2371
1844c     00 40 00 FF 
18450     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
18454     01 2C 86 C1 |  if_b	sub	local08, #1
18458     01 2A 66 C0 |  if_b	shl	local07, #1
1845c     EC FF 9F CD |  if_b	jmp	#LR__2371
18460                 | LR__2372
18460     98 FE 9F FD | 	jmp	#LR__2361
18464                 | LR__2373
18464     08 22 46 F5 | 	or	local03, #8
18468     00 12 06 F6 | 	mov	arg01, #0
1846c     00 14 06 F6 | 	mov	arg02, #0
18470     00 16 06 F6 | 	mov	arg03, #0
18474     11 19 02 F6 | 	mov	arg04, local03
18478     38 2E B0 FD | 	call	#__system__pack_0436
1847c                 | LR__2374
1847c     A7 F0 03 F6 | 	mov	ptra, fp
18480     B2 00 A0 FD | 	call	#popregs_
18484                 | __system___float_mul_ret
18484     2D 00 64 FD | 	ret
18488                 | 
18488                 | __system___float_div
18488     0E 4A 05 F6 | 	mov	COUNT_, #14
1848c     A8 00 A0 FD | 	call	#pushregs_
18490     09 23 02 F6 | 	mov	local03, arg01
18494     0A 25 02 F6 | 	mov	local04, arg02
18498     11 27 02 F6 | 	mov	local05, local03
1849c     13 29 02 F6 | 	mov	local06, local05
184a0     16 28 46 F7 | 	zerox	local06, #22
184a4     13 2B 02 F6 | 	mov	local07, local05
184a8     01 2A 66 F0 | 	shl	local07, #1
184ac     18 2A 46 F0 | 	shr	local07, #24
184b0     1F 26 46 F0 | 	shr	local05, #31
184b4     12 FB 01 F6 | 	mov	result1, local04
184b8     FD 2C 02 F6 | 	mov	local08, result1
184bc     16 2F 02 F6 | 	mov	local09, local08
184c0     16 2E 46 F7 | 	zerox	local09, #22
184c4     16 31 02 F6 | 	mov	local10, local08
184c8     01 30 66 F0 | 	shl	local10, #1
184cc     18 30 46 F0 | 	shr	local10, #24
184d0     1F 2C 46 F0 | 	shr	local08, #31
184d4     16 27 62 F5 | 	xor	local05, local08
184d8     FF 2A 0E F2 | 	cmp	local07, #255 wz
184dc     D4 00 90 AD |  if_e	jmp	#LR__2385
184e0     FF 30 0E F2 | 	cmp	local10, #255 wz
184e4     04 01 90 AD |  if_e	jmp	#LR__2386
184e8     00 2A 0E F2 | 	cmp	local07, #0 wz
184ec     24 01 90 AD |  if_e	jmp	#LR__2387
184f0     17 28 26 F4 | 	bith	local06, #23
184f4                 | LR__2380
184f4     00 30 0E F2 | 	cmp	local10, #0 wz
184f8     70 01 90 AD |  if_e	jmp	#LR__2391
184fc     17 2E 26 F4 | 	bith	local09, #23
18500                 | LR__2381
18500     18 2B 82 F1 | 	sub	local07, local10
18504     15 33 02 F6 | 	mov	local11, local07
18508     14 13 02 F6 | 	mov	arg01, local06
1850c     02 12 46 F0 | 	shr	arg01, #2
18510     1E 28 66 F0 | 	shl	local06, #30
18514     14 15 02 F6 | 	mov	arg02, local06
18518     17 17 02 F6 | 	mov	arg03, local09
1851c     28 12 62 FD | 	setq	arg01
18520     0B 15 12 FD | 	qdiv	arg02, arg03
18524     00 34 06 F6 | 	mov	local12, #0
18528     18 1E 62 FD | 	getqx	local01
1852c     19 FC 61 FD | 	getqy	result2
18530     FE 20 02 F6 | 	mov	local02, result2
18534     0F 37 02 F6 | 	mov	local13, local01
18538     00 20 4E F2 | 	cmps	local02, #0 wz
1853c     1B 39 02 F6 | 	mov	local14, local13
18540     19 38 66 F0 | 	shl	local14, #25
18544     01 34 06 56 |  if_ne	mov	local12, #1
18548     1A 39 42 F5 | 	or	local14, local12
1854c     07 36 46 F0 | 	shr	local13, #7
18550     00 80 00 FF 
18554     00 36 16 F2 | 	cmp	local13, ##16777216 wc
18558     1C 00 90 CD |  if_b	jmp	#LR__2382
1855c     01 32 06 F1 | 	add	local11, #1
18560     01 38 46 F0 | 	shr	local14, #1
18564     1B 35 02 F6 | 	mov	local12, local13
18568     1F 34 66 F0 | 	shl	local12, #31
1856c     1A 39 42 F5 | 	or	local14, local12
18570     01 36 46 F0 | 	shr	local13, #1
18574     24 00 90 FD | 	jmp	#LR__2384
18578                 | LR__2382
18578     00 40 00 FF 
1857c     00 36 16 F2 | 	cmp	local13, ##8388608 wc
18580     18 00 90 3D |  if_ae	jmp	#LR__2383
18584     01 32 86 F1 | 	sub	local11, #1
18588     01 36 66 F0 | 	shl	local13, #1
1858c     1C 35 02 F6 | 	mov	local12, local14
18590     1F 34 46 F0 | 	shr	local12, #31
18594     1A 37 42 F5 | 	or	local13, local12
18598     01 38 66 F0 | 	shl	local14, #1
1859c                 | LR__2383
1859c                 | LR__2384
1859c     1B 13 02 F6 | 	mov	arg01, local13
185a0     1C 15 02 F6 | 	mov	arg02, local14
185a4     19 17 02 F6 | 	mov	arg03, local11
185a8     13 19 02 F6 | 	mov	arg04, local05
185ac     04 2D B0 FD | 	call	#__system__pack_0436
185b0     F8 00 90 FD | 	jmp	#LR__2395
185b4                 | LR__2385
185b4     00 28 0E F2 | 	cmp	local06, #0 wz
185b8     11 FB 01 56 |  if_ne	mov	result1, local03
185bc     EC 00 90 5D |  if_ne	jmp	#LR__2395
185c0     FF 30 0E F2 | 	cmp	local10, #255 wz
185c4     00 F8 3F AF 
185c8     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
185cc     DC 00 90 AD |  if_e	jmp	#LR__2395
185d0     02 26 46 F5 | 	or	local05, #2
185d4     00 12 06 F6 | 	mov	arg01, #0
185d8     00 14 06 F6 | 	mov	arg02, #0
185dc     15 17 02 F6 | 	mov	arg03, local07
185e0     13 19 02 F6 | 	mov	arg04, local05
185e4     CC 2C B0 FD | 	call	#__system__pack_0436
185e8     C0 00 90 FD | 	jmp	#LR__2395
185ec                 | LR__2386
185ec     00 2E 0E F2 | 	cmp	local09, #0 wz
185f0     12 FB 01 56 |  if_ne	mov	result1, local04
185f4     B4 00 90 5D |  if_ne	jmp	#LR__2395
185f8     13 19 02 F6 | 	mov	arg04, local05
185fc     08 18 46 F5 | 	or	arg04, #8
18600     00 12 06 F6 | 	mov	arg01, #0
18604     00 14 06 F6 | 	mov	arg02, #0
18608     00 16 06 F6 | 	mov	arg03, #0
1860c     A4 2C B0 FD | 	call	#__system__pack_0436
18610     98 00 90 FD | 	jmp	#LR__2395
18614                 | LR__2387
18614     00 28 0E F2 | 	cmp	local06, #0 wz
18618     20 00 90 AD |  if_e	jmp	#LR__2390
1861c     01 28 66 F0 | 	shl	local06, #1
18620     97 0A 48 FB | 	callpa	#(@LR__2389-@LR__2388)>>2,fcache_load_ptr_
18624                 | LR__2388
18624     00 40 00 FF 
18628     00 28 16 F2 | 	cmp	local06, ##8388608 wc
1862c     01 2A 86 C1 |  if_b	sub	local07, #1
18630     01 28 66 C0 |  if_b	shl	local06, #1
18634     EC FF 9F CD |  if_b	jmp	#LR__2388
18638                 | LR__2389
18638     B8 FE 9F FD | 	jmp	#LR__2380
1863c                 | LR__2390
1863c     00 30 0E F2 | 	cmp	local10, #0 wz
18640     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
18644     00 F8 3F AF 
18648     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1864c     5C 00 90 AD |  if_e	jmp	#LR__2395
18650     13 19 02 F6 | 	mov	arg04, local05
18654     08 18 46 F5 | 	or	arg04, #8
18658     00 12 06 F6 | 	mov	arg01, #0
1865c     00 14 06 F6 | 	mov	arg02, #0
18660     00 16 06 F6 | 	mov	arg03, #0
18664     4C 2C B0 FD | 	call	#__system__pack_0436
18668     40 00 90 FD | 	jmp	#LR__2395
1866c                 | LR__2391
1866c     00 2E 0E F2 | 	cmp	local09, #0 wz
18670     20 00 90 AD |  if_e	jmp	#LR__2394
18674     01 2E 66 F0 | 	shl	local09, #1
18678     97 0A 48 FB | 	callpa	#(@LR__2393-@LR__2392)>>2,fcache_load_ptr_
1867c                 | LR__2392
1867c     00 40 00 FF 
18680     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
18684     01 30 86 C1 |  if_b	sub	local10, #1
18688     01 2E 66 C0 |  if_b	shl	local09, #1
1868c     EC FF 9F CD |  if_b	jmp	#LR__2392
18690                 | LR__2393
18690     6C FE 9F FD | 	jmp	#LR__2381
18694                 | LR__2394
18694     02 26 46 F5 | 	or	local05, #2
18698     00 12 06 F6 | 	mov	arg01, #0
1869c     00 14 06 F6 | 	mov	arg02, #0
186a0     00 16 06 F6 | 	mov	arg03, #0
186a4     13 19 02 F6 | 	mov	arg04, local05
186a8     08 2C B0 FD | 	call	#__system__pack_0436
186ac                 | LR__2395
186ac     A7 F0 03 F6 | 	mov	ptra, fp
186b0     B2 00 A0 FD | 	call	#popregs_
186b4                 | __system___float_div_ret
186b4     2D 00 64 FD | 	ret
186b8                 | 
186b8                 | __system___float_cmp
186b8     00 C0 3F FF 
186bc     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
186c0     00 C0 3F CF 
186c4     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
186c8     0B FB 01 36 |  if_ae	mov	result1, arg03
186cc     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
186d0     00 C0 7F FF 
186d4     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
186d8     00 C0 7F CF 
186dc     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
186e0     0B FB 01 36 |  if_ae	mov	result1, arg03
186e4     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
186e8     00 12 56 F2 | 	cmps	arg01, #0 wc
186ec     2C 00 90 3D |  if_ae	jmp	#LR__2400
186f0     00 14 56 F2 | 	cmps	arg02, #0 wc
186f4     0A FB 01 C6 |  if_b	mov	result1, arg02
186f8     09 FB 81 C1 |  if_b	sub	result1, arg01
186fc     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
18700     00 14 0E F2 | 	cmp	arg02, #0 wz
18704     00 00 40 AF 
18708     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
1870c     00 FA 05 A6 |  if_e	mov	result1, #0
18710     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
18714     01 FA 65 F6 | 	neg	result1, #1
18718     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
1871c                 | LR__2400
1871c     00 14 56 F2 | 	cmps	arg02, #0 wc
18720     1C 00 90 3D |  if_ae	jmp	#LR__2401
18724     00 12 0E F2 | 	cmp	arg01, #0 wz
18728     00 00 40 AF 
1872c     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
18730     00 FA 05 A6 |  if_e	mov	result1, #0
18734     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
18738     01 FA 05 F6 | 	mov	result1, #1
1873c     08 00 90 FD | 	jmp	#__system___float_cmp_ret
18740                 | LR__2401
18740     0A 13 82 F1 | 	sub	arg01, arg02
18744     09 FB 01 F6 | 	mov	result1, arg01
18748                 | __system___float_cmp_ret
18748     2D 00 64 FD | 	ret
1874c                 | 
1874c                 | __system___float_tointeger
1874c     02 4A 05 F6 | 	mov	COUNT_, #2
18750     A8 00 A0 FD | 	call	#pushregs_
18754     50 00 B0 FD | 	call	#__system___float_Unpack
18758     FF FF 7F FF 
1875c     FF FD 55 F2 | 	cmps	result2, ##-1 wc
18760     34 00 90 CD |  if_b	jmp	#LR__2410
18764     1F FC 55 F2 | 	cmps	result2, #31 wc
18768     2C 00 90 3D |  if_ae	jmp	#LR__2410
1876c     02 FE 65 F0 | 	shl	result3, #2
18770     1E 1E 06 F6 | 	mov	local01, #30
18774     FE 1E 82 F1 | 	sub	local01, result2
18778     0F FF 41 F0 | 	shr	result3, local01
1877c     FF 20 02 F6 | 	mov	local02, result3
18780     0A 21 02 F1 | 	add	local02, arg02
18784     01 20 46 F0 | 	shr	local02, #1
18788     00 FA 0D F2 | 	cmp	result1, #0 wz
1878c     10 21 62 56 |  if_ne	neg	local02, local02
18790     10 FB 01 F6 | 	mov	result1, local02
18794     04 00 90 FD | 	jmp	#LR__2411
18798                 | LR__2410
18798     00 FA 05 F6 | 	mov	result1, #0
1879c                 | LR__2411
1879c     A7 F0 03 F6 | 	mov	ptra, fp
187a0     B2 00 A0 FD | 	call	#popregs_
187a4                 | __system___float_tointeger_ret
187a4     2D 00 64 FD | 	ret
187a8                 | 
187a8                 | __system___float_Unpack
187a8     09 01 02 F6 | 	mov	_var01, arg01
187ac     1F 00 46 F0 | 	shr	_var01, #31
187b0     09 03 02 F6 | 	mov	_var02, arg01
187b4     01 02 66 F0 | 	shl	_var02, #1
187b8     18 02 4E F0 | 	shr	_var02, #24 wz
187bc     17 13 06 F4 | 	bitl	arg01, #279
187c0     06 12 66 50 |  if_ne	shl	arg01, #6
187c4     1D 12 26 54 |  if_ne	bith	arg01, #29
187c8     1C 00 90 5D |  if_ne	jmp	#LR__2420
187cc     09 05 92 F7 | 	encod	_var03, arg01 wc
187d0     01 04 06 C1 |  if_b	add	_var03, #1
187d4     17 04 86 F1 | 	sub	_var03, #23
187d8     02 03 02 F6 | 	mov	_var02, _var03
187dc     07 FC 05 F6 | 	mov	result2, #7
187e0     02 FD 81 F1 | 	sub	result2, _var03
187e4     FE 12 62 F0 | 	shl	arg01, result2
187e8                 | LR__2420
187e8     7F 02 86 F1 | 	sub	_var02, #127
187ec     09 FF 01 F6 | 	mov	result3, arg01
187f0     00 FB 01 F6 | 	mov	result1, _var01
187f4     01 FD 01 F6 | 	mov	result2, _var02
187f8                 | __system___float_Unpack_ret
187f8     2D 00 64 FD | 	ret
187fc                 | 
187fc                 | __system___float_Pack
187fc     00 00 06 F6 | 	mov	_var01, #0
18800     00 16 0E F2 | 	cmp	arg03, #0 wz
18804     8C 00 90 AD |  if_e	jmp	#LR__2431
18808     0B 03 92 F7 | 	encod	_var02, arg03 wc
1880c     01 02 06 C1 |  if_b	add	_var02, #1
18810     21 00 06 F6 | 	mov	_var01, #33
18814     01 01 82 F1 | 	sub	_var01, _var02
18818     00 17 62 F0 | 	shl	arg03, _var01
1881c     03 02 06 F6 | 	mov	_var02, #3
18820     00 03 82 F1 | 	sub	_var02, _var01
18824     01 15 02 F1 | 	add	arg02, _var02
18828     0A 05 02 F6 | 	mov	_var03, arg02
1882c     00 17 06 F1 | 	add	arg03, #256
18830     0B 03 02 F6 | 	mov	_var02, arg03
18834     FF 02 2E F5 | 	andn	_var02, #255 wz
18838     01 04 06 A1 |  if_e	add	_var03, #1
1883c     7F 04 06 F1 | 	add	_var03, #127
18840     FF FF 7F FF 
18844     E9 05 46 F3 | 	fges	_var03, ##-23
18848     FF 04 66 F3 | 	fles	_var03, #255
1884c     01 04 56 F2 | 	cmps	_var03, #1 wc
18850     1C 00 90 3D |  if_ae	jmp	#LR__2430
18854     01 16 46 F0 | 	shr	arg03, #1
18858     1F 02 C6 F9 | 	decod	_var02, #31
1885c     0B 03 02 F1 | 	add	_var02, arg03
18860     02 05 62 F6 | 	neg	_var03, _var03
18864     02 03 42 F0 | 	shr	_var02, _var03
18868     01 17 02 F6 | 	mov	arg03, _var02
1886c     00 04 06 F6 | 	mov	_var03, #0
18870                 | LR__2430
18870     09 FB 01 F6 | 	mov	result1, arg01
18874     1F FA 65 F0 | 	shl	result1, #31
18878     02 03 02 F6 | 	mov	_var02, _var03
1887c     17 02 66 F0 | 	shl	_var02, #23
18880     01 FB 41 F5 | 	or	result1, _var02
18884     0B 07 02 F6 | 	mov	_var04, arg03
18888     09 06 46 F0 | 	shr	_var04, #9
1888c     03 FB 41 F5 | 	or	result1, _var04
18890     04 00 90 FD | 	jmp	#__system___float_Pack_ret
18894                 | LR__2431
18894     00 FB 01 F6 | 	mov	result1, _var01
18898                 | __system___float_Pack_ret
18898     2D 00 64 FD | 	ret
1889c                 | 
1889c                 | __system___basic_print_float
1889c     05 4A 05 F6 | 	mov	COUNT_, #5
188a0     A8 00 A0 FD | 	call	#pushregs_
188a4     09 1F 02 F6 | 	mov	local01, arg01
188a8     0A 21 02 F6 | 	mov	local02, arg02
188ac     0B 23 0A F6 | 	mov	local03, arg03 wz
188b0     0C 25 02 F6 | 	mov	local04, arg04
188b4     14 00 90 5D |  if_ne	jmp	#LR__2440
188b8     23 24 0E F2 | 	cmp	local04, #35 wz
188bc     80 02 10 AF 
188c0     00 26 06 A6 |  if_e	mov	local05, ##537198592
188c4     1D 26 C6 59 |  if_ne	decod	local05, #29
188c8     13 23 02 F6 | 	mov	local03, local05
188cc                 | LR__2440
188cc     0F 13 02 F6 | 	mov	arg01, local01
188d0     C4 24 B0 FD | 	call	#__system___gettxfunc
188d4     FD 26 0A F6 | 	mov	local05, result1 wz
188d8     00 FA 05 A6 |  if_e	mov	result1, #0
188dc     13 13 02 56 |  if_ne	mov	arg01, local05
188e0     11 15 02 56 |  if_ne	mov	arg02, local03
188e4     10 17 02 56 |  if_ne	mov	arg03, local02
188e8     12 19 02 56 |  if_ne	mov	arg04, local04
188ec     64 E0 BF 5D |  if_ne	call	#__system___fmtfloat
188f0     A7 F0 03 F6 | 	mov	ptra, fp
188f4     B2 00 A0 FD | 	call	#popregs_
188f8                 | __system___basic_print_float_ret
188f8     2D 00 64 FD | 	ret
188fc                 | 
188fc                 | __system____builtin_atoi
188fc     07 4A 05 F6 | 	mov	COUNT_, #7
18900     A8 00 A0 FD | 	call	#pushregs_
18904                 | __system____builtin_atoi_enter
18904     09 1F 02 F6 | 	mov	local01, arg01
18908     0A 21 02 F6 | 	mov	local02, arg02
1890c     00 22 06 F6 | 	mov	local03, #0
18910     00 24 06 F6 | 	mov	local04, #0
18914     00 26 06 F6 | 	mov	local05, #0
18918     97 08 48 FB | 	callpa	#(@LR__2451-@LR__2450)>>2,fcache_load_ptr_
1891c                 | LR__2450
1891c     0F 29 C2 FA | 	rdbyte	local06, local01
18920     20 28 0E F2 | 	cmp	local06, #32 wz
18924     01 1E 06 A1 |  if_e	add	local01, #1
18928     F0 FF 9F AD |  if_e	jmp	#LR__2450
1892c                 | LR__2451
1892c     0F 2B C2 FA | 	rdbyte	local07, local01
18930                 | LR__2452
18930     2D 2A 0E F2 | 	cmp	local07, #45 wz
18934     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
18938     18 00 90 5D |  if_ne	jmp	#LR__2453
1893c     01 1E 06 F1 | 	add	local01, #1
18940     2D 2A 0E F2 | 	cmp	local07, #45 wz
18944     01 28 06 A6 |  if_e	mov	local06, #1
18948     14 27 C2 A2 |  if_e	subr	local05, local06
1894c     0F 2B C2 FA | 	rdbyte	local07, local01
18950     DC FF 9F FD | 	jmp	#LR__2452
18954                 | LR__2453
18954     97 48 48 FB | 	callpa	#(@LR__2461-@LR__2454)>>2,fcache_load_ptr_
18958                 | LR__2454
18958                 | LR__2455
18958     0F 2B C2 FA | 	rdbyte	local07, local01
1895c     5F 2A 0E F2 | 	cmp	local07, #95 wz
18960     01 1E 06 F1 | 	add	local01, #1
18964     F0 FF 9F AD |  if_e	jmp	#LR__2455
18968     30 2A 0E F2 | 	cmp	local07, #48 wz
1896c     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
18970     00 24 06 A6 |  if_e	mov	local04, #0
18974     60 00 90 AD |  if_e	jmp	#LR__2460
18978     31 2A 56 F2 | 	cmps	local07, #49 wc
1897c     18 00 90 CD |  if_b	jmp	#LR__2456
18980     3A 2A 56 F2 | 	cmps	local07, #58 wc
18984     15 25 02 C6 |  if_b	mov	local04, local07
18988     30 24 86 C1 |  if_b	sub	local04, #48
1898c     00 20 0E C2 |  if_b	cmp	local02, #0 wz
18990     0A 20 06 86 |  if_c_and_z	mov	local02, #10
18994     40 00 90 CD |  if_b	jmp	#LR__2459
18998                 | LR__2456
18998     0B 20 56 F2 | 	cmps	local02, #11 wc
1899c     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
189a0     14 00 90 CD |  if_b	jmp	#LR__2457
189a4     67 2A 56 F2 | 	cmps	local07, #103 wc
189a8     61 2A 86 C1 |  if_b	sub	local07, #97
189ac     0A 24 06 C6 |  if_b	mov	local04, #10
189b0     15 25 02 C1 |  if_b	add	local04, local07
189b4     20 00 90 CD |  if_b	jmp	#LR__2458
189b8                 | LR__2457
189b8     0B 20 56 F2 | 	cmps	local02, #11 wc
189bc     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
189c0     24 00 90 CD |  if_b	jmp	#LR__2462
189c4     47 2A 56 F2 | 	cmps	local07, #71 wc
189c8     41 2A 86 C1 |  if_b	sub	local07, #65
189cc     0A 24 06 C6 |  if_b	mov	local04, #10
189d0     15 25 02 C1 |  if_b	add	local04, local07
189d4     10 00 90 3D |  if_ae	jmp	#LR__2462
189d8                 | LR__2458
189d8                 | LR__2459
189d8                 | LR__2460
189d8     11 21 02 FD | 	qmul	local02, local03
189dc     18 22 62 FD | 	getqx	local03
189e0     12 23 02 F1 | 	add	local03, local04
189e4     70 FF 9F FD | 	jmp	#LR__2454
189e8                 | LR__2461
189e8                 | LR__2462
189e8     00 20 0E F2 | 	cmp	local02, #0 wz
189ec     64 00 90 5D |  if_ne	jmp	#LR__2468
189f0     78 2A 0E F2 | 	cmp	local07, #120 wz
189f4     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
189f8     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
189fc     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
18a00     14 00 90 5D |  if_ne	jmp	#LR__2463
18a04     0F 13 02 F6 | 	mov	arg01, local01
18a08     10 14 06 F6 | 	mov	arg02, #16
18a0c     EC FE BF FD | 	call	#__system____builtin_atoi
18a10     FD 22 02 F6 | 	mov	local03, result1
18a14     3C 00 90 FD | 	jmp	#LR__2467
18a18                 | LR__2463
18a18     62 2A 0E F2 | 	cmp	local07, #98 wz
18a1c     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
18a20     14 00 90 5D |  if_ne	jmp	#LR__2464
18a24     0F 13 02 F6 | 	mov	arg01, local01
18a28     02 14 06 F6 | 	mov	arg02, #2
18a2c     CC FE BF FD | 	call	#__system____builtin_atoi
18a30     FD 22 02 F6 | 	mov	local03, result1
18a34     1C 00 90 FD | 	jmp	#LR__2466
18a38                 | LR__2464
18a38     6F 2A 0E F2 | 	cmp	local07, #111 wz
18a3c     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
18a40     10 00 90 5D |  if_ne	jmp	#LR__2465
18a44     0F 13 02 F6 | 	mov	arg01, local01
18a48     08 14 06 F6 | 	mov	arg02, #8
18a4c     AC FE BF FD | 	call	#__system____builtin_atoi
18a50     FD 22 02 F6 | 	mov	local03, result1
18a54                 | LR__2465
18a54                 | LR__2466
18a54                 | LR__2467
18a54                 | LR__2468
18a54     00 26 0E F2 | 	cmp	local05, #0 wz
18a58     11 23 62 56 |  if_ne	neg	local03, local03
18a5c     11 FB 01 F6 | 	mov	result1, local03
18a60     A7 F0 03 F6 | 	mov	ptra, fp
18a64     B2 00 A0 FD | 	call	#popregs_
18a68                 | __system____builtin_atoi_ret
18a68     2D 00 64 FD | 	ret
18a6c                 | 
18a6c                 | __system____builtin_atof
18a6c     07 4A 05 F6 | 	mov	COUNT_, #7
18a70     A8 00 A0 FD | 	call	#pushregs_
18a74     09 1F 02 F6 | 	mov	local01, arg01
18a78     00 20 06 F6 | 	mov	local02, #0
18a7c     00 22 06 F6 | 	mov	local03, #0
18a80     00 24 06 F6 | 	mov	local04, #0
18a84     00 26 06 F6 | 	mov	local05, #0
18a88     97 08 48 FB | 	callpa	#(@LR__2471-@LR__2470)>>2,fcache_load_ptr_
18a8c                 | LR__2470
18a8c     0F 17 C2 FA | 	rdbyte	arg03, local01
18a90     20 16 0E F2 | 	cmp	arg03, #32 wz
18a94     01 1E 06 A1 |  if_e	add	local01, #1
18a98     F0 FF 9F AD |  if_e	jmp	#LR__2470
18a9c                 | LR__2471
18a9c     0F 29 C2 FA | 	rdbyte	local06, local01
18aa0                 | LR__2472
18aa0     2B 28 0E F2 | 	cmp	local06, #43 wz
18aa4     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
18aa8     14 00 90 5D |  if_ne	jmp	#LR__2473
18aac     2D 28 0E F2 | 	cmp	local06, #45 wz
18ab0     1F 24 E6 A4 |  if_e	bitnot	local04, #31
18ab4     01 1E 06 F1 | 	add	local01, #1
18ab8     0F 29 C2 FA | 	rdbyte	local06, local01
18abc     E0 FF 9F FD | 	jmp	#LR__2472
18ac0                 | LR__2473
18ac0                 | LR__2474
18ac0     97 08 48 FB | 	callpa	#(@LR__2476-@LR__2475)>>2,fcache_load_ptr_
18ac4                 | LR__2475
18ac4     0F 29 C2 FA | 	rdbyte	local06, local01
18ac8     5F 28 0E F2 | 	cmp	local06, #95 wz
18acc     01 1E 06 F1 | 	add	local01, #1
18ad0     F0 FF 9F AD |  if_e	jmp	#LR__2475
18ad4                 | LR__2476
18ad4     00 28 0E F2 | 	cmp	local06, #0 wz
18ad8     5C 00 90 AD |  if_e	jmp	#LR__2478
18adc     30 28 56 F2 | 	cmps	local06, #48 wc
18ae0     44 00 90 CD |  if_b	jmp	#LR__2477
18ae4     3A 28 56 F2 | 	cmps	local06, #58 wc
18ae8     3C 00 90 3D |  if_ae	jmp	#LR__2477
18aec     10 13 02 F6 | 	mov	arg01, local02
18af0     00 90 20 FF 
18af4     00 14 06 F6 | 	mov	arg02, ##1092616192
18af8     88 F7 BF FD | 	call	#__system___float_mul
18afc     FD 20 02 F6 | 	mov	local02, result1
18b00     30 28 86 F1 | 	sub	local06, #48
18b04     14 13 02 F6 | 	mov	arg01, local06
18b08     4C F4 BF FD | 	call	#__system___float_fromuns
18b0c     FD 14 02 F6 | 	mov	arg02, result1
18b10     10 13 02 F6 | 	mov	arg01, local02
18b14     74 F4 BF FD | 	call	#__system___float_add
18b18     FD 20 02 F6 | 	mov	local02, result1
18b1c     00 26 0E F2 | 	cmp	local05, #0 wz
18b20     01 22 86 51 |  if_ne	sub	local03, #1
18b24     98 FF 9F FD | 	jmp	#LR__2474
18b28                 | LR__2477
18b28     2E 28 0E F2 | 	cmp	local06, #46 wz
18b2c     00 26 0E A2 |  if_e	cmp	local05, #0 wz
18b30     01 26 06 A6 |  if_e	mov	local05, #1
18b34     88 FF 9F AD |  if_e	jmp	#LR__2474
18b38                 | LR__2478
18b38     45 28 0E F2 | 	cmp	local06, #69 wz
18b3c     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
18b40     18 00 90 5D |  if_ne	jmp	#LR__2479
18b44     0F 13 02 F6 | 	mov	arg01, local01
18b48     00 14 06 F6 | 	mov	arg02, #0
18b4c     AC FD BF FD | 	call	#__system____builtin_atoi
18b50     11 FB 01 F1 | 	add	result1, local03
18b54     FD 2A 02 F6 | 	mov	local07, result1
18b58     04 00 90 FD | 	jmp	#LR__2480
18b5c                 | LR__2479
18b5c     11 2B 02 F6 | 	mov	local07, local03
18b60                 | LR__2480
18b60     15 17 02 F6 | 	mov	arg03, local07
18b64     10 13 02 F6 | 	mov	arg01, local02
18b68     00 90 20 FF 
18b6c     00 14 06 F6 | 	mov	arg02, ##1092616192
18b70     44 04 B0 FD | 	call	#__system___float_pow_n
18b74     12 FB 61 F5 | 	xor	result1, local04
18b78     A7 F0 03 F6 | 	mov	ptra, fp
18b7c     B2 00 A0 FD | 	call	#popregs_
18b80                 | __system____builtin_atof_ret
18b80     2D 00 64 FD | 	ret
18b84                 | 
18b84                 | __system____builtin_ilogb
18b84     20 FC BF FD | 	call	#__system___float_Unpack
18b88     00 FE 0D F2 | 	cmp	result3, #0 wz
18b8c     00 00 40 AF 
18b90     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
18b94     24 00 90 AD |  if_e	jmp	#LR__2491
18b98     80 FC 0D F2 | 	cmp	result2, #128 wz
18b9c     18 00 90 5D |  if_ne	jmp	#LR__2490
18ba0     00 00 10 FF 
18ba4     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
18ba8     1E FA CD A9 |  if_e	bmask	result1, #30
18bac     0C 00 90 AD |  if_e	jmp	#LR__2491
18bb0     1F FA C5 F9 | 	decod	result1, #31
18bb4     04 00 90 FD | 	jmp	#LR__2491
18bb8                 | LR__2490
18bb8     FE FA 01 F6 | 	mov	result1, result2
18bbc                 | LR__2491
18bbc                 | __system____builtin_ilogb_ret
18bbc     2D 00 64 FD | 	ret
18bc0                 | 
18bc0                 | __system____builtin_sinf
18bc0     03 4A 05 F6 | 	mov	COUNT_, #3
18bc4     A8 00 A0 FD | 	call	#pushregs_
18bc8     09 1F 02 F6 | 	mov	local01, arg01
18bcc     66 E6 1E FF 
18bd0     CD 14 06 F6 | 	mov	arg02, ##1036831949
18bd4     01 16 06 F6 | 	mov	arg03, #1
18bd8     DC FA BF FD | 	call	#__system___float_cmp
18bdc     00 FA 55 F2 | 	cmps	result1, #0 wc
18be0     5C 00 90 3D |  if_ae	jmp	#LR__2500
18be4     0F 13 02 F6 | 	mov	arg01, local01
18be8     66 E6 5E FF 
18bec     CD 14 06 F6 | 	mov	arg02, ##-1110651699
18bf0     01 16 66 F6 | 	neg	arg03, #1
18bf4     C0 FA BF FD | 	call	#__system___float_cmp
18bf8     01 FA 55 F2 | 	cmps	result1, #1 wc
18bfc     40 00 90 CD |  if_b	jmp	#LR__2500
18c00     0F 13 02 F6 | 	mov	arg01, local01
18c04     0F 15 02 F6 | 	mov	arg02, local01
18c08     78 F6 BF FD | 	call	#__system___float_mul
18c0c     FD 12 02 F6 | 	mov	arg01, result1
18c10     0F 15 02 F6 | 	mov	arg02, local01
18c14     6C F6 BF FD | 	call	#__system___float_mul
18c18     FD 12 02 F6 | 	mov	arg01, result1
18c1c     00 60 20 FF 
18c20     00 14 06 F6 | 	mov	arg02, ##1086324736
18c24     60 F8 BF FD | 	call	#__system___float_div
18c28     FD 14 02 F6 | 	mov	arg02, result1
18c2c     0F 13 02 F6 | 	mov	arg01, local01
18c30     1F 14 E6 F4 | 	bitnot	arg02, #31
18c34     54 F3 BF FD | 	call	#__system___float_add
18c38     FD 20 02 F6 | 	mov	local02, result1
18c3c     54 00 90 FD | 	jmp	#LR__2501
18c40                 | LR__2500
18c40     0F 13 02 F6 | 	mov	arg01, local01
18c44     7C 91 26 FF 
18c48     83 15 06 F6 | 	mov	arg02, ##1294137731
18c4c     34 F6 BF FD | 	call	#__system___float_mul
18c50     FD 12 02 F6 | 	mov	arg01, result1
18c54     00 14 06 F6 | 	mov	arg02, #0
18c58     F0 FA BF FD | 	call	#__system___float_tointeger
18c5c     02 FA 65 F0 | 	shl	result1, #2
18c60     00 00 A0 FF 
18c64     FD 00 48 FD | 	qrotate	##1073741824, result1
18c68     19 12 62 FD | 	getqy	arg01
18c6c     09 13 52 F6 | 	abs	arg01, arg01 wc
18c70     1F 22 C6 C9 |  if_b	decod	local03, #31
18c74     00 22 06 36 |  if_ae	mov	local03, #0
18c78     DC F2 BF FD | 	call	#__system___float_fromuns
18c7c     11 FB 61 F5 | 	xor	result1, local03
18c80     FD 12 02 F6 | 	mov	arg01, result1
18c84     00 40 27 FF 
18c88     00 14 06 F6 | 	mov	arg02, ##1317011456
18c8c     F8 F7 BF FD | 	call	#__system___float_div
18c90     FD 20 02 F6 | 	mov	local02, result1
18c94                 | LR__2501
18c94     10 FB 01 F6 | 	mov	result1, local02
18c98     A7 F0 03 F6 | 	mov	ptra, fp
18c9c     B2 00 A0 FD | 	call	#popregs_
18ca0                 | __system____builtin_sinf_ret
18ca0     2D 00 64 FD | 	ret
18ca4                 | 
18ca4                 | __system____builtin_exp2f
18ca4     04 4A 05 F6 | 	mov	COUNT_, #4
18ca8     A8 00 A0 FD | 	call	#pushregs_
18cac     09 1F 02 F6 | 	mov	local01, arg01
18cb0     00 7F 21 FF 
18cb4     00 14 06 F6 | 	mov	arg02, ##1123942400
18cb8     01 16 66 F6 | 	neg	arg03, #1
18cbc     F8 F9 BF FD | 	call	#__system___float_cmp
18cc0     00 FA 55 F2 | 	cmps	result1, #0 wc
18cc4     00 C0 3F 3F 
18cc8     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
18ccc     DC 00 90 3D |  if_ae	jmp	#LR__2511
18cd0     0F 13 02 F6 | 	mov	arg01, local01
18cd4     00 7F 61 FF 
18cd8     00 14 06 F6 | 	mov	arg02, ##-1023541248
18cdc     01 16 06 F6 | 	mov	arg03, #1
18ce0     D4 F9 BF FD | 	call	#__system___float_cmp
18ce4     00 FA 55 F2 | 	cmps	result1, #0 wc
18ce8     00 FA 05 C6 |  if_b	mov	result1, #0
18cec     BC 00 90 CD |  if_b	jmp	#LR__2511
18cf0     0F 13 02 F6 | 	mov	arg01, local01
18cf4     00 14 06 F6 | 	mov	arg02, #0
18cf8     50 FA BF FD | 	call	#__system___float_tointeger
18cfc     FD 20 02 F6 | 	mov	local02, result1
18d00     10 13 52 F6 | 	abs	arg01, local02 wc
18d04     1F 22 C6 C9 |  if_b	decod	local03, #31
18d08     00 22 06 36 |  if_ae	mov	local03, #0
18d0c     48 F2 BF FD | 	call	#__system___float_fromuns
18d10     11 FB 61 F5 | 	xor	result1, local03
18d14     FD 14 02 F6 | 	mov	arg02, result1
18d18     0F 13 02 F6 | 	mov	arg01, local01
18d1c     1F 14 E6 F4 | 	bitnot	arg02, #31
18d20     68 F2 BF FD | 	call	#__system___float_add
18d24     FD 24 02 F6 | 	mov	local04, result1
18d28     12 13 02 F6 | 	mov	arg01, local04
18d2c     00 14 06 F6 | 	mov	arg02, #0
18d30     01 16 06 F6 | 	mov	arg03, #1
18d34     80 F9 BF FD | 	call	#__system___float_cmp
18d38     00 FA 55 F2 | 	cmps	result1, #0 wc
18d3c     18 00 90 3D |  if_ae	jmp	#LR__2510
18d40     12 13 02 F6 | 	mov	arg01, local04
18d44     00 C0 1F FF 
18d48     00 14 06 F6 | 	mov	arg02, ##1065353216
18d4c     3C F2 BF FD | 	call	#__system___float_add
18d50     FD 24 02 F6 | 	mov	local04, result1
18d54     01 20 86 F1 | 	sub	local02, #1
18d58                 | LR__2510
18d58     7F 20 06 F1 | 	add	local02, #127
18d5c     17 20 66 F0 | 	shl	local02, #23
18d60     12 13 02 F6 | 	mov	arg01, local04
18d64     00 80 26 FF 
18d68     00 14 06 F6 | 	mov	arg02, ##1291845632
18d6c     14 F5 BF FD | 	call	#__system___float_mul
18d70     FD 12 02 F6 | 	mov	arg01, result1
18d74     00 14 06 F6 | 	mov	arg02, #0
18d78     D0 F9 BF FD | 	call	#__system___float_tointeger
18d7c     FD 24 0A F6 | 	mov	local04, result1 wz
18d80     10 FB 01 A6 |  if_e	mov	result1, local02
18d84     24 00 90 AD |  if_e	jmp	#LR__2511
18d88     3E 24 26 F4 | 	bith	local04, #62
18d8c     0F 24 62 FD | 	qexp	local04
18d90     10 13 02 F6 | 	mov	arg01, local02
18d94     18 14 62 FD | 	getqx	arg02
18d98     01 14 06 F1 | 	add	arg02, #1
18d9c     01 14 46 F0 | 	shr	arg02, #1
18da0     00 80 1F FF 
18da4     00 14 06 F1 | 	add	arg02, ##1056964608
18da8     D8 F4 BF FD | 	call	#__system___float_mul
18dac                 | LR__2511
18dac     A7 F0 03 F6 | 	mov	ptra, fp
18db0     B2 00 A0 FD | 	call	#popregs_
18db4                 | __system____builtin_exp2f_ret
18db4     2D 00 64 FD | 	ret
18db8                 | 
18db8                 | __system____builtin_log2f
18db8     06 4A 05 F6 | 	mov	COUNT_, #6
18dbc     A8 00 A0 FD | 	call	#pushregs_
18dc0     09 1F 02 F6 | 	mov	local01, arg01
18dc4     09 21 0A F6 | 	mov	local02, arg01 wz
18dc8     00 00 40 5F 
18dcc     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
18dd0     00 40 00 AF 
18dd4     00 FA 65 A6 |  if_e	neg	result1, ##8388608
18dd8     08 01 90 AD |  if_e	jmp	#LR__2524
18ddc     00 20 56 F2 | 	cmps	local02, #0 wc
18de0     00 E0 3F CF 
18de4     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
18de8     F8 00 90 CD |  if_b	jmp	#LR__2524
18dec     0F 13 02 F6 | 	mov	arg01, local01
18df0     00 90 20 FF 
18df4     00 14 06 F6 | 	mov	arg02, ##1092616192
18df8     01 16 06 F6 | 	mov	arg03, #1
18dfc     B8 F8 BF FD | 	call	#__system___float_cmp
18e00     00 FA 0D F2 | 	cmp	result1, #0 wz
18e04     4D 2A 20 AF 
18e08     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
18e0c     D4 00 90 AD |  if_e	jmp	#LR__2524
18e10     0F 13 02 F6 | 	mov	arg01, local01
18e14     FC 16 20 FF 
18e18     54 14 06 F6 | 	mov	arg02, ##1076754516
18e1c     01 16 06 F6 | 	mov	arg03, #1
18e20     94 F8 BF FD | 	call	#__system___float_cmp
18e24     00 FA 0D F2 | 	cmp	result1, #0 wz
18e28     55 DC 1F AF 
18e2c     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
18e30     B0 00 90 AD |  if_e	jmp	#LR__2524
18e34     10 23 02 F6 | 	mov	local03, local02
18e38     17 22 46 F0 | 	shr	local03, #23
18e3c     11 23 E2 F8 | 	getbyte	local03, local03, #0
18e40     17 21 06 F4 | 	bitl	local02, #279
18e44     10 25 02 F6 | 	mov	local04, local02
18e48     FF 22 0E F2 | 	cmp	local03, #255 wz
18e4c     1C 00 90 5D |  if_ne	jmp	#LR__2520
18e50     00 24 0E F2 | 	cmp	local04, #0 wz
18e54     00 C0 3F 5F 
18e58     00 26 06 56 |  if_ne	mov	local05, ##2139095040
18e5c     00 E0 3F AF 
18e60     00 26 06 A6 |  if_e	mov	local05, ##2143289344
18e64     13 FB 01 F6 | 	mov	result1, local05
18e68     78 00 90 FD | 	jmp	#LR__2524
18e6c                 | LR__2520
18e6c     00 22 0E F2 | 	cmp	local03, #0 wz
18e70     17 24 26 54 |  if_ne	bith	local04, #23
18e74     7F 22 86 51 |  if_ne	sub	local03, #127
18e78     28 00 90 5D |  if_ne	jmp	#LR__2523
18e7c     00 24 0E F2 | 	cmp	local04, #0 wz
18e80     00 40 00 AF 
18e84     00 FA 65 A6 |  if_e	neg	result1, ##8388608
18e88     58 00 90 AD |  if_e	jmp	#LR__2524
18e8c     7E 22 66 F6 | 	neg	local03, #126
18e90     97 08 48 FB | 	callpa	#(@LR__2522-@LR__2521)>>2,fcache_load_ptr_
18e94                 | LR__2521
18e94     17 24 2E F4 | 	testbn	local04, #23 wz
18e98     01 24 66 A0 |  if_e	shl	local04, #1
18e9c     01 22 06 A1 |  if_e	add	local03, #1
18ea0     F0 FF 9F AD |  if_e	jmp	#LR__2521
18ea4                 | LR__2522
18ea4                 | LR__2523
18ea4     0E 24 62 FD | 	qlog	local04
18ea8     01 22 86 F1 | 	sub	local03, #1
18eac     11 13 52 F6 | 	abs	arg01, local03 wc
18eb0     1F 28 C6 C9 |  if_b	decod	local06, #31
18eb4     00 28 06 36 |  if_ae	mov	local06, #0
18eb8     18 26 62 FD | 	getqx	local05
18ebc     9B 26 06 F4 | 	bitl	local05, #155
18ec0     08 26 06 F1 | 	add	local05, #8
18ec4     04 26 46 F0 | 	shr	local05, #4
18ec8     00 C0 1F FF 
18ecc     00 26 06 F1 | 	add	local05, ##1065353216
18ed0     84 F0 BF FD | 	call	#__system___float_fromuns
18ed4     14 FB 61 F5 | 	xor	result1, local06
18ed8     FD 14 02 F6 | 	mov	arg02, result1
18edc     13 13 02 F6 | 	mov	arg01, local05
18ee0     A8 F0 BF FD | 	call	#__system___float_add
18ee4                 | LR__2524
18ee4     A7 F0 03 F6 | 	mov	ptra, fp
18ee8     B2 00 A0 FD | 	call	#popregs_
18eec                 | __system____builtin_log2f_ret
18eec     2D 00 64 FD | 	ret
18ef0                 | 
18ef0                 | __system____builtin_powf
18ef0     04 4A 05 F6 | 	mov	COUNT_, #4
18ef4     A8 00 A0 FD | 	call	#pushregs_
18ef8     09 1F 02 F6 | 	mov	local01, arg01
18efc     0A 21 02 F6 | 	mov	local02, arg02
18f00     10 13 02 F6 | 	mov	arg01, local02
18f04     00 14 06 F6 | 	mov	arg02, #0
18f08     40 F8 BF FD | 	call	#__system___float_tointeger
18f0c     FD 22 02 F6 | 	mov	local03, result1
18f10     11 13 52 F6 | 	abs	arg01, local03 wc
18f14     1F 24 C6 C9 |  if_b	decod	local04, #31
18f18     00 24 06 36 |  if_ae	mov	local04, #0
18f1c     38 F0 BF FD | 	call	#__system___float_fromuns
18f20     12 FB 61 F5 | 	xor	result1, local04
18f24     FD 12 02 F6 | 	mov	arg01, result1
18f28     10 15 02 F6 | 	mov	arg02, local02
18f2c     01 16 06 F6 | 	mov	arg03, #1
18f30     84 F7 BF FD | 	call	#__system___float_cmp
18f34     00 FA 0D F2 | 	cmp	result1, #0 wz
18f38     18 00 90 5D |  if_ne	jmp	#LR__2530
18f3c     00 C0 1F FF 
18f40     00 12 06 F6 | 	mov	arg01, ##1065353216
18f44     0F 15 02 F6 | 	mov	arg02, local01
18f48     11 17 02 F6 | 	mov	arg03, local03
18f4c     68 00 B0 FD | 	call	#__system___float_pow_n
18f50     58 00 90 FD | 	jmp	#LR__2531
18f54                 | LR__2530
18f54     0F 13 02 F6 | 	mov	arg01, local01
18f58     00 14 06 F6 | 	mov	arg02, #0
18f5c     01 16 06 F6 | 	mov	arg03, #1
18f60     54 F7 BF FD | 	call	#__system___float_cmp
18f64     00 FA 55 F2 | 	cmps	result1, #0 wc
18f68     00 E0 3F CF 
18f6c     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
18f70     38 00 90 CD |  if_b	jmp	#LR__2531
18f74     0F 13 02 F6 | 	mov	arg01, local01
18f78     00 14 06 F6 | 	mov	arg02, #0
18f7c     01 16 06 F6 | 	mov	arg03, #1
18f80     34 F7 BF FD | 	call	#__system___float_cmp
18f84     00 FA 0D F2 | 	cmp	result1, #0 wz
18f88     00 FA 05 A6 |  if_e	mov	result1, #0
18f8c     1C 00 90 AD |  if_e	jmp	#LR__2531
18f90     0F 13 02 F6 | 	mov	arg01, local01
18f94     20 FE BF FD | 	call	#__system____builtin_log2f
18f98     FD 12 02 F6 | 	mov	arg01, result1
18f9c     10 15 02 F6 | 	mov	arg02, local02
18fa0     E0 F2 BF FD | 	call	#__system___float_mul
18fa4     FD 12 02 F6 | 	mov	arg01, result1
18fa8     F8 FC BF FD | 	call	#__system____builtin_exp2f
18fac                 | LR__2531
18fac     A7 F0 03 F6 | 	mov	ptra, fp
18fb0     B2 00 A0 FD | 	call	#popregs_
18fb4                 | __system____builtin_powf_ret
18fb4     2D 00 64 FD | 	ret
18fb8                 | 
18fb8                 | __system___float_pow_n
18fb8     05 4A 05 F6 | 	mov	COUNT_, #5
18fbc     A8 00 A0 FD | 	call	#pushregs_
18fc0     09 1F 02 F6 | 	mov	local01, arg01
18fc4     0A 21 02 F6 | 	mov	local02, arg02
18fc8     0B 23 02 F6 | 	mov	local03, arg03
18fcc     00 22 56 F2 | 	cmps	local03, #0 wc
18fd0     18 00 90 3D |  if_ae	jmp	#LR__2540
18fd4     01 24 06 F6 | 	mov	local04, #1
18fd8     11 23 62 F6 | 	neg	local03, local03
18fdc     00 22 56 F2 | 	cmps	local03, #0 wc
18fe0     00 FA 05 C6 |  if_b	mov	result1, #0
18fe4     94 00 90 CD |  if_b	jmp	#LR__2548
18fe8     04 00 90 FD | 	jmp	#LR__2541
18fec                 | LR__2540
18fec     00 24 06 F6 | 	mov	local04, #0
18ff0                 | LR__2541
18ff0     00 C0 1F FF 
18ff4     00 26 06 F6 | 	mov	local05, ##1065353216
18ff8                 | LR__2542
18ff8     01 22 56 F2 | 	cmps	local03, #1 wc
18ffc     30 00 90 CD |  if_b	jmp	#LR__2544
19000     01 22 CE F7 | 	test	local03, #1 wz
19004     10 00 90 AD |  if_e	jmp	#LR__2543
19008     13 13 02 F6 | 	mov	arg01, local05
1900c     10 15 02 F6 | 	mov	arg02, local02
19010     70 F2 BF FD | 	call	#__system___float_mul
19014     FD 26 02 F6 | 	mov	local05, result1
19018                 | LR__2543
19018     01 22 C6 F0 | 	sar	local03, #1
1901c     10 13 02 F6 | 	mov	arg01, local02
19020     10 15 02 F6 | 	mov	arg02, local02
19024     5C F2 BF FD | 	call	#__system___float_mul
19028     FD 20 02 F6 | 	mov	local02, result1
1902c     C8 FF 9F FD | 	jmp	#LR__2542
19030                 | LR__2544
19030     00 24 0E F2 | 	cmp	local04, #0 wz
19034     14 00 90 AD |  if_e	jmp	#LR__2545
19038     0F 13 02 F6 | 	mov	arg01, local01
1903c     13 15 02 F6 | 	mov	arg02, local05
19040     44 F4 BF FD | 	call	#__system___float_div
19044     FD 26 02 F6 | 	mov	local05, result1
19048     2C 00 90 FD | 	jmp	#LR__2547
1904c                 | LR__2545
1904c     0F 13 02 F6 | 	mov	arg01, local01
19050     00 C0 1F FF 
19054     00 14 06 F6 | 	mov	arg02, ##1065353216
19058     01 16 06 F6 | 	mov	arg03, #1
1905c     58 F6 BF FD | 	call	#__system___float_cmp
19060     00 FA 0D F2 | 	cmp	result1, #0 wz
19064     10 00 90 AD |  if_e	jmp	#LR__2546
19068     0F 13 02 F6 | 	mov	arg01, local01
1906c     13 15 02 F6 | 	mov	arg02, local05
19070     10 F2 BF FD | 	call	#__system___float_mul
19074     FD 26 02 F6 | 	mov	local05, result1
19078                 | LR__2546
19078                 | LR__2547
19078     13 FB 01 F6 | 	mov	result1, local05
1907c                 | LR__2548
1907c     A7 F0 03 F6 | 	mov	ptra, fp
19080     B2 00 A0 FD | 	call	#popregs_
19084                 | __system___float_pow_n_ret
19084     2D 00 64 FD | 	ret
19088                 | 
19088                 | __system___gc_ptrs
19088     EC 00 02 F6 | 	mov	_var01, __heap_ptr
1908c     00 03 02 F6 | 	mov	_var02, _var01
19090     F3 01 00 FF 
19094     F8 03 06 F1 | 	add	_var02, ##255992
19098     00 FD 09 FB | 	rdlong	result2, _var01 wz
1909c     74 00 90 5D |  if_ne	jmp	#LR__2550
190a0     01 FD 01 F6 | 	mov	result2, _var02
190a4     00 FD 81 F1 | 	sub	result2, _var01
190a8     00 03 58 FC | 	wrword	#1, _var01
190ac     00 FB 01 F6 | 	mov	result1, _var01
190b0     02 FA 05 F1 | 	add	result1, #2
190b4     36 00 80 FF 
190b8     FD 20 59 FC | 	wrword	##27792, result1
190bc     00 FB 01 F6 | 	mov	result1, _var01
190c0     04 FA 05 F1 | 	add	result1, #4
190c4     FD 00 58 FC | 	wrword	#0, result1
190c8     00 FB 01 F6 | 	mov	result1, _var01
190cc     06 FA 05 F1 | 	add	result1, #6
190d0     FD 02 58 FC | 	wrword	#1, result1
190d4     10 00 06 F1 | 	add	_var01, #16
190d8     FE FC 51 F6 | 	abs	result2, result2 wc
190dc     04 FC 45 F0 | 	shr	result2, #4
190e0     FE FC 81 F6 | 	negc	result2, result2
190e4     00 FD 51 FC | 	wrword	result2, _var01
190e8     00 FD 01 F6 | 	mov	result2, _var01
190ec     02 FC 05 F1 | 	add	result2, #2
190f0     36 00 80 FF 
190f4     FE 1E 59 FC | 	wrword	##27791, result2
190f8     00 FD 01 F6 | 	mov	result2, _var01
190fc     04 FC 05 F1 | 	add	result2, #4
19100     FE 00 58 FC | 	wrword	#0, result2
19104     00 FD 01 F6 | 	mov	result2, _var01
19108     06 FC 05 F1 | 	add	result2, #6
1910c     FE 00 58 FC | 	wrword	#0, result2
19110     10 00 86 F1 | 	sub	_var01, #16
19114                 | LR__2550
19114     00 FB 01 F6 | 	mov	result1, _var01
19118     01 FD 01 F6 | 	mov	result2, _var02
1911c                 | __system___gc_ptrs_ret
1911c     2D 00 64 FD | 	ret
19120                 | 
19120                 | __system___gc_tryalloc
19120     0B 4A 05 F6 | 	mov	COUNT_, #11
19124     A8 00 A0 FD | 	call	#pushregs_
19128     09 1F 02 F6 | 	mov	local01, arg01
1912c     0A 21 02 F6 | 	mov	local02, arg02
19130     54 FF BF FD | 	call	#__system___gc_ptrs
19134     FD 22 02 F6 | 	mov	local03, result1
19138     FE 24 02 F6 | 	mov	local04, result2
1913c     11 27 02 F6 | 	mov	local05, local03
19140     00 28 06 F6 | 	mov	local06, #0
19144     97 1E 48 FB | 	callpa	#(@LR__2561-@LR__2560)>>2,fcache_load_ptr_
19148                 | LR__2560
19148     13 2B 02 F6 | 	mov	local07, local05
1914c     06 26 06 F1 | 	add	local05, #6
19150     13 15 EA FA | 	rdword	arg02, local05 wz
19154     11 13 02 F6 | 	mov	arg01, local03
19158     00 FA 05 A6 |  if_e	mov	result1, #0
1915c     04 14 66 50 |  if_ne	shl	arg02, #4
19160     0A 13 02 51 |  if_ne	add	arg01, arg02
19164     09 FB 01 56 |  if_ne	mov	result1, arg01
19168     FD 26 0A F6 | 	mov	local05, result1 wz
1916c     13 29 E2 5A |  if_ne	rdword	local06, local05
19170     00 26 0E F2 | 	cmp	local05, #0 wz
19174     12 27 52 52 |  if_ne	cmps	local05, local04 wc
19178     08 00 90 1D |  if_a	jmp	#LR__2562
1917c     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
19180     C4 FF 9F 1D |  if_a	jmp	#LR__2560
19184                 | LR__2561
19184                 | LR__2562
19184     00 26 0E F2 | 	cmp	local05, #0 wz
19188     13 FB 01 A6 |  if_e	mov	result1, local05
1918c     3C 01 90 AD |  if_e	jmp	#LR__2565
19190     13 FD 01 F6 | 	mov	result2, local05
19194     06 FC 05 F1 | 	add	result2, #6
19198     FE 2C E2 FA | 	rdword	local08, result2
1919c     14 1F 52 F2 | 	cmps	local01, local06 wc
191a0     C0 00 90 3D |  if_ae	jmp	#LR__2564
191a4     13 1F 52 FC | 	wrword	local01, local05
191a8     13 13 02 F6 | 	mov	arg01, local05
191ac     0F 2D 02 F6 | 	mov	local08, local01
191b0     04 2C 66 F0 | 	shl	local08, #4
191b4     16 13 02 F1 | 	add	arg01, local08
191b8     0F 29 82 F1 | 	sub	local06, local01
191bc     09 29 52 FC | 	wrword	local06, arg01
191c0     09 2D 02 F6 | 	mov	local08, arg01
191c4     02 2C 06 F1 | 	add	local08, #2
191c8     36 00 80 FF 
191cc     16 1F 59 FC | 	wrword	##27791, local08
191d0     13 15 0A F6 | 	mov	arg02, local05 wz
191d4     00 FA 05 A6 |  if_e	mov	result1, #0
191d8     11 15 82 51 |  if_ne	sub	arg02, local03
191dc     04 14 46 50 |  if_ne	shr	arg02, #4
191e0     0A FB 01 56 |  if_ne	mov	result1, arg02
191e4     09 2D 02 F6 | 	mov	local08, arg01
191e8     04 2C 06 F1 | 	add	local08, #4
191ec     16 FB 51 FC | 	wrword	result1, local08
191f0     13 2D 02 F6 | 	mov	local08, local05
191f4     06 2C 06 F1 | 	add	local08, #6
191f8     09 15 02 F6 | 	mov	arg02, arg01
191fc     16 2D E2 FA | 	rdword	local08, local08
19200     06 14 06 F1 | 	add	arg02, #6
19204     0A 2D 52 FC | 	wrword	local08, arg02
19208     09 2F 02 F6 | 	mov	local09, arg01
1920c     17 15 0A F6 | 	mov	arg02, local09 wz
19210     00 FA 05 A6 |  if_e	mov	result1, #0
19214     11 15 82 51 |  if_ne	sub	arg02, local03
19218     04 14 46 50 |  if_ne	shr	arg02, #4
1921c     0A FB 01 56 |  if_ne	mov	result1, arg02
19220     FD 2C 02 F6 | 	mov	local08, result1
19224     09 31 EA FA | 	rdword	local10, arg01 wz
19228     00 FA 05 A6 |  if_e	mov	result1, #0
1922c     04 30 66 50 |  if_ne	shl	local10, #4
19230     18 13 02 51 |  if_ne	add	arg01, local10
19234     09 FB 01 56 |  if_ne	mov	result1, arg01
19238     FD 32 0A F6 | 	mov	local11, result1 wz
1923c     24 00 90 AD |  if_e	jmp	#LR__2563
19240     12 33 52 F2 | 	cmps	local11, local04 wc
19244     1C 00 90 3D |  if_ae	jmp	#LR__2563
19248     17 15 0A F6 | 	mov	arg02, local09 wz
1924c     00 FA 05 A6 |  if_e	mov	result1, #0
19250     11 15 82 51 |  if_ne	sub	arg02, local03
19254     04 14 46 50 |  if_ne	shr	arg02, #4
19258     0A FB 01 56 |  if_ne	mov	result1, arg02
1925c     04 32 06 F1 | 	add	local11, #4
19260     19 FB 51 FC | 	wrword	result1, local11
19264                 | LR__2563
19264                 | LR__2564
19264     06 2A 06 F1 | 	add	local07, #6
19268     15 2D 52 FC | 	wrword	local08, local07
1926c     36 00 00 FF 
19270     80 2E 06 F6 | 	mov	local09, ##27776
19274     10 2F 42 F5 | 	or	local09, local02
19278     00 FA 05 F6 | 	mov	result1, #0
1927c     01 FA 61 FD | 	cogid	result1
19280     FD 2E 42 F5 | 	or	local09, result1
19284     13 33 02 F6 | 	mov	local11, local05
19288     02 32 06 F1 | 	add	local11, #2
1928c     19 2F 52 FC | 	wrword	local09, local11
19290     11 2F 02 F6 | 	mov	local09, local03
19294     08 2E 06 F1 | 	add	local09, #8
19298     13 33 02 F6 | 	mov	local11, local05
1929c     17 2F E2 FA | 	rdword	local09, local09
192a0     06 32 06 F1 | 	add	local11, #6
192a4     19 2F 52 FC | 	wrword	local09, local11
192a8     13 15 0A F6 | 	mov	arg02, local05 wz
192ac     00 FA 05 A6 |  if_e	mov	result1, #0
192b0     11 15 82 51 |  if_ne	sub	arg02, local03
192b4     04 14 46 50 |  if_ne	shr	arg02, #4
192b8     0A FB 01 56 |  if_ne	mov	result1, arg02
192bc     08 22 06 F1 | 	add	local03, #8
192c0     11 FB 51 FC | 	wrword	result1, local03
192c4     08 26 06 F1 | 	add	local05, #8
192c8     13 FB 01 F6 | 	mov	result1, local05
192cc                 | LR__2565
192cc     A7 F0 03 F6 | 	mov	ptra, fp
192d0     B2 00 A0 FD | 	call	#popregs_
192d4                 | __system___gc_tryalloc_ret
192d4     2D 00 64 FD | 	ret
192d8                 | 
192d8                 | __system___gc_alloc_managed
192d8     01 4A 05 F6 | 	mov	COUNT_, #1
192dc     A8 00 A0 FD | 	call	#pushregs_
192e0     09 1F 02 F6 | 	mov	local01, arg01
192e4     00 14 06 F6 | 	mov	arg02, #0
192e8     1C 00 B0 FD | 	call	#__system___gc_doalloc
192ec     FD 14 0A F6 | 	mov	arg02, result1 wz
192f0     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
192f4     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
192f8     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
192fc     A7 F0 03 F6 | 	mov	ptra, fp
19300     B2 00 A0 FD | 	call	#popregs_
19304                 | __system___gc_alloc_managed_ret
19304     2D 00 64 FD | 	ret
19308                 | 
19308                 | __system___gc_doalloc
19308     06 4A 05 F6 | 	mov	COUNT_, #6
1930c     A8 00 A0 FD | 	call	#pushregs_
19310     09 1F 0A F6 | 	mov	local01, arg01 wz
19314     0A 21 02 F6 | 	mov	local02, arg02
19318     00 FA 05 A6 |  if_e	mov	result1, #0
1931c     8C 00 90 AD |  if_e	jmp	#LR__2577
19320     17 1E 06 F1 | 	add	local01, #23
19324     0F 1E 26 F5 | 	andn	local01, #15
19328     04 1E 46 F0 | 	shr	local01, #4
1932c     1C E8 05 F1 | 	add	ptr___system__dat__, #28
19330     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
19334     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
19338     34 C5 BF FD | 	call	#__system___lockmem
1933c     0F 13 02 F6 | 	mov	arg01, local01
19340     10 15 02 F6 | 	mov	arg02, local02
19344     D8 FD BF FD | 	call	#__system___gc_tryalloc
19348     FD 22 0A F6 | 	mov	local03, result1 wz
1934c     14 00 90 5D |  if_ne	jmp	#LR__2570
19350     70 03 B0 FD | 	call	#__system___gc_docollect
19354     0F 13 02 F6 | 	mov	arg01, local01
19358     10 15 02 F6 | 	mov	arg02, local02
1935c     C0 FD BF FD | 	call	#__system___gc_tryalloc
19360     FD 22 02 F6 | 	mov	local03, result1
19364                 | LR__2570
19364     1C E8 05 F1 | 	add	ptr___system__dat__, #28
19368     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1936c     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
19370     09 01 68 FC | 	wrlong	#0, arg01
19374     00 22 0E F2 | 	cmp	local03, #0 wz
19378     2C 00 90 AD |  if_e	jmp	#LR__2576
1937c     04 1E 66 F0 | 	shl	local01, #4
19380     08 1E 86 F1 | 	sub	local01, #8
19384     0F 25 52 F6 | 	abs	local04, local01 wc
19388     02 24 46 F0 | 	shr	local04, #2
1938c     12 27 8A F6 | 	negc	local05, local04 wz
19390     11 29 02 F6 | 	mov	local06, local03
19394     10 00 90 AD |  if_e	jmp	#LR__2575
19398     97 06 48 FB | 	callpa	#(@LR__2573-@LR__2571)>>2,fcache_load_ptr_
1939c                 | LR__2571
1939c     13 05 D8 FC | 	rep	@LR__2574, local05
193a0                 | LR__2572
193a0     14 01 68 FC | 	wrlong	#0, local06
193a4     04 28 06 F1 | 	add	local06, #4
193a8                 | LR__2573
193a8                 | LR__2574
193a8                 | LR__2575
193a8                 | LR__2576
193a8     11 FB 01 F6 | 	mov	result1, local03
193ac                 | LR__2577
193ac     A7 F0 03 F6 | 	mov	ptra, fp
193b0     B2 00 A0 FD | 	call	#popregs_
193b4                 | __system___gc_doalloc_ret
193b4     2D 00 64 FD | 	ret
193b8                 | 
193b8                 | __system___gc_isvalidptr
193b8     F8 16 06 F4 | 	bitl	arg03, #248
193bc     08 16 86 F1 | 	sub	arg03, #8
193c0     09 17 52 F2 | 	cmps	arg03, arg01 wc
193c4     08 00 90 CD |  if_b	jmp	#LR__2580
193c8     0A 17 52 F2 | 	cmps	arg03, arg02 wc
193cc     08 00 90 CD |  if_b	jmp	#LR__2581
193d0                 | LR__2580
193d0     00 FA 05 F6 | 	mov	result1, #0
193d4     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
193d8                 | LR__2581
193d8     0B 01 02 F6 | 	mov	_var01, arg03
193dc     09 01 62 F5 | 	xor	_var01, arg01
193e0     0F 00 CE F7 | 	test	_var01, #15 wz
193e4     00 FA 05 56 |  if_ne	mov	result1, #0
193e8     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
193ec     0B 01 02 F6 | 	mov	_var01, arg03
193f0     02 00 06 F1 | 	add	_var01, #2
193f4     00 01 E2 FA | 	rdword	_var01, _var01
193f8     7F 00 00 FF 
193fc     C0 01 06 F5 | 	and	_var01, ##65472
19400     36 00 00 FF 
19404     80 00 0E F2 | 	cmp	_var01, ##27776 wz
19408     00 FA 05 56 |  if_ne	mov	result1, #0
1940c     0B FB 01 A6 |  if_e	mov	result1, arg03
19410                 | __system___gc_isvalidptr_ret
19410     2D 00 64 FD | 	ret
19414                 | 
19414                 | __system___gc_free
19414     09 17 02 F6 | 	mov	arg03, arg01
19418     6C FC BF FD | 	call	#__system___gc_ptrs
1941c     FD 12 02 F6 | 	mov	arg01, result1
19420     FE 14 02 F6 | 	mov	arg02, result2
19424     90 FF BF FD | 	call	#__system___gc_isvalidptr
19428     FD 14 0A F6 | 	mov	arg02, result1 wz
1942c     28 00 90 AD |  if_e	jmp	#LR__2590
19430     1C E8 05 F1 | 	add	ptr___system__dat__, #28
19434     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
19438     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1943c     30 C4 BF FD | 	call	#__system___lockmem
19440     0A 13 02 F6 | 	mov	arg01, arg02
19444     14 00 B0 FD | 	call	#__system___gc_dofree
19448     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1944c     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
19450     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
19454     09 01 68 FC | 	wrlong	#0, arg01
19458                 | LR__2590
19458                 | __system___gc_free_ret
19458     2D 00 64 FD | 	ret
1945c                 | 
1945c                 | __system___gc_dofree
1945c     06 4A 05 F6 | 	mov	COUNT_, #6
19460     A8 00 A0 FD | 	call	#pushregs_
19464     09 1F 02 F6 | 	mov	local01, arg01
19468     1C FC BF FD | 	call	#__system___gc_ptrs
1946c     FD 20 02 F6 | 	mov	local02, result1
19470     FE 22 02 F6 | 	mov	local03, result2
19474     0F 15 02 F6 | 	mov	arg02, local01
19478     02 14 06 F1 | 	add	arg02, #2
1947c     36 00 80 FF 
19480     0A 1F 59 FC | 	wrword	##27791, arg02
19484     0F 25 02 F6 | 	mov	local04, local01
19488     0F 13 02 F6 | 	mov	arg01, local01
1948c     09 27 EA FA | 	rdword	local05, arg01 wz
19490     00 FA 05 A6 |  if_e	mov	result1, #0
19494     04 26 66 50 |  if_ne	shl	local05, #4
19498     13 13 02 51 |  if_ne	add	arg01, local05
1949c     09 FB 01 56 |  if_ne	mov	result1, arg01
194a0     FD 28 02 F6 | 	mov	local06, result1
194a4     97 24 48 FB | 	callpa	#(@LR__2601-@LR__2600)>>2,fcache_load_ptr_
194a8                 | LR__2600
194a8     04 24 06 F1 | 	add	local04, #4
194ac     12 15 EA FA | 	rdword	arg02, local04 wz
194b0     10 13 02 F6 | 	mov	arg01, local02
194b4     00 FA 05 A6 |  if_e	mov	result1, #0
194b8     04 14 66 50 |  if_ne	shl	arg02, #4
194bc     0A 13 02 51 |  if_ne	add	arg01, arg02
194c0     09 FB 01 56 |  if_ne	mov	result1, arg01
194c4     FD 24 0A F6 | 	mov	local04, result1 wz
194c8     24 00 90 AD |  if_e	jmp	#LR__2602
194cc     12 13 02 F6 | 	mov	arg01, local04
194d0     00 FA 05 F6 | 	mov	result1, #0
194d4     02 12 06 F1 | 	add	arg01, #2
194d8     09 13 E2 FA | 	rdword	arg01, arg01
194dc     36 00 00 FF 
194e0     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
194e4     01 FA 65 A6 |  if_e	neg	result1, #1
194e8     00 FA 0D F2 | 	cmp	result1, #0 wz
194ec     B8 FF 9F AD |  if_e	jmp	#LR__2600
194f0                 | LR__2601
194f0                 | LR__2602
194f0     00 24 0E F2 | 	cmp	local04, #0 wz
194f4     10 25 02 A6 |  if_e	mov	local04, local02
194f8     12 15 02 F6 | 	mov	arg02, local04
194fc     06 14 06 F1 | 	add	arg02, #6
19500     0F 13 02 F6 | 	mov	arg01, local01
19504     0A 15 E2 FA | 	rdword	arg02, arg02
19508     06 12 06 F1 | 	add	arg01, #6
1950c     09 15 52 FC | 	wrword	arg02, arg01
19510     0F 15 0A F6 | 	mov	arg02, local01 wz
19514     00 FA 05 A6 |  if_e	mov	result1, #0
19518     10 15 82 51 |  if_ne	sub	arg02, local02
1951c     04 14 46 50 |  if_ne	shr	arg02, #4
19520     0A FB 01 56 |  if_ne	mov	result1, arg02
19524     12 15 02 F6 | 	mov	arg02, local04
19528     06 14 06 F1 | 	add	arg02, #6
1952c     0A FB 51 FC | 	wrword	result1, arg02
19530     10 25 0A F2 | 	cmp	local04, local02 wz
19534     A4 00 90 AD |  if_e	jmp	#LR__2605
19538     12 13 02 F6 | 	mov	arg01, local04
1953c     09 27 EA FA | 	rdword	local05, arg01 wz
19540     00 FA 05 A6 |  if_e	mov	result1, #0
19544     04 26 66 50 |  if_ne	shl	local05, #4
19548     13 13 02 51 |  if_ne	add	arg01, local05
1954c     09 FB 01 56 |  if_ne	mov	result1, arg01
19550     0F FB 09 F2 | 	cmp	result1, local01 wz
19554     84 00 90 5D |  if_ne	jmp	#LR__2604
19558     12 29 E2 FA | 	rdword	local06, local04
1955c     0F 15 E2 FA | 	rdword	arg02, local01
19560     0A 29 02 F1 | 	add	local06, arg02
19564     12 29 52 FC | 	wrword	local06, local04
19568     0F 29 02 F6 | 	mov	local06, local01
1956c     02 28 06 F1 | 	add	local06, #2
19570     14 01 58 FC | 	wrword	#0, local06
19574     0F 13 02 F6 | 	mov	arg01, local01
19578     09 27 EA FA | 	rdword	local05, arg01 wz
1957c     00 FA 05 A6 |  if_e	mov	result1, #0
19580     04 26 66 50 |  if_ne	shl	local05, #4
19584     13 13 02 51 |  if_ne	add	arg01, local05
19588     09 FB 01 56 |  if_ne	mov	result1, arg01
1958c     FD 28 02 F6 | 	mov	local06, result1
19590     11 29 52 F2 | 	cmps	local06, local03 wc
19594     20 00 90 3D |  if_ae	jmp	#LR__2603
19598     12 15 0A F6 | 	mov	arg02, local04 wz
1959c     00 FA 05 A6 |  if_e	mov	result1, #0
195a0     10 15 82 51 |  if_ne	sub	arg02, local02
195a4     04 14 46 50 |  if_ne	shr	arg02, #4
195a8     0A FB 01 56 |  if_ne	mov	result1, arg02
195ac     14 15 02 F6 | 	mov	arg02, local06
195b0     04 14 06 F1 | 	add	arg02, #4
195b4     0A FB 51 FC | 	wrword	result1, arg02
195b8                 | LR__2603
195b8     0F 15 02 F6 | 	mov	arg02, local01
195bc     06 14 06 F1 | 	add	arg02, #6
195c0     12 FD 01 F6 | 	mov	result2, local04
195c4     0A 15 E2 FA | 	rdword	arg02, arg02
195c8     06 FC 05 F1 | 	add	result2, #6
195cc     FE 14 52 FC | 	wrword	arg02, result2
195d0     06 1E 06 F1 | 	add	local01, #6
195d4     0F 01 58 FC | 	wrword	#0, local01
195d8     12 1F 02 F6 | 	mov	local01, local04
195dc                 | LR__2604
195dc                 | LR__2605
195dc     0F 13 02 F6 | 	mov	arg01, local01
195e0     09 27 EA FA | 	rdword	local05, arg01 wz
195e4     00 FA 05 A6 |  if_e	mov	result1, #0
195e8     04 26 66 50 |  if_ne	shl	local05, #4
195ec     13 13 02 51 |  if_ne	add	arg01, local05
195f0     09 FB 01 56 |  if_ne	mov	result1, arg01
195f4     FD 14 0A F6 | 	mov	arg02, result1 wz
195f8     B8 00 90 AD |  if_e	jmp	#LR__2607
195fc     11 15 52 F2 | 	cmps	arg02, local03 wc
19600     B0 00 90 3D |  if_ae	jmp	#LR__2607
19604     0A 13 02 F6 | 	mov	arg01, arg02
19608     00 FA 05 F6 | 	mov	result1, #0
1960c     02 12 06 F1 | 	add	arg01, #2
19610     09 13 E2 FA | 	rdword	arg01, arg01
19614     36 00 00 FF 
19618     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1961c     01 FA 65 A6 |  if_e	neg	result1, #1
19620     00 FA 0D F2 | 	cmp	result1, #0 wz
19624     8C 00 90 AD |  if_e	jmp	#LR__2607
19628     0F 25 02 F6 | 	mov	local04, local01
1962c     12 29 E2 FA | 	rdword	local06, local04
19630     0A 13 02 F6 | 	mov	arg01, arg02
19634     09 1F E2 FA | 	rdword	local01, arg01
19638     0F 29 02 F1 | 	add	local06, local01
1963c     12 29 52 FC | 	wrword	local06, local04
19640     09 29 02 F6 | 	mov	local06, arg01
19644     06 28 06 F1 | 	add	local06, #6
19648     12 1F 02 F6 | 	mov	local01, local04
1964c     14 29 E2 FA | 	rdword	local06, local06
19650     06 1E 06 F1 | 	add	local01, #6
19654     0F 29 52 FC | 	wrword	local06, local01
19658     09 29 02 F6 | 	mov	local06, arg01
1965c     02 28 06 F1 | 	add	local06, #2
19660     14 55 59 FC | 	wrword	#170, local06
19664     09 29 02 F6 | 	mov	local06, arg01
19668     06 28 06 F1 | 	add	local06, #6
1966c     14 01 58 FC | 	wrword	#0, local06
19670     09 27 EA FA | 	rdword	local05, arg01 wz
19674     00 FA 05 A6 |  if_e	mov	result1, #0
19678     04 26 66 50 |  if_ne	shl	local05, #4
1967c     13 13 02 51 |  if_ne	add	arg01, local05
19680     09 FB 01 56 |  if_ne	mov	result1, arg01
19684     FD 28 0A F6 | 	mov	local06, result1 wz
19688     28 00 90 AD |  if_e	jmp	#LR__2606
1968c     11 29 52 F2 | 	cmps	local06, local03 wc
19690     20 00 90 3D |  if_ae	jmp	#LR__2606
19694     12 15 0A F6 | 	mov	arg02, local04 wz
19698     00 FA 05 A6 |  if_e	mov	result1, #0
1969c     10 15 82 51 |  if_ne	sub	arg02, local02
196a0     04 14 46 50 |  if_ne	shr	arg02, #4
196a4     0A FB 01 56 |  if_ne	mov	result1, arg02
196a8     14 25 02 F6 | 	mov	local04, local06
196ac     04 24 06 F1 | 	add	local04, #4
196b0     12 FB 51 FC | 	wrword	result1, local04
196b4                 | LR__2606
196b4                 | LR__2607
196b4     14 FB 01 F6 | 	mov	result1, local06
196b8     A7 F0 03 F6 | 	mov	ptra, fp
196bc     B2 00 A0 FD | 	call	#popregs_
196c0                 | __system___gc_dofree_ret
196c0     2D 00 64 FD | 	ret
196c4                 | 
196c4                 | __system___gc_docollect
196c4     05 4A 05 F6 | 	mov	COUNT_, #5
196c8     A8 00 A0 FD | 	call	#pushregs_
196cc     B8 F9 BF FD | 	call	#__system___gc_ptrs
196d0     FE 1E 02 F6 | 	mov	local01, result2
196d4     FD 20 02 F6 | 	mov	local02, result1
196d8     10 13 02 F6 | 	mov	arg01, local02
196dc     09 23 EA FA | 	rdword	local03, arg01 wz
196e0     00 FA 05 A6 |  if_e	mov	result1, #0
196e4     04 22 66 50 |  if_ne	shl	local03, #4
196e8     11 13 02 51 |  if_ne	add	arg01, local03
196ec     09 FB 01 56 |  if_ne	mov	result1, arg01
196f0     FD 24 0A F6 | 	mov	local04, result1 wz
196f4     00 FA 05 F6 | 	mov	result1, #0
196f8     01 FA 61 FD | 	cogid	result1
196fc     FD 26 02 F6 | 	mov	local05, result1
19700     48 00 90 AD |  if_e	jmp	#LR__2612
19704     97 22 48 FB | 	callpa	#(@LR__2611-@LR__2610)>>2,fcache_load_ptr_
19708                 | LR__2610
19708     0F 25 52 F2 | 	cmps	local04, local01 wc
1970c     3C 00 90 3D |  if_ae	jmp	#LR__2612
19710     12 15 02 F6 | 	mov	arg02, local04
19714     02 14 06 F1 | 	add	arg02, #2
19718     0A 15 E2 FA | 	rdword	arg02, arg02
1971c     20 14 26 F5 | 	andn	arg02, #32
19720     12 13 02 F6 | 	mov	arg01, local04
19724     02 12 06 F1 | 	add	arg01, #2
19728     09 15 52 FC | 	wrword	arg02, arg01
1972c     12 13 02 F6 | 	mov	arg01, local04
19730     09 23 EA FA | 	rdword	local03, arg01 wz
19734     00 FA 05 A6 |  if_e	mov	result1, #0
19738     04 22 66 50 |  if_ne	shl	local03, #4
1973c     11 13 02 51 |  if_ne	add	arg01, local03
19740     09 FB 01 56 |  if_ne	mov	result1, arg01
19744     FD 24 0A F6 | 	mov	local04, result1 wz
19748     BC FF 9F 5D |  if_ne	jmp	#LR__2610
1974c                 | LR__2611
1974c                 | LR__2612
1974c     00 22 06 F6 | 	mov	local03, #0
19750     00 12 06 F6 | 	mov	arg01, #0
19754     F0 C0 BF FD | 	call	#__system____topofstack
19758     FD 14 02 F6 | 	mov	arg02, result1
1975c     11 13 02 F6 | 	mov	arg01, local03
19760     90 00 B0 FD | 	call	#__system___gc_markhub
19764     1C 01 B0 FD | 	call	#__system___gc_markcog
19768     10 13 02 F6 | 	mov	arg01, local02
1976c     09 23 EA FA | 	rdword	local03, arg01 wz
19770     00 FA 05 A6 |  if_e	mov	result1, #0
19774     04 22 66 50 |  if_ne	shl	local03, #4
19778     11 13 02 51 |  if_ne	add	arg01, local03
1977c     09 FB 01 56 |  if_ne	mov	result1, arg01
19780     FD 20 0A F6 | 	mov	local02, result1 wz
19784     60 00 90 AD |  if_e	jmp	#LR__2616
19788                 | LR__2613
19788     10 25 02 F6 | 	mov	local04, local02
1978c     12 13 02 F6 | 	mov	arg01, local04
19790     09 23 EA FA | 	rdword	local03, arg01 wz
19794     00 FA 05 A6 |  if_e	mov	result1, #0
19798     04 22 66 50 |  if_ne	shl	local03, #4
1979c     11 13 02 51 |  if_ne	add	arg01, local03
197a0     09 FB 01 56 |  if_ne	mov	result1, arg01
197a4     FD 20 02 F6 | 	mov	local02, result1
197a8     12 15 02 F6 | 	mov	arg02, local04
197ac     02 14 06 F1 | 	add	arg02, #2
197b0     0A 15 E2 FA | 	rdword	arg02, arg02
197b4     20 14 CE F7 | 	test	arg02, #32 wz
197b8     10 14 CE A7 |  if_e	test	arg02, #16 wz
197bc     1C 00 90 5D |  if_ne	jmp	#LR__2615
197c0     0A 15 42 F8 | 	getnib	arg02, arg02, #0
197c4     13 15 0A F2 | 	cmp	arg02, local05 wz
197c8     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
197cc     0C 00 90 5D |  if_ne	jmp	#LR__2614
197d0     12 13 02 F6 | 	mov	arg01, local04
197d4     84 FC BF FD | 	call	#__system___gc_dofree
197d8     FD 20 02 F6 | 	mov	local02, result1
197dc                 | LR__2614
197dc                 | LR__2615
197dc     00 20 0E F2 | 	cmp	local02, #0 wz
197e0     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
197e4     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__2613
197e8                 | LR__2616
197e8     A7 F0 03 F6 | 	mov	ptra, fp
197ec     B2 00 A0 FD | 	call	#popregs_
197f0                 | __system___gc_docollect_ret
197f0     2D 00 64 FD | 	ret
197f4                 | 
197f4                 | __system___gc_markhub
197f4     04 4A 05 F6 | 	mov	COUNT_, #4
197f8     A8 00 A0 FD | 	call	#pushregs_
197fc     09 1F 02 F6 | 	mov	local01, arg01
19800     0A 21 02 F6 | 	mov	local02, arg02
19804     80 F8 BF FD | 	call	#__system___gc_ptrs
19808     FD 22 02 F6 | 	mov	local03, result1
1980c     FE 24 02 F6 | 	mov	local04, result2
19810                 | LR__2620
19810     10 1F 52 F2 | 	cmps	local01, local02 wc
19814     60 00 90 3D |  if_ae	jmp	#LR__2621
19818     0F 17 02 FB | 	rdlong	arg03, local01
1981c     04 1E 06 F1 | 	add	local01, #4
19820     12 15 02 F6 | 	mov	arg02, local04
19824     11 13 02 F6 | 	mov	arg01, local03
19828     8C FB BF FD | 	call	#__system___gc_isvalidptr
1982c     FD 16 0A F6 | 	mov	arg03, result1 wz
19830     DC FF 9F AD |  if_e	jmp	#LR__2620
19834     0B 13 02 F6 | 	mov	arg01, arg03
19838     00 FA 05 F6 | 	mov	result1, #0
1983c     02 12 06 F1 | 	add	arg01, #2
19840     09 13 E2 FA | 	rdword	arg01, arg01
19844     36 00 00 FF 
19848     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1984c     01 FA 65 A6 |  if_e	neg	result1, #1
19850     00 FA 0D F2 | 	cmp	result1, #0 wz
19854     B8 FF 9F 5D |  if_ne	jmp	#LR__2620
19858     0B FD 01 F6 | 	mov	result2, arg03
1985c     02 FC 05 F1 | 	add	result2, #2
19860     FE FC E1 FA | 	rdword	result2, result2
19864     0F FC 25 F5 | 	andn	result2, #15
19868     2E FC 45 F5 | 	or	result2, #46
1986c     02 16 06 F1 | 	add	arg03, #2
19870     0B FD 51 FC | 	wrword	result2, arg03
19874     98 FF 9F FD | 	jmp	#LR__2620
19878                 | LR__2621
19878     A7 F0 03 F6 | 	mov	ptra, fp
1987c     B2 00 A0 FD | 	call	#popregs_
19880                 | __system___gc_markhub_ret
19880     2D 00 64 FD | 	ret
19884                 | 
19884                 | __system___gc_markcog
19884     04 4A 05 F6 | 	mov	COUNT_, #4
19888     A8 00 A0 FD | 	call	#pushregs_
1988c     F8 F7 BF FD | 	call	#__system___gc_ptrs
19890     FD 1E 02 F6 | 	mov	local01, result1
19894     FE 20 02 F6 | 	mov	local02, result2
19898     EF 23 06 F6 | 	mov	local03, #495
1989c                 | LR__2630
1989c                 | 	'.live	local03
1989c     00 22 96 F9 | 	alts	local03, #0
198a0     11 25 02 F6 | 	mov	local04, local03
198a4     0F 13 02 F6 | 	mov	arg01, local01
198a8     10 15 02 F6 | 	mov	arg02, local02
198ac     12 17 02 F6 | 	mov	arg03, local04
198b0     04 FB BF FD | 	call	#__system___gc_isvalidptr
198b4     00 FA 0D F2 | 	cmp	result1, #0 wz
198b8     18 00 90 AD |  if_e	jmp	#LR__2631
198bc     FD 24 02 F6 | 	mov	local04, result1
198c0     02 24 06 F1 | 	add	local04, #2
198c4     12 25 E2 FA | 	rdword	local04, local04
198c8     20 24 46 F5 | 	or	local04, #32
198cc     02 FA 05 F1 | 	add	result1, #2
198d0     FD 24 52 FC | 	wrword	local04, result1
198d4                 | LR__2631
198d4     01 22 86 F1 | 	sub	local03, #1
198d8     00 22 56 F2 | 	cmps	local03, #0 wc
198dc     BC FF 9F 3D |  if_ae	jmp	#LR__2630
198e0     A7 F0 03 F6 | 	mov	ptra, fp
198e4     B2 00 A0 FD | 	call	#popregs_
198e8                 | __system___gc_markcog_ret
198e8     2D 00 64 FD | 	ret
198ec                 | 
198ec                 | __system__opendir
198ec     06 4A 05 F6 | 	mov	COUNT_, #6
198f0     A8 00 A0 FD | 	call	#pushregs_
198f4     84 E9 05 F1 | 	add	ptr___system__dat__, #388
198f8     F4 1E 02 F6 | 	mov	local01, ptr___system__dat__
198fc     09 15 02 F6 | 	mov	arg02, arg01
19900     0F 13 02 F6 | 	mov	arg01, local01
19904     00 16 06 F6 | 	mov	arg03, #0
19908     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1990c     F8 C6 BF FD | 	call	#__system____getvfsforfile
19910     FD 20 0A F6 | 	mov	local02, result1 wz
19914     10 00 90 AD |  if_e	jmp	#LR__2640
19918     28 20 06 F1 | 	add	local02, #40
1991c     10 17 0A FB | 	rdlong	arg03, local02 wz
19920     28 20 86 F1 | 	sub	local02, #40
19924     14 00 90 5D |  if_ne	jmp	#LR__2641
19928                 | LR__2640
19928     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1992c     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
19930     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19934     00 FA 05 F6 | 	mov	result1, #0
19938     90 00 90 FD | 	jmp	#LR__2643
1993c                 | LR__2641
1993c     5C 12 06 F6 | 	mov	arg01, #92
19940     10 14 06 F6 | 	mov	arg02, #16
19944     C0 F9 BF FD | 	call	#__system___gc_doalloc
19948     FD 22 0A F6 | 	mov	local03, result1 wz
1994c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
19950     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
19954     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
19958     00 FA 05 A6 |  if_e	mov	result1, #0
1995c     6C 00 90 AD |  if_e	jmp	#LR__2643
19960     28 20 06 F1 | 	add	local02, #40
19964     10 25 02 FB | 	rdlong	local04, local02
19968     12 27 02 F6 | 	mov	local05, local04
1996c     28 20 86 F1 | 	sub	local02, #40
19970     13 26 46 F7 | 	zerox	local05, #19
19974     14 24 46 F0 | 	shr	local04, #20
19978     02 24 66 F0 | 	shl	local04, #2
1997c     ED 24 02 F1 | 	add	local04, __methods__
19980     12 25 02 FB | 	rdlong	local04, local04
19984     11 13 02 F6 | 	mov	arg01, local03
19988     0F 15 02 F6 | 	mov	arg02, local01
1998c     F2 28 02 F6 | 	mov	local06, objptr
19990     13 E5 01 F6 | 	mov	objptr, local05
19994     2D 24 62 FD | 	call	local04
19998     14 E5 01 F6 | 	mov	objptr, local06
1999c     FD 16 0A F6 | 	mov	arg03, result1 wz
199a0     20 00 90 AD |  if_e	jmp	#LR__2642
199a4     00 16 4E F2 | 	cmps	arg03, #0 wz
199a8     20 E8 05 F1 | 	add	ptr___system__dat__, #32
199ac     F4 16 62 FC | 	wrlong	arg03, ptr___system__dat__
199b0     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
199b4     11 13 02 F6 | 	mov	arg01, local03
199b8     58 FA BF FD | 	call	#__system___gc_free
199bc     00 FA 05 F6 | 	mov	result1, #0
199c0     08 00 90 FD | 	jmp	#LR__2643
199c4                 | LR__2642
199c4     11 21 62 FC | 	wrlong	local02, local03
199c8     11 FB 01 F6 | 	mov	result1, local03
199cc                 | LR__2643
199cc     A7 F0 03 F6 | 	mov	ptra, fp
199d0     B2 00 A0 FD | 	call	#popregs_
199d4                 | __system__opendir_ret
199d4     2D 00 64 FD | 	ret
199d8                 | 
199d8                 | __system__closedir
199d8     04 4A 05 F6 | 	mov	COUNT_, #4
199dc     A8 00 A0 FD | 	call	#pushregs_
199e0     09 1F 02 F6 | 	mov	local01, arg01
199e4     0F 13 02 FB | 	rdlong	arg01, local01
199e8     2C 12 06 F1 | 	add	arg01, #44
199ec     09 21 02 FB | 	rdlong	local02, arg01
199f0     10 23 02 F6 | 	mov	local03, local02
199f4     13 22 46 F7 | 	zerox	local03, #19
199f8     14 20 46 F0 | 	shr	local02, #20
199fc     02 20 66 F0 | 	shl	local02, #2
19a00     ED 20 02 F1 | 	add	local02, __methods__
19a04     10 21 02 FB | 	rdlong	local02, local02
19a08     0F 13 02 F6 | 	mov	arg01, local01
19a0c     F2 24 02 F6 | 	mov	local04, objptr
19a10     11 E5 01 F6 | 	mov	objptr, local03
19a14     2D 20 62 FD | 	call	local02
19a18     12 E5 01 F6 | 	mov	objptr, local04
19a1c     FD 24 02 F6 | 	mov	local04, result1
19a20     0F 13 02 F6 | 	mov	arg01, local01
19a24     EC F9 BF FD | 	call	#__system___gc_free
19a28     00 24 4E F2 | 	cmps	local04, #0 wz
19a2c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19a30     F4 24 62 FC | 	wrlong	local04, ptr___system__dat__
19a34     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19a38     01 FA 65 56 |  if_ne	neg	result1, #1
19a3c     00 FA 05 A6 |  if_e	mov	result1, #0
19a40     A7 F0 03 F6 | 	mov	ptra, fp
19a44     B2 00 A0 FD | 	call	#popregs_
19a48                 | __system__closedir_ret
19a48     2D 00 64 FD | 	ret
19a4c                 | 
19a4c                 | __system__readdir
19a4c     04 4A 05 F6 | 	mov	COUNT_, #4
19a50     A8 00 A0 FD | 	call	#pushregs_
19a54     09 15 0A FB | 	rdlong	arg02, arg01 wz
19a58     08 12 06 F1 | 	add	arg01, #8
19a5c     09 1F 02 F6 | 	mov	local01, arg01
19a60     08 12 86 F1 | 	sub	arg01, #8
19a64     00 FA 05 A6 |  if_e	mov	result1, #0
19a68     5C 00 90 AD |  if_e	jmp	#LR__2651
19a6c     30 14 06 F1 | 	add	arg02, #48
19a70     0A 21 02 FB | 	rdlong	local02, arg02
19a74     10 23 02 F6 | 	mov	local03, local02
19a78     13 22 46 F7 | 	zerox	local03, #19
19a7c     14 20 46 F0 | 	shr	local02, #20
19a80     02 20 66 F0 | 	shl	local02, #2
19a84     ED 20 02 F1 | 	add	local02, __methods__
19a88     10 21 02 FB | 	rdlong	local02, local02
19a8c     0F 15 02 F6 | 	mov	arg02, local01
19a90     F2 24 02 F6 | 	mov	local04, objptr
19a94     11 E5 01 F6 | 	mov	objptr, local03
19a98     2D 20 62 FD | 	call	local02
19a9c     12 E5 01 F6 | 	mov	objptr, local04
19aa0     00 FA 4D F2 | 	cmps	result1, #0 wz
19aa4     1C 00 90 AD |  if_e	jmp	#LR__2650
19aa8     01 FA 55 F2 | 	cmps	result1, #1 wc
19aac     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
19ab0     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
19ab4     F4 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
19ab8     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
19abc     00 FA 05 F6 | 	mov	result1, #0
19ac0     04 00 90 FD | 	jmp	#LR__2651
19ac4                 | LR__2650
19ac4     0F FB 01 F6 | 	mov	result1, local01
19ac8                 | LR__2651
19ac8     A7 F0 03 F6 | 	mov	ptra, fp
19acc     B2 00 A0 FD | 	call	#popregs_
19ad0                 | __system__readdir_ret
19ad0     2D 00 64 FD | 	ret
19ad4                 | 
19ad4                 | __system___openraw
19ad4     15 4A 05 F6 | 	mov	COUNT_, #21
19ad8     A8 00 A0 FD | 	call	#pushregs_
19adc     09 1F 02 F6 | 	mov	local01, arg01
19ae0     0A 21 02 F6 | 	mov	local02, arg02
19ae4     0B 23 02 F6 | 	mov	local03, arg03
19ae8     0C 25 02 F6 | 	mov	local04, arg04
19aec     04 26 06 F6 | 	mov	local05, #4
19af0     0F 29 02 F6 | 	mov	local06, local01
19af4     00 2A 06 F6 | 	mov	local07, #0
19af8     84 E9 05 F1 | 	add	ptr___system__dat__, #388
19afc     F4 2C 02 F6 | 	mov	local08, ptr___system__dat__
19b00     16 13 02 F6 | 	mov	arg01, local08
19b04     10 15 02 F6 | 	mov	arg02, local02
19b08     00 16 06 F6 | 	mov	arg03, #0
19b0c     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
19b10     F4 C4 BF FD | 	call	#__system____getvfsforfile
19b14     FD 2E 0A F6 | 	mov	local09, result1 wz
19b18     10 00 90 AD |  if_e	jmp	#LR__2660
19b1c     20 2E 06 F1 | 	add	local09, #32
19b20     17 FB 09 FB | 	rdlong	result1, local09 wz
19b24     20 2E 86 F1 | 	sub	local09, #32
19b28     14 00 90 5D |  if_ne	jmp	#LR__2661
19b2c                 | LR__2660
19b2c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19b30     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
19b34     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19b38     01 FA 65 F6 | 	neg	result1, #1
19b3c     88 02 90 FD | 	jmp	#LR__2674
19b40                 | LR__2661
19b40     14 13 02 F6 | 	mov	arg01, local06
19b44     00 14 06 F6 | 	mov	arg02, #0
19b48     34 16 06 F6 | 	mov	arg03, #52
19b4c     09 31 02 F6 | 	mov	local10, arg01
19b50     98 00 A0 FD | 	call	#\builtin_bytefill_
19b54     20 2E 06 F1 | 	add	local09, #32
19b58     17 33 02 FB | 	rdlong	local11, local09
19b5c     19 35 02 F6 | 	mov	local12, local11
19b60     19 37 02 F6 | 	mov	local13, local11
19b64     20 2E 86 F1 | 	sub	local09, #32
19b68     1B 39 02 F6 | 	mov	local14, local13
19b6c     13 34 46 F7 | 	zerox	local12, #19
19b70     14 38 46 F0 | 	shr	local14, #20
19b74     02 38 66 F0 | 	shl	local14, #2
19b78     ED 38 02 F1 | 	add	local14, __methods__
19b7c     1C 39 02 FB | 	rdlong	local14, local14
19b80     14 3B 02 F6 | 	mov	local15, local06
19b84     16 3D 02 F6 | 	mov	local16, local08
19b88     11 3F 02 F6 | 	mov	local17, local03
19b8c     1D 13 02 F6 | 	mov	arg01, local15
19b90     1E 15 02 F6 | 	mov	arg02, local16
19b94     1F 17 02 F6 | 	mov	arg03, local17
19b98     F2 40 02 F6 | 	mov	local18, objptr
19b9c     1A E5 01 F6 | 	mov	objptr, local12
19ba0     2D 38 62 FD | 	call	local14
19ba4     20 E5 01 F6 | 	mov	objptr, local18
19ba8     FD 42 0A F6 | 	mov	local19, result1 wz
19bac     04 22 CE 57 |  if_ne	test	local03, #4 wz
19bb0     58 00 90 AD |  if_e	jmp	#LR__2662
19bb4     24 2E 06 F1 | 	add	local09, #36
19bb8     17 33 02 FB | 	rdlong	local11, local09
19bbc     19 35 02 F6 | 	mov	local12, local11
19bc0     19 37 02 F6 | 	mov	local13, local11
19bc4     24 2E 86 F1 | 	sub	local09, #36
19bc8     1B 39 02 F6 | 	mov	local14, local13
19bcc     13 34 46 F7 | 	zerox	local12, #19
19bd0     14 38 46 F0 | 	shr	local14, #20
19bd4     02 38 66 F0 | 	shl	local14, #2
19bd8     ED 38 02 F1 | 	add	local14, __methods__
19bdc     1C 39 02 FB | 	rdlong	local14, local14
19be0     14 3B 02 F6 | 	mov	local15, local06
19be4     16 3D 02 F6 | 	mov	local16, local08
19be8     12 3F 02 F6 | 	mov	local17, local04
19bec     1D 13 02 F6 | 	mov	arg01, local15
19bf0     1E 15 02 F6 | 	mov	arg02, local16
19bf4     1F 17 02 F6 | 	mov	arg03, local17
19bf8     F2 40 02 F6 | 	mov	local18, objptr
19bfc     1A E5 01 F6 | 	mov	objptr, local12
19c00     2D 38 62 FD | 	call	local14
19c04     20 E5 01 F6 | 	mov	objptr, local18
19c08     FD 42 02 F6 | 	mov	local19, result1
19c0c                 | LR__2662
19c0c     00 42 0E F2 | 	cmp	local19, #0 wz
19c10     88 01 90 5D |  if_ne	jmp	#LR__2672
19c14     11 45 02 F6 | 	mov	local20, local03
19c18     03 44 0E F5 | 	and	local20, #3 wz
19c1c     02 26 46 55 |  if_ne	or	local05, #2
19c20     01 44 0E F2 | 	cmp	local20, #1 wz
19c24     01 26 46 55 |  if_ne	or	local05, #1
19c28     20 22 CE F7 | 	test	local03, #32 wz
19c2c     C0 26 46 55 |  if_ne	or	local05, #192
19c30     08 28 06 F1 | 	add	local06, #8
19c34     14 27 62 FC | 	wrlong	local05, local06
19c38     0C 28 06 F1 | 	add	local06, #12
19c3c     14 47 0A FB | 	rdlong	local21, local06 wz
19c40     14 28 86 F1 | 	sub	local06, #20
19c44     18 00 90 5D |  if_ne	jmp	#LR__2663
19c48     04 2E 06 F1 | 	add	local09, #4
19c4c     17 47 02 FB | 	rdlong	local21, local09
19c50     04 2E 86 F1 | 	sub	local09, #4
19c54     14 28 06 F1 | 	add	local06, #20
19c58     14 47 62 FC | 	wrlong	local21, local06
19c5c     14 28 86 F1 | 	sub	local06, #20
19c60                 | LR__2663
19c60     18 28 06 F1 | 	add	local06, #24
19c64     14 47 0A FB | 	rdlong	local21, local06 wz
19c68     18 28 86 F1 | 	sub	local06, #24
19c6c     18 00 90 5D |  if_ne	jmp	#LR__2664
19c70     08 2E 06 F1 | 	add	local09, #8
19c74     17 47 02 FB | 	rdlong	local21, local09
19c78     08 2E 86 F1 | 	sub	local09, #8
19c7c     18 28 06 F1 | 	add	local06, #24
19c80     14 47 62 FC | 	wrlong	local21, local06
19c84     18 28 86 F1 | 	sub	local06, #24
19c88                 | LR__2664
19c88     24 28 06 F1 | 	add	local06, #36
19c8c     14 47 0A FB | 	rdlong	local21, local06 wz
19c90     24 28 86 F1 | 	sub	local06, #36
19c94     17 47 02 AB |  if_e	rdlong	local21, local09
19c98     24 28 06 A1 |  if_e	add	local06, #36
19c9c     14 47 62 AC |  if_e	wrlong	local21, local06
19ca0     24 28 86 A1 |  if_e	sub	local06, #36
19ca4     28 28 06 F1 | 	add	local06, #40
19ca8     14 47 0A FB | 	rdlong	local21, local06 wz
19cac     28 28 86 F1 | 	sub	local06, #40
19cb0     18 00 90 5D |  if_ne	jmp	#LR__2665
19cb4     10 2E 06 F1 | 	add	local09, #16
19cb8     17 47 02 FB | 	rdlong	local21, local09
19cbc     10 2E 86 F1 | 	sub	local09, #16
19cc0     28 28 06 F1 | 	add	local06, #40
19cc4     14 47 62 FC | 	wrlong	local21, local06
19cc8     28 28 86 F1 | 	sub	local06, #40
19ccc                 | LR__2665
19ccc     30 28 06 F1 | 	add	local06, #48
19cd0     14 47 0A FB | 	rdlong	local21, local06 wz
19cd4     30 28 86 F1 | 	sub	local06, #48
19cd8     18 00 90 5D |  if_ne	jmp	#LR__2666
19cdc     0C 2E 06 F1 | 	add	local09, #12
19ce0     17 47 02 FB | 	rdlong	local21, local09
19ce4     0C 2E 86 F1 | 	sub	local09, #12
19ce8     30 28 06 F1 | 	add	local06, #48
19cec     14 47 62 FC | 	wrlong	local21, local06
19cf0     30 28 86 F1 | 	sub	local06, #48
19cf4                 | LR__2666
19cf4     1C 28 06 F1 | 	add	local06, #28
19cf8     14 47 0A FB | 	rdlong	local21, local06 wz
19cfc     1C 28 86 F1 | 	sub	local06, #28
19d00     18 00 90 5D |  if_ne	jmp	#LR__2667
19d04     01 2A 06 F6 | 	mov	local07, #1
19d08     F2 12 02 F6 | 	mov	arg01, objptr
19d0c     39 12 26 F4 | 	bith	arg01, #57
19d10     1C 28 06 F1 | 	add	local06, #28
19d14     14 13 62 FC | 	wrlong	arg01, local06
19d18     1C 28 86 F1 | 	sub	local06, #28
19d1c                 | LR__2667
19d1c     20 28 06 F1 | 	add	local06, #32
19d20     14 47 0A FB | 	rdlong	local21, local06 wz
19d24     20 28 86 F1 | 	sub	local06, #32
19d28     1C 00 90 5D |  if_ne	jmp	#LR__2668
19d2c     01 2A 06 F6 | 	mov	local07, #1
19d30     F2 12 02 F6 | 	mov	arg01, objptr
19d34     00 08 03 FF 
19d38     00 12 46 F5 | 	or	arg01, ##101711872
19d3c     20 28 06 F1 | 	add	local06, #32
19d40     14 13 62 FC | 	wrlong	arg01, local06
19d44     20 28 86 F1 | 	sub	local06, #32
19d48                 | LR__2668
19d48     2C 28 06 F1 | 	add	local06, #44
19d4c     14 47 0A FB | 	rdlong	local21, local06 wz
19d50     2C 28 86 F1 | 	sub	local06, #44
19d54     44 00 90 5D |  if_ne	jmp	#LR__2671
19d58     14 2E 06 F1 | 	add	local09, #20
19d5c     17 47 0A FB | 	rdlong	local21, local09 wz
19d60     14 2E 86 F1 | 	sub	local09, #20
19d64     18 00 90 AD |  if_e	jmp	#LR__2669
19d68     14 2E 06 F1 | 	add	local09, #20
19d6c     17 47 02 FB | 	rdlong	local21, local09
19d70     2C 28 06 F1 | 	add	local06, #44
19d74     14 47 62 FC | 	wrlong	local21, local06
19d78     2C 28 86 F1 | 	sub	local06, #44
19d7c     1C 00 90 FD | 	jmp	#LR__2670
19d80                 | LR__2669
19d80     01 2A 06 F6 | 	mov	local07, #1
19d84     F2 12 02 F6 | 	mov	arg01, objptr
19d88     00 10 03 FF 
19d8c     00 12 46 F5 | 	or	arg01, ##102760448
19d90     2C 28 06 F1 | 	add	local06, #44
19d94     14 13 62 FC | 	wrlong	arg01, local06
19d98     2C 28 86 F1 | 	sub	local06, #44
19d9c                 | LR__2670
19d9c                 | LR__2671
19d9c                 | LR__2672
19d9c     00 2A 0E F2 | 	cmp	local07, #0 wz
19da0     14 13 02 56 |  if_ne	mov	arg01, local06
19da4     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
19da8     00 42 0E F2 | 	cmp	local19, #0 wz
19dac     00 12 06 A6 |  if_e	mov	arg01, #0
19db0     10 00 90 5D |  if_ne	jmp	#LR__2673
19db4     00 12 4E F2 | 	cmps	arg01, #0 wz
19db8     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19dbc     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
19dc0     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19dc4                 | LR__2673
19dc4     21 FB 01 F6 | 	mov	result1, local19
19dc8                 | LR__2674
19dc8     A7 F0 03 F6 | 	mov	ptra, fp
19dcc     B2 00 A0 FD | 	call	#popregs_
19dd0                 | __system___openraw_ret
19dd0     2D 00 64 FD | 	ret
19dd4                 | 
19dd4                 | __system___closeraw
19dd4     05 4A 05 F6 | 	mov	COUNT_, #5
19dd8     A8 00 A0 FD | 	call	#pushregs_
19ddc     09 1F 02 F6 | 	mov	local01, arg01
19de0     00 20 06 F6 | 	mov	local02, #0
19de4     08 1E 06 F1 | 	add	local01, #8
19de8     0F FB 09 FB | 	rdlong	result1, local01 wz
19dec     08 1E 86 F1 | 	sub	local01, #8
19df0     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
19df4     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
19df8     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
19dfc     01 FA 65 A6 |  if_e	neg	result1, #1
19e00     A8 00 90 AD |  if_e	jmp	#LR__2682
19e04     2C 1E 06 F1 | 	add	local01, #44
19e08     0F FB 09 FB | 	rdlong	result1, local01 wz
19e0c     2C 1E 86 F1 | 	sub	local01, #44
19e10     38 00 90 AD |  if_e	jmp	#LR__2680
19e14     2C 1E 06 F1 | 	add	local01, #44
19e18     0F 23 02 FB | 	rdlong	local03, local01
19e1c     11 25 02 F6 | 	mov	local04, local03
19e20     2C 1E 86 F1 | 	sub	local01, #44
19e24     13 24 46 F7 | 	zerox	local04, #19
19e28     14 22 46 F0 | 	shr	local03, #20
19e2c     02 22 66 F0 | 	shl	local03, #2
19e30     ED 22 02 F1 | 	add	local03, __methods__
19e34     11 23 02 FB | 	rdlong	local03, local03
19e38     0F 13 02 F6 | 	mov	arg01, local01
19e3c     F2 26 02 F6 | 	mov	local05, objptr
19e40     12 E5 01 F6 | 	mov	objptr, local04
19e44     2D 22 62 FD | 	call	local03
19e48     13 E5 01 F6 | 	mov	objptr, local05
19e4c                 | LR__2680
19e4c     24 1E 06 F1 | 	add	local01, #36
19e50     0F 27 0A FB | 	rdlong	local05, local01 wz
19e54     24 1E 86 F1 | 	sub	local01, #36
19e58     3C 00 90 AD |  if_e	jmp	#LR__2681
19e5c     24 1E 06 F1 | 	add	local01, #36
19e60     0F 23 02 FB | 	rdlong	local03, local01
19e64     11 25 02 F6 | 	mov	local04, local03
19e68     24 1E 86 F1 | 	sub	local01, #36
19e6c     13 24 46 F7 | 	zerox	local04, #19
19e70     14 22 46 F0 | 	shr	local03, #20
19e74     02 22 66 F0 | 	shl	local03, #2
19e78     ED 22 02 F1 | 	add	local03, __methods__
19e7c     11 23 02 FB | 	rdlong	local03, local03
19e80     0F 13 02 F6 | 	mov	arg01, local01
19e84     F2 26 02 F6 | 	mov	local05, objptr
19e88     12 E5 01 F6 | 	mov	objptr, local04
19e8c     2D 22 62 FD | 	call	local03
19e90     13 E5 01 F6 | 	mov	objptr, local05
19e94     FD 20 02 F6 | 	mov	local02, result1
19e98                 | LR__2681
19e98     0F 13 02 F6 | 	mov	arg01, local01
19e9c     00 14 06 F6 | 	mov	arg02, #0
19ea0     34 16 06 F6 | 	mov	arg03, #52
19ea4     98 00 A0 FD | 	call	#\builtin_bytefill_
19ea8     10 FB 01 F6 | 	mov	result1, local02
19eac                 | LR__2682
19eac     A7 F0 03 F6 | 	mov	ptra, fp
19eb0     B2 00 A0 FD | 	call	#popregs_
19eb4                 | __system___closeraw_ret
19eb4     2D 00 64 FD | 	ret
19eb8                 | 
19eb8                 | __system___vfs_open_sdcardx
19eb8     0B 4A 05 F6 | 	mov	COUNT_, #11
19ebc     A8 00 A0 FD | 	call	#pushregs_
19ec0     09 23 02 F6 | 	mov	local03, arg01
19ec4     0A 25 02 F6 | 	mov	local04, arg02
19ec8     0B 27 02 F6 | 	mov	local05, arg03
19ecc     0C 29 02 F6 | 	mov	local06, arg04
19ed0     01 00 00 FF 
19ed4     24 12 06 F6 | 	mov	arg01, ##548
19ed8     FC F3 BF FD | 	call	#__system___gc_alloc_managed
19edc     FD 2A 02 F6 | 	mov	local07, result1
19ee0     01 00 00 FF 
19ee4     34 12 06 F6 | 	mov	arg01, ##564
19ee8     EC F3 BF FD | 	call	#__system___gc_alloc_managed
19eec     FD 2C 02 F6 | 	mov	local08, result1
19ef0     11 19 02 F6 | 	mov	arg04, local03
19ef4     1F 18 C6 F0 | 	sar	arg04, #31
19ef8     11 17 02 F6 | 	mov	arg03, local03
19efc     01 12 06 F6 | 	mov	arg01, #1
19f00     00 14 06 F6 | 	mov	arg02, #0
19f04     9C DF BF FD | 	call	#__system___int64_shl
19f08     FD 1E 02 F6 | 	mov	local01, result1
19f0c     FE 2E 02 F6 | 	mov	local09, result2
19f10     12 19 02 F6 | 	mov	arg04, local04
19f14     1F 18 C6 F0 | 	sar	arg04, #31
19f18     12 17 02 F6 | 	mov	arg03, local04
19f1c     01 12 06 F6 | 	mov	arg01, #1
19f20     00 14 06 F6 | 	mov	arg02, #0
19f24     7C DF BF FD | 	call	#__system___int64_shl
19f28     FD 1E 42 F5 | 	or	local01, result1
19f2c     FE 2E 42 F5 | 	or	local09, result2
19f30     13 19 02 F6 | 	mov	arg04, local05
19f34     1F 18 C6 F0 | 	sar	arg04, #31
19f38     13 17 02 F6 | 	mov	arg03, local05
19f3c     01 12 06 F6 | 	mov	arg01, #1
19f40     00 14 06 F6 | 	mov	arg02, #0
19f44     5C DF BF FD | 	call	#__system___int64_shl
19f48     FD 1E 42 F5 | 	or	local01, result1
19f4c     FE 2E 42 F5 | 	or	local09, result2
19f50     14 19 02 F6 | 	mov	arg04, local06
19f54     1F 18 C6 F0 | 	sar	arg04, #31
19f58     14 17 02 F6 | 	mov	arg03, local06
19f5c     01 12 06 F6 | 	mov	arg01, #1
19f60     00 14 06 F6 | 	mov	arg02, #0
19f64     3C DF BF FD | 	call	#__system___int64_shl
19f68     17 15 02 F6 | 	mov	arg02, local09
19f6c     FD 1E 42 F5 | 	or	local01, result1
19f70     0A FD 41 F5 | 	or	result2, arg02
19f74     FE 20 02 F6 | 	mov	local02, result2
19f78     0F 13 02 F6 | 	mov	arg01, local01
19f7c     10 15 02 F6 | 	mov	arg02, local02
19f80     58 DF BF FD | 	call	#__system___usepins
19f84     00 FA 0D F2 | 	cmp	result1, #0 wz
19f88     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
19f8c     F4 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
19f90     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
19f94     00 FA 05 A6 |  if_e	mov	result1, #0
19f98     B4 00 90 AD |  if_e	jmp	#LR__2692
19f9c     0F 31 02 F6 | 	mov	local10, local01
19fa0     10 2F 02 F6 | 	mov	local09, local02
19fa4     01 00 00 FF 
19fa8     08 2A 06 F1 | 	add	local07, ##520
19fac     15 31 62 FC | 	wrlong	local10, local07
19fb0     04 2A 06 F1 | 	add	local07, #4
19fb4     15 2F 62 FC | 	wrlong	local09, local07
19fb8     01 00 00 FF 
19fbc     0C 2A 86 F1 | 	sub	local07, ##524
19fc0     14 1B 02 F6 | 	mov	arg05, local06
19fc4     00 12 06 F6 | 	mov	arg01, #0
19fc8     11 15 02 F6 | 	mov	arg02, local03
19fcc     12 17 02 F6 | 	mov	arg03, local04
19fd0     13 19 02 F6 | 	mov	arg04, local05
19fd4     F2 30 02 F6 | 	mov	local10, objptr
19fd8     15 E5 01 F6 | 	mov	objptr, local07
19fdc     7C 27 B0 FD | 	call	#_fatfs_cc_disk_setpins
19fe0     18 E5 01 F6 | 	mov	objptr, local10
19fe4     FD 32 0A F6 | 	mov	local11, result1 wz
19fe8     24 00 90 5D |  if_ne	jmp	#LR__2690
19fec     25 01 00 FF 
19ff0     A2 14 06 F6 | 	mov	arg02, ##@LR__4087
19ff4     16 13 02 F6 | 	mov	arg01, local08
19ff8     00 16 06 F6 | 	mov	arg03, #0
19ffc     F2 32 02 F6 | 	mov	local11, objptr
1a000     15 E5 01 F6 | 	mov	objptr, local07
1a004     AC 5E B0 FD | 	call	#_fatfs_cc_f_mount
1a008     19 E5 01 F6 | 	mov	objptr, local11
1a00c     FD 32 02 F6 | 	mov	local11, result1
1a010                 | LR__2690
1a010     00 32 0E F2 | 	cmp	local11, #0 wz
1a014     24 00 90 AD |  if_e	jmp	#LR__2691
1a018     0F 13 02 F6 | 	mov	arg01, local01
1a01c     10 15 02 F6 | 	mov	arg02, local02
1a020     0C DF BF FD | 	call	#__system___freepins
1a024     19 13 6A F6 | 	neg	arg01, local11 wz
1a028     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1a02c     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1a030     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1a034     00 FA 05 F6 | 	mov	result1, #0
1a038     14 00 90 FD | 	jmp	#LR__2692
1a03c                 | LR__2691
1a03c     15 13 02 F6 | 	mov	arg01, local07
1a040     F2 32 02 F6 | 	mov	local11, objptr
1a044     15 E5 01 F6 | 	mov	objptr, local07
1a048     48 9B B0 FD | 	call	#_fatfs_cc_get_vfs
1a04c     19 E5 01 F6 | 	mov	objptr, local11
1a050                 | LR__2692
1a050     A7 F0 03 F6 | 	mov	ptra, fp
1a054     B2 00 A0 FD | 	call	#popregs_
1a058                 | __system___vfs_open_sdcardx_ret
1a058     2D 00 64 FD | 	ret
1a05c                 | 
1a05c                 | __system____default_getc
1a05c     03 4A 05 F6 | 	mov	COUNT_, #3
1a060     A8 00 A0 FD | 	call	#pushregs_
1a064     09 1F 02 F6 | 	mov	local01, arg01
1a068     0F 21 02 FB | 	rdlong	local02, local01
1a06c     08 20 06 F1 | 	add	local02, #8
1a070     10 23 02 FB | 	rdlong	local03, local02
1a074     02 22 CE F7 | 	test	local03, #2 wz
1a078     0F 13 02 56 |  if_ne	mov	arg01, local01
1a07c     00 01 B0 5D |  if_ne	call	#__system____default_flush
1a080     10 23 02 FB | 	rdlong	local03, local02
1a084     01 22 46 F5 | 	or	local03, #1
1a088     10 23 62 FC | 	wrlong	local03, local02
1a08c     08 20 86 F1 | 	sub	local02, #8
1a090     10 23 0A FB | 	rdlong	local03, local02 wz
1a094     0C 00 90 5D |  if_ne	jmp	#LR__2700
1a098     0F 13 02 F6 | 	mov	arg01, local01
1a09c     64 16 B0 FD | 	call	#__system____default_filbuf
1a0a0     FD 22 02 F6 | 	mov	local03, result1
1a0a4                 | LR__2700
1a0a4     01 22 56 F2 | 	cmps	local03, #1 wc
1a0a8     01 FA 65 C6 |  if_b	neg	result1, #1
1a0ac     1C 00 90 CD |  if_b	jmp	#LR__2701
1a0b0     01 22 86 F1 | 	sub	local03, #1
1a0b4     10 23 62 FC | 	wrlong	local03, local02
1a0b8     04 20 06 F1 | 	add	local02, #4
1a0bc     10 23 02 FB | 	rdlong	local03, local02
1a0c0     11 FB C1 FA | 	rdbyte	result1, local03
1a0c4     01 22 06 F1 | 	add	local03, #1
1a0c8     10 23 62 FC | 	wrlong	local03, local02
1a0cc                 | LR__2701
1a0cc     A7 F0 03 F6 | 	mov	ptra, fp
1a0d0     B2 00 A0 FD | 	call	#popregs_
1a0d4                 | __system____default_getc_ret
1a0d4     2D 00 64 FD | 	ret
1a0d8                 | 
1a0d8                 | __system____default_putc
1a0d8     06 4A 05 F6 | 	mov	COUNT_, #6
1a0dc     A8 00 A0 FD | 	call	#pushregs_
1a0e0     09 1F 02 F6 | 	mov	local01, arg01
1a0e4     0A 21 02 F6 | 	mov	local02, arg02
1a0e8     10 23 02 FB | 	rdlong	local03, local02
1a0ec     08 22 06 F1 | 	add	local03, #8
1a0f0     11 FB 01 FB | 	rdlong	result1, local03
1a0f4     01 FA CD F7 | 	test	result1, #1 wz
1a0f8     10 13 02 56 |  if_ne	mov	arg01, local02
1a0fc     80 00 B0 5D |  if_ne	call	#__system____default_flush
1a100     11 25 02 FB | 	rdlong	local04, local03
1a104     02 24 46 F5 | 	or	local04, #2
1a108     11 25 62 FC | 	wrlong	local04, local03
1a10c     08 22 86 F1 | 	sub	local03, #8
1a110     11 27 02 FB | 	rdlong	local05, local03
1a114     10 22 06 F1 | 	add	local03, #16
1a118     11 15 02 FB | 	rdlong	arg02, local03
1a11c     10 22 86 F1 | 	sub	local03, #16
1a120     13 FB 01 F6 | 	mov	result1, local05
1a124     0A FB 01 F1 | 	add	result1, arg02
1a128     FD 1E 42 FC | 	wrbyte	local01, result1
1a12c     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1a130     01 26 06 F1 | 	add	local05, #1
1a134     11 27 62 FC | 	wrlong	local05, local03
1a138     06 20 06 F1 | 	add	local02, #6
1a13c     10 29 EA FA | 	rdword	local06, local02 wz
1a140     06 20 86 F1 | 	sub	local02, #6
1a144     0C 22 06 51 |  if_ne	add	local03, #12
1a148     11 25 02 5B |  if_ne	rdlong	local04, local03
1a14c     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
1a150     0C 00 90 AD |  if_e	jmp	#LR__2710
1a154     0A 1E 0E F2 | 	cmp	local01, #10 wz
1a158     01 28 0E A2 |  if_e	cmp	local06, #1 wz
1a15c     10 00 90 5D |  if_ne	jmp	#LR__2711
1a160                 | LR__2710
1a160     10 13 02 F6 | 	mov	arg01, local02
1a164     18 00 B0 FD | 	call	#__system____default_flush
1a168     00 FA 0D F2 | 	cmp	result1, #0 wz
1a16c     01 1E 66 56 |  if_ne	neg	local01, #1
1a170                 | LR__2711
1a170     0F FB 01 F6 | 	mov	result1, local01
1a174     A7 F0 03 F6 | 	mov	ptra, fp
1a178     B2 00 A0 FD | 	call	#popregs_
1a17c                 | __system____default_putc_ret
1a17c     2D 00 64 FD | 	ret
1a180                 | 
1a180                 | __system____default_flush
1a180     06 4A 05 F6 | 	mov	COUNT_, #6
1a184     A8 00 A0 FD | 	call	#pushregs_
1a188     09 1F 02 F6 | 	mov	local01, arg01
1a18c     0F 21 02 FB | 	rdlong	local02, local01
1a190     10 23 02 FB | 	rdlong	local03, local02
1a194     08 20 06 F1 | 	add	local02, #8
1a198     10 FB 01 FB | 	rdlong	result1, local02
1a19c     08 20 86 F1 | 	sub	local02, #8
1a1a0     02 FA CD F7 | 	test	result1, #2 wz
1a1a4     D0 00 90 AD |  if_e	jmp	#LR__2722
1a1a8     01 22 56 F2 | 	cmps	local03, #1 wc
1a1ac     20 01 90 CD |  if_b	jmp	#LR__2724
1a1b0     08 1E 06 F1 | 	add	local01, #8
1a1b4     0F FB 01 FB | 	rdlong	result1, local01
1a1b8     08 1E 86 F1 | 	sub	local01, #8
1a1bc     40 FA CD F7 | 	test	result1, #64 wz
1a1c0     68 00 90 AD |  if_e	jmp	#LR__2721
1a1c4     08 1E 06 F1 | 	add	local01, #8
1a1c8     0F 17 02 FB | 	rdlong	arg03, local01
1a1cc     08 1E 86 F1 | 	sub	local01, #8
1a1d0     80 16 CE F7 | 	test	arg03, #128 wz
1a1d4     54 00 90 AD |  if_e	jmp	#LR__2720
1a1d8     30 1E 06 F1 | 	add	local01, #48
1a1dc     0F 25 02 FB | 	rdlong	local04, local01
1a1e0     12 27 02 F6 | 	mov	local05, local04
1a1e4     30 1E 86 F1 | 	sub	local01, #48
1a1e8     13 26 46 F7 | 	zerox	local05, #19
1a1ec     14 24 46 F0 | 	shr	local04, #20
1a1f0     02 24 66 F0 | 	shl	local04, #2
1a1f4     ED 24 02 F1 | 	add	local04, __methods__
1a1f8     12 25 02 FB | 	rdlong	local04, local04
1a1fc     0F 13 02 F6 | 	mov	arg01, local01
1a200     00 14 06 F6 | 	mov	arg02, #0
1a204     02 16 06 F6 | 	mov	arg03, #2
1a208     F2 28 02 F6 | 	mov	local06, objptr
1a20c     13 E5 01 F6 | 	mov	objptr, local05
1a210     2D 24 62 FD | 	call	local04
1a214     14 E5 01 F6 | 	mov	objptr, local06
1a218     08 1E 06 F1 | 	add	local01, #8
1a21c     0F 29 02 FB | 	rdlong	local06, local01
1a220     80 28 26 F5 | 	andn	local06, #128
1a224     0F 29 62 FC | 	wrlong	local06, local01
1a228     08 1E 86 F1 | 	sub	local01, #8
1a22c                 | LR__2720
1a22c                 | LR__2721
1a22c     18 1E 06 F1 | 	add	local01, #24
1a230     0F 25 02 FB | 	rdlong	local04, local01
1a234     12 27 02 F6 | 	mov	local05, local04
1a238     18 1E 86 F1 | 	sub	local01, #24
1a23c     13 26 46 F7 | 	zerox	local05, #19
1a240     14 24 46 F0 | 	shr	local04, #20
1a244     02 24 66 F0 | 	shl	local04, #2
1a248     ED 24 02 F1 | 	add	local04, __methods__
1a24c     12 25 02 FB | 	rdlong	local04, local04
1a250     10 20 06 F1 | 	add	local02, #16
1a254     10 15 02 FB | 	rdlong	arg02, local02
1a258     10 20 86 F1 | 	sub	local02, #16
1a25c     0F 13 02 F6 | 	mov	arg01, local01
1a260     11 17 02 F6 | 	mov	arg03, local03
1a264     F2 28 02 F6 | 	mov	local06, objptr
1a268     13 E5 01 F6 | 	mov	objptr, local05
1a26c     2D 24 62 FD | 	call	local04
1a270     14 E5 01 F6 | 	mov	objptr, local06
1a274     58 00 90 FD | 	jmp	#LR__2724
1a278                 | LR__2722
1a278     08 20 06 F1 | 	add	local02, #8
1a27c     10 29 02 FB | 	rdlong	local06, local02
1a280     08 20 86 F1 | 	sub	local02, #8
1a284     01 28 CE F7 | 	test	local06, #1 wz
1a288     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
1a28c     40 00 90 AD |  if_e	jmp	#LR__2723
1a290     30 1E 06 F1 | 	add	local01, #48
1a294     0F 25 02 FB | 	rdlong	local04, local01
1a298     12 27 02 F6 | 	mov	local05, local04
1a29c     30 1E 86 F1 | 	sub	local01, #48
1a2a0     13 26 46 F7 | 	zerox	local05, #19
1a2a4     14 24 46 F0 | 	shr	local04, #20
1a2a8     02 24 66 F0 | 	shl	local04, #2
1a2ac     ED 24 02 F1 | 	add	local04, __methods__
1a2b0     12 25 02 FB | 	rdlong	local04, local04
1a2b4     0F 13 02 F6 | 	mov	arg01, local01
1a2b8     11 15 62 F6 | 	neg	arg02, local03
1a2bc     01 16 06 F6 | 	mov	arg03, #1
1a2c0     F2 28 02 F6 | 	mov	local06, objptr
1a2c4     13 E5 01 F6 | 	mov	objptr, local05
1a2c8     2D 24 62 FD | 	call	local04
1a2cc     14 E5 01 F6 | 	mov	objptr, local06
1a2d0                 | LR__2723
1a2d0                 | LR__2724
1a2d0     10 01 68 FC | 	wrlong	#0, local02
1a2d4     04 20 06 F1 | 	add	local02, #4
1a2d8     10 01 68 FC | 	wrlong	#0, local02
1a2dc     04 20 06 F1 | 	add	local02, #4
1a2e0     10 01 68 FC | 	wrlong	#0, local02
1a2e4     00 FA 05 F6 | 	mov	result1, #0
1a2e8     A7 F0 03 F6 | 	mov	ptra, fp
1a2ec     B2 00 A0 FD | 	call	#popregs_
1a2f0                 | __system____default_flush_ret
1a2f0     2D 00 64 FD | 	ret
1a2f4                 | 
1a2f4                 | __system____default_buffer_init
1a2f4     02 4A 05 F6 | 	mov	COUNT_, #2
1a2f8     A8 00 A0 FD | 	call	#pushregs_
1a2fc     09 1F 02 F6 | 	mov	local01, arg01
1a300     0F 21 02 FB | 	rdlong	local02, local01
1a304     0F 13 02 F6 | 	mov	arg01, local01
1a308     F8 02 B0 FD | 	call	#__system___isatty
1a30c     00 FA 0D F2 | 	cmp	result1, #0 wz
1a310     06 1E 06 51 |  if_ne	add	local01, #6
1a314     0F 0B 58 5C |  if_ne	wrword	#5, local01
1a318     06 1E 06 A1 |  if_e	add	local01, #6
1a31c     0F 0D 58 AC |  if_e	wrword	#6, local01
1a320     14 20 06 F1 | 	add	local02, #20
1a324     10 1F 02 F6 | 	mov	local01, local02
1a328     04 20 86 F1 | 	sub	local02, #4
1a32c     10 1F 62 FC | 	wrlong	local01, local02
1a330     04 20 86 F1 | 	sub	local02, #4
1a334     02 00 80 FF 
1a338     10 01 68 FC | 	wrlong	##1024, local02
1a33c     00 FA 05 F6 | 	mov	result1, #0
1a340     A7 F0 03 F6 | 	mov	ptra, fp
1a344     B2 00 A0 FD | 	call	#popregs_
1a348                 | __system____default_buffer_init_ret
1a348     2D 00 64 FD | 	ret
1a34c                 | 
1a34c                 | __system__stat
1a34c     04 4A 05 F6 | 	mov	COUNT_, #4
1a350     A8 00 A0 FD | 	call	#pushregs_
1a354     0A 1F 02 F6 | 	mov	local01, arg02
1a358     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1a35c     F4 20 02 F6 | 	mov	local02, ptr___system__dat__
1a360     09 15 02 F6 | 	mov	arg02, arg01
1a364     10 13 02 F6 | 	mov	arg01, local02
1a368     00 16 06 F6 | 	mov	arg03, #0
1a36c     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1a370     94 BC BF FD | 	call	#__system____getvfsforfile
1a374     FD 22 0A F6 | 	mov	local03, result1 wz
1a378     10 00 90 AD |  if_e	jmp	#LR__2730
1a37c     34 22 06 F1 | 	add	local03, #52
1a380     11 17 0A FB | 	rdlong	arg03, local03 wz
1a384     34 22 86 F1 | 	sub	local03, #52
1a388     14 00 90 5D |  if_ne	jmp	#LR__2731
1a38c                 | LR__2730
1a38c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1a390     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1a394     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1a398     01 FA 65 F6 | 	neg	result1, #1
1a39c     68 00 90 FD | 	jmp	#LR__2732
1a3a0                 | LR__2731
1a3a0     0F 13 02 F6 | 	mov	arg01, local01
1a3a4     00 14 06 F6 | 	mov	arg02, #0
1a3a8     30 16 06 F6 | 	mov	arg03, #48
1a3ac     09 25 02 F6 | 	mov	local04, arg01
1a3b0     98 00 A0 FD | 	call	#\builtin_bytefill_
1a3b4     12 FB 01 F6 | 	mov	result1, local04
1a3b8     10 13 CA FA | 	rdbyte	arg01, local02 wz
1a3bc     08 1E 06 A1 |  if_e	add	local01, #8
1a3c0     08 00 80 AF 
1a3c4     0F FF 6B AC |  if_e	wrlong	##4607, local01
1a3c8     00 FA 05 A6 |  if_e	mov	result1, #0
1a3cc     38 00 90 AD |  if_e	jmp	#LR__2732
1a3d0     34 22 06 F1 | 	add	local03, #52
1a3d4     11 23 02 FB | 	rdlong	local03, local03
1a3d8     11 25 02 F6 | 	mov	local04, local03
1a3dc     13 22 46 F7 | 	zerox	local03, #19
1a3e0     14 24 46 F0 | 	shr	local04, #20
1a3e4     02 24 66 F0 | 	shl	local04, #2
1a3e8     ED 24 02 F1 | 	add	local04, __methods__
1a3ec     12 25 02 FB | 	rdlong	local04, local04
1a3f0     10 13 02 F6 | 	mov	arg01, local02
1a3f4     0F 15 02 F6 | 	mov	arg02, local01
1a3f8     F2 20 02 F6 | 	mov	local02, objptr
1a3fc     11 E5 01 F6 | 	mov	objptr, local03
1a400     2D 24 62 FD | 	call	local04
1a404     10 E5 01 F6 | 	mov	objptr, local02
1a408                 | LR__2732
1a408     A7 F0 03 F6 | 	mov	ptra, fp
1a40c     B2 00 A0 FD | 	call	#popregs_
1a410                 | __system__stat_ret
1a410     2D 00 64 FD | 	ret
1a414                 | 
1a414                 | __system__read
1a414     0A 12 16 F2 | 	cmp	arg01, #10 wc
1a418     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1a41c     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1a420     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1a424     01 FA 65 36 |  if_ae	neg	result1, #1
1a428     20 00 90 3D |  if_ae	jmp	#LR__2740
1a42c     34 12 06 FD | 	qmul	arg01, #52
1a430     02 00 00 FF 
1a434     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1a438     18 12 62 FD | 	getqx	arg01
1a43c     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1a440     02 00 00 FF 
1a444     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1a448     D0 0F B0 FD | 	call	#__system___vfsread
1a44c                 | LR__2740
1a44c                 | __system__read_ret
1a44c     2D 00 64 FD | 	ret
1a450                 | 
1a450                 | __system__close
1a450     0A 12 16 F2 | 	cmp	arg01, #10 wc
1a454     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1a458     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1a45c     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1a460     01 FA 65 36 |  if_ae	neg	result1, #1
1a464     20 00 90 3D |  if_ae	jmp	#LR__2750
1a468     34 12 06 FD | 	qmul	arg01, #52
1a46c     02 00 00 FF 
1a470     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1a474     18 12 62 FD | 	getqx	arg01
1a478     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1a47c     02 00 00 FF 
1a480     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1a484     4C F9 BF FD | 	call	#__system___closeraw
1a488                 | LR__2750
1a488                 | __system__close_ret
1a488     2D 00 64 FD | 	ret
1a48c                 | 
1a48c                 | __system__lseek
1a48c     06 4A 05 F6 | 	mov	COUNT_, #6
1a490     A8 00 A0 FD | 	call	#pushregs_
1a494     0A 12 16 F2 | 	cmp	arg01, #10 wc
1a498     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1a49c     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1a4a0     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1a4a4     01 FA 65 36 |  if_ae	neg	result1, #1
1a4a8     C4 00 90 3D |  if_ae	jmp	#LR__2761
1a4ac     34 12 06 FD | 	qmul	arg01, #52
1a4b0     02 00 00 FF 
1a4b4     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1a4b8     18 1E 62 FD | 	getqx	local01
1a4bc     F4 1E 02 F1 | 	add	local01, ptr___system__dat__
1a4c0     30 1E 06 F1 | 	add	local01, #48
1a4c4     0F 13 0A FB | 	rdlong	arg01, local01 wz
1a4c8     30 1E 86 F1 | 	sub	local01, #48
1a4cc     02 00 00 FF 
1a4d0     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1a4d4     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1a4d8     F4 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
1a4dc     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1a4e0     01 FA 65 A6 |  if_e	neg	result1, #1
1a4e4     88 00 90 AD |  if_e	jmp	#LR__2761
1a4e8     08 1E 06 F1 | 	add	local01, #8
1a4ec     0F 21 02 FB | 	rdlong	local02, local01
1a4f0     08 1E 86 F1 | 	sub	local01, #8
1a4f4     40 20 CE F7 | 	test	local02, #64 wz
1a4f8     08 1E 06 51 |  if_ne	add	local01, #8
1a4fc     0F 21 02 5B |  if_ne	rdlong	local02, local01
1a500     80 20 46 55 |  if_ne	or	local02, #128
1a504     0F 21 62 5C |  if_ne	wrlong	local02, local01
1a508     08 1E 86 51 |  if_ne	sub	local01, #8
1a50c     30 1E 06 F1 | 	add	local01, #48
1a510     0F 23 02 FB | 	rdlong	local03, local01
1a514     11 25 02 F6 | 	mov	local04, local03
1a518     30 1E 86 F1 | 	sub	local01, #48
1a51c     13 24 46 F7 | 	zerox	local04, #19
1a520     14 22 46 F0 | 	shr	local03, #20
1a524     02 22 66 F0 | 	shl	local03, #2
1a528     ED 22 02 F1 | 	add	local03, __methods__
1a52c     11 23 02 FB | 	rdlong	local03, local03
1a530     0F 13 02 F6 | 	mov	arg01, local01
1a534     F2 26 02 F6 | 	mov	local05, objptr
1a538     12 E5 01 F6 | 	mov	objptr, local04
1a53c     2D 22 62 FD | 	call	local03
1a540     13 E5 01 F6 | 	mov	objptr, local05
1a544     FD 28 02 F6 | 	mov	local06, result1
1a548     00 28 56 F2 | 	cmps	local06, #0 wc
1a54c     1C 00 90 3D |  if_ae	jmp	#LR__2760
1a550     14 13 6A F6 | 	neg	arg01, local06 wz
1a554     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1a558     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1a55c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1a560     01 FA 65 56 |  if_ne	neg	result1, #1
1a564     00 FA 05 A6 |  if_e	mov	result1, #0
1a568     04 00 90 FD | 	jmp	#LR__2761
1a56c                 | LR__2760
1a56c     14 FB 01 F6 | 	mov	result1, local06
1a570                 | LR__2761
1a570     A7 F0 03 F6 | 	mov	ptra, fp
1a574     B2 00 A0 FD | 	call	#popregs_
1a578                 | __system__lseek_ret
1a578     2D 00 64 FD | 	ret
1a57c                 | 
1a57c                 | __system___ioctl
1a57c     03 4A 05 F6 | 	mov	COUNT_, #3
1a580     A8 00 A0 FD | 	call	#pushregs_
1a584     00 12 4E F2 | 	cmps	arg01, #0 wz
1a588     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1a58c     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
1a590     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1a594     01 FA 65 A6 |  if_e	neg	result1, #1
1a598     5C 00 90 AD |  if_e	jmp	#LR__2771
1a59c     28 12 06 F1 | 	add	arg01, #40
1a5a0     09 1F 02 FB | 	rdlong	local01, arg01
1a5a4     0F 21 02 F6 | 	mov	local02, local01
1a5a8     28 12 86 F1 | 	sub	arg01, #40
1a5ac     13 20 46 F7 | 	zerox	local02, #19
1a5b0     14 1E 46 F0 | 	shr	local01, #20
1a5b4     02 1E 66 F0 | 	shl	local01, #2
1a5b8     ED 1E 02 F1 | 	add	local01, __methods__
1a5bc     0F 1F 02 FB | 	rdlong	local01, local01
1a5c0     F2 22 02 F6 | 	mov	local03, objptr
1a5c4     10 E5 01 F6 | 	mov	objptr, local02
1a5c8     2D 1E 62 FD | 	call	local01
1a5cc     11 E5 01 F6 | 	mov	objptr, local03
1a5d0     FD 12 0A F6 | 	mov	arg01, result1 wz
1a5d4     1C 00 90 AD |  if_e	jmp	#LR__2770
1a5d8     00 12 4E F2 | 	cmps	arg01, #0 wz
1a5dc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1a5e0     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1a5e4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1a5e8     01 FA 65 56 |  if_ne	neg	result1, #1
1a5ec     00 FA 05 A6 |  if_e	mov	result1, #0
1a5f0     04 00 90 FD | 	jmp	#LR__2771
1a5f4                 | LR__2770
1a5f4     00 FA 05 F6 | 	mov	result1, #0
1a5f8                 | LR__2771
1a5f8     A7 F0 03 F6 | 	mov	ptra, fp
1a5fc     B2 00 A0 FD | 	call	#popregs_
1a600                 | __system___ioctl_ret
1a600     2D 00 64 FD | 	ret
1a604                 | 
1a604                 | __system___isatty
1a604     00 4A 05 F6 | 	mov	COUNT_, #0
1a608     A8 00 A0 FD | 	call	#pushregs_
1a60c     0C F0 07 F1 | 	add	ptra, #12
1a610     04 4E 05 F1 | 	add	fp, #4
1a614     A7 12 62 FC | 	wrlong	arg01, fp
1a618     04 4E 05 F1 | 	add	fp, #4
1a61c     A7 16 02 F6 | 	mov	arg03, fp
1a620     08 4E 85 F1 | 	sub	fp, #8
1a624     00 15 06 F6 | 	mov	arg02, #256
1a628     50 FF BF FD | 	call	#__system___ioctl
1a62c     00 FA 0D F2 | 	cmp	result1, #0 wz
1a630     01 FA 05 A6 |  if_e	mov	result1, #1
1a634     00 FA 05 56 |  if_ne	mov	result1, #0
1a638     A7 F0 03 F6 | 	mov	ptra, fp
1a63c     B2 00 A0 FD | 	call	#popregs_
1a640                 | __system___isatty_ret
1a640     2D 00 64 FD | 	ret
1a644                 | 
1a644                 | __system____getftab
1a644     0A 12 16 F2 | 	cmp	arg01, #10 wc
1a648     34 12 06 CD |  if_b	qmul	arg01, #52
1a64c     00 FA 05 36 |  if_ae	mov	result1, #0
1a650     02 00 00 CF 
1a654     20 E9 05 C1 |  if_b	add	ptr___system__dat__, ##1312
1a658     18 FA 61 CD |  if_b	getqx	result1
1a65c     F4 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
1a660     02 00 00 CF 
1a664     20 E9 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
1a668                 | __system____getftab_ret
1a668     2D 00 64 FD | 	ret
1a66c                 | 
1a66c                 | __system__strncpy
1a66c     09 01 02 F6 | 	mov	_var01, arg01
1a670                 | LR__2780
1a670     01 16 86 F1 | 	sub	arg03, #1
1a674     00 16 56 F2 | 	cmps	arg03, #0 wc
1a678     18 00 90 CD |  if_b	jmp	#LR__2781
1a67c     0A FB C1 FA | 	rdbyte	result1, arg02
1a680     00 FB 41 FC | 	wrbyte	result1, _var01
1a684     01 14 06 F1 | 	add	arg02, #1
1a688     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1a68c     01 00 06 F1 | 	add	_var01, #1
1a690     DC FF 9F 5D |  if_ne	jmp	#LR__2780
1a694                 | LR__2781
1a694     97 0C 48 FB | 	callpa	#(@LR__2783-@LR__2782)>>2,fcache_load_ptr_
1a698                 | LR__2782
1a698     01 16 86 F1 | 	sub	arg03, #1
1a69c     00 16 56 F2 | 	cmps	arg03, #0 wc
1a6a0     00 03 02 36 |  if_ae	mov	_var02, _var01
1a6a4     01 00 06 31 |  if_ae	add	_var01, #1
1a6a8     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1a6ac     E8 FF 9F 3D |  if_ae	jmp	#LR__2782
1a6b0                 | LR__2783
1a6b0     09 FB 01 F6 | 	mov	result1, arg01
1a6b4                 | __system__strncpy_ret
1a6b4     2D 00 64 FD | 	ret
1a6b8                 | 
1a6b8                 | __system__strncat
1a6b8     00 14 4E F2 | 	cmps	arg02, #0 wz
1a6bc     50 00 90 AD |  if_e	jmp	#LR__2794
1a6c0     01 16 16 F2 | 	cmp	arg03, #1 wc
1a6c4     48 00 90 CD |  if_b	jmp	#LR__2794
1a6c8     09 01 02 F6 | 	mov	_var01, arg01
1a6cc     97 1E 48 FB | 	callpa	#(@LR__2792-@LR__2790)>>2,fcache_load_ptr_
1a6d0                 | LR__2790
1a6d0     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1a6d4     01 00 06 51 |  if_ne	add	_var01, #1
1a6d8     F4 FF 9F 5D |  if_ne	jmp	#LR__2790
1a6dc     0B 03 02 F6 | 	mov	_var02, arg03
1a6e0                 | LR__2791
1a6e0     0A 05 C2 FA | 	rdbyte	_var03, arg02
1a6e4     02 07 02 F6 | 	mov	_var04, _var03
1a6e8     07 06 4E F7 | 	zerox	_var04, #7 wz
1a6ec     01 14 06 F1 | 	add	arg02, #1
1a6f0     18 00 90 AD |  if_e	jmp	#LR__2793
1a6f4     01 02 86 F1 | 	sub	_var02, #1
1a6f8     00 02 56 F2 | 	cmps	_var02, #0 wc
1a6fc     00 07 02 36 |  if_ae	mov	_var04, _var01
1a700     01 00 06 31 |  if_ae	add	_var01, #1
1a704     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
1a708     D4 FF 9F 3D |  if_ae	jmp	#LR__2791
1a70c                 | LR__2792
1a70c                 | LR__2793
1a70c     00 01 48 FC | 	wrbyte	#0, _var01
1a710                 | LR__2794
1a710     09 FB 01 F6 | 	mov	result1, arg01
1a714                 | __system__strncat_ret
1a714     2D 00 64 FD | 	ret
1a718                 | 
1a718                 | __system__strncmp
1a718     09 01 0A F6 | 	mov	_var01, arg01 wz
1a71c     14 00 90 5D |  if_ne	jmp	#LR__2800
1a720     00 14 0E F2 | 	cmp	arg02, #0 wz
1a724     01 02 66 56 |  if_ne	neg	_var02, #1
1a728     00 02 06 A6 |  if_e	mov	_var02, #0
1a72c     01 FB 01 F6 | 	mov	result1, _var02
1a730     74 00 90 FD | 	jmp	#__system__strncmp_ret
1a734                 | LR__2800
1a734     00 14 0E F2 | 	cmp	arg02, #0 wz
1a738     01 FA 05 A6 |  if_e	mov	result1, #1
1a73c     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1a740     0B 05 02 F6 | 	mov	_var03, arg03
1a744     97 16 48 FB | 	callpa	#(@LR__2802-@LR__2801)>>2,fcache_load_ptr_
1a748                 | LR__2801
1a748     00 07 C2 FA | 	rdbyte	_var04, _var01
1a74c     0A 09 02 F6 | 	mov	_var05, arg02
1a750     04 0B C2 FA | 	rdbyte	_var06, _var05
1a754     01 04 86 F1 | 	sub	_var03, #1
1a758     00 04 56 F2 | 	cmps	_var03, #0 wc
1a75c     01 00 06 F1 | 	add	_var01, #1
1a760     01 14 06 F1 | 	add	arg02, #1
1a764     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1a768     08 00 90 2D |  if_nc_and_z	jmp	#LR__2803
1a76c     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1a770     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__2801
1a774                 | LR__2802
1a774                 | LR__2803
1a774     00 04 56 F2 | 	cmps	_var03, #0 wc
1a778     00 FA 05 C6 |  if_b	mov	result1, #0
1a77c     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
1a780     05 07 0A F2 | 	cmp	_var04, _var06 wz
1a784     00 FA 05 A6 |  if_e	mov	result1, #0
1a788     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1a78c     00 06 0E F2 | 	cmp	_var04, #0 wz
1a790     01 FA 65 A6 |  if_e	neg	result1, #1
1a794     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1a798     00 0A 0E F2 | 	cmp	_var06, #0 wz
1a79c     01 FA 05 A6 |  if_e	mov	result1, #1
1a7a0     03 FB 01 56 |  if_ne	mov	result1, _var04
1a7a4     05 FB 81 51 |  if_ne	sub	result1, _var06
1a7a8                 | __system__strncmp_ret
1a7a8     2D 00 64 FD | 	ret
1a7ac                 | 
1a7ac                 | __system____root_opendir
1a7ac     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1a7b0     04 12 06 F1 | 	add	arg01, #4
1a7b4     09 E9 61 FC | 	wrlong	ptr___system__dat__, arg01
1a7b8     00 FA 05 F6 | 	mov	result1, #0
1a7bc     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1a7c0                 | __system____root_opendir_ret
1a7c0     2D 00 64 FD | 	ret
1a7c4                 | 
1a7c4                 | __system____root_readdir
1a7c4     03 4A 05 F6 | 	mov	COUNT_, #3
1a7c8     A8 00 A0 FD | 	call	#pushregs_
1a7cc     09 1F 02 F6 | 	mov	local01, arg01
1a7d0     0A 21 02 F6 | 	mov	local02, arg02
1a7d4     04 1E 06 F1 | 	add	local01, #4
1a7d8     0F 23 02 FB | 	rdlong	local03, local01
1a7dc     04 1E 86 F1 | 	sub	local01, #4
1a7e0                 | LR__2810
1a7e0     74 E8 05 F1 | 	add	ptr___system__dat__, #116
1a7e4     F4 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
1a7e8     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
1a7ec     01 FA 65 A6 |  if_e	neg	result1, #1
1a7f0     48 00 90 AD |  if_e	jmp	#LR__2811
1a7f4     11 17 0A FB | 	rdlong	arg03, local03 wz
1a7f8     04 22 06 A1 |  if_e	add	local03, #4
1a7fc     E0 FF 9F AD |  if_e	jmp	#LR__2810
1a800     11 15 02 FB | 	rdlong	arg02, local03
1a804     01 14 06 F1 | 	add	arg02, #1
1a808     10 13 02 F6 | 	mov	arg01, local02
1a80c     40 16 06 F6 | 	mov	arg03, #64
1a810     58 FE BF FD | 	call	#__system__strncpy
1a814     50 20 06 F1 | 	add	local02, #80
1a818     10 03 48 FC | 	wrbyte	#1, local02
1a81c     08 20 86 F1 | 	sub	local02, #8
1a820     10 01 68 FC | 	wrlong	#0, local02
1a824     04 20 06 F1 | 	add	local02, #4
1a828     10 01 68 FC | 	wrlong	#0, local02
1a82c     04 22 06 F1 | 	add	local03, #4
1a830     04 1E 06 F1 | 	add	local01, #4
1a834     0F 23 62 FC | 	wrlong	local03, local01
1a838     00 FA 05 F6 | 	mov	result1, #0
1a83c                 | LR__2811
1a83c     A7 F0 03 F6 | 	mov	ptra, fp
1a840     B2 00 A0 FD | 	call	#popregs_
1a844                 | __system____root_readdir_ret
1a844     2D 00 64 FD | 	ret
1a848                 | 
1a848                 | __system____root_closedir
1a848     00 FA 05 F6 | 	mov	result1, #0
1a84c                 | __system____root_closedir_ret
1a84c     2D 00 64 FD | 	ret
1a850                 | 
1a850                 | __system____root_stat
1a850     0A 01 02 F6 | 	mov	_var01, arg02
1a854     00 13 02 F6 | 	mov	arg01, _var01
1a858     00 14 06 F6 | 	mov	arg02, #0
1a85c     30 16 06 F6 | 	mov	arg03, #48
1a860     98 00 A0 FD | 	call	#\builtin_bytefill_
1a864     08 00 06 F1 | 	add	_var01, #8
1a868     08 00 80 FF 
1a86c     00 FF 6B FC | 	wrlong	##4607, _var01
1a870     00 FA 05 F6 | 	mov	result1, #0
1a874                 | __system____root_stat_ret
1a874     2D 00 64 FD | 	ret
1a878                 | 
1a878                 | __system___normalizeName
1a878     00 00 06 F6 | 	mov	_var01, #0
1a87c     09 03 02 F6 | 	mov	_var02, arg01
1a880     01 05 02 F6 | 	mov	_var03, _var02
1a884                 | LR__2820
1a884     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1a888     5C 01 90 AD |  if_e	jmp	#LR__2839
1a88c     00 00 0E F2 | 	cmp	_var01, #0 wz
1a890     02 07 02 56 |  if_ne	mov	_var04, _var03
1a894     01 04 06 51 |  if_ne	add	_var03, #1
1a898     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
1a89c     00 00 06 56 |  if_ne	mov	_var01, #0
1a8a0     01 07 C2 FA | 	rdbyte	_var04, _var02
1a8a4     2E 06 0E F2 | 	cmp	_var04, #46 wz
1a8a8     D8 00 90 5D |  if_ne	jmp	#LR__2832
1a8ac     01 02 06 F1 | 	add	_var02, #1
1a8b0     01 07 C2 FA | 	rdbyte	_var04, _var02
1a8b4     01 02 86 F1 | 	sub	_var02, #1
1a8b8     2F 06 0E F2 | 	cmp	_var04, #47 wz
1a8bc     18 00 90 AD |  if_e	jmp	#LR__2821
1a8c0     01 02 06 F1 | 	add	_var02, #1
1a8c4     01 09 C2 FA | 	rdbyte	_var05, _var02
1a8c8     01 02 86 F1 | 	sub	_var02, #1
1a8cc     04 0B 02 F6 | 	mov	_var06, _var05
1a8d0     07 0A 4E F7 | 	zerox	_var06, #7 wz
1a8d4     10 00 90 5D |  if_ne	jmp	#LR__2822
1a8d8                 | LR__2821
1a8d8     01 0D 02 F6 | 	mov	_var07, _var02
1a8dc     01 0C 06 F1 | 	add	_var07, #1
1a8e0     06 03 02 F6 | 	mov	_var02, _var07
1a8e4     E0 00 90 FD | 	jmp	#LR__2836
1a8e8                 | LR__2822
1a8e8     01 02 06 F1 | 	add	_var02, #1
1a8ec     01 0D C2 FA | 	rdbyte	_var07, _var02
1a8f0     01 02 86 F1 | 	sub	_var02, #1
1a8f4     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
1a8f8     2E 06 0E F2 | 	cmp	_var04, #46 wz
1a8fc     84 00 90 5D |  if_ne	jmp	#LR__2831
1a900     02 02 06 F1 | 	add	_var02, #2
1a904     01 0D C2 FA | 	rdbyte	_var07, _var02
1a908     02 02 86 F1 | 	sub	_var02, #2
1a90c     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
1a910     2F 06 0E F2 | 	cmp	_var04, #47 wz
1a914     18 00 90 AD |  if_e	jmp	#LR__2823
1a918     02 02 06 F1 | 	add	_var02, #2
1a91c     01 09 C2 FA | 	rdbyte	_var05, _var02
1a920     02 02 86 F1 | 	sub	_var02, #2
1a924     04 0B 02 F6 | 	mov	_var06, _var05
1a928     07 0A 4E F7 | 	zerox	_var06, #7 wz
1a92c     54 00 90 5D |  if_ne	jmp	#LR__2830
1a930                 | LR__2823
1a930     02 02 06 F1 | 	add	_var02, #2
1a934     09 05 5A F2 | 	cmps	_var03, arg01 wcz
1a938     40 00 90 ED |  if_be	jmp	#LR__2829
1a93c     02 0F 02 F6 | 	mov	_var08, _var03
1a940     01 0E 86 F1 | 	sub	_var08, #1
1a944                 | LR__2824
1a944     07 07 C2 FA | 	rdbyte	_var04, _var08
1a948     2F 06 0E F2 | 	cmp	_var04, #47 wz
1a94c     0C 00 90 5D |  if_ne	jmp	#LR__2825
1a950     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1a954     01 0E 86 11 |  if_a	sub	_var08, #1
1a958     E8 FF 9F 1D |  if_a	jmp	#LR__2824
1a95c                 | LR__2825
1a95c     97 0C 48 FB | 	callpa	#(@LR__2827-@LR__2826)>>2,fcache_load_ptr_
1a960                 | LR__2826
1a960     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1a964     10 00 90 ED |  if_be	jmp	#LR__2828
1a968     07 07 C2 FA | 	rdbyte	_var04, _var08
1a96c     2F 06 0E F2 | 	cmp	_var04, #47 wz
1a970     01 0E 86 51 |  if_ne	sub	_var08, #1
1a974     E8 FF 9F 5D |  if_ne	jmp	#LR__2826
1a978                 | LR__2827
1a978                 | LR__2828
1a978     07 05 02 F6 | 	mov	_var03, _var08
1a97c                 | LR__2829
1a97c     01 00 06 F6 | 	mov	_var01, #1
1a980     44 00 90 FD | 	jmp	#LR__2836
1a984                 | LR__2830
1a984                 | LR__2831
1a984                 | LR__2832
1a984     97 18 48 FB | 	callpa	#(@LR__2834-@LR__2833)>>2,fcache_load_ptr_
1a988                 | LR__2833
1a988     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1a98c     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
1a990     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
1a994     20 00 90 AD |  if_e	jmp	#LR__2835
1a998     01 0B 02 F6 | 	mov	_var06, _var02
1a99c     01 09 02 F6 | 	mov	_var05, _var02
1a9a0     01 08 06 F1 | 	add	_var05, #1
1a9a4     05 11 C2 FA | 	rdbyte	_var09, _var06
1a9a8     04 03 02 F6 | 	mov	_var02, _var05
1a9ac     02 11 42 FC | 	wrbyte	_var09, _var03
1a9b0     01 04 06 F1 | 	add	_var03, #1
1a9b4     D0 FF 9F FD | 	jmp	#LR__2833
1a9b8                 | LR__2834
1a9b8                 | LR__2835
1a9b8     01 07 C2 FA | 	rdbyte	_var04, _var02
1a9bc     2F 06 0E F2 | 	cmp	_var04, #47 wz
1a9c0     C0 FE 9F 5D |  if_ne	jmp	#LR__2820
1a9c4     01 00 06 F6 | 	mov	_var01, #1
1a9c8                 | LR__2836
1a9c8     97 0C 48 FB | 	callpa	#(@LR__2838-@LR__2837)>>2,fcache_load_ptr_
1a9cc                 | LR__2837
1a9cc     01 07 C2 FA | 	rdbyte	_var04, _var02
1a9d0     2F 06 0E F2 | 	cmp	_var04, #47 wz
1a9d4     01 0D 02 A6 |  if_e	mov	_var07, _var02
1a9d8     01 0C 06 A1 |  if_e	add	_var07, #1
1a9dc     06 03 02 A6 |  if_e	mov	_var02, _var07
1a9e0     E8 FF 9F AD |  if_e	jmp	#LR__2837
1a9e4                 | LR__2838
1a9e4     9C FE 9F FD | 	jmp	#LR__2820
1a9e8                 | LR__2839
1a9e8     02 01 48 FC | 	wrbyte	#0, _var03
1a9ec                 | __system___normalizeName_ret
1a9ec     2D 00 64 FD | 	ret
1a9f0                 | 
1a9f0                 | __system___strrev
1a9f0     09 01 CA FA | 	rdbyte	_var01, arg01 wz
1a9f4     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
1a9f8     09 03 02 F6 | 	mov	_var02, arg01
1a9fc     97 1A 48 FB | 	callpa	#(@LR__2842-@LR__2840)>>2,fcache_load_ptr_
1aa00                 | LR__2840
1aa00     01 01 CA FA | 	rdbyte	_var01, _var02 wz
1aa04     01 02 06 51 |  if_ne	add	_var02, #1
1aa08     F4 FF 9F 5D |  if_ne	jmp	#LR__2840
1aa0c     01 02 86 F1 | 	sub	_var02, #1
1aa10                 | LR__2841
1aa10     09 03 5A F2 | 	cmps	_var02, arg01 wcz
1aa14     1C 00 90 ED |  if_be	jmp	#LR__2843
1aa18     09 01 C2 FA | 	rdbyte	_var01, arg01
1aa1c     01 05 C2 FA | 	rdbyte	_var03, _var02
1aa20     09 05 42 FC | 	wrbyte	_var03, arg01
1aa24     01 01 42 FC | 	wrbyte	_var01, _var02
1aa28     01 12 06 F1 | 	add	arg01, #1
1aa2c     01 02 86 F1 | 	sub	_var02, #1
1aa30     DC FF 9F FD | 	jmp	#LR__2841
1aa34                 | LR__2842
1aa34                 | LR__2843
1aa34                 | __system___strrev_ret
1aa34     2D 00 64 FD | 	ret
1aa38                 | 
1aa38                 | __system___fmtpad
1aa38     06 4A 05 F6 | 	mov	COUNT_, #6
1aa3c     A8 00 A0 FD | 	call	#pushregs_
1aa40     09 1F 02 F6 | 	mov	local01, arg01
1aa44     0A 21 02 F6 | 	mov	local02, arg02
1aa48     0B 23 02 F6 | 	mov	local03, arg03
1aa4c     10 13 EA F8 | 	getbyte	arg01, local02, #1
1aa50     16 20 46 F0 | 	shr	local02, #22
1aa54     03 20 0E F5 | 	and	local02, #3 wz
1aa58     00 24 06 F6 | 	mov	local04, #0
1aa5c     01 20 06 A6 |  if_e	mov	local02, #1
1aa60     0C 21 CA F7 | 	test	local02, arg04 wz
1aa64     00 FA 05 A6 |  if_e	mov	result1, #0
1aa68     88 00 90 AD |  if_e	jmp	#LR__2853
1aa6c     09 23 C2 F2 | 	subr	local03, arg01
1aa70     01 22 56 F2 | 	cmps	local03, #1 wc
1aa74     00 FA 05 C6 |  if_b	mov	result1, #0
1aa78     78 00 90 CD |  if_b	jmp	#LR__2853
1aa7c     03 20 0E F2 | 	cmp	local02, #3 wz
1aa80     18 00 90 5D |  if_ne	jmp	#LR__2850
1aa84     01 18 0E F2 | 	cmp	arg04, #1 wz
1aa88     6E 20 62 FD | 	wrz	local02
1aa8c     10 23 02 F1 | 	add	local03, local02
1aa90     11 23 52 F6 | 	abs	local03, local03 wc
1aa94     01 22 46 F0 | 	shr	local03, #1
1aa98     11 23 82 F6 | 	negc	local03, local03
1aa9c                 | LR__2850
1aa9c     01 22 56 F2 | 	cmps	local03, #1 wc
1aaa0     4C 00 90 CD |  if_b	jmp	#LR__2852
1aaa4     11 27 02 F6 | 	mov	local05, local03
1aaa8                 | LR__2851
1aaa8     0F 21 02 F6 | 	mov	local02, local01
1aaac     0F 29 02 F6 | 	mov	local06, local01
1aab0     13 20 46 F7 | 	zerox	local02, #19
1aab4     14 28 46 F0 | 	shr	local06, #20
1aab8     02 28 66 F0 | 	shl	local06, #2
1aabc     ED 28 02 F1 | 	add	local06, __methods__
1aac0     14 29 02 FB | 	rdlong	local06, local06
1aac4     20 12 06 F6 | 	mov	arg01, #32
1aac8     F2 22 02 F6 | 	mov	local03, objptr
1aacc     10 E5 01 F6 | 	mov	objptr, local02
1aad0     2D 28 62 FD | 	call	local06
1aad4     11 E5 01 F6 | 	mov	objptr, local03
1aad8     FD 28 02 F6 | 	mov	local06, result1
1aadc     00 28 56 F2 | 	cmps	local06, #0 wc
1aae0     14 FB 01 C6 |  if_b	mov	result1, local06
1aae4     0C 00 90 CD |  if_b	jmp	#LR__2853
1aae8     14 25 02 F1 | 	add	local04, local06
1aaec     EE 27 6E FB | 	djnz	local05, #LR__2851
1aaf0                 | LR__2852
1aaf0     12 FB 01 F6 | 	mov	result1, local04
1aaf4                 | LR__2853
1aaf4     A7 F0 03 F6 | 	mov	ptra, fp
1aaf8     B2 00 A0 FD | 	call	#popregs_
1aafc                 | __system___fmtpad_ret
1aafc     2D 00 64 FD | 	ret
1ab00                 | 
1ab00                 | __system___uitoa
1ab00     04 4A 05 F6 | 	mov	COUNT_, #4
1ab04     A8 00 A0 FD | 	call	#pushregs_
1ab08     09 1F 02 F6 | 	mov	local01, arg01
1ab0c     00 1A 4E F2 | 	cmps	arg05, #0 wz
1ab10     0F 1B 02 F6 | 	mov	arg05, local01
1ab14     00 20 06 F6 | 	mov	local02, #0
1ab18     37 22 06 56 |  if_ne	mov	local03, #55
1ab1c     57 22 06 A6 |  if_e	mov	local03, #87
1ab20                 | LR__2860
1ab20     0B 15 12 FD | 	qdiv	arg02, arg03
1ab24     19 24 62 FD | 	getqy	local04
1ab28     0B 15 12 FD | 	qdiv	arg02, arg03
1ab2c     0A 24 16 F2 | 	cmp	local04, #10 wc
1ab30     30 24 06 C1 |  if_b	add	local04, #48
1ab34     11 25 02 31 |  if_ae	add	local04, local03
1ab38     0D 25 42 FC | 	wrbyte	local04, arg05
1ab3c     01 1A 06 F1 | 	add	arg05, #1
1ab40     01 20 06 F1 | 	add	local02, #1
1ab44     18 14 62 FD | 	getqx	arg02
1ab48     00 14 0E F2 | 	cmp	arg02, #0 wz
1ab4c     D0 FF 9F 5D |  if_ne	jmp	#LR__2860
1ab50     0C 21 12 F2 | 	cmp	local02, arg04 wc
1ab54     C8 FF 9F CD |  if_b	jmp	#LR__2860
1ab58     0D 01 48 FC | 	wrbyte	#0, arg05
1ab5c     0F 13 02 F6 | 	mov	arg01, local01
1ab60     8C FE BF FD | 	call	#__system___strrev
1ab64     10 FB 01 F6 | 	mov	result1, local02
1ab68     A7 F0 03 F6 | 	mov	ptra, fp
1ab6c     B2 00 A0 FD | 	call	#popregs_
1ab70                 | __system___uitoa_ret
1ab70     2D 00 64 FD | 	ret
1ab74                 | 
1ab74                 | __system__disassemble_0328
1ab74     10 4A 05 F6 | 	mov	COUNT_, #16
1ab78     A8 00 A0 FD | 	call	#pushregs_
1ab7c     09 1F 02 F6 | 	mov	local01, arg01
1ab80     0A 21 02 F6 | 	mov	local02, arg02
1ab84     0B 23 02 F6 | 	mov	local03, arg03
1ab88     0C 25 02 F6 | 	mov	local04, arg04
1ab8c     0D 27 02 F6 | 	mov	local05, arg05
1ab90     13 13 52 F6 | 	abs	arg01, local05 wc
1ab94     1F 28 C6 C9 |  if_b	decod	local06, #31
1ab98     00 28 06 36 |  if_ae	mov	local06, #0
1ab9c     B8 D3 BF FD | 	call	#__system___float_fromuns
1aba0     14 FB 61 F5 | 	xor	result1, local06
1aba4     FD 2A 02 F6 | 	mov	local07, result1
1aba8     00 2C 06 F6 | 	mov	local08, #0
1abac     0F 13 02 F6 | 	mov	arg01, local01
1abb0     00 14 06 F6 | 	mov	arg02, #0
1abb4     01 16 06 F6 | 	mov	arg03, #1
1abb8     FC DA BF FD | 	call	#__system___float_cmp
1abbc     00 FA 0D F2 | 	cmp	result1, #0 wz
1abc0     00 2E 06 A6 |  if_e	mov	local09, #0
1abc4     10 01 68 AC |  if_e	wrlong	#0, local02
1abc8     11 2F 62 AC |  if_e	wrlong	local09, local03
1abcc     8C 01 90 AD |  if_e	jmp	#LR__2882
1abd0     0F 13 02 F6 | 	mov	arg01, local01
1abd4     AC DF BF FD | 	call	#__system____builtin_ilogb
1abd8     FD 30 02 F6 | 	mov	local10, result1
1abdc     0A 26 0E F2 | 	cmp	local05, #10 wz
1abe0     24 00 90 5D |  if_ne	jmp	#LR__2870
1abe4     18 2F 02 F6 | 	mov	local09, local10
1abe8     01 2E 66 F0 | 	shl	local09, #1
1abec     18 2F 02 F1 | 	add	local09, local10
1abf0     17 31 52 F6 | 	abs	local10, local09 wc
1abf4     0A 30 16 FD | 	qdiv	local10, #10
1abf8     09 32 06 F6 | 	mov	local11, #9
1abfc     18 30 62 FD | 	getqx	local10
1ac00     18 31 82 F6 | 	negc	local10, local10
1ac04     04 00 90 FD | 	jmp	#LR__2871
1ac08                 | LR__2870
1ac08     18 32 06 F6 | 	mov	local11, #24
1ac0c                 | LR__2871
1ac0c                 | LR__2872
1ac0c     08 2C 56 F2 | 	cmps	local08, #8 wc
1ac10     01 2C 06 F1 | 	add	local08, #1
1ac14     60 00 90 3D |  if_ae	jmp	#LR__2873
1ac18     00 C0 1F FF 
1ac1c     00 12 06 F6 | 	mov	arg01, ##1065353216
1ac20     15 15 02 F6 | 	mov	arg02, local07
1ac24     18 17 02 F6 | 	mov	arg03, local10
1ac28     8C E3 BF FD | 	call	#__system___float_pow_n
1ac2c     FD 14 02 F6 | 	mov	arg02, result1
1ac30     0F 13 02 F6 | 	mov	arg01, local01
1ac34     50 D8 BF FD | 	call	#__system___float_div
1ac38     FD 34 02 F6 | 	mov	local12, result1
1ac3c     1A 13 02 F6 | 	mov	arg01, local12
1ac40     00 C0 1F FF 
1ac44     00 14 06 F6 | 	mov	arg02, ##1065353216
1ac48     01 16 06 F6 | 	mov	arg03, #1
1ac4c     68 DA BF FD | 	call	#__system___float_cmp
1ac50     00 FA 55 F2 | 	cmps	result1, #0 wc
1ac54     01 30 86 C1 |  if_b	sub	local10, #1
1ac58     B0 FF 9F CD |  if_b	jmp	#LR__2872
1ac5c     15 15 02 F6 | 	mov	arg02, local07
1ac60     1A 13 02 F6 | 	mov	arg01, local12
1ac64     01 16 66 F6 | 	neg	arg03, #1
1ac68     4C DA BF FD | 	call	#__system___float_cmp
1ac6c     00 FA 55 F2 | 	cmps	result1, #0 wc
1ac70     01 30 06 31 |  if_ae	add	local10, #1
1ac74     94 FF 9F 3D |  if_ae	jmp	#LR__2872
1ac78                 | LR__2873
1ac78     1A 13 02 F6 | 	mov	arg01, local12
1ac7c     04 DF BF FD | 	call	#__system____builtin_ilogb
1ac80     FD 36 02 F6 | 	mov	local13, result1
1ac84     1A 39 02 F6 | 	mov	local14, local12
1ac88     17 39 06 F4 | 	bitl	local14, #279
1ac8c     17 38 26 F4 | 	bith	local14, #23
1ac90     1B 39 62 F0 | 	shl	local14, local13
1ac94     02 26 0E F2 | 	cmp	local05, #2 wz
1ac98     02 24 66 A0 |  if_e	shl	local04, #2
1ac9c     00 3A 06 F6 | 	mov	local15, #0
1aca0     00 24 56 F2 | 	cmps	local04, #0 wc
1aca4     10 00 90 3D |  if_ae	jmp	#LR__2874
1aca8     18 25 C2 F2 | 	subr	local04, local10
1acac     00 24 56 F2 | 	cmps	local04, #0 wc
1acb0     A0 00 90 CD |  if_b	jmp	#LR__2881
1acb4     04 00 90 FD | 	jmp	#LR__2875
1acb8                 | LR__2874
1acb8     01 24 06 F1 | 	add	local04, #1
1acbc                 | LR__2875
1acbc     19 25 7A F3 | 	fles	local04, local11 wcz
1acc0     01 3C 06 F6 | 	mov	local16, #1
1acc4     97 22 48 FB | 	callpa	#(@LR__2877-@LR__2876)>>2,fcache_load_ptr_
1acc8                 | LR__2876
1acc8     00 40 00 FF 
1accc     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
1acd0     38 00 90 3D |  if_ae	jmp	#LR__2878
1acd4     01 24 56 F2 | 	cmps	local04, #1 wc
1acd8     01 24 86 F1 | 	sub	local04, #1
1acdc     2C 00 90 CD |  if_b	jmp	#LR__2878
1ace0     13 3B 02 FD | 	qmul	local15, local05
1ace4     1C 37 02 F6 | 	mov	local13, local14
1ace8     17 36 46 F0 | 	shr	local13, #23
1acec     17 39 06 F4 | 	bitl	local14, #279
1acf0     18 3A 62 FD | 	getqx	local15
1acf4     13 3D 02 FD | 	qmul	local16, local05
1acf8     18 3C 62 FD | 	getqx	local16
1acfc     13 39 02 FD | 	qmul	local14, local05
1ad00     1B 3B 02 F1 | 	add	local15, local13
1ad04     18 38 62 FD | 	getqx	local14
1ad08     BC FF 9F FD | 	jmp	#LR__2876
1ad0c                 | LR__2877
1ad0c                 | LR__2878
1ad0c     13 2F 02 F6 | 	mov	local09, local05
1ad10     17 2E 66 F0 | 	shl	local09, #23
1ad14     17 37 52 F6 | 	abs	local13, local09 wc
1ad18     01 36 46 F0 | 	shr	local13, #1
1ad1c     1B 37 82 F6 | 	negc	local13, local13
1ad20     1B 39 1A F2 | 	cmp	local14, local13 wcz
1ad24     20 00 90 1D |  if_a	jmp	#LR__2879
1ad28     17 26 66 F0 | 	shl	local05, #23
1ad2c     13 37 52 F6 | 	abs	local13, local05 wc
1ad30     01 36 46 F0 | 	shr	local13, #1
1ad34     1B 37 82 F6 | 	negc	local13, local13
1ad38     1B 39 0A F2 | 	cmp	local14, local13 wz
1ad3c     14 00 90 5D |  if_ne	jmp	#LR__2880
1ad40     01 3A CE F7 | 	test	local15, #1 wz
1ad44     0C 00 90 AD |  if_e	jmp	#LR__2880
1ad48                 | LR__2879
1ad48     01 3A 06 F1 | 	add	local15, #1
1ad4c     1E 3B 0A F2 | 	cmp	local15, local16 wz
1ad50     01 30 06 A1 |  if_e	add	local10, #1
1ad54                 | LR__2880
1ad54                 | LR__2881
1ad54     10 3B 62 FC | 	wrlong	local15, local02
1ad58     11 31 62 FC | 	wrlong	local10, local03
1ad5c                 | LR__2882
1ad5c     A7 F0 03 F6 | 	mov	ptra, fp
1ad60     B2 00 A0 FD | 	call	#popregs_
1ad64                 | __system__disassemble_0328_ret
1ad64     2D 00 64 FD | 	ret
1ad68                 | 
1ad68                 | __system__emitsign_0330
1ad68     00 FA 05 F6 | 	mov	result1, #0
1ad6c     00 14 0E F2 | 	cmp	arg02, #0 wz
1ad70     09 01 02 56 |  if_ne	mov	_var01, arg01
1ad74     01 12 06 51 |  if_ne	add	arg01, #1
1ad78     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
1ad7c     01 FA 05 56 |  if_ne	mov	result1, #1
1ad80     00 16 0E F2 | 	cmp	arg03, #0 wz
1ad84     09 61 48 5C |  if_ne	wrbyte	#48, arg01
1ad88     01 12 06 51 |  if_ne	add	arg01, #1
1ad8c     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
1ad90     02 FA 05 51 |  if_ne	add	result1, #2
1ad94                 | __system__emitsign_0330_ret
1ad94     2D 00 64 FD | 	ret
1ad98                 | 
1ad98                 | __system___gettxfunc
1ad98     01 4A 05 F6 | 	mov	COUNT_, #1
1ad9c     A8 00 A0 FD | 	call	#pushregs_
1ada0     A0 F8 BF FD | 	call	#__system____getftab
1ada4     FD 1E 0A F6 | 	mov	local01, result1 wz
1ada8     10 00 90 AD |  if_e	jmp	#LR__2890
1adac     08 1E 06 F1 | 	add	local01, #8
1adb0     0F 15 0A FB | 	rdlong	arg02, local01 wz
1adb4     08 1E 86 F1 | 	sub	local01, #8
1adb8     08 00 90 5D |  if_ne	jmp	#LR__2891
1adbc                 | LR__2890
1adbc     00 FA 05 F6 | 	mov	result1, #0
1adc0     0C 00 90 FD | 	jmp	#LR__2892
1adc4                 | LR__2891
1adc4     00 C8 02 FF 
1adc8     00 1E 46 F5 | 	or	local01, ##93323264
1adcc     0F FB 01 F6 | 	mov	result1, local01
1add0                 | LR__2892
1add0     A7 F0 03 F6 | 	mov	ptra, fp
1add4     B2 00 A0 FD | 	call	#popregs_
1add8                 | __system___gettxfunc_ret
1add8     2D 00 64 FD | 	ret
1addc                 | 
1addc                 | __system___getrxfunc
1addc     01 4A 05 F6 | 	mov	COUNT_, #1
1ade0     A8 00 A0 FD | 	call	#pushregs_
1ade4     5C F8 BF FD | 	call	#__system____getftab
1ade8     FD 1E 0A F6 | 	mov	local01, result1 wz
1adec     10 00 90 AD |  if_e	jmp	#LR__2900
1adf0     08 1E 06 F1 | 	add	local01, #8
1adf4     0F 15 0A FB | 	rdlong	arg02, local01 wz
1adf8     08 1E 86 F1 | 	sub	local01, #8
1adfc     08 00 90 5D |  if_ne	jmp	#LR__2901
1ae00                 | LR__2900
1ae00     00 FA 05 F6 | 	mov	result1, #0
1ae04     0C 00 90 FD | 	jmp	#LR__2902
1ae08                 | LR__2901
1ae08     00 D0 02 FF 
1ae0c     00 1E 46 F5 | 	or	local01, ##94371840
1ae10     0F FB 01 F6 | 	mov	result1, local01
1ae14                 | LR__2902
1ae14     A7 F0 03 F6 | 	mov	ptra, fp
1ae18     B2 00 A0 FD | 	call	#popregs_
1ae1c                 | __system___getrxfunc_ret
1ae1c     2D 00 64 FD | 	ret
1ae20                 | 
1ae20                 | __system___getiolock_0370
1ae20     01 4A 05 F6 | 	mov	COUNT_, #1
1ae24     A8 00 A0 FD | 	call	#pushregs_
1ae28     18 F8 BF FD | 	call	#__system____getftab
1ae2c     FD 1E 0A F6 | 	mov	local01, result1 wz
1ae30     10 00 90 AD |  if_e	jmp	#LR__2910
1ae34     08 1E 06 F1 | 	add	local01, #8
1ae38     0F FB 09 FB | 	rdlong	result1, local01 wz
1ae3c     08 1E 86 F1 | 	sub	local01, #8
1ae40     18 00 90 5D |  if_ne	jmp	#LR__2911
1ae44                 | LR__2910
1ae44     01 00 00 FF 
1ae48     D4 E8 05 F1 | 	add	ptr___system__dat__, ##724
1ae4c     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
1ae50     01 00 00 FF 
1ae54     D4 E8 85 F1 | 	sub	ptr___system__dat__, ##724
1ae58     08 00 90 FD | 	jmp	#LR__2912
1ae5c                 | LR__2911
1ae5c     0C 1E 06 F1 | 	add	local01, #12
1ae60     0F FB 01 F6 | 	mov	result1, local01
1ae64                 | LR__2912
1ae64     A7 F0 03 F6 | 	mov	ptra, fp
1ae68     B2 00 A0 FD | 	call	#popregs_
1ae6c                 | __system___getiolock_0370_ret
1ae6c     2D 00 64 FD | 	ret
1ae70                 | 
1ae70                 | __system____ScanForChar
1ae70     09 01 02 F6 | 	mov	_var01, arg01
1ae74     09 03 02 F6 | 	mov	_var02, arg01
1ae78     97 06 48 FB | 	callpa	#(@LR__2921-@LR__2920)>>2,fcache_load_ptr_
1ae7c                 | LR__2920
1ae7c     01 FB C9 FA | 	rdbyte	result1, _var02 wz
1ae80     01 02 06 51 |  if_ne	add	_var02, #1
1ae84     F4 FF 9F 5D |  if_ne	jmp	#LR__2920
1ae88                 | LR__2921
1ae88     09 03 82 F1 | 	sub	_var02, arg01
1ae8c     01 FB 01 F6 | 	mov	result1, _var02
1ae90     FD 12 0A F6 | 	mov	arg01, result1 wz
1ae94     00 FA 05 A6 |  if_e	mov	result1, #0
1ae98     B8 00 90 AD |  if_e	jmp	#LR__2928
1ae9c     0A 05 02 F6 | 	mov	_var03, arg02
1aea0     07 04 4E F7 | 	zerox	_var03, #7 wz
1aea4     00 FA 05 A6 |  if_e	mov	result1, #0
1aea8     A8 00 90 AD |  if_e	jmp	#LR__2928
1aeac     01 16 16 F2 | 	cmp	arg03, #1 wc
1aeb0     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
1aeb4     01 16 06 86 |  if_c_and_z	mov	arg03, #1
1aeb8     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
1aebc     94 00 90 4D |  if_c_and_nz	jmp	#LR__2928
1aec0     09 17 1A F2 | 	cmp	arg03, arg01 wcz
1aec4     10 00 90 ED |  if_be	jmp	#LR__2922
1aec8     00 18 0E F2 | 	cmp	arg04, #0 wz
1aecc     00 FA 05 A6 |  if_e	mov	result1, #0
1aed0     80 00 90 AD |  if_e	jmp	#LR__2928
1aed4     09 17 02 F6 | 	mov	arg03, arg01
1aed8                 | LR__2922
1aed8     01 16 86 F1 | 	sub	arg03, #1
1aedc     00 18 0E F2 | 	cmp	arg04, #0 wz
1aee0     38 00 90 5D |  if_ne	jmp	#LR__2924
1aee4     0B 07 02 F6 | 	mov	_var04, arg03
1aee8     09 09 02 F6 | 	mov	_var05, arg01
1aeec                 | LR__2923
1aeec     04 07 12 F2 | 	cmp	_var04, _var05 wc
1aef0     5C 00 90 3D |  if_ae	jmp	#LR__2927
1aef4     03 05 02 F6 | 	mov	_var03, _var04
1aef8     00 05 02 F1 | 	add	_var03, _var01
1aefc     02 05 C2 FA | 	rdbyte	_var03, _var03
1af00     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
1af04     0C 05 0A F2 | 	cmp	_var03, arg04 wz
1af08     01 06 06 A1 |  if_e	add	_var04, #1
1af0c     03 FB 01 A6 |  if_e	mov	result1, _var04
1af10     40 00 90 AD |  if_e	jmp	#LR__2928
1af14     01 06 06 F1 | 	add	_var04, #1
1af18     D0 FF 9F FD | 	jmp	#LR__2923
1af1c                 | LR__2924
1af1c     0B 07 02 F6 | 	mov	_var04, arg03
1af20                 | LR__2925
1af20     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
1af24     28 00 90 1D |  if_a	jmp	#LR__2926
1af28     03 09 02 F6 | 	mov	_var05, _var04
1af2c     00 09 02 F1 | 	add	_var05, _var01
1af30     04 05 C2 FA | 	rdbyte	_var03, _var05
1af34     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
1af38     04 05 0A F2 | 	cmp	_var03, _var05 wz
1af3c     01 06 06 A1 |  if_e	add	_var04, #1
1af40     03 FB 01 A6 |  if_e	mov	result1, _var04
1af44     0C 00 90 AD |  if_e	jmp	#LR__2928
1af48     01 06 86 F1 | 	sub	_var04, #1
1af4c     D0 FF 9F FD | 	jmp	#LR__2925
1af50                 | LR__2926
1af50                 | LR__2927
1af50     00 FA 05 F6 | 	mov	result1, #0
1af54                 | LR__2928
1af54                 | __system____ScanForChar_ret
1af54     2D 00 64 FD | 	ret
1af58                 | 
1af58                 | __system___basic_dir
1af58     05 4A 05 F6 | 	mov	COUNT_, #5
1af5c     A8 00 A0 FD | 	call	#pushregs_
1af60     4C F0 07 F1 | 	add	ptra, #76
1af64     04 4E 05 F1 | 	add	fp, #4
1af68     A7 12 62 FC | 	wrlong	arg01, fp
1af6c     04 4E 05 F1 | 	add	fp, #4
1af70     A7 14 62 FC | 	wrlong	arg02, fp
1af74     04 4E 85 F1 | 	sub	fp, #4
1af78     A7 14 0A FB | 	rdlong	arg02, fp wz
1af7c     04 4E 85 F1 | 	sub	fp, #4
1af80     04 4E 05 51 |  if_ne	add	fp, #4
1af84     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1af88     04 4E 85 51 |  if_ne	sub	fp, #4
1af8c     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
1af90     70 00 90 AD |  if_e	jmp	#LR__2930
1af94     03 00 00 FF 
1af98     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1af9c     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1afa0     03 00 00 FF 
1afa4     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1afa8     03 00 00 5F 
1afac     28 E9 05 51 |  if_ne	add	ptr___system__dat__, ##1832
1afb0     F4 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
1afb4     03 00 00 5F 
1afb8     28 E9 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
1afbc     18 EA BF 5D |  if_ne	call	#__system__closedir
1afc0     25 01 00 FF 
1afc4     A4 12 06 F6 | 	mov	arg01, ##@LR__4088
1afc8     20 E9 BF FD | 	call	#__system__opendir
1afcc     03 00 00 FF 
1afd0     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1afd4     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1afd8     08 4E 05 F1 | 	add	fp, #8
1afdc     A7 20 02 FB | 	rdlong	local02, fp
1afe0     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1afe4     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1afe8     04 4E 85 F1 | 	sub	fp, #4
1afec     A7 20 02 FB | 	rdlong	local02, fp
1aff0     04 4E 85 F1 | 	sub	fp, #4
1aff4     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1aff8     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1affc     03 00 00 FF 
1b000     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1b004                 | LR__2930
1b004     03 00 00 FF 
1b008     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1b00c     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1b010     03 00 00 FF 
1b014     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1b018     25 01 00 AF 
1b01c     A6 FA 05 A6 |  if_e	mov	result1, ##@LR__4089
1b020     84 02 90 AD |  if_e	jmp	#LR__2943
1b024                 | LR__2931
1b024     03 00 00 FF 
1b028     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1b02c     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1b030     03 00 00 FF 
1b034     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1b038     10 EA BF FD | 	call	#__system__readdir
1b03c     0C 4E 05 F1 | 	add	fp, #12
1b040     A7 FA 61 FC | 	wrlong	result1, fp
1b044     0C 4E 85 F1 | 	sub	fp, #12
1b048     00 FA 0D F2 | 	cmp	result1, #0 wz
1b04c     38 00 90 5D |  if_ne	jmp	#LR__2932
1b050     03 00 00 FF 
1b054     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1b058     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1b05c     03 00 00 FF 
1b060     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1b064     70 E9 BF FD | 	call	#__system__closedir
1b068     03 00 00 FF 
1b06c     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1b070     F4 00 68 FC | 	wrlong	#0, ptr___system__dat__
1b074     03 00 00 FF 
1b078     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1b07c     25 01 00 FF 
1b080     A8 FA 05 F6 | 	mov	result1, ##@LR__4090
1b084     20 02 90 FD | 	jmp	#LR__2943
1b088                 | LR__2932
1b088     0C 4E 05 F1 | 	add	fp, #12
1b08c     A7 12 02 FB | 	rdlong	arg01, fp
1b090     0C 4E 85 F1 | 	sub	fp, #12
1b094     03 00 00 FF 
1b098     30 E9 05 F1 | 	add	ptr___system__dat__, ##1840
1b09c     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1b0a0     03 00 00 FF 
1b0a4     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1b0a8     48 07 B0 FD | 	call	#__system___pat_match
1b0ac     00 FA 0D F2 | 	cmp	result1, #0 wz
1b0b0     70 FF 9F AD |  if_e	jmp	#LR__2931
1b0b4     03 00 00 FF 
1b0b8     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1b0bc     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1b0c0     03 00 00 FF 
1b0c4     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1b0c8     78 01 90 AD |  if_e	jmp	#LR__2939
1b0cc     0C 4E 05 F1 | 	add	fp, #12
1b0d0     A7 12 02 FB | 	rdlong	arg01, fp
1b0d4     04 4E 05 F1 | 	add	fp, #4
1b0d8     A7 14 02 F6 | 	mov	arg02, fp
1b0dc     10 4E 85 F1 | 	sub	fp, #16
1b0e0     68 F2 BF FD | 	call	#__system__stat
1b0e4     40 4E 05 F1 | 	add	fp, #64
1b0e8     A7 FA 61 FC | 	wrlong	result1, fp
1b0ec     40 4E 85 F1 | 	sub	fp, #64
1b0f0     00 FA 0D F2 | 	cmp	result1, #0 wz
1b0f4     25 01 00 5F 
1b0f8     AA FA 05 56 |  if_ne	mov	result1, ##@LR__4091
1b0fc     A8 01 90 5D |  if_ne	jmp	#LR__2943
1b100     18 4E 05 F1 | 	add	fp, #24
1b104     A7 20 02 FB | 	rdlong	local02, fp
1b108     78 00 00 FF 
1b10c     00 20 06 F5 | 	and	local02, ##61440
1b110     2C 4E 05 F1 | 	add	fp, #44
1b114     A7 20 62 FC | 	wrlong	local02, fp
1b118     38 4E 85 F1 | 	sub	fp, #56
1b11c     A7 20 02 FB | 	rdlong	local02, fp
1b120     0C 4E 85 F1 | 	sub	fp, #12
1b124     10 21 C2 FA | 	rdbyte	local02, local02
1b128     2E 20 0E F2 | 	cmp	local02, #46 wz
1b12c     08 4E 05 A1 |  if_e	add	fp, #8
1b130     A7 04 68 AC |  if_e	wrlong	#2, fp
1b134     08 4E C5 F3 | 	sumz	fp, #8
1b138     A7 00 68 5C |  if_ne	wrlong	#0, fp
1b13c     08 4E 85 51 |  if_ne	sub	fp, #8
1b140     44 4E 05 F1 | 	add	fp, #68
1b144     A7 20 02 FB | 	rdlong	local02, fp
1b148     44 4E 85 F1 | 	sub	fp, #68
1b14c     08 00 00 FF 
1b150     00 20 0E F2 | 	cmp	local02, ##4096 wz
1b154     18 00 90 5D |  if_ne	jmp	#LR__2933
1b158     08 4E 05 F1 | 	add	fp, #8
1b15c     A7 20 02 FB | 	rdlong	local02, fp
1b160     10 20 46 F5 | 	or	local02, #16
1b164     A7 20 62 FC | 	wrlong	local02, fp
1b168     08 4E 85 F1 | 	sub	fp, #8
1b16c     AC 00 90 FD | 	jmp	#LR__2938
1b170                 | LR__2933
1b170     44 4E 05 F1 | 	add	fp, #68
1b174     A7 20 02 FB | 	rdlong	local02, fp
1b178     44 4E 85 F1 | 	sub	fp, #68
1b17c     10 00 00 FF 
1b180     00 20 0E F2 | 	cmp	local02, ##8192 wz
1b184     44 4E 05 51 |  if_ne	add	fp, #68
1b188     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1b18c     44 4E 85 51 |  if_ne	sub	fp, #68
1b190     18 00 00 5F 
1b194     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
1b198     44 4E 05 51 |  if_ne	add	fp, #68
1b19c     0F 23 02 56 |  if_ne	mov	local03, local01
1b1a0     44 4E 85 51 |  if_ne	sub	fp, #68
1b1a4     20 00 00 5F 
1b1a8     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
1b1ac     18 00 90 5D |  if_ne	jmp	#LR__2934
1b1b0     08 4E 05 F1 | 	add	fp, #8
1b1b4     A7 20 02 FB | 	rdlong	local02, fp
1b1b8     04 20 46 F5 | 	or	local02, #4
1b1bc     A7 20 62 FC | 	wrlong	local02, fp
1b1c0     08 4E 85 F1 | 	sub	fp, #8
1b1c4     54 00 90 FD | 	jmp	#LR__2937
1b1c8                 | LR__2934
1b1c8     18 4E 05 F1 | 	add	fp, #24
1b1cc     A7 20 02 FB | 	rdlong	local02, fp
1b1d0     18 4E 85 F1 | 	sub	fp, #24
1b1d4     92 20 CE F7 | 	test	local02, #146 wz
1b1d8     18 00 90 5D |  if_ne	jmp	#LR__2935
1b1dc     08 4E 05 F1 | 	add	fp, #8
1b1e0     A7 20 02 FB | 	rdlong	local02, fp
1b1e4     01 20 46 F5 | 	or	local02, #1
1b1e8     A7 20 62 FC | 	wrlong	local02, fp
1b1ec     08 4E 85 F1 | 	sub	fp, #8
1b1f0     28 00 90 FD | 	jmp	#LR__2936
1b1f4                 | LR__2935
1b1f4     44 4E 05 F1 | 	add	fp, #68
1b1f8     A7 24 02 FB | 	rdlong	local04, fp
1b1fc     44 4E 85 F1 | 	sub	fp, #68
1b200     08 00 00 FF 
1b204     00 24 0E F2 | 	cmp	local04, ##4096 wz
1b208     08 4E 05 51 |  if_ne	add	fp, #8
1b20c     A7 24 02 5B |  if_ne	rdlong	local04, fp
1b210     20 24 46 55 |  if_ne	or	local04, #32
1b214     A7 24 62 5C |  if_ne	wrlong	local04, fp
1b218     08 4E 85 51 |  if_ne	sub	fp, #8
1b21c                 | LR__2936
1b21c                 | LR__2937
1b21c                 | LR__2938
1b21c     08 4E 05 F1 | 	add	fp, #8
1b220     A7 24 02 FB | 	rdlong	local04, fp
1b224     08 4E 85 F1 | 	sub	fp, #8
1b228     03 00 00 FF 
1b22c     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1b230     F4 1E 02 FB | 	rdlong	local01, ptr___system__dat__
1b234     03 00 00 FF 
1b238     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1b23c     0F 25 CA F7 | 	test	local04, local01 wz
1b240     E0 FD 9F AD |  if_e	jmp	#LR__2931
1b244                 | LR__2939
1b244     0C 4E 05 F1 | 	add	fp, #12
1b248     A7 12 02 FB | 	rdlong	arg01, fp
1b24c     0C 4E 85 F1 | 	sub	fp, #12
1b250     09 27 02 F6 | 	mov	local05, arg01
1b254     97 06 48 FB | 	callpa	#(@LR__2941-@LR__2940)>>2,fcache_load_ptr_
1b258                 | LR__2940
1b258     13 FB C9 FA | 	rdbyte	result1, local05 wz
1b25c     01 26 06 51 |  if_ne	add	local05, #1
1b260     F4 FF 9F 5D |  if_ne	jmp	#LR__2940
1b264                 | LR__2941
1b264     13 13 C2 F2 | 	subr	arg01, local05
1b268     01 12 06 F1 | 	add	arg01, #1
1b26c     68 E0 BF FD | 	call	#__system___gc_alloc_managed
1b270     48 4E 05 F1 | 	add	fp, #72
1b274     A7 FA 61 FC | 	wrlong	result1, fp
1b278     48 4E 85 F1 | 	sub	fp, #72
1b27c     00 FA 0D F2 | 	cmp	result1, #0 wz
1b280     18 00 90 AD |  if_e	jmp	#LR__2942
1b284     48 4E 05 F1 | 	add	fp, #72
1b288     A7 12 02 FB | 	rdlong	arg01, fp
1b28c     3C 4E 85 F1 | 	sub	fp, #60
1b290     A7 14 02 FB | 	rdlong	arg02, fp
1b294     0C 4E 85 F1 | 	sub	fp, #12
1b298     88 A5 BF FD | 	call	#__system____builtin_strcpy
1b29c                 | LR__2942
1b29c     48 4E 05 F1 | 	add	fp, #72
1b2a0     A7 FA 01 FB | 	rdlong	result1, fp
1b2a4     48 4E 85 F1 | 	sub	fp, #72
1b2a8                 | LR__2943
1b2a8     A7 F0 03 F6 | 	mov	ptra, fp
1b2ac     B2 00 A0 FD | 	call	#popregs_
1b2b0                 | __system___basic_dir_ret
1b2b0     2D 00 64 FD | 	ret
1b2b4                 | 
1b2b4                 | __system__pack_0436
1b2b4     09 01 02 F6 | 	mov	_var01, arg01
1b2b8     7F 16 06 F1 | 	add	arg03, #127
1b2bc     04 18 CE F7 | 	test	arg04, #4 wz
1b2c0     10 00 90 AD |  if_e	jmp	#LR__2950
1b2c4     00 00 0E F2 | 	cmp	_var01, #0 wz
1b2c8     16 00 C6 A9 |  if_e	decod	_var01, #22
1b2cc     F7 00 26 F4 | 	bith	_var01, #247
1b2d0     B4 00 90 FD | 	jmp	#LR__2959
1b2d4                 | LR__2950
1b2d4     02 18 CE F7 | 	test	arg04, #2 wz
1b2d8     00 C0 3F 5F 
1b2dc     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
1b2e0     00 14 06 56 |  if_ne	mov	arg02, #0
1b2e4     A0 00 90 5D |  if_ne	jmp	#LR__2958
1b2e8     08 18 CE F7 | 	test	arg04, #8 wz
1b2ec     00 00 06 56 |  if_ne	mov	_var01, #0
1b2f0     94 00 90 5D |  if_ne	jmp	#LR__2957
1b2f4     FF 16 56 F2 | 	cmps	arg03, #255 wc
1b2f8     00 C0 3F 3F 
1b2fc     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
1b300     00 14 06 36 |  if_ae	mov	arg02, #0
1b304     80 00 90 3D |  if_ae	jmp	#LR__2956
1b308     01 16 56 F2 | 	cmps	arg03, #1 wc
1b30c     6C 00 90 3D |  if_ae	jmp	#LR__2954
1b310     01 14 46 F0 | 	shr	arg02, #1
1b314     00 03 02 F6 | 	mov	_var02, _var01
1b318     01 02 06 F5 | 	and	_var02, #1
1b31c     1F 02 66 F0 | 	shl	_var02, #31
1b320     01 15 42 F5 | 	or	arg02, _var02
1b324     01 00 46 F0 | 	shr	_var01, #1
1b328     97 1E 48 FB | 	callpa	#(@LR__2952-@LR__2951)>>2,fcache_load_ptr_
1b32c                 | LR__2951
1b32c     00 16 56 F2 | 	cmps	arg03, #0 wc
1b330     34 00 90 3D |  if_ae	jmp	#LR__2953
1b334     00 00 0E F2 | 	cmp	_var01, #0 wz
1b338     2C 00 90 AD |  if_e	jmp	#LR__2953
1b33c     0A 13 02 F6 | 	mov	arg01, arg02
1b340     01 12 06 F5 | 	and	arg01, #1
1b344     01 16 06 F1 | 	add	arg03, #1
1b348     01 14 46 F0 | 	shr	arg02, #1
1b34c     00 03 02 F6 | 	mov	_var02, _var01
1b350     01 02 06 F5 | 	and	_var02, #1
1b354     1F 02 66 F0 | 	shl	_var02, #31
1b358     01 15 42 F5 | 	or	arg02, _var02
1b35c     09 15 42 F5 | 	or	arg02, arg01
1b360     01 00 46 F0 | 	shr	_var01, #1
1b364     C4 FF 9F FD | 	jmp	#LR__2951
1b368                 | LR__2952
1b368                 | LR__2953
1b368     00 16 56 F2 | 	cmps	arg03, #0 wc
1b36c     18 00 90 3D |  if_ae	jmp	#LR__2955
1b370     00 14 0E F2 | 	cmp	arg02, #0 wz
1b374     6F 14 62 FD | 	wrnz	arg02
1b378     0C 00 90 FD | 	jmp	#LR__2955
1b37c                 | LR__2954
1b37c     17 01 06 F4 | 	bitl	_var01, #279
1b380     17 16 66 F0 | 	shl	arg03, #23
1b384     0B 01 42 F5 | 	or	_var01, arg03
1b388                 | LR__2955
1b388                 | LR__2956
1b388                 | LR__2957
1b388                 | LR__2958
1b388                 | LR__2959
1b388     01 00 CE F7 | 	test	_var01, #1 wz
1b38c     01 14 46 55 |  if_ne	or	arg02, #1
1b390     0A 17 02 F6 | 	mov	arg03, arg02
1b394     00 02 06 F6 | 	mov	_var02, #0
1b398     FF FF 3F FF 
1b39c     FF 15 06 F1 | 	add	arg02, ##2147483647
1b3a0     0B 15 12 F2 | 	cmp	arg02, arg03 wc
1b3a4     01 02 06 C6 |  if_b	mov	_var02, #1
1b3a8     01 01 02 F1 | 	add	_var01, _var02
1b3ac     01 18 CE F7 | 	test	arg04, #1 wz
1b3b0     1F 00 26 54 |  if_ne	bith	_var01, #31
1b3b4     00 FB 01 F6 | 	mov	result1, _var01
1b3b8                 | __system__pack_0436_ret
1b3b8     2D 00 64 FD | 	ret
1b3bc                 | 
1b3bc                 | __system___rxtxioctl_0525
1b3bc     00 15 0E F2 | 	cmp	arg02, #256 wz
1b3c0     0C 00 90 AD |  if_e	jmp	#LR__2960
1b3c4     01 15 0E F2 | 	cmp	arg02, #257 wz
1b3c8     1C 00 90 AD |  if_e	jmp	#LR__2961
1b3cc     30 00 90 FD | 	jmp	#LR__2962
1b3d0                 | LR__2960
1b3d0     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1b3d4     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1b3d8     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1b3dc     0B FB 61 FC | 	wrlong	result1, arg03
1b3e0     00 FA 05 F6 | 	mov	result1, #0
1b3e4     28 00 90 FD | 	jmp	#LR__2963
1b3e8                 | LR__2961
1b3e8     0B 13 02 FB | 	rdlong	arg01, arg03
1b3ec     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1b3f0     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1b3f4     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1b3f8     00 FA 05 F6 | 	mov	result1, #0
1b3fc     10 00 90 FD | 	jmp	#LR__2963
1b400                 | LR__2962
1b400     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1b404     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
1b408     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1b40c     01 FA 65 F6 | 	neg	result1, #1
1b410                 | LR__2963
1b410                 | __system___rxtxioctl_0525_ret
1b410     2D 00 64 FD | 	ret
1b414                 | 
1b414                 | __system____dummy_flush_0526
1b414     00 FA 05 F6 | 	mov	result1, #0
1b418                 | __system____dummy_flush_0526_ret
1b418     2D 00 64 FD | 	ret
1b41c                 | 
1b41c                 | __system___vfsread
1b41c     03 4A 05 F6 | 	mov	COUNT_, #3
1b420     A8 00 A0 FD | 	call	#pushregs_
1b424     28 F0 07 F1 | 	add	ptra, #40
1b428     04 4E 05 F1 | 	add	fp, #4
1b42c     A7 12 62 FC | 	wrlong	arg01, fp
1b430     04 4E 05 F1 | 	add	fp, #4
1b434     A7 14 62 FC | 	wrlong	arg02, fp
1b438     04 4E 05 F1 | 	add	fp, #4
1b43c     A7 16 62 FC | 	wrlong	arg03, fp
1b440     04 4E 85 F1 | 	sub	fp, #4
1b444     A7 FA 01 FB | 	rdlong	result1, fp
1b448     14 4E 05 F1 | 	add	fp, #20
1b44c     A7 FA 61 FC | 	wrlong	result1, fp
1b450     04 4E 05 F1 | 	add	fp, #4
1b454     A7 00 68 FC | 	wrlong	#0, fp
1b458     1C 4E 85 F1 | 	sub	fp, #28
1b45c     A7 12 02 FB | 	rdlong	arg01, fp
1b460     04 4E 85 F1 | 	sub	fp, #4
1b464     08 12 06 F1 | 	add	arg01, #8
1b468     09 FB 01 FB | 	rdlong	result1, arg01
1b46c     01 FA CD F7 | 	test	result1, #1 wz
1b470     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1b474     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1b478     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1b47c     01 FA 65 A6 |  if_e	neg	result1, #1
1b480     74 02 90 AD |  if_e	jmp	#LR__2976
1b484     04 4E 05 F1 | 	add	fp, #4
1b488     A7 12 02 FB | 	rdlong	arg01, fp
1b48c     04 4E 85 F1 | 	sub	fp, #4
1b490     14 12 06 F1 | 	add	arg01, #20
1b494     09 FB 09 FB | 	rdlong	result1, arg01 wz
1b498     B8 00 90 AD |  if_e	jmp	#LR__2971
1b49c     04 4E 05 F1 | 	add	fp, #4
1b4a0     A7 12 02 FB | 	rdlong	arg01, fp
1b4a4     09 17 02 F6 | 	mov	arg03, arg01
1b4a8     14 16 06 F1 | 	add	arg03, #20
1b4ac     0B 1F 02 FB | 	rdlong	local01, arg03
1b4b0     0F 21 02 F6 | 	mov	local02, local01
1b4b4     13 1E 46 F7 | 	zerox	local01, #19
1b4b8     14 20 46 F0 | 	shr	local02, #20
1b4bc     02 20 66 F0 | 	shl	local02, #2
1b4c0     ED 20 02 F1 | 	add	local02, __methods__
1b4c4     10 21 02 FB | 	rdlong	local02, local02
1b4c8     04 4E 05 F1 | 	add	fp, #4
1b4cc     A7 14 02 FB | 	rdlong	arg02, fp
1b4d0     04 4E 05 F1 | 	add	fp, #4
1b4d4     A7 16 02 FB | 	rdlong	arg03, fp
1b4d8     0C 4E 85 F1 | 	sub	fp, #12
1b4dc     F2 22 02 F6 | 	mov	local03, objptr
1b4e0     0F E5 01 F6 | 	mov	objptr, local01
1b4e4     2D 20 62 FD | 	call	local02
1b4e8     11 E5 01 F6 | 	mov	objptr, local03
1b4ec     10 4E 05 F1 | 	add	fp, #16
1b4f0     A7 FA 61 FC | 	wrlong	result1, fp
1b4f4     10 4E 85 F1 | 	sub	fp, #16
1b4f8     00 FA 55 F2 | 	cmps	result1, #0 wc
1b4fc     44 00 90 3D |  if_ae	jmp	#LR__2970
1b500     04 4E 05 F1 | 	add	fp, #4
1b504     A7 22 02 FB | 	rdlong	local03, fp
1b508     11 1F 02 F6 | 	mov	local01, local03
1b50c     08 22 06 F1 | 	add	local03, #8
1b510     11 21 02 FB | 	rdlong	local02, local03
1b514     20 20 46 F5 | 	or	local02, #32
1b518     08 1E 06 F1 | 	add	local01, #8
1b51c     0F 21 62 FC | 	wrlong	local02, local01
1b520     0C 4E 05 F1 | 	add	fp, #12
1b524     A7 12 0A FB | 	rdlong	arg01, fp wz
1b528     10 4E 85 F1 | 	sub	fp, #16
1b52c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1b530     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1b534     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1b538     01 FA 65 56 |  if_ne	neg	result1, #1
1b53c     00 FA 05 A6 |  if_e	mov	result1, #0
1b540     B4 01 90 FD | 	jmp	#LR__2976
1b544                 | LR__2970
1b544     10 4E 05 F1 | 	add	fp, #16
1b548     A7 FA 01 FB | 	rdlong	result1, fp
1b54c     10 4E 85 F1 | 	sub	fp, #16
1b550     A4 01 90 FD | 	jmp	#LR__2976
1b554                 | LR__2971
1b554     04 4E 05 F1 | 	add	fp, #4
1b558     A7 12 02 FB | 	rdlong	arg01, fp
1b55c     20 12 06 F1 | 	add	arg01, #32
1b560     09 13 0A FB | 	rdlong	arg01, arg01 wz
1b564     14 4E 05 F1 | 	add	fp, #20
1b568     A7 12 62 FC | 	wrlong	arg01, fp
1b56c     18 4E 85 F1 | 	sub	fp, #24
1b570     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1b574     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1b578     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1b57c     01 FA 65 A6 |  if_e	neg	result1, #1
1b580     74 01 90 AD |  if_e	jmp	#LR__2976
1b584     04 4E 05 F1 | 	add	fp, #4
1b588     A7 22 02 FB | 	rdlong	local03, fp
1b58c     04 4E 85 F1 | 	sub	fp, #4
1b590     28 22 06 F1 | 	add	local03, #40
1b594     11 21 0A FB | 	rdlong	local02, local03 wz
1b598     7C 00 90 AD |  if_e	jmp	#LR__2973
1b59c     04 4E 05 F1 | 	add	fp, #4
1b5a0     A7 12 02 FB | 	rdlong	arg01, fp
1b5a4     09 23 02 F6 | 	mov	local03, arg01
1b5a8     28 22 06 F1 | 	add	local03, #40
1b5ac     11 1F 02 FB | 	rdlong	local01, local03
1b5b0     0F 21 02 F6 | 	mov	local02, local01
1b5b4     13 1E 46 F7 | 	zerox	local01, #19
1b5b8     14 20 46 F0 | 	shr	local02, #20
1b5bc     02 20 66 F0 | 	shl	local02, #2
1b5c0     ED 20 02 F1 | 	add	local02, __methods__
1b5c4     10 21 02 FB | 	rdlong	local02, local02
1b5c8     20 4E 05 F1 | 	add	fp, #32
1b5cc     A7 16 02 F6 | 	mov	arg03, fp
1b5d0     24 4E 85 F1 | 	sub	fp, #36
1b5d4     00 15 06 F6 | 	mov	arg02, #256
1b5d8     F2 22 02 F6 | 	mov	local03, objptr
1b5dc     0F E5 01 F6 | 	mov	objptr, local01
1b5e0     2D 20 62 FD | 	call	local02
1b5e4     11 E5 01 F6 | 	mov	objptr, local03
1b5e8     10 4E 05 F1 | 	add	fp, #16
1b5ec     A7 FA 61 FC | 	wrlong	result1, fp
1b5f0     00 FA 4D F2 | 	cmps	result1, #0 wz
1b5f4     10 4E 85 F1 | 	sub	fp, #16
1b5f8     1C 00 90 5D |  if_ne	jmp	#LR__2972
1b5fc     24 4E 05 F1 | 	add	fp, #36
1b600     A7 20 02 FB | 	rdlong	local02, fp
1b604     24 4E 85 F1 | 	sub	fp, #36
1b608     02 20 CE F7 | 	test	local02, #2 wz
1b60c     20 4E 05 51 |  if_ne	add	fp, #32
1b610     A7 02 68 5C |  if_ne	wrlong	#1, fp
1b614     20 4E 85 51 |  if_ne	sub	fp, #32
1b618                 | LR__2972
1b618                 | LR__2973
1b618     10 4E 05 F1 | 	add	fp, #16
1b61c     A7 00 68 FC | 	wrlong	#0, fp
1b620     10 4E 85 F1 | 	sub	fp, #16
1b624                 | LR__2974
1b624     0C 4E 05 F1 | 	add	fp, #12
1b628     A7 22 02 FB | 	rdlong	local03, fp
1b62c     0C 4E 85 F1 | 	sub	fp, #12
1b630     01 22 16 F2 | 	cmp	local03, #1 wc
1b634     B4 00 90 CD |  if_b	jmp	#LR__2975
1b638     18 4E 05 F1 | 	add	fp, #24
1b63c     A7 20 02 FB | 	rdlong	local02, fp
1b640     10 23 02 F6 | 	mov	local03, local02
1b644     13 22 46 F7 | 	zerox	local03, #19
1b648     14 20 46 F0 | 	shr	local02, #20
1b64c     02 20 66 F0 | 	shl	local02, #2
1b650     ED 20 02 F1 | 	add	local02, __methods__
1b654     10 21 02 FB | 	rdlong	local02, local02
1b658     14 4E 85 F1 | 	sub	fp, #20
1b65c     A7 12 02 FB | 	rdlong	arg01, fp
1b660     04 4E 85 F1 | 	sub	fp, #4
1b664     F2 1E 02 F6 | 	mov	local01, objptr
1b668     11 E5 01 F6 | 	mov	objptr, local03
1b66c     2D 20 62 FD | 	call	local02
1b670     0F E5 01 F6 | 	mov	objptr, local01
1b674     14 4E 05 F1 | 	add	fp, #20
1b678     A7 FA 61 FC | 	wrlong	result1, fp
1b67c     14 4E 85 F1 | 	sub	fp, #20
1b680     00 FA 55 F2 | 	cmps	result1, #0 wc
1b684     64 00 90 CD |  if_b	jmp	#LR__2975
1b688     1C 4E 05 F1 | 	add	fp, #28
1b68c     A7 22 02 FB | 	rdlong	local03, fp
1b690     11 21 02 F6 | 	mov	local02, local03
1b694     01 20 06 F1 | 	add	local02, #1
1b698     A7 20 62 FC | 	wrlong	local02, fp
1b69c     08 4E 85 F1 | 	sub	fp, #8
1b6a0     A7 20 02 FB | 	rdlong	local02, fp
1b6a4     11 21 42 FC | 	wrbyte	local02, local03
1b6a8     04 4E 85 F1 | 	sub	fp, #4
1b6ac     A7 22 02 FB | 	rdlong	local03, fp
1b6b0     01 22 06 F1 | 	add	local03, #1
1b6b4     A7 22 62 FC | 	wrlong	local03, fp
1b6b8     04 4E 85 F1 | 	sub	fp, #4
1b6bc     A7 22 02 FB | 	rdlong	local03, fp
1b6c0     01 22 86 F1 | 	sub	local03, #1
1b6c4     A7 22 62 FC | 	wrlong	local03, fp
1b6c8     14 4E 05 F1 | 	add	fp, #20
1b6cc     A7 22 0A FB | 	rdlong	local03, fp wz
1b6d0     20 4E 85 F1 | 	sub	fp, #32
1b6d4     4C FF 9F AD |  if_e	jmp	#LR__2974
1b6d8     14 4E 05 F1 | 	add	fp, #20
1b6dc     A7 20 02 FB | 	rdlong	local02, fp
1b6e0     14 4E 85 F1 | 	sub	fp, #20
1b6e4     0A 20 0E F2 | 	cmp	local02, #10 wz
1b6e8     38 FF 9F 5D |  if_ne	jmp	#LR__2974
1b6ec                 | LR__2975
1b6ec     10 4E 05 F1 | 	add	fp, #16
1b6f0     A7 FA 01 FB | 	rdlong	result1, fp
1b6f4     10 4E 85 F1 | 	sub	fp, #16
1b6f8                 | LR__2976
1b6f8     A7 F0 03 F6 | 	mov	ptra, fp
1b6fc     B2 00 A0 FD | 	call	#popregs_
1b700                 | __system___vfsread_ret
1b700     2D 00 64 FD | 	ret
1b704                 | 
1b704                 | __system____default_filbuf
1b704     04 4A 05 F6 | 	mov	COUNT_, #4
1b708     A8 00 A0 FD | 	call	#pushregs_
1b70c     09 1F 02 F6 | 	mov	local01, arg01
1b710     0F 21 02 FB | 	rdlong	local02, local01
1b714     0C 20 06 F1 | 	add	local02, #12
1b718     10 FB 09 FB | 	rdlong	result1, local02 wz
1b71c     0C 20 86 F1 | 	sub	local02, #12
1b720     20 00 90 5D |  if_ne	jmp	#LR__2980
1b724     14 20 06 F1 | 	add	local02, #20
1b728     10 FB 01 F6 | 	mov	result1, local02
1b72c     04 20 86 F1 | 	sub	local02, #4
1b730     10 FB 61 FC | 	wrlong	result1, local02
1b734     04 20 86 F1 | 	sub	local02, #4
1b738     02 00 80 FF 
1b73c     10 01 68 FC | 	wrlong	##1024, local02
1b740     0C 20 86 F1 | 	sub	local02, #12
1b744                 | LR__2980
1b744     14 1E 06 F1 | 	add	local01, #20
1b748     0F 23 02 FB | 	rdlong	local03, local01
1b74c     11 25 02 F6 | 	mov	local04, local03
1b750     14 1E 86 F1 | 	sub	local01, #20
1b754     13 24 46 F7 | 	zerox	local04, #19
1b758     14 22 46 F0 | 	shr	local03, #20
1b75c     02 22 66 F0 | 	shl	local03, #2
1b760     ED 22 02 F1 | 	add	local03, __methods__
1b764     11 23 02 FB | 	rdlong	local03, local03
1b768     10 20 06 F1 | 	add	local02, #16
1b76c     10 15 02 FB | 	rdlong	arg02, local02
1b770     04 20 86 F1 | 	sub	local02, #4
1b774     10 17 02 FB | 	rdlong	arg03, local02
1b778     0C 20 86 F1 | 	sub	local02, #12
1b77c     0F 13 02 F6 | 	mov	arg01, local01
1b780     F2 1E 02 F6 | 	mov	local01, objptr
1b784     12 E5 01 F6 | 	mov	objptr, local04
1b788     2D 22 62 FD | 	call	local03
1b78c     0F E5 01 F6 | 	mov	objptr, local01
1b790     FD 24 02 F6 | 	mov	local04, result1
1b794     00 24 56 F2 | 	cmps	local04, #0 wc
1b798     01 FA 65 C6 |  if_b	neg	result1, #1
1b79c     28 00 90 CD |  if_b	jmp	#LR__2981
1b7a0     10 25 62 FC | 	wrlong	local04, local02
1b7a4     10 20 06 F1 | 	add	local02, #16
1b7a8     10 23 02 FB | 	rdlong	local03, local02
1b7ac     0C 20 86 F1 | 	sub	local02, #12
1b7b0     10 23 62 FC | 	wrlong	local03, local02
1b7b4     04 20 06 F1 | 	add	local02, #4
1b7b8     10 23 02 FB | 	rdlong	local03, local02
1b7bc     01 22 46 F5 | 	or	local03, #1
1b7c0     10 23 62 FC | 	wrlong	local03, local02
1b7c4     12 FB 01 F6 | 	mov	result1, local04
1b7c8                 | LR__2981
1b7c8     A7 F0 03 F6 | 	mov	ptra, fp
1b7cc     B2 00 A0 FD | 	call	#popregs_
1b7d0                 | __system____default_filbuf_ret
1b7d0     2D 00 64 FD | 	ret
1b7d4                 | 
1b7d4                 | __system__getlower_0911
1b7d4     41 12 56 F2 | 	cmps	arg01, #65 wc
1b7d8     10 00 90 CD |  if_b	jmp	#LR__2990
1b7dc     5B 12 56 F2 | 	cmps	arg01, #91 wc
1b7e0     09 FB 01 C6 |  if_b	mov	result1, arg01
1b7e4     20 FA 05 C1 |  if_b	add	result1, #32
1b7e8     04 00 90 CD |  if_b	jmp	#__system__getlower_0911_ret
1b7ec                 | LR__2990
1b7ec     09 FB 01 F6 | 	mov	result1, arg01
1b7f0                 | __system__getlower_0911_ret
1b7f0     2D 00 64 FD | 	ret
1b7f4                 | 
1b7f4                 | __system___pat_match
1b7f4     08 4A 05 F6 | 	mov	COUNT_, #8
1b7f8     A8 00 A0 FD | 	call	#pushregs_
1b7fc     09 1F 02 F6 | 	mov	local01, arg01
1b800                 | LR__3000
1b800     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
1b804     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
1b808     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
1b80c     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
1b810     2C 00 90 AD |  if_e	jmp	#LR__3001
1b814     0A 13 C2 FA | 	rdbyte	arg01, arg02
1b818     B8 FF BF FD | 	call	#__system__getlower_0911
1b81c     FD 22 02 F6 | 	mov	local03, result1
1b820     0F 13 C2 FA | 	rdbyte	arg01, local01
1b824     AC FF BF FD | 	call	#__system__getlower_0911
1b828     11 FB 09 F2 | 	cmp	result1, local03 wz
1b82c     00 FA 05 56 |  if_ne	mov	result1, #0
1b830     FC 00 90 5D |  if_ne	jmp	#LR__3009
1b834     01 1E 06 F1 | 	add	local01, #1
1b838     01 14 06 F1 | 	add	arg02, #1
1b83c     C0 FF 9F FD | 	jmp	#LR__3000
1b840                 | LR__3001
1b840     0A 23 C2 FA | 	rdbyte	local03, arg02
1b844     2A 22 0E F2 | 	cmp	local03, #42 wz
1b848     D4 00 90 5D |  if_ne	jmp	#LR__3008
1b84c     01 14 06 F1 | 	add	arg02, #1
1b850     0A 21 C2 FA | 	rdbyte	local02, arg02
1b854     01 14 86 F1 | 	sub	arg02, #1
1b858     2E 20 0E F2 | 	cmp	local02, #46 wz
1b85c     28 00 90 5D |  if_ne	jmp	#LR__3002
1b860     02 14 06 F1 | 	add	arg02, #2
1b864     0A 21 C2 FA | 	rdbyte	local02, arg02
1b868     02 14 86 F1 | 	sub	arg02, #2
1b86c     2A 20 0E F2 | 	cmp	local02, #42 wz
1b870     03 14 06 A1 |  if_e	add	arg02, #3
1b874     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
1b878     03 14 86 A1 |  if_e	sub	arg02, #3
1b87c     12 27 0A A6 |  if_e	mov	local05, local04 wz
1b880     01 FA 05 A6 |  if_e	mov	result1, #1
1b884     A8 00 90 AD |  if_e	jmp	#LR__3009
1b888                 | LR__3002
1b888     01 14 06 F1 | 	add	arg02, #1
1b88c     00 28 06 F6 | 	mov	local06, #0
1b890     97 1E 48 FB | 	callpa	#(@LR__3005-@LR__3003)>>2,fcache_load_ptr_
1b894                 | LR__3003
1b894     14 2B 02 F6 | 	mov	local07, local06
1b898     0A 2B 02 F1 | 	add	local07, arg02
1b89c     15 2B CA FA | 	rdbyte	local07, local07 wz
1b8a0     14 27 02 56 |  if_ne	mov	local05, local06
1b8a4     01 26 06 51 |  if_ne	add	local05, #1
1b8a8     13 29 02 56 |  if_ne	mov	local06, local05
1b8ac     E4 FF 9F 5D |  if_ne	jmp	#LR__3003
1b8b0     00 2C 06 F6 | 	mov	local08, #0
1b8b4                 | LR__3004
1b8b4     16 2B 02 F6 | 	mov	local07, local08
1b8b8     0F 2B 02 F1 | 	add	local07, local01
1b8bc     15 2B CA FA | 	rdbyte	local07, local07 wz
1b8c0     16 27 02 56 |  if_ne	mov	local05, local08
1b8c4     01 26 06 51 |  if_ne	add	local05, #1
1b8c8     13 2D 02 56 |  if_ne	mov	local08, local05
1b8cc     E4 FF 9F 5D |  if_ne	jmp	#LR__3004
1b8d0                 | LR__3005
1b8d0     14 2D 52 F2 | 	cmps	local08, local06 wc
1b8d4     00 FA 05 C6 |  if_b	mov	result1, #0
1b8d8     54 00 90 CD |  if_b	jmp	#LR__3009
1b8dc     16 21 02 F6 | 	mov	local02, local08
1b8e0     14 21 82 F1 | 	sub	local02, local06
1b8e4     10 1F 02 F1 | 	add	local01, local02
1b8e8                 | LR__3006
1b8e8     01 28 56 F2 | 	cmps	local06, #1 wc
1b8ec     30 00 90 CD |  if_b	jmp	#LR__3007
1b8f0     0F 13 C2 FA | 	rdbyte	arg01, local01
1b8f4     DC FE BF FD | 	call	#__system__getlower_0911
1b8f8     FD 2C 02 F6 | 	mov	local08, result1
1b8fc     0A 13 C2 FA | 	rdbyte	arg01, arg02
1b900     D0 FE BF FD | 	call	#__system__getlower_0911
1b904     FD 2C 0A F2 | 	cmp	local08, result1 wz
1b908     00 FA 05 56 |  if_ne	mov	result1, #0
1b90c     20 00 90 5D |  if_ne	jmp	#LR__3009
1b910     01 1E 06 F1 | 	add	local01, #1
1b914     01 14 06 F1 | 	add	arg02, #1
1b918     01 28 86 F1 | 	sub	local06, #1
1b91c     C8 FF 9F FD | 	jmp	#LR__3006
1b920                 | LR__3007
1b920                 | LR__3008
1b920     0A 2D CA FA | 	rdbyte	local08, arg02 wz
1b924     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
1b928     01 FA 05 A6 |  if_e	mov	result1, #1
1b92c     00 FA 05 56 |  if_ne	mov	result1, #0
1b930                 | LR__3009
1b930     A7 F0 03 F6 | 	mov	ptra, fp
1b934     B2 00 A0 FD | 	call	#popregs_
1b938                 | __system___pat_match_ret
1b938     2D 00 64 FD | 	ret
1b93c                 | 
1b93c                 | _fatfs_cc_ff_uni2oem
1b93c     00 00 06 F6 | 	mov	_var01, #0
1b940     80 12 16 F2 | 	cmp	arg01, #128 wc
1b944     09 01 02 C6 |  if_b	mov	_var01, arg01
1b948     58 00 90 CD |  if_b	jmp	#LR__3014
1b94c     80 00 00 FF 
1b950     00 12 16 F2 | 	cmp	arg01, ##65536 wc
1b954     4C 00 90 3D |  if_ae	jmp	#LR__3013
1b958     0A FB 31 F9 | 	getword	result1, arg02, #0
1b95c     01 00 00 FF 
1b960     52 FB 0D F2 | 	cmp	result1, ##850 wz
1b964     3C 00 90 5D |  if_ne	jmp	#LR__3013
1b968                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
1b968     00 00 06 F6 | 	mov	_var01, #0
1b96c     97 14 48 FB | 	callpa	#(@LR__3011-@LR__3010)>>2,fcache_load_ptr_
1b970                 | LR__3010
1b970     00 FB 31 F9 | 	getword	result1, _var01, #0
1b974     80 FA 15 F2 | 	cmp	result1, #128 wc
1b978     1C 00 90 3D |  if_ae	jmp	#LR__3012
1b97c     00 FB 31 F9 | 	getword	result1, _var01, #0
1b980     01 FA 65 F0 | 	shl	result1, #1
1b984     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
1b988     FD FA E1 FA | 	rdword	result1, result1
1b98c     FD 12 0A F2 | 	cmp	arg01, result1 wz
1b990     01 00 06 51 |  if_ne	add	_var01, #1
1b994     D8 FF 9F 5D |  if_ne	jmp	#LR__3010
1b998                 | LR__3011
1b998                 | LR__3012
1b998     00 01 32 F9 | 	getword	_var01, _var01, #0
1b99c     80 00 06 F1 | 	add	_var01, #128
1b9a0     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
1b9a4                 | LR__3013
1b9a4                 | LR__3014
1b9a4                 | ' 			c = (c + 0x80) & 0xFF;
1b9a4                 | ' 		}
1b9a4                 | ' 	}
1b9a4                 | ' 
1b9a4                 | ' 	return c;
1b9a4     00 FB 01 F6 | 	mov	result1, _var01
1b9a8                 | _fatfs_cc_ff_uni2oem_ret
1b9a8     2D 00 64 FD | 	ret
1b9ac                 | 
1b9ac                 | _fatfs_cc_ff_oem2uni
1b9ac     00 00 06 F6 | 	mov	_var01, #0
1b9b0     09 FB 31 F9 | 	getword	result1, arg01, #0
1b9b4     80 FA 15 F2 | 	cmp	result1, #128 wc
1b9b8     09 01 02 C6 |  if_b	mov	_var01, arg01
1b9bc     2C 00 90 CD |  if_b	jmp	#LR__3021
1b9c0     0A 15 32 F9 | 	getword	arg02, arg02, #0
1b9c4     01 00 00 FF 
1b9c8     52 15 0E F2 | 	cmp	arg02, ##850 wz
1b9cc     1C 00 90 5D |  if_ne	jmp	#LR__3020
1b9d0     09 FB 31 F9 | 	getword	result1, arg01, #0
1b9d4     00 FB 15 F2 | 	cmp	result1, #256 wc
1b9d8     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
1b9dc     80 12 86 C1 |  if_b	sub	arg01, #128
1b9e0     01 12 66 C0 |  if_b	shl	arg01, #1
1b9e4     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
1b9e8     09 01 E2 CA |  if_b	rdword	_var01, arg01
1b9ec                 | LR__3020
1b9ec                 | LR__3021
1b9ec                 | ' 		}
1b9ec                 | ' 	}
1b9ec                 | ' 
1b9ec                 | ' 	return c;
1b9ec     00 FB 01 F6 | 	mov	result1, _var01
1b9f0                 | _fatfs_cc_ff_oem2uni_ret
1b9f0     2D 00 64 FD | 	ret
1b9f4                 | 
1b9f4                 | _fatfs_cc_ff_wtoupper
1b9f4     09 01 02 F6 | 	mov	_var01, arg01
1b9f8     80 00 00 FF 
1b9fc     00 00 16 F2 | 	cmp	_var01, ##65536 wc
1ba00     60 01 90 3D |  if_ae	jmp	#LR__3043
1ba04     00 03 02 F6 | 	mov	_var02, _var01
1ba08     01 01 32 F9 | 	getword	_var01, _var02, #0
1ba0c     08 00 00 FF 
1ba10     00 00 16 F2 | 	cmp	_var01, ##4096 wc
1ba14     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
1ba18     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
1ba1c     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
1ba20     01 00 00 3F 
1ba24     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
1ba28     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
1ba2c     01 00 00 3F 
1ba30     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
1ba34     02 07 02 F6 | 	mov	_var04, _var03
1ba38                 | ' 		uc = (WORD)uni;
1ba38                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
1ba38                 | ' 		for (;;) {
1ba38                 | LR__3030
1ba38     03 09 E2 FA | 	rdword	_var05, _var04
1ba3c     04 05 02 F6 | 	mov	_var03, _var05
1ba40     0F 04 4E F7 | 	zerox	_var03, #15 wz
1ba44     02 06 06 F1 | 	add	_var04, #2
1ba48     14 01 90 AD |  if_e	jmp	#LR__3042
1ba4c     01 05 32 F9 | 	getword	_var03, _var02, #0
1ba50     04 01 32 F9 | 	getword	_var01, _var05, #0
1ba54     00 05 12 F2 | 	cmp	_var03, _var01 wc
1ba58     04 01 90 CD |  if_b	jmp	#LR__3042
1ba5c     03 0B E2 FA | 	rdword	_var06, _var04
1ba60     05 0D 32 F9 | 	getword	_var07, _var06, #0
1ba64     08 0C 46 F0 | 	shr	_var07, #8
1ba68     05 0B 32 F9 | 	getword	_var06, _var06, #0
1ba6c     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
1ba70     01 05 32 F9 | 	getword	_var03, _var02, #0
1ba74     04 0F 32 F9 | 	getword	_var08, _var05, #0
1ba78     05 01 32 F9 | 	getword	_var01, _var06, #0
1ba7c     00 0F 02 F1 | 	add	_var08, _var01
1ba80     07 05 52 F2 | 	cmps	_var03, _var08 wc
1ba84     02 06 06 F1 | 	add	_var04, #2
1ba88     C4 00 90 3D |  if_ae	jmp	#LR__3041
1ba8c                 | ' 				switch (cmd) {
1ba8c     06 11 32 F9 | 	getword	_var09, _var07, #0
1ba90     09 10 26 F3 | 	fle	_var09, #9
1ba94     30 10 62 FD | 	jmprel	_var09
1ba98                 | LR__3031
1ba98     24 00 90 FD | 	jmp	#LR__3032
1ba9c     3C 00 90 FD | 	jmp	#LR__3033
1baa0     54 00 90 FD | 	jmp	#LR__3034
1baa4     5C 00 90 FD | 	jmp	#LR__3035
1baa8     64 00 90 FD | 	jmp	#LR__3036
1baac     6C 00 90 FD | 	jmp	#LR__3037
1bab0     74 00 90 FD | 	jmp	#LR__3038
1bab4     7C 00 90 FD | 	jmp	#LR__3039
1bab8     84 00 90 FD | 	jmp	#LR__3040
1babc     A0 00 90 FD | 	jmp	#LR__3042
1bac0                 | LR__3032
1bac0     01 03 32 F9 | 	getword	_var02, _var02, #0
1bac4     04 09 32 F9 | 	getword	_var05, _var05, #0
1bac8     04 03 82 F1 | 	sub	_var02, _var05
1bacc     01 02 66 F0 | 	shl	_var02, #1
1bad0     03 03 02 F1 | 	add	_var02, _var04
1bad4     01 03 E2 FA | 	rdword	_var02, _var02
1bad8     84 00 90 FD | 	jmp	#LR__3042
1badc                 | LR__3033
1badc     01 05 32 F9 | 	getword	_var03, _var02, #0
1bae0     01 03 32 F9 | 	getword	_var02, _var02, #0
1bae4     04 09 32 F9 | 	getword	_var05, _var05, #0
1bae8     04 03 82 F1 | 	sub	_var02, _var05
1baec     01 02 06 F5 | 	and	_var02, #1
1baf0     02 03 C2 F2 | 	subr	_var02, _var03
1baf4     68 00 90 FD | 	jmp	#LR__3042
1baf8                 | LR__3034
1baf8     01 03 32 F9 | 	getword	_var02, _var02, #0
1bafc     10 02 86 F1 | 	sub	_var02, #16
1bb00     5C 00 90 FD | 	jmp	#LR__3042
1bb04                 | LR__3035
1bb04     01 03 32 F9 | 	getword	_var02, _var02, #0
1bb08     20 02 86 F1 | 	sub	_var02, #32
1bb0c     50 00 90 FD | 	jmp	#LR__3042
1bb10                 | LR__3036
1bb10     01 03 32 F9 | 	getword	_var02, _var02, #0
1bb14     30 02 86 F1 | 	sub	_var02, #48
1bb18     44 00 90 FD | 	jmp	#LR__3042
1bb1c                 | LR__3037
1bb1c     01 03 32 F9 | 	getword	_var02, _var02, #0
1bb20     1A 02 86 F1 | 	sub	_var02, #26
1bb24     38 00 90 FD | 	jmp	#LR__3042
1bb28                 | LR__3038
1bb28     01 03 32 F9 | 	getword	_var02, _var02, #0
1bb2c     08 02 06 F1 | 	add	_var02, #8
1bb30     2C 00 90 FD | 	jmp	#LR__3042
1bb34                 | LR__3039
1bb34     01 03 32 F9 | 	getword	_var02, _var02, #0
1bb38     50 02 86 F1 | 	sub	_var02, #80
1bb3c     20 00 90 FD | 	jmp	#LR__3042
1bb40                 | LR__3040
1bb40     01 03 32 F9 | 	getword	_var02, _var02, #0
1bb44     0E 00 00 FF 
1bb48     60 02 86 F1 | 	sub	_var02, ##7264
1bb4c                 | ' 				}
1bb4c                 | ' 				break;
1bb4c     10 00 90 FD | 	jmp	#LR__3042
1bb50                 | LR__3041
1bb50     0F 0C 4E F7 | 	zerox	_var07, #15 wz
1bb54     02 0A 06 AA |  if_e	mul	_var06, #2
1bb58     05 07 02 A1 |  if_e	add	_var04, _var06
1bb5c     D8 FE 9F FD | 	jmp	#LR__3030
1bb60                 | LR__3042
1bb60     01 01 32 F9 | 	getword	_var01, _var02, #0
1bb64                 | LR__3043
1bb64                 | ' 		}
1bb64                 | ' 		uni = uc;
1bb64                 | ' 	}
1bb64                 | ' 
1bb64                 | ' 	return uni;
1bb64     00 FB 01 F6 | 	mov	result1, _var01
1bb68                 | _fatfs_cc_ff_wtoupper_ret
1bb68     2D 00 64 FD | 	ret
1bb6c                 | 
1bb6c                 | _fatfs_cc_strncpy
1bb6c     09 01 02 F6 | 	mov	_var01, arg01
1bb70     97 12 48 FB | 	callpa	#(@LR__3051-@LR__3050)>>2,fcache_load_ptr_
1bb74                 | ' 
1bb74                 | ' 	dscan = dst;
1bb74                 | ' 	sscan = src;
1bb74                 | ' 	count = n;
1bb74                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
1bb74                 | LR__3050
1bb74     01 16 86 F1 | 	sub	arg03, #1
1bb78     00 16 56 F2 | 	cmps	arg03, #0 wc
1bb7c     18 00 90 CD |  if_b	jmp	#LR__3052
1bb80     0A FB C1 FA | 	rdbyte	result1, arg02
1bb84     00 FB 41 FC | 	wrbyte	result1, _var01
1bb88     01 14 06 F1 | 	add	arg02, #1
1bb8c     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1bb90                 | ' 		continue;
1bb90     01 00 06 F1 | 	add	_var01, #1
1bb94     DC FF 9F 5D |  if_ne	jmp	#LR__3050
1bb98                 | LR__3051
1bb98                 | LR__3052
1bb98     97 0C 48 FB | 	callpa	#(@LR__3054-@LR__3053)>>2,fcache_load_ptr_
1bb9c                 | ' 	while (--count >= 0)
1bb9c                 | LR__3053
1bb9c     01 16 86 F1 | 	sub	arg03, #1
1bba0     00 16 56 F2 | 	cmps	arg03, #0 wc
1bba4     00 03 02 36 |  if_ae	mov	_var02, _var01
1bba8     01 00 06 31 |  if_ae	add	_var01, #1
1bbac     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1bbb0     E8 FF 9F 3D |  if_ae	jmp	#LR__3053
1bbb4                 | LR__3054
1bbb4                 | ' 		*dscan++ = '\0';
1bbb4                 | ' 	return(dst);
1bbb4     09 FB 01 F6 | 	mov	result1, arg01
1bbb8                 | _fatfs_cc_strncpy_ret
1bbb8     2D 00 64 FD | 	ret
1bbbc                 | 
1bbbc                 | _fatfs_cc_memcmp
1bbbc                 | ' 	for (n = size; n > 0; n--)
1bbbc     00 16 0E F2 | 	cmp	arg03, #0 wz
1bbc0     28 00 90 AD |  if_e	jmp	#LR__3061
1bbc4                 | LR__3060
1bbc4     09 01 C2 FA | 	rdbyte	_var01, arg01
1bbc8     0A 03 C2 FA | 	rdbyte	_var02, arg02
1bbcc     01 01 0A F2 | 	cmp	_var01, _var02 wz
1bbd0     01 12 06 A1 |  if_e	add	arg01, #1
1bbd4     01 14 06 A1 |  if_e	add	arg02, #1
1bbd8                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
1bbd8     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
1bbdc     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1bbe0     01 FB 81 51 |  if_ne	sub	result1, _var02
1bbe4     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
1bbe8     F6 17 6E FB | 	djnz	arg03, #LR__3060
1bbec                 | LR__3061
1bbec                 | ' 
1bbec                 | ' 	return(0);
1bbec     00 FA 05 F6 | 	mov	result1, #0
1bbf0                 | _fatfs_cc_memcmp_ret
1bbf0     2D 00 64 FD | 	ret
1bbf4                 | 
1bbf4                 | _fatfs_cc_strncmp
1bbf4     09 01 0A F6 | 	mov	_var01, arg01 wz
1bbf8     14 00 90 5D |  if_ne	jmp	#LR__3070
1bbfc                 | ' 		return scan2 ? -1 : 0;
1bbfc     00 14 0E F2 | 	cmp	arg02, #0 wz
1bc00     01 02 66 56 |  if_ne	neg	_var02, #1
1bc04     00 02 06 A6 |  if_e	mov	_var02, #0
1bc08     01 FB 01 F6 | 	mov	result1, _var02
1bc0c     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
1bc10                 | LR__3070
1bc10     00 14 0E F2 | 	cmp	arg02, #0 wz
1bc14     01 FA 05 A6 |  if_e	mov	result1, #1
1bc18     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1bc1c     0B 05 02 F6 | 	mov	_var03, arg03
1bc20     97 16 48 FB | 	callpa	#(@LR__3072-@LR__3071)>>2,fcache_load_ptr_
1bc24                 | ' 	count = n;
1bc24                 | ' 	do {
1bc24                 | LR__3071
1bc24     00 07 C2 FA | 	rdbyte	_var04, _var01
1bc28     0A 09 02 F6 | 	mov	_var05, arg02
1bc2c     04 0B C2 FA | 	rdbyte	_var06, _var05
1bc30     01 04 86 F1 | 	sub	_var03, #1
1bc34     00 04 56 F2 | 	cmps	_var03, #0 wc
1bc38     01 00 06 F1 | 	add	_var01, #1
1bc3c     01 14 06 F1 | 	add	arg02, #1
1bc40     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1bc44     08 00 90 2D |  if_nc_and_z	jmp	#LR__3073
1bc48     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1bc4c     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3071
1bc50                 | LR__3072
1bc50                 | LR__3073
1bc50     00 04 56 F2 | 	cmps	_var03, #0 wc
1bc54                 | ' 		return(0);
1bc54     00 FA 05 C6 |  if_b	mov	result1, #0
1bc58     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
1bc5c     05 07 0A F2 | 	cmp	_var04, _var06 wz
1bc60                 | ' 		return(0);
1bc60     00 FA 05 A6 |  if_e	mov	result1, #0
1bc64     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1bc68     00 06 0E F2 | 	cmp	_var04, #0 wz
1bc6c                 | ' 		return(-1);
1bc6c     01 FA 65 A6 |  if_e	neg	result1, #1
1bc70     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1bc74     00 0A 0E F2 | 	cmp	_var06, #0 wz
1bc78                 | ' 		return(1);
1bc78     01 FA 05 A6 |  if_e	mov	result1, #1
1bc7c                 | ' 		return(c1 - c2);
1bc7c     03 FB 01 56 |  if_ne	mov	result1, _var04
1bc80     05 FB 81 51 |  if_ne	sub	result1, _var06
1bc84                 | _fatfs_cc_strncmp_ret
1bc84     2D 00 64 FD | 	ret
1bc88                 | 
1bc88                 | _fatfs_cc_strchr
1bc88                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/libc/string/strchr.c"
1bc88                 | ' 	while ((c = *s++) != (char) charwanted)
1bc88                 | LR__3080
1bc88     09 01 02 F6 | 	mov	_var01, arg01
1bc8c     00 03 C2 FA | 	rdbyte	_var02, _var01
1bc90     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
1bc94     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
1bc98     03 05 0A F2 | 	cmp	_var03, _var04 wz
1bc9c     01 12 06 F1 | 	add	arg01, #1
1bca0     14 00 90 AD |  if_e	jmp	#LR__3081
1bca4     01 05 02 F6 | 	mov	_var03, _var02
1bca8     07 04 4E F7 | 	zerox	_var03, #7 wz
1bcac     00 FA 05 A6 |  if_e	mov	result1, #0
1bcb0     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
1bcb4     D0 FF 9F FD | 	jmp	#LR__3080
1bcb8                 | LR__3081
1bcb8                 | ' 	return((char *)--s);
1bcb8     01 12 86 F1 | 	sub	arg01, #1
1bcbc     09 FB 01 F6 | 	mov	result1, arg01
1bcc0                 | _fatfs_cc_strchr_ret
1bcc0     2D 00 64 FD | 	ret
1bcc4                 | 
1bcc4                 | _fatfs_cc_disk_initialize
1bcc4     04 4A 05 F6 | 	mov	COUNT_, #4
1bcc8     A8 00 A0 FD | 	call	#pushregs_
1bccc     40 F0 07 F1 | 	add	ptra, #64
1bcd0     04 4E 05 F1 | 	add	fp, #4
1bcd4     A7 12 42 FC | 	wrbyte	arg01, fp
1bcd8     01 00 00 FF 
1bcdc     14 E4 05 F1 | 	add	objptr, ##532
1bce0     F2 18 02 FB | 	rdlong	arg04, objptr
1bce4     2C 4E 05 F1 | 	add	fp, #44
1bce8     A7 18 62 FC | 	wrlong	arg04, fp
1bcec     04 E4 85 F1 | 	sub	objptr, #4
1bcf0     F2 18 02 FB | 	rdlong	arg04, objptr
1bcf4     04 4E 05 F1 | 	add	fp, #4
1bcf8     A7 18 62 FC | 	wrlong	arg04, fp
1bcfc     08 E4 05 F1 | 	add	objptr, #8
1bd00     F2 18 02 FB | 	rdlong	arg04, objptr
1bd04     04 4E 05 F1 | 	add	fp, #4
1bd08     A7 18 62 FC | 	wrlong	arg04, fp
1bd0c     04 E4 05 F1 | 	add	objptr, #4
1bd10     F2 18 02 FB | 	rdlong	arg04, objptr
1bd14     04 4E 05 F1 | 	add	fp, #4
1bd18     A7 18 62 FC | 	wrlong	arg04, fp
1bd1c     04 E4 05 F1 | 	add	objptr, #4
1bd20     F2 02 48 FC | 	wrbyte	#1, objptr
1bd24     01 00 00 FF 
1bd28     20 E4 85 F1 | 	sub	objptr, ##544
1bd2c     38 4E 85 F1 | 	sub	fp, #56
1bd30     A7 18 CA FA | 	rdbyte	arg04, fp wz
1bd34     04 4E 85 F1 | 	sub	fp, #4
1bd38                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
1bd38                 | '             return RES_NOTRDY;
1bd38     03 FA 05 56 |  if_ne	mov	result1, #3
1bd3c     D8 05 90 5D |  if_ne	jmp	#LR__3108
1bd40     13 00 00 FF 
1bd44     10 13 06 F6 | 	mov	arg01, ##10000
1bd48     84 9E BF FD | 	call	#__system___waitus
1bd4c     30 4E 05 F1 | 	add	fp, #48
1bd50     A7 12 02 FB | 	rdlong	arg01, fp
1bd54     09 01 08 FC | 	wrpin	#0, arg01
1bd58     04 4E 05 F1 | 	add	fp, #4
1bd5c     A7 12 02 FB | 	rdlong	arg01, fp
1bd60     09 01 08 FC | 	wrpin	#0, arg01
1bd64     04 4E 05 F1 | 	add	fp, #4
1bd68     A7 12 02 FB | 	rdlong	arg01, fp
1bd6c     09 01 08 FC | 	wrpin	#0, arg01
1bd70     04 4E 05 F1 | 	add	fp, #4
1bd74     A7 12 02 FB | 	rdlong	arg01, fp
1bd78     09 00 80 FF 
1bd7c     09 01 08 FC | 	wrpin	##4608, arg01
1bd80     0C 4E 85 F1 | 	sub	fp, #12
1bd84     A7 12 02 FB | 	rdlong	arg01, fp
1bd88     59 12 62 FD | 	drvh	arg01
1bd8c     04 4E 05 F1 | 	add	fp, #4
1bd90     A7 12 02 FB | 	rdlong	arg01, fp
1bd94     59 12 62 FD | 	drvh	arg01
1bd98     04 4E 05 F1 | 	add	fp, #4
1bd9c     A7 12 02 FB | 	rdlong	arg01, fp
1bda0     59 12 62 FD | 	drvh	arg01
1bda4     04 4E 05 F1 | 	add	fp, #4
1bda8     A7 12 02 FB | 	rdlong	arg01, fp
1bdac     59 12 62 FD | 	drvh	arg01
1bdb0     20 4E 85 F1 | 	sub	fp, #32
1bdb4     00 04 80 FF 
1bdb8     A7 20 68 FC | 	wrlong	##524304, fp
1bdbc     04 4E 05 F1 | 	add	fp, #4
1bdc0     20 03 80 FF 
1bdc4     A7 90 68 FC | 	wrlong	##409672, fp
1bdc8     14 4E 05 F1 | 	add	fp, #20
1bdcc     A7 1E 02 FB | 	rdlong	local01, fp
1bdd0     18 4E 85 F1 | 	sub	fp, #24
1bdd4     A7 16 02 FB | 	rdlong	arg03, fp
1bdd8     40 1E 62 FD | 	dirl	local01
1bddc     A0 03 80 FF 
1bde0     0F 91 08 FC | 	wrpin	##475208, local01
1bde4     0F 17 12 FC | 	wxpin	arg03, local01
1bde8     0F 01 28 FC | 	wypin	#0, local01
1bdec     41 1E 62 FD | 	dirh	local01
1bdf0     1C 4E 05 F1 | 	add	fp, #28
1bdf4     A7 20 02 FB | 	rdlong	local02, fp
1bdf8     10 1F 82 F1 | 	sub	local01, local02
1bdfc     07 1E 06 F5 | 	and	local01, #7
1be00     18 1E 66 F0 | 	shl	local01, #24
1be04     78 14 06 F6 | 	mov	arg02, #120
1be08     0F 15 42 F5 | 	or	arg02, local01
1be0c     14 4E 85 F1 | 	sub	fp, #20
1be10     A7 14 62 FC | 	wrlong	arg02, fp
1be14     14 4E 05 F1 | 	add	fp, #20
1be18     A7 12 02 FB | 	rdlong	arg01, fp
1be1c     10 14 26 F4 | 	bith	arg02, #16
1be20     40 12 62 FD | 	dirl	arg01
1be24     09 15 02 FC | 	wrpin	arg02, arg01
1be28     09 3F 18 FC | 	wxpin	#31, arg01
1be2c     FF FF FF FF 
1be30     09 FF 2B FC | 	wypin	##-1, arg01
1be34     41 12 62 FD | 	dirh	arg01
1be38     04 4E 85 F1 | 	sub	fp, #4
1be3c     A7 14 02 FB | 	rdlong	arg02, fp
1be40     08 4E 05 F1 | 	add	fp, #8
1be44     A7 22 02 FB | 	rdlong	local03, fp
1be48     11 15 82 F1 | 	sub	arg02, local03
1be4c     07 14 06 F5 | 	and	arg02, #7
1be50     18 14 66 F0 | 	shl	arg02, #24
1be54     14 4E 85 F1 | 	sub	fp, #20
1be58     A7 14 62 FC | 	wrlong	arg02, fp
1be5c     29 00 00 FF 
1be60     7A 14 46 F5 | 	or	arg02, ##21114
1be64     A7 14 62 FC | 	wrlong	arg02, fp
1be68     14 4E 05 F1 | 	add	fp, #20
1be6c     A7 12 02 FB | 	rdlong	arg01, fp
1be70     40 12 62 FD | 	dirl	arg01
1be74     09 15 02 FC | 	wrpin	arg02, arg01
1be78     09 4F 18 FC | 	wxpin	#39, arg01
1be7c     09 01 28 FC | 	wypin	#0, arg01
1be80     41 12 62 FD | 	dirh	arg01
1be84     28 4E 85 F1 | 	sub	fp, #40
1be88     A7 12 02 F6 | 	mov	arg01, fp
1be8c     14 4E 85 F1 | 	sub	fp, #20
1be90     0A 14 06 F6 | 	mov	arg02, #10
1be94     1C 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0945
1be98     00 12 06 F6 | 	mov	arg01, #0
1be9c     00 14 06 F6 | 	mov	arg02, #0
1bea0     E8 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0969
1bea4     24 80 B0 FD | 	call	#_fatfs_cc_deselect_0955
1bea8     64 12 06 F6 | 	mov	arg01, #100
1beac     20 9D BF FD | 	call	#__system___waitus
1beb0     14 4E 05 F1 | 	add	fp, #20
1beb4     A7 12 02 F6 | 	mov	arg01, fp
1beb8     14 4E 85 F1 | 	sub	fp, #20
1bebc     0A 14 06 F6 | 	mov	arg02, #10
1bec0     F0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0945
1bec4     0C 4E 05 F1 | 	add	fp, #12
1bec8     A7 00 48 FC | 	wrbyte	#0, fp
1becc     0C 4E 85 F1 | 	sub	fp, #12
1bed0     00 12 06 F6 | 	mov	arg01, #0
1bed4     00 14 06 F6 | 	mov	arg02, #0
1bed8     B0 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0969
1bedc     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
1bee0     01 18 0E F2 | 	cmp	arg04, #1 wz
1bee4     B8 03 90 5D |  if_ne	jmp	#LR__3107
1bee8     08 12 06 F6 | 	mov	arg01, #8
1beec     AA 15 06 F6 | 	mov	arg02, #426
1bef0     98 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0969
1bef4     FD FA E1 F8 | 	getbyte	result1, result1, #0
1bef8     01 FA 0D F2 | 	cmp	result1, #1 wz
1befc     98 01 90 5D |  if_ne	jmp	#LR__3093
1bf00     14 4E 05 F1 | 	add	fp, #20
1bf04     A7 12 02 F6 | 	mov	arg01, fp
1bf08     14 4E 85 F1 | 	sub	fp, #20
1bf0c     04 14 06 F6 | 	mov	arg02, #4
1bf10     A0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0945
1bf14     16 4E 05 F1 | 	add	fp, #22
1bf18     A7 24 C2 FA | 	rdbyte	local04, fp
1bf1c     16 4E 85 F1 | 	sub	fp, #22
1bf20     01 24 0E F2 | 	cmp	local04, #1 wz
1bf24     17 4E 05 A1 |  if_e	add	fp, #23
1bf28     A7 22 C2 AA |  if_e	rdbyte	local03, fp
1bf2c     17 4E 85 A1 |  if_e	sub	fp, #23
1bf30     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
1bf34     68 03 90 5D |  if_ne	jmp	#LR__3106
1bf38                 | ' 				for (tmr = 1000; tmr; tmr--) {
1bf38     18 4E 05 F1 | 	add	fp, #24
1bf3c     01 00 80 FF 
1bf40     A7 D0 6B FC | 	wrlong	##1000, fp
1bf44     18 4E 85 F1 | 	sub	fp, #24
1bf48                 | LR__3090
1bf48     18 4E 05 F1 | 	add	fp, #24
1bf4c     A7 1E 0A FB | 	rdlong	local01, fp wz
1bf50     18 4E 85 F1 | 	sub	fp, #24
1bf54     3C 00 90 AD |  if_e	jmp	#LR__3091
1bf58     A9 12 06 F6 | 	mov	arg01, #169
1bf5c     1E 14 C6 F9 | 	decod	arg02, #30
1bf60     28 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0969
1bf64     FD 24 02 F6 | 	mov	local04, result1
1bf68     07 24 4E F7 | 	zerox	local04, #7 wz
1bf6c     24 00 90 AD |  if_e	jmp	#LR__3091
1bf70     01 00 00 FF 
1bf74     E8 13 06 F6 | 	mov	arg01, ##1000
1bf78     54 9C BF FD | 	call	#__system___waitus
1bf7c     18 4E 05 F1 | 	add	fp, #24
1bf80     A7 24 02 FB | 	rdlong	local04, fp
1bf84     01 24 86 F1 | 	sub	local04, #1
1bf88     A7 24 62 FC | 	wrlong	local04, fp
1bf8c     18 4E 85 F1 | 	sub	fp, #24
1bf90     B4 FF 9F FD | 	jmp	#LR__3090
1bf94                 | LR__3091
1bf94     18 4E 05 F1 | 	add	fp, #24
1bf98     A7 24 0A FB | 	rdlong	local04, fp wz
1bf9c     18 4E 85 F1 | 	sub	fp, #24
1bfa0     4C 00 90 AD |  if_e	jmp	#LR__3092
1bfa4     3A 12 06 F6 | 	mov	arg01, #58
1bfa8     00 14 06 F6 | 	mov	arg02, #0
1bfac     DC 81 B0 FD | 	call	#_fatfs_cc_send_cmd_0969
1bfb0     FD 22 02 F6 | 	mov	local03, result1
1bfb4     07 22 4E F7 | 	zerox	local03, #7 wz
1bfb8     34 00 90 5D |  if_ne	jmp	#LR__3092
1bfbc     14 4E 05 F1 | 	add	fp, #20
1bfc0     A7 12 02 F6 | 	mov	arg01, fp
1bfc4     14 4E 85 F1 | 	sub	fp, #20
1bfc8     04 14 06 F6 | 	mov	arg02, #4
1bfcc     E4 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0945
1bfd0     14 4E 05 F1 | 	add	fp, #20
1bfd4     A7 1E C2 FA | 	rdbyte	local01, fp
1bfd8     40 1E CE F7 | 	test	local01, #64 wz
1bfdc     0C 24 06 56 |  if_ne	mov	local04, #12
1bfe0     04 24 06 A6 |  if_e	mov	local04, #4
1bfe4     08 4E 85 F1 | 	sub	fp, #8
1bfe8     A7 24 42 FC | 	wrbyte	local04, fp
1bfec     0C 4E 85 F1 | 	sub	fp, #12
1bff0                 | LR__3092
1bff0     14 24 06 FB | 	rdlong	local04, #20
1bff4     18 4E 05 F1 | 	add	fp, #24
1bff8     A7 24 62 FC | 	wrlong	local04, fp
1bffc     0C 4E 05 F1 | 	add	fp, #12
1c000     A7 24 02 FB | 	rdlong	local04, fp
1c004     1B 24 26 F4 | 	bith	local04, #27
1c008     A7 24 62 FC | 	wrlong	local04, fp
1c00c     0C 4E 85 F1 | 	sub	fp, #12
1c010     A7 24 02 FB | 	rdlong	local04, fp
1c014     18 4E 85 F1 | 	sub	fp, #24
1c018     68 78 04 FF 
1c01c     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1c020     1C 4E 05 C1 |  if_b	add	fp, #28
1c024     00 01 80 CF 
1c028     A7 08 68 CC |  if_b	wrlong	##131076, fp
1c02c     1C 4E 85 C1 |  if_b	sub	fp, #28
1c030     6C 02 90 CD |  if_b	jmp	#LR__3106
1c034     18 4E 05 F1 | 	add	fp, #24
1c038     A7 24 02 FB | 	rdlong	local04, fp
1c03c     18 4E 85 F1 | 	sub	fp, #24
1c040     E1 F5 05 FF 
1c044     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1c048     1C 4E 05 C1 |  if_b	add	fp, #28
1c04c     00 01 80 CF 
1c050     A7 0A 68 CC |  if_b	wrlong	##131077, fp
1c054     1C 4E 85 C1 |  if_b	sub	fp, #28
1c058     44 02 90 CD |  if_b	jmp	#LR__3106
1c05c     18 4E 05 F1 | 	add	fp, #24
1c060     A7 24 02 FB | 	rdlong	local04, fp
1c064     18 4E 85 F1 | 	sub	fp, #24
1c068     3B 58 08 FF 
1c06c     01 24 16 F2 | 	cmp	local04, ##280000001 wc
1c070     1C 4E 05 C1 |  if_b	add	fp, #28
1c074     00 01 80 CF 
1c078     A7 0C 68 CC |  if_b	wrlong	##131078, fp
1c07c     1C 4E 85 C1 |  if_b	sub	fp, #28
1c080     1C 02 90 CD |  if_b	jmp	#LR__3106
1c084     1C 4E 05 F1 | 	add	fp, #28
1c088     80 01 80 FF 
1c08c     A7 10 68 FC | 	wrlong	##196616, fp
1c090     1C 4E 85 F1 | 	sub	fp, #28
1c094     08 02 90 FD | 	jmp	#LR__3106
1c098                 | LR__3093
1c098     A9 12 06 F6 | 	mov	arg01, #169
1c09c     00 14 06 F6 | 	mov	arg02, #0
1c0a0     E8 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0969
1c0a4     FD 24 E2 F8 | 	getbyte	local04, result1, #0
1c0a8     02 24 16 F2 | 	cmp	local04, #2 wc
1c0ac     18 00 90 3D |  if_ae	jmp	#LR__3094
1c0b0     0C 4E 05 F1 | 	add	fp, #12
1c0b4     A7 04 48 FC | 	wrbyte	#2, fp
1c0b8     04 4E 05 F1 | 	add	fp, #4
1c0bc     A7 52 49 FC | 	wrbyte	#169, fp
1c0c0     10 4E 85 F1 | 	sub	fp, #16
1c0c4     14 00 90 FD | 	jmp	#LR__3095
1c0c8                 | LR__3094
1c0c8     0C 4E 05 F1 | 	add	fp, #12
1c0cc     A7 02 48 FC | 	wrbyte	#1, fp
1c0d0     04 4E 05 F1 | 	add	fp, #4
1c0d4     A7 02 48 FC | 	wrbyte	#1, fp
1c0d8     10 4E 85 F1 | 	sub	fp, #16
1c0dc                 | LR__3095
1c0dc                 | ' 				ty =  0x01 ; cmd =  (1) ;
1c0dc                 | ' 			}
1c0dc                 | ' 			for (tmr = 1000; tmr; tmr--) {
1c0dc     18 4E 05 F1 | 	add	fp, #24
1c0e0     01 00 80 FF 
1c0e4     A7 D0 6B FC | 	wrlong	##1000, fp
1c0e8     18 4E 85 F1 | 	sub	fp, #24
1c0ec                 | LR__3096
1c0ec     18 4E 05 F1 | 	add	fp, #24
1c0f0     A7 22 0A FB | 	rdlong	local03, fp wz
1c0f4     18 4E 85 F1 | 	sub	fp, #24
1c0f8     44 00 90 AD |  if_e	jmp	#LR__3097
1c0fc     10 4E 05 F1 | 	add	fp, #16
1c100     A7 12 C2 FA | 	rdbyte	arg01, fp
1c104     10 4E 85 F1 | 	sub	fp, #16
1c108     00 14 06 F6 | 	mov	arg02, #0
1c10c     7C 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0969
1c110     FD 24 02 F6 | 	mov	local04, result1
1c114     07 24 4E F7 | 	zerox	local04, #7 wz
1c118     24 00 90 AD |  if_e	jmp	#LR__3097
1c11c     01 00 00 FF 
1c120     E8 13 06 F6 | 	mov	arg01, ##1000
1c124     A8 9A BF FD | 	call	#__system___waitus
1c128     18 4E 05 F1 | 	add	fp, #24
1c12c     A7 24 02 FB | 	rdlong	local04, fp
1c130     01 24 86 F1 | 	sub	local04, #1
1c134     A7 24 62 FC | 	wrlong	local04, fp
1c138     18 4E 85 F1 | 	sub	fp, #24
1c13c     AC FF 9F FD | 	jmp	#LR__3096
1c140                 | LR__3097
1c140     18 4E 05 F1 | 	add	fp, #24
1c144     A7 24 0A FB | 	rdlong	local04, fp wz
1c148     18 4E 85 F1 | 	sub	fp, #24
1c14c     14 00 90 AD |  if_e	jmp	#LR__3098
1c150     10 12 06 F6 | 	mov	arg01, #16
1c154     09 14 C6 F9 | 	decod	arg02, #9
1c158     30 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0969
1c15c     07 FA 4D F7 | 	zerox	result1, #7 wz
1c160     0C 00 90 AD |  if_e	jmp	#LR__3099
1c164                 | LR__3098
1c164     0C 4E 05 F1 | 	add	fp, #12
1c168     A7 00 48 FC | 	wrbyte	#0, fp
1c16c     0C 4E 85 F1 | 	sub	fp, #12
1c170                 | LR__3099
1c170     14 24 06 FB | 	rdlong	local04, #20
1c174     18 4E 05 F1 | 	add	fp, #24
1c178     A7 24 62 FC | 	wrlong	local04, fp
1c17c     18 4E 85 F1 | 	sub	fp, #24
1c180     F0 FA 02 FF 
1c184     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1c188     18 00 90 3D |  if_ae	jmp	#LR__3100
1c18c     24 4E 05 F1 | 	add	fp, #36
1c190     A7 24 02 FB | 	rdlong	local04, fp
1c194     1B 24 26 F4 | 	bith	local04, #27
1c198     A7 24 62 FC | 	wrlong	local04, fp
1c19c     24 4E 85 F1 | 	sub	fp, #36
1c1a0     2C 00 90 FD | 	jmp	#LR__3101
1c1a4                 | LR__3100
1c1a4     18 4E 05 F1 | 	add	fp, #24
1c1a8     A7 24 02 FB | 	rdlong	local04, fp
1c1ac     18 4E 85 F1 | 	sub	fp, #24
1c1b0     E1 F5 05 FF 
1c1b4     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1c1b8     24 4E 05 C1 |  if_b	add	fp, #36
1c1bc     A7 24 02 CB |  if_b	rdlong	local04, fp
1c1c0     80 00 04 CF 
1c1c4     00 24 46 C5 |  if_b	or	local04, ##134283264
1c1c8     A7 24 62 CC |  if_b	wrlong	local04, fp
1c1cc     24 4E 85 C1 |  if_b	sub	fp, #36
1c1d0                 | LR__3101
1c1d0     18 4E 05 F1 | 	add	fp, #24
1c1d4     A7 24 02 FB | 	rdlong	local04, fp
1c1d8     18 4E 85 F1 | 	sub	fp, #24
1c1dc     F0 FA 02 FF 
1c1e0     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1c1e4     1C 4E 05 C1 |  if_b	add	fp, #28
1c1e8     00 01 80 CF 
1c1ec     A7 08 68 CC |  if_b	wrlong	##131076, fp
1c1f0     1C 4E 85 C1 |  if_b	sub	fp, #28
1c1f4     A8 00 90 CD |  if_b	jmp	#LR__3105
1c1f8     18 4E 05 F1 | 	add	fp, #24
1c1fc     A7 24 02 FB | 	rdlong	local04, fp
1c200     18 4E 85 F1 | 	sub	fp, #24
1c204     68 78 04 FF 
1c208     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1c20c     1C 4E 05 C1 |  if_b	add	fp, #28
1c210     80 01 80 CF 
1c214     A7 0C 68 CC |  if_b	wrlong	##196614, fp
1c218     1C 4E 85 C1 |  if_b	sub	fp, #28
1c21c     80 00 90 CD |  if_b	jmp	#LR__3104
1c220     18 4E 05 F1 | 	add	fp, #24
1c224     A7 24 02 FB | 	rdlong	local04, fp
1c228     18 4E 85 F1 | 	sub	fp, #24
1c22c     E1 F5 05 FF 
1c230     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1c234     1C 4E 05 C1 |  if_b	add	fp, #28
1c238     00 02 80 CF 
1c23c     A7 10 68 CC |  if_b	wrlong	##262152, fp
1c240     1C 4E 85 C1 |  if_b	sub	fp, #28
1c244     58 00 90 CD |  if_b	jmp	#LR__3103
1c248     18 4E 05 F1 | 	add	fp, #24
1c24c     A7 24 02 FB | 	rdlong	local04, fp
1c250     18 4E 85 F1 | 	sub	fp, #24
1c254     59 73 07 FF 
1c258     81 24 16 F2 | 	cmp	local04, ##250000001 wc
1c25c     1C 4E 05 C1 |  if_b	add	fp, #28
1c260     80 02 80 CF 
1c264     A7 14 68 CC |  if_b	wrlong	##327690, fp
1c268     1C 4E 85 C1 |  if_b	sub	fp, #28
1c26c     30 00 90 CD |  if_b	jmp	#LR__3102
1c270     18 4E 05 F1 | 	add	fp, #24
1c274     A7 24 02 FB | 	rdlong	local04, fp
1c278     18 4E 85 F1 | 	sub	fp, #24
1c27c     D1 F0 08 FF 
1c280     01 25 16 F2 | 	cmp	local04, ##300000001 wc
1c284     1C 4E 05 C1 |  if_b	add	fp, #28
1c288     00 03 80 CF 
1c28c     A7 18 68 CC |  if_b	wrlong	##393228, fp
1c290     1C 4E 85 F3 | 	sumc	fp, #28
1c294     80 03 80 3F 
1c298     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
1c29c     1C 4E 85 31 |  if_ae	sub	fp, #28
1c2a0                 | LR__3102
1c2a0                 | LR__3103
1c2a0                 | LR__3104
1c2a0                 | LR__3105
1c2a0                 | LR__3106
1c2a0                 | LR__3107
1c2a0     0C 4E 05 F1 | 	add	fp, #12
1c2a4     A7 24 C2 FA | 	rdbyte	local04, fp
1c2a8     01 00 00 FF 
1c2ac     21 E4 05 F1 | 	add	objptr, ##545
1c2b0     F2 24 42 FC | 	wrbyte	local04, objptr
1c2b4     A7 1E CA FA | 	rdbyte	local01, fp wz
1c2b8     00 24 06 56 |  if_ne	mov	local04, #0
1c2bc     01 24 06 A6 |  if_e	mov	local04, #1
1c2c0     20 4E 05 F1 | 	add	fp, #32
1c2c4     A7 24 42 FC | 	wrbyte	local04, fp
1c2c8     A7 24 C2 FA | 	rdbyte	local04, fp
1c2cc     2C 4E 85 F1 | 	sub	fp, #44
1c2d0     01 E4 85 F1 | 	sub	objptr, #1
1c2d4     F2 24 42 FC | 	wrbyte	local04, objptr
1c2d8     01 00 00 FF 
1c2dc     20 E4 85 F1 | 	sub	objptr, ##544
1c2e0     E8 7B B0 FD | 	call	#_fatfs_cc_deselect_0955
1c2e4     34 4E 05 F1 | 	add	fp, #52
1c2e8     A7 12 02 FB | 	rdlong	arg01, fp
1c2ec     18 4E 85 F1 | 	sub	fp, #24
1c2f0     A7 14 02 FB | 	rdlong	arg02, fp
1c2f4     09 15 12 FC | 	wxpin	arg02, arg01
1c2f8     1C 4E 05 F1 | 	add	fp, #28
1c2fc     A7 12 02 FB | 	rdlong	arg01, fp
1c300     14 4E 85 F1 | 	sub	fp, #20
1c304     A7 14 02 FB | 	rdlong	arg02, fp
1c308     09 15 02 FC | 	wrpin	arg02, arg01
1c30c                 | ' 
1c30c                 | ' 		}
1c30c                 | ' 	}
1c30c                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
1c30c                 | ' 	CardType = ty;
1c30c                 | ' 	s = ty ? 0 :  0x01 ;
1c30c                 | ' 	Stat = s;
1c30c                 | ' 
1c30c                 | ' 	deselect();
1c30c                 | ' 
1c30c                 | ' 
1c30c                 | ' 	_wxpin( PIN_CLK, ck_div );
1c30c                 | ' 	_wrpin( PIN_DI, spm_tx );
1c30c                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
1c30c                 | ' 	return s;
1c30c     08 4E 05 F1 | 	add	fp, #8
1c310     A7 FA C1 FA | 	rdbyte	result1, fp
1c314     2C 4E 85 F1 | 	sub	fp, #44
1c318                 | LR__3108
1c318     A7 F0 03 F6 | 	mov	ptra, fp
1c31c     B2 00 A0 FD | 	call	#popregs_
1c320                 | _fatfs_cc_disk_initialize_ret
1c320     2D 00 64 FD | 	ret
1c324                 | 
1c324                 | _fatfs_cc_disk_read
1c324     05 4A 05 F6 | 	mov	COUNT_, #5
1c328     A8 00 A0 FD | 	call	#pushregs_
1c32c     0A 1F 02 F6 | 	mov	local01, arg02
1c330     0B 21 02 F6 | 	mov	local02, arg03
1c334     0C 23 02 F6 | 	mov	local03, arg04
1c338     00 12 0E F2 | 	cmp	arg01, #0 wz
1c33c     01 FA 05 56 |  if_ne	mov	result1, #1
1c340                 | ' 
1c340                 | ' 	return Stat;
1c340     01 00 00 AF 
1c344     20 E4 05 A1 |  if_e	add	objptr, ##544
1c348     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1c34c     01 00 00 AF 
1c350     20 E4 85 A1 |  if_e	sub	objptr, ##544
1c354     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c358     01 FA CD F7 | 	test	result1, #1 wz
1c35c     03 FA 05 56 |  if_ne	mov	result1, #3
1c360     84 00 90 5D |  if_ne	jmp	#LR__3112
1c364     01 00 00 FF 
1c368     21 E4 05 F1 | 	add	objptr, ##545
1c36c     F2 24 C2 FA | 	rdbyte	local04, objptr
1c370     01 00 00 FF 
1c374     21 E4 85 F1 | 	sub	objptr, ##545
1c378     08 24 CE F7 | 	test	local04, #8 wz
1c37c     09 20 66 A0 |  if_e	shl	local02, #9
1c380     02 22 16 F2 | 	cmp	local03, #2 wc
1c384     12 24 06 36 |  if_ae	mov	local04, #18
1c388     11 24 06 C6 |  if_b	mov	local04, #17
1c38c     10 15 02 F6 | 	mov	arg02, local02
1c390     12 13 02 F6 | 	mov	arg01, local04
1c394     F4 7D B0 FD | 	call	#_fatfs_cc_send_cmd_0969
1c398     FD 26 02 F6 | 	mov	local05, result1
1c39c     07 26 4E F7 | 	zerox	local05, #7 wz
1c3a0     30 00 90 5D |  if_ne	jmp	#LR__3111
1c3a4                 | ' 		do {
1c3a4                 | LR__3110
1c3a4     0F 13 02 F6 | 	mov	arg01, local01
1c3a8     09 14 C6 F9 | 	decod	arg02, #9
1c3ac     30 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_0963
1c3b0     00 FA 0D F2 | 	cmp	result1, #0 wz
1c3b4     01 00 00 5F 
1c3b8     00 1E 06 51 |  if_ne	add	local01, ##512
1c3bc     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3110
1c3c0     12 25 E2 F8 | 	getbyte	local04, local04, #0
1c3c4     12 24 0E F2 | 	cmp	local04, #18 wz
1c3c8     0C 12 06 A6 |  if_e	mov	arg01, #12
1c3cc     00 14 06 A6 |  if_e	mov	arg02, #0
1c3d0     B8 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_0969
1c3d4                 | LR__3111
1c3d4     F4 7A B0 FD | 	call	#_fatfs_cc_deselect_0955
1c3d8                 | ' 	}
1c3d8                 | ' 	deselect();
1c3d8                 | ' 
1c3d8                 | ' 	return count ? RES_ERROR : RES_OK;
1c3d8     00 22 0E F2 | 	cmp	local03, #0 wz
1c3dc     01 26 06 56 |  if_ne	mov	local05, #1
1c3e0     00 26 06 A6 |  if_e	mov	local05, #0
1c3e4     13 FB 01 F6 | 	mov	result1, local05
1c3e8                 | LR__3112
1c3e8     A7 F0 03 F6 | 	mov	ptra, fp
1c3ec     B2 00 A0 FD | 	call	#popregs_
1c3f0                 | _fatfs_cc_disk_read_ret
1c3f0     2D 00 64 FD | 	ret
1c3f4                 | 
1c3f4                 | _fatfs_cc_disk_write
1c3f4     04 4A 05 F6 | 	mov	COUNT_, #4
1c3f8     A8 00 A0 FD | 	call	#pushregs_
1c3fc     0A 1F 02 F6 | 	mov	local01, arg02
1c400     0C 21 02 F6 | 	mov	local02, arg04
1c404     0B 23 02 F6 | 	mov	local03, arg03
1c408     00 12 0E F2 | 	cmp	arg01, #0 wz
1c40c     01 FA 05 56 |  if_ne	mov	result1, #1
1c410                 | ' 
1c410                 | ' 	return Stat;
1c410     01 00 00 AF 
1c414     20 E4 05 A1 |  if_e	add	objptr, ##544
1c418     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1c41c     01 00 00 AF 
1c420     20 E4 85 A1 |  if_e	sub	objptr, ##544
1c424     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c428     01 FA CD F7 | 	test	result1, #1 wz
1c42c     03 FA 05 56 |  if_ne	mov	result1, #3
1c430     D4 00 90 5D |  if_ne	jmp	#LR__3124
1c434     01 00 00 FF 
1c438     21 E4 05 F1 | 	add	objptr, ##545
1c43c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1c440     01 00 00 FF 
1c444     21 E4 85 F1 | 	sub	objptr, ##545
1c448     08 16 CE F7 | 	test	arg03, #8 wz
1c44c     09 22 66 A0 |  if_e	shl	local03, #9
1c450     01 20 0E F2 | 	cmp	local02, #1 wz
1c454     30 00 90 5D |  if_ne	jmp	#LR__3120
1c458     18 12 06 F6 | 	mov	arg01, #24
1c45c     11 15 02 F6 | 	mov	arg02, local03
1c460     28 7D B0 FD | 	call	#_fatfs_cc_send_cmd_0969
1c464     FD 24 02 F6 | 	mov	local04, result1
1c468     07 24 4E F7 | 	zerox	local04, #7 wz
1c46c     84 00 90 5D |  if_ne	jmp	#LR__3123
1c470     0F 13 02 F6 | 	mov	arg01, local01
1c474     FE 14 06 F6 | 	mov	arg02, #254
1c478     44 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_0965
1c47c     00 FA 0D F2 | 	cmp	result1, #0 wz
1c480     00 20 06 56 |  if_ne	mov	local02, #0
1c484     6C 00 90 FD | 	jmp	#LR__3123
1c488                 | LR__3120
1c488     01 00 00 FF 
1c48c     21 E4 05 F1 | 	add	objptr, ##545
1c490     F2 24 C2 FA | 	rdbyte	local04, objptr
1c494     01 00 00 FF 
1c498     21 E4 85 F1 | 	sub	objptr, ##545
1c49c     06 24 CE F7 | 	test	local04, #6 wz
1c4a0     97 12 06 56 |  if_ne	mov	arg01, #151
1c4a4     10 15 02 56 |  if_ne	mov	arg02, local02
1c4a8     E0 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_0969
1c4ac     11 15 02 F6 | 	mov	arg02, local03
1c4b0     19 12 06 F6 | 	mov	arg01, #25
1c4b4     D4 7C B0 FD | 	call	#_fatfs_cc_send_cmd_0969
1c4b8     FD 24 02 F6 | 	mov	local04, result1
1c4bc     07 24 4E F7 | 	zerox	local04, #7 wz
1c4c0     30 00 90 5D |  if_ne	jmp	#LR__3122
1c4c4                 | ' 			do {
1c4c4                 | LR__3121
1c4c4     0F 13 02 F6 | 	mov	arg01, local01
1c4c8     FC 14 06 F6 | 	mov	arg02, #252
1c4cc     F0 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_0965
1c4d0     00 FA 0D F2 | 	cmp	result1, #0 wz
1c4d4     01 00 00 5F 
1c4d8     00 1E 06 51 |  if_ne	add	local01, ##512
1c4dc     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3121
1c4e0     00 12 06 F6 | 	mov	arg01, #0
1c4e4     FD 14 06 F6 | 	mov	arg02, #253
1c4e8     D4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_0965
1c4ec     00 FA 0D F2 | 	cmp	result1, #0 wz
1c4f0     01 20 06 A6 |  if_e	mov	local02, #1
1c4f4                 | LR__3122
1c4f4                 | LR__3123
1c4f4     D4 79 B0 FD | 	call	#_fatfs_cc_deselect_0955
1c4f8                 | ' 				count = 1;
1c4f8                 | ' 		}
1c4f8                 | ' 	}
1c4f8                 | ' 	deselect();
1c4f8                 | ' 
1c4f8                 | ' 	return count ? RES_ERROR : RES_OK;
1c4f8     00 20 0E F2 | 	cmp	local02, #0 wz
1c4fc     01 24 06 56 |  if_ne	mov	local04, #1
1c500     00 24 06 A6 |  if_e	mov	local04, #0
1c504     12 FB 01 F6 | 	mov	result1, local04
1c508                 | LR__3124
1c508     A7 F0 03 F6 | 	mov	ptra, fp
1c50c     B2 00 A0 FD | 	call	#popregs_
1c510                 | _fatfs_cc_disk_write_ret
1c510     2D 00 64 FD | 	ret
1c514                 | 
1c514                 | _fatfs_cc_disk_ioctl
1c514     01 4A 05 F6 | 	mov	COUNT_, #1
1c518     A8 00 A0 FD | 	call	#pushregs_
1c51c     30 F0 07 F1 | 	add	ptra, #48
1c520     04 4E 05 F1 | 	add	fp, #4
1c524     A7 12 42 FC | 	wrbyte	arg01, fp
1c528     04 4E 05 F1 | 	add	fp, #4
1c52c     A7 14 42 FC | 	wrbyte	arg02, fp
1c530     04 4E 05 F1 | 	add	fp, #4
1c534     A7 16 62 FC | 	wrlong	arg03, fp
1c538     08 4E 85 F1 | 	sub	fp, #8
1c53c     A7 12 CA FA | 	rdbyte	arg01, fp wz
1c540     04 4E 85 F1 | 	sub	fp, #4
1c544     01 FA 05 56 |  if_ne	mov	result1, #1
1c548                 | ' 
1c548                 | ' 	return Stat;
1c548     01 00 00 AF 
1c54c     20 E4 05 A1 |  if_e	add	objptr, ##544
1c550     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1c554     01 00 00 AF 
1c558     20 E4 85 A1 |  if_e	sub	objptr, ##544
1c55c     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c560     01 FA CD F7 | 	test	result1, #1 wz
1c564     03 FA 05 56 |  if_ne	mov	result1, #3
1c568     E4 01 90 5D |  if_ne	jmp	#LR__3138
1c56c     10 4E 05 F1 | 	add	fp, #16
1c570     A7 02 68 FC | 	wrlong	#1, fp
1c574                 | ' 
1c574                 | ' 	res = RES_ERROR;
1c574                 | ' 	switch (ctrl) {
1c574     08 4E 85 F1 | 	sub	fp, #8
1c578     A7 1E C2 FA | 	rdbyte	local01, fp
1c57c     08 4E 85 F1 | 	sub	fp, #8
1c580     04 1E 26 F3 | 	fle	local01, #4
1c584     30 1E 62 FD | 	jmprel	local01
1c588                 | LR__3130
1c588     10 00 90 FD | 	jmp	#LR__3131
1c58c     24 00 90 FD | 	jmp	#LR__3132
1c590     A0 01 90 FD | 	jmp	#LR__3136
1c594     80 01 90 FD | 	jmp	#LR__3135
1c598     98 01 90 FD | 	jmp	#LR__3136
1c59c                 | LR__3131
1c59c     B0 79 B0 FD | 	call	#_fatfs_cc_select_0959
1c5a0     00 FA 0D F2 | 	cmp	result1, #0 wz
1c5a4     10 4E 05 51 |  if_ne	add	fp, #16
1c5a8     A7 00 68 5C |  if_ne	wrlong	#0, fp
1c5ac     10 4E 85 51 |  if_ne	sub	fp, #16
1c5b0                 | ' 			break;
1c5b0     8C 01 90 FD | 	jmp	#LR__3137
1c5b4                 | LR__3132
1c5b4     09 12 06 F6 | 	mov	arg01, #9
1c5b8     00 14 06 F6 | 	mov	arg02, #0
1c5bc     CC 7B B0 FD | 	call	#_fatfs_cc_send_cmd_0969
1c5c0     FD 1E 02 F6 | 	mov	local01, result1
1c5c4     07 1E 4E F7 | 	zerox	local01, #7 wz
1c5c8     74 01 90 5D |  if_ne	jmp	#LR__3137
1c5cc     18 4E 05 F1 | 	add	fp, #24
1c5d0     A7 12 02 F6 | 	mov	arg01, fp
1c5d4     18 4E 85 F1 | 	sub	fp, #24
1c5d8     10 14 06 F6 | 	mov	arg02, #16
1c5dc     00 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_0963
1c5e0     00 FA 0D F2 | 	cmp	result1, #0 wz
1c5e4     58 01 90 AD |  if_e	jmp	#LR__3137
1c5e8     18 4E 05 F1 | 	add	fp, #24
1c5ec     A7 1E C2 FA | 	rdbyte	local01, fp
1c5f0     18 4E 85 F1 | 	sub	fp, #24
1c5f4     06 1E 46 F0 | 	shr	local01, #6
1c5f8     01 1E 0E F2 | 	cmp	local01, #1 wz
1c5fc     5C 00 90 5D |  if_ne	jmp	#LR__3133
1c600     21 4E 05 F1 | 	add	fp, #33
1c604     A7 1E C2 FA | 	rdbyte	local01, fp
1c608     01 4E 85 F1 | 	sub	fp, #1
1c60c     A7 FA C1 FA | 	rdbyte	result1, fp
1c610     FD FA 31 F9 | 	getword	result1, result1, #0
1c614     08 FA 65 F0 | 	shl	result1, #8
1c618     FD 1E 02 F1 | 	add	local01, result1
1c61c     01 4E 85 F1 | 	sub	fp, #1
1c620     A7 FA C1 FA | 	rdbyte	result1, fp
1c624     3F FA 05 F5 | 	and	result1, #63
1c628     10 FA 65 F0 | 	shl	result1, #16
1c62c     FD 1E 02 F1 | 	add	local01, result1
1c630     01 1E 06 F1 | 	add	local01, #1
1c634     09 4E 05 F1 | 	add	fp, #9
1c638     A7 1E 62 FC | 	wrlong	local01, fp
1c63c     1C 4E 85 F1 | 	sub	fp, #28
1c640     A7 1E 02 FB | 	rdlong	local01, fp
1c644     1C 4E 05 F1 | 	add	fp, #28
1c648     A7 FA 01 FB | 	rdlong	result1, fp
1c64c     28 4E 85 F1 | 	sub	fp, #40
1c650     0A FA 65 F0 | 	shl	result1, #10
1c654     0F FB 61 FC | 	wrlong	result1, local01
1c658     AC 00 90 FD | 	jmp	#LR__3134
1c65c                 | LR__3133
1c65c     1D 4E 05 F1 | 	add	fp, #29
1c660     A7 1E C2 FA | 	rdbyte	local01, fp
1c664     0F 1F 42 F8 | 	getnib	local01, local01, #0
1c668     05 4E 05 F1 | 	add	fp, #5
1c66c     A7 FA C1 FA | 	rdbyte	result1, fp
1c670     80 FA 05 F5 | 	and	result1, #128
1c674     07 FA C5 F0 | 	sar	result1, #7
1c678     FD 1E 02 F1 | 	add	local01, result1
1c67c     01 4E 85 F1 | 	sub	fp, #1
1c680     A7 FA C1 FA | 	rdbyte	result1, fp
1c684     03 FA 05 F5 | 	and	result1, #3
1c688     01 FA 65 F0 | 	shl	result1, #1
1c68c     FD 1E 02 F1 | 	add	local01, result1
1c690     02 1E 06 F1 | 	add	local01, #2
1c694     0D 4E 85 F1 | 	sub	fp, #13
1c698     A7 1E 42 FC | 	wrbyte	local01, fp
1c69c     0C 4E 05 F1 | 	add	fp, #12
1c6a0     A7 1E C2 FA | 	rdbyte	local01, fp
1c6a4     06 1E 46 F0 | 	shr	local01, #6
1c6a8     01 4E 85 F1 | 	sub	fp, #1
1c6ac     A7 FA C1 FA | 	rdbyte	result1, fp
1c6b0     FD FA 31 F9 | 	getword	result1, result1, #0
1c6b4     02 FA 65 F0 | 	shl	result1, #2
1c6b8     FD 1E 02 F1 | 	add	local01, result1
1c6bc     01 4E 85 F1 | 	sub	fp, #1
1c6c0     A7 FA C1 FA | 	rdbyte	result1, fp
1c6c4     03 FA 05 F5 | 	and	result1, #3
1c6c8     FD FA 31 F9 | 	getword	result1, result1, #0
1c6cc     0A FA 65 F0 | 	shl	result1, #10
1c6d0     FD 1E 02 F1 | 	add	local01, result1
1c6d4     01 1E 06 F1 | 	add	local01, #1
1c6d8     0A 4E 05 F1 | 	add	fp, #10
1c6dc     A7 1E 62 FC | 	wrlong	local01, fp
1c6e0     1C 4E 85 F1 | 	sub	fp, #28
1c6e4     A7 1E 02 FB | 	rdlong	local01, fp
1c6e8     1C 4E 05 F1 | 	add	fp, #28
1c6ec     A7 FA 01 FB | 	rdlong	result1, fp
1c6f0     14 4E 85 F1 | 	sub	fp, #20
1c6f4     A7 16 C2 FA | 	rdbyte	arg03, fp
1c6f8     14 4E 85 F1 | 	sub	fp, #20
1c6fc     09 16 86 F1 | 	sub	arg03, #9
1c700     0B FB 61 F0 | 	shl	result1, arg03
1c704     0F FB 61 FC | 	wrlong	result1, local01
1c708                 | LR__3134
1c708     10 4E 05 F1 | 	add	fp, #16
1c70c     A7 00 68 FC | 	wrlong	#0, fp
1c710     10 4E 85 F1 | 	sub	fp, #16
1c714                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
1c714                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
1c714                 | ' 					*(LBA_t*)buff = cs << (n - 9);
1c714                 | ' 				}
1c714                 | ' 				res = RES_OK;
1c714                 | ' 			}
1c714                 | ' 			break;
1c714     28 00 90 FD | 	jmp	#LR__3137
1c718                 | LR__3135
1c718     0C 4E 05 F1 | 	add	fp, #12
1c71c     A7 1E 02 FB | 	rdlong	local01, fp
1c720     0F 01 69 FC | 	wrlong	#128, local01
1c724     04 4E 05 F1 | 	add	fp, #4
1c728     A7 00 68 FC | 	wrlong	#0, fp
1c72c     10 4E 85 F1 | 	sub	fp, #16
1c730                 | ' 			*(DWORD*)buff = 128;
1c730                 | ' 			res = RES_OK;
1c730                 | ' 			break;
1c730     0C 00 90 FD | 	jmp	#LR__3137
1c734                 | LR__3136
1c734     10 4E 05 F1 | 	add	fp, #16
1c738     A7 08 68 FC | 	wrlong	#4, fp
1c73c     10 4E 85 F1 | 	sub	fp, #16
1c740                 | LR__3137
1c740     88 77 B0 FD | 	call	#_fatfs_cc_deselect_0955
1c744                 | ' 			res = RES_PARERR;
1c744                 | ' 	}
1c744                 | ' 
1c744                 | ' 	deselect();
1c744                 | ' 
1c744                 | ' 	return res;
1c744     10 4E 05 F1 | 	add	fp, #16
1c748     A7 FA 01 FB | 	rdlong	result1, fp
1c74c     10 4E 85 F1 | 	sub	fp, #16
1c750                 | LR__3138
1c750     A7 F0 03 F6 | 	mov	ptra, fp
1c754     B2 00 A0 FD | 	call	#popregs_
1c758                 | _fatfs_cc_disk_ioctl_ret
1c758     2D 00 64 FD | 	ret
1c75c                 | 
1c75c                 | _fatfs_cc_disk_setpins
1c75c     00 12 0E F2 | 	cmp	arg01, #0 wz
1c760     01 FA 65 56 |  if_ne	neg	result1, #1
1c764     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
1c768     01 00 00 FF 
1c76c     10 E4 05 F1 | 	add	objptr, ##528
1c770     F2 14 62 FC | 	wrlong	arg02, objptr
1c774     04 E4 05 F1 | 	add	objptr, #4
1c778     F2 16 62 FC | 	wrlong	arg03, objptr
1c77c     04 E4 05 F1 | 	add	objptr, #4
1c780     F2 18 62 FC | 	wrlong	arg04, objptr
1c784     04 E4 05 F1 | 	add	objptr, #4
1c788     F2 1A 62 FC | 	wrlong	arg05, objptr
1c78c     01 00 00 FF 
1c790     1C E4 85 F1 | 	sub	objptr, ##540
1c794     00 FA 05 F6 | 	mov	result1, #0
1c798                 | _fatfs_cc_disk_setpins_ret
1c798     2D 00 64 FD | 	ret
1c79c                 | 
1c79c                 | _fatfs_cc_tchar2uni
1c79c     09 01 02 FB | 	rdlong	_var01, arg01
1c7a0     00 03 02 F6 | 	mov	_var02, _var01
1c7a4     01 00 06 F1 | 	add	_var01, #1
1c7a8     00 05 02 F6 | 	mov	_var03, _var01
1c7ac     01 07 C2 FA | 	rdbyte	_var04, _var02
1c7b0     80 06 CE F7 | 	test	_var04, #128 wz
1c7b4     E8 00 90 AD |  if_e	jmp	#LR__3147
1c7b8     03 09 02 F6 | 	mov	_var05, _var04
1c7bc     E0 08 06 F5 | 	and	_var05, #224
1c7c0     C0 08 0E F2 | 	cmp	_var05, #192 wz
1c7c4     1F 06 06 A5 |  if_e	and	_var04, #31
1c7c8     01 0A 06 A6 |  if_e	mov	_var06, #1
1c7cc     34 00 90 AD |  if_e	jmp	#LR__3141
1c7d0     03 09 02 F6 | 	mov	_var05, _var04
1c7d4     F0 08 06 F5 | 	and	_var05, #240
1c7d8     E0 08 0E F2 | 	cmp	_var05, #224 wz
1c7dc     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
1c7e0     02 0A 06 A6 |  if_e	mov	_var06, #2
1c7e4     1C 00 90 AD |  if_e	jmp	#LR__3140
1c7e8     03 09 02 F6 | 	mov	_var05, _var04
1c7ec     F8 08 06 F5 | 	and	_var05, #248
1c7f0     F0 08 0E F2 | 	cmp	_var05, #240 wz
1c7f4     07 06 06 A5 |  if_e	and	_var04, #7
1c7f8     03 0A 06 A6 |  if_e	mov	_var06, #3
1c7fc                 | ' 			return 0xFFFFFFFF;
1c7fc     01 FA 65 56 |  if_ne	neg	result1, #1
1c800     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
1c804                 | LR__3140
1c804                 | LR__3141
1c804                 | ' 		}
1c804                 | ' 		do {
1c804                 | LR__3142
1c804     02 0D C2 FA | 	rdbyte	_var07, _var03
1c808     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
1c80c     C0 08 06 F5 | 	and	_var05, #192
1c810     80 08 0E F2 | 	cmp	_var05, #128 wz
1c814     01 04 06 F1 | 	add	_var03, #1
1c818     01 FA 65 56 |  if_ne	neg	result1, #1
1c81c     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
1c820     06 06 66 F0 | 	shl	_var04, #6
1c824     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
1c828     3F 02 06 F5 | 	and	_var02, #63
1c82c     01 07 42 F5 | 	or	_var04, _var02
1c830     F4 0B 6E FB | 	djnz	_var06, #LR__3142
1c834     80 06 16 F2 | 	cmp	_var04, #128 wc
1c838     24 00 90 CD |  if_b	jmp	#LR__3144
1c83c     6C 00 00 FF 
1c840     00 06 16 F2 | 	cmp	_var04, ##55296 wc
1c844     0C 00 90 CD |  if_b	jmp	#LR__3143
1c848     70 00 00 FF 
1c84c     00 06 16 F2 | 	cmp	_var04, ##57344 wc
1c850     0C 00 90 CD |  if_b	jmp	#LR__3144
1c854                 | LR__3143
1c854     80 08 00 FF 
1c858     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
1c85c     08 00 90 CD |  if_b	jmp	#LR__3145
1c860                 | LR__3144
1c860     01 FA 65 F6 | 	neg	result1, #1
1c864     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
1c868                 | LR__3145
1c868     80 00 00 FF 
1c86c     00 06 16 F2 | 	cmp	_var04, ##65536 wc
1c870     2C 00 90 CD |  if_b	jmp	#LR__3146
1c874     03 03 02 F6 | 	mov	_var02, _var04
1c878     80 00 00 FF 
1c87c     00 02 86 F1 | 	sub	_var02, ##65536
1c880     06 02 66 F0 | 	shl	_var02, #6
1c884     80 FF 01 FF 
1c888     00 02 06 F5 | 	and	_var02, ##67043328
1c88c     6E 00 6C FF 
1c890     00 08 06 F6 | 	mov	_var05, ##-671032320
1c894     01 09 42 F5 | 	or	_var05, _var02
1c898     09 06 46 F7 | 	zerox	_var04, #9
1c89c     04 07 42 F5 | 	or	_var04, _var05
1c8a0                 | LR__3146
1c8a0                 | LR__3147
1c8a0     09 05 62 FC | 	wrlong	_var03, arg01
1c8a4                 | ' 	}
1c8a4                 | ' #line 811 "ff.c"
1c8a4                 | ' 	*str = p;
1c8a4                 | ' 	return uc;
1c8a4     03 FB 01 F6 | 	mov	result1, _var04
1c8a8                 | _fatfs_cc_tchar2uni_ret
1c8a8     2D 00 64 FD | 	ret
1c8ac                 | 
1c8ac                 | _fatfs_cc_put_utf
1c8ac     80 12 16 F2 | 	cmp	arg01, #128 wc
1c8b0     18 00 90 3D |  if_ae	jmp	#LR__3150
1c8b4     01 16 16 F2 | 	cmp	arg03, #1 wc
1c8b8     00 FA 05 C6 |  if_b	mov	result1, #0
1c8bc     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1c8c0     0A 13 42 FC | 	wrbyte	arg01, arg02
1c8c4                 | ' 		*buf = (TCHAR)chr;
1c8c4                 | ' 		return 1;
1c8c4     01 FA 05 F6 | 	mov	result1, #1
1c8c8     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1c8cc                 | LR__3150
1c8cc     04 00 00 FF 
1c8d0     00 12 16 F2 | 	cmp	arg01, ##2048 wc
1c8d4     40 00 90 3D |  if_ae	jmp	#LR__3151
1c8d8     02 16 16 F2 | 	cmp	arg03, #2 wc
1c8dc     00 FA 05 C6 |  if_b	mov	result1, #0
1c8e0     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1c8e4     09 FB 01 F6 | 	mov	result1, arg01
1c8e8     06 FA 45 F0 | 	shr	result1, #6
1c8ec     1F FA 05 F5 | 	and	result1, #31
1c8f0     C0 16 06 F6 | 	mov	arg03, #192
1c8f4     FD 16 42 F5 | 	or	arg03, result1
1c8f8     0A 17 42 FC | 	wrbyte	arg03, arg02
1c8fc     01 14 06 F1 | 	add	arg02, #1
1c900     3F 12 06 F5 | 	and	arg01, #63
1c904     80 FA 05 F6 | 	mov	result1, #128
1c908     09 FB 41 F5 | 	or	result1, arg01
1c90c     0A FB 41 FC | 	wrbyte	result1, arg02
1c910                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
1c910                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1c910                 | ' 		return 2;
1c910     02 FA 05 F6 | 	mov	result1, #2
1c914     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1c918                 | LR__3151
1c918     80 00 00 FF 
1c91c     00 12 16 F2 | 	cmp	arg01, ##65536 wc
1c920     70 00 90 3D |  if_ae	jmp	#LR__3154
1c924     03 16 16 F2 | 	cmp	arg03, #3 wc
1c928     18 00 90 CD |  if_b	jmp	#LR__3152
1c92c     6C 00 00 FF 
1c930     00 12 16 F2 | 	cmp	arg01, ##55296 wc
1c934     14 00 90 CD |  if_b	jmp	#LR__3153
1c938     70 00 00 FF 
1c93c     00 12 16 F2 | 	cmp	arg01, ##57344 wc
1c940     08 00 90 3D |  if_ae	jmp	#LR__3153
1c944                 | LR__3152
1c944     00 FA 05 F6 | 	mov	result1, #0
1c948     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1c94c                 | LR__3153
1c94c     09 FB 59 F8 | 	getnib	result1, arg01, #3
1c950     E0 16 06 F6 | 	mov	arg03, #224
1c954     FD 16 42 F5 | 	or	arg03, result1
1c958     0A 17 42 FC | 	wrbyte	arg03, arg02
1c95c     01 14 06 F1 | 	add	arg02, #1
1c960     09 FB 01 F6 | 	mov	result1, arg01
1c964     06 FA 45 F0 | 	shr	result1, #6
1c968     3F FA 05 F5 | 	and	result1, #63
1c96c     80 16 06 F6 | 	mov	arg03, #128
1c970     FD 16 42 F5 | 	or	arg03, result1
1c974     0A 17 42 FC | 	wrbyte	arg03, arg02
1c978     01 14 06 F1 | 	add	arg02, #1
1c97c     3F 12 06 F5 | 	and	arg01, #63
1c980     80 FA 05 F6 | 	mov	result1, #128
1c984     09 FB 41 F5 | 	or	result1, arg01
1c988     0A FB 41 FC | 	wrbyte	result1, arg02
1c98c                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
1c98c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
1c98c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1c98c                 | ' 		return 3;
1c98c     03 FA 05 F6 | 	mov	result1, #3
1c990     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1c994                 | LR__3154
1c994     04 16 16 F2 | 	cmp	arg03, #4 wc
1c998     00 FA 05 C6 |  if_b	mov	result1, #0
1c99c     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1c9a0     09 01 02 F6 | 	mov	_var01, arg01
1c9a4     E0 01 06 F4 | 	bitl	_var01, #480
1c9a8     00 00 6C FF 
1c9ac     00 00 86 F1 | 	sub	_var01, ##-671088640
1c9b0     06 00 46 F0 | 	shr	_var01, #6
1c9b4     09 13 32 F9 | 	getword	arg01, arg01, #0
1c9b8     6E 00 00 FF 
1c9bc     00 12 86 F1 | 	sub	arg01, ##56320
1c9c0     00 08 00 FF 
1c9c4     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
1c9c8     02 00 00 CF 
1c9cc     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
1c9d0     00 FA 05 36 |  if_ae	mov	result1, #0
1c9d4     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
1c9d8     09 01 42 F5 | 	or	_var01, arg01
1c9dc     80 00 00 FF 
1c9e0     00 00 06 F1 | 	add	_var01, ##65536
1c9e4     00 FB 01 F6 | 	mov	result1, _var01
1c9e8     12 FA 45 F0 | 	shr	result1, #18
1c9ec     07 FA 05 F5 | 	and	result1, #7
1c9f0     F0 16 06 F6 | 	mov	arg03, #240
1c9f4     FD 16 42 F5 | 	or	arg03, result1
1c9f8     0A 17 42 FC | 	wrbyte	arg03, arg02
1c9fc     01 14 06 F1 | 	add	arg02, #1
1ca00     00 FB 01 F6 | 	mov	result1, _var01
1ca04     0C FA 45 F0 | 	shr	result1, #12
1ca08     3F FA 05 F5 | 	and	result1, #63
1ca0c     80 16 06 F6 | 	mov	arg03, #128
1ca10     FD 16 42 F5 | 	or	arg03, result1
1ca14     0A 17 42 FC | 	wrbyte	arg03, arg02
1ca18     01 14 06 F1 | 	add	arg02, #1
1ca1c     00 FB 01 F6 | 	mov	result1, _var01
1ca20     06 FA 45 F0 | 	shr	result1, #6
1ca24     3F FA 05 F5 | 	and	result1, #63
1ca28     80 16 06 F6 | 	mov	arg03, #128
1ca2c     FD 16 42 F5 | 	or	arg03, result1
1ca30     0A 17 42 FC | 	wrbyte	arg03, arg02
1ca34     01 14 06 F1 | 	add	arg02, #1
1ca38     3F 00 06 F5 | 	and	_var01, #63
1ca3c     80 FA 05 F6 | 	mov	result1, #128
1ca40     00 FB 41 F5 | 	or	result1, _var01
1ca44     0A FB 41 FC | 	wrbyte	result1, arg02
1ca48                 | ' 	chr = (hc | chr) + 0x10000;
1ca48                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
1ca48                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
1ca48                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
1ca48                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1ca48                 | ' 	return 4;
1ca48     04 FA 05 F6 | 	mov	result1, #4
1ca4c                 | _fatfs_cc_put_utf_ret
1ca4c     2D 00 64 FD | 	ret
1ca50                 | 
1ca50                 | _fatfs_cc_sync_window
1ca50     02 4A 05 F6 | 	mov	COUNT_, #2
1ca54     A8 00 A0 FD | 	call	#pushregs_
1ca58     09 1F 02 F6 | 	mov	local01, arg01
1ca5c     00 20 06 F6 | 	mov	local02, #0
1ca60     03 1E 06 F1 | 	add	local01, #3
1ca64     0F FB C9 FA | 	rdbyte	result1, local01 wz
1ca68     03 1E 86 F1 | 	sub	local01, #3
1ca6c     A4 00 90 AD |  if_e	jmp	#LR__3162
1ca70     01 1E 06 F1 | 	add	local01, #1
1ca74     0F 13 C2 FA | 	rdbyte	arg01, local01
1ca78     33 1E 06 F1 | 	add	local01, #51
1ca7c     0F 15 02 F6 | 	mov	arg02, local01
1ca80     04 1E 86 F1 | 	sub	local01, #4
1ca84     0F 17 02 FB | 	rdlong	arg03, local01
1ca88     30 1E 86 F1 | 	sub	local01, #48
1ca8c     01 18 06 F6 | 	mov	arg04, #1
1ca90     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
1ca94     00 FA 0D F2 | 	cmp	result1, #0 wz
1ca98     74 00 90 5D |  if_ne	jmp	#LR__3160
1ca9c     03 1E 06 F1 | 	add	local01, #3
1caa0     0F 01 48 FC | 	wrbyte	#0, local01
1caa4     2D 1E 06 F1 | 	add	local01, #45
1caa8     0F FB 01 FB | 	rdlong	result1, local01
1caac     0C 1E 86 F1 | 	sub	local01, #12
1cab0     0F 19 02 FB | 	rdlong	arg04, local01
1cab4     0C FB 81 F1 | 	sub	result1, arg04
1cab8     08 1E 86 F1 | 	sub	local01, #8
1cabc     0F 19 02 FB | 	rdlong	arg04, local01
1cac0     1C 1E 86 F1 | 	sub	local01, #28
1cac4     0C FB 11 F2 | 	cmp	result1, arg04 wc
1cac8     48 00 90 3D |  if_ae	jmp	#LR__3161
1cacc     02 1E 06 F1 | 	add	local01, #2
1cad0     0F 19 C2 FA | 	rdbyte	arg04, local01
1cad4     02 1E 86 F1 | 	sub	local01, #2
1cad8     02 18 0E F2 | 	cmp	arg04, #2 wz
1cadc     34 00 90 5D |  if_ne	jmp	#LR__3161
1cae0     01 1E 06 F1 | 	add	local01, #1
1cae4     0F 13 C2 FA | 	rdbyte	arg01, local01
1cae8     33 1E 06 F1 | 	add	local01, #51
1caec     0F 15 02 F6 | 	mov	arg02, local01
1caf0     04 1E 86 F1 | 	sub	local01, #4
1caf4     0F 17 02 FB | 	rdlong	arg03, local01
1caf8     14 1E 86 F1 | 	sub	local01, #20
1cafc     0F 1F 02 FB | 	rdlong	local01, local01
1cb00     0F 17 02 F1 | 	add	arg03, local01
1cb04     01 18 06 F6 | 	mov	arg04, #1
1cb08     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
1cb0c     04 00 90 FD | 	jmp	#LR__3161
1cb10                 | LR__3160
1cb10     01 20 06 F6 | 	mov	local02, #1
1cb14                 | LR__3161
1cb14                 | LR__3162
1cb14                 | ' 			res = FR_DISK_ERR;
1cb14                 | ' 		}
1cb14                 | ' 	}
1cb14                 | ' 	return res;
1cb14     10 FB 01 F6 | 	mov	result1, local02
1cb18     A7 F0 03 F6 | 	mov	ptra, fp
1cb1c     B2 00 A0 FD | 	call	#popregs_
1cb20                 | _fatfs_cc_sync_window_ret
1cb20     2D 00 64 FD | 	ret
1cb24                 | 
1cb24                 | _fatfs_cc_move_window
1cb24     03 4A 05 F6 | 	mov	COUNT_, #3
1cb28     A8 00 A0 FD | 	call	#pushregs_
1cb2c     09 1F 02 F6 | 	mov	local01, arg01
1cb30     0A 21 02 F6 | 	mov	local02, arg02
1cb34     00 22 06 F6 | 	mov	local03, #0
1cb38     30 1E 06 F1 | 	add	local01, #48
1cb3c     0F 19 02 FB | 	rdlong	arg04, local01
1cb40     30 1E 86 F1 | 	sub	local01, #48
1cb44     0C 21 0A F2 | 	cmp	local02, arg04 wz
1cb48     40 00 90 AD |  if_e	jmp	#LR__3171
1cb4c     0F 13 02 F6 | 	mov	arg01, local01
1cb50     FC FE BF FD | 	call	#_fatfs_cc_sync_window
1cb54     FD 22 0A F6 | 	mov	local03, result1 wz
1cb58     30 00 90 5D |  if_ne	jmp	#LR__3170
1cb5c     01 1E 06 F1 | 	add	local01, #1
1cb60     0F 13 C2 FA | 	rdbyte	arg01, local01
1cb64     33 1E 06 F1 | 	add	local01, #51
1cb68     0F 15 02 F6 | 	mov	arg02, local01
1cb6c     10 17 02 F6 | 	mov	arg03, local02
1cb70     01 18 06 F6 | 	mov	arg04, #1
1cb74     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
1cb78     00 FA 0D F2 | 	cmp	result1, #0 wz
1cb7c     01 20 66 56 |  if_ne	neg	local02, #1
1cb80     01 22 06 56 |  if_ne	mov	local03, #1
1cb84     04 1E 86 F1 | 	sub	local01, #4
1cb88     0F 21 62 FC | 	wrlong	local02, local01
1cb8c                 | LR__3170
1cb8c                 | LR__3171
1cb8c                 | ' 				sect = (LBA_t)0 - 1;
1cb8c                 | ' 				res = FR_DISK_ERR;
1cb8c                 | ' 			}
1cb8c                 | ' 			fs->winsect = sect;
1cb8c                 | ' 		}
1cb8c                 | ' 	}
1cb8c                 | ' 	return res;
1cb8c     11 FB 01 F6 | 	mov	result1, local03
1cb90     A7 F0 03 F6 | 	mov	ptra, fp
1cb94     B2 00 A0 FD | 	call	#popregs_
1cb98                 | _fatfs_cc_move_window_ret
1cb98     2D 00 64 FD | 	ret
1cb9c                 | 
1cb9c                 | _fatfs_cc_sync_fs
1cb9c     02 4A 05 F6 | 	mov	COUNT_, #2
1cba0     A8 00 A0 FD | 	call	#pushregs_
1cba4     09 1F 02 F6 | 	mov	local01, arg01
1cba8     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
1cbac     FD 20 0A F6 | 	mov	local02, result1 wz
1cbb0     D8 00 90 5D |  if_ne	jmp	#LR__3181
1cbb4     0F 19 C2 FA | 	rdbyte	arg04, local01
1cbb8     03 18 0E F2 | 	cmp	arg04, #3 wz
1cbbc     04 1E 06 A1 |  if_e	add	local01, #4
1cbc0     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
1cbc4     04 1E 86 A1 |  if_e	sub	local01, #4
1cbc8     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
1cbcc     A0 00 90 5D |  if_ne	jmp	#LR__3180
1cbd0     34 1E 06 F1 | 	add	local01, #52
1cbd4     0F 13 02 F6 | 	mov	arg01, local01
1cbd8     00 14 06 F6 | 	mov	arg02, #0
1cbdc     09 16 C6 F9 | 	decod	arg03, #9
1cbe0     98 00 A0 FD | 	call	#\builtin_bytefill_
1cbe4     0F 13 02 F6 | 	mov	arg01, local01
1cbe8     FE 13 06 F1 | 	add	arg01, #510
1cbec     55 00 80 FF 
1cbf0     09 AB 58 FC | 	wrword	##43605, arg01
1cbf4     A9 B0 A0 FF 
1cbf8     0F A5 68 FC | 	wrlong	##1096897106, local01
1cbfc     0F 13 02 F6 | 	mov	arg01, local01
1cc00     E4 13 06 F1 | 	add	arg01, #484
1cc04     B9 A0 B0 FF 
1cc08     09 E5 68 FC | 	wrlong	##1631679090, arg01
1cc0c     0F 13 02 F6 | 	mov	arg01, local01
1cc10     E8 13 06 F1 | 	add	arg01, #488
1cc14     20 1E 86 F1 | 	sub	local01, #32
1cc18     0F 15 02 FB | 	rdlong	arg02, local01
1cc1c     09 15 62 FC | 	wrlong	arg02, arg01
1cc20     20 1E 06 F1 | 	add	local01, #32
1cc24     0F 13 02 F6 | 	mov	arg01, local01
1cc28     EC 13 06 F1 | 	add	arg01, #492
1cc2c     24 1E 86 F1 | 	sub	local01, #36
1cc30     0F 15 02 FB | 	rdlong	arg02, local01
1cc34     09 15 62 FC | 	wrlong	arg02, arg01
1cc38     10 1E 06 F1 | 	add	local01, #16
1cc3c     0F 17 02 FB | 	rdlong	arg03, local01
1cc40     01 16 06 F1 | 	add	arg03, #1
1cc44     10 1E 06 F1 | 	add	local01, #16
1cc48     0F 17 62 FC | 	wrlong	arg03, local01
1cc4c     2F 1E 86 F1 | 	sub	local01, #47
1cc50     0F 13 C2 FA | 	rdbyte	arg01, local01
1cc54     33 1E 06 F1 | 	add	local01, #51
1cc58     0F 15 02 F6 | 	mov	arg02, local01
1cc5c     01 18 06 F6 | 	mov	arg04, #1
1cc60     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
1cc64     30 1E 86 F1 | 	sub	local01, #48
1cc68     0F 01 48 FC | 	wrbyte	#0, local01
1cc6c     04 1E 86 F1 | 	sub	local01, #4
1cc70                 | LR__3180
1cc70     01 1E 06 F1 | 	add	local01, #1
1cc74     0F 13 C2 FA | 	rdbyte	arg01, local01
1cc78     00 14 06 F6 | 	mov	arg02, #0
1cc7c     00 16 06 F6 | 	mov	arg03, #0
1cc80     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
1cc84     00 FA 0D F2 | 	cmp	result1, #0 wz
1cc88     01 20 06 56 |  if_ne	mov	local02, #1
1cc8c                 | LR__3181
1cc8c                 | ' 	}
1cc8c                 | ' 
1cc8c                 | ' 	return res;
1cc8c     10 FB 01 F6 | 	mov	result1, local02
1cc90     A7 F0 03 F6 | 	mov	ptra, fp
1cc94     B2 00 A0 FD | 	call	#popregs_
1cc98                 | _fatfs_cc_sync_fs_ret
1cc98     2D 00 64 FD | 	ret
1cc9c                 | 
1cc9c                 | _fatfs_cc_clst2sect
1cc9c     02 14 86 F1 | 	sub	arg02, #2
1cca0     18 12 06 F1 | 	add	arg01, #24
1cca4     09 01 02 FB | 	rdlong	_var01, arg01
1cca8     18 12 86 F1 | 	sub	arg01, #24
1ccac     02 00 86 F1 | 	sub	_var01, #2
1ccb0     00 15 12 F2 | 	cmp	arg02, _var01 wc
1ccb4     00 FA 05 36 |  if_ae	mov	result1, #0
1ccb8     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
1ccbc     0A 12 06 F1 | 	add	arg01, #10
1ccc0     09 01 E2 FA | 	rdword	_var01, arg01
1ccc4     0A 01 02 FD | 	qmul	_var01, arg02
1ccc8                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
1ccc8     22 12 06 F1 | 	add	arg01, #34
1cccc     09 FB 01 FB | 	rdlong	result1, arg01
1ccd0     18 00 62 FD | 	getqx	_var01
1ccd4     00 FB 01 F1 | 	add	result1, _var01
1ccd8                 | _fatfs_cc_clst2sect_ret
1ccd8     2D 00 64 FD | 	ret
1ccdc                 | 
1ccdc                 | _fatfs_cc_get_fat
1ccdc     07 4A 05 F6 | 	mov	COUNT_, #7
1cce0     A8 00 A0 FD | 	call	#pushregs_
1cce4     0A 1F 02 F6 | 	mov	local01, arg02
1cce8     09 21 02 FB | 	rdlong	local02, arg01
1ccec     02 1E 16 F2 | 	cmp	local01, #2 wc
1ccf0     14 00 90 CD |  if_b	jmp	#LR__3190
1ccf4     18 20 06 F1 | 	add	local02, #24
1ccf8     10 23 02 FB | 	rdlong	local03, local02
1ccfc     18 20 86 F1 | 	sub	local02, #24
1cd00     11 1F 12 F2 | 	cmp	local01, local03 wc
1cd04     08 00 90 CD |  if_b	jmp	#LR__3191
1cd08                 | LR__3190
1cd08     01 24 06 F6 | 	mov	local04, #1
1cd0c     60 01 90 FD | 	jmp	#LR__3198
1cd10                 | LR__3191
1cd10     01 24 66 F6 | 	neg	local04, #1
1cd14                 | ' 		val = 0xFFFFFFFF;
1cd14                 | ' 
1cd14                 | ' 		switch (fs->fs_type) {
1cd14     10 27 C2 FA | 	rdbyte	local05, local02
1cd18     01 26 86 F1 | 	sub	local05, #1
1cd1c     03 26 26 F3 | 	fle	local05, #3
1cd20     30 26 62 FD | 	jmprel	local05
1cd24                 | LR__3192
1cd24     0C 00 90 FD | 	jmp	#LR__3193
1cd28     B8 00 90 FD | 	jmp	#LR__3194
1cd2c     F8 00 90 FD | 	jmp	#LR__3195
1cd30     38 01 90 FD | 	jmp	#LR__3196
1cd34                 | LR__3193
1cd34     0F 27 02 F6 | 	mov	local05, local01
1cd38     0F 13 02 F6 | 	mov	arg01, local01
1cd3c     01 12 46 F0 | 	shr	arg01, #1
1cd40     09 27 02 F1 | 	add	local05, arg01
1cd44     10 13 02 F6 | 	mov	arg01, local02
1cd48     13 29 02 F6 | 	mov	local06, local05
1cd4c     09 28 46 F0 | 	shr	local06, #9
1cd50     24 20 06 F1 | 	add	local02, #36
1cd54     10 15 02 FB | 	rdlong	arg02, local02
1cd58     24 20 86 F1 | 	sub	local02, #36
1cd5c     14 15 02 F1 | 	add	arg02, local06
1cd60     C0 FD BF FD | 	call	#_fatfs_cc_move_window
1cd64     00 FA 0D F2 | 	cmp	result1, #0 wz
1cd68     04 01 90 5D |  if_ne	jmp	#LR__3197
1cd6c     13 29 02 F6 | 	mov	local06, local05
1cd70     FF 29 06 F5 | 	and	local06, #511
1cd74     34 20 06 F1 | 	add	local02, #52
1cd78     10 29 02 F1 | 	add	local06, local02
1cd7c     14 2B C2 FA | 	rdbyte	local07, local06
1cd80     34 20 86 F1 | 	sub	local02, #52
1cd84     10 13 02 F6 | 	mov	arg01, local02
1cd88     01 26 06 F1 | 	add	local05, #1
1cd8c     13 29 02 F6 | 	mov	local06, local05
1cd90     09 28 46 F0 | 	shr	local06, #9
1cd94     24 20 06 F1 | 	add	local02, #36
1cd98     10 15 02 FB | 	rdlong	arg02, local02
1cd9c     24 20 86 F1 | 	sub	local02, #36
1cda0     14 15 02 F1 | 	add	arg02, local06
1cda4     7C FD BF FD | 	call	#_fatfs_cc_move_window
1cda8     00 FA 0D F2 | 	cmp	result1, #0 wz
1cdac     C0 00 90 5D |  if_ne	jmp	#LR__3197
1cdb0     FF 27 06 F5 | 	and	local05, #511
1cdb4     34 20 06 F1 | 	add	local02, #52
1cdb8     10 27 02 F1 | 	add	local05, local02
1cdbc     13 29 C2 FA | 	rdbyte	local06, local05
1cdc0     08 28 66 F0 | 	shl	local06, #8
1cdc4     14 2B 42 F5 | 	or	local07, local06
1cdc8     01 1E CE F7 | 	test	local01, #1 wz
1cdcc     04 2A 46 50 |  if_ne	shr	local07, #4
1cdd0     15 23 02 56 |  if_ne	mov	local03, local07
1cdd4     0B 2A 46 A7 |  if_e	zerox	local07, #11
1cdd8     15 23 02 A6 |  if_e	mov	local03, local07
1cddc     11 25 02 F6 | 	mov	local04, local03
1cde0                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
1cde0                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
1cde0                 | ' 			break;
1cde0     8C 00 90 FD | 	jmp	#LR__3197
1cde4                 | LR__3194
1cde4     10 13 02 F6 | 	mov	arg01, local02
1cde8     0F 29 02 F6 | 	mov	local06, local01
1cdec     08 28 46 F0 | 	shr	local06, #8
1cdf0     24 20 06 F1 | 	add	local02, #36
1cdf4     10 15 02 FB | 	rdlong	arg02, local02
1cdf8     24 20 86 F1 | 	sub	local02, #36
1cdfc     14 15 02 F1 | 	add	arg02, local06
1ce00     20 FD BF FD | 	call	#_fatfs_cc_move_window
1ce04     00 FA 0D F2 | 	cmp	result1, #0 wz
1ce08     64 00 90 5D |  if_ne	jmp	#LR__3197
1ce0c     34 20 06 F1 | 	add	local02, #52
1ce10     01 1E 66 F0 | 	shl	local01, #1
1ce14     FF 1F 06 F5 | 	and	local01, #511
1ce18     0F 21 02 F1 | 	add	local02, local01
1ce1c                 | ' {
1ce1c                 | ' 
1ce1c                 | ' 	return *((WORD*)ptr);
1ce1c     10 FB E1 FA | 	rdword	result1, local02
1ce20     FD 24 32 F9 | 	getword	local04, result1, #0
1ce24                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
1ce24                 | ' 			break;
1ce24     48 00 90 FD | 	jmp	#LR__3197
1ce28                 | LR__3195
1ce28     10 13 02 F6 | 	mov	arg01, local02
1ce2c     0F 29 02 F6 | 	mov	local06, local01
1ce30     07 28 46 F0 | 	shr	local06, #7
1ce34     24 20 06 F1 | 	add	local02, #36
1ce38     10 15 02 FB | 	rdlong	arg02, local02
1ce3c     24 20 86 F1 | 	sub	local02, #36
1ce40     14 15 02 F1 | 	add	arg02, local06
1ce44     DC FC BF FD | 	call	#_fatfs_cc_move_window
1ce48     00 FA 0D F2 | 	cmp	result1, #0 wz
1ce4c     20 00 90 5D |  if_ne	jmp	#LR__3197
1ce50     34 20 06 F1 | 	add	local02, #52
1ce54     02 1E 66 F0 | 	shl	local01, #2
1ce58     FF 1F 06 F5 | 	and	local01, #511
1ce5c     0F 21 02 F1 | 	add	local02, local01
1ce60                 | ' {
1ce60                 | ' 
1ce60                 | ' 	return *((DWORD*)ptr);
1ce60     10 25 02 FB | 	rdlong	local04, local02
1ce64     7C 24 06 F4 | 	bitl	local04, #124
1ce68                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
1ce68                 | ' 			break;
1ce68     04 00 90 FD | 	jmp	#LR__3197
1ce6c                 | LR__3196
1ce6c     01 24 06 F6 | 	mov	local04, #1
1ce70                 | LR__3197
1ce70                 | LR__3198
1ce70                 | ' 			val = 1;
1ce70                 | ' 		}
1ce70                 | ' 	}
1ce70                 | ' 
1ce70                 | ' 	return val;
1ce70     12 FB 01 F6 | 	mov	result1, local04
1ce74     A7 F0 03 F6 | 	mov	ptra, fp
1ce78     B2 00 A0 FD | 	call	#popregs_
1ce7c                 | _fatfs_cc_get_fat_ret
1ce7c     2D 00 64 FD | 	ret
1ce80                 | 
1ce80                 | _fatfs_cc_put_fat
1ce80     08 4A 05 F6 | 	mov	COUNT_, #8
1ce84     A8 00 A0 FD | 	call	#pushregs_
1ce88     09 1F 02 F6 | 	mov	local01, arg01
1ce8c     0A 21 02 F6 | 	mov	local02, arg02
1ce90     0B 23 02 F6 | 	mov	local03, arg03
1ce94     02 24 06 F6 | 	mov	local04, #2
1ce98     02 20 16 F2 | 	cmp	local02, #2 wc
1ce9c     E0 01 90 CD |  if_b	jmp	#LR__3207
1cea0     18 1E 06 F1 | 	add	local01, #24
1cea4     0F 27 02 FB | 	rdlong	local05, local01
1cea8     18 1E 86 F1 | 	sub	local01, #24
1ceac     13 21 12 F2 | 	cmp	local02, local05 wc
1ceb0     CC 01 90 3D |  if_ae	jmp	#LR__3207
1ceb4                 | ' 		switch (fs->fs_type) {
1ceb4     0F 29 C2 FA | 	rdbyte	local06, local01
1ceb8     01 28 86 F1 | 	sub	local06, #1
1cebc     03 28 26 F3 | 	fle	local06, #3
1cec0     30 28 62 FD | 	jmprel	local06
1cec4                 | LR__3200
1cec4     0C 00 90 FD | 	jmp	#LR__3201
1cec8     F8 00 90 FD | 	jmp	#LR__3204
1cecc     40 01 90 FD | 	jmp	#LR__3205
1ced0     AC 01 90 FD | 	jmp	#LR__3206
1ced4                 | LR__3201
1ced4     10 2B 02 F6 | 	mov	local07, local02
1ced8     10 27 02 F6 | 	mov	local05, local02
1cedc     01 26 46 F0 | 	shr	local05, #1
1cee0     13 2B 02 F1 | 	add	local07, local05
1cee4     0F 13 02 F6 | 	mov	arg01, local01
1cee8     15 29 02 F6 | 	mov	local06, local07
1ceec     09 28 46 F0 | 	shr	local06, #9
1cef0     24 1E 06 F1 | 	add	local01, #36
1cef4     0F 15 02 FB | 	rdlong	arg02, local01
1cef8     24 1E 86 F1 | 	sub	local01, #36
1cefc     14 15 02 F1 | 	add	arg02, local06
1cf00     20 FC BF FD | 	call	#_fatfs_cc_move_window
1cf04     FD 24 0A F6 | 	mov	local04, result1 wz
1cf08     74 01 90 5D |  if_ne	jmp	#LR__3206
1cf0c     34 1E 06 F1 | 	add	local01, #52
1cf10     0F 2D 02 F6 | 	mov	local08, local01
1cf14     15 27 02 F6 | 	mov	local05, local07
1cf18     FF 27 06 F5 | 	and	local05, #511
1cf1c     13 2D 02 F1 | 	add	local08, local05
1cf20     01 20 CE F7 | 	test	local02, #1 wz
1cf24     34 1E 86 F1 | 	sub	local01, #52
1cf28     01 2A 06 F1 | 	add	local07, #1
1cf2c     18 00 90 AD |  if_e	jmp	#LR__3202
1cf30     16 27 C2 FA | 	rdbyte	local05, local08
1cf34     13 27 42 F8 | 	getnib	local05, local05, #0
1cf38     11 29 E2 F8 | 	getbyte	local06, local03, #0
1cf3c     04 28 66 F0 | 	shl	local06, #4
1cf40     14 27 42 F5 | 	or	local05, local06
1cf44     04 00 90 FD | 	jmp	#LR__3203
1cf48                 | LR__3202
1cf48     11 27 02 F6 | 	mov	local05, local03
1cf4c                 | LR__3203
1cf4c     16 27 42 FC | 	wrbyte	local05, local08
1cf50     03 1E 06 F1 | 	add	local01, #3
1cf54     0F 03 48 FC | 	wrbyte	#1, local01
1cf58     03 1E 86 F1 | 	sub	local01, #3
1cf5c     0F 13 02 F6 | 	mov	arg01, local01
1cf60     15 2D 02 F6 | 	mov	local08, local07
1cf64     09 2C 46 F0 | 	shr	local08, #9
1cf68     24 1E 06 F1 | 	add	local01, #36
1cf6c     0F 15 02 FB | 	rdlong	arg02, local01
1cf70     24 1E 86 F1 | 	sub	local01, #36
1cf74     16 15 02 F1 | 	add	arg02, local08
1cf78     A8 FB BF FD | 	call	#_fatfs_cc_move_window
1cf7c     FD 24 0A F6 | 	mov	local04, result1 wz
1cf80     FC 00 90 5D |  if_ne	jmp	#LR__3206
1cf84     34 1E 06 F1 | 	add	local01, #52
1cf88     0F 2D 02 F6 | 	mov	local08, local01
1cf8c     FF 2B 06 F5 | 	and	local07, #511
1cf90     15 2D 02 F1 | 	add	local08, local07
1cf94     01 20 CE F7 | 	test	local02, #1 wz
1cf98     04 22 46 50 |  if_ne	shr	local03, #4
1cf9c     11 27 02 56 |  if_ne	mov	local05, local03
1cfa0     16 27 C2 AA |  if_e	rdbyte	local05, local08
1cfa4     F0 26 06 A5 |  if_e	and	local05, #240
1cfa8     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
1cfac     11 23 42 A8 |  if_e	getnib	local03, local03, #0
1cfb0     11 27 42 A5 |  if_e	or	local05, local03
1cfb4     16 27 42 FC | 	wrbyte	local05, local08
1cfb8     31 1E 86 F1 | 	sub	local01, #49
1cfbc     0F 03 48 FC | 	wrbyte	#1, local01
1cfc0                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
1cfc0                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
1cfc0                 | ' 			fs->wflag = 1;
1cfc0                 | ' 			break;
1cfc0     BC 00 90 FD | 	jmp	#LR__3206
1cfc4                 | LR__3204
1cfc4     0F 13 02 F6 | 	mov	arg01, local01
1cfc8     10 2D 02 F6 | 	mov	local08, local02
1cfcc     08 2C 46 F0 | 	shr	local08, #8
1cfd0     24 1E 06 F1 | 	add	local01, #36
1cfd4     0F 15 02 FB | 	rdlong	arg02, local01
1cfd8     24 1E 86 F1 | 	sub	local01, #36
1cfdc     16 15 02 F1 | 	add	arg02, local08
1cfe0     40 FB BF FD | 	call	#_fatfs_cc_move_window
1cfe4     FD 24 0A F6 | 	mov	local04, result1 wz
1cfe8     94 00 90 5D |  if_ne	jmp	#LR__3206
1cfec     34 1E 06 F1 | 	add	local01, #52
1cff0     0F 13 02 F6 | 	mov	arg01, local01
1cff4     01 20 66 F0 | 	shl	local02, #1
1cff8     FF 21 06 F5 | 	and	local02, #511
1cffc     10 13 02 F1 | 	add	arg01, local02
1d000     09 23 52 FC | 	wrword	local03, arg01
1d004     31 1E 86 F1 | 	sub	local01, #49
1d008     0F 03 48 FC | 	wrbyte	#1, local01
1d00c                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
1d00c                 | ' 			fs->wflag = 1;
1d00c                 | ' 			break;
1d00c     70 00 90 FD | 	jmp	#LR__3206
1d010                 | LR__3205
1d010     0F 13 02 F6 | 	mov	arg01, local01
1d014     10 2D 02 F6 | 	mov	local08, local02
1d018     07 2C 46 F0 | 	shr	local08, #7
1d01c     24 1E 06 F1 | 	add	local01, #36
1d020     0F 15 02 FB | 	rdlong	arg02, local01
1d024     24 1E 86 F1 | 	sub	local01, #36
1d028     16 15 02 F1 | 	add	arg02, local08
1d02c     F4 FA BF FD | 	call	#_fatfs_cc_move_window
1d030     FD 24 0A F6 | 	mov	local04, result1 wz
1d034     48 00 90 5D |  if_ne	jmp	#LR__3206
1d038     7C 22 06 F4 | 	bitl	local03, #124
1d03c     34 1E 06 F1 | 	add	local01, #52
1d040     10 2D 02 F6 | 	mov	local08, local02
1d044     02 2C 66 F0 | 	shl	local08, #2
1d048     FF 2D 06 F5 | 	and	local08, #511
1d04c     0F 13 02 F6 | 	mov	arg01, local01
1d050     16 13 02 F1 | 	add	arg01, local08
1d054                 | ' {
1d054                 | ' 
1d054                 | ' 	return *((DWORD*)ptr);
1d054     09 2D 02 FB | 	rdlong	local08, arg01
1d058     00 00 78 FF 
1d05c     00 2C 06 F5 | 	and	local08, ##-268435456
1d060     16 23 42 F5 | 	or	local03, local08
1d064     0F 13 02 F6 | 	mov	arg01, local01
1d068     02 20 66 F0 | 	shl	local02, #2
1d06c     FF 21 06 F5 | 	and	local02, #511
1d070     10 13 02 F1 | 	add	arg01, local02
1d074     09 23 62 FC | 	wrlong	local03, arg01
1d078     31 1E 86 F1 | 	sub	local01, #49
1d07c     0F 03 48 FC | 	wrbyte	#1, local01
1d080                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
1d080                 | ' 			}
1d080                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
1d080                 | ' 			fs->wflag = 1;
1d080                 | ' 			break;
1d080                 | LR__3206
1d080                 | LR__3207
1d080                 | ' 		}
1d080                 | ' 	}
1d080                 | ' 	return res;
1d080     12 FB 01 F6 | 	mov	result1, local04
1d084     A7 F0 03 F6 | 	mov	ptra, fp
1d088     B2 00 A0 FD | 	call	#popregs_
1d08c                 | _fatfs_cc_put_fat_ret
1d08c     2D 00 64 FD | 	ret
1d090                 | 
1d090                 | _fatfs_cc_remove_chain
1d090     05 4A 05 F6 | 	mov	COUNT_, #5
1d094     A8 00 A0 FD | 	call	#pushregs_
1d098     09 1F 02 F6 | 	mov	local01, arg01
1d09c     0A 21 02 F6 | 	mov	local02, arg02
1d0a0     0B 23 02 F6 | 	mov	local03, arg03
1d0a4     0F 25 02 FB | 	rdlong	local04, local01
1d0a8     02 20 16 F2 | 	cmp	local02, #2 wc
1d0ac     14 00 90 CD |  if_b	jmp	#LR__3210
1d0b0     18 24 06 F1 | 	add	local04, #24
1d0b4     12 FB 01 FB | 	rdlong	result1, local04
1d0b8     18 24 86 F1 | 	sub	local04, #24
1d0bc     FD 20 12 F2 | 	cmp	local02, result1 wc
1d0c0     08 00 90 CD |  if_b	jmp	#LR__3211
1d0c4                 | LR__3210
1d0c4     02 FA 05 F6 | 	mov	result1, #2
1d0c8     CC 00 90 FD | 	jmp	#LR__3216
1d0cc                 | LR__3211
1d0cc     00 22 0E F2 | 	cmp	local03, #0 wz
1d0d0     18 00 90 AD |  if_e	jmp	#LR__3212
1d0d4     11 15 02 F6 | 	mov	arg02, local03
1d0d8     12 13 02 F6 | 	mov	arg01, local04
1d0dc     01 16 66 F6 | 	neg	arg03, #1
1d0e0     9C FD BF FD | 	call	#_fatfs_cc_put_fat
1d0e4     00 FA 0D F2 | 	cmp	result1, #0 wz
1d0e8     AC 00 90 5D |  if_ne	jmp	#LR__3216
1d0ec                 | LR__3212
1d0ec                 | ' 	}
1d0ec                 | ' 
1d0ec                 | ' 
1d0ec                 | ' 	do {
1d0ec                 | LR__3213
1d0ec     10 15 02 F6 | 	mov	arg02, local02
1d0f0     0F 13 02 F6 | 	mov	arg01, local01
1d0f4     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
1d0f8     FD 26 0A F6 | 	mov	local05, result1 wz
1d0fc     94 00 90 AD |  if_e	jmp	#LR__3215
1d100     01 26 0E F2 | 	cmp	local05, #1 wz
1d104     02 FA 05 A6 |  if_e	mov	result1, #2
1d108     8C 00 90 AD |  if_e	jmp	#LR__3216
1d10c     FF FF 7F FF 
1d110     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1d114     01 FA 05 A6 |  if_e	mov	result1, #1
1d118     7C 00 90 AD |  if_e	jmp	#LR__3216
1d11c     10 15 02 F6 | 	mov	arg02, local02
1d120     12 13 02 F6 | 	mov	arg01, local04
1d124     00 16 06 F6 | 	mov	arg03, #0
1d128     54 FD BF FD | 	call	#_fatfs_cc_put_fat
1d12c     FD 22 0A F6 | 	mov	local03, result1 wz
1d130     11 FB 01 56 |  if_ne	mov	result1, local03
1d134     60 00 90 5D |  if_ne	jmp	#LR__3216
1d138     18 24 06 F1 | 	add	local04, #24
1d13c     12 23 02 FB | 	rdlong	local03, local04
1d140     02 22 86 F1 | 	sub	local03, #2
1d144     04 24 86 F1 | 	sub	local04, #4
1d148     12 21 02 FB | 	rdlong	local02, local04
1d14c     14 24 86 F1 | 	sub	local04, #20
1d150     11 21 12 F2 | 	cmp	local02, local03 wc
1d154     24 00 90 3D |  if_ae	jmp	#LR__3214
1d158     14 24 06 F1 | 	add	local04, #20
1d15c     12 23 02 FB | 	rdlong	local03, local04
1d160     01 22 06 F1 | 	add	local03, #1
1d164     12 23 62 FC | 	wrlong	local03, local04
1d168     10 24 86 F1 | 	sub	local04, #16
1d16c     12 23 C2 FA | 	rdbyte	local03, local04
1d170     01 22 46 F5 | 	or	local03, #1
1d174     12 23 42 FC | 	wrbyte	local03, local04
1d178     04 24 86 F1 | 	sub	local04, #4
1d17c                 | LR__3214
1d17c     13 21 02 F6 | 	mov	local02, local05
1d180     18 24 06 F1 | 	add	local04, #24
1d184     12 27 02 FB | 	rdlong	local05, local04
1d188     18 24 86 F1 | 	sub	local04, #24
1d18c     13 21 12 F2 | 	cmp	local02, local05 wc
1d190     58 FF 9F CD |  if_b	jmp	#LR__3213
1d194                 | LR__3215
1d194                 | ' #line 1500 "ff.c"
1d194                 | ' 	return FR_OK;
1d194     00 FA 05 F6 | 	mov	result1, #0
1d198                 | LR__3216
1d198     A7 F0 03 F6 | 	mov	ptra, fp
1d19c     B2 00 A0 FD | 	call	#popregs_
1d1a0                 | _fatfs_cc_remove_chain_ret
1d1a0     2D 00 64 FD | 	ret
1d1a4                 | 
1d1a4                 | _fatfs_cc_create_chain
1d1a4     09 4A 05 F6 | 	mov	COUNT_, #9
1d1a8     A8 00 A0 FD | 	call	#pushregs_
1d1ac     09 1F 02 F6 | 	mov	local01, arg01
1d1b0     0A 21 0A F6 | 	mov	local02, arg02 wz
1d1b4     0F 23 02 FB | 	rdlong	local03, local01
1d1b8     28 00 90 5D |  if_ne	jmp	#LR__3220
1d1bc     10 22 06 F1 | 	add	local03, #16
1d1c0     11 25 0A FB | 	rdlong	local04, local03 wz
1d1c4     10 22 86 F1 | 	sub	local03, #16
1d1c8     18 22 06 51 |  if_ne	add	local03, #24
1d1cc     11 27 02 5B |  if_ne	rdlong	local05, local03
1d1d0     18 22 86 51 |  if_ne	sub	local03, #24
1d1d4     13 25 12 52 |  if_ne	cmp	local04, local05 wc
1d1d8     50 00 90 4D |  if_c_and_nz	jmp	#LR__3221
1d1dc     01 24 06 F6 | 	mov	local04, #1
1d1e0     48 00 90 FD | 	jmp	#LR__3221
1d1e4                 | LR__3220
1d1e4     10 15 02 F6 | 	mov	arg02, local02
1d1e8     0F 13 02 F6 | 	mov	arg01, local01
1d1ec     EC FA BF FD | 	call	#_fatfs_cc_get_fat
1d1f0     FD 24 02 F6 | 	mov	local04, result1
1d1f4     02 24 16 F2 | 	cmp	local04, #2 wc
1d1f8     01 FA 05 C6 |  if_b	mov	result1, #1
1d1fc     BC 01 90 CD |  if_b	jmp	#LR__3231
1d200     FF FF 7F FF 
1d204     FF 25 0E F2 | 	cmp	local04, ##-1 wz
1d208     12 FB 01 A6 |  if_e	mov	result1, local04
1d20c     AC 01 90 AD |  if_e	jmp	#LR__3231
1d210     18 22 06 F1 | 	add	local03, #24
1d214     11 27 02 FB | 	rdlong	local05, local03
1d218     18 22 86 F1 | 	sub	local03, #24
1d21c     13 25 12 F2 | 	cmp	local04, local05 wc
1d220     12 FB 01 C6 |  if_b	mov	result1, local04
1d224     94 01 90 CD |  if_b	jmp	#LR__3231
1d228     10 25 02 F6 | 	mov	local04, local02
1d22c                 | LR__3221
1d22c     14 22 06 F1 | 	add	local03, #20
1d230     11 27 0A FB | 	rdlong	local05, local03 wz
1d234     14 22 86 F1 | 	sub	local03, #20
1d238     00 FA 05 A6 |  if_e	mov	result1, #0
1d23c     7C 01 90 AD |  if_e	jmp	#LR__3231
1d240     00 28 06 F6 | 	mov	local06, #0
1d244     10 25 0A F2 | 	cmp	local04, local02 wz
1d248     74 00 90 5D |  if_ne	jmp	#LR__3224
1d24c     12 29 02 F6 | 	mov	local06, local04
1d250     01 28 06 F1 | 	add	local06, #1
1d254     18 22 06 F1 | 	add	local03, #24
1d258     11 27 02 FB | 	rdlong	local05, local03
1d25c     18 22 86 F1 | 	sub	local03, #24
1d260     13 29 12 F2 | 	cmp	local06, local05 wc
1d264     02 28 06 36 |  if_ae	mov	local06, #2
1d268     14 15 02 F6 | 	mov	arg02, local06
1d26c     0F 13 02 F6 | 	mov	arg01, local01
1d270     68 FA BF FD | 	call	#_fatfs_cc_get_fat
1d274     FD 26 02 F6 | 	mov	local05, result1
1d278     01 26 0E F2 | 	cmp	local05, #1 wz
1d27c     FF FF 7F 5F 
1d280     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
1d284     13 FB 01 A6 |  if_e	mov	result1, local05
1d288     30 01 90 AD |  if_e	jmp	#LR__3231
1d28c     00 26 0E F2 | 	cmp	local05, #0 wz
1d290     2C 00 90 AD |  if_e	jmp	#LR__3223
1d294     10 22 06 F1 | 	add	local03, #16
1d298     11 2B 02 FB | 	rdlong	local07, local03
1d29c     10 22 86 F1 | 	sub	local03, #16
1d2a0     02 2A 16 F2 | 	cmp	local07, #2 wc
1d2a4     14 00 90 CD |  if_b	jmp	#LR__3222
1d2a8     18 22 06 F1 | 	add	local03, #24
1d2ac     11 27 02 FB | 	rdlong	local05, local03
1d2b0     18 22 86 F1 | 	sub	local03, #24
1d2b4     13 2B 12 F2 | 	cmp	local07, local05 wc
1d2b8     15 25 02 C6 |  if_b	mov	local04, local07
1d2bc                 | LR__3222
1d2bc     00 28 06 F6 | 	mov	local06, #0
1d2c0                 | LR__3223
1d2c0                 | LR__3224
1d2c0     00 28 0E F2 | 	cmp	local06, #0 wz
1d2c4     60 00 90 5D |  if_ne	jmp	#LR__3227
1d2c8     12 29 02 F6 | 	mov	local06, local04
1d2cc                 | ' 			ncl = scl;
1d2cc                 | ' 			for (;;) {
1d2cc                 | LR__3225
1d2cc     01 28 06 F1 | 	add	local06, #1
1d2d0     18 22 06 F1 | 	add	local03, #24
1d2d4     11 27 02 FB | 	rdlong	local05, local03
1d2d8     18 22 86 F1 | 	sub	local03, #24
1d2dc     13 29 12 F2 | 	cmp	local06, local05 wc
1d2e0     02 28 06 36 |  if_ae	mov	local06, #2
1d2e4     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
1d2e8     00 FA 05 16 |  if_a	mov	result1, #0
1d2ec     CC 00 90 1D |  if_a	jmp	#LR__3231
1d2f0     14 15 02 F6 | 	mov	arg02, local06
1d2f4     0F 13 02 F6 | 	mov	arg01, local01
1d2f8     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
1d2fc     FD 2A 0A F6 | 	mov	local07, result1 wz
1d300     24 00 90 AD |  if_e	jmp	#LR__3226
1d304     01 2A 0E F2 | 	cmp	local07, #1 wz
1d308     FF FF 7F 5F 
1d30c     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
1d310     15 FB 01 A6 |  if_e	mov	result1, local07
1d314     A4 00 90 AD |  if_e	jmp	#LR__3231
1d318     12 29 0A F2 | 	cmp	local06, local04 wz
1d31c     00 FA 05 A6 |  if_e	mov	result1, #0
1d320     98 00 90 AD |  if_e	jmp	#LR__3231
1d324     A4 FF 9F FD | 	jmp	#LR__3225
1d328                 | LR__3226
1d328                 | LR__3227
1d328     11 13 02 F6 | 	mov	arg01, local03
1d32c     14 15 02 F6 | 	mov	arg02, local06
1d330     01 16 66 F6 | 	neg	arg03, #1
1d334     48 FB BF FD | 	call	#_fatfs_cc_put_fat
1d338     FD 2C 0A F6 | 	mov	local08, result1 wz
1d33c     1C 00 90 5D |  if_ne	jmp	#LR__3228
1d340     00 20 0E F2 | 	cmp	local02, #0 wz
1d344     14 00 90 AD |  if_e	jmp	#LR__3228
1d348     11 13 02 F6 | 	mov	arg01, local03
1d34c     10 15 02 F6 | 	mov	arg02, local02
1d350     14 17 02 F6 | 	mov	arg03, local06
1d354     28 FB BF FD | 	call	#_fatfs_cc_put_fat
1d358     FD 2C 02 F6 | 	mov	local08, result1
1d35c                 | LR__3228
1d35c     00 2C 0E F2 | 	cmp	local08, #0 wz
1d360     4C 00 90 5D |  if_ne	jmp	#LR__3229
1d364     10 22 06 F1 | 	add	local03, #16
1d368     11 29 62 FC | 	wrlong	local06, local03
1d36c     08 22 06 F1 | 	add	local03, #8
1d370     11 27 02 FB | 	rdlong	local05, local03
1d374     02 26 86 F1 | 	sub	local05, #2
1d378     04 22 86 F1 | 	sub	local03, #4
1d37c     11 2F 02 FB | 	rdlong	local09, local03
1d380     14 22 86 F1 | 	sub	local03, #20
1d384     13 2F 1A F2 | 	cmp	local09, local05 wcz
1d388     14 22 06 E1 |  if_be	add	local03, #20
1d38c     11 2F 02 EB |  if_be	rdlong	local09, local03
1d390     01 2E 86 E1 |  if_be	sub	local09, #1
1d394     11 2F 62 EC |  if_be	wrlong	local09, local03
1d398     14 22 86 E1 |  if_be	sub	local03, #20
1d39c     04 22 06 F1 | 	add	local03, #4
1d3a0     11 27 C2 FA | 	rdbyte	local05, local03
1d3a4     01 26 46 F5 | 	or	local05, #1
1d3a8     11 27 42 FC | 	wrbyte	local05, local03
1d3ac     08 00 90 FD | 	jmp	#LR__3230
1d3b0                 | LR__3229
1d3b0     01 2C 0E F2 | 	cmp	local08, #1 wz
1d3b4     01 28 C6 F6 | 	negz	local06, #1
1d3b8                 | LR__3230
1d3b8                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
1d3b8                 | ' 	}
1d3b8                 | ' 
1d3b8                 | ' 	return ncl;
1d3b8     14 FB 01 F6 | 	mov	result1, local06
1d3bc                 | LR__3231
1d3bc     A7 F0 03 F6 | 	mov	ptra, fp
1d3c0     B2 00 A0 FD | 	call	#popregs_
1d3c4                 | _fatfs_cc_create_chain_ret
1d3c4     2D 00 64 FD | 	ret
1d3c8                 | 
1d3c8                 | _fatfs_cc_dir_clear
1d3c8     06 4A 05 F6 | 	mov	COUNT_, #6
1d3cc     A8 00 A0 FD | 	call	#pushregs_
1d3d0     09 1F 02 F6 | 	mov	local01, arg01
1d3d4     0A 21 02 F6 | 	mov	local02, arg02
1d3d8     0F 13 02 F6 | 	mov	arg01, local01
1d3dc     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
1d3e0     00 FA 0D F2 | 	cmp	result1, #0 wz
1d3e4     01 FA 05 56 |  if_ne	mov	result1, #1
1d3e8     90 00 90 5D |  if_ne	jmp	#LR__3242
1d3ec     0F 13 02 F6 | 	mov	arg01, local01
1d3f0     10 15 02 F6 | 	mov	arg02, local02
1d3f4     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
1d3f8     FD 22 02 F6 | 	mov	local03, result1
1d3fc     30 1E 06 F1 | 	add	local01, #48
1d400     0F 23 62 FC | 	wrlong	local03, local01
1d404     04 1E 06 F1 | 	add	local01, #4
1d408     0F 13 02 F6 | 	mov	arg01, local01
1d40c     00 14 06 F6 | 	mov	arg02, #0
1d410     09 16 C6 F9 | 	decod	arg03, #9
1d414     98 00 A0 FD | 	call	#\builtin_bytefill_
1d418     0F 25 02 F6 | 	mov	local04, local01
1d41c                 | ' #line 1667 "ff.c"
1d41c                 | ' 	{
1d41c                 | ' 		ibuf = fs->win; szb = 1;
1d41c                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
1d41c     00 26 06 F6 | 	mov	local05, #0
1d420     34 1E 86 F1 | 	sub	local01, #52
1d424                 | LR__3240
1d424     0A 1E 06 F1 | 	add	local01, #10
1d428     0F 29 E2 FA | 	rdword	local06, local01
1d42c     0A 1E 86 F1 | 	sub	local01, #10
1d430     14 27 12 F2 | 	cmp	local05, local06 wc
1d434     2C 00 90 3D |  if_ae	jmp	#LR__3241
1d438     01 1E 06 F1 | 	add	local01, #1
1d43c     0F 13 C2 FA | 	rdbyte	arg01, local01
1d440     01 1E 86 F1 | 	sub	local01, #1
1d444     12 15 02 F6 | 	mov	arg02, local04
1d448     11 17 02 F6 | 	mov	arg03, local03
1d44c     13 17 02 F1 | 	add	arg03, local05
1d450     01 18 06 F6 | 	mov	arg04, #1
1d454     9C EF BF FD | 	call	#_fatfs_cc_disk_write
1d458     00 FA 0D F2 | 	cmp	result1, #0 wz
1d45c     01 26 06 A1 |  if_e	add	local05, #1
1d460     C0 FF 9F AD |  if_e	jmp	#LR__3240
1d464                 | LR__3241
1d464                 | ' 	}
1d464                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
1d464     0A 1E 06 F1 | 	add	local01, #10
1d468     0F 25 E2 FA | 	rdword	local04, local01
1d46c     12 27 0A F2 | 	cmp	local05, local04 wz
1d470     00 28 06 A6 |  if_e	mov	local06, #0
1d474     01 28 06 56 |  if_ne	mov	local06, #1
1d478     14 FB 01 F6 | 	mov	result1, local06
1d47c                 | LR__3242
1d47c     A7 F0 03 F6 | 	mov	ptra, fp
1d480     B2 00 A0 FD | 	call	#popregs_
1d484                 | _fatfs_cc_dir_clear_ret
1d484     2D 00 64 FD | 	ret
1d488                 | 
1d488                 | _fatfs_cc_dir_sdi
1d488     06 4A 05 F6 | 	mov	COUNT_, #6
1d48c     A8 00 A0 FD | 	call	#pushregs_
1d490     09 1F 02 F6 | 	mov	local01, arg01
1d494     0A 21 02 F6 | 	mov	local02, arg02
1d498     0F 23 02 FB | 	rdlong	local03, local01
1d49c     00 10 00 FF 
1d4a0     00 20 16 F2 | 	cmp	local02, ##2097152 wc
1d4a4     1F 20 CE C7 |  if_b	test	local02, #31 wz
1d4a8                 | ' 		return FR_INT_ERR;
1d4a8     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
1d4ac     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3256
1d4b0     10 1E 06 F1 | 	add	local01, #16
1d4b4     0F 21 62 FC | 	wrlong	local02, local01
1d4b8     08 1E 86 F1 | 	sub	local01, #8
1d4bc     0F 25 0A FB | 	rdlong	local04, local01 wz
1d4c0     08 1E 86 F1 | 	sub	local01, #8
1d4c4     11 27 C2 AA |  if_e	rdbyte	local05, local03
1d4c8     03 26 16 A2 |  if_e	cmp	local05, #3 wc
1d4cc     28 22 06 21 |  if_nc_and_z	add	local03, #40
1d4d0     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
1d4d4     28 22 86 21 |  if_nc_and_z	sub	local03, #40
1d4d8     00 24 0E F2 | 	cmp	local04, #0 wz
1d4dc     3C 00 90 5D |  if_ne	jmp	#LR__3250
1d4e0     10 27 02 F6 | 	mov	local05, local02
1d4e4     05 26 46 F0 | 	shr	local05, #5
1d4e8     08 22 06 F1 | 	add	local03, #8
1d4ec     11 15 E2 FA | 	rdword	arg02, local03
1d4f0     08 22 86 F1 | 	sub	local03, #8
1d4f4     0A 27 12 F2 | 	cmp	local05, arg02 wc
1d4f8     02 FA 05 36 |  if_ae	mov	result1, #2
1d4fc     E4 00 90 3D |  if_ae	jmp	#LR__3256
1d500     28 22 06 F1 | 	add	local03, #40
1d504     11 27 02 FB | 	rdlong	local05, local03
1d508     28 22 86 F1 | 	sub	local03, #40
1d50c     18 1E 06 F1 | 	add	local01, #24
1d510     0F 27 62 FC | 	wrlong	local05, local01
1d514     18 1E 86 F1 | 	sub	local01, #24
1d518     7C 00 90 FD | 	jmp	#LR__3255
1d51c                 | LR__3250
1d51c     0A 22 06 F1 | 	add	local03, #10
1d520     11 29 E2 FA | 	rdword	local06, local03
1d524     0A 22 86 F1 | 	sub	local03, #10
1d528     09 28 66 F0 | 	shl	local06, #9
1d52c                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
1d52c                 | ' 		while (ofs >= csz) {
1d52c                 | LR__3251
1d52c     14 21 12 F2 | 	cmp	local02, local06 wc
1d530     4C 00 90 CD |  if_b	jmp	#LR__3254
1d534     0F 13 02 F6 | 	mov	arg01, local01
1d538     12 15 02 F6 | 	mov	arg02, local04
1d53c     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
1d540     FD 24 02 F6 | 	mov	local04, result1
1d544     FF FF 7F FF 
1d548     FF 25 0E F2 | 	cmp	local04, ##-1 wz
1d54c     01 FA 05 A6 |  if_e	mov	result1, #1
1d550     90 00 90 AD |  if_e	jmp	#LR__3256
1d554     02 24 16 F2 | 	cmp	local04, #2 wc
1d558     14 00 90 CD |  if_b	jmp	#LR__3252
1d55c     18 22 06 F1 | 	add	local03, #24
1d560     11 27 02 FB | 	rdlong	local05, local03
1d564     18 22 86 F1 | 	sub	local03, #24
1d568     13 25 12 F2 | 	cmp	local04, local05 wc
1d56c     08 00 90 CD |  if_b	jmp	#LR__3253
1d570                 | LR__3252
1d570     02 FA 05 F6 | 	mov	result1, #2
1d574     6C 00 90 FD | 	jmp	#LR__3256
1d578                 | LR__3253
1d578     14 21 82 F1 | 	sub	local02, local06
1d57c     AC FF 9F FD | 	jmp	#LR__3251
1d580                 | LR__3254
1d580     11 13 02 F6 | 	mov	arg01, local03
1d584     12 15 02 F6 | 	mov	arg02, local04
1d588     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
1d58c     18 1E 06 F1 | 	add	local01, #24
1d590     0F FB 61 FC | 	wrlong	result1, local01
1d594     18 1E 86 F1 | 	sub	local01, #24
1d598                 | LR__3255
1d598     14 1E 06 F1 | 	add	local01, #20
1d59c     0F 25 62 FC | 	wrlong	local04, local01
1d5a0     04 1E 06 F1 | 	add	local01, #4
1d5a4     0F 27 0A FB | 	rdlong	local05, local01 wz
1d5a8     18 1E 86 F1 | 	sub	local01, #24
1d5ac     02 FA 05 A6 |  if_e	mov	result1, #2
1d5b0     30 00 90 AD |  if_e	jmp	#LR__3256
1d5b4     10 29 02 F6 | 	mov	local06, local02
1d5b8     09 28 46 F0 | 	shr	local06, #9
1d5bc     18 1E 06 F1 | 	add	local01, #24
1d5c0     0F 27 02 FB | 	rdlong	local05, local01
1d5c4     14 27 02 F1 | 	add	local05, local06
1d5c8     0F 27 62 FC | 	wrlong	local05, local01
1d5cc     34 22 06 F1 | 	add	local03, #52
1d5d0     FF 21 06 F5 | 	and	local02, #511
1d5d4     10 23 02 F1 | 	add	local03, local02
1d5d8     04 1E 06 F1 | 	add	local01, #4
1d5dc     0F 23 62 FC | 	wrlong	local03, local01
1d5e0                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
1d5e0                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
1d5e0                 | ' 
1d5e0                 | ' 	return FR_OK;
1d5e0     00 FA 05 F6 | 	mov	result1, #0
1d5e4                 | LR__3256
1d5e4     A7 F0 03 F6 | 	mov	ptra, fp
1d5e8     B2 00 A0 FD | 	call	#popregs_
1d5ec                 | _fatfs_cc_dir_sdi_ret
1d5ec     2D 00 64 FD | 	ret
1d5f0                 | 
1d5f0                 | _fatfs_cc_dir_next
1d5f0     05 4A 05 F6 | 	mov	COUNT_, #5
1d5f4     A8 00 A0 FD | 	call	#pushregs_
1d5f8     09 1F 02 F6 | 	mov	local01, arg01
1d5fc     0A 21 02 F6 | 	mov	local02, arg02
1d600     0F 23 02 FB | 	rdlong	local03, local01
1d604     10 1E 06 F1 | 	add	local01, #16
1d608     0F 25 02 FB | 	rdlong	local04, local01
1d60c     10 1E 86 F1 | 	sub	local01, #16
1d610     20 24 06 F1 | 	add	local04, #32
1d614     00 10 00 FF 
1d618     00 24 16 F2 | 	cmp	local04, ##2097152 wc
1d61c     18 1E 06 31 |  if_ae	add	local01, #24
1d620     0F 01 68 3C |  if_ae	wrlong	#0, local01
1d624     18 1E 86 31 |  if_ae	sub	local01, #24
1d628     18 1E 06 F1 | 	add	local01, #24
1d62c     0F 15 0A FB | 	rdlong	arg02, local01 wz
1d630     18 1E 86 F1 | 	sub	local01, #24
1d634     04 FA 05 A6 |  if_e	mov	result1, #4
1d638     64 01 90 AD |  if_e	jmp	#LR__3265
1d63c     FF 25 CE F7 | 	test	local04, #511 wz
1d640     3C 01 90 5D |  if_ne	jmp	#LR__3264
1d644     18 1E 06 F1 | 	add	local01, #24
1d648     0F 15 02 FB | 	rdlong	arg02, local01
1d64c     01 14 06 F1 | 	add	arg02, #1
1d650     0F 15 62 FC | 	wrlong	arg02, local01
1d654     04 1E 86 F1 | 	sub	local01, #4
1d658     0F 15 0A FB | 	rdlong	arg02, local01 wz
1d65c     14 1E 86 F1 | 	sub	local01, #20
1d660     2C 00 90 5D |  if_ne	jmp	#LR__3260
1d664     12 15 02 F6 | 	mov	arg02, local04
1d668     05 14 46 F0 | 	shr	arg02, #5
1d66c     08 22 06 F1 | 	add	local03, #8
1d670     11 21 E2 FA | 	rdword	local02, local03
1d674     08 22 86 F1 | 	sub	local03, #8
1d678     10 15 12 F2 | 	cmp	arg02, local02 wc
1d67c     18 1E 06 31 |  if_ae	add	local01, #24
1d680     0F 01 68 3C |  if_ae	wrlong	#0, local01
1d684                 | ' 				dp->sect = 0; return FR_NO_FILE;
1d684     04 FA 05 36 |  if_ae	mov	result1, #4
1d688     14 01 90 3D |  if_ae	jmp	#LR__3265
1d68c     F0 00 90 FD | 	jmp	#LR__3263
1d690                 | LR__3260
1d690     12 13 02 F6 | 	mov	arg01, local04
1d694     09 12 46 F0 | 	shr	arg01, #9
1d698     0A 22 06 F1 | 	add	local03, #10
1d69c     11 15 E2 FA | 	rdword	arg02, local03
1d6a0     0A 22 86 F1 | 	sub	local03, #10
1d6a4     01 14 86 F1 | 	sub	arg02, #1
1d6a8     0A 13 CA F7 | 	test	arg01, arg02 wz
1d6ac     D0 00 90 5D |  if_ne	jmp	#LR__3262
1d6b0     0F 13 02 F6 | 	mov	arg01, local01
1d6b4     14 1E 06 F1 | 	add	local01, #20
1d6b8     0F 15 02 FB | 	rdlong	arg02, local01
1d6bc     14 1E 86 F1 | 	sub	local01, #20
1d6c0     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
1d6c4     FD 26 02 F6 | 	mov	local05, result1
1d6c8     02 26 16 F2 | 	cmp	local05, #2 wc
1d6cc     02 FA 05 C6 |  if_b	mov	result1, #2
1d6d0     CC 00 90 CD |  if_b	jmp	#LR__3265
1d6d4     FF FF 7F FF 
1d6d8     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1d6dc     01 FA 05 A6 |  if_e	mov	result1, #1
1d6e0     BC 00 90 AD |  if_e	jmp	#LR__3265
1d6e4     18 22 06 F1 | 	add	local03, #24
1d6e8     11 15 02 FB | 	rdlong	arg02, local03
1d6ec     18 22 86 F1 | 	sub	local03, #24
1d6f0     0A 27 12 F2 | 	cmp	local05, arg02 wc
1d6f4     68 00 90 CD |  if_b	jmp	#LR__3261
1d6f8     00 20 0E F2 | 	cmp	local02, #0 wz
1d6fc     18 1E 06 A1 |  if_e	add	local01, #24
1d700     0F 01 68 AC |  if_e	wrlong	#0, local01
1d704                 | ' 						dp->sect = 0; return FR_NO_FILE;
1d704     04 FA 05 A6 |  if_e	mov	result1, #4
1d708     94 00 90 AD |  if_e	jmp	#LR__3265
1d70c     0F 13 02 F6 | 	mov	arg01, local01
1d710     14 1E 06 F1 | 	add	local01, #20
1d714     0F 15 02 FB | 	rdlong	arg02, local01
1d718     14 1E 86 F1 | 	sub	local01, #20
1d71c     84 FA BF FD | 	call	#_fatfs_cc_create_chain
1d720     FD 26 0A F6 | 	mov	local05, result1 wz
1d724     07 FA 05 A6 |  if_e	mov	result1, #7
1d728     74 00 90 AD |  if_e	jmp	#LR__3265
1d72c     01 26 0E F2 | 	cmp	local05, #1 wz
1d730     02 FA 05 A6 |  if_e	mov	result1, #2
1d734     68 00 90 AD |  if_e	jmp	#LR__3265
1d738     FF FF 7F FF 
1d73c     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1d740     01 FA 05 A6 |  if_e	mov	result1, #1
1d744     58 00 90 AD |  if_e	jmp	#LR__3265
1d748     13 15 02 F6 | 	mov	arg02, local05
1d74c     11 13 02 F6 | 	mov	arg01, local03
1d750     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
1d754     00 FA 0D F2 | 	cmp	result1, #0 wz
1d758     01 FA 05 56 |  if_ne	mov	result1, #1
1d75c     40 00 90 5D |  if_ne	jmp	#LR__3265
1d760                 | LR__3261
1d760     14 1E 06 F1 | 	add	local01, #20
1d764     0F 27 62 FC | 	wrlong	local05, local01
1d768     11 13 02 F6 | 	mov	arg01, local03
1d76c     13 15 02 F6 | 	mov	arg02, local05
1d770     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
1d774     04 1E 06 F1 | 	add	local01, #4
1d778     0F FB 61 FC | 	wrlong	result1, local01
1d77c     18 1E 86 F1 | 	sub	local01, #24
1d780                 | LR__3262
1d780                 | LR__3263
1d780                 | LR__3264
1d780     10 1E 06 F1 | 	add	local01, #16
1d784     0F 25 62 FC | 	wrlong	local04, local01
1d788     34 22 06 F1 | 	add	local03, #52
1d78c     FF 25 06 F5 | 	and	local04, #511
1d790     12 23 02 F1 | 	add	local03, local04
1d794     0C 1E 06 F1 | 	add	local01, #12
1d798     0F 23 62 FC | 	wrlong	local03, local01
1d79c                 | ' #line 1771 "ff.c"
1d79c                 | ' 				}
1d79c                 | ' 				dp->clust = clst;
1d79c                 | ' 				dp->sect = clst2sect(fs, clst);
1d79c                 | ' 			}
1d79c                 | ' 		}
1d79c                 | ' 	}
1d79c                 | ' 	dp->dptr = ofs;
1d79c                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
1d79c                 | ' 
1d79c                 | ' 	return FR_OK;
1d79c     00 FA 05 F6 | 	mov	result1, #0
1d7a0                 | LR__3265
1d7a0     A7 F0 03 F6 | 	mov	ptra, fp
1d7a4     B2 00 A0 FD | 	call	#popregs_
1d7a8                 | _fatfs_cc_dir_next_ret
1d7a8     2D 00 64 FD | 	ret
1d7ac                 | 
1d7ac                 | _fatfs_cc_dir_alloc
1d7ac     08 4A 05 F6 | 	mov	COUNT_, #8
1d7b0     A8 00 A0 FD | 	call	#pushregs_
1d7b4     09 1F 02 F6 | 	mov	local01, arg01
1d7b8     0A 21 02 F6 | 	mov	local02, arg02
1d7bc     0F 23 02 FB | 	rdlong	local03, local01
1d7c0     0F 13 02 F6 | 	mov	arg01, local01
1d7c4     00 14 06 F6 | 	mov	arg02, #0
1d7c8     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
1d7cc     FD 24 0A F6 | 	mov	local04, result1 wz
1d7d0     70 00 90 5D |  if_ne	jmp	#LR__3274
1d7d4     00 26 06 F6 | 	mov	local05, #0
1d7d8                 | ' 		n = 0;
1d7d8                 | ' 		do {
1d7d8                 | LR__3270
1d7d8     18 1E 06 F1 | 	add	local01, #24
1d7dc     0F 15 02 FB | 	rdlong	arg02, local01
1d7e0     18 1E 86 F1 | 	sub	local01, #24
1d7e4     11 13 02 F6 | 	mov	arg01, local03
1d7e8     38 F3 BF FD | 	call	#_fatfs_cc_move_window
1d7ec     FD 24 0A F6 | 	mov	local04, result1 wz
1d7f0     50 00 90 5D |  if_ne	jmp	#LR__3273
1d7f4     1C 1E 06 F1 | 	add	local01, #28
1d7f8     0F 29 02 FB | 	rdlong	local06, local01
1d7fc     1C 1E 86 F1 | 	sub	local01, #28
1d800     14 29 C2 FA | 	rdbyte	local06, local06
1d804     E5 28 0E F2 | 	cmp	local06, #229 wz
1d808     1C 1E 06 51 |  if_ne	add	local01, #28
1d80c     0F 2B 02 5B |  if_ne	rdlong	local07, local01
1d810     1C 1E 86 51 |  if_ne	sub	local01, #28
1d814     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
1d818     10 00 90 5D |  if_ne	jmp	#LR__3271
1d81c     01 26 06 F1 | 	add	local05, #1
1d820     10 27 0A F2 | 	cmp	local05, local02 wz
1d824     1C 00 90 AD |  if_e	jmp	#LR__3273
1d828     04 00 90 FD | 	jmp	#LR__3272
1d82c                 | LR__3271
1d82c     00 26 06 F6 | 	mov	local05, #0
1d830                 | LR__3272
1d830     0F 13 02 F6 | 	mov	arg01, local01
1d834     01 14 06 F6 | 	mov	arg02, #1
1d838     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
1d83c     FD 24 0A F6 | 	mov	local04, result1 wz
1d840     94 FF 9F AD |  if_e	jmp	#LR__3270
1d844                 | LR__3273
1d844                 | LR__3274
1d844     04 24 0E F2 | 	cmp	local04, #4 wz
1d848     07 24 06 A6 |  if_e	mov	local04, #7
1d84c                 | ' 	return res;
1d84c     12 FB 01 F6 | 	mov	result1, local04
1d850     A7 F0 03 F6 | 	mov	ptra, fp
1d854     B2 00 A0 FD | 	call	#popregs_
1d858                 | _fatfs_cc_dir_alloc_ret
1d858     2D 00 64 FD | 	ret
1d85c                 | 
1d85c                 | _fatfs_cc_ld_clust
1d85c     09 01 02 F6 | 	mov	_var01, arg01
1d860     0A 13 02 F6 | 	mov	arg01, arg02
1d864     1A 12 06 F1 | 	add	arg01, #26
1d868                 | ' {
1d868                 | ' 
1d868                 | ' 	return *((WORD*)ptr);
1d868     09 FB E1 FA | 	rdword	result1, arg01
1d86c     FD 12 32 F9 | 	getword	arg01, result1, #0
1d870     00 01 C2 FA | 	rdbyte	_var01, _var01
1d874     03 00 0E F2 | 	cmp	_var01, #3 wz
1d878     14 14 06 A1 |  if_e	add	arg02, #20
1d87c                 | ' {
1d87c                 | ' 
1d87c                 | ' 	return *((WORD*)ptr);
1d87c     0A FB E1 AA |  if_e	rdword	result1, arg02
1d880     10 FA 65 A0 |  if_e	shl	result1, #16
1d884     FD 12 42 A5 |  if_e	or	arg01, result1
1d888                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
1d888                 | ' 	}
1d888                 | ' 
1d888                 | ' 	return cl;
1d888     09 FB 01 F6 | 	mov	result1, arg01
1d88c                 | _fatfs_cc_ld_clust_ret
1d88c     2D 00 64 FD | 	ret
1d890                 | 
1d890                 | _fatfs_cc_st_clust
1d890     09 01 02 F6 | 	mov	_var01, arg01
1d894     0A 13 02 F6 | 	mov	arg01, arg02
1d898     1A 12 06 F1 | 	add	arg01, #26
1d89c     09 17 52 FC | 	wrword	arg03, arg01
1d8a0     00 01 C2 FA | 	rdbyte	_var01, _var01
1d8a4     03 00 0E F2 | 	cmp	_var01, #3 wz
1d8a8     14 14 06 A1 |  if_e	add	arg02, #20
1d8ac     10 16 46 A0 |  if_e	shr	arg03, #16
1d8b0     0A 17 52 AC |  if_e	wrword	arg03, arg02
1d8b4                 | _fatfs_cc_st_clust_ret
1d8b4     2D 00 64 FD | 	ret
1d8b8                 | 
1d8b8                 | _fatfs_cc_cmp_lfn
1d8b8     07 4A 05 F6 | 	mov	COUNT_, #7
1d8bc     A8 00 A0 FD | 	call	#pushregs_
1d8c0     09 1F 02 F6 | 	mov	local01, arg01
1d8c4     0A 13 02 F6 | 	mov	arg01, arg02
1d8c8     1A 12 06 F1 | 	add	arg01, #26
1d8cc                 | ' {
1d8cc                 | ' 
1d8cc                 | ' 	return *((WORD*)ptr);
1d8cc     09 FB E9 FA | 	rdword	result1, arg01 wz
1d8d0     00 FA 05 56 |  if_ne	mov	result1, #0
1d8d4     E0 00 90 5D |  if_ne	jmp	#LR__3286
1d8d8     0A 21 C2 FA | 	rdbyte	local02, arg02
1d8dc     3F 20 06 F5 | 	and	local02, #63
1d8e0     01 20 86 F1 | 	sub	local02, #1
1d8e4     0D 20 06 FD | 	qmul	local02, #13
1d8e8                 | ' 
1d8e8                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
1d8e8                 | ' 
1d8e8                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
1d8e8     01 22 06 F6 | 	mov	local03, #1
1d8ec     00 24 06 F6 | 	mov	local04, #0
1d8f0     18 26 62 FD | 	getqx	local05
1d8f4                 | LR__3280
1d8f4     0D 24 16 F2 | 	cmp	local04, #13 wc
1d8f8     9C 00 90 3D |  if_ae	jmp	#LR__3285
1d8fc     0A 13 02 F6 | 	mov	arg01, arg02
1d900     12 21 02 F6 | 	mov	local02, local04
1d904     01 00 00 FF 
1d908     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
1d90c     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
1d910     10 21 C2 FA | 	rdbyte	local02, local02
1d914     01 20 06 FA | 	mul	local02, #1
1d918     10 13 02 F1 | 	add	arg01, local02
1d91c     01 00 00 FF 
1d920     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
1d924                 | ' {
1d924                 | ' 
1d924                 | ' 	return *((WORD*)ptr);
1d924     09 FB E1 FA | 	rdword	result1, arg01
1d928     FD 28 02 F6 | 	mov	local06, result1
1d92c     11 21 02 F6 | 	mov	local02, local03
1d930     0F 20 4E F7 | 	zerox	local02, #15 wz
1d934     44 00 90 AD |  if_e	jmp	#LR__3283
1d938     00 27 16 F2 | 	cmp	local05, #256 wc
1d93c     2C 00 90 3D |  if_ae	jmp	#LR__3281
1d940     14 13 32 F9 | 	getword	arg01, local06, #0
1d944     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
1d948     FD 20 02 F6 | 	mov	local02, result1
1d94c     13 23 02 F6 | 	mov	local03, local05
1d950     01 22 66 F0 | 	shl	local03, #1
1d954     0F 23 02 F1 | 	add	local03, local01
1d958     11 13 E2 FA | 	rdword	arg01, local03
1d95c     01 26 06 F1 | 	add	local05, #1
1d960     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
1d964     FD 20 0A F2 | 	cmp	local02, result1 wz
1d968     08 00 90 AD |  if_e	jmp	#LR__3282
1d96c                 | LR__3281
1d96c                 | ' 				return 0;
1d96c     00 FA 05 F6 | 	mov	result1, #0
1d970     44 00 90 FD | 	jmp	#LR__3286
1d974                 | LR__3282
1d974     14 23 02 F6 | 	mov	local03, local06
1d978     14 00 90 FD | 	jmp	#LR__3284
1d97c                 | LR__3283
1d97c     14 29 32 F9 | 	getword	local06, local06, #0
1d980     7F 00 00 FF 
1d984     FF 29 0E F2 | 	cmp	local06, ##65535 wz
1d988     00 FA 05 56 |  if_ne	mov	result1, #0
1d98c     28 00 90 5D |  if_ne	jmp	#LR__3286
1d990                 | LR__3284
1d990     01 24 06 F1 | 	add	local04, #1
1d994     5C FF 9F FD | 	jmp	#LR__3280
1d998                 | LR__3285
1d998     0A 21 C2 FA | 	rdbyte	local02, arg02
1d99c     40 20 CE F7 | 	test	local02, #64 wz
1d9a0     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
1d9a4     01 26 66 50 |  if_ne	shl	local05, #1
1d9a8     0F 27 02 51 |  if_ne	add	local05, local01
1d9ac     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
1d9b0     00 FA 05 56 |  if_ne	mov	result1, #0
1d9b4                 | ' 
1d9b4                 | ' 	return 1;
1d9b4     01 FA 05 A6 |  if_e	mov	result1, #1
1d9b8                 | LR__3286
1d9b8     A7 F0 03 F6 | 	mov	ptra, fp
1d9bc     B2 00 A0 FD | 	call	#popregs_
1d9c0                 | _fatfs_cc_cmp_lfn_ret
1d9c0     2D 00 64 FD | 	ret
1d9c4                 | 
1d9c4                 | _fatfs_cc_pick_lfn
1d9c4     09 01 02 F6 | 	mov	_var01, arg01
1d9c8     0A 13 02 F6 | 	mov	arg01, arg02
1d9cc     1A 12 06 F1 | 	add	arg01, #26
1d9d0                 | ' {
1d9d0                 | ' 
1d9d0                 | ' 	return *((WORD*)ptr);
1d9d0     09 FB E9 FA | 	rdword	result1, arg01 wz
1d9d4     00 FA 05 56 |  if_ne	mov	result1, #0
1d9d8     D4 00 90 5D |  if_ne	jmp	#LR__3295
1d9dc     0A 03 C2 FA | 	rdbyte	_var02, arg02
1d9e0     40 02 26 F5 | 	andn	_var02, #64
1d9e4     01 02 86 F1 | 	sub	_var02, #1
1d9e8     0D 02 06 FD | 	qmul	_var02, #13
1d9ec                 | ' 
1d9ec                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
1d9ec                 | ' 
1d9ec                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
1d9ec     01 04 06 F6 | 	mov	_var03, #1
1d9f0     00 06 06 F6 | 	mov	_var04, #0
1d9f4     18 08 62 FD | 	getqx	_var05
1d9f8                 | LR__3290
1d9f8     0D 06 16 F2 | 	cmp	_var04, #13 wc
1d9fc     80 00 90 3D |  if_ae	jmp	#LR__3293
1da00     0A 13 02 F6 | 	mov	arg01, arg02
1da04     03 03 02 F6 | 	mov	_var02, _var04
1da08     01 00 00 FF 
1da0c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
1da10     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
1da14     01 03 C2 FA | 	rdbyte	_var02, _var02
1da18     01 02 06 FA | 	mul	_var02, #1
1da1c     01 13 02 F1 | 	add	arg01, _var02
1da20     01 00 00 FF 
1da24     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
1da28                 | ' {
1da28                 | ' 
1da28                 | ' 	return *((WORD*)ptr);
1da28     09 FB E1 FA | 	rdword	result1, arg01
1da2c     FD 0A 02 F6 | 	mov	_var06, result1
1da30     02 03 02 F6 | 	mov	_var02, _var03
1da34     0F 02 4E F7 | 	zerox	_var02, #15 wz
1da38     28 00 90 AD |  if_e	jmp	#LR__3291
1da3c     00 09 16 F2 | 	cmp	_var05, #256 wc
1da40     00 FA 05 36 |  if_ae	mov	result1, #0
1da44     68 00 90 3D |  if_ae	jmp	#LR__3295
1da48     04 03 02 F6 | 	mov	_var02, _var05
1da4c     01 02 66 F0 | 	shl	_var02, #1
1da50     00 03 02 F1 | 	add	_var02, _var01
1da54     05 05 02 F6 | 	mov	_var03, _var06
1da58     01 05 52 FC | 	wrword	_var03, _var02
1da5c     01 08 06 F1 | 	add	_var05, #1
1da60     14 00 90 FD | 	jmp	#LR__3292
1da64                 | LR__3291
1da64     05 0B 32 F9 | 	getword	_var06, _var06, #0
1da68     7F 00 00 FF 
1da6c     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
1da70     00 FA 05 56 |  if_ne	mov	result1, #0
1da74     38 00 90 5D |  if_ne	jmp	#LR__3295
1da78                 | LR__3292
1da78     01 06 06 F1 | 	add	_var04, #1
1da7c     78 FF 9F FD | 	jmp	#LR__3290
1da80                 | LR__3293
1da80     0A 03 C2 FA | 	rdbyte	_var02, arg02
1da84     40 02 CE F7 | 	test	_var02, #64 wz
1da88     02 0D 02 56 |  if_ne	mov	_var07, _var03
1da8c     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
1da90     18 00 90 AD |  if_e	jmp	#LR__3294
1da94     00 09 16 F2 | 	cmp	_var05, #256 wc
1da98     00 FA 05 36 |  if_ae	mov	result1, #0
1da9c     10 00 90 3D |  if_ae	jmp	#LR__3295
1daa0     01 08 66 F0 | 	shl	_var05, #1
1daa4     00 09 02 F1 | 	add	_var05, _var01
1daa8     04 01 58 FC | 	wrword	#0, _var05
1daac                 | LR__3294
1daac                 | ' 		lfnbuf[i] = 0;
1daac                 | ' 	}
1daac                 | ' 
1daac                 | ' 	return 1;
1daac     01 FA 05 F6 | 	mov	result1, #1
1dab0                 | LR__3295
1dab0                 | _fatfs_cc_pick_lfn_ret
1dab0     2D 00 64 FD | 	ret
1dab4                 | 
1dab4                 | _fatfs_cc_put_lfn
1dab4     0D 14 06 F1 | 	add	arg02, #13
1dab8     0A 19 42 FC | 	wrbyte	arg04, arg02
1dabc     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
1dac0     01 18 86 F1 | 	sub	arg04, #1
1dac4     0D 18 06 FD | 	qmul	arg04, #13
1dac8     09 01 02 F6 | 	mov	_var01, arg01
1dacc     02 14 86 F1 | 	sub	arg02, #2
1dad0     0A 1F 48 FC | 	wrbyte	#15, arg02
1dad4     01 14 06 F1 | 	add	arg02, #1
1dad8     0A 01 48 FC | 	wrbyte	#0, arg02
1dadc     0C 14 86 F1 | 	sub	arg02, #12
1dae0     0A 13 02 F6 | 	mov	arg01, arg02
1dae4     1A 12 06 F1 | 	add	arg01, #26
1dae8     09 01 58 FC | 	wrword	#0, arg01
1daec     00 02 06 F6 | 	mov	_var02, #0
1daf0     00 04 06 F6 | 	mov	_var03, #0
1daf4                 | ' 	BYTE* dir,
1daf4                 | ' 	BYTE ord,
1daf4                 | ' 	BYTE sum
1daf4                 | ' )
1daf4                 | ' {
1daf4                 | ' 	UINT i, s;
1daf4                 | ' 	WCHAR wc;
1daf4                 | ' 
1daf4                 | ' 
1daf4                 | ' 	dir[ 13 ] = sum;
1daf4                 | ' 	dir[ 11 ] =  0x0F ;
1daf4                 | ' 	dir[ 12 ] = 0;
1daf4                 | ' 	st_word(dir +  26 , 0);
1daf4                 | ' 
1daf4                 | ' 	i = (ord - 1) * 13;
1daf4                 | ' 	s = wc = 0;
1daf4                 | ' 	do {
1daf4     01 00 00 FF 
1daf8     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
1dafc     18 06 62 FD | 	getqx	_var04
1db00     97 2A 48 FB | 	callpa	#(@LR__3301-@LR__3300)>>2,fcache_load_ptr_
1db04                 | LR__3300
1db04     01 19 32 F9 | 	getword	arg04, _var02, #0
1db08     7F 00 00 FF 
1db0c     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
1db10     03 13 02 56 |  if_ne	mov	arg01, _var04
1db14     01 06 06 51 |  if_ne	add	_var04, #1
1db18     01 12 66 50 |  if_ne	shl	arg01, #1
1db1c     00 13 02 51 |  if_ne	add	arg01, _var01
1db20     09 03 E2 5A |  if_ne	rdword	_var02, arg01
1db24     0A 13 02 F6 | 	mov	arg01, arg02
1db28     02 19 02 F6 | 	mov	arg04, _var03
1db2c     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
1db30     0C 19 C2 FA | 	rdbyte	arg04, arg04
1db34     01 18 06 FA | 	mul	arg04, #1
1db38     0C 13 02 F1 | 	add	arg01, arg04
1db3c     09 03 52 FC | 	wrword	_var02, arg01
1db40     01 19 02 F6 | 	mov	arg04, _var02
1db44     0F 18 4E F7 | 	zerox	arg04, #15 wz
1db48     0F 02 CE A9 |  if_e	bmask	_var02, #15
1db4c     01 04 06 F1 | 	add	_var03, #1
1db50     0D 04 16 F2 | 	cmp	_var03, #13 wc
1db54     AC FF 9F CD |  if_b	jmp	#LR__3300
1db58                 | LR__3301
1db58     01 00 00 FF 
1db5c     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
1db60     01 03 32 F9 | 	getword	_var02, _var02, #0
1db64     7F 00 00 FF 
1db68     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
1db6c     01 06 66 50 |  if_ne	shl	_var04, #1
1db70     00 07 02 51 |  if_ne	add	_var04, _var01
1db74     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
1db78     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
1db7c     40 16 46 A5 |  if_e	or	arg03, #64
1db80     0A 17 42 FC | 	wrbyte	arg03, arg02
1db84                 | _fatfs_cc_put_lfn_ret
1db84     2D 00 64 FD | 	ret
1db88                 | 
1db88                 | _fatfs_cc_gen_numname
1db88     08 4A 05 F6 | 	mov	COUNT_, #8
1db8c     A8 00 A0 FD | 	call	#pushregs_
1db90     2C F0 07 F1 | 	add	ptra, #44
1db94     09 1F 02 F6 | 	mov	local01, arg01
1db98     0A 21 02 F6 | 	mov	local02, arg02
1db9c     0B 23 02 F6 | 	mov	local03, arg03
1dba0     0C 25 02 F6 | 	mov	local04, arg04
1dba4     0F 13 02 F6 | 	mov	arg01, local01
1dba8     10 15 02 F6 | 	mov	arg02, local02
1dbac     0B 16 06 F6 | 	mov	arg03, #11
1dbb0     DC 7B BF FD | 	call	#__system____builtin_memmove
1dbb4     06 24 16 F2 | 	cmp	local04, #6 wc
1dbb8     48 00 90 CD |  if_b	jmp	#LR__3315
1dbbc     12 27 02 F6 | 	mov	local05, local04
1dbc0     97 1E 48 FB | 	callpa	#(@LR__3313-@LR__3310)>>2,fcache_load_ptr_
1dbc4                 | ' 		sreg = seq;
1dbc4                 | ' 		while (*lfn) {
1dbc4                 | LR__3310
1dbc4     11 29 EA FA | 	rdword	local06, local03 wz
1dbc8     34 00 90 AD |  if_e	jmp	#LR__3314
1dbcc     11 2B E2 FA | 	rdword	local07, local03
1dbd0                 | ' 			wc = *lfn++;
1dbd0                 | ' 			for (i = 0; i < 16; i++) {
1dbd0     02 22 06 F1 | 	add	local03, #2
1dbd4     10 12 DC FC | 	rep	@LR__3312, #16
1dbd8                 | LR__3311
1dbd8     01 26 66 F0 | 	shl	local05, #1
1dbdc     15 29 32 F9 | 	getword	local06, local07, #0
1dbe0     01 28 06 F5 | 	and	local06, #1
1dbe4     14 27 02 F1 | 	add	local05, local06
1dbe8     15 2B 32 F9 | 	getword	local07, local07, #0
1dbec     01 2A 46 F0 | 	shr	local07, #1
1dbf0     10 26 2E F4 | 	testbn	local05, #16 wz
1dbf4     88 00 00 5F 
1dbf8     21 26 66 55 |  if_ne	xor	local05, ##69665
1dbfc                 | LR__3312
1dbfc     C4 FF 9F FD | 	jmp	#LR__3310
1dc00                 | LR__3313
1dc00                 | LR__3314
1dc00     13 25 02 F6 | 	mov	local04, local05
1dc04                 | LR__3315
1dc04     07 2A 06 F6 | 	mov	local07, #7
1dc08                 | ' 			}
1dc08                 | ' 		}
1dc08                 | ' 		seq = (UINT)sreg;
1dc08                 | ' 	}
1dc08                 | ' 
1dc08                 | ' 
1dc08                 | ' 	i = 7;
1dc08                 | ' 	do {
1dc08     10 4E 05 F1 | 	add	fp, #16
1dc0c     97 1A 48 FB | 	callpa	#(@LR__3317-@LR__3316)>>2,fcache_load_ptr_
1dc10                 | LR__3316
1dc10     12 27 42 F8 | 	getnib	local05, local04, #0
1dc14     30 26 06 F1 | 	add	local05, #48
1dc18     04 24 46 F0 | 	shr	local04, #4
1dc1c     13 29 E2 F8 | 	getbyte	local06, local05, #0
1dc20     3A 28 16 F2 | 	cmp	local06, #58 wc
1dc24     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
1dc28     07 26 06 31 |  if_ae	add	local05, #7
1dc2c     15 29 02 F6 | 	mov	local06, local07
1dc30     01 2A 8E F1 | 	sub	local07, #1 wz
1dc34     A7 28 02 F1 | 	add	local06, fp
1dc38     14 27 42 FC | 	wrbyte	local05, local06
1dc3c     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
1dc40     CC FF 9F 5D |  if_ne	jmp	#LR__3316
1dc44                 | LR__3317
1dc44     15 29 02 F6 | 	mov	local06, local07
1dc48     A7 28 02 F1 | 	add	local06, fp
1dc4c     14 FD 48 FC | 	wrbyte	#126, local06
1dc50                 | ' 	ns[i] = '~';
1dc50                 | ' 
1dc50                 | ' 
1dc50                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
1dc50     00 26 06 F6 | 	mov	local05, #0
1dc54     10 4E 85 F1 | 	sub	fp, #16
1dc58     97 2A 48 FB | 	callpa	#(@LR__3320-@LR__3318)>>2,fcache_load_ptr_
1dc5c                 | LR__3318
1dc5c     15 27 12 F2 | 	cmp	local05, local07 wc
1dc60     4C 00 90 3D |  if_ae	jmp	#LR__3321
1dc64     13 29 02 F6 | 	mov	local06, local05
1dc68     0F 29 02 F1 | 	add	local06, local01
1dc6c     14 29 C2 FA | 	rdbyte	local06, local06
1dc70     20 28 0E F2 | 	cmp	local06, #32 wz
1dc74     38 00 90 AD |  if_e	jmp	#LR__3321
1dc78     13 13 02 F6 | 	mov	arg01, local05
1dc7c     0F 13 02 F1 | 	add	arg01, local01
1dc80     09 13 CA FA | 	rdbyte	arg01, arg01 wz
1dc84     00 FA 05 56 |  if_ne	mov	result1, #0
1dc88                 | ' 
1dc88                 | ' 	return 0;
1dc88     00 FA 05 A6 |  if_e	mov	result1, #0
1dc8c     00 FA 0D F2 | 	cmp	result1, #0 wz
1dc90     14 00 90 AD |  if_e	jmp	#LR__3319
1dc94     15 29 02 F6 | 	mov	local06, local07
1dc98     01 28 86 F1 | 	sub	local06, #1
1dc9c     14 27 0A F2 | 	cmp	local05, local06 wz
1dca0     0C 00 90 AD |  if_e	jmp	#LR__3321
1dca4     01 26 06 F1 | 	add	local05, #1
1dca8                 | LR__3319
1dca8     01 26 06 F1 | 	add	local05, #1
1dcac     AC FF 9F FD | 	jmp	#LR__3318
1dcb0                 | LR__3320
1dcb0                 | LR__3321
1dcb0     97 20 48 FB | 	callpa	#(@LR__3325-@LR__3322)>>2,fcache_load_ptr_
1dcb4                 | ' 			j++;
1dcb4                 | ' 		}
1dcb4                 | ' 	}
1dcb4                 | ' 	do {
1dcb4                 | LR__3322
1dcb4     13 29 02 F6 | 	mov	local06, local05
1dcb8     0F 29 02 F1 | 	add	local06, local01
1dcbc     08 2A 16 F2 | 	cmp	local07, #8 wc
1dcc0     01 26 06 F1 | 	add	local05, #1
1dcc4     1C 00 90 3D |  if_ae	jmp	#LR__3323
1dcc8     15 25 02 F6 | 	mov	local04, local07
1dccc     10 4E 05 F1 | 	add	fp, #16
1dcd0     A7 24 02 F1 | 	add	local04, fp
1dcd4     12 2D C2 FA | 	rdbyte	local08, local04
1dcd8     01 2A 06 F1 | 	add	local07, #1
1dcdc     10 4E 85 F1 | 	sub	fp, #16
1dce0     04 00 90 FD | 	jmp	#LR__3324
1dce4                 | LR__3323
1dce4     20 2C 06 F6 | 	mov	local08, #32
1dce8                 | LR__3324
1dce8     14 2D 42 FC | 	wrbyte	local08, local06
1dcec     08 26 16 F2 | 	cmp	local05, #8 wc
1dcf0     C0 FF 9F CD |  if_b	jmp	#LR__3322
1dcf4                 | LR__3325
1dcf4     A7 F0 03 F6 | 	mov	ptra, fp
1dcf8     B2 00 A0 FD | 	call	#popregs_
1dcfc                 | _fatfs_cc_gen_numname_ret
1dcfc     2D 00 64 FD | 	ret
1dd00                 | 
1dd00                 | _fatfs_cc_sum_sfn
1dd00     00 00 06 F6 | 	mov	_var01, #0
1dd04                 | ' )
1dd04                 | ' {
1dd04                 | ' 	BYTE sum = 0;
1dd04                 | ' 	UINT n = 11;
1dd04                 | ' 
1dd04                 | ' 	do {
1dd04     97 12 48 FB | 	callpa	#(@LR__3332-@LR__3330)>>2,fcache_load_ptr_
1dd08                 | LR__3330
1dd08     0B 10 DC FC | 	rep	@LR__3333, #11
1dd0c                 | LR__3331
1dd0c     00 FB E1 F8 | 	getbyte	result1, _var01, #0
1dd10     01 FA 45 F0 | 	shr	result1, #1
1dd14     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
1dd18     07 00 66 F0 | 	shl	_var01, #7
1dd1c     00 FB 01 F1 | 	add	result1, _var01
1dd20     09 01 C2 FA | 	rdbyte	_var01, arg01
1dd24     FD 00 02 F1 | 	add	_var01, result1
1dd28     01 12 06 F1 | 	add	arg01, #1
1dd2c                 | LR__3332
1dd2c                 | LR__3333
1dd2c                 | ' 	return sum;
1dd2c     00 FB 01 F6 | 	mov	result1, _var01
1dd30                 | _fatfs_cc_sum_sfn_ret
1dd30     2D 00 64 FD | 	ret
1dd34                 | 
1dd34                 | _fatfs_cc_dir_read
1dd34     0C 4A 05 F6 | 	mov	COUNT_, #12
1dd38     A8 00 A0 FD | 	call	#pushregs_
1dd3c     09 1F 02 F6 | 	mov	local01, arg01
1dd40     0A 21 02 F6 | 	mov	local02, arg02
1dd44     04 22 06 F6 | 	mov	local03, #4
1dd48     0F 25 02 FB | 	rdlong	local04, local01
1dd4c     FF 26 06 F6 | 	mov	local05, #255
1dd50     FF 28 06 F6 | 	mov	local06, #255
1dd54                 | ' )
1dd54                 | ' {
1dd54                 | ' 	FRESULT res = FR_NO_FILE;
1dd54                 | ' 	FATFS *fs = dp->obj.fs;
1dd54                 | ' 	BYTE attr, b;
1dd54                 | ' 
1dd54                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
1dd54                 | ' 
1dd54                 | ' 
1dd54                 | ' 	while (dp->sect) {
1dd54                 | LR__3340
1dd54     18 1E 06 F1 | 	add	local01, #24
1dd58     0F FB 09 FB | 	rdlong	result1, local01 wz
1dd5c     18 1E 86 F1 | 	sub	local01, #24
1dd60     AC 01 90 AD |  if_e	jmp	#LR__3350
1dd64     18 1E 06 F1 | 	add	local01, #24
1dd68     0F 15 02 FB | 	rdlong	arg02, local01
1dd6c     18 1E 86 F1 | 	sub	local01, #24
1dd70     12 13 02 F6 | 	mov	arg01, local04
1dd74     AC ED BF FD | 	call	#_fatfs_cc_move_window
1dd78     FD 22 0A F6 | 	mov	local03, result1 wz
1dd7c     90 01 90 5D |  if_ne	jmp	#LR__3350
1dd80     1C 1E 06 F1 | 	add	local01, #28
1dd84     0F FB 01 FB | 	rdlong	result1, local01
1dd88     1C 1E 86 F1 | 	sub	local01, #28
1dd8c     FD 2A C2 FA | 	rdbyte	local07, result1
1dd90     15 FB 01 F6 | 	mov	result1, local07
1dd94     07 FA 4D F7 | 	zerox	result1, #7 wz
1dd98     04 22 06 A6 |  if_e	mov	local03, #4
1dd9c                 | ' 			res = FR_NO_FILE; break;
1dd9c     70 01 90 AD |  if_e	jmp	#LR__3350
1dda0     1C 1E 06 F1 | 	add	local01, #28
1dda4     0F 2D 02 FB | 	rdlong	local08, local01
1dda8     0B 2C 06 F1 | 	add	local08, #11
1ddac     16 2F C2 FA | 	rdbyte	local09, local08
1ddb0     3F 2E 06 F5 | 	and	local09, #63
1ddb4     16 1E 86 F1 | 	sub	local01, #22
1ddb8     0F 2F 42 FC | 	wrbyte	local09, local01
1ddbc     06 1E 86 F1 | 	sub	local01, #6
1ddc0     15 FB E1 F8 | 	getbyte	result1, local07, #0
1ddc4     E5 FA 0D F2 | 	cmp	result1, #229 wz
1ddc8     15 2D 02 56 |  if_ne	mov	local08, local07
1ddcc     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
1ddd0     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
1ddd4     1C 00 90 AD |  if_e	jmp	#LR__3341
1ddd8     00 30 06 F6 | 	mov	local10, #0
1dddc     17 2D E2 F8 | 	getbyte	local08, local09, #0
1dde0     20 2C 26 F5 | 	andn	local08, #32
1dde4     08 2C 0E F2 | 	cmp	local08, #8 wz
1dde8     01 30 06 A6 |  if_e	mov	local10, #1
1ddec     10 31 0A F2 | 	cmp	local10, local02 wz
1ddf0     08 00 90 AD |  if_e	jmp	#LR__3342
1ddf4                 | LR__3341
1ddf4     FF 26 06 F6 | 	mov	local05, #255
1ddf8     00 01 90 FD | 	jmp	#LR__3349
1ddfc                 | LR__3342
1ddfc     17 2F E2 F8 | 	getbyte	local09, local09, #0
1de00     0F 2E 0E F2 | 	cmp	local09, #15 wz
1de04     B4 00 90 5D |  if_ne	jmp	#LR__3346
1de08     15 33 E2 F8 | 	getbyte	local11, local07, #0
1de0c     40 32 CE F7 | 	test	local11, #64 wz
1de10     30 00 90 AD |  if_e	jmp	#LR__3343
1de14     1C 1E 06 F1 | 	add	local01, #28
1de18     0F 33 02 FB | 	rdlong	local11, local01
1de1c     0D 32 06 F1 | 	add	local11, #13
1de20     19 29 C2 FA | 	rdbyte	local06, local11
1de24     15 2B E2 F8 | 	getbyte	local07, local07, #0
1de28     BF 2A 06 F5 | 	and	local07, #191
1de2c     15 27 02 F6 | 	mov	local05, local07
1de30     0C 1E 86 F1 | 	sub	local01, #12
1de34     0F 33 02 FB | 	rdlong	local11, local01
1de38     1C 1E 06 F1 | 	add	local01, #28
1de3c     0F 33 62 FC | 	wrlong	local11, local01
1de40     2C 1E 86 F1 | 	sub	local01, #44
1de44                 | LR__3343
1de44     15 2D E2 F8 | 	getbyte	local08, local07, #0
1de48     13 31 E2 F8 | 	getbyte	local10, local05, #0
1de4c     18 2D 0A F2 | 	cmp	local08, local10 wz
1de50     5C 00 90 5D |  if_ne	jmp	#LR__3344
1de54     14 31 E2 F8 | 	getbyte	local10, local06, #0
1de58     1C 1E 06 F1 | 	add	local01, #28
1de5c     0F 2F 02 FB | 	rdlong	local09, local01
1de60     1C 1E 86 F1 | 	sub	local01, #28
1de64     0D 2E 06 F1 | 	add	local09, #13
1de68     17 2D C2 FA | 	rdbyte	local08, local09
1de6c     16 2F E2 F8 | 	getbyte	local09, local08, #0
1de70     17 31 0A F2 | 	cmp	local10, local09 wz
1de74     38 00 90 5D |  if_ne	jmp	#LR__3344
1de78     0C 24 06 F1 | 	add	local04, #12
1de7c     12 13 02 FB | 	rdlong	arg01, local04
1de80     0C 24 86 F1 | 	sub	local04, #12
1de84     1C 1E 06 F1 | 	add	local01, #28
1de88     0F 35 02 FB | 	rdlong	local12, local01
1de8c     1C 1E 86 F1 | 	sub	local01, #28
1de90     1A 15 02 F6 | 	mov	arg02, local12
1de94     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
1de98     00 FA 4D F2 | 	cmps	result1, #0 wz
1de9c     13 35 02 56 |  if_ne	mov	local12, local05
1dea0     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
1dea4     01 34 86 51 |  if_ne	sub	local12, #1
1dea8     1A 33 02 56 |  if_ne	mov	local11, local12
1deac     04 00 90 5D |  if_ne	jmp	#LR__3345
1deb0                 | LR__3344
1deb0     FF 32 06 F6 | 	mov	local11, #255
1deb4                 | LR__3345
1deb4     19 27 02 F6 | 	mov	local05, local11
1deb8     40 00 90 FD | 	jmp	#LR__3348
1debc                 | LR__3346
1debc     13 33 02 F6 | 	mov	local11, local05
1dec0     07 32 4E F7 | 	zerox	local11, #7 wz
1dec4     20 00 90 5D |  if_ne	jmp	#LR__3347
1dec8     14 29 E2 F8 | 	getbyte	local06, local06, #0
1decc     1C 1E 06 F1 | 	add	local01, #28
1ded0     0F 13 02 FB | 	rdlong	arg01, local01
1ded4     1C 1E 86 F1 | 	sub	local01, #28
1ded8     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
1dedc     FD FA E1 F8 | 	getbyte	result1, result1, #0
1dee0     FD 28 0A F2 | 	cmp	local06, result1 wz
1dee4     28 00 90 AD |  if_e	jmp	#LR__3350
1dee8                 | LR__3347
1dee8     2C 1E 06 F1 | 	add	local01, #44
1deec     FF FF FF FF 
1def0     0F FF 6B FC | 	wrlong	##-1, local01
1def4     2C 1E 86 F1 | 	sub	local01, #44
1def8                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
1def8                 | ' 					}
1def8                 | ' 					break;
1def8     14 00 90 FD | 	jmp	#LR__3350
1defc                 | LR__3348
1defc                 | LR__3349
1defc     0F 13 02 F6 | 	mov	arg01, local01
1df00     00 14 06 F6 | 	mov	arg02, #0
1df04     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
1df08     FD 22 0A F6 | 	mov	local03, result1 wz
1df0c     44 FE 9F AD |  if_e	jmp	#LR__3340
1df10                 | LR__3350
1df10     00 22 0E F2 | 	cmp	local03, #0 wz
1df14     18 1E 06 51 |  if_ne	add	local01, #24
1df18     0F 01 68 5C |  if_ne	wrlong	#0, local01
1df1c                 | ' 	return res;
1df1c     11 FB 01 F6 | 	mov	result1, local03
1df20     A7 F0 03 F6 | 	mov	ptra, fp
1df24     B2 00 A0 FD | 	call	#popregs_
1df28                 | _fatfs_cc_dir_read_ret
1df28     2D 00 64 FD | 	ret
1df2c                 | 
1df2c                 | _fatfs_cc_dir_find
1df2c     0B 4A 05 F6 | 	mov	COUNT_, #11
1df30     A8 00 A0 FD | 	call	#pushregs_
1df34     09 1F 02 F6 | 	mov	local01, arg01
1df38     0F 21 02 FB | 	rdlong	local02, local01
1df3c     0F 13 02 F6 | 	mov	arg01, local01
1df40     00 14 06 F6 | 	mov	arg02, #0
1df44     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
1df48     00 FA 0D F2 | 	cmp	result1, #0 wz
1df4c     18 02 90 5D |  if_ne	jmp	#LR__3372
1df50     FF 22 06 F6 | 	mov	local03, #255
1df54     FF 24 06 F6 | 	mov	local04, #255
1df58     2C 1E 06 F1 | 	add	local01, #44
1df5c     FF FF FF FF 
1df60     0F FF 6B FC | 	wrlong	##-1, local01
1df64     2C 1E 86 F1 | 	sub	local01, #44
1df68                 | ' #line 2404 "ff.c"
1df68                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
1df68                 | ' 
1df68                 | ' 	do {
1df68                 | LR__3360
1df68     18 1E 06 F1 | 	add	local01, #24
1df6c     0F 15 02 FB | 	rdlong	arg02, local01
1df70     18 1E 86 F1 | 	sub	local01, #24
1df74     10 13 02 F6 | 	mov	arg01, local02
1df78     A8 EB BF FD | 	call	#_fatfs_cc_move_window
1df7c     FD 26 0A F6 | 	mov	local05, result1 wz
1df80     E0 01 90 5D |  if_ne	jmp	#LR__3371
1df84     1C 1E 06 F1 | 	add	local01, #28
1df88     0F 17 02 FB | 	rdlong	arg03, local01
1df8c     1C 1E 86 F1 | 	sub	local01, #28
1df90     0B 29 C2 FA | 	rdbyte	local06, arg03
1df94     14 17 02 F6 | 	mov	arg03, local06
1df98     07 16 4E F7 | 	zerox	arg03, #7 wz
1df9c     04 26 06 A6 |  if_e	mov	local05, #4
1dfa0     C0 01 90 AD |  if_e	jmp	#LR__3371
1dfa4     1C 1E 06 F1 | 	add	local01, #28
1dfa8     0F 2B 02 FB | 	rdlong	local07, local01
1dfac     15 17 02 F6 | 	mov	arg03, local07
1dfb0     0B 16 06 F1 | 	add	arg03, #11
1dfb4     0B 2D C2 FA | 	rdbyte	local08, arg03
1dfb8     3F 2C 06 F5 | 	and	local08, #63
1dfbc     16 1E 86 F1 | 	sub	local01, #22
1dfc0     0F 2D 42 FC | 	wrbyte	local08, local01
1dfc4     06 1E 86 F1 | 	sub	local01, #6
1dfc8     14 17 E2 F8 | 	getbyte	arg03, local06, #0
1dfcc     E5 16 0E F2 | 	cmp	arg03, #229 wz
1dfd0     18 00 90 AD |  if_e	jmp	#LR__3361
1dfd4     16 17 E2 F8 | 	getbyte	arg03, local08, #0
1dfd8     08 16 CE F7 | 	test	arg03, #8 wz
1dfdc     16 2B 02 56 |  if_ne	mov	local07, local08
1dfe0     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
1dfe4     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
1dfe8     18 00 90 AD |  if_e	jmp	#LR__3362
1dfec                 | LR__3361
1dfec     FF 24 06 F6 | 	mov	local04, #255
1dff0     2C 1E 06 F1 | 	add	local01, #44
1dff4     FF FF FF FF 
1dff8     0F FF 6B FC | 	wrlong	##-1, local01
1dffc     2C 1E 86 F1 | 	sub	local01, #44
1e000     4C 01 90 FD | 	jmp	#LR__3370
1e004                 | LR__3362
1e004     16 2D E2 F8 | 	getbyte	local08, local08, #0
1e008     0F 2C 0E F2 | 	cmp	local08, #15 wz
1e00c     C8 00 90 5D |  if_ne	jmp	#LR__3366
1e010     2B 1E 06 F1 | 	add	local01, #43
1e014     0F 2D C2 FA | 	rdbyte	local08, local01
1e018     2B 1E 86 F1 | 	sub	local01, #43
1e01c     40 2C CE F7 | 	test	local08, #64 wz
1e020     2C 01 90 5D |  if_ne	jmp	#LR__3369
1e024     14 2F E2 F8 | 	getbyte	local09, local06, #0
1e028     40 2E CE F7 | 	test	local09, #64 wz
1e02c     30 00 90 AD |  if_e	jmp	#LR__3363
1e030     1C 1E 06 F1 | 	add	local01, #28
1e034     0F 2F 02 FB | 	rdlong	local09, local01
1e038     0D 2E 06 F1 | 	add	local09, #13
1e03c     17 23 C2 FA | 	rdbyte	local03, local09
1e040     14 29 E2 F8 | 	getbyte	local06, local06, #0
1e044     BF 28 06 F5 | 	and	local06, #191
1e048     14 25 02 F6 | 	mov	local04, local06
1e04c     0C 1E 86 F1 | 	sub	local01, #12
1e050     0F 2F 02 FB | 	rdlong	local09, local01
1e054     1C 1E 06 F1 | 	add	local01, #28
1e058     0F 2F 62 FC | 	wrlong	local09, local01
1e05c     2C 1E 86 F1 | 	sub	local01, #44
1e060                 | LR__3363
1e060     14 31 E2 F8 | 	getbyte	local10, local06, #0
1e064     12 2B E2 F8 | 	getbyte	local07, local04, #0
1e068     15 31 0A F2 | 	cmp	local10, local07 wz
1e06c     5C 00 90 5D |  if_ne	jmp	#LR__3364
1e070     11 2D E2 F8 | 	getbyte	local08, local03, #0
1e074     1C 1E 06 F1 | 	add	local01, #28
1e078     0F 2B 02 FB | 	rdlong	local07, local01
1e07c     1C 1E 86 F1 | 	sub	local01, #28
1e080     0D 2A 06 F1 | 	add	local07, #13
1e084     15 29 C2 FA | 	rdbyte	local06, local07
1e088     14 2B E2 F8 | 	getbyte	local07, local06, #0
1e08c     15 2D 0A F2 | 	cmp	local08, local07 wz
1e090     38 00 90 5D |  if_ne	jmp	#LR__3364
1e094     0C 20 06 F1 | 	add	local02, #12
1e098     10 13 02 FB | 	rdlong	arg01, local02
1e09c     0C 20 86 F1 | 	sub	local02, #12
1e0a0     1C 1E 06 F1 | 	add	local01, #28
1e0a4     0F 33 02 FB | 	rdlong	local11, local01
1e0a8     1C 1E 86 F1 | 	sub	local01, #28
1e0ac     19 15 02 F6 | 	mov	arg02, local11
1e0b0     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
1e0b4     00 FA 4D F2 | 	cmps	result1, #0 wz
1e0b8     12 33 02 56 |  if_ne	mov	local11, local04
1e0bc     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
1e0c0     01 32 86 51 |  if_ne	sub	local11, #1
1e0c4     19 2F 02 56 |  if_ne	mov	local09, local11
1e0c8     04 00 90 5D |  if_ne	jmp	#LR__3365
1e0cc                 | LR__3364
1e0cc     FF 2E 06 F6 | 	mov	local09, #255
1e0d0                 | LR__3365
1e0d0     17 25 02 F6 | 	mov	local04, local09
1e0d4     78 00 90 FD | 	jmp	#LR__3369
1e0d8                 | LR__3366
1e0d8     12 2F 02 F6 | 	mov	local09, local04
1e0dc     07 2E 4E F7 | 	zerox	local09, #7 wz
1e0e0     20 00 90 5D |  if_ne	jmp	#LR__3367
1e0e4     11 31 E2 F8 | 	getbyte	local10, local03, #0
1e0e8     1C 1E 06 F1 | 	add	local01, #28
1e0ec     0F 13 02 FB | 	rdlong	arg01, local01
1e0f0     1C 1E 86 F1 | 	sub	local01, #28
1e0f4     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
1e0f8     FD FA E1 F8 | 	getbyte	result1, result1, #0
1e0fc     FD 30 0A F2 | 	cmp	local10, result1 wz
1e100     60 00 90 AD |  if_e	jmp	#LR__3371
1e104                 | LR__3367
1e104     2B 1E 06 F1 | 	add	local01, #43
1e108     0F 2F C2 FA | 	rdbyte	local09, local01
1e10c     2B 1E 86 F1 | 	sub	local01, #43
1e110     01 2E CE F7 | 	test	local09, #1 wz
1e114     24 00 90 5D |  if_ne	jmp	#LR__3368
1e118     1C 1E 06 F1 | 	add	local01, #28
1e11c     0F 13 02 FB | 	rdlong	arg01, local01
1e120     04 1E 06 F1 | 	add	local01, #4
1e124     0F 15 02 F6 | 	mov	arg02, local01
1e128     20 1E 86 F1 | 	sub	local01, #32
1e12c     0B 16 06 F6 | 	mov	arg03, #11
1e130     88 DA BF FD | 	call	#_fatfs_cc_memcmp
1e134     00 FA 0D F2 | 	cmp	result1, #0 wz
1e138     28 00 90 AD |  if_e	jmp	#LR__3371
1e13c                 | LR__3368
1e13c     FF 24 06 F6 | 	mov	local04, #255
1e140     2C 1E 06 F1 | 	add	local01, #44
1e144     FF FF FF FF 
1e148     0F FF 6B FC | 	wrlong	##-1, local01
1e14c     2C 1E 86 F1 | 	sub	local01, #44
1e150                 | LR__3369
1e150                 | LR__3370
1e150     0F 13 02 F6 | 	mov	arg01, local01
1e154     00 14 06 F6 | 	mov	arg02, #0
1e158     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
1e15c     FD 26 0A F6 | 	mov	local05, result1 wz
1e160     04 FE 9F AD |  if_e	jmp	#LR__3360
1e164                 | LR__3371
1e164                 | ' 
1e164                 | ' 	return res;
1e164     13 FB 01 F6 | 	mov	result1, local05
1e168                 | LR__3372
1e168     A7 F0 03 F6 | 	mov	ptra, fp
1e16c     B2 00 A0 FD | 	call	#popregs_
1e170                 | _fatfs_cc_dir_find_ret
1e170     2D 00 64 FD | 	ret
1e174                 | 
1e174                 | _fatfs_cc_dir_register
1e174     0A 4A 05 F6 | 	mov	COUNT_, #10
1e178     A8 00 A0 FD | 	call	#pushregs_
1e17c     2C F0 07 F1 | 	add	ptra, #44
1e180     04 4E 05 F1 | 	add	fp, #4
1e184     A7 12 62 FC | 	wrlong	arg01, fp
1e188     09 1F 02 FB | 	rdlong	local01, arg01
1e18c     08 4E 05 F1 | 	add	fp, #8
1e190     A7 1E 62 FC | 	wrlong	local01, fp
1e194     08 4E 85 F1 | 	sub	fp, #8
1e198     A7 20 02 FB | 	rdlong	local02, fp
1e19c     04 4E 85 F1 | 	sub	fp, #4
1e1a0     2B 20 06 F1 | 	add	local02, #43
1e1a4     10 21 C2 FA | 	rdbyte	local02, local02
1e1a8     A0 20 CE F7 | 	test	local02, #160 wz
1e1ac     06 FA 05 56 |  if_ne	mov	result1, #6
1e1b0     F8 03 90 5D |  if_ne	jmp	#LR__3395
1e1b4                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
1e1b4     14 4E 05 F1 | 	add	fp, #20
1e1b8     A7 00 68 FC | 	wrlong	#0, fp
1e1bc     14 4E 85 F1 | 	sub	fp, #20
1e1c0     97 28 48 FB | 	callpa	#(@LR__3381-@LR__3380)>>2,fcache_load_ptr_
1e1c4                 | LR__3380
1e1c4     0C 4E 05 F1 | 	add	fp, #12
1e1c8     A7 20 02 FB | 	rdlong	local02, fp
1e1cc     0C 20 06 F1 | 	add	local02, #12
1e1d0     10 23 02 FB | 	rdlong	local03, local02
1e1d4     08 4E 05 F1 | 	add	fp, #8
1e1d8     A7 24 02 FB | 	rdlong	local04, fp
1e1dc     14 4E 85 F1 | 	sub	fp, #20
1e1e0     01 24 66 F0 | 	shl	local04, #1
1e1e4     11 25 02 F1 | 	add	local04, local03
1e1e8     12 21 EA FA | 	rdword	local02, local04 wz
1e1ec     24 00 90 AD |  if_e	jmp	#LR__3382
1e1f0     14 4E 05 F1 | 	add	fp, #20
1e1f4     A7 26 02 FB | 	rdlong	local05, fp
1e1f8     13 29 02 F6 | 	mov	local06, local05
1e1fc     13 2B 02 F6 | 	mov	local07, local05
1e200     15 2D 02 F6 | 	mov	local08, local07
1e204     01 2C 06 F1 | 	add	local08, #1
1e208     A7 2C 62 FC | 	wrlong	local08, fp
1e20c     14 4E 85 F1 | 	sub	fp, #20
1e210     B0 FF 9F FD | 	jmp	#LR__3380
1e214                 | LR__3381
1e214                 | LR__3382
1e214     1C 4E 05 F1 | 	add	fp, #28
1e218     A7 12 02 F6 | 	mov	arg01, fp
1e21c     18 4E 85 F1 | 	sub	fp, #24
1e220     A7 14 02 FB | 	rdlong	arg02, fp
1e224     04 4E 85 F1 | 	sub	fp, #4
1e228     20 14 06 F1 | 	add	arg02, #32
1e22c     0C 16 06 F6 | 	mov	arg03, #12
1e230     5C 75 BF FD | 	call	#__system____builtin_memmove
1e234     27 4E 05 F1 | 	add	fp, #39
1e238     A7 2E C2 FA | 	rdbyte	local09, fp
1e23c     27 4E 85 F1 | 	sub	fp, #39
1e240     01 2E CE F7 | 	test	local09, #1 wz
1e244     F4 00 90 AD |  if_e	jmp	#LR__3385
1e248     04 4E 05 F1 | 	add	fp, #4
1e24c     A7 30 02 FB | 	rdlong	local10, fp
1e250     2B 30 06 F1 | 	add	local10, #43
1e254     18 81 48 FC | 	wrbyte	#64, local10
1e258                 | ' 		dp->fn[ 11 ] =  0x40 ;
1e258                 | ' 		for (n = 1; n < 100; n++) {
1e258     0C 4E 05 F1 | 	add	fp, #12
1e25c     A7 02 68 FC | 	wrlong	#1, fp
1e260     10 4E 85 F1 | 	sub	fp, #16
1e264                 | LR__3383
1e264     10 4E 05 F1 | 	add	fp, #16
1e268     A7 20 02 FB | 	rdlong	local02, fp
1e26c     10 4E 85 F1 | 	sub	fp, #16
1e270     64 20 16 F2 | 	cmp	local02, #100 wc
1e274     70 00 90 3D |  if_ae	jmp	#LR__3384
1e278     04 4E 05 F1 | 	add	fp, #4
1e27c     A7 12 02 FB | 	rdlong	arg01, fp
1e280     20 12 06 F1 | 	add	arg01, #32
1e284     18 4E 05 F1 | 	add	fp, #24
1e288     A7 14 02 F6 | 	mov	arg02, fp
1e28c     10 4E 85 F1 | 	sub	fp, #16
1e290     A7 30 02 FB | 	rdlong	local10, fp
1e294     0C 30 06 F1 | 	add	local10, #12
1e298     18 17 02 FB | 	rdlong	arg03, local10
1e29c     04 4E 05 F1 | 	add	fp, #4
1e2a0     A7 18 02 FB | 	rdlong	arg04, fp
1e2a4     10 4E 85 F1 | 	sub	fp, #16
1e2a8     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
1e2ac     04 4E 05 F1 | 	add	fp, #4
1e2b0     A7 12 02 FB | 	rdlong	arg01, fp
1e2b4     04 4E 85 F1 | 	sub	fp, #4
1e2b8     70 FC BF FD | 	call	#_fatfs_cc_dir_find
1e2bc     08 4E 05 F1 | 	add	fp, #8
1e2c0     A7 FA 61 FC | 	wrlong	result1, fp
1e2c4     00 FA 4D F2 | 	cmps	result1, #0 wz
1e2c8     08 4E 85 F1 | 	sub	fp, #8
1e2cc     18 00 90 5D |  if_ne	jmp	#LR__3384
1e2d0     10 4E 05 F1 | 	add	fp, #16
1e2d4     A7 30 02 FB | 	rdlong	local10, fp
1e2d8     01 30 06 F1 | 	add	local10, #1
1e2dc     A7 30 62 FC | 	wrlong	local10, fp
1e2e0     10 4E 85 F1 | 	sub	fp, #16
1e2e4     7C FF 9F FD | 	jmp	#LR__3383
1e2e8                 | LR__3384
1e2e8     10 4E 05 F1 | 	add	fp, #16
1e2ec     A7 30 02 FB | 	rdlong	local10, fp
1e2f0     10 4E 85 F1 | 	sub	fp, #16
1e2f4     64 30 0E F2 | 	cmp	local10, #100 wz
1e2f8     07 FA 05 A6 |  if_e	mov	result1, #7
1e2fc     AC 02 90 AD |  if_e	jmp	#LR__3395
1e300     08 4E 05 F1 | 	add	fp, #8
1e304     A7 30 02 FB | 	rdlong	local10, fp
1e308     08 4E 85 F1 | 	sub	fp, #8
1e30c     04 30 0E F2 | 	cmp	local10, #4 wz
1e310     08 4E 05 51 |  if_ne	add	fp, #8
1e314     A7 FA 01 5B |  if_ne	rdlong	result1, fp
1e318     08 4E 85 51 |  if_ne	sub	fp, #8
1e31c     8C 02 90 5D |  if_ne	jmp	#LR__3395
1e320     04 4E 05 F1 | 	add	fp, #4
1e324     A7 30 02 FB | 	rdlong	local10, fp
1e328     23 4E 05 F1 | 	add	fp, #35
1e32c     A7 1E C2 FA | 	rdbyte	local01, fp
1e330     27 4E 85 F1 | 	sub	fp, #39
1e334     2B 30 06 F1 | 	add	local10, #43
1e338     18 1F 42 FC | 	wrbyte	local01, local10
1e33c                 | LR__3385
1e33c     27 4E 05 F1 | 	add	fp, #39
1e340     A7 20 C2 FA | 	rdbyte	local02, fp
1e344     27 4E 85 F1 | 	sub	fp, #39
1e348     02 20 CE F7 | 	test	local02, #2 wz
1e34c     20 00 90 AD |  if_e	jmp	#LR__3386
1e350     14 4E 05 F1 | 	add	fp, #20
1e354     A7 30 02 FB | 	rdlong	local10, fp
1e358     0C 30 06 F1 | 	add	local10, #12
1e35c     0D 30 16 FD | 	qdiv	local10, #13
1e360     14 4E 85 F1 | 	sub	fp, #20
1e364     18 30 62 FD | 	getqx	local10
1e368     01 30 06 F1 | 	add	local10, #1
1e36c     04 00 90 FD | 	jmp	#LR__3387
1e370                 | LR__3386
1e370     01 30 06 F6 | 	mov	local10, #1
1e374                 | LR__3387
1e374     18 4E 05 F1 | 	add	fp, #24
1e378     A7 30 62 FC | 	wrlong	local10, fp
1e37c     14 4E 85 F1 | 	sub	fp, #20
1e380     A7 12 02 FB | 	rdlong	arg01, fp
1e384     18 15 02 F6 | 	mov	arg02, local10
1e388     04 4E 85 F1 | 	sub	fp, #4
1e38c     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
1e390     08 4E 05 F1 | 	add	fp, #8
1e394     A7 FA 61 FC | 	wrlong	result1, fp
1e398     08 4E 85 F1 | 	sub	fp, #8
1e39c     00 FA 0D F2 | 	cmp	result1, #0 wz
1e3a0     38 01 90 5D |  if_ne	jmp	#LR__3392
1e3a4     18 4E 05 F1 | 	add	fp, #24
1e3a8     A7 30 02 FB | 	rdlong	local10, fp
1e3ac     01 30 8E F1 | 	sub	local10, #1 wz
1e3b0     A7 30 62 FC | 	wrlong	local10, fp
1e3b4     18 4E 85 F1 | 	sub	fp, #24
1e3b8     20 01 90 AD |  if_e	jmp	#LR__3392
1e3bc     04 4E 05 F1 | 	add	fp, #4
1e3c0     A7 30 02 FB | 	rdlong	local10, fp
1e3c4     18 13 02 F6 | 	mov	arg01, local10
1e3c8     14 4E 05 F1 | 	add	fp, #20
1e3cc     A7 18 02 FB | 	rdlong	arg04, fp
1e3d0     18 4E 85 F1 | 	sub	fp, #24
1e3d4     05 18 66 F0 | 	shl	arg04, #5
1e3d8     10 30 06 F1 | 	add	local10, #16
1e3dc     18 15 02 FB | 	rdlong	arg02, local10
1e3e0     0C 15 82 F1 | 	sub	arg02, arg04
1e3e4     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
1e3e8     08 4E 05 F1 | 	add	fp, #8
1e3ec     A7 FA 61 FC | 	wrlong	result1, fp
1e3f0     08 4E 85 F1 | 	sub	fp, #8
1e3f4     00 FA 0D F2 | 	cmp	result1, #0 wz
1e3f8     E0 00 90 5D |  if_ne	jmp	#LR__3391
1e3fc     04 4E 05 F1 | 	add	fp, #4
1e400     A7 12 02 FB | 	rdlong	arg01, fp
1e404     04 4E 85 F1 | 	sub	fp, #4
1e408     20 12 06 F1 | 	add	arg01, #32
1e40c     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
1e410     FD 30 02 F6 | 	mov	local10, result1
1e414     28 4E 05 F1 | 	add	fp, #40
1e418     A7 30 42 FC | 	wrbyte	local10, fp
1e41c     28 4E 85 F1 | 	sub	fp, #40
1e420                 | ' 			sum = sum_sfn(dp->fn);
1e420                 | ' 			do {
1e420                 | LR__3388
1e420     0C 4E 05 F1 | 	add	fp, #12
1e424     A7 12 02 FB | 	rdlong	arg01, fp
1e428     08 4E 85 F1 | 	sub	fp, #8
1e42c     A7 1E 02 FB | 	rdlong	local01, fp
1e430     04 4E 85 F1 | 	sub	fp, #4
1e434     18 1E 06 F1 | 	add	local01, #24
1e438     0F 15 02 FB | 	rdlong	arg02, local01
1e43c     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
1e440     08 4E 05 F1 | 	add	fp, #8
1e444     A7 FA 61 FC | 	wrlong	result1, fp
1e448     00 FA 4D F2 | 	cmps	result1, #0 wz
1e44c     08 4E 85 F1 | 	sub	fp, #8
1e450     88 00 90 5D |  if_ne	jmp	#LR__3390
1e454     0C 4E 05 F1 | 	add	fp, #12
1e458     A7 20 02 FB | 	rdlong	local02, fp
1e45c     0C 20 06 F1 | 	add	local02, #12
1e460     10 13 02 FB | 	rdlong	arg01, local02
1e464     08 4E 85 F1 | 	sub	fp, #8
1e468     A7 1E 02 FB | 	rdlong	local01, fp
1e46c     1C 1E 06 F1 | 	add	local01, #28
1e470     0F 15 02 FB | 	rdlong	arg02, local01
1e474     14 4E 05 F1 | 	add	fp, #20
1e478     A7 16 02 FB | 	rdlong	arg03, fp
1e47c     10 4E 05 F1 | 	add	fp, #16
1e480     A7 18 C2 FA | 	rdbyte	arg04, fp
1e484     28 4E 85 F1 | 	sub	fp, #40
1e488     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
1e48c     0C 4E 05 F1 | 	add	fp, #12
1e490     A7 30 02 FB | 	rdlong	local10, fp
1e494     03 30 06 F1 | 	add	local10, #3
1e498     18 03 48 FC | 	wrbyte	#1, local10
1e49c     08 4E 85 F1 | 	sub	fp, #8
1e4a0     A7 12 02 FB | 	rdlong	arg01, fp
1e4a4     04 4E 85 F1 | 	sub	fp, #4
1e4a8     00 14 06 F6 | 	mov	arg02, #0
1e4ac     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
1e4b0     08 4E 05 F1 | 	add	fp, #8
1e4b4     A7 FA 61 FC | 	wrlong	result1, fp
1e4b8     00 FA 4D F2 | 	cmps	result1, #0 wz
1e4bc     08 4E 85 F1 | 	sub	fp, #8
1e4c0     18 00 90 5D |  if_ne	jmp	#LR__3389
1e4c4     18 4E 05 F1 | 	add	fp, #24
1e4c8     A7 30 02 FB | 	rdlong	local10, fp
1e4cc     01 30 8E F1 | 	sub	local10, #1 wz
1e4d0     A7 30 62 FC | 	wrlong	local10, fp
1e4d4     18 4E 85 F1 | 	sub	fp, #24
1e4d8     44 FF 9F 5D |  if_ne	jmp	#LR__3388
1e4dc                 | LR__3389
1e4dc                 | LR__3390
1e4dc                 | LR__3391
1e4dc                 | LR__3392
1e4dc     08 4E 05 F1 | 	add	fp, #8
1e4e0     A7 30 0A FB | 	rdlong	local10, fp wz
1e4e4     08 4E 85 F1 | 	sub	fp, #8
1e4e8     B4 00 90 5D |  if_ne	jmp	#LR__3394
1e4ec     0C 4E 05 F1 | 	add	fp, #12
1e4f0     A7 12 02 FB | 	rdlong	arg01, fp
1e4f4     08 4E 85 F1 | 	sub	fp, #8
1e4f8     A7 1E 02 FB | 	rdlong	local01, fp
1e4fc     04 4E 85 F1 | 	sub	fp, #4
1e500     18 1E 06 F1 | 	add	local01, #24
1e504     0F 15 02 FB | 	rdlong	arg02, local01
1e508     18 E6 BF FD | 	call	#_fatfs_cc_move_window
1e50c     08 4E 05 F1 | 	add	fp, #8
1e510     A7 FA 61 FC | 	wrlong	result1, fp
1e514     08 4E 85 F1 | 	sub	fp, #8
1e518     00 FA 0D F2 | 	cmp	result1, #0 wz
1e51c     80 00 90 5D |  if_ne	jmp	#LR__3393
1e520     04 4E 05 F1 | 	add	fp, #4
1e524     A7 20 02 FB | 	rdlong	local02, fp
1e528     04 4E 85 F1 | 	sub	fp, #4
1e52c     1C 20 06 F1 | 	add	local02, #28
1e530     10 13 02 FB | 	rdlong	arg01, local02
1e534     00 14 06 F6 | 	mov	arg02, #0
1e538     20 16 06 F6 | 	mov	arg03, #32
1e53c     98 00 A0 FD | 	call	#\builtin_bytefill_
1e540     04 4E 05 F1 | 	add	fp, #4
1e544     A7 14 02 FB | 	rdlong	arg02, fp
1e548     0A 1F 02 F6 | 	mov	local01, arg02
1e54c     1C 1E 06 F1 | 	add	local01, #28
1e550     0F 13 02 FB | 	rdlong	arg01, local01
1e554     04 4E 85 F1 | 	sub	fp, #4
1e558     20 14 06 F1 | 	add	arg02, #32
1e55c     0B 16 06 F6 | 	mov	arg03, #11
1e560     2C 72 BF FD | 	call	#__system____builtin_memmove
1e564     04 4E 05 F1 | 	add	fp, #4
1e568     A7 2E 02 FB | 	rdlong	local09, fp
1e56c     17 31 02 F6 | 	mov	local10, local09
1e570     1C 30 06 F1 | 	add	local10, #28
1e574     18 1F 02 FB | 	rdlong	local01, local10
1e578     2B 2E 06 F1 | 	add	local09, #43
1e57c     17 31 C2 FA | 	rdbyte	local10, local09
1e580     18 30 06 F5 | 	and	local10, #24
1e584     0C 1E 06 F1 | 	add	local01, #12
1e588     0F 31 42 FC | 	wrbyte	local10, local01
1e58c     08 4E 05 F1 | 	add	fp, #8
1e590     A7 30 02 FB | 	rdlong	local10, fp
1e594     0C 4E 85 F1 | 	sub	fp, #12
1e598     03 30 06 F1 | 	add	local10, #3
1e59c     18 03 48 FC | 	wrbyte	#1, local10
1e5a0                 | LR__3393
1e5a0                 | LR__3394
1e5a0                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
1e5a0                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
1e5a0                 | ' 
1e5a0                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
1e5a0                 | ' 
1e5a0                 | ' 			fs->wflag = 1;
1e5a0                 | ' 		}
1e5a0                 | ' 	}
1e5a0                 | ' 
1e5a0                 | ' 	return res;
1e5a0     08 4E 05 F1 | 	add	fp, #8
1e5a4     A7 FA 01 FB | 	rdlong	result1, fp
1e5a8     08 4E 85 F1 | 	sub	fp, #8
1e5ac                 | LR__3395
1e5ac     A7 F0 03 F6 | 	mov	ptra, fp
1e5b0     B2 00 A0 FD | 	call	#popregs_
1e5b4                 | _fatfs_cc_dir_register_ret
1e5b4     2D 00 64 FD | 	ret
1e5b8                 | 
1e5b8                 | _fatfs_cc_dir_remove
1e5b8     05 4A 05 F6 | 	mov	COUNT_, #5
1e5bc     A8 00 A0 FD | 	call	#pushregs_
1e5c0     09 1F 02 F6 | 	mov	local01, arg01
1e5c4     0F 21 02 FB | 	rdlong	local02, local01
1e5c8     10 1E 06 F1 | 	add	local01, #16
1e5cc     0F 23 02 FB | 	rdlong	local03, local01
1e5d0     1C 1E 06 F1 | 	add	local01, #28
1e5d4     0F 15 02 FB | 	rdlong	arg02, local01
1e5d8     2C 1E 86 F1 | 	sub	local01, #44
1e5dc     FF FF 7F FF 
1e5e0     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
1e5e4     00 24 06 A6 |  if_e	mov	local04, #0
1e5e8     18 00 90 AD |  if_e	jmp	#LR__3400
1e5ec     0F 13 02 F6 | 	mov	arg01, local01
1e5f0     2C 1E 06 F1 | 	add	local01, #44
1e5f4     0F 15 02 FB | 	rdlong	arg02, local01
1e5f8     2C 1E 86 F1 | 	sub	local01, #44
1e5fc     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
1e600     FD 24 02 F6 | 	mov	local04, result1
1e604                 | LR__3400
1e604     12 27 0A F6 | 	mov	local05, local04 wz
1e608     64 00 90 5D |  if_ne	jmp	#LR__3403
1e60c                 | ' 		do {
1e60c                 | LR__3401
1e60c     18 1E 06 F1 | 	add	local01, #24
1e610     0F 15 02 FB | 	rdlong	arg02, local01
1e614     18 1E 86 F1 | 	sub	local01, #24
1e618     10 13 02 F6 | 	mov	arg01, local02
1e61c     04 E5 BF FD | 	call	#_fatfs_cc_move_window
1e620     FD 26 0A F6 | 	mov	local05, result1 wz
1e624     40 00 90 5D |  if_ne	jmp	#LR__3402
1e628     1C 1E 06 F1 | 	add	local01, #28
1e62c     0F 25 02 FB | 	rdlong	local04, local01
1e630     12 CB 49 FC | 	wrbyte	#229, local04
1e634     03 20 06 F1 | 	add	local02, #3
1e638     10 03 48 FC | 	wrbyte	#1, local02
1e63c     03 20 86 F1 | 	sub	local02, #3
1e640     0C 1E 86 F1 | 	sub	local01, #12
1e644     0F 25 02 FB | 	rdlong	local04, local01
1e648     10 1E 86 F1 | 	sub	local01, #16
1e64c     11 25 12 F2 | 	cmp	local04, local03 wc
1e650     14 00 90 3D |  if_ae	jmp	#LR__3402
1e654     0F 13 02 F6 | 	mov	arg01, local01
1e658     00 14 06 F6 | 	mov	arg02, #0
1e65c     90 EF BF FD | 	call	#_fatfs_cc_dir_next
1e660     FD 26 0A F6 | 	mov	local05, result1 wz
1e664     A4 FF 9F AD |  if_e	jmp	#LR__3401
1e668                 | LR__3402
1e668     04 26 0E F2 | 	cmp	local05, #4 wz
1e66c     02 26 06 A6 |  if_e	mov	local05, #2
1e670                 | LR__3403
1e670                 | ' 	}
1e670                 | ' #line 2590 "ff.c"
1e670                 | ' 	return res;
1e670     13 FB 01 F6 | 	mov	result1, local05
1e674     A7 F0 03 F6 | 	mov	ptra, fp
1e678     B2 00 A0 FD | 	call	#popregs_
1e67c                 | _fatfs_cc_dir_remove_ret
1e67c     2D 00 64 FD | 	ret
1e680                 | 
1e680                 | _fatfs_cc_get_fileinfo
1e680     0F 4A 05 F6 | 	mov	COUNT_, #15
1e684     A8 00 A0 FD | 	call	#pushregs_
1e688     09 1F 02 F6 | 	mov	local01, arg01
1e68c     0A 21 02 F6 | 	mov	local02, arg02
1e690     0F 23 02 FB | 	rdlong	local03, local01
1e694     1C 20 06 F1 | 	add	local02, #28
1e698     10 01 48 FC | 	wrbyte	#0, local02
1e69c     1C 20 86 F1 | 	sub	local02, #28
1e6a0     18 1E 06 F1 | 	add	local01, #24
1e6a4     0F 25 0A FB | 	rdlong	local04, local01 wz
1e6a8     18 1E 86 F1 | 	sub	local01, #24
1e6ac     90 03 90 AD |  if_e	jmp	#LR__3424
1e6b0     2C 1E 06 F1 | 	add	local01, #44
1e6b4     0F 25 02 FB | 	rdlong	local04, local01
1e6b8     2C 1E 86 F1 | 	sub	local01, #44
1e6bc     FF FF 7F FF 
1e6c0     FF 25 0E F2 | 	cmp	local04, ##-1 wz
1e6c4     D8 00 90 AD |  if_e	jmp	#LR__3413
1e6c8     00 26 06 F6 | 	mov	local05, #0
1e6cc     00 28 06 F6 | 	mov	local06, #0
1e6d0     00 2A 06 F6 | 	mov	local07, #0
1e6d4                 | ' 			si = di = 0;
1e6d4                 | ' 			hs = 0;
1e6d4                 | ' 			while (fs->lfnbuf[si] != 0) {
1e6d4                 | LR__3410
1e6d4     0C 22 06 F1 | 	add	local03, #12
1e6d8     11 25 02 FB | 	rdlong	local04, local03
1e6dc     0C 22 86 F1 | 	sub	local03, #12
1e6e0     14 2D 02 F6 | 	mov	local08, local06
1e6e4     01 2C 66 F0 | 	shl	local08, #1
1e6e8     12 2D 02 F1 | 	add	local08, local04
1e6ec     16 25 EA FA | 	rdword	local04, local08 wz
1e6f0     90 00 90 AD |  if_e	jmp	#LR__3412
1e6f4     0C 22 06 F1 | 	add	local03, #12
1e6f8     11 2F 02 FB | 	rdlong	local09, local03
1e6fc     0C 22 86 F1 | 	sub	local03, #12
1e700     14 31 02 F6 | 	mov	local10, local06
1e704     01 30 66 F0 | 	shl	local10, #1
1e708     17 31 02 F1 | 	add	local10, local09
1e70c     18 33 E2 FA | 	rdword	local11, local10
1e710     15 25 02 F6 | 	mov	local04, local07
1e714     0F 24 4E F7 | 	zerox	local04, #15 wz
1e718     01 28 06 F1 | 	add	local06, #1
1e71c     24 00 90 5D |  if_ne	jmp	#LR__3411
1e720     19 35 32 F9 | 	getword	local12, local11, #0
1e724     6C 00 00 FF 
1e728     00 34 16 F2 | 	cmp	local12, ##55296 wc
1e72c     14 00 90 CD |  if_b	jmp	#LR__3411
1e730     19 37 32 F9 | 	getword	local13, local11, #0
1e734     70 00 00 FF 
1e738     00 36 16 F2 | 	cmp	local13, ##57344 wc
1e73c     19 2B 02 C6 |  if_b	mov	local07, local11
1e740                 | ' 					hs = wc; continue;
1e740     90 FF 9F CD |  if_b	jmp	#LR__3410
1e744                 | LR__3411
1e744     15 13 32 F9 | 	getword	arg01, local07, #0
1e748     10 12 66 F0 | 	shl	arg01, #16
1e74c     19 33 32 F9 | 	getword	local11, local11, #0
1e750     19 13 42 F5 | 	or	arg01, local11
1e754     13 15 02 F6 | 	mov	arg02, local05
1e758     1C 20 06 F1 | 	add	local02, #28
1e75c     10 15 02 F1 | 	add	arg02, local02
1e760     FF 16 06 F6 | 	mov	arg03, #255
1e764     13 17 82 F1 | 	sub	arg03, local05
1e768     1C 20 86 F1 | 	sub	local02, #28
1e76c     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
1e770     FD 38 0A F6 | 	mov	local14, result1 wz
1e774     00 26 06 A6 |  if_e	mov	local05, #0
1e778     1C 27 02 51 |  if_ne	add	local05, local14
1e77c     00 2A 06 56 |  if_ne	mov	local07, #0
1e780     50 FF 9F 5D |  if_ne	jmp	#LR__3410
1e784                 | LR__3412
1e784     15 25 02 F6 | 	mov	local04, local07
1e788     0F 24 4E F7 | 	zerox	local04, #15 wz
1e78c     00 26 06 56 |  if_ne	mov	local05, #0
1e790     1C 20 06 F1 | 	add	local02, #28
1e794     10 27 02 F1 | 	add	local05, local02
1e798     13 01 48 FC | 	wrbyte	#0, local05
1e79c     1C 20 86 F1 | 	sub	local02, #28
1e7a0                 | LR__3413
1e7a0     00 26 06 F6 | 	mov	local05, #0
1e7a4     00 28 06 F6 | 	mov	local06, #0
1e7a8                 | ' 			fno->fname[di] = 0;
1e7a8                 | ' 		}
1e7a8                 | ' 	}
1e7a8                 | ' 
1e7a8                 | ' 	si = di = 0;
1e7a8                 | ' 	while (si < 11) {
1e7a8                 | LR__3414
1e7a8     0B 28 16 F2 | 	cmp	local06, #11 wc
1e7ac     20 01 90 3D |  if_ae	jmp	#LR__3417
1e7b0     1C 1E 06 F1 | 	add	local01, #28
1e7b4     0F 2F 02 FB | 	rdlong	local09, local01
1e7b8     1C 1E 86 F1 | 	sub	local01, #28
1e7bc     14 31 02 F6 | 	mov	local10, local06
1e7c0     17 31 02 F1 | 	add	local10, local09
1e7c4     18 33 C2 FA | 	rdbyte	local11, local10
1e7c8     19 25 32 F9 | 	getword	local04, local11, #0
1e7cc     20 24 0E F2 | 	cmp	local04, #32 wz
1e7d0     01 28 06 F1 | 	add	local06, #1
1e7d4     D0 FF 9F AD |  if_e	jmp	#LR__3414
1e7d8     19 25 32 F9 | 	getword	local04, local11, #0
1e7dc     05 24 0E F2 | 	cmp	local04, #5 wz
1e7e0     E5 32 06 A6 |  if_e	mov	local11, #229
1e7e4     09 28 0E F2 | 	cmp	local06, #9 wz
1e7e8     20 00 90 5D |  if_ne	jmp	#LR__3415
1e7ec     0C 26 16 F2 | 	cmp	local05, #12 wc
1e7f0     18 00 90 3D |  if_ae	jmp	#LR__3415
1e7f4     13 37 02 F6 | 	mov	local13, local05
1e7f8     0C 20 06 F1 | 	add	local02, #12
1e7fc     10 37 02 F1 | 	add	local13, local02
1e800     1B 5D 48 FC | 	wrbyte	#46, local13
1e804     01 26 06 F1 | 	add	local05, #1
1e808     0C 20 86 F1 | 	sub	local02, #12
1e80c                 | LR__3415
1e80c     19 13 32 F9 | 	getword	arg01, local11, #0
1e810     07 12 4E F7 | 	zerox	arg01, #7 wz
1e814     00 FA 05 56 |  if_ne	mov	result1, #0
1e818                 | ' 
1e818                 | ' 	return 0;
1e818     00 FA 05 A6 |  if_e	mov	result1, #0
1e81c     00 FA 0D F2 | 	cmp	result1, #0 wz
1e820     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
1e824     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
1e828     50 00 90 AD |  if_e	jmp	#LR__3416
1e82c     1C 1E 06 F1 | 	add	local01, #28
1e830     0F 31 02 FB | 	rdlong	local10, local01
1e834     1C 1E 86 F1 | 	sub	local01, #28
1e838     14 2D 02 F6 | 	mov	local08, local06
1e83c     18 2D 02 F1 | 	add	local08, local10
1e840     16 13 CA FA | 	rdbyte	arg01, local08 wz
1e844     00 FA 05 56 |  if_ne	mov	result1, #0
1e848                 | ' 
1e848                 | ' 	return 0;
1e848     00 FA 05 A6 |  if_e	mov	result1, #0
1e84c     00 FA 0D F2 | 	cmp	result1, #0 wz
1e850     28 00 90 AD |  if_e	jmp	#LR__3416
1e854     19 33 32 F9 | 	getword	local11, local11, #0
1e858     08 32 66 F0 | 	shl	local11, #8
1e85c     1C 1E 06 F1 | 	add	local01, #28
1e860     0F 39 02 FB | 	rdlong	local14, local01
1e864     1C 1E 86 F1 | 	sub	local01, #28
1e868     14 2F 02 F6 | 	mov	local09, local06
1e86c     1C 2F 02 F1 | 	add	local09, local14
1e870     17 35 C2 FA | 	rdbyte	local12, local09
1e874     1A 33 42 F5 | 	or	local11, local12
1e878     01 28 06 F1 | 	add	local06, #1
1e87c                 | LR__3416
1e87c     19 13 02 F6 | 	mov	arg01, local11
1e880     01 00 00 FF 
1e884     52 15 06 F6 | 	mov	arg02, ##850
1e888     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
1e88c     FD 32 02 F6 | 	mov	local11, result1
1e890     19 25 02 F6 | 	mov	local04, local11
1e894     0F 24 4E F7 | 	zerox	local04, #15 wz
1e898     00 26 06 A6 |  if_e	mov	local05, #0
1e89c     30 00 90 AD |  if_e	jmp	#LR__3417
1e8a0     19 13 32 F9 | 	getword	arg01, local11, #0
1e8a4     13 15 02 F6 | 	mov	arg02, local05
1e8a8     0C 20 06 F1 | 	add	local02, #12
1e8ac     10 15 02 F1 | 	add	arg02, local02
1e8b0     0C 16 06 F6 | 	mov	arg03, #12
1e8b4     13 17 82 F1 | 	sub	arg03, local05
1e8b8     0C 20 86 F1 | 	sub	local02, #12
1e8bc     EC DF BF FD | 	call	#_fatfs_cc_put_utf
1e8c0     FD 38 0A F6 | 	mov	local14, result1 wz
1e8c4     00 26 06 A6 |  if_e	mov	local05, #0
1e8c8     1C 27 02 51 |  if_ne	add	local05, local14
1e8cc     D8 FE 9F 5D |  if_ne	jmp	#LR__3414
1e8d0                 | LR__3417
1e8d0     13 25 02 F6 | 	mov	local04, local05
1e8d4     0C 20 06 F1 | 	add	local02, #12
1e8d8     10 25 02 F1 | 	add	local04, local02
1e8dc     12 01 48 FC | 	wrbyte	#0, local04
1e8e0     10 20 06 F1 | 	add	local02, #16
1e8e4     10 25 CA FA | 	rdbyte	local04, local02 wz
1e8e8     1C 20 86 F1 | 	sub	local02, #28
1e8ec     F8 00 90 5D |  if_ne	jmp	#LR__3423
1e8f0     00 26 0E F2 | 	cmp	local05, #0 wz
1e8f4     1C 00 90 5D |  if_ne	jmp	#LR__3418
1e8f8     13 37 02 F6 | 	mov	local13, local05
1e8fc     1C 20 06 F1 | 	add	local02, #28
1e900     10 37 02 F1 | 	add	local13, local02
1e904     1B 7F 48 FC | 	wrbyte	#63, local13
1e908     01 26 06 F1 | 	add	local05, #1
1e90c     1C 20 86 F1 | 	sub	local02, #28
1e910     A4 00 90 FD | 	jmp	#LR__3422
1e914                 | LR__3418
1e914                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
1e914     00 26 06 F6 | 	mov	local05, #0
1e918     00 28 06 F6 | 	mov	local06, #0
1e91c     08 3A 06 F6 | 	mov	local15, #8
1e920                 | LR__3419
1e920     14 25 02 F6 | 	mov	local04, local06
1e924     0C 20 06 F1 | 	add	local02, #12
1e928     10 25 02 F1 | 	add	local04, local02
1e92c     12 37 CA FA | 	rdbyte	local13, local04 wz
1e930     0C 20 86 F1 | 	sub	local02, #12
1e934     80 00 90 AD |  if_e	jmp	#LR__3421
1e938     14 2D 02 F6 | 	mov	local08, local06
1e93c     0C 20 06 F1 | 	add	local02, #12
1e940     10 2D 02 F1 | 	add	local08, local02
1e944     16 33 C2 FA | 	rdbyte	local11, local08
1e948     19 39 32 F9 | 	getword	local14, local11, #0
1e94c     2E 38 0E F2 | 	cmp	local14, #46 wz
1e950     0C 20 86 F1 | 	sub	local02, #12
1e954     10 3A 06 A6 |  if_e	mov	local15, #16
1e958     19 39 32 F9 | 	getword	local14, local11, #0
1e95c     41 38 16 F2 | 	cmp	local14, #65 wc
1e960     30 00 90 CD |  if_b	jmp	#LR__3420
1e964     19 2D 32 F9 | 	getword	local08, local11, #0
1e968     5B 2C 16 F2 | 	cmp	local08, #91 wc
1e96c     24 00 90 3D |  if_ae	jmp	#LR__3420
1e970     1C 1E 06 F1 | 	add	local01, #28
1e974     0F 2F 02 FB | 	rdlong	local09, local01
1e978     1C 1E 86 F1 | 	sub	local01, #28
1e97c     0C 2E 06 F1 | 	add	local09, #12
1e980     17 31 C2 FA | 	rdbyte	local10, local09
1e984     1D 39 E2 F8 | 	getbyte	local14, local15, #0
1e988     1C 31 CA F7 | 	test	local10, local14 wz
1e98c     19 33 32 59 |  if_ne	getword	local11, local11, #0
1e990     20 32 06 51 |  if_ne	add	local11, #32
1e994                 | LR__3420
1e994     13 39 02 F6 | 	mov	local14, local05
1e998     1C 20 06 F1 | 	add	local02, #28
1e99c     10 39 02 F1 | 	add	local14, local02
1e9a0     19 33 32 F9 | 	getword	local11, local11, #0
1e9a4     1C 33 42 FC | 	wrbyte	local11, local14
1e9a8     01 28 06 F1 | 	add	local06, #1
1e9ac     01 26 06 F1 | 	add	local05, #1
1e9b0     1C 20 86 F1 | 	sub	local02, #28
1e9b4     68 FF 9F FD | 	jmp	#LR__3419
1e9b8                 | LR__3421
1e9b8                 | LR__3422
1e9b8     1C 20 06 F1 | 	add	local02, #28
1e9bc     10 27 02 F1 | 	add	local05, local02
1e9c0     13 01 48 FC | 	wrbyte	#0, local05
1e9c4     1C 1E 06 F1 | 	add	local01, #28
1e9c8     0F 25 02 FB | 	rdlong	local04, local01
1e9cc     1C 1E 86 F1 | 	sub	local01, #28
1e9d0     0C 24 06 F1 | 	add	local04, #12
1e9d4     12 37 CA FA | 	rdbyte	local13, local04 wz
1e9d8     1C 20 86 F1 | 	sub	local02, #28
1e9dc     0C 20 06 A1 |  if_e	add	local02, #12
1e9e0     10 01 48 AC |  if_e	wrbyte	#0, local02
1e9e4     0C 20 86 A1 |  if_e	sub	local02, #12
1e9e8                 | LR__3423
1e9e8     1C 1E 06 F1 | 	add	local01, #28
1e9ec     0F 35 02 FB | 	rdlong	local12, local01
1e9f0     0B 34 06 F1 | 	add	local12, #11
1e9f4     1A 25 C2 FA | 	rdbyte	local04, local12
1e9f8     3F 24 06 F5 | 	and	local04, #63
1e9fc     08 20 06 F1 | 	add	local02, #8
1ea00     10 25 42 FC | 	wrbyte	local04, local02
1ea04     08 20 86 F1 | 	sub	local02, #8
1ea08     0F 13 02 FB | 	rdlong	arg01, local01
1ea0c     1C 12 06 F1 | 	add	arg01, #28
1ea10                 | ' {
1ea10                 | ' 
1ea10                 | ' 	return *((DWORD*)ptr);
1ea10     09 FB 01 FB | 	rdlong	result1, arg01
1ea14     10 FB 61 FC | 	wrlong	result1, local02
1ea18     0F 13 02 FB | 	rdlong	arg01, local01
1ea1c     16 12 06 F1 | 	add	arg01, #22
1ea20                 | ' {
1ea20                 | ' 
1ea20                 | ' 	return *((WORD*)ptr);
1ea20     09 FB E1 FA | 	rdword	result1, arg01
1ea24     06 20 06 F1 | 	add	local02, #6
1ea28     10 FB 51 FC | 	wrword	result1, local02
1ea2c     0F 13 02 FB | 	rdlong	arg01, local01
1ea30     18 12 06 F1 | 	add	arg01, #24
1ea34                 | ' {
1ea34                 | ' 
1ea34                 | ' 	return *((WORD*)ptr);
1ea34     09 FB E1 FA | 	rdword	result1, arg01
1ea38     02 20 86 F1 | 	sub	local02, #2
1ea3c     10 FB 51 FC | 	wrword	result1, local02
1ea40                 | LR__3424
1ea40     A7 F0 03 F6 | 	mov	ptra, fp
1ea44     B2 00 A0 FD | 	call	#popregs_
1ea48                 | _fatfs_cc_get_fileinfo_ret
1ea48     2D 00 64 FD | 	ret
1ea4c                 | 
1ea4c                 | _fatfs_cc_create_name
1ea4c     0D 4A 05 F6 | 	mov	COUNT_, #13
1ea50     A8 00 A0 FD | 	call	#pushregs_
1ea54     34 F0 07 F1 | 	add	ptra, #52
1ea58     04 4E 05 F1 | 	add	fp, #4
1ea5c     A7 12 62 FC | 	wrlong	arg01, fp
1ea60     04 4E 05 F1 | 	add	fp, #4
1ea64     A7 14 62 FC | 	wrlong	arg02, fp
1ea68     0A FB 01 FB | 	rdlong	result1, arg02
1ea6c     28 4E 05 F1 | 	add	fp, #40
1ea70     A7 FA 61 FC | 	wrlong	result1, fp
1ea74     2C 4E 85 F1 | 	sub	fp, #44
1ea78     A7 FA 01 FB | 	rdlong	result1, fp
1ea7c     FD 1E 02 FB | 	rdlong	local01, result1
1ea80     0C 1E 06 F1 | 	add	local01, #12
1ea84     0F 21 02 FB | 	rdlong	local02, local01
1ea88     14 4E 05 F1 | 	add	fp, #20
1ea8c     A7 20 62 FC | 	wrlong	local02, fp
1ea90     14 4E 05 F1 | 	add	fp, #20
1ea94     A7 00 68 FC | 	wrlong	#0, fp
1ea98     2C 4E 85 F1 | 	sub	fp, #44
1ea9c                 | ' 
1ea9c                 | ' 
1ea9c                 | ' 
1ea9c                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
1ea9c                 | ' 	for (;;) {
1ea9c                 | LR__3430
1ea9c     30 4E 05 F1 | 	add	fp, #48
1eaa0     A7 12 02 F6 | 	mov	arg01, fp
1eaa4     30 4E 85 F1 | 	sub	fp, #48
1eaa8     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
1eaac     1C 4E 05 F1 | 	add	fp, #28
1eab0     A7 FA 61 FC | 	wrlong	result1, fp
1eab4     1C 4E 85 F1 | 	sub	fp, #28
1eab8     FF FF 7F FF 
1eabc     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1eac0     06 FA 05 A6 |  if_e	mov	result1, #6
1eac4     74 08 90 AD |  if_e	jmp	#LR__3470
1eac8     1C 4E 05 F1 | 	add	fp, #28
1eacc     A7 1E 02 FB | 	rdlong	local01, fp
1ead0     1C 4E 85 F1 | 	sub	fp, #28
1ead4     80 00 00 FF 
1ead8     00 1E 16 F2 | 	cmp	local01, ##65536 wc
1eadc     3C 00 90 CD |  if_b	jmp	#LR__3431
1eae0     18 4E 05 F1 | 	add	fp, #24
1eae4     A7 22 02 FB | 	rdlong	local03, fp
1eae8     14 4E 05 F1 | 	add	fp, #20
1eaec     A7 1E 02 FB | 	rdlong	local01, fp
1eaf0     0F 25 02 F6 | 	mov	local04, local01
1eaf4     01 24 06 F1 | 	add	local04, #1
1eaf8     A7 24 62 FC | 	wrlong	local04, fp
1eafc     01 1E 66 F0 | 	shl	local01, #1
1eb00     11 1F 02 F1 | 	add	local01, local03
1eb04     10 4E 85 F1 | 	sub	fp, #16
1eb08     A7 26 02 FB | 	rdlong	local05, fp
1eb0c     1C 4E 85 F1 | 	sub	fp, #28
1eb10     13 29 02 F6 | 	mov	local06, local05
1eb14     10 28 46 F0 | 	shr	local06, #16
1eb18     0F 29 52 FC | 	wrword	local06, local01
1eb1c                 | LR__3431
1eb1c     1C 4E 05 F1 | 	add	fp, #28
1eb20     A7 1E 02 FB | 	rdlong	local01, fp
1eb24     08 4E 85 F1 | 	sub	fp, #8
1eb28     A7 1E 52 FC | 	wrword	local01, fp
1eb2c     A7 1E E2 FA | 	rdword	local01, fp
1eb30     14 4E 85 F1 | 	sub	fp, #20
1eb34     20 1E 16 F2 | 	cmp	local01, #32 wc
1eb38     B0 00 90 CD |  if_b	jmp	#LR__3433
1eb3c     14 4E 05 F1 | 	add	fp, #20
1eb40     A7 1E E2 FA | 	rdword	local01, fp
1eb44     14 4E 85 F1 | 	sub	fp, #20
1eb48     2F 1E 0E F2 | 	cmp	local01, #47 wz
1eb4c     14 4E 05 51 |  if_ne	add	fp, #20
1eb50     A7 24 E2 5A |  if_ne	rdword	local04, fp
1eb54     14 4E 85 51 |  if_ne	sub	fp, #20
1eb58     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
1eb5c     8C 00 90 AD |  if_e	jmp	#LR__3433
1eb60     14 4E 05 F1 | 	add	fp, #20
1eb64     A7 12 E2 FA | 	rdword	arg01, fp
1eb68     14 4E 85 F1 | 	sub	fp, #20
1eb6c     80 12 16 F2 | 	cmp	arg01, #128 wc
1eb70     24 00 90 3D |  if_ae	jmp	#LR__3432
1eb74     25 01 00 FF 
1eb78     AC 12 06 F6 | 	mov	arg01, ##@LR__4092
1eb7c     14 4E 05 F1 | 	add	fp, #20
1eb80     A7 14 E2 FA | 	rdword	arg02, fp
1eb84     14 4E 85 F1 | 	sub	fp, #20
1eb88     FC D0 BF FD | 	call	#_fatfs_cc_strchr
1eb8c     00 FA 0D F2 | 	cmp	result1, #0 wz
1eb90     06 FA 05 56 |  if_ne	mov	result1, #6
1eb94     A4 07 90 5D |  if_ne	jmp	#LR__3470
1eb98                 | LR__3432
1eb98     2C 4E 05 F1 | 	add	fp, #44
1eb9c     A7 28 02 FB | 	rdlong	local06, fp
1eba0     2C 4E 85 F1 | 	sub	fp, #44
1eba4     FF 28 16 F2 | 	cmp	local06, #255 wc
1eba8     06 FA 05 36 |  if_ae	mov	result1, #6
1ebac     8C 07 90 3D |  if_ae	jmp	#LR__3470
1ebb0     18 4E 05 F1 | 	add	fp, #24
1ebb4     A7 22 02 FB | 	rdlong	local03, fp
1ebb8     14 4E 05 F1 | 	add	fp, #20
1ebbc     A7 20 02 FB | 	rdlong	local02, fp
1ebc0     10 25 02 F6 | 	mov	local04, local02
1ebc4     01 24 06 F1 | 	add	local04, #1
1ebc8     A7 24 62 FC | 	wrlong	local04, fp
1ebcc     10 1F 02 F6 | 	mov	local01, local02
1ebd0     01 1E 66 F0 | 	shl	local01, #1
1ebd4     11 1F 02 F1 | 	add	local01, local03
1ebd8     18 4E 85 F1 | 	sub	fp, #24
1ebdc     A7 28 E2 FA | 	rdword	local06, fp
1ebe0     14 4E 85 F1 | 	sub	fp, #20
1ebe4     0F 29 52 FC | 	wrword	local06, local01
1ebe8     B0 FE 9F FD | 	jmp	#LR__3430
1ebec                 | LR__3433
1ebec     14 4E 05 F1 | 	add	fp, #20
1ebf0     A7 2A E2 FA | 	rdword	local07, fp
1ebf4     14 4E 85 F1 | 	sub	fp, #20
1ebf8     20 2A 16 F2 | 	cmp	local07, #32 wc
1ebfc     10 4E 05 C1 |  if_b	add	fp, #16
1ec00     A7 08 48 CC |  if_b	wrbyte	#4, fp
1ec04     10 4E 85 C1 |  if_b	sub	fp, #16
1ec08     74 00 90 CD |  if_b	jmp	#LR__3438
1ec0c     97 24 48 FB | 	callpa	#(@LR__3436-@LR__3434)>>2,fcache_load_ptr_
1ec10                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
1ec10                 | LR__3434
1ec10     30 4E 05 F1 | 	add	fp, #48
1ec14     A7 24 02 FB | 	rdlong	local04, fp
1ec18     30 4E 85 F1 | 	sub	fp, #48
1ec1c     12 2B C2 FA | 	rdbyte	local07, local04
1ec20     2F 2A 0E F2 | 	cmp	local07, #47 wz
1ec24     18 00 90 AD |  if_e	jmp	#LR__3435
1ec28     30 4E 05 F1 | 	add	fp, #48
1ec2c     A7 24 02 FB | 	rdlong	local04, fp
1ec30     30 4E 85 F1 | 	sub	fp, #48
1ec34     12 21 C2 FA | 	rdbyte	local02, local04
1ec38     5C 20 0E F2 | 	cmp	local02, #92 wz
1ec3c     18 00 90 5D |  if_ne	jmp	#LR__3437
1ec40                 | LR__3435
1ec40     30 4E 05 F1 | 	add	fp, #48
1ec44     A7 1E 02 FB | 	rdlong	local01, fp
1ec48     01 1E 06 F1 | 	add	local01, #1
1ec4c     A7 1E 62 FC | 	wrlong	local01, fp
1ec50     30 4E 85 F1 | 	sub	fp, #48
1ec54     B8 FF 9F FD | 	jmp	#LR__3434
1ec58                 | LR__3436
1ec58                 | LR__3437
1ec58     10 4E 05 F1 | 	add	fp, #16
1ec5c     A7 00 48 FC | 	wrbyte	#0, fp
1ec60     20 4E 05 F1 | 	add	fp, #32
1ec64     A7 28 02 FB | 	rdlong	local06, fp
1ec68     30 4E 85 F1 | 	sub	fp, #48
1ec6c     14 2B C2 FA | 	rdbyte	local07, local06
1ec70     20 2A 16 F2 | 	cmp	local07, #32 wc
1ec74     10 4E 05 C1 |  if_b	add	fp, #16
1ec78     A7 08 48 CC |  if_b	wrbyte	#4, fp
1ec7c     10 4E 85 C1 |  if_b	sub	fp, #16
1ec80                 | LR__3438
1ec80     08 4E 05 F1 | 	add	fp, #8
1ec84     A7 2A 02 FB | 	rdlong	local07, fp
1ec88     28 4E 05 F1 | 	add	fp, #40
1ec8c     A7 1E 02 FB | 	rdlong	local01, fp
1ec90     30 4E 85 F1 | 	sub	fp, #48
1ec94     15 1F 62 FC | 	wrlong	local01, local07
1ec98     97 38 48 FB | 	callpa	#(@LR__3440-@LR__3439)>>2,fcache_load_ptr_
1ec9c                 | ' 	}
1ec9c                 | ' 	*path = p;
1ec9c                 | ' #line 2862 "ff.c"
1ec9c                 | ' 	while (di) {
1ec9c                 | LR__3439
1ec9c     2C 4E 05 F1 | 	add	fp, #44
1eca0     A7 2A 0A FB | 	rdlong	local07, fp wz
1eca4     2C 4E 85 F1 | 	sub	fp, #44
1eca8     60 00 90 AD |  if_e	jmp	#LR__3441
1ecac     18 4E 05 F1 | 	add	fp, #24
1ecb0     A7 28 02 FB | 	rdlong	local06, fp
1ecb4     14 4E 05 F1 | 	add	fp, #20
1ecb8     A7 24 02 FB | 	rdlong	local04, fp
1ecbc     01 24 86 F1 | 	sub	local04, #1
1ecc0     01 24 66 F0 | 	shl	local04, #1
1ecc4     14 25 02 F1 | 	add	local04, local06
1ecc8     12 29 E2 FA | 	rdword	local06, local04
1eccc     18 4E 85 F1 | 	sub	fp, #24
1ecd0     A7 28 52 FC | 	wrword	local06, fp
1ecd4     A7 2A E2 FA | 	rdword	local07, fp
1ecd8     14 4E 85 F1 | 	sub	fp, #20
1ecdc     20 2A 0E F2 | 	cmp	local07, #32 wz
1ece0     14 4E 05 51 |  if_ne	add	fp, #20
1ece4     A7 1E E2 5A |  if_ne	rdword	local01, fp
1ece8     14 4E 85 51 |  if_ne	sub	fp, #20
1ecec     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
1ecf0     18 00 90 5D |  if_ne	jmp	#LR__3441
1ecf4     2C 4E 05 F1 | 	add	fp, #44
1ecf8     A7 1E 02 FB | 	rdlong	local01, fp
1ecfc     01 1E 86 F1 | 	sub	local01, #1
1ed00     A7 1E 62 FC | 	wrlong	local01, fp
1ed04     2C 4E 85 F1 | 	sub	fp, #44
1ed08     90 FF 9F FD | 	jmp	#LR__3439
1ed0c                 | LR__3440
1ed0c                 | LR__3441
1ed0c     18 4E 05 F1 | 	add	fp, #24
1ed10     A7 2C 02 FB | 	rdlong	local08, fp
1ed14     14 4E 05 F1 | 	add	fp, #20
1ed18     A7 24 02 FB | 	rdlong	local04, fp
1ed1c     01 24 66 F0 | 	shl	local04, #1
1ed20     16 25 02 F1 | 	add	local04, local08
1ed24     12 01 58 FC | 	wrword	#0, local04
1ed28     A7 2A 0A FB | 	rdlong	local07, fp wz
1ed2c     2C 4E 85 F1 | 	sub	fp, #44
1ed30     06 FA 05 A6 |  if_e	mov	result1, #6
1ed34     04 06 90 AD |  if_e	jmp	#LR__3470
1ed38                 | ' 
1ed38                 | ' 
1ed38                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
1ed38     28 4E 05 F1 | 	add	fp, #40
1ed3c     A7 00 68 FC | 	wrlong	#0, fp
1ed40     28 4E 85 F1 | 	sub	fp, #40
1ed44     97 22 48 FB | 	callpa	#(@LR__3443-@LR__3442)>>2,fcache_load_ptr_
1ed48                 | LR__3442
1ed48     18 4E 05 F1 | 	add	fp, #24
1ed4c     A7 2E 02 FB | 	rdlong	local09, fp
1ed50     10 4E 05 F1 | 	add	fp, #16
1ed54     A7 30 02 FB | 	rdlong	local10, fp
1ed58     28 4E 85 F1 | 	sub	fp, #40
1ed5c     01 30 66 F0 | 	shl	local10, #1
1ed60     17 31 02 F1 | 	add	local10, local09
1ed64     18 33 E2 FA | 	rdword	local11, local10
1ed68     20 32 0E F2 | 	cmp	local11, #32 wz
1ed6c     1C 00 90 5D |  if_ne	jmp	#LR__3444
1ed70     28 4E 05 F1 | 	add	fp, #40
1ed74     A7 34 02 FB | 	rdlong	local12, fp
1ed78     1A 27 02 F6 | 	mov	local05, local12
1ed7c     01 26 06 F1 | 	add	local05, #1
1ed80     A7 26 62 FC | 	wrlong	local05, fp
1ed84     28 4E 85 F1 | 	sub	fp, #40
1ed88     BC FF 9F FD | 	jmp	#LR__3442
1ed8c                 | LR__3443
1ed8c                 | LR__3444
1ed8c     28 4E 05 F1 | 	add	fp, #40
1ed90     A7 2A 02 FB | 	rdlong	local07, fp
1ed94     28 4E 85 F1 | 	sub	fp, #40
1ed98     01 2A 16 F2 | 	cmp	local07, #1 wc
1ed9c     28 00 90 3D |  if_ae	jmp	#LR__3445
1eda0     18 4E 05 F1 | 	add	fp, #24
1eda4     A7 22 02 FB | 	rdlong	local03, fp
1eda8     10 4E 05 F1 | 	add	fp, #16
1edac     A7 2E 02 FB | 	rdlong	local09, fp
1edb0     28 4E 85 F1 | 	sub	fp, #40
1edb4     01 2E 66 F0 | 	shl	local09, #1
1edb8     11 2F 02 F1 | 	add	local09, local03
1edbc     17 1F E2 FA | 	rdword	local01, local09
1edc0     2E 1E 0E F2 | 	cmp	local01, #46 wz
1edc4     14 00 90 5D |  if_ne	jmp	#LR__3446
1edc8                 | LR__3445
1edc8     10 4E 05 F1 | 	add	fp, #16
1edcc     A7 2A C2 FA | 	rdbyte	local07, fp
1edd0     03 2A 46 F5 | 	or	local07, #3
1edd4     A7 2A 42 FC | 	wrbyte	local07, fp
1edd8     10 4E 85 F1 | 	sub	fp, #16
1eddc                 | LR__3446
1eddc     97 2C 48 FB | 	callpa	#(@LR__3448-@LR__3447)>>2,fcache_load_ptr_
1ede0                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
1ede0                 | LR__3447
1ede0     2C 4E 05 F1 | 	add	fp, #44
1ede4     A7 2A 02 FB | 	rdlong	local07, fp
1ede8     2C 4E 85 F1 | 	sub	fp, #44
1edec     01 2A 16 F2 | 	cmp	local07, #1 wc
1edf0     44 00 90 CD |  if_b	jmp	#LR__3449
1edf4     18 4E 05 F1 | 	add	fp, #24
1edf8     A7 28 02 FB | 	rdlong	local06, fp
1edfc     14 4E 05 F1 | 	add	fp, #20
1ee00     A7 22 02 FB | 	rdlong	local03, fp
1ee04     2C 4E 85 F1 | 	sub	fp, #44
1ee08     01 22 86 F1 | 	sub	local03, #1
1ee0c     01 22 66 F0 | 	shl	local03, #1
1ee10     14 23 02 F1 | 	add	local03, local06
1ee14     11 1F E2 FA | 	rdword	local01, local03
1ee18     2E 1E 0E F2 | 	cmp	local01, #46 wz
1ee1c     18 00 90 AD |  if_e	jmp	#LR__3449
1ee20     2C 4E 05 F1 | 	add	fp, #44
1ee24     A7 1E 02 FB | 	rdlong	local01, fp
1ee28     01 1E 86 F1 | 	sub	local01, #1
1ee2c     A7 1E 62 FC | 	wrlong	local01, fp
1ee30     2C 4E 85 F1 | 	sub	fp, #44
1ee34     A8 FF 9F FD | 	jmp	#LR__3447
1ee38                 | LR__3448
1ee38                 | LR__3449
1ee38     04 4E 05 F1 | 	add	fp, #4
1ee3c     A7 12 02 FB | 	rdlong	arg01, fp
1ee40     04 4E 85 F1 | 	sub	fp, #4
1ee44     20 12 06 F1 | 	add	arg01, #32
1ee48     20 14 06 F6 | 	mov	arg02, #32
1ee4c     0B 16 06 F6 | 	mov	arg03, #11
1ee50     09 37 02 F6 | 	mov	local13, arg01
1ee54     98 00 A0 FD | 	call	#\builtin_bytefill_
1ee58     1B FB 01 F6 | 	mov	result1, local13
1ee5c     0C 4E 05 F1 | 	add	fp, #12
1ee60     A7 00 48 FC | 	wrbyte	#0, fp
1ee64     A7 2A C2 FA | 	rdbyte	local07, fp
1ee68     14 4E 05 F1 | 	add	fp, #20
1ee6c     A7 2A 62 FC | 	wrlong	local07, fp
1ee70     04 4E 05 F1 | 	add	fp, #4
1ee74     A7 10 68 FC | 	wrlong	#8, fp
1ee78     24 4E 85 F1 | 	sub	fp, #36
1ee7c                 | ' 
1ee7c                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
1ee7c                 | ' 	i = b = 0; ni = 8;
1ee7c                 | ' 	for (;;) {
1ee7c                 | LR__3450
1ee7c     18 4E 05 F1 | 	add	fp, #24
1ee80     A7 22 02 FB | 	rdlong	local03, fp
1ee84     10 4E 05 F1 | 	add	fp, #16
1ee88     A7 2E 02 FB | 	rdlong	local09, fp
1ee8c     17 25 02 F6 | 	mov	local04, local09
1ee90     01 24 06 F1 | 	add	local04, #1
1ee94     A7 24 62 FC | 	wrlong	local04, fp
1ee98     01 2E 66 F0 | 	shl	local09, #1
1ee9c     11 2F 02 F1 | 	add	local09, local03
1eea0     17 29 E2 FA | 	rdword	local06, local09
1eea4     14 4E 85 F1 | 	sub	fp, #20
1eea8     A7 28 52 FC | 	wrword	local06, fp
1eeac     A7 2A EA FA | 	rdword	local07, fp wz
1eeb0     14 4E 85 F1 | 	sub	fp, #20
1eeb4     74 03 90 AD |  if_e	jmp	#LR__3466
1eeb8     14 4E 05 F1 | 	add	fp, #20
1eebc     A7 2A E2 FA | 	rdword	local07, fp
1eec0     14 4E 85 F1 | 	sub	fp, #20
1eec4     20 2A 0E F2 | 	cmp	local07, #32 wz
1eec8     30 00 90 AD |  if_e	jmp	#LR__3451
1eecc     14 4E 05 F1 | 	add	fp, #20
1eed0     A7 1E E2 FA | 	rdword	local01, fp
1eed4     14 4E 85 F1 | 	sub	fp, #20
1eed8     2E 1E 0E F2 | 	cmp	local01, #46 wz
1eedc     34 00 90 5D |  if_ne	jmp	#LR__3452
1eee0     28 4E 05 F1 | 	add	fp, #40
1eee4     A7 24 02 FB | 	rdlong	local04, fp
1eee8     04 4E 05 F1 | 	add	fp, #4
1eeec     A7 30 02 FB | 	rdlong	local10, fp
1eef0     2C 4E 85 F1 | 	sub	fp, #44
1eef4     18 25 0A F2 | 	cmp	local04, local10 wz
1eef8     18 00 90 AD |  if_e	jmp	#LR__3452
1eefc                 | LR__3451
1eefc     10 4E 05 F1 | 	add	fp, #16
1ef00     A7 2A C2 FA | 	rdbyte	local07, fp
1ef04     03 2A 46 F5 | 	or	local07, #3
1ef08     A7 2A 42 FC | 	wrbyte	local07, fp
1ef0c     10 4E 85 F1 | 	sub	fp, #16
1ef10                 | ' 			cf |=  0x01  |  0x02 ;
1ef10                 | ' 			continue;
1ef10     68 FF 9F FD | 	jmp	#LR__3450
1ef14                 | LR__3452
1ef14     20 4E 05 F1 | 	add	fp, #32
1ef18     A7 2A 02 FB | 	rdlong	local07, fp
1ef1c     04 4E 05 F1 | 	add	fp, #4
1ef20     A7 1E 02 FB | 	rdlong	local01, fp
1ef24     24 4E 85 F1 | 	sub	fp, #36
1ef28     0F 2B 12 F2 | 	cmp	local07, local01 wc
1ef2c     1C 00 90 3D |  if_ae	jmp	#LR__3453
1ef30     28 4E 05 F1 | 	add	fp, #40
1ef34     A7 2C 02 FB | 	rdlong	local08, fp
1ef38     04 4E 05 F1 | 	add	fp, #4
1ef3c     A7 30 02 FB | 	rdlong	local10, fp
1ef40     2C 4E 85 F1 | 	sub	fp, #44
1ef44     18 2D 0A F2 | 	cmp	local08, local10 wz
1ef48     B0 00 90 5D |  if_ne	jmp	#LR__3455
1ef4c                 | LR__3453
1ef4c     24 4E 05 F1 | 	add	fp, #36
1ef50     A7 2A 02 FB | 	rdlong	local07, fp
1ef54     24 4E 85 F1 | 	sub	fp, #36
1ef58     0B 2A 0E F2 | 	cmp	local07, #11 wz
1ef5c     18 00 90 5D |  if_ne	jmp	#LR__3454
1ef60     10 4E 05 F1 | 	add	fp, #16
1ef64     A7 2A C2 FA | 	rdbyte	local07, fp
1ef68     03 2A 46 F5 | 	or	local07, #3
1ef6c     A7 2A 42 FC | 	wrbyte	local07, fp
1ef70     10 4E 85 F1 | 	sub	fp, #16
1ef74                 | ' 				cf |=  0x01  |  0x02 ;
1ef74                 | ' 				break;
1ef74     B4 02 90 FD | 	jmp	#LR__3466
1ef78                 | LR__3454
1ef78     28 4E 05 F1 | 	add	fp, #40
1ef7c     A7 2A 02 FB | 	rdlong	local07, fp
1ef80     04 4E 05 F1 | 	add	fp, #4
1ef84     A7 1E 02 FB | 	rdlong	local01, fp
1ef88     2C 4E 85 F1 | 	sub	fp, #44
1ef8c     0F 2B 0A F2 | 	cmp	local07, local01 wz
1ef90     10 4E 05 51 |  if_ne	add	fp, #16
1ef94     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
1ef98     03 2A 46 55 |  if_ne	or	local07, #3
1ef9c     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
1efa0     10 4E 85 51 |  if_ne	sub	fp, #16
1efa4     28 4E 05 F1 | 	add	fp, #40
1efa8     A7 2A 02 FB | 	rdlong	local07, fp
1efac     04 4E 05 F1 | 	add	fp, #4
1efb0     A7 20 02 FB | 	rdlong	local02, fp
1efb4     2C 4E 85 F1 | 	sub	fp, #44
1efb8     10 2B 1A F2 | 	cmp	local07, local02 wcz
1efbc     6C 02 90 1D |  if_a	jmp	#LR__3466
1efc0     2C 4E 05 F1 | 	add	fp, #44
1efc4     A7 2A 02 FB | 	rdlong	local07, fp
1efc8     04 4E 85 F1 | 	sub	fp, #4
1efcc     A7 2A 62 FC | 	wrlong	local07, fp
1efd0     08 4E 85 F1 | 	sub	fp, #8
1efd4     A7 10 68 FC | 	wrlong	#8, fp
1efd8     04 4E 05 F1 | 	add	fp, #4
1efdc     A7 16 68 FC | 	wrlong	#11, fp
1efe0     18 4E 85 F1 | 	sub	fp, #24
1efe4     A7 32 C2 FA | 	rdbyte	local11, fp
1efe8     19 2B E2 F8 | 	getbyte	local07, local11, #0
1efec     02 2A 66 F0 | 	shl	local07, #2
1eff0     A7 2A 42 FC | 	wrbyte	local07, fp
1eff4     0C 4E 85 F1 | 	sub	fp, #12
1eff8                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
1eff8                 | ' 			continue;
1eff8     80 FE 9F FD | 	jmp	#LR__3450
1effc                 | LR__3455
1effc     14 4E 05 F1 | 	add	fp, #20
1f000     A7 2A E2 FA | 	rdword	local07, fp
1f004     14 4E 85 F1 | 	sub	fp, #20
1f008     80 2A 16 F2 | 	cmp	local07, #128 wc
1f00c     6C 00 90 CD |  if_b	jmp	#LR__3457
1f010     10 4E 05 F1 | 	add	fp, #16
1f014     A7 2A C2 FA | 	rdbyte	local07, fp
1f018     02 2A 46 F5 | 	or	local07, #2
1f01c     A7 2A 42 FC | 	wrbyte	local07, fp
1f020     04 4E 05 F1 | 	add	fp, #4
1f024     A7 12 E2 FA | 	rdword	arg01, fp
1f028     14 4E 85 F1 | 	sub	fp, #20
1f02c     01 00 00 FF 
1f030     52 15 06 F6 | 	mov	arg02, ##850
1f034     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
1f038     14 4E 05 F1 | 	add	fp, #20
1f03c     A7 FA 51 FC | 	wrword	result1, fp
1f040     A7 2A E2 FA | 	rdword	local07, fp
1f044     14 4E 85 F1 | 	sub	fp, #20
1f048     80 2A CE F7 | 	test	local07, #128 wz
1f04c     2C 00 90 AD |  if_e	jmp	#LR__3456
1f050     14 4E 05 F1 | 	add	fp, #20
1f054     A7 20 E2 FA | 	rdword	local02, fp
1f058     7F 20 06 F5 | 	and	local02, #127
1f05c     01 00 00 FF 
1f060     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
1f064     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
1f068     10 2B C2 FA | 	rdbyte	local07, local02
1f06c     A7 2A 52 FC | 	wrword	local07, fp
1f070     14 4E 85 F1 | 	sub	fp, #20
1f074     01 00 00 FF 
1f078     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
1f07c                 | LR__3456
1f07c                 | LR__3457
1f07c     14 4E 05 F1 | 	add	fp, #20
1f080     A7 2A E2 FA | 	rdword	local07, fp
1f084     14 4E 85 F1 | 	sub	fp, #20
1f088     00 2B 16 F2 | 	cmp	local07, #256 wc
1f08c     88 00 90 CD |  if_b	jmp	#LR__3459
1f090     24 4E 05 F1 | 	add	fp, #36
1f094     A7 2A 02 FB | 	rdlong	local07, fp
1f098     01 2A 86 F1 | 	sub	local07, #1
1f09c     04 4E 85 F1 | 	sub	fp, #4
1f0a0     A7 20 02 FB | 	rdlong	local02, fp
1f0a4     20 4E 85 F1 | 	sub	fp, #32
1f0a8     15 21 12 F2 | 	cmp	local02, local07 wc
1f0ac     2C 00 90 CD |  if_b	jmp	#LR__3458
1f0b0     10 4E 05 F1 | 	add	fp, #16
1f0b4     A7 32 C2 FA | 	rdbyte	local11, fp
1f0b8     19 2B E2 F8 | 	getbyte	local07, local11, #0
1f0bc     03 2A 46 F5 | 	or	local07, #3
1f0c0     A7 2A 42 FC | 	wrbyte	local07, fp
1f0c4     14 4E 05 F1 | 	add	fp, #20
1f0c8     A7 2A 02 FB | 	rdlong	local07, fp
1f0cc     04 4E 85 F1 | 	sub	fp, #4
1f0d0     A7 2A 62 FC | 	wrlong	local07, fp
1f0d4     20 4E 85 F1 | 	sub	fp, #32
1f0d8                 | ' 				cf |=  0x01  |  0x02 ;
1f0d8                 | ' 				i = ni; continue;
1f0d8     A0 FD 9F FD | 	jmp	#LR__3450
1f0dc                 | LR__3458
1f0dc     04 4E 05 F1 | 	add	fp, #4
1f0e0     A7 2E 02 FB | 	rdlong	local09, fp
1f0e4     1C 4E 05 F1 | 	add	fp, #28
1f0e8     A7 30 02 FB | 	rdlong	local10, fp
1f0ec     18 25 02 F6 | 	mov	local04, local10
1f0f0     01 24 06 F1 | 	add	local04, #1
1f0f4     A7 24 62 FC | 	wrlong	local04, fp
1f0f8     20 2E 06 F1 | 	add	local09, #32
1f0fc     17 31 02 F1 | 	add	local10, local09
1f100     0C 4E 85 F1 | 	sub	fp, #12
1f104     A7 22 E2 FA | 	rdword	local03, fp
1f108     14 4E 85 F1 | 	sub	fp, #20
1f10c     08 22 46 F0 | 	shr	local03, #8
1f110     18 23 42 FC | 	wrbyte	local03, local10
1f114     D4 00 90 FD | 	jmp	#LR__3465
1f118                 | LR__3459
1f118     14 4E 05 F1 | 	add	fp, #20
1f11c     A7 2A EA FA | 	rdword	local07, fp wz
1f120     14 4E 85 F1 | 	sub	fp, #20
1f124     20 00 90 AD |  if_e	jmp	#LR__3460
1f128     25 01 00 FF 
1f12c     B5 12 06 F6 | 	mov	arg01, ##@LR__4093
1f130     14 4E 05 F1 | 	add	fp, #20
1f134     A7 14 E2 FA | 	rdword	arg02, fp
1f138     14 4E 85 F1 | 	sub	fp, #20
1f13c     48 CB BF FD | 	call	#_fatfs_cc_strchr
1f140     00 FA 0D F2 | 	cmp	result1, #0 wz
1f144     20 00 90 AD |  if_e	jmp	#LR__3461
1f148                 | LR__3460
1f148     14 4E 05 F1 | 	add	fp, #20
1f14c     A7 BE 58 FC | 	wrword	#95, fp
1f150     04 4E 85 F1 | 	sub	fp, #4
1f154     A7 2A C2 FA | 	rdbyte	local07, fp
1f158     03 2A 46 F5 | 	or	local07, #3
1f15c     A7 2A 42 FC | 	wrbyte	local07, fp
1f160     10 4E 85 F1 | 	sub	fp, #16
1f164     84 00 90 FD | 	jmp	#LR__3464
1f168                 | LR__3461
1f168     14 4E 05 F1 | 	add	fp, #20
1f16c     A7 2A E2 FA | 	rdword	local07, fp
1f170     14 4E 85 F1 | 	sub	fp, #20
1f174     41 2A 16 F2 | 	cmp	local07, #65 wc
1f178     24 00 90 CD |  if_b	jmp	#LR__3462
1f17c     14 4E 05 F1 | 	add	fp, #20
1f180     A7 1E E2 FA | 	rdword	local01, fp
1f184     14 4E 85 F1 | 	sub	fp, #20
1f188     5B 1E 16 F2 | 	cmp	local01, #91 wc
1f18c     0C 4E 05 C1 |  if_b	add	fp, #12
1f190     A7 2A C2 CA |  if_b	rdbyte	local07, fp
1f194     02 2A 46 C5 |  if_b	or	local07, #2
1f198     A7 2A 42 CC |  if_b	wrbyte	local07, fp
1f19c     0C 4E 85 C1 |  if_b	sub	fp, #12
1f1a0                 | LR__3462
1f1a0     14 4E 05 F1 | 	add	fp, #20
1f1a4     A7 2A E2 FA | 	rdword	local07, fp
1f1a8     14 4E 85 F1 | 	sub	fp, #20
1f1ac     61 2A 16 F2 | 	cmp	local07, #97 wc
1f1b0     38 00 90 CD |  if_b	jmp	#LR__3463
1f1b4     14 4E 05 F1 | 	add	fp, #20
1f1b8     A7 1E E2 FA | 	rdword	local01, fp
1f1bc     14 4E 85 F1 | 	sub	fp, #20
1f1c0     7B 1E 16 F2 | 	cmp	local01, #123 wc
1f1c4     24 00 90 3D |  if_ae	jmp	#LR__3463
1f1c8     0C 4E 05 F1 | 	add	fp, #12
1f1cc     A7 2A C2 FA | 	rdbyte	local07, fp
1f1d0     01 2A 46 F5 | 	or	local07, #1
1f1d4     A7 2A 42 FC | 	wrbyte	local07, fp
1f1d8     08 4E 05 F1 | 	add	fp, #8
1f1dc     A7 2A E2 FA | 	rdword	local07, fp
1f1e0     20 2A 86 F1 | 	sub	local07, #32
1f1e4     A7 2A 52 FC | 	wrword	local07, fp
1f1e8     14 4E 85 F1 | 	sub	fp, #20
1f1ec                 | LR__3463
1f1ec                 | LR__3464
1f1ec                 | LR__3465
1f1ec     04 4E 05 F1 | 	add	fp, #4
1f1f0     A7 32 02 FB | 	rdlong	local11, fp
1f1f4     19 2F 02 F6 | 	mov	local09, local11
1f1f8     1C 4E 05 F1 | 	add	fp, #28
1f1fc     A7 20 02 FB | 	rdlong	local02, fp
1f200     10 25 02 F6 | 	mov	local04, local02
1f204     01 24 06 F1 | 	add	local04, #1
1f208     A7 24 62 FC | 	wrlong	local04, fp
1f20c     10 31 02 F6 | 	mov	local10, local02
1f210     20 2E 06 F1 | 	add	local09, #32
1f214     17 31 02 F1 | 	add	local10, local09
1f218     0C 4E 85 F1 | 	sub	fp, #12
1f21c     A7 22 E2 FA | 	rdword	local03, fp
1f220     14 4E 85 F1 | 	sub	fp, #20
1f224     18 23 42 FC | 	wrbyte	local03, local10
1f228     50 FC 9F FD | 	jmp	#LR__3450
1f22c                 | LR__3466
1f22c     04 4E 05 F1 | 	add	fp, #4
1f230     A7 32 02 FB | 	rdlong	local11, fp
1f234     04 4E 85 F1 | 	sub	fp, #4
1f238     20 32 06 F1 | 	add	local11, #32
1f23c     19 2B C2 FA | 	rdbyte	local07, local11
1f240     E5 2A 0E F2 | 	cmp	local07, #229 wz
1f244     04 4E 05 A1 |  if_e	add	fp, #4
1f248     A7 2A 02 AB |  if_e	rdlong	local07, fp
1f24c     04 4E 85 A1 |  if_e	sub	fp, #4
1f250     20 2A 06 A1 |  if_e	add	local07, #32
1f254     15 0B 48 AC |  if_e	wrbyte	#5, local07
1f258     24 4E 05 F1 | 	add	fp, #36
1f25c     A7 2A 02 FB | 	rdlong	local07, fp
1f260     24 4E 85 F1 | 	sub	fp, #36
1f264     08 2A 0E F2 | 	cmp	local07, #8 wz
1f268     0C 4E 05 A1 |  if_e	add	fp, #12
1f26c     A7 2A C2 AA |  if_e	rdbyte	local07, fp
1f270     02 2A 66 A0 |  if_e	shl	local07, #2
1f274     A7 2A 42 AC |  if_e	wrbyte	local07, fp
1f278     0C 4E 85 A1 |  if_e	sub	fp, #12
1f27c     0C 4E 05 F1 | 	add	fp, #12
1f280     A7 2A C2 FA | 	rdbyte	local07, fp
1f284     0C 4E 85 F1 | 	sub	fp, #12
1f288     0C 2A 06 F5 | 	and	local07, #12
1f28c     0C 2A 0E F2 | 	cmp	local07, #12 wz
1f290     18 00 90 AD |  if_e	jmp	#LR__3467
1f294     0C 4E 05 F1 | 	add	fp, #12
1f298     A7 1E C2 FA | 	rdbyte	local01, fp
1f29c     0C 4E 85 F1 | 	sub	fp, #12
1f2a0     03 1E 06 F5 | 	and	local01, #3
1f2a4     03 1E 0E F2 | 	cmp	local01, #3 wz
1f2a8     14 00 90 5D |  if_ne	jmp	#LR__3468
1f2ac                 | LR__3467
1f2ac     10 4E 05 F1 | 	add	fp, #16
1f2b0     A7 2A C2 FA | 	rdbyte	local07, fp
1f2b4     02 2A 46 F5 | 	or	local07, #2
1f2b8     A7 2A 42 FC | 	wrbyte	local07, fp
1f2bc     10 4E 85 F1 | 	sub	fp, #16
1f2c0                 | LR__3468
1f2c0     10 4E 05 F1 | 	add	fp, #16
1f2c4     A7 2A C2 FA | 	rdbyte	local07, fp
1f2c8     10 4E 85 F1 | 	sub	fp, #16
1f2cc     02 2A CE F7 | 	test	local07, #2 wz
1f2d0     48 00 90 5D |  if_ne	jmp	#LR__3469
1f2d4     0C 4E 05 F1 | 	add	fp, #12
1f2d8     A7 2A C2 FA | 	rdbyte	local07, fp
1f2dc     0C 4E 85 F1 | 	sub	fp, #12
1f2e0     01 2A CE F7 | 	test	local07, #1 wz
1f2e4     10 4E 05 51 |  if_ne	add	fp, #16
1f2e8     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
1f2ec     10 2A 46 55 |  if_ne	or	local07, #16
1f2f0     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
1f2f4     10 4E 85 51 |  if_ne	sub	fp, #16
1f2f8     0C 4E 05 F1 | 	add	fp, #12
1f2fc     A7 2A C2 FA | 	rdbyte	local07, fp
1f300     0C 4E 85 F1 | 	sub	fp, #12
1f304     04 2A CE F7 | 	test	local07, #4 wz
1f308     10 4E 05 51 |  if_ne	add	fp, #16
1f30c     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
1f310     08 2A 46 55 |  if_ne	or	local07, #8
1f314     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
1f318     10 4E 85 51 |  if_ne	sub	fp, #16
1f31c                 | LR__3469
1f31c     04 4E 05 F1 | 	add	fp, #4
1f320     A7 2A 02 FB | 	rdlong	local07, fp
1f324     0C 4E 05 F1 | 	add	fp, #12
1f328     A7 1E C2 FA | 	rdbyte	local01, fp
1f32c     10 4E 85 F1 | 	sub	fp, #16
1f330     2B 2A 06 F1 | 	add	local07, #43
1f334     15 1F 42 FC | 	wrbyte	local01, local07
1f338                 | ' 	}
1f338                 | ' 
1f338                 | ' 	dp->fn[ 11 ] = cf;
1f338                 | ' 
1f338                 | ' 	return FR_OK;
1f338     00 FA 05 F6 | 	mov	result1, #0
1f33c                 | LR__3470
1f33c     A7 F0 03 F6 | 	mov	ptra, fp
1f340     B2 00 A0 FD | 	call	#popregs_
1f344                 | _fatfs_cc_create_name_ret
1f344     2D 00 64 FD | 	ret
1f348                 | 
1f348                 | _fatfs_cc_follow_path
1f348     02 4A 05 F6 | 	mov	COUNT_, #2
1f34c     A8 00 A0 FD | 	call	#pushregs_
1f350     18 F0 07 F1 | 	add	ptra, #24
1f354     04 4E 05 F1 | 	add	fp, #4
1f358     A7 12 62 FC | 	wrlong	arg01, fp
1f35c     04 4E 05 F1 | 	add	fp, #4
1f360     A7 14 62 FC | 	wrlong	arg02, fp
1f364     04 4E 85 F1 | 	sub	fp, #4
1f368     A7 FA 01 FB | 	rdlong	result1, fp
1f36c     FD 1E 02 FB | 	rdlong	local01, result1
1f370     10 4E 05 F1 | 	add	fp, #16
1f374     A7 1E 62 FC | 	wrlong	local01, fp
1f378     14 4E 85 F1 | 	sub	fp, #20
1f37c     97 24 48 FB | 	callpa	#(@LR__3482-@LR__3480)>>2,fcache_load_ptr_
1f380                 | ' )
1f380                 | ' {
1f380                 | ' 	FRESULT res;
1f380                 | ' 	BYTE ns;
1f380                 | ' 	FATFS *fs = dp->obj.fs;
1f380                 | ' #line 3034 "ff.c"
1f380                 | ' 	{
1f380                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
1f380                 | LR__3480
1f380     08 4E 05 F1 | 	add	fp, #8
1f384     A7 1E 02 FB | 	rdlong	local01, fp
1f388     08 4E 85 F1 | 	sub	fp, #8
1f38c     0F 1F C2 FA | 	rdbyte	local01, local01
1f390     2F 1E 0E F2 | 	cmp	local01, #47 wz
1f394     18 00 90 AD |  if_e	jmp	#LR__3481
1f398     08 4E 05 F1 | 	add	fp, #8
1f39c     A7 1E 02 FB | 	rdlong	local01, fp
1f3a0     08 4E 85 F1 | 	sub	fp, #8
1f3a4     0F 1F C2 FA | 	rdbyte	local01, local01
1f3a8     5C 1E 0E F2 | 	cmp	local01, #92 wz
1f3ac     18 00 90 5D |  if_ne	jmp	#LR__3483
1f3b0                 | LR__3481
1f3b0     08 4E 05 F1 | 	add	fp, #8
1f3b4     A7 1E 02 FB | 	rdlong	local01, fp
1f3b8     01 1E 06 F1 | 	add	local01, #1
1f3bc     A7 1E 62 FC | 	wrlong	local01, fp
1f3c0     08 4E 85 F1 | 	sub	fp, #8
1f3c4     B8 FF 9F FD | 	jmp	#LR__3480
1f3c8                 | LR__3482
1f3c8                 | LR__3483
1f3c8     04 4E 05 F1 | 	add	fp, #4
1f3cc     A7 1E 02 FB | 	rdlong	local01, fp
1f3d0     08 1E 06 F1 | 	add	local01, #8
1f3d4     0F 01 68 FC | 	wrlong	#0, local01
1f3d8     04 4E 05 F1 | 	add	fp, #4
1f3dc     A7 1E 02 FB | 	rdlong	local01, fp
1f3e0     08 4E 85 F1 | 	sub	fp, #8
1f3e4     0F 1F C2 FA | 	rdbyte	local01, local01
1f3e8     20 1E 16 F2 | 	cmp	local01, #32 wc
1f3ec     30 00 90 3D |  if_ae	jmp	#LR__3484
1f3f0     04 4E 05 F1 | 	add	fp, #4
1f3f4     A7 1E 02 FB | 	rdlong	local01, fp
1f3f8     2B 1E 06 F1 | 	add	local01, #43
1f3fc     0F 01 49 FC | 	wrbyte	#128, local01
1f400     A7 12 02 FB | 	rdlong	arg01, fp
1f404     04 4E 85 F1 | 	sub	fp, #4
1f408     00 14 06 F6 | 	mov	arg02, #0
1f40c     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
1f410     0C 4E 05 F1 | 	add	fp, #12
1f414     A7 FA 61 FC | 	wrlong	result1, fp
1f418     0C 4E 85 F1 | 	sub	fp, #12
1f41c     1C 01 90 FD | 	jmp	#LR__3488
1f420                 | LR__3484
1f420                 | ' 		for (;;) {
1f420                 | LR__3485
1f420     04 4E 05 F1 | 	add	fp, #4
1f424     A7 12 02 FB | 	rdlong	arg01, fp
1f428     04 4E 05 F1 | 	add	fp, #4
1f42c     A7 14 02 F6 | 	mov	arg02, fp
1f430     08 4E 85 F1 | 	sub	fp, #8
1f434     14 F6 BF FD | 	call	#_fatfs_cc_create_name
1f438     0C 4E 05 F1 | 	add	fp, #12
1f43c     A7 FA 61 FC | 	wrlong	result1, fp
1f440     00 FA 4D F2 | 	cmps	result1, #0 wz
1f444     0C 4E 85 F1 | 	sub	fp, #12
1f448     F0 00 90 5D |  if_ne	jmp	#LR__3487
1f44c     04 4E 05 F1 | 	add	fp, #4
1f450     A7 12 02 FB | 	rdlong	arg01, fp
1f454     04 4E 85 F1 | 	sub	fp, #4
1f458     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
1f45c     0C 4E 05 F1 | 	add	fp, #12
1f460     A7 FA 61 FC | 	wrlong	result1, fp
1f464     08 4E 85 F1 | 	sub	fp, #8
1f468     A7 1E 02 FB | 	rdlong	local01, fp
1f46c     2B 1E 06 F1 | 	add	local01, #43
1f470     0F 1F C2 FA | 	rdbyte	local01, local01
1f474     0C 4E 05 F1 | 	add	fp, #12
1f478     A7 1E 42 FC | 	wrbyte	local01, fp
1f47c     04 4E 85 F1 | 	sub	fp, #4
1f480     A7 1E 0A FB | 	rdlong	local01, fp wz
1f484     0C 4E 85 F1 | 	sub	fp, #12
1f488     34 00 90 AD |  if_e	jmp	#LR__3486
1f48c     0C 4E 05 F1 | 	add	fp, #12
1f490     A7 1E 02 FB | 	rdlong	local01, fp
1f494     0C 4E 85 F1 | 	sub	fp, #12
1f498     04 1E 0E F2 | 	cmp	local01, #4 wz
1f49c     9C 00 90 5D |  if_ne	jmp	#LR__3487
1f4a0     10 4E 05 F1 | 	add	fp, #16
1f4a4     A7 1E C2 FA | 	rdbyte	local01, fp
1f4a8     10 4E 85 F1 | 	sub	fp, #16
1f4ac     04 1E CE F7 | 	test	local01, #4 wz
1f4b0     0C 4E 05 A1 |  if_e	add	fp, #12
1f4b4     A7 0A 68 AC |  if_e	wrlong	#5, fp
1f4b8     0C 4E 85 A1 |  if_e	sub	fp, #12
1f4bc                 | ' 					}
1f4bc                 | ' 				}
1f4bc                 | ' 				break;
1f4bc     7C 00 90 FD | 	jmp	#LR__3487
1f4c0                 | LR__3486
1f4c0     10 4E 05 F1 | 	add	fp, #16
1f4c4     A7 1E C2 FA | 	rdbyte	local01, fp
1f4c8     10 4E 85 F1 | 	sub	fp, #16
1f4cc     04 1E CE F7 | 	test	local01, #4 wz
1f4d0     68 00 90 5D |  if_ne	jmp	#LR__3487
1f4d4     04 4E 05 F1 | 	add	fp, #4
1f4d8     A7 1E 02 FB | 	rdlong	local01, fp
1f4dc     04 4E 85 F1 | 	sub	fp, #4
1f4e0     06 1E 06 F1 | 	add	local01, #6
1f4e4     0F 1F C2 FA | 	rdbyte	local01, local01
1f4e8     10 1E CE F7 | 	test	local01, #16 wz
1f4ec     0C 4E 05 A1 |  if_e	add	fp, #12
1f4f0     A7 0A 68 AC |  if_e	wrlong	#5, fp
1f4f4     0C 4E 85 A1 |  if_e	sub	fp, #12
1f4f8                 | ' 				res = FR_NO_PATH; break;
1f4f8     40 00 90 AD |  if_e	jmp	#LR__3487
1f4fc     04 4E 05 F1 | 	add	fp, #4
1f500     A7 20 02 FB | 	rdlong	local02, fp
1f504     10 1F 02 F6 | 	mov	local01, local02
1f508     10 4E 05 F1 | 	add	fp, #16
1f50c     A7 14 02 FB | 	rdlong	arg02, fp
1f510     0A 13 02 F6 | 	mov	arg01, arg02
1f514     34 14 06 F1 | 	add	arg02, #52
1f518     14 4E 85 F1 | 	sub	fp, #20
1f51c     10 20 06 F1 | 	add	local02, #16
1f520     10 21 02 FB | 	rdlong	local02, local02
1f524     FF 21 06 F5 | 	and	local02, #511
1f528     10 15 02 F1 | 	add	arg02, local02
1f52c     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
1f530     08 1E 06 F1 | 	add	local01, #8
1f534     0F FB 61 FC | 	wrlong	result1, local01
1f538     E4 FE 9F FD | 	jmp	#LR__3485
1f53c                 | LR__3487
1f53c                 | LR__3488
1f53c                 | ' 			}
1f53c                 | ' #line 3090 "ff.c"
1f53c                 | ' 			{
1f53c                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
1f53c                 | ' 			}
1f53c                 | ' 		}
1f53c                 | ' 	}
1f53c                 | ' 
1f53c                 | ' 	return res;
1f53c     0C 4E 05 F1 | 	add	fp, #12
1f540     A7 FA 01 FB | 	rdlong	result1, fp
1f544     0C 4E 85 F1 | 	sub	fp, #12
1f548     A7 F0 03 F6 | 	mov	ptra, fp
1f54c     B2 00 A0 FD | 	call	#popregs_
1f550                 | _fatfs_cc_follow_path_ret
1f550     2D 00 64 FD | 	ret
1f554                 | 
1f554                 | _fatfs_cc_get_ldnumber
1f554     01 00 66 F6 | 	neg	_var01, #1
1f558     09 03 0A FB | 	rdlong	_var02, arg01 wz
1f55c     01 05 02 F6 | 	mov	_var03, _var02
1f560     01 FA 65 A6 |  if_e	neg	result1, #1
1f564     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
1f568     97 10 48 FB | 	callpa	#(@LR__3491-@LR__3490)>>2,fcache_load_ptr_
1f56c                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
1f56c                 | LR__3490
1f56c     02 07 C2 FA | 	rdbyte	_var04, _var03
1f570     03 FB E1 F8 | 	getbyte	result1, _var04, #0
1f574     20 FA 15 F2 | 	cmp	result1, #32 wc
1f578     01 04 06 F1 | 	add	_var03, #1
1f57c     03 09 02 36 |  if_ae	mov	_var05, _var04
1f580     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
1f584     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
1f588     E0 FF 9F 1D |  if_a	jmp	#LR__3490
1f58c                 | LR__3491
1f58c     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
1f590     3A 06 0E F2 | 	cmp	_var04, #58 wz
1f594     40 00 90 5D |  if_ne	jmp	#LR__3493
1f598     01 0A 06 F6 | 	mov	_var06, #1
1f59c     01 09 C2 FA | 	rdbyte	_var05, _var02
1f5a0     30 08 16 F2 | 	cmp	_var05, #48 wc
1f5a4     1C 00 90 CD |  if_b	jmp	#LR__3492
1f5a8     01 09 C2 FA | 	rdbyte	_var05, _var02
1f5ac     3A 08 16 F2 | 	cmp	_var05, #58 wc
1f5b0     01 0D 02 C6 |  if_b	mov	_var07, _var02
1f5b4     02 0C 06 C1 |  if_b	add	_var07, #2
1f5b8     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
1f5bc     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
1f5c0     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
1f5c4                 | LR__3492
1f5c4     01 0A 56 F2 | 	cmps	_var06, #1 wc
1f5c8     05 01 02 C6 |  if_b	mov	_var01, _var06
1f5cc     09 05 62 CC |  if_b	wrlong	_var03, arg01
1f5d0                 | ' 			vol = i;
1f5d0                 | ' 			*path = tt;
1f5d0                 | ' 		}
1f5d0                 | ' 		return vol;
1f5d0     00 FB 01 F6 | 	mov	result1, _var01
1f5d4     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
1f5d8                 | LR__3493
1f5d8                 | ' 	}
1f5d8                 | ' #line 3170 "ff.c"
1f5d8                 | ' 	vol = 0;
1f5d8                 | ' 
1f5d8                 | ' 	return vol;
1f5d8     00 FA 05 F6 | 	mov	result1, #0
1f5dc                 | _fatfs_cc_get_ldnumber_ret
1f5dc     2D 00 64 FD | 	ret
1f5e0                 | 
1f5e0                 | _fatfs_cc_check_fs
1f5e0     04 4A 05 F6 | 	mov	COUNT_, #4
1f5e4     A8 00 A0 FD | 	call	#pushregs_
1f5e8     09 1F 02 F6 | 	mov	local01, arg01
1f5ec     03 1E 06 F1 | 	add	local01, #3
1f5f0     0F 01 48 FC | 	wrbyte	#0, local01
1f5f4     2D 1E 06 F1 | 	add	local01, #45
1f5f8     FF FF FF FF 
1f5fc     0F FF 6B FC | 	wrlong	##-1, local01
1f600     30 1E 86 F1 | 	sub	local01, #48
1f604     0F 13 02 F6 | 	mov	arg01, local01
1f608     18 D5 BF FD | 	call	#_fatfs_cc_move_window
1f60c     00 FA 0D F2 | 	cmp	result1, #0 wz
1f610     04 FA 05 56 |  if_ne	mov	result1, #4
1f614     94 01 90 5D |  if_ne	jmp	#LR__3504
1f618     34 1E 06 F1 | 	add	local01, #52
1f61c     0F 13 02 F6 | 	mov	arg01, local01
1f620     FE 13 06 F1 | 	add	arg01, #510
1f624                 | ' {
1f624                 | ' 
1f624                 | ' 	return *((WORD*)ptr);
1f624     09 21 E2 FA | 	rdword	local02, arg01
1f628     0F 23 C2 FA | 	rdbyte	local03, local01
1f62c     34 1E 86 F1 | 	sub	local01, #52
1f630     11 25 E2 F8 | 	getbyte	local04, local03, #0
1f634     EB 24 0E F2 | 	cmp	local04, #235 wz
1f638     11 17 02 56 |  if_ne	mov	arg03, local03
1f63c     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
1f640     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
1f644     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
1f648     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
1f64c     44 01 90 5D |  if_ne	jmp	#LR__3503
1f650     10 25 32 F9 | 	getword	local04, local02, #0
1f654     55 00 00 FF 
1f658     55 24 0E F2 | 	cmp	local04, ##43605 wz
1f65c     2C 00 90 5D |  if_ne	jmp	#LR__3500
1f660     34 1E 06 F1 | 	add	local01, #52
1f664     0F 13 02 F6 | 	mov	arg01, local01
1f668     34 1E 86 F1 | 	sub	local01, #52
1f66c     52 12 06 F1 | 	add	arg01, #82
1f670     25 01 00 FF 
1f674     BC 14 06 F6 | 	mov	arg02, ##@LR__4094
1f678     08 16 06 F6 | 	mov	arg03, #8
1f67c     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
1f680     00 FA 0D F2 | 	cmp	result1, #0 wz
1f684                 | ' 			return 0;
1f684     00 FA 05 A6 |  if_e	mov	result1, #0
1f688     20 01 90 AD |  if_e	jmp	#LR__3504
1f68c                 | LR__3500
1f68c     34 1E 06 F1 | 	add	local01, #52
1f690     0F 13 02 F6 | 	mov	arg01, local01
1f694     0B 12 06 F1 | 	add	arg01, #11
1f698                 | ' {
1f698                 | ' 
1f698                 | ' 	return *((WORD*)ptr);
1f698     09 FB E1 FA | 	rdword	result1, arg01
1f69c     0D 1E 06 F1 | 	add	local01, #13
1f6a0     0F 23 C2 FA | 	rdbyte	local03, local01
1f6a4     41 1E 86 F1 | 	sub	local01, #65
1f6a8     FD 24 32 F9 | 	getword	local04, result1, #0
1f6ac     FD 14 32 F9 | 	getword	arg02, result1, #0
1f6b0     01 14 86 F1 | 	sub	arg02, #1
1f6b4     0A 25 CA F7 | 	test	local04, arg02 wz
1f6b8     D8 00 90 5D |  if_ne	jmp	#LR__3502
1f6bc     FD 14 32 F9 | 	getword	arg02, result1, #0
1f6c0     01 00 00 FF 
1f6c4     00 14 16 F2 | 	cmp	arg02, ##512 wc
1f6c8     C8 00 90 CD |  if_b	jmp	#LR__3502
1f6cc     FD 14 32 F9 | 	getword	arg02, result1, #0
1f6d0     01 00 00 FF 
1f6d4     01 14 16 F2 | 	cmp	arg02, ##513 wc
1f6d8     B8 00 90 3D |  if_ae	jmp	#LR__3502
1f6dc     11 13 02 F6 | 	mov	arg01, local03
1f6e0     07 12 4E F7 | 	zerox	arg01, #7 wz
1f6e4     AC 00 90 AD |  if_e	jmp	#LR__3502
1f6e8     11 13 E2 F8 | 	getbyte	arg01, local03, #0
1f6ec     11 23 E2 F8 | 	getbyte	local03, local03, #0
1f6f0     01 22 86 F1 | 	sub	local03, #1
1f6f4     11 13 CA F7 | 	test	arg01, local03 wz
1f6f8     98 00 90 5D |  if_ne	jmp	#LR__3502
1f6fc     34 1E 06 F1 | 	add	local01, #52
1f700     0F 13 02 F6 | 	mov	arg01, local01
1f704     34 1E 86 F1 | 	sub	local01, #52
1f708     0E 12 06 F1 | 	add	arg01, #14
1f70c                 | ' {
1f70c                 | ' 
1f70c                 | ' 	return *((WORD*)ptr);
1f70c     09 FB E9 FA | 	rdword	result1, arg01 wz
1f710     80 00 90 AD |  if_e	jmp	#LR__3502
1f714     44 1E 06 F1 | 	add	local01, #68
1f718     0F 13 C2 FA | 	rdbyte	arg01, local01
1f71c     44 1E 86 F1 | 	sub	local01, #68
1f720     01 12 86 F1 | 	sub	arg01, #1
1f724     02 12 16 F2 | 	cmp	arg01, #2 wc
1f728     68 00 90 3D |  if_ae	jmp	#LR__3502
1f72c     34 1E 06 F1 | 	add	local01, #52
1f730     0F 13 02 F6 | 	mov	arg01, local01
1f734     34 1E 86 F1 | 	sub	local01, #52
1f738     11 12 06 F1 | 	add	arg01, #17
1f73c                 | ' {
1f73c                 | ' 
1f73c                 | ' 	return *((WORD*)ptr);
1f73c     09 FB E9 FA | 	rdword	result1, arg01 wz
1f740     50 00 90 AD |  if_e	jmp	#LR__3502
1f744     34 1E 06 F1 | 	add	local01, #52
1f748     0F 13 02 F6 | 	mov	arg01, local01
1f74c     34 1E 86 F1 | 	sub	local01, #52
1f750     13 12 06 F1 | 	add	arg01, #19
1f754                 | ' {
1f754                 | ' 
1f754                 | ' 	return *((WORD*)ptr);
1f754     09 FB E1 FA | 	rdword	result1, arg01
1f758     FD 22 32 F9 | 	getword	local03, result1, #0
1f75c     80 22 16 F2 | 	cmp	local03, #128 wc
1f760     20 00 90 3D |  if_ae	jmp	#LR__3501
1f764     34 1E 06 F1 | 	add	local01, #52
1f768     0F 13 02 F6 | 	mov	arg01, local01
1f76c     34 1E 86 F1 | 	sub	local01, #52
1f770     20 12 06 F1 | 	add	arg01, #32
1f774                 | ' {
1f774                 | ' 
1f774                 | ' 	return *((DWORD*)ptr);
1f774     09 FB 01 FB | 	rdlong	result1, arg01
1f778     80 00 00 FF 
1f77c     00 FA 15 F2 | 	cmp	result1, ##65536 wc
1f780     10 00 90 CD |  if_b	jmp	#LR__3502
1f784                 | LR__3501
1f784     4A 1E 06 F1 | 	add	local01, #74
1f788                 | ' {
1f788                 | ' 
1f788                 | ' 	return *((WORD*)ptr);
1f788     0F FB E9 FA | 	rdword	result1, local01 wz
1f78c                 | ' 			&& b != 0 && (b & (b - 1)) == 0
1f78c                 | ' 			&& ld_word(fs->win +  14 ) != 0
1f78c                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
1f78c                 | ' 			&& ld_word(fs->win +  17 ) != 0
1f78c                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
1f78c                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
1f78c                 | ' 				return 0;
1f78c     00 FA 05 56 |  if_ne	mov	result1, #0
1f790     18 00 90 5D |  if_ne	jmp	#LR__3504
1f794                 | LR__3502
1f794                 | LR__3503
1f794                 | ' 		}
1f794                 | ' 	}
1f794                 | ' 	return sign == 0xAA55 ? 2 : 3;
1f794     10 23 32 F9 | 	getword	local03, local02, #0
1f798     55 00 00 FF 
1f79c     55 22 0E F2 | 	cmp	local03, ##43605 wz
1f7a0     02 24 06 A6 |  if_e	mov	local04, #2
1f7a4     03 24 06 56 |  if_ne	mov	local04, #3
1f7a8     12 FB 01 F6 | 	mov	result1, local04
1f7ac                 | LR__3504
1f7ac     A7 F0 03 F6 | 	mov	ptra, fp
1f7b0     B2 00 A0 FD | 	call	#popregs_
1f7b4                 | _fatfs_cc_check_fs_ret
1f7b4     2D 00 64 FD | 	ret
1f7b8                 | 
1f7b8                 | _fatfs_cc_find_volume
1f7b8     05 4A 05 F6 | 	mov	COUNT_, #5
1f7bc     A8 00 A0 FD | 	call	#pushregs_
1f7c0     24 F0 07 F1 | 	add	ptra, #36
1f7c4     09 1F 02 F6 | 	mov	local01, arg01
1f7c8     0A 21 02 F6 | 	mov	local02, arg02
1f7cc     0F 13 02 F6 | 	mov	arg01, local01
1f7d0     00 14 06 F6 | 	mov	arg02, #0
1f7d4     08 FE BF FD | 	call	#_fatfs_cc_check_fs
1f7d8     02 FA 0D F2 | 	cmp	result1, #2 wz
1f7dc     0C 00 90 AD |  if_e	jmp	#LR__3510
1f7e0     03 FA 15 F2 | 	cmp	result1, #3 wc
1f7e4     00 20 0E C2 |  if_b	cmp	local02, #0 wz
1f7e8     D0 00 90 BD |  if_nc_or_z	jmp	#LR__3518
1f7ec                 | LR__3510
1f7ec                 | ' 	for (i = 0; i < 4; i++) {
1f7ec     00 22 06 F6 | 	mov	local03, #0
1f7f0     97 26 48 FB | 	callpa	#(@LR__3512-@LR__3511)>>2,fcache_load_ptr_
1f7f4                 | LR__3511
1f7f4     04 22 16 F2 | 	cmp	local03, #4 wc
1f7f8     44 00 90 3D |  if_ae	jmp	#LR__3513
1f7fc     11 25 02 F6 | 	mov	local04, local03
1f800     02 24 66 F0 | 	shl	local04, #2
1f804     14 4E 05 F1 | 	add	fp, #20
1f808     A7 24 02 F1 | 	add	local04, fp
1f80c     34 1E 06 F1 | 	add	local01, #52
1f810     0F 13 02 F6 | 	mov	arg01, local01
1f814     34 1E 86 F1 | 	sub	local01, #52
1f818     BE 13 06 F1 | 	add	arg01, #446
1f81c     11 15 02 F6 | 	mov	arg02, local03
1f820     04 14 66 F0 | 	shl	arg02, #4
1f824     0A 13 02 F1 | 	add	arg01, arg02
1f828     08 12 06 F1 | 	add	arg01, #8
1f82c                 | ' {
1f82c                 | ' 
1f82c                 | ' 	return *((DWORD*)ptr);
1f82c     09 FB 01 FB | 	rdlong	result1, arg01
1f830     14 4E 85 F1 | 	sub	fp, #20
1f834     12 FB 61 FC | 	wrlong	result1, local04
1f838     01 22 06 F1 | 	add	local03, #1
1f83c     B4 FF 9F FD | 	jmp	#LR__3511
1f840                 | LR__3512
1f840                 | LR__3513
1f840     00 20 0E F2 | 	cmp	local02, #0 wz
1f844     10 25 02 56 |  if_ne	mov	local04, local02
1f848     01 24 86 51 |  if_ne	sub	local04, #1
1f84c     00 24 06 A6 |  if_e	mov	local04, #0
1f850     12 23 02 F6 | 	mov	local03, local04
1f854                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
1f854                 | ' 	}
1f854                 | ' 	i = part ? part - 1 : 0;
1f854                 | ' 	do {
1f854                 | LR__3514
1f854     11 25 02 F6 | 	mov	local04, local03
1f858     02 24 66 F0 | 	shl	local04, #2
1f85c     14 4E 05 F1 | 	add	fp, #20
1f860     A7 24 02 F1 | 	add	local04, fp
1f864     12 25 0A FB | 	rdlong	local04, local04 wz
1f868     14 4E 85 F1 | 	sub	fp, #20
1f86c     28 00 90 AD |  if_e	jmp	#LR__3515
1f870     11 25 02 F6 | 	mov	local04, local03
1f874     02 24 66 F0 | 	shl	local04, #2
1f878     14 4E 05 F1 | 	add	fp, #20
1f87c     A7 24 02 F1 | 	add	local04, fp
1f880     12 15 02 FB | 	rdlong	arg02, local04
1f884     0F 13 02 F6 | 	mov	arg01, local01
1f888     14 4E 85 F1 | 	sub	fp, #20
1f88c     50 FD BF FD | 	call	#_fatfs_cc_check_fs
1f890     FD 24 02 F6 | 	mov	local04, result1
1f894     04 00 90 FD | 	jmp	#LR__3516
1f898                 | LR__3515
1f898     03 24 06 F6 | 	mov	local04, #3
1f89c                 | LR__3516
1f89c     12 27 02 F6 | 	mov	local05, local04
1f8a0     00 20 0E F2 | 	cmp	local02, #0 wz
1f8a4     02 26 16 A2 |  if_e	cmp	local05, #2 wc
1f8a8     0C 00 90 8D |  if_c_and_z	jmp	#LR__3517
1f8ac     01 22 06 A1 |  if_e	add	local03, #1
1f8b0     04 22 16 A2 |  if_e	cmp	local03, #4 wc
1f8b4     9C FF 9F 8D |  if_c_and_z	jmp	#LR__3514
1f8b8                 | LR__3517
1f8b8                 | ' 	return fmt;
1f8b8     13 FB 01 F6 | 	mov	result1, local05
1f8bc                 | LR__3518
1f8bc     A7 F0 03 F6 | 	mov	ptra, fp
1f8c0     B2 00 A0 FD | 	call	#popregs_
1f8c4                 | _fatfs_cc_find_volume_ret
1f8c4     2D 00 64 FD | 	ret
1f8c8                 | 
1f8c8                 | _fatfs_cc_mount_volume
1f8c8     0B 4A 05 F6 | 	mov	COUNT_, #11
1f8cc     A8 00 A0 FD | 	call	#pushregs_
1f8d0     0A 1F 02 F6 | 	mov	local01, arg02
1f8d4     0B 21 02 F6 | 	mov	local02, arg03
1f8d8     0F 01 68 FC | 	wrlong	#0, local01
1f8dc     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
1f8e0     FD 22 02 F6 | 	mov	local03, result1
1f8e4     00 22 56 F2 | 	cmps	local03, #0 wc
1f8e8     0B FA 05 C6 |  if_b	mov	result1, #11
1f8ec     3C 05 90 CD |  if_b	jmp	#LR__3530
1f8f0     11 17 02 F6 | 	mov	arg03, local03
1f8f4     02 16 66 F0 | 	shl	arg03, #2
1f8f8     F2 16 02 F1 | 	add	arg03, objptr
1f8fc     0B 25 0A FB | 	rdlong	local04, arg03 wz
1f900     0C FA 05 A6 |  if_e	mov	result1, #12
1f904     24 05 90 AD |  if_e	jmp	#LR__3530
1f908     0F 25 62 FC | 	wrlong	local04, local01
1f90c     10 21 E2 F8 | 	getbyte	local02, local02, #0
1f910     FE 20 06 F5 | 	and	local02, #254
1f914     12 17 CA FA | 	rdbyte	arg03, local04 wz
1f918     4C 00 90 AD |  if_e	jmp	#LR__3521
1f91c     01 24 06 F1 | 	add	local04, #1
1f920     12 13 CA FA | 	rdbyte	arg01, local04 wz
1f924     01 24 86 F1 | 	sub	local04, #1
1f928     01 FA 05 56 |  if_ne	mov	result1, #1
1f92c                 | ' 
1f92c                 | ' 	return Stat;
1f92c     01 00 00 AF 
1f930     20 E4 05 A1 |  if_e	add	objptr, ##544
1f934     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1f938     01 00 00 AF 
1f93c     20 E4 85 A1 |  if_e	sub	objptr, ##544
1f940     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
1f944     01 16 CE F7 | 	test	arg03, #1 wz
1f948     1C 00 90 5D |  if_ne	jmp	#LR__3520
1f94c     00 20 0E F2 | 	cmp	local02, #0 wz
1f950     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
1f954     04 FA CD 57 |  if_ne	test	result1, #4 wz
1f958                 | ' 				return FR_WRITE_PROTECTED;
1f958     0A FA 05 56 |  if_ne	mov	result1, #10
1f95c     CC 04 90 5D |  if_ne	jmp	#LR__3530
1f960                 | ' 			}
1f960                 | ' 			return FR_OK;
1f960     00 FA 05 F6 | 	mov	result1, #0
1f964     C4 04 90 FD | 	jmp	#LR__3530
1f968                 | LR__3520
1f968                 | LR__3521
1f968     12 01 48 FC | 	wrbyte	#0, local04
1f96c     01 24 06 F1 | 	add	local04, #1
1f970     12 23 42 FC | 	wrbyte	local03, local04
1f974     12 13 C2 FA | 	rdbyte	arg01, local04
1f978     01 24 86 F1 | 	sub	local04, #1
1f97c     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
1f980     FD 16 02 F6 | 	mov	arg03, result1
1f984     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
1f988     01 26 CE F7 | 	test	local05, #1 wz
1f98c                 | ' 		return FR_NOT_READY;
1f98c     03 FA 05 56 |  if_ne	mov	result1, #3
1f990     98 04 90 5D |  if_ne	jmp	#LR__3530
1f994     00 20 0E F2 | 	cmp	local02, #0 wz
1f998     0B 27 02 56 |  if_ne	mov	local05, arg03
1f99c     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
1f9a0     04 26 CE 57 |  if_ne	test	local05, #4 wz
1f9a4                 | ' 		return FR_WRITE_PROTECTED;
1f9a4     0A FA 05 56 |  if_ne	mov	result1, #10
1f9a8     80 04 90 5D |  if_ne	jmp	#LR__3530
1f9ac     12 13 02 F6 | 	mov	arg01, local04
1f9b0     00 14 06 F6 | 	mov	arg02, #0
1f9b4     00 FE BF FD | 	call	#_fatfs_cc_find_volume
1f9b8     FD 12 02 F6 | 	mov	arg01, result1
1f9bc     04 12 0E F2 | 	cmp	arg01, #4 wz
1f9c0     01 FA 05 A6 |  if_e	mov	result1, #1
1f9c4     64 04 90 AD |  if_e	jmp	#LR__3530
1f9c8     02 12 16 F2 | 	cmp	arg01, #2 wc
1f9cc     0D FA 05 36 |  if_ae	mov	result1, #13
1f9d0     58 04 90 3D |  if_ae	jmp	#LR__3530
1f9d4     30 24 06 F1 | 	add	local04, #48
1f9d8     12 29 02 FB | 	rdlong	local06, local04
1f9dc     04 24 06 F1 | 	add	local04, #4
1f9e0     12 13 02 F6 | 	mov	arg01, local04
1f9e4     34 24 86 F1 | 	sub	local04, #52
1f9e8     0B 12 06 F1 | 	add	arg01, #11
1f9ec                 | ' {
1f9ec                 | ' 
1f9ec                 | ' 	return *((WORD*)ptr);
1f9ec     09 FB E1 FA | 	rdword	result1, arg01
1f9f0     01 00 00 FF 
1f9f4     00 FA 0D F2 | 	cmp	result1, ##512 wz
1f9f8     0D FA 05 56 |  if_ne	mov	result1, #13
1f9fc     2C 04 90 5D |  if_ne	jmp	#LR__3530
1fa00     34 24 06 F1 | 	add	local04, #52
1fa04     12 13 02 F6 | 	mov	arg01, local04
1fa08     34 24 86 F1 | 	sub	local04, #52
1fa0c     16 12 06 F1 | 	add	arg01, #22
1fa10                 | ' {
1fa10                 | ' 
1fa10                 | ' 	return *((WORD*)ptr);
1fa10     09 FB E1 FA | 	rdword	result1, arg01
1fa14     FD 2A 0A F6 | 	mov	local07, result1 wz
1fa18     18 00 90 5D |  if_ne	jmp	#LR__3522
1fa1c     34 24 06 F1 | 	add	local04, #52
1fa20     12 13 02 F6 | 	mov	arg01, local04
1fa24     34 24 86 F1 | 	sub	local04, #52
1fa28     24 12 06 F1 | 	add	arg01, #36
1fa2c                 | ' {
1fa2c                 | ' 
1fa2c                 | ' 	return *((DWORD*)ptr);
1fa2c     09 FB 01 FB | 	rdlong	result1, arg01
1fa30     FD 2A 02 F6 | 	mov	local07, result1
1fa34                 | LR__3522
1fa34     1C 24 06 F1 | 	add	local04, #28
1fa38     12 2B 62 FC | 	wrlong	local07, local04
1fa3c     28 24 06 F1 | 	add	local04, #40
1fa40     12 27 C2 FA | 	rdbyte	local05, local04
1fa44     42 24 86 F1 | 	sub	local04, #66
1fa48     12 27 42 FC | 	wrbyte	local05, local04
1fa4c     12 27 C2 FA | 	rdbyte	local05, local04
1fa50     02 24 86 F1 | 	sub	local04, #2
1fa54     01 26 0E F2 | 	cmp	local05, #1 wz
1fa58     02 24 06 51 |  if_ne	add	local04, #2
1fa5c     12 27 C2 5A |  if_ne	rdbyte	local05, local04
1fa60     02 24 86 51 |  if_ne	sub	local04, #2
1fa64     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
1fa68     0D FA 05 56 |  if_ne	mov	result1, #13
1fa6c     BC 03 90 5D |  if_ne	jmp	#LR__3530
1fa70     02 24 06 F1 | 	add	local04, #2
1fa74     12 27 C2 FA | 	rdbyte	local05, local04
1fa78     13 2B 02 FD | 	qmul	local07, local05
1fa7c     3F 24 06 F1 | 	add	local04, #63
1fa80     12 27 C2 FA | 	rdbyte	local05, local04
1fa84     37 24 86 F1 | 	sub	local04, #55
1fa88     12 27 52 FC | 	wrword	local05, local04
1fa8c     12 27 EA FA | 	rdword	local05, local04 wz
1fa90     0A 24 86 F1 | 	sub	local04, #10
1fa94     18 2A 62 FD | 	getqx	local07
1fa98     20 00 90 AD |  if_e	jmp	#LR__3523
1fa9c     0A 24 06 F1 | 	add	local04, #10
1faa0     12 27 E2 FA | 	rdword	local05, local04
1faa4     13 23 32 F9 | 	getword	local03, local05, #0
1faa8     0A 24 86 F1 | 	sub	local04, #10
1faac     13 27 32 F9 | 	getword	local05, local05, #0
1fab0     01 26 86 F1 | 	sub	local05, #1
1fab4     13 23 CA F7 | 	test	local03, local05 wz
1fab8     08 00 90 AD |  if_e	jmp	#LR__3524
1fabc                 | LR__3523
1fabc     0D FA 05 F6 | 	mov	result1, #13
1fac0     68 03 90 FD | 	jmp	#LR__3530
1fac4                 | LR__3524
1fac4     34 24 06 F1 | 	add	local04, #52
1fac8     12 13 02 F6 | 	mov	arg01, local04
1facc     11 12 06 F1 | 	add	arg01, #17
1fad0                 | ' {
1fad0                 | ' 
1fad0                 | ' 	return *((WORD*)ptr);
1fad0     09 FB E1 FA | 	rdword	result1, arg01
1fad4     2C 24 86 F1 | 	sub	local04, #44
1fad8     12 FB 51 FC | 	wrword	result1, local04
1fadc     12 27 E2 FA | 	rdword	local05, local04
1fae0     08 24 86 F1 | 	sub	local04, #8
1fae4     13 13 52 F6 | 	abs	arg01, local05 wc
1fae8     09 13 42 F8 | 	getnib	arg01, arg01, #0
1faec     09 13 8A F6 | 	negc	arg01, arg01 wz
1faf0     0D FA 05 56 |  if_ne	mov	result1, #13
1faf4     34 03 90 5D |  if_ne	jmp	#LR__3530
1faf8     34 24 06 F1 | 	add	local04, #52
1fafc     12 13 02 F6 | 	mov	arg01, local04
1fb00     34 24 86 F1 | 	sub	local04, #52
1fb04     13 12 06 F1 | 	add	arg01, #19
1fb08                 | ' {
1fb08                 | ' 
1fb08                 | ' 	return *((WORD*)ptr);
1fb08     09 FB E1 FA | 	rdword	result1, arg01
1fb0c     FD 2C 0A F6 | 	mov	local08, result1 wz
1fb10     34 24 06 A1 |  if_e	add	local04, #52
1fb14     12 13 02 A6 |  if_e	mov	arg01, local04
1fb18     34 24 86 A1 |  if_e	sub	local04, #52
1fb1c     20 12 06 A1 |  if_e	add	arg01, #32
1fb20                 | ' {
1fb20                 | ' 
1fb20                 | ' 	return *((DWORD*)ptr);
1fb20     09 2D 02 AB |  if_e	rdlong	local08, arg01
1fb24     34 24 06 F1 | 	add	local04, #52
1fb28     12 13 02 F6 | 	mov	arg01, local04
1fb2c     34 24 86 F1 | 	sub	local04, #52
1fb30     0E 12 06 F1 | 	add	arg01, #14
1fb34                 | ' {
1fb34                 | ' 
1fb34                 | ' 	return *((WORD*)ptr);
1fb34     09 FB E1 FA | 	rdword	result1, arg01
1fb38     FD 12 02 F6 | 	mov	arg01, result1
1fb3c     09 27 02 F6 | 	mov	local05, arg01
1fb40     0F 26 4E F7 | 	zerox	local05, #15 wz
1fb44     0D FA 05 A6 |  if_e	mov	result1, #13
1fb48     E0 02 90 AD |  if_e	jmp	#LR__3530
1fb4c     09 2F 32 F9 | 	getword	local09, arg01, #0
1fb50     15 2F 02 F1 | 	add	local09, local07
1fb54     08 24 06 F1 | 	add	local04, #8
1fb58     12 27 E2 FA | 	rdword	local05, local04
1fb5c     08 24 86 F1 | 	sub	local04, #8
1fb60     13 27 52 F6 | 	abs	local05, local05 wc
1fb64     04 26 46 F0 | 	shr	local05, #4
1fb68     13 2F 82 F3 | 	sumc	local09, local05
1fb6c     17 2D 12 F2 | 	cmp	local08, local09 wc
1fb70     0D FA 05 C6 |  if_b	mov	result1, #13
1fb74     B4 02 90 CD |  if_b	jmp	#LR__3530
1fb78     17 2D 82 F1 | 	sub	local08, local09
1fb7c     0A 24 06 F1 | 	add	local04, #10
1fb80     12 27 E2 FA | 	rdword	local05, local04
1fb84     13 2D 12 FD | 	qdiv	local08, local05
1fb88     0A 24 86 F1 | 	sub	local04, #10
1fb8c     18 26 62 FD | 	getqx	local05
1fb90     00 26 0E F2 | 	cmp	local05, #0 wz
1fb94     0D FA 05 A6 |  if_e	mov	result1, #13
1fb98     90 02 90 AD |  if_e	jmp	#LR__3530
1fb9c     00 30 06 F6 | 	mov	local10, #0
1fba0     FF FF 07 FF 
1fba4     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
1fba8     03 30 06 C6 |  if_b	mov	local10, #3
1fbac     7F 00 00 FF 
1fbb0     F6 27 16 F2 | 	cmp	local05, ##65526 wc
1fbb4     02 30 06 C6 |  if_b	mov	local10, #2
1fbb8     07 00 00 FF 
1fbbc     F6 27 16 F2 | 	cmp	local05, ##4086 wc
1fbc0     01 30 06 C6 |  if_b	mov	local10, #1
1fbc4     00 30 0E F2 | 	cmp	local10, #0 wz
1fbc8     0D FA 05 A6 |  if_e	mov	result1, #13
1fbcc     5C 02 90 AD |  if_e	jmp	#LR__3530
1fbd0     02 26 06 F1 | 	add	local05, #2
1fbd4     18 24 06 F1 | 	add	local04, #24
1fbd8     12 27 62 FC | 	wrlong	local05, local04
1fbdc     08 24 06 F1 | 	add	local04, #8
1fbe0     12 29 62 FC | 	wrlong	local06, local04
1fbe4     14 27 02 F6 | 	mov	local05, local06
1fbe8     09 13 32 F9 | 	getword	arg01, arg01, #0
1fbec     09 27 02 F1 | 	add	local05, arg01
1fbf0     04 24 06 F1 | 	add	local04, #4
1fbf4     12 27 62 FC | 	wrlong	local05, local04
1fbf8     14 27 02 F6 | 	mov	local05, local06
1fbfc     17 27 02 F1 | 	add	local05, local09
1fc00     08 24 06 F1 | 	add	local04, #8
1fc04     12 27 62 FC | 	wrlong	local05, local04
1fc08     2C 24 86 F1 | 	sub	local04, #44
1fc0c     03 30 0E F2 | 	cmp	local10, #3 wz
1fc10     5C 00 90 5D |  if_ne	jmp	#LR__3525
1fc14     34 24 06 F1 | 	add	local04, #52
1fc18     12 13 02 F6 | 	mov	arg01, local04
1fc1c     34 24 86 F1 | 	sub	local04, #52
1fc20     2A 12 06 F1 | 	add	arg01, #42
1fc24                 | ' {
1fc24                 | ' 
1fc24                 | ' 	return *((WORD*)ptr);
1fc24     09 FB E9 FA | 	rdword	result1, arg01 wz
1fc28     0D FA 05 56 |  if_ne	mov	result1, #13
1fc2c     FC 01 90 5D |  if_ne	jmp	#LR__3530
1fc30     08 24 06 F1 | 	add	local04, #8
1fc34     12 27 EA FA | 	rdword	local05, local04 wz
1fc38     08 24 86 F1 | 	sub	local04, #8
1fc3c     0D FA 05 56 |  if_ne	mov	result1, #13
1fc40     E8 01 90 5D |  if_ne	jmp	#LR__3530
1fc44     34 24 06 F1 | 	add	local04, #52
1fc48     12 13 02 F6 | 	mov	arg01, local04
1fc4c     2C 12 06 F1 | 	add	arg01, #44
1fc50                 | ' {
1fc50                 | ' 
1fc50                 | ' 	return *((DWORD*)ptr);
1fc50     09 FB 01 FB | 	rdlong	result1, arg01
1fc54     0C 24 86 F1 | 	sub	local04, #12
1fc58     12 FB 61 FC | 	wrlong	result1, local04
1fc5c     10 24 86 F1 | 	sub	local04, #16
1fc60     12 33 02 FB | 	rdlong	local11, local04
1fc64     18 24 86 F1 | 	sub	local04, #24
1fc68     02 32 66 F0 | 	shl	local11, #2
1fc6c     6C 00 90 FD | 	jmp	#LR__3527
1fc70                 | LR__3525
1fc70     08 24 06 F1 | 	add	local04, #8
1fc74     12 27 EA FA | 	rdword	local05, local04 wz
1fc78     08 24 86 F1 | 	sub	local04, #8
1fc7c     0D FA 05 A6 |  if_e	mov	result1, #13
1fc80     A8 01 90 AD |  if_e	jmp	#LR__3530
1fc84     24 24 06 F1 | 	add	local04, #36
1fc88     12 27 02 FB | 	rdlong	local05, local04
1fc8c     15 27 02 F1 | 	add	local05, local07
1fc90     04 24 06 F1 | 	add	local04, #4
1fc94     12 27 62 FC | 	wrlong	local05, local04
1fc98     28 24 86 F1 | 	sub	local04, #40
1fc9c     02 30 0E F2 | 	cmp	local10, #2 wz
1fca0     18 24 06 A1 |  if_e	add	local04, #24
1fca4     12 27 02 AB |  if_e	rdlong	local05, local04
1fca8     18 24 86 A1 |  if_e	sub	local04, #24
1fcac     01 26 66 A0 |  if_e	shl	local05, #1
1fcb0     24 00 90 AD |  if_e	jmp	#LR__3526
1fcb4     18 24 06 F1 | 	add	local04, #24
1fcb8     12 33 02 FB | 	rdlong	local11, local04
1fcbc     19 27 02 F6 | 	mov	local05, local11
1fcc0     01 26 66 F0 | 	shl	local05, #1
1fcc4     19 27 02 F1 | 	add	local05, local11
1fcc8     01 26 46 F0 | 	shr	local05, #1
1fccc     18 24 86 F1 | 	sub	local04, #24
1fcd0     01 32 06 F5 | 	and	local11, #1
1fcd4     19 27 02 F1 | 	add	local05, local11
1fcd8                 | LR__3526
1fcd8     13 33 02 F6 | 	mov	local11, local05
1fcdc                 | LR__3527
1fcdc     FF 33 06 F1 | 	add	local11, #511
1fce0     09 32 46 F0 | 	shr	local11, #9
1fce4     1C 24 06 F1 | 	add	local04, #28
1fce8     12 17 02 FB | 	rdlong	arg03, local04
1fcec     1C 24 86 F1 | 	sub	local04, #28
1fcf0     19 17 12 F2 | 	cmp	arg03, local11 wc
1fcf4     0D FA 05 C6 |  if_b	mov	result1, #13
1fcf8     30 01 90 CD |  if_b	jmp	#LR__3530
1fcfc     14 24 06 F1 | 	add	local04, #20
1fd00     FF FF FF FF 
1fd04     12 FF 6B FC | 	wrlong	##-1, local04
1fd08     04 24 86 F1 | 	sub	local04, #4
1fd0c     FF FF FF FF 
1fd10     12 FF 6B FC | 	wrlong	##-1, local04
1fd14     0C 24 86 F1 | 	sub	local04, #12
1fd18     12 01 49 FC | 	wrbyte	#128, local04
1fd1c     04 24 86 F1 | 	sub	local04, #4
1fd20     03 30 0E F2 | 	cmp	local10, #3 wz
1fd24     D0 00 90 5D |  if_ne	jmp	#LR__3529
1fd28     34 24 06 F1 | 	add	local04, #52
1fd2c     12 13 02 F6 | 	mov	arg01, local04
1fd30     34 24 86 F1 | 	sub	local04, #52
1fd34     30 12 06 F1 | 	add	arg01, #48
1fd38                 | ' {
1fd38                 | ' 
1fd38                 | ' 	return *((WORD*)ptr);
1fd38     09 FB E1 FA | 	rdword	result1, arg01
1fd3c     FD 26 32 F9 | 	getword	local05, result1, #0
1fd40     01 26 0E F2 | 	cmp	local05, #1 wz
1fd44     B0 00 90 5D |  if_ne	jmp	#LR__3529
1fd48     01 28 06 F1 | 	add	local06, #1
1fd4c     12 13 02 F6 | 	mov	arg01, local04
1fd50     14 15 02 F6 | 	mov	arg02, local06
1fd54     CC CD BF FD | 	call	#_fatfs_cc_move_window
1fd58     00 FA 0D F2 | 	cmp	result1, #0 wz
1fd5c     98 00 90 5D |  if_ne	jmp	#LR__3529
1fd60     04 24 06 F1 | 	add	local04, #4
1fd64     12 01 48 FC | 	wrbyte	#0, local04
1fd68     30 24 06 F1 | 	add	local04, #48
1fd6c     12 13 02 F6 | 	mov	arg01, local04
1fd70     34 24 86 F1 | 	sub	local04, #52
1fd74     FE 13 06 F1 | 	add	arg01, #510
1fd78                 | ' {
1fd78                 | ' 
1fd78                 | ' 	return *((WORD*)ptr);
1fd78     09 FB E1 FA | 	rdword	result1, arg01
1fd7c     FD 26 32 F9 | 	getword	local05, result1, #0
1fd80     55 00 00 FF 
1fd84     55 26 0E F2 | 	cmp	local05, ##43605 wz
1fd88     34 24 06 A1 |  if_e	add	local04, #52
1fd8c     12 13 02 A6 |  if_e	mov	arg01, local04
1fd90     34 24 86 A1 |  if_e	sub	local04, #52
1fd94                 | ' {
1fd94                 | ' 
1fd94                 | ' 	return *((DWORD*)ptr);
1fd94     09 FB 01 AB |  if_e	rdlong	result1, arg01
1fd98     A9 B0 20 AF 
1fd9c     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
1fda0     54 00 90 5D |  if_ne	jmp	#LR__3528
1fda4     34 24 06 F1 | 	add	local04, #52
1fda8     12 13 02 F6 | 	mov	arg01, local04
1fdac     34 24 86 F1 | 	sub	local04, #52
1fdb0     E4 13 06 F1 | 	add	arg01, #484
1fdb4                 | ' {
1fdb4                 | ' 
1fdb4                 | ' 	return *((DWORD*)ptr);
1fdb4     09 FB 01 FB | 	rdlong	result1, arg01
1fdb8     B9 A0 30 FF 
1fdbc     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
1fdc0     34 00 90 5D |  if_ne	jmp	#LR__3528
1fdc4     34 24 06 F1 | 	add	local04, #52
1fdc8     12 13 02 F6 | 	mov	arg01, local04
1fdcc     E8 13 06 F1 | 	add	arg01, #488
1fdd0                 | ' {
1fdd0                 | ' 
1fdd0                 | ' 	return *((DWORD*)ptr);
1fdd0     09 FB 01 FB | 	rdlong	result1, arg01
1fdd4     20 24 86 F1 | 	sub	local04, #32
1fdd8     12 FB 61 FC | 	wrlong	result1, local04
1fddc     20 24 06 F1 | 	add	local04, #32
1fde0     12 13 02 F6 | 	mov	arg01, local04
1fde4     EC 13 06 F1 | 	add	arg01, #492
1fde8                 | ' {
1fde8                 | ' 
1fde8                 | ' 	return *((DWORD*)ptr);
1fde8     09 FB 01 FB | 	rdlong	result1, arg01
1fdec     24 24 86 F1 | 	sub	local04, #36
1fdf0     12 FB 61 FC | 	wrlong	result1, local04
1fdf4     10 24 86 F1 | 	sub	local04, #16
1fdf8                 | LR__3528
1fdf8                 | LR__3529
1fdf8     12 31 42 FC | 	wrbyte	local10, local04
1fdfc     04 E4 05 F1 | 	add	objptr, #4
1fe00     F2 26 E2 FA | 	rdword	local05, objptr
1fe04     01 26 06 F1 | 	add	local05, #1
1fe08     F2 26 52 FC | 	wrword	local05, objptr
1fe0c     F2 32 E2 FA | 	rdword	local11, objptr
1fe10     06 24 06 F1 | 	add	local04, #6
1fe14     12 33 52 FC | 	wrword	local11, local04
1fe18     04 E4 05 F1 | 	add	objptr, #4
1fe1c     06 24 06 F1 | 	add	local04, #6
1fe20     12 E5 61 FC | 	wrlong	objptr, local04
1fe24                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
1fe24                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
1fe24                 | ' 			{
1fe24                 | ' 
1fe24                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
1fe24                 | ' 
1fe24                 | ' 
1fe24                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
1fe24                 | ' 
1fe24                 | ' 			}
1fe24                 | ' 		}
1fe24                 | ' 
1fe24                 | ' 
1fe24                 | ' 	}
1fe24                 | ' 
1fe24                 | ' 	fs->fs_type = (BYTE)fmt;
1fe24                 | ' 	fs->id = ++Fsid;
1fe24                 | ' 
1fe24                 | ' 	fs->lfnbuf = LfnBuf;
1fe24                 | ' #line 3567 "ff.c"
1fe24                 | ' 	return FR_OK;
1fe24     00 FA 05 F6 | 	mov	result1, #0
1fe28     08 E4 85 F1 | 	sub	objptr, #8
1fe2c                 | LR__3530
1fe2c     A7 F0 03 F6 | 	mov	ptra, fp
1fe30     B2 00 A0 FD | 	call	#popregs_
1fe34                 | _fatfs_cc_mount_volume_ret
1fe34     2D 00 64 FD | 	ret
1fe38                 | 
1fe38                 | _fatfs_cc_validate
1fe38     09 01 0A F6 | 	mov	_var01, arg01 wz
1fe3c     09 02 06 F6 | 	mov	_var02, #9
1fe40     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
1fe44     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
1fe48     50 00 90 AD |  if_e	jmp	#LR__3540
1fe4c     04 00 06 F1 | 	add	_var01, #4
1fe50     00 07 E2 FA | 	rdword	_var04, _var01
1fe54     04 00 86 F1 | 	sub	_var01, #4
1fe58     00 13 02 FB | 	rdlong	arg01, _var01
1fe5c     06 12 06 F1 | 	add	arg01, #6
1fe60     09 FB E1 FA | 	rdword	result1, arg01
1fe64     FD 06 0A F2 | 	cmp	_var04, result1 wz
1fe68     30 00 90 5D |  if_ne	jmp	#LR__3540
1fe6c     00 07 02 FB | 	rdlong	_var04, _var01
1fe70     01 06 06 F1 | 	add	_var04, #1
1fe74     03 13 CA FA | 	rdbyte	arg01, _var04 wz
1fe78     01 FA 05 56 |  if_ne	mov	result1, #1
1fe7c                 | ' 
1fe7c                 | ' 	return Stat;
1fe7c     01 00 00 AF 
1fe80     20 E4 05 A1 |  if_e	add	objptr, ##544
1fe84     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1fe88     01 00 00 AF 
1fe8c     20 E4 85 A1 |  if_e	sub	objptr, ##544
1fe90     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
1fe94     01 04 CE F7 | 	test	_var03, #1 wz
1fe98     00 02 06 A6 |  if_e	mov	_var02, #0
1fe9c                 | LR__3540
1fe9c     00 02 0E F2 | 	cmp	_var02, #0 wz
1fea0     00 05 02 AB |  if_e	rdlong	_var03, _var01
1fea4     00 04 06 56 |  if_ne	mov	_var03, #0
1fea8     0A 05 62 FC | 	wrlong	_var03, arg02
1feac                 | ' 			res = FR_OK;
1feac                 | ' 		}
1feac                 | ' 
1feac                 | ' 	}
1feac                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
1feac                 | ' 	return res;
1feac     01 FB 01 F6 | 	mov	result1, _var02
1feb0                 | _fatfs_cc_validate_ret
1feb0     2D 00 64 FD | 	ret
1feb4                 | 
1feb4                 | _fatfs_cc_f_mount
1feb4     01 4A 05 F6 | 	mov	COUNT_, #1
1feb8     A8 00 A0 FD | 	call	#pushregs_
1febc     20 F0 07 F1 | 	add	ptra, #32
1fec0     04 4E 05 F1 | 	add	fp, #4
1fec4     A7 12 62 FC | 	wrlong	arg01, fp
1fec8     04 4E 05 F1 | 	add	fp, #4
1fecc     A7 14 62 FC | 	wrlong	arg02, fp
1fed0     04 4E 05 F1 | 	add	fp, #4
1fed4     A7 16 42 FC | 	wrbyte	arg03, fp
1fed8     04 4E 85 F1 | 	sub	fp, #4
1fedc     A7 16 02 FB | 	rdlong	arg03, fp
1fee0     14 4E 05 F1 | 	add	fp, #20
1fee4     A7 16 62 FC | 	wrlong	arg03, fp
1fee8     A7 12 02 F6 | 	mov	arg01, fp
1feec     1C 4E 85 F1 | 	sub	fp, #28
1fef0     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
1fef4     14 4E 05 F1 | 	add	fp, #20
1fef8     A7 FA 61 FC | 	wrlong	result1, fp
1fefc     14 4E 85 F1 | 	sub	fp, #20
1ff00     00 FA 55 F2 | 	cmps	result1, #0 wc
1ff04     0B FA 05 C6 |  if_b	mov	result1, #11
1ff08     C0 00 90 CD |  if_b	jmp	#LR__3551
1ff0c     14 4E 05 F1 | 	add	fp, #20
1ff10     A7 16 02 FB | 	rdlong	arg03, fp
1ff14     02 16 66 F0 | 	shl	arg03, #2
1ff18     F2 16 02 F1 | 	add	arg03, objptr
1ff1c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1ff20     04 4E 85 F1 | 	sub	fp, #4
1ff24     A7 16 62 FC | 	wrlong	arg03, fp
1ff28     10 4E 85 F1 | 	sub	fp, #16
1ff2c     28 00 90 AD |  if_e	jmp	#LR__3550
1ff30     10 4E 05 F1 | 	add	fp, #16
1ff34     A7 16 02 FB | 	rdlong	arg03, fp
1ff38     10 4E 85 F1 | 	sub	fp, #16
1ff3c     01 16 06 F1 | 	add	arg03, #1
1ff40     0B 13 C2 FA | 	rdbyte	arg01, arg03
1ff44     30 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
1ff48     10 4E 05 F1 | 	add	fp, #16
1ff4c     A7 16 02 FB | 	rdlong	arg03, fp
1ff50     10 4E 85 F1 | 	sub	fp, #16
1ff54     0B 01 48 FC | 	wrbyte	#0, arg03
1ff58                 | LR__3550
1ff58     04 4E 05 F1 | 	add	fp, #4
1ff5c     A7 1E 0A FB | 	rdlong	local01, fp wz
1ff60     04 4E 85 F1 | 	sub	fp, #4
1ff64     04 4E 05 51 |  if_ne	add	fp, #4
1ff68     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1ff6c     04 4E 85 51 |  if_ne	sub	fp, #4
1ff70     0F 01 48 5C |  if_ne	wrbyte	#0, local01
1ff74     14 4E 05 F1 | 	add	fp, #20
1ff78     A7 1E 02 FB | 	rdlong	local01, fp
1ff7c     02 1E 66 F0 | 	shl	local01, #2
1ff80     F2 1E 02 F1 | 	add	local01, objptr
1ff84     10 4E 85 F1 | 	sub	fp, #16
1ff88     A7 16 02 FB | 	rdlong	arg03, fp
1ff8c     0F 17 62 FC | 	wrlong	arg03, local01
1ff90     08 4E 05 F1 | 	add	fp, #8
1ff94     A7 1E CA FA | 	rdbyte	local01, fp wz
1ff98     0C 4E 85 F1 | 	sub	fp, #12
1ff9c     00 FA 05 A6 |  if_e	mov	result1, #0
1ffa0     28 00 90 AD |  if_e	jmp	#LR__3551
1ffa4     08 4E 05 F1 | 	add	fp, #8
1ffa8     A7 12 02 F6 | 	mov	arg01, fp
1ffac     04 4E 85 F1 | 	sub	fp, #4
1ffb0     A7 14 02 F6 | 	mov	arg02, fp
1ffb4     04 4E 85 F1 | 	sub	fp, #4
1ffb8     00 16 06 F6 | 	mov	arg03, #0
1ffbc     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
1ffc0     18 4E 05 F1 | 	add	fp, #24
1ffc4     A7 FA 61 FC | 	wrlong	result1, fp
1ffc8                 | ' 
1ffc8                 | ' 	res = mount_volume(&path, &fs, 0);
1ffc8                 | ' 	return res ;
1ffc8     18 4E 85 F1 | 	sub	fp, #24
1ffcc                 | LR__3551
1ffcc     A7 F0 03 F6 | 	mov	ptra, fp
1ffd0     B2 00 A0 FD | 	call	#popregs_
1ffd4                 | _fatfs_cc_f_mount_ret
1ffd4     2D 00 64 FD | 	ret
1ffd8                 | 
1ffd8                 | _fatfs_cc_f_open
1ffd8     02 4A 05 F6 | 	mov	COUNT_, #2
1ffdc     A8 00 A0 FD | 	call	#pushregs_
1ffe0     60 F0 07 F1 | 	add	ptra, #96
1ffe4     04 4E 05 F1 | 	add	fp, #4
1ffe8     A7 12 62 FC | 	wrlong	arg01, fp
1ffec     04 4E 05 F1 | 	add	fp, #4
1fff0     A7 14 62 FC | 	wrlong	arg02, fp
1fff4     04 4E 05 F1 | 	add	fp, #4
1fff8     A7 16 42 FC | 	wrbyte	arg03, fp
1fffc     08 4E 85 F1 | 	sub	fp, #8
20000     A7 18 0A FB | 	rdlong	arg04, fp wz
20004     04 4E 85 F1 | 	sub	fp, #4
20008     09 FA 05 A6 |  if_e	mov	result1, #9
2000c     98 06 90 AD |  if_e	jmp	#LR__3577
20010     0C 4E 05 F1 | 	add	fp, #12
20014     A7 18 C2 FA | 	rdbyte	arg04, fp
20018     3F 18 06 F5 | 	and	arg04, #63
2001c     A7 18 42 FC | 	wrbyte	arg04, fp
20020     04 4E 85 F1 | 	sub	fp, #4
20024     A7 12 02 F6 | 	mov	arg01, fp
20028     3C 4E 05 F1 | 	add	fp, #60
2002c     A7 14 02 F6 | 	mov	arg02, fp
20030     38 4E 85 F1 | 	sub	fp, #56
20034     A7 16 C2 FA | 	rdbyte	arg03, fp
20038     0C 4E 85 F1 | 	sub	fp, #12
2003c     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
20040     10 4E 05 F1 | 	add	fp, #16
20044     A7 FA 61 FC | 	wrlong	result1, fp
20048     10 4E 85 F1 | 	sub	fp, #16
2004c     00 FA 0D F2 | 	cmp	result1, #0 wz
20050     2C 06 90 5D |  if_ne	jmp	#LR__3576
20054     44 4E 05 F1 | 	add	fp, #68
20058     A7 18 02 FB | 	rdlong	arg04, fp
2005c     30 4E 85 F1 | 	sub	fp, #48
20060     A7 18 62 FC | 	wrlong	arg04, fp
20064     A7 12 02 F6 | 	mov	arg01, fp
20068     0C 4E 85 F1 | 	sub	fp, #12
2006c     A7 1E 02 FB | 	rdlong	local01, fp
20070     08 4E 85 F1 | 	sub	fp, #8
20074     0F 15 02 F6 | 	mov	arg02, local01
20078     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
2007c     10 4E 05 F1 | 	add	fp, #16
20080     A7 FA 61 FC | 	wrlong	result1, fp
20084     10 4E 85 F1 | 	sub	fp, #16
20088     00 FA 0D F2 | 	cmp	result1, #0 wz
2008c     1C 00 90 5D |  if_ne	jmp	#LR__3560
20090     3F 4E 05 F1 | 	add	fp, #63
20094     A7 18 C2 FA | 	rdbyte	arg04, fp
20098     3F 4E 85 F1 | 	sub	fp, #63
2009c     80 18 CE F7 | 	test	arg04, #128 wz
200a0     10 4E 05 51 |  if_ne	add	fp, #16
200a4     A7 0C 68 5C |  if_ne	wrlong	#6, fp
200a8     10 4E 85 51 |  if_ne	sub	fp, #16
200ac                 | LR__3560
200ac     0C 4E 05 F1 | 	add	fp, #12
200b0     A7 18 C2 FA | 	rdbyte	arg04, fp
200b4     0C 4E 85 F1 | 	sub	fp, #12
200b8     1C 18 CE F7 | 	test	arg04, #28 wz
200bc     F0 01 90 AD |  if_e	jmp	#LR__3565
200c0     10 4E 05 F1 | 	add	fp, #16
200c4     A7 1E 0A FB | 	rdlong	local01, fp wz
200c8     10 4E 85 F1 | 	sub	fp, #16
200cc     48 00 90 AD |  if_e	jmp	#LR__3562
200d0     10 4E 05 F1 | 	add	fp, #16
200d4     A7 18 02 FB | 	rdlong	arg04, fp
200d8     10 4E 85 F1 | 	sub	fp, #16
200dc     04 18 0E F2 | 	cmp	arg04, #4 wz
200e0     1C 00 90 5D |  if_ne	jmp	#LR__3561
200e4     14 4E 05 F1 | 	add	fp, #20
200e8     A7 12 02 F6 | 	mov	arg01, fp
200ec     14 4E 85 F1 | 	sub	fp, #20
200f0     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
200f4     10 4E 05 F1 | 	add	fp, #16
200f8     A7 FA 61 FC | 	wrlong	result1, fp
200fc     10 4E 85 F1 | 	sub	fp, #16
20100                 | LR__3561
20100     0C 4E 05 F1 | 	add	fp, #12
20104     A7 1E C2 FA | 	rdbyte	local01, fp
20108     08 1E 46 F5 | 	or	local01, #8
2010c     A7 1E 42 FC | 	wrbyte	local01, fp
20110     0C 4E 85 F1 | 	sub	fp, #12
20114     3C 00 90 FD | 	jmp	#LR__3564
20118                 | LR__3562
20118     1A 4E 05 F1 | 	add	fp, #26
2011c     A7 1E C2 FA | 	rdbyte	local01, fp
20120     1A 4E 85 F1 | 	sub	fp, #26
20124     11 1E CE F7 | 	test	local01, #17 wz
20128     10 4E 05 51 |  if_ne	add	fp, #16
2012c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
20130     10 4E 85 51 |  if_ne	sub	fp, #16
20134     1C 00 90 5D |  if_ne	jmp	#LR__3563
20138     0C 4E 05 F1 | 	add	fp, #12
2013c     A7 1E C2 FA | 	rdbyte	local01, fp
20140     0C 4E 85 F1 | 	sub	fp, #12
20144     04 1E CE F7 | 	test	local01, #4 wz
20148     10 4E 05 51 |  if_ne	add	fp, #16
2014c     A7 10 68 5C |  if_ne	wrlong	#8, fp
20150     10 4E 85 51 |  if_ne	sub	fp, #16
20154                 | LR__3563
20154                 | LR__3564
20154     10 4E 05 F1 | 	add	fp, #16
20158     A7 1E 0A FB | 	rdlong	local01, fp wz
2015c     10 4E 85 F1 | 	sub	fp, #16
20160     A8 01 90 5D |  if_ne	jmp	#LR__3568
20164     0C 4E 05 F1 | 	add	fp, #12
20168     A7 1E C2 FA | 	rdbyte	local01, fp
2016c     0C 4E 85 F1 | 	sub	fp, #12
20170     08 1E CE F7 | 	test	local01, #8 wz
20174     94 01 90 AD |  if_e	jmp	#LR__3568
20178     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
2017c     54 4E 05 F1 | 	add	fp, #84
20180     A7 FA 61 FC | 	wrlong	result1, fp
20184     24 4E 85 F1 | 	sub	fp, #36
20188     A7 12 02 FB | 	rdlong	arg01, fp
2018c     0E 12 06 F1 | 	add	arg01, #14
20190     09 FB 61 FC | 	wrlong	result1, arg01
20194     A7 12 02 FB | 	rdlong	arg01, fp
20198     16 12 06 F1 | 	add	arg01, #22
2019c     24 4E 05 F1 | 	add	fp, #36
201a0     A7 14 02 FB | 	rdlong	arg02, fp
201a4     09 15 62 FC | 	wrlong	arg02, arg01
201a8     10 4E 85 F1 | 	sub	fp, #16
201ac     A7 12 02 FB | 	rdlong	arg01, fp
201b0     14 4E 85 F1 | 	sub	fp, #20
201b4     A7 14 02 FB | 	rdlong	arg02, fp
201b8     30 4E 85 F1 | 	sub	fp, #48
201bc     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
201c0     48 4E 05 F1 | 	add	fp, #72
201c4     A7 FA 61 FC | 	wrlong	result1, fp
201c8     18 4E 85 F1 | 	sub	fp, #24
201cc     A7 1E 02 FB | 	rdlong	local01, fp
201d0     0B 1E 06 F1 | 	add	local01, #11
201d4     0F 41 48 FC | 	wrbyte	#32, local01
201d8     14 4E 05 F1 | 	add	fp, #20
201dc     A7 12 02 FB | 	rdlong	arg01, fp
201e0     14 4E 85 F1 | 	sub	fp, #20
201e4     A7 14 02 FB | 	rdlong	arg02, fp
201e8     30 4E 85 F1 | 	sub	fp, #48
201ec     00 16 06 F6 | 	mov	arg03, #0
201f0     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
201f4     30 4E 05 F1 | 	add	fp, #48
201f8     A7 12 02 FB | 	rdlong	arg01, fp
201fc     1C 12 06 F1 | 	add	arg01, #28
20200     09 01 68 FC | 	wrlong	#0, arg01
20204     14 4E 05 F1 | 	add	fp, #20
20208     A7 1E 02 FB | 	rdlong	local01, fp
2020c     03 1E 06 F1 | 	add	local01, #3
20210     0F 03 48 FC | 	wrbyte	#1, local01
20214     04 4E 05 F1 | 	add	fp, #4
20218     A7 1E 0A FB | 	rdlong	local01, fp wz
2021c     48 4E 85 F1 | 	sub	fp, #72
20220     E8 00 90 AD |  if_e	jmp	#LR__3568
20224     44 4E 05 F1 | 	add	fp, #68
20228     A7 1E 02 FB | 	rdlong	local01, fp
2022c     30 1E 06 F1 | 	add	local01, #48
20230     0F 1F 02 FB | 	rdlong	local01, local01
20234     14 4E 05 F1 | 	add	fp, #20
20238     A7 1E 62 FC | 	wrlong	local01, fp
2023c     44 4E 85 F1 | 	sub	fp, #68
20240     A7 12 02 F6 | 	mov	arg01, fp
20244     34 4E 05 F1 | 	add	fp, #52
20248     A7 14 02 FB | 	rdlong	arg02, fp
2024c     48 4E 85 F1 | 	sub	fp, #72
20250     00 16 06 F6 | 	mov	arg03, #0
20254     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
20258     10 4E 05 F1 | 	add	fp, #16
2025c     A7 FA 61 FC | 	wrlong	result1, fp
20260     10 4E 85 F1 | 	sub	fp, #16
20264     00 FA 0D F2 | 	cmp	result1, #0 wz
20268     A0 00 90 5D |  if_ne	jmp	#LR__3568
2026c     44 4E 05 F1 | 	add	fp, #68
20270     A7 12 02 FB | 	rdlong	arg01, fp
20274     14 4E 05 F1 | 	add	fp, #20
20278     A7 14 02 FB | 	rdlong	arg02, fp
2027c     58 4E 85 F1 | 	sub	fp, #88
20280     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
20284     10 4E 05 F1 | 	add	fp, #16
20288     A7 FA 61 FC | 	wrlong	result1, fp
2028c     34 4E 05 F1 | 	add	fp, #52
20290     A7 18 02 FB | 	rdlong	arg04, fp
20294     04 4E 05 F1 | 	add	fp, #4
20298     A7 1E 02 FB | 	rdlong	local01, fp
2029c     48 4E 85 F1 | 	sub	fp, #72
202a0     01 1E 86 F1 | 	sub	local01, #1
202a4     10 18 06 F1 | 	add	arg04, #16
202a8     0C 1F 62 FC | 	wrlong	local01, arg04
202ac     5C 00 90 FD | 	jmp	#LR__3568
202b0                 | LR__3565
202b0     10 4E 05 F1 | 	add	fp, #16
202b4     A7 18 0A FB | 	rdlong	arg04, fp wz
202b8     10 4E 85 F1 | 	sub	fp, #16
202bc     4C 00 90 5D |  if_ne	jmp	#LR__3567
202c0     1A 4E 05 F1 | 	add	fp, #26
202c4     A7 18 C2 FA | 	rdbyte	arg04, fp
202c8     1A 4E 85 F1 | 	sub	fp, #26
202cc     10 18 CE F7 | 	test	arg04, #16 wz
202d0     10 4E 05 51 |  if_ne	add	fp, #16
202d4     A7 08 68 5C |  if_ne	wrlong	#4, fp
202d8     10 4E 85 51 |  if_ne	sub	fp, #16
202dc     2C 00 90 5D |  if_ne	jmp	#LR__3566
202e0     0C 4E 05 F1 | 	add	fp, #12
202e4     A7 18 C2 FA | 	rdbyte	arg04, fp
202e8     0C 4E 85 F1 | 	sub	fp, #12
202ec     02 18 CE F7 | 	test	arg04, #2 wz
202f0     1A 4E 05 51 |  if_ne	add	fp, #26
202f4     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
202f8     1A 4E 85 51 |  if_ne	sub	fp, #26
202fc     01 1E CE 57 |  if_ne	test	local01, #1 wz
20300     10 4E 05 51 |  if_ne	add	fp, #16
20304     A7 0E 68 5C |  if_ne	wrlong	#7, fp
20308     10 4E 85 51 |  if_ne	sub	fp, #16
2030c                 | LR__3566
2030c                 | LR__3567
2030c                 | LR__3568
2030c     10 4E 05 F1 | 	add	fp, #16
20310     A7 1E 0A FB | 	rdlong	local01, fp wz
20314     10 4E 85 F1 | 	sub	fp, #16
20318     60 00 90 5D |  if_ne	jmp	#LR__3569
2031c     0C 4E 05 F1 | 	add	fp, #12
20320     A7 20 C2 FA | 	rdbyte	local02, fp
20324     0C 4E 85 F1 | 	sub	fp, #12
20328     08 20 CE F7 | 	test	local02, #8 wz
2032c     0C 4E 05 51 |  if_ne	add	fp, #12
20330     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
20334     40 20 46 55 |  if_ne	or	local02, #64
20338     A7 20 42 5C |  if_ne	wrbyte	local02, fp
2033c     0C 4E 85 51 |  if_ne	sub	fp, #12
20340     04 4E 05 F1 | 	add	fp, #4
20344     A7 20 02 FB | 	rdlong	local02, fp
20348     40 4E 05 F1 | 	add	fp, #64
2034c     A7 1E 02 FB | 	rdlong	local01, fp
20350     30 1E 06 F1 | 	add	local01, #48
20354     0F 1F 02 FB | 	rdlong	local01, local01
20358     20 20 06 F1 | 	add	local02, #32
2035c     10 1F 62 FC | 	wrlong	local01, local02
20360     40 4E 85 F1 | 	sub	fp, #64
20364     A7 20 02 FB | 	rdlong	local02, fp
20368     2C 4E 05 F1 | 	add	fp, #44
2036c     A7 1E 02 FB | 	rdlong	local01, fp
20370     30 4E 85 F1 | 	sub	fp, #48
20374     24 20 06 F1 | 	add	local02, #36
20378     10 1F 62 FC | 	wrlong	local01, local02
2037c                 | LR__3569
2037c     10 4E 05 F1 | 	add	fp, #16
20380     A7 20 0A FB | 	rdlong	local02, fp wz
20384     10 4E 85 F1 | 	sub	fp, #16
20388     F4 02 90 5D |  if_ne	jmp	#LR__3575
2038c     04 4E 05 F1 | 	add	fp, #4
20390     A7 20 02 FB | 	rdlong	local02, fp
20394     40 4E 05 F1 | 	add	fp, #64
20398     A7 12 02 FB | 	rdlong	arg01, fp
2039c     14 4E 85 F1 | 	sub	fp, #20
203a0     A7 14 02 FB | 	rdlong	arg02, fp
203a4     30 4E 85 F1 | 	sub	fp, #48
203a8     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
203ac     08 20 06 F1 | 	add	local02, #8
203b0     10 FB 61 FC | 	wrlong	result1, local02
203b4     04 4E 05 F1 | 	add	fp, #4
203b8     A7 20 02 FB | 	rdlong	local02, fp
203bc     2C 4E 05 F1 | 	add	fp, #44
203c0     A7 12 02 FB | 	rdlong	arg01, fp
203c4     1C 12 06 F1 | 	add	arg01, #28
203c8                 | ' {
203c8                 | ' 
203c8                 | ' 	return *((DWORD*)ptr);
203c8     09 FB 01 FB | 	rdlong	result1, arg01
203cc     0C 20 06 F1 | 	add	local02, #12
203d0     10 FB 61 FC | 	wrlong	result1, local02
203d4     2C 4E 85 F1 | 	sub	fp, #44
203d8     A7 20 02 FB | 	rdlong	local02, fp
203dc     40 4E 05 F1 | 	add	fp, #64
203e0     A7 1E 02 FB | 	rdlong	local01, fp
203e4     10 1F 62 FC | 	wrlong	local01, local02
203e8     40 4E 85 F1 | 	sub	fp, #64
203ec     A7 20 02 FB | 	rdlong	local02, fp
203f0     40 4E 05 F1 | 	add	fp, #64
203f4     A7 1E 02 FB | 	rdlong	local01, fp
203f8     06 1E 06 F1 | 	add	local01, #6
203fc     0F 1F E2 FA | 	rdword	local01, local01
20400     04 20 06 F1 | 	add	local02, #4
20404     10 1F 52 FC | 	wrword	local01, local02
20408     40 4E 85 F1 | 	sub	fp, #64
2040c     A7 20 02 FB | 	rdlong	local02, fp
20410     08 4E 05 F1 | 	add	fp, #8
20414     A7 1E C2 FA | 	rdbyte	local01, fp
20418     10 20 06 F1 | 	add	local02, #16
2041c     10 1F 42 FC | 	wrbyte	local01, local02
20420     08 4E 85 F1 | 	sub	fp, #8
20424     A7 20 02 FB | 	rdlong	local02, fp
20428     11 20 06 F1 | 	add	local02, #17
2042c     10 01 48 FC | 	wrbyte	#0, local02
20430     A7 20 02 FB | 	rdlong	local02, fp
20434     1C 20 06 F1 | 	add	local02, #28
20438     10 01 68 FC | 	wrlong	#0, local02
2043c     A7 20 02 FB | 	rdlong	local02, fp
20440     14 20 06 F1 | 	add	local02, #20
20444     10 01 68 FC | 	wrlong	#0, local02
20448     A7 12 02 FB | 	rdlong	arg01, fp
2044c     04 4E 85 F1 | 	sub	fp, #4
20450     28 12 06 F1 | 	add	arg01, #40
20454     00 14 06 F6 | 	mov	arg02, #0
20458     09 16 C6 F9 | 	decod	arg03, #9
2045c     98 00 A0 FD | 	call	#\builtin_bytefill_
20460     0C 4E 05 F1 | 	add	fp, #12
20464     A7 20 C2 FA | 	rdbyte	local02, fp
20468     0C 4E 85 F1 | 	sub	fp, #12
2046c     20 20 CE F7 | 	test	local02, #32 wz
20470     0C 02 90 AD |  if_e	jmp	#LR__3574
20474     04 4E 05 F1 | 	add	fp, #4
20478     A7 1E 02 FB | 	rdlong	local01, fp
2047c     04 4E 85 F1 | 	sub	fp, #4
20480     0C 1E 06 F1 | 	add	local01, #12
20484     0F 21 02 FB | 	rdlong	local02, local01
20488     01 20 16 F2 | 	cmp	local02, #1 wc
2048c     F0 01 90 CD |  if_b	jmp	#LR__3574
20490     04 4E 05 F1 | 	add	fp, #4
20494     A7 1E 02 FB | 	rdlong	local01, fp
20498     0F 21 02 F6 | 	mov	local02, local01
2049c     0C 1E 06 F1 | 	add	local01, #12
204a0     0F 1F 02 FB | 	rdlong	local01, local01
204a4     14 20 06 F1 | 	add	local02, #20
204a8     10 1F 62 FC | 	wrlong	local01, local02
204ac     40 4E 05 F1 | 	add	fp, #64
204b0     A7 20 02 FB | 	rdlong	local02, fp
204b4     0A 20 06 F1 | 	add	local02, #10
204b8     10 21 E2 FA | 	rdword	local02, local02
204bc     09 20 66 F0 | 	shl	local02, #9
204c0     08 4E 05 F1 | 	add	fp, #8
204c4     A7 20 62 FC | 	wrlong	local02, fp
204c8     48 4E 85 F1 | 	sub	fp, #72
204cc     A7 20 02 FB | 	rdlong	local02, fp
204d0     08 20 06 F1 | 	add	local02, #8
204d4     10 1F 02 FB | 	rdlong	local01, local02
204d8     4C 4E 05 F1 | 	add	fp, #76
204dc     A7 1E 62 FC | 	wrlong	local01, fp
204e0                 | ' 				fp->fptr = fp->obj.objsize;
204e0                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
204e0                 | ' 				clst = fp->obj.sclust;
204e0                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
204e0     4C 4E 85 F1 | 	sub	fp, #76
204e4     A7 20 02 FB | 	rdlong	local02, fp
204e8     0C 20 06 F1 | 	add	local02, #12
204ec     10 1F 02 FB | 	rdlong	local01, local02
204f0     58 4E 05 F1 | 	add	fp, #88
204f4     A7 1E 62 FC | 	wrlong	local01, fp
204f8     5C 4E 85 F1 | 	sub	fp, #92
204fc                 | LR__3570
204fc     10 4E 05 F1 | 	add	fp, #16
20500     A7 20 0A FB | 	rdlong	local02, fp wz
20504     10 4E 85 F1 | 	sub	fp, #16
20508     94 00 90 5D |  if_ne	jmp	#LR__3571
2050c     5C 4E 05 F1 | 	add	fp, #92
20510     A7 20 02 FB | 	rdlong	local02, fp
20514     10 4E 85 F1 | 	sub	fp, #16
20518     A7 1E 02 FB | 	rdlong	local01, fp
2051c     4C 4E 85 F1 | 	sub	fp, #76
20520     0F 21 1A F2 | 	cmp	local02, local01 wcz
20524     78 00 90 ED |  if_be	jmp	#LR__3571
20528     04 4E 05 F1 | 	add	fp, #4
2052c     A7 12 02 FB | 	rdlong	arg01, fp
20530     4C 4E 05 F1 | 	add	fp, #76
20534     A7 14 02 FB | 	rdlong	arg02, fp
20538     50 4E 85 F1 | 	sub	fp, #80
2053c     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
20540     50 4E 05 F1 | 	add	fp, #80
20544     A7 FA 61 FC | 	wrlong	result1, fp
20548     50 4E 85 F1 | 	sub	fp, #80
2054c     02 FA 15 F2 | 	cmp	result1, #2 wc
20550     10 4E 05 C1 |  if_b	add	fp, #16
20554     A7 04 68 CC |  if_b	wrlong	#2, fp
20558     10 4E 85 C1 |  if_b	sub	fp, #16
2055c     50 4E 05 F1 | 	add	fp, #80
20560     A7 20 02 FB | 	rdlong	local02, fp
20564     50 4E 85 F1 | 	sub	fp, #80
20568     FF FF 7F FF 
2056c     FF 21 0E F2 | 	cmp	local02, ##-1 wz
20570     10 4E 05 A1 |  if_e	add	fp, #16
20574     A7 02 68 AC |  if_e	wrlong	#1, fp
20578     10 4E 85 A1 |  if_e	sub	fp, #16
2057c     5C 4E 05 F1 | 	add	fp, #92
20580     A7 20 02 FB | 	rdlong	local02, fp
20584     10 4E 85 F1 | 	sub	fp, #16
20588     A7 1E 02 FB | 	rdlong	local01, fp
2058c     0F 21 82 F1 | 	sub	local02, local01
20590     10 4E 05 F1 | 	add	fp, #16
20594     A7 20 62 FC | 	wrlong	local02, fp
20598     5C 4E 85 F1 | 	sub	fp, #92
2059c     5C FF 9F FD | 	jmp	#LR__3570
205a0                 | LR__3571
205a0     04 4E 05 F1 | 	add	fp, #4
205a4     A7 20 02 FB | 	rdlong	local02, fp
205a8     4C 4E 05 F1 | 	add	fp, #76
205ac     A7 1E 02 FB | 	rdlong	local01, fp
205b0     18 20 06 F1 | 	add	local02, #24
205b4     10 1F 62 FC | 	wrlong	local01, local02
205b8     40 4E 85 F1 | 	sub	fp, #64
205bc     A7 20 0A FB | 	rdlong	local02, fp wz
205c0     10 4E 85 F1 | 	sub	fp, #16
205c4     B8 00 90 5D |  if_ne	jmp	#LR__3573
205c8     5C 4E 05 F1 | 	add	fp, #92
205cc     A7 1E 02 FB | 	rdlong	local01, fp
205d0     5C 4E 85 F1 | 	sub	fp, #92
205d4     FF 1F CE F7 | 	test	local01, #511 wz
205d8     A4 00 90 AD |  if_e	jmp	#LR__3573
205dc     44 4E 05 F1 | 	add	fp, #68
205e0     A7 12 02 FB | 	rdlong	arg01, fp
205e4     0C 4E 05 F1 | 	add	fp, #12
205e8     A7 14 02 FB | 	rdlong	arg02, fp
205ec     50 4E 85 F1 | 	sub	fp, #80
205f0     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
205f4     58 4E 05 F1 | 	add	fp, #88
205f8     A7 FA 61 FC | 	wrlong	result1, fp
205fc     00 FA 4D F2 | 	cmps	result1, #0 wz
20600     58 4E 85 F1 | 	sub	fp, #88
20604     10 4E 05 A1 |  if_e	add	fp, #16
20608     A7 04 68 AC |  if_e	wrlong	#2, fp
2060c     10 4E 85 A1 |  if_e	sub	fp, #16
20610     6C 00 90 AD |  if_e	jmp	#LR__3572
20614     04 4E 05 F1 | 	add	fp, #4
20618     A7 20 02 FB | 	rdlong	local02, fp
2061c     54 4E 05 F1 | 	add	fp, #84
20620     A7 1E 02 FB | 	rdlong	local01, fp
20624     04 4E 05 F1 | 	add	fp, #4
20628     A7 18 02 FB | 	rdlong	arg04, fp
2062c     09 18 46 F0 | 	shr	arg04, #9
20630     0C 1F 02 F1 | 	add	local01, arg04
20634     1C 20 06 F1 | 	add	local02, #28
20638     10 1F 62 FC | 	wrlong	local01, local02
2063c     18 4E 85 F1 | 	sub	fp, #24
20640     A7 20 02 FB | 	rdlong	local02, fp
20644     01 20 06 F1 | 	add	local02, #1
20648     10 13 C2 FA | 	rdbyte	arg01, local02
2064c     40 4E 85 F1 | 	sub	fp, #64
20650     A7 20 02 FB | 	rdlong	local02, fp
20654     10 15 02 F6 | 	mov	arg02, local02
20658     28 14 06 F1 | 	add	arg02, #40
2065c     04 4E 85 F1 | 	sub	fp, #4
20660     1C 20 06 F1 | 	add	local02, #28
20664     10 17 02 FB | 	rdlong	arg03, local02
20668     01 18 06 F6 | 	mov	arg04, #1
2066c     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
20670     00 FA 0D F2 | 	cmp	result1, #0 wz
20674     10 4E 05 51 |  if_ne	add	fp, #16
20678     A7 02 68 5C |  if_ne	wrlong	#1, fp
2067c     10 4E 85 51 |  if_ne	sub	fp, #16
20680                 | LR__3572
20680                 | LR__3573
20680                 | LR__3574
20680                 | LR__3575
20680                 | LR__3576
20680     10 4E 05 F1 | 	add	fp, #16
20684     A7 20 0A FB | 	rdlong	local02, fp wz
20688     10 4E 85 F1 | 	sub	fp, #16
2068c     04 4E 05 51 |  if_ne	add	fp, #4
20690     A7 20 02 5B |  if_ne	rdlong	local02, fp
20694     04 4E 85 51 |  if_ne	sub	fp, #4
20698     10 01 68 5C |  if_ne	wrlong	#0, local02
2069c                 | ' 
2069c                 | ' 	return res ;
2069c     10 4E 05 F1 | 	add	fp, #16
206a0     A7 FA 01 FB | 	rdlong	result1, fp
206a4     10 4E 85 F1 | 	sub	fp, #16
206a8                 | LR__3577
206a8     A7 F0 03 F6 | 	mov	ptra, fp
206ac     B2 00 A0 FD | 	call	#popregs_
206b0                 | _fatfs_cc_f_open_ret
206b0     2D 00 64 FD | 	ret
206b4                 | 
206b4                 | _fatfs_cc_f_read
206b4     0E 4A 05 F6 | 	mov	COUNT_, #14
206b8     A8 00 A0 FD | 	call	#pushregs_
206bc     38 F0 07 F1 | 	add	ptra, #56
206c0     04 4E 05 F1 | 	add	fp, #4
206c4     A7 12 62 FC | 	wrlong	arg01, fp
206c8     04 4E 05 F1 | 	add	fp, #4
206cc     A7 14 62 FC | 	wrlong	arg02, fp
206d0     04 4E 05 F1 | 	add	fp, #4
206d4     A7 16 62 FC | 	wrlong	arg03, fp
206d8     04 4E 05 F1 | 	add	fp, #4
206dc     A7 18 62 FC | 	wrlong	arg04, fp
206e0     08 4E 85 F1 | 	sub	fp, #8
206e4     A7 FA 01 FB | 	rdlong	result1, fp
206e8     2C 4E 05 F1 | 	add	fp, #44
206ec     A7 FA 61 FC | 	wrlong	result1, fp
206f0     24 4E 85 F1 | 	sub	fp, #36
206f4     A7 FA 01 FB | 	rdlong	result1, fp
206f8     FD 00 68 FC | 	wrlong	#0, result1
206fc     0C 4E 85 F1 | 	sub	fp, #12
20700     A7 12 02 FB | 	rdlong	arg01, fp
20704     14 4E 05 F1 | 	add	fp, #20
20708     A7 14 02 F6 | 	mov	arg02, fp
2070c     18 4E 85 F1 | 	sub	fp, #24
20710     24 F7 BF FD | 	call	#_fatfs_cc_validate
20714     14 4E 05 F1 | 	add	fp, #20
20718     A7 FA 61 FC | 	wrlong	result1, fp
2071c     00 FA 4D F2 | 	cmps	result1, #0 wz
20720     14 4E 85 F1 | 	sub	fp, #20
20724     20 00 90 5D |  if_ne	jmp	#LR__3580
20728     04 4E 05 F1 | 	add	fp, #4
2072c     A7 14 02 FB | 	rdlong	arg02, fp
20730     11 14 06 F1 | 	add	arg02, #17
20734     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
20738     10 4E 05 F1 | 	add	fp, #16
2073c     A7 14 62 FC | 	wrlong	arg02, fp
20740     14 4E 85 F1 | 	sub	fp, #20
20744     10 00 90 AD |  if_e	jmp	#LR__3581
20748                 | LR__3580
20748     14 4E 05 F1 | 	add	fp, #20
2074c     A7 FA 01 FB | 	rdlong	result1, fp
20750     14 4E 85 F1 | 	sub	fp, #20
20754     EC 05 90 FD | 	jmp	#LR__3600
20758                 | LR__3581
20758     04 4E 05 F1 | 	add	fp, #4
2075c     A7 18 02 FB | 	rdlong	arg04, fp
20760     04 4E 85 F1 | 	sub	fp, #4
20764     10 18 06 F1 | 	add	arg04, #16
20768     0C 19 C2 FA | 	rdbyte	arg04, arg04
2076c     01 18 CE F7 | 	test	arg04, #1 wz
20770     07 FA 05 A6 |  if_e	mov	result1, #7
20774     CC 05 90 AD |  if_e	jmp	#LR__3600
20778     04 4E 05 F1 | 	add	fp, #4
2077c     A7 1E 02 FB | 	rdlong	local01, fp
20780     0F 21 02 F6 | 	mov	local02, local01
20784     0C 20 06 F1 | 	add	local02, #12
20788     10 23 02 FB | 	rdlong	local03, local02
2078c     14 1E 06 F1 | 	add	local01, #20
20790     0F 1F 02 FB | 	rdlong	local01, local01
20794     0F 23 82 F1 | 	sub	local03, local01
20798     20 4E 05 F1 | 	add	fp, #32
2079c     A7 22 62 FC | 	wrlong	local03, fp
207a0     18 4E 85 F1 | 	sub	fp, #24
207a4     A7 24 02 FB | 	rdlong	local04, fp
207a8     0C 4E 85 F1 | 	sub	fp, #12
207ac     11 25 1A F2 | 	cmp	local04, local03 wcz
207b0     24 4E 05 11 |  if_a	add	fp, #36
207b4     A7 24 02 1B |  if_a	rdlong	local04, fp
207b8     18 4E 85 11 |  if_a	sub	fp, #24
207bc     A7 24 62 1C |  if_a	wrlong	local04, fp
207c0     0C 4E 85 11 |  if_a	sub	fp, #12
207c4                 | ' 
207c4                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
207c4                 | LR__3582
207c4     0C 4E 05 F1 | 	add	fp, #12
207c8     A7 20 02 FB | 	rdlong	local02, fp
207cc     0C 4E 85 F1 | 	sub	fp, #12
207d0     10 25 02 F6 | 	mov	local04, local02
207d4     01 24 16 F2 | 	cmp	local04, #1 wc
207d8     64 05 90 CD |  if_b	jmp	#LR__3599
207dc     04 4E 05 F1 | 	add	fp, #4
207e0     A7 22 02 FB | 	rdlong	local03, fp
207e4     04 4E 85 F1 | 	sub	fp, #4
207e8     14 22 06 F1 | 	add	local03, #20
207ec     11 23 02 FB | 	rdlong	local03, local03
207f0     FF 23 CE F7 | 	test	local03, #511 wz
207f4     3C 04 90 5D |  if_ne	jmp	#LR__3597
207f8     04 4E 05 F1 | 	add	fp, #4
207fc     A7 1E 02 FB | 	rdlong	local01, fp
20800     14 1E 06 F1 | 	add	local01, #20
20804     0F 23 02 FB | 	rdlong	local03, local01
20808     09 22 46 F0 | 	shr	local03, #9
2080c     14 4E 05 F1 | 	add	fp, #20
20810     A7 26 02 FB | 	rdlong	local05, fp
20814     13 29 02 F6 | 	mov	local06, local05
20818     0A 28 06 F1 | 	add	local06, #10
2081c     14 2B E2 FA | 	rdword	local07, local06
20820     0A 28 86 F1 | 	sub	local06, #10
20824     15 2D 32 F9 | 	getword	local08, local07, #0
20828     01 2C 86 F1 | 	sub	local08, #1
2082c     16 23 0A F5 | 	and	local03, local08 wz
20830     18 4E 05 F1 | 	add	fp, #24
20834     A7 22 62 FC | 	wrlong	local03, fp
20838     30 4E 85 F1 | 	sub	fp, #48
2083c     E0 00 90 5D |  if_ne	jmp	#LR__3587
20840     04 4E 05 F1 | 	add	fp, #4
20844     A7 22 02 FB | 	rdlong	local03, fp
20848     04 4E 85 F1 | 	sub	fp, #4
2084c     14 22 06 F1 | 	add	local03, #20
20850     11 23 0A FB | 	rdlong	local03, local03 wz
20854     20 00 90 5D |  if_ne	jmp	#LR__3583
20858     04 4E 05 F1 | 	add	fp, #4
2085c     A7 22 02 FB | 	rdlong	local03, fp
20860     08 22 06 F1 | 	add	local03, #8
20864     11 23 02 FB | 	rdlong	local03, local03
20868     18 4E 05 F1 | 	add	fp, #24
2086c     A7 22 62 FC | 	wrlong	local03, fp
20870     1C 4E 85 F1 | 	sub	fp, #28
20874     28 00 90 FD | 	jmp	#LR__3584
20878                 | LR__3583
20878     04 4E 05 F1 | 	add	fp, #4
2087c     A7 2C 02 FB | 	rdlong	local08, fp
20880     16 13 02 F6 | 	mov	arg01, local08
20884     04 4E 85 F1 | 	sub	fp, #4
20888     18 2C 06 F1 | 	add	local08, #24
2088c     16 15 02 FB | 	rdlong	arg02, local08
20890     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
20894     1C 4E 05 F1 | 	add	fp, #28
20898     A7 FA 61 FC | 	wrlong	result1, fp
2089c     1C 4E 85 F1 | 	sub	fp, #28
208a0                 | LR__3584
208a0     1C 4E 05 F1 | 	add	fp, #28
208a4     A7 22 02 FB | 	rdlong	local03, fp
208a8     1C 4E 85 F1 | 	sub	fp, #28
208ac     02 22 16 F2 | 	cmp	local03, #2 wc
208b0     1C 00 90 3D |  if_ae	jmp	#LR__3585
208b4     04 4E 05 F1 | 	add	fp, #4
208b8     A7 22 02 FB | 	rdlong	local03, fp
208bc     04 4E 85 F1 | 	sub	fp, #4
208c0     11 22 06 F1 | 	add	local03, #17
208c4     11 05 48 FC | 	wrbyte	#2, local03
208c8     02 FA 05 F6 | 	mov	result1, #2
208cc     74 04 90 FD | 	jmp	#LR__3600
208d0                 | LR__3585
208d0     1C 4E 05 F1 | 	add	fp, #28
208d4     A7 22 02 FB | 	rdlong	local03, fp
208d8     1C 4E 85 F1 | 	sub	fp, #28
208dc     FF FF 7F FF 
208e0     FF 23 0E F2 | 	cmp	local03, ##-1 wz
208e4     1C 00 90 5D |  if_ne	jmp	#LR__3586
208e8     04 4E 05 F1 | 	add	fp, #4
208ec     A7 22 02 FB | 	rdlong	local03, fp
208f0     04 4E 85 F1 | 	sub	fp, #4
208f4     11 22 06 F1 | 	add	local03, #17
208f8     11 03 48 FC | 	wrbyte	#1, local03
208fc     01 FA 05 F6 | 	mov	result1, #1
20900     40 04 90 FD | 	jmp	#LR__3600
20904                 | LR__3586
20904     04 4E 05 F1 | 	add	fp, #4
20908     A7 22 02 FB | 	rdlong	local03, fp
2090c     18 4E 05 F1 | 	add	fp, #24
20910     A7 2C 02 FB | 	rdlong	local08, fp
20914     1C 4E 85 F1 | 	sub	fp, #28
20918     18 22 06 F1 | 	add	local03, #24
2091c     11 2D 62 FC | 	wrlong	local08, local03
20920                 | LR__3587
20920     18 4E 05 F1 | 	add	fp, #24
20924     A7 12 02 FB | 	rdlong	arg01, fp
20928     14 4E 85 F1 | 	sub	fp, #20
2092c     A7 22 02 FB | 	rdlong	local03, fp
20930     04 4E 85 F1 | 	sub	fp, #4
20934     18 22 06 F1 | 	add	local03, #24
20938     11 15 02 FB | 	rdlong	arg02, local03
2093c     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
20940     20 4E 05 F1 | 	add	fp, #32
20944     A7 FA 61 FC | 	wrlong	result1, fp
20948     20 4E 85 F1 | 	sub	fp, #32
2094c     00 FA 0D F2 | 	cmp	result1, #0 wz
20950     1C 00 90 5D |  if_ne	jmp	#LR__3588
20954     04 4E 05 F1 | 	add	fp, #4
20958     A7 22 02 FB | 	rdlong	local03, fp
2095c     04 4E 85 F1 | 	sub	fp, #4
20960     11 22 06 F1 | 	add	local03, #17
20964     11 05 48 FC | 	wrbyte	#2, local03
20968     02 FA 05 F6 | 	mov	result1, #2
2096c     D4 03 90 FD | 	jmp	#LR__3600
20970                 | LR__3588
20970     20 4E 05 F1 | 	add	fp, #32
20974     A7 22 02 FB | 	rdlong	local03, fp
20978     10 4E 05 F1 | 	add	fp, #16
2097c     A7 2C 02 FB | 	rdlong	local08, fp
20980     16 23 02 F1 | 	add	local03, local08
20984     10 4E 85 F1 | 	sub	fp, #16
20988     A7 22 62 FC | 	wrlong	local03, fp
2098c     14 4E 85 F1 | 	sub	fp, #20
20990     A7 22 02 FB | 	rdlong	local03, fp
20994     09 22 46 F0 | 	shr	local03, #9
20998     20 4E 05 F1 | 	add	fp, #32
2099c     A7 22 62 FC | 	wrlong	local03, fp
209a0     2C 4E 85 F1 | 	sub	fp, #44
209a4     01 22 16 F2 | 	cmp	local03, #1 wc
209a8     5C 01 90 CD |  if_b	jmp	#LR__3592
209ac     30 4E 05 F1 | 	add	fp, #48
209b0     A7 22 02 FB | 	rdlong	local03, fp
209b4     04 4E 85 F1 | 	sub	fp, #4
209b8     A7 2C 02 FB | 	rdlong	local08, fp
209bc     16 23 02 F1 | 	add	local03, local08
209c0     14 4E 85 F1 | 	sub	fp, #20
209c4     A7 2C 02 FB | 	rdlong	local08, fp
209c8     18 4E 85 F1 | 	sub	fp, #24
209cc     0A 2C 06 F1 | 	add	local08, #10
209d0     16 2D E2 FA | 	rdword	local08, local08
209d4     16 23 1A F2 | 	cmp	local03, local08 wcz
209d8     28 00 90 ED |  if_be	jmp	#LR__3589
209dc     18 4E 05 F1 | 	add	fp, #24
209e0     A7 1E 02 FB | 	rdlong	local01, fp
209e4     0A 1E 06 F1 | 	add	local01, #10
209e8     0F 23 E2 FA | 	rdword	local03, local01
209ec     18 4E 05 F1 | 	add	fp, #24
209f0     A7 2C 02 FB | 	rdlong	local08, fp
209f4     16 23 82 F1 | 	sub	local03, local08
209f8     04 4E 85 F1 | 	sub	fp, #4
209fc     A7 22 62 FC | 	wrlong	local03, fp
20a00     2C 4E 85 F1 | 	sub	fp, #44
20a04                 | LR__3589
20a04     18 4E 05 F1 | 	add	fp, #24
20a08     A7 1E 02 FB | 	rdlong	local01, fp
20a0c     01 1E 06 F1 | 	add	local01, #1
20a10     0F 13 C2 FA | 	rdbyte	arg01, local01
20a14     1C 4E 05 F1 | 	add	fp, #28
20a18     A7 14 02 FB | 	rdlong	arg02, fp
20a1c     14 4E 85 F1 | 	sub	fp, #20
20a20     A7 16 02 FB | 	rdlong	arg03, fp
20a24     0C 4E 05 F1 | 	add	fp, #12
20a28     A7 18 02 FB | 	rdlong	arg04, fp
20a2c     2C 4E 85 F1 | 	sub	fp, #44
20a30     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
20a34     00 FA 0D F2 | 	cmp	result1, #0 wz
20a38     1C 00 90 AD |  if_e	jmp	#LR__3590
20a3c     04 4E 05 F1 | 	add	fp, #4
20a40     A7 22 02 FB | 	rdlong	local03, fp
20a44     04 4E 85 F1 | 	sub	fp, #4
20a48     11 22 06 F1 | 	add	local03, #17
20a4c     11 03 48 FC | 	wrbyte	#1, local03
20a50     01 FA 05 F6 | 	mov	result1, #1
20a54     EC 02 90 FD | 	jmp	#LR__3600
20a58                 | LR__3590
20a58     04 4E 05 F1 | 	add	fp, #4
20a5c     A7 1E 02 FB | 	rdlong	local01, fp
20a60     04 4E 85 F1 | 	sub	fp, #4
20a64     10 1E 06 F1 | 	add	local01, #16
20a68     0F 23 C2 FA | 	rdbyte	local03, local01
20a6c     80 22 CE F7 | 	test	local03, #128 wz
20a70     78 00 90 AD |  if_e	jmp	#LR__3591
20a74     04 4E 05 F1 | 	add	fp, #4
20a78     A7 2C 02 FB | 	rdlong	local08, fp
20a7c     1C 2C 06 F1 | 	add	local08, #28
20a80     16 2D 02 FB | 	rdlong	local08, local08
20a84     1C 4E 05 F1 | 	add	fp, #28
20a88     A7 2E 02 FB | 	rdlong	local09, fp
20a8c     17 2D 82 F1 | 	sub	local08, local09
20a90     0C 4E 05 F1 | 	add	fp, #12
20a94     A7 30 02 FB | 	rdlong	local10, fp
20a98     2C 4E 85 F1 | 	sub	fp, #44
20a9c     18 33 02 F6 | 	mov	local11, local10
20aa0     19 2D 12 F2 | 	cmp	local08, local11 wc
20aa4     44 00 90 3D |  if_ae	jmp	#LR__3591
20aa8     34 4E 05 F1 | 	add	fp, #52
20aac     A7 12 02 FB | 	rdlong	arg01, fp
20ab0     30 4E 85 F1 | 	sub	fp, #48
20ab4     A7 14 02 FB | 	rdlong	arg02, fp
20ab8     0A 33 02 F6 | 	mov	local11, arg02
20abc     1C 32 06 F1 | 	add	local11, #28
20ac0     19 2F 02 FB | 	rdlong	local09, local11
20ac4     1C 4E 05 F1 | 	add	fp, #28
20ac8     A7 26 02 FB | 	rdlong	local05, fp
20acc     13 2F 82 F1 | 	sub	local09, local05
20ad0     09 2E 66 F0 | 	shl	local09, #9
20ad4     17 33 02 F6 | 	mov	local11, local09
20ad8     17 13 02 F1 | 	add	arg01, local09
20adc     20 4E 85 F1 | 	sub	fp, #32
20ae0     28 14 06 F1 | 	add	arg02, #40
20ae4     09 16 C6 F9 | 	decod	arg03, #9
20ae8     A4 4C BF FD | 	call	#__system____builtin_memmove
20aec                 | LR__3591
20aec     2C 4E 05 F1 | 	add	fp, #44
20af0     A7 22 02 FB | 	rdlong	local03, fp
20af4     09 22 66 F0 | 	shl	local03, #9
20af8     04 4E 85 F1 | 	sub	fp, #4
20afc     A7 22 62 FC | 	wrlong	local03, fp
20b00     28 4E 85 F1 | 	sub	fp, #40
20b04                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
20b04                 | ' 				}
20b04                 | ' 
20b04                 | ' 
20b04                 | ' 				rcnt =  ((UINT) 512 )  * cc;
20b04                 | ' 				continue;
20b04     B4 01 90 FD | 	jmp	#LR__3598
20b08                 | LR__3592
20b08     04 4E 05 F1 | 	add	fp, #4
20b0c     A7 22 02 FB | 	rdlong	local03, fp
20b10     1C 22 06 F1 | 	add	local03, #28
20b14     11 23 02 FB | 	rdlong	local03, local03
20b18     1C 4E 05 F1 | 	add	fp, #28
20b1c     A7 1E 02 FB | 	rdlong	local01, fp
20b20     20 4E 85 F1 | 	sub	fp, #32
20b24     0F 23 0A F2 | 	cmp	local03, local01 wz
20b28     EC 00 90 AD |  if_e	jmp	#LR__3596
20b2c     04 4E 05 F1 | 	add	fp, #4
20b30     A7 1E 02 FB | 	rdlong	local01, fp
20b34     04 4E 85 F1 | 	sub	fp, #4
20b38     10 1E 06 F1 | 	add	local01, #16
20b3c     0F 23 C2 FA | 	rdbyte	local03, local01
20b40     80 22 CE F7 | 	test	local03, #128 wz
20b44     7C 00 90 AD |  if_e	jmp	#LR__3594
20b48     18 4E 05 F1 | 	add	fp, #24
20b4c     A7 1E 02 FB | 	rdlong	local01, fp
20b50     01 1E 06 F1 | 	add	local01, #1
20b54     0F 13 C2 FA | 	rdbyte	arg01, local01
20b58     14 4E 85 F1 | 	sub	fp, #20
20b5c     A7 22 02 FB | 	rdlong	local03, fp
20b60     11 15 02 F6 | 	mov	arg02, local03
20b64     28 14 06 F1 | 	add	arg02, #40
20b68     04 4E 85 F1 | 	sub	fp, #4
20b6c     1C 22 06 F1 | 	add	local03, #28
20b70     11 17 02 FB | 	rdlong	arg03, local03
20b74     01 18 06 F6 | 	mov	arg04, #1
20b78     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
20b7c     00 FA 0D F2 | 	cmp	result1, #0 wz
20b80     1C 00 90 AD |  if_e	jmp	#LR__3593
20b84     04 4E 05 F1 | 	add	fp, #4
20b88     A7 22 02 FB | 	rdlong	local03, fp
20b8c     04 4E 85 F1 | 	sub	fp, #4
20b90     11 22 06 F1 | 	add	local03, #17
20b94     11 03 48 FC | 	wrbyte	#1, local03
20b98     01 FA 05 F6 | 	mov	result1, #1
20b9c     A4 01 90 FD | 	jmp	#LR__3600
20ba0                 | LR__3593
20ba0     04 4E 05 F1 | 	add	fp, #4
20ba4     A7 32 02 FB | 	rdlong	local11, fp
20ba8     19 23 02 F6 | 	mov	local03, local11
20bac     04 4E 85 F1 | 	sub	fp, #4
20bb0     10 32 06 F1 | 	add	local11, #16
20bb4     19 33 C2 FA | 	rdbyte	local11, local11
20bb8     7F 32 06 F5 | 	and	local11, #127
20bbc     10 22 06 F1 | 	add	local03, #16
20bc0     11 33 42 FC | 	wrbyte	local11, local03
20bc4                 | LR__3594
20bc4     18 4E 05 F1 | 	add	fp, #24
20bc8     A7 1E 02 FB | 	rdlong	local01, fp
20bcc     01 1E 06 F1 | 	add	local01, #1
20bd0     0F 13 C2 FA | 	rdbyte	arg01, local01
20bd4     14 4E 85 F1 | 	sub	fp, #20
20bd8     A7 14 02 FB | 	rdlong	arg02, fp
20bdc     28 14 06 F1 | 	add	arg02, #40
20be0     1C 4E 05 F1 | 	add	fp, #28
20be4     A7 16 02 FB | 	rdlong	arg03, fp
20be8     20 4E 85 F1 | 	sub	fp, #32
20bec     01 18 06 F6 | 	mov	arg04, #1
20bf0     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
20bf4     00 FA 0D F2 | 	cmp	result1, #0 wz
20bf8     1C 00 90 AD |  if_e	jmp	#LR__3595
20bfc     04 4E 05 F1 | 	add	fp, #4
20c00     A7 22 02 FB | 	rdlong	local03, fp
20c04     04 4E 85 F1 | 	sub	fp, #4
20c08     11 22 06 F1 | 	add	local03, #17
20c0c     11 03 48 FC | 	wrbyte	#1, local03
20c10     01 FA 05 F6 | 	mov	result1, #1
20c14     2C 01 90 FD | 	jmp	#LR__3600
20c18                 | LR__3595
20c18                 | LR__3596
20c18     04 4E 05 F1 | 	add	fp, #4
20c1c     A7 22 02 FB | 	rdlong	local03, fp
20c20     1C 4E 05 F1 | 	add	fp, #28
20c24     A7 32 02 FB | 	rdlong	local11, fp
20c28     20 4E 85 F1 | 	sub	fp, #32
20c2c     1C 22 06 F1 | 	add	local03, #28
20c30     11 33 62 FC | 	wrlong	local11, local03
20c34                 | LR__3597
20c34     04 4E 05 F1 | 	add	fp, #4
20c38     A7 1E 02 FB | 	rdlong	local01, fp
20c3c     14 1E 06 F1 | 	add	local01, #20
20c40     0F 33 02 FB | 	rdlong	local11, local01
20c44     FF 33 06 F5 | 	and	local11, #511
20c48     09 22 C6 F9 | 	decod	local03, #9
20c4c     19 23 82 F1 | 	sub	local03, local11
20c50     24 4E 05 F1 | 	add	fp, #36
20c54     A7 22 62 FC | 	wrlong	local03, fp
20c58     1C 4E 85 F1 | 	sub	fp, #28
20c5c     A7 32 02 FB | 	rdlong	local11, fp
20c60     0C 4E 85 F1 | 	sub	fp, #12
20c64     19 23 1A F2 | 	cmp	local03, local11 wcz
20c68     0C 4E 05 11 |  if_a	add	fp, #12
20c6c     A7 22 02 1B |  if_a	rdlong	local03, fp
20c70     1C 4E 05 11 |  if_a	add	fp, #28
20c74     A7 22 62 1C |  if_a	wrlong	local03, fp
20c78     28 4E 85 11 |  if_a	sub	fp, #40
20c7c     34 4E 05 F1 | 	add	fp, #52
20c80     A7 12 02 FB | 	rdlong	arg01, fp
20c84     30 4E 85 F1 | 	sub	fp, #48
20c88     A7 28 02 FB | 	rdlong	local06, fp
20c8c     14 15 02 F6 | 	mov	arg02, local06
20c90     28 14 06 F1 | 	add	arg02, #40
20c94     14 28 06 F1 | 	add	local06, #20
20c98     14 33 02 FB | 	rdlong	local11, local06
20c9c     19 2F 02 F6 | 	mov	local09, local11
20ca0     17 31 02 F6 | 	mov	local10, local09
20ca4     FF 31 06 F5 | 	and	local10, #511
20ca8     18 15 02 F1 | 	add	arg02, local10
20cac     24 4E 05 F1 | 	add	fp, #36
20cb0     A7 16 02 FB | 	rdlong	arg03, fp
20cb4     28 4E 85 F1 | 	sub	fp, #40
20cb8     D4 4A BF FD | 	call	#__system____builtin_memmove
20cbc                 | LR__3598
20cbc     0C 4E 05 F1 | 	add	fp, #12
20cc0     A7 22 02 FB | 	rdlong	local03, fp
20cc4     1C 4E 05 F1 | 	add	fp, #28
20cc8     A7 2C 02 FB | 	rdlong	local08, fp
20ccc     16 23 82 F1 | 	sub	local03, local08
20cd0     1C 4E 85 F1 | 	sub	fp, #28
20cd4     A7 22 62 FC | 	wrlong	local03, fp
20cd8     04 4E 05 F1 | 	add	fp, #4
20cdc     A7 1E 02 FB | 	rdlong	local01, fp
20ce0     0F 2B 02 FB | 	rdlong	local07, local01
20ce4     18 4E 05 F1 | 	add	fp, #24
20ce8     A7 2C 02 FB | 	rdlong	local08, fp
20cec     16 2B 02 F1 | 	add	local07, local08
20cf0     0F 2B 62 FC | 	wrlong	local07, local01
20cf4     0C 4E 05 F1 | 	add	fp, #12
20cf8     A7 22 02 FB | 	rdlong	local03, fp
20cfc     0C 4E 85 F1 | 	sub	fp, #12
20d00     A7 34 02 FB | 	rdlong	local12, fp
20d04     1A 23 02 F1 | 	add	local03, local12
20d08     0C 4E 05 F1 | 	add	fp, #12
20d0c     A7 22 62 FC | 	wrlong	local03, fp
20d10     30 4E 85 F1 | 	sub	fp, #48
20d14     A7 36 02 FB | 	rdlong	local13, fp
20d18     1B 23 02 F6 | 	mov	local03, local13
20d1c     14 36 06 F1 | 	add	local13, #20
20d20     1B 39 02 FB | 	rdlong	local14, local13
20d24     24 4E 05 F1 | 	add	fp, #36
20d28     A7 28 02 FB | 	rdlong	local06, fp
20d2c     28 4E 85 F1 | 	sub	fp, #40
20d30     14 39 02 F1 | 	add	local14, local06
20d34     14 22 06 F1 | 	add	local03, #20
20d38     11 39 62 FC | 	wrlong	local14, local03
20d3c     84 FA 9F FD | 	jmp	#LR__3582
20d40                 | LR__3599
20d40                 | ' 
20d40                 | ' 
20d40                 | ' 
20d40                 | ' 
20d40                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
20d40                 | ' 
20d40                 | ' 	}
20d40                 | ' 
20d40                 | ' 	return FR_OK ;
20d40     00 FA 05 F6 | 	mov	result1, #0
20d44                 | LR__3600
20d44     A7 F0 03 F6 | 	mov	ptra, fp
20d48     B2 00 A0 FD | 	call	#popregs_
20d4c                 | _fatfs_cc_f_read_ret
20d4c     2D 00 64 FD | 	ret
20d50                 | 
20d50                 | _fatfs_cc_f_write
20d50     15 4A 05 F6 | 	mov	COUNT_, #21
20d54     A8 00 A0 FD | 	call	#pushregs_
20d58     34 F0 07 F1 | 	add	ptra, #52
20d5c     04 4E 05 F1 | 	add	fp, #4
20d60     A7 12 62 FC | 	wrlong	arg01, fp
20d64     04 4E 05 F1 | 	add	fp, #4
20d68     A7 14 62 FC | 	wrlong	arg02, fp
20d6c     04 4E 05 F1 | 	add	fp, #4
20d70     A7 16 62 FC | 	wrlong	arg03, fp
20d74     04 4E 05 F1 | 	add	fp, #4
20d78     A7 18 62 FC | 	wrlong	arg04, fp
20d7c     08 4E 85 F1 | 	sub	fp, #8
20d80     A7 FA 01 FB | 	rdlong	result1, fp
20d84     28 4E 05 F1 | 	add	fp, #40
20d88     A7 FA 61 FC | 	wrlong	result1, fp
20d8c     20 4E 85 F1 | 	sub	fp, #32
20d90     A7 FA 01 FB | 	rdlong	result1, fp
20d94     FD 00 68 FC | 	wrlong	#0, result1
20d98     0C 4E 85 F1 | 	sub	fp, #12
20d9c     A7 12 02 FB | 	rdlong	arg01, fp
20da0     14 4E 05 F1 | 	add	fp, #20
20da4     A7 14 02 F6 | 	mov	arg02, fp
20da8     18 4E 85 F1 | 	sub	fp, #24
20dac     88 F0 BF FD | 	call	#_fatfs_cc_validate
20db0     14 4E 05 F1 | 	add	fp, #20
20db4     A7 FA 61 FC | 	wrlong	result1, fp
20db8     00 FA 4D F2 | 	cmps	result1, #0 wz
20dbc     14 4E 85 F1 | 	sub	fp, #20
20dc0     20 00 90 5D |  if_ne	jmp	#LR__3610
20dc4     04 4E 05 F1 | 	add	fp, #4
20dc8     A7 14 02 FB | 	rdlong	arg02, fp
20dcc     11 14 06 F1 | 	add	arg02, #17
20dd0     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
20dd4     10 4E 05 F1 | 	add	fp, #16
20dd8     A7 14 62 FC | 	wrlong	arg02, fp
20ddc     14 4E 85 F1 | 	sub	fp, #20
20de0     10 00 90 AD |  if_e	jmp	#LR__3611
20de4                 | LR__3610
20de4     14 4E 05 F1 | 	add	fp, #20
20de8     A7 FA 01 FB | 	rdlong	result1, fp
20dec     14 4E 85 F1 | 	sub	fp, #20
20df0     44 07 90 FD | 	jmp	#LR__3633
20df4                 | LR__3611
20df4     04 4E 05 F1 | 	add	fp, #4
20df8     A7 14 02 FB | 	rdlong	arg02, fp
20dfc     04 4E 85 F1 | 	sub	fp, #4
20e00     10 14 06 F1 | 	add	arg02, #16
20e04     0A 15 C2 FA | 	rdbyte	arg02, arg02
20e08     02 14 CE F7 | 	test	arg02, #2 wz
20e0c     07 FA 05 A6 |  if_e	mov	result1, #7
20e10     24 07 90 AD |  if_e	jmp	#LR__3633
20e14     04 4E 05 F1 | 	add	fp, #4
20e18     A7 14 02 FB | 	rdlong	arg02, fp
20e1c     0A 13 02 F6 | 	mov	arg01, arg02
20e20     14 12 06 F1 | 	add	arg01, #20
20e24     09 13 02 FB | 	rdlong	arg01, arg01
20e28     08 4E 05 F1 | 	add	fp, #8
20e2c     A7 FA 01 FB | 	rdlong	result1, fp
20e30     FD 12 02 F1 | 	add	arg01, result1
20e34     0C 4E 85 F1 | 	sub	fp, #12
20e38     14 14 06 F1 | 	add	arg02, #20
20e3c     0A FB 01 FB | 	rdlong	result1, arg02
20e40     FD 12 12 F2 | 	cmp	arg01, result1 wc
20e44     24 00 90 3D |  if_ae	jmp	#LR__3612
20e48     04 4E 05 F1 | 	add	fp, #4
20e4c     A7 14 02 FB | 	rdlong	arg02, fp
20e50     01 FA 65 F6 | 	neg	result1, #1
20e54     14 14 06 F1 | 	add	arg02, #20
20e58     0A 15 02 FB | 	rdlong	arg02, arg02
20e5c     0A FB 81 F1 | 	sub	result1, arg02
20e60     08 4E 05 F1 | 	add	fp, #8
20e64     A7 FA 61 FC | 	wrlong	result1, fp
20e68     0C 4E 85 F1 | 	sub	fp, #12
20e6c                 | LR__3612
20e6c                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
20e6c                 | ' 	}
20e6c                 | ' 
20e6c                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
20e6c                 | LR__3613
20e6c     0C 4E 05 F1 | 	add	fp, #12
20e70     A7 FA 01 FB | 	rdlong	result1, fp
20e74     0C 4E 85 F1 | 	sub	fp, #12
20e78     01 FA 15 F2 | 	cmp	result1, #1 wc
20e7c     90 06 90 CD |  if_b	jmp	#LR__3632
20e80     04 4E 05 F1 | 	add	fp, #4
20e84     A7 FA 01 FB | 	rdlong	result1, fp
20e88     04 4E 85 F1 | 	sub	fp, #4
20e8c     14 FA 05 F1 | 	add	result1, #20
20e90     FD FA 01 FB | 	rdlong	result1, result1
20e94     FF FB CD F7 | 	test	result1, #511 wz
20e98     D8 04 90 5D |  if_ne	jmp	#LR__3628
20e9c     04 4E 05 F1 | 	add	fp, #4
20ea0     A7 FA 01 FB | 	rdlong	result1, fp
20ea4     14 FA 05 F1 | 	add	result1, #20
20ea8     FD FA 01 FB | 	rdlong	result1, result1
20eac     09 FA 45 F0 | 	shr	result1, #9
20eb0     14 4E 05 F1 | 	add	fp, #20
20eb4     A7 14 02 FB | 	rdlong	arg02, fp
20eb8     0A 14 06 F1 | 	add	arg02, #10
20ebc     0A 19 E2 FA | 	rdword	arg04, arg02
20ec0     0C 15 32 F9 | 	getword	arg02, arg04, #0
20ec4     01 14 86 F1 | 	sub	arg02, #1
20ec8     0A FB 09 F5 | 	and	result1, arg02 wz
20ecc     14 4E 05 F1 | 	add	fp, #20
20ed0     A7 FA 61 FC | 	wrlong	result1, fp
20ed4     2C 4E 85 F1 | 	sub	fp, #44
20ed8     44 01 90 5D |  if_ne	jmp	#LR__3619
20edc     04 4E 05 F1 | 	add	fp, #4
20ee0     A7 FA 01 FB | 	rdlong	result1, fp
20ee4     04 4E 85 F1 | 	sub	fp, #4
20ee8     14 FA 05 F1 | 	add	result1, #20
20eec     FD 14 0A FB | 	rdlong	arg02, result1 wz
20ef0     44 00 90 5D |  if_ne	jmp	#LR__3614
20ef4     04 4E 05 F1 | 	add	fp, #4
20ef8     A7 14 02 FB | 	rdlong	arg02, fp
20efc     08 14 06 F1 | 	add	arg02, #8
20f00     0A 15 0A FB | 	rdlong	arg02, arg02 wz
20f04     18 4E 05 F1 | 	add	fp, #24
20f08     A7 14 62 FC | 	wrlong	arg02, fp
20f0c     1C 4E 85 F1 | 	sub	fp, #28
20f10     4C 00 90 5D |  if_ne	jmp	#LR__3615
20f14     04 4E 05 F1 | 	add	fp, #4
20f18     A7 12 02 FB | 	rdlong	arg01, fp
20f1c     04 4E 85 F1 | 	sub	fp, #4
20f20     00 14 06 F6 | 	mov	arg02, #0
20f24     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
20f28     1C 4E 05 F1 | 	add	fp, #28
20f2c     A7 FA 61 FC | 	wrlong	result1, fp
20f30     1C 4E 85 F1 | 	sub	fp, #28
20f34     28 00 90 FD | 	jmp	#LR__3615
20f38                 | LR__3614
20f38     04 4E 05 F1 | 	add	fp, #4
20f3c     A7 18 02 FB | 	rdlong	arg04, fp
20f40     0C 13 02 F6 | 	mov	arg01, arg04
20f44     04 4E 85 F1 | 	sub	fp, #4
20f48     18 18 06 F1 | 	add	arg04, #24
20f4c     0C 15 02 FB | 	rdlong	arg02, arg04
20f50     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
20f54     1C 4E 05 F1 | 	add	fp, #28
20f58     A7 FA 61 FC | 	wrlong	result1, fp
20f5c     1C 4E 85 F1 | 	sub	fp, #28
20f60                 | LR__3615
20f60     1C 4E 05 F1 | 	add	fp, #28
20f64     A7 FA 09 FB | 	rdlong	result1, fp wz
20f68     1C 4E 85 F1 | 	sub	fp, #28
20f6c     A0 05 90 AD |  if_e	jmp	#LR__3632
20f70     1C 4E 05 F1 | 	add	fp, #28
20f74     A7 FA 01 FB | 	rdlong	result1, fp
20f78     1C 4E 85 F1 | 	sub	fp, #28
20f7c     01 FA 0D F2 | 	cmp	result1, #1 wz
20f80     1C 00 90 5D |  if_ne	jmp	#LR__3616
20f84     04 4E 05 F1 | 	add	fp, #4
20f88     A7 FA 01 FB | 	rdlong	result1, fp
20f8c     04 4E 85 F1 | 	sub	fp, #4
20f90     11 FA 05 F1 | 	add	result1, #17
20f94     FD 04 48 FC | 	wrbyte	#2, result1
20f98     02 FA 05 F6 | 	mov	result1, #2
20f9c     98 05 90 FD | 	jmp	#LR__3633
20fa0                 | LR__3616
20fa0     1C 4E 05 F1 | 	add	fp, #28
20fa4     A7 FA 01 FB | 	rdlong	result1, fp
20fa8     1C 4E 85 F1 | 	sub	fp, #28
20fac     FF FF 7F FF 
20fb0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
20fb4     1C 00 90 5D |  if_ne	jmp	#LR__3617
20fb8     04 4E 05 F1 | 	add	fp, #4
20fbc     A7 FA 01 FB | 	rdlong	result1, fp
20fc0     04 4E 85 F1 | 	sub	fp, #4
20fc4     11 FA 05 F1 | 	add	result1, #17
20fc8     FD 02 48 FC | 	wrbyte	#1, result1
20fcc     01 FA 05 F6 | 	mov	result1, #1
20fd0     64 05 90 FD | 	jmp	#LR__3633
20fd4                 | LR__3617
20fd4     04 4E 05 F1 | 	add	fp, #4
20fd8     A7 FA 01 FB | 	rdlong	result1, fp
20fdc     18 4E 05 F1 | 	add	fp, #24
20fe0     A7 18 02 FB | 	rdlong	arg04, fp
20fe4     18 FA 05 F1 | 	add	result1, #24
20fe8     FD 18 62 FC | 	wrlong	arg04, result1
20fec     18 4E 85 F1 | 	sub	fp, #24
20ff0     A7 FA 01 FB | 	rdlong	result1, fp
20ff4     04 4E 85 F1 | 	sub	fp, #4
20ff8     08 FA 05 F1 | 	add	result1, #8
20ffc     FD FA 09 FB | 	rdlong	result1, result1 wz
21000     1C 00 90 5D |  if_ne	jmp	#LR__3618
21004     04 4E 05 F1 | 	add	fp, #4
21008     A7 18 02 FB | 	rdlong	arg04, fp
2100c     18 4E 05 F1 | 	add	fp, #24
21010     A7 FA 01 FB | 	rdlong	result1, fp
21014     1C 4E 85 F1 | 	sub	fp, #28
21018     08 18 06 F1 | 	add	arg04, #8
2101c     0C FB 61 FC | 	wrlong	result1, arg04
21020                 | LR__3618
21020                 | LR__3619
21020     04 4E 05 F1 | 	add	fp, #4
21024     A7 18 02 FB | 	rdlong	arg04, fp
21028     04 4E 85 F1 | 	sub	fp, #4
2102c     10 18 06 F1 | 	add	arg04, #16
21030     0C 19 C2 FA | 	rdbyte	arg04, arg04
21034     80 18 CE F7 | 	test	arg04, #128 wz
21038     7C 00 90 AD |  if_e	jmp	#LR__3621
2103c     18 4E 05 F1 | 	add	fp, #24
21040     A7 18 02 FB | 	rdlong	arg04, fp
21044     01 18 06 F1 | 	add	arg04, #1
21048     0C 13 C2 FA | 	rdbyte	arg01, arg04
2104c     14 4E 85 F1 | 	sub	fp, #20
21050     A7 18 02 FB | 	rdlong	arg04, fp
21054     0C 15 02 F6 | 	mov	arg02, arg04
21058     28 14 06 F1 | 	add	arg02, #40
2105c     04 4E 85 F1 | 	sub	fp, #4
21060     1C 18 06 F1 | 	add	arg04, #28
21064     0C 17 02 FB | 	rdlong	arg03, arg04
21068     01 18 06 F6 | 	mov	arg04, #1
2106c     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
21070     00 FA 0D F2 | 	cmp	result1, #0 wz
21074     1C 00 90 AD |  if_e	jmp	#LR__3620
21078     04 4E 05 F1 | 	add	fp, #4
2107c     A7 FA 01 FB | 	rdlong	result1, fp
21080     04 4E 85 F1 | 	sub	fp, #4
21084     11 FA 05 F1 | 	add	result1, #17
21088     FD 02 48 FC | 	wrbyte	#1, result1
2108c     01 FA 05 F6 | 	mov	result1, #1
21090     A4 04 90 FD | 	jmp	#LR__3633
21094                 | LR__3620
21094     04 4E 05 F1 | 	add	fp, #4
21098     A7 18 02 FB | 	rdlong	arg04, fp
2109c     0C FB 01 F6 | 	mov	result1, arg04
210a0     04 4E 85 F1 | 	sub	fp, #4
210a4     10 18 06 F1 | 	add	arg04, #16
210a8     0C 19 C2 FA | 	rdbyte	arg04, arg04
210ac     7F 18 06 F5 | 	and	arg04, #127
210b0     10 FA 05 F1 | 	add	result1, #16
210b4     FD 18 42 FC | 	wrbyte	arg04, result1
210b8                 | LR__3621
210b8     18 4E 05 F1 | 	add	fp, #24
210bc     A7 12 02 FB | 	rdlong	arg01, fp
210c0     14 4E 85 F1 | 	sub	fp, #20
210c4     A7 14 02 FB | 	rdlong	arg02, fp
210c8     04 4E 85 F1 | 	sub	fp, #4
210cc     18 14 06 F1 | 	add	arg02, #24
210d0     0A 15 02 FB | 	rdlong	arg02, arg02
210d4     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
210d8     20 4E 05 F1 | 	add	fp, #32
210dc     A7 FA 61 FC | 	wrlong	result1, fp
210e0     20 4E 85 F1 | 	sub	fp, #32
210e4     00 FA 0D F2 | 	cmp	result1, #0 wz
210e8     1C 00 90 5D |  if_ne	jmp	#LR__3622
210ec     04 4E 05 F1 | 	add	fp, #4
210f0     A7 FA 01 FB | 	rdlong	result1, fp
210f4     04 4E 85 F1 | 	sub	fp, #4
210f8     11 FA 05 F1 | 	add	result1, #17
210fc     FD 04 48 FC | 	wrbyte	#2, result1
21100     02 FA 05 F6 | 	mov	result1, #2
21104     30 04 90 FD | 	jmp	#LR__3633
21108                 | LR__3622
21108     20 4E 05 F1 | 	add	fp, #32
2110c     A7 FA 01 FB | 	rdlong	result1, fp
21110     0C 4E 05 F1 | 	add	fp, #12
21114     A7 1E 02 FB | 	rdlong	local01, fp
21118     0F FB 01 F1 | 	add	result1, local01
2111c     0C 4E 85 F1 | 	sub	fp, #12
21120     A7 FA 61 FC | 	wrlong	result1, fp
21124     14 4E 85 F1 | 	sub	fp, #20
21128     A7 FA 01 FB | 	rdlong	result1, fp
2112c     09 FA 45 F0 | 	shr	result1, #9
21130     1C 4E 05 F1 | 	add	fp, #28
21134     A7 FA 61 FC | 	wrlong	result1, fp
21138     28 4E 85 F1 | 	sub	fp, #40
2113c     01 FA 15 F2 | 	cmp	result1, #1 wc
21140     60 01 90 CD |  if_b	jmp	#LR__3626
21144     2C 4E 05 F1 | 	add	fp, #44
21148     A7 FA 01 FB | 	rdlong	result1, fp
2114c     04 4E 85 F1 | 	sub	fp, #4
21150     A7 18 02 FB | 	rdlong	arg04, fp
21154     0C FB 01 F1 | 	add	result1, arg04
21158     10 4E 85 F1 | 	sub	fp, #16
2115c     A7 18 02 FB | 	rdlong	arg04, fp
21160     18 4E 85 F1 | 	sub	fp, #24
21164     0A 18 06 F1 | 	add	arg04, #10
21168     0C 19 E2 FA | 	rdword	arg04, arg04
2116c     0C FB 19 F2 | 	cmp	result1, arg04 wcz
21170     28 00 90 ED |  if_be	jmp	#LR__3623
21174     18 4E 05 F1 | 	add	fp, #24
21178     A7 FA 01 FB | 	rdlong	result1, fp
2117c     0A FA 05 F1 | 	add	result1, #10
21180     FD FA E1 FA | 	rdword	result1, result1
21184     14 4E 05 F1 | 	add	fp, #20
21188     A7 18 02 FB | 	rdlong	arg04, fp
2118c     0C FB 81 F1 | 	sub	result1, arg04
21190     04 4E 85 F1 | 	sub	fp, #4
21194     A7 FA 61 FC | 	wrlong	result1, fp
21198     28 4E 85 F1 | 	sub	fp, #40
2119c                 | LR__3623
2119c     18 4E 05 F1 | 	add	fp, #24
211a0     A7 18 02 FB | 	rdlong	arg04, fp
211a4     01 18 06 F1 | 	add	arg04, #1
211a8     0C 13 C2 FA | 	rdbyte	arg01, arg04
211ac     18 4E 05 F1 | 	add	fp, #24
211b0     A7 14 02 FB | 	rdlong	arg02, fp
211b4     10 4E 85 F1 | 	sub	fp, #16
211b8     A7 16 02 FB | 	rdlong	arg03, fp
211bc     08 4E 05 F1 | 	add	fp, #8
211c0     A7 18 02 FB | 	rdlong	arg04, fp
211c4     28 4E 85 F1 | 	sub	fp, #40
211c8     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
211cc     00 FA 0D F2 | 	cmp	result1, #0 wz
211d0     1C 00 90 AD |  if_e	jmp	#LR__3624
211d4     04 4E 05 F1 | 	add	fp, #4
211d8     A7 1E 02 FB | 	rdlong	local01, fp
211dc     04 4E 85 F1 | 	sub	fp, #4
211e0     11 1E 06 F1 | 	add	local01, #17
211e4     0F 03 48 FC | 	wrbyte	#1, local01
211e8     01 FA 05 F6 | 	mov	result1, #1
211ec     48 03 90 FD | 	jmp	#LR__3633
211f0                 | LR__3624
211f0     04 4E 05 F1 | 	add	fp, #4
211f4     A7 FA 01 FB | 	rdlong	result1, fp
211f8     1C FA 05 F1 | 	add	result1, #28
211fc     FD FA 01 FB | 	rdlong	result1, result1
21200     1C 4E 05 F1 | 	add	fp, #28
21204     A7 20 02 FB | 	rdlong	local02, fp
21208     10 FB 81 F1 | 	sub	result1, local02
2120c     08 4E 05 F1 | 	add	fp, #8
21210     A7 18 02 FB | 	rdlong	arg04, fp
21214     28 4E 85 F1 | 	sub	fp, #40
21218     0C FB 11 F2 | 	cmp	result1, arg04 wc
2121c     68 00 90 3D |  if_ae	jmp	#LR__3625
21220     04 4E 05 F1 | 	add	fp, #4
21224     A7 12 02 FB | 	rdlong	arg01, fp
21228     28 12 06 F1 | 	add	arg01, #40
2122c     2C 4E 05 F1 | 	add	fp, #44
21230     A7 14 02 FB | 	rdlong	arg02, fp
21234     2C 4E 85 F1 | 	sub	fp, #44
21238     A7 FA 01 FB | 	rdlong	result1, fp
2123c     1C FA 05 F1 | 	add	result1, #28
21240     FD 22 02 FB | 	rdlong	local03, result1
21244     1C 4E 05 F1 | 	add	fp, #28
21248     A7 18 02 FB | 	rdlong	arg04, fp
2124c     20 4E 85 F1 | 	sub	fp, #32
21250     0C 23 82 F1 | 	sub	local03, arg04
21254     09 22 66 F0 | 	shl	local03, #9
21258     11 15 02 F1 | 	add	arg02, local03
2125c     09 16 C6 F9 | 	decod	arg03, #9
21260     2C 45 BF FD | 	call	#__system____builtin_memmove
21264     04 4E 05 F1 | 	add	fp, #4
21268     A7 18 02 FB | 	rdlong	arg04, fp
2126c     0C FB 01 F6 | 	mov	result1, arg04
21270     04 4E 85 F1 | 	sub	fp, #4
21274     10 18 06 F1 | 	add	arg04, #16
21278     0C 19 C2 FA | 	rdbyte	arg04, arg04
2127c     7F 18 06 F5 | 	and	arg04, #127
21280     10 FA 05 F1 | 	add	result1, #16
21284     FD 18 42 FC | 	wrbyte	arg04, result1
21288                 | LR__3625
21288     28 4E 05 F1 | 	add	fp, #40
2128c     A7 FA 01 FB | 	rdlong	result1, fp
21290     09 FA 65 F0 | 	shl	result1, #9
21294     04 4E 85 F1 | 	sub	fp, #4
21298     A7 FA 61 FC | 	wrlong	result1, fp
2129c     24 4E 85 F1 | 	sub	fp, #36
212a0                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
212a0                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
212a0                 | ' 				}
212a0                 | ' 
212a0                 | ' 
212a0                 | ' 				wcnt =  ((UINT) 512 )  * cc;
212a0                 | ' 				continue;
212a0     74 01 90 FD | 	jmp	#LR__3629
212a4                 | LR__3626
212a4     04 4E 05 F1 | 	add	fp, #4
212a8     A7 20 02 FB | 	rdlong	local02, fp
212ac     1C 20 06 F1 | 	add	local02, #28
212b0     10 FB 01 FB | 	rdlong	result1, local02
212b4     1C 4E 05 F1 | 	add	fp, #28
212b8     A7 20 02 FB | 	rdlong	local02, fp
212bc     20 4E 85 F1 | 	sub	fp, #32
212c0     10 FB 09 F2 | 	cmp	result1, local02 wz
212c4     90 00 90 AD |  if_e	jmp	#LR__3627
212c8     04 4E 05 F1 | 	add	fp, #4
212cc     A7 FA 01 FB | 	rdlong	result1, fp
212d0     FD 22 02 F6 | 	mov	local03, result1
212d4     04 4E 85 F1 | 	sub	fp, #4
212d8     14 22 06 F1 | 	add	local03, #20
212dc     11 23 02 FB | 	rdlong	local03, local03
212e0     0C FA 05 F1 | 	add	result1, #12
212e4     FD 24 02 FB | 	rdlong	local04, result1
212e8     12 27 02 F6 | 	mov	local05, local04
212ec     13 23 12 F2 | 	cmp	local03, local05 wc
212f0     64 00 90 3D |  if_ae	jmp	#LR__3627
212f4     18 4E 05 F1 | 	add	fp, #24
212f8     A7 18 02 FB | 	rdlong	arg04, fp
212fc     01 18 06 F1 | 	add	arg04, #1
21300     0C 13 C2 FA | 	rdbyte	arg01, arg04
21304     14 4E 85 F1 | 	sub	fp, #20
21308     A7 28 02 FB | 	rdlong	local06, fp
2130c     28 28 06 F1 | 	add	local06, #40
21310     14 2B 02 F6 | 	mov	local07, local06
21314     1C 4E 05 F1 | 	add	fp, #28
21318     A7 2C 02 FB | 	rdlong	local08, fp
2131c     20 4E 85 F1 | 	sub	fp, #32
21320     01 2E 06 F6 | 	mov	local09, #1
21324     15 15 02 F6 | 	mov	arg02, local07
21328     16 17 02 F6 | 	mov	arg03, local08
2132c     01 18 06 F6 | 	mov	arg04, #1
21330     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
21334     FD 30 0A F6 | 	mov	local10, result1 wz
21338     1C 00 90 AD |  if_e	jmp	#LR__3627
2133c     04 4E 05 F1 | 	add	fp, #4
21340     A7 30 02 FB | 	rdlong	local10, fp
21344     04 4E 85 F1 | 	sub	fp, #4
21348     11 30 06 F1 | 	add	local10, #17
2134c     18 03 48 FC | 	wrbyte	#1, local10
21350                 | ' 				fp->fptr < fp->obj.objsize &&
21350                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
21350                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
21350     01 FA 05 F6 | 	mov	result1, #1
21354     E0 01 90 FD | 	jmp	#LR__3633
21358                 | LR__3627
21358     04 4E 05 F1 | 	add	fp, #4
2135c     A7 18 02 FB | 	rdlong	arg04, fp
21360     1C 4E 05 F1 | 	add	fp, #28
21364     A7 FA 01 FB | 	rdlong	result1, fp
21368     20 4E 85 F1 | 	sub	fp, #32
2136c     1C 18 06 F1 | 	add	arg04, #28
21370     0C FB 61 FC | 	wrlong	result1, arg04
21374                 | LR__3628
21374     04 4E 05 F1 | 	add	fp, #4
21378     A7 FA 01 FB | 	rdlong	result1, fp
2137c     14 FA 05 F1 | 	add	result1, #20
21380     FD FA 01 FB | 	rdlong	result1, result1
21384     FF FB 05 F5 | 	and	result1, #511
21388     09 32 C6 F9 | 	decod	local11, #9
2138c     FD 32 82 F1 | 	sub	local11, result1
21390     20 4E 05 F1 | 	add	fp, #32
21394     A7 32 62 FC | 	wrlong	local11, fp
21398     18 4E 85 F1 | 	sub	fp, #24
2139c     A7 FA 01 FB | 	rdlong	result1, fp
213a0     0C 4E 85 F1 | 	sub	fp, #12
213a4     FD 32 1A F2 | 	cmp	local11, result1 wcz
213a8     0C 4E 05 11 |  if_a	add	fp, #12
213ac     A7 32 02 1B |  if_a	rdlong	local11, fp
213b0     18 4E 05 11 |  if_a	add	fp, #24
213b4     A7 32 62 1C |  if_a	wrlong	local11, fp
213b8     24 4E 85 11 |  if_a	sub	fp, #36
213bc     04 4E 05 F1 | 	add	fp, #4
213c0     A7 32 02 FB | 	rdlong	local11, fp
213c4     19 13 02 F6 | 	mov	arg01, local11
213c8     28 12 06 F1 | 	add	arg01, #40
213cc     14 32 06 F1 | 	add	local11, #20
213d0     19 33 02 FB | 	rdlong	local11, local11
213d4     FF 33 06 F5 | 	and	local11, #511
213d8     19 13 02 F1 | 	add	arg01, local11
213dc     2C 4E 05 F1 | 	add	fp, #44
213e0     A7 14 02 FB | 	rdlong	arg02, fp
213e4     0C 4E 85 F1 | 	sub	fp, #12
213e8     A7 16 02 FB | 	rdlong	arg03, fp
213ec     24 4E 85 F1 | 	sub	fp, #36
213f0     9C 43 BF FD | 	call	#__system____builtin_memmove
213f4     04 4E 05 F1 | 	add	fp, #4
213f8     A7 FA 01 FB | 	rdlong	result1, fp
213fc     FD 32 02 F6 | 	mov	local11, result1
21400     04 4E 85 F1 | 	sub	fp, #4
21404     10 FA 05 F1 | 	add	result1, #16
21408     FD FA C1 FA | 	rdbyte	result1, result1
2140c     80 FA 45 F5 | 	or	result1, #128
21410     10 32 06 F1 | 	add	local11, #16
21414     19 FB 41 FC | 	wrbyte	result1, local11
21418                 | LR__3629
21418     0C 4E 05 F1 | 	add	fp, #12
2141c     A7 32 02 FB | 	rdlong	local11, fp
21420     18 4E 05 F1 | 	add	fp, #24
21424     A7 FA 01 FB | 	rdlong	result1, fp
21428     FD 32 82 F1 | 	sub	local11, result1
2142c     18 4E 85 F1 | 	sub	fp, #24
21430     A7 32 62 FC | 	wrlong	local11, fp
21434     04 4E 05 F1 | 	add	fp, #4
21438     A7 34 02 FB | 	rdlong	local12, fp
2143c     1A 33 02 FB | 	rdlong	local11, local12
21440     14 4E 05 F1 | 	add	fp, #20
21444     A7 36 02 FB | 	rdlong	local13, fp
21448     1B 33 02 F1 | 	add	local11, local13
2144c     1A 33 62 FC | 	wrlong	local11, local12
21450     0C 4E 05 F1 | 	add	fp, #12
21454     A7 32 02 FB | 	rdlong	local11, fp
21458     0C 4E 85 F1 | 	sub	fp, #12
2145c     A7 38 02 FB | 	rdlong	local14, fp
21460     1C 33 02 F1 | 	add	local11, local14
21464     0C 4E 05 F1 | 	add	fp, #12
21468     A7 32 62 FC | 	wrlong	local11, fp
2146c     2C 4E 85 F1 | 	sub	fp, #44
21470     A7 3A 02 FB | 	rdlong	local15, fp
21474     1D 33 02 F6 | 	mov	local11, local15
21478     14 3A 06 F1 | 	add	local15, #20
2147c     1D 3B 02 FB | 	rdlong	local15, local15
21480     20 4E 05 F1 | 	add	fp, #32
21484     A7 3C 02 FB | 	rdlong	local16, fp
21488     1E 3B 02 F1 | 	add	local15, local16
2148c     14 32 06 F1 | 	add	local11, #20
21490     19 3B 62 FC | 	wrlong	local15, local11
21494     20 4E 85 F1 | 	sub	fp, #32
21498     A7 3E 02 FB | 	rdlong	local17, fp
2149c     1F 33 02 F6 | 	mov	local11, local17
214a0     1F 41 02 F6 | 	mov	local18, local17
214a4     04 4E 85 F1 | 	sub	fp, #4
214a8     14 3E 06 F1 | 	add	local17, #20
214ac     1F 43 02 FB | 	rdlong	local19, local17
214b0     0C 40 06 F1 | 	add	local18, #12
214b4     20 45 02 FB | 	rdlong	local20, local18
214b8     22 43 1A F2 | 	cmp	local19, local20 wcz
214bc     24 00 90 ED |  if_be	jmp	#LR__3630
214c0     04 4E 05 F1 | 	add	fp, #4
214c4     A7 26 02 FB | 	rdlong	local05, fp
214c8     04 4E 85 F1 | 	sub	fp, #4
214cc     13 23 02 F6 | 	mov	local03, local05
214d0     14 22 06 F1 | 	add	local03, #20
214d4     11 25 02 FB | 	rdlong	local04, local03
214d8     14 22 86 F1 | 	sub	local03, #20
214dc     12 47 02 F6 | 	mov	local21, local04
214e0     20 00 90 FD | 	jmp	#LR__3631
214e4                 | LR__3630
214e4     04 4E 05 F1 | 	add	fp, #4
214e8     A7 2A 02 FB | 	rdlong	local07, fp
214ec     04 4E 85 F1 | 	sub	fp, #4
214f0     15 31 02 F6 | 	mov	local10, local07
214f4     0C 30 06 F1 | 	add	local10, #12
214f8     18 2D 02 FB | 	rdlong	local08, local10
214fc     0C 30 86 F1 | 	sub	local10, #12
21500     16 47 02 F6 | 	mov	local21, local08
21504                 | LR__3631
21504     0C 32 06 F1 | 	add	local11, #12
21508     19 47 62 FC | 	wrlong	local21, local11
2150c     5C F9 9F FD | 	jmp	#LR__3613
21510                 | LR__3632
21510     04 4E 05 F1 | 	add	fp, #4
21514     A7 34 02 FB | 	rdlong	local12, fp
21518     1A 1F 02 F6 | 	mov	local01, local12
2151c     04 4E 85 F1 | 	sub	fp, #4
21520     10 34 06 F1 | 	add	local12, #16
21524     1A 33 C2 FA | 	rdbyte	local11, local12
21528     40 32 46 F5 | 	or	local11, #64
2152c     10 1E 06 F1 | 	add	local01, #16
21530     0F 33 42 FC | 	wrbyte	local11, local01
21534                 | ' 
21534                 | ' 
21534                 | ' 
21534                 | ' 
21534                 | ' 
21534                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
21534                 | ' 		fp->flag |=  0x80 ;
21534                 | ' 
21534                 | ' 	}
21534                 | ' 
21534                 | ' 	fp->flag |=  0x40 ;
21534                 | ' 
21534                 | ' 	return FR_OK ;
21534     00 FA 05 F6 | 	mov	result1, #0
21538                 | LR__3633
21538     A7 F0 03 F6 | 	mov	ptra, fp
2153c     B2 00 A0 FD | 	call	#popregs_
21540                 | _fatfs_cc_f_write_ret
21540     2D 00 64 FD | 	ret
21544                 | 
21544                 | _fatfs_cc_f_sync
21544     00 4A 05 F6 | 	mov	COUNT_, #0
21548     A8 00 A0 FD | 	call	#pushregs_
2154c     18 F0 07 F1 | 	add	ptra, #24
21550     04 4E 05 F1 | 	add	fp, #4
21554     A7 12 62 FC | 	wrlong	arg01, fp
21558     08 4E 05 F1 | 	add	fp, #8
2155c     A7 14 02 F6 | 	mov	arg02, fp
21560     0C 4E 85 F1 | 	sub	fp, #12
21564     D0 E8 BF FD | 	call	#_fatfs_cc_validate
21568     08 4E 05 F1 | 	add	fp, #8
2156c     A7 FA 61 FC | 	wrlong	result1, fp
21570     08 4E 85 F1 | 	sub	fp, #8
21574     00 FA 0D F2 | 	cmp	result1, #0 wz
21578     C0 01 90 5D |  if_ne	jmp	#LR__3643
2157c     04 4E 05 F1 | 	add	fp, #4
21580     A7 18 02 FB | 	rdlong	arg04, fp
21584     04 4E 85 F1 | 	sub	fp, #4
21588     10 18 06 F1 | 	add	arg04, #16
2158c     0C 19 C2 FA | 	rdbyte	arg04, arg04
21590     40 18 CE F7 | 	test	arg04, #64 wz
21594     A4 01 90 AD |  if_e	jmp	#LR__3642
21598     04 4E 05 F1 | 	add	fp, #4
2159c     A7 18 02 FB | 	rdlong	arg04, fp
215a0     04 4E 85 F1 | 	sub	fp, #4
215a4     10 18 06 F1 | 	add	arg04, #16
215a8     0C 19 C2 FA | 	rdbyte	arg04, arg04
215ac     80 18 CE F7 | 	test	arg04, #128 wz
215b0     64 00 90 AD |  if_e	jmp	#LR__3640
215b4     0C 4E 05 F1 | 	add	fp, #12
215b8     A7 18 02 FB | 	rdlong	arg04, fp
215bc     01 18 06 F1 | 	add	arg04, #1
215c0     0C 13 C2 FA | 	rdbyte	arg01, arg04
215c4     08 4E 85 F1 | 	sub	fp, #8
215c8     A7 18 02 FB | 	rdlong	arg04, fp
215cc     0C 15 02 F6 | 	mov	arg02, arg04
215d0     28 14 06 F1 | 	add	arg02, #40
215d4     04 4E 85 F1 | 	sub	fp, #4
215d8     1C 18 06 F1 | 	add	arg04, #28
215dc     0C 17 02 FB | 	rdlong	arg03, arg04
215e0     01 18 06 F6 | 	mov	arg04, #1
215e4     0C AE BF FD | 	call	#_fatfs_cc_disk_write
215e8     00 FA 0D F2 | 	cmp	result1, #0 wz
215ec     01 FA 05 56 |  if_ne	mov	result1, #1
215f0     54 01 90 5D |  if_ne	jmp	#LR__3644
215f4     04 4E 05 F1 | 	add	fp, #4
215f8     A7 18 02 FB | 	rdlong	arg04, fp
215fc     0C 17 02 F6 | 	mov	arg03, arg04
21600     04 4E 85 F1 | 	sub	fp, #4
21604     10 18 06 F1 | 	add	arg04, #16
21608     0C 19 C2 FA | 	rdbyte	arg04, arg04
2160c     7F 18 06 F5 | 	and	arg04, #127
21610     10 16 06 F1 | 	add	arg03, #16
21614     0B 19 42 FC | 	wrbyte	arg04, arg03
21618                 | LR__3640
21618     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
2161c     10 4E 05 F1 | 	add	fp, #16
21620     A7 FA 61 FC | 	wrlong	result1, fp
21624     04 4E 85 F1 | 	sub	fp, #4
21628     A7 12 02 FB | 	rdlong	arg01, fp
2162c     08 4E 85 F1 | 	sub	fp, #8
21630     A7 18 02 FB | 	rdlong	arg04, fp
21634     04 4E 85 F1 | 	sub	fp, #4
21638     20 18 06 F1 | 	add	arg04, #32
2163c     0C 15 02 FB | 	rdlong	arg02, arg04
21640     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
21644     08 4E 05 F1 | 	add	fp, #8
21648     A7 FA 61 FC | 	wrlong	result1, fp
2164c     08 4E 85 F1 | 	sub	fp, #8
21650     00 FA 0D F2 | 	cmp	result1, #0 wz
21654     E4 00 90 5D |  if_ne	jmp	#LR__3641
21658     04 4E 05 F1 | 	add	fp, #4
2165c     A7 18 02 FB | 	rdlong	arg04, fp
21660     24 18 06 F1 | 	add	arg04, #36
21664     0C 19 02 FB | 	rdlong	arg04, arg04
21668     10 4E 05 F1 | 	add	fp, #16
2166c     A7 18 62 FC | 	wrlong	arg04, fp
21670     0C 17 02 F6 | 	mov	arg03, arg04
21674     0B 16 06 F1 | 	add	arg03, #11
21678     0B 17 C2 FA | 	rdbyte	arg03, arg03
2167c     20 16 46 F5 | 	or	arg03, #32
21680     0B 18 06 F1 | 	add	arg04, #11
21684     0C 17 42 FC | 	wrbyte	arg03, arg04
21688     10 4E 85 F1 | 	sub	fp, #16
2168c     A7 18 02 FB | 	rdlong	arg04, fp
21690     0C 13 02 FB | 	rdlong	arg01, arg04
21694     10 4E 05 F1 | 	add	fp, #16
21698     A7 14 02 FB | 	rdlong	arg02, fp
2169c     14 4E 85 F1 | 	sub	fp, #20
216a0     08 18 06 F1 | 	add	arg04, #8
216a4     0C 17 02 FB | 	rdlong	arg03, arg04
216a8     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
216ac     14 4E 05 F1 | 	add	fp, #20
216b0     A7 12 02 FB | 	rdlong	arg01, fp
216b4     1C 12 06 F1 | 	add	arg01, #28
216b8     10 4E 85 F1 | 	sub	fp, #16
216bc     A7 18 02 FB | 	rdlong	arg04, fp
216c0     0C 18 06 F1 | 	add	arg04, #12
216c4     0C 15 02 FB | 	rdlong	arg02, arg04
216c8     09 15 62 FC | 	wrlong	arg02, arg01
216cc     10 4E 05 F1 | 	add	fp, #16
216d0     A7 12 02 FB | 	rdlong	arg01, fp
216d4     16 12 06 F1 | 	add	arg01, #22
216d8     04 4E 85 F1 | 	sub	fp, #4
216dc     A7 14 02 FB | 	rdlong	arg02, fp
216e0     09 15 62 FC | 	wrlong	arg02, arg01
216e4     04 4E 05 F1 | 	add	fp, #4
216e8     A7 12 02 FB | 	rdlong	arg01, fp
216ec     12 12 06 F1 | 	add	arg01, #18
216f0     09 01 58 FC | 	wrword	#0, arg01
216f4     08 4E 85 F1 | 	sub	fp, #8
216f8     A7 18 02 FB | 	rdlong	arg04, fp
216fc     03 18 06 F1 | 	add	arg04, #3
21700     0C 03 48 FC | 	wrbyte	#1, arg04
21704     A7 12 02 FB | 	rdlong	arg01, fp
21708     0C 4E 85 F1 | 	sub	fp, #12
2170c     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
21710     08 4E 05 F1 | 	add	fp, #8
21714     A7 FA 61 FC | 	wrlong	result1, fp
21718     04 4E 85 F1 | 	sub	fp, #4
2171c     A7 18 02 FB | 	rdlong	arg04, fp
21720     0C 17 02 F6 | 	mov	arg03, arg04
21724     04 4E 85 F1 | 	sub	fp, #4
21728     10 18 06 F1 | 	add	arg04, #16
2172c     0C 19 C2 FA | 	rdbyte	arg04, arg04
21730     BF 18 06 F5 | 	and	arg04, #191
21734     10 16 06 F1 | 	add	arg03, #16
21738     0B 19 42 FC | 	wrbyte	arg04, arg03
2173c                 | LR__3641
2173c                 | LR__3642
2173c                 | LR__3643
2173c                 | ' 					dir = fp->dir_ptr;
2173c                 | ' 					dir[ 11 ] |=  0x20 ;
2173c                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
2173c                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
2173c                 | ' 					st_dword(dir +  22 , tm);
2173c                 | ' 					st_word(dir +  18 , 0);
2173c                 | ' 					fs->wflag = 1;
2173c                 | ' 					res = sync_fs(fs);
2173c                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
2173c                 | ' 				}
2173c                 | ' 			}
2173c                 | ' 		}
2173c                 | ' 	}
2173c                 | ' 
2173c                 | ' 	return res ;
2173c     08 4E 05 F1 | 	add	fp, #8
21740     A7 FA 01 FB | 	rdlong	result1, fp
21744     08 4E 85 F1 | 	sub	fp, #8
21748                 | LR__3644
21748     A7 F0 03 F6 | 	mov	ptra, fp
2174c     B2 00 A0 FD | 	call	#popregs_
21750                 | _fatfs_cc_f_sync_ret
21750     2D 00 64 FD | 	ret
21754                 | 
21754                 | _fatfs_cc_f_close
21754     01 4A 05 F6 | 	mov	COUNT_, #1
21758     A8 00 A0 FD | 	call	#pushregs_
2175c     10 F0 07 F1 | 	add	ptra, #16
21760     04 4E 05 F1 | 	add	fp, #4
21764     A7 12 62 FC | 	wrlong	arg01, fp
21768     04 4E 85 F1 | 	sub	fp, #4
2176c     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
21770     08 4E 05 F1 | 	add	fp, #8
21774     A7 FA 61 FC | 	wrlong	result1, fp
21778     08 4E 85 F1 | 	sub	fp, #8
2177c     00 FA 0D F2 | 	cmp	result1, #0 wz
21780     38 00 90 5D |  if_ne	jmp	#LR__3650
21784     04 4E 05 F1 | 	add	fp, #4
21788     A7 12 02 FB | 	rdlong	arg01, fp
2178c     08 4E 05 F1 | 	add	fp, #8
21790     A7 14 02 F6 | 	mov	arg02, fp
21794     0C 4E 85 F1 | 	sub	fp, #12
21798     9C E6 BF FD | 	call	#_fatfs_cc_validate
2179c     08 4E 05 F1 | 	add	fp, #8
217a0     A7 FA 61 FC | 	wrlong	result1, fp
217a4     08 4E 85 F1 | 	sub	fp, #8
217a8     00 FA 0D F2 | 	cmp	result1, #0 wz
217ac     04 4E 05 A1 |  if_e	add	fp, #4
217b0     A7 1E 02 AB |  if_e	rdlong	local01, fp
217b4     04 4E 85 A1 |  if_e	sub	fp, #4
217b8     0F 01 68 AC |  if_e	wrlong	#0, local01
217bc                 | LR__3650
217bc                 | ' 
217bc                 | ' 
217bc                 | ' 
217bc                 | ' 
217bc                 | ' 			fp->obj.fs = 0;
217bc                 | ' #line 4192 "ff.c"
217bc                 | ' 		}
217bc                 | ' 	}
217bc                 | ' 	return res;
217bc     08 4E 05 F1 | 	add	fp, #8
217c0     A7 FA 01 FB | 	rdlong	result1, fp
217c4     08 4E 85 F1 | 	sub	fp, #8
217c8     A7 F0 03 F6 | 	mov	ptra, fp
217cc     B2 00 A0 FD | 	call	#popregs_
217d0                 | _fatfs_cc_f_close_ret
217d0     2D 00 64 FD | 	ret
217d4                 | 
217d4                 | _fatfs_cc_f_lseek
217d4     00 4A 05 F6 | 	mov	COUNT_, #0
217d8     A8 00 A0 FD | 	call	#pushregs_
217dc     24 F0 07 F1 | 	add	ptra, #36
217e0     04 4E 05 F1 | 	add	fp, #4
217e4     A7 12 62 FC | 	wrlong	arg01, fp
217e8     04 4E 05 F1 | 	add	fp, #4
217ec     A7 14 62 FC | 	wrlong	arg02, fp
217f0     04 4E 85 F1 | 	sub	fp, #4
217f4     A7 12 02 FB | 	rdlong	arg01, fp
217f8     0C 4E 05 F1 | 	add	fp, #12
217fc     A7 14 02 F6 | 	mov	arg02, fp
21800     10 4E 85 F1 | 	sub	fp, #16
21804     30 E6 BF FD | 	call	#_fatfs_cc_validate
21808     0C 4E 05 F1 | 	add	fp, #12
2180c     A7 FA 61 FC | 	wrlong	result1, fp
21810     0C 4E 85 F1 | 	sub	fp, #12
21814     00 FA 0D F2 | 	cmp	result1, #0 wz
21818     1C 00 90 5D |  if_ne	jmp	#LR__3660
2181c     04 4E 05 F1 | 	add	fp, #4
21820     A7 18 02 FB | 	rdlong	arg04, fp
21824     11 18 06 F1 | 	add	arg04, #17
21828     0C 19 C2 FA | 	rdbyte	arg04, arg04
2182c     08 4E 05 F1 | 	add	fp, #8
21830     A7 18 62 FC | 	wrlong	arg04, fp
21834     0C 4E 85 F1 | 	sub	fp, #12
21838                 | LR__3660
21838     0C 4E 05 F1 | 	add	fp, #12
2183c     A7 18 0A FB | 	rdlong	arg04, fp wz
21840     0C 4E 85 F1 | 	sub	fp, #12
21844     0C 4E 05 51 |  if_ne	add	fp, #12
21848     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2184c     0C 4E 85 51 |  if_ne	sub	fp, #12
21850     40 06 90 5D |  if_ne	jmp	#LR__3683
21854     04 4E 05 F1 | 	add	fp, #4
21858     A7 18 02 FB | 	rdlong	arg04, fp
2185c     04 4E 05 F1 | 	add	fp, #4
21860     A7 16 02 FB | 	rdlong	arg03, fp
21864     08 4E 85 F1 | 	sub	fp, #8
21868     0C 18 06 F1 | 	add	arg04, #12
2186c     0C 19 02 FB | 	rdlong	arg04, arg04
21870     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
21874     3C 00 90 ED |  if_be	jmp	#LR__3661
21878     04 4E 05 F1 | 	add	fp, #4
2187c     A7 16 02 FB | 	rdlong	arg03, fp
21880     04 4E 85 F1 | 	sub	fp, #4
21884     10 16 06 F1 | 	add	arg03, #16
21888     0B 17 C2 FA | 	rdbyte	arg03, arg03
2188c     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
21890     02 16 CE F7 | 	test	arg03, #2 wz
21894     1C 00 90 5D |  if_ne	jmp	#LR__3661
21898     04 4E 05 F1 | 	add	fp, #4
2189c     A7 16 02 FB | 	rdlong	arg03, fp
218a0     0C 16 06 F1 | 	add	arg03, #12
218a4     0B 17 02 FB | 	rdlong	arg03, arg03
218a8     04 4E 05 F1 | 	add	fp, #4
218ac     A7 16 62 FC | 	wrlong	arg03, fp
218b0     08 4E 85 F1 | 	sub	fp, #8
218b4                 | LR__3661
218b4     04 4E 05 F1 | 	add	fp, #4
218b8     A7 16 02 FB | 	rdlong	arg03, fp
218bc     14 16 06 F1 | 	add	arg03, #20
218c0     0B 17 02 FB | 	rdlong	arg03, arg03
218c4     1C 4E 05 F1 | 	add	fp, #28
218c8     A7 16 62 FC | 	wrlong	arg03, fp
218cc     1C 4E 85 F1 | 	sub	fp, #28
218d0     A7 16 02 FB | 	rdlong	arg03, fp
218d4     18 4E 05 F1 | 	add	fp, #24
218d8     A7 00 68 FC | 	wrlong	#0, fp
218dc     14 16 06 F1 | 	add	arg03, #20
218e0     0B 01 68 FC | 	wrlong	#0, arg03
218e4     14 4E 85 F1 | 	sub	fp, #20
218e8     A7 16 02 FB | 	rdlong	arg03, fp
218ec     08 4E 85 F1 | 	sub	fp, #8
218f0     01 16 16 F2 | 	cmp	arg03, #1 wc
218f4     E4 03 90 CD |  if_b	jmp	#LR__3677
218f8     10 4E 05 F1 | 	add	fp, #16
218fc     A7 16 02 FB | 	rdlong	arg03, fp
21900     0A 16 06 F1 | 	add	arg03, #10
21904     0B 19 E2 FA | 	rdword	arg04, arg03
21908     09 18 66 F0 | 	shl	arg04, #9
2190c     08 4E 05 F1 | 	add	fp, #8
21910     A7 18 62 FC | 	wrlong	arg04, fp
21914     08 4E 05 F1 | 	add	fp, #8
21918     A7 18 02 FB | 	rdlong	arg04, fp
2191c     20 4E 85 F1 | 	sub	fp, #32
21920     01 18 16 F2 | 	cmp	arg04, #1 wc
21924     AC 00 90 CD |  if_b	jmp	#LR__3662
21928     08 4E 05 F1 | 	add	fp, #8
2192c     A7 18 02 FB | 	rdlong	arg04, fp
21930     01 18 86 F1 | 	sub	arg04, #1
21934     10 4E 05 F1 | 	add	fp, #16
21938     A7 16 02 FB | 	rdlong	arg03, fp
2193c     0B 19 12 FD | 	qdiv	arg04, arg03
21940     08 4E 05 F1 | 	add	fp, #8
21944     A7 FA 01 FB | 	rdlong	result1, fp
21948     01 FA 85 F1 | 	sub	result1, #1
2194c     18 18 62 FD | 	getqx	arg04
21950     0B FB 11 FD | 	qdiv	result1, arg03
21954     20 4E 85 F1 | 	sub	fp, #32
21958     18 16 62 FD | 	getqx	arg03
2195c     0B 19 12 F2 | 	cmp	arg04, arg03 wc
21960     70 00 90 CD |  if_b	jmp	#LR__3662
21964     04 4E 05 F1 | 	add	fp, #4
21968     A7 16 02 FB | 	rdlong	arg03, fp
2196c     1C 4E 05 F1 | 	add	fp, #28
21970     A7 FA 01 FB | 	rdlong	result1, fp
21974     01 FA 85 F1 | 	sub	result1, #1
21978     08 4E 85 F1 | 	sub	fp, #8
2197c     A7 18 02 FB | 	rdlong	arg04, fp
21980     01 18 86 F1 | 	sub	arg04, #1
21984     0C FB 21 F5 | 	andn	result1, arg04
21988     14 16 06 F1 | 	add	arg03, #20
2198c     0B FB 61 FC | 	wrlong	result1, arg03
21990     10 4E 85 F1 | 	sub	fp, #16
21994     A7 16 02 FB | 	rdlong	arg03, fp
21998     04 4E 85 F1 | 	sub	fp, #4
2199c     A7 18 02 FB | 	rdlong	arg04, fp
219a0     14 18 06 F1 | 	add	arg04, #20
219a4     0C 19 02 FB | 	rdlong	arg04, arg04
219a8     0C 17 82 F1 | 	sub	arg03, arg04
219ac     04 4E 05 F1 | 	add	fp, #4
219b0     A7 16 62 FC | 	wrlong	arg03, fp
219b4     04 4E 85 F1 | 	sub	fp, #4
219b8     A7 16 02 FB | 	rdlong	arg03, fp
219bc     18 16 06 F1 | 	add	arg03, #24
219c0     0B 17 02 FB | 	rdlong	arg03, arg03
219c4     10 4E 05 F1 | 	add	fp, #16
219c8     A7 16 62 FC | 	wrlong	arg03, fp
219cc     14 4E 85 F1 | 	sub	fp, #20
219d0     D0 00 90 FD | 	jmp	#LR__3666
219d4                 | LR__3662
219d4     04 4E 05 F1 | 	add	fp, #4
219d8     A7 16 02 FB | 	rdlong	arg03, fp
219dc     08 16 06 F1 | 	add	arg03, #8
219e0     0B 17 0A FB | 	rdlong	arg03, arg03 wz
219e4     10 4E 05 F1 | 	add	fp, #16
219e8     A7 16 62 FC | 	wrlong	arg03, fp
219ec     14 4E 85 F1 | 	sub	fp, #20
219f0     94 00 90 5D |  if_ne	jmp	#LR__3665
219f4     04 4E 05 F1 | 	add	fp, #4
219f8     A7 12 02 FB | 	rdlong	arg01, fp
219fc     04 4E 85 F1 | 	sub	fp, #4
21a00     00 14 06 F6 | 	mov	arg02, #0
21a04     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
21a08     14 4E 05 F1 | 	add	fp, #20
21a0c     A7 FA 61 FC | 	wrlong	result1, fp
21a10     14 4E 85 F1 | 	sub	fp, #20
21a14     01 FA 0D F2 | 	cmp	result1, #1 wz
21a18     1C 00 90 5D |  if_ne	jmp	#LR__3663
21a1c     04 4E 05 F1 | 	add	fp, #4
21a20     A7 16 02 FB | 	rdlong	arg03, fp
21a24     04 4E 85 F1 | 	sub	fp, #4
21a28     11 16 06 F1 | 	add	arg03, #17
21a2c     0B 05 48 FC | 	wrbyte	#2, arg03
21a30     02 FA 05 F6 | 	mov	result1, #2
21a34     5C 04 90 FD | 	jmp	#LR__3683
21a38                 | LR__3663
21a38     14 4E 05 F1 | 	add	fp, #20
21a3c     A7 FA 01 FB | 	rdlong	result1, fp
21a40     14 4E 85 F1 | 	sub	fp, #20
21a44     FF FF 7F FF 
21a48     FF FB 0D F2 | 	cmp	result1, ##-1 wz
21a4c     1C 00 90 5D |  if_ne	jmp	#LR__3664
21a50     04 4E 05 F1 | 	add	fp, #4
21a54     A7 16 02 FB | 	rdlong	arg03, fp
21a58     04 4E 85 F1 | 	sub	fp, #4
21a5c     11 16 06 F1 | 	add	arg03, #17
21a60     0B 03 48 FC | 	wrbyte	#1, arg03
21a64     01 FA 05 F6 | 	mov	result1, #1
21a68     28 04 90 FD | 	jmp	#LR__3683
21a6c                 | LR__3664
21a6c     04 4E 05 F1 | 	add	fp, #4
21a70     A7 16 02 FB | 	rdlong	arg03, fp
21a74     10 4E 05 F1 | 	add	fp, #16
21a78     A7 18 02 FB | 	rdlong	arg04, fp
21a7c     14 4E 85 F1 | 	sub	fp, #20
21a80     08 16 06 F1 | 	add	arg03, #8
21a84     0B 19 62 FC | 	wrlong	arg04, arg03
21a88                 | LR__3665
21a88     04 4E 05 F1 | 	add	fp, #4
21a8c     A7 16 02 FB | 	rdlong	arg03, fp
21a90     10 4E 05 F1 | 	add	fp, #16
21a94     A7 18 02 FB | 	rdlong	arg04, fp
21a98     14 4E 85 F1 | 	sub	fp, #20
21a9c     18 16 06 F1 | 	add	arg03, #24
21aa0     0B 19 62 FC | 	wrlong	arg04, arg03
21aa4                 | LR__3666
21aa4     14 4E 05 F1 | 	add	fp, #20
21aa8     A7 16 0A FB | 	rdlong	arg03, fp wz
21aac     14 4E 85 F1 | 	sub	fp, #20
21ab0     28 02 90 AD |  if_e	jmp	#LR__3676
21ab4                 | ' 				while (ofs > bcs) {
21ab4                 | LR__3667
21ab4     08 4E 05 F1 | 	add	fp, #8
21ab8     A7 18 02 FB | 	rdlong	arg04, fp
21abc     10 4E 05 F1 | 	add	fp, #16
21ac0     A7 16 02 FB | 	rdlong	arg03, fp
21ac4     18 4E 85 F1 | 	sub	fp, #24
21ac8     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
21acc     68 01 90 ED |  if_be	jmp	#LR__3673
21ad0     08 4E 05 F1 | 	add	fp, #8
21ad4     A7 18 02 FB | 	rdlong	arg04, fp
21ad8     10 4E 05 F1 | 	add	fp, #16
21adc     A7 16 02 FB | 	rdlong	arg03, fp
21ae0     0B 19 82 F1 | 	sub	arg04, arg03
21ae4     10 4E 85 F1 | 	sub	fp, #16
21ae8     A7 18 62 FC | 	wrlong	arg04, fp
21aec     04 4E 85 F1 | 	sub	fp, #4
21af0     A7 18 02 FB | 	rdlong	arg04, fp
21af4     0C FB 01 F6 | 	mov	result1, arg04
21af8     14 18 06 F1 | 	add	arg04, #20
21afc     0C 19 02 FB | 	rdlong	arg04, arg04
21b00     14 4E 05 F1 | 	add	fp, #20
21b04     A7 16 02 FB | 	rdlong	arg03, fp
21b08     0B 19 02 F1 | 	add	arg04, arg03
21b0c     14 FA 05 F1 | 	add	result1, #20
21b10     FD 18 62 FC | 	wrlong	arg04, result1
21b14     14 4E 85 F1 | 	sub	fp, #20
21b18     A7 16 02 FB | 	rdlong	arg03, fp
21b1c     04 4E 85 F1 | 	sub	fp, #4
21b20     10 16 06 F1 | 	add	arg03, #16
21b24     0B 17 C2 FA | 	rdbyte	arg03, arg03
21b28     02 16 CE F7 | 	test	arg03, #2 wz
21b2c     3C 00 90 AD |  if_e	jmp	#LR__3668
21b30     04 4E 05 F1 | 	add	fp, #4
21b34     A7 12 02 FB | 	rdlong	arg01, fp
21b38     10 4E 05 F1 | 	add	fp, #16
21b3c     A7 14 02 FB | 	rdlong	arg02, fp
21b40     14 4E 85 F1 | 	sub	fp, #20
21b44     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
21b48     14 4E 05 F1 | 	add	fp, #20
21b4c     A7 FA 61 FC | 	wrlong	result1, fp
21b50     00 FA 4D F2 | 	cmps	result1, #0 wz
21b54     14 4E 85 F1 | 	sub	fp, #20
21b58     08 4E 05 A1 |  if_e	add	fp, #8
21b5c     A7 00 68 AC |  if_e	wrlong	#0, fp
21b60     08 4E 85 A1 |  if_e	sub	fp, #8
21b64                 | ' 							ofs = 0; break;
21b64     D0 00 90 AD |  if_e	jmp	#LR__3673
21b68     24 00 90 FD | 	jmp	#LR__3669
21b6c                 | LR__3668
21b6c     04 4E 05 F1 | 	add	fp, #4
21b70     A7 12 02 FB | 	rdlong	arg01, fp
21b74     10 4E 05 F1 | 	add	fp, #16
21b78     A7 14 02 FB | 	rdlong	arg02, fp
21b7c     14 4E 85 F1 | 	sub	fp, #20
21b80     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
21b84     14 4E 05 F1 | 	add	fp, #20
21b88     A7 FA 61 FC | 	wrlong	result1, fp
21b8c     14 4E 85 F1 | 	sub	fp, #20
21b90                 | LR__3669
21b90     14 4E 05 F1 | 	add	fp, #20
21b94     A7 16 02 FB | 	rdlong	arg03, fp
21b98     14 4E 85 F1 | 	sub	fp, #20
21b9c     FF FF 7F FF 
21ba0     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
21ba4     1C 00 90 5D |  if_ne	jmp	#LR__3670
21ba8     04 4E 05 F1 | 	add	fp, #4
21bac     A7 16 02 FB | 	rdlong	arg03, fp
21bb0     04 4E 85 F1 | 	sub	fp, #4
21bb4     11 16 06 F1 | 	add	arg03, #17
21bb8     0B 03 48 FC | 	wrbyte	#1, arg03
21bbc     01 FA 05 F6 | 	mov	result1, #1
21bc0     D0 02 90 FD | 	jmp	#LR__3683
21bc4                 | LR__3670
21bc4     14 4E 05 F1 | 	add	fp, #20
21bc8     A7 16 02 FB | 	rdlong	arg03, fp
21bcc     14 4E 85 F1 | 	sub	fp, #20
21bd0     02 16 16 F2 | 	cmp	arg03, #2 wc
21bd4     24 00 90 CD |  if_b	jmp	#LR__3671
21bd8     10 4E 05 F1 | 	add	fp, #16
21bdc     A7 18 02 FB | 	rdlong	arg04, fp
21be0     04 4E 05 F1 | 	add	fp, #4
21be4     A7 16 02 FB | 	rdlong	arg03, fp
21be8     14 4E 85 F1 | 	sub	fp, #20
21bec     18 18 06 F1 | 	add	arg04, #24
21bf0     0C 19 02 FB | 	rdlong	arg04, arg04
21bf4     0C 17 12 F2 | 	cmp	arg03, arg04 wc
21bf8     1C 00 90 CD |  if_b	jmp	#LR__3672
21bfc                 | LR__3671
21bfc     04 4E 05 F1 | 	add	fp, #4
21c00     A7 16 02 FB | 	rdlong	arg03, fp
21c04     04 4E 85 F1 | 	sub	fp, #4
21c08     11 16 06 F1 | 	add	arg03, #17
21c0c     0B 05 48 FC | 	wrbyte	#2, arg03
21c10     02 FA 05 F6 | 	mov	result1, #2
21c14     7C 02 90 FD | 	jmp	#LR__3683
21c18                 | LR__3672
21c18     04 4E 05 F1 | 	add	fp, #4
21c1c     A7 18 02 FB | 	rdlong	arg04, fp
21c20     10 4E 05 F1 | 	add	fp, #16
21c24     A7 16 02 FB | 	rdlong	arg03, fp
21c28     14 4E 85 F1 | 	sub	fp, #20
21c2c     18 18 06 F1 | 	add	arg04, #24
21c30     0C 17 62 FC | 	wrlong	arg03, arg04
21c34     7C FE 9F FD | 	jmp	#LR__3667
21c38                 | LR__3673
21c38     04 4E 05 F1 | 	add	fp, #4
21c3c     A7 16 02 FB | 	rdlong	arg03, fp
21c40     0B 13 02 F6 | 	mov	arg01, arg03
21c44     14 16 06 F1 | 	add	arg03, #20
21c48     0B 15 02 FB | 	rdlong	arg02, arg03
21c4c     04 4E 05 F1 | 	add	fp, #4
21c50     A7 16 02 FB | 	rdlong	arg03, fp
21c54     0B 15 02 F1 | 	add	arg02, arg03
21c58     14 12 06 F1 | 	add	arg01, #20
21c5c     09 15 62 FC | 	wrlong	arg02, arg01
21c60     A7 16 02 FB | 	rdlong	arg03, fp
21c64     08 4E 85 F1 | 	sub	fp, #8
21c68     FF 17 CE F7 | 	test	arg03, #511 wz
21c6c     6C 00 90 AD |  if_e	jmp	#LR__3675
21c70     10 4E 05 F1 | 	add	fp, #16
21c74     A7 12 02 FB | 	rdlong	arg01, fp
21c78     04 4E 05 F1 | 	add	fp, #4
21c7c     A7 14 02 FB | 	rdlong	arg02, fp
21c80     14 4E 85 F1 | 	sub	fp, #20
21c84     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
21c88     1C 4E 05 F1 | 	add	fp, #28
21c8c     A7 FA 61 FC | 	wrlong	result1, fp
21c90     1C 4E 85 F1 | 	sub	fp, #28
21c94     00 FA 0D F2 | 	cmp	result1, #0 wz
21c98     1C 00 90 5D |  if_ne	jmp	#LR__3674
21c9c     04 4E 05 F1 | 	add	fp, #4
21ca0     A7 16 02 FB | 	rdlong	arg03, fp
21ca4     04 4E 85 F1 | 	sub	fp, #4
21ca8     11 16 06 F1 | 	add	arg03, #17
21cac     0B 05 48 FC | 	wrbyte	#2, arg03
21cb0     02 FA 05 F6 | 	mov	result1, #2
21cb4     DC 01 90 FD | 	jmp	#LR__3683
21cb8                 | LR__3674
21cb8     1C 4E 05 F1 | 	add	fp, #28
21cbc     A7 18 02 FB | 	rdlong	arg04, fp
21cc0     14 4E 85 F1 | 	sub	fp, #20
21cc4     A7 16 02 FB | 	rdlong	arg03, fp
21cc8     09 16 46 F0 | 	shr	arg03, #9
21ccc     0B 19 02 F1 | 	add	arg04, arg03
21cd0     14 4E 05 F1 | 	add	fp, #20
21cd4     A7 18 62 FC | 	wrlong	arg04, fp
21cd8     1C 4E 85 F1 | 	sub	fp, #28
21cdc                 | LR__3675
21cdc                 | LR__3676
21cdc                 | LR__3677
21cdc     04 4E 05 F1 | 	add	fp, #4
21ce0     A7 18 02 FB | 	rdlong	arg04, fp
21ce4     0C 17 02 F6 | 	mov	arg03, arg04
21ce8     04 4E 85 F1 | 	sub	fp, #4
21cec     14 16 06 F1 | 	add	arg03, #20
21cf0     0B 17 02 FB | 	rdlong	arg03, arg03
21cf4     0C 18 06 F1 | 	add	arg04, #12
21cf8     0C 19 02 FB | 	rdlong	arg04, arg04
21cfc     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
21d00     3C 00 90 ED |  if_be	jmp	#LR__3678
21d04     04 4E 05 F1 | 	add	fp, #4
21d08     A7 18 02 FB | 	rdlong	arg04, fp
21d0c     0C 17 02 F6 | 	mov	arg03, arg04
21d10     14 18 06 F1 | 	add	arg04, #20
21d14     0C 19 02 FB | 	rdlong	arg04, arg04
21d18     0C 16 06 F1 | 	add	arg03, #12
21d1c     0B 19 62 FC | 	wrlong	arg04, arg03
21d20     A7 18 02 FB | 	rdlong	arg04, fp
21d24     0C 17 02 F6 | 	mov	arg03, arg04
21d28     04 4E 85 F1 | 	sub	fp, #4
21d2c     10 18 06 F1 | 	add	arg04, #16
21d30     0C 19 C2 FA | 	rdbyte	arg04, arg04
21d34     40 18 46 F5 | 	or	arg04, #64
21d38     10 16 06 F1 | 	add	arg03, #16
21d3c     0B 19 42 FC | 	wrbyte	arg04, arg03
21d40                 | LR__3678
21d40     04 4E 05 F1 | 	add	fp, #4
21d44     A7 16 02 FB | 	rdlong	arg03, fp
21d48     04 4E 85 F1 | 	sub	fp, #4
21d4c     14 16 06 F1 | 	add	arg03, #20
21d50     0B 17 02 FB | 	rdlong	arg03, arg03
21d54     FF 17 CE F7 | 	test	arg03, #511 wz
21d58     2C 01 90 AD |  if_e	jmp	#LR__3682
21d5c     04 4E 05 F1 | 	add	fp, #4
21d60     A7 18 02 FB | 	rdlong	arg04, fp
21d64     18 4E 05 F1 | 	add	fp, #24
21d68     A7 16 02 FB | 	rdlong	arg03, fp
21d6c     1C 4E 85 F1 | 	sub	fp, #28
21d70     1C 18 06 F1 | 	add	arg04, #28
21d74     0C 19 02 FB | 	rdlong	arg04, arg04
21d78     0C 17 0A F2 | 	cmp	arg03, arg04 wz
21d7c     08 01 90 AD |  if_e	jmp	#LR__3682
21d80     04 4E 05 F1 | 	add	fp, #4
21d84     A7 16 02 FB | 	rdlong	arg03, fp
21d88     04 4E 85 F1 | 	sub	fp, #4
21d8c     10 16 06 F1 | 	add	arg03, #16
21d90     0B 17 C2 FA | 	rdbyte	arg03, arg03
21d94     80 16 CE F7 | 	test	arg03, #128 wz
21d98     7C 00 90 AD |  if_e	jmp	#LR__3680
21d9c     10 4E 05 F1 | 	add	fp, #16
21da0     A7 16 02 FB | 	rdlong	arg03, fp
21da4     01 16 06 F1 | 	add	arg03, #1
21da8     0B 13 C2 FA | 	rdbyte	arg01, arg03
21dac     0C 4E 85 F1 | 	sub	fp, #12
21db0     A7 16 02 FB | 	rdlong	arg03, fp
21db4     0B 15 02 F6 | 	mov	arg02, arg03
21db8     28 14 06 F1 | 	add	arg02, #40
21dbc     04 4E 85 F1 | 	sub	fp, #4
21dc0     1C 16 06 F1 | 	add	arg03, #28
21dc4     0B 17 02 FB | 	rdlong	arg03, arg03
21dc8     01 18 06 F6 | 	mov	arg04, #1
21dcc     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
21dd0     00 FA 0D F2 | 	cmp	result1, #0 wz
21dd4     1C 00 90 AD |  if_e	jmp	#LR__3679
21dd8     04 4E 05 F1 | 	add	fp, #4
21ddc     A7 16 02 FB | 	rdlong	arg03, fp
21de0     04 4E 85 F1 | 	sub	fp, #4
21de4     11 16 06 F1 | 	add	arg03, #17
21de8     0B 03 48 FC | 	wrbyte	#1, arg03
21dec     01 FA 05 F6 | 	mov	result1, #1
21df0     A0 00 90 FD | 	jmp	#LR__3683
21df4                 | LR__3679
21df4     04 4E 05 F1 | 	add	fp, #4
21df8     A7 18 02 FB | 	rdlong	arg04, fp
21dfc     0C 17 02 F6 | 	mov	arg03, arg04
21e00     04 4E 85 F1 | 	sub	fp, #4
21e04     10 18 06 F1 | 	add	arg04, #16
21e08     0C 19 C2 FA | 	rdbyte	arg04, arg04
21e0c     7F 18 06 F5 | 	and	arg04, #127
21e10     10 16 06 F1 | 	add	arg03, #16
21e14     0B 19 42 FC | 	wrbyte	arg04, arg03
21e18                 | LR__3680
21e18     10 4E 05 F1 | 	add	fp, #16
21e1c     A7 16 02 FB | 	rdlong	arg03, fp
21e20     01 16 06 F1 | 	add	arg03, #1
21e24     0B 13 C2 FA | 	rdbyte	arg01, arg03
21e28     0C 4E 85 F1 | 	sub	fp, #12
21e2c     A7 14 02 FB | 	rdlong	arg02, fp
21e30     28 14 06 F1 | 	add	arg02, #40
21e34     18 4E 05 F1 | 	add	fp, #24
21e38     A7 16 02 FB | 	rdlong	arg03, fp
21e3c     1C 4E 85 F1 | 	sub	fp, #28
21e40     01 18 06 F6 | 	mov	arg04, #1
21e44     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
21e48     00 FA 0D F2 | 	cmp	result1, #0 wz
21e4c     1C 00 90 AD |  if_e	jmp	#LR__3681
21e50     04 4E 05 F1 | 	add	fp, #4
21e54     A7 16 02 FB | 	rdlong	arg03, fp
21e58     04 4E 85 F1 | 	sub	fp, #4
21e5c     11 16 06 F1 | 	add	arg03, #17
21e60     0B 03 48 FC | 	wrbyte	#1, arg03
21e64     01 FA 05 F6 | 	mov	result1, #1
21e68     28 00 90 FD | 	jmp	#LR__3683
21e6c                 | LR__3681
21e6c     04 4E 05 F1 | 	add	fp, #4
21e70     A7 18 02 FB | 	rdlong	arg04, fp
21e74     18 4E 05 F1 | 	add	fp, #24
21e78     A7 16 02 FB | 	rdlong	arg03, fp
21e7c     1C 4E 85 F1 | 	sub	fp, #28
21e80     1C 18 06 F1 | 	add	arg04, #28
21e84     0C 17 62 FC | 	wrlong	arg03, arg04
21e88                 | LR__3682
21e88                 | ' 
21e88                 | ' 			fp->sect = nsect;
21e88                 | ' 		}
21e88                 | ' 	}
21e88                 | ' 
21e88                 | ' 	return res ;
21e88     0C 4E 05 F1 | 	add	fp, #12
21e8c     A7 FA 01 FB | 	rdlong	result1, fp
21e90     0C 4E 85 F1 | 	sub	fp, #12
21e94                 | LR__3683
21e94     A7 F0 03 F6 | 	mov	ptra, fp
21e98     B2 00 A0 FD | 	call	#popregs_
21e9c                 | _fatfs_cc_f_lseek_ret
21e9c     2D 00 64 FD | 	ret
21ea0                 | 
21ea0                 | _fatfs_cc_f_opendir
21ea0     01 4A 05 F6 | 	mov	COUNT_, #1
21ea4     A8 00 A0 FD | 	call	#pushregs_
21ea8     14 F0 07 F1 | 	add	ptra, #20
21eac     04 4E 05 F1 | 	add	fp, #4
21eb0     A7 12 62 FC | 	wrlong	arg01, fp
21eb4     04 4E 05 F1 | 	add	fp, #4
21eb8     A7 14 62 FC | 	wrlong	arg02, fp
21ebc     04 4E 85 F1 | 	sub	fp, #4
21ec0     A7 16 0A FB | 	rdlong	arg03, fp wz
21ec4     04 4E 85 F1 | 	sub	fp, #4
21ec8     09 FA 05 A6 |  if_e	mov	result1, #9
21ecc     78 01 90 AD |  if_e	jmp	#LR__3696
21ed0     08 4E 05 F1 | 	add	fp, #8
21ed4     A7 12 02 F6 | 	mov	arg01, fp
21ed8     08 4E 05 F1 | 	add	fp, #8
21edc     A7 14 02 F6 | 	mov	arg02, fp
21ee0     10 4E 85 F1 | 	sub	fp, #16
21ee4     00 16 06 F6 | 	mov	arg03, #0
21ee8     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
21eec     0C 4E 05 F1 | 	add	fp, #12
21ef0     A7 FA 61 FC | 	wrlong	result1, fp
21ef4     0C 4E 85 F1 | 	sub	fp, #12
21ef8     00 FA 0D F2 | 	cmp	result1, #0 wz
21efc     20 01 90 5D |  if_ne	jmp	#LR__3695
21f00     04 4E 05 F1 | 	add	fp, #4
21f04     A7 16 02 FB | 	rdlong	arg03, fp
21f08     0C 4E 05 F1 | 	add	fp, #12
21f0c     A7 FA 01 FB | 	rdlong	result1, fp
21f10     0B FB 61 FC | 	wrlong	result1, arg03
21f14     0C 4E 85 F1 | 	sub	fp, #12
21f18     A7 12 02 FB | 	rdlong	arg01, fp
21f1c     04 4E 05 F1 | 	add	fp, #4
21f20     A7 14 02 FB | 	rdlong	arg02, fp
21f24     08 4E 85 F1 | 	sub	fp, #8
21f28     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
21f2c     0C 4E 05 F1 | 	add	fp, #12
21f30     A7 FA 61 FC | 	wrlong	result1, fp
21f34     0C 4E 85 F1 | 	sub	fp, #12
21f38     00 FA 0D F2 | 	cmp	result1, #0 wz
21f3c     C4 00 90 5D |  if_ne	jmp	#LR__3694
21f40     04 4E 05 F1 | 	add	fp, #4
21f44     A7 16 02 FB | 	rdlong	arg03, fp
21f48     04 4E 85 F1 | 	sub	fp, #4
21f4c     2B 16 06 F1 | 	add	arg03, #43
21f50     0B 17 C2 FA | 	rdbyte	arg03, arg03
21f54     80 16 CE F7 | 	test	arg03, #128 wz
21f58     58 00 90 5D |  if_ne	jmp	#LR__3692
21f5c     04 4E 05 F1 | 	add	fp, #4
21f60     A7 16 02 FB | 	rdlong	arg03, fp
21f64     04 4E 85 F1 | 	sub	fp, #4
21f68     06 16 06 F1 | 	add	arg03, #6
21f6c     0B 17 C2 FA | 	rdbyte	arg03, arg03
21f70     10 16 CE F7 | 	test	arg03, #16 wz
21f74     30 00 90 AD |  if_e	jmp	#LR__3690
21f78     04 4E 05 F1 | 	add	fp, #4
21f7c     A7 16 02 FB | 	rdlong	arg03, fp
21f80     0B 1F 02 F6 | 	mov	local01, arg03
21f84     0C 4E 05 F1 | 	add	fp, #12
21f88     A7 12 02 FB | 	rdlong	arg01, fp
21f8c     10 4E 85 F1 | 	sub	fp, #16
21f90     1C 16 06 F1 | 	add	arg03, #28
21f94     0B 15 02 FB | 	rdlong	arg02, arg03
21f98     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
21f9c     08 1E 06 F1 | 	add	local01, #8
21fa0     0F FB 61 FC | 	wrlong	result1, local01
21fa4     0C 00 90 FD | 	jmp	#LR__3691
21fa8                 | LR__3690
21fa8     0C 4E 05 F1 | 	add	fp, #12
21fac     A7 0A 68 FC | 	wrlong	#5, fp
21fb0     0C 4E 85 F1 | 	sub	fp, #12
21fb4                 | LR__3691
21fb4                 | LR__3692
21fb4     0C 4E 05 F1 | 	add	fp, #12
21fb8     A7 1E 0A FB | 	rdlong	local01, fp wz
21fbc     0C 4E 85 F1 | 	sub	fp, #12
21fc0     40 00 90 5D |  if_ne	jmp	#LR__3693
21fc4     04 4E 05 F1 | 	add	fp, #4
21fc8     A7 1E 02 FB | 	rdlong	local01, fp
21fcc     0C 4E 05 F1 | 	add	fp, #12
21fd0     A7 16 02 FB | 	rdlong	arg03, fp
21fd4     06 16 06 F1 | 	add	arg03, #6
21fd8     0B 17 E2 FA | 	rdword	arg03, arg03
21fdc     04 1E 06 F1 | 	add	local01, #4
21fe0     0F 17 52 FC | 	wrword	arg03, local01
21fe4     0C 4E 85 F1 | 	sub	fp, #12
21fe8     A7 12 02 FB | 	rdlong	arg01, fp
21fec     04 4E 85 F1 | 	sub	fp, #4
21ff0     00 14 06 F6 | 	mov	arg02, #0
21ff4     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
21ff8     0C 4E 05 F1 | 	add	fp, #12
21ffc     A7 FA 61 FC | 	wrlong	result1, fp
22000     0C 4E 85 F1 | 	sub	fp, #12
22004                 | LR__3693
22004                 | LR__3694
22004     0C 4E 05 F1 | 	add	fp, #12
22008     A7 1E 02 FB | 	rdlong	local01, fp
2200c     0C 4E 85 F1 | 	sub	fp, #12
22010     04 1E 0E F2 | 	cmp	local01, #4 wz
22014     0C 4E 05 A1 |  if_e	add	fp, #12
22018     A7 0A 68 AC |  if_e	wrlong	#5, fp
2201c     0C 4E 85 A1 |  if_e	sub	fp, #12
22020                 | LR__3695
22020     0C 4E 05 F1 | 	add	fp, #12
22024     A7 1E 0A FB | 	rdlong	local01, fp wz
22028     0C 4E 85 F1 | 	sub	fp, #12
2202c     04 4E 05 51 |  if_ne	add	fp, #4
22030     A7 1E 02 5B |  if_ne	rdlong	local01, fp
22034     04 4E 85 51 |  if_ne	sub	fp, #4
22038     0F 01 68 5C |  if_ne	wrlong	#0, local01
2203c                 | ' 
2203c                 | ' 	return res ;
2203c     0C 4E 05 F1 | 	add	fp, #12
22040     A7 FA 01 FB | 	rdlong	result1, fp
22044     0C 4E 85 F1 | 	sub	fp, #12
22048                 | LR__3696
22048     A7 F0 03 F6 | 	mov	ptra, fp
2204c     B2 00 A0 FD | 	call	#popregs_
22050                 | _fatfs_cc_f_opendir_ret
22050     2D 00 64 FD | 	ret
22054                 | 
22054                 | _fatfs_cc_f_closedir
22054     00 4A 05 F6 | 	mov	COUNT_, #0
22058     A8 00 A0 FD | 	call	#pushregs_
2205c     10 F0 07 F1 | 	add	ptra, #16
22060     04 4E 05 F1 | 	add	fp, #4
22064     A7 12 62 FC | 	wrlong	arg01, fp
22068     08 4E 05 F1 | 	add	fp, #8
2206c     A7 14 02 F6 | 	mov	arg02, fp
22070     0C 4E 85 F1 | 	sub	fp, #12
22074     C0 DD BF FD | 	call	#_fatfs_cc_validate
22078     08 4E 05 F1 | 	add	fp, #8
2207c     A7 FA 61 FC | 	wrlong	result1, fp
22080     08 4E 85 F1 | 	sub	fp, #8
22084     00 FA 0D F2 | 	cmp	result1, #0 wz
22088     04 4E 05 A1 |  if_e	add	fp, #4
2208c     A7 FA 01 AB |  if_e	rdlong	result1, fp
22090     04 4E 85 A1 |  if_e	sub	fp, #4
22094     FD 00 68 AC |  if_e	wrlong	#0, result1
22098                 | ' 
22098                 | ' 
22098                 | ' 
22098                 | ' 
22098                 | ' 		dp->obj.fs = 0;
22098                 | ' #line 4633 "ff.c"
22098                 | ' 	}
22098                 | ' 	return res;
22098     08 4E 05 F1 | 	add	fp, #8
2209c     A7 FA 01 FB | 	rdlong	result1, fp
220a0     08 4E 85 F1 | 	sub	fp, #8
220a4     A7 F0 03 F6 | 	mov	ptra, fp
220a8     B2 00 A0 FD | 	call	#popregs_
220ac                 | _fatfs_cc_f_closedir_ret
220ac     2D 00 64 FD | 	ret
220b0                 | 
220b0                 | _fatfs_cc_f_readdir
220b0     00 4A 05 F6 | 	mov	COUNT_, #0
220b4     A8 00 A0 FD | 	call	#pushregs_
220b8     14 F0 07 F1 | 	add	ptra, #20
220bc     04 4E 05 F1 | 	add	fp, #4
220c0     A7 12 62 FC | 	wrlong	arg01, fp
220c4     04 4E 05 F1 | 	add	fp, #4
220c8     A7 14 62 FC | 	wrlong	arg02, fp
220cc     04 4E 85 F1 | 	sub	fp, #4
220d0     A7 12 02 FB | 	rdlong	arg01, fp
220d4     0C 4E 05 F1 | 	add	fp, #12
220d8     A7 14 02 F6 | 	mov	arg02, fp
220dc     10 4E 85 F1 | 	sub	fp, #16
220e0     54 DD BF FD | 	call	#_fatfs_cc_validate
220e4     0C 4E 05 F1 | 	add	fp, #12
220e8     A7 FA 61 FC | 	wrlong	result1, fp
220ec     0C 4E 85 F1 | 	sub	fp, #12
220f0     00 FA 0D F2 | 	cmp	result1, #0 wz
220f4     BC 00 90 5D |  if_ne	jmp	#LR__3703
220f8     08 4E 05 F1 | 	add	fp, #8
220fc     A7 FA 09 FB | 	rdlong	result1, fp wz
22100     08 4E 85 F1 | 	sub	fp, #8
22104     24 00 90 5D |  if_ne	jmp	#LR__3700
22108     04 4E 05 F1 | 	add	fp, #4
2210c     A7 12 02 FB | 	rdlong	arg01, fp
22110     04 4E 85 F1 | 	sub	fp, #4
22114     00 14 06 F6 | 	mov	arg02, #0
22118     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
2211c     0C 4E 05 F1 | 	add	fp, #12
22120     A7 FA 61 FC | 	wrlong	result1, fp
22124     0C 4E 85 F1 | 	sub	fp, #12
22128     88 00 90 FD | 	jmp	#LR__3702
2212c                 | LR__3700
2212c     04 4E 05 F1 | 	add	fp, #4
22130     A7 12 02 FB | 	rdlong	arg01, fp
22134     04 4E 85 F1 | 	sub	fp, #4
22138     00 14 06 F6 | 	mov	arg02, #0
2213c     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
22140     0C 4E 05 F1 | 	add	fp, #12
22144     A7 FA 61 FC | 	wrlong	result1, fp
22148     0C 4E 85 F1 | 	sub	fp, #12
2214c     04 FA 0D F2 | 	cmp	result1, #4 wz
22150     0C 4E 05 A1 |  if_e	add	fp, #12
22154     A7 00 68 AC |  if_e	wrlong	#0, fp
22158     0C 4E 85 A1 |  if_e	sub	fp, #12
2215c     0C 4E 05 F1 | 	add	fp, #12
22160     A7 FA 09 FB | 	rdlong	result1, fp wz
22164     0C 4E 85 F1 | 	sub	fp, #12
22168     48 00 90 5D |  if_ne	jmp	#LR__3701
2216c     04 4E 05 F1 | 	add	fp, #4
22170     A7 12 02 FB | 	rdlong	arg01, fp
22174     04 4E 05 F1 | 	add	fp, #4
22178     A7 14 02 FB | 	rdlong	arg02, fp
2217c     08 4E 85 F1 | 	sub	fp, #8
22180     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
22184     04 4E 05 F1 | 	add	fp, #4
22188     A7 12 02 FB | 	rdlong	arg01, fp
2218c     04 4E 85 F1 | 	sub	fp, #4
22190     00 14 06 F6 | 	mov	arg02, #0
22194     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
22198     0C 4E 05 F1 | 	add	fp, #12
2219c     A7 FA 61 FC | 	wrlong	result1, fp
221a0     0C 4E 85 F1 | 	sub	fp, #12
221a4     04 FA 0D F2 | 	cmp	result1, #4 wz
221a8     0C 4E 05 A1 |  if_e	add	fp, #12
221ac     A7 00 68 AC |  if_e	wrlong	#0, fp
221b0     0C 4E 85 A1 |  if_e	sub	fp, #12
221b4                 | LR__3701
221b4                 | LR__3702
221b4                 | LR__3703
221b4                 | ' 			}
221b4                 | ' 			;
221b4                 | ' 		}
221b4                 | ' 	}
221b4                 | ' 	return res ;
221b4     0C 4E 05 F1 | 	add	fp, #12
221b8     A7 FA 01 FB | 	rdlong	result1, fp
221bc     0C 4E 85 F1 | 	sub	fp, #12
221c0     A7 F0 03 F6 | 	mov	ptra, fp
221c4     B2 00 A0 FD | 	call	#popregs_
221c8                 | _fatfs_cc_f_readdir_ret
221c8     2D 00 64 FD | 	ret
221cc                 | 
221cc                 | _fatfs_cc_f_stat
221cc     00 4A 05 F6 | 	mov	COUNT_, #0
221d0     A8 00 A0 FD | 	call	#pushregs_
221d4     40 F0 07 F1 | 	add	ptra, #64
221d8     04 4E 05 F1 | 	add	fp, #4
221dc     A7 12 62 FC | 	wrlong	arg01, fp
221e0     04 4E 05 F1 | 	add	fp, #4
221e4     A7 14 62 FC | 	wrlong	arg02, fp
221e8     04 4E 85 F1 | 	sub	fp, #4
221ec     A7 12 02 F6 | 	mov	arg01, fp
221f0     0C 4E 05 F1 | 	add	fp, #12
221f4     A7 14 02 F6 | 	mov	arg02, fp
221f8     10 4E 85 F1 | 	sub	fp, #16
221fc     00 16 06 F6 | 	mov	arg03, #0
22200     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
22204     0C 4E 05 F1 | 	add	fp, #12
22208     A7 FA 61 FC | 	wrlong	result1, fp
2220c     0C 4E 85 F1 | 	sub	fp, #12
22210     00 FA 0D F2 | 	cmp	result1, #0 wz
22214     74 00 90 5D |  if_ne	jmp	#LR__3713
22218     10 4E 05 F1 | 	add	fp, #16
2221c     A7 12 02 F6 | 	mov	arg01, fp
22220     0C 4E 85 F1 | 	sub	fp, #12
22224     A7 14 02 FB | 	rdlong	arg02, fp
22228     04 4E 85 F1 | 	sub	fp, #4
2222c     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
22230     0C 4E 05 F1 | 	add	fp, #12
22234     A7 FA 61 FC | 	wrlong	result1, fp
22238     0C 4E 85 F1 | 	sub	fp, #12
2223c     00 FA 0D F2 | 	cmp	result1, #0 wz
22240     48 00 90 5D |  if_ne	jmp	#LR__3712
22244     3B 4E 05 F1 | 	add	fp, #59
22248     A7 FA C1 FA | 	rdbyte	result1, fp
2224c     3B 4E 85 F1 | 	sub	fp, #59
22250     80 FA CD F7 | 	test	result1, #128 wz
22254     0C 4E 05 51 |  if_ne	add	fp, #12
22258     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2225c     0C 4E 85 51 |  if_ne	sub	fp, #12
22260     28 00 90 5D |  if_ne	jmp	#LR__3711
22264     08 4E 05 F1 | 	add	fp, #8
22268     A7 FA 09 FB | 	rdlong	result1, fp wz
2226c     08 4E 85 F1 | 	sub	fp, #8
22270     18 00 90 AD |  if_e	jmp	#LR__3710
22274     10 4E 05 F1 | 	add	fp, #16
22278     A7 12 02 F6 | 	mov	arg01, fp
2227c     08 4E 85 F1 | 	sub	fp, #8
22280     A7 14 02 FB | 	rdlong	arg02, fp
22284     08 4E 85 F1 | 	sub	fp, #8
22288     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
2228c                 | LR__3710
2228c                 | LR__3711
2228c                 | LR__3712
2228c                 | LR__3713
2228c                 | ' 			}
2228c                 | ' 		}
2228c                 | ' 		;
2228c                 | ' 	}
2228c                 | ' 
2228c                 | ' 	return res ;
2228c     0C 4E 05 F1 | 	add	fp, #12
22290     A7 FA 01 FB | 	rdlong	result1, fp
22294     0C 4E 85 F1 | 	sub	fp, #12
22298     A7 F0 03 F6 | 	mov	ptra, fp
2229c     B2 00 A0 FD | 	call	#popregs_
222a0                 | _fatfs_cc_f_stat_ret
222a0     2D 00 64 FD | 	ret
222a4                 | 
222a4                 | _fatfs_cc_f_unlink
222a4     00 4A 05 F6 | 	mov	COUNT_, #0
222a8     A8 00 A0 FD | 	call	#pushregs_
222ac     74 F0 07 F1 | 	add	ptra, #116
222b0     04 4E 05 F1 | 	add	fp, #4
222b4     A7 12 62 FC | 	wrlong	arg01, fp
222b8     68 4E 05 F1 | 	add	fp, #104
222bc     A7 00 68 FC | 	wrlong	#0, fp
222c0     68 4E 85 F1 | 	sub	fp, #104
222c4     A7 12 02 F6 | 	mov	arg01, fp
222c8     6C 4E 05 F1 | 	add	fp, #108
222cc     A7 14 02 F6 | 	mov	arg02, fp
222d0     70 4E 85 F1 | 	sub	fp, #112
222d4     02 16 06 F6 | 	mov	arg03, #2
222d8     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
222dc     08 4E 05 F1 | 	add	fp, #8
222e0     A7 FA 61 FC | 	wrlong	result1, fp
222e4     08 4E 85 F1 | 	sub	fp, #8
222e8     00 FA 0D F2 | 	cmp	result1, #0 wz
222ec     E4 01 90 5D |  if_ne	jmp	#LR__3728
222f0     70 4E 05 F1 | 	add	fp, #112
222f4     A7 16 02 FB | 	rdlong	arg03, fp
222f8     64 4E 85 F1 | 	sub	fp, #100
222fc     A7 16 62 FC | 	wrlong	arg03, fp
22300     A7 12 02 F6 | 	mov	arg01, fp
22304     08 4E 85 F1 | 	sub	fp, #8
22308     A7 14 02 FB | 	rdlong	arg02, fp
2230c     04 4E 85 F1 | 	sub	fp, #4
22310     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
22314     08 4E 05 F1 | 	add	fp, #8
22318     A7 FA 61 FC | 	wrlong	result1, fp
2231c     00 FA 4D F2 | 	cmps	result1, #0 wz
22320     08 4E 85 F1 | 	sub	fp, #8
22324     AC 01 90 5D |  if_ne	jmp	#LR__3727
22328     37 4E 05 F1 | 	add	fp, #55
2232c     A7 FA C1 FA | 	rdbyte	result1, fp
22330     37 4E 85 F1 | 	sub	fp, #55
22334     80 FA CD F7 | 	test	result1, #128 wz
22338     08 4E 05 51 |  if_ne	add	fp, #8
2233c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
22340     08 4E 85 51 |  if_ne	sub	fp, #8
22344     1C 00 90 5D |  if_ne	jmp	#LR__3720
22348     12 4E 05 F1 | 	add	fp, #18
2234c     A7 FA C1 FA | 	rdbyte	result1, fp
22350     12 4E 85 F1 | 	sub	fp, #18
22354     01 FA CD F7 | 	test	result1, #1 wz
22358     08 4E 05 51 |  if_ne	add	fp, #8
2235c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
22360     08 4E 85 51 |  if_ne	sub	fp, #8
22364                 | LR__3720
22364     08 4E 05 F1 | 	add	fp, #8
22368     A7 FA 09 FB | 	rdlong	result1, fp wz
2236c     08 4E 85 F1 | 	sub	fp, #8
22370     C8 00 90 5D |  if_ne	jmp	#LR__3723
22374     70 4E 05 F1 | 	add	fp, #112
22378     A7 12 02 FB | 	rdlong	arg01, fp
2237c     48 4E 85 F1 | 	sub	fp, #72
22380     A7 14 02 FB | 	rdlong	arg02, fp
22384     28 4E 85 F1 | 	sub	fp, #40
22388     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
2238c     6C 4E 05 F1 | 	add	fp, #108
22390     A7 FA 61 FC | 	wrlong	result1, fp
22394     5A 4E 85 F1 | 	sub	fp, #90
22398     A7 FA C1 FA | 	rdbyte	result1, fp
2239c     12 4E 85 F1 | 	sub	fp, #18
223a0     10 FA CD F7 | 	test	result1, #16 wz
223a4     94 00 90 AD |  if_e	jmp	#LR__3722
223a8     70 4E 05 F1 | 	add	fp, #112
223ac     A7 FA 01 FB | 	rdlong	result1, fp
223b0     34 4E 85 F1 | 	sub	fp, #52
223b4     A7 FA 61 FC | 	wrlong	result1, fp
223b8     30 4E 05 F1 | 	add	fp, #48
223bc     A7 16 02 FB | 	rdlong	arg03, fp
223c0     28 4E 85 F1 | 	sub	fp, #40
223c4     A7 16 62 FC | 	wrlong	arg03, fp
223c8     08 4E 85 F1 | 	sub	fp, #8
223cc     A7 12 02 F6 | 	mov	arg01, fp
223d0     3C 4E 85 F1 | 	sub	fp, #60
223d4     00 14 06 F6 | 	mov	arg02, #0
223d8     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
223dc     08 4E 05 F1 | 	add	fp, #8
223e0     A7 FA 61 FC | 	wrlong	result1, fp
223e4     08 4E 85 F1 | 	sub	fp, #8
223e8     00 FA 0D F2 | 	cmp	result1, #0 wz
223ec     4C 00 90 5D |  if_ne	jmp	#LR__3721
223f0     3C 4E 05 F1 | 	add	fp, #60
223f4     A7 12 02 F6 | 	mov	arg01, fp
223f8     3C 4E 85 F1 | 	sub	fp, #60
223fc     00 14 06 F6 | 	mov	arg02, #0
22400     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
22404     08 4E 05 F1 | 	add	fp, #8
22408     A7 FA 61 FC | 	wrlong	result1, fp
2240c     00 FA 4D F2 | 	cmps	result1, #0 wz
22410     08 4E 85 F1 | 	sub	fp, #8
22414     08 4E 05 A1 |  if_e	add	fp, #8
22418     A7 0E 68 AC |  if_e	wrlong	#7, fp
2241c     08 4E 85 A1 |  if_e	sub	fp, #8
22420     08 4E 05 F1 | 	add	fp, #8
22424     A7 FA 01 FB | 	rdlong	result1, fp
22428     08 4E 85 F1 | 	sub	fp, #8
2242c     04 FA 0D F2 | 	cmp	result1, #4 wz
22430     08 4E 05 A1 |  if_e	add	fp, #8
22434     A7 00 68 AC |  if_e	wrlong	#0, fp
22438     08 4E 85 A1 |  if_e	sub	fp, #8
2243c                 | LR__3721
2243c                 | LR__3722
2243c                 | LR__3723
2243c     08 4E 05 F1 | 	add	fp, #8
22440     A7 FA 09 FB | 	rdlong	result1, fp wz
22444     08 4E 85 F1 | 	sub	fp, #8
22448     88 00 90 5D |  if_ne	jmp	#LR__3726
2244c     0C 4E 05 F1 | 	add	fp, #12
22450     A7 12 02 F6 | 	mov	arg01, fp
22454     0C 4E 85 F1 | 	sub	fp, #12
22458     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
2245c     08 4E 05 F1 | 	add	fp, #8
22460     A7 FA 61 FC | 	wrlong	result1, fp
22464     08 4E 85 F1 | 	sub	fp, #8
22468     00 FA 0D F2 | 	cmp	result1, #0 wz
2246c     38 00 90 5D |  if_ne	jmp	#LR__3724
22470     6C 4E 05 F1 | 	add	fp, #108
22474     A7 FA 09 FB | 	rdlong	result1, fp wz
22478     6C 4E 85 F1 | 	sub	fp, #108
2247c     28 00 90 AD |  if_e	jmp	#LR__3724
22480     0C 4E 05 F1 | 	add	fp, #12
22484     A7 12 02 F6 | 	mov	arg01, fp
22488     60 4E 05 F1 | 	add	fp, #96
2248c     A7 14 02 FB | 	rdlong	arg02, fp
22490     6C 4E 85 F1 | 	sub	fp, #108
22494     00 16 06 F6 | 	mov	arg03, #0
22498     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
2249c     08 4E 05 F1 | 	add	fp, #8
224a0     A7 FA 61 FC | 	wrlong	result1, fp
224a4     08 4E 85 F1 | 	sub	fp, #8
224a8                 | LR__3724
224a8     08 4E 05 F1 | 	add	fp, #8
224ac     A7 FA 09 FB | 	rdlong	result1, fp wz
224b0     08 4E 85 F1 | 	sub	fp, #8
224b4     1C 00 90 5D |  if_ne	jmp	#LR__3725
224b8     70 4E 05 F1 | 	add	fp, #112
224bc     A7 12 02 FB | 	rdlong	arg01, fp
224c0     70 4E 85 F1 | 	sub	fp, #112
224c4     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
224c8     08 4E 05 F1 | 	add	fp, #8
224cc     A7 FA 61 FC | 	wrlong	result1, fp
224d0     08 4E 85 F1 | 	sub	fp, #8
224d4                 | LR__3725
224d4                 | LR__3726
224d4                 | LR__3727
224d4                 | LR__3728
224d4                 | ' 			}
224d4                 | ' 		}
224d4                 | ' 		;
224d4                 | ' 	}
224d4                 | ' 
224d4                 | ' 	return res ;
224d4     08 4E 05 F1 | 	add	fp, #8
224d8     A7 FA 01 FB | 	rdlong	result1, fp
224dc     08 4E 85 F1 | 	sub	fp, #8
224e0     A7 F0 03 F6 | 	mov	ptra, fp
224e4     B2 00 A0 FD | 	call	#popregs_
224e8                 | _fatfs_cc_f_unlink_ret
224e8     2D 00 64 FD | 	ret
224ec                 | 
224ec                 | _fatfs_cc_f_mkdir
224ec     00 4A 05 F6 | 	mov	COUNT_, #0
224f0     A8 00 A0 FD | 	call	#pushregs_
224f4     5C F0 07 F1 | 	add	ptra, #92
224f8     04 4E 05 F1 | 	add	fp, #4
224fc     A7 12 62 FC | 	wrlong	arg01, fp
22500     A7 12 02 F6 | 	mov	arg01, fp
22504     48 4E 05 F1 | 	add	fp, #72
22508     A7 14 02 F6 | 	mov	arg02, fp
2250c     4C 4E 85 F1 | 	sub	fp, #76
22510     02 16 06 F6 | 	mov	arg03, #2
22514     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
22518     08 4E 05 F1 | 	add	fp, #8
2251c     A7 FA 61 FC | 	wrlong	result1, fp
22520     08 4E 85 F1 | 	sub	fp, #8
22524     00 FA 0D F2 | 	cmp	result1, #0 wz
22528     C4 02 90 5D |  if_ne	jmp	#LR__3735
2252c     4C 4E 05 F1 | 	add	fp, #76
22530     A7 16 02 FB | 	rdlong	arg03, fp
22534     40 4E 85 F1 | 	sub	fp, #64
22538     A7 16 62 FC | 	wrlong	arg03, fp
2253c     A7 12 02 F6 | 	mov	arg01, fp
22540     08 4E 85 F1 | 	sub	fp, #8
22544     A7 14 02 FB | 	rdlong	arg02, fp
22548     04 4E 85 F1 | 	sub	fp, #4
2254c     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
22550     08 4E 05 F1 | 	add	fp, #8
22554     A7 FA 61 FC | 	wrlong	result1, fp
22558     00 FA 4D F2 | 	cmps	result1, #0 wz
2255c     08 4E 85 F1 | 	sub	fp, #8
22560     08 4E 05 A1 |  if_e	add	fp, #8
22564     A7 10 68 AC |  if_e	wrlong	#8, fp
22568     08 4E 85 A1 |  if_e	sub	fp, #8
2256c     08 4E 05 F1 | 	add	fp, #8
22570     A7 FA 01 FB | 	rdlong	result1, fp
22574     08 4E 85 F1 | 	sub	fp, #8
22578     04 FA 0D F2 | 	cmp	result1, #4 wz
2257c     70 02 90 5D |  if_ne	jmp	#LR__3734
22580     4C 4E 05 F1 | 	add	fp, #76
22584     A7 16 02 FB | 	rdlong	arg03, fp
22588     10 4E 85 F1 | 	sub	fp, #16
2258c     A7 16 62 FC | 	wrlong	arg03, fp
22590     A7 12 02 F6 | 	mov	arg01, fp
22594     3C 4E 85 F1 | 	sub	fp, #60
22598     00 14 06 F6 | 	mov	arg02, #0
2259c     04 AC BF FD | 	call	#_fatfs_cc_create_chain
225a0     50 4E 05 F1 | 	add	fp, #80
225a4     A7 FA 61 FC | 	wrlong	result1, fp
225a8     48 4E 85 F1 | 	sub	fp, #72
225ac     A7 00 68 FC | 	wrlong	#0, fp
225b0     48 4E 05 F1 | 	add	fp, #72
225b4     A7 FA 09 FB | 	rdlong	result1, fp wz
225b8     50 4E 85 F1 | 	sub	fp, #80
225bc     08 4E 05 A1 |  if_e	add	fp, #8
225c0     A7 0E 68 AC |  if_e	wrlong	#7, fp
225c4     08 4E 85 A1 |  if_e	sub	fp, #8
225c8     50 4E 05 F1 | 	add	fp, #80
225cc     A7 FA 01 FB | 	rdlong	result1, fp
225d0     50 4E 85 F1 | 	sub	fp, #80
225d4     01 FA 0D F2 | 	cmp	result1, #1 wz
225d8     08 4E 05 A1 |  if_e	add	fp, #8
225dc     A7 04 68 AC |  if_e	wrlong	#2, fp
225e0     08 4E 85 A1 |  if_e	sub	fp, #8
225e4     50 4E 05 F1 | 	add	fp, #80
225e8     A7 16 02 FB | 	rdlong	arg03, fp
225ec     50 4E 85 F1 | 	sub	fp, #80
225f0     FF FF 7F FF 
225f4     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
225f8     08 4E 05 A1 |  if_e	add	fp, #8
225fc     A7 02 68 AC |  if_e	wrlong	#1, fp
22600     08 4E 85 A1 |  if_e	sub	fp, #8
22604     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
22608     58 4E 05 F1 | 	add	fp, #88
2260c     A7 FA 61 FC | 	wrlong	result1, fp
22610     50 4E 85 F1 | 	sub	fp, #80
22614     A7 FA 09 FB | 	rdlong	result1, fp wz
22618     08 4E 85 F1 | 	sub	fp, #8
2261c     1C 01 90 5D |  if_ne	jmp	#LR__3731
22620     4C 4E 05 F1 | 	add	fp, #76
22624     A7 12 02 FB | 	rdlong	arg01, fp
22628     04 4E 05 F1 | 	add	fp, #4
2262c     A7 14 02 FB | 	rdlong	arg02, fp
22630     50 4E 85 F1 | 	sub	fp, #80
22634     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
22638     08 4E 05 F1 | 	add	fp, #8
2263c     A7 FA 61 FC | 	wrlong	result1, fp
22640     00 FA 4D F2 | 	cmps	result1, #0 wz
22644     08 4E 85 F1 | 	sub	fp, #8
22648     F0 00 90 5D |  if_ne	jmp	#LR__3730
2264c     4C 4E 05 F1 | 	add	fp, #76
22650     A7 12 02 FB | 	rdlong	arg01, fp
22654     4C 4E 85 F1 | 	sub	fp, #76
22658     34 12 06 F1 | 	add	arg01, #52
2265c     20 14 06 F6 | 	mov	arg02, #32
22660     0B 16 06 F6 | 	mov	arg03, #11
22664     98 00 A0 FD | 	call	#\builtin_bytefill_
22668     4C 4E 05 F1 | 	add	fp, #76
2266c     A7 FA 01 FB | 	rdlong	result1, fp
22670     34 FA 05 F1 | 	add	result1, #52
22674     FD 5C 48 FC | 	wrbyte	#46, result1
22678     A7 16 02 FB | 	rdlong	arg03, fp
2267c     3F 16 06 F1 | 	add	arg03, #63
22680     0B 21 48 FC | 	wrbyte	#16, arg03
22684     A7 12 02 FB | 	rdlong	arg01, fp
22688     4A 12 06 F1 | 	add	arg01, #74
2268c     0C 4E 05 F1 | 	add	fp, #12
22690     A7 14 02 FB | 	rdlong	arg02, fp
22694     09 15 62 FC | 	wrlong	arg02, arg01
22698     0C 4E 85 F1 | 	sub	fp, #12
2269c     A7 14 02 FB | 	rdlong	arg02, fp
226a0     0A 13 02 F6 | 	mov	arg01, arg02
226a4     34 14 06 F1 | 	add	arg02, #52
226a8     04 4E 05 F1 | 	add	fp, #4
226ac     A7 16 02 FB | 	rdlong	arg03, fp
226b0     50 4E 85 F1 | 	sub	fp, #80
226b4     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
226b8     4C 4E 05 F1 | 	add	fp, #76
226bc     A7 14 02 FB | 	rdlong	arg02, fp
226c0     0A 13 02 F6 | 	mov	arg01, arg02
226c4     54 12 06 F1 | 	add	arg01, #84
226c8     4C 4E 85 F1 | 	sub	fp, #76
226cc     34 14 06 F1 | 	add	arg02, #52
226d0     20 16 06 F6 | 	mov	arg03, #32
226d4     B8 30 BF FD | 	call	#__system____builtin_memmove
226d8     4C 4E 05 F1 | 	add	fp, #76
226dc     A7 16 02 FB | 	rdlong	arg03, fp
226e0     55 16 06 F1 | 	add	arg03, #85
226e4     0B 5D 48 FC | 	wrbyte	#46, arg03
226e8     38 4E 85 F1 | 	sub	fp, #56
226ec     A7 16 02 FB | 	rdlong	arg03, fp
226f0     40 4E 05 F1 | 	add	fp, #64
226f4     A7 16 62 FC | 	wrlong	arg03, fp
226f8     08 4E 85 F1 | 	sub	fp, #8
226fc     A7 14 02 FB | 	rdlong	arg02, fp
22700     0A 13 02 F6 | 	mov	arg01, arg02
22704     54 14 06 F1 | 	add	arg02, #84
22708     4C 4E 85 F1 | 	sub	fp, #76
2270c     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
22710     4C 4E 05 F1 | 	add	fp, #76
22714     A7 16 02 FB | 	rdlong	arg03, fp
22718     03 16 06 F1 | 	add	arg03, #3
2271c     0B 03 48 FC | 	wrbyte	#1, arg03
22720     40 4E 85 F1 | 	sub	fp, #64
22724     A7 12 02 F6 | 	mov	arg01, fp
22728     0C 4E 85 F1 | 	sub	fp, #12
2272c     44 BA BF FD | 	call	#_fatfs_cc_dir_register
22730     08 4E 05 F1 | 	add	fp, #8
22734     A7 FA 61 FC | 	wrlong	result1, fp
22738     08 4E 85 F1 | 	sub	fp, #8
2273c                 | LR__3730
2273c                 | LR__3731
2273c     08 4E 05 F1 | 	add	fp, #8
22740     A7 FA 09 FB | 	rdlong	result1, fp wz
22744     08 4E 85 F1 | 	sub	fp, #8
22748     88 00 90 5D |  if_ne	jmp	#LR__3732
2274c     28 4E 05 F1 | 	add	fp, #40
22750     A7 12 02 FB | 	rdlong	arg01, fp
22754     16 12 06 F1 | 	add	arg01, #22
22758     30 4E 05 F1 | 	add	fp, #48
2275c     A7 14 02 FB | 	rdlong	arg02, fp
22760     09 15 62 FC | 	wrlong	arg02, arg01
22764     0C 4E 85 F1 | 	sub	fp, #12
22768     A7 12 02 FB | 	rdlong	arg01, fp
2276c     24 4E 85 F1 | 	sub	fp, #36
22770     A7 14 02 FB | 	rdlong	arg02, fp
22774     28 4E 05 F1 | 	add	fp, #40
22778     A7 16 02 FB | 	rdlong	arg03, fp
2277c     50 4E 85 F1 | 	sub	fp, #80
22780     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
22784     28 4E 05 F1 | 	add	fp, #40
22788     A7 FA 01 FB | 	rdlong	result1, fp
2278c     0B FA 05 F1 | 	add	result1, #11
22790     FD 20 48 FC | 	wrbyte	#16, result1
22794     24 4E 05 F1 | 	add	fp, #36
22798     A7 FA 01 FB | 	rdlong	result1, fp
2279c     03 FA 05 F1 | 	add	result1, #3
227a0     FD 02 48 FC | 	wrbyte	#1, result1
227a4     44 4E 85 F1 | 	sub	fp, #68
227a8     A7 FA 09 FB | 	rdlong	result1, fp wz
227ac     08 4E 85 F1 | 	sub	fp, #8
227b0     3C 00 90 5D |  if_ne	jmp	#LR__3733
227b4     4C 4E 05 F1 | 	add	fp, #76
227b8     A7 12 02 FB | 	rdlong	arg01, fp
227bc     4C 4E 85 F1 | 	sub	fp, #76
227c0     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
227c4     08 4E 05 F1 | 	add	fp, #8
227c8     A7 FA 61 FC | 	wrlong	result1, fp
227cc     08 4E 85 F1 | 	sub	fp, #8
227d0     1C 00 90 FD | 	jmp	#LR__3733
227d4                 | LR__3732
227d4     3C 4E 05 F1 | 	add	fp, #60
227d8     A7 12 02 F6 | 	mov	arg01, fp
227dc     14 4E 05 F1 | 	add	fp, #20
227e0     A7 14 02 FB | 	rdlong	arg02, fp
227e4     50 4E 85 F1 | 	sub	fp, #80
227e8     00 16 06 F6 | 	mov	arg03, #0
227ec     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
227f0                 | LR__3733
227f0                 | LR__3734
227f0                 | LR__3735
227f0                 | ' 				remove_chain(&sobj, dcl, 0);
227f0                 | ' 			}
227f0                 | ' 		}
227f0                 | ' 		;
227f0                 | ' 	}
227f0                 | ' 
227f0                 | ' 	return res ;
227f0     08 4E 05 F1 | 	add	fp, #8
227f4     A7 FA 01 FB | 	rdlong	result1, fp
227f8     08 4E 85 F1 | 	sub	fp, #8
227fc     A7 F0 03 F6 | 	mov	ptra, fp
22800     B2 00 A0 FD | 	call	#popregs_
22804                 | _fatfs_cc_f_mkdir_ret
22804     2D 00 64 FD | 	ret
22808                 | 
22808                 | _fatfs_cc_f_rename
22808     01 4A 05 F6 | 	mov	COUNT_, #1
2280c     A8 00 A0 FD | 	call	#pushregs_
22810     9C F0 07 F1 | 	add	ptra, #156
22814     04 4E 05 F1 | 	add	fp, #4
22818     A7 12 62 FC | 	wrlong	arg01, fp
2281c     04 4E 05 F1 | 	add	fp, #4
22820     A7 14 62 FC | 	wrlong	arg02, fp
22824     A7 12 02 F6 | 	mov	arg01, fp
22828     08 4E 85 F1 | 	sub	fp, #8
2282c     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
22830     04 4E 05 F1 | 	add	fp, #4
22834     A7 12 02 F6 | 	mov	arg01, fp
22838     6C 4E 05 F1 | 	add	fp, #108
2283c     A7 14 02 F6 | 	mov	arg02, fp
22840     70 4E 85 F1 | 	sub	fp, #112
22844     02 16 06 F6 | 	mov	arg03, #2
22848     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
2284c     0C 4E 05 F1 | 	add	fp, #12
22850     A7 FA 61 FC | 	wrlong	result1, fp
22854     0C 4E 85 F1 | 	sub	fp, #12
22858     00 FA 0D F2 | 	cmp	result1, #0 wz
2285c     44 03 90 5D |  if_ne	jmp	#LR__3753
22860     70 4E 05 F1 | 	add	fp, #112
22864     A7 16 02 FB | 	rdlong	arg03, fp
22868     60 4E 85 F1 | 	sub	fp, #96
2286c     A7 16 62 FC | 	wrlong	arg03, fp
22870     A7 12 02 F6 | 	mov	arg01, fp
22874     0C 4E 85 F1 | 	sub	fp, #12
22878     A7 14 02 FB | 	rdlong	arg02, fp
2287c     04 4E 85 F1 | 	sub	fp, #4
22880     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
22884     0C 4E 05 F1 | 	add	fp, #12
22888     A7 FA 61 FC | 	wrlong	result1, fp
2288c     00 FA 4D F2 | 	cmps	result1, #0 wz
22890     0C 4E 85 F1 | 	sub	fp, #12
22894     1C 00 90 5D |  if_ne	jmp	#LR__3740
22898     3B 4E 05 F1 | 	add	fp, #59
2289c     A7 FA C1 FA | 	rdbyte	result1, fp
228a0     3B 4E 85 F1 | 	sub	fp, #59
228a4     A0 FA CD F7 | 	test	result1, #160 wz
228a8     0C 4E 05 51 |  if_ne	add	fp, #12
228ac     A7 0C 68 5C |  if_ne	wrlong	#6, fp
228b0     0C 4E 85 51 |  if_ne	sub	fp, #12
228b4                 | LR__3740
228b4     0C 4E 05 F1 | 	add	fp, #12
228b8     A7 1E 0A FB | 	rdlong	local01, fp wz
228bc     0C 4E 85 F1 | 	sub	fp, #12
228c0     E0 02 90 5D |  if_ne	jmp	#LR__3752
228c4     74 4E 05 F1 | 	add	fp, #116
228c8     A7 12 02 F6 | 	mov	arg01, fp
228cc     48 4E 85 F1 | 	sub	fp, #72
228d0     A7 14 02 FB | 	rdlong	arg02, fp
228d4     2C 4E 85 F1 | 	sub	fp, #44
228d8     20 16 06 F6 | 	mov	arg03, #32
228dc     B0 2E BF FD | 	call	#__system____builtin_memmove
228e0     40 4E 05 F1 | 	add	fp, #64
228e4     A7 12 02 F6 | 	mov	arg01, fp
228e8     30 4E 85 F1 | 	sub	fp, #48
228ec     A7 14 02 F6 | 	mov	arg02, fp
228f0     10 4E 85 F1 | 	sub	fp, #16
228f4     30 16 06 F6 | 	mov	arg03, #48
228f8     94 2E BF FD | 	call	#__system____builtin_memmove
228fc     40 4E 05 F1 | 	add	fp, #64
22900     A7 12 02 F6 | 	mov	arg01, fp
22904     38 4E 85 F1 | 	sub	fp, #56
22908     A7 14 02 FB | 	rdlong	arg02, fp
2290c     08 4E 85 F1 | 	sub	fp, #8
22910     34 CA BF FD | 	call	#_fatfs_cc_follow_path
22914     0C 4E 05 F1 | 	add	fp, #12
22918     A7 FA 61 FC | 	wrlong	result1, fp
2291c     0C 4E 85 F1 | 	sub	fp, #12
22920     00 FA 0D F2 | 	cmp	result1, #0 wz
22924     4C 00 90 5D |  if_ne	jmp	#LR__3743
22928     48 4E 05 F1 | 	add	fp, #72
2292c     A7 FA 01 FB | 	rdlong	result1, fp
22930     30 4E 85 F1 | 	sub	fp, #48
22934     A7 16 02 FB | 	rdlong	arg03, fp
22938     18 4E 85 F1 | 	sub	fp, #24
2293c     0B FB 09 F2 | 	cmp	result1, arg03 wz
22940     20 00 90 5D |  if_ne	jmp	#LR__3741
22944     50 4E 05 F1 | 	add	fp, #80
22948     A7 FA 01 FB | 	rdlong	result1, fp
2294c     30 4E 85 F1 | 	sub	fp, #48
22950     A7 16 02 FB | 	rdlong	arg03, fp
22954     20 4E 85 F1 | 	sub	fp, #32
22958     0B FB 09 F2 | 	cmp	result1, arg03 wz
2295c     04 1E 06 A6 |  if_e	mov	local01, #4
22960     04 00 90 AD |  if_e	jmp	#LR__3742
22964                 | LR__3741
22964     08 1E 06 F6 | 	mov	local01, #8
22968                 | LR__3742
22968     0C 4E 05 F1 | 	add	fp, #12
2296c     A7 1E 62 FC | 	wrlong	local01, fp
22970     0C 4E 85 F1 | 	sub	fp, #12
22974                 | LR__3743
22974     0C 4E 05 F1 | 	add	fp, #12
22978     A7 1E 02 FB | 	rdlong	local01, fp
2297c     0C 4E 85 F1 | 	sub	fp, #12
22980     04 1E 0E F2 | 	cmp	local01, #4 wz
22984     CC 01 90 5D |  if_ne	jmp	#LR__3749
22988     40 4E 05 F1 | 	add	fp, #64
2298c     A7 12 02 F6 | 	mov	arg01, fp
22990     40 4E 85 F1 | 	sub	fp, #64
22994     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
22998     0C 4E 05 F1 | 	add	fp, #12
2299c     A7 FA 61 FC | 	wrlong	result1, fp
229a0     0C 4E 85 F1 | 	sub	fp, #12
229a4     00 FA 0D F2 | 	cmp	result1, #0 wz
229a8     A8 01 90 5D |  if_ne	jmp	#LR__3748
229ac     5C 4E 05 F1 | 	add	fp, #92
229b0     A7 12 02 FB | 	rdlong	arg01, fp
229b4     38 4E 05 F1 | 	add	fp, #56
229b8     A7 12 62 FC | 	wrlong	arg01, fp
229bc     0D 12 06 F1 | 	add	arg01, #13
229c0     20 4E 85 F1 | 	sub	fp, #32
229c4     A7 14 02 F6 | 	mov	arg02, fp
229c8     74 4E 85 F1 | 	sub	fp, #116
229cc     0D 14 06 F1 | 	add	arg02, #13
229d0     13 16 06 F6 | 	mov	arg03, #19
229d4     B8 2D BF FD | 	call	#__system____builtin_memmove
229d8     94 4E 05 F1 | 	add	fp, #148
229dc     A7 1E 02 FB | 	rdlong	local01, fp
229e0     15 4E 85 F1 | 	sub	fp, #21
229e4     A7 FA C1 FA | 	rdbyte	result1, fp
229e8     0B 1E 06 F1 | 	add	local01, #11
229ec     0F FB 41 FC | 	wrbyte	result1, local01
229f0     15 4E 05 F1 | 	add	fp, #21
229f4     A7 1E 02 FB | 	rdlong	local01, fp
229f8     94 4E 85 F1 | 	sub	fp, #148
229fc     0B 1E 06 F1 | 	add	local01, #11
22a00     0F 1F C2 FA | 	rdbyte	local01, local01
22a04     10 1E CE F7 | 	test	local01, #16 wz
22a08     24 00 90 5D |  if_ne	jmp	#LR__3744
22a0c     94 4E 05 F1 | 	add	fp, #148
22a10     A7 FA 01 FB | 	rdlong	result1, fp
22a14     FD 1E 02 F6 | 	mov	local01, result1
22a18     94 4E 85 F1 | 	sub	fp, #148
22a1c     0B FA 05 F1 | 	add	result1, #11
22a20     FD FA C1 FA | 	rdbyte	result1, result1
22a24     20 FA 45 F5 | 	or	result1, #32
22a28     0B 1E 06 F1 | 	add	local01, #11
22a2c     0F FB 41 FC | 	wrbyte	result1, local01
22a30                 | LR__3744
22a30     70 4E 05 F1 | 	add	fp, #112
22a34     A7 1E 02 FB | 	rdlong	local01, fp
22a38     03 1E 06 F1 | 	add	local01, #3
22a3c     0F 03 48 FC | 	wrbyte	#1, local01
22a40     24 4E 05 F1 | 	add	fp, #36
22a44     A7 1E 02 FB | 	rdlong	local01, fp
22a48     94 4E 85 F1 | 	sub	fp, #148
22a4c     0B 1E 06 F1 | 	add	local01, #11
22a50     0F 1F C2 FA | 	rdbyte	local01, local01
22a54     10 1E CE F7 | 	test	local01, #16 wz
22a58     F8 00 90 AD |  if_e	jmp	#LR__3747
22a5c     18 4E 05 F1 | 	add	fp, #24
22a60     A7 16 02 FB | 	rdlong	arg03, fp
22a64     30 4E 05 F1 | 	add	fp, #48
22a68     A7 1E 02 FB | 	rdlong	local01, fp
22a6c     48 4E 85 F1 | 	sub	fp, #72
22a70     0F 17 0A F2 | 	cmp	arg03, local01 wz
22a74     DC 00 90 AD |  if_e	jmp	#LR__3747
22a78     70 4E 05 F1 | 	add	fp, #112
22a7c     A7 12 02 FB | 	rdlong	arg01, fp
22a80     09 1F 02 F6 | 	mov	local01, arg01
22a84     24 4E 05 F1 | 	add	fp, #36
22a88     A7 14 02 FB | 	rdlong	arg02, fp
22a8c     94 4E 85 F1 | 	sub	fp, #148
22a90     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
22a94     FD 14 02 F6 | 	mov	arg02, result1
22a98     0F 13 02 F6 | 	mov	arg01, local01
22a9c     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
22aa0     98 4E 05 F1 | 	add	fp, #152
22aa4     A7 FA 61 FC | 	wrlong	result1, fp
22aa8     00 FA 4D F2 | 	cmps	result1, #0 wz
22aac     98 4E 85 F1 | 	sub	fp, #152
22ab0     0C 4E 05 A1 |  if_e	add	fp, #12
22ab4     A7 04 68 AC |  if_e	wrlong	#2, fp
22ab8     0C 4E 85 A1 |  if_e	sub	fp, #12
22abc     94 00 90 AD |  if_e	jmp	#LR__3746
22ac0     70 4E 05 F1 | 	add	fp, #112
22ac4     A7 12 02 FB | 	rdlong	arg01, fp
22ac8     28 4E 05 F1 | 	add	fp, #40
22acc     A7 14 02 FB | 	rdlong	arg02, fp
22ad0     98 4E 85 F1 | 	sub	fp, #152
22ad4     4C A0 BF FD | 	call	#_fatfs_cc_move_window
22ad8     0C 4E 05 F1 | 	add	fp, #12
22adc     A7 FA 61 FC | 	wrlong	result1, fp
22ae0     64 4E 05 F1 | 	add	fp, #100
22ae4     A7 1E 02 FB | 	rdlong	local01, fp
22ae8     54 1E 06 F1 | 	add	local01, #84
22aec     24 4E 05 F1 | 	add	fp, #36
22af0     A7 1E 62 FC | 	wrlong	local01, fp
22af4     88 4E 85 F1 | 	sub	fp, #136
22af8     A7 1E 0A FB | 	rdlong	local01, fp wz
22afc     0C 4E 85 F1 | 	sub	fp, #12
22b00     50 00 90 5D |  if_ne	jmp	#LR__3745
22b04     94 4E 05 F1 | 	add	fp, #148
22b08     A7 1E 02 FB | 	rdlong	local01, fp
22b0c     94 4E 85 F1 | 	sub	fp, #148
22b10     01 1E 06 F1 | 	add	local01, #1
22b14     0F 1F C2 FA | 	rdbyte	local01, local01
22b18     2E 1E 0E F2 | 	cmp	local01, #46 wz
22b1c     34 00 90 5D |  if_ne	jmp	#LR__3745
22b20     70 4E 05 F1 | 	add	fp, #112
22b24     A7 12 02 FB | 	rdlong	arg01, fp
22b28     24 4E 05 F1 | 	add	fp, #36
22b2c     A7 14 02 FB | 	rdlong	arg02, fp
22b30     4C 4E 85 F1 | 	sub	fp, #76
22b34     A7 16 02 FB | 	rdlong	arg03, fp
22b38     48 4E 85 F1 | 	sub	fp, #72
22b3c     50 AD BF FD | 	call	#_fatfs_cc_st_clust
22b40     70 4E 05 F1 | 	add	fp, #112
22b44     A7 1E 02 FB | 	rdlong	local01, fp
22b48     70 4E 85 F1 | 	sub	fp, #112
22b4c     03 1E 06 F1 | 	add	local01, #3
22b50     0F 03 48 FC | 	wrbyte	#1, local01
22b54                 | LR__3745
22b54                 | LR__3746
22b54                 | LR__3747
22b54                 | LR__3748
22b54                 | LR__3749
22b54     0C 4E 05 F1 | 	add	fp, #12
22b58     A7 1E 0A FB | 	rdlong	local01, fp wz
22b5c     0C 4E 85 F1 | 	sub	fp, #12
22b60     40 00 90 5D |  if_ne	jmp	#LR__3751
22b64     10 4E 05 F1 | 	add	fp, #16
22b68     A7 12 02 F6 | 	mov	arg01, fp
22b6c     10 4E 85 F1 | 	sub	fp, #16
22b70     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
22b74     0C 4E 05 F1 | 	add	fp, #12
22b78     A7 FA 61 FC | 	wrlong	result1, fp
22b7c     0C 4E 85 F1 | 	sub	fp, #12
22b80     00 FA 0D F2 | 	cmp	result1, #0 wz
22b84     1C 00 90 5D |  if_ne	jmp	#LR__3750
22b88     70 4E 05 F1 | 	add	fp, #112
22b8c     A7 12 02 FB | 	rdlong	arg01, fp
22b90     70 4E 85 F1 | 	sub	fp, #112
22b94     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
22b98     0C 4E 05 F1 | 	add	fp, #12
22b9c     A7 FA 61 FC | 	wrlong	result1, fp
22ba0     0C 4E 85 F1 | 	sub	fp, #12
22ba4                 | LR__3750
22ba4                 | LR__3751
22ba4                 | LR__3752
22ba4                 | LR__3753
22ba4                 | ' 					res = sync_fs(fs);
22ba4                 | ' 				}
22ba4                 | ' 			}
22ba4                 | ' 
22ba4                 | ' 		}
22ba4                 | ' 		;
22ba4                 | ' 	}
22ba4                 | ' 
22ba4                 | ' 	return res ;
22ba4     0C 4E 05 F1 | 	add	fp, #12
22ba8     A7 FA 01 FB | 	rdlong	result1, fp
22bac     0C 4E 85 F1 | 	sub	fp, #12
22bb0     A7 F0 03 F6 | 	mov	ptra, fp
22bb4     B2 00 A0 FD | 	call	#popregs_
22bb8                 | _fatfs_cc_f_rename_ret
22bb8     2D 00 64 FD | 	ret
22bbc                 | 
22bbc                 | _fatfs_cc_time
22bbc     00 4A 05 F6 | 	mov	COUNT_, #0
22bc0     A8 00 A0 FD | 	call	#pushregs_
22bc4     14 F0 07 F1 | 	add	ptra, #20
22bc8     04 4E 05 F1 | 	add	fp, #4
22bcc     A7 12 62 FC | 	wrlong	arg01, fp
22bd0     04 4E 05 F1 | 	add	fp, #4
22bd4     A7 12 02 F6 | 	mov	arg01, fp
22bd8     08 4E 85 F1 | 	sub	fp, #8
22bdc     00 14 06 F6 | 	mov	arg02, #0
22be0     0C 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
22be4     08 4E 05 F1 | 	add	fp, #8
22be8     A7 FA 01 FB | 	rdlong	result1, fp
22bec     08 4E 05 F1 | 	add	fp, #8
22bf0     A7 FA 61 FC | 	wrlong	result1, fp
22bf4     0C 4E 85 F1 | 	sub	fp, #12
22bf8     A7 FA 09 FB | 	rdlong	result1, fp wz
22bfc     04 4E 85 F1 | 	sub	fp, #4
22c00     18 00 90 AD |  if_e	jmp	#LR__3760
22c04     04 4E 05 F1 | 	add	fp, #4
22c08     A7 FA 01 FB | 	rdlong	result1, fp
22c0c     0C 4E 05 F1 | 	add	fp, #12
22c10     A7 14 02 FB | 	rdlong	arg02, fp
22c14     10 4E 85 F1 | 	sub	fp, #16
22c18     FD 14 62 FC | 	wrlong	arg02, result1
22c1c                 | LR__3760
22c1c                 | '         *tp = now;
22c1c                 | '     return now;
22c1c     10 4E 05 F1 | 	add	fp, #16
22c20     A7 FA 01 FB | 	rdlong	result1, fp
22c24     10 4E 85 F1 | 	sub	fp, #16
22c28     A7 F0 03 F6 | 	mov	ptra, fp
22c2c     B2 00 A0 FD | 	call	#popregs_
22c30                 | _fatfs_cc_time_ret
22c30     2D 00 64 FD | 	ret
22c34                 | 
22c34                 | _fatfs_cc_mktime
22c34     06 4A 05 F6 | 	mov	COUNT_, #6
22c38     A8 00 A0 FD | 	call	#pushregs_
22c3c     09 1F 02 F6 | 	mov	local01, arg01
22c40     14 1E 06 F1 | 	add	local01, #20
22c44     0F 13 02 FB | 	rdlong	arg01, local01
22c48     14 1E 86 F1 | 	sub	local01, #20
22c4c     46 12 56 F2 | 	cmps	arg01, #70 wc
22c50                 | '                 return (time_t) -1;
22c50     01 FA 65 C6 |  if_b	neg	result1, #1
22c54     7C 01 90 CD |  if_b	jmp	#LR__3774
22c58     03 00 00 FF 
22c5c     6C 21 06 F6 | 	mov	local02, ##1900
22c60     14 1E 06 F1 | 	add	local01, #20
22c64     0F FB 01 FB | 	rdlong	result1, local01
22c68     FD 20 02 F1 | 	add	local02, result1
22c6c     08 1E 86 F1 | 	sub	local01, #8
22c70     0F 23 02 FB | 	rdlong	local03, local01
22c74     01 22 86 F1 | 	sub	local03, #1
22c78     04 1E 06 F1 | 	add	local01, #4
22c7c     0F 13 02 FB | 	rdlong	arg01, local01
22c80     10 1E 86 F1 | 	sub	local01, #16
22c84     02 12 66 F0 | 	shl	arg01, #2
22c88     02 00 00 FF 
22c8c     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
22c90     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
22c94     09 FB 01 FB | 	rdlong	result1, arg01
22c98     FD 22 02 F1 | 	add	local03, result1
22c9c     10 13 02 F6 | 	mov	arg01, local02
22ca0     02 00 00 FF 
22ca4     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
22ca8     EC 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
22cac     00 FA 0D F2 | 	cmp	result1, #0 wz
22cb0     1C 00 90 AD |  if_e	jmp	#LR__3770
22cb4     00 24 06 F6 | 	mov	local04, #0
22cb8     10 1E 06 F1 | 	add	local01, #16
22cbc     0F FB 01 FB | 	rdlong	result1, local01
22cc0     10 1E 86 F1 | 	sub	local01, #16
22cc4     02 FA 55 F2 | 	cmps	result1, #2 wc
22cc8     01 24 06 36 |  if_ae	mov	local04, #1
22ccc     04 00 90 FD | 	jmp	#LR__3771
22cd0                 | LR__3770
22cd0     00 24 06 F6 | 	mov	local04, #0
22cd4                 | LR__3771
22cd4     04 1E 06 F1 | 	add	local01, #4
22cd8     0F FB 01 FB | 	rdlong	result1, local01
22cdc     04 1E 86 F1 | 	sub	local01, #4
22ce0     0F 27 02 FB | 	rdlong	local05, local01
22ce4     08 1E 06 F1 | 	add	local01, #8
22ce8     0F 13 02 FB | 	rdlong	arg01, local01
22cec     07 00 00 FF 
22cf0     10 12 06 FD | 	qmul	arg01, ##3600
22cf4     12 23 02 F1 | 	add	local03, local04
22cf8     FD 24 02 F6 | 	mov	local04, result1
22cfc     04 24 66 F0 | 	shl	local04, #4
22d00     FD 24 82 F1 | 	sub	local04, result1
22d04     02 24 66 F0 | 	shl	local04, #2
22d08     12 27 02 F1 | 	add	local05, local04
22d0c     08 1E 86 F1 | 	sub	local01, #8
22d10     18 24 62 FD | 	getqx	local04
22d14     A8 00 00 FF 
22d18     80 23 06 FD | 	qmul	local03, ##86400
22d1c     12 27 02 F1 | 	add	local05, local04
22d20     10 23 02 F6 | 	mov	local03, local02
22d24     03 00 00 FF 
22d28     B2 23 86 F1 | 	sub	local03, ##1970
22d2c     18 24 62 FD | 	getqx	local04
22d30     99 F0 00 FF 
22d34     80 23 06 FD | 	qmul	local03, ##31536000
22d38     12 27 02 F1 | 	add	local05, local04
22d3c     10 23 02 F6 | 	mov	local03, local02
22d40     03 00 00 FF 
22d44     B1 23 86 F1 | 	sub	local03, ##1969
22d48     11 29 52 F6 | 	abs	local06, local03 wc
22d4c     02 28 46 F0 | 	shr	local06, #2
22d50     14 29 82 F6 | 	negc	local06, local06
22d54     03 00 00 FF 
22d58     D1 21 56 F2 | 	cmps	local02, ##2001 wc
22d5c     18 24 62 FD | 	getqx	local04
22d60     12 27 02 F1 | 	add	local05, local04
22d64     18 00 90 CD |  if_b	jmp	#LR__3772
22d68     03 00 00 FF 
22d6c     D0 21 86 F1 | 	sub	local02, ##2000
22d70     10 25 52 F6 | 	abs	local04, local02 wc
22d74     64 24 16 FD | 	qdiv	local04, #100
22d78     18 24 62 FD | 	getqx	local04
22d7c     12 29 A2 F3 | 	sumnc	local06, local04
22d80                 | LR__3772
22d80     A8 00 00 FF 
22d84     80 29 06 FD | 	qmul	local06, ##86400
22d88     18 28 62 FD | 	getqx	local06
22d8c     14 27 02 F1 | 	add	local05, local06
22d90     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
22d94     02 00 00 FF 
22d98     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
22d9c     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
22da0     14 27 02 F1 | 	add	local05, local06
22da4     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
22da8     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
22dac     02 00 00 FF 
22db0     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
22db4     01 22 0E F2 | 	cmp	local03, #1 wz
22db8     14 00 90 5D |  if_ne	jmp	#LR__3773
22dbc     0F 13 02 F6 | 	mov	arg01, local01
22dc0     D8 19 B0 FD | 	call	#_fatfs_cc___indst
22dc4     00 FA 0D F2 | 	cmp	result1, #0 wz
22dc8     07 00 00 5F 
22dcc     10 26 86 51 |  if_ne	sub	local05, ##3600
22dd0                 | LR__3773
22dd0                 | '                 s -=  (3600L) ;
22dd0                 | ' 
22dd0                 | '         return s;
22dd0     13 FB 01 F6 | 	mov	result1, local05
22dd4                 | LR__3774
22dd4     A7 F0 03 F6 | 	mov	ptra, fp
22dd8     B2 00 A0 FD | 	call	#popregs_
22ddc                 | _fatfs_cc_mktime_ret
22ddc     2D 00 64 FD | 	ret
22de0                 | 
22de0                 | _fatfs_cc__gmtime_r
22de0     03 4A 05 F6 | 	mov	COUNT_, #3
22de4     A8 00 A0 FD | 	call	#pushregs_
22de8     09 1F 02 FB | 	rdlong	local01, arg01
22dec     A8 00 00 FF 
22df0     80 1F 16 FD | 	qdiv	local01, ##86400
22df4     18 FA 61 FD | 	getqx	result1
22df8     04 FA 05 F1 | 	add	result1, #4
22dfc     07 FA 15 FD | 	qdiv	result1, #7
22e00     18 14 06 F1 | 	add	arg02, #24
22e04     D1 7F 27 FF 
22e08     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
22e0c     D1 7F 27 3F 
22e10     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
22e14     03 00 00 3F 
22e18     DC 21 06 36 |  if_ae	mov	local02, ##2012
22e1c     03 00 00 CF 
22e20     B2 21 06 C6 |  if_b	mov	local02, ##1970
22e24                 | ' 	  year = 1970;
22e24                 | ' 	}
22e24                 | ' 
22e24                 | ' 	for(;;) {
22e24     19 FA 61 FD | 	getqy	result1
22e28     0A FB 61 FC | 	wrlong	result1, arg02
22e2c     18 14 86 F1 | 	sub	arg02, #24
22e30                 | LR__3780
22e30     10 13 02 F6 | 	mov	arg01, local02
22e34     60 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
22e38     00 FA 0D F2 | 	cmp	result1, #0 wz
22e3c     42 F1 00 5F 
22e40     00 23 06 56 |  if_ne	mov	local03, ##31622400
22e44     99 F0 00 AF 
22e48     80 23 06 A6 |  if_e	mov	local03, ##31536000
22e4c     11 1F 12 F2 | 	cmp	local01, local03 wc
22e50                 | ' 	    break;
22e50     01 20 06 31 |  if_ae	add	local02, #1
22e54     11 1F 82 31 |  if_ae	sub	local01, local03
22e58     D4 FF 9F 3D |  if_ae	jmp	#LR__3780
22e5c     A8 00 00 FF 
22e60     80 1F 16 FD | 	qdiv	local01, ##86400
22e64     10 23 02 F6 | 	mov	local03, local02
22e68     03 00 00 FF 
22e6c     6C 23 86 F1 | 	sub	local03, ##1900
22e70     14 14 06 F1 | 	add	arg02, #20
22e74     0A 23 62 FC | 	wrlong	local03, arg02
22e78     08 14 06 F1 | 	add	arg02, #8
22e7c     10 13 02 F6 | 	mov	arg01, local02
22e80     18 20 62 FD | 	getqx	local02
22e84     0A 21 62 FC | 	wrlong	local02, arg02
22e88     1C 14 86 F1 | 	sub	arg02, #28
22e8c     08 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
22e90     00 FA 0D F2 | 	cmp	result1, #0 wz
22e94     1D 22 06 56 |  if_ne	mov	local03, #29
22e98     1C 22 06 A6 |  if_e	mov	local03, #28
22e9c     02 00 00 FF 
22ea0     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
22ea4     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
22ea8     02 00 00 FF 
22eac     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
22eb0                 | ' 
22eb0                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
22eb0                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
22eb0     00 12 06 F6 | 	mov	arg01, #0
22eb4     97 2A 48 FB | 	callpa	#(@LR__3782-@LR__3781)>>2,fcache_load_ptr_
22eb8                 | LR__3781
22eb8     09 23 02 F6 | 	mov	local03, arg01
22ebc     02 22 66 F0 | 	shl	local03, #2
22ec0     02 00 00 FF 
22ec4     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
22ec8     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
22ecc     11 23 02 FB | 	rdlong	local03, local03
22ed0     11 21 52 F2 | 	cmps	local02, local03 wc
22ed4     02 00 00 FF 
22ed8     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
22edc     2C 00 90 CD |  if_b	jmp	#LR__3783
22ee0     09 23 02 F6 | 	mov	local03, arg01
22ee4     02 22 66 F0 | 	shl	local03, #2
22ee8     02 00 00 FF 
22eec     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
22ef0     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
22ef4     11 23 02 FB | 	rdlong	local03, local03
22ef8     11 21 82 F1 | 	sub	local02, local03
22efc     01 12 06 F1 | 	add	arg01, #1
22f00     02 00 00 FF 
22f04     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
22f08     AC FF 9F FD | 	jmp	#LR__3781
22f0c                 | LR__3782
22f0c                 | LR__3783
22f0c     A8 00 00 FF 
22f10     80 1F 16 FD | 	qdiv	local01, ##86400
22f14     10 14 06 F1 | 	add	arg02, #16
22f18     0A 13 62 FC | 	wrlong	arg01, arg02
22f1c     01 20 06 F1 | 	add	local02, #1
22f20     04 14 86 F1 | 	sub	arg02, #4
22f24     0A 21 62 FC | 	wrlong	local02, arg02
22f28     19 1E 62 FD | 	getqy	local01
22f2c     07 00 00 FF 
22f30     10 1E 16 FD | 	qdiv	local01, ##3600
22f34     18 22 62 FD | 	getqx	local03
22f38     07 00 00 FF 
22f3c     10 1E 16 FD | 	qdiv	local01, ##3600
22f40     04 14 86 F1 | 	sub	arg02, #4
22f44     0A 23 62 FC | 	wrlong	local03, arg02
22f48     19 1E 62 FD | 	getqy	local01
22f4c     3C 1E 16 FD | 	qdiv	local01, #60
22f50     18 22 62 FD | 	getqx	local03
22f54     3C 1E 16 FD | 	qdiv	local01, #60
22f58     04 14 86 F1 | 	sub	arg02, #4
22f5c     0A 23 62 FC | 	wrlong	local03, arg02
22f60     04 14 86 F1 | 	sub	arg02, #4
22f64                 | '         stm->tm_isdst = 0;
22f64                 | ' 
22f64                 | ' ;
22f64                 | '         return stm;
22f64     0A FB 01 F6 | 	mov	result1, arg02
22f68     19 22 62 FD | 	getqy	local03
22f6c     0A 23 62 FC | 	wrlong	local03, arg02
22f70     20 14 06 F1 | 	add	arg02, #32
22f74     0A 01 68 FC | 	wrlong	#0, arg02
22f78     A7 F0 03 F6 | 	mov	ptra, fp
22f7c     B2 00 A0 FD | 	call	#popregs_
22f80                 | _fatfs_cc__gmtime_r_ret
22f80     2D 00 64 FD | 	ret
22f84                 | 
22f84                 | _fatfs_cc__tzset
22f84     25 01 00 FF 
22f88     C5 12 06 F6 | 	mov	arg01, ##@LR__4095
22f8c     34 00 B0 FD | 	call	#_fatfs_cc_getenv
22f90     FD 12 02 F6 | 	mov	arg01, result1
22f94     02 00 00 FF 
22f98     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
22f9c     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
22fa0     02 00 00 FF 
22fa4     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
22fa8     3C 15 B0 FD | 	call	#_fatfs_cc___tzoffset
22fac     02 00 00 FF 
22fb0     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
22fb4     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
22fb8     02 00 00 FF 
22fbc     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
22fc0                 | _fatfs_cc__tzset_ret
22fc0     2D 00 64 FD | 	ret
22fc4                 | 
22fc4                 | _fatfs_cc_getenv
22fc4     06 4A 05 F6 | 	mov	COUNT_, #6
22fc8     A8 00 A0 FD | 	call	#pushregs_
22fcc     09 1F 02 F6 | 	mov	local01, arg01
22fd0     09 21 02 F6 | 	mov	local02, arg01
22fd4     97 06 48 FB | 	callpa	#(@LR__3791-@LR__3790)>>2,fcache_load_ptr_
22fd8                 | LR__3790
22fd8     10 FB C9 FA | 	rdbyte	result1, local02 wz
22fdc     01 20 06 51 |  if_ne	add	local02, #1
22fe0     F4 FF 9F 5D |  if_ne	jmp	#LR__3790
22fe4                 | LR__3791
22fe4     09 21 82 F1 | 	sub	local02, arg01
22fe8     10 FB 01 F6 | 	mov	result1, local02
22fec     02 00 00 FF 
22ff0     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
22ff4     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
22ff8     02 00 00 FF 
22ffc     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
23000                 | '             return 0;
23000     00 FA 05 A6 |  if_e	mov	result1, #0
23004     5C 00 90 AD |  if_e	jmp	#LR__3794
23008                 | ' 
23008                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
23008     02 00 00 FF 
2300c     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
23010     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
23014     02 00 00 FF 
23018     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2301c                 | LR__3792
2301c     11 25 0A FB | 	rdlong	local04, local03 wz
23020     3C 00 90 AD |  if_e	jmp	#LR__3793
23024     12 13 02 F6 | 	mov	arg01, local04
23028     0F 15 02 F6 | 	mov	arg02, local01
2302c     10 17 02 F6 | 	mov	arg03, local02
23030     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
23034     00 FA 0D F2 | 	cmp	result1, #0 wz
23038     10 27 02 A6 |  if_e	mov	local05, local02
2303c     12 27 02 A1 |  if_e	add	local05, local04
23040     13 29 C2 AA |  if_e	rdbyte	local06, local05
23044     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
23048                 | ' 			return name+len+1;
23048     10 25 02 A1 |  if_e	add	local04, local02
2304c     01 24 06 A1 |  if_e	add	local04, #1
23050     12 FB 01 A6 |  if_e	mov	result1, local04
23054     0C 00 90 AD |  if_e	jmp	#LR__3794
23058     04 22 06 F1 | 	add	local03, #4
2305c     BC FF 9F FD | 	jmp	#LR__3792
23060                 | LR__3793
23060                 | ' 	}
23060                 | ' 	return 0;
23060     00 FA 05 F6 | 	mov	result1, #0
23064                 | LR__3794
23064     A7 F0 03 F6 | 	mov	ptra, fp
23068     B2 00 A0 FD | 	call	#popregs_
2306c                 | _fatfs_cc_getenv_ret
2306c     2D 00 64 FD | 	ret
23070                 | 
23070                 | _fatfs_cc__get_fattime
23070     00 4A 05 F6 | 	mov	COUNT_, #0
23074     A8 00 A0 FD | 	call	#pushregs_
23078     34 F0 07 F1 | 	add	ptra, #52
2307c     00 12 06 F6 | 	mov	arg01, #0
23080     38 FB BF FD | 	call	#_fatfs_cc_time
23084     04 4E 05 F1 | 	add	fp, #4
23088     A7 FA 61 FC | 	wrlong	result1, fp
2308c     A7 12 02 F6 | 	mov	arg01, fp
23090     0C 4E 05 F1 | 	add	fp, #12
23094     A7 14 02 F6 | 	mov	arg02, fp
23098     10 4E 85 F1 | 	sub	fp, #16
2309c     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
230a0     24 4E 05 F1 | 	add	fp, #36
230a4     A7 14 02 FB | 	rdlong	arg02, fp
230a8     50 14 86 F1 | 	sub	arg02, #80
230ac     09 14 66 F0 | 	shl	arg02, #9
230b0     04 4E 85 F1 | 	sub	fp, #4
230b4     A7 FA 01 FB | 	rdlong	result1, fp
230b8     01 FA 05 F1 | 	add	result1, #1
230bc     05 FA 65 F0 | 	shl	result1, #5
230c0     FD 14 42 F5 | 	or	arg02, result1
230c4     04 4E 85 F1 | 	sub	fp, #4
230c8     A7 FA 01 FB | 	rdlong	result1, fp
230cc     FD 14 42 F5 | 	or	arg02, result1
230d0     14 4E 85 F1 | 	sub	fp, #20
230d4     A7 14 62 FC | 	wrlong	arg02, fp
230d8     10 4E 05 F1 | 	add	fp, #16
230dc     A7 14 02 FB | 	rdlong	arg02, fp
230e0     0B 14 66 F0 | 	shl	arg02, #11
230e4     04 4E 85 F1 | 	sub	fp, #4
230e8     A7 FA 01 FB | 	rdlong	result1, fp
230ec     05 FA 65 F0 | 	shl	result1, #5
230f0     FD 14 42 F5 | 	or	arg02, result1
230f4     04 4E 85 F1 | 	sub	fp, #4
230f8     A7 FA 01 FB | 	rdlong	result1, fp
230fc     FD 14 42 F5 | 	or	arg02, result1
23100     04 4E 85 F1 | 	sub	fp, #4
23104     A7 14 62 FC | 	wrlong	arg02, fp
23108                 | ' 
23108                 | '     now = time(0);
23108                 | '     _gmtime_r (&now, &date);
23108                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
23108                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
23108                 | '     return (ffdate << 16) | fftime;
23108     04 4E 85 F1 | 	sub	fp, #4
2310c     A7 FA 01 FB | 	rdlong	result1, fp
23110     10 FA 65 F0 | 	shl	result1, #16
23114     08 4E 85 F1 | 	sub	fp, #8
23118     0A FB 41 F5 | 	or	result1, arg02
2311c     A7 F0 03 F6 | 	mov	ptra, fp
23120     B2 00 A0 FD | 	call	#popregs_
23124                 | _fatfs_cc__get_fattime_ret
23124     2D 00 64 FD | 	ret
23128                 | 
23128                 | _fatfs_cc_unixtime_0789
23128     00 4A 05 F6 | 	mov	COUNT_, #0
2312c     A8 00 A0 FD | 	call	#pushregs_
23130     34 F0 07 F1 | 	add	ptra, #52
23134     04 4E 05 F1 | 	add	fp, #4
23138     A7 12 62 FC | 	wrlong	arg01, fp
2313c     04 4E 05 F1 | 	add	fp, #4
23140     A7 14 62 FC | 	wrlong	arg02, fp
23144     04 4E 85 F1 | 	sub	fp, #4
23148     A7 14 02 FB | 	rdlong	arg02, fp
2314c     09 14 46 F0 | 	shr	arg02, #9
23150     7F 14 06 F5 | 	and	arg02, #127
23154     50 FA 05 F6 | 	mov	result1, #80
23158     0A FB 01 F1 | 	add	result1, arg02
2315c     20 4E 05 F1 | 	add	fp, #32
23160     A7 FA 61 FC | 	wrlong	result1, fp
23164     20 4E 85 F1 | 	sub	fp, #32
23168     A7 FA 01 FB | 	rdlong	result1, fp
2316c     05 FA 45 F0 | 	shr	result1, #5
23170     FD FA 41 F8 | 	getnib	result1, result1, #0
23174     01 FA 85 F1 | 	sub	result1, #1
23178     1C 4E 05 F1 | 	add	fp, #28
2317c     A7 FA 61 FC | 	wrlong	result1, fp
23180     1C 4E 85 F1 | 	sub	fp, #28
23184     A7 FA 01 FB | 	rdlong	result1, fp
23188     1F FA 05 F5 | 	and	result1, #31
2318c     18 4E 05 F1 | 	add	fp, #24
23190     A7 FA 61 FC | 	wrlong	result1, fp
23194     14 4E 85 F1 | 	sub	fp, #20
23198     A7 FA 01 FB | 	rdlong	result1, fp
2319c     0B FA 45 F0 | 	shr	result1, #11
231a0     1F FA 05 F5 | 	and	result1, #31
231a4     10 4E 05 F1 | 	add	fp, #16
231a8     A7 FA 61 FC | 	wrlong	result1, fp
231ac     10 4E 85 F1 | 	sub	fp, #16
231b0     A7 FA 01 FB | 	rdlong	result1, fp
231b4     05 FA 45 F0 | 	shr	result1, #5
231b8     3F FA 05 F5 | 	and	result1, #63
231bc     0C 4E 05 F1 | 	add	fp, #12
231c0     A7 FA 61 FC | 	wrlong	result1, fp
231c4     0C 4E 85 F1 | 	sub	fp, #12
231c8     A7 14 02 FB | 	rdlong	arg02, fp
231cc     1F 14 06 F5 | 	and	arg02, #31
231d0     01 14 66 F0 | 	shl	arg02, #1
231d4     08 4E 05 F1 | 	add	fp, #8
231d8     A7 14 62 FC | 	wrlong	arg02, fp
231dc     A7 12 02 F6 | 	mov	arg01, fp
231e0     10 4E 85 F1 | 	sub	fp, #16
231e4     4C FA BF FD | 	call	#_fatfs_cc_mktime
231e8     0C 4E 05 F1 | 	add	fp, #12
231ec     A7 FA 61 FC | 	wrlong	result1, fp
231f0                 | ' 
231f0                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
231f0                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
231f0                 | '     date.tm_mday = (dosdate & 0x1f);
231f0                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
231f0                 | '     date.tm_min = (dostime >> 5) & 0x3f;
231f0                 | '     date.tm_sec = (dostime & 0x1f) << 1;
231f0                 | ' 
231f0                 | '     t = mktime(&date);
231f0                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
231f0                 | '     return t;
231f0     0C 4E 85 F1 | 	sub	fp, #12
231f4     A7 F0 03 F6 | 	mov	ptra, fp
231f8     B2 00 A0 FD | 	call	#popregs_
231fc                 | _fatfs_cc_unixtime_0789_ret
231fc     2D 00 64 FD | 	ret
23200                 | 
23200                 | _fatfs_cc__set_dos_error_0791
23200     09 01 02 F6 | 	mov	_var01, arg01
23204                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
23204                 | '     switch (derr) {
23204     14 00 26 F3 | 	fle	_var01, #20
23208     30 00 62 FD | 	jmprel	_var01
2320c                 | LR__3800
2320c     50 00 90 FD | 	jmp	#LR__3801
23210     84 00 90 FD | 	jmp	#LR__3815
23214     80 00 90 FD | 	jmp	#LR__3816
23218     7C 00 90 FD | 	jmp	#LR__3817
2321c     48 00 90 FD | 	jmp	#LR__3802
23220     44 00 90 FD | 	jmp	#LR__3803
23224     40 00 90 FD | 	jmp	#LR__3804
23228     44 00 90 FD | 	jmp	#LR__3805
2322c     48 00 90 FD | 	jmp	#LR__3807
23230     54 00 90 FD | 	jmp	#LR__3810
23234     38 00 90 FD | 	jmp	#LR__3806
23238     4C 00 90 FD | 	jmp	#LR__3811
2323c     48 00 90 FD | 	jmp	#LR__3812
23240     44 00 90 FD | 	jmp	#LR__3813
23244     50 00 90 FD | 	jmp	#LR__3818
23248     4C 00 90 FD | 	jmp	#LR__3818
2324c     48 00 90 FD | 	jmp	#LR__3818
23250     2C 00 90 FD | 	jmp	#LR__3808
23254     38 00 90 FD | 	jmp	#LR__3814
23258     2C 00 90 FD | 	jmp	#LR__3809
2325c     38 00 90 FD | 	jmp	#LR__3818
23260                 | LR__3801
23260     00 02 06 F6 | 	mov	_var02, #0
23264                 | '         r = 0;
23264                 | '         break;
23264     34 00 90 FD | 	jmp	#LR__3819
23268                 | LR__3802
23268                 | LR__3803
23268                 | LR__3804
23268     04 02 06 F6 | 	mov	_var02, #4
2326c                 | '         r =  4 ;
2326c                 | '         break;
2326c     2C 00 90 FD | 	jmp	#LR__3819
23270                 | LR__3805
23270                 | LR__3806
23270     06 02 06 F6 | 	mov	_var02, #6
23274                 | '         r =  6 ;
23274                 | '         break;
23274     24 00 90 FD | 	jmp	#LR__3819
23278                 | LR__3807
23278     09 02 06 F6 | 	mov	_var02, #9
2327c                 | '         r =  9 ;
2327c                 | '         break;
2327c     1C 00 90 FD | 	jmp	#LR__3819
23280                 | LR__3808
23280     07 02 06 F6 | 	mov	_var02, #7
23284                 | '         r =  7 ;
23284                 | '         break;
23284     14 00 90 FD | 	jmp	#LR__3819
23288                 | LR__3809
23288                 | LR__3810
23288                 | LR__3811
23288                 | LR__3812
23288                 | LR__3813
23288     0A 02 06 F6 | 	mov	_var02, #10
2328c                 | '         r =  10 ;
2328c                 | '         break;
2328c     0C 00 90 FD | 	jmp	#LR__3819
23290                 | LR__3814
23290     0B 02 06 F6 | 	mov	_var02, #11
23294                 | '         r =  11 ;
23294                 | '         break;
23294     04 00 90 FD | 	jmp	#LR__3819
23298                 | LR__3815
23298                 | LR__3816
23298                 | LR__3817
23298                 | LR__3818
23298     0C 02 06 F6 | 	mov	_var02, #12
2329c                 | '         r =  12 ;
2329c                 | '         break;
2329c                 | LR__3819
2329c                 | '     }
2329c                 | '     return _seterror(r);
2329c     00 02 4E F2 | 	cmps	_var02, #0 wz
232a0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
232a4     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
232a8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
232ac     01 FA 65 56 |  if_ne	neg	result1, #1
232b0     00 FA 05 A6 |  if_e	mov	result1, #0
232b4                 | _fatfs_cc__set_dos_error_0791_ret
232b4     2D 00 64 FD | 	ret
232b8                 | 
232b8                 | _fatfs_cc_v_creat
232b8     04 4A 05 F6 | 	mov	COUNT_, #4
232bc     A8 00 A0 FD | 	call	#pushregs_
232c0     09 1F 02 F6 | 	mov	local01, arg01
232c4     0A 21 02 F6 | 	mov	local02, arg02
232c8     03 00 00 FF 
232cc     3C 12 06 F6 | 	mov	arg01, ##1596
232d0                 | '     return _gc_alloc(size);
232d0     10 14 06 F6 | 	mov	arg02, #16
232d4     30 60 BF FD | 	call	#__system___gc_doalloc
232d8     FD 22 0A F6 | 	mov	local03, result1 wz
232dc                 | '       return _seterror( 7 );
232dc     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
232e0     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
232e4     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
232e8     01 FA 65 A6 |  if_e	neg	result1, #1
232ec     58 00 90 AD |  if_e	jmp	#LR__3821
232f0     11 13 02 F6 | 	mov	arg01, local03
232f4     00 14 06 F6 | 	mov	arg02, #0
232f8     03 00 00 FF 
232fc     3C 16 06 F6 | 	mov	arg03, ##1596
23300     98 00 A0 FD | 	call	#\builtin_bytefill_
23304     02 00 00 FF 
23308     14 22 06 F1 | 	add	local03, ##1044
2330c     11 13 02 F6 | 	mov	arg01, local03
23310     02 00 00 FF 
23314     14 22 86 F1 | 	sub	local03, ##1044
23318     10 15 02 F6 | 	mov	arg02, local02
2331c     07 16 06 F6 | 	mov	arg03, #7
23320     B4 CC BF FD | 	call	#_fatfs_cc_f_open
23324     FD 24 0A F6 | 	mov	local04, result1 wz
23328     14 00 90 AD |  if_e	jmp	#LR__3820
2332c     11 13 02 F6 | 	mov	arg01, local03
23330                 | '     return _gc_free(ptr);
23330     E0 60 BF FD | 	call	#__system___gc_free
23334                 | '     free(f);
23334                 | '     return _set_dos_error(r);
23334     12 13 02 F6 | 	mov	arg01, local04
23338     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0791
2333c     08 00 90 FD | 	jmp	#LR__3821
23340                 | LR__3820
23340     0F 23 62 FC | 	wrlong	local03, local01
23344                 | '   }
23344                 | '   fil->vfsdata = f;
23344                 | '   return 0;
23344     00 FA 05 F6 | 	mov	result1, #0
23348                 | LR__3821
23348     A7 F0 03 F6 | 	mov	ptra, fp
2334c     B2 00 A0 FD | 	call	#popregs_
23350                 | _fatfs_cc_v_creat_ret
23350     2D 00 64 FD | 	ret
23354                 | 
23354                 | _fatfs_cc_v_close
23354     02 4A 05 F6 | 	mov	COUNT_, #2
23358     A8 00 A0 FD | 	call	#pushregs_
2335c     09 1F 02 FB | 	rdlong	local01, arg01
23360     02 00 00 FF 
23364     14 1E 06 F1 | 	add	local01, ##1044
23368     0F 13 02 F6 | 	mov	arg01, local01
2336c     02 00 00 FF 
23370     14 1E 86 F1 | 	sub	local01, ##1044
23374     DC E3 BF FD | 	call	#_fatfs_cc_f_close
23378     FD 20 02 F6 | 	mov	local02, result1
2337c     0F 13 02 F6 | 	mov	arg01, local01
23380                 | '     return _gc_free(ptr);
23380     90 60 BF FD | 	call	#__system___gc_free
23384                 | '     FAT_FIL *f = fil->vfsdata;
23384                 | '     r=f_close(&f->fil);
23384                 | '     free(f);
23384                 | '     return _set_dos_error(r);
23384     10 13 02 F6 | 	mov	arg01, local02
23388     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0791
2338c     A7 F0 03 F6 | 	mov	ptra, fp
23390     B2 00 A0 FD | 	call	#popregs_
23394                 | _fatfs_cc_v_close_ret
23394     2D 00 64 FD | 	ret
23398                 | 
23398                 | _fatfs_cc_v_opendir
23398     04 4A 05 F6 | 	mov	COUNT_, #4
2339c     A8 00 A0 FD | 	call	#pushregs_
233a0     09 1F 02 F6 | 	mov	local01, arg01
233a4     0A 21 02 F6 | 	mov	local02, arg02
233a8     30 12 06 F6 | 	mov	arg01, #48
233ac                 | '     return _gc_alloc(size);
233ac     10 14 06 F6 | 	mov	arg02, #16
233b0     54 5F BF FD | 	call	#__system___gc_doalloc
233b4     FD 22 0A F6 | 	mov	local03, result1 wz
233b8                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
233b8                 | '       return _seterror( 7 );
233b8     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
233bc     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
233c0     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
233c4     01 FA 65 A6 |  if_e	neg	result1, #1
233c8     34 00 90 AD |  if_e	jmp	#LR__3831
233cc     10 15 02 F6 | 	mov	arg02, local02
233d0     11 13 02 F6 | 	mov	arg01, local03
233d4     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
233d8     FD 24 0A F6 | 	mov	local04, result1 wz
233dc     14 00 90 AD |  if_e	jmp	#LR__3830
233e0     11 13 02 F6 | 	mov	arg01, local03
233e4                 | '     return _gc_free(ptr);
233e4     2C 60 BF FD | 	call	#__system___gc_free
233e8                 | '         free(f);
233e8                 | '         return _set_dos_error(r);
233e8     12 13 02 F6 | 	mov	arg01, local04
233ec     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0791
233f0     0C 00 90 FD | 	jmp	#LR__3831
233f4                 | LR__3830
233f4     04 1E 06 F1 | 	add	local01, #4
233f8     0F 23 62 FC | 	wrlong	local03, local01
233fc                 | '     }
233fc                 | '     dir->vfsdata = f;
233fc                 | '     return 0;
233fc     00 FA 05 F6 | 	mov	result1, #0
23400                 | LR__3831
23400     A7 F0 03 F6 | 	mov	ptra, fp
23404     B2 00 A0 FD | 	call	#popregs_
23408                 | _fatfs_cc_v_opendir_ret
23408     2D 00 64 FD | 	ret
2340c                 | 
2340c                 | _fatfs_cc_v_closedir
2340c     02 4A 05 F6 | 	mov	COUNT_, #2
23410     A8 00 A0 FD | 	call	#pushregs_
23414     04 12 06 F1 | 	add	arg01, #4
23418     09 1F 02 FB | 	rdlong	local01, arg01
2341c     0F 13 02 F6 | 	mov	arg01, local01
23420     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
23424     FD 20 02 F6 | 	mov	local02, result1
23428     0F 13 02 F6 | 	mov	arg01, local01
2342c                 | '     return _gc_free(ptr);
2342c     E4 5F BF FD | 	call	#__system___gc_free
23430     00 20 0E F2 | 	cmp	local02, #0 wz
23434     10 13 02 56 |  if_ne	mov	arg01, local02
23438     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0791
2343c                 | '     return r;
2343c     10 FB 01 F6 | 	mov	result1, local02
23440     A7 F0 03 F6 | 	mov	ptra, fp
23444     B2 00 A0 FD | 	call	#popregs_
23448                 | _fatfs_cc_v_closedir_ret
23448     2D 00 64 FD | 	ret
2344c                 | 
2344c                 | _fatfs_cc_v_readdir
2344c     01 4A 05 F6 | 	mov	COUNT_, #1
23450     A8 00 A0 FD | 	call	#pushregs_
23454     2C F1 07 F1 | 	add	ptra, #300
23458     04 4E 05 F1 | 	add	fp, #4
2345c     A7 12 62 FC | 	wrlong	arg01, fp
23460     04 4E 05 F1 | 	add	fp, #4
23464     A7 14 62 FC | 	wrlong	arg02, fp
23468     04 4E 85 F1 | 	sub	fp, #4
2346c     A7 16 02 FB | 	rdlong	arg03, fp
23470     04 16 06 F1 | 	add	arg03, #4
23474     0B 13 02 FB | 	rdlong	arg01, arg03
23478     08 4E 05 F1 | 	add	fp, #8
2347c     A7 14 02 F6 | 	mov	arg02, fp
23480     0C 4E 85 F1 | 	sub	fp, #12
23484     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
23488     28 4F 05 F1 | 	add	fp, #296
2348c     A7 FA 61 FC | 	wrlong	result1, fp
23490     28 4F 85 F1 | 	sub	fp, #296
23494     00 FA 0D F2 | 	cmp	result1, #0 wz
23498     14 00 90 AD |  if_e	jmp	#LR__3840
2349c                 | '         return _set_dos_error(r);
2349c     28 4F 05 F1 | 	add	fp, #296
234a0     A7 12 02 FB | 	rdlong	arg01, fp
234a4     28 4F 85 F1 | 	sub	fp, #296
234a8     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0791
234ac     C4 00 90 FD | 	jmp	#LR__3843
234b0                 | LR__3840
234b0     28 4E 05 F1 | 	add	fp, #40
234b4     A7 16 CA FA | 	rdbyte	arg03, fp wz
234b8     28 4E 85 F1 | 	sub	fp, #40
234bc                 | '         return -1;
234bc     01 FA 65 A6 |  if_e	neg	result1, #1
234c0     B0 00 90 AD |  if_e	jmp	#LR__3843
234c4     08 4E 05 F1 | 	add	fp, #8
234c8     A7 12 02 FB | 	rdlong	arg01, fp
234cc     20 4E 05 F1 | 	add	fp, #32
234d0     A7 14 02 F6 | 	mov	arg02, fp
234d4     28 4E 85 F1 | 	sub	fp, #40
234d8     3F 16 06 F6 | 	mov	arg03, #63
234dc     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
234e0     08 4E 05 F1 | 	add	fp, #8
234e4     A7 16 02 FB | 	rdlong	arg03, fp
234e8     3F 16 06 F1 | 	add	arg03, #63
234ec     0B 01 48 FC | 	wrbyte	#0, arg03
234f0     0C 4E 05 F1 | 	add	fp, #12
234f4     A7 16 C2 FA | 	rdbyte	arg03, fp
234f8     14 4E 85 F1 | 	sub	fp, #20
234fc     10 16 CE F7 | 	test	arg03, #16 wz
23500     18 00 90 AD |  if_e	jmp	#LR__3841
23504     08 4E 05 F1 | 	add	fp, #8
23508     A7 16 02 FB | 	rdlong	arg03, fp
2350c     08 4E 85 F1 | 	sub	fp, #8
23510     50 16 06 F1 | 	add	arg03, #80
23514     0B 03 48 FC | 	wrbyte	#1, arg03
23518     14 00 90 FD | 	jmp	#LR__3842
2351c                 | LR__3841
2351c     08 4E 05 F1 | 	add	fp, #8
23520     A7 16 02 FB | 	rdlong	arg03, fp
23524     08 4E 85 F1 | 	sub	fp, #8
23528     50 16 06 F1 | 	add	arg03, #80
2352c     0B 01 48 FC | 	wrbyte	#0, arg03
23530                 | LR__3842
23530     08 4E 05 F1 | 	add	fp, #8
23534     A7 16 02 FB | 	rdlong	arg03, fp
23538     04 4E 05 F1 | 	add	fp, #4
2353c     A7 14 02 FB | 	rdlong	arg02, fp
23540     48 16 06 F1 | 	add	arg03, #72
23544     0B 15 62 FC | 	wrlong	arg02, arg03
23548     04 4E 85 F1 | 	sub	fp, #4
2354c     A7 1E 02 FB | 	rdlong	local01, fp
23550     08 4E 05 F1 | 	add	fp, #8
23554     A7 12 E2 FA | 	rdword	arg01, fp
23558     02 4E 05 F1 | 	add	fp, #2
2355c     A7 14 E2 FA | 	rdword	arg02, fp
23560     12 4E 85 F1 | 	sub	fp, #18
23564     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0789
23568     4C 1E 06 F1 | 	add	local01, #76
2356c     0F FB 61 FC | 	wrlong	result1, local01
23570                 | '         ent->d_type =  (0) ;
23570                 | '     }
23570                 | '     ent->d_size = finfo.fsize;
23570                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
23570                 | '     return 0;
23570     00 FA 05 F6 | 	mov	result1, #0
23574                 | LR__3843
23574     A7 F0 03 F6 | 	mov	ptra, fp
23578     B2 00 A0 FD | 	call	#popregs_
2357c                 | _fatfs_cc_v_readdir_ret
2357c     2D 00 64 FD | 	ret
23580                 | 
23580                 | _fatfs_cc_v_stat
23580     03 4A 05 F6 | 	mov	COUNT_, #3
23584     A8 00 A0 FD | 	call	#pushregs_
23588     30 F1 07 F1 | 	add	ptra, #304
2358c     04 4E 05 F1 | 	add	fp, #4
23590     A7 12 62 FC | 	wrlong	arg01, fp
23594     04 4E 05 F1 | 	add	fp, #4
23598     A7 14 62 FC | 	wrlong	arg02, fp
2359c     08 4E 85 F1 | 	sub	fp, #8
235a0     0A 13 02 F6 | 	mov	arg01, arg02
235a4     00 14 06 F6 | 	mov	arg02, #0
235a8     30 16 06 F6 | 	mov	arg03, #48
235ac     98 00 A0 FD | 	call	#\builtin_bytefill_
235b0     04 4E 05 F1 | 	add	fp, #4
235b4     A7 FA 01 FB | 	rdlong	result1, fp
235b8     04 4E 85 F1 | 	sub	fp, #4
235bc     FD FA C9 FA | 	rdbyte	result1, result1 wz
235c0     2C 00 90 AD |  if_e	jmp	#LR__3850
235c4     04 4E 05 F1 | 	add	fp, #4
235c8     A7 FA 01 FB | 	rdlong	result1, fp
235cc     04 4E 85 F1 | 	sub	fp, #4
235d0     FD FA C1 FA | 	rdbyte	result1, result1
235d4     2E FA 0D F2 | 	cmp	result1, #46 wz
235d8     04 4E 05 A1 |  if_e	add	fp, #4
235dc     A7 1E 02 AB |  if_e	rdlong	local01, fp
235e0     04 4E 85 A1 |  if_e	sub	fp, #4
235e4     01 1E 06 A1 |  if_e	add	local01, #1
235e8     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
235ec     18 00 90 5D |  if_ne	jmp	#LR__3851
235f0                 | LR__3850
235f0     18 4E 05 F1 | 	add	fp, #24
235f4     A7 20 48 FC | 	wrbyte	#16, fp
235f8     0C 4E 85 F1 | 	sub	fp, #12
235fc     A7 00 68 FC | 	wrlong	#0, fp
23600     0C 4E 85 F1 | 	sub	fp, #12
23604     24 00 90 FD | 	jmp	#LR__3852
23608                 | LR__3851
23608     04 4E 05 F1 | 	add	fp, #4
2360c     A7 12 02 FB | 	rdlong	arg01, fp
23610     0C 4E 05 F1 | 	add	fp, #12
23614     A7 14 02 F6 | 	mov	arg02, fp
23618     10 4E 85 F1 | 	sub	fp, #16
2361c     AC EB BF FD | 	call	#_fatfs_cc_f_stat
23620     0C 4E 05 F1 | 	add	fp, #12
23624     A7 FA 61 FC | 	wrlong	result1, fp
23628     0C 4E 85 F1 | 	sub	fp, #12
2362c                 | LR__3852
2362c     0C 4E 05 F1 | 	add	fp, #12
23630     A7 20 0A FB | 	rdlong	local02, fp wz
23634     0C 4E 85 F1 | 	sub	fp, #12
23638     14 00 90 AD |  if_e	jmp	#LR__3853
2363c                 | '         return _set_dos_error(r);
2363c     0C 4E 05 F1 | 	add	fp, #12
23640     A7 12 02 FB | 	rdlong	arg01, fp
23644     0C 4E 85 F1 | 	sub	fp, #12
23648     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0791
2364c     14 01 90 FD | 	jmp	#LR__3854
23650                 | LR__3853
23650     2C 4F 05 F1 | 	add	fp, #300
23654     A7 48 6A FC | 	wrlong	#292, fp
23658     14 4F 85 F1 | 	sub	fp, #276
2365c     A7 22 C2 FA | 	rdbyte	local03, fp
23660     18 4E 85 F1 | 	sub	fp, #24
23664     01 22 CE F7 | 	test	local03, #1 wz
23668     2C 4F 05 51 |  if_ne	add	fp, #300
2366c     A7 22 02 5B |  if_ne	rdlong	local03, fp
23670     92 22 46 55 |  if_ne	or	local03, #146
23674     A7 22 62 5C |  if_ne	wrlong	local03, fp
23678     2C 4F 85 51 |  if_ne	sub	fp, #300
2367c     18 4E 05 F1 | 	add	fp, #24
23680     A7 22 C2 FA | 	rdbyte	local03, fp
23684     18 4E 85 F1 | 	sub	fp, #24
23688     10 22 CE F7 | 	test	local03, #16 wz
2368c     2C 4F 05 51 |  if_ne	add	fp, #300
23690     A7 22 02 5B |  if_ne	rdlong	local03, fp
23694     08 00 00 5F 
23698     49 22 46 55 |  if_ne	or	local03, ##4169
2369c     A7 22 62 5C |  if_ne	wrlong	local03, fp
236a0     2C 4F 85 51 |  if_ne	sub	fp, #300
236a4     08 4E 05 F1 | 	add	fp, #8
236a8     A7 22 02 FB | 	rdlong	local03, fp
236ac     24 4F 05 F1 | 	add	fp, #292
236b0     A7 20 02 FB | 	rdlong	local02, fp
236b4     08 22 06 F1 | 	add	local03, #8
236b8     11 21 62 FC | 	wrlong	local02, local03
236bc     24 4F 85 F1 | 	sub	fp, #292
236c0     A7 22 02 FB | 	rdlong	local03, fp
236c4     0C 22 06 F1 | 	add	local03, #12
236c8     11 03 68 FC | 	wrlong	#1, local03
236cc     A7 22 02 FB | 	rdlong	local03, fp
236d0     08 4E 05 F1 | 	add	fp, #8
236d4     A7 20 02 FB | 	rdlong	local02, fp
236d8     18 22 06 F1 | 	add	local03, #24
236dc     11 21 62 FC | 	wrlong	local02, local03
236e0     08 4E 85 F1 | 	sub	fp, #8
236e4     A7 22 02 FB | 	rdlong	local03, fp
236e8     1C 22 06 F1 | 	add	local03, #28
236ec     01 00 80 FF 
236f0     11 01 68 FC | 	wrlong	##512, local03
236f4     A7 20 02 FB | 	rdlong	local02, fp
236f8     10 23 02 F6 | 	mov	local03, local02
236fc     18 20 06 F1 | 	add	local02, #24
23700     10 21 02 FB | 	rdlong	local02, local02
23704     FF 21 06 F1 | 	add	local02, #511
23708     10 21 52 F6 | 	abs	local02, local02 wc
2370c     09 20 46 F0 | 	shr	local02, #9
23710     10 21 82 F6 | 	negc	local02, local02
23714     20 22 06 F1 | 	add	local03, #32
23718     11 21 62 FC | 	wrlong	local02, local03
2371c     A7 20 02 FB | 	rdlong	local02, fp
23720     10 23 02 F6 | 	mov	local03, local02
23724     10 1F 02 F6 | 	mov	local01, local02
23728     0C 4E 05 F1 | 	add	fp, #12
2372c     A7 12 E2 FA | 	rdword	arg01, fp
23730     02 4E 05 F1 | 	add	fp, #2
23734     A7 14 E2 FA | 	rdword	arg02, fp
23738     16 4E 85 F1 | 	sub	fp, #22
2373c     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0789
23740     2C 1E 06 F1 | 	add	local01, #44
23744     0F FB 61 FC | 	wrlong	result1, local01
23748     28 20 06 F1 | 	add	local02, #40
2374c     10 FB 61 FC | 	wrlong	result1, local02
23750     24 22 06 F1 | 	add	local03, #36
23754     11 FB 61 FC | 	wrlong	result1, local03
23758                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
23758                 | '     }
23758                 | '     buf->st_mode = mode;
23758                 | '     buf->st_nlink = 1;
23758                 | '     buf->st_size = finfo.fsize;
23758                 | '     buf->st_blksize = 512;
23758                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
23758                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
23758                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
23758                 | '     return r;
23758     0C 4E 05 F1 | 	add	fp, #12
2375c     A7 FA 01 FB | 	rdlong	result1, fp
23760     0C 4E 85 F1 | 	sub	fp, #12
23764                 | LR__3854
23764     A7 F0 03 F6 | 	mov	ptra, fp
23768     B2 00 A0 FD | 	call	#popregs_
2376c                 | _fatfs_cc_v_stat_ret
2376c     2D 00 64 FD | 	ret
23770                 | 
23770                 | _fatfs_cc_v_read
23770     00 4A 05 F6 | 	mov	COUNT_, #0
23774     A8 00 A0 FD | 	call	#pushregs_
23778     1C F0 07 F1 | 	add	ptra, #28
2377c     04 4E 05 F1 | 	add	fp, #4
23780     A7 12 62 FC | 	wrlong	arg01, fp
23784     04 4E 05 F1 | 	add	fp, #4
23788     A7 14 62 FC | 	wrlong	arg02, fp
2378c     04 4E 05 F1 | 	add	fp, #4
23790     A7 16 62 FC | 	wrlong	arg03, fp
23794     08 4E 85 F1 | 	sub	fp, #8
23798     A7 12 02 FB | 	rdlong	arg01, fp
2379c     09 13 0A FB | 	rdlong	arg01, arg01 wz
237a0     0C 4E 05 F1 | 	add	fp, #12
237a4     A7 12 62 FC | 	wrlong	arg01, fp
237a8     10 4E 85 F1 | 	sub	fp, #16
237ac                 | '         return _seterror( 5 );
237ac     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
237b0     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
237b4     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
237b8     01 FA 65 A6 |  if_e	neg	result1, #1
237bc     B8 00 90 AD |  if_e	jmp	#LR__3862
237c0     10 4E 05 F1 | 	add	fp, #16
237c4     A7 12 02 FB | 	rdlong	arg01, fp
237c8     02 00 00 FF 
237cc     14 12 06 F1 | 	add	arg01, ##1044
237d0     08 4E 85 F1 | 	sub	fp, #8
237d4     A7 14 02 FB | 	rdlong	arg02, fp
237d8     04 4E 05 F1 | 	add	fp, #4
237dc     A7 16 02 FB | 	rdlong	arg03, fp
237e0     0C 4E 05 F1 | 	add	fp, #12
237e4     A7 18 02 F6 | 	mov	arg04, fp
237e8     18 4E 85 F1 | 	sub	fp, #24
237ec     C4 CE BF FD | 	call	#_fatfs_cc_f_read
237f0     14 4E 05 F1 | 	add	fp, #20
237f4     A7 FA 61 FC | 	wrlong	result1, fp
237f8     14 4E 85 F1 | 	sub	fp, #20
237fc     00 FA 0D F2 | 	cmp	result1, #0 wz
23800     34 00 90 AD |  if_e	jmp	#LR__3860
23804     04 4E 05 F1 | 	add	fp, #4
23808     A7 18 02 FB | 	rdlong	arg04, fp
2380c     0C 17 02 F6 | 	mov	arg03, arg04
23810     08 18 06 F1 | 	add	arg04, #8
23814     0C 19 02 FB | 	rdlong	arg04, arg04
23818     20 18 46 F5 | 	or	arg04, #32
2381c     08 16 06 F1 | 	add	arg03, #8
23820     0B 19 62 FC | 	wrlong	arg04, arg03
23824                 | '         fil->state |=  (0x20) ;
23824                 | '         return _set_dos_error(r);
23824     10 4E 05 F1 | 	add	fp, #16
23828     A7 12 02 FB | 	rdlong	arg01, fp
2382c     14 4E 85 F1 | 	sub	fp, #20
23830     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0791
23834     40 00 90 FD | 	jmp	#LR__3862
23838                 | LR__3860
23838     18 4E 05 F1 | 	add	fp, #24
2383c     A7 FA 09 FB | 	rdlong	result1, fp wz
23840     18 4E 85 F1 | 	sub	fp, #24
23844     24 00 90 5D |  if_ne	jmp	#LR__3861
23848     04 4E 05 F1 | 	add	fp, #4
2384c     A7 FA 01 FB | 	rdlong	result1, fp
23850     FD 18 02 F6 | 	mov	arg04, result1
23854     04 4E 85 F1 | 	sub	fp, #4
23858     08 FA 05 F1 | 	add	result1, #8
2385c     FD FA 01 FB | 	rdlong	result1, result1
23860     10 FA 45 F5 | 	or	result1, #16
23864     08 18 06 F1 | 	add	arg04, #8
23868     0C FB 61 FC | 	wrlong	result1, arg04
2386c                 | LR__3861
2386c                 | '         fil->state |=  (0x10) ;
2386c                 | '     }
2386c                 | '     return x;
2386c     18 4E 05 F1 | 	add	fp, #24
23870     A7 FA 01 FB | 	rdlong	result1, fp
23874     18 4E 85 F1 | 	sub	fp, #24
23878                 | LR__3862
23878     A7 F0 03 F6 | 	mov	ptra, fp
2387c     B2 00 A0 FD | 	call	#popregs_
23880                 | _fatfs_cc_v_read_ret
23880     2D 00 64 FD | 	ret
23884                 | 
23884                 | _fatfs_cc_v_write
23884     00 4A 05 F6 | 	mov	COUNT_, #0
23888     A8 00 A0 FD | 	call	#pushregs_
2388c     1C F0 07 F1 | 	add	ptra, #28
23890     04 4E 05 F1 | 	add	fp, #4
23894     A7 12 62 FC | 	wrlong	arg01, fp
23898     04 4E 05 F1 | 	add	fp, #4
2389c     A7 14 62 FC | 	wrlong	arg02, fp
238a0     04 4E 05 F1 | 	add	fp, #4
238a4     A7 16 62 FC | 	wrlong	arg03, fp
238a8     08 4E 85 F1 | 	sub	fp, #8
238ac     A7 12 02 FB | 	rdlong	arg01, fp
238b0     09 13 0A FB | 	rdlong	arg01, arg01 wz
238b4     0C 4E 05 F1 | 	add	fp, #12
238b8     A7 12 62 FC | 	wrlong	arg01, fp
238bc     10 4E 85 F1 | 	sub	fp, #16
238c0                 | '         return _seterror( 5 );
238c0     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
238c4     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
238c8     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
238cc     01 FA 65 A6 |  if_e	neg	result1, #1
238d0     84 00 90 AD |  if_e	jmp	#LR__3871
238d4     10 4E 05 F1 | 	add	fp, #16
238d8     A7 12 02 FB | 	rdlong	arg01, fp
238dc     02 00 00 FF 
238e0     14 12 06 F1 | 	add	arg01, ##1044
238e4     08 4E 85 F1 | 	sub	fp, #8
238e8     A7 14 02 FB | 	rdlong	arg02, fp
238ec     04 4E 05 F1 | 	add	fp, #4
238f0     A7 16 02 FB | 	rdlong	arg03, fp
238f4     0C 4E 05 F1 | 	add	fp, #12
238f8     A7 18 02 F6 | 	mov	arg04, fp
238fc     18 4E 85 F1 | 	sub	fp, #24
23900     4C D4 BF FD | 	call	#_fatfs_cc_f_write
23904     14 4E 05 F1 | 	add	fp, #20
23908     A7 FA 61 FC | 	wrlong	result1, fp
2390c     14 4E 85 F1 | 	sub	fp, #20
23910     00 FA 0D F2 | 	cmp	result1, #0 wz
23914     34 00 90 AD |  if_e	jmp	#LR__3870
23918     04 4E 05 F1 | 	add	fp, #4
2391c     A7 18 02 FB | 	rdlong	arg04, fp
23920     0C 17 02 F6 | 	mov	arg03, arg04
23924     08 18 06 F1 | 	add	arg04, #8
23928     0C 19 02 FB | 	rdlong	arg04, arg04
2392c     20 18 46 F5 | 	or	arg04, #32
23930     08 16 06 F1 | 	add	arg03, #8
23934     0B 19 62 FC | 	wrlong	arg04, arg03
23938                 | '         fil->state |=  (0x20) ;
23938                 | '         return _set_dos_error(r);
23938     10 4E 05 F1 | 	add	fp, #16
2393c     A7 12 02 FB | 	rdlong	arg01, fp
23940     14 4E 85 F1 | 	sub	fp, #20
23944     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0791
23948     0C 00 90 FD | 	jmp	#LR__3871
2394c                 | LR__3870
2394c                 | '     }
2394c                 | '     return x;
2394c     18 4E 05 F1 | 	add	fp, #24
23950     A7 FA 01 FB | 	rdlong	result1, fp
23954     18 4E 85 F1 | 	sub	fp, #24
23958                 | LR__3871
23958     A7 F0 03 F6 | 	mov	ptra, fp
2395c     B2 00 A0 FD | 	call	#popregs_
23960                 | _fatfs_cc_v_write_ret
23960     2D 00 64 FD | 	ret
23964                 | 
23964                 | _fatfs_cc_v_lseek
23964     04 4A 05 F6 | 	mov	COUNT_, #4
23968     A8 00 A0 FD | 	call	#pushregs_
2396c     0A 1F 02 F6 | 	mov	local01, arg02
23970     0B 21 02 F6 | 	mov	local02, arg03
23974     09 23 02 FB | 	rdlong	local03, arg01
23978     02 00 00 FF 
2397c     14 22 0E F1 | 	add	local03, ##1044 wz
23980                 | '         return _seterror( 5 );
23980     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
23984     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
23988     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
2398c     01 FA 65 A6 |  if_e	neg	result1, #1
23990     4C 00 90 AD |  if_e	jmp	#LR__3882
23994     00 20 0E F2 | 	cmp	local02, #0 wz
23998     24 00 90 AD |  if_e	jmp	#LR__3880
2399c     01 20 0E F2 | 	cmp	local02, #1 wz
239a0     14 22 06 A1 |  if_e	add	local03, #20
239a4     11 25 02 AB |  if_e	rdlong	local04, local03
239a8     14 22 86 A1 |  if_e	sub	local03, #20
239ac     12 1F 02 A1 |  if_e	add	local01, local04
239b0     0C 22 06 51 |  if_ne	add	local03, #12
239b4     11 25 02 5B |  if_ne	rdlong	local04, local03
239b8     0C 22 86 51 |  if_ne	sub	local03, #12
239bc     12 1F 02 51 |  if_ne	add	local01, local04
239c0                 | LR__3880
239c0     0F 15 02 F6 | 	mov	arg02, local01
239c4     11 13 02 F6 | 	mov	arg01, local03
239c8     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
239cc     FD 12 0A F6 | 	mov	arg01, result1 wz
239d0     08 00 90 AD |  if_e	jmp	#LR__3881
239d4                 | '         return _set_dos_error(result);
239d4     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0791
239d8     04 00 90 FD | 	jmp	#LR__3882
239dc                 | LR__3881
239dc                 | '     }
239dc                 | '     return offset;
239dc     0F FB 01 F6 | 	mov	result1, local01
239e0                 | LR__3882
239e0     A7 F0 03 F6 | 	mov	ptra, fp
239e4     B2 00 A0 FD | 	call	#popregs_
239e8                 | _fatfs_cc_v_lseek_ret
239e8     2D 00 64 FD | 	ret
239ec                 | 
239ec                 | _fatfs_cc_v_ioctl
239ec                 | ' {
239ec                 | '     return _seterror( 10 );
239ec     20 E8 05 F1 | 	add	ptr___system__dat__, #32
239f0     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
239f4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
239f8     01 FA 65 F6 | 	neg	result1, #1
239fc                 | _fatfs_cc_v_ioctl_ret
239fc     2D 00 64 FD | 	ret
23a00                 | 
23a00                 | _fatfs_cc_v_mkdir
23a00     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
23a04     FD 12 02 F6 | 	mov	arg01, result1
23a08                 | ' 
23a08                 | '     r = f_mkdir(name);
23a08                 | '     return _set_dos_error(r);
23a08     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0791
23a0c                 | _fatfs_cc_v_mkdir_ret
23a0c     2D 00 64 FD | 	ret
23a10                 | 
23a10                 | _fatfs_cc_v_remove
23a10     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
23a14     FD 12 02 F6 | 	mov	arg01, result1
23a18                 | ' 
23a18                 | '     r = f_unlink(name);
23a18                 | '     return _set_dos_error(r);
23a18     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0791
23a1c                 | _fatfs_cc_v_remove_ret
23a1c     2D 00 64 FD | 	ret
23a20                 | 
23a20                 | _fatfs_cc_v_rmdir
23a20     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
23a24     FD 12 02 F6 | 	mov	arg01, result1
23a28                 | ' 
23a28                 | '     r = f_unlink(name);
23a28                 | '     return _set_dos_error(r);
23a28     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0791
23a2c                 | _fatfs_cc_v_rmdir_ret
23a2c     2D 00 64 FD | 	ret
23a30                 | 
23a30                 | _fatfs_cc_v_rename
23a30     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
23a34     FD 12 02 F6 | 	mov	arg01, result1
23a38                 | '     return _set_dos_error(r);
23a38     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0791
23a3c                 | _fatfs_cc_v_rename_ret
23a3c     2D 00 64 FD | 	ret
23a40                 | 
23a40                 | _fatfs_cc_v_open
23a40     07 4A 05 F6 | 	mov	COUNT_, #7
23a44     A8 00 A0 FD | 	call	#pushregs_
23a48     09 1F 02 F6 | 	mov	local01, arg01
23a4c     0A 21 02 F6 | 	mov	local02, arg02
23a50     0B 23 02 F6 | 	mov	local03, arg03
23a54     03 00 00 FF 
23a58     3C 12 06 F6 | 	mov	arg01, ##1596
23a5c                 | '     return _gc_alloc(size);
23a5c     10 14 06 F6 | 	mov	arg02, #16
23a60     A4 58 BF FD | 	call	#__system___gc_doalloc
23a64     FD 24 0A F6 | 	mov	local04, result1 wz
23a68                 | '       return _seterror( 7 );
23a68     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
23a6c     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
23a70     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
23a74     01 FA 65 A6 |  if_e	neg	result1, #1
23a78     98 00 90 AD |  if_e	jmp	#LR__3896
23a7c     12 13 02 F6 | 	mov	arg01, local04
23a80     00 14 06 F6 | 	mov	arg02, #0
23a84     03 00 00 FF 
23a88     3C 16 06 F6 | 	mov	arg03, ##1596
23a8c     98 00 A0 FD | 	call	#\builtin_bytefill_
23a90                 | '   switch (flags & 3) {
23a90     11 27 02 F6 | 	mov	local05, local03
23a94     03 26 0E F5 | 	and	local05, #3 wz
23a98     0C 00 90 AD |  if_e	jmp	#LR__3890
23a9c     01 26 0E F2 | 	cmp	local05, #1 wz
23aa0     0C 00 90 AD |  if_e	jmp	#LR__3891
23aa4     10 00 90 FD | 	jmp	#LR__3892
23aa8                 | LR__3890
23aa8     01 28 06 F6 | 	mov	local06, #1
23aac                 | '       fs_flags =  0x01 ;
23aac                 | '       break;
23aac     0C 00 90 FD | 	jmp	#LR__3893
23ab0                 | LR__3891
23ab0     02 28 06 F6 | 	mov	local06, #2
23ab4                 | '       fs_flags =  0x02 ;
23ab4                 | '       break;
23ab4     04 00 90 FD | 	jmp	#LR__3893
23ab8                 | LR__3892
23ab8     03 28 06 F6 | 	mov	local06, #3
23abc                 | '       fs_flags =  0x01  |  0x02 ;
23abc                 | '       break;
23abc                 | LR__3893
23abc     08 22 CE F7 | 	test	local03, #8 wz
23ac0     18 28 46 55 |  if_ne	or	local06, #24
23ac4     08 00 90 5D |  if_ne	jmp	#LR__3894
23ac8     20 22 CE F7 | 	test	local03, #32 wz
23acc     30 28 46 55 |  if_ne	or	local06, #48
23ad0                 | LR__3894
23ad0     02 00 00 FF 
23ad4     14 24 06 F1 | 	add	local04, ##1044
23ad8     12 13 02 F6 | 	mov	arg01, local04
23adc     02 00 00 FF 
23ae0     14 24 86 F1 | 	sub	local04, ##1044
23ae4     10 15 02 F6 | 	mov	arg02, local02
23ae8     14 17 02 F6 | 	mov	arg03, local06
23aec     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
23af0     FD 2A 0A F6 | 	mov	local07, result1 wz
23af4     14 00 90 AD |  if_e	jmp	#LR__3895
23af8     12 13 02 F6 | 	mov	arg01, local04
23afc                 | '     return _gc_free(ptr);
23afc     14 59 BF FD | 	call	#__system___gc_free
23b00                 | '     free(f);
23b00                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
23b00                 | '     return _set_dos_error(r);
23b00     15 13 02 F6 | 	mov	arg01, local07
23b04     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0791
23b08     08 00 90 FD | 	jmp	#LR__3896
23b0c                 | LR__3895
23b0c     0F 25 62 FC | 	wrlong	local04, local01
23b10                 | '   }
23b10                 | '   fil->vfsdata = f;
23b10                 | '   return 0;
23b10     00 FA 05 F6 | 	mov	result1, #0
23b14                 | LR__3896
23b14     A7 F0 03 F6 | 	mov	ptra, fp
23b18     B2 00 A0 FD | 	call	#popregs_
23b1c                 | _fatfs_cc_v_open_ret
23b1c     2D 00 64 FD | 	ret
23b20                 | 
23b20                 | _fatfs_cc_v_flush
23b20     09 13 02 FB | 	rdlong	arg01, arg01
23b24     02 00 00 FF 
23b28     14 12 0E F1 | 	add	arg01, ##1044 wz
23b2c                 | '         return _seterror( 5 );
23b2c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
23b30     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
23b34     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
23b38     01 FA 65 A6 |  if_e	neg	result1, #1
23b3c     0C 00 90 AD |  if_e	jmp	#LR__3900
23b40     00 DA BF FD | 	call	#_fatfs_cc_f_sync
23b44     FD 12 02 F6 | 	mov	arg01, result1
23b48                 | '     }
23b48                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
23b48                 | '     result = f_sync(f);
23b48                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
23b48                 | '     return _set_dos_error(result);
23b48     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0791
23b4c                 | LR__3900
23b4c                 | _fatfs_cc_v_flush_ret
23b4c     2D 00 64 FD | 	ret
23b50                 | 
23b50                 | _fatfs_cc_v_init
23b50                 | ' {
23b50                 | '     return 0;
23b50     00 FA 05 F6 | 	mov	result1, #0
23b54                 | _fatfs_cc_v_init_ret
23b54     2D 00 64 FD | 	ret
23b58                 | 
23b58                 | _fatfs_cc_v_deinit
23b58     25 01 00 FF 
23b5c     C8 14 06 F6 | 	mov	arg02, ##@LR__4096
23b60     00 12 06 F6 | 	mov	arg01, #0
23b64     00 16 06 F6 | 	mov	arg03, #0
23b68     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
23b6c     01 00 00 FF 
23b70     08 E4 05 F1 | 	add	objptr, ##520
23b74     F2 12 02 FB | 	rdlong	arg01, objptr
23b78     04 E4 05 F1 | 	add	objptr, #4
23b7c     F2 14 02 FB | 	rdlong	arg02, objptr
23b80     01 00 00 FF 
23b84     0C E4 85 F1 | 	sub	objptr, ##524
23b88     A4 43 BF FD | 	call	#__system___freepins
23b8c                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
23b8c                 | '     _freepins(f_pinmask);
23b8c                 | '     return 0;
23b8c     00 FA 05 F6 | 	mov	result1, #0
23b90                 | _fatfs_cc_v_deinit_ret
23b90     2D 00 64 FD | 	ret
23b94                 | 
23b94                 | _fatfs_cc_get_vfs
23b94     01 4A 05 F6 | 	mov	COUNT_, #1
23b98     A8 00 A0 FD | 	call	#pushregs_
23b9c     09 1F 02 F6 | 	mov	local01, arg01
23ba0     50 12 06 F6 | 	mov	arg01, #80
23ba4     30 57 BF FD | 	call	#__system___gc_alloc_managed
23ba8     FD 12 02 F6 | 	mov	arg01, result1
23bac     F2 FA 01 F6 | 	mov	result1, objptr
23bb0     00 18 03 FF 
23bb4     00 FA 45 F5 | 	or	result1, ##103809024
23bb8     09 FB 61 FC | 	wrlong	result1, arg01
23bbc     F2 FA 01 F6 | 	mov	result1, objptr
23bc0     00 20 03 FF 
23bc4     00 FA 45 F5 | 	or	result1, ##104857600
23bc8     04 12 06 F1 | 	add	arg01, #4
23bcc     09 FB 61 FC | 	wrlong	result1, arg01
23bd0     F2 FA 01 F6 | 	mov	result1, objptr
23bd4     00 28 03 FF 
23bd8     00 FA 45 F5 | 	or	result1, ##105906176
23bdc     04 12 06 F1 | 	add	arg01, #4
23be0     09 FB 61 FC | 	wrlong	result1, arg01
23be4     F2 FA 01 F6 | 	mov	result1, objptr
23be8     00 30 03 FF 
23bec     00 FA 45 F5 | 	or	result1, ##106954752
23bf0     04 12 06 F1 | 	add	arg01, #4
23bf4     09 FB 61 FC | 	wrlong	result1, arg01
23bf8     F2 FA 01 F6 | 	mov	result1, objptr
23bfc     00 38 03 FF 
23c00     00 FA 45 F5 | 	or	result1, ##108003328
23c04     04 12 06 F1 | 	add	arg01, #4
23c08     09 FB 61 FC | 	wrlong	result1, arg01
23c0c     04 12 06 F1 | 	add	arg01, #4
23c10     09 01 68 FC | 	wrlong	#0, arg01
23c14     04 12 06 F1 | 	add	arg01, #4
23c18     09 1F 62 FC | 	wrlong	local01, arg01
23c1c     04 12 06 F1 | 	add	arg01, #4
23c20     09 01 68 FC | 	wrlong	#0, arg01
23c24     F2 FA 01 F6 | 	mov	result1, objptr
23c28     00 40 03 FF 
23c2c     00 FA 45 F5 | 	or	result1, ##109051904
23c30     04 12 06 F1 | 	add	arg01, #4
23c34     09 FB 61 FC | 	wrlong	result1, arg01
23c38     F2 FA 01 F6 | 	mov	result1, objptr
23c3c     00 48 03 FF 
23c40     00 FA 45 F5 | 	or	result1, ##110100480
23c44     04 12 06 F1 | 	add	arg01, #4
23c48     09 FB 61 FC | 	wrlong	result1, arg01
23c4c     F2 FA 01 F6 | 	mov	result1, objptr
23c50     00 50 03 FF 
23c54     00 FA 45 F5 | 	or	result1, ##111149056
23c58     04 12 06 F1 | 	add	arg01, #4
23c5c     09 FB 61 FC | 	wrlong	result1, arg01
23c60     F2 FA 01 F6 | 	mov	result1, objptr
23c64     00 58 03 FF 
23c68     00 FA 45 F5 | 	or	result1, ##112197632
23c6c     04 12 06 F1 | 	add	arg01, #4
23c70     09 FB 61 FC | 	wrlong	result1, arg01
23c74     F2 FA 01 F6 | 	mov	result1, objptr
23c78     00 60 03 FF 
23c7c     00 FA 45 F5 | 	or	result1, ##113246208
23c80     04 12 06 F1 | 	add	arg01, #4
23c84     09 FB 61 FC | 	wrlong	result1, arg01
23c88     F2 FA 01 F6 | 	mov	result1, objptr
23c8c     00 68 03 FF 
23c90     00 FA 45 F5 | 	or	result1, ##114294784
23c94     04 12 06 F1 | 	add	arg01, #4
23c98     09 FB 61 FC | 	wrlong	result1, arg01
23c9c     F2 FA 01 F6 | 	mov	result1, objptr
23ca0     00 70 03 FF 
23ca4     00 FA 45 F5 | 	or	result1, ##115343360
23ca8     04 12 06 F1 | 	add	arg01, #4
23cac     09 FB 61 FC | 	wrlong	result1, arg01
23cb0     F2 FA 01 F6 | 	mov	result1, objptr
23cb4     00 78 03 FF 
23cb8     00 FA 45 F5 | 	or	result1, ##116391936
23cbc     04 12 06 F1 | 	add	arg01, #4
23cc0     09 FB 61 FC | 	wrlong	result1, arg01
23cc4     F2 FA 01 F6 | 	mov	result1, objptr
23cc8     58 FA 25 F4 | 	bith	result1, #88
23ccc     04 12 06 F1 | 	add	arg01, #4
23cd0     09 FB 61 FC | 	wrlong	result1, arg01
23cd4     F2 FA 01 F6 | 	mov	result1, objptr
23cd8     00 88 03 FF 
23cdc     00 FA 45 F5 | 	or	result1, ##118489088
23ce0     04 12 06 F1 | 	add	arg01, #4
23ce4     09 FB 61 FC | 	wrlong	result1, arg01
23ce8     F2 FA 01 F6 | 	mov	result1, objptr
23cec     00 90 03 FF 
23cf0     00 FA 45 F5 | 	or	result1, ##119537664
23cf4     04 12 06 F1 | 	add	arg01, #4
23cf8     09 FB 61 FC | 	wrlong	result1, arg01
23cfc     F2 FA 01 F6 | 	mov	result1, objptr
23d00     00 98 03 FF 
23d04     00 FA 45 F5 | 	or	result1, ##120586240
23d08     04 12 06 F1 | 	add	arg01, #4
23d0c     09 FB 61 FC | 	wrlong	result1, arg01
23d10     4C 12 86 F1 | 	sub	arg01, #76
23d14                 | ' 
23d14                 | '     v->close = &v_close;
23d14                 | '     v->read = &v_read;
23d14                 | '     v->write = &v_write;
23d14                 | '     v->lseek = &v_lseek;
23d14                 | '     v->ioctl = &v_ioctl;
23d14                 | '     v->flush = 0;
23d14                 | '     v->vfs_data = ptr;
23d14                 | '     v->reserved = 0;
23d14                 | ' 
23d14                 | '     v->open = &v_open;
23d14                 | '     v->creat = &v_creat;
23d14                 | '     v->opendir = &v_opendir;
23d14                 | '     v->closedir = &v_closedir;
23d14                 | '     v->readdir = &v_readdir;
23d14                 | '     v->stat = &v_stat;
23d14                 | ' 
23d14                 | '     v->mkdir = &v_mkdir;
23d14                 | '     v->rmdir = &v_rmdir;
23d14                 | ' 
23d14                 | '     v->remove = &v_remove;
23d14                 | '     v->rename = &v_rename;
23d14                 | ' 
23d14                 | '     v->init = &v_init;
23d14                 | '     v->deinit = &v_deinit;
23d14                 | ' 
23d14                 | '     return v;
23d14     09 FB 01 F6 | 	mov	result1, arg01
23d18     A7 F0 03 F6 | 	mov	ptra, fp
23d1c     B2 00 A0 FD | 	call	#popregs_
23d20                 | _fatfs_cc_get_vfs_ret
23d20     2D 00 64 FD | 	ret
23d24                 | 
23d24                 | _fatfs_cc_xmit_mmc_0938
23d24     01 00 00 FF 
23d28     10 E4 05 F1 | 	add	objptr, ##528
23d2c     F2 00 02 FB | 	rdlong	_var01, objptr
23d30     08 E4 05 F1 | 	add	objptr, #8
23d34     F2 02 02 FB | 	rdlong	_var02, objptr
23d38     01 00 00 FF 
23d3c     18 E4 85 F1 | 	sub	objptr, ##536
23d40     40 02 62 FD | 	dirl	_var02
23d44     28 02 64 FD | 	setq	#1
23d48     09 05 02 FB | 	rdlong	_var03, arg01
23d4c     69 04 62 FD | 	rev	_var03
23d50     1B 04 FE F9 | 	movbyts	_var03, #27
23d54     01 05 22 FC | 	wypin	_var03, _var02
23d58     0A 05 02 F6 | 	mov	_var03, arg02
23d5c     02 14 4E F0 | 	shr	arg02, #2 wz
23d60     03 04 66 F0 | 	shl	_var03, #3
23d64     00 05 22 FC | 	wypin	_var03, _var01
23d68     41 02 62 FD | 	dirh	_var02
23d6c     08 12 06 F1 | 	add	arg01, #8
23d70     69 06 62 FD | 	rev	_var04
23d74     1B 06 FE F9 | 	movbyts	_var04, #27
23d78                 | LR__3910
23d78     01 07 22 5C |  if_ne	wypin	_var04, _var02
23d7c     09 07 02 5B |  if_ne	rdlong	_var04, arg01
23d80     04 12 06 51 |  if_ne	add	arg01, #4
23d84     69 06 62 5D |  if_ne	rev	_var04
23d88     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
23d8c                 | LR__3911
23d8c     40 02 72 5D |  if_ne	testp	_var02 wc
23d90     F8 FF 9F 1D |  if_a	jmp	#LR__3911
23d94     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__3910
23d98                 | LR__3912
23d98     40 00 72 FD | 	testp	_var01 wc
23d9c     F8 FF 9F 3D |  if_ae	jmp	#LR__3912
23da0     40 02 62 FD | 	dirl	_var02
23da4     FF FF FF FF 
23da8     01 FF 2B FC | 	wypin	##-1, _var02
23dac     41 02 62 FD | 	dirh	_var02
23db0                 | _fatfs_cc_xmit_mmc_0938_ret
23db0     2D 00 64 FD | 	ret
23db4                 | 
23db4                 | _fatfs_cc_rcvr_mmc_0945
23db4     01 00 00 FF 
23db8     10 E4 05 F1 | 	add	objptr, ##528
23dbc     F2 00 02 FB | 	rdlong	_var01, objptr
23dc0     0C E4 05 F1 | 	add	objptr, #12
23dc4     F2 02 02 FB | 	rdlong	_var02, objptr
23dc8     01 00 00 FF 
23dcc     1C E4 85 F1 | 	sub	objptr, ##540
23dd0     01 03 08 FC | 	akpin	_var02
23dd4     0A 05 0A F6 | 	mov	_var03, arg02 wz
23dd8     02 04 4E F0 | 	shr	_var03, #2 wz
23ddc     30 00 90 AD |  if_e	jmp	#LR__3922
23de0     02 07 02 F6 | 	mov	_var04, _var03
23de4     05 06 66 F0 | 	shl	_var04, #5
23de8     00 07 22 FC | 	wypin	_var04, _var01
23dec     01 7F 18 FC | 	wxpin	#63, _var02
23df0                 | LR__3920
23df0                 | LR__3921
23df0     40 02 72 FD | 	testp	_var02 wc
23df4     F8 FF 9F 3D |  if_ae	jmp	#LR__3921
23df8     01 07 8A FA | 	rdpin	_var04, _var02
23dfc     69 06 62 FD | 	rev	_var04
23e00     1B 06 FE F9 | 	movbyts	_var04, #27
23e04     09 07 62 FC | 	wrlong	_var04, arg01
23e08     04 12 06 F1 | 	add	arg01, #4
23e0c     F8 05 6E FB | 	djnz	_var03, #LR__3920
23e10                 | LR__3922
23e10     03 14 0E F5 | 	and	arg02, #3 wz
23e14     24 00 90 AD |  if_e	jmp	#LR__3925
23e18     01 4F 18 FC | 	wxpin	#39, _var02
23e1c                 | LR__3923
23e1c     00 11 28 FC | 	wypin	#8, _var01
23e20                 | LR__3924
23e20     40 02 72 FD | 	testp	_var02 wc
23e24     F8 FF 9F 3D |  if_ae	jmp	#LR__3924
23e28     01 07 8A FA | 	rdpin	_var04, _var02
23e2c     69 06 62 FD | 	rev	_var04
23e30     09 07 42 FC | 	wrbyte	_var04, arg01
23e34     01 12 06 F1 | 	add	arg01, #1
23e38     F8 15 6E FB | 	djnz	arg02, #LR__3923
23e3c                 | LR__3925
23e3c                 | _fatfs_cc_rcvr_mmc_0945_ret
23e3c     2D 00 64 FD | 	ret
23e40                 | 
23e40                 | _fatfs_cc_wait_ready_0949
23e40     01 4A 05 F6 | 	mov	COUNT_, #1
23e44     A8 00 A0 FD | 	call	#pushregs_
23e48     10 F0 07 F1 | 	add	ptra, #16
23e4c     1A FA 61 FD | 	getct	result1
23e50     08 4E 05 F1 | 	add	fp, #8
23e54     A7 FA 61 FC | 	wrlong	result1, fp
23e58     14 1E 06 FB | 	rdlong	local01, #20
23e5c     01 1E 46 F0 | 	shr	local01, #1
23e60     04 4E 05 F1 | 	add	fp, #4
23e64     A7 1E 62 FC | 	wrlong	local01, fp
23e68     0C 4E 85 F1 | 	sub	fp, #12
23e6c                 | ' {
23e6c                 | ' 	BYTE d;
23e6c                 | ' 	UINT tmr, tmout;
23e6c                 | ' 
23e6c                 | ' 	tmr = _cnt();
23e6c                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
23e6c                 | ' 	for(;;) {
23e6c                 | LR__3930
23e6c     04 4E 05 F1 | 	add	fp, #4
23e70     A7 12 02 F6 | 	mov	arg01, fp
23e74     04 4E 85 F1 | 	sub	fp, #4
23e78     01 14 06 F6 | 	mov	arg02, #1
23e7c     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_0945
23e80     04 4E 05 F1 | 	add	fp, #4
23e84     A7 1E C2 FA | 	rdbyte	local01, fp
23e88     04 4E 85 F1 | 	sub	fp, #4
23e8c     FF 1E 0E F2 | 	cmp	local01, #255 wz
23e90     01 FA 05 A6 |  if_e	mov	result1, #1
23e94     28 00 90 AD |  if_e	jmp	#LR__3931
23e98     1A FA 61 FD | 	getct	result1
23e9c     08 4E 05 F1 | 	add	fp, #8
23ea0     A7 1E 02 FB | 	rdlong	local01, fp
23ea4     0F FB 81 F1 | 	sub	result1, local01
23ea8     04 4E 05 F1 | 	add	fp, #4
23eac     A7 1E 02 FB | 	rdlong	local01, fp
23eb0     0C 4E 85 F1 | 	sub	fp, #12
23eb4     0F FB 11 F2 | 	cmp	result1, local01 wc
23eb8     00 FA 05 36 |  if_ae	mov	result1, #0
23ebc     AC FF 9F CD |  if_b	jmp	#LR__3930
23ec0                 | LR__3931
23ec0     A7 F0 03 F6 | 	mov	ptra, fp
23ec4     B2 00 A0 FD | 	call	#popregs_
23ec8                 | _fatfs_cc_wait_ready_0949_ret
23ec8     2D 00 64 FD | 	ret
23ecc                 | 
23ecc                 | _fatfs_cc_deselect_0955
23ecc     00 4A 05 F6 | 	mov	COUNT_, #0
23ed0     A8 00 A0 FD | 	call	#pushregs_
23ed4     14 F0 07 F1 | 	add	ptra, #20
23ed8     01 00 00 FF 
23edc     14 E4 05 F1 | 	add	objptr, ##532
23ee0     F2 14 02 FB | 	rdlong	arg02, objptr
23ee4     04 4E 05 F1 | 	add	fp, #4
23ee8     A7 14 62 FC | 	wrlong	arg02, fp
23eec     04 E4 85 F1 | 	sub	objptr, #4
23ef0     F2 14 02 FB | 	rdlong	arg02, objptr
23ef4     04 4E 05 F1 | 	add	fp, #4
23ef8     A7 14 62 FC | 	wrlong	arg02, fp
23efc     08 E4 05 F1 | 	add	objptr, #8
23f00     F2 14 02 FB | 	rdlong	arg02, objptr
23f04     04 4E 05 F1 | 	add	fp, #4
23f08     A7 14 62 FC | 	wrlong	arg02, fp
23f0c     04 E4 05 F1 | 	add	objptr, #4
23f10     F2 14 02 FB | 	rdlong	arg02, objptr
23f14     01 00 00 FF 
23f18     1C E4 85 F1 | 	sub	objptr, ##540
23f1c     04 4E 05 F1 | 	add	fp, #4
23f20     A7 14 62 FC | 	wrlong	arg02, fp
23f24     0C 4E 85 F1 | 	sub	fp, #12
23f28     A7 12 02 FB | 	rdlong	arg01, fp
23f2c     04 4E 85 F1 | 	sub	fp, #4
23f30     59 12 62 FD | 	drvh	arg01
23f34     1F 20 64 FD | 	waitx	#16
23f38     A7 12 02 F6 | 	mov	arg01, fp
23f3c     01 14 06 F6 | 	mov	arg02, #1
23f40     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_0945
23f44     A7 F0 03 F6 | 	mov	ptra, fp
23f48     B2 00 A0 FD | 	call	#popregs_
23f4c                 | _fatfs_cc_deselect_0955_ret
23f4c     2D 00 64 FD | 	ret
23f50                 | 
23f50                 | _fatfs_cc_select_0959
23f50     00 4A 05 F6 | 	mov	COUNT_, #0
23f54     A8 00 A0 FD | 	call	#pushregs_
23f58     10 F0 07 F1 | 	add	ptra, #16
23f5c     01 00 00 FF 
23f60     14 E4 05 F1 | 	add	objptr, ##532
23f64     F2 14 02 FB | 	rdlong	arg02, objptr
23f68     08 4E 05 F1 | 	add	fp, #8
23f6c     A7 14 62 FC | 	wrlong	arg02, fp
23f70     08 E4 05 F1 | 	add	objptr, #8
23f74     F2 12 02 FB | 	rdlong	arg01, objptr
23f78     01 00 00 FF 
23f7c     1C E4 85 F1 | 	sub	objptr, ##540
23f80     04 4E 05 F1 | 	add	fp, #4
23f84     A7 12 62 FC | 	wrlong	arg01, fp
23f88     50 12 62 FD | 	fltl	arg01
23f8c     04 4E 85 F1 | 	sub	fp, #4
23f90     A7 12 02 FB | 	rdlong	arg01, fp
23f94     58 12 62 FD | 	drvl	arg01
23f98     1F 20 64 FD | 	waitx	#16
23f9c     04 4E 05 F1 | 	add	fp, #4
23fa0     A7 12 02 FB | 	rdlong	arg01, fp
23fa4     41 12 62 FD | 	dirh	arg01
23fa8     08 4E 85 F1 | 	sub	fp, #8
23fac     A7 12 02 F6 | 	mov	arg01, fp
23fb0     04 4E 85 F1 | 	sub	fp, #4
23fb4     01 14 06 F6 | 	mov	arg02, #1
23fb8     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0945
23fbc     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_0949
23fc0     00 FA 0D F2 | 	cmp	result1, #0 wz
23fc4     01 FA 05 56 |  if_ne	mov	result1, #1
23fc8     08 00 90 5D |  if_ne	jmp	#LR__3940
23fcc     FC FE BF FD | 	call	#_fatfs_cc_deselect_0955
23fd0                 | ' 
23fd0                 | ' 	deselect();
23fd0                 | ' 	return 0;
23fd0     00 FA 05 F6 | 	mov	result1, #0
23fd4                 | LR__3940
23fd4     A7 F0 03 F6 | 	mov	ptra, fp
23fd8     B2 00 A0 FD | 	call	#popregs_
23fdc                 | _fatfs_cc_select_0959_ret
23fdc     2D 00 64 FD | 	ret
23fe0                 | 
23fe0                 | _fatfs_cc_rcvr_datablock_0963
23fe0     01 4A 05 F6 | 	mov	COUNT_, #1
23fe4     A8 00 A0 FD | 	call	#pushregs_
23fe8     18 F0 07 F1 | 	add	ptra, #24
23fec     04 4E 05 F1 | 	add	fp, #4
23ff0     A7 12 62 FC | 	wrlong	arg01, fp
23ff4     04 4E 05 F1 | 	add	fp, #4
23ff8     A7 14 62 FC | 	wrlong	arg02, fp
23ffc     1A FA 61 FD | 	getct	result1
24000     08 4E 05 F1 | 	add	fp, #8
24004     A7 FA 61 FC | 	wrlong	result1, fp
24008     14 1E 06 FB | 	rdlong	local01, #20
2400c     03 1E 46 F0 | 	shr	local01, #3
24010     04 4E 05 F1 | 	add	fp, #4
24014     A7 1E 62 FC | 	wrlong	local01, fp
24018     14 4E 85 F1 | 	sub	fp, #20
2401c                 | ' 	BYTE *buff,
2401c                 | ' 	UINT btr
2401c                 | ' )
2401c                 | ' {
2401c                 | ' 	BYTE d[2];
2401c                 | ' 	UINT tmr, tmout;
2401c                 | ' 
2401c                 | ' 	tmr = _cnt();
2401c                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2401c                 | ' 	for(;;) {
2401c                 | LR__3950
2401c     0C 4E 05 F1 | 	add	fp, #12
24020     A7 12 02 F6 | 	mov	arg01, fp
24024     0C 4E 85 F1 | 	sub	fp, #12
24028     01 14 06 F6 | 	mov	arg02, #1
2402c     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0945
24030     0C 4E 05 F1 | 	add	fp, #12
24034     A7 1E C2 FA | 	rdbyte	local01, fp
24038     0C 4E 85 F1 | 	sub	fp, #12
2403c     FF 1E 0E F2 | 	cmp	local01, #255 wz
24040     28 00 90 5D |  if_ne	jmp	#LR__3951
24044     1A FA 61 FD | 	getct	result1
24048     FD 1E 02 F6 | 	mov	local01, result1
2404c     10 4E 05 F1 | 	add	fp, #16
24050     A7 14 02 FB | 	rdlong	arg02, fp
24054     0A 1F 82 F1 | 	sub	local01, arg02
24058     04 4E 05 F1 | 	add	fp, #4
2405c     A7 14 02 FB | 	rdlong	arg02, fp
24060     14 4E 85 F1 | 	sub	fp, #20
24064     0A 1F 12 F2 | 	cmp	local01, arg02 wc
24068     B0 FF 9F CD |  if_b	jmp	#LR__3950
2406c                 | LR__3951
2406c     0C 4E 05 F1 | 	add	fp, #12
24070     A7 1E C2 FA | 	rdbyte	local01, fp
24074     0C 4E 85 F1 | 	sub	fp, #12
24078     FE 1E 0E F2 | 	cmp	local01, #254 wz
2407c     00 FA 05 56 |  if_ne	mov	result1, #0
24080     30 00 90 5D |  if_ne	jmp	#LR__3952
24084     04 4E 05 F1 | 	add	fp, #4
24088     A7 12 02 FB | 	rdlong	arg01, fp
2408c     04 4E 05 F1 | 	add	fp, #4
24090     A7 14 02 FB | 	rdlong	arg02, fp
24094     08 4E 85 F1 | 	sub	fp, #8
24098     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0945
2409c     0C 4E 05 F1 | 	add	fp, #12
240a0     A7 12 02 F6 | 	mov	arg01, fp
240a4     0C 4E 85 F1 | 	sub	fp, #12
240a8     02 14 06 F6 | 	mov	arg02, #2
240ac     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0945
240b0                 | ' 
240b0                 | ' 	rcvr_mmc(buff, btr);
240b0                 | ' 	rcvr_mmc(d, 2);
240b0                 | ' 
240b0                 | ' 	return 1;
240b0     01 FA 05 F6 | 	mov	result1, #1
240b4                 | LR__3952
240b4     A7 F0 03 F6 | 	mov	ptra, fp
240b8     B2 00 A0 FD | 	call	#popregs_
240bc                 | _fatfs_cc_rcvr_datablock_0963_ret
240bc     2D 00 64 FD | 	ret
240c0                 | 
240c0                 | _fatfs_cc_xmit_datablock_0965
240c0     00 4A 05 F6 | 	mov	COUNT_, #0
240c4     A8 00 A0 FD | 	call	#pushregs_
240c8     10 F0 07 F1 | 	add	ptra, #16
240cc     04 4E 05 F1 | 	add	fp, #4
240d0     A7 12 62 FC | 	wrlong	arg01, fp
240d4     04 4E 05 F1 | 	add	fp, #4
240d8     A7 14 42 FC | 	wrbyte	arg02, fp
240dc     08 4E 85 F1 | 	sub	fp, #8
240e0     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_0949
240e4     00 FA 0D F2 | 	cmp	result1, #0 wz
240e8     00 FA 05 A6 |  if_e	mov	result1, #0
240ec     90 00 90 AD |  if_e	jmp	#LR__3961
240f0     08 4E 05 F1 | 	add	fp, #8
240f4     A7 14 C2 FA | 	rdbyte	arg02, fp
240f8     04 4E 05 F1 | 	add	fp, #4
240fc     A7 14 42 FC | 	wrbyte	arg02, fp
24100     A7 12 02 F6 | 	mov	arg01, fp
24104     0C 4E 85 F1 | 	sub	fp, #12
24108     01 14 06 F6 | 	mov	arg02, #1
2410c     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_0938
24110     08 4E 05 F1 | 	add	fp, #8
24114     A7 14 C2 FA | 	rdbyte	arg02, fp
24118     08 4E 85 F1 | 	sub	fp, #8
2411c     FD 14 0E F2 | 	cmp	arg02, #253 wz
24120     58 00 90 AD |  if_e	jmp	#LR__3960
24124     04 4E 05 F1 | 	add	fp, #4
24128     A7 12 02 FB | 	rdlong	arg01, fp
2412c     04 4E 85 F1 | 	sub	fp, #4
24130     09 14 C6 F9 | 	decod	arg02, #9
24134     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_0938
24138     0C 4E 05 F1 | 	add	fp, #12
2413c     A7 12 02 F6 | 	mov	arg01, fp
24140     0C 4E 85 F1 | 	sub	fp, #12
24144     02 14 06 F6 | 	mov	arg02, #2
24148     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0945
2414c     0C 4E 05 F1 | 	add	fp, #12
24150     A7 12 02 F6 | 	mov	arg01, fp
24154     0C 4E 85 F1 | 	sub	fp, #12
24158     01 14 06 F6 | 	mov	arg02, #1
2415c     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0945
24160     0C 4E 05 F1 | 	add	fp, #12
24164     A7 14 C2 FA | 	rdbyte	arg02, fp
24168     0C 4E 85 F1 | 	sub	fp, #12
2416c     1F 14 06 F5 | 	and	arg02, #31
24170     05 14 0E F2 | 	cmp	arg02, #5 wz
24174                 | ' 			return 0;
24174     00 FA 05 56 |  if_ne	mov	result1, #0
24178     04 00 90 5D |  if_ne	jmp	#LR__3961
2417c                 | LR__3960
2417c                 | ' 	}
2417c                 | ' 
2417c                 | ' 	return 1;
2417c     01 FA 05 F6 | 	mov	result1, #1
24180                 | LR__3961
24180     A7 F0 03 F6 | 	mov	ptra, fp
24184     B2 00 A0 FD | 	call	#popregs_
24188                 | _fatfs_cc_xmit_datablock_0965_ret
24188     2D 00 64 FD | 	ret
2418c                 | 
2418c                 | _fatfs_cc_send_cmd_0969
2418c     01 4A 05 F6 | 	mov	COUNT_, #1
24190     A8 00 A0 FD | 	call	#pushregs_
24194     1C F0 07 F1 | 	add	ptra, #28
24198                 | _fatfs_cc_send_cmd_0969_enter
24198     04 4E 05 F1 | 	add	fp, #4
2419c     A7 12 42 FC | 	wrbyte	arg01, fp
241a0     04 4E 05 F1 | 	add	fp, #4
241a4     A7 14 62 FC | 	wrlong	arg02, fp
241a8     04 4E 85 F1 | 	sub	fp, #4
241ac     A7 FA C1 FA | 	rdbyte	result1, fp
241b0     04 4E 85 F1 | 	sub	fp, #4
241b4     80 FA CD F7 | 	test	result1, #128 wz
241b8     44 00 90 AD |  if_e	jmp	#LR__3970
241bc     04 4E 05 F1 | 	add	fp, #4
241c0     A7 14 C2 FA | 	rdbyte	arg02, fp
241c4     7F 14 06 F5 | 	and	arg02, #127
241c8     A7 14 42 FC | 	wrbyte	arg02, fp
241cc     04 4E 85 F1 | 	sub	fp, #4
241d0     37 12 06 F6 | 	mov	arg01, #55
241d4     00 14 06 F6 | 	mov	arg02, #0
241d8     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_0969
241dc     0C 4E 05 F1 | 	add	fp, #12
241e0     A7 FA 41 FC | 	wrbyte	result1, fp
241e4     A7 14 C2 FA | 	rdbyte	arg02, fp
241e8     0C 4E 85 F1 | 	sub	fp, #12
241ec     02 14 16 F2 | 	cmp	arg02, #2 wc
241f0     0C 4E 05 31 |  if_ae	add	fp, #12
241f4     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
241f8     0C 4E 85 31 |  if_ae	sub	fp, #12
241fc     6C 01 90 3D |  if_ae	jmp	#LR__3974
24200                 | LR__3970
24200     04 4E 05 F1 | 	add	fp, #4
24204     A7 14 C2 FA | 	rdbyte	arg02, fp
24208     04 4E 85 F1 | 	sub	fp, #4
2420c     0C 14 0E F2 | 	cmp	arg02, #12 wz
24210     14 00 90 AD |  if_e	jmp	#LR__3971
24214     B4 FC BF FD | 	call	#_fatfs_cc_deselect_0955
24218     34 FD BF FD | 	call	#_fatfs_cc_select_0959
2421c     00 FA 0D F2 | 	cmp	result1, #0 wz
24220     FF FA 05 A6 |  if_e	mov	result1, #255
24224     44 01 90 AD |  if_e	jmp	#LR__3974
24228                 | LR__3971
24228     04 4E 05 F1 | 	add	fp, #4
2422c     A7 14 C2 FA | 	rdbyte	arg02, fp
24230     40 FA 05 F6 | 	mov	result1, #64
24234     0A FB 41 F5 | 	or	result1, arg02
24238     10 4E 05 F1 | 	add	fp, #16
2423c     A7 FA 41 FC | 	wrbyte	result1, fp
24240     0C 4E 85 F1 | 	sub	fp, #12
24244     A7 FA 01 FB | 	rdlong	result1, fp
24248     18 FA 45 F0 | 	shr	result1, #24
2424c     0D 4E 05 F1 | 	add	fp, #13
24250     A7 FA 41 FC | 	wrbyte	result1, fp
24254     0D 4E 85 F1 | 	sub	fp, #13
24258     A7 FA 01 FB | 	rdlong	result1, fp
2425c     10 FA 45 F0 | 	shr	result1, #16
24260     0E 4E 05 F1 | 	add	fp, #14
24264     A7 FA 41 FC | 	wrbyte	result1, fp
24268     0E 4E 85 F1 | 	sub	fp, #14
2426c     A7 FA 01 FB | 	rdlong	result1, fp
24270     08 FA 45 F0 | 	shr	result1, #8
24274     0F 4E 05 F1 | 	add	fp, #15
24278     A7 FA 41 FC | 	wrbyte	result1, fp
2427c     0F 4E 85 F1 | 	sub	fp, #15
24280     A7 FA 01 FB | 	rdlong	result1, fp
24284     10 4E 05 F1 | 	add	fp, #16
24288     A7 FA 41 FC | 	wrbyte	result1, fp
2428c     0C 4E 85 F1 | 	sub	fp, #12
24290     A7 02 48 FC | 	wrbyte	#1, fp
24294     08 4E 85 F1 | 	sub	fp, #8
24298     A7 FA C9 FA | 	rdbyte	result1, fp wz
2429c     04 4E 85 F1 | 	sub	fp, #4
242a0     0C 4E 05 A1 |  if_e	add	fp, #12
242a4     A7 2A 49 AC |  if_e	wrbyte	#149, fp
242a8     0C 4E 85 A1 |  if_e	sub	fp, #12
242ac     04 4E 05 F1 | 	add	fp, #4
242b0     A7 FA C1 FA | 	rdbyte	result1, fp
242b4     04 4E 85 F1 | 	sub	fp, #4
242b8     08 FA 0D F2 | 	cmp	result1, #8 wz
242bc     0C 4E 05 A1 |  if_e	add	fp, #12
242c0     A7 0E 49 AC |  if_e	wrbyte	#135, fp
242c4     0C 4E 85 A1 |  if_e	sub	fp, #12
242c8     0C 4E 05 F1 | 	add	fp, #12
242cc     A7 14 C2 FA | 	rdbyte	arg02, fp
242d0     0D 4E 05 F1 | 	add	fp, #13
242d4     A7 14 42 FC | 	wrbyte	arg02, fp
242d8     05 4E 85 F1 | 	sub	fp, #5
242dc     A7 12 02 F6 | 	mov	arg01, fp
242e0     14 4E 85 F1 | 	sub	fp, #20
242e4     06 14 06 F6 | 	mov	arg02, #6
242e8     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_0938
242ec     04 4E 05 F1 | 	add	fp, #4
242f0     A7 1E C2 FA | 	rdbyte	local01, fp
242f4     04 4E 85 F1 | 	sub	fp, #4
242f8     0C 1E 0E F2 | 	cmp	local01, #12 wz
242fc     10 4E 05 A1 |  if_e	add	fp, #16
24300     A7 12 02 A6 |  if_e	mov	arg01, fp
24304     10 4E 85 A1 |  if_e	sub	fp, #16
24308     01 14 06 A6 |  if_e	mov	arg02, #1
2430c     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_0945
24310     0C 4E 05 F1 | 	add	fp, #12
24314     A7 14 48 FC | 	wrbyte	#10, fp
24318     0C 4E 85 F1 | 	sub	fp, #12
2431c                 | ' 	n = 10;
2431c                 | ' 	do
2431c                 | LR__3972
2431c     10 4E 05 F1 | 	add	fp, #16
24320     A7 12 02 F6 | 	mov	arg01, fp
24324     10 4E 85 F1 | 	sub	fp, #16
24328     01 14 06 F6 | 	mov	arg02, #1
2432c     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_0945
24330     10 4E 05 F1 | 	add	fp, #16
24334     A7 1E C2 FA | 	rdbyte	local01, fp
24338     10 4E 85 F1 | 	sub	fp, #16
2433c     80 1E CE F7 | 	test	local01, #128 wz
24340     1C 00 90 AD |  if_e	jmp	#LR__3973
24344     0C 4E 05 F1 | 	add	fp, #12
24348     A7 1E C2 FA | 	rdbyte	local01, fp
2434c     01 1E 86 F1 | 	sub	local01, #1
24350     A7 1E 42 FC | 	wrbyte	local01, fp
24354     A7 1E CA FA | 	rdbyte	local01, fp wz
24358     0C 4E 85 F1 | 	sub	fp, #12
2435c     BC FF 9F 5D |  if_ne	jmp	#LR__3972
24360                 | LR__3973
24360                 | ' 
24360                 | ' 	return d;
24360     10 4E 05 F1 | 	add	fp, #16
24364     A7 FA C1 FA | 	rdbyte	result1, fp
24368     10 4E 85 F1 | 	sub	fp, #16
2436c                 | LR__3974
2436c     A7 F0 03 F6 | 	mov	ptra, fp
24370     B2 00 A0 FD | 	call	#popregs_
24374                 | _fatfs_cc_send_cmd_0969_ret
24374     2D 00 64 FD | 	ret
24378                 | 
24378                 | _fatfs_cc_disk_deinitialize
24378     03 4A 05 F6 | 	mov	COUNT_, #3
2437c     A8 00 A0 FD | 	call	#pushregs_
24380     00 12 4E F2 | 	cmps	arg01, #0 wz
24384     01 00 00 FF 
24388     14 E4 05 F1 | 	add	objptr, ##532
2438c     F2 12 02 FB | 	rdlong	arg01, objptr
24390     04 E4 85 F1 | 	sub	objptr, #4
24394     F2 1E 02 FB | 	rdlong	local01, objptr
24398     08 E4 05 F1 | 	add	objptr, #8
2439c     F2 20 02 FB | 	rdlong	local02, objptr
243a0     04 E4 05 F1 | 	add	objptr, #4
243a4     F2 22 02 FB | 	rdlong	local03, objptr
243a8     01 00 00 FF 
243ac     1C E4 85 F1 | 	sub	objptr, ##540
243b0                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
243b0                 | '         return RES_NOTRDY;
243b0     03 FA 05 56 |  if_ne	mov	result1, #3
243b4     2C 00 90 5D |  if_ne	jmp	#LR__3980
243b8     50 12 62 FD | 	fltl	arg01
243bc     09 01 08 FC | 	wrpin	#0, arg01
243c0     50 1E 62 FD | 	fltl	local01
243c4     0F 01 08 FC | 	wrpin	#0, local01
243c8     50 20 62 FD | 	fltl	local02
243cc     10 01 08 FC | 	wrpin	#0, local02
243d0     50 22 62 FD | 	fltl	local03
243d4     11 01 08 FC | 	wrpin	#0, local03
243d8     0A 12 06 F6 | 	mov	arg01, #10
243dc     84 17 BF FD | 	call	#__system___waitms
243e0                 | '     }
243e0                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
243e0                 | '     _pinclear(PIN_SS);
243e0                 | '     _pinclear(PIN_CLK);
243e0                 | '     _pinclear(PIN_DI);
243e0                 | '     _pinclear(PIN_DO);
243e0                 | ' 
243e0                 | '     _waitms(10);
243e0                 | ' 
243e0                 | '     return 0;
243e0     00 FA 05 F6 | 	mov	result1, #0
243e4                 | LR__3980
243e4     A7 F0 03 F6 | 	mov	ptra, fp
243e8     B2 00 A0 FD | 	call	#popregs_
243ec                 | _fatfs_cc_disk_deinitialize_ret
243ec     2D 00 64 FD | 	ret
243f0                 | 
243f0                 | _fatfs_cc_gettimeofday
243f0     04 4A 05 F6 | 	mov	COUNT_, #4
243f4     A8 00 A0 FD | 	call	#pushregs_
243f8     09 1F 02 F6 | 	mov	local01, arg01
243fc     40 13 BF FD | 	call	#__system___getus
24400     FD 12 02 F6 | 	mov	arg01, result1
24404     02 00 00 FF 
24408     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
2440c     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
24410     09 FB 01 F6 | 	mov	result1, arg01
24414     10 FB 81 F1 | 	sub	result1, local02
24418     A1 07 00 FF 
2441c     40 FA 15 FD | 	qdiv	result1, ##1000000
24420     02 00 00 FF 
24424     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
24428     18 20 62 FD | 	getqx	local02
2442c     A1 07 00 FF 
24430     40 FA 15 FD | 	qdiv	result1, ##1000000
24434     00 20 0E F2 | 	cmp	local02, #0 wz
24438     19 22 62 FD | 	getqy	local03
2443c     28 00 90 AD |  if_e	jmp	#LR__3990
24440     02 00 00 FF 
24444     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
24448     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2444c     10 25 02 F1 | 	add	local04, local02
24450     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
24454     11 13 82 F1 | 	sub	arg01, local03
24458     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
2445c     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
24460     02 00 00 FF 
24464     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
24468                 | LR__3990
24468     02 00 00 FF 
2446c     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
24470     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
24474     02 00 00 FF 
24478     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
2447c     0F 25 62 FC | 	wrlong	local04, local01
24480     04 1E 06 F1 | 	add	local01, #4
24484     0F 23 62 FC | 	wrlong	local03, local01
24488                 | '         lastsec += secs;
24488                 | '         lastus = now - leftover;
24488                 | '     }
24488                 | '     tv->tv_sec = lastsec;
24488                 | '     tv->tv_usec = leftover;
24488                 | '     return 0;
24488     00 FA 05 F6 | 	mov	result1, #0
2448c     A7 F0 03 F6 | 	mov	ptra, fp
24490     B2 00 A0 FD | 	call	#popregs_
24494                 | _fatfs_cc_gettimeofday_ret
24494     2D 00 64 FD | 	ret
24498                 | 
24498                 | _fatfs_cc__is_leap_year
24498     09 FB 51 F6 | 	abs	result1, arg01 wc
2449c     03 FA 05 F5 | 	and	result1, #3
244a0     FD FA 89 F6 | 	negc	result1, result1 wz
244a4     38 00 90 5D |  if_ne	jmp	#LR__4001
244a8     09 FB 51 F6 | 	abs	result1, arg01 wc
244ac     64 FA 15 FD | 	qdiv	result1, #100
244b0     19 FA 61 FD | 	getqy	result1
244b4     FD FA 89 F6 | 	negc	result1, result1 wz
244b8     1C 00 90 5D |  if_ne	jmp	#LR__4000
244bc     09 FB 51 F6 | 	abs	result1, arg01 wc
244c0     90 FB 15 FD | 	qdiv	result1, #400
244c4                 | '       return (0 == y % 400);
244c4     00 FA 05 F6 | 	mov	result1, #0
244c8     19 00 62 FD | 	getqy	_var01
244cc     00 01 8A F6 | 	negc	_var01, _var01 wz
244d0     01 FA 05 A6 |  if_e	mov	result1, #1
244d4     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
244d8                 | LR__4000
244d8                 | '     return 1;
244d8     01 FA 05 F6 | 	mov	result1, #1
244dc     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
244e0                 | LR__4001
244e0                 | '   }
244e0                 | '   return 0;
244e0     00 FA 05 F6 | 	mov	result1, #0
244e4                 | _fatfs_cc__is_leap_year_ret
244e4     2D 00 64 FD | 	ret
244e8                 | 
244e8                 | _fatfs_cc___tzoffset
244e8     09 01 0A F6 | 	mov	_var01, arg01 wz
244ec     FF FF FF FF 
244f0     0A FF 6B FC | 	wrlong	##-1, arg02
244f4     01 02 06 F6 | 	mov	_var02, #1
244f8     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
244fc                 | '                 return 0;
244fc     00 FA 05 A6 |  if_e	mov	result1, #0
24500     94 02 90 AD |  if_e	jmp	#LR__4027
24504     0A 01 68 FC | 	wrlong	#0, arg02
24508     02 00 00 FF 
2450c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
24510     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
24514                 | ' 
24514                 | '        *hasdst = 0;
24514                 | ' 
24514                 | ' 	n = stdname;
24514                 | '         while (*s && isalpha(*s)) {
24514     02 00 00 FF 
24518     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2451c     97 28 48 FB | 	callpa	#(@LR__4011-@LR__4010)>>2,fcache_load_ptr_
24520                 | LR__4010
24520     00 05 CA FA | 	rdbyte	_var03, _var01 wz
24524     48 00 90 AD |  if_e	jmp	#LR__4012
24528     00 13 C2 FA | 	rdbyte	arg01, _var01
2452c                 | ' {
2452c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2452c     80 12 36 F3 | 	fle	arg01, #128 wc
24530                 | '     return __ctype[c];
24530     02 00 00 FF 
24534     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
24538     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2453c     09 FB C1 FA | 	rdbyte	result1, arg01
24540     02 00 00 FF 
24544     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
24548     0C FA CD F7 | 	test	result1, #12 wz
2454c     20 00 90 AD |  if_e	jmp	#LR__4012
24550     00 09 02 F6 | 	mov	_var05, _var01
24554     00 0B 02 F6 | 	mov	_var06, _var01
24558     01 0A 06 F1 | 	add	_var06, #1
2455c     04 0D C2 FA | 	rdbyte	_var07, _var05
24560     05 01 02 F6 | 	mov	_var01, _var06
24564     03 0D 42 FC | 	wrbyte	_var07, _var04
24568     01 06 06 F1 | 	add	_var04, #1
2456c     B0 FF 9F FD | 	jmp	#LR__4010
24570                 | LR__4011
24570                 | LR__4012
24570     03 01 48 FC | 	wrbyte	#0, _var04
24574     00 0E 06 F6 | 	mov	_var08, #0
24578     00 05 C2 FA | 	rdbyte	_var03, _var01
2457c     2D 04 0E F2 | 	cmp	_var03, #45 wz
24580     01 02 66 A6 |  if_e	neg	_var02, #1
24584     01 00 06 A1 |  if_e	add	_var01, #1
24588     97 28 48 FB | 	callpa	#(@LR__4014-@LR__4013)>>2,fcache_load_ptr_
2458c                 | '                 sgn = -1;
2458c                 | '                 s++;
2458c                 | '         }
2458c                 | '         while (isdigit(*s)) {
2458c                 | LR__4013
2458c     00 13 C2 FA | 	rdbyte	arg01, _var01
24590                 | ' {
24590                 | '   return  (__ctype_get(c) & 0x02 ) ;
24590     80 12 36 F3 | 	fle	arg01, #128 wc
24594                 | '     return __ctype[c];
24594     02 00 00 FF 
24598     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2459c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
245a0     09 FB C1 FA | 	rdbyte	result1, arg01
245a4     02 00 00 FF 
245a8     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
245ac     02 FA CD F7 | 	test	result1, #2 wz
245b0     28 00 90 AD |  if_e	jmp	#LR__4015
245b4     07 05 02 F6 | 	mov	_var03, _var08
245b8     02 04 66 F0 | 	shl	_var03, #2
245bc     07 05 02 F1 | 	add	_var03, _var08
245c0     01 04 66 F0 | 	shl	_var03, #1
245c4     00 09 C2 FA | 	rdbyte	_var05, _var01
245c8     30 08 86 F1 | 	sub	_var05, #48
245cc     04 05 02 F1 | 	add	_var03, _var05
245d0     02 0F 02 F6 | 	mov	_var08, _var03
245d4     01 00 06 F1 | 	add	_var01, #1
245d8     B0 FF 9F FD | 	jmp	#LR__4013
245dc                 | LR__4014
245dc                 | LR__4015
245dc     07 00 00 FF 
245e0     10 0E 06 FD | 	qmul	_var08, ##3600
245e4     00 05 C2 FA | 	rdbyte	_var03, _var01
245e8     3A 04 0E F2 | 	cmp	_var03, #58 wz
245ec     18 10 62 FD | 	getqx	_var09
245f0     70 00 90 5D |  if_ne	jmp	#LR__4019
245f4     00 0E 06 F6 | 	mov	_var08, #0
245f8     01 00 06 F1 | 	add	_var01, #1
245fc     97 28 48 FB | 	callpa	#(@LR__4017-@LR__4016)>>2,fcache_load_ptr_
24600                 | '                 x = 0;
24600                 | '                 s++;
24600                 | '                 while (isdigit(*s)) {
24600                 | LR__4016
24600     00 13 C2 FA | 	rdbyte	arg01, _var01
24604                 | ' {
24604                 | '   return  (__ctype_get(c) & 0x02 ) ;
24604     80 12 36 F3 | 	fle	arg01, #128 wc
24608                 | '     return __ctype[c];
24608     02 00 00 FF 
2460c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
24610     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
24614     09 FB C1 FA | 	rdbyte	result1, arg01
24618     02 00 00 FF 
2461c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
24620     02 FA CD F7 | 	test	result1, #2 wz
24624     28 00 90 AD |  if_e	jmp	#LR__4018
24628     07 05 02 F6 | 	mov	_var03, _var08
2462c     02 04 66 F0 | 	shl	_var03, #2
24630     07 05 02 F1 | 	add	_var03, _var08
24634     01 04 66 F0 | 	shl	_var03, #1
24638     00 09 C2 FA | 	rdbyte	_var05, _var01
2463c     30 08 86 F1 | 	sub	_var05, #48
24640     04 05 02 F1 | 	add	_var03, _var05
24644     02 0F 02 F6 | 	mov	_var08, _var03
24648     01 00 06 F1 | 	add	_var01, #1
2464c     B0 FF 9F FD | 	jmp	#LR__4016
24650                 | LR__4017
24650                 | LR__4018
24650     07 0D 02 F6 | 	mov	_var07, _var08
24654     04 0C 66 F0 | 	shl	_var07, #4
24658     07 0D 82 F1 | 	sub	_var07, _var08
2465c     02 0C 66 F0 | 	shl	_var07, #2
24660     06 11 02 F1 | 	add	_var09, _var07
24664                 | LR__4019
24664     02 00 00 FF 
24668     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2466c     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
24670     00 13 C2 FA | 	rdbyte	arg01, _var01
24674                 | ' {
24674                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
24674     80 12 36 F3 | 	fle	arg01, #128 wc
24678                 | '     return __ctype[c];
24678     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
2467c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
24680     09 FB C1 FA | 	rdbyte	result1, arg01
24684     02 00 00 FF 
24688     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2468c     0C FA CD F7 | 	test	result1, #12 wz
24690     50 00 90 AD |  if_e	jmp	#LR__4022
24694     0A 03 68 FC | 	wrlong	#1, arg02
24698                 | '                 *hasdst = 1;
24698                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
24698                 | LR__4020
24698     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2469c     44 00 90 AD |  if_e	jmp	#LR__4021
246a0     00 13 C2 FA | 	rdbyte	arg01, _var01
246a4                 | ' {
246a4                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
246a4     80 12 36 F3 | 	fle	arg01, #128 wc
246a8                 | '     return __ctype[c];
246a8     02 00 00 FF 
246ac     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
246b0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
246b4     09 FB C1 FA | 	rdbyte	result1, arg01
246b8     02 00 00 FF 
246bc     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
246c0     0C FA CD F7 | 	test	result1, #12 wz
246c4     1C 00 90 AD |  if_e	jmp	#LR__4021
246c8     00 0B 02 F6 | 	mov	_var06, _var01
246cc     01 0A 06 F1 | 	add	_var06, #1
246d0     00 0D C2 FA | 	rdbyte	_var07, _var01
246d4     05 01 02 F6 | 	mov	_var01, _var06
246d8     03 0D 42 FC | 	wrbyte	_var07, _var04
246dc     01 06 06 F1 | 	add	_var04, #1
246e0     B4 FF 9F FD | 	jmp	#LR__4020
246e4                 | LR__4021
246e4                 | LR__4022
246e4     03 01 48 FC | 	wrbyte	#0, _var04
246e8     02 00 00 FF 
246ec     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
246f0     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
246f4     02 00 00 FF 
246f8     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
246fc     20 00 90 AD |  if_e	jmp	#LR__4023
24700     02 00 00 FF 
24704     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
24708     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2470c     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
24710     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
24714     02 00 00 FF 
24718     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2471c     1C 00 90 FD | 	jmp	#LR__4024
24720                 | LR__4023
24720     02 00 00 FF 
24724     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
24728     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2472c     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
24730     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
24734     02 00 00 FF 
24738     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2473c                 | LR__4024
2473c     02 00 00 FF 
24740     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
24744     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
24748     02 00 00 FF 
2474c     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
24750     20 00 90 AD |  if_e	jmp	#LR__4025
24754     02 00 00 FF 
24758     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2475c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
24760     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
24764     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
24768     02 00 00 FF 
2476c     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
24770     1C 00 90 FD | 	jmp	#LR__4026
24774                 | LR__4025
24774     02 00 00 FF 
24778     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2477c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
24780     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
24784     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
24788     02 00 00 FF 
2478c     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
24790                 | LR__4026
24790     08 03 02 FD | 	qmul	_var02, _var09
24794                 | ' 		_tzname[1] = stdname;
24794                 | ' 
24794                 | '         return sgn * off;
24794     18 FA 61 FD | 	getqx	result1
24798                 | LR__4027
24798                 | _fatfs_cc___tzoffset_ret
24798     2D 00 64 FD | 	ret
2479c                 | 
2479c                 | _fatfs_cc___indst
2479c     10 12 06 F1 | 	add	arg01, #16
247a0     09 01 02 FB | 	rdlong	_var01, arg01
247a4     10 12 86 F1 | 	sub	arg01, #16
247a8     02 00 0E F2 | 	cmp	_var01, #2 wz
247ac     30 00 90 5D |  if_ne	jmp	#LR__4030
247b0     07 00 06 F6 | 	mov	_var01, #7
247b4     18 12 06 F1 | 	add	arg01, #24
247b8     09 03 02 FB | 	rdlong	_var02, arg01
247bc     01 01 02 F1 | 	add	_var01, _var02
247c0     0C 12 86 F1 | 	sub	arg01, #12
247c4     09 05 02 FB | 	rdlong	_var03, arg01
247c8     02 01 82 F1 | 	sub	_var01, _var03
247cc     00 00 56 F2 | 	cmps	_var01, #0 wc
247d0                 | '                         return 1;
247d0     01 FA 05 C6 |  if_b	mov	result1, #1
247d4     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
247d8                 | '                 return 0;
247d8     00 FA 05 F6 | 	mov	result1, #0
247dc     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
247e0                 | LR__4030
247e0     10 12 06 F1 | 	add	arg01, #16
247e4     09 01 02 FB | 	rdlong	_var01, arg01
247e8     10 12 86 F1 | 	sub	arg01, #16
247ec     0A 00 0E F2 | 	cmp	_var01, #10 wz
247f0     28 00 90 5D |  if_ne	jmp	#LR__4031
247f4     18 12 06 F1 | 	add	arg01, #24
247f8     09 01 02 FB | 	rdlong	_var01, arg01
247fc     0C 12 86 F1 | 	sub	arg01, #12
24800     09 07 02 FB | 	rdlong	_var04, arg01
24804     03 01 82 F1 | 	sub	_var01, _var04
24808     00 00 56 F2 | 	cmps	_var01, #0 wc
2480c                 | '                         return 0;
2480c     00 FA 05 C6 |  if_b	mov	result1, #0
24810     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
24814                 | '                 return 1;
24814     01 FA 05 F6 | 	mov	result1, #1
24818     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2481c                 | LR__4031
2481c                 | '         }
2481c                 | ' 
2481c                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
2481c     00 00 06 F6 | 	mov	_var01, #0
24820     10 12 06 F1 | 	add	arg01, #16
24824     09 03 02 FB | 	rdlong	_var02, arg01
24828     10 12 86 F1 | 	sub	arg01, #16
2482c     03 02 56 F2 | 	cmps	_var02, #3 wc
24830     10 00 90 CD |  if_b	jmp	#LR__4032
24834     10 12 06 F1 | 	add	arg01, #16
24838     09 05 02 FB | 	rdlong	_var03, arg01
2483c     0A 04 56 F2 | 	cmps	_var03, #10 wc
24840     01 00 06 C6 |  if_b	mov	_var01, #1
24844                 | LR__4032
24844     00 FB 01 F6 | 	mov	result1, _var01
24848                 | _fatfs_cc___indst_ret
24848     2D 00 64 FD | 	ret
2484c                 | 
2484c                 | ' 	
2484c                 | ' 	FUNCTION pfunc(c as integer) as integer
2484c                 | ___strs_cl_pfunc
2484c                 | ' 		if (i < 16) then
2484c     04 E4 05 F1 | 	add	objptr, #4
24850     F2 FA 01 FB | 	rdlong	result1, objptr
24854     04 E4 85 F1 | 	sub	objptr, #4
24858     10 FA 55 F2 | 	cmps	result1, #16 wc
2485c     2C 00 90 3D |  if_ae	jmp	#LR__4040
24860     F2 FA 01 FB | 	rdlong	result1, objptr
24864     04 E4 05 F1 | 	add	objptr, #4
24868     F2 00 02 FB | 	rdlong	_var01, objptr
2486c     FD 00 02 F1 | 	add	_var01, result1
24870     00 13 42 FC | 	wrbyte	arg01, _var01
24874     F2 FA 01 FB | 	rdlong	result1, objptr
24878     01 FA 05 F1 | 	add	result1, #1
2487c     F2 FA 61 FC | 	wrlong	result1, objptr
24880     04 E4 85 F1 | 	sub	objptr, #4
24884                 | ' 			p(i) = c
24884                 | ' 			i = i+1
24884                 | ' 			return 1
24884     01 FA 05 F6 | 	mov	result1, #1
24888     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
2488c                 | LR__4040
2488c                 | ' 			return -1
2488c     01 FA 65 F6 | 	neg	result1, #1
24890                 | ___strs_cl_pfunc_ret
24890     2D 00 64 FD | 	ret
24894                 | 
24894                 | __struct__s_vfs_file_t_putchar
24894     04 4A 05 F6 | 	mov	COUNT_, #4
24898     A8 00 A0 FD | 	call	#pushregs_
2489c     1C E4 05 F1 | 	add	objptr, #28
248a0     F2 1E 0A FB | 	rdlong	local01, objptr wz
248a4     1C E4 85 F1 | 	sub	objptr, #28
248a8     00 FA 05 A6 |  if_e	mov	result1, #0
248ac     48 00 90 AD |  if_e	jmp	#LR__4050
248b0     1C E4 05 F1 | 	add	objptr, #28
248b4     F2 20 02 FB | 	rdlong	local02, objptr
248b8     10 23 02 F6 | 	mov	local03, local02
248bc     1C E4 85 F1 | 	sub	objptr, #28
248c0     13 22 46 F7 | 	zerox	local03, #19
248c4     14 20 46 F0 | 	shr	local02, #20
248c8     02 20 66 F0 | 	shl	local02, #2
248cc     ED 20 02 F1 | 	add	local02, __methods__
248d0     10 21 02 FB | 	rdlong	local02, local02
248d4     F2 14 02 F6 | 	mov	arg02, objptr
248d8     F2 24 02 F6 | 	mov	local04, objptr
248dc     11 E5 01 F6 | 	mov	objptr, local03
248e0     2D 20 62 FD | 	call	local02
248e4     12 E5 01 F6 | 	mov	objptr, local04
248e8                 | '     return (i < 0) ? 0 : 1;
248e8     00 FA 55 F2 | 	cmps	result1, #0 wc
248ec     00 1E 06 C6 |  if_b	mov	local01, #0
248f0     01 1E 06 36 |  if_ae	mov	local01, #1
248f4     0F FB 01 F6 | 	mov	result1, local01
248f8                 | LR__4050
248f8     A7 F0 03 F6 | 	mov	ptra, fp
248fc     B2 00 A0 FD | 	call	#popregs_
24900                 | __struct__s_vfs_file_t_putchar_ret
24900     2D 00 64 FD | 	ret
24904                 | 
24904                 | __struct__s_vfs_file_t_getchar
24904     03 4A 05 F6 | 	mov	COUNT_, #3
24908     A8 00 A0 FD | 	call	#pushregs_
2490c     20 E4 05 F1 | 	add	objptr, #32
24910     F2 12 0A FB | 	rdlong	arg01, objptr wz
24914     20 E4 85 F1 | 	sub	objptr, #32
24918     01 FA 65 A6 |  if_e	neg	result1, #1
2491c     38 00 90 AD |  if_e	jmp	#LR__4060
24920                 | '     return getcf(__this);
24920     20 E4 05 F1 | 	add	objptr, #32
24924     F2 1E 02 FB | 	rdlong	local01, objptr
24928     0F 21 02 F6 | 	mov	local02, local01
2492c     20 E4 85 F1 | 	sub	objptr, #32
24930     13 20 46 F7 | 	zerox	local02, #19
24934     14 1E 46 F0 | 	shr	local01, #20
24938     02 1E 66 F0 | 	shl	local01, #2
2493c     ED 1E 02 F1 | 	add	local01, __methods__
24940     0F 1F 02 FB | 	rdlong	local01, local01
24944     F2 12 02 F6 | 	mov	arg01, objptr
24948     F2 22 02 F6 | 	mov	local03, objptr
2494c     10 E5 01 F6 | 	mov	objptr, local02
24950     2D 1E 62 FD | 	call	local01
24954     11 E5 01 F6 | 	mov	objptr, local03
24958                 | LR__4060
24958     A7 F0 03 F6 | 	mov	ptra, fp
2495c     B2 00 A0 FD | 	call	#popregs_
24960                 | __struct__s_vfs_file_t_getchar_ret
24960     2D 00 64 FD | 	ret
24964                 | 
24964                 | __struct___bas_wrap_sender_tx
24964     03 4A 05 F6 | 	mov	COUNT_, #3
24968     A8 00 A0 FD | 	call	#pushregs_
2496c     F2 1E 02 FB | 	rdlong	local01, objptr
24970     0F 21 02 F6 | 	mov	local02, local01
24974     13 1E 46 F7 | 	zerox	local01, #19
24978     14 20 46 F0 | 	shr	local02, #20
2497c     02 20 66 F0 | 	shl	local02, #2
24980     ED 20 02 F1 | 	add	local02, __methods__
24984     10 21 02 FB | 	rdlong	local02, local02
24988     F2 22 02 F6 | 	mov	local03, objptr
2498c     0F E5 01 F6 | 	mov	objptr, local01
24990     2D 20 62 FD | 	call	local02
24994     11 E5 01 F6 | 	mov	objptr, local03
24998     01 FA 05 F6 | 	mov	result1, #1
2499c     A7 F0 03 F6 | 	mov	ptra, fp
249a0     B2 00 A0 FD | 	call	#popregs_
249a4                 | __struct___bas_wrap_sender_tx_ret
249a4     2D 00 64 FD | 	ret
249a8                 | 
249a8                 | __struct___bas_wrap_sender_rx
249a8     03 4A 05 F6 | 	mov	COUNT_, #3
249ac     A8 00 A0 FD | 	call	#pushregs_
249b0     04 E4 05 F1 | 	add	objptr, #4
249b4     F2 1E 02 FB | 	rdlong	local01, objptr
249b8     0F 21 02 F6 | 	mov	local02, local01
249bc     04 E4 85 F1 | 	sub	objptr, #4
249c0     13 20 46 F7 | 	zerox	local02, #19
249c4     14 1E 46 F0 | 	shr	local01, #20
249c8     02 1E 66 F0 | 	shl	local01, #2
249cc     ED 1E 02 F1 | 	add	local01, __methods__
249d0     0F 1F 02 FB | 	rdlong	local01, local01
249d4     F2 22 02 F6 | 	mov	local03, objptr
249d8     10 E5 01 F6 | 	mov	objptr, local02
249dc     2D 1E 62 FD | 	call	local01
249e0     11 E5 01 F6 | 	mov	objptr, local03
249e4     A7 F0 03 F6 | 	mov	ptra, fp
249e8     B2 00 A0 FD | 	call	#popregs_
249ec                 | __struct___bas_wrap_sender_rx_ret
249ec     2D 00 64 FD | 	ret
249f0                 | 
249f0                 | __struct___bas_wrap_sender_close
249f0     03 4A 05 F6 | 	mov	COUNT_, #3
249f4     A8 00 A0 FD | 	call	#pushregs_
249f8     08 E4 05 F1 | 	add	objptr, #8
249fc     F2 1E 02 FB | 	rdlong	local01, objptr
24a00     0F 21 02 F6 | 	mov	local02, local01
24a04     08 E4 85 F1 | 	sub	objptr, #8
24a08     13 20 46 F7 | 	zerox	local02, #19
24a0c     14 1E 46 F0 | 	shr	local01, #20
24a10     02 1E 66 F0 | 	shl	local01, #2
24a14     ED 1E 02 F1 | 	add	local01, __methods__
24a18     0F 1F 02 FB | 	rdlong	local01, local01
24a1c     F2 22 02 F6 | 	mov	local03, objptr
24a20     10 E5 01 F6 | 	mov	objptr, local02
24a24     2D 1E 62 FD | 	call	local01
24a28     11 E5 01 F6 | 	mov	objptr, local03
24a2c     A7 F0 03 F6 | 	mov	ptra, fp
24a30     B2 00 A0 FD | 	call	#popregs_
24a34                 | __struct___bas_wrap_sender_close_ret
24a34     2D 00 64 FD | 	ret
24a38                 | 
24a38                 | LR__4070
24a38     2F          | 	byte	"/"
24a39     00          | 	byte	0
24a3a                 | LR__4071
24a3a     69 6E 66    | 	byte	"inf"
24a3d     00          | 	byte	0
24a3e                 | LR__4072
24a3e     6E 61 6E    | 	byte	"nan"
24a41     00          | 	byte	0
24a42                 | LR__4073
24a42                 | 	byte	
24a42     00          | 	byte	0
24a43                 | LR__4074
24a43                 | 	byte	
24a43     00          | 	byte	0
24a44                 | LR__4075
24a44                 | 	byte	
24a44     00          | 	byte	0
24a45                 | LR__4076
24a45                 | 	byte	
24a45     00          | 	byte	0
24a46                 | LR__4077
24a46                 | 	byte	
24a46     00          | 	byte	0
24a47                 | LR__4078
24a47                 | 	byte	
24a47     00          | 	byte	0
24a48                 | LR__4079
24a48                 | 	byte	
24a48     00          | 	byte	0
24a49                 | LR__4080
24a49                 | 	byte	
24a49     00          | 	byte	0
24a4a                 | LR__4081
24a4a     00          | 	byte	0
24a4b     00          | 	byte	0
24a4c                 | LR__4082
24a4c     00          | 	byte	0
24a4d     00          | 	byte	0
24a4e                 | LR__4083
24a4e     00          | 	byte	0
24a4f     00          | 	byte	0
24a50                 | LR__4084
24a50     20 21 21 21 
24a54     20 63 6F 72 
24a58     72 75 70 74 
24a5c     65 64 20 68 
24a60     65 61 70 3F 
24a64     3F 3F 20 21 
24a68     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
24a6b     00          | 	byte	0
24a6c                 | LR__4085
24a6c     20 21 21 21 
24a70     20 6F 75 74 
24a74     20 6F 66 20 
24a78     68 65 61 70 
24a7c     20 6D 65 6D 
24a80     6F 72 79 20 
24a84     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
24a88     00          | 	byte	0
24a89                 | LR__4086
24a89     20 21 21 21 
24a8d     20 63 6F 72 
24a91     72 75 70 74 
24a95     65 64 20 68 
24a99     65 61 70 20 
24a9d     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
24aa1     00          | 	byte	0
24aa2                 | LR__4087
24aa2     00          | 	byte	0
24aa3     00          | 	byte	0
24aa4                 | LR__4088
24aa4     2E          | 	byte	"."
24aa5     00          | 	byte	0
24aa6                 | LR__4089
24aa6     00          | 	byte	0
24aa7     00          | 	byte	0
24aa8                 | LR__4090
24aa8     00          | 	byte	0
24aa9     00          | 	byte	0
24aaa                 | LR__4091
24aaa     00          | 	byte	0
24aab     00          | 	byte	0
24aac                 | LR__4092
24aac     2A 3A 3C 3E 
24ab0     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
24ab4     00          | 	byte	0
24ab5                 | LR__4093
24ab5     2B 2C 3B 3D 
24ab9     5B 5D       | 	byte	"+,;=[]"
24abb     00          | 	byte	0
24abc                 | LR__4094
24abc     46 41 54 33 
24ac0     32 20 20 20 | 	byte	"FAT32   "
24ac4     00          | 	byte	0
24ac5                 | LR__4095
24ac5     54 5A       | 	byte	"TZ"
24ac7     00          | 	byte	0
24ac8                 | LR__4096
24ac8     00          | 	byte	0
24ac9     00          | 	byte	0
24aca                 | LR__4097
24aca                 | 	byte	
24aca     00          | 	byte	0
24acb                 | LR__4098
24acb                 | 	byte	
24acb     00          | 	byte	0
24acc                 | LR__4099
24acc     3A          | 	byte	":"
24acd     00          | 	byte	0
24ace                 | LR__4100
24ace                 | 	byte	
24ace     00          | 	byte	0
24acf                 | LR__4101
24acf                 | 	byte	
24acf     00          | 	byte	0
24ad0                 | LR__4102
24ad0                 | 	byte	
24ad0     00          | 	byte	0
24ad1                 | LR__4103
24ad1                 | 	byte	
24ad1     00          | 	byte	0
24ad2                 | LR__4104
24ad2                 | 	byte	
24ad2     00          | 	byte	0
24ad3                 | LR__4105
24ad3                 | 	byte	
24ad3     00          | 	byte	0
24ad4                 | LR__4106
24ad4                 | 	byte	
24ad4     00          | 	byte	0
24ad5                 | LR__4107
24ad5     22          | 	byte	34
24ad6     00          | 	byte	0
24ad7                 | LR__4108
24ad7     22          | 	byte	34
24ad8     00          | 	byte	0
24ad9                 | LR__4109
24ad9     22          | 	byte	34
24ada     00          | 	byte	0
24adb                 | LR__4110
24adb     22          | 	byte	34
24adc     00          | 	byte	0
24add                 | LR__4111
24add     22          | 	byte	34
24ade     00          | 	byte	0
24adf                 | LR__4112
24adf     3E          | 	byte	">"
24ae0     00          | 	byte	0
24ae1                 | LR__4113
24ae1     3E          | 	byte	">"
24ae2     00          | 	byte	0
24ae3                 | LR__4114
24ae3     2B          | 	byte	"+"
24ae4     00          | 	byte	0
24ae5                 | LR__4115
24ae5     2D          | 	byte	"-"
24ae6     00          | 	byte	0
24ae7                 | LR__4116
24ae7     2A          | 	byte	"*"
24ae8     00          | 	byte	0
24ae9                 | LR__4117
24ae9     2F          | 	byte	"/"
24aea     00          | 	byte	0
24aeb                 | LR__4118
24aeb     5E          | 	byte	"^"
24aec     00          | 	byte	0
24aed                 | LR__4119
24aed     3D          | 	byte	"="
24aee     00          | 	byte	0
24aef                 | LR__4120
24aef     2B          | 	byte	"+"
24af0     00          | 	byte	0
24af1                 | LR__4121
24af1     2B          | 	byte	"+"
24af2     00          | 	byte	0
24af3                 | LR__4122
24af3     2D          | 	byte	"-"
24af4     00          | 	byte	0
24af5                 | LR__4123
24af5     2D          | 	byte	"-"
24af6     00          | 	byte	0
24af7                 | LR__4124
24af7     3C          | 	byte	"<"
24af8     00          | 	byte	0
24af9                 | LR__4125
24af9     3E          | 	byte	">"
24afa     00          | 	byte	0
24afb                 | LR__4126
24afb     22          | 	byte	34
24afc     00          | 	byte	0
24afd                 | LR__4127
24afd     22          | 	byte	34
24afe     00          | 	byte	0
24aff                 | LR__4128
24aff                 | 	byte	
24aff     00          | 	byte	0
24b00                 | LR__4129
24b00     6C 6F 61 64 | 	byte	"load"
24b04     00          | 	byte	0
24b05                 | LR__4130
24b05     73 61 76 65 | 	byte	"save"
24b09     00          | 	byte	0
24b0a                 | LR__4131
24b0a     62 72 75 6E | 	byte	"brun"
24b0e     00          | 	byte	0
24b0f                 | LR__4132
24b0f     6D 6F 75 73 
24b13     65          | 	byte	"mouse"
24b14     00          | 	byte	0
24b15                 | LR__4133
24b15     63 75 72 73 
24b19     6F 72       | 	byte	"cursor"
24b1b     00          | 	byte	0
24b1c                 | LR__4134
24b1c     63 6C 69 63 
24b20     6B          | 	byte	"click"
24b21     00          | 	byte	0
24b22                 | LR__4135
24b22     6F 6E       | 	byte	"on"
24b24     00          | 	byte	0
24b25                 | LR__4136
24b25     31          | 	byte	"1"
24b26     00          | 	byte	0
24b27                 | LR__4137
24b27     6F 66 66    | 	byte	"off"
24b2a     00          | 	byte	0
24b2b                 | LR__4138
24b2b     30          | 	byte	"0"
24b2c     00          | 	byte	0
24b2d                 | LR__4139
24b2d                 | 	byte	
24b2d     00          | 	byte	0
24b2e                 | LR__4140
24b2e                 | 	byte	
24b2e     00          | 	byte	0
24b2f                 | LR__4141
24b2f                 | 	byte	
24b2f     00          | 	byte	0
24b30                 | LR__4142
24b30                 | 	byte	
24b30     00          | 	byte	0
24b31                 | LR__4143
24b31     20 55 73 65 
24b35     72 20 66 75 
24b39     6E 63 74 69 
24b3d     6F 6E 73 20 
24b41     61 6E 64 20 
24b45     61 72 72 61 
24b49     79 73 20 6E 
24b4d     6F 74 20 79 
24b51     65 74 20 69 
24b55     6D 70 6C 65 
24b59     6D 65 6E 74 
24b5d     65 64       | 	byte	" User functions and arrays not yet implemented"
24b5f     00          | 	byte	0
24b60                 | LR__4144
24b60                 | 	byte	
24b60     00          | 	byte	0
24b61                 | LR__4145
24b61                 | 	byte	
24b61     00          | 	byte	0
24b62                 | LR__4146
24b62     52 65 61 64 
24b66     79          | 	byte	"Ready"
24b67     00          | 	byte	0
24b68                 | LR__4147
24b68     2B          | 	byte	"+"
24b69     00          | 	byte	0
24b6a                 | LR__4148
24b6a     2D          | 	byte	"-"
24b6b     00          | 	byte	0
24b6c                 | LR__4149
24b6c     6F 72       | 	byte	"or"
24b6e     00          | 	byte	0
24b6f                 | LR__4150
24b6f     78 6F 72    | 	byte	"xor"
24b72     00          | 	byte	0
24b73                 | LR__4151
24b73     2A          | 	byte	"*"
24b74     00          | 	byte	0
24b75                 | LR__4152
24b75     2F          | 	byte	"/"
24b76     00          | 	byte	0
24b77                 | LR__4153
24b77     61 6E 64    | 	byte	"and"
24b7a     00          | 	byte	0
24b7b                 | LR__4154
24b7b     64 69 76    | 	byte	"div"
24b7e     00          | 	byte	0
24b7f                 | LR__4155
24b7f     6D 6F 64    | 	byte	"mod"
24b82     00          | 	byte	0
24b83                 | LR__4156
24b83     73 68 6C    | 	byte	"shl"
24b86     00          | 	byte	0
24b87                 | LR__4157
24b87     73 68 72    | 	byte	"shr"
24b8a     00          | 	byte	0
24b8b                 | LR__4158
24b8b     5E          | 	byte	"^"
24b8c     00          | 	byte	0
24b8d                 | LR__4159
24b8d     6E 6F 74    | 	byte	"not"
24b90     00          | 	byte	0
24b91                 | LR__4160
24b91     40          | 	byte	"@"
24b92     00          | 	byte	0
24b93                 | LR__4161
24b93     3D          | 	byte	"="
24b94     00          | 	byte	0
24b95                 | LR__4162
24b95     3E 3D       | 	byte	">="
24b97     00          | 	byte	0
24b98                 | LR__4163
24b98     3C 3D       | 	byte	"<="
24b9a     00          | 	byte	0
24b9b                 | LR__4164
24b9b     3C          | 	byte	"<"
24b9c     00          | 	byte	0
24b9d                 | LR__4165
24b9d     3E          | 	byte	">"
24b9e     00          | 	byte	0
24b9f                 | LR__4166
24b9f     3C 3E       | 	byte	"<>"
24ba1     00          | 	byte	0
24ba2                 | LR__4167
24ba2     2B 2B       | 	byte	"++"
24ba4     00          | 	byte	0
24ba5                 | LR__4168
24ba5     2D 2D       | 	byte	"--"
24ba7     00          | 	byte	0
24ba8                 | LR__4169
24ba8     2B          | 	byte	"+"
24ba9     00          | 	byte	0
24baa                 | LR__4170
24baa     2D          | 	byte	"-"
24bab     00          | 	byte	0
24bac                 | LR__4171
24bac     3D          | 	byte	"="
24bad     00          | 	byte	0
24bae                 | LR__4172
24bae     2C          | 	byte	","
24baf     00          | 	byte	0
24bb0                 | LR__4173
24bb0     2A          | 	byte	"*"
24bb1     00          | 	byte	0
24bb2                 | LR__4174
24bb2     2F          | 	byte	"/"
24bb3     00          | 	byte	0
24bb4                 | LR__4175
24bb4     3B          | 	byte	";"
24bb5     00          | 	byte	0
24bb6                 | LR__4176
24bb6     22          | 	byte	34
24bb7     00          | 	byte	0
24bb8                 | LR__4177
24bb8     5E          | 	byte	"^"
24bb9     00          | 	byte	0
24bba                 | LR__4178
24bba     29          | 	byte	")"
24bbb     00          | 	byte	0
24bbc                 | LR__4179
24bbc     28          | 	byte	"("
24bbd     00          | 	byte	0
24bbe                 | LR__4180
24bbe     3A          | 	byte	":"
24bbf     00          | 	byte	0
24bc0                 | LR__4181
24bc0     20          | 	byte	" "
24bc1     00          | 	byte	0
24bc2                 | LR__4182
24bc2     3E          | 	byte	">"
24bc3     00          | 	byte	0
24bc4                 | LR__4183
24bc4     3C          | 	byte	"<"
24bc5     00          | 	byte	0
24bc6                 | LR__4184
24bc6     3D          | 	byte	"="
24bc7     00          | 	byte	0
24bc8                 | LR__4185
24bc8     63 6C 73    | 	byte	"cls"
24bcb     00          | 	byte	0
24bcc                 | LR__4186
24bcc     6E 65 77    | 	byte	"new"
24bcf     00          | 	byte	0
24bd0                 | LR__4187
24bd0     70 6C 6F 74 | 	byte	"plot"
24bd4     00          | 	byte	0
24bd5                 | LR__4188
24bd5     64 72 61 77 | 	byte	"draw"
24bd9     00          | 	byte	0
24bda                 | LR__4189
24bda     70 72 69 6E 
24bde     74          | 	byte	"print"
24bdf     00          | 	byte	0
24be0                 | LR__4190
24be0     63 69 72 63 
24be4     6C 65       | 	byte	"circle"
24be6     00          | 	byte	0
24be7                 | LR__4191
24be7     66 63 69 72 
24beb     63 6C 65    | 	byte	"fcircle"
24bee     00          | 	byte	0
24bef                 | LR__4192
24bef     62 6F 78    | 	byte	"box"
24bf2     00          | 	byte	0
24bf3                 | LR__4193
24bf3     66 72 61 6D 
24bf7     65          | 	byte	"frame"
24bf8     00          | 	byte	0
24bf9                 | LR__4194
24bf9     63 6F 6C 6F 
24bfd     72          | 	byte	"color"
24bfe     00          | 	byte	0
24bff                 | LR__4195
24bff     70 72 69 6E 
24c03     74          | 	byte	"print"
24c04     00          | 	byte	0
24c05                 | LR__4196
24c05     6C 69 73 74 | 	byte	"list"
24c09     00          | 	byte	0
24c0a                 | LR__4197
24c0a     72 75 6E    | 	byte	"run"
24c0d     00          | 	byte	0
24c0e                 | LR__4198
24c0e     67 6F 74 6F | 	byte	"goto"
24c12     00          | 	byte	0
24c13                 | LR__4199
24c13     63 73 61 76 
24c17     65          | 	byte	"csave"
24c18     00          | 	byte	0
24c19                 | LR__4200
24c19     73 61 76 65 | 	byte	"save"
24c1d     00          | 	byte	0
24c1e                 | LR__4201
24c1e     6C 6F 61 64 | 	byte	"load"
24c22     00          | 	byte	0
24c23                 | LR__4202
24c23     62 72 75 6E | 	byte	"brun"
24c27     00          | 	byte	0
24c28                 | LR__4203
24c28     70 69 6E 77 
24c2c     72 69 74 65 | 	byte	"pinwrite"
24c30     00          | 	byte	0
24c31                 | LR__4204
24c31     77 61 69 74 
24c35     6D 73       | 	byte	"waitms"
24c37     00          | 	byte	0
24c38                 | LR__4205
24c38     77 61 69 74 
24c3c     76 62 6C    | 	byte	"waitvbl"
24c3f     00          | 	byte	0
24c40                 | LR__4206
24c40     69 66       | 	byte	"if"
24c42     00          | 	byte	0
24c43                 | LR__4207
24c43     65 6C 73 65 | 	byte	"else"
24c47     00          | 	byte	0
24c48                 | LR__4208
24c48     74 68 65 6E | 	byte	"then"
24c4c     00          | 	byte	0
24c4d                 | LR__4209
24c4d     62 65 65 70 | 	byte	"beep"
24c51     00          | 	byte	0
24c52                 | LR__4210
24c52     64 69 72    | 	byte	"dir"
24c55     00          | 	byte	0
24c56                 | LR__4211
24c56     66 6F 72    | 	byte	"for"
24c59     00          | 	byte	0
24c5a                 | LR__4212
24c5a     6E 65 78 74 | 	byte	"next"
24c5e     00          | 	byte	0
24c5f                 | LR__4213
24c5f     70 61 70 65 
24c63     72          | 	byte	"paper"
24c64     00          | 	byte	0
24c65                 | LR__4214
24c65     69 6E 6B    | 	byte	"ink"
24c68     00          | 	byte	0
24c69                 | LR__4215
24c69     66 6F 6E 74 | 	byte	"font"
24c6d     00          | 	byte	0
24c6e                 | LR__4216
24c6e     6D 6F 64 65 | 	byte	"mode"
24c72     00          | 	byte	0
24c73                 | LR__4217
24c73     6D 6F 75 73 
24c77     65          | 	byte	"mouse"
24c78     00          | 	byte	0
24c79                 | LR__4218
24c79     63 75 72 73 
24c7d     6F 72       | 	byte	"cursor"
24c7f     00          | 	byte	0
24c80                 | LR__4219
24c80     63 6C 69 63 
24c84     6B          | 	byte	"click"
24c85     00          | 	byte	0
24c86                 | LR__4220
24c86     64 65 66 73 
24c8a     70 72 69 74 
24c8e     65          | 	byte	"defsprite"
24c8f     00          | 	byte	0
24c90                 | LR__4221
24c90     73 70 72 69 
24c94     74 65       | 	byte	"sprite"
24c96     00          | 	byte	0
24c97                 | LR__4222
24c97     77 61 69 74 
24c9b     63 6C 6F 63 
24c9f     6B          | 	byte	"waitclock"
24ca0     00          | 	byte	0
24ca1                 | LR__4223
24ca1     66 69 6C 6C | 	byte	"fill"
24ca5     00          | 	byte	0
24ca6                 | LR__4224
24ca6     64 69 6D    | 	byte	"dim"
24ca9     00          | 	byte	0
24caa                 | LR__4225
24caa     77 72 70 69 
24cae     6E          | 	byte	"wrpin"
24caf     00          | 	byte	0
24cb0                 | LR__4226
24cb0     77 78 70 69 
24cb4     6E          | 	byte	"wxpin"
24cb5     00          | 	byte	0
24cb6                 | LR__4227
24cb6     77 79 70 69 
24cba     6E          | 	byte	"wypin"
24cbb     00          | 	byte	0
24cbc                 | LR__4228
24cbc     70 69 6E 66 
24cc0     6C 6F 61 74 | 	byte	"pinfloat"
24cc4     00          | 	byte	0
24cc5                 | LR__4229
24cc5     70 69 6E 6C 
24cc9     6F          | 	byte	"pinlo"
24cca     00          | 	byte	0
24ccb                 | LR__4230
24ccb     70 69 6E 68 
24ccf     69          | 	byte	"pinhi"
24cd0     00          | 	byte	0
24cd1                 | LR__4231
24cd1     70 69 6E 73 
24cd5     74 61 72 74 | 	byte	"pinstart"
24cd9     00          | 	byte	0
24cda                 | LR__4232
24cda     70 69 6E 74 
24cde     6F 67 67 6C 
24ce2     65          | 	byte	"pintoggle"
24ce3     00          | 	byte	0
24ce4                 | LR__4233
24ce4     72 6E 64    | 	byte	"rnd"
24ce7     00          | 	byte	0
24ce8                 | LR__4234
24ce8     6D 6F 75 73 
24cec     65 78       | 	byte	"mousex"
24cee     00          | 	byte	0
24cef                 | LR__4235
24cef     6D 6F 75 73 
24cf3     65 79       | 	byte	"mousey"
24cf5     00          | 	byte	0
24cf6                 | LR__4236
24cf6     6D 6F 75 73 
24cfa     65 6B       | 	byte	"mousek"
24cfc     00          | 	byte	0
24cfd                 | LR__4237
24cfd     6D 6F 75 73 
24d01     65 77       | 	byte	"mousew"
24d03     00          | 	byte	0
24d04                 | LR__4238
24d04     67 65 74 74 
24d08     69 6D 65    | 	byte	"gettime"
24d0b     00          | 	byte	0
24d0c                 | LR__4239
24d0c     73 69 6E    | 	byte	"sin"
24d0f     00          | 	byte	0
24d10                 | LR__4240
24d10     73 74 69 63 
24d14     6B          | 	byte	"stick"
24d15     00          | 	byte	0
24d16                 | LR__4241
24d16     73 74 72 69 
24d1a     67          | 	byte	"strig"
24d1b     00          | 	byte	0
24d1c                 | LR__4242
24d1c     67 65 74 70 
24d20     69 78 65 6C | 	byte	"getpixel"
24d24     00          | 	byte	0
24d25                 | LR__4243
24d25     72 64 70 69 
24d29     6E          | 	byte	"rdpin"
24d2a     00          | 	byte	0
24d2b                 | LR__4244
24d2b     70 69 6E 72 
24d2f     65 61 64    | 	byte	"pinread"
24d32     00          | 	byte	0
24d33                 | LR__4245
24d33     72 71 70 69 
24d37     6E          | 	byte	"rqpin"
24d38     00          | 	byte	0
24d39                 | LR__4246
24d39     61          | 	byte	"a"
24d3a     00          | 	byte	0
24d3b                 | LR__4247
24d3b     7A          | 	byte	"z"
24d3c     00          | 	byte	0
24d3d                 | LR__4248
24d3d     5F          | 	byte	"_"
24d3e     00          | 	byte	0
24d3f                 | LR__4249
24d3f     61          | 	byte	"a"
24d40     00          | 	byte	0
24d41                 | LR__4250
24d41     7A          | 	byte	"z"
24d42     00          | 	byte	0
24d43                 | LR__4251
24d43     30          | 	byte	"0"
24d44     00          | 	byte	0
24d45                 | LR__4252
24d45     39          | 	byte	"9"
24d46     00          | 	byte	0
24d47                 | LR__4253
24d47     5F          | 	byte	"_"
24d48     00          | 	byte	0
24d49                 | LR__4254
24d49     2E          | 	byte	"."
24d4a     00          | 	byte	0
24d4b                 | LR__4255
24d4b     61          | 	byte	"a"
24d4c     00          | 	byte	0
24d4d                 | LR__4256
24d4d     7A          | 	byte	"z"
24d4e     00          | 	byte	0
24d4f                 | LR__4257
24d4f     30          | 	byte	"0"
24d50     00          | 	byte	0
24d51                 | LR__4258
24d51     39          | 	byte	"9"
24d52     00          | 	byte	0
24d53                 | LR__4259
24d53     5F          | 	byte	"_"
24d54     00          | 	byte	0
24d55                 | LR__4260
24d55     24          | 	byte	"$"
24d56     00          | 	byte	0
24d57                 | LR__4261
24d57     25          | 	byte	"%"
24d58     00          | 	byte	0
24d59                 | LR__4262
24d59     21          | 	byte	"!"
24d5a     00          | 	byte	0
24d5b                 | LR__4263
24d5b     30          | 	byte	"0"
24d5c     00          | 	byte	0
24d5d                 | LR__4264
24d5d     39          | 	byte	"9"
24d5e     00          | 	byte	0
24d5f                 | LR__4265
24d5f     2E          | 	byte	"."
24d60     00          | 	byte	0
24d61                 | LR__4266
24d61     24          | 	byte	"$"
24d62     00          | 	byte	0
24d63                 | LR__4267
24d63     25          | 	byte	"%"
24d64     00          | 	byte	0
24d65                 | LR__4268
24d65     2D          | 	byte	"-"
24d66     00          | 	byte	0
24d67                 | LR__4269
24d67     2E          | 	byte	"."
24d68     00          | 	byte	0
24d69                 | LR__4270
24d69     30          | 	byte	"0"
24d6a     00          | 	byte	0
24d6b                 | LR__4271
24d6b     39          | 	byte	"9"
24d6c     00          | 	byte	0
24d6d                 | LR__4272
24d6d     5F          | 	byte	"_"
24d6e     00          | 	byte	0
24d6f                 | LR__4273
24d6f     2E          | 	byte	"."
24d70     00          | 	byte	0
24d71                 | LR__4274
24d71     45          | 	byte	"E"
24d72     00          | 	byte	0
24d73                 | LR__4275
24d73     65          | 	byte	"e"
24d74     00          | 	byte	0
24d75                 | LR__4276
24d75     2D          | 	byte	"-"
24d76     00          | 	byte	0
24d77                 | LR__4277
24d77     2D          | 	byte	"-"
24d78     00          | 	byte	0
24d79                 | LR__4278
24d79     65          | 	byte	"e"
24d7a     00          | 	byte	0
24d7b                 | LR__4279
24d7b     2E          | 	byte	"."
24d7c     00          | 	byte	0
24d7d                 | LR__4280
24d7d     45          | 	byte	"E"
24d7e     00          | 	byte	0
24d7f                 | LR__4281
24d7f     65          | 	byte	"e"
24d80     00          | 	byte	0
24d81                 | LR__4282
24d81     30          | 	byte	"0"
24d82     00          | 	byte	0
24d83                 | LR__4283
24d83     39          | 	byte	"9"
24d84     00          | 	byte	0
24d85                 | LR__4284
24d85     24          | 	byte	"$"
24d86     00          | 	byte	0
24d87                 | LR__4285
24d87     25          | 	byte	"%"
24d88     00          | 	byte	0
24d89                 | LR__4286
24d89     2D          | 	byte	"-"
24d8a     00          | 	byte	0
24d8b                 | LR__4287
24d8b     30          | 	byte	"0"
24d8c     00          | 	byte	0
24d8d                 | LR__4288
24d8d     39          | 	byte	"9"
24d8e     00          | 	byte	0
24d8f                 | LR__4289
24d8f     5F          | 	byte	"_"
24d90     00          | 	byte	0
24d91                 | LR__4290
24d91     30          | 	byte	"0"
24d92     00          | 	byte	0
24d93                 | LR__4291
24d93     39          | 	byte	"9"
24d94     00          | 	byte	0
24d95                 | LR__4292
24d95     5F          | 	byte	"_"
24d96     00          | 	byte	0
24d97                 | LR__4293
24d97     22          | 	byte	34
24d98     00          | 	byte	0
24d99                 | LR__4294
24d99     22          | 	byte	34
24d9a     00          | 	byte	0
24d9b                 | LR__4295
24d9b     28          | 	byte	"("
24d9c     00          | 	byte	0
24d9d                 | LR__4296
24d9d     61 73       | 	byte	"as"
24d9f     00          | 	byte	0
24da0                 | LR__4297
24da0     61 73       | 	byte	"as"
24da2     00          | 	byte	0
24da3                 | LR__4298
24da3     2C          | 	byte	","
24da4     00          | 	byte	0
24da5                 | LR__4299
24da5     29          | 	byte	")"
24da6     00          | 	byte	0
24da7                 | LR__4300
24da7     29          | 	byte	")"
24da8     00          | 	byte	0
24da9                 | LR__4301
24da9     61 73       | 	byte	"as"
24dab     00          | 	byte	0
24dac                 | LR__4302
24dac     62 79 74 65 | 	byte	"byte"
24db0     00          | 	byte	0
24db1                 | LR__4303
24db1     75 62 79 74 
24db5     65          | 	byte	"ubyte"
24db6     00          | 	byte	0
24db7                 | LR__4304
24db7     73 68 6F 72 
24dbb     74          | 	byte	"short"
24dbc     00          | 	byte	0
24dbd                 | LR__4305
24dbd     75 73 68 6F 
24dc1     72 74       | 	byte	"ushort"
24dc3     00          | 	byte	0
24dc4                 | LR__4306
24dc4     6C 6F 6E 67 | 	byte	"long"
24dc8     00          | 	byte	0
24dc9                 | LR__4307
24dc9     69 6E 74 65 
24dcd     67 65 72    | 	byte	"integer"
24dd0     00          | 	byte	0
24dd1                 | LR__4308
24dd1     75 6C 6F 6E 
24dd5     67          | 	byte	"ulong"
24dd6     00          | 	byte	0
24dd7                 | LR__4309
24dd7     69 6E 74 36 
24ddb     34          | 	byte	"int64"
24ddc     00          | 	byte	0
24ddd                 | LR__4310
24ddd     75 69 6E 74 
24de1     36 34       | 	byte	"uint64"
24de3     00          | 	byte	0
24de4                 | LR__4311
24de4     73 69 6E 67 
24de8     6C 65       | 	byte	"single"
24dea     00          | 	byte	0
24deb                 | LR__4312
24deb     64 6F 75 62 
24def     6C 65       | 	byte	"double"
24df1     00          | 	byte	0
24df2                 | LR__4313
24df2     73 74 72 69 
24df6     6E 67       | 	byte	"string"
24df8     00          | 	byte	0
24df9                 | LR__4314
24df9     74 6F       | 	byte	"to"
24dfb     00          | 	byte	0
24dfc                 | LR__4315
24dfc     73 74 65 70 | 	byte	"step"
24e00     00          | 	byte	0
24e01                 | LR__4316
24e01     57 65 20 68 
24e05     61 76 65 20 
24e09     61 20 73 6C 
24e0d     6F 77 20 67 
24e11     6F 74 6F 2C 
24e15     20 74 6F 64 
24e19     6F 20 20    | 	byte	"We have a slow goto, todo  "
24e1c     00          | 	byte	0
24e1d                 | LR__4317
24e1d     6E 6F 6E 61 
24e21     6D 65 2E 62 
24e25     61 73       | 	byte	"noname.bas"
24e27     00          | 	byte	0
24e28                 | LR__4318
24e28                 | 	byte	
24e28     00          | 	byte	0
24e29                 | LR__4319
24e29     6E 6F 6E 61 
24e2d     6D 65 2E 62 
24e31     61 73       | 	byte	"noname.bas"
24e33     00          | 	byte	0
24e34                 | LR__4320
24e34     2F          | 	byte	"/"
24e35     00          | 	byte	0
24e36                 | LR__4321
24e36                 | 	byte	
24e36     00          | 	byte	0
24e37                 | LR__4322
24e37                 | 	byte	
24e37     00          | 	byte	0
24e38                 | LR__4323
24e38     6E 6F 6E 61 
24e3c     6D 65 2E 62 
24e40     61 73       | 	byte	"noname.bas"
24e42     00          | 	byte	0
24e43                 | LR__4324
24e43     2F          | 	byte	"/"
24e44     00          | 	byte	0
24e45                 | LR__4325
24e45     53 79 73 74 
24e49     65 6D 20 65 
24e4d     72 72 6F 72 
24e51     20          | 	byte	"System error "
24e52     00          | 	byte	0
24e53                 | LR__4326
24e53     3A 20       | 	byte	": "
24e55     00          | 	byte	0
24e56                 | LR__4327
24e56     2F          | 	byte	"/"
24e57     00          | 	byte	0
24e58                 | LR__4328
24e58     30          | 	byte	"0"
24e59     00          | 	byte	0
24e5a                 | LR__4329
24e5a     39          | 	byte	"9"
24e5b     00          | 	byte	0
24e5c                 | LR__4330
24e5c                 | 	byte	
24e5c     00          | 	byte	0
24e5d                 | LR__4331
24e5d     53 74 6F 70 
24e61     70 65 64 20 
24e65     61 74 20 6C 
24e69     69 6E 65 20 | 	byte	"Stopped at line "
24e6d     00          | 	byte	0
24e6e                 | LR__4332
24e6e     45 72 72 6F 
24e72     72 20       | 	byte	"Error "
24e74     00          | 	byte	0
24e75                 | LR__4333
24e75     3A 20       | 	byte	": "
24e77     00          | 	byte	0
24e78                 | LR__4334
24e78                 | 	byte	
24e78     00          | 	byte	0
24e79                 | LR__4335
24e79     72 6E 64 3A 
24e7d     20          | 	byte	"rnd: "
24e7e     00          | 	byte	0
24e7f                 | LR__4336
24e7f     72 6E 64 3A 
24e83     20          | 	byte	"rnd: "
24e84     00          | 	byte	0
24e85                 | LR__4337
24e85     73 69 6E 3A 
24e89     20          | 	byte	"sin: "
24e8a     00          | 	byte	0
24e8b                 | LR__4338
24e8b     73 69 6E 3A 
24e8f     20          | 	byte	"sin: "
24e90     00          | 	byte	0
24e91                 | LR__4339
24e91     73 74 69 63 
24e95     6B 3A 20    | 	byte	"stick: "
24e98     00          | 	byte	0
24e99                 | LR__4340
24e99     73 74 72 69 
24e9d     67 3A 20    | 	byte	"strig: "
24ea0     00          | 	byte	0
24ea1                 | LR__4341
24ea1     67 65 74 70 
24ea5     69 78 65 6C 
24ea9     3A 20       | 	byte	"getpixel: "
24eab     00          | 	byte	0
24eac                 | LR__4342
24eac                 | 	byte	
24eac     00          | 	byte	0
24ead                 | LR__4343
24ead     2F 73 64 2F 
24eb1     62 61 73    | 	byte	"/sd/bas"
24eb4     00          | 	byte	0
24eb5                 | LR__4344
24eb5     57 6F 72 6B 
24eb9     69 6E 67 20 
24ebd     64 69 72 65 
24ec1     63 74 6F 72 
24ec5     79 3A 20    | 	byte	"Working directory: "
24ec8     00          | 	byte	0
24ec9                 | LR__4345
24ec9     2A          | 	byte	"*"
24eca     00          | 	byte	0
24ecb                 | LR__4346
24ecb                 | 	byte	
24ecb     00          | 	byte	0
24ecc                 | LR__4347
24ecc     5B 64 69 72 
24ed0     5D 20       | 	byte	"[dir] "
24ed2     00          | 	byte	0
24ed3                 | LR__4348
24ed3     2A          | 	byte	"*"
24ed4     00          | 	byte	0
24ed5                 | LR__4349
24ed5                 | 	byte	
24ed5     00          | 	byte	0
24ed6                 | LR__4350
24ed6     2D 2D 2D 2D 
24eda     2D 6D 6F 72 
24ede     65 2C 20 70 
24ee2     72 65 73 73 
24ee6     20 61 6E 79 
24eea     20 6B 65 79 | 	byte	"-----more, press any key"
24eee     00          | 	byte	0
24eef                 | LR__4351
24eef     20 20 20 20 
      ...             
24f07     20 20 20 20 
24f0b     20          | 	byte	"                             "
24f0c     00          | 	byte	0
24f0d                 | LR__4352
24f0d     2F          | 	byte	"/"
24f0e     00          | 	byte	0
24f0f                 | LR__4353
24f0f     2F 73 64 2F 
24f13     62 69 6E 2F | 	byte	"/sd/bin/"
24f17     00          | 	byte	0
24f18                 | LR__4354
24f18     53 79 73 74 
24f1c     65 6D 20 65 
24f20     72 72 6F 72 
24f24     20          | 	byte	"System error "
24f25     00          | 	byte	0
24f26                 | LR__4355
24f26     3A 20       | 	byte	": "
24f28     00          | 	byte	0
24f29                 | LR__4356
24f29                 | 	byte	
24f29     00          | 	byte	0
24f2a                 | LR__4357
24f2a     45 78 70 65 
24f2e     63 74 65 64 
24f32     20 6E 75 6D 
24f36     62 65 72 2C 
24f3a     20 67 6F 74 
24f3e     20 73 6F 6D 
24f42     65 74 68 69 
24f46     6E 67 20 65 
24f4a     6C 73 65 2E | 	byte	"Expected number, got something else."
24f4e     00          | 	byte	0
24f4f                 | LR__4358
24f4f     43 61 6E 6E 
24f53     6F 74 20 61 
24f57     64 64 20 61 
24f5b     20 6E 75 6D 
24f5f     62 65 72 20 
24f63     74 6F 20 61 
24f67     20 73 74 72 
24f6b     69 6E 67 2E | 	byte	"Cannot add a number to a string."
24f6f     00          | 	byte	0
24f70                 | LR__4359
24f70     43 61 6E 6E 
24f74     6F 74 20 73 
24f78     75 62 73 74 
24f7c     72 61 63 74 
24f80     20 73 74 72 
24f84     69 6E 67 73 
24f88     2E          | 	byte	"Cannot substract strings."
24f89     00          | 	byte	0
24f8a                 | LR__4360
24f8a     55 6E 6B 6E 
24f8e     6F 77 6E 20 
24f92     65 72 72 6F 
24f96     72 20 77 68 
24f9a     69 6C 65 20 
24f9e     61 64 64 69 
24fa2     6E 67 2E    | 	byte	"Unknown error while adding."
24fa5     00          | 	byte	0
24fa6                 | LR__4361
24fa6     55 6E 6B 6E 
24faa     6F 77 6E 20 
24fae     65 72 72 6F 
24fb2     72 20 77 68 
24fb6     69 6C 65 20 
24fba     73 75 62 73 
24fbe     74 72 61 63 
24fc2     74 69 6E 67 
24fc6     2E          | 	byte	"Unknown error while substracting."
24fc7     00          | 	byte	0
24fc8                 | LR__4362
24fc8     43 61 6E 6E 
24fcc     6F 74 20 64 
24fd0     6F 20 6C 6F 
24fd4     67 69 63 20 
24fd8     6F 70 65 72 
24fdc     61 74 69 6F 
24fe0     6E 20 6F 6E 
24fe4     20 73 74 72 
24fe8     69 6E 67 20 
24fec     6F 72 20 66 
24ff0     6C 6F 61 74 
24ff4     2E          | 	byte	"Cannot do logic operation on string or float."
24ff5     00          | 	byte	0
24ff6                 | LR__4363
24ff6     55 6E 6B 6E 
24ffa     6F 77 6E 20 
24ffe     65 72 72 6F 
25002     72 20 77 68 
25006     69 6C 65 20 
2500a     64 6F 69 6E 
2500e     67 20 6C 6F 
25012     67 69 63 20 
25016     6F 70 65 72 
2501a     61 74 69 6F 
2501e     6E 2E       | 	byte	"Unknown error while doing logic operation."
25020     00          | 	byte	0
25021                 | LR__4364
25021     43 61 6E 6E 
25025     6F 74 20 6D 
25029     75 6C 74 69 
2502d     70 6C 79 20 
25031     73 74 72 69 
25035     6E 67 73 2E | 	byte	"Cannot multiply strings."
25039     00          | 	byte	0
2503a                 | LR__4365
2503a     55 6E 6B 6E 
2503e     6F 77 6E 20 
25042     65 72 72 6F 
25046     72 20 77 68 
2504a     69 6C 65 20 
2504e     6D 75 6C 74 
25052     69 70 6C 79 
25056     69 6E 67 2E | 	byte	"Unknown error while multiplying."
2505a     00          | 	byte	0
2505b                 | LR__4366
2505b     43 61 6E 6E 
2505f     6F 74 20 64 
25063     69 76 69 64 
25067     65 20 73 74 
2506b     72 69 6E 67 
2506f     73 2E       | 	byte	"Cannot divide strings."
25071     00          | 	byte	0
25072                 | LR__4367
25072     55 6E 6B 6E 
25076     6F 77 6E 20 
2507a     65 72 72 6F 
2507e     72 20 77 68 
25082     69 6C 65 20 
25086     64 69 76 69 
2508a     64 69 6E 67 
2508e     2E          | 	byte	"Unknown error while dividing."
2508f     00          | 	byte	0
25090                 | LR__4368
25090     43 61 6E 6E 
25094     6F 74 20 63 
25098     6F 6D 70 75 
2509c     74 65 20 61 
250a0     20 70 6F 77 
250a4     65 72 20 6F 
250a8     66 20 61 20 
250ac     73 74 72 69 
250b0     6E 67 2E    | 	byte	"Cannot compute a power of a string."
250b3     00          | 	byte	0
250b4                 | LR__4369
250b4     55 6E 6B 6E 
250b8     6F 77 6E 20 
250bc     65 72 72 6F 
250c0     72 20 77 68 
250c4     69 6C 65 20 
250c8     63 6F 6D 70 
250cc     75 74 69 6E 
250d0     67 20 61 20 
250d4     70 6F 77 65 
250d8     72 2E       | 	byte	"Unknown error while computing a power."
250da     00          | 	byte	0
250db                 | LR__4370
250db     52 69 67 68 
250df     74 20 70 61 
250e3     72 65 6E 74 
250e7     68 65 73 69 
250eb     73 20 65 78 
250ef     70 65 63 74 
250f3     65 64 2E    | 	byte	"Right parenthesis expected."
250f6     00          | 	byte	0
250f7                 | LR__4371
250f7     45 78 70 65 
250fb     63 74 65 64 
250ff     20 73 74 72 
25103     69 6E 67 2E | 	byte	"Expected string."
25107     00          | 	byte	0
25108                 | LR__4372
25108     45 78 70 65 
2510c     63 74 65 64 
25110     20 66 6C 6F 
25114     61 74 2E    | 	byte	"Expected float."
25117     00          | 	byte	0
25118                 | LR__4373
25118     45 78 70 65 
2511c     63 74 65 64 
25120     20 75 6E 73 
25124     69 67 6E 65 
25128     64 20 69 6E 
2512c     74 65 67 65 
25130     72 2E       | 	byte	"Expected unsigned integer."
25132     00          | 	byte	0
25133                 | LR__4374
25133     45 78 70 65 
25137     63 74 65 64 
2513b     20 69 6E 74 
2513f     65 67 65 72 
25143     2E          | 	byte	"Expected integer."
25144     00          | 	byte	0
25145                 | LR__4375
25145     4E 6F 20 6D 
25149     6F 72 65 20 
2514d     76 61 72 69 
25151     61 62 6C 65 
25155     20 73 6C 6F 
25159     74 73 2E    | 	byte	"No more variable slots."
2515c     00          | 	byte	0
2515d                 | LR__4376
2515d     56 61 72 69 
25161     61 62 6C 65 
25165     20 6E 6F 74 
25169     20 66 6F 75 
2516d     6E 64 2E    | 	byte	"Variable not found."
25170     00          | 	byte	0
25171                 | LR__4377
25171     43 6F 6D 6D 
25175     61 20 65 78 
25179     70 65 63 74 
2517d     65 64 2E    | 	byte	"Comma expected."
25180     00          | 	byte	0
25181                 | LR__4378
25181     43 6F 6D 6D 
25185     61 20 6F 72 
25189     20 73 65 6D 
2518d     69 63 6F 6C 
25191     6F 6E 20 65 
25195     78 70 65 63 
25199     74 65 64 2E | 	byte	"Comma or semicolon expected."
2519d     00          | 	byte	0
2519e                 | LR__4379
2519e     55 6E 6B 6E 
251a2     6F 77 6E 20 
251a6     63 6F 6D 6D 
251aa     61 6E 64 2E | 	byte	"Unknown command."
251ae     00          | 	byte	0
251af                 | LR__4380
251af     53 74 61 63 
251b3     6B 20 75 6E 
251b7     64 65 72 66 
251bb     6C 6F 77 2E | 	byte	"Stack underflow."
251bf     00          | 	byte	0
251c0                 | LR__4381
251c0     43 61 6E 6E 
251c4     6F 74 20 65 
251c8     78 65 63 75 
251cc     74 65 20 67 
251d0     6F 74 6F 20 
251d4     69 6E 20 74 
251d8     68 65 20 69 
251dc     6D 6D 65 64 
251e0     69 61 74 65 
251e4     20 6D 6F 64 
251e8     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
251ea     00          | 	byte	0
251eb                 | LR__4382
251eb     43 61 6E 6E 
251ef     6F 74 20 6C 
251f3     6F 61 64 20 
251f7     66 72 6F 6D 
251fb     20 74 68 69 
251ff     73 20 66 69 
25203     6C 65 2E    | 	byte	"Cannot load from this file."
25206     00          | 	byte	0
25207                 | LR__4383
25207     54 68 65 20 
2520b     70 72 6F 67 
2520f     72 61 6D 20 
25213     69 73 20 65 
25217     6D 70 74 79 
2521b     2E          | 	byte	"The program is empty."
2521c     00          | 	byte	0
2521d                 | LR__4384
2521d     49 66 20 61 
25221     66 74 65 72 
25225     20 69 66 2E | 	byte	"If after if."
25229     00          | 	byte	0
2522a                 | LR__4385
2522a     45 6D 70 74 
2522e     79 20 65 78 
25232     70 72 65 73 
25236     73 69 6F 6E 
2523a     2E          | 	byte	"Empty expression."
2523b     00          | 	byte	0
2523c                 | LR__4386
2523c     53 74 72 69 
25240     6E 67 20 65 
25244     78 70 65 63 
25248     74 65 64 2E | 	byte	"String expected."
2524c     00          | 	byte	0
2524d                 | LR__4387
2524d     49 6E 74 65 
25251     72 70 72 65 
25255     74 65 72 20 
25259     69 6E 74 65 
2525d     72 6E 61 6C 
25261     20 65 72 72 
25265     6F 72 2E    | 	byte	"Interpreter internal error."
25268     00          | 	byte	0
25269                 | LR__4388
25269     45 78 70 65 
2526d     63 74 65 64 
25271     20 61 73 73 
25275     69 67 6E 2E | 	byte	"Expected assign."
25279     00          | 	byte	0
2527a                 | LR__4389
2527a     45 78 70 65 
2527e     63 74 65 64 
25282     20 27 74 6F 
25286     27 2E       | 	byte	"Expected 'to'."
25288     00          | 	byte	0
25289                 | LR__4390
25289     45 78 70 65 
2528d     63 74 65 64 
25291     20 69 6E 74 
25295     65 67 65 72 
25299     20 76 61 72 
2529d     69 61 62 6C 
252a1     65 2E       | 	byte	"Expected integer variable."
252a3     00          | 	byte	0
252a4                 | LR__4391
252a4     55 6E 69 6E 
252a8     69 74 69 61 
252ac     6C 69 7A 65 
252b0     64 20 76 61 
252b4     72 69 61 62 
252b8     6C 65 20 69 
252bc     6E 20 27 6E 
252c0     65 78 74 27 
252c4     2C 20 75 73 
252c8     65 20 27 66 
252cc     6F 72 27 20 
252d0     62 65 66 6F 
252d4     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
252d7     00          | 	byte	0
252d8                 | LR__4392
252d8     4E 6F 20 6D 
252dc     6F 72 65 20 
252e0     73 6C 6F 74 
252e4     73 20 66 6F 
252e8     72 20 27 66 
252ec     6F 72 27 2E | 	byte	"No more slots for 'for'."
252f0     00          | 	byte	0
252f1                 | LR__4393
252f1     27 4E 65 78 
252f5     74 27 20 64 
252f9     6F 65 73 6E 
252fd     27 74 20 6D 
25301     61 74 63 68 
25305     20 27 66 6F 
25309     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
2530c     00          | 	byte	0
2530d                 | LR__4394
2530d     27 47 6F 74 
25311     6F 27 20 74 
25315     61 72 67 65 
25319     74 20 6C 69 
2531d     6E 65 20 6E 
25321     6F 74 20 66 
25325     6F 75 6E 64 
25329     2E          | 	byte	"'Goto' target line not found."
2532a     00          | 	byte	0
2532b                 | LR__4395
2532b     42 61 64 20 
2532f     6E 75 6D 62 
25333     65 72 20 6F 
25337     66 20 70 61 
2533b     72 61 6D 65 
2533f     74 65 72 73 | 	byte	"Bad number of parameters"
25343     00          | 	byte	0
25344                 | LR__4396
25344     46 75 6E 63 
25348     74 69 6F 6E 
2534c     20 75 6E 64 
25350     65 66 69 6E 
25354     65 64 20 66 
25358     6F 72 20 73 
2535c     74 72 69 6E 
25360     67 73       | 	byte	"Function undefined for strings"
25362     00          | 	byte	0
25363                 | LR__4397
25363     42 61 64 20 
25367     70 61 72 61 
2536b     6D 65 74 65 
2536f     72 2E       | 	byte	"Bad parameter."
25371     00          | 	byte	0
25372                 | LR__4398
25372     43 61 6E 6E 
25376     6F 74 20 64 
2537a     65 63 6C 61 
2537e     72 65 20 61 
25382     6E 20 61 72 
25386     72 61 79 3A 
2538a     20 74 68 65 
2538e     20 76 61 72 
25392     69 61 62 6C 
25396     65 20 65 78 
2539a     69 73 74 73 
2539e     2E          | 	byte	"Cannot declare an array: the variable exists."
2539f     00          | 	byte	0
253a0                 | LR__4399
253a0     45 78 70 65 
253a4     63 74 65 64 
253a8     20 27 28 27 
253ac     2E          | 	byte	"Expected '('."
253ad     00          | 	byte	0
253ae                 | LR__4400
253ae     45 78 70 65 
253b2     63 74 65 64 
253b6     20 27 29 27 
253ba     20 6F 72 20 
253be     27 2C 27 2E | 	byte	"Expected ')' or ','."
253c2     00          | 	byte	0
253c3                 | LR__4401
253c3     4E 6F 20 6D 
253c7     6F 72 65 20 
253cb     74 68 61 6E 
253cf     20 33 20 64 
253d3     69 6D 65 6E 
253d7     73 69 6F 6E 
253db     73 20 73 75 
253df     70 70 6F 72 
253e3     74 65 64    | 	byte	"No more than 3 dimensions supported"
253e6     00          | 	byte	0
253e7                 | LR__4402
253e7     56 61 72 69 
253eb     61 62 6C 65 
253ef     20 6E 61 6D 
253f3     65 20 65 78 
253f7     70 65 63 74 
253fb     65 64       | 	byte	"Variable name expected"
253fd     00          | 	byte	0
253fe                 | LR__4403
253fe     54 79 70 65 
25402     20 6E 61 6D 
25406     65 20 65 78 
2540a     70 65 63 74 
2540e     65 64       | 	byte	"Type name expected"
25410     00          | 	byte	0
25411                 | LR__4404
25411     54 79 70 65 
25415     20 6E 6F 74 
25419     20 73 75 70 
2541d     70 6F 72 74 
25421     65 64 20 79 
25425     65 74       | 	byte	"Type not supported yet"
25427     00          | 	byte	0
25428                 | LR__4405
25428     45 72 72 6F 
2542c     72 20       | 	byte	"Error "
2542e     00          | 	byte	0
2542f                 | LR__4406
2542f     3A 20       | 	byte	": "
25431     00          | 	byte	0
25432                 | LR__4407
25432     2F 73 64    | 	byte	"/sd"
25435     00          | 	byte	0
25436                 | LR__4408
25436     2F 73 64 2F 
2543a     62 61 73    | 	byte	"/sd/bas"
2543d     00          | 	byte	0
2543e                 | LR__4409
2543e     2F 73 64 2F 
25442     62 61 73    | 	byte	"/sd/bas"
25445     00          | 	byte	0
25446                 | LR__4410
25446     20 42 41 53 
2544a     49 43 20 62 
2544e     79 74 65 73 
25452     20 66 72 65 
25456     65          | 	byte	" BASIC bytes free"
25457     00          | 	byte	0
25458                 | LR__4411
25458     52 65 61 64 
2545c     79          | 	byte	"Ready"
2545d     00          | 	byte	0
2545e                 | LR__4412
2545e     20          | 	byte	" "
2545f     00          | 	byte	0
25460                 | LR__4413
25460     20          | 	byte	" "
25461     00          | 	byte	0
25462                 | LR__4414
25462                 | 	byte	
25462     00          | 	byte	0
25463                 | LR__4415
25463                 | 	byte	
25463     00          | 	byte	0
25464                 | 	alignl
25464                 | _dat_
25464     00 00 00 00 
25468     00 00 00 00 
2546c     00 00 00 00 
25470     00 00 00 00 | 	byte	$00[16]
25474     61 41 17 0E 
25478     62 42 00 00 
2547c     63 43 19 10 
25480     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
25484     65 45 18 0F 
25488     66 46 00 00 
2548c     67 47 00 00 
25490     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
25494     69 49 00 00 
25498     6A 4A 00 00 
2549c     6B 4B 00 00 
254a0     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
254a4     6D 4D 00 00 
254a8     6E 4E 1A 11 
254ac     6F 4F 1E 15 
254b0     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
254b4     71 51 00 00 
254b8     72 52 00 00 
254bc     73 53 1B 12 
254c0     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
254c4     75 55 00 00 
254c8     76 56 00 00 
254cc     77 57 00 00 
254d0     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
254d4     79 59 00 00 
254d8     7A 5A 1D 14 
254dc     31 21 04 00 
254e0     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
254e4     33 23 06 00 
254e8     34 24 07 00 
254ec     35 25 08 00 
254f0     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
254f4     37 26 0A 00 
254f8     38 2A 0B 00 
254fc     39 28 0C 00 
25500     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
25504     8D 8D 00 00 
25508     9B 9B 00 00 
2550c     88 88 00 00 
25510     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
25514     20 20 00 00 
25518     2D 5F 00 00 
2551c     3D 2B 00 00 
25520     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
25524     5D 7D 00 00 
25528     5C 7C 00 00 
2552c     23 7E 00 00 
25530     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
25534     27 22 00 00 
25538     60 7E 03 00 
2553c     2C 3C 00 00 
25540     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
25544     2F 3F 00 00 
25548     B9 B9 00 00 
2554c     BA 00 00 00 
25550     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
25554     BC 00 00 00 
25558     BD 00 00 00 
2555c     BE 00 00 00 
25560     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
25564     C0 00 00 00 
25568     C1 00 00 00 
2556c     C2 00 00 00 
25570     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
25574     C4 00 00 00 
25578     C5 00 00 00 
2557c     C6 00 00 00 
25580     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
25584     C8 00 00 00 
25588     C9 00 00 00 
2558c     CA 00 00 00 
25590     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
25594     7F 7F 00 00 
25598     CC 00 00 00 
2559c     CD 00 00 00 
255a0     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
255a4     CF 00 00 00 
255a8     D0 00 00 00 
255ac     D1 00 00 00 
255b0     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
255b4     2F 2F 00 00 
255b8     2A 2A 00 00 
255bc     2D 2D 00 00 
255c0     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
255c4     8D 8D 00 00 
255c8     31 31 00 00 
255cc     32 32 00 00 
255d0     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
255d4     34 34 00 00 
255d8     35 35 00 00 
255dc     36 36 00 00 
255e0     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
255e4     38 38 00 00 
255e8     39 39 00 00 
255ec     30 30 00 00 
255f0     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
255f4     5C 7C 00 00 
255f8     00 00 00 00 
255fc     00 00 00 00 
25600     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
25604     00 00 00 00 
      ...             
2565c     00 00 00 00 
25660     00 00 00 00 | 	byte	$00[96]
25664     2B 00 A6 F2 
25668     24 A7 09 80 
2566c     5B 88 4D 89 
25670     80 88 A5 88 | atari_spl file "atari.spl"
25674     6D 88 B8 88 
25678     80 88 CB 88 
2567c     92 88 A5 88 
25680     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
25684     A5 88 CA 88 
25688     A6 88 DD 88 
2568c     B8 88 AB 89 
25690     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
25694     C8 AD C6 F1 
25698     91 06 B6 FF 
2569c     13 00 4A 00 
256a0     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
256a4     5D 00 5E 00 
256a8     5D 00 5E 00 
256ac     5E 00 5D 00 
256b0     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
256b4     38 00 83 00 
256b8     25 00 83 00 
256bc     C3 FE D1 04 
256c0     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
256c4     48 88 38 85 
256c8     41 8A CB 88 
256cc     28 89 B8 88 
256d0     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
256d4     15 89 03 89 
256d8     02 89 15 89 
256dc     16 89 15 89 
256e0     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
256e4     15 89 3A 89 
256e8     72 89 E3 89 
256ec     52 83 AD 97 
256f0     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
256f4     0C 02 B6 FF 
256f8     E1 00 A8 00 
256fc     F3 00 A8 00 
25700     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
25704     CE 00 CD 00 
25708     CD 00 BA 00 
2570c     E1 00 BB 00 
25710     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
25714     DF 00 C9 FF 
25718     E6 01 B6 06 
2571c     EE DD 8D 98 
25720     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
25724     97 89 73 89 
25728     3B 89 60 89 
2572c     60 89 60 89 
25730     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
25734     73 89 72 89 
25738     85 89 73 89 
2573c     AA 89 60 89 
25740     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
25744     E8 8A 18 86 
25748     92 88 A5 C2 
2574c     E0 00 C3 05 
25750     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
25754     F2 00 64 01 
25758     06 01 3E 01 
2575c     2B 01 2B 01 
25760     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
25764     2B 01 2A 01 
25768     2B 01 2B 01 
2576c     2B 01 18 01 
25770     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
25774     39 07 61 F3 
25778     C0 AF 37 85 
2577c     0F 88 8B 8A 
25780     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
25784     AB 89 D0 89 
25788     AB 89 D0 89 
2578c     D0 89 CF 89 
25790     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
25794     D0 89 F5 89 
25798     BD 89 08 8A 
2579c     CF 89 E8 8A 
257a0     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
257a4     53 B3 0D F8 
257a8     F4 07 38 00 
257ac     63 01 63 01 
257b0     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
257b4     88 01 88 01 
257b8     76 01 88 01 
257bc     88 01 89 01 
257c0     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
257c4     75 01 AE 01 
257c8     76 01 88 01 
257cc     4A 00 46 06 
257d0     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
257d4     08 8A 9A 86 
257d8     33 8B 08 8A 
257dc     2D 8A F5 89 
257e0     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
257e4     2D 8A 2D 8A 
257e8     2E 8A 1B 8A 
257ec     40 8A 2D 8A 
257f0     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
257f4     2E 8A 79 8A 
257f8     66 8A C8 8B 
257fc     72 82 2B 97 
25800     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
25804     1D 02 05 01 
25808     F8 01 C0 01 
2580c     0B 02 C0 01 
25810     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
25814     F9 01 D3 01 
25818     F8 01 D3 01 
2581c     F8 01 D2 01 
25820     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
25824     E6 01 2B 01 
25828     8E 02 5F 07 
2582c     F7 E2 ED 9C 
25830     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
25834     E8 8A 78 8A 
25838     78 8A 65 8A 
2583c     8B 8A 78 8A 
25840     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
25844     8B 8A 9D 8A 
25848     9D 8A 8B 8A 
2584c     C2 8A 78 8A 
25850     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
25854     70 8C 18 86 
25858     8B 8A 23 C9 
2585c     CB 03 C4 05 
25860     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
25864     0B 02 7B 02 
25868     1E 02 55 02 
2586c     30 02 43 02 
25870     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
25874     43 02 44 02 
25878     43 02 30 02 
2587c     68 02 31 02 
25880     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
25884     07 08 3F F7 
25888     73 B2 13 85 
2588c     15 89 ED 8B 
25890     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
25894     B0 8A FB 8A 
25898     D5 8A FA 8A 
2589c     E8 8A FB 8A 
258a0     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
258a4     E8 8A 21 8B 
258a8     E7 8A 33 8B 
258ac     E8 8A 26 8C 
258b0     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
258b4     8D B0 27 F6 
258b8     9C 08 AD 01 
258bc     7B 02 8D 02 
258c0     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
258c4     A1 02 A0 02 
258c8     A1 02 A0 02 
258cc     A0 02 A0 02 
258d0     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
258d4     7B 02 D8 02 
258d8     7B 02 C6 02 
258dc     3E 01 C3 05 
258e0     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
258e4     00 8C 2A 86 
258e8     E0 8C FA 8A 
258ec     6A 8B FB 8A 
258f0     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
258f4     45 8B 45 8B 
258f8     45 8B 6B 8B 
258fc     46 8B 59 8B 
25900     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
25904     6B 8B 6B 8B 
25908     6B 8B 6B 8B 
2590c     7D 8B 7D 8B 
25910     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
25914     90 8B 91 8B 
25918     90 8B 90 8B 
2591c     A3 8B A3 8B 
25920     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
25924     B5 8B B6 8B 
25928     B5 8B B5 8B 
2592c     B6 8B C8 8B 
25930     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
25934     C8 8B DA 8B 
25938     DB 8B DB 8B 
2593c     DB 8B DC 8B 
25940     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
25944     EE 8B EE 8B 
25948     00 8C 01 8C 
2594c     00 8C 01 8C 
25950     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
25954     12 8C 13 8C 
25958     13 8C 26 8C 
2595c     26 8C 26 8C 
25960     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
25964     38 8C 38 8C 
25968     38 8C 38 8C 
2596c     4B 8C 4B 8C 
25970     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
25974     5E 8C 5E 8C 
25978     5E 8C 5E 8C 
2597c     70 8C 70 8C 
25980     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
25984     70 8C 83 8C 
25988     83 8C 83 8C 
2598c     83 8C 96 8C 
25990     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
25994     95 8C A9 8C 
25998     A9 8C A8 8C 
2599c     A8 8C A8 8C 
259a0     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
259a4     BB 8C BB 8C 
259a8     BB 8C CE 8C 
259ac     CE 8C CE 8C 
259b0     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
259b4     E0 8C E1 8C 
259b8     E1 8C E0 8C 
259bc     F4 8C F2 8C 
259c0     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
259c4     05 8D 05 8D 
259c8     06 8D 06 8D 
259cc     19 8D 19 8D 
259d0     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
259d4     18 8D 2B 8D 
259d8     2B 8D 2B 8D 
259dc     2A 8D 3E 8D 
259e0     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
259e4     3E 8D 51 8D 
259e8     50 8D 50 8D 
259ec     50 8D 51 8D 
259f0     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
259f4     63 8D 64 8D 
259f8     76 8D 75 8D 
259fc     75 8D 76 8D 
25a00     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
25a04     88 8D 88 8D 
25a08     89 8D 9B 8D 
25a0c     9A 8D 9B 8D 
25a10     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
25a14     AD 8D AE 8D 
25a18     AD 8D AE 8D 
25a1c     C1 8D C1 8D 
25a20     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
25a24     D3 8D D3 8D 
25a28     D3 8D D3 8D 
25a2c     D3 8D E6 8D 
25a30     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
25a34     E6 8D E6 8D 
25a38     F9 8D F9 8D 
25a3c     F9 8D F8 8D 
25a40     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
25a44     0B 8E 0B 8E 
25a48     1D 8E 1D 8E 
25a4c     1E 8E 1E 8E 
25a50     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
25a54     31 8E 31 8E 
25a58     31 8E 42 8E 
25a5c     43 8E 43 8E 
25a60     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
25a64     56 8E 56 8E 
25a68     55 8E 56 8E 
25a6c     68 8E 69 8E 
25a70     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
25a74     69 8E 7B 8E 
25a78     7C 8E 7B 8E 
25a7c     7B 8E 8D 8E 
25a80     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
25a84     8D 8E A1 8E 
25a88     A0 8E A1 8E 
25a8c     A1 8E A0 8E 
25a90     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
25a94     B3 8E B3 8E 
25a98     C6 8E C5 8E 
25a9c     C6 8E C6 8E 
25aa0     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
25aa4     D8 8E D9 8E 
25aa8     D8 8E EC 8E 
25aac     EB 8E EC 8E 
25ab0     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
25ab4     FE 8E FE 8E 
25ab8     FE 8E FE 8E 
25abc     10 8F 10 8F 
25ac0     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
25ac4     11 8F 23 8F 
25ac8     24 8F 23 8F 
25acc     24 8F 37 8F 
25ad0     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
25ad4     36 8F 36 8F 
25ad8     48 8F 49 8F 
25adc     49 8F 49 8F 
25ae0     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
25ae4     5B 8F 5C 8F 
25ae8     5B 8F 6E 8F 
25aec     6E 8F 6E 8F 
25af0     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
25af4     81 8F 81 8F 
25af8     81 8F 81 8F 
25afc     93 8F 93 8F 
25b00     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
25b04     93 8F A6 8F 
25b08     A6 8F A6 8F 
25b0c     A6 8F B9 8F 
25b10     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
25b14     B9 8F B9 8F 
25b18     CC 8F CB 8F 
25b1c     CB 8F CC 8F 
25b20     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
25b24     DF 8F DE 8F 
25b28     DE 8F F1 8F 
25b2c     F1 8F F1 8F 
25b30     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
25b34     03 90 04 90 
25b38     04 90 04 90 
25b3c     16 90 17 90 
25b40     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
25b44     29 90 28 90 
25b48     29 90 28 90 
25b4c     29 90 3C 90 
25b50     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
25b54     3C 90 4F 90 
25b58     4E 90 4E 90 
25b5c     4E 90 4E 90 
25b60     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
25b64     61 90 61 90 
25b68     73 90 74 90 
25b6c     74 90 74 90 
25b70     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
25b74     87 90 86 90 
25b78     87 90 86 90 
25b7c     99 90 99 90 
25b80     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
25b84     AB 90 AB 90 
25b88     AC 90 AB 90 
25b8c     AB 90 BF 90 
25b90     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
25b94     BE 90 D1 90 
25b98     D0 90 D1 90 
25b9c     D1 90 D1 90 
25ba0     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
25ba4     E3 90 E4 90 
25ba8     F6 90 F6 90 
25bac     F6 90 F6 90 
25bb0     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
25bb4     09 91 0A 91 
25bb8     0A 91 1C 91 
25bbc     1C 91 1C 91 
25bc0     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
25bc4     2F 91 2E 91 
25bc8     2F 91 2F 91 
25bcc     2E 91 41 91 
25bd0     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
25bd4     41 91 53 91 
25bd8     54 91 54 91 
25bdc     53 91 54 91 
25be0     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
25be4     67 91 67 91 
25be8     79 91 7A 91 
25bec     79 91 78 91 
25bf0     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
25bf4     8C 91 8B 91 
25bf8     8C 91 8C 91 
25bfc     9E 91 9E 91 
25c00     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
25c04     B1 91 B1 91 
25c08     B2 91 B1 91 
25c0c     B1 91 C4 91 
25c10     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
25c14     C4 91 D6 91 
25c18     D7 91 D7 91 
25c1c     D7 91 D6 91 
25c20     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
25c24     EA 91 EA 91 
25c28     EA 91 FC 91 
25c2c     FC 91 FB 91 
25c30     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
25c34     0E 92 0F 92 
25c38     0F 92 0E 92 
25c3c     21 92 21 92 
25c40     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
25c44     21 92 34 92 
25c48     33 92 34 92 
25c4c     34 92 47 92 
25c50     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
25c54     46 92 47 92 
25c58     59 92 59 92 
25c5c     59 92 59 92 
25c60     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
25c64     6C 92 6C 92 
25c68     6B 92 7E 92 
25c6c     7E 92 7E 92 
25c70     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
25c74     92 92 91 92 
25c78     91 92 90 92 
25c7c     91 92 A4 92 
25c80     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
25c84     A3 92 B6 92 
25c88     B6 92 B7 92 
25c8c     B7 92 B6 92 
25c90     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
25c94     CA 92 C9 92 
25c98     CA 92 DC 92 
25c9c     DC 92 DC 92 
25ca0     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
25ca4     EF 92 EF 92 
25ca8     EF 92 EF 92 
25cac     01 93 01 93 
25cb0     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
25cb4     15 93 14 93 
25cb8     14 93 14 93 
25cbc     14 93 27 93 
25cc0     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
25cc4     27 93 39 93 
25cc8     3A 93 39 93 
25ccc     39 93 39 93 
25cd0     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
25cd4     4B 93 4C 93 
25cd8     5F 93 5F 93 
25cdc     5F 93 5E 93 
25ce0     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
25ce4     5F 93 84 93 
25ce8     4C 93 96 93 
25cec     5F 93 AE 94 
25cf0     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
25cf4     7B C1 00 00 | 	byte	$7b, $c1, $00, $00
25cf8     7A D7 00 80 
25cfc     87 8A 48 8F 
25d00     EC 8C 76 8D 
25d04     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
25d08     3C 8D 82 8D 
25d0c     42 8D 88 8D 
25d10     8C 8D 8E 8D 
25d14     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
25d18     97 8D DE 8D 
25d1c     E1 8D F1 8E 
25d20     D8 8C A3 83 
25d24     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
25d28     65 71 C9 65 
25d2c     FC 64 C4 65 
25d30     C1 65 BF 65 
25d34     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
25d38     B6 65 B4 65 
25d3c     B2 65 AE 65 
25d40     AC 65 ED 65 
25d44     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
25d48     5E 65 25 66 
25d4c     FA 62 23 6B 
25d50     B5 6C 61 0A 
25d54     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
25d58     5D 90 BE 8D 
25d5c     47 8E C3 8D 
25d60     09 8E C9 8D 
25d64     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
25d68     15 8E 19 8E 
25d6c     1B 8E 62 8E 
25d70     64 8E 68 8E 
25d74     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
25d78     B5 8E 4C 90 
25d7c     FA 84 3C 9D 
25d80     98 13 79 6D 
25d84     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
25d88     D9 66 50 66 
25d8c     D4 66 4B 66 
25d90     8C 66 46 66 
25d94     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
25d98     81 66 3A 66 
25d9c     7C 66 36 66 
25da0     76 66 30 66 
25da4     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
25da8     6B 66 88 72 
25dac     BF 37 E7 B7 
25db0     75 83 8B 8E 
25db4     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
25db8     94 8E 96 8E 
25dbc     DD 8E 9C 8E 
25dc0     E2 8E A2 8E 
25dc4     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
25dc8     EE 8E AE 8E 
25dcc     38 8F B5 8E 
25dd0     3F 8F FD 8E 
25dd4     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
25dd8     A5 87 1E E3 
25ddc     6D 5D FA 71 
25de0     41 64 25 67 
25de4     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
25de8     D9 66 1A 67 
25dec     18 67 15 67 
25df0     12 67 0F 67 
25df4     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
25df8     07 67 C0 66 
25dfc     01 67 BC 66 
25e00     B8 66 DE 64 
25e04     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
25e08     43 E5 1F 8B 
25e0c     14 8A F1 90 
25e10     1C 8F 63 8F 
25e14     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
25e18     29 8F 6E 8F 
25e1c     72 8F 75 8F 
25e20     34 8F BE 8F 
25e24     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
25e28     84 8F 87 8F 
25e2c     CC 8F 56 90 
25e30     67 91 49 80 
25e34     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
25e38     46 77 A6 66 
25e3c     E8 66 B0 67 
25e40     AD 67 ED 67 
25e44     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
25e48     A2 67 E3 67 
25e4c     9D 67 9A 67 
25e50     98 67 94 67 
25e54     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
25e58     49 67 CD 67 
25e5c     28 65 5F 6E 
25e60     82 67 3A 01 
25e64     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
25e68     C2 91 A9 8F 
25e6c     EF 8F AE 8F 
25e70     F4 8F B5 8F 
25e74     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
25e78     01 90 03 90 
25e7c     07 90 09 90 
25e80     0C 90 53 90 
25e84     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
25e88     18 90 44 93 
25e8c     85 84 D6 9D 
25e90     87 1F 2F 75 
25e94     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
25e98     C4 68 F6 67 
25e9c     BE 68 F1 67 
25ea0     76 68 2E 68 
25ea4     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
25ea8     27 68 24 68 
25eac     64 68 1E 68 
25eb0     5F 68 19 68 
25eb4     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
25eb8     DC 68 56 72 
25ebc     7E 36 C2 B8 
25ec0     D7 84 73 90 
25ec4     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
25ec8     7B 90 7F 90 
25ecc     82 90 84 90 
25ed0     CB 90 8B 90 
25ed4     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
25ed8     D7 90 96 90 
25edc     20 91 59 90 
25ee0     25 91 A2 90 
25ee4     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
25ee8     D0 89 40 EE 
25eec     12 64 C4 71 
25ef0     29 66 0C 69 
25ef4     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
25ef8     C0 68 02 69 
25efc     FE 68 FB 68 
25f00     F9 68 F6 68 
25f04     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
25f08     EE 68 A8 68 
25f0c     2C 69 5F 68 
25f10     E2 68 81 66 
25f14     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
25f18     1E EB A6 8A 
25f1c     73 8B 5E 93 
25f20     7B 90 48 91 
25f24     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
25f28     0D 91 11 91 
25f2c     14 91 16 91 
25f30     5C 91 1C 91 
25f34     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
25f38     68 91 AF 91 
25f3c     2A 91 B5 91 
25f40     75 91 1A 94 
25f44     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
25f48     70 0E CB 6C 
25f4c     5D 6E C4 67 
25f50     99 69 54 69 
25f54     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
25f58     D2 69 49 69 
25f5c     89 69 86 69 
25f60     40 69 C4 69 
25f64     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
25f68     35 69 76 69 
25f6c     58 67 EB 6D 
25f70     E9 6D 89 0F 
25f74     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
25f78     33 94 94 91 
25f7c     D9 91 56 91 
25f80     E0 91 9F 91 
25f84     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
25f88     EC 91 EE 91 
25f8c     F1 91 F4 91 
25f90     F7 91 3D 92 
25f94     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
25f98     46 92 21 94 
25f9c     11 89 A4 9D 
25fa0     FD 0E 8F 6C 
25fa4     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
25fa8     28 6A E1 69 
25fac     65 6A 1F 6A 
25fb0     5F 6A 1A 6A 
25fb4     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
25fb8     54 6A 0F 6A 
25fbc     4F 6A 09 6A 
25fc0     06 6A 03 6A 
25fc4     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
25fc8     23 68 69 77 
25fcc     3A 4D 38 CA 
25fd0     38 86 4E 91 
25fd4     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
25fd8     64 92 24 92 
25fdc     6A 92 2A 92 
25fe0     70 92 30 92 
25fe4     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
25fe8     7B 92 7E 92 
25fec     C5 92 84 92 
25ff0     CB 92 8A 92 
25ff4     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
25ff8     4D 8D F9 E2 
25ffc     97 59 FE 74 
26000     DB 68 6D 6A 
26004     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
26008     A8 6A A5 6A 
2600c     A3 6A 9F 6A 
26010     9D 6A 9B 6A 
26014     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
26018     D6 6A 8F 6A 
2601c     CF 6A 46 6A 
26020     CA 6A E1 67 
26024     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
26028     D3 F7 15 92 
2602c     90 8C BF 94 
26030     A6 92 EB 92 
26034     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
26038     B1 92 F7 92 
2603c     FA 92 FD 92 
26040     00 93 02 93 
26044     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
26048     4F 93 52 93 
2604c     54 93 22 94 
26050     5A 93 8F 88 
26054     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
26058     1C 77 07 6C 
2605c     E8 69 7A 6B 
26060     34 6B 75 6B 
26064     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
26068     29 6B 26 6B 
2606c     24 6B 21 6B 
26070     1D 6B 5E 6B 
26074     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
26078     12 6B 52 6B 
2607c     34 69 34 6E 
26080     BA 73 A4 24 
26084     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
26088     7A 94 B3 93 
2608c     72 93 31 93 
26090     78 93 7A 93 
26094     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
26098     83 93 86 93 
2609c     89 93 D0 93 
260a0     D2 93 D5 93 
260a4     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
260a8     DD 93 40 96 
260ac     30 8B 99 9C 
260b0     52 10 94 71 
260b4     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
260b8     46 6C 79 6B 
260bc     40 6C B7 6B 
260c0     F7 6B B1 6B 
260c4     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
260c8     EC 6B A5 6B 
260cc     A2 6B 9F 6B 
260d0     9D 6B 9A 6B 
260d4     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
260d8     C8 6A E4 76 
260dc     20 4B F9 CE 
260e0     2E 8A 1A 92 
260e4     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
260e8     FB 93 BA 93 
260ec     01 94 03 94 
260f0     4A 94 09 94 
260f4     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
260f8     55 94 14 94 
260fc     9E 94 1A 94 
26100     61 94 20 94 
26104     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
26108     3E 87 E5 CD 
2610c     5F 50 6C 78 
26110     B5 6A 04 6C 
26114     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
26118     83 6C 7F 6C 
2611c     7C 6C 36 6C 
26120     76 6C 74 6C 
26124     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
26128     6B 6C 25 6C 
2612c     66 6C 1F 6C 
26130     1D 6C 41 6A 
26134     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
26138     BA FA FC 94 
2613c     5B 8D 97 96 
26140     3B 94 C5 94 
26144     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
26148     89 94 8C 94 
2614c     8F 94 92 94 
26150     94 94 DB 94 
26154     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
26158     E4 94 E7 94 
2615c     2D 95 74 95 
26160     C8 96 15 89 
26164     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
26168     CB 75 31 6F 
2616c     7E 6B 10 6D 
26170     C9 6C 0A 6D 
26174     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
26178     BD 6C FF 6C 
2617c     FB 6C F9 6C 
26180     B2 6C F3 6C 
26184     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
26188     A7 6C E8 6C 
2618c     0D 6B 85 6F 
26190     C7 74 10 28 
26194     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
26198     96 96 47 95 
2619c     06 95 0A 95 
261a0     0C 95 0F 95 
261a4     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
261a8     17 95 5E 95 
261ac     61 95 63 95 
261b0     22 95 AC 95 
261b4     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
261b8     72 95 17 98 
261bc     59 8E 01 96 
261c0     CF FC 5A 68 
261c4     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
261c8     96 6D 50 6D 
261cc     D5 6D 4A 6D 
261d0     8C 6D 89 6D 
261d4     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
261d8     80 6D 3A 6D 
261dc     7A 6D 77 6D 
261e0     75 6D 71 6D 
261e4     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
261e8     18 6C BC 78 
261ec     9A 4F 7E CF 
261f0     1F 89 F1 93 
261f4     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
261f8     D2 95 4E 95 
261fc     D7 95 53 95 
26200     DD 95 E0 95 
26204     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
26208     A5 95 EB 95 
2620c     EE 95 F0 95 
26210     37 96 B3 95 
26214     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
26218     1A 98 D5 8D 
2621c     C5 9F CD 0F 
26220     0F 71 F3 73 
26224     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
26228     D9 6D 5E 6E 
2622c     D3 6D 58 6E 
26230     12 6E 0F 6E 
26234     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
26238     49 6E BF 6D 
2623c     87 6E 76 6D 
26240     81 6E 11 6B 
26244     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
26248     3F 09 44 95 
2624c     E5 8D 3F 99 
26250     D4 95 A2 96 
26254     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
26258     23 96 69 96 
2625c     6B 96 6E 96 
26260     71 96 74 96 
26264     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
26268     BF 96 3C 96 
2626c     C6 96 C8 96 
26270     A3 98 51 8D 
26274     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
26278     CF 75 29 73 
2627c     90 6C EC 6E 
26280     62 6E E7 6E 
26284     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
26288     9A 6E 98 6E 
2628c     95 6E 91 6E 
26290     8E 6E CF 6E 
26294     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
26298     40 6E C3 6E 
2629c     E8 6C 45 6F 
262a0     A5 7B C9 35 
262a4     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
262a8     2D 98 23 97 
262ac     E1 96 A0 96 
262b0     A4 96 EA 96 
262b4     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
262b8     AF 96 F4 96 
262bc     F8 96 3E 97 
262c0     FD 96 43 97 
262c4     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
262c8     08 97 6B 99 
262cc     D6 92 88 91 
262d0     D8 EE 84 66 
262d4     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
262d8     2E 6F E7 6E 
262dc     6C 6F 24 6F 
262e0     21 6F 1F 6F 
262e4     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
262e8     17 6F 13 6F 
262ec     54 6F 0E 6F 
262f0     0B 6F 4B 6F 
262f4     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
262f8     27 6D 1C 7B 
262fc     19 59 9F DB 
26300     66 8E BC 94 
26304     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
26308     67 97 26 97 
2630c     6D 97 2B 97 
26310     72 97 32 97 
26314     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
26318     C1 97 7F 97 
2631c     C6 97 85 97 
26320     CB 97 CE 97 
26324     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
26328     EC 8A C4 C6 
2632c     68 4C F4 7D 
26330     63 6E E8 6E 
26334     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
26338     ED 6F A7 6F 
2633c     E7 6F A0 6F 
26340     E1 6F 9B 6F 
26344     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
26348     D5 6F 8F 6F 
2634c     CE 6F 45 6F 
26350     86 6F 68 6D 
26354     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
26358     C0 13 AD A2 
2635c     A7 8E 79 99 
26360     E6 97 E8 97 
26364     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
26368     F1 97 F3 97 
2636c     F6 97 F9 97 
26370     FB 97 FE 97 
26374     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
26378     4A 98 0A 98 
2637c     93 98 0F 98 
26380     7F 9B BF 8C 
26384     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
26388     91 7B 62 73 
2638c     1A 6E B9 70 
26390     EB 6F B3 70 
26394     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
26398     25 70 20 70 
2639c     1E 70 1B 70 
263a0     18 70 15 70 
263a4     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
263a8     0D 70 09 70 
263ac     07 70 03 70 
263b0     01 70 FD 6F 
263b4     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
263b8     F6 6F F2 6F 
263bc     EF 6F EC 6F 
263c0     2C 70 E6 6F 
263c4     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
263c8     DD 6F 97 6F 
263cc     D7 6F 84 6E 
263d0     8F 6F 3F 7D 
263d4     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
263d6     01 00 00 00 
263da     00 00 00 00 
263de     00 00 00 00 
263e2     00 00 00 00 | mouse  file "mouse2.def"
263e6     00 00 00 00 
263ea     00 00 00 00 
263ee     00 00 00 00 
263f2     00 00 00 00 | 	byte	$00[16]
263f6     01 01 00 00 
263fa     00 00 00 00 
263fe     00 00 00 00 
26402     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26406     00 00 00 00 
2640a     00 00 00 00 
2640e     00 00 00 00 
26412     00 00 00 00 | 	byte	$00[16]
26416     01 0D 01 00 
2641a     00 00 00 00 
2641e     00 00 00 00 
26422     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26426     00 00 00 00 
2642a     00 00 00 00 
2642e     00 00 00 00 
26432     00 00 00 00 | 	byte	$00[16]
26436     01 0D 0D 01 
2643a     00 00 00 00 
2643e     00 00 00 00 
26442     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26446     00 00 00 00 
2644a     00 00 00 00 
2644e     00 00 00 00 
26452     00 00 00 00 | 	byte	$00[16]
26456     01 0D 0D 0D 
2645a     01 00 00 00 
2645e     00 00 00 00 
26462     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26466     00 00 00 00 
2646a     00 00 00 00 
2646e     00 00 00 00 
26472     00 00 00 00 | 	byte	$00[16]
26476     01 0D 0D 0D 
2647a     0D 01 00 00 
2647e     00 00 00 00 
26482     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26486     00 00 00 00 
2648a     00 00 00 00 
2648e     00 00 00 00 
26492     00 00 00 00 | 	byte	$00[16]
26496     01 0D 0D 0D 
2649a     0D 0D 01 00 
2649e     00 00 00 00 
264a2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
264a6     00 00 00 00 
264aa     00 00 00 00 
264ae     00 00 00 00 
264b2     00 00 00 00 | 	byte	$00[16]
264b6     01 0D 0D 0D 
264ba     0D 0D 0D 01 
264be     00 00 00 00 
264c2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
264c6     00 00 00 00 
264ca     00 00 00 00 
264ce     00 00 00 00 
264d2     00 00 00 00 | 	byte	$00[16]
264d6     01 0D 0D 0D 
264da     0D 0D 0D 0C 
264de     01 00 00 00 
264e2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
264e6     00 00 00 00 
264ea     00 00 00 00 
264ee     00 00 00 00 
264f2     00 00 00 00 | 	byte	$00[16]
264f6     01 0D 0D 0D 
264fa     0D 0D 0D 0D 
264fe     0C 01 00 00 
26502     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
26506     00 00 00 00 
2650a     00 00 00 00 
2650e     00 00 00 00 
26512     00 00 00 00 | 	byte	$00[16]
26516     01 0D 0D 0D 
2651a     0D 0D 0D 0D 
2651e     0D 0C 01 00 
26522     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
26526     00 00 00 00 
2652a     00 00 00 00 
2652e     00 00 00 00 
26532     00 00 00 00 | 	byte	$00[16]
26536     01 0D 0D 0D 
2653a     0D 0D 0D 0D 
2653e     0D 0D 0B 01 
26542     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
26546     00 00 00 00 
2654a     00 00 00 00 
2654e     00 00 00 00 
26552     00 00 00 00 | 	byte	$00[16]
26556     01 0D 0D 0D 
2655a     0C 0D 0D 03 
2655e     01 01 01 01 
26562     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
26566     00 00 00 00 
2656a     00 00 00 00 
2656e     00 00 00 00 
26572     00 00 00 00 | 	byte	$00[16]
26576     01 0D 0D 0C 
2657a     01 09 0D 03 
2657e     00 00 00 00 
26582     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
26586     00 00 00 00 
2658a     00 00 00 00 
2658e     00 00 00 00 
26592     00 00 00 00 | 	byte	$00[16]
26596     01 0D 0C 01 
2659a     00 01 0D 0B 
2659e     01 00 00 00 
265a2     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
265a6     00 00 00 00 
265aa     00 00 00 00 
265ae     00 00 00 00 
265b2     00 00 00 00 | 	byte	$00[16]
265b6     01 0C 01 00 
265ba     00 01 0A 0D 
265be     01 00 00 00 
265c2     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
265c6     00 00 00 00 
265ca     00 00 00 00 
265ce     00 00 00 00 
265d2     00 00 00 00 | 	byte	$00[16]
265d6     01 01 00 00 
265da     00 00 01 0D 
265de     0B 01 00 00 
265e2     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
265e6     00 00 00 00 
265ea     00 00 00 00 
265ee     00 00 00 00 
265f2     00 00 00 00 
265f6     00 00 00 00 
265fa     00 00       | 	byte	$00[22]
265fc     01 0B 0D 01 
26600     00 00 00 00 
26604     00 00 00 00 
26608     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2660c     00 00 00 00 
26610     00 00 00 00 
26614     00 00 00 00 
26618     00 00 00 00 
2661c     00          | 	byte	$00[17]
2661d     01 01 00 00 
26621     00 00 00 00 
26625     00 00 00 00 
26629     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2662d     00 00 00 00 
      ...             
267d1     00 00 00 00 
267d5     00          | 	byte	$00[425]
267d6                 | 
267d6     00 00       |              	org
267d8 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
267dc 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
267e0 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
267e4 003             | 
267e4 003 00 30 04 F6 |                 mov     psramaddr,#0
267e8 004             | 
267e8 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
267ec 005 20 00 00 FF 
267f0 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
267f4 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
267f8 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
267fc 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
26800 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
26804 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
26808 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
2680c 00d             | 
2680c 00d 20 00 00 FF 
26810 00e 00 30 04 F1 |                 add 	psramaddr,##16384
26814 00f E0 03 00 FF 
26818 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
2681c 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
26820 012             | 
26820 012             |                 
26820 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
26824 013             |     
26824 013 01 2C 60 FD |                 cogid 	t11				' get id
26828 014 00 00 EC FC |                 coginit #0,#0				' start the new program
2682c 015 03 2C 60 FD |                 cogstop t11				' stop the loader
26830 016             | 
26830 016 00 00 00 00 | t11 		long 	0
26834 017 00 FF 07 00 | mailbox 	long 	$7FF00
26838 018 00 00 00 00 | psramaddr 	long 	0
2683c 019 00 00 00 00 | pslockval	long 	0
26840 01a 00 00 00 00 | cmd             long    0
26844 01b 00 00 00 00 | buf1            long    0
26848 01c 00 40 00 00 | buf2            long    16384
2684c 01d 50 68 02 00 | 	long	@@@_dat_ + 5100
26850 01e 50 32 20 52 
26854 01f 65 74 72 6F 
26858 020 6D 61 63 68 
2685c 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
26860 022 42 41 53 49 
26864 023 43 20 76 65 
26868 024 72 73 69 6F 
2686c 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
26870 026 32 33 61 00 | 	byte	$32, $33, $61, $00
26874 027             | 	alignl
26874 027             | _hg010b_spin2_dat_
26874 027             | 
26874 027 00 00 00 00 
26878 028 00 00 00 00 
2687c 029 00 00 00 00 
26880 02a 00 00 00 00 
26884 02b 00 00 00    | vga_font       file "vgafont.def"
26887 02b 7E 81 A5 81 
2688b 02c 81 BD 99 81 
2688f 02d 81 7E 00 00 
26893 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
26897 02f 7E FF DB FF 
2689b 030 FF C3 E7 FF 
2689f 031 FF 7E 00 00 
268a3 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
268a7 033 00 36 7F 7F 
268ab 034 7F 7F 3E 1C 
268af 035 08 00 00 00 
268b3 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
268b7 037 00 08 1C 3E 
268bb 038 7F 3E 1C 08 
268bf 039 00 00 00 00 
268c3 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
268c7 03b 18 3C 3C E7 
268cb 03c E7 E7 18 18 
268cf 03d 3C 00 00 00 
268d3 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
268d7 03f 18 3C 7E FF 
268db 040 FF 7E 18 18 
268df 041 3C 00 00 00 
268e3 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
268e7 043 00 00 00 18 
268eb 044 3C 3C 18 00 
268ef 045 00 00 00 00 
268f3 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
268f7 047 FF FF FF E7 
268fb 048 C3 C3 E7 FF 
268ff 049 FF FF FF FF 
26903 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
26907 04b 00 00 3C 66 
2690b 04c 42 42 66 3C 
2690f 04d 00 00 00 00 
26913 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
26917 04f FF FF C3 99 
2691b 050 BD BD 99 C3 
2691f 051 FF FF FF FF 
26923 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
26927 053 78 70 58 4C 
2692b 054 1E 33 33 33 
2692f 055 33 1E 00 00 
26933 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
26937 057 3C 66 66 66 
2693b 058 66 3C 18 7E 
2693f 059 18 18 00 00 
26943 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
26947 05b FC CC FC 0C 
2694b 05c 0C 0C 0C 0E 
2694f 05d 0F 07 00 00 
26953 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
26957 05f FE C6 FE C6 
2695b 060 C6 C6 C6 E6 
2695f 061 E7 67 03 00 
26963 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
26967 063 18 18 DB 3C 
2696b 064 E7 3C DB 18 
2696f 065 18 00 00 00 
26973 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
26977 067 03 07 0F 1F 
2697b 068 7F 1F 0F 07 
2697f 069 03 01 00 00 
26983 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
26987 06b 60 70 78 7C 
2698b 06c 7F 7C 78 70 
2698f 06d 60 40 00 00 
26993 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
26997 06f 18 3C 7E 18 
2699b 070 18 18 7E 3C 
2699f 071 18 00 00 00 
269a3 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
269a7 073 66 66 66 66 
269ab 074 66 66 66    | 	byte	$66[7]
269ae 075 00 66 66 00 
269b2 076 00 00 00 00 
269b6 077 00 FE DB DB 
269ba 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
269be 079 D8 D8 D8 00 
269c2 07a 00 00 00 3E 
269c6 07b 63 06 1C 36 
269ca 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
269ce 07d 30 63 3E 00 
269d2 07e 00 00 00 00 
269d6 07f 00 00 00 00 
269da 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
269de 081 7F 7F 7F 00 
269e2 082 00 00 00 00 
269e6 083 00 18 3C 7E 
269ea 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
269ee 085 3C 18 7E 00 
269f2 086 00 00 00 00 
269f6 087 00 18 3C 7E 
269fa 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
269fe 089 18 18 18 00 
26a02 08a 00 00 00 00 
26a06 08b 00 18 18 18 
26a0a 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
26a0e 08d 7E 3C 18 00 
26a12 08e 00 00 00 00 
26a16 08f 00 00 00 18 
26a1a 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
26a1e 091 00 00 00 00 
26a22 092 00 00 00 00 
26a26 093 00 00 00    | 	byte	$00[11]
26a29 094 0C 06 7F 06 
26a2d 095 0C 00 00 00 
26a31 096 00 00 00 00 
26a35 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26a39 098 00 03 03 03 
26a3d 099 7F 00 00 00 
26a41 09a 00 00 00 00 
26a45 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26a49 09c 14 36 7F 36 
26a4d 09d 14 00 00 00 
26a51 09e 00 00 00 00 
26a55 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
26a59 0a0 1C 1C 3E 3E 
26a5d 0a1 7F 7F 00 00 
26a61 0a2 00 00 00 00 
26a65 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
26a69 0a4 7F 3E 3E 1C 
26a6d 0a5 1C 08 00 00 
26a71 0a6 00 00 00 00 
26a75 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26a79 0a8 00 00 00 00 
26a7d 0a9 00 00 00 00 
26a81 0aa 00 00 00 00 
26a85 0ab 00 00       | 	byte	$00[14]
26a87 0ab 18 3C 3C 3C 
26a8b 0ac 18 18 18 00 
26a8f 0ad 18 18 00 00 
26a93 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
26a97 0af 66 24 00 00 
26a9b 0b0 00 00 00 00 
26a9f 0b1 00 00 00 00 
26aa3 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26aa7 0b3 00 36 36 7F 
26aab 0b4 36 36 36 7F 
26aaf 0b5 36 36 00 00 
26ab3 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
26ab7 0b7 3E 63 43 03 
26abb 0b8 3E 60 60 61 
26abf 0b9 63 3E 18 18 
26ac3 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
26ac7 0bb 00 00 43 63 
26acb 0bc 30 18 0C 06 
26acf 0bd 63 61 00 00 
26ad3 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
26ad7 0bf 1C 36 36 1C 
26adb 0c0 6E 3B 33 33 
26adf 0c1 33 6E 00 00 
26ae3 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
26ae7 0c3 0C 0C 0C 06 
26aeb 0c4 00 00 00 00 
26aef 0c5 00 00 00 00 
26af3 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26af7 0c7 30 18 0C 0C 
26afb 0c8 0C 0C 0C 0C 
26aff 0c9 18 30 00 00 
26b03 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
26b07 0cb 0C 18 30 30 
26b0b 0cc 30 30 30 30 
26b0f 0cd 18 0C 00 00 
26b13 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
26b17 0cf 00 00 00 66 
26b1b 0d0 3C FF 3C 66 
26b1f 0d1 00 00 00 00 
26b23 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
26b27 0d3 00 00 00 18 
26b2b 0d4 18 7E 18 18 
26b2f 0d5 00 00 00 00 
26b33 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
26b37 0d7 00 00 00 00 
26b3b 0d8 00 00 00 00 | 	byte	$00[8]
26b3f 0d9 18 18 18 0C 
26b43 0da 00 00 00 00 
26b47 0db 00 00 00 00 
26b4b 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
26b4f 0dd 00 00 00 00 
26b53 0de 00 00 00 00 
26b57 0df 00 00 00 00 
26b5b 0e0 00 00 00 00 | 	byte	$00[16]
26b5f 0e1 18 18 00 00 
26b63 0e2 00 00 00 00 
26b67 0e3 00 00 40 60 
26b6b 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
26b6f 0e5 03 01 00 00 
26b73 0e6 00 00 00 00 
26b77 0e7 1C 36 63 63 
26b7b 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
26b7f 0e9 36 1C 00 00 
26b83 0ea 00 00 00 00 
26b87 0eb 18 1C 1E 18 
26b8b 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
26b8f 0ed 18 7E 00 00 
26b93 0ee 00 00 00 00 
26b97 0ef 3E 63 60 30 
26b9b 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
26b9f 0f1 63 7F 00 00 
26ba3 0f2 00 00 00 00 
26ba7 0f3 3E 63 60 60 
26bab 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
26baf 0f5 63 3E 00 00 
26bb3 0f6 00 00 00 00 
26bb7 0f7 30 38 3C 36 
26bbb 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
26bbf 0f9 30 78 00 00 
26bc3 0fa 00 00 00 00 
26bc7 0fb 7F 03 03 03 
26bcb 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
26bcf 0fd 63 3E 00 00 
26bd3 0fe 00 00 00 00 
26bd7 0ff 1C 06 03 03 
26bdb 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
26bdf 101 63 3E 00 00 
26be3 102 00 00 00 00 
26be7 103 7F 63 60 60 
26beb 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
26bef 105 0C 0C 00 00 
26bf3 106 00 00 00 00 
26bf7 107 3E 63 63 63 
26bfb 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
26bff 109 63 3E 00 00 
26c03 10a 00 00 00 00 
26c07 10b 3E 63 63 63 
26c0b 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
26c0f 10d 30 1E 00 00 
26c13 10e 00 00 00 00 
26c17 10f 00 00 00 18 
26c1b 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
26c1f 111 18 18 00 00 
26c23 112 00 00 00 00 
26c27 113 00 00 00 18 
26c2b 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
26c2f 115 18 18 0C 00 
26c33 116 00 00 00 00 
26c37 117 00 60 30 18 
26c3b 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
26c3f 119 30 60 00 00 
26c43 11a 00 00 00 00 
26c47 11b 00 00 00 7E 
26c4b 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
26c4f 11d 00 00 00 00 
26c53 11e 00 00 00 00 
26c57 11f 00          | 	byte	$00[9]
26c58 120 06 0C 18 30 
26c5c 121 60 30 18 0C 
26c60 122 06 00 00 00 
26c64 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
26c68 124 63 63 30 18 
26c6c 125 18 18 00 18 
26c70 126 18 00 00 00 
26c74 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
26c78 128 3E 63 63 7B 
26c7c 129 7B 7B 3B 03 
26c80 12a 3E 00 00 00 
26c84 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
26c88 12c 1C 36 63 63 
26c8c 12d 7F 63 63 63 
26c90 12e 63 00 00 00 
26c94 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
26c98 130 66 66 66 3E 
26c9c 131 66 66 66 66 
26ca0 132 3F 00 00 00 
26ca4 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
26ca8 134 66 43 03 03 
26cac 135 03 03 43 66 
26cb0 136 3C 00 00 00 
26cb4 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
26cb8 138 36 66 66 66 
26cbc 139 66 66 66 36 
26cc0 13a 1F 00 00 00 
26cc4 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
26cc8 13c 66 46 16 1E 
26ccc 13d 16 06 46 66 
26cd0 13e 7F 00 00 00 
26cd4 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
26cd8 140 66 46 16 1E 
26cdc 141 16 06 06 06 
26ce0 142 0F 00 00 00 
26ce4 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
26ce8 144 66 43 03 03 
26cec 145 7B 63 63 66 
26cf0 146 5C 00 00 00 
26cf4 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
26cf8 148 63 63 63 7F 
26cfc 149 63 63 63 63 
26d00 14a 63 00 00 00 
26d04 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
26d08 14c 18 18 18 18 
26d0c 14d 18 18 18 18 | 	byte	$18[8]
26d10 14e 3C 00 00 00 
26d14 14f 00 00 00 78 
26d18 150 30 30 30 30 
26d1c 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
26d20 152 1E 00 00 00 
26d24 153 00 00 00 67 
26d28 154 66 66 36 1E 
26d2c 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
26d30 156 67 00 00 00 
26d34 157 00 00 00 0F 
26d38 158 06 06 06 06 
26d3c 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
26d40 15a 7F 00 00 00 
26d44 15b 00 00 00 63 
26d48 15c 77 7F 7F 6B 
26d4c 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
26d50 15e 63 00 00 00 
26d54 15f 00 00 00 63 
26d58 160 67 6F 7F 7B 
26d5c 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
26d60 162 63 00 00 00 
26d64 163 00 00 00 3E 
26d68 164 63 63 63 63 
26d6c 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
26d70 166 3E 00 00 00 
26d74 167 00 00 00 3F 
26d78 168 66 66 66 3E 
26d7c 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
26d80 16a 0F 00 00 00 
26d84 16b 00 00 00 3E 
26d88 16c 63 63 63 63 
26d8c 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
26d90 16e 3E 30 70 00 
26d94 16f 00 00 00 3F 
26d98 170 66 66 66 3E 
26d9c 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
26da0 172 67 00 00 00 
26da4 173 00 00 00 3E 
26da8 174 63 63 06 1C 
26dac 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
26db0 176 3E 00 00 00 
26db4 177 00 00 00 7E 
26db8 178 7E 5A 18 18 
26dbc 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
26dc0 17a 3C 00 00 00 
26dc4 17b 00 00 00 63 
26dc8 17c 63 63 63 63 
26dcc 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
26dd0 17e 3E 00 00 00 
26dd4 17f 00 00 00 63 
26dd8 180 63 63 63 63 
26ddc 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
26de0 182 08 00 00 00 
26de4 183 00 00 00 63 
26de8 184 63 63 63 6B 
26dec 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
26df0 186 36 00 00 00 
26df4 187 00 00 00 63 
26df8 188 63 36 3E 1C 
26dfc 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
26e00 18a 63 00 00 00 
26e04 18b 00 00 00 66 
26e08 18c 66 66 66 3C 
26e0c 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
26e10 18e 3C 00 00 00 
26e14 18f 00 00 00 7F 
26e18 190 63 61 30 18 
26e1c 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
26e20 192 7F 00 00 00 
26e24 193 00 00 00 3C 
26e28 194 0C 0C 0C 0C 
26e2c 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
26e30 196 3C 00 00 00 
26e34 197 00 00 00 00 
26e38 198 01 03 07 0E 
26e3c 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
26e40 19a 40 00 00 00 
26e44 19b 00 00 00 3C 
26e48 19c 30 30 30 30 
26e4c 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
26e50 19e 3C 00 00 00 
26e54 19f 1C 36 00 00 
26e58 1a0 00 00 00 00 
26e5c 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26e60 1a2 00 00 00 00 
26e64 1a3 00 00 00 00 
26e68 1a4 00 00 00 00 
26e6c 1a5 00 00 00 00 
26e70 1a6 00          | 	byte	$00[17]
26e71 1a6 FF 00 00 0C 
26e75 1a7 18 00 00 00 
26e79 1a8 00 00 00 00 
26e7d 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26e81 1aa 00 00 00 00 
26e85 1ab 00 00 00 00 
26e89 1ac 00          | 	byte	$00[9]
26e8a 1ac 1E 30 3E 33 
26e8e 1ad 33 33 6E 00 
26e92 1ae 00 00 00 00 
26e96 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
26e9a 1b0 1E 36 66 66 
26e9e 1b1 66 66 3E 00 
26ea2 1b2 00 00 00 00 
26ea6 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
26eaa 1b4 3E 63 03 03 
26eae 1b5 03 63 3E 00 
26eb2 1b6 00 00 00 00 
26eb6 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
26eba 1b8 3C 36 33 33 
26ebe 1b9 33 33 6E 00 
26ec2 1ba 00 00 00 00 
26ec6 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
26eca 1bc 3E 63 7F 03 
26ece 1bd 03 63 3E 00 
26ed2 1be 00 00 00 00 
26ed6 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
26eda 1c0 0C 1E 0C 0C 
26ede 1c1 0C 0C 1E 00 
26ee2 1c2 00 00 00 00 
26ee6 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
26eea 1c4 6E 33 33 33 
26eee 1c5 33 33 3E 30 
26ef2 1c6 33 1E 00 00 
26ef6 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
26efa 1c8 36 6E 66 66 
26efe 1c9 66 66 67 00 
26f02 1ca 00 00 00 00 
26f06 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
26f0a 1cc 1C 18 18 18 
26f0e 1cd 18 18 3C 00 
26f12 1ce 00 00 00 00 
26f16 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
26f1a 1d0 70 60 60 60 
26f1e 1d1 60 60 60 66 
26f22 1d2 66 3C 00 00 
26f26 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
26f2a 1d4 66 36 1E 1E 
26f2e 1d5 36 66 67 00 
26f32 1d6 00 00 00 00 
26f36 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
26f3a 1d8 18 18 18 18 
26f3e 1d9 18 18       | 	byte	$18[6]
26f40 1da 3C 00 00 00 
26f44 1db 00 00 00 00 
26f48 1dc 00 00 37 7F 
26f4c 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
26f50 1de 63 00 00 00 
26f54 1df 00 00 00 00 
26f58 1e0 00 00 3B 66 
26f5c 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
26f60 1e2 66 00 00 00 
26f64 1e3 00 00 00 00 
26f68 1e4 00 00 3E 63 
26f6c 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
26f70 1e6 3E 00 00 00 
26f74 1e7 00 00 00 00 
26f78 1e8 00 00 3B 66 
26f7c 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
26f80 1ea 3E 06 06 0F 
26f84 1eb 00 00 00 00 
26f88 1ec 00 00 6E 33 
26f8c 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
26f90 1ee 3E 30 30 78 
26f94 1ef 00 00 00 00 
26f98 1f0 00 00 3B 6E 
26f9c 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
26fa0 1f2 0F 00 00 00 
26fa4 1f3 00 00 00 00 
26fa8 1f4 00 00 3E 63 
26fac 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
26fb0 1f6 3E 00 00 00 
26fb4 1f7 00 00 00 08 
26fb8 1f8 0C 0C 3F 0C 
26fbc 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
26fc0 1fa 38 00 00 00 
26fc4 1fb 00 00 00 00 
26fc8 1fc 00 00 33 33 
26fcc 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
26fd0 1fe 6E 00 00 00 
26fd4 1ff 00 00 00 00 
26fd8 200 00 00 63 63 
26fdc 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
26fe0 202 1C 00 00 00 
26fe4 203 00 00 00 00 
26fe8 204 00 00 63 63 
26fec 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
26ff0 206 36 00 00 00 
26ff4 207 00 00 00 00 
26ff8 208 00 00 63 36 
26ffc 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
27000 20a 63 00 00 00 
27004 20b 00 00 00 00 
27008 20c 00 00 63 63 
2700c 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
27010 20e 7E 60 30 1F 
27014 20f 00 00 00 00 
27018 210 00 00 7F 33 
2701c 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
27020 212 7F 00 00 00 
27024 213 00 00 00 70 
27028 214 18 18 18 0E 
2702c 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
27030 216 70 00 00 00 
27034 217 00 00 00 18 
27038 218 18 18 18 18 
2703c 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
27040 21a 18 00 00 00 
27044 21b 00 00 00 0E 
27048 21c 18 18 18 70 
2704c 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
27050 21e 0E 00 00 00 
27054 21f 6E 3B 00 00 
27058 220 00 00 00 00 
2705c 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27060 222 00 00 00 00 
27064 223 00 00 00 00 
27068 224 00 00       | 	byte	$00[10]
2706a 224 08 1C 36 63 
2706e 225 63 63 7F 00 
27072 226 00 00 00 00 
27076 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
2707a 228 03 03 03 03 
2707e 229 43 66 3C 18 
27082 22a 30 1E 00 00 
27086 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
2708a 22c 33 33 33 33 
2708e 22d 33 33       | 	byte	$33[6]
27090 22e 6E 00 00 00 
27094 22f 00 00 60 30 
27098 230 18 00 3E 63 
2709c 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
270a0 232 3E 00 00 00 
270a4 233 00 00 08 1C 
270a8 234 36 00 1E 30 
270ac 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
270b0 236 6E 00 00 00 
270b4 237 00 00 00 00 
270b8 238 33 00 1E 30 
270bc 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
270c0 23a 6E 00 00 00 
270c4 23b 00 00 1C 36 
270c8 23c 1C 00 33 33 
270cc 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
270d0 23e 6E 00 00 00 
270d4 23f 00 00 60 30 
270d8 240 18 00 3E 63 
270dc 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
270e0 242 3E 00 00 00 
270e4 243 00 00 00 00 
270e8 244 00 00 3E 63 
270ec 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
270f0 246 3E 18 30 1E 
270f4 247 00 00 00 1C 
270f8 248 58 78 38 18 
270fc 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
27100 24a 3C 00 00 00 
27104 24b 00 00 00 00 
27108 24c 63 00 3E 63 
2710c 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
27110 24e 3E 00 00 00 
27114 24f 66 33 00 3E 
27118 250 63 63 63 63 
2711c 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
27120 252 3E 00 00 00 
27124 253 00 00 CC 66 
27128 254 33 00 3E 63 
2712c 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
27130 256 3E 00 00 00 
27134 257 00 00 18 3C 
27138 258 66 00 1C 18 
2713c 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
27140 25a 3C 00 00 00 
27144 25b 30 18 00 7F 
27148 25c 63 61 30 18 
2714c 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
27150 25e 7F 00 00 00 
27154 25f 00 63 00 08 
27158 260 1C 36 63 63 
2715c 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
27160 262 63 00 00 00 
27164 263 30 18 00 3C 
27168 264 66 43 03 03 
2716c 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
27170 266 3C 00 00 00 
27174 267 30 18 00 7F 
27178 268 66 46 16 1E 
2717c 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
27180 26a 7F 00 00 00 
27184 26b 0C 06 00 0F 
27188 26c 06 06 06 06 
2718c 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
27190 26e 7F 00 00 00 
27194 26f 30 18 00 1C 
27198 270 18 18 18 18 
2719c 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
271a0 272 3C 00 00 00 
271a4 273 00 00 08 1C 
271a8 274 36 00 3E 63 
271ac 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
271b0 276 3E 00 00 00 
271b4 277 00 00 00 00 
271b8 278 63 00 3E 63 
271bc 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
271c0 27a 3E 00 00 00 
271c4 27b 00 00 00 6F 
271c8 27c 46 26 06 06 
271cc 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
271d0 27e 7F 00 00 00 
271d4 27f 00 00 00 6E 
271d8 280 4C 2C 0C 0C 
271dc 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
271e0 282 1E 00 00 00 
271e4 283 30 18 00 3E 
271e8 284 63 63 06 1C 
271ec 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
271f0 286 3E 00 00 00 
271f4 287 00 00 60 30 
271f8 288 18 00 3E 63 
271fc 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
27200 28a 3E 00 00 00 
27204 28b 00 63 00 3E 
27208 28c 63 63 63 63 
2720c 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
27210 28e 3E 00 00 00 
27214 28f 00 63 00 63 
27218 290 63 63 63 63 
2721c 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
27220 292 3E 00 00 00 
27224 293 6C 38 00 7E 
27228 294 7E 5A 18 18 
2722c 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
27230 296 3C 00 00 00 
27234 297 00 00 60 48 
27238 298 2C 0C 3F 0C 
2723c 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
27240 29a 38 00 00 00 
27244 29b 00 00 00 0F 
27248 29c 26 36 1E 0E 
2724c 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
27250 29e 7F 00 00 00 
27254 29f 00 00 00 00 
27258 2a0 00 63 36 1C 
2725c 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
27260 2a2 00 00 00 00 
27264 2a3 00 00       | 	byte	$00[6]
27266 2a3 36 1C 08 00 
2726a 2a4 3E 63 03 03 
2726e 2a5 03 63 3E 00 
27272 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
27276 2a7 30 18 0C 00 
2727a 2a8 1E 30 3E 33 
2727e 2a9 33 33 6E 00 
27282 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
27286 2ab 60 30 18 00 
2728a 2ac 1C 18 18 18 
2728e 2ad 18 18 3C 00 
27292 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
27296 2af 60 30 18 00 
2729a 2b0 3E 63 63 63 
2729e 2b1 63 63 3E 00 
272a2 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
272a6 2b3 30 18 0C 00 
272aa 2b4 33 33 33 33 
272ae 2b5 33 33 6E 00 
272b2 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
272b6 2b7 00 08 1C 36 
272ba 2b8 63 63 7F 63 
272be 2b9 63 63 63 18 
272c2 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
272c6 2bb 00 00 00 00 
272ca 2bc 1E 30 3E 33 
272ce 2bd 33 33 6E 18 
272d2 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
272d6 2bf 00 7F 63 61 
272da 2c0 30 18 0C 06 
272de 2c1 43 63 7F 00 
272e2 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
272e6 2c3 36 1C 08 00 
272ea 2c4 7F 33 18 0C 
272ee 2c5 06 63 7F 00 
272f2 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
272f6 2c7 00 7F 66 46 
272fa 2c8 16 1E 16 06 
272fe 2c9 46 66 7F 18 
27302 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
27306 2cb 00 00 00 00 
2730a 2cc 3E 63 7F 03 
2730e 2cd 03 63 3E 18 
27312 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
27316 2cf 00 3C 66 03 
2731a 2d0 1F 03 0F 03 
2731e 2d1 03 66 3C 00 
27322 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
27326 2d3 60 30 18 00 
2732a 2d4 7F 33 18 0C 
2732e 2d5 06 63 7F 00 
27332 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
27336 2d7 00 3C 66 43 
2733a 2d8 03 03 03 03 
2733e 2d9 43 66 3C 00 
27342 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
27346 2db 00 00 00 00 
2734a 2dc 3E 63 06 1C 
2734e 2dd 30 63 3E 18 
27352 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
27356 2df 00 00 00 00 
2735a 2e0 00 00       | 	byte	$00[6]
2735c 2e1 6C 36 1B 36 
27360 2e2 6C 00 00 00 
27364 2e3 00 00 00 00 
27368 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2736c 2e5 1B 36 6C 36 
27370 2e6 1B 00 00 00 
27374 2e7 88 22 88 22 
27378 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
2737c 2e9 88 22 88 22 
27380 2ea 88 22 88 22 
27384 2eb AA 55 AA 55 
27388 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
2738c 2ed AA 55 AA 55 
27390 2ee AA 55 AA 55 
27394 2ef BB EE BB EE 
27398 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
2739c 2f1 BB EE BB EE 
273a0 2f2 BB EE BB EE 
273a4 2f3 18 18 18 18 
273a8 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
273ac 2f5 18 18 18 18 
273b0 2f6 18 18 18 18 
273b4 2f7 18 18 18 18 
273b8 2f8 18 18 18    | 	byte	$18[15]
273bb 2f8 1F 18 18 18 
273bf 2f9 18 18 18 18 
273c3 2fa 18 30 18 00 
273c7 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
273cb 2fc 63 7F 63 63 
273cf 2fd 63 63 00 00 
273d3 2fe 00 1C 36 00 
273d7 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
273db 300 63 7F 63 63 
273df 301 63 63 00 00 
273e3 302 00 36 1C 00 
273e7 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
273eb 304 1E 16 06 46 
273ef 305 66 7F 00 00 
273f3 306 00 00 00 00 
273f7 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
273fb 308 1C 30 60 63 
273ff 309 63 3E 18 30 
27403 30a 1E 6C 6C 6C 
27407 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
2740b 30c 6F 6C 6C 6C 
2740f 30d 6C 6C 6C 6C 
27413 30e 6C 6C 6C 6C 
27417 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2741b 310 6C 6C 6C 6C 
2741f 311 6C 6C 6C 6C 
27423 312 6C          | 	byte	$6c[9]
27424 313 00 00 00 00 
27428 314 00          | 	byte	$00[5]
27429 314 7F 60 6F 6C 
2742d 315 6C 6C 6C 6C 
27431 316 6C 6C 6C 6C 
27435 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
27439 318 6F 60 7F 00 
2743d 319 00 00 00 00 
27441 31a 00 00 00 18 
27445 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
27449 31c 61 30 18 0C 
2744d 31d 06 43 63 7F 
27451 31e 00 00 00 00 
27455 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
27459 320 00 7F 33 18 
2745d 321 0C 06 63 7F 
27461 322 00 00 00 00 
27465 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
27469 324 00 00 1F 18 
2746d 325 18 18 18 18 
27471 326 18 18 18 18 
27475 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
27479 328 18 18 F8 00 
2747d 329 00 00 00 00 
27481 32a 00 00 00 18 
27485 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
27489 32c 18 18 FF 00 
2748d 32d 00 00 00 00 
27491 32e 00 00 00 00 
27495 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27499 330 00 00 FF 18 
2749d 331 18 18 18 18 
274a1 332 18 18 18 18 
274a5 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
274a9 334 18 18 F8 18 
274ad 335 18 18 18 18 
274b1 336 18 18 18 00 
274b5 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
274b9 338 00 00 FF 00 
274bd 339 00 00 00 00 
274c1 33a 00 00 00 18 
274c5 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
274c9 33c 18 18 FF 18 
274cd 33d 18 18 18 18 
274d1 33e 18 18 18 63 
274d5 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
274d9 340 36 63 63 7F 
274dd 341 63 63 63 63 
274e1 342 00 00 00 00 
274e5 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
274e9 344 00 1E 30 3E 
274ed 345 33 33 33 6E 
274f1 346 00 00 00 6C 
274f5 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
274f9 348 EC 0C FC 00 
274fd 349 00 00 00 00 
27501 34a 00 00 00 00 
27505 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27509 34c FC 0C EC 6C 
2750d 34d 6C 6C 6C 6C 
27511 34e 6C 6C 6C 6C 
27515 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
27519 350 EF 00 FF 00 
2751d 351 00 00 00 00 
27521 352 00 00 00 00 
27525 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27529 354 FF 00 EF 6C 
2752d 355 6C 6C 6C 6C 
27531 356 6C 6C 6C 6C 
27535 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
27539 358 EC 0C EC 6C 
2753d 359 6C 6C 6C 6C 
27541 35a 6C 6C 6C 00 
27545 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
27549 35c FF 00 FF 00 
2754d 35d 00 00 00 00 
27551 35e 00 00 00 6C 
27555 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
27559 360 EF 00 EF 6C 
2755d 361 6C 6C 6C 6C 
27561 362 6C 6C 6C 00 
27565 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
27569 364 63 3E 63 63 
2756d 365 63 63 3E 63 
27571 366 00 00 00 00 
27575 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
27579 368 30 3C 36 33 
2757d 369 33 33 33 6E 
27581 36a 00 00 00 00 
27585 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
27589 36c 66 66 6F 66 
2758d 36d 66 66 36 1F 
27591 36e 00 00 00 36 
27595 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
27599 370 66 66 66 66 
2759d 371 66 66       | 	byte	$66[6]
2759f 371 36 1F 00 00 
275a3 372 00 00 63 00 
275a7 373 7F 66 46 16 
275ab 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
275af 375 66 7F 00 00 
275b3 376 00 6C 38 00 
275b7 377 38 30 30 3C 
275bb 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
275bf 379 33 6E 00 00 
275c3 37a 00 36 1C 00 
275c7 37b 63 67 6F 7F 
275cb 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
275cf 37d 63 63 00 00 
275d3 37e 00 30 18 00 
275d7 37f 3C 18 18 18 
275db 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
275df 381 18 3C 00 00 
275e3 382 00 3C 66 00 
275e7 383 3C 18 18 18 
275eb 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
275ef 385 18 3C 00 00 
275f3 386 00 00 00 36 
275f7 387 1C 08 00 3E 
275fb 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
275ff 389 63 3E 00 00 
27603 38a 00 18 18 18 
27607 38b 18 18 18 18 
2760b 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
2760f 38d 00 00 00 00 
27613 38e 00 00 00 00 
27617 38f 00 00 00 00 | 	byte	$00[12]
2761b 390 F8 18 18 18 
2761f 391 18 18 18 18 
27623 392 18 FF FF FF 
27627 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
2762b 394 FF FF FF FF 
2762f 395 FF FF FF FF 
27633 396 FF          | 	byte	$ff[9]
27634 397 00 00 00 00 
27638 398 00 00 00    | 	byte	$00[7]
2763b 398 FF FF FF FF 
2763f 399 FF FF FF FF 
27643 39a FF          | 	byte	$ff[9]
27644 39b 00 00 00 7E 
27648 39c 7E 5A 18 18 
2764c 39d 18 18 18 18 
27650 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
27654 39f 1C 36 1C 63 
27658 3a0 63 63 63 63 
2765c 3a1 63 63 63 63 
27660 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
27664 3a3 FF FF FF FF 
27668 3a4 FF FF FF    | 	byte	$ff[7]
2766b 3a4 00 00 00 00 
2766f 3a5 00 00 00 00 
27673 3a6 00          | 	byte	$00[9]
27674 3a7 30 18 00 3E 
27678 3a8 63 63 63 63 
2767c 3a9 63 63 63 63 
27680 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
27684 3ab 00 00 00 1E 
27688 3ac 33 33 33 1B 
2768c 3ad 33 63 63 63 
27690 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
27694 3af 1C 36 00 3E 
27698 3b0 63 63 63 63 
2769c 3b1 63 63 63 63 
276a0 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
276a4 3b3 30 18 00 63 
276a8 3b4 67 6F 7F 7B 
276ac 3b5 73 63 63 63 
276b0 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
276b4 3b7 00 00 60 30 
276b8 3b8 18 00 3B 66 
276bc 3b9 66 66 66 66 
276c0 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
276c4 3bb 00 00 36 1C 
276c8 3bc 08 00 3B 66 
276cc 3bd 66 66 66 66 
276d0 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
276d4 3bf 36 1C 00 3E 
276d8 3c0 63 63 06 1C 
276dc 3c1 30 60 63 63 
276e0 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
276e4 3c3 00 00 36 1C 
276e8 3c4 08 00 3E 63 
276ec 3c5 06 1C 30 63 
276f0 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
276f4 3c7 30 18 00 3F 
276f8 3c8 66 66 66 3E 
276fc 3c9 36 66 66 66 
27700 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
27704 3cb 30 18 00 63 
27708 3cc 63 63 63 63 
2770c 3cd 63 63 63 63 
27710 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
27714 3cf 00 00 60 30 
27718 3d0 18 00 3B 6E 
2771c 3d1 66 06 06 06 
27720 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
27724 3d3 66 33 00 63 
27728 3d4 63 63 63 63 
2772c 3d5 63 63 63 63 
27730 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
27734 3d7 00 00 60 30 
27738 3d8 18 00 63 63 
2773c 3d9 63 63 63 63 
27740 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
27744 3db 30 18 00 66 
27748 3dc 66 66 66 3C 
2774c 3dd 18 18 18 18 
27750 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
27754 3df 00 00 00 08 
27758 3e0 0C 0C 3F 0C 
2775c 3e1 0C 0C 0C 6C 
27760 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
27764 3e3 30 18 00 00 
27768 3e4 00 00 00 00 
2776c 3e5 00 00 00 00 
27770 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27774 3e7 00 00 00 00 
27778 3e8 00 00 00 00 | 	byte	$00[8]
2777c 3e9 7F 00 00 00 
27780 3ea 00 00 00 00 
27784 3eb 66 33 00 00 
27788 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
2778c 3ed 00 00 00 00 
27790 3ee 00 00 00 00 
27794 3ef 00 00 00 00 
27798 3f0 00 00 00 00 
2779c 3f1 00 00 00 00 
277a0 3f2 00          | 	byte	$00[21]
277a1 3f2 0C 06 3C 36 
277a5 3f3 1C 00 00 00 
277a9 3f4 00 00 00 00 
277ad 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
277b1 3f6 00 00 00 63 
277b5 3f7 3E 00 00 00 
277b9 3f8 00 00 00 00 
277bd 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
277c1 3fa 00 00 00 00 
277c5 3fb 3E 63 06 1C 
277c9 3fc 36 63 63 36 
277cd 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
277d1 3fe 00 00 00 00 
277d5 3ff 00 00 00 00 | 	byte	$00[8]
277d9 400 18 00 7E 00 
277dd 401 18 00 00 00 
277e1 402 00 00 00 00 
277e5 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
277e9 404 00 00 00 00 
277ed 405 00 00 00 00 | 	byte	$00[8]
277f1 406 18 30 1E 00 
277f5 407 00 00 1C 36 
277f9 408 36 1C 00 00 
277fd 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
27801 40a 00 00 00 00 
27805 40b 63 00 00 00 
27809 40c 00 00 00 00 
2780d 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27811 40e 00 00 00 18 
27815 40f 18 00 00 00 
27819 410 00 00 00 00 
2781d 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27821 412 00 00 00 00 
27825 413 00          | 	byte	$00[5]
27826 413 CC 66 33 00 
2782a 414 33 33 33 33 
2782e 415 33 33 6E 00 
27832 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
27836 417 00 3F 66 66 
2783a 418 66 3E 36 66 
2783e 419 66 66 6F 00 
27842 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
27846 41b 36 1C 08 00 
2784a 41c 3B 6E 66 06 
2784e 41d 06 06 0F 00 
27852 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
27856 41f 00 00 00 7E 
2785a 420 7E 7E 7E 7E 
2785e 421 7E 7E 00 00 
27862 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
27866 423 00 00 00 00 
2786a 424 00 00 00 00 
2786e 425 00 00 00 00 
27872 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27874 427             | 'vga_font       file "vgafont.def"
27874 427 00 00 00 00 
      ...             
278a4 433 00 00 00 00 
278a8 434 00 00 00    | st_font        file "st4font.def"
278ab 434 FF FF 00 00 
278af 435 00 00 00 00 
278b3 436 00 18 18 18 
278b7 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
278bb 438 18 18 18 18 
278bf 439 18 18 18 18 
278c3 43a 18          | 	byte	$18[9]
278c4 43b 00 00 00 00 
278c8 43c 00 00 00    | 	byte	$00[7]
278cb 43c FF FF 18 18 
278cf 43d 18 18 18 18 
278d3 43e 18 18 18 18 
278d7 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
278db 440 FF FF 00 00 
278df 441 00 00 00 00 
278e3 442 00 18 18 18 
278e7 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
278eb 444 1F 1F 18 18 
278ef 445 18 18 18 18 
278f3 446 18 18 18 18 
278f7 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
278fb 448 F8 F8 18 18 
278ff 449 18 18 18 18 
27903 44a 18 00 00 00 
27907 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2790b 44c 1F 1F 18 18 
2790f 44d 18 18 18 18 
27913 44e 18 00 00 00 
27917 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2791b 450 F8 F8 18 18 
2791f 451 18 18 18 18 
27923 452 18 18 18 18 
27927 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2792b 454 1F 1F 00 00 
2792f 455 00 00 00 00 
27933 456 00 18 18 18 
27937 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2793b 458 F8 F8 00 00 
2793f 459 00 00 00 00 
27943 45a 00 18 18 18 
27947 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2794b 45c FF FF 18 18 
2794f 45d 18 18 18 18 
27953 45e 18 00 00 18 
27957 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
2795b 460 66 7E 7E 66 
2795f 461 66 66 66 30 
27963 462 18 00 00 7E 
27967 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
2796b 464 3E 06 06 06 
2796f 465 06 7E 7E 18 
27973 466 0C 30 18 3C 
27977 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
2797b 468 06 06 06 66 
2797f 469 66 7E 3C 00 
27983 46a 00 30 18 66 
27987 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
2798b 46c 7E 7E 76 76 
2798f 46d 66 66 66 00 
27993 46e 00 30 18 7C 
27997 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
2799b 470 1C 38 70 60 
2799f 471 60 7E 3E 00 
279a3 472 00 30 18 7E 
279a7 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
279ab 474 18 0C 0C 06 
279af 475 06 7E 7E 00 
279b3 476 00 18 18 00 
279b7 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
279bb 478 18 18 0C 0C 
279bf 479 06 7E 7E 00 
279c3 47a 00 30 18 3C 
279c7 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
279cb 47c 66 66 66 66 
279cf 47d 66          | 	byte	$66[5]
279d0 47e 7E 3C 00 00 
279d4 47f 00 00 06 06 
279d8 480 06 06 16 1E 
279dc 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
279e0 482 7E 7E 00 00 
279e4 483 00 00 00 00 
279e8 484 00 3C 7C 60 
279ec 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
279f0 486 7E 7C 30 18 
279f4 487 00 00 00 00 
279f8 488 00 3C 7E 66 
279fc 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
27a00 48a 7E 7C 18 0C 
27a04 48b 00 00 30 18 
27a08 48c 00 3C 3E 06 
27a0c 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
27a10 48e 7E 7C 00 00 
27a14 48f 00 00 30 18 
27a18 490 00 3E 7E 66 
27a1c 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
27a20 492 66 66 00 00 
27a24 493 00 00 30 18 
27a28 494 00 7C 7E 06 
27a2c 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
27a30 496 7E 3E 00 00 
27a34 497 00 00 30 18 
27a38 498 00 7E 7E 30 
27a3c 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
27a40 49a 7E 7E 00 00 
27a44 49b 00 00 18 18 
27a48 49c 00 7E 7E 30 
27a4c 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
27a50 49e 7E 7E 00 00 
27a54 49f 00 00 30 18 
27a58 4a0 00 3C 7E 66 
27a5c 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
27a60 4a2 7E 3C 00 00 
27a64 4a3 00 00 1C 1C 
27a68 4a4 18 18 38 3C 
27a6c 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
27a70 4a6 3C 3C 00 00 
27a74 4a7 00 00 00 00 
27a78 4a8 00 00 00 00 
27a7c 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27a80 4aa 00 00 00 00 
27a84 4ab 00 00       | 	byte	$00[6]
27a86 4ab 18 18 18 18 
27a8a 4ac 18 18 18 18 | 	byte	$18[8]
27a8e 4ad 00 00 18 18 
27a92 4ae 00 00 00 00 
27a96 4af 66 66 66 66 
27a9a 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
27a9e 4b1 00 00 00 00 
27aa2 4b2 00 00 00 00 
27aa6 4b3 00          | 	byte	$00[9]
27aa7 4b3 66 66 FF FF 
27aab 4b4 66 66 FF FF 
27aaf 4b5 66 66 00 00 
27ab3 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
27ab7 4b7 7C 7E 06 06 
27abb 4b8 3E 7C 60 60 
27abf 4b9 7E 3E 18 18 
27ac3 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
27ac7 4bb 66 30 30 18 
27acb 4bc 18 0C 0C 66 
27acf 4bd 66 00 00 00 
27ad3 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
27ad7 4bf 66 66 3C 1C 
27adb 4c0 1C FC FE 66 
27adf 4c1 66 FE FC 00 
27ae3 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
27ae7 4c3 18 18 18 18 
27aeb 4c4 00 00 00 00 
27aef 4c5 00 00 00 00 
27af3 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
27af7 4c7 18 1C 0C 0C 
27afb 4c8 0C 0C 0C 0C 
27aff 4c9 1C 18 30 00 
27b03 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
27b07 4cb 18 38 30 30 
27b0b 4cc 30 30 30 30 
27b0f 4cd 38 18 0C 00 
27b13 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
27b17 4cf 66 66 3C 3C 
27b1b 4d0 FF FF 3C 3C 
27b1f 4d1 66 66 00 00 
27b23 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
27b27 4d3 00 18 18 18 
27b2b 4d4 7E 7E 18 18 
27b2f 4d5 18 00 00 00 
27b33 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
27b37 4d7 00 00 00 00 
27b3b 4d8 00 00       | 	byte	$00[6]
27b3d 4d9 18 18 18 18 
27b41 4da 18          | 	byte	$18[5]
27b42 4da 0C 04 00 00 
27b46 4db 00 00 00 00 
27b4a 4dc 7E 7E 00 00 
27b4e 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
27b52 4de 00 00 00 00 
27b56 4df 00 00 00 00 
27b5a 4e0 00 00 00 00 
27b5e 4e1 00          | 	byte	$00[13]
27b5f 4e1 18 18 18 00 
27b63 4e2 00 00 00 60 
27b67 4e3 60 60 30 30 
27b6b 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
27b6f 4e5 06 06 06 00 
27b73 4e6 00 00 00 3C 
27b77 4e7 7E 66 66 66 
27b7b 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
27b7f 4e9 66 7E 3C 00 
27b83 4ea 00 00 00 18 
27b87 4eb 18 1C 1C 18 
27b8b 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
27b8f 4ed 18 7E 7E 00 
27b93 4ee 00 00 00 3C 
27b97 4ef 7E 66 66 30 
27b9b 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
27b9f 4f1 0C 7E 7E 00 
27ba3 4f2 00 00 00 7E 
27ba7 4f3 7E 30 30 18 
27bab 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
27baf 4f5 66 7E 3C 00 
27bb3 4f6 00 00 00 30 
27bb7 4f7 30 38 38 3C 
27bbb 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
27bbf 4f9 7E 30 30 00 
27bc3 4fa 00 00 00 7E 
27bc7 4fb 7E 06 06 3E 
27bcb 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
27bcf 4fd 66 7E 3C 00 
27bd3 4fe 00 00 00 38 
27bd7 4ff 3C 0E 06 06 
27bdb 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
27bdf 501 66 7E 3C 00 
27be3 502 00 00 00 7E 
27be7 503 7E 60 60 30 
27beb 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
27bef 505 0C 0C 0C 00 
27bf3 506 00 00 00 3C 
27bf7 507 7E 66 66 3C 
27bfb 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
27bff 509 66 7E 3C 00 
27c03 50a 00 00 00 3C 
27c07 50b 7E 66 66 7E 
27c0b 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
27c0f 50d 70 3C 1C 00 
27c13 50e 00 00 00 00 
27c17 50f 00 00 18 18 
27c1b 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
27c1f 511 18 18 18 00 
27c23 512 00 00 00 00 
27c27 513 00 00 18 18 
27c2b 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
27c2f 515 18 18 18 0C 
27c33 516 04 00 00 00 
27c37 517 70 38 1C 0E 
27c3b 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
27c3f 519 70 00 00 00 
27c43 51a 00 00 00 00 
27c47 51b 00 00 7E 7E 
27c4b 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
27c4f 51d 00 00 00 00 
27c53 51e 00 00 00 00 | 	byte	$00[8]
27c57 51f 0E 1C 38 70 
27c5b 520 E0 70 38 1C 
27c5f 521 0E 00 00 00 
27c63 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
27c67 523 7E 66 66 30 
27c6b 524 30 18 18 18 
27c6f 525 00 18 18 00 
27c73 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
27c77 527 7E 66 66 66 
27c7b 528 66 36 06 66 
27c7f 529 66 7E 3C 00 
27c83 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
27c87 52b 3C 7E 66 66 
27c8b 52c 66 7E 7E 66 
27c8f 52d 66 66 66 00 
27c93 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
27c97 52f 7E 66 66 7E 
27c9b 530 3E 66 66 66 
27c9f 531 66 7E 3E 00 
27ca3 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
27ca7 533 7E 66 66 06 
27cab 534 06 06 06 66 
27caf 535 66 7E 3C 00 
27cb3 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
27cb7 537 7E 66 66 66 
27cbb 538 66 66 66 66 
27cbf 539 66 7E 3E 00 
27cc3 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
27cc7 53b 7E 06 06 3E 
27ccb 53c 3E 06 06 06 
27ccf 53d 06 7E 7E 00 
27cd3 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
27cd7 53f 7E 06 06 3E 
27cdb 540 3E 06 06 06 
27cdf 541 06 06 06 00 
27ce3 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
27ce7 543 7E 06 06 76 
27ceb 544 76 66 66 66 
27cef 545 66 7E 3C 00 
27cf3 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
27cf7 547 66 66 66 7E 
27cfb 548 7E 66 66 66 
27cff 549 66 66 66 00 
27d03 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
27d07 54b 7E 18 18 18 
27d0b 54c 18 18 18 18 
27d0f 54d 18 7E 7E 00 
27d13 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
27d17 54f 60 60 60 60 
27d1b 550 60 60 60    | 	byte	$60[7]
27d1e 551 66 66 7E 3C 
27d22 552 00 00 00 00 
27d26 553 66 66 36 36 
27d2a 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
27d2e 555 66 66 C6 C6 
27d32 556 00 00 00 00 
27d36 557 06 06 06 06 
27d3a 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
27d3e 559 06 06 7E 7E 
27d42 55a 00 00 00 00 
27d46 55b C6 C6 EE EE 
27d4a 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
27d4e 55d C6 C6 C6 C6 
27d52 55e 00 00 00 00 
27d56 55f 66 66 66 6E 
27d5a 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
27d5e 561 76 66 66 66 
27d62 562 00 00 00 00 
27d66 563 3C 7E 66 66 
27d6a 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
27d6e 565 66 66 7E 3C 
27d72 566 00 00 00 00 
27d76 567 3E 7E 66 66 
27d7a 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
27d7e 569 06 06 06 06 
27d82 56a 00 00 00 00 
27d86 56b 3C 7E 66 66 
27d8a 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
27d8e 56d 66 56 3E 6C 
27d92 56e 00 00 00 00 
27d96 56f 3E 7E 66 66 
27d9a 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
27d9e 571 66 66 C6 C6 
27da2 572 00 00 00 00 
27da6 573 7C 7E 06 06 
27daa 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
27dae 575 60 60 7E 3E 
27db2 576 00 00 00 00 
27db6 577 7E 7E 18 18 
27dba 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
27dbe 579 18 18 18 18 
27dc2 57a 00 00 00 00 
27dc6 57b 66 66 66 66 
27dca 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
27dce 57d 66 66 7E 3C 
27dd2 57e 00 00 00 00 
27dd6 57f 66 66 66 66 
27dda 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
27dde 581 3C 3C 18 18 
27de2 582 00 00 00 00 
27de6 583 C6 C6 C6 C6 
27dea 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
27dee 585 FE EE C6 82 
27df2 586 00 00 00 00 
27df6 587 66 66 66 3C 
27dfa 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
27dfe 589 3C 66 66 66 
27e02 58a 00 00 00 00 
27e06 58b 66 66 66 66 
27e0a 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
27e0e 58d 18 18 18 18 
27e12 58e 00 00 00 00 
27e16 58f 7E 7E 30 30 
27e1a 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
27e1e 591 06 06 7E 7E 
27e22 592 00 00 00 00 
27e26 593 3C 3C 0C 0C 
27e2a 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
27e2e 595 0C 0C 3C 3C 
27e32 596 00 00 00 00 
27e36 597 06 06 0C 0C 
27e3a 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
27e3e 599 60 60 C0 C0 
27e42 59a 00 00 00 00 
27e46 59b 3C 3C 30 30 
27e4a 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
27e4e 59d 30 30 3C 3C 
27e52 59e 00 00 00 00 
27e56 59f 18 18 3C 3C 
27e5a 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
27e5e 5a1 00 00 00 00 
27e62 5a2 00 00 00 00 
27e66 5a3 00 00 00 00 
27e6a 5a4 00 00 00 00 
27e6e 5a5 00 00       | 	byte	$00[18]
27e70 5a6 FE FE 00 00 
27e74 5a7 00 00 0C 0C 
27e78 5a8 18 18 00 00 
27e7c 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
27e80 5aa 00 00 00 00 
27e84 5ab 00 00 00 00 
27e88 5ac 00          | 	byte	$00[9]
27e89 5ac 3C 7C 60 7C 
27e8d 5ad 7E 66 66 7E 
27e91 5ae 7C 00 00 00 
27e95 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
27e99 5b0 3E 7E 66 66 
27e9d 5b1 66 66 66 7E 
27ea1 5b2 3E 00 00 00 
27ea5 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
27ea9 5b4 3C 3E 06 06 
27ead 5b5 06 06 06 7E 
27eb1 5b6 7C 00 00 00 
27eb5 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
27eb9 5b8 7C 7E 66 66 
27ebd 5b9 66 66 66 7E 
27ec1 5ba 7C 00 00 00 
27ec5 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
27ec9 5bc 3C 7E 66 66 
27ecd 5bd 7E 06 06 7E 
27ed1 5be 7C 00 00 00 
27ed5 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
27ed9 5c0 18 7E 7E 18 
27edd 5c1 18 18 18 18 
27ee1 5c2 18 00 00 00 
27ee5 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
27ee9 5c4 7C 7E 66 66 
27eed 5c5 66 66 7E 7C 
27ef1 5c6 60 7E 3E 00 
27ef5 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
27ef9 5c8 3E 7E 66 66 
27efd 5c9 66 66 66 66 
27f01 5ca 66 00 00 00 
27f05 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
27f09 5cc 1C 1C 18 18 
27f0d 5cd 18 18 18 3C 
27f11 5ce 3C 00 00 00 
27f15 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
27f19 5d0 30 30 30 30 
27f1d 5d1 30 30 30 30 
27f21 5d2 30          | 	byte	$30[9]
27f22 5d2 3E 1E 00 00 
27f26 5d3 06 06 06 36 
27f2a 5d4 36 1E 1E 1E 
27f2e 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
27f32 5d6 00 00 00 00 
27f36 5d7 1C 1C 18 18 
27f3a 5d8 18 18 18 18 
27f3e 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
27f42 5da 00 00 00 00 
27f46 5db 00 00 00    | 	byte	$00[7]
27f49 5dc 6C FE FE D6 
27f4d 5dd D6 C6 C6 C6 
27f51 5de C6 00 00 00 
27f55 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
27f59 5e0 3E 7E 66 66 
27f5d 5e1 66 66 66 66 
27f61 5e2 66 00 00 00 
27f65 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
27f69 5e4 3C 7E 66 66 
27f6d 5e5 66 66 66 7E 
27f71 5e6 3C 00 00 00 
27f75 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
27f79 5e8 3E 7E 66 66 
27f7d 5e9 66 66 66 7E 
27f81 5ea 3E 06 06 00 
27f85 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
27f89 5ec 7C 7E 66 66 
27f8d 5ed 66 66 66 7E 
27f91 5ee 7C 60 60 00 
27f95 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
27f99 5f0 3E 7E 66 06 
27f9d 5f1 06 06 06 06 
27fa1 5f2 06 00 00 00 
27fa5 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
27fa9 5f4 7C 7E 06 0E 
27fad 5f5 3C 70 60 7E 
27fb1 5f6 3E 00 00 00 
27fb5 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
27fb9 5f8 7E 7E 18 18 
27fbd 5f9 18 18 18 78 
27fc1 5fa 70 00 00 00 
27fc5 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
27fc9 5fc 66 66 66 66 
27fcd 5fd 66 66 66    | 	byte	$66[7]
27fd0 5fe 7E 7C 00 00 
27fd4 5ff 00 00 00 00 
27fd8 600 00 66 66 66 
27fdc 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
27fe0 602 18 18 00 00 
27fe4 603 00 00 00 00 
27fe8 604 00 C6 C6 D6 
27fec 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
27ff0 606 C6 82 00 00 
27ff4 607 00 00 00 00 
27ff8 608 00 66 66 3C 
27ffc 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
28000 60a 66 66 00 00 
28004 60b 00 00 00 00 
28008 60c 00 66 66 66 
2800c 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
28010 60e 7C 60 7E 3E 
28014 60f 00 00 00 00 
28018 610 00 7E 7E 30 
2801c 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
28020 612 7E 7E 00 00 
28024 613 00 00 30 18 
28028 614 18 18 18 0C 
2802c 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
28030 616 18 30 00 00 
28034 617 00 00 18 18 
28038 618 18 18 18 18 
2803c 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
28040 61a 18 18 00 00 
28044 61b 00 00 0C 18 
28048 61c 18 18 18 30 
2804c 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
28050 61e 18 0C 00 00 
28054 61f 00 00 6C 7E 
28058 620 36 00 00 00 
2805c 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
28060 622 00 00 00 00 
28064 623 00 00 00 00 
28068 624 00          | 	byte	$00[9]
28069 624 18 18 18 18 
2806d 625 18 18 00 00 
28071 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
28074 627             | 'amiga_font     file "amigafont.def"
28074 627 00 6C FE FE 
28078 628 7C 38 10 00 
2807c 629 18 18 18 F8 
28080 62a F8 18 18 18 | a8_font        file "atari8.fnt"
28084 62b C0 C0 C0 C0 
28088 62c C0 C0 C0 C0 | 	byte	$c0[8]
2808c 62d 18 18 18 1F 
28090 62e 1F 00 00 00 
28094 62f 18 18 18 1F 
28098 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
2809c 631 00 00 00 1F 
280a0 632 1F 18 18 18 
280a4 633 C0 E0 70 38 
280a8 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
280ac 635 03 07 0E 1C 
280b0 636 38 70 E0 C0 
280b4 637 80 C0 E0 F0 
280b8 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
280bc 639 00 00 00 00 
280c0 63a F0 F0 F0 F0 
280c4 63b 01 03 07 0F 
280c8 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
280cc 63d F0 F0 F0 F0 
280d0 63e 00 00 00 00 
280d4 63f 0F 0F 0F 0F 
280d8 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
280dc 641 FF FF 00 00 
280e0 642 00 00 00 00 
280e4 643 00 00 00 00 
280e8 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
280ec 645 00 00 00 00 
280f0 646 0F 0F 0F 0F 
280f4 647 00 38 38 EE 
280f8 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
280fc 649 00 00 00 F8 
28100 64a F8 18 18 18 
28104 64b 00 00 00 FF 
28108 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
2810c 64d 18 18 18 FF 
28110 64e FF 18 18 18 
28114 64f 00 00 3C 7E 
28118 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
2811c 651 00 00 00 00 
28120 652 FF FF FF FF 
28124 653 03 03 03 03 
28128 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
2812c 655 00 00 00 FF 
28130 656 FF 18 18 18 
28134 657 18 18 18 FF 
28138 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
2813c 659 0F 0F 0F 0F 
28140 65a 0F 0F 0F 0F | 	byte	$0f[8]
28144 65b 18 18 18 F8 
28148 65c F8 00 00 00 
2814c 65d 1E 06 1E 06 
28150 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
28154 65f 00 18 3C 7E 
28158 660 18 18 18 00 
2815c 661 00 18 18 18 
28160 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
28164 663 00 18 0C 7E 
28168 664 0C 18 00 00 
2816c 665 00 18 30 7E 
28170 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
28174 667 00 00 00 00 
28178 668 00 00 00 00 
2817c 669 00          | 	byte	$00[9]
2817d 669 18 18 18 18 
28181 66a 00 18 00 00 
28185 66b 66 66 66 00 
28189 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
2818d 66d 66 FF 66 66 
28191 66e FF 66 00 18 
28195 66f 7C 06 3C 60 
28199 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
2819d 671 66 36 18 0C 
281a1 672 66 62 00 38 
281a5 673 6C 38 1C F6 
281a9 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
281ad 675 18 18 18 00 
281b1 676 00 00 00 00 
281b5 677 70 38 18 18 
281b9 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
281bd 679 0E 1C 18 18 
281c1 67a 1C 0E 00 00 
281c5 67b 66 3C FF 3C 
281c9 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
281cd 67d 18 18 7E 18 
281d1 67e 18 00 00 00 
281d5 67f 00 00 00 00 
281d9 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
281dd 681 00 00 7E 00 
281e1 682 00 00 00 00 
281e5 683 00 00 00 00 
281e9 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
281ed 685 60 30 18 0C 
281f1 686 06 02 00 00 
281f5 687 3C 66 76 6E 
281f9 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
281fd 689 18 1C 18 18 
28201 68a 18 7E 00 00 
28205 68b 3C 66 30 18 
28209 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
2820d 68d 7E 30 18 30 
28211 68e 66 3C 00 00 
28215 68f 30 38 3C 36 
28219 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
2821d 691 7E 06 3E 60 
28221 692 66 3C 00 00 
28225 693 3C 06 3E 66 
28229 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
2822d 695 7E 60 30 18 
28231 696 0C 0C 00 00 
28235 697 3C 66 3C 66 
28239 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
2823d 699 3C 66 7C 60 
28241 69a 30 1C 00 00 
28245 69b 00 18 18 00 
28249 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
2824d 69d 00 18 18 00 
28251 69e 18 18 0C 60 
28255 69f 30 18 0C 18 
28259 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
2825d 6a1 00 7E 00 00 
28261 6a2 7E 00 00 06 
28265 6a3 0C 18 30 18 
28269 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
2826d 6a5 3C 66 30 18 
28271 6a6 00 18 00 00 
28275 6a7 3C 66 76 76 
28279 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
2827d 6a9 18 3C 66 66 
28281 6aa 7E 66 00 00 
28285 6ab 3E 66 3E 66 
28289 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
2828d 6ad 3C 66 06 06 
28291 6ae 66 3C 00 00 
28295 6af 1E 36 66 66 
28299 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
2829d 6b1 7E 06 3E 06 
282a1 6b2 06 7E 00 00 
282a5 6b3 7E 06 3E 06 
282a9 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
282ad 6b5 7C 06 06 76 
282b1 6b6 66 7C 00 00 
282b5 6b7 66 66 7E 66 
282b9 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
282bd 6b9 7E 18 18 18 
282c1 6ba 18 7E 00 00 
282c5 6bb 60 60 60 60 
282c9 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
282cd 6bd 66 36 1E 1E 
282d1 6be 36 66 00 00 
282d5 6bf 06 06 06 06 
282d9 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
282dd 6c1 C6 EE FE D6 
282e1 6c2 C6 C6 00 00 
282e5 6c3 66 6E 7E 7E 
282e9 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
282ed 6c5 3C 66 66 66 
282f1 6c6 66 3C 00 00 
282f5 6c7 3E 66 66 3E 
282f9 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
282fd 6c9 3C 66 66 66 
28301 6ca 36 6C 00 00 
28305 6cb 3E 66 66 3E 
28309 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
2830d 6cd 3C 06 3C 60 
28311 6ce 60 3C 00 00 
28315 6cf 7E 18 18 18 
28319 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
2831d 6d1 66 66 66 66 
28321 6d2 66          | 	byte	$66[5]
28322 6d2 7E 00 00 66 
28326 6d3 66 66 66 3C 
2832a 6d4 18 00 00 C6 
2832e 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
28332 6d6 C6 00 00 66 
28336 6d7 66 3C 3C 66 
2833a 6d8 66 00 00 66 
2833e 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
28342 6da 18 00 00 7E 
28346 6db 30 18 0C 06 
2834a 6dc 7E 00 00 78 
2834e 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
28352 6de 78 00 00 02 
28356 6df 06 0C 18 30 
2835a 6e0 60 00 00 1E 
2835e 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
28362 6e2 1E 00 00 10 
28366 6e3 38 6C C6 00 
2836a 6e4 00 00 00 00 
2836e 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
28372 6e6 FF 00 00 18 
28376 6e7 3C 7E 7E 3C 
2837a 6e8 18 00 00 00 
2837e 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
28382 6ea 7C 00 00 06 
28386 6eb 06 3E 66 66 
2838a 6ec 3E 00 00 00 
2838e 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
28392 6ee 3C 00 00 60 
28396 6ef 60 7C 66 66 
2839a 6f0 7C 00 00 00 
2839e 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
283a2 6f2 3C 00 00 70 
283a6 6f3 18 7C 18 18 
283aa 6f4 18 00 00 00 
283ae 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
283b2 6f6 60 3E 00 06 
283b6 6f7 06 3E 66 66 
283ba 6f8 66 00 00 18 
283be 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
283c2 6fa 3C 00 00 60 
283c6 6fb 00 60 60 60 
283ca 6fc 60 3C 00 06 
283ce 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
283d2 6fe 66 00 00 1C 
283d6 6ff 18 18 18 18 
283da 700 3C 00 00 00 
283de 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
283e2 702 C6 00 00 00 
283e6 703 3E 66 66 66 
283ea 704 66 00 00 00 
283ee 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
283f2 706 3C 00 00 00 
283f6 707 3E 66 66 3E 
283fa 708 06 06 00 00 
283fe 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
28402 70a 60 60 00 00 
28406 70b 3E 66 06 06 
2840a 70c 06 00 00 00 
2840e 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
28412 70e 3E 00 00 18 
28416 70f 7E 18 18 18 
2841a 710 70 00 00 00 
2841e 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
28422 712 7C 00 00 00 
28426 713 66 66 66 3C 
2842a 714 18 00 00 00 
2842e 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
28432 716 6C 00 00 00 
28436 717 66 3C 18 3C 
2843a 718 66 00 00 00 
2843e 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
28442 71a 30 1E 00 00 
28446 71b 7E 30 18 0C 
2844a 71c 7E 00 00 18 
2844e 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
28452 71e 3C 00 18 18 
28456 71f 18 18 18 18 
2845a 720 18 18 00 7E 
2845e 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
28462 722 60 00 10 18 
28466 723 1C 1E 1C 18 
2846a 724 10 00 08 18 
2846e 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
28472 726 08 00       | 	byte	$08, $00
28474 727 00 00 00 00 
28478 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
28479 728 80 00 00 00 
2847d 729 00 80 00 00 
28481 72a 80 80 00 00 
28485 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
28489 72c 80 00 80 00 
2848d 72d 00 40 80 00 
28491 72e AA AA AA 00 
28495 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
28499 730 FF 00 00 00 
2849d 731 00 FF 00 00 
284a1 732 FF FF 00 00 
284a5 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
284a9 734 FF 00 FF 00 
284ad 735 00 FF FF 00 
284b1 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
284b4 737 00 00 00 00 
284b8 738 00          | ataripalette   file "ataripalettep2.def"
284b9 738 11 11 11 00 
284bd 739 22 22 22 00 
284c1 73a 33 33 33 00 
284c5 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
284c9 73c 55 55 55 00 
284cd 73d 66 66 66 00 
284d1 73e 77 77 77 00 
284d5 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
284d9 740 99 99 99 00 
284dd 741 AA AA AA 00 
284e1 742 BB BB BB 00 
284e5 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
284e9 744 DD DD DD 00 
284ed 745 EE EE EE 00 
284f1 746 FF FF FF 00 
284f5 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
284f9 748 00 14 40 00 
284fd 749 00 1E 60 00 
28501 74a 00 28 80 00 
28505 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
28509 74c 00 3C BF 00 
2850d 74d 00 46 DF 00 
28511 74e 00 50 FF 00 
28515 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
28519 750 39 77 FF 00 
2851d 751 55 8A FF 00 
28521 752 71 9E FF 00 
28525 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
28529 754 AA C5 FF 00 
2852d 755 C6 D8 FF 00 
28531 756 E3 EC FF 00 
28535 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
28539 758 00 00 40 00 
2853d 759 00 00 60 00 
28541 75a 00 00 80 00 
28545 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
28549 75c 00 00 BF 00 
2854d 75d 00 00 DF 00 
28551 75e 00 00 FF 00 
28555 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
28559 760 39 39 FF 00 
2855d 761 55 55 FF 00 
28561 762 71 71 FF 00 
28565 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
28569 764 AA AA FF 00 
2856d 765 C6 C6 FF 00 
28571 766 E3 E3 FF 00 
28575 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
28579 768 20 00 40 00 
2857d 769 30 00 60 00 
28581 76a 40 00 80 00 
28585 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
28589 76c 60 00 BF 00 
2858d 76d 70 00 DF 00 
28591 76e 80 00 FF 00 
28595 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
28599 770 9C 39 FF 00 
2859d 771 AA 55 FF 00 
285a1 772 B8 71 FF 00 
285a5 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
285a9 774 D5 AA FF 00 
285ad 775 E3 C6 FF 00 
285b1 776 F1 E3 FF 00 
285b5 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
285b9 778 40 00 40 00 
285bd 779 60 00 60 00 
285c1 77a 80 00 80 00 
285c5 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
285c9 77c BF 00 BF 00 
285cd 77d DF 00 DF 00 
285d1 77e FF 00 FF 00 
285d5 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
285d9 780 FF 39 FF 00 
285dd 781 FF 55 FF 00 
285e1 782 FF 71 FF 00 
285e5 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
285e9 784 FF AA FF 00 
285ed 785 FF C6 FF 00 
285f1 786 FF E3 FF 00 
285f5 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
285f9 788 40 00 20 00 
285fd 789 60 00 30 00 
28601 78a 80 00 40 00 
28605 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
28609 78c BF 00 60 00 
2860d 78d DF 00 70 00 
28611 78e FF 00 80 00 
28615 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
28619 790 FF 39 9C 00 
2861d 791 FF 55 AA 00 
28621 792 FF 71 B8 00 
28625 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
28629 794 FF AA D5 00 
2862d 795 FF C6 E3 00 
28631 796 FF E3 F1 00 
28635 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
28639 798 40 00 00 00 
2863d 799 60 00 00 00 
28641 79a 80 00 00 00 
28645 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
28649 79c BF 00 00 00 
2864d 79d DF 00 00 00 
28651 79e FF 00 00 00 
28655 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
28659 7a0 FF 39 39 00 
2865d 7a1 FF 55 55 00 
28661 7a2 FF 71 71 00 
28665 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
28669 7a4 FF AA AA 00 
2866d 7a5 FF C6 C6 00 
28671 7a6 FF E3 E3 00 
28675 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
28679 7a8 40 10 00 00 
2867d 7a9 60 18 00 00 
28681 7aa 80 20 00 00 
28685 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
28689 7ac BF 30 00 00 
2868d 7ad DF 38 00 00 
28691 7ae FF 40 00 00 
28695 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
28699 7b0 FF 6A 39 00 
2869d 7b1 FF 80 55 00 
286a1 7b2 FF 95 71 00 
286a5 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
286a9 7b4 FF BF AA 00 
286ad 7b5 FF D5 C6 00 
286b1 7b6 FF EA E3 00 
286b5 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
286b9 7b8 40 20 00 00 
286bd 7b9 60 30 00 00 
286c1 7ba 80 40 00 00 
286c5 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
286c9 7bc BF 60 00 00 
286cd 7bd DF 70 00 00 
286d1 7be FF 80 00 00 
286d5 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
286d9 7c0 FF 9C 39 00 
286dd 7c1 FF AA 55 00 
286e1 7c2 FF B8 71 00 
286e5 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
286e9 7c4 FF D5 AA 00 
286ed 7c5 FF E3 C6 00 
286f1 7c6 FF F1 E3 00 
286f5 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
286f9 7c8 40 30 00 00 
286fd 7c9 60 48 00 00 
28701 7ca 80 60 00 00 
28705 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
28709 7cc BF 90 00 00 
2870d 7cd DF A8 00 00 
28711 7ce FF C0 00 00 
28715 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
28719 7d0 FF CE 39 00 
2871d 7d1 FF D5 55 00 
28721 7d2 FF DC 71 00 
28725 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
28729 7d4 FF EA AA 00 
2872d 7d5 FF F1 C6 00 
28731 7d6 FF F8 E3 00 
28735 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
28739 7d8 30 40 00 00 
2873d 7d9 48 60 00 00 
28741 7da 60 80 00 00 
28745 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
28749 7dc 90 BF 00 00 
2874d 7dd A8 DF 00 00 
28751 7de C0 FF 00 00 
28755 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
28759 7e0 CE FF 39 00 
2875d 7e1 D5 FF 55 00 
28761 7e2 DC FF 71 00 
28765 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
28769 7e4 EA FF AA 00 
2876d 7e5 F1 FF C6 00 
28771 7e6 F8 FF E3 00 
28775 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
28779 7e8 00 40 00 00 
2877d 7e9 00 60 00 00 
28781 7ea 00 80 00 00 
28785 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
28789 7ec 00 BF 00 00 
2878d 7ed 00 DF 00 00 
28791 7ee 00 FF 00 00 
28795 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
28799 7f0 39 FF 39 00 
2879d 7f1 55 FF 55 00 
287a1 7f2 71 FF 71 00 
287a5 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
287a9 7f4 AA FF AA 00 
287ad 7f5 C6 FF C6 00 
287b1 7f6 E3 FF E3 00 
287b5 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
287b9 7f8 00 40 14 00 
287bd 7f9 00 60 1E 00 
287c1 7fa 00 80 28 00 
287c5 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
287c9 7fc 00 BF 3C 00 
287cd 7fd 00 DF 46 00 
287d1 7fe 00 FF 50 00 
287d5 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
287d9 800 39 FF 77 00 
287dd 801 55 FF 8A 00 
287e1 802 71 FF 9E 00 
287e5 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
287e9 804 AA FF C5 00 
287ed 805 C6 FF D8 00 
287f1 806 E3 FF EC 00 
287f5 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
287f9 808 00 40 28 00 
287fd 809 00 60 3C 00 
28801 80a 00 80 50 00 
28805 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
28809 80c 00 BF 78 00 
2880d 80d 00 DF 8C 00 
28811 80e 00 FF A0 00 
28815 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
28819 810 39 FF B5 00 
2881d 811 55 FF C0 00 
28821 812 71 FF CA 00 
28825 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
28829 814 AA FF DF 00 
2882d 815 C6 FF EA 00 
28831 816 E3 FF F4 00 
28835 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
28839 818 00 40 40 00 
2883d 819 00 60 60 00 
28841 81a 00 80 80 00 
28845 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
28849 81c 00 BF BF 00 
2884d 81d 00 DF DF 00 
28851 81e 00 FF FF 00 
28855 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
28859 820 39 FF FF 00 
2885d 821 55 FF FF 00 
28861 822 71 FF FF 00 
28865 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
28869 824 AA FF FF 00 
2886d 825 C6 FF FF 00 
28871 826 E3 FF FF 00 
28875 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
28879 828 00 28 40 00 
2887d 829 00 3C 60 00 
28881 82a 00 50 80 00 
28885 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
28889 82c 00 78 BF 00 
2888d 82d 00 8C DF 00 
28891 82e 00 A0 FF 00 
28895 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
28899 830 39 B5 FF 00 
2889d 831 55 C0 FF 00 
288a1 832 71 CA FF 00 
288a5 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
288a9 834 AA DF FF 00 
288ad 835 C6 EA FF 00 
288b1 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
288b4 837             | 
288b4 837             | '**********************************************************************************
288b4 837             | '
288b4 837             | '        Timings and colors definitions
288b4 837             | '
288b4 837             | '**********************************************************************************
288b4 837             | 
288b4 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
288b4 837 10 00 00 00 
288b8 838 50 00 00 00 
288bc 839 0C 00 00 00 
288c0 83a 00 04 00 00 | timings         long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
288c4 83b 08 00 00 00 
288c8 83c 04 00 00 00 
288cc 83d 08 00 00 00 
288d0 83e 80 00 00 00 | 	byte	$08, $00, $00, $00, $04, $00, $00, $00, $08, $00, $00, $00, $80, $00, $00, $00
288d4 83f 40 02 00 00 
288d8 840 6A 8C 15 14 
288dc 841 FB 06 B7 01 
288e0 842 40 02 00 00 | 	byte	$40, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $40, $02, $00, $00
288e4 843 00 00 00 00 
288e8 844 C0 00 00 00 
288ec 845 00 00 00 00 
288f0 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
288f4 847 00 75 C7 97 
288f8 848 27 47 F6 0A 
288fc 849 05 79 CB 9B 
28900 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
28904 84b             | 
28904 84b             | ''--------  Initialization  ----------------------------------------------------------------
28904 84b             | 
28904 84b 28 0C 64 FD | hdmi            setq    #6
28908 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
2890c 84d 28 10 64 FD |                 setq    #8
28910 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
28914 84f             | 
28914 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
28918 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
2891c 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
28920 852 D6 C6 01 F1 |                 add     t1,hbase
28924 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
28928 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
2892c 855 7B 0B 80 5F 
28930 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
28934 857 66 66 86 FF 
28938 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
2893c 859             | '
2893c 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
28940 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
28944 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
28948 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
2894c 85d             | 
2894c 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
28950 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
28954 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
28958 860             | 
28958 860             | ''--------  frame rendering main loop  ---------------------------------------------------
28958 860             | 
28958 860 28 06 64 FD | p101            setq 	#3
2895c 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
28960 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
28964 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
28968 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
2896c 865 00 A0 05 F6 |                 mov     dlinum, #0
28970 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
28974 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
28978 868             | 
28978 868             | 
28978 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
2897c 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
28980 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
28984 86b             |                 
28984 86b             | 
28984 86b             | 
28984 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
28984 86b             |   
28984 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
28988 86c 29 FE 65 3D |          if_nc  setq2   #255
2898c 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
28990 86e             | 
28990 86e             | '' -----   up porch (before the picture)
28990 86e             | 
28990 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
28994 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
28998 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
2899c 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
289a0 872             |  
289a0 872             |    
289a0 872             |  
289a0 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
289a4 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
289a8 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
289ac 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
289b0 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
289b4 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
289b8 878             | 
289b8 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
289bc 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
289c0 87a 48 00 B0 FD | 		call    #dli
289c4 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
289c8 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
289cc 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
289d0 87e             |                 	
289d0 87e             |                 
289d0 87e             | 
289d0 87e             |  
289d0 87e             | '' ------- the main screen drawing starts here
289d0 87e             | 
289d0 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
289d4 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
289d8 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
289dc 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
289e0 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
289e4 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
289e8 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
289ec 885             |               
289ec 885             | 
289ec 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
289f0 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
289f4 887             | 
289f4 887             | ' ---------------- All visible lines displayed now, start vblank  
289f4 887             | 
289f4 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
289f8 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
289fc 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
28a00 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
28a04 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
28a08 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
28a0c 88d             | 
28a0c 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
28a0c 88d             | 
28a0c 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
28a0c 88d             | 
28a0c 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
28a10 88e             | 
28a10 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
28a14 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
28a18 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
28a1c 891             | 
28a1c 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
28a20 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
28a24 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
28a28 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
28a2c 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
28a30 896             | 
28a30 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
28a34 897 DD C6 41 F8 |                 getnib  t1,dl,#0
28a38 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
28a3c 899 70 00 90 AD |     if_z        jmp     #preload
28a40 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
28a44 89b 94 00 90 AD |     if_z        jmp     #preload2
28a48 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
28a4c 89d 0C 00 90 AD |     if_z        jmp     #p390
28a50 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
28a54 89f 28 00 90 AD |     if_z        jmp     #p391  
28a58 8a0             | 
28a58 8a0 2D 00 64 FD | p308            ret
28a5c 8a1             |    
28a5c 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
28a60 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
28a64 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
28a68 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
28a6c 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
28a70 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
28a74 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
28a78 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
28a7c 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
28a80 8aa             |  
28a80 8aa             | '' --------  Reload palette. To do 
28a80 8aa             | 
28a80 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
28a84 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
28a88 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
28a8c 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
28a90 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
28a94 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
28a98 8b0 70 FF 9F FD |         	jmp     #dli                
28a9c 8b1             |       
28a9c 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
28a9c 8b1             | 
28a9c 8b1             | 
28a9c 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
28a9c 8b1             | 
28a9c 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
28aa0 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
28aa4 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
28aa8 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
28aac 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
28ab0 8b6             |         
28ab0 8b6             | '' -------------- Preload a line from PSRAM        
28ab0 8b6             |         
28ab0 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
28ab4 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
28ab8 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
28abc 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
28ac0 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
28ac4 8bb             | 
28ac4 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
28ac8 8bc 32 B7 01 F6 |                 mov     buf2,a1024
28acc 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
28ad0 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
28ad4 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
28ad8 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
28adc 8c1             |  
28adc 8c1             |  
28adc 8c1             | preload2      '  incmod  dlinum,#3
28adc 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
28ae0 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
28ae4 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
28ae8 8c4 28 02 64 FD |                 setq	#1
28aec 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
28af0 8c6             |                 
28af0 8c6             | 
28af0 8c6             | '' -------------- Draw sprites
28af0 8c6             | 
28af0 8c6 CF 5C 02 F6 | sprite          mov t8,frames
28af4 8c7 10 5C 0E F5 | 		and t8,#16 wz
28af8 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
28afc 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
28b00 8ca             | 		
28b00 8ca             | 
28b00 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
28b04 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
28b08 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
28b0c 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
28b10 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
28b14 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
28b18 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
28b1c 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
28b20 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
28b24 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
28b28 8d4 01 52 86 F1 |                 sub     sprite_h,#1
28b2c 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
28b30 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
28b34 8d7             | 
28b34 8d7             | 
28b34 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
28b38 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
28b3c 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
28b40 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
28b44 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
28b48 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
28b4c 8dd 00 5E 06 F6 |                 mov 	t9,#0
28b50 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
28b54 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
28b58 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
28b5c 8e1             |      
28b5c 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
28b60 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
28b64 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
28b68 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
28b6c 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
28b70 8e6             |                 
28b70 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
28b74 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
28b78 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
28b7c 8e9             |   		
28b7c 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
28b80 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
28b84 8eb             | 
28b84 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
28b88 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
28b8c 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
28b90 8ee             |  
28b90 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
28b94 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
28b98 8f0 10 00 90 CD |      if_c 	jmp     #p899		
28b9c 8f1             | 	
28b9c 8f1             | 	
28b9c 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
28ba0 8f2 28 CD 01 F1 | 		add	t4,sprite_w
28ba4 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
28ba8 8f4             | 
28ba8 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
28bac 8f5             | 
28bac 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
28bb0 8f6 01 58 86 F1 | 	 	sub     t6,#1
28bb4 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
28bb8 8f8             | 
28bb8 8f8 28 58 62 FD |                 setq   	t6
28bbc 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
28bc0 8fa 28 5D 02 F6 |                 mov t8,sprite_w
28bc4 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
28bc8 8fc 24 00 90 AD |         if_z    jmp #p898
28bcc 8fd             |          
28bcc 8fd             |         
28bcc 8fd 70 5F 06 F6 |                 mov  t9,#368
28bd0 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
28bd4 8ff             | 
28bd4 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
28bd8 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
28bdc 901 FF FF 7F FF 
28be0 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
28be4 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
28be8 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
28bec 905 2D 01 00 F5 |                 and 0-0, t7
28bf0 906             |                
28bf0 906             | 
28bf0 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
28bf4 907 E5 E0 7A FA |                 wmlong 368,t3				
28bf8 908             |                 
28bf8 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
28bfc 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
28c00 90a 2D 00 64 FD |                 ret
28c04 90b             | 	
28c04 90b             | 	
28c04 90b             |                
28c04 90b             |  
28c04 90b             | '' -------------- Graphics line ------------------------------------------------------------
28c04 90b             |  
28c04 90b             | 
28c04 90b             | '' consts and vars
28c04 90b             | 
28c04 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
28c08 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
28c0c 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
28c10 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
28c14 90f             | 
28c14 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
28c18 910             | 
28c18 910             | '------ these longs will be set by setmode function
28c18 910             | 
28c18 910 00 00 00 00 | m_bs            long    0        'blanks before sync
28c1c 911 00 00 00 00 | m_sn            long    0        'sync
28c20 912 00 00 00 00 | m_bv            long    0        'blanks before visible
28c24 913 00 00 00 00 | m_vi            long    0        'visible pixels #
28c28 914             | 'm_border        long    0        'left/right borders
28c28 914 00 00 00 00 | i_upporch       long    0        'up porch lines
28c2c 915 00 00 00 00 | i_vsync         long    0        'vsync lines
28c30 916 00 00 00 00 | i_downporch     long    0        'down porch lines
28c34 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
28c38 918 00 00 00 00 | i_totalvis      long    0
28c3c 919             | 
28c3c 919             | '-------------------------------------
28c3c 919             |  
28c3c 919 00 00 00 00 | linenum         long    0
28c40 91a 00 00 00 00 | frames          long    0
28c44 91b 00 00 00 00 | dlinum long 0
28c48 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
28c4c 91d             | 
28c4c 91d 00 00 00 00 | vblankptr       long    0
28c50 91e 00 00 00 00 | modeptr         long    0
28c54 91f 00 00 00 00 | paletteptr      long    0
28c58 920 00 00 00 00 | dlptr           long    0
28c5c 921 01 00 00 00 | hbase           long    1
28c60 922 00 00 00 00 | mailbox         long    0
28c64 923 00 00 00 00 | spriteptr          long 0
28c68 924             | 
28c68 924 00 00 00 00 | cmd             long    0
28c6c 925 00 B0 07 00 | buf1            long    $80000-16384-4096
28c70 926 00 04 00 00 | buf2            long    1024
28c74 927 01 00 00 00 | dlptr2          long    1
28c78 928 01 00 00 00 | dl              long    1
28c7c 929             | 
28c7c 929 00 00 00 00 | buf1c long 0
28c80 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
28c84 92b 01 00 00 00 | framebuf2       long    1
28c88 92c 01 00 00 00 | hsync0          long    1
28c8c 92d 01 00 00 00 | hsync1          long    1
28c90 92e             | 
28c90 92e 01 00 00 00 | t1              long    1
28c94 92f 00 00 00 00 | t2 long 0
28c98 930 00 00 00 00 | t3 long 0
28c9c 931 00 00 00 00 | t4 long 0
28ca0 932             | 
28ca0 932 00 00 00 00 | rcnt            long    0  'dl repeat count
28ca4 933 00 00 00 00 | rcnt2           long    0
28ca8 934 00 00 00 00 | rcnt2a          long    0
28cac 935 00 00 00 00 | roffset         long    0
28cb0 936 00 00 00 00 | rdl             long    0  'dl repeat line
28cb4 937 00 00 00 00 | dlc             long    0  'dl command
28cb8 938             | 
28cb8 938 FF FF FF FF | affffffff       long    $ffffffff
28cbc 939 00 00 00 00 | sprite1pointer long 0
28cc0 93a 00 00 00 00 | sprite1xy      long 0
28cc4 93b 00 00 00 00 | sprite1wh      long 0
28cc8 93c 00 00 00 00 | sprite2pointer long 0
28ccc 93d 00 00 00 00 | sprite2xy      long 0
28cd0 93e 00 00 00 00 | sprite2wh      long 0
28cd4 93f 00 00 00 00 | sprite3pointer long 0
28cd8 940 00 00 00 00 | sprite3xy      long 0
28cdc 941 00 00 00 00 | sprite3wh      long 0
28ce0 942 00 00 00 00 | sprite4pointer long 0
28ce4 943 00 00 00 00 | sprite4xy      long 0
28ce8 944 00 00 00 00 | sprite4wh      long 0
28cec 945 00 00 00 00 | sprite5pointer long 0
28cf0 946 00 00 00 00 | sprite5xy      long 0
28cf4 947 00 00 00 00 | sprite5wh      long 0
28cf8 948 00 00 00 00 | sprite6pointer long 0
28cfc 949 00 00 00 00 | sprite6xy      long 0
28d00 94a 00 00 00 00 | sprite6wh      long 0
28d04 94b 00 00 00 00 | sprite7pointer long 0
28d08 94c 00 00 00 00 | sprite7xy      long 0
28d0c 94d 00 00 00 00 | sprite7wh      long 0
28d10 94e 00 00 00 00 | sprite8pointer long 0
28d14 94f 00 00 00 00 | sprite8xy      long 0
28d18 950 00 00 00 00 | sprite8wh      long 0
28d1c 951 00 00 00 00 | sprite9pointer long 0
28d20 952 00 00 00 00 | sprite9xy      long 0
28d24 953 00 00 00 00 | sprite9wh      long 0
28d28 954 00 00 00 00 | sprite10pointer long 0
28d2c 955 00 00 00 00 | sprite10xy      long 0
28d30 956 00 00 00 00 | sprite10wh      long 0
28d34 957 00 00 00 00 | sprite11pointer long 0
28d38 958 00 00 00 00 | sprite11xy      long 0
28d3c 959 00 00 00 00 | sprite11wh      long 0
28d40 95a 00 00 00 00 | sprite12pointer long 0
28d44 95b 00 00 00 00 | sprite12xy      long 0
28d48 95c 00 00 00 00 | sprite12wh      long 0
28d4c 95d 00 00 00 00 | sprite13pointer long 0
28d50 95e 00 00 00 00 | sprite13xy      long 0
28d54 95f 00 00 00 00 | sprite13wh      long 0
28d58 960 00 00 00 00 | sprite14pointer long 0
28d5c 961 00 00 00 00 | sprite14xy      long 0
28d60 962 00 00 00 00 | sprite14wh      long 0
28d64 963 00 00 00 00 | sprite15pointer long 0
28d68 964 00 00 00 00 | sprite15xy      long 0
28d6c 965 00 00 00 00 | sprite15wh      long 0
28d70 966 00 00 00 00 | sprite16pointer long 0
28d74 967 00 00 00 00 | sprite16xy      long 0
28d78 968 00 00 00 00 | sprite16wh      long 0
28d7c 969 00 00 00 00 | sprite17pointer long 0
28d80 96a 00 00 00 00 | sprite17xy      long 0
28d84 96b 00 00 00 00 | sprite17wh      long 0
28d88 96c 00 00 00 00 | sprite18pointer long 0
28d8c 96d 00 00 00 00 | sprite18xy      long 0
28d90 96e 00 00 00 00 | sprite18wh      long 0
28d94 96f 00 00 00 00 | spritenum long 0
28d98 970             | 
28d98 970 00 00 00 00 | spriteline long 0
28d9c 971 84 03 00 00 | sprite_x long 900
28da0 972 00 00 00 00 | sprite_y long 0
28da4 973 10 00 00 00 | sprite_w long 16
28da8 974 40 00 00 00 | sprite_h long 64
28dac 975 00 00 00 00 | l2 long 0
28db0 976 00 00 00 00 | t5 long 0
28db4 977 00 00 00 00 | t6 long 0
28db8 978 00 00 00 00 | t7 long 0
28dbc 979 00 00 00 00 | t8 long 0
28dc0 97a 00 00 00 00 | t9 long 0
28dc4 97b 00 00 00 00 | preloadaddr long 0
28dc8 97c 00 00 00 00 | preloadlineaddr long 0
28dcc 97d 00 04 00 00 | a1024 long 1024
28dd0 97e             | 
28dd0 97e E0 03 00 00 | aa long 992
28dd4 97f FF 03 00 00 | a1023 long 1023
28dd8 980 00 10 00 00 | a4096 long 4096
28ddc 981             |  fit 368
28ddc 981             | _psram_spin2_dat_
28ddc 981 00 00 00 00 
      ...             
28ed4 9bf 00 00 00 00 
28ed8 9c0 00 00 00 00 |     listdata long 0[8*8]
28edc 9c1             |             orgh
28edc                 | 
28edc                 | ' driver state
28edc     FF FF FF FF | drivercog   long    -1  ' COG id of driver
28ee0     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
28ee4                 | 
28ee4                 | ' delay profile
28ee4     07 00 00 00 
28ee8     00 CF 7B 05 
28eec     80 D1 F0 08 
28ef0     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
28ef4     80 C4 60 0F 
28ef8     80 39 7A 12 
28efc     40 2D D9 13 
28f00     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
28f04                 | 
28f04                 | ' data to be passed to driver when starting it
28f04                 | startupData
28f04     00 00 00 00 |     long    0           ' current frequency
28f08     00 00 00 00 |     long    FLAGS       ' optional flags for driver
28f0c     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
28f10     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
28f14     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
28f18     24 8F 02 00 |     long    deviceData  ' address of devices data structure in HUBRAM
28f1c     A4 8F 02 00 |     long    qosData     ' address of QoS data structure in HUBRAM
28f20     C4 8F 02 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
28f24                 | 
28f24                 | ' data for memory
28f24                 | deviceData
28f24                 |     ' 16 bank parameters follow (16MB per bank)
28f24     00 00 00 00 
      ...             
28f5c     00 00 00 00 
28f60     00 00 00 00 |     long    0[16]                               ' banks 0-15
28f64                 |     ' 16 banks of pin parameters follow
28f64     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
28f68     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
28f6c     FF FF FF FF 
      ...             
28f9c     FF FF FF FF 
28fa0     FF FF FF FF |     long    -1[14]                              ' banks 2-15
28fa4                 | 
28fa4                 | ' data for COG polling
28fa4                 | qosData 
28fa4     00 00 FF FF 
28fa8     00 00 FF FF 
28fac     00 00 FF FF 
28fb0     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
28fb4     00 00 FF FF 
28fb8     00 00 FF FF 
28fbc     00 00 FF FF 
28fc0     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
28fc4                 |     
28fc4                 | ' mailbox storage
28fc4                 | 
28fc4                 | mailboxes
28fc4     00 00 00 00 
      ...             
2901c     00 00 00 00 
29020     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
29024                 | 	alignl
29024                 | _psram16drv_spin2_dat_
29024                 |                             orgh
29024     00 00 00 00 
      ...             
2903c     00 00 00 00 
29040     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
29044                 | 
29044                 | driver_start
29044                 |                             org
29044 000             | '..................................................................................................
29044 000             | ' Memory layout for COG RAM once operational:
29044 000             | '
29044 000             | '  COG RAM address      Usage
29044 000             | '  ---------------      ----
29044 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
29044 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
29044 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
29044 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
29044 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
29044 000             | '  ~$198-$1F3           State and register variables
29044 000             | '
29044 000             | ' Also during driver COG startup:
29044 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
29044 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
29044 000             | '..................................................................................................
29044 000             |                             
29044 000             | ' Mailbox storage after vector initialization
29044 000             | 
29044 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
29048 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
2904c 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
29050 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
29054 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
29058 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
2905c 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
29060 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
29064 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
29068 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
2906c 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
29070 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
29074 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
29078 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
2907c 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
29080 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
29084 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
29088 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
2908c 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
29090 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
29094 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
29098 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
2909c 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
290a0 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
290a4 018             | 
290a4 018             | ' Mailbox parameter addresses per COG once patched
290a4 018             |                             
290a4 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
290a8 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
290ac 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
290b0 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
290b4 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
290b8 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
290bc 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
290c0 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
290c4 020             | 
290c4 020             | '..................................................................................................
290c4 020             | ' Per COG request and state setup and service branching
290c4 020             |         
290c4 020             | cog0                 
290c4 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
290c8 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
290cc 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
290d0 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
290d4 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
290d8 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
290dc 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
290e0 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
290e4 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
290e8 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
290ec 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
290f0 02b 33 CA 63 FD |                             execf   request-0               'jump to service
290f4 02c             | cog1                        
290f4 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
290f8 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
290fc 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
29100 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
29104 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
29108 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2910c 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
29110 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
29114 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
29118 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2911c 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
29120 037 33 CA 63 FD |                             execf   request-0               'jump to service
29124 038             | cog2                         
29124 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
29128 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
2912c 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
29130 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
29134 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
29138 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2913c 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
29140 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
29144 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
29148 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2914c 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
29150 043 33 CA 63 FD |                             execf   request-0               'jump to service
29154 044             | cog3                        
29154 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
29158 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
2915c 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
29160 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
29164 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
29168 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2916c 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
29170 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
29174 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
29178 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2917c 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
29180 04f 33 CA 63 FD |                             execf   request-0               'jump to service
29184 050             | cog4                        
29184 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
29188 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
2918c 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
29190 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
29194 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
29198 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2919c 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
291a0 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
291a4 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
291a8 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
291ac 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
291b0 05b 33 CA 63 FD |                             execf   request-0               'jump to service
291b4 05c             | cog5                        
291b4 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
291b8 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
291bc 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
291c0 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
291c4 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
291c8 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
291cc 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
291d0 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
291d4 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
291d8 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
291dc 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
291e0 067 33 CA 63 FD |                             execf   request-0               'jump to service
291e4 068             | cog6                        
291e4 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
291e8 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
291ec 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
291f0 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
291f4 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
291f8 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
291fc 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
29200 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
29204 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
29208 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2920c 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
29210 073 33 CA 63 FD |                             execf   request-0               'jump to service
29214 074             | cog7                        
29214 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
29218 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
2921c 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
29220 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
29224 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
29228 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2922c 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
29230 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
29234 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
29238 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2923c 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
29240 07f 33 CA 63 FD |                             execf   request-0               'jump to service
29244 080             |                             fit     128
29244 080             | 
29244 080             |                             fit     128
29244 080             | pad                         long    0[128-$]                'align init code to $80
29244 080             | 
29244 080             | '..................................................................................................
29244 080             | 
29244 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
29244 080             | 
29244 080             | init                        
29244 080             |                             ' get driver scratch long address in hub
29244 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
29248 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
2924c 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
29250 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
29254 084             |                     
29254 084             |                             ' read in the additional LUT RAM code
29254 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
29258 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
2925c 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
29260 087             | 
29260 087             |                             ' read the startup parameters
29260 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
29264 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
29268 089             | 
29268 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
29268 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
2926c 08a             | 
2926c 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
29270 08b 01 00 00 5F 
29274 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
29278 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
2927c 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
29280 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
29284 090             | 
29284 090             |                             ' setup data pin modes and data bus pin group in streamer commands
29284 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
29288 091 01 00 00 FF 
2928c 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
29290 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
29294 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
29298 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
2929c 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
292a0 097 08 DE 47 F5 |                             or      a, #8
292a4 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
292a8 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
292ac 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
292b0 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
292b4 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
292b8 09d 01 DE 07 F1 |                             add     a, #1
292bc 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
292c0 09f             |  
292c0 09f             |                             ' setup device control pin states
292c0 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
292c4 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
292c8 0a1 01 00 00 FF 
292cc 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
292d0 0a3             | 
292d0 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
292d4 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
292d8 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
292dc 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
292e0 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
292e4 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
292e8 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
292ec 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
292f0 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
292f4 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
292f8 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
292fc 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
29300 0af             | pinloop
29300 0af             |                             ' generate minimum CE high time before access
29300 0af A1 07 00 FF 
29304 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
29308 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
2930c 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
29310 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
29314 0b4 1F DE 63 FD |                             waitx   a                       'delay
29318 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
2931c 0b6             | 
2931c 0b6             |                             ' setup the COG mailboxes and addresses 
2931c 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
29320 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
29324 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
29328 0b9             | 
29328 0b9 28 2E 64 FD |                             setq    #24-1
2932c 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
29330 0bb             | 
29330 0bb             |                             ' setup the polling loop for active COGs 
29330 0bb 01 C2 63 FD |                             cogid   id
29334 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
29338 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
2933c 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
29340 0bf 0A F0 07 F6 |                             mov     ptra, #10
29344 0c0 E1 F1 03 FA |                             mul     ptra, id
29348 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
2934c 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
29350 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
29354 0c4 03 C2 07 FA |                             mul     id, #3
29358 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
2935c 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
29360 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
29364 0c8 D8 01 B0 FD |                             call    #reloadcogs
29368 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
2936c 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
29370 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
29370 0cb D8 E5 B7 F9 |                             setd    d, #addr1
29374 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
29378 0cd 08 04 DC FC |                             rep     #2, #8
2937c 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
29380 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
29384 0d0             | 
29384 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
29384 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
29384 0d0 01 C2 63 FD |                             cogid   id
29388 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
2938c 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
29390 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
29394 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
29398 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
2939c 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
293a0 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
293a4 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
293a8 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
293ac 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
293b0 0db 3F E4 A7 F9 |                             alti    d, #%111_111
293b4 0dc 00 00 00 F6 |                             mov     0-0, 0-0
293b8 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
293bc 0de A5 E5 03 F1 |                             add     d, const512
293c0 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
293c4 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
293c8 0e1 00 00 00 F6 |                             mov     0-0, 0-0
293cc 0e2             |                             
293cc 0e2             |                             ' setup register values for control vector loop setup after we return
293cc 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
293d0 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
293d4 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
293d8 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
293dc 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
293e0 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
293e4 0e8 D0 C3 8F F9 |                             altd    id, #id0
293e8 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
293ec 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
293f0 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
293f4 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
293f8 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
293fc 0ee             |  
293fc 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
29400 0ef 07 CA 07 F5 |                             and     request, #7
29404 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
29408 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
2940c 0f2             |                             fit     $100                    'ensure all init code fits this space
2940c 0f2             | 
2940c 0f2             |                             fit     $100                    'ensure all init code fits this space
2940c 0f2             | 
2940c 0f2 00 00 00 00 
      ...             
2943c 0fe 00 00 00 00 
29440 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
29444 100             | 
29444 100             | '..................................................................................................
29444 100             | ' Error result handling and COG notification of request completion
29444 100             | 
29444 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
29448 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
2944c 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
29450 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
29454 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
29458 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
2945c 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
29460 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
29464 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
29468 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
2946c 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
29470 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
29474 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
29478 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
2947c 10e             | ' Poller re-starts here after a COG is serviced
2947c 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
29480 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
29484 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
29488 111             | ' Main dynamic polling loop repeats until a request arrives
29488 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
2948c 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
29490 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
29494 114             | 
29494 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
29498 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
2949c 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
294a0 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
294a4 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
294a8 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
294ac 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
294b0 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
294b4 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
294b8 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
294bc 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
294c0 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
294c4 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
294c8 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
294cc 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
294d0 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
294d4 124             | 
294d4 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
294d8 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
294dc 126             |  
294dc 126             | '..................................................................................................
294dc 126             | ' List handler                               
294dc 126             | 
294dc 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
294e0 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
294e4 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
294e8 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
294ec 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
294f0 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
294f4 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
294f8 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
294fc 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
29500 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
29504 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
29508 131 33 00 60 FD |                             execf   0-0                     'process the request 
2950c 132             | 
2950c 132             | '..................................................................................................
2950c 132             | ' Restoring per COG state and resuming where we left off
2950c 132             | 
2950c 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
29510 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
29514 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
29518 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
2951c 136 D8 CB FB F8 |                             getbyte request, addr1, #3
29520 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
29524 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
29528 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
2952c 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
29530 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
29534 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
29538 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
2953c 13e             |                    
2953c 13e             | '..................................................................................................
2953c 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
2953c 13e             | 
2953c 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
29540 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
29544 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
29548 141 D0 DF B7 F9 |                             setd    a, #id0
2954c 142 D8 DF BF F9 |                             sets    a, #addr1
29550 143 FE FF FF FF 
29554 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
29558 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
2955c 146 3F DE A7 F9 |                             alti    a, #%111_111 
29560 147 00 00 F0 F9 |                             muxq    0-0, 0-0
29564 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
29568 149 01 E2 63 FD |                             cogid   c
2956c 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
29570 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
29574 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
29578 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
2957c 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
29580 14f 00 E0 03 F6 |                             mov     b, 0-0
29584 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
29588 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
2958c 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
29590 153 0C 00 90 AD |             if_z            jmp     #excluded               
29594 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
29598 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
2959c 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
295a0 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
295a4 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
295a8 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
295ac 15a             | 
295ac 15a             | 'determine priority cogs and build instructions for the polling sequence
295ac 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
295b0 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
295b4 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
295b8 15d             | 
295b8 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
295bc 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
295c0 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
295c4 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
295c8 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
295cc 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
295d0 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
295d4 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
295d8 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
295dc 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
295e0 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
295e4 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
295e8 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
295ec 16a             | endprioloop
295ec 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
295f0 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
295f4 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
295f8 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
295fc 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
29600 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
29604 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
29608 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
2960c 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
29610 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
29614 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
29618 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
2961c 176             | 
2961c 176             | ' populate the round robin COG polling instructions
2961c 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
29620 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
29624 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
29628 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
2962c 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
29630 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
29634 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
29638 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
2963c 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
29640 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
29644 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
29648 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
2964c 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
29650 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
29654 184             | '..................................................................................................
29654 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
29654 184             | 
29654 184             | set_latency                                                 '            (a) set latency
29654 184             | get_latency                                                 '            (b) get latency
29654 184             | set_burst                                                   '            (c) set burst size of bank
29654 184             | get_burst                                                   '            (d) get burst size of bank
29654 184             |                                                             '            (e) dump state
29654 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
29658 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
2965c 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
29660 187             |                                                             ' | | | | e  account for following AUGS
29660 187 04 00 00 FF 
29664 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
29668 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
2966c 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
29670 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
29674 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
29678 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
2967c 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
29680 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
29684 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
29688 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
2968c 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
29690 193             | 
29690 193             | '..................................................................................................
29690 193             | ' Misc EXECF code
29690 193             | 
29690 193 33 72 63 FD | start_read_exec             execf   newburstr
29694 194 33 7C 63 FD | start_write_exec            execf   resumewrites
29698 195 33 78 63 FD | continue_read_exec          execf   lockedreads
2969c 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
296a0 197             | 
296a0 197             | '..................................................................................................
296a0 197             | ' Variables
296a0 197             | 
296a0 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
296a4 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
296a8 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
296ac 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
296b0 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
296b4 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
296b8 19d             | 
296b8 19d 00 00 00 80 | xfreq1          long    $80000000
296bc 19e 00 00 00 40 | xfreq2          long    $40000000
296c0 19f 03 00 00 00 | delay           long    3
296c4 1a0             | 
296c4 1a0             | lutcodeaddr                 
296c4 1a0             | startupparams
296c4 1a0             | excludedcogs                                    'careful: shared register use!
296c4 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
296c8 1a1 00 00 00 00 | flags           long    0
296cc 1a2             | mask                                            'careful: shared register use!
296cc 1a2 00 00 00 00 | resetmaskA      long    0
296d0 1a3             | limit                                           'careful: shared register use!
296d0 1a3 00 00 00 00 | resetmaskB      long    0
296d4 1a4 00 00 00 00 | datapins        long    0
296d8 1a5             | const512                                        'careful: shared register use!
296d8 1a5 00 00 00 00 | devicelist      long    0
296dc 1a6 00 00 00 00 | coglist         long    0
296e0 1a7 00 00 00 00 | mbox            long    0 
296e4 1a8             | 
296e4 1a8             | clkpin                                          'shared with code patched during init
296e4 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
296e8 1a9             | cspin                                           'shared with code patched during init
296e8 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
296ec 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
296f0 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
296f4 1ac 01 00 00 00 | clkdelay        long    1
296f8 1ad 00 00 00 00 | regdatabus      long    0
296fc 1ae             | 
296fc 1ae 10 00 00 00 | deviceaddr      long    $10
29700 1af             | rrcounter
29700 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
29704 1b0             | 
29704 1b0             | ' jump addresses for the per COG handlers
29704 1b0 20 00 00 00 | cog0_handler    long    cog0
29708 1b1 2C 00 00 00 | cog1_handler    long    cog1
2970c 1b2 38 00 00 00 | cog2_handler    long    cog2
29710 1b3 44 00 00 00 | cog3_handler    long    cog3
29714 1b4 50 00 00 00 | cog4_handler    long    cog4
29718 1b5 5C 00 00 00 | cog5_handler    long    cog5
2971c 1b6 68 00 00 00 | cog6_handler    long    cog6
29720 1b7 74 00 00 00 | cog7_handler    long    cog7
29724 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
29728 1b9             | 
29728 1b9             | ' EXECF sequences
29728 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
2972c 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
29730 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
29734 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
29738 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
2973c 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
29740 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
29744 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
29744 1c0             | 
29744 1c0             | 
29744 1c0             | ' SKIPF sequences
29744 1c0             | skiptable
29744 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
29748 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
2974c 1c2 00 00 00 00 |                 long    0                      ' read modify write long
29750 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
29754 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
29758 1c5 00 00 00 00 | pattern2        long    0
2975c 1c6 00 00 00 00 | pattern3        long    0
29760 1c7 77 02 00 00 | singlelong      long    %1001110111  
29764 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
29768 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
2976c 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
29770 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
29774 1cc             | 
29774 1cc             | ' LUT RAM address values
29774 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
29778 1cd DD 02 00 00 | continue_read   long    continue_read_lut
2977c 1ce DB 02 00 00 | continue_write  long    continue_write_lut
29780 1cf F6 02 00 00 | noread          long    noread_lut
29784 1d0             | 
29784 1d0 00 00 00 00 | id0             long    0
29788 1d1 01 00 00 00 | id1             long    1
2978c 1d2 02 00 00 00 | id2             long    2
29790 1d3 03 00 00 00 | id3             long    3
29794 1d4 04 00 00 00 | id4             long    4
29798 1d5 05 00 00 00 | id5             long    5
2979c 1d6 06 00 00 00 | id6             long    6
297a0 1d7 07 00 00 00 | id7             long    7
297a4 1d8             | 
297a4 1d8             | 'These next 10 request registers below are also temporarily reused during init 
297a4 1d8             | 'and COG updates and need to follow immediately after id0-id7
297a4 1d8 00 00 00 00 | addr1           long    0
297a8 1d9 00 00 00 00 | hubdata         long    0
297ac 1da 00 00 00 00 | count           long    0
297b0 1db 00 00 00 00 | addr2           long    0
297b4 1dc 00 00 00 00 | total           long    0
297b8 1dd 00 00 00 00 | offset1         long    0
297bc 1de 00 00 00 00 | offset2         long    0
297c0 1df 00 00 00 00 | link            long    0
297c4 1e0             | 
297c4 1e0             | burstwrite                                      'note shared register use during init
297c4 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
297c8 1e1 00 00 00 00 | id              long    0
297cc 1e2             | 
297cc 1e2 00 00 00 00 | header          long    0
297d0 1e3 00 00 00 00 | trailer         long    0
297d4 1e4 00 00 00 00 | cmdaddr         long    0
297d8 1e5 00 00 00 00 | request         long    0
297dc 1e6 00 00 00 00 | rrlimit         long    0
297e0 1e7 00 00 00 00 | pinconfig       long    0
297e4 1e8 00 00 00 00 | clks            long    0
297e8 1e9 00 00 00 00 | resume          long    0
297ec 1ea 00 00 00 00 | orighubsize     long    0
297f0 1eb 00 00 00 00 | wrclks          long    0
297f4 1ec             | 
297f4 1ec 00 00 00 00 | pattern         long    0
297f8 1ed 00 00 00 00 | hubscratch      long    0
297fc 1ee 00 10 00 00 | val4k           long    4096
29800 1ef             | 
29800 1ef             | ' temporary general purpose regs
29800 1ef 00 00 00 00 | a               long    0
29804 1f0 00 00 00 00 | b               long    0
29808 1f1 00 00 00 00 | c               long    0
2980c 1f2 00 00 00 00 | d               long    0
29810 1f3             |                 fit     502
29810 1f3             | 
29810 1f3             |                 fit     502
29810 1f3             | 
29810 1f3             | '..................................................................................................
29810 1f3             | 
29810 1f3             |             orgh
29810                 | 
29810                 | lut_code
29810                 | 'HW init code up to 80 longs
29810                 | 
29810                 | '..................................................................................................
29810                 | ' Memory layout for LUT RAM once operational:
29810                 | '
29810                 | '  LUT RAM address      Usage
29810                 | '  ---------------      ----
29810                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
29810                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
29810                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
29810                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
29810                 | '
29810                 | ' Also during driver COG startup:
29810                 | ' $230-$24F is used for HW init setup
29810                 | ' $250-$26F is used as temporary vector storage 
29810                 | '..................................................................................................
29810                 | 
29810                 |                 org $230    
29810 230             | 
29810 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
29810 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
29814 231 24 16 60 FD |                             pollxfi
29818 232 FF AA 2A FF 
2981c 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
29820 234 28 00 B0 FD |                             call    #sendqspi
29824 235 07 F8 07 FF 
29828 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
2982c 237 28 00 B0 FD |                             call    #sendspi
29830 238 F8 07 78 FF 
29834 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
29838 23a 1C 00 B0 FD |                             call    #sendspi
2983c 23b 7F 78 78 FF 
29840 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
29844 23d 10 00 B0 FD |                             call    #sendspi 
29848 23e 2D 00 64 FD |                             ret
2984c 23f             | 
2984c 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
29850 240 32 0C 64 FD |                             skipf   #%110
29854 241 9C EF 03 F6 |                             mov     pb, xsendimm
29858 242             | 
29858 242 10 D0 07 F6 | sendspi                     mov     clks, #16
2985c 243 97 EF 03 F6 |                             mov     pb, ximm8lut
29860 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
29864 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
29868 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
2986c 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
29870 248 24 36 60 FD |                             waitxfi                         'wait for the completion
29874 249 50 48 63 FD |                             fltl    datapins                'float data bus
29878 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
2987c 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
29880 24c             | 
29880 24c 00 00 00 00 
29884 24d 00 00 00 00 
29888 24e 00 00 00 00 
2988c 24f 00 00 00 00 |                 long    0[$270-32-$]
29890 250             |                 fit     $270-32  ' keep room for 32 vector longs
29890 250             |     
29890 250             |                 fit     $270-32  ' keep room for 32 vector longs
29890 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
29890 250             | rw_vect ' PSRAM jump vectors
29890 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
29894 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
29898 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
2989c 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
298a0 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
298a4 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
298a8 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
298ac 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
298b0 258             | ro_vect ' R/O PSRAM jump vectors
298b0 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
298b4 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
298b8 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
298bc 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
298c0 25c 00 01 00 00 |                 long    unsupported
298c4 25d 00 01 00 00 |                 long    unsupported
298c8 25e 00 01 00 00 |                 long    unsupported
298cc 25f 00 01 00 00 |                 long    unsupported
298d0 260             | ctrl_vect ' Control jump vectors
298d0 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
298d4 261 00 01 00 00 |                 long    unsupported
298d8 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
298dc 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
298e0 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
298e4 265 00 01 00 00 |                 long    unsupported
298e8 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
298ec 267 3E 01 00 00 |                 long    reconfig 
298f0 268             | no_vect ' Invalid bank jump vectors
298f0 268 01 01 00 00 |                 long    invalidbank
298f4 269 01 01 00 00 |                 long    invalidbank
298f8 26a 01 01 00 00 |                 long    invalidbank
298fc 26b 01 01 00 00 |                 long    invalidbank
29900 26c 01 01 00 00 |                 long    invalidbank
29904 26d 01 01 00 00 |                 long    invalidbank
29908 26e 01 01 00 00 |                 long    invalidbank
2990c 26f 01 01 00 00 |                 long    invalidbank
29910 270             |                 fit     $270
29910 270             | 
29910 270             |                 fit     $270
29910 270             | '..................................................................................................
29910 270             | ' PSRAM READS
29910 270             |                                                             ' a b c d e f
29910 270             |                                                             ' B W L B R L  (a) byte read
29910 270             |                                                             ' Y O O U E O  (b) word read
29910 270             |                                                             ' T R N R S C  (c) long read
29910 270             |                                                             ' E D G S U K  (d) new burst read
29910 270             |                                                             '       T M E  (e) resumed sub-burst
29910 270             |                                                             '         E D  (f) locked sub-burst
29910 270             | 
29910 270             | 
29910 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
29914 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
29918 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
2991c 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
29920 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
29924 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
29928 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
2992c 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
29930 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
29934 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
29938 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
2993c 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
29940 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
29944 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
29948 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
2994c 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
29950 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
29954 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
29958 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
2995c 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
29960 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
29964 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
29968 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
2996c 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
29970 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
29974 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
29978 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
2997c 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
29980 28c             | 
29980 28c             |                             ' fall through to read bursts
29980 28c             |                         
29980 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
29980 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
29984 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
29988 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
2998c 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
29990 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
29994 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
29998 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
2999c 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
299a0 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
299a4 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
299a8 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
299ac 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
299b0 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
299b4 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
299b8 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
299bc 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
299c0 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
299c4 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
299c8 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
299cc 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
299d0 2a0 E8 D1 03 F1 |                             add     clks, clks
299d4 2a1             | readcommon
299d4 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
299d8 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
299dc 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
299e0 2a4             | 
299e0 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
299e4 2a5 69 C8 63 FD |                             rev     cmdaddr
299e8 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
299ec 2a7 61 C8 63 FD |                             mergeb  cmdaddr
299f0 2a8             | 
299f0 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
299f4 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
299f8 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
299f8 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
299fc 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
29a00 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
29a04 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
29a08 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
29a08 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
29a0c 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
29a10 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
29a14 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
29a18 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
29a1c 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
29a20 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
29a20 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
29a24 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
29a28 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
29a2c 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
29a30 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
29a34 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
29a38 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
29a3c 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
29a40 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
29a44 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
29a48 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
29a4c 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
29a50 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
29a54 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
29a58 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
29a58 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
29a5c 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
29a60 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
29a64 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
29a68 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
29a6c 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
29a70 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
29a74 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
29a78 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
29a7c 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
29a80 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
29a84 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
29a88 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
29a8c 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
29a90 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
29a94 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
29a98 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
29a9c 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
29aa0 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
29aa4 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
29aa8 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
29aac 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
29ab0 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
29ab4 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
29ab8 2da 10 03 90 FD |                             jmp     #writecommon
29abc 2db             | 
29abc 2db             | '..................................................................................................
29abc 2db             | ' Burst continuation testing
29abc 2db             | 
29abc 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
29ac0 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
29ac4 2dd             | continue_read_lut          
29ac4 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
29ac8 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
29acc 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
29ad0 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
29ad4 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
29ad8 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
29adc 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
29ae0 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
29ae4 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
29ae8 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
29aec 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
29af0 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
29af4 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
29af8 2ea             | 
29af8 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
29afc 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
29b00 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
29b04 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
29b08 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
29b0c 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
29b10 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
29b14 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
29b18 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
29b1c 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
29b20 2f4 2A 1C 66 0D |             _ret_           push    #poller
29b24 2f5             | 
29b24 2f5             | 
29b24 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
29b28 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
29b28 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
29b2c 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
29b30 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
29b34 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
29b38 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
29b3c 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
29b40 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
29b44 2fd 2D 00 64 FD |                             ret                             ' | continue processing
29b48 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
29b4c 2ff             | '..................................................................................................
29b4c 2ff             | ' Completion of requests
29b4c 2ff             | 
29b4c 2ff             | complete_rw_lut             
29b4c 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
29b50 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
29b54 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
29b58 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
29b5c 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
29b60 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
29b64 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
29b68 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
29b6c 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
29b70 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
29b74 309 32 62 64 AD |             if_z            skipf   #%110001
29b78 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
29b7c 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
29b80 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
29b84 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
29b88 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
29b8c 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
29b90 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
29b94 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
29b98 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
29b9c 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
29ba0 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
29ba4 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
29ba8 316             |                                                             ' skipcase (a) gfx copy to/from hub
29ba8 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
29ba8 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
29ba8 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
29bac 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
29bb0 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
29bb4 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
29bb8 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
29bbc 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
29bc0 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
29bc4 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
29bc8 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
29bcc 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
29bd0 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
29bd4 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
29bd8 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
29bdc 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
29be0 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
29be4 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
29be8 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
29bec 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
29bf0 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
29bf4 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
29bf8 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
29bfc 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
29c00 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
29c04 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
29c08 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
29c0c 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
29c10 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
29c14 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
29c18 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
29c1c 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
29c20 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
29c24 335 DF B7 03 A6 |             if_z            mov     addr2, link
29c28 336 34 FF 9F AD |             if_z            jmp     #checknext
29c2c 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
29c30 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
29c34 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
29c38 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
29c3c 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
29c40 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
29c44 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
29c48 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
29c4c 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
29c50 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
29c54 341             | 
29c54 341             | '..................................................................................................
29c54 341             | ' PSRAM WRITES
29c54 341             |                                                             '  a b c d e f g h
29c54 341             | 
29c54 341             |                                                             '  B W L F B R L L (a) byte write(s)
29c54 341             |                                                             '  Y O O I U E O O (b) word write(s)
29c54 341             |                                                             '  T R N L R S C C (c) long write(s)
29c54 341             |                                                             '  E D G L S U K K (d) resumed fill
29c54 341             |                                                             '          T M E E (e) new burst write
29c54 341             |                                                             '            E D D (f) resumed burst
29c54 341             |                                                             '              F B (g) locked fill
29c54 341             |                                                             '              I U (h) locked burst write
29c54 341             |                                                             '              L R 
29c54 341             |                                                             '              L S 
29c54 341             |                                                             '                T 
29c54 341             | 
29c54 341             | w_single                   
29c54 341             | w_fill_cont           
29c54 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
29c58 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
29c5c 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
29c60 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
29c64 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
29c68 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
29c6c 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
29c70 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
29c74 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
29c78 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
29c7c 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
29c80 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
29c84 34d             |                ' disable call to r_resume_burst for single longs when z=0
29c84 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
29c88 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
29c8c 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
29c90 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
29c94 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
29c98 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
29c9c 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
29ca0 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
29ca4 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
29ca8 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
29cac 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
29cb0 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
29cb4 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
29cb8 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
29cbc 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
29cc0 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
29cc4 35d             |         
29cc4 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
29cc4 35d             |             '
29cc4 35d             |             '  At least one of these 3 optional components will be sent
29cc4 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
29cc4 35d             |             '     body - N x full longs of data
29cc4 35d             |             '     trailer - last partial long of data
29cc4 35d             |             '
29cc4 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
29cc4 35d             |             '
29cc4 35d             |             'Case    Type                           Sends
29cc4 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
29cc4 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
29cc4 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
29cc4 35d             |             ' 4)     Multiple long fill             body only
29cc4 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
29cc4 35d             | 
29cc4 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
29cc4 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
29cc8 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
29ccc 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
29cd0 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
29cd4 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
29cd8 362 13 8C 07 F6 |                             mov     pattern3, #%10011
29cdc 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
29ce0 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
29ce4 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
29ce8 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
29cec 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
29cf0 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
29cf4 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
29cf8 36a             |                             
29cf8 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
29cfc 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
29d00 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
29d04 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
29d08 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
29d0c 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
29d10 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
29d14 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
29d18 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
29d1c 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
29d20 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
29d24 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
29d28 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
29d2c 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
29d30 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
29d34 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
29d38 37a             | 
29d38 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
29d3c 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
29d40 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
29d44 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
29d48 37e             |                  
29d48 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
29d4c 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
29d50 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
29d54 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
29d58 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
29d5c 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
29d60 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
29d64 385             | 
29d64 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
29d68 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
29d6c 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
29d70 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
29d74 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
29d78 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
29d7c 38b             | 
29d7c 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
29d7c 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
29d80 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
29d84 38d 2A B0 63 FD |                             push    addr1                   'save address
29d88 38e             | 
29d88 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
29d88 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
29d8c 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
29d90 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
29d94 391             |             
29d94 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
29d98 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
29d9c 393 2B B0 63 FD |                             pop     addr1                   'restore address
29da0 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
29da4 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
29da8 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
29dac 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
29db0 398             | 
29db0 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
29db4 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
29db8 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
29dbc 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
29dc0 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
29dc4 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
29dc8 39e             | 
29dc8 39e             |                             'trailer is done
29dc8 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
29dcc 39f             | 
29dcc 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
29dd0 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
29dd4 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
29dd8 3a2             | 
29dd8 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
29ddc 3a3 69 C8 63 FD |                             rev     cmdaddr                 
29de0 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
29de4 3a5 61 C8 63 FD |                             mergeb  cmdaddr
29de8 3a6             |                             
29de8 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
29dec 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
29df0 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
29df4 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
29df8 3aa             |                                                          
29df8 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
29dfc 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
29e00 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
29e04 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
29e08 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
29e0c 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
29e10 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
29e14 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
29e18 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
29e1c 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
29e20 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
29e24 3b5             |  
29e24 3b5 59 52 63 FD |                             drvh    cspin
29e28 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
29e2c 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
29e30 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
29e34 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
29e38 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
29e3c 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
29e40 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
29e44 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
29e48 3be EA E5 03 F6 |                             mov     d, orighubsize
29e4c 3bf EF E5 63 F0 |                             shl     d, a
29e50 3c0 F2 E3 83 F1 |                             sub     c, d
29e54 3c1 DD E3 03 F1 |                             add     c, offset1
29e58 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
29e5c 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
29e60 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
29e64 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
29e68 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
29e6c 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
29e70 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
29e74 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
29e78 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
29e7c 3cb BB D3 03 F6 |                             mov     resume, restorefill
29e80 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
29e84 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
29e88 3ce 6C FC BF CD |             if_c            call    #yield
29e8c 3cf 2D 00 64 FD |                             ret
29e90 3d0             |                            
29e90 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
29e90 3d0             |                       '     rczl    pa                      'rotate left into address offset
29e90 3d0             |                       '     rczl    c wcz                   'restore count and flags
29e90 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
29e94 3d1 02 EC 67 F0 |                             shl     pa, #2
29e98 3d2 28 06 64 AD |             if_z            setq    #3
29e9c 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
29ea0 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
29ea4 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
29ea8 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
29eac 3d7             | 
29eac 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
29eb0 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
29eb4 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
29eb8 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
29ebc 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
29ec0 3dc             |                 fit 1024-32
29ec0 3dc             |         
29ec0 3dc             | 
29ec0 3dc             | '..................................................................................................
29ec0 3dc             | 
29ec0 3dc             |                 fit 1024-32
29ec0 3dc 00 00 00 00 
29ec4 3dd 00 00 00 00 
29ec8 3de 00 00 00 00 
29ecc 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
29ed0 3e0             |                 org 1024-32
29ed0 000             | 
29ed0 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
29ed0 000 00 00 00 00 |                 long $0000
29ed4 001 11 11 00 00 |                 long $1111
29ed8 002 22 22 00 00 |                 long $2222
29edc 003 33 33 00 00 |                 long $3333
29ee0 004 44 44 00 00 |                 long $4444
29ee4 005 55 55 00 00 |                 long $5555
29ee8 006 66 66 00 00 |                 long $6666
29eec 007 77 77 00 00 |                 long $7777
29ef0 008 88 88 00 00 |                 long $8888
29ef4 009 99 99 00 00 |                 long $9999
29ef8 00a AA AA 00 00 |                 long $aaaa
29efc 00b BB BB 00 00 |                 long $bbbb
29f00 00c CC CC 00 00 |                 long $cccc
29f04 00d DD DD 00 00 |                 long $dddd
29f08 00e EE EE 00 00 |                 long $eeee
29f0c 00f FF FF 00 00 |                 long $ffff
29f10 010             | 
29f10 010             | 'masks
29f10 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
29f14 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
29f18 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
29f1c 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
29f20 014             | 
29f20 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
29f24 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
29f28 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
29f2c 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
29f30 018             | 
29f30 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
29f34 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
29f38 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
29f3c 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
29f40 01c             | 
29f40 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
29f44 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
29f48 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
29f4c 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
29f50 020             |         fit 1024
29f50 020             | 
29f50 020             |         fit 1024
29f50 020             | 
29f50 020             | '--------------------------------------------------------------------------------------------------
29f50 020             |         orgh
29f50                 | 
29f50                 | gfxexpansion
29f50                 |                             'simple line drawing graphics expansion of memory driver
29f50                 |                             'jmp     #donerepeats                'just return for now
29f50                 | 
29f50     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
29f54     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
29f58     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
29f5c     DD E1 03 F6 |                             mov     b, offset1              'get error term
29f60     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
29f64     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
29f68     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
29f6c     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
29f70     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
29f74     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
29f78     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
29f7c     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
29f80     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
29f84     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
29f88     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
29f8c     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
29f90     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
29f94     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
29f98     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
29f9c     DC E5 33 F9 |                             getword d, total, #0            'get line width
29fa0     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
29fa4     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
29fa8     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
29fac     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
29fb0     C3 03 80 FD |                             jmp     #readmask               'continue filling
29fb4                 | 	alignl
29fb4                 | _usbnew_spin2_dat_
29fb4                 |                 org     $000
29fb4 000             | 
29fb4 000             | usb_host_start
29fb4 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
29fb8 001             | 
29fb8 001 03 00 00 FF 
29fbc 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
29fc0 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
29fc4 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
29fc8 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
29fcc 006 29 70 63 FD |                 setq2   htmp
29fd0 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
29fd4 008             | 
29fd4 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
29fd8 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
29fdc 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
29fe0 00b             | 
29fe0 00b             | '------------------------------------------------------------------------------
29fe0 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
29fe0 00b             | ' special because the receiving function must not respond with either STALL or
29fe0 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
29fe0 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
29fe0 00b             | ' corrupt packet, it must ignore the transaction
29fe0 00b             | '------------------------------------------------------------------------------
29fe0 00b             | ' On entry:
29fe0 00b             | '   PTRA - start address of the SETUP data struct.
29fe0 00b             | ' On exit:
29fe0 00b             | '   retval - PID_ACK on success, otherwise error code.
29fe0 00b             | '------------------------------------------------------------------------------
29fe0 00b             | txn_setup
29fe0 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
29fe4 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
29fe8 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
29fec 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
29ff0 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
29ff4 010             | .setup
29ff4 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
29ff8 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29ffc 012 2D 00 64 AD |         if_z    ret
2a000 013 7C 0B B0 FD |                 call    #retry_wait
2a004 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2a008 015 2D 00 64 AD |         if_z    ret
2a00c 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
2a010 017 E0 FF 9F FD |                 jmp     #.setup
2a014 018             | 
2a014 018             | '------------------------------------------------------------------------------
2a014 018             | ' IN/INTERRUPT transaction.
2a014 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
2a014 018             | '------------------------------------------------------------------------------
2a014 018             | ' On entry:
2a014 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
2a014 018             | '     CRC(b19..23).
2a014 018             | ' On exit:
2a014 018             | '------------------------------------------------------------------------------
2a014 018             | txn_in
2a014 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
2a018 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
2a01c 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
2a020 01b             | 
2a020 01b             |                 ' Fall through to urx_packet
2a020 01b             | 
2a020 01b             | '------------------------------------------------------------------------------
2a020 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
2a020 01b             | ' received are handshakes and IN DATAx.
2a020 01b             | '------------------------------------------------------------------------------
2a020 01b             | ' On entry:
2a020 01b             | ' On exit:
2a020 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
2a020 01b             | '     returned.
2a020 01b             | '------------------------------------------------------------------------------
2a020 01b             | urx_packet
2a020 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
2a024 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2a028 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
2a02c 01e 1A 92 63 FD |                 getct   hct2
2a030 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
2a034 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
2a038 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
2a03c 022             | .wait_sop
2a03c 022 22 A7 8A FA |                 rdpin   urx, dm
2a040 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2a044 024 08 00 90 CD |         if_c    jmp     #.get_pid
2a048 025 FC 25 CC FB |                 jnct2   #.wait_sop
2a04c 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
2a050 027             | .get_pid
2a050 027 28 02 B0 FD |                 call    #urx_next
2a054 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
2a058 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
2a05c 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
2a060 02b             | .chk_pid
2a060 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a064 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
2a068 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
2a06c 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
2a070 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
2a074 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
2a078 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
2a07c 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
2a080 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
2a084 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
2a088 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
2a08c 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
2a090 037             | .ack_resend
2a090 037 22 A7 82 FA |                 rqpin   urx, dm
2a094 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
2a098 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
2a09c 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
2a0a0 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
2a0a4 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
2a0a8 03d             | .chk_eop
2a0a8 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2a0ac 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
2a0b0 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
2a0b4 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
2a0b8 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
2a0bc 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
2a0c0 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
2a0c4 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
2a0c8 045 2D 00 64 FD |                 ret
2a0cc 046             | .idle
2a0cc 046 22 A7 82 FA |                 rqpin   urx, dm
2a0d0 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2a0d4 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
2a0d8 049 2D 00 64 FD |                 ret
2a0dc 04a             | 
2a0dc 04a             | '------------------------------------------------------------------------------
2a0dc 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
2a0dc 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
2a0dc 04a             | ' if one is required.
2a0dc 04a             | '------------------------------------------------------------------------------
2a0dc 04a             | ' On entry:
2a0dc 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
2a0dc 04a             | ' On exit:
2a0dc 04a             | '------------------------------------------------------------------------------
2a0dc 04a             | utx_token
2a0dc 04a 22 A7 82 FA |                 rqpin   urx, dm
2a0e0 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2a0e4 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
2a0e8 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2a0ec 04e 34 0D B0 CD |         if_c    call    #utx_pre
2a0f0 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2a0f4 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
2a0f8 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
2a0fc 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
2a100 053             | .next_byte
2a100 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
2a104 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
2a108 055             | .wait
2a108 055 40 46 72 FD |                 testp   dp                      wc
2a10c 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
2a110 057 23 03 08 FC |                 akpin   dp
2a114 058 22 A5 22 FC |                 wypin   utx, dm
2a118 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
2a11c 05a             | 
2a11c 05a             | '------------------------------------------------------------------------------
2a11c 05a             | ' SETUP/OUT/INTERRUPT transaction.
2a11c 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
2a11c 05a             | '------------------------------------------------------------------------------
2a11c 05a             | ' On entry:
2a11c 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
2a11c 05a             | '     CRC(b19..23).
2a11c 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
2a11c 05a             | '   pkt_data - count of DATAx payload bytes to send.
2a11c 05a             | ' On exit:
2a11c 05a             | '------------------------------------------------------------------------------
2a11c 05a             | txn_out
2a11c 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
2a120 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
2a124 05c 00 00 C0 FF 
2a128 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
2a12c 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
2a130 05f             | 
2a130 05f             |                 ' Fall through to utx_data
2a130 05f             | 
2a130 05f             | '------------------------------------------------------------------------------
2a130 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
2a130 05f             | ' calculated while the data byte is being shifted out. Since data stage
2a130 05f             | ' success/fail is not determined until the status stage of the transaction,
2a130 05f             | ' this routine is only concerned about the current DATAx packet.
2a130 05f             | '------------------------------------------------------------------------------
2a130 05f             | ' On entry:
2a130 05f             | '   PTRA - hub start address of the data to read.
2a130 05f             | '   pkt_cnt - data payload size.
2a130 05f             | ' On exit:
2a130 05f             | '------------------------------------------------------------------------------
2a130 05f             | utx_data
2a130 05f 22 A7 82 FA |                 rqpin   urx, dm
2a134 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2a138 061 F4 FF 9F CD |         if_c    jmp     #utx_data
2a13c 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
2a140 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
2a144 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2a148 065 D8 0C B0 CD |         if_c    call    #utx_pre
2a14c 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2a150 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
2a154 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
2a158 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
2a15c 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
2a160 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
2a164 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
2a168 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
2a16c 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
2a170 06f             | .read_byte
2a170 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
2a174 070 F0 00 B0 FD |                 call    #utx_byte
2a178 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
2a17c 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
2a180 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
2a184 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
2a188 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
2a18c 076             | .send_crc
2a18c 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
2a190 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
2a194 078 D0 00 B0 FD |                 call    #utx_byte
2a198 079 5D A5 EA F8 |                 getbyte utx, crc, #1
2a19c 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
2a1a0 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
2a1a4 07c             | 
2a1a4 07c             | '------------------------------------------------------------------------------
2a1a4 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
2a1a4 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
2a1a4 07c             | ' expects that the packet includes at least the CRC word.
2a1a4 07c             | '
2a1a4 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
2a1a4 07c             | ' was requested, which makes it difficult to determine where the data stops
2a1a4 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
2a1a4 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
2a1a4 07c             | ' USB-16 expected residual value of 0xB001.
2a1a4 07c             | '
2a1a4 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
2a1a4 07c             | ' so the caller can verify IN success before writing the data to its final
2a1a4 07c             | ' destination.
2a1a4 07c             | '------------------------------------------------------------------------------
2a1a4 07c             | ' On entry:
2a1a4 07c             | '   pkt_data - max byte count expected to be in the packet.
2a1a4 07c             | '   newb_flg - signals new byte ready when toggled.
2a1a4 07c             | ' On exit:
2a1a4 07c             | '   pkt_cnt - actual number of bytes read.
2a1a4 07c             | '------------------------------------------------------------------------------
2a1a4 07c             | urx_data
2a1a4 07c F7 75 03 F6 |                 mov     htmp2, pb
2a1a8 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
2a1ac 07e 00 00 C0 FF 
2a1b0 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
2a1b4 080 BA EF 03 F6 |                 mov     pb, htmp2
2a1b8 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
2a1bc 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
2a1c0 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
2a1c4 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
2a1c8 085             | .wait_byte
2a1c8 085             | ' In-line rx for max speed
2a1c8 085 22 A7 82 FA |                 rqpin   urx, dm
2a1cc 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
2a1d0 087 53 A5 02 F5 |                 and     utx, urx
2a1d4 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
2a1d8 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
2a1dc 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
2a1e0 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
2a1e4 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
2a1e8 08d DC FF 9F FD |                 jmp     #.wait_byte
2a1ec 08e             | .get_byte
2a1ec 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
2a1f0 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
2a1f4 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
2a1f8 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
2a1fc 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
2a200 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
2a204 094             | .end_crc
2a204 094 01 B8 06 F1 |                 add     pkt_cnt, #1
2a208 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
2a20c 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
2a210 097 2D 00 64 1D |         if_a    ret
2a214 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
2a214 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
2a214 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
2a214 098             | ' to miss it, so cheat a bit and look for SOP clear here.
2a214 098 22 A7 82 FA |                 rqpin   urx, dm
2a218 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
2a21c 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
2a220 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
2a220 09b             | .chk_crc
2a220 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
2a224 09c 58 00 00 FF 
2a228 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
2a22c 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
2a230 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
2a234 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
2a238 0a1 34 09 B0 FD |                 call    #poll_waitx
2a23c 0a2             | 
2a23c 0a2             |                 ' Fall through to utx_handshake
2a23c 0a2             | 
2a23c 0a2             | '------------------------------------------------------------------------------
2a23c 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
2a23c 0a2             | ' the appropriate IP delay has been inserted.
2a23c 0a2             | '------------------------------------------------------------------------------
2a23c 0a2             | ' On entry:
2a23c 0a2             | '   retval - handshake PID to send.
2a23c 0a2             | ' On exit:
2a23c 0a2             | '   retval unchanged.
2a23c 0a2             | '------------------------------------------------------------------------------
2a23c 0a2             | utx_handshake
2a23c 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2a240 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
2a244 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2a248 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
2a24c 0a6 5F A5 02 F6 |                 mov     utx, retval
2a250 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
2a254 0a8             | .idle
2a254 0a8 22 A7 82 FA |                 rqpin   urx, dm
2a258 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2a25c 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
2a260 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
2a264 0ac 08 09 90 FD |                 jmp     #poll_waitx
2a268 0ad             | 
2a268 0ad             | '------------------------------------------------------------------------------
2a268 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
2a268 0ad             | '------------------------------------------------------------------------------
2a268 0ad             | ' On entry:
2a268 0ad             | '   utx - byte to transmit.
2a268 0ad             | ' On exit:
2a268 0ad             | '------------------------------------------------------------------------------
2a268 0ad             | utx_byte
2a268 0ad 40 46 72 FD |                 testp   dp                      wc
2a26c 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
2a270 0af 23 03 08 FC |                 akpin   dp
2a274 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
2a278 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
2a27c 0b2             | 
2a27c 0b2             | '------------------------------------------------------------------------------
2a27c 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
2a27c 0b2             | '------------------------------------------------------------------------------
2a27c 0b2             | ' On entry:
2a27c 0b2             | ' On exit:
2a27c 0b2             | '   retval - the byte read.
2a27c 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
2a27c 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
2a27c 0b2             | '     received.
2a27c 0b2             | '------------------------------------------------------------------------------
2a27c 0b2             | urx_next
2a27c 0b2 22 A7 8A FA |                 rdpin   urx, dm
2a280 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
2a284 0b4 53 A5 02 F5 |                 and     utx, urx
2a288 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
2a28c 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
2a290 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
2a294 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
2a298 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2a29c 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
2a2a0 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
2a2a4 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
2a2a8 0bd 2D 00 64 FD |                 ret
2a2ac 0be             | 
2a2ac 0be             | '------------------------------------------------------------------------------
2a2ac 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
2a2ac 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
2a2ac 0be             | ' length, and the PID is not included in the CRC calculation:
2a2ac 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
2a2ac 0be             | '  CRC5  ENDP ADDRESS PID
2a2ac 0be             | ' %00000_1111_1111111_xxxxxxxx
2a2ac 0be             | '------------------------------------------------------------------------------
2a2ac 0be             | ' On entry:
2a2ac 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
2a2ac 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
2a2ac 0be             | ' On exit:
2a2ac 0be             | '   ep_addr_pid - CRC value appended to the packet.
2a2ac 0be             | '------------------------------------------------------------------------------
2a2ac 0be             | calc_crc5
2a2ac 0be FF 03 00 FF 
2a2b0 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
2a2b4 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
2a2b8 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
2a2bc 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
2a2c0 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
2a2c4 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
2a2c8 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
2a2cc 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
2a2d0 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
2a2d4 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
2a2d8 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
2a2dc 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
2a2e0 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
2a2e4 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
2a2e8 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
2a2ec 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
2a2f0 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
2a2f4 0d0             | 
2a2f4 0d0             | '------------------------------------------------------------------------------
2a2f4 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
2a2f4 0d0             | '------------------------------------------------------------------------------
2a2f4 0d0             | isr1_fsframe
2a2f4 0d0 1A 92 62 FD |                 getct   iframe_ct_base
2a2f8 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2a2fc 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2a300 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2a304 0d4             | .wait
2a304 0d4 40 46 72 FD |                 testp   dp                      wc
2a308 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
2a30c 0d6 23 03 08 FC |                 akpin   dp
2a310 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
2a314 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
2a318 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
2a31c 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
2a320 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
2a324 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
2a328 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
2a32c 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
2a330 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
2a334 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
2a338 0e1 2C FF BF FD |                 call    #utx_byte
2a33c 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
2a340 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
2a344 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
2a348 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
2a34c 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
2a350 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
2a354 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
2a358 0e9 5B A5 42 F5 |                 or      utx, icrc
2a35c 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
2a360 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
2a364 0ec 20 00 90 FD |                 jmp     #isr1_wait
2a368 0ed             | isr1_lsframe
2a368 0ed 1A 92 62 FD |                 getct   iframe_ct_base
2a36c 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2a370 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2a374 0f0             | .wait
2a374 0f0 40 46 72 FD |                 testp   dp                      wc
2a378 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
2a37c 0f2 23 03 08 FC |                 akpin   dp
2a380 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
2a384 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
2a388 0f5             | isr1_wait
2a388 0f5 22 A5 82 FA |                 rqpin   utx, dm
2a38c 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
2a390 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
2a394 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
2a398 0f9 03 00 00 FF 
2a39c 0fa FF B3 06 F5 |                 and     frame, ##$7ff
2a3a0 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
2a3a4 0fc F5 FF 3B FB |                 reti1
2a3a8 0fd             | 
2a3a8 0fd             | '------------------------------------------------------------------------------
2a3a8 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
2a3a8 0fd             | ' transaction will complete before the next frame is triggered.
2a3a8 0fd             | '------------------------------------------------------------------------------
2a3a8 0fd             | ' On entry:
2a3a8 0fd             | ' On exit:
2a3a8 0fd             | '------------------------------------------------------------------------------
2a3a8 0fd             | wait_txn_ok
2a3a8 0fd 1A 74 63 FD |                 getct   htmp2
2a3ac 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
2a3b0 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2a3b4 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
2a3b8 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
2a3bc 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
2a3c0 103 2D 00 64 FD |                 ret
2a3c4 104             | 
2a3c4 104             | '------------------------------------------------------------------------------
2a3c4 104             | ' A device connection was detected, or a bus reset was requested by the USB
2a3c4 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
2a3c4 104             | ' and perform a reset sequence prior to device enumeration.
2a3c4 104             | '------------------------------------------------------------------------------
2a3c4 104             | dev_reset
2a3c4 104 22 A7 82 FA |                 rqpin   urx, dm
2a3c8 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
2a3cc 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
2a3d0 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
2a3d4 108             | reset
2a3d4 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
2a3d8 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
2a3dc 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
2a3e0 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2a3e4 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
2a3e8 10d 1A 92 62 FD |                 getct   iframe_ct_base
2a3ec 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2a3f0 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2a3f4 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
2a3f8 111 24 70 07 F1 |                 add     htmp, #36
2a3fc 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
2a400 113             | .framewait
2a400 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
2a404 114 F8 FF 9F CD |         if_b    jmp     #.framewait
2a408 115 2D 00 64 FD |                 ret
2a40c 116             | 
2a40c 116             | '------------------------------------------------------------------------------
2a40c 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
2a40c 116             | '------------------------------------------------------------------------------
2a40c 116             | ' On entry:
2a40c 116             | '   PTRA - source address.
2a40c 116             | '   PB - destination address.
2a40c 116             | '   hr0 - length of copy, in bytes.
2a40c 116             | ' On exit:
2a40c 116             | '------------------------------------------------------------------------------
2a40c 116             | hmemcpy
2a40c 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
2a410 117 F7 71 43 FC |                 wrbyte  htmp, pb
2a414 118 01 EE 07 F1 |                 add     pb, #1
2a418 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
2a41c 11a             | 
2a41c 11a             | '------------------------------------------------------------------------------
2a41c 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
2a41c 11a             | ' loop until the errant device is disconnected.
2a41c 11a             | '------------------------------------------------------------------------------
2a41c 11a             | ' On entry:
2a41c 11a             | ' On exit:
2a41c 11a             | '------------------------------------------------------------------------------
2a41c 11a             | host_error
2a41c 11a             |           if ERROR_LED >= 0
2a41c 11a             |           end
2a41c 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
2a420 11b             | 
2a420 11b             | '------------------------------------------------------------------------------
2a420 11b             | ' Get HID descriptor buffer for current port
2a420 11b             | '------------------------------------------------------------------------------
2a420 11b             | ' On entry:
2a420 11b             | ' On exit:
2a420 11b             | '   PB - HID descriptor buffer pointer
2a420 11b             | '------------------------------------------------------------------------------
2a420 11b             | get_hid_descr_buffer
2a420 11b 2D EF 03 F6 |                 mov     pb, hdev_port
2a424 11c 01 EE E7 F2 |                 cmpsub  pb, #1
2a428 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
2a42c 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
2a430 11f             | 
2a430 11f             | 
2a430 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
2a434 120             | 
2a434 120             | ' USB commands and error codes
2a434 120 00 00 00 00 | cmd_data        long    0
2a438 121 00 00 00 00 | usb_err_code    long    ERR_NONE
2a43c 122             | 
2a43c 122             | ' Parameters block assigned at cog startup
2a43c 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
2a440 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
2a444 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
2a448 125             | if ACTIVITY_LED >= 0
2a448 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
2a448 125             | end
2a448 125             | if ERROR_LED >= 0
2a448 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
2a448 125             | end
2a448 125 00 00 00 00 | hid_descr_p     long    0
2a44c 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
2a44c 126             | 'hkbd_report_p   long    0
2a44c 126 00 00 00 00 | hub_descr_p     long    0
2a450 127 00 00 00 00 | urx_buff_p      long    0
2a454 128 00 00 00 00 | dev_desc_buff_p long    0
2a458 129 00 00 00 00 | con_desc_buff_p long    0
2a45c 12a 00 00 00 00 | cache_start_p   long    0
2a460 12b 00 00 00 00 | cache_end_p     long    0
2a464 12c             | if EMUPAD_MAX_PLAYER > 0
2a464 12c             | emupad_out_ptr  long    0
2a464 12c             | end
2a464 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
2a468 12d             | 
2a468 12d             | hdev_init_start
2a468 12d             | hdev_port       res     1
2a468 12d             | hdev_port       res     1
2a468 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
2a468 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
2a468 12d             | kbm_next_datax  res     1
2a468 12d             | kbm_next_datax  res     1
2a468 12d             | hub_intf_num    res     1
2a468 12d             | hub_intf_num    res     1
2a468 12d             | hub_next_datax  res     1
2a468 12d             | hub_next_datax  res     1
2a468 12d             | hub_status_chg  res     1
2a468 12d             | hub_status_chg  res     1
2a468 12d             | hub_port_status res     1
2a468 12d             | hub_port_status res     1
2a468 12d             | if HAVE_MOUSE
2a468 12d             | ms_intf_num     res     1
2a468 12d             | ms_intf_num     res     1
2a468 12d             | ms_in_max_pkt   res     1
2a468 12d             | ms_in_max_pkt   res     1
2a468 12d             | end
2a468 12d             | kb_intf_num     res     1
2a468 12d             | kb_intf_num     res     1
2a468 12d             | kb_interval     res     1
2a468 12d             | kb_interval     res     1
2a468 12d             | kb_in_max_pkt   res     1
2a468 12d             | kb_in_max_pkt   res     1
2a468 12d             | kb_max_index    res     1
2a468 12d             | kb_max_index    res     1
2a468 12d             | kb_led_states   res     1
2a468 12d             | kb_led_states   res     1
2a468 12d             | gp_intf_num     res     1
2a468 12d             | gp_intf_num     res     1
2a468 12d             | gp_interval     res     1
2a468 12d             | gp_interval     res     1
2a468 12d             | gp_max_index    res     1
2a468 12d             | gp_max_index    res     1
2a468 12d             | gp_descr_len    res     1+MAX_DEVICES
2a468 12d             | gp_descr_len    res     1+MAX_DEVICES
2a468 12d             | hdev_init_end
2a468 12d             | 
2a468 12d             | ' Initialized at cog startup:
2a468 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
2a468 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
2a468 12d             | iframe_ct_new   res     1
2a468 12d             | iframe_ct_new   res     1
2a468 12d             | iframe_ct_base  res     1
2a468 12d             | iframe_ct_base  res     1
2a468 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
2a468 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
2a468 12d             | 
2a468 12d             | ' This register block is reset to zero when a USB device connects
2a468 12d             | hreg_init_start
2a468 12d             | hstatus         res     1         ' Host status flags
2a468 12d             | hstatus         res     1         ' Host status flags
2a468 12d             | hctwait         res     1         ' Poll-based wait clocks
2a468 12d             | hctwait         res     1         ' Poll-based wait clocks
2a468 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
2a468 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
2a468 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
2a468 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
2a468 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
2a468 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
2a468 12d             | xfer_retry      res     1         ' Control transfer retry count
2a468 12d             | xfer_retry      res     1         ' Control transfer retry count
2a468 12d             | retry           res     1         ' Transaction retry count
2a468 12d             | retry           res     1         ' Transaction retry count
2a468 12d             | utx             res     1         ' Byte to transmit on USB
2a468 12d             | utx             res     1         ' Byte to transmit on USB
2a468 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
2a468 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
2a468 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
2a468 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
2a468 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
2a468 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
2a468 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
2a468 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
2a468 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
2a468 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
2a468 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
2a468 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
2a468 12d             | frame           res     1         ' USB 1ms frame counter value
2a468 12d             | frame           res     1         ' USB 1ms frame counter value
2a468 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
2a468 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
2a468 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
2a468 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
2a468 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
2a468 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
2a468 12d             | crc             res     1         ' Used for CRC16 calculation
2a468 12d             | crc             res     1         ' Used for CRC16 calculation
2a468 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
2a468 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
2a468 12d             | retval          res     1         ' Global success/fail return parameter
2a468 12d             | retval          res     1         ' Global success/fail return parameter
2a468 12d             | context_retval  res     1         ' Operation contextual return parameter
2a468 12d             | context_retval  res     1         ' Operation contextual return parameter
2a468 12d             | ' Device stuff
2a468 12d             | hdev_id         res     1+MAX_DEVICES
2a468 12d             | hdev_id         res     1+MAX_DEVICES
2a468 12d             | hdev_bcd        res     1
2a468 12d             | hdev_bcd        res     1
2a468 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
2a468 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
2a468 12d             | ' Keyboard/mouse stuff
2a468 12d             | hctrl_ep_addr   res     1
2a468 12d             | hctrl_ep_addr   res     1
2a468 12d             | hctrl_max_pkt   res     1
2a468 12d             | hctrl_max_pkt   res     1
2a468 12d             | hconfig_base    res     1
2a468 12d             | hconfig_base    res     1
2a468 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
2a468 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
2a468 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
2a468 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
2a468 12d             | hdev_class      res     1
2a468 12d             | hdev_class      res     1
2a468 12d             | hdev_subclass   res     1
2a468 12d             | hdev_subclass   res     1
2a468 12d             | hdev_protocol   res     1
2a468 12d             | hdev_protocol   res     1
2a468 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
2a468 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
2a468 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
2a468 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
2a468 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
2a468 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
2a468 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
2a468 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
2a468 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
2a468 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
2a468 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
2a468 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
2a468 12d             | if HAVE_MOUSE
2a468 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
2a468 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
2a468 12d             | end
2a468 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
2a468 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
2a468 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
2a468 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
2a468 12d             | hdev_ep_addr    res     1+MAX_DEVICES
2a468 12d             | hdev_ep_addr    res     1+MAX_DEVICES
2a468 12d             | hdev_out_addr   res     1
2a468 12d             | hdev_out_addr   res     1
2a468 12d             | 
2a468 12d             | if EMUPAD_MAX_PLAYER > 0
2a468 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
2a468 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
2a468 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
2a468 12d             | end
2a468 12d             | 
2a468 12d             | hreg_init_end
2a468 12d             | 
2a468 12d             | hidr_start
2a468 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
2a468 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
2a468 12d             | hidr_flags      res     1
2a468 12d             | hidr_flags      res     1
2a468 12d             | hidr_axis       res     3
2a468 12d             | hidr_axis       res     3
2a468 12d             | hidr_buttons    res     1
2a468 12d             | hidr_buttons    res     1
2a468 12d             | hidr_hats       res     1
2a468 12d             | hidr_hats       res     1
2a468 12d             | '' Above are actually useful values, 6 longs
2a468 12d             | hidr_id         res     1
2a468 12d             | hidr_id         res     1
2a468 12d             | hidr_state      res     1
2a468 12d             | hidr_state      res     1
2a468 12d             | hidr_size       res     1
2a468 12d             | hidr_size       res     1
2a468 12d             | hidr_count      res     1
2a468 12d             | hidr_count      res     1
2a468 12d             | hidr_offset     res     1
2a468 12d             | hidr_offset     res     1
2a468 12d             | hidr_usage_idx  res     1
2a468 12d             | hidr_usage_idx  res     1
2a468 12d             | hidr_lminmax    res     1
2a468 12d             | hidr_lminmax    res     1
2a468 12d             | hidr_pminmax    res     1
2a468 12d             | hidr_pminmax    res     1
2a468 12d             | hidr_type       res     1
2a468 12d             | hidr_type       res     1
2a468 12d             | hidr_end
2a468 12d             | 
2a468 12d             | ' Variables dependent on the system freqency
2a468 12d             | _var_64_lower_  res     1
2a468 12d             | _var_64_lower_  res     1
2a468 12d             | _var_64_upper_  res     1
2a468 12d             | _var_64_upper_  res     1
2a468 12d             | _12Mbps_        res     1
2a468 12d             | _12Mbps_        res     1
2a468 12d             | _1_5Mbps_       res     1
2a468 12d             | _1_5Mbps_       res     1
2a468 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
2a468 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
2a468 12d             | _1us_           res     1         ' 1us
2a468 12d             | _1us_           res     1         ' 1us
2a468 12d             | _10us_          res     1         ' 10us
2a468 12d             | _10us_          res     1         ' 10us
2a468 12d             | _33us_          res     1         ' 33us
2a468 12d             | _33us_          res     1         ' 33us
2a468 12d             | _txn_err_       res     1         ' 250us
2a468 12d             | _txn_err_       res     1         ' 250us
2a468 12d             | _500us_         res     1         ' 500us
2a468 12d             | _500us_         res     1         ' 500us
2a468 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
2a468 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
2a468 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
2a468 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
2a468 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
2a468 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
2a468 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
2a468 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
2a468 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
2a468 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
2a468 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
2a468 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
2a468 12d             | _preamble_wait_ res     1
2a468 12d             | _preamble_wait_ res     1
2a468 12d             | _1ms_           res     1         ' 1ms
2a468 12d             | _1ms_           res     1         ' 1ms
2a468 12d             | _2ms_           res     1         ' 2ms
2a468 12d             | _2ms_           res     1         ' 2ms
2a468 12d             | _suspend_wait_  res     1         ' 3ms
2a468 12d             | _suspend_wait_  res     1         ' 3ms
2a468 12d             | _4ms_           res     1         ' 4ms
2a468 12d             | _4ms_           res     1         ' 4ms
2a468 12d             | _xfer_wait_     res     1         ' 5ms
2a468 12d             | _xfer_wait_     res     1         ' 5ms
2a468 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
2a468 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
2a468 12d             | _reset_hold_    res     1         ' 15ms
2a468 12d             | _reset_hold_    res     1         ' 15ms
2a468 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
2a468 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
2a468 12d             | _21ms_          res     1         ' 21ms
2a468 12d             | _21ms_          res     1         ' 21ms
2a468 12d             | _100ms_         res     1         ' 100ms
2a468 12d             | _100ms_         res     1         ' 100ms
2a468 12d             | _500ms_         res     1         ' 500ms
2a468 12d             | _500ms_         res     1         ' 500ms
2a468 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
2a468 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
2a468 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
2a468 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
2a468 12d             | '------------------------------------------------------------------------------
2a468 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
2a468 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
2a468 12d             | _usb_d_ls_nco_  res     1
2a468 12d             | _usb_d_ls_nco_  res     1
2a468 12d             | _usb_h_fs_nco_  res     1
2a468 12d             | _usb_h_fs_nco_  res     1
2a468 12d             | _usb_d_fs_nco_  res     1
2a468 12d             | _usb_d_fs_nco_  res     1
2a468 12d             | '------------------------------------------------------------------------------
2a468 12d             | ' Scratch registers
2a468 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
2a468 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
2a468 12d             | htmp1           res     1
2a468 12d             | htmp1           res     1
2a468 12d             | htmp2           res     1
2a468 12d             | htmp2           res     1
2a468 12d             | htmp3           res     1
2a468 12d             | htmp3           res     1
2a468 12d             | hrep            res     1         ' Repeat count
2a468 12d             | hrep            res     1         ' Repeat count
2a468 12d             | hsave0          res     1         ' Subroutine parameter saves
2a468 12d             | hsave0          res     1         ' Subroutine parameter saves
2a468 12d             | hsave1          res     1
2a468 12d             | hsave1          res     1
2a468 12d             | hsave2          res     1
2a468 12d             | hsave2          res     1
2a468 12d             | isrtmp1         res     1
2a468 12d             | isrtmp1         res     1
2a468 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
2a468 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
2a468 12d             | hr0             res     1         ' Multi-purpose registers
2a468 12d             | hr0             res     1         ' Multi-purpose registers
2a468 12d             | hr1             res     1
2a468 12d             | hr1             res     1
2a468 12d             | hr2             res     1
2a468 12d             | hr2             res     1
2a468 12d             | hr3             res     1
2a468 12d             | hr3             res     1
2a468 12d             | hpar1           res     1         ' Routine entry/exit parameters
2a468 12d             | hpar1           res     1         ' Routine entry/exit parameters
2a468 12d             | hpar2           res     1
2a468 12d             | hpar2           res     1
2a468 12d             | hpar3           res     1
2a468 12d             | hpar3           res     1
2a468 12d             | hct2            res     1         ' Function response bus turn-around timer
2a468 12d             | hct2            res     1         ' Function response bus turn-around timer
2a468 12d             | hct3            res     1         ' Keyboard/mouse poll timer
2a468 12d             | hct3            res     1         ' Keyboard/mouse poll timer
2a468 12d             | mod_cnt         res     1         ' Used in idle loops
2a468 12d             | mod_cnt         res     1         ' Used in idle loops
2a468 12d             |                 fit     $1F0
2a468 12d             |                 org     $200
2a468 200             | hlut_start
2a468 200             | 
2a468 200             | '------------------------------------------------------------------------------
2a468 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
2a468 200             | ' settings to startup defaults.
2a468 200             | '------------------------------------------------------------------------------
2a468 200             | ' On entry:
2a468 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
2a468 200             | '------------------------------------------------------------------------------
2a468 200             | set_speed_full
2a468 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
2a46c 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
2a470 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
2a474 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
2a478 204             | '                ret                             wcz     ' Restore caller flags on exit
2a478 204             | 
2a478 204             | '------------------------------------------------------------------------------
2a478 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
2a478 204             | ' is a downstream hub connected (not yet implemented), the baud generator
2a478 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
2a478 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
2a478 204             | ' putting the smart pins into reset.
2a478 204             | '------------------------------------------------------------------------------
2a478 204             | ' On entry:
2a478 204             | ' On exit: CZ flags restored to caller states
2a478 204             | '------------------------------------------------------------------------------
2a478 204             | set_speed_low
2a478 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
2a47c 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
2a480 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
2a484 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
2a488 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2a48c 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
2a490 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
2a494 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
2a498 20c             | 
2a498 20c             | '------------------------------------------------------------------------------
2a498 20c             | ' Perform configuration stuff required when a device intitially connects.
2a498 20c             | '------------------------------------------------------------------------------
2a498 20c             | ' On entry:
2a498 20c             | ' On exit:
2a498 20c             | '------------------------------------------------------------------------------
2a498 20c             | on_connect
2a498 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
2a49c 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
2a4a0 20e             | .retry
2a4a0 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2a4a4 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
2a4a8 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
2a4ac 211 00 08 00 FF 
2a4b0 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
2a4b4 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
2a4b8 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2a4bc 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
2a4c0 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
2a4c4 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
2a4c8 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a4cc 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
2a4d0 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
2a4d4 21b 4C 03 B0 FD |                 call    #poll_waitx
2a4d8 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
2a4dc 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
2a4e0 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
2a4e4 21f B8 FF 9F FD |                 jmp     #.retry
2a4e8 220             | .get_dev_desc
2a4e8 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
2a4ec 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
2a4f0 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
2a4f4 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
2a4f8 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
2a4fc 225 88 FB BF FD |                 call    #reset
2a500 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
2a504 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2a508 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
2a50c 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
2a510 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a514 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
2a518 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
2a51c 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
2a520 22e 04 00 00 FF 
2a524 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
2a528 230 34 FA BF FD |                 call    #calc_crc5
2a52c 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
2a530 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2a534 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
2a538 234 F7 AD C2 FA |                 rdbyte  total_data, pb
2a53c 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
2a540 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
2a544 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a548 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
2a54c 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
2a550 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
2a554 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
2a558 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
2a55c 23d C4 02 B0 FD |                 call    #poll_waitx
2a560 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
2a564 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2a568 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
2a56c 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
2a570 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
2a574 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a578 244 2D 00 64 5D |         if_nz   ret
2a57c 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
2a580 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
2a584 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
2a588 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
2a58c 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
2a590 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
2a594 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
2a598 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
2a59c 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
2a5a0 24e 2C FB 9F CD |         if_b    jmp     #host_error
2a5a4 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
2a5a8 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
2a5ac 251 2D EC 63 FD |                 call    pa
2a5b0 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
2a5b4 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
2a5b8 254 2C EC 63 FD |                 jmp     pa
2a5bc 255             | 
2a5bc 255             | '------------------------------------------------------------------------------
2a5bc 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
2a5bc 255             | ' Status reporting is always in the function-to-host direction.
2a5bc 255             | '------------------------------------------------------------------------------
2a5bc 255             | ' On entry:
2a5bc 255             | '   PTRA - start address of the SETUP data in hub.
2a5bc 255             | '   PB - start address of the buffer/struct to be written to during the IN data
2a5bc 255             | '     stage.
2a5bc 255             | '   ep_addr_pid - device address, endpoint and CRC5.
2a5bc 255             | ' On exit:
2a5bc 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
2a5bc 255             | '     contains the count of data stage bytes actually received, which must
2a5bc 255             | '     always be <= the count requested.
2a5bc 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2a5bc 255             | '     more specific USB operation error code.
2a5bc 255             | '------------------------------------------------------------------------------
2a5bc 255             | control_read
2a5bc 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
2a5c0 256 F8 8F 03 F6 |                 mov     hpar2, ptra
2a5c4 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
2a5c8 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2a5cc 259             | .xfer_start
2a5cc 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
2a5d0 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2a5d4 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a5d8 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
2a5dc 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
2a5e0 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2a5e4 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2a5e8 260 61 00 00 FF 
2a5ec 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
2a5f0 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2a5f4 263             | .data
2a5f4 263 56 B1 02 F6 |                 mov     pkt_data, total_data
2a5f8 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
2a5fc 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
2a600 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
2a604 267             | .nak_retry
2a604 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
2a608 268             | .in_retry
2a608 268 BC F6 BF FD |                 call    #txn_in
2a60c 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
2a610 26a 28 00 90 AD |         if_z    jmp     #.commit
2a614 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2a618 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2a61c 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2a620 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2a624 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
2a628 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
2a62c 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
2a630 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2a634 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
2a638 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
2a63c 275             | .commit
2a63c 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
2a640 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
2a644 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
2a648 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
2a64c 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
2a650 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2a654 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
2a658 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
2a65c 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
2a660 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
2a664 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
2a668 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
2a66c 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
2a670 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
2a674 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
2a678 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
2a67c 285             | .pre_status
2a67c 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
2a680 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
2a684 287 00 B0 06 F6 |                 mov     pkt_data, #0
2a688 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
2a68c 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2a690 28a 61 00 00 FF 
2a694 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
2a698 28c             | .out_retry
2a698 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
2a69c 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a6a0 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
2a6a4 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2a6a8 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2a6ac 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2a6b0 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
2a6b4 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
2a6b8 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2a6bc 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
2a6c0 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
2a6c4 297             | ' I've encountered transfer STALL, even though the data looks correct, and
2a6c4 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
2a6c4 297             | ' ControlRead() transfer gets things unstuck most of the time...
2a6c4 297             | .xfer_retry
2a6c4 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
2a6c8 298 58 01 B0 FD |                 call    #poll_waitx
2a6cc 299 8C F9 BF FD |                 call    #wait_txn_ok
2a6d0 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
2a6d4 29b C7 F1 03 F6 |                 mov     ptra, hpar2
2a6d8 29c C8 EF 03 F6 |                 mov     pb, hpar3
2a6dc 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
2a6e0 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
2a6e4 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
2a6e8 2a0             | 
2a6e8 2a0             | '------------------------------------------------------------------------------
2a6e8 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
2a6e8 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
2a6e8 2a0             | ' the SETUP data struct is filled with the required values.
2a6e8 2a0             | '------------------------------------------------------------------------------
2a6e8 2a0             | ' On entry:
2a6e8 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
2a6e8 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
2a6e8 2a0             | '     stage.
2a6e8 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
2a6e8 2a0             | ' On exit:
2a6e8 2a0             | '   retval - used to convey the success/failure of each stage.
2a6e8 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2a6e8 2a0             | '     more specific USB operation error code.
2a6e8 2a0             | '------------------------------------------------------------------------------
2a6e8 2a0             | control_write
2a6e8 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2a6ec 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2a6f0 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2a6f4 2a3             | 
2a6f4 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
2a6f8 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
2a6fc 2a5 F7 91 03 F6 |                 mov     hpar3, pb
2a700 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2a704 2a7             | .xfer_start
2a704 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
2a708 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
2a70c 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2a710 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a714 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
2a718 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
2a71c 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2a720 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2a724 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
2a728 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2a72c 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2a730 2b2             | .data
2a730 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
2a734 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
2a738 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
2a73c 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
2a740 2b6             | .out_retry
2a740 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
2a744 2b7 88 F6 BF FD |                 call    #txn_out
2a748 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a74c 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
2a750 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2a754 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
2a758 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
2a75c 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
2a760 2be             | .commit
2a760 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
2a764 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
2a768 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
2a76c 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
2a770 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
2a774 2c3             | pre_status_in
2a774 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
2a778 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2a77c 2c5             | .status_retry
2a77c 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
2a780 2c6 44 F5 BF FD |                 call    #txn_in
2a784 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
2a788 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
2a78c 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
2a790 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
2a794 2cb 2D 00 64 AD |         if_z    ret
2a798 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
2a79c 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2a7a0 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
2a7a4 2cf             | '               ret                                     ' Caller must handle transfer retirement
2a7a4 2cf             | 
2a7a4 2cf             | '------------------------------------------------------------------------------
2a7a4 2cf             | ' Execute an IN interrupt transaction.
2a7a4 2cf             | '------------------------------------------------------------------------------
2a7a4 2cf             | ' On entry:
2a7a4 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
2a7a4 2cf             | '   hpar2 - Address of the IN data buffer
2a7a4 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
2a7a4 2cf             | ' On exit:
2a7a4 2cf             | '   retval - the result of the operation.
2a7a4 2cf             | '   hpar3 - the count of IN data bytes actually received.
2a7a4 2cf             | '------------------------------------------------------------------------------
2a7a4 2cf             | do_int_in
2a7a4 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2a7a8 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2a7ac 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2a7b0 2d2             | 
2a7b0 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
2a7b4 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
2a7b8 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
2a7bc 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
2a7c0 2d6             | .retry
2a7c0 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
2a7c4 2d7 00 F5 BF FD |                 call    #txn_in
2a7c8 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
2a7cc 2d9 1C 00 90 AD |         if_z    jmp     #.commit
2a7d0 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
2a7d4 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
2a7d8 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
2a7dc 2dd 54 00 B0 FD |                 call    #retry_wait
2a7e0 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2a7e4 2df 18 00 90 AD |         if_z    jmp     #.post_ret
2a7e8 2e0 D4 FF 9F FD |                 jmp     #.retry
2a7ec 2e1             | .commit
2a7ec 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
2a7f0 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
2a7f4 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
2a7f8 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
2a7fc 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2a800 2e6             | .post_ret
2a800 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
2a804 2e7             | 
2a804 2e7             | 
2a804 2e7             | '------------------------------------------------------------------------------
2a804 2e7             | ' Resets the downstream hub port to FS
2a804 2e7             | '------------------------------------------------------------------------------
2a804 2e7             | dwnstream_reset
2a804 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2a808 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
2a80c 2e9             | 
2a80c 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
2a810 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
2a814 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2a818 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
2a81c 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
2a820 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
2a824 2ef             | 
2a824 2ef             | '------------------------------------------------------------------------------
2a824 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
2a824 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
2a824 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
2a824 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
2a824 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
2a824 2ef             | '------------------------------------------------------------------------------
2a824 2ef             | ' On entry:
2a824 2ef             | '   hctwait - wait interval in sysclocks.
2a824 2ef             | ' On exit:
2a824 2ef             | '------------------------------------------------------------------------------
2a824 2ef             | poll_waitx
2a824 2ef 1A 92 63 FD |                 getct   hct2
2a828 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
2a82c 2f1             | .wait
2a82c 2f1 FF 25 CC FB |                 jnct2   #.wait
2a830 2f2 2D 00 64 FD |                 ret
2a834 2f3             | 
2a834 2f3             | '------------------------------------------------------------------------------
2a834 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
2a834 2f3             | '------------------------------------------------------------------------------
2a834 2f3             | ' On entry:
2a834 2f3             | '   retval - transaction response PID or error code.
2a834 2f3             | ' On exit:
2a834 2f3             | '------------------------------------------------------------------------------
2a834 2f3             | retry_wait
2a834 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2a838 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
2a83c 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2a840 2f6 14 00 90 AD |         if_z    jmp     #.nak
2a844 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
2a848 2f8 D8 FF BF FD |                 call    #poll_waitx
2a84c 2f9             | .dec
2a84c 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
2a850 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
2a854 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
2a858 2fc             | .nak
2a858 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
2a85c 2fd C4 FF BF FD |                 call    #poll_waitx
2a860 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
2a864 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
2a868 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
2a86c 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
2a870 302 2D 00 64 FD |                 ret
2a874 303             | 
2a874 303             | host_reset
2a874 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
2a878 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
2a87c 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
2a87c 305 BD 01 05 FF 
2a880 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
2a884 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
2a888 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
2a88c 309             | ' Check to see if the system clock has been changed.
2a88c 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2a890 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
2a894 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
2a898 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
2a89c 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2a8a0 30e 40 46 62 FD |                 dirl    dp
2a8a4 30f             | 
2a8a4 30f 28 02 64 FD |                 setq    #1
2a8a8 310 80 00 80 FF 
2a8ac 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2a8b0 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
2a8b4 313             | .enable
2a8b4 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2a8b8 314 41 46 62 FD |                 dirh    dp
2a8bc 315 1F 36 63 FD |                 waitx   _1us_
2a8c0 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2a8c4 317             | 
2a8c4 317             |                 ' Handle Port protection enable and startup delay
2a8c4 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
2a8c8 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
2a8cc 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
2a8d0 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
2a8d4 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
2a8d8 31c             | 
2a8d8 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
2a8dc 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
2a8e0 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
2a8e4 31f 00 00 04 F6 |                 mov     0-0, #0
2a8e8 320             | .regloop
2a8e8 320             | 
2a8e8 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
2a8e8 320             | 
2a8e8 320             | discon_entry
2a8e8 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
2a8ec 321             | 
2a8ec 321             |               
2a8ec 321             |         if HAVE_HIDPAD
2a8ec 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
2a8f0 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
2a8f4 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
2a8f8 324 F7 01 68 FC |                 wrlong  #0,pb
2a8fc 325             |         end
2a8fc 325             |         if EMUPAD_MAX_PLAYER > 0
2a8fc 325             |         end
2a8fc 325             | 
2a8fc 325             |                 ' Fall through to disconnected loop
2a8fc 325             | 
2a8fc 325             | '-----------------------------------------------------------------------------------------------------------------
2a8fc 325             | ' Device connect handling (Section 7.1.7.3).
2a8fc 325             | '-----------------------------------------------------------------------------------------------------------------
2a8fc 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
2a8fc 325             | ' device to connect (Section 7.1.7.3).
2a8fc 325             | '-----------------------------------------------------------------------------------------------------------------
2a8fc 325             | disconnected
2a8fc 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
2a900 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
2a904 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
2a908 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
2a90c 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
2a910 32a             |         if ACTIVITY_LED >= 0
2a910 32a             |         end
2a910 32a 22 A7 82 FA |                 rqpin   urx, dm
2a914 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
2a918 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
2a91c 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
2a920 32e             | .se1_test
2a920 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
2a924 32f FC FE BF FD |                 call    #poll_waitx
2a928 330 22 A7 82 FA |                 rqpin   urx, dm
2a92c 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
2a930 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
2a934 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
2a938 334             | .se1            'SE1 is a fatal error condition
2a938 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
2a93c 335 E4 FE BF FD |                 call    #poll_waitx
2a940 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
2a944 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
2a948 338             | .connect_test                                           ' Test lines until stable J/K state seen
2a948 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
2a94c 339 22 A7 82 FA |                 rqpin   urx, dm
2a950 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
2a954 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
2a958 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
2a95c 33d             | connected
2a95c 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
2a960 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
2a964 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
2a968 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
2a96c 341             | .set_pulse
2a96c 341 1A 64 63 FD |                 getct   _pulse_time_
2a970 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
2a974 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
2a974 343             | ' of 1ms and make a correction, if necessary.
2a974 343             | '                mov     htmp, _1ms_
2a974 343             | '                subs    htmp, iframe_delta
2a974 343             | '                adds    _frame1ms_clks_, htmp
2a974 343             | '                debug(udec(_frame1ms_clks_))
2a974 343             | 
2a974 343             |                 ' Fall through to idle/processing loop
2a974 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
2a978 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
2a97c 345             | 
2a97c 345             | hidle
2a97c 345 22 A7 82 FA |                 rqpin   urx, dm
2a980 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2a984 347 98 00 90 CD |         if_c    jmp     #.se0_test
2a988 348 24 06 70 FD |                 pollct3                         wc
2a98c 349 68 00 90 3D |         if_nc   jmp     #.nopoll
2a990 34a 1A 94 63 FD |                 getct   hct3
2a994 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
2a998 34c             | 
2a998 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2a99c 34d 00 70 E3 F8 |                 getbyte htmp
2a9a0 34e             | 
2a9a0 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
2a9a4 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
2a9a8 350 40 00 90 AD |         if_z    jmp     #.poll
2a9ac 351             | 
2a9ac 351             |         if _HAVE_GAMEPAD
2a9ac 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
2a9b0 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
2a9b4 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
2a9b8 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
2a9bc 355 2C 00 90 AD |         if_z    jmp     #.poll
2a9c0 356             |         end
2a9c0 356             | 
2a9c0 356             |         if HAVE_MOUSE
2a9c0 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
2a9c4 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
2a9c8 358 20 00 90 AD |         if_z    jmp     #.poll
2a9cc 359             |         end
2a9cc 359             | 
2a9cc 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
2a9d0 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
2a9d4 35b 14 00 90 AD |         if_z    jmp     #.poll
2a9d8 35c             | 
2a9d8 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
2a9dc 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
2a9e0 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
2a9e4 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
2a9e8 360             |         if HAVE_MOUSE
2a9e8 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
2a9ec 361             |         else
2a9ec 361             |         end
2a9ec 361             | 
2a9ec 361             | .poll
2a9ec 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
2a9f0 362 2D EC 63 FD |                 call    pa
2a9f4 363             | .skip_poll
2a9f4 363             | 
2a9f4 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
2a9f8 364             | 
2a9f8 364             | .nopoll
2a9f8 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
2a9fc 365 44 00 90 AD |         if_z    jmp     #hsuspend
2aa00 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
2aa04 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
2aa08 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
2aa0c 369 1A 84 63 FD |                 getct   hr0
2aa10 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
2aa14 36b             |         if ACTIVITY_LED >= 0
2aa14 36b             |         end
2aa14 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
2aa18 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
2aa1c 36d 5C FF 9F FD |                 jmp     #hidle
2aa20 36e             | ' Check for extended SE0 state on the bus
2aa20 36e             | .se0_test
2aa20 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
2aa24 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
2aa28 370 22 A7 82 FA |                 rqpin   urx, dm
2aa2c 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2aa30 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
2aa34 373 24 F6 BF FD |                 call    #wait_txn_ok
2aa38 374 00 00 80 FF 
2aa3c 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
2aa40 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
2aa40 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
2aa44 377             | 
2aa44 377             | hsuspend
2aa44 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
2aa48 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
2aa4c 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
2aa50 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
2aa54 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
2aa58 37c 00 96 07 F6 |                 mov     mod_cnt, #0
2aa5c 37d             | 
2aa5c 37d             |                 ' Fall through to resume wait loop
2aa5c 37d             | 
2aa5c 37d             | hwait_resume
2aa5c 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
2aa60 37e 02 86 47 F0 |                 shr     hr1, #2
2aa64 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
2aa68 380             |         if ACTIVITY_LED >= 0
2aa68 380             |         end
2aa68 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
2aa6c 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
2aa70 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
2aa74 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2aa78 384 18 00 90 AD |         if_z    jmp     #.resume
2aa7c 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
2aa80 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
2aa84 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
2aa88 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2aa8c 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
2aa90 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
2aa94 38b             | .resume
2aa94 38b 22 05 28 FC |                 wypin   #OUT_K, dm
2aa98 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
2aa9c 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
2aaa0 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
2aaa4 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
2aaa8 390 1F 70 63 FD |                 waitx   htmp
2aaac 391 22 07 28 FC |                 wypin   #OUT_J, dm
2aab0 392 01 70 47 F0 |                 shr     htmp, #1
2aab4 393 1F 70 63 FD |                 waitx   htmp
2aab8 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2aabc 395 1A 92 62 FD |                 getct   iframe_ct_base
2aac0 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2aac4 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2aac8 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
2aacc 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
2aad0 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
2aad4 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
2aad8 39c             | 
2aad8 39c             | '------------------------------------------------------------------------------
2aad8 39c             | ' Send preamble to enable low-speed HUB ports
2aad8 39c             | '------------------------------------------------------------------------------
2aad8 39c             | ' On entry:
2aad8 39c             | ' On exit:
2aad8 39c             | '   USB baud rate set to low-speed
2aad8 39c             | '------------------------------------------------------------------------------
2aad8 39c             | utx_pre
2aad8 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2aadc 39d 40 46 62 FD |                 dirl    dp
2aae0 39e 28 02 64 FD |                 setq    #1
2aae4 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
2aae8 3a0 58 44 62 FD |                 drvl    dm
2aaec 3a1 59 46 62 FD |                 drvh    dp
2aaf0 3a2             | 
2aaf0 3a2 1E 00 00 FF 
2aaf4 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
2aaf8 3a4             | 
2aaf8 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
2aafc 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
2ab00 3a6 28 02 64 3D |         if_nc   setq    #1
2ab04 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
2ab08 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
2ab0c 3a9             | .l1
2ab0c 3a9             | 
2ab0c 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2ab10 3aa 40 46 62 FD |                 dirl    dp
2ab14 3ab 28 02 64 FD |                 setq    #1
2ab18 3ac 80 00 80 FF 
2ab1c 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2ab20 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
2ab24 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2ab28 3b0 41 46 62 FD |                 dirh    dp
2ab2c 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2ab30 3b2             | 
2ab30 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
2ab34 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2ab38 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
2ab3c 3b5             | 
2ab3c 3b5             | hlut_end
2ab3c 3b5             |                 fit     $400
2ab3c 3b5             |                 orgh
2ab3c                 | if OVERLAP_MEMORY
2ab3c                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
2ab3c                 | end
2ab3c                 | '------------------------------------------------------------------------------
2ab3c                 | ' Routines called from cog space.
2ab3c                 | '------------------------------------------------------------------------------
2ab3c                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
2ab3c                 | '------------------------------------------------------------------------------
2ab3c                 | 
2ab3c                 | '------------------------------------------------------------------------------
2ab3c                 | ' USB host cog initialization.
2ab3c                 | '------------------------------------------------------------------------------
2ab3c                 | usb_host_init
2ab3c                 |                 ' Initialize buffer pointers
2ab3c                 |         if OVERLAP_MEMORY
2ab3c                 |         else
2ab3c     40 15 B0 FE |                 loc     pb, #hid_descr
2ab40                 |         end
2ab40     F7 4B 02 F6 |                 mov     hid_descr_p, pb
2ab44                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
2ab44                 |                 {
2ab44                 |                 }
2ab44                 |         
2ab44                 |                 {
2ab44                 |                 }
2ab44                 |                 'loc     pb,#hkbd_report
2ab44                 |                 'mov     hkbd_report_p,pb
2ab44                 | 
2ab44     08 1D B0 FE |                 loc     pb, #hub_descr
2ab48     F7 4D 02 F6 |                 mov     hub_descr_p, pb
2ab4c     1D 1D B0 FE |                 loc     pb, #urx_buff
2ab50     F7 4F 02 F6 |                 mov     urx_buff_p, pb
2ab54     95 1D B0 FE |                 loc     pb, #dev_desc_buff
2ab58     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
2ab5c     9F 1D B0 FE |                 loc     pb, #con_desc_buff
2ab60     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
2ab64     18 15 B0 FE |                 loc     pb, #usb_cache_start
2ab68     F7 55 02 F6 |                 mov     cache_start_p, pb
2ab6c     E9 1C B0 FE |                 loc     pb, #usb_cache_end
2ab70     F7 57 02 F6 |                 mov     cache_end_p, pb
2ab74                 | 
2ab74                 |         if ERROR_LED >= 0
2ab74                 |         end
2ab74                 | 
2ab74                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
2ab74                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
2ab74                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
2ab74                 | ' Configure and enable the Serial Host USB port.
2ab74     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
2ab78                 | 
2ab78                 | '------------------------------------------------------------------------------
2ab78                 | ' Timing calculations happen before any interrupt(s) are enabled.
2ab78                 | '------------------------------------------------------------------------------
2ab78                 | ' On entry:
2ab78                 | '   htmp - current CLKFREQ value.
2ab78                 | '------------------------------------------------------------------------------
2ab78                 | hinit_usb_timings
2ab78                 | '                getct   htmp2
2ab78     B8 59 02 F6 |                 mov     save_sysclk, htmp
2ab7c     8D 5B 80 FF 
2ab80     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
2ab84     18 30 63 FD |                 getqx   _12Mbps_
2ab88     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
2ab8c     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
2ab90     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
2ab94     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
2ab98     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
2ab9c     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
2aba0     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
2aba4     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
2aba8     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
2abac     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
2abb0     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
2abb4     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
2abb8     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
2abbc     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
2abc0     80 00 00 FF 
2abc4     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
2abc8     18 2C 63 FD |                 getqx   _var_64_lower_
2abcc     19 2E 63 FD |                 getqy   _var_64_upper_
2abd0     28 2C 63 FD |                 setq    _var_64_lower_
2abd4     65 CD 1D FF 
2abd8     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
2abdc     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
2abe0     01 00 00 FF 
2abe4     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
2abe8     18 2C 63 FD |                 getqx   _var_64_lower_
2abec     19 2E 63 FD |                 getqy   _var_64_upper_
2abf0     28 2C 63 FD |                 setq    _var_64_lower_
2abf4     A1 07 00 FF 
2abf8     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
2abfc     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
2ac00     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
2ac04     09 36 57 F0 |                 shr     _1us_, #9               wc
2ac08     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
2ac0c     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
2ac10     18 38 63 FD |                 getqx   _10us_
2ac14     09 38 57 F0 |                 shr     _10us_, #9              wc
2ac18     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
2ac1c     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
2ac20     18 3A 63 FD |                 getqx   _33us_
2ac24     09 3A 57 F0 |                 shr     _33us_, #9              wc
2ac28     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
2ac2c     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
2ac30     18 3C 63 FD |                 getqx   _txn_err_
2ac34     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
2ac38     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
2ac3c     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
2ac40     18 3E 63 FD |                 getqx   _500us_
2ac44     09 3E 57 F0 |                 shr     _500us_, #9             wc
2ac48     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
2ac4c     01 00 00 FF 
2ac50     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
2ac54     18 40 63 FD |                 getqx   _txn_ok_ls_
2ac58     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
2ac5c     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
2ac60     01 00 00 FF 
2ac64     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
2ac68     18 42 63 FD |                 getqx   _txn_ok_fs_
2ac6c     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
2ac70     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
2ac74     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
2ac78     05 00 00 FF 
2ac7c     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
2ac80     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
2ac84     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
2ac88     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
2ac8c     1C 00 00 FF 
2ac90     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
2ac94     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
2ac98     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
2ac9c     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
2aca0     00 00 00 FF 
2aca4     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
2aca8     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
2acac     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
2acb0     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
2acb4     04 00 00 FF 
2acb8     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
2acbc     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
2acc0     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
2acc4     8D 5B 00 FF 
2acc8     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
2accc     18 4C 63 FD |                 getqx   _preamble_wait_
2acd0     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
2acd4     01 00 00 FF 
2acd8     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
2acdc     18 2C 63 FD |                 getqx   _var_64_lower_
2ace0     19 2E 63 FD |                 getqy   _var_64_upper_
2ace4     28 2C 63 FD |                 setq    _var_64_lower_
2ace8     01 00 00 FF 
2acec     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
2acf0     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
2acf4     09 4E 57 F0 |                 shr     _1ms_, #9               wc
2acf8     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
2acfc     FF FF 7F FF 
2ad00     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
2ad04     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
2ad08     A7 51 03 F6 |                 mov     _2ms_, _1ms_
2ad0c     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
2ad10     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
2ad14     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
2ad18     A7 55 03 F6 |                 mov     _4ms_, _1ms_
2ad1c     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
2ad20     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
2ad24     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
2ad28     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
2ad2c     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
2ad30     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
2ad34     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
2ad38     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
2ad3c     A7 59 03 F6 |                 mov     _8ms_, _1ms_
2ad40     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
2ad44     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
2ad48     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
2ad4c     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
2ad50     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
2ad54     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
2ad58     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
2ad5c     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
2ad60     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
2ad64     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
2ad68     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
2ad6c                 | '        _ret_   mov     _1sec_, save_sysclk
2ad6c                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
2ad6c                 | '                ret
2ad6c                 | {
2ad6c                 | }
2ad6c                 | 
2ad6c                 | '------------------------------------------------------------------------------
2ad6c                 | ' Parse a configuration descriptor chain to see if the device is a recognized
2ad6c                 | ' one. If it is, start the task progression that will configure the device for
2ad6c                 | ' use.
2ad6c                 | '------------------------------------------------------------------------------
2ad6c                 | ' On entry:
2ad6c                 | '   hconfig_base - start address of the cached config descriptor chain.
2ad6c                 | ' On exit:
2ad6c                 | '------------------------------------------------------------------------------
2ad6c                 | hparse_con_desc
2ad6c     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
2ad70     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
2ad74     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
2ad78     4E 70 FF F9 |                 movbyts htmp,#%%1032
2ad7c     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
2ad80                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
2ad80                 | 
2ad80     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
2ad84     6E ED 03 F1 |                 add     pa, hconfig_base
2ad88     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
2ad8c                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
2ad8c                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
2ad8c                 | ' that defines a keyboard and/or mouse.
2ad8c     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
2ad90                 | .next_intf
2ad90     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2ad94     BC 01 90 3D |         if_ae   jmp     #hset_config
2ad98     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2ad9c     75 F3 03 F1 |                 add     ptrb, hnext_desc
2ada0     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2ada4     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2ada8     0C 00 90 AD |         if_z    jmp     #.intf
2adac     80 71 C7 FA |                 rdbyte  htmp, ptrb
2adb0     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2adb4     D8 FF 9F FD |                 jmp     #.next_intf
2adb8                 | .intf
2adb8     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
2adbc     00 90 07 F6 |                 mov     hpar3, #0
2adc0     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
2adc4     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
2adc8     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
2adcc     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
2add0                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
2add0                 | 
2add0                 | .endp
2add0     80 71 C7 FA |                 rdbyte  htmp, ptrb
2add4     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2add8     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2addc     78 00 90 3D |         if_ae   jmp     #.get_device
2ade0     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2ade4     75 F3 03 F1 |                 add     ptrb, hnext_desc
2ade8     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2adec     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2adf0     64 00 90 AD |         if_z    jmp     #.get_device
2adf4     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
2adf8     04 00 90 AD |         if_z    jmp     #.get_ep
2adfc     D0 FF 9F FD |                 jmp     #.endp
2ae00                 | .get_ep
2ae00     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
2ae04     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
2ae08     0F 86 67 F0 |                 shl     hr1, #8 + 7
2ae0c     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
2ae10     3F 00 00 FF 
2ae14     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
2ae18     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
2ae1c     00 8E 0F F2 |                 cmp     hpar2, #0               wz
2ae20     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
2ae24     00 90 0F F2 |                 cmp     hpar3, #0               wz
2ae28     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
2ae2c     A0 FF 9F FD |                 jmp     #.endp
2ae30                 | .in_ep
2ae30     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
2ae34     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
2ae38                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2ae38     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2ae3c     C2 89 DB F8 |                 setbyte hr2, hr0, #3
2ae40     8C FF 9F FD |                 jmp     #.endp
2ae44                 | .out_ep
2ae44     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
2ae48     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
2ae4c                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2ae4c     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2ae50     C2 8B DB F8 |                 setbyte hr3, hr0, #3
2ae54     78 FF 9F FD |                 jmp     #.endp
2ae58                 | 
2ae58                 | .get_device
2ae58     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
2ae5c     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
2ae60     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
2ae64     68 00 90 AD |         if_z    jmp     #.gamepad
2ae68     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
2ae6c     AC 00 90 AD |         if_z    jmp     #.hub
2ae70     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
2ae74     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
2ae78     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2ae7c     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2ae80     4C 00 90 AD |         if_z    jmp     #.gamepad
2ae84     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
2ae88     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
2ae8c                 | .keyboard
2ae8c     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
2ae90                 |         if HAVE_MOUSE
2ae90     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
2ae94                 |         else
2ae94                 |         end
2ae94     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
2ae98     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
2ae9c     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2aea0     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
2aea4     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
2aea8     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
2aeac                 |                 'debug(udec(kb_intf_num))
2aeac                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2aeac     E0 FE 9F FD |                 jmp     #.next_intf
2aeb0                 | if HAVE_MOUSE
2aeb0                 | .mouse
2aeb0     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
2aeb4     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
2aeb8     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
2aebc     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
2aec0     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2aec4                 |                 'getbyte ms_interval, hr2, #3
2aec4     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
2aec8     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
2aecc                 |                 'debug(udec(kb_intf_num))
2aecc                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2aecc     C0 FE 9F FD |                 jmp     #.next_intf
2aed0                 | end
2aed0                 | .gamepad
2aed0     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2aed4     C7 71 63 F5 |                 xor     htmp, hpar2
2aed8     3F 00 00 FF 
2aedc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2aee0     AC FE 9F AD |         if_z    jmp     #.next_intf
2aee4                 |         if HAVE_MOUSE
2aee4     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2aee8     C7 71 63 F5 |                 xor     htmp, hpar2
2aeec     3F 00 00 FF 
2aef0     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2aef4     98 FE 9F AD |         if_z    jmp     #.next_intf
2aef8                 |         end
2aef8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
2aefc     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
2af00     8C FE 9F 5D |         if_nz   jmp     #.next_intf
2af04                 | 
2af04     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2af08     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
2af0c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2af10     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
2af14     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
2af18                 |                 'debug(udec(gp_intf_num))
2af18                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
2af18     74 FE 9F FD |                 jmp     #.next_intf
2af1c                 | .hub
2af1c     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2af20     6C FE 9F 5D |         if_nz   jmp     #.next_intf
2af24     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2af28     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
2af2c     60 FE 9F 5D |         if_nz   jmp     #.next_intf
2af30     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2af34     58 FE 9F 5D |         if_nz   jmp     #.next_intf
2af38     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
2af3c     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2af40     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
2af44     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2af48     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
2af4c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
2af50                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
2af50     3C FE 9F FD |                 jmp     #.next_intf
2af54                 | 
2af54                 | '------------------------------------------------------------------------------
2af54                 | ' If a newly-connected device is recognized, do whatever is needed to configure
2af54                 | ' it according to its function, or functions. In the case of this boot protocol
2af54                 | ' keyboard/mouse class driver:
2af54                 | ' - SetConfiguration(config_num)
2af54                 | ' - SetProtocol(boot)
2af54                 | ' - SetIdle(indefinite)
2af54                 | ' - Enter the device interrupt IN polling task stage.
2af54                 | '------------------------------------------------------------------------------
2af54                 | ' On entry:
2af54                 | ' On exit:
2af54                 | '------------------------------------------------------------------------------
2af54                 | hset_config
2af54                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
2af54                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
2af54     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
2af58     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2af5c     00 00 0C F2 |                 cmp     0-0, #0                 wz
2af60     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
2af64                 |         if HAVE_MOUSE
2af64     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
2af68                 |         end
2af68     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
2af6c     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
2af70                 | .set_config
2af70     6C 0E D0 FE |                 loc     ptra, #set_config
2af74     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
2af78     6E ED 03 F1 |                 add     pa, hconfig_base
2af7c     F6 8D C3 FA |                 rdbyte  hpar1, pa
2af80     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
2af84     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
2af88     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
2af8c     A0 02 A0 FD |                 call    #control_write
2af90     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2af94     2D 00 64 5D |         if_nz   ret
2af98                 | .kbd_config
2af98     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
2af9c     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
2afa0                 | 
2afa0     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2afa4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2afa8     3F 00 00 FF 
2afac     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2afb0     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
2afb4                 | 
2afb4     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2afb8     34 0E D0 FE |                 loc     ptra, #set_protocol
2afbc     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2afc0     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2afc4     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2afc8     A0 02 A0 FD |                 call    #control_write
2afcc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2afd0     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2afd4     E4 02 90 5D |         if_nz   jmp     #.notify_client
2afd8     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2afdc     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
2afe0     30 03 B0 FD |                 call    #hset_idle
2afe4                 |                 'cmp     retval, #PID_ACK        wz
2afe4                 |         'if_nz   mov     hkbd_ep_addr, #0
2afe4                 |         'if_nz   jmp     #.notify_client
2afe4     A8 99 02 F6 |                 mov     hctwait, _2ms_
2afe8     EF 02 A0 FD |                 call    #poll_waitx
2afec     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
2aff0     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
2aff4     90 17 90 FE |                 loc     pa, #hkbd_led_rep
2aff8     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
2affc     2C 03 B0 FD |                 call    #hset_kbdled_report
2b000     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b004     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2b008     B0 02 90 5D |         if_nz   jmp     #.notify_client
2b00c     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2b010     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2b014     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2b018     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2b01c     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
2b020     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2b024     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
2b028     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2b02c     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
2b030     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
2b034     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
2b038                 |         if !!HAVE_MOUSE
2b038                 |         end
2b038                 | 
2b038                 | .mouse_config
2b038                 | if HAVE_MOUSE
2b038     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
2b03c     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2b040     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2b044     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2b048     3F 00 00 FF 
2b04c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2b050     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2b054                 | 
2b054                 |                 debug("mouse passed addr check")
2b054                 | 
2b054     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2b058     00 00 80 FF 
2b05c     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
2b060     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
2b064     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2b068     55 02 A0 FD |                 call    #control_read
2b06c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b070     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2b074     44 02 90 5D |         if_nz   jmp     #.notify_client
2b078     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2b07c     56 01 00 F6 |                 mov     0-0, total_data
2b080     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2b084                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2b084                 | 
2b084     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
2b088     64 0D D0 FE |                 loc     ptra, #set_protocol
2b08c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2b090     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2b094     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2b098     A0 02 A0 FD |                 call    #control_write
2b09c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b0a0     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2b0a4     14 02 90 5D |         if_nz   jmp     #.notify_client
2b0a8                 |                 debug("mouse passed SetProtocol")
2b0a8     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2b0ac     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
2b0b0     60 02 B0 FD |                 call    #hset_idle
2b0b4                 |                 'cmp     retval, #PID_ACK        wz
2b0b4                 |         'if_nz   mov     hmouse_ep_addr, #0
2b0b4                 |         'if_nz   jmp     #.notify_client
2b0b4                 |                 debug("mouse passed SetIdle")
2b0b4     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2b0b8     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2b0bc     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2b0c0     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2b0c4     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
2b0c8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2b0cc     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
2b0d0     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
2b0d4     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
2b0d8     3F 00 00 FF 
2b0dc     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
2b0e0     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
2b0e4     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
2b0e8     D0 01 90 FD |                 jmp     #.notify_client
2b0ec                 | end
2b0ec                 | .gamepad_config
2b0ec                 | if _HAVE_GAMEPAD
2b0ec     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2b0f0     00 00 0C F2 |                 cmp     0-0, #0                 wz
2b0f4     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
2b0f8     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2b0fc     00 70 03 F6 |                 mov     htmp, 0-0
2b100     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2b104     3F 00 00 FF 
2b108     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2b10c     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
2b110                 | 
2b110     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2b114     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2b118     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2b11c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2b120     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2b124     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2b128     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
2b12c     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
2b130     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
2b134     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2b138     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2b13c     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
2b140     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
2b144     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2b148                 | 
2b148                 |                 if EMUPAD_MAX_PLAYER > 0
2b148                 |                 
2b148                 | .rule_loop           
2b148                 |                 end
2b148                 | 
2b148     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
2b14c     5C 00 90 AD |         if_e    jmp     #.xinput
2b150     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
2b154     00 70 03 F6 |                 mov     htmp,0-0
2b158     01 A6 02 FF 
2b15c     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
2b160     7C 00 90 AD |         if_e    jmp     #.ps3
2b164                 | 
2b164     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2b168     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
2b16c     00 00 80 5F 
2b170     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
2b174     03 00 80 AF 
2b178     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
2b17c     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
2b180     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2b184     55 02 A0 FD |                 call    #control_read
2b188     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b18c     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2b190     00 00 04 56 |         if_nz   mov     0-0, #0
2b194     24 01 90 5D |         if_nz   jmp     #.notify_client
2b198     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2b19c     56 01 00 F6 |                 mov     0-0, total_data
2b1a0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2b1a4                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2b1a4                 | 
2b1a4     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
2b1a8     10 01 90 FD |                 jmp     #.notify_client
2b1ac                 | .xinput
2b1ac     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
2b1b0     2D EF 03 F6 |                 mov     pb,hdev_port
2b1b4     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
2b1b8     03 EE 27 F3 |                 fle     pb,#3
2b1bc     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
2b1c0     02 EF 47 FC |                 wrbyte  pb, ptra[2]
2b1c4                 | 
2b1c4     03 B0 06 F6 |                 mov     pkt_data, #3
2b1c8     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
2b1cc     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
2b1d0     5A 00 A0 FD |                 call    #txn_out
2b1d4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
2b1d8                 | 
2b1d8     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
2b1dc     DC 00 90 FD |                 jmp     #.notify_client
2b1e0                 | .ps3
2b1e0     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
2b1e4     2D EF 03 F6 |                 mov     pb,hdev_port
2b1e8     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
2b1ec     04 EE 27 F3 |                 fle     pb,#4
2b1f0     F7 EF C3 F9 |                 decod   pb
2b1f4     09 EF 47 FC |                 wrbyte  pb, ptra[9]
2b1f8                 | 
2b1f8     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2b1fc     00 0C D0 FE |                 loc     ptra, #set_report
2b200     01 00 80 FF 
2b204     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
2b208     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2b20c     03 61 5C FC |                 wrword  #48, ptra[wLength]
2b210     20 0C B0 FE |                 loc     pb, #ps3_command_buff
2b214     A0 02 A0 FD |                 call    #control_write
2b218                 | 
2b218     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2b21c     E0 0B D0 FE |                 loc     ptra, #set_report
2b220     01 00 80 FF 
2b224     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
2b228     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2b22c     03 09 5C FC |                 wrword  #4, ptra[wLength]
2b230     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
2b234     A0 02 A0 FD |                 call    #control_write
2b238     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
2b23c     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2b240     00 00 04 56 |         if_nz   mov     0-0, #0
2b244     74 00 90 5D |         if_nz   jmp     #.notify_client
2b248                 | 
2b248     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
2b24c     6C 00 90 FD |                 jmp     #.notify_client
2b250                 | end
2b250                 | 
2b250                 | .hub_config
2b250     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2b254     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
2b258     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
2b25c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2b260     3F 00 00 FF 
2b264     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2b268     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
2b26c                 | 
2b26c     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
2b270     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
2b274     26 EF 03 F6 |                 mov     pb, hub_descr_p
2b278     55 02 A0 FD |                 call    #control_read
2b27c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b280     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
2b284     34 00 90 5D |         if_nz   jmp     #.notify_client
2b288                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
2b288                 | 
2b288     26 F1 03 F6 |                 mov     ptra, hub_descr_p
2b28c     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
2b290     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
2b294                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
2b294                 | .pwr_loop
2b294     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
2b298     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
2b29c     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
2b2a0     A0 02 A0 FD |                 call    #control_write
2b2a4     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
2b2a8                 | 
2b2a8     B1 99 02 F6 |                 mov     hctwait, _500ms_
2b2ac     B0 99 02 F1 |                 add     hctwait, _100ms_
2b2b0     EF 02 A0 FD |                 call    #poll_waitx
2b2b4                 | 
2b2b4     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
2b2b8     00 00 90 FD |                 jmp     #.notify_client
2b2bc                 | 
2b2bc                 | .notify_client
2b2bc     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
2b2c0     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
2b2c4                 |                 debug(uhex_long(hdev_type,hdev_type+1))
2b2c4                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
2b2c4     2D 00 64 FD |                 ret
2b2c8                 | 
2b2c8                 | '------------------------------------------------------------------------------
2b2c8                 | ' Initialize the keyboard/mouse data area to start-up values.
2b2c8                 | '------------------------------------------------------------------------------
2b2c8                 | ' On entry:
2b2c8                 | ' On exit:
2b2c8                 | '------------------------------------------------------------------------------
2b2c8                 | init_kbdm_data
2b2c8     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
2b2cc     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
2b2d0                 | 
2b2d0     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
2b2d4     2B ED 03 F6 |                 mov     pa, cache_end_p
2b2d8                 | .loop
2b2d8     61 01 4C FC |                 wrbyte  #0, ptra++
2b2dc     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
2b2e0     F4 FF 9F CD |         if_b    jmp     #.loop
2b2e4                 |         
2b2e4                 |         if EMUPAD_MAX_PLAYER > 0
2b2e4                 |         end
2b2e4                 | 
2b2e4                 | 
2b2e4     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
2b2e8                 | .regloop
2b2e8     00 EC 8F F9 |                 altd    pa
2b2ec     00 00 04 F6 |                 mov     0-0, #0
2b2f0     01 EC 07 F1 |                 add     pa, #1
2b2f4     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
2b2f8     EC FF 9F 5D |         if_nz   jmp     #.regloop
2b2fc                 | 
2b2fc     E1 E1 61 FF 
2b300     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
2b304     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
2b308     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
2b30c     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
2b310                 | 
2b310     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
2b314                 | 
2b314                 | '------------------------------------------------------------------------------
2b314                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
2b314                 | ' function.
2b314                 | '------------------------------------------------------------------------------
2b314                 | ' On entry:
2b314                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
2b314                 | '   hpar2 - index number of the target interface.
2b314                 | ' On exit:
2b314                 | '------------------------------------------------------------------------------
2b314                 | hset_idle
2b314     A8 99 02 F6 |                 mov     hctwait, _2ms_
2b318     EF 02 A0 FD |                 call    #poll_waitx
2b31c     D8 0A D0 FE |                 loc     ptra, #set_idle
2b320     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
2b324     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
2b328     A0 02 80 FD |                 jmp     #control_write
2b32c                 | 
2b32c                 | '------------------------------------------------------------------------------
2b32c                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
2b32c                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
2b32c                 | '------------------------------------------------------------------------------
2b32c                 | ' On entry:
2b32c                 | '   ep_addr_pid - device address and enpoint for the request.
2b32c                 | ' On exit:
2b32c                 | '   retval - transaction result.
2b32c                 | '------------------------------------------------------------------------------
2b32c                 | hset_kbdled_report
2b32c     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2b330     CC 0A D0 FE |                 loc     ptra, #set_report
2b334     01 00 80 FF 
2b338     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
2b33c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2b340     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
2b344     27 EF 03 F6 |                 mov     pb, urx_buff_p
2b348     F7 77 42 FC |                 wrbyte  kb_led_states, pb
2b34c     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
2b350                 | 
2b350                 | '------------------------------------------------------------------------------
2b350                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
2b350                 | '------------------------------------------------------------------------------
2b350                 | ' On entry:
2b350                 | ' On exit:
2b350                 | '------------------------------------------------------------------------------
2b350                 | hget_kbd_in_report
2b350     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2b354     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2b358     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
2b35c     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
2b360     CF 02 A0 FD |                 call    #do_int_in
2b364     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b368     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2b36c                 | 
2b36c     00 90 0F F2 |                 cmp     hpar3, #0               wz
2b370     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2b374                 | 
2b374     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
2b378     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2b37c     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
2b380     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
2b384                 | 
2b384     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
2b388     18 00 B0 FD |                 call    #hkbd_compare
2b38c                 |         if EMUPAD_MAX_PLAYER > 0
2b38c                 |         end
2b38c                 | 
2b38c                 | .led_check
2b38c     3B 71 03 F6 |                 mov     htmp, kb_led_states
2b390     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
2b394     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
2b398     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
2b39c     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
2b3a0     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
2b3a4                 | 
2b3a4                 | '------------------------------------------------------------------------------
2b3a4                 | ' Compare current and previous keyboard data buffers for keypress changes.
2b3a4                 | '------------------------------------------------------------------------------
2b3a4                 | hkbd_compare
2b3a4     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2b3a8     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
2b3ac     61 73 07 FB |                 rdlong  htmp1, ptra++
2b3b0     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2b3b4     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
2b3b8     61 73 07 FB |                 rdlong  htmp1, ptra++
2b3bc     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2b3c0     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
2b3c4     2D 00 64 AD |         if_z    ret
2b3c8                 | 
2b3c8     B4 13 D0 FE |                 loc     ptra, #hkbd_report
2b3cc                 | 
2b3cc                 |                 ' Handle modifiers
2b3cc     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
2b3d0     00 87 C7 FA |                 rdbyte  hr1, ptra
2b3d4     C7 87 43 F9 |                 rolword hr1,hpar2,#0
2b3d8     63 86 63 FD |                 mergew  hr1
2b3dc     08 EC 07 F6 |                 mov     pa,#8
2b3e0                 | .modloop
2b3e0     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
2b3e4     E8 8C 07 F6 |                 mov     hpar1,#$E8
2b3e8     F6 8D 83 F1 |                 sub     hpar1,pa
2b3ec     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
2b3f0     FB ED 6F FB |                 djnz    pa,#.modloop
2b3f4                 | 
2b3f4     6F E0 75 FD | .release        modc    _set    wc
2b3f8                 |                 'alts    hdev_port, #hid_report_p
2b3f8                 |                 'mov     ptra, hid_report_p
2b3f8     02 F0 07 F1 |                 add     ptra, #2
2b3fc     06 EC 07 F6 |                 mov     pa, #6
2b400     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
2b404     20 00 90 AD |         if_z    jmp     #.rl3
2b408     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2b40c     02 F2 07 F1 |                 add     ptrb, #2
2b410     06 EE 07 F6 |                 mov     pb, #6
2b414     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
2b418     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2b41c     08 00 90 AD |         if_z    jmp     #.rl3
2b420     FC EF 6F FB |                 djnz    pb, #.rl2
2b424     68 00 B0 FD |                 call    #hkbd_translate
2b428     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
2b42c                 | 
2b42c     00 90 07 F6 |                 mov     hpar3, #0
2b430     1F 90 27 F4 |                 bith    hpar3, #31
2b434                 | 
2b434     6F 00 74 FD | .press          modc    _clr    wc
2b438     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2b43c     02 F0 07 F1 |                 add     ptra, #2
2b440     06 EC 07 F6 |                 mov     pa, #6
2b444     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
2b448     20 00 90 AD |         if_z    jmp     #.pl3
2b44c     30 13 F0 FE |                 loc     ptrb, #hkbd_report
2b450     02 F2 07 F1 |                 add     ptrb, #2
2b454     06 EE 07 F6 |                 mov     pb, #6
2b458     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
2b45c     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2b460     08 00 90 AD |         if_z    jmp     #.pl3
2b464     FC EF 6F FB |                 djnz    pb, #.pl2
2b468     24 00 B0 FD |                 call    #hkbd_translate
2b46c     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
2b470                 | 
2b470     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
2b474     08 13 F0 FE |                 loc     ptrb, #hkbd_report
2b478     28 02 64 FD |                 setq #1
2b47c     61 73 07 FB |                 rdlong  htmp1, ptra++
2b480     28 02 64 FD |                 setq #1
2b484     E1 73 67 FC |                 wrlong  htmp1, ptrb++
2b488     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
2b48c                 | 
2b48c     2D 00 64 FD |                 ret
2b490                 | 
2b490                 | '------------------------------------------------------------------------------
2b490                 | ' Translate keyboard scancode to ASCII
2b490                 | '------------------------------------------------------------------------------
2b490                 | ' On entry:
2b490                 | '   hpar1 - scancode
2b490                 | '   hpar2 - key modifiers state
2b490                 | '       c - pressed (0) or released (1) flag
2b490                 | ' On exit:
2b490                 | '   hpar1 - bit     31 = 0 pressed, 1 released
2b490                 | '               30..17 = unused
2b490                 | '                   18 = scroll-lock state 
2b490                 | '                   17 = caps-lock state
2b490                 | '                   16 = num-lock state 
2b490                 | '                15..8 = key modifiers state
2b490                 | '                 7..0 = scancode
2b490                 | '------------------------------------------------------------------------------
2b490                 | hkbd_translate
2b490     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
2b494     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
2b498     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
2b49c     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
2b4a0     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
2b4a4     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
2b4a8                 | 
2b4a8                 |         if EMUPAD_MAX_PLAYER > 0
2b4a8                 | 
2b4a8                 |         if EMUPAD_BT0_BIT >= 0
2b4a8                 |         end
2b4a8                 |         if EMUPAD_BT1_BIT >= 0
2b4a8                 |         end
2b4a8                 |         if EMUPAD_BT2_BIT >= 0
2b4a8                 |         end
2b4a8                 |         if EMUPAD_BT3_BIT >= 0
2b4a8                 |         end
2b4a8                 |         if EMUPAD_BT4_BIT >= 0
2b4a8                 |         end
2b4a8                 |         if EMUPAD_BT5_BIT >= 0
2b4a8                 |         end
2b4a8                 |         if EMUPAD_BT6_BIT >= 0
2b4a8                 |         end
2b4a8                 |         if EMUPAD_BT7_BIT >= 0
2b4a8                 |         end
2b4a8                 |         if EMUPAD_BT8_BIT >= 0
2b4a8                 |         end
2b4a8                 |         if EMUPAD_BT9_BIT >= 0
2b4a8                 |         end
2b4a8                 | 
2b4a8                 |         end
2b4a8     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
2b4ac     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
2b4b0     1F 8C 47 F4 |                 bitc    hpar1, #31
2b4b4                 |         if KEYQUEUE_SIZE > 0
2b4b4     C4 09 B0 FE |                 loc pb,#keyq_head
2b4b8     F7 71 E3 FA |                 rdword htmp,pb
2b4bc     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
2b4c0     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
2b4c4     B8 75 03 F6 |                 mov htmp2,htmp
2b4c8     04 74 07 FA |                 mul htmp2,#4
2b4cc     F7 75 03 F1 |                 add htmp2,pb
2b4d0     02 74 07 F1 |                 add htmp2,#2
2b4d4     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
2b4d8     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
2b4dc     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
2b4e0     F7 71 43 5C |         if_nz   wrbyte htmp,pb
2b4e4                 |         end
2b4e4     2D 00 7C FD |                 ret wcz
2b4e8                 | 
2b4e8                 | if HAVE_MOUSE
2b4e8                 | '------------------------------------------------------------------------------
2b4e8                 | ' Execute an IN interrupt transaction to poll for mouse activity.
2b4e8                 | '------------------------------------------------------------------------------
2b4e8                 | ' On entry:
2b4e8                 | ' On exit:
2b4e8                 | '------------------------------------------------------------------------------
2b4e8                 | hget_mouse_in_report
2b4e8     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2b4ec     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2b4f0     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
2b4f4     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
2b4f8     CF 02 A0 FD |                 call    #do_int_in
2b4fc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b500     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2b504                 | 
2b504     00 90 0F F2 |                 cmp     hpar3, #0               wz
2b508     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2b50c                 | 
2b50c     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
2b510     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2b514     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
2b518     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
2b51c                 | 
2b51c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2b520     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
2b524     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
2b528     01 90 87 31 |         if_ae   sub     hpar3, #1
2b52c                 | 
2b52c     40 09 90 FE |                 loc     pa, #mouse_limits
2b530     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
2b534                 | 
2b534                 |                 ' load xacc,yacc,zacc
2b534     28 04 64 FD |                 setq    #3-1
2b538     80 87 07 FB |                 rdlong  hr1,ptrb
2b53c                 |                 ' load limits and outptr
2b53c     28 04 64 FD |                 setq    #3-1
2b540     F6 73 03 FB |                 rdlong  htmp1,pa
2b544                 | 
2b544     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
2b548     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
2b54c     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
2b550     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
2b554     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
2b558     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
2b55c     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
2b560     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
2b564                 |               
2b564                 | 
2b564     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
2b568     07 70 67 F7 |                 signx   htmp, #7
2b56c     B8 87 03 F1 |                 add     hr1,htmp
2b570     00 72 0F F2 |                 cmp     htmp1,#0 wz
2b574     B9 87 63 53 |         if_ne   fles    hr1,htmp1
2b578     00 86 47 53 |         if_ne   fges    hr1,#0
2b57c                 | 
2b57c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
2b580     07 70 67 F7 |                 signx   htmp, #7
2b584     B8 89 03 F1 |                 add     hr2,htmp
2b588     00 74 0F F2 |                 cmp     htmp2,#0 wz
2b58c     BA 89 63 53 |         if_ne   fles    hr2,htmp2
2b590     00 88 47 53 |         if_ne   fges    hr2,#0
2b594                 |                 
2b594                 | 
2b594     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
2b598     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
2b59c     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
2b5a0     B8 8B 03 A1 |         if_z    add     hr3,htmp
2b5a4                 | 
2b5a4     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
2b5a8     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
2b5ac                 | 
2b5ac                 |                 ' write back accumulators
2b5ac     28 04 64 FD |                 setq    #3-1
2b5b0     80 87 67 FC |                 wrlong  hr1,ptrb
2b5b4                 |                 ' if outptr set, write X/Y words
2b5b4     00 76 0F F2 |                 cmp htmp3,#0                    wz
2b5b8     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
2b5bc     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
2b5c0     2D 00 64 FD |                 ret
2b5c4                 | end
2b5c4                 | 
2b5c4                 | '------------------------------------------------------------------------------
2b5c4                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
2b5c4                 | '------------------------------------------------------------------------------
2b5c4                 | ' On entry:
2b5c4                 | ' On exit:
2b5c4                 | '------------------------------------------------------------------------------
2b5c4                 | if _HAVE_GAMEPAD
2b5c4                 | hget_gp_in_report
2b5c4     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2b5c8     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2b5cc                 | 
2b5cc     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2b5d0     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
2b5d4     00 90 E3 F8 |                 getbyte hpar3
2b5d8     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
2b5dc     CF 02 A0 FD |                 call    #do_int_in
2b5e0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b5e4     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2b5e8                 | 
2b5e8     00 90 0F F2 |                 cmp     hpar3, #0               wz
2b5ec     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2b5f0                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
2b5f0                 | 
2b5f0     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
2b5f4     00 70 E3 F8 |                 getbyte htmp                            ' |
2b5f8     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2b5fc     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
2b600     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
2b604     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
2b608     B8 01 C0 F8 |                 setbyte htmp                            ' |
2b60c                 | 
2b60c                 | ' Note: the following code compares the current and previous reports
2b60c                 | ' and process the data if there are changes to ease the debug output.
2b60c                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
2b60c                 | ' gpPreReport buffer.
2b60c                 | 
2b60c                 |                 ' ----- start of block to remove
2b60c                 |                 {
2b60c                 |                 }
2b60c                 |                 ' ----- end of block to remove
2b60c     F4 04 90 FE |                 loc pa,#hpad_translate
2b610     2A EC 63 FD |                 push pa
2b614                 | 
2b614                 |                 ' FALL THROUGH !!!!
2b614                 | 
2b614                 | '------------------------------------------------------------------------------
2b614                 | ' Decode controller report
2b614                 | '------------------------------------------------------------------------------
2b614                 | hid_decode
2b614                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
2b614     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
2b618     00 04 00 FF 
2b61c     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
2b620                 | 
2b620     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2b624                 | 
2b624     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2b628     00 2A E3 F8 |                 getbyte hidr_type
2b62c     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
2b630     34 02 90 AD |         if_z    jmp     #hpad_xinput
2b634     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
2b638     1C 03 90 AD |         if_z    jmp     #hpad_ps3
2b63c     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
2b640     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
2b644     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
2b648                 |                 
2b648                 | 
2b648                 | '------------------------------------------------------------------------------
2b648                 | ' Handle HID controller (or mouse now
2b648                 | ' On entry:
2b648                 | '   ptrb - controller report
2b648                 | '------------------------------------------------------------------------------
2b648                 | hpad_hid
2b648     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2b64c     F7 F1 03 F6 |                 mov     ptra, pb
2b650     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
2b654     00 EC 03 F6 |                 mov     pa, 0-0
2b658                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
2b658     19 2A 3B FF 
2b65c     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
2b660                 | 
2b660                 | .next
2b660     00 EC 5F F2 |                 cmps    pa, #0      wcz
2b664     2D 00 7C ED |         if_be   ret     wcz
2b668                 | 
2b668     61 8D C7 FA |                 rdbyte  hpar1, ptra++
2b66c     01 EC 87 F1 |                 sub     pa, #1
2b670     00 8E 07 F6 |                 mov     hpar2, #0
2b674                 | 
2b674     C6 71 03 F6 |                 mov     htmp, hpar1
2b678     03 70 07 F5 |                 and     htmp, #$03
2b67c     01 70 0F F2 |                 cmp     htmp, #1    wz
2b680     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
2b684     07 8E 67 A7 |         if_z    signx   hpar2,#7
2b688     01 EC 87 A1 |         if_z    sub     pa, #1
2b68c     02 70 0F F2 |                 cmp     htmp, #2    wz
2b690     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
2b694     0F 8E 67 A7 |         if_z    signx   hpar2,#15
2b698     02 EC 87 A1 |         if_z    sub     pa, #2
2b69c     03 70 0F F2 |                 cmp     htmp, #3    wz
2b6a0     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
2b6a4     04 EC 87 A1 |         if_z    sub     pa, #4
2b6a8                 | 
2b6a8     FC 8C 07 F5 |                 and     hpar1, #$FC
2b6ac                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
2b6ac                 | 
2b6ac     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
2b6b0     0C 01 90 AD |         if_z    jmp     #.report_id
2b6b4     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
2b6b8     24 01 90 AD |         if_z    jmp     #.usage_page
2b6bc     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
2b6c0     2C 01 90 AD |         if_z    jmp     #.usage
2b6c4     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
2b6c8     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
2b6cc     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
2b6d0     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
2b6d4     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
2b6d8     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
2b6dc     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
2b6e0     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
2b6e4     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
2b6e8     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
2b6ec     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
2b6f0     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
2b6f4     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
2b6f8     64 FF 9F 5D |         if_nz   jmp     #.next
2b6fc                 | 
2b6fc     D8 1D A7 FB |                 tjf     hidr_state,#.next
2b700                 | 
2b700     03 8E 07 F5 |                 and     hpar2, #$03
2b704     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
2b708     18 00 90 5D |         if_nz   jmp     #.skip
2b70c                 | 
2b70c     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
2b710     20 00 90 AD |         if_z    jmp     #.axes
2b714     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
2b718     5C 00 90 AD |         if_z    jmp     #.hats
2b71c     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
2b720     70 00 90 AD |         if_z    jmp     #.buttons
2b724                 | .skip
2b724     8F 71 03 F6 |                 mov     htmp, hidr_size
2b728     90 71 03 FA |                 mul     htmp, hidr_count
2b72c     B8 23 03 F1 |                 add     hidr_offset, htmp
2b730     2C FF 9F FD |                 jmp     #.next
2b734                 | .axes
2b734                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
2b734     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
2b738     90 87 03 F6 |                 mov     hr1, hidr_count
2b73c                 | .l1
2b73c     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2b740     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2b744     04 03 B0 FD |                 call    #hpad_getbits
2b748     64 03 B0 FD |                 call    #hpad_normalize
2b74c     06 84 1F F2 |                 cmp     hr0, #6         wcz
2b750     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
2b754     00 88 43 C8 |         if_b    getnib  hr2
2b758     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
2b75c     5F 01 20 C9 |         if_b    setword retval
2b760     01 84 07 C1 |         if_b    add     hr0, #1
2b764     8F 23 03 F1 |                 add     hidr_offset, hidr_size
2b768     F4 87 6F FB |                 djnz    hr1, #.l1
2b76c                 | 
2b76c     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
2b770     01 1C 07 F6 |                 mov     hidr_state, #1
2b774     E8 FE 9F FD |                 jmp     #.next
2b778                 | .hats
2b778                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
2b778     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2b77c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2b780     C8 02 B0 FD |                 call    #hpad_getbits
2b784     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
2b788     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2b78c     01 1C 07 F6 |                 mov     hidr_state, #1
2b790     90 FF 9F FD |                 jmp     #.skip
2b794                 | .buttons
2b794                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
2b794     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2b798     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2b79c     90 8F 03 FA |                 mul     hpar2, hidr_count
2b7a0     A8 02 B0 FD |                 call    #hpad_getbits
2b7a4     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
2b7a8     B8 BF 62 F0 |                 shl     retval, htmp
2b7ac     5F 17 43 F5 |                 or      hidr_buttons, retval
2b7b0     90 71 03 F1 |                 add     htmp, hidr_count
2b7b4     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
2b7b8     01 1C 07 F6 |                 mov     hidr_state, #1
2b7bc     64 FF 9F FD |                 jmp     #.skip
2b7c0                 | .report_id
2b7c0     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
2b7c4     2D 00 7C 5D |         if_nz   ret     wcz
2b7c8     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
2b7cc     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
2b7d0     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
2b7d4     01 1C 67 56 |         if_nz   neg     hidr_state,#1
2b7d8     01 F2 87 51 |         if_nz   sub     ptrb,#1
2b7dc     80 FE 9F FD |                 jmp     #.next
2b7e0                 | .usage_page
2b7e0     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
2b7e4     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
2b7e8     04 1C 07 A6 |         if_z    mov     hidr_state, #4
2b7ec     70 FE 9F FD |                 jmp     #.next
2b7f0                 | .usage
2b7f0     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
2b7f4     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
2b7f8     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
2b7fc     01 1C 07 A6 |         if_z    mov     hidr_state, #1
2b800     5C FE 9F AD |         if_z    jmp     #.next
2b804     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
2b808     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
2b80c     01 1C 07 A6 |         if_z    mov     hidr_state, #1
2b810     4C FE 9F AD |         if_z    jmp     #.next
2b814     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
2b818     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
2b81c     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
2b820     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
2b824     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
2b828     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
2b82c     10 00 90 AD |         if_z    jmp     #.usage_axis
2b830     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
2b834     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
2b838     03 1C 07 A6 |         if_z    mov     hidr_state, #3
2b83c     20 FE 9F FD |                 jmp     #.next
2b840                 | .usage_axis
2b840     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
2b844     18 FE 9F CD |         if_b    jmp     #.next
2b848     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
2b84c     C7 01 00 F8 |                 setnib  hpar2
2b850                 | 
2b850     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
2b854     C7 8F C3 F9 |                 decod   hpar2
2b858     C7 0F 43 F5 |                 or      hidr_flags, hpar2
2b85c                 | 
2b85c     01 24 07 F1 |                 add     hidr_usage_idx, #1
2b860     02 1C 07 F6 |                 mov     hidr_state, #2
2b864     F8 FD 9F FD |                 jmp     #.next
2b868                 | 
2b868                 | '------------------------------------------------------------------------------
2b868                 | ' Handle XInput controller
2b868                 | ' On entry:
2b868                 | '   ptrb - controller report
2b868                 | '------------------------------------------------------------------------------
2b868                 | '   Default implementation translates the report to a pseudo-defacto hid
2b868                 | '   standard and jumps to hpad_translate for actions.
2b868                 | '   Implementors may take specific actions for this kind of controller.
2b868                 | '------------------------------------------------------------------------------
2b868                 | hpad_xinput
2b868     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
2b86c     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
2b870     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
2b874     14 70 0F F2 |                 cmp     htmp, #$14      wz
2b878     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
2b87c                 | 
2b87c                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
2b87c                 | 
2b87c     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
2b880     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
2b884                 | 
2b884     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
2b888     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
2b88c     5F BF 22 F6 |                 not     retval
2b890     5F 11 2B F9 |                 setword hidr_axis, retval, #1
2b894     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
2b898     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
2b89c     5F BF 22 F6 |                 not     retval
2b8a0     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
2b8a4                 | 
2b8a4     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
2b8a8     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
2b8ac     C0 BE 1E F2 |                 cmp     retval, #192    wcz
2b8b0     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
2b8b4     F8 01 B0 FD |                 call    #hpad_normalize
2b8b8     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
2b8bc     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
2b8c0     C0 BE 1E F2 |                 cmp     retval, #192    wcz
2b8c4     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
2b8c8     E4 01 B0 FD |                 call    #hpad_normalize
2b8cc     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
2b8d0                 | 
2b8d0     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
2b8d4     81 BF E6 FA |                 rdword  retval, ptrb[1]
2b8d8     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
2b8dc     00 16 47 F4 |                 bitc    hidr_buttons, #0
2b8e0     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
2b8e4     01 16 47 F4 |                 bitc    hidr_buttons, #1
2b8e8     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
2b8ec     02 16 47 F4 |                 bitc    hidr_buttons, #2
2b8f0     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
2b8f4     03 16 47 F4 |                 bitc    hidr_buttons, #3
2b8f8     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
2b8fc     04 16 47 F4 |                 bitc    hidr_buttons, #4
2b900     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
2b904     05 16 47 F4 |                 bitc    hidr_buttons, #5
2b908     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
2b90c     08 16 47 F4 |                 bitc    hidr_buttons, #8
2b910     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
2b914     09 16 47 F4 |                 bitc    hidr_buttons, #9
2b918     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
2b91c     0A 16 47 F4 |                 bitc    hidr_buttons, #10
2b920     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
2b924     0B 16 47 F4 |                 bitc    hidr_buttons, #11
2b928     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
2b92c     0C 16 47 F4 |                 bitc    hidr_buttons, #12
2b930                 | 
2b930     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2b934     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
2b938     7A BB 7A FF 
2b93c     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
2b940     F9 FF 7F FF 
2b944     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
2b948     B9 71 5F F9 |                 altgn   htmp, #htmp1
2b94c     00 70 43 F8 |                 getnib  htmp
2b950     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
2b954                 | 
2b954     AC 01 90 FD |                 jmp     #hpad_translate
2b958                 | 
2b958                 | '------------------------------------------------------------------------------
2b958                 | ' Handle PS3 controller
2b958                 | ' On entry:
2b958                 | '   ptrb - controller report
2b958                 | '------------------------------------------------------------------------------
2b958                 | '   Default implementation translates the report to a pseudo-defacto hid
2b958                 | '   standard and jumps to hpad_translate for actions.
2b958                 | '   Implementors may take specific actions for this kind of controller.
2b958                 | '------------------------------------------------------------------------------
2b958                 | hpad_ps3
2b958     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
2b95c     01 70 0F F2 |                 cmp     htmp, #$01      wz
2b960     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
2b964                 | 
2b964                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
2b964                 | 
2b964     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
2b968     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
2b96c     40 01 B0 FD |                 call    #hpad_normalize
2b970     5F 11 23 F9 |                 setword hidr_axis, retval, #0
2b974     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
2b978     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
2b97c     30 01 B0 FD |                 call    #hpad_normalize
2b980     5F 11 2B F9 |                 setword hidr_axis, retval, #1
2b984     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
2b988     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
2b98c     20 01 B0 FD |                 call    #hpad_normalize
2b990     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
2b994     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
2b998     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
2b99c     10 01 B0 FD |                 call    #hpad_normalize
2b9a0     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
2b9a4     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
2b9a8     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
2b9ac                 | 
2b9ac     08 8C 07 F6 |                 mov     hpar1, #8
2b9b0     13 8E 07 F6 |                 mov     hpar2, #19
2b9b4     94 00 B0 FD |                 call    #hpad_getbits
2b9b8                 | 
2b9b8     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
2b9bc     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
2b9c0     00 16 47 F4 |                 bitc    hidr_buttons, #0
2b9c4     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
2b9c8     01 16 47 F4 |                 bitc    hidr_buttons, #1
2b9cc     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
2b9d0     02 16 47 F4 |                 bitc    hidr_buttons, #2
2b9d4     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
2b9d8     03 16 47 F4 |                 bitc    hidr_buttons, #3
2b9dc     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
2b9e0     04 16 47 F4 |                 bitc    hidr_buttons, #4
2b9e4     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
2b9e8     05 16 47 F4 |                 bitc    hidr_buttons, #5
2b9ec     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
2b9f0     06 16 47 F4 |                 bitc    hidr_buttons, #6
2b9f4     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
2b9f8     07 16 47 F4 |                 bitc    hidr_buttons, #7
2b9fc     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
2ba00     08 16 47 F4 |                 bitc    hidr_buttons, #8
2ba04     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
2ba08     09 16 47 F4 |                 bitc    hidr_buttons, #9
2ba0c     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
2ba10     0A 16 47 F4 |                 bitc    hidr_buttons, #10
2ba14     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
2ba18     0B 16 47 F4 |                 bitc    hidr_buttons, #11
2ba1c     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
2ba20     0C 16 47 F4 |                 bitc    hidr_buttons, #12
2ba24                 | 
2ba24     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2ba28     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
2ba2c     09 FA 79 FF 
2ba30     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
2ba34     FF FA 7F FF 
2ba38     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
2ba3c     B9 71 5F F9 |                 altgn   htmp, #htmp1
2ba40     00 70 43 F8 |                 getnib  htmp
2ba44     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
2ba48                 | 
2ba48     B8 00 90 FD |                 jmp     #hpad_translate
2ba4c                 | 
2ba4c                 | '------------------------------------------------------------------------------
2ba4c                 | ' Read bits from report data buffer
2ba4c                 | '------------------------------------------------------------------------------
2ba4c                 | ' On entry:
2ba4c                 | '   PTRB - report buffer
2ba4c                 | '   hpar1 - start bit
2ba4c                 | '   hpar2 - number of bits
2ba4c                 | ' On exit:
2ba4c                 | '   retval - bits
2ba4c                 | '------------------------------------------------------------------------------
2ba4c                 | hpad_getbits
2ba4c     C6 71 03 F6 |                 mov     htmp, hpar1
2ba50     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
2ba54     F9 71 03 F1 |                 add     htmp, ptrb
2ba58     B8 BF 02 FB |                 rdlong  retval, htmp
2ba5c                 | 
2ba5c     C6 73 03 F6 |                 mov     htmp1, hpar1
2ba60     07 72 07 F5 |                 and     htmp1, #$07     ' shift
2ba64     B9 BF 42 F0 |                 shr     retval, htmp1
2ba68                 | 
2ba68     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
2ba6c     10 00 90 1D |         if_a    jmp     #.l1
2ba70                 | 
2ba70     C7 8F C3 F9 |                 decod   hpar2
2ba74     01 8E 87 F1 |                 sub     hpar2, #1
2ba78     C7 BF 02 F5 |                 and     retval, hpar2
2ba7c     2D 00 64 FD |                 ret
2ba80                 | .l1
2ba80     FF 7F 00 FF 
2ba84     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
2ba88     03 70 07 F1 |                 add     htmp, #3
2ba8c     B8 75 03 FB |                 rdlong  htmp2, htmp
2ba90     18 8E 87 F1 |                 sub     hpar2, #24
2ba94     C7 8F C3 F9 |                 decod   hpar2
2ba98     01 8E 87 F1 |                 sub     hpar2, #1
2ba9c     B9 75 43 F0 |                 shr     htmp2, htmp1
2baa0     C7 75 03 F5 |                 and     htmp2, hpar2
2baa4     18 74 67 F0 |                 shl     htmp2, #24
2baa8     BA BF 42 F5 |                 or      retval, htmp2
2baac     2D 00 64 FD |                 ret
2bab0                 | 
2bab0                 | '------------------------------------------------------------------------------
2bab0                 | ' Normalize value to signed word (-32768 / 32767)
2bab0                 | '------------------------------------------------------------------------------
2bab0                 | ' On entry:
2bab0                 | '   retval - value to normalize
2bab0                 | '   hidr_lminmax - min (word 1) max (word 0) value range
2bab0                 | '   - or -
2bab0                 | '   hidr_pminmax - min (word 1) max (word 0) value range
2bab0                 | '   hidr_size - value bits length
2bab0                 | ' On exit:
2bab0                 | '   retval - normalized value
2bab0                 | '------------------------------------------------------------------------------
2bab0                 | hpad_normalize
2bab0     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
2bab4     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
2bab8     2D 00 64 AD |         if_z    ret
2babc     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
2bac0     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
2bac4     0F 72 77 F7 |                 signx   htmp1, #15      wc
2bac8     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
2bacc     00 BE 66 C7 |         if_c    signx   retval, #0-0
2bad0     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
2bad4     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
2bad8     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
2badc     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
2bae0     B8 71 53 F6 |                 abs     htmp            wc
2bae4     1F BE 0E F4 |                 testb   retval, #31     wz
2bae8     5F BF 42 F6 |                 abs     retval
2baec     B8 BF 12 FD |                 qdiv    retval, htmp
2baf0     18 BE 62 FD |                 getqx   retval
2baf4     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
2baf8     C0 FF 7F FF 
2bafc     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
2bb00     2D 00 64 FD |                 ret
2bb04                 | 
2bb04                 | '------------------------------------------------------------------------------
2bb04                 | ' Perform controller actions
2bb04                 | ' On entry:
2bb04                 | '    hidr_id        report id
2bb04                 | '    hidr_axis      axis value (signed word, 2 axes per long)
2bb04                 | '                      X = hidr_axis+0, #0
2bb04                 | '                      Y = hidr_axis+0, #1
2bb04                 | '                      Z = hidr_axis+1, #0
2bb04                 | '                     RX = hidr_axis+1, #1
2bb04                 | '                     RY = hidr_axis+2, #0
2bb04                 | '                     RZ = hidr_axis+2, #1
2bb04                 | '    hidr_buttons   buttons state (bits 0 to 31)
2bb04                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
2bb04                 | '
2bb04                 | '                     -------3 -------2 -------1 -------0 byte
2bb04                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
2bb04                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
2bb04                 | '                                zyx||| |||||||| ++++++++ n. buttons
2bb04                 | '                                |||||| ||||++++--------- n. axes
2bb04                 | '                                |||||| ++++------------- n. hats
2bb04                 | '                                ++++++------------------ valid axes
2bb04                 | '------------------------------------------------------------------------------
2bb04                 | hpad_translate
2bb04                 | 
2bb04                 | 
2bb04                 |         if HAVE_HIDPAD
2bb04     84 0C F0 FE |                 loc     ptrb,#hidpad_report
2bb08     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
2bb0c     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
2bb10     01 70 E7 F2 |                 cmpsub  htmp,#1
2bb14     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
2bb18     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
2bb1c     2D 00 7C 3D |         if_ae   ret     wcz
2bb20     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
2bb24     B8 F3 03 F1 |                 add     ptrb,htmp
2bb28     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
2bb2c     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
2bb30     28 0C 64 FD |                 setq    #7-1
2bb34     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
2bb38                 |         end
2bb38                 | 
2bb38                 | 
2bb38                 |         if EMUPAD_MAX_PLAYER > 0
2bb38                 | .emupad_no_hat
2bb38                 |         if EMUPAD_BT0_BIT >= 0
2bb38                 |         end
2bb38                 |         if EMUPAD_BT1_BIT >= 0
2bb38                 |         end
2bb38                 |         if EMUPAD_BT2_BIT >= 0
2bb38                 |         end
2bb38                 |         if EMUPAD_BT3_BIT >= 0
2bb38                 |         end
2bb38                 |         if EMUPAD_BT4_BIT >= 0
2bb38                 |         end
2bb38                 |         if EMUPAD_BT5_BIT >= 0
2bb38                 |         end
2bb38                 |         if EMUPAD_BT6_BIT >= 0
2bb38                 |         end
2bb38                 |         if EMUPAD_BT7_BIT >= 0
2bb38                 |         end
2bb38                 |         if EMUPAD_BT8_BIT >= 0
2bb38                 |         end
2bb38                 |         if EMUPAD_BT9_BIT >= 0
2bb38                 |         end
2bb38                 | .emupad_slot_over
2bb38                 |         end
2bb38                 | 
2bb38                 |         if 0
2bb38                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
2bb38                 | 
2bb38                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
2bb38                 | 
2bb38                 |         end
2bb38     2D 00 64 FD |                 ret
2bb3c                 | end
2bb3c                 | 
2bb3c                 | if EMUPAD_MAX_PLAYER > 0
2bb3c                 | '------------------------------------------------------------------------------
2bb3c                 | ' Clear EmuPad state
2bb3c                 | '------------------------------------------------------------------------------
2bb3c                 | emupad_reset
2bb3c                 | 
2bb3c                 | '------------------------------------------------------------------------------
2bb3c                 | ' Get EmuPad Player number for current device (into retval)
2bb3c                 | ' Z flag is also set if current device is valid
2bb3c                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
2bb3c                 | '------------------------------------------------------------------------------
2bb3c                 | emupad_getnum
2bb3c                 | .loop
2bb3c                 | '------------------------------------------------------------------------------
2bb3c                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
2bb3c                 | '------------------------------------------------------------------------------
2bb3c                 | emupad_discon
2bb3c                 | .loop         
2bb3c                 |         
2bb3c                 |         ' FALL THROUGH!!!
2bb3c                 | 
2bb3c                 | '------------------------------------------------------------------------------
2bb3c                 | ' Update EmuPad reports (all of them...)
2bb3c                 | '------------------------------------------------------------------------------
2bb3c                 | emupad_write_reports
2bb3c                 | .devloop
2bb3c                 | 
2bb3c                 | end
2bb3c                 | 
2bb3c                 | 
2bb3c                 | '------------------------------------------------------------------------------
2bb3c                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
2bb3c                 | '------------------------------------------------------------------------------
2bb3c                 | ' On entry:
2bb3c                 | ' On exit:
2bb3c                 | '------------------------------------------------------------------------------
2bb3c                 | hget_hub_status
2bb3c     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
2bb40     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2bb44     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
2bb48     01 90 2F F9 |                 setword hpar3, #1, #1
2bb4c     CF 02 A0 FD |                 call    #do_int_in
2bb50     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2bb54     0C 00 90 AD |         if_z    jmp     #.data
2bb58     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2bb5c     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
2bb60     2D 00 64 FD |                 ret
2bb64                 | .data
2bb64     00 90 0F F2 |                 cmp     hpar3, #0               wz
2bb68     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2bb6c                 | 
2bb6c     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
2bb70     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
2bb74     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
2bb78     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
2bb7c                 |                 debug(ubin_long(hub_status_chg))
2bb7c                 | 
2bb7c     01 5A 06 F6 |                 mov     hdev_port, #1
2bb80                 | .loop
2bb80     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
2bb84     0C 00 B0 AD |         if_x1   call    #hub_port_handler
2bb88     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
2bb8c     F0 FF 9F 3D |         if_nc   jmp     #.loop
2bb90     2D 00 64 FD |                 ret
2bb94                 | 
2bb94                 | hub_port_handler
2bb94     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
2bb98     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2bb9c     27 EF 03 F6 |                 mov     pb, urx_buff_p
2bba0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2bba4     55 02 A0 FD |                 call    #control_read
2bba8     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
2bbac                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
2bbac                 | 
2bbac     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
2bbb0     50 01 90 5D |         if_x0   jmp     #.other
2bbb4     68 02 D0 FE |                 loc     ptra, #clr_port_feat
2bbb8     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
2bbbc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2bbc0     A0 02 A0 FD |                 call    #control_write
2bbc4     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
2bbc8     7C 01 90 5D |         if_x0   jmp     #.disconnect
2bbcc     B0 99 02 F6 |                 mov     hctwait, _100ms_
2bbd0     EF 02 A0 FD |                 call    #poll_waitx
2bbd4                 | 
2bbd4     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
2bbd8     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
2bbdc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2bbe0     A0 02 A0 FD |                 call    #control_write
2bbe4                 | 
2bbe4     02 76 07 F6 |                 mov     htmp3, #2
2bbe8                 | .wait_reset
2bbe8     AC 99 02 F6 |                 mov     hctwait, _8ms_
2bbec     EF 02 A0 FD |                 call    #poll_waitx
2bbf0     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2bbf4     27 EF 03 F6 |                 mov     pb, urx_buff_p
2bbf8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2bbfc     55 02 A0 FD |                 call    #control_read
2bc00     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
2bc04     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
2bc08     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
2bc0c                 | 
2bc0c     10 02 D0 FE |                 loc     ptra, #clr_port_feat
2bc10     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
2bc14     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2bc18     A0 02 A0 FD |                 call    #control_write
2bc1c                 | 
2bc1c     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
2bc20                 | .wait_recover
2bc20     A7 99 02 F6 |                 mov     hctwait, _1ms_
2bc24     EF 02 A0 FD |                 call    #poll_waitx
2bc28     FD 71 6F FB |                 djnz    htmp,#.wait_recover
2bc2c                 | 
2bc2c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2bc30     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2bc34     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2bc38                 | 
2bc38     00 08 00 FF 
2bc3c     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
2bc40     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
2bc44     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
2bc48     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
2bc4c     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
2bc50     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2bc54     48 01 90 5D |         if_nz   jmp     #.done
2bc58                 | .get_dev_desc
2bc58     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
2bc5c     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
2bc60     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
2bc64     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
2bc68     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
2bc6c     01 71 57 FC |                 wrword  htmp, ptra[wValue]
2bc70     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
2bc74     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2bc78     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
2bc7c     AC 99 02 F6 |                 mov     hctwait, _8ms_
2bc80     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
2bc84     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
2bc88     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
2bc8c     BE 00 A0 FD |                 call    #calc_crc5
2bc90     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
2bc94     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
2bc98     F7 AD C2 FA |                 rdbyte  total_data, pb
2bc9c     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
2bca0     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
2bca4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2bca8     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
2bcac     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
2bcb0     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
2bcb4                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
2bcb4     9F 99 02 F6 |                 mov     hctwait, _500us_
2bcb8     EF 02 A0 FD |                 call    #poll_waitx
2bcbc     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
2bcc0     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
2bcc4     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
2bcc8     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
2bccc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2bcd0     CC 00 90 5D |         if_nz   jmp     #.done
2bcd4     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
2bcd8     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
2bcdc     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
2bce0     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
2bce4     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
2bce8     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
2bcec     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
2bcf0     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
2bcf4     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
2bcf8     A4 00 90 CD |         if_b    jmp     #.done
2bcfc     6C F0 BF FD |                 call    #hparse_con_desc
2bd00     9C 00 90 FD |                 jmp     #.done
2bd04                 | 
2bd04                 | .other
2bd04     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
2bd08     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
2bd0c     28 00 90 AD |         if_x1   jmp     #.reset_feature
2bd10     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
2bd14     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
2bd18     1C 00 90 AD |         if_x1   jmp     #.reset_feature
2bd1c     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
2bd20     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
2bd24     10 00 90 AD |         if_x1   jmp     #.reset_feature
2bd28     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
2bd2c     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
2bd30     04 00 90 AD |         if_x1   jmp     #.reset_feature
2bd34     68 00 90 FD |                 jmp     #.done
2bd38                 | .reset_feature
2bd38     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
2bd3c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2bd40     A0 02 A0 FD |                 call    #control_write
2bd44     58 00 90 FD |                 jmp     #.done
2bd48                 | .disconnect
2bd48                 | 
2bd48     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2bd4c     00 70 E3 F8 |                 getbyte htmp
2bd50     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
2bd54     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
2bd58     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
2bd5c     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
2bd60     00 76 06 A6 |         if_z    mov     kb_led_states, #0
2bd64     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
2bd68                 |         if EMUPAD_MAX_PLAYER > 0
2bd68                 |         end
2bd68                 |         if HAVE_MOUSE
2bd68     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
2bd6c     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
2bd70     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
2bd74                 |         end
2bd74                 |         if HAVE_HIDPAD
2bd74     14 0A F0 FE |                 loc ptrb,#hidpad_report
2bd78     2D 71 03 F6 |                 mov htmp,hdev_port
2bd7c     01 70 E7 F2 |                 cmpsub htmp,#1
2bd80     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
2bd84     B8 F3 03 F1 |                 add ptrb,htmp
2bd88     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
2bd8c     80 01 6C FC |                 wrlong #0,ptrb
2bd90                 |         end
2bd90                 | 
2bd90     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
2bd94     00 00 C4 F8 |                 setbyte #0
2bd98     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2bd9c     00 00 04 F6 |                 mov     0-0, #0
2bda0                 | 
2bda0                 | .done
2bda0     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
2bda4     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
2bda8     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2bdac     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
2bdb0     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
2bdb4     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
2bdb8                 | 
2bdb8     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2bdbc     27 EF 03 F6 |                 mov     pb, urx_buff_p
2bdc0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2bdc4     55 02 A0 FD |                 call    #control_read
2bdc8     00 69 06 FB |                 rdlong  hub_port_status, ptra
2bdcc                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
2bdcc     2D 00 64 FD |                 ret
2bdd0                 | 
2bdd0                 | '------------------------------------------------------------------------------
2bdd0                 | ' Partially populated SETUP packets
2bdd0                 | '------------------------------------------------------------------------------
2bdd0     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
2bdd1     06          |                 byte    REQ_GET_DESC
2bdd2     00 01       |                 word    TYPE_DEVICE << 8
2bdd4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2bdd6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2bdd8     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
2bdd9     06          |                 byte    REQ_GET_DESC
2bdda     00 02       |                 word    TYPE_CONFIG << 8
2bddc     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2bdde     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2bde0     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
2bde1     09          |                 byte    REQ_SET_CONFIG
2bde2     00 00       |                 word    0       ' Configuration value
2bde4     00 00       |                 word    0       ' Zero
2bde6     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
2bde8     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
2bde9     05          |                 byte    REQ_SET_ADDR
2bdea     00 00       |                 word    0       ' Zero
2bdec     00 00       |                 word    0       ' Zero
2bdee     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
2bdf0                 | '------------------------------------------------------------------------------
2bdf0                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
2bdf0                 | ' wValue field dictates which protocol should be used.
2bdf0                 | '
2bdf0                 | ' When initialized, all devices default to report protocol. However the host
2bdf0                 | ' should not make any assumptions about the device state and should set the
2bdf0                 | ' desired protocol whenever initializing a device.
2bdf0                 | '------------------------------------------------------------------------------
2bdf0     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2bdf1     0B          |                 byte    HID_SET_PROTO
2bdf2     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
2bdf4                 |                                                 ' (HID 1.11 Section 7.2.6).
2bdf4     00 00       |                 word    0               ' Interface index number.
2bdf6     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
2bdf8                 | '------------------------------------------------------------------------------
2bdf8     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2bdf9     0A          |                 byte    HID_SET_IDLE
2bdfa     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
2bdfc                 |                                         ' reporting until a change is detected in the report data
2bdfc                 | 
2bdfc                 |                                         ' (HID 1.11 Section 7.2.4).
2bdfc     00 00       |                 word    0       ' Interface index number.
2bdfe     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
2be00     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2be01     09          |                 byte    HID_SET_REPORT
2be02     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
2be04                 |                                         ' (HID 1.11 Section 7.2.2).
2be04     00 00       |                 word    0       ' Interface index number.
2be06     00 00       |                 word    0       ' Size of the report, in bytes.
2be08     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
2be09     06          |                 byte    REQ_GET_DESC
2be0a     00 22       |                 word    TYPE_REPORT << 8
2be0c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2be0e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2be10                 | '------------------------------------------------------------------------------
2be10     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
2be11     06          |                 byte    REQ_GET_DESC
2be12     00 29       |                 word    TYPE_HUB << 8
2be14     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2be16     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2be18     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
2be19     03          |                 byte    REQ_SET_FEATURE
2be1a     00 00       |                 word    0       ' port power
2be1c     01 00       |                 word    1       ' Port index number (1+)
2be1e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2be20     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
2be21     01          |                 byte    REQ_CLEAR_FEATURE
2be22     00 00       |                 word    0       ' port power
2be24     01 00       |                 word    1       ' Port index number (1+)
2be26     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2be28     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
2be29     00          |                 byte    REQ_GET_STATUS
2be2a     00 00       |                 word    0
2be2c     01 00       |                 word    1       ' Port index number (1+)
2be2e     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
2be30                 | '------------------------------------------------------------------------------
2be30                 | if _HAVE_GAMEPAD
2be30     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
2be34                 | ps3_command_buff
2be34     00 00 00 00 
2be38     00          |                 byte    $00, $00, $00, $00, $00
2be39     00 00 00 00 
2be3d     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
2be3e     FF 27 10 00 
2be42     32          |                 byte    $FF, $27, $10, $00, $32
2be43     FF 27 10 00 
2be47     32          |                 byte    $FF, $27, $10, $00, $32
2be48     FF 27 10 00 
2be4c     32          |                 byte    $FF, $27, $10, $00, $32
2be4d     FF 27 10 00 
2be51     32          |                 byte    $FF, $27, $10, $00, $32
2be52     00 00 00 00 
2be56     00          |                 byte    $00, $00, $00, $00, $00
2be57     00 00 00 00 
2be5b     00          |                 byte    $00, $00, $00, $00, $00
2be5c     00 00 00 00 
2be60     00          |                 byte    $00, $00, $00, $00, $00
2be61     00 00 00    |                 byte    $00, $00, $00
2be64                 | '------------------------------------------------------------------------------
2be64     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
2be67                 |                                         ' 0x01 All blinking
2be67                 |                                         ' 0x02 1 flashes, then on
2be67                 |                                         ' 0x03 2 flashes, then on
2be67                 |                                         ' 0x04 3 flashes, then on
2be67                 |                                         ' 0x05 4 flashes, then on
2be67                 |                                         ' 0x06 1 on
2be67                 |                                         ' 0x07 2 on
2be67                 |                                         ' 0x08 3 on
2be67                 |                                         ' 0x09 4 on
2be67                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
2be67                 |                                         ' 0x0B Blinking*
2be67                 |                                         ' 0x0C Slow blinking*
2be67                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
2be67     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
2be6a     00          |                 byte    $00             ' Left rumble
2be6b     00          |                 byte    $00             ' Right rumble
2be6c     00 00 00    |                 byte    $00, $00, $00
2be6f     00          | end
2be70                 | alignl
2be70                 | 
2be70                 | if HAVE_MOUSE
2be70     00 00 00 00 
2be74     00 00 00 00 | mouse_limits long 0[2]
2be78     00 00 00 00 | mouse_outptr long 0
2be7c                 | end
2be7c                 | 
2be7c                 | if KEYQUEUE_SIZE > 0
2be7c     00          | keyq_head byte 0
2be7d     00          | keyq_tail byte 0
2be7e     00 00 00 00 
      ...             
2c07a     00 00 00 00 
2c07e     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
2c080                 | alignl
2c080                 | end
2c080                 | 
2c080                 | if EMUPAD_MAX_PLAYER > 0
2c080                 | emupad_rule_buffer
2c080                 | if EMUPAD_BUILTIN_RULES
2c080                 | file "padmap_builtin.dat"
2c080                 | end
2c080                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
2c080                 | '' Default rule directly follows!
2c080                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
2c080                 | end
2c080                 | 
2c080                 | '------------------------------------------------------------------------------
2c080                 | ' The USB data cache area gets zero-filled at every device disconnect
2c080                 | '------------------------------------------------------------------------------
2c080                 | usb_cache_start
2c080                 | 
2c080                 | ' HID descriptor and report buffers
2c080                 | if !!OVERLAP_MEMORY
2c080     00 00 00 00 
      ...             
2c778     00 00 00 00 
2c77c     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
2c780                 | end
2c780     00 00 00 00 
2c784     00 00 00 00 | hkbd_report     byte    0[8]
2c788     00 00 00 00 | hkbd_led_rep    byte    0
2c78c                 | alignl
2c78c                 | 
2c78c                 | if HAVE_HIDPAD
2c78c     00 00 00 00 
      ...             
2c848     00 00 00 00 
2c84c     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
2c850                 | end
2c850                 | 
2c850                 | ' HUB descriptor
2c850     00          | hub_descr       byte    0   ' bDescLength
2c851     00          |                 byte    0   ' bDescriptorType
2c852     00          |                 byte    0   ' bNbrPorts
2c853     00 00       |                 word    0   ' wHubCharacteristics
2c855     00          |                 byte    0   ' bPwrOn2PwrGood
2c856     00          |                 byte    0   ' bHubContrCurrent
2c857     00          |                 byte    0   ' DeviceRemoveable
2c858     00          |                 byte    0   ' PortPwrCtrlMask
2c859                 | 
2c859                 | usb_cache_end
2c859                 | 
2c859                 | if HAVE_MOUSE
2c859     00 00 00 00 | mouse_xacc      long 0
2c85d     00 00 00 00 | mouse_yacc      long 0
2c861     00 00 00 00 | mouse_zacc      long 0
2c865     00          | mouse_bstate    byte 0
2c866     00          | mouse_lpending  byte 0
2c867     00          | mouse_rpending  byte 0
2c868     00          | mouse_mpending  byte 0
2c869     00          | mouse_lock      byte 0
2c86a     00 00 00    |                 byte 0[3] ' padding
2c86d                 | end
2c86d                 | 
2c86d     00 00 00 00 
      ...             
2c8e5     00 00 00 00 
2c8e9     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
2c8ed     00 00 00 00 
2c8f1     00 00 00 00 
2c8f5     00 00 00 00 
2c8f9     00 00 00 00 
2c8fd     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
2c8ff     00 00 00 00 
      ...             
2c9f7     00 00 00 00 
2c9fb     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
2c9ff                 | 
2c9ff     00          | driver_cog      byte    0                       ' Current driver cog + 1
2ca00                 | 	alignl
2ca00                 | _Audio093b_8_sc_spin2_dat_
2ca00                 | 
2ca00                 | audio       org     0
2ca00                 | 
2ca00     61 85 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
2ca04     61 C3 05 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
2ca08     61 CF 05 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
2ca0c                 | 
2ca0c     01 EC 63 FD |             cogid   pa                   ' compute cogid
2ca10     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
2ca14     F6 85 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
2ca18     C2 82 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
2ca1c                 | 
2ca1c     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
2ca20     0E CA 05 FC |             wrpin   dac,#left            ' Noise dither DACs at clk/100
2ca24     0E BE 1C FC |             wxpin   #95,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
2ca28     0F CA 05 FC |             wrpin   dac,#right
2ca2c     0F BE 1C FC |             wxpin   #95,#right    
2ca30     41 9C 64 FD |             dirh    #left addpins 1
2ca34     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
2ca38     A9 E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
2ca3c     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
2ca40                 |             
2ca40                 | '---------------------------------------------------------------------------------        
2ca40                 | '----------------- The main loop -------------------------------------------------
2ca40                 | '---------------------------------------------------------------------------------
2ca40                 | 
2ca40     B2 66 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
2ca44     10 00 90 CD |       if_c  jmp     #loop1
2ca48                 |   
2ca48     09 A8 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
2ca4c     B2 A8 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
2ca50     B1 00 80 F1 |             sub     0-0,a40000000
2ca54     FD A9 6D FB |             djnz    cn,#p402
2ca58                 |     
2ca58     00 A8 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
2ca5c     B4 AA 01 F6 |             mov     ct,time1            ' with the lowest next sample time
2ca60     B5 AA 39 F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
2ca64     01 A8 05 C6 |     if_c    mov     cn,#1
2ca68     B6 AA 39 F3 |             fle     ct,time3 wcz
2ca6c     02 A8 05 C6 |     if_c    mov     cn,#2     
2ca70     B7 AA 39 F3 |             fle     ct,time4 wcz
2ca74     03 A8 05 C6 |     if_c    mov     cn,#3
2ca78     B8 AA 39 F3 |             fle     ct,time5 wcz
2ca7c     04 A8 05 C6 |     if_c    mov     cn,#4
2ca80     B9 AA 39 F3 |             fle     ct,time6 wcz
2ca84     05 A8 05 C6 |     if_c    mov     cn,#5
2ca88     BA AA 39 F3 |             fle     ct,time7 wcz
2ca8c     06 A8 05 C6 |     if_c    mov     cn,#6
2ca90     BB AA 39 F3 |             fle     ct,time8 wcz
2ca94     07 A8 05 C6 |     if_c    mov     cn,#7
2ca98                 | 
2ca98                 | 
2ca98                 | '----------------------------------------------------------------------------------
2ca98                 | '------------- Compute channel samples --------------------------------------------
2ca98                 | '----------------------------------------------------------------------------------
2ca98                 | 
2ca98                 | 
2ca98     D4 78 01 F6 | p401        mov     channeladd,cn             ' compute the pointer to channel parameters block
2ca9c     05 78 65 F0 |             shl     channeladd,#5
2caa0     BC F0 03 F1 |             add     ptra,channeladd
2caa4                 | 
2caa4     28 0E 64 FD |             setq    #7                        ' read parameters
2caa8     00 8F 05 FB |             rdlong  pointer0,ptra
2caac                 | '            testb   command0,#29 wz
2caac                 | '    if_nz   jmp     #p408
2caac                 | '    	    getword envptr,command0,#0
2caac                 | '    	    getbyte envspeed,command0,#2
2caac                 | '    	    jmp     #p404                     'if envelope then no sample rate
2caac                 |     	    
2caac     1F 9C 0D F4 | p408        testb   command0,#31 wz	      ' bit #31 command - set the DAC sample rate
2cab0     18 00 90 5D |     if_nz   jmp     #p404                     ' if not set, proceed
2cab4     CE 7C 31 F9 |             getword qq,command0,#0            ' get the new rate
2cab8     4E 7C 15 FC |             wxpin   qq,#left addpins 1        ' and program the pins
2cabc     BE 7C E1 F8 |             getbyte qq,qq,#0 		      ' check if the rate is n*256
2cac0     00 7C 0D F2 |             cmp     qq,#0 wz                         
2cac4     4E CC 05 AC |     if_z    wrpin   dac2,#left addpins 1      ' if yes, set PWM DAC mode
2cac8     4E CA 05 5C |     if_nz   wrpin   dac,#left addpins 1       ' else set noise DAC mode
2cacc                 |             
2cacc     1E 9C 1D F4 | p404        bitl    command0,#30 wcz             ' bit #30: select PSRAM/HUB
2cad0     C2 82 01 56 |     if_nz   mov     mailbox,mailbox2             ' if not set, use PSRAM
2cad4     00 82 05 A6 |     if_z    mov     mailbox,#0                   ' if set, use HUB : TODO: this can be done at a channel level!
2cad8                 | 
2cad8                 | 
2cad8     C8 AE 31 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
2cadc     C8 B0 39 F9 |             getword oldrs,sample0,#1
2cae0     CC A4 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
2cae4     CC A2 31 F9 |     	    getword avol0,volpan0,#0
2cae8     CD A0 39 F9 |             getword askip0,freqskip0,#1    	    
2caec     CD 9E 31 F9 |             getword afreq0,freqskip0,#0
2caf0                 | 
2caf0     B4 A8 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
2caf4     00 AC 01 F6 |             mov     dt0,0-0    
2caf8     B3 AC 81 F1 |             sub     dt0,time0
2cafc                 |             
2cafc     B4 A8 8D F9 |             altd    cn, #time1                ' add channel period to channel time
2cb00     CF 00 00 F1 |             add     0-0,afreq0  	
2cb04                 | 
2cb04     D0 8E 01 F1 |             add     pointer0,askip0           ' compute the pointer to the next sample       
2cb08     C7 EA C1 F8 |             setbyte pointer00,pointer0,#0
2cb0c     08 8E 45 F0 |             shr     pointer0,#8
2cb10                 |          
2cb10     1F 92 0D F4 |             testb   sstart0,#31 wz            
2cb14     01 8E 65 A0 |     if_z    shl     pointer0,#1        
2cb18     1C 92 0D F4 |             testb   sstart0,#28 wz            
2cb1c     01 8E 65 A0 |     if_z    shl     pointer0,#1        
2cb20                 |             
2cb20     CB 8E 19 F2 |             cmp     pointer0,lend0 wcz
2cb24     CB 8E 81 31 |     if_ge   sub     pointer0,lend0	      ' and loop if needed     
2cb28     CA 8E 01 31 |     if_ge   add     pointer0,lstart0       
2cb2c                 |             
2cb2c     C7 7C 01 F6 |             mov     qq,pointer0               ' compute place in the memory from where the sample will be loaded
2cb30     C9 7C 01 F1 |             add     qq,sstart0            
2cb34                 | 
2cb34                 | 
2cb34                 | 
2cb34     FF 83 5D F2 |             cmps    mailbox,#$1FF wcz            ' the mailbox has to point somewhere not at the start of HUB RAM
2cb38     BE 7E E1 EA |     if_le   rdword  spl,qq                     ' if not, use HUB RAM for samples
2cb3c     04 01 B0 1D |     if_gt   call    #cache_read
2cb40                 |          
2cb40                 |          
2cb40                 |  
2cb40                 |          
2cb40     1F 92 0D F4 |             testb   sstart0,#31 wz 
2cb44     08 7E 65 50 |     if_nz   shl     spl,#8
2cb48     08 8E 65 50 |     if_nz   shl     pointer0,#8
2cb4c     07 8E 65 A0 |     if_z    shl     pointer0,#7
2cb50     1C 92 0D F4 |             testb   sstart0,#28 wz            
2cb54     01 8E 45 A0 |     if_z    shr     pointer0,#1    
2cb58     F5 8E C1 F8 | 	    setbyte pointer0,pointer00,#0       
2cb5c                 |     
2cb5c                 | 
2cb5c     D1 7E 31 FA | p406        scas    spl,avol0                 ' apply volume
2cb60     00 7E 01 F6 |             mov     spl,0-0
2cb64                 |  
2cb64     D2 7E 31 FA |             scas    spl,apan0                 ' apply pan
2cb68     00 B2 01 F6 |             mov     ls0,0-0
2cb6c     20 00 00 FF 
2cb70     00 7C 05 F6 |             mov     qq,##16384
2cb74     D2 7C 81 F1 |             sub     qq,apan0
2cb78     BE 7E 31 FA |             scas    spl,qq
2cb7c     00 B4 01 F6 |             mov     rs0, 0-0
2cb80                 | 
2cb80     D8 B8 81 F1 |             sub     rs,oldrs 		      ' replace the old sample with the new one in the mix
2cb84     DA B8 01 F1 |             add     rs,rs0
2cb88     D7 B6 81 F1 |             sub     ls,oldls
2cb8c     D9 B6 01 F1 |             add     ls,ls0
2cb90                 |    
2cb90     DA 90 29 F9 |             setword sample0,rs0,#1           ' pack samples into long
2cb94     D9 90 21 F9 |             setword sample0,ls0,#0
2cb98                 |             
2cb98     1E 92 1D F4 |             bitl    sstart0, #30 wcz          ' if bit #30 of start pointer is set, the current pointer needs resetting  
2cb9c     00 8E 05 A6 |     if_z    mov     pointer0, #0  
2cba0     02 93 65 AC |     if_z    wrlong  sstart0, ptra[2]          ' reset bit #30 in hub
2cba4     1D 92 1D F4 |             bitl    sstart0, #29 wcz	      ' if bit #29 is set, synchronize stereo at channels 1 and 2
2cba8     04 00 00 AF 
2cbac     00 68 05 A1 |     if_z    add     time1,##2048
2cbb0     B4 6A 01 A6 |     if_z    mov     time2,time1
2cbb4     02 93 65 AC |     if_z    wrlong  sstart0,ptra[2]
2cbb8                 |             
2cbb8     28 02 64 FD | p403        setq #1                          ' write new pointer and sample value to the hub
2cbbc     00 8F 65 FC |             wrlong  pointer0,ptra
2cbc0     BC F0 83 F1 |             sub     ptra, channeladd         ' reset the pointer to channel parameters
2cbc4                 |                       
2cbc4     B3 A6 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
2cbc8     FF 7B 25 A7 |     if_z    decmod  front, #511          
2cbcc                 |          
2cbcc     DB AE 31 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
2cbd0     DC B0 31 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
2cbd4     0F AE E5 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
2cbd8     0F B0 E5 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
2cbdc                 | 	    
2cbdc                 | 		    
2cbdc     D7 B0 29 F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
2cbe0     DE BA 01 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
2cbe4     D8 BC 01 F6 |             mov     newsample, oldrs       
2cbe8                 | 
2cbe8     B3 A6 01 F6 |             mov     oldt0,time0              ' update global time
2cbec     D6 66 01 F1 |             add     time0,dt0    
2cbf0                 |                                      
2cbf0     00 AC 0D F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
2cbf4     60 FE 9F AD |     if_z    jmp     #loop1
2cbf8     D6 7C 01 F6 |             mov     qq,dt0
2cbfc                 |   
2cbfc     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
2cc00     00 7A 9D F2 |             cmpr    front, #0-0 wcz
2cc04     F4 FF 9F AD |     if_e    jmp     #p301    
2cc08                 | 		
2cc08     00 C2 0D F2 | 	    cmp     scbase,#0 wz
2cc0c     20 00 90 AD |     if_z    jmp #p302	   
2cc10                 |  
2cc10                 |  
2cc10     3F C8 15 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
2cc14     E2 C6 01 C6 |     if_c    mov scptr2,scptr
2cc18     02 C6 65 C0 |     if_c    shl scptr2,#2
2cc1c     E1 C6 01 C1 |     if_c    add scptr2,scbase     
2cc20     60 C6 65 FC |             wrlong scptr2,#$60
2cc24     E3 BA 61 CC |     if_c    wrlong oldsample,scptr2
2cc28     01 00 00 CF 
2cc2c     7F C4 05 C7 |     if_c    incmod scptr,##639
2cc30                 | 			    
2cc30     BD BA 31 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
2cc34     00 00 00 FF 
2cc38     FF 7B 05 F7 |             incmod  front, ##511
2cc3c     EF 7D 6D FB |             djnz    qq,#p301
2cc40                 |             
2cc40     FC FD 9F FD |             jmp     #loop            'loop
2cc44                 | 
2cc44                 | '----------------------------------------------------------------------------------
2cc44                 | '------------- This is the end of the main loop -----------------------------------
2cc44                 | '----------------------------------------------------------------------------------
2cc44                 | 
2cc44                 | '----------------------------------------------------------------------------------
2cc44                 | '------------- PSRAM cache ----------- --------------------------------------------
2cc44                 | '----------------------------------------------------------------------------------
2cc44                 | 
2cc44                 | ' There are 8 cache pointers for 8 channels
2cc44                 | ' if 24 higher bits of address=cache, then ger a word from the cache
2cc44                 | ' else load the cache from PSRAM, update the pointer, then read a sample
2cc44                 | 
2cc44                 | 
2cc44     BE E6 E1 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
2cc48                 |             
2cc48     BE E8 01 F6 | 	    mov     addrhi,qq		
2cc4c     08 E8 45 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
2cc50     E8 A8 95 F9 | 	    alts    cn,#cache1            
2cc54     00 E8 09 F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
2cc58     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
2cc5c                 | 	
2cc5c     E8 A8 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
2cc60     F4 00 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
2cc64     F4 E0 01 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
2cc68     08 E0 65 F0 | 	    shl     cmd,#8
2cc6c     0B E0 3D F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
2cc70     D4 E2 01 F6 |             mov     hubaddr,cn                  ' to the channel cache
2cc74     08 E2 65 F0 |             shl     hubaddr,#8                  '
2cc78     E7 E2 01 F1 |             add     hubaddr,hubptr 
2cc7c     00 E5 05 F6 |             mov     count,#256                  ' 256 bytes
2cc80     28 04 64 FD |             setq    #2                          ' write 3 longs
2cc84     C1 E0 61 FC |             wrlong  cmd, mailbox                ' run it
2cc88     C1 E0 01 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
2cc8c     FE E1 B5 FB |             tjs     cmd, #poll1                 ' retry until valid 
2cc90                 |             
2cc90                 | 	
2cc90     D4 7C 01 F6 | p701	    mov     qq,cn			' cache hit
2cc94     08 7C 65 F0 | 	    shl     qq,#8			' compute the cache start
2cc98     E7 7C 01 F1 | 	    add     qq,hubptr
2cc9c     F3 7C 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
2cca0     BE 7E E1 0A |     _ret_   rdword  spl,qq                      ' read a word
2cca4                 |           
2cca4                 | 
2cca4                 | '--------------------------------------------------------------------------
2cca4                 | '------ Interrupt service -------------------------------------------------
2cca4                 | '------ Output the sample, get the next one if exists ---------------------
2cca4                 | '--------------------------------------------------------------------------
2cca4                 | 
2cca4     0E 86 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 100 cycles     
2cca8     0F 88 25 FC |             wypin   rsample,#right       '4
2ccac     BD F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
2ccb0     80 8B A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
2ccb4     FF F3 07 57 |     if_ne   incmod  ptrb,#511
2ccb8     C5 88 39 59 |     if_ne   getword rsample,lsnext,#1    '13
2ccbc     C5 86 31 59 |     if_ne   getword lsample,lsnext,#0    '15
2ccc0                 |     
2ccc0     F5 FF 3B FB |             reti1                        '17/19 
2ccc4                 |           
2ccc4                 | '---------------------------------------------------------------------------
2ccc4                 | '-------- End of interrupt -------------------------------------------------
2ccc4                 | '---------------------------------------------------------------------------    
2ccc4                 | 
2ccc4                 | 
2ccc4                 | '---------------------------------------------------------------------------
2ccc4                 | '------- Variables ---------------------------------------------------------
2ccc4                 | '---------------------------------------------------------------------------
2ccc4                 | 
2ccc4                 | ' constants
2ccc4                 | 
2ccc4     00 00 00 40 | a40000000   long $40000000
2ccc8     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
2cccc                 | 
2cccc                 | ' Time variables
2cccc                 | 
2cccc     00 00 00 00 | time0       long 0    ' Global sample computing time
2ccd0     01 00 00 00 | time1       long 1    ' Local channels time
2ccd4     02 00 00 00 | time2       long 2
2ccd8     03 00 00 00 | time3       long 3
2ccdc     04 00 00 00 | time4       long 4
2cce0     05 00 00 00 | time5       long 5
2cce4     06 00 00 00 | time6       long 6
2cce8     07 00 00 00 | time7       long 7
2ccec     08 00 00 00 | time8       long 8
2ccf0                 | 
2ccf0     00 00 00 00 | channeladd long 0
2ccf4                 | 
2ccf4     00 00 00 00 | front       long 0
2ccf8                 | 
2ccf8                 | ' temporary variables 
2ccf8     00 00 00 00 | qq          long 0
2ccfc     00 00 00 00 | spl         long 0
2cd00     00 00 00 00 | zero        long 0
2cd04     00 00 00 00 | mailbox     long 0
2cd08     00 00 00 00 | mailbox2 long 0
2cd0c                 | 
2cd0c                 | ' Interrupt ISR variables
2cd0c                 | 
2cd0c     00 00 00 00 | lsample     long 0
2cd10     00 00 00 00 | rsample     long 0
2cd14     00 00 00 00 | lsnext      long 0
2cd18     00 00 00 00 | rsnext      long 0 
2cd1c                 | 
2cd1c                 | ' channel parameter block
2cd1c                 | 
2cd1c     00 00 00 00 | pointer0    long 0     
2cd20     00 00 00 00 | sample0     long 0
2cd24     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
2cd28     00 00 00 00 | lstart0     long 0
2cd2c     00 00 00 00 | lend0       long 0
2cd30     00 00 00 00 | volpan0     long 0
2cd34     00 00 00 00 | freqskip0   long 0
2cd38     00 00 00 00 | command0    long 0
2cd3c                 | 
2cd3c     00 00 00 00 | afreq0      long 0
2cd40     00 00 00 00 | askip0      long 0
2cd44     00 00 00 00 | avol0       long 0
2cd48     00 00 00 00 | apan0       long 0
2cd4c                 | 
2cd4c     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
2cd50     00 00 00 00 | cn          long 0
2cd54     00 00 00 00 | ct          long 0
2cd58     00 00 00 00 | dt0         long 0
2cd5c                 | 
2cd5c                 | ' Samples
2cd5c     00 00 00 00 | oldls       long 0
2cd60     00 00 00 00 | oldrs       long 0
2cd64                 | 
2cd64     00 00 00 00 | ls0         long 0
2cd68     00 00 00 00 | rs0         long 0
2cd6c                 | 
2cd6c     00 00 00 00 | ls          long 0    
2cd70     00 00 00 00 | rs          long 0
2cd74                 | 
2cd74     00 00 00 00 | oldsample   long 0
2cd78     00 00 00 00 | newsample   long 0
2cd7c                 | 
2cd7c     00 00 00 00 | nrsample    long 0
2cd80     00 00 00 00 | nlsample    long 0
2cd84                 | 
2cd84     00 00 00 00 | scbase long 0
2cd88     00 00 00 00 | scptr long 0
2cd8c     00 00 00 00 | scptr2 long 0
2cd90     00 00 00 00 | scope long 0
2cd94                 | 
2cd94     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
2cd98     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
2cd9c                 | 
2cd9c     00 18 07 00 | hubptr      long $71800
2cda0     00 00 00 00 | cache1      long 0
2cda4     00 00 00 00 | cache2      long 0
2cda8     00 00 00 00 | cache3      long 0
2cdac     00 00 00 00 | cache4      long 0
2cdb0     00 00 00 00 | cache5      long 0
2cdb4     00 00 00 00 | cache6      long 0
2cdb8     00 00 00 00 | cache7      long 0
2cdbc     00 00 00 00 | cache8      long 0
2cdc0                 | 
2cdc0                 | 
2cdc0     00 00 00 00 | cmd         long 0
2cdc4     00 00 00 00 | hubaddr     long 0
2cdc8     00 01 00 00 | count       long 256
2cdcc     00 00 00 00 | addrlo long 0
2cdd0     00 00 00 00 | addrhi long 0
2cdd4     00 00 00 00 | pointer00 long 0
2cdd8     00 00 00 00 
2cddc     00 00 00 00 | null  			long 	0,0           ' for channel reset
2cde0                 | 	alignl
2cde0                 | __system__dat_
2cde0     00 00 00 00 
2cde4     00 00 00 00 | 	byte	$00[8]
2cde8     03 00 00 00 
2cdec     00 00 00 00 
2cdf0     00 00 00 00 
2cdf4     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2cdf8     00 00 00 00 
      ...             
2d084     00 00 00 00 
2d088     00 00 00 00 | 	byte	$00[660]
2d08c     00 00 C0 05 | 	long	(92 {__system____root_opendir})<<20
2d090     00 00 D0 05 | 	long	(93 {__system____root_closedir})<<20
2d094     00 00 E0 05 | 	long	(94 {__system____root_readdir})<<20
2d098     00 00 F0 05 | 	long	(95 {__system____root_stat})<<20
2d09c     00 00 00 00 
2d0a0     00 00 00 00 
2d0a4     00 00 00 00 
2d0a8     00 00 00 00 
2d0ac     00 00 00 00 
2d0b0     00 00 00 00 
2d0b4     00 00 00 00 | 	byte	$00[28]
2d0b8     20 D1 02 00 | 	long	@@@__system__dat_ + 832
2d0bc     23 D1 02 00 | 	long	@@@__system__dat_ + 835
2d0c0     44 D1 02 00 | 	long	@@@__system__dat_ + 868
2d0c4     5D D1 02 00 | 	long	@@@__system__dat_ + 893
2d0c8     78 D1 02 00 | 	long	@@@__system__dat_ + 920
2d0cc     92 D1 02 00 | 	long	@@@__system__dat_ + 946
2d0d0     A2 D1 02 00 | 	long	@@@__system__dat_ + 962
2d0d4     B4 D1 02 00 | 	long	@@@__system__dat_ + 980
2d0d8     C6 D1 02 00 | 	long	@@@__system__dat_ + 998
2d0dc     D8 D1 02 00 | 	long	@@@__system__dat_ + 1016
2d0e0     E4 D1 02 00 | 	long	@@@__system__dat_ + 1028
2d0e4     F5 D1 02 00 | 	long	@@@__system__dat_ + 1045
2d0e8     09 D2 02 00 | 	long	@@@__system__dat_ + 1065
2d0ec     13 D2 02 00 | 	long	@@@__system__dat_ + 1075
2d0f0     23 D2 02 00 | 	long	@@@__system__dat_ + 1091
2d0f4     32 D2 02 00 | 	long	@@@__system__dat_ + 1106
2d0f8     48 D2 02 00 | 	long	@@@__system__dat_ + 1128
2d0fc     61 D2 02 00 | 	long	@@@__system__dat_ + 1153
2d100     75 D2 02 00 | 	long	@@@__system__dat_ + 1173
2d104     83 D2 02 00 | 	long	@@@__system__dat_ + 1187
2d108     97 D2 02 00 | 	long	@@@__system__dat_ + 1207
2d10c     A3 D2 02 00 | 	long	@@@__system__dat_ + 1219
2d110     B5 D2 02 00 | 	long	@@@__system__dat_ + 1237
2d114     CD D2 02 00 | 	long	@@@__system__dat_ + 1261
2d118     DF D2 02 00 | 	long	@@@__system__dat_ + 1279
2d11c     F2 D2 02 00 | 	long	@@@__system__dat_ + 1298
2d120     4F 4B 00 4E 
2d124     75 6D 65 72 
2d128     69 63 61 6C 
2d12c     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
2d130     75 6D 65 6E 
2d134     74 20 6F 75 
2d138     74 20 6F 66 
2d13c     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
2d140     61 69 6E 00 
2d144     52 65 73 75 
2d148     6C 74 20 6E 
2d14c     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
2d150     65 70 72 65 
2d154     73 65 6E 74 
2d158     61 62 6C 65 
2d15c     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
2d160     65 67 61 6C 
2d164     20 6D 75 6C 
2d168     74 69 62 79 
2d16c     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
2d170     65 71 75 65 
2d174     6E 63 65 00 
2d178     4E 6F 20 73 
2d17c     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
2d180     66 69 6C 65 
2d184     20 6F 72 20 
2d188     64 69 72 65 
2d18c     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
2d190     79 00 42 61 
2d194     64 20 66 69 
2d198     6C 65 20 6E 
2d19c     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
2d1a0     72 00 50 65 
2d1a4     72 6D 69 73 
2d1a8     73 69 6F 6E 
2d1ac     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
2d1b0     69 65 64 00 
2d1b4     4E 6F 74 20 
2d1b8     65 6E 6F 75 
2d1bc     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
2d1c0     65 6D 6F 72 
2d1c4     79 00 54 65 
2d1c8     6D 70 6F 72 
2d1cc     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
2d1d0     66 61 69 6C 
2d1d4     75 72 65 00 
2d1d8     46 69 6C 65 
2d1dc     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
2d1e0     73 74 73 00 
2d1e4     49 6E 76 61 
2d1e8     6C 69 64 20 
2d1ec     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
2d1f0     6D 65 6E 74 
2d1f4     00 54 6F 6F 
2d1f8     20 6D 61 6E 
2d1fc     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
2d200     65 6E 20 66 
2d204     69 6C 65 73 
2d208     00 49 2F 4F 
2d20c     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
2d210     6F 72 00 4E 
2d214     6F 74 20 61 
2d218     20 64 69 72 
2d21c     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
2d220     72 79 00 49 
2d224     73 20 61 20 
2d228     64 69 72 65 
2d22c     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
2d230     79 00 52 65 
2d234     61 64 20 6F 
2d238     6E 6C 79 20 
2d23c     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
2d240     20 73 79 73 
2d244     74 65 6D 00 
2d248     46 75 6E 63 
2d24c     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
2d250     20 6E 6F 74 
2d254     20 69 6D 70 
2d258     6C 65 6D 65 
2d25c     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
2d260     00 44 69 72 
2d264     65 63 74 6F 
2d268     72 79 20 6E 
2d26c     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
2d270     6D 70 74 79 
2d274     00 4E 61 6D 
2d278     65 20 74 6F 
2d27c     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
2d280     6E 67 00 44 
2d284     65 76 69 63 
2d288     65 20 6E 6F 
2d28c     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
2d290     65 6B 61 62 
2d294     6C 65 00 42 
2d298     61 64 20 61 
2d29c     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
2d2a0     73 73 00 42 
2d2a4     72 6F 6B 65 
2d2a8     6E 20 63 6F 
2d2ac     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
2d2b0     74 69 6F 6E 
2d2b4     00 44 65 76 
2d2b8     69 63 65 20 
2d2bc     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
2d2c0     65 73 6F 75 
2d2c4     72 63 65 20 
2d2c8     62 75 73 79 
2d2cc     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
2d2d0     73 73 20 64 
2d2d4     65 76 69 63 
2d2d8     65 20 6C 69 
2d2dc     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
2d2e0     6F 20 73 70 
2d2e4     61 63 65 20 
2d2e8     6F 6E 20 64 
2d2ec     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
2d2f0     65 00 55 6E 
2d2f4     6B 6E 6F 77 
2d2f8     6E 20 65 72 
2d2fc     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
2d300     00 00 00 00 
2d304     00 00 00 00 | 	byte	$00[8]
2d308     05 00 00 00 
2d30c     00 00 00 00 
2d310     00 00 00 00 
2d314     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2d318     00 00 00 00 | 	byte	$00, $00, $00, $00
2d31c     00 00 40 07 | 	long	(116 {__system___tx})<<20
2d320     00 00 50 07 | 	long	(117 {__system___rx})<<20
2d324     00 00 00 00 | 	byte	$00, $00, $00, $00
2d328     00 00 60 07 | 	long	(118 {__system___rxtxioctl_0525})<<20
2d32c     00 00 70 07 | 	long	(119 {__system____dummy_flush_0526})<<20
2d330     00 00 00 00 
2d334     00 00 00 00 | 	byte	$00[8]
2d338     01 00 00 00 
2d33c     06 00 00 00 
2d340     00 00 00 00 
2d344     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2d348     00 00 00 00 
2d34c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
2d350     00 00 40 07 | 	long	(116 {__system___tx})<<20
2d354     00 00 50 07 | 	long	(117 {__system___rx})<<20
2d358     00 00 00 00 | 	byte	$00, $00, $00, $00
2d35c     00 00 60 07 | 	long	(118 {__system___rxtxioctl_0525})<<20
2d360     00 00 70 07 | 	long	(119 {__system____dummy_flush_0526})<<20
2d364     00 00 00 00 
2d368     00 00 00 00 | 	byte	$00[8]
2d36c     01 00 00 00 
2d370     06 00 00 00 
2d374     00 00 00 00 
2d378     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2d37c     00 00 00 00 
2d380     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
2d384     00 00 40 07 | 	long	(116 {__system___tx})<<20
2d388     00 00 50 07 | 	long	(117 {__system___rx})<<20
2d38c     00 00 00 00 | 	byte	$00, $00, $00, $00
2d390     00 00 60 07 | 	long	(118 {__system___rxtxioctl_0525})<<20
2d394     00 00 70 07 | 	long	(119 {__system____dummy_flush_0526})<<20
2d398     00 00 00 00 
      ...             
2d508     00 00 00 00 
2d50c     00 00 00 00 | 	byte	$00[376]
2d510     14 D5 02 00 | 	long	@@@__system__dat_ + 1844
2d514     00 00 00 00 
2d518     00 00 00 00 
2d51c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2d520                 | 	alignl
2d520                 | _fatfs_cc_dat_
2d520     C7 00 FC 00 
2d524     E9 00 E2 00 
2d528     E4 00 E0 00 
2d52c     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
2d530     EA 00 EB 00 
2d534     E8 00 EF 00 
2d538     EE 00 EC 00 
2d53c     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
2d540     C9 00 E6 00 
2d544     C6 00 F4 00 
2d548     F6 00 F2 00 
2d54c     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
2d550     FF 00 D6 00 
2d554     DC 00 F8 00 
2d558     A3 00 D8 00 
2d55c     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
2d560     E1 00 ED 00 
2d564     F3 00 FA 00 
2d568     F1 00 D1 00 
2d56c     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
2d570     BF 00 AE 00 
2d574     AC 00 BD 00 
2d578     BC 00 A1 00 
2d57c     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
2d580     91 25 92 25 
2d584     93 25 02 25 
2d588     24 25 C1 00 
2d58c     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
2d590     A9 00 63 25 
2d594     51 25 57 25 
2d598     5D 25 A2 00 
2d59c     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
2d5a0     14 25 34 25 
2d5a4     2C 25 1C 25 
2d5a8     00 25 3C 25 
2d5ac     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
2d5b0     5A 25 54 25 
2d5b4     69 25 66 25 
2d5b8     60 25 50 25 
2d5bc     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
2d5c0     F0 00 D0 00 
2d5c4     CA 00 CB 00 
2d5c8     C8 00 31 01 
2d5cc     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
2d5d0     CF 00 18 25 
2d5d4     0C 25 88 25 
2d5d8     84 25 A6 00 
2d5dc     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
2d5e0     D3 00 DF 00 
2d5e4     D4 00 D2 00 
2d5e8     F5 00 D5 00 
2d5ec     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
2d5f0     DE 00 DA 00 
2d5f4     DB 00 D9 00 
2d5f8     FD 00 DD 00 
2d5fc     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
2d600     AD 00 B1 00 
2d604     17 20 BE 00 
2d608     B6 00 A7 00 
2d60c     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
2d610     B0 00 A8 00 
2d614     B7 00 B9 00 
2d618     B3 00 B2 00 
2d61c     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
2d620     61 00 1A 03 
2d624     E0 00 17 03 
2d628     F8 00 07 03 
2d62c     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
2d630     78 01 00 01 
2d634     30 01 32 01 
2d638     06 01 39 01 
2d63c     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
2d640     2E 01 79 01 
2d644     06 01 80 01 
2d648     4D 00 43 02 
2d64c     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
2d650     82 01 84 01 
2d654     84 01 86 01 
2d658     87 01 87 01 
2d65c     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
2d660     8B 01 8B 01 
2d664     8D 01 8E 01 
2d668     8F 01 90 01 
2d66c     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
2d670     93 01 94 01 
2d674     F6 01 96 01 
2d678     97 01 98 01 
2d67c     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
2d680     9B 01 9C 01 
2d684     9D 01 20 02 
2d688     9F 01 A0 01 
2d68c     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
2d690     A2 01 A4 01 
2d694     A4 01 A6 01 
2d698     A7 01 A7 01 
2d69c     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
2d6a0     AB 01 AC 01 
2d6a4     AC 01 AE 01 
2d6a8     AF 01 AF 01 
2d6ac     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
2d6b0     B3 01 B3 01 
2d6b4     B5 01 B5 01 
2d6b8     B7 01 B8 01 
2d6bc     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
2d6c0     BB 01 BC 01 
2d6c4     BC 01 BE 01 
2d6c8     F7 01 C0 01 
2d6cc     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
2d6d0     C3 01 C4 01 
2d6d4     C5 01 C4 01 
2d6d8     C7 01 C8 01 
2d6dc     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
2d6e0     CB 01 CA 01 
2d6e4     CD 01 10 01 
2d6e8     DD 01 01 00 
2d6ec     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
2d6f0     12 01 F3 01 
2d6f4     03 00 F1 01 
2d6f8     F4 01 F4 01 
2d6fc     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
2d700     22 02 12 01 
2d704     3A 02 09 00 
2d708     65 2C 3B 02 
2d70c     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
2d710     66 2C 3F 02 
2d714     40 02 41 02 
2d718     41 02 46 02 
2d71c     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
2d720     40 00 81 01 
2d724     86 01 55 02 
2d728     89 01 8A 01 
2d72c     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
2d730     5A 02 90 01 
2d734     5C 02 5D 02 
2d738     5E 02 5F 02 
2d73c     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
2d740     62 02 94 01 
2d744     64 02 65 02 
2d748     66 02 67 02 
2d74c     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
2d750     6A 02 62 2C 
2d754     6C 02 6D 02 
2d758     6E 02 9C 01 
2d75c     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
2d760     9D 01 73 02 
2d764     74 02 9F 01 
2d768     76 02 77 02 
2d76c     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
2d770     7A 02 7B 02 
2d774     7C 02 64 2C 
2d778     7E 02 7F 02 
2d77c     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
2d780     82 02 A9 01 
2d784     84 02 85 02 
2d788     86 02 87 02 
2d78c     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
2d790     B1 01 B2 01 
2d794     45 02 8D 02 
2d798     8E 02 8F 02 
2d79c     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
2d7a0     B7 01 7B 03 
2d7a4     03 00 FD 03 
2d7a8     FE 03 FF 03 
2d7ac     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
2d7b0     86 03 88 03 
2d7b4     89 03 8A 03 
2d7b8     B1 03 11 03 
2d7bc     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
2d7c0     A3 03 A3 03 
2d7c4     C4 03 08 03 
2d7c8     CC 03 03 00 
2d7cc     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
2d7d0     8F 03 D8 03 
2d7d4     18 01 F2 03 
2d7d8     0A 00 F9 03 
2d7dc     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
2d7e0     F5 03 F6 03 
2d7e4     F7 03 F7 03 
2d7e8     F9 03 FA 03 
2d7ec     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
2d7f0     20 03 50 04 
2d7f4     10 07 60 04 
2d7f8     22 01 8A 04 
2d7fc     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
2d800     0E 01 CF 04 
2d804     01 00 C0 04 
2d808     D0 04 44 01 
2d80c     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
2d810     00 00 7D 1D 
2d814     01 00 63 2C 
2d818     00 1E 96 01 
2d81c     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
2d820     00 1F 08 06 
2d824     10 1F 06 06 
2d828     20 1F 08 06 
2d82c     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
2d830     40 1F 06 06 
2d834     51 1F 07 00 
2d838     59 1F 52 1F 
2d83c     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
2d840     5D 1F 56 1F 
2d844     5F 1F 60 1F 
2d848     08 06 70 1F 
2d84c     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
2d850     BB 1F C8 1F 
2d854     C9 1F CA 1F 
2d858     CB 1F DA 1F 
2d85c     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
2d860     F9 1F EA 1F 
2d864     EB 1F FA 1F 
2d868     FB 1F 80 1F 
2d86c     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
2d870     08 06 A0 1F 
2d874     08 06 B0 1F 
2d878     04 00 B8 1F 
2d87c     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
2d880     BC 1F CC 1F 
2d884     01 00 C3 1F 
2d888     D0 1F 02 06 
2d88c     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
2d890     E5 1F 01 00 
2d894     EC 1F F3 1F 
2d898     01 00 FC 1F 
2d89c     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
2d8a0     32 21 70 21 
2d8a4     10 02 84 21 
2d8a8     01 00 83 21 
2d8ac     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
2d8b0     30 2C 2F 04 
2d8b4     60 2C 02 01 
2d8b8     67 2C 06 01 
2d8bc     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
2d8c0     80 2C 64 01 
2d8c4     00 2D 26 08 
2d8c8     41 FF 1A 03 
2d8cc     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
2d8d0     05 07 09 0E 
2d8d4     10 12 14 16 
2d8d8     18 1C 1E 43 
2d8dc     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
2d8e0     41 41 43 45 
2d8e4     45 45 49 49 
2d8e8     49 41 41 45 
2d8ec     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
2d8f0     4F 55 55 59 
2d8f4     4F 55 4F 9C 
2d8f8     4F 9E 9F 41 
2d8fc     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
2d900     A5 A6 A7 A8 
2d904     A9 AA AB AC 
2d908     AD AE AF B0 
2d90c     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
2d910     41 41 41 B8 
2d914     B9 BA BB BC 
2d918     BD BE BF C0 
2d91c     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
2d920     C5 41 41 C8 
2d924     C9 CA CB CC 
2d928     CD CE CF D1 
2d92c     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
2d930     49 49 49 49 
2d934     D9 DA DB DC 
2d938     DD 49 DF 4F 
2d93c     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
2d940     4F E6 E8 E8 
2d944     55 55 55 59 
2d948     59 EE EF F0 
2d94c     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
2d950     F5 F6 F7 F8 
2d954     F9 FA FB FC 
2d958     FD FE FF 00 
2d95c     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
2d960     00 00 00 00 | 	byte	$00, $00, $00, $00
2d964     00 00 30 06 | 	long	(99 {_fatfs_cc_v_close})<<20
2d968     00 00 40 06 | 	long	(100 {_fatfs_cc_v_read})<<20
2d96c     00 00 50 06 | 	long	(101 {_fatfs_cc_v_write})<<20
2d970     00 00 60 06 | 	long	(102 {_fatfs_cc_v_lseek})<<20
2d974     00 00 70 06 | 	long	(103 {_fatfs_cc_v_ioctl})<<20
2d978     00 00 80 07 | 	long	(120 {_fatfs_cc_v_flush})<<20
2d97c     00 00 00 00 
2d980     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
2d984     00 00 80 06 | 	long	(104 {_fatfs_cc_v_open})<<20
2d988     00 00 90 06 | 	long	(105 {_fatfs_cc_v_creat})<<20
2d98c     00 00 A0 06 | 	long	(106 {_fatfs_cc_v_opendir})<<20
2d990     00 00 B0 06 | 	long	(107 {_fatfs_cc_v_closedir})<<20
2d994     00 00 C0 06 | 	long	(108 {_fatfs_cc_v_readdir})<<20
2d998     00 00 D0 06 | 	long	(109 {_fatfs_cc_v_stat})<<20
2d99c     00 00 E0 06 | 	long	(110 {_fatfs_cc_v_mkdir})<<20
2d9a0     00 00 F0 06 | 	long	(111 {_fatfs_cc_v_rmdir})<<20
2d9a4     00 00 00 07 | 	long	(112 {_fatfs_cc_v_remove})<<20
2d9a8     00 00 10 07 | 	long	(113 {_fatfs_cc_v_rename})<<20
2d9ac     00 00 20 07 | 	long	(114 {_fatfs_cc_v_init})<<20
2d9b0     00 00 30 07 | 	long	(115 {_fatfs_cc_v_deinit})<<20
2d9b4     FF FF FF FF 
2d9b8     1F 00 00 00 
2d9bc     1C 00 00 00 
2d9c0     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
2d9c4     1E 00 00 00 
2d9c8     1F 00 00 00 
2d9cc     1E 00 00 00 
2d9d0     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
2d9d4     1F 00 00 00 
2d9d8     1E 00 00 00 
2d9dc     1F 00 00 00 
2d9e0     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
2d9e4     1F 00 00 00 
2d9e8     00 00 00 00 
2d9ec     1F 00 00 00 
2d9f0     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
2d9f4     5A 00 00 00 
2d9f8     78 00 00 00 
2d9fc     97 00 00 00 
2da00     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
2da04     D4 00 00 00 
2da08     F3 00 00 00 
2da0c     11 01 00 00 
2da10     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
2da14     4E 01 00 00 
2da18     6D 01 00 00 
2da1c     FF FF FF FF 
2da20     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
2da24     00 00 00 00 
      ...             
2da3c     00 00 00 00 
2da40     00 00 00 00 | 	byte	$00[32]
2da44     62 DA 02 00 | 	long	@@@_fatfs_cc_dat_ + 1346
2da48     66 DA 02 00 | 	long	@@@_fatfs_cc_dat_ + 1350
2da4c     00 00 00 00 
2da50     00 00 00 00 
2da54     00 00 00 00 
2da58     00 00 00 00 
2da5c     00 00       | 	byte	$00[18]
2da5e     3F 3F 3F 00 
2da62     55 43 54 00 
2da66     55 43 54 00 
2da6a     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
2da6e     00 00 00 00 
2da72     00 00 00    | 	byte	$00[7]
2da75     CA 9A 3B 00 
2da79     00 00 00 01 
2da7d     01 01 01 01 
2da81     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
2da85     91 11 11 11 
2da89     11 01 01 01 
2da8d     01 01 01 01 
2da91     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
2da95     01 01 01 01 
2da99     01 01 01    | 	byte	$01[7]
2da9c     90 20 20 20 
2daa0     20 20 20 20 
2daa4     20 20 20 20 
2daa8     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
2daac     42 42 42 42 
2dab0     42 42 42 42 
2dab4     42 42       | 	byte	$42[10]
2dab6     20 20 20 20 
2daba     20 20 20    | 	byte	$20[7]
2dabd     44 44 44 44 
2dac1     44 44       | 	byte	$44[6]
2dac3     04 04 04 04 
2dac7     04 04 04 04 
2dacb     04 04 04 04 
2dacf     04 04 04 04 
2dad3     04 04 04 04 | 	byte	$04[20]
2dad7     20 20 20 20 
2dadb     20 20       | 	byte	$20[6]
2dadd     48 48 48 48 
2dae1     48 48       | 	byte	$48[6]
2dae3     08 08 08 08 
2dae7     08 08 08 08 
2daeb     08 08 08 08 
2daef     08 08 08 08 
2daf3     08 08 08 08 | 	byte	$08[20]
2daf7     20 20 20 20 
2dafb     01 00 00 00 
2daff     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
2db00                 | __methodtable__
2db00     3C 14 01 00 | 	long	@_do_no_command
2db04     18 B3 00 00 | 	long	@_do_plus
2db08     F8 B6 00 00 | 	long	@_do_minus
2db0c     C0 BB 00 00 | 	long	@_do_or
2db10     D8 BC 00 00 | 	long	@_do_mul
2db14     64 C2 00 00 | 	long	@_do_fdiv
2db18     A8 BA 00 00 | 	long	@_do_and
2db1c     44 C0 00 00 | 	long	@_do_div
2db20     2C C4 00 00 | 	long	@_do_mod
2db24     4C C6 00 00 | 	long	@_do_shl
2db28     64 C7 00 00 | 	long	@_do_shr
2db2c     7C C8 00 00 | 	long	@_do_power
2db30     8C AD 00 00 | 	long	@_do_getvar
2db34     EC 8A 00 00 | 	long	@_do_push
2db38     D4 A6 00 00 | 	long	@_do_assign
2db3c     E4 F1 00 00 | 	long	@_do_cls
2db40     04 A1 00 00 | 	long	@_do_new
2db44     88 F2 00 00 | 	long	@_do_plot
2db48     C0 F3 00 00 | 	long	@_do_draw
2db4c     A8 FD 00 00 | 	long	@_do_print
2db50     A0 F6 00 00 | 	long	@_do_circle
2db54     28 F5 00 00 | 	long	@_do_fcircle
2db58     18 F8 00 00 | 	long	@_do_box
2db5c     C0 FB 00 00 | 	long	@_do_frame
2db60     50 F2 00 00 | 	long	@_do_color
2db64     F0 6A 00 00 | 	long	@_do_for
2db68     1C 6D 00 00 | 	long	@_do_next
2db6c     68 9E 00 00 | 	long	@_do_list
2db70     3C 9B 00 00 | 	long	@_do_run
2db74     90 A5 00 00 | 	long	@_do_error
2db78     8C A2 00 00 | 	long	@_do_fast_goto
2db7c     7C A3 00 00 | 	long	@_do_find_goto
2db80     8C A5 00 00 | 	long	@_do_slow_goto
2db84     B4 E0 00 00 | 	long	@_do_converttoint
2db88     30 91 00 00 | 	long	@_test_csave
2db8c     84 94 00 00 | 	long	@_do_save
2db90     70 97 00 00 | 	long	@_do_load
2db94     F4 06 01 00 | 	long	@_do_pinwrite
2db98     0C 0B 01 00 | 	long	@_do_waitms
2db9c     48 0C 01 00 | 	long	@_do_waitvbl
2dba0     50 0F 01 00 | 	long	@_do_if
2dba4     34 10 01 00 | 	long	@_do_else
2dba8     58 10 01 00 | 	long	@_do_nothing
2dbac     44 CA 00 00 | 	long	@_do_eq
2dbb0     74 D5 00 00 | 	long	@_do_ge
2dbb4     34 D9 00 00 | 	long	@_do_le
2dbb8     04 CE 00 00 | 	long	@_do_gt
2dbbc     C4 D1 00 00 | 	long	@_do_lt
2dbc0     F4 DC 00 00 | 	long	@_do_ne
2dbc4     84 E2 00 00 | 	long	@_do_rnd
2dbc8     5C 10 01 00 | 	long	@_do_brun
2dbcc     28 13 01 00 | 	long	@_do_beep
2dbd0     78 0C 01 00 | 	long	@_do_dir
2dbd4     54 02 01 00 | 	long	@_do_paper
2dbd8     DC 02 01 00 | 	long	@_do_ink
2dbdc     78 03 01 00 | 	long	@_do_font
2dbe0     F4 03 01 00 | 	long	@_do_mode
2dbe4     94 12 01 00 | 	long	@_do_mouse
2dbe8     7C F1 00 00 | 	long	@_do_gettime
2dbec     C8 12 01 00 | 	long	@_do_cursor
2dbf0     FC 12 01 00 | 	long	@_do_click
2dbf4     08 EF 00 00 | 	long	@_do_mousex
2dbf8     4C EF 00 00 | 	long	@_do_mousey
2dbfc     D4 EF 00 00 | 	long	@_do_mousek
2dc00     90 EF 00 00 | 	long	@_do_mousew
2dc04     4C E4 00 00 | 	long	@_do_sin
2dc08     34 E6 00 00 | 	long	@_do_stick
2dc0c     B8 E7 00 00 | 	long	@_do_strig
2dc10     1C EE 00 00 | 	long	@_do_sprite
2dc14     8C EA 00 00 | 	long	@_do_defsprite
2dc18     3C E9 00 00 | 	long	@_do_getpixel
2dc1c     54 0C 01 00 | 	long	@_do_waitclock
2dc20     48 14 01 00 | 	long	@_do_negative
2dc24     18 F0 00 00 | 	long	@_do_rdpin
2dc28     84 F0 00 00 | 	long	@_do_rqpin
2dc2c     F8 F0 00 00 | 	long	@_do_pinread
2dc30     8C 09 01 00 | 	long	@_do_wrpin
2dc34     0C 0A 01 00 | 	long	@_do_wxpin
2dc38     8C 0A 01 00 | 	long	@_do_wypin
2dc3c     7C 07 01 00 | 	long	@_do_pinfloat
2dc40     BC 07 01 00 | 	long	@_do_pinlo
2dc44     FC 07 01 00 | 	long	@_do_pinhi
2dc48     7C 08 01 00 | 	long	@_do_pinstart
2dc4c     3C 08 01 00 | 	long	@_do_pintoggle
2dc50     00 FA 00 00 | 	long	@_do_fill
2dc54     30 46 01 00 | 	long	@_hg010b_spin2_putchar
2dc58     64 49 02 00 | 	long	@__struct___bas_wrap_sender_tx
2dc5c     A8 49 02 00 | 	long	@__struct___bas_wrap_sender_rx
2dc60     F0 49 02 00 | 	long	@__struct___bas_wrap_sender_close
2dc64     94 48 02 00 | 	long	@__struct__s_vfs_file_t_putchar
2dc68     04 49 02 00 | 	long	@__struct__s_vfs_file_t_getchar
2dc6c     4C 48 02 00 | 	long	@___strs_cl_pfunc
2dc70     AC A7 01 00 | 	long	@__system____root_opendir
2dc74     48 A8 01 00 | 	long	@__system____root_closedir
2dc78     C4 A7 01 00 | 	long	@__system____root_readdir
2dc7c     50 A8 01 00 | 	long	@__system____root_stat
2dc80     D8 A0 01 00 | 	long	@__system____default_putc
2dc84     5C A0 01 00 | 	long	@__system____default_getc
2dc88     80 A1 01 00 | 	long	@__system____default_flush
2dc8c     54 33 02 00 | 	long	@_fatfs_cc_v_close
2dc90     70 37 02 00 | 	long	@_fatfs_cc_v_read
2dc94     84 38 02 00 | 	long	@_fatfs_cc_v_write
2dc98     64 39 02 00 | 	long	@_fatfs_cc_v_lseek
2dc9c     EC 39 02 00 | 	long	@_fatfs_cc_v_ioctl
2dca0     40 3A 02 00 | 	long	@_fatfs_cc_v_open
2dca4     B8 32 02 00 | 	long	@_fatfs_cc_v_creat
2dca8     98 33 02 00 | 	long	@_fatfs_cc_v_opendir
2dcac     0C 34 02 00 | 	long	@_fatfs_cc_v_closedir
2dcb0     4C 34 02 00 | 	long	@_fatfs_cc_v_readdir
2dcb4     80 35 02 00 | 	long	@_fatfs_cc_v_stat
2dcb8     00 3A 02 00 | 	long	@_fatfs_cc_v_mkdir
2dcbc     20 3A 02 00 | 	long	@_fatfs_cc_v_rmdir
2dcc0     10 3A 02 00 | 	long	@_fatfs_cc_v_remove
2dcc4     30 3A 02 00 | 	long	@_fatfs_cc_v_rename
2dcc8     50 3B 02 00 | 	long	@_fatfs_cc_v_init
2dccc     58 3B 02 00 | 	long	@_fatfs_cc_v_deinit
2dcd0     68 59 01 00 | 	long	@__system___tx
2dcd4     A8 59 01 00 | 	long	@__system___rx
2dcd8     BC B3 01 00 | 	long	@__system___rxtxioctl_0525
2dcdc     14 B4 01 00 | 	long	@__system____dummy_flush_0526
2dce0     20 3B 02 00 | 	long	@_fatfs_cc_v_flush
2dce4                 | __heap_base
2dce4     00 00 00 00 
      ...             
6c4e4     00 00 00 00 
6c4e8     00 00 00 00 | 	long	0[64002]
6c4ec                 | objmem
6c4ec     00 00 00 00 
      ...             
76994     00 00 00 00 
76998     00 00 00 00 | 	long	0[10540]
7699c                 | stackspace
7699c     00 00 00 00 | 	long	0[1]
769a0 100             | 	org	COG_BSS_START
769a0 100             | _var01
769a0 100             | 	res	1
769a0 101             | _var02
769a0 101             | 	res	1
769a0 102             | _var03
769a0 102             | 	res	1
769a0 103             | _var04
769a0 103             | 	res	1
769a0 104             | _var05
769a0 104             | 	res	1
769a0 105             | _var06
769a0 105             | 	res	1
769a0 106             | _var07
769a0 106             | 	res	1
769a0 107             | _var08
769a0 107             | 	res	1
769a0 108             | _var09
769a0 108             | 	res	1
769a0 109             | arg01
769a0 109             | 	res	1
769a0 10a             | arg02
769a0 10a             | 	res	1
769a0 10b             | arg03
769a0 10b             | 	res	1
769a0 10c             | arg04
769a0 10c             | 	res	1
769a0 10d             | arg05
769a0 10d             | 	res	1
769a0 10e             | arg06
769a0 10e             | 	res	1
769a0 10f             | local01
769a0 10f             | 	res	1
769a0 110             | local02
769a0 110             | 	res	1
769a0 111             | local03
769a0 111             | 	res	1
769a0 112             | local04
769a0 112             | 	res	1
769a0 113             | local05
769a0 113             | 	res	1
769a0 114             | local06
769a0 114             | 	res	1
769a0 115             | local07
769a0 115             | 	res	1
769a0 116             | local08
769a0 116             | 	res	1
769a0 117             | local09
769a0 117             | 	res	1
769a0 118             | local10
769a0 118             | 	res	1
769a0 119             | local11
769a0 119             | 	res	1
769a0 11a             | local12
769a0 11a             | 	res	1
769a0 11b             | local13
769a0 11b             | 	res	1
769a0 11c             | local14
769a0 11c             | 	res	1
769a0 11d             | local15
769a0 11d             | 	res	1
769a0 11e             | local16
769a0 11e             | 	res	1
769a0 11f             | local17
769a0 11f             | 	res	1
769a0 120             | local18
769a0 120             | 	res	1
769a0 121             | local19
769a0 121             | 	res	1
769a0 122             | local20
769a0 122             | 	res	1
769a0 123             | local21
769a0 123             | 	res	1
769a0 124             | local22
769a0 124             | 	res	1
769a0 125             | local23
769a0 125             | 	res	1
769a0 126             | local24
769a0 126             | 	res	1
769a0 127             | local25
769a0 127             | 	res	1
769a0 128             | local26
769a0 128             | 	res	1
769a0 129             | local27
769a0 129             | 	res	1
769a0 12a             | local28
769a0 12a             | 	res	1
769a0 12b             | local29
769a0 12b             | 	res	1
769a0 12c             | local30
769a0 12c             | 	res	1
769a0 12d             | local31
769a0 12d             | 	res	1
769a0 12e             | local32
769a0 12e             | 	res	1
769a0 12f             | muldiva_
769a0 12f             | 	res	1
769a0 130             | muldivb_
769a0 130             | 	res	1
769a0 131             | 	fit	480
769a0 131             | 
