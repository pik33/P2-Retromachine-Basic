00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic023a.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 256000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 23
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getivar = 17
00000                 | 	fun_getuvar = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1023
00000                 | 	maxstack = 512
00000                 | 	maxfor = 128
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 E0 28 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 31 63 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 30 61 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 31 61 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 62 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 60 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 30 61 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 31 63 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 10 EB 02 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 28 E9 02 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 18 D3 06 00 | 	long	@objmem
007d0 0f3             | ptr__Audio093b_8_sc_spin2_dat__
007d0 0f3 28 D8 02 00 | 	long	@_Audio093b_8_sc_spin2_dat_
007d4 0f4             | ptr___system__dat__
007d4 0f4 08 DC 02 00 | 	long	@__system__dat_
007d8 0f5             | ptr__dat__
007d8 0f5 64 55 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 48 E3 02 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 9C 76 02 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 4C 9E 02 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 04 9C 02 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb DC AD 02 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc D4 77 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     45 E4 05 F1 | 	add	objptr, #69
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     51 00 00 FF 
00818     F3 E5 05 F1 | 	add	objptr, ##41971
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     52 00 00 FF 
0082c     38 E4 85 F1 | 	sub	objptr, ##42040
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     00 56 B1 FD | 	call	#__system___waitms
0083c     52 00 00 FF 
00840     38 E4 05 F1 | 	add	objptr, ##42040
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     52 00 00 FF 
00854     38 E4 85 F1 | 	sub	objptr, ##42040
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     D8 55 B1 FD | 	call	#__system___waitms
00864     52 00 00 FF 
00868     38 E4 05 F1 | 	add	objptr, ##42040
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     52 00 00 FF 
0087c     38 E4 85 F1 | 	sub	objptr, ##42040
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     B0 55 B1 FD | 	call	#__system___waitms
0088c     52 00 00 FF 
00890     38 E4 05 F1 | 	add	objptr, ##42040
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     52 00 00 FF 
008a4     38 E4 85 F1 | 	sub	objptr, ##42040
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     51 00 00 FF 
008d4     B0 E5 05 F1 | 	add	objptr, ##41904
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     51 00 00 FF 
00914     B8 E5 85 F1 | 	sub	objptr, ##41912
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     C0 4B B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     10 4C B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     00 4C B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     51 00 00 FF 
00980     C0 E5 05 F1 | 	add	objptr, ##41920
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     51 00 00 FF 
009ac     DC E5 85 F1 | 	sub	objptr, ##41948
009b0     64 4B B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     51 00 00 FF 
009e0     C0 E5 05 F1 | 	add	objptr, ##41920
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     51 00 00 FF 
00a08     DC E5 85 F1 | 	sub	objptr, ##41948
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     21 4A 05 F6 | 	mov	COUNT_, #33
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     48 F0 07 F1 | 	add	ptra, ##584
00a2c     2D 00 00 FF 
00a30     E0 E5 05 F1 | 	add	objptr, ##23520
00a34     F2 1E 02 FB | 	rdlong	local01, objptr
00a38     04 E4 05 F1 | 	add	objptr, #4
00a3c     F2 1E 62 FC | 	wrlong	local01, objptr
00a40     04 E4 05 F1 | 	add	objptr, #4
00a44     FF FF FF FF 
00a48     F2 FE 6B FC | 	wrlong	##-1, objptr
00a4c     00 20 06 F6 | 	mov	local02, #0
00a50     13 00 00 FF 
00a54     58 E4 05 F1 | 	add	objptr, ##9816
00a58     F2 00 68 FC | 	wrlong	#0, objptr
00a5c     41 00 00 FF 
00a60     40 E4 85 F1 | 	sub	objptr, ##33344
00a64     00 22 06 F6 | 	mov	local03, #0
00a68                 | LR__0020
00a68                 | ' 
00a68                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a68                 | ' 
00a68                 | ' fullline$=line$: cont=-1  : linenum=0 : lineptr=0 : err=0
00a68                 | ' 
00a68                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a68     00 24 06 F6 | 	mov	local04, #0
00a6c     20 4E 05 F1 | 	add	fp, #32
00a70     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a74                 | LR__0021
00a74     12 27 02 F6 | 	mov	local05, local04
00a78     02 26 66 F0 | 	shl	local05, #2
00a7c     A7 26 02 F1 | 	add	local05, fp
00a80     13 01 68 FC | 	wrlong	#0, local05
00a84     01 24 06 F1 | 	add	local04, #1
00a88     7E 24 56 F2 | 	cmps	local04, #126 wc
00a8c     E4 FF 9F CD |  if_b	jmp	#LR__0021
00a90                 | LR__0022
00a90     20 4E 85 F1 | 	sub	fp, #32
00a94                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
00a94     00 24 06 F6 | 	mov	local04, #0
00a98     2B 00 00 FF 
00a9c     D0 E5 05 F1 | 	add	objptr, ##22480
00aa0     97 20 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00aa4                 | LR__0023
00aa4     12 1F 02 F6 | 	mov	local01, local04
00aa8     03 1E 66 F0 | 	shl	local01, #3
00aac     F2 1E 02 F1 | 	add	local01, objptr
00ab0     25 01 00 FF 
00ab4     BA 17 06 F6 | 	mov	arg03, ##@LR__4087
00ab8     0F 17 62 FC | 	wrlong	arg03, local01
00abc     12 1F 02 F6 | 	mov	local01, local04
00ac0     03 1E 66 F0 | 	shl	local01, #3
00ac4     F2 28 02 F6 | 	mov	local06, objptr
00ac8     F2 1E 02 F1 | 	add	local01, objptr
00acc     00 2A 06 F6 | 	mov	local07, #0
00ad0     04 1E 06 F1 | 	add	local01, #4
00ad4     0F 01 68 FC | 	wrlong	#0, local01
00ad8     01 24 06 F1 | 	add	local04, #1
00adc     7E 24 56 F2 | 	cmps	local04, #126 wc
00ae0     C0 FF 9F CD |  if_b	jmp	#LR__0023
00ae4                 | LR__0024
00ae4     02 00 00 FF 
00ae8     10 E4 05 F1 | 	add	objptr, ##1040
00aec     F2 12 02 FB | 	rdlong	arg01, objptr
00af0     2D 00 00 FF 
00af4     E0 E5 85 F1 | 	sub	objptr, ##23520
00af8     90 74 B1 FD | 	call	#__system__RTrim_S
00afc     FD 12 02 F6 | 	mov	arg01, result1
00b00     C8 73 B1 FD | 	call	#__system__LTrim_S
00b04     2D 00 00 FF 
00b08     E0 E5 05 F1 | 	add	objptr, ##23520
00b0c     F2 FA 61 FC | 	wrlong	result1, objptr
00b10     25 01 00 FF 
00b14     BB 1F 06 F6 | 	mov	local01, ##@LR__4088
00b18     24 00 00 FF 
00b1c     88 E4 05 F1 | 	add	objptr, ##18568
00b20     F2 1E 62 FC | 	wrlong	local01, objptr
00b24     24 00 00 FF 
00b28     88 E4 85 F1 | 	sub	objptr, ##18568
00b2c     F2 12 02 FB | 	rdlong	arg01, objptr
00b30     2D 00 00 FF 
00b34     E0 E5 85 F1 | 	sub	objptr, ##23520
00b38     09 2D 02 F6 | 	mov	local08, arg01
00b3c     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b40                 | LR__0025
00b40     16 FB C9 FA | 	rdbyte	result1, local08 wz
00b44     01 2C 06 51 |  if_ne	add	local08, #1
00b48     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b4c                 | LR__0026
00b4c     09 2D 8A F1 | 	sub	local08, arg01 wz
00b50     52 00 00 FF 
00b54     6C E4 05 F1 | 	add	objptr, ##42092
00b58     F2 2C 62 FC | 	wrlong	local08, objptr
00b5c                 | ' if l=0 then goto 101
00b5c     52 00 00 FF 
00b60     6C E4 85 F1 | 	sub	objptr, ##42092
00b64     88 1D 90 AD |  if_e	jmp	#LR__0126
00b68     52 00 00 FF 
00b6c     70 E4 05 F1 | 	add	objptr, ##42096
00b70     F2 00 68 FC | 	wrlong	#0, objptr
00b74                 | ' ' before we split the line, we have to find colons that are inside a string,,,,
00b74                 | ' for i=1 to len(line$)
00b74     01 24 06 F6 | 	mov	local04, #1
00b78     24 00 00 FF 
00b7c     90 E4 85 F1 | 	sub	objptr, ##18576
00b80     F2 12 02 FB | 	rdlong	arg01, objptr
00b84     2D 00 00 FF 
00b88     E0 E5 85 F1 | 	sub	objptr, ##23520
00b8c     09 2D 02 F6 | 	mov	local08, arg01
00b90     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00b94                 | LR__0027
00b94     16 FB C9 FA | 	rdbyte	result1, local08 wz
00b98     01 2C 06 51 |  if_ne	add	local08, #1
00b9c     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00ba0                 | LR__0028
00ba0     09 2D 82 F1 | 	sub	local08, arg01
00ba4     16 2F 02 F6 | 	mov	local09, local08
00ba8     01 2E 06 F1 | 	add	local09, #1
00bac                 | LR__0029
00bac     17 25 52 F2 | 	cmps	local04, local09 wc
00bb0     00 01 90 3D |  if_ae	jmp	#LR__0032
00bb4                 | ' 
00bb4                 | '   if mid$(line$,i,1)="""" andalso d=0 then 
00bb4     2D 00 00 FF 
00bb8     E0 E5 05 F1 | 	add	objptr, ##23520
00bbc     F2 12 02 FB | 	rdlong	arg01, objptr
00bc0     2D 00 00 FF 
00bc4     E0 E5 85 F1 | 	sub	objptr, ##23520
00bc8     12 15 02 F6 | 	mov	arg02, local04
00bcc     01 16 06 F6 | 	mov	arg03, #1
00bd0     9C 70 B1 FD | 	call	#__system__Mid_S
00bd4     FD 12 02 F6 | 	mov	arg01, result1
00bd8     25 01 00 FF 
00bdc     BC 15 06 F6 | 	mov	arg02, ##@LR__4089
00be0     8C 4F B1 FD | 	call	#__system___string_cmp
00be4     00 FA 0D F2 | 	cmp	result1, #0 wz
00be8     2C 00 90 5D |  if_ne	jmp	#LR__0030
00bec     52 00 00 FF 
00bf0     70 E4 05 F1 | 	add	objptr, ##42096
00bf4     F2 26 0A FB | 	rdlong	local05, objptr wz
00bf8     52 00 00 FF 
00bfc     70 E4 85 F1 | 	sub	objptr, ##42096
00c00     52 00 00 AF 
00c04     70 E4 05 A1 |  if_e	add	objptr, ##42096
00c08     F2 02 68 AC |  if_e	wrlong	#1, objptr
00c0c     52 00 00 AF 
00c10     70 E4 85 A1 |  if_e	sub	objptr, ##42096
00c14     60 00 90 AD |  if_e	jmp	#LR__0031
00c18                 | LR__0030
00c18     2D 00 00 FF 
00c1c     E0 E5 05 F1 | 	add	objptr, ##23520
00c20     F2 12 02 FB | 	rdlong	arg01, objptr
00c24     2D 00 00 FF 
00c28     E0 E5 85 F1 | 	sub	objptr, ##23520
00c2c     12 15 02 F6 | 	mov	arg02, local04
00c30     01 16 06 F6 | 	mov	arg03, #1
00c34     38 70 B1 FD | 	call	#__system__Mid_S
00c38     FD 12 02 F6 | 	mov	arg01, result1
00c3c     25 01 00 FF 
00c40     BE 15 06 F6 | 	mov	arg02, ##@LR__4090
00c44     28 4F B1 FD | 	call	#__system___string_cmp
00c48     00 FA 0D F2 | 	cmp	result1, #0 wz
00c4c     52 00 00 AF 
00c50     70 E4 05 A1 |  if_e	add	objptr, ##42096
00c54     F2 26 02 AB |  if_e	rdlong	local05, objptr
00c58     52 00 00 AF 
00c5c     70 E4 85 A1 |  if_e	sub	objptr, ##42096
00c60     01 26 0E A2 |  if_e	cmp	local05, #1 wz
00c64     52 00 00 AF 
00c68     70 E4 05 A1 |  if_e	add	objptr, ##42096
00c6c     F2 00 68 AC |  if_e	wrlong	#0, objptr
00c70     52 00 00 AF 
00c74     70 E4 85 A1 |  if_e	sub	objptr, ##42096
00c78                 | LR__0031
00c78     12 1F 02 F6 | 	mov	local01, local04
00c7c     03 1E 66 F0 | 	shl	local01, #3
00c80     2B 00 00 FF 
00c84     D0 E5 05 F1 | 	add	objptr, ##22480
00c88     F2 28 02 F6 | 	mov	local06, objptr
00c8c     F2 1E 02 F1 | 	add	local01, objptr
00c90     26 00 00 FF 
00c94     A0 E4 05 F1 | 	add	objptr, ##19616
00c98     F2 2A 02 FB | 	rdlong	local07, objptr
00c9c     52 00 00 FF 
00ca0     70 E4 85 F1 | 	sub	objptr, ##42096
00ca4     04 1E 06 F1 | 	add	local01, #4
00ca8     0F 2B 62 FC | 	wrlong	local07, local01
00cac     01 24 06 F1 | 	add	local04, #1
00cb0     F8 FE 9F FD | 	jmp	#LR__0029
00cb4                 | LR__0032
00cb4     01 24 06 F6 | 	mov	local04, #1
00cb8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop
00cb8                 | LR__0033
00cb8     2D 00 00 FF 
00cbc     E0 E5 05 F1 | 	add	objptr, ##23520
00cc0     F2 12 02 FB | 	rdlong	arg01, objptr
00cc4     2D 00 00 FF 
00cc8     E0 E5 85 F1 | 	sub	objptr, ##23520
00ccc     12 15 02 F6 | 	mov	arg02, local04
00cd0     01 16 06 F6 | 	mov	arg03, #1
00cd4     98 6F B1 FD | 	call	#__system__Mid_S
00cd8     FD 12 02 F6 | 	mov	arg01, result1
00cdc     25 01 00 FF 
00ce0     C0 31 06 F6 | 	mov	local10, ##@LR__4091
00ce4     18 15 02 F6 | 	mov	arg02, local10
00ce8     84 4E B1 FD | 	call	#__system___string_cmp
00cec     00 FA 0D F2 | 	cmp	result1, #0 wz
00cf0     34 00 90 5D |  if_ne	jmp	#LR__0034
00cf4     12 29 02 F6 | 	mov	local06, local04
00cf8     03 28 66 F0 | 	shl	local06, #3
00cfc     2B 00 00 FF 
00d00     D0 E5 05 F1 | 	add	objptr, ##22480
00d04     F2 2A 02 F6 | 	mov	local07, objptr
00d08     F2 28 02 F1 | 	add	local06, objptr
00d0c     04 28 06 F1 | 	add	local06, #4
00d10     14 33 02 FB | 	rdlong	local11, local06
00d14     04 28 86 F1 | 	sub	local06, #4
00d18     19 35 0A F6 | 	mov	local12, local11 wz
00d1c     2B 00 00 FF 
00d20     D0 E5 85 F1 | 	sub	objptr, ##22480
00d24     24 00 90 AD |  if_e	jmp	#LR__0035
00d28                 | LR__0034
00d28     52 00 00 FF 
00d2c     6C E4 05 F1 | 	add	objptr, ##42092
00d30     F2 36 02 FB | 	rdlong	local13, objptr
00d34     52 00 00 FF 
00d38     6C E4 85 F1 | 	sub	objptr, ##42092
00d3c     1B 39 02 F6 | 	mov	local14, local13
00d40     1C 25 52 F2 | 	cmps	local04, local14 wc
00d44     01 24 06 C1 |  if_b	add	local04, #1
00d48     6C FF 9F CD |  if_b	jmp	#LR__0033
00d4c                 | LR__0035
00d4c                 | ' 
00d4c                 | ' 'let d=instr(1,line$,":"): if d>0 andalso d<len(line$) andalso lparts(d).token=0  then let rest$=trim$(right$(line$,len(line$)-d)):line$=trim$(left$(line$,d-1)) else rest$=""  
00d4c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 
00d4c     52 00 00 FF 
00d50     6C E4 05 F1 | 	add	objptr, ##42092
00d54     F2 1E 02 FB | 	rdlong	local01, objptr
00d58     52 00 00 FF 
00d5c     6C E4 85 F1 | 	sub	objptr, ##42092
00d60     0F 25 52 F2 | 	cmps	local04, local01 wc
00d64     A4 00 90 3D |  if_ae	jmp	#LR__0038
00d68     2D 00 00 FF 
00d6c     E0 E5 05 F1 | 	add	objptr, ##23520
00d70     F2 2A 02 FB | 	rdlong	local07, objptr
00d74     2D 00 00 FF 
00d78     E0 E5 85 F1 | 	sub	objptr, ##23520
00d7c     15 13 02 F6 | 	mov	arg01, local07
00d80     09 2D 02 F6 | 	mov	local08, arg01
00d84     97 06 48 FB | 	callpa	#(@LR__0037-@LR__0036)>>2,fcache_load_ptr_
00d88                 | LR__0036
00d88     16 FB C9 FA | 	rdbyte	result1, local08 wz
00d8c     01 2C 06 51 |  if_ne	add	local08, #1
00d90     F4 FF 9F 5D |  if_ne	jmp	#LR__0036
00d94                 | LR__0037
00d94     09 2D 82 F1 | 	sub	local08, arg01
00d98     16 15 02 F6 | 	mov	arg02, local08
00d9c     12 15 82 F1 | 	sub	arg02, local04
00da0     15 13 02 F6 | 	mov	arg01, local07
00da4     38 6E B1 FD | 	call	#__system__Right_S
00da8     FD 12 02 F6 | 	mov	arg01, result1
00dac     DC 71 B1 FD | 	call	#__system__RTrim_S
00db0     FD 12 02 F6 | 	mov	arg01, result1
00db4     14 71 B1 FD | 	call	#__system__LTrim_S
00db8     52 00 00 FF 
00dbc     74 E4 05 F1 | 	add	objptr, ##42100
00dc0     F2 FA 61 FC | 	wrlong	result1, objptr
00dc4     24 00 00 FF 
00dc8     94 E4 85 F1 | 	sub	objptr, ##18580
00dcc     F2 12 02 FB | 	rdlong	arg01, objptr
00dd0     2D 00 00 FF 
00dd4     E0 E5 85 F1 | 	sub	objptr, ##23520
00dd8     01 24 86 F1 | 	sub	local04, #1
00ddc     12 15 02 F6 | 	mov	arg02, local04
00de0     74 6D B1 FD | 	call	#__system__Left_S
00de4     FD 12 02 F6 | 	mov	arg01, result1
00de8     A0 71 B1 FD | 	call	#__system__RTrim_S
00dec     FD 12 02 F6 | 	mov	arg01, result1
00df0     D8 70 B1 FD | 	call	#__system__LTrim_S
00df4     2D 00 00 FF 
00df8     E0 E5 05 F1 | 	add	objptr, ##23520
00dfc     F2 FA 61 FC | 	wrlong	result1, objptr
00e00     2D 00 00 FF 
00e04     E0 E5 85 F1 | 	sub	objptr, ##23520
00e08     1C 00 90 FD | 	jmp	#LR__0039
00e0c                 | LR__0038
00e0c     25 01 00 FF 
00e10     C2 1F 06 F6 | 	mov	local01, ##@LR__4092
00e14     52 00 00 FF 
00e18     74 E4 05 F1 | 	add	objptr, ##42100
00e1c     F2 1E 62 FC | 	wrlong	local01, objptr
00e20     52 00 00 FF 
00e24     74 E4 85 F1 | 	sub	objptr, ##42100
00e28                 | LR__0039
00e28                 | ' 'print "line$=";line$
00e28                 | ' 'print "rest$=";rest$
00e28                 | ' 
00e28                 | ' 
00e28                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00e28     2D 00 00 FF 
00e2c     E8 E5 05 F1 | 	add	objptr, ##23528
00e30     F2 1E 02 FB | 	rdlong	local01, objptr
00e34     2D 00 00 FF 
00e38     E8 E5 85 F1 | 	sub	objptr, ##23528
00e3c     FF FF 7F FF 
00e40     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00e44     3C 00 90 5D |  if_ne	jmp	#LR__0040
00e48     52 00 00 FF 
00e4c     74 E4 05 F1 | 	add	objptr, ##42100
00e50     F2 12 02 FB | 	rdlong	arg01, objptr
00e54     52 00 00 FF 
00e58     74 E4 85 F1 | 	sub	objptr, ##42100
00e5c     25 01 00 FF 
00e60     C3 15 06 F6 | 	mov	arg02, ##@LR__4093
00e64     08 4D B1 FD | 	call	#__system___string_cmp
00e68     00 FA 0D F2 | 	cmp	result1, #0 wz
00e6c     2D 00 00 5F 
00e70     E8 E5 05 51 |  if_ne	add	objptr, ##23528
00e74     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00e78     2D 00 00 5F 
00e7c     E8 E5 85 51 |  if_ne	sub	objptr, ##23528
00e80     08 01 90 5D |  if_ne	jmp	#LR__0044
00e84                 | LR__0040
00e84                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00e84     2D 00 00 FF 
00e88     E8 E5 05 F1 | 	add	objptr, ##23528
00e8c     F2 1E 02 FB | 	rdlong	local01, objptr
00e90     2D 00 00 FF 
00e94     E8 E5 85 F1 | 	sub	objptr, ##23528
00e98     FF FF 7F FF 
00e9c     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00ea0     3C 00 90 5D |  if_ne	jmp	#LR__0041
00ea4     52 00 00 FF 
00ea8     74 E4 05 F1 | 	add	objptr, ##42100
00eac     F2 12 02 FB | 	rdlong	arg01, objptr
00eb0     52 00 00 FF 
00eb4     74 E4 85 F1 | 	sub	objptr, ##42100
00eb8     25 01 00 FF 
00ebc     C4 15 06 F6 | 	mov	arg02, ##@LR__4094
00ec0     AC 4C B1 FD | 	call	#__system___string_cmp
00ec4     00 FA 0D F2 | 	cmp	result1, #0 wz
00ec8     2D 00 00 AF 
00ecc     E8 E5 05 A1 |  if_e	add	objptr, ##23528
00ed0     F2 06 68 AC |  if_e	wrlong	#3, objptr
00ed4     2D 00 00 AF 
00ed8     E8 E5 85 A1 |  if_e	sub	objptr, ##23528
00edc     AC 00 90 AD |  if_e	jmp	#LR__0044
00ee0                 | LR__0041
00ee0                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00ee0     2D 00 00 FF 
00ee4     E8 E5 05 F1 | 	add	objptr, ##23528
00ee8     F2 1E 02 FB | 	rdlong	local01, objptr
00eec     2D 00 00 FF 
00ef0     E8 E5 85 F1 | 	sub	objptr, ##23528
00ef4     04 1E 0E F2 | 	cmp	local01, #4 wz
00ef8     3C 00 90 5D |  if_ne	jmp	#LR__0042
00efc     52 00 00 FF 
00f00     74 E4 05 F1 | 	add	objptr, ##42100
00f04     F2 12 02 FB | 	rdlong	arg01, objptr
00f08     52 00 00 FF 
00f0c     74 E4 85 F1 | 	sub	objptr, ##42100
00f10     25 01 00 FF 
00f14     C5 15 06 F6 | 	mov	arg02, ##@LR__4095
00f18     54 4C B1 FD | 	call	#__system___string_cmp
00f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
00f20     2D 00 00 5F 
00f24     E8 E5 05 51 |  if_ne	add	objptr, ##23528
00f28     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00f2c     2D 00 00 5F 
00f30     E8 E5 85 51 |  if_ne	sub	objptr, ##23528
00f34     54 00 90 5D |  if_ne	jmp	#LR__0044
00f38                 | LR__0042
00f38                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00f38     2D 00 00 FF 
00f3c     E8 E5 05 F1 | 	add	objptr, ##23528
00f40     F2 1E 02 FB | 	rdlong	local01, objptr
00f44     2D 00 00 FF 
00f48     E8 E5 85 F1 | 	sub	objptr, ##23528
00f4c     04 1E 0E F2 | 	cmp	local01, #4 wz
00f50     38 00 90 5D |  if_ne	jmp	#LR__0043
00f54     52 00 00 FF 
00f58     74 E4 05 F1 | 	add	objptr, ##42100
00f5c     F2 12 02 FB | 	rdlong	arg01, objptr
00f60     52 00 00 FF 
00f64     74 E4 85 F1 | 	sub	objptr, ##42100
00f68     25 01 00 FF 
00f6c     C6 15 06 F6 | 	mov	arg02, ##@LR__4096
00f70     FC 4B B1 FD | 	call	#__system___string_cmp
00f74     00 FA 0D F2 | 	cmp	result1, #0 wz
00f78     2D 00 00 AF 
00f7c     E8 E5 05 A1 |  if_e	add	objptr, ##23528
00f80     F2 04 68 AC |  if_e	wrlong	#2, objptr
00f84     2D 00 00 AF 
00f88     E8 E5 85 A1 |  if_e	sub	objptr, ##23528
00f8c                 | LR__0043
00f8c                 | LR__0044
00f8c     20 4E 05 F1 | 	add	fp, #32
00f90     A7 00 68 FC | 	wrlong	#0, fp
00f94     20 4E 85 F1 | 	sub	fp, #32
00f98     00 24 06 F6 | 	mov	local04, #0
00f9c     01 3A 06 F6 | 	mov	local15, #1
00fa0                 | ' 
00fa0                 | ' ' 1b: find separators
00fa0                 | ' 
00fa0                 | ' 107
00fa0                 | ' separators(0)=0
00fa0                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00fa0                 | LR__0045
00fa0     01 24 06 F1 | 	add	local04, #1
00fa4     2D 00 00 FF 
00fa8     E0 E5 05 F1 | 	add	objptr, ##23520
00fac     F2 12 02 FB | 	rdlong	arg01, objptr
00fb0     2D 00 00 FF 
00fb4     E0 E5 85 F1 | 	sub	objptr, ##23520
00fb8     12 15 02 F6 | 	mov	arg02, local04
00fbc     01 16 06 F6 | 	mov	arg03, #1
00fc0     AC 6C B1 FD | 	call	#__system__Mid_S
00fc4     52 00 00 FF 
00fc8     78 E4 05 F1 | 	add	objptr, ##42104
00fcc     F2 FA 61 FC | 	wrlong	result1, objptr
00fd0                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00fd0     FD 12 02 F6 | 	mov	arg01, result1
00fd4     52 00 00 FF 
00fd8     78 E4 85 F1 | 	sub	objptr, ##42104
00fdc     1C 1C B0 FD | 	call	#_isseparator
00fe0     00 FA 0D F2 | 	cmp	result1, #0 wz
00fe4     1C 00 90 AD |  if_e	jmp	#LR__0046
00fe8     1D 27 02 F6 | 	mov	local05, local15
00fec     02 26 66 F0 | 	shl	local05, #2
00ff0     20 4E 05 F1 | 	add	fp, #32
00ff4     A7 26 02 F1 | 	add	local05, fp
00ff8     13 25 62 FC | 	wrlong	local04, local05
00ffc     01 3A 06 F1 | 	add	local15, #1
01000     20 4E 85 F1 | 	sub	fp, #32
01004                 | LR__0046
01004     52 00 00 FF 
01008     6C E4 05 F1 | 	add	objptr, ##42092
0100c     F2 1E 02 FB | 	rdlong	local01, objptr
01010     52 00 00 FF 
01014     6C E4 85 F1 | 	sub	objptr, ##42092
01018     0F 25 5A F2 | 	cmps	local04, local01 wcz
0101c     80 FF 9F ED |  if_be	jmp	#LR__0045
01020     1D 27 02 F6 | 	mov	local05, local15
01024     02 26 66 F0 | 	shl	local05, #2
01028     20 4E 05 F1 | 	add	fp, #32
0102c     A7 26 02 F1 | 	add	local05, fp
01030     13 25 62 FC | 	wrlong	local04, local05
01034     00 3C 06 F6 | 	mov	local16, #0
01038                 | ' for i=0 to j-1 
01038     00 24 06 F6 | 	mov	local04, #0
0103c     1D 3F 02 F6 | 	mov	local17, local15
01040     20 4E 85 F1 | 	sub	fp, #32
01044                 | LR__0047
01044     1F 25 52 F2 | 	cmps	local04, local17 wc
01048     88 01 90 3D |  if_ae	jmp	#LR__0051
0104c     12 27 02 F6 | 	mov	local05, local04
01050     02 26 66 F0 | 	shl	local05, #2
01054     20 4E 05 F1 | 	add	fp, #32
01058     A7 26 02 F1 | 	add	local05, fp
0105c     13 29 02 FB | 	rdlong	local06, local05
01060     52 00 00 FF 
01064     80 E4 05 F1 | 	add	objptr, ##42112
01068     F2 28 62 FC | 	wrlong	local06, objptr
0106c     12 27 02 F6 | 	mov	local05, local04
01070     01 26 06 F1 | 	add	local05, #1
01074     02 26 66 F0 | 	shl	local05, #2
01078     A7 30 02 F6 | 	mov	local10, fp
0107c     A7 26 02 F1 | 	add	local05, fp
01080     13 29 02 FB | 	rdlong	local06, local05
01084     04 E4 05 F1 | 	add	objptr, #4
01088     F2 28 62 FC | 	wrlong	local06, objptr
0108c                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
0108c     04 E4 85 F1 | 	sub	objptr, #4
01090     F2 1E 02 FB | 	rdlong	local01, objptr
01094     52 00 00 FF 
01098     80 E4 85 F1 | 	sub	objptr, ##42112
0109c     01 1E 56 F2 | 	cmps	local01, #1 wc
010a0     20 4E 85 F1 | 	sub	fp, #32
010a4     84 00 90 CD |  if_b	jmp	#LR__0049
010a8     2D 00 00 FF 
010ac     E0 E5 05 F1 | 	add	objptr, ##23520
010b0     F2 12 02 FB | 	rdlong	arg01, objptr
010b4     24 00 00 FF 
010b8     A0 E4 05 F1 | 	add	objptr, ##18592
010bc     F2 14 02 FB | 	rdlong	arg02, objptr
010c0     52 00 00 FF 
010c4     80 E4 85 F1 | 	sub	objptr, ##42112
010c8     01 16 06 F6 | 	mov	arg03, #1
010cc     A0 6B B1 FD | 	call	#__system__Mid_S
010d0     52 00 00 FF 
010d4     88 E4 05 F1 | 	add	objptr, ##42120
010d8     F2 FA 61 FC | 	wrlong	result1, objptr
010dc     52 00 00 FF 
010e0     88 E4 85 F1 | 	sub	objptr, ##42120
010e4     FD 12 02 F6 | 	mov	arg01, result1
010e8     25 01 00 FF 
010ec     C7 15 06 F6 | 	mov	arg02, ##@LR__4097
010f0     7C 4A B1 FD | 	call	#__system___string_cmp
010f4     00 FA 0D F2 | 	cmp	result1, #0 wz
010f8     30 00 90 AD |  if_e	jmp	#LR__0048
010fc     1E 31 02 F6 | 	mov	local10, local16
01100     03 30 66 F0 | 	shl	local10, #3
01104     2B 00 00 FF 
01108     D0 E5 05 F1 | 	add	objptr, ##22480
0110c     F2 30 02 F1 | 	add	local10, objptr
01110     26 00 00 FF 
01114     B8 E4 05 F1 | 	add	objptr, ##19640
01118     F2 2A 02 FB | 	rdlong	local07, objptr
0111c     52 00 00 FF 
01120     88 E4 85 F1 | 	sub	objptr, ##42120
01124     18 2B 62 FC | 	wrlong	local07, local10
01128     01 3C 06 F1 | 	add	local16, #1
0112c                 | LR__0048
0112c                 | LR__0049
0112c     2D 00 00 FF 
01130     E0 E5 05 F1 | 	add	objptr, ##23520
01134     F2 12 02 FB | 	rdlong	arg01, objptr
01138     24 00 00 FF 
0113c     A0 E4 05 F1 | 	add	objptr, ##18592
01140     F2 14 02 FB | 	rdlong	arg02, objptr
01144     01 14 06 F1 | 	add	arg02, #1
01148     04 E4 05 F1 | 	add	objptr, #4
0114c     F2 16 02 FB | 	rdlong	arg03, objptr
01150     04 E4 85 F1 | 	sub	objptr, #4
01154     F2 32 02 FB | 	rdlong	local11, objptr
01158     52 00 00 FF 
0115c     80 E4 85 F1 | 	sub	objptr, ##42112
01160     19 35 02 F6 | 	mov	local12, local11
01164     1A 17 82 F1 | 	sub	arg03, local12
01168     01 16 86 F1 | 	sub	arg03, #1
0116c     00 6B B1 FD | 	call	#__system__Mid_S
01170     52 00 00 FF 
01174     88 E4 05 F1 | 	add	objptr, ##42120
01178     F2 FA 61 FC | 	wrlong	result1, objptr
0117c     52 00 00 FF 
01180     88 E4 85 F1 | 	sub	objptr, ##42120
01184     FD 12 02 F6 | 	mov	arg01, result1
01188     25 01 00 FF 
0118c     C8 15 06 F6 | 	mov	arg02, ##@LR__4098
01190     DC 49 B1 FD | 	call	#__system___string_cmp
01194     00 FA 0D F2 | 	cmp	result1, #0 wz
01198     30 00 90 AD |  if_e	jmp	#LR__0050
0119c     1E 31 02 F6 | 	mov	local10, local16
011a0     03 30 66 F0 | 	shl	local10, #3
011a4     2B 00 00 FF 
011a8     D0 E5 05 F1 | 	add	objptr, ##22480
011ac     F2 30 02 F1 | 	add	local10, objptr
011b0     26 00 00 FF 
011b4     B8 E4 05 F1 | 	add	objptr, ##19640
011b8     F2 2A 02 FB | 	rdlong	local07, objptr
011bc     52 00 00 FF 
011c0     88 E4 85 F1 | 	sub	objptr, ##42120
011c4     18 2B 62 FC | 	wrlong	local07, local10
011c8     01 3C 06 F1 | 	add	local16, #1
011cc                 | LR__0050
011cc     01 24 06 F1 | 	add	local04, #1
011d0     70 FE 9F FD | 	jmp	#LR__0047
011d4                 | LR__0051
011d4     00 24 06 F6 | 	mov	local04, #0
011d8                 | ' 
011d8                 | ' ' 1d : find strings
011d8                 | ' 
011d8                 | ' i=0
011d8                 | ' do
011d8                 | LR__0052
011d8                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
011d8     12 29 02 F6 | 	mov	local06, local04
011dc     03 28 66 F0 | 	shl	local06, #3
011e0     2B 00 00 FF 
011e4     D0 E5 05 F1 | 	add	objptr, ##22480
011e8     F2 28 02 F1 | 	add	local06, objptr
011ec     14 13 02 FB | 	rdlong	arg01, local06
011f0     25 01 00 FF 
011f4     C9 15 06 F6 | 	mov	arg02, ##@LR__4099
011f8     2B 00 00 FF 
011fc     D0 E5 85 F1 | 	sub	objptr, ##22480
01200     6C 49 B1 FD | 	call	#__system___string_cmp
01204     00 FA 0D F2 | 	cmp	result1, #0 wz
01208     01 24 06 51 |  if_ne	add	local04, #1
0120c     50 01 90 5D |  if_ne	jmp	#LR__0057
01210     12 41 02 F6 | 	mov	local18, local04
01214                 | LR__0053
01214     12 31 02 F6 | 	mov	local10, local04
01218     01 30 06 F1 | 	add	local10, #1
0121c     03 30 66 F0 | 	shl	local10, #3
01220     2B 00 00 FF 
01224     D0 E5 05 F1 | 	add	objptr, ##22480
01228     F2 30 02 F1 | 	add	local10, objptr
0122c     18 33 02 FB | 	rdlong	local11, local10
01230     26 00 00 FF 
01234     B8 E4 05 F1 | 	add	objptr, ##19640
01238     F2 32 62 FC | 	wrlong	local11, objptr
0123c     20 31 02 F6 | 	mov	local10, local18
01240     03 30 66 F0 | 	shl	local10, #3
01244     26 00 00 FF 
01248     B8 E4 85 F1 | 	sub	objptr, ##19640
0124c     F2 30 02 F1 | 	add	local10, objptr
01250     20 39 02 F6 | 	mov	local14, local18
01254     03 38 66 F0 | 	shl	local14, #3
01258     F2 38 02 F1 | 	add	local14, objptr
0125c     1C 13 02 FB | 	rdlong	arg01, local14
01260     2B 00 00 FF 
01264     D0 E5 85 F1 | 	sub	objptr, ##22480
01268     19 35 02 F6 | 	mov	local12, local11
0126c     1A 15 02 F6 | 	mov	arg02, local12
01270     30 49 B1 FD | 	call	#__system___string_concat
01274     18 FB 61 FC | 	wrlong	result1, local10
01278     12 3B 02 F6 | 	mov	local15, local04
0127c     01 3A 06 F1 | 	add	local15, #1
01280     1E 43 02 F6 | 	mov	local19, local16
01284     01 42 06 F1 | 	add	local19, #1
01288     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
0128c                 | LR__0054
0128c     21 3B 52 F2 | 	cmps	local15, local19 wc
01290     70 00 90 3D |  if_ae	jmp	#LR__0056
01294     1D 29 02 F6 | 	mov	local06, local15
01298     01 28 06 F1 | 	add	local06, #1
0129c     03 28 66 F0 | 	shl	local06, #3
012a0     2B 00 00 FF 
012a4     D0 E5 05 F1 | 	add	objptr, ##22480
012a8     F2 28 02 F1 | 	add	local06, objptr
012ac     14 1F 02 FB | 	rdlong	local01, local06
012b0     1D 2B 02 F6 | 	mov	local07, local15
012b4     01 2A 06 F1 | 	add	local07, #1
012b8     03 2A 66 F0 | 	shl	local07, #3
012bc     F2 2A 02 F1 | 	add	local07, objptr
012c0     04 2A 06 F1 | 	add	local07, #4
012c4     15 27 02 FB | 	rdlong	local05, local07
012c8     1D 2B 02 F6 | 	mov	local07, local15
012cc     03 2A 66 F0 | 	shl	local07, #3
012d0     F2 34 02 F6 | 	mov	local12, objptr
012d4     F2 2A 02 F1 | 	add	local07, objptr
012d8     15 1F 62 FC | 	wrlong	local01, local07
012dc     1D 33 02 F6 | 	mov	local11, local15
012e0     19 37 02 F6 | 	mov	local13, local11
012e4     03 36 66 F0 | 	shl	local13, #3
012e8     F2 36 02 F1 | 	add	local13, objptr
012ec     04 36 06 F1 | 	add	local13, #4
012f0     1B 27 62 FC | 	wrlong	local05, local13
012f4     01 3A 06 F1 | 	add	local15, #1
012f8     2B 00 00 FF 
012fc     D0 E5 85 F1 | 	sub	objptr, ##22480
01300     88 FF 9F FD | 	jmp	#LR__0054
01304                 | LR__0055
01304                 | LR__0056
01304     01 3C 86 F1 | 	sub	local16, #1
01308     52 00 00 FF 
0130c     88 E4 05 F1 | 	add	objptr, ##42120
01310     F2 12 02 FB | 	rdlong	arg01, objptr
01314     52 00 00 FF 
01318     88 E4 85 F1 | 	sub	objptr, ##42120
0131c     25 01 00 FF 
01320     CB 15 06 F6 | 	mov	arg02, ##@LR__4100
01324     48 48 B1 FD | 	call	#__system___string_cmp
01328     00 FA 0D F2 | 	cmp	result1, #0 wz
0132c     1E 25 52 52 |  if_ne	cmps	local04, local16 wc
01330     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0053
01334                 | '   if p$<>"""" then k+=1:i+=1
01334     52 00 00 FF 
01338     88 E4 05 F1 | 	add	objptr, ##42120
0133c     F2 12 02 FB | 	rdlong	arg01, objptr
01340     52 00 00 FF 
01344     88 E4 85 F1 | 	sub	objptr, ##42120
01348     25 01 00 FF 
0134c     CD 15 06 F6 | 	mov	arg02, ##@LR__4101
01350     1C 48 B1 FD | 	call	#__system___string_cmp
01354     00 FA 0D F2 | 	cmp	result1, #0 wz
01358     01 3C 06 51 |  if_ne	add	local16, #1
0135c     01 24 06 51 |  if_ne	add	local04, #1
01360                 | LR__0057
01360     1E 25 52 F2 | 	cmps	local04, local16 wc
01364     70 FE 9F CD |  if_b	jmp	#LR__0052
01368     00 24 06 F6 | 	mov	local04, #0
0136c                 | ' 
0136c                 | ' ' 1e : concatenate strings if "" detected between
0136c                 | '  
0136c                 | ' i=0 : do
0136c                 | LR__0058
0136c                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
0136c     12 29 02 F6 | 	mov	local06, local04
01370     03 28 66 F0 | 	shl	local06, #3
01374     2B 00 00 FF 
01378     D0 E5 05 F1 | 	add	objptr, ##22480
0137c     F2 28 02 F1 | 	add	local06, objptr
01380     14 13 02 FB | 	rdlong	arg01, local06
01384     01 14 06 F6 | 	mov	arg02, #1
01388     2B 00 00 FF 
0138c     D0 E5 85 F1 | 	sub	objptr, ##22480
01390     4C 68 B1 FD | 	call	#__system__Right_S
01394     FD 12 02 F6 | 	mov	arg01, result1
01398     25 01 00 FF 
0139c     CF 15 06 F6 | 	mov	arg02, ##@LR__4102
013a0     CC 47 B1 FD | 	call	#__system___string_cmp
013a4     00 FA 0D F2 | 	cmp	result1, #0 wz
013a8     78 01 90 5D |  if_ne	jmp	#LR__0064
013ac     12 2B 02 F6 | 	mov	local07, local04
013b0     01 2A 06 F1 | 	add	local07, #1
013b4     03 2A 66 F0 | 	shl	local07, #3
013b8     2B 00 00 FF 
013bc     D0 E5 05 F1 | 	add	objptr, ##22480
013c0     F2 34 02 F6 | 	mov	local12, objptr
013c4     F2 2A 02 F1 | 	add	local07, objptr
013c8     15 13 02 FB | 	rdlong	arg01, local07
013cc     01 14 06 F6 | 	mov	arg02, #1
013d0     2B 00 00 FF 
013d4     D0 E5 85 F1 | 	sub	objptr, ##22480
013d8     7C 67 B1 FD | 	call	#__system__Left_S
013dc     FD 12 02 F6 | 	mov	arg01, result1
013e0     25 01 00 FF 
013e4     D1 15 06 F6 | 	mov	arg02, ##@LR__4103
013e8     84 47 B1 FD | 	call	#__system___string_cmp
013ec     00 FA 0D F2 | 	cmp	result1, #0 wz
013f0     30 01 90 5D |  if_ne	jmp	#LR__0064
013f4     12 31 02 F6 | 	mov	local10, local04
013f8     03 30 66 F0 | 	shl	local10, #3
013fc     2B 00 00 FF 
01400     D0 E5 05 F1 | 	add	objptr, ##22480
01404     F2 30 02 F1 | 	add	local10, objptr
01408     12 39 02 F6 | 	mov	local14, local04
0140c     03 38 66 F0 | 	shl	local14, #3
01410     F2 38 02 F1 | 	add	local14, objptr
01414     1C 2B 02 FB | 	rdlong	local07, local14
01418     12 37 02 F6 | 	mov	local13, local04
0141c     01 36 06 F1 | 	add	local13, #1
01420     03 36 66 F0 | 	shl	local13, #3
01424     F2 36 02 F1 | 	add	local13, objptr
01428     1B 35 02 FB | 	rdlong	local12, local13
0142c     12 45 02 F6 | 	mov	local20, local04
01430     01 44 06 F1 | 	add	local20, #1
01434     22 47 02 F6 | 	mov	local21, local20
01438     03 46 66 F0 | 	shl	local21, #3
0143c     F2 48 02 F6 | 	mov	local22, objptr
01440     F2 46 02 F1 | 	add	local21, objptr
01444     23 13 02 FB | 	rdlong	arg01, local21
01448     2B 00 00 FF 
0144c     D0 E5 85 F1 | 	sub	objptr, ##22480
01450     09 2D 02 F6 | 	mov	local08, arg01
01454     97 06 48 FB | 	callpa	#(@LR__0060-@LR__0059)>>2,fcache_load_ptr_
01458                 | LR__0059
01458     16 FB C9 FA | 	rdbyte	result1, local08 wz
0145c     01 2C 06 51 |  if_ne	add	local08, #1
01460     F4 FF 9F 5D |  if_ne	jmp	#LR__0059
01464                 | LR__0060
01464     09 2D 82 F1 | 	sub	local08, arg01
01468     16 33 02 F6 | 	mov	local11, local08
0146c     01 32 86 F1 | 	sub	local11, #1
01470     1A 13 02 F6 | 	mov	arg01, local12
01474     19 15 02 F6 | 	mov	arg02, local11
01478     64 67 B1 FD | 	call	#__system__Right_S
0147c     FD 34 02 F6 | 	mov	local12, result1
01480     15 13 02 F6 | 	mov	arg01, local07
01484     1A 15 02 F6 | 	mov	arg02, local12
01488     18 47 B1 FD | 	call	#__system___string_concat
0148c     18 FB 61 FC | 	wrlong	result1, local10
01490                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
01490     12 3B 02 F6 | 	mov	local15, local04
01494     01 3A 06 F1 | 	add	local15, #1
01498     1E 4B 02 F6 | 	mov	local23, local16
0149c     01 4A 06 F1 | 	add	local23, #1
014a0     97 3C 48 FB | 	callpa	#(@LR__0062-@LR__0061)>>2,fcache_load_ptr_
014a4                 | LR__0061
014a4     25 3B 52 F2 | 	cmps	local15, local23 wc
014a8     70 00 90 3D |  if_ae	jmp	#LR__0063
014ac     1D 29 02 F6 | 	mov	local06, local15
014b0     01 28 06 F1 | 	add	local06, #1
014b4     03 28 66 F0 | 	shl	local06, #3
014b8     2B 00 00 FF 
014bc     D0 E5 05 F1 | 	add	objptr, ##22480
014c0     F2 28 02 F1 | 	add	local06, objptr
014c4     14 1F 02 FB | 	rdlong	local01, local06
014c8     1D 2B 02 F6 | 	mov	local07, local15
014cc     01 2A 06 F1 | 	add	local07, #1
014d0     03 2A 66 F0 | 	shl	local07, #3
014d4     F2 2A 02 F1 | 	add	local07, objptr
014d8     04 2A 06 F1 | 	add	local07, #4
014dc     15 27 02 FB | 	rdlong	local05, local07
014e0     1D 2B 02 F6 | 	mov	local07, local15
014e4     03 2A 66 F0 | 	shl	local07, #3
014e8     F2 34 02 F6 | 	mov	local12, objptr
014ec     F2 2A 02 F1 | 	add	local07, objptr
014f0     15 1F 62 FC | 	wrlong	local01, local07
014f4     1D 33 02 F6 | 	mov	local11, local15
014f8     19 37 02 F6 | 	mov	local13, local11
014fc     03 36 66 F0 | 	shl	local13, #3
01500     F2 36 02 F1 | 	add	local13, objptr
01504     04 36 06 F1 | 	add	local13, #4
01508     1B 27 62 FC | 	wrlong	local05, local13
0150c     01 3A 06 F1 | 	add	local15, #1
01510     2B 00 00 FF 
01514     D0 E5 85 F1 | 	sub	objptr, ##22480
01518     88 FF 9F FD | 	jmp	#LR__0061
0151c                 | LR__0062
0151c                 | LR__0063
0151c     01 24 86 F1 | 	sub	local04, #1
01520     01 3C 86 F1 | 	sub	local16, #1
01524                 | LR__0064
01524     01 24 06 F1 | 	add	local04, #1
01528     1E 25 52 F2 | 	cmps	local04, local16 wc
0152c     3C FE 9F CD |  if_b	jmp	#LR__0058
01530     00 24 06 F6 | 	mov	local04, #0
01534                 | '  
01534                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
01534                 | '  
01534                 | ' i=0 : do
01534                 | LR__0065
01534     12 31 02 F6 | 	mov	local10, local04
01538     03 30 66 F0 | 	shl	local10, #3
0153c     2B 00 00 FF 
01540     D0 E5 05 F1 | 	add	objptr, ##22480
01544     F2 30 02 F1 | 	add	local10, objptr
01548     18 2B 02 FB | 	rdlong	local07, local10
0154c     26 00 00 FF 
01550     C0 E4 05 F1 | 	add	objptr, ##19648
01554     F2 2A 62 FC | 	wrlong	local07, objptr
01558     12 31 02 F6 | 	mov	local10, local04
0155c     01 30 06 F1 | 	add	local10, #1
01560     03 30 66 F0 | 	shl	local10, #3
01564     26 00 00 FF 
01568     C0 E4 85 F1 | 	sub	objptr, ##19648
0156c     F2 30 02 F1 | 	add	local10, objptr
01570     18 2B 02 FB | 	rdlong	local07, local10
01574     26 00 00 FF 
01578     C4 E4 05 F1 | 	add	objptr, ##19652
0157c     F2 2A 62 FC | 	wrlong	local07, objptr
01580                 | '   if ((s1$=">" orelse s1$=">" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
01580     04 E4 85 F1 | 	sub	objptr, #4
01584     F2 12 02 FB | 	rdlong	arg01, objptr
01588     52 00 00 FF 
0158c     90 E4 85 F1 | 	sub	objptr, ##42128
01590     25 01 00 FF 
01594     D3 15 06 F6 | 	mov	arg02, ##@LR__4104
01598     D4 45 B1 FD | 	call	#__system___string_cmp
0159c     00 FA 0D F2 | 	cmp	result1, #0 wz
015a0     04 01 90 AD |  if_e	jmp	#LR__0066
015a4     52 00 00 FF 
015a8     90 E4 05 F1 | 	add	objptr, ##42128
015ac     F2 12 02 FB | 	rdlong	arg01, objptr
015b0     52 00 00 FF 
015b4     90 E4 85 F1 | 	sub	objptr, ##42128
015b8     25 01 00 FF 
015bc     D5 15 06 F6 | 	mov	arg02, ##@LR__4105
015c0     AC 45 B1 FD | 	call	#__system___string_cmp
015c4     FD 26 0A F6 | 	mov	local05, result1 wz
015c8     DC 00 90 AD |  if_e	jmp	#LR__0066
015cc     52 00 00 FF 
015d0     90 E4 05 F1 | 	add	objptr, ##42128
015d4     F2 12 02 FB | 	rdlong	arg01, objptr
015d8     52 00 00 FF 
015dc     90 E4 85 F1 | 	sub	objptr, ##42128
015e0     25 01 00 FF 
015e4     D7 15 06 F6 | 	mov	arg02, ##@LR__4106
015e8     84 45 B1 FD | 	call	#__system___string_cmp
015ec     00 FA 0D F2 | 	cmp	result1, #0 wz
015f0     B4 00 90 AD |  if_e	jmp	#LR__0066
015f4     52 00 00 FF 
015f8     90 E4 05 F1 | 	add	objptr, ##42128
015fc     F2 12 02 FB | 	rdlong	arg01, objptr
01600     52 00 00 FF 
01604     90 E4 85 F1 | 	sub	objptr, ##42128
01608     25 01 00 FF 
0160c     D9 35 06 F6 | 	mov	local12, ##@LR__4107
01610     1A 15 02 F6 | 	mov	arg02, local12
01614     58 45 B1 FD | 	call	#__system___string_cmp
01618     00 FA 0D F2 | 	cmp	result1, #0 wz
0161c     88 00 90 AD |  if_e	jmp	#LR__0066
01620     52 00 00 FF 
01624     90 E4 05 F1 | 	add	objptr, ##42128
01628     F2 12 02 FB | 	rdlong	arg01, objptr
0162c     52 00 00 FF 
01630     90 E4 85 F1 | 	sub	objptr, ##42128
01634     25 01 00 FF 
01638     DB 33 06 F6 | 	mov	local11, ##@LR__4108
0163c     19 35 02 F6 | 	mov	local12, local11
01640     1A 15 02 F6 | 	mov	arg02, local12
01644     28 45 B1 FD | 	call	#__system___string_cmp
01648     00 FA 0D F2 | 	cmp	result1, #0 wz
0164c     58 00 90 AD |  if_e	jmp	#LR__0066
01650     52 00 00 FF 
01654     90 E4 05 F1 | 	add	objptr, ##42128
01658     F2 12 02 FB | 	rdlong	arg01, objptr
0165c     52 00 00 FF 
01660     90 E4 85 F1 | 	sub	objptr, ##42128
01664     25 01 00 FF 
01668     DD 33 06 F6 | 	mov	local11, ##@LR__4109
0166c     19 15 02 F6 | 	mov	arg02, local11
01670     FC 44 B1 FD | 	call	#__system___string_cmp
01674     FD 34 0A F6 | 	mov	local12, result1 wz
01678     2C 00 90 AD |  if_e	jmp	#LR__0066
0167c     52 00 00 FF 
01680     90 E4 05 F1 | 	add	objptr, ##42128
01684     F2 12 02 FB | 	rdlong	arg01, objptr
01688     52 00 00 FF 
0168c     90 E4 85 F1 | 	sub	objptr, ##42128
01690     25 01 00 FF 
01694     DF 39 06 F6 | 	mov	local14, ##@LR__4110
01698     1C 15 02 F6 | 	mov	arg02, local14
0169c     D0 44 B1 FD | 	call	#__system___string_cmp
016a0     FD 32 0A F6 | 	mov	local11, result1 wz
016a4     30 00 90 5D |  if_ne	jmp	#LR__0067
016a8                 | LR__0066
016a8     52 00 00 FF 
016ac     94 E4 05 F1 | 	add	objptr, ##42132
016b0     F2 12 02 FB | 	rdlong	arg01, objptr
016b4     52 00 00 FF 
016b8     94 E4 85 F1 | 	sub	objptr, ##42132
016bc     25 01 00 FF 
016c0     E1 4D 06 F6 | 	mov	local24, ##@LR__4111
016c4     26 37 02 F6 | 	mov	local13, local24
016c8     1B 15 02 F6 | 	mov	arg02, local13
016cc     A0 44 B1 FD | 	call	#__system___string_cmp
016d0     FD 38 0A F6 | 	mov	local14, result1 wz
016d4     18 01 90 AD |  if_e	jmp	#LR__0070
016d8                 | LR__0067
016d8     52 00 00 FF 
016dc     90 E4 05 F1 | 	add	objptr, ##42128
016e0     F2 12 02 FB | 	rdlong	arg01, objptr
016e4     52 00 00 FF 
016e8     90 E4 85 F1 | 	sub	objptr, ##42128
016ec     25 01 00 FF 
016f0     E3 4D 06 F6 | 	mov	local24, ##@LR__4112
016f4     26 15 02 F6 | 	mov	arg02, local24
016f8     74 44 B1 FD | 	call	#__system___string_cmp
016fc     FD 36 0A F6 | 	mov	local13, result1 wz
01700     30 00 90 5D |  if_ne	jmp	#LR__0068
01704     52 00 00 FF 
01708     94 E4 05 F1 | 	add	objptr, ##42132
0170c     F2 12 02 FB | 	rdlong	arg01, objptr
01710     52 00 00 FF 
01714     94 E4 85 F1 | 	sub	objptr, ##42132
01718     25 01 00 FF 
0171c     E5 47 06 F6 | 	mov	local21, ##@LR__4113
01720     23 45 02 F6 | 	mov	local20, local21
01724     22 15 02 F6 | 	mov	arg02, local20
01728     44 44 B1 FD | 	call	#__system___string_cmp
0172c     FD 4C 0A F6 | 	mov	local24, result1 wz
01730     BC 00 90 AD |  if_e	jmp	#LR__0070
01734                 | LR__0068
01734     52 00 00 FF 
01738     90 E4 05 F1 | 	add	objptr, ##42128
0173c     F2 12 02 FB | 	rdlong	arg01, objptr
01740     52 00 00 FF 
01744     90 E4 85 F1 | 	sub	objptr, ##42128
01748     25 01 00 FF 
0174c     E7 47 06 F6 | 	mov	local21, ##@LR__4114
01750     23 15 02 F6 | 	mov	arg02, local21
01754     18 44 B1 FD | 	call	#__system___string_cmp
01758     FD 44 0A F6 | 	mov	local20, result1 wz
0175c     30 00 90 5D |  if_ne	jmp	#LR__0069
01760     52 00 00 FF 
01764     94 E4 05 F1 | 	add	objptr, ##42132
01768     F2 12 02 FB | 	rdlong	arg01, objptr
0176c     52 00 00 FF 
01770     94 E4 85 F1 | 	sub	objptr, ##42132
01774     25 01 00 FF 
01778     E9 4F 06 F6 | 	mov	local25, ##@LR__4115
0177c     27 49 02 F6 | 	mov	local22, local25
01780     24 15 02 F6 | 	mov	arg02, local22
01784     E8 43 B1 FD | 	call	#__system___string_cmp
01788     FD 46 0A F6 | 	mov	local21, result1 wz
0178c     60 00 90 AD |  if_e	jmp	#LR__0070
01790                 | LR__0069
01790     52 00 00 FF 
01794     90 E4 05 F1 | 	add	objptr, ##42128
01798     F2 12 02 FB | 	rdlong	arg01, objptr
0179c     52 00 00 FF 
017a0     90 E4 85 F1 | 	sub	objptr, ##42128
017a4     25 01 00 FF 
017a8     EB 51 06 F6 | 	mov	local26, ##@LR__4116
017ac     28 4F 02 F6 | 	mov	local25, local26
017b0     27 15 02 F6 | 	mov	arg02, local25
017b4     B8 43 B1 FD | 	call	#__system___string_cmp
017b8     FD 48 0A F6 | 	mov	local22, result1 wz
017bc     10 01 90 5D |  if_ne	jmp	#LR__0074
017c0     52 00 00 FF 
017c4     94 E4 05 F1 | 	add	objptr, ##42132
017c8     F2 12 02 FB | 	rdlong	arg01, objptr
017cc     52 00 00 FF 
017d0     94 E4 85 F1 | 	sub	objptr, ##42132
017d4     25 01 00 FF 
017d8     ED 53 06 F6 | 	mov	local27, ##@LR__4117
017dc     29 51 02 F6 | 	mov	local26, local27
017e0     28 15 02 F6 | 	mov	arg02, local26
017e4     88 43 B1 FD | 	call	#__system___string_cmp
017e8     FD 4E 0A F6 | 	mov	local25, result1 wz
017ec     E0 00 90 5D |  if_ne	jmp	#LR__0074
017f0                 | LR__0070
017f0     12 31 02 F6 | 	mov	local10, local04
017f4     03 30 66 F0 | 	shl	local10, #3
017f8     2B 00 00 FF 
017fc     D0 E5 05 F1 | 	add	objptr, ##22480
01800     F2 30 02 F1 | 	add	local10, objptr
01804     26 00 00 FF 
01808     C0 E4 05 F1 | 	add	objptr, ##19648
0180c     F2 12 02 FB | 	rdlong	arg01, objptr
01810     04 E4 05 F1 | 	add	objptr, #4
01814     F2 32 02 FB | 	rdlong	local11, objptr
01818     52 00 00 FF 
0181c     94 E4 85 F1 | 	sub	objptr, ##42132
01820     19 35 02 F6 | 	mov	local12, local11
01824     1A 15 02 F6 | 	mov	arg02, local12
01828     78 43 B1 FD | 	call	#__system___string_concat
0182c     18 FB 61 FC | 	wrlong	result1, local10
01830                 | '     lparts(i).part$=s1$+s2$
01830                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
01830     12 3B 02 F6 | 	mov	local15, local04
01834     01 3A 06 F1 | 	add	local15, #1
01838     1E 55 02 F6 | 	mov	local28, local16
0183c     01 54 06 F1 | 	add	local28, #1
01840     97 42 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
01844                 | LR__0071
01844     2A 3B 52 F2 | 	cmps	local15, local28 wc
01848     7C 00 90 3D |  if_ae	jmp	#LR__0073
0184c     1D 29 02 F6 | 	mov	local06, local15
01850     01 28 06 F1 | 	add	local06, #1
01854     03 28 66 F0 | 	shl	local06, #3
01858     2B 00 00 FF 
0185c     D0 E5 05 F1 | 	add	objptr, ##22480
01860     F2 28 02 F1 | 	add	local06, objptr
01864     14 1F 02 FB | 	rdlong	local01, local06
01868     1D 2B 02 F6 | 	mov	local07, local15
0186c     01 2A 06 F1 | 	add	local07, #1
01870     03 2A 66 F0 | 	shl	local07, #3
01874     F2 2A 02 F1 | 	add	local07, objptr
01878     04 2A 06 F1 | 	add	local07, #4
0187c     15 27 02 FB | 	rdlong	local05, local07
01880     1D 2B 02 F6 | 	mov	local07, local15
01884     03 2A 66 F0 | 	shl	local07, #3
01888     F2 34 02 F6 | 	mov	local12, objptr
0188c     F2 2A 02 F1 | 	add	local07, objptr
01890     15 1F 62 FC | 	wrlong	local01, local07
01894     1D 33 02 F6 | 	mov	local11, local15
01898     19 39 02 F6 | 	mov	local14, local11
0189c     1C 37 02 F6 | 	mov	local13, local14
018a0     03 36 66 F0 | 	shl	local13, #3
018a4     F2 4C 02 F6 | 	mov	local24, objptr
018a8     F2 36 02 F1 | 	add	local13, objptr
018ac     04 36 06 F1 | 	add	local13, #4
018b0     1B 27 62 FC | 	wrlong	local05, local13
018b4     04 36 86 F1 | 	sub	local13, #4
018b8     01 3A 06 F1 | 	add	local15, #1
018bc     2B 00 00 FF 
018c0     D0 E5 85 F1 | 	sub	objptr, ##22480
018c4     7C FF 9F FD | 	jmp	#LR__0071
018c8                 | LR__0072
018c8                 | LR__0073
018c8     01 24 86 F1 | 	sub	local04, #1
018cc     01 3C 86 F1 | 	sub	local16, #1
018d0                 | LR__0074
018d0     01 24 06 F1 | 	add	local04, #1
018d4     1E 25 52 F2 | 	cmps	local04, local16 wc
018d8     58 FC 9F CD |  if_b	jmp	#LR__0065
018dc                 | '  
018dc                 | ' ' 1f : now remove parts that are spaces
018dc                 | ' 
018dc                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
018dc     00 24 06 F6 | 	mov	local04, #0
018e0     1E 57 02 F6 | 	mov	local29, local16
018e4     01 56 06 F1 | 	add	local29, #1
018e8                 | LR__0075
018e8     2B 25 52 F2 | 	cmps	local04, local29 wc
018ec     50 00 90 3D |  if_ae	jmp	#LR__0076
018f0     12 31 02 F6 | 	mov	local10, local04
018f4     03 30 66 F0 | 	shl	local10, #3
018f8     2B 00 00 FF 
018fc     D0 E5 05 F1 | 	add	objptr, ##22480
01900     F2 30 02 F1 | 	add	local10, objptr
01904     12 35 02 F6 | 	mov	local12, local04
01908     1A 33 02 F6 | 	mov	local11, local12
0190c     19 39 02 F6 | 	mov	local14, local11
01910     03 38 66 F0 | 	shl	local14, #3
01914     F2 36 02 F6 | 	mov	local13, objptr
01918     F2 38 02 F1 | 	add	local14, objptr
0191c     1C 13 02 FB | 	rdlong	arg01, local14
01920     2B 00 00 FF 
01924     D0 E5 85 F1 | 	sub	objptr, ##22480
01928     60 66 B1 FD | 	call	#__system__RTrim_S
0192c     FD 12 02 F6 | 	mov	arg01, result1
01930     98 65 B1 FD | 	call	#__system__LTrim_S
01934     18 FB 61 FC | 	wrlong	result1, local10
01938     01 24 06 F1 | 	add	local04, #1
0193c     A8 FF 9F FD | 	jmp	#LR__0075
01940                 | LR__0076
01940     00 24 06 F6 | 	mov	local04, #0
01944     97 8A 48 FB | 	callpa	#(@LR__0083-@LR__0077)>>2,fcache_load_ptr_
01948                 | ' 
01948                 | ' i=0
01948                 | ' do 
01948                 | LR__0077
01948                 | '   if len(lparts(i).part$)=0 then 
01948     12 29 02 F6 | 	mov	local06, local04
0194c     03 28 66 F0 | 	shl	local06, #3
01950     2B 00 00 FF 
01954     D0 E5 05 F1 | 	add	objptr, ##22480
01958     F2 2A 02 F6 | 	mov	local07, objptr
0195c     F2 28 02 F1 | 	add	local06, objptr
01960     14 13 02 FB | 	rdlong	arg01, local06
01964     2B 00 00 FF 
01968     D0 E5 85 F1 | 	sub	objptr, ##22480
0196c     09 2D 02 F6 | 	mov	local08, arg01
01970                 | LR__0078
01970     16 FB C9 FA | 	rdbyte	result1, local08 wz
01974     01 2C 06 51 |  if_ne	add	local08, #1
01978     F4 FF 9F 5D |  if_ne	jmp	#LR__0078
0197c     09 2D 8A F1 | 	sub	local08, arg01 wz
01980     C4 00 90 5D |  if_ne	jmp	#LR__0082
01984                 | '     if i=k-1 then k-=1  :  exit
01984     1E 1F 02 F6 | 	mov	local01, local16
01988     01 1E 86 F1 | 	sub	local01, #1
0198c     0F 25 0A F2 | 	cmp	local04, local01 wz
01990     01 3C 86 A1 |  if_e	sub	local16, #1
01994     C4 00 90 AD |  if_e	jmp	#LR__0084
01998                 | '     if i<k-1 then 
01998     1E 1F 02 F6 | 	mov	local01, local16
0199c     01 1E 86 F1 | 	sub	local01, #1
019a0     0F 25 52 F2 | 	cmps	local04, local01 wc
019a4     A0 00 90 3D |  if_ae	jmp	#LR__0081
019a8                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
019a8     12 3B 02 F6 | 	mov	local15, local04
019ac     1E 59 02 F6 | 	mov	local30, local16
019b0     01 58 86 F1 | 	sub	local30, #1
019b4                 | LR__0079
019b4     2C 3B 52 F2 | 	cmps	local15, local30 wc
019b8     80 00 90 3D |  if_ae	jmp	#LR__0080
019bc     1D 29 02 F6 | 	mov	local06, local15
019c0     01 28 06 F1 | 	add	local06, #1
019c4     03 28 66 F0 | 	shl	local06, #3
019c8     2B 00 00 FF 
019cc     D0 E5 05 F1 | 	add	objptr, ##22480
019d0     F2 28 02 F1 | 	add	local06, objptr
019d4     14 1F 02 FB | 	rdlong	local01, local06
019d8     1D 2B 02 F6 | 	mov	local07, local15
019dc     01 2A 06 F1 | 	add	local07, #1
019e0     03 2A 66 F0 | 	shl	local07, #3
019e4     F2 2A 02 F1 | 	add	local07, objptr
019e8     04 2A 06 F1 | 	add	local07, #4
019ec     15 27 02 FB | 	rdlong	local05, local07
019f0     1D 31 02 F6 | 	mov	local10, local15
019f4     18 2B 02 F6 | 	mov	local07, local10
019f8     03 2A 66 F0 | 	shl	local07, #3
019fc     F2 34 02 F6 | 	mov	local12, objptr
01a00     F2 2A 02 F1 | 	add	local07, objptr
01a04     15 1F 62 FC | 	wrlong	local01, local07
01a08     1D 33 02 F6 | 	mov	local11, local15
01a0c     19 39 02 F6 | 	mov	local14, local11
01a10     1C 37 02 F6 | 	mov	local13, local14
01a14     03 36 66 F0 | 	shl	local13, #3
01a18     F2 4C 02 F6 | 	mov	local24, objptr
01a1c     F2 36 02 F1 | 	add	local13, objptr
01a20     04 36 06 F1 | 	add	local13, #4
01a24     1B 27 62 FC | 	wrlong	local05, local13
01a28     04 36 86 F1 | 	sub	local13, #4
01a2c     01 3A 06 F1 | 	add	local15, #1
01a30     2B 00 00 FF 
01a34     D0 E5 85 F1 | 	sub	objptr, ##22480
01a38     78 FF 9F FD | 	jmp	#LR__0079
01a3c                 | LR__0080
01a3c     01 3C 86 F1 | 	sub	local16, #1
01a40                 | '       if i>0 then i-=1 
01a40     01 24 56 F2 | 	cmps	local04, #1 wc
01a44     01 24 86 31 |  if_ae	sub	local04, #1
01a48                 | LR__0081
01a48                 | LR__0082
01a48     01 24 06 F1 | 	add	local04, #1
01a4c     1E 1F 02 F6 | 	mov	local01, local16
01a50     01 1E 86 F1 | 	sub	local01, #1
01a54     0F 25 5A F2 | 	cmps	local04, local01 wcz
01a58     EC FE 9F ED |  if_be	jmp	#LR__0077
01a5c                 | LR__0083
01a5c                 | LR__0084
01a5c                 | ' 
01a5c                 | ' ' 1g: lowercase all that is not a string
01a5c                 | ' 
01a5c                 | ' for j=0 to k-1
01a5c     00 3A 06 F6 | 	mov	local15, #0
01a60     1E 5B 02 F6 | 	mov	local31, local16
01a64                 | LR__0085
01a64     2D 3B 52 F2 | 	cmps	local15, local31 wc
01a68     D0 00 90 3D |  if_ae	jmp	#LR__0088
01a6c                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01a6c     1D 29 02 F6 | 	mov	local06, local15
01a70     03 28 66 F0 | 	shl	local06, #3
01a74     2B 00 00 FF 
01a78     D0 E5 05 F1 | 	add	objptr, ##22480
01a7c     F2 2A 02 F6 | 	mov	local07, objptr
01a80     F2 28 02 F1 | 	add	local06, objptr
01a84     14 13 02 FB | 	rdlong	arg01, local06
01a88     01 14 06 F6 | 	mov	arg02, #1
01a8c     2B 00 00 FF 
01a90     D0 E5 85 F1 | 	sub	objptr, ##22480
01a94     C0 60 B1 FD | 	call	#__system__Left_S
01a98     FD 12 02 F6 | 	mov	arg01, result1
01a9c     25 01 00 FF 
01aa0     EF 15 06 F6 | 	mov	arg02, ##@LR__4118
01aa4     C8 40 B1 FD | 	call	#__system___string_cmp
01aa8     00 FA 0D F2 | 	cmp	result1, #0 wz
01aac     44 00 90 5D |  if_ne	jmp	#LR__0086
01ab0     1D 2B 02 F6 | 	mov	local07, local15
01ab4     03 2A 66 F0 | 	shl	local07, #3
01ab8     2B 00 00 FF 
01abc     D0 E5 05 F1 | 	add	objptr, ##22480
01ac0     F2 34 02 F6 | 	mov	local12, objptr
01ac4     F2 2A 02 F1 | 	add	local07, objptr
01ac8     15 13 02 FB | 	rdlong	arg01, local07
01acc     01 14 06 F6 | 	mov	arg02, #1
01ad0     2B 00 00 FF 
01ad4     D0 E5 85 F1 | 	sub	objptr, ##22480
01ad8     04 61 B1 FD | 	call	#__system__Right_S
01adc     FD 12 02 F6 | 	mov	arg01, result1
01ae0     25 01 00 FF 
01ae4     F1 15 06 F6 | 	mov	arg02, ##@LR__4119
01ae8     84 40 B1 FD | 	call	#__system___string_cmp
01aec     00 FA 0D F2 | 	cmp	result1, #0 wz
01af0     40 00 90 AD |  if_e	jmp	#LR__0087
01af4                 | LR__0086
01af4     1D 31 02 F6 | 	mov	local10, local15
01af8     03 30 66 F0 | 	shl	local10, #3
01afc     2B 00 00 FF 
01b00     D0 E5 05 F1 | 	add	objptr, ##22480
01b04     F2 30 02 F1 | 	add	local10, objptr
01b08     1D 35 02 F6 | 	mov	local12, local15
01b0c     1A 33 02 F6 | 	mov	local11, local12
01b10     19 39 02 F6 | 	mov	local14, local11
01b14     03 38 66 F0 | 	shl	local14, #3
01b18     F2 36 02 F6 | 	mov	local13, objptr
01b1c     F2 38 02 F1 | 	add	local14, objptr
01b20     1C 13 02 FB | 	rdlong	arg01, local14
01b24     2B 00 00 FF 
01b28     D0 E5 85 F1 | 	sub	objptr, ##22480
01b2c     DC 62 B1 FD | 	call	#__system__LCase_S
01b30     18 FB 61 FC | 	wrlong	result1, local10
01b34                 | LR__0087
01b34     01 3A 06 F1 | 	add	local15, #1
01b38     28 FF 9F FD | 	jmp	#LR__0085
01b3c                 | LR__0088
01b3c                 | ' 
01b3c                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
01b3c                 | ' 
01b3c                 | ' for i=0 to k: lparts(i).token=-1: next i
01b3c     00 24 06 F6 | 	mov	local04, #0
01b40     1E 5D 02 F6 | 	mov	local32, local16
01b44     01 5C 06 F1 | 	add	local32, #1
01b48     97 1C 48 FB | 	callpa	#(@LR__0090-@LR__0089)>>2,fcache_load_ptr_
01b4c                 | LR__0089
01b4c     2E 25 52 F2 | 	cmps	local04, local32 wc
01b50     30 00 90 3D |  if_ae	jmp	#LR__0091
01b54     12 31 02 F6 | 	mov	local10, local04
01b58     03 30 66 F0 | 	shl	local10, #3
01b5c     2B 00 00 FF 
01b60     D0 E5 05 F1 | 	add	objptr, ##22480
01b64     F2 30 02 F1 | 	add	local10, objptr
01b68     04 30 06 F1 | 	add	local10, #4
01b6c     FF FF FF FF 
01b70     18 FF 6B FC | 	wrlong	##-1, local10
01b74     01 24 06 F1 | 	add	local04, #1
01b78     2B 00 00 FF 
01b7c     D0 E5 85 F1 | 	sub	objptr, ##22480
01b80     C8 FF 9F FD | 	jmp	#LR__0089
01b84                 | LR__0090
01b84                 | LR__0091
01b84                 | ' 
01b84                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01b84                 | ' 
01b84                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01b84     2B 00 00 FF 
01b88     D0 E5 05 F1 | 	add	objptr, ##22480
01b8c     F2 12 02 FB | 	rdlong	arg01, objptr
01b90     2B 00 00 FF 
01b94     D0 E5 85 F1 | 	sub	objptr, ##22480
01b98     09 2D 02 F6 | 	mov	local08, arg01
01b9c     97 06 48 FB | 	callpa	#(@LR__0093-@LR__0092)>>2,fcache_load_ptr_
01ba0                 | LR__0092
01ba0     16 FB C9 FA | 	rdbyte	result1, local08 wz
01ba4     01 2C 06 51 |  if_ne	add	local08, #1
01ba8     F4 FF 9F 5D |  if_ne	jmp	#LR__0092
01bac                 | LR__0093
01bac     09 2D 8A F1 | 	sub	local08, arg01 wz
01bb0     3C 0D 90 AD |  if_e	jmp	#LR__0126
01bb4                 | ' 
01bb4                 | ' ' 2a find part types 
01bb4                 | ' 
01bb4                 | ' for i=0 to k-1
01bb4     00 24 06 F6 | 	mov	local04, #0
01bb8     1E 5F 02 F6 | 	mov	local33, local16
01bbc                 | LR__0094
01bbc     2F 25 52 F2 | 	cmps	local04, local33 wc
01bc0     9C 05 90 3D |  if_ae	jmp	#LR__0103
01bc4     12 31 02 F6 | 	mov	local10, local04
01bc8     03 30 66 F0 | 	shl	local10, #3
01bcc     2B 00 00 FF 
01bd0     D0 E5 05 F1 | 	add	objptr, ##22480
01bd4     F2 30 02 F1 | 	add	local10, objptr
01bd8     12 33 02 F6 | 	mov	local11, local04
01bdc     19 39 02 F6 | 	mov	local14, local11
01be0     1C 37 02 F6 | 	mov	local13, local14
01be4     03 36 66 F0 | 	shl	local13, #3
01be8     F2 4C 02 F6 | 	mov	local24, objptr
01bec     F2 36 02 F1 | 	add	local13, objptr
01bf0     1B 13 02 FB | 	rdlong	arg01, local13
01bf4     2B 00 00 FF 
01bf8     D0 E5 85 F1 | 	sub	objptr, ##22480
01bfc     FC 0F B0 FD | 	call	#_isseparator
01c00     FD FA E1 F8 | 	getbyte	result1, result1, #0
01c04     04 30 06 F1 | 	add	local10, #4
01c08     18 FB 61 FC | 	wrlong	result1, local10
01c0c                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
01c0c     12 31 02 F6 | 	mov	local10, local04
01c10     03 30 66 F0 | 	shl	local10, #3
01c14     2B 00 00 FF 
01c18     D0 E5 05 F1 | 	add	objptr, ##22480
01c1c     F2 30 02 F1 | 	add	local10, objptr
01c20     04 30 06 F1 | 	add	local10, #4
01c24     18 35 02 FB | 	rdlong	local12, local10
01c28     01 34 56 F2 | 	cmps	local12, #1 wc
01c2c     2B 00 00 FF 
01c30     D0 E5 85 F1 | 	sub	objptr, ##22480
01c34     20 05 90 3D |  if_ae	jmp	#LR__0102
01c38     12 31 02 F6 | 	mov	local10, local04
01c3c     03 30 66 F0 | 	shl	local10, #3
01c40     2B 00 00 FF 
01c44     D0 E5 05 F1 | 	add	objptr, ##22480
01c48     F2 30 02 F1 | 	add	local10, objptr
01c4c     12 33 02 F6 | 	mov	local11, local04
01c50     19 39 02 F6 | 	mov	local14, local11
01c54     1C 37 02 F6 | 	mov	local13, local14
01c58     03 36 66 F0 | 	shl	local13, #3
01c5c     F2 4C 02 F6 | 	mov	local24, objptr
01c60     F2 36 02 F1 | 	add	local13, objptr
01c64     1B 13 02 FB | 	rdlong	arg01, local13
01c68     2B 00 00 FF 
01c6c     D0 E5 85 F1 | 	sub	objptr, ##22480
01c70     A8 0C B0 FD | 	call	#_isoperator
01c74     FD FA E1 F8 | 	getbyte	result1, result1, #0
01c78     04 30 06 F1 | 	add	local10, #4
01c7c     18 FB 61 FC | 	wrlong	result1, local10
01c80                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
01c80     12 31 02 F6 | 	mov	local10, local04
01c84     03 30 66 F0 | 	shl	local10, #3
01c88     2B 00 00 FF 
01c8c     D0 E5 05 F1 | 	add	objptr, ##22480
01c90     F2 30 02 F1 | 	add	local10, objptr
01c94     04 30 06 F1 | 	add	local10, #4
01c98     18 35 02 FB | 	rdlong	local12, local10
01c9c     01 34 56 F2 | 	cmps	local12, #1 wc
01ca0     2B 00 00 FF 
01ca4     D0 E5 85 F1 | 	sub	objptr, ##22480
01ca8     AC 04 90 3D |  if_ae	jmp	#LR__0102
01cac     12 31 02 F6 | 	mov	local10, local04
01cb0     03 30 66 F0 | 	shl	local10, #3
01cb4     2B 00 00 FF 
01cb8     D0 E5 05 F1 | 	add	objptr, ##22480
01cbc     F2 30 02 F1 | 	add	local10, objptr
01cc0     12 33 02 F6 | 	mov	local11, local04
01cc4     19 39 02 F6 | 	mov	local14, local11
01cc8     1C 37 02 F6 | 	mov	local13, local14
01ccc     03 36 66 F0 | 	shl	local13, #3
01cd0     F2 4C 02 F6 | 	mov	local24, objptr
01cd4     F2 36 02 F1 | 	add	local13, objptr
01cd8     1B 13 02 FB | 	rdlong	arg01, local13
01cdc     2B 00 00 FF 
01ce0     D0 E5 85 F1 | 	sub	objptr, ##22480
01ce4                 | ' 
01ce4                 | ' select case s
01ce4     26 01 00 FF 
01ce8     BA 14 06 F6 | 	mov	arg02, ##@LR__4176
01cec     80 3E B1 FD | 	call	#__system___string_cmp
01cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
01cf4     1B FA 05 A6 |  if_e	mov	result1, #27
01cf8     00 FA 05 56 |  if_ne	mov	result1, #0
01cfc     FD FA E1 F8 | 	getbyte	result1, result1, #0
01d00     04 30 06 F1 | 	add	local10, #4
01d04     18 FB 61 FC | 	wrlong	result1, local10
01d08                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
01d08     12 31 02 F6 | 	mov	local10, local04
01d0c     03 30 66 F0 | 	shl	local10, #3
01d10     2B 00 00 FF 
01d14     D0 E5 05 F1 | 	add	objptr, ##22480
01d18     F2 30 02 F1 | 	add	local10, objptr
01d1c     04 30 06 F1 | 	add	local10, #4
01d20     18 35 02 FB | 	rdlong	local12, local10
01d24     01 34 56 F2 | 	cmps	local12, #1 wc
01d28     2B 00 00 FF 
01d2c     D0 E5 85 F1 | 	sub	objptr, ##22480
01d30     24 04 90 3D |  if_ae	jmp	#LR__0102
01d34     12 31 02 F6 | 	mov	local10, local04
01d38     03 30 66 F0 | 	shl	local10, #3
01d3c     2B 00 00 FF 
01d40     D0 E5 05 F1 | 	add	objptr, ##22480
01d44     F2 30 02 F1 | 	add	local10, objptr
01d48     12 33 02 F6 | 	mov	local11, local04
01d4c     19 39 02 F6 | 	mov	local14, local11
01d50     1C 37 02 F6 | 	mov	local13, local14
01d54     03 36 66 F0 | 	shl	local13, #3
01d58     F2 4C 02 F6 | 	mov	local24, objptr
01d5c     F2 36 02 F1 | 	add	local13, objptr
01d60     1B 13 02 FB | 	rdlong	arg01, local13
01d64     2B 00 00 FF 
01d68     D0 E5 85 F1 | 	sub	objptr, ##22480
01d6c     8C 10 B0 FD | 	call	#_iscommand
01d70     FD FA E1 F8 | 	getbyte	result1, result1, #0
01d74     04 30 06 F1 | 	add	local10, #4
01d78     18 FB 61 FC | 	wrlong	result1, local10
01d7c                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
01d7c     12 31 02 F6 | 	mov	local10, local04
01d80     03 30 66 F0 | 	shl	local10, #3
01d84     2B 00 00 FF 
01d88     D0 E5 05 F1 | 	add	objptr, ##22480
01d8c     F2 30 02 F1 | 	add	local10, objptr
01d90     04 30 06 F1 | 	add	local10, #4
01d94     18 35 02 FB | 	rdlong	local12, local10
01d98     01 34 56 F2 | 	cmps	local12, #1 wc
01d9c     2B 00 00 FF 
01da0     D0 E5 85 F1 | 	sub	objptr, ##22480
01da4     B0 03 90 3D |  if_ae	jmp	#LR__0102
01da8     12 31 02 F6 | 	mov	local10, local04
01dac     03 30 66 F0 | 	shl	local10, #3
01db0     2B 00 00 FF 
01db4     D0 E5 05 F1 | 	add	objptr, ##22480
01db8     F2 30 02 F1 | 	add	local10, objptr
01dbc     12 33 02 F6 | 	mov	local11, local04
01dc0     19 39 02 F6 | 	mov	local14, local11
01dc4     1C 37 02 F6 | 	mov	local13, local14
01dc8     03 36 66 F0 | 	shl	local13, #3
01dcc     F2 4C 02 F6 | 	mov	local24, objptr
01dd0     F2 36 02 F1 | 	add	local13, objptr
01dd4     1B 13 02 FB | 	rdlong	arg01, local13
01dd8     2B 00 00 FF 
01ddc     D0 E5 85 F1 | 	sub	objptr, ##22480
01de0     58 16 B0 FD | 	call	#_isfunction
01de4     FD FA E1 F8 | 	getbyte	result1, result1, #0
01de8     04 30 06 F1 | 	add	local10, #4
01dec     18 FB 61 FC | 	wrlong	result1, local10
01df0                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
01df0     12 31 02 F6 | 	mov	local10, local04
01df4     03 30 66 F0 | 	shl	local10, #3
01df8     2B 00 00 FF 
01dfc     D0 E5 05 F1 | 	add	objptr, ##22480
01e00     F2 30 02 F1 | 	add	local10, objptr
01e04     04 30 06 F1 | 	add	local10, #4
01e08     18 35 02 FB | 	rdlong	local12, local10
01e0c     01 34 56 F2 | 	cmps	local12, #1 wc
01e10     2B 00 00 FF 
01e14     D0 E5 85 F1 | 	sub	objptr, ##22480
01e18     3C 03 90 3D |  if_ae	jmp	#LR__0102
01e1c     12 29 02 F6 | 	mov	local06, local04
01e20     03 28 66 F0 | 	shl	local06, #3
01e24     2B 00 00 FF 
01e28     D0 E5 05 F1 | 	add	objptr, ##22480
01e2c     F2 28 02 F1 | 	add	local06, objptr
01e30     14 13 02 FB | 	rdlong	arg01, local06
01e34     2B 00 00 FF 
01e38     D0 E5 85 F1 | 	sub	objptr, ##22480
01e3c     30 1A B0 FD | 	call	#_isnum
01e40     FD 1E 02 F6 | 	mov	local01, result1
01e44     52 00 00 FF 
01e48     98 E4 05 F1 | 	add	objptr, ##42136
01e4c     F2 1E 62 FC | 	wrlong	local01, objptr
01e50     12 29 02 F6 | 	mov	local06, local04
01e54     03 28 66 F0 | 	shl	local06, #3
01e58     26 00 00 FF 
01e5c     C8 E4 85 F1 | 	sub	objptr, ##19656
01e60     F2 28 02 F1 | 	add	local06, objptr
01e64     14 13 02 FB | 	rdlong	arg01, local06
01e68     2B 00 00 FF 
01e6c     D0 E5 85 F1 | 	sub	objptr, ##22480
01e70     D4 1C B0 FD | 	call	#_isint
01e74     FD 1E 02 F6 | 	mov	local01, result1
01e78     52 00 00 FF 
01e7c     9C E4 05 F1 | 	add	objptr, ##42140
01e80     F2 1E 62 FC | 	wrlong	local01, objptr
01e84     12 29 02 F6 | 	mov	local06, local04
01e88     03 28 66 F0 | 	shl	local06, #3
01e8c     26 00 00 FF 
01e90     CC E4 85 F1 | 	sub	objptr, ##19660
01e94     F2 2A 02 F6 | 	mov	local07, objptr
01e98     F2 28 02 F1 | 	add	local06, objptr
01e9c     14 13 02 FB | 	rdlong	arg01, local06
01ea0     2B 00 00 FF 
01ea4     D0 E5 85 F1 | 	sub	objptr, ##22480
01ea8     F4 1D B0 FD | 	call	#_isdec
01eac     52 00 00 FF 
01eb0     A0 E4 05 F1 | 	add	objptr, ##42144
01eb4     F2 FA 61 FC | 	wrlong	result1, objptr
01eb8                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
01eb8     08 E4 85 F1 | 	sub	objptr, #8
01ebc     F2 1E 0A FB | 	rdlong	local01, objptr wz
01ec0     52 00 00 FF 
01ec4     98 E4 85 F1 | 	sub	objptr, ##42136
01ec8     60 00 90 AD |  if_e	jmp	#LR__0095
01ecc     52 00 00 FF 
01ed0     9C E4 05 F1 | 	add	objptr, ##42140
01ed4     F2 30 0A FB | 	rdlong	local10, objptr wz
01ed8     52 00 00 FF 
01edc     9C E4 85 F1 | 	sub	objptr, ##42140
01ee0     48 00 90 AD |  if_e	jmp	#LR__0095
01ee4     52 00 00 FF 
01ee8     A0 E4 05 F1 | 	add	objptr, ##42144
01eec     F2 34 0A FB | 	rdlong	local12, objptr wz
01ef0     52 00 00 FF 
01ef4     A0 E4 85 F1 | 	sub	objptr, ##42144
01ef8     30 00 90 AD |  if_e	jmp	#LR__0095
01efc     12 27 02 F6 | 	mov	local05, local04
01f00     13 31 02 F6 | 	mov	local10, local05
01f04     03 30 66 F0 | 	shl	local10, #3
01f08     2B 00 00 FF 
01f0c     D0 E5 05 F1 | 	add	objptr, ##22480
01f10     F2 30 02 F1 | 	add	local10, objptr
01f14     04 30 06 F1 | 	add	local10, #4
01f18     01 00 80 FF 
01f1c     18 01 68 FC | 	wrlong	##512, local10
01f20     2B 00 00 FF 
01f24     D0 E5 85 F1 | 	sub	objptr, ##22480
01f28     2C 02 90 FD | 	jmp	#LR__0102
01f2c                 | LR__0095
01f2c                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
01f2c     52 00 00 FF 
01f30     98 E4 05 F1 | 	add	objptr, ##42136
01f34     F2 1E 0A FB | 	rdlong	local01, objptr wz
01f38     52 00 00 FF 
01f3c     98 E4 85 F1 | 	sub	objptr, ##42136
01f40     64 00 90 AD |  if_e	jmp	#LR__0096
01f44     52 00 00 FF 
01f48     9C E4 05 F1 | 	add	objptr, ##42140
01f4c     F2 30 0A FB | 	rdlong	local10, objptr wz
01f50     52 00 00 FF 
01f54     9C E4 85 F1 | 	sub	objptr, ##42140
01f58     52 00 00 5F 
01f5c     A0 E4 05 51 |  if_ne	add	objptr, ##42144
01f60     F2 34 02 5B |  if_ne	rdlong	local12, objptr
01f64     52 00 00 5F 
01f68     A0 E4 85 51 |  if_ne	sub	objptr, ##42144
01f6c     1A 2B 22 56 |  if_ne	not	local07, local12
01f70     00 2A 0E 52 |  if_ne	cmp	local07, #0 wz
01f74     30 00 90 AD |  if_e	jmp	#LR__0096
01f78     12 27 02 F6 | 	mov	local05, local04
01f7c     13 31 02 F6 | 	mov	local10, local05
01f80     03 30 66 F0 | 	shl	local10, #3
01f84     2B 00 00 FF 
01f88     D0 E5 05 F1 | 	add	objptr, ##22480
01f8c     F2 30 02 F1 | 	add	local10, objptr
01f90     04 30 06 F1 | 	add	local10, #4
01f94     01 00 80 FF 
01f98     18 03 68 FC | 	wrlong	##513, local10
01f9c     2B 00 00 FF 
01fa0     D0 E5 85 F1 | 	sub	objptr, ##22480
01fa4     B0 01 90 FD | 	jmp	#LR__0102
01fa8                 | LR__0096
01fa8                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
01fa8     52 00 00 FF 
01fac     98 E4 05 F1 | 	add	objptr, ##42136
01fb0     F2 1E 0A FB | 	rdlong	local01, objptr wz
01fb4     52 00 00 FF 
01fb8     98 E4 85 F1 | 	sub	objptr, ##42136
01fbc     52 00 00 5F 
01fc0     9C E4 05 51 |  if_ne	add	objptr, ##42140
01fc4     F2 30 02 5B |  if_ne	rdlong	local10, objptr
01fc8     52 00 00 5F 
01fcc     9C E4 85 51 |  if_ne	sub	objptr, ##42140
01fd0     18 31 22 56 |  if_ne	not	local10, local10
01fd4     00 30 0E 52 |  if_ne	cmp	local10, #0 wz
01fd8     52 00 00 5F 
01fdc     A0 E4 05 51 |  if_ne	add	objptr, ##42144
01fe0     F2 34 02 5B |  if_ne	rdlong	local12, objptr
01fe4     52 00 00 5F 
01fe8     A0 E4 85 51 |  if_ne	sub	objptr, ##42144
01fec     1A 2B 22 56 |  if_ne	not	local07, local12
01ff0     00 2A 0E 52 |  if_ne	cmp	local07, #0 wz
01ff4     30 00 90 AD |  if_e	jmp	#LR__0097
01ff8     12 27 02 F6 | 	mov	local05, local04
01ffc     13 31 02 F6 | 	mov	local10, local05
02000     03 30 66 F0 | 	shl	local10, #3
02004     2B 00 00 FF 
02008     D0 E5 05 F1 | 	add	objptr, ##22480
0200c     F2 30 02 F1 | 	add	local10, objptr
02010     04 30 06 F1 | 	add	local10, #4
02014     01 00 80 FF 
02018     18 05 68 FC | 	wrlong	##514, local10
0201c     2B 00 00 FF 
02020     D0 E5 85 F1 | 	sub	objptr, ##22480
02024     30 01 90 FD | 	jmp	#LR__0102
02028                 | LR__0097
02028                 | ' 
02028                 | ' if isstring(lparts(i).part$) then 
02028     12 29 02 F6 | 	mov	local06, local04
0202c     03 28 66 F0 | 	shl	local06, #3
02030     2B 00 00 FF 
02034     D0 E5 05 F1 | 	add	objptr, ##22480
02038     F2 28 02 F1 | 	add	local06, objptr
0203c     14 13 02 FB | 	rdlong	arg01, local06
02040     2B 00 00 FF 
02044     D0 E5 85 F1 | 	sub	objptr, ##22480
02048     14 1D B0 FD | 	call	#_isstring
0204c     00 FA 0D F2 | 	cmp	result1, #0 wz
02050     A8 00 90 AD |  if_e	jmp	#LR__0100
02054     12 31 02 F6 | 	mov	local10, local04
02058     03 30 66 F0 | 	shl	local10, #3
0205c     2B 00 00 FF 
02060     D0 E5 05 F1 | 	add	objptr, ##22480
02064     F2 30 02 F1 | 	add	local10, objptr
02068     04 30 06 F1 | 	add	local10, #4
0206c     01 00 80 FF 
02070     18 07 68 FC | 	wrlong	##515, local10
02074     12 27 02 F6 | 	mov	local05, local04
02078     13 31 02 F6 | 	mov	local10, local05
0207c     03 30 66 F0 | 	shl	local10, #3
02080     F2 30 02 F1 | 	add	local10, objptr
02084     12 39 02 F6 | 	mov	local14, local04
02088     03 38 66 F0 | 	shl	local14, #3
0208c     F2 38 02 F1 | 	add	local14, objptr
02090     1C 2B 02 FB | 	rdlong	local07, local14
02094     02 34 06 F6 | 	mov	local12, #2
02098     12 4D 02 F6 | 	mov	local24, local04
0209c     26 45 02 F6 | 	mov	local20, local24
020a0     22 47 02 F6 | 	mov	local21, local20
020a4     03 46 66 F0 | 	shl	local21, #3
020a8     F2 48 02 F6 | 	mov	local22, objptr
020ac     F2 46 02 F1 | 	add	local21, objptr
020b0     23 13 02 FB | 	rdlong	arg01, local21
020b4     2B 00 00 FF 
020b8     D0 E5 85 F1 | 	sub	objptr, ##22480
020bc     09 2D 02 F6 | 	mov	local08, arg01
020c0     97 06 48 FB | 	callpa	#(@LR__0099-@LR__0098)>>2,fcache_load_ptr_
020c4                 | LR__0098
020c4     16 FB C9 FA | 	rdbyte	result1, local08 wz
020c8     01 2C 06 51 |  if_ne	add	local08, #1
020cc     F4 FF 9F 5D |  if_ne	jmp	#LR__0098
020d0                 | LR__0099
020d0     09 2D 82 F1 | 	sub	local08, arg01
020d4     16 37 02 F6 | 	mov	local13, local08
020d8     1B 39 02 F6 | 	mov	local14, local13
020dc     02 38 86 F1 | 	sub	local14, #2
020e0     1C 33 02 F6 | 	mov	local11, local14
020e4     15 13 02 F6 | 	mov	arg01, local07
020e8     1A 15 02 F6 | 	mov	arg02, local12
020ec     19 17 02 F6 | 	mov	arg03, local11
020f0     7C 5B B1 FD | 	call	#__system__Mid_S
020f4     18 FB 61 FC | 	wrlong	result1, local10
020f8     5C 00 90 FD | 	jmp	#LR__0102
020fc                 | LR__0100
020fc                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
020fc     12 27 02 F6 | 	mov	local05, local04
02100     13 29 02 F6 | 	mov	local06, local05
02104     03 28 66 F0 | 	shl	local06, #3
02108     2B 00 00 FF 
0210c     D0 E5 05 F1 | 	add	objptr, ##22480
02110     F2 28 02 F1 | 	add	local06, objptr
02114     14 13 02 FB | 	rdlong	arg01, local06
02118     2B 00 00 FF 
0211c     D0 E5 85 F1 | 	sub	objptr, ##22480
02120     D8 14 B0 FD | 	call	#_isname
02124     00 FA 0D F2 | 	cmp	result1, #0 wz
02128     2C 00 90 AD |  if_e	jmp	#LR__0101
0212c     12 27 02 F6 | 	mov	local05, local04
02130     13 31 02 F6 | 	mov	local10, local05
02134     03 30 66 F0 | 	shl	local10, #3
02138     2B 00 00 FF 
0213c     D0 E5 05 F1 | 	add	objptr, ##22480
02140     F2 30 02 F1 | 	add	local10, objptr
02144     04 30 06 F1 | 	add	local10, #4
02148     01 00 80 FF 
0214c     18 09 68 FC | 	wrlong	##516, local10
02150     2B 00 00 FF 
02154     D0 E5 85 F1 | 	sub	objptr, ##22480
02158                 | LR__0101
02158                 | LR__0102
02158     01 24 06 F1 | 	add	local04, #1
0215c     5C FA 9F FD | 	jmp	#LR__0094
02160                 | LR__0103
02160     1E 31 02 F6 | 	mov	local10, local16
02164     03 30 66 F0 | 	shl	local10, #3
02168     2B 00 00 FF 
0216c     D0 E5 05 F1 | 	add	objptr, ##22480
02170     F2 30 02 F1 | 	add	local10, objptr
02174     04 30 06 F1 | 	add	local10, #4
02178     18 FD 6B FC | 	wrlong	#510, local10
0217c     1E 31 02 F6 | 	mov	local10, local16
02180     03 30 66 F0 | 	shl	local10, #3
02184     F2 30 02 F1 | 	add	local10, objptr
02188     25 01 00 FF 
0218c     F3 2B 06 F6 | 	mov	local07, ##@LR__4120
02190     18 2B 62 FC | 	wrlong	local07, local10
02194     10 00 00 FF 
02198     54 E4 05 F1 | 	add	objptr, ##8276
0219c     F2 3C 62 FC | 	wrlong	local16, objptr
021a0                 | ' 
021a0                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
021a0                 | ' 
021a0                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
021a0                 | ' 
021a0                 | ' ' process the case when simple load or save is called without ""
021a0                 | ' 
021a0                 | ' if (lparts(0).part$="load" orelse lparts(0).part$="save" orelse lparts(0).part$="brun") andalso lparts(1).token=token_name andalso lparts(2).token=token_end then lparts(1).token=token_string
021a0     10 00 00 FF 
021a4     54 E4 85 F1 | 	sub	objptr, ##8276
021a8     F2 12 02 FB | 	rdlong	arg01, objptr
021ac     2B 00 00 FF 
021b0     D0 E5 85 F1 | 	sub	objptr, ##22480
021b4     25 01 00 FF 
021b8     F4 15 06 F6 | 	mov	arg02, ##@LR__4121
021bc     B0 39 B1 FD | 	call	#__system___string_cmp
021c0     00 FA 0D F2 | 	cmp	result1, #0 wz
021c4     50 00 90 AD |  if_e	jmp	#LR__0104
021c8     2B 00 00 FF 
021cc     D0 E5 05 F1 | 	add	objptr, ##22480
021d0     F2 12 02 FB | 	rdlong	arg01, objptr
021d4     2B 00 00 FF 
021d8     D0 E5 85 F1 | 	sub	objptr, ##22480
021dc     25 01 00 FF 
021e0     F9 15 06 F6 | 	mov	arg02, ##@LR__4122
021e4     88 39 B1 FD | 	call	#__system___string_cmp
021e8     00 FA 0D F2 | 	cmp	result1, #0 wz
021ec     28 00 90 AD |  if_e	jmp	#LR__0104
021f0     2B 00 00 FF 
021f4     D0 E5 05 F1 | 	add	objptr, ##22480
021f8     F2 12 02 FB | 	rdlong	arg01, objptr
021fc     2B 00 00 FF 
02200     D0 E5 85 F1 | 	sub	objptr, ##22480
02204     25 01 00 FF 
02208     FE 15 06 F6 | 	mov	arg02, ##@LR__4123
0220c     60 39 B1 FD | 	call	#__system___string_cmp
02210     00 FA 0D F2 | 	cmp	result1, #0 wz
02214     50 00 90 5D |  if_ne	jmp	#LR__0105
02218                 | LR__0104
02218     2B 00 00 FF 
0221c     DC E5 05 F1 | 	add	objptr, ##22492
02220     F2 28 02 FB | 	rdlong	local06, objptr
02224     2B 00 00 FF 
02228     DC E5 85 F1 | 	sub	objptr, ##22492
0222c     01 00 00 FF 
02230     04 28 0E F2 | 	cmp	local06, ##516 wz
02234     2B 00 00 AF 
02238     E4 E5 05 A1 |  if_e	add	objptr, ##22500
0223c     F2 32 02 AB |  if_e	rdlong	local11, objptr
02240     2B 00 00 AF 
02244     E4 E5 85 A1 |  if_e	sub	objptr, ##22500
02248     19 35 02 A6 |  if_e	mov	local12, local11
0224c     FE 35 0E A2 |  if_e	cmp	local12, #510 wz
02250     2B 00 00 AF 
02254     DC E5 05 A1 |  if_e	add	objptr, ##22492
02258     01 00 80 AF 
0225c     F2 06 68 AC |  if_e	wrlong	##515, objptr
02260     2B 00 00 AF 
02264     DC E5 85 A1 |  if_e	sub	objptr, ##22492
02268                 | LR__0105
02268                 | ' if (lparts(0).part$="mouse" orelse lparts(0).part$="cursor" orelse lparts(0).part$="click") andalso lparts(1).token=token_name andalso lparts(2).token=token_end then 
02268     2B 00 00 FF 
0226c     D0 E5 05 F1 | 	add	objptr, ##22480
02270     F2 12 02 FB | 	rdlong	arg01, objptr
02274     2B 00 00 FF 
02278     D0 E5 85 F1 | 	sub	objptr, ##22480
0227c     26 01 00 FF 
02280     03 30 06 F6 | 	mov	local10, ##@LR__4124
02284     18 15 02 F6 | 	mov	arg02, local10
02288     E4 38 B1 FD | 	call	#__system___string_cmp
0228c     00 FA 0D F2 | 	cmp	result1, #0 wz
02290     5C 00 90 AD |  if_e	jmp	#LR__0106
02294     2B 00 00 FF 
02298     D0 E5 05 F1 | 	add	objptr, ##22480
0229c     F2 12 02 FB | 	rdlong	arg01, objptr
022a0     2B 00 00 FF 
022a4     D0 E5 85 F1 | 	sub	objptr, ##22480
022a8     26 01 00 FF 
022ac     09 30 06 F6 | 	mov	local10, ##@LR__4125
022b0     18 15 02 F6 | 	mov	arg02, local10
022b4     B8 38 B1 FD | 	call	#__system___string_cmp
022b8     00 FA 0D F2 | 	cmp	result1, #0 wz
022bc     30 00 90 AD |  if_e	jmp	#LR__0106
022c0     2B 00 00 FF 
022c4     D0 E5 05 F1 | 	add	objptr, ##22480
022c8     F2 12 02 FB | 	rdlong	arg01, objptr
022cc     2B 00 00 FF 
022d0     D0 E5 85 F1 | 	sub	objptr, ##22480
022d4     26 01 00 FF 
022d8     10 2A 06 F6 | 	mov	local07, ##@LR__4126
022dc     15 29 02 F6 | 	mov	local06, local07
022e0     14 15 02 F6 | 	mov	arg02, local06
022e4     88 38 B1 FD | 	call	#__system___string_cmp
022e8     FD 30 0A F6 | 	mov	local10, result1 wz
022ec     E4 00 90 5D |  if_ne	jmp	#LR__0109
022f0                 | LR__0106
022f0     2B 00 00 FF 
022f4     DC E5 05 F1 | 	add	objptr, ##22492
022f8     F2 2A 02 FB | 	rdlong	local07, objptr
022fc     2B 00 00 FF 
02300     DC E5 85 F1 | 	sub	objptr, ##22492
02304     15 29 02 F6 | 	mov	local06, local07
02308     01 00 00 FF 
0230c     04 28 0E F2 | 	cmp	local06, ##516 wz
02310     2B 00 00 AF 
02314     E4 E5 05 A1 |  if_e	add	objptr, ##22500
02318     F2 32 02 AB |  if_e	rdlong	local11, objptr
0231c     2B 00 00 AF 
02320     E4 E5 85 A1 |  if_e	sub	objptr, ##22500
02324     19 35 02 A6 |  if_e	mov	local12, local11
02328     FE 35 0E A2 |  if_e	cmp	local12, #510 wz
0232c     A4 00 90 5D |  if_ne	jmp	#LR__0109
02330                 | '   if lparts(1).part$="on" then lparts(1).part$="1" :lparts(1).token=token_decimal
02330     2B 00 00 FF 
02334     D8 E5 05 F1 | 	add	objptr, ##22488
02338     F2 12 02 FB | 	rdlong	arg01, objptr
0233c     2B 00 00 FF 
02340     D8 E5 85 F1 | 	sub	objptr, ##22488
02344     26 01 00 FF 
02348     16 14 06 F6 | 	mov	arg02, ##@LR__4127
0234c     20 38 B1 FD | 	call	#__system___string_cmp
02350     00 FA 0D F2 | 	cmp	result1, #0 wz
02354     28 00 90 5D |  if_ne	jmp	#LR__0107
02358     26 01 00 FF 
0235c     19 1E 06 F6 | 	mov	local01, ##@LR__4128
02360     2B 00 00 FF 
02364     D8 E5 05 F1 | 	add	objptr, ##22488
02368     F2 1E 62 FC | 	wrlong	local01, objptr
0236c     04 E4 05 F1 | 	add	objptr, #4
02370     01 00 80 FF 
02374     F2 00 68 FC | 	wrlong	##512, objptr
02378     2B 00 00 FF 
0237c     DC E5 85 F1 | 	sub	objptr, ##22492
02380                 | LR__0107
02380                 | '   if lparts(1).part$="off" then lparts(1).part$="0" :lparts(1).token=token_decimal
02380     2B 00 00 FF 
02384     D8 E5 05 F1 | 	add	objptr, ##22488
02388     F2 12 02 FB | 	rdlong	arg01, objptr
0238c     2B 00 00 FF 
02390     D8 E5 85 F1 | 	sub	objptr, ##22488
02394     26 01 00 FF 
02398     1B 30 06 F6 | 	mov	local10, ##@LR__4129
0239c     18 15 02 F6 | 	mov	arg02, local10
023a0     CC 37 B1 FD | 	call	#__system___string_cmp
023a4     00 FA 0D F2 | 	cmp	result1, #0 wz
023a8     28 00 90 5D |  if_ne	jmp	#LR__0108
023ac     26 01 00 FF 
023b0     1F 1E 06 F6 | 	mov	local01, ##@LR__4130
023b4     2B 00 00 FF 
023b8     D8 E5 05 F1 | 	add	objptr, ##22488
023bc     F2 1E 62 FC | 	wrlong	local01, objptr
023c0     04 E4 05 F1 | 	add	objptr, #4
023c4     01 00 80 FF 
023c8     F2 00 68 FC | 	wrlong	##512, objptr
023cc     2B 00 00 FF 
023d0     DC E5 85 F1 | 	sub	objptr, ##22492
023d4                 | LR__0108
023d4                 | LR__0109
023d4                 | ' 
023d4                 | ' '2b determine a type of the line
023d4                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
023d4     2B 00 00 FF 
023d8     D0 E5 05 F1 | 	add	objptr, ##22480
023dc     F2 12 02 FB | 	rdlong	arg01, objptr
023e0     2B 00 00 FF 
023e4     D0 E5 85 F1 | 	sub	objptr, ##22480
023e8     B4 18 B0 FD | 	call	#_isdec
023ec     00 FA 0D F2 | 	cmp	result1, #0 wz
023f0     20 00 90 AD |  if_e	jmp	#LR__0110
023f4     2B 00 00 FF 
023f8     D0 E5 05 F1 | 	add	objptr, ##22480
023fc     F2 12 02 FB | 	rdlong	arg01, objptr
02400     2B 00 00 FF 
02404     D0 E5 85 F1 | 	sub	objptr, ##22480
02408     00 14 06 F6 | 	mov	arg02, #0
0240c     C0 66 B1 FD | 	call	#__system____builtin_atoi
02410     FD 20 02 F6 | 	mov	local02, result1
02414                 | LR__0110
02414                 | ' 
02414                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
02414     01 20 16 F2 | 	cmp	local02, #1 wc
02418     2C 00 90 CD |  if_b	jmp	#LR__0111
0241c     01 3C 0E F2 | 	cmp	local16, #1 wz
02420     2D 00 00 AF 
02424     E8 E5 05 A1 |  if_e	add	objptr, ##23528
02428     F2 1E 02 AB |  if_e	rdlong	local01, objptr
0242c     2D 00 00 AF 
02430     E8 E5 85 A1 |  if_e	sub	objptr, ##23528
02434     03 1E 0E A2 |  if_e	cmp	local01, #3 wz
02438     0C 00 90 5D |  if_ne	jmp	#LR__0111
0243c     10 13 02 F6 | 	mov	arg01, local02
02440     80 19 B0 FD | 	call	#_deleteline
02444     C8 04 90 FD | 	jmp	#LR__0127
02448                 | LR__0111
02448                 | ' 
02448                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
02448     01 20 16 F2 | 	cmp	local02, #1 wc
0244c     E0 00 90 CD |  if_b	jmp	#LR__0114
02450     2D 00 00 FF 
02454     E8 E5 05 F1 | 	add	objptr, ##23528
02458     F2 1E 0A FB | 	rdlong	local01, objptr wz
0245c     2D 00 00 FF 
02460     E8 E5 85 F1 | 	sub	objptr, ##23528
02464     20 00 90 AD |  if_e	jmp	#LR__0112
02468     2D 00 00 FF 
0246c     E8 E5 05 F1 | 	add	objptr, ##23528
02470     F2 28 02 FB | 	rdlong	local06, objptr
02474     2D 00 00 FF 
02478     E8 E5 85 F1 | 	sub	objptr, ##23528
0247c     14 31 02 F6 | 	mov	local10, local06
02480     03 30 0E F2 | 	cmp	local10, #3 wz
02484     A8 00 90 5D |  if_ne	jmp	#LR__0114
02488                 | LR__0112
02488     2B 00 00 FF 
0248c     E4 E5 05 F1 | 	add	objptr, ##22500
02490     F2 34 02 FB | 	rdlong	local12, objptr
02494     2B 00 00 FF 
02498     E4 E5 85 F1 | 	sub	objptr, ##22500
0249c     1A 2B 02 F6 | 	mov	local07, local12
024a0     1B 2A 0E F2 | 	cmp	local07, #27 wz
024a4     88 00 90 AD |  if_e	jmp	#LR__0114
024a8     2D 00 00 FF 
024ac     E8 E5 05 F1 | 	add	objptr, ##23528
024b0     F2 16 02 FB | 	rdlong	arg03, objptr
024b4     2D 00 00 FF 
024b8     E8 E5 85 F1 | 	sub	objptr, ##23528
024bc     10 13 02 F6 | 	mov	arg01, local02
024c0     00 14 06 F6 | 	mov	arg02, #0
024c4     84 2B B0 FD | 	call	#_compile
024c8     FD 22 0A F6 | 	mov	local03, result1 wz
024cc                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
024cc                 | '   if err<>0 then printerror(err): goto 104
024cc     0C 00 90 AD |  if_e	jmp	#LR__0113
024d0     11 13 02 F6 | 	mov	arg01, local03
024d4     50 01 B1 FD | 	call	#_printerror
024d8     34 04 90 FD | 	jmp	#LR__0127
024dc                 | LR__0113
024dc                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
024dc     52 00 00 FF 
024e0     74 E4 05 F1 | 	add	objptr, ##42100
024e4     F2 12 02 FB | 	rdlong	arg01, objptr
024e8     52 00 00 FF 
024ec     74 E4 85 F1 | 	sub	objptr, ##42100
024f0     26 01 00 FF 
024f4     21 14 06 F6 | 	mov	arg02, ##@LR__4131
024f8     74 36 B1 FD | 	call	#__system___string_cmp
024fc     00 FA 0D F2 | 	cmp	result1, #0 wz
02500     0C 04 90 AD |  if_e	jmp	#LR__0127
02504     52 00 00 FF 
02508     74 E4 05 F1 | 	add	objptr, ##42100
0250c     F2 1E 02 FB | 	rdlong	local01, objptr
02510     24 00 00 FF 
02514     94 E4 85 F1 | 	sub	objptr, ##18580
02518     F2 1E 62 FC | 	wrlong	local01, objptr
0251c     08 E4 05 F1 | 	add	objptr, #8
02520     F2 08 68 FC | 	wrlong	#4, objptr
02524     2D 00 00 FF 
02528     E8 E5 85 F1 | 	sub	objptr, ##23528
0252c     38 E5 9F FD | 	jmp	#LR__0020
02530                 | LR__0114
02530                 | '       							
02530                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
02530     01 20 16 F2 | 	cmp	local02, #1 wc
02534     E4 00 90 CD |  if_b	jmp	#LR__0117
02538     2D 00 00 FF 
0253c     E8 E5 05 F1 | 	add	objptr, ##23528
02540     F2 1E 02 FB | 	rdlong	local01, objptr
02544     2D 00 00 FF 
02548     E8 E5 85 F1 | 	sub	objptr, ##23528
0254c     01 1E 0E F2 | 	cmp	local01, #1 wz
02550     20 00 90 AD |  if_e	jmp	#LR__0115
02554     2D 00 00 FF 
02558     E8 E5 05 F1 | 	add	objptr, ##23528
0255c     F2 28 02 FB | 	rdlong	local06, objptr
02560     2D 00 00 FF 
02564     E8 E5 85 F1 | 	sub	objptr, ##23528
02568     14 31 02 F6 | 	mov	local10, local06
0256c     02 30 0E F2 | 	cmp	local10, #2 wz
02570     A8 00 90 5D |  if_ne	jmp	#LR__0117
02574                 | LR__0115
02574     2B 00 00 FF 
02578     DC E5 05 F1 | 	add	objptr, ##22492
0257c     F2 34 02 FB | 	rdlong	local12, objptr
02580     2B 00 00 FF 
02584     DC E5 85 F1 | 	sub	objptr, ##22492
02588     1A 2B 02 F6 | 	mov	local07, local12
0258c     1B 2A 0E F2 | 	cmp	local07, #27 wz
02590     88 00 90 AD |  if_e	jmp	#LR__0117
02594     2D 00 00 FF 
02598     E8 E5 05 F1 | 	add	objptr, ##23528
0259c     F2 16 02 FB | 	rdlong	arg03, objptr
025a0     2D 00 00 FF 
025a4     E8 E5 85 F1 | 	sub	objptr, ##23528
025a8     10 13 02 F6 | 	mov	arg01, local02
025ac     00 14 06 F6 | 	mov	arg02, #0
025b0     98 2A B0 FD | 	call	#_compile
025b4     FD 22 0A F6 | 	mov	local03, result1 wz
025b8                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
025b8                 | '   if err<>0 then printerror(err): goto 104
025b8     0C 00 90 AD |  if_e	jmp	#LR__0116
025bc     11 13 02 F6 | 	mov	arg01, local03
025c0     64 00 B1 FD | 	call	#_printerror
025c4     48 03 90 FD | 	jmp	#LR__0127
025c8                 | LR__0116
025c8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
025c8     52 00 00 FF 
025cc     74 E4 05 F1 | 	add	objptr, ##42100
025d0     F2 12 02 FB | 	rdlong	arg01, objptr
025d4     52 00 00 FF 
025d8     74 E4 85 F1 | 	sub	objptr, ##42100
025dc     26 01 00 FF 
025e0     22 14 06 F6 | 	mov	arg02, ##@LR__4132
025e4     88 35 B1 FD | 	call	#__system___string_cmp
025e8     00 FA 0D F2 | 	cmp	result1, #0 wz
025ec     20 03 90 AD |  if_e	jmp	#LR__0127
025f0     52 00 00 FF 
025f4     74 E4 05 F1 | 	add	objptr, ##42100
025f8     F2 1E 02 FB | 	rdlong	local01, objptr
025fc     24 00 00 FF 
02600     94 E4 85 F1 | 	sub	objptr, ##18580
02604     F2 1E 62 FC | 	wrlong	local01, objptr
02608     08 E4 05 F1 | 	add	objptr, #8
0260c     F2 08 68 FC | 	wrlong	#4, objptr
02610     2D 00 00 FF 
02614     E8 E5 85 F1 | 	sub	objptr, ##23528
02618     4C E4 9F FD | 	jmp	#LR__0020
0261c                 | LR__0117
0261c                 | ' 							 
0261c                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
0261c     01 20 16 F2 | 	cmp	local02, #1 wc
02620     C0 00 90 CD |  if_b	jmp	#LR__0118
02624     2D 00 00 FF 
02628     E8 E5 05 F1 | 	add	objptr, ##23528
0262c     F2 1E 0A FB | 	rdlong	local01, objptr wz
02630     2D 00 00 FF 
02634     E8 E5 85 F1 | 	sub	objptr, ##23528
02638     2D 00 00 5F 
0263c     E8 E5 05 51 |  if_ne	add	objptr, ##23528
02640     F2 28 02 5B |  if_ne	rdlong	local06, objptr
02644     2D 00 00 5F 
02648     E8 E5 85 51 |  if_ne	sub	objptr, ##23528
0264c     03 28 0E 52 |  if_ne	cmp	local06, #3 wz
02650     2B 00 00 AF 
02654     E4 E5 05 A1 |  if_e	add	objptr, ##22500
02658     F2 34 02 AB |  if_e	rdlong	local12, objptr
0265c     2B 00 00 AF 
02660     E4 E5 85 A1 |  if_e	sub	objptr, ##22500
02664     1A 2B 02 A6 |  if_e	mov	local07, local12
02668     1B 2A 0E A2 |  if_e	cmp	local07, #27 wz
0266c     74 00 90 5D |  if_ne	jmp	#LR__0118
02670     2D 00 00 FF 
02674     E8 E5 05 F1 | 	add	objptr, ##23528
02678     F2 16 02 FB | 	rdlong	arg03, objptr
0267c     2D 00 00 FF 
02680     E8 E5 85 F1 | 	sub	objptr, ##23528
02684     10 13 02 F6 | 	mov	arg01, local02
02688     00 14 06 F6 | 	mov	arg02, #0
0268c     8C 2A B0 FD | 	call	#_compile_assign
02690                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
02690                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
02690     52 00 00 FF 
02694     74 E4 05 F1 | 	add	objptr, ##42100
02698     F2 12 02 FB | 	rdlong	arg01, objptr
0269c     52 00 00 FF 
026a0     74 E4 85 F1 | 	sub	objptr, ##42100
026a4     26 01 00 FF 
026a8     23 14 06 F6 | 	mov	arg02, ##@LR__4133
026ac     C0 34 B1 FD | 	call	#__system___string_cmp
026b0     00 FA 0D F2 | 	cmp	result1, #0 wz
026b4     58 02 90 AD |  if_e	jmp	#LR__0127
026b8     52 00 00 FF 
026bc     74 E4 05 F1 | 	add	objptr, ##42100
026c0     F2 1E 02 FB | 	rdlong	local01, objptr
026c4     24 00 00 FF 
026c8     94 E4 85 F1 | 	sub	objptr, ##18580
026cc     F2 1E 62 FC | 	wrlong	local01, objptr
026d0     08 E4 05 F1 | 	add	objptr, #8
026d4     F2 08 68 FC | 	wrlong	#4, objptr
026d8     2D 00 00 FF 
026dc     E8 E5 85 F1 | 	sub	objptr, ##23528
026e0     84 E3 9F FD | 	jmp	#LR__0020
026e4                 | LR__0118
026e4                 | '     							 
026e4                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
026e4     01 20 16 F2 | 	cmp	local02, #1 wc
026e8     C0 00 90 CD |  if_b	jmp	#LR__0119
026ec     2D 00 00 FF 
026f0     E8 E5 05 F1 | 	add	objptr, ##23528
026f4     F2 1E 02 FB | 	rdlong	local01, objptr
026f8     2D 00 00 FF 
026fc     E8 E5 85 F1 | 	sub	objptr, ##23528
02700     01 1E 0E F2 | 	cmp	local01, #1 wz
02704     2D 00 00 5F 
02708     E8 E5 05 51 |  if_ne	add	objptr, ##23528
0270c     F2 30 02 5B |  if_ne	rdlong	local10, objptr
02710     2D 00 00 5F 
02714     E8 E5 85 51 |  if_ne	sub	objptr, ##23528
02718     02 30 0E 52 |  if_ne	cmp	local10, #2 wz
0271c     2B 00 00 AF 
02720     DC E5 05 A1 |  if_e	add	objptr, ##22492
02724     F2 34 02 AB |  if_e	rdlong	local12, objptr
02728     2B 00 00 AF 
0272c     DC E5 85 A1 |  if_e	sub	objptr, ##22492
02730     1B 34 0E A2 |  if_e	cmp	local12, #27 wz
02734     74 00 90 5D |  if_ne	jmp	#LR__0119
02738     2D 00 00 FF 
0273c     E8 E5 05 F1 | 	add	objptr, ##23528
02740     F2 16 02 FB | 	rdlong	arg03, objptr
02744     2D 00 00 FF 
02748     E8 E5 85 F1 | 	sub	objptr, ##23528
0274c     10 13 02 F6 | 	mov	arg01, local02
02750     00 14 06 F6 | 	mov	arg02, #0
02754     C4 29 B0 FD | 	call	#_compile_assign
02758                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
02758                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
02758     52 00 00 FF 
0275c     74 E4 05 F1 | 	add	objptr, ##42100
02760     F2 12 02 FB | 	rdlong	arg01, objptr
02764     52 00 00 FF 
02768     74 E4 85 F1 | 	sub	objptr, ##42100
0276c     26 01 00 FF 
02770     24 14 06 F6 | 	mov	arg02, ##@LR__4134
02774     F8 33 B1 FD | 	call	#__system___string_cmp
02778     00 FA 0D F2 | 	cmp	result1, #0 wz
0277c     90 01 90 AD |  if_e	jmp	#LR__0127
02780     52 00 00 FF 
02784     74 E4 05 F1 | 	add	objptr, ##42100
02788     F2 1E 02 FB | 	rdlong	local01, objptr
0278c     24 00 00 FF 
02790     94 E4 85 F1 | 	sub	objptr, ##18580
02794     F2 1E 62 FC | 	wrlong	local01, objptr
02798     08 E4 05 F1 | 	add	objptr, #8
0279c     F2 08 68 FC | 	wrlong	#4, objptr
027a0     2D 00 00 FF 
027a4     E8 E5 85 F1 | 	sub	objptr, ##23528
027a8     BC E2 9F FD | 	jmp	#LR__0020
027ac                 | LR__0119
027ac                 | ' 
027ac                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
027ac     2B 00 00 FF 
027b0     D4 E5 05 F1 | 	add	objptr, ##22484
027b4     F2 1E 02 FB | 	rdlong	local01, objptr
027b8     2B 00 00 FF 
027bc     D4 E5 85 F1 | 	sub	objptr, ##22484
027c0     01 00 00 FF 
027c4     04 1E 0E F2 | 	cmp	local01, ##516 wz
027c8     2B 00 00 AF 
027cc     DC E5 05 A1 |  if_e	add	objptr, ##22492
027d0     F2 30 02 AB |  if_e	rdlong	local10, objptr
027d4     2B 00 00 AF 
027d8     DC E5 85 A1 |  if_e	sub	objptr, ##22492
027dc     1B 30 0E A2 |  if_e	cmp	local10, #27 wz
027e0     14 00 90 5D |  if_ne	jmp	#LR__0120
027e4     00 12 06 F6 | 	mov	arg01, #0
027e8     00 14 06 F6 | 	mov	arg02, #0
027ec     00 16 06 F6 | 	mov	arg03, #0
027f0     28 29 B0 FD | 	call	#_compile_assign
027f4     90 00 90 FD | 	jmp	#LR__0122
027f8                 | LR__0120
027f8                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
027f8     2B 00 00 FF 
027fc     D4 E5 05 F1 | 	add	objptr, ##22484
02800     F2 1E 02 FB | 	rdlong	local01, objptr
02804     2B 00 00 FF 
02808     D4 E5 85 F1 | 	sub	objptr, ##22484
0280c     01 00 00 FF 
02810     04 1E 0E F2 | 	cmp	local01, ##516 wz
02814     2B 00 00 AF 
02818     DC E5 05 A1 |  if_e	add	objptr, ##22492
0281c     F2 30 02 AB |  if_e	rdlong	local10, objptr
02820     2B 00 00 AF 
02824     DC E5 85 A1 |  if_e	sub	objptr, ##22492
02828     14 30 0E A2 |  if_e	cmp	local10, #20 wz
0282c     44 00 90 5D |  if_ne	jmp	#LR__0121
02830     00 12 06 F6 | 	mov	arg01, #0
02834     C0 87 B1 FD | 	call	#__system___getiolock_0372
02838     FD 12 02 F6 | 	mov	arg01, result1
0283c     08 33 B1 FD | 	call	#__system___lockmem
02840     26 01 00 FF 
02844     25 14 06 F6 | 	mov	arg02, ##@LR__4135
02848     00 12 06 F6 | 	mov	arg01, #0
0284c     00 16 06 F6 | 	mov	arg03, #0
02850     E8 3F B1 FD | 	call	#__system___basic_print_string
02854     00 12 06 F6 | 	mov	arg01, #0
02858     0A 14 06 F6 | 	mov	arg02, #10
0285c     00 16 06 F6 | 	mov	arg03, #0
02860     80 3F B1 FD | 	call	#__system___basic_print_char
02864     00 12 06 F6 | 	mov	arg01, #0
02868     8C 87 B1 FD | 	call	#__system___getiolock_0372
0286c     FD 00 68 FC | 	wrlong	#0, result1
02870     7C 00 90 FD | 	jmp	#LR__0126
02874                 | LR__0121
02874     00 12 06 F6 | 	mov	arg01, #0
02878     00 14 06 F6 | 	mov	arg02, #0
0287c     00 16 06 F6 | 	mov	arg03, #0
02880     C8 27 B0 FD | 	call	#_compile
02884     FD 22 02 F6 | 	mov	local03, result1
02888                 | LR__0122
02888                 | ' 
02888                 | ' ' if we are here, this is not a program line to add, so try to execute this
02888                 | ' 
02888                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
02888                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
02888                 | ' if err=0 then execute_line() else printerror(err)
02888     00 22 0E F2 | 	cmp	local03, #0 wz
0288c     0C 00 90 5D |  if_ne	jmp	#LR__0123
02890     00 12 06 F6 | 	mov	arg01, #0
02894     74 61 B0 FD | 	call	#_execute_line
02898     08 00 90 FD | 	jmp	#LR__0124
0289c                 | LR__0123
0289c     11 13 02 F6 | 	mov	arg01, local03
028a0     84 FD B0 FD | 	call	#_printerror
028a4                 | LR__0124
028a4                 | ' if rest$<>"" then line$=rest$:  goto 108 
028a4     52 00 00 FF 
028a8     74 E4 05 F1 | 	add	objptr, ##42100
028ac     F2 12 02 FB | 	rdlong	arg01, objptr
028b0     52 00 00 FF 
028b4     74 E4 85 F1 | 	sub	objptr, ##42100
028b8     26 01 00 FF 
028bc     54 14 06 F6 | 	mov	arg02, ##@LR__4136
028c0     AC 32 B1 FD | 	call	#__system___string_cmp
028c4     00 FA 0D F2 | 	cmp	result1, #0 wz
028c8     24 00 90 AD |  if_e	jmp	#LR__0125
028cc     52 00 00 FF 
028d0     74 E4 05 F1 | 	add	objptr, ##42100
028d4     F2 1E 02 FB | 	rdlong	local01, objptr
028d8     24 00 00 FF 
028dc     94 E4 85 F1 | 	sub	objptr, ##18580
028e0     F2 1E 62 FC | 	wrlong	local01, objptr
028e4     2D 00 00 FF 
028e8     E0 E5 85 F1 | 	sub	objptr, ##23520
028ec     78 E1 9F FD | 	jmp	#LR__0020
028f0                 | LR__0125
028f0                 | LR__0126
028f0     26 01 00 FF 
028f4     55 12 06 F6 | 	mov	arg01, ##@LR__4137
028f8                 | ' 
028f8                 | ' write(text)
028f8     28 22 B1 FD | 	call	#_hg010b_spin2_write
028fc                 | ' crlf
028fc     84 23 B1 FD | 	call	#_hg010b_spin2_crlf
02900     26 01 00 FF 
02904     56 12 06 F6 | 	mov	arg01, ##@LR__4138
02908                 | ' 
02908                 | ' write(text)
02908     18 22 B1 FD | 	call	#_hg010b_spin2_write
0290c                 | ' crlf
0290c     74 23 B1 FD | 	call	#_hg010b_spin2_crlf
02910                 | LR__0127
02910     A7 F0 03 F6 | 	mov	ptra, fp
02914     B2 00 A0 FD | 	call	#popregs_
02918                 | _interpret_ret
02918     2D 00 64 FD | 	ret
0291c                 | 
0291c                 | ' 
0291c                 | ' 
0291c                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
0291c                 | ' 
0291c                 | ' function isoperator(s as string) as ubyte
0291c                 | _isoperator
0291c     01 4A 05 F6 | 	mov	COUNT_, #1
02920     A8 00 A0 FD | 	call	#pushregs_
02924                 | ' 
02924                 | ' select case s
02924     09 1F 02 F6 | 	mov	local01, arg01
02928     26 01 00 FF 
0292c     5C 14 06 F6 | 	mov	arg02, ##@LR__4139
02930     0F 13 02 F6 | 	mov	arg01, local01
02934     38 32 B1 FD | 	call	#__system___string_cmp
02938     00 FA 0D F2 | 	cmp	result1, #0 wz
0293c     FC 01 90 AD |  if_e	jmp	#LR__0130
02940     26 01 00 FF 
02944     5E 14 06 F6 | 	mov	arg02, ##@LR__4140
02948     0F 13 02 F6 | 	mov	arg01, local01
0294c     20 32 B1 FD | 	call	#__system___string_cmp
02950     00 FA 0D F2 | 	cmp	result1, #0 wz
02954     EC 01 90 AD |  if_e	jmp	#LR__0131
02958     26 01 00 FF 
0295c     60 14 06 F6 | 	mov	arg02, ##@LR__4141
02960     0F 13 02 F6 | 	mov	arg01, local01
02964     08 32 B1 FD | 	call	#__system___string_cmp
02968     00 FA 0D F2 | 	cmp	result1, #0 wz
0296c     DC 01 90 AD |  if_e	jmp	#LR__0132
02970     26 01 00 FF 
02974     63 14 06 F6 | 	mov	arg02, ##@LR__4142
02978     0F 13 02 F6 | 	mov	arg01, local01
0297c     F0 31 B1 FD | 	call	#__system___string_cmp
02980     00 FA 0D F2 | 	cmp	result1, #0 wz
02984     CC 01 90 AD |  if_e	jmp	#LR__0133
02988     26 01 00 FF 
0298c     67 14 06 F6 | 	mov	arg02, ##@LR__4143
02990     0F 13 02 F6 | 	mov	arg01, local01
02994     D8 31 B1 FD | 	call	#__system___string_cmp
02998     00 FA 0D F2 | 	cmp	result1, #0 wz
0299c     BC 01 90 AD |  if_e	jmp	#LR__0134
029a0     26 01 00 FF 
029a4     69 14 06 F6 | 	mov	arg02, ##@LR__4144
029a8     0F 13 02 F6 | 	mov	arg01, local01
029ac     C0 31 B1 FD | 	call	#__system___string_cmp
029b0     00 FA 0D F2 | 	cmp	result1, #0 wz
029b4     AC 01 90 AD |  if_e	jmp	#LR__0135
029b8     26 01 00 FF 
029bc     6B 14 06 F6 | 	mov	arg02, ##@LR__4145
029c0     0F 13 02 F6 | 	mov	arg01, local01
029c4     A8 31 B1 FD | 	call	#__system___string_cmp
029c8     00 FA 0D F2 | 	cmp	result1, #0 wz
029cc     9C 01 90 AD |  if_e	jmp	#LR__0136
029d0     26 01 00 FF 
029d4     6F 14 06 F6 | 	mov	arg02, ##@LR__4146
029d8     0F 13 02 F6 | 	mov	arg01, local01
029dc     90 31 B1 FD | 	call	#__system___string_cmp
029e0     00 FA 0D F2 | 	cmp	result1, #0 wz
029e4     8C 01 90 AD |  if_e	jmp	#LR__0137
029e8     26 01 00 FF 
029ec     73 14 06 F6 | 	mov	arg02, ##@LR__4147
029f0     0F 13 02 F6 | 	mov	arg01, local01
029f4     78 31 B1 FD | 	call	#__system___string_cmp
029f8     00 FA 0D F2 | 	cmp	result1, #0 wz
029fc     7C 01 90 AD |  if_e	jmp	#LR__0138
02a00     26 01 00 FF 
02a04     77 14 06 F6 | 	mov	arg02, ##@LR__4148
02a08     0F 13 02 F6 | 	mov	arg01, local01
02a0c     60 31 B1 FD | 	call	#__system___string_cmp
02a10     00 FA 0D F2 | 	cmp	result1, #0 wz
02a14     6C 01 90 AD |  if_e	jmp	#LR__0139
02a18     26 01 00 FF 
02a1c     7B 14 06 F6 | 	mov	arg02, ##@LR__4149
02a20     0F 13 02 F6 | 	mov	arg01, local01
02a24     48 31 B1 FD | 	call	#__system___string_cmp
02a28     00 FA 0D F2 | 	cmp	result1, #0 wz
02a2c     5C 01 90 AD |  if_e	jmp	#LR__0140
02a30     26 01 00 FF 
02a34     7F 14 06 F6 | 	mov	arg02, ##@LR__4150
02a38     0F 13 02 F6 | 	mov	arg01, local01
02a3c     30 31 B1 FD | 	call	#__system___string_cmp
02a40     00 FA 0D F2 | 	cmp	result1, #0 wz
02a44     4C 01 90 AD |  if_e	jmp	#LR__0141
02a48     26 01 00 FF 
02a4c     81 14 06 F6 | 	mov	arg02, ##@LR__4151
02a50     0F 13 02 F6 | 	mov	arg01, local01
02a54     18 31 B1 FD | 	call	#__system___string_cmp
02a58     00 FA 0D F2 | 	cmp	result1, #0 wz
02a5c     3C 01 90 AD |  if_e	jmp	#LR__0142
02a60     26 01 00 FF 
02a64     85 14 06 F6 | 	mov	arg02, ##@LR__4152
02a68     0F 13 02 F6 | 	mov	arg01, local01
02a6c     00 31 B1 FD | 	call	#__system___string_cmp
02a70     00 FA 0D F2 | 	cmp	result1, #0 wz
02a74     2C 01 90 AD |  if_e	jmp	#LR__0143
02a78     26 01 00 FF 
02a7c     87 14 06 F6 | 	mov	arg02, ##@LR__4153
02a80     0F 13 02 F6 | 	mov	arg01, local01
02a84     E8 30 B1 FD | 	call	#__system___string_cmp
02a88     00 FA 0D F2 | 	cmp	result1, #0 wz
02a8c     1C 01 90 AD |  if_e	jmp	#LR__0144
02a90     26 01 00 FF 
02a94     89 14 06 F6 | 	mov	arg02, ##@LR__4154
02a98     0F 13 02 F6 | 	mov	arg01, local01
02a9c     D0 30 B1 FD | 	call	#__system___string_cmp
02aa0     00 FA 0D F2 | 	cmp	result1, #0 wz
02aa4     0C 01 90 AD |  if_e	jmp	#LR__0145
02aa8     26 01 00 FF 
02aac     8C 14 06 F6 | 	mov	arg02, ##@LR__4155
02ab0     0F 13 02 F6 | 	mov	arg01, local01
02ab4     B8 30 B1 FD | 	call	#__system___string_cmp
02ab8     00 FA 0D F2 | 	cmp	result1, #0 wz
02abc     FC 00 90 AD |  if_e	jmp	#LR__0146
02ac0     26 01 00 FF 
02ac4     8F 14 06 F6 | 	mov	arg02, ##@LR__4156
02ac8     0F 13 02 F6 | 	mov	arg01, local01
02acc     A0 30 B1 FD | 	call	#__system___string_cmp
02ad0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ad4     EC 00 90 AD |  if_e	jmp	#LR__0147
02ad8     26 01 00 FF 
02adc     91 14 06 F6 | 	mov	arg02, ##@LR__4157
02ae0     0F 13 02 F6 | 	mov	arg01, local01
02ae4     88 30 B1 FD | 	call	#__system___string_cmp
02ae8     00 FA 0D F2 | 	cmp	result1, #0 wz
02aec     DC 00 90 AD |  if_e	jmp	#LR__0148
02af0     26 01 00 FF 
02af4     93 14 06 F6 | 	mov	arg02, ##@LR__4158
02af8     0F 13 02 F6 | 	mov	arg01, local01
02afc     70 30 B1 FD | 	call	#__system___string_cmp
02b00     00 FA 0D F2 | 	cmp	result1, #0 wz
02b04     CC 00 90 AD |  if_e	jmp	#LR__0149
02b08     26 01 00 FF 
02b0c     96 14 06 F6 | 	mov	arg02, ##@LR__4159
02b10     0F 13 02 F6 | 	mov	arg01, local01
02b14     58 30 B1 FD | 	call	#__system___string_cmp
02b18     00 FA 0D F2 | 	cmp	result1, #0 wz
02b1c     BC 00 90 AD |  if_e	jmp	#LR__0150
02b20     26 01 00 FF 
02b24     99 14 06 F6 | 	mov	arg02, ##@LR__4160
02b28     0F 13 02 F6 | 	mov	arg01, local01
02b2c     40 30 B1 FD | 	call	#__system___string_cmp
02b30     00 FA 0D F2 | 	cmp	result1, #0 wz
02b34     AC 00 90 AD |  if_e	jmp	#LR__0151
02b38     B0 00 90 FD | 	jmp	#LR__0152
02b3c                 | LR__0130
02b3c     01 FA 05 F6 | 	mov	result1, #1
02b40     AC 00 90 FD | 	jmp	#LR__0153
02b44                 | LR__0131
02b44     02 FA 05 F6 | 	mov	result1, #2
02b48     A4 00 90 FD | 	jmp	#LR__0153
02b4c                 | LR__0132
02b4c     03 FA 05 F6 | 	mov	result1, #3
02b50     9C 00 90 FD | 	jmp	#LR__0153
02b54                 | LR__0133
02b54     04 FA 05 F6 | 	mov	result1, #4
02b58     94 00 90 FD | 	jmp	#LR__0153
02b5c                 | LR__0134
02b5c     05 FA 05 F6 | 	mov	result1, #5
02b60     8C 00 90 FD | 	jmp	#LR__0153
02b64                 | LR__0135
02b64     06 FA 05 F6 | 	mov	result1, #6
02b68     84 00 90 FD | 	jmp	#LR__0153
02b6c                 | LR__0136
02b6c     07 FA 05 F6 | 	mov	result1, #7
02b70     7C 00 90 FD | 	jmp	#LR__0153
02b74                 | LR__0137
02b74     08 FA 05 F6 | 	mov	result1, #8
02b78     74 00 90 FD | 	jmp	#LR__0153
02b7c                 | LR__0138
02b7c     09 FA 05 F6 | 	mov	result1, #9
02b80     6C 00 90 FD | 	jmp	#LR__0153
02b84                 | LR__0139
02b84     0A FA 05 F6 | 	mov	result1, #10
02b88     64 00 90 FD | 	jmp	#LR__0153
02b8c                 | LR__0140
02b8c     0B FA 05 F6 | 	mov	result1, #11
02b90     5C 00 90 FD | 	jmp	#LR__0153
02b94                 | LR__0141
02b94     0C FA 05 F6 | 	mov	result1, #12
02b98     54 00 90 FD | 	jmp	#LR__0153
02b9c                 | LR__0142
02b9c     0D FA 05 F6 | 	mov	result1, #13
02ba0     4C 00 90 FD | 	jmp	#LR__0153
02ba4                 | LR__0143
02ba4     0E FA 05 F6 | 	mov	result1, #14
02ba8     44 00 90 FD | 	jmp	#LR__0153
02bac                 | LR__0144
02bac     1B FA 05 F6 | 	mov	result1, #27
02bb0     3C 00 90 FD | 	jmp	#LR__0153
02bb4                 | LR__0145
02bb4     27 FA 05 F6 | 	mov	result1, #39
02bb8     34 00 90 FD | 	jmp	#LR__0153
02bbc                 | LR__0146
02bbc     26 FA 05 F6 | 	mov	result1, #38
02bc0     2C 00 90 FD | 	jmp	#LR__0153
02bc4                 | LR__0147
02bc4     10 FA 05 F6 | 	mov	result1, #16
02bc8     24 00 90 FD | 	jmp	#LR__0153
02bcc                 | LR__0148
02bcc     0F FA 05 F6 | 	mov	result1, #15
02bd0     1C 00 90 FD | 	jmp	#LR__0153
02bd4                 | LR__0149
02bd4     2A FA 05 F6 | 	mov	result1, #42
02bd8     14 00 90 FD | 	jmp	#LR__0153
02bdc                 | LR__0150
02bdc     28 FA 05 F6 | 	mov	result1, #40
02be0     0C 00 90 FD | 	jmp	#LR__0153
02be4                 | LR__0151
02be4     29 FA 05 F6 | 	mov	result1, #41
02be8     04 00 90 FD | 	jmp	#LR__0153
02bec                 | LR__0152
02bec     00 FA 05 F6 | 	mov	result1, #0
02bf0                 | LR__0153
02bf0     A7 F0 03 F6 | 	mov	ptra, fp
02bf4     B2 00 A0 FD | 	call	#popregs_
02bf8                 | _isoperator_ret
02bf8     2D 00 64 FD | 	ret
02bfc                 | 
02bfc                 | ' 
02bfc                 | ' function isseparator(s as string) as ubyte
02bfc                 | _isseparator
02bfc     01 4A 05 F6 | 	mov	COUNT_, #1
02c00     A8 00 A0 FD | 	call	#pushregs_
02c04                 | ' 
02c04                 | ' select case s
02c04     09 1F 02 F6 | 	mov	local01, arg01
02c08     26 01 00 FF 
02c0c     9C 14 06 F6 | 	mov	arg02, ##@LR__4161
02c10     0F 13 02 F6 | 	mov	arg01, local01
02c14     58 2F B1 FD | 	call	#__system___string_cmp
02c18     00 FA 0D F2 | 	cmp	result1, #0 wz
02c1c     54 01 90 AD |  if_e	jmp	#LR__0160
02c20     26 01 00 FF 
02c24     9E 14 06 F6 | 	mov	arg02, ##@LR__4162
02c28     0F 13 02 F6 | 	mov	arg01, local01
02c2c     40 2F B1 FD | 	call	#__system___string_cmp
02c30     00 FA 0D F2 | 	cmp	result1, #0 wz
02c34     44 01 90 AD |  if_e	jmp	#LR__0161
02c38     26 01 00 FF 
02c3c     A0 14 06 F6 | 	mov	arg02, ##@LR__4163
02c40     0F 13 02 F6 | 	mov	arg01, local01
02c44     28 2F B1 FD | 	call	#__system___string_cmp
02c48     00 FA 0D F2 | 	cmp	result1, #0 wz
02c4c     34 01 90 AD |  if_e	jmp	#LR__0162
02c50     26 01 00 FF 
02c54     A2 14 06 F6 | 	mov	arg02, ##@LR__4164
02c58     0F 13 02 F6 | 	mov	arg01, local01
02c5c     10 2F B1 FD | 	call	#__system___string_cmp
02c60     00 FA 0D F2 | 	cmp	result1, #0 wz
02c64     24 01 90 AD |  if_e	jmp	#LR__0163
02c68     26 01 00 FF 
02c6c     A4 14 06 F6 | 	mov	arg02, ##@LR__4165
02c70     0F 13 02 F6 | 	mov	arg01, local01
02c74     F8 2E B1 FD | 	call	#__system___string_cmp
02c78     00 FA 0D F2 | 	cmp	result1, #0 wz
02c7c     14 01 90 AD |  if_e	jmp	#LR__0164
02c80     26 01 00 FF 
02c84     A6 14 06 F6 | 	mov	arg02, ##@LR__4166
02c88     0F 13 02 F6 | 	mov	arg01, local01
02c8c     E0 2E B1 FD | 	call	#__system___string_cmp
02c90     00 FA 0D F2 | 	cmp	result1, #0 wz
02c94     04 01 90 AD |  if_e	jmp	#LR__0165
02c98     26 01 00 FF 
02c9c     A8 14 06 F6 | 	mov	arg02, ##@LR__4167
02ca0     0F 13 02 F6 | 	mov	arg01, local01
02ca4     C8 2E B1 FD | 	call	#__system___string_cmp
02ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
02cac     F4 00 90 AD |  if_e	jmp	#LR__0166
02cb0     26 01 00 FF 
02cb4     AA 14 06 F6 | 	mov	arg02, ##@LR__4168
02cb8     0F 13 02 F6 | 	mov	arg01, local01
02cbc     B0 2E B1 FD | 	call	#__system___string_cmp
02cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
02cc4     E4 00 90 AD |  if_e	jmp	#LR__0167
02cc8     26 01 00 FF 
02ccc     AC 14 06 F6 | 	mov	arg02, ##@LR__4169
02cd0     0F 13 02 F6 | 	mov	arg01, local01
02cd4     98 2E B1 FD | 	call	#__system___string_cmp
02cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
02cdc     D4 00 90 AD |  if_e	jmp	#LR__0168
02ce0     26 01 00 FF 
02ce4     AE 14 06 F6 | 	mov	arg02, ##@LR__4170
02ce8     0F 13 02 F6 | 	mov	arg01, local01
02cec     80 2E B1 FD | 	call	#__system___string_cmp
02cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
02cf4     C4 00 90 AD |  if_e	jmp	#LR__0169
02cf8     26 01 00 FF 
02cfc     B0 14 06 F6 | 	mov	arg02, ##@LR__4171
02d00     0F 13 02 F6 | 	mov	arg01, local01
02d04     68 2E B1 FD | 	call	#__system___string_cmp
02d08     00 FA 0D F2 | 	cmp	result1, #0 wz
02d0c     B4 00 90 AD |  if_e	jmp	#LR__0170
02d10     26 01 00 FF 
02d14     B2 14 06 F6 | 	mov	arg02, ##@LR__4172
02d18     0F 13 02 F6 | 	mov	arg01, local01
02d1c     50 2E B1 FD | 	call	#__system___string_cmp
02d20     00 FA 0D F2 | 	cmp	result1, #0 wz
02d24     A4 00 90 AD |  if_e	jmp	#LR__0171
02d28     26 01 00 FF 
02d2c     B4 14 06 F6 | 	mov	arg02, ##@LR__4173
02d30     0F 13 02 F6 | 	mov	arg01, local01
02d34     38 2E B1 FD | 	call	#__system___string_cmp
02d38     00 FA 0D F2 | 	cmp	result1, #0 wz
02d3c     94 00 90 AD |  if_e	jmp	#LR__0172
02d40     26 01 00 FF 
02d44     B6 14 06 F6 | 	mov	arg02, ##@LR__4174
02d48     0F 13 02 F6 | 	mov	arg01, local01
02d4c     20 2E B1 FD | 	call	#__system___string_cmp
02d50     00 FA 0D F2 | 	cmp	result1, #0 wz
02d54     84 00 90 AD |  if_e	jmp	#LR__0173
02d58     26 01 00 FF 
02d5c     B8 14 06 F6 | 	mov	arg02, ##@LR__4175
02d60     0F 13 02 F6 | 	mov	arg01, local01
02d64     08 2E B1 FD | 	call	#__system___string_cmp
02d68     00 FA 0D F2 | 	cmp	result1, #0 wz
02d6c     74 00 90 AD |  if_e	jmp	#LR__0174
02d70     78 00 90 FD | 	jmp	#LR__0175
02d74                 | LR__0160
02d74     01 FA 05 F6 | 	mov	result1, #1
02d78     74 00 90 FD | 	jmp	#LR__0176
02d7c                 | LR__0161
02d7c     02 FA 05 F6 | 	mov	result1, #2
02d80     6C 00 90 FD | 	jmp	#LR__0176
02d84                 | LR__0162
02d84     1B FA 05 F6 | 	mov	result1, #27
02d88     64 00 90 FD | 	jmp	#LR__0176
02d8c                 | LR__0163
02d8c     11 FA 05 F6 | 	mov	result1, #17
02d90     5C 00 90 FD | 	jmp	#LR__0176
02d94                 | LR__0164
02d94     05 FA 05 F6 | 	mov	result1, #5
02d98     54 00 90 FD | 	jmp	#LR__0176
02d9c                 | LR__0165
02d9c     06 FA 05 F6 | 	mov	result1, #6
02da0     4C 00 90 FD | 	jmp	#LR__0176
02da4                 | LR__0166
02da4     12 FA 05 F6 | 	mov	result1, #18
02da8     44 00 90 FD | 	jmp	#LR__0176
02dac                 | LR__0167
02dac     13 FA 05 F6 | 	mov	result1, #19
02db0     3C 00 90 FD | 	jmp	#LR__0176
02db4                 | LR__0168
02db4     0C FA 05 F6 | 	mov	result1, #12
02db8     34 00 90 FD | 	jmp	#LR__0176
02dbc                 | LR__0169
02dbc     14 FA 05 F6 | 	mov	result1, #20
02dc0     2C 00 90 FD | 	jmp	#LR__0176
02dc4                 | LR__0170
02dc4     15 FA 05 F6 | 	mov	result1, #21
02dc8     24 00 90 FD | 	jmp	#LR__0176
02dcc                 | LR__0171
02dcc     16 FA 05 F6 | 	mov	result1, #22
02dd0     1C 00 90 FD | 	jmp	#LR__0176
02dd4                 | LR__0172
02dd4     FF FB 05 F6 | 	mov	result1, #511
02dd8     14 00 90 FD | 	jmp	#LR__0176
02ddc                 | LR__0173
02ddc     0F FA 05 F6 | 	mov	result1, #15
02de0     0C 00 90 FD | 	jmp	#LR__0176
02de4                 | LR__0174
02de4     10 FA 05 F6 | 	mov	result1, #16
02de8     04 00 90 FD | 	jmp	#LR__0176
02dec                 | LR__0175
02dec     00 FA 05 F6 | 	mov	result1, #0
02df0                 | LR__0176
02df0     A7 F0 03 F6 | 	mov	ptra, fp
02df4     B2 00 A0 FD | 	call	#popregs_
02df8                 | _isseparator_ret
02df8     2D 00 64 FD | 	ret
02dfc                 | 
02dfc                 | ' 
02dfc                 | ' 
02dfc                 | ' function iscommand(s as string) as ubyte
02dfc                 | _iscommand
02dfc     01 4A 05 F6 | 	mov	COUNT_, #1
02e00     A8 00 A0 FD | 	call	#pushregs_
02e04                 | ' 
02e04                 | ' select case s
02e04     09 1F 02 F6 | 	mov	local01, arg01
02e08     26 01 00 FF 
02e0c     BC 14 06 F6 | 	mov	arg02, ##@LR__4177
02e10     0F 13 02 F6 | 	mov	arg01, local01
02e14     58 2D B1 FD | 	call	#__system___string_cmp
02e18     00 FA 0D F2 | 	cmp	result1, #0 wz
02e1c     84 04 90 AD |  if_e	jmp	#LR__0180
02e20     26 01 00 FF 
02e24     C0 14 06 F6 | 	mov	arg02, ##@LR__4178
02e28     0F 13 02 F6 | 	mov	arg01, local01
02e2c     40 2D B1 FD | 	call	#__system___string_cmp
02e30     00 FA 0D F2 | 	cmp	result1, #0 wz
02e34     74 04 90 AD |  if_e	jmp	#LR__0181
02e38     26 01 00 FF 
02e3c     C4 14 06 F6 | 	mov	arg02, ##@LR__4179
02e40     0F 13 02 F6 | 	mov	arg01, local01
02e44     28 2D B1 FD | 	call	#__system___string_cmp
02e48     00 FA 0D F2 | 	cmp	result1, #0 wz
02e4c     64 04 90 AD |  if_e	jmp	#LR__0182
02e50     26 01 00 FF 
02e54     C9 14 06 F6 | 	mov	arg02, ##@LR__4180
02e58     0F 13 02 F6 | 	mov	arg01, local01
02e5c     10 2D B1 FD | 	call	#__system___string_cmp
02e60     00 FA 0D F2 | 	cmp	result1, #0 wz
02e64     54 04 90 AD |  if_e	jmp	#LR__0183
02e68     26 01 00 FF 
02e6c     CE 14 06 F6 | 	mov	arg02, ##@LR__4181
02e70     0F 13 02 F6 | 	mov	arg01, local01
02e74     F8 2C B1 FD | 	call	#__system___string_cmp
02e78     00 FA 0D F2 | 	cmp	result1, #0 wz
02e7c     44 04 90 AD |  if_e	jmp	#LR__0184
02e80     26 01 00 FF 
02e84     D4 14 06 F6 | 	mov	arg02, ##@LR__4182
02e88     0F 13 02 F6 | 	mov	arg01, local01
02e8c     E0 2C B1 FD | 	call	#__system___string_cmp
02e90     00 FA 0D F2 | 	cmp	result1, #0 wz
02e94     34 04 90 AD |  if_e	jmp	#LR__0185
02e98     26 01 00 FF 
02e9c     DB 14 06 F6 | 	mov	arg02, ##@LR__4183
02ea0     0F 13 02 F6 | 	mov	arg01, local01
02ea4     C8 2C B1 FD | 	call	#__system___string_cmp
02ea8     00 FA 0D F2 | 	cmp	result1, #0 wz
02eac     24 04 90 AD |  if_e	jmp	#LR__0186
02eb0     26 01 00 FF 
02eb4     E3 14 06 F6 | 	mov	arg02, ##@LR__4184
02eb8     0F 13 02 F6 | 	mov	arg01, local01
02ebc     B0 2C B1 FD | 	call	#__system___string_cmp
02ec0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ec4     14 04 90 AD |  if_e	jmp	#LR__0187
02ec8     26 01 00 FF 
02ecc     E7 14 06 F6 | 	mov	arg02, ##@LR__4185
02ed0     0F 13 02 F6 | 	mov	arg01, local01
02ed4     98 2C B1 FD | 	call	#__system___string_cmp
02ed8     00 FA 0D F2 | 	cmp	result1, #0 wz
02edc     04 04 90 AD |  if_e	jmp	#LR__0188
02ee0     26 01 00 FF 
02ee4     ED 14 06 F6 | 	mov	arg02, ##@LR__4186
02ee8     0F 13 02 F6 | 	mov	arg01, local01
02eec     80 2C B1 FD | 	call	#__system___string_cmp
02ef0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ef4     F4 03 90 AD |  if_e	jmp	#LR__0189
02ef8     26 01 00 FF 
02efc     F3 14 06 F6 | 	mov	arg02, ##@LR__4187
02f00     0F 13 02 F6 | 	mov	arg01, local01
02f04     68 2C B1 FD | 	call	#__system___string_cmp
02f08     00 FA 0D F2 | 	cmp	result1, #0 wz
02f0c     E4 03 90 AD |  if_e	jmp	#LR__0190
02f10     26 01 00 FF 
02f14     F9 14 06 F6 | 	mov	arg02, ##@LR__4188
02f18     0F 13 02 F6 | 	mov	arg01, local01
02f1c     50 2C B1 FD | 	call	#__system___string_cmp
02f20     00 FA 0D F2 | 	cmp	result1, #0 wz
02f24     D4 03 90 AD |  if_e	jmp	#LR__0191
02f28     26 01 00 FF 
02f2c     FE 14 06 F6 | 	mov	arg02, ##@LR__4189
02f30     0F 13 02 F6 | 	mov	arg01, local01
02f34     38 2C B1 FD | 	call	#__system___string_cmp
02f38     00 FA 0D F2 | 	cmp	result1, #0 wz
02f3c     C4 03 90 AD |  if_e	jmp	#LR__0192
02f40     26 01 00 FF 
02f44     02 15 06 F6 | 	mov	arg02, ##@LR__4190
02f48     0F 13 02 F6 | 	mov	arg01, local01
02f4c     20 2C B1 FD | 	call	#__system___string_cmp
02f50     00 FA 0D F2 | 	cmp	result1, #0 wz
02f54     B4 03 90 AD |  if_e	jmp	#LR__0193
02f58     26 01 00 FF 
02f5c     07 15 06 F6 | 	mov	arg02, ##@LR__4191
02f60     0F 13 02 F6 | 	mov	arg01, local01
02f64     08 2C B1 FD | 	call	#__system___string_cmp
02f68     00 FA 0D F2 | 	cmp	result1, #0 wz
02f6c     A4 03 90 AD |  if_e	jmp	#LR__0194
02f70     26 01 00 FF 
02f74     0D 15 06 F6 | 	mov	arg02, ##@LR__4192
02f78     0F 13 02 F6 | 	mov	arg01, local01
02f7c     F0 2B B1 FD | 	call	#__system___string_cmp
02f80     00 FA 0D F2 | 	cmp	result1, #0 wz
02f84     94 03 90 AD |  if_e	jmp	#LR__0195
02f88     26 01 00 FF 
02f8c     12 15 06 F6 | 	mov	arg02, ##@LR__4193
02f90     0F 13 02 F6 | 	mov	arg01, local01
02f94     D8 2B B1 FD | 	call	#__system___string_cmp
02f98     00 FA 0D F2 | 	cmp	result1, #0 wz
02f9c     84 03 90 AD |  if_e	jmp	#LR__0196
02fa0     26 01 00 FF 
02fa4     17 15 06 F6 | 	mov	arg02, ##@LR__4194
02fa8     0F 13 02 F6 | 	mov	arg01, local01
02fac     C0 2B B1 FD | 	call	#__system___string_cmp
02fb0     00 FA 0D F2 | 	cmp	result1, #0 wz
02fb4     74 03 90 AD |  if_e	jmp	#LR__0197
02fb8     26 01 00 FF 
02fbc     1C 15 06 F6 | 	mov	arg02, ##@LR__4195
02fc0     0F 13 02 F6 | 	mov	arg01, local01
02fc4     A8 2B B1 FD | 	call	#__system___string_cmp
02fc8     00 FA 0D F2 | 	cmp	result1, #0 wz
02fcc     64 03 90 AD |  if_e	jmp	#LR__0198
02fd0     26 01 00 FF 
02fd4     25 15 06 F6 | 	mov	arg02, ##@LR__4196
02fd8     0F 13 02 F6 | 	mov	arg01, local01
02fdc     90 2B B1 FD | 	call	#__system___string_cmp
02fe0     00 FA 0D F2 | 	cmp	result1, #0 wz
02fe4     54 03 90 AD |  if_e	jmp	#LR__0199
02fe8     26 01 00 FF 
02fec     2C 15 06 F6 | 	mov	arg02, ##@LR__4197
02ff0     0F 13 02 F6 | 	mov	arg01, local01
02ff4     78 2B B1 FD | 	call	#__system___string_cmp
02ff8     00 FA 0D F2 | 	cmp	result1, #0 wz
02ffc     44 03 90 AD |  if_e	jmp	#LR__0200
03000     26 01 00 FF 
03004     34 15 06 F6 | 	mov	arg02, ##@LR__4198
03008     0F 13 02 F6 | 	mov	arg01, local01
0300c     60 2B B1 FD | 	call	#__system___string_cmp
03010     00 FA 0D F2 | 	cmp	result1, #0 wz
03014     34 03 90 AD |  if_e	jmp	#LR__0201
03018     26 01 00 FF 
0301c     37 15 06 F6 | 	mov	arg02, ##@LR__4199
03020     0F 13 02 F6 | 	mov	arg01, local01
03024     48 2B B1 FD | 	call	#__system___string_cmp
03028     00 FA 0D F2 | 	cmp	result1, #0 wz
0302c     24 03 90 AD |  if_e	jmp	#LR__0202
03030     26 01 00 FF 
03034     3C 15 06 F6 | 	mov	arg02, ##@LR__4200
03038     0F 13 02 F6 | 	mov	arg01, local01
0303c     30 2B B1 FD | 	call	#__system___string_cmp
03040     00 FA 0D F2 | 	cmp	result1, #0 wz
03044     14 03 90 AD |  if_e	jmp	#LR__0203
03048     26 01 00 FF 
0304c     41 15 06 F6 | 	mov	arg02, ##@LR__4201
03050     0F 13 02 F6 | 	mov	arg01, local01
03054     18 2B B1 FD | 	call	#__system___string_cmp
03058     00 FA 0D F2 | 	cmp	result1, #0 wz
0305c     04 03 90 AD |  if_e	jmp	#LR__0204
03060     26 01 00 FF 
03064     46 15 06 F6 | 	mov	arg02, ##@LR__4202
03068     0F 13 02 F6 | 	mov	arg01, local01
0306c     00 2B B1 FD | 	call	#__system___string_cmp
03070     00 FA 0D F2 | 	cmp	result1, #0 wz
03074     F4 02 90 AD |  if_e	jmp	#LR__0205
03078     26 01 00 FF 
0307c     4A 15 06 F6 | 	mov	arg02, ##@LR__4203
03080     0F 13 02 F6 | 	mov	arg01, local01
03084     E8 2A B1 FD | 	call	#__system___string_cmp
03088     00 FA 0D F2 | 	cmp	result1, #0 wz
0308c     E4 02 90 AD |  if_e	jmp	#LR__0206
03090     26 01 00 FF 
03094     4E 15 06 F6 | 	mov	arg02, ##@LR__4204
03098     0F 13 02 F6 | 	mov	arg01, local01
0309c     D0 2A B1 FD | 	call	#__system___string_cmp
030a0     00 FA 0D F2 | 	cmp	result1, #0 wz
030a4     D4 02 90 AD |  if_e	jmp	#LR__0207
030a8     26 01 00 FF 
030ac     53 15 06 F6 | 	mov	arg02, ##@LR__4205
030b0     0F 13 02 F6 | 	mov	arg01, local01
030b4     B8 2A B1 FD | 	call	#__system___string_cmp
030b8     00 FA 0D F2 | 	cmp	result1, #0 wz
030bc     C4 02 90 AD |  if_e	jmp	#LR__0208
030c0     26 01 00 FF 
030c4     59 15 06 F6 | 	mov	arg02, ##@LR__4206
030c8     0F 13 02 F6 | 	mov	arg01, local01
030cc     A0 2A B1 FD | 	call	#__system___string_cmp
030d0     00 FA 0D F2 | 	cmp	result1, #0 wz
030d4     B4 02 90 AD |  if_e	jmp	#LR__0209
030d8     26 01 00 FF 
030dc     5D 15 06 F6 | 	mov	arg02, ##@LR__4207
030e0     0F 13 02 F6 | 	mov	arg01, local01
030e4     88 2A B1 FD | 	call	#__system___string_cmp
030e8     00 FA 0D F2 | 	cmp	result1, #0 wz
030ec     A4 02 90 AD |  if_e	jmp	#LR__0210
030f0     26 01 00 FF 
030f4     62 15 06 F6 | 	mov	arg02, ##@LR__4208
030f8     0F 13 02 F6 | 	mov	arg01, local01
030fc     70 2A B1 FD | 	call	#__system___string_cmp
03100     00 FA 0D F2 | 	cmp	result1, #0 wz
03104     94 02 90 AD |  if_e	jmp	#LR__0211
03108     26 01 00 FF 
0310c     67 15 06 F6 | 	mov	arg02, ##@LR__4209
03110     0F 13 02 F6 | 	mov	arg01, local01
03114     58 2A B1 FD | 	call	#__system___string_cmp
03118     00 FA 0D F2 | 	cmp	result1, #0 wz
0311c     84 02 90 AD |  if_e	jmp	#LR__0212
03120     26 01 00 FF 
03124     6D 15 06 F6 | 	mov	arg02, ##@LR__4210
03128     0F 13 02 F6 | 	mov	arg01, local01
0312c     40 2A B1 FD | 	call	#__system___string_cmp
03130     00 FA 0D F2 | 	cmp	result1, #0 wz
03134     74 02 90 AD |  if_e	jmp	#LR__0213
03138     26 01 00 FF 
0313c     74 15 06 F6 | 	mov	arg02, ##@LR__4211
03140     0F 13 02 F6 | 	mov	arg01, local01
03144     28 2A B1 FD | 	call	#__system___string_cmp
03148     00 FA 0D F2 | 	cmp	result1, #0 wz
0314c     64 02 90 AD |  if_e	jmp	#LR__0214
03150     26 01 00 FF 
03154     7A 15 06 F6 | 	mov	arg02, ##@LR__4212
03158     0F 13 02 F6 | 	mov	arg01, local01
0315c     10 2A B1 FD | 	call	#__system___string_cmp
03160     00 FA 0D F2 | 	cmp	result1, #0 wz
03164     54 02 90 AD |  if_e	jmp	#LR__0215
03168     26 01 00 FF 
0316c     84 15 06 F6 | 	mov	arg02, ##@LR__4213
03170     0F 13 02 F6 | 	mov	arg01, local01
03174     F8 29 B1 FD | 	call	#__system___string_cmp
03178     00 FA 0D F2 | 	cmp	result1, #0 wz
0317c     44 02 90 AD |  if_e	jmp	#LR__0216
03180     26 01 00 FF 
03184     8B 15 06 F6 | 	mov	arg02, ##@LR__4214
03188     0F 13 02 F6 | 	mov	arg01, local01
0318c     E0 29 B1 FD | 	call	#__system___string_cmp
03190     00 FA 0D F2 | 	cmp	result1, #0 wz
03194     34 02 90 AD |  if_e	jmp	#LR__0217
03198     26 01 00 FF 
0319c     95 15 06 F6 | 	mov	arg02, ##@LR__4215
031a0     0F 13 02 F6 | 	mov	arg01, local01
031a4     C8 29 B1 FD | 	call	#__system___string_cmp
031a8     00 FA 0D F2 | 	cmp	result1, #0 wz
031ac     24 02 90 AD |  if_e	jmp	#LR__0218
031b0     26 01 00 FF 
031b4     9A 15 06 F6 | 	mov	arg02, ##@LR__4216
031b8     0F 13 02 F6 | 	mov	arg01, local01
031bc     B0 29 B1 FD | 	call	#__system___string_cmp
031c0     00 FA 0D F2 | 	cmp	result1, #0 wz
031c4     14 02 90 AD |  if_e	jmp	#LR__0219
031c8     26 01 00 FF 
031cc     9E 15 06 F6 | 	mov	arg02, ##@LR__4217
031d0     0F 13 02 F6 | 	mov	arg01, local01
031d4     98 29 B1 FD | 	call	#__system___string_cmp
031d8     00 FA 0D F2 | 	cmp	result1, #0 wz
031dc     04 02 90 AD |  if_e	jmp	#LR__0220
031e0     26 01 00 FF 
031e4     A4 15 06 F6 | 	mov	arg02, ##@LR__4218
031e8     0F 13 02 F6 | 	mov	arg01, local01
031ec     80 29 B1 FD | 	call	#__system___string_cmp
031f0     00 FA 0D F2 | 	cmp	result1, #0 wz
031f4     F4 01 90 AD |  if_e	jmp	#LR__0221
031f8     26 01 00 FF 
031fc     AA 15 06 F6 | 	mov	arg02, ##@LR__4219
03200     0F 13 02 F6 | 	mov	arg01, local01
03204     68 29 B1 FD | 	call	#__system___string_cmp
03208     00 FA 0D F2 | 	cmp	result1, #0 wz
0320c     E4 01 90 AD |  if_e	jmp	#LR__0222
03210     26 01 00 FF 
03214     B0 15 06 F6 | 	mov	arg02, ##@LR__4220
03218     0F 13 02 F6 | 	mov	arg01, local01
0321c     50 29 B1 FD | 	call	#__system___string_cmp
03220     00 FA 0D F2 | 	cmp	result1, #0 wz
03224     D4 01 90 AD |  if_e	jmp	#LR__0223
03228     26 01 00 FF 
0322c     B9 15 06 F6 | 	mov	arg02, ##@LR__4221
03230     0F 13 02 F6 | 	mov	arg01, local01
03234     38 29 B1 FD | 	call	#__system___string_cmp
03238     00 FA 0D F2 | 	cmp	result1, #0 wz
0323c     C4 01 90 AD |  if_e	jmp	#LR__0224
03240     26 01 00 FF 
03244     BF 15 06 F6 | 	mov	arg02, ##@LR__4222
03248     0F 13 02 F6 | 	mov	arg01, local01
0324c     20 29 B1 FD | 	call	#__system___string_cmp
03250     00 FA 0D F2 | 	cmp	result1, #0 wz
03254     B4 01 90 AD |  if_e	jmp	#LR__0225
03258     26 01 00 FF 
0325c     C5 15 06 F6 | 	mov	arg02, ##@LR__4223
03260     0F 13 02 F6 | 	mov	arg01, local01
03264     08 29 B1 FD | 	call	#__system___string_cmp
03268     00 FA 0D F2 | 	cmp	result1, #0 wz
0326c     A4 01 90 AD |  if_e	jmp	#LR__0226
03270     26 01 00 FF 
03274     CE 15 06 F6 | 	mov	arg02, ##@LR__4224
03278     0F 13 02 F6 | 	mov	arg01, local01
0327c     F0 28 B1 FD | 	call	#__system___string_cmp
03280     00 FA 0D F2 | 	cmp	result1, #0 wz
03284     94 01 90 AD |  if_e	jmp	#LR__0227
03288     26 01 00 FF 
0328c     D8 15 06 F6 | 	mov	arg02, ##@LR__4225
03290     0F 13 02 F6 | 	mov	arg01, local01
03294     D8 28 B1 FD | 	call	#__system___string_cmp
03298     00 FA 0D F2 | 	cmp	result1, #0 wz
0329c     84 01 90 AD |  if_e	jmp	#LR__0228
032a0     88 01 90 FD | 	jmp	#LR__0229
032a4                 | LR__0180
032a4     40 FA 05 F6 | 	mov	result1, #64
032a8     84 01 90 FD | 	jmp	#LR__0230
032ac                 | LR__0181
032ac     41 FA 05 F6 | 	mov	result1, #65
032b0     7C 01 90 FD | 	jmp	#LR__0230
032b4                 | LR__0182
032b4     42 FA 05 F6 | 	mov	result1, #66
032b8     74 01 90 FD | 	jmp	#LR__0230
032bc                 | LR__0183
032bc     43 FA 05 F6 | 	mov	result1, #67
032c0     6C 01 90 FD | 	jmp	#LR__0230
032c4                 | LR__0184
032c4     44 FA 05 F6 | 	mov	result1, #68
032c8     64 01 90 FD | 	jmp	#LR__0230
032cc                 | LR__0185
032cc     45 FA 05 F6 | 	mov	result1, #69
032d0     5C 01 90 FD | 	jmp	#LR__0230
032d4                 | LR__0186
032d4     46 FA 05 F6 | 	mov	result1, #70
032d8     54 01 90 FD | 	jmp	#LR__0230
032dc                 | LR__0187
032dc     47 FA 05 F6 | 	mov	result1, #71
032e0     4C 01 90 FD | 	jmp	#LR__0230
032e4                 | LR__0188
032e4     48 FA 05 F6 | 	mov	result1, #72
032e8     44 01 90 FD | 	jmp	#LR__0230
032ec                 | LR__0189
032ec     49 FA 05 F6 | 	mov	result1, #73
032f0     3C 01 90 FD | 	jmp	#LR__0230
032f4                 | LR__0190
032f4     44 FA 05 F6 | 	mov	result1, #68
032f8     34 01 90 FD | 	jmp	#LR__0230
032fc                 | LR__0191
032fc     4C FA 05 F6 | 	mov	result1, #76
03300     2C 01 90 FD | 	jmp	#LR__0230
03304                 | LR__0192
03304     4D FA 05 F6 | 	mov	result1, #77
03308     24 01 90 FD | 	jmp	#LR__0230
0330c                 | LR__0193
0330c     4E FA 05 F6 | 	mov	result1, #78
03310     1C 01 90 FD | 	jmp	#LR__0230
03314                 | LR__0194
03314     50 FA 05 F6 | 	mov	result1, #80
03318     14 01 90 FD | 	jmp	#LR__0230
0331c                 | LR__0195
0331c     51 FA 05 F6 | 	mov	result1, #81
03320     0C 01 90 FD | 	jmp	#LR__0230
03324                 | LR__0196
03324     52 FA 05 F6 | 	mov	result1, #82
03328     04 01 90 FD | 	jmp	#LR__0230
0332c                 | LR__0197
0332c     59 FA 05 F6 | 	mov	result1, #89
03330     FC 00 90 FD | 	jmp	#LR__0230
03334                 | LR__0198
03334     55 FA 05 F6 | 	mov	result1, #85
03338     F4 00 90 FD | 	jmp	#LR__0230
0333c                 | LR__0199
0333c     56 FA 05 F6 | 	mov	result1, #86
03340     EC 00 90 FD | 	jmp	#LR__0230
03344                 | LR__0200
03344     57 FA 05 F6 | 	mov	result1, #87
03348     E4 00 90 FD | 	jmp	#LR__0230
0334c                 | LR__0201
0334c     58 FA 05 F6 | 	mov	result1, #88
03350     DC 00 90 FD | 	jmp	#LR__0230
03354                 | LR__0202
03354     5A FA 05 F6 | 	mov	result1, #90
03358     D4 00 90 FD | 	jmp	#LR__0230
0335c                 | LR__0203
0335c     5B FA 05 F6 | 	mov	result1, #91
03360     CC 00 90 FD | 	jmp	#LR__0230
03364                 | LR__0204
03364     5C FA 05 F6 | 	mov	result1, #92
03368     C4 00 90 FD | 	jmp	#LR__0230
0336c                 | LR__0205
0336c     5D FA 05 F6 | 	mov	result1, #93
03370     BC 00 90 FD | 	jmp	#LR__0230
03374                 | LR__0206
03374     4A FA 05 F6 | 	mov	result1, #74
03378     B4 00 90 FD | 	jmp	#LR__0230
0337c                 | LR__0207
0337c     4B FA 05 F6 | 	mov	result1, #75
03380     AC 00 90 FD | 	jmp	#LR__0230
03384                 | LR__0208
03384     5E FA 05 F6 | 	mov	result1, #94
03388     A4 00 90 FD | 	jmp	#LR__0230
0338c                 | LR__0209
0338c     5F FA 05 F6 | 	mov	result1, #95
03390     9C 00 90 FD | 	jmp	#LR__0230
03394                 | LR__0210
03394     60 FA 05 F6 | 	mov	result1, #96
03398     94 00 90 FD | 	jmp	#LR__0230
0339c                 | LR__0211
0339c     61 FA 05 F6 | 	mov	result1, #97
033a0     8C 00 90 FD | 	jmp	#LR__0230
033a4                 | LR__0212
033a4     63 FA 05 F6 | 	mov	result1, #99
033a8     84 00 90 FD | 	jmp	#LR__0230
033ac                 | LR__0213
033ac     68 FA 05 F6 | 	mov	result1, #104
033b0     7C 00 90 FD | 	jmp	#LR__0230
033b4                 | LR__0214
033b4     69 FA 05 F6 | 	mov	result1, #105
033b8     74 00 90 FD | 	jmp	#LR__0230
033bc                 | LR__0215
033bc     6C FA 05 F6 | 	mov	result1, #108
033c0     6C 00 90 FD | 	jmp	#LR__0230
033c4                 | LR__0216
033c4     6D FA 05 F6 | 	mov	result1, #109
033c8     64 00 90 FD | 	jmp	#LR__0230
033cc                 | LR__0217
033cc     70 FA 05 F6 | 	mov	result1, #112
033d0     5C 00 90 FD | 	jmp	#LR__0230
033d4                 | LR__0218
033d4     71 FA 05 F6 | 	mov	result1, #113
033d8     54 00 90 FD | 	jmp	#LR__0230
033dc                 | LR__0219
033dc     72 FA 05 F6 | 	mov	result1, #114
033e0     4C 00 90 FD | 	jmp	#LR__0230
033e4                 | LR__0220
033e4     79 FA 05 F6 | 	mov	result1, #121
033e8     44 00 90 FD | 	jmp	#LR__0230
033ec                 | LR__0221
033ec     77 FA 05 F6 | 	mov	result1, #119
033f0     3C 00 90 FD | 	jmp	#LR__0230
033f4                 | LR__0222
033f4     78 FA 05 F6 | 	mov	result1, #120
033f8     34 00 90 FD | 	jmp	#LR__0230
033fc                 | LR__0223
033fc     7C FA 05 F6 | 	mov	result1, #124
03400     2C 00 90 FD | 	jmp	#LR__0230
03404                 | LR__0224
03404     7D FA 05 F6 | 	mov	result1, #125
03408     24 00 90 FD | 	jmp	#LR__0230
0340c                 | LR__0225
0340c     7E FA 05 F6 | 	mov	result1, #126
03410     1C 00 90 FD | 	jmp	#LR__0230
03414                 | LR__0226
03414     7F FA 05 F6 | 	mov	result1, #127
03418     14 00 90 FD | 	jmp	#LR__0230
0341c                 | LR__0227
0341c     80 FA 05 F6 | 	mov	result1, #128
03420     0C 00 90 FD | 	jmp	#LR__0230
03424                 | LR__0228
03424     81 FA 05 F6 | 	mov	result1, #129
03428     04 00 90 FD | 	jmp	#LR__0230
0342c                 | LR__0229
0342c     00 FA 05 F6 | 	mov	result1, #0
03430                 | LR__0230
03430     A7 F0 03 F6 | 	mov	ptra, fp
03434     B2 00 A0 FD | 	call	#popregs_
03438                 | _iscommand_ret
03438     2D 00 64 FD | 	ret
0343c                 | 
0343c                 | ' 
0343c                 | ' function isfunction(s as string) as ubyte
0343c                 | _isfunction
0343c     01 4A 05 F6 | 	mov	COUNT_, #1
03440     A8 00 A0 FD | 	call	#pushregs_
03444                 | ' 
03444                 | ' select case s
03444     09 1F 02 F6 | 	mov	local01, arg01
03448     26 01 00 FF 
0344c     E1 15 06 F6 | 	mov	arg02, ##@LR__4226
03450     0F 13 02 F6 | 	mov	arg01, local01
03454     18 27 B1 FD | 	call	#__system___string_cmp
03458     00 FA 0D F2 | 	cmp	result1, #0 wz
0345c     24 01 90 AD |  if_e	jmp	#LR__0240
03460     26 01 00 FF 
03464     E5 15 06 F6 | 	mov	arg02, ##@LR__4227
03468     0F 13 02 F6 | 	mov	arg01, local01
0346c     00 27 B1 FD | 	call	#__system___string_cmp
03470     00 FA 0D F2 | 	cmp	result1, #0 wz
03474     14 01 90 AD |  if_e	jmp	#LR__0241
03478     26 01 00 FF 
0347c     EC 15 06 F6 | 	mov	arg02, ##@LR__4228
03480     0F 13 02 F6 | 	mov	arg01, local01
03484     E8 26 B1 FD | 	call	#__system___string_cmp
03488     00 FA 0D F2 | 	cmp	result1, #0 wz
0348c     04 01 90 AD |  if_e	jmp	#LR__0242
03490     26 01 00 FF 
03494     F3 15 06 F6 | 	mov	arg02, ##@LR__4229
03498     0F 13 02 F6 | 	mov	arg01, local01
0349c     D0 26 B1 FD | 	call	#__system___string_cmp
034a0     00 FA 0D F2 | 	cmp	result1, #0 wz
034a4     F4 00 90 AD |  if_e	jmp	#LR__0243
034a8     26 01 00 FF 
034ac     FA 15 06 F6 | 	mov	arg02, ##@LR__4230
034b0     0F 13 02 F6 | 	mov	arg01, local01
034b4     B8 26 B1 FD | 	call	#__system___string_cmp
034b8     00 FA 0D F2 | 	cmp	result1, #0 wz
034bc     E4 00 90 AD |  if_e	jmp	#LR__0244
034c0     27 01 00 FF 
034c4     01 14 06 F6 | 	mov	arg02, ##@LR__4231
034c8     0F 13 02 F6 | 	mov	arg01, local01
034cc     A0 26 B1 FD | 	call	#__system___string_cmp
034d0     00 FA 0D F2 | 	cmp	result1, #0 wz
034d4     D4 00 90 AD |  if_e	jmp	#LR__0245
034d8     27 01 00 FF 
034dc     09 14 06 F6 | 	mov	arg02, ##@LR__4232
034e0     0F 13 02 F6 | 	mov	arg01, local01
034e4     88 26 B1 FD | 	call	#__system___string_cmp
034e8     00 FA 0D F2 | 	cmp	result1, #0 wz
034ec     C4 00 90 AD |  if_e	jmp	#LR__0246
034f0     27 01 00 FF 
034f4     0D 14 06 F6 | 	mov	arg02, ##@LR__4233
034f8     0F 13 02 F6 | 	mov	arg01, local01
034fc     70 26 B1 FD | 	call	#__system___string_cmp
03500     00 FA 0D F2 | 	cmp	result1, #0 wz
03504     B4 00 90 AD |  if_e	jmp	#LR__0247
03508     27 01 00 FF 
0350c     13 14 06 F6 | 	mov	arg02, ##@LR__4234
03510     0F 13 02 F6 | 	mov	arg01, local01
03514     58 26 B1 FD | 	call	#__system___string_cmp
03518     00 FA 0D F2 | 	cmp	result1, #0 wz
0351c     A4 00 90 AD |  if_e	jmp	#LR__0248
03520     27 01 00 FF 
03524     19 14 06 F6 | 	mov	arg02, ##@LR__4235
03528     0F 13 02 F6 | 	mov	arg01, local01
0352c     40 26 B1 FD | 	call	#__system___string_cmp
03530     00 FA 0D F2 | 	cmp	result1, #0 wz
03534     94 00 90 AD |  if_e	jmp	#LR__0249
03538     27 01 00 FF 
0353c     22 14 06 F6 | 	mov	arg02, ##@LR__4236
03540     0F 13 02 F6 | 	mov	arg01, local01
03544     28 26 B1 FD | 	call	#__system___string_cmp
03548     00 FA 0D F2 | 	cmp	result1, #0 wz
0354c     84 00 90 AD |  if_e	jmp	#LR__0250
03550     27 01 00 FF 
03554     28 14 06 F6 | 	mov	arg02, ##@LR__4237
03558     0F 13 02 F6 | 	mov	arg01, local01
0355c     10 26 B1 FD | 	call	#__system___string_cmp
03560     00 FA 0D F2 | 	cmp	result1, #0 wz
03564     74 00 90 AD |  if_e	jmp	#LR__0251
03568     27 01 00 FF 
0356c     30 14 06 F6 | 	mov	arg02, ##@LR__4238
03570     0F 13 02 F6 | 	mov	arg01, local01
03574     F8 25 B1 FD | 	call	#__system___string_cmp
03578     00 FA 0D F2 | 	cmp	result1, #0 wz
0357c     64 00 90 AD |  if_e	jmp	#LR__0252
03580     68 00 90 FD | 	jmp	#LR__0253
03584                 | LR__0240
03584     54 FA 05 F6 | 	mov	result1, #84
03588     64 00 90 FD | 	jmp	#LR__0254
0358c                 | LR__0241
0358c     64 FA 05 F6 | 	mov	result1, #100
03590     5C 00 90 FD | 	jmp	#LR__0254
03594                 | LR__0242
03594     65 FA 05 F6 | 	mov	result1, #101
03598     54 00 90 FD | 	jmp	#LR__0254
0359c                 | LR__0243
0359c     66 FA 05 F6 | 	mov	result1, #102
035a0     4C 00 90 FD | 	jmp	#LR__0254
035a4                 | LR__0244
035a4     67 FA 05 F6 | 	mov	result1, #103
035a8     44 00 90 FD | 	jmp	#LR__0254
035ac                 | LR__0245
035ac     62 FA 05 F6 | 	mov	result1, #98
035b0     3C 00 90 FD | 	jmp	#LR__0254
035b4                 | LR__0246
035b4     6B FA 05 F6 | 	mov	result1, #107
035b8     34 00 90 FD | 	jmp	#LR__0254
035bc                 | LR__0247
035bc     6A FA 05 F6 | 	mov	result1, #106
035c0     2C 00 90 FD | 	jmp	#LR__0254
035c4                 | LR__0248
035c4     6E FA 05 F6 | 	mov	result1, #110
035c8     24 00 90 FD | 	jmp	#LR__0254
035cc                 | LR__0249
035cc     6F FA 05 F6 | 	mov	result1, #111
035d0     1C 00 90 FD | 	jmp	#LR__0254
035d4                 | LR__0250
035d4     76 FA 05 F6 | 	mov	result1, #118
035d8     14 00 90 FD | 	jmp	#LR__0254
035dc                 | LR__0251
035dc     7B FA 05 F6 | 	mov	result1, #123
035e0     0C 00 90 FD | 	jmp	#LR__0254
035e4                 | LR__0252
035e4     7A FA 05 F6 | 	mov	result1, #122
035e8     04 00 90 FD | 	jmp	#LR__0254
035ec                 | LR__0253
035ec     00 FA 05 F6 | 	mov	result1, #0
035f0                 | LR__0254
035f0     A7 F0 03 F6 | 	mov	ptra, fp
035f4     B2 00 A0 FD | 	call	#popregs_
035f8                 | _isfunction_ret
035f8     2D 00 64 FD | 	ret
035fc                 | 
035fc                 | ' 
035fc                 | ' function isname(s as string) as boolean
035fc                 | _isname
035fc     0D 4A 05 F6 | 	mov	COUNT_, #13
03600     A8 00 A0 FD | 	call	#pushregs_
03604     09 1F 02 F6 | 	mov	local01, arg01
03608     09 21 02 F6 | 	mov	local02, arg01
0360c     97 06 48 FB | 	callpa	#(@LR__0261-@LR__0260)>>2,fcache_load_ptr_
03610                 | LR__0260
03610     10 FB C9 FA | 	rdbyte	result1, local02 wz
03614     01 20 06 51 |  if_ne	add	local02, #1
03618     F4 FF 9F 5D |  if_ne	jmp	#LR__0260
0361c                 | LR__0261
0361c     09 21 82 F1 | 	sub	local02, arg01
03620     10 FB 01 F6 | 	mov	result1, local02
03624     FD 22 0A F6 | 	mov	local03, result1 wz
03628     00 FA 05 A6 |  if_e	mov	result1, #0
0362c     34 02 90 AD |  if_e	jmp	#LR__0273
03630     0F 13 02 F6 | 	mov	arg01, local01
03634     01 14 06 F6 | 	mov	arg02, #1
03638     01 16 06 F6 | 	mov	arg03, #1
0363c     30 46 B1 FD | 	call	#__system__Mid_S
03640     FD 24 02 F6 | 	mov	local04, result1
03644                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
03644     27 01 00 FF 
03648     36 14 06 F6 | 	mov	arg02, ##@LR__4239
0364c     12 13 02 F6 | 	mov	arg01, local04
03650     1C 25 B1 FD | 	call	#__system___string_cmp
03654     00 FA 55 F2 | 	cmps	result1, #0 wc
03658     18 00 90 CD |  if_b	jmp	#LR__0262
0365c     27 01 00 FF 
03660     38 14 06 F6 | 	mov	arg02, ##@LR__4240
03664     12 13 02 F6 | 	mov	arg01, local04
03668     04 25 B1 FD | 	call	#__system___string_cmp
0366c     01 FA 55 F2 | 	cmps	result1, #1 wc
03670     1C 00 90 CD |  if_b	jmp	#LR__0263
03674                 | LR__0262
03674     27 01 00 FF 
03678     3A 14 06 F6 | 	mov	arg02, ##@LR__4241
0367c     12 13 02 F6 | 	mov	arg01, local04
03680     EC 24 B1 FD | 	call	#__system___string_cmp
03684     00 FA 0D F2 | 	cmp	result1, #0 wz
03688     00 FA 05 56 |  if_ne	mov	result1, #0
0368c     D4 01 90 5D |  if_ne	jmp	#LR__0273
03690                 | LR__0263
03690                 | ' if l>2 then 
03690     03 22 56 F2 | 	cmps	local03, #3 wc
03694     C8 01 90 CD |  if_b	jmp	#LR__0272
03698                 | '   for i=2 to l
03698     02 26 06 F6 | 	mov	local05, #2
0369c     11 29 02 F6 | 	mov	local06, local03
036a0     01 28 06 F1 | 	add	local06, #1
036a4                 | LR__0264
036a4     14 27 52 F2 | 	cmps	local05, local06 wc
036a8     B4 01 90 3D |  if_ae	jmp	#LR__0271
036ac     0F 13 02 F6 | 	mov	arg01, local01
036b0     13 15 02 F6 | 	mov	arg02, local05
036b4     01 16 06 F6 | 	mov	arg03, #1
036b8     B4 45 B1 FD | 	call	#__system__Mid_S
036bc     FD 24 02 F6 | 	mov	local04, result1
036c0                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
036c0     11 27 52 F2 | 	cmps	local05, local03 wc
036c4     9C 00 90 3D |  if_ae	jmp	#LR__0267
036c8     27 01 00 FF 
036cc     3C 14 06 F6 | 	mov	arg02, ##@LR__4242
036d0     12 13 02 F6 | 	mov	arg01, local04
036d4     98 24 B1 FD | 	call	#__system___string_cmp
036d8     00 FA 55 F2 | 	cmps	result1, #0 wc
036dc     18 00 90 CD |  if_b	jmp	#LR__0265
036e0     27 01 00 FF 
036e4     3E 14 06 F6 | 	mov	arg02, ##@LR__4243
036e8     12 13 02 F6 | 	mov	arg01, local04
036ec     80 24 B1 FD | 	call	#__system___string_cmp
036f0     01 FA 55 F2 | 	cmps	result1, #1 wc
036f4     6C 00 90 CD |  if_b	jmp	#LR__0267
036f8                 | LR__0265
036f8     27 01 00 FF 
036fc     40 14 06 F6 | 	mov	arg02, ##@LR__4244
03700     12 13 02 F6 | 	mov	arg01, local04
03704     68 24 B1 FD | 	call	#__system___string_cmp
03708     00 FA 55 F2 | 	cmps	result1, #0 wc
0370c     18 00 90 CD |  if_b	jmp	#LR__0266
03710     27 01 00 FF 
03714     42 14 06 F6 | 	mov	arg02, ##@LR__4245
03718     12 13 02 F6 | 	mov	arg01, local04
0371c     50 24 B1 FD | 	call	#__system___string_cmp
03720     01 FA 55 F2 | 	cmps	result1, #1 wc
03724     3C 00 90 CD |  if_b	jmp	#LR__0267
03728                 | LR__0266
03728     27 01 00 FF 
0372c     44 2A 06 F6 | 	mov	local07, ##@LR__4246
03730     12 13 02 F6 | 	mov	arg01, local04
03734     15 15 02 F6 | 	mov	arg02, local07
03738     34 24 B1 FD | 	call	#__system___string_cmp
0373c     00 FA 0D F2 | 	cmp	result1, #0 wz
03740     20 00 90 AD |  if_e	jmp	#LR__0267
03744     27 01 00 FF 
03748     46 2C 06 F6 | 	mov	local08, ##@LR__4247
0374c     12 13 02 F6 | 	mov	arg01, local04
03750     16 15 02 F6 | 	mov	arg02, local08
03754     18 24 B1 FD | 	call	#__system___string_cmp
03758     FD 2E 0A F6 | 	mov	local09, result1 wz
0375c     00 FA 05 56 |  if_ne	mov	result1, #0
03760     00 01 90 5D |  if_ne	jmp	#LR__0273
03764                 | LR__0267
03764                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
03764     11 27 0A F2 | 	cmp	local05, local03 wz
03768     EC 00 90 5D |  if_ne	jmp	#LR__0270
0376c     27 01 00 FF 
03770     48 30 06 F6 | 	mov	local10, ##@LR__4248
03774     12 13 02 F6 | 	mov	arg01, local04
03778     18 15 02 F6 | 	mov	arg02, local10
0377c     F0 23 B1 FD | 	call	#__system___string_cmp
03780     FD 32 02 F6 | 	mov	local11, result1
03784     00 32 56 F2 | 	cmps	local11, #0 wc
03788     1C 00 90 CD |  if_b	jmp	#LR__0268
0378c     27 01 00 FF 
03790     4A 14 06 F6 | 	mov	arg02, ##@LR__4249
03794     12 13 02 F6 | 	mov	arg01, local04
03798     D4 23 B1 FD | 	call	#__system___string_cmp
0379c     FD 30 02 F6 | 	mov	local10, result1
037a0     01 30 56 F2 | 	cmps	local10, #1 wc
037a4     B0 00 90 CD |  if_b	jmp	#LR__0270
037a8                 | LR__0268
037a8     27 01 00 FF 
037ac     4C 14 06 F6 | 	mov	arg02, ##@LR__4250
037b0     12 13 02 F6 | 	mov	arg01, local04
037b4     B8 23 B1 FD | 	call	#__system___string_cmp
037b8     00 FA 55 F2 | 	cmps	result1, #0 wc
037bc     1C 00 90 CD |  if_b	jmp	#LR__0269
037c0     27 01 00 FF 
037c4     4E 2E 06 F6 | 	mov	local09, ##@LR__4251
037c8     12 13 02 F6 | 	mov	arg01, local04
037cc     17 15 02 F6 | 	mov	arg02, local09
037d0     9C 23 B1 FD | 	call	#__system___string_cmp
037d4     01 FA 55 F2 | 	cmps	result1, #1 wc
037d8     7C 00 90 CD |  if_b	jmp	#LR__0270
037dc                 | LR__0269
037dc     27 01 00 FF 
037e0     50 2E 06 F6 | 	mov	local09, ##@LR__4252
037e4     12 13 02 F6 | 	mov	arg01, local04
037e8     17 15 02 F6 | 	mov	arg02, local09
037ec     80 23 B1 FD | 	call	#__system___string_cmp
037f0     00 FA 4D F2 | 	cmps	result1, #0 wz
037f4     60 00 90 AD |  if_e	jmp	#LR__0270
037f8     27 01 00 FF 
037fc     52 2C 06 F6 | 	mov	local08, ##@LR__4253
03800     12 13 02 F6 | 	mov	arg01, local04
03804     16 15 02 F6 | 	mov	arg02, local08
03808     64 23 B1 FD | 	call	#__system___string_cmp
0380c     FD 2E 0A F6 | 	mov	local09, result1 wz
03810     44 00 90 AD |  if_e	jmp	#LR__0270
03814     27 01 00 FF 
03818     54 34 06 F6 | 	mov	local12, ##@LR__4254
0381c     1A 2D 02 F6 | 	mov	local08, local12
03820     12 13 02 F6 | 	mov	arg01, local04
03824     16 15 02 F6 | 	mov	arg02, local08
03828     44 23 B1 FD | 	call	#__system___string_cmp
0382c     FD 2A 0A F6 | 	mov	local07, result1 wz
03830     24 00 90 AD |  if_e	jmp	#LR__0270
03834     27 01 00 FF 
03838     56 36 06 F6 | 	mov	local13, ##@LR__4255
0383c     1B 35 02 F6 | 	mov	local12, local13
03840     12 13 02 F6 | 	mov	arg01, local04
03844     1A 15 02 F6 | 	mov	arg02, local12
03848     24 23 B1 FD | 	call	#__system___string_cmp
0384c     FD 2C 0A F6 | 	mov	local08, result1 wz
03850     00 FA 05 56 |  if_ne	mov	result1, #0
03854     0C 00 90 5D |  if_ne	jmp	#LR__0273
03858                 | LR__0270
03858     01 26 06 F1 | 	add	local05, #1
0385c     44 FE 9F FD | 	jmp	#LR__0264
03860                 | LR__0271
03860                 | LR__0272
03860                 | ' return true
03860     01 FA 65 F6 | 	neg	result1, #1
03864                 | LR__0273
03864     A7 F0 03 F6 | 	mov	ptra, fp
03868     B2 00 A0 FD | 	call	#popregs_
0386c                 | _isname_ret
0386c     2D 00 64 FD | 	ret
03870                 | 
03870                 | ' 
03870                 | ' function isnum(s as string) as boolean
03870                 | _isnum
03870     0D 4A 05 F6 | 	mov	COUNT_, #13
03874     A8 00 A0 FD | 	call	#pushregs_
03878     09 1F 02 F6 | 	mov	local01, arg01
0387c     00 20 06 F6 | 	mov	local02, #0
03880     00 22 06 F6 | 	mov	local03, #0
03884     0F 13 02 F6 | 	mov	arg01, local01
03888     09 25 02 F6 | 	mov	local04, arg01
0388c     97 06 48 FB | 	callpa	#(@LR__0281-@LR__0280)>>2,fcache_load_ptr_
03890                 | LR__0280
03890     12 FB C9 FA | 	rdbyte	result1, local04 wz
03894     01 24 06 51 |  if_ne	add	local04, #1
03898     F4 FF 9F 5D |  if_ne	jmp	#LR__0280
0389c                 | LR__0281
0389c     09 25 82 F1 | 	sub	local04, arg01
038a0     12 FB 01 F6 | 	mov	result1, local04
038a4     FD 26 0A F6 | 	mov	local05, result1 wz
038a8     00 FA 05 A6 |  if_e	mov	result1, #0
038ac     8C 02 90 AD |  if_e	jmp	#LR__0292
038b0     0F 13 02 F6 | 	mov	arg01, local01
038b4     01 14 06 F6 | 	mov	arg02, #1
038b8     01 16 06 F6 | 	mov	arg03, #1
038bc     B0 43 B1 FD | 	call	#__system__Mid_S
038c0     FD 28 02 F6 | 	mov	local06, result1
038c4                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
038c4     27 01 00 FF 
038c8     58 14 06 F6 | 	mov	arg02, ##@LR__4256
038cc     14 13 02 F6 | 	mov	arg01, local06
038d0     9C 22 B1 FD | 	call	#__system___string_cmp
038d4     00 FA 55 F2 | 	cmps	result1, #0 wc
038d8     18 00 90 CD |  if_b	jmp	#LR__0282
038dc     27 01 00 FF 
038e0     5A 14 06 F6 | 	mov	arg02, ##@LR__4257
038e4     14 13 02 F6 | 	mov	arg01, local06
038e8     84 22 B1 FD | 	call	#__system___string_cmp
038ec     01 FA 55 F2 | 	cmps	result1, #1 wc
038f0     78 00 90 CD |  if_b	jmp	#LR__0283
038f4                 | LR__0282
038f4     27 01 00 FF 
038f8     5C 14 06 F6 | 	mov	arg02, ##@LR__4258
038fc     14 13 02 F6 | 	mov	arg01, local06
03900     6C 22 B1 FD | 	call	#__system___string_cmp
03904     00 FA 0D F2 | 	cmp	result1, #0 wz
03908     60 00 90 AD |  if_e	jmp	#LR__0283
0390c     27 01 00 FF 
03910     5E 2A 06 F6 | 	mov	local07, ##@LR__4259
03914     14 13 02 F6 | 	mov	arg01, local06
03918     15 15 02 F6 | 	mov	arg02, local07
0391c     50 22 B1 FD | 	call	#__system___string_cmp
03920     00 FA 0D F2 | 	cmp	result1, #0 wz
03924     44 00 90 AD |  if_e	jmp	#LR__0283
03928     27 01 00 FF 
0392c     60 2C 06 F6 | 	mov	local08, ##@LR__4260
03930     16 2B 02 F6 | 	mov	local07, local08
03934     14 13 02 F6 | 	mov	arg01, local06
03938     15 15 02 F6 | 	mov	arg02, local07
0393c     30 22 B1 FD | 	call	#__system___string_cmp
03940     00 FA 4D F2 | 	cmps	result1, #0 wz
03944     24 00 90 AD |  if_e	jmp	#LR__0283
03948     27 01 00 FF 
0394c     62 2E 06 F6 | 	mov	local09, ##@LR__4261
03950     17 2D 02 F6 | 	mov	local08, local09
03954     14 13 02 F6 | 	mov	arg01, local06
03958     16 15 02 F6 | 	mov	arg02, local08
0395c     10 22 B1 FD | 	call	#__system___string_cmp
03960     FD 2A 0A F6 | 	mov	local07, result1 wz
03964     00 FA 05 56 |  if_ne	mov	result1, #0
03968     D0 01 90 5D |  if_ne	jmp	#LR__0292
0396c                 | LR__0283
0396c                 | ' if m$="." then ds=1
0396c     27 01 00 FF 
03970     64 14 06 F6 | 	mov	arg02, ##@LR__4262
03974     14 13 02 F6 | 	mov	arg01, local06
03978     F4 21 B1 FD | 	call	#__system___string_cmp
0397c     00 FA 0D F2 | 	cmp	result1, #0 wz
03980     01 20 06 A6 |  if_e	mov	local02, #1
03984                 | ' if l>1 then 
03984     02 26 56 F2 | 	cmps	local05, #2 wc
03988     AC 01 90 CD |  if_b	jmp	#LR__0291
0398c                 | '   for i=2 to l
0398c     02 30 06 F6 | 	mov	local10, #2
03990     13 33 02 F6 | 	mov	local11, local05
03994     01 32 06 F1 | 	add	local11, #1
03998                 | LR__0284
03998     19 31 52 F2 | 	cmps	local10, local11 wc
0399c     98 01 90 3D |  if_ae	jmp	#LR__0290
039a0     0F 13 02 F6 | 	mov	arg01, local01
039a4     18 15 02 F6 | 	mov	arg02, local10
039a8     01 16 06 F6 | 	mov	arg03, #1
039ac     C0 42 B1 FD | 	call	#__system__Mid_S
039b0     FD 28 02 F6 | 	mov	local06, result1
039b4                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
039b4     27 01 00 FF 
039b8     66 14 06 F6 | 	mov	arg02, ##@LR__4263
039bc     14 13 02 F6 | 	mov	arg01, local06
039c0     AC 21 B1 FD | 	call	#__system___string_cmp
039c4     00 FA 55 F2 | 	cmps	result1, #0 wc
039c8     18 00 90 CD |  if_b	jmp	#LR__0285
039cc     27 01 00 FF 
039d0     68 14 06 F6 | 	mov	arg02, ##@LR__4264
039d4     14 13 02 F6 | 	mov	arg01, local06
039d8     94 21 B1 FD | 	call	#__system___string_cmp
039dc     01 FA 55 F2 | 	cmps	result1, #1 wc
039e0     98 00 90 CD |  if_b	jmp	#LR__0286
039e4                 | LR__0285
039e4     27 01 00 FF 
039e8     6A 14 06 F6 | 	mov	arg02, ##@LR__4265
039ec     14 13 02 F6 | 	mov	arg01, local06
039f0     7C 21 B1 FD | 	call	#__system___string_cmp
039f4     00 FA 0D F2 | 	cmp	result1, #0 wz
039f8     80 00 90 AD |  if_e	jmp	#LR__0286
039fc     27 01 00 FF 
03a00     6C 2A 06 F6 | 	mov	local07, ##@LR__4266
03a04     14 13 02 F6 | 	mov	arg01, local06
03a08     15 15 02 F6 | 	mov	arg02, local07
03a0c     60 21 B1 FD | 	call	#__system___string_cmp
03a10     00 FA 4D F2 | 	cmps	result1, #0 wz
03a14     64 00 90 AD |  if_e	jmp	#LR__0286
03a18     27 01 00 FF 
03a1c     6E 2C 06 F6 | 	mov	local08, ##@LR__4267
03a20     16 2B 02 F6 | 	mov	local07, local08
03a24     14 13 02 F6 | 	mov	arg01, local06
03a28     15 15 02 F6 | 	mov	arg02, local07
03a2c     40 21 B1 FD | 	call	#__system___string_cmp
03a30     FD 34 0A F6 | 	mov	local12, result1 wz
03a34     44 00 90 AD |  if_e	jmp	#LR__0286
03a38     27 01 00 FF 
03a3c     70 2E 06 F6 | 	mov	local09, ##@LR__4268
03a40     17 2D 02 F6 | 	mov	local08, local09
03a44     14 13 02 F6 | 	mov	arg01, local06
03a48     16 15 02 F6 | 	mov	arg02, local08
03a4c     20 21 B1 FD | 	call	#__system___string_cmp
03a50     FD 2A 0A F6 | 	mov	local07, result1 wz
03a54     24 00 90 AD |  if_e	jmp	#LR__0286
03a58     27 01 00 FF 
03a5c     72 36 06 F6 | 	mov	local13, ##@LR__4269
03a60     1B 2F 02 F6 | 	mov	local09, local13
03a64     14 13 02 F6 | 	mov	arg01, local06
03a68     17 15 02 F6 | 	mov	arg02, local09
03a6c     00 21 B1 FD | 	call	#__system___string_cmp
03a70     FD 2C 0A F6 | 	mov	local08, result1 wz
03a74     00 FA 05 56 |  if_ne	mov	result1, #0
03a78     C0 00 90 5D |  if_ne	jmp	#LR__0292
03a7c                 | LR__0286
03a7c                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
03a7c     27 01 00 FF 
03a80     74 14 06 F6 | 	mov	arg02, ##@LR__4270
03a84     14 13 02 F6 | 	mov	arg01, local06
03a88     E4 20 B1 FD | 	call	#__system___string_cmp
03a8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a90     38 00 90 5D |  if_ne	jmp	#LR__0287
03a94     18 15 02 F6 | 	mov	arg02, local10
03a98     01 14 86 F1 | 	sub	arg02, #1
03a9c     0F 13 02 F6 | 	mov	arg01, local01
03aa0     01 16 06 F6 | 	mov	arg03, #1
03aa4     C8 41 B1 FD | 	call	#__system__Mid_S
03aa8     FD 12 02 F6 | 	mov	arg01, result1
03aac     5C 43 B1 FD | 	call	#__system__LCase_S
03ab0     FD 12 02 F6 | 	mov	arg01, result1
03ab4     27 01 00 FF 
03ab8     76 14 06 F6 | 	mov	arg02, ##@LR__4271
03abc     B0 20 B1 FD | 	call	#__system___string_cmp
03ac0     00 FA 0D F2 | 	cmp	result1, #0 wz
03ac4     00 FA 05 56 |  if_ne	mov	result1, #0
03ac8     70 00 90 5D |  if_ne	jmp	#LR__0292
03acc                 | LR__0287
03acc                 | '     if m$="." then ds+=1: if ds>1 then return false
03acc     27 01 00 FF 
03ad0     78 14 06 F6 | 	mov	arg02, ##@LR__4272
03ad4     14 13 02 F6 | 	mov	arg01, local06
03ad8     94 20 B1 FD | 	call	#__system___string_cmp
03adc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ae0     01 20 06 A1 |  if_e	add	local02, #1
03ae4     02 20 56 A2 |  if_e	cmps	local02, #2 wc
03ae8     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
03aec     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0292
03af0                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
03af0     27 01 00 FF 
03af4     7A 14 06 F6 | 	mov	arg02, ##@LR__4273
03af8     14 13 02 F6 | 	mov	arg01, local06
03afc     70 20 B1 FD | 	call	#__system___string_cmp
03b00     00 FA 4D F2 | 	cmps	result1, #0 wz
03b04     18 00 90 AD |  if_e	jmp	#LR__0288
03b08     27 01 00 FF 
03b0c     7C 14 06 F6 | 	mov	arg02, ##@LR__4274
03b10     14 13 02 F6 | 	mov	arg01, local06
03b14     58 20 B1 FD | 	call	#__system___string_cmp
03b18     00 FA 4D F2 | 	cmps	result1, #0 wz
03b1c     10 00 90 5D |  if_ne	jmp	#LR__0289
03b20                 | LR__0288
03b20     01 22 06 F1 | 	add	local03, #1
03b24     02 22 56 F2 | 	cmps	local03, #2 wc
03b28     00 FA 05 36 |  if_ae	mov	result1, #0
03b2c     0C 00 90 3D |  if_ae	jmp	#LR__0292
03b30                 | LR__0289
03b30     01 30 06 F1 | 	add	local10, #1
03b34     60 FE 9F FD | 	jmp	#LR__0284
03b38                 | LR__0290
03b38                 | LR__0291
03b38                 | ' return true
03b38     01 FA 65 F6 | 	neg	result1, #1
03b3c                 | LR__0292
03b3c     A7 F0 03 F6 | 	mov	ptra, fp
03b40     B2 00 A0 FD | 	call	#popregs_
03b44                 | _isnum_ret
03b44     2D 00 64 FD | 	ret
03b48                 | 
03b48                 | '   
03b48                 | ' function isint(s as string) as boolean
03b48                 | _isint
03b48     05 4A 05 F6 | 	mov	COUNT_, #5
03b4c     A8 00 A0 FD | 	call	#pushregs_
03b50     09 1F 02 F6 | 	mov	local01, arg01
03b54     09 21 02 F6 | 	mov	local02, arg01
03b58     97 06 48 FB | 	callpa	#(@LR__0301-@LR__0300)>>2,fcache_load_ptr_
03b5c                 | LR__0300
03b5c     10 FB C9 FA | 	rdbyte	result1, local02 wz
03b60     01 20 06 51 |  if_ne	add	local02, #1
03b64     F4 FF 9F 5D |  if_ne	jmp	#LR__0300
03b68                 | LR__0301
03b68     09 21 82 F1 | 	sub	local02, arg01
03b6c     10 FB 01 F6 | 	mov	result1, local02
03b70     FD 20 0A F6 | 	mov	local02, result1 wz
03b74     00 FA 05 A6 |  if_e	mov	result1, #0
03b78     18 01 90 AD |  if_e	jmp	#LR__0309
03b7c     0F 13 02 F6 | 	mov	arg01, local01
03b80     01 14 06 F6 | 	mov	arg02, #1
03b84     01 16 06 F6 | 	mov	arg03, #1
03b88     E4 40 B1 FD | 	call	#__system__Mid_S
03b8c     FD 22 02 F6 | 	mov	local03, result1
03b90                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
03b90     27 01 00 FF 
03b94     7E 14 06 F6 | 	mov	arg02, ##@LR__4275
03b98     11 13 02 F6 | 	mov	arg01, local03
03b9c     D0 1F B1 FD | 	call	#__system___string_cmp
03ba0     00 FA 55 F2 | 	cmps	result1, #0 wc
03ba4     18 00 90 CD |  if_b	jmp	#LR__0302
03ba8     27 01 00 FF 
03bac     80 14 06 F6 | 	mov	arg02, ##@LR__4276
03bb0     11 13 02 F6 | 	mov	arg01, local03
03bb4     B8 1F B1 FD | 	call	#__system___string_cmp
03bb8     01 FA 55 F2 | 	cmps	result1, #1 wc
03bbc     4C 00 90 CD |  if_b	jmp	#LR__0303
03bc0                 | LR__0302
03bc0     27 01 00 FF 
03bc4     82 14 06 F6 | 	mov	arg02, ##@LR__4277
03bc8     11 13 02 F6 | 	mov	arg01, local03
03bcc     A0 1F B1 FD | 	call	#__system___string_cmp
03bd0     00 FA 0D F2 | 	cmp	result1, #0 wz
03bd4     34 00 90 AD |  if_e	jmp	#LR__0303
03bd8     27 01 00 FF 
03bdc     84 14 06 F6 | 	mov	arg02, ##@LR__4278
03be0     11 13 02 F6 | 	mov	arg01, local03
03be4     88 1F B1 FD | 	call	#__system___string_cmp
03be8     00 FA 0D F2 | 	cmp	result1, #0 wz
03bec     1C 00 90 AD |  if_e	jmp	#LR__0303
03bf0     27 01 00 FF 
03bf4     86 14 06 F6 | 	mov	arg02, ##@LR__4279
03bf8     11 13 02 F6 | 	mov	arg01, local03
03bfc     70 1F B1 FD | 	call	#__system___string_cmp
03c00     00 FA 0D F2 | 	cmp	result1, #0 wz
03c04     00 FA 05 56 |  if_ne	mov	result1, #0
03c08     88 00 90 5D |  if_ne	jmp	#LR__0309
03c0c                 | LR__0303
03c0c                 | ' 
03c0c                 | ' if l>1 then 
03c0c     02 20 56 F2 | 	cmps	local02, #2 wc
03c10     7C 00 90 CD |  if_b	jmp	#LR__0308
03c14                 | '   for i=2 to l
03c14     02 24 06 F6 | 	mov	local04, #2
03c18     10 27 02 F6 | 	mov	local05, local02
03c1c     01 26 06 F1 | 	add	local05, #1
03c20                 | LR__0304
03c20     13 25 52 F2 | 	cmps	local04, local05 wc
03c24     68 00 90 3D |  if_ae	jmp	#LR__0307
03c28     0F 13 02 F6 | 	mov	arg01, local01
03c2c     12 15 02 F6 | 	mov	arg02, local04
03c30     01 16 06 F6 | 	mov	arg03, #1
03c34     38 40 B1 FD | 	call	#__system__Mid_S
03c38     FD 22 02 F6 | 	mov	local03, result1
03c3c                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
03c3c     27 01 00 FF 
03c40     88 14 06 F6 | 	mov	arg02, ##@LR__4280
03c44     11 13 02 F6 | 	mov	arg01, local03
03c48     24 1F B1 FD | 	call	#__system___string_cmp
03c4c     00 FA 55 F2 | 	cmps	result1, #0 wc
03c50     18 00 90 CD |  if_b	jmp	#LR__0305
03c54     27 01 00 FF 
03c58     8A 14 06 F6 | 	mov	arg02, ##@LR__4281
03c5c     11 13 02 F6 | 	mov	arg01, local03
03c60     0C 1F B1 FD | 	call	#__system___string_cmp
03c64     01 FA 55 F2 | 	cmps	result1, #1 wc
03c68     1C 00 90 CD |  if_b	jmp	#LR__0306
03c6c                 | LR__0305
03c6c     27 01 00 FF 
03c70     8C 14 06 F6 | 	mov	arg02, ##@LR__4282
03c74     11 13 02 F6 | 	mov	arg01, local03
03c78     F4 1E B1 FD | 	call	#__system___string_cmp
03c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c80     00 FA 05 56 |  if_ne	mov	result1, #0
03c84     0C 00 90 5D |  if_ne	jmp	#LR__0309
03c88                 | LR__0306
03c88     01 24 06 F1 | 	add	local04, #1
03c8c     90 FF 9F FD | 	jmp	#LR__0304
03c90                 | LR__0307
03c90                 | LR__0308
03c90                 | ' return true
03c90     01 FA 65 F6 | 	neg	result1, #1
03c94                 | LR__0309
03c94     A7 F0 03 F6 | 	mov	ptra, fp
03c98     B2 00 A0 FD | 	call	#popregs_
03c9c                 | _isint_ret
03c9c     2D 00 64 FD | 	ret
03ca0                 | 
03ca0                 | ' 
03ca0                 | ' function isdec(s as string) as boolean
03ca0                 | _isdec
03ca0     05 4A 05 F6 | 	mov	COUNT_, #5
03ca4     A8 00 A0 FD | 	call	#pushregs_
03ca8     09 1F 02 F6 | 	mov	local01, arg01
03cac     09 21 02 F6 | 	mov	local02, arg01
03cb0     97 06 48 FB | 	callpa	#(@LR__0311-@LR__0310)>>2,fcache_load_ptr_
03cb4                 | LR__0310
03cb4     10 FB C9 FA | 	rdbyte	result1, local02 wz
03cb8     01 20 06 51 |  if_ne	add	local02, #1
03cbc     F4 FF 9F 5D |  if_ne	jmp	#LR__0310
03cc0                 | LR__0311
03cc0     09 21 82 F1 | 	sub	local02, arg01
03cc4     10 FB 01 F6 | 	mov	result1, local02
03cc8     FD 20 0A F6 | 	mov	local02, result1 wz
03ccc     00 FA 05 A6 |  if_e	mov	result1, #0
03cd0     80 00 90 AD |  if_e	jmp	#LR__0316
03cd4                 | ' for i=1 to l
03cd4     01 22 06 F6 | 	mov	local03, #1
03cd8     10 25 02 F6 | 	mov	local04, local02
03cdc     01 24 06 F1 | 	add	local04, #1
03ce0                 | LR__0312
03ce0     12 23 52 F2 | 	cmps	local03, local04 wc
03ce4     68 00 90 3D |  if_ae	jmp	#LR__0315
03ce8     0F 13 02 F6 | 	mov	arg01, local01
03cec     11 15 02 F6 | 	mov	arg02, local03
03cf0     01 16 06 F6 | 	mov	arg03, #1
03cf4     78 3F B1 FD | 	call	#__system__Mid_S
03cf8     FD 26 02 F6 | 	mov	local05, result1
03cfc                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
03cfc     27 01 00 FF 
03d00     8E 14 06 F6 | 	mov	arg02, ##@LR__4283
03d04     13 13 02 F6 | 	mov	arg01, local05
03d08     64 1E B1 FD | 	call	#__system___string_cmp
03d0c     00 FA 55 F2 | 	cmps	result1, #0 wc
03d10     18 00 90 CD |  if_b	jmp	#LR__0313
03d14     27 01 00 FF 
03d18     90 14 06 F6 | 	mov	arg02, ##@LR__4284
03d1c     13 13 02 F6 | 	mov	arg01, local05
03d20     4C 1E B1 FD | 	call	#__system___string_cmp
03d24     01 FA 55 F2 | 	cmps	result1, #1 wc
03d28     1C 00 90 CD |  if_b	jmp	#LR__0314
03d2c                 | LR__0313
03d2c     27 01 00 FF 
03d30     92 14 06 F6 | 	mov	arg02, ##@LR__4285
03d34     13 13 02 F6 | 	mov	arg01, local05
03d38     34 1E B1 FD | 	call	#__system___string_cmp
03d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d40     00 FA 05 56 |  if_ne	mov	result1, #0
03d44     0C 00 90 5D |  if_ne	jmp	#LR__0316
03d48                 | LR__0314
03d48     01 22 06 F1 | 	add	local03, #1
03d4c     90 FF 9F FD | 	jmp	#LR__0312
03d50                 | LR__0315
03d50                 | ' return true
03d50     01 FA 65 F6 | 	neg	result1, #1
03d54                 | LR__0316
03d54     A7 F0 03 F6 | 	mov	ptra, fp
03d58     B2 00 A0 FD | 	call	#popregs_
03d5c                 | _isdec_ret
03d5c     2D 00 64 FD | 	ret
03d60                 | 
03d60                 | ' 
03d60                 | ' function isstring(s as string) as boolean
03d60                 | _isstring
03d60     01 4A 05 F6 | 	mov	COUNT_, #1
03d64     A8 00 A0 FD | 	call	#pushregs_
03d68                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
03d68     09 1F 02 F6 | 	mov	local01, arg01
03d6c     01 14 06 F6 | 	mov	arg02, #1
03d70     E4 3D B1 FD | 	call	#__system__Left_S
03d74     FD 12 02 F6 | 	mov	arg01, result1
03d78     27 01 00 FF 
03d7c     94 14 06 F6 | 	mov	arg02, ##@LR__4286
03d80     EC 1D B1 FD | 	call	#__system___string_cmp
03d84     00 FA 4D F2 | 	cmps	result1, #0 wz
03d88     28 00 90 5D |  if_ne	jmp	#LR__0320
03d8c     0F 13 02 F6 | 	mov	arg01, local01
03d90     01 14 06 F6 | 	mov	arg02, #1
03d94     48 3E B1 FD | 	call	#__system__Right_S
03d98     FD 12 02 F6 | 	mov	arg01, result1
03d9c     27 01 00 FF 
03da0     96 14 06 F6 | 	mov	arg02, ##@LR__4287
03da4     C8 1D B1 FD | 	call	#__system___string_cmp
03da8     00 FA 4D F2 | 	cmps	result1, #0 wz
03dac     01 FA 65 A6 |  if_e	neg	result1, #1
03db0     04 00 90 AD |  if_e	jmp	#LR__0321
03db4                 | LR__0320
03db4     00 FA 05 F6 | 	mov	result1, #0
03db8                 | LR__0321
03db8     A7 F0 03 F6 | 	mov	ptra, fp
03dbc     B2 00 A0 FD | 	call	#popregs_
03dc0                 | _isstring_ret
03dc0     2D 00 64 FD | 	ret
03dc4                 | 
03dc4                 | ' 
03dc4                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
03dc4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
03dc4                 | ' 
03dc4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
03dc4                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
03dc4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
03dc4                 | ' 
03dc4                 | ' '----- delete a line from a program
03dc4                 | ' 
03dc4                 | ' function deleteline(aline as ulong) as integer
03dc4                 | _deleteline
03dc4     03 4A 05 F6 | 	mov	COUNT_, #3
03dc8     A8 00 A0 FD | 	call	#pushregs_
03dcc     2C F0 07 F1 | 	add	ptra, #44
03dd0     04 4E 05 F1 | 	add	fp, #4
03dd4     A7 12 62 FC | 	wrlong	arg01, fp
03dd8     41 00 00 FF 
03ddc     48 E4 05 F1 | 	add	objptr, ##33352
03de0     F2 1E 02 FB | 	rdlong	local01, objptr
03de4     0C 4E 05 F1 | 	add	fp, #12
03de8     A7 1E 62 FC | 	wrlong	local01, fp
03dec     10 4E 85 F1 | 	sub	fp, #16
03df0                 | ' 
03df0                 | ' 
03df0                 | ' searchptr=programstart
03df0                 | ' 
03df0                 | ' do
03df0     35 00 00 FF 
03df4     88 E5 85 F1 | 	sub	objptr, ##27528
03df8                 | LR__0330
03df8     14 4E 05 F1 | 	add	fp, #20
03dfc     A7 12 02 F6 | 	mov	arg01, fp
03e00     04 4E 85 F1 | 	sub	fp, #4
03e04     A7 14 02 FB | 	rdlong	arg02, fp
03e08     10 4E 85 F1 | 	sub	fp, #16
03e0c     18 16 06 F6 | 	mov	arg03, #24
03e10     48 12 B1 FD | 	call	#_psram_spin2_read1
03e14     10 4E 05 F1 | 	add	fp, #16
03e18     A7 1E 02 FB | 	rdlong	local01, fp
03e1c     08 4E 85 F1 | 	sub	fp, #8
03e20     A7 1E 62 FC | 	wrlong	local01, fp
03e24     20 4E 05 F1 | 	add	fp, #32
03e28     A7 1E 02 FB | 	rdlong	local01, fp
03e2c     18 4E 85 F1 | 	sub	fp, #24
03e30     A7 1E 62 FC | 	wrlong	local01, fp
03e34     04 4E 05 F1 | 	add	fp, #4
03e38     A7 1E 02 FB | 	rdlong	local01, fp
03e3c     10 4E 85 F1 | 	sub	fp, #16
03e40     A7 16 02 FB | 	rdlong	arg03, fp
03e44     04 4E 85 F1 | 	sub	fp, #4
03e48     0B 1F 12 F2 | 	cmp	local01, arg03 wc
03e4c     28 4E 05 C1 |  if_b	add	fp, #40
03e50     A7 20 02 CB |  if_b	rdlong	local02, fp
03e54     28 4E 85 C1 |  if_b	sub	fp, #40
03e58     FF FF 3F CF 
03e5c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
03e60     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0330
03e64     0B 00 00 FF 
03e68     C0 E4 85 F1 | 	sub	objptr, ##5824
03e6c                 | ' 
03e6c                 | ' 
03e6c                 | ' if header(0)<>aline then return -1
03e6c     14 4E 05 F1 | 	add	fp, #20
03e70     A7 1E 02 FB | 	rdlong	local01, fp
03e74     10 4E 85 F1 | 	sub	fp, #16
03e78     A7 22 02 FB | 	rdlong	local03, fp
03e7c     04 4E 85 F1 | 	sub	fp, #4
03e80     11 1F 0A F2 | 	cmp	local01, local03 wz
03e84     01 FA 65 56 |  if_ne	neg	result1, #1
03e88     4C 03 90 5D |  if_ne	jmp	#LR__0336
03e8c     08 4E 05 F1 | 	add	fp, #8
03e90     A7 12 02 FB | 	rdlong	arg01, fp
03e94     08 4E 85 F1 | 	sub	fp, #8
03e98     01 14 66 F6 | 	neg	arg02, #1
03e9c     01 16 06 F6 | 	mov	arg03, #1
03ea0     00 18 06 F6 | 	mov	arg04, #0
03ea4     0B 00 00 FF 
03ea8     C0 E4 05 F1 | 	add	objptr, ##5824
03eac                 | '     return fill(addr, pattern, count, listPtr, 4)
03eac     04 1A 06 F6 | 	mov	arg05, #4
03eb0     E0 12 B1 FD | 	call	#_psram_spin2_fill
03eb4     0B 00 00 FF 
03eb8     C0 E4 85 F1 | 	sub	objptr, ##5824
03ebc                 | ' 
03ebc                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
03ebc                 | ' 
03ebc                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is one and only line in the program
03ebc     28 4E 05 F1 | 	add	fp, #40
03ec0     A7 1E 02 FB | 	rdlong	local01, fp
03ec4     28 4E 85 F1 | 	sub	fp, #40
03ec8     FF FF 3F FF 
03ecc     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03ed0     24 4E 05 A1 |  if_e	add	fp, #36
03ed4     A7 22 02 AB |  if_e	rdlong	local03, fp
03ed8     24 4E 85 A1 |  if_e	sub	fp, #36
03edc     FF FF 7F AF 
03ee0     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
03ee4     90 00 90 5D |  if_ne	jmp	#LR__0331
03ee8     41 00 00 FF 
03eec     48 E4 05 F1 | 	add	objptr, ##33352
03ef0     F2 00 68 FC | 	wrlong	#0, objptr
03ef4     07 00 00 FF 
03ef8     28 E4 85 F1 | 	sub	objptr, ##3624
03efc     F2 00 68 FC | 	wrlong	#0, objptr
03f00     07 00 00 FF 
03f04     2C E4 05 F1 | 	add	objptr, ##3628
03f08     F2 00 68 FC | 	wrlong	#0, objptr
03f0c     04 E4 05 F1 | 	add	objptr, #4
03f10     FF FF FF FF 
03f14     F2 FE 6B FC | 	wrlong	##-1, objptr
03f18     00 12 06 F6 | 	mov	arg01, #0
03f1c     10 E4 85 F1 | 	sub	objptr, #16
03f20     F2 00 68 FC | 	wrlong	#0, objptr
03f24     01 14 66 F6 | 	neg	arg02, #1
03f28     01 16 06 F6 | 	mov	arg03, #1
03f2c     00 18 06 F6 | 	mov	arg04, #0
03f30     35 00 00 FF 
03f34     80 E5 85 F1 | 	sub	objptr, ##27520
03f38                 | '     return fill(addr, pattern, count, listPtr, 4)
03f38     04 1A 06 F6 | 	mov	arg05, #4
03f3c     54 12 B1 FD | 	call	#_psram_spin2_fill
03f40     10 12 06 F6 | 	mov	arg01, #16
03f44     01 14 66 F6 | 	neg	arg02, #1
03f48     01 16 06 F6 | 	mov	arg03, #1
03f4c     00 18 06 F6 | 	mov	arg04, #0
03f50                 | '     return fill(addr, pattern, count, listPtr, 4)
03f50     04 1A 06 F6 | 	mov	arg05, #4
03f54     3C 12 B1 FD | 	call	#_psram_spin2_fill
03f58     14 12 06 F6 | 	mov	arg01, #20
03f5c     1E 14 CE F9 | 	bmask	arg02, #30
03f60     01 16 06 F6 | 	mov	arg03, #1
03f64     00 18 06 F6 | 	mov	arg04, #0
03f68                 | '     return fill(addr, pattern, count, listPtr, 4)
03f68     04 1A 06 F6 | 	mov	arg05, #4
03f6c     24 12 B1 FD | 	call	#_psram_spin2_fill
03f70     0B 00 00 FF 
03f74     C0 E4 85 F1 | 	sub	objptr, ##5824
03f78                 | LR__0331
03f78                 | ' 
03f78                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
03f78     28 4E 05 F1 | 	add	fp, #40
03f7c     A7 1E 02 FB | 	rdlong	local01, fp
03f80     28 4E 85 F1 | 	sub	fp, #40
03f84     FF FF 3F FF 
03f88     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03f8c     88 00 90 5D |  if_ne	jmp	#LR__0332
03f90     24 4E 05 F1 | 	add	fp, #36
03f94     A7 22 02 FB | 	rdlong	local03, fp
03f98     24 4E 85 F1 | 	sub	fp, #36
03f9c     FF FF 7F FF 
03fa0     FF 23 0E F2 | 	cmp	local03, ##-1 wz
03fa4     70 00 90 AD |  if_e	jmp	#LR__0332
03fa8     24 4E 05 F1 | 	add	fp, #36
03fac     A7 12 02 FB | 	rdlong	arg01, fp
03fb0     24 4E 85 F1 | 	sub	fp, #36
03fb4     14 12 06 F1 | 	add	arg01, #20
03fb8     1E 14 CE F9 | 	bmask	arg02, #30
03fbc     01 16 06 F6 | 	mov	arg03, #1
03fc0     00 18 06 F6 | 	mov	arg04, #0
03fc4     0B 00 00 FF 
03fc8     C0 E4 05 F1 | 	add	objptr, ##5824
03fcc                 | '     return fill(addr, pattern, count, listPtr, 4)
03fcc     04 1A 06 F6 | 	mov	arg05, #4
03fd0     C0 11 B1 FD | 	call	#_psram_spin2_fill
03fd4     24 4E 05 F1 | 	add	fp, #36
03fd8     A7 1E 02 FB | 	rdlong	local01, fp
03fdc     35 00 00 FF 
03fe0     90 E5 05 F1 | 	add	objptr, ##27536
03fe4     F2 1E 62 FC | 	wrlong	local01, objptr
03fe8     41 00 00 FF 
03fec     50 E4 85 F1 | 	sub	objptr, ##33360
03ff0     A7 12 02 FB | 	rdlong	arg01, fp
03ff4     24 4E 85 F1 | 	sub	fp, #36
03ff8     E8 E7 B0 FD | 	call	#_pslpeek
03ffc     41 00 00 FF 
04000     4C E4 05 F1 | 	add	objptr, ##33356
04004     F2 FA 61 FC | 	wrlong	result1, objptr
04008     41 00 00 FF 
0400c     4C E4 85 F1 | 	sub	objptr, ##33356
04010                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
04010                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
04010                 | '   lastline=pslpeek(header(4))
04010                 | '   return 0
04010     00 FA 05 F6 | 	mov	result1, #0
04014     C0 01 90 FD | 	jmp	#LR__0336
04018                 | LR__0332
04018                 | ' 
04018                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
04018     28 4E 05 F1 | 	add	fp, #40
0401c     A7 1E 02 FB | 	rdlong	local01, fp
04020     28 4E 85 F1 | 	sub	fp, #40
04024     FF FF 3F FF 
04028     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0402c     6C 00 90 AD |  if_e	jmp	#LR__0333
04030     24 4E 05 F1 | 	add	fp, #36
04034     A7 22 02 FB | 	rdlong	local03, fp
04038     24 4E 85 F1 | 	sub	fp, #36
0403c     FF FF 7F FF 
04040     FF 23 0E F2 | 	cmp	local03, ##-1 wz
04044     54 00 90 5D |  if_ne	jmp	#LR__0333
04048     28 4E 05 F1 | 	add	fp, #40
0404c     A7 12 02 FB | 	rdlong	arg01, fp
04050     28 4E 85 F1 | 	sub	fp, #40
04054     10 12 06 F1 | 	add	arg01, #16
04058     01 14 66 F6 | 	neg	arg02, #1
0405c     01 16 06 F6 | 	mov	arg03, #1
04060     00 18 06 F6 | 	mov	arg04, #0
04064     0B 00 00 FF 
04068     C0 E4 05 F1 | 	add	objptr, ##5824
0406c                 | '     return fill(addr, pattern, count, listPtr, 4)
0406c     04 1A 06 F6 | 	mov	arg05, #4
04070     20 11 B1 FD | 	call	#_psram_spin2_fill
04074     28 4E 05 F1 | 	add	fp, #40
04078     A7 1E 02 FB | 	rdlong	local01, fp
0407c     28 4E 85 F1 | 	sub	fp, #40
04080     35 00 00 FF 
04084     88 E5 05 F1 | 	add	objptr, ##27528
04088     F2 1E 62 FC | 	wrlong	local01, objptr
0408c     41 00 00 FF 
04090     48 E4 85 F1 | 	sub	objptr, ##33352
04094                 | ' '   print "deleted first line"
04094                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
04094                 | '   programstart=header(5) ' adjust the program start to point on the first new line
04094                 | '   return 0
04094     00 FA 05 F6 | 	mov	result1, #0
04098     3C 01 90 FD | 	jmp	#LR__0336
0409c                 | LR__0333
0409c                 | ' 
0409c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
0409c     28 4E 05 F1 | 	add	fp, #40
040a0     A7 1E 02 FB | 	rdlong	local01, fp
040a4     28 4E 85 F1 | 	sub	fp, #40
040a8     FF FF 3F FF 
040ac     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
040b0     24 4E 05 51 |  if_ne	add	fp, #36
040b4     A7 22 02 5B |  if_ne	rdlong	local03, fp
040b8     24 4E 85 51 |  if_ne	sub	fp, #36
040bc     FF FF 7F 5F 
040c0     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
040c4     68 00 90 AD |  if_e	jmp	#LR__0334
040c8     28 4E 05 F1 | 	add	fp, #40
040cc     A7 12 02 FB | 	rdlong	arg01, fp
040d0     10 12 06 F1 | 	add	arg01, #16
040d4     04 4E 85 F1 | 	sub	fp, #4
040d8     A7 14 02 FB | 	rdlong	arg02, fp
040dc     24 4E 85 F1 | 	sub	fp, #36
040e0     01 16 06 F6 | 	mov	arg03, #1
040e4     00 18 06 F6 | 	mov	arg04, #0
040e8     0B 00 00 FF 
040ec     C0 E4 05 F1 | 	add	objptr, ##5824
040f0                 | '     return fill(addr, pattern, count, listPtr, 4)
040f0     04 1A 06 F6 | 	mov	arg05, #4
040f4     9C 10 B1 FD | 	call	#_psram_spin2_fill
040f8     24 4E 05 F1 | 	add	fp, #36
040fc     A7 12 02 FB | 	rdlong	arg01, fp
04100     14 12 06 F1 | 	add	arg01, #20
04104     04 4E 05 F1 | 	add	fp, #4
04108     A7 14 02 FB | 	rdlong	arg02, fp
0410c     28 4E 85 F1 | 	sub	fp, #40
04110     01 16 06 F6 | 	mov	arg03, #1
04114     00 18 06 F6 | 	mov	arg04, #0
04118                 | '     return fill(addr, pattern, count, listPtr, 4)
04118     04 1A 06 F6 | 	mov	arg05, #4
0411c     74 10 B1 FD | 	call	#_psram_spin2_fill
04120     0B 00 00 FF 
04124     C0 E4 85 F1 | 	sub	objptr, ##5824
04128                 | '    pslpoke(header(5)+16,header(4))  
04128                 | '    pslpoke(header(4)+20, header(5))
04128                 | '    return 0
04128     00 FA 05 F6 | 	mov	result1, #0
0412c     A8 00 90 FD | 	jmp	#LR__0336
04130                 | LR__0334
04130     10 4E 05 F1 | 	add	fp, #16
04134     A7 1E 02 FB | 	rdlong	local01, fp
04138     08 4E 85 F1 | 	sub	fp, #8
0413c     A7 1E 62 FC | 	wrlong	local01, fp
04140     41 00 00 FF 
04144     48 E4 05 F1 | 	add	objptr, ##33352
04148     F2 1E 02 FB | 	rdlong	local01, objptr
0414c     08 4E 05 F1 | 	add	fp, #8
04150     A7 1E 62 FC | 	wrlong	local01, fp
04154     10 4E 85 F1 | 	sub	fp, #16
04158                 | ' 
04158                 | ' 
04158                 | ' 
04158                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
04158                 | ' 
04158                 | ' lineptr2=searchptr
04158                 | ' searchptr=programstart
04158                 | ' 
04158                 | ' do
04158     35 00 00 FF 
0415c     88 E5 85 F1 | 	sub	objptr, ##27528
04160                 | LR__0335
04160     14 4E 05 F1 | 	add	fp, #20
04164     A7 12 02 F6 | 	mov	arg01, fp
04168     04 4E 85 F1 | 	sub	fp, #4
0416c     A7 14 02 FB | 	rdlong	arg02, fp
04170     10 4E 85 F1 | 	sub	fp, #16
04174     18 16 06 F6 | 	mov	arg03, #24
04178     E0 0E B1 FD | 	call	#_psram_spin2_read1
0417c     10 4E 05 F1 | 	add	fp, #16
04180     A7 1E 02 FB | 	rdlong	local01, fp
04184     08 4E 85 F1 | 	sub	fp, #8
04188     A7 1E 62 FC | 	wrlong	local01, fp
0418c     20 4E 05 F1 | 	add	fp, #32
04190     A7 1E 02 FB | 	rdlong	local01, fp
04194     18 4E 85 F1 | 	sub	fp, #24
04198     A7 1E 62 FC | 	wrlong	local01, fp
0419c     04 4E 05 F1 | 	add	fp, #4
041a0     A7 1E 02 FB | 	rdlong	local01, fp
041a4     10 4E 85 F1 | 	sub	fp, #16
041a8     A7 22 02 FB | 	rdlong	local03, fp
041ac     04 4E 85 F1 | 	sub	fp, #4
041b0     11 1F 12 F2 | 	cmp	local01, local03 wc
041b4     28 4E 05 C1 |  if_b	add	fp, #40
041b8     A7 20 02 CB |  if_b	rdlong	local02, fp
041bc     28 4E 85 C1 |  if_b	sub	fp, #40
041c0     FF FF 3F CF 
041c4     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
041c8     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0335
041cc     0B 00 00 FF 
041d0     C0 E4 85 F1 | 	sub	objptr, ##5824
041d4     00 FA 05 F6 | 	mov	result1, #0
041d8                 | LR__0336
041d8     A7 F0 03 F6 | 	mov	ptra, fp
041dc     B2 00 A0 FD | 	call	#popregs_
041e0                 | _deleteline_ret
041e0     2D 00 64 FD | 	ret
041e4                 | 
041e4                 | ' 
041e4                 | ' sub save_line
041e4                 | _save_line
041e4     03 4A 05 F6 | 	mov	COUNT_, #3
041e8     A8 00 A0 FD | 	call	#pushregs_
041ec     41 00 00 FF 
041f0     40 E4 05 F1 | 	add	objptr, ##33344
041f4     F2 16 02 FB | 	rdlong	arg03, objptr
041f8     01 16 06 F1 | 	add	arg03, #1
041fc     05 00 00 FF 
04200     18 E4 85 F1 | 	sub	objptr, ##2584
04204     F2 14 02 FB | 	rdlong	arg02, objptr
04208     0B 15 02 FD | 	qmul	arg02, arg03
0420c     0E 00 00 FF 
04210     44 E4 85 F1 | 	sub	objptr, ##7236
04214     F2 12 02 FB | 	rdlong	arg01, objptr
04218     2D 00 00 FF 
0421c     E4 E5 85 F1 | 	sub	objptr, ##23524
04220     09 1F 02 F6 | 	mov	local01, arg01
04224     18 20 62 FD | 	getqx	local02
04228     97 06 48 FB | 	callpa	#(@LR__0341-@LR__0340)>>2,fcache_load_ptr_
0422c                 | LR__0340
0422c     0F FB C9 FA | 	rdbyte	result1, local01 wz
04230     01 1E 06 51 |  if_ne	add	local01, #1
04234     F4 FF 9F 5D |  if_ne	jmp	#LR__0340
04238                 | LR__0341
04238     09 1F 82 F1 | 	sub	local01, arg01
0423c     03 1E CE F7 | 	test	local01, #3 wz
04240     02 1E 46 50 |  if_ne	shr	local01, #2
04244     01 1E 06 51 |  if_ne	add	local01, #1
04248     02 1E 66 50 |  if_ne	shl	local01, #2
0424c     10 23 02 F6 | 	mov	local03, local02
04250     0F 23 02 F1 | 	add	local03, local01
04254     3A 00 00 FF 
04258     20 E4 05 F1 | 	add	objptr, ##29728
0425c     F2 16 02 FB | 	rdlong	arg03, objptr
04260     10 17 02 F1 | 	add	arg03, local02
04264     04 00 00 FF 
04268     28 E4 05 F1 | 	add	objptr, ##2088
0426c     F2 16 62 FC | 	wrlong	arg03, objptr
04270     04 E4 05 F1 | 	add	objptr, #4
04274     F2 1E 62 FC | 	wrlong	local01, objptr
04278     0C E4 85 F1 | 	sub	objptr, #12
0427c     F2 12 02 F6 | 	mov	arg01, objptr
04280     04 00 00 FF 
04284     20 E4 85 F1 | 	sub	objptr, ##2080
04288     F2 14 02 FB | 	rdlong	arg02, objptr
0428c     10 17 02 F6 | 	mov	arg03, local02
04290     2E 00 00 FF 
04294     60 E5 85 F1 | 	sub	objptr, ##23904
04298     5C 0E B1 FD | 	call	#_psram_spin2_write
0429c     22 00 00 FF 
042a0     24 E5 05 F1 | 	add	objptr, ##17700
042a4     F2 12 02 FB | 	rdlong	arg01, objptr
042a8     0C 00 00 FF 
042ac     3C E4 05 F1 | 	add	objptr, ##6204
042b0     F2 14 02 FB | 	rdlong	arg02, objptr
042b4     10 15 02 F1 | 	add	arg02, local02
042b8     0F 17 02 F6 | 	mov	arg03, local01
042bc     2E 00 00 FF 
042c0     60 E5 85 F1 | 	sub	objptr, ##23904
042c4     30 0E B1 FD | 	call	#_psram_spin2_write
042c8     2E 00 00 FF 
042cc     60 E5 05 F1 | 	add	objptr, ##23904
042d0     F2 1E 02 FB | 	rdlong	local01, objptr
042d4     11 1F 02 F1 | 	add	local01, local03
042d8     F2 1E 62 FC | 	wrlong	local01, objptr
042dc     3A 00 00 FF 
042e0     20 E4 85 F1 | 	sub	objptr, ##29728
042e4     A7 F0 03 F6 | 	mov	ptra, fp
042e8     B2 00 A0 FD | 	call	#popregs_
042ec                 | _save_line_ret
042ec     2D 00 64 FD | 	ret
042f0                 | 
042f0                 | ' 
042f0                 | ' 
042f0                 | ' function insertline(aline as ulong) as integer
042f0                 | _insertline
042f0     02 4A 05 F6 | 	mov	COUNT_, #2
042f4     A8 00 A0 FD | 	call	#pushregs_
042f8     28 F0 07 F1 | 	add	ptra, #40
042fc     04 4E 05 F1 | 	add	fp, #4
04300     A7 12 62 FC | 	wrlong	arg01, fp
04304     41 00 00 FF 
04308     48 E4 05 F1 | 	add	objptr, ##33352
0430c     F2 1E 02 FB | 	rdlong	local01, objptr
04310     04 4E 05 F1 | 	add	fp, #4
04314     A7 1E 62 FC | 	wrlong	local01, fp
04318     08 4E 85 F1 | 	sub	fp, #8
0431c                 | ' 
0431c                 | ' do
0431c     35 00 00 FF 
04320     88 E5 85 F1 | 	sub	objptr, ##27528
04324                 | LR__0350
04324     10 4E 05 F1 | 	add	fp, #16
04328     A7 12 02 F6 | 	mov	arg01, fp
0432c     08 4E 85 F1 | 	sub	fp, #8
04330     A7 14 02 FB | 	rdlong	arg02, fp
04334     08 4E 85 F1 | 	sub	fp, #8
04338     18 16 06 F6 | 	mov	arg03, #24
0433c     1C 0D B1 FD | 	call	#_psram_spin2_read1
04340     08 4E 05 F1 | 	add	fp, #8
04344     A7 1E 02 FB | 	rdlong	local01, fp
04348     04 4E 05 F1 | 	add	fp, #4
0434c     A7 1E 62 FC | 	wrlong	local01, fp
04350     18 4E 05 F1 | 	add	fp, #24
04354     A7 1E 02 FB | 	rdlong	local01, fp
04358     1C 4E 85 F1 | 	sub	fp, #28
0435c     A7 1E 62 FC | 	wrlong	local01, fp
04360     08 4E 05 F1 | 	add	fp, #8
04364     A7 1E 02 FB | 	rdlong	local01, fp
04368     0C 4E 85 F1 | 	sub	fp, #12
0436c     A7 16 02 FB | 	rdlong	arg03, fp
04370     04 4E 85 F1 | 	sub	fp, #4
04374     0B 1F 12 F2 | 	cmp	local01, arg03 wc
04378     24 4E 05 C1 |  if_b	add	fp, #36
0437c     A7 20 02 CB |  if_b	rdlong	local02, fp
04380     24 4E 85 C1 |  if_b	sub	fp, #36
04384     FF FF 3F CF 
04388     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
0438c     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0350
04390     0B 00 00 FF 
04394     C0 E4 85 F1 | 	sub	objptr, ##5824
04398                 | ' 
04398                 | ' if header(0)=aline then return -1 ' delete it first
04398     10 4E 05 F1 | 	add	fp, #16
0439c     A7 1E 02 FB | 	rdlong	local01, fp
043a0     0C 4E 85 F1 | 	sub	fp, #12
043a4     A7 20 02 FB | 	rdlong	local02, fp
043a8     04 4E 85 F1 | 	sub	fp, #4
043ac     10 1F 0A F2 | 	cmp	local01, local02 wz
043b0     01 FA 65 A6 |  if_e	neg	result1, #1
043b4     74 01 90 AD |  if_e	jmp	#LR__0353
043b8                 | ' if header(0)<aline then return -2 ' end of program reached
043b8     10 4E 05 F1 | 	add	fp, #16
043bc     A7 1E 02 FB | 	rdlong	local01, fp
043c0     0C 4E 85 F1 | 	sub	fp, #12
043c4     A7 16 02 FB | 	rdlong	arg03, fp
043c8     04 4E 85 F1 | 	sub	fp, #4
043cc     0B 1F 12 F2 | 	cmp	local01, arg03 wc
043d0     02 FA 65 C6 |  if_b	neg	result1, #2
043d4     54 01 90 CD |  if_b	jmp	#LR__0353
043d8                 | ' 
043d8                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
043d8     20 4E 05 F1 | 	add	fp, #32
043dc     A7 1E 02 FB | 	rdlong	local01, fp
043e0     20 4E 85 F1 | 	sub	fp, #32
043e4     FF FF 7F FF 
043e8     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
043ec     84 00 90 5D |  if_ne	jmp	#LR__0351
043f0     3A 00 00 FF 
043f4     20 E4 05 F1 | 	add	objptr, ##29728
043f8     F2 1E 02 FB | 	rdlong	local01, objptr
043fc     07 00 00 FF 
04400     28 E4 05 F1 | 	add	objptr, ##3624
04404     F2 1E 62 FC | 	wrlong	local01, objptr
04408     0C 4E 05 F1 | 	add	fp, #12
0440c     A7 12 02 FB | 	rdlong	arg01, fp
04410     0C 4E 85 F1 | 	sub	fp, #12
04414     10 12 06 F1 | 	add	arg01, #16
04418     07 00 00 FF 
0441c     28 E4 85 F1 | 	sub	objptr, ##3624
04420     F2 14 02 FB | 	rdlong	arg02, objptr
04424     01 16 06 F6 | 	mov	arg03, #1
04428     00 18 06 F6 | 	mov	arg04, #0
0442c     2E 00 00 FF 
04430     60 E5 85 F1 | 	sub	objptr, ##23904
04434                 | '     return fill(addr, pattern, count, listPtr, 4)
04434     04 1A 06 F6 | 	mov	arg05, #4
04438     58 0D B1 FD | 	call	#_psram_spin2_fill
0443c     32 00 00 FF 
04440     90 E5 05 F1 | 	add	objptr, ##26000
04444     FF FF FF FF 
04448     F2 FE 6B FC | 	wrlong	##-1, objptr
0444c     0C 4E 05 F1 | 	add	fp, #12
04450     A7 1E 02 FB | 	rdlong	local01, fp
04454     0C 4E 85 F1 | 	sub	fp, #12
04458     04 E4 05 F1 | 	add	objptr, #4
0445c     F2 1E 62 FC | 	wrlong	local01, objptr
04460     3E 00 00 FF 
04464     54 E4 85 F1 | 	sub	objptr, ##31828
04468     78 FD BF FD | 	call	#_save_line
0446c                 | '   programstart=programptr
0446c                 | '   pslpoke(lineptr2+16,programptr)
0446c                 | '   ucompiledline(4)=$FFFF_FFFF
0446c                 | '   ucompiledline(5)=lineptr2
0446c                 | '   save_line
0446c                 | '   return 0
0446c     00 FA 05 F6 | 	mov	result1, #0
04470     B8 00 90 FD | 	jmp	#LR__0353
04474                 | LR__0351
04474                 | ' 
04474                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
04474     20 4E 05 F1 | 	add	fp, #32
04478     A7 1E 02 FB | 	rdlong	local01, fp
0447c     20 4E 85 F1 | 	sub	fp, #32
04480     FF FF 7F FF 
04484     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
04488     9C 00 90 AD |  if_e	jmp	#LR__0352
0448c     20 4E 05 F1 | 	add	fp, #32
04490     A7 1E 02 FB | 	rdlong	local01, fp
04494     3E 00 00 FF 
04498     50 E4 05 F1 | 	add	objptr, ##31824
0449c     F2 1E 62 FC | 	wrlong	local01, objptr
044a0     14 4E 85 F1 | 	sub	fp, #20
044a4     A7 1E 02 FB | 	rdlong	local01, fp
044a8     04 E4 05 F1 | 	add	objptr, #4
044ac     F2 1E 62 FC | 	wrlong	local01, objptr
044b0     A7 12 02 FB | 	rdlong	arg01, fp
044b4     0C 4E 85 F1 | 	sub	fp, #12
044b8     10 12 06 F1 | 	add	arg01, #16
044bc     04 00 00 FF 
044c0     34 E4 85 F1 | 	sub	objptr, ##2100
044c4     F2 14 02 FB | 	rdlong	arg02, objptr
044c8     01 16 06 F6 | 	mov	arg03, #1
044cc     00 18 06 F6 | 	mov	arg04, #0
044d0     2E 00 00 FF 
044d4     60 E5 85 F1 | 	sub	objptr, ##23904
044d8                 | '     return fill(addr, pattern, count, listPtr, 4)
044d8     04 1A 06 F6 | 	mov	arg05, #4
044dc     B4 0C B1 FD | 	call	#_psram_spin2_fill
044e0     20 4E 05 F1 | 	add	fp, #32
044e4     A7 12 02 FB | 	rdlong	arg01, fp
044e8     20 4E 85 F1 | 	sub	fp, #32
044ec     14 12 06 F1 | 	add	arg01, #20
044f0     2E 00 00 FF 
044f4     60 E5 05 F1 | 	add	objptr, ##23904
044f8     F2 14 02 FB | 	rdlong	arg02, objptr
044fc     01 16 06 F6 | 	mov	arg03, #1
04500     00 18 06 F6 | 	mov	arg04, #0
04504     2E 00 00 FF 
04508     60 E5 85 F1 | 	sub	objptr, ##23904
0450c                 | '     return fill(addr, pattern, count, listPtr, 4)
0450c     04 1A 06 F6 | 	mov	arg05, #4
04510     80 0C B1 FD | 	call	#_psram_spin2_fill
04514     0B 00 00 FF 
04518     C0 E4 85 F1 | 	sub	objptr, ##5824
0451c     C4 FC BF FD | 	call	#_save_line
04520                 | '   ucompiledline(4)=header(4)
04520                 | '   ucompiledline(5)=lineptr2
04520                 | '   pslpoke(lineptr2+16,programptr)
04520                 | '   pslpoke(header(4)+20,programptr)
04520                 | '   save_line
04520                 | '   return 0
04520     00 FA 05 F6 | 	mov	result1, #0
04524     04 00 90 FD | 	jmp	#LR__0353
04528                 | LR__0352
04528     00 FA 05 F6 | 	mov	result1, #0
0452c                 | LR__0353
0452c     A7 F0 03 F6 | 	mov	ptra, fp
04530     B2 00 A0 FD | 	call	#popregs_
04534                 | _insertline_ret
04534     2D 00 64 FD | 	ret
04538                 | 
04538                 | ' 
04538                 | ' sub add_line_at_end(aline) 
04538                 | _add_line_at_end
04538     41 00 00 FF 
0453c     4C E4 05 F1 | 	add	objptr, ##33356
04540     F2 12 62 FC | 	wrlong	arg01, objptr
04544     04 E4 05 F1 | 	add	objptr, #4
04548     F2 14 02 FB | 	rdlong	arg02, objptr
0454c     03 00 00 FF 
04550     00 E4 85 F1 | 	sub	objptr, ##1536
04554     F2 14 62 FC | 	wrlong	arg02, objptr
04558     03 00 00 FF 
0455c     00 E4 05 F1 | 	add	objptr, ##1536
04560     F2 12 02 FB | 	rdlong	arg01, objptr
04564     14 12 06 F1 | 	add	arg01, #20
04568     07 00 00 FF 
0456c     30 E4 85 F1 | 	sub	objptr, ##3632
04570     F2 14 02 FB | 	rdlong	arg02, objptr
04574     01 16 06 F6 | 	mov	arg03, #1
04578     00 18 06 F6 | 	mov	arg04, #0
0457c     2E 00 00 FF 
04580     60 E5 85 F1 | 	sub	objptr, ##23904
04584                 | '     return fill(addr, pattern, count, listPtr, 4)
04584     04 1A 06 F6 | 	mov	arg05, #4
04588     08 0C B1 FD | 	call	#_psram_spin2_fill
0458c     2E 00 00 FF 
04590     60 E5 05 F1 | 	add	objptr, ##23904
04594     F2 14 02 FB | 	rdlong	arg02, objptr
04598     07 00 00 FF 
0459c     30 E4 05 F1 | 	add	objptr, ##3632
045a0     F2 14 62 FC | 	wrlong	arg02, objptr
045a4     02 00 00 FF 
045a8     FC E5 85 F1 | 	sub	objptr, ##1532
045ac     FF FF BF FF 
045b0     F2 FE 6B FC | 	wrlong	##2147483647, objptr
045b4                 | ' 
045b4                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
045b4                 | ' if programptr=0 then ucompiledline(4)=$FFFFFFFF ' that is the first line
045b4     04 00 00 FF 
045b8     34 E4 85 F1 | 	sub	objptr, ##2100
045bc     F2 14 0A FB | 	rdlong	arg02, objptr wz
045c0     3A 00 00 FF 
045c4     20 E4 85 F1 | 	sub	objptr, ##29728
045c8     3E 00 00 AF 
045cc     50 E4 05 A1 |  if_e	add	objptr, ##31824
045d0     FF FF FF AF 
045d4     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
045d8     3E 00 00 AF 
045dc     50 E4 85 A1 |  if_e	sub	objptr, ##31824
045e0     00 FC BF FD | 	call	#_save_line
045e4     3A 00 00 FF 
045e8     20 E4 05 F1 | 	add	objptr, ##29728
045ec     F2 12 02 FB | 	rdlong	arg01, objptr
045f0     01 14 66 F6 | 	neg	arg02, #1
045f4     01 16 06 F6 | 	mov	arg03, #1
045f8     00 18 06 F6 | 	mov	arg04, #0
045fc     2E 00 00 FF 
04600     60 E5 85 F1 | 	sub	objptr, ##23904
04604                 | '     return fill(addr, pattern, count, listPtr, 4)
04604     04 1A 06 F6 | 	mov	arg05, #4
04608     88 0B B1 FD | 	call	#_psram_spin2_fill
0460c     0B 00 00 FF 
04610     C0 E4 85 F1 | 	sub	objptr, ##5824
04614                 | _add_line_at_end_ret
04614     2D 00 64 FD | 	ret
04618                 | 
04618                 | ' 
04618                 | ' function compile_immediate(linetype as ulong) as integer
04618                 | _compile_immediate
04618     09 4A 05 F6 | 	mov	COUNT_, #9
0461c     A8 00 A0 FD | 	call	#pushregs_
04620                 | _compile_immediate_enter
04620     09 25 0A F6 | 	mov	local04, arg01 wz
04624     00 26 06 F6 | 	mov	local05, #0
04628     00 28 06 F6 | 	mov	local06, #0
0462c                 | ' 
0462c                 | ' ' linetype=cont+1, linetype=0 immediate
0462c                 | ' '  : 1: this is the first part of the line that will continue
0462c                 | ' ' 2 - this is the continuation of the line
0462c                 | ' ' 3 - this is the last continued line
0462c                 | ' ' 4 - this is the one and only part
0462c                 | ' 
0462c                 | ' err=0
0462c                 | ' cmd=0
0462c                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
0462c     2C 00 90 5D |  if_ne	jmp	#LR__0360
04630     2B 00 00 FF 
04634     D4 E5 05 F1 | 	add	objptr, ##22484
04638     F2 28 02 FB | 	rdlong	local06, objptr
0463c     02 00 00 FF 
04640     34 E4 05 F1 | 	add	objptr, ##1076
04644     F2 02 68 FC | 	wrlong	#1, objptr
04648     13 00 00 FF 
0464c     38 E4 05 F1 | 	add	objptr, ##9784
04650     F2 00 68 FC | 	wrlong	#0, objptr
04654     41 00 00 FF 
04658     40 E4 85 F1 | 	sub	objptr, ##33344
0465c                 | LR__0360
0465c                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
0465c     02 24 0E F2 | 	cmp	local04, #2 wz
04660     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
04664     2B 00 00 AF 
04668     D4 E5 05 A1 |  if_e	add	objptr, ##22484
0466c     F2 28 02 AB |  if_e	rdlong	local06, objptr
04670     02 00 00 AF 
04674     34 E4 05 A1 |  if_e	add	objptr, ##1076
04678     F2 02 68 AC |  if_e	wrlong	#1, objptr
0467c     2E 00 00 AF 
04680     08 E4 85 A1 |  if_e	sub	objptr, ##23560
04684                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
04684     04 24 0E F2 | 	cmp	local04, #4 wz
04688     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
0468c     2C 00 90 5D |  if_ne	jmp	#LR__0361
04690     2B 00 00 FF 
04694     DC E5 05 F1 | 	add	objptr, ##22492
04698     F2 28 02 FB | 	rdlong	local06, objptr
0469c     02 00 00 FF 
046a0     2C E4 05 F1 | 	add	objptr, ##1068
046a4     F2 04 68 FC | 	wrlong	#2, objptr
046a8     13 00 00 FF 
046ac     38 E4 05 F1 | 	add	objptr, ##9784
046b0     F2 04 68 FC | 	wrlong	#2, objptr
046b4     41 00 00 FF 
046b8     40 E4 85 F1 | 	sub	objptr, ##33344
046bc                 | LR__0361
046bc                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
046bc     05 24 0E F2 | 	cmp	local04, #5 wz
046c0     40 00 90 5D |  if_ne	jmp	#LR__0362
046c4     2E 00 00 FF 
046c8     08 E4 05 F1 | 	add	objptr, ##23560
046cc     F2 2A 02 FB | 	rdlong	local07, objptr
046d0     15 29 02 F6 | 	mov	local06, local07
046d4     03 28 66 F0 | 	shl	local06, #3
046d8     02 00 00 FF 
046dc     38 E4 85 F1 | 	sub	objptr, ##1080
046e0     F2 28 02 F1 | 	add	local06, objptr
046e4     04 28 06 F1 | 	add	local06, #4
046e8     14 29 02 FB | 	rdlong	local06, local06
046ec     01 2A 06 F1 | 	add	local07, #1
046f0     02 00 00 FF 
046f4     38 E4 05 F1 | 	add	objptr, ##1080
046f8     F2 2A 62 FC | 	wrlong	local07, objptr
046fc     2E 00 00 FF 
04700     08 E4 85 F1 | 	sub	objptr, ##23560
04704                 | LR__0362
04704     00 2C 06 F6 | 	mov	local08, #0
04708                 | ' vars=0
04708                 | ' 'print  "In compile_immediate cmd=:", cmd
04708                 | ' 451 select case cmd
04708     40 28 0E F2 | 	cmp	local06, #64 wz
0470c     41 28 0E 52 |  if_ne	cmp	local06, #65 wz
04710     08 03 90 AD |  if_e	jmp	#LR__0407
04714     4C 28 0E F2 | 	cmp	local06, #76 wz
04718     6C 01 90 AD |  if_e	jmp	#LR__0363
0471c     4D 28 0E F2 | 	cmp	local06, #77 wz
04720     F8 02 90 AD |  if_e	jmp	#LR__0407
04724     42 28 0E F2 | 	cmp	local06, #66 wz
04728     68 01 90 AD |  if_e	jmp	#LR__0364
0472c     43 28 0E F2 | 	cmp	local06, #67 wz
04730     6C 01 90 AD |  if_e	jmp	#LR__0365
04734     45 28 0E F2 | 	cmp	local06, #69 wz
04738     70 01 90 AD |  if_e	jmp	#LR__0366
0473c     46 28 0E F2 | 	cmp	local06, #70 wz
04740     74 01 90 AD |  if_e	jmp	#LR__0367
04744     47 28 0E F2 | 	cmp	local06, #71 wz
04748     78 01 90 AD |  if_e	jmp	#LR__0368
0474c     48 28 0E F2 | 	cmp	local06, #72 wz
04750     7C 01 90 AD |  if_e	jmp	#LR__0369
04754     49 28 0E F2 | 	cmp	local06, #73 wz
04758     80 01 90 AD |  if_e	jmp	#LR__0370
0475c     44 28 0E F2 | 	cmp	local06, #68 wz
04760     84 01 90 AD |  if_e	jmp	#LR__0371
04764     4E 28 0E F2 | 	cmp	local06, #78 wz
04768     88 01 90 AD |  if_e	jmp	#LR__0372
0476c     50 28 0E F2 | 	cmp	local06, #80 wz
04770     9C 01 90 AD |  if_e	jmp	#LR__0374
04774     51 28 0E F2 | 	cmp	local06, #81 wz
04778     9C 01 90 AD |  if_e	jmp	#LR__0375
0477c     52 28 0E F2 | 	cmp	local06, #82 wz
04780     9C 01 90 AD |  if_e	jmp	#LR__0376
04784     59 28 0E F2 | 	cmp	local06, #89 wz
04788     9C 01 90 AD |  if_e	jmp	#LR__0377
0478c     55 28 0E F2 | 	cmp	local06, #85 wz
04790     9C 01 90 AD |  if_e	jmp	#LR__0378
04794     56 28 0E F2 | 	cmp	local06, #86 wz
04798     9C 01 90 AD |  if_e	jmp	#LR__0379
0479c     57 28 0E F2 | 	cmp	local06, #87 wz
047a0     70 28 0E 52 |  if_ne	cmp	local06, #112 wz
047a4     74 02 90 AD |  if_e	jmp	#LR__0407
047a8     58 28 0E F2 | 	cmp	local06, #88 wz
047ac     90 01 90 AD |  if_e	jmp	#LR__0380
047b0     4A 28 0E F2 | 	cmp	local06, #74 wz
047b4     90 01 90 AD |  if_e	jmp	#LR__0381
047b8     4B 28 0E F2 | 	cmp	local06, #75 wz
047bc     90 01 90 AD |  if_e	jmp	#LR__0382
047c0     5A 28 0E F2 | 	cmp	local06, #90 wz
047c4     90 01 90 AD |  if_e	jmp	#LR__0383
047c8     5C 28 0E F2 | 	cmp	local06, #92 wz
047cc     90 01 90 AD |  if_e	jmp	#LR__0384
047d0     5D 28 0E F2 | 	cmp	local06, #93 wz
047d4     44 02 90 AD |  if_e	jmp	#LR__0407
047d8     5E 28 0E F2 | 	cmp	local06, #94 wz
047dc     8C 01 90 AD |  if_e	jmp	#LR__0385
047e0     5F 28 0E F2 | 	cmp	local06, #95 wz
047e4     8C 01 90 AD |  if_e	jmp	#LR__0386
047e8     60 28 0E F2 | 	cmp	local06, #96 wz
047ec     8C 01 90 AD |  if_e	jmp	#LR__0387
047f0     61 28 0E F2 | 	cmp	local06, #97 wz
047f4     8C 01 90 AD |  if_e	jmp	#LR__0388
047f8     63 28 0E F2 | 	cmp	local06, #99 wz
047fc     8C 01 90 AD |  if_e	jmp	#LR__0389
04800     68 28 0E F2 | 	cmp	local06, #104 wz
04804     8C 01 90 AD |  if_e	jmp	#LR__0390
04808     69 28 0E F2 | 	cmp	local06, #105 wz
0480c     8C 01 90 AD |  if_e	jmp	#LR__0391
04810     6D 28 0E F2 | 	cmp	local06, #109 wz
04814     8C 01 90 AD |  if_e	jmp	#LR__0392
04818     6C 28 0E F2 | 	cmp	local06, #108 wz
0481c     8C 01 90 AD |  if_e	jmp	#LR__0393
04820     71 28 0E F2 | 	cmp	local06, #113 wz
04824     8C 01 90 AD |  if_e	jmp	#LR__0394
04828     79 28 0E F2 | 	cmp	local06, #121 wz
0482c     8C 01 90 AD |  if_e	jmp	#LR__0395
04830     77 28 0E F2 | 	cmp	local06, #119 wz
04834     8C 01 90 AD |  if_e	jmp	#LR__0396
04838     78 28 0E F2 | 	cmp	local06, #120 wz
0483c     8C 01 90 AD |  if_e	jmp	#LR__0397
04840     7C 28 0E F2 | 	cmp	local06, #124 wz
04844     8C 01 90 AD |  if_e	jmp	#LR__0398
04848     7D 28 0E F2 | 	cmp	local06, #125 wz
0484c     8C 01 90 AD |  if_e	jmp	#LR__0399
04850     7E 28 0E F2 | 	cmp	local06, #126 wz
04854     8C 01 90 AD |  if_e	jmp	#LR__0400
04858     7F 28 0E F2 | 	cmp	local06, #127 wz
0485c     8C 01 90 AD |  if_e	jmp	#LR__0401
04860     80 28 0E F2 | 	cmp	local06, #128 wz
04864     8C 01 90 AD |  if_e	jmp	#LR__0402
04868     72 28 0E F2 | 	cmp	local06, #114 wz
0486c     8C 01 90 AD |  if_e	jmp	#LR__0403
04870     81 28 0E F2 | 	cmp	local06, #129 wz
04874     8C 01 90 AD |  if_e	jmp	#LR__0404
04878     01 00 00 FF 
0487c     04 28 0E F2 | 	cmp	local06, ##516 wz
04880     88 01 90 AD |  if_e	jmp	#LR__0405
04884     8C 01 90 FD | 	jmp	#LR__0406
04888                 | LR__0363
04888     90 0F B0 FD | 	call	#_compile_fun_varp
0488c     FD 2C 02 F6 | 	mov	local08, result1
04890     88 01 90 FD | 	jmp	#LR__0407
04894                 | LR__0364
04894     A4 0B B0 FD | 	call	#_compile_fun_2p
04898     FD 26 02 F6 | 	mov	local05, result1
0489c     7C 01 90 FD | 	jmp	#LR__0407
048a0                 | LR__0365
048a0     98 0B B0 FD | 	call	#_compile_fun_2p
048a4     FD 26 02 F6 | 	mov	local05, result1
048a8     70 01 90 FD | 	jmp	#LR__0407
048ac                 | LR__0366
048ac     00 0C B0 FD | 	call	#_compile_fun_3p
048b0     FD 26 02 F6 | 	mov	local05, result1
048b4     64 01 90 FD | 	jmp	#LR__0407
048b8                 | LR__0367
048b8     F4 0B B0 FD | 	call	#_compile_fun_3p
048bc     FD 26 02 F6 | 	mov	local05, result1
048c0     58 01 90 FD | 	jmp	#LR__0407
048c4                 | LR__0368
048c4     B4 0C B0 FD | 	call	#_compile_fun_4p
048c8     FD 26 02 F6 | 	mov	local05, result1
048cc     4C 01 90 FD | 	jmp	#LR__0407
048d0                 | LR__0369
048d0     A8 0C B0 FD | 	call	#_compile_fun_4p
048d4     FD 26 02 F6 | 	mov	local05, result1
048d8     40 01 90 FD | 	jmp	#LR__0407
048dc                 | LR__0370
048dc     80 2D B0 FD | 	call	#_expr
048e0                 | ' 
048e0                 | ' 
048e0                 | ' expr()
048e0                 | ' return 0
048e0     00 26 06 F6 | 	mov	local05, #0
048e4     34 01 90 FD | 	jmp	#LR__0407
048e8                 | LR__0371
048e8     5C 10 B0 FD | 	call	#_compile_print
048ec     FD 26 02 F6 | 	mov	local05, result1
048f0     E4 01 90 FD | 	jmp	#LR__0408
048f4                 | LR__0372
048f4     01 24 16 F2 | 	cmp	local04, #1 wc
048f8     08 00 90 CD |  if_b	jmp	#LR__0373
048fc     00 2A B0 FD | 	call	#_compile_goto
04900     D4 01 90 FD | 	jmp	#LR__0408
04904                 | LR__0373
04904     19 12 06 F6 | 	mov	arg01, #25
04908     1C DD B0 FD | 	call	#_printerror
0490c     C8 01 90 FD | 	jmp	#LR__0408
04910                 | LR__0374
04910     4C 2D B0 FD | 	call	#_expr
04914                 | ' 
04914                 | ' 
04914                 | ' expr()
04914                 | ' return 0
04914     04 01 90 FD | 	jmp	#LR__0407
04918                 | LR__0375
04918     44 2D B0 FD | 	call	#_expr
0491c                 | ' 
0491c                 | ' 
0491c                 | ' expr()
0491c                 | ' return 0
0491c     FC 00 90 FD | 	jmp	#LR__0407
04920                 | LR__0376
04920     3C 2D B0 FD | 	call	#_expr
04924                 | ' 
04924                 | ' 
04924                 | ' expr()
04924                 | ' return 0
04924     F4 00 90 FD | 	jmp	#LR__0407
04928                 | LR__0377
04928     34 2D B0 FD | 	call	#_expr
0492c                 | ' 
0492c                 | ' 
0492c                 | ' expr()
0492c                 | ' return 0
0492c     EC 00 90 FD | 	jmp	#LR__0407
04930                 | LR__0378
04930     94 0F B0 FD | 	call	#_compile_int_fun_2p
04934     E4 00 90 FD | 	jmp	#LR__0407
04938                 | LR__0379
04938     18 0A B0 FD | 	call	#_compile_converttoint
0493c                 | ' return err
0493c     DC 00 90 FD | 	jmp	#LR__0407
04940                 | LR__0380
04940     DC 16 B0 FD | 	call	#_compile_if
04944     90 01 90 FD | 	jmp	#LR__0408
04948                 | LR__0381
04948     18 20 B0 FD | 	call	#_compile_for
0494c     88 01 90 FD | 	jmp	#LR__0408
04950                 | LR__0382
04950     FC 27 B0 FD | 	call	#_compile_next
04954     80 01 90 FD | 	jmp	#LR__0408
04958                 | LR__0383
04958     04 18 B0 FD | 	call	#_compile_else
0495c     78 01 90 FD | 	jmp	#LR__0408
04960                 | LR__0384
04960     D8 0A B0 FD | 	call	#_compile_fun_2p
04964     FD 26 02 F6 | 	mov	local05, result1
04968     B0 00 90 FD | 	jmp	#LR__0407
0496c                 | LR__0385
0496c     F0 2C B0 FD | 	call	#_expr
04970                 | ' 
04970                 | ' 
04970                 | ' expr()
04970                 | ' return 0
04970     A8 00 90 FD | 	jmp	#LR__0407
04974                 | LR__0386
04974     E8 2C B0 FD | 	call	#_expr
04978                 | ' 
04978                 | ' 
04978                 | ' expr()
04978                 | ' return 0
04978     A0 00 90 FD | 	jmp	#LR__0407
0497c                 | LR__0387
0497c     E0 2C B0 FD | 	call	#_expr
04980                 | ' 
04980                 | ' 
04980                 | ' expr()
04980                 | ' return 0
04980     98 00 90 FD | 	jmp	#LR__0407
04984                 | LR__0388
04984     D8 2C B0 FD | 	call	#_expr
04988                 | ' 
04988                 | ' 
04988                 | ' expr()
04988                 | ' return 0
04988     90 00 90 FD | 	jmp	#LR__0407
0498c                 | LR__0389
0498c     D0 2C B0 FD | 	call	#_expr
04990                 | ' 
04990                 | ' 
04990                 | ' expr()
04990                 | ' return 0
04990     88 00 90 FD | 	jmp	#LR__0407
04994                 | LR__0390
04994     C8 2C B0 FD | 	call	#_expr
04998                 | ' 
04998                 | ' 
04998                 | ' expr()
04998                 | ' return 0
04998     80 00 90 FD | 	jmp	#LR__0407
0499c                 | LR__0391
0499c     C0 2C B0 FD | 	call	#_expr
049a0                 | ' 
049a0                 | ' 
049a0                 | ' expr()
049a0                 | ' return 0
049a0     78 00 90 FD | 	jmp	#LR__0407
049a4                 | LR__0392
049a4     08 0B B0 FD | 	call	#_compile_fun_3p
049a8     70 00 90 FD | 	jmp	#LR__0407
049ac                 | LR__0393
049ac     F0 0C B0 FD | 	call	#_compile_fun_5p
049b0     68 00 90 FD | 	jmp	#LR__0407
049b4                 | LR__0394
049b4     C4 0B B0 FD | 	call	#_compile_fun_4p
049b8     60 00 90 FD | 	jmp	#LR__0407
049bc                 | LR__0395
049bc     7C 0A B0 FD | 	call	#_compile_fun_2p
049c0     58 00 90 FD | 	jmp	#LR__0407
049c4                 | LR__0396
049c4     74 0A B0 FD | 	call	#_compile_fun_2p
049c8     50 00 90 FD | 	jmp	#LR__0407
049cc                 | LR__0397
049cc     6C 0A B0 FD | 	call	#_compile_fun_2p
049d0     48 00 90 FD | 	jmp	#LR__0407
049d4                 | LR__0398
049d4     88 2C B0 FD | 	call	#_expr
049d8                 | ' 
049d8                 | ' 
049d8                 | ' expr()
049d8                 | ' return 0
049d8     40 00 90 FD | 	jmp	#LR__0407
049dc                 | LR__0399
049dc     80 2C B0 FD | 	call	#_expr
049e0                 | ' 
049e0                 | ' 
049e0                 | ' expr()
049e0                 | ' return 0
049e0     38 00 90 FD | 	jmp	#LR__0407
049e4                 | LR__0400
049e4     78 2C B0 FD | 	call	#_expr
049e8                 | ' 
049e8                 | ' 
049e8                 | ' expr()
049e8                 | ' return 0
049e8     30 00 90 FD | 	jmp	#LR__0407
049ec                 | LR__0401
049ec     8C 0B B0 FD | 	call	#_compile_fun_4p
049f0     28 00 90 FD | 	jmp	#LR__0407
049f4                 | LR__0402
049f4     68 2C B0 FD | 	call	#_expr
049f8                 | ' 
049f8                 | ' 
049f8                 | ' expr()
049f8                 | ' return 0
049f8     20 00 90 FD | 	jmp	#LR__0407
049fc                 | LR__0403
049fc     88 18 B0 FD | 	call	#_compile_dim
04a00     D4 00 90 FD | 	jmp	#LR__0408
04a04                 | LR__0404
04a04     34 0A B0 FD | 	call	#_compile_fun_2p
04a08     10 00 90 FD | 	jmp	#LR__0407
04a0c                 | LR__0405
04a0c     20 01 B0 FD | 	call	#_compile_array_assign
04a10     C4 00 90 FD | 	jmp	#LR__0408
04a14                 | LR__0406
04a14     80 08 B0 FD | 	call	#_compile_unknown
04a18     BC 00 90 FD | 	jmp	#LR__0408
04a1c                 | LR__0407
04a1c     14 23 02 F6 | 	mov	local03, local06
04a20     16 1F 02 F6 | 	mov	local01, local08
04a24     0F 2B 02 F6 | 	mov	local07, local01
04a28     10 2F 02 F6 | 	mov	local09, local02
04a2c     11 1F 02 F6 | 	mov	local01, local03
04a30     41 00 00 FF 
04a34     40 E4 05 F1 | 	add	objptr, ##33344
04a38     F2 2C 02 FB | 	rdlong	local08, objptr
04a3c     16 29 02 F6 | 	mov	local06, local08
04a40     01 28 66 F0 | 	shl	local06, #1
04a44     16 29 02 F1 | 	add	local06, local08
04a48     02 28 66 F0 | 	shl	local06, #2
04a4c     03 00 00 FF 
04a50     00 E4 85 F1 | 	sub	objptr, ##1536
04a54     F2 28 02 F1 | 	add	local06, objptr
04a58     14 2B 62 FC | 	wrlong	local07, local06
04a5c     03 00 00 FF 
04a60     00 E4 05 F1 | 	add	objptr, ##1536
04a64     F2 2C 02 FB | 	rdlong	local08, objptr
04a68     16 2B 02 F6 | 	mov	local07, local08
04a6c     01 2A 66 F0 | 	shl	local07, #1
04a70     16 2B 02 F1 | 	add	local07, local08
04a74     02 2A 66 F0 | 	shl	local07, #2
04a78     03 00 00 FF 
04a7c     00 E4 85 F1 | 	sub	objptr, ##1536
04a80     F2 2A 02 F1 | 	add	local07, objptr
04a84     04 2A 06 F1 | 	add	local07, #4
04a88     15 2F 62 FC | 	wrlong	local09, local07
04a8c     03 00 00 FF 
04a90     00 E4 05 F1 | 	add	objptr, ##1536
04a94     F2 2E 02 FB | 	rdlong	local09, objptr
04a98     17 2D 02 F6 | 	mov	local08, local09
04a9c     01 2C 66 F0 | 	shl	local08, #1
04aa0     17 2D 02 F1 | 	add	local08, local09
04aa4     02 2C 66 F0 | 	shl	local08, #2
04aa8     03 00 00 FF 
04aac     00 E4 85 F1 | 	sub	objptr, ##1536
04ab0     F2 2C 02 F1 | 	add	local08, objptr
04ab4     08 2C 06 F1 | 	add	local08, #8
04ab8     16 1F 62 FC | 	wrlong	local01, local08
04abc     03 00 00 FF 
04ac0     00 E4 05 F1 | 	add	objptr, ##1536
04ac4     F2 2A 02 FB | 	rdlong	local07, objptr
04ac8     01 2A 06 F1 | 	add	local07, #1
04acc     F2 2A 62 FC | 	wrlong	local07, objptr
04ad0     41 00 00 FF 
04ad4     40 E4 85 F1 | 	sub	objptr, ##33344
04ad8                 | LR__0408
04ad8                 | ' 
04ad8                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
04ad8                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
04ad8     00 24 0E F2 | 	cmp	local04, #0 wz
04adc     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
04ae0     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
04ae4     38 00 90 5D |  if_ne	jmp	#LR__0409
04ae8     41 00 00 FF 
04aec     40 E4 05 F1 | 	add	objptr, ##33344
04af0     F2 2E 02 FB | 	rdlong	local09, objptr
04af4     17 1F 02 F6 | 	mov	local01, local09
04af8     01 1E 66 F0 | 	shl	local01, #1
04afc     17 1F 02 F1 | 	add	local01, local09
04b00     02 1E 66 F0 | 	shl	local01, #2
04b04     03 00 00 FF 
04b08     00 E4 85 F1 | 	sub	objptr, ##1536
04b0c     F2 1E 02 F1 | 	add	local01, objptr
04b10     08 1E 06 F1 | 	add	local01, #8
04b14     0F FD 6B FC | 	wrlong	#510, local01
04b18     3E 00 00 FF 
04b1c     40 E4 85 F1 | 	sub	objptr, ##31808
04b20                 | LR__0409
04b20                 | ' 
04b20                 | ' 'print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
04b20                 | ' return err
04b20     13 FB 01 F6 | 	mov	result1, local05
04b24     A7 F0 03 F6 | 	mov	ptra, fp
04b28     B2 00 A0 FD | 	call	#popregs_
04b2c                 | _compile_immediate_ret
04b2c     2D 00 64 FD | 	ret
04b30                 | 
04b30                 | ' 
04b30                 | ' sub compile_array_assign
04b30                 | _compile_array_assign
04b30     0A 4A 05 F6 | 	mov	COUNT_, #10
04b34     A8 00 A0 FD | 	call	#pushregs_
04b38     00 24 06 F6 | 	mov	local04, #0
04b3c     2E 00 00 FF 
04b40     08 E4 05 F1 | 	add	objptr, ##23560
04b44     F2 26 02 FB | 	rdlong	local05, objptr
04b48     13 FB 01 F6 | 	mov	result1, local05
04b4c     01 FA 85 F1 | 	sub	result1, #1
04b50     03 FA 65 F0 | 	shl	result1, #3
04b54     02 00 00 FF 
04b58     38 E4 85 F1 | 	sub	objptr, ##1080
04b5c     F2 FA 01 F1 | 	add	result1, objptr
04b60     FD 28 02 FB | 	rdlong	local06, result1
04b64                 | ' numpar=0
04b64                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
04b64                 | ' ' todo here: recognize params and t1.result.twowords=numpar
04b64                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
04b64                 | ' if lparts(ct).token=token_lpar then
04b64     03 26 66 F0 | 	shl	local05, #3
04b68     F2 26 02 F1 | 	add	local05, objptr
04b6c     04 26 06 F1 | 	add	local05, #4
04b70     13 27 02 FB | 	rdlong	local05, local05
04b74     15 26 0E F2 | 	cmp	local05, #21 wz
04b78     2B 00 00 FF 
04b7c     D0 E5 85 F1 | 	sub	objptr, ##22480
04b80     D4 01 90 5D |  if_ne	jmp	#LR__0414
04b84     2E 00 00 FF 
04b88     08 E4 05 F1 | 	add	objptr, ##23560
04b8c     F2 2A 02 FB | 	rdlong	local07, objptr
04b90     01 2A 06 F1 | 	add	local07, #1
04b94     F2 2A 62 FC | 	wrlong	local07, objptr
04b98     2E 00 00 FF 
04b9c     08 E4 85 F1 | 	sub	objptr, ##23560
04ba0                 | '   ct+=1 											' omit this lpar, this is for expr list
04ba0                 | '   do
04ba0                 | LR__0410
04ba0     BC 2A B0 FD | 	call	#_expr
04ba4     2E 00 00 FF 
04ba8     08 E4 05 F1 | 	add	objptr, ##23560
04bac     F2 26 02 FB | 	rdlong	local05, objptr
04bb0     01 26 06 F1 | 	add	local05, #1
04bb4     F2 26 62 FC | 	wrlong	local05, objptr
04bb8     01 24 06 F1 | 	add	local04, #1
04bbc     01 26 86 F1 | 	sub	local05, #1
04bc0     03 26 66 F0 | 	shl	local05, #3
04bc4     02 00 00 FF 
04bc8     38 E4 85 F1 | 	sub	objptr, ##1080
04bcc     F2 26 02 F1 | 	add	local05, objptr
04bd0     04 26 06 F1 | 	add	local05, #4
04bd4     13 2B 02 FB | 	rdlong	local07, local05
04bd8     14 2A 0E F2 | 	cmp	local07, #20 wz
04bdc     2B 00 00 FF 
04be0     D0 E5 85 F1 | 	sub	objptr, ##22480
04be4     34 00 90 AD |  if_e	jmp	#LR__0411
04be8     2E 00 00 FF 
04bec     08 E4 05 F1 | 	add	objptr, ##23560
04bf0     F2 2A 02 FB | 	rdlong	local07, objptr
04bf4     03 2A 66 F0 | 	shl	local07, #3
04bf8     02 00 00 FF 
04bfc     38 E4 85 F1 | 	sub	objptr, ##1080
04c00     F2 2A 02 F1 | 	add	local07, objptr
04c04     04 2A 06 F1 | 	add	local07, #4
04c08     15 2B 02 FB | 	rdlong	local07, local07
04c0c     FE 2B 0E F2 | 	cmp	local07, #510 wz
04c10     2B 00 00 FF 
04c14     D0 E5 85 F1 | 	sub	objptr, ##22480
04c18     84 FF 9F 5D |  if_ne	jmp	#LR__0410
04c1c                 | LR__0411
04c1c     2E 00 00 FF 
04c20     08 E4 05 F1 | 	add	objptr, ##23560
04c24     F2 2A 02 FB | 	rdlong	local07, objptr
04c28     01 2A 06 F1 | 	add	local07, #1
04c2c     F2 2A 62 FC | 	wrlong	local07, objptr
04c30     2E 00 00 FF 
04c34     08 E4 85 F1 | 	sub	objptr, ##23560
04c38     24 2A B0 FD | 	call	#_expr
04c3c     01 2C 66 F6 | 	neg	local08, #1
04c40     00 2E 06 F6 | 	mov	local09, #0
04c44                 | ' '   print "in array_assign, rpar found, numpar=",numpar
04c44                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
04c44                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
04c44                 | ' ct+=1 : expr()
04c44                 | ' ' now find the vae
04c44                 | ' 
04c44                 | ' j=-1 : i=0 : do : 
04c44                 | LR__0412
04c44                 | '   if variables(i).name=varname$ then j=i: exit loop
04c44     17 27 02 F6 | 	mov	local05, local09
04c48     04 26 66 F0 | 	shl	local05, #4
04c4c     0B 00 00 FF 
04c50     CC E5 05 F1 | 	add	objptr, ##6092
04c54     F2 26 02 F1 | 	add	local05, objptr
04c58     13 13 02 FB | 	rdlong	arg01, local05
04c5c     14 15 02 F6 | 	mov	arg02, local06
04c60     0B 00 00 FF 
04c64     CC E5 85 F1 | 	sub	objptr, ##6092
04c68     04 0F B1 FD | 	call	#__system___string_cmp
04c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c70     17 2D 02 A6 |  if_e	mov	local08, local09
04c74     20 00 90 AD |  if_e	jmp	#LR__0413
04c78     01 2E 06 F1 | 	add	local09, #1
04c7c     2B 00 00 FF 
04c80     CC E5 05 F1 | 	add	objptr, ##22476
04c84     F2 2A 02 FB | 	rdlong	local07, objptr
04c88     2B 00 00 FF 
04c8c     CC E5 85 F1 | 	sub	objptr, ##22476
04c90     15 2F 5A F2 | 	cmps	local09, local07 wcz
04c94     AC FF 9F ED |  if_be	jmp	#LR__0412
04c98                 | LR__0413
04c98     16 1F 02 F6 | 	mov	local01, local08
04c9c     12 21 02 F6 | 	mov	local02, local04
04ca0     17 22 06 F6 | 	mov	local03, #23
04ca4     0F 2B 02 F6 | 	mov	local07, local01
04ca8     10 31 02 F6 | 	mov	local10, local02
04cac     11 2D 02 F6 | 	mov	local08, local03
04cb0     41 00 00 FF 
04cb4     40 E4 05 F1 | 	add	objptr, ##33344
04cb8     F2 1E 02 FB | 	rdlong	local01, objptr
04cbc     0F 2F 02 F6 | 	mov	local09, local01
04cc0     01 2E 66 F0 | 	shl	local09, #1
04cc4     0F 2F 02 F1 | 	add	local09, local01
04cc8     02 2E 66 F0 | 	shl	local09, #2
04ccc     03 00 00 FF 
04cd0     00 E4 85 F1 | 	sub	objptr, ##1536
04cd4     F2 2E 02 F1 | 	add	local09, objptr
04cd8     17 2B 62 FC | 	wrlong	local07, local09
04cdc     03 00 00 FF 
04ce0     00 E4 05 F1 | 	add	objptr, ##1536
04ce4     F2 1E 02 FB | 	rdlong	local01, objptr
04ce8     0F 2F 02 F6 | 	mov	local09, local01
04cec     01 2E 66 F0 | 	shl	local09, #1
04cf0     0F 2F 02 F1 | 	add	local09, local01
04cf4     02 2E 66 F0 | 	shl	local09, #2
04cf8     03 00 00 FF 
04cfc     00 E4 85 F1 | 	sub	objptr, ##1536
04d00     F2 2E 02 F1 | 	add	local09, objptr
04d04     04 2E 06 F1 | 	add	local09, #4
04d08     17 31 62 FC | 	wrlong	local10, local09
04d0c     03 00 00 FF 
04d10     00 E4 05 F1 | 	add	objptr, ##1536
04d14     F2 30 02 FB | 	rdlong	local10, objptr
04d18     18 1F 02 F6 | 	mov	local01, local10
04d1c     01 1E 66 F0 | 	shl	local01, #1
04d20     18 1F 02 F1 | 	add	local01, local10
04d24     02 1E 66 F0 | 	shl	local01, #2
04d28     03 00 00 FF 
04d2c     00 E4 85 F1 | 	sub	objptr, ##1536
04d30     F2 1E 02 F1 | 	add	local01, objptr
04d34     08 1E 06 F1 | 	add	local01, #8
04d38     0F 2D 62 FC | 	wrlong	local08, local01
04d3c     03 00 00 FF 
04d40     00 E4 05 F1 | 	add	objptr, ##1536
04d44     F2 2A 02 FB | 	rdlong	local07, objptr
04d48     01 2A 06 F1 | 	add	local07, #1
04d4c     F2 2A 62 FC | 	wrlong	local07, objptr
04d50     41 00 00 FF 
04d54     40 E4 85 F1 | 	sub	objptr, ##33344
04d58                 | LR__0414
04d58     A7 F0 03 F6 | 	mov	ptra, fp
04d5c     B2 00 A0 FD | 	call	#popregs_
04d60                 | _compile_array_assign_ret
04d60     2D 00 64 FD | 	ret
04d64                 | 
04d64                 | ' 
04d64                 | ' 
04d64                 | ' sub compile_immediate_assign(linetype as ulong)
04d64                 | _compile_immediate_assign
04d64     09 4A 05 F6 | 	mov	COUNT_, #9
04d68     A8 00 A0 FD | 	call	#pushregs_
04d6c     09 25 0A F6 | 	mov	local04, arg01 wz
04d70     FF 22 06 F6 | 	mov	local03, #255
04d74     01 26 66 F6 | 	neg	local05, #1
04d78                 | ' 
04d78                 | ' t1.result_type=result_error : t1.result.uresult=0
04d78                 | ' i=-1: j=-1
04d78                 | ' 
04d78                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
04d78     2C 00 90 5D |  if_ne	jmp	#LR__0420
04d7c     2B 00 00 FF 
04d80     D0 E5 05 F1 | 	add	objptr, ##22480
04d84     F2 28 02 FB | 	rdlong	local06, objptr
04d88     02 00 00 FF 
04d8c     38 E4 05 F1 | 	add	objptr, ##1080
04d90     F2 04 68 FC | 	wrlong	#2, objptr
04d94     13 00 00 FF 
04d98     38 E4 05 F1 | 	add	objptr, ##9784
04d9c     F2 00 68 FC | 	wrlong	#0, objptr
04da0     41 00 00 FF 
04da4     40 E4 85 F1 | 	sub	objptr, ##33344
04da8                 | LR__0420
04da8                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
04da8     02 24 0E F2 | 	cmp	local04, #2 wz
04dac     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
04db0     2B 00 00 AF 
04db4     D0 E5 05 A1 |  if_e	add	objptr, ##22480
04db8     F2 28 02 AB |  if_e	rdlong	local06, objptr
04dbc     02 00 00 AF 
04dc0     38 E4 05 A1 |  if_e	add	objptr, ##1080
04dc4     F2 04 68 AC |  if_e	wrlong	#2, objptr
04dc8     2E 00 00 AF 
04dcc     08 E4 85 A1 |  if_e	sub	objptr, ##23560
04dd0                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
04dd0     04 24 0E F2 | 	cmp	local04, #4 wz
04dd4     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
04dd8     2C 00 90 5D |  if_ne	jmp	#LR__0421
04ddc     2B 00 00 FF 
04de0     D8 E5 05 F1 | 	add	objptr, ##22488
04de4     F2 28 02 FB | 	rdlong	local06, objptr
04de8     02 00 00 FF 
04dec     30 E4 05 F1 | 	add	objptr, ##1072
04df0     F2 06 68 FC | 	wrlong	#3, objptr
04df4     13 00 00 FF 
04df8     38 E4 05 F1 | 	add	objptr, ##9784
04dfc     F2 04 68 FC | 	wrlong	#2, objptr
04e00     41 00 00 FF 
04e04     40 E4 85 F1 | 	sub	objptr, ##33344
04e08                 | LR__0421
04e08                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
04e08     05 24 0E F2 | 	cmp	local04, #5 wz
04e0c     3C 00 90 5D |  if_ne	jmp	#LR__0422
04e10     2E 00 00 FF 
04e14     08 E4 05 F1 | 	add	objptr, ##23560
04e18     F2 FA 01 FB | 	rdlong	result1, objptr
04e1c     FD 28 02 F6 | 	mov	local06, result1
04e20     03 28 66 F0 | 	shl	local06, #3
04e24     02 00 00 FF 
04e28     38 E4 85 F1 | 	sub	objptr, ##1080
04e2c     F2 28 02 F1 | 	add	local06, objptr
04e30     14 29 02 FB | 	rdlong	local06, local06
04e34     02 FA 05 F1 | 	add	result1, #2
04e38     02 00 00 FF 
04e3c     38 E4 05 F1 | 	add	objptr, ##1080
04e40     F2 FA 61 FC | 	wrlong	result1, objptr
04e44     2E 00 00 FF 
04e48     08 E4 85 F1 | 	sub	objptr, ##23560
04e4c                 | LR__0422
04e4c     14 13 02 F6 | 	mov	arg01, local06
04e50     01 14 06 F6 | 	mov	arg02, #1
04e54     88 2D B1 FD | 	call	#__system__Right_S
04e58     04 28 B0 FD | 	call	#_expr
04e5c                 | '  
04e5c                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
04e5c                 | ' 
04e5c                 | ' suffix2$=right$(varname2$,1)
04e5c                 | ' expr()
04e5c                 | ' 
04e5c                 | ' 
04e5c                 | ' if varnum>0 then
04e5c     2B 00 00 FF 
04e60     CC E5 05 F1 | 	add	objptr, ##22476
04e64     F2 2A 02 FB | 	rdlong	local07, objptr
04e68     2B 00 00 FF 
04e6c     CC E5 85 F1 | 	sub	objptr, ##22476
04e70     01 2A 56 F2 | 	cmps	local07, #1 wc
04e74     58 00 90 CD |  if_b	jmp	#LR__0425
04e78                 | '   for i=0 to varnum-1
04e78     00 2C 06 F6 | 	mov	local08, #0
04e7c     2B 00 00 FF 
04e80     CC E5 05 F1 | 	add	objptr, ##22476
04e84     F2 2E 02 FB | 	rdlong	local09, objptr
04e88     2B 00 00 FF 
04e8c     CC E5 85 F1 | 	sub	objptr, ##22476
04e90                 | LR__0423
04e90     17 2D 52 F2 | 	cmps	local08, local09 wc
04e94     38 00 90 3D |  if_ae	jmp	#LR__0424
04e98                 | '     if variables(i).name=varname2$ then j=i : exit
04e98     16 2B 02 F6 | 	mov	local07, local08
04e9c     04 2A 66 F0 | 	shl	local07, #4
04ea0     0B 00 00 FF 
04ea4     CC E5 05 F1 | 	add	objptr, ##6092
04ea8     F2 2A 02 F1 | 	add	local07, objptr
04eac     15 13 02 FB | 	rdlong	arg01, local07
04eb0     14 15 02 F6 | 	mov	arg02, local06
04eb4     0B 00 00 FF 
04eb8     CC E5 85 F1 | 	sub	objptr, ##6092
04ebc     B0 0C B1 FD | 	call	#__system___string_cmp
04ec0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ec4     16 27 02 A6 |  if_e	mov	local05, local08
04ec8     01 2C 06 51 |  if_ne	add	local08, #1
04ecc     C0 FF 9F 5D |  if_ne	jmp	#LR__0423
04ed0                 | LR__0424
04ed0                 | LR__0425
04ed0                 | ' if  j=-1 andalso varnum<maxvars then   
04ed0     FF FF 7F FF 
04ed4     FF 27 0E F2 | 	cmp	local05, ##-1 wz
04ed8     60 00 90 5D |  if_ne	jmp	#LR__0426
04edc     2B 00 00 FF 
04ee0     CC E5 05 F1 | 	add	objptr, ##22476
04ee4     F2 2A 02 FB | 	rdlong	local07, objptr
04ee8     2B 00 00 FF 
04eec     CC E5 85 F1 | 	sub	objptr, ##22476
04ef0     01 00 00 FF 
04ef4     FF 2B 56 F2 | 	cmps	local07, ##1023 wc
04ef8     40 00 90 3D |  if_ae	jmp	#LR__0426
04efc     2B 00 00 FF 
04f00     CC E5 05 F1 | 	add	objptr, ##22476
04f04     F2 2E 02 FB | 	rdlong	local09, objptr
04f08     04 2E 66 F0 | 	shl	local09, #4
04f0c     20 00 00 FF 
04f10     00 E4 85 F1 | 	sub	objptr, ##16384
04f14     F2 2E 02 F1 | 	add	local09, objptr
04f18     17 29 62 FC | 	wrlong	local06, local09
04f1c     20 00 00 FF 
04f20     00 E4 05 F1 | 	add	objptr, ##16384
04f24     F2 2A 02 FB | 	rdlong	local07, objptr
04f28     15 27 02 F6 | 	mov	local05, local07
04f2c     01 2A 06 F1 | 	add	local07, #1
04f30     F2 2A 62 FC | 	wrlong	local07, objptr
04f34     2B 00 00 FF 
04f38     CC E5 85 F1 | 	sub	objptr, ##22476
04f3c                 | LR__0426
04f3c     13 1F 02 F6 | 	mov	local01, local05
04f40     17 22 06 F6 | 	mov	local03, #23
04f44     0F 2B 02 F6 | 	mov	local07, local01
04f48     10 2F 02 F6 | 	mov	local09, local02
04f4c     11 1F 02 F6 | 	mov	local01, local03
04f50     41 00 00 FF 
04f54     40 E4 05 F1 | 	add	objptr, ##33344
04f58     F2 2C 02 FB | 	rdlong	local08, objptr
04f5c     16 29 02 F6 | 	mov	local06, local08
04f60     01 28 66 F0 | 	shl	local06, #1
04f64     16 29 02 F1 | 	add	local06, local08
04f68     02 28 66 F0 | 	shl	local06, #2
04f6c     03 00 00 FF 
04f70     00 E4 85 F1 | 	sub	objptr, ##1536
04f74     F2 28 02 F1 | 	add	local06, objptr
04f78     14 2B 62 FC | 	wrlong	local07, local06
04f7c     03 00 00 FF 
04f80     00 E4 05 F1 | 	add	objptr, ##1536
04f84     F2 2C 02 FB | 	rdlong	local08, objptr
04f88     16 2B 02 F6 | 	mov	local07, local08
04f8c     01 2A 66 F0 | 	shl	local07, #1
04f90     16 2B 02 F1 | 	add	local07, local08
04f94     02 2A 66 F0 | 	shl	local07, #2
04f98     03 00 00 FF 
04f9c     00 E4 85 F1 | 	sub	objptr, ##1536
04fa0     F2 2A 02 F1 | 	add	local07, objptr
04fa4     04 2A 06 F1 | 	add	local07, #4
04fa8     15 2F 62 FC | 	wrlong	local09, local07
04fac     03 00 00 FF 
04fb0     00 E4 05 F1 | 	add	objptr, ##1536
04fb4     F2 2E 02 FB | 	rdlong	local09, objptr
04fb8     17 2D 02 F6 | 	mov	local08, local09
04fbc     01 2C 66 F0 | 	shl	local08, #1
04fc0     17 2D 02 F1 | 	add	local08, local09
04fc4     02 2C 66 F0 | 	shl	local08, #2
04fc8     03 00 00 FF 
04fcc     00 E4 85 F1 | 	sub	objptr, ##1536
04fd0     F2 2C 02 F1 | 	add	local08, objptr
04fd4     08 2C 06 F1 | 	add	local08, #8
04fd8     16 1F 62 FC | 	wrlong	local01, local08
04fdc     03 00 00 FF 
04fe0     00 E4 05 F1 | 	add	objptr, ##1536
04fe4     F2 2A 02 FB | 	rdlong	local07, objptr
04fe8     01 2A 06 F1 | 	add	local07, #1
04fec     F2 2A 62 FC | 	wrlong	local07, objptr
04ff0     41 00 00 FF 
04ff4     40 E4 85 F1 | 	sub	objptr, ##33344
04ff8                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
04ff8                 | ' 
04ff8                 | ' 
04ff8                 | ' 
04ff8                 | ' 
04ff8                 | ' 
04ff8                 | ' 
04ff8                 | ' compiledline(lineptr)=t1:  lineptr+=1 
04ff8                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
04ff8     00 24 0E F2 | 	cmp	local04, #0 wz
04ffc     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05000     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
05004     38 00 90 5D |  if_ne	jmp	#LR__0427
05008     41 00 00 FF 
0500c     40 E4 05 F1 | 	add	objptr, ##33344
05010     F2 1E 02 FB | 	rdlong	local01, objptr
05014     0F 2F 02 F6 | 	mov	local09, local01
05018     01 2E 66 F0 | 	shl	local09, #1
0501c     0F 2F 02 F1 | 	add	local09, local01
05020     02 2E 66 F0 | 	shl	local09, #2
05024     03 00 00 FF 
05028     00 E4 85 F1 | 	sub	objptr, ##1536
0502c     F2 2E 02 F1 | 	add	local09, objptr
05030     08 2E 06 F1 | 	add	local09, #8
05034     17 FD 6B FC | 	wrlong	#510, local09
05038     3E 00 00 FF 
0503c     40 E4 85 F1 | 	sub	objptr, ##31808
05040                 | LR__0427
05040     A7 F0 03 F6 | 	mov	ptra, fp
05044     B2 00 A0 FD | 	call	#popregs_
05048                 | _compile_immediate_assign_ret
05048     2D 00 64 FD | 	ret
0504c                 | 
0504c                 | ' 
0504c                 | ' ' ------------------ compile the line that is calling a command 
0504c                 | ' 
0504c                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
0504c                 | _compile
0504c     04 4A 05 F6 | 	mov	COUNT_, #4
05050     A8 00 A0 FD | 	call	#pushregs_
05054     09 1F 0A F6 | 	mov	local01, arg01 wz
05058     0A 21 02 F6 | 	mov	local02, arg02
0505c     0B 23 02 F6 | 	mov	local03, arg03
05060                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
05060                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
05060                 | '  
05060                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
05060                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
05060     0C 00 90 5D |  if_ne	jmp	#LR__0430
05064     00 12 06 F6 | 	mov	arg01, #0
05068     AC F5 BF FD | 	call	#_compile_immediate
0506c     A0 00 90 FD | 	jmp	#LR__0437
05070                 | LR__0430
05070     3E 00 00 FF 
05074     40 E4 05 F1 | 	add	objptr, ##31808
05078     F2 1E 62 FC | 	wrlong	local01, objptr
0507c     04 E4 05 F1 | 	add	objptr, #4
05080     F2 20 62 FC | 	wrlong	local02, objptr
05084     3E 00 00 FF 
05088     44 E4 85 F1 | 	sub	objptr, ##31812
0508c     11 13 02 F6 | 	mov	arg01, local03
05090     01 12 06 F1 | 	add	arg01, #1
05094     80 F5 BF FD | 	call	#_compile_immediate
05098     FD 24 0A F6 | 	mov	local04, result1 wz
0509c                 | ' 
0509c                 | ' ucompiledline(0)=alinemajor
0509c                 | ' ucompiledline(1)=alineminor
0509c                 | ' 
0509c                 | ' 
0509c                 | ' ' cont: 0: this is the first part of the line that will continue
0509c                 | ' ' 1 - this is the continuation of the line
0509c                 | ' ' 2 - this is the last continued line
0509c                 | ' ' 3 - this is the ome and only part
0509c                 | ' 
0509c                 | ' 
0509c                 | ' err=compile_immediate(cont+1) 
0509c                 | ' if err=0 then
0509c     6C 00 90 5D |  if_ne	jmp	#LR__0436
050a0                 | '   if cont=3 orelse cont=2 then 
050a0     03 22 0E F2 | 	cmp	local03, #3 wz
050a4     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
050a8     60 00 90 5D |  if_ne	jmp	#LR__0435
050ac                 | '     if alinemajor >lastline then 
050ac     41 00 00 FF 
050b0     4C E4 05 F1 | 	add	objptr, ##33356
050b4     F2 16 02 FB | 	rdlong	arg03, objptr
050b8     41 00 00 FF 
050bc     4C E4 85 F1 | 	sub	objptr, ##33356
050c0     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
050c4     0C 00 90 ED |  if_be	jmp	#LR__0431
050c8     0F 13 02 F6 | 	mov	arg01, local01
050cc     68 F4 BF FD | 	call	#_add_line_at_end
050d0     38 00 90 FD | 	jmp	#LR__0434
050d4                 | LR__0431
050d4     0F 13 02 F6 | 	mov	arg01, local01
050d8     E8 EC BF FD | 	call	#_deleteline
050dc                 | '       deleteline(alinemajor)  
050dc                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor) ' yes I know that's not optimal    
050dc     41 00 00 FF 
050e0     4C E4 05 F1 | 	add	objptr, ##33356
050e4     F2 16 02 FB | 	rdlong	arg03, objptr
050e8     41 00 00 FF 
050ec     4C E4 85 F1 | 	sub	objptr, ##33356
050f0     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
050f4     0C 00 90 ED |  if_be	jmp	#LR__0432
050f8     0F 13 02 F6 | 	mov	arg01, local01
050fc     38 F4 BF FD | 	call	#_add_line_at_end
05100     08 00 90 FD | 	jmp	#LR__0433
05104                 | LR__0432
05104     0F 13 02 F6 | 	mov	arg01, local01
05108     E4 F1 BF FD | 	call	#_insertline
0510c                 | LR__0433
0510c                 | LR__0434
0510c                 | LR__0435
0510c                 | LR__0436
0510c                 | ' return err
0510c     12 FB 01 F6 | 	mov	result1, local04
05110                 | LR__0437
05110     A7 F0 03 F6 | 	mov	ptra, fp
05114     B2 00 A0 FD | 	call	#popregs_
05118                 | _compile_ret
05118     2D 00 64 FD | 	ret
0511c                 | 
0511c                 | ' 
0511c                 | ' ' ------------------ compile the line that is assigning to a variable
0511c                 | ' 
0511c                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
0511c                 | _compile_assign
0511c     03 4A 05 F6 | 	mov	COUNT_, #3
05120     A8 00 A0 FD | 	call	#pushregs_
05124     09 1F 0A F6 | 	mov	local01, arg01 wz
05128     0A 21 02 F6 | 	mov	local02, arg02
0512c     0B 23 02 F6 | 	mov	local03, arg03
05130                 | ' 
05130                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
05130                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
05130     0C 00 90 5D |  if_ne	jmp	#LR__0440
05134     00 12 06 F6 | 	mov	arg01, #0
05138     28 FC BF FD | 	call	#_compile_immediate_assign
0513c     94 00 90 FD | 	jmp	#LR__0446
05140                 | LR__0440
05140     3E 00 00 FF 
05144     40 E4 05 F1 | 	add	objptr, ##31808
05148     F2 1E 62 FC | 	wrlong	local01, objptr
0514c     04 E4 05 F1 | 	add	objptr, #4
05150     F2 20 62 FC | 	wrlong	local02, objptr
05154     3E 00 00 FF 
05158     44 E4 85 F1 | 	sub	objptr, ##31812
0515c     11 13 02 F6 | 	mov	arg01, local03
05160     01 12 06 F1 | 	add	arg01, #1
05164     FC FB BF FD | 	call	#_compile_immediate_assign
05168                 | ' 
05168                 | ' ucompiledline(0)=alinemajor
05168                 | ' ucompiledline(1)=alineminor
05168                 | ' 
05168                 | ' compile_immediate_assign(cont+1) 
05168                 | ' 
05168                 | ' if cont=3 orelse cont=2 then 
05168     03 22 0E F2 | 	cmp	local03, #3 wz
0516c     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
05170     60 00 90 5D |  if_ne	jmp	#LR__0445
05174                 | '   if alinemajor >lastline then 
05174     41 00 00 FF 
05178     4C E4 05 F1 | 	add	objptr, ##33356
0517c     F2 16 02 FB | 	rdlong	arg03, objptr
05180     41 00 00 FF 
05184     4C E4 85 F1 | 	sub	objptr, ##33356
05188     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
0518c     0C 00 90 ED |  if_be	jmp	#LR__0441
05190     0F 13 02 F6 | 	mov	arg01, local01
05194     A0 F3 BF FD | 	call	#_add_line_at_end
05198     38 00 90 FD | 	jmp	#LR__0444
0519c                 | LR__0441
0519c     0F 13 02 F6 | 	mov	arg01, local01
051a0     20 EC BF FD | 	call	#_deleteline
051a4                 | '     deleteline(alinemajor)  
051a4                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
051a4     41 00 00 FF 
051a8     4C E4 05 F1 | 	add	objptr, ##33356
051ac     F2 16 02 FB | 	rdlong	arg03, objptr
051b0     41 00 00 FF 
051b4     4C E4 85 F1 | 	sub	objptr, ##33356
051b8     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
051bc     0C 00 90 ED |  if_be	jmp	#LR__0442
051c0     0F 13 02 F6 | 	mov	arg01, local01
051c4     70 F3 BF FD | 	call	#_add_line_at_end
051c8     08 00 90 FD | 	jmp	#LR__0443
051cc                 | LR__0442
051cc     0F 13 02 F6 | 	mov	arg01, local01
051d0     1C F1 BF FD | 	call	#_insertline
051d4                 | LR__0443
051d4                 | LR__0444
051d4                 | LR__0445
051d4                 | LR__0446
051d4     A7 F0 03 F6 | 	mov	ptra, fp
051d8     B2 00 A0 FD | 	call	#popregs_
051dc                 | _compile_assign_ret
051dc     2D 00 64 FD | 	ret
051e0                 | 
051e0                 | ' 
051e0                 | ' sub compile_error(errno)
051e0                 | _compile_error
051e0     FF 04 06 F6 | 	mov	_var03, #255
051e4     01 07 02 F6 | 	mov	_var04, _var02
051e8     02 09 02 F6 | 	mov	_var05, _var03
051ec     41 00 00 FF 
051f0     40 E4 05 F1 | 	add	objptr, ##33344
051f4     F2 0A 02 FB | 	rdlong	_var06, objptr
051f8     05 0D 02 F6 | 	mov	_var07, _var06
051fc     01 0C 66 F0 | 	shl	_var07, #1
05200     05 0D 02 F1 | 	add	_var07, _var06
05204     02 0C 66 F0 | 	shl	_var07, #2
05208     03 00 00 FF 
0520c     00 E4 85 F1 | 	sub	objptr, ##1536
05210     F2 0C 02 F1 | 	add	_var07, objptr
05214     06 13 62 FC | 	wrlong	arg01, _var07
05218     03 00 00 FF 
0521c     00 E4 05 F1 | 	add	objptr, ##1536
05220     F2 0C 02 FB | 	rdlong	_var07, objptr
05224     06 0B 02 F6 | 	mov	_var06, _var07
05228     01 0A 66 F0 | 	shl	_var06, #1
0522c     06 0B 02 F1 | 	add	_var06, _var07
05230     02 0A 66 F0 | 	shl	_var06, #2
05234     03 00 00 FF 
05238     00 E4 85 F1 | 	sub	objptr, ##1536
0523c     F2 0A 02 F1 | 	add	_var06, objptr
05240     04 0A 06 F1 | 	add	_var06, #4
05244     05 07 62 FC | 	wrlong	_var04, _var06
05248     03 00 00 FF 
0524c     00 E4 05 F1 | 	add	objptr, ##1536
05250     F2 0C 02 FB | 	rdlong	_var07, objptr
05254     06 0B 02 F6 | 	mov	_var06, _var07
05258     01 0A 66 F0 | 	shl	_var06, #1
0525c     06 0B 02 F1 | 	add	_var06, _var07
05260     02 0A 66 F0 | 	shl	_var06, #2
05264     03 00 00 FF 
05268     00 E4 85 F1 | 	sub	objptr, ##1536
0526c     F2 0A 02 F1 | 	add	_var06, objptr
05270     08 0A 06 F1 | 	add	_var06, #8
05274     05 09 62 FC | 	wrlong	_var05, _var06
05278     03 00 00 FF 
0527c     00 E4 05 F1 | 	add	objptr, ##1536
05280     F2 12 02 FB | 	rdlong	arg01, objptr
05284     01 12 06 F1 | 	add	arg01, #1
05288     F2 12 62 FC | 	wrlong	arg01, objptr
0528c     41 00 00 FF 
05290     40 E4 85 F1 | 	sub	objptr, ##33344
05294                 | _compile_error_ret
05294     2D 00 64 FD | 	ret
05298                 | 
05298                 | ' 
05298                 | ' 
05298                 | ' sub compile_unknown() 
05298                 | _compile_unknown
05298     FF 04 06 F6 | 	mov	_var03, #255
0529c     17 00 06 F6 | 	mov	_var01, #23
052a0     01 07 02 F6 | 	mov	_var04, _var02
052a4     02 01 02 F6 | 	mov	_var01, _var03
052a8     41 00 00 FF 
052ac     40 E4 05 F1 | 	add	objptr, ##33344
052b0     F2 08 02 FB | 	rdlong	_var05, objptr
052b4     04 0B 02 F6 | 	mov	_var06, _var05
052b8     01 0A 66 F0 | 	shl	_var06, #1
052bc     04 0B 02 F1 | 	add	_var06, _var05
052c0     02 0A 66 F0 | 	shl	_var06, #2
052c4     03 00 00 FF 
052c8     00 E4 85 F1 | 	sub	objptr, ##1536
052cc     F2 0A 02 F1 | 	add	_var06, objptr
052d0     05 2F 68 FC | 	wrlong	#23, _var06
052d4     03 00 00 FF 
052d8     00 E4 05 F1 | 	add	objptr, ##1536
052dc     F2 0A 02 FB | 	rdlong	_var06, objptr
052e0     05 09 02 F6 | 	mov	_var05, _var06
052e4     01 08 66 F0 | 	shl	_var05, #1
052e8     05 09 02 F1 | 	add	_var05, _var06
052ec     02 08 66 F0 | 	shl	_var05, #2
052f0     03 00 00 FF 
052f4     00 E4 85 F1 | 	sub	objptr, ##1536
052f8     F2 08 02 F1 | 	add	_var05, objptr
052fc     04 08 06 F1 | 	add	_var05, #4
05300     04 07 62 FC | 	wrlong	_var04, _var05
05304     03 00 00 FF 
05308     00 E4 05 F1 | 	add	objptr, ##1536
0530c     F2 0A 02 FB | 	rdlong	_var06, objptr
05310     05 09 02 F6 | 	mov	_var05, _var06
05314     01 08 66 F0 | 	shl	_var05, #1
05318     05 09 02 F1 | 	add	_var05, _var06
0531c     02 08 66 F0 | 	shl	_var05, #2
05320     03 00 00 FF 
05324     00 E4 85 F1 | 	sub	objptr, ##1536
05328     F2 08 02 F1 | 	add	_var05, objptr
0532c     08 08 06 F1 | 	add	_var05, #8
05330     04 01 62 FC | 	wrlong	_var01, _var05
05334     03 00 00 FF 
05338     00 E4 05 F1 | 	add	objptr, ##1536
0533c     F2 0A 02 FB | 	rdlong	_var06, objptr
05340     01 0A 06 F1 | 	add	_var06, #1
05344     F2 0A 62 FC | 	wrlong	_var06, objptr
05348     41 00 00 FF 
0534c     40 E4 85 F1 | 	sub	objptr, ##33344
05350                 | _compile_unknown_ret
05350     2D 00 64 FD | 	ret
05354                 | 
05354                 | ' 
05354                 | ' function compile_converttoint() as integer
05354                 | _compile_converttoint
05354     06 4A 05 F6 | 	mov	COUNT_, #6
05358     A8 00 A0 FD | 	call	#pushregs_
0535c     00 1E 06 F6 | 	mov	local01, #0
05360     FC 22 B0 FD | 	call	#_expr
05364     FD 24 0A F6 | 	mov	local04, result1 wz
05368                 | ' err=0
05368                 | ' t1.result.uresult=0
05368                 | ' err=expr()
05368                 | ' if err=0 then
05368     C0 00 90 5D |  if_ne	jmp	#LR__0450
0536c     16 22 06 F6 | 	mov	local03, #22
05370     0F 27 02 F6 | 	mov	local05, local01
05374     10 29 02 F6 | 	mov	local06, local02
05378     11 25 02 F6 | 	mov	local04, local03
0537c     41 00 00 FF 
05380     40 E4 05 F1 | 	add	objptr, ##33344
05384     F2 1E 02 FB | 	rdlong	local01, objptr
05388     0F FB 01 F6 | 	mov	result1, local01
0538c     01 FA 65 F0 | 	shl	result1, #1
05390     0F FB 01 F1 | 	add	result1, local01
05394     02 FA 65 F0 | 	shl	result1, #2
05398     03 00 00 FF 
0539c     00 E4 85 F1 | 	sub	objptr, ##1536
053a0     F2 FA 01 F1 | 	add	result1, objptr
053a4     FD 26 62 FC | 	wrlong	local05, result1
053a8     03 00 00 FF 
053ac     00 E4 05 F1 | 	add	objptr, ##1536
053b0     F2 26 02 FB | 	rdlong	local05, objptr
053b4     13 1F 02 F6 | 	mov	local01, local05
053b8     01 1E 66 F0 | 	shl	local01, #1
053bc     13 1F 02 F1 | 	add	local01, local05
053c0     02 1E 66 F0 | 	shl	local01, #2
053c4     03 00 00 FF 
053c8     00 E4 85 F1 | 	sub	objptr, ##1536
053cc     F2 1E 02 F1 | 	add	local01, objptr
053d0     04 1E 06 F1 | 	add	local01, #4
053d4     0F 29 62 FC | 	wrlong	local06, local01
053d8     03 00 00 FF 
053dc     00 E4 05 F1 | 	add	objptr, ##1536
053e0     F2 28 02 FB | 	rdlong	local06, objptr
053e4     14 27 02 F6 | 	mov	local05, local06
053e8     01 26 66 F0 | 	shl	local05, #1
053ec     14 27 02 F1 | 	add	local05, local06
053f0     02 26 66 F0 | 	shl	local05, #2
053f4     03 00 00 FF 
053f8     00 E4 85 F1 | 	sub	objptr, ##1536
053fc     F2 26 02 F1 | 	add	local05, objptr
05400     08 26 06 F1 | 	add	local05, #8
05404     13 25 62 FC | 	wrlong	local04, local05
05408     03 00 00 FF 
0540c     00 E4 05 F1 | 	add	objptr, ##1536
05410     F2 26 02 FB | 	rdlong	local05, objptr
05414     01 26 06 F1 | 	add	local05, #1
05418     F2 26 62 FC | 	wrlong	local05, objptr
0541c     41 00 00 FF 
05420     40 E4 85 F1 | 	sub	objptr, ##33344
05424                 | '   t1.result_type=fun_converttoint
05424                 | '   compiledline(lineptr)=t1: lineptr+=1 
05424                 | '   return 0
05424     00 FA 05 F6 | 	mov	result1, #0
05428     04 00 90 FD | 	jmp	#LR__0451
0542c                 | LR__0450
0542c                 | '   return err
0542c     12 FB 01 F6 | 	mov	result1, local04
05430                 | LR__0451
05430     A7 F0 03 F6 | 	mov	ptra, fp
05434     B2 00 A0 FD | 	call	#popregs_
05438                 | _compile_converttoint_ret
05438     2D 00 64 FD | 	ret
0543c                 | 
0543c                 | ' 
0543c                 | ' 
0543c                 | ' function compile_fun_2p() as ulong
0543c                 | _compile_fun_2p
0543c     01 4A 05 F6 | 	mov	COUNT_, #1
05440     A8 00 A0 FD | 	call	#pushregs_
05444     18 22 B0 FD | 	call	#_expr
05448                 | ' 
05448                 | ' expr()
05448                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05448     2E 00 00 FF 
0544c     08 E4 05 F1 | 	add	objptr, ##23560
05450     F2 1E 02 FB | 	rdlong	local01, objptr
05454     03 1E 66 F0 | 	shl	local01, #3
05458     02 00 00 FF 
0545c     38 E4 85 F1 | 	sub	objptr, ##1080
05460     F2 1E 02 F1 | 	add	local01, objptr
05464     04 1E 06 F1 | 	add	local01, #4
05468     0F 1F 02 FB | 	rdlong	local01, local01
0546c     11 1E 0E F2 | 	cmp	local01, #17 wz
05470     2B 00 00 FF 
05474     D0 E5 85 F1 | 	sub	objptr, ##22480
05478     15 FA 05 56 |  if_ne	mov	result1, #21
0547c     24 00 90 5D |  if_ne	jmp	#LR__0460
05480     2E 00 00 FF 
05484     08 E4 05 F1 | 	add	objptr, ##23560
05488     F2 1E 02 FB | 	rdlong	local01, objptr
0548c     01 1E 06 F1 | 	add	local01, #1
05490     F2 1E 62 FC | 	wrlong	local01, objptr
05494     2E 00 00 FF 
05498     08 E4 85 F1 | 	sub	objptr, ##23560
0549c     C0 21 B0 FD | 	call	#_expr
054a0     00 FA 05 F6 | 	mov	result1, #0
054a4                 | LR__0460
054a4     A7 F0 03 F6 | 	mov	ptra, fp
054a8     B2 00 A0 FD | 	call	#popregs_
054ac                 | _compile_fun_2p_ret
054ac     2D 00 64 FD | 	ret
054b0                 | 
054b0                 | ' 
054b0                 | ' function compile_fun_3p() as ulong
054b0                 | _compile_fun_3p
054b0     01 4A 05 F6 | 	mov	COUNT_, #1
054b4     A8 00 A0 FD | 	call	#pushregs_
054b8     A4 21 B0 FD | 	call	#_expr
054bc                 | ' 
054bc                 | ' expr()
054bc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
054bc     2E 00 00 FF 
054c0     08 E4 05 F1 | 	add	objptr, ##23560
054c4     F2 1E 02 FB | 	rdlong	local01, objptr
054c8     03 1E 66 F0 | 	shl	local01, #3
054cc     02 00 00 FF 
054d0     38 E4 85 F1 | 	sub	objptr, ##1080
054d4     F2 1E 02 F1 | 	add	local01, objptr
054d8     04 1E 06 F1 | 	add	local01, #4
054dc     0F 1F 02 FB | 	rdlong	local01, local01
054e0     11 1E 0E F2 | 	cmp	local01, #17 wz
054e4     2B 00 00 FF 
054e8     D0 E5 85 F1 | 	sub	objptr, ##22480
054ec     15 FA 05 56 |  if_ne	mov	result1, #21
054f0     7C 00 90 5D |  if_ne	jmp	#LR__0470
054f4     2E 00 00 FF 
054f8     08 E4 05 F1 | 	add	objptr, ##23560
054fc     F2 1E 02 FB | 	rdlong	local01, objptr
05500     01 1E 06 F1 | 	add	local01, #1
05504     F2 1E 62 FC | 	wrlong	local01, objptr
05508     2E 00 00 FF 
0550c     08 E4 85 F1 | 	sub	objptr, ##23560
05510     4C 21 B0 FD | 	call	#_expr
05514                 | ' expr()
05514                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05514     2E 00 00 FF 
05518     08 E4 05 F1 | 	add	objptr, ##23560
0551c     F2 1E 02 FB | 	rdlong	local01, objptr
05520     03 1E 66 F0 | 	shl	local01, #3
05524     02 00 00 FF 
05528     38 E4 85 F1 | 	sub	objptr, ##1080
0552c     F2 1E 02 F1 | 	add	local01, objptr
05530     04 1E 06 F1 | 	add	local01, #4
05534     0F 1F 02 FB | 	rdlong	local01, local01
05538     11 1E 0E F2 | 	cmp	local01, #17 wz
0553c     2B 00 00 FF 
05540     D0 E5 85 F1 | 	sub	objptr, ##22480
05544     15 FA 05 56 |  if_ne	mov	result1, #21
05548     24 00 90 5D |  if_ne	jmp	#LR__0470
0554c     2E 00 00 FF 
05550     08 E4 05 F1 | 	add	objptr, ##23560
05554     F2 1E 02 FB | 	rdlong	local01, objptr
05558     01 1E 06 F1 | 	add	local01, #1
0555c     F2 1E 62 FC | 	wrlong	local01, objptr
05560     2E 00 00 FF 
05564     08 E4 85 F1 | 	sub	objptr, ##23560
05568     F4 20 B0 FD | 	call	#_expr
0556c     00 FA 05 F6 | 	mov	result1, #0
05570                 | LR__0470
05570     A7 F0 03 F6 | 	mov	ptra, fp
05574     B2 00 A0 FD | 	call	#popregs_
05578                 | _compile_fun_3p_ret
05578     2D 00 64 FD | 	ret
0557c                 | 
0557c                 | ' 
0557c                 | ' function compile_fun_4p() as ulong
0557c                 | _compile_fun_4p
0557c     01 4A 05 F6 | 	mov	COUNT_, #1
05580     A8 00 A0 FD | 	call	#pushregs_
05584     D8 20 B0 FD | 	call	#_expr
05588                 | ' 
05588                 | ' expr()
05588                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05588     2E 00 00 FF 
0558c     08 E4 05 F1 | 	add	objptr, ##23560
05590     F2 1E 02 FB | 	rdlong	local01, objptr
05594     03 1E 66 F0 | 	shl	local01, #3
05598     02 00 00 FF 
0559c     38 E4 85 F1 | 	sub	objptr, ##1080
055a0     F2 1E 02 F1 | 	add	local01, objptr
055a4     04 1E 06 F1 | 	add	local01, #4
055a8     0F 1F 02 FB | 	rdlong	local01, local01
055ac     11 1E 0E F2 | 	cmp	local01, #17 wz
055b0     2B 00 00 FF 
055b4     D0 E5 85 F1 | 	sub	objptr, ##22480
055b8     15 FA 05 56 |  if_ne	mov	result1, #21
055bc     D4 00 90 5D |  if_ne	jmp	#LR__0480
055c0     2E 00 00 FF 
055c4     08 E4 05 F1 | 	add	objptr, ##23560
055c8     F2 1E 02 FB | 	rdlong	local01, objptr
055cc     01 1E 06 F1 | 	add	local01, #1
055d0     F2 1E 62 FC | 	wrlong	local01, objptr
055d4     2E 00 00 FF 
055d8     08 E4 85 F1 | 	sub	objptr, ##23560
055dc     80 20 B0 FD | 	call	#_expr
055e0                 | ' expr()
055e0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
055e0     2E 00 00 FF 
055e4     08 E4 05 F1 | 	add	objptr, ##23560
055e8     F2 1E 02 FB | 	rdlong	local01, objptr
055ec     03 1E 66 F0 | 	shl	local01, #3
055f0     02 00 00 FF 
055f4     38 E4 85 F1 | 	sub	objptr, ##1080
055f8     F2 1E 02 F1 | 	add	local01, objptr
055fc     04 1E 06 F1 | 	add	local01, #4
05600     0F 1F 02 FB | 	rdlong	local01, local01
05604     11 1E 0E F2 | 	cmp	local01, #17 wz
05608     2B 00 00 FF 
0560c     D0 E5 85 F1 | 	sub	objptr, ##22480
05610     15 FA 05 56 |  if_ne	mov	result1, #21
05614     7C 00 90 5D |  if_ne	jmp	#LR__0480
05618     2E 00 00 FF 
0561c     08 E4 05 F1 | 	add	objptr, ##23560
05620     F2 1E 02 FB | 	rdlong	local01, objptr
05624     01 1E 06 F1 | 	add	local01, #1
05628     F2 1E 62 FC | 	wrlong	local01, objptr
0562c     2E 00 00 FF 
05630     08 E4 85 F1 | 	sub	objptr, ##23560
05634     28 20 B0 FD | 	call	#_expr
05638                 | ' expr()
05638                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05638     2E 00 00 FF 
0563c     08 E4 05 F1 | 	add	objptr, ##23560
05640     F2 1E 02 FB | 	rdlong	local01, objptr
05644     03 1E 66 F0 | 	shl	local01, #3
05648     02 00 00 FF 
0564c     38 E4 85 F1 | 	sub	objptr, ##1080
05650     F2 1E 02 F1 | 	add	local01, objptr
05654     04 1E 06 F1 | 	add	local01, #4
05658     0F 1F 02 FB | 	rdlong	local01, local01
0565c     11 1E 0E F2 | 	cmp	local01, #17 wz
05660     2B 00 00 FF 
05664     D0 E5 85 F1 | 	sub	objptr, ##22480
05668     15 FA 05 56 |  if_ne	mov	result1, #21
0566c     24 00 90 5D |  if_ne	jmp	#LR__0480
05670     2E 00 00 FF 
05674     08 E4 05 F1 | 	add	objptr, ##23560
05678     F2 1E 02 FB | 	rdlong	local01, objptr
0567c     01 1E 06 F1 | 	add	local01, #1
05680     F2 1E 62 FC | 	wrlong	local01, objptr
05684     2E 00 00 FF 
05688     08 E4 85 F1 | 	sub	objptr, ##23560
0568c     D0 1F B0 FD | 	call	#_expr
05690     00 FA 05 F6 | 	mov	result1, #0
05694                 | LR__0480
05694     A7 F0 03 F6 | 	mov	ptra, fp
05698     B2 00 A0 FD | 	call	#popregs_
0569c                 | _compile_fun_4p_ret
0569c     2D 00 64 FD | 	ret
056a0                 | 
056a0                 | ' 
056a0                 | ' 
056a0                 | ' function compile_fun_5p() as ulong
056a0                 | _compile_fun_5p
056a0     01 4A 05 F6 | 	mov	COUNT_, #1
056a4     A8 00 A0 FD | 	call	#pushregs_
056a8     B4 1F B0 FD | 	call	#_expr
056ac                 | ' 
056ac                 | ' expr()
056ac                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
056ac     2E 00 00 FF 
056b0     08 E4 05 F1 | 	add	objptr, ##23560
056b4     F2 1E 02 FB | 	rdlong	local01, objptr
056b8     03 1E 66 F0 | 	shl	local01, #3
056bc     02 00 00 FF 
056c0     38 E4 85 F1 | 	sub	objptr, ##1080
056c4     F2 1E 02 F1 | 	add	local01, objptr
056c8     04 1E 06 F1 | 	add	local01, #4
056cc     0F 1F 02 FB | 	rdlong	local01, local01
056d0     11 1E 0E F2 | 	cmp	local01, #17 wz
056d4     2B 00 00 FF 
056d8     D0 E5 85 F1 | 	sub	objptr, ##22480
056dc     15 FA 05 56 |  if_ne	mov	result1, #21
056e0     2C 01 90 5D |  if_ne	jmp	#LR__0490
056e4     2E 00 00 FF 
056e8     08 E4 05 F1 | 	add	objptr, ##23560
056ec     F2 1E 02 FB | 	rdlong	local01, objptr
056f0     01 1E 06 F1 | 	add	local01, #1
056f4     F2 1E 62 FC | 	wrlong	local01, objptr
056f8     2E 00 00 FF 
056fc     08 E4 85 F1 | 	sub	objptr, ##23560
05700     5C 1F B0 FD | 	call	#_expr
05704                 | ' expr()
05704                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05704     2E 00 00 FF 
05708     08 E4 05 F1 | 	add	objptr, ##23560
0570c     F2 1E 02 FB | 	rdlong	local01, objptr
05710     03 1E 66 F0 | 	shl	local01, #3
05714     02 00 00 FF 
05718     38 E4 85 F1 | 	sub	objptr, ##1080
0571c     F2 1E 02 F1 | 	add	local01, objptr
05720     04 1E 06 F1 | 	add	local01, #4
05724     0F 1F 02 FB | 	rdlong	local01, local01
05728     11 1E 0E F2 | 	cmp	local01, #17 wz
0572c     2B 00 00 FF 
05730     D0 E5 85 F1 | 	sub	objptr, ##22480
05734     15 FA 05 56 |  if_ne	mov	result1, #21
05738     D4 00 90 5D |  if_ne	jmp	#LR__0490
0573c     2E 00 00 FF 
05740     08 E4 05 F1 | 	add	objptr, ##23560
05744     F2 1E 02 FB | 	rdlong	local01, objptr
05748     01 1E 06 F1 | 	add	local01, #1
0574c     F2 1E 62 FC | 	wrlong	local01, objptr
05750     2E 00 00 FF 
05754     08 E4 85 F1 | 	sub	objptr, ##23560
05758     04 1F B0 FD | 	call	#_expr
0575c                 | ' expr()
0575c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0575c     2E 00 00 FF 
05760     08 E4 05 F1 | 	add	objptr, ##23560
05764     F2 1E 02 FB | 	rdlong	local01, objptr
05768     03 1E 66 F0 | 	shl	local01, #3
0576c     02 00 00 FF 
05770     38 E4 85 F1 | 	sub	objptr, ##1080
05774     F2 1E 02 F1 | 	add	local01, objptr
05778     04 1E 06 F1 | 	add	local01, #4
0577c     0F 1F 02 FB | 	rdlong	local01, local01
05780     11 1E 0E F2 | 	cmp	local01, #17 wz
05784     2B 00 00 FF 
05788     D0 E5 85 F1 | 	sub	objptr, ##22480
0578c     15 FA 05 56 |  if_ne	mov	result1, #21
05790     7C 00 90 5D |  if_ne	jmp	#LR__0490
05794     2E 00 00 FF 
05798     08 E4 05 F1 | 	add	objptr, ##23560
0579c     F2 1E 02 FB | 	rdlong	local01, objptr
057a0     01 1E 06 F1 | 	add	local01, #1
057a4     F2 1E 62 FC | 	wrlong	local01, objptr
057a8     2E 00 00 FF 
057ac     08 E4 85 F1 | 	sub	objptr, ##23560
057b0     AC 1E B0 FD | 	call	#_expr
057b4                 | ' expr()
057b4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
057b4     2E 00 00 FF 
057b8     08 E4 05 F1 | 	add	objptr, ##23560
057bc     F2 1E 02 FB | 	rdlong	local01, objptr
057c0     03 1E 66 F0 | 	shl	local01, #3
057c4     02 00 00 FF 
057c8     38 E4 85 F1 | 	sub	objptr, ##1080
057cc     F2 1E 02 F1 | 	add	local01, objptr
057d0     04 1E 06 F1 | 	add	local01, #4
057d4     0F 1F 02 FB | 	rdlong	local01, local01
057d8     11 1E 0E F2 | 	cmp	local01, #17 wz
057dc     2B 00 00 FF 
057e0     D0 E5 85 F1 | 	sub	objptr, ##22480
057e4     15 FA 05 56 |  if_ne	mov	result1, #21
057e8     24 00 90 5D |  if_ne	jmp	#LR__0490
057ec     2E 00 00 FF 
057f0     08 E4 05 F1 | 	add	objptr, ##23560
057f4     F2 1E 02 FB | 	rdlong	local01, objptr
057f8     01 1E 06 F1 | 	add	local01, #1
057fc     F2 1E 62 FC | 	wrlong	local01, objptr
05800     2E 00 00 FF 
05804     08 E4 85 F1 | 	sub	objptr, ##23560
05808     54 1E B0 FD | 	call	#_expr
0580c     00 FA 05 F6 | 	mov	result1, #0
05810                 | LR__0490
05810     A7 F0 03 F6 | 	mov	ptra, fp
05814     B2 00 A0 FD | 	call	#popregs_
05818                 | _compile_fun_5p_ret
05818     2D 00 64 FD | 	ret
0581c                 | 
0581c                 | ' 
0581c                 | ' function compile_fun_varp() as ulong ' parameter # on top of the stack
0581c                 | _compile_fun_varp
0581c     02 4A 05 F6 | 	mov	COUNT_, #2
05820     A8 00 A0 FD | 	call	#pushregs_
05824     00 1E 06 F6 | 	mov	local01, #0
05828                 | ' i=0
05828                 | ' if lparts(ct).token<>token_end then
05828     2E 00 00 FF 
0582c     08 E4 05 F1 | 	add	objptr, ##23560
05830     F2 20 02 FB | 	rdlong	local02, objptr
05834     03 20 66 F0 | 	shl	local02, #3
05838     02 00 00 FF 
0583c     38 E4 85 F1 | 	sub	objptr, ##1080
05840     F2 20 02 F1 | 	add	local02, objptr
05844     04 20 06 F1 | 	add	local02, #4
05848     10 21 02 FB | 	rdlong	local02, local02
0584c     FE 21 0E F2 | 	cmp	local02, #510 wz
05850     2B 00 00 FF 
05854     D0 E5 85 F1 | 	sub	objptr, ##22480
05858     5C 00 90 AD |  if_e	jmp	#LR__0502
0585c                 | '   do
0585c                 | LR__0500
0585c     00 1E B0 FD | 	call	#_expr
05860     01 1E 06 F1 | 	add	local01, #1
05864                 | '   expr()
05864                 | '    i+=1
05864                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
05864     2E 00 00 FF 
05868     08 E4 05 F1 | 	add	objptr, ##23560
0586c     F2 20 02 FB | 	rdlong	local02, objptr
05870     03 20 66 F0 | 	shl	local02, #3
05874     02 00 00 FF 
05878     38 E4 85 F1 | 	sub	objptr, ##1080
0587c     F2 20 02 F1 | 	add	local02, objptr
05880     04 20 06 F1 | 	add	local02, #4
05884     10 21 02 FB | 	rdlong	local02, local02
05888     11 20 0E F2 | 	cmp	local02, #17 wz
0588c     2B 00 00 FF 
05890     D0 E5 85 F1 | 	sub	objptr, ##22480
05894     20 00 90 5D |  if_ne	jmp	#LR__0501
05898     2E 00 00 FF 
0589c     08 E4 05 F1 | 	add	objptr, ##23560
058a0     F2 20 02 FB | 	rdlong	local02, objptr
058a4     01 20 06 F1 | 	add	local02, #1
058a8     F2 20 62 FC | 	wrlong	local02, objptr
058ac     2E 00 00 FF 
058b0     08 E4 85 F1 | 	sub	objptr, ##23560
058b4     A4 FF 9F FD | 	jmp	#LR__0500
058b8                 | LR__0501
058b8                 | LR__0502
058b8                 | ' return i
058b8     0F FB 01 F6 | 	mov	result1, local01
058bc     A7 F0 03 F6 | 	mov	ptra, fp
058c0     B2 00 A0 FD | 	call	#popregs_
058c4                 | _compile_fun_varp_ret
058c4     2D 00 64 FD | 	ret
058c8                 | 
058c8                 | ' 
058c8                 | ' 
058c8                 | ' function compile_int_fun_2p() as ulong
058c8                 | _compile_int_fun_2p
058c8     01 4A 05 F6 | 	mov	COUNT_, #1
058cc     A8 00 A0 FD | 	call	#pushregs_
058d0     80 FA BF FD | 	call	#_compile_converttoint
058d4     FD 1E 02 F6 | 	mov	local01, result1
058d8                 | ' err=compile_converttoint() : if err>0 then return err
058d8     01 1E 56 F2 | 	cmps	local01, #1 wc
058dc     0F FB 01 36 |  if_ae	mov	result1, local01
058e0     58 00 90 3D |  if_ae	jmp	#LR__0510
058e4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
058e4     2E 00 00 FF 
058e8     08 E4 05 F1 | 	add	objptr, ##23560
058ec     F2 1E 02 FB | 	rdlong	local01, objptr
058f0     03 1E 66 F0 | 	shl	local01, #3
058f4     02 00 00 FF 
058f8     38 E4 85 F1 | 	sub	objptr, ##1080
058fc     F2 1E 02 F1 | 	add	local01, objptr
05900     04 1E 06 F1 | 	add	local01, #4
05904     0F 1F 02 FB | 	rdlong	local01, local01
05908     11 1E 0E F2 | 	cmp	local01, #17 wz
0590c     2B 00 00 FF 
05910     D0 E5 85 F1 | 	sub	objptr, ##22480
05914     15 FA 05 56 |  if_ne	mov	result1, #21
05918     20 00 90 5D |  if_ne	jmp	#LR__0510
0591c     2E 00 00 FF 
05920     08 E4 05 F1 | 	add	objptr, ##23560
05924     F2 1E 02 FB | 	rdlong	local01, objptr
05928     01 1E 06 F1 | 	add	local01, #1
0592c     F2 1E 62 FC | 	wrlong	local01, objptr
05930     2E 00 00 FF 
05934     08 E4 85 F1 | 	sub	objptr, ##23560
05938     18 FA BF FD | 	call	#_compile_converttoint
0593c                 | ' err=compile_converttoint() 
0593c                 | ' return err
0593c                 | LR__0510
0593c     A7 F0 03 F6 | 	mov	ptra, fp
05940     B2 00 A0 FD | 	call	#popregs_
05944                 | _compile_int_fun_2p_ret
05944     2D 00 64 FD | 	ret
05948                 | 
05948                 | ' 
05948                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
05948                 | _compile_print
05948     0B 4A 05 F6 | 	mov	COUNT_, #11
0594c     A8 00 A0 FD | 	call	#pushregs_
05950     00 1E 06 F6 | 	mov	local01, #0
05954     1D 22 06 F6 | 	mov	local03, #29
05958                 | ' t1.result.uresult=0 : t1.result_type=result_uint
05958                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
05958     2E 00 00 FF 
0595c     08 E4 05 F1 | 	add	objptr, ##23560
05960     F2 24 02 FB | 	rdlong	local04, objptr
05964     03 24 66 F0 | 	shl	local04, #3
05968     02 00 00 FF 
0596c     38 E4 85 F1 | 	sub	objptr, ##1080
05970     F2 24 02 F1 | 	add	local04, objptr
05974     04 24 06 F1 | 	add	local04, #4
05978     12 25 02 FB | 	rdlong	local04, local04
0597c     FE 25 0E F2 | 	cmp	local04, #510 wz
05980     2B 00 00 FF 
05984     D0 E5 85 F1 | 	sub	objptr, ##22480
05988     68 01 90 5D |  if_ne	jmp	#LR__0520
0598c     20 22 06 F6 | 	mov	local03, #32
05990     0F 27 02 F6 | 	mov	local05, local01
05994     10 29 02 F6 | 	mov	local06, local02
05998     11 2B 02 F6 | 	mov	local07, local03
0599c     41 00 00 FF 
059a0     40 E4 05 F1 | 	add	objptr, ##33344
059a4     F2 2C 02 FB | 	rdlong	local08, objptr
059a8     16 2F 02 F6 | 	mov	local09, local08
059ac     01 2E 66 F0 | 	shl	local09, #1
059b0     16 2F 02 F1 | 	add	local09, local08
059b4     02 2E 66 F0 | 	shl	local09, #2
059b8     03 00 00 FF 
059bc     00 E4 85 F1 | 	sub	objptr, ##1536
059c0     F2 2E 02 F1 | 	add	local09, objptr
059c4     17 27 62 FC | 	wrlong	local05, local09
059c8     03 00 00 FF 
059cc     00 E4 05 F1 | 	add	objptr, ##1536
059d0     F2 26 02 FB | 	rdlong	local05, objptr
059d4     13 31 02 F6 | 	mov	local10, local05
059d8     01 30 66 F0 | 	shl	local10, #1
059dc     13 31 02 F1 | 	add	local10, local05
059e0     02 30 66 F0 | 	shl	local10, #2
059e4     03 00 00 FF 
059e8     00 E4 85 F1 | 	sub	objptr, ##1536
059ec     F2 30 02 F1 | 	add	local10, objptr
059f0     04 30 06 F1 | 	add	local10, #4
059f4     18 29 62 FC | 	wrlong	local06, local10
059f8     03 00 00 FF 
059fc     00 E4 05 F1 | 	add	objptr, ##1536
05a00     F2 26 02 FB | 	rdlong	local05, objptr
05a04     13 33 02 F6 | 	mov	local11, local05
05a08     01 32 66 F0 | 	shl	local11, #1
05a0c     13 33 02 F1 | 	add	local11, local05
05a10     02 32 66 F0 | 	shl	local11, #2
05a14     03 00 00 FF 
05a18     00 E4 85 F1 | 	sub	objptr, ##1536
05a1c     F2 32 02 F1 | 	add	local11, objptr
05a20     08 32 06 F1 | 	add	local11, #8
05a24     19 2B 62 FC | 	wrlong	local07, local11
05a28     03 00 00 FF 
05a2c     00 E4 05 F1 | 	add	objptr, ##1536
05a30     F2 26 02 FB | 	rdlong	local05, objptr
05a34     01 26 06 F1 | 	add	local05, #1
05a38     F2 26 62 FC | 	wrlong	local05, objptr
05a3c     44 22 06 F6 | 	mov	local03, #68
05a40     0F 27 02 F6 | 	mov	local05, local01
05a44     10 29 02 F6 | 	mov	local06, local02
05a48     11 2B 02 F6 | 	mov	local07, local03
05a4c     F2 2C 02 FB | 	rdlong	local08, objptr
05a50     16 2F 02 F6 | 	mov	local09, local08
05a54     01 2E 66 F0 | 	shl	local09, #1
05a58     16 2F 02 F1 | 	add	local09, local08
05a5c     02 2E 66 F0 | 	shl	local09, #2
05a60     03 00 00 FF 
05a64     00 E4 85 F1 | 	sub	objptr, ##1536
05a68     F2 2E 02 F1 | 	add	local09, objptr
05a6c     17 27 62 FC | 	wrlong	local05, local09
05a70     03 00 00 FF 
05a74     00 E4 05 F1 | 	add	objptr, ##1536
05a78     F2 32 02 FB | 	rdlong	local11, objptr
05a7c     19 31 02 F6 | 	mov	local10, local11
05a80     01 30 66 F0 | 	shl	local10, #1
05a84     19 31 02 F1 | 	add	local10, local11
05a88     02 30 66 F0 | 	shl	local10, #2
05a8c     03 00 00 FF 
05a90     00 E4 85 F1 | 	sub	objptr, ##1536
05a94     F2 30 02 F1 | 	add	local10, objptr
05a98     04 30 06 F1 | 	add	local10, #4
05a9c     18 29 62 FC | 	wrlong	local06, local10
05aa0     03 00 00 FF 
05aa4     00 E4 05 F1 | 	add	objptr, ##1536
05aa8     F2 30 02 FB | 	rdlong	local10, objptr
05aac     18 33 02 F6 | 	mov	local11, local10
05ab0     01 32 66 F0 | 	shl	local11, #1
05ab4     18 33 02 F1 | 	add	local11, local10
05ab8     02 32 66 F0 | 	shl	local11, #2
05abc     03 00 00 FF 
05ac0     00 E4 85 F1 | 	sub	objptr, ##1536
05ac4     F2 32 02 F1 | 	add	local11, objptr
05ac8     08 32 06 F1 | 	add	local11, #8
05acc     19 2B 62 FC | 	wrlong	local07, local11
05ad0     03 00 00 FF 
05ad4     00 E4 05 F1 | 	add	objptr, ##1536
05ad8     F2 26 02 FB | 	rdlong	local05, objptr
05adc     01 26 06 F1 | 	add	local05, #1
05ae0     F2 26 62 FC | 	wrlong	local05, objptr
05ae4     41 00 00 FF 
05ae8     40 E4 85 F1 | 	sub	objptr, ##33344
05aec     00 FA 05 F6 | 	mov	result1, #0
05af0     20 05 90 FD | 	jmp	#LR__0527
05af4                 | LR__0520
05af4                 | ' do
05af4                 | LR__0521
05af4     68 1B B0 FD | 	call	#_expr
05af8                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
05af8                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
05af8     2E 00 00 FF 
05afc     08 E4 05 F1 | 	add	objptr, ##23560
05b00     F2 24 02 FB | 	rdlong	local04, objptr
05b04     03 24 66 F0 | 	shl	local04, #3
05b08     02 00 00 FF 
05b0c     38 E4 85 F1 | 	sub	objptr, ##1080
05b10     F2 24 02 F1 | 	add	local04, objptr
05b14     04 24 06 F1 | 	add	local04, #4
05b18     12 2D 02 FB | 	rdlong	local08, local04
05b1c     11 2C 0E F2 | 	cmp	local08, #17 wz
05b20     2B 00 00 FF 
05b24     D0 E5 85 F1 | 	sub	objptr, ##22480
05b28     60 01 90 5D |  if_ne	jmp	#LR__0522
05b2c     21 22 06 F6 | 	mov	local03, #33
05b30     0F 27 02 F6 | 	mov	local05, local01
05b34     10 29 02 F6 | 	mov	local06, local02
05b38     11 2B 02 F6 | 	mov	local07, local03
05b3c     41 00 00 FF 
05b40     40 E4 05 F1 | 	add	objptr, ##33344
05b44     F2 2C 02 FB | 	rdlong	local08, objptr
05b48     16 2F 02 F6 | 	mov	local09, local08
05b4c     01 2E 66 F0 | 	shl	local09, #1
05b50     16 2F 02 F1 | 	add	local09, local08
05b54     02 2E 66 F0 | 	shl	local09, #2
05b58     03 00 00 FF 
05b5c     00 E4 85 F1 | 	sub	objptr, ##1536
05b60     F2 2E 02 F1 | 	add	local09, objptr
05b64     17 27 62 FC | 	wrlong	local05, local09
05b68     03 00 00 FF 
05b6c     00 E4 05 F1 | 	add	objptr, ##1536
05b70     F2 32 02 FB | 	rdlong	local11, objptr
05b74     19 31 02 F6 | 	mov	local10, local11
05b78     01 30 66 F0 | 	shl	local10, #1
05b7c     19 31 02 F1 | 	add	local10, local11
05b80     02 30 66 F0 | 	shl	local10, #2
05b84     03 00 00 FF 
05b88     00 E4 85 F1 | 	sub	objptr, ##1536
05b8c     F2 30 02 F1 | 	add	local10, objptr
05b90     04 30 06 F1 | 	add	local10, #4
05b94     18 29 62 FC | 	wrlong	local06, local10
05b98     03 00 00 FF 
05b9c     00 E4 05 F1 | 	add	objptr, ##1536
05ba0     F2 26 02 FB | 	rdlong	local05, objptr
05ba4     13 33 02 F6 | 	mov	local11, local05
05ba8     01 32 66 F0 | 	shl	local11, #1
05bac     13 33 02 F1 | 	add	local11, local05
05bb0     02 32 66 F0 | 	shl	local11, #2
05bb4     03 00 00 FF 
05bb8     00 E4 85 F1 | 	sub	objptr, ##1536
05bbc     F2 32 02 F1 | 	add	local11, objptr
05bc0     08 32 06 F1 | 	add	local11, #8
05bc4     19 2B 62 FC | 	wrlong	local07, local11
05bc8     03 00 00 FF 
05bcc     00 E4 05 F1 | 	add	objptr, ##1536
05bd0     F2 26 02 FB | 	rdlong	local05, objptr
05bd4     01 26 06 F1 | 	add	local05, #1
05bd8     F2 26 62 FC | 	wrlong	local05, objptr
05bdc     44 22 06 F6 | 	mov	local03, #68
05be0     0F 27 02 F6 | 	mov	local05, local01
05be4     10 29 02 F6 | 	mov	local06, local02
05be8     11 2B 02 F6 | 	mov	local07, local03
05bec     F2 2C 02 FB | 	rdlong	local08, objptr
05bf0     16 2F 02 F6 | 	mov	local09, local08
05bf4     01 2E 66 F0 | 	shl	local09, #1
05bf8     16 2F 02 F1 | 	add	local09, local08
05bfc     02 2E 66 F0 | 	shl	local09, #2
05c00     03 00 00 FF 
05c04     00 E4 85 F1 | 	sub	objptr, ##1536
05c08     F2 2E 02 F1 | 	add	local09, objptr
05c0c     17 27 62 FC | 	wrlong	local05, local09
05c10     03 00 00 FF 
05c14     00 E4 05 F1 | 	add	objptr, ##1536
05c18     F2 32 02 FB | 	rdlong	local11, objptr
05c1c     19 31 02 F6 | 	mov	local10, local11
05c20     01 30 66 F0 | 	shl	local10, #1
05c24     19 31 02 F1 | 	add	local10, local11
05c28     02 30 66 F0 | 	shl	local10, #2
05c2c     03 00 00 FF 
05c30     00 E4 85 F1 | 	sub	objptr, ##1536
05c34     F2 30 02 F1 | 	add	local10, objptr
05c38     04 30 06 F1 | 	add	local10, #4
05c3c     18 29 62 FC | 	wrlong	local06, local10
05c40     03 00 00 FF 
05c44     00 E4 05 F1 | 	add	objptr, ##1536
05c48     F2 30 02 FB | 	rdlong	local10, objptr
05c4c     18 33 02 F6 | 	mov	local11, local10
05c50     01 32 66 F0 | 	shl	local11, #1
05c54     18 33 02 F1 | 	add	local11, local10
05c58     02 32 66 F0 | 	shl	local11, #2
05c5c     03 00 00 FF 
05c60     00 E4 85 F1 | 	sub	objptr, ##1536
05c64     F2 32 02 F1 | 	add	local11, objptr
05c68     08 32 06 F1 | 	add	local11, #8
05c6c     19 2B 62 FC | 	wrlong	local07, local11
05c70     03 00 00 FF 
05c74     00 E4 05 F1 | 	add	objptr, ##1536
05c78     F2 26 02 FB | 	rdlong	local05, objptr
05c7c     01 26 06 F1 | 	add	local05, #1
05c80     F2 26 62 FC | 	wrlong	local05, objptr
05c84     41 00 00 FF 
05c88     40 E4 85 F1 | 	sub	objptr, ##33344
05c8c                 | LR__0522
05c8c                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
05c8c     2E 00 00 FF 
05c90     08 E4 05 F1 | 	add	objptr, ##23560
05c94     F2 24 02 FB | 	rdlong	local04, objptr
05c98     03 24 66 F0 | 	shl	local04, #3
05c9c     02 00 00 FF 
05ca0     38 E4 85 F1 | 	sub	objptr, ##1080
05ca4     F2 24 02 F1 | 	add	local04, objptr
05ca8     04 24 06 F1 | 	add	local04, #4
05cac     12 2D 02 FB | 	rdlong	local08, local04
05cb0     12 2C 0E F2 | 	cmp	local08, #18 wz
05cb4     2B 00 00 FF 
05cb8     D0 E5 85 F1 | 	sub	objptr, ##22480
05cbc     60 01 90 5D |  if_ne	jmp	#LR__0523
05cc0     22 22 06 F6 | 	mov	local03, #34
05cc4     0F 27 02 F6 | 	mov	local05, local01
05cc8     10 29 02 F6 | 	mov	local06, local02
05ccc     11 2B 02 F6 | 	mov	local07, local03
05cd0     41 00 00 FF 
05cd4     40 E4 05 F1 | 	add	objptr, ##33344
05cd8     F2 2C 02 FB | 	rdlong	local08, objptr
05cdc     16 2F 02 F6 | 	mov	local09, local08
05ce0     01 2E 66 F0 | 	shl	local09, #1
05ce4     16 2F 02 F1 | 	add	local09, local08
05ce8     02 2E 66 F0 | 	shl	local09, #2
05cec     03 00 00 FF 
05cf0     00 E4 85 F1 | 	sub	objptr, ##1536
05cf4     F2 2E 02 F1 | 	add	local09, objptr
05cf8     17 27 62 FC | 	wrlong	local05, local09
05cfc     03 00 00 FF 
05d00     00 E4 05 F1 | 	add	objptr, ##1536
05d04     F2 32 02 FB | 	rdlong	local11, objptr
05d08     19 31 02 F6 | 	mov	local10, local11
05d0c     01 30 66 F0 | 	shl	local10, #1
05d10     19 31 02 F1 | 	add	local10, local11
05d14     02 30 66 F0 | 	shl	local10, #2
05d18     03 00 00 FF 
05d1c     00 E4 85 F1 | 	sub	objptr, ##1536
05d20     F2 30 02 F1 | 	add	local10, objptr
05d24     04 30 06 F1 | 	add	local10, #4
05d28     18 29 62 FC | 	wrlong	local06, local10
05d2c     03 00 00 FF 
05d30     00 E4 05 F1 | 	add	objptr, ##1536
05d34     F2 26 02 FB | 	rdlong	local05, objptr
05d38     13 33 02 F6 | 	mov	local11, local05
05d3c     01 32 66 F0 | 	shl	local11, #1
05d40     13 33 02 F1 | 	add	local11, local05
05d44     02 32 66 F0 | 	shl	local11, #2
05d48     03 00 00 FF 
05d4c     00 E4 85 F1 | 	sub	objptr, ##1536
05d50     F2 32 02 F1 | 	add	local11, objptr
05d54     08 32 06 F1 | 	add	local11, #8
05d58     19 2B 62 FC | 	wrlong	local07, local11
05d5c     03 00 00 FF 
05d60     00 E4 05 F1 | 	add	objptr, ##1536
05d64     F2 26 02 FB | 	rdlong	local05, objptr
05d68     01 26 06 F1 | 	add	local05, #1
05d6c     F2 26 62 FC | 	wrlong	local05, objptr
05d70     44 22 06 F6 | 	mov	local03, #68
05d74     0F 27 02 F6 | 	mov	local05, local01
05d78     10 29 02 F6 | 	mov	local06, local02
05d7c     11 2B 02 F6 | 	mov	local07, local03
05d80     F2 2C 02 FB | 	rdlong	local08, objptr
05d84     16 2F 02 F6 | 	mov	local09, local08
05d88     01 2E 66 F0 | 	shl	local09, #1
05d8c     16 2F 02 F1 | 	add	local09, local08
05d90     02 2E 66 F0 | 	shl	local09, #2
05d94     03 00 00 FF 
05d98     00 E4 85 F1 | 	sub	objptr, ##1536
05d9c     F2 2E 02 F1 | 	add	local09, objptr
05da0     17 27 62 FC | 	wrlong	local05, local09
05da4     03 00 00 FF 
05da8     00 E4 05 F1 | 	add	objptr, ##1536
05dac     F2 32 02 FB | 	rdlong	local11, objptr
05db0     19 31 02 F6 | 	mov	local10, local11
05db4     01 30 66 F0 | 	shl	local10, #1
05db8     19 31 02 F1 | 	add	local10, local11
05dbc     02 30 66 F0 | 	shl	local10, #2
05dc0     03 00 00 FF 
05dc4     00 E4 85 F1 | 	sub	objptr, ##1536
05dc8     F2 30 02 F1 | 	add	local10, objptr
05dcc     04 30 06 F1 | 	add	local10, #4
05dd0     18 29 62 FC | 	wrlong	local06, local10
05dd4     03 00 00 FF 
05dd8     00 E4 05 F1 | 	add	objptr, ##1536
05ddc     F2 30 02 FB | 	rdlong	local10, objptr
05de0     18 33 02 F6 | 	mov	local11, local10
05de4     01 32 66 F0 | 	shl	local11, #1
05de8     18 33 02 F1 | 	add	local11, local10
05dec     02 32 66 F0 | 	shl	local11, #2
05df0     03 00 00 FF 
05df4     00 E4 85 F1 | 	sub	objptr, ##1536
05df8     F2 32 02 F1 | 	add	local11, objptr
05dfc     08 32 06 F1 | 	add	local11, #8
05e00     19 2B 62 FC | 	wrlong	local07, local11
05e04     03 00 00 FF 
05e08     00 E4 05 F1 | 	add	objptr, ##1536
05e0c     F2 26 02 FB | 	rdlong	local05, objptr
05e10     01 26 06 F1 | 	add	local05, #1
05e14     F2 26 62 FC | 	wrlong	local05, objptr
05e18     41 00 00 FF 
05e1c     40 E4 85 F1 | 	sub	objptr, ##33344
05e20                 | LR__0523
05e20                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
05e20     2E 00 00 FF 
05e24     08 E4 05 F1 | 	add	objptr, ##23560
05e28     F2 24 02 FB | 	rdlong	local04, objptr
05e2c     03 24 66 F0 | 	shl	local04, #3
05e30     02 00 00 FF 
05e34     38 E4 85 F1 | 	sub	objptr, ##1080
05e38     F2 24 02 F1 | 	add	local04, objptr
05e3c     04 24 06 F1 | 	add	local04, #4
05e40     12 2D 02 FB | 	rdlong	local08, local04
05e44     FE 2D 0E F2 | 	cmp	local08, #510 wz
05e48     2B 00 00 FF 
05e4c     D0 E5 85 F1 | 	sub	objptr, ##22480
05e50     B8 00 90 5D |  if_ne	jmp	#LR__0524
05e54     44 22 06 F6 | 	mov	local03, #68
05e58     0F 27 02 F6 | 	mov	local05, local01
05e5c     10 29 02 F6 | 	mov	local06, local02
05e60     11 2B 02 F6 | 	mov	local07, local03
05e64     41 00 00 FF 
05e68     40 E4 05 F1 | 	add	objptr, ##33344
05e6c     F2 2C 02 FB | 	rdlong	local08, objptr
05e70     16 2F 02 F6 | 	mov	local09, local08
05e74     01 2E 66 F0 | 	shl	local09, #1
05e78     16 2F 02 F1 | 	add	local09, local08
05e7c     02 2E 66 F0 | 	shl	local09, #2
05e80     03 00 00 FF 
05e84     00 E4 85 F1 | 	sub	objptr, ##1536
05e88     F2 2E 02 F1 | 	add	local09, objptr
05e8c     17 27 62 FC | 	wrlong	local05, local09
05e90     03 00 00 FF 
05e94     00 E4 05 F1 | 	add	objptr, ##1536
05e98     F2 32 02 FB | 	rdlong	local11, objptr
05e9c     19 31 02 F6 | 	mov	local10, local11
05ea0     01 30 66 F0 | 	shl	local10, #1
05ea4     19 31 02 F1 | 	add	local10, local11
05ea8     02 30 66 F0 | 	shl	local10, #2
05eac     03 00 00 FF 
05eb0     00 E4 85 F1 | 	sub	objptr, ##1536
05eb4     F2 30 02 F1 | 	add	local10, objptr
05eb8     04 30 06 F1 | 	add	local10, #4
05ebc     18 29 62 FC | 	wrlong	local06, local10
05ec0     03 00 00 FF 
05ec4     00 E4 05 F1 | 	add	objptr, ##1536
05ec8     F2 30 02 FB | 	rdlong	local10, objptr
05ecc     18 33 02 F6 | 	mov	local11, local10
05ed0     01 32 66 F0 | 	shl	local11, #1
05ed4     18 33 02 F1 | 	add	local11, local10
05ed8     02 32 66 F0 | 	shl	local11, #2
05edc     03 00 00 FF 
05ee0     00 E4 85 F1 | 	sub	objptr, ##1536
05ee4     F2 32 02 F1 | 	add	local11, objptr
05ee8     08 32 06 F1 | 	add	local11, #8
05eec     19 2B 62 FC | 	wrlong	local07, local11
05ef0     03 00 00 FF 
05ef4     00 E4 05 F1 | 	add	objptr, ##1536
05ef8     F2 26 02 FB | 	rdlong	local05, objptr
05efc     01 26 06 F1 | 	add	local05, #1
05f00     F2 26 62 FC | 	wrlong	local05, objptr
05f04     41 00 00 FF 
05f08     40 E4 85 F1 | 	sub	objptr, ##33344
05f0c                 | LR__0524
05f0c                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
05f0c     2E 00 00 FF 
05f10     08 E4 05 F1 | 	add	objptr, ##23560
05f14     F2 24 02 FB | 	rdlong	local04, objptr
05f18     03 24 66 F0 | 	shl	local04, #3
05f1c     02 00 00 FF 
05f20     38 E4 85 F1 | 	sub	objptr, ##1080
05f24     F2 24 02 F1 | 	add	local04, objptr
05f28     04 24 06 F1 | 	add	local04, #4
05f2c     12 2D 02 FB | 	rdlong	local08, local04
05f30     11 2C 0E F2 | 	cmp	local08, #17 wz
05f34     2B 00 00 FF 
05f38     D0 E5 85 F1 | 	sub	objptr, ##22480
05f3c     6C 00 90 AD |  if_e	jmp	#LR__0525
05f40     2E 00 00 FF 
05f44     08 E4 05 F1 | 	add	objptr, ##23560
05f48     F2 2C 02 FB | 	rdlong	local08, objptr
05f4c     03 2C 66 F0 | 	shl	local08, #3
05f50     02 00 00 FF 
05f54     38 E4 85 F1 | 	sub	objptr, ##1080
05f58     F2 2C 02 F1 | 	add	local08, objptr
05f5c     04 2C 06 F1 | 	add	local08, #4
05f60     16 2D 02 FB | 	rdlong	local08, local08
05f64     12 2C 0E F2 | 	cmp	local08, #18 wz
05f68     2B 00 00 FF 
05f6c     D0 E5 85 F1 | 	sub	objptr, ##22480
05f70     38 00 90 AD |  if_e	jmp	#LR__0525
05f74     2E 00 00 FF 
05f78     08 E4 05 F1 | 	add	objptr, ##23560
05f7c     F2 32 02 FB | 	rdlong	local11, objptr
05f80     03 32 66 F0 | 	shl	local11, #3
05f84     02 00 00 FF 
05f88     38 E4 85 F1 | 	sub	objptr, ##1080
05f8c     F2 32 02 F1 | 	add	local11, objptr
05f90     04 32 06 F1 | 	add	local11, #4
05f94     19 33 02 FB | 	rdlong	local11, local11
05f98     FE 33 0E F2 | 	cmp	local11, #510 wz
05f9c     2B 00 00 FF 
05fa0     D0 E5 85 F1 | 	sub	objptr, ##22480
05fa4     16 FA 05 56 |  if_ne	mov	result1, #22
05fa8     68 00 90 5D |  if_ne	jmp	#LR__0527
05fac                 | LR__0525
05fac     2E 00 00 FF 
05fb0     08 E4 05 F1 | 	add	objptr, ##23560
05fb4     F2 24 02 FB | 	rdlong	local04, objptr
05fb8     01 24 06 F1 | 	add	local04, #1
05fbc     F2 24 62 FC | 	wrlong	local04, objptr
05fc0     03 24 66 F0 | 	shl	local04, #3
05fc4     02 00 00 FF 
05fc8     38 E4 85 F1 | 	sub	objptr, ##1080
05fcc     F2 24 02 F1 | 	add	local04, objptr
05fd0     04 24 06 F1 | 	add	local04, #4
05fd4     12 2D 02 FB | 	rdlong	local08, local04
05fd8     FE 2D 0E F2 | 	cmp	local08, #510 wz
05fdc     2B 00 00 FF 
05fe0     D0 E5 85 F1 | 	sub	objptr, ##22480
05fe4     28 00 90 AD |  if_e	jmp	#LR__0526
05fe8     2E 00 00 FF 
05fec     08 E4 05 F1 | 	add	objptr, ##23560
05ff0     F2 32 02 FB | 	rdlong	local11, objptr
05ff4     0E 00 00 FF 
05ff8     1C E4 05 F1 | 	add	objptr, ##7196
05ffc     F2 30 02 FB | 	rdlong	local10, objptr
06000     3C 00 00 FF 
06004     24 E4 85 F1 | 	sub	objptr, ##30756
06008     18 33 52 F2 | 	cmps	local11, local10 wc
0600c     E4 FA 9F CD |  if_b	jmp	#LR__0521
06010                 | LR__0526
06010                 | ' return 0
06010     00 FA 05 F6 | 	mov	result1, #0
06014                 | LR__0527
06014     A7 F0 03 F6 | 	mov	ptra, fp
06018     B2 00 A0 FD | 	call	#popregs_
0601c                 | _compile_print_ret
0601c     2D 00 64 FD | 	ret
06020                 | 
06020                 | ' 
06020                 | ' function compile_if() as ulong  
06020                 | _compile_if
06020     05 4A 05 F6 | 	mov	COUNT_, #5
06024     A8 00 A0 FD | 	call	#pushregs_
06028                 | _compile_if_enter
06028     28 F3 BF FD | 	call	#_compile_converttoint
0602c                 | ' return err
0602c     2E 00 00 FF 
06030     08 E4 05 F1 | 	add	objptr, ##23560
06034     F2 FA 01 FB | 	rdlong	result1, objptr
06038     01 FA 05 F1 | 	add	result1, #1
0603c     F2 FA 61 FC | 	wrlong	result1, objptr
06040     58 22 06 F6 | 	mov	local03, #88
06044     0F 25 02 F6 | 	mov	local04, local01
06048     10 27 02 F6 | 	mov	local05, local02
0604c     11 1F 02 F6 | 	mov	local01, local03
06050     13 00 00 FF 
06054     38 E4 05 F1 | 	add	objptr, ##9784
06058     F2 12 02 FB | 	rdlong	arg01, objptr
0605c     09 FB 01 F6 | 	mov	result1, arg01
06060     01 FA 65 F0 | 	shl	result1, #1
06064     09 FB 01 F1 | 	add	result1, arg01
06068     02 FA 65 F0 | 	shl	result1, #2
0606c     03 00 00 FF 
06070     00 E4 85 F1 | 	sub	objptr, ##1536
06074     F2 FA 01 F1 | 	add	result1, objptr
06078     FD 24 62 FC | 	wrlong	local04, result1
0607c     03 00 00 FF 
06080     00 E4 05 F1 | 	add	objptr, ##1536
06084     F2 12 02 FB | 	rdlong	arg01, objptr
06088     09 25 02 F6 | 	mov	local04, arg01
0608c     01 24 66 F0 | 	shl	local04, #1
06090     09 25 02 F1 | 	add	local04, arg01
06094     02 24 66 F0 | 	shl	local04, #2
06098     03 00 00 FF 
0609c     00 E4 85 F1 | 	sub	objptr, ##1536
060a0     F2 24 02 F1 | 	add	local04, objptr
060a4     04 24 06 F1 | 	add	local04, #4
060a8     12 27 62 FC | 	wrlong	local05, local04
060ac     03 00 00 FF 
060b0     00 E4 05 F1 | 	add	objptr, ##1536
060b4     F2 24 02 FB | 	rdlong	local04, objptr
060b8     12 27 02 F6 | 	mov	local05, local04
060bc     01 26 66 F0 | 	shl	local05, #1
060c0     12 27 02 F1 | 	add	local05, local04
060c4     02 26 66 F0 | 	shl	local05, #2
060c8     03 00 00 FF 
060cc     00 E4 85 F1 | 	sub	objptr, ##1536
060d0     F2 26 02 F1 | 	add	local05, objptr
060d4     08 26 06 F1 | 	add	local05, #8
060d8     13 1F 62 FC | 	wrlong	local01, local05
060dc     03 00 00 FF 
060e0     00 E4 05 F1 | 	add	objptr, ##1536
060e4     F2 24 02 FB | 	rdlong	local04, objptr
060e8     01 24 06 F1 | 	add	local04, #1
060ec     F2 24 62 FC | 	wrlong	local04, objptr
060f0                 | ' 
060f0                 | ' 'print "In compile_if"
060f0                 | ' compile_int_fun_1p()
060f0                 | ' cmd=lparts(ct).token : ct+=1
060f0                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
060f0                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
060f0                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
060f0     13 00 00 FF 
060f4     38 E4 85 F1 | 	sub	objptr, ##9784
060f8     F2 26 02 FB | 	rdlong	local05, objptr
060fc     01 26 06 F1 | 	add	local05, #1
06100     03 26 66 F0 | 	shl	local05, #3
06104     02 00 00 FF 
06108     38 E4 85 F1 | 	sub	objptr, ##1080
0610c     F2 26 02 F1 | 	add	local05, objptr
06110     13 13 02 FB | 	rdlong	arg01, local05
06114     2B 00 00 FF 
06118     D0 E5 85 F1 | 	sub	objptr, ##22480
0611c                 | ' 
0611c                 | ' select case s
0611c     26 01 00 FF 
06120     BA 14 06 F6 | 	mov	arg02, ##@LR__4176
06124     48 FA B0 FD | 	call	#__system___string_cmp
06128     00 FA 0D F2 | 	cmp	result1, #0 wz
0612c     1B FA 05 A6 |  if_e	mov	result1, #27
06130     00 FA 05 56 |  if_ne	mov	result1, #0
06134     00 FA 0D F2 | 	cmp	result1, #0 wz
06138     0C 00 90 AD |  if_e	jmp	#LR__0530
0613c     05 12 06 F6 | 	mov	arg01, #5
06140     20 EC BF FD | 	call	#_compile_immediate_assign
06144     08 00 90 FD | 	jmp	#LR__0531
06148                 | LR__0530
06148     05 12 06 F6 | 	mov	arg01, #5
0614c     C8 E4 BF FD | 	call	#_compile_immediate
06150                 | LR__0531
06150                 | ' 
06150                 | ' 
06150                 | ' return 0
06150     00 FA 05 F6 | 	mov	result1, #0
06154     A7 F0 03 F6 | 	mov	ptra, fp
06158     B2 00 A0 FD | 	call	#popregs_
0615c                 | _compile_if_ret
0615c     2D 00 64 FD | 	ret
06160                 | 
06160                 | ' 
06160                 | ' function compile_else() as ulong  
06160                 | _compile_else
06160     05 4A 05 F6 | 	mov	COUNT_, #5
06164     A8 00 A0 FD | 	call	#pushregs_
06168                 | _compile_else_enter
06168     5A 22 06 F6 | 	mov	local03, #90
0616c     0F 25 02 F6 | 	mov	local04, local01
06170     10 27 02 F6 | 	mov	local05, local02
06174     11 1F 02 F6 | 	mov	local01, local03
06178     41 00 00 FF 
0617c     40 E4 05 F1 | 	add	objptr, ##33344
06180     F2 12 02 FB | 	rdlong	arg01, objptr
06184     09 FB 01 F6 | 	mov	result1, arg01
06188     01 FA 65 F0 | 	shl	result1, #1
0618c     09 FB 01 F1 | 	add	result1, arg01
06190     02 FA 65 F0 | 	shl	result1, #2
06194     03 00 00 FF 
06198     00 E4 85 F1 | 	sub	objptr, ##1536
0619c     F2 FA 01 F1 | 	add	result1, objptr
061a0     FD 24 62 FC | 	wrlong	local04, result1
061a4     03 00 00 FF 
061a8     00 E4 05 F1 | 	add	objptr, ##1536
061ac     F2 FA 01 FB | 	rdlong	result1, objptr
061b0     FD 24 02 F6 | 	mov	local04, result1
061b4     01 24 66 F0 | 	shl	local04, #1
061b8     FD 24 02 F1 | 	add	local04, result1
061bc     02 24 66 F0 | 	shl	local04, #2
061c0     03 00 00 FF 
061c4     00 E4 85 F1 | 	sub	objptr, ##1536
061c8     F2 24 02 F1 | 	add	local04, objptr
061cc     04 24 06 F1 | 	add	local04, #4
061d0     12 27 62 FC | 	wrlong	local05, local04
061d4     03 00 00 FF 
061d8     00 E4 05 F1 | 	add	objptr, ##1536
061dc     F2 24 02 FB | 	rdlong	local04, objptr
061e0     12 27 02 F6 | 	mov	local05, local04
061e4     01 26 66 F0 | 	shl	local05, #1
061e8     12 27 02 F1 | 	add	local05, local04
061ec     02 26 66 F0 | 	shl	local05, #2
061f0     03 00 00 FF 
061f4     00 E4 85 F1 | 	sub	objptr, ##1536
061f8     F2 26 02 F1 | 	add	local05, objptr
061fc     08 26 06 F1 | 	add	local05, #8
06200     13 1F 62 FC | 	wrlong	local01, local05
06204     03 00 00 FF 
06208     00 E4 05 F1 | 	add	objptr, ##1536
0620c     F2 24 02 FB | 	rdlong	local04, objptr
06210     01 24 06 F1 | 	add	local04, #1
06214     F2 24 62 FC | 	wrlong	local04, objptr
06218                 | ' 
06218                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
06218                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
06218     13 00 00 FF 
0621c     38 E4 85 F1 | 	sub	objptr, ##9784
06220     F2 26 02 FB | 	rdlong	local05, objptr
06224     01 26 06 F1 | 	add	local05, #1
06228     03 26 66 F0 | 	shl	local05, #3
0622c     02 00 00 FF 
06230     38 E4 85 F1 | 	sub	objptr, ##1080
06234     F2 26 02 F1 | 	add	local05, objptr
06238     13 13 02 FB | 	rdlong	arg01, local05
0623c     2B 00 00 FF 
06240     D0 E5 85 F1 | 	sub	objptr, ##22480
06244                 | ' 
06244                 | ' select case s
06244     26 01 00 FF 
06248     BA 14 06 F6 | 	mov	arg02, ##@LR__4176
0624c     20 F9 B0 FD | 	call	#__system___string_cmp
06250     00 FA 0D F2 | 	cmp	result1, #0 wz
06254     1B FA 05 A6 |  if_e	mov	result1, #27
06258     00 FA 05 56 |  if_ne	mov	result1, #0
0625c     00 FA 0D F2 | 	cmp	result1, #0 wz
06260     0C 00 90 AD |  if_e	jmp	#LR__0540
06264     05 12 06 F6 | 	mov	arg01, #5
06268     F8 EA BF FD | 	call	#_compile_immediate_assign
0626c     08 00 90 FD | 	jmp	#LR__0541
06270                 | LR__0540
06270     05 12 06 F6 | 	mov	arg01, #5
06274     A0 E3 BF FD | 	call	#_compile_immediate
06278                 | LR__0541
06278                 | ' 
06278                 | ' 
06278                 | ' return 0
06278     00 FA 05 F6 | 	mov	result1, #0
0627c     A7 F0 03 F6 | 	mov	ptra, fp
06280     B2 00 A0 FD | 	call	#popregs_
06284                 | _compile_else_ret
06284     2D 00 64 FD | 	ret
06288                 | 
06288                 | ' 
06288                 | ' 
06288                 | ' function compile_dim() as ulong  
06288                 | _compile_dim
06288     11 4A 05 F6 | 	mov	COUNT_, #17
0628c     A8 00 A0 FD | 	call	#pushregs_
06290     01 1E 06 F6 | 	mov	local01, #1
06294     01 20 06 F6 | 	mov	local02, #1
06298     01 22 06 F6 | 	mov	local03, #1
0629c                 | ' 
0629c                 | ' dims(0)=1: dims(1)=1: dims(2)=1
0629c                 | ' 
0629c                 | ' if isname(lparts(ct).part$) then 
0629c     2E 00 00 FF 
062a0     08 E4 05 F1 | 	add	objptr, ##23560
062a4     F2 14 02 FB | 	rdlong	arg02, objptr
062a8     03 14 66 F0 | 	shl	arg02, #3
062ac     02 00 00 FF 
062b0     38 E4 85 F1 | 	sub	objptr, ##1080
062b4     F2 14 02 F1 | 	add	arg02, objptr
062b8     0A 13 02 FB | 	rdlong	arg01, arg02
062bc     2B 00 00 FF 
062c0     D0 E5 85 F1 | 	sub	objptr, ##22480
062c4     34 D3 BF FD | 	call	#_isname
062c8     00 FA 0D F2 | 	cmp	result1, #0 wz
062cc     30 05 90 AD |  if_e	jmp	#LR__0574
062d0     2E 00 00 FF 
062d4     08 E4 05 F1 | 	add	objptr, ##23560
062d8     F2 24 02 FB | 	rdlong	local04, objptr
062dc     03 24 66 F0 | 	shl	local04, #3
062e0     02 00 00 FF 
062e4     38 E4 85 F1 | 	sub	objptr, ##1080
062e8     F2 24 02 F1 | 	add	local04, objptr
062ec     12 27 02 FB | 	rdlong	local05, local04
062f0     01 28 66 F6 | 	neg	local06, #1
062f4                 | '   varname2$=lparts(ct).part$ 
062f4                 | '   j=-1
062f4                 | '   if varnum>0 then
062f4     04 E4 85 F1 | 	sub	objptr, #4
062f8     F2 2A 02 FB | 	rdlong	local07, objptr
062fc     2B 00 00 FF 
06300     CC E5 85 F1 | 	sub	objptr, ##22476
06304     01 2A 56 F2 | 	cmps	local07, #1 wc
06308     58 00 90 CD |  if_b	jmp	#LR__0552
0630c                 | '  '   print "in dim, varnum=";varnum
0630c                 | '     for i=0 to varnum-1
0630c     00 2C 06 F6 | 	mov	local08, #0
06310     2B 00 00 FF 
06314     CC E5 05 F1 | 	add	objptr, ##22476
06318     F2 2E 02 FB | 	rdlong	local09, objptr
0631c     2B 00 00 FF 
06320     CC E5 85 F1 | 	sub	objptr, ##22476
06324                 | LR__0550
06324     17 2D 52 F2 | 	cmps	local08, local09 wc
06328     38 00 90 3D |  if_ae	jmp	#LR__0551
0632c                 | '       if variables(i).name=varname2$ then j=i : exit
0632c     16 25 02 F6 | 	mov	local04, local08
06330     04 24 66 F0 | 	shl	local04, #4
06334     0B 00 00 FF 
06338     CC E5 05 F1 | 	add	objptr, ##6092
0633c     F2 24 02 F1 | 	add	local04, objptr
06340     12 13 02 FB | 	rdlong	arg01, local04
06344     13 15 02 F6 | 	mov	arg02, local05
06348     0B 00 00 FF 
0634c     CC E5 85 F1 | 	sub	objptr, ##6092
06350     1C F8 B0 FD | 	call	#__system___string_cmp
06354     00 FA 0D F2 | 	cmp	result1, #0 wz
06358     16 29 02 A6 |  if_e	mov	local06, local08
0635c     01 2C 06 51 |  if_ne	add	local08, #1
06360     C0 FF 9F 5D |  if_ne	jmp	#LR__0550
06364                 | LR__0551
06364                 | LR__0552
06364                 | '   if j<>-1 then printerror (42) : return 42
06364     FF FF 7F FF 
06368     FF 29 0E F2 | 	cmp	local06, ##-1 wz
0636c     10 00 90 AD |  if_e	jmp	#LR__0553
06370     2A 12 06 F6 | 	mov	arg01, #42
06374     B0 C2 B0 FD | 	call	#_printerror
06378     2A FA 05 F6 | 	mov	result1, #42
0637c     D8 05 90 FD | 	jmp	#LR__0576
06380                 | LR__0553
06380                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
06380     2E 00 00 FF 
06384     08 E4 05 F1 | 	add	objptr, ##23560
06388     F2 14 02 FB | 	rdlong	arg02, objptr
0638c     01 14 06 F1 | 	add	arg02, #1
06390     03 14 66 F0 | 	shl	arg02, #3
06394     02 00 00 FF 
06398     38 E4 85 F1 | 	sub	objptr, ##1080
0639c     F2 14 02 F1 | 	add	arg02, objptr
063a0     0A 13 02 FB | 	rdlong	arg01, arg02
063a4     27 01 00 FF 
063a8     98 14 06 F6 | 	mov	arg02, ##@LR__4288
063ac     2B 00 00 FF 
063b0     D0 E5 85 F1 | 	sub	objptr, ##22480
063b4     B8 F7 B0 FD | 	call	#__system___string_cmp
063b8     00 FA 0D F2 | 	cmp	result1, #0 wz
063bc     50 00 90 AD |  if_e	jmp	#LR__0554
063c0     2E 00 00 FF 
063c4     08 E4 05 F1 | 	add	objptr, ##23560
063c8     F2 2E 02 FB | 	rdlong	local09, objptr
063cc     01 2E 06 F1 | 	add	local09, #1
063d0     03 2E 66 F0 | 	shl	local09, #3
063d4     02 00 00 FF 
063d8     38 E4 85 F1 | 	sub	objptr, ##1080
063dc     F2 2E 02 F1 | 	add	local09, objptr
063e0     17 13 02 FB | 	rdlong	arg01, local09
063e4     27 01 00 FF 
063e8     9A 14 06 F6 | 	mov	arg02, ##@LR__4289
063ec     2B 00 00 FF 
063f0     D0 E5 85 F1 | 	sub	objptr, ##22480
063f4     78 F7 B0 FD | 	call	#__system___string_cmp
063f8     00 FA 0D F2 | 	cmp	result1, #0 wz
063fc     10 00 90 AD |  if_e	jmp	#LR__0554
06400     2B 12 06 F6 | 	mov	arg01, #43
06404     20 C2 B0 FD | 	call	#_printerror
06408     2B FA 05 F6 | 	mov	result1, #43
0640c     48 05 90 FD | 	jmp	#LR__0576
06410                 | LR__0554
06410                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
06410     2E 00 00 FF 
06414     08 E4 05 F1 | 	add	objptr, ##23560
06418     F2 14 02 FB | 	rdlong	arg02, objptr
0641c     01 14 06 F1 | 	add	arg02, #1
06420     03 14 66 F0 | 	shl	arg02, #3
06424     02 00 00 FF 
06428     38 E4 85 F1 | 	sub	objptr, ##1080
0642c     F2 14 02 F1 | 	add	arg02, objptr
06430     0A 13 02 FB | 	rdlong	arg01, arg02
06434     27 01 00 FF 
06438     9D 14 06 F6 | 	mov	arg02, ##@LR__4290
0643c     2B 00 00 FF 
06440     D0 E5 85 F1 | 	sub	objptr, ##22480
06444     28 F7 B0 FD | 	call	#__system___string_cmp
06448     00 FA 0D F2 | 	cmp	result1, #0 wz
0644c     2E 00 00 AF 
06450     08 E4 05 A1 |  if_e	add	objptr, ##23560
06454     F2 30 02 AB |  if_e	rdlong	local10, objptr
06458     2E 00 00 AF 
0645c     08 E4 85 A1 |  if_e	sub	objptr, ##23560
06460     01 30 06 A1 |  if_e	add	local10, #1
06464     7C 01 90 AD |  if_e	jmp	#LR__0560
06468     2E 00 00 FF 
0646c     08 E4 05 F1 | 	add	objptr, ##23560
06470     F2 30 02 FB | 	rdlong	local10, objptr
06474     2E 00 00 FF 
06478     08 E4 85 F1 | 	sub	objptr, ##23560
0647c     02 30 06 F1 | 	add	local10, #2
06480     00 32 06 F6 | 	mov	local11, #0
06484                 | '   l=ct+2 : m=0 : do
06484                 | LR__0555
06484                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
06484                 | '     if isdec(lparts(l).part$) then 
06484     18 25 02 F6 | 	mov	local04, local10
06488     03 24 66 F0 | 	shl	local04, #3
0648c     2B 00 00 FF 
06490     D0 E5 05 F1 | 	add	objptr, ##22480
06494     F2 24 02 F1 | 	add	local04, objptr
06498     12 13 02 FB | 	rdlong	arg01, local04
0649c     2B 00 00 FF 
064a0     D0 E5 85 F1 | 	sub	objptr, ##22480
064a4     F8 D7 BF FD | 	call	#_isdec
064a8     00 FA 0D F2 | 	cmp	result1, #0 wz
064ac     44 00 90 AD |  if_e	jmp	#LR__0556
064b0     19 35 02 F6 | 	mov	local12, local11
064b4     0F 35 06 F1 | 	add	local12, #local01
064b8     18 2F 02 F6 | 	mov	local09, local10
064bc     03 2E 66 F0 | 	shl	local09, #3
064c0     2B 00 00 FF 
064c4     D0 E5 05 F1 | 	add	objptr, ##22480
064c8     F2 2E 02 F1 | 	add	local09, objptr
064cc     17 13 02 FB | 	rdlong	arg01, local09
064d0     00 14 06 F6 | 	mov	arg02, #0
064d4     2B 00 00 FF 
064d8     D0 E5 85 F1 | 	sub	objptr, ##22480
064dc     F0 25 B1 FD | 	call	#__system____builtin_atoi
064e0     FD 36 02 F6 | 	mov	local13, result1
064e4                 | 	'.live	local13
064e4                 | 	'.live	local12
064e4     00 34 8E F9 | 	altd	local12, #0
064e8     1B 35 02 F6 | 	mov	local12, local13
064ec     01 32 06 F1 | 	add	local11, #1
064f0     10 00 90 FD | 	jmp	#LR__0557
064f4                 | LR__0556
064f4     11 12 06 F6 | 	mov	arg01, #17
064f8     2C C1 B0 FD | 	call	#_printerror
064fc                 | '       printerror (17)  : return(17)
064fc     11 FA 05 F6 | 	mov	result1, #17
06500     54 04 90 FD | 	jmp	#LR__0576
06504                 | LR__0557
06504                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
06504     18 25 02 F6 | 	mov	local04, local10
06508     01 24 06 F1 | 	add	local04, #1
0650c     03 24 66 F0 | 	shl	local04, #3
06510     2B 00 00 FF 
06514     D0 E5 05 F1 | 	add	objptr, ##22480
06518     F2 24 02 F1 | 	add	local04, objptr
0651c     12 13 02 FB | 	rdlong	arg01, local04
06520     27 01 00 FF 
06524     A0 14 06 F6 | 	mov	arg02, ##@LR__4291
06528     2B 00 00 FF 
0652c     D0 E5 85 F1 | 	sub	objptr, ##22480
06530     3C F6 B0 FD | 	call	#__system___string_cmp
06534     00 FA 0D F2 | 	cmp	result1, #0 wz
06538     48 00 90 AD |  if_e	jmp	#LR__0558
0653c     18 37 02 F6 | 	mov	local13, local10
06540     01 36 06 F1 | 	add	local13, #1
06544     03 36 66 F0 | 	shl	local13, #3
06548     2B 00 00 FF 
0654c     D0 E5 05 F1 | 	add	objptr, ##22480
06550     F2 36 02 F1 | 	add	local13, objptr
06554     1B 13 02 FB | 	rdlong	arg01, local13
06558     27 01 00 FF 
0655c     A2 14 06 F6 | 	mov	arg02, ##@LR__4292
06560     2B 00 00 FF 
06564     D0 E5 85 F1 | 	sub	objptr, ##22480
06568     04 F6 B0 FD | 	call	#__system___string_cmp
0656c     00 FA 0D F2 | 	cmp	result1, #0 wz
06570     10 00 90 AD |  if_e	jmp	#LR__0558
06574     2C 12 06 F6 | 	mov	arg01, #44
06578     AC C0 B0 FD | 	call	#_printerror
0657c     2C FA 05 F6 | 	mov	result1, #44
06580     D4 03 90 FD | 	jmp	#LR__0576
06584                 | LR__0558
06584     02 30 06 F1 | 	add	local10, #2
06588     18 25 02 F6 | 	mov	local04, local10
0658c     01 24 86 F1 | 	sub	local04, #1
06590     03 24 66 F0 | 	shl	local04, #3
06594     2B 00 00 FF 
06598     D0 E5 05 F1 | 	add	objptr, ##22480
0659c     F2 24 02 F1 | 	add	local04, objptr
065a0     12 13 02 FB | 	rdlong	arg01, local04
065a4     27 01 00 FF 
065a8     A4 14 06 F6 | 	mov	arg02, ##@LR__4293
065ac     2B 00 00 FF 
065b0     D0 E5 85 F1 | 	sub	objptr, ##22480
065b4     B8 F5 B0 FD | 	call	#__system___string_cmp
065b8     00 FA 0D F2 | 	cmp	result1, #0 wz
065bc     03 32 56 52 |  if_ne	cmps	local11, #3 wc
065c0     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0555
065c4                 | '   if m>3 then printerror(45): return(45)
065c4     04 32 56 F2 | 	cmps	local11, #4 wc
065c8     10 00 90 CD |  if_b	jmp	#LR__0559
065cc     2D 12 06 F6 | 	mov	arg01, #45
065d0     54 C0 B0 FD | 	call	#_printerror
065d4     2D FA 05 F6 | 	mov	result1, #45
065d8     7C 03 90 FD | 	jmp	#LR__0576
065dc                 | LR__0559
065dc     00 39 06 F6 | 	mov	local14, #256
065e0     0C 3A 06 F6 | 	mov	local15, #12
065e4                 | LR__0560
065e4                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
065e4                 | '   arraytype=array_no_type : esize=12
065e4                 | ' 1350 
065e4                 | '   if lparts(l).part$="as" then
065e4     18 25 02 F6 | 	mov	local04, local10
065e8     03 24 66 F0 | 	shl	local04, #3
065ec     2B 00 00 FF 
065f0     D0 E5 05 F1 | 	add	objptr, ##22480
065f4     F2 24 02 F1 | 	add	local04, objptr
065f8     12 13 02 FB | 	rdlong	arg01, local04
065fc     27 01 00 FF 
06600     A6 14 06 F6 | 	mov	arg02, ##@LR__4294
06604     2B 00 00 FF 
06608     D0 E5 85 F1 | 	sub	objptr, ##22480
0660c     60 F5 B0 FD | 	call	#__system___string_cmp
06610     00 FA 0D F2 | 	cmp	result1, #0 wz
06614     F8 01 90 5D |  if_ne	jmp	#LR__0575
06618                 | '     select case lparts(l+1).part$
06618     18 35 02 F6 | 	mov	local12, local10
0661c     01 34 06 F1 | 	add	local12, #1
06620     03 34 66 F0 | 	shl	local12, #3
06624     2B 00 00 FF 
06628     D0 E5 05 F1 | 	add	objptr, ##22480
0662c     F2 34 02 F1 | 	add	local12, objptr
06630     1A 3D 02 FB | 	rdlong	local16, local12
06634     27 01 00 FF 
06638     A9 14 06 F6 | 	mov	arg02, ##@LR__4295
0663c     1E 13 02 F6 | 	mov	arg01, local16
06640     2B 00 00 FF 
06644     D0 E5 85 F1 | 	sub	objptr, ##22480
06648     24 F5 B0 FD | 	call	#__system___string_cmp
0664c     00 FA 0D F2 | 	cmp	result1, #0 wz
06650     0C 01 90 AD |  if_e	jmp	#LR__0561
06654     27 01 00 FF 
06658     AE 14 06 F6 | 	mov	arg02, ##@LR__4296
0665c     1E 13 02 F6 | 	mov	arg01, local16
06660     0C F5 B0 FD | 	call	#__system___string_cmp
06664     00 FA 0D F2 | 	cmp	result1, #0 wz
06668     00 01 90 AD |  if_e	jmp	#LR__0562
0666c     27 01 00 FF 
06670     B4 14 06 F6 | 	mov	arg02, ##@LR__4297
06674     1E 13 02 F6 | 	mov	arg01, local16
06678     F4 F4 B0 FD | 	call	#__system___string_cmp
0667c     00 FA 0D F2 | 	cmp	result1, #0 wz
06680     F4 00 90 AD |  if_e	jmp	#LR__0563
06684     27 01 00 FF 
06688     BA 14 06 F6 | 	mov	arg02, ##@LR__4298
0668c     1E 13 02 F6 | 	mov	arg01, local16
06690     DC F4 B0 FD | 	call	#__system___string_cmp
06694     00 FA 0D F2 | 	cmp	result1, #0 wz
06698     E8 00 90 AD |  if_e	jmp	#LR__0564
0669c     27 01 00 FF 
066a0     C1 14 06 F6 | 	mov	arg02, ##@LR__4299
066a4     1E 13 02 F6 | 	mov	arg01, local16
066a8     C4 F4 B0 FD | 	call	#__system___string_cmp
066ac     00 FA 0D F2 | 	cmp	result1, #0 wz
066b0     DC 00 90 AD |  if_e	jmp	#LR__0565
066b4     27 01 00 FF 
066b8     C6 14 06 F6 | 	mov	arg02, ##@LR__4300
066bc     1E 13 02 F6 | 	mov	arg01, local16
066c0     AC F4 B0 FD | 	call	#__system___string_cmp
066c4     00 FA 0D F2 | 	cmp	result1, #0 wz
066c8     D0 00 90 AD |  if_e	jmp	#LR__0566
066cc     27 01 00 FF 
066d0     CE 14 06 F6 | 	mov	arg02, ##@LR__4301
066d4     1E 13 02 F6 | 	mov	arg01, local16
066d8     94 F4 B0 FD | 	call	#__system___string_cmp
066dc     00 FA 0D F2 | 	cmp	result1, #0 wz
066e0     C4 00 90 AD |  if_e	jmp	#LR__0567
066e4     27 01 00 FF 
066e8     D4 14 06 F6 | 	mov	arg02, ##@LR__4302
066ec     1E 13 02 F6 | 	mov	arg01, local16
066f0     7C F4 B0 FD | 	call	#__system___string_cmp
066f4     00 FA 0D F2 | 	cmp	result1, #0 wz
066f8     B8 00 90 AD |  if_e	jmp	#LR__0568
066fc     27 01 00 FF 
06700     DA 14 06 F6 | 	mov	arg02, ##@LR__4303
06704     1E 13 02 F6 | 	mov	arg01, local16
06708     64 F4 B0 FD | 	call	#__system___string_cmp
0670c     00 FA 0D F2 | 	cmp	result1, #0 wz
06710     AC 00 90 AD |  if_e	jmp	#LR__0569
06714     27 01 00 FF 
06718     E1 14 06 F6 | 	mov	arg02, ##@LR__4304
0671c     1E 13 02 F6 | 	mov	arg01, local16
06720     4C F4 B0 FD | 	call	#__system___string_cmp
06724     00 FA 0D F2 | 	cmp	result1, #0 wz
06728     A0 00 90 AD |  if_e	jmp	#LR__0570
0672c     27 01 00 FF 
06730     E8 14 06 F6 | 	mov	arg02, ##@LR__4305
06734     1E 13 02 F6 | 	mov	arg01, local16
06738     34 F4 B0 FD | 	call	#__system___string_cmp
0673c     00 FA 0D F2 | 	cmp	result1, #0 wz
06740     94 00 90 AD |  if_e	jmp	#LR__0571
06744     27 01 00 FF 
06748     EF 14 06 F6 | 	mov	arg02, ##@LR__4306
0674c     1E 13 02 F6 | 	mov	arg01, local16
06750     1C F4 B0 FD | 	call	#__system___string_cmp
06754     00 FA 0D F2 | 	cmp	result1, #0 wz
06758     88 00 90 AD |  if_e	jmp	#LR__0572
0675c     90 00 90 FD | 	jmp	#LR__0573
06760                 | LR__0561
06760     01 39 06 F6 | 	mov	local14, #257
06764     01 3A 06 F6 | 	mov	local15, #1
06768     A4 00 90 FD | 	jmp	#LR__0575
0676c                 | LR__0562
0676c     02 39 06 F6 | 	mov	local14, #258
06770     01 3A 06 F6 | 	mov	local15, #1
06774     98 00 90 FD | 	jmp	#LR__0575
06778                 | LR__0563
06778     03 39 06 F6 | 	mov	local14, #259
0677c     02 3A 06 F6 | 	mov	local15, #2
06780     8C 00 90 FD | 	jmp	#LR__0575
06784                 | LR__0564
06784     04 39 06 F6 | 	mov	local14, #260
06788     02 3A 06 F6 | 	mov	local15, #2
0678c     80 00 90 FD | 	jmp	#LR__0575
06790                 | LR__0565
06790     05 39 06 F6 | 	mov	local14, #261
06794     04 3A 06 F6 | 	mov	local15, #4
06798     74 00 90 FD | 	jmp	#LR__0575
0679c                 | LR__0566
0679c     05 39 06 F6 | 	mov	local14, #261
067a0     04 3A 06 F6 | 	mov	local15, #4
067a4     68 00 90 FD | 	jmp	#LR__0575
067a8                 | LR__0567
067a8     06 39 06 F6 | 	mov	local14, #262
067ac     04 3A 06 F6 | 	mov	local15, #4
067b0     5C 00 90 FD | 	jmp	#LR__0575
067b4                 | LR__0568
067b4     07 39 06 F6 | 	mov	local14, #263
067b8     08 3A 06 F6 | 	mov	local15, #8
067bc     50 00 90 FD | 	jmp	#LR__0575
067c0                 | LR__0569
067c0     08 39 06 F6 | 	mov	local14, #264
067c4     08 3A 06 F6 | 	mov	local15, #8
067c8     44 00 90 FD | 	jmp	#LR__0575
067cc                 | LR__0570
067cc     09 39 06 F6 | 	mov	local14, #265
067d0     04 3A 06 F6 | 	mov	local15, #4
067d4     38 00 90 FD | 	jmp	#LR__0575
067d8                 | LR__0571
067d8     0A 39 06 F6 | 	mov	local14, #266
067dc     08 3A 06 F6 | 	mov	local15, #8
067e0     2C 00 90 FD | 	jmp	#LR__0575
067e4                 | LR__0572
067e4     0B 39 06 F6 | 	mov	local14, #267
067e8     04 3A 06 F6 | 	mov	local15, #4
067ec     20 00 90 FD | 	jmp	#LR__0575
067f0                 | LR__0573
067f0     2F 12 06 F6 | 	mov	arg01, #47
067f4     30 BE B0 FD | 	call	#_printerror
067f8     2F FA 05 F6 | 	mov	result1, #47
067fc     58 01 90 FD | 	jmp	#LR__0576
06800                 | LR__0574
06800     2E 12 06 F6 | 	mov	arg01, #46
06804     20 BE B0 FD | 	call	#_printerror
06808                 | '   printerror(46): return 46
06808     2E FA 05 F6 | 	mov	result1, #46
0680c     48 01 90 FD | 	jmp	#LR__0576
06810                 | LR__0575
06810     0F 3B 02 FD | 	qmul	local15, local01
06814     18 2A 62 FD | 	getqx	local07
06818     10 2B 02 FD | 	qmul	local07, local02
0681c     18 3C 62 FD | 	getqx	local16
06820     11 3D 02 FD | 	qmul	local16, local03
06824     52 00 00 FF 
06828     3C E4 05 F1 | 	add	objptr, ##42044
0682c     F2 3E 02 FB | 	rdlong	local17, objptr
06830     1C 15 02 F6 | 	mov	arg02, local14
06834     01 16 06 F6 | 	mov	arg03, #1
06838     00 18 06 F6 | 	mov	arg04, #0
0683c                 | '     return fill(addr, pattern, count, listPtr, 4)
0683c     04 1A 06 F6 | 	mov	arg05, #4
06840     18 3C 62 FD | 	getqx	local16
06844     1E 3F 82 F1 | 	sub	local17, local16
06848     10 3E 86 F1 | 	sub	local17, #16
0684c     F2 3E 62 FC | 	wrlong	local17, objptr
06850     1F 13 02 F6 | 	mov	arg01, local17
06854     46 00 00 FF 
06858     7C E5 85 F1 | 	sub	objptr, ##36220
0685c     34 E9 B0 FD | 	call	#_psram_spin2_fill
06860     1F 13 02 F6 | 	mov	arg01, local17
06864     02 12 06 F1 | 	add	arg01, #2
06868     1D 15 02 F6 | 	mov	arg02, local15
0686c     01 16 06 F6 | 	mov	arg03, #1
06870     00 18 06 F6 | 	mov	arg04, #0
06874                 | '     return fill(addr, pattern, count, listPtr, 1)
06874     01 1A 06 F6 | 	mov	arg05, #1
06878     18 E9 B0 FD | 	call	#_psram_spin2_fill
0687c     1F 13 02 F6 | 	mov	arg01, local17
06880     04 12 06 F1 | 	add	arg01, #4
06884     0F 15 02 F6 | 	mov	arg02, local01
06888     01 16 06 F6 | 	mov	arg03, #1
0688c     00 18 06 F6 | 	mov	arg04, #0
06890                 | '     return fill(addr, pattern, count, listPtr, 4)
06890     04 1A 06 F6 | 	mov	arg05, #4
06894     FC E8 B0 FD | 	call	#_psram_spin2_fill
06898     1F 13 02 F6 | 	mov	arg01, local17
0689c     08 12 06 F1 | 	add	arg01, #8
068a0     10 15 02 F6 | 	mov	arg02, local02
068a4     01 16 06 F6 | 	mov	arg03, #1
068a8     00 18 06 F6 | 	mov	arg04, #0
068ac                 | '     return fill(addr, pattern, count, listPtr, 4)
068ac     04 1A 06 F6 | 	mov	arg05, #4
068b0     E0 E8 B0 FD | 	call	#_psram_spin2_fill
068b4     1F 13 02 F6 | 	mov	arg01, local17
068b8     0C 12 06 F1 | 	add	arg01, #12
068bc     11 15 02 F6 | 	mov	arg02, local03
068c0     01 16 06 F6 | 	mov	arg03, #1
068c4     00 18 06 F6 | 	mov	arg04, #0
068c8                 | '     return fill(addr, pattern, count, listPtr, 4)
068c8     04 1A 06 F6 | 	mov	arg05, #4
068cc     C4 E8 B0 FD | 	call	#_psram_spin2_fill
068d0     20 00 00 FF 
068d4     0C E5 05 F1 | 	add	objptr, ##16652
068d8     F2 24 02 FB | 	rdlong	local04, objptr
068dc     04 24 66 F0 | 	shl	local04, #4
068e0     20 00 00 FF 
068e4     00 E4 85 F1 | 	sub	objptr, ##16384
068e8     F2 24 02 F1 | 	add	local04, objptr
068ec     12 27 62 FC | 	wrlong	local05, local04
068f0     20 00 00 FF 
068f4     00 E4 05 F1 | 	add	objptr, ##16384
068f8     F2 24 02 FB | 	rdlong	local04, objptr
068fc     04 24 66 F0 | 	shl	local04, #4
06900     20 00 00 FF 
06904     00 E4 85 F1 | 	sub	objptr, ##16384
06908     F2 24 02 F1 | 	add	local04, objptr
0690c     04 24 06 F1 | 	add	local04, #4
06910     12 3F 62 FC | 	wrlong	local17, local04
06914     20 00 00 FF 
06918     00 E4 05 F1 | 	add	objptr, ##16384
0691c     F2 24 02 FB | 	rdlong	local04, objptr
06920     04 24 66 F0 | 	shl	local04, #4
06924     20 00 00 FF 
06928     00 E4 85 F1 | 	sub	objptr, ##16384
0692c     F2 24 02 F1 | 	add	local04, objptr
06930     0C 24 06 F1 | 	add	local04, #12
06934     12 39 62 FC | 	wrlong	local14, local04
06938     20 00 00 FF 
0693c     00 E4 05 F1 | 	add	objptr, ##16384
06940     F2 2A 02 FB | 	rdlong	local07, objptr
06944     01 2A 06 F1 | 	add	local07, #1
06948     F2 2A 62 FC | 	wrlong	local07, objptr
0694c     2B 00 00 FF 
06950     CC E5 85 F1 | 	sub	objptr, ##22476
06954                 | ' 'print dims(0),dims(1),dims(2),arraytype
06954                 | ' 
06954                 | ' arraysize=esize*dims(0)*dims(1)*dims(2)
06954                 | ' arrayptr=memtop-arraysize-16
06954                 | ' memtop=arrayptr
06954                 | ' 
06954                 | ' pslpoke arrayptr,arraytype
06954                 | ' pspoke arrayptr+2,esize
06954                 | ' pslpoke arrayptr+4,dims(0)
06954                 | ' pslpoke arrayptr+8,dims(1)
06954                 | ' pslpoke arrayptr+12,dims(2)
06954                 | ' 
06954                 | ' variables(varnum).name=varname2$
06954                 | ' variables(varnum).value.uresult=arrayptr
06954                 | ' variables(varnum).vartype=arraytype
06954                 | ' varnum+=1
06954                 | ' 
06954                 | ' return 0
06954     00 FA 05 F6 | 	mov	result1, #0
06958                 | LR__0576
06958     A7 F0 03 F6 | 	mov	ptra, fp
0695c     B2 00 A0 FD | 	call	#popregs_
06960                 | _compile_dim_ret
06960     2D 00 64 FD | 	ret
06964                 | 
06964                 | ' 
06964                 | ' 
06964                 | ' function compile_for() as ulong  
06964                 | _compile_for
06964     07 4A 05 F6 | 	mov	COUNT_, #7
06968     A8 00 A0 FD | 	call	#pushregs_
0696c                 | ' 
0696c                 | ' 
0696c                 | ' 
0696c                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
0696c     2E 00 00 FF 
06970     08 E4 05 F1 | 	add	objptr, ##23560
06974     F2 14 02 FB | 	rdlong	arg02, objptr
06978     01 14 06 F1 | 	add	arg02, #1
0697c     03 14 66 F0 | 	shl	arg02, #3
06980     02 00 00 FF 
06984     38 E4 85 F1 | 	sub	objptr, ##1080
06988     F2 14 02 F1 | 	add	arg02, objptr
0698c     0A 13 02 FB | 	rdlong	arg01, arg02
06990     2B 00 00 FF 
06994     D0 E5 85 F1 | 	sub	objptr, ##22480
06998                 | ' 
06998                 | ' select case s
06998     26 01 00 FF 
0699c     BA 14 06 F6 | 	mov	arg02, ##@LR__4176
069a0     CC F1 B0 FD | 	call	#__system___string_cmp
069a4     00 FA 0D F2 | 	cmp	result1, #0 wz
069a8     1B FA 05 A6 |  if_e	mov	result1, #27
069ac     00 FA 05 56 |  if_ne	mov	result1, #0
069b0     00 FA 0D F2 | 	cmp	result1, #0 wz
069b4     0C 00 90 AD |  if_e	jmp	#LR__0580
069b8     05 12 06 F6 | 	mov	arg01, #5
069bc     A4 E3 BF FD | 	call	#_compile_immediate_assign
069c0     10 00 90 FD | 	jmp	#LR__0581
069c4                 | LR__0580
069c4     20 12 06 F6 | 	mov	arg01, #32
069c8     14 E8 BF FD | 	call	#_compile_error
069cc     20 FA 05 F6 | 	mov	result1, #32
069d0     AC 02 90 FD | 	jmp	#LR__0586
069d4                 | LR__0581
069d4     41 00 00 FF 
069d8     40 E4 05 F1 | 	add	objptr, ##33344
069dc     F2 12 02 FB | 	rdlong	arg01, objptr
069e0     09 25 02 F6 | 	mov	local04, arg01
069e4     01 24 86 F1 | 	sub	local04, #1
069e8     12 15 02 F6 | 	mov	arg02, local04
069ec     01 14 66 F0 | 	shl	arg02, #1
069f0     12 15 02 F1 | 	add	arg02, local04
069f4     02 14 66 F0 | 	shl	arg02, #2
069f8     03 00 00 FF 
069fc     00 E4 85 F1 | 	sub	objptr, ##1536
06a00     F2 14 02 F1 | 	add	arg02, objptr
06a04     0A 1F 02 FB | 	rdlong	local01, arg02
06a08     04 14 06 F1 | 	add	arg02, #4
06a0c     0A 27 02 FB | 	rdlong	local05, arg02
06a10     01 12 86 F1 | 	sub	arg01, #1
06a14     09 29 02 F6 | 	mov	local06, arg01
06a18     01 28 66 F0 | 	shl	local06, #1
06a1c     09 29 02 F1 | 	add	local06, arg01
06a20     02 28 66 F0 | 	shl	local06, #2
06a24     F2 28 02 F1 | 	add	local06, objptr
06a28     08 28 06 F1 | 	add	local06, #8
06a2c     14 13 02 FB | 	rdlong	arg01, local06
06a30     13 21 02 F6 | 	mov	local02, local05
06a34     09 23 02 F6 | 	mov	local03, arg01
06a38                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
06a38                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
06a38     17 22 0E F2 | 	cmp	local03, #23 wz
06a3c     3E 00 00 FF 
06a40     40 E4 85 F1 | 	sub	objptr, ##31808
06a44     10 00 90 AD |  if_e	jmp	#LR__0582
06a48     22 12 06 F6 | 	mov	arg01, #34
06a4c     90 E7 BF FD | 	call	#_compile_error
06a50     22 FA 05 F6 | 	mov	result1, #34
06a54     28 02 90 FD | 	jmp	#LR__0586
06a58                 | LR__0582
06a58     0F 2B 02 F6 | 	mov	local07, local01
06a5c                 | ' varnum=t1.result.uresult
06a5c                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
06a5c     2E 00 00 FF 
06a60     08 E4 05 F1 | 	add	objptr, ##23560
06a64     F2 24 02 FB | 	rdlong	local04, objptr
06a68     03 24 66 F0 | 	shl	local04, #3
06a6c     02 00 00 FF 
06a70     38 E4 85 F1 | 	sub	objptr, ##1080
06a74     F2 24 02 F1 | 	add	local04, objptr
06a78     12 13 02 FB | 	rdlong	arg01, local04
06a7c     27 01 00 FF 
06a80     F6 14 06 F6 | 	mov	arg02, ##@LR__4307
06a84     2B 00 00 FF 
06a88     D0 E5 85 F1 | 	sub	objptr, ##22480
06a8c     E0 F0 B0 FD | 	call	#__system___string_cmp
06a90     00 FA 0D F2 | 	cmp	result1, #0 wz
06a94     10 00 90 AD |  if_e	jmp	#LR__0583
06a98     21 12 06 F6 | 	mov	arg01, #33
06a9c     40 E7 BF FD | 	call	#_compile_error
06aa0     21 FA 05 F6 | 	mov	result1, #33
06aa4     D8 01 90 FD | 	jmp	#LR__0586
06aa8                 | LR__0583
06aa8     2E 00 00 FF 
06aac     08 E4 05 F1 | 	add	objptr, ##23560
06ab0     F2 28 02 FB | 	rdlong	local06, objptr
06ab4     01 28 06 F1 | 	add	local06, #1
06ab8     F2 28 62 FC | 	wrlong	local06, objptr
06abc     2E 00 00 FF 
06ac0     08 E4 85 F1 | 	sub	objptr, ##23560
06ac4     98 0B B0 FD | 	call	#_expr
06ac8                 | ' ct+=1
06ac8                 | ' expr()  ' there is "to" value pushed on the stack
06ac8                 | ' if lparts(ct).part$="step" then 
06ac8     2E 00 00 FF 
06acc     08 E4 05 F1 | 	add	objptr, ##23560
06ad0     F2 24 02 FB | 	rdlong	local04, objptr
06ad4     03 24 66 F0 | 	shl	local04, #3
06ad8     02 00 00 FF 
06adc     38 E4 85 F1 | 	sub	objptr, ##1080
06ae0     F2 24 02 F1 | 	add	local04, objptr
06ae4     12 13 02 FB | 	rdlong	arg01, local04
06ae8     27 01 00 FF 
06aec     F9 14 06 F6 | 	mov	arg02, ##@LR__4308
06af0     2B 00 00 FF 
06af4     D0 E5 85 F1 | 	sub	objptr, ##22480
06af8     74 F0 B0 FD | 	call	#__system___string_cmp
06afc     00 FA 0D F2 | 	cmp	result1, #0 wz
06b00     24 00 90 5D |  if_ne	jmp	#LR__0584
06b04     2E 00 00 FF 
06b08     08 E4 05 F1 | 	add	objptr, ##23560
06b0c     F2 28 02 FB | 	rdlong	local06, objptr
06b10     01 28 06 F1 | 	add	local06, #1
06b14     F2 28 62 FC | 	wrlong	local06, objptr
06b18     2E 00 00 FF 
06b1c     08 E4 85 F1 | 	sub	objptr, ##23560
06b20     3C 0B B0 FD | 	call	#_expr
06b24     78 00 90 FD | 	jmp	#LR__0585
06b28                 | LR__0584
06b28     41 00 00 FF 
06b2c     40 E4 05 F1 | 	add	objptr, ##33344
06b30     F2 28 02 FB | 	rdlong	local06, objptr
06b34     14 27 02 F6 | 	mov	local05, local06
06b38     01 26 66 F0 | 	shl	local05, #1
06b3c     14 27 02 F1 | 	add	local05, local06
06b40     02 26 66 F0 | 	shl	local05, #2
06b44     03 00 00 FF 
06b48     00 E4 85 F1 | 	sub	objptr, ##1536
06b4c     F2 26 02 F1 | 	add	local05, objptr
06b50     08 26 06 F1 | 	add	local05, #8
06b54     13 39 68 FC | 	wrlong	#28, local05
06b58     03 00 00 FF 
06b5c     00 E4 05 F1 | 	add	objptr, ##1536
06b60     F2 28 02 FB | 	rdlong	local06, objptr
06b64     14 27 02 F6 | 	mov	local05, local06
06b68     01 26 66 F0 | 	shl	local05, #1
06b6c     14 27 02 F1 | 	add	local05, local06
06b70     02 26 66 F0 | 	shl	local05, #2
06b74     03 00 00 FF 
06b78     00 E4 85 F1 | 	sub	objptr, ##1536
06b7c     F2 26 02 F1 | 	add	local05, objptr
06b80     13 03 68 FC | 	wrlong	#1, local05
06b84     03 00 00 FF 
06b88     00 E4 05 F1 | 	add	objptr, ##1536
06b8c     F2 28 02 FB | 	rdlong	local06, objptr
06b90     01 28 06 F1 | 	add	local06, #1
06b94     F2 28 62 FC | 	wrlong	local06, objptr
06b98     41 00 00 FF 
06b9c     40 E4 85 F1 | 	sub	objptr, ##33344
06ba0                 | LR__0585
06ba0     41 00 00 FF 
06ba4     40 E4 05 F1 | 	add	objptr, ##33344
06ba8     F2 28 02 FB | 	rdlong	local06, objptr
06bac     14 27 02 F6 | 	mov	local05, local06
06bb0     01 26 66 F0 | 	shl	local05, #1
06bb4     14 27 02 F1 | 	add	local05, local06
06bb8     02 26 66 F0 | 	shl	local05, #2
06bbc     03 00 00 FF 
06bc0     00 E4 85 F1 | 	sub	objptr, ##1536
06bc4     F2 26 02 F1 | 	add	local05, objptr
06bc8     08 26 06 F1 | 	add	local05, #8
06bcc     13 39 68 FC | 	wrlong	#28, local05
06bd0     03 00 00 FF 
06bd4     00 E4 05 F1 | 	add	objptr, ##1536
06bd8     F2 28 02 FB | 	rdlong	local06, objptr
06bdc     14 27 02 F6 | 	mov	local05, local06
06be0     01 26 66 F0 | 	shl	local05, #1
06be4     14 27 02 F1 | 	add	local05, local06
06be8     02 26 66 F0 | 	shl	local05, #2
06bec     03 00 00 FF 
06bf0     00 E4 85 F1 | 	sub	objptr, ##1536
06bf4     F2 26 02 F1 | 	add	local05, objptr
06bf8     13 2B 62 FC | 	wrlong	local07, local05
06bfc     03 00 00 FF 
06c00     00 E4 05 F1 | 	add	objptr, ##1536
06c04     F2 2A 02 FB | 	rdlong	local07, objptr
06c08     01 2A 06 F1 | 	add	local07, #1
06c0c     F2 2A 62 FC | 	wrlong	local07, objptr
06c10     15 29 02 F6 | 	mov	local06, local07
06c14     01 28 66 F0 | 	shl	local06, #1
06c18     15 29 02 F1 | 	add	local06, local07
06c1c     02 28 66 F0 | 	shl	local06, #2
06c20     03 00 00 FF 
06c24     00 E4 85 F1 | 	sub	objptr, ##1536
06c28     F2 28 02 F1 | 	add	local06, objptr
06c2c     08 28 06 F1 | 	add	local06, #8
06c30     14 95 68 FC | 	wrlong	#74, local06
06c34     03 00 00 FF 
06c38     00 E4 05 F1 | 	add	objptr, ##1536
06c3c     F2 2A 02 FB | 	rdlong	local07, objptr
06c40     15 29 02 F6 | 	mov	local06, local07
06c44     01 28 66 F0 | 	shl	local06, #1
06c48     15 29 02 F1 | 	add	local06, local07
06c4c     02 28 66 F0 | 	shl	local06, #2
06c50     03 00 00 FF 
06c54     00 E4 85 F1 | 	sub	objptr, ##1536
06c58     F2 28 02 F1 | 	add	local06, objptr
06c5c     14 01 68 FC | 	wrlong	#0, local06
06c60     03 00 00 FF 
06c64     00 E4 05 F1 | 	add	objptr, ##1536
06c68     F2 2A 02 FB | 	rdlong	local07, objptr
06c6c     01 2A 06 F1 | 	add	local07, #1
06c70     F2 2A 62 FC | 	wrlong	local07, objptr
06c74     41 00 00 FF 
06c78     40 E4 85 F1 | 	sub	objptr, ##33344
06c7c                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
06c7c                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
06c7c                 | ' 
06c7c                 | ' 
06c7c                 | ' return 0
06c7c     00 FA 05 F6 | 	mov	result1, #0
06c80                 | LR__0586
06c80     A7 F0 03 F6 | 	mov	ptra, fp
06c84     B2 00 A0 FD | 	call	#popregs_
06c88                 | _compile_for_ret
06c88     2D 00 64 FD | 	ret
06c8c                 | 
06c8c                 | ' 
06c8c                 | ' 
06c8c                 | ' sub do_for()
06c8c                 | _do_for
06c8c     05 4A 05 F6 | 	mov	COUNT_, #5
06c90     A8 00 A0 FD | 	call	#pushregs_
06c94     50 00 00 FF 
06c98     9C E5 05 F1 | 	add	objptr, ##41372
06c9c     F2 24 02 FB | 	rdlong	local04, objptr
06ca0     01 24 06 F1 | 	add	local04, #1
06ca4     F2 24 62 FC | 	wrlong	local04, objptr
06ca8     50 00 00 FF 
06cac     9C E5 85 F1 | 	sub	objptr, ##41372
06cb0     5C 1E B0 FD | 	call	#_pop
06cb4     FD 1E 02 F6 | 	mov	local01, result1
06cb8     FE 20 02 F6 | 	mov	local02, result2
06cbc     FF 22 02 F6 | 	mov	local03, result3
06cc0     50 00 00 FF 
06cc4     9C E5 05 F1 | 	add	objptr, ##41372
06cc8     F2 24 02 FB | 	rdlong	local04, objptr
06ccc     12 27 02 F6 | 	mov	local05, local04
06cd0     02 26 66 F0 | 	shl	local05, #2
06cd4     12 27 02 F1 | 	add	local05, local04
06cd8     02 26 66 F0 | 	shl	local05, #2
06cdc     07 00 00 FF 
06ce0     40 E5 85 F1 | 	sub	objptr, ##3904
06ce4     F2 26 02 F1 | 	add	local05, objptr
06ce8     08 26 06 F1 | 	add	local05, #8
06cec     13 1F 62 FC | 	wrlong	local01, local05
06cf0     49 00 00 FF 
06cf4     5C E4 85 F1 | 	sub	objptr, ##37468
06cf8     14 1E B0 FD | 	call	#_pop
06cfc     FD 1E 02 F6 | 	mov	local01, result1
06d00     FE 20 02 F6 | 	mov	local02, result2
06d04     FF 22 02 F6 | 	mov	local03, result3
06d08     50 00 00 FF 
06d0c     9C E5 05 F1 | 	add	objptr, ##41372
06d10     F2 24 02 FB | 	rdlong	local04, objptr
06d14     12 27 02 F6 | 	mov	local05, local04
06d18     02 26 66 F0 | 	shl	local05, #2
06d1c     12 27 02 F1 | 	add	local05, local04
06d20     02 26 66 F0 | 	shl	local05, #2
06d24     07 00 00 FF 
06d28     40 E5 85 F1 | 	sub	objptr, ##3904
06d2c     F2 26 02 F1 | 	add	local05, objptr
06d30     0C 26 06 F1 | 	add	local05, #12
06d34     13 1F 62 FC | 	wrlong	local01, local05
06d38     49 00 00 FF 
06d3c     5C E4 85 F1 | 	sub	objptr, ##37468
06d40     CC 1D B0 FD | 	call	#_pop
06d44     FD 1E 02 F6 | 	mov	local01, result1
06d48     FE 20 02 F6 | 	mov	local02, result2
06d4c     FF 22 02 F6 | 	mov	local03, result3
06d50     50 00 00 FF 
06d54     9C E5 05 F1 | 	add	objptr, ##41372
06d58     F2 24 02 FB | 	rdlong	local04, objptr
06d5c     12 27 02 F6 | 	mov	local05, local04
06d60     02 26 66 F0 | 	shl	local05, #2
06d64     12 27 02 F1 | 	add	local05, local04
06d68     02 26 66 F0 | 	shl	local05, #2
06d6c     07 00 00 FF 
06d70     40 E5 85 F1 | 	sub	objptr, ##3904
06d74     F2 26 02 F1 | 	add	local05, objptr
06d78     10 26 06 F1 | 	add	local05, #16
06d7c     13 1F 62 FC | 	wrlong	local01, local05
06d80                 | ' fortop+=1
06d80                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
06d80                 | ' 'if i> maxfor then printerror(36) : return
06d80                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
06d80                 | ' t1=pop() : fortable(fortop).stepval=t1.result.iresult
06d80                 | ' t1=pop() : fortable(fortop).endval=t1.result.iresult
06d80                 | ' if compiledline(lineptr_e).result_type=token_end then
06d80     08 00 00 FF 
06d84     18 E4 85 F1 | 	sub	objptr, ##4120
06d88     F2 1E 02 FB | 	rdlong	local01, objptr
06d8c     0F 27 02 F6 | 	mov	local05, local01
06d90     01 26 66 F0 | 	shl	local05, #1
06d94     0F 27 02 F1 | 	add	local05, local01
06d98     02 26 66 F0 | 	shl	local05, #2
06d9c     03 00 00 FF 
06da0     04 E4 85 F1 | 	sub	objptr, ##1540
06da4     F2 26 02 F1 | 	add	local05, objptr
06da8     08 26 06 F1 | 	add	local05, #8
06dac     13 27 02 FB | 	rdlong	local05, local05
06db0     FE 27 0E F2 | 	cmp	local05, #510 wz
06db4     3E 00 00 FF 
06db8     40 E4 85 F1 | 	sub	objptr, ##31808
06dbc     70 00 90 5D |  if_ne	jmp	#LR__0590
06dc0     50 00 00 FF 
06dc4     9C E5 05 F1 | 	add	objptr, ##41372
06dc8     F2 1E 02 FB | 	rdlong	local01, objptr
06dcc     0F 27 02 F6 | 	mov	local05, local01
06dd0     02 26 66 F0 | 	shl	local05, #2
06dd4     0F 27 02 F1 | 	add	local05, local01
06dd8     02 26 66 F0 | 	shl	local05, #2
06ddc     07 00 00 FF 
06de0     40 E5 85 F1 | 	sub	objptr, ##3904
06de4     F2 26 02 F1 | 	add	local05, objptr
06de8     07 00 00 FF 
06dec     18 E5 05 F1 | 	add	objptr, ##3864
06df0     F2 1E 02 FB | 	rdlong	local01, objptr
06df4     13 1F 62 FC | 	wrlong	local01, local05
06df8     28 E4 05 F1 | 	add	objptr, #40
06dfc     F2 1E 02 FB | 	rdlong	local01, objptr
06e00     0F 27 02 F6 | 	mov	local05, local01
06e04     02 26 66 F0 | 	shl	local05, #2
06e08     0F 27 02 F1 | 	add	local05, local01
06e0c     02 26 66 F0 | 	shl	local05, #2
06e10     07 00 00 FF 
06e14     40 E5 85 F1 | 	sub	objptr, ##3904
06e18     F2 26 02 F1 | 	add	local05, objptr
06e1c     04 26 06 F1 | 	add	local05, #4
06e20     13 01 68 FC | 	wrlong	#0, local05
06e24     49 00 00 FF 
06e28     5C E4 85 F1 | 	sub	objptr, ##37468
06e2c     7C 00 90 FD | 	jmp	#LR__0591
06e30                 | LR__0590
06e30     50 00 00 FF 
06e34     9C E5 05 F1 | 	add	objptr, ##41372
06e38     F2 1E 02 FB | 	rdlong	local01, objptr
06e3c     0F 27 02 F6 | 	mov	local05, local01
06e40     02 26 66 F0 | 	shl	local05, #2
06e44     0F 27 02 F1 | 	add	local05, local01
06e48     02 26 66 F0 | 	shl	local05, #2
06e4c     07 00 00 FF 
06e50     40 E5 85 F1 | 	sub	objptr, ##3904
06e54     F2 26 02 F1 | 	add	local05, objptr
06e58     07 00 00 FF 
06e5c     20 E5 05 F1 | 	add	objptr, ##3872
06e60     F2 1E 02 FB | 	rdlong	local01, objptr
06e64     13 1F 62 FC | 	wrlong	local01, local05
06e68     20 E4 05 F1 | 	add	objptr, #32
06e6c     F2 1E 02 FB | 	rdlong	local01, objptr
06e70     0F 27 02 F6 | 	mov	local05, local01
06e74     02 26 66 F0 | 	shl	local05, #2
06e78     0F 27 02 F1 | 	add	local05, local01
06e7c     02 26 66 F0 | 	shl	local05, #2
06e80     07 00 00 FF 
06e84     40 E5 85 F1 | 	sub	objptr, ##3904
06e88     F2 26 02 F1 | 	add	local05, objptr
06e8c     08 00 00 FF 
06e90     18 E4 85 F1 | 	sub	objptr, ##4120
06e94     F2 1E 02 FB | 	rdlong	local01, objptr
06e98     41 00 00 FF 
06e9c     44 E4 85 F1 | 	sub	objptr, ##33348
06ea0     01 1E 06 F1 | 	add	local01, #1
06ea4     04 26 06 F1 | 	add	local05, #4
06ea8     13 1F 62 FC | 	wrlong	local01, local05
06eac                 | LR__0591
06eac     A7 F0 03 F6 | 	mov	ptra, fp
06eb0     B2 00 A0 FD | 	call	#popregs_
06eb4                 | _do_for_ret
06eb4     2D 00 64 FD | 	ret
06eb8                 | 
06eb8                 | ' 
06eb8                 | ' ' now do_next todo
06eb8                 | ' 
06eb8                 | ' sub do_next()
06eb8                 | _do_next
06eb8     04 4A 05 F6 | 	mov	COUNT_, #4
06ebc     A8 00 A0 FD | 	call	#pushregs_
06ec0     4C 1C B0 FD | 	call	#_pop
06ec4     FD 1E 02 F6 | 	mov	local01, result1
06ec8     FE 20 02 F6 | 	mov	local02, result2
06ecc     FF 22 02 F6 | 	mov	local03, result3
06ed0                 | ' 
06ed0                 | ' t1=pop() :varnum=t1.result.uresult
06ed0                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
06ed0     50 00 00 FF 
06ed4     9C E5 05 F1 | 	add	objptr, ##41372
06ed8     F2 12 02 FB | 	rdlong	arg01, objptr
06edc     09 25 02 F6 | 	mov	local04, arg01
06ee0     02 24 66 F0 | 	shl	local04, #2
06ee4     09 25 02 F1 | 	add	local04, arg01
06ee8     02 24 66 F0 | 	shl	local04, #2
06eec     07 00 00 FF 
06ef0     40 E5 85 F1 | 	sub	objptr, ##3904
06ef4     F2 24 02 F1 | 	add	local04, objptr
06ef8     08 24 06 F1 | 	add	local04, #8
06efc     12 25 02 FB | 	rdlong	local04, local04
06f00     0F 25 0A F2 | 	cmp	local04, local01 wz
06f04     49 00 00 FF 
06f08     5C E4 85 F1 | 	sub	objptr, ##37468
06f0c     0C 00 90 AD |  if_e	jmp	#LR__0600
06f10     25 12 06 F6 | 	mov	arg01, #37
06f14     10 B7 B0 FD | 	call	#_printerror
06f18     28 02 90 FD | 	jmp	#LR__0604
06f1c                 | LR__0600
06f1c     50 00 00 FF 
06f20     9C E5 05 F1 | 	add	objptr, ##41372
06f24     F2 12 02 FB | 	rdlong	arg01, objptr
06f28     09 25 02 F6 | 	mov	local04, arg01
06f2c     02 24 66 F0 | 	shl	local04, #2
06f30     09 25 02 F1 | 	add	local04, arg01
06f34     02 24 66 F0 | 	shl	local04, #2
06f38     07 00 00 FF 
06f3c     40 E5 85 F1 | 	sub	objptr, ##3904
06f40     F2 24 02 F1 | 	add	local04, objptr
06f44     0C 24 06 F1 | 	add	local04, #12
06f48     12 25 02 FB | 	rdlong	local04, local04
06f4c     0F 13 02 F6 | 	mov	arg01, local01
06f50     04 12 66 F0 | 	shl	arg01, #4
06f54     3D 00 00 FF 
06f58     90 E4 85 F1 | 	sub	objptr, ##31376
06f5c     F2 12 02 F1 | 	add	arg01, objptr
06f60     0F FF 01 F6 | 	mov	result3, local01
06f64     04 FE 65 F0 | 	shl	result3, #4
06f68     F2 FE 01 F1 | 	add	result3, objptr
06f6c     04 FE 05 F1 | 	add	result3, #4
06f70     FF FE 01 FB | 	rdlong	result3, result3
06f74     12 FF 01 F1 | 	add	result3, local04
06f78     04 12 06 F1 | 	add	arg01, #4
06f7c     09 FF 61 FC | 	wrlong	result3, arg01
06f80                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
06f80                 | ' if fortable(fortop).stepval>=0 then
06f80     44 00 00 FF 
06f84     D0 E5 05 F1 | 	add	objptr, ##35280
06f88     F2 12 02 FB | 	rdlong	arg01, objptr
06f8c     09 25 02 F6 | 	mov	local04, arg01
06f90     02 24 66 F0 | 	shl	local04, #2
06f94     09 25 02 F1 | 	add	local04, arg01
06f98     02 24 66 F0 | 	shl	local04, #2
06f9c     07 00 00 FF 
06fa0     40 E5 85 F1 | 	sub	objptr, ##3904
06fa4     F2 24 02 F1 | 	add	local04, objptr
06fa8     0C 24 06 F1 | 	add	local04, #12
06fac     12 25 02 FB | 	rdlong	local04, local04
06fb0     00 24 56 F2 | 	cmps	local04, #0 wc
06fb4     49 00 00 FF 
06fb8     5C E4 85 F1 | 	sub	objptr, ##37468
06fbc     78 00 90 CD |  if_b	jmp	#LR__0601
06fc0                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
06fc0     04 1E 66 F0 | 	shl	local01, #4
06fc4     0B 00 00 FF 
06fc8     CC E5 05 F1 | 	add	objptr, ##6092
06fcc     F2 1E 02 F1 | 	add	local01, objptr
06fd0     44 00 00 FF 
06fd4     D0 E5 05 F1 | 	add	objptr, ##35280
06fd8     F2 24 02 FB | 	rdlong	local04, objptr
06fdc     12 13 02 F6 | 	mov	arg01, local04
06fe0     02 12 66 F0 | 	shl	arg01, #2
06fe4     12 13 02 F1 | 	add	arg01, local04
06fe8     02 12 66 F0 | 	shl	arg01, #2
06fec     07 00 00 FF 
06ff0     40 E5 85 F1 | 	sub	objptr, ##3904
06ff4     F2 12 02 F1 | 	add	arg01, objptr
06ff8     04 1E 06 F1 | 	add	local01, #4
06ffc     0F 25 02 FB | 	rdlong	local04, local01
07000     10 12 06 F1 | 	add	arg01, #16
07004     09 13 02 FB | 	rdlong	arg01, arg01
07008     09 25 5A F2 | 	cmps	local04, arg01 wcz
0700c     49 00 00 FF 
07010     5C E4 85 F1 | 	sub	objptr, ##37468
07014     9C 00 90 ED |  if_be	jmp	#LR__0603
07018     50 00 00 FF 
0701c     9C E5 05 F1 | 	add	objptr, ##41372
07020     F2 24 02 FB | 	rdlong	local04, objptr
07024     01 24 86 F1 | 	sub	local04, #1
07028     F2 24 62 FC | 	wrlong	local04, objptr
0702c     50 00 00 FF 
07030     9C E5 85 F1 | 	sub	objptr, ##41372
07034     0C 01 90 FD | 	jmp	#LR__0604
07038                 | LR__0601
07038                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
07038     0F 13 02 F6 | 	mov	arg01, local01
0703c     04 12 66 F0 | 	shl	arg01, #4
07040     0B 00 00 FF 
07044     CC E5 05 F1 | 	add	objptr, ##6092
07048     F2 12 02 F1 | 	add	arg01, objptr
0704c     44 00 00 FF 
07050     D0 E5 05 F1 | 	add	objptr, ##35280
07054     F2 24 02 FB | 	rdlong	local04, objptr
07058     12 1F 02 F6 | 	mov	local01, local04
0705c     02 1E 66 F0 | 	shl	local01, #2
07060     12 1F 02 F1 | 	add	local01, local04
07064     02 1E 66 F0 | 	shl	local01, #2
07068     07 00 00 FF 
0706c     40 E5 85 F1 | 	sub	objptr, ##3904
07070     F2 1E 02 F1 | 	add	local01, objptr
07074     04 12 06 F1 | 	add	arg01, #4
07078     09 13 02 FB | 	rdlong	arg01, arg01
0707c     10 1E 06 F1 | 	add	local01, #16
07080     0F 1F 02 FB | 	rdlong	local01, local01
07084     0F 13 52 F2 | 	cmps	arg01, local01 wc
07088     49 00 00 FF 
0708c     5C E4 85 F1 | 	sub	objptr, ##37468
07090     20 00 90 3D |  if_ae	jmp	#LR__0602
07094     50 00 00 FF 
07098     9C E5 05 F1 | 	add	objptr, ##41372
0709c     F2 24 02 FB | 	rdlong	local04, objptr
070a0     01 24 86 F1 | 	sub	local04, #1
070a4     F2 24 62 FC | 	wrlong	local04, objptr
070a8     50 00 00 FF 
070ac     9C E5 85 F1 | 	sub	objptr, ##41372
070b0     90 00 90 FD | 	jmp	#LR__0604
070b4                 | LR__0602
070b4                 | LR__0603
070b4     50 00 00 FF 
070b8     9C E5 05 F1 | 	add	objptr, ##41372
070bc     F2 1E 02 FB | 	rdlong	local01, objptr
070c0     0F 25 02 F6 | 	mov	local04, local01
070c4     02 24 66 F0 | 	shl	local04, #2
070c8     0F 25 02 F1 | 	add	local04, local01
070cc     02 24 66 F0 | 	shl	local04, #2
070d0     07 00 00 FF 
070d4     40 E5 85 F1 | 	sub	objptr, ##3904
070d8     F2 24 02 F1 | 	add	local04, objptr
070dc     12 25 02 FB | 	rdlong	local04, local04
070e0     07 00 00 FF 
070e4     18 E5 05 F1 | 	add	objptr, ##3864
070e8     F2 24 62 FC | 	wrlong	local04, objptr
070ec     28 E4 05 F1 | 	add	objptr, #40
070f0     F2 1E 02 FB | 	rdlong	local01, objptr
070f4     0F 25 02 F6 | 	mov	local04, local01
070f8     02 24 66 F0 | 	shl	local04, #2
070fc     0F 25 02 F1 | 	add	local04, local01
07100     02 24 66 F0 | 	shl	local04, #2
07104     07 00 00 FF 
07108     40 E5 85 F1 | 	sub	objptr, ##3904
0710c     F2 24 02 F1 | 	add	local04, objptr
07110     04 24 06 F1 | 	add	local04, #4
07114     12 25 02 FB | 	rdlong	local04, local04
07118     07 00 00 FF 
0711c     1C E5 05 F1 | 	add	objptr, ##3868
07120     F2 24 62 FC | 	wrlong	local04, objptr
07124     0F 00 00 FF 
07128     38 E5 85 F1 | 	sub	objptr, ##7992
0712c     F2 24 02 FB | 	rdlong	local04, objptr
07130     01 24 86 F1 | 	sub	local04, #1
07134     04 E4 05 F1 | 	add	objptr, #4
07138     F2 24 62 FC | 	wrlong	local04, objptr
0713c     41 00 00 FF 
07140     44 E4 85 F1 | 	sub	objptr, ##33348
07144                 | LR__0604
07144     A7 F0 03 F6 | 	mov	ptra, fp
07148     B2 00 A0 FD | 	call	#popregs_
0714c                 | _do_next_ret
0714c     2D 00 64 FD | 	ret
07150                 | 
07150                 | ' 
07150                 | ' 
07150                 | ' function compile_next() as ulong
07150                 | _compile_next
07150     04 4A 05 F6 | 	mov	COUNT_, #4
07154     A8 00 A0 FD | 	call	#pushregs_
07158     2E 00 00 FF 
0715c     08 E4 05 F1 | 	add	objptr, ##23560
07160     F2 12 02 FB | 	rdlong	arg01, objptr
07164     03 12 66 F0 | 	shl	arg01, #3
07168     02 00 00 FF 
0716c     38 E4 85 F1 | 	sub	objptr, ##1080
07170     F2 12 02 F1 | 	add	arg01, objptr
07174     09 1F 02 FB | 	rdlong	local01, arg01
07178                 | ' 
07178                 | ' varname$=lparts(ct).part$ 
07178                 | ' 'suffix$=right$(varname$,1)
07178                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
07178                 | ' if varnum=0 then compile_error(35)  : return 35
07178     04 E4 85 F1 | 	sub	objptr, #4
0717c     F2 14 0A FB | 	rdlong	arg02, objptr wz
07180     2B 00 00 FF 
07184     CC E5 85 F1 | 	sub	objptr, ##22476
07188     10 00 90 5D |  if_ne	jmp	#LR__0610
0718c     23 12 06 F6 | 	mov	arg01, #35
07190     4C E0 BF FD | 	call	#_compile_error
07194     23 FA 05 F6 | 	mov	result1, #35
07198     58 01 90 FD | 	jmp	#LR__0614
0719c                 | LR__0610
0719c     01 20 66 F6 | 	neg	local02, #1
071a0                 | ' j=-1
071a0                 | ' for i=0 to varnum-1
071a0     00 22 06 F6 | 	mov	local03, #0
071a4     2B 00 00 FF 
071a8     CC E5 05 F1 | 	add	objptr, ##22476
071ac     F2 24 02 FB | 	rdlong	local04, objptr
071b0     2B 00 00 FF 
071b4     CC E5 85 F1 | 	sub	objptr, ##22476
071b8                 | LR__0611
071b8     12 23 12 F2 | 	cmp	local03, local04 wc
071bc     38 00 90 3D |  if_ae	jmp	#LR__0612
071c0                 | '   if variables(i).name=varname$ then j=i : exit
071c0     11 15 02 F6 | 	mov	arg02, local03
071c4     04 14 66 F0 | 	shl	arg02, #4
071c8     0B 00 00 FF 
071cc     CC E5 05 F1 | 	add	objptr, ##6092
071d0     F2 14 02 F1 | 	add	arg02, objptr
071d4     0A 13 02 FB | 	rdlong	arg01, arg02
071d8     0F 15 02 F6 | 	mov	arg02, local01
071dc     0B 00 00 FF 
071e0     CC E5 85 F1 | 	sub	objptr, ##6092
071e4     88 E9 B0 FD | 	call	#__system___string_cmp
071e8     00 FA 0D F2 | 	cmp	result1, #0 wz
071ec     11 21 02 A6 |  if_e	mov	local02, local03
071f0     01 22 06 51 |  if_ne	add	local03, #1
071f4     C0 FF 9F 5D |  if_ne	jmp	#LR__0611
071f8                 | LR__0612
071f8                 | ' if j=-1 then compile_error(35) : return 35
071f8     FF FF 7F FF 
071fc     FF 21 0E F2 | 	cmp	local02, ##-1 wz
07200     10 00 90 5D |  if_ne	jmp	#LR__0613
07204     23 12 06 F6 | 	mov	arg01, #35
07208     D4 DF BF FD | 	call	#_compile_error
0720c     23 FA 05 F6 | 	mov	result1, #35
07210     E0 00 90 FD | 	jmp	#LR__0614
07214                 | LR__0613
07214     41 00 00 FF 
07218     40 E4 05 F1 | 	add	objptr, ##33344
0721c     F2 24 02 FB | 	rdlong	local04, objptr
07220     12 23 02 F6 | 	mov	local03, local04
07224     01 22 66 F0 | 	shl	local03, #1
07228     12 23 02 F1 | 	add	local03, local04
0722c     02 22 66 F0 | 	shl	local03, #2
07230     03 00 00 FF 
07234     00 E4 85 F1 | 	sub	objptr, ##1536
07238     F2 22 02 F1 | 	add	local03, objptr
0723c     08 22 06 F1 | 	add	local03, #8
07240     11 39 68 FC | 	wrlong	#28, local03
07244     03 00 00 FF 
07248     00 E4 05 F1 | 	add	objptr, ##1536
0724c     F2 24 02 FB | 	rdlong	local04, objptr
07250     12 23 02 F6 | 	mov	local03, local04
07254     01 22 66 F0 | 	shl	local03, #1
07258     12 23 02 F1 | 	add	local03, local04
0725c     02 22 66 F0 | 	shl	local03, #2
07260     03 00 00 FF 
07264     00 E4 85 F1 | 	sub	objptr, ##1536
07268     F2 22 02 F1 | 	add	local03, objptr
0726c     11 21 62 FC | 	wrlong	local02, local03
07270     03 00 00 FF 
07274     00 E4 05 F1 | 	add	objptr, ##1536
07278     F2 24 02 FB | 	rdlong	local04, objptr
0727c     01 24 06 F1 | 	add	local04, #1
07280     F2 24 62 FC | 	wrlong	local04, objptr
07284     12 23 02 F6 | 	mov	local03, local04
07288     01 22 66 F0 | 	shl	local03, #1
0728c     12 23 02 F1 | 	add	local03, local04
07290     02 22 66 F0 | 	shl	local03, #2
07294     03 00 00 FF 
07298     00 E4 85 F1 | 	sub	objptr, ##1536
0729c     F2 22 02 F1 | 	add	local03, objptr
072a0     08 22 06 F1 | 	add	local03, #8
072a4     11 97 68 FC | 	wrlong	#75, local03
072a8     03 00 00 FF 
072ac     00 E4 05 F1 | 	add	objptr, ##1536
072b0     F2 24 02 FB | 	rdlong	local04, objptr
072b4     12 23 02 F6 | 	mov	local03, local04
072b8     01 22 66 F0 | 	shl	local03, #1
072bc     12 23 02 F1 | 	add	local03, local04
072c0     02 22 66 F0 | 	shl	local03, #2
072c4     03 00 00 FF 
072c8     00 E4 85 F1 | 	sub	objptr, ##1536
072cc     F2 22 02 F1 | 	add	local03, objptr
072d0     11 01 68 FC | 	wrlong	#0, local03
072d4     03 00 00 FF 
072d8     00 E4 05 F1 | 	add	objptr, ##1536
072dc     F2 24 02 FB | 	rdlong	local04, objptr
072e0     01 24 06 F1 | 	add	local04, #1
072e4     F2 24 62 FC | 	wrlong	local04, objptr
072e8     41 00 00 FF 
072ec     40 E4 85 F1 | 	sub	objptr, ##33344
072f0                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
072f0                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
072f0                 | ' return 0
072f0     00 FA 05 F6 | 	mov	result1, #0
072f4                 | LR__0614
072f4     A7 F0 03 F6 | 	mov	ptra, fp
072f8     B2 00 A0 FD | 	call	#popregs_
072fc                 | _compile_next_ret
072fc     2D 00 64 FD | 	ret
07300                 | 
07300                 | ' 
07300                 | ' 
07300                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
07300                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
07300                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
07300                 | ' 
07300                 | ' 
07300                 | ' function compile_goto( ) as ulong
07300                 | _compile_goto
07300     03 4A 05 F6 | 	mov	COUNT_, #3
07304     A8 00 A0 FD | 	call	#pushregs_
07308     28 F0 07 F1 | 	add	ptra, #40
0730c                 | ' 
0730c                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
0730c     2E 00 00 FF 
07310     08 E4 05 F1 | 	add	objptr, ##23560
07314     F2 16 02 FB | 	rdlong	arg03, objptr
07318     03 16 66 F0 | 	shl	arg03, #3
0731c     02 00 00 FF 
07320     38 E4 85 F1 | 	sub	objptr, ##1080
07324     F2 16 02 F1 | 	add	arg03, objptr
07328     04 16 06 F1 | 	add	arg03, #4
0732c     0B 17 02 FB | 	rdlong	arg03, arg03
07330     01 00 00 FF 
07334     00 16 0E F2 | 	cmp	arg03, ##512 wz
07338     2B 00 00 FF 
0733c     D0 E5 85 F1 | 	sub	objptr, ##22480
07340     CC 02 90 5D |  if_ne	jmp	#LR__0625
07344     2E 00 00 FF 
07348     08 E4 05 F1 | 	add	objptr, ##23560
0734c     F2 16 02 FB | 	rdlong	arg03, objptr
07350     01 16 06 F1 | 	add	arg03, #1
07354     03 16 66 F0 | 	shl	arg03, #3
07358     02 00 00 FF 
0735c     38 E4 85 F1 | 	sub	objptr, ##1080
07360     F2 16 02 F1 | 	add	arg03, objptr
07364     04 16 06 F1 | 	add	arg03, #4
07368     0B 17 02 FB | 	rdlong	arg03, arg03
0736c     FE 17 0E F2 | 	cmp	arg03, #510 wz
07370     2B 00 00 FF 
07374     D0 E5 85 F1 | 	sub	objptr, ##22480
07378     94 02 90 5D |  if_ne	jmp	#LR__0625
0737c     2E 00 00 FF 
07380     08 E4 05 F1 | 	add	objptr, ##23560
07384     F2 16 02 FB | 	rdlong	arg03, objptr
07388     03 16 66 F0 | 	shl	arg03, #3
0738c     02 00 00 FF 
07390     38 E4 85 F1 | 	sub	objptr, ##1080
07394     F2 16 02 F1 | 	add	arg03, objptr
07398     0B 13 02 FB | 	rdlong	arg01, arg03
0739c     00 14 06 F6 | 	mov	arg02, #0
073a0     2B 00 00 FF 
073a4     D0 E5 85 F1 | 	sub	objptr, ##22480
073a8     24 17 B1 FD | 	call	#__system____builtin_atoi
073ac     04 4E 05 F1 | 	add	fp, #4
073b0     A7 FA 61 FC | 	wrlong	result1, fp
073b4     41 00 00 FF 
073b8     40 E4 05 F1 | 	add	objptr, ##33344
073bc     F2 1E 02 FB | 	rdlong	local01, objptr
073c0     0F 21 02 F6 | 	mov	local02, local01
073c4     01 20 66 F0 | 	shl	local02, #1
073c8     0F 21 02 F1 | 	add	local02, local01
073cc     02 20 66 F0 | 	shl	local02, #2
073d0     03 00 00 FF 
073d4     00 E4 85 F1 | 	sub	objptr, ##1536
073d8     F2 20 02 F1 | 	add	local02, objptr
073dc     08 20 06 F1 | 	add	local02, #8
073e0     10 9D 68 FC | 	wrlong	#78, local02
073e4     03 00 00 FF 
073e8     08 E4 05 F1 | 	add	objptr, ##1544
073ec     F2 22 02 FB | 	rdlong	local03, objptr
073f0     41 00 00 FF 
073f4     48 E4 85 F1 | 	sub	objptr, ##33352
073f8     04 4E 05 F1 | 	add	fp, #4
073fc     A7 22 62 FC | 	wrlong	local03, fp
07400     08 4E 85 F1 | 	sub	fp, #8
07404                 | ' 
07404                 | '   gotoline=val%(lparts(ct).part$) 
07404                 | '   compiledline(lineptr).result_type=token_fast_goto
07404                 | ' ' now find a pointer to goto
07404                 | '   gotoptr=programstart
07404                 | '   do
07404                 | LR__0620
07404     10 4E 05 F1 | 	add	fp, #16
07408     A7 12 02 F6 | 	mov	arg01, fp
0740c     08 4E 85 F1 | 	sub	fp, #8
07410     A7 14 02 FB | 	rdlong	arg02, fp
07414     08 4E 85 F1 | 	sub	fp, #8
07418     18 16 06 F6 | 	mov	arg03, #24
0741c     0B 00 00 FF 
07420     C0 E4 05 F1 | 	add	objptr, ##5824
07424     34 DC B0 FD | 	call	#_psram_spin2_read1
07428     0B 00 00 FF 
0742c     C0 E4 85 F1 | 	sub	objptr, ##5824
07430                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
07430                 | '     if gotoheader(0)<>$FFFFFFFF then
07430     10 4E 05 F1 | 	add	fp, #16
07434     A7 22 02 FB | 	rdlong	local03, fp
07438     10 4E 85 F1 | 	sub	fp, #16
0743c     FF FF 7F FF 
07440     FF 23 0E F2 | 	cmp	local03, ##-1 wz
07444     24 00 90 AD |  if_e	jmp	#LR__0621
07448     08 4E 05 F1 | 	add	fp, #8
0744c     A7 22 02 FB | 	rdlong	local03, fp
07450     04 4E 05 F1 | 	add	fp, #4
07454     A7 22 62 FC | 	wrlong	local03, fp
07458     18 4E 05 F1 | 	add	fp, #24
0745c     A7 22 02 FB | 	rdlong	local03, fp
07460     1C 4E 85 F1 | 	sub	fp, #28
07464     A7 22 62 FC | 	wrlong	local03, fp
07468     08 4E 85 F1 | 	sub	fp, #8
0746c                 | LR__0621
0746c     24 4E 05 F1 | 	add	fp, #36
07470     A7 22 02 FB | 	rdlong	local03, fp
07474     24 4E 85 F1 | 	sub	fp, #36
07478     FF FF 3F FF 
0747c     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
07480     10 4E 05 51 |  if_ne	add	fp, #16
07484     A7 1E 02 5B |  if_ne	rdlong	local01, fp
07488     10 4E 85 51 |  if_ne	sub	fp, #16
0748c     FF FF 7F 5F 
07490     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
07494     1C 00 90 AD |  if_e	jmp	#LR__0622
07498     10 4E 05 F1 | 	add	fp, #16
0749c     A7 22 02 FB | 	rdlong	local03, fp
074a0     0C 4E 85 F1 | 	sub	fp, #12
074a4     A7 20 02 FB | 	rdlong	local02, fp
074a8     04 4E 85 F1 | 	sub	fp, #4
074ac     10 23 0A F2 | 	cmp	local03, local02 wz
074b0     50 FF 9F 5D |  if_ne	jmp	#LR__0620
074b4                 | LR__0622
074b4                 | '   if gotoheader(0)=gotoline then
074b4     10 4E 05 F1 | 	add	fp, #16
074b8     A7 22 02 FB | 	rdlong	local03, fp
074bc     0C 4E 85 F1 | 	sub	fp, #12
074c0     A7 1E 02 FB | 	rdlong	local01, fp
074c4     04 4E 85 F1 | 	sub	fp, #4
074c8     0F 23 0A F2 | 	cmp	local03, local01 wz
074cc     7C 00 90 5D |  if_ne	jmp	#LR__0623
074d0     41 00 00 FF 
074d4     40 E4 05 F1 | 	add	objptr, ##33344
074d8     F2 1E 02 FB | 	rdlong	local01, objptr
074dc     0F 21 02 F6 | 	mov	local02, local01
074e0     01 20 66 F0 | 	shl	local02, #1
074e4     0F 21 02 F1 | 	add	local02, local01
074e8     02 20 66 F0 | 	shl	local02, #2
074ec     03 00 00 FF 
074f0     00 E4 85 F1 | 	sub	objptr, ##1536
074f4     F2 20 02 F1 | 	add	local02, objptr
074f8     0C 4E 05 F1 | 	add	fp, #12
074fc     A7 22 02 FB | 	rdlong	local03, fp
07500     10 23 62 FC | 	wrlong	local03, local02
07504     03 00 00 FF 
07508     00 E4 05 F1 | 	add	objptr, ##1536
0750c     F2 1E 02 FB | 	rdlong	local01, objptr
07510     0F 21 02 F6 | 	mov	local02, local01
07514     01 20 66 F0 | 	shl	local02, #1
07518     0F 21 02 F1 | 	add	local02, local01
0751c     02 20 66 F0 | 	shl	local02, #2
07520     03 00 00 FF 
07524     00 E4 85 F1 | 	sub	objptr, ##1536
07528     F2 20 02 F1 | 	add	local02, objptr
0752c     08 4E 85 F1 | 	sub	fp, #8
07530     A7 22 02 FB | 	rdlong	local03, fp
07534     04 4E 85 F1 | 	sub	fp, #4
07538     04 20 06 F1 | 	add	local02, #4
0753c     10 23 62 FC | 	wrlong	local03, local02
07540     3E 00 00 FF 
07544     40 E4 85 F1 | 	sub	objptr, ##31808
07548     A4 00 90 FD | 	jmp	#LR__0624
0754c                 | LR__0623
0754c     41 00 00 FF 
07550     40 E4 05 F1 | 	add	objptr, ##33344
07554     F2 1E 02 FB | 	rdlong	local01, objptr
07558     0F 21 02 F6 | 	mov	local02, local01
0755c     01 20 66 F0 | 	shl	local02, #1
07560     0F 21 02 F1 | 	add	local02, local01
07564     02 20 66 F0 | 	shl	local02, #2
07568     03 00 00 FF 
0756c     00 E4 85 F1 | 	sub	objptr, ##1536
07570     F2 20 02 F1 | 	add	local02, objptr
07574     00 00 C0 FF 
07578     10 01 68 FC | 	wrlong	##-2147483648, local02
0757c     03 00 00 FF 
07580     00 E4 05 F1 | 	add	objptr, ##1536
07584     F2 1E 02 FB | 	rdlong	local01, objptr
07588     0F 21 02 F6 | 	mov	local02, local01
0758c     01 20 66 F0 | 	shl	local02, #1
07590     0F 21 02 F1 | 	add	local02, local01
07594     02 20 66 F0 | 	shl	local02, #2
07598     03 00 00 FF 
0759c     00 E4 85 F1 | 	sub	objptr, ##1536
075a0     F2 20 02 F1 | 	add	local02, objptr
075a4     04 4E 05 F1 | 	add	fp, #4
075a8     A7 22 02 FB | 	rdlong	local03, fp
075ac     04 4E 85 F1 | 	sub	fp, #4
075b0     04 20 06 F1 | 	add	local02, #4
075b4     10 23 62 FC | 	wrlong	local03, local02
075b8     03 00 00 FF 
075bc     00 E4 05 F1 | 	add	objptr, ##1536
075c0     F2 1E 02 FB | 	rdlong	local01, objptr
075c4     0F 21 02 F6 | 	mov	local02, local01
075c8     01 20 66 F0 | 	shl	local02, #1
075cc     0F 21 02 F1 | 	add	local02, local01
075d0     02 20 66 F0 | 	shl	local02, #2
075d4     03 00 00 FF 
075d8     00 E4 85 F1 | 	sub	objptr, ##1536
075dc     F2 20 02 F1 | 	add	local02, objptr
075e0     08 20 06 F1 | 	add	local02, #8
075e4     10 A7 68 FC | 	wrlong	#83, local02
075e8     3E 00 00 FF 
075ec     40 E4 85 F1 | 	sub	objptr, ##31808
075f0                 | LR__0624
075f0     41 00 00 FF 
075f4     40 E4 05 F1 | 	add	objptr, ##33344
075f8     F2 22 02 FB | 	rdlong	local03, objptr
075fc     01 22 06 F1 | 	add	local03, #1
07600     F2 22 62 FC | 	wrlong	local03, objptr
07604     41 00 00 FF 
07608     40 E4 85 F1 | 	sub	objptr, ##33344
0760c     40 00 90 FD | 	jmp	#LR__0626
07610                 | LR__0625
07610                 | '    print "We have a slow goto, todo  "
07610     00 12 06 F6 | 	mov	arg01, #0
07614     E0 39 B1 FD | 	call	#__system___getiolock_0372
07618     FD 12 02 F6 | 	mov	arg01, result1
0761c     28 E5 B0 FD | 	call	#__system___lockmem
07620     27 01 00 FF 
07624     FE 14 06 F6 | 	mov	arg02, ##@LR__4309
07628     00 12 06 F6 | 	mov	arg01, #0
0762c     00 16 06 F6 | 	mov	arg03, #0
07630     08 F2 B0 FD | 	call	#__system___basic_print_string
07634     00 12 06 F6 | 	mov	arg01, #0
07638     0A 14 06 F6 | 	mov	arg02, #10
0763c     00 16 06 F6 | 	mov	arg03, #0
07640     A0 F1 B0 FD | 	call	#__system___basic_print_char
07644     00 12 06 F6 | 	mov	arg01, #0
07648     AC 39 B1 FD | 	call	#__system___getiolock_0372
0764c     FD 00 68 FC | 	wrlong	#0, result1
07650                 | LR__0626
07650                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
07650                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
07650                 | ' return 0
07650     00 FA 05 F6 | 	mov	result1, #0
07654     A7 F0 03 F6 | 	mov	ptra, fp
07658     B2 00 A0 FD | 	call	#popregs_
0765c                 | _compile_goto_ret
0765c     2D 00 64 FD | 	ret
07660                 | 
07660                 | ' 
07660                 | ' 
07660                 | ' 
07660                 | ' 
07660                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07660                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
07660                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07660                 | ' 
07660                 | ' 
07660                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07660                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
07660                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07660                 | ' 
07660                 | ' 
07660                 | ' function expr() as integer 
07660                 | _expr
07660     07 4A 05 F6 | 	mov	COUNT_, #7
07664     A8 00 A0 FD | 	call	#pushregs_
07668                 | _expr_enter
07668     2E 00 00 FF 
0766c     08 E4 05 F1 | 	add	objptr, ##23560
07670     F2 24 02 FB | 	rdlong	local04, objptr
07674     03 24 66 F0 | 	shl	local04, #3
07678     02 00 00 FF 
0767c     38 E4 85 F1 | 	sub	objptr, ##1080
07680     F2 24 02 F1 | 	add	local04, objptr
07684     04 24 06 F1 | 	add	local04, #4
07688     12 27 02 FB | 	rdlong	local05, local04
0768c                 | ' 
0768c                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0768c     FE 27 0E F2 | 	cmp	local05, #510 wz
07690     2B 00 00 FF 
07694     D0 E5 85 F1 | 	sub	objptr, ##22480
07698     C4 00 90 5D |  if_ne	jmp	#LR__0630
0769c     1D 1E 06 F6 | 	mov	local01, #29
076a0     FF 22 06 F6 | 	mov	local03, #255
076a4     0F 29 02 F6 | 	mov	local06, local01
076a8     10 2B 02 F6 | 	mov	local07, local02
076ac     11 1F 02 F6 | 	mov	local01, local03
076b0     41 00 00 FF 
076b4     40 E4 05 F1 | 	add	objptr, ##33344
076b8     F2 26 02 FB | 	rdlong	local05, objptr
076bc     13 25 02 F6 | 	mov	local04, local05
076c0     01 24 66 F0 | 	shl	local04, #1
076c4     13 25 02 F1 | 	add	local04, local05
076c8     02 24 66 F0 | 	shl	local04, #2
076cc     03 00 00 FF 
076d0     00 E4 85 F1 | 	sub	objptr, ##1536
076d4     F2 24 02 F1 | 	add	local04, objptr
076d8     12 29 62 FC | 	wrlong	local06, local04
076dc     03 00 00 FF 
076e0     00 E4 05 F1 | 	add	objptr, ##1536
076e4     F2 28 02 FB | 	rdlong	local06, objptr
076e8     14 27 02 F6 | 	mov	local05, local06
076ec     01 26 66 F0 | 	shl	local05, #1
076f0     14 27 02 F1 | 	add	local05, local06
076f4     02 26 66 F0 | 	shl	local05, #2
076f8     03 00 00 FF 
076fc     00 E4 85 F1 | 	sub	objptr, ##1536
07700     F2 26 02 F1 | 	add	local05, objptr
07704     04 26 06 F1 | 	add	local05, #4
07708     13 2B 62 FC | 	wrlong	local07, local05
0770c     03 00 00 FF 
07710     00 E4 05 F1 | 	add	objptr, ##1536
07714     F2 2A 02 FB | 	rdlong	local07, objptr
07718     15 29 02 F6 | 	mov	local06, local07
0771c     01 28 66 F0 | 	shl	local06, #1
07720     15 29 02 F1 | 	add	local06, local07
07724     02 28 66 F0 | 	shl	local06, #2
07728     03 00 00 FF 
0772c     00 E4 85 F1 | 	sub	objptr, ##1536
07730     F2 28 02 F1 | 	add	local06, objptr
07734     08 28 06 F1 | 	add	local06, #8
07738     14 1F 62 FC | 	wrlong	local01, local06
0773c     03 00 00 FF 
07740     00 E4 05 F1 | 	add	objptr, ##1536
07744     F2 28 02 FB | 	rdlong	local06, objptr
07748     01 28 06 F1 | 	add	local06, #1
0774c     F2 28 62 FC | 	wrlong	local06, objptr
07750     41 00 00 FF 
07754     40 E4 85 F1 | 	sub	objptr, ##33344
07758     1D FA 05 F6 | 	mov	result1, #29
0775c     54 01 90 FD | 	jmp	#LR__0633
07760                 | LR__0630
07760     00 1E 06 F6 | 	mov	local01, #0
07764     58 01 B0 FD | 	call	#_addsub
07768     2E 00 00 FF 
0776c     08 E4 05 F1 | 	add	objptr, ##23560
07770     F2 24 02 FB | 	rdlong	local04, objptr
07774     03 24 66 F0 | 	shl	local04, #3
07778     02 00 00 FF 
0777c     38 E4 85 F1 | 	sub	objptr, ##1080
07780     F2 24 02 F1 | 	add	local04, objptr
07784     04 24 06 F1 | 	add	local04, #4
07788     12 27 02 FB | 	rdlong	local05, local04
0778c                 | ' t3.result.uresult=0
0778c                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
0778c                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
0778c                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0778c     2B 00 00 FF 
07790     D0 E5 85 F1 | 	sub	objptr, ##22480
07794                 | LR__0631
07794     1B 26 0E F2 | 	cmp	local05, #27 wz
07798     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
0779c     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
077a0     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
077a4     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
077a8     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
077ac     00 01 90 5D |  if_ne	jmp	#LR__0632
077b0     2E 00 00 FF 
077b4     08 E4 05 F1 | 	add	objptr, ##23560
077b8     F2 28 02 FB | 	rdlong	local06, objptr
077bc     01 28 06 F1 | 	add	local06, #1
077c0     F2 28 62 FC | 	wrlong	local06, objptr
077c4     2E 00 00 FF 
077c8     08 E4 85 F1 | 	sub	objptr, ##23560
077cc     F0 00 B0 FD | 	call	#_addsub
077d0     13 23 02 F6 | 	mov	local03, local05
077d4     0F 29 02 F6 | 	mov	local06, local01
077d8     10 2B 02 F6 | 	mov	local07, local02
077dc     11 27 02 F6 | 	mov	local05, local03
077e0     41 00 00 FF 
077e4     40 E4 05 F1 | 	add	objptr, ##33344
077e8     F2 24 02 FB | 	rdlong	local04, objptr
077ec     12 FB 01 F6 | 	mov	result1, local04
077f0     01 FA 65 F0 | 	shl	result1, #1
077f4     12 FB 01 F1 | 	add	result1, local04
077f8     02 FA 65 F0 | 	shl	result1, #2
077fc     03 00 00 FF 
07800     00 E4 85 F1 | 	sub	objptr, ##1536
07804     F2 FA 01 F1 | 	add	result1, objptr
07808     FD 28 62 FC | 	wrlong	local06, result1
0780c     03 00 00 FF 
07810     00 E4 05 F1 | 	add	objptr, ##1536
07814     F2 28 02 FB | 	rdlong	local06, objptr
07818     14 25 02 F6 | 	mov	local04, local06
0781c     01 24 66 F0 | 	shl	local04, #1
07820     14 25 02 F1 | 	add	local04, local06
07824     02 24 66 F0 | 	shl	local04, #2
07828     03 00 00 FF 
0782c     00 E4 85 F1 | 	sub	objptr, ##1536
07830     F2 24 02 F1 | 	add	local04, objptr
07834     04 24 06 F1 | 	add	local04, #4
07838     12 2B 62 FC | 	wrlong	local07, local04
0783c     03 00 00 FF 
07840     00 E4 05 F1 | 	add	objptr, ##1536
07844     F2 2A 02 FB | 	rdlong	local07, objptr
07848     15 29 02 F6 | 	mov	local06, local07
0784c     01 28 66 F0 | 	shl	local06, #1
07850     15 29 02 F1 | 	add	local06, local07
07854     02 28 66 F0 | 	shl	local06, #2
07858     03 00 00 FF 
0785c     00 E4 85 F1 | 	sub	objptr, ##1536
07860     F2 28 02 F1 | 	add	local06, objptr
07864     08 28 06 F1 | 	add	local06, #8
07868     14 27 62 FC | 	wrlong	local05, local06
0786c     03 00 00 FF 
07870     00 E4 05 F1 | 	add	objptr, ##1536
07874     F2 28 02 FB | 	rdlong	local06, objptr
07878     01 28 06 F1 | 	add	local06, #1
0787c     F2 28 62 FC | 	wrlong	local06, objptr
07880     13 00 00 FF 
07884     38 E4 85 F1 | 	sub	objptr, ##9784
07888     F2 24 02 FB | 	rdlong	local04, objptr
0788c     03 24 66 F0 | 	shl	local04, #3
07890     02 00 00 FF 
07894     38 E4 85 F1 | 	sub	objptr, ##1080
07898     F2 24 02 F1 | 	add	local04, objptr
0789c     04 24 06 F1 | 	add	local04, #4
078a0     12 27 02 FB | 	rdlong	local05, local04
078a4     2B 00 00 FF 
078a8     D0 E5 85 F1 | 	sub	objptr, ##22480
078ac     E4 FE 9F FD | 	jmp	#LR__0631
078b0                 | LR__0632
078b0                 | ' return 0  
078b0     00 FA 05 F6 | 	mov	result1, #0
078b4                 | LR__0633
078b4     A7 F0 03 F6 | 	mov	ptra, fp
078b8     B2 00 A0 FD | 	call	#popregs_
078bc                 | _expr_ret
078bc     2D 00 64 FD | 	ret
078c0                 | 
078c0                 | ' 
078c0                 | ' 
078c0                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
078c0                 | ' 
078c0                 | ' function addsub() as integer 
078c0                 | _addsub
078c0     07 4A 05 F6 | 	mov	COUNT_, #7
078c4     A8 00 A0 FD | 	call	#pushregs_
078c8                 | _addsub_enter
078c8     00 1E 06 F6 | 	mov	local01, #0
078cc     50 01 B0 FD | 	call	#_muldiv
078d0     2E 00 00 FF 
078d4     08 E4 05 F1 | 	add	objptr, ##23560
078d8     F2 24 02 FB | 	rdlong	local04, objptr
078dc     03 24 66 F0 | 	shl	local04, #3
078e0     02 00 00 FF 
078e4     38 E4 85 F1 | 	sub	objptr, ##1080
078e8     F2 24 02 F1 | 	add	local04, objptr
078ec     04 24 06 F1 | 	add	local04, #4
078f0     12 27 02 FB | 	rdlong	local05, local04
078f4                 | ' t3.result.uresult=0
078f4                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
078f4                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
078f4                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
078f4     2B 00 00 FF 
078f8     D0 E5 85 F1 | 	sub	objptr, ##22480
078fc                 | LR__0640
078fc     01 26 0E F2 | 	cmp	local05, #1 wz
07900     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
07904     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
07908     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
0790c     00 01 90 5D |  if_ne	jmp	#LR__0641
07910     2E 00 00 FF 
07914     08 E4 05 F1 | 	add	objptr, ##23560
07918     F2 24 02 FB | 	rdlong	local04, objptr
0791c     01 24 06 F1 | 	add	local04, #1
07920     F2 24 62 FC | 	wrlong	local04, objptr
07924     2E 00 00 FF 
07928     08 E4 85 F1 | 	sub	objptr, ##23560
0792c     F0 00 B0 FD | 	call	#_muldiv
07930     13 23 02 F6 | 	mov	local03, local05
07934     0F 29 02 F6 | 	mov	local06, local01
07938     10 2B 02 F6 | 	mov	local07, local02
0793c     11 27 02 F6 | 	mov	local05, local03
07940     41 00 00 FF 
07944     40 E4 05 F1 | 	add	objptr, ##33344
07948     F2 24 02 FB | 	rdlong	local04, objptr
0794c     12 FB 01 F6 | 	mov	result1, local04
07950     01 FA 65 F0 | 	shl	result1, #1
07954     12 FB 01 F1 | 	add	result1, local04
07958     02 FA 65 F0 | 	shl	result1, #2
0795c     03 00 00 FF 
07960     00 E4 85 F1 | 	sub	objptr, ##1536
07964     F2 FA 01 F1 | 	add	result1, objptr
07968     FD 28 62 FC | 	wrlong	local06, result1
0796c     03 00 00 FF 
07970     00 E4 05 F1 | 	add	objptr, ##1536
07974     F2 28 02 FB | 	rdlong	local06, objptr
07978     14 25 02 F6 | 	mov	local04, local06
0797c     01 24 66 F0 | 	shl	local04, #1
07980     14 25 02 F1 | 	add	local04, local06
07984     02 24 66 F0 | 	shl	local04, #2
07988     03 00 00 FF 
0798c     00 E4 85 F1 | 	sub	objptr, ##1536
07990     F2 24 02 F1 | 	add	local04, objptr
07994     04 24 06 F1 | 	add	local04, #4
07998     12 2B 62 FC | 	wrlong	local07, local04
0799c     03 00 00 FF 
079a0     00 E4 05 F1 | 	add	objptr, ##1536
079a4     F2 2A 02 FB | 	rdlong	local07, objptr
079a8     15 29 02 F6 | 	mov	local06, local07
079ac     01 28 66 F0 | 	shl	local06, #1
079b0     15 29 02 F1 | 	add	local06, local07
079b4     02 28 66 F0 | 	shl	local06, #2
079b8     03 00 00 FF 
079bc     00 E4 85 F1 | 	sub	objptr, ##1536
079c0     F2 28 02 F1 | 	add	local06, objptr
079c4     08 28 06 F1 | 	add	local06, #8
079c8     14 27 62 FC | 	wrlong	local05, local06
079cc     03 00 00 FF 
079d0     00 E4 05 F1 | 	add	objptr, ##1536
079d4     F2 28 02 FB | 	rdlong	local06, objptr
079d8     01 28 06 F1 | 	add	local06, #1
079dc     F2 28 62 FC | 	wrlong	local06, objptr
079e0     13 00 00 FF 
079e4     38 E4 85 F1 | 	sub	objptr, ##9784
079e8     F2 24 02 FB | 	rdlong	local04, objptr
079ec     03 24 66 F0 | 	shl	local04, #3
079f0     02 00 00 FF 
079f4     38 E4 85 F1 | 	sub	objptr, ##1080
079f8     F2 24 02 F1 | 	add	local04, objptr
079fc     04 24 06 F1 | 	add	local04, #4
07a00     12 27 02 FB | 	rdlong	local05, local04
07a04     2B 00 00 FF 
07a08     D0 E5 85 F1 | 	sub	objptr, ##22480
07a0c     EC FE 9F FD | 	jmp	#LR__0640
07a10                 | LR__0641
07a10                 | '   return 0
07a10     00 FA 05 F6 | 	mov	result1, #0
07a14     A7 F0 03 F6 | 	mov	ptra, fp
07a18     B2 00 A0 FD | 	call	#popregs_
07a1c                 | _addsub_ret
07a1c     2D 00 64 FD | 	ret
07a20                 | 
07a20                 | ' 
07a20                 | ' sub muldiv()
07a20                 | _muldiv
07a20     08 4A 05 F6 | 	mov	COUNT_, #8
07a24     A8 00 A0 FD | 	call	#pushregs_
07a28                 | _muldiv_enter
07a28     00 1E 06 F6 | 	mov	local01, #0
07a2c     58 01 B0 FD | 	call	#_getvalue
07a30     2E 00 00 FF 
07a34     08 E4 05 F1 | 	add	objptr, ##23560
07a38     F2 24 02 FB | 	rdlong	local04, objptr
07a3c     03 24 66 F0 | 	shl	local04, #3
07a40     02 00 00 FF 
07a44     38 E4 85 F1 | 	sub	objptr, ##1080
07a48     F2 24 02 F1 | 	add	local04, objptr
07a4c     04 24 06 F1 | 	add	local04, #4
07a50     12 27 02 FB | 	rdlong	local05, local04
07a54                 | ' t3.result.uresult=0
07a54                 | ' getvalue()    
07a54                 | ' op = lparts(ct).token
07a54                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
07a54     2B 00 00 FF 
07a58     D0 E5 85 F1 | 	sub	objptr, ##22480
07a5c                 | LR__0650
07a5c     05 26 0E F2 | 	cmp	local05, #5 wz
07a60     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
07a64     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
07a68     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
07a6c     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
07a70     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
07a74     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
07a78     00 01 90 5D |  if_ne	jmp	#LR__0651
07a7c     2E 00 00 FF 
07a80     08 E4 05 F1 | 	add	objptr, ##23560
07a84     F2 24 02 FB | 	rdlong	local04, objptr
07a88     01 24 06 F1 | 	add	local04, #1
07a8c     F2 24 62 FC | 	wrlong	local04, objptr
07a90     2E 00 00 FF 
07a94     08 E4 85 F1 | 	sub	objptr, ##23560
07a98     EC 00 B0 FD | 	call	#_getvalue
07a9c     13 23 02 F6 | 	mov	local03, local05
07aa0     0F 29 02 F6 | 	mov	local06, local01
07aa4     10 2B 02 F6 | 	mov	local07, local02
07aa8     11 27 02 F6 | 	mov	local05, local03
07aac     41 00 00 FF 
07ab0     40 E4 05 F1 | 	add	objptr, ##33344
07ab4     F2 24 02 FB | 	rdlong	local04, objptr
07ab8     12 2D 02 F6 | 	mov	local08, local04
07abc     01 2C 66 F0 | 	shl	local08, #1
07ac0     12 2D 02 F1 | 	add	local08, local04
07ac4     02 2C 66 F0 | 	shl	local08, #2
07ac8     03 00 00 FF 
07acc     00 E4 85 F1 | 	sub	objptr, ##1536
07ad0     F2 2C 02 F1 | 	add	local08, objptr
07ad4     16 29 62 FC | 	wrlong	local06, local08
07ad8     03 00 00 FF 
07adc     00 E4 05 F1 | 	add	objptr, ##1536
07ae0     F2 2C 02 FB | 	rdlong	local08, objptr
07ae4     16 29 02 F6 | 	mov	local06, local08
07ae8     01 28 66 F0 | 	shl	local06, #1
07aec     16 29 02 F1 | 	add	local06, local08
07af0     02 28 66 F0 | 	shl	local06, #2
07af4     03 00 00 FF 
07af8     00 E4 85 F1 | 	sub	objptr, ##1536
07afc     F2 28 02 F1 | 	add	local06, objptr
07b00     04 28 06 F1 | 	add	local06, #4
07b04     14 2B 62 FC | 	wrlong	local07, local06
07b08     03 00 00 FF 
07b0c     00 E4 05 F1 | 	add	objptr, ##1536
07b10     F2 2C 02 FB | 	rdlong	local08, objptr
07b14     16 2B 02 F6 | 	mov	local07, local08
07b18     01 2A 66 F0 | 	shl	local07, #1
07b1c     16 2B 02 F1 | 	add	local07, local08
07b20     02 2A 66 F0 | 	shl	local07, #2
07b24     03 00 00 FF 
07b28     00 E4 85 F1 | 	sub	objptr, ##1536
07b2c     F2 2A 02 F1 | 	add	local07, objptr
07b30     08 2A 06 F1 | 	add	local07, #8
07b34     15 27 62 FC | 	wrlong	local05, local07
07b38     03 00 00 FF 
07b3c     00 E4 05 F1 | 	add	objptr, ##1536
07b40     F2 28 02 FB | 	rdlong	local06, objptr
07b44     01 28 06 F1 | 	add	local06, #1
07b48     F2 28 62 FC | 	wrlong	local06, objptr
07b4c     13 00 00 FF 
07b50     38 E4 85 F1 | 	sub	objptr, ##9784
07b54     F2 24 02 FB | 	rdlong	local04, objptr
07b58     03 24 66 F0 | 	shl	local04, #3
07b5c     02 00 00 FF 
07b60     38 E4 85 F1 | 	sub	objptr, ##1080
07b64     F2 24 02 F1 | 	add	local04, objptr
07b68     04 24 06 F1 | 	add	local04, #4
07b6c     12 27 02 FB | 	rdlong	local05, local04
07b70     2B 00 00 FF 
07b74     D0 E5 85 F1 | 	sub	objptr, ##22480
07b78     E0 FE 9F FD | 	jmp	#LR__0650
07b7c                 | LR__0651
07b7c     A7 F0 03 F6 | 	mov	ptra, fp
07b80     B2 00 A0 FD | 	call	#popregs_
07b84                 | _muldiv_ret
07b84     2D 00 64 FD | 	ret
07b88                 | 
07b88                 | ' 
07b88                 | ' sub getvalue() 
07b88                 | _getvalue
07b88     0B 4A 05 F6 | 	mov	COUNT_, #11
07b8c     A8 00 A0 FD | 	call	#pushregs_
07b90                 | _getvalue_enter
07b90     01 24 06 F6 | 	mov	local04, #1
07b94     00 1E 06 F6 | 	mov	local01, #0
07b98     1D 22 06 F6 | 	mov	local03, #29
07b9c     2E 00 00 FF 
07ba0     08 E4 05 F1 | 	add	objptr, ##23560
07ba4     F2 16 02 FB | 	rdlong	arg03, objptr
07ba8     03 16 66 F0 | 	shl	arg03, #3
07bac     02 00 00 FF 
07bb0     38 E4 85 F1 | 	sub	objptr, ##1080
07bb4     F2 16 02 F1 | 	add	arg03, objptr
07bb8     04 16 06 F1 | 	add	arg03, #4
07bbc     0B 27 02 FB | 	rdlong	local05, arg03
07bc0                 | ' m=1
07bc0                 | ' t1.result.uresult=0: t1.result_type=result_uint
07bc0                 | ' op=lparts(ct).token
07bc0                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
07bc0     02 26 0E F2 | 	cmp	local05, #2 wz
07bc4     2B 00 00 FF 
07bc8     D0 E5 85 F1 | 	sub	objptr, ##22480
07bcc     38 00 90 5D |  if_ne	jmp	#LR__0660
07bd0     01 24 66 F6 | 	neg	local04, #1
07bd4     2E 00 00 FF 
07bd8     08 E4 05 F1 | 	add	objptr, ##23560
07bdc     F2 26 02 FB | 	rdlong	local05, objptr
07be0     01 26 06 F1 | 	add	local05, #1
07be4     F2 26 62 FC | 	wrlong	local05, objptr
07be8     03 26 66 F0 | 	shl	local05, #3
07bec     02 00 00 FF 
07bf0     38 E4 85 F1 | 	sub	objptr, ##1080
07bf4     F2 26 02 F1 | 	add	local05, objptr
07bf8     04 26 06 F1 | 	add	local05, #4
07bfc     13 27 02 FB | 	rdlong	local05, local05
07c00     2B 00 00 FF 
07c04     D0 E5 85 F1 | 	sub	objptr, ##22480
07c08                 | LR__0660
07c08                 | ' select case op
07c08     01 00 00 FF 
07c0c     00 26 0E F2 | 	cmp	local05, ##512 wz
07c10     3C 00 90 AD |  if_e	jmp	#LR__0661
07c14     01 00 00 FF 
07c18     01 26 0E F2 | 	cmp	local05, ##513 wz
07c1c     88 01 90 AD |  if_e	jmp	#LR__0664
07c20     01 00 00 FF 
07c24     02 26 0E F2 | 	cmp	local05, ##514 wz
07c28     84 02 90 AD |  if_e	jmp	#LR__0665
07c2c     01 00 00 FF 
07c30     03 26 0E F2 | 	cmp	local05, ##515 wz
07c34     E8 03 90 AD |  if_e	jmp	#LR__0668
07c38     01 00 00 FF 
07c3c     04 26 0E F2 | 	cmp	local05, ##516 wz
07c40     E0 05 90 AD |  if_e	jmp	#LR__0673
07c44     15 26 0E F2 | 	cmp	local05, #21 wz
07c48     00 06 90 AD |  if_e	jmp	#LR__0674
07c4c     70 06 90 FD | 	jmp	#LR__0675
07c50                 | LR__0661
07c50                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_uint ' todo token_int64
07c50     01 24 0E F2 | 	cmp	local04, #1 wz
07c54     3C 00 90 5D |  if_ne	jmp	#LR__0662
07c58     2E 00 00 FF 
07c5c     08 E4 05 F1 | 	add	objptr, ##23560
07c60     F2 26 02 FB | 	rdlong	local05, objptr
07c64     03 26 66 F0 | 	shl	local05, #3
07c68     02 00 00 FF 
07c6c     38 E4 85 F1 | 	sub	objptr, ##1080
07c70     F2 26 02 F1 | 	add	local05, objptr
07c74     13 13 02 FB | 	rdlong	arg01, local05
07c78     00 14 06 F6 | 	mov	arg02, #0
07c7c     2B 00 00 FF 
07c80     D0 E5 85 F1 | 	sub	objptr, ##22480
07c84     48 0E B1 FD | 	call	#__system____builtin_atoi
07c88     FD 24 02 FD | 	qmul	local04, result1
07c8c     18 1E 62 FD | 	getqx	local01
07c90     1D 22 06 F6 | 	mov	local03, #29
07c94                 | LR__0662
07c94                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
07c94     FF FF 7F FF 
07c98     FF 25 0E F2 | 	cmp	local04, ##-1 wz
07c9c     3C 00 90 5D |  if_ne	jmp	#LR__0663
07ca0     2E 00 00 FF 
07ca4     08 E4 05 F1 | 	add	objptr, ##23560
07ca8     F2 26 02 FB | 	rdlong	local05, objptr
07cac     03 26 66 F0 | 	shl	local05, #3
07cb0     02 00 00 FF 
07cb4     38 E4 85 F1 | 	sub	objptr, ##1080
07cb8     F2 26 02 F1 | 	add	local05, objptr
07cbc     13 13 02 FB | 	rdlong	arg01, local05
07cc0     00 14 06 F6 | 	mov	arg02, #0
07cc4     2B 00 00 FF 
07cc8     D0 E5 85 F1 | 	sub	objptr, ##22480
07ccc     00 0E B1 FD | 	call	#__system____builtin_atoi
07cd0     FD 24 02 FD | 	qmul	local04, result1
07cd4     18 1E 62 FD | 	getqx	local01
07cd8     1C 22 06 F6 | 	mov	local03, #28
07cdc                 | LR__0663
07cdc     0F 29 02 F6 | 	mov	local06, local01
07ce0     10 2B 02 F6 | 	mov	local07, local02
07ce4     11 27 02 F6 | 	mov	local05, local03
07ce8     41 00 00 FF 
07cec     40 E4 05 F1 | 	add	objptr, ##33344
07cf0     F2 1E 02 FB | 	rdlong	local01, objptr
07cf4     0F 25 02 F6 | 	mov	local04, local01
07cf8     01 24 66 F0 | 	shl	local04, #1
07cfc     0F 25 02 F1 | 	add	local04, local01
07d00     02 24 66 F0 | 	shl	local04, #2
07d04     03 00 00 FF 
07d08     00 E4 85 F1 | 	sub	objptr, ##1536
07d0c     F2 24 02 F1 | 	add	local04, objptr
07d10     12 29 62 FC | 	wrlong	local06, local04
07d14     03 00 00 FF 
07d18     00 E4 05 F1 | 	add	objptr, ##1536
07d1c     F2 28 02 FB | 	rdlong	local06, objptr
07d20     14 1F 02 F6 | 	mov	local01, local06
07d24     01 1E 66 F0 | 	shl	local01, #1
07d28     14 1F 02 F1 | 	add	local01, local06
07d2c     02 1E 66 F0 | 	shl	local01, #2
07d30     03 00 00 FF 
07d34     00 E4 85 F1 | 	sub	objptr, ##1536
07d38     F2 1E 02 F1 | 	add	local01, objptr
07d3c     04 1E 06 F1 | 	add	local01, #4
07d40     0F 2B 62 FC | 	wrlong	local07, local01
07d44     03 00 00 FF 
07d48     00 E4 05 F1 | 	add	objptr, ##1536
07d4c     F2 2A 02 FB | 	rdlong	local07, objptr
07d50     15 29 02 F6 | 	mov	local06, local07
07d54     01 28 66 F0 | 	shl	local06, #1
07d58     15 29 02 F1 | 	add	local06, local07
07d5c     02 28 66 F0 | 	shl	local06, #2
07d60     03 00 00 FF 
07d64     00 E4 85 F1 | 	sub	objptr, ##1536
07d68     F2 28 02 F1 | 	add	local06, objptr
07d6c     08 28 06 F1 | 	add	local06, #8
07d70     14 27 62 FC | 	wrlong	local05, local06
07d74     03 00 00 FF 
07d78     00 E4 05 F1 | 	add	objptr, ##1536
07d7c     F2 28 02 FB | 	rdlong	local06, objptr
07d80     01 28 06 F1 | 	add	local06, #1
07d84     F2 28 62 FC | 	wrlong	local06, objptr
07d88     13 00 00 FF 
07d8c     38 E4 85 F1 | 	sub	objptr, ##9784
07d90     F2 28 02 FB | 	rdlong	local06, objptr
07d94     01 28 06 F1 | 	add	local06, #1
07d98     F2 28 62 FC | 	wrlong	local06, objptr
07d9c     2E 00 00 FF 
07da0     08 E4 85 F1 | 	sub	objptr, ##23560
07da4     3C 05 90 FD | 	jmp	#LR__0676
07da8                 | LR__0664
07da8     2E 00 00 FF 
07dac     08 E4 05 F1 | 	add	objptr, ##23560
07db0     F2 28 02 FB | 	rdlong	local06, objptr
07db4     03 28 66 F0 | 	shl	local06, #3
07db8     02 00 00 FF 
07dbc     38 E4 85 F1 | 	sub	objptr, ##1080
07dc0     F2 28 02 F1 | 	add	local06, objptr
07dc4     14 13 02 FB | 	rdlong	arg01, local06
07dc8     00 14 06 F6 | 	mov	arg02, #0
07dcc     2B 00 00 FF 
07dd0     D0 E5 85 F1 | 	sub	objptr, ##22480
07dd4     F8 0C B1 FD | 	call	#__system____builtin_atoi
07dd8     FD 24 02 FD | 	qmul	local04, result1
07ddc     41 00 00 FF 
07de0     40 E4 05 F1 | 	add	objptr, ##33344
07de4     F2 28 02 FB | 	rdlong	local06, objptr
07de8     14 2D 02 F6 | 	mov	local08, local06
07dec     01 2C 66 F0 | 	shl	local08, #1
07df0     14 2D 02 F1 | 	add	local08, local06
07df4     02 2C 66 F0 | 	shl	local08, #2
07df8     03 00 00 FF 
07dfc     00 E4 85 F1 | 	sub	objptr, ##1536
07e00     F2 2C 02 F1 | 	add	local08, objptr
07e04     03 00 00 FF 
07e08     00 E4 05 F1 | 	add	objptr, ##1536
07e0c     18 1E 62 FD | 	getqx	local01
07e10     1C 22 06 F6 | 	mov	local03, #28
07e14     0F 29 02 F6 | 	mov	local06, local01
07e18     10 2B 02 F6 | 	mov	local07, local02
07e1c     16 29 62 FC | 	wrlong	local06, local08
07e20     11 2D 02 F6 | 	mov	local08, local03
07e24     F2 28 02 FB | 	rdlong	local06, objptr
07e28     14 27 02 F6 | 	mov	local05, local06
07e2c     01 26 66 F0 | 	shl	local05, #1
07e30     14 27 02 F1 | 	add	local05, local06
07e34     02 26 66 F0 | 	shl	local05, #2
07e38     03 00 00 FF 
07e3c     00 E4 85 F1 | 	sub	objptr, ##1536
07e40     F2 26 02 F1 | 	add	local05, objptr
07e44     04 26 06 F1 | 	add	local05, #4
07e48     13 2B 62 FC | 	wrlong	local07, local05
07e4c     03 00 00 FF 
07e50     00 E4 05 F1 | 	add	objptr, ##1536
07e54     F2 2A 02 FB | 	rdlong	local07, objptr
07e58     15 29 02 F6 | 	mov	local06, local07
07e5c     01 28 66 F0 | 	shl	local06, #1
07e60     15 29 02 F1 | 	add	local06, local07
07e64     02 28 66 F0 | 	shl	local06, #2
07e68     03 00 00 FF 
07e6c     00 E4 85 F1 | 	sub	objptr, ##1536
07e70     F2 28 02 F1 | 	add	local06, objptr
07e74     08 28 06 F1 | 	add	local06, #8
07e78     14 2D 62 FC | 	wrlong	local08, local06
07e7c     03 00 00 FF 
07e80     00 E4 05 F1 | 	add	objptr, ##1536
07e84     F2 28 02 FB | 	rdlong	local06, objptr
07e88     01 28 06 F1 | 	add	local06, #1
07e8c     F2 28 62 FC | 	wrlong	local06, objptr
07e90     13 00 00 FF 
07e94     38 E4 85 F1 | 	sub	objptr, ##9784
07e98     F2 28 02 FB | 	rdlong	local06, objptr
07e9c     01 28 06 F1 | 	add	local06, #1
07ea0     F2 28 62 FC | 	wrlong	local06, objptr
07ea4     2E 00 00 FF 
07ea8     08 E4 85 F1 | 	sub	objptr, ##23560
07eac     34 04 90 FD | 	jmp	#LR__0676
07eb0                 | LR__0665
07eb0                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
07eb0     01 24 0E F2 | 	cmp	local04, #1 wz
07eb4     48 00 90 5D |  if_ne	jmp	#LR__0666
07eb8     00 C0 1F FF 
07ebc     00 28 06 F6 | 	mov	local06, ##1065353216
07ec0     2E 00 00 FF 
07ec4     08 E4 05 F1 | 	add	objptr, ##23560
07ec8     F2 2C 02 FB | 	rdlong	local08, objptr
07ecc     03 2C 66 F0 | 	shl	local08, #3
07ed0     02 00 00 FF 
07ed4     38 E4 85 F1 | 	sub	objptr, ##1080
07ed8     F2 2C 02 F1 | 	add	local08, objptr
07edc     16 13 02 FB | 	rdlong	arg01, local08
07ee0     2B 00 00 FF 
07ee4     D0 E5 85 F1 | 	sub	objptr, ##22480
07ee8     54 0D B1 FD | 	call	#__system____builtin_atof
07eec     FD 14 02 F6 | 	mov	arg02, result1
07ef0     14 13 02 F6 | 	mov	arg01, local06
07ef4     60 05 B1 FD | 	call	#__system___float_mul
07ef8     FD 1E 02 F6 | 	mov	local01, result1
07efc     1E 22 06 F6 | 	mov	local03, #30
07f00                 | LR__0666
07f00                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
07f00     FF FF 7F FF 
07f04     FF 25 0E F2 | 	cmp	local04, ##-1 wz
07f08     48 00 90 5D |  if_ne	jmp	#LR__0667
07f0c     00 C0 5F FF 
07f10     00 28 06 F6 | 	mov	local06, ##-1082130432
07f14     2E 00 00 FF 
07f18     08 E4 05 F1 | 	add	objptr, ##23560
07f1c     F2 2C 02 FB | 	rdlong	local08, objptr
07f20     03 2C 66 F0 | 	shl	local08, #3
07f24     02 00 00 FF 
07f28     38 E4 85 F1 | 	sub	objptr, ##1080
07f2c     F2 2C 02 F1 | 	add	local08, objptr
07f30     16 13 02 FB | 	rdlong	arg01, local08
07f34     2B 00 00 FF 
07f38     D0 E5 85 F1 | 	sub	objptr, ##22480
07f3c     00 0D B1 FD | 	call	#__system____builtin_atof
07f40     FD 14 02 F6 | 	mov	arg02, result1
07f44     14 13 02 F6 | 	mov	arg01, local06
07f48     0C 05 B1 FD | 	call	#__system___float_mul
07f4c     FD 1E 02 F6 | 	mov	local01, result1
07f50     1E 22 06 F6 | 	mov	local03, #30
07f54                 | LR__0667
07f54     0F 29 02 F6 | 	mov	local06, local01
07f58     10 2B 02 F6 | 	mov	local07, local02
07f5c     11 27 02 F6 | 	mov	local05, local03
07f60     41 00 00 FF 
07f64     40 E4 05 F1 | 	add	objptr, ##33344
07f68     F2 1E 02 FB | 	rdlong	local01, objptr
07f6c     0F 2D 02 F6 | 	mov	local08, local01
07f70     01 2C 66 F0 | 	shl	local08, #1
07f74     0F 2D 02 F1 | 	add	local08, local01
07f78     02 2C 66 F0 | 	shl	local08, #2
07f7c     03 00 00 FF 
07f80     00 E4 85 F1 | 	sub	objptr, ##1536
07f84     F2 2C 02 F1 | 	add	local08, objptr
07f88     16 29 62 FC | 	wrlong	local06, local08
07f8c     03 00 00 FF 
07f90     00 E4 05 F1 | 	add	objptr, ##1536
07f94     F2 2C 02 FB | 	rdlong	local08, objptr
07f98     16 29 02 F6 | 	mov	local06, local08
07f9c     01 28 66 F0 | 	shl	local06, #1
07fa0     16 29 02 F1 | 	add	local06, local08
07fa4     02 28 66 F0 | 	shl	local06, #2
07fa8     03 00 00 FF 
07fac     00 E4 85 F1 | 	sub	objptr, ##1536
07fb0     F2 28 02 F1 | 	add	local06, objptr
07fb4     04 28 06 F1 | 	add	local06, #4
07fb8     14 2B 62 FC | 	wrlong	local07, local06
07fbc     03 00 00 FF 
07fc0     00 E4 05 F1 | 	add	objptr, ##1536
07fc4     F2 2C 02 FB | 	rdlong	local08, objptr
07fc8     16 2B 02 F6 | 	mov	local07, local08
07fcc     01 2A 66 F0 | 	shl	local07, #1
07fd0     16 2B 02 F1 | 	add	local07, local08
07fd4     02 2A 66 F0 | 	shl	local07, #2
07fd8     03 00 00 FF 
07fdc     00 E4 85 F1 | 	sub	objptr, ##1536
07fe0     F2 2A 02 F1 | 	add	local07, objptr
07fe4     08 2A 06 F1 | 	add	local07, #8
07fe8     15 27 62 FC | 	wrlong	local05, local07
07fec     03 00 00 FF 
07ff0     00 E4 05 F1 | 	add	objptr, ##1536
07ff4     F2 28 02 FB | 	rdlong	local06, objptr
07ff8     01 28 06 F1 | 	add	local06, #1
07ffc     F2 28 62 FC | 	wrlong	local06, objptr
08000     13 00 00 FF 
08004     38 E4 85 F1 | 	sub	objptr, ##9784
08008     F2 28 02 FB | 	rdlong	local06, objptr
0800c     01 28 06 F1 | 	add	local06, #1
08010     F2 28 62 FC | 	wrlong	local06, objptr
08014     2E 00 00 FF 
08018     08 E4 85 F1 | 	sub	objptr, ##23560
0801c     C4 02 90 FD | 	jmp	#LR__0676
08020                 | LR__0668
08020     1F 22 06 F6 | 	mov	local03, #31
08024     2E 00 00 FF 
08028     08 E4 05 F1 | 	add	objptr, ##23560
0802c     F2 16 02 FB | 	rdlong	arg03, objptr
08030     03 16 66 F0 | 	shl	arg03, #3
08034     02 00 00 FF 
08038     38 E4 85 F1 | 	sub	objptr, ##1080
0803c     F2 16 02 F1 | 	add	arg03, objptr
08040     0B 13 02 FB | 	rdlong	arg01, arg03
08044     2B 00 00 FF 
08048     D0 E5 85 F1 | 	sub	objptr, ##22480
0804c     09 2F 02 F6 | 	mov	local09, arg01
08050     97 06 48 FB | 	callpa	#(@LR__0670-@LR__0669)>>2,fcache_load_ptr_
08054                 | LR__0669
08054     17 FB C9 FA | 	rdbyte	result1, local09 wz
08058     01 2E 06 51 |  if_ne	add	local09, #1
0805c     F4 FF 9F 5D |  if_ne	jmp	#LR__0669
08060                 | LR__0670
08060     09 2F 82 F1 | 	sub	local09, arg01
08064     17 FB 01 F6 | 	mov	result1, local09
08068     52 00 00 FF 
0806c     6C E4 05 F1 | 	add	objptr, ##42092
08070     F2 FA 61 FC | 	wrlong	result1, objptr
08074     30 E4 85 F1 | 	sub	objptr, #48
08078     F2 12 02 FB | 	rdlong	arg01, objptr
0807c     FD 12 82 F1 | 	sub	arg01, result1
08080     04 12 86 F1 | 	sub	arg01, #4
08084     03 12 26 F5 | 	andn	arg01, #3
08088     F2 12 62 FC | 	wrlong	arg01, objptr
0808c     30 E4 05 F1 | 	add	objptr, #48
08090     F2 14 02 FB | 	rdlong	arg02, objptr
08094     01 16 06 F6 | 	mov	arg03, #1
08098     00 18 06 F6 | 	mov	arg04, #0
0809c     46 00 00 FF 
080a0     AC E5 85 F1 | 	sub	objptr, ##36268
080a4                 | '     return fill(addr, pattern, count, listPtr, 4)
080a4     04 1A 06 F6 | 	mov	arg05, #4
080a8     E8 D0 B0 FD | 	call	#_psram_spin2_fill
080ac                 | '     pslpoke memtop,l
080ac                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
080ac     01 30 06 F6 | 	mov	local10, #1
080b0     46 00 00 FF 
080b4     AC E5 05 F1 | 	add	objptr, ##36268
080b8     F2 32 02 FB | 	rdlong	local11, objptr
080bc     52 00 00 FF 
080c0     6C E4 85 F1 | 	sub	objptr, ##42092
080c4     01 32 06 F1 | 	add	local11, #1
080c8                 | LR__0671
080c8     19 31 52 F2 | 	cmps	local10, local11 wc
080cc     78 00 90 3D |  if_ae	jmp	#LR__0672
080d0     52 00 00 FF 
080d4     3C E4 05 F1 | 	add	objptr, ##42044
080d8     F2 2A 02 FB | 	rdlong	local07, objptr
080dc     03 2A 06 F1 | 	add	local07, #3
080e0     18 2B 02 F1 | 	add	local07, local10
080e4     24 00 00 FF 
080e8     34 E4 85 F1 | 	sub	objptr, ##18484
080ec     F2 2C 02 FB | 	rdlong	local08, objptr
080f0     03 2C 66 F0 | 	shl	local08, #3
080f4     02 00 00 FF 
080f8     38 E4 85 F1 | 	sub	objptr, ##1080
080fc     F2 2C 02 F1 | 	add	local08, objptr
08100     16 13 02 FB | 	rdlong	arg01, local08
08104     18 15 02 F6 | 	mov	arg02, local10
08108     01 16 06 F6 | 	mov	arg03, #1
0810c     2B 00 00 FF 
08110     D0 E5 85 F1 | 	sub	objptr, ##22480
08114     58 FB B0 FD | 	call	#__system__Mid_S
08118     FD 14 C2 FA | 	rdbyte	arg02, result1
0811c     15 13 02 F6 | 	mov	arg01, local07
08120     01 16 06 F6 | 	mov	arg03, #1
08124     00 18 06 F6 | 	mov	arg04, #0
08128     0B 00 00 FF 
0812c     C0 E4 05 F1 | 	add	objptr, ##5824
08130                 | '     return fill(addr, pattern, count, listPtr, 1)
08130     01 1A 06 F6 | 	mov	arg05, #1
08134     5C D0 B0 FD | 	call	#_psram_spin2_fill
08138     0B 00 00 FF 
0813c     C0 E4 85 F1 | 	sub	objptr, ##5824
08140     01 30 06 F1 | 	add	local10, #1
08144     80 FF 9F FD | 	jmp	#LR__0671
08148                 | LR__0672
08148     52 00 00 FF 
0814c     3C E4 05 F1 | 	add	objptr, ##42044
08150     F2 1E 02 FB | 	rdlong	local01, objptr
08154     2B 22 06 F6 | 	mov	local03, #43
08158     0F 29 02 F6 | 	mov	local06, local01
0815c     10 2B 02 F6 | 	mov	local07, local02
08160     11 33 02 F6 | 	mov	local11, local03
08164     10 00 00 FF 
08168     FC E5 85 F1 | 	sub	objptr, ##8700
0816c     F2 30 02 FB | 	rdlong	local10, objptr
08170     18 2D 02 F6 | 	mov	local08, local10
08174     01 2C 66 F0 | 	shl	local08, #1
08178     18 2D 02 F1 | 	add	local08, local10
0817c     02 2C 66 F0 | 	shl	local08, #2
08180     03 00 00 FF 
08184     00 E4 85 F1 | 	sub	objptr, ##1536
08188     F2 2C 02 F1 | 	add	local08, objptr
0818c     16 29 62 FC | 	wrlong	local06, local08
08190     03 00 00 FF 
08194     00 E4 05 F1 | 	add	objptr, ##1536
08198     F2 30 02 FB | 	rdlong	local10, objptr
0819c     18 2D 02 F6 | 	mov	local08, local10
081a0     01 2C 66 F0 | 	shl	local08, #1
081a4     18 2D 02 F1 | 	add	local08, local10
081a8     02 2C 66 F0 | 	shl	local08, #2
081ac     03 00 00 FF 
081b0     00 E4 85 F1 | 	sub	objptr, ##1536
081b4     F2 2C 02 F1 | 	add	local08, objptr
081b8     04 2C 06 F1 | 	add	local08, #4
081bc     16 2B 62 FC | 	wrlong	local07, local08
081c0     03 00 00 FF 
081c4     00 E4 05 F1 | 	add	objptr, ##1536
081c8     F2 30 02 FB | 	rdlong	local10, objptr
081cc     18 2D 02 F6 | 	mov	local08, local10
081d0     01 2C 66 F0 | 	shl	local08, #1
081d4     18 2D 02 F1 | 	add	local08, local10
081d8     02 2C 66 F0 | 	shl	local08, #2
081dc     03 00 00 FF 
081e0     00 E4 85 F1 | 	sub	objptr, ##1536
081e4     F2 2C 02 F1 | 	add	local08, objptr
081e8     08 2C 06 F1 | 	add	local08, #8
081ec     16 33 62 FC | 	wrlong	local11, local08
081f0     03 00 00 FF 
081f4     00 E4 05 F1 | 	add	objptr, ##1536
081f8     F2 28 02 FB | 	rdlong	local06, objptr
081fc     01 28 06 F1 | 	add	local06, #1
08200     F2 28 62 FC | 	wrlong	local06, objptr
08204     13 00 00 FF 
08208     38 E4 85 F1 | 	sub	objptr, ##9784
0820c     F2 28 02 FB | 	rdlong	local06, objptr
08210     01 28 06 F1 | 	add	local06, #1
08214     F2 28 62 FC | 	wrlong	local06, objptr
08218     2E 00 00 FF 
0821c     08 E4 85 F1 | 	sub	objptr, ##23560
08220     C0 00 90 FD | 	jmp	#LR__0676
08224                 | LR__0673
08224     12 13 02 F6 | 	mov	arg01, local04
08228     B8 03 B0 FD | 	call	#_getvar
0822c     2E 00 00 FF 
08230     08 E4 05 F1 | 	add	objptr, ##23560
08234     F2 28 02 FB | 	rdlong	local06, objptr
08238     01 28 06 F1 | 	add	local06, #1
0823c     F2 28 62 FC | 	wrlong	local06, objptr
08240     2E 00 00 FF 
08244     08 E4 85 F1 | 	sub	objptr, ##23560
08248     98 00 90 FD | 	jmp	#LR__0676
0824c                 | LR__0674
0824c     2E 00 00 FF 
08250     08 E4 05 F1 | 	add	objptr, ##23560
08254     F2 28 02 FB | 	rdlong	local06, objptr
08258     01 28 06 F1 | 	add	local06, #1
0825c     F2 28 62 FC | 	wrlong	local06, objptr
08260     2E 00 00 FF 
08264     08 E4 85 F1 | 	sub	objptr, ##23560
08268     F4 F3 BF FD | 	call	#_expr
0826c                 | '     ct+=1
0826c                 | '     expr() 
0826c                 | '     if lparts(ct).token=token_rpar then ct+=1
0826c     2E 00 00 FF 
08270     08 E4 05 F1 | 	add	objptr, ##23560
08274     F2 32 02 FB | 	rdlong	local11, objptr
08278     03 32 66 F0 | 	shl	local11, #3
0827c     02 00 00 FF 
08280     38 E4 85 F1 | 	sub	objptr, ##1080
08284     F2 32 02 F1 | 	add	local11, objptr
08288     04 32 06 F1 | 	add	local11, #4
0828c     19 33 02 FB | 	rdlong	local11, local11
08290     14 32 0E F2 | 	cmp	local11, #20 wz
08294     2B 00 00 FF 
08298     D0 E5 85 F1 | 	sub	objptr, ##22480
0829c     44 00 90 5D |  if_ne	jmp	#LR__0676
082a0     2E 00 00 FF 
082a4     08 E4 05 F1 | 	add	objptr, ##23560
082a8     F2 28 02 FB | 	rdlong	local06, objptr
082ac     01 28 06 F1 | 	add	local06, #1
082b0     F2 28 62 FC | 	wrlong	local06, objptr
082b4     2E 00 00 FF 
082b8     08 E4 85 F1 | 	sub	objptr, ##23560
082bc     24 00 90 FD | 	jmp	#LR__0676
082c0                 | LR__0675
082c0     12 13 02 F6 | 	mov	arg01, local04
082c4     28 00 B0 FD | 	call	#_getfun
082c8     2E 00 00 FF 
082cc     08 E4 05 F1 | 	add	objptr, ##23560
082d0     F2 28 02 FB | 	rdlong	local06, objptr
082d4     01 28 06 F1 | 	add	local06, #1
082d8     F2 28 62 FC | 	wrlong	local06, objptr
082dc     2E 00 00 FF 
082e0     08 E4 85 F1 | 	sub	objptr, ##23560
082e4                 | LR__0676
082e4     A7 F0 03 F6 | 	mov	ptra, fp
082e8     B2 00 A0 FD | 	call	#popregs_
082ec                 | _getvalue_ret
082ec     2D 00 64 FD | 	ret
082f0                 | 
082f0                 | ' 
082f0                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
082f0                 | _getfun
082f0     0A 4A 05 F6 | 	mov	COUNT_, #10
082f4     A8 00 A0 FD | 	call	#pushregs_
082f8                 | _getfun_enter
082f8     09 25 02 F6 | 	mov	local04, arg01
082fc     2E 00 00 FF 
08300     08 E4 05 F1 | 	add	objptr, ##23560
08304     F2 26 02 FB | 	rdlong	local05, objptr
08308     13 29 02 F6 | 	mov	local06, local05
0830c     00 2A 06 F6 | 	mov	local07, #0
08310                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
08310                 | ' oldct=ct
08310                 | ' numpar=0
08310                 | '   
08310                 | ' if lparts(ct+1).token=token_lpar then
08310     01 26 06 F1 | 	add	local05, #1
08314     03 26 66 F0 | 	shl	local05, #3
08318     02 00 00 FF 
0831c     38 E4 85 F1 | 	sub	objptr, ##1080
08320     F2 26 02 F1 | 	add	local05, objptr
08324     04 26 06 F1 | 	add	local05, #4
08328     13 27 02 FB | 	rdlong	local05, local05
0832c     15 26 0E F2 | 	cmp	local05, #21 wz
08330     2B 00 00 FF 
08334     D0 E5 85 F1 | 	sub	objptr, ##22480
08338     08 01 90 5D |  if_ne	jmp	#LR__0684
0833c     2E 00 00 FF 
08340     08 E4 05 F1 | 	add	objptr, ##23560
08344     F2 2C 02 FB | 	rdlong	local08, objptr
08348     01 2C 06 F1 | 	add	local08, #1
0834c     F2 2C 62 FC | 	wrlong	local08, objptr
08350     2E 00 00 FF 
08354     08 E4 85 F1 | 	sub	objptr, ##23560
08358                 | '   ct+=1 											' omit this lpar, this is for expr list
08358                 | '   do
08358                 | LR__0680
08358     2E 00 00 FF 
0835c     08 E4 05 F1 | 	add	objptr, ##23560
08360     F2 26 02 FB | 	rdlong	local05, objptr
08364     01 26 06 F1 | 	add	local05, #1
08368     F2 26 62 FC | 	wrlong	local05, objptr
0836c                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0836c                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
0836c     03 26 66 F0 | 	shl	local05, #3
08370     02 00 00 FF 
08374     38 E4 85 F1 | 	sub	objptr, ##1080
08378     F2 26 02 F1 | 	add	local05, objptr
0837c     04 26 06 F1 | 	add	local05, #4
08380     13 2D 02 FB | 	rdlong	local08, local05
08384     15 2C 0E F2 | 	cmp	local08, #21 wz
08388     2B 00 00 FF 
0838c     D0 E5 85 F1 | 	sub	objptr, ##22480
08390     40 00 90 5D |  if_ne	jmp	#LR__0681
08394     2E 00 00 FF 
08398     08 E4 05 F1 | 	add	objptr, ##23560
0839c     F2 2C 02 FB | 	rdlong	local08, objptr
083a0     01 2C 06 F1 | 	add	local08, #1
083a4     F2 2C 62 FC | 	wrlong	local08, objptr
083a8     2E 00 00 FF 
083ac     08 E4 85 F1 | 	sub	objptr, ##23560
083b0     AC F2 BF FD | 	call	#_expr
083b4     2E 00 00 FF 
083b8     08 E4 05 F1 | 	add	objptr, ##23560
083bc     F2 2C 02 FB | 	rdlong	local08, objptr
083c0     01 2C 06 F1 | 	add	local08, #1
083c4     F2 2C 62 FC | 	wrlong	local08, objptr
083c8     2E 00 00 FF 
083cc     08 E4 85 F1 | 	sub	objptr, ##23560
083d0     04 00 90 FD | 	jmp	#LR__0682
083d4                 | LR__0681
083d4     88 F2 BF FD | 	call	#_expr
083d8                 | LR__0682
083d8     01 2A 06 F1 | 	add	local07, #1
083dc     2E 00 00 FF 
083e0     08 E4 05 F1 | 	add	objptr, ##23560
083e4     F2 26 02 FB | 	rdlong	local05, objptr
083e8     03 26 66 F0 | 	shl	local05, #3
083ec     02 00 00 FF 
083f0     38 E4 85 F1 | 	sub	objptr, ##1080
083f4     F2 26 02 F1 | 	add	local05, objptr
083f8     04 26 06 F1 | 	add	local05, #4
083fc     13 2D 02 FB | 	rdlong	local08, local05
08400     14 2C 0E F2 | 	cmp	local08, #20 wz
08404     2B 00 00 FF 
08408     D0 E5 85 F1 | 	sub	objptr, ##22480
0840c     34 00 90 AD |  if_e	jmp	#LR__0683
08410     2E 00 00 FF 
08414     08 E4 05 F1 | 	add	objptr, ##23560
08418     F2 2C 02 FB | 	rdlong	local08, objptr
0841c     03 2C 66 F0 | 	shl	local08, #3
08420     02 00 00 FF 
08424     38 E4 85 F1 | 	sub	objptr, ##1080
08428     F2 2C 02 F1 | 	add	local08, objptr
0842c     04 2C 06 F1 | 	add	local08, #4
08430     16 2D 02 FB | 	rdlong	local08, local08
08434     FE 2D 0E F2 | 	cmp	local08, #510 wz
08438     2B 00 00 FF 
0843c     D0 E5 85 F1 | 	sub	objptr, ##22480
08440     14 FF 9F 5D |  if_ne	jmp	#LR__0680
08444                 | LR__0683
08444                 | LR__0684
08444     15 1F 02 F6 | 	mov	local01, local07
08448     03 28 66 F0 | 	shl	local06, #3
0844c     2B 00 00 FF 
08450     D0 E5 05 F1 | 	add	objptr, ##22480
08454     F2 28 02 F1 | 	add	local06, objptr
08458     04 28 06 F1 | 	add	local06, #4
0845c     14 23 02 FB | 	rdlong	local03, local06
08460     0F 2D 02 F6 | 	mov	local08, local01
08464     10 2B 02 F6 | 	mov	local07, local02
08468     11 29 02 F6 | 	mov	local06, local03
0846c     15 00 00 FF 
08470     70 E4 05 F1 | 	add	objptr, ##10864
08474     F2 26 02 FB | 	rdlong	local05, objptr
08478     13 13 02 F6 | 	mov	arg01, local05
0847c     01 12 66 F0 | 	shl	arg01, #1
08480     13 13 02 F1 | 	add	arg01, local05
08484     02 12 66 F0 | 	shl	arg01, #2
08488     03 00 00 FF 
0848c     00 E4 85 F1 | 	sub	objptr, ##1536
08490     F2 12 02 F1 | 	add	arg01, objptr
08494     09 2D 62 FC | 	wrlong	local08, arg01
08498     03 00 00 FF 
0849c     00 E4 05 F1 | 	add	objptr, ##1536
084a0     F2 2C 02 FB | 	rdlong	local08, objptr
084a4     16 2F 02 F6 | 	mov	local09, local08
084a8     01 2E 66 F0 | 	shl	local09, #1
084ac     16 2F 02 F1 | 	add	local09, local08
084b0     02 2E 66 F0 | 	shl	local09, #2
084b4     03 00 00 FF 
084b8     00 E4 85 F1 | 	sub	objptr, ##1536
084bc     F2 2E 02 F1 | 	add	local09, objptr
084c0     04 2E 06 F1 | 	add	local09, #4
084c4     17 2B 62 FC | 	wrlong	local07, local09
084c8     03 00 00 FF 
084cc     00 E4 05 F1 | 	add	objptr, ##1536
084d0     F2 2C 02 FB | 	rdlong	local08, objptr
084d4     16 31 02 F6 | 	mov	local10, local08
084d8     01 30 66 F0 | 	shl	local10, #1
084dc     16 31 02 F1 | 	add	local10, local08
084e0     02 30 66 F0 | 	shl	local10, #2
084e4     03 00 00 FF 
084e8     00 E4 85 F1 | 	sub	objptr, ##1536
084ec     F2 30 02 F1 | 	add	local10, objptr
084f0     08 30 06 F1 | 	add	local10, #8
084f4     18 29 62 FC | 	wrlong	local06, local10
084f8     03 00 00 FF 
084fc     00 E4 05 F1 | 	add	objptr, ##1536
08500     F2 2C 02 FB | 	rdlong	local08, objptr
08504     01 2C 06 F1 | 	add	local08, #1
08508     F2 2C 62 FC | 	wrlong	local08, objptr
0850c     41 00 00 FF 
08510     40 E4 85 F1 | 	sub	objptr, ##33344
08514                 | ' 
08514                 | ' t2.result.uresult=numpar
08514                 | ' 
08514                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
08514                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
08514                 | ' 
08514                 | '   
08514                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
08514     FF FF 7F FF 
08518     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0851c     B8 00 90 5D |  if_ne	jmp	#LR__0685
08520     15 22 06 F6 | 	mov	local03, #21
08524     0F 2D 02 F6 | 	mov	local08, local01
08528     10 2B 02 F6 | 	mov	local07, local02
0852c     11 29 02 F6 | 	mov	local06, local03
08530     41 00 00 FF 
08534     40 E4 05 F1 | 	add	objptr, ##33344
08538     F2 26 02 FB | 	rdlong	local05, objptr
0853c     13 13 02 F6 | 	mov	arg01, local05
08540     01 12 66 F0 | 	shl	arg01, #1
08544     13 13 02 F1 | 	add	arg01, local05
08548     02 12 66 F0 | 	shl	arg01, #2
0854c     03 00 00 FF 
08550     00 E4 85 F1 | 	sub	objptr, ##1536
08554     F2 12 02 F1 | 	add	arg01, objptr
08558     09 2D 62 FC | 	wrlong	local08, arg01
0855c     03 00 00 FF 
08560     00 E4 05 F1 | 	add	objptr, ##1536
08564     F2 30 02 FB | 	rdlong	local10, objptr
08568     18 2F 02 F6 | 	mov	local09, local10
0856c     01 2E 66 F0 | 	shl	local09, #1
08570     18 2F 02 F1 | 	add	local09, local10
08574     02 2E 66 F0 | 	shl	local09, #2
08578     03 00 00 FF 
0857c     00 E4 85 F1 | 	sub	objptr, ##1536
08580     F2 2E 02 F1 | 	add	local09, objptr
08584     04 2E 06 F1 | 	add	local09, #4
08588     17 2B 62 FC | 	wrlong	local07, local09
0858c     03 00 00 FF 
08590     00 E4 05 F1 | 	add	objptr, ##1536
08594     F2 2E 02 FB | 	rdlong	local09, objptr
08598     17 31 02 F6 | 	mov	local10, local09
0859c     01 30 66 F0 | 	shl	local10, #1
085a0     17 31 02 F1 | 	add	local10, local09
085a4     02 30 66 F0 | 	shl	local10, #2
085a8     03 00 00 FF 
085ac     00 E4 85 F1 | 	sub	objptr, ##1536
085b0     F2 30 02 F1 | 	add	local10, objptr
085b4     08 30 06 F1 | 	add	local10, #8
085b8     18 29 62 FC | 	wrlong	local06, local10
085bc     03 00 00 FF 
085c0     00 E4 05 F1 | 	add	objptr, ##1536
085c4     F2 2C 02 FB | 	rdlong	local08, objptr
085c8     01 2C 06 F1 | 	add	local08, #1
085cc     F2 2C 62 FC | 	wrlong	local08, objptr
085d0     41 00 00 FF 
085d4     40 E4 85 F1 | 	sub	objptr, ##33344
085d8                 | LR__0685
085d8     A7 F0 03 F6 | 	mov	ptra, fp
085dc     B2 00 A0 FD | 	call	#popregs_
085e0                 | _getfun_ret
085e0     2D 00 64 FD | 	ret
085e4                 | 
085e4                 | '   
085e4                 | '   
085e4                 | ' sub getvar(m as integer) 
085e4                 | _getvar
085e4     0A 4A 05 F6 | 	mov	COUNT_, #10
085e8     A8 00 A0 FD | 	call	#pushregs_
085ec                 | _getvar_enter
085ec     09 25 02 F6 | 	mov	local04, arg01
085f0     2E 00 00 FF 
085f4     08 E4 05 F1 | 	add	objptr, ##23560
085f8     F2 14 02 FB | 	rdlong	arg02, objptr
085fc     03 14 66 F0 | 	shl	arg02, #3
08600     02 00 00 FF 
08604     38 E4 85 F1 | 	sub	objptr, ##1080
08608     F2 14 02 F1 | 	add	arg02, objptr
0860c     0A 27 02 FB | 	rdlong	local05, arg02
08610     13 13 02 F6 | 	mov	arg01, local05
08614     01 14 06 F6 | 	mov	arg02, #1
08618     2B 00 00 FF 
0861c     D0 E5 85 F1 | 	sub	objptr, ##22480
08620     BC F5 B0 FD | 	call	#__system__Right_S
08624     FD 28 02 F6 | 	mov	local06, result1
08628     01 2A 66 F6 | 	neg	local07, #1
0862c                 | ' 
0862c                 | ' varname$=lparts(ct).part$
0862c                 | ' suffix$=right$(varname$,1)
0862c                 | ' j=-1
0862c                 | ' 
0862c                 | ' for i=0 to varnum-1
0862c     00 2C 06 F6 | 	mov	local08, #0
08630     2B 00 00 FF 
08634     CC E5 05 F1 | 	add	objptr, ##22476
08638     F2 2E 02 FB | 	rdlong	local09, objptr
0863c     2B 00 00 FF 
08640     CC E5 85 F1 | 	sub	objptr, ##22476
08644                 | LR__0690
08644     17 2D 52 F2 | 	cmps	local08, local09 wc
08648     38 00 90 3D |  if_ae	jmp	#LR__0691
0864c                 | '   if variables(i).name=varname$ then j=i : exit
0864c     16 15 02 F6 | 	mov	arg02, local08
08650     04 14 66 F0 | 	shl	arg02, #4
08654     0B 00 00 FF 
08658     CC E5 05 F1 | 	add	objptr, ##6092
0865c     F2 14 02 F1 | 	add	arg02, objptr
08660     0A 13 02 FB | 	rdlong	arg01, arg02
08664     13 15 02 F6 | 	mov	arg02, local05
08668     0B 00 00 FF 
0866c     CC E5 85 F1 | 	sub	objptr, ##6092
08670     FC D4 B0 FD | 	call	#__system___string_cmp
08674     00 FA 0D F2 | 	cmp	result1, #0 wz
08678     16 2B 02 A6 |  if_e	mov	local07, local08
0867c     01 2C 06 51 |  if_ne	add	local08, #1
08680     C0 FF 9F 5D |  if_ne	jmp	#LR__0690
08684                 | LR__0691
08684                 | ' if  j=-1 andalso varnum<maxvars then   
08684     FF FF 7F FF 
08688     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
0868c     A8 00 90 5D |  if_ne	jmp	#LR__0692
08690     2B 00 00 FF 
08694     CC E5 05 F1 | 	add	objptr, ##22476
08698     F2 2E 02 FB | 	rdlong	local09, objptr
0869c     2B 00 00 FF 
086a0     CC E5 85 F1 | 	sub	objptr, ##22476
086a4     01 00 00 FF 
086a8     FF 2F 56 F2 | 	cmps	local09, ##1023 wc
086ac     88 00 90 3D |  if_ae	jmp	#LR__0692
086b0     2B 00 00 FF 
086b4     CC E5 05 F1 | 	add	objptr, ##22476
086b8     F2 2E 02 FB | 	rdlong	local09, objptr
086bc     04 2E 66 F0 | 	shl	local09, #4
086c0     20 00 00 FF 
086c4     00 E4 85 F1 | 	sub	objptr, ##16384
086c8     F2 2E 02 F1 | 	add	local09, objptr
086cc     17 27 62 FC | 	wrlong	local05, local09
086d0     20 00 00 FF 
086d4     00 E4 05 F1 | 	add	objptr, ##16384
086d8     F2 2E 02 FB | 	rdlong	local09, objptr
086dc     04 2E 66 F0 | 	shl	local09, #4
086e0     20 00 00 FF 
086e4     00 E4 85 F1 | 	sub	objptr, ##16384
086e8     F2 2E 02 F1 | 	add	local09, objptr
086ec     04 2E 06 F1 | 	add	local09, #4
086f0     17 01 68 FC | 	wrlong	#0, local09
086f4     20 00 00 FF 
086f8     00 E4 05 F1 | 	add	objptr, ##16384
086fc     F2 2E 02 FB | 	rdlong	local09, objptr
08700     04 2E 66 F0 | 	shl	local09, #4
08704     20 00 00 FF 
08708     00 E4 85 F1 | 	sub	objptr, ##16384
0870c     F2 2E 02 F1 | 	add	local09, objptr
08710     0C 2E 06 F1 | 	add	local09, #12
08714     17 39 68 FC | 	wrlong	#28, local09
08718     20 00 00 FF 
0871c     00 E4 05 F1 | 	add	objptr, ##16384
08720     F2 2E 02 FB | 	rdlong	local09, objptr
08724     17 2B 02 F6 | 	mov	local07, local09
08728     01 2E 06 F1 | 	add	local09, #1
0872c     F2 2E 62 FC | 	wrlong	local09, objptr
08730     2B 00 00 FF 
08734     CC E5 85 F1 | 	sub	objptr, ##22476
08738                 | LR__0692
08738     00 2E 06 F6 | 	mov	local09, #0
0873c                 | ' numpar=0
0873c                 | ' ' check if it is an array
0873c                 | ' 
0873c                 | ' if lparts(ct+1).token=token_lpar then
0873c     2E 00 00 FF 
08740     08 E4 05 F1 | 	add	objptr, ##23560
08744     F2 2C 02 FB | 	rdlong	local08, objptr
08748     01 2C 06 F1 | 	add	local08, #1
0874c     03 2C 66 F0 | 	shl	local08, #3
08750     02 00 00 FF 
08754     38 E4 85 F1 | 	sub	objptr, ##1080
08758     F2 2C 02 F1 | 	add	local08, objptr
0875c     04 2C 06 F1 | 	add	local08, #4
08760     16 2D 02 FB | 	rdlong	local08, local08
08764     15 2C 0E F2 | 	cmp	local08, #21 wz
08768     2B 00 00 FF 
0876c     D0 E5 85 F1 | 	sub	objptr, ##22480
08770     08 01 90 5D |  if_ne	jmp	#LR__0697
08774     2E 00 00 FF 
08778     08 E4 05 F1 | 	add	objptr, ##23560
0877c     F2 30 02 FB | 	rdlong	local10, objptr
08780     01 30 06 F1 | 	add	local10, #1
08784     F2 30 62 FC | 	wrlong	local10, objptr
08788     2E 00 00 FF 
0878c     08 E4 85 F1 | 	sub	objptr, ##23560
08790                 | '   ct+=1 											' omit this lpar, this is for expr list
08790                 | '   do
08790                 | LR__0693
08790     2E 00 00 FF 
08794     08 E4 05 F1 | 	add	objptr, ##23560
08798     F2 2C 02 FB | 	rdlong	local08, objptr
0879c     01 2C 06 F1 | 	add	local08, #1
087a0     F2 2C 62 FC | 	wrlong	local08, objptr
087a4                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
087a4                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
087a4     03 2C 66 F0 | 	shl	local08, #3
087a8     02 00 00 FF 
087ac     38 E4 85 F1 | 	sub	objptr, ##1080
087b0     F2 2C 02 F1 | 	add	local08, objptr
087b4     04 2C 06 F1 | 	add	local08, #4
087b8     16 31 02 FB | 	rdlong	local10, local08
087bc     15 30 0E F2 | 	cmp	local10, #21 wz
087c0     2B 00 00 FF 
087c4     D0 E5 85 F1 | 	sub	objptr, ##22480
087c8     40 00 90 5D |  if_ne	jmp	#LR__0694
087cc     2E 00 00 FF 
087d0     08 E4 05 F1 | 	add	objptr, ##23560
087d4     F2 30 02 FB | 	rdlong	local10, objptr
087d8     01 30 06 F1 | 	add	local10, #1
087dc     F2 30 62 FC | 	wrlong	local10, objptr
087e0     2E 00 00 FF 
087e4     08 E4 85 F1 | 	sub	objptr, ##23560
087e8     74 EE BF FD | 	call	#_expr
087ec     2E 00 00 FF 
087f0     08 E4 05 F1 | 	add	objptr, ##23560
087f4     F2 30 02 FB | 	rdlong	local10, objptr
087f8     01 30 06 F1 | 	add	local10, #1
087fc     F2 30 62 FC | 	wrlong	local10, objptr
08800     2E 00 00 FF 
08804     08 E4 85 F1 | 	sub	objptr, ##23560
08808     04 00 90 FD | 	jmp	#LR__0695
0880c                 | LR__0694
0880c     50 EE BF FD | 	call	#_expr
08810                 | LR__0695
08810     01 2E 06 F1 | 	add	local09, #1
08814     2E 00 00 FF 
08818     08 E4 05 F1 | 	add	objptr, ##23560
0881c     F2 2C 02 FB | 	rdlong	local08, objptr
08820     03 2C 66 F0 | 	shl	local08, #3
08824     02 00 00 FF 
08828     38 E4 85 F1 | 	sub	objptr, ##1080
0882c     F2 2C 02 F1 | 	add	local08, objptr
08830     04 2C 06 F1 | 	add	local08, #4
08834     16 31 02 FB | 	rdlong	local10, local08
08838     14 30 0E F2 | 	cmp	local10, #20 wz
0883c     2B 00 00 FF 
08840     D0 E5 85 F1 | 	sub	objptr, ##22480
08844     34 00 90 AD |  if_e	jmp	#LR__0696
08848     2E 00 00 FF 
0884c     08 E4 05 F1 | 	add	objptr, ##23560
08850     F2 30 02 FB | 	rdlong	local10, objptr
08854     03 30 66 F0 | 	shl	local10, #3
08858     02 00 00 FF 
0885c     38 E4 85 F1 | 	sub	objptr, ##1080
08860     F2 30 02 F1 | 	add	local10, objptr
08864     04 30 06 F1 | 	add	local10, #4
08868     18 31 02 FB | 	rdlong	local10, local10
0886c     FE 31 0E F2 | 	cmp	local10, #510 wz
08870     2B 00 00 FF 
08874     D0 E5 85 F1 | 	sub	objptr, ##22480
08878     14 FF 9F 5D |  if_ne	jmp	#LR__0693
0887c                 | LR__0696
0887c                 | LR__0697
0887c     17 21 02 F6 | 	mov	local02, local09
08880     11 22 06 F6 | 	mov	local03, #17
08884     15 1F 02 F6 | 	mov	local01, local07
08888     0F 31 02 F6 | 	mov	local10, local01
0888c     10 2F 02 F6 | 	mov	local09, local02
08890     11 2D 02 F6 | 	mov	local08, local03
08894     41 00 00 FF 
08898     40 E4 05 F1 | 	add	objptr, ##33344
0889c     F2 2A 02 FB | 	rdlong	local07, objptr
088a0     15 29 02 F6 | 	mov	local06, local07
088a4     01 28 66 F0 | 	shl	local06, #1
088a8     15 29 02 F1 | 	add	local06, local07
088ac     02 28 66 F0 | 	shl	local06, #2
088b0     03 00 00 FF 
088b4     00 E4 85 F1 | 	sub	objptr, ##1536
088b8     F2 28 02 F1 | 	add	local06, objptr
088bc     14 31 62 FC | 	wrlong	local10, local06
088c0     03 00 00 FF 
088c4     00 E4 05 F1 | 	add	objptr, ##1536
088c8     F2 30 02 FB | 	rdlong	local10, objptr
088cc     18 27 02 F6 | 	mov	local05, local10
088d0     01 26 66 F0 | 	shl	local05, #1
088d4     18 27 02 F1 | 	add	local05, local10
088d8     02 26 66 F0 | 	shl	local05, #2
088dc     03 00 00 FF 
088e0     00 E4 85 F1 | 	sub	objptr, ##1536
088e4     F2 26 02 F1 | 	add	local05, objptr
088e8     04 26 06 F1 | 	add	local05, #4
088ec     13 2F 62 FC | 	wrlong	local09, local05
088f0     03 00 00 FF 
088f4     00 E4 05 F1 | 	add	objptr, ##1536
088f8     F2 30 02 FB | 	rdlong	local10, objptr
088fc     18 FB 01 F6 | 	mov	result1, local10
08900     01 FA 65 F0 | 	shl	result1, #1
08904     18 FB 01 F1 | 	add	result1, local10
08908     02 FA 65 F0 | 	shl	result1, #2
0890c     03 00 00 FF 
08910     00 E4 85 F1 | 	sub	objptr, ##1536
08914     F2 FA 01 F1 | 	add	result1, objptr
08918     08 FA 05 F1 | 	add	result1, #8
0891c     FD 2C 62 FC | 	wrlong	local08, result1
08920     03 00 00 FF 
08924     00 E4 05 F1 | 	add	objptr, ##1536
08928     F2 30 02 FB | 	rdlong	local10, objptr
0892c     01 30 06 F1 | 	add	local10, #1
08930     F2 30 62 FC | 	wrlong	local10, objptr
08934     41 00 00 FF 
08938     40 E4 85 F1 | 	sub	objptr, ##33344
0893c                 | ' 
0893c                 | ' t2.result.twowords(1)=numpar
0893c                 | ' 
0893c                 | ' 
0893c                 | ' 
0893c                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0893c                 | ' 
0893c                 | ' 
0893c                 | '  
0893c                 | ' 
0893c                 | ' 701 
0893c                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0893c                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0893c     FF FF 7F FF 
08940     FF 25 0E F2 | 	cmp	local04, ##-1 wz
08944     B8 00 90 5D |  if_ne	jmp	#LR__0698
08948     15 22 06 F6 | 	mov	local03, #21
0894c     0F 31 02 F6 | 	mov	local10, local01
08950     10 2F 02 F6 | 	mov	local09, local02
08954     11 2D 02 F6 | 	mov	local08, local03
08958     41 00 00 FF 
0895c     40 E4 05 F1 | 	add	objptr, ##33344
08960     F2 2A 02 FB | 	rdlong	local07, objptr
08964     15 29 02 F6 | 	mov	local06, local07
08968     01 28 66 F0 | 	shl	local06, #1
0896c     15 29 02 F1 | 	add	local06, local07
08970     02 28 66 F0 | 	shl	local06, #2
08974     03 00 00 FF 
08978     00 E4 85 F1 | 	sub	objptr, ##1536
0897c     F2 28 02 F1 | 	add	local06, objptr
08980     14 31 62 FC | 	wrlong	local10, local06
08984     03 00 00 FF 
08988     00 E4 05 F1 | 	add	objptr, ##1536
0898c     F2 1E 02 FB | 	rdlong	local01, objptr
08990     0F 27 02 F6 | 	mov	local05, local01
08994     01 26 66 F0 | 	shl	local05, #1
08998     0F 27 02 F1 | 	add	local05, local01
0899c     02 26 66 F0 | 	shl	local05, #2
089a0     03 00 00 FF 
089a4     00 E4 85 F1 | 	sub	objptr, ##1536
089a8     F2 26 02 F1 | 	add	local05, objptr
089ac     04 26 06 F1 | 	add	local05, #4
089b0     13 2F 62 FC | 	wrlong	local09, local05
089b4     03 00 00 FF 
089b8     00 E4 05 F1 | 	add	objptr, ##1536
089bc     F2 1E 02 FB | 	rdlong	local01, objptr
089c0     0F FB 01 F6 | 	mov	result1, local01
089c4     01 FA 65 F0 | 	shl	result1, #1
089c8     0F FB 01 F1 | 	add	result1, local01
089cc     02 FA 65 F0 | 	shl	result1, #2
089d0     03 00 00 FF 
089d4     00 E4 85 F1 | 	sub	objptr, ##1536
089d8     F2 FA 01 F1 | 	add	result1, objptr
089dc     08 FA 05 F1 | 	add	result1, #8
089e0     FD 2C 62 FC | 	wrlong	local08, result1
089e4     03 00 00 FF 
089e8     00 E4 05 F1 | 	add	objptr, ##1536
089ec     F2 30 02 FB | 	rdlong	local10, objptr
089f0     01 30 06 F1 | 	add	local10, #1
089f4     F2 30 62 FC | 	wrlong	local10, objptr
089f8     41 00 00 FF 
089fc     40 E4 85 F1 | 	sub	objptr, ##33344
08a00                 | LR__0698
08a00     A7 F0 03 F6 | 	mov	ptra, fp
08a04     B2 00 A0 FD | 	call	#popregs_
08a08                 | _getvar_ret
08a08     2D 00 64 FD | 	ret
08a0c                 | 
08a0c                 | ' 
08a0c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
08a0c                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
08a0c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
08a0c                 | ' 
08a0c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
08a0c                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
08a0c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
08a0c                 | ' 
08a0c                 | ' function execute_line (astart=0 as integer) as integer
08a0c                 | _execute_line
08a0c     04 4A 05 F6 | 	mov	COUNT_, #4
08a10     A8 00 A0 FD | 	call	#pushregs_
08a14     50 00 00 FF 
08a18     78 E5 05 F1 | 	add	objptr, ##41336
08a1c     F2 00 68 FC | 	wrlong	#0, objptr
08a20                 | ' runptr2=0
08a20                 | ' for lineptr_e=astart to lineptr-1
08a20     0F 00 00 FF 
08a24     34 E5 85 F1 | 	sub	objptr, ##7988
08a28     F2 12 62 FC | 	wrlong	arg01, objptr
08a2c     04 E4 85 F1 | 	sub	objptr, #4
08a30     F2 1E 02 FB | 	rdlong	local01, objptr
08a34     41 00 00 FF 
08a38     40 E4 85 F1 | 	sub	objptr, ##33344
08a3c                 | LR__0700
08a3c     41 00 00 FF 
08a40     44 E4 05 F1 | 	add	objptr, ##33348
08a44     F2 FA 01 FB | 	rdlong	result1, objptr
08a48     41 00 00 FF 
08a4c     44 E4 85 F1 | 	sub	objptr, ##33348
08a50     0F FB 51 F2 | 	cmps	result1, local01 wc
08a54     98 00 90 3D |  if_ae	jmp	#LR__0701
08a58     41 00 00 FF 
08a5c     44 E4 05 F1 | 	add	objptr, ##33348
08a60     F2 FA 01 FB | 	rdlong	result1, objptr
08a64     FD 20 02 F6 | 	mov	local02, result1
08a68     01 20 66 F0 | 	shl	local02, #1
08a6c     FD 20 02 F1 | 	add	local02, result1
08a70     02 20 66 F0 | 	shl	local02, #2
08a74     03 00 00 FF 
08a78     04 E4 85 F1 | 	sub	objptr, ##1540
08a7c     F2 20 02 F1 | 	add	local02, objptr
08a80     08 20 06 F1 | 	add	local02, #8
08a84     10 21 02 FB | 	rdlong	local02, local02
08a88     10 21 E2 F8 | 	getbyte	local02, local02, #0
08a8c     02 20 66 F0 | 	shl	local02, #2
08a90     04 00 00 FF 
08a94     1C E4 85 F1 | 	sub	objptr, ##2076
08a98     F2 20 02 F1 | 	add	local02, objptr
08a9c     10 21 02 FB | 	rdlong	local02, local02
08aa0     10 23 02 F6 | 	mov	local03, local02
08aa4     13 20 46 F7 | 	zerox	local02, #19
08aa8     14 22 46 F0 | 	shr	local03, #20
08aac     02 22 66 F0 | 	shl	local03, #2
08ab0     ED 22 02 F1 | 	add	local03, __methods__
08ab4     11 23 02 FB | 	rdlong	local03, local03
08ab8     3A 00 00 FF 
08abc     24 E4 85 F1 | 	sub	objptr, ##29732
08ac0     F2 24 02 F6 | 	mov	local04, objptr
08ac4     10 E5 01 F6 | 	mov	objptr, local02
08ac8     2D 22 62 FD | 	call	local03
08acc     12 E5 01 F6 | 	mov	objptr, local04
08ad0     41 00 00 FF 
08ad4     44 E4 05 F1 | 	add	objptr, ##33348
08ad8     F2 24 02 FB | 	rdlong	local04, objptr
08adc     01 24 06 F1 | 	add	local04, #1
08ae0     F2 24 62 FC | 	wrlong	local04, objptr
08ae4     41 00 00 FF 
08ae8     44 E4 85 F1 | 	sub	objptr, ##33348
08aec     4C FF 9F FD | 	jmp	#LR__0700
08af0                 | LR__0701
08af0                 | ' return runptr2
08af0     50 00 00 FF 
08af4     78 E5 05 F1 | 	add	objptr, ##41336
08af8     F2 FA 01 FB | 	rdlong	result1, objptr
08afc     50 00 00 FF 
08b00     78 E5 85 F1 | 	sub	objptr, ##41336
08b04     A7 F0 03 F6 | 	mov	ptra, fp
08b08     B2 00 A0 FD | 	call	#popregs_
08b0c                 | _execute_line_ret
08b0c     2D 00 64 FD | 	ret
08b10                 | 
08b10                 | ' 
08b10                 | ' 
08b10                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
08b10                 | ' 
08b10                 | ' function pop() as expr_result
08b10                 | _pop
08b10                 | ' 
08b10                 | ' if stackpointer=0 then
08b10     3A 00 00 FF 
08b14     1C E4 05 F1 | 	add	objptr, ##29724
08b18     F2 FA 09 FB | 	rdlong	result1, objptr wz
08b1c     3A 00 00 FF 
08b20     1C E4 85 F1 | 	sub	objptr, ##29724
08b24     FF 04 06 A6 |  if_e	mov	_var03, #255
08b28     18 00 06 A6 |  if_e	mov	_var01, #24
08b2c     68 00 90 AD |  if_e	jmp	#LR__0710
08b30     3A 00 00 FF 
08b34     1C E4 05 F1 | 	add	objptr, ##29724
08b38     F2 FA 01 FB | 	rdlong	result1, objptr
08b3c     01 FA 85 F1 | 	sub	result1, #1
08b40     F2 FA 61 FC | 	wrlong	result1, objptr
08b44     FD FE 01 F6 | 	mov	result3, result1
08b48     01 FE 65 F0 | 	shl	result3, #1
08b4c     FD FE 01 F1 | 	add	result3, result1
08b50     02 FE 65 F0 | 	shl	result3, #2
08b54     0C 00 00 FF 
08b58     0C E4 85 F1 | 	sub	objptr, ##6156
08b5c     F2 FE 01 F1 | 	add	result3, objptr
08b60     FF 00 02 FB | 	rdlong	_var01, result3
08b64     04 FE 05 F1 | 	add	result3, #4
08b68     FF FE 01 FB | 	rdlong	result3, result3
08b6c     FD FC 01 F6 | 	mov	result2, result1
08b70     01 FC 65 F0 | 	shl	result2, #1
08b74     FD FC 01 F1 | 	add	result2, result1
08b78     02 FC 65 F0 | 	shl	result2, #2
08b7c     F2 FC 01 F1 | 	add	result2, objptr
08b80     08 FC 05 F1 | 	add	result2, #8
08b84     FE FA 01 FB | 	rdlong	result1, result2
08b88     FF 02 02 F6 | 	mov	_var02, result3
08b8c     FD 04 02 F6 | 	mov	_var03, result1
08b90     2E 00 00 FF 
08b94     10 E4 85 F1 | 	sub	objptr, ##23568
08b98                 | LR__0710
08b98                 | ' return t1
08b98     01 FD 01 F6 | 	mov	result2, _var02
08b9c     02 FF 01 F6 | 	mov	result3, _var03
08ba0     00 FB 01 F6 | 	mov	result1, _var01
08ba4                 | _pop_ret
08ba4     2D 00 64 FD | 	ret
08ba8                 | 
08ba8                 | ' 
08ba8                 | ' sub push(t1 as expr_result )
08ba8                 | _push
08ba8                 | ' 
08ba8                 | ' 'print "In push: "; t1.result_type
08ba8                 | ' 'print "In push: "; t1.result.uresult
08ba8                 | ' 
08ba8                 | ' if stackpointer<maxstack then 
08ba8     3A 00 00 FF 
08bac     1C E4 05 F1 | 	add	objptr, ##29724
08bb0     F2 00 02 FB | 	rdlong	_var01, objptr
08bb4     3A 00 00 FF 
08bb8     1C E4 85 F1 | 	sub	objptr, ##29724
08bbc     01 00 00 FF 
08bc0     00 00 56 F2 | 	cmps	_var01, ##512 wc
08bc4     BC 00 90 3D |  if_ae	jmp	#LR__0720
08bc8     09 01 02 FB | 	rdlong	_var01, arg01
08bcc     04 12 06 F1 | 	add	arg01, #4
08bd0     09 03 02 FB | 	rdlong	_var02, arg01
08bd4     04 12 06 F1 | 	add	arg01, #4
08bd8     09 13 02 FB | 	rdlong	arg01, arg01
08bdc     3A 00 00 FF 
08be0     1C E4 05 F1 | 	add	objptr, ##29724
08be4     F2 04 02 FB | 	rdlong	_var03, objptr
08be8     02 07 02 F6 | 	mov	_var04, _var03
08bec     01 06 66 F0 | 	shl	_var04, #1
08bf0     02 07 02 F1 | 	add	_var04, _var03
08bf4     02 06 66 F0 | 	shl	_var04, #2
08bf8     0C 00 00 FF 
08bfc     0C E4 85 F1 | 	sub	objptr, ##6156
08c00     F2 06 02 F1 | 	add	_var04, objptr
08c04     03 01 62 FC | 	wrlong	_var01, _var04
08c08     0C 00 00 FF 
08c0c     0C E4 05 F1 | 	add	objptr, ##6156
08c10     F2 06 02 FB | 	rdlong	_var04, objptr
08c14     03 05 02 F6 | 	mov	_var03, _var04
08c18     01 04 66 F0 | 	shl	_var03, #1
08c1c     03 05 02 F1 | 	add	_var03, _var04
08c20     02 04 66 F0 | 	shl	_var03, #2
08c24     0C 00 00 FF 
08c28     0C E4 85 F1 | 	sub	objptr, ##6156
08c2c     F2 04 02 F1 | 	add	_var03, objptr
08c30     04 04 06 F1 | 	add	_var03, #4
08c34     02 03 62 FC | 	wrlong	_var02, _var03
08c38     0C 00 00 FF 
08c3c     0C E4 05 F1 | 	add	objptr, ##6156
08c40     F2 06 02 FB | 	rdlong	_var04, objptr
08c44     03 05 02 F6 | 	mov	_var03, _var04
08c48     01 04 66 F0 | 	shl	_var03, #1
08c4c     03 05 02 F1 | 	add	_var03, _var04
08c50     02 04 66 F0 | 	shl	_var03, #2
08c54     0C 00 00 FF 
08c58     0C E4 85 F1 | 	sub	objptr, ##6156
08c5c     F2 04 02 F1 | 	add	_var03, objptr
08c60     08 04 06 F1 | 	add	_var03, #8
08c64     02 13 62 FC | 	wrlong	arg01, _var03
08c68     0C 00 00 FF 
08c6c     0C E4 05 F1 | 	add	objptr, ##6156
08c70     F2 00 02 FB | 	rdlong	_var01, objptr
08c74     01 00 06 F1 | 	add	_var01, #1
08c78     F2 00 62 FC | 	wrlong	_var01, objptr
08c7c     3A 00 00 FF 
08c80     1C E4 85 F1 | 	sub	objptr, ##29724
08c84                 | LR__0720
08c84                 | _push_ret
08c84     2D 00 64 FD | 	ret
08c88                 | 
08c88                 | ' 
08c88                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
08c88                 | ' 
08c88                 | ' sub do_push
08c88                 | _do_push
08c88                 | ' if stackpointer<maxstack then 
08c88     3A 00 00 FF 
08c8c     1C E4 05 F1 | 	add	objptr, ##29724
08c90     F2 00 02 FB | 	rdlong	_var01, objptr
08c94     3A 00 00 FF 
08c98     1C E4 85 F1 | 	sub	objptr, ##29724
08c9c     01 00 00 FF 
08ca0     00 00 56 F2 | 	cmps	_var01, ##512 wc
08ca4     F8 00 90 3D |  if_ae	jmp	#LR__0730
08ca8     41 00 00 FF 
08cac     44 E4 05 F1 | 	add	objptr, ##33348
08cb0     F2 02 02 FB | 	rdlong	_var02, objptr
08cb4     01 05 02 F6 | 	mov	_var03, _var02
08cb8     01 04 66 F0 | 	shl	_var03, #1
08cbc     01 05 02 F1 | 	add	_var03, _var02
08cc0     02 04 66 F0 | 	shl	_var03, #2
08cc4     03 00 00 FF 
08cc8     04 E4 85 F1 | 	sub	objptr, ##1540
08ccc     F2 04 02 F1 | 	add	_var03, objptr
08cd0     02 01 02 FB | 	rdlong	_var01, _var03
08cd4     04 04 06 F1 | 	add	_var03, #4
08cd8     02 07 02 FB | 	rdlong	_var04, _var03
08cdc     01 05 02 F6 | 	mov	_var03, _var02
08ce0     01 04 66 F0 | 	shl	_var03, #1
08ce4     01 05 02 F1 | 	add	_var03, _var02
08ce8     02 04 66 F0 | 	shl	_var03, #2
08cec     F2 04 02 F1 | 	add	_var03, objptr
08cf0     08 04 06 F1 | 	add	_var03, #8
08cf4     02 03 02 FB | 	rdlong	_var02, _var03
08cf8     04 00 00 FF 
08cfc     24 E4 85 F1 | 	sub	objptr, ##2084
08d00     F2 04 02 FB | 	rdlong	_var03, objptr
08d04     02 09 02 F6 | 	mov	_var05, _var03
08d08     01 08 66 F0 | 	shl	_var05, #1
08d0c     02 09 02 F1 | 	add	_var05, _var03
08d10     02 08 66 F0 | 	shl	_var05, #2
08d14     0C 00 00 FF 
08d18     0C E4 85 F1 | 	sub	objptr, ##6156
08d1c     F2 08 02 F1 | 	add	_var05, objptr
08d20     04 01 62 FC | 	wrlong	_var01, _var05
08d24     0C 00 00 FF 
08d28     0C E4 05 F1 | 	add	objptr, ##6156
08d2c     F2 08 02 FB | 	rdlong	_var05, objptr
08d30     04 05 02 F6 | 	mov	_var03, _var05
08d34     01 04 66 F0 | 	shl	_var03, #1
08d38     04 05 02 F1 | 	add	_var03, _var05
08d3c     02 04 66 F0 | 	shl	_var03, #2
08d40     0C 00 00 FF 
08d44     0C E4 85 F1 | 	sub	objptr, ##6156
08d48     F2 04 02 F1 | 	add	_var03, objptr
08d4c     04 04 06 F1 | 	add	_var03, #4
08d50     02 07 62 FC | 	wrlong	_var04, _var03
08d54     0C 00 00 FF 
08d58     0C E4 05 F1 | 	add	objptr, ##6156
08d5c     F2 08 02 FB | 	rdlong	_var05, objptr
08d60     04 07 02 F6 | 	mov	_var04, _var05
08d64     01 06 66 F0 | 	shl	_var04, #1
08d68     04 07 02 F1 | 	add	_var04, _var05
08d6c     02 06 66 F0 | 	shl	_var04, #2
08d70     0C 00 00 FF 
08d74     0C E4 85 F1 | 	sub	objptr, ##6156
08d78     F2 06 02 F1 | 	add	_var04, objptr
08d7c     08 06 06 F1 | 	add	_var04, #8
08d80     03 03 62 FC | 	wrlong	_var02, _var04
08d84     0C 00 00 FF 
08d88     0C E4 05 F1 | 	add	objptr, ##6156
08d8c     F2 00 02 FB | 	rdlong	_var01, objptr
08d90     01 00 06 F1 | 	add	_var01, #1
08d94     F2 00 62 FC | 	wrlong	_var01, objptr
08d98     3A 00 00 FF 
08d9c     1C E4 85 F1 | 	sub	objptr, ##29724
08da0                 | LR__0730
08da0                 | _do_push_ret
08da0     2D 00 64 FD | 	ret
08da4                 | 
08da4                 | ' 
08da4                 | '   
08da4                 | ' sub csave_block(address as ulong)
08da4                 | _csave_block
08da4     09 01 02 F6 | 	mov	_var01, arg01
08da8                 | ' 
08da8                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
08da8                 | ' ' we enter it at the state of playing 1 kHz header tone
08da8                 | ' 
08da8                 | ' for i=0 to 63 step 2
08da8     00 02 06 F6 | 	mov	_var02, #0
08dac                 | LR__0740
08dac                 | '   do: loop until lpeek(base+32*7)>32768
08dac     2D 00 00 FF 
08db0     D4 E5 05 F1 | 	add	objptr, ##23508
08db4     97 0C 48 FB | 	callpa	#(@LR__0742-@LR__0741)>>2,fcache_load_ptr_
08db8                 | LR__0741
08db8     F2 12 02 FB | 	rdlong	arg01, objptr
08dbc     E0 12 06 F1 | 	add	arg01, #224
08dc0     09 FB 01 FB | 	rdlong	result1, arg01
08dc4     40 00 00 FF 
08dc8     01 FA 55 F2 | 	cmps	result1, ##32769 wc
08dcc     E8 FF 9F CD |  if_b	jmp	#LR__0741
08dd0                 | LR__0742
08dd0     00 13 02 F6 | 	mov	arg01, _var01
08dd4     01 05 02 F6 | 	mov	_var03, _var02
08dd8     02 04 66 F0 | 	shl	_var03, #2
08ddc     02 13 02 F1 | 	add	arg01, _var03
08de0     09 07 02 FB | 	rdlong	_var04, arg01
08de4     24 00 00 FF 
08de8     B8 E4 05 F1 | 	add	objptr, ##18616
08dec     F2 06 62 FC | 	wrlong	_var04, objptr
08df0     52 00 00 FF 
08df4     8C E4 85 F1 | 	sub	objptr, ##42124
08df8                 | '   q=lpeek(address+4*i)
08df8                 | '      for bit=0 to 31
08df8     00 08 06 F6 | 	mov	_var05, #0
08dfc     97 84 48 FB | 	callpa	#(@LR__0747-@LR__0743)>>2,fcache_load_ptr_
08e00                 | LR__0743
08e00                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
08e00     52 00 00 FF 
08e04     8C E4 05 F1 | 	add	objptr, ##42124
08e08     F2 06 02 FB | 	rdlong	_var04, objptr
08e0c     52 00 00 FF 
08e10     8C E4 85 F1 | 	sub	objptr, ##42124
08e14     04 05 C2 F9 | 	decod	_var03, _var05
08e18     02 07 CA F7 | 	test	_var04, _var03 wz
08e1c     60 00 90 AD |  if_e	jmp	#LR__0744
08e20     04 05 02 F6 | 	mov	_var03, _var05
08e24     02 04 66 F0 | 	shl	_var03, #2
08e28     4E 00 00 FF 
08e2c     70 E4 05 F1 | 	add	objptr, ##40048
08e30     F2 04 02 F1 | 	add	_var03, objptr
08e34     02 FF 48 FC | 	wrbyte	#127, _var03
08e38     04 05 02 F6 | 	mov	_var03, _var05
08e3c     02 04 66 F0 | 	shl	_var03, #2
08e40     01 04 06 F1 | 	add	_var03, #1
08e44     F2 04 02 F1 | 	add	_var03, objptr
08e48     02 01 49 FC | 	wrbyte	#128, _var03
08e4c     04 05 02 F6 | 	mov	_var03, _var05
08e50     02 04 66 F0 | 	shl	_var03, #2
08e54     02 04 06 F1 | 	add	_var03, #2
08e58     F2 04 02 F1 | 	add	_var03, objptr
08e5c     02 FF 48 FC | 	wrbyte	#127, _var03
08e60     04 05 02 F6 | 	mov	_var03, _var05
08e64     02 04 66 F0 | 	shl	_var03, #2
08e68     03 04 06 F1 | 	add	_var03, #3
08e6c     F2 04 02 F1 | 	add	_var03, objptr
08e70     02 01 49 FC | 	wrbyte	#128, _var03
08e74     4E 00 00 FF 
08e78     70 E4 85 F1 | 	sub	objptr, ##40048
08e7c     5C 00 90 FD | 	jmp	#LR__0745
08e80                 | LR__0744
08e80     04 05 02 F6 | 	mov	_var03, _var05
08e84     02 04 66 F0 | 	shl	_var03, #2
08e88     4E 00 00 FF 
08e8c     70 E4 05 F1 | 	add	objptr, ##40048
08e90     F2 04 02 F1 | 	add	_var03, objptr
08e94     02 01 49 FC | 	wrbyte	#128, _var03
08e98     04 05 02 F6 | 	mov	_var03, _var05
08e9c     02 04 66 F0 | 	shl	_var03, #2
08ea0     01 04 06 F1 | 	add	_var03, #1
08ea4     F2 04 02 F1 | 	add	_var03, objptr
08ea8     02 01 49 FC | 	wrbyte	#128, _var03
08eac     04 05 02 F6 | 	mov	_var03, _var05
08eb0     02 04 66 F0 | 	shl	_var03, #2
08eb4     02 04 06 F1 | 	add	_var03, #2
08eb8     F2 04 02 F1 | 	add	_var03, objptr
08ebc     02 FF 48 FC | 	wrbyte	#127, _var03
08ec0     04 05 02 F6 | 	mov	_var03, _var05
08ec4     02 04 66 F0 | 	shl	_var03, #2
08ec8     03 04 06 F1 | 	add	_var03, #3
08ecc     F2 04 02 F1 | 	add	_var03, objptr
08ed0     02 FF 48 FC | 	wrbyte	#127, _var03
08ed4     4E 00 00 FF 
08ed8     70 E4 85 F1 | 	sub	objptr, ##40048
08edc                 | LR__0745
08edc     01 08 06 F1 | 	add	_var05, #1
08ee0     20 08 56 F2 | 	cmps	_var05, #32 wc
08ee4     18 FF 9F CD |  if_b	jmp	#LR__0743
08ee8                 | '   do: loop until lpeek(base+32*7)<32768
08ee8     2D 00 00 FF 
08eec     D4 E5 05 F1 | 	add	objptr, ##23508
08ef0                 | LR__0746
08ef0     F2 12 02 FB | 	rdlong	arg01, objptr
08ef4     E0 12 06 F1 | 	add	arg01, #224
08ef8     09 FB 01 FB | 	rdlong	result1, arg01
08efc     40 00 00 FF 
08f00     00 FA 55 F2 | 	cmps	result1, ##32768 wc
08f04     E8 FF 9F 3D |  if_ae	jmp	#LR__0746
08f08                 | LR__0747
08f08     00 13 02 F6 | 	mov	arg01, _var01
08f0c     04 12 06 F1 | 	add	arg01, #4
08f10     01 05 02 F6 | 	mov	_var03, _var02
08f14     02 04 66 F0 | 	shl	_var03, #2
08f18     02 13 02 F1 | 	add	arg01, _var03
08f1c     09 07 02 FB | 	rdlong	_var04, arg01
08f20     24 00 00 FF 
08f24     B8 E4 05 F1 | 	add	objptr, ##18616
08f28     F2 06 62 FC | 	wrlong	_var04, objptr
08f2c     52 00 00 FF 
08f30     8C E4 85 F1 | 	sub	objptr, ##42124
08f34                 | '   q=lpeek(address+4+4*i)
08f34                 | '      for bit=0 to 31
08f34     00 08 06 F6 | 	mov	_var05, #0
08f38     97 94 48 FB | 	callpa	#(@LR__0751-@LR__0748)>>2,fcache_load_ptr_
08f3c                 | LR__0748
08f3c                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
08f3c     52 00 00 FF 
08f40     8C E4 05 F1 | 	add	objptr, ##42124
08f44     F2 06 02 FB | 	rdlong	_var04, objptr
08f48     52 00 00 FF 
08f4c     8C E4 85 F1 | 	sub	objptr, ##42124
08f50     04 05 C2 F9 | 	decod	_var03, _var05
08f54     02 07 CA F7 | 	test	_var04, _var03 wz
08f58     80 00 90 AD |  if_e	jmp	#LR__0749
08f5c     04 0B 02 F6 | 	mov	_var06, _var05
08f60     02 0A 66 F0 | 	shl	_var06, #2
08f64     80 04 06 F6 | 	mov	_var03, #128
08f68     05 05 02 F1 | 	add	_var03, _var06
08f6c     4E 00 00 FF 
08f70     70 E4 05 F1 | 	add	objptr, ##40048
08f74     F2 04 02 F1 | 	add	_var03, objptr
08f78     02 FF 48 FC | 	wrbyte	#127, _var03
08f7c     04 0B 02 F6 | 	mov	_var06, _var05
08f80     02 0A 66 F0 | 	shl	_var06, #2
08f84     80 04 06 F6 | 	mov	_var03, #128
08f88     05 05 02 F1 | 	add	_var03, _var06
08f8c     01 04 06 F1 | 	add	_var03, #1
08f90     F2 04 02 F1 | 	add	_var03, objptr
08f94     02 01 49 FC | 	wrbyte	#128, _var03
08f98     04 0B 02 F6 | 	mov	_var06, _var05
08f9c     02 0A 66 F0 | 	shl	_var06, #2
08fa0     80 04 06 F6 | 	mov	_var03, #128
08fa4     05 05 02 F1 | 	add	_var03, _var06
08fa8     02 04 06 F1 | 	add	_var03, #2
08fac     F2 04 02 F1 | 	add	_var03, objptr
08fb0     02 FF 48 FC | 	wrbyte	#127, _var03
08fb4     04 0B 02 F6 | 	mov	_var06, _var05
08fb8     02 0A 66 F0 | 	shl	_var06, #2
08fbc     80 04 06 F6 | 	mov	_var03, #128
08fc0     05 05 02 F1 | 	add	_var03, _var06
08fc4     03 04 06 F1 | 	add	_var03, #3
08fc8     F2 04 02 F1 | 	add	_var03, objptr
08fcc     02 01 49 FC | 	wrbyte	#128, _var03
08fd0     4E 00 00 FF 
08fd4     70 E4 85 F1 | 	sub	objptr, ##40048
08fd8     7C 00 90 FD | 	jmp	#LR__0750
08fdc                 | LR__0749
08fdc     04 0B 02 F6 | 	mov	_var06, _var05
08fe0     02 0A 66 F0 | 	shl	_var06, #2
08fe4     80 04 06 F6 | 	mov	_var03, #128
08fe8     05 05 02 F1 | 	add	_var03, _var06
08fec     4E 00 00 FF 
08ff0     70 E4 05 F1 | 	add	objptr, ##40048
08ff4     F2 04 02 F1 | 	add	_var03, objptr
08ff8     02 01 49 FC | 	wrbyte	#128, _var03
08ffc     04 0B 02 F6 | 	mov	_var06, _var05
09000     02 0A 66 F0 | 	shl	_var06, #2
09004     80 04 06 F6 | 	mov	_var03, #128
09008     05 05 02 F1 | 	add	_var03, _var06
0900c     01 04 06 F1 | 	add	_var03, #1
09010     F2 04 02 F1 | 	add	_var03, objptr
09014     02 01 49 FC | 	wrbyte	#128, _var03
09018     04 0B 02 F6 | 	mov	_var06, _var05
0901c     02 0A 66 F0 | 	shl	_var06, #2
09020     80 04 06 F6 | 	mov	_var03, #128
09024     05 05 02 F1 | 	add	_var03, _var06
09028     02 04 06 F1 | 	add	_var03, #2
0902c     F2 04 02 F1 | 	add	_var03, objptr
09030     02 FF 48 FC | 	wrbyte	#127, _var03
09034     04 0B 02 F6 | 	mov	_var06, _var05
09038     02 0A 66 F0 | 	shl	_var06, #2
0903c     80 04 06 F6 | 	mov	_var03, #128
09040     05 05 02 F1 | 	add	_var03, _var06
09044     03 04 06 F1 | 	add	_var03, #3
09048     F2 04 02 F1 | 	add	_var03, objptr
0904c     02 FF 48 FC | 	wrbyte	#127, _var03
09050     4E 00 00 FF 
09054     70 E4 85 F1 | 	sub	objptr, ##40048
09058                 | LR__0750
09058     01 08 06 F1 | 	add	_var05, #1
0905c     20 08 56 F2 | 	cmps	_var05, #32 wc
09060     D8 FE 9F CD |  if_b	jmp	#LR__0748
09064                 | LR__0751
09064     02 02 06 F1 | 	add	_var02, #2
09068     40 02 56 F2 | 	cmps	_var02, #64 wc
0906c     3C FD 9F CD |  if_b	jmp	#LR__0740
09070                 | ' do: loop until lpeek(base+32*7)>32768
09070     2D 00 00 FF 
09074     D4 E5 05 F1 | 	add	objptr, ##23508
09078     97 84 48 FB | 	callpa	#(@LR__0760-@LR__0752)>>2,fcache_load_ptr_
0907c                 | LR__0752
0907c     F2 12 02 FB | 	rdlong	arg01, objptr
09080     E0 12 06 F1 | 	add	arg01, #224
09084     09 FB 01 FB | 	rdlong	result1, arg01
09088     40 00 00 FF 
0908c     01 FA 55 F2 | 	cmps	result1, ##32769 wc
09090     E8 FF 9F CD |  if_b	jmp	#LR__0752
09094     2D 00 00 FF 
09098     D4 E5 85 F1 | 	sub	objptr, ##23508
0909c                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0909c     00 02 06 F6 | 	mov	_var02, #0
090a0                 | LR__0753
090a0     01 07 52 F6 | 	abs	_var04, _var02 wc
090a4     07 06 06 F5 | 	and	_var04, #7
090a8     03 07 82 F6 | 	negc	_var04, _var04
090ac     04 06 56 F2 | 	cmps	_var04, #4 wc
090b0     20 00 90 3D |  if_ae	jmp	#LR__0754
090b4     01 0B 02 F6 | 	mov	_var06, _var02
090b8     4E 00 00 FF 
090bc     70 E4 05 F1 | 	add	objptr, ##40048
090c0     F2 0A 02 F1 | 	add	_var06, objptr
090c4     05 FF 48 FC | 	wrbyte	#127, _var06
090c8     4E 00 00 FF 
090cc     70 E4 85 F1 | 	sub	objptr, ##40048
090d0     1C 00 90 FD | 	jmp	#LR__0755
090d4                 | LR__0754
090d4     01 0B 02 F6 | 	mov	_var06, _var02
090d8     4E 00 00 FF 
090dc     70 E4 05 F1 | 	add	objptr, ##40048
090e0     F2 0A 02 F1 | 	add	_var06, objptr
090e4     05 01 49 FC | 	wrbyte	#128, _var06
090e8     4E 00 00 FF 
090ec     70 E4 85 F1 | 	sub	objptr, ##40048
090f0                 | LR__0755
090f0     01 02 06 F1 | 	add	_var02, #1
090f4     80 02 56 F2 | 	cmps	_var02, #128 wc
090f8     A4 FF 9F CD |  if_b	jmp	#LR__0753
090fc                 | ' 
090fc                 | ' do: loop until lpeek(base+32*7)<32768
090fc     2D 00 00 FF 
09100     D4 E5 05 F1 | 	add	objptr, ##23508
09104                 | LR__0756
09104     F2 12 02 FB | 	rdlong	arg01, objptr
09108     E0 12 06 F1 | 	add	arg01, #224
0910c     09 FB 01 FB | 	rdlong	result1, arg01
09110     40 00 00 FF 
09114     00 FA 55 F2 | 	cmps	result1, ##32768 wc
09118     E8 FF 9F 3D |  if_ae	jmp	#LR__0756
0911c     2D 00 00 FF 
09120     D4 E5 85 F1 | 	sub	objptr, ##23508
09124                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
09124     80 02 06 F6 | 	mov	_var02, #128
09128                 | LR__0757
09128     01 07 52 F6 | 	abs	_var04, _var02 wc
0912c     07 06 06 F5 | 	and	_var04, #7
09130     03 07 82 F6 | 	negc	_var04, _var04
09134     04 06 56 F2 | 	cmps	_var04, #4 wc
09138     20 00 90 3D |  if_ae	jmp	#LR__0758
0913c     01 0B 02 F6 | 	mov	_var06, _var02
09140     4E 00 00 FF 
09144     70 E4 05 F1 | 	add	objptr, ##40048
09148     F2 0A 02 F1 | 	add	_var06, objptr
0914c     05 FF 48 FC | 	wrbyte	#127, _var06
09150     4E 00 00 FF 
09154     70 E4 85 F1 | 	sub	objptr, ##40048
09158     1C 00 90 FD | 	jmp	#LR__0759
0915c                 | LR__0758
0915c     01 0B 02 F6 | 	mov	_var06, _var02
09160     4E 00 00 FF 
09164     70 E4 05 F1 | 	add	objptr, ##40048
09168     F2 0A 02 F1 | 	add	_var06, objptr
0916c     05 01 49 FC | 	wrbyte	#128, _var06
09170     4E 00 00 FF 
09174     70 E4 85 F1 | 	sub	objptr, ##40048
09178                 | LR__0759
09178     01 02 06 F1 | 	add	_var02, #1
0917c     00 03 16 F2 | 	cmp	_var02, #256 wc
09180     A4 FF 9F CD |  if_b	jmp	#LR__0757
09184                 | LR__0760
09184                 | _csave_block_ret
09184     2D 00 64 FD | 	ret
09188                 | 
09188                 | ' 
09188                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
09188                 | _csave_addtoblock
09188     04 4A 05 F6 | 	mov	COUNT_, #4
0918c     A8 00 A0 FD | 	call	#pushregs_
09190     09 1F 02 F6 | 	mov	local01, arg01
09194                 | ' 
09194                 | ' 
09194                 | ' if force=0 then
09194     07 14 4E F7 | 	zerox	arg02, #7 wz
09198     78 00 90 5D |  if_ne	jmp	#LR__0770
0919c     50 00 00 FF 
091a0     70 E5 05 F1 | 	add	objptr, ##41328
091a4     F2 14 02 FB | 	rdlong	arg02, objptr
091a8     02 00 00 FF 
091ac     00 E4 85 F1 | 	sub	objptr, ##1024
091b0     F2 14 02 F1 | 	add	arg02, objptr
091b4     0A 1F 42 FC | 	wrbyte	local01, arg02
091b8     02 00 00 FF 
091bc     00 E4 05 F1 | 	add	objptr, ##1024
091c0     F2 1E 02 FB | 	rdlong	local01, objptr
091c4     01 1E 06 F1 | 	add	local01, #1
091c8     F2 1E 62 FC | 	wrlong	local01, objptr
091cc                 | '   block(blockptr)=d
091cc                 | '   blockptr+=1
091cc                 | '   if blockptr>=255 then
091cc     50 00 00 FF 
091d0     70 E5 85 F1 | 	sub	objptr, ##41328
091d4     FF 1E 16 F2 | 	cmp	local01, #255 wc
091d8     E4 00 90 CD |  if_b	jmp	#LR__0774
091dc     4E 00 00 FF 
091e0     70 E5 05 F1 | 	add	objptr, ##40304
091e4     F2 12 02 F6 | 	mov	arg01, objptr
091e8     4E 00 00 FF 
091ec     70 E5 85 F1 | 	sub	objptr, ##40304
091f0     B0 FB BF FD | 	call	#_csave_block
091f4     50 00 00 FF 
091f8     70 E5 05 F1 | 	add	objptr, ##41328
091fc     F2 00 68 FC | 	wrlong	#0, objptr
09200     50 00 00 FF 
09204     70 E5 85 F1 | 	sub	objptr, ##41328
09208     2C 13 06 F6 | 	mov	arg01, #300
0920c     2C CC B0 FD | 	call	#__system___waitms
09210     AC 00 90 FD | 	jmp	#LR__0774
09214                 | LR__0770
09214     50 00 00 FF 
09218     70 E5 05 F1 | 	add	objptr, ##41328
0921c     F2 20 02 FB | 	rdlong	local02, objptr
09220     02 00 00 FF 
09224     00 E4 85 F1 | 	sub	objptr, ##1024
09228     F2 20 02 F1 | 	add	local02, objptr
0922c     10 1F 42 FC | 	wrbyte	local01, local02
09230                 | '   block(blockptr)=d
09230                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
09230     02 00 00 FF 
09234     00 E4 05 F1 | 	add	objptr, ##1024
09238     F2 22 02 FB | 	rdlong	local03, objptr
0923c     50 00 00 FF 
09240     70 E5 85 F1 | 	sub	objptr, ##41328
09244     FF 22 16 F2 | 	cmp	local03, #255 wc
09248     40 00 90 3D |  if_ae	jmp	#LR__0773
0924c     50 00 00 FF 
09250     70 E5 05 F1 | 	add	objptr, ##41328
09254     F2 24 02 FB | 	rdlong	local04, objptr
09258     50 00 00 FF 
0925c     70 E5 85 F1 | 	sub	objptr, ##41328
09260                 | LR__0771
09260     00 25 56 F2 | 	cmps	local04, #256 wc
09264     24 00 90 3D |  if_ae	jmp	#LR__0772
09268     12 21 02 F6 | 	mov	local02, local04
0926c     4E 00 00 FF 
09270     70 E5 05 F1 | 	add	objptr, ##40304
09274     F2 20 02 F1 | 	add	local02, objptr
09278     10 01 48 FC | 	wrbyte	#0, local02
0927c     01 24 06 F1 | 	add	local04, #1
09280     4E 00 00 FF 
09284     70 E5 85 F1 | 	sub	objptr, ##40304
09288     D4 FF 9F FD | 	jmp	#LR__0771
0928c                 | LR__0772
0928c                 | LR__0773
0928c     4E 00 00 FF 
09290     70 E5 05 F1 | 	add	objptr, ##40304
09294     F2 12 02 F6 | 	mov	arg01, objptr
09298     4E 00 00 FF 
0929c     70 E5 85 F1 | 	sub	objptr, ##40304
092a0     00 FB BF FD | 	call	#_csave_block
092a4     50 00 00 FF 
092a8     70 E5 05 F1 | 	add	objptr, ##41328
092ac     F2 00 68 FC | 	wrlong	#0, objptr
092b0     50 00 00 FF 
092b4     70 E5 85 F1 | 	sub	objptr, ##41328
092b8     2C 13 06 F6 | 	mov	arg01, #300
092bc     7C CB B0 FD | 	call	#__system___waitms
092c0                 | LR__0774
092c0     A7 F0 03 F6 | 	mov	ptra, fp
092c4     B2 00 A0 FD | 	call	#popregs_
092c8                 | _csave_addtoblock_ret
092c8     2D 00 64 FD | 	ret
092cc                 | 
092cc                 | ' 
092cc                 | ' sub test_csave
092cc                 | _test_csave
092cc     04 4A 05 F6 | 	mov	COUNT_, #4
092d0     A8 00 A0 FD | 	call	#pushregs_
092d4     C0 F0 07 F1 | 	add	ptra, #192
092d8                 | ' 'dim fileheader,savestart, saveptr as ulong
092d8                 | ' 
092d8                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
092d8     41 00 00 FF 
092dc     48 E4 05 F1 | 	add	objptr, ##33352
092e0     F2 12 02 FB | 	rdlong	arg01, objptr
092e4     41 00 00 FF 
092e8     48 E4 85 F1 | 	sub	objptr, ##33352
092ec     F4 94 B0 FD | 	call	#_pslpeek
092f0     FF FF 7F FF 
092f4     FF FB 0D F2 | 	cmp	result1, ##-1 wz
092f8     0C 00 90 5D |  if_ne	jmp	#LR__0780
092fc     1B 12 06 F6 | 	mov	arg01, #27
09300     24 93 B0 FD | 	call	#_printerror
09304     0C 03 90 FD | 	jmp	#LR__0792
09308                 | LR__0780
09308     04 F8 BF FD | 	call	#_pop
0930c     FF 1E 02 F6 | 	mov	local01, result3
09310     90 4E 05 F1 | 	add	fp, #144
09314     A7 FA 61 FC | 	wrlong	result1, fp
09318     04 4E 05 F1 | 	add	fp, #4
0931c     A7 FC 61 FC | 	wrlong	result2, fp
09320     04 4E 05 F1 | 	add	fp, #4
09324     A7 1E 62 FC | 	wrlong	local01, fp
09328                 | ' t1=pop()
09328                 | ' if t1.result_type<>result_string then name$="noname.bas" else name$=t1.result.sresult
09328     98 4E 85 F1 | 	sub	fp, #152
0932c     1F 1E 0E F2 | 	cmp	local01, #31 wz
09330     27 01 00 5F 
09334     1A 1F 06 56 |  if_ne	mov	local01, ##@LR__4310
09338     8C 4E 05 51 |  if_ne	add	fp, #140
0933c     A7 1E 62 5C |  if_ne	wrlong	local01, fp
09340     8C 4E 85 51 |  if_ne	sub	fp, #140
09344     90 4E 05 A1 |  if_e	add	fp, #144
09348     A7 1E 02 AB |  if_e	rdlong	local01, fp
0934c     04 4E 85 A1 |  if_e	sub	fp, #4
09350     A7 1E 62 AC |  if_e	wrlong	local01, fp
09354     8C 4E 85 A1 |  if_e	sub	fp, #140
09358                 | ' 
09358                 | ' ' prepare 1 kHz header wave
09358                 | ' 
09358                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
09358     A7 00 68 FC | 	wrlong	#0, fp
0935c     97 34 48 FB | 	callpa	#(@LR__0784-@LR__0781)>>2,fcache_load_ptr_
09360                 | LR__0781
09360     A7 1E 02 FB | 	rdlong	local01, fp
09364     0F 1F 52 F6 | 	abs	local01, local01 wc
09368     07 1E 06 F5 | 	and	local01, #7
0936c     0F 1F 82 F6 | 	negc	local01, local01
09370     04 1E 56 F2 | 	cmps	local01, #4 wc
09374     20 00 90 3D |  if_ae	jmp	#LR__0782
09378     A7 1E 02 FB | 	rdlong	local01, fp
0937c     4E 00 00 FF 
09380     70 E4 05 F1 | 	add	objptr, ##40048
09384     F2 1E 02 F1 | 	add	local01, objptr
09388     0F FF 48 FC | 	wrbyte	#127, local01
0938c     4E 00 00 FF 
09390     70 E4 85 F1 | 	sub	objptr, ##40048
09394     1C 00 90 FD | 	jmp	#LR__0783
09398                 | LR__0782
09398     A7 1E 02 FB | 	rdlong	local01, fp
0939c     4E 00 00 FF 
093a0     70 E4 05 F1 | 	add	objptr, ##40048
093a4     F2 1E 02 F1 | 	add	local01, objptr
093a8     0F 01 49 FC | 	wrbyte	#128, local01
093ac     4E 00 00 FF 
093b0     70 E4 85 F1 | 	sub	objptr, ##40048
093b4                 | LR__0783
093b4     A7 1E 02 FB | 	rdlong	local01, fp
093b8     01 1E 06 F1 | 	add	local01, #1
093bc     A7 1E 62 FC | 	wrlong	local01, fp
093c0     00 1F 56 F2 | 	cmps	local01, #256 wc
093c4     98 FF 9F CD |  if_b	jmp	#LR__0781
093c8                 | LR__0784
093c8     4E 00 00 FF 
093cc     70 E4 05 F1 | 	add	objptr, ##40048
093d0     F2 14 02 F6 | 	mov	arg02, objptr
093d4     07 12 06 F6 | 	mov	arg01, #7
093d8     0F 00 00 FF 
093dc     40 17 06 F6 | 	mov	arg03, ##8000
093e0     0E 18 C6 F9 | 	decod	arg04, #14
093e4     00 1B 06 F6 | 	mov	arg05, #256
093e8     00 1C 06 F6 | 	mov	arg06, #0
093ec     42 00 00 FF 
093f0     B0 E5 85 F1 | 	sub	objptr, ##34224
093f4     B8 C3 B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
093f8     0B 00 00 FF 
093fc     C0 E4 85 F1 | 	sub	objptr, ##5824
09400     05 00 00 FF 
09404     B8 13 06 F6 | 	mov	arg01, ##3000
09408     30 CA B0 FD | 	call	#__system___waitms
0940c     50 00 00 FF 
09410     70 E5 05 F1 | 	add	objptr, ##41328
09414     F2 00 68 FC | 	wrlong	#0, objptr
09418     50 00 00 FF 
0941c     70 E5 85 F1 | 	sub	objptr, ##41328
09420     72 12 06 F6 | 	mov	arg01, #114
09424     00 14 06 F6 | 	mov	arg02, #0
09428     5C FD BF FD | 	call	#_csave_addtoblock
0942c     62 12 06 F6 | 	mov	arg01, #98
09430     00 14 06 F6 | 	mov	arg02, #0
09434     50 FD BF FD | 	call	#_csave_addtoblock
09438     61 12 06 F6 | 	mov	arg01, #97
0943c     00 14 06 F6 | 	mov	arg02, #0
09440     44 FD BF FD | 	call	#_csave_addtoblock
09444     0D 12 06 F6 | 	mov	arg01, #13
09448     00 14 06 F6 | 	mov	arg02, #0
0944c     38 FD BF FD | 	call	#_csave_addtoblock
09450                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
09450                 | ' waitms 3000 
09450                 | ' 
09450                 | ' blockptr=0
09450                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
09450                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
09450     A7 02 68 FC | 	wrlong	#1, fp
09454     8C 4E 05 F1 | 	add	fp, #140
09458     A7 12 02 FB | 	rdlong	arg01, fp
0945c     8C 4E 85 F1 | 	sub	fp, #140
09460     09 21 02 F6 | 	mov	local02, arg01
09464     97 06 48 FB | 	callpa	#(@LR__0786-@LR__0785)>>2,fcache_load_ptr_
09468                 | LR__0785
09468     10 FB C9 FA | 	rdbyte	result1, local02 wz
0946c     01 20 06 51 |  if_ne	add	local02, #1
09470     F4 FF 9F 5D |  if_ne	jmp	#LR__0785
09474                 | LR__0786
09474     09 21 82 F1 | 	sub	local02, arg01
09478     10 23 02 F6 | 	mov	local03, local02
0947c     01 22 06 F1 | 	add	local03, #1
09480                 | LR__0787
09480     A7 1E 02 FB | 	rdlong	local01, fp
09484     11 1F 52 F2 | 	cmps	local01, local03 wc
09488     34 00 90 3D |  if_ae	jmp	#LR__0788
0948c     8C 4E 05 F1 | 	add	fp, #140
09490     A7 12 02 FB | 	rdlong	arg01, fp
09494     8C 4E 85 F1 | 	sub	fp, #140
09498     A7 14 02 FB | 	rdlong	arg02, fp
0949c     01 16 06 F6 | 	mov	arg03, #1
094a0     CC E7 B0 FD | 	call	#__system__Mid_S
094a4     FD 12 C2 FA | 	rdbyte	arg01, result1
094a8     00 14 06 F6 | 	mov	arg02, #0
094ac     D8 FC BF FD | 	call	#_csave_addtoblock
094b0     A7 1E 02 FB | 	rdlong	local01, fp
094b4     01 1E 06 F1 | 	add	local01, #1
094b8     A7 1E 62 FC | 	wrlong	local01, fp
094bc     C0 FF 9F FD | 	jmp	#LR__0787
094c0                 | LR__0788
094c0     00 12 06 F6 | 	mov	arg01, #0
094c4     00 14 06 F6 | 	mov	arg02, #0
094c8     BC FC BF FD | 	call	#_csave_addtoblock
094cc     72 12 06 F6 | 	mov	arg01, #114
094d0     00 14 06 F6 | 	mov	arg02, #0
094d4     B0 FC BF FD | 	call	#_csave_addtoblock
094d8     62 12 06 F6 | 	mov	arg01, #98
094dc     00 14 06 F6 | 	mov	arg02, #0
094e0     A4 FC BF FD | 	call	#_csave_addtoblock
094e4     73 12 06 F6 | 	mov	arg01, #115
094e8     00 14 06 F6 | 	mov	arg02, #0
094ec     98 FC BF FD | 	call	#_csave_addtoblock
094f0     0D 12 06 F6 | 	mov	arg01, #13
094f4     00 14 06 F6 | 	mov	arg02, #0
094f8     8C FC BF FD | 	call	#_csave_addtoblock
094fc     41 00 00 FF 
09500     48 E4 05 F1 | 	add	objptr, ##33352
09504     F2 1E 02 FB | 	rdlong	local01, objptr
09508     41 00 00 FF 
0950c     48 E4 85 F1 | 	sub	objptr, ##33352
09510     9C 4E 05 F1 | 	add	fp, #156
09514     A7 1E 62 FC | 	wrlong	local01, fp
09518     9C 4E 85 F1 | 	sub	fp, #156
0951c                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0951c                 | ' 
0951c                 | ' saveptr=programstart
0951c                 | ' do
0951c                 | LR__0789
0951c     A0 4E 05 F1 | 	add	fp, #160
09520     A7 12 02 F6 | 	mov	arg01, fp
09524     04 4E 85 F1 | 	sub	fp, #4
09528     A7 14 02 FB | 	rdlong	arg02, fp
0952c     9C 4E 85 F1 | 	sub	fp, #156
09530     18 16 06 F6 | 	mov	arg03, #24
09534     0B 00 00 FF 
09538     C0 E4 05 F1 | 	add	objptr, ##5824
0953c     1C BB B0 FD | 	call	#_psram_spin2_read1
09540     0C 4E 05 F1 | 	add	fp, #12
09544     A7 12 02 F6 | 	mov	arg01, fp
09548     9C 4E 05 F1 | 	add	fp, #156
0954c     A7 14 02 FB | 	rdlong	arg02, fp
09550     04 4E 05 F1 | 	add	fp, #4
09554     A7 16 02 FB | 	rdlong	arg03, fp
09558     AC 4E 85 F1 | 	sub	fp, #172
0955c     FC BA B0 FD | 	call	#_psram_spin2_read1
09560     0B 00 00 FF 
09564     C0 E4 85 F1 | 	sub	objptr, ##5824
09568     AC 4E 05 F1 | 	add	fp, #172
0956c     A7 12 02 FB | 	rdlong	arg01, fp
09570     AC 4E 85 F1 | 	sub	fp, #172
09574     00 14 06 F6 | 	mov	arg02, #0
09578     0C FC BF FD | 	call	#_csave_addtoblock
0957c                 | '   psram.read1(varptr(header(0)),saveptr,24)
0957c                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0957c                 | '   csave_addtoblock(header(3),0) ' that's always <255
0957c                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
0957c     A7 00 68 FC | 	wrlong	#0, fp
09580     AC 4E 05 F1 | 	add	fp, #172
09584     A7 24 02 FB | 	rdlong	local04, fp
09588     AC 4E 85 F1 | 	sub	fp, #172
0958c                 | LR__0790
0958c     A7 1E 02 FB | 	rdlong	local01, fp
09590     12 1F 52 F2 | 	cmps	local01, local04 wc
09594     2C 00 90 3D |  if_ae	jmp	#LR__0791
09598     A7 22 02 FB | 	rdlong	local03, fp
0959c     0C 4E 05 F1 | 	add	fp, #12
095a0     A7 22 02 F1 | 	add	local03, fp
095a4     11 13 C2 FA | 	rdbyte	arg01, local03
095a8     00 14 06 F6 | 	mov	arg02, #0
095ac     0C 4E 85 F1 | 	sub	fp, #12
095b0     D4 FB BF FD | 	call	#_csave_addtoblock
095b4     A7 22 02 FB | 	rdlong	local03, fp
095b8     01 22 06 F1 | 	add	local03, #1
095bc     A7 22 62 FC | 	wrlong	local03, fp
095c0     C8 FF 9F FD | 	jmp	#LR__0790
095c4                 | LR__0791
095c4     B4 4E 05 F1 | 	add	fp, #180
095c8     A7 1E 02 FB | 	rdlong	local01, fp
095cc     18 4E 85 F1 | 	sub	fp, #24
095d0     A7 1E 62 FC | 	wrlong	local01, fp
095d4     18 4E 05 F1 | 	add	fp, #24
095d8     A7 1E 02 FB | 	rdlong	local01, fp
095dc     B4 4E 85 F1 | 	sub	fp, #180
095e0     FF FF 3F FF 
095e4     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
095e8     30 FF 9F 5D |  if_ne	jmp	#LR__0789
095ec     00 12 06 F6 | 	mov	arg01, #0
095f0     01 14 06 F6 | 	mov	arg02, #1
095f4     90 FB BF FD | 	call	#_csave_addtoblock
095f8     2D 00 00 FF 
095fc     D4 E5 05 F1 | 	add	objptr, ##23508
09600     F2 12 02 FB | 	rdlong	arg01, objptr
09604     2D 00 00 FF 
09608     D4 E5 85 F1 | 	sub	objptr, ##23508
0960c     F4 12 06 F1 | 	add	arg01, #244
09610     09 01 58 FC | 	wrword	#0, arg01
09614                 | LR__0792
09614     A7 F0 03 F6 | 	mov	ptra, fp
09618     B2 00 A0 FD | 	call	#popregs_
0961c                 | _test_csave_ret
0961c     2D 00 64 FD | 	ret
09620                 | 
09620                 | ' 
09620                 | ' ' ----------------- Save the program
09620                 | ' 
09620                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
09620                 | _do_save
09620     02 4A 05 F6 | 	mov	COUNT_, #2
09624     A8 00 A0 FD | 	call	#pushregs_
09628     01 00 00 FF 
0962c     BC F0 07 F1 | 	add	ptra, ##700
09630     01 00 00 FF 
09634     10 4E 05 F1 | 	add	fp, ##528
09638     B1 B0 86 FF 
0963c     A7 E4 68 FC | 	wrlong	##224486002, fp
09640     01 00 00 FF 
09644     10 4E 85 F1 | 	sub	fp, ##528
09648     C4 F4 BF FD | 	call	#_pop
0964c     FF 16 02 F6 | 	mov	arg03, result3
09650     A7 FA 61 FC | 	wrlong	result1, fp
09654     04 4E 05 F1 | 	add	fp, #4
09658     A7 FC 61 FC | 	wrlong	result2, fp
0965c     04 4E 05 F1 | 	add	fp, #4
09660     A7 16 62 FC | 	wrlong	arg03, fp
09664     08 4E 85 F1 | 	sub	fp, #8
09668                 | ' 
09668                 | ' fileheader=$0D616272' rba+ver'
09668                 | ' 
09668                 | ' t1=pop() 
09668                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
09668     41 00 00 FF 
0966c     48 E4 05 F1 | 	add	objptr, ##33352
09670     F2 12 02 FB | 	rdlong	arg01, objptr
09674     41 00 00 FF 
09678     48 E4 85 F1 | 	sub	objptr, ##33352
0967c     64 91 B0 FD | 	call	#_pslpeek
09680     FF FF 7F FF 
09684     FF FB 0D F2 | 	cmp	result1, ##-1 wz
09688     0C 00 90 5D |  if_ne	jmp	#LR__0800
0968c     1B 12 06 F6 | 	mov	arg01, #27
09690     94 8F B0 FD | 	call	#_printerror
09694     68 02 90 FD | 	jmp	#LR__0806
09698                 | LR__0800
09698                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
09698     08 4E 05 F1 | 	add	fp, #8
0969c     A7 16 02 FB | 	rdlong	arg03, fp
096a0     08 4E 85 F1 | 	sub	fp, #8
096a4     2B 16 0E F2 | 	cmp	arg03, #43 wz
096a8     18 00 90 5D |  if_ne	jmp	#LR__0801
096ac     A7 12 02 FB | 	rdlong	arg01, fp
096b0     48 11 B0 FD | 	call	#_convertstring
096b4     A7 FA 61 FC | 	wrlong	result1, fp
096b8     08 4E 05 F1 | 	add	fp, #8
096bc     A7 3E 68 FC | 	wrlong	#31, fp
096c0     08 4E 85 F1 | 	sub	fp, #8
096c4                 | LR__0801
096c4                 | ' if t1.result_type=result_string then
096c4     08 4E 05 F1 | 	add	fp, #8
096c8     A7 1E 02 FB | 	rdlong	local01, fp
096cc     08 4E 85 F1 | 	sub	fp, #8
096d0     1F 1E 0E F2 | 	cmp	local01, #31 wz
096d4     28 02 90 5D |  if_ne	jmp	#LR__0805
096d8                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas"
096d8     A7 12 02 FB | 	rdlong	arg01, fp
096dc     27 01 00 FF 
096e0     25 15 06 F6 | 	mov	arg02, ##@LR__4311
096e4     88 C4 B0 FD | 	call	#__system___string_cmp
096e8     00 FA 0D F2 | 	cmp	result1, #0 wz
096ec     27 01 00 AF 
096f0     26 1F 06 A6 |  if_e	mov	local01, ##@LR__4312
096f4     A7 1E 62 AC |  if_e	wrlong	local01, fp
096f8                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
096f8     09 12 06 F6 | 	mov	arg01, #9
096fc     28 0F B1 FD | 	call	#__system__close
09700     09 1E 06 F6 | 	mov	local01, #9
09704     49 00 00 FF 
09708     58 E4 05 F1 | 	add	objptr, ##37464
0970c     F2 12 02 FB | 	rdlong	arg01, objptr
09710     49 00 00 FF 
09714     58 E4 85 F1 | 	sub	objptr, ##37464
09718     27 01 00 FF 
0971c     31 15 06 F6 | 	mov	arg02, ##@LR__4313
09720     80 C4 B0 FD | 	call	#__system___string_concat
09724     FD 12 02 F6 | 	mov	arg01, result1
09728     A7 14 02 FB | 	rdlong	arg02, fp
0972c     74 C4 B0 FD | 	call	#__system___string_concat
09730     FD 14 02 F6 | 	mov	arg02, result1
09734     0F 13 02 F6 | 	mov	arg01, local01
09738     0D 16 06 F6 | 	mov	arg03, #13
0973c     0C D0 B0 FD | 	call	#__system___basic_open_string
09740     01 00 00 FF 
09744     0C 4E 05 F1 | 	add	fp, ##524
09748     A7 0A 68 FC | 	wrlong	#5, fp
0974c     41 00 00 FF 
09750     48 E4 05 F1 | 	add	objptr, ##33352
09754     F2 1E 02 FB | 	rdlong	local01, objptr
09758     41 00 00 FF 
0975c     48 E4 85 F1 | 	sub	objptr, ##33352
09760     0C 4E 05 F1 | 	add	fp, #12
09764     A7 1E 62 FC | 	wrlong	local01, fp
09768     01 00 00 FF 
0976c     18 4E 85 F1 | 	sub	fp, ##536
09770                 | ' '  put #9,1,fileheader,1
09770                 | '   i=5
09770                 | '   saveptr=programstart
09770                 | '   do
09770                 | LR__0802
09770     01 00 00 FF 
09774     1C 4E 05 F1 | 	add	fp, ##540
09778     A7 12 02 F6 | 	mov	arg01, fp
0977c     04 4E 85 F1 | 	sub	fp, #4
09780     A7 14 02 FB | 	rdlong	arg02, fp
09784     01 00 00 FF 
09788     18 4E 85 F1 | 	sub	fp, ##536
0978c     18 16 06 F6 | 	mov	arg03, #24
09790     0B 00 00 FF 
09794     C0 E4 05 F1 | 	add	objptr, ##5824
09798     C0 B8 B0 FD | 	call	#_psram_spin2_read1
0979c     01 00 00 FF 
097a0     34 4E 05 F1 | 	add	fp, ##564
097a4     A7 12 02 F6 | 	mov	arg01, fp
097a8     10 4E 85 F1 | 	sub	fp, #16
097ac     A7 14 02 FB | 	rdlong	arg02, fp
097b0     04 4E 05 F1 | 	add	fp, #4
097b4     A7 16 02 FB | 	rdlong	arg03, fp
097b8     01 00 00 FF 
097bc     28 4E 85 F1 | 	sub	fp, ##552
097c0     98 B8 B0 FD | 	call	#_psram_spin2_read1
097c4     0B 00 00 FF 
097c8     C0 E4 85 F1 | 	sub	objptr, ##5824
097cc     27 01 00 FF 
097d0     33 1F 06 F6 | 	mov	local01, ##@LR__4314
097d4     01 00 00 FF 
097d8     B4 4E 05 F1 | 	add	fp, ##692
097dc     A7 1E 62 FC | 	wrlong	local01, fp
097e0                 | '     psram.read1(varptr(header(0)),saveptr,24)
097e0                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
097e0                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
097e0     A8 4E 85 F1 | 	sub	fp, #168
097e4     A7 02 68 FC | 	wrlong	#1, fp
097e8     1C 4E 05 F1 | 	add	fp, #28
097ec     A7 20 02 FB | 	rdlong	local02, fp
097f0     01 00 00 FF 
097f4     28 4E 85 F1 | 	sub	fp, ##552
097f8     01 20 06 F1 | 	add	local02, #1
097fc                 | LR__0803
097fc     01 00 00 FF 
09800     0C 4E 05 F1 | 	add	fp, ##524
09804     A7 1E 02 FB | 	rdlong	local01, fp
09808     01 00 00 FF 
0980c     0C 4E 85 F1 | 	sub	fp, ##524
09810     10 1F 52 F2 | 	cmps	local01, local02 wc
09814     64 00 90 3D |  if_ae	jmp	#LR__0804
09818     01 00 00 FF 
0981c     B4 4E 05 F1 | 	add	fp, ##692
09820     A7 1E 02 FB | 	rdlong	local01, fp
09824     A8 4E 85 F1 | 	sub	fp, #168
09828     A7 16 02 FB | 	rdlong	arg03, fp
0982c     01 16 86 F1 | 	sub	arg03, #1
09830     28 4E 05 F1 | 	add	fp, #40
09834     A7 16 02 F1 | 	add	arg03, fp
09838     0B 13 C2 FA | 	rdbyte	arg01, arg03
0983c     01 00 00 FF 
09840     34 4E 85 F1 | 	sub	fp, ##564
09844     D4 E4 B0 FD | 	call	#__system__Chr_S
09848     FD 14 02 F6 | 	mov	arg02, result1
0984c     0F 13 02 F6 | 	mov	arg01, local01
09850     50 C3 B0 FD | 	call	#__system___string_concat
09854     01 00 00 FF 
09858     B4 4E 05 F1 | 	add	fp, ##692
0985c     A7 FA 61 FC | 	wrlong	result1, fp
09860     A8 4E 85 F1 | 	sub	fp, #168
09864     A7 1E 02 FB | 	rdlong	local01, fp
09868     01 1E 06 F1 | 	add	local01, #1
0986c     A7 1E 62 FC | 	wrlong	local01, fp
09870     01 00 00 FF 
09874     0C 4E 85 F1 | 	sub	fp, ##524
09878     80 FF 9F FD | 	jmp	#LR__0803
0987c                 | LR__0804
0987c                 | '  '   put #9,i,header(3),1 : i+=4
0987c                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
0987c                 | '      print #9, saveline$
0987c     09 12 06 F6 | 	mov	arg01, #9
09880     74 17 B1 FD | 	call	#__system___getiolock_0372
09884     FD 12 02 F6 | 	mov	arg01, result1
09888     BC C2 B0 FD | 	call	#__system___lockmem
0988c     01 00 00 FF 
09890     B4 4E 05 F1 | 	add	fp, ##692
09894     A7 14 02 FB | 	rdlong	arg02, fp
09898     01 00 00 FF 
0989c     B4 4E 85 F1 | 	sub	fp, ##692
098a0     09 12 06 F6 | 	mov	arg01, #9
098a4     00 16 06 F6 | 	mov	arg03, #0
098a8     90 CF B0 FD | 	call	#__system___basic_print_string
098ac     09 12 06 F6 | 	mov	arg01, #9
098b0     0A 14 06 F6 | 	mov	arg02, #10
098b4     00 16 06 F6 | 	mov	arg03, #0
098b8     28 CF B0 FD | 	call	#__system___basic_print_char
098bc     09 12 06 F6 | 	mov	arg01, #9
098c0     34 17 B1 FD | 	call	#__system___getiolock_0372
098c4     FD 00 68 FC | 	wrlong	#0, result1
098c8     01 00 00 FF 
098cc     30 4E 05 F1 | 	add	fp, ##560
098d0     A7 1E 02 FB | 	rdlong	local01, fp
098d4     18 4E 85 F1 | 	sub	fp, #24
098d8     A7 1E 62 FC | 	wrlong	local01, fp
098dc     18 4E 05 F1 | 	add	fp, #24
098e0     A7 1E 02 FB | 	rdlong	local01, fp
098e4     01 00 00 FF 
098e8     30 4E 85 F1 | 	sub	fp, ##560
098ec     FF FF 3F FF 
098f0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
098f4     78 FE 9F 5D |  if_ne	jmp	#LR__0802
098f8                 | '   close #9  
098f8     09 12 06 F6 | 	mov	arg01, #9
098fc     28 0D B1 FD | 	call	#__system__close
09900                 | LR__0805
09900                 | LR__0806
09900     A7 F0 03 F6 | 	mov	ptra, fp
09904     B2 00 A0 FD | 	call	#popregs_
09908                 | _do_save_ret
09908     2D 00 64 FD | 	ret
0990c                 | 
0990c                 | ' 
0990c                 | ' '----------------- Load the program
0990c                 | ' 'lo todo: errors while loading
0990c                 | ' sub do_load
0990c                 | _do_load
0990c     01 4A 05 F6 | 	mov	COUNT_, #1
09910     A8 00 A0 FD | 	call	#pushregs_
09914     A4 F0 07 F1 | 	add	ptra, #164
09918     A0 4E 05 F1 | 	add	fp, #160
0991c     A7 12 02 F6 | 	mov	arg01, fp
09920     80 4E 85 F1 | 	sub	fp, #128
09924     A7 14 02 F6 | 	mov	arg02, fp
09928     20 4E 85 F1 | 	sub	fp, #32
0992c     09 15 62 FC | 	wrlong	arg02, arg01
09930     DC F1 BF FD | 	call	#_pop
09934     FF 1A 02 F6 | 	mov	arg05, result3
09938     A7 FA 61 FC | 	wrlong	result1, fp
0993c     04 4E 05 F1 | 	add	fp, #4
09940     A7 FC 61 FC | 	wrlong	result2, fp
09944     04 4E 05 F1 | 	add	fp, #4
09948     A7 1A 62 FC | 	wrlong	arg05, fp
0994c                 | ' 
0994c                 | ' lpoke varptr(line2$),varptr(line2)
0994c                 | ' t1=pop() 
0994c                 | ' 'print "popped "; t1.result.uresult, t1.result_type
0994c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
0994c     08 4E 85 F1 | 	sub	fp, #8
09950     2B 1A 0E F2 | 	cmp	arg05, #43 wz
09954     18 00 90 5D |  if_ne	jmp	#LR__0810
09958     A7 12 02 FB | 	rdlong	arg01, fp
0995c     9C 0E B0 FD | 	call	#_convertstring
09960     A7 FA 61 FC | 	wrlong	result1, fp
09964     08 4E 05 F1 | 	add	fp, #8
09968     A7 3E 68 FC | 	wrlong	#31, fp
0996c     08 4E 85 F1 | 	sub	fp, #8
09970                 | LR__0810
09970                 | ' if t1.result_type=result_string then
09970     08 4E 05 F1 | 	add	fp, #8
09974     A7 1E 02 FB | 	rdlong	local01, fp
09978     08 4E 85 F1 | 	sub	fp, #8
0997c     1F 1E 0E F2 | 	cmp	local01, #31 wz
09980     40 03 90 5D |  if_ne	jmp	#LR__0817
09984     10 09 B0 FD | 	call	#_do_new
09988                 | '   do_new
09988                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas" 
09988     A7 12 02 FB | 	rdlong	arg01, fp
0998c     27 01 00 FF 
09990     34 15 06 F6 | 	mov	arg02, ##@LR__4315
09994     D8 C1 B0 FD | 	call	#__system___string_cmp
09998     00 FA 0D F2 | 	cmp	result1, #0 wz
0999c     27 01 00 AF 
099a0     35 1F 06 A6 |  if_e	mov	local01, ##@LR__4316
099a4     A7 1E 62 AC |  if_e	wrlong	local01, fp
099a8                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
099a8     09 12 06 F6 | 	mov	arg01, #9
099ac     78 0C B1 FD | 	call	#__system__close
099b0     09 1E 06 F6 | 	mov	local01, #9
099b4     49 00 00 FF 
099b8     58 E4 05 F1 | 	add	objptr, ##37464
099bc     F2 12 02 FB | 	rdlong	arg01, objptr
099c0     49 00 00 FF 
099c4     58 E4 85 F1 | 	sub	objptr, ##37464
099c8     27 01 00 FF 
099cc     40 15 06 F6 | 	mov	arg02, ##@LR__4317
099d0     D0 C1 B0 FD | 	call	#__system___string_concat
099d4     FD 12 02 F6 | 	mov	arg01, result1
099d8     A7 14 02 FB | 	rdlong	arg02, fp
099dc     C4 C1 B0 FD | 	call	#__system___string_concat
099e0     FD 14 02 F6 | 	mov	arg02, result1
099e4     0F 13 02 F6 | 	mov	arg01, local01
099e8     00 16 06 F6 | 	mov	arg03, #0
099ec     5C CD B0 FD | 	call	#__system___basic_open_string
099f0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
099f4     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
099f8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
099fc     10 4E 05 F1 | 	add	fp, #16
09a00     A7 FA 61 FC | 	wrlong	result1, fp
09a04                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
09a04     10 4E 85 F1 | 	sub	fp, #16
09a08     9C 00 90 AD |  if_e	jmp	#LR__0811
09a0c     00 12 06 F6 | 	mov	arg01, #0
09a10     E4 15 B1 FD | 	call	#__system___getiolock_0372
09a14     FD 12 02 F6 | 	mov	arg01, result1
09a18     2C C1 B0 FD | 	call	#__system___lockmem
09a1c     27 01 00 FF 
09a20     42 15 06 F6 | 	mov	arg02, ##@LR__4318
09a24     00 12 06 F6 | 	mov	arg01, #0
09a28     00 16 06 F6 | 	mov	arg03, #0
09a2c     0C CE B0 FD | 	call	#__system___basic_print_string
09a30     10 4E 05 F1 | 	add	fp, #16
09a34     A7 14 02 FB | 	rdlong	arg02, fp
09a38     10 4E 85 F1 | 	sub	fp, #16
09a3c     00 12 06 F6 | 	mov	arg01, #0
09a40     00 16 06 F6 | 	mov	arg03, #0
09a44     0A 18 06 F6 | 	mov	arg04, #10
09a48     34 CE B0 FD | 	call	#__system___basic_print_integer
09a4c     27 01 00 FF 
09a50     50 15 06 F6 | 	mov	arg02, ##@LR__4319
09a54     00 12 06 F6 | 	mov	arg01, #0
09a58     00 16 06 F6 | 	mov	arg03, #0
09a5c     DC CD B0 FD | 	call	#__system___basic_print_string
09a60     10 4E 05 F1 | 	add	fp, #16
09a64     A7 12 02 FB | 	rdlong	arg01, fp
09a68     10 4E 85 F1 | 	sub	fp, #16
09a6c     D4 E5 B0 FD | 	call	#__system___strerror
09a70     FD 14 02 F6 | 	mov	arg02, result1
09a74     00 12 06 F6 | 	mov	arg01, #0
09a78     00 16 06 F6 | 	mov	arg03, #0
09a7c     BC CD B0 FD | 	call	#__system___basic_print_string
09a80     00 12 06 F6 | 	mov	arg01, #0
09a84     0A 14 06 F6 | 	mov	arg02, #10
09a88     00 16 06 F6 | 	mov	arg03, #0
09a8c     54 CD B0 FD | 	call	#__system___basic_print_char
09a90     00 12 06 F6 | 	mov	arg01, #0
09a94     60 15 B1 FD | 	call	#__system___getiolock_0372
09a98     FD 00 68 FC | 	wrlong	#0, result1
09a9c     09 12 06 F6 | 	mov	arg01, #9
09aa0     84 0B B1 FD | 	call	#__system__close
09aa4     24 02 90 FD | 	jmp	#LR__0819
09aa8                 | LR__0811
09aa8     0C 4E 05 F1 | 	add	fp, #12
09aac     A7 0A 68 FC | 	wrlong	#5, fp
09ab0                 | '   i=5
09ab0                 | '   get #9,1,header,1
09ab0     0C 4E 05 F1 | 	add	fp, #12
09ab4     A7 16 02 F6 | 	mov	arg03, fp
09ab8     18 4E 85 F1 | 	sub	fp, #24
09abc     09 12 06 F6 | 	mov	arg01, #9
09ac0     01 14 06 F6 | 	mov	arg02, #1
09ac4     01 18 06 F6 | 	mov	arg04, #1
09ac8     04 1A 06 F6 | 	mov	arg05, #4
09acc     7C CE B0 FD | 	call	#__system___basic_get
09ad0                 | '   
09ad0                 | '   if header<>$0D616272 then 
09ad0     18 4E 05 F1 | 	add	fp, #24
09ad4     A7 1E 02 FB | 	rdlong	local01, fp
09ad8     18 4E 85 F1 | 	sub	fp, #24
09adc     B1 B0 06 FF 
09ae0     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
09ae4     F0 00 90 AD |  if_e	jmp	#LR__0814
09ae8                 | '     close #9: open currentdir$+"/"+t1.result.sresult for input as #9
09ae8     09 12 06 F6 | 	mov	arg01, #9
09aec     38 0B B1 FD | 	call	#__system__close
09af0     09 1E 06 F6 | 	mov	local01, #9
09af4     49 00 00 FF 
09af8     58 E4 05 F1 | 	add	objptr, ##37464
09afc     F2 12 02 FB | 	rdlong	arg01, objptr
09b00     49 00 00 FF 
09b04     58 E4 85 F1 | 	sub	objptr, ##37464
09b08     27 01 00 FF 
09b0c     53 15 06 F6 | 	mov	arg02, ##@LR__4320
09b10     90 C0 B0 FD | 	call	#__system___string_concat
09b14     FD 12 02 F6 | 	mov	arg01, result1
09b18     A7 14 02 FB | 	rdlong	arg02, fp
09b1c     84 C0 B0 FD | 	call	#__system___string_concat
09b20     FD 14 02 F6 | 	mov	arg02, result1
09b24     0F 13 02 F6 | 	mov	arg01, local01
09b28     00 16 06 F6 | 	mov	arg03, #0
09b2c     1C CC B0 FD | 	call	#__system___basic_open_string
09b30                 | '     do
09b30                 | LR__0812
09b30     09 12 06 F6 | 	mov	arg01, #9
09b34     1C C2 B0 FD | 	call	#__system___basic_read_line
09b38     2D 00 00 FF 
09b3c     E0 E5 05 F1 | 	add	objptr, ##23520
09b40     F2 FA 61 FC | 	wrlong	result1, objptr
09b44                 | '       if left$(line$,1) >="0" andalso left$(line$,1)<="9" then interpret
09b44     2D 00 00 FF 
09b48     E0 E5 85 F1 | 	sub	objptr, ##23520
09b4c     FD 12 02 F6 | 	mov	arg01, result1
09b50     01 14 06 F6 | 	mov	arg02, #1
09b54     00 E0 B0 FD | 	call	#__system__Left_S
09b58     FD 12 02 F6 | 	mov	arg01, result1
09b5c     27 01 00 FF 
09b60     55 15 06 F6 | 	mov	arg02, ##@LR__4321
09b64     08 C0 B0 FD | 	call	#__system___string_cmp
09b68     00 FA 55 F2 | 	cmps	result1, #0 wc
09b6c     34 00 90 CD |  if_b	jmp	#LR__0813
09b70     2D 00 00 FF 
09b74     E0 E5 05 F1 | 	add	objptr, ##23520
09b78     F2 12 02 FB | 	rdlong	arg01, objptr
09b7c     2D 00 00 FF 
09b80     E0 E5 85 F1 | 	sub	objptr, ##23520
09b84     01 14 06 F6 | 	mov	arg02, #1
09b88     CC DF B0 FD | 	call	#__system__Left_S
09b8c     FD 12 02 F6 | 	mov	arg01, result1
09b90     27 01 00 FF 
09b94     57 15 06 F6 | 	mov	arg02, ##@LR__4322
09b98     D4 BF B0 FD | 	call	#__system___string_cmp
09b9c     01 FA 55 F2 | 	cmps	result1, #1 wc
09ba0     78 6E BF CD |  if_b	call	#_interpret
09ba4                 | LR__0813
09ba4     2D 00 00 FF 
09ba8     E0 E5 05 F1 | 	add	objptr, ##23520
09bac     F2 12 02 FB | 	rdlong	arg01, objptr
09bb0     2D 00 00 FF 
09bb4     E0 E5 85 F1 | 	sub	objptr, ##23520
09bb8     27 01 00 FF 
09bbc     59 15 06 F6 | 	mov	arg02, ##@LR__4323
09bc0     AC BF B0 FD | 	call	#__system___string_cmp
09bc4     00 FA 0D F2 | 	cmp	result1, #0 wz
09bc8     64 FF 9F 5D |  if_ne	jmp	#LR__0812
09bcc                 | '     close #9
09bcc     09 12 06 F6 | 	mov	arg01, #9
09bd0     54 0A B1 FD | 	call	#__system__close
09bd4     F4 00 90 FD | 	jmp	#LR__0818
09bd8                 | LR__0814
09bd8                 | '   'printerror(26) : close #9 : return
09bd8                 | '     do
09bd8                 | LR__0815
09bd8                 | '       get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
09bd8     0C 4E 05 F1 | 	add	fp, #12
09bdc     A7 14 02 FB | 	rdlong	arg02, fp
09be0     10 4E 05 F1 | 	add	fp, #16
09be4     A7 16 02 F6 | 	mov	arg03, fp
09be8     1C 4E 85 F1 | 	sub	fp, #28
09bec     09 12 06 F6 | 	mov	arg01, #9
09bf0     01 18 06 F6 | 	mov	arg04, #1
09bf4     04 1A 06 F6 | 	mov	arg05, #4
09bf8     50 CD B0 FD | 	call	#__system___basic_get
09bfc     14 4E 05 F1 | 	add	fp, #20
09c00     A7 FA 61 FC | 	wrlong	result1, fp
09c04     08 4E 85 F1 | 	sub	fp, #8
09c08     A7 1E 02 FB | 	rdlong	local01, fp
09c0c     04 1E 06 F1 | 	add	local01, #4
09c10     A7 1E 62 FC | 	wrlong	local01, fp
09c14     10 4E 05 F1 | 	add	fp, #16
09c18     A7 1E 02 FB | 	rdlong	local01, fp
09c1c     04 4E 05 F1 | 	add	fp, #4
09c20     A7 1E 02 F1 | 	add	local01, fp
09c24     0F 01 48 FC | 	wrbyte	#0, local01
09c28                 | '       if amount=1 then  
09c28     0C 4E 85 F1 | 	sub	fp, #12
09c2c     A7 1E 02 FB | 	rdlong	local01, fp
09c30     14 4E 85 F1 | 	sub	fp, #20
09c34     01 1E 0E F2 | 	cmp	local01, #1 wz
09c38     68 00 90 5D |  if_ne	jmp	#LR__0816
09c3c                 | '         get #9,i,line2(0),linelength : i+=linelength
09c3c     0C 4E 05 F1 | 	add	fp, #12
09c40     A7 14 02 FB | 	rdlong	arg02, fp
09c44     14 4E 05 F1 | 	add	fp, #20
09c48     A7 16 02 F6 | 	mov	arg03, fp
09c4c     04 4E 85 F1 | 	sub	fp, #4
09c50     A7 18 02 FB | 	rdlong	arg04, fp
09c54     1C 4E 85 F1 | 	sub	fp, #28
09c58     09 12 06 F6 | 	mov	arg01, #9
09c5c     01 1A 06 F6 | 	mov	arg05, #1
09c60     E8 CC B0 FD | 	call	#__system___basic_get
09c64     0C 4E 05 F1 | 	add	fp, #12
09c68     A7 1E 02 FB | 	rdlong	local01, fp
09c6c     10 4E 05 F1 | 	add	fp, #16
09c70     A7 1A 02 FB | 	rdlong	arg05, fp
09c74     0D 1F 02 F1 | 	add	local01, arg05
09c78     10 4E 85 F1 | 	sub	fp, #16
09c7c     A7 1E 62 FC | 	wrlong	local01, fp
09c80     94 4E 05 F1 | 	add	fp, #148
09c84     A7 1E 02 FB | 	rdlong	local01, fp
09c88     A0 4E 85 F1 | 	sub	fp, #160
09c8c     2D 00 00 FF 
09c90     E0 E5 05 F1 | 	add	objptr, ##23520
09c94     F2 1E 62 FC | 	wrlong	local01, objptr
09c98     2D 00 00 FF 
09c9c     E0 E5 85 F1 | 	sub	objptr, ##23520
09ca0     78 6D BF FD | 	call	#_interpret
09ca4                 | LR__0816
09ca4     14 4E 05 F1 | 	add	fp, #20
09ca8     A7 1E 02 FB | 	rdlong	local01, fp
09cac     14 4E 85 F1 | 	sub	fp, #20
09cb0     01 1E 56 F2 | 	cmps	local01, #1 wc
09cb4     20 FF 9F 3D |  if_ae	jmp	#LR__0815
09cb8                 | '     close #9 
09cb8     09 12 06 F6 | 	mov	arg01, #9
09cbc     68 09 B1 FD | 	call	#__system__close
09cc0     08 00 90 FD | 	jmp	#LR__0818
09cc4                 | LR__0817
09cc4     1E 12 06 F6 | 	mov	arg01, #30
09cc8     5C 89 B0 FD | 	call	#_printerror
09ccc                 | LR__0818
09ccc                 | LR__0819
09ccc     A7 F0 03 F6 | 	mov	ptra, fp
09cd0     B2 00 A0 FD | 	call	#popregs_
09cd4                 | _do_load_ret
09cd4     2D 00 64 FD | 	ret
09cd8                 | 
09cd8                 | ' 
09cd8                 | ' '----------------- Run the program 
09cd8                 | ' 
09cd8                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
09cd8                 | ' 
09cd8                 | ' sub do_run
09cd8                 | _do_run
09cd8     01 4A 05 F6 | 	mov	COUNT_, #1
09cdc     A8 00 A0 FD | 	call	#pushregs_
09ce0     41 00 00 FF 
09ce4     48 E4 05 F1 | 	add	objptr, ##33352
09ce8     F2 1C 02 FB | 	rdlong	arg06, objptr
09cec     0F 00 00 FF 
09cf0     2C E5 05 F1 | 	add	objptr, ##7980
09cf4     F2 1C 62 FC | 	wrlong	arg06, objptr
09cf8     04 E4 05 F1 | 	add	objptr, #4
09cfc     F2 00 68 FC | 	wrlong	#0, objptr
09d00     04 E4 05 F1 | 	add	objptr, #4
09d04     FF FF FF FF 
09d08     F2 FE 6B FC | 	wrlong	##-1, objptr
09d0c                 | ' if inrun>0 then 
09d0c     04 E4 05 F1 | 	add	objptr, #4
09d10     F2 1C 02 FB | 	rdlong	arg06, objptr
09d14     50 00 00 FF 
09d18     80 E5 85 F1 | 	sub	objptr, ##41344
09d1c     01 1C 16 F2 | 	cmp	arg06, #1 wc
09d20     30 00 90 CD |  if_b	jmp	#LR__0820
09d24     50 00 00 FF 
09d28     84 E5 05 F1 | 	add	objptr, ##41348
09d2c     F2 12 02 F6 | 	mov	arg01, objptr
09d30     10 E4 85 F1 | 	sub	objptr, #16
09d34     F2 14 02 FB | 	rdlong	arg02, objptr
09d38     18 16 06 F6 | 	mov	arg03, #24
09d3c     45 00 00 FF 
09d40     B4 E4 85 F1 | 	sub	objptr, ##35508
09d44     14 B3 B0 FD | 	call	#_psram_spin2_read1
09d48     0B 00 00 FF 
09d4c     C0 E4 85 F1 | 	sub	objptr, ##5824
09d50                 | '   psram.read1(varptr(runheader),runptr,24)  
09d50                 | '   return
09d50     9C 02 90 FD | 	jmp	#LR__0826
09d54                 | LR__0820
09d54     50 00 00 FF 
09d58     80 E5 05 F1 | 	add	objptr, ##41344
09d5c     F2 02 68 FC | 	wrlong	#1, objptr
09d60     04 E4 05 F1 | 	add	objptr, #4
09d64     F2 12 02 F6 | 	mov	arg01, objptr
09d68     10 E4 85 F1 | 	sub	objptr, #16
09d6c     F2 14 02 FB | 	rdlong	arg02, objptr
09d70     18 16 06 F6 | 	mov	arg03, #24
09d74     45 00 00 FF 
09d78     B4 E4 85 F1 | 	sub	objptr, ##35508
09d7c     DC B2 B0 FD | 	call	#_psram_spin2_read1
09d80                 | ' inrun=1
09d80                 | ' psram.read1(varptr(runheader),runptr,24) 
09d80                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
09d80     45 00 00 FF 
09d84     C4 E4 05 F1 | 	add	objptr, ##35524
09d88     F2 1E 02 FB | 	rdlong	local01, objptr
09d8c     50 00 00 FF 
09d90     84 E5 85 F1 | 	sub	objptr, ##41348
09d94     FF FF 7F FF 
09d98     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
09d9c     50 00 00 AF 
09da0     80 E5 05 A1 |  if_e	add	objptr, ##41344
09da4     F2 00 68 AC |  if_e	wrlong	#0, objptr
09da8     50 00 00 AF 
09dac     80 E5 85 A1 |  if_e	sub	objptr, ##41344
09db0     3C 02 90 AD |  if_e	jmp	#LR__0826
09db4                 | ' do 
09db4                 | LR__0821
09db4                 | '   if runptr<>oldrunptr then
09db4     50 00 00 FF 
09db8     74 E5 05 F1 | 	add	objptr, ##41332
09dbc     F2 1E 02 FB | 	rdlong	local01, objptr
09dc0     08 E4 05 F1 | 	add	objptr, #8
09dc4     F2 1C 02 FB | 	rdlong	arg06, objptr
09dc8     50 00 00 FF 
09dcc     7C E5 85 F1 | 	sub	objptr, ##41340
09dd0     0E 1F 0A F2 | 	cmp	local01, arg06 wz
09dd4     CC 00 90 AD |  if_e	jmp	#LR__0822
09dd8     50 00 00 FF 
09ddc     84 E5 05 F1 | 	add	objptr, ##41348
09de0     F2 12 02 F6 | 	mov	arg01, objptr
09de4     10 E4 85 F1 | 	sub	objptr, #16
09de8     F2 14 02 FB | 	rdlong	arg02, objptr
09dec     18 16 06 F6 | 	mov	arg03, #24
09df0     45 00 00 FF 
09df4     B4 E4 85 F1 | 	sub	objptr, ##35508
09df8     60 B2 B0 FD | 	call	#_psram_spin2_read1
09dfc     32 00 00 FF 
09e00     80 E5 05 F1 | 	add	objptr, ##25984
09e04     F2 12 02 F6 | 	mov	arg01, objptr
09e08     12 00 00 FF 
09e0c     34 E5 05 F1 | 	add	objptr, ##9524
09e10     F2 14 02 FB | 	rdlong	arg02, objptr
09e14     14 00 00 FF 
09e18     4C E5 85 F1 | 	sub	objptr, ##10572
09e1c     F2 1E 02 FB | 	rdlong	local01, objptr
09e20     01 1E 66 F0 | 	shl	local01, #1
09e24     0F 15 02 F1 | 	add	arg02, local01
09e28     14 00 00 FF 
09e2c     64 E5 05 F1 | 	add	objptr, ##10596
09e30     F2 16 02 FB | 	rdlong	arg03, objptr
09e34     18 E4 85 F1 | 	sub	objptr, #24
09e38     F2 1E 02 FB | 	rdlong	local01, objptr
09e3c     0F 17 82 F1 | 	sub	arg03, local01
09e40     45 00 00 FF 
09e44     B4 E4 85 F1 | 	sub	objptr, ##35508
09e48     10 B2 B0 FD | 	call	#_psram_spin2_read1
09e4c     45 00 00 FF 
09e50     CC E4 05 F1 | 	add	objptr, ##35532
09e54     F2 1E 02 FB | 	rdlong	local01, objptr
09e58     18 E4 85 F1 | 	sub	objptr, #24
09e5c     F2 1C 02 FB | 	rdlong	arg06, objptr
09e60     0E 1F 82 F1 | 	sub	local01, arg06
09e64     14 00 00 FF 
09e68     4C E5 85 F1 | 	sub	objptr, ##10572
09e6c     F2 1C 02 FB | 	rdlong	arg06, objptr
09e70     0E 1F 12 FD | 	qdiv	local01, arg06
09e74     05 00 00 FF 
09e78     18 E4 05 F1 | 	add	objptr, ##2584
09e7c     18 1E 62 FD | 	getqx	local01
09e80     03 1E 86 F1 | 	sub	local01, #3
09e84     F2 1E 62 FC | 	wrlong	local01, objptr
09e88     0F 00 00 FF 
09e8c     34 E5 05 F1 | 	add	objptr, ##7988
09e90     F2 1E 02 FB | 	rdlong	local01, objptr
09e94     08 E4 05 F1 | 	add	objptr, #8
09e98     F2 1E 62 FC | 	wrlong	local01, objptr
09e9c     50 00 00 FF 
09ea0     7C E5 85 F1 | 	sub	objptr, ##41340
09ea4                 | LR__0822
09ea4     50 00 00 FF 
09ea8     98 E5 05 F1 | 	add	objptr, ##41368
09eac     F2 1E 02 FB | 	rdlong	local01, objptr
09eb0     24 E4 85 F1 | 	sub	objptr, #36
09eb4     F2 1E 62 FC | 	wrlong	local01, objptr
09eb8     04 E4 05 F1 | 	add	objptr, #4
09ebc     F2 12 02 FB | 	rdlong	arg01, objptr
09ec0     50 00 00 FF 
09ec4     78 E5 85 F1 | 	sub	objptr, ##41336
09ec8     40 EB BF FD | 	call	#_execute_line
09ecc     50 00 00 FF 
09ed0     78 E5 05 F1 | 	add	objptr, ##41336
09ed4     F2 FA 61 FC | 	wrlong	result1, objptr
09ed8     04 E4 85 F1 | 	sub	objptr, #4
09edc     F2 1E 02 FB | 	rdlong	local01, objptr
09ee0     50 00 00 FF 
09ee4     74 E5 85 F1 | 	sub	objptr, ##41332
09ee8     FF FF 3F FF 
09eec     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
09ef0     0C 00 90 AD |  if_e	jmp	#LR__0823
09ef4     F4 B4 B0 FD | 	call	#_usbnew_spin2_get_key
09ef8     06 FB 0D F2 | 	cmp	result1, #262 wz
09efc     B4 FE 9F 5D |  if_ne	jmp	#LR__0821
09f00                 | LR__0823
09f00                 | ' if runheader(5)<>$7FFF_FFFF then 
09f00     50 00 00 FF 
09f04     98 E5 05 F1 | 	add	objptr, ##41368
09f08     F2 1E 02 FB | 	rdlong	local01, objptr
09f0c     50 00 00 FF 
09f10     98 E5 85 F1 | 	sub	objptr, ##41368
09f14     FF FF 3F FF 
09f18     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
09f1c     BC 00 90 AD |  if_e	jmp	#LR__0825
09f20                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len)  
09f20     50 00 00 FF 
09f24     A4 E5 05 F1 | 	add	objptr, ##41380
09f28     F2 1E 02 FB | 	rdlong	local01, objptr
09f2c     50 00 00 FF 
09f30     A4 E5 85 F1 | 	sub	objptr, ##41380
09f34     01 1E 0E F2 | 	cmp	local01, #1 wz
09f38     3C 00 90 5D |  if_ne	jmp	#LR__0824
09f3c     52 00 00 FF 
09f40     48 E4 05 F1 | 	add	objptr, ##42056
09f44     F2 14 02 FB | 	rdlong	arg02, objptr
09f48     04 E4 85 F1 | 	sub	objptr, #4
09f4c     F2 1A 02 FB | 	rdlong	arg05, objptr
09f50     07 12 06 F6 | 	mov	arg01, #7
09f54     56 00 00 FF 
09f58     44 16 06 F6 | 	mov	arg03, ##44100
09f5c     0E 18 C6 F9 | 	decod	arg04, #14
09f60     01 1C 66 F6 | 	neg	arg06, #1
09f64     46 00 00 FF 
09f68     84 E5 85 F1 | 	sub	objptr, ##36228
09f6c     A4 B7 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
09f70     0B 00 00 FF 
09f74     C0 E4 85 F1 | 	sub	objptr, ##5824
09f78                 | LR__0824
09f78                 | '   print "Stopped at line ";runheader(0)
09f78     00 12 06 F6 | 	mov	arg01, #0
09f7c     78 10 B1 FD | 	call	#__system___getiolock_0372
09f80     FD 12 02 F6 | 	mov	arg01, result1
09f84     C0 BB B0 FD | 	call	#__system___lockmem
09f88     27 01 00 FF 
09f8c     5A 15 06 F6 | 	mov	arg02, ##@LR__4324
09f90     00 12 06 F6 | 	mov	arg01, #0
09f94     00 16 06 F6 | 	mov	arg03, #0
09f98     A0 C8 B0 FD | 	call	#__system___basic_print_string
09f9c     50 00 00 FF 
09fa0     84 E5 05 F1 | 	add	objptr, ##41348
09fa4     F2 14 02 FB | 	rdlong	arg02, objptr
09fa8     50 00 00 FF 
09fac     84 E5 85 F1 | 	sub	objptr, ##41348
09fb0     00 12 06 F6 | 	mov	arg01, #0
09fb4     00 16 06 F6 | 	mov	arg03, #0
09fb8     0A 18 06 F6 | 	mov	arg04, #10
09fbc     00 C9 B0 FD | 	call	#__system___basic_print_unsigned
09fc0     00 12 06 F6 | 	mov	arg01, #0
09fc4     0A 14 06 F6 | 	mov	arg02, #10
09fc8     00 16 06 F6 | 	mov	arg03, #0
09fcc     14 C8 B0 FD | 	call	#__system___basic_print_char
09fd0     00 12 06 F6 | 	mov	arg01, #0
09fd4     20 10 B1 FD | 	call	#__system___getiolock_0372
09fd8     FD 00 68 FC | 	wrlong	#0, result1
09fdc                 | LR__0825
09fdc     50 00 00 FF 
09fe0     80 E5 05 F1 | 	add	objptr, ##41344
09fe4     F2 00 68 FC | 	wrlong	#0, objptr
09fe8     50 00 00 FF 
09fec     80 E5 85 F1 | 	sub	objptr, ##41344
09ff0                 | LR__0826
09ff0     A7 F0 03 F6 | 	mov	ptra, fp
09ff4     B2 00 A0 FD | 	call	#popregs_
09ff8                 | _do_run_ret
09ff8     2D 00 64 FD | 	ret
09ffc                 | 
09ffc                 | ' 
09ffc                 | ' ' ---------------  List the program. Todo: it should accept parameters and do "more"
09ffc                 | ' 
09ffc                 | ' sub do_list
09ffc                 | _do_list
09ffc     02 4A 05 F6 | 	mov	COUNT_, #2
0a000     A8 00 A0 FD | 	call	#pushregs_
0a004     B8 F0 07 F1 | 	add	ptra, #184
0a008     04 4E 05 F1 | 	add	fp, #4
0a00c     A7 00 68 FC | 	wrlong	#0, fp
0a010     04 4E 05 F1 | 	add	fp, #4
0a014     FF FF BF FF 
0a018     A7 FE 6B FC | 	wrlong	##2147483647, fp
0a01c     08 4E 85 F1 | 	sub	fp, #8
0a020     41 00 00 FF 
0a024     44 E4 05 F1 | 	add	objptr, ##33348
0a028     F2 1E 02 FB | 	rdlong	local01, objptr
0a02c     0F 17 02 F6 | 	mov	arg03, local01
0a030     01 16 66 F0 | 	shl	arg03, #1
0a034     0F 17 02 F1 | 	add	arg03, local01
0a038     02 16 66 F0 | 	shl	arg03, #2
0a03c     03 00 00 FF 
0a040     04 E4 85 F1 | 	sub	objptr, ##1540
0a044     F2 16 02 F1 | 	add	arg03, objptr
0a048     0B 17 02 FB | 	rdlong	arg03, arg03
0a04c     A7 16 62 FC | 	wrlong	arg03, fp
0a050                 | ' 
0a050                 | ' startline=0 : endline=$7FFFFFFF
0a050                 | ' numpar=compiledline(lineptr_e).result.uresult
0a050                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0a050     01 16 0E F2 | 	cmp	arg03, #1 wz
0a054     3E 00 00 FF 
0a058     40 E4 85 F1 | 	sub	objptr, ##31808
0a05c     3C 00 90 5D |  if_ne	jmp	#LR__0830
0a060     AC EA BF FD | 	call	#_pop
0a064     FF 1E 02 F6 | 	mov	local01, result3
0a068     0C 4E 05 F1 | 	add	fp, #12
0a06c     A7 FA 61 FC | 	wrlong	result1, fp
0a070     04 4E 05 F1 | 	add	fp, #4
0a074     A7 FC 61 FC | 	wrlong	result2, fp
0a078     04 4E 05 F1 | 	add	fp, #4
0a07c     A7 1E 62 FC | 	wrlong	local01, fp
0a080     08 4E 85 F1 | 	sub	fp, #8
0a084     A7 12 02 F6 | 	mov	arg01, fp
0a088     0C 4E 85 F1 | 	sub	fp, #12
0a08c     08 43 B0 FD | 	call	#_converttoint
0a090     04 4E 05 F1 | 	add	fp, #4
0a094     A7 FA 61 FC | 	wrlong	result1, fp
0a098     04 4E 85 F1 | 	sub	fp, #4
0a09c                 | LR__0830
0a09c                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0a09c     A7 16 02 FB | 	rdlong	arg03, fp
0a0a0     02 16 0E F2 | 	cmp	arg03, #2 wz
0a0a4     7C 00 90 5D |  if_ne	jmp	#LR__0831
0a0a8     64 EA BF FD | 	call	#_pop
0a0ac     FF 1E 02 F6 | 	mov	local01, result3
0a0b0     0C 4E 05 F1 | 	add	fp, #12
0a0b4     A7 FA 61 FC | 	wrlong	result1, fp
0a0b8     04 4E 05 F1 | 	add	fp, #4
0a0bc     A7 FC 61 FC | 	wrlong	result2, fp
0a0c0     04 4E 05 F1 | 	add	fp, #4
0a0c4     A7 1E 62 FC | 	wrlong	local01, fp
0a0c8     08 4E 85 F1 | 	sub	fp, #8
0a0cc     A7 12 02 F6 | 	mov	arg01, fp
0a0d0     0C 4E 85 F1 | 	sub	fp, #12
0a0d4     C0 42 B0 FD | 	call	#_converttoint
0a0d8     FD 1E 02 F6 | 	mov	local01, result1
0a0dc     08 4E 05 F1 | 	add	fp, #8
0a0e0     A7 1E 62 FC | 	wrlong	local01, fp
0a0e4     08 4E 85 F1 | 	sub	fp, #8
0a0e8     24 EA BF FD | 	call	#_pop
0a0ec     FF 1E 02 F6 | 	mov	local01, result3
0a0f0     0C 4E 05 F1 | 	add	fp, #12
0a0f4     A7 FA 61 FC | 	wrlong	result1, fp
0a0f8     04 4E 05 F1 | 	add	fp, #4
0a0fc     A7 FC 61 FC | 	wrlong	result2, fp
0a100     04 4E 05 F1 | 	add	fp, #4
0a104     A7 1E 62 FC | 	wrlong	local01, fp
0a108     08 4E 85 F1 | 	sub	fp, #8
0a10c     A7 12 02 F6 | 	mov	arg01, fp
0a110     0C 4E 85 F1 | 	sub	fp, #12
0a114     80 42 B0 FD | 	call	#_converttoint
0a118     04 4E 05 F1 | 	add	fp, #4
0a11c     A7 FA 61 FC | 	wrlong	result1, fp
0a120     04 4E 85 F1 | 	sub	fp, #4
0a124                 | LR__0831
0a124                 | ' 
0a124                 | ' 
0a124                 | ' print
0a124     00 12 06 F6 | 	mov	arg01, #0
0a128     CC 0E B1 FD | 	call	#__system___getiolock_0372
0a12c     FD 12 02 F6 | 	mov	arg01, result1
0a130     14 BA B0 FD | 	call	#__system___lockmem
0a134     00 12 06 F6 | 	mov	arg01, #0
0a138     0A 14 06 F6 | 	mov	arg02, #10
0a13c     00 16 06 F6 | 	mov	arg03, #0
0a140     A0 C6 B0 FD | 	call	#__system___basic_print_char
0a144     00 12 06 F6 | 	mov	arg01, #0
0a148     AC 0E B1 FD | 	call	#__system___getiolock_0372
0a14c     FD 00 68 FC | 	wrlong	#0, result1
0a150     41 00 00 FF 
0a154     48 E4 05 F1 | 	add	objptr, ##33352
0a158     F2 20 02 FB | 	rdlong	local02, objptr
0a15c     11 00 00 FF 
0a160     60 E4 05 F1 | 	add	objptr, ##8800
0a164     F2 20 62 FC | 	wrlong	local02, objptr
0a168     52 00 00 FF 
0a16c     A8 E4 85 F1 | 	sub	objptr, ##42152
0a170                 | ' do 
0a170                 | LR__0832
0a170     20 4E 05 F1 | 	add	fp, #32
0a174     A7 12 02 F6 | 	mov	arg01, fp
0a178     20 4E 85 F1 | 	sub	fp, #32
0a17c     52 00 00 FF 
0a180     A8 E4 05 F1 | 	add	objptr, ##42152
0a184     F2 14 02 FB | 	rdlong	arg02, objptr
0a188     18 16 06 F6 | 	mov	arg03, #24
0a18c     46 00 00 FF 
0a190     E8 E5 85 F1 | 	sub	objptr, ##36328
0a194     C4 AE B0 FD | 	call	#_psram_spin2_read1
0a198     0B 00 00 FF 
0a19c     C0 E4 85 F1 | 	sub	objptr, ##5824
0a1a0                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart
0a1a0                 | '   if header(0)<> $FFFFFFFF then
0a1a0     20 4E 05 F1 | 	add	fp, #32
0a1a4     A7 20 02 FB | 	rdlong	local02, fp
0a1a8     20 4E 85 F1 | 	sub	fp, #32
0a1ac     FF FF 7F FF 
0a1b0     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0a1b4     A8 00 90 AD |  if_e	jmp	#LR__0834
0a1b8     38 4E 05 F1 | 	add	fp, #56
0a1bc     3F 16 06 F6 | 	mov	arg03, #63
0a1c0     28 16 62 FD | 	setq	arg03
0a1c4     A7 00 68 FC | 	wrlong	#0, fp
0a1c8     A7 12 02 F6 | 	mov	arg01, fp
0a1cc     10 4E 85 F1 | 	sub	fp, #16
0a1d0     A7 14 02 FB | 	rdlong	arg02, fp
0a1d4     04 4E 05 F1 | 	add	fp, #4
0a1d8     A7 16 02 FB | 	rdlong	arg03, fp
0a1dc     2C 4E 85 F1 | 	sub	fp, #44
0a1e0     0B 00 00 FF 
0a1e4     C0 E4 05 F1 | 	add	objptr, ##5824
0a1e8     70 AE B0 FD | 	call	#_psram_spin2_read1
0a1ec     0B 00 00 FF 
0a1f0     C0 E4 85 F1 | 	sub	objptr, ##5824
0a1f4                 | '     longfill(linebuf,0,64)
0a1f4                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0a1f4                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0a1f4     20 4E 05 F1 | 	add	fp, #32
0a1f8     A7 20 02 FB | 	rdlong	local02, fp
0a1fc     1C 4E 85 F1 | 	sub	fp, #28
0a200     A7 1E 02 FB | 	rdlong	local01, fp
0a204     04 4E 85 F1 | 	sub	fp, #4
0a208     0F 21 52 F2 | 	cmps	local02, local01 wc
0a20c     30 00 90 CD |  if_b	jmp	#LR__0833
0a210     20 4E 05 F1 | 	add	fp, #32
0a214     A7 20 02 FB | 	rdlong	local02, fp
0a218     18 4E 85 F1 | 	sub	fp, #24
0a21c     A7 16 02 FB | 	rdlong	arg03, fp
0a220     08 4E 85 F1 | 	sub	fp, #8
0a224     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0a228     14 00 90 1D |  if_a	jmp	#LR__0833
0a22c     38 4E 05 F1 | 	add	fp, #56
0a230     A7 12 02 F6 | 	mov	arg01, fp
0a234     38 4E 85 F1 | 	sub	fp, #56
0a238                 | ' 
0a238                 | ' write(text)
0a238     E8 A8 B0 FD | 	call	#_hg010b_spin2_write
0a23c                 | ' crlf
0a23c     44 AA B0 FD | 	call	#_hg010b_spin2_crlf
0a240                 | LR__0833
0a240     34 4E 05 F1 | 	add	fp, #52
0a244     A7 20 02 FB | 	rdlong	local02, fp
0a248     34 4E 85 F1 | 	sub	fp, #52
0a24c     52 00 00 FF 
0a250     A8 E4 05 F1 | 	add	objptr, ##42152
0a254     F2 20 62 FC | 	wrlong	local02, objptr
0a258     52 00 00 FF 
0a25c     A8 E4 85 F1 | 	sub	objptr, ##42152
0a260                 | LR__0834
0a260     34 4E 05 F1 | 	add	fp, #52
0a264     A7 20 02 FB | 	rdlong	local02, fp
0a268     34 4E 85 F1 | 	sub	fp, #52
0a26c     FF FF 3F FF 
0a270     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0a274     20 4E 05 51 |  if_ne	add	fp, #32
0a278     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0a27c     20 4E 85 51 |  if_ne	sub	fp, #32
0a280     FF FF 7F 5F 
0a284     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0a288     E4 FE 9F 5D |  if_ne	jmp	#LR__0832
0a28c     A7 F0 03 F6 | 	mov	ptra, fp
0a290     B2 00 A0 FD | 	call	#popregs_
0a294                 | _do_list_ret
0a294     2D 00 64 FD | 	ret
0a298                 | 
0a298                 | ' 
0a298                 | ' '---------------- Clear the program
0a298                 | ' 
0a298                 | ' sub do_new
0a298                 | _do_new
0a298     03 4A 05 F6 | 	mov	COUNT_, #3
0a29c     A8 00 A0 FD | 	call	#pushregs_
0a2a0     00 12 06 F6 | 	mov	arg01, #0
0a2a4     01 14 66 F6 | 	neg	arg02, #1
0a2a8     01 16 06 F6 | 	mov	arg03, #1
0a2ac     00 18 06 F6 | 	mov	arg04, #0
0a2b0     0B 00 00 FF 
0a2b4     C0 E4 05 F1 | 	add	objptr, ##5824
0a2b8                 | '     return fill(addr, pattern, count, listPtr, 4)
0a2b8     04 1A 06 F6 | 	mov	arg05, #4
0a2bc     D4 AE B0 FD | 	call	#_psram_spin2_fill
0a2c0     20 00 00 FF 
0a2c4     0C E5 05 F1 | 	add	objptr, ##16652
0a2c8     F2 00 68 FC | 	wrlong	#0, objptr
0a2cc     15 00 00 FF 
0a2d0     7C E4 05 F1 | 	add	objptr, ##10876
0a2d4     F2 00 68 FC | 	wrlong	#0, objptr
0a2d8     0F 00 00 FF 
0a2dc     2C E5 05 F1 | 	add	objptr, ##7980
0a2e0     F2 00 68 FC | 	wrlong	#0, objptr
0a2e4     04 E4 05 F1 | 	add	objptr, #4
0a2e8     F2 00 68 FC | 	wrlong	#0, objptr
0a2ec     16 00 00 FF 
0a2f0     5C E5 85 F1 | 	sub	objptr, ##11612
0a2f4     F2 00 68 FC | 	wrlong	#0, objptr
0a2f8     07 00 00 FF 
0a2fc     24 E4 05 F1 | 	add	objptr, ##3620
0a300     F2 00 68 FC | 	wrlong	#0, objptr
0a304     07 00 00 FF 
0a308     20 E4 85 F1 | 	sub	objptr, ##3616
0a30c     F2 00 68 FC | 	wrlong	#0, objptr
0a310     0F 00 00 FF 
0a314     34 E4 05 F1 | 	add	objptr, ##7732
0a318     F2 00 68 FC | 	wrlong	#0, objptr
0a31c     08 00 00 FF 
0a320     08 E4 85 F1 | 	sub	objptr, ##4104
0a324     F2 00 68 FC | 	wrlong	#0, objptr
0a328     04 E4 05 F1 | 	add	objptr, #4
0a32c     FF FF FF FF 
0a330     F2 FE 6B FC | 	wrlong	##-1, objptr
0a334     0F 00 00 FF 
0a338     4C E5 05 F1 | 	add	objptr, ##8012
0a33c     F2 00 68 FC | 	wrlong	#0, objptr
0a340                 | ' 
0a340                 | ' pslpoke(0,$FFFFFFFF)
0a340                 | ' varnum=0
0a340                 | ' programstart=0 :runptr=0 : runptr2=0
0a340                 | ' stackpointer=0
0a340                 | ' lineptr=0 
0a340                 | ' programptr=0 : stringptr=0
0a340                 | ' lastline=0 : lastlineptr=-1 :fortop=0
0a340                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0a340     00 1E 06 F6 | 	mov	local01, #0
0a344     07 00 00 FF 
0a348     40 E5 85 F1 | 	sub	objptr, ##3904
0a34c     97 16 48 FB | 	callpa	#(@LR__0841-@LR__0840)>>2,fcache_load_ptr_
0a350                 | LR__0840
0a350     0F 21 02 F6 | 	mov	local02, local01
0a354     02 20 66 F0 | 	shl	local02, #2
0a358     0F 21 02 F1 | 	add	local02, local01
0a35c     02 20 66 F0 | 	shl	local02, #2
0a360     F2 20 02 F1 | 	add	local02, objptr
0a364     08 20 06 F1 | 	add	local02, #8
0a368     FF FF FF FF 
0a36c     10 FF 6B FC | 	wrlong	##-1, local02
0a370     01 1E 06 F1 | 	add	local01, #1
0a374     81 1E 56 F2 | 	cmps	local01, #129 wc
0a378     D4 FF 9F CD |  if_b	jmp	#LR__0840
0a37c                 | LR__0841
0a37c     49 00 00 FF 
0a380     5C E4 85 F1 | 	sub	objptr, ##37468
0a384                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i))
0a384     00 1E 06 F6 | 	mov	local01, #0
0a388                 | LR__0842
0a388     0F 21 02 F6 | 	mov	local02, local01
0a38c     02 20 66 F0 | 	shl	local02, #2
0a390     51 00 00 FF 
0a394     F8 E5 05 F1 | 	add	objptr, ##41976
0a398     F2 20 02 F1 | 	add	local02, objptr
0a39c     10 21 0A FB | 	rdlong	local02, local02 wz
0a3a0     51 00 00 FF 
0a3a4     F8 E5 85 F1 | 	sub	objptr, ##41976
0a3a8     34 00 90 AD |  if_e	jmp	#LR__0843
0a3ac     0F 13 02 F6 | 	mov	arg01, local01
0a3b0     00 14 06 F6 | 	mov	arg02, #0
0a3b4     00 16 06 F6 | 	mov	arg03, #0
0a3b8     F4 97 B0 FD | 	call	#_hg010b_spin2_setspritesize
0a3bc     0F 21 02 F6 | 	mov	local02, local01
0a3c0     02 20 66 F0 | 	shl	local02, #2
0a3c4     51 00 00 FF 
0a3c8     F8 E5 05 F1 | 	add	objptr, ##41976
0a3cc     F2 20 02 F1 | 	add	local02, objptr
0a3d0     10 13 02 FB | 	rdlong	arg01, local02
0a3d4     51 00 00 FF 
0a3d8     F8 E5 85 F1 | 	sub	objptr, ##41976
0a3dc     08 F2 B0 FD | 	call	#__system___gc_free
0a3e0                 | LR__0843
0a3e0     F2 22 02 FB | 	rdlong	local03, objptr
0a3e4     52 00 00 FF 
0a3e8     3C E4 05 F1 | 	add	objptr, ##42044
0a3ec     F2 22 62 FC | 	wrlong	local03, objptr
0a3f0     52 00 00 FF 
0a3f4     3C E4 85 F1 | 	sub	objptr, ##42044
0a3f8     11 12 06 F6 | 	mov	arg01, #17
0a3fc     08 14 06 F6 | 	mov	arg02, #8
0a400     10 16 06 F6 | 	mov	arg03, #16
0a404     A8 97 B0 FD | 	call	#_hg010b_spin2_setspritesize
0a408     01 1E 06 F1 | 	add	local01, #1
0a40c     10 1E 56 F2 | 	cmps	local01, #16 wc
0a410     74 FF 9F CD |  if_b	jmp	#LR__0842
0a414     A7 F0 03 F6 | 	mov	ptra, fp
0a418     B2 00 A0 FD | 	call	#popregs_
0a41c                 | _do_new_ret
0a41c     2D 00 64 FD | 	ret
0a420                 | 
0a420                 | ' 
0a420                 | ' '----------------------- goto
0a420                 | ' sub do_fast_goto
0a420                 | _do_fast_goto
0a420     02 4A 05 F6 | 	mov	COUNT_, #2
0a424     A8 00 A0 FD | 	call	#pushregs_
0a428                 | _do_fast_goto_enter
0a428     41 00 00 FF 
0a42c     44 E4 05 F1 | 	add	objptr, ##33348
0a430     F2 12 02 FB | 	rdlong	arg01, objptr
0a434     09 1F 02 F6 | 	mov	local01, arg01
0a438     01 1E 66 F0 | 	shl	local01, #1
0a43c     09 1F 02 F1 | 	add	local01, arg01
0a440     02 1E 66 F0 | 	shl	local01, #2
0a444     03 00 00 FF 
0a448     04 E4 85 F1 | 	sub	objptr, ##1540
0a44c     F2 1E 02 F1 | 	add	local01, objptr
0a450     0F 21 02 FB | 	rdlong	local02, local01
0a454     10 13 02 F6 | 	mov	arg01, local02
0a458     3E 00 00 FF 
0a45c     40 E4 85 F1 | 	sub	objptr, ##31808
0a460     80 83 B0 FD | 	call	#_pslpeek
0a464     FD 12 02 F6 | 	mov	arg01, result1
0a468                 | ' 
0a468                 | ' testptr=compiledline(lineptr_e).result.uresult
0a468                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0a468                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0a468     41 00 00 FF 
0a46c     44 E4 05 F1 | 	add	objptr, ##33348
0a470     F2 FA 01 FB | 	rdlong	result1, objptr
0a474     FD 1E 02 F6 | 	mov	local01, result1
0a478     01 1E 66 F0 | 	shl	local01, #1
0a47c     FD 1E 02 F1 | 	add	local01, result1
0a480     02 1E 66 F0 | 	shl	local01, #2
0a484     03 00 00 FF 
0a488     04 E4 85 F1 | 	sub	objptr, ##1540
0a48c     F2 1E 02 F1 | 	add	local01, objptr
0a490     04 1E 06 F1 | 	add	local01, #4
0a494     0F 1F 02 FB | 	rdlong	local01, local01
0a498     0F 13 0A F2 | 	cmp	arg01, local01 wz
0a49c     3E 00 00 FF 
0a4a0     40 E4 85 F1 | 	sub	objptr, ##31808
0a4a4     58 00 90 5D |  if_ne	jmp	#LR__0850
0a4a8     50 00 00 FF 
0a4ac     74 E5 05 F1 | 	add	objptr, ##41332
0a4b0     F2 20 62 FC | 	wrlong	local02, objptr
0a4b4     0F 00 00 FF 
0a4b8     34 E5 85 F1 | 	sub	objptr, ##7988
0a4bc     F2 20 02 FB | 	rdlong	local02, objptr
0a4c0     01 20 86 F1 | 	sub	local02, #1
0a4c4     04 E4 05 F1 | 	add	objptr, #4
0a4c8     F2 20 62 FC | 	wrlong	local02, objptr
0a4cc                 | '   runptr=testptr
0a4cc                 | '   lineptr_e=lineptr-1
0a4cc                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0a4cc     0F 00 00 FF 
0a4d0     54 E5 05 F1 | 	add	objptr, ##8020
0a4d4     F2 20 02 FB | 	rdlong	local02, objptr
0a4d8     50 00 00 FF 
0a4dc     98 E5 85 F1 | 	sub	objptr, ##41368
0a4e0     FF FF 3F FF 
0a4e4     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0a4e8     50 00 00 AF 
0a4ec     98 E5 05 A1 |  if_e	add	objptr, ##41368
0a4f0     F2 00 68 AC |  if_e	wrlong	#0, objptr
0a4f4     50 00 00 AF 
0a4f8     98 E5 85 A1 |  if_e	sub	objptr, ##41368
0a4fc     04 00 90 FD | 	jmp	#LR__0851
0a500                 | LR__0850
0a500     0C 00 B0 FD | 	call	#_do_find_goto
0a504                 | LR__0851
0a504     A7 F0 03 F6 | 	mov	ptra, fp
0a508     B2 00 A0 FD | 	call	#popregs_
0a50c                 | _do_fast_goto_ret
0a50c     2D 00 64 FD | 	ret
0a510                 | 
0a510                 | ' 
0a510                 | ' 
0a510                 | ' 
0a510                 | ' 
0a510                 | ' sub do_find_goto
0a510                 | _do_find_goto
0a510     03 4A 05 F6 | 	mov	COUNT_, #3
0a514     A8 00 A0 FD | 	call	#pushregs_
0a518     24 F0 07 F1 | 	add	ptra, #36
0a51c                 | _do_find_goto_enter
0a51c     41 00 00 FF 
0a520     44 E4 05 F1 | 	add	objptr, ##33348
0a524     F2 1E 02 FB | 	rdlong	local01, objptr
0a528     0F 21 02 F6 | 	mov	local02, local01
0a52c     01 20 66 F0 | 	shl	local02, #1
0a530     0F 21 02 F1 | 	add	local02, local01
0a534     02 20 66 F0 | 	shl	local02, #2
0a538     03 00 00 FF 
0a53c     04 E4 85 F1 | 	sub	objptr, ##1540
0a540     F2 20 02 F1 | 	add	local02, objptr
0a544     04 20 06 F1 | 	add	local02, #4
0a548     10 21 02 FB | 	rdlong	local02, local02
0a54c     A7 20 62 FC | 	wrlong	local02, fp
0a550     03 00 00 FF 
0a554     08 E4 05 F1 | 	add	objptr, ##1544
0a558     F2 22 02 FB | 	rdlong	local03, objptr
0a55c     41 00 00 FF 
0a560     48 E4 85 F1 | 	sub	objptr, ##33352
0a564     04 4E 05 F1 | 	add	fp, #4
0a568     A7 22 62 FC | 	wrlong	local03, fp
0a56c     04 4E 85 F1 | 	sub	fp, #4
0a570                 | ' 
0a570                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
0a570                 | '  ' print "find goto"                                                                     'print gotoline 
0a570                 | ' gotoptr=programstart
0a570                 | ' do
0a570                 | LR__0860
0a570     0C 4E 05 F1 | 	add	fp, #12
0a574     A7 12 02 F6 | 	mov	arg01, fp
0a578     08 4E 85 F1 | 	sub	fp, #8
0a57c     A7 14 02 FB | 	rdlong	arg02, fp
0a580     04 4E 85 F1 | 	sub	fp, #4
0a584     18 16 06 F6 | 	mov	arg03, #24
0a588     0B 00 00 FF 
0a58c     C0 E4 05 F1 | 	add	objptr, ##5824
0a590     C8 AA B0 FD | 	call	#_psram_spin2_read1
0a594     0B 00 00 FF 
0a598     C0 E4 85 F1 | 	sub	objptr, ##5824
0a59c                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0a59c                 | '   if gotoheader(0)<>$FFFFFFFF then
0a59c     0C 4E 05 F1 | 	add	fp, #12
0a5a0     A7 22 02 FB | 	rdlong	local03, fp
0a5a4     0C 4E 85 F1 | 	sub	fp, #12
0a5a8     FF FF 7F FF 
0a5ac     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0a5b0     24 00 90 AD |  if_e	jmp	#LR__0861
0a5b4     04 4E 05 F1 | 	add	fp, #4
0a5b8     A7 22 02 FB | 	rdlong	local03, fp
0a5bc     04 4E 05 F1 | 	add	fp, #4
0a5c0     A7 22 62 FC | 	wrlong	local03, fp
0a5c4     18 4E 05 F1 | 	add	fp, #24
0a5c8     A7 22 02 FB | 	rdlong	local03, fp
0a5cc     1C 4E 85 F1 | 	sub	fp, #28
0a5d0     A7 22 62 FC | 	wrlong	local03, fp
0a5d4     04 4E 85 F1 | 	sub	fp, #4
0a5d8                 | LR__0861
0a5d8     20 4E 05 F1 | 	add	fp, #32
0a5dc     A7 22 02 FB | 	rdlong	local03, fp
0a5e0     20 4E 85 F1 | 	sub	fp, #32
0a5e4     FF FF 3F FF 
0a5e8     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0a5ec     0C 4E 05 51 |  if_ne	add	fp, #12
0a5f0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0a5f4     0C 4E 85 51 |  if_ne	sub	fp, #12
0a5f8     FF FF 7F 5F 
0a5fc     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0a600     18 00 90 AD |  if_e	jmp	#LR__0862
0a604     0C 4E 05 F1 | 	add	fp, #12
0a608     A7 22 02 FB | 	rdlong	local03, fp
0a60c     0C 4E 85 F1 | 	sub	fp, #12
0a610     A7 20 02 FB | 	rdlong	local02, fp
0a614     10 23 0A F2 | 	cmp	local03, local02 wz
0a618     54 FF 9F 5D |  if_ne	jmp	#LR__0860
0a61c                 | LR__0862
0a61c                 | ' 
0a61c                 | ' if gotoheader(0)=gotoline then
0a61c     0C 4E 05 F1 | 	add	fp, #12
0a620     A7 22 02 FB | 	rdlong	local03, fp
0a624     0C 4E 85 F1 | 	sub	fp, #12
0a628     A7 1E 02 FB | 	rdlong	local01, fp
0a62c     0F 23 0A F2 | 	cmp	local03, local01 wz
0a630     D8 00 90 5D |  if_ne	jmp	#LR__0863
0a634     41 00 00 FF 
0a638     44 E4 05 F1 | 	add	objptr, ##33348
0a63c     F2 1E 02 FB | 	rdlong	local01, objptr
0a640     0F 21 02 F6 | 	mov	local02, local01
0a644     01 20 66 F0 | 	shl	local02, #1
0a648     0F 21 02 F1 | 	add	local02, local01
0a64c     02 20 66 F0 | 	shl	local02, #2
0a650     03 00 00 FF 
0a654     04 E4 85 F1 | 	sub	objptr, ##1540
0a658     F2 20 02 F1 | 	add	local02, objptr
0a65c     08 4E 05 F1 | 	add	fp, #8
0a660     A7 22 02 FB | 	rdlong	local03, fp
0a664     10 23 62 FC | 	wrlong	local03, local02
0a668     03 00 00 FF 
0a66c     04 E4 05 F1 | 	add	objptr, ##1540
0a670     F2 1E 02 FB | 	rdlong	local01, objptr
0a674     0F 21 02 F6 | 	mov	local02, local01
0a678     01 20 66 F0 | 	shl	local02, #1
0a67c     0F 21 02 F1 | 	add	local02, local01
0a680     02 20 66 F0 | 	shl	local02, #2
0a684     03 00 00 FF 
0a688     04 E4 85 F1 | 	sub	objptr, ##1540
0a68c     F2 20 02 F1 | 	add	local02, objptr
0a690     08 20 06 F1 | 	add	local02, #8
0a694     10 9D 68 FC | 	wrlong	#78, local02
0a698     03 00 00 FF 
0a69c     04 E4 05 F1 | 	add	objptr, ##1540
0a6a0     F2 20 02 FB | 	rdlong	local02, objptr
0a6a4     10 13 02 F6 | 	mov	arg01, local02
0a6a8     01 12 66 F0 | 	shl	arg01, #1
0a6ac     10 13 02 F1 | 	add	arg01, local02
0a6b0     02 12 66 F0 | 	shl	arg01, #2
0a6b4     03 00 00 FF 
0a6b8     04 E4 85 F1 | 	sub	objptr, ##1540
0a6bc     F2 12 02 F1 | 	add	arg01, objptr
0a6c0     12 00 00 FF 
0a6c4     3C E5 05 F1 | 	add	objptr, ##9532
0a6c8     F2 14 02 FB | 	rdlong	arg02, objptr
0a6cc     02 22 06 F6 | 	mov	local03, #2
0a6d0     10 23 02 F1 | 	add	local03, local02
0a6d4     14 00 00 FF 
0a6d8     54 E5 85 F1 | 	sub	objptr, ##10580
0a6dc     F2 16 02 FB | 	rdlong	arg03, objptr
0a6e0     0B 23 02 FD | 	qmul	local03, arg03
0a6e4     08 4E 85 F1 | 	sub	fp, #8
0a6e8     30 00 00 FF 
0a6ec     68 E5 85 F1 | 	sub	objptr, ##24936
0a6f0     18 22 62 FD | 	getqx	local03
0a6f4     11 15 02 F1 | 	add	arg02, local03
0a6f8     FC A9 B0 FD | 	call	#_psram_spin2_write
0a6fc     0B 00 00 FF 
0a700     C0 E4 85 F1 | 	sub	objptr, ##5824
0a704     18 FD BF FD | 	call	#_do_fast_goto
0a708     08 00 90 FD | 	jmp	#LR__0864
0a70c                 | LR__0863
0a70c     26 12 06 F6 | 	mov	arg01, #38
0a710     14 7F B0 FD | 	call	#_printerror
0a714                 | LR__0864
0a714     A7 F0 03 F6 | 	mov	ptra, fp
0a718     B2 00 A0 FD | 	call	#popregs_
0a71c                 | _do_find_goto_ret
0a71c     2D 00 64 FD | 	ret
0a720                 | 
0a720                 | ' 
0a720                 | ' sub do_slow_goto
0a720                 | _do_slow_goto
0a720                 | _do_slow_goto_ret
0a720     2D 00 64 FD | 	ret
0a724                 | 
0a724                 | ' 
0a724                 | ' '----------------------- Error processing
0a724                 | ' 
0a724                 | ' sub do_error
0a724                 | _do_error
0a724     01 4A 05 F6 | 	mov	COUNT_, #1
0a728     A8 00 A0 FD | 	call	#pushregs_
0a72c     41 00 00 FF 
0a730     44 E4 05 F1 | 	add	objptr, ##33348
0a734     F2 18 02 FB | 	rdlong	arg04, objptr
0a738     0C 17 02 F6 | 	mov	arg03, arg04
0a73c     01 16 66 F0 | 	shl	arg03, #1
0a740     0C 17 02 F1 | 	add	arg03, arg04
0a744     02 16 66 F0 | 	shl	arg03, #2
0a748     03 00 00 FF 
0a74c     04 E4 85 F1 | 	sub	objptr, ##1540
0a750     F2 16 02 F1 | 	add	arg03, objptr
0a754     0B 1F 02 FB | 	rdlong	local01, arg03
0a758                 | ' r=compiledline(lineptr_e).result.uresult
0a758                 | ' print "Error ";r;": ";errors$(r)
0a758     00 12 06 F6 | 	mov	arg01, #0
0a75c     3E 00 00 FF 
0a760     40 E4 85 F1 | 	sub	objptr, ##31808
0a764     90 08 B1 FD | 	call	#__system___getiolock_0372
0a768     FD 12 02 F6 | 	mov	arg01, result1
0a76c     D8 B3 B0 FD | 	call	#__system___lockmem
0a770     27 01 00 FF 
0a774     6B 15 06 F6 | 	mov	arg02, ##@LR__4325
0a778     00 12 06 F6 | 	mov	arg01, #0
0a77c     00 16 06 F6 | 	mov	arg03, #0
0a780     B8 C0 B0 FD | 	call	#__system___basic_print_string
0a784     00 12 06 F6 | 	mov	arg01, #0
0a788     0F 15 02 F6 | 	mov	arg02, local01
0a78c     00 16 06 F6 | 	mov	arg03, #0
0a790     0A 18 06 F6 | 	mov	arg04, #10
0a794     28 C1 B0 FD | 	call	#__system___basic_print_unsigned
0a798     27 01 00 FF 
0a79c     72 15 06 F6 | 	mov	arg02, ##@LR__4326
0a7a0     00 12 06 F6 | 	mov	arg01, #0
0a7a4     00 16 06 F6 | 	mov	arg03, #0
0a7a8     90 C0 B0 FD | 	call	#__system___basic_print_string
0a7ac     02 1E 66 F0 | 	shl	local01, #2
0a7b0     3C 00 00 FF 
0a7b4     40 E4 05 F1 | 	add	objptr, ##30784
0a7b8     F2 1E 02 F1 | 	add	local01, objptr
0a7bc     0F 15 02 FB | 	rdlong	arg02, local01
0a7c0     00 12 06 F6 | 	mov	arg01, #0
0a7c4     00 16 06 F6 | 	mov	arg03, #0
0a7c8     3C 00 00 FF 
0a7cc     40 E4 85 F1 | 	sub	objptr, ##30784
0a7d0     68 C0 B0 FD | 	call	#__system___basic_print_string
0a7d4     00 12 06 F6 | 	mov	arg01, #0
0a7d8     0A 14 06 F6 | 	mov	arg02, #10
0a7dc     00 16 06 F6 | 	mov	arg03, #0
0a7e0     00 C0 B0 FD | 	call	#__system___basic_print_char
0a7e4     00 12 06 F6 | 	mov	arg01, #0
0a7e8     0C 08 B1 FD | 	call	#__system___getiolock_0372
0a7ec     FD 00 68 FC | 	wrlong	#0, result1
0a7f0     A7 F0 03 F6 | 	mov	ptra, fp
0a7f4     B2 00 A0 FD | 	call	#popregs_
0a7f8                 | _do_error_ret
0a7f8     2D 00 64 FD | 	ret
0a7fc                 | 
0a7fc                 | ' 
0a7fc                 | ' 
0a7fc                 | ' '------------------ Assigning to a variable  
0a7fc                 | ' 
0a7fc                 | ' function  convertstring(psaddr as ulong) as string
0a7fc                 | _convertstring
0a7fc     04 4A 05 F6 | 	mov	COUNT_, #4
0a800     A8 00 A0 FD | 	call	#pushregs_
0a804     09 1F 02 F6 | 	mov	local01, arg01
0a808     D8 7F B0 FD | 	call	#_pslpeek
0a80c     FD 20 02 F6 | 	mov	local02, result1
0a810     27 01 00 FF 
0a814     75 23 06 F6 | 	mov	local03, ##@LR__4327
0a818                 | ' 'print "in convertstring: psaddr=";psaddr
0a818                 | ' l=pslpeek(psaddr)
0a818                 | ' 'print "in convertstring: len=";l
0a818                 | ' s="" 
0a818                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0a818     01 24 06 F6 | 	mov	local04, #1
0a81c     01 20 06 F1 | 	add	local02, #1
0a820                 | LR__0870
0a820     10 25 52 F2 | 	cmps	local04, local02 wc
0a824     30 00 90 3D |  if_ae	jmp	#LR__0871
0a828     0F 13 02 F6 | 	mov	arg01, local01
0a82c     03 12 06 F1 | 	add	arg01, #3
0a830     12 13 02 F1 | 	add	arg01, local04
0a834     54 7F B0 FD | 	call	#_pspeek
0a838     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0a83c     DC D4 B0 FD | 	call	#__system__Chr_S
0a840     FD 14 02 F6 | 	mov	arg02, result1
0a844     11 13 02 F6 | 	mov	arg01, local03
0a848     58 B3 B0 FD | 	call	#__system___string_concat
0a84c     FD 22 02 F6 | 	mov	local03, result1
0a850     01 24 06 F1 | 	add	local04, #1
0a854     C8 FF 9F FD | 	jmp	#LR__0870
0a858                 | LR__0871
0a858                 | ' 'print "in convertstring: str=";s
0a858                 | ' return s
0a858     11 FB 01 F6 | 	mov	result1, local03
0a85c     A7 F0 03 F6 | 	mov	ptra, fp
0a860     B2 00 A0 FD | 	call	#popregs_
0a864                 | _convertstring_ret
0a864     2D 00 64 FD | 	ret
0a868                 | 
0a868                 | ' 
0a868                 | ' sub do_assign
0a868                 | _do_assign
0a868     05 4A 05 F6 | 	mov	COUNT_, #5
0a86c     A8 00 A0 FD | 	call	#pushregs_
0a870     44 F0 07 F1 | 	add	ptra, #68
0a874     41 00 00 FF 
0a878     44 E4 05 F1 | 	add	objptr, ##33348
0a87c     F2 16 02 FB | 	rdlong	arg03, objptr
0a880     0B 15 02 F6 | 	mov	arg02, arg03
0a884     01 14 66 F0 | 	shl	arg02, #1
0a888     0B 15 02 F1 | 	add	arg02, arg03
0a88c     02 14 66 F0 | 	shl	arg02, #2
0a890     03 00 00 FF 
0a894     04 E4 85 F1 | 	sub	objptr, ##1540
0a898     F2 14 02 F1 | 	add	arg02, objptr
0a89c     0A 15 02 FB | 	rdlong	arg02, arg02
0a8a0     18 4E 05 F1 | 	add	fp, #24
0a8a4     A7 14 62 FC | 	wrlong	arg02, fp
0a8a8                 | ' 
0a8a8                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
0a8a8                 | ' 
0a8a8                 | ' if variables(varnum).vartype<array_no_type then 
0a8a8     18 4E 85 F1 | 	sub	fp, #24
0a8ac     04 14 66 F0 | 	shl	arg02, #4
0a8b0     32 00 00 FF 
0a8b4     74 E4 85 F1 | 	sub	objptr, ##25716
0a8b8     F2 14 02 F1 | 	add	arg02, objptr
0a8bc     0C 14 06 F1 | 	add	arg02, #12
0a8c0     0A 17 02 FB | 	rdlong	arg03, arg02
0a8c4     00 17 16 F2 | 	cmp	arg03, #256 wc
0a8c8     0B 00 00 FF 
0a8cc     CC E5 85 F1 | 	sub	objptr, ##6092
0a8d0     18 01 90 3D |  if_ae	jmp	#LR__0880
0a8d4     38 E2 BF FD | 	call	#_pop
0a8d8     A7 FA 61 FC | 	wrlong	result1, fp
0a8dc     04 4E 05 F1 | 	add	fp, #4
0a8e0     A7 FC 61 FC | 	wrlong	result2, fp
0a8e4     04 4E 05 F1 | 	add	fp, #4
0a8e8     A7 FE 61 FC | 	wrlong	result3, fp
0a8ec     08 4E 85 F1 | 	sub	fp, #8
0a8f0     A7 16 02 FB | 	rdlong	arg03, fp
0a8f4     04 4E 05 F1 | 	add	fp, #4
0a8f8     A7 14 02 FB | 	rdlong	arg02, fp
0a8fc     14 4E 05 F1 | 	add	fp, #20
0a900     A7 12 02 FB | 	rdlong	arg01, fp
0a904     04 12 66 F0 | 	shl	arg01, #4
0a908     0B 00 00 FF 
0a90c     CC E5 05 F1 | 	add	objptr, ##6092
0a910     F2 12 02 F1 | 	add	arg01, objptr
0a914     04 12 06 F1 | 	add	arg01, #4
0a918     09 17 62 FC | 	wrlong	arg03, arg01
0a91c     A7 16 02 FB | 	rdlong	arg03, fp
0a920     04 16 66 F0 | 	shl	arg03, #4
0a924     F2 16 02 F1 | 	add	arg03, objptr
0a928     08 16 06 F1 | 	add	arg03, #8
0a92c     0B 15 62 FC | 	wrlong	arg02, arg03
0a930     A7 16 02 FB | 	rdlong	arg03, fp
0a934     04 16 66 F0 | 	shl	arg03, #4
0a938     F2 16 02 F1 | 	add	arg03, objptr
0a93c     10 4E 85 F1 | 	sub	fp, #16
0a940     A7 14 02 FB | 	rdlong	arg02, fp
0a944     0C 16 06 F1 | 	add	arg03, #12
0a948     0B 15 62 FC | 	wrlong	arg02, arg03
0a94c                 | '   t1=pop() : variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
0a94c                 | '   if variables(varnum).vartype<>result_string2 then return
0a94c     10 4E 05 F1 | 	add	fp, #16
0a950     A7 16 02 FB | 	rdlong	arg03, fp
0a954     18 4E 85 F1 | 	sub	fp, #24
0a958     04 16 66 F0 | 	shl	arg03, #4
0a95c     F2 16 02 F1 | 	add	arg03, objptr
0a960     0C 16 06 F1 | 	add	arg03, #12
0a964     0B 17 02 FB | 	rdlong	arg03, arg03
0a968     2B 16 0E F2 | 	cmp	arg03, #43 wz
0a96c     0B 00 00 FF 
0a970     CC E5 85 F1 | 	sub	objptr, ##6092
0a974     9C 05 90 5D |  if_ne	jmp	#LR__0901
0a978     18 4E 05 F1 | 	add	fp, #24
0a97c     A7 16 02 FB | 	rdlong	arg03, fp
0a980     0B 1F 02 F6 | 	mov	local01, arg03
0a984     04 1E 66 F0 | 	shl	local01, #4
0a988     0B 00 00 FF 
0a98c     CC E5 05 F1 | 	add	objptr, ##6092
0a990     F2 1E 02 F1 | 	add	local01, objptr
0a994     18 4E 85 F1 | 	sub	fp, #24
0a998     04 16 66 F0 | 	shl	arg03, #4
0a99c     F2 16 02 F1 | 	add	arg03, objptr
0a9a0     04 16 06 F1 | 	add	arg03, #4
0a9a4     0B 13 02 FB | 	rdlong	arg01, arg03
0a9a8     0B 00 00 FF 
0a9ac     CC E5 85 F1 | 	sub	objptr, ##6092
0a9b0     48 FE BF FD | 	call	#_convertstring
0a9b4     04 1E 06 F1 | 	add	local01, #4
0a9b8     0F FB 61 FC | 	wrlong	result1, local01
0a9bc     18 4E 05 F1 | 	add	fp, #24
0a9c0     A7 1E 02 FB | 	rdlong	local01, fp
0a9c4     18 4E 85 F1 | 	sub	fp, #24
0a9c8     04 1E 66 F0 | 	shl	local01, #4
0a9cc     0B 00 00 FF 
0a9d0     CC E5 05 F1 | 	add	objptr, ##6092
0a9d4     F2 1E 02 F1 | 	add	local01, objptr
0a9d8     0C 1E 06 F1 | 	add	local01, #12
0a9dc     0F 3F 68 FC | 	wrlong	#31, local01
0a9e0                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
0a9e0                 | '   variables(varnum).vartype=result_string
0a9e0                 | '   return
0a9e0     0B 00 00 FF 
0a9e4     CC E5 85 F1 | 	sub	objptr, ##6092
0a9e8     28 05 90 FD | 	jmp	#LR__0901
0a9ec                 | LR__0880
0a9ec                 | ' for i=0 to 2 : arrid(i)=0 : next i
0a9ec     1C 4E 05 F1 | 	add	fp, #28
0a9f0     A7 00 68 FC | 	wrlong	#0, fp
0a9f4     97 16 48 FB | 	callpa	#(@LR__0882-@LR__0881)>>2,fcache_load_ptr_
0a9f8                 | LR__0881
0a9f8     A7 1E 02 FB | 	rdlong	local01, fp
0a9fc     02 1E 66 F0 | 	shl	local01, #2
0aa00     18 4E 05 F1 | 	add	fp, #24
0aa04     A7 1E 02 F1 | 	add	local01, fp
0aa08     0F 01 68 FC | 	wrlong	#0, local01
0aa0c     18 4E 85 F1 | 	sub	fp, #24
0aa10     A7 1E 02 FB | 	rdlong	local01, fp
0aa14     01 1E 06 F1 | 	add	local01, #1
0aa18     A7 1E 62 FC | 	wrlong	local01, fp
0aa1c     03 1E 16 F2 | 	cmp	local01, #3 wc
0aa20     D4 FF 9F CD |  if_b	jmp	#LR__0881
0aa24                 | LR__0882
0aa24     41 00 00 FF 
0aa28     44 E4 05 F1 | 	add	objptr, ##33348
0aa2c     F2 16 02 FB | 	rdlong	arg03, objptr
0aa30     0B 1F 02 F6 | 	mov	local01, arg03
0aa34     01 1E 66 F0 | 	shl	local01, #1
0aa38     0B 1F 02 F1 | 	add	local01, arg03
0aa3c     02 1E 66 F0 | 	shl	local01, #2
0aa40     03 00 00 FF 
0aa44     04 E4 85 F1 | 	sub	objptr, ##1540
0aa48     F2 1E 02 F1 | 	add	local01, objptr
0aa4c     04 1E 06 F1 | 	add	local01, #4
0aa50     0F 21 02 FB | 	rdlong	local02, local01
0aa54     04 4E 05 F1 | 	add	fp, #4
0aa58     A7 20 62 FC | 	wrlong	local02, fp
0aa5c     20 4E 85 F1 | 	sub	fp, #32
0aa60     3E 00 00 FF 
0aa64     40 E4 85 F1 | 	sub	objptr, ##31808
0aa68     A4 E0 BF FD | 	call	#_pop
0aa6c     A7 FA 61 FC | 	wrlong	result1, fp
0aa70     04 4E 05 F1 | 	add	fp, #4
0aa74     A7 FC 61 FC | 	wrlong	result2, fp
0aa78     04 4E 05 F1 | 	add	fp, #4
0aa7c     A7 FE 61 FC | 	wrlong	result3, fp
0aa80                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
0aa80                 | ' t1=pop() ' var value
0aa80                 | ' if numpar>0 then
0aa80     18 4E 05 F1 | 	add	fp, #24
0aa84     A7 22 02 FB | 	rdlong	local03, fp
0aa88     20 4E 85 F1 | 	sub	fp, #32
0aa8c     01 22 16 F2 | 	cmp	local03, #1 wc
0aa90     70 00 90 CD |  if_b	jmp	#LR__0885
0aa94                 | '   for i=numpar to 1 step -1
0aa94     20 4E 05 F1 | 	add	fp, #32
0aa98     A7 24 0A FB | 	rdlong	local04, fp wz
0aa9c     04 4E 85 F1 | 	sub	fp, #4
0aaa0     A7 24 62 FC | 	wrlong	local04, fp
0aaa4     1C 4E 85 F1 | 	sub	fp, #28
0aaa8     58 00 90 AD |  if_e	jmp	#LR__0884
0aaac                 | LR__0883
0aaac     60 E0 BF FD | 	call	#_pop
0aab0     0C 4E 05 F1 | 	add	fp, #12
0aab4     A7 FA 61 FC | 	wrlong	result1, fp
0aab8     04 4E 05 F1 | 	add	fp, #4
0aabc     A7 FC 61 FC | 	wrlong	result2, fp
0aac0     04 4E 05 F1 | 	add	fp, #4
0aac4     A7 FE 61 FC | 	wrlong	result3, fp
0aac8     08 4E 05 F1 | 	add	fp, #8
0aacc     A7 22 02 FB | 	rdlong	local03, fp
0aad0     01 22 86 F1 | 	sub	local03, #1
0aad4     02 22 66 F0 | 	shl	local03, #2
0aad8     18 4E 05 F1 | 	add	fp, #24
0aadc     A7 22 02 F1 | 	add	local03, fp
0aae0     28 4E 85 F1 | 	sub	fp, #40
0aae4     A7 24 02 FB | 	rdlong	local04, fp
0aae8     11 25 62 FC | 	wrlong	local04, local03
0aaec     10 4E 05 F1 | 	add	fp, #16
0aaf0     A7 24 02 FB | 	rdlong	local04, fp
0aaf4     01 24 8E F1 | 	sub	local04, #1 wz
0aaf8     A7 24 62 FC | 	wrlong	local04, fp
0aafc     1C 4E 85 F1 | 	sub	fp, #28
0ab00     A8 FF 9F 5D |  if_ne	jmp	#LR__0883
0ab04                 | LR__0884
0ab04                 | LR__0885
0ab04     18 4E 05 F1 | 	add	fp, #24
0ab08     A7 1E 02 FB | 	rdlong	local01, fp
0ab0c     04 1E 66 F0 | 	shl	local01, #4
0ab10     0B 00 00 FF 
0ab14     CC E5 05 F1 | 	add	objptr, ##6092
0ab18     F2 1E 02 F1 | 	add	local01, objptr
0ab1c     04 1E 06 F1 | 	add	local01, #4
0ab20     0F 13 02 FB | 	rdlong	arg01, local01
0ab24     0C 4E 05 F1 | 	add	fp, #12
0ab28     A7 12 62 FC | 	wrlong	arg01, fp
0ab2c     24 4E 85 F1 | 	sub	fp, #36
0ab30     0B 00 00 FF 
0ab34     CC E5 85 F1 | 	sub	objptr, ##6092
0ab38     A8 7C B0 FD | 	call	#_pslpeek
0ab3c     FD 24 32 F9 | 	getword	local04, result1, #0
0ab40     28 4E 05 F1 | 	add	fp, #40
0ab44     A7 24 62 FC | 	wrlong	local04, fp
0ab48     04 4E 85 F1 | 	sub	fp, #4
0ab4c     A7 12 02 FB | 	rdlong	arg01, fp
0ab50     24 4E 85 F1 | 	sub	fp, #36
0ab54     02 12 06 F1 | 	add	arg01, #2
0ab58     30 7C B0 FD | 	call	#_pspeek
0ab5c     FD FA E1 F8 | 	getbyte	result1, result1, #0
0ab60     2C 4E 05 F1 | 	add	fp, #44
0ab64     A7 FA 61 FC | 	wrlong	result1, fp
0ab68     08 4E 85 F1 | 	sub	fp, #8
0ab6c     A7 12 02 FB | 	rdlong	arg01, fp
0ab70     09 25 02 F6 | 	mov	local04, arg01
0ab74     10 24 06 F1 | 	add	local04, #16
0ab78     24 4E 85 F1 | 	sub	fp, #36
0ab7c     04 12 06 F1 | 	add	arg01, #4
0ab80     60 7C B0 FD | 	call	#_pslpeek
0ab84     FD 1E 02 F6 | 	mov	local01, result1
0ab88     38 4E 05 F1 | 	add	fp, #56
0ab8c     A7 20 02 FB | 	rdlong	local02, fp
0ab90     10 1F 02 FD | 	qmul	local01, local02
0ab94     04 4E 85 F1 | 	sub	fp, #4
0ab98     A7 22 02 FB | 	rdlong	local03, fp
0ab9c     10 4E 85 F1 | 	sub	fp, #16
0aba0     A7 12 02 FB | 	rdlong	arg01, fp
0aba4     24 4E 85 F1 | 	sub	fp, #36
0aba8     08 12 06 F1 | 	add	arg01, #8
0abac     18 20 62 FD | 	getqx	local02
0abb0     10 23 02 F1 | 	add	local03, local02
0abb4     2C 7C B0 FD | 	call	#_pslpeek
0abb8     FD 20 02 F6 | 	mov	local02, result1
0abbc     24 4E 05 F1 | 	add	fp, #36
0abc0     A7 12 02 FB | 	rdlong	arg01, fp
0abc4     24 4E 85 F1 | 	sub	fp, #36
0abc8     04 12 06 F1 | 	add	arg01, #4
0abcc     14 7C B0 FD | 	call	#_pslpeek
0abd0     FD 20 02 FD | 	qmul	local02, result1
0abd4     3C 4E 05 F1 | 	add	fp, #60
0abd8     A7 20 02 FB | 	rdlong	local02, fp
0abdc     18 1E 62 FD | 	getqx	local01
0abe0     10 1F 02 FD | 	qmul	local01, local02
0abe4     10 4E 85 F1 | 	sub	fp, #16
0abe8     A7 20 02 FB | 	rdlong	local02, fp
0abec     18 1E 62 FD | 	getqx	local01
0abf0     0F 23 02 F1 | 	add	local03, local01
0abf4     11 21 02 FD | 	qmul	local02, local03
0abf8     04 4E 05 F1 | 	add	fp, #4
0abfc                 | ' esize=pspeek(arrptr+2)
0abfc                 | ' 'print " in do_assign, pslpeek(arrptr+4)="; pslpeek(arrptr+4)
0abfc                 | ' 'print " in do_assign, pslpeek(arrptr+8)="; pslpeek(arrptr+8)
0abfc                 | ' 'print " in do_assign, pslpeek(arrptr+12)="; pslpeek(arrptr+12)
0abfc                 | ' 
0abfc                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
0abfc                 | ' select case arrtype
0abfc     18 22 62 FD | 	getqx	local03
0ac00     11 25 02 F1 | 	add	local04, local03
0ac04     A7 24 62 FC | 	wrlong	local04, fp
0ac08     08 4E 85 F1 | 	sub	fp, #8
0ac0c     A7 26 02 FB | 	rdlong	local05, fp
0ac10     28 4E 85 F1 | 	sub	fp, #40
0ac14     00 27 86 F1 | 	sub	local05, #256
0ac18     0C 26 26 F3 | 	fle	local05, #12
0ac1c     30 26 62 FD | 	jmprel	local05
0ac20                 | LR__0886
0ac20     30 00 90 FD | 	jmp	#LR__0887
0ac24     58 00 90 FD | 	jmp	#LR__0888
0ac28     88 00 90 FD | 	jmp	#LR__0889
0ac2c     B8 00 90 FD | 	jmp	#LR__0890
0ac30     10 01 90 FD | 	jmp	#LR__0891
0ac34     68 01 90 FD | 	jmp	#LR__0892
0ac38     98 01 90 FD | 	jmp	#LR__0893
0ac3c     C8 01 90 FD | 	jmp	#LR__0894
0ac40     F8 01 90 FD | 	jmp	#LR__0895
0ac44     28 02 90 FD | 	jmp	#LR__0896
0ac48     58 02 90 FD | 	jmp	#LR__0897
0ac4c     88 02 90 FD | 	jmp	#LR__0898
0ac50     B8 02 90 FD | 	jmp	#LR__0899
0ac54                 | LR__0887
0ac54     A7 12 02 F6 | 	mov	arg01, fp
0ac58     30 4E 05 F1 | 	add	fp, #48
0ac5c     A7 14 02 FB | 	rdlong	arg02, fp
0ac60     30 4E 85 F1 | 	sub	fp, #48
0ac64     0C 16 06 F6 | 	mov	arg03, #12
0ac68     0B 00 00 FF 
0ac6c     C0 E4 05 F1 | 	add	objptr, ##5824
0ac70     84 A4 B0 FD | 	call	#_psram_spin2_write
0ac74     0B 00 00 FF 
0ac78     C0 E4 85 F1 | 	sub	objptr, ##5824
0ac7c     94 02 90 FD | 	jmp	#LR__0900
0ac80                 | LR__0888
0ac80     30 4E 05 F1 | 	add	fp, #48
0ac84     A7 12 02 FB | 	rdlong	arg01, fp
0ac88     30 4E 85 F1 | 	sub	fp, #48
0ac8c     A7 14 02 FB | 	rdlong	arg02, fp
0ac90     01 16 06 F6 | 	mov	arg03, #1
0ac94     00 18 06 F6 | 	mov	arg04, #0
0ac98     0B 00 00 FF 
0ac9c     C0 E4 05 F1 | 	add	objptr, ##5824
0aca0                 | '     return fill(addr, pattern, count, listPtr, 1)
0aca0     01 1A 06 F6 | 	mov	arg05, #1
0aca4     EC A4 B0 FD | 	call	#_psram_spin2_fill
0aca8     0B 00 00 FF 
0acac     C0 E4 85 F1 | 	sub	objptr, ##5824
0acb0     60 02 90 FD | 	jmp	#LR__0900
0acb4                 | LR__0889
0acb4     30 4E 05 F1 | 	add	fp, #48
0acb8     A7 12 02 FB | 	rdlong	arg01, fp
0acbc     30 4E 85 F1 | 	sub	fp, #48
0acc0     A7 14 02 FB | 	rdlong	arg02, fp
0acc4     01 16 06 F6 | 	mov	arg03, #1
0acc8     00 18 06 F6 | 	mov	arg04, #0
0accc     0B 00 00 FF 
0acd0     C0 E4 05 F1 | 	add	objptr, ##5824
0acd4                 | '     return fill(addr, pattern, count, listPtr, 1)
0acd4     01 1A 06 F6 | 	mov	arg05, #1
0acd8     B8 A4 B0 FD | 	call	#_psram_spin2_fill
0acdc     0B 00 00 FF 
0ace0     C0 E4 85 F1 | 	sub	objptr, ##5824
0ace4     2C 02 90 FD | 	jmp	#LR__0900
0ace8                 | LR__0890
0ace8     30 4E 05 F1 | 	add	fp, #48
0acec     A7 12 02 FB | 	rdlong	arg01, fp
0acf0     30 4E 85 F1 | 	sub	fp, #48
0acf4     A7 14 02 FB | 	rdlong	arg02, fp
0acf8     01 16 06 F6 | 	mov	arg03, #1
0acfc     00 18 06 F6 | 	mov	arg04, #0
0ad00     0B 00 00 FF 
0ad04     C0 E4 05 F1 | 	add	objptr, ##5824
0ad08                 | '     return fill(addr, pattern, count, listPtr, 1)
0ad08     01 1A 06 F6 | 	mov	arg05, #1
0ad0c     84 A4 B0 FD | 	call	#_psram_spin2_fill
0ad10     30 4E 05 F1 | 	add	fp, #48
0ad14     A7 12 02 FB | 	rdlong	arg01, fp
0ad18     30 4E 85 F1 | 	sub	fp, #48
0ad1c     01 12 06 F1 | 	add	arg01, #1
0ad20     A7 14 02 FB | 	rdlong	arg02, fp
0ad24     08 14 46 F0 | 	shr	arg02, #8
0ad28     01 16 06 F6 | 	mov	arg03, #1
0ad2c     00 18 06 F6 | 	mov	arg04, #0
0ad30                 | '     return fill(addr, pattern, count, listPtr, 1)
0ad30     01 1A 06 F6 | 	mov	arg05, #1
0ad34     5C A4 B0 FD | 	call	#_psram_spin2_fill
0ad38     0B 00 00 FF 
0ad3c     C0 E4 85 F1 | 	sub	objptr, ##5824
0ad40     D0 01 90 FD | 	jmp	#LR__0900
0ad44                 | LR__0891
0ad44     30 4E 05 F1 | 	add	fp, #48
0ad48     A7 12 02 FB | 	rdlong	arg01, fp
0ad4c     30 4E 85 F1 | 	sub	fp, #48
0ad50     A7 14 02 FB | 	rdlong	arg02, fp
0ad54     01 16 06 F6 | 	mov	arg03, #1
0ad58     00 18 06 F6 | 	mov	arg04, #0
0ad5c     0B 00 00 FF 
0ad60     C0 E4 05 F1 | 	add	objptr, ##5824
0ad64                 | '     return fill(addr, pattern, count, listPtr, 1)
0ad64     01 1A 06 F6 | 	mov	arg05, #1
0ad68     28 A4 B0 FD | 	call	#_psram_spin2_fill
0ad6c     30 4E 05 F1 | 	add	fp, #48
0ad70     A7 12 02 FB | 	rdlong	arg01, fp
0ad74     30 4E 85 F1 | 	sub	fp, #48
0ad78     01 12 06 F1 | 	add	arg01, #1
0ad7c     A7 14 02 FB | 	rdlong	arg02, fp
0ad80     08 14 46 F0 | 	shr	arg02, #8
0ad84     01 16 06 F6 | 	mov	arg03, #1
0ad88     00 18 06 F6 | 	mov	arg04, #0
0ad8c                 | '     return fill(addr, pattern, count, listPtr, 1)
0ad8c     01 1A 06 F6 | 	mov	arg05, #1
0ad90     00 A4 B0 FD | 	call	#_psram_spin2_fill
0ad94     0B 00 00 FF 
0ad98     C0 E4 85 F1 | 	sub	objptr, ##5824
0ad9c     74 01 90 FD | 	jmp	#LR__0900
0ada0                 | LR__0892
0ada0     30 4E 05 F1 | 	add	fp, #48
0ada4     A7 12 02 FB | 	rdlong	arg01, fp
0ada8     30 4E 85 F1 | 	sub	fp, #48
0adac     A7 14 02 FB | 	rdlong	arg02, fp
0adb0     01 16 06 F6 | 	mov	arg03, #1
0adb4     00 18 06 F6 | 	mov	arg04, #0
0adb8     0B 00 00 FF 
0adbc     C0 E4 05 F1 | 	add	objptr, ##5824
0adc0                 | '     return fill(addr, pattern, count, listPtr, 4)
0adc0     04 1A 06 F6 | 	mov	arg05, #4
0adc4     CC A3 B0 FD | 	call	#_psram_spin2_fill
0adc8     0B 00 00 FF 
0adcc     C0 E4 85 F1 | 	sub	objptr, ##5824
0add0     40 01 90 FD | 	jmp	#LR__0900
0add4                 | LR__0893
0add4     30 4E 05 F1 | 	add	fp, #48
0add8     A7 12 02 FB | 	rdlong	arg01, fp
0addc     30 4E 85 F1 | 	sub	fp, #48
0ade0     A7 14 02 FB | 	rdlong	arg02, fp
0ade4     01 16 06 F6 | 	mov	arg03, #1
0ade8     00 18 06 F6 | 	mov	arg04, #0
0adec     0B 00 00 FF 
0adf0     C0 E4 05 F1 | 	add	objptr, ##5824
0adf4                 | '     return fill(addr, pattern, count, listPtr, 4)
0adf4     04 1A 06 F6 | 	mov	arg05, #4
0adf8     98 A3 B0 FD | 	call	#_psram_spin2_fill
0adfc     0B 00 00 FF 
0ae00     C0 E4 85 F1 | 	sub	objptr, ##5824
0ae04     0C 01 90 FD | 	jmp	#LR__0900
0ae08                 | LR__0894
0ae08     30 4E 05 F1 | 	add	fp, #48
0ae0c     A7 12 02 FB | 	rdlong	arg01, fp
0ae10     30 4E 85 F1 | 	sub	fp, #48
0ae14     A7 14 02 FB | 	rdlong	arg02, fp
0ae18     01 16 06 F6 | 	mov	arg03, #1
0ae1c     00 18 06 F6 | 	mov	arg04, #0
0ae20     0B 00 00 FF 
0ae24     C0 E4 05 F1 | 	add	objptr, ##5824
0ae28                 | '     return fill(addr, pattern, count, listPtr, 4)
0ae28     04 1A 06 F6 | 	mov	arg05, #4
0ae2c     64 A3 B0 FD | 	call	#_psram_spin2_fill
0ae30     0B 00 00 FF 
0ae34     C0 E4 85 F1 | 	sub	objptr, ##5824
0ae38     D8 00 90 FD | 	jmp	#LR__0900
0ae3c                 | LR__0895
0ae3c     30 4E 05 F1 | 	add	fp, #48
0ae40     A7 12 02 FB | 	rdlong	arg01, fp
0ae44     30 4E 85 F1 | 	sub	fp, #48
0ae48     A7 14 02 FB | 	rdlong	arg02, fp
0ae4c     01 16 06 F6 | 	mov	arg03, #1
0ae50     00 18 06 F6 | 	mov	arg04, #0
0ae54     0B 00 00 FF 
0ae58     C0 E4 05 F1 | 	add	objptr, ##5824
0ae5c                 | '     return fill(addr, pattern, count, listPtr, 4)
0ae5c     04 1A 06 F6 | 	mov	arg05, #4
0ae60     30 A3 B0 FD | 	call	#_psram_spin2_fill
0ae64     0B 00 00 FF 
0ae68     C0 E4 85 F1 | 	sub	objptr, ##5824
0ae6c     A4 00 90 FD | 	jmp	#LR__0900
0ae70                 | LR__0896
0ae70     30 4E 05 F1 | 	add	fp, #48
0ae74     A7 12 02 FB | 	rdlong	arg01, fp
0ae78     30 4E 85 F1 | 	sub	fp, #48
0ae7c     A7 14 02 FB | 	rdlong	arg02, fp
0ae80     01 16 06 F6 | 	mov	arg03, #1
0ae84     00 18 06 F6 | 	mov	arg04, #0
0ae88     0B 00 00 FF 
0ae8c     C0 E4 05 F1 | 	add	objptr, ##5824
0ae90                 | '     return fill(addr, pattern, count, listPtr, 4)
0ae90     04 1A 06 F6 | 	mov	arg05, #4
0ae94     FC A2 B0 FD | 	call	#_psram_spin2_fill
0ae98     0B 00 00 FF 
0ae9c     C0 E4 85 F1 | 	sub	objptr, ##5824
0aea0     70 00 90 FD | 	jmp	#LR__0900
0aea4                 | LR__0897
0aea4     30 4E 05 F1 | 	add	fp, #48
0aea8     A7 12 02 FB | 	rdlong	arg01, fp
0aeac     30 4E 85 F1 | 	sub	fp, #48
0aeb0     A7 14 02 FB | 	rdlong	arg02, fp
0aeb4     01 16 06 F6 | 	mov	arg03, #1
0aeb8     00 18 06 F6 | 	mov	arg04, #0
0aebc     0B 00 00 FF 
0aec0     C0 E4 05 F1 | 	add	objptr, ##5824
0aec4                 | '     return fill(addr, pattern, count, listPtr, 4)
0aec4     04 1A 06 F6 | 	mov	arg05, #4
0aec8     C8 A2 B0 FD | 	call	#_psram_spin2_fill
0aecc     0B 00 00 FF 
0aed0     C0 E4 85 F1 | 	sub	objptr, ##5824
0aed4     3C 00 90 FD | 	jmp	#LR__0900
0aed8                 | LR__0898
0aed8     30 4E 05 F1 | 	add	fp, #48
0aedc     A7 12 02 FB | 	rdlong	arg01, fp
0aee0     30 4E 85 F1 | 	sub	fp, #48
0aee4     A7 14 02 FB | 	rdlong	arg02, fp
0aee8     01 16 06 F6 | 	mov	arg03, #1
0aeec     00 18 06 F6 | 	mov	arg04, #0
0aef0     0B 00 00 FF 
0aef4     C0 E4 05 F1 | 	add	objptr, ##5824
0aef8                 | '     return fill(addr, pattern, count, listPtr, 4)
0aef8     04 1A 06 F6 | 	mov	arg05, #4
0aefc     94 A2 B0 FD | 	call	#_psram_spin2_fill
0af00     0B 00 00 FF 
0af04     C0 E4 85 F1 | 	sub	objptr, ##5824
0af08     08 00 90 FD | 	jmp	#LR__0900
0af0c                 | LR__0899
0af0c     2F 12 06 F6 | 	mov	arg01, #47
0af10     14 77 B0 FD | 	call	#_printerror
0af14                 | LR__0900
0af14                 | LR__0901
0af14     A7 F0 03 F6 | 	mov	ptra, fp
0af18     B2 00 A0 FD | 	call	#popregs_
0af1c                 | _do_assign_ret
0af1c     2D 00 64 FD | 	ret
0af20                 | 
0af20                 | ' 
0af20                 | ' 
0af20                 | ' ' --------------------- Read a variable and push to the stack
0af20                 | ' 
0af20                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
0af20                 | ' 
0af20                 | ' sub do_getvar
0af20                 | _do_getvar
0af20     04 4A 05 F6 | 	mov	COUNT_, #4
0af24     A8 00 A0 FD | 	call	#pushregs_
0af28     3C F0 07 F1 | 	add	ptra, #60
0af2c                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0af2c                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0af2c     41 00 00 FF 
0af30     44 E4 05 F1 | 	add	objptr, ##33348
0af34     F2 1E 02 FB | 	rdlong	local01, objptr
0af38     0F 17 02 F6 | 	mov	arg03, local01
0af3c     01 16 66 F0 | 	shl	arg03, #1
0af40     0F 17 02 F1 | 	add	arg03, local01
0af44     02 16 66 F0 | 	shl	arg03, #2
0af48     03 00 00 FF 
0af4c     04 E4 85 F1 | 	sub	objptr, ##1540
0af50     F2 16 02 F1 | 	add	arg03, objptr
0af54     04 16 06 F1 | 	add	arg03, #4
0af58     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0af5c     3E 00 00 FF 
0af60     40 E4 85 F1 | 	sub	objptr, ##31808
0af64     C4 00 90 5D |  if_ne	jmp	#LR__0911
0af68     41 00 00 FF 
0af6c     44 E4 05 F1 | 	add	objptr, ##33348
0af70     F2 1E 02 FB | 	rdlong	local01, objptr
0af74     0F 13 02 F6 | 	mov	arg01, local01
0af78     01 12 66 F0 | 	shl	arg01, #1
0af7c     0F 13 02 F1 | 	add	arg01, local01
0af80     02 12 66 F0 | 	shl	arg01, #2
0af84     03 00 00 FF 
0af88     04 E4 85 F1 | 	sub	objptr, ##1540
0af8c     F2 12 02 F1 | 	add	arg01, objptr
0af90     09 1F 02 FB | 	rdlong	local01, arg01
0af94     04 1E 66 F0 | 	shl	local01, #4
0af98     32 00 00 FF 
0af9c     74 E4 85 F1 | 	sub	objptr, ##25716
0afa0     F2 1E 02 F1 | 	add	local01, objptr
0afa4     04 1E 06 F1 | 	add	local01, #4
0afa8     0F 13 02 FB | 	rdlong	arg01, local01
0afac     04 1E 06 F1 | 	add	local01, #4
0afb0     0F 1F 02 FB | 	rdlong	local01, local01
0afb4     A7 12 62 FC | 	wrlong	arg01, fp
0afb8     04 4E 05 F1 | 	add	fp, #4
0afbc     A7 1E 62 FC | 	wrlong	local01, fp
0afc0     35 00 00 FF 
0afc4     78 E4 05 F1 | 	add	objptr, ##27256
0afc8     F2 1E 02 FB | 	rdlong	local01, objptr
0afcc     0F 13 02 F6 | 	mov	arg01, local01
0afd0     01 12 66 F0 | 	shl	arg01, #1
0afd4     0F 13 02 F1 | 	add	arg01, local01
0afd8     02 12 66 F0 | 	shl	arg01, #2
0afdc     03 00 00 FF 
0afe0     04 E4 85 F1 | 	sub	objptr, ##1540
0afe4     F2 12 02 F1 | 	add	arg01, objptr
0afe8     09 1F 02 FB | 	rdlong	local01, arg01
0afec     04 1E 66 F0 | 	shl	local01, #4
0aff0     32 00 00 FF 
0aff4     74 E4 85 F1 | 	sub	objptr, ##25716
0aff8     F2 1E 02 F1 | 	add	local01, objptr
0affc     0C 1E 06 F1 | 	add	local01, #12
0b000     0F 1F 02 FB | 	rdlong	local01, local01
0b004     04 4E 05 F1 | 	add	fp, #4
0b008     A7 1E 62 FC | 	wrlong	local01, fp
0b00c                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
0b00c                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0b00c                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
0b00c     08 4E 85 F1 | 	sub	fp, #8
0b010     00 1F 16 F2 | 	cmp	local01, #256 wc
0b014     0B 00 00 FF 
0b018     CC E5 85 F1 | 	sub	objptr, ##6092
0b01c     0C 00 90 3D |  if_ae	jmp	#LR__0910
0b020     A7 12 02 F6 | 	mov	arg01, fp
0b024     80 DB BF FD | 	call	#_push
0b028     74 04 90 FD | 	jmp	#LR__0932
0b02c                 | LR__0910
0b02c                 | LR__0911
0b02c     41 00 00 FF 
0b030     44 E4 05 F1 | 	add	objptr, ##33348
0b034     F2 16 02 FB | 	rdlong	arg03, objptr
0b038     0B 15 02 F6 | 	mov	arg02, arg03
0b03c     01 14 66 F0 | 	shl	arg02, #1
0b040     0B 15 02 F1 | 	add	arg02, arg03
0b044     02 14 66 F0 | 	shl	arg02, #2
0b048     03 00 00 FF 
0b04c     04 E4 85 F1 | 	sub	objptr, ##1540
0b050     F2 14 02 F1 | 	add	arg02, objptr
0b054     0A 17 02 FB | 	rdlong	arg03, arg02
0b058     04 16 66 F0 | 	shl	arg03, #4
0b05c     32 00 00 FF 
0b060     74 E4 85 F1 | 	sub	objptr, ##25716
0b064     F2 16 02 F1 | 	add	arg03, objptr
0b068     04 16 06 F1 | 	add	arg03, #4
0b06c     0B 13 02 FB | 	rdlong	arg01, arg03
0b070     0C 4E 05 F1 | 	add	fp, #12
0b074     A7 12 62 FC | 	wrlong	arg01, fp
0b078     0C 4E 85 F1 | 	sub	fp, #12
0b07c     0B 00 00 FF 
0b080     CC E5 85 F1 | 	sub	objptr, ##6092
0b084     5C 77 B0 FD | 	call	#_pslpeek
0b088     FD FA 31 F9 | 	getword	result1, result1, #0
0b08c     10 4E 05 F1 | 	add	fp, #16
0b090     A7 FA 61 FC | 	wrlong	result1, fp
0b094     41 00 00 FF 
0b098     44 E4 05 F1 | 	add	objptr, ##33348
0b09c     F2 16 02 FB | 	rdlong	arg03, objptr
0b0a0     0B 15 02 F6 | 	mov	arg02, arg03
0b0a4     01 14 66 F0 | 	shl	arg02, #1
0b0a8     0B 15 02 F1 | 	add	arg02, arg03
0b0ac     02 14 66 F0 | 	shl	arg02, #2
0b0b0     03 00 00 FF 
0b0b4     04 E4 85 F1 | 	sub	objptr, ##1540
0b0b8     F2 14 02 F1 | 	add	arg02, objptr
0b0bc     04 14 06 F1 | 	add	arg02, #4
0b0c0     0A 17 02 FB | 	rdlong	arg03, arg02
0b0c4     04 4E 05 F1 | 	add	fp, #4
0b0c8     A7 16 62 FC | 	wrlong	arg03, fp
0b0cc     08 4E 85 F1 | 	sub	fp, #8
0b0d0     A7 12 02 FB | 	rdlong	arg01, fp
0b0d4     0C 4E 85 F1 | 	sub	fp, #12
0b0d8     02 12 06 F1 | 	add	arg01, #2
0b0dc     3E 00 00 FF 
0b0e0     40 E4 85 F1 | 	sub	objptr, ##31808
0b0e4     A4 76 B0 FD | 	call	#_pspeek
0b0e8     FD FA E1 F8 | 	getbyte	result1, result1, #0
0b0ec     18 4E 05 F1 | 	add	fp, #24
0b0f0     A7 FA 61 FC | 	wrlong	result1, fp
0b0f4     0C 4E 85 F1 | 	sub	fp, #12
0b0f8     A7 12 02 FB | 	rdlong	arg01, fp
0b0fc     0C 4E 85 F1 | 	sub	fp, #12
0b100     04 12 06 F1 | 	add	arg01, #4
0b104     DC 76 B0 FD | 	call	#_pslpeek
0b108     1C 4E 05 F1 | 	add	fp, #28
0b10c     A7 FA 61 FC | 	wrlong	result1, fp
0b110     10 4E 85 F1 | 	sub	fp, #16
0b114     A7 12 02 FB | 	rdlong	arg01, fp
0b118     0C 4E 85 F1 | 	sub	fp, #12
0b11c     08 12 06 F1 | 	add	arg01, #8
0b120     C0 76 B0 FD | 	call	#_pslpeek
0b124     20 4E 05 F1 | 	add	fp, #32
0b128     A7 FA 61 FC | 	wrlong	result1, fp
0b12c     14 4E 85 F1 | 	sub	fp, #20
0b130     A7 12 02 FB | 	rdlong	arg01, fp
0b134     0C 4E 85 F1 | 	sub	fp, #12
0b138     0C 12 06 F1 | 	add	arg01, #12
0b13c     A4 76 B0 FD | 	call	#_pslpeek
0b140     24 4E 05 F1 | 	add	fp, #36
0b144     A7 FA 61 FC | 	wrlong	result1, fp
0b148                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0b148                 | ' esize=pspeek(arrptr+2)
0b148                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0b148                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0b148                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0b148                 | ' if numpar>2 then t1=pop() : i3=t1.result.uresult   else i3=0 
0b148     10 4E 85 F1 | 	sub	fp, #16
0b14c     A7 16 02 FB | 	rdlong	arg03, fp
0b150     14 4E 85 F1 | 	sub	fp, #20
0b154     03 16 16 F2 | 	cmp	arg03, #3 wc
0b158     30 00 90 CD |  if_b	jmp	#LR__0912
0b15c     B0 D9 BF FD | 	call	#_pop
0b160     A7 FA 61 FC | 	wrlong	result1, fp
0b164     04 4E 05 F1 | 	add	fp, #4
0b168     A7 FC 61 FC | 	wrlong	result2, fp
0b16c     04 4E 05 F1 | 	add	fp, #4
0b170     A7 FE 61 FC | 	wrlong	result3, fp
0b174     08 4E 85 F1 | 	sub	fp, #8
0b178     A7 16 02 FB | 	rdlong	arg03, fp
0b17c     30 4E 05 F1 | 	add	fp, #48
0b180     A7 16 62 FC | 	wrlong	arg03, fp
0b184     30 4E 85 F1 | 	sub	fp, #48
0b188     0C 00 90 FD | 	jmp	#LR__0913
0b18c                 | LR__0912
0b18c     30 4E 05 F1 | 	add	fp, #48
0b190     A7 00 68 FC | 	wrlong	#0, fp
0b194     30 4E 85 F1 | 	sub	fp, #48
0b198                 | LR__0913
0b198                 | ' if numpar>1 then t1=pop() : i2=t1.result.uresult   else i2=0 
0b198     14 4E 05 F1 | 	add	fp, #20
0b19c     A7 16 02 FB | 	rdlong	arg03, fp
0b1a0     14 4E 85 F1 | 	sub	fp, #20
0b1a4     02 16 16 F2 | 	cmp	arg03, #2 wc
0b1a8     30 00 90 CD |  if_b	jmp	#LR__0914
0b1ac     60 D9 BF FD | 	call	#_pop
0b1b0     A7 FA 61 FC | 	wrlong	result1, fp
0b1b4     04 4E 05 F1 | 	add	fp, #4
0b1b8     A7 FC 61 FC | 	wrlong	result2, fp
0b1bc     04 4E 05 F1 | 	add	fp, #4
0b1c0     A7 FE 61 FC | 	wrlong	result3, fp
0b1c4     08 4E 85 F1 | 	sub	fp, #8
0b1c8     A7 16 02 FB | 	rdlong	arg03, fp
0b1cc     2C 4E 05 F1 | 	add	fp, #44
0b1d0     A7 16 62 FC | 	wrlong	arg03, fp
0b1d4     2C 4E 85 F1 | 	sub	fp, #44
0b1d8     0C 00 90 FD | 	jmp	#LR__0915
0b1dc                 | LR__0914
0b1dc     2C 4E 05 F1 | 	add	fp, #44
0b1e0     A7 00 68 FC | 	wrlong	#0, fp
0b1e4     2C 4E 85 F1 | 	sub	fp, #44
0b1e8                 | LR__0915
0b1e8                 | ' if numpar>0 then t1=pop() : i1=t1.result.uresult   else i1=0 
0b1e8     14 4E 05 F1 | 	add	fp, #20
0b1ec     A7 16 02 FB | 	rdlong	arg03, fp
0b1f0     14 4E 85 F1 | 	sub	fp, #20
0b1f4     01 16 16 F2 | 	cmp	arg03, #1 wc
0b1f8     30 00 90 CD |  if_b	jmp	#LR__0916
0b1fc     10 D9 BF FD | 	call	#_pop
0b200     A7 FA 61 FC | 	wrlong	result1, fp
0b204     04 4E 05 F1 | 	add	fp, #4
0b208     A7 FC 61 FC | 	wrlong	result2, fp
0b20c     04 4E 05 F1 | 	add	fp, #4
0b210     A7 FE 61 FC | 	wrlong	result3, fp
0b214     08 4E 85 F1 | 	sub	fp, #8
0b218     A7 16 02 FB | 	rdlong	arg03, fp
0b21c     28 4E 05 F1 | 	add	fp, #40
0b220     A7 16 62 FC | 	wrlong	arg03, fp
0b224     28 4E 85 F1 | 	sub	fp, #40
0b228     0C 00 90 FD | 	jmp	#LR__0917
0b22c                 | LR__0916
0b22c     28 4E 05 F1 | 	add	fp, #40
0b230     A7 00 68 FC | 	wrlong	#0, fp
0b234     28 4E 85 F1 | 	sub	fp, #40
0b238                 | LR__0917
0b238     0C 4E 05 F1 | 	add	fp, #12
0b23c     A7 20 02 FB | 	rdlong	local02, fp
0b240     1C 4E 05 F1 | 	add	fp, #28
0b244     A7 22 02 FB | 	rdlong	local03, fp
0b248     04 4E 05 F1 | 	add	fp, #4
0b24c     A7 FE 01 FB | 	rdlong	result3, fp
0b250     10 4E 85 F1 | 	sub	fp, #16
0b254     A7 FC 01 FB | 	rdlong	result2, fp
0b258     FE FE 01 FD | 	qmul	result3, result2
0b25c     10 20 06 F1 | 	add	local02, #16
0b260     14 4E 05 F1 | 	add	fp, #20
0b264     A7 FE 01 FB | 	rdlong	result3, fp
0b268     18 FA 61 FD | 	getqx	result1
0b26c     FE FE 01 FD | 	qmul	result3, result2
0b270     FD 22 02 F1 | 	add	local03, result1
0b274     10 4E 85 F1 | 	sub	fp, #16
0b278     A7 FC 01 FB | 	rdlong	result2, fp
0b27c     18 FE 61 FD | 	getqx	result3
0b280     FE FE 01 FD | 	qmul	result3, result2
0b284     08 4E 85 F1 | 	sub	fp, #8
0b288     A7 FC 01 FB | 	rdlong	result2, fp
0b28c     18 FE 61 FD | 	getqx	result3
0b290     FF 22 02 F1 | 	add	local03, result3
0b294     FE 22 02 FD | 	qmul	local03, result2
0b298     1C 4E 05 F1 | 	add	fp, #28
0b29c                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0b29c                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
0b29c                 | ' 
0b29c                 | ' select case vartype
0b29c     18 FE 61 FD | 	getqx	result3
0b2a0     FF 20 02 F1 | 	add	local02, result3
0b2a4     A7 20 62 FC | 	wrlong	local02, fp
0b2a8     24 4E 85 F1 | 	sub	fp, #36
0b2ac     A7 24 02 FB | 	rdlong	local04, fp
0b2b0     10 4E 85 F1 | 	sub	fp, #16
0b2b4     00 25 86 F1 | 	sub	local04, #256
0b2b8     0C 24 26 F3 | 	fle	local04, #12
0b2bc     30 24 62 FD | 	jmprel	local04
0b2c0                 | LR__0918
0b2c0     30 00 90 FD | 	jmp	#LR__0919
0b2c4     58 00 90 FD | 	jmp	#LR__0920
0b2c8     8C 00 90 FD | 	jmp	#LR__0921
0b2cc     AC 00 90 FD | 	jmp	#LR__0922
0b2d0     E8 00 90 FD | 	jmp	#LR__0923
0b2d4     08 01 90 FD | 	jmp	#LR__0924
0b2d8     24 01 90 FD | 	jmp	#LR__0925
0b2dc     40 01 90 FD | 	jmp	#LR__0926
0b2e0     50 01 90 FD | 	jmp	#LR__0927
0b2e4     60 01 90 FD | 	jmp	#LR__0928
0b2e8     7C 01 90 FD | 	jmp	#LR__0929
0b2ec     8C 01 90 FD | 	jmp	#LR__0930
0b2f0     A4 01 90 FD | 	jmp	#LR__0931
0b2f4                 | LR__0919
0b2f4     A7 12 02 F6 | 	mov	arg01, fp
0b2f8     34 4E 05 F1 | 	add	fp, #52
0b2fc     A7 14 02 FB | 	rdlong	arg02, fp
0b300     34 4E 85 F1 | 	sub	fp, #52
0b304     0C 16 06 F6 | 	mov	arg03, #12
0b308     0B 00 00 FF 
0b30c     C0 E4 05 F1 | 	add	objptr, ##5824
0b310     48 9D B0 FD | 	call	#_psram_spin2_read1
0b314     0B 00 00 FF 
0b318     C0 E4 85 F1 | 	sub	objptr, ##5824
0b31c     78 01 90 FD | 	jmp	#LR__0931
0b320                 | LR__0920
0b320     08 4E 05 F1 | 	add	fp, #8
0b324     A7 38 68 FC | 	wrlong	#28, fp
0b328     2C 4E 05 F1 | 	add	fp, #44
0b32c     A7 12 02 FB | 	rdlong	arg01, fp
0b330     34 4E 85 F1 | 	sub	fp, #52
0b334     54 74 B0 FD | 	call	#_pspeek
0b338     FD FA E1 F8 | 	getbyte	result1, result1, #0
0b33c     A7 FA 61 FC | 	wrlong	result1, fp
0b340     80 FA 15 F2 | 	cmp	result1, #128 wc
0b344     00 1F 66 36 |  if_ae	neg	local01, #256
0b348     A7 22 02 3B |  if_ae	rdlong	local03, fp
0b34c     11 1F 42 35 |  if_ae	or	local01, local03
0b350     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0b354     40 01 90 FD | 	jmp	#LR__0931
0b358                 | LR__0921
0b358     08 4E 05 F1 | 	add	fp, #8
0b35c     A7 3A 68 FC | 	wrlong	#29, fp
0b360     2C 4E 05 F1 | 	add	fp, #44
0b364     A7 12 02 FB | 	rdlong	arg01, fp
0b368     34 4E 85 F1 | 	sub	fp, #52
0b36c     1C 74 B0 FD | 	call	#_pspeek
0b370     FD FA E1 F8 | 	getbyte	result1, result1, #0
0b374     A7 FA 61 FC | 	wrlong	result1, fp
0b378     1C 01 90 FD | 	jmp	#LR__0931
0b37c                 | LR__0922
0b37c     08 4E 05 F1 | 	add	fp, #8
0b380     A7 38 68 FC | 	wrlong	#28, fp
0b384     2C 4E 05 F1 | 	add	fp, #44
0b388     A7 12 02 FB | 	rdlong	arg01, fp
0b38c     34 4E 85 F1 | 	sub	fp, #52
0b390     50 74 B0 FD | 	call	#_pslpeek
0b394     FD FA 31 F9 | 	getword	result1, result1, #0
0b398     A7 FA 61 FC | 	wrlong	result1, fp
0b39c     40 00 00 FF 
0b3a0     00 FA 15 F2 | 	cmp	result1, ##32768 wc
0b3a4     FF 7F 00 3F 
0b3a8     00 1F 06 36 |  if_ae	mov	local01, ##16776960
0b3ac     A7 22 02 3B |  if_ae	rdlong	local03, fp
0b3b0     11 1F 42 35 |  if_ae	or	local01, local03
0b3b4     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0b3b8     DC 00 90 FD | 	jmp	#LR__0931
0b3bc                 | LR__0923
0b3bc     08 4E 05 F1 | 	add	fp, #8
0b3c0     A7 3A 68 FC | 	wrlong	#29, fp
0b3c4     2C 4E 05 F1 | 	add	fp, #44
0b3c8     A7 12 02 FB | 	rdlong	arg01, fp
0b3cc     34 4E 85 F1 | 	sub	fp, #52
0b3d0     10 74 B0 FD | 	call	#_pslpeek
0b3d4     FD FA 31 F9 | 	getword	result1, result1, #0
0b3d8     A7 FA 61 FC | 	wrlong	result1, fp
0b3dc     B8 00 90 FD | 	jmp	#LR__0931
0b3e0                 | LR__0924
0b3e0     08 4E 05 F1 | 	add	fp, #8
0b3e4     A7 38 68 FC | 	wrlong	#28, fp
0b3e8     2C 4E 05 F1 | 	add	fp, #44
0b3ec     A7 12 02 FB | 	rdlong	arg01, fp
0b3f0     34 4E 85 F1 | 	sub	fp, #52
0b3f4     EC 73 B0 FD | 	call	#_pslpeek
0b3f8     A7 FA 61 FC | 	wrlong	result1, fp
0b3fc     98 00 90 FD | 	jmp	#LR__0931
0b400                 | LR__0925
0b400     08 4E 05 F1 | 	add	fp, #8
0b404     A7 3A 68 FC | 	wrlong	#29, fp
0b408     2C 4E 05 F1 | 	add	fp, #44
0b40c     A7 12 02 FB | 	rdlong	arg01, fp
0b410     34 4E 85 F1 | 	sub	fp, #52
0b414     CC 73 B0 FD | 	call	#_pslpeek
0b418     A7 FA 61 FC | 	wrlong	result1, fp
0b41c     78 00 90 FD | 	jmp	#LR__0931
0b420                 | LR__0926
0b420     08 4E 05 F1 | 	add	fp, #8
0b424     A7 FE 69 FC | 	wrlong	#255, fp
0b428     08 4E 85 F1 | 	sub	fp, #8
0b42c     A7 60 68 FC | 	wrlong	#48, fp
0b430     64 00 90 FD | 	jmp	#LR__0931
0b434                 | LR__0927
0b434     08 4E 05 F1 | 	add	fp, #8
0b438     A7 FE 69 FC | 	wrlong	#255, fp
0b43c     08 4E 85 F1 | 	sub	fp, #8
0b440     A7 60 68 FC | 	wrlong	#48, fp
0b444     50 00 90 FD | 	jmp	#LR__0931
0b448                 | LR__0928
0b448     08 4E 05 F1 | 	add	fp, #8
0b44c     A7 3C 68 FC | 	wrlong	#30, fp
0b450     2C 4E 05 F1 | 	add	fp, #44
0b454     A7 12 02 FB | 	rdlong	arg01, fp
0b458     34 4E 85 F1 | 	sub	fp, #52
0b45c     84 73 B0 FD | 	call	#_pslpeek
0b460     A7 FA 61 FC | 	wrlong	result1, fp
0b464     30 00 90 FD | 	jmp	#LR__0931
0b468                 | LR__0929
0b468     08 4E 05 F1 | 	add	fp, #8
0b46c     A7 FE 69 FC | 	wrlong	#255, fp
0b470     08 4E 85 F1 | 	sub	fp, #8
0b474     A7 60 68 FC | 	wrlong	#48, fp
0b478     1C 00 90 FD | 	jmp	#LR__0931
0b47c                 | LR__0930
0b47c     08 4E 05 F1 | 	add	fp, #8
0b480     A7 3E 68 FC | 	wrlong	#31, fp
0b484     2C 4E 05 F1 | 	add	fp, #44
0b488     A7 12 02 FB | 	rdlong	arg01, fp
0b48c     34 4E 85 F1 | 	sub	fp, #52
0b490     50 73 B0 FD | 	call	#_pslpeek
0b494     A7 FA 61 FC | 	wrlong	result1, fp
0b498                 | LR__0931
0b498     A7 12 02 F6 | 	mov	arg01, fp
0b49c     08 D7 BF FD | 	call	#_push
0b4a0                 | LR__0932
0b4a0     A7 F0 03 F6 | 	mov	ptra, fp
0b4a4     B2 00 A0 FD | 	call	#popregs_
0b4a8                 | _do_getvar_ret
0b4a8     2D 00 64 FD | 	ret
0b4ac                 | 
0b4ac                 | ' 
0b4ac                 | ' '------------------------ Operators 
0b4ac                 | ' 
0b4ac                 | ' sub do_plus 
0b4ac                 | _do_plus
0b4ac     05 4A 05 F6 | 	mov	COUNT_, #5
0b4b0     A8 00 A0 FD | 	call	#pushregs_
0b4b4     18 F0 07 F1 | 	add	ptra, #24
0b4b8     54 D6 BF FD | 	call	#_pop
0b4bc     FD 1E 02 F6 | 	mov	local01, result1
0b4c0     FE 20 02 F6 | 	mov	local02, result2
0b4c4     FF 22 02 F6 | 	mov	local03, result3
0b4c8     0C 4E 05 F1 | 	add	fp, #12
0b4cc     A7 1E 62 FC | 	wrlong	local01, fp
0b4d0     04 4E 05 F1 | 	add	fp, #4
0b4d4     A7 20 62 FC | 	wrlong	local02, fp
0b4d8     04 4E 05 F1 | 	add	fp, #4
0b4dc     A7 22 62 FC | 	wrlong	local03, fp
0b4e0     14 4E 85 F1 | 	sub	fp, #20
0b4e4     28 D6 BF FD | 	call	#_pop
0b4e8     FF 22 02 F6 | 	mov	local03, result3
0b4ec     A7 FA 61 FC | 	wrlong	result1, fp
0b4f0     04 4E 05 F1 | 	add	fp, #4
0b4f4     A7 FC 61 FC | 	wrlong	result2, fp
0b4f8     04 4E 05 F1 | 	add	fp, #4
0b4fc     A7 22 62 FC | 	wrlong	local03, fp
0b500                 | ' 
0b500                 | ' t2=pop()
0b500                 | ' t1=pop()
0b500                 | ' 
0b500                 | ' 
0b500                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
0b500     08 4E 85 F1 | 	sub	fp, #8
0b504     1D 22 0E F2 | 	cmp	local03, #29 wz
0b508     14 4E 05 A1 |  if_e	add	fp, #20
0b50c     A7 24 02 AB |  if_e	rdlong	local04, fp
0b510     14 4E 85 A1 |  if_e	sub	fp, #20
0b514     12 23 02 A6 |  if_e	mov	local03, local04
0b518     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b51c     1C 00 90 5D |  if_ne	jmp	#LR__0940
0b520     A7 1E 02 FB | 	rdlong	local01, fp
0b524     0C 4E 05 F1 | 	add	fp, #12
0b528     A7 20 02 FB | 	rdlong	local02, fp
0b52c     0C 4E 85 F1 | 	sub	fp, #12
0b530     10 1F 02 F1 | 	add	local01, local02
0b534     A7 1E 62 FC | 	wrlong	local01, fp
0b538     3C 03 90 FD | 	jmp	#LR__0952
0b53c                 | LR__0940
0b53c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
0b53c     08 4E 05 F1 | 	add	fp, #8
0b540     A7 1E 02 FB | 	rdlong	local01, fp
0b544     08 4E 85 F1 | 	sub	fp, #8
0b548     1D 1E 0E F2 | 	cmp	local01, #29 wz
0b54c     14 4E 05 A1 |  if_e	add	fp, #20
0b550     A7 24 02 AB |  if_e	rdlong	local04, fp
0b554     14 4E 85 A1 |  if_e	sub	fp, #20
0b558     12 23 02 A6 |  if_e	mov	local03, local04
0b55c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b560     28 00 90 5D |  if_ne	jmp	#LR__0941
0b564     A7 1E 02 FB | 	rdlong	local01, fp
0b568     0C 4E 05 F1 | 	add	fp, #12
0b56c     A7 20 02 FB | 	rdlong	local02, fp
0b570     0C 4E 85 F1 | 	sub	fp, #12
0b574     10 1F 02 F1 | 	add	local01, local02
0b578     A7 1E 62 FC | 	wrlong	local01, fp
0b57c     08 4E 05 F1 | 	add	fp, #8
0b580     A7 38 68 FC | 	wrlong	#28, fp
0b584     08 4E 85 F1 | 	sub	fp, #8
0b588     EC 02 90 FD | 	jmp	#LR__0952
0b58c                 | LR__0941
0b58c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0b58c     08 4E 05 F1 | 	add	fp, #8
0b590     A7 1E 02 FB | 	rdlong	local01, fp
0b594     08 4E 85 F1 | 	sub	fp, #8
0b598     1D 1E 0E F2 | 	cmp	local01, #29 wz
0b59c     14 4E 05 A1 |  if_e	add	fp, #20
0b5a0     A7 24 02 AB |  if_e	rdlong	local04, fp
0b5a4     14 4E 85 A1 |  if_e	sub	fp, #20
0b5a8     12 23 02 A6 |  if_e	mov	local03, local04
0b5ac     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b5b0     30 00 90 5D |  if_ne	jmp	#LR__0942
0b5b4     A7 12 02 FB | 	rdlong	arg01, fp
0b5b8     70 CB B0 FD | 	call	#__system___float_fromuns
0b5bc     FD 12 02 F6 | 	mov	arg01, result1
0b5c0     0C 4E 05 F1 | 	add	fp, #12
0b5c4     A7 14 02 FB | 	rdlong	arg02, fp
0b5c8     0C 4E 85 F1 | 	sub	fp, #12
0b5cc     90 CB B0 FD | 	call	#__system___float_add
0b5d0     A7 FA 61 FC | 	wrlong	result1, fp
0b5d4     08 4E 05 F1 | 	add	fp, #8
0b5d8     A7 3C 68 FC | 	wrlong	#30, fp
0b5dc     08 4E 85 F1 | 	sub	fp, #8
0b5e0     94 02 90 FD | 	jmp	#LR__0952
0b5e4                 | LR__0942
0b5e4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
0b5e4     08 4E 05 F1 | 	add	fp, #8
0b5e8     A7 1E 02 FB | 	rdlong	local01, fp
0b5ec     08 4E 85 F1 | 	sub	fp, #8
0b5f0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b5f4     14 4E 05 A1 |  if_e	add	fp, #20
0b5f8     A7 24 02 AB |  if_e	rdlong	local04, fp
0b5fc     14 4E 85 A1 |  if_e	sub	fp, #20
0b600     12 23 02 A6 |  if_e	mov	local03, local04
0b604     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b608     1C 00 90 5D |  if_ne	jmp	#LR__0943
0b60c     A7 1E 02 FB | 	rdlong	local01, fp
0b610     0C 4E 05 F1 | 	add	fp, #12
0b614     A7 20 02 FB | 	rdlong	local02, fp
0b618     0C 4E 85 F1 | 	sub	fp, #12
0b61c     10 1F 02 F1 | 	add	local01, local02
0b620     A7 1E 62 FC | 	wrlong	local01, fp
0b624     50 02 90 FD | 	jmp	#LR__0952
0b628                 | LR__0943
0b628                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
0b628     08 4E 05 F1 | 	add	fp, #8
0b62c     A7 1E 02 FB | 	rdlong	local01, fp
0b630     08 4E 85 F1 | 	sub	fp, #8
0b634     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b638     14 4E 05 A1 |  if_e	add	fp, #20
0b63c     A7 24 02 AB |  if_e	rdlong	local04, fp
0b640     14 4E 85 A1 |  if_e	sub	fp, #20
0b644     12 23 02 A6 |  if_e	mov	local03, local04
0b648     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b64c     1C 00 90 5D |  if_ne	jmp	#LR__0944
0b650     A7 1E 02 FB | 	rdlong	local01, fp
0b654     0C 4E 05 F1 | 	add	fp, #12
0b658     A7 20 02 FB | 	rdlong	local02, fp
0b65c     0C 4E 85 F1 | 	sub	fp, #12
0b660     10 1F 02 F1 | 	add	local01, local02
0b664     A7 1E 62 FC | 	wrlong	local01, fp
0b668     0C 02 90 FD | 	jmp	#LR__0952
0b66c                 | LR__0944
0b66c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0b66c     08 4E 05 F1 | 	add	fp, #8
0b670     A7 1E 02 FB | 	rdlong	local01, fp
0b674     08 4E 85 F1 | 	sub	fp, #8
0b678     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b67c     14 4E 05 A1 |  if_e	add	fp, #20
0b680     A7 24 02 AB |  if_e	rdlong	local04, fp
0b684     14 4E 85 A1 |  if_e	sub	fp, #20
0b688     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
0b68c     40 00 90 5D |  if_ne	jmp	#LR__0945
0b690     A7 12 02 FB | 	rdlong	arg01, fp
0b694     09 13 52 F6 | 	abs	arg01, arg01 wc
0b698     1F 26 C6 C9 |  if_b	decod	local05, #31
0b69c     00 26 06 36 |  if_ae	mov	local05, #0
0b6a0     88 CA B0 FD | 	call	#__system___float_fromuns
0b6a4     13 FB 61 F5 | 	xor	result1, local05
0b6a8     FD 12 02 F6 | 	mov	arg01, result1
0b6ac     0C 4E 05 F1 | 	add	fp, #12
0b6b0     A7 14 02 FB | 	rdlong	arg02, fp
0b6b4     0C 4E 85 F1 | 	sub	fp, #12
0b6b8     A4 CA B0 FD | 	call	#__system___float_add
0b6bc     A7 FA 61 FC | 	wrlong	result1, fp
0b6c0     08 4E 05 F1 | 	add	fp, #8
0b6c4     A7 3C 68 FC | 	wrlong	#30, fp
0b6c8     08 4E 85 F1 | 	sub	fp, #8
0b6cc     A8 01 90 FD | 	jmp	#LR__0952
0b6d0                 | LR__0945
0b6d0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
0b6d0     08 4E 05 F1 | 	add	fp, #8
0b6d4     A7 1E 02 FB | 	rdlong	local01, fp
0b6d8     08 4E 85 F1 | 	sub	fp, #8
0b6dc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b6e0     14 4E 05 A1 |  if_e	add	fp, #20
0b6e4     A7 22 02 AB |  if_e	rdlong	local03, fp
0b6e8     14 4E 85 A1 |  if_e	sub	fp, #20
0b6ec     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b6f0     28 00 90 5D |  if_ne	jmp	#LR__0946
0b6f4     A7 1E 02 FB | 	rdlong	local01, fp
0b6f8     0C 4E 05 F1 | 	add	fp, #12
0b6fc     A7 12 02 FB | 	rdlong	arg01, fp
0b700     0C 4E 85 F1 | 	sub	fp, #12
0b704     24 CA B0 FD | 	call	#__system___float_fromuns
0b708     FD 14 02 F6 | 	mov	arg02, result1
0b70c     0F 13 02 F6 | 	mov	arg01, local01
0b710     4C CA B0 FD | 	call	#__system___float_add
0b714     A7 FA 61 FC | 	wrlong	result1, fp
0b718     5C 01 90 FD | 	jmp	#LR__0952
0b71c                 | LR__0946
0b71c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
0b71c     08 4E 05 F1 | 	add	fp, #8
0b720     A7 1E 02 FB | 	rdlong	local01, fp
0b724     08 4E 85 F1 | 	sub	fp, #8
0b728     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b72c     14 4E 05 A1 |  if_e	add	fp, #20
0b730     A7 22 02 AB |  if_e	rdlong	local03, fp
0b734     14 4E 85 A1 |  if_e	sub	fp, #20
0b738     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b73c     38 00 90 5D |  if_ne	jmp	#LR__0947
0b740     A7 1E 02 FB | 	rdlong	local01, fp
0b744     0C 4E 05 F1 | 	add	fp, #12
0b748     A7 12 02 FB | 	rdlong	arg01, fp
0b74c     0C 4E 85 F1 | 	sub	fp, #12
0b750     09 13 52 F6 | 	abs	arg01, arg01 wc
0b754     1F 26 C6 C9 |  if_b	decod	local05, #31
0b758     00 26 06 36 |  if_ae	mov	local05, #0
0b75c     CC C9 B0 FD | 	call	#__system___float_fromuns
0b760     13 FB 61 F5 | 	xor	result1, local05
0b764     FD 14 02 F6 | 	mov	arg02, result1
0b768     0F 13 02 F6 | 	mov	arg01, local01
0b76c     F0 C9 B0 FD | 	call	#__system___float_add
0b770     A7 FA 61 FC | 	wrlong	result1, fp
0b774     00 01 90 FD | 	jmp	#LR__0952
0b778                 | LR__0947
0b778                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
0b778     08 4E 05 F1 | 	add	fp, #8
0b77c     A7 1E 02 FB | 	rdlong	local01, fp
0b780     08 4E 85 F1 | 	sub	fp, #8
0b784     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b788     14 4E 05 A1 |  if_e	add	fp, #20
0b78c     A7 22 02 AB |  if_e	rdlong	local03, fp
0b790     14 4E 85 A1 |  if_e	sub	fp, #20
0b794     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b798     1C 00 90 5D |  if_ne	jmp	#LR__0948
0b79c     A7 12 02 FB | 	rdlong	arg01, fp
0b7a0     0C 4E 05 F1 | 	add	fp, #12
0b7a4     A7 14 02 FB | 	rdlong	arg02, fp
0b7a8     0C 4E 85 F1 | 	sub	fp, #12
0b7ac     B0 C9 B0 FD | 	call	#__system___float_add
0b7b0     A7 FA 61 FC | 	wrlong	result1, fp
0b7b4     C0 00 90 FD | 	jmp	#LR__0952
0b7b8                 | LR__0948
0b7b8                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0b7b8     08 4E 05 F1 | 	add	fp, #8
0b7bc     A7 1E 02 FB | 	rdlong	local01, fp
0b7c0     08 4E 85 F1 | 	sub	fp, #8
0b7c4     1F 1E 0E F2 | 	cmp	local01, #31 wz
0b7c8     24 00 90 5D |  if_ne	jmp	#LR__0949
0b7cc     14 4E 05 F1 | 	add	fp, #20
0b7d0     A7 22 02 FB | 	rdlong	local03, fp
0b7d4     14 4E 85 F1 | 	sub	fp, #20
0b7d8     1F 22 0E F2 | 	cmp	local03, #31 wz
0b7dc     A7 04 68 5C |  if_ne	wrlong	#2, fp
0b7e0     08 4E 05 51 |  if_ne	add	fp, #8
0b7e4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0b7e8     08 4E 85 51 |  if_ne	sub	fp, #8
0b7ec     88 00 90 5D |  if_ne	jmp	#LR__0952
0b7f0                 | LR__0949
0b7f0                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0b7f0     14 4E 05 F1 | 	add	fp, #20
0b7f4     A7 1E 02 FB | 	rdlong	local01, fp
0b7f8     14 4E 85 F1 | 	sub	fp, #20
0b7fc     1F 1E 0E F2 | 	cmp	local01, #31 wz
0b800     24 00 90 5D |  if_ne	jmp	#LR__0950
0b804     08 4E 05 F1 | 	add	fp, #8
0b808     A7 22 02 FB | 	rdlong	local03, fp
0b80c     08 4E 85 F1 | 	sub	fp, #8
0b810     1F 22 0E F2 | 	cmp	local03, #31 wz
0b814     A7 04 68 5C |  if_ne	wrlong	#2, fp
0b818     08 4E 05 51 |  if_ne	add	fp, #8
0b81c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0b820     08 4E 85 51 |  if_ne	sub	fp, #8
0b824     50 00 90 5D |  if_ne	jmp	#LR__0952
0b828                 | LR__0950
0b828                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
0b828     08 4E 05 F1 | 	add	fp, #8
0b82c     A7 1E 02 FB | 	rdlong	local01, fp
0b830     08 4E 85 F1 | 	sub	fp, #8
0b834     1F 1E 0E F2 | 	cmp	local01, #31 wz
0b838     14 4E 05 A1 |  if_e	add	fp, #20
0b83c     A7 22 02 AB |  if_e	rdlong	local03, fp
0b840     14 4E 85 A1 |  if_e	sub	fp, #20
0b844     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0b848     1C 00 90 5D |  if_ne	jmp	#LR__0951
0b84c     A7 12 02 FB | 	rdlong	arg01, fp
0b850     0C 4E 05 F1 | 	add	fp, #12
0b854     A7 14 02 FB | 	rdlong	arg02, fp
0b858     0C 4E 85 F1 | 	sub	fp, #12
0b85c     44 A3 B0 FD | 	call	#__system___string_concat
0b860     A7 FA 61 FC | 	wrlong	result1, fp
0b864     10 00 90 FD | 	jmp	#LR__0952
0b868                 | LR__0951
0b868     A7 08 68 FC | 	wrlong	#4, fp
0b86c     08 4E 05 F1 | 	add	fp, #8
0b870     A7 FE 69 FC | 	wrlong	#255, fp
0b874     08 4E 85 F1 | 	sub	fp, #8
0b878                 | LR__0952
0b878     A7 12 02 F6 | 	mov	arg01, fp
0b87c     28 D3 BF FD | 	call	#_push
0b880     A7 F0 03 F6 | 	mov	ptra, fp
0b884     B2 00 A0 FD | 	call	#popregs_
0b888                 | _do_plus_ret
0b888     2D 00 64 FD | 	ret
0b88c                 | 
0b88c                 | ' 
0b88c                 | ' sub do_minus
0b88c                 | _do_minus
0b88c     05 4A 05 F6 | 	mov	COUNT_, #5
0b890     A8 00 A0 FD | 	call	#pushregs_
0b894     18 F0 07 F1 | 	add	ptra, #24
0b898     74 D2 BF FD | 	call	#_pop
0b89c     FD 1E 02 F6 | 	mov	local01, result1
0b8a0     FE 20 02 F6 | 	mov	local02, result2
0b8a4     FF 22 02 F6 | 	mov	local03, result3
0b8a8     0C 4E 05 F1 | 	add	fp, #12
0b8ac     A7 1E 62 FC | 	wrlong	local01, fp
0b8b0     04 4E 05 F1 | 	add	fp, #4
0b8b4     A7 20 62 FC | 	wrlong	local02, fp
0b8b8     04 4E 05 F1 | 	add	fp, #4
0b8bc     A7 22 62 FC | 	wrlong	local03, fp
0b8c0     14 4E 85 F1 | 	sub	fp, #20
0b8c4     48 D2 BF FD | 	call	#_pop
0b8c8     FF 22 02 F6 | 	mov	local03, result3
0b8cc     A7 FA 61 FC | 	wrlong	result1, fp
0b8d0     04 4E 05 F1 | 	add	fp, #4
0b8d4     A7 FC 61 FC | 	wrlong	result2, fp
0b8d8     04 4E 05 F1 | 	add	fp, #4
0b8dc     A7 22 62 FC | 	wrlong	local03, fp
0b8e0                 | ' 
0b8e0                 | ' t2=pop()
0b8e0                 | ' t1=pop()
0b8e0                 | ' 
0b8e0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
0b8e0     08 4E 85 F1 | 	sub	fp, #8
0b8e4     1D 22 0E F2 | 	cmp	local03, #29 wz
0b8e8     14 4E 05 A1 |  if_e	add	fp, #20
0b8ec     A7 24 02 AB |  if_e	rdlong	local04, fp
0b8f0     14 4E 85 A1 |  if_e	sub	fp, #20
0b8f4     12 23 02 A6 |  if_e	mov	local03, local04
0b8f8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b8fc     5C 00 90 5D |  if_ne	jmp	#LR__0961
0b900                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
0b900     0C 4E 05 F1 | 	add	fp, #12
0b904     A7 1E 02 FB | 	rdlong	local01, fp
0b908     0C 4E 85 F1 | 	sub	fp, #12
0b90c     A7 22 02 FB | 	rdlong	local03, fp
0b910     11 1F 12 F2 | 	cmp	local01, local03 wc
0b914     1C 00 90 3D |  if_ae	jmp	#LR__0960
0b918     A7 1E 02 FB | 	rdlong	local01, fp
0b91c     0C 4E 05 F1 | 	add	fp, #12
0b920     A7 20 02 FB | 	rdlong	local02, fp
0b924     0C 4E 85 F1 | 	sub	fp, #12
0b928     10 1F 82 F1 | 	sub	local01, local02
0b92c     A7 1E 62 FC | 	wrlong	local01, fp
0b930     F4 02 90 FD | 	jmp	#LR__0970
0b934                 | LR__0960
0b934     A7 1E 02 FB | 	rdlong	local01, fp
0b938     0C 4E 05 F1 | 	add	fp, #12
0b93c     A7 20 02 FB | 	rdlong	local02, fp
0b940     0C 4E 85 F1 | 	sub	fp, #12
0b944     10 1F 82 F1 | 	sub	local01, local02
0b948     A7 1E 62 FC | 	wrlong	local01, fp
0b94c     08 4E 05 F1 | 	add	fp, #8
0b950     A7 38 68 FC | 	wrlong	#28, fp
0b954     08 4E 85 F1 | 	sub	fp, #8
0b958     CC 02 90 FD | 	jmp	#LR__0970
0b95c                 | LR__0961
0b95c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
0b95c     08 4E 05 F1 | 	add	fp, #8
0b960     A7 1E 02 FB | 	rdlong	local01, fp
0b964     08 4E 85 F1 | 	sub	fp, #8
0b968     1D 1E 0E F2 | 	cmp	local01, #29 wz
0b96c     14 4E 05 A1 |  if_e	add	fp, #20
0b970     A7 24 02 AB |  if_e	rdlong	local04, fp
0b974     14 4E 85 A1 |  if_e	sub	fp, #20
0b978     12 23 02 A6 |  if_e	mov	local03, local04
0b97c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b980     28 00 90 5D |  if_ne	jmp	#LR__0962
0b984     A7 1E 02 FB | 	rdlong	local01, fp
0b988     0C 4E 05 F1 | 	add	fp, #12
0b98c     A7 20 02 FB | 	rdlong	local02, fp
0b990     0C 4E 85 F1 | 	sub	fp, #12
0b994     10 1F 82 F1 | 	sub	local01, local02
0b998     A7 1E 62 FC | 	wrlong	local01, fp
0b99c     08 4E 05 F1 | 	add	fp, #8
0b9a0     A7 38 68 FC | 	wrlong	#28, fp
0b9a4     08 4E 85 F1 | 	sub	fp, #8
0b9a8     7C 02 90 FD | 	jmp	#LR__0970
0b9ac                 | LR__0962
0b9ac                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0b9ac     08 4E 05 F1 | 	add	fp, #8
0b9b0     A7 1E 02 FB | 	rdlong	local01, fp
0b9b4     08 4E 85 F1 | 	sub	fp, #8
0b9b8     1D 1E 0E F2 | 	cmp	local01, #29 wz
0b9bc     14 4E 05 A1 |  if_e	add	fp, #20
0b9c0     A7 24 02 AB |  if_e	rdlong	local04, fp
0b9c4     14 4E 85 A1 |  if_e	sub	fp, #20
0b9c8     12 23 02 A6 |  if_e	mov	local03, local04
0b9cc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b9d0     34 00 90 5D |  if_ne	jmp	#LR__0963
0b9d4     A7 12 02 FB | 	rdlong	arg01, fp
0b9d8     50 C7 B0 FD | 	call	#__system___float_fromuns
0b9dc     FD 12 02 F6 | 	mov	arg01, result1
0b9e0     0C 4E 05 F1 | 	add	fp, #12
0b9e4     A7 14 02 FB | 	rdlong	arg02, fp
0b9e8     0C 4E 85 F1 | 	sub	fp, #12
0b9ec     1F 14 E6 F4 | 	bitnot	arg02, #31
0b9f0     6C C7 B0 FD | 	call	#__system___float_add
0b9f4     A7 FA 61 FC | 	wrlong	result1, fp
0b9f8     08 4E 05 F1 | 	add	fp, #8
0b9fc     A7 3C 68 FC | 	wrlong	#30, fp
0ba00     08 4E 85 F1 | 	sub	fp, #8
0ba04     20 02 90 FD | 	jmp	#LR__0970
0ba08                 | LR__0963
0ba08                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
0ba08     08 4E 05 F1 | 	add	fp, #8
0ba0c     A7 1E 02 FB | 	rdlong	local01, fp
0ba10     08 4E 85 F1 | 	sub	fp, #8
0ba14     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ba18     14 4E 05 A1 |  if_e	add	fp, #20
0ba1c     A7 24 02 AB |  if_e	rdlong	local04, fp
0ba20     14 4E 85 A1 |  if_e	sub	fp, #20
0ba24     12 23 02 A6 |  if_e	mov	local03, local04
0ba28     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0ba2c     1C 00 90 5D |  if_ne	jmp	#LR__0964
0ba30     A7 1E 02 FB | 	rdlong	local01, fp
0ba34     0C 4E 05 F1 | 	add	fp, #12
0ba38     A7 20 02 FB | 	rdlong	local02, fp
0ba3c     0C 4E 85 F1 | 	sub	fp, #12
0ba40     10 1F 82 F1 | 	sub	local01, local02
0ba44     A7 1E 62 FC | 	wrlong	local01, fp
0ba48     DC 01 90 FD | 	jmp	#LR__0970
0ba4c                 | LR__0964
0ba4c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
0ba4c     08 4E 05 F1 | 	add	fp, #8
0ba50     A7 1E 02 FB | 	rdlong	local01, fp
0ba54     08 4E 85 F1 | 	sub	fp, #8
0ba58     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ba5c     14 4E 05 A1 |  if_e	add	fp, #20
0ba60     A7 24 02 AB |  if_e	rdlong	local04, fp
0ba64     14 4E 85 A1 |  if_e	sub	fp, #20
0ba68     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0ba6c     1C 00 90 5D |  if_ne	jmp	#LR__0965
0ba70     A7 1E 02 FB | 	rdlong	local01, fp
0ba74     0C 4E 05 F1 | 	add	fp, #12
0ba78     A7 20 02 FB | 	rdlong	local02, fp
0ba7c     0C 4E 85 F1 | 	sub	fp, #12
0ba80     10 1F 82 F1 | 	sub	local01, local02
0ba84     A7 1E 62 FC | 	wrlong	local01, fp
0ba88     9C 01 90 FD | 	jmp	#LR__0970
0ba8c                 | LR__0965
0ba8c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0ba8c     08 4E 05 F1 | 	add	fp, #8
0ba90     A7 1E 02 FB | 	rdlong	local01, fp
0ba94     08 4E 85 F1 | 	sub	fp, #8
0ba98     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ba9c     14 4E 05 A1 |  if_e	add	fp, #20
0baa0     A7 22 02 AB |  if_e	rdlong	local03, fp
0baa4     14 4E 85 A1 |  if_e	sub	fp, #20
0baa8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0baac     44 00 90 5D |  if_ne	jmp	#LR__0966
0bab0     A7 12 02 FB | 	rdlong	arg01, fp
0bab4     09 13 52 F6 | 	abs	arg01, arg01 wc
0bab8     1F 26 C6 C9 |  if_b	decod	local05, #31
0babc     00 26 06 36 |  if_ae	mov	local05, #0
0bac0     68 C6 B0 FD | 	call	#__system___float_fromuns
0bac4     13 FB 61 F5 | 	xor	result1, local05
0bac8     FD 12 02 F6 | 	mov	arg01, result1
0bacc     0C 4E 05 F1 | 	add	fp, #12
0bad0     A7 14 02 FB | 	rdlong	arg02, fp
0bad4     0C 4E 85 F1 | 	sub	fp, #12
0bad8     1F 14 E6 F4 | 	bitnot	arg02, #31
0badc     80 C6 B0 FD | 	call	#__system___float_add
0bae0     A7 FA 61 FC | 	wrlong	result1, fp
0bae4     08 4E 05 F1 | 	add	fp, #8
0bae8     A7 3C 68 FC | 	wrlong	#30, fp
0baec     08 4E 85 F1 | 	sub	fp, #8
0baf0     34 01 90 FD | 	jmp	#LR__0970
0baf4                 | LR__0966
0baf4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
0baf4     08 4E 05 F1 | 	add	fp, #8
0baf8     A7 1E 02 FB | 	rdlong	local01, fp
0bafc     08 4E 85 F1 | 	sub	fp, #8
0bb00     1E 1E 0E F2 | 	cmp	local01, #30 wz
0bb04     14 4E 05 A1 |  if_e	add	fp, #20
0bb08     A7 22 02 AB |  if_e	rdlong	local03, fp
0bb0c     14 4E 85 A1 |  if_e	sub	fp, #20
0bb10     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0bb14     2C 00 90 5D |  if_ne	jmp	#LR__0967
0bb18     A7 1E 02 FB | 	rdlong	local01, fp
0bb1c     0C 4E 05 F1 | 	add	fp, #12
0bb20     A7 12 02 FB | 	rdlong	arg01, fp
0bb24     0C 4E 85 F1 | 	sub	fp, #12
0bb28     00 C6 B0 FD | 	call	#__system___float_fromuns
0bb2c     FD 14 02 F6 | 	mov	arg02, result1
0bb30     0F 13 02 F6 | 	mov	arg01, local01
0bb34     1F 14 E6 F4 | 	bitnot	arg02, #31
0bb38     24 C6 B0 FD | 	call	#__system___float_add
0bb3c     A7 FA 61 FC | 	wrlong	result1, fp
0bb40     E4 00 90 FD | 	jmp	#LR__0970
0bb44                 | LR__0967
0bb44                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
0bb44     08 4E 05 F1 | 	add	fp, #8
0bb48     A7 1E 02 FB | 	rdlong	local01, fp
0bb4c     08 4E 85 F1 | 	sub	fp, #8
0bb50     1E 1E 0E F2 | 	cmp	local01, #30 wz
0bb54     14 4E 05 A1 |  if_e	add	fp, #20
0bb58     A7 22 02 AB |  if_e	rdlong	local03, fp
0bb5c     14 4E 85 A1 |  if_e	sub	fp, #20
0bb60     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0bb64     3C 00 90 5D |  if_ne	jmp	#LR__0968
0bb68     A7 1E 02 FB | 	rdlong	local01, fp
0bb6c     0C 4E 05 F1 | 	add	fp, #12
0bb70     A7 12 02 FB | 	rdlong	arg01, fp
0bb74     0C 4E 85 F1 | 	sub	fp, #12
0bb78     09 13 52 F6 | 	abs	arg01, arg01 wc
0bb7c     1F 26 C6 C9 |  if_b	decod	local05, #31
0bb80     00 26 06 36 |  if_ae	mov	local05, #0
0bb84     A4 C5 B0 FD | 	call	#__system___float_fromuns
0bb88     13 FB 61 F5 | 	xor	result1, local05
0bb8c     FD 14 02 F6 | 	mov	arg02, result1
0bb90     0F 13 02 F6 | 	mov	arg01, local01
0bb94     1F 14 E6 F4 | 	bitnot	arg02, #31
0bb98     C4 C5 B0 FD | 	call	#__system___float_add
0bb9c     A7 FA 61 FC | 	wrlong	result1, fp
0bba0     84 00 90 FD | 	jmp	#LR__0970
0bba4                 | LR__0968
0bba4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
0bba4     08 4E 05 F1 | 	add	fp, #8
0bba8     A7 1E 02 FB | 	rdlong	local01, fp
0bbac     08 4E 85 F1 | 	sub	fp, #8
0bbb0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0bbb4     14 4E 05 A1 |  if_e	add	fp, #20
0bbb8     A7 22 02 AB |  if_e	rdlong	local03, fp
0bbbc     14 4E 85 A1 |  if_e	sub	fp, #20
0bbc0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0bbc4     20 00 90 5D |  if_ne	jmp	#LR__0969
0bbc8     A7 12 02 FB | 	rdlong	arg01, fp
0bbcc     0C 4E 05 F1 | 	add	fp, #12
0bbd0     A7 14 02 FB | 	rdlong	arg02, fp
0bbd4     0C 4E 85 F1 | 	sub	fp, #12
0bbd8     1F 14 E6 F4 | 	bitnot	arg02, #31
0bbdc     80 C5 B0 FD | 	call	#__system___float_add
0bbe0     A7 FA 61 FC | 	wrlong	result1, fp
0bbe4     40 00 90 FD | 	jmp	#LR__0970
0bbe8                 | LR__0969
0bbe8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
0bbe8     08 4E 05 F1 | 	add	fp, #8
0bbec     A7 1E 02 FB | 	rdlong	local01, fp
0bbf0     08 4E 85 F1 | 	sub	fp, #8
0bbf4     1F 1E 0E F2 | 	cmp	local01, #31 wz
0bbf8     14 4E 05 51 |  if_ne	add	fp, #20
0bbfc     A7 22 02 5B |  if_ne	rdlong	local03, fp
0bc00     14 4E 85 51 |  if_ne	sub	fp, #20
0bc04     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0bc08     A7 06 68 AC |  if_e	wrlong	#3, fp
0bc0c     08 4E 05 A1 |  if_e	add	fp, #8
0bc10     A7 FE 69 AC |  if_e	wrlong	#255, fp
0bc14     08 4E 85 A1 |  if_e	sub	fp, #8
0bc18     A7 0A 68 5C |  if_ne	wrlong	#5, fp
0bc1c     08 4E 05 51 |  if_ne	add	fp, #8
0bc20     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0bc24     08 4E 85 51 |  if_ne	sub	fp, #8
0bc28                 | LR__0970
0bc28     A7 12 02 F6 | 	mov	arg01, fp
0bc2c     78 CF BF FD | 	call	#_push
0bc30     A7 F0 03 F6 | 	mov	ptra, fp
0bc34     B2 00 A0 FD | 	call	#popregs_
0bc38                 | _do_minus_ret
0bc38     2D 00 64 FD | 	ret
0bc3c                 | 
0bc3c                 | ' 
0bc3c                 | ' sub do_and 
0bc3c                 | _do_and
0bc3c     03 4A 05 F6 | 	mov	COUNT_, #3
0bc40     A8 00 A0 FD | 	call	#pushregs_
0bc44     18 F0 07 F1 | 	add	ptra, #24
0bc48     C4 CE BF FD | 	call	#_pop
0bc4c     FD 12 02 F6 | 	mov	arg01, result1
0bc50     FE 1E 02 F6 | 	mov	local01, result2
0bc54     FF 20 02 F6 | 	mov	local02, result3
0bc58     0C 4E 05 F1 | 	add	fp, #12
0bc5c     A7 12 62 FC | 	wrlong	arg01, fp
0bc60     04 4E 05 F1 | 	add	fp, #4
0bc64     A7 1E 62 FC | 	wrlong	local01, fp
0bc68     04 4E 05 F1 | 	add	fp, #4
0bc6c     A7 20 62 FC | 	wrlong	local02, fp
0bc70     14 4E 85 F1 | 	sub	fp, #20
0bc74     98 CE BF FD | 	call	#_pop
0bc78     FF 22 02 F6 | 	mov	local03, result3
0bc7c     A7 FA 61 FC | 	wrlong	result1, fp
0bc80     04 4E 05 F1 | 	add	fp, #4
0bc84     A7 FC 61 FC | 	wrlong	result2, fp
0bc88     04 4E 05 F1 | 	add	fp, #4
0bc8c     A7 22 62 FC | 	wrlong	local03, fp
0bc90                 | ' 
0bc90                 | ' t2=pop()
0bc90                 | ' t1=pop()
0bc90                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0bc90     08 4E 85 F1 | 	sub	fp, #8
0bc94     1C 22 0E F2 | 	cmp	local03, #28 wz
0bc98     A7 22 02 AB |  if_e	rdlong	local03, fp
0bc9c     A7 22 62 AC |  if_e	wrlong	local03, fp
0bca0     08 4E 05 A1 |  if_e	add	fp, #8
0bca4     A7 3A 68 AC |  if_e	wrlong	#29, fp
0bca8     08 4E 85 A1 |  if_e	sub	fp, #8
0bcac                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0bcac     14 4E 05 F1 | 	add	fp, #20
0bcb0     A7 22 02 FB | 	rdlong	local03, fp
0bcb4     14 4E 85 F1 | 	sub	fp, #20
0bcb8     1C 22 0E F2 | 	cmp	local03, #28 wz
0bcbc     18 00 90 5D |  if_ne	jmp	#LR__0980
0bcc0     0C 4E 05 F1 | 	add	fp, #12
0bcc4     A7 22 02 FB | 	rdlong	local03, fp
0bcc8     A7 22 62 FC | 	wrlong	local03, fp
0bccc     08 4E 05 F1 | 	add	fp, #8
0bcd0     A7 3A 68 FC | 	wrlong	#29, fp
0bcd4     14 4E 85 F1 | 	sub	fp, #20
0bcd8                 | LR__0980
0bcd8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
0bcd8     08 4E 05 F1 | 	add	fp, #8
0bcdc     A7 22 02 FB | 	rdlong	local03, fp
0bce0     08 4E 85 F1 | 	sub	fp, #8
0bce4     1F 22 0E F2 | 	cmp	local03, #31 wz
0bce8     14 4E 05 51 |  if_ne	add	fp, #20
0bcec     A7 20 02 5B |  if_ne	rdlong	local02, fp
0bcf0     14 4E 85 51 |  if_ne	sub	fp, #20
0bcf4     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0bcf8     08 4E 05 51 |  if_ne	add	fp, #8
0bcfc     A7 22 02 5B |  if_ne	rdlong	local03, fp
0bd00     08 4E 85 51 |  if_ne	sub	fp, #8
0bd04     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0bd08     14 4E 05 51 |  if_ne	add	fp, #20
0bd0c     14 4E 85 51 |  if_ne	sub	fp, #20
0bd10     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0bd14     A7 0C 68 AC |  if_e	wrlong	#6, fp
0bd18     08 4E 05 A1 |  if_e	add	fp, #8
0bd1c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0bd20     08 4E 85 A1 |  if_e	sub	fp, #8
0bd24     18 00 90 AD |  if_e	jmp	#LR__0981
0bd28     A7 22 02 FB | 	rdlong	local03, fp
0bd2c     0C 4E 05 F1 | 	add	fp, #12
0bd30     A7 1E 02 FB | 	rdlong	local01, fp
0bd34     0C 4E 85 F1 | 	sub	fp, #12
0bd38     0F 23 02 F5 | 	and	local03, local01
0bd3c     A7 22 62 FC | 	wrlong	local03, fp
0bd40                 | LR__0981
0bd40     A7 12 02 F6 | 	mov	arg01, fp
0bd44     60 CE BF FD | 	call	#_push
0bd48     A7 F0 03 F6 | 	mov	ptra, fp
0bd4c     B2 00 A0 FD | 	call	#popregs_
0bd50                 | _do_and_ret
0bd50     2D 00 64 FD | 	ret
0bd54                 | 
0bd54                 | ' 
0bd54                 | ' sub do_or 
0bd54                 | _do_or
0bd54     03 4A 05 F6 | 	mov	COUNT_, #3
0bd58     A8 00 A0 FD | 	call	#pushregs_
0bd5c     18 F0 07 F1 | 	add	ptra, #24
0bd60     AC CD BF FD | 	call	#_pop
0bd64     FD 12 02 F6 | 	mov	arg01, result1
0bd68     FE 1E 02 F6 | 	mov	local01, result2
0bd6c     FF 20 02 F6 | 	mov	local02, result3
0bd70     0C 4E 05 F1 | 	add	fp, #12
0bd74     A7 12 62 FC | 	wrlong	arg01, fp
0bd78     04 4E 05 F1 | 	add	fp, #4
0bd7c     A7 1E 62 FC | 	wrlong	local01, fp
0bd80     04 4E 05 F1 | 	add	fp, #4
0bd84     A7 20 62 FC | 	wrlong	local02, fp
0bd88     14 4E 85 F1 | 	sub	fp, #20
0bd8c     80 CD BF FD | 	call	#_pop
0bd90     FF 22 02 F6 | 	mov	local03, result3
0bd94     A7 FA 61 FC | 	wrlong	result1, fp
0bd98     04 4E 05 F1 | 	add	fp, #4
0bd9c     A7 FC 61 FC | 	wrlong	result2, fp
0bda0     04 4E 05 F1 | 	add	fp, #4
0bda4     A7 22 62 FC | 	wrlong	local03, fp
0bda8                 | ' 
0bda8                 | ' t2=pop()
0bda8                 | ' t1=pop()
0bda8                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0bda8     08 4E 85 F1 | 	sub	fp, #8
0bdac     1C 22 0E F2 | 	cmp	local03, #28 wz
0bdb0     A7 22 02 AB |  if_e	rdlong	local03, fp
0bdb4     A7 22 62 AC |  if_e	wrlong	local03, fp
0bdb8     08 4E 05 A1 |  if_e	add	fp, #8
0bdbc     A7 3A 68 AC |  if_e	wrlong	#29, fp
0bdc0     08 4E 85 A1 |  if_e	sub	fp, #8
0bdc4                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0bdc4     14 4E 05 F1 | 	add	fp, #20
0bdc8     A7 22 02 FB | 	rdlong	local03, fp
0bdcc     14 4E 85 F1 | 	sub	fp, #20
0bdd0     1C 22 0E F2 | 	cmp	local03, #28 wz
0bdd4     18 00 90 5D |  if_ne	jmp	#LR__0990
0bdd8     0C 4E 05 F1 | 	add	fp, #12
0bddc     A7 22 02 FB | 	rdlong	local03, fp
0bde0     A7 22 62 FC | 	wrlong	local03, fp
0bde4     08 4E 05 F1 | 	add	fp, #8
0bde8     A7 3A 68 FC | 	wrlong	#29, fp
0bdec     14 4E 85 F1 | 	sub	fp, #20
0bdf0                 | LR__0990
0bdf0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
0bdf0     08 4E 05 F1 | 	add	fp, #8
0bdf4     A7 22 02 FB | 	rdlong	local03, fp
0bdf8     08 4E 85 F1 | 	sub	fp, #8
0bdfc     1F 22 0E F2 | 	cmp	local03, #31 wz
0be00     14 4E 05 51 |  if_ne	add	fp, #20
0be04     A7 20 02 5B |  if_ne	rdlong	local02, fp
0be08     14 4E 85 51 |  if_ne	sub	fp, #20
0be0c     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0be10     08 4E 05 51 |  if_ne	add	fp, #8
0be14     A7 22 02 5B |  if_ne	rdlong	local03, fp
0be18     08 4E 85 51 |  if_ne	sub	fp, #8
0be1c     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0be20     14 4E 05 51 |  if_ne	add	fp, #20
0be24     14 4E 85 51 |  if_ne	sub	fp, #20
0be28     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0be2c     A7 0C 68 AC |  if_e	wrlong	#6, fp
0be30     08 4E 05 A1 |  if_e	add	fp, #8
0be34     A7 FE 69 AC |  if_e	wrlong	#255, fp
0be38     08 4E 85 A1 |  if_e	sub	fp, #8
0be3c     18 00 90 AD |  if_e	jmp	#LR__0991
0be40     A7 22 02 FB | 	rdlong	local03, fp
0be44     0C 4E 05 F1 | 	add	fp, #12
0be48     A7 1E 02 FB | 	rdlong	local01, fp
0be4c     0C 4E 85 F1 | 	sub	fp, #12
0be50     0F 23 42 F5 | 	or	local03, local01
0be54     A7 22 62 FC | 	wrlong	local03, fp
0be58                 | LR__0991
0be58     A7 12 02 F6 | 	mov	arg01, fp
0be5c     48 CD BF FD | 	call	#_push
0be60     A7 F0 03 F6 | 	mov	ptra, fp
0be64     B2 00 A0 FD | 	call	#popregs_
0be68                 | _do_or_ret
0be68     2D 00 64 FD | 	ret
0be6c                 | 
0be6c                 | ' 
0be6c                 | ' sub do_mul
0be6c                 | _do_mul
0be6c     05 4A 05 F6 | 	mov	COUNT_, #5
0be70     A8 00 A0 FD | 	call	#pushregs_
0be74     18 F0 07 F1 | 	add	ptra, #24
0be78     94 CC BF FD | 	call	#_pop
0be7c     FD 1E 02 F6 | 	mov	local01, result1
0be80     FE 20 02 F6 | 	mov	local02, result2
0be84     FF 22 02 F6 | 	mov	local03, result3
0be88     0C 4E 05 F1 | 	add	fp, #12
0be8c     A7 1E 62 FC | 	wrlong	local01, fp
0be90     04 4E 05 F1 | 	add	fp, #4
0be94     A7 20 62 FC | 	wrlong	local02, fp
0be98     04 4E 05 F1 | 	add	fp, #4
0be9c     A7 22 62 FC | 	wrlong	local03, fp
0bea0     14 4E 85 F1 | 	sub	fp, #20
0bea4     68 CC BF FD | 	call	#_pop
0bea8     FF 22 02 F6 | 	mov	local03, result3
0beac     A7 FA 61 FC | 	wrlong	result1, fp
0beb0     04 4E 05 F1 | 	add	fp, #4
0beb4     A7 FC 61 FC | 	wrlong	result2, fp
0beb8     04 4E 05 F1 | 	add	fp, #4
0bebc     A7 22 62 FC | 	wrlong	local03, fp
0bec0                 | ' 
0bec0                 | ' t2=pop()
0bec0                 | ' t1=pop()
0bec0                 | ' 
0bec0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
0bec0     08 4E 85 F1 | 	sub	fp, #8
0bec4     1D 22 0E F2 | 	cmp	local03, #29 wz
0bec8     14 4E 05 A1 |  if_e	add	fp, #20
0becc     A7 24 02 AB |  if_e	rdlong	local04, fp
0bed0     14 4E 85 A1 |  if_e	sub	fp, #20
0bed4     12 23 02 A6 |  if_e	mov	local03, local04
0bed8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0bedc     20 00 90 5D |  if_ne	jmp	#LR__1000
0bee0     A7 20 02 FB | 	rdlong	local02, fp
0bee4     0C 4E 05 F1 | 	add	fp, #12
0bee8     A7 22 02 FB | 	rdlong	local03, fp
0beec     11 21 02 FD | 	qmul	local02, local03
0bef0     0C 4E 85 F1 | 	sub	fp, #12
0bef4     18 1E 62 FD | 	getqx	local01
0bef8     A7 1E 62 FC | 	wrlong	local01, fp
0befc     C4 02 90 FD | 	jmp	#LR__1009
0bf00                 | LR__1000
0bf00                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
0bf00     08 4E 05 F1 | 	add	fp, #8
0bf04     A7 1E 02 FB | 	rdlong	local01, fp
0bf08     08 4E 85 F1 | 	sub	fp, #8
0bf0c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0bf10     14 4E 05 A1 |  if_e	add	fp, #20
0bf14     A7 24 02 AB |  if_e	rdlong	local04, fp
0bf18     14 4E 85 A1 |  if_e	sub	fp, #20
0bf1c     12 23 02 A6 |  if_e	mov	local03, local04
0bf20     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0bf24     2C 00 90 5D |  if_ne	jmp	#LR__1001
0bf28     A7 20 02 FB | 	rdlong	local02, fp
0bf2c     0C 4E 05 F1 | 	add	fp, #12
0bf30     A7 22 02 FB | 	rdlong	local03, fp
0bf34     11 21 02 FD | 	qmul	local02, local03
0bf38     0C 4E 85 F1 | 	sub	fp, #12
0bf3c     18 1E 62 FD | 	getqx	local01
0bf40     A7 1E 62 FC | 	wrlong	local01, fp
0bf44     08 4E 05 F1 | 	add	fp, #8
0bf48     A7 38 68 FC | 	wrlong	#28, fp
0bf4c     08 4E 85 F1 | 	sub	fp, #8
0bf50     70 02 90 FD | 	jmp	#LR__1009
0bf54                 | LR__1001
0bf54                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0bf54     08 4E 05 F1 | 	add	fp, #8
0bf58     A7 1E 02 FB | 	rdlong	local01, fp
0bf5c     08 4E 85 F1 | 	sub	fp, #8
0bf60     1D 1E 0E F2 | 	cmp	local01, #29 wz
0bf64     14 4E 05 A1 |  if_e	add	fp, #20
0bf68     A7 24 02 AB |  if_e	rdlong	local04, fp
0bf6c     14 4E 85 A1 |  if_e	sub	fp, #20
0bf70     12 23 02 A6 |  if_e	mov	local03, local04
0bf74     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0bf78     30 00 90 5D |  if_ne	jmp	#LR__1002
0bf7c     A7 12 02 FB | 	rdlong	arg01, fp
0bf80     A8 C1 B0 FD | 	call	#__system___float_fromuns
0bf84     FD 12 02 F6 | 	mov	arg01, result1
0bf88     0C 4E 05 F1 | 	add	fp, #12
0bf8c     A7 14 02 FB | 	rdlong	arg02, fp
0bf90     0C 4E 85 F1 | 	sub	fp, #12
0bf94     C0 C4 B0 FD | 	call	#__system___float_mul
0bf98     A7 FA 61 FC | 	wrlong	result1, fp
0bf9c     08 4E 05 F1 | 	add	fp, #8
0bfa0     A7 3C 68 FC | 	wrlong	#30, fp
0bfa4     08 4E 85 F1 | 	sub	fp, #8
0bfa8     18 02 90 FD | 	jmp	#LR__1009
0bfac                 | LR__1002
0bfac                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
0bfac     08 4E 05 F1 | 	add	fp, #8
0bfb0     A7 1E 02 FB | 	rdlong	local01, fp
0bfb4     08 4E 85 F1 | 	sub	fp, #8
0bfb8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0bfbc     14 4E 05 A1 |  if_e	add	fp, #20
0bfc0     A7 24 02 AB |  if_e	rdlong	local04, fp
0bfc4     14 4E 85 A1 |  if_e	sub	fp, #20
0bfc8     12 23 02 A6 |  if_e	mov	local03, local04
0bfcc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0bfd0     20 00 90 5D |  if_ne	jmp	#LR__1003
0bfd4     A7 20 02 FB | 	rdlong	local02, fp
0bfd8     0C 4E 05 F1 | 	add	fp, #12
0bfdc     A7 22 02 FB | 	rdlong	local03, fp
0bfe0     11 21 02 FD | 	qmul	local02, local03
0bfe4     0C 4E 85 F1 | 	sub	fp, #12
0bfe8     18 1E 62 FD | 	getqx	local01
0bfec     A7 1E 62 FC | 	wrlong	local01, fp
0bff0     D0 01 90 FD | 	jmp	#LR__1009
0bff4                 | LR__1003
0bff4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
0bff4     08 4E 05 F1 | 	add	fp, #8
0bff8     A7 1E 02 FB | 	rdlong	local01, fp
0bffc     08 4E 85 F1 | 	sub	fp, #8
0c000     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c004     14 4E 05 A1 |  if_e	add	fp, #20
0c008     A7 24 02 AB |  if_e	rdlong	local04, fp
0c00c     14 4E 85 A1 |  if_e	sub	fp, #20
0c010     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0c014     20 00 90 5D |  if_ne	jmp	#LR__1004
0c018     A7 20 02 FB | 	rdlong	local02, fp
0c01c     0C 4E 05 F1 | 	add	fp, #12
0c020     A7 22 02 FB | 	rdlong	local03, fp
0c024     11 21 02 FD | 	qmul	local02, local03
0c028     0C 4E 85 F1 | 	sub	fp, #12
0c02c     18 1E 62 FD | 	getqx	local01
0c030     A7 1E 62 FC | 	wrlong	local01, fp
0c034     8C 01 90 FD | 	jmp	#LR__1009
0c038                 | LR__1004
0c038                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0c038     08 4E 05 F1 | 	add	fp, #8
0c03c     A7 1E 02 FB | 	rdlong	local01, fp
0c040     08 4E 85 F1 | 	sub	fp, #8
0c044     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c048     14 4E 05 A1 |  if_e	add	fp, #20
0c04c     A7 22 02 AB |  if_e	rdlong	local03, fp
0c050     14 4E 85 A1 |  if_e	sub	fp, #20
0c054     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c058     40 00 90 5D |  if_ne	jmp	#LR__1005
0c05c     A7 12 02 FB | 	rdlong	arg01, fp
0c060     09 13 52 F6 | 	abs	arg01, arg01 wc
0c064     1F 26 C6 C9 |  if_b	decod	local05, #31
0c068     00 26 06 36 |  if_ae	mov	local05, #0
0c06c     BC C0 B0 FD | 	call	#__system___float_fromuns
0c070     13 FB 61 F5 | 	xor	result1, local05
0c074     FD 12 02 F6 | 	mov	arg01, result1
0c078     0C 4E 05 F1 | 	add	fp, #12
0c07c     A7 14 02 FB | 	rdlong	arg02, fp
0c080     0C 4E 85 F1 | 	sub	fp, #12
0c084     D0 C3 B0 FD | 	call	#__system___float_mul
0c088     A7 FA 61 FC | 	wrlong	result1, fp
0c08c     08 4E 05 F1 | 	add	fp, #8
0c090     A7 3C 68 FC | 	wrlong	#30, fp
0c094     08 4E 85 F1 | 	sub	fp, #8
0c098     28 01 90 FD | 	jmp	#LR__1009
0c09c                 | LR__1005
0c09c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
0c09c     08 4E 05 F1 | 	add	fp, #8
0c0a0     A7 1E 02 FB | 	rdlong	local01, fp
0c0a4     08 4E 85 F1 | 	sub	fp, #8
0c0a8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c0ac     14 4E 05 A1 |  if_e	add	fp, #20
0c0b0     A7 22 02 AB |  if_e	rdlong	local03, fp
0c0b4     14 4E 85 A1 |  if_e	sub	fp, #20
0c0b8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0c0bc     28 00 90 5D |  if_ne	jmp	#LR__1006
0c0c0     A7 1E 02 FB | 	rdlong	local01, fp
0c0c4     0C 4E 05 F1 | 	add	fp, #12
0c0c8     A7 12 02 FB | 	rdlong	arg01, fp
0c0cc     0C 4E 85 F1 | 	sub	fp, #12
0c0d0     58 C0 B0 FD | 	call	#__system___float_fromuns
0c0d4     FD 14 02 F6 | 	mov	arg02, result1
0c0d8     0F 13 02 F6 | 	mov	arg01, local01
0c0dc     78 C3 B0 FD | 	call	#__system___float_mul
0c0e0     A7 FA 61 FC | 	wrlong	result1, fp
0c0e4     DC 00 90 FD | 	jmp	#LR__1009
0c0e8                 | LR__1006
0c0e8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
0c0e8     08 4E 05 F1 | 	add	fp, #8
0c0ec     A7 1E 02 FB | 	rdlong	local01, fp
0c0f0     08 4E 85 F1 | 	sub	fp, #8
0c0f4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c0f8     14 4E 05 A1 |  if_e	add	fp, #20
0c0fc     A7 22 02 AB |  if_e	rdlong	local03, fp
0c100     14 4E 85 A1 |  if_e	sub	fp, #20
0c104     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0c108     38 00 90 5D |  if_ne	jmp	#LR__1007
0c10c     A7 1E 02 FB | 	rdlong	local01, fp
0c110     0C 4E 05 F1 | 	add	fp, #12
0c114     A7 12 02 FB | 	rdlong	arg01, fp
0c118     0C 4E 85 F1 | 	sub	fp, #12
0c11c     09 13 52 F6 | 	abs	arg01, arg01 wc
0c120     1F 26 C6 C9 |  if_b	decod	local05, #31
0c124     00 26 06 36 |  if_ae	mov	local05, #0
0c128     00 C0 B0 FD | 	call	#__system___float_fromuns
0c12c     13 FB 61 F5 | 	xor	result1, local05
0c130     FD 14 02 F6 | 	mov	arg02, result1
0c134     0F 13 02 F6 | 	mov	arg01, local01
0c138     1C C3 B0 FD | 	call	#__system___float_mul
0c13c     A7 FA 61 FC | 	wrlong	result1, fp
0c140     80 00 90 FD | 	jmp	#LR__1009
0c144                 | LR__1007
0c144                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
0c144     08 4E 05 F1 | 	add	fp, #8
0c148     A7 1E 02 FB | 	rdlong	local01, fp
0c14c     08 4E 85 F1 | 	sub	fp, #8
0c150     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c154     14 4E 05 A1 |  if_e	add	fp, #20
0c158     A7 22 02 AB |  if_e	rdlong	local03, fp
0c15c     14 4E 85 A1 |  if_e	sub	fp, #20
0c160     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c164     1C 00 90 5D |  if_ne	jmp	#LR__1008
0c168     A7 12 02 FB | 	rdlong	arg01, fp
0c16c     0C 4E 05 F1 | 	add	fp, #12
0c170     A7 14 02 FB | 	rdlong	arg02, fp
0c174     0C 4E 85 F1 | 	sub	fp, #12
0c178     DC C2 B0 FD | 	call	#__system___float_mul
0c17c     A7 FA 61 FC | 	wrlong	result1, fp
0c180     40 00 90 FD | 	jmp	#LR__1009
0c184                 | LR__1008
0c184                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
0c184     08 4E 05 F1 | 	add	fp, #8
0c188     A7 1E 02 FB | 	rdlong	local01, fp
0c18c     08 4E 85 F1 | 	sub	fp, #8
0c190     1F 1E 0E F2 | 	cmp	local01, #31 wz
0c194     14 4E 05 51 |  if_ne	add	fp, #20
0c198     A7 22 02 5B |  if_ne	rdlong	local03, fp
0c19c     14 4E 85 51 |  if_ne	sub	fp, #20
0c1a0     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0c1a4     A7 10 68 AC |  if_e	wrlong	#8, fp
0c1a8     08 4E 05 A1 |  if_e	add	fp, #8
0c1ac     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c1b0     08 4E 85 A1 |  if_e	sub	fp, #8
0c1b4     A7 12 68 5C |  if_ne	wrlong	#9, fp
0c1b8     08 4E 05 51 |  if_ne	add	fp, #8
0c1bc     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0c1c0     08 4E 85 51 |  if_ne	sub	fp, #8
0c1c4                 | LR__1009
0c1c4     A7 12 02 F6 | 	mov	arg01, fp
0c1c8     DC C9 BF FD | 	call	#_push
0c1cc     A7 F0 03 F6 | 	mov	ptra, fp
0c1d0     B2 00 A0 FD | 	call	#popregs_
0c1d4                 | _do_mul_ret
0c1d4     2D 00 64 FD | 	ret
0c1d8                 | 
0c1d8                 | ' 
0c1d8                 | ' sub do_div 
0c1d8                 | _do_div
0c1d8     01 4A 05 F6 | 	mov	COUNT_, #1
0c1dc     A8 00 A0 FD | 	call	#pushregs_
0c1e0     18 F0 07 F1 | 	add	ptra, #24
0c1e4     28 C9 BF FD | 	call	#_pop
0c1e8     FD 62 02 F6 | 	mov	muldivb_, result1
0c1ec     FE 60 02 F6 | 	mov	muldiva_, result2
0c1f0     FF 1E 02 F6 | 	mov	local01, result3
0c1f4     0C 4E 05 F1 | 	add	fp, #12
0c1f8     A7 62 62 FC | 	wrlong	muldivb_, fp
0c1fc     04 4E 05 F1 | 	add	fp, #4
0c200     A7 60 62 FC | 	wrlong	muldiva_, fp
0c204     04 4E 05 F1 | 	add	fp, #4
0c208     A7 1E 62 FC | 	wrlong	local01, fp
0c20c     14 4E 85 F1 | 	sub	fp, #20
0c210     FC C8 BF FD | 	call	#_pop
0c214     A7 FA 61 FC | 	wrlong	result1, fp
0c218     04 4E 05 F1 | 	add	fp, #4
0c21c     A7 FC 61 FC | 	wrlong	result2, fp
0c220     04 4E 05 F1 | 	add	fp, #4
0c224     A7 FE 61 FC | 	wrlong	result3, fp
0c228                 | ' 
0c228                 | ' t2=pop()
0c228                 | ' t1=pop()
0c228                 | ' 
0c228                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
0c228     08 4E 85 F1 | 	sub	fp, #8
0c22c     1F FE 0D F2 | 	cmp	result3, #31 wz
0c230     14 4E 05 51 |  if_ne	add	fp, #20
0c234     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0c238     14 4E 85 51 |  if_ne	sub	fp, #20
0c23c     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0c240     A7 14 68 AC |  if_e	wrlong	#10, fp
0c244     08 4E 05 A1 |  if_e	add	fp, #8
0c248     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c24c     08 4E 85 A1 |  if_e	sub	fp, #8
0c250     90 01 90 AD |  if_e	jmp	#LR__1016
0c254                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0c254     08 4E 05 F1 | 	add	fp, #8
0c258     A7 62 02 FB | 	rdlong	muldivb_, fp
0c25c     08 4E 85 F1 | 	sub	fp, #8
0c260     1E 62 0E F2 | 	cmp	muldivb_, #30 wz
0c264     1C 00 90 5D |  if_ne	jmp	#LR__1010
0c268     08 4E 05 F1 | 	add	fp, #8
0c26c     A7 38 68 FC | 	wrlong	#28, fp
0c270     08 4E 85 F1 | 	sub	fp, #8
0c274     A7 12 02 FB | 	rdlong	arg01, fp
0c278     00 14 06 F6 | 	mov	arg02, #0
0c27c     A0 C6 B0 FD | 	call	#__system___float_tointeger
0c280     A7 FA 61 FC | 	wrlong	result1, fp
0c284                 | LR__1010
0c284                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0c284     14 4E 05 F1 | 	add	fp, #20
0c288     A7 62 02 FB | 	rdlong	muldivb_, fp
0c28c     14 4E 85 F1 | 	sub	fp, #20
0c290     1E 62 0E F2 | 	cmp	muldivb_, #30 wz
0c294     28 00 90 5D |  if_ne	jmp	#LR__1011
0c298     14 4E 05 F1 | 	add	fp, #20
0c29c     A7 38 68 FC | 	wrlong	#28, fp
0c2a0     08 4E 85 F1 | 	sub	fp, #8
0c2a4     A7 12 02 FB | 	rdlong	arg01, fp
0c2a8     0C 4E 85 F1 | 	sub	fp, #12
0c2ac     00 14 06 F6 | 	mov	arg02, #0
0c2b0     6C C6 B0 FD | 	call	#__system___float_tointeger
0c2b4     0C 4E 05 F1 | 	add	fp, #12
0c2b8     A7 FA 61 FC | 	wrlong	result1, fp
0c2bc     0C 4E 85 F1 | 	sub	fp, #12
0c2c0                 | LR__1011
0c2c0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
0c2c0     08 4E 05 F1 | 	add	fp, #8
0c2c4     A7 62 02 FB | 	rdlong	muldivb_, fp
0c2c8     08 4E 85 F1 | 	sub	fp, #8
0c2cc     1D 62 0E F2 | 	cmp	muldivb_, #29 wz
0c2d0     14 4E 05 A1 |  if_e	add	fp, #20
0c2d4     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c2d8     14 4E 85 A1 |  if_e	sub	fp, #20
0c2dc     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0c2e0     20 00 90 5D |  if_ne	jmp	#LR__1012
0c2e4     0C 4E 05 F1 | 	add	fp, #12
0c2e8     A7 1E 02 FB | 	rdlong	local01, fp
0c2ec     0C 4E 85 F1 | 	sub	fp, #12
0c2f0     A7 62 02 FB | 	rdlong	muldivb_, fp
0c2f4     0F 63 12 FD | 	qdiv	muldivb_, local01
0c2f8     18 1E 62 FD | 	getqx	local01
0c2fc     A7 1E 62 FC | 	wrlong	local01, fp
0c300     E0 00 90 FD | 	jmp	#LR__1016
0c304                 | LR__1012
0c304                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
0c304     08 4E 05 F1 | 	add	fp, #8
0c308     A7 62 02 FB | 	rdlong	muldivb_, fp
0c30c     08 4E 85 F1 | 	sub	fp, #8
0c310     1D 62 0E F2 | 	cmp	muldivb_, #29 wz
0c314     14 4E 05 A1 |  if_e	add	fp, #20
0c318     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c31c     14 4E 85 A1 |  if_e	sub	fp, #20
0c320     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0c324     2C 00 90 5D |  if_ne	jmp	#LR__1013
0c328     0C 4E 05 F1 | 	add	fp, #12
0c32c     A7 1E 02 FB | 	rdlong	local01, fp
0c330     0C 4E 85 F1 | 	sub	fp, #12
0c334     A7 62 02 FB | 	rdlong	muldivb_, fp
0c338     0F 63 12 FD | 	qdiv	muldivb_, local01
0c33c     18 1E 62 FD | 	getqx	local01
0c340     A7 1E 62 FC | 	wrlong	local01, fp
0c344     08 4E 05 F1 | 	add	fp, #8
0c348     A7 38 68 FC | 	wrlong	#28, fp
0c34c     08 4E 85 F1 | 	sub	fp, #8
0c350     90 00 90 FD | 	jmp	#LR__1016
0c354                 | LR__1013
0c354                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
0c354     08 4E 05 F1 | 	add	fp, #8
0c358     A7 62 02 FB | 	rdlong	muldivb_, fp
0c35c     08 4E 85 F1 | 	sub	fp, #8
0c360     1C 62 0E F2 | 	cmp	muldivb_, #28 wz
0c364     14 4E 05 A1 |  if_e	add	fp, #20
0c368     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c36c     14 4E 85 A1 |  if_e	sub	fp, #20
0c370     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0c374     1C 00 90 5D |  if_ne	jmp	#LR__1014
0c378     A7 60 02 FB | 	rdlong	muldiva_, fp
0c37c     0C 4E 05 F1 | 	add	fp, #12
0c380     A7 62 02 FB | 	rdlong	muldivb_, fp
0c384     0C 4E 85 F1 | 	sub	fp, #12
0c388     BA 00 A0 FD | 	call	#divide_
0c38c     A7 62 62 FC | 	wrlong	muldivb_, fp
0c390     50 00 90 FD | 	jmp	#LR__1016
0c394                 | LR__1014
0c394                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
0c394     08 4E 05 F1 | 	add	fp, #8
0c398     A7 62 02 FB | 	rdlong	muldivb_, fp
0c39c     08 4E 85 F1 | 	sub	fp, #8
0c3a0     1C 62 0E F2 | 	cmp	muldivb_, #28 wz
0c3a4     14 4E 05 A1 |  if_e	add	fp, #20
0c3a8     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c3ac     14 4E 85 A1 |  if_e	sub	fp, #20
0c3b0     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0c3b4     1C 00 90 5D |  if_ne	jmp	#LR__1015
0c3b8     A7 60 02 FB | 	rdlong	muldiva_, fp
0c3bc     0C 4E 05 F1 | 	add	fp, #12
0c3c0     A7 62 02 FB | 	rdlong	muldivb_, fp
0c3c4     0C 4E 85 F1 | 	sub	fp, #12
0c3c8     BA 00 A0 FD | 	call	#divide_
0c3cc     A7 62 62 FC | 	wrlong	muldivb_, fp
0c3d0     10 00 90 FD | 	jmp	#LR__1016
0c3d4                 | LR__1015
0c3d4     A7 16 68 FC | 	wrlong	#11, fp
0c3d8     08 4E 05 F1 | 	add	fp, #8
0c3dc     A7 FE 69 FC | 	wrlong	#255, fp
0c3e0     08 4E 85 F1 | 	sub	fp, #8
0c3e4                 | LR__1016
0c3e4     A7 12 02 F6 | 	mov	arg01, fp
0c3e8     BC C7 BF FD | 	call	#_push
0c3ec     A7 F0 03 F6 | 	mov	ptra, fp
0c3f0     B2 00 A0 FD | 	call	#popregs_
0c3f4                 | _do_div_ret
0c3f4     2D 00 64 FD | 	ret
0c3f8                 | 
0c3f8                 | ' 
0c3f8                 | ' sub do_fdiv 
0c3f8                 | _do_fdiv
0c3f8     02 4A 05 F6 | 	mov	COUNT_, #2
0c3fc     A8 00 A0 FD | 	call	#pushregs_
0c400     18 F0 07 F1 | 	add	ptra, #24
0c404     08 C7 BF FD | 	call	#_pop
0c408     FD 14 02 F6 | 	mov	arg02, result1
0c40c     FE 12 02 F6 | 	mov	arg01, result2
0c410     FF 1E 02 F6 | 	mov	local01, result3
0c414     0C 4E 05 F1 | 	add	fp, #12
0c418     A7 14 62 FC | 	wrlong	arg02, fp
0c41c     04 4E 05 F1 | 	add	fp, #4
0c420     A7 12 62 FC | 	wrlong	arg01, fp
0c424     04 4E 05 F1 | 	add	fp, #4
0c428     A7 1E 62 FC | 	wrlong	local01, fp
0c42c     14 4E 85 F1 | 	sub	fp, #20
0c430     DC C6 BF FD | 	call	#_pop
0c434     A7 FA 61 FC | 	wrlong	result1, fp
0c438     04 4E 05 F1 | 	add	fp, #4
0c43c     A7 FC 61 FC | 	wrlong	result2, fp
0c440     04 4E 05 F1 | 	add	fp, #4
0c444     A7 FE 61 FC | 	wrlong	result3, fp
0c448                 | ' 
0c448                 | ' t2=pop()
0c448                 | ' t1=pop()
0c448                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
0c448     08 4E 85 F1 | 	sub	fp, #8
0c44c     1F FE 0D F2 | 	cmp	result3, #31 wz
0c450     14 4E 05 51 |  if_ne	add	fp, #20
0c454     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c458     14 4E 85 51 |  if_ne	sub	fp, #20
0c45c     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0c460     A7 14 68 AC |  if_e	wrlong	#10, fp
0c464     08 4E 05 A1 |  if_e	add	fp, #8
0c468     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c46c     08 4E 85 A1 |  if_e	sub	fp, #8
0c470     38 01 90 AD |  if_e	jmp	#LR__1025
0c474                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0c474     08 4E 05 F1 | 	add	fp, #8
0c478     A7 14 02 FB | 	rdlong	arg02, fp
0c47c     08 4E 85 F1 | 	sub	fp, #8
0c480     1C 14 0E F2 | 	cmp	arg02, #28 wz
0c484     28 00 90 5D |  if_ne	jmp	#LR__1020
0c488     08 4E 05 F1 | 	add	fp, #8
0c48c     A7 3C 68 FC | 	wrlong	#30, fp
0c490     08 4E 85 F1 | 	sub	fp, #8
0c494     A7 12 02 FB | 	rdlong	arg01, fp
0c498     09 13 52 F6 | 	abs	arg01, arg01 wc
0c49c     1F 20 C6 C9 |  if_b	decod	local02, #31
0c4a0     00 20 06 36 |  if_ae	mov	local02, #0
0c4a4     84 BC B0 FD | 	call	#__system___float_fromuns
0c4a8     10 FB 61 F5 | 	xor	result1, local02
0c4ac     A7 FA 61 FC | 	wrlong	result1, fp
0c4b0                 | LR__1020
0c4b0                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
0c4b0     08 4E 05 F1 | 	add	fp, #8
0c4b4     A7 14 02 FB | 	rdlong	arg02, fp
0c4b8     08 4E 85 F1 | 	sub	fp, #8
0c4bc     1D 14 0E F2 | 	cmp	arg02, #29 wz
0c4c0     18 00 90 5D |  if_ne	jmp	#LR__1021
0c4c4     08 4E 05 F1 | 	add	fp, #8
0c4c8     A7 3C 68 FC | 	wrlong	#30, fp
0c4cc     08 4E 85 F1 | 	sub	fp, #8
0c4d0     A7 12 02 FB | 	rdlong	arg01, fp
0c4d4     54 BC B0 FD | 	call	#__system___float_fromuns
0c4d8     A7 FA 61 FC | 	wrlong	result1, fp
0c4dc                 | LR__1021
0c4dc                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0c4dc     14 4E 05 F1 | 	add	fp, #20
0c4e0     A7 14 02 FB | 	rdlong	arg02, fp
0c4e4     14 4E 85 F1 | 	sub	fp, #20
0c4e8     1C 14 0E F2 | 	cmp	arg02, #28 wz
0c4ec     34 00 90 5D |  if_ne	jmp	#LR__1022
0c4f0     14 4E 05 F1 | 	add	fp, #20
0c4f4     A7 3C 68 FC | 	wrlong	#30, fp
0c4f8     08 4E 85 F1 | 	sub	fp, #8
0c4fc     A7 12 02 FB | 	rdlong	arg01, fp
0c500     0C 4E 85 F1 | 	sub	fp, #12
0c504     09 13 52 F6 | 	abs	arg01, arg01 wc
0c508     1F 20 C6 C9 |  if_b	decod	local02, #31
0c50c     00 20 06 36 |  if_ae	mov	local02, #0
0c510     18 BC B0 FD | 	call	#__system___float_fromuns
0c514     10 FB 61 F5 | 	xor	result1, local02
0c518     0C 4E 05 F1 | 	add	fp, #12
0c51c     A7 FA 61 FC | 	wrlong	result1, fp
0c520     0C 4E 85 F1 | 	sub	fp, #12
0c524                 | LR__1022
0c524                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0c524     14 4E 05 F1 | 	add	fp, #20
0c528     A7 14 02 FB | 	rdlong	arg02, fp
0c52c     14 4E 85 F1 | 	sub	fp, #20
0c530     1D 14 0E F2 | 	cmp	arg02, #29 wz
0c534     24 00 90 5D |  if_ne	jmp	#LR__1023
0c538     14 4E 05 F1 | 	add	fp, #20
0c53c     A7 3C 68 FC | 	wrlong	#30, fp
0c540     08 4E 85 F1 | 	sub	fp, #8
0c544     A7 12 02 FB | 	rdlong	arg01, fp
0c548     0C 4E 85 F1 | 	sub	fp, #12
0c54c     DC BB B0 FD | 	call	#__system___float_fromuns
0c550     0C 4E 05 F1 | 	add	fp, #12
0c554     A7 FA 61 FC | 	wrlong	result1, fp
0c558     0C 4E 85 F1 | 	sub	fp, #12
0c55c                 | LR__1023
0c55c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
0c55c     08 4E 05 F1 | 	add	fp, #8
0c560     A7 14 02 FB | 	rdlong	arg02, fp
0c564     08 4E 85 F1 | 	sub	fp, #8
0c568     1E 14 0E F2 | 	cmp	arg02, #30 wz
0c56c     14 4E 05 A1 |  if_e	add	fp, #20
0c570     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c574     14 4E 85 A1 |  if_e	sub	fp, #20
0c578     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0c57c     1C 00 90 5D |  if_ne	jmp	#LR__1024
0c580     A7 12 02 FB | 	rdlong	arg01, fp
0c584     0C 4E 05 F1 | 	add	fp, #12
0c588     A7 14 02 FB | 	rdlong	arg02, fp
0c58c     0C 4E 85 F1 | 	sub	fp, #12
0c590     C8 C0 B0 FD | 	call	#__system___float_div
0c594     A7 FA 61 FC | 	wrlong	result1, fp
0c598     10 00 90 FD | 	jmp	#LR__1025
0c59c                 | LR__1024
0c59c     A7 16 68 FC | 	wrlong	#11, fp
0c5a0     08 4E 05 F1 | 	add	fp, #8
0c5a4     A7 FE 69 FC | 	wrlong	#255, fp
0c5a8     08 4E 85 F1 | 	sub	fp, #8
0c5ac                 | LR__1025
0c5ac     A7 12 02 F6 | 	mov	arg01, fp
0c5b0     F4 C5 BF FD | 	call	#_push
0c5b4     A7 F0 03 F6 | 	mov	ptra, fp
0c5b8     B2 00 A0 FD | 	call	#popregs_
0c5bc                 | _do_fdiv_ret
0c5bc     2D 00 64 FD | 	ret
0c5c0                 | 
0c5c0                 | ' 
0c5c0                 | ' 
0c5c0                 | ' sub do_mod 
0c5c0                 | _do_mod
0c5c0     01 4A 05 F6 | 	mov	COUNT_, #1
0c5c4     A8 00 A0 FD | 	call	#pushregs_
0c5c8     18 F0 07 F1 | 	add	ptra, #24
0c5cc     40 C5 BF FD | 	call	#_pop
0c5d0     FD 62 02 F6 | 	mov	muldivb_, result1
0c5d4     FE 60 02 F6 | 	mov	muldiva_, result2
0c5d8     FF 1E 02 F6 | 	mov	local01, result3
0c5dc     0C 4E 05 F1 | 	add	fp, #12
0c5e0     A7 62 62 FC | 	wrlong	muldivb_, fp
0c5e4     04 4E 05 F1 | 	add	fp, #4
0c5e8     A7 60 62 FC | 	wrlong	muldiva_, fp
0c5ec     04 4E 05 F1 | 	add	fp, #4
0c5f0     A7 1E 62 FC | 	wrlong	local01, fp
0c5f4     14 4E 85 F1 | 	sub	fp, #20
0c5f8     14 C5 BF FD | 	call	#_pop
0c5fc     A7 FA 61 FC | 	wrlong	result1, fp
0c600     04 4E 05 F1 | 	add	fp, #4
0c604     A7 FC 61 FC | 	wrlong	result2, fp
0c608     04 4E 05 F1 | 	add	fp, #4
0c60c     A7 FE 61 FC | 	wrlong	result3, fp
0c610                 | ' 
0c610                 | ' t2=pop()
0c610                 | ' t1=pop()
0c610                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
0c610     08 4E 85 F1 | 	sub	fp, #8
0c614     1F FE 0D F2 | 	cmp	result3, #31 wz
0c618     14 4E 05 51 |  if_ne	add	fp, #20
0c61c     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0c620     14 4E 85 51 |  if_ne	sub	fp, #20
0c624     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0c628     A7 14 68 AC |  if_e	wrlong	#10, fp
0c62c     08 4E 05 A1 |  if_e	add	fp, #8
0c630     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c634     08 4E 85 A1 |  if_e	sub	fp, #8
0c638     90 01 90 AD |  if_e	jmp	#LR__1036
0c63c                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0c63c     08 4E 05 F1 | 	add	fp, #8
0c640     A7 62 02 FB | 	rdlong	muldivb_, fp
0c644     08 4E 85 F1 | 	sub	fp, #8
0c648     1E 62 0E F2 | 	cmp	muldivb_, #30 wz
0c64c     1C 00 90 5D |  if_ne	jmp	#LR__1030
0c650     08 4E 05 F1 | 	add	fp, #8
0c654     A7 38 68 FC | 	wrlong	#28, fp
0c658     08 4E 85 F1 | 	sub	fp, #8
0c65c     A7 12 02 FB | 	rdlong	arg01, fp
0c660     00 14 06 F6 | 	mov	arg02, #0
0c664     B8 C2 B0 FD | 	call	#__system___float_tointeger
0c668     A7 FA 61 FC | 	wrlong	result1, fp
0c66c                 | LR__1030
0c66c                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0c66c     14 4E 05 F1 | 	add	fp, #20
0c670     A7 62 02 FB | 	rdlong	muldivb_, fp
0c674     14 4E 85 F1 | 	sub	fp, #20
0c678     1E 62 0E F2 | 	cmp	muldivb_, #30 wz
0c67c     28 00 90 5D |  if_ne	jmp	#LR__1031
0c680     14 4E 05 F1 | 	add	fp, #20
0c684     A7 38 68 FC | 	wrlong	#28, fp
0c688     08 4E 85 F1 | 	sub	fp, #8
0c68c     A7 12 02 FB | 	rdlong	arg01, fp
0c690     0C 4E 85 F1 | 	sub	fp, #12
0c694     00 14 06 F6 | 	mov	arg02, #0
0c698     84 C2 B0 FD | 	call	#__system___float_tointeger
0c69c     0C 4E 05 F1 | 	add	fp, #12
0c6a0     A7 FA 61 FC | 	wrlong	result1, fp
0c6a4     0C 4E 85 F1 | 	sub	fp, #12
0c6a8                 | LR__1031
0c6a8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
0c6a8     08 4E 05 F1 | 	add	fp, #8
0c6ac     A7 62 02 FB | 	rdlong	muldivb_, fp
0c6b0     08 4E 85 F1 | 	sub	fp, #8
0c6b4     1D 62 0E F2 | 	cmp	muldivb_, #29 wz
0c6b8     14 4E 05 A1 |  if_e	add	fp, #20
0c6bc     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c6c0     14 4E 85 A1 |  if_e	sub	fp, #20
0c6c4     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0c6c8     20 00 90 5D |  if_ne	jmp	#LR__1032
0c6cc     0C 4E 05 F1 | 	add	fp, #12
0c6d0     A7 1E 02 FB | 	rdlong	local01, fp
0c6d4     0C 4E 85 F1 | 	sub	fp, #12
0c6d8     A7 62 02 FB | 	rdlong	muldivb_, fp
0c6dc     0F 63 12 FD | 	qdiv	muldivb_, local01
0c6e0     19 1E 62 FD | 	getqy	local01
0c6e4     A7 1E 62 FC | 	wrlong	local01, fp
0c6e8     E0 00 90 FD | 	jmp	#LR__1036
0c6ec                 | LR__1032
0c6ec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
0c6ec     08 4E 05 F1 | 	add	fp, #8
0c6f0     A7 62 02 FB | 	rdlong	muldivb_, fp
0c6f4     08 4E 85 F1 | 	sub	fp, #8
0c6f8     1D 62 0E F2 | 	cmp	muldivb_, #29 wz
0c6fc     14 4E 05 A1 |  if_e	add	fp, #20
0c700     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c704     14 4E 85 A1 |  if_e	sub	fp, #20
0c708     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0c70c     2C 00 90 5D |  if_ne	jmp	#LR__1033
0c710     0C 4E 05 F1 | 	add	fp, #12
0c714     A7 1E 02 FB | 	rdlong	local01, fp
0c718     0C 4E 85 F1 | 	sub	fp, #12
0c71c     A7 62 02 FB | 	rdlong	muldivb_, fp
0c720     0F 63 12 FD | 	qdiv	muldivb_, local01
0c724     19 1E 62 FD | 	getqy	local01
0c728     A7 1E 62 FC | 	wrlong	local01, fp
0c72c     08 4E 05 F1 | 	add	fp, #8
0c730     A7 38 68 FC | 	wrlong	#28, fp
0c734     08 4E 85 F1 | 	sub	fp, #8
0c738     90 00 90 FD | 	jmp	#LR__1036
0c73c                 | LR__1033
0c73c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
0c73c     08 4E 05 F1 | 	add	fp, #8
0c740     A7 62 02 FB | 	rdlong	muldivb_, fp
0c744     08 4E 85 F1 | 	sub	fp, #8
0c748     1C 62 0E F2 | 	cmp	muldivb_, #28 wz
0c74c     14 4E 05 A1 |  if_e	add	fp, #20
0c750     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c754     14 4E 85 A1 |  if_e	sub	fp, #20
0c758     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0c75c     1C 00 90 5D |  if_ne	jmp	#LR__1034
0c760     A7 60 02 FB | 	rdlong	muldiva_, fp
0c764     0C 4E 05 F1 | 	add	fp, #12
0c768     A7 62 02 FB | 	rdlong	muldivb_, fp
0c76c     0C 4E 85 F1 | 	sub	fp, #12
0c770     BA 00 A0 FD | 	call	#divide_
0c774     A7 60 62 FC | 	wrlong	muldiva_, fp
0c778     50 00 90 FD | 	jmp	#LR__1036
0c77c                 | LR__1034
0c77c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
0c77c     08 4E 05 F1 | 	add	fp, #8
0c780     A7 62 02 FB | 	rdlong	muldivb_, fp
0c784     08 4E 85 F1 | 	sub	fp, #8
0c788     1C 62 0E F2 | 	cmp	muldivb_, #28 wz
0c78c     14 4E 05 A1 |  if_e	add	fp, #20
0c790     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c794     14 4E 85 A1 |  if_e	sub	fp, #20
0c798     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0c79c     1C 00 90 5D |  if_ne	jmp	#LR__1035
0c7a0     A7 60 02 FB | 	rdlong	muldiva_, fp
0c7a4     0C 4E 05 F1 | 	add	fp, #12
0c7a8     A7 62 02 FB | 	rdlong	muldivb_, fp
0c7ac     0C 4E 85 F1 | 	sub	fp, #12
0c7b0     BA 00 A0 FD | 	call	#divide_
0c7b4     A7 60 62 FC | 	wrlong	muldiva_, fp
0c7b8     10 00 90 FD | 	jmp	#LR__1036
0c7bc                 | LR__1035
0c7bc     A7 16 68 FC | 	wrlong	#11, fp
0c7c0     08 4E 05 F1 | 	add	fp, #8
0c7c4     A7 FE 69 FC | 	wrlong	#255, fp
0c7c8     08 4E 85 F1 | 	sub	fp, #8
0c7cc                 | LR__1036
0c7cc     A7 12 02 F6 | 	mov	arg01, fp
0c7d0     D4 C3 BF FD | 	call	#_push
0c7d4     A7 F0 03 F6 | 	mov	ptra, fp
0c7d8     B2 00 A0 FD | 	call	#popregs_
0c7dc                 | _do_mod_ret
0c7dc     2D 00 64 FD | 	ret
0c7e0                 | 
0c7e0                 | ' 
0c7e0                 | ' sub do_shl 
0c7e0                 | _do_shl
0c7e0     03 4A 05 F6 | 	mov	COUNT_, #3
0c7e4     A8 00 A0 FD | 	call	#pushregs_
0c7e8     18 F0 07 F1 | 	add	ptra, #24
0c7ec     20 C3 BF FD | 	call	#_pop
0c7f0     FD 12 02 F6 | 	mov	arg01, result1
0c7f4     FE 1E 02 F6 | 	mov	local01, result2
0c7f8     FF 20 02 F6 | 	mov	local02, result3
0c7fc     0C 4E 05 F1 | 	add	fp, #12
0c800     A7 12 62 FC | 	wrlong	arg01, fp
0c804     04 4E 05 F1 | 	add	fp, #4
0c808     A7 1E 62 FC | 	wrlong	local01, fp
0c80c     04 4E 05 F1 | 	add	fp, #4
0c810     A7 20 62 FC | 	wrlong	local02, fp
0c814     14 4E 85 F1 | 	sub	fp, #20
0c818     F4 C2 BF FD | 	call	#_pop
0c81c     FF 22 02 F6 | 	mov	local03, result3
0c820     A7 FA 61 FC | 	wrlong	result1, fp
0c824     04 4E 05 F1 | 	add	fp, #4
0c828     A7 FC 61 FC | 	wrlong	result2, fp
0c82c     04 4E 05 F1 | 	add	fp, #4
0c830     A7 22 62 FC | 	wrlong	local03, fp
0c834                 | ' 
0c834                 | ' t2=pop()
0c834                 | ' t1=pop()
0c834                 | ' 
0c834                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0c834     08 4E 85 F1 | 	sub	fp, #8
0c838     1C 22 0E F2 | 	cmp	local03, #28 wz
0c83c     A7 22 02 AB |  if_e	rdlong	local03, fp
0c840     A7 22 62 AC |  if_e	wrlong	local03, fp
0c844     08 4E 05 A1 |  if_e	add	fp, #8
0c848     A7 3A 68 AC |  if_e	wrlong	#29, fp
0c84c     08 4E 85 A1 |  if_e	sub	fp, #8
0c850                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0c850     14 4E 05 F1 | 	add	fp, #20
0c854     A7 22 02 FB | 	rdlong	local03, fp
0c858     14 4E 85 F1 | 	sub	fp, #20
0c85c     1C 22 0E F2 | 	cmp	local03, #28 wz
0c860     18 00 90 5D |  if_ne	jmp	#LR__1040
0c864     0C 4E 05 F1 | 	add	fp, #12
0c868     A7 22 02 FB | 	rdlong	local03, fp
0c86c     A7 22 62 FC | 	wrlong	local03, fp
0c870     08 4E 05 F1 | 	add	fp, #8
0c874     A7 3A 68 FC | 	wrlong	#29, fp
0c878     14 4E 85 F1 | 	sub	fp, #20
0c87c                 | LR__1040
0c87c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
0c87c     08 4E 05 F1 | 	add	fp, #8
0c880     A7 22 02 FB | 	rdlong	local03, fp
0c884     08 4E 85 F1 | 	sub	fp, #8
0c888     1F 22 0E F2 | 	cmp	local03, #31 wz
0c88c     14 4E 05 51 |  if_ne	add	fp, #20
0c890     A7 20 02 5B |  if_ne	rdlong	local02, fp
0c894     14 4E 85 51 |  if_ne	sub	fp, #20
0c898     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0c89c     08 4E 05 51 |  if_ne	add	fp, #8
0c8a0     A7 22 02 5B |  if_ne	rdlong	local03, fp
0c8a4     08 4E 85 51 |  if_ne	sub	fp, #8
0c8a8     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0c8ac     14 4E 05 51 |  if_ne	add	fp, #20
0c8b0     14 4E 85 51 |  if_ne	sub	fp, #20
0c8b4     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0c8b8     A7 0C 68 AC |  if_e	wrlong	#6, fp
0c8bc     08 4E 05 A1 |  if_e	add	fp, #8
0c8c0     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c8c4     08 4E 85 A1 |  if_e	sub	fp, #8
0c8c8     18 00 90 AD |  if_e	jmp	#LR__1041
0c8cc     A7 22 02 FB | 	rdlong	local03, fp
0c8d0     0C 4E 05 F1 | 	add	fp, #12
0c8d4     A7 1E 02 FB | 	rdlong	local01, fp
0c8d8     0C 4E 85 F1 | 	sub	fp, #12
0c8dc     0F 23 62 F0 | 	shl	local03, local01
0c8e0     A7 22 62 FC | 	wrlong	local03, fp
0c8e4                 | LR__1041
0c8e4     A7 12 02 F6 | 	mov	arg01, fp
0c8e8     BC C2 BF FD | 	call	#_push
0c8ec     A7 F0 03 F6 | 	mov	ptra, fp
0c8f0     B2 00 A0 FD | 	call	#popregs_
0c8f4                 | _do_shl_ret
0c8f4     2D 00 64 FD | 	ret
0c8f8                 | 
0c8f8                 | ' 
0c8f8                 | ' sub do_shr 
0c8f8                 | _do_shr
0c8f8     03 4A 05 F6 | 	mov	COUNT_, #3
0c8fc     A8 00 A0 FD | 	call	#pushregs_
0c900     18 F0 07 F1 | 	add	ptra, #24
0c904     08 C2 BF FD | 	call	#_pop
0c908     FD 12 02 F6 | 	mov	arg01, result1
0c90c     FE 1E 02 F6 | 	mov	local01, result2
0c910     FF 20 02 F6 | 	mov	local02, result3
0c914     0C 4E 05 F1 | 	add	fp, #12
0c918     A7 12 62 FC | 	wrlong	arg01, fp
0c91c     04 4E 05 F1 | 	add	fp, #4
0c920     A7 1E 62 FC | 	wrlong	local01, fp
0c924     04 4E 05 F1 | 	add	fp, #4
0c928     A7 20 62 FC | 	wrlong	local02, fp
0c92c     14 4E 85 F1 | 	sub	fp, #20
0c930     DC C1 BF FD | 	call	#_pop
0c934     FF 22 02 F6 | 	mov	local03, result3
0c938     A7 FA 61 FC | 	wrlong	result1, fp
0c93c     04 4E 05 F1 | 	add	fp, #4
0c940     A7 FC 61 FC | 	wrlong	result2, fp
0c944     04 4E 05 F1 | 	add	fp, #4
0c948     A7 22 62 FC | 	wrlong	local03, fp
0c94c                 | ' t2=pop()
0c94c                 | ' t1=pop()
0c94c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0c94c     08 4E 85 F1 | 	sub	fp, #8
0c950     1C 22 0E F2 | 	cmp	local03, #28 wz
0c954     A7 22 02 AB |  if_e	rdlong	local03, fp
0c958     A7 22 62 AC |  if_e	wrlong	local03, fp
0c95c     08 4E 05 A1 |  if_e	add	fp, #8
0c960     A7 3A 68 AC |  if_e	wrlong	#29, fp
0c964     08 4E 85 A1 |  if_e	sub	fp, #8
0c968                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0c968     14 4E 05 F1 | 	add	fp, #20
0c96c     A7 22 02 FB | 	rdlong	local03, fp
0c970     14 4E 85 F1 | 	sub	fp, #20
0c974     1C 22 0E F2 | 	cmp	local03, #28 wz
0c978     18 00 90 5D |  if_ne	jmp	#LR__1050
0c97c     0C 4E 05 F1 | 	add	fp, #12
0c980     A7 22 02 FB | 	rdlong	local03, fp
0c984     A7 22 62 FC | 	wrlong	local03, fp
0c988     08 4E 05 F1 | 	add	fp, #8
0c98c     A7 3A 68 FC | 	wrlong	#29, fp
0c990     14 4E 85 F1 | 	sub	fp, #20
0c994                 | LR__1050
0c994                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
0c994     08 4E 05 F1 | 	add	fp, #8
0c998     A7 22 02 FB | 	rdlong	local03, fp
0c99c     08 4E 85 F1 | 	sub	fp, #8
0c9a0     1F 22 0E F2 | 	cmp	local03, #31 wz
0c9a4     14 4E 05 51 |  if_ne	add	fp, #20
0c9a8     A7 20 02 5B |  if_ne	rdlong	local02, fp
0c9ac     14 4E 85 51 |  if_ne	sub	fp, #20
0c9b0     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0c9b4     08 4E 05 51 |  if_ne	add	fp, #8
0c9b8     A7 22 02 5B |  if_ne	rdlong	local03, fp
0c9bc     08 4E 85 51 |  if_ne	sub	fp, #8
0c9c0     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0c9c4     14 4E 05 51 |  if_ne	add	fp, #20
0c9c8     14 4E 85 51 |  if_ne	sub	fp, #20
0c9cc     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0c9d0     A7 0C 68 AC |  if_e	wrlong	#6, fp
0c9d4     08 4E 05 A1 |  if_e	add	fp, #8
0c9d8     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c9dc     08 4E 85 A1 |  if_e	sub	fp, #8
0c9e0     18 00 90 AD |  if_e	jmp	#LR__1051
0c9e4     A7 22 02 FB | 	rdlong	local03, fp
0c9e8     0C 4E 05 F1 | 	add	fp, #12
0c9ec     A7 1E 02 FB | 	rdlong	local01, fp
0c9f0     0C 4E 85 F1 | 	sub	fp, #12
0c9f4     0F 23 42 F0 | 	shr	local03, local01
0c9f8     A7 22 62 FC | 	wrlong	local03, fp
0c9fc                 | LR__1051
0c9fc     A7 12 02 F6 | 	mov	arg01, fp
0ca00     A4 C1 BF FD | 	call	#_push
0ca04     A7 F0 03 F6 | 	mov	ptra, fp
0ca08     B2 00 A0 FD | 	call	#popregs_
0ca0c                 | _do_shr_ret
0ca0c     2D 00 64 FD | 	ret
0ca10                 | 
0ca10                 | ' 
0ca10                 | ' sub do_power 
0ca10                 | _do_power
0ca10     02 4A 05 F6 | 	mov	COUNT_, #2
0ca14     A8 00 A0 FD | 	call	#pushregs_
0ca18     18 F0 07 F1 | 	add	ptra, #24
0ca1c     F0 C0 BF FD | 	call	#_pop
0ca20     FD 14 02 F6 | 	mov	arg02, result1
0ca24     FE 12 02 F6 | 	mov	arg01, result2
0ca28     FF 1E 02 F6 | 	mov	local01, result3
0ca2c     0C 4E 05 F1 | 	add	fp, #12
0ca30     A7 14 62 FC | 	wrlong	arg02, fp
0ca34     04 4E 05 F1 | 	add	fp, #4
0ca38     A7 12 62 FC | 	wrlong	arg01, fp
0ca3c     04 4E 05 F1 | 	add	fp, #4
0ca40     A7 1E 62 FC | 	wrlong	local01, fp
0ca44     14 4E 85 F1 | 	sub	fp, #20
0ca48     C4 C0 BF FD | 	call	#_pop
0ca4c     A7 FA 61 FC | 	wrlong	result1, fp
0ca50     04 4E 05 F1 | 	add	fp, #4
0ca54     A7 FC 61 FC | 	wrlong	result2, fp
0ca58     04 4E 05 F1 | 	add	fp, #4
0ca5c     A7 FE 61 FC | 	wrlong	result3, fp
0ca60                 | ' t2=pop()
0ca60                 | ' t1=pop()
0ca60                 | ' 
0ca60                 | ' 
0ca60                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
0ca60     08 4E 85 F1 | 	sub	fp, #8
0ca64     1F FE 0D F2 | 	cmp	result3, #31 wz
0ca68     14 4E 05 51 |  if_ne	add	fp, #20
0ca6c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0ca70     14 4E 85 51 |  if_ne	sub	fp, #20
0ca74     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0ca78     A7 18 68 AC |  if_e	wrlong	#12, fp
0ca7c     08 4E 05 A1 |  if_e	add	fp, #8
0ca80     A7 FE 69 AC |  if_e	wrlong	#255, fp
0ca84     08 4E 85 A1 |  if_e	sub	fp, #8
0ca88     38 01 90 AD |  if_e	jmp	#LR__1065
0ca8c                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0ca8c     08 4E 05 F1 | 	add	fp, #8
0ca90     A7 14 02 FB | 	rdlong	arg02, fp
0ca94     08 4E 85 F1 | 	sub	fp, #8
0ca98     1C 14 0E F2 | 	cmp	arg02, #28 wz
0ca9c     28 00 90 5D |  if_ne	jmp	#LR__1060
0caa0     08 4E 05 F1 | 	add	fp, #8
0caa4     A7 3C 68 FC | 	wrlong	#30, fp
0caa8     08 4E 85 F1 | 	sub	fp, #8
0caac     A7 12 02 FB | 	rdlong	arg01, fp
0cab0     09 13 52 F6 | 	abs	arg01, arg01 wc
0cab4     1F 20 C6 C9 |  if_b	decod	local02, #31
0cab8     00 20 06 36 |  if_ae	mov	local02, #0
0cabc     6C B6 B0 FD | 	call	#__system___float_fromuns
0cac0     10 FB 61 F5 | 	xor	result1, local02
0cac4     A7 FA 61 FC | 	wrlong	result1, fp
0cac8                 | LR__1060
0cac8                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
0cac8     08 4E 05 F1 | 	add	fp, #8
0cacc     A7 14 02 FB | 	rdlong	arg02, fp
0cad0     08 4E 85 F1 | 	sub	fp, #8
0cad4     1D 14 0E F2 | 	cmp	arg02, #29 wz
0cad8     18 00 90 5D |  if_ne	jmp	#LR__1061
0cadc     08 4E 05 F1 | 	add	fp, #8
0cae0     A7 3C 68 FC | 	wrlong	#30, fp
0cae4     08 4E 85 F1 | 	sub	fp, #8
0cae8     A7 12 02 FB | 	rdlong	arg01, fp
0caec     3C B6 B0 FD | 	call	#__system___float_fromuns
0caf0     A7 FA 61 FC | 	wrlong	result1, fp
0caf4                 | LR__1061
0caf4                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0caf4     14 4E 05 F1 | 	add	fp, #20
0caf8     A7 14 02 FB | 	rdlong	arg02, fp
0cafc     14 4E 85 F1 | 	sub	fp, #20
0cb00     1C 14 0E F2 | 	cmp	arg02, #28 wz
0cb04     34 00 90 5D |  if_ne	jmp	#LR__1062
0cb08     14 4E 05 F1 | 	add	fp, #20
0cb0c     A7 3C 68 FC | 	wrlong	#30, fp
0cb10     08 4E 85 F1 | 	sub	fp, #8
0cb14     A7 12 02 FB | 	rdlong	arg01, fp
0cb18     0C 4E 85 F1 | 	sub	fp, #12
0cb1c     09 13 52 F6 | 	abs	arg01, arg01 wc
0cb20     1F 20 C6 C9 |  if_b	decod	local02, #31
0cb24     00 20 06 36 |  if_ae	mov	local02, #0
0cb28     00 B6 B0 FD | 	call	#__system___float_fromuns
0cb2c     10 FB 61 F5 | 	xor	result1, local02
0cb30     0C 4E 05 F1 | 	add	fp, #12
0cb34     A7 FA 61 FC | 	wrlong	result1, fp
0cb38     0C 4E 85 F1 | 	sub	fp, #12
0cb3c                 | LR__1062
0cb3c                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0cb3c     14 4E 05 F1 | 	add	fp, #20
0cb40     A7 14 02 FB | 	rdlong	arg02, fp
0cb44     14 4E 85 F1 | 	sub	fp, #20
0cb48     1D 14 0E F2 | 	cmp	arg02, #29 wz
0cb4c     24 00 90 5D |  if_ne	jmp	#LR__1063
0cb50     14 4E 05 F1 | 	add	fp, #20
0cb54     A7 3C 68 FC | 	wrlong	#30, fp
0cb58     08 4E 85 F1 | 	sub	fp, #8
0cb5c     A7 12 02 FB | 	rdlong	arg01, fp
0cb60     0C 4E 85 F1 | 	sub	fp, #12
0cb64     C4 B5 B0 FD | 	call	#__system___float_fromuns
0cb68     0C 4E 05 F1 | 	add	fp, #12
0cb6c     A7 FA 61 FC | 	wrlong	result1, fp
0cb70     0C 4E 85 F1 | 	sub	fp, #12
0cb74                 | LR__1063
0cb74                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
0cb74     08 4E 05 F1 | 	add	fp, #8
0cb78     A7 14 02 FB | 	rdlong	arg02, fp
0cb7c     08 4E 85 F1 | 	sub	fp, #8
0cb80     1E 14 0E F2 | 	cmp	arg02, #30 wz
0cb84     14 4E 05 A1 |  if_e	add	fp, #20
0cb88     A7 1E 02 AB |  if_e	rdlong	local01, fp
0cb8c     14 4E 85 A1 |  if_e	sub	fp, #20
0cb90     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0cb94     1C 00 90 5D |  if_ne	jmp	#LR__1064
0cb98     A7 12 02 FB | 	rdlong	arg01, fp
0cb9c     0C 4E 05 F1 | 	add	fp, #12
0cba0     A7 14 02 FB | 	rdlong	arg02, fp
0cba4     0C 4E 85 F1 | 	sub	fp, #12
0cba8     18 C5 B0 FD | 	call	#__system____builtin_powf
0cbac     A7 FA 61 FC | 	wrlong	result1, fp
0cbb0     10 00 90 FD | 	jmp	#LR__1065
0cbb4                 | LR__1064
0cbb4     A7 1A 68 FC | 	wrlong	#13, fp
0cbb8     08 4E 05 F1 | 	add	fp, #8
0cbbc     A7 FE 69 FC | 	wrlong	#255, fp
0cbc0     08 4E 85 F1 | 	sub	fp, #8
0cbc4                 | LR__1065
0cbc4     A7 12 02 F6 | 	mov	arg01, fp
0cbc8     DC BF BF FD | 	call	#_push
0cbcc     A7 F0 03 F6 | 	mov	ptra, fp
0cbd0     B2 00 A0 FD | 	call	#popregs_
0cbd4                 | _do_power_ret
0cbd4     2D 00 64 FD | 	ret
0cbd8                 | 
0cbd8                 | ' 
0cbd8                 | ' 
0cbd8                 | ' sub do_eq
0cbd8                 | _do_eq
0cbd8     05 4A 05 F6 | 	mov	COUNT_, #5
0cbdc     A8 00 A0 FD | 	call	#pushregs_
0cbe0     18 F0 07 F1 | 	add	ptra, #24
0cbe4     28 BF BF FD | 	call	#_pop
0cbe8     FD 1E 02 F6 | 	mov	local01, result1
0cbec     FE 20 02 F6 | 	mov	local02, result2
0cbf0     FF 22 02 F6 | 	mov	local03, result3
0cbf4     0C 4E 05 F1 | 	add	fp, #12
0cbf8     A7 1E 62 FC | 	wrlong	local01, fp
0cbfc     04 4E 05 F1 | 	add	fp, #4
0cc00     A7 20 62 FC | 	wrlong	local02, fp
0cc04     04 4E 05 F1 | 	add	fp, #4
0cc08     A7 22 62 FC | 	wrlong	local03, fp
0cc0c     14 4E 85 F1 | 	sub	fp, #20
0cc10     FC BE BF FD | 	call	#_pop
0cc14     FF 22 02 F6 | 	mov	local03, result3
0cc18     A7 FA 61 FC | 	wrlong	result1, fp
0cc1c     04 4E 05 F1 | 	add	fp, #4
0cc20     A7 FC 61 FC | 	wrlong	result2, fp
0cc24     04 4E 05 F1 | 	add	fp, #4
0cc28     A7 22 62 FC | 	wrlong	local03, fp
0cc2c                 | ' t2=pop()
0cc2c                 | ' t1=pop()
0cc2c                 | ' 
0cc2c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
0cc2c     08 4E 85 F1 | 	sub	fp, #8
0cc30     1F 22 0E F2 | 	cmp	local03, #31 wz
0cc34     14 4E 05 A1 |  if_e	add	fp, #20
0cc38     A7 24 02 AB |  if_e	rdlong	local04, fp
0cc3c     14 4E 85 A1 |  if_e	sub	fp, #20
0cc40     12 23 02 A6 |  if_e	mov	local03, local04
0cc44     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0cc48     28 00 90 5D |  if_ne	jmp	#LR__1070
0cc4c     00 1E 06 F6 | 	mov	local01, #0
0cc50     A7 12 02 FB | 	rdlong	arg01, fp
0cc54     0C 4E 05 F1 | 	add	fp, #12
0cc58     A7 14 02 FB | 	rdlong	arg02, fp
0cc5c     0C 4E 85 F1 | 	sub	fp, #12
0cc60     0C 8F B0 FD | 	call	#__system___string_cmp
0cc64     00 FA 0D F2 | 	cmp	result1, #0 wz
0cc68     00 1E 26 A6 |  if_e	not	local01, #0
0cc6c     A7 1E 62 FC | 	wrlong	local01, fp
0cc70     04 03 90 FD | 	jmp	#LR__1080
0cc74                 | LR__1070
0cc74                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
0cc74     08 4E 05 F1 | 	add	fp, #8
0cc78     A7 1E 02 FB | 	rdlong	local01, fp
0cc7c     08 4E 85 F1 | 	sub	fp, #8
0cc80     1E 1E 0E F2 | 	cmp	local01, #30 wz
0cc84     14 4E 05 A1 |  if_e	add	fp, #20
0cc88     A7 24 02 AB |  if_e	rdlong	local04, fp
0cc8c     14 4E 85 A1 |  if_e	sub	fp, #20
0cc90     12 23 02 A6 |  if_e	mov	local03, local04
0cc94     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0cc98     2C 00 90 5D |  if_ne	jmp	#LR__1071
0cc9c     00 1E 06 F6 | 	mov	local01, #0
0cca0     A7 12 02 FB | 	rdlong	arg01, fp
0cca4     0C 4E 05 F1 | 	add	fp, #12
0cca8     A7 14 02 FB | 	rdlong	arg02, fp
0ccac     0C 4E 85 F1 | 	sub	fp, #12
0ccb0     01 16 06 F6 | 	mov	arg03, #1
0ccb4     D4 BB B0 FD | 	call	#__system___float_cmp
0ccb8     00 FA 0D F2 | 	cmp	result1, #0 wz
0ccbc     00 1E 26 A6 |  if_e	not	local01, #0
0ccc0     A7 1E 62 FC | 	wrlong	local01, fp
0ccc4     B0 02 90 FD | 	jmp	#LR__1080
0ccc8                 | LR__1071
0ccc8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
0ccc8     08 4E 05 F1 | 	add	fp, #8
0cccc     A7 1E 02 FB | 	rdlong	local01, fp
0ccd0     08 4E 85 F1 | 	sub	fp, #8
0ccd4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ccd8     14 4E 05 A1 |  if_e	add	fp, #20
0ccdc     A7 24 02 AB |  if_e	rdlong	local04, fp
0cce0     14 4E 85 A1 |  if_e	sub	fp, #20
0cce4     12 23 02 A6 |  if_e	mov	local03, local04
0cce8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ccec     48 00 90 5D |  if_ne	jmp	#LR__1072
0ccf0     00 1E 06 F6 | 	mov	local01, #0
0ccf4     A7 20 02 FB | 	rdlong	local02, fp
0ccf8     0C 4E 05 F1 | 	add	fp, #12
0ccfc     A7 12 02 FB | 	rdlong	arg01, fp
0cd00     0C 4E 85 F1 | 	sub	fp, #12
0cd04     09 13 52 F6 | 	abs	arg01, arg01 wc
0cd08     1F 26 C6 C9 |  if_b	decod	local05, #31
0cd0c     00 26 06 36 |  if_ae	mov	local05, #0
0cd10     18 B4 B0 FD | 	call	#__system___float_fromuns
0cd14     13 FB 61 F5 | 	xor	result1, local05
0cd18     FD 14 02 F6 | 	mov	arg02, result1
0cd1c     10 13 02 F6 | 	mov	arg01, local02
0cd20     01 16 06 F6 | 	mov	arg03, #1
0cd24     64 BB B0 FD | 	call	#__system___float_cmp
0cd28     00 FA 0D F2 | 	cmp	result1, #0 wz
0cd2c     00 1E 26 A6 |  if_e	not	local01, #0
0cd30     A7 1E 62 FC | 	wrlong	local01, fp
0cd34     40 02 90 FD | 	jmp	#LR__1080
0cd38                 | LR__1072
0cd38                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
0cd38     08 4E 05 F1 | 	add	fp, #8
0cd3c     A7 1E 02 FB | 	rdlong	local01, fp
0cd40     08 4E 85 F1 | 	sub	fp, #8
0cd44     1E 1E 0E F2 | 	cmp	local01, #30 wz
0cd48     14 4E 05 A1 |  if_e	add	fp, #20
0cd4c     A7 24 02 AB |  if_e	rdlong	local04, fp
0cd50     14 4E 85 A1 |  if_e	sub	fp, #20
0cd54     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0cd58     38 00 90 5D |  if_ne	jmp	#LR__1073
0cd5c     00 1E 06 F6 | 	mov	local01, #0
0cd60     A7 20 02 FB | 	rdlong	local02, fp
0cd64     0C 4E 05 F1 | 	add	fp, #12
0cd68     A7 12 02 FB | 	rdlong	arg01, fp
0cd6c     0C 4E 85 F1 | 	sub	fp, #12
0cd70     B8 B3 B0 FD | 	call	#__system___float_fromuns
0cd74     FD 14 02 F6 | 	mov	arg02, result1
0cd78     10 13 02 F6 | 	mov	arg01, local02
0cd7c     01 16 06 F6 | 	mov	arg03, #1
0cd80     08 BB B0 FD | 	call	#__system___float_cmp
0cd84     00 FA 0D F2 | 	cmp	result1, #0 wz
0cd88     00 1E 26 A6 |  if_e	not	local01, #0
0cd8c     A7 1E 62 FC | 	wrlong	local01, fp
0cd90     E4 01 90 FD | 	jmp	#LR__1080
0cd94                 | LR__1073
0cd94                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
0cd94     08 4E 05 F1 | 	add	fp, #8
0cd98     A7 1E 02 FB | 	rdlong	local01, fp
0cd9c     08 4E 85 F1 | 	sub	fp, #8
0cda0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0cda4     14 4E 05 A1 |  if_e	add	fp, #20
0cda8     A7 22 02 AB |  if_e	rdlong	local03, fp
0cdac     14 4E 85 A1 |  if_e	sub	fp, #20
0cdb0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0cdb4     44 00 90 5D |  if_ne	jmp	#LR__1074
0cdb8     00 1E 06 F6 | 	mov	local01, #0
0cdbc     A7 12 02 FB | 	rdlong	arg01, fp
0cdc0     09 13 52 F6 | 	abs	arg01, arg01 wc
0cdc4     1F 26 C6 C9 |  if_b	decod	local05, #31
0cdc8     00 26 06 36 |  if_ae	mov	local05, #0
0cdcc     5C B3 B0 FD | 	call	#__system___float_fromuns
0cdd0     13 FB 61 F5 | 	xor	result1, local05
0cdd4     FD 12 02 F6 | 	mov	arg01, result1
0cdd8     0C 4E 05 F1 | 	add	fp, #12
0cddc     A7 14 02 FB | 	rdlong	arg02, fp
0cde0     0C 4E 85 F1 | 	sub	fp, #12
0cde4     01 16 06 F6 | 	mov	arg03, #1
0cde8     A0 BA B0 FD | 	call	#__system___float_cmp
0cdec     00 FA 0D F2 | 	cmp	result1, #0 wz
0cdf0     00 1E 26 A6 |  if_e	not	local01, #0
0cdf4     A7 1E 62 FC | 	wrlong	local01, fp
0cdf8     7C 01 90 FD | 	jmp	#LR__1080
0cdfc                 | LR__1074
0cdfc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
0cdfc     08 4E 05 F1 | 	add	fp, #8
0ce00     A7 1E 02 FB | 	rdlong	local01, fp
0ce04     08 4E 85 F1 | 	sub	fp, #8
0ce08     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ce0c     14 4E 05 A1 |  if_e	add	fp, #20
0ce10     A7 22 02 AB |  if_e	rdlong	local03, fp
0ce14     14 4E 85 A1 |  if_e	sub	fp, #20
0ce18     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ce1c     24 00 90 5D |  if_ne	jmp	#LR__1075
0ce20     00 1E 06 F6 | 	mov	local01, #0
0ce24     A7 20 02 FB | 	rdlong	local02, fp
0ce28     0C 4E 05 F1 | 	add	fp, #12
0ce2c     A7 22 02 FB | 	rdlong	local03, fp
0ce30     0C 4E 85 F1 | 	sub	fp, #12
0ce34     11 21 0A F2 | 	cmp	local02, local03 wz
0ce38     01 1E 66 A6 |  if_e	neg	local01, #1
0ce3c     A7 1E 62 FC | 	wrlong	local01, fp
0ce40     34 01 90 FD | 	jmp	#LR__1080
0ce44                 | LR__1075
0ce44                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
0ce44     08 4E 05 F1 | 	add	fp, #8
0ce48     A7 1E 02 FB | 	rdlong	local01, fp
0ce4c     08 4E 85 F1 | 	sub	fp, #8
0ce50     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ce54     14 4E 05 A1 |  if_e	add	fp, #20
0ce58     A7 22 02 AB |  if_e	rdlong	local03, fp
0ce5c     14 4E 85 A1 |  if_e	sub	fp, #20
0ce60     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0ce64     24 00 90 5D |  if_ne	jmp	#LR__1076
0ce68     00 1E 06 F6 | 	mov	local01, #0
0ce6c     A7 20 02 FB | 	rdlong	local02, fp
0ce70     0C 4E 05 F1 | 	add	fp, #12
0ce74     A7 22 02 FB | 	rdlong	local03, fp
0ce78     0C 4E 85 F1 | 	sub	fp, #12
0ce7c     11 21 0A F2 | 	cmp	local02, local03 wz
0ce80     01 1E 66 A6 |  if_e	neg	local01, #1
0ce84     A7 1E 62 FC | 	wrlong	local01, fp
0ce88     EC 00 90 FD | 	jmp	#LR__1080
0ce8c                 | LR__1076
0ce8c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
0ce8c     08 4E 05 F1 | 	add	fp, #8
0ce90     A7 1E 02 FB | 	rdlong	local01, fp
0ce94     08 4E 85 F1 | 	sub	fp, #8
0ce98     1D 1E 0E F2 | 	cmp	local01, #29 wz
0ce9c     14 4E 05 A1 |  if_e	add	fp, #20
0cea0     A7 22 02 AB |  if_e	rdlong	local03, fp
0cea4     14 4E 85 A1 |  if_e	sub	fp, #20
0cea8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ceac     34 00 90 5D |  if_ne	jmp	#LR__1077
0ceb0     00 1E 06 F6 | 	mov	local01, #0
0ceb4     A7 12 02 FB | 	rdlong	arg01, fp
0ceb8     70 B2 B0 FD | 	call	#__system___float_fromuns
0cebc     FD 12 02 F6 | 	mov	arg01, result1
0cec0     0C 4E 05 F1 | 	add	fp, #12
0cec4     A7 14 02 FB | 	rdlong	arg02, fp
0cec8     0C 4E 85 F1 | 	sub	fp, #12
0cecc     01 16 06 F6 | 	mov	arg03, #1
0ced0     B8 B9 B0 FD | 	call	#__system___float_cmp
0ced4     00 FA 0D F2 | 	cmp	result1, #0 wz
0ced8     00 1E 26 A6 |  if_e	not	local01, #0
0cedc     A7 1E 62 FC | 	wrlong	local01, fp
0cee0     94 00 90 FD | 	jmp	#LR__1080
0cee4                 | LR__1077
0cee4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
0cee4     08 4E 05 F1 | 	add	fp, #8
0cee8     A7 1E 02 FB | 	rdlong	local01, fp
0ceec     08 4E 85 F1 | 	sub	fp, #8
0cef0     1D 1E 0E F2 | 	cmp	local01, #29 wz
0cef4     14 4E 05 A1 |  if_e	add	fp, #20
0cef8     A7 22 02 AB |  if_e	rdlong	local03, fp
0cefc     14 4E 85 A1 |  if_e	sub	fp, #20
0cf00     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0cf04     24 00 90 5D |  if_ne	jmp	#LR__1078
0cf08     00 1E 06 F6 | 	mov	local01, #0
0cf0c     A7 20 02 FB | 	rdlong	local02, fp
0cf10     0C 4E 05 F1 | 	add	fp, #12
0cf14     A7 22 02 FB | 	rdlong	local03, fp
0cf18     0C 4E 85 F1 | 	sub	fp, #12
0cf1c     11 21 0A F2 | 	cmp	local02, local03 wz
0cf20     01 1E 66 A6 |  if_e	neg	local01, #1
0cf24     A7 1E 62 FC | 	wrlong	local01, fp
0cf28     4C 00 90 FD | 	jmp	#LR__1080
0cf2c                 | LR__1078
0cf2c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
0cf2c     08 4E 05 F1 | 	add	fp, #8
0cf30     A7 1E 02 FB | 	rdlong	local01, fp
0cf34     08 4E 85 F1 | 	sub	fp, #8
0cf38     1D 1E 0E F2 | 	cmp	local01, #29 wz
0cf3c     14 4E 05 A1 |  if_e	add	fp, #20
0cf40     A7 22 02 AB |  if_e	rdlong	local03, fp
0cf44     14 4E 85 A1 |  if_e	sub	fp, #20
0cf48     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0cf4c     24 00 90 5D |  if_ne	jmp	#LR__1079
0cf50     00 1E 06 F6 | 	mov	local01, #0
0cf54     A7 20 02 FB | 	rdlong	local02, fp
0cf58     0C 4E 05 F1 | 	add	fp, #12
0cf5c     A7 22 02 FB | 	rdlong	local03, fp
0cf60     0C 4E 85 F1 | 	sub	fp, #12
0cf64     11 21 0A F2 | 	cmp	local02, local03 wz
0cf68     01 1E 66 A6 |  if_e	neg	local01, #1
0cf6c     A7 1E 62 FC | 	wrlong	local01, fp
0cf70     04 00 90 FD | 	jmp	#LR__1080
0cf74                 | LR__1079
0cf74     A7 00 68 FC | 	wrlong	#0, fp
0cf78                 | LR__1080
0cf78     08 4E 05 F1 | 	add	fp, #8
0cf7c     A7 38 68 FC | 	wrlong	#28, fp
0cf80     08 4E 85 F1 | 	sub	fp, #8
0cf84     A7 12 02 F6 | 	mov	arg01, fp
0cf88     1C BC BF FD | 	call	#_push
0cf8c     A7 F0 03 F6 | 	mov	ptra, fp
0cf90     B2 00 A0 FD | 	call	#popregs_
0cf94                 | _do_eq_ret
0cf94     2D 00 64 FD | 	ret
0cf98                 | 
0cf98                 | ' 
0cf98                 | ' sub do_gt
0cf98                 | _do_gt
0cf98     05 4A 05 F6 | 	mov	COUNT_, #5
0cf9c     A8 00 A0 FD | 	call	#pushregs_
0cfa0     18 F0 07 F1 | 	add	ptra, #24
0cfa4     68 BB BF FD | 	call	#_pop
0cfa8     FD 1E 02 F6 | 	mov	local01, result1
0cfac     FE 20 02 F6 | 	mov	local02, result2
0cfb0     FF 22 02 F6 | 	mov	local03, result3
0cfb4     0C 4E 05 F1 | 	add	fp, #12
0cfb8     A7 1E 62 FC | 	wrlong	local01, fp
0cfbc     04 4E 05 F1 | 	add	fp, #4
0cfc0     A7 20 62 FC | 	wrlong	local02, fp
0cfc4     04 4E 05 F1 | 	add	fp, #4
0cfc8     A7 22 62 FC | 	wrlong	local03, fp
0cfcc     14 4E 85 F1 | 	sub	fp, #20
0cfd0     3C BB BF FD | 	call	#_pop
0cfd4     FF 22 02 F6 | 	mov	local03, result3
0cfd8     A7 FA 61 FC | 	wrlong	result1, fp
0cfdc     04 4E 05 F1 | 	add	fp, #4
0cfe0     A7 FC 61 FC | 	wrlong	result2, fp
0cfe4     04 4E 05 F1 | 	add	fp, #4
0cfe8     A7 22 62 FC | 	wrlong	local03, fp
0cfec                 | ' t2=pop()
0cfec                 | ' t1=pop()
0cfec                 | ' 
0cfec                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
0cfec     08 4E 85 F1 | 	sub	fp, #8
0cff0     1F 22 0E F2 | 	cmp	local03, #31 wz
0cff4     14 4E 05 A1 |  if_e	add	fp, #20
0cff8     A7 24 02 AB |  if_e	rdlong	local04, fp
0cffc     14 4E 85 A1 |  if_e	sub	fp, #20
0d000     12 23 02 A6 |  if_e	mov	local03, local04
0d004     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0d008     28 00 90 5D |  if_ne	jmp	#LR__1090
0d00c     00 1E 06 F6 | 	mov	local01, #0
0d010     A7 12 02 FB | 	rdlong	arg01, fp
0d014     0C 4E 05 F1 | 	add	fp, #12
0d018     A7 14 02 FB | 	rdlong	arg02, fp
0d01c     0C 4E 85 F1 | 	sub	fp, #12
0d020     4C 8B B0 FD | 	call	#__system___string_cmp
0d024     01 FA 55 F2 | 	cmps	result1, #1 wc
0d028     00 1E 26 36 |  if_ae	not	local01, #0
0d02c     A7 1E 62 FC | 	wrlong	local01, fp
0d030     04 03 90 FD | 	jmp	#LR__1100
0d034                 | LR__1090
0d034                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
0d034     08 4E 05 F1 | 	add	fp, #8
0d038     A7 1E 02 FB | 	rdlong	local01, fp
0d03c     08 4E 85 F1 | 	sub	fp, #8
0d040     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d044     14 4E 05 A1 |  if_e	add	fp, #20
0d048     A7 24 02 AB |  if_e	rdlong	local04, fp
0d04c     14 4E 85 A1 |  if_e	sub	fp, #20
0d050     12 23 02 A6 |  if_e	mov	local03, local04
0d054     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d058     2C 00 90 5D |  if_ne	jmp	#LR__1091
0d05c     00 1E 06 F6 | 	mov	local01, #0
0d060     A7 12 02 FB | 	rdlong	arg01, fp
0d064     0C 4E 05 F1 | 	add	fp, #12
0d068     A7 14 02 FB | 	rdlong	arg02, fp
0d06c     0C 4E 85 F1 | 	sub	fp, #12
0d070     01 16 66 F6 | 	neg	arg03, #1
0d074     14 B8 B0 FD | 	call	#__system___float_cmp
0d078     01 FA 55 F2 | 	cmps	result1, #1 wc
0d07c     00 1E 26 36 |  if_ae	not	local01, #0
0d080     A7 1E 62 FC | 	wrlong	local01, fp
0d084     B0 02 90 FD | 	jmp	#LR__1100
0d088                 | LR__1091
0d088                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
0d088     08 4E 05 F1 | 	add	fp, #8
0d08c     A7 1E 02 FB | 	rdlong	local01, fp
0d090     08 4E 85 F1 | 	sub	fp, #8
0d094     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d098     14 4E 05 A1 |  if_e	add	fp, #20
0d09c     A7 24 02 AB |  if_e	rdlong	local04, fp
0d0a0     14 4E 85 A1 |  if_e	sub	fp, #20
0d0a4     12 23 02 A6 |  if_e	mov	local03, local04
0d0a8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d0ac     48 00 90 5D |  if_ne	jmp	#LR__1092
0d0b0     00 1E 06 F6 | 	mov	local01, #0
0d0b4     A7 20 02 FB | 	rdlong	local02, fp
0d0b8     0C 4E 05 F1 | 	add	fp, #12
0d0bc     A7 12 02 FB | 	rdlong	arg01, fp
0d0c0     0C 4E 85 F1 | 	sub	fp, #12
0d0c4     09 13 52 F6 | 	abs	arg01, arg01 wc
0d0c8     1F 26 C6 C9 |  if_b	decod	local05, #31
0d0cc     00 26 06 36 |  if_ae	mov	local05, #0
0d0d0     58 B0 B0 FD | 	call	#__system___float_fromuns
0d0d4     13 FB 61 F5 | 	xor	result1, local05
0d0d8     FD 14 02 F6 | 	mov	arg02, result1
0d0dc     10 13 02 F6 | 	mov	arg01, local02
0d0e0     01 16 66 F6 | 	neg	arg03, #1
0d0e4     A4 B7 B0 FD | 	call	#__system___float_cmp
0d0e8     01 FA 55 F2 | 	cmps	result1, #1 wc
0d0ec     00 1E 26 36 |  if_ae	not	local01, #0
0d0f0     A7 1E 62 FC | 	wrlong	local01, fp
0d0f4     40 02 90 FD | 	jmp	#LR__1100
0d0f8                 | LR__1092
0d0f8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
0d0f8     08 4E 05 F1 | 	add	fp, #8
0d0fc     A7 1E 02 FB | 	rdlong	local01, fp
0d100     08 4E 85 F1 | 	sub	fp, #8
0d104     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d108     14 4E 05 A1 |  if_e	add	fp, #20
0d10c     A7 24 02 AB |  if_e	rdlong	local04, fp
0d110     14 4E 85 A1 |  if_e	sub	fp, #20
0d114     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0d118     38 00 90 5D |  if_ne	jmp	#LR__1093
0d11c     00 1E 06 F6 | 	mov	local01, #0
0d120     A7 20 02 FB | 	rdlong	local02, fp
0d124     0C 4E 05 F1 | 	add	fp, #12
0d128     A7 12 02 FB | 	rdlong	arg01, fp
0d12c     0C 4E 85 F1 | 	sub	fp, #12
0d130     F8 AF B0 FD | 	call	#__system___float_fromuns
0d134     FD 14 02 F6 | 	mov	arg02, result1
0d138     10 13 02 F6 | 	mov	arg01, local02
0d13c     01 16 66 F6 | 	neg	arg03, #1
0d140     48 B7 B0 FD | 	call	#__system___float_cmp
0d144     01 FA 55 F2 | 	cmps	result1, #1 wc
0d148     00 1E 26 36 |  if_ae	not	local01, #0
0d14c     A7 1E 62 FC | 	wrlong	local01, fp
0d150     E4 01 90 FD | 	jmp	#LR__1100
0d154                 | LR__1093
0d154                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
0d154     08 4E 05 F1 | 	add	fp, #8
0d158     A7 1E 02 FB | 	rdlong	local01, fp
0d15c     08 4E 85 F1 | 	sub	fp, #8
0d160     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d164     14 4E 05 A1 |  if_e	add	fp, #20
0d168     A7 22 02 AB |  if_e	rdlong	local03, fp
0d16c     14 4E 85 A1 |  if_e	sub	fp, #20
0d170     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d174     44 00 90 5D |  if_ne	jmp	#LR__1094
0d178     00 1E 06 F6 | 	mov	local01, #0
0d17c     A7 12 02 FB | 	rdlong	arg01, fp
0d180     09 13 52 F6 | 	abs	arg01, arg01 wc
0d184     1F 26 C6 C9 |  if_b	decod	local05, #31
0d188     00 26 06 36 |  if_ae	mov	local05, #0
0d18c     9C AF B0 FD | 	call	#__system___float_fromuns
0d190     13 FB 61 F5 | 	xor	result1, local05
0d194     FD 12 02 F6 | 	mov	arg01, result1
0d198     0C 4E 05 F1 | 	add	fp, #12
0d19c     A7 14 02 FB | 	rdlong	arg02, fp
0d1a0     0C 4E 85 F1 | 	sub	fp, #12
0d1a4     01 16 66 F6 | 	neg	arg03, #1
0d1a8     E0 B6 B0 FD | 	call	#__system___float_cmp
0d1ac     01 FA 55 F2 | 	cmps	result1, #1 wc
0d1b0     00 1E 26 36 |  if_ae	not	local01, #0
0d1b4     A7 1E 62 FC | 	wrlong	local01, fp
0d1b8     7C 01 90 FD | 	jmp	#LR__1100
0d1bc                 | LR__1094
0d1bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
0d1bc     08 4E 05 F1 | 	add	fp, #8
0d1c0     A7 1E 02 FB | 	rdlong	local01, fp
0d1c4     08 4E 85 F1 | 	sub	fp, #8
0d1c8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d1cc     14 4E 05 A1 |  if_e	add	fp, #20
0d1d0     A7 22 02 AB |  if_e	rdlong	local03, fp
0d1d4     14 4E 85 A1 |  if_e	sub	fp, #20
0d1d8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d1dc     24 00 90 5D |  if_ne	jmp	#LR__1095
0d1e0     00 1E 06 F6 | 	mov	local01, #0
0d1e4     A7 20 02 FB | 	rdlong	local02, fp
0d1e8     0C 4E 05 F1 | 	add	fp, #12
0d1ec     A7 22 02 FB | 	rdlong	local03, fp
0d1f0     0C 4E 85 F1 | 	sub	fp, #12
0d1f4     11 21 5A F2 | 	cmps	local02, local03 wcz
0d1f8     01 1E 66 16 |  if_a	neg	local01, #1
0d1fc     A7 1E 62 FC | 	wrlong	local01, fp
0d200     34 01 90 FD | 	jmp	#LR__1100
0d204                 | LR__1095
0d204                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
0d204     08 4E 05 F1 | 	add	fp, #8
0d208     A7 1E 02 FB | 	rdlong	local01, fp
0d20c     08 4E 85 F1 | 	sub	fp, #8
0d210     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d214     14 4E 05 A1 |  if_e	add	fp, #20
0d218     A7 22 02 AB |  if_e	rdlong	local03, fp
0d21c     14 4E 85 A1 |  if_e	sub	fp, #20
0d220     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d224     24 00 90 5D |  if_ne	jmp	#LR__1096
0d228     00 1E 06 F6 | 	mov	local01, #0
0d22c     A7 20 02 FB | 	rdlong	local02, fp
0d230     0C 4E 05 F1 | 	add	fp, #12
0d234     A7 22 02 FB | 	rdlong	local03, fp
0d238     0C 4E 85 F1 | 	sub	fp, #12
0d23c     11 21 5A F2 | 	cmps	local02, local03 wcz
0d240     01 1E 66 16 |  if_a	neg	local01, #1
0d244     A7 1E 62 FC | 	wrlong	local01, fp
0d248     EC 00 90 FD | 	jmp	#LR__1100
0d24c                 | LR__1096
0d24c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
0d24c     08 4E 05 F1 | 	add	fp, #8
0d250     A7 1E 02 FB | 	rdlong	local01, fp
0d254     08 4E 85 F1 | 	sub	fp, #8
0d258     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d25c     14 4E 05 A1 |  if_e	add	fp, #20
0d260     A7 22 02 AB |  if_e	rdlong	local03, fp
0d264     14 4E 85 A1 |  if_e	sub	fp, #20
0d268     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d26c     34 00 90 5D |  if_ne	jmp	#LR__1097
0d270     00 1E 06 F6 | 	mov	local01, #0
0d274     A7 12 02 FB | 	rdlong	arg01, fp
0d278     B0 AE B0 FD | 	call	#__system___float_fromuns
0d27c     FD 12 02 F6 | 	mov	arg01, result1
0d280     0C 4E 05 F1 | 	add	fp, #12
0d284     A7 14 02 FB | 	rdlong	arg02, fp
0d288     0C 4E 85 F1 | 	sub	fp, #12
0d28c     01 16 66 F6 | 	neg	arg03, #1
0d290     F8 B5 B0 FD | 	call	#__system___float_cmp
0d294     01 FA 55 F2 | 	cmps	result1, #1 wc
0d298     00 1E 26 36 |  if_ae	not	local01, #0
0d29c     A7 1E 62 FC | 	wrlong	local01, fp
0d2a0     94 00 90 FD | 	jmp	#LR__1100
0d2a4                 | LR__1097
0d2a4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
0d2a4     08 4E 05 F1 | 	add	fp, #8
0d2a8     A7 1E 02 FB | 	rdlong	local01, fp
0d2ac     08 4E 85 F1 | 	sub	fp, #8
0d2b0     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d2b4     14 4E 05 A1 |  if_e	add	fp, #20
0d2b8     A7 22 02 AB |  if_e	rdlong	local03, fp
0d2bc     14 4E 85 A1 |  if_e	sub	fp, #20
0d2c0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d2c4     24 00 90 5D |  if_ne	jmp	#LR__1098
0d2c8     00 1E 06 F6 | 	mov	local01, #0
0d2cc     A7 20 02 FB | 	rdlong	local02, fp
0d2d0     0C 4E 05 F1 | 	add	fp, #12
0d2d4     A7 22 02 FB | 	rdlong	local03, fp
0d2d8     0C 4E 85 F1 | 	sub	fp, #12
0d2dc     11 21 5A F2 | 	cmps	local02, local03 wcz
0d2e0     01 1E 66 16 |  if_a	neg	local01, #1
0d2e4     A7 1E 62 FC | 	wrlong	local01, fp
0d2e8     4C 00 90 FD | 	jmp	#LR__1100
0d2ec                 | LR__1098
0d2ec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
0d2ec     08 4E 05 F1 | 	add	fp, #8
0d2f0     A7 1E 02 FB | 	rdlong	local01, fp
0d2f4     08 4E 85 F1 | 	sub	fp, #8
0d2f8     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d2fc     14 4E 05 A1 |  if_e	add	fp, #20
0d300     A7 22 02 AB |  if_e	rdlong	local03, fp
0d304     14 4E 85 A1 |  if_e	sub	fp, #20
0d308     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d30c     24 00 90 5D |  if_ne	jmp	#LR__1099
0d310     00 1E 06 F6 | 	mov	local01, #0
0d314     A7 20 02 FB | 	rdlong	local02, fp
0d318     0C 4E 05 F1 | 	add	fp, #12
0d31c     A7 22 02 FB | 	rdlong	local03, fp
0d320     0C 4E 85 F1 | 	sub	fp, #12
0d324     11 21 1A F2 | 	cmp	local02, local03 wcz
0d328     01 1E 66 16 |  if_a	neg	local01, #1
0d32c     A7 1E 62 FC | 	wrlong	local01, fp
0d330     04 00 90 FD | 	jmp	#LR__1100
0d334                 | LR__1099
0d334     A7 00 68 FC | 	wrlong	#0, fp
0d338                 | LR__1100
0d338     08 4E 05 F1 | 	add	fp, #8
0d33c     A7 38 68 FC | 	wrlong	#28, fp
0d340     08 4E 85 F1 | 	sub	fp, #8
0d344     A7 12 02 F6 | 	mov	arg01, fp
0d348     5C B8 BF FD | 	call	#_push
0d34c     A7 F0 03 F6 | 	mov	ptra, fp
0d350     B2 00 A0 FD | 	call	#popregs_
0d354                 | _do_gt_ret
0d354     2D 00 64 FD | 	ret
0d358                 | 
0d358                 | ' 
0d358                 | ' sub do_lt
0d358                 | _do_lt
0d358     05 4A 05 F6 | 	mov	COUNT_, #5
0d35c     A8 00 A0 FD | 	call	#pushregs_
0d360     18 F0 07 F1 | 	add	ptra, #24
0d364     A8 B7 BF FD | 	call	#_pop
0d368     FD 1E 02 F6 | 	mov	local01, result1
0d36c     FE 20 02 F6 | 	mov	local02, result2
0d370     FF 22 02 F6 | 	mov	local03, result3
0d374     0C 4E 05 F1 | 	add	fp, #12
0d378     A7 1E 62 FC | 	wrlong	local01, fp
0d37c     04 4E 05 F1 | 	add	fp, #4
0d380     A7 20 62 FC | 	wrlong	local02, fp
0d384     04 4E 05 F1 | 	add	fp, #4
0d388     A7 22 62 FC | 	wrlong	local03, fp
0d38c     14 4E 85 F1 | 	sub	fp, #20
0d390     7C B7 BF FD | 	call	#_pop
0d394     FF 22 02 F6 | 	mov	local03, result3
0d398     A7 FA 61 FC | 	wrlong	result1, fp
0d39c     04 4E 05 F1 | 	add	fp, #4
0d3a0     A7 FC 61 FC | 	wrlong	result2, fp
0d3a4     04 4E 05 F1 | 	add	fp, #4
0d3a8     A7 22 62 FC | 	wrlong	local03, fp
0d3ac                 | ' t2=pop()
0d3ac                 | ' t1=pop()
0d3ac                 | ' 
0d3ac                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
0d3ac     08 4E 85 F1 | 	sub	fp, #8
0d3b0     1F 22 0E F2 | 	cmp	local03, #31 wz
0d3b4     14 4E 05 A1 |  if_e	add	fp, #20
0d3b8     A7 24 02 AB |  if_e	rdlong	local04, fp
0d3bc     14 4E 85 A1 |  if_e	sub	fp, #20
0d3c0     12 23 02 A6 |  if_e	mov	local03, local04
0d3c4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0d3c8     28 00 90 5D |  if_ne	jmp	#LR__1110
0d3cc     00 1E 06 F6 | 	mov	local01, #0
0d3d0     A7 12 02 FB | 	rdlong	arg01, fp
0d3d4     0C 4E 05 F1 | 	add	fp, #12
0d3d8     A7 14 02 FB | 	rdlong	arg02, fp
0d3dc     0C 4E 85 F1 | 	sub	fp, #12
0d3e0     8C 87 B0 FD | 	call	#__system___string_cmp
0d3e4     00 FA 55 F2 | 	cmps	result1, #0 wc
0d3e8     00 1E 26 C6 |  if_b	not	local01, #0
0d3ec     A7 1E 62 FC | 	wrlong	local01, fp
0d3f0     F4 02 90 FD | 	jmp	#LR__1120
0d3f4                 | LR__1110
0d3f4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
0d3f4     08 4E 05 F1 | 	add	fp, #8
0d3f8     A7 1E 02 FB | 	rdlong	local01, fp
0d3fc     08 4E 85 F1 | 	sub	fp, #8
0d400     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d404     14 4E 05 A1 |  if_e	add	fp, #20
0d408     A7 24 02 AB |  if_e	rdlong	local04, fp
0d40c     14 4E 85 A1 |  if_e	sub	fp, #20
0d410     12 23 02 A6 |  if_e	mov	local03, local04
0d414     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d418     2C 00 90 5D |  if_ne	jmp	#LR__1111
0d41c     00 1E 06 F6 | 	mov	local01, #0
0d420     A7 12 02 FB | 	rdlong	arg01, fp
0d424     0C 4E 05 F1 | 	add	fp, #12
0d428     A7 14 02 FB | 	rdlong	arg02, fp
0d42c     0C 4E 85 F1 | 	sub	fp, #12
0d430     01 16 06 F6 | 	mov	arg03, #1
0d434     54 B4 B0 FD | 	call	#__system___float_cmp
0d438     00 FA 55 F2 | 	cmps	result1, #0 wc
0d43c     00 1E 26 C6 |  if_b	not	local01, #0
0d440     A7 1E 62 FC | 	wrlong	local01, fp
0d444     A0 02 90 FD | 	jmp	#LR__1120
0d448                 | LR__1111
0d448                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
0d448     08 4E 05 F1 | 	add	fp, #8
0d44c     A7 1E 02 FB | 	rdlong	local01, fp
0d450     08 4E 85 F1 | 	sub	fp, #8
0d454     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d458     14 4E 05 A1 |  if_e	add	fp, #20
0d45c     A7 24 02 AB |  if_e	rdlong	local04, fp
0d460     14 4E 85 A1 |  if_e	sub	fp, #20
0d464     12 23 02 A6 |  if_e	mov	local03, local04
0d468     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d46c     48 00 90 5D |  if_ne	jmp	#LR__1112
0d470     00 1E 06 F6 | 	mov	local01, #0
0d474     A7 20 02 FB | 	rdlong	local02, fp
0d478     0C 4E 05 F1 | 	add	fp, #12
0d47c     A7 12 02 FB | 	rdlong	arg01, fp
0d480     0C 4E 85 F1 | 	sub	fp, #12
0d484     09 13 52 F6 | 	abs	arg01, arg01 wc
0d488     1F 26 C6 C9 |  if_b	decod	local05, #31
0d48c     00 26 06 36 |  if_ae	mov	local05, #0
0d490     98 AC B0 FD | 	call	#__system___float_fromuns
0d494     13 FB 61 F5 | 	xor	result1, local05
0d498     FD 14 02 F6 | 	mov	arg02, result1
0d49c     10 13 02 F6 | 	mov	arg01, local02
0d4a0     01 16 06 F6 | 	mov	arg03, #1
0d4a4     E4 B3 B0 FD | 	call	#__system___float_cmp
0d4a8     00 FA 55 F2 | 	cmps	result1, #0 wc
0d4ac     00 1E 26 C6 |  if_b	not	local01, #0
0d4b0     A7 1E 62 FC | 	wrlong	local01, fp
0d4b4     30 02 90 FD | 	jmp	#LR__1120
0d4b8                 | LR__1112
0d4b8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
0d4b8     08 4E 05 F1 | 	add	fp, #8
0d4bc     A7 1E 02 FB | 	rdlong	local01, fp
0d4c0     08 4E 85 F1 | 	sub	fp, #8
0d4c4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d4c8     14 4E 05 A1 |  if_e	add	fp, #20
0d4cc     A7 24 02 AB |  if_e	rdlong	local04, fp
0d4d0     14 4E 85 A1 |  if_e	sub	fp, #20
0d4d4     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0d4d8     38 00 90 5D |  if_ne	jmp	#LR__1113
0d4dc     00 1E 06 F6 | 	mov	local01, #0
0d4e0     A7 20 02 FB | 	rdlong	local02, fp
0d4e4     0C 4E 05 F1 | 	add	fp, #12
0d4e8     A7 12 02 FB | 	rdlong	arg01, fp
0d4ec     0C 4E 85 F1 | 	sub	fp, #12
0d4f0     38 AC B0 FD | 	call	#__system___float_fromuns
0d4f4     FD 14 02 F6 | 	mov	arg02, result1
0d4f8     10 13 02 F6 | 	mov	arg01, local02
0d4fc     01 16 06 F6 | 	mov	arg03, #1
0d500     88 B3 B0 FD | 	call	#__system___float_cmp
0d504     00 FA 55 F2 | 	cmps	result1, #0 wc
0d508     00 1E 26 C6 |  if_b	not	local01, #0
0d50c     A7 1E 62 FC | 	wrlong	local01, fp
0d510     D4 01 90 FD | 	jmp	#LR__1120
0d514                 | LR__1113
0d514                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
0d514     08 4E 05 F1 | 	add	fp, #8
0d518     A7 1E 02 FB | 	rdlong	local01, fp
0d51c     08 4E 85 F1 | 	sub	fp, #8
0d520     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d524     14 4E 05 A1 |  if_e	add	fp, #20
0d528     A7 22 02 AB |  if_e	rdlong	local03, fp
0d52c     14 4E 85 A1 |  if_e	sub	fp, #20
0d530     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d534     44 00 90 5D |  if_ne	jmp	#LR__1114
0d538     00 1E 06 F6 | 	mov	local01, #0
0d53c     A7 12 02 FB | 	rdlong	arg01, fp
0d540     09 13 52 F6 | 	abs	arg01, arg01 wc
0d544     1F 26 C6 C9 |  if_b	decod	local05, #31
0d548     00 26 06 36 |  if_ae	mov	local05, #0
0d54c     DC AB B0 FD | 	call	#__system___float_fromuns
0d550     13 FB 61 F5 | 	xor	result1, local05
0d554     FD 12 02 F6 | 	mov	arg01, result1
0d558     0C 4E 05 F1 | 	add	fp, #12
0d55c     A7 14 02 FB | 	rdlong	arg02, fp
0d560     0C 4E 85 F1 | 	sub	fp, #12
0d564     01 16 06 F6 | 	mov	arg03, #1
0d568     20 B3 B0 FD | 	call	#__system___float_cmp
0d56c     00 FA 55 F2 | 	cmps	result1, #0 wc
0d570     00 1E 26 C6 |  if_b	not	local01, #0
0d574     A7 1E 62 FC | 	wrlong	local01, fp
0d578     6C 01 90 FD | 	jmp	#LR__1120
0d57c                 | LR__1114
0d57c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
0d57c     08 4E 05 F1 | 	add	fp, #8
0d580     A7 1E 02 FB | 	rdlong	local01, fp
0d584     08 4E 85 F1 | 	sub	fp, #8
0d588     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d58c     14 4E 05 A1 |  if_e	add	fp, #20
0d590     A7 22 02 AB |  if_e	rdlong	local03, fp
0d594     14 4E 85 A1 |  if_e	sub	fp, #20
0d598     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d59c     20 00 90 5D |  if_ne	jmp	#LR__1115
0d5a0     A7 20 02 FB | 	rdlong	local02, fp
0d5a4     0C 4E 05 F1 | 	add	fp, #12
0d5a8     A7 22 02 FB | 	rdlong	local03, fp
0d5ac     0C 4E 85 F1 | 	sub	fp, #12
0d5b0     11 21 52 F2 | 	cmps	local02, local03 wc
0d5b4     0F 1F A2 F1 | 	subx	local01, local01
0d5b8     A7 1E 62 FC | 	wrlong	local01, fp
0d5bc     28 01 90 FD | 	jmp	#LR__1120
0d5c0                 | LR__1115
0d5c0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
0d5c0     08 4E 05 F1 | 	add	fp, #8
0d5c4     A7 1E 02 FB | 	rdlong	local01, fp
0d5c8     08 4E 85 F1 | 	sub	fp, #8
0d5cc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d5d0     14 4E 05 A1 |  if_e	add	fp, #20
0d5d4     A7 22 02 AB |  if_e	rdlong	local03, fp
0d5d8     14 4E 85 A1 |  if_e	sub	fp, #20
0d5dc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d5e0     20 00 90 5D |  if_ne	jmp	#LR__1116
0d5e4     A7 20 02 FB | 	rdlong	local02, fp
0d5e8     0C 4E 05 F1 | 	add	fp, #12
0d5ec     A7 22 02 FB | 	rdlong	local03, fp
0d5f0     0C 4E 85 F1 | 	sub	fp, #12
0d5f4     11 21 52 F2 | 	cmps	local02, local03 wc
0d5f8     0F 1F A2 F1 | 	subx	local01, local01
0d5fc     A7 1E 62 FC | 	wrlong	local01, fp
0d600     E4 00 90 FD | 	jmp	#LR__1120
0d604                 | LR__1116
0d604                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
0d604     08 4E 05 F1 | 	add	fp, #8
0d608     A7 1E 02 FB | 	rdlong	local01, fp
0d60c     08 4E 85 F1 | 	sub	fp, #8
0d610     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d614     14 4E 05 A1 |  if_e	add	fp, #20
0d618     A7 22 02 AB |  if_e	rdlong	local03, fp
0d61c     14 4E 85 A1 |  if_e	sub	fp, #20
0d620     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d624     34 00 90 5D |  if_ne	jmp	#LR__1117
0d628     00 1E 06 F6 | 	mov	local01, #0
0d62c     A7 12 02 FB | 	rdlong	arg01, fp
0d630     F8 AA B0 FD | 	call	#__system___float_fromuns
0d634     FD 12 02 F6 | 	mov	arg01, result1
0d638     0C 4E 05 F1 | 	add	fp, #12
0d63c     A7 14 02 FB | 	rdlong	arg02, fp
0d640     0C 4E 85 F1 | 	sub	fp, #12
0d644     01 16 06 F6 | 	mov	arg03, #1
0d648     40 B2 B0 FD | 	call	#__system___float_cmp
0d64c     00 FA 55 F2 | 	cmps	result1, #0 wc
0d650     00 1E 26 C6 |  if_b	not	local01, #0
0d654     A7 1E 62 FC | 	wrlong	local01, fp
0d658     8C 00 90 FD | 	jmp	#LR__1120
0d65c                 | LR__1117
0d65c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
0d65c     08 4E 05 F1 | 	add	fp, #8
0d660     A7 1E 02 FB | 	rdlong	local01, fp
0d664     08 4E 85 F1 | 	sub	fp, #8
0d668     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d66c     14 4E 05 A1 |  if_e	add	fp, #20
0d670     A7 22 02 AB |  if_e	rdlong	local03, fp
0d674     14 4E 85 A1 |  if_e	sub	fp, #20
0d678     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d67c     20 00 90 5D |  if_ne	jmp	#LR__1118
0d680     A7 20 02 FB | 	rdlong	local02, fp
0d684     0C 4E 05 F1 | 	add	fp, #12
0d688     A7 22 02 FB | 	rdlong	local03, fp
0d68c     0C 4E 85 F1 | 	sub	fp, #12
0d690     11 21 52 F2 | 	cmps	local02, local03 wc
0d694     0F 1F A2 F1 | 	subx	local01, local01
0d698     A7 1E 62 FC | 	wrlong	local01, fp
0d69c     48 00 90 FD | 	jmp	#LR__1120
0d6a0                 | LR__1118
0d6a0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
0d6a0     08 4E 05 F1 | 	add	fp, #8
0d6a4     A7 1E 02 FB | 	rdlong	local01, fp
0d6a8     08 4E 85 F1 | 	sub	fp, #8
0d6ac     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d6b0     14 4E 05 A1 |  if_e	add	fp, #20
0d6b4     A7 22 02 AB |  if_e	rdlong	local03, fp
0d6b8     14 4E 85 A1 |  if_e	sub	fp, #20
0d6bc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d6c0     20 00 90 5D |  if_ne	jmp	#LR__1119
0d6c4     A7 20 02 FB | 	rdlong	local02, fp
0d6c8     0C 4E 05 F1 | 	add	fp, #12
0d6cc     A7 22 02 FB | 	rdlong	local03, fp
0d6d0     0C 4E 85 F1 | 	sub	fp, #12
0d6d4     11 21 12 F2 | 	cmp	local02, local03 wc
0d6d8     0F 1F A2 F1 | 	subx	local01, local01
0d6dc     A7 1E 62 FC | 	wrlong	local01, fp
0d6e0     04 00 90 FD | 	jmp	#LR__1120
0d6e4                 | LR__1119
0d6e4     A7 00 68 FC | 	wrlong	#0, fp
0d6e8                 | LR__1120
0d6e8     08 4E 05 F1 | 	add	fp, #8
0d6ec     A7 38 68 FC | 	wrlong	#28, fp
0d6f0     08 4E 85 F1 | 	sub	fp, #8
0d6f4     A7 12 02 F6 | 	mov	arg01, fp
0d6f8     AC B4 BF FD | 	call	#_push
0d6fc     A7 F0 03 F6 | 	mov	ptra, fp
0d700     B2 00 A0 FD | 	call	#popregs_
0d704                 | _do_lt_ret
0d704     2D 00 64 FD | 	ret
0d708                 | 
0d708                 | ' 
0d708                 | ' sub do_ge
0d708                 | _do_ge
0d708     05 4A 05 F6 | 	mov	COUNT_, #5
0d70c     A8 00 A0 FD | 	call	#pushregs_
0d710     18 F0 07 F1 | 	add	ptra, #24
0d714     F8 B3 BF FD | 	call	#_pop
0d718     FD 1E 02 F6 | 	mov	local01, result1
0d71c     FE 20 02 F6 | 	mov	local02, result2
0d720     FF 22 02 F6 | 	mov	local03, result3
0d724     0C 4E 05 F1 | 	add	fp, #12
0d728     A7 1E 62 FC | 	wrlong	local01, fp
0d72c     04 4E 05 F1 | 	add	fp, #4
0d730     A7 20 62 FC | 	wrlong	local02, fp
0d734     04 4E 05 F1 | 	add	fp, #4
0d738     A7 22 62 FC | 	wrlong	local03, fp
0d73c     14 4E 85 F1 | 	sub	fp, #20
0d740     CC B3 BF FD | 	call	#_pop
0d744     FF 22 02 F6 | 	mov	local03, result3
0d748     A7 FA 61 FC | 	wrlong	result1, fp
0d74c     04 4E 05 F1 | 	add	fp, #4
0d750     A7 FC 61 FC | 	wrlong	result2, fp
0d754     04 4E 05 F1 | 	add	fp, #4
0d758     A7 22 62 FC | 	wrlong	local03, fp
0d75c                 | ' t2=pop()
0d75c                 | ' t1=pop()
0d75c                 | ' 
0d75c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
0d75c     08 4E 85 F1 | 	sub	fp, #8
0d760     1F 22 0E F2 | 	cmp	local03, #31 wz
0d764     14 4E 05 A1 |  if_e	add	fp, #20
0d768     A7 24 02 AB |  if_e	rdlong	local04, fp
0d76c     14 4E 85 A1 |  if_e	sub	fp, #20
0d770     12 23 02 A6 |  if_e	mov	local03, local04
0d774     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0d778     28 00 90 5D |  if_ne	jmp	#LR__1130
0d77c     00 1E 06 F6 | 	mov	local01, #0
0d780     A7 12 02 FB | 	rdlong	arg01, fp
0d784     0C 4E 05 F1 | 	add	fp, #12
0d788     A7 14 02 FB | 	rdlong	arg02, fp
0d78c     0C 4E 85 F1 | 	sub	fp, #12
0d790     DC 83 B0 FD | 	call	#__system___string_cmp
0d794     00 FA 55 F2 | 	cmps	result1, #0 wc
0d798     00 1E 26 36 |  if_ae	not	local01, #0
0d79c     A7 1E 62 FC | 	wrlong	local01, fp
0d7a0     04 03 90 FD | 	jmp	#LR__1140
0d7a4                 | LR__1130
0d7a4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
0d7a4     08 4E 05 F1 | 	add	fp, #8
0d7a8     A7 1E 02 FB | 	rdlong	local01, fp
0d7ac     08 4E 85 F1 | 	sub	fp, #8
0d7b0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d7b4     14 4E 05 A1 |  if_e	add	fp, #20
0d7b8     A7 24 02 AB |  if_e	rdlong	local04, fp
0d7bc     14 4E 85 A1 |  if_e	sub	fp, #20
0d7c0     12 23 02 A6 |  if_e	mov	local03, local04
0d7c4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d7c8     2C 00 90 5D |  if_ne	jmp	#LR__1131
0d7cc     00 1E 06 F6 | 	mov	local01, #0
0d7d0     A7 12 02 FB | 	rdlong	arg01, fp
0d7d4     0C 4E 05 F1 | 	add	fp, #12
0d7d8     A7 14 02 FB | 	rdlong	arg02, fp
0d7dc     0C 4E 85 F1 | 	sub	fp, #12
0d7e0     01 16 66 F6 | 	neg	arg03, #1
0d7e4     A4 B0 B0 FD | 	call	#__system___float_cmp
0d7e8     00 FA 55 F2 | 	cmps	result1, #0 wc
0d7ec     00 1E 26 36 |  if_ae	not	local01, #0
0d7f0     A7 1E 62 FC | 	wrlong	local01, fp
0d7f4     B0 02 90 FD | 	jmp	#LR__1140
0d7f8                 | LR__1131
0d7f8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
0d7f8     08 4E 05 F1 | 	add	fp, #8
0d7fc     A7 1E 02 FB | 	rdlong	local01, fp
0d800     08 4E 85 F1 | 	sub	fp, #8
0d804     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d808     14 4E 05 A1 |  if_e	add	fp, #20
0d80c     A7 24 02 AB |  if_e	rdlong	local04, fp
0d810     14 4E 85 A1 |  if_e	sub	fp, #20
0d814     12 23 02 A6 |  if_e	mov	local03, local04
0d818     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d81c     48 00 90 5D |  if_ne	jmp	#LR__1132
0d820     00 1E 06 F6 | 	mov	local01, #0
0d824     A7 20 02 FB | 	rdlong	local02, fp
0d828     0C 4E 05 F1 | 	add	fp, #12
0d82c     A7 12 02 FB | 	rdlong	arg01, fp
0d830     0C 4E 85 F1 | 	sub	fp, #12
0d834     09 13 52 F6 | 	abs	arg01, arg01 wc
0d838     1F 26 C6 C9 |  if_b	decod	local05, #31
0d83c     00 26 06 36 |  if_ae	mov	local05, #0
0d840     E8 A8 B0 FD | 	call	#__system___float_fromuns
0d844     13 FB 61 F5 | 	xor	result1, local05
0d848     FD 14 02 F6 | 	mov	arg02, result1
0d84c     10 13 02 F6 | 	mov	arg01, local02
0d850     01 16 66 F6 | 	neg	arg03, #1
0d854     34 B0 B0 FD | 	call	#__system___float_cmp
0d858     00 FA 55 F2 | 	cmps	result1, #0 wc
0d85c     00 1E 26 36 |  if_ae	not	local01, #0
0d860     A7 1E 62 FC | 	wrlong	local01, fp
0d864     40 02 90 FD | 	jmp	#LR__1140
0d868                 | LR__1132
0d868                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
0d868     08 4E 05 F1 | 	add	fp, #8
0d86c     A7 1E 02 FB | 	rdlong	local01, fp
0d870     08 4E 85 F1 | 	sub	fp, #8
0d874     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d878     14 4E 05 A1 |  if_e	add	fp, #20
0d87c     A7 24 02 AB |  if_e	rdlong	local04, fp
0d880     14 4E 85 A1 |  if_e	sub	fp, #20
0d884     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0d888     38 00 90 5D |  if_ne	jmp	#LR__1133
0d88c     00 1E 06 F6 | 	mov	local01, #0
0d890     A7 20 02 FB | 	rdlong	local02, fp
0d894     0C 4E 05 F1 | 	add	fp, #12
0d898     A7 12 02 FB | 	rdlong	arg01, fp
0d89c     0C 4E 85 F1 | 	sub	fp, #12
0d8a0     88 A8 B0 FD | 	call	#__system___float_fromuns
0d8a4     FD 14 02 F6 | 	mov	arg02, result1
0d8a8     10 13 02 F6 | 	mov	arg01, local02
0d8ac     01 16 66 F6 | 	neg	arg03, #1
0d8b0     D8 AF B0 FD | 	call	#__system___float_cmp
0d8b4     00 FA 55 F2 | 	cmps	result1, #0 wc
0d8b8     00 1E 26 36 |  if_ae	not	local01, #0
0d8bc     A7 1E 62 FC | 	wrlong	local01, fp
0d8c0     E4 01 90 FD | 	jmp	#LR__1140
0d8c4                 | LR__1133
0d8c4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
0d8c4     08 4E 05 F1 | 	add	fp, #8
0d8c8     A7 1E 02 FB | 	rdlong	local01, fp
0d8cc     08 4E 85 F1 | 	sub	fp, #8
0d8d0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d8d4     14 4E 05 A1 |  if_e	add	fp, #20
0d8d8     A7 22 02 AB |  if_e	rdlong	local03, fp
0d8dc     14 4E 85 A1 |  if_e	sub	fp, #20
0d8e0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d8e4     44 00 90 5D |  if_ne	jmp	#LR__1134
0d8e8     00 1E 06 F6 | 	mov	local01, #0
0d8ec     A7 12 02 FB | 	rdlong	arg01, fp
0d8f0     09 13 52 F6 | 	abs	arg01, arg01 wc
0d8f4     1F 26 C6 C9 |  if_b	decod	local05, #31
0d8f8     00 26 06 36 |  if_ae	mov	local05, #0
0d8fc     2C A8 B0 FD | 	call	#__system___float_fromuns
0d900     13 FB 61 F5 | 	xor	result1, local05
0d904     FD 12 02 F6 | 	mov	arg01, result1
0d908     0C 4E 05 F1 | 	add	fp, #12
0d90c     A7 14 02 FB | 	rdlong	arg02, fp
0d910     0C 4E 85 F1 | 	sub	fp, #12
0d914     01 16 66 F6 | 	neg	arg03, #1
0d918     70 AF B0 FD | 	call	#__system___float_cmp
0d91c     00 FA 55 F2 | 	cmps	result1, #0 wc
0d920     00 1E 26 36 |  if_ae	not	local01, #0
0d924     A7 1E 62 FC | 	wrlong	local01, fp
0d928     7C 01 90 FD | 	jmp	#LR__1140
0d92c                 | LR__1134
0d92c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
0d92c     08 4E 05 F1 | 	add	fp, #8
0d930     A7 1E 02 FB | 	rdlong	local01, fp
0d934     08 4E 85 F1 | 	sub	fp, #8
0d938     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d93c     14 4E 05 A1 |  if_e	add	fp, #20
0d940     A7 22 02 AB |  if_e	rdlong	local03, fp
0d944     14 4E 85 A1 |  if_e	sub	fp, #20
0d948     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d94c     24 00 90 5D |  if_ne	jmp	#LR__1135
0d950     00 1E 06 F6 | 	mov	local01, #0
0d954     A7 20 02 FB | 	rdlong	local02, fp
0d958     0C 4E 05 F1 | 	add	fp, #12
0d95c     A7 22 02 FB | 	rdlong	local03, fp
0d960     0C 4E 85 F1 | 	sub	fp, #12
0d964     11 21 52 F2 | 	cmps	local02, local03 wc
0d968     01 1E 66 36 |  if_ae	neg	local01, #1
0d96c     A7 1E 62 FC | 	wrlong	local01, fp
0d970     34 01 90 FD | 	jmp	#LR__1140
0d974                 | LR__1135
0d974                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
0d974     08 4E 05 F1 | 	add	fp, #8
0d978     A7 1E 02 FB | 	rdlong	local01, fp
0d97c     08 4E 85 F1 | 	sub	fp, #8
0d980     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d984     14 4E 05 A1 |  if_e	add	fp, #20
0d988     A7 22 02 AB |  if_e	rdlong	local03, fp
0d98c     14 4E 85 A1 |  if_e	sub	fp, #20
0d990     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d994     24 00 90 5D |  if_ne	jmp	#LR__1136
0d998     00 1E 06 F6 | 	mov	local01, #0
0d99c     A7 20 02 FB | 	rdlong	local02, fp
0d9a0     0C 4E 05 F1 | 	add	fp, #12
0d9a4     A7 22 02 FB | 	rdlong	local03, fp
0d9a8     0C 4E 85 F1 | 	sub	fp, #12
0d9ac     11 21 52 F2 | 	cmps	local02, local03 wc
0d9b0     01 1E 66 36 |  if_ae	neg	local01, #1
0d9b4     A7 1E 62 FC | 	wrlong	local01, fp
0d9b8     EC 00 90 FD | 	jmp	#LR__1140
0d9bc                 | LR__1136
0d9bc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
0d9bc     08 4E 05 F1 | 	add	fp, #8
0d9c0     A7 1E 02 FB | 	rdlong	local01, fp
0d9c4     08 4E 85 F1 | 	sub	fp, #8
0d9c8     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d9cc     14 4E 05 A1 |  if_e	add	fp, #20
0d9d0     A7 22 02 AB |  if_e	rdlong	local03, fp
0d9d4     14 4E 85 A1 |  if_e	sub	fp, #20
0d9d8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d9dc     34 00 90 5D |  if_ne	jmp	#LR__1137
0d9e0     00 1E 06 F6 | 	mov	local01, #0
0d9e4     A7 12 02 FB | 	rdlong	arg01, fp
0d9e8     40 A7 B0 FD | 	call	#__system___float_fromuns
0d9ec     FD 12 02 F6 | 	mov	arg01, result1
0d9f0     0C 4E 05 F1 | 	add	fp, #12
0d9f4     A7 14 02 FB | 	rdlong	arg02, fp
0d9f8     0C 4E 85 F1 | 	sub	fp, #12
0d9fc     01 16 66 F6 | 	neg	arg03, #1
0da00     88 AE B0 FD | 	call	#__system___float_cmp
0da04     00 FA 55 F2 | 	cmps	result1, #0 wc
0da08     00 1E 26 36 |  if_ae	not	local01, #0
0da0c     A7 1E 62 FC | 	wrlong	local01, fp
0da10     94 00 90 FD | 	jmp	#LR__1140
0da14                 | LR__1137
0da14                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
0da14     08 4E 05 F1 | 	add	fp, #8
0da18     A7 1E 02 FB | 	rdlong	local01, fp
0da1c     08 4E 85 F1 | 	sub	fp, #8
0da20     1D 1E 0E F2 | 	cmp	local01, #29 wz
0da24     14 4E 05 A1 |  if_e	add	fp, #20
0da28     A7 22 02 AB |  if_e	rdlong	local03, fp
0da2c     14 4E 85 A1 |  if_e	sub	fp, #20
0da30     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0da34     24 00 90 5D |  if_ne	jmp	#LR__1138
0da38     00 1E 06 F6 | 	mov	local01, #0
0da3c     A7 20 02 FB | 	rdlong	local02, fp
0da40     0C 4E 05 F1 | 	add	fp, #12
0da44     A7 22 02 FB | 	rdlong	local03, fp
0da48     0C 4E 85 F1 | 	sub	fp, #12
0da4c     11 21 52 F2 | 	cmps	local02, local03 wc
0da50     01 1E 66 36 |  if_ae	neg	local01, #1
0da54     A7 1E 62 FC | 	wrlong	local01, fp
0da58     4C 00 90 FD | 	jmp	#LR__1140
0da5c                 | LR__1138
0da5c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
0da5c     08 4E 05 F1 | 	add	fp, #8
0da60     A7 1E 02 FB | 	rdlong	local01, fp
0da64     08 4E 85 F1 | 	sub	fp, #8
0da68     1D 1E 0E F2 | 	cmp	local01, #29 wz
0da6c     14 4E 05 A1 |  if_e	add	fp, #20
0da70     A7 22 02 AB |  if_e	rdlong	local03, fp
0da74     14 4E 85 A1 |  if_e	sub	fp, #20
0da78     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0da7c     24 00 90 5D |  if_ne	jmp	#LR__1139
0da80     00 1E 06 F6 | 	mov	local01, #0
0da84     A7 20 02 FB | 	rdlong	local02, fp
0da88     0C 4E 05 F1 | 	add	fp, #12
0da8c     A7 22 02 FB | 	rdlong	local03, fp
0da90     0C 4E 85 F1 | 	sub	fp, #12
0da94     11 21 12 F2 | 	cmp	local02, local03 wc
0da98     01 1E 66 36 |  if_ae	neg	local01, #1
0da9c     A7 1E 62 FC | 	wrlong	local01, fp
0daa0     04 00 90 FD | 	jmp	#LR__1140
0daa4                 | LR__1139
0daa4     A7 00 68 FC | 	wrlong	#0, fp
0daa8                 | LR__1140
0daa8     08 4E 05 F1 | 	add	fp, #8
0daac     A7 38 68 FC | 	wrlong	#28, fp
0dab0     08 4E 85 F1 | 	sub	fp, #8
0dab4     A7 12 02 F6 | 	mov	arg01, fp
0dab8     EC B0 BF FD | 	call	#_push
0dabc     A7 F0 03 F6 | 	mov	ptra, fp
0dac0     B2 00 A0 FD | 	call	#popregs_
0dac4                 | _do_ge_ret
0dac4     2D 00 64 FD | 	ret
0dac8                 | 
0dac8                 | ' 
0dac8                 | ' sub do_le
0dac8                 | _do_le
0dac8     05 4A 05 F6 | 	mov	COUNT_, #5
0dacc     A8 00 A0 FD | 	call	#pushregs_
0dad0     18 F0 07 F1 | 	add	ptra, #24
0dad4     38 B0 BF FD | 	call	#_pop
0dad8     FD 1E 02 F6 | 	mov	local01, result1
0dadc     FE 20 02 F6 | 	mov	local02, result2
0dae0     FF 22 02 F6 | 	mov	local03, result3
0dae4     0C 4E 05 F1 | 	add	fp, #12
0dae8     A7 1E 62 FC | 	wrlong	local01, fp
0daec     04 4E 05 F1 | 	add	fp, #4
0daf0     A7 20 62 FC | 	wrlong	local02, fp
0daf4     04 4E 05 F1 | 	add	fp, #4
0daf8     A7 22 62 FC | 	wrlong	local03, fp
0dafc     14 4E 85 F1 | 	sub	fp, #20
0db00     0C B0 BF FD | 	call	#_pop
0db04     FF 22 02 F6 | 	mov	local03, result3
0db08     A7 FA 61 FC | 	wrlong	result1, fp
0db0c     04 4E 05 F1 | 	add	fp, #4
0db10     A7 FC 61 FC | 	wrlong	result2, fp
0db14     04 4E 05 F1 | 	add	fp, #4
0db18     A7 22 62 FC | 	wrlong	local03, fp
0db1c                 | ' t2=pop()
0db1c                 | ' t1=pop()
0db1c                 | ' 
0db1c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
0db1c     08 4E 85 F1 | 	sub	fp, #8
0db20     1F 22 0E F2 | 	cmp	local03, #31 wz
0db24     14 4E 05 A1 |  if_e	add	fp, #20
0db28     A7 24 02 AB |  if_e	rdlong	local04, fp
0db2c     14 4E 85 A1 |  if_e	sub	fp, #20
0db30     12 23 02 A6 |  if_e	mov	local03, local04
0db34     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0db38     28 00 90 5D |  if_ne	jmp	#LR__1150
0db3c     00 1E 06 F6 | 	mov	local01, #0
0db40     A7 12 02 FB | 	rdlong	arg01, fp
0db44     0C 4E 05 F1 | 	add	fp, #12
0db48     A7 14 02 FB | 	rdlong	arg02, fp
0db4c     0C 4E 85 F1 | 	sub	fp, #12
0db50     1C 80 B0 FD | 	call	#__system___string_cmp
0db54     01 FA 55 F2 | 	cmps	result1, #1 wc
0db58     00 1E 26 C6 |  if_b	not	local01, #0
0db5c     A7 1E 62 FC | 	wrlong	local01, fp
0db60     04 03 90 FD | 	jmp	#LR__1160
0db64                 | LR__1150
0db64                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
0db64     08 4E 05 F1 | 	add	fp, #8
0db68     A7 1E 02 FB | 	rdlong	local01, fp
0db6c     08 4E 85 F1 | 	sub	fp, #8
0db70     1E 1E 0E F2 | 	cmp	local01, #30 wz
0db74     14 4E 05 A1 |  if_e	add	fp, #20
0db78     A7 24 02 AB |  if_e	rdlong	local04, fp
0db7c     14 4E 85 A1 |  if_e	sub	fp, #20
0db80     12 23 02 A6 |  if_e	mov	local03, local04
0db84     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0db88     2C 00 90 5D |  if_ne	jmp	#LR__1151
0db8c     00 1E 06 F6 | 	mov	local01, #0
0db90     A7 12 02 FB | 	rdlong	arg01, fp
0db94     0C 4E 05 F1 | 	add	fp, #12
0db98     A7 14 02 FB | 	rdlong	arg02, fp
0db9c     0C 4E 85 F1 | 	sub	fp, #12
0dba0     01 16 06 F6 | 	mov	arg03, #1
0dba4     E4 AC B0 FD | 	call	#__system___float_cmp
0dba8     01 FA 55 F2 | 	cmps	result1, #1 wc
0dbac     00 1E 26 C6 |  if_b	not	local01, #0
0dbb0     A7 1E 62 FC | 	wrlong	local01, fp
0dbb4     B0 02 90 FD | 	jmp	#LR__1160
0dbb8                 | LR__1151
0dbb8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
0dbb8     08 4E 05 F1 | 	add	fp, #8
0dbbc     A7 1E 02 FB | 	rdlong	local01, fp
0dbc0     08 4E 85 F1 | 	sub	fp, #8
0dbc4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0dbc8     14 4E 05 A1 |  if_e	add	fp, #20
0dbcc     A7 24 02 AB |  if_e	rdlong	local04, fp
0dbd0     14 4E 85 A1 |  if_e	sub	fp, #20
0dbd4     12 23 02 A6 |  if_e	mov	local03, local04
0dbd8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0dbdc     48 00 90 5D |  if_ne	jmp	#LR__1152
0dbe0     00 1E 06 F6 | 	mov	local01, #0
0dbe4     A7 20 02 FB | 	rdlong	local02, fp
0dbe8     0C 4E 05 F1 | 	add	fp, #12
0dbec     A7 12 02 FB | 	rdlong	arg01, fp
0dbf0     0C 4E 85 F1 | 	sub	fp, #12
0dbf4     09 13 52 F6 | 	abs	arg01, arg01 wc
0dbf8     1F 26 C6 C9 |  if_b	decod	local05, #31
0dbfc     00 26 06 36 |  if_ae	mov	local05, #0
0dc00     28 A5 B0 FD | 	call	#__system___float_fromuns
0dc04     13 FB 61 F5 | 	xor	result1, local05
0dc08     FD 14 02 F6 | 	mov	arg02, result1
0dc0c     10 13 02 F6 | 	mov	arg01, local02
0dc10     01 16 06 F6 | 	mov	arg03, #1
0dc14     74 AC B0 FD | 	call	#__system___float_cmp
0dc18     01 FA 55 F2 | 	cmps	result1, #1 wc
0dc1c     00 1E 26 C6 |  if_b	not	local01, #0
0dc20     A7 1E 62 FC | 	wrlong	local01, fp
0dc24     40 02 90 FD | 	jmp	#LR__1160
0dc28                 | LR__1152
0dc28                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
0dc28     08 4E 05 F1 | 	add	fp, #8
0dc2c     A7 1E 02 FB | 	rdlong	local01, fp
0dc30     08 4E 85 F1 | 	sub	fp, #8
0dc34     1E 1E 0E F2 | 	cmp	local01, #30 wz
0dc38     14 4E 05 A1 |  if_e	add	fp, #20
0dc3c     A7 24 02 AB |  if_e	rdlong	local04, fp
0dc40     14 4E 85 A1 |  if_e	sub	fp, #20
0dc44     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0dc48     38 00 90 5D |  if_ne	jmp	#LR__1153
0dc4c     00 1E 06 F6 | 	mov	local01, #0
0dc50     A7 20 02 FB | 	rdlong	local02, fp
0dc54     0C 4E 05 F1 | 	add	fp, #12
0dc58     A7 12 02 FB | 	rdlong	arg01, fp
0dc5c     0C 4E 85 F1 | 	sub	fp, #12
0dc60     C8 A4 B0 FD | 	call	#__system___float_fromuns
0dc64     FD 14 02 F6 | 	mov	arg02, result1
0dc68     10 13 02 F6 | 	mov	arg01, local02
0dc6c     01 16 06 F6 | 	mov	arg03, #1
0dc70     18 AC B0 FD | 	call	#__system___float_cmp
0dc74     01 FA 55 F2 | 	cmps	result1, #1 wc
0dc78     00 1E 26 C6 |  if_b	not	local01, #0
0dc7c     A7 1E 62 FC | 	wrlong	local01, fp
0dc80     E4 01 90 FD | 	jmp	#LR__1160
0dc84                 | LR__1153
0dc84                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
0dc84     08 4E 05 F1 | 	add	fp, #8
0dc88     A7 1E 02 FB | 	rdlong	local01, fp
0dc8c     08 4E 85 F1 | 	sub	fp, #8
0dc90     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dc94     14 4E 05 A1 |  if_e	add	fp, #20
0dc98     A7 22 02 AB |  if_e	rdlong	local03, fp
0dc9c     14 4E 85 A1 |  if_e	sub	fp, #20
0dca0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0dca4     44 00 90 5D |  if_ne	jmp	#LR__1154
0dca8     00 1E 06 F6 | 	mov	local01, #0
0dcac     A7 12 02 FB | 	rdlong	arg01, fp
0dcb0     09 13 52 F6 | 	abs	arg01, arg01 wc
0dcb4     1F 26 C6 C9 |  if_b	decod	local05, #31
0dcb8     00 26 06 36 |  if_ae	mov	local05, #0
0dcbc     6C A4 B0 FD | 	call	#__system___float_fromuns
0dcc0     13 FB 61 F5 | 	xor	result1, local05
0dcc4     FD 12 02 F6 | 	mov	arg01, result1
0dcc8     0C 4E 05 F1 | 	add	fp, #12
0dccc     A7 14 02 FB | 	rdlong	arg02, fp
0dcd0     0C 4E 85 F1 | 	sub	fp, #12
0dcd4     01 16 06 F6 | 	mov	arg03, #1
0dcd8     B0 AB B0 FD | 	call	#__system___float_cmp
0dcdc     01 FA 55 F2 | 	cmps	result1, #1 wc
0dce0     00 1E 26 C6 |  if_b	not	local01, #0
0dce4     A7 1E 62 FC | 	wrlong	local01, fp
0dce8     7C 01 90 FD | 	jmp	#LR__1160
0dcec                 | LR__1154
0dcec                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
0dcec     08 4E 05 F1 | 	add	fp, #8
0dcf0     A7 1E 02 FB | 	rdlong	local01, fp
0dcf4     08 4E 85 F1 | 	sub	fp, #8
0dcf8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dcfc     14 4E 05 A1 |  if_e	add	fp, #20
0dd00     A7 22 02 AB |  if_e	rdlong	local03, fp
0dd04     14 4E 85 A1 |  if_e	sub	fp, #20
0dd08     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0dd0c     24 00 90 5D |  if_ne	jmp	#LR__1155
0dd10     00 1E 06 F6 | 	mov	local01, #0
0dd14     A7 20 02 FB | 	rdlong	local02, fp
0dd18     0C 4E 05 F1 | 	add	fp, #12
0dd1c     A7 22 02 FB | 	rdlong	local03, fp
0dd20     0C 4E 85 F1 | 	sub	fp, #12
0dd24     11 21 5A F2 | 	cmps	local02, local03 wcz
0dd28     01 1E 66 E6 |  if_be	neg	local01, #1
0dd2c     A7 1E 62 FC | 	wrlong	local01, fp
0dd30     34 01 90 FD | 	jmp	#LR__1160
0dd34                 | LR__1155
0dd34                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
0dd34     08 4E 05 F1 | 	add	fp, #8
0dd38     A7 1E 02 FB | 	rdlong	local01, fp
0dd3c     08 4E 85 F1 | 	sub	fp, #8
0dd40     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dd44     14 4E 05 A1 |  if_e	add	fp, #20
0dd48     A7 22 02 AB |  if_e	rdlong	local03, fp
0dd4c     14 4E 85 A1 |  if_e	sub	fp, #20
0dd50     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0dd54     24 00 90 5D |  if_ne	jmp	#LR__1156
0dd58     00 1E 06 F6 | 	mov	local01, #0
0dd5c     A7 20 02 FB | 	rdlong	local02, fp
0dd60     0C 4E 05 F1 | 	add	fp, #12
0dd64     A7 22 02 FB | 	rdlong	local03, fp
0dd68     0C 4E 85 F1 | 	sub	fp, #12
0dd6c     11 21 5A F2 | 	cmps	local02, local03 wcz
0dd70     01 1E 66 E6 |  if_be	neg	local01, #1
0dd74     A7 1E 62 FC | 	wrlong	local01, fp
0dd78     EC 00 90 FD | 	jmp	#LR__1160
0dd7c                 | LR__1156
0dd7c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
0dd7c     08 4E 05 F1 | 	add	fp, #8
0dd80     A7 1E 02 FB | 	rdlong	local01, fp
0dd84     08 4E 85 F1 | 	sub	fp, #8
0dd88     1D 1E 0E F2 | 	cmp	local01, #29 wz
0dd8c     14 4E 05 A1 |  if_e	add	fp, #20
0dd90     A7 22 02 AB |  if_e	rdlong	local03, fp
0dd94     14 4E 85 A1 |  if_e	sub	fp, #20
0dd98     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0dd9c     34 00 90 5D |  if_ne	jmp	#LR__1157
0dda0     00 1E 06 F6 | 	mov	local01, #0
0dda4     A7 12 02 FB | 	rdlong	arg01, fp
0dda8     80 A3 B0 FD | 	call	#__system___float_fromuns
0ddac     FD 12 02 F6 | 	mov	arg01, result1
0ddb0     0C 4E 05 F1 | 	add	fp, #12
0ddb4     A7 14 02 FB | 	rdlong	arg02, fp
0ddb8     0C 4E 85 F1 | 	sub	fp, #12
0ddbc     01 16 06 F6 | 	mov	arg03, #1
0ddc0     C8 AA B0 FD | 	call	#__system___float_cmp
0ddc4     01 FA 55 F2 | 	cmps	result1, #1 wc
0ddc8     00 1E 26 C6 |  if_b	not	local01, #0
0ddcc     A7 1E 62 FC | 	wrlong	local01, fp
0ddd0     94 00 90 FD | 	jmp	#LR__1160
0ddd4                 | LR__1157
0ddd4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
0ddd4     08 4E 05 F1 | 	add	fp, #8
0ddd8     A7 1E 02 FB | 	rdlong	local01, fp
0dddc     08 4E 85 F1 | 	sub	fp, #8
0dde0     1D 1E 0E F2 | 	cmp	local01, #29 wz
0dde4     14 4E 05 A1 |  if_e	add	fp, #20
0dde8     A7 22 02 AB |  if_e	rdlong	local03, fp
0ddec     14 4E 85 A1 |  if_e	sub	fp, #20
0ddf0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ddf4     24 00 90 5D |  if_ne	jmp	#LR__1158
0ddf8     00 1E 06 F6 | 	mov	local01, #0
0ddfc     A7 20 02 FB | 	rdlong	local02, fp
0de00     0C 4E 05 F1 | 	add	fp, #12
0de04     A7 22 02 FB | 	rdlong	local03, fp
0de08     0C 4E 85 F1 | 	sub	fp, #12
0de0c     11 21 5A F2 | 	cmps	local02, local03 wcz
0de10     01 1E 66 E6 |  if_be	neg	local01, #1
0de14     A7 1E 62 FC | 	wrlong	local01, fp
0de18     4C 00 90 FD | 	jmp	#LR__1160
0de1c                 | LR__1158
0de1c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
0de1c     08 4E 05 F1 | 	add	fp, #8
0de20     A7 1E 02 FB | 	rdlong	local01, fp
0de24     08 4E 85 F1 | 	sub	fp, #8
0de28     1D 1E 0E F2 | 	cmp	local01, #29 wz
0de2c     14 4E 05 A1 |  if_e	add	fp, #20
0de30     A7 22 02 AB |  if_e	rdlong	local03, fp
0de34     14 4E 85 A1 |  if_e	sub	fp, #20
0de38     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0de3c     24 00 90 5D |  if_ne	jmp	#LR__1159
0de40     00 1E 06 F6 | 	mov	local01, #0
0de44     A7 20 02 FB | 	rdlong	local02, fp
0de48     0C 4E 05 F1 | 	add	fp, #12
0de4c     A7 22 02 FB | 	rdlong	local03, fp
0de50     0C 4E 85 F1 | 	sub	fp, #12
0de54     11 21 1A F2 | 	cmp	local02, local03 wcz
0de58     01 1E 66 E6 |  if_be	neg	local01, #1
0de5c     A7 1E 62 FC | 	wrlong	local01, fp
0de60     04 00 90 FD | 	jmp	#LR__1160
0de64                 | LR__1159
0de64     A7 00 68 FC | 	wrlong	#0, fp
0de68                 | LR__1160
0de68     08 4E 05 F1 | 	add	fp, #8
0de6c     A7 38 68 FC | 	wrlong	#28, fp
0de70     08 4E 85 F1 | 	sub	fp, #8
0de74     A7 12 02 F6 | 	mov	arg01, fp
0de78     2C AD BF FD | 	call	#_push
0de7c     A7 F0 03 F6 | 	mov	ptra, fp
0de80     B2 00 A0 FD | 	call	#popregs_
0de84                 | _do_le_ret
0de84     2D 00 64 FD | 	ret
0de88                 | 
0de88                 | ' 
0de88                 | ' 
0de88                 | ' sub do_ne
0de88                 | _do_ne
0de88     05 4A 05 F6 | 	mov	COUNT_, #5
0de8c     A8 00 A0 FD | 	call	#pushregs_
0de90     18 F0 07 F1 | 	add	ptra, #24
0de94     78 AC BF FD | 	call	#_pop
0de98     FD 1E 02 F6 | 	mov	local01, result1
0de9c     FE 20 02 F6 | 	mov	local02, result2
0dea0     FF 22 02 F6 | 	mov	local03, result3
0dea4     0C 4E 05 F1 | 	add	fp, #12
0dea8     A7 1E 62 FC | 	wrlong	local01, fp
0deac     04 4E 05 F1 | 	add	fp, #4
0deb0     A7 20 62 FC | 	wrlong	local02, fp
0deb4     04 4E 05 F1 | 	add	fp, #4
0deb8     A7 22 62 FC | 	wrlong	local03, fp
0debc     14 4E 85 F1 | 	sub	fp, #20
0dec0     4C AC BF FD | 	call	#_pop
0dec4     FF 22 02 F6 | 	mov	local03, result3
0dec8     A7 FA 61 FC | 	wrlong	result1, fp
0decc     04 4E 05 F1 | 	add	fp, #4
0ded0     A7 FC 61 FC | 	wrlong	result2, fp
0ded4     04 4E 05 F1 | 	add	fp, #4
0ded8     A7 22 62 FC | 	wrlong	local03, fp
0dedc                 | ' t2=pop()
0dedc                 | ' t1=pop()
0dedc                 | ' 
0dedc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
0dedc     08 4E 85 F1 | 	sub	fp, #8
0dee0     1F 22 0E F2 | 	cmp	local03, #31 wz
0dee4     14 4E 05 A1 |  if_e	add	fp, #20
0dee8     A7 24 02 AB |  if_e	rdlong	local04, fp
0deec     14 4E 85 A1 |  if_e	sub	fp, #20
0def0     12 23 02 A6 |  if_e	mov	local03, local04
0def4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0def8     28 00 90 5D |  if_ne	jmp	#LR__1170
0defc     00 1E 06 F6 | 	mov	local01, #0
0df00     A7 12 02 FB | 	rdlong	arg01, fp
0df04     0C 4E 05 F1 | 	add	fp, #12
0df08     A7 14 02 FB | 	rdlong	arg02, fp
0df0c     0C 4E 85 F1 | 	sub	fp, #12
0df10     5C 7C B0 FD | 	call	#__system___string_cmp
0df14     00 FA 0D F2 | 	cmp	result1, #0 wz
0df18     00 1E 26 56 |  if_ne	not	local01, #0
0df1c     A7 1E 62 FC | 	wrlong	local01, fp
0df20     04 03 90 FD | 	jmp	#LR__1180
0df24                 | LR__1170
0df24                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
0df24     08 4E 05 F1 | 	add	fp, #8
0df28     A7 1E 02 FB | 	rdlong	local01, fp
0df2c     08 4E 85 F1 | 	sub	fp, #8
0df30     1E 1E 0E F2 | 	cmp	local01, #30 wz
0df34     14 4E 05 A1 |  if_e	add	fp, #20
0df38     A7 24 02 AB |  if_e	rdlong	local04, fp
0df3c     14 4E 85 A1 |  if_e	sub	fp, #20
0df40     12 23 02 A6 |  if_e	mov	local03, local04
0df44     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0df48     2C 00 90 5D |  if_ne	jmp	#LR__1171
0df4c     00 1E 06 F6 | 	mov	local01, #0
0df50     A7 12 02 FB | 	rdlong	arg01, fp
0df54     0C 4E 05 F1 | 	add	fp, #12
0df58     A7 14 02 FB | 	rdlong	arg02, fp
0df5c     0C 4E 85 F1 | 	sub	fp, #12
0df60     01 16 06 F6 | 	mov	arg03, #1
0df64     24 A9 B0 FD | 	call	#__system___float_cmp
0df68     00 FA 0D F2 | 	cmp	result1, #0 wz
0df6c     00 1E 26 56 |  if_ne	not	local01, #0
0df70     A7 1E 62 FC | 	wrlong	local01, fp
0df74     B0 02 90 FD | 	jmp	#LR__1180
0df78                 | LR__1171
0df78                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
0df78     08 4E 05 F1 | 	add	fp, #8
0df7c     A7 1E 02 FB | 	rdlong	local01, fp
0df80     08 4E 85 F1 | 	sub	fp, #8
0df84     1E 1E 0E F2 | 	cmp	local01, #30 wz
0df88     14 4E 05 A1 |  if_e	add	fp, #20
0df8c     A7 24 02 AB |  if_e	rdlong	local04, fp
0df90     14 4E 85 A1 |  if_e	sub	fp, #20
0df94     12 23 02 A6 |  if_e	mov	local03, local04
0df98     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0df9c     48 00 90 5D |  if_ne	jmp	#LR__1172
0dfa0     00 1E 06 F6 | 	mov	local01, #0
0dfa4     A7 20 02 FB | 	rdlong	local02, fp
0dfa8     0C 4E 05 F1 | 	add	fp, #12
0dfac     A7 12 02 FB | 	rdlong	arg01, fp
0dfb0     0C 4E 85 F1 | 	sub	fp, #12
0dfb4     09 13 52 F6 | 	abs	arg01, arg01 wc
0dfb8     1F 26 C6 C9 |  if_b	decod	local05, #31
0dfbc     00 26 06 36 |  if_ae	mov	local05, #0
0dfc0     68 A1 B0 FD | 	call	#__system___float_fromuns
0dfc4     13 FB 61 F5 | 	xor	result1, local05
0dfc8     FD 14 02 F6 | 	mov	arg02, result1
0dfcc     10 13 02 F6 | 	mov	arg01, local02
0dfd0     01 16 06 F6 | 	mov	arg03, #1
0dfd4     B4 A8 B0 FD | 	call	#__system___float_cmp
0dfd8     00 FA 0D F2 | 	cmp	result1, #0 wz
0dfdc     00 1E 26 56 |  if_ne	not	local01, #0
0dfe0     A7 1E 62 FC | 	wrlong	local01, fp
0dfe4     40 02 90 FD | 	jmp	#LR__1180
0dfe8                 | LR__1172
0dfe8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
0dfe8     08 4E 05 F1 | 	add	fp, #8
0dfec     A7 1E 02 FB | 	rdlong	local01, fp
0dff0     08 4E 85 F1 | 	sub	fp, #8
0dff4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0dff8     14 4E 05 A1 |  if_e	add	fp, #20
0dffc     A7 24 02 AB |  if_e	rdlong	local04, fp
0e000     14 4E 85 A1 |  if_e	sub	fp, #20
0e004     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0e008     38 00 90 5D |  if_ne	jmp	#LR__1173
0e00c     00 1E 06 F6 | 	mov	local01, #0
0e010     A7 20 02 FB | 	rdlong	local02, fp
0e014     0C 4E 05 F1 | 	add	fp, #12
0e018     A7 12 02 FB | 	rdlong	arg01, fp
0e01c     0C 4E 85 F1 | 	sub	fp, #12
0e020     08 A1 B0 FD | 	call	#__system___float_fromuns
0e024     FD 14 02 F6 | 	mov	arg02, result1
0e028     10 13 02 F6 | 	mov	arg01, local02
0e02c     01 16 06 F6 | 	mov	arg03, #1
0e030     58 A8 B0 FD | 	call	#__system___float_cmp
0e034     00 FA 0D F2 | 	cmp	result1, #0 wz
0e038     00 1E 26 56 |  if_ne	not	local01, #0
0e03c     A7 1E 62 FC | 	wrlong	local01, fp
0e040     E4 01 90 FD | 	jmp	#LR__1180
0e044                 | LR__1173
0e044                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
0e044     08 4E 05 F1 | 	add	fp, #8
0e048     A7 1E 02 FB | 	rdlong	local01, fp
0e04c     08 4E 85 F1 | 	sub	fp, #8
0e050     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e054     14 4E 05 A1 |  if_e	add	fp, #20
0e058     A7 22 02 AB |  if_e	rdlong	local03, fp
0e05c     14 4E 85 A1 |  if_e	sub	fp, #20
0e060     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e064     44 00 90 5D |  if_ne	jmp	#LR__1174
0e068     00 1E 06 F6 | 	mov	local01, #0
0e06c     A7 12 02 FB | 	rdlong	arg01, fp
0e070     09 13 52 F6 | 	abs	arg01, arg01 wc
0e074     1F 26 C6 C9 |  if_b	decod	local05, #31
0e078     00 26 06 36 |  if_ae	mov	local05, #0
0e07c     AC A0 B0 FD | 	call	#__system___float_fromuns
0e080     13 FB 61 F5 | 	xor	result1, local05
0e084     FD 12 02 F6 | 	mov	arg01, result1
0e088     0C 4E 05 F1 | 	add	fp, #12
0e08c     A7 14 02 FB | 	rdlong	arg02, fp
0e090     0C 4E 85 F1 | 	sub	fp, #12
0e094     01 16 06 F6 | 	mov	arg03, #1
0e098     F0 A7 B0 FD | 	call	#__system___float_cmp
0e09c     00 FA 0D F2 | 	cmp	result1, #0 wz
0e0a0     00 1E 26 56 |  if_ne	not	local01, #0
0e0a4     A7 1E 62 FC | 	wrlong	local01, fp
0e0a8     7C 01 90 FD | 	jmp	#LR__1180
0e0ac                 | LR__1174
0e0ac                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
0e0ac     08 4E 05 F1 | 	add	fp, #8
0e0b0     A7 1E 02 FB | 	rdlong	local01, fp
0e0b4     08 4E 85 F1 | 	sub	fp, #8
0e0b8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e0bc     14 4E 05 A1 |  if_e	add	fp, #20
0e0c0     A7 22 02 AB |  if_e	rdlong	local03, fp
0e0c4     14 4E 85 A1 |  if_e	sub	fp, #20
0e0c8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e0cc     24 00 90 5D |  if_ne	jmp	#LR__1175
0e0d0     00 1E 06 F6 | 	mov	local01, #0
0e0d4     A7 20 02 FB | 	rdlong	local02, fp
0e0d8     0C 4E 05 F1 | 	add	fp, #12
0e0dc     A7 22 02 FB | 	rdlong	local03, fp
0e0e0     0C 4E 85 F1 | 	sub	fp, #12
0e0e4     11 21 0A F2 | 	cmp	local02, local03 wz
0e0e8     01 1E 66 56 |  if_ne	neg	local01, #1
0e0ec     A7 1E 62 FC | 	wrlong	local01, fp
0e0f0     34 01 90 FD | 	jmp	#LR__1180
0e0f4                 | LR__1175
0e0f4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
0e0f4     08 4E 05 F1 | 	add	fp, #8
0e0f8     A7 1E 02 FB | 	rdlong	local01, fp
0e0fc     08 4E 85 F1 | 	sub	fp, #8
0e100     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e104     14 4E 05 A1 |  if_e	add	fp, #20
0e108     A7 22 02 AB |  if_e	rdlong	local03, fp
0e10c     14 4E 85 A1 |  if_e	sub	fp, #20
0e110     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e114     24 00 90 5D |  if_ne	jmp	#LR__1176
0e118     00 1E 06 F6 | 	mov	local01, #0
0e11c     A7 20 02 FB | 	rdlong	local02, fp
0e120     0C 4E 05 F1 | 	add	fp, #12
0e124     A7 22 02 FB | 	rdlong	local03, fp
0e128     0C 4E 85 F1 | 	sub	fp, #12
0e12c     11 21 0A F2 | 	cmp	local02, local03 wz
0e130     01 1E 66 56 |  if_ne	neg	local01, #1
0e134     A7 1E 62 FC | 	wrlong	local01, fp
0e138     EC 00 90 FD | 	jmp	#LR__1180
0e13c                 | LR__1176
0e13c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
0e13c     08 4E 05 F1 | 	add	fp, #8
0e140     A7 1E 02 FB | 	rdlong	local01, fp
0e144     08 4E 85 F1 | 	sub	fp, #8
0e148     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e14c     14 4E 05 A1 |  if_e	add	fp, #20
0e150     A7 22 02 AB |  if_e	rdlong	local03, fp
0e154     14 4E 85 A1 |  if_e	sub	fp, #20
0e158     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e15c     34 00 90 5D |  if_ne	jmp	#LR__1177
0e160     00 1E 06 F6 | 	mov	local01, #0
0e164     A7 12 02 FB | 	rdlong	arg01, fp
0e168     C0 9F B0 FD | 	call	#__system___float_fromuns
0e16c     FD 12 02 F6 | 	mov	arg01, result1
0e170     0C 4E 05 F1 | 	add	fp, #12
0e174     A7 14 02 FB | 	rdlong	arg02, fp
0e178     0C 4E 85 F1 | 	sub	fp, #12
0e17c     01 16 06 F6 | 	mov	arg03, #1
0e180     08 A7 B0 FD | 	call	#__system___float_cmp
0e184     00 FA 0D F2 | 	cmp	result1, #0 wz
0e188     00 1E 26 56 |  if_ne	not	local01, #0
0e18c     A7 1E 62 FC | 	wrlong	local01, fp
0e190     94 00 90 FD | 	jmp	#LR__1180
0e194                 | LR__1177
0e194                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
0e194     08 4E 05 F1 | 	add	fp, #8
0e198     A7 1E 02 FB | 	rdlong	local01, fp
0e19c     08 4E 85 F1 | 	sub	fp, #8
0e1a0     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e1a4     14 4E 05 A1 |  if_e	add	fp, #20
0e1a8     A7 22 02 AB |  if_e	rdlong	local03, fp
0e1ac     14 4E 85 A1 |  if_e	sub	fp, #20
0e1b0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e1b4     24 00 90 5D |  if_ne	jmp	#LR__1178
0e1b8     00 1E 06 F6 | 	mov	local01, #0
0e1bc     A7 20 02 FB | 	rdlong	local02, fp
0e1c0     0C 4E 05 F1 | 	add	fp, #12
0e1c4     A7 22 02 FB | 	rdlong	local03, fp
0e1c8     0C 4E 85 F1 | 	sub	fp, #12
0e1cc     11 21 0A F2 | 	cmp	local02, local03 wz
0e1d0     01 1E 66 56 |  if_ne	neg	local01, #1
0e1d4     A7 1E 62 FC | 	wrlong	local01, fp
0e1d8     4C 00 90 FD | 	jmp	#LR__1180
0e1dc                 | LR__1178
0e1dc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
0e1dc     08 4E 05 F1 | 	add	fp, #8
0e1e0     A7 1E 02 FB | 	rdlong	local01, fp
0e1e4     08 4E 85 F1 | 	sub	fp, #8
0e1e8     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e1ec     14 4E 05 A1 |  if_e	add	fp, #20
0e1f0     A7 22 02 AB |  if_e	rdlong	local03, fp
0e1f4     14 4E 85 A1 |  if_e	sub	fp, #20
0e1f8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e1fc     24 00 90 5D |  if_ne	jmp	#LR__1179
0e200     00 1E 06 F6 | 	mov	local01, #0
0e204     A7 20 02 FB | 	rdlong	local02, fp
0e208     0C 4E 05 F1 | 	add	fp, #12
0e20c     A7 22 02 FB | 	rdlong	local03, fp
0e210     0C 4E 85 F1 | 	sub	fp, #12
0e214     11 21 0A F2 | 	cmp	local02, local03 wz
0e218     01 1E 66 56 |  if_ne	neg	local01, #1
0e21c     A7 1E 62 FC | 	wrlong	local01, fp
0e220     04 00 90 FD | 	jmp	#LR__1180
0e224                 | LR__1179
0e224     A7 00 68 FC | 	wrlong	#0, fp
0e228                 | LR__1180
0e228     08 4E 05 F1 | 	add	fp, #8
0e22c     A7 38 68 FC | 	wrlong	#28, fp
0e230     08 4E 85 F1 | 	sub	fp, #8
0e234     A7 12 02 F6 | 	mov	arg01, fp
0e238     6C A9 BF FD | 	call	#_push
0e23c     A7 F0 03 F6 | 	mov	ptra, fp
0e240     B2 00 A0 FD | 	call	#popregs_
0e244                 | _do_ne_ret
0e244     2D 00 64 FD | 	ret
0e248                 | 
0e248                 | ' 
0e248                 | ' 
0e248                 | ' 
0e248                 | ' ' -------------------   convert a variable on the top of stack to integer
0e248                 | ' 
0e248                 | ' sub do_converttoint
0e248                 | _do_converttoint
0e248     02 4A 05 F6 | 	mov	COUNT_, #2
0e24c     A8 00 A0 FD | 	call	#pushregs_
0e250     18 F0 07 F1 | 	add	ptra, #24
0e254     B8 A8 BF FD | 	call	#_pop
0e258     FE 1E 02 F6 | 	mov	local01, result2
0e25c     FF 20 02 F6 | 	mov	local02, result3
0e260     A7 FA 61 FC | 	wrlong	result1, fp
0e264     04 4E 05 F1 | 	add	fp, #4
0e268     A7 1E 62 FC | 	wrlong	local01, fp
0e26c     04 4E 05 F1 | 	add	fp, #4
0e270     A7 20 62 FC | 	wrlong	local02, fp
0e274                 | ' t1=pop() 
0e274                 | ' select case t1.result_type
0e274     08 4E 85 F1 | 	sub	fp, #8
0e278     1C 20 0E F2 | 	cmp	local02, #28 wz
0e27c     24 00 90 AD |  if_e	jmp	#LR__1190
0e280     1D 20 0E F2 | 	cmp	local02, #29 wz
0e284     38 00 90 AD |  if_e	jmp	#LR__1191
0e288     1E 20 0E F2 | 	cmp	local02, #30 wz
0e28c     4C 00 90 AD |  if_e	jmp	#LR__1192
0e290     1F 20 0E F2 | 	cmp	local02, #31 wz
0e294     68 00 90 AD |  if_e	jmp	#LR__1193
0e298     FF 20 0E F2 | 	cmp	local02, #255 wz
0e29c     8C 00 90 AD |  if_e	jmp	#LR__1194
0e2a0     A8 00 90 FD | 	jmp	#LR__1195
0e2a4                 | LR__1190
0e2a4     A7 20 02 FB | 	rdlong	local02, fp
0e2a8     0C 4E 05 F1 | 	add	fp, #12
0e2ac     A7 20 62 FC | 	wrlong	local02, fp
0e2b0     04 4E 05 F1 | 	add	fp, #4
0e2b4     A7 38 68 FC | 	wrlong	#28, fp
0e2b8     10 4E 85 F1 | 	sub	fp, #16
0e2bc     A0 00 90 FD | 	jmp	#LR__1196
0e2c0                 | LR__1191
0e2c0     A7 20 02 FB | 	rdlong	local02, fp
0e2c4     0C 4E 05 F1 | 	add	fp, #12
0e2c8     A7 20 62 FC | 	wrlong	local02, fp
0e2cc     04 4E 05 F1 | 	add	fp, #4
0e2d0     A7 38 68 FC | 	wrlong	#28, fp
0e2d4     10 4E 85 F1 | 	sub	fp, #16
0e2d8     84 00 90 FD | 	jmp	#LR__1196
0e2dc                 | LR__1192
0e2dc     A7 12 02 FB | 	rdlong	arg01, fp
0e2e0     01 14 06 F6 | 	mov	arg02, #1
0e2e4     38 A6 B0 FD | 	call	#__system___float_tointeger
0e2e8     0C 4E 05 F1 | 	add	fp, #12
0e2ec     A7 FA 61 FC | 	wrlong	result1, fp
0e2f0     04 4E 05 F1 | 	add	fp, #4
0e2f4     A7 38 68 FC | 	wrlong	#28, fp
0e2f8     10 4E 85 F1 | 	sub	fp, #16
0e2fc     60 00 90 FD | 	jmp	#LR__1196
0e300                 | LR__1193
0e300     A7 12 02 FB | 	rdlong	arg01, fp
0e304     38 A9 B0 FD | 	call	#__system____builtin_atof
0e308     FD 12 02 F6 | 	mov	arg01, result1
0e30c     00 14 06 F6 | 	mov	arg02, #0
0e310     0C A6 B0 FD | 	call	#__system___float_tointeger
0e314     0C 4E 05 F1 | 	add	fp, #12
0e318     A7 FA 61 FC | 	wrlong	result1, fp
0e31c     04 4E 05 F1 | 	add	fp, #4
0e320     A7 38 68 FC | 	wrlong	#28, fp
0e324     10 4E 85 F1 | 	sub	fp, #16
0e328     34 00 90 FD | 	jmp	#LR__1196
0e32c                 | LR__1194
0e32c     0C 4E 05 F1 | 	add	fp, #12
0e330     A7 00 68 FC | 	wrlong	#0, fp
0e334     0C 4E 85 F1 | 	sub	fp, #12
0e338     A7 20 02 FB | 	rdlong	local02, fp
0e33c     10 4E 05 F1 | 	add	fp, #16
0e340     A7 20 62 FC | 	wrlong	local02, fp
0e344     10 4E 85 F1 | 	sub	fp, #16
0e348     14 00 90 FD | 	jmp	#LR__1196
0e34c                 | LR__1195
0e34c     0C 4E 05 F1 | 	add	fp, #12
0e350     A7 00 68 FC | 	wrlong	#0, fp
0e354     04 4E 05 F1 | 	add	fp, #4
0e358     A7 02 68 FC | 	wrlong	#1, fp
0e35c     10 4E 85 F1 | 	sub	fp, #16
0e360                 | LR__1196
0e360     0C 4E 05 F1 | 	add	fp, #12
0e364     A7 20 02 FB | 	rdlong	local02, fp
0e368     0C 4E 85 F1 | 	sub	fp, #12
0e36c     A7 20 62 FC | 	wrlong	local02, fp
0e370     10 4E 05 F1 | 	add	fp, #16
0e374     A7 20 02 FB | 	rdlong	local02, fp
0e378     08 4E 85 F1 | 	sub	fp, #8
0e37c     A7 20 62 FC | 	wrlong	local02, fp
0e380     08 4E 85 F1 | 	sub	fp, #8
0e384     A7 12 02 F6 | 	mov	arg01, fp
0e388     1C A8 BF FD | 	call	#_push
0e38c     A7 F0 03 F6 | 	mov	ptra, fp
0e390     B2 00 A0 FD | 	call	#popregs_
0e394                 | _do_converttoint_ret
0e394     2D 00 64 FD | 	ret
0e398                 | 
0e398                 | ' 
0e398                 | ' function converttoint (t1 as expr_result) as integer
0e398                 | _converttoint
0e398     02 4A 05 F6 | 	mov	COUNT_, #2
0e39c     A8 00 A0 FD | 	call	#pushregs_
0e3a0     09 1F 02 F6 | 	mov	local01, arg01
0e3a4                 | ' 
0e3a4                 | ' select case t1.result_type
0e3a4     08 1E 06 F1 | 	add	local01, #8
0e3a8     0F 21 02 FB | 	rdlong	local02, local01
0e3ac     08 1E 86 F1 | 	sub	local01, #8
0e3b0     1C 20 86 F1 | 	sub	local02, #28
0e3b4     04 20 26 F3 | 	fle	local02, #4
0e3b8     30 20 62 FD | 	jmprel	local02
0e3bc                 | LR__1200
0e3bc     10 00 90 FD | 	jmp	#LR__1201
0e3c0     14 00 90 FD | 	jmp	#LR__1202
0e3c4     18 00 90 FD | 	jmp	#LR__1203
0e3c8     24 00 90 FD | 	jmp	#LR__1204
0e3cc     38 00 90 FD | 	jmp	#LR__1205
0e3d0                 | LR__1201
0e3d0     0F FB 01 FB | 	rdlong	result1, local01
0e3d4     34 00 90 FD | 	jmp	#LR__1206
0e3d8                 | LR__1202
0e3d8     0F FB 01 FB | 	rdlong	result1, local01
0e3dc     2C 00 90 FD | 	jmp	#LR__1206
0e3e0                 | LR__1203
0e3e0     0F 13 02 FB | 	rdlong	arg01, local01
0e3e4     01 14 06 F6 | 	mov	arg02, #1
0e3e8     34 A5 B0 FD | 	call	#__system___float_tointeger
0e3ec     1C 00 90 FD | 	jmp	#LR__1206
0e3f0                 | LR__1204
0e3f0     0F 13 02 FB | 	rdlong	arg01, local01
0e3f4     48 A8 B0 FD | 	call	#__system____builtin_atof
0e3f8     FD 12 02 F6 | 	mov	arg01, result1
0e3fc     00 14 06 F6 | 	mov	arg02, #0
0e400     1C A5 B0 FD | 	call	#__system___float_tointeger
0e404     04 00 90 FD | 	jmp	#LR__1206
0e408                 | LR__1205
0e408     00 FA 05 F6 | 	mov	result1, #0
0e40c                 | LR__1206
0e40c     A7 F0 03 F6 | 	mov	ptra, fp
0e410     B2 00 A0 FD | 	call	#popregs_
0e414                 | _converttoint_ret
0e414     2D 00 64 FD | 	ret
0e418                 | 
0e418                 | ' 
0e418                 | ' sub do_rnd
0e418                 | _do_rnd
0e418     01 4A 05 F6 | 	mov	COUNT_, #1
0e41c     A8 00 A0 FD | 	call	#pushregs_
0e420     10 F0 07 F1 | 	add	ptra, #16
0e424     41 00 00 FF 
0e428     44 E4 05 F1 | 	add	objptr, ##33348
0e42c     F2 1E 02 FB | 	rdlong	local01, objptr
0e430     0F 17 02 F6 | 	mov	arg03, local01
0e434     01 16 66 F0 | 	shl	arg03, #1
0e438     0F 17 02 F1 | 	add	arg03, local01
0e43c     02 16 66 F0 | 	shl	arg03, #2
0e440     03 00 00 FF 
0e444     04 E4 85 F1 | 	sub	objptr, ##1540
0e448     F2 16 02 F1 | 	add	arg03, objptr
0e44c     0B 17 02 FB | 	rdlong	arg03, arg03
0e450     0C 4E 05 F1 | 	add	fp, #12
0e454     A7 16 62 FC | 	wrlong	arg03, fp
0e458                 | ' 
0e458                 | ' numpar=compiledline(lineptr_e).result.uresult
0e458                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
0e458     0C 4E 85 F1 | 	sub	fp, #12
0e45c     02 16 16 F2 | 	cmp	arg03, #2 wc
0e460     3E 00 00 FF 
0e464     40 E4 85 F1 | 	sub	objptr, ##31808
0e468     3C 00 90 CD |  if_b	jmp	#LR__1210
0e46c     00 12 06 F6 | 	mov	arg01, #0
0e470     84 CB B0 FD | 	call	#__system___getiolock_0372
0e474     FD 12 02 F6 | 	mov	arg01, result1
0e478     CC 76 B0 FD | 	call	#__system___lockmem
0e47c     27 01 00 FF 
0e480     76 15 06 F6 | 	mov	arg02, ##@LR__4328
0e484     00 12 06 F6 | 	mov	arg01, #0
0e488     00 16 06 F6 | 	mov	arg03, #0
0e48c     AC 83 B0 FD | 	call	#__system___basic_print_string
0e490     00 12 06 F6 | 	mov	arg01, #0
0e494     60 CB B0 FD | 	call	#__system___getiolock_0372
0e498     FD 00 68 FC | 	wrlong	#0, result1
0e49c     27 12 06 F6 | 	mov	arg01, #39
0e4a0     84 41 B0 FD | 	call	#_printerror
0e4a4     2C 01 90 FD | 	jmp	#LR__1217
0e4a8                 | LR__1210
0e4a8                 | ' if numpar=0 then
0e4a8     0C 4E 05 F1 | 	add	fp, #12
0e4ac     A7 FE 09 FB | 	rdlong	result3, fp wz
0e4b0     0C 4E 85 F1 | 	sub	fp, #12
0e4b4     20 00 90 5D |  if_ne	jmp	#LR__1211
0e4b8     08 4E 05 F1 | 	add	fp, #8
0e4bc     A7 3A 68 FC | 	wrlong	#29, fp
0e4c0     08 4E 85 F1 | 	sub	fp, #8
0e4c4     1B FA 61 FD | 	getrnd	result1
0e4c8     A7 FA 61 FC | 	wrlong	result1, fp
0e4cc     A7 12 02 F6 | 	mov	arg01, fp
0e4d0     D4 A6 BF FD | 	call	#_push
0e4d4     FC 00 90 FD | 	jmp	#LR__1216
0e4d8                 | LR__1211
0e4d8     34 A6 BF FD | 	call	#_pop
0e4dc     A7 FA 61 FC | 	wrlong	result1, fp
0e4e0     04 4E 05 F1 | 	add	fp, #4
0e4e4     A7 FC 61 FC | 	wrlong	result2, fp
0e4e8     04 4E 05 F1 | 	add	fp, #4
0e4ec     A7 FE 61 FC | 	wrlong	result3, fp
0e4f0                 | '   t1=pop()
0e4f0                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
0e4f0     08 4E 85 F1 | 	sub	fp, #8
0e4f4     1C FE 0D F2 | 	cmp	result3, #28 wz
0e4f8     08 4E 05 51 |  if_ne	add	fp, #8
0e4fc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e500     08 4E 85 51 |  if_ne	sub	fp, #8
0e504     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0e508     2C 00 90 5D |  if_ne	jmp	#LR__1212
0e50c     1B FA 61 FD | 	getrnd	result1
0e510     A7 1E 02 FB | 	rdlong	local01, fp
0e514     0F FB 11 FD | 	qdiv	result1, local01
0e518     A7 12 02 F6 | 	mov	arg01, fp
0e51c     19 1E 62 FD | 	getqy	local01
0e520     A7 1E 62 FC | 	wrlong	local01, fp
0e524     08 4E 05 F1 | 	add	fp, #8
0e528     A7 3A 68 FC | 	wrlong	#29, fp
0e52c     08 4E 85 F1 | 	sub	fp, #8
0e530     74 A6 BF FD | 	call	#_push
0e534     9C 00 90 FD | 	jmp	#LR__1215
0e538                 | LR__1212
0e538     08 4E 05 F1 | 	add	fp, #8
0e53c     A7 1E 02 FB | 	rdlong	local01, fp
0e540     08 4E 85 F1 | 	sub	fp, #8
0e544     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e548     48 00 90 5D |  if_ne	jmp	#LR__1213
0e54c     A7 12 02 FB | 	rdlong	arg01, fp
0e550     00 C0 24 FF 
0e554     00 14 06 F6 | 	mov	arg02, ##1233125376
0e558     00 A1 B0 FD | 	call	#__system___float_div
0e55c     FD 1E 02 F6 | 	mov	local01, result1
0e560     1B 12 62 FD | 	getrnd	arg01
0e564     74 13 06 F4 | 	bitl	arg01, #372
0e568     C0 9B B0 FD | 	call	#__system___float_fromuns
0e56c     FD 14 02 F6 | 	mov	arg02, result1
0e570     0F 13 02 F6 | 	mov	arg01, local01
0e574     E0 9E B0 FD | 	call	#__system___float_mul
0e578     A7 FA 61 FC | 	wrlong	result1, fp
0e57c     08 4E 05 F1 | 	add	fp, #8
0e580     A7 3C 68 FC | 	wrlong	#30, fp
0e584     08 4E 85 F1 | 	sub	fp, #8
0e588     A7 12 02 F6 | 	mov	arg01, fp
0e58c     18 A6 BF FD | 	call	#_push
0e590     40 00 90 FD | 	jmp	#LR__1214
0e594                 | LR__1213
0e594                 | '     print "rnd: "; : printerror(40) 
0e594     00 12 06 F6 | 	mov	arg01, #0
0e598     5C CA B0 FD | 	call	#__system___getiolock_0372
0e59c     FD 12 02 F6 | 	mov	arg01, result1
0e5a0     A4 75 B0 FD | 	call	#__system___lockmem
0e5a4     27 01 00 FF 
0e5a8     7C 15 06 F6 | 	mov	arg02, ##@LR__4329
0e5ac     00 12 06 F6 | 	mov	arg01, #0
0e5b0     00 16 06 F6 | 	mov	arg03, #0
0e5b4     84 82 B0 FD | 	call	#__system___basic_print_string
0e5b8     00 12 06 F6 | 	mov	arg01, #0
0e5bc     38 CA B0 FD | 	call	#__system___getiolock_0372
0e5c0     FD 00 68 FC | 	wrlong	#0, result1
0e5c4     28 12 06 F6 | 	mov	arg01, #40
0e5c8     5C 40 B0 FD | 	call	#_printerror
0e5cc     A7 12 02 F6 | 	mov	arg01, fp
0e5d0     D4 A5 BF FD | 	call	#_push
0e5d4                 | LR__1214
0e5d4                 | LR__1215
0e5d4                 | LR__1216
0e5d4                 | LR__1217
0e5d4     A7 F0 03 F6 | 	mov	ptra, fp
0e5d8     B2 00 A0 FD | 	call	#popregs_
0e5dc                 | _do_rnd_ret
0e5dc     2D 00 64 FD | 	ret
0e5e0                 | 
0e5e0                 | ' 
0e5e0                 | ' sub do_sin
0e5e0                 | _do_sin
0e5e0     03 4A 05 F6 | 	mov	COUNT_, #3
0e5e4     A8 00 A0 FD | 	call	#pushregs_
0e5e8     10 F0 07 F1 | 	add	ptra, #16
0e5ec     41 00 00 FF 
0e5f0     44 E4 05 F1 | 	add	objptr, ##33348
0e5f4     F2 1E 02 FB | 	rdlong	local01, objptr
0e5f8     0F 17 02 F6 | 	mov	arg03, local01
0e5fc     01 16 66 F0 | 	shl	arg03, #1
0e600     0F 17 02 F1 | 	add	arg03, local01
0e604     02 16 66 F0 | 	shl	arg03, #2
0e608     03 00 00 FF 
0e60c     04 E4 85 F1 | 	sub	objptr, ##1540
0e610     F2 16 02 F1 | 	add	arg03, objptr
0e614     0B 17 02 FB | 	rdlong	arg03, arg03
0e618     0C 4E 05 F1 | 	add	fp, #12
0e61c     A7 16 62 FC | 	wrlong	arg03, fp
0e620                 | ' 
0e620                 | ' numpar=compiledline(lineptr_e).result.uresult
0e620                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
0e620     0C 4E 85 F1 | 	sub	fp, #12
0e624     02 16 16 F2 | 	cmp	arg03, #2 wc
0e628     3E 00 00 FF 
0e62c     40 E4 85 F1 | 	sub	objptr, ##31808
0e630     0C 4E 05 C1 |  if_b	add	fp, #12
0e634     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0e638     0C 4E 85 C1 |  if_b	sub	fp, #12
0e63c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1220
0e640     00 12 06 F6 | 	mov	arg01, #0
0e644     B0 C9 B0 FD | 	call	#__system___getiolock_0372
0e648     FD 12 02 F6 | 	mov	arg01, result1
0e64c     F8 74 B0 FD | 	call	#__system___lockmem
0e650     27 01 00 FF 
0e654     82 15 06 F6 | 	mov	arg02, ##@LR__4330
0e658     00 12 06 F6 | 	mov	arg01, #0
0e65c     00 16 06 F6 | 	mov	arg03, #0
0e660     D8 81 B0 FD | 	call	#__system___basic_print_string
0e664     00 12 06 F6 | 	mov	arg01, #0
0e668     8C C9 B0 FD | 	call	#__system___getiolock_0372
0e66c     FD 00 68 FC | 	wrlong	#0, result1
0e670     27 12 06 F6 | 	mov	arg01, #39
0e674     B0 3F B0 FD | 	call	#_printerror
0e678     40 01 90 FD | 	jmp	#LR__1225
0e67c                 | LR__1220
0e67c     90 A4 BF FD | 	call	#_pop
0e680     A7 FA 61 FC | 	wrlong	result1, fp
0e684     04 4E 05 F1 | 	add	fp, #4
0e688     A7 FC 61 FC | 	wrlong	result2, fp
0e68c     04 4E 05 F1 | 	add	fp, #4
0e690     A7 FE 61 FC | 	wrlong	result3, fp
0e694                 | ' t1=pop()
0e694                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then
0e694     08 4E 85 F1 | 	sub	fp, #8
0e698     1C FE 0D F2 | 	cmp	result3, #28 wz
0e69c     08 4E 05 51 |  if_ne	add	fp, #8
0e6a0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e6a4     08 4E 85 51 |  if_ne	sub	fp, #8
0e6a8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0e6ac     70 00 90 5D |  if_ne	jmp	#LR__1221
0e6b0     A7 1E 02 FB | 	rdlong	local01, fp
0e6b4     0F 1F 52 F6 | 	abs	local01, local01 wc
0e6b8     68 1F 16 FD | 	qdiv	local01, #360
0e6bc     87 24 20 FF 
0e6c0     DB 21 06 F6 | 	mov	local02, ##1078530011
0e6c4     19 1E 62 FD | 	getqy	local01
0e6c8     0F 13 82 F6 | 	negc	arg01, local01
0e6cc     09 13 52 F6 | 	abs	arg01, arg01 wc
0e6d0     1F 22 C6 C9 |  if_b	decod	local03, #31
0e6d4     00 22 06 36 |  if_ae	mov	local03, #0
0e6d8     50 9A B0 FD | 	call	#__system___float_fromuns
0e6dc     11 FB 61 F5 | 	xor	result1, local03
0e6e0     FD 12 02 F6 | 	mov	arg01, result1
0e6e4     00 9A 21 FF 
0e6e8     00 14 06 F6 | 	mov	arg02, ##1127481344
0e6ec     6C 9F B0 FD | 	call	#__system___float_div
0e6f0     FD 14 02 F6 | 	mov	arg02, result1
0e6f4     10 13 02 F6 | 	mov	arg01, local02
0e6f8     5C 9D B0 FD | 	call	#__system___float_mul
0e6fc     FD 12 02 F6 | 	mov	arg01, result1
0e700     90 A6 B0 FD | 	call	#__system____builtin_sinf
0e704     A7 FA 61 FC | 	wrlong	result1, fp
0e708     08 4E 05 F1 | 	add	fp, #8
0e70c     A7 3C 68 FC | 	wrlong	#30, fp
0e710     08 4E 85 F1 | 	sub	fp, #8
0e714     A7 12 02 F6 | 	mov	arg01, fp
0e718     8C A4 BF FD | 	call	#_push
0e71c     9C 00 90 FD | 	jmp	#LR__1224
0e720                 | LR__1221
0e720     08 4E 05 F1 | 	add	fp, #8
0e724     A7 20 02 FB | 	rdlong	local02, fp
0e728     08 4E 85 F1 | 	sub	fp, #8
0e72c     1E 20 0E F2 | 	cmp	local02, #30 wz
0e730     48 00 90 5D |  if_ne	jmp	#LR__1222
0e734     87 24 20 FF 
0e738     DB 21 06 F6 | 	mov	local02, ##1078530011
0e73c     A7 12 02 FB | 	rdlong	arg01, fp
0e740     00 9A 21 FF 
0e744     00 14 06 F6 | 	mov	arg02, ##1127481344
0e748     10 9F B0 FD | 	call	#__system___float_div
0e74c     FD 14 02 F6 | 	mov	arg02, result1
0e750     10 13 02 F6 | 	mov	arg01, local02
0e754     00 9D B0 FD | 	call	#__system___float_mul
0e758     FD 12 02 F6 | 	mov	arg01, result1
0e75c     34 A6 B0 FD | 	call	#__system____builtin_sinf
0e760     A7 FA 61 FC | 	wrlong	result1, fp
0e764     08 4E 05 F1 | 	add	fp, #8
0e768     A7 3C 68 FC | 	wrlong	#30, fp
0e76c     08 4E 85 F1 | 	sub	fp, #8
0e770     A7 12 02 F6 | 	mov	arg01, fp
0e774     30 A4 BF FD | 	call	#_push
0e778     40 00 90 FD | 	jmp	#LR__1223
0e77c                 | LR__1222
0e77c                 | '   print "sin: "; : printerror(40) 
0e77c     00 12 06 F6 | 	mov	arg01, #0
0e780     74 C8 B0 FD | 	call	#__system___getiolock_0372
0e784     FD 12 02 F6 | 	mov	arg01, result1
0e788     BC 73 B0 FD | 	call	#__system___lockmem
0e78c     27 01 00 FF 
0e790     88 15 06 F6 | 	mov	arg02, ##@LR__4331
0e794     00 12 06 F6 | 	mov	arg01, #0
0e798     00 16 06 F6 | 	mov	arg03, #0
0e79c     9C 80 B0 FD | 	call	#__system___basic_print_string
0e7a0     00 12 06 F6 | 	mov	arg01, #0
0e7a4     50 C8 B0 FD | 	call	#__system___getiolock_0372
0e7a8     FD 00 68 FC | 	wrlong	#0, result1
0e7ac     28 12 06 F6 | 	mov	arg01, #40
0e7b0     74 3E B0 FD | 	call	#_printerror
0e7b4     A7 12 02 F6 | 	mov	arg01, fp
0e7b8     EC A3 BF FD | 	call	#_push
0e7bc                 | LR__1223
0e7bc                 | LR__1224
0e7bc                 | LR__1225
0e7bc     A7 F0 03 F6 | 	mov	ptra, fp
0e7c0     B2 00 A0 FD | 	call	#popregs_
0e7c4                 | _do_sin_ret
0e7c4     2D 00 64 FD | 	ret
0e7c8                 | 
0e7c8                 | ' 
0e7c8                 | ' sub do_stick
0e7c8                 | _do_stick
0e7c8     01 4A 05 F6 | 	mov	COUNT_, #1
0e7cc     A8 00 A0 FD | 	call	#pushregs_
0e7d0     10 F0 07 F1 | 	add	ptra, #16
0e7d4     41 00 00 FF 
0e7d8     44 E4 05 F1 | 	add	objptr, ##33348
0e7dc     F2 1E 02 FB | 	rdlong	local01, objptr
0e7e0     0F 17 02 F6 | 	mov	arg03, local01
0e7e4     01 16 66 F0 | 	shl	arg03, #1
0e7e8     0F 17 02 F1 | 	add	arg03, local01
0e7ec     02 16 66 F0 | 	shl	arg03, #2
0e7f0     03 00 00 FF 
0e7f4     04 E4 85 F1 | 	sub	objptr, ##1540
0e7f8     F2 16 02 F1 | 	add	arg03, objptr
0e7fc     0B 17 02 FB | 	rdlong	arg03, arg03
0e800     0C 4E 05 F1 | 	add	fp, #12
0e804     A7 16 62 FC | 	wrlong	arg03, fp
0e808                 | ' 
0e808                 | ' numpar=compiledline(lineptr_e).result.uresult
0e808                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
0e808     0C 4E 85 F1 | 	sub	fp, #12
0e80c     02 16 16 F2 | 	cmp	arg03, #2 wc
0e810     3E 00 00 FF 
0e814     40 E4 85 F1 | 	sub	objptr, ##31808
0e818     3C 00 90 CD |  if_b	jmp	#LR__1230
0e81c     00 12 06 F6 | 	mov	arg01, #0
0e820     D4 C7 B0 FD | 	call	#__system___getiolock_0372
0e824     FD 12 02 F6 | 	mov	arg01, result1
0e828     1C 73 B0 FD | 	call	#__system___lockmem
0e82c     27 01 00 FF 
0e830     8E 15 06 F6 | 	mov	arg02, ##@LR__4332
0e834     00 12 06 F6 | 	mov	arg01, #0
0e838     00 16 06 F6 | 	mov	arg03, #0
0e83c     FC 7F B0 FD | 	call	#__system___basic_print_string
0e840     00 12 06 F6 | 	mov	arg01, #0
0e844     B0 C7 B0 FD | 	call	#__system___getiolock_0372
0e848     FD 00 68 FC | 	wrlong	#0, result1
0e84c     27 12 06 F6 | 	mov	arg01, #39
0e850     D4 3D B0 FD | 	call	#_printerror
0e854     E8 00 90 FD | 	jmp	#LR__1234
0e858                 | LR__1230
0e858                 | ' 
0e858                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
0e858     0C 4E 05 F1 | 	add	fp, #12
0e85c     A7 FE 09 FB | 	rdlong	result3, fp wz
0e860     0C 4E 85 F1 | 	sub	fp, #12
0e864     30 00 90 5D |  if_ne	jmp	#LR__1231
0e868     51 00 00 FF 
0e86c     C0 E5 05 F1 | 	add	objptr, ##41920
0e870     F2 1E 02 FB | 	rdlong	local01, objptr
0e874     51 00 00 FF 
0e878     C0 E5 85 F1 | 	sub	objptr, ##41920
0e87c     A7 1E 62 FC | 	wrlong	local01, fp
0e880     08 4E 05 F1 | 	add	fp, #8
0e884     A7 3A 68 FC | 	wrlong	#29, fp
0e888     08 4E 85 F1 | 	sub	fp, #8
0e88c     A7 12 02 F6 | 	mov	arg01, fp
0e890     14 A3 BF FD | 	call	#_push
0e894     A8 00 90 FD | 	jmp	#LR__1234
0e898                 | LR__1231
0e898     74 A2 BF FD | 	call	#_pop
0e89c     A7 FA 61 FC | 	wrlong	result1, fp
0e8a0     04 4E 05 F1 | 	add	fp, #4
0e8a4     A7 FC 61 FC | 	wrlong	result2, fp
0e8a8     04 4E 05 F1 | 	add	fp, #4
0e8ac     A7 FE 61 FC | 	wrlong	result3, fp
0e8b0                 | ' 
0e8b0                 | ' t1=pop()
0e8b0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
0e8b0     08 4E 85 F1 | 	sub	fp, #8
0e8b4     1C FE 0D F2 | 	cmp	result3, #28 wz
0e8b8     08 4E 05 51 |  if_ne	add	fp, #8
0e8bc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e8c0     08 4E 85 51 |  if_ne	sub	fp, #8
0e8c4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0e8c8     6C 00 90 5D |  if_ne	jmp	#LR__1233
0e8cc     A7 1E 02 FB | 	rdlong	local01, fp
0e8d0     52 00 00 FF 
0e8d4     8C E4 05 F1 | 	add	objptr, ##42124
0e8d8     F2 1E 62 FC | 	wrlong	local01, objptr
0e8dc                 | '   q=t1.result.uresult
0e8dc                 | '   if q<7 then 
0e8dc     52 00 00 FF 
0e8e0     8C E4 85 F1 | 	sub	objptr, ##42124
0e8e4     07 1E 56 F2 | 	cmps	local01, #7 wc
0e8e8     40 00 90 3D |  if_ae	jmp	#LR__1232
0e8ec     52 00 00 FF 
0e8f0     8C E4 05 F1 | 	add	objptr, ##42124
0e8f4     F2 1E 02 FB | 	rdlong	local01, objptr
0e8f8     02 1E 66 F0 | 	shl	local01, #2
0e8fc     CC E4 85 F1 | 	sub	objptr, #204
0e900     F2 1E 02 F1 | 	add	local01, objptr
0e904     0F 1F 02 FB | 	rdlong	local01, local01
0e908     A7 1E 62 FC | 	wrlong	local01, fp
0e90c     08 4E 05 F1 | 	add	fp, #8
0e910     A7 3A 68 FC | 	wrlong	#29, fp
0e914     08 4E 85 F1 | 	sub	fp, #8
0e918     A7 12 02 F6 | 	mov	arg01, fp
0e91c     51 00 00 FF 
0e920     C0 E5 85 F1 | 	sub	objptr, ##41920
0e924     80 A2 BF FD | 	call	#_push
0e928                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
0e928     14 00 90 FD | 	jmp	#LR__1234
0e92c                 | LR__1232
0e92c     29 12 06 F6 | 	mov	arg01, #41
0e930     F4 3C B0 FD | 	call	#_printerror
0e934                 | '      printerror(41) : return
0e934     08 00 90 FD | 	jmp	#LR__1234
0e938                 | LR__1233
0e938     29 12 06 F6 | 	mov	arg01, #41
0e93c     E8 3C B0 FD | 	call	#_printerror
0e940                 | LR__1234
0e940     A7 F0 03 F6 | 	mov	ptra, fp
0e944     B2 00 A0 FD | 	call	#popregs_
0e948                 | _do_stick_ret
0e948     2D 00 64 FD | 	ret
0e94c                 | 
0e94c                 | ' 
0e94c                 | ' sub do_strig
0e94c                 | _do_strig
0e94c     01 4A 05 F6 | 	mov	COUNT_, #1
0e950     A8 00 A0 FD | 	call	#pushregs_
0e954     10 F0 07 F1 | 	add	ptra, #16
0e958     41 00 00 FF 
0e95c     44 E4 05 F1 | 	add	objptr, ##33348
0e960     F2 1E 02 FB | 	rdlong	local01, objptr
0e964     0F 17 02 F6 | 	mov	arg03, local01
0e968     01 16 66 F0 | 	shl	arg03, #1
0e96c     0F 17 02 F1 | 	add	arg03, local01
0e970     02 16 66 F0 | 	shl	arg03, #2
0e974     03 00 00 FF 
0e978     04 E4 85 F1 | 	sub	objptr, ##1540
0e97c     F2 16 02 F1 | 	add	arg03, objptr
0e980     0B 17 02 FB | 	rdlong	arg03, arg03
0e984     0C 4E 05 F1 | 	add	fp, #12
0e988     A7 16 62 FC | 	wrlong	arg03, fp
0e98c                 | ' 
0e98c                 | ' numpar=compiledline(lineptr_e).result.uresult
0e98c                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
0e98c     0C 4E 85 F1 | 	sub	fp, #12
0e990     02 16 16 F2 | 	cmp	arg03, #2 wc
0e994     3E 00 00 FF 
0e998     40 E4 85 F1 | 	sub	objptr, ##31808
0e99c     3C 00 90 CD |  if_b	jmp	#LR__1240
0e9a0     00 12 06 F6 | 	mov	arg01, #0
0e9a4     50 C6 B0 FD | 	call	#__system___getiolock_0372
0e9a8     FD 12 02 F6 | 	mov	arg01, result1
0e9ac     98 71 B0 FD | 	call	#__system___lockmem
0e9b0     27 01 00 FF 
0e9b4     96 15 06 F6 | 	mov	arg02, ##@LR__4333
0e9b8     00 12 06 F6 | 	mov	arg01, #0
0e9bc     00 16 06 F6 | 	mov	arg03, #0
0e9c0     78 7E B0 FD | 	call	#__system___basic_print_string
0e9c4     00 12 06 F6 | 	mov	arg01, #0
0e9c8     2C C6 B0 FD | 	call	#__system___getiolock_0372
0e9cc     FD 00 68 FC | 	wrlong	#0, result1
0e9d0     27 12 06 F6 | 	mov	arg01, #39
0e9d4     50 3C B0 FD | 	call	#_printerror
0e9d8     E8 00 90 FD | 	jmp	#LR__1244
0e9dc                 | LR__1240
0e9dc                 | ' 
0e9dc                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
0e9dc     0C 4E 05 F1 | 	add	fp, #12
0e9e0     A7 FE 09 FB | 	rdlong	result3, fp wz
0e9e4     0C 4E 85 F1 | 	sub	fp, #12
0e9e8     30 00 90 5D |  if_ne	jmp	#LR__1241
0e9ec     51 00 00 FF 
0e9f0     DC E5 05 F1 | 	add	objptr, ##41948
0e9f4     F2 1E 02 FB | 	rdlong	local01, objptr
0e9f8     51 00 00 FF 
0e9fc     DC E5 85 F1 | 	sub	objptr, ##41948
0ea00     A7 1E 62 FC | 	wrlong	local01, fp
0ea04     08 4E 05 F1 | 	add	fp, #8
0ea08     A7 3A 68 FC | 	wrlong	#29, fp
0ea0c     08 4E 85 F1 | 	sub	fp, #8
0ea10     A7 12 02 F6 | 	mov	arg01, fp
0ea14     90 A1 BF FD | 	call	#_push
0ea18     A8 00 90 FD | 	jmp	#LR__1244
0ea1c                 | LR__1241
0ea1c     F0 A0 BF FD | 	call	#_pop
0ea20     A7 FA 61 FC | 	wrlong	result1, fp
0ea24     04 4E 05 F1 | 	add	fp, #4
0ea28     A7 FC 61 FC | 	wrlong	result2, fp
0ea2c     04 4E 05 F1 | 	add	fp, #4
0ea30     A7 FE 61 FC | 	wrlong	result3, fp
0ea34                 | ' 
0ea34                 | ' t1=pop()
0ea34                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
0ea34     08 4E 85 F1 | 	sub	fp, #8
0ea38     1C FE 0D F2 | 	cmp	result3, #28 wz
0ea3c     08 4E 05 51 |  if_ne	add	fp, #8
0ea40     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0ea44     08 4E 85 51 |  if_ne	sub	fp, #8
0ea48     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0ea4c     6C 00 90 5D |  if_ne	jmp	#LR__1243
0ea50     A7 1E 02 FB | 	rdlong	local01, fp
0ea54     52 00 00 FF 
0ea58     8C E4 05 F1 | 	add	objptr, ##42124
0ea5c     F2 1E 62 FC | 	wrlong	local01, objptr
0ea60                 | '   q=t1.result.uresult
0ea60                 | '   if q<7 then 
0ea60     52 00 00 FF 
0ea64     8C E4 85 F1 | 	sub	objptr, ##42124
0ea68     07 1E 56 F2 | 	cmps	local01, #7 wc
0ea6c     40 00 90 3D |  if_ae	jmp	#LR__1242
0ea70     52 00 00 FF 
0ea74     8C E4 05 F1 | 	add	objptr, ##42124
0ea78     F2 1E 02 FB | 	rdlong	local01, objptr
0ea7c     02 1E 66 F0 | 	shl	local01, #2
0ea80     B0 E4 85 F1 | 	sub	objptr, #176
0ea84     F2 1E 02 F1 | 	add	local01, objptr
0ea88     0F 1F 02 FB | 	rdlong	local01, local01
0ea8c     A7 1E 62 FC | 	wrlong	local01, fp
0ea90     08 4E 05 F1 | 	add	fp, #8
0ea94     A7 3A 68 FC | 	wrlong	#29, fp
0ea98     08 4E 85 F1 | 	sub	fp, #8
0ea9c     A7 12 02 F6 | 	mov	arg01, fp
0eaa0     51 00 00 FF 
0eaa4     DC E5 85 F1 | 	sub	objptr, ##41948
0eaa8     FC A0 BF FD | 	call	#_push
0eaac                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
0eaac     14 00 90 FD | 	jmp	#LR__1244
0eab0                 | LR__1242
0eab0     29 12 06 F6 | 	mov	arg01, #41
0eab4     70 3B B0 FD | 	call	#_printerror
0eab8                 | '      printerror(41) : return
0eab8     08 00 90 FD | 	jmp	#LR__1244
0eabc                 | LR__1243
0eabc     29 12 06 F6 | 	mov	arg01, #41
0eac0     64 3B B0 FD | 	call	#_printerror
0eac4                 | LR__1244
0eac4     A7 F0 03 F6 | 	mov	ptra, fp
0eac8     B2 00 A0 FD | 	call	#popregs_
0eacc                 | _do_strig_ret
0eacc     2D 00 64 FD | 	ret
0ead0                 | 
0ead0                 | ' 
0ead0                 | ' sub do_getpixel
0ead0                 | _do_getpixel
0ead0     00 4A 05 F6 | 	mov	COUNT_, #0
0ead4     A8 00 A0 FD | 	call	#pushregs_
0ead8     24 F0 07 F1 | 	add	ptra, #36
0eadc     41 00 00 FF 
0eae0     44 E4 05 F1 | 	add	objptr, ##33348
0eae4     F2 16 02 FB | 	rdlong	arg03, objptr
0eae8     0B 15 02 F6 | 	mov	arg02, arg03
0eaec     01 14 66 F0 | 	shl	arg02, #1
0eaf0     0B 15 02 F1 | 	add	arg02, arg03
0eaf4     02 14 66 F0 | 	shl	arg02, #2
0eaf8     03 00 00 FF 
0eafc     04 E4 85 F1 | 	sub	objptr, ##1540
0eb00     F2 14 02 F1 | 	add	arg02, objptr
0eb04     0A 17 02 FB | 	rdlong	arg03, arg02
0eb08     18 4E 05 F1 | 	add	fp, #24
0eb0c     A7 16 62 FC | 	wrlong	arg03, fp
0eb10                 | ' 
0eb10                 | ' numpar=compiledline(lineptr_e).result.uresult
0eb10                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
0eb10     18 4E 85 F1 | 	sub	fp, #24
0eb14     02 16 0E F2 | 	cmp	arg03, #2 wz
0eb18     3E 00 00 FF 
0eb1c     40 E4 85 F1 | 	sub	objptr, ##31808
0eb20     3C 00 90 AD |  if_e	jmp	#LR__1250
0eb24     00 12 06 F6 | 	mov	arg01, #0
0eb28     CC C4 B0 FD | 	call	#__system___getiolock_0372
0eb2c     FD 12 02 F6 | 	mov	arg01, result1
0eb30     14 70 B0 FD | 	call	#__system___lockmem
0eb34     27 01 00 FF 
0eb38     9E 15 06 F6 | 	mov	arg02, ##@LR__4334
0eb3c     00 12 06 F6 | 	mov	arg01, #0
0eb40     00 16 06 F6 | 	mov	arg03, #0
0eb44     F4 7C B0 FD | 	call	#__system___basic_print_string
0eb48     00 12 06 F6 | 	mov	arg01, #0
0eb4c     A8 C4 B0 FD | 	call	#__system___getiolock_0372
0eb50     FD 00 68 FC | 	wrlong	#0, result1
0eb54     27 12 06 F6 | 	mov	arg01, #39
0eb58     CC 3A B0 FD | 	call	#_printerror
0eb5c     B4 00 90 FD | 	jmp	#LR__1251
0eb60                 | LR__1250
0eb60     AC 9F BF FD | 	call	#_pop
0eb64     FD 16 02 F6 | 	mov	arg03, result1
0eb68     FE 14 02 F6 | 	mov	arg02, result2
0eb6c     FF 12 02 F6 | 	mov	arg01, result3
0eb70     0C 4E 05 F1 | 	add	fp, #12
0eb74     A7 16 62 FC | 	wrlong	arg03, fp
0eb78     04 4E 05 F1 | 	add	fp, #4
0eb7c     A7 14 62 FC | 	wrlong	arg02, fp
0eb80     04 4E 05 F1 | 	add	fp, #4
0eb84     A7 12 62 FC | 	wrlong	arg01, fp
0eb88     14 4E 85 F1 | 	sub	fp, #20
0eb8c     80 9F BF FD | 	call	#_pop
0eb90     FF 16 02 F6 | 	mov	arg03, result3
0eb94     A7 FA 61 FC | 	wrlong	result1, fp
0eb98     04 4E 05 F1 | 	add	fp, #4
0eb9c     A7 FC 61 FC | 	wrlong	result2, fp
0eba0     04 4E 05 F1 | 	add	fp, #4
0eba4     A7 16 62 FC | 	wrlong	arg03, fp
0eba8     08 4E 85 F1 | 	sub	fp, #8
0ebac     A7 12 02 F6 | 	mov	arg01, fp
0ebb0     E4 F7 BF FD | 	call	#_converttoint
0ebb4     1C 4E 05 F1 | 	add	fp, #28
0ebb8     A7 FA 61 FC | 	wrlong	result1, fp
0ebbc     10 4E 85 F1 | 	sub	fp, #16
0ebc0     A7 12 02 F6 | 	mov	arg01, fp
0ebc4     0C 4E 85 F1 | 	sub	fp, #12
0ebc8     CC F7 BF FD | 	call	#_converttoint
0ebcc     FD 16 02 F6 | 	mov	arg03, result1
0ebd0     20 4E 05 F1 | 	add	fp, #32
0ebd4     A7 16 62 FC | 	wrlong	arg03, fp
0ebd8     F2 12 02 FB | 	rdlong	arg01, objptr
0ebdc     04 4E 85 F1 | 	sub	fp, #4
0ebe0     A7 FE 01 FB | 	rdlong	result3, fp
0ebe4     FF 12 02 F1 | 	add	arg01, result3
0ebe8     1C 4E 85 F1 | 	sub	fp, #28
0ebec     0A 16 66 F0 | 	shl	arg03, #10
0ebf0     0B 13 02 F1 | 	add	arg01, arg03
0ebf4     94 3B B0 FD | 	call	#_pspeek
0ebf8     FD FA E1 F8 | 	getbyte	result1, result1, #0
0ebfc     A7 FA 61 FC | 	wrlong	result1, fp
0ec00     08 4E 05 F1 | 	add	fp, #8
0ec04     A7 3A 68 FC | 	wrlong	#29, fp
0ec08     08 4E 85 F1 | 	sub	fp, #8
0ec0c     A7 12 02 F6 | 	mov	arg01, fp
0ec10     94 9F BF FD | 	call	#_push
0ec14                 | LR__1251
0ec14     A7 F0 03 F6 | 	mov	ptra, fp
0ec18     B2 00 A0 FD | 	call	#popregs_
0ec1c                 | _do_getpixel_ret
0ec1c     2D 00 64 FD | 	ret
0ec20                 | 
0ec20                 | ' 
0ec20                 | ' 
0ec20                 | ' 
0ec20                 | ' sub do_defsprite
0ec20                 | _do_defsprite
0ec20     07 4A 05 F6 | 	mov	COUNT_, #7
0ec24     A8 00 A0 FD | 	call	#pushregs_
0ec28     5C F0 07 F1 | 	add	ptra, #92
0ec2c     E0 9E BF FD | 	call	#_pop
0ec30     FD 16 02 F6 | 	mov	arg03, result1
0ec34     FE 14 02 F6 | 	mov	arg02, result2
0ec38     FF 12 02 F6 | 	mov	arg01, result3
0ec3c     30 4E 05 F1 | 	add	fp, #48
0ec40     A7 16 62 FC | 	wrlong	arg03, fp
0ec44     04 4E 05 F1 | 	add	fp, #4
0ec48     A7 14 62 FC | 	wrlong	arg02, fp
0ec4c     04 4E 05 F1 | 	add	fp, #4
0ec50     A7 12 62 FC | 	wrlong	arg01, fp
0ec54     38 4E 85 F1 | 	sub	fp, #56
0ec58     B4 9E BF FD | 	call	#_pop
0ec5c     FD 16 02 F6 | 	mov	arg03, result1
0ec60     FE 14 02 F6 | 	mov	arg02, result2
0ec64     FF 12 02 F6 | 	mov	arg01, result3
0ec68     24 4E 05 F1 | 	add	fp, #36
0ec6c     A7 16 62 FC | 	wrlong	arg03, fp
0ec70     04 4E 05 F1 | 	add	fp, #4
0ec74     A7 14 62 FC | 	wrlong	arg02, fp
0ec78     04 4E 05 F1 | 	add	fp, #4
0ec7c     A7 12 62 FC | 	wrlong	arg01, fp
0ec80     2C 4E 85 F1 | 	sub	fp, #44
0ec84     88 9E BF FD | 	call	#_pop
0ec88     FD 16 02 F6 | 	mov	arg03, result1
0ec8c     FE 14 02 F6 | 	mov	arg02, result2
0ec90     FF 12 02 F6 | 	mov	arg01, result3
0ec94     18 4E 05 F1 | 	add	fp, #24
0ec98     A7 16 62 FC | 	wrlong	arg03, fp
0ec9c     04 4E 05 F1 | 	add	fp, #4
0eca0     A7 14 62 FC | 	wrlong	arg02, fp
0eca4     04 4E 05 F1 | 	add	fp, #4
0eca8     A7 12 62 FC | 	wrlong	arg01, fp
0ecac     20 4E 85 F1 | 	sub	fp, #32
0ecb0     5C 9E BF FD | 	call	#_pop
0ecb4     FD 16 02 F6 | 	mov	arg03, result1
0ecb8     FE 14 02 F6 | 	mov	arg02, result2
0ecbc     FF 12 02 F6 | 	mov	arg01, result3
0ecc0     0C 4E 05 F1 | 	add	fp, #12
0ecc4     A7 16 62 FC | 	wrlong	arg03, fp
0ecc8     04 4E 05 F1 | 	add	fp, #4
0eccc     A7 14 62 FC | 	wrlong	arg02, fp
0ecd0     04 4E 05 F1 | 	add	fp, #4
0ecd4     A7 12 62 FC | 	wrlong	arg01, fp
0ecd8     14 4E 85 F1 | 	sub	fp, #20
0ecdc     30 9E BF FD | 	call	#_pop
0ece0     FF 16 02 F6 | 	mov	arg03, result3
0ece4     A7 FA 61 FC | 	wrlong	result1, fp
0ece8     04 4E 05 F1 | 	add	fp, #4
0ecec     A7 FC 61 FC | 	wrlong	result2, fp
0ecf0     04 4E 05 F1 | 	add	fp, #4
0ecf4     A7 16 62 FC | 	wrlong	arg03, fp
0ecf8     08 4E 85 F1 | 	sub	fp, #8
0ecfc     A7 12 02 F6 | 	mov	arg01, fp
0ed00     94 F6 BF FD | 	call	#_converttoint
0ed04     3C 4E 05 F1 | 	add	fp, #60
0ed08     A7 FA 61 FC | 	wrlong	result1, fp
0ed0c     30 4E 85 F1 | 	sub	fp, #48
0ed10     A7 12 02 F6 | 	mov	arg01, fp
0ed14     0C 4E 85 F1 | 	sub	fp, #12
0ed18     7C F6 BF FD | 	call	#_converttoint
0ed1c     40 4E 05 F1 | 	add	fp, #64
0ed20     A7 FA 61 FC | 	wrlong	result1, fp
0ed24     28 4E 85 F1 | 	sub	fp, #40
0ed28     A7 12 02 F6 | 	mov	arg01, fp
0ed2c     18 4E 85 F1 | 	sub	fp, #24
0ed30     64 F6 BF FD | 	call	#_converttoint
0ed34     44 4E 05 F1 | 	add	fp, #68
0ed38     A7 FA 61 FC | 	wrlong	result1, fp
0ed3c     20 4E 85 F1 | 	sub	fp, #32
0ed40     A7 12 02 F6 | 	mov	arg01, fp
0ed44     24 4E 85 F1 | 	sub	fp, #36
0ed48     4C F6 BF FD | 	call	#_converttoint
0ed4c     48 4E 05 F1 | 	add	fp, #72
0ed50     A7 FA 61 FC | 	wrlong	result1, fp
0ed54     18 4E 85 F1 | 	sub	fp, #24
0ed58     A7 12 02 F6 | 	mov	arg01, fp
0ed5c     30 4E 85 F1 | 	sub	fp, #48
0ed60     34 F6 BF FD | 	call	#_converttoint
0ed64     4C 4E 05 F1 | 	add	fp, #76
0ed68     A7 FA 61 FC | 	wrlong	result1, fp
0ed6c                 | ' 
0ed6c                 | ' t5=pop()
0ed6c                 | ' t4=pop()
0ed6c                 | ' t3=pop()
0ed6c                 | ' t2=pop()
0ed6c                 | ' t1=pop()
0ed6c                 | ' 
0ed6c                 | ' ' do convert, defsprite is not a racing command
0ed6c                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
0ed6c                 | '  
0ed6c                 | ' ' todo: check parameters for linits
0ed6c                 | ' if sprite(a1)<> nil then delete(sprite(a1))
0ed6c     10 4E 85 F1 | 	sub	fp, #16
0ed70     A7 16 02 FB | 	rdlong	arg03, fp
0ed74     3C 4E 85 F1 | 	sub	fp, #60
0ed78     02 16 66 F0 | 	shl	arg03, #2
0ed7c     51 00 00 FF 
0ed80     F8 E5 05 F1 | 	add	objptr, ##41976
0ed84     F2 16 02 F1 | 	add	arg03, objptr
0ed88     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0ed8c     51 00 00 FF 
0ed90     F8 E5 85 F1 | 	sub	objptr, ##41976
0ed94     2C 00 90 AD |  if_e	jmp	#LR__1260
0ed98     3C 4E 05 F1 | 	add	fp, #60
0ed9c     A7 16 02 FB | 	rdlong	arg03, fp
0eda0     3C 4E 85 F1 | 	sub	fp, #60
0eda4     02 16 66 F0 | 	shl	arg03, #2
0eda8     51 00 00 FF 
0edac     F8 E5 05 F1 | 	add	objptr, ##41976
0edb0     F2 16 02 F1 | 	add	arg03, objptr
0edb4     0B 13 02 FB | 	rdlong	arg01, arg03
0edb8     51 00 00 FF 
0edbc     F8 E5 85 F1 | 	sub	objptr, ##41976
0edc0     24 A8 B0 FD | 	call	#__system___gc_free
0edc4                 | LR__1260
0edc4     3C 4E 05 F1 | 	add	fp, #60
0edc8     A7 1E 02 FB | 	rdlong	local01, fp
0edcc     0C 4E 05 F1 | 	add	fp, #12
0edd0     A7 16 02 FB | 	rdlong	arg03, fp
0edd4     04 4E 05 F1 | 	add	fp, #4
0edd8     A7 14 02 FB | 	rdlong	arg02, fp
0eddc     0A 17 02 FD | 	qmul	arg03, arg02
0ede0     02 1E 66 F0 | 	shl	local01, #2
0ede4     51 00 00 FF 
0ede8     F8 E5 05 F1 | 	add	objptr, ##41976
0edec     F2 1E 02 F1 | 	add	local01, objptr
0edf0     4C 4E 85 F1 | 	sub	fp, #76
0edf4     51 00 00 FF 
0edf8     F8 E5 85 F1 | 	sub	objptr, ##41976
0edfc     18 12 62 FD | 	getqx	arg01
0ee00     A8 A6 B0 FD | 	call	#__system___gc_alloc_managed
0ee04     0F FB 61 FC | 	wrlong	result1, local01
0ee08                 | ' for y=a3 to a3+a5-1
0ee08     44 4E 05 F1 | 	add	fp, #68
0ee0c     A7 20 02 FB | 	rdlong	local02, fp
0ee10     0C 4E 05 F1 | 	add	fp, #12
0ee14     A7 20 62 FC | 	wrlong	local02, fp
0ee18     0C 4E 85 F1 | 	sub	fp, #12
0ee1c     A7 22 02 FB | 	rdlong	local03, fp
0ee20     08 4E 05 F1 | 	add	fp, #8
0ee24     A7 24 02 FB | 	rdlong	local04, fp
0ee28     4C 4E 85 F1 | 	sub	fp, #76
0ee2c     12 23 02 F1 | 	add	local03, local04
0ee30                 | LR__1261
0ee30     50 4E 05 F1 | 	add	fp, #80
0ee34     A7 20 02 FB | 	rdlong	local02, fp
0ee38     50 4E 85 F1 | 	sub	fp, #80
0ee3c     11 21 52 F2 | 	cmps	local02, local03 wc
0ee40     10 01 90 3D |  if_ae	jmp	#LR__1264
0ee44                 | '   for x=a2 to a4+a2-1
0ee44     40 4E 05 F1 | 	add	fp, #64
0ee48     A7 1E 02 FB | 	rdlong	local01, fp
0ee4c     52 00 00 FF 
0ee50     60 E4 05 F1 | 	add	objptr, ##42080
0ee54     F2 1E 62 FC | 	wrlong	local01, objptr
0ee58     52 00 00 FF 
0ee5c     60 E4 85 F1 | 	sub	objptr, ##42080
0ee60     08 4E 05 F1 | 	add	fp, #8
0ee64     A7 26 02 FB | 	rdlong	local05, fp
0ee68     08 4E 85 F1 | 	sub	fp, #8
0ee6c     A7 28 02 FB | 	rdlong	local06, fp
0ee70     40 4E 85 F1 | 	sub	fp, #64
0ee74     14 27 02 F1 | 	add	local05, local06
0ee78                 | LR__1262
0ee78     52 00 00 FF 
0ee7c     60 E4 05 F1 | 	add	objptr, ##42080
0ee80     F2 1E 02 FB | 	rdlong	local01, objptr
0ee84     52 00 00 FF 
0ee88     60 E4 85 F1 | 	sub	objptr, ##42080
0ee8c     13 1F 52 F2 | 	cmps	local01, local05 wc
0ee90     A8 00 90 3D |  if_ae	jmp	#LR__1263
0ee94     3C 4E 05 F1 | 	add	fp, #60
0ee98     A7 28 02 FB | 	rdlong	local06, fp
0ee9c     04 4E 05 F1 | 	add	fp, #4
0eea0     A7 24 02 FB | 	rdlong	local04, fp
0eea4     10 4E 05 F1 | 	add	fp, #16
0eea8     A7 20 02 FB | 	rdlong	local02, fp
0eeac     10 1F 02 F6 | 	mov	local01, local02
0eeb0     0C 4E 85 F1 | 	sub	fp, #12
0eeb4     A7 16 02 FB | 	rdlong	arg03, fp
0eeb8     0B 1F 82 F1 | 	sub	local01, arg03
0eebc     04 4E 05 F1 | 	add	fp, #4
0eec0     A7 16 02 FB | 	rdlong	arg03, fp
0eec4     0B 1F 02 FD | 	qmul	local01, arg03
0eec8     02 28 66 F0 | 	shl	local06, #2
0eecc     51 00 00 FF 
0eed0     F8 E5 05 F1 | 	add	objptr, ##41976
0eed4     F2 28 02 F1 | 	add	local06, objptr
0eed8     14 29 02 FB | 	rdlong	local06, local06
0eedc     68 E4 05 F1 | 	add	objptr, #104
0eee0     F2 1E 02 FB | 	rdlong	local01, objptr
0eee4     52 00 00 FF 
0eee8     60 E4 85 F1 | 	sub	objptr, ##42080
0eeec     0F 2B 02 F6 | 	mov	local07, local01
0eef0     12 2B 82 F1 | 	sub	local07, local04
0eef4     F2 12 02 FB | 	rdlong	arg01, objptr
0eef8     0F 13 02 F1 | 	add	arg01, local01
0eefc     48 4E 85 F1 | 	sub	fp, #72
0ef00     0A 20 66 F0 | 	shl	local02, #10
0ef04     10 13 02 F1 | 	add	arg01, local02
0ef08     18 24 62 FD | 	getqx	local04
0ef0c     12 2B 02 F1 | 	add	local07, local04
0ef10     14 2B 02 F1 | 	add	local07, local06
0ef14     74 38 B0 FD | 	call	#_pspeek
0ef18     15 FB 41 FC | 	wrbyte	result1, local07
0ef1c     52 00 00 FF 
0ef20     60 E4 05 F1 | 	add	objptr, ##42080
0ef24     F2 2A 02 FB | 	rdlong	local07, objptr
0ef28     01 2A 06 F1 | 	add	local07, #1
0ef2c     F2 2A 62 FC | 	wrlong	local07, objptr
0ef30     52 00 00 FF 
0ef34     60 E4 85 F1 | 	sub	objptr, ##42080
0ef38     3C FF 9F FD | 	jmp	#LR__1262
0ef3c                 | LR__1263
0ef3c     50 4E 05 F1 | 	add	fp, #80
0ef40     A7 2A 02 FB | 	rdlong	local07, fp
0ef44     01 2A 06 F1 | 	add	local07, #1
0ef48     A7 2A 62 FC | 	wrlong	local07, fp
0ef4c     50 4E 85 F1 | 	sub	fp, #80
0ef50     DC FE 9F FD | 	jmp	#LR__1261
0ef54                 | LR__1264
0ef54     3C 4E 05 F1 | 	add	fp, #60
0ef58     A7 2A 02 FB | 	rdlong	local07, fp
0ef5c     15 13 02 F6 | 	mov	arg01, local07
0ef60     3C 4E 85 F1 | 	sub	fp, #60
0ef64     02 2A 66 F0 | 	shl	local07, #2
0ef68     51 00 00 FF 
0ef6c     F8 E5 05 F1 | 	add	objptr, ##41976
0ef70     F2 2A 02 F1 | 	add	local07, objptr
0ef74     15 15 02 FB | 	rdlong	arg02, local07
0ef78     51 00 00 FF 
0ef7c     F8 E5 85 F1 | 	sub	objptr, ##41976
0ef80     B8 4B B0 FD | 	call	#_hg010b_spin2_setspriteptr
0ef84     3C 4E 05 F1 | 	add	fp, #60
0ef88     A7 12 02 FB | 	rdlong	arg01, fp
0ef8c     0C 4E 05 F1 | 	add	fp, #12
0ef90     A7 14 02 FB | 	rdlong	arg02, fp
0ef94     04 4E 05 F1 | 	add	fp, #4
0ef98     A7 16 02 FB | 	rdlong	arg03, fp
0ef9c     4C 4E 85 F1 | 	sub	fp, #76
0efa0     0C 4C B0 FD | 	call	#_hg010b_spin2_setspritesize
0efa4     A7 F0 03 F6 | 	mov	ptra, fp
0efa8     B2 00 A0 FD | 	call	#popregs_
0efac                 | _do_defsprite_ret
0efac     2D 00 64 FD | 	ret
0efb0                 | 
0efb0                 | ' 
0efb0                 | ' sub do_sprite
0efb0                 | _do_sprite
0efb0     00 4A 05 F6 | 	mov	COUNT_, #0
0efb4     A8 00 A0 FD | 	call	#pushregs_
0efb8     30 F0 07 F1 | 	add	ptra, #48
0efbc     50 9B BF FD | 	call	#_pop
0efc0     FD 16 02 F6 | 	mov	arg03, result1
0efc4     FE 14 02 F6 | 	mov	arg02, result2
0efc8     FF 12 02 F6 | 	mov	arg01, result3
0efcc     18 4E 05 F1 | 	add	fp, #24
0efd0     A7 16 62 FC | 	wrlong	arg03, fp
0efd4     04 4E 05 F1 | 	add	fp, #4
0efd8     A7 14 62 FC | 	wrlong	arg02, fp
0efdc     04 4E 05 F1 | 	add	fp, #4
0efe0     A7 12 62 FC | 	wrlong	arg01, fp
0efe4     20 4E 85 F1 | 	sub	fp, #32
0efe8     24 9B BF FD | 	call	#_pop
0efec     FD 16 02 F6 | 	mov	arg03, result1
0eff0     FE 14 02 F6 | 	mov	arg02, result2
0eff4     FF 12 02 F6 | 	mov	arg01, result3
0eff8     0C 4E 05 F1 | 	add	fp, #12
0effc     A7 16 62 FC | 	wrlong	arg03, fp
0f000     04 4E 05 F1 | 	add	fp, #4
0f004     A7 14 62 FC | 	wrlong	arg02, fp
0f008     04 4E 05 F1 | 	add	fp, #4
0f00c     A7 12 62 FC | 	wrlong	arg01, fp
0f010     14 4E 85 F1 | 	sub	fp, #20
0f014     F8 9A BF FD | 	call	#_pop
0f018     FF 16 02 F6 | 	mov	arg03, result3
0f01c     A7 FA 61 FC | 	wrlong	result1, fp
0f020     04 4E 05 F1 | 	add	fp, #4
0f024     A7 FC 61 FC | 	wrlong	result2, fp
0f028     04 4E 05 F1 | 	add	fp, #4
0f02c     A7 16 62 FC | 	wrlong	arg03, fp
0f030     08 4E 85 F1 | 	sub	fp, #8
0f034     A7 12 02 F6 | 	mov	arg01, fp
0f038     5C F3 BF FD | 	call	#_converttoint
0f03c     24 4E 05 F1 | 	add	fp, #36
0f040     A7 FA 61 FC | 	wrlong	result1, fp
0f044     18 4E 85 F1 | 	sub	fp, #24
0f048     A7 12 02 F6 | 	mov	arg01, fp
0f04c     0C 4E 85 F1 | 	sub	fp, #12
0f050     44 F3 BF FD | 	call	#_converttoint
0f054     28 4E 05 F1 | 	add	fp, #40
0f058     A7 FA 61 FC | 	wrlong	result1, fp
0f05c     10 4E 85 F1 | 	sub	fp, #16
0f060     A7 12 02 F6 | 	mov	arg01, fp
0f064     18 4E 85 F1 | 	sub	fp, #24
0f068     2C F3 BF FD | 	call	#_converttoint
0f06c     2C 4E 05 F1 | 	add	fp, #44
0f070     A7 FA 61 FC | 	wrlong	result1, fp
0f074     08 4E 85 F1 | 	sub	fp, #8
0f078     A7 12 02 FB | 	rdlong	arg01, fp
0f07c     04 4E 05 F1 | 	add	fp, #4
0f080     A7 14 02 FB | 	rdlong	arg02, fp
0f084     FD 16 02 F6 | 	mov	arg03, result1
0f088     28 4E 85 F1 | 	sub	fp, #40
0f08c     D4 4A B0 FD | 	call	#_hg010b_spin2_setspritepos
0f090     A7 F0 03 F6 | 	mov	ptra, fp
0f094     B2 00 A0 FD | 	call	#popregs_
0f098                 | _do_sprite_ret
0f098     2D 00 64 FD | 	ret
0f09c                 | 
0f09c                 | ' 
0f09c                 | ' sub do_mousex
0f09c                 | _do_mousex
0f09c     00 4A 05 F6 | 	mov	COUNT_, #0
0f0a0     A8 00 A0 FD | 	call	#pushregs_
0f0a4     0C F0 07 F1 | 	add	ptra, #12
0f0a8     08 4E 05 F1 | 	add	fp, #8
0f0ac     A7 3A 68 FC | 	wrlong	#29, fp
0f0b0     08 4E 85 F1 | 	sub	fp, #8
0f0b4     51 00 00 FF 
0f0b8     B0 E5 05 F1 | 	add	objptr, ##41904
0f0bc     F2 12 02 FB | 	rdlong	arg01, objptr
0f0c0     51 00 00 FF 
0f0c4     B0 E5 85 F1 | 	sub	objptr, ##41904
0f0c8     A7 12 62 FC | 	wrlong	arg01, fp
0f0cc     A7 12 02 F6 | 	mov	arg01, fp
0f0d0     D4 9A BF FD | 	call	#_push
0f0d4     A7 F0 03 F6 | 	mov	ptra, fp
0f0d8     B2 00 A0 FD | 	call	#popregs_
0f0dc                 | _do_mousex_ret
0f0dc     2D 00 64 FD | 	ret
0f0e0                 | 
0f0e0                 | ' 
0f0e0                 | ' sub do_mousey
0f0e0                 | _do_mousey
0f0e0     00 4A 05 F6 | 	mov	COUNT_, #0
0f0e4     A8 00 A0 FD | 	call	#pushregs_
0f0e8     0C F0 07 F1 | 	add	ptra, #12
0f0ec     08 4E 05 F1 | 	add	fp, #8
0f0f0     A7 3A 68 FC | 	wrlong	#29, fp
0f0f4     08 4E 85 F1 | 	sub	fp, #8
0f0f8     51 00 00 FF 
0f0fc     B4 E5 05 F1 | 	add	objptr, ##41908
0f100     F2 12 02 FB | 	rdlong	arg01, objptr
0f104     51 00 00 FF 
0f108     B4 E5 85 F1 | 	sub	objptr, ##41908
0f10c     A7 12 62 FC | 	wrlong	arg01, fp
0f110     A7 12 02 F6 | 	mov	arg01, fp
0f114     90 9A BF FD | 	call	#_push
0f118     A7 F0 03 F6 | 	mov	ptra, fp
0f11c     B2 00 A0 FD | 	call	#popregs_
0f120                 | _do_mousey_ret
0f120     2D 00 64 FD | 	ret
0f124                 | 
0f124                 | ' 
0f124                 | ' sub do_mousew
0f124                 | _do_mousew
0f124     00 4A 05 F6 | 	mov	COUNT_, #0
0f128     A8 00 A0 FD | 	call	#pushregs_
0f12c     0C F0 07 F1 | 	add	ptra, #12
0f130     08 4E 05 F1 | 	add	fp, #8
0f134     A7 38 68 FC | 	wrlong	#28, fp
0f138     08 4E 85 F1 | 	sub	fp, #8
0f13c     51 00 00 FF 
0f140     BC E5 05 F1 | 	add	objptr, ##41916
0f144     F2 12 02 FB | 	rdlong	arg01, objptr
0f148     51 00 00 FF 
0f14c     BC E5 85 F1 | 	sub	objptr, ##41916
0f150     A7 12 62 FC | 	wrlong	arg01, fp
0f154     A7 12 02 F6 | 	mov	arg01, fp
0f158     4C 9A BF FD | 	call	#_push
0f15c     A7 F0 03 F6 | 	mov	ptra, fp
0f160     B2 00 A0 FD | 	call	#popregs_
0f164                 | _do_mousew_ret
0f164     2D 00 64 FD | 	ret
0f168                 | 
0f168                 | ' 
0f168                 | ' sub do_mousek
0f168                 | _do_mousek
0f168     00 4A 05 F6 | 	mov	COUNT_, #0
0f16c     A8 00 A0 FD | 	call	#pushregs_
0f170     0C F0 07 F1 | 	add	ptra, #12
0f174     08 4E 05 F1 | 	add	fp, #8
0f178     A7 3A 68 FC | 	wrlong	#29, fp
0f17c     08 4E 85 F1 | 	sub	fp, #8
0f180     51 00 00 FF 
0f184     B8 E5 05 F1 | 	add	objptr, ##41912
0f188     F2 12 02 FB | 	rdlong	arg01, objptr
0f18c     51 00 00 FF 
0f190     B8 E5 85 F1 | 	sub	objptr, ##41912
0f194     A7 12 62 FC | 	wrlong	arg01, fp
0f198     A7 12 02 F6 | 	mov	arg01, fp
0f19c     08 9A BF FD | 	call	#_push
0f1a0     A7 F0 03 F6 | 	mov	ptra, fp
0f1a4     B2 00 A0 FD | 	call	#popregs_
0f1a8                 | _do_mousek_ret
0f1a8     2D 00 64 FD | 	ret
0f1ac                 | 
0f1ac                 | ' 
0f1ac                 | ' 
0f1ac                 | ' sub do_rdpin
0f1ac                 | _do_rdpin
0f1ac     00 4A 05 F6 | 	mov	COUNT_, #0
0f1b0     A8 00 A0 FD | 	call	#pushregs_
0f1b4     0C F0 07 F1 | 	add	ptra, #12
0f1b8     54 99 BF FD | 	call	#_pop
0f1bc     A7 FA 61 FC | 	wrlong	result1, fp
0f1c0     04 4E 05 F1 | 	add	fp, #4
0f1c4     A7 FC 61 FC | 	wrlong	result2, fp
0f1c8     04 4E 05 F1 | 	add	fp, #4
0f1cc     A7 FE 61 FC | 	wrlong	result3, fp
0f1d0     08 4E 85 F1 | 	sub	fp, #8
0f1d4     A7 12 02 F6 | 	mov	arg01, fp
0f1d8     BC F1 BF FD | 	call	#_converttoint
0f1dc     FD FA 89 FA | 	rdpin	result1, result1
0f1e0     52 00 00 FF 
0f1e4     B0 E4 05 F1 | 	add	objptr, ##42160
0f1e8     F2 FA 61 FC | 	wrlong	result1, objptr
0f1ec     52 00 00 FF 
0f1f0     B0 E4 85 F1 | 	sub	objptr, ##42160
0f1f4     08 4E 05 F1 | 	add	fp, #8
0f1f8     A7 3A 68 FC | 	wrlong	#29, fp
0f1fc     08 4E 85 F1 | 	sub	fp, #8
0f200     A7 08 68 FC | 	wrlong	#4, fp
0f204     A7 12 02 F6 | 	mov	arg01, fp
0f208     9C 99 BF FD | 	call	#_push
0f20c     A7 F0 03 F6 | 	mov	ptra, fp
0f210     B2 00 A0 FD | 	call	#popregs_
0f214                 | _do_rdpin_ret
0f214     2D 00 64 FD | 	ret
0f218                 | 
0f218                 | ' 
0f218                 | ' sub do_rqpin
0f218                 | _do_rqpin
0f218     00 4A 05 F6 | 	mov	COUNT_, #0
0f21c     A8 00 A0 FD | 	call	#pushregs_
0f220     0C F0 07 F1 | 	add	ptra, #12
0f224     E8 98 BF FD | 	call	#_pop
0f228     A7 FA 61 FC | 	wrlong	result1, fp
0f22c     04 4E 05 F1 | 	add	fp, #4
0f230     A7 FC 61 FC | 	wrlong	result2, fp
0f234     04 4E 05 F1 | 	add	fp, #4
0f238     A7 FE 61 FC | 	wrlong	result3, fp
0f23c     08 4E 85 F1 | 	sub	fp, #8
0f240     A7 12 02 F6 | 	mov	arg01, fp
0f244     50 F1 BF FD | 	call	#_converttoint
0f248     FD 12 02 F6 | 	mov	arg01, result1
0f24c     00 FA 05 F6 | 	mov	result1, #0
0f250     09 FB 81 FA | 	rqpin	result1, arg01
0f254     52 00 00 FF 
0f258     B0 E4 05 F1 | 	add	objptr, ##42160
0f25c     F2 FA 61 FC | 	wrlong	result1, objptr
0f260     52 00 00 FF 
0f264     B0 E4 85 F1 | 	sub	objptr, ##42160
0f268     08 4E 05 F1 | 	add	fp, #8
0f26c     A7 3A 68 FC | 	wrlong	#29, fp
0f270     08 4E 85 F1 | 	sub	fp, #8
0f274     A7 08 68 FC | 	wrlong	#4, fp
0f278     A7 12 02 F6 | 	mov	arg01, fp
0f27c     28 99 BF FD | 	call	#_push
0f280     A7 F0 03 F6 | 	mov	ptra, fp
0f284     B2 00 A0 FD | 	call	#popregs_
0f288                 | _do_rqpin_ret
0f288     2D 00 64 FD | 	ret
0f28c                 | 
0f28c                 | ' 
0f28c                 | ' sub do_pinread
0f28c                 | _do_pinread
0f28c     00 4A 05 F6 | 	mov	COUNT_, #0
0f290     A8 00 A0 FD | 	call	#pushregs_
0f294     0C F0 07 F1 | 	add	ptra, #12
0f298     74 98 BF FD | 	call	#_pop
0f29c     A7 FA 61 FC | 	wrlong	result1, fp
0f2a0     04 4E 05 F1 | 	add	fp, #4
0f2a4     A7 FC 61 FC | 	wrlong	result2, fp
0f2a8     04 4E 05 F1 | 	add	fp, #4
0f2ac     A7 FE 61 FC | 	wrlong	result3, fp
0f2b0     08 4E 85 F1 | 	sub	fp, #8
0f2b4     A7 12 02 F6 | 	mov	arg01, fp
0f2b8     DC F0 BF FD | 	call	#_converttoint
0f2bc     FD 12 02 F6 | 	mov	arg01, result1
0f2c0     20 12 CE F7 | 	test	arg01, #32 wz
0f2c4     FF FB 01 56 |  if_ne	mov	result1, inb
0f2c8     FE FB 01 A6 |  if_e	mov	result1, ina
0f2cc     09 FB 41 F0 | 	shr	result1, arg01
0f2d0     06 12 46 F0 | 	shr	arg01, #6
0f2d4     09 FB 41 F7 | 	zerox	result1, arg01
0f2d8     52 00 00 FF 
0f2dc     B0 E4 05 F1 | 	add	objptr, ##42160
0f2e0     F2 FA 61 FC | 	wrlong	result1, objptr
0f2e4     52 00 00 FF 
0f2e8     B0 E4 85 F1 | 	sub	objptr, ##42160
0f2ec     08 4E 05 F1 | 	add	fp, #8
0f2f0     A7 3A 68 FC | 	wrlong	#29, fp
0f2f4     08 4E 85 F1 | 	sub	fp, #8
0f2f8     A7 08 68 FC | 	wrlong	#4, fp
0f2fc     A7 12 02 F6 | 	mov	arg01, fp
0f300     A4 98 BF FD | 	call	#_push
0f304     A7 F0 03 F6 | 	mov	ptra, fp
0f308     B2 00 A0 FD | 	call	#popregs_
0f30c                 | _do_pinread_ret
0f30c     2D 00 64 FD | 	ret
0f310                 | 
0f310                 | ' 
0f310                 | ' sub do_gettime
0f310                 | _do_gettime
0f310     02 4A 05 F6 | 	mov	COUNT_, #2
0f314     A8 00 A0 FD | 	call	#pushregs_
0f318     14 F0 07 F1 | 	add	ptra, #20
0f31c                 | ' 
0f31c                 | ' const asm 
0f31c     1A 1E 72 FD | 	getct	local01 wc
0f320     1A 20 62 FD | 	getct	local02
0f324                 | ' 
0f324                 | ' return hi1, lo1
0f324     10 FD 01 F6 | 	mov	result2, local02
0f328     A7 1E 62 FC | 	wrlong	local01, fp
0f32c     04 4E 05 F1 | 	add	fp, #4
0f330     A7 FC 61 FC | 	wrlong	result2, fp
0f334     0C 4E 05 F1 | 	add	fp, #12
0f338     A7 3A 68 FC | 	wrlong	#29, fp
0f33c     0C 4E 85 F1 | 	sub	fp, #12
0f340     A7 12 02 FB | 	rdlong	arg01, fp
0f344     04 4E 05 F1 | 	add	fp, #4
0f348     A7 12 62 FC | 	wrlong	arg01, fp
0f34c     08 4E 85 F1 | 	sub	fp, #8
0f350     A7 12 02 FB | 	rdlong	arg01, fp
0f354     0C 4E 05 F1 | 	add	fp, #12
0f358     A7 12 62 FC | 	wrlong	arg01, fp
0f35c     04 4E 85 F1 | 	sub	fp, #4
0f360     A7 12 02 F6 | 	mov	arg01, fp
0f364     08 4E 85 F1 | 	sub	fp, #8
0f368     3C 98 BF FD | 	call	#_push
0f36c     A7 F0 03 F6 | 	mov	ptra, fp
0f370     B2 00 A0 FD | 	call	#popregs_
0f374                 | _do_gettime_ret
0f374     2D 00 64 FD | 	ret
0f378                 | 
0f378                 | '    
0f378                 | ' 
0f378                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
0f378                 | ' 
0f378                 | ' '' ----------------------------- Clear the screen
0f378                 | ' 
0f378                 | ' sub do_cls
0f378                 | _do_cls
0f378     2E 00 00 FF 
0f37c     00 E4 05 F1 | 	add	objptr, ##23552
0f380     F2 12 02 FB | 	rdlong	arg01, objptr
0f384     04 E4 85 F1 | 	sub	objptr, #4
0f388     F2 14 02 FB | 	rdlong	arg02, objptr
0f38c     2D 00 00 FF 
0f390     FC E5 85 F1 | 	sub	objptr, ##23548
0f394     D0 54 B0 FD | 	call	#_hg010b_spin2_cls
0f398     2E 00 00 FF 
0f39c     00 E4 05 F1 | 	add	objptr, ##23552
0f3a0     F2 14 02 FB | 	rdlong	arg02, objptr
0f3a4     14 E4 85 F1 | 	sub	objptr, #20
0f3a8     F2 14 62 FC | 	wrlong	arg02, objptr
0f3ac     2D 00 00 FF 
0f3b0     EC E5 85 F1 | 	sub	objptr, ##23532
0f3b4                 | ' cls(ink,paper): plot_color=ink: print
0f3b4     00 12 06 F6 | 	mov	arg01, #0
0f3b8     3C BC B0 FD | 	call	#__system___getiolock_0372
0f3bc     FD 12 02 F6 | 	mov	arg01, result1
0f3c0     84 67 B0 FD | 	call	#__system___lockmem
0f3c4     00 12 06 F6 | 	mov	arg01, #0
0f3c8     0A 14 06 F6 | 	mov	arg02, #10
0f3cc     00 16 06 F6 | 	mov	arg03, #0
0f3d0     10 74 B0 FD | 	call	#__system___basic_print_char
0f3d4     00 12 06 F6 | 	mov	arg01, #0
0f3d8     1C BC B0 FD | 	call	#__system___getiolock_0372
0f3dc     FD 00 68 FC | 	wrlong	#0, result1
0f3e0                 | _do_cls_ret
0f3e0     2D 00 64 FD | 	ret
0f3e4                 | 
0f3e4                 | ' 
0f3e4                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
0f3e4                 | ' 
0f3e4                 | ' sub do_color
0f3e4                 | _do_color
0f3e4     03 4A 05 F6 | 	mov	COUNT_, #3
0f3e8     A8 00 A0 FD | 	call	#pushregs_
0f3ec     20 97 BF FD | 	call	#_pop
0f3f0     FD 1E 02 F6 | 	mov	local01, result1
0f3f4     FE 20 02 F6 | 	mov	local02, result2
0f3f8     FF 22 02 F6 | 	mov	local03, result3
0f3fc     2D 00 00 FF 
0f400     EC E5 05 F1 | 	add	objptr, ##23532
0f404     F2 1E 62 FC | 	wrlong	local01, objptr
0f408     2D 00 00 FF 
0f40c     EC E5 85 F1 | 	sub	objptr, ##23532
0f410     A7 F0 03 F6 | 	mov	ptra, fp
0f414     B2 00 A0 FD | 	call	#popregs_
0f418                 | _do_color_ret
0f418     2D 00 64 FD | 	ret
0f41c                 | 
0f41c                 | ' 
0f41c                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
0f41c                 | ' 
0f41c                 | ' sub do_plot
0f41c                 | _do_plot
0f41c     08 4A 05 F6 | 	mov	COUNT_, #8
0f420     A8 00 A0 FD | 	call	#pushregs_
0f424     E8 96 BF FD | 	call	#_pop
0f428     FD 1E 02 F6 | 	mov	local01, result1
0f42c     FE 14 02 F6 | 	mov	arg02, result2
0f430     FF 16 02 F6 | 	mov	arg03, result3
0f434     0A 21 02 F6 | 	mov	local02, arg02
0f438     0B 23 02 F6 | 	mov	local03, arg03
0f43c     D0 96 BF FD | 	call	#_pop
0f440     FD 24 02 F6 | 	mov	local04, result1
0f444     FE 26 02 F6 | 	mov	local05, result2
0f448     FF 28 02 F6 | 	mov	local06, result3
0f44c     12 2B 02 F6 | 	mov	local07, local04
0f450     0F 2D 02 F6 | 	mov	local08, local01
0f454                 | ' t2=pop() 					 
0f454                 | ' t1=pop()
0f454                 | ' 
0f454                 | ' x=t1.result.iresult
0f454                 | ' y=t2.result.iresult	
0f454                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) then 					  
0f454     1C 28 0E F2 | 	cmp	local06, #28 wz
0f458     1D 28 0E 52 |  if_ne	cmp	local06, #29 wz
0f45c     44 00 90 5D |  if_ne	jmp	#LR__1270
0f460     1C 22 0E F2 | 	cmp	local03, #28 wz
0f464     1D 22 0E 52 |  if_ne	cmp	local03, #29 wz
0f468     38 00 90 5D |  if_ne	jmp	#LR__1270
0f46c     2D 00 00 FF 
0f470     F0 E5 05 F1 | 	add	objptr, ##23536
0f474     F2 2A 62 FC | 	wrlong	local07, objptr
0f478     04 E4 05 F1 | 	add	objptr, #4
0f47c     F2 2C 62 FC | 	wrlong	local08, objptr
0f480     04 E4 85 F1 | 	sub	objptr, #4
0f484     F2 12 02 FB | 	rdlong	arg01, objptr
0f488     04 E4 85 F1 | 	sub	objptr, #4
0f48c     F2 16 02 FB | 	rdlong	arg03, objptr
0f490     2D 00 00 FF 
0f494     EC E5 85 F1 | 	sub	objptr, ##23532
0f498     16 15 02 F6 | 	mov	arg02, local08
0f49c     5C 47 B0 FD | 	call	#_hg010b_spin2_putpixel
0f4a0     A4 00 90 FD | 	jmp	#LR__1275
0f4a4                 | LR__1270
0f4a4                 | '   if t1.result_type=result_float then x=round(t1.result.fresult)
0f4a4     1E 28 0E F2 | 	cmp	local06, #30 wz
0f4a8     10 00 90 5D |  if_ne	jmp	#LR__1271
0f4ac     12 13 02 F6 | 	mov	arg01, local04
0f4b0     01 14 06 F6 | 	mov	arg02, #1
0f4b4     68 94 B0 FD | 	call	#__system___float_tointeger
0f4b8     FD 2A 02 F6 | 	mov	local07, result1
0f4bc                 | LR__1271
0f4bc                 | '   if t2.result_type=result_float then y=round(t2.result.fresult)
0f4bc     1E 22 0E F2 | 	cmp	local03, #30 wz
0f4c0     10 00 90 5D |  if_ne	jmp	#LR__1272
0f4c4     0F 13 02 F6 | 	mov	arg01, local01
0f4c8     01 14 06 F6 | 	mov	arg02, #1
0f4cc     50 94 B0 FD | 	call	#__system___float_tointeger
0f4d0     FD 2C 02 F6 | 	mov	local08, result1
0f4d4                 | LR__1272
0f4d4                 | '   if t1.result_type=result_string then x=val(t1.result.sresult)
0f4d4     1F 28 0E F2 | 	cmp	local06, #31 wz
0f4d8     18 00 90 5D |  if_ne	jmp	#LR__1273
0f4dc     12 13 02 F6 | 	mov	arg01, local04
0f4e0     5C 97 B0 FD | 	call	#__system____builtin_atof
0f4e4     FD 12 02 F6 | 	mov	arg01, result1
0f4e8     00 14 06 F6 | 	mov	arg02, #0
0f4ec     30 94 B0 FD | 	call	#__system___float_tointeger
0f4f0     FD 2A 02 F6 | 	mov	local07, result1
0f4f4                 | LR__1273
0f4f4                 | '   if t2.result_type=result_string then y=val(t2.result.sresult)
0f4f4     1F 22 0E F2 | 	cmp	local03, #31 wz
0f4f8     18 00 90 5D |  if_ne	jmp	#LR__1274
0f4fc     0F 13 02 F6 | 	mov	arg01, local01
0f500     3C 97 B0 FD | 	call	#__system____builtin_atof
0f504     FD 12 02 F6 | 	mov	arg01, result1
0f508     00 14 06 F6 | 	mov	arg02, #0
0f50c     10 94 B0 FD | 	call	#__system___float_tointeger
0f510     FD 2C 02 F6 | 	mov	local08, result1
0f514                 | LR__1274
0f514     2D 00 00 FF 
0f518     F0 E5 05 F1 | 	add	objptr, ##23536
0f51c     F2 2A 62 FC | 	wrlong	local07, objptr
0f520     04 E4 05 F1 | 	add	objptr, #4
0f524     F2 2C 62 FC | 	wrlong	local08, objptr
0f528     04 E4 85 F1 | 	sub	objptr, #4
0f52c     F2 12 02 FB | 	rdlong	arg01, objptr
0f530     04 E4 85 F1 | 	sub	objptr, #4
0f534     F2 16 02 FB | 	rdlong	arg03, objptr
0f538     2D 00 00 FF 
0f53c     EC E5 85 F1 | 	sub	objptr, ##23532
0f540     16 15 02 F6 | 	mov	arg02, local08
0f544     B4 46 B0 FD | 	call	#_hg010b_spin2_putpixel
0f548                 | LR__1275
0f548     A7 F0 03 F6 | 	mov	ptra, fp
0f54c     B2 00 A0 FD | 	call	#popregs_
0f550                 | _do_plot_ret
0f550     2D 00 64 FD | 	ret
0f554                 | 
0f554                 | ' 
0f554                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
0f554                 | ' 
0f554                 | ' sub do_draw
0f554                 | _do_draw
0f554     08 4A 05 F6 | 	mov	COUNT_, #8
0f558     A8 00 A0 FD | 	call	#pushregs_
0f55c     B0 95 BF FD | 	call	#_pop
0f560     FD 1E 02 F6 | 	mov	local01, result1
0f564     FE 18 02 F6 | 	mov	arg04, result2
0f568     FF 16 02 F6 | 	mov	arg03, result3
0f56c     0C 21 02 F6 | 	mov	local02, arg04
0f570     0B 23 02 F6 | 	mov	local03, arg03
0f574     98 95 BF FD | 	call	#_pop
0f578     FD 24 02 F6 | 	mov	local04, result1
0f57c     FE 26 02 F6 | 	mov	local05, result2
0f580     FF 28 02 F6 | 	mov	local06, result3
0f584     12 2B 02 F6 | 	mov	local07, local04
0f588     0F 2D 02 F6 | 	mov	local08, local01
0f58c                 | ' 
0f58c                 | ' t2=pop()
0f58c                 | ' t1=pop()
0f58c                 | ' x=t1.result.iresult
0f58c                 | ' y=t2.result.iresult
0f58c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) then 					  
0f58c     1C 28 0E F2 | 	cmp	local06, #28 wz
0f590     1D 28 0E 52 |  if_ne	cmp	local06, #29 wz
0f594     5C 00 90 5D |  if_ne	jmp	#LR__1280
0f598     1C 22 0E F2 | 	cmp	local03, #28 wz
0f59c     1D 22 0E 52 |  if_ne	cmp	local03, #29 wz
0f5a0     50 00 90 5D |  if_ne	jmp	#LR__1280
0f5a4     2D 00 00 FF 
0f5a8     F0 E5 05 F1 | 	add	objptr, ##23536
0f5ac     F2 12 02 FB | 	rdlong	arg01, objptr
0f5b0     04 E4 05 F1 | 	add	objptr, #4
0f5b4     F2 14 02 FB | 	rdlong	arg02, objptr
0f5b8     08 E4 85 F1 | 	sub	objptr, #8
0f5bc     F2 1A 02 FB | 	rdlong	arg05, objptr
0f5c0     2D 00 00 FF 
0f5c4     EC E5 85 F1 | 	sub	objptr, ##23532
0f5c8     15 17 02 F6 | 	mov	arg03, local07
0f5cc     16 19 02 F6 | 	mov	arg04, local08
0f5d0     D8 48 B0 FD | 	call	#_hg010b_spin2_draw
0f5d4     2D 00 00 FF 
0f5d8     F0 E5 05 F1 | 	add	objptr, ##23536
0f5dc     F2 2A 62 FC | 	wrlong	local07, objptr
0f5e0     04 E4 05 F1 | 	add	objptr, #4
0f5e4     F2 2C 62 FC | 	wrlong	local08, objptr
0f5e8     2D 00 00 FF 
0f5ec     F4 E5 85 F1 | 	sub	objptr, ##23540
0f5f0     BC 00 90 FD | 	jmp	#LR__1285
0f5f4                 | LR__1280
0f5f4                 | '   if t1.result_type=result_float then x=round(t1.result.fresult)
0f5f4     1E 28 0E F2 | 	cmp	local06, #30 wz
0f5f8     10 00 90 5D |  if_ne	jmp	#LR__1281
0f5fc     12 13 02 F6 | 	mov	arg01, local04
0f600     01 14 06 F6 | 	mov	arg02, #1
0f604     18 93 B0 FD | 	call	#__system___float_tointeger
0f608     FD 2A 02 F6 | 	mov	local07, result1
0f60c                 | LR__1281
0f60c                 | '   if t2.result_type=result_float then y=round(t2.result.fresult)
0f60c     1E 22 0E F2 | 	cmp	local03, #30 wz
0f610     10 00 90 5D |  if_ne	jmp	#LR__1282
0f614     0F 13 02 F6 | 	mov	arg01, local01
0f618     01 14 06 F6 | 	mov	arg02, #1
0f61c     00 93 B0 FD | 	call	#__system___float_tointeger
0f620     FD 2C 02 F6 | 	mov	local08, result1
0f624                 | LR__1282
0f624                 | '   if t1.result_type=result_string then x=val(t1.result.fresult)
0f624     1F 28 0E F2 | 	cmp	local06, #31 wz
0f628     18 00 90 5D |  if_ne	jmp	#LR__1283
0f62c     12 13 02 F6 | 	mov	arg01, local04
0f630     0C 96 B0 FD | 	call	#__system____builtin_atof
0f634     FD 12 02 F6 | 	mov	arg01, result1
0f638     00 14 06 F6 | 	mov	arg02, #0
0f63c     E0 92 B0 FD | 	call	#__system___float_tointeger
0f640     FD 2A 02 F6 | 	mov	local07, result1
0f644                 | LR__1283
0f644                 | '   if t2.result_type=result_string then y=val(t2.result.fresult)    
0f644     1F 22 0E F2 | 	cmp	local03, #31 wz
0f648     18 00 90 5D |  if_ne	jmp	#LR__1284
0f64c     0F 13 02 F6 | 	mov	arg01, local01
0f650     EC 95 B0 FD | 	call	#__system____builtin_atof
0f654     FD 12 02 F6 | 	mov	arg01, result1
0f658     00 14 06 F6 | 	mov	arg02, #0
0f65c     C0 92 B0 FD | 	call	#__system___float_tointeger
0f660     FD 2C 02 F6 | 	mov	local08, result1
0f664                 | LR__1284
0f664     2D 00 00 FF 
0f668     F0 E5 05 F1 | 	add	objptr, ##23536
0f66c     F2 12 02 FB | 	rdlong	arg01, objptr
0f670     04 E4 05 F1 | 	add	objptr, #4
0f674     F2 14 02 FB | 	rdlong	arg02, objptr
0f678     08 E4 85 F1 | 	sub	objptr, #8
0f67c     F2 1A 02 FB | 	rdlong	arg05, objptr
0f680     2D 00 00 FF 
0f684     EC E5 85 F1 | 	sub	objptr, ##23532
0f688     15 17 02 F6 | 	mov	arg03, local07
0f68c     16 19 02 F6 | 	mov	arg04, local08
0f690     18 48 B0 FD | 	call	#_hg010b_spin2_draw
0f694     2D 00 00 FF 
0f698     F0 E5 05 F1 | 	add	objptr, ##23536
0f69c     F2 2A 62 FC | 	wrlong	local07, objptr
0f6a0     04 E4 05 F1 | 	add	objptr, #4
0f6a4     F2 2C 62 FC | 	wrlong	local08, objptr
0f6a8     2D 00 00 FF 
0f6ac     F4 E5 85 F1 | 	sub	objptr, ##23540
0f6b0                 | LR__1285
0f6b0     A7 F0 03 F6 | 	mov	ptra, fp
0f6b4     B2 00 A0 FD | 	call	#popregs_
0f6b8                 | _do_draw_ret
0f6b8     2D 00 64 FD | 	ret
0f6bc                 | 
0f6bc                 | ' 
0f6bc                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
0f6bc                 | ' 
0f6bc                 | ' sub do_fcircle
0f6bc                 | _do_fcircle
0f6bc     02 4A 05 F6 | 	mov	COUNT_, #2
0f6c0     A8 00 A0 FD | 	call	#pushregs_
0f6c4     24 F0 07 F1 | 	add	ptra, #36
0f6c8     44 94 BF FD | 	call	#_pop
0f6cc     FD 18 02 F6 | 	mov	arg04, result1
0f6d0     FE 16 02 F6 | 	mov	arg03, result2
0f6d4     FF 14 02 F6 | 	mov	arg02, result3
0f6d8     18 4E 05 F1 | 	add	fp, #24
0f6dc     A7 18 62 FC | 	wrlong	arg04, fp
0f6e0     04 4E 05 F1 | 	add	fp, #4
0f6e4     A7 16 62 FC | 	wrlong	arg03, fp
0f6e8     04 4E 05 F1 | 	add	fp, #4
0f6ec     A7 14 62 FC | 	wrlong	arg02, fp
0f6f0     20 4E 85 F1 | 	sub	fp, #32
0f6f4     18 94 BF FD | 	call	#_pop
0f6f8     FD 18 02 F6 | 	mov	arg04, result1
0f6fc     FE 16 02 F6 | 	mov	arg03, result2
0f700     FF 1E 02 F6 | 	mov	local01, result3
0f704     0C 4E 05 F1 | 	add	fp, #12
0f708     A7 18 62 FC | 	wrlong	arg04, fp
0f70c     04 4E 05 F1 | 	add	fp, #4
0f710     A7 16 62 FC | 	wrlong	arg03, fp
0f714     04 4E 05 F1 | 	add	fp, #4
0f718     A7 1E 62 FC | 	wrlong	local01, fp
0f71c     14 4E 85 F1 | 	sub	fp, #20
0f720     EC 93 BF FD | 	call	#_pop
0f724     A7 FA 61 FC | 	wrlong	result1, fp
0f728     04 4E 05 F1 | 	add	fp, #4
0f72c     A7 FC 61 FC | 	wrlong	result2, fp
0f730     04 4E 05 F1 | 	add	fp, #4
0f734     A7 FE 61 FC | 	wrlong	result3, fp
0f738                 | ' 
0f738                 | ' t3=pop()
0f738                 | ' t2=pop()
0f738                 | ' t1=pop()
0f738                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f738     FF 18 02 F6 | 	mov	arg04, result3
0f73c     08 4E 85 F1 | 	sub	fp, #8
0f740     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f744     08 4E 05 51 |  if_ne	add	fp, #8
0f748     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0f74c     08 4E 85 51 |  if_ne	sub	fp, #8
0f750     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0f754     7C 00 90 5D |  if_ne	jmp	#LR__1290
0f758     14 4E 05 F1 | 	add	fp, #20
0f75c     A7 1E 02 FB | 	rdlong	local01, fp
0f760     14 4E 85 F1 | 	sub	fp, #20
0f764     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f768     14 4E 05 51 |  if_ne	add	fp, #20
0f76c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f770     14 4E 85 51 |  if_ne	sub	fp, #20
0f774     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f778     58 00 90 5D |  if_ne	jmp	#LR__1290
0f77c     20 4E 05 F1 | 	add	fp, #32
0f780     A7 1E 02 FB | 	rdlong	local01, fp
0f784     20 4E 85 F1 | 	sub	fp, #32
0f788     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f78c     20 4E 05 51 |  if_ne	add	fp, #32
0f790     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f794     20 4E 85 51 |  if_ne	sub	fp, #32
0f798     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f79c     34 00 90 5D |  if_ne	jmp	#LR__1290
0f7a0     A7 12 02 FB | 	rdlong	arg01, fp
0f7a4     0C 4E 05 F1 | 	add	fp, #12
0f7a8     A7 14 02 FB | 	rdlong	arg02, fp
0f7ac     0C 4E 05 F1 | 	add	fp, #12
0f7b0     A7 16 02 FB | 	rdlong	arg03, fp
0f7b4     18 4E 85 F1 | 	sub	fp, #24
0f7b8     2D 00 00 FF 
0f7bc     EC E5 05 F1 | 	add	objptr, ##23532
0f7c0     F2 18 02 FB | 	rdlong	arg04, objptr
0f7c4     2D 00 00 FF 
0f7c8     EC E5 85 F1 | 	sub	objptr, ##23532
0f7cc     60 4B B0 FD | 	call	#_hg010b_spin2_fcircle
0f7d0                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f7d0     54 00 90 FD | 	jmp	#LR__1291
0f7d4                 | LR__1290
0f7d4     A7 12 02 F6 | 	mov	arg01, fp
0f7d8     BC EB BF FD | 	call	#_converttoint
0f7dc     FD 1E 02 F6 | 	mov	local01, result1
0f7e0     0C 4E 05 F1 | 	add	fp, #12
0f7e4     A7 12 02 F6 | 	mov	arg01, fp
0f7e8     0C 4E 85 F1 | 	sub	fp, #12
0f7ec     A8 EB BF FD | 	call	#_converttoint
0f7f0     FD 20 02 F6 | 	mov	local02, result1
0f7f4     18 4E 05 F1 | 	add	fp, #24
0f7f8     A7 12 02 F6 | 	mov	arg01, fp
0f7fc     18 4E 85 F1 | 	sub	fp, #24
0f800     94 EB BF FD | 	call	#_converttoint
0f804     FD 16 02 F6 | 	mov	arg03, result1
0f808     2D 00 00 FF 
0f80c     EC E5 05 F1 | 	add	objptr, ##23532
0f810     F2 18 02 FB | 	rdlong	arg04, objptr
0f814     2D 00 00 FF 
0f818     EC E5 85 F1 | 	sub	objptr, ##23532
0f81c     0F 13 02 F6 | 	mov	arg01, local01
0f820     10 15 02 F6 | 	mov	arg02, local02
0f824     08 4B B0 FD | 	call	#_hg010b_spin2_fcircle
0f828                 | LR__1291
0f828     A7 F0 03 F6 | 	mov	ptra, fp
0f82c     B2 00 A0 FD | 	call	#popregs_
0f830                 | _do_fcircle_ret
0f830     2D 00 64 FD | 	ret
0f834                 | 
0f834                 | ' 
0f834                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
0f834                 | ' 
0f834                 | ' sub do_circle
0f834                 | _do_circle
0f834     02 4A 05 F6 | 	mov	COUNT_, #2
0f838     A8 00 A0 FD | 	call	#pushregs_
0f83c     24 F0 07 F1 | 	add	ptra, #36
0f840     CC 92 BF FD | 	call	#_pop
0f844     FD 18 02 F6 | 	mov	arg04, result1
0f848     FE 16 02 F6 | 	mov	arg03, result2
0f84c     FF 14 02 F6 | 	mov	arg02, result3
0f850     18 4E 05 F1 | 	add	fp, #24
0f854     A7 18 62 FC | 	wrlong	arg04, fp
0f858     04 4E 05 F1 | 	add	fp, #4
0f85c     A7 16 62 FC | 	wrlong	arg03, fp
0f860     04 4E 05 F1 | 	add	fp, #4
0f864     A7 14 62 FC | 	wrlong	arg02, fp
0f868     20 4E 85 F1 | 	sub	fp, #32
0f86c     A0 92 BF FD | 	call	#_pop
0f870     FD 18 02 F6 | 	mov	arg04, result1
0f874     FE 16 02 F6 | 	mov	arg03, result2
0f878     FF 1E 02 F6 | 	mov	local01, result3
0f87c     0C 4E 05 F1 | 	add	fp, #12
0f880     A7 18 62 FC | 	wrlong	arg04, fp
0f884     04 4E 05 F1 | 	add	fp, #4
0f888     A7 16 62 FC | 	wrlong	arg03, fp
0f88c     04 4E 05 F1 | 	add	fp, #4
0f890     A7 1E 62 FC | 	wrlong	local01, fp
0f894     14 4E 85 F1 | 	sub	fp, #20
0f898     74 92 BF FD | 	call	#_pop
0f89c     A7 FA 61 FC | 	wrlong	result1, fp
0f8a0     04 4E 05 F1 | 	add	fp, #4
0f8a4     A7 FC 61 FC | 	wrlong	result2, fp
0f8a8     04 4E 05 F1 | 	add	fp, #4
0f8ac     A7 FE 61 FC | 	wrlong	result3, fp
0f8b0                 | ' 
0f8b0                 | ' t3=pop()
0f8b0                 | ' t2=pop()
0f8b0                 | ' t1=pop()
0f8b0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f8b0     FF 18 02 F6 | 	mov	arg04, result3
0f8b4     08 4E 85 F1 | 	sub	fp, #8
0f8b8     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f8bc     08 4E 05 51 |  if_ne	add	fp, #8
0f8c0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0f8c4     08 4E 85 51 |  if_ne	sub	fp, #8
0f8c8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0f8cc     7C 00 90 5D |  if_ne	jmp	#LR__1300
0f8d0     14 4E 05 F1 | 	add	fp, #20
0f8d4     A7 1E 02 FB | 	rdlong	local01, fp
0f8d8     14 4E 85 F1 | 	sub	fp, #20
0f8dc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f8e0     14 4E 05 51 |  if_ne	add	fp, #20
0f8e4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f8e8     14 4E 85 51 |  if_ne	sub	fp, #20
0f8ec     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f8f0     58 00 90 5D |  if_ne	jmp	#LR__1300
0f8f4     20 4E 05 F1 | 	add	fp, #32
0f8f8     A7 1E 02 FB | 	rdlong	local01, fp
0f8fc     20 4E 85 F1 | 	sub	fp, #32
0f900     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f904     20 4E 05 51 |  if_ne	add	fp, #32
0f908     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f90c     20 4E 85 51 |  if_ne	sub	fp, #32
0f910     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f914     34 00 90 5D |  if_ne	jmp	#LR__1300
0f918     A7 12 02 FB | 	rdlong	arg01, fp
0f91c     0C 4E 05 F1 | 	add	fp, #12
0f920     A7 14 02 FB | 	rdlong	arg02, fp
0f924     0C 4E 05 F1 | 	add	fp, #12
0f928     A7 16 02 FB | 	rdlong	arg03, fp
0f92c     18 4E 85 F1 | 	sub	fp, #24
0f930     2D 00 00 FF 
0f934     EC E5 05 F1 | 	add	objptr, ##23532
0f938     F2 18 02 FB | 	rdlong	arg04, objptr
0f93c     2D 00 00 FF 
0f940     EC E5 85 F1 | 	sub	objptr, ##23532
0f944     F4 4A B0 FD | 	call	#_hg010b_spin2_circle
0f948                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f948     54 00 90 FD | 	jmp	#LR__1301
0f94c                 | LR__1300
0f94c     A7 12 02 F6 | 	mov	arg01, fp
0f950     44 EA BF FD | 	call	#_converttoint
0f954     FD 1E 02 F6 | 	mov	local01, result1
0f958     0C 4E 05 F1 | 	add	fp, #12
0f95c     A7 12 02 F6 | 	mov	arg01, fp
0f960     0C 4E 85 F1 | 	sub	fp, #12
0f964     30 EA BF FD | 	call	#_converttoint
0f968     FD 20 02 F6 | 	mov	local02, result1
0f96c     18 4E 05 F1 | 	add	fp, #24
0f970     A7 12 02 F6 | 	mov	arg01, fp
0f974     18 4E 85 F1 | 	sub	fp, #24
0f978     1C EA BF FD | 	call	#_converttoint
0f97c     FD 16 02 F6 | 	mov	arg03, result1
0f980     2D 00 00 FF 
0f984     EC E5 05 F1 | 	add	objptr, ##23532
0f988     F2 18 02 FB | 	rdlong	arg04, objptr
0f98c     2D 00 00 FF 
0f990     EC E5 85 F1 | 	sub	objptr, ##23532
0f994     0F 13 02 F6 | 	mov	arg01, local01
0f998     10 15 02 F6 | 	mov	arg02, local02
0f99c     9C 4A B0 FD | 	call	#_hg010b_spin2_circle
0f9a0                 | LR__1301
0f9a0     A7 F0 03 F6 | 	mov	ptra, fp
0f9a4     B2 00 A0 FD | 	call	#popregs_
0f9a8                 | _do_circle_ret
0f9a8     2D 00 64 FD | 	ret
0f9ac                 | 
0f9ac                 | ' 
0f9ac                 | ' ' -------------------------- Draw a rectangle
0f9ac                 | ' 
0f9ac                 | ' sub do_box
0f9ac                 | _do_box
0f9ac     03 4A 05 F6 | 	mov	COUNT_, #3
0f9b0     A8 00 A0 FD | 	call	#pushregs_
0f9b4     30 F0 07 F1 | 	add	ptra, #48
0f9b8     54 91 BF FD | 	call	#_pop
0f9bc     FD 1A 02 F6 | 	mov	arg05, result1
0f9c0     FE 18 02 F6 | 	mov	arg04, result2
0f9c4     FF 16 02 F6 | 	mov	arg03, result3
0f9c8     24 4E 05 F1 | 	add	fp, #36
0f9cc     A7 1A 62 FC | 	wrlong	arg05, fp
0f9d0     04 4E 05 F1 | 	add	fp, #4
0f9d4     A7 18 62 FC | 	wrlong	arg04, fp
0f9d8     04 4E 05 F1 | 	add	fp, #4
0f9dc     A7 16 62 FC | 	wrlong	arg03, fp
0f9e0     2C 4E 85 F1 | 	sub	fp, #44
0f9e4     28 91 BF FD | 	call	#_pop
0f9e8     FD 1A 02 F6 | 	mov	arg05, result1
0f9ec     FE 18 02 F6 | 	mov	arg04, result2
0f9f0     FF 16 02 F6 | 	mov	arg03, result3
0f9f4     18 4E 05 F1 | 	add	fp, #24
0f9f8     A7 1A 62 FC | 	wrlong	arg05, fp
0f9fc     04 4E 05 F1 | 	add	fp, #4
0fa00     A7 18 62 FC | 	wrlong	arg04, fp
0fa04     04 4E 05 F1 | 	add	fp, #4
0fa08     A7 16 62 FC | 	wrlong	arg03, fp
0fa0c     20 4E 85 F1 | 	sub	fp, #32
0fa10     FC 90 BF FD | 	call	#_pop
0fa14     FD 1A 02 F6 | 	mov	arg05, result1
0fa18     FE 18 02 F6 | 	mov	arg04, result2
0fa1c     FF 1E 02 F6 | 	mov	local01, result3
0fa20     0C 4E 05 F1 | 	add	fp, #12
0fa24     A7 1A 62 FC | 	wrlong	arg05, fp
0fa28     04 4E 05 F1 | 	add	fp, #4
0fa2c     A7 18 62 FC | 	wrlong	arg04, fp
0fa30     04 4E 05 F1 | 	add	fp, #4
0fa34     A7 1E 62 FC | 	wrlong	local01, fp
0fa38     14 4E 85 F1 | 	sub	fp, #20
0fa3c     D0 90 BF FD | 	call	#_pop
0fa40     A7 FA 61 FC | 	wrlong	result1, fp
0fa44     04 4E 05 F1 | 	add	fp, #4
0fa48     A7 FC 61 FC | 	wrlong	result2, fp
0fa4c     04 4E 05 F1 | 	add	fp, #4
0fa50     A7 FE 61 FC | 	wrlong	result3, fp
0fa54                 | ' 
0fa54                 | ' t4=pop()
0fa54                 | ' t3=pop()
0fa54                 | ' t2=pop()
0fa54                 | ' t1=pop()
0fa54                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0fa54     FF 1A 02 F6 | 	mov	arg05, result3
0fa58     08 4E 85 F1 | 	sub	fp, #8
0fa5c     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0fa60     08 4E 05 51 |  if_ne	add	fp, #8
0fa64     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0fa68     08 4E 85 51 |  if_ne	sub	fp, #8
0fa6c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0fa70     A8 00 90 5D |  if_ne	jmp	#LR__1310
0fa74     14 4E 05 F1 | 	add	fp, #20
0fa78     A7 1E 02 FB | 	rdlong	local01, fp
0fa7c     14 4E 85 F1 | 	sub	fp, #20
0fa80     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fa84     14 4E 05 51 |  if_ne	add	fp, #20
0fa88     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0fa8c     14 4E 85 51 |  if_ne	sub	fp, #20
0fa90     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0fa94     84 00 90 5D |  if_ne	jmp	#LR__1310
0fa98     20 4E 05 F1 | 	add	fp, #32
0fa9c     A7 1E 02 FB | 	rdlong	local01, fp
0faa0     20 4E 85 F1 | 	sub	fp, #32
0faa4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0faa8     20 4E 05 51 |  if_ne	add	fp, #32
0faac     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0fab0     20 4E 85 51 |  if_ne	sub	fp, #32
0fab4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0fab8     60 00 90 5D |  if_ne	jmp	#LR__1310
0fabc     2C 4E 05 F1 | 	add	fp, #44
0fac0     A7 1E 02 FB | 	rdlong	local01, fp
0fac4     2C 4E 85 F1 | 	sub	fp, #44
0fac8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0facc     2C 4E 05 51 |  if_ne	add	fp, #44
0fad0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0fad4     2C 4E 85 51 |  if_ne	sub	fp, #44
0fad8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0fadc     3C 00 90 5D |  if_ne	jmp	#LR__1310
0fae0     A7 12 02 FB | 	rdlong	arg01, fp
0fae4     0C 4E 05 F1 | 	add	fp, #12
0fae8     A7 14 02 FB | 	rdlong	arg02, fp
0faec     0C 4E 05 F1 | 	add	fp, #12
0faf0     A7 16 02 FB | 	rdlong	arg03, fp
0faf4     0C 4E 05 F1 | 	add	fp, #12
0faf8     A7 18 02 FB | 	rdlong	arg04, fp
0fafc     24 4E 85 F1 | 	sub	fp, #36
0fb00     2D 00 00 FF 
0fb04     EC E5 05 F1 | 	add	objptr, ##23532
0fb08     F2 1A 02 FB | 	rdlong	arg05, objptr
0fb0c     2D 00 00 FF 
0fb10     EC E5 85 F1 | 	sub	objptr, ##23532
0fb14     F0 4A B0 FD | 	call	#_hg010b_spin2_box
0fb18                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0fb18     6C 00 90 FD | 	jmp	#LR__1311
0fb1c                 | LR__1310
0fb1c     A7 12 02 F6 | 	mov	arg01, fp
0fb20     74 E8 BF FD | 	call	#_converttoint
0fb24     FD 20 02 F6 | 	mov	local02, result1
0fb28     0C 4E 05 F1 | 	add	fp, #12
0fb2c     A7 12 02 F6 | 	mov	arg01, fp
0fb30     0C 4E 85 F1 | 	sub	fp, #12
0fb34     60 E8 BF FD | 	call	#_converttoint
0fb38     FD 22 02 F6 | 	mov	local03, result1
0fb3c     18 4E 05 F1 | 	add	fp, #24
0fb40     A7 12 02 F6 | 	mov	arg01, fp
0fb44     18 4E 85 F1 | 	sub	fp, #24
0fb48     4C E8 BF FD | 	call	#_converttoint
0fb4c     FD 1E 02 F6 | 	mov	local01, result1
0fb50     24 4E 05 F1 | 	add	fp, #36
0fb54     A7 12 02 F6 | 	mov	arg01, fp
0fb58     24 4E 85 F1 | 	sub	fp, #36
0fb5c     38 E8 BF FD | 	call	#_converttoint
0fb60     FD 18 02 F6 | 	mov	arg04, result1
0fb64     2D 00 00 FF 
0fb68     EC E5 05 F1 | 	add	objptr, ##23532
0fb6c     F2 1A 02 FB | 	rdlong	arg05, objptr
0fb70     2D 00 00 FF 
0fb74     EC E5 85 F1 | 	sub	objptr, ##23532
0fb78     10 13 02 F6 | 	mov	arg01, local02
0fb7c     11 15 02 F6 | 	mov	arg02, local03
0fb80     0F 17 02 F6 | 	mov	arg03, local01
0fb84     80 4A B0 FD | 	call	#_hg010b_spin2_box
0fb88                 | LR__1311
0fb88     A7 F0 03 F6 | 	mov	ptra, fp
0fb8c     B2 00 A0 FD | 	call	#popregs_
0fb90                 | _do_box_ret
0fb90     2D 00 64 FD | 	ret
0fb94                 | 
0fb94                 | ' 
0fb94                 | ' sub do_fill
0fb94                 | _do_fill
0fb94     03 4A 05 F6 | 	mov	COUNT_, #3
0fb98     A8 00 A0 FD | 	call	#pushregs_
0fb9c     30 F0 07 F1 | 	add	ptra, #48
0fba0     6C 8F BF FD | 	call	#_pop
0fba4     FD 18 02 F6 | 	mov	arg04, result1
0fba8     FE 16 02 F6 | 	mov	arg03, result2
0fbac     FF 14 02 F6 | 	mov	arg02, result3
0fbb0     24 4E 05 F1 | 	add	fp, #36
0fbb4     A7 18 62 FC | 	wrlong	arg04, fp
0fbb8     04 4E 05 F1 | 	add	fp, #4
0fbbc     A7 16 62 FC | 	wrlong	arg03, fp
0fbc0     04 4E 05 F1 | 	add	fp, #4
0fbc4     A7 14 62 FC | 	wrlong	arg02, fp
0fbc8     2C 4E 85 F1 | 	sub	fp, #44
0fbcc     40 8F BF FD | 	call	#_pop
0fbd0     FD 18 02 F6 | 	mov	arg04, result1
0fbd4     FE 16 02 F6 | 	mov	arg03, result2
0fbd8     FF 14 02 F6 | 	mov	arg02, result3
0fbdc     18 4E 05 F1 | 	add	fp, #24
0fbe0     A7 18 62 FC | 	wrlong	arg04, fp
0fbe4     04 4E 05 F1 | 	add	fp, #4
0fbe8     A7 16 62 FC | 	wrlong	arg03, fp
0fbec     04 4E 05 F1 | 	add	fp, #4
0fbf0     A7 14 62 FC | 	wrlong	arg02, fp
0fbf4     20 4E 85 F1 | 	sub	fp, #32
0fbf8     14 8F BF FD | 	call	#_pop
0fbfc     FD 18 02 F6 | 	mov	arg04, result1
0fc00     FE 16 02 F6 | 	mov	arg03, result2
0fc04     FF 1E 02 F6 | 	mov	local01, result3
0fc08     0C 4E 05 F1 | 	add	fp, #12
0fc0c     A7 18 62 FC | 	wrlong	arg04, fp
0fc10     04 4E 05 F1 | 	add	fp, #4
0fc14     A7 16 62 FC | 	wrlong	arg03, fp
0fc18     04 4E 05 F1 | 	add	fp, #4
0fc1c     A7 1E 62 FC | 	wrlong	local01, fp
0fc20     14 4E 85 F1 | 	sub	fp, #20
0fc24     E8 8E BF FD | 	call	#_pop
0fc28     A7 FA 61 FC | 	wrlong	result1, fp
0fc2c     04 4E 05 F1 | 	add	fp, #4
0fc30     A7 FC 61 FC | 	wrlong	result2, fp
0fc34     04 4E 05 F1 | 	add	fp, #4
0fc38     A7 FE 61 FC | 	wrlong	result3, fp
0fc3c                 | ' 
0fc3c                 | ' t4=pop()
0fc3c                 | ' t3=pop()
0fc3c                 | ' t2=pop()
0fc3c                 | ' t1=pop()
0fc3c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0fc3c     FF 18 02 F6 | 	mov	arg04, result3
0fc40     08 4E 85 F1 | 	sub	fp, #8
0fc44     1C 18 0E F2 | 	cmp	arg04, #28 wz
0fc48     08 4E 05 51 |  if_ne	add	fp, #8
0fc4c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0fc50     08 4E 85 51 |  if_ne	sub	fp, #8
0fc54     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0fc58     94 00 90 5D |  if_ne	jmp	#LR__1320
0fc5c     14 4E 05 F1 | 	add	fp, #20
0fc60     A7 1E 02 FB | 	rdlong	local01, fp
0fc64     14 4E 85 F1 | 	sub	fp, #20
0fc68     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fc6c     14 4E 05 51 |  if_ne	add	fp, #20
0fc70     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0fc74     14 4E 85 51 |  if_ne	sub	fp, #20
0fc78     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0fc7c     70 00 90 5D |  if_ne	jmp	#LR__1320
0fc80     20 4E 05 F1 | 	add	fp, #32
0fc84     A7 1E 02 FB | 	rdlong	local01, fp
0fc88     20 4E 85 F1 | 	sub	fp, #32
0fc8c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fc90     20 4E 05 51 |  if_ne	add	fp, #32
0fc94     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0fc98     20 4E 85 51 |  if_ne	sub	fp, #32
0fc9c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0fca0     4C 00 90 5D |  if_ne	jmp	#LR__1320
0fca4     2C 4E 05 F1 | 	add	fp, #44
0fca8     A7 1E 02 FB | 	rdlong	local01, fp
0fcac     2C 4E 85 F1 | 	sub	fp, #44
0fcb0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fcb4     2C 4E 05 51 |  if_ne	add	fp, #44
0fcb8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0fcbc     2C 4E 85 51 |  if_ne	sub	fp, #44
0fcc0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0fcc4     28 00 90 5D |  if_ne	jmp	#LR__1320
0fcc8     A7 12 02 FB | 	rdlong	arg01, fp
0fccc     0C 4E 05 F1 | 	add	fp, #12
0fcd0     A7 14 02 FB | 	rdlong	arg02, fp
0fcd4     0C 4E 05 F1 | 	add	fp, #12
0fcd8     A7 16 02 FB | 	rdlong	arg03, fp
0fcdc     0C 4E 05 F1 | 	add	fp, #12
0fce0     A7 18 02 FB | 	rdlong	arg04, fp
0fce4     24 4E 85 F1 | 	sub	fp, #36
0fce8     B0 43 B0 FD | 	call	#_hg010b_spin2_fill
0fcec                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
0fcec     58 00 90 FD | 	jmp	#LR__1321
0fcf0                 | LR__1320
0fcf0     A7 12 02 F6 | 	mov	arg01, fp
0fcf4     A0 E6 BF FD | 	call	#_converttoint
0fcf8     FD 20 02 F6 | 	mov	local02, result1
0fcfc     0C 4E 05 F1 | 	add	fp, #12
0fd00     A7 12 02 F6 | 	mov	arg01, fp
0fd04     0C 4E 85 F1 | 	sub	fp, #12
0fd08     8C E6 BF FD | 	call	#_converttoint
0fd0c     FD 22 02 F6 | 	mov	local03, result1
0fd10     18 4E 05 F1 | 	add	fp, #24
0fd14     A7 12 02 F6 | 	mov	arg01, fp
0fd18     18 4E 85 F1 | 	sub	fp, #24
0fd1c     78 E6 BF FD | 	call	#_converttoint
0fd20     FD 1E 02 F6 | 	mov	local01, result1
0fd24     24 4E 05 F1 | 	add	fp, #36
0fd28     A7 12 02 F6 | 	mov	arg01, fp
0fd2c     24 4E 85 F1 | 	sub	fp, #36
0fd30     64 E6 BF FD | 	call	#_converttoint
0fd34     FD 18 02 F6 | 	mov	arg04, result1
0fd38     10 13 02 F6 | 	mov	arg01, local02
0fd3c     11 15 02 F6 | 	mov	arg02, local03
0fd40     0F 17 02 F6 | 	mov	arg03, local01
0fd44     54 43 B0 FD | 	call	#_hg010b_spin2_fill
0fd48                 | LR__1321
0fd48     A7 F0 03 F6 | 	mov	ptra, fp
0fd4c     B2 00 A0 FD | 	call	#popregs_
0fd50                 | _do_fill_ret
0fd50     2D 00 64 FD | 	ret
0fd54                 | 
0fd54                 | ' 
0fd54                 | ' ' -------------------------- Draw a frane
0fd54                 | ' 
0fd54                 | ' sub do_frame
0fd54                 | _do_frame
0fd54     03 4A 05 F6 | 	mov	COUNT_, #3
0fd58     A8 00 A0 FD | 	call	#pushregs_
0fd5c     30 F0 07 F1 | 	add	ptra, #48
0fd60     AC 8D BF FD | 	call	#_pop
0fd64     FD 1A 02 F6 | 	mov	arg05, result1
0fd68     FE 18 02 F6 | 	mov	arg04, result2
0fd6c     FF 16 02 F6 | 	mov	arg03, result3
0fd70     24 4E 05 F1 | 	add	fp, #36
0fd74     A7 1A 62 FC | 	wrlong	arg05, fp
0fd78     04 4E 05 F1 | 	add	fp, #4
0fd7c     A7 18 62 FC | 	wrlong	arg04, fp
0fd80     04 4E 05 F1 | 	add	fp, #4
0fd84     A7 16 62 FC | 	wrlong	arg03, fp
0fd88     2C 4E 85 F1 | 	sub	fp, #44
0fd8c     80 8D BF FD | 	call	#_pop
0fd90     FD 1A 02 F6 | 	mov	arg05, result1
0fd94     FE 18 02 F6 | 	mov	arg04, result2
0fd98     FF 16 02 F6 | 	mov	arg03, result3
0fd9c     18 4E 05 F1 | 	add	fp, #24
0fda0     A7 1A 62 FC | 	wrlong	arg05, fp
0fda4     04 4E 05 F1 | 	add	fp, #4
0fda8     A7 18 62 FC | 	wrlong	arg04, fp
0fdac     04 4E 05 F1 | 	add	fp, #4
0fdb0     A7 16 62 FC | 	wrlong	arg03, fp
0fdb4     20 4E 85 F1 | 	sub	fp, #32
0fdb8     54 8D BF FD | 	call	#_pop
0fdbc     FD 1A 02 F6 | 	mov	arg05, result1
0fdc0     FE 18 02 F6 | 	mov	arg04, result2
0fdc4     FF 1E 02 F6 | 	mov	local01, result3
0fdc8     0C 4E 05 F1 | 	add	fp, #12
0fdcc     A7 1A 62 FC | 	wrlong	arg05, fp
0fdd0     04 4E 05 F1 | 	add	fp, #4
0fdd4     A7 18 62 FC | 	wrlong	arg04, fp
0fdd8     04 4E 05 F1 | 	add	fp, #4
0fddc     A7 1E 62 FC | 	wrlong	local01, fp
0fde0     14 4E 85 F1 | 	sub	fp, #20
0fde4     28 8D BF FD | 	call	#_pop
0fde8     A7 FA 61 FC | 	wrlong	result1, fp
0fdec     04 4E 05 F1 | 	add	fp, #4
0fdf0     A7 FC 61 FC | 	wrlong	result2, fp
0fdf4     04 4E 05 F1 | 	add	fp, #4
0fdf8     A7 FE 61 FC | 	wrlong	result3, fp
0fdfc                 | ' 
0fdfc                 | ' t4=pop()
0fdfc                 | ' t3=pop()
0fdfc                 | ' t2=pop()
0fdfc                 | ' t1=pop()
0fdfc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0fdfc     FF 1A 02 F6 | 	mov	arg05, result3
0fe00     08 4E 85 F1 | 	sub	fp, #8
0fe04     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0fe08     08 4E 05 51 |  if_ne	add	fp, #8
0fe0c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0fe10     08 4E 85 51 |  if_ne	sub	fp, #8
0fe14     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0fe18     A8 00 90 5D |  if_ne	jmp	#LR__1330
0fe1c     14 4E 05 F1 | 	add	fp, #20
0fe20     A7 1E 02 FB | 	rdlong	local01, fp
0fe24     14 4E 85 F1 | 	sub	fp, #20
0fe28     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fe2c     14 4E 05 51 |  if_ne	add	fp, #20
0fe30     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0fe34     14 4E 85 51 |  if_ne	sub	fp, #20
0fe38     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0fe3c     84 00 90 5D |  if_ne	jmp	#LR__1330
0fe40     20 4E 05 F1 | 	add	fp, #32
0fe44     A7 1E 02 FB | 	rdlong	local01, fp
0fe48     20 4E 85 F1 | 	sub	fp, #32
0fe4c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fe50     20 4E 05 51 |  if_ne	add	fp, #32
0fe54     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0fe58     20 4E 85 51 |  if_ne	sub	fp, #32
0fe5c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0fe60     60 00 90 5D |  if_ne	jmp	#LR__1330
0fe64     2C 4E 05 F1 | 	add	fp, #44
0fe68     A7 1E 02 FB | 	rdlong	local01, fp
0fe6c     2C 4E 85 F1 | 	sub	fp, #44
0fe70     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fe74     2C 4E 05 51 |  if_ne	add	fp, #44
0fe78     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0fe7c     2C 4E 85 51 |  if_ne	sub	fp, #44
0fe80     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0fe84     3C 00 90 5D |  if_ne	jmp	#LR__1330
0fe88     A7 12 02 FB | 	rdlong	arg01, fp
0fe8c     0C 4E 05 F1 | 	add	fp, #12
0fe90     A7 14 02 FB | 	rdlong	arg02, fp
0fe94     0C 4E 05 F1 | 	add	fp, #12
0fe98     A7 16 02 FB | 	rdlong	arg03, fp
0fe9c     0C 4E 05 F1 | 	add	fp, #12
0fea0     A7 18 02 FB | 	rdlong	arg04, fp
0fea4     24 4E 85 F1 | 	sub	fp, #36
0fea8     2D 00 00 FF 
0feac     EC E5 05 F1 | 	add	objptr, ##23532
0feb0     F2 1A 02 FB | 	rdlong	arg05, objptr
0feb4     2D 00 00 FF 
0feb8     EC E5 85 F1 | 	sub	objptr, ##23532
0febc     C8 46 B0 FD | 	call	#_hg010b_spin2_frame
0fec0                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0fec0     6C 00 90 FD | 	jmp	#LR__1331
0fec4                 | LR__1330
0fec4     A7 12 02 F6 | 	mov	arg01, fp
0fec8     CC E4 BF FD | 	call	#_converttoint
0fecc     FD 20 02 F6 | 	mov	local02, result1
0fed0     0C 4E 05 F1 | 	add	fp, #12
0fed4     A7 12 02 F6 | 	mov	arg01, fp
0fed8     0C 4E 85 F1 | 	sub	fp, #12
0fedc     B8 E4 BF FD | 	call	#_converttoint
0fee0     FD 22 02 F6 | 	mov	local03, result1
0fee4     18 4E 05 F1 | 	add	fp, #24
0fee8     A7 12 02 F6 | 	mov	arg01, fp
0feec     18 4E 85 F1 | 	sub	fp, #24
0fef0     A4 E4 BF FD | 	call	#_converttoint
0fef4     FD 1E 02 F6 | 	mov	local01, result1
0fef8     24 4E 05 F1 | 	add	fp, #36
0fefc     A7 12 02 F6 | 	mov	arg01, fp
0ff00     24 4E 85 F1 | 	sub	fp, #36
0ff04     90 E4 BF FD | 	call	#_converttoint
0ff08     FD 18 02 F6 | 	mov	arg04, result1
0ff0c     2D 00 00 FF 
0ff10     EC E5 05 F1 | 	add	objptr, ##23532
0ff14     F2 1A 02 FB | 	rdlong	arg05, objptr
0ff18     2D 00 00 FF 
0ff1c     EC E5 85 F1 | 	sub	objptr, ##23532
0ff20     10 13 02 F6 | 	mov	arg01, local02
0ff24     11 15 02 F6 | 	mov	arg02, local03
0ff28     0F 17 02 F6 | 	mov	arg03, local01
0ff2c     58 46 B0 FD | 	call	#_hg010b_spin2_frame
0ff30                 | LR__1331
0ff30     A7 F0 03 F6 | 	mov	ptra, fp
0ff34     B2 00 A0 FD | 	call	#popregs_
0ff38                 | _do_frame_ret
0ff38     2D 00 64 FD | 	ret
0ff3c                 | 
0ff3c                 | ' 
0ff3c                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
0ff3c                 | ' 
0ff3c                 | ' ' ------------------------- Print to the screem
0ff3c                 | ' 
0ff3c                 | ' sub do_print  
0ff3c                 | _do_print
0ff3c     0A 4A 05 F6 | 	mov	COUNT_, #10
0ff40     A8 00 A0 FD | 	call	#pushregs_
0ff44     00 24 06 F6 | 	mov	local04, #0
0ff48     C4 8B BF FD | 	call	#_pop
0ff4c     FD 26 02 F6 | 	mov	local05, result1
0ff50     FE 28 02 F6 | 	mov	local06, result2
0ff54     FF 2A 02 F6 | 	mov	local07, result3
0ff58     13 1F 02 F6 | 	mov	local01, local05
0ff5c     14 21 02 F6 | 	mov	local02, local06
0ff60     15 23 02 F6 | 	mov	local03, local07
0ff64                 | '  
0ff64                 | ' r=0
0ff64                 | ' t1=pop() 
0ff64                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
0ff64     2B 22 0E F2 | 	cmp	local03, #43 wz
0ff68     14 00 90 5D |  if_ne	jmp	#LR__1340
0ff6c     0F 13 02 F6 | 	mov	arg01, local01
0ff70     88 A8 BF FD | 	call	#_convertstring
0ff74     FD 26 02 F6 | 	mov	local05, result1
0ff78     13 1F 02 F6 | 	mov	local01, local05
0ff7c     1F 22 06 F6 | 	mov	local03, #31
0ff80                 | LR__1340
0ff80                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
0ff80     21 22 0E F2 | 	cmp	local03, #33 wz
0ff84     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
0ff88     20 00 90 5D |  if_ne	jmp	#LR__1341
0ff8c     11 25 02 F6 | 	mov	local04, local03
0ff90     7C 8B BF FD | 	call	#_pop
0ff94     FD 26 02 F6 | 	mov	local05, result1
0ff98     FE 28 02 F6 | 	mov	local06, result2
0ff9c     FF 2A 02 F6 | 	mov	local07, result3
0ffa0     13 1F 02 F6 | 	mov	local01, local05
0ffa4     14 21 02 F6 | 	mov	local02, local06
0ffa8     15 23 02 F6 | 	mov	local03, local07
0ffac                 | LR__1341
0ffac                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
0ffac     20 22 0E F2 | 	cmp	local03, #32 wz
0ffb0     11 25 02 A6 |  if_e	mov	local04, local03
0ffb4                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
0ffb4     FF 22 0E F2 | 	cmp	local03, #255 wz
0ffb8     0C 00 90 5D |  if_ne	jmp	#LR__1342
0ffbc     0F 13 02 F6 | 	mov	arg01, local01
0ffc0     64 26 B0 FD | 	call	#_printerror
0ffc4     30 04 90 FD | 	jmp	#LR__1359
0ffc8                 | LR__1342
0ffc8                 | ' 
0ffc8                 | ' if r=print_mod_comma  then
0ffc8     21 24 0E F2 | 	cmp	local04, #33 wz
0ffcc     AC 01 90 5D |  if_ne	jmp	#LR__1347
0ffd0                 | '   if t1.result_type=result_int then print t1.result.iresult,
0ffd0     1C 22 0E F2 | 	cmp	local03, #28 wz
0ffd4     64 00 90 5D |  if_ne	jmp	#LR__1343
0ffd8     00 12 06 F6 | 	mov	arg01, #0
0ffdc     18 B0 B0 FD | 	call	#__system___getiolock_0372
0ffe0     FD 12 02 F6 | 	mov	arg01, result1
0ffe4     60 5B B0 FD | 	call	#__system___lockmem
0ffe8     00 28 06 F6 | 	mov	local06, #0
0ffec     00 12 06 F6 | 	mov	arg01, #0
0fff0     0F 15 02 F6 | 	mov	arg02, local01
0fff4     00 16 06 F6 | 	mov	arg03, #0
0fff8     0A 18 06 F6 | 	mov	arg04, #10
0fffc     80 68 B0 FD | 	call	#__system___basic_print_integer
10000     FD 2A 02 F6 | 	mov	local07, result1
10004     14 27 02 F6 | 	mov	local05, local06
10008     15 27 02 F1 | 	add	local05, local07
1000c     00 2C 06 F6 | 	mov	local08, #0
10010     00 12 06 F6 | 	mov	arg01, #0
10014     09 14 06 F6 | 	mov	arg02, #9
10018     00 16 06 F6 | 	mov	arg03, #0
1001c     C4 67 B0 FD | 	call	#__system___basic_print_char
10020     FD 2E 02 F6 | 	mov	local09, result1
10024     FD 26 02 F1 | 	add	local05, result1
10028     00 12 06 F6 | 	mov	arg01, #0
1002c     C8 AF B0 FD | 	call	#__system___getiolock_0372
10030     FD 00 68 FC | 	wrlong	#0, result1
10034     00 FA 05 F6 | 	mov	result1, #0
10038     00 30 06 F6 | 	mov	local10, #0
1003c                 | LR__1343
1003c                 | '   if t1.result_type=result_uint then print t1.result.uresult,
1003c     1D 22 0E F2 | 	cmp	local03, #29 wz
10040     64 00 90 5D |  if_ne	jmp	#LR__1344
10044     00 12 06 F6 | 	mov	arg01, #0
10048     AC AF B0 FD | 	call	#__system___getiolock_0372
1004c     FD 12 02 F6 | 	mov	arg01, result1
10050     F4 5A B0 FD | 	call	#__system___lockmem
10054     00 28 06 F6 | 	mov	local06, #0
10058     00 12 06 F6 | 	mov	arg01, #0
1005c     0F 15 02 F6 | 	mov	arg02, local01
10060     00 16 06 F6 | 	mov	arg03, #0
10064     0A 18 06 F6 | 	mov	arg04, #10
10068     54 68 B0 FD | 	call	#__system___basic_print_unsigned
1006c     FD 2A 02 F6 | 	mov	local07, result1
10070     14 27 02 F6 | 	mov	local05, local06
10074     15 27 02 F1 | 	add	local05, local07
10078     00 2C 06 F6 | 	mov	local08, #0
1007c     00 12 06 F6 | 	mov	arg01, #0
10080     09 14 06 F6 | 	mov	arg02, #9
10084     00 16 06 F6 | 	mov	arg03, #0
10088     58 67 B0 FD | 	call	#__system___basic_print_char
1008c     FD 2E 02 F6 | 	mov	local09, result1
10090     FD 26 02 F1 | 	add	local05, result1
10094     00 12 06 F6 | 	mov	arg01, #0
10098     5C AF B0 FD | 	call	#__system___getiolock_0372
1009c     FD 00 68 FC | 	wrlong	#0, result1
100a0     00 FA 05 F6 | 	mov	result1, #0
100a4     00 30 06 F6 | 	mov	local10, #0
100a8                 | LR__1344
100a8                 | '   if t1.result_type=result_float then print t1.result.fresult,
100a8     1E 22 0E F2 | 	cmp	local03, #30 wz
100ac     64 00 90 5D |  if_ne	jmp	#LR__1345
100b0     00 12 06 F6 | 	mov	arg01, #0
100b4     40 AF B0 FD | 	call	#__system___getiolock_0372
100b8     FD 12 02 F6 | 	mov	arg01, result1
100bc     88 5A B0 FD | 	call	#__system___lockmem
100c0     00 28 06 F6 | 	mov	local06, #0
100c4     00 12 06 F6 | 	mov	arg01, #0
100c8     0F 15 02 F6 | 	mov	arg02, local01
100cc     00 16 06 F6 | 	mov	arg03, #0
100d0     23 18 06 F6 | 	mov	arg04, #35
100d4     98 89 B0 FD | 	call	#__system___basic_print_float
100d8     FD 2A 02 F6 | 	mov	local07, result1
100dc     14 27 02 F6 | 	mov	local05, local06
100e0     15 27 02 F1 | 	add	local05, local07
100e4     00 2C 06 F6 | 	mov	local08, #0
100e8     00 12 06 F6 | 	mov	arg01, #0
100ec     09 14 06 F6 | 	mov	arg02, #9
100f0     00 16 06 F6 | 	mov	arg03, #0
100f4     EC 66 B0 FD | 	call	#__system___basic_print_char
100f8     FD 2E 02 F6 | 	mov	local09, result1
100fc     FD 26 02 F1 | 	add	local05, result1
10100     00 12 06 F6 | 	mov	arg01, #0
10104     F0 AE B0 FD | 	call	#__system___getiolock_0372
10108     FD 00 68 FC | 	wrlong	#0, result1
1010c     00 FA 05 F6 | 	mov	result1, #0
10110     00 30 06 F6 | 	mov	local10, #0
10114                 | LR__1345
10114                 | '   if t1.result_type=result_string then print t1.result.sresult,
10114     1F 22 0E F2 | 	cmp	local03, #31 wz
10118     60 00 90 5D |  if_ne	jmp	#LR__1346
1011c     00 12 06 F6 | 	mov	arg01, #0
10120     D4 AE B0 FD | 	call	#__system___getiolock_0372
10124     FD 12 02 F6 | 	mov	arg01, result1
10128     1C 5A B0 FD | 	call	#__system___lockmem
1012c     00 28 06 F6 | 	mov	local06, #0
10130     00 12 06 F6 | 	mov	arg01, #0
10134     0F 15 02 F6 | 	mov	arg02, local01
10138     00 16 06 F6 | 	mov	arg03, #0
1013c     FC 66 B0 FD | 	call	#__system___basic_print_string
10140     FD 2A 02 F6 | 	mov	local07, result1
10144     14 27 02 F6 | 	mov	local05, local06
10148     15 27 02 F1 | 	add	local05, local07
1014c     00 2C 06 F6 | 	mov	local08, #0
10150     00 12 06 F6 | 	mov	arg01, #0
10154     09 14 06 F6 | 	mov	arg02, #9
10158     00 16 06 F6 | 	mov	arg03, #0
1015c     84 66 B0 FD | 	call	#__system___basic_print_char
10160     FD 2E 02 F6 | 	mov	local09, result1
10164     FD 26 02 F1 | 	add	local05, result1
10168     00 12 06 F6 | 	mov	arg01, #0
1016c     88 AE B0 FD | 	call	#__system___getiolock_0372
10170     FD 00 68 FC | 	wrlong	#0, result1
10174     00 FA 05 F6 | 	mov	result1, #0
10178     00 30 06 F6 | 	mov	local10, #0
1017c                 | LR__1346
1017c                 | LR__1347
1017c                 | ' if r=print_mod_semicolon then 
1017c     22 24 0E F2 | 	cmp	local04, #34 wz
10180     1C 01 90 5D |  if_ne	jmp	#LR__1352
10184                 | '   if t1.result_type=result_int then print t1.result.iresult;
10184     1C 22 0E F2 | 	cmp	local03, #28 wz
10188     50 00 90 5D |  if_ne	jmp	#LR__1348
1018c     00 12 06 F6 | 	mov	arg01, #0
10190     64 AE B0 FD | 	call	#__system___getiolock_0372
10194     FD 12 02 F6 | 	mov	arg01, result1
10198     AC 59 B0 FD | 	call	#__system___lockmem
1019c     00 28 06 F6 | 	mov	local06, #0
101a0     00 30 06 F6 | 	mov	local10, #0
101a4     0A 2C 06 F6 | 	mov	local08, #10
101a8     00 12 06 F6 | 	mov	arg01, #0
101ac     0F 15 02 F6 | 	mov	arg02, local01
101b0     00 16 06 F6 | 	mov	arg03, #0
101b4     0A 18 06 F6 | 	mov	arg04, #10
101b8     C4 66 B0 FD | 	call	#__system___basic_print_integer
101bc     FD 2A 02 F6 | 	mov	local07, result1
101c0     14 27 02 F6 | 	mov	local05, local06
101c4     15 27 02 F1 | 	add	local05, local07
101c8     00 12 06 F6 | 	mov	arg01, #0
101cc     28 AE B0 FD | 	call	#__system___getiolock_0372
101d0     FD 00 68 FC | 	wrlong	#0, result1
101d4     00 FA 05 F6 | 	mov	result1, #0
101d8     00 2E 06 F6 | 	mov	local09, #0
101dc                 | LR__1348
101dc                 | '   if t1.result_type=result_uint then print t1.result.uresult;
101dc     1D 22 0E F2 | 	cmp	local03, #29 wz
101e0     50 00 90 5D |  if_ne	jmp	#LR__1349
101e4     00 12 06 F6 | 	mov	arg01, #0
101e8     0C AE B0 FD | 	call	#__system___getiolock_0372
101ec     FD 12 02 F6 | 	mov	arg01, result1
101f0     54 59 B0 FD | 	call	#__system___lockmem
101f4     00 28 06 F6 | 	mov	local06, #0
101f8     00 30 06 F6 | 	mov	local10, #0
101fc     0A 2C 06 F6 | 	mov	local08, #10
10200     00 12 06 F6 | 	mov	arg01, #0
10204     0F 15 02 F6 | 	mov	arg02, local01
10208     00 16 06 F6 | 	mov	arg03, #0
1020c     0A 18 06 F6 | 	mov	arg04, #10
10210     AC 66 B0 FD | 	call	#__system___basic_print_unsigned
10214     FD 2A 02 F6 | 	mov	local07, result1
10218     14 27 02 F6 | 	mov	local05, local06
1021c     15 27 02 F1 | 	add	local05, local07
10220     00 12 06 F6 | 	mov	arg01, #0
10224     D0 AD B0 FD | 	call	#__system___getiolock_0372
10228     FD 00 68 FC | 	wrlong	#0, result1
1022c     00 FA 05 F6 | 	mov	result1, #0
10230     00 2E 06 F6 | 	mov	local09, #0
10234                 | LR__1349
10234                 | '   if t1.result_type=result_float then print t1.result.fresult;
10234     1E 22 0E F2 | 	cmp	local03, #30 wz
10238     30 00 90 5D |  if_ne	jmp	#LR__1350
1023c     00 12 06 F6 | 	mov	arg01, #0
10240     B4 AD B0 FD | 	call	#__system___getiolock_0372
10244     FD 12 02 F6 | 	mov	arg01, result1
10248     FC 58 B0 FD | 	call	#__system___lockmem
1024c     00 12 06 F6 | 	mov	arg01, #0
10250     0F 15 02 F6 | 	mov	arg02, local01
10254     00 16 06 F6 | 	mov	arg03, #0
10258     23 18 06 F6 | 	mov	arg04, #35
1025c     10 88 B0 FD | 	call	#__system___basic_print_float
10260     00 12 06 F6 | 	mov	arg01, #0
10264     90 AD B0 FD | 	call	#__system___getiolock_0372
10268     FD 00 68 FC | 	wrlong	#0, result1
1026c                 | LR__1350
1026c                 | '   if t1.result_type=result_string then print t1.result.sresult;
1026c     1F 22 0E F2 | 	cmp	local03, #31 wz
10270     2C 00 90 5D |  if_ne	jmp	#LR__1351
10274     00 12 06 F6 | 	mov	arg01, #0
10278     7C AD B0 FD | 	call	#__system___getiolock_0372
1027c     FD 12 02 F6 | 	mov	arg01, result1
10280     C4 58 B0 FD | 	call	#__system___lockmem
10284     00 12 06 F6 | 	mov	arg01, #0
10288     0F 15 02 F6 | 	mov	arg02, local01
1028c     00 16 06 F6 | 	mov	arg03, #0
10290     A8 65 B0 FD | 	call	#__system___basic_print_string
10294     00 12 06 F6 | 	mov	arg01, #0
10298     5C AD B0 FD | 	call	#__system___getiolock_0372
1029c     FD 00 68 FC | 	wrlong	#0, result1
102a0                 | LR__1351
102a0                 | LR__1352
102a0                 | ' if r=0 then 
102a0     00 24 0E F2 | 	cmp	local04, #0 wz
102a4     1C 01 90 5D |  if_ne	jmp	#LR__1357
102a8                 | '   if t1.result_type=result_int then print t1.result.iresult
102a8     1C 22 0E F2 | 	cmp	local03, #28 wz
102ac     40 00 90 5D |  if_ne	jmp	#LR__1353
102b0     00 12 06 F6 | 	mov	arg01, #0
102b4     40 AD B0 FD | 	call	#__system___getiolock_0372
102b8     FD 12 02 F6 | 	mov	arg01, result1
102bc     88 58 B0 FD | 	call	#__system___lockmem
102c0     00 12 06 F6 | 	mov	arg01, #0
102c4     0F 15 02 F6 | 	mov	arg02, local01
102c8     00 16 06 F6 | 	mov	arg03, #0
102cc     0A 18 06 F6 | 	mov	arg04, #10
102d0     AC 65 B0 FD | 	call	#__system___basic_print_integer
102d4     00 12 06 F6 | 	mov	arg01, #0
102d8     0A 14 06 F6 | 	mov	arg02, #10
102dc     00 16 06 F6 | 	mov	arg03, #0
102e0     00 65 B0 FD | 	call	#__system___basic_print_char
102e4     00 12 06 F6 | 	mov	arg01, #0
102e8     0C AD B0 FD | 	call	#__system___getiolock_0372
102ec     FD 00 68 FC | 	wrlong	#0, result1
102f0                 | LR__1353
102f0                 | '   if t1.result_type=result_uint then print t1.result.uresult
102f0     1D 22 0E F2 | 	cmp	local03, #29 wz
102f4     40 00 90 5D |  if_ne	jmp	#LR__1354
102f8     00 12 06 F6 | 	mov	arg01, #0
102fc     F8 AC B0 FD | 	call	#__system___getiolock_0372
10300     FD 12 02 F6 | 	mov	arg01, result1
10304     40 58 B0 FD | 	call	#__system___lockmem
10308     00 12 06 F6 | 	mov	arg01, #0
1030c     0F 15 02 F6 | 	mov	arg02, local01
10310     00 16 06 F6 | 	mov	arg03, #0
10314     0A 18 06 F6 | 	mov	arg04, #10
10318     A4 65 B0 FD | 	call	#__system___basic_print_unsigned
1031c     00 12 06 F6 | 	mov	arg01, #0
10320     0A 14 06 F6 | 	mov	arg02, #10
10324     00 16 06 F6 | 	mov	arg03, #0
10328     B8 64 B0 FD | 	call	#__system___basic_print_char
1032c     00 12 06 F6 | 	mov	arg01, #0
10330     C4 AC B0 FD | 	call	#__system___getiolock_0372
10334     FD 00 68 FC | 	wrlong	#0, result1
10338                 | LR__1354
10338                 | '   if t1.result_type=result_float then print t1.result.fresult
10338     1E 22 0E F2 | 	cmp	local03, #30 wz
1033c     40 00 90 5D |  if_ne	jmp	#LR__1355
10340     00 12 06 F6 | 	mov	arg01, #0
10344     B0 AC B0 FD | 	call	#__system___getiolock_0372
10348     FD 12 02 F6 | 	mov	arg01, result1
1034c     F8 57 B0 FD | 	call	#__system___lockmem
10350     00 12 06 F6 | 	mov	arg01, #0
10354     0F 15 02 F6 | 	mov	arg02, local01
10358     00 16 06 F6 | 	mov	arg03, #0
1035c     23 18 06 F6 | 	mov	arg04, #35
10360     0C 87 B0 FD | 	call	#__system___basic_print_float
10364     00 12 06 F6 | 	mov	arg01, #0
10368     0A 14 06 F6 | 	mov	arg02, #10
1036c     00 16 06 F6 | 	mov	arg03, #0
10370     70 64 B0 FD | 	call	#__system___basic_print_char
10374     00 12 06 F6 | 	mov	arg01, #0
10378     7C AC B0 FD | 	call	#__system___getiolock_0372
1037c     FD 00 68 FC | 	wrlong	#0, result1
10380                 | LR__1355
10380                 | '   if t1.result_type=result_string then print t1.result.sresult
10380     1F 22 0E F2 | 	cmp	local03, #31 wz
10384     3C 00 90 5D |  if_ne	jmp	#LR__1356
10388     00 12 06 F6 | 	mov	arg01, #0
1038c     68 AC B0 FD | 	call	#__system___getiolock_0372
10390     FD 12 02 F6 | 	mov	arg01, result1
10394     B0 57 B0 FD | 	call	#__system___lockmem
10398     00 12 06 F6 | 	mov	arg01, #0
1039c     0F 15 02 F6 | 	mov	arg02, local01
103a0     00 16 06 F6 | 	mov	arg03, #0
103a4     94 64 B0 FD | 	call	#__system___basic_print_string
103a8     00 12 06 F6 | 	mov	arg01, #0
103ac     0A 14 06 F6 | 	mov	arg02, #10
103b0     00 16 06 F6 | 	mov	arg03, #0
103b4     2C 64 B0 FD | 	call	#__system___basic_print_char
103b8     00 12 06 F6 | 	mov	arg01, #0
103bc     38 AC B0 FD | 	call	#__system___getiolock_0372
103c0     FD 00 68 FC | 	wrlong	#0, result1
103c4                 | LR__1356
103c4                 | LR__1357
103c4                 | ' if r=print_mod_empty then print
103c4     20 24 0E F2 | 	cmp	local04, #32 wz
103c8     2C 00 90 5D |  if_ne	jmp	#LR__1358
103cc     00 12 06 F6 | 	mov	arg01, #0
103d0     24 AC B0 FD | 	call	#__system___getiolock_0372
103d4     FD 12 02 F6 | 	mov	arg01, result1
103d8     6C 57 B0 FD | 	call	#__system___lockmem
103dc     00 12 06 F6 | 	mov	arg01, #0
103e0     0A 14 06 F6 | 	mov	arg02, #10
103e4     00 16 06 F6 | 	mov	arg03, #0
103e8     F8 63 B0 FD | 	call	#__system___basic_print_char
103ec     00 12 06 F6 | 	mov	arg01, #0
103f0     04 AC B0 FD | 	call	#__system___getiolock_0372
103f4     FD 00 68 FC | 	wrlong	#0, result1
103f8                 | LR__1358
103f8                 | LR__1359
103f8     A7 F0 03 F6 | 	mov	ptra, fp
103fc     B2 00 A0 FD | 	call	#popregs_
10400                 | _do_print_ret
10400     2D 00 64 FD | 	ret
10404                 | 
10404                 | ' 
10404                 | ' 
10404                 | ' sub do_paper
10404                 | _do_paper
10404     03 4A 05 F6 | 	mov	COUNT_, #3
10408     A8 00 A0 FD | 	call	#pushregs_
1040c     00 87 BF FD | 	call	#_pop
10410     FD 1E 02 F6 | 	mov	local01, result1
10414     FE 20 02 F6 | 	mov	local02, result2
10418     FF 22 02 F6 | 	mov	local03, result3
1041c                 | ' t1=pop() 
1041c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1041c     1E 22 0E F2 | 	cmp	local03, #30 wz
10420     10 00 90 5D |  if_ne	jmp	#LR__1360
10424     0F 13 02 F6 | 	mov	arg01, local01
10428     00 14 06 F6 | 	mov	arg02, #0
1042c     F0 84 B0 FD | 	call	#__system___float_tointeger
10430     FD 1E 02 F6 | 	mov	local01, result1
10434                 | LR__1360
10434                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
10434     1F 22 0E F2 | 	cmp	local03, #31 wz
10438     18 00 90 5D |  if_ne	jmp	#LR__1361
1043c     0F 13 02 F6 | 	mov	arg01, local01
10440     FC 87 B0 FD | 	call	#__system____builtin_atof
10444     FD 12 02 F6 | 	mov	arg01, result1
10448     00 14 06 F6 | 	mov	arg02, #0
1044c     D0 84 B0 FD | 	call	#__system___float_tointeger
10450     FD 1E 02 F6 | 	mov	local01, result1
10454                 | LR__1361
10454     2D 00 00 FF 
10458     FC E5 05 F1 | 	add	objptr, ##23548
1045c     F2 1E 62 FC | 	wrlong	local01, objptr
10460     04 E4 05 F1 | 	add	objptr, #4
10464     F2 12 02 FB | 	rdlong	arg01, objptr
10468                 | ' 
10468                 | ' write_color:=ff
10468     2D 00 00 FF 
1046c     C3 E5 85 F1 | 	sub	objptr, ##23491
10470     F2 12 62 FC | 	wrlong	arg01, objptr
10474                 | ' write_background:=bb
10474     04 E4 05 F1 | 	add	objptr, #4
10478     F2 1E 62 FC | 	wrlong	local01, objptr
1047c     41 E4 85 F1 | 	sub	objptr, #65
10480     A7 F0 03 F6 | 	mov	ptra, fp
10484     B2 00 A0 FD | 	call	#popregs_
10488                 | _do_paper_ret
10488     2D 00 64 FD | 	ret
1048c                 | 
1048c                 | ' 
1048c                 | ' sub do_ink
1048c                 | _do_ink
1048c     03 4A 05 F6 | 	mov	COUNT_, #3
10490     A8 00 A0 FD | 	call	#pushregs_
10494     78 86 BF FD | 	call	#_pop
10498     FD 1E 02 F6 | 	mov	local01, result1
1049c     FE 20 02 F6 | 	mov	local02, result2
104a0     FF 22 02 F6 | 	mov	local03, result3
104a4                 | ' t1=pop() 
104a4                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
104a4     1E 22 0E F2 | 	cmp	local03, #30 wz
104a8     10 00 90 5D |  if_ne	jmp	#LR__1370
104ac     0F 13 02 F6 | 	mov	arg01, local01
104b0     00 14 06 F6 | 	mov	arg02, #0
104b4     68 84 B0 FD | 	call	#__system___float_tointeger
104b8     FD 1E 02 F6 | 	mov	local01, result1
104bc                 | LR__1370
104bc                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
104bc     1F 22 0E F2 | 	cmp	local03, #31 wz
104c0     18 00 90 5D |  if_ne	jmp	#LR__1371
104c4     0F 13 02 F6 | 	mov	arg01, local01
104c8     74 87 B0 FD | 	call	#__system____builtin_atof
104cc     FD 12 02 F6 | 	mov	arg01, result1
104d0     00 14 06 F6 | 	mov	arg02, #0
104d4     48 84 B0 FD | 	call	#__system___float_tointeger
104d8     FD 1E 02 F6 | 	mov	local01, result1
104dc                 | LR__1371
104dc     2E 00 00 FF 
104e0     00 E4 05 F1 | 	add	objptr, ##23552
104e4     F2 1E 62 FC | 	wrlong	local01, objptr
104e8     04 E4 85 F1 | 	sub	objptr, #4
104ec     F2 14 02 FB | 	rdlong	arg02, objptr
104f0                 | ' 
104f0                 | ' write_color:=ff
104f0     2D 00 00 FF 
104f4     BF E5 85 F1 | 	sub	objptr, ##23487
104f8     F2 1E 62 FC | 	wrlong	local01, objptr
104fc                 | ' write_background:=bb
104fc     04 E4 05 F1 | 	add	objptr, #4
10500     F2 14 62 FC | 	wrlong	arg02, objptr
10504     2D 00 00 FF 
10508     BF E5 05 F1 | 	add	objptr, ##23487
1050c     F2 12 02 FB | 	rdlong	arg01, objptr
10510     2E 00 00 FF 
10514     00 E4 85 F1 | 	sub	objptr, ##23552
10518     04 33 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
1051c     A7 F0 03 F6 | 	mov	ptra, fp
10520     B2 00 A0 FD | 	call	#popregs_
10524                 | _do_ink_ret
10524     2D 00 64 FD | 	ret
10528                 | 
10528                 | ' 
10528                 | ' 
10528                 | ' sub do_font
10528                 | _do_font
10528     03 4A 05 F6 | 	mov	COUNT_, #3
1052c     A8 00 A0 FD | 	call	#pushregs_
10530     DC 85 BF FD | 	call	#_pop
10534     FD 1E 02 F6 | 	mov	local01, result1
10538     FE 20 02 F6 | 	mov	local02, result2
1053c     FF 22 02 F6 | 	mov	local03, result3
10540                 | ' t1=pop() 
10540                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
10540     1E 22 0E F2 | 	cmp	local03, #30 wz
10544     10 00 90 5D |  if_ne	jmp	#LR__1380
10548     0F 13 02 F6 | 	mov	arg01, local01
1054c     00 14 06 F6 | 	mov	arg02, #0
10550     CC 83 B0 FD | 	call	#__system___float_tointeger
10554     FD 1E 02 F6 | 	mov	local01, result1
10558                 | LR__1380
10558                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
10558     1F 22 0E F2 | 	cmp	local03, #31 wz
1055c     18 00 90 5D |  if_ne	jmp	#LR__1381
10560     0F 13 02 F6 | 	mov	arg01, local01
10564     D8 86 B0 FD | 	call	#__system____builtin_atof
10568     FD 12 02 F6 | 	mov	arg01, result1
1056c     00 14 06 F6 | 	mov	arg02, #0
10570     AC 83 B0 FD | 	call	#__system___float_tointeger
10574     FD 1E 02 F6 | 	mov	local01, result1
10578                 | LR__1381
10578     2E 00 00 FF 
1057c     04 E4 05 F1 | 	add	objptr, ##23556
10580     F2 1E 62 FC | 	wrlong	local01, objptr
10584     2E 00 00 FF 
10588     04 E4 85 F1 | 	sub	objptr, ##23556
1058c     02 1E 66 F0 | 	shl	local01, #2
10590     0F 13 02 F6 | 	mov	arg01, local01
10594     E8 41 B0 FD | 	call	#_hg010b_spin2_setfontfamily
10598     A7 F0 03 F6 | 	mov	ptra, fp
1059c     B2 00 A0 FD | 	call	#popregs_
105a0                 | _do_font_ret
105a0     2D 00 64 FD | 	ret
105a4                 | 
105a4                 | ' 
105a4                 | ' sub do_mode
105a4                 | _do_mode
105a4     04 4A 05 F6 | 	mov	COUNT_, #4
105a8     A8 00 A0 FD | 	call	#pushregs_
105ac     60 85 BF FD | 	call	#_pop
105b0     FD 1E 02 F6 | 	mov	local01, result1
105b4     FE 20 02 F6 | 	mov	local02, result2
105b8     FF 22 02 F6 | 	mov	local03, result3
105bc                 | ' t1=pop() 
105bc                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
105bc     1E 22 0E F2 | 	cmp	local03, #30 wz
105c0     10 00 90 5D |  if_ne	jmp	#LR__1390
105c4     0F 13 02 F6 | 	mov	arg01, local01
105c8     00 14 06 F6 | 	mov	arg02, #0
105cc     50 83 B0 FD | 	call	#__system___float_tointeger
105d0     FD 1E 02 F6 | 	mov	local01, result1
105d4                 | LR__1390
105d4                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
105d4     1F 22 0E F2 | 	cmp	local03, #31 wz
105d8     18 00 90 5D |  if_ne	jmp	#LR__1391
105dc     0F 13 02 F6 | 	mov	arg01, local01
105e0     5C 86 B0 FD | 	call	#__system____builtin_atof
105e4     FD 12 02 F6 | 	mov	arg01, result1
105e8     00 14 06 F6 | 	mov	arg02, #0
105ec     30 83 B0 FD | 	call	#__system___float_tointeger
105f0     FD 1E 02 F6 | 	mov	local01, result1
105f4                 | LR__1391
105f4                 | ' select case t1.result.iresult
105f4     0F 25 02 F6 | 	mov	local04, local01
105f8     05 24 26 F3 | 	fle	local04, #5
105fc     30 24 62 FD | 	jmprel	local04
10600                 | LR__1392
10600     14 00 90 FD | 	jmp	#LR__1393
10604     A8 00 90 FD | 	jmp	#LR__1394
10608     10 01 90 FD | 	jmp	#LR__1395
1060c     78 01 90 FD | 	jmp	#LR__1396
10610     E0 01 90 FD | 	jmp	#LR__1397
10614     70 02 90 FD | 	jmp	#LR__1398
10618                 | LR__1393
10618     2E 00 00 FF 
1061c     04 E4 05 F1 | 	add	objptr, ##23556
10620     F2 02 68 FC | 	wrlong	#1, objptr
10624     04 E4 85 F1 | 	sub	objptr, #4
10628     F2 34 69 FC | 	wrlong	#154, objptr
1062c     22 00 00 FF 
10630     A4 E5 05 F1 | 	add	objptr, ##17828
10634     F2 02 68 FC | 	wrlong	#1, objptr
10638     22 00 00 FF 
1063c     A8 E5 85 F1 | 	sub	objptr, ##17832
10640     F2 26 69 FC | 	wrlong	#147, objptr
10644     2D 00 00 FF 
10648     FC E5 85 F1 | 	sub	objptr, ##23548
1064c     04 12 06 F6 | 	mov	arg01, #4
10650     2C 41 B0 FD | 	call	#_hg010b_spin2_setfontfamily
10654     2E 00 00 FF 
10658     00 E4 05 F1 | 	add	objptr, ##23552
1065c     F2 12 02 FB | 	rdlong	arg01, objptr
10660     04 E4 85 F1 | 	sub	objptr, #4
10664     F2 14 02 FB | 	rdlong	arg02, objptr
10668                 | ' 
10668                 | ' write_color:=ff
10668     2D 00 00 FF 
1066c     BF E5 85 F1 | 	sub	objptr, ##23487
10670     F2 12 62 FC | 	wrlong	arg01, objptr
10674                 | ' write_background:=bb
10674     04 E4 05 F1 | 	add	objptr, #4
10678     F2 14 62 FC | 	wrlong	arg02, objptr
1067c     01 00 00 FF 
10680     00 EA 05 F1 | 	add	ptr__dat__, ##512
10684     52 00 00 FF 
10688     07 E4 05 F1 | 	add	objptr, ##41991
1068c     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
10690     04 E4 85 F1 | 	sub	objptr, #4
10694     03 00 80 FF 
10698     F2 28 69 FC | 	wrlong	##1684, objptr
1069c     52 00 00 FF 
106a0     44 E4 85 F1 | 	sub	objptr, ##42052
106a4     01 00 00 FF 
106a8     00 EA 85 F1 | 	sub	ptr__dat__, ##512
106ac     D8 01 90 FD | 	jmp	#LR__1398
106b0                 | LR__1394
106b0     2E 00 00 FF 
106b4     04 E4 05 F1 | 	add	objptr, ##23556
106b8     F2 00 68 FC | 	wrlong	#0, objptr
106bc     04 E4 85 F1 | 	sub	objptr, #4
106c0     F2 2E 68 FC | 	wrlong	#23, objptr
106c4     22 00 00 FF 
106c8     A4 E5 05 F1 | 	add	objptr, ##17828
106cc     F2 00 68 FC | 	wrlong	#0, objptr
106d0     22 00 00 FF 
106d4     A8 E5 85 F1 | 	sub	objptr, ##17832
106d8     F2 00 68 FC | 	wrlong	#0, objptr
106dc     2D 00 00 FF 
106e0     FC E5 85 F1 | 	sub	objptr, ##23548
106e4     00 12 06 F6 | 	mov	arg01, #0
106e8     94 40 B0 FD | 	call	#_hg010b_spin2_setfontfamily
106ec     2E 00 00 FF 
106f0     00 E4 05 F1 | 	add	objptr, ##23552
106f4     F2 12 02 FB | 	rdlong	arg01, objptr
106f8     04 E4 85 F1 | 	sub	objptr, #4
106fc     F2 14 02 FB | 	rdlong	arg02, objptr
10700                 | ' 
10700                 | ' write_color:=ff
10700     2D 00 00 FF 
10704     BF E5 85 F1 | 	sub	objptr, ##23487
10708     F2 12 62 FC | 	wrlong	arg01, objptr
1070c                 | ' write_background:=bb
1070c     04 E4 05 F1 | 	add	objptr, #4
10710     F2 14 62 FC | 	wrlong	arg02, objptr
10714     41 E4 85 F1 | 	sub	objptr, #65
10718     6C 01 90 FD | 	jmp	#LR__1398
1071c                 | LR__1395
1071c     2E 00 00 FF 
10720     04 E4 05 F1 | 	add	objptr, ##23556
10724     F2 00 68 FC | 	wrlong	#0, objptr
10728     04 E4 85 F1 | 	sub	objptr, #4
1072c     F2 6A 69 FC | 	wrlong	#181, objptr
10730     22 00 00 FF 
10734     A4 E5 05 F1 | 	add	objptr, ##17828
10738     F2 00 68 FC | 	wrlong	#0, objptr
1073c     22 00 00 FF 
10740     A8 E5 85 F1 | 	sub	objptr, ##17832
10744     F2 00 68 FC | 	wrlong	#0, objptr
10748     2D 00 00 FF 
1074c     FC E5 85 F1 | 	sub	objptr, ##23548
10750     00 12 06 F6 | 	mov	arg01, #0
10754     28 40 B0 FD | 	call	#_hg010b_spin2_setfontfamily
10758     2E 00 00 FF 
1075c     00 E4 05 F1 | 	add	objptr, ##23552
10760     F2 12 02 FB | 	rdlong	arg01, objptr
10764     04 E4 85 F1 | 	sub	objptr, #4
10768     F2 14 02 FB | 	rdlong	arg02, objptr
1076c                 | ' 
1076c                 | ' write_color:=ff
1076c     2D 00 00 FF 
10770     BF E5 85 F1 | 	sub	objptr, ##23487
10774     F2 12 62 FC | 	wrlong	arg01, objptr
10778                 | ' write_background:=bb
10778     04 E4 05 F1 | 	add	objptr, #4
1077c     F2 14 62 FC | 	wrlong	arg02, objptr
10780     41 E4 85 F1 | 	sub	objptr, #65
10784     00 01 90 FD | 	jmp	#LR__1398
10788                 | LR__1396
10788     2E 00 00 FF 
1078c     04 E4 05 F1 | 	add	objptr, ##23556
10790     F2 00 68 FC | 	wrlong	#0, objptr
10794     04 E4 85 F1 | 	sub	objptr, #4
10798     F2 1E 68 FC | 	wrlong	#15, objptr
1079c     22 00 00 FF 
107a0     A4 E5 05 F1 | 	add	objptr, ##17828
107a4     F2 00 68 FC | 	wrlong	#0, objptr
107a8     22 00 00 FF 
107ac     A8 E5 85 F1 | 	sub	objptr, ##17832
107b0     F2 00 68 FC | 	wrlong	#0, objptr
107b4     2D 00 00 FF 
107b8     FC E5 85 F1 | 	sub	objptr, ##23548
107bc     00 12 06 F6 | 	mov	arg01, #0
107c0     BC 3F B0 FD | 	call	#_hg010b_spin2_setfontfamily
107c4     2E 00 00 FF 
107c8     00 E4 05 F1 | 	add	objptr, ##23552
107cc     F2 12 02 FB | 	rdlong	arg01, objptr
107d0     04 E4 85 F1 | 	sub	objptr, #4
107d4     F2 14 02 FB | 	rdlong	arg02, objptr
107d8                 | ' 
107d8                 | ' write_color:=ff
107d8     2D 00 00 FF 
107dc     BF E5 85 F1 | 	sub	objptr, ##23487
107e0     F2 12 62 FC | 	wrlong	arg01, objptr
107e4                 | ' write_background:=bb
107e4     04 E4 05 F1 | 	add	objptr, #4
107e8     F2 14 62 FC | 	wrlong	arg02, objptr
107ec     41 E4 85 F1 | 	sub	objptr, #65
107f0     94 00 90 FD | 	jmp	#LR__1398
107f4                 | LR__1397
107f4     2E 00 00 FF 
107f8     04 E4 05 F1 | 	add	objptr, ##23556
107fc     F2 02 68 FC | 	wrlong	#1, objptr
10800     04 E4 85 F1 | 	sub	objptr, #4
10804     F2 02 68 FC | 	wrlong	#1, objptr
10808     22 00 00 FF 
1080c     A4 E5 05 F1 | 	add	objptr, ##17828
10810     F2 02 68 FC | 	wrlong	#1, objptr
10814     22 00 00 FF 
10818     A8 E5 85 F1 | 	sub	objptr, ##17832
1081c     F2 1C 68 FC | 	wrlong	#14, objptr
10820     2D 00 00 FF 
10824     FC E5 85 F1 | 	sub	objptr, ##23548
10828     04 12 06 F6 | 	mov	arg01, #4
1082c     50 3F B0 FD | 	call	#_hg010b_spin2_setfontfamily
10830     2E 00 00 FF 
10834     00 E4 05 F1 | 	add	objptr, ##23552
10838     F2 12 02 FB | 	rdlong	arg01, objptr
1083c     04 E4 85 F1 | 	sub	objptr, #4
10840     F2 14 02 FB | 	rdlong	arg02, objptr
10844                 | ' 
10844                 | ' write_color:=ff
10844     2D 00 00 FF 
10848     BF E5 85 F1 | 	sub	objptr, ##23487
1084c     F2 12 62 FC | 	wrlong	arg01, objptr
10850                 | ' write_background:=bb
10850     04 E4 05 F1 | 	add	objptr, #4
10854     F2 14 62 FC | 	wrlong	arg02, objptr
10858     07 00 00 FF 
1085c     72 EB 05 F1 | 	add	ptr__dat__, ##3954
10860     52 00 00 FF 
10864     07 E4 05 F1 | 	add	objptr, ##41991
10868     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1086c     04 E4 85 F1 | 	sub	objptr, #4
10870     03 00 80 FF 
10874     F2 28 69 FC | 	wrlong	##1684, objptr
10878     52 00 00 FF 
1087c     44 E4 85 F1 | 	sub	objptr, ##42052
10880     07 00 00 FF 
10884     72 EB 85 F1 | 	sub	ptr__dat__, ##3954
10888                 | LR__1398
10888     52 00 00 FF 
1088c     40 E4 05 F1 | 	add	objptr, ##42048
10890     F2 1E 62 FC | 	wrlong	local01, objptr
10894     24 00 00 FF 
10898     40 E4 85 F1 | 	sub	objptr, ##18496
1089c     F2 12 02 FB | 	rdlong	arg01, objptr
108a0     04 E4 85 F1 | 	sub	objptr, #4
108a4     F2 14 02 FB | 	rdlong	arg02, objptr
108a8     2D 00 00 FF 
108ac     FC E5 85 F1 | 	sub	objptr, ##23548
108b0     B4 3F B0 FD | 	call	#_hg010b_spin2_cls
108b4     27 01 00 FF 
108b8     A9 13 06 F6 | 	mov	arg01, ##@LR__4335
108bc                 | ' 
108bc                 | ' write(text)
108bc     64 42 B0 FD | 	call	#_hg010b_spin2_write
108c0                 | ' crlf
108c0     C0 43 B0 FD | 	call	#_hg010b_spin2_crlf
108c4     10 00 00 FF 
108c8     10 EB 05 F1 | 	add	ptr__dat__, ##8464
108cc     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
108d0     10 00 00 FF 
108d4     10 EB 85 F1 | 	sub	ptr__dat__, ##8464
108d8                 | ' 
108d8                 | ' write(text)
108d8     48 42 B0 FD | 	call	#_hg010b_spin2_write
108dc                 | ' crlf
108dc     A4 43 B0 FD | 	call	#_hg010b_spin2_crlf
108e0     50 00 00 FF 
108e4     A0 E5 05 F1 | 	add	objptr, ##41376
108e8     F2 12 02 FB | 	rdlong	arg01, objptr
108ec     50 00 00 FF 
108f0     A0 E5 85 F1 | 	sub	objptr, ##41376
108f4                 | ' 
108f4                 | ' write(text)
108f4     2C 42 B0 FD | 	call	#_hg010b_spin2_write
108f8                 | ' crlf
108f8     88 43 B0 FD | 	call	#_hg010b_spin2_crlf
108fc     A7 F0 03 F6 | 	mov	ptra, fp
10900     B2 00 A0 FD | 	call	#popregs_
10904                 | _do_mode_ret
10904     2D 00 64 FD | 	ret
10908                 | 
10908                 | ' 
10908                 | ' 
10908                 | ' 
10908                 | ' sub do_pinwrite
10908                 | _do_pinwrite
10908     01 4A 05 F6 | 	mov	COUNT_, #1
1090c     A8 00 A0 FD | 	call	#pushregs_
10910     18 F0 07 F1 | 	add	ptra, #24
10914     F8 81 BF FD | 	call	#_pop
10918     FD 14 02 F6 | 	mov	arg02, result1
1091c     FE 12 02 F6 | 	mov	arg01, result2
10920     FF 1E 02 F6 | 	mov	local01, result3
10924     A7 14 62 FC | 	wrlong	arg02, fp
10928     04 4E 05 F1 | 	add	fp, #4
1092c     A7 12 62 FC | 	wrlong	arg01, fp
10930     04 4E 05 F1 | 	add	fp, #4
10934     A7 1E 62 FC | 	wrlong	local01, fp
10938     08 4E 85 F1 | 	sub	fp, #8
1093c     D0 81 BF FD | 	call	#_pop
10940     FF 1E 02 F6 | 	mov	local01, result3
10944     0C 4E 05 F1 | 	add	fp, #12
10948     A7 FA 61 FC | 	wrlong	result1, fp
1094c     04 4E 05 F1 | 	add	fp, #4
10950     A7 FC 61 FC | 	wrlong	result2, fp
10954     04 4E 05 F1 | 	add	fp, #4
10958     A7 1E 62 FC | 	wrlong	local01, fp
1095c     08 4E 85 F1 | 	sub	fp, #8
10960     A7 12 02 F6 | 	mov	arg01, fp
10964     0C 4E 85 F1 | 	sub	fp, #12
10968     2C DA BF FD | 	call	#_converttoint
1096c     FD 1E 02 F6 | 	mov	local01, result1
10970     A7 12 02 F6 | 	mov	arg01, fp
10974     20 DA BF FD | 	call	#_converttoint
10978     FD 14 02 F6 | 	mov	arg02, result1
1097c     0F 13 02 F6 | 	mov	arg01, local01
10980     78 53 B0 FD | 	call	#__system___pinwrite
10984     A7 F0 03 F6 | 	mov	ptra, fp
10988     B2 00 A0 FD | 	call	#popregs_
1098c                 | _do_pinwrite_ret
1098c     2D 00 64 FD | 	ret
10990                 | 
10990                 | ' 
10990                 | ' sub do_pinfloat
10990                 | _do_pinfloat
10990     00 4A 05 F6 | 	mov	COUNT_, #0
10994     A8 00 A0 FD | 	call	#pushregs_
10998     0C F0 07 F1 | 	add	ptra, #12
1099c     70 81 BF FD | 	call	#_pop
109a0     A7 FA 61 FC | 	wrlong	result1, fp
109a4     04 4E 05 F1 | 	add	fp, #4
109a8     A7 FC 61 FC | 	wrlong	result2, fp
109ac     04 4E 05 F1 | 	add	fp, #4
109b0     A7 FE 61 FC | 	wrlong	result3, fp
109b4     08 4E 85 F1 | 	sub	fp, #8
109b8     A7 12 02 F6 | 	mov	arg01, fp
109bc     D8 D9 BF FD | 	call	#_converttoint
109c0     50 FA 61 FD | 	fltl	result1
109c4     A7 F0 03 F6 | 	mov	ptra, fp
109c8     B2 00 A0 FD | 	call	#popregs_
109cc                 | _do_pinfloat_ret
109cc     2D 00 64 FD | 	ret
109d0                 | 
109d0                 | ' 
109d0                 | ' sub do_pinlo
109d0                 | _do_pinlo
109d0     00 4A 05 F6 | 	mov	COUNT_, #0
109d4     A8 00 A0 FD | 	call	#pushregs_
109d8     0C F0 07 F1 | 	add	ptra, #12
109dc     30 81 BF FD | 	call	#_pop
109e0     A7 FA 61 FC | 	wrlong	result1, fp
109e4     04 4E 05 F1 | 	add	fp, #4
109e8     A7 FC 61 FC | 	wrlong	result2, fp
109ec     04 4E 05 F1 | 	add	fp, #4
109f0     A7 FE 61 FC | 	wrlong	result3, fp
109f4     08 4E 85 F1 | 	sub	fp, #8
109f8     A7 12 02 F6 | 	mov	arg01, fp
109fc     98 D9 BF FD | 	call	#_converttoint
10a00     58 FA 61 FD | 	drvl	result1
10a04     A7 F0 03 F6 | 	mov	ptra, fp
10a08     B2 00 A0 FD | 	call	#popregs_
10a0c                 | _do_pinlo_ret
10a0c     2D 00 64 FD | 	ret
10a10                 | 
10a10                 | ' 
10a10                 | ' sub do_pinhi
10a10                 | _do_pinhi
10a10     00 4A 05 F6 | 	mov	COUNT_, #0
10a14     A8 00 A0 FD | 	call	#pushregs_
10a18     0C F0 07 F1 | 	add	ptra, #12
10a1c     F0 80 BF FD | 	call	#_pop
10a20     A7 FA 61 FC | 	wrlong	result1, fp
10a24     04 4E 05 F1 | 	add	fp, #4
10a28     A7 FC 61 FC | 	wrlong	result2, fp
10a2c     04 4E 05 F1 | 	add	fp, #4
10a30     A7 FE 61 FC | 	wrlong	result3, fp
10a34     08 4E 85 F1 | 	sub	fp, #8
10a38     A7 12 02 F6 | 	mov	arg01, fp
10a3c     58 D9 BF FD | 	call	#_converttoint
10a40     59 FA 61 FD | 	drvh	result1
10a44     A7 F0 03 F6 | 	mov	ptra, fp
10a48     B2 00 A0 FD | 	call	#popregs_
10a4c                 | _do_pinhi_ret
10a4c     2D 00 64 FD | 	ret
10a50                 | 
10a50                 | ' 
10a50                 | ' sub do_pintoggle
10a50                 | _do_pintoggle
10a50     00 4A 05 F6 | 	mov	COUNT_, #0
10a54     A8 00 A0 FD | 	call	#pushregs_
10a58     0C F0 07 F1 | 	add	ptra, #12
10a5c     B0 80 BF FD | 	call	#_pop
10a60     A7 FA 61 FC | 	wrlong	result1, fp
10a64     04 4E 05 F1 | 	add	fp, #4
10a68     A7 FC 61 FC | 	wrlong	result2, fp
10a6c     04 4E 05 F1 | 	add	fp, #4
10a70     A7 FE 61 FC | 	wrlong	result3, fp
10a74     08 4E 85 F1 | 	sub	fp, #8
10a78     A7 12 02 F6 | 	mov	arg01, fp
10a7c     18 D9 BF FD | 	call	#_converttoint
10a80     5F FA 61 FD | 	drvnot	result1
10a84     A7 F0 03 F6 | 	mov	ptra, fp
10a88     B2 00 A0 FD | 	call	#popregs_
10a8c                 | _do_pintoggle_ret
10a8c     2D 00 64 FD | 	ret
10a90                 | 
10a90                 | ' 
10a90                 | ' 
10a90                 | ' sub do_pinstart
10a90                 | _do_pinstart
10a90     03 4A 05 F6 | 	mov	COUNT_, #3
10a94     A8 00 A0 FD | 	call	#pushregs_
10a98     30 F0 07 F1 | 	add	ptra, #48
10a9c     70 80 BF FD | 	call	#_pop
10aa0     FD 16 02 F6 | 	mov	arg03, result1
10aa4     FE 14 02 F6 | 	mov	arg02, result2
10aa8     FF 18 02 F6 | 	mov	arg04, result3
10aac     A7 16 62 FC | 	wrlong	arg03, fp
10ab0     04 4E 05 F1 | 	add	fp, #4
10ab4     A7 14 62 FC | 	wrlong	arg02, fp
10ab8     04 4E 05 F1 | 	add	fp, #4
10abc     A7 18 62 FC | 	wrlong	arg04, fp
10ac0     08 4E 85 F1 | 	sub	fp, #8
10ac4     48 80 BF FD | 	call	#_pop
10ac8     FD 16 02 F6 | 	mov	arg03, result1
10acc     FE 14 02 F6 | 	mov	arg02, result2
10ad0     FF 18 02 F6 | 	mov	arg04, result3
10ad4     0C 4E 05 F1 | 	add	fp, #12
10ad8     A7 16 62 FC | 	wrlong	arg03, fp
10adc     04 4E 05 F1 | 	add	fp, #4
10ae0     A7 14 62 FC | 	wrlong	arg02, fp
10ae4     04 4E 05 F1 | 	add	fp, #4
10ae8     A7 18 62 FC | 	wrlong	arg04, fp
10aec     14 4E 85 F1 | 	sub	fp, #20
10af0     1C 80 BF FD | 	call	#_pop
10af4     FD 16 02 F6 | 	mov	arg03, result1
10af8     FE 14 02 F6 | 	mov	arg02, result2
10afc     FF 18 02 F6 | 	mov	arg04, result3
10b00     18 4E 05 F1 | 	add	fp, #24
10b04     A7 16 62 FC | 	wrlong	arg03, fp
10b08     04 4E 05 F1 | 	add	fp, #4
10b0c     A7 14 62 FC | 	wrlong	arg02, fp
10b10     04 4E 05 F1 | 	add	fp, #4
10b14     A7 18 62 FC | 	wrlong	arg04, fp
10b18     20 4E 85 F1 | 	sub	fp, #32
10b1c     F0 7F BF FD | 	call	#_pop
10b20     FF 16 02 F6 | 	mov	arg03, result3
10b24     24 4E 05 F1 | 	add	fp, #36
10b28     A7 FA 61 FC | 	wrlong	result1, fp
10b2c     04 4E 05 F1 | 	add	fp, #4
10b30     A7 FC 61 FC | 	wrlong	result2, fp
10b34     04 4E 05 F1 | 	add	fp, #4
10b38     A7 16 62 FC | 	wrlong	arg03, fp
10b3c     08 4E 85 F1 | 	sub	fp, #8
10b40     A7 12 02 F6 | 	mov	arg01, fp
10b44     24 4E 85 F1 | 	sub	fp, #36
10b48     4C D8 BF FD | 	call	#_converttoint
10b4c     FD 1E 02 F6 | 	mov	local01, result1
10b50     18 4E 05 F1 | 	add	fp, #24
10b54     A7 12 02 F6 | 	mov	arg01, fp
10b58     18 4E 85 F1 | 	sub	fp, #24
10b5c     38 D8 BF FD | 	call	#_converttoint
10b60     FD 20 02 F6 | 	mov	local02, result1
10b64     0C 4E 05 F1 | 	add	fp, #12
10b68     A7 12 02 F6 | 	mov	arg01, fp
10b6c     0C 4E 85 F1 | 	sub	fp, #12
10b70     24 D8 BF FD | 	call	#_converttoint
10b74     FD 22 02 F6 | 	mov	local03, result1
10b78     A7 12 02 F6 | 	mov	arg01, fp
10b7c     18 D8 BF FD | 	call	#_converttoint
10b80     40 1E 62 FD | 	dirl	local01
10b84     0F 21 02 FC | 	wrpin	local02, local01
10b88     0F 23 12 FC | 	wxpin	local03, local01
10b8c     0F FB 21 FC | 	wypin	result1, local01
10b90     41 1E 62 FD | 	dirh	local01
10b94     A7 F0 03 F6 | 	mov	ptra, fp
10b98     B2 00 A0 FD | 	call	#popregs_
10b9c                 | _do_pinstart_ret
10b9c     2D 00 64 FD | 	ret
10ba0                 | 
10ba0                 | ' 
10ba0                 | ' 
10ba0                 | ' sub do_wrpin
10ba0                 | _do_wrpin
10ba0     01 4A 05 F6 | 	mov	COUNT_, #1
10ba4     A8 00 A0 FD | 	call	#pushregs_
10ba8     18 F0 07 F1 | 	add	ptra, #24
10bac     60 7F BF FD | 	call	#_pop
10bb0     FD 14 02 F6 | 	mov	arg02, result1
10bb4     FE 12 02 F6 | 	mov	arg01, result2
10bb8     FF 1E 02 F6 | 	mov	local01, result3
10bbc     A7 14 62 FC | 	wrlong	arg02, fp
10bc0     04 4E 05 F1 | 	add	fp, #4
10bc4     A7 12 62 FC | 	wrlong	arg01, fp
10bc8     04 4E 05 F1 | 	add	fp, #4
10bcc     A7 1E 62 FC | 	wrlong	local01, fp
10bd0     08 4E 85 F1 | 	sub	fp, #8
10bd4     38 7F BF FD | 	call	#_pop
10bd8     FF 1E 02 F6 | 	mov	local01, result3
10bdc     0C 4E 05 F1 | 	add	fp, #12
10be0     A7 FA 61 FC | 	wrlong	result1, fp
10be4     04 4E 05 F1 | 	add	fp, #4
10be8     A7 FC 61 FC | 	wrlong	result2, fp
10bec     04 4E 05 F1 | 	add	fp, #4
10bf0     A7 1E 62 FC | 	wrlong	local01, fp
10bf4     08 4E 85 F1 | 	sub	fp, #8
10bf8     A7 12 02 F6 | 	mov	arg01, fp
10bfc     0C 4E 85 F1 | 	sub	fp, #12
10c00     94 D7 BF FD | 	call	#_converttoint
10c04     FD 1E 02 F6 | 	mov	local01, result1
10c08     A7 12 02 F6 | 	mov	arg01, fp
10c0c     88 D7 BF FD | 	call	#_converttoint
10c10     0F FB 01 FC | 	wrpin	result1, local01
10c14     A7 F0 03 F6 | 	mov	ptra, fp
10c18     B2 00 A0 FD | 	call	#popregs_
10c1c                 | _do_wrpin_ret
10c1c     2D 00 64 FD | 	ret
10c20                 | 
10c20                 | ' 
10c20                 | ' sub do_wxpin
10c20                 | _do_wxpin
10c20     01 4A 05 F6 | 	mov	COUNT_, #1
10c24     A8 00 A0 FD | 	call	#pushregs_
10c28     18 F0 07 F1 | 	add	ptra, #24
10c2c     E0 7E BF FD | 	call	#_pop
10c30     FD 14 02 F6 | 	mov	arg02, result1
10c34     FE 12 02 F6 | 	mov	arg01, result2
10c38     FF 1E 02 F6 | 	mov	local01, result3
10c3c     A7 14 62 FC | 	wrlong	arg02, fp
10c40     04 4E 05 F1 | 	add	fp, #4
10c44     A7 12 62 FC | 	wrlong	arg01, fp
10c48     04 4E 05 F1 | 	add	fp, #4
10c4c     A7 1E 62 FC | 	wrlong	local01, fp
10c50     08 4E 85 F1 | 	sub	fp, #8
10c54     B8 7E BF FD | 	call	#_pop
10c58     FF 1E 02 F6 | 	mov	local01, result3
10c5c     0C 4E 05 F1 | 	add	fp, #12
10c60     A7 FA 61 FC | 	wrlong	result1, fp
10c64     04 4E 05 F1 | 	add	fp, #4
10c68     A7 FC 61 FC | 	wrlong	result2, fp
10c6c     04 4E 05 F1 | 	add	fp, #4
10c70     A7 1E 62 FC | 	wrlong	local01, fp
10c74     08 4E 85 F1 | 	sub	fp, #8
10c78     A7 12 02 F6 | 	mov	arg01, fp
10c7c     0C 4E 85 F1 | 	sub	fp, #12
10c80     14 D7 BF FD | 	call	#_converttoint
10c84     FD 1E 02 F6 | 	mov	local01, result1
10c88     A7 12 02 F6 | 	mov	arg01, fp
10c8c     08 D7 BF FD | 	call	#_converttoint
10c90     0F FB 11 FC | 	wxpin	result1, local01
10c94     A7 F0 03 F6 | 	mov	ptra, fp
10c98     B2 00 A0 FD | 	call	#popregs_
10c9c                 | _do_wxpin_ret
10c9c     2D 00 64 FD | 	ret
10ca0                 | 
10ca0                 | ' 
10ca0                 | ' sub do_wypin
10ca0                 | _do_wypin
10ca0     01 4A 05 F6 | 	mov	COUNT_, #1
10ca4     A8 00 A0 FD | 	call	#pushregs_
10ca8     18 F0 07 F1 | 	add	ptra, #24
10cac     60 7E BF FD | 	call	#_pop
10cb0     FD 14 02 F6 | 	mov	arg02, result1
10cb4     FE 12 02 F6 | 	mov	arg01, result2
10cb8     FF 1E 02 F6 | 	mov	local01, result3
10cbc     A7 14 62 FC | 	wrlong	arg02, fp
10cc0     04 4E 05 F1 | 	add	fp, #4
10cc4     A7 12 62 FC | 	wrlong	arg01, fp
10cc8     04 4E 05 F1 | 	add	fp, #4
10ccc     A7 1E 62 FC | 	wrlong	local01, fp
10cd0     08 4E 85 F1 | 	sub	fp, #8
10cd4     38 7E BF FD | 	call	#_pop
10cd8     FF 1E 02 F6 | 	mov	local01, result3
10cdc     0C 4E 05 F1 | 	add	fp, #12
10ce0     A7 FA 61 FC | 	wrlong	result1, fp
10ce4     04 4E 05 F1 | 	add	fp, #4
10ce8     A7 FC 61 FC | 	wrlong	result2, fp
10cec     04 4E 05 F1 | 	add	fp, #4
10cf0     A7 1E 62 FC | 	wrlong	local01, fp
10cf4     08 4E 85 F1 | 	sub	fp, #8
10cf8     A7 12 02 F6 | 	mov	arg01, fp
10cfc     0C 4E 85 F1 | 	sub	fp, #12
10d00     94 D6 BF FD | 	call	#_converttoint
10d04     FD 1E 02 F6 | 	mov	local01, result1
10d08     A7 12 02 F6 | 	mov	arg01, fp
10d0c     88 D6 BF FD | 	call	#_converttoint
10d10     0F FB 21 FC | 	wypin	result1, local01
10d14     A7 F0 03 F6 | 	mov	ptra, fp
10d18     B2 00 A0 FD | 	call	#popregs_
10d1c                 | _do_wypin_ret
10d1c     2D 00 64 FD | 	ret
10d20                 | 
10d20                 | ' 
10d20                 | ' sub do_position
10d20                 | _do_position
10d20     01 4A 05 F6 | 	mov	COUNT_, #1
10d24     A8 00 A0 FD | 	call	#pushregs_
10d28     18 F0 07 F1 | 	add	ptra, #24
10d2c     E0 7D BF FD | 	call	#_pop
10d30     FD 14 02 F6 | 	mov	arg02, result1
10d34     FE 12 02 F6 | 	mov	arg01, result2
10d38     FF 1E 02 F6 | 	mov	local01, result3
10d3c     A7 14 62 FC | 	wrlong	arg02, fp
10d40     04 4E 05 F1 | 	add	fp, #4
10d44     A7 12 62 FC | 	wrlong	arg01, fp
10d48     04 4E 05 F1 | 	add	fp, #4
10d4c     A7 1E 62 FC | 	wrlong	local01, fp
10d50     08 4E 85 F1 | 	sub	fp, #8
10d54     B8 7D BF FD | 	call	#_pop
10d58     FF 1E 02 F6 | 	mov	local01, result3
10d5c     0C 4E 05 F1 | 	add	fp, #12
10d60     A7 FA 61 FC | 	wrlong	result1, fp
10d64     04 4E 05 F1 | 	add	fp, #4
10d68     A7 FC 61 FC | 	wrlong	result2, fp
10d6c     04 4E 05 F1 | 	add	fp, #4
10d70     A7 1E 62 FC | 	wrlong	local01, fp
10d74     08 4E 85 F1 | 	sub	fp, #8
10d78     A7 12 02 F6 | 	mov	arg01, fp
10d7c     0C 4E 85 F1 | 	sub	fp, #12
10d80     14 D6 BF FD | 	call	#_converttoint
10d84     FD 1E 02 F6 | 	mov	local01, result1
10d88     A7 12 02 F6 | 	mov	arg01, fp
10d8c     08 D6 BF FD | 	call	#_converttoint
10d90     FD 14 02 F6 | 	mov	arg02, result1
10d94     0F 13 02 F6 | 	mov	arg01, local01
10d98     24 3A B0 FD | 	call	#_hg010b_spin2_setcursorpos
10d9c     A7 F0 03 F6 | 	mov	ptra, fp
10da0     B2 00 A0 FD | 	call	#popregs_
10da4                 | _do_position_ret
10da4     2D 00 64 FD | 	ret
10da8                 | 
10da8                 | ' 
10da8                 | ' sub do_waitms
10da8                 | _do_waitms
10da8     01 4A 05 F6 | 	mov	COUNT_, #1
10dac     A8 00 A0 FD | 	call	#pushregs_
10db0     18 F0 07 F1 | 	add	ptra, #24
10db4     58 7D BF FD | 	call	#_pop
10db8     A7 FA 61 FC | 	wrlong	result1, fp
10dbc     04 4E 05 F1 | 	add	fp, #4
10dc0     A7 FC 61 FC | 	wrlong	result2, fp
10dc4     04 4E 05 F1 | 	add	fp, #4
10dc8     A7 FE 61 FC | 	wrlong	result3, fp
10dcc                 | ' 
10dcc                 | ' t1=pop() 'value
10dcc                 | ' 
10dcc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
10dcc     08 4E 85 F1 | 	sub	fp, #8
10dd0     1C FE 0D F2 | 	cmp	result3, #28 wz
10dd4     08 4E 05 51 |  if_ne	add	fp, #8
10dd8     A7 12 02 5B |  if_ne	rdlong	arg01, fp
10ddc     08 4E 85 51 |  if_ne	sub	fp, #8
10de0     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
10de4     A7 12 02 AB |  if_e	rdlong	arg01, fp
10de8     0C 4E 05 A1 |  if_e	add	fp, #12
10dec     A7 12 62 AC |  if_e	wrlong	arg01, fp
10df0     0C 4E 85 A1 |  if_e	sub	fp, #12
10df4     14 00 90 AD |  if_e	jmp	#LR__1400
10df8     A7 12 02 F6 | 	mov	arg01, fp
10dfc     98 D5 BF FD | 	call	#_converttoint
10e00     0C 4E 05 F1 | 	add	fp, #12
10e04     A7 FA 61 FC | 	wrlong	result1, fp
10e08     0C 4E 85 F1 | 	sub	fp, #12
10e0c                 | LR__1400
10e0c                 | ' if t<0 then return
10e0c     0C 4E 05 F1 | 	add	fp, #12
10e10     A7 12 02 FB | 	rdlong	arg01, fp
10e14     0C 4E 85 F1 | 	sub	fp, #12
10e18     00 12 56 F2 | 	cmps	arg01, #0 wc
10e1c     B8 00 90 CD |  if_b	jmp	#LR__1405
10e20                 | ' if t < 5000 then 
10e20     0C 4E 05 F1 | 	add	fp, #12
10e24     A7 12 02 FB | 	rdlong	arg01, fp
10e28     0C 4E 85 F1 | 	sub	fp, #12
10e2c     09 00 00 FF 
10e30     88 13 56 F2 | 	cmps	arg01, ##5000 wc
10e34     14 00 90 3D |  if_ae	jmp	#LR__1401
10e38     0C 4E 05 F1 | 	add	fp, #12
10e3c     A7 12 02 FB | 	rdlong	arg01, fp
10e40     0C 4E 85 F1 | 	sub	fp, #12
10e44     F4 4F B0 FD | 	call	#__system___waitms
10e48     8C 00 90 FD | 	jmp	#LR__1404
10e4c                 | LR__1401
10e4c     10 4E 05 F1 | 	add	fp, #16
10e50     A7 02 68 FC | 	wrlong	#1, fp
10e54     04 4E 85 F1 | 	sub	fp, #4
10e58     A7 12 02 FB | 	rdlong	arg01, fp
10e5c     09 13 52 F6 | 	abs	arg01, arg01 wc
10e60     09 00 00 FF 
10e64     88 13 16 FD | 	qdiv	arg01, ##5000
10e68                 | '   for i=1 to t/5000
10e68     0C 4E 85 F1 | 	sub	fp, #12
10e6c     18 1E 62 FD | 	getqx	local01
10e70     0F 1F 82 F6 | 	negc	local01, local01
10e74     01 1E 06 F1 | 	add	local01, #1
10e78                 | LR__1402
10e78     10 4E 05 F1 | 	add	fp, #16
10e7c     A7 12 02 FB | 	rdlong	arg01, fp
10e80     10 4E 85 F1 | 	sub	fp, #16
10e84     0F 13 52 F2 | 	cmps	arg01, local01 wc
10e88     28 00 90 3D |  if_ae	jmp	#LR__1403
10e8c     0C 4E 05 F1 | 	add	fp, #12
10e90     A7 12 02 FB | 	rdlong	arg01, fp
10e94     0C 4E 85 F1 | 	sub	fp, #12
10e98     A0 4F B0 FD | 	call	#__system___waitms
10e9c     10 4E 05 F1 | 	add	fp, #16
10ea0     A7 12 02 FB | 	rdlong	arg01, fp
10ea4     01 12 06 F1 | 	add	arg01, #1
10ea8     A7 12 62 FC | 	wrlong	arg01, fp
10eac     10 4E 85 F1 | 	sub	fp, #16
10eb0     C4 FF 9F FD | 	jmp	#LR__1402
10eb4                 | LR__1403
10eb4     0C 4E 05 F1 | 	add	fp, #12
10eb8     A7 1E 02 FB | 	rdlong	local01, fp
10ebc     0F 1F 52 F6 | 	abs	local01, local01 wc
10ec0     09 00 00 FF 
10ec4     88 1F 16 FD | 	qdiv	local01, ##5000
10ec8     0C 4E 85 F1 | 	sub	fp, #12
10ecc     19 1E 62 FD | 	getqy	local01
10ed0     0F 13 82 F6 | 	negc	arg01, local01
10ed4     64 4F B0 FD | 	call	#__system___waitms
10ed8                 | LR__1404
10ed8                 | LR__1405
10ed8     A7 F0 03 F6 | 	mov	ptra, fp
10edc     B2 00 A0 FD | 	call	#popregs_
10ee0                 | _do_waitms_ret
10ee0     2D 00 64 FD | 	ret
10ee4                 | 
10ee4                 | ' 
10ee4                 | ' sub do_waitvbl
10ee4                 | _do_waitvbl
10ee4     01 12 06 F6 | 	mov	arg01, #1
10ee8     0C 39 B0 FD | 	call	#_hg010b_spin2_waitvbl
10eec                 | _do_waitvbl_ret
10eec     2D 00 64 FD | 	ret
10ef0                 | 
10ef0                 | ' 
10ef0                 | ' sub do_waitclock
10ef0                 | _do_waitclock
10ef0     52 00 00 FF 
10ef4     38 E4 05 F1 | 	add	objptr, ##42040
10ef8     F2 00 02 FB | 	rdlong	_var01, objptr
10efc                 | ' c=hkcnt
10efc                 | ' do: loop until hkcnt<>c
10efc                 | LR__1410
10efc     F2 02 02 FB | 	rdlong	_var02, objptr
10f00     00 03 0A F2 | 	cmp	_var02, _var01 wz
10f04     F4 FF 9F AD |  if_e	jmp	#LR__1410
10f08     52 00 00 FF 
10f0c     38 E4 85 F1 | 	sub	objptr, ##42040
10f10                 | _do_waitclock_ret
10f10     2D 00 64 FD | 	ret
10f14                 | 
10f14                 | ' 
10f14                 | ' sub do_dir
10f14                 | _do_dir
10f14     03 4A 05 F6 | 	mov	COUNT_, #3
10f18     A8 00 A0 FD | 	call	#pushregs_
10f1c     27 01 00 FF 
10f20     AA 13 06 F6 | 	mov	arg01, ##@LR__4336
10f24     AC 52 B0 FD | 	call	#__system___chdir
10f28                 | ' chdir("/sd/bas")       ' set working directory
10f28                 | ' print "Working directory: "; currentdir$ 
10f28     00 12 06 F6 | 	mov	arg01, #0
10f2c     C8 A0 B0 FD | 	call	#__system___getiolock_0372
10f30     FD 12 02 F6 | 	mov	arg01, result1
10f34     10 4C B0 FD | 	call	#__system___lockmem
10f38     27 01 00 FF 
10f3c     B2 15 06 F6 | 	mov	arg02, ##@LR__4337
10f40     00 12 06 F6 | 	mov	arg01, #0
10f44     00 16 06 F6 | 	mov	arg03, #0
10f48     F0 58 B0 FD | 	call	#__system___basic_print_string
10f4c     49 00 00 FF 
10f50     58 E4 05 F1 | 	add	objptr, ##37464
10f54     F2 14 02 FB | 	rdlong	arg02, objptr
10f58     49 00 00 FF 
10f5c     58 E4 85 F1 | 	sub	objptr, ##37464
10f60     00 12 06 F6 | 	mov	arg01, #0
10f64     00 16 06 F6 | 	mov	arg03, #0
10f68     D0 58 B0 FD | 	call	#__system___basic_print_string
10f6c     00 12 06 F6 | 	mov	arg01, #0
10f70     0A 14 06 F6 | 	mov	arg02, #10
10f74     00 16 06 F6 | 	mov	arg03, #0
10f78     68 58 B0 FD | 	call	#__system___basic_print_char
10f7c     00 12 06 F6 | 	mov	arg01, #0
10f80     74 A0 B0 FD | 	call	#__system___getiolock_0372
10f84     FD 00 68 FC | 	wrlong	#0, result1
10f88     27 01 00 FF 
10f8c     C6 13 06 F6 | 	mov	arg01, ##@LR__4338
10f90     10 14 06 F6 | 	mov	arg02, #16
10f94     B0 A0 B0 FD | 	call	#__system___basic_dir
10f98     FD 1E 02 F6 | 	mov	local01, result1
10f9c                 | ' 
10f9c                 | ' filename=dir$("*", fbDirectory)
10f9c                 | ' while filename <> "" and filename <> nil
10f9c                 | LR__1420
10f9c     00 20 06 F6 | 	mov	local02, #0
10fa0     27 01 00 FF 
10fa4     C8 15 06 F6 | 	mov	arg02, ##@LR__4339
10fa8     0F 13 02 F6 | 	mov	arg01, local01
10fac     C0 4B B0 FD | 	call	#__system___string_cmp
10fb0     00 FA 0D F2 | 	cmp	result1, #0 wz
10fb4     00 20 26 56 |  if_ne	not	local02, #0
10fb8     00 22 06 F6 | 	mov	local03, #0
10fbc     0F 13 02 F6 | 	mov	arg01, local01
10fc0     00 14 06 F6 | 	mov	arg02, #0
10fc4     A8 4B B0 FD | 	call	#__system___string_cmp
10fc8     00 FA 0D F2 | 	cmp	result1, #0 wz
10fcc     00 22 26 56 |  if_ne	not	local03, #0
10fd0     11 21 CA F7 | 	test	local02, local03 wz
10fd4     64 00 90 AD |  if_e	jmp	#LR__1421
10fd8                 | '   print "[dir] ";filename
10fd8     00 12 06 F6 | 	mov	arg01, #0
10fdc     18 A0 B0 FD | 	call	#__system___getiolock_0372
10fe0     FD 12 02 F6 | 	mov	arg01, result1
10fe4     60 4B B0 FD | 	call	#__system___lockmem
10fe8     27 01 00 FF 
10fec     C9 15 06 F6 | 	mov	arg02, ##@LR__4340
10ff0     00 12 06 F6 | 	mov	arg01, #0
10ff4     00 16 06 F6 | 	mov	arg03, #0
10ff8     40 58 B0 FD | 	call	#__system___basic_print_string
10ffc     00 12 06 F6 | 	mov	arg01, #0
11000     0F 15 02 F6 | 	mov	arg02, local01
11004     00 16 06 F6 | 	mov	arg03, #0
11008     30 58 B0 FD | 	call	#__system___basic_print_string
1100c     00 12 06 F6 | 	mov	arg01, #0
11010     0A 14 06 F6 | 	mov	arg02, #10
11014     00 16 06 F6 | 	mov	arg03, #0
11018     C8 57 B0 FD | 	call	#__system___basic_print_char
1101c     00 12 06 F6 | 	mov	arg01, #0
11020     D4 9F B0 FD | 	call	#__system___getiolock_0372
11024     FD 00 68 FC | 	wrlong	#0, result1
11028     00 12 06 F6 | 	mov	arg01, #0
1102c     00 14 06 F6 | 	mov	arg02, #0
11030     14 A0 B0 FD | 	call	#__system___basic_dir
11034     FD 1E 02 F6 | 	mov	local01, result1
11038     60 FF 9F FD | 	jmp	#LR__1420
1103c                 | LR__1421
1103c     27 01 00 FF 
11040     D0 13 06 F6 | 	mov	arg01, ##@LR__4341
11044     21 14 06 F6 | 	mov	arg02, #33
11048     FC 9F B0 FD | 	call	#__system___basic_dir
1104c     FD 1E 02 F6 | 	mov	local01, result1
11050                 | ' 
11050                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
11050                 | ' do while filename <> "" and filename <> nil
11050                 | LR__1422
11050     00 20 06 F6 | 	mov	local02, #0
11054     27 01 00 FF 
11058     D2 15 06 F6 | 	mov	arg02, ##@LR__4342
1105c     0F 13 02 F6 | 	mov	arg01, local01
11060     0C 4B B0 FD | 	call	#__system___string_cmp
11064     00 FA 0D F2 | 	cmp	result1, #0 wz
11068     00 20 26 56 |  if_ne	not	local02, #0
1106c     00 22 06 F6 | 	mov	local03, #0
11070     0F 13 02 F6 | 	mov	arg01, local01
11074     00 14 06 F6 | 	mov	arg02, #0
11078     F4 4A B0 FD | 	call	#__system___string_cmp
1107c     00 FA 0D F2 | 	cmp	result1, #0 wz
11080     00 22 26 56 |  if_ne	not	local03, #0
11084     11 21 CA F7 | 	test	local02, local03 wz
11088     4C 01 90 AD |  if_e	jmp	#LR__1426
1108c                 | '   print filename
1108c     00 12 06 F6 | 	mov	arg01, #0
11090     64 9F B0 FD | 	call	#__system___getiolock_0372
11094     FD 12 02 F6 | 	mov	arg01, result1
11098     AC 4A B0 FD | 	call	#__system___lockmem
1109c     00 12 06 F6 | 	mov	arg01, #0
110a0     0F 15 02 F6 | 	mov	arg02, local01
110a4     00 16 06 F6 | 	mov	arg03, #0
110a8     90 57 B0 FD | 	call	#__system___basic_print_string
110ac     00 12 06 F6 | 	mov	arg01, #0
110b0     0A 14 06 F6 | 	mov	arg02, #10
110b4     00 16 06 F6 | 	mov	arg03, #0
110b8     28 57 B0 FD | 	call	#__system___basic_print_char
110bc     00 12 06 F6 | 	mov	arg01, #0
110c0     34 9F B0 FD | 	call	#__system___getiolock_0372
110c4     FD 00 68 FC | 	wrlong	#0, result1
110c8     00 12 06 F6 | 	mov	arg01, #0
110cc     00 14 06 F6 | 	mov	arg02, #0
110d0     74 9F B0 FD | 	call	#__system___basic_dir
110d4     FD 1E 02 F6 | 	mov	local01, result1
110d8                 | '   filename = dir$()      ' continue scan
110d8                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
110d8                 | ' return cursor_y
110d8     3A E4 05 F1 | 	add	objptr, #58
110dc     F2 FA C1 FA | 	rdbyte	result1, objptr
110e0     3A E4 85 F1 | 	sub	objptr, #58
110e4     22 FA 0D F2 | 	cmp	result1, #34 wz
110e8     64 FF 9F 5D |  if_ne	jmp	#LR__1422
110ec                 | '     print "-----more, press any key";
110ec     00 12 06 F6 | 	mov	arg01, #0
110f0     04 9F B0 FD | 	call	#__system___getiolock_0372
110f4     FD 12 02 F6 | 	mov	arg01, result1
110f8     4C 4A B0 FD | 	call	#__system___lockmem
110fc     27 01 00 FF 
11100     D3 15 06 F6 | 	mov	arg02, ##@LR__4343
11104     00 12 06 F6 | 	mov	arg01, #0
11108     00 16 06 F6 | 	mov	arg03, #0
1110c     2C 57 B0 FD | 	call	#__system___basic_print_string
11110     00 12 06 F6 | 	mov	arg01, #0
11114     E0 9E B0 FD | 	call	#__system___getiolock_0372
11118     FD 00 68 FC | 	wrlong	#0, result1
1111c                 | '     do 
1111c                 | LR__1423
1111c     CC 42 B0 FD | 	call	#_usbnew_spin2_get_key
11120     00 FA 0D F2 | 	cmp	result1, #0 wz
11124     F4 FF 9F 5D |  if_ne	jmp	#LR__1423
11128                 | '     do
11128                 | LR__1424
11128     C0 42 B0 FD | 	call	#_usbnew_spin2_get_key
1112c     00 FA 0D F2 | 	cmp	result1, #0 wz
11130     F4 FF 9F AD |  if_e	jmp	#LR__1424
11134                 | '       if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len) 
11134     50 00 00 FF 
11138     A4 E5 05 F1 | 	add	objptr, ##41380
1113c     F2 20 02 FB | 	rdlong	local02, objptr
11140     50 00 00 FF 
11144     A4 E5 85 F1 | 	sub	objptr, ##41380
11148     01 20 0E F2 | 	cmp	local02, #1 wz
1114c     3C 00 90 5D |  if_ne	jmp	#LR__1425
11150     52 00 00 FF 
11154     48 E4 05 F1 | 	add	objptr, ##42056
11158     F2 14 02 FB | 	rdlong	arg02, objptr
1115c     04 E4 85 F1 | 	sub	objptr, #4
11160     F2 1A 02 FB | 	rdlong	arg05, objptr
11164     07 12 06 F6 | 	mov	arg01, #7
11168     56 00 00 FF 
1116c     44 16 06 F6 | 	mov	arg03, ##44100
11170     0E 18 C6 F9 | 	decod	arg04, #14
11174     01 1C 66 F6 | 	neg	arg06, #1
11178     46 00 00 FF 
1117c     84 E5 85 F1 | 	sub	objptr, ##36228
11180     90 45 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
11184     0B 00 00 FF 
11188     C0 E4 85 F1 | 	sub	objptr, ##5824
1118c                 | LR__1425
1118c     00 12 06 F6 | 	mov	arg01, #0
11190     23 14 06 F6 | 	mov	arg02, #35
11194     28 36 B0 FD | 	call	#_hg010b_spin2_setcursorpos
11198                 | '     position 0,35: print "                             ";: position 4,35  
11198     00 12 06 F6 | 	mov	arg01, #0
1119c     58 9E B0 FD | 	call	#__system___getiolock_0372
111a0     FD 12 02 F6 | 	mov	arg01, result1
111a4     A0 49 B0 FD | 	call	#__system___lockmem
111a8     27 01 00 FF 
111ac     EC 15 06 F6 | 	mov	arg02, ##@LR__4344
111b0     00 12 06 F6 | 	mov	arg01, #0
111b4     00 16 06 F6 | 	mov	arg03, #0
111b8     80 56 B0 FD | 	call	#__system___basic_print_string
111bc     00 12 06 F6 | 	mov	arg01, #0
111c0     34 9E B0 FD | 	call	#__system___getiolock_0372
111c4     FD 00 68 FC | 	wrlong	#0, result1
111c8     04 12 06 F6 | 	mov	arg01, #4
111cc     23 14 06 F6 | 	mov	arg02, #35
111d0     EC 35 B0 FD | 	call	#_hg010b_spin2_setcursorpos
111d4     78 FE 9F FD | 	jmp	#LR__1422
111d8                 | LR__1426
111d8     A7 F0 03 F6 | 	mov	ptra, fp
111dc     B2 00 A0 FD | 	call	#popregs_
111e0                 | _do_dir_ret
111e0     2D 00 64 FD | 	ret
111e4                 | 
111e4                 | ' 
111e4                 | ' sub do_if
111e4                 | _do_if
111e4     05 4A 05 F6 | 	mov	COUNT_, #5
111e8     A8 00 A0 FD | 	call	#pushregs_
111ec     20 79 BF FD | 	call	#_pop
111f0     FD 1E 0A F6 | 	mov	local01, result1 wz
111f4     FE 20 02 F6 | 	mov	local02, result2
111f8     FF 22 02 F6 | 	mov	local03, result3
111fc                 | ' t1=pop()
111fc                 | ' ' if uresult=0, jump over else
111fc                 | ' if t1.result.uresult = 0 then 
111fc     BC 00 90 5D |  if_ne	jmp	#LR__1432
11200                 | '   for i=lineptr_e to lineptr-1
11200     41 00 00 FF 
11204     44 E4 05 F1 | 	add	objptr, ##33348
11208     F2 24 02 FB | 	rdlong	local04, objptr
1120c     04 E4 85 F1 | 	sub	objptr, #4
11210     F2 26 02 FB | 	rdlong	local05, objptr
11214     41 00 00 FF 
11218     40 E4 85 F1 | 	sub	objptr, ##33344
1121c                 | LR__1430
1121c     13 25 52 F2 | 	cmps	local04, local05 wc
11220     78 00 90 3D |  if_ae	jmp	#LR__1431
11224     12 FF 01 F6 | 	mov	result3, local04
11228     01 FE 65 F0 | 	shl	result3, #1
1122c     12 FF 01 F1 | 	add	result3, local04
11230     02 FE 65 F0 | 	shl	result3, #2
11234     3E 00 00 FF 
11238     40 E4 05 F1 | 	add	objptr, ##31808
1123c     F2 FE 01 F1 | 	add	result3, objptr
11240     FF 1E 02 FB | 	rdlong	local01, result3
11244     04 FE 05 F1 | 	add	result3, #4
11248     FF FC 01 FB | 	rdlong	result2, result3
1124c     12 FF 01 F6 | 	mov	result3, local04
11250     01 FE 65 F0 | 	shl	result3, #1
11254     12 FF 01 F1 | 	add	result3, local04
11258     02 FE 65 F0 | 	shl	result3, #2
1125c     F2 FE 01 F1 | 	add	result3, objptr
11260     08 FE 05 F1 | 	add	result3, #8
11264     FF FE 01 FB | 	rdlong	result3, result3
11268     FE 20 02 F6 | 	mov	local02, result2
1126c     FF 22 02 F6 | 	mov	local03, result3
11270                 | '     t1=compiledline(i)
11270                 | '     if t1.result_type=token_else then lineptr_e=i : return
11270     5A 22 0E F2 | 	cmp	local03, #90 wz
11274     3E 00 00 FF 
11278     40 E4 85 F1 | 	sub	objptr, ##31808
1127c     41 00 00 AF 
11280     44 E4 05 A1 |  if_e	add	objptr, ##33348
11284     F2 24 62 AC |  if_e	wrlong	local04, objptr
11288     41 00 00 AF 
1128c     44 E4 85 A1 |  if_e	sub	objptr, ##33348
11290     28 00 90 AD |  if_e	jmp	#LR__1433
11294     01 24 06 F1 | 	add	local04, #1
11298     80 FF 9F FD | 	jmp	#LR__1430
1129c                 | LR__1431
1129c     41 00 00 FF 
112a0     40 E4 05 F1 | 	add	objptr, ##33344
112a4     F2 26 02 FB | 	rdlong	local05, objptr
112a8     01 26 86 F1 | 	sub	local05, #1
112ac     04 E4 05 F1 | 	add	objptr, #4
112b0     F2 26 62 FC | 	wrlong	local05, objptr
112b4     41 00 00 FF 
112b8     44 E4 85 F1 | 	sub	objptr, ##33348
112bc                 | LR__1432
112bc                 | LR__1433
112bc     A7 F0 03 F6 | 	mov	ptra, fp
112c0     B2 00 A0 FD | 	call	#popregs_
112c4                 | _do_if_ret
112c4     2D 00 64 FD | 	ret
112c8                 | 
112c8                 | ' 
112c8                 | ' sub do_else
112c8                 | _do_else
112c8     41 00 00 FF 
112cc     40 E4 05 F1 | 	add	objptr, ##33344
112d0     F2 00 02 FB | 	rdlong	_var01, objptr
112d4     01 00 86 F1 | 	sub	_var01, #1
112d8     04 E4 05 F1 | 	add	objptr, #4
112dc     F2 00 62 FC | 	wrlong	_var01, objptr
112e0     41 00 00 FF 
112e4     44 E4 85 F1 | 	sub	objptr, ##33348
112e8                 | _do_else_ret
112e8     2D 00 64 FD | 	ret
112ec                 | 
112ec                 | ' 
112ec                 | ' 
112ec                 | ' 
112ec                 | ' sub do_nothing
112ec                 | _do_nothing
112ec                 | _do_nothing_ret
112ec     2D 00 64 FD | 	ret
112f0                 | 
112f0                 | ' 
112f0                 | ' sub do_brun
112f0                 | _do_brun
112f0     08 4A 05 F6 | 	mov	COUNT_, #8
112f4     A8 00 A0 FD | 	call	#pushregs_
112f8     14 78 BF FD | 	call	#_pop
112fc     FE 1A 02 F6 | 	mov	arg05, result2
11300     FF 18 02 F6 | 	mov	arg04, result3
11304     FD 1E 02 F6 | 	mov	local01, result1
11308     0D 21 02 F6 | 	mov	local02, arg05
1130c     0C 23 02 F6 | 	mov	local03, arg04
11310                 | ' 
11310                 | ' t1=pop() 
11310                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
11310     2B 22 0E F2 | 	cmp	local03, #43 wz
11314     10 00 90 5D |  if_ne	jmp	#LR__1440
11318     0F 13 02 F6 | 	mov	arg01, local01
1131c     DC 94 BF FD | 	call	#_convertstring
11320     FD 1E 02 F6 | 	mov	local01, result1
11324     1F 22 06 F6 | 	mov	local03, #31
11328                 | LR__1440
11328                 | ' if t1.result_type=result_string then
11328     1F 22 0E F2 | 	cmp	local03, #31 wz
1132c     EC 01 90 5D |  if_ne	jmp	#LR__1444
11330     0F 25 02 F6 | 	mov	local04, local01
11334                 | '   filename=t1.result.sresult
11334                 | '   if left$(filename,1)="/" then 
11334     12 13 02 F6 | 	mov	arg01, local04
11338     01 14 06 F6 | 	mov	arg02, #1
1133c     18 68 B0 FD | 	call	#__system__Left_S
11340     FD 12 02 F6 | 	mov	arg01, result1
11344     28 01 00 FF 
11348     0A 14 06 F6 | 	mov	arg02, ##@LR__4345
1134c     20 48 B0 FD | 	call	#__system___string_cmp
11350     00 FA 0D F2 | 	cmp	result1, #0 wz
11354     12 27 02 A6 |  if_e	mov	local05, local04
11358     14 00 90 AD |  if_e	jmp	#LR__1441
1135c     28 01 00 FF 
11360     0C 12 06 F6 | 	mov	arg01, ##@LR__4346
11364     12 15 02 F6 | 	mov	arg02, local04
11368     38 48 B0 FD | 	call	#__system___string_concat
1136c     FD 26 02 F6 | 	mov	local05, result1
11370                 | LR__1441
11370                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
11370                 | '   open fullfilename for input as #9
11370     09 12 06 F6 | 	mov	arg01, #9
11374     13 15 02 F6 | 	mov	arg02, local05
11378     00 16 06 F6 | 	mov	arg03, #0
1137c     CC 53 B0 FD | 	call	#__system___basic_open_string
11380     20 E8 05 F1 | 	add	ptr___system__dat__, #32
11384     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
11388     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1138c     FD 28 0A F6 | 	mov	local06, result1 wz
11390                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
11390     8C 00 90 AD |  if_e	jmp	#LR__1442
11394     00 12 06 F6 | 	mov	arg01, #0
11398     5C 9C B0 FD | 	call	#__system___getiolock_0372
1139c     FD 12 02 F6 | 	mov	arg01, result1
113a0     A4 47 B0 FD | 	call	#__system___lockmem
113a4     28 01 00 FF 
113a8     15 14 06 F6 | 	mov	arg02, ##@LR__4347
113ac     00 12 06 F6 | 	mov	arg01, #0
113b0     00 16 06 F6 | 	mov	arg03, #0
113b4     84 54 B0 FD | 	call	#__system___basic_print_string
113b8     00 12 06 F6 | 	mov	arg01, #0
113bc     14 15 02 F6 | 	mov	arg02, local06
113c0     00 16 06 F6 | 	mov	arg03, #0
113c4     0A 18 06 F6 | 	mov	arg04, #10
113c8     B4 54 B0 FD | 	call	#__system___basic_print_integer
113cc     28 01 00 FF 
113d0     23 14 06 F6 | 	mov	arg02, ##@LR__4348
113d4     00 12 06 F6 | 	mov	arg01, #0
113d8     00 16 06 F6 | 	mov	arg03, #0
113dc     5C 54 B0 FD | 	call	#__system___basic_print_string
113e0     14 13 02 F6 | 	mov	arg01, local06
113e4     5C 6C B0 FD | 	call	#__system___strerror
113e8     FD 14 02 F6 | 	mov	arg02, result1
113ec     00 12 06 F6 | 	mov	arg01, #0
113f0     00 16 06 F6 | 	mov	arg03, #0
113f4     44 54 B0 FD | 	call	#__system___basic_print_string
113f8     00 12 06 F6 | 	mov	arg01, #0
113fc     0A 14 06 F6 | 	mov	arg02, #10
11400     00 16 06 F6 | 	mov	arg03, #0
11404     DC 53 B0 FD | 	call	#__system___basic_print_char
11408     00 12 06 F6 | 	mov	arg01, #0
1140c     E8 9B B0 FD | 	call	#__system___getiolock_0372
11410     FD 00 68 FC | 	wrlong	#0, result1
11414     09 12 06 F6 | 	mov	arg01, #9
11418     0C 92 B0 FD | 	call	#__system__close
1141c     FC 00 90 FD | 	jmp	#LR__1445
11420                 | LR__1442
11420     01 2A 06 F6 | 	mov	local07, #1
11424     00 2C 06 F6 | 	mov	local08, #0
11428                 | '   do
11428                 | LR__1443
11428                 | '     get #9,pos,block(0),1024,r : pos+=r	
11428     4E 00 00 FF 
1142c     70 E5 05 F1 | 	add	objptr, ##40304
11430     F2 16 02 F6 | 	mov	arg03, objptr
11434     4E 00 00 FF 
11438     70 E5 85 F1 | 	sub	objptr, ##40304
1143c     09 12 06 F6 | 	mov	arg01, #9
11440     15 15 02 F6 | 	mov	arg02, local07
11444     0A 18 C6 F9 | 	decod	arg04, #10
11448     01 1A 06 F6 | 	mov	arg05, #1
1144c     FC 54 B0 FD | 	call	#__system___basic_get
11450     FD 28 02 F6 | 	mov	local06, result1
11454     FD 2A 02 F1 | 	add	local07, result1
11458     4E 00 00 FF 
1145c     70 E5 05 F1 | 	add	objptr, ##40304
11460     F2 12 02 F6 | 	mov	arg01, objptr
11464     16 15 02 F6 | 	mov	arg02, local08
11468     0A 16 C6 F9 | 	decod	arg03, #10
1146c     43 00 00 FF 
11470     B0 E4 85 F1 | 	sub	objptr, ##34480
11474     80 3C B0 FD | 	call	#_psram_spin2_write
11478     0B 00 00 FF 
1147c     C0 E4 85 F1 | 	sub	objptr, ##5824
11480     14 2D 02 F1 | 	add	local08, local06
11484     02 00 00 FF 
11488     00 28 0E F2 | 	cmp	local06, ##1024 wz
1148c     E0 03 00 AF 
11490     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
11494     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1443
11498     2D 00 00 FF 
1149c     C0 E5 05 F1 | 	add	objptr, ##23488
114a0     F2 12 02 FB | 	rdlong	arg01, objptr
114a4     03 12 62 FD | 	cogstop	arg01
114a8     04 E4 05 F1 | 	add	objptr, #4
114ac     F2 12 02 FB | 	rdlong	arg01, objptr
114b0     03 12 62 FD | 	cogstop	arg01
114b4     04 E4 05 F1 | 	add	objptr, #4
114b8     F2 12 02 FB | 	rdlong	arg01, objptr
114bc     03 12 62 FD | 	cogstop	arg01
114c0     22 00 00 FF 
114c4     E0 E5 05 F1 | 	add	objptr, ##17888
114c8     F2 12 02 FB | 	rdlong	arg01, objptr
114cc     03 12 62 FD | 	cogstop	arg01
114d0     10 00 00 FF 
114d4     9C EA 05 F1 | 	add	ptr__dat__, ##8348
114d8     F5 14 02 F6 | 	mov	arg02, ptr__dat__
114dc     10 00 00 FF 
114e0     9C EA 85 F1 | 	sub	ptr__dat__, ##8348
114e4     22 00 00 FF 
114e8     D8 E5 85 F1 | 	sub	objptr, ##17880
114ec     1E 2C 06 F6 | 	mov	local08, #30
114f0     28 E4 61 FD | 	setq	objptr
114f4     0A 2D F2 FC | 	coginit	local08, arg02 wc
114f8     01 2C 66 C6 |  if_b	neg	local08, #1
114fc     24 00 00 FF 
11500     E8 E4 05 F1 | 	add	objptr, ##18664
11504     F2 2C 62 FC | 	wrlong	local08, objptr
11508     52 00 00 FF 
1150c     B8 E4 85 F1 | 	sub	objptr, ##42168
11510     00 12 06 F6 | 	mov	arg01, #0
11514     01 12 62 FD | 	cogid	arg01
11518     03 12 62 FD | 	cogstop	arg01
1151c                 | LR__1444
1151c                 | LR__1445
1151c     A7 F0 03 F6 | 	mov	ptra, fp
11520     B2 00 A0 FD | 	call	#popregs_
11524                 | _do_brun_ret
11524     2D 00 64 FD | 	ret
11528                 | 
11528                 | ' 
11528                 | ' 
11528                 | ' sub do_mouse
11528                 | _do_mouse
11528     E4 75 BF FD | 	call	#_pop
1152c     00 FA 4D F2 | 	cmps	result1, #0 wz
11530                 | ' 
11530                 | ' t1=pop()
11530                 | ' 
11530                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
11530     14 00 90 5D |  if_ne	jmp	#LR__1450
11534     10 12 06 F6 | 	mov	arg01, #16
11538     00 14 06 F6 | 	mov	arg02, #0
1153c     00 16 06 F6 | 	mov	arg03, #0
11540     6C 26 B0 FD | 	call	#_hg010b_spin2_setspritesize
11544     10 00 90 FD | 	jmp	#LR__1451
11548                 | LR__1450
11548     10 12 06 F6 | 	mov	arg01, #16
1154c     20 14 06 F6 | 	mov	arg02, #32
11550     20 16 06 F6 | 	mov	arg03, #32
11554     58 26 B0 FD | 	call	#_hg010b_spin2_setspritesize
11558                 | LR__1451
11558                 | _do_mouse_ret
11558     2D 00 64 FD | 	ret
1155c                 | 
1155c                 | ' 
1155c                 | ' sub do_cursor
1155c                 | _do_cursor
1155c     B0 75 BF FD | 	call	#_pop
11560     00 FA 4D F2 | 	cmps	result1, #0 wz
11564                 | ' 
11564                 | ' t1=pop()
11564                 | ' 
11564                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
11564     14 00 90 5D |  if_ne	jmp	#LR__1460
11568     11 12 06 F6 | 	mov	arg01, #17
1156c     00 14 06 F6 | 	mov	arg02, #0
11570     00 16 06 F6 | 	mov	arg03, #0
11574     38 26 B0 FD | 	call	#_hg010b_spin2_setspritesize
11578     10 00 90 FD | 	jmp	#LR__1461
1157c                 | LR__1460
1157c     11 12 06 F6 | 	mov	arg01, #17
11580     08 14 06 F6 | 	mov	arg02, #8
11584     10 16 06 F6 | 	mov	arg03, #16
11588     24 26 B0 FD | 	call	#_hg010b_spin2_setspritesize
1158c                 | LR__1461
1158c                 | _do_cursor_ret
1158c     2D 00 64 FD | 	ret
11590                 | 
11590                 | ' 
11590                 | ' 
11590                 | ' sub do_click
11590                 | _do_click
11590     7C 75 BF FD | 	call	#_pop
11594     00 FA 4D F2 | 	cmps	result1, #0 wz
11598                 | ' 
11598                 | ' t1=pop()
11598                 | ' 
11598                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
11598     50 00 00 AF 
1159c     A4 E5 05 A1 |  if_e	add	objptr, ##41380
115a0     F2 00 68 AC |  if_e	wrlong	#0, objptr
115a4     50 00 00 FF 
115a8     A4 E5 C5 F3 | 	sumz	objptr, ##41380
115ac     F2 02 68 5C |  if_ne	wrlong	#1, objptr
115b0     50 00 00 5F 
115b4     A4 E5 85 51 |  if_ne	sub	objptr, ##41380
115b8                 | _do_click_ret
115b8     2D 00 64 FD | 	ret
115bc                 | 
115bc                 | ' 
115bc                 | ' 
115bc                 | ' sub do_beep
115bc                 | _do_beep
115bc     02 4A 05 F6 | 	mov	COUNT_, #2
115c0     A8 00 A0 FD | 	call	#pushregs_
115c4     20 F0 07 F1 | 	add	ptra, #32
115c8     44 75 BF FD | 	call	#_pop
115cc     FD 1E 02 F6 | 	mov	local01, result1
115d0     FE 1C 02 F6 | 	mov	arg06, result2
115d4     FF 20 02 F6 | 	mov	local02, result3
115d8     0C 4E 05 F1 | 	add	fp, #12
115dc     A7 1E 62 FC | 	wrlong	local01, fp
115e0     04 4E 05 F1 | 	add	fp, #4
115e4     A7 1C 62 FC | 	wrlong	arg06, fp
115e8     04 4E 05 F1 | 	add	fp, #4
115ec     A7 20 62 FC | 	wrlong	local02, fp
115f0     14 4E 85 F1 | 	sub	fp, #20
115f4     18 75 BF FD | 	call	#_pop
115f8     A7 FA 61 FC | 	wrlong	result1, fp
115fc     04 4E 05 F1 | 	add	fp, #4
11600     A7 FC 61 FC | 	wrlong	result2, fp
11604     04 4E 05 F1 | 	add	fp, #4
11608     A7 FE 61 FC | 	wrlong	result3, fp
1160c                 | ' 
1160c                 | ' 
1160c                 | ' 
1160c                 | ' t2=pop()
1160c                 | ' t1=pop()
1160c                 | ' 
1160c                 | ' 
1160c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
1160c     08 4E 85 F1 | 	sub	fp, #8
11610     1C FE 0D F2 | 	cmp	result3, #28 wz
11614     08 4E 05 51 |  if_ne	add	fp, #8
11618     A7 20 02 5B |  if_ne	rdlong	local02, fp
1161c     08 4E 85 51 |  if_ne	sub	fp, #8
11620     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
11624     A7 1E 02 AB |  if_e	rdlong	local01, fp
11628     18 4E 05 A1 |  if_e	add	fp, #24
1162c     A7 1E 62 AC |  if_e	wrlong	local01, fp
11630     18 4E 85 A1 |  if_e	sub	fp, #24
11634     14 00 90 AD |  if_e	jmp	#LR__1470
11638     A7 12 02 F6 | 	mov	arg01, fp
1163c     58 CD BF FD | 	call	#_converttoint
11640     18 4E 05 F1 | 	add	fp, #24
11644     A7 FA 61 FC | 	wrlong	result1, fp
11648     18 4E 85 F1 | 	sub	fp, #24
1164c                 | LR__1470
1164c     1C 4E 05 F1 | 	add	fp, #28
11650     A7 FE 48 FC | 	wrbyte	#127, fp
11654     01 4E 05 F1 | 	add	fp, #1
11658     A7 00 49 FC | 	wrbyte	#128, fp
1165c     01 4E 85 F1 | 	sub	fp, #1
11660     A7 14 02 F6 | 	mov	arg02, fp
11664     04 4E 85 F1 | 	sub	fp, #4
11668     A7 16 02 FB | 	rdlong	arg03, fp
1166c     18 4E 85 F1 | 	sub	fp, #24
11670     01 16 66 F0 | 	shl	arg03, #1
11674     07 12 06 F6 | 	mov	arg01, #7
11678     0E 18 C6 F9 | 	decod	arg04, #14
1167c     02 1A 06 F6 | 	mov	arg05, #2
11680     00 1C 06 F6 | 	mov	arg06, #0
11684     0B 00 00 FF 
11688     C0 E4 05 F1 | 	add	objptr, ##5824
1168c     20 41 B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
11690     0B 00 00 FF 
11694     C0 E4 85 F1 | 	sub	objptr, ##5824
11698     0C 4E 05 F1 | 	add	fp, #12
1169c     A7 12 02 F6 | 	mov	arg01, fp
116a0     0C 4E 85 F1 | 	sub	fp, #12
116a4     00 75 BF FD | 	call	#_push
116a8     FC F6 BF FD | 	call	#_do_waitms
116ac     07 12 06 F6 | 	mov	arg01, #7
116b0     0B 00 00 FF 
116b4     C0 E4 05 F1 | 	add	objptr, ##5824
116b8     A8 41 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
116bc     0B 00 00 FF 
116c0     C0 E4 85 F1 | 	sub	objptr, ##5824
116c4     A7 F0 03 F6 | 	mov	ptra, fp
116c8     B2 00 A0 FD | 	call	#popregs_
116cc                 | _do_beep_ret
116cc     2D 00 64 FD | 	ret
116d0                 | 
116d0                 | ' 
116d0                 | ' sub do_no_command
116d0                 | _do_no_command
116d0     17 12 06 F6 | 	mov	arg01, #23
116d4     50 0F B0 FD | 	call	#_printerror
116d8                 | _do_no_command_ret
116d8     2D 00 64 FD | 	ret
116dc                 | 
116dc                 | ' 
116dc                 | ' sub do_negative
116dc                 | _do_negative
116dc     02 4A 05 F6 | 	mov	COUNT_, #2
116e0     A8 00 A0 FD | 	call	#pushregs_
116e4     0C F0 07 F1 | 	add	ptra, #12
116e8     24 74 BF FD | 	call	#_pop
116ec     FF 1E 02 F6 | 	mov	local01, result3
116f0     A7 FA 61 FC | 	wrlong	result1, fp
116f4     04 4E 05 F1 | 	add	fp, #4
116f8     A7 FC 61 FC | 	wrlong	result2, fp
116fc     04 4E 05 F1 | 	add	fp, #4
11700     A7 1E 62 FC | 	wrlong	local01, fp
11704                 | ' t1=pop()
11704                 | ' if t1.result_type=result_int then 
11704     08 4E 85 F1 | 	sub	fp, #8
11708     1C 1E 0E F2 | 	cmp	local01, #28 wz
1170c     A7 20 02 AB |  if_e	rdlong	local02, fp
11710     10 1F 62 A6 |  if_e	neg	local01, local02
11714     A7 1E 62 AC |  if_e	wrlong	local01, fp
11718     5C 00 90 AD |  if_e	jmp	#LR__1482
1171c     08 4E 05 F1 | 	add	fp, #8
11720     A7 1E 02 FB | 	rdlong	local01, fp
11724     08 4E 85 F1 | 	sub	fp, #8
11728     1D 1E 0E F2 | 	cmp	local01, #29 wz
1172c     1C 00 90 5D |  if_ne	jmp	#LR__1480
11730     A7 20 02 FB | 	rdlong	local02, fp
11734     10 1F 62 F6 | 	neg	local01, local02
11738     A7 1E 62 FC | 	wrlong	local01, fp
1173c     08 4E 05 F1 | 	add	fp, #8
11740     A7 38 68 FC | 	wrlong	#28, fp
11744     08 4E 85 F1 | 	sub	fp, #8
11748     2C 00 90 FD | 	jmp	#LR__1481
1174c                 | LR__1480
1174c     08 4E 05 F1 | 	add	fp, #8
11750     A7 1E 02 FB | 	rdlong	local01, fp
11754     08 4E 85 F1 | 	sub	fp, #8
11758     1E 1E 0E F2 | 	cmp	local01, #30 wz
1175c     A7 FA 01 AB |  if_e	rdlong	result1, fp
11760     1F FA E5 A4 |  if_e	bitnot	result1, #31
11764     A7 FA 61 AC |  if_e	wrlong	result1, fp
11768     08 4E 05 51 |  if_ne	add	fp, #8
1176c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
11770     08 4E 85 51 |  if_ne	sub	fp, #8
11774     A7 50 68 5C |  if_ne	wrlong	#40, fp
11778                 | LR__1481
11778                 | LR__1482
11778     A7 12 02 F6 | 	mov	arg01, fp
1177c     28 74 BF FD | 	call	#_push
11780     A7 F0 03 F6 | 	mov	ptra, fp
11784     B2 00 A0 FD | 	call	#popregs_
11788                 | _do_negative_ret
11788     2D 00 64 FD | 	ret
1178c                 | 
1178c                 | ' 
1178c                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
1178c                 | ' 
1178c                 | ' ''----------------------------------------------------------------------------------------------------
1178c                 | ' ''------------------ Initialization procedures -------------------------------------------------------
1178c                 | ' ''----------------------------------------------------------------------------------------------------
1178c                 | ' 
1178c                 | ' ''--------------------------- Command function pointers
1178c                 | ' 
1178c                 | ' sub init_commands
1178c                 | _init_commands
1178c                 | ' 
1178c                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
1178c     00 00 06 F6 | 	mov	_var01, #0
11790     97 16 48 FB | 	callpa	#(@LR__1491-@LR__1490)>>2,fcache_load_ptr_
11794                 | LR__1490
11794     00 FB 01 F6 | 	mov	result1, _var01
11798     02 FA 65 F0 | 	shl	result1, #2
1179c     3A 00 00 FF 
117a0     24 E4 05 F1 | 	add	objptr, ##29732
117a4     F2 FA 01 F1 | 	add	result1, objptr
117a8     3A 00 00 FF 
117ac     24 E4 85 F1 | 	sub	objptr, ##29732
117b0     FD E4 61 FC | 	wrlong	objptr, result1
117b4     01 00 06 F1 | 	add	_var01, #1
117b8     00 01 56 F2 | 	cmps	_var01, #256 wc
117bc     D4 FF 9F CD |  if_b	jmp	#LR__1490
117c0                 | LR__1491
117c0     F2 FA 01 F6 | 	mov	result1, objptr
117c4     14 FA 25 F4 | 	bith	result1, #20
117c8     3A 00 00 FF 
117cc     28 E4 05 F1 | 	add	objptr, ##29736
117d0     F2 FA 61 FC | 	wrlong	result1, objptr
117d4     3A 00 00 FF 
117d8     28 E4 85 F1 | 	sub	objptr, ##29736
117dc     F2 FA 01 F6 | 	mov	result1, objptr
117e0     15 FA 25 F4 | 	bith	result1, #21
117e4     3A 00 00 FF 
117e8     2C E4 05 F1 | 	add	objptr, ##29740
117ec     F2 FA 61 FC | 	wrlong	result1, objptr
117f0     3A 00 00 FF 
117f4     2C E4 85 F1 | 	sub	objptr, ##29740
117f8     F2 FA 01 F6 | 	mov	result1, objptr
117fc     34 FA 25 F4 | 	bith	result1, #52
11800     3A 00 00 FF 
11804     30 E4 05 F1 | 	add	objptr, ##29744
11808     F2 FA 61 FC | 	wrlong	result1, objptr
1180c     3A 00 00 FF 
11810     30 E4 85 F1 | 	sub	objptr, ##29744
11814     F2 FA 01 F6 | 	mov	result1, objptr
11818     16 FA 25 F4 | 	bith	result1, #22
1181c     3A 00 00 FF 
11820     38 E4 05 F1 | 	add	objptr, ##29752
11824     F2 FA 61 FC | 	wrlong	result1, objptr
11828     3A 00 00 FF 
1182c     38 E4 85 F1 | 	sub	objptr, ##29752
11830     F2 FA 01 F6 | 	mov	result1, objptr
11834     00 28 00 FF 
11838     00 FA 45 F5 | 	or	result1, ##5242880
1183c     3A 00 00 FF 
11840     3C E4 05 F1 | 	add	objptr, ##29756
11844     F2 FA 61 FC | 	wrlong	result1, objptr
11848     3A 00 00 FF 
1184c     3C E4 85 F1 | 	sub	objptr, ##29756
11850     F2 FA 01 F6 | 	mov	result1, objptr
11854     35 FA 25 F4 | 	bith	result1, #53
11858     3A 00 00 FF 
1185c     40 E4 05 F1 | 	add	objptr, ##29760
11860     F2 FA 61 FC | 	wrlong	result1, objptr
11864     3A 00 00 FF 
11868     40 E4 85 F1 | 	sub	objptr, ##29760
1186c     F2 FA 01 F6 | 	mov	result1, objptr
11870     54 FA 25 F4 | 	bith	result1, #84
11874     3A 00 00 FF 
11878     44 E4 05 F1 | 	add	objptr, ##29764
1187c     F2 FA 61 FC | 	wrlong	result1, objptr
11880     3A 00 00 FF 
11884     44 E4 85 F1 | 	sub	objptr, ##29764
11888     F2 FA 01 F6 | 	mov	result1, objptr
1188c     17 FA 25 F4 | 	bith	result1, #23
11890     3A 00 00 FF 
11894     48 E4 05 F1 | 	add	objptr, ##29768
11898     F2 FA 61 FC | 	wrlong	result1, objptr
1189c     3A 00 00 FF 
118a0     48 E4 85 F1 | 	sub	objptr, ##29768
118a4     F2 FA 01 F6 | 	mov	result1, objptr
118a8     00 48 00 FF 
118ac     00 FA 45 F5 | 	or	result1, ##9437184
118b0     3A 00 00 FF 
118b4     4C E4 05 F1 | 	add	objptr, ##29772
118b8     F2 FA 61 FC | 	wrlong	result1, objptr
118bc     3A 00 00 FF 
118c0     4C E4 85 F1 | 	sub	objptr, ##29772
118c4     F2 FA 01 F6 | 	mov	result1, objptr
118c8     00 50 00 FF 
118cc     00 FA 45 F5 | 	or	result1, ##10485760
118d0     3A 00 00 FF 
118d4     50 E4 05 F1 | 	add	objptr, ##29776
118d8     F2 FA 61 FC | 	wrlong	result1, objptr
118dc     3A 00 00 FF 
118e0     50 E4 85 F1 | 	sub	objptr, ##29776
118e4     F2 FA 01 F6 | 	mov	result1, objptr
118e8     00 58 00 FF 
118ec     00 FA 45 F5 | 	or	result1, ##11534336
118f0     3A 00 00 FF 
118f4     54 E4 05 F1 | 	add	objptr, ##29780
118f8     F2 FA 61 FC | 	wrlong	result1, objptr
118fc     3A 00 00 FF 
11900     54 E4 85 F1 | 	sub	objptr, ##29780
11904     F2 FA 01 F6 | 	mov	result1, objptr
11908     36 FA 25 F4 | 	bith	result1, #54
1190c     3A 00 00 FF 
11910     68 E4 05 F1 | 	add	objptr, ##29800
11914     F2 FA 61 FC | 	wrlong	result1, objptr
11918     3A 00 00 FF 
1191c     68 E4 85 F1 | 	sub	objptr, ##29800
11920     F2 FA 01 F6 | 	mov	result1, objptr
11924     00 68 00 FF 
11928     00 FA 45 F5 | 	or	result1, ##13631488
1192c     3A 00 00 FF 
11930     98 E4 05 F1 | 	add	objptr, ##29848
11934     F2 FA 61 FC | 	wrlong	result1, objptr
11938     3A 00 00 FF 
1193c     98 E4 85 F1 | 	sub	objptr, ##29848
11940     F2 FA 01 F6 | 	mov	result1, objptr
11944     00 68 00 FF 
11948     00 FA 45 F5 | 	or	result1, ##13631488
1194c     3A 00 00 FF 
11950     94 E4 05 F1 | 	add	objptr, ##29844
11954     F2 FA 61 FC | 	wrlong	result1, objptr
11958     3A 00 00 FF 
1195c     94 E4 85 F1 | 	sub	objptr, ##29844
11960     F2 FA 01 F6 | 	mov	result1, objptr
11964     00 68 00 FF 
11968     00 FA 45 F5 | 	or	result1, ##13631488
1196c     3A 00 00 FF 
11970     9C E4 05 F1 | 	add	objptr, ##29852
11974     F2 FA 61 FC | 	wrlong	result1, objptr
11978     3A 00 00 FF 
1197c     9C E4 85 F1 | 	sub	objptr, ##29852
11980     F2 FA 01 F6 | 	mov	result1, objptr
11984     00 68 00 FF 
11988     00 FA 45 F5 | 	or	result1, ##13631488
1198c     3A 00 00 FF 
11990     A0 E4 05 F1 | 	add	objptr, ##29856
11994     F2 FA 61 FC | 	wrlong	result1, objptr
11998     3A 00 00 FF 
1199c     A0 E4 85 F1 | 	sub	objptr, ##29856
119a0     F2 FA 01 F6 | 	mov	result1, objptr
119a4     00 68 00 FF 
119a8     00 FA 45 F5 | 	or	result1, ##13631488
119ac     3A 00 00 FF 
119b0     D0 E4 05 F1 | 	add	objptr, ##29904
119b4     F2 FA 61 FC | 	wrlong	result1, objptr
119b8     3A 00 00 FF 
119bc     D0 E4 85 F1 | 	sub	objptr, ##29904
119c0     F2 FA 01 F6 | 	mov	result1, objptr
119c4     55 FA 25 F4 | 	bith	result1, #85
119c8     3A 00 00 FF 
119cc     80 E4 05 F1 | 	add	objptr, ##29824
119d0     F2 FA 61 FC | 	wrlong	result1, objptr
119d4     3A 00 00 FF 
119d8     80 E4 85 F1 | 	sub	objptr, ##29824
119dc     F2 FA 01 F6 | 	mov	result1, objptr
119e0     00 68 00 FF 
119e4     00 FA 45 F5 | 	or	result1, ##13631488
119e8     3A 00 00 FF 
119ec     A4 E4 05 F1 | 	add	objptr, ##29860
119f0     F2 FA 61 FC | 	wrlong	result1, objptr
119f4     3A 00 00 FF 
119f8     A4 E4 85 F1 | 	sub	objptr, ##29860
119fc     F2 FA 01 F6 | 	mov	result1, objptr
11a00     00 68 00 FF 
11a04     00 FA 45 F5 | 	or	result1, ##13631488
11a08     3A 00 00 FF 
11a0c     A8 E4 05 F1 | 	add	objptr, ##29864
11a10     F2 FA 61 FC | 	wrlong	result1, objptr
11a14     3A 00 00 FF 
11a18     A8 E4 85 F1 | 	sub	objptr, ##29864
11a1c     F2 FA 01 F6 | 	mov	result1, objptr
11a20     00 68 00 FF 
11a24     00 FA 45 F5 | 	or	result1, ##13631488
11a28     3A 00 00 FF 
11a2c     AC E4 05 F1 | 	add	objptr, ##29868
11a30     F2 FA 61 FC | 	wrlong	result1, objptr
11a34     3A 00 00 FF 
11a38     AC E4 85 F1 | 	sub	objptr, ##29868
11a3c     F2 FA 01 F6 | 	mov	result1, objptr
11a40     74 FA 25 F4 | 	bith	result1, #116
11a44     3A 00 00 FF 
11a48     24 E5 05 F1 | 	add	objptr, ##29988
11a4c     F2 FA 61 FC | 	wrlong	result1, objptr
11a50     3A 00 00 FF 
11a54     24 E5 85 F1 | 	sub	objptr, ##29988
11a58     F2 FA 01 F6 | 	mov	result1, objptr
11a5c     18 FA 25 F4 | 	bith	result1, #24
11a60     3A 00 00 FF 
11a64     28 E5 05 F1 | 	add	objptr, ##29992
11a68     F2 FA 61 FC | 	wrlong	result1, objptr
11a6c     3A 00 00 FF 
11a70     28 E5 85 F1 | 	sub	objptr, ##29992
11a74     F2 FA 01 F6 | 	mov	result1, objptr
11a78     00 88 00 FF 
11a7c     00 FA 45 F5 | 	or	result1, ##17825792
11a80     3A 00 00 FF 
11a84     2C E5 05 F1 | 	add	objptr, ##29996
11a88     F2 FA 61 FC | 	wrlong	result1, objptr
11a8c     3A 00 00 FF 
11a90     2C E5 85 F1 | 	sub	objptr, ##29996
11a94     F2 FA 01 F6 | 	mov	result1, objptr
11a98     00 90 00 FF 
11a9c     00 FA 45 F5 | 	or	result1, ##18874368
11aa0     3A 00 00 FF 
11aa4     30 E5 05 F1 | 	add	objptr, ##30000
11aa8     F2 FA 61 FC | 	wrlong	result1, objptr
11aac     3A 00 00 FF 
11ab0     30 E5 85 F1 | 	sub	objptr, ##30000
11ab4     F2 FA 01 F6 | 	mov	result1, objptr
11ab8     00 98 00 FF 
11abc     00 FA 45 F5 | 	or	result1, ##19922944
11ac0     3A 00 00 FF 
11ac4     34 E5 05 F1 | 	add	objptr, ##30004
11ac8     F2 FA 61 FC | 	wrlong	result1, objptr
11acc     3A 00 00 FF 
11ad0     34 E5 85 F1 | 	sub	objptr, ##30004
11ad4     F2 FA 01 F6 | 	mov	result1, objptr
11ad8     00 A0 00 FF 
11adc     00 FA 45 F5 | 	or	result1, ##20971520
11ae0     3A 00 00 FF 
11ae4     38 E5 05 F1 | 	add	objptr, ##30008
11ae8     F2 FA 61 FC | 	wrlong	result1, objptr
11aec     3A 00 00 FF 
11af0     38 E5 85 F1 | 	sub	objptr, ##30008
11af4     F2 FA 01 F6 | 	mov	result1, objptr
11af8     00 A8 00 FF 
11afc     00 FA 45 F5 | 	or	result1, ##22020096
11b00     3A 00 00 FF 
11b04     3C E5 05 F1 | 	add	objptr, ##30012
11b08     F2 FA 61 FC | 	wrlong	result1, objptr
11b0c     3A 00 00 FF 
11b10     3C E5 85 F1 | 	sub	objptr, ##30012
11b14     F2 FA 01 F6 | 	mov	result1, objptr
11b18     00 B0 00 FF 
11b1c     00 FA 45 F5 | 	or	result1, ##23068672
11b20     3A 00 00 FF 
11b24     40 E5 05 F1 | 	add	objptr, ##30016
11b28     F2 FA 61 FC | 	wrlong	result1, objptr
11b2c     3A 00 00 FF 
11b30     40 E5 85 F1 | 	sub	objptr, ##30016
11b34     F2 FA 01 F6 | 	mov	result1, objptr
11b38     00 B8 00 FF 
11b3c     00 FA 45 F5 | 	or	result1, ##24117248
11b40     3A 00 00 FF 
11b44     44 E5 05 F1 | 	add	objptr, ##30020
11b48     F2 FA 61 FC | 	wrlong	result1, objptr
11b4c     3A 00 00 FF 
11b50     44 E5 85 F1 | 	sub	objptr, ##30020
11b54     F2 FA 01 F6 | 	mov	result1, objptr
11b58     37 FA 25 F4 | 	bith	result1, #55
11b5c     3A 00 00 FF 
11b60     48 E5 05 F1 | 	add	objptr, ##30024
11b64     F2 FA 61 FC | 	wrlong	result1, objptr
11b68     3A 00 00 FF 
11b6c     48 E5 85 F1 | 	sub	objptr, ##30024
11b70     F2 FA 01 F6 | 	mov	result1, objptr
11b74     00 C8 00 FF 
11b78     00 FA 45 F5 | 	or	result1, ##26214400
11b7c     3A 00 00 FF 
11b80     4C E5 05 F1 | 	add	objptr, ##30028
11b84     F2 FA 61 FC | 	wrlong	result1, objptr
11b88     3A 00 00 FF 
11b8c     4C E5 85 F1 | 	sub	objptr, ##30028
11b90     F2 FA 01 F6 | 	mov	result1, objptr
11b94     00 D0 00 FF 
11b98     00 FA 45 F5 | 	or	result1, ##27262976
11b9c     3A 00 00 FF 
11ba0     50 E5 05 F1 | 	add	objptr, ##30032
11ba4     F2 FA 61 FC | 	wrlong	result1, objptr
11ba8     3A 00 00 FF 
11bac     50 E5 85 F1 | 	sub	objptr, ##30032
11bb0     F2 FA 01 F6 | 	mov	result1, objptr
11bb4     00 D8 00 FF 
11bb8     00 FA 45 F5 | 	or	result1, ##28311552
11bbc     3A 00 00 FF 
11bc0     54 E5 05 F1 | 	add	objptr, ##30036
11bc4     F2 FA 61 FC | 	wrlong	result1, objptr
11bc8     3A 00 00 FF 
11bcc     54 E5 85 F1 | 	sub	objptr, ##30036
11bd0     F2 FA 01 F6 | 	mov	result1, objptr
11bd4     56 FA 25 F4 | 	bith	result1, #86
11bd8     3A 00 00 FF 
11bdc     58 E5 05 F1 | 	add	objptr, ##30040
11be0     F2 FA 61 FC | 	wrlong	result1, objptr
11be4     3A 00 00 FF 
11be8     58 E5 85 F1 | 	sub	objptr, ##30040
11bec     F2 FA 01 F6 | 	mov	result1, objptr
11bf0     00 E8 00 FF 
11bf4     00 FA 45 F5 | 	or	result1, ##30408704
11bf8     3C 00 00 FF 
11bfc     20 E4 05 F1 | 	add	objptr, ##30752
11c00     F2 FA 61 FC | 	wrlong	result1, objptr
11c04     3C 00 00 FF 
11c08     20 E4 85 F1 | 	sub	objptr, ##30752
11c0c     F2 FA 01 F6 | 	mov	result1, objptr
11c10     75 FA 25 F4 | 	bith	result1, #117
11c14     3A 00 00 FF 
11c18     5C E5 05 F1 | 	add	objptr, ##30044
11c1c     F2 FA 61 FC | 	wrlong	result1, objptr
11c20     3A 00 00 FF 
11c24     5C E5 85 F1 | 	sub	objptr, ##30044
11c28     F2 FA 01 F6 | 	mov	result1, objptr
11c2c     94 FA 25 F4 | 	bith	result1, #148
11c30     3A 00 00 FF 
11c34     70 E5 05 F1 | 	add	objptr, ##30064
11c38     F2 FA 61 FC | 	wrlong	result1, objptr
11c3c     3A 00 00 FF 
11c40     70 E5 85 F1 | 	sub	objptr, ##30064
11c44     F2 FA 01 F6 | 	mov	result1, objptr
11c48     19 FA 25 F4 | 	bith	result1, #25
11c4c     3A 00 00 FF 
11c50     60 E5 05 F1 | 	add	objptr, ##30048
11c54     F2 FA 61 FC | 	wrlong	result1, objptr
11c58     3A 00 00 FF 
11c5c     60 E5 85 F1 | 	sub	objptr, ##30048
11c60     F2 FA 01 F6 | 	mov	result1, objptr
11c64     00 08 01 FF 
11c68     00 FA 45 F5 | 	or	result1, ##34603008
11c6c     3A 00 00 FF 
11c70     7C E4 05 F1 | 	add	objptr, ##29820
11c74     F2 FA 61 FC | 	wrlong	result1, objptr
11c78     3A 00 00 FF 
11c7c     7C E4 85 F1 | 	sub	objptr, ##29820
11c80     F2 FA 01 F6 | 	mov	result1, objptr
11c84     00 10 01 FF 
11c88     00 FA 45 F5 | 	or	result1, ##35651584
11c8c     3A 00 00 FF 
11c90     64 E5 05 F1 | 	add	objptr, ##30052
11c94     F2 FA 61 FC | 	wrlong	result1, objptr
11c98     3A 00 00 FF 
11c9c     64 E5 85 F1 | 	sub	objptr, ##30052
11ca0     F2 FA 01 F6 | 	mov	result1, objptr
11ca4     00 18 01 FF 
11ca8     00 FA 45 F5 | 	or	result1, ##36700160
11cac     3A 00 00 FF 
11cb0     68 E5 05 F1 | 	add	objptr, ##30056
11cb4     F2 FA 61 FC | 	wrlong	result1, objptr
11cb8     3A 00 00 FF 
11cbc     68 E5 85 F1 | 	sub	objptr, ##30056
11cc0     F2 FA 01 F6 | 	mov	result1, objptr
11cc4     00 20 01 FF 
11cc8     00 FA 45 F5 | 	or	result1, ##37748736
11ccc     3A 00 00 FF 
11cd0     6C E5 05 F1 | 	add	objptr, ##30060
11cd4     F2 FA 61 FC | 	wrlong	result1, objptr
11cd8     3A 00 00 FF 
11cdc     6C E5 85 F1 | 	sub	objptr, ##30060
11ce0     F2 FA 01 F6 | 	mov	result1, objptr
11ce4     00 28 01 FF 
11ce8     00 FA 45 F5 | 	or	result1, ##38797312
11cec     3A 00 00 FF 
11cf0     78 E5 05 F1 | 	add	objptr, ##30072
11cf4     F2 FA 61 FC | 	wrlong	result1, objptr
11cf8     3A 00 00 FF 
11cfc     78 E5 85 F1 | 	sub	objptr, ##30072
11d00     F2 FA 01 F6 | 	mov	result1, objptr
11d04     00 30 01 FF 
11d08     00 FA 45 F5 | 	or	result1, ##39845888
11d0c     3A 00 00 FF 
11d10     7C E5 05 F1 | 	add	objptr, ##30076
11d14     F2 FA 61 FC | 	wrlong	result1, objptr
11d18     3A 00 00 FF 
11d1c     7C E5 85 F1 | 	sub	objptr, ##30076
11d20     F2 FA 01 F6 | 	mov	result1, objptr
11d24     00 38 01 FF 
11d28     00 FA 45 F5 | 	or	result1, ##40894464
11d2c     3A 00 00 FF 
11d30     80 E5 05 F1 | 	add	objptr, ##30080
11d34     F2 FA 61 FC | 	wrlong	result1, objptr
11d38     3A 00 00 FF 
11d3c     80 E5 85 F1 | 	sub	objptr, ##30080
11d40     F2 FA 01 F6 | 	mov	result1, objptr
11d44     00 40 01 FF 
11d48     00 FA 45 F5 | 	or	result1, ##41943040
11d4c     3A 00 00 FF 
11d50     84 E5 05 F1 | 	add	objptr, ##30084
11d54     F2 FA 61 FC | 	wrlong	result1, objptr
11d58     3A 00 00 FF 
11d5c     84 E5 85 F1 | 	sub	objptr, ##30084
11d60     F2 FA 01 F6 | 	mov	result1, objptr
11d64     00 48 01 FF 
11d68     00 FA 45 F5 | 	or	result1, ##42991616
11d6c     3A 00 00 FF 
11d70     8C E5 05 F1 | 	add	objptr, ##30092
11d74     F2 FA 61 FC | 	wrlong	result1, objptr
11d78     3A 00 00 FF 
11d7c     8C E5 85 F1 | 	sub	objptr, ##30092
11d80     F2 FA 01 F6 | 	mov	result1, objptr
11d84     00 50 01 FF 
11d88     00 FA 45 F5 | 	or	result1, ##44040192
11d8c     3A 00 00 FF 
11d90     90 E5 05 F1 | 	add	objptr, ##30096
11d94     F2 FA 61 FC | 	wrlong	result1, objptr
11d98     3A 00 00 FF 
11d9c     90 E5 85 F1 | 	sub	objptr, ##30096
11da0     F2 FA 01 F6 | 	mov	result1, objptr
11da4     00 58 01 FF 
11da8     00 FA 45 F5 | 	or	result1, ##45088768
11dac     3A 00 00 FF 
11db0     90 E4 05 F1 | 	add	objptr, ##29840
11db4     F2 FA 61 FC | 	wrlong	result1, objptr
11db8     3A 00 00 FF 
11dbc     90 E4 85 F1 | 	sub	objptr, ##29840
11dc0     F2 FA 01 F6 | 	mov	result1, objptr
11dc4     00 60 01 FF 
11dc8     00 FA 45 F5 | 	or	result1, ##46137344
11dcc     3A 00 00 FF 
11dd0     C0 E4 05 F1 | 	add	objptr, ##29888
11dd4     F2 FA 61 FC | 	wrlong	result1, objptr
11dd8     3A 00 00 FF 
11ddc     C0 E4 85 F1 | 	sub	objptr, ##29888
11de0     F2 FA 01 F6 | 	mov	result1, objptr
11de4     00 68 01 FF 
11de8     00 FA 45 F5 | 	or	result1, ##47185920
11dec     3A 00 00 FF 
11df0     BC E4 05 F1 | 	add	objptr, ##29884
11df4     F2 FA 61 FC | 	wrlong	result1, objptr
11df8     3A 00 00 FF 
11dfc     BC E4 85 F1 | 	sub	objptr, ##29884
11e00     F2 FA 01 F6 | 	mov	result1, objptr
11e04     00 70 01 FF 
11e08     00 FA 45 F5 | 	or	result1, ##48234496
11e0c     3A 00 00 FF 
11e10     60 E4 05 F1 | 	add	objptr, ##29792
11e14     F2 FA 61 FC | 	wrlong	result1, objptr
11e18     3A 00 00 FF 
11e1c     60 E4 85 F1 | 	sub	objptr, ##29792
11e20     F2 FA 01 F6 | 	mov	result1, objptr
11e24     00 78 01 FF 
11e28     00 FA 45 F5 | 	or	result1, ##49283072
11e2c     3A 00 00 FF 
11e30     64 E4 05 F1 | 	add	objptr, ##29796
11e34     F2 FA 61 FC | 	wrlong	result1, objptr
11e38     3A 00 00 FF 
11e3c     64 E4 85 F1 | 	sub	objptr, ##29796
11e40     F2 FA 01 F6 | 	mov	result1, objptr
11e44     38 FA 25 F4 | 	bith	result1, #56
11e48     3A 00 00 FF 
11e4c     CC E4 05 F1 | 	add	objptr, ##29900
11e50     F2 FA 61 FC | 	wrlong	result1, objptr
11e54     3A 00 00 FF 
11e58     CC E4 85 F1 | 	sub	objptr, ##29900
11e5c     F2 FA 01 F6 | 	mov	result1, objptr
11e60     00 88 01 FF 
11e64     00 FA 45 F5 | 	or	result1, ##51380224
11e68     3A 00 00 FF 
11e6c     74 E5 05 F1 | 	add	objptr, ##30068
11e70     F2 FA 61 FC | 	wrlong	result1, objptr
11e74     3A 00 00 FF 
11e78     74 E5 85 F1 | 	sub	objptr, ##30068
11e7c     F2 FA 01 F6 | 	mov	result1, objptr
11e80     00 90 01 FF 
11e84     00 FA 45 F5 | 	or	result1, ##52428800
11e88     3A 00 00 FF 
11e8c     88 E5 05 F1 | 	add	objptr, ##30088
11e90     F2 FA 61 FC | 	wrlong	result1, objptr
11e94     3A 00 00 FF 
11e98     88 E5 85 F1 | 	sub	objptr, ##30088
11e9c     F2 FA 01 F6 | 	mov	result1, objptr
11ea0     00 98 01 FF 
11ea4     00 FA 45 F5 | 	or	result1, ##53477376
11ea8     3A 00 00 FF 
11eac     94 E5 05 F1 | 	add	objptr, ##30100
11eb0     F2 FA 61 FC | 	wrlong	result1, objptr
11eb4     3A 00 00 FF 
11eb8     94 E5 85 F1 | 	sub	objptr, ##30100
11ebc     F2 FA 01 F6 | 	mov	result1, objptr
11ec0     00 A0 01 FF 
11ec4     00 FA 45 F5 | 	or	result1, ##54525952
11ec8     3A 00 00 FF 
11ecc     98 E5 05 F1 | 	add	objptr, ##30104
11ed0     F2 FA 61 FC | 	wrlong	result1, objptr
11ed4     3A 00 00 FF 
11ed8     98 E5 85 F1 | 	sub	objptr, ##30104
11edc     F2 FA 01 F6 | 	mov	result1, objptr
11ee0     00 A8 01 FF 
11ee4     00 FA 45 F5 | 	or	result1, ##55574528
11ee8     3A 00 00 FF 
11eec     9C E5 05 F1 | 	add	objptr, ##30108
11ef0     F2 FA 61 FC | 	wrlong	result1, objptr
11ef4     3A 00 00 FF 
11ef8     9C E5 85 F1 | 	sub	objptr, ##30108
11efc     F2 FA 01 F6 | 	mov	result1, objptr
11f00     00 B0 01 FF 
11f04     00 FA 45 F5 | 	or	result1, ##56623104
11f08     3A 00 00 FF 
11f0c     A0 E5 05 F1 | 	add	objptr, ##30112
11f10     F2 FA 61 FC | 	wrlong	result1, objptr
11f14     3A 00 00 FF 
11f18     A0 E5 85 F1 | 	sub	objptr, ##30112
11f1c     F2 FA 01 F6 | 	mov	result1, objptr
11f20     00 B8 01 FF 
11f24     00 FA 45 F5 | 	or	result1, ##57671680
11f28     3A 00 00 FF 
11f2c     A4 E5 05 F1 | 	add	objptr, ##30116
11f30     F2 FA 61 FC | 	wrlong	result1, objptr
11f34     3A 00 00 FF 
11f38     A4 E5 85 F1 | 	sub	objptr, ##30116
11f3c     F2 FA 01 F6 | 	mov	result1, objptr
11f40     57 FA 25 F4 | 	bith	result1, #87
11f44     3A 00 00 FF 
11f48     A8 E5 05 F1 | 	add	objptr, ##30120
11f4c     F2 FA 61 FC | 	wrlong	result1, objptr
11f50     3A 00 00 FF 
11f54     A8 E5 85 F1 | 	sub	objptr, ##30120
11f58     F2 FA 01 F6 | 	mov	result1, objptr
11f5c     94 FA 25 F4 | 	bith	result1, #148
11f60     3A 00 00 FF 
11f64     70 E5 05 F1 | 	add	objptr, ##30064
11f68     F2 FA 61 FC | 	wrlong	result1, objptr
11f6c     3A 00 00 FF 
11f70     70 E5 85 F1 | 	sub	objptr, ##30064
11f74     F2 FA 01 F6 | 	mov	result1, objptr
11f78     00 C8 01 FF 
11f7c     00 FA 45 F5 | 	or	result1, ##59768832
11f80     3A 00 00 FF 
11f84     B0 E5 05 F1 | 	add	objptr, ##30128
11f88     F2 FA 61 FC | 	wrlong	result1, objptr
11f8c     3A 00 00 FF 
11f90     B0 E5 85 F1 | 	sub	objptr, ##30128
11f94     F2 FA 01 F6 | 	mov	result1, objptr
11f98     00 D0 01 FF 
11f9c     00 FA 45 F5 | 	or	result1, ##60817408
11fa0     3A 00 00 FF 
11fa4     AC E5 05 F1 | 	add	objptr, ##30124
11fa8     F2 FA 61 FC | 	wrlong	result1, objptr
11fac     3A 00 00 FF 
11fb0     AC E5 85 F1 | 	sub	objptr, ##30124
11fb4     F2 FA 01 F6 | 	mov	result1, objptr
11fb8     00 D8 01 FF 
11fbc     00 FA 45 F5 | 	or	result1, ##61865984
11fc0     3A 00 00 FF 
11fc4     C4 E5 05 F1 | 	add	objptr, ##30148
11fc8     F2 FA 61 FC | 	wrlong	result1, objptr
11fcc     3A 00 00 FF 
11fd0     C4 E5 85 F1 | 	sub	objptr, ##30148
11fd4     F2 FA 01 F6 | 	mov	result1, objptr
11fd8     76 FA 25 F4 | 	bith	result1, #118
11fdc     3A 00 00 FF 
11fe0     C8 E5 05 F1 | 	add	objptr, ##30152
11fe4     F2 FA 61 FC | 	wrlong	result1, objptr
11fe8     3A 00 00 FF 
11fec     C8 E5 85 F1 | 	sub	objptr, ##30152
11ff0     F2 FA 01 F6 | 	mov	result1, objptr
11ff4     00 E8 01 FF 
11ff8     00 FA 45 F5 | 	or	result1, ##63963136
11ffc     3A 00 00 FF 
12000     B4 E5 05 F1 | 	add	objptr, ##30132
12004     F2 FA 61 FC | 	wrlong	result1, objptr
12008     3A 00 00 FF 
1200c     B4 E5 85 F1 | 	sub	objptr, ##30132
12010     F2 FA 01 F6 | 	mov	result1, objptr
12014     95 FA 25 F4 | 	bith	result1, #149
12018     3A 00 00 FF 
1201c     B8 E5 05 F1 | 	add	objptr, ##30136
12020     F2 FA 61 FC | 	wrlong	result1, objptr
12024     3A 00 00 FF 
12028     B8 E5 85 F1 | 	sub	objptr, ##30136
1202c     F2 FA 01 F6 | 	mov	result1, objptr
12030     B4 FA 25 F4 | 	bith	result1, #180
12034     3A 00 00 FF 
12038     BC E5 05 F1 | 	add	objptr, ##30140
1203c     F2 FA 61 FC | 	wrlong	result1, objptr
12040     3A 00 00 FF 
12044     BC E5 85 F1 | 	sub	objptr, ##30140
12048     F2 FA 01 F6 | 	mov	result1, objptr
1204c     1A FA 25 F4 | 	bith	result1, #26
12050     3A 00 00 FF 
12054     C0 E5 05 F1 | 	add	objptr, ##30144
12058     F2 FA 61 FC | 	wrlong	result1, objptr
1205c     3A 00 00 FF 
12060     C0 E5 85 F1 | 	sub	objptr, ##30144
12064     F2 FA 01 F6 | 	mov	result1, objptr
12068     00 08 02 FF 
1206c     00 FA 45 F5 | 	or	result1, ##68157440
12070     3A 00 00 FF 
12074     D0 E5 05 F1 | 	add	objptr, ##30160
12078     F2 FA 61 FC | 	wrlong	result1, objptr
1207c     3A 00 00 FF 
12080     D0 E5 85 F1 | 	sub	objptr, ##30160
12084     F2 FA 01 F6 | 	mov	result1, objptr
12088     00 10 02 FF 
1208c     00 FA 45 F5 | 	or	result1, ##69206016
12090     3A 00 00 FF 
12094     CC E5 05 F1 | 	add	objptr, ##30156
12098     F2 FA 61 FC | 	wrlong	result1, objptr
1209c     3A 00 00 FF 
120a0     CC E5 85 F1 | 	sub	objptr, ##30156
120a4     F2 FA 01 F6 | 	mov	result1, objptr
120a8     00 18 02 FF 
120ac     00 FA 45 F5 | 	or	result1, ##70254592
120b0     3A 00 00 FF 
120b4     DC E5 05 F1 | 	add	objptr, ##30172
120b8     F2 FA 61 FC | 	wrlong	result1, objptr
120bc     3A 00 00 FF 
120c0     DC E5 85 F1 | 	sub	objptr, ##30172
120c4     F2 FA 01 F6 | 	mov	result1, objptr
120c8     00 20 02 FF 
120cc     00 FA 45 F5 | 	or	result1, ##71303168
120d0     3A 00 00 FF 
120d4     D8 E5 05 F1 | 	add	objptr, ##30168
120d8     F2 FA 61 FC | 	wrlong	result1, objptr
120dc     3A 00 00 FF 
120e0     D8 E5 85 F1 | 	sub	objptr, ##30168
120e4     F2 FA 01 F6 | 	mov	result1, objptr
120e8     00 28 02 FF 
120ec     00 FA 45 F5 | 	or	result1, ##72351744
120f0     3A 00 00 FF 
120f4     D4 E5 05 F1 | 	add	objptr, ##30164
120f8     F2 FA 61 FC | 	wrlong	result1, objptr
120fc     3A 00 00 FF 
12100     D4 E5 85 F1 | 	sub	objptr, ##30164
12104     F2 FA 01 F6 | 	mov	result1, objptr
12108     00 30 02 FF 
1210c     00 FA 45 F5 | 	or	result1, ##73400320
12110     3A 00 00 FF 
12114     E0 E5 05 F1 | 	add	objptr, ##30176
12118     F2 FA 61 FC | 	wrlong	result1, objptr
1211c     3A 00 00 FF 
12120     E0 E5 85 F1 | 	sub	objptr, ##30176
12124     F2 FA 01 F6 | 	mov	result1, objptr
12128     00 38 02 FF 
1212c     00 FA 45 F5 | 	or	result1, ##74448896
12130     3A 00 00 FF 
12134     E4 E5 05 F1 | 	add	objptr, ##30180
12138     F2 FA 61 FC | 	wrlong	result1, objptr
1213c     3A 00 00 FF 
12140     E4 E5 85 F1 | 	sub	objptr, ##30180
12144     F2 FA 01 F6 | 	mov	result1, objptr
12148     00 40 02 FF 
1214c     00 FA 45 F5 | 	or	result1, ##75497472
12150     3A 00 00 FF 
12154     78 E4 05 F1 | 	add	objptr, ##29816
12158     F2 FA 61 FC | 	wrlong	result1, objptr
1215c     3A 00 00 FF 
12160     78 E4 85 F1 | 	sub	objptr, ##29816
12164     F2 FA 01 F6 | 	mov	result1, objptr
12168     00 48 02 FF 
1216c     00 FA 45 F5 | 	or	result1, ##76546048
12170     3A 00 00 FF 
12174     FC E5 05 F1 | 	add	objptr, ##30204
12178     F2 FA 61 FC | 	wrlong	result1, objptr
1217c     3A 00 00 FF 
12180     FC E5 85 F1 | 	sub	objptr, ##30204
12184     F2 FA 01 F6 | 	mov	result1, objptr
12188     00 50 02 FF 
1218c     00 FA 45 F5 | 	or	result1, ##77594624
12190     3B 00 00 FF 
12194     0C E4 05 F1 | 	add	objptr, ##30220
12198     F2 FA 61 FC | 	wrlong	result1, objptr
1219c     3B 00 00 FF 
121a0     0C E4 85 F1 | 	sub	objptr, ##30220
121a4     F2 FA 01 F6 | 	mov	result1, objptr
121a8     00 58 02 FF 
121ac     00 FA 45 F5 | 	or	result1, ##78643200
121b0     3B 00 00 FF 
121b4     10 E4 05 F1 | 	add	objptr, ##30224
121b8     F2 FA 61 FC | 	wrlong	result1, objptr
121bc     3B 00 00 FF 
121c0     10 E4 85 F1 | 	sub	objptr, ##30224
121c4     F2 FA 01 F6 | 	mov	result1, objptr
121c8     00 60 02 FF 
121cc     00 FA 45 F5 | 	or	result1, ##79691776
121d0     3B 00 00 FF 
121d4     08 E4 05 F1 | 	add	objptr, ##30216
121d8     F2 FA 61 FC | 	wrlong	result1, objptr
121dc     3B 00 00 FF 
121e0     08 E4 85 F1 | 	sub	objptr, ##30216
121e4     F2 FA 01 F6 | 	mov	result1, objptr
121e8     00 68 02 FF 
121ec     00 FA 45 F5 | 	or	result1, ##80740352
121f0     3B 00 00 FF 
121f4     00 E4 05 F1 | 	add	objptr, ##30208
121f8     F2 FA 61 FC | 	wrlong	result1, objptr
121fc     3B 00 00 FF 
12200     00 E4 85 F1 | 	sub	objptr, ##30208
12204     F2 FA 01 F6 | 	mov	result1, objptr
12208     00 70 02 FF 
1220c     00 FA 45 F5 | 	or	result1, ##81788928
12210     3B 00 00 FF 
12214     04 E4 05 F1 | 	add	objptr, ##30212
12218     F2 FA 61 FC | 	wrlong	result1, objptr
1221c     3B 00 00 FF 
12220     04 E4 85 F1 | 	sub	objptr, ##30212
12224     F2 FA 01 F6 | 	mov	result1, objptr
12228     00 78 02 FF 
1222c     00 FA 45 F5 | 	or	result1, ##82837504
12230     3B 00 00 FF 
12234     14 E4 05 F1 | 	add	objptr, ##30228
12238     F2 FA 61 FC | 	wrlong	result1, objptr
1223c     3B 00 00 FF 
12240     14 E4 85 F1 | 	sub	objptr, ##30228
12244     F2 FA 01 F6 | 	mov	result1, objptr
12248     00 80 02 FF 
1224c     00 FA 45 F5 | 	or	result1, ##83886080
12250     3B 00 00 FF 
12254     18 E4 05 F1 | 	add	objptr, ##30232
12258     F2 FA 61 FC | 	wrlong	result1, objptr
1225c     3B 00 00 FF 
12260     18 E4 85 F1 | 	sub	objptr, ##30232
12264     F2 FA 01 F6 | 	mov	result1, objptr
12268     00 88 02 FF 
1226c     00 FA 45 F5 | 	or	result1, ##84934656
12270     3B 00 00 FF 
12274     1C E4 05 F1 | 	add	objptr, ##30236
12278     F2 FA 61 FC | 	wrlong	result1, objptr
1227c     3B 00 00 FF 
12280     1C E4 85 F1 | 	sub	objptr, ##30236
12284     F2 FA 01 F6 | 	mov	result1, objptr
12288     00 90 02 FF 
1228c     00 FA 45 F5 | 	or	result1, ##85983232
12290     3B 00 00 FF 
12294     20 E4 05 F1 | 	add	objptr, ##30240
12298     F2 FA 61 FC | 	wrlong	result1, objptr
1229c     3B 00 00 FF 
122a0     20 E4 85 F1 | 	sub	objptr, ##30240
122a4     F2 FA 01 F6 | 	mov	result1, objptr
122a8     00 98 02 FF 
122ac     00 FA 45 F5 | 	or	result1, ##87031808
122b0     3B 00 00 FF 
122b4     24 E4 05 F1 | 	add	objptr, ##30244
122b8     F2 FA 61 FC | 	wrlong	result1, objptr
122bc     3B 00 00 FF 
122c0     24 E4 85 F1 | 	sub	objptr, ##30244
122c4     F2 FA 01 F6 | 	mov	result1, objptr
122c8     00 A0 02 FF 
122cc     00 FA 45 F5 | 	or	result1, ##88080384
122d0     3B 00 00 FF 
122d4     28 E4 05 F1 | 	add	objptr, ##30248
122d8     F2 FA 61 FC | 	wrlong	result1, objptr
122dc     3B 00 00 FF 
122e0     28 E4 85 F1 | 	sub	objptr, ##30248
122e4     F2 FA 01 F6 | 	mov	result1, objptr
122e8     00 A8 02 FF 
122ec     00 FA 45 F5 | 	or	result1, ##89128960
122f0     3A 00 00 FF 
122f4     E8 E5 05 F1 | 	add	objptr, ##30184
122f8     F2 FA 61 FC | 	wrlong	result1, objptr
122fc     3A 00 00 FF 
12300     E8 E5 85 F1 | 	sub	objptr, ##30184
12304                 | _init_commands_ret
12304     2D 00 64 FD | 	ret
12308                 | 
12308                 | ' 
12308                 | ' ''--------------------------------Error strings -------------------------------------
12308                 | ' 
12308                 | ' sub init_error_strings
12308                 | _init_error_strings
12308     28 01 00 FF 
1230c     26 00 06 F6 | 	mov	_var01, ##@LR__4349
12310     3C 00 00 FF 
12314     40 E4 05 F1 | 	add	objptr, ##30784
12318     F2 00 62 FC | 	wrlong	_var01, objptr
1231c     28 01 00 FF 
12320     27 00 06 F6 | 	mov	_var01, ##@LR__4350
12324     04 E4 05 F1 | 	add	objptr, #4
12328     F2 00 62 FC | 	wrlong	_var01, objptr
1232c     28 01 00 FF 
12330     4C 00 06 F6 | 	mov	_var01, ##@LR__4351
12334     04 E4 05 F1 | 	add	objptr, #4
12338     F2 00 62 FC | 	wrlong	_var01, objptr
1233c     28 01 00 FF 
12340     6D 00 06 F6 | 	mov	_var01, ##@LR__4352
12344     04 E4 05 F1 | 	add	objptr, #4
12348     F2 00 62 FC | 	wrlong	_var01, objptr
1234c     28 01 00 FF 
12350     87 00 06 F6 | 	mov	_var01, ##@LR__4353
12354     04 E4 05 F1 | 	add	objptr, #4
12358     F2 00 62 FC | 	wrlong	_var01, objptr
1235c     28 01 00 FF 
12360     A3 00 06 F6 | 	mov	_var01, ##@LR__4354
12364     04 E4 05 F1 | 	add	objptr, #4
12368     F2 00 62 FC | 	wrlong	_var01, objptr
1236c     28 01 00 FF 
12370     C5 00 06 F6 | 	mov	_var01, ##@LR__4355
12374     04 E4 05 F1 | 	add	objptr, #4
12378     F2 00 62 FC | 	wrlong	_var01, objptr
1237c     28 01 00 FF 
12380     F3 00 06 F6 | 	mov	_var01, ##@LR__4356
12384     04 E4 05 F1 | 	add	objptr, #4
12388     F2 00 62 FC | 	wrlong	_var01, objptr
1238c     28 01 00 FF 
12390     1E 01 06 F6 | 	mov	_var01, ##@LR__4357
12394     04 E4 05 F1 | 	add	objptr, #4
12398     F2 00 62 FC | 	wrlong	_var01, objptr
1239c     28 01 00 FF 
123a0     37 01 06 F6 | 	mov	_var01, ##@LR__4358
123a4     04 E4 05 F1 | 	add	objptr, #4
123a8     F2 00 62 FC | 	wrlong	_var01, objptr
123ac     28 01 00 FF 
123b0     58 01 06 F6 | 	mov	_var01, ##@LR__4359
123b4     04 E4 05 F1 | 	add	objptr, #4
123b8     F2 00 62 FC | 	wrlong	_var01, objptr
123bc     28 01 00 FF 
123c0     6F 01 06 F6 | 	mov	_var01, ##@LR__4360
123c4     04 E4 05 F1 | 	add	objptr, #4
123c8     F2 00 62 FC | 	wrlong	_var01, objptr
123cc     28 01 00 FF 
123d0     8D 01 06 F6 | 	mov	_var01, ##@LR__4361
123d4     04 E4 05 F1 | 	add	objptr, #4
123d8     F2 00 62 FC | 	wrlong	_var01, objptr
123dc     28 01 00 FF 
123e0     B1 01 06 F6 | 	mov	_var01, ##@LR__4362
123e4     04 E4 05 F1 | 	add	objptr, #4
123e8     F2 00 62 FC | 	wrlong	_var01, objptr
123ec     28 01 00 FF 
123f0     D8 01 06 F6 | 	mov	_var01, ##@LR__4363
123f4     04 E4 05 F1 | 	add	objptr, #4
123f8     F2 00 62 FC | 	wrlong	_var01, objptr
123fc     28 01 00 FF 
12400     F4 01 06 F6 | 	mov	_var01, ##@LR__4364
12404     04 E4 05 F1 | 	add	objptr, #4
12408     F2 00 62 FC | 	wrlong	_var01, objptr
1240c     29 01 00 FF 
12410     05 00 06 F6 | 	mov	_var01, ##@LR__4365
12414     04 E4 05 F1 | 	add	objptr, #4
12418     F2 00 62 FC | 	wrlong	_var01, objptr
1241c     29 01 00 FF 
12420     15 00 06 F6 | 	mov	_var01, ##@LR__4366
12424     04 E4 05 F1 | 	add	objptr, #4
12428     F2 00 62 FC | 	wrlong	_var01, objptr
1242c     29 01 00 FF 
12430     30 00 06 F6 | 	mov	_var01, ##@LR__4367
12434     04 E4 05 F1 | 	add	objptr, #4
12438     F2 00 62 FC | 	wrlong	_var01, objptr
1243c     29 01 00 FF 
12440     42 00 06 F6 | 	mov	_var01, ##@LR__4368
12444     04 E4 05 F1 | 	add	objptr, #4
12448     F2 00 62 FC | 	wrlong	_var01, objptr
1244c     29 01 00 FF 
12450     5A 00 06 F6 | 	mov	_var01, ##@LR__4369
12454     04 E4 05 F1 | 	add	objptr, #4
12458     F2 00 62 FC | 	wrlong	_var01, objptr
1245c     29 01 00 FF 
12460     6E 00 06 F6 | 	mov	_var01, ##@LR__4370
12464     04 E4 05 F1 | 	add	objptr, #4
12468     F2 00 62 FC | 	wrlong	_var01, objptr
1246c     29 01 00 FF 
12470     7E 00 06 F6 | 	mov	_var01, ##@LR__4371
12474     04 E4 05 F1 | 	add	objptr, #4
12478     F2 00 62 FC | 	wrlong	_var01, objptr
1247c     29 01 00 FF 
12480     9B 00 06 F6 | 	mov	_var01, ##@LR__4372
12484     04 E4 05 F1 | 	add	objptr, #4
12488     F2 00 62 FC | 	wrlong	_var01, objptr
1248c     29 01 00 FF 
12490     AC 00 06 F6 | 	mov	_var01, ##@LR__4373
12494     04 E4 05 F1 | 	add	objptr, #4
12498     F2 00 62 FC | 	wrlong	_var01, objptr
1249c     29 01 00 FF 
124a0     BD 00 06 F6 | 	mov	_var01, ##@LR__4374
124a4     04 E4 05 F1 | 	add	objptr, #4
124a8     F2 00 62 FC | 	wrlong	_var01, objptr
124ac     29 01 00 FF 
124b0     E8 00 06 F6 | 	mov	_var01, ##@LR__4375
124b4     04 E4 05 F1 | 	add	objptr, #4
124b8     F2 00 62 FC | 	wrlong	_var01, objptr
124bc     29 01 00 FF 
124c0     04 01 06 F6 | 	mov	_var01, ##@LR__4376
124c4     04 E4 05 F1 | 	add	objptr, #4
124c8     F2 00 62 FC | 	wrlong	_var01, objptr
124cc     29 01 00 FF 
124d0     1A 01 06 F6 | 	mov	_var01, ##@LR__4377
124d4     04 E4 05 F1 | 	add	objptr, #4
124d8     F2 00 62 FC | 	wrlong	_var01, objptr
124dc     29 01 00 FF 
124e0     27 01 06 F6 | 	mov	_var01, ##@LR__4378
124e4     04 E4 05 F1 | 	add	objptr, #4
124e8     F2 00 62 FC | 	wrlong	_var01, objptr
124ec     29 01 00 FF 
124f0     39 01 06 F6 | 	mov	_var01, ##@LR__4379
124f4     04 E4 05 F1 | 	add	objptr, #4
124f8     F2 00 62 FC | 	wrlong	_var01, objptr
124fc     29 01 00 FF 
12500     4A 01 06 F6 | 	mov	_var01, ##@LR__4380
12504     04 E4 05 F1 | 	add	objptr, #4
12508     F2 00 62 FC | 	wrlong	_var01, objptr
1250c     29 01 00 FF 
12510     66 01 06 F6 | 	mov	_var01, ##@LR__4381
12514     04 E4 05 F1 | 	add	objptr, #4
12518     F2 00 62 FC | 	wrlong	_var01, objptr
1251c     29 01 00 FF 
12520     77 01 06 F6 | 	mov	_var01, ##@LR__4382
12524     04 E4 05 F1 | 	add	objptr, #4
12528     F2 00 62 FC | 	wrlong	_var01, objptr
1252c     29 01 00 FF 
12530     86 01 06 F6 | 	mov	_var01, ##@LR__4383
12534     04 E4 05 F1 | 	add	objptr, #4
12538     F2 00 62 FC | 	wrlong	_var01, objptr
1253c     29 01 00 FF 
12540     A1 01 06 F6 | 	mov	_var01, ##@LR__4384
12544     04 E4 05 F1 | 	add	objptr, #4
12548     F2 00 62 FC | 	wrlong	_var01, objptr
1254c     29 01 00 FF 
12550     D5 01 06 F6 | 	mov	_var01, ##@LR__4385
12554     04 E4 05 F1 | 	add	objptr, #4
12558     F2 00 62 FC | 	wrlong	_var01, objptr
1255c     29 01 00 FF 
12560     EE 01 06 F6 | 	mov	_var01, ##@LR__4386
12564     04 E4 05 F1 | 	add	objptr, #4
12568     F2 00 62 FC | 	wrlong	_var01, objptr
1256c     2A 01 00 FF 
12570     0A 00 06 F6 | 	mov	_var01, ##@LR__4387
12574     04 E4 05 F1 | 	add	objptr, #4
12578     F2 00 62 FC | 	wrlong	_var01, objptr
1257c     2A 01 00 FF 
12580     28 00 06 F6 | 	mov	_var01, ##@LR__4388
12584     04 E4 05 F1 | 	add	objptr, #4
12588     F2 00 62 FC | 	wrlong	_var01, objptr
1258c     2A 01 00 FF 
12590     41 00 06 F6 | 	mov	_var01, ##@LR__4389
12594     04 E4 05 F1 | 	add	objptr, #4
12598     F2 00 62 FC | 	wrlong	_var01, objptr
1259c     2A 01 00 FF 
125a0     60 00 06 F6 | 	mov	_var01, ##@LR__4390
125a4     04 E4 05 F1 | 	add	objptr, #4
125a8     F2 00 62 FC | 	wrlong	_var01, objptr
125ac     2A 01 00 FF 
125b0     6F 00 06 F6 | 	mov	_var01, ##@LR__4391
125b4     04 E4 05 F1 | 	add	objptr, #4
125b8     F2 00 62 FC | 	wrlong	_var01, objptr
125bc     2A 01 00 FF 
125c0     9D 00 06 F6 | 	mov	_var01, ##@LR__4392
125c4     04 E4 05 F1 | 	add	objptr, #4
125c8     F2 00 62 FC | 	wrlong	_var01, objptr
125cc     2A 01 00 FF 
125d0     AB 00 06 F6 | 	mov	_var01, ##@LR__4393
125d4     04 E4 05 F1 | 	add	objptr, #4
125d8     F2 00 62 FC | 	wrlong	_var01, objptr
125dc     2A 01 00 FF 
125e0     C0 00 06 F6 | 	mov	_var01, ##@LR__4394
125e4     04 E4 05 F1 | 	add	objptr, #4
125e8     F2 00 62 FC | 	wrlong	_var01, objptr
125ec     2A 01 00 FF 
125f0     E4 00 06 F6 | 	mov	_var01, ##@LR__4395
125f4     04 E4 05 F1 | 	add	objptr, #4
125f8     F2 00 62 FC | 	wrlong	_var01, objptr
125fc     2A 01 00 FF 
12600     FB 00 06 F6 | 	mov	_var01, ##@LR__4396
12604     04 E4 05 F1 | 	add	objptr, #4
12608     F2 00 62 FC | 	wrlong	_var01, objptr
1260c     2A 01 00 FF 
12610     0E 01 06 F6 | 	mov	_var01, ##@LR__4397
12614     04 E4 05 F1 | 	add	objptr, #4
12618     F2 00 62 FC | 	wrlong	_var01, objptr
1261c     3C 00 00 FF 
12620     00 E5 85 F1 | 	sub	objptr, ##30976
12624                 | _init_error_strings_ret
12624     2D 00 64 FD | 	ret
12628                 | 
12628                 | '         
12628                 | ' sub printerror(err as integer)
12628                 | _printerror
12628     01 4A 05 F6 | 	mov	COUNT_, #1
1262c     A8 00 A0 FD | 	call	#pushregs_
12630     09 1F 02 F6 | 	mov	local01, arg01
12634     2A 01 00 FF 
12638     25 13 06 F6 | 	mov	arg01, ##@LR__4398
1263c     E4 24 B0 FD | 	call	#_hg010b_spin2_write
12640     0F 13 02 F6 | 	mov	arg01, local01
12644     DC 26 B0 FD | 	call	#_hg010b_spin2_inttostr
12648     FD 12 02 F6 | 	mov	arg01, result1
1264c     D4 24 B0 FD | 	call	#_hg010b_spin2_write
12650     2A 01 00 FF 
12654     2C 13 06 F6 | 	mov	arg01, ##@LR__4399
12658     C8 24 B0 FD | 	call	#_hg010b_spin2_write
1265c     02 1E 66 F0 | 	shl	local01, #2
12660     3C 00 00 FF 
12664     40 E4 05 F1 | 	add	objptr, ##30784
12668     F2 1E 02 F1 | 	add	local01, objptr
1266c     0F 13 02 FB | 	rdlong	arg01, local01
12670     3C 00 00 FF 
12674     40 E4 85 F1 | 	sub	objptr, ##30784
12678                 | ' 
12678                 | ' write(text)
12678     A8 24 B0 FD | 	call	#_hg010b_spin2_write
1267c                 | ' crlf
1267c     04 26 B0 FD | 	call	#_hg010b_spin2_crlf
12680     A7 F0 03 F6 | 	mov	ptra, fp
12684     B2 00 A0 FD | 	call	#popregs_
12688                 | _printerror_ret
12688     2D 00 64 FD | 	ret
1268c                 | 
1268c                 | ' 
1268c                 | ' '' ------------------------------- Hardware start/stop/initialization 
1268c                 | ' 
1268c                 | ' sub startpsram
1268c                 | _startpsram
1268c     00 12 06 F6 | 	mov	arg01, #0
12690     0A 14 C6 F9 | 	decod	arg02, #10
12694     0B 16 06 F6 | 	mov	arg03, #11
12698     07 18 06 F6 | 	mov	arg04, #7
1269c     0B 00 00 FF 
126a0     C0 E4 05 F1 | 	add	objptr, ##5824
126a4     88 27 B0 FD | 	call	#_psram_spin2_startx
126a8     22 00 00 FF 
126ac     0C E5 05 F1 | 	add	objptr, ##17676
126b0     F2 FA 61 FC | 	wrlong	result1, objptr
126b4                 | '     return $7FF00 + cog*12
126b4     0C E4 05 F1 | 	add	objptr, #12
126b8     FF 03 80 FF 
126bc     F2 00 6A FC | 	wrlong	##524032, objptr
126c0     2D 00 00 FF 
126c4     D8 E5 85 F1 | 	sub	objptr, ##23512
126c8                 | _startpsram_ret
126c8     2D 00 64 FD | 	ret
126cc                 | 
126cc                 | ' 
126cc                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
126cc                 | _startvideo
126cc     01 4A 05 F6 | 	mov	COUNT_, #1
126d0     A8 00 A0 FD | 	call	#pushregs_
126d4     2D 00 00 FF 
126d8     D8 E5 05 F1 | 	add	objptr, ##23512
126dc     F2 18 02 FB | 	rdlong	arg04, objptr
126e0     2D 00 00 FF 
126e4     D8 E5 85 F1 | 	sub	objptr, ##23512
126e8     0A 13 02 F6 | 	mov	arg01, arg02
126ec     0C 15 02 F6 | 	mov	arg02, arg04
126f0     50 0F B0 FD | 	call	#_hg010b_spin2_start
126f4     2D 00 00 FF 
126f8     C4 E5 05 F1 | 	add	objptr, ##23492
126fc     F2 FA 61 FC | 	wrlong	result1, objptr
12700                 | ' 
12700                 | ' videocog=v.start(pin,mbox)
12700                 | ' 
12700                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
12700     00 1E 06 F6 | 	mov	local01, #0
12704     22 00 00 FF 
12708     04 E5 85 F1 | 	sub	objptr, ##17668
1270c                 | LR__1500
1270c     0F 13 02 F6 | 	mov	arg01, local01
12710     00 28 00 FF 
12714     00 14 06 F6 | 	mov	arg02, ##5242880
12718     6C 2B B0 FD | 	call	#_psram_spin2_setQos
1271c     01 1E 06 F1 | 	add	local01, #1
12720     08 1E 56 F2 | 	cmps	local01, #8 wc
12724     E4 FF 9F CD |  if_b	jmp	#LR__1500
12728     22 00 00 FF 
1272c     04 E5 05 F1 | 	add	objptr, ##17668
12730     F2 12 02 FB | 	rdlong	arg01, objptr
12734     7A 00 02 FF 
12738     00 14 06 F6 | 	mov	arg02, ##67171328
1273c     22 00 00 FF 
12740     04 E5 85 F1 | 	sub	objptr, ##17668
12744     40 2B B0 FD | 	call	#_psram_spin2_setQos
12748     0B 00 00 FF 
1274c     C0 E4 85 F1 | 	sub	objptr, ##5824
12750                 | ' psram.setQoS(videocog, $0400f400) 
12750                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
12750     F2 14 02 F6 | 	mov	arg02, objptr
12754     00 B0 02 FF 
12758     00 14 46 F5 | 	or	arg02, ##90177536
1275c     00 16 06 F6 | 	mov	arg03, #0
12760     00 18 06 F6 | 	mov	arg04, #0
12764     00 12 06 F6 | 	mov	arg01, #0
12768     84 3E B0 FD | 	call	#__system___basic_open
1276c                 | ' return videocog
1276c     2D 00 00 FF 
12770     C4 E5 05 F1 | 	add	objptr, ##23492
12774     F2 FA 01 FB | 	rdlong	result1, objptr
12778     2D 00 00 FF 
1277c     C4 E5 85 F1 | 	sub	objptr, ##23492
12780     A7 F0 03 F6 | 	mov	ptra, fp
12784     B2 00 A0 FD | 	call	#popregs_
12788                 | _startvideo_ret
12788     2D 00 64 FD | 	ret
1278c                 | 
1278c                 | ' 
1278c                 | ' function pspeek(adr as ulong) as ubyte
1278c                 | _pspeek
1278c     00 4A 05 F6 | 	mov	COUNT_, #0
12790     A8 00 A0 FD | 	call	#pushregs_
12794     0C F0 07 F1 | 	add	ptra, #12
12798     04 4E 05 F1 | 	add	fp, #4
1279c     A7 12 62 FC | 	wrlong	arg01, fp
127a0     04 4E 05 F1 | 	add	fp, #4
127a4     A7 12 02 F6 | 	mov	arg01, fp
127a8     04 4E 85 F1 | 	sub	fp, #4
127ac     A7 14 02 FB | 	rdlong	arg02, fp
127b0     04 4E 85 F1 | 	sub	fp, #4
127b4     01 16 06 F6 | 	mov	arg03, #1
127b8     0B 00 00 FF 
127bc     C0 E4 05 F1 | 	add	objptr, ##5824
127c0     98 28 B0 FD | 	call	#_psram_spin2_read1
127c4     0B 00 00 FF 
127c8     C0 E4 85 F1 | 	sub	objptr, ##5824
127cc                 | ' psram.read1(varptr(res),adr,1)
127cc                 | ' return res
127cc     08 4E 05 F1 | 	add	fp, #8
127d0     A7 FA C1 FA | 	rdbyte	result1, fp
127d4     08 4E 85 F1 | 	sub	fp, #8
127d8     A7 F0 03 F6 | 	mov	ptra, fp
127dc     B2 00 A0 FD | 	call	#popregs_
127e0                 | _pspeek_ret
127e0     2D 00 64 FD | 	ret
127e4                 | 
127e4                 | ' 
127e4                 | ' function pslpeek(adr as ulong) as ulong
127e4                 | _pslpeek
127e4     00 4A 05 F6 | 	mov	COUNT_, #0
127e8     A8 00 A0 FD | 	call	#pushregs_
127ec     0C F0 07 F1 | 	add	ptra, #12
127f0     04 4E 05 F1 | 	add	fp, #4
127f4     A7 12 62 FC | 	wrlong	arg01, fp
127f8     04 4E 05 F1 | 	add	fp, #4
127fc     A7 12 02 F6 | 	mov	arg01, fp
12800     04 4E 85 F1 | 	sub	fp, #4
12804     A7 14 02 FB | 	rdlong	arg02, fp
12808     04 4E 85 F1 | 	sub	fp, #4
1280c     04 16 06 F6 | 	mov	arg03, #4
12810     0B 00 00 FF 
12814     C0 E4 05 F1 | 	add	objptr, ##5824
12818     40 28 B0 FD | 	call	#_psram_spin2_read1
1281c     0B 00 00 FF 
12820     C0 E4 85 F1 | 	sub	objptr, ##5824
12824                 | ' psram.read1(varptr(res),adr,4)
12824                 | ' return res
12824     08 4E 05 F1 | 	add	fp, #8
12828     A7 FA 01 FB | 	rdlong	result1, fp
1282c     08 4E 85 F1 | 	sub	fp, #8
12830     A7 F0 03 F6 | 	mov	ptra, fp
12834     B2 00 A0 FD | 	call	#popregs_
12838                 | _pslpeek_ret
12838     2D 00 64 FD | 	ret
1283c                 | 
1283c                 | ' 
1283c                 | ' '' ------------------------------- USB keyboard scan to char translator
1283c                 | ' 
1283c                 | ' function scantochar(key)
1283c                 | _scantochar
1283c                 | ' 
1283c                 | ' select case (key shr 8) and 255
1283c     09 01 02 F6 | 	mov	_var01, arg01
12840     08 00 C6 F0 | 	sar	_var01, #8
12844     FF 00 0E F5 | 	and	_var01, #255 wz
12848     24 00 90 AD |  if_e	jmp	#LR__1510
1284c     02 00 0E F2 | 	cmp	_var01, #2 wz
12850     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
12854     30 00 90 AD |  if_e	jmp	#LR__1511
12858     40 00 0E F2 | 	cmp	_var01, #64 wz
1285c     44 00 90 AD |  if_e	jmp	#LR__1512
12860     42 00 0E F2 | 	cmp	_var01, #66 wz
12864     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
12868     70 00 90 5D |  if_ne	jmp	#LR__1514
1286c     50 00 90 FD | 	jmp	#LR__1513
12870                 | LR__1510
12870     09 FB 01 F6 | 	mov	result1, arg01
12874     7F FA 05 F5 | 	and	result1, #127
12878     02 FA 65 F0 | 	shl	result1, #2
1287c     F5 FA 01 F1 | 	add	result1, ptr__dat__
12880     FD FA C1 FA | 	rdbyte	result1, result1
12884     54 00 90 FD | 	jmp	#_scantochar_ret
12888                 | LR__1511
12888     09 FB 01 F6 | 	mov	result1, arg01
1288c     7F FA 05 F5 | 	and	result1, #127
12890     02 FA 65 F0 | 	shl	result1, #2
12894     01 FA 05 F1 | 	add	result1, #1
12898     F5 FA 01 F1 | 	add	result1, ptr__dat__
1289c     FD FA C1 FA | 	rdbyte	result1, result1
128a0     38 00 90 FD | 	jmp	#_scantochar_ret
128a4                 | LR__1512
128a4     09 FB 01 F6 | 	mov	result1, arg01
128a8     7F FA 05 F5 | 	and	result1, #127
128ac     02 FA 65 F0 | 	shl	result1, #2
128b0     02 FA 05 F1 | 	add	result1, #2
128b4     F5 FA 01 F1 | 	add	result1, ptr__dat__
128b8     FD FA C1 FA | 	rdbyte	result1, result1
128bc     1C 00 90 FD | 	jmp	#_scantochar_ret
128c0                 | LR__1513
128c0     09 FB 01 F6 | 	mov	result1, arg01
128c4     7F FA 05 F5 | 	and	result1, #127
128c8     02 FA 65 F0 | 	shl	result1, #2
128cc     03 FA 05 F1 | 	add	result1, #3
128d0     F5 FA 01 F1 | 	add	result1, ptr__dat__
128d4     FD FA C1 FA | 	rdbyte	result1, result1
128d8     00 00 90 FD | 	jmp	#_scantochar_ret
128dc                 | LR__1514
128dc                 | _scantochar_ret
128dc     2D 00 64 FD | 	ret
128e0                 | 
128e0                 | _program
128e0     0B 4A 05 F6 | 	mov	COUNT_, #11
128e4     A8 00 A0 FD | 	call	#pushregs_
128e8     A0 FD BF FD | 	call	#_startpsram
128ec     40 12 06 F6 | 	mov	arg01, #64
128f0     00 14 06 F6 | 	mov	arg02, #0
128f4     00 16 06 F6 | 	mov	arg03, #0
128f8     D0 FD BF FD | 	call	#_startvideo
128fc     00 12 06 F6 | 	mov	arg01, #0
12900     00 14 06 F6 | 	mov	arg02, #0
12904     00 16 06 F6 | 	mov	arg03, #0
12908     0B 00 00 FF 
1290c     C0 E4 05 F1 | 	add	objptr, ##5824
12910     88 2C B0 FD | 	call	#_Audio093b_8_sc_spin2_start
12914     FE 1C 02 F6 | 	mov	arg06, result2
12918     22 00 00 FF 
1291c     00 E5 05 F1 | 	add	objptr, ##17664
12920     F2 FA 61 FC | 	wrlong	result1, objptr
12924     14 E4 05 F1 | 	add	objptr, #20
12928     F2 1C 62 FC | 	wrlong	arg06, objptr
1292c     2D 00 00 FF 
12930     D4 E5 85 F1 | 	sub	objptr, ##23508
12934     32 12 06 F6 | 	mov	arg01, #50
12938     00 35 B0 FD | 	call	#__system___waitms
1293c     2D 00 00 FF 
12940     D4 E5 05 F1 | 	add	objptr, ##23508
12944     F2 12 02 FB | 	rdlong	arg01, objptr
12948     2D 00 00 FF 
1294c     D4 E5 85 F1 | 	sub	objptr, ##23508
12950     14 12 06 F1 | 	add	arg01, #20
12954     20 00 80 FF 
12958     09 01 58 FC | 	wrword	##16384, arg01
1295c     30 2A B0 FD | 	call	#_usbnew_spin2_start
12960     2D 00 00 FF 
12964     C8 E5 05 F1 | 	add	objptr, ##23496
12968     F2 FA 61 FC | 	wrlong	result1, objptr
1296c                 | '   mouse_limits[0] := xlim
1296c     0F 00 00 FF 
12970     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
12974     01 00 80 FF 
12978     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
1297c                 | '   mouse_limits[1] := ylim
1297c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
12980     01 00 80 FF 
12984     FB 7E 68 FC | 	wrlong	##575, ptr__usbnew_spin2_dat__
12988     2D 00 00 FF 
1298c     BB E4 85 F1 | 	sub	objptr, ##23227
12990     F2 12 02 F6 | 	mov	arg01, objptr
12994     0D E5 85 F1 | 	sub	objptr, #269
12998     C4 12 06 F1 | 	add	arg01, #196
1299c                 | '   mouse_outptr := ptr
1299c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
129a0     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
129a4     0F 00 00 FF 
129a8     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
129ac     0E 00 00 FF 
129b0     9A EA 05 F1 | 	add	ptr__dat__, ##7322
129b4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
129b8     0E 00 00 FF 
129bc     9A EA 85 F1 | 	sub	ptr__dat__, ##7322
129c0     10 12 06 F6 | 	mov	arg01, #16
129c4     74 11 B0 FD | 	call	#_hg010b_spin2_setspriteptr
129c8     10 12 06 F6 | 	mov	arg01, #16
129cc     20 14 06 F6 | 	mov	arg02, #32
129d0     20 16 06 F6 | 	mov	arg03, #32
129d4     D8 11 B0 FD | 	call	#_hg010b_spin2_setspritesize
129d8     09 12 C6 F9 | 	decod	arg01, #9
129dc     20 15 06 F6 | 	mov	arg02, #288
129e0     68 2A B0 FD | 	call	#_usbnew_spin2_mouse_move
129e4     F2 1C 02 F6 | 	mov	arg06, objptr
129e8     50 00 00 FF 
129ec     AC E5 05 F1 | 	add	objptr, ##41388
129f0     F2 1A 02 F6 | 	mov	arg05, objptr
129f4     0D 1D 62 FC | 	wrlong	arg06, arg05
129f8     04 1A 06 F1 | 	add	arg05, #4
129fc     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
12a00     EF 14 02 F6 | 	mov	arg02, entryptr__
12a04     F2 1E 02 F6 | 	mov	local01, objptr
12a08     1E FA 05 F6 | 	mov	result1, #30
12a0c     28 1E 62 FD | 	setq	local01
12a10     0A FB F1 FC | 	coginit	result1, arg02 wc
12a14     01 FA 65 C6 |  if_b	neg	result1, #1
12a18     04 E4 85 F1 | 	sub	objptr, #4
12a1c     F2 FA 61 FC | 	wrlong	result1, objptr
12a20     01 00 00 FF 
12a24     90 E4 05 F1 | 	add	objptr, ##656
12a28     F2 00 68 FC | 	wrlong	#0, objptr
12a2c     24 00 00 FF 
12a30     40 E4 85 F1 | 	sub	objptr, ##18496
12a34     F2 04 68 FC | 	wrlong	#2, objptr
12a38     04 E4 05 F1 | 	add	objptr, #4
12a3c     F2 26 69 FC | 	wrlong	#147, objptr
12a40     04 E4 05 F1 | 	add	objptr, #4
12a44     F2 34 69 FC | 	wrlong	#154, objptr
12a48     04 E4 05 F1 | 	add	objptr, #4
12a4c     F2 08 68 FC | 	wrlong	#4, objptr
12a50     04 E4 85 F1 | 	sub	objptr, #4
12a54     F2 1C 02 FB | 	rdlong	arg06, objptr
12a58     14 E4 85 F1 | 	sub	objptr, #20
12a5c     F2 1C 62 FC | 	wrlong	arg06, objptr
12a60     04 E4 05 F1 | 	add	objptr, #4
12a64     F2 00 68 FC | 	wrlong	#0, objptr
12a68     04 E4 05 F1 | 	add	objptr, #4
12a6c     F2 00 68 FC | 	wrlong	#0, objptr
12a70     22 00 00 FF 
12a74     B0 E5 05 F1 | 	add	objptr, ##17840
12a78     F2 02 68 FC | 	wrlong	#1, objptr
12a7c     01 00 00 FF 
12a80     9C E4 05 F1 | 	add	objptr, ##668
12a84     F2 00 68 FC | 	wrlong	#0, objptr
12a88     01 00 00 FF 
12a8c     00 EA 05 F1 | 	add	ptr__dat__, ##512
12a90     08 E4 05 F1 | 	add	objptr, #8
12a94     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
12a98     04 E4 85 F1 | 	sub	objptr, #4
12a9c     03 00 80 FF 
12aa0     F2 28 69 FC | 	wrlong	##1684, objptr
12aa4     16 00 00 FF 
12aa8     1C E4 85 F1 | 	sub	objptr, ##11292
12aac     F2 18 68 FC | 	wrlong	#12, objptr
12ab0     3C 00 00 FF 
12ab4     28 E4 85 F1 | 	sub	objptr, ##30760
12ab8     01 00 00 FF 
12abc     00 EA 85 F1 | 	sub	ptr__dat__, ##512
12ac0     C8 EC BF FD | 	call	#_init_commands
12ac4     40 F8 BF FD | 	call	#_init_error_strings
12ac8     CC 77 BF FD | 	call	#_do_new
12acc     2E 00 00 FF 
12ad0     00 E4 05 F1 | 	add	objptr, ##23552
12ad4     F2 12 02 FB | 	rdlong	arg01, objptr
12ad8     04 E4 85 F1 | 	sub	objptr, #4
12adc     F2 14 02 FB | 	rdlong	arg02, objptr
12ae0     2D 00 00 FF 
12ae4     FC E5 85 F1 | 	sub	objptr, ##23548
12ae8     7C 1D B0 FD | 	call	#_hg010b_spin2_cls
12aec     2E 00 00 FF 
12af0     04 E4 05 F1 | 	add	objptr, ##23556
12af4     F2 12 02 FB | 	rdlong	arg01, objptr
12af8     2E 00 00 FF 
12afc     04 E4 85 F1 | 	sub	objptr, ##23556
12b00     7C 1C B0 FD | 	call	#_hg010b_spin2_setfontfamily
12b04                 | ' 
12b04                 | ' leading_spaces:=amount
12b04     01 00 00 FF 
12b08     B2 E4 05 F1 | 	add	objptr, ##690
12b0c     F2 04 68 FC | 	wrlong	#2, objptr
12b10     01 00 00 FF 
12b14     B2 E4 85 F1 | 	sub	objptr, ##690
12b18     2A 01 00 FF 
12b1c     2F 21 06 F6 | 	mov	local02, ##@LR__4400
12b20     3D 12 06 F6 | 	mov	arg01, #61
12b24     3C 14 06 F6 | 	mov	arg02, #60
12b28     3B 16 06 F6 | 	mov	arg03, #59
12b2c     3A 18 06 F6 | 	mov	arg04, #58
12b30     5C 75 B0 FD | 	call	#__system___vfs_open_sdcardx
12b34     FD 14 02 F6 | 	mov	arg02, result1
12b38     10 13 02 F6 | 	mov	arg01, local02
12b3c     D4 33 B0 FD | 	call	#__system___mount
12b40     2A 01 00 FF 
12b44     33 13 06 F6 | 	mov	arg01, ##@LR__4401
12b48     88 36 B0 FD | 	call	#__system___chdir
12b4c     2A 01 00 FF 
12b50     3B 21 06 F6 | 	mov	local02, ##@LR__4402
12b54     49 00 00 FF 
12b58     58 E4 05 F1 | 	add	objptr, ##37464
12b5c     F2 20 62 FC | 	wrlong	local02, objptr
12b60     1B 00 00 FF 
12b64     60 E4 85 F1 | 	sub	objptr, ##13920
12b68     F2 12 02 FB | 	rdlong	arg01, objptr
12b6c     2D 00 00 FF 
12b70     F8 E5 85 F1 | 	sub	objptr, ##23544
12b74     01 12 66 F0 | 	shl	arg01, #1
12b78     01 14 06 F6 | 	mov	arg02, #1
12b7c     40 1C B0 FD | 	call	#_hg010b_spin2_setcursorpos
12b80                 | ' 
12b80                 | ' init_commands
12b80                 | ' init_error_strings
12b80                 | ' do_new
12b80                 | ' 
12b80                 | ' 
12b80                 | ' cls(ink, paper)
12b80                 | ' 'v.setfontfamily(4) 				' use ST Mono font
12b80                 | ' v.setfontfamily(font) 				' use ST Mono font
12b80                 | ' v.setleadingspaces(2)
12b80                 | ' mount "/sd", _vfs_open_sdcard()
12b80                 | ' chdir "/sd/bas"
12b80                 | ' 
12b80                 | ' currentdir$="/sd/bas"
12b80                 | ' 
12b80                 | ' position 2*editor_spaces,1 : print ver$
12b80     00 12 06 F6 | 	mov	arg01, #0
12b84     70 84 B0 FD | 	call	#__system___getiolock_0372
12b88     FD 12 02 F6 | 	mov	arg01, result1
12b8c     B8 2F B0 FD | 	call	#__system___lockmem
12b90     10 00 00 FF 
12b94     10 EB 05 F1 | 	add	ptr__dat__, ##8464
12b98     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
12b9c     10 00 00 FF 
12ba0     10 EB 85 F1 | 	sub	ptr__dat__, ##8464
12ba4     00 12 06 F6 | 	mov	arg01, #0
12ba8     00 16 06 F6 | 	mov	arg03, #0
12bac     8C 3C B0 FD | 	call	#__system___basic_print_string
12bb0     00 12 06 F6 | 	mov	arg01, #0
12bb4     0A 14 06 F6 | 	mov	arg02, #10
12bb8     00 16 06 F6 | 	mov	arg03, #0
12bbc     24 3C B0 FD | 	call	#__system___basic_print_char
12bc0     00 12 06 F6 | 	mov	arg01, #0
12bc4     30 84 B0 FD | 	call	#__system___getiolock_0372
12bc8     FD 00 68 FC | 	wrlong	#0, result1
12bcc     F2 12 02 FB | 	rdlong	arg01, objptr
12bd0     00 14 06 F6 | 	mov	arg02, #0
12bd4     0A 16 06 F6 | 	mov	arg03, #10
12bd8     74 51 B0 FD | 	call	#__system__Number_S
12bdc     FD 12 02 F6 | 	mov	arg01, result1
12be0     2A 01 00 FF 
12be4     43 15 06 F6 | 	mov	arg02, ##@LR__4403
12be8     B8 2F B0 FD | 	call	#__system___string_concat
12bec     FD 20 02 F6 | 	mov	local02, result1
12bf0     50 00 00 FF 
12bf4     A0 E5 05 F1 | 	add	objptr, ##41376
12bf8     F2 20 62 FC | 	wrlong	local02, objptr
12bfc     50 00 00 FF 
12c00     A0 E5 85 F1 | 	sub	objptr, ##41376
12c04                 | ' free$=decuns$(v.buf_ptr)+" BASIC bytes free" : print free$
12c04     00 12 06 F6 | 	mov	arg01, #0
12c08     EC 83 B0 FD | 	call	#__system___getiolock_0372
12c0c     FD 12 02 F6 | 	mov	arg01, result1
12c10     34 2F B0 FD | 	call	#__system___lockmem
12c14     50 00 00 FF 
12c18     A0 E5 05 F1 | 	add	objptr, ##41376
12c1c     F2 14 02 FB | 	rdlong	arg02, objptr
12c20     50 00 00 FF 
12c24     A0 E5 85 F1 | 	sub	objptr, ##41376
12c28     00 12 06 F6 | 	mov	arg01, #0
12c2c     00 16 06 F6 | 	mov	arg03, #0
12c30     08 3C B0 FD | 	call	#__system___basic_print_string
12c34     00 12 06 F6 | 	mov	arg01, #0
12c38     0A 14 06 F6 | 	mov	arg02, #10
12c3c     00 16 06 F6 | 	mov	arg03, #0
12c40     A0 3B B0 FD | 	call	#__system___basic_print_char
12c44     00 12 06 F6 | 	mov	arg01, #0
12c48     AC 83 B0 FD | 	call	#__system___getiolock_0372
12c4c     FD 00 68 FC | 	wrlong	#0, result1
12c50     2D 00 00 FF 
12c54     F8 E5 05 F1 | 	add	objptr, ##23544
12c58     F2 12 02 FB | 	rdlong	arg01, objptr
12c5c     2D 00 00 FF 
12c60     F8 E5 85 F1 | 	sub	objptr, ##23544
12c64     01 12 66 F0 | 	shl	arg01, #1
12c68     04 14 06 F6 | 	mov	arg02, #4
12c6c     50 1B B0 FD | 	call	#_hg010b_spin2_setcursorpos
12c70                 | ' position 2*editor_spaces,4 : print "Ready"
12c70     00 12 06 F6 | 	mov	arg01, #0
12c74     80 83 B0 FD | 	call	#__system___getiolock_0372
12c78     FD 12 02 F6 | 	mov	arg01, result1
12c7c     C8 2E B0 FD | 	call	#__system___lockmem
12c80     2A 01 00 FF 
12c84     55 15 06 F6 | 	mov	arg02, ##@LR__4404
12c88     00 12 06 F6 | 	mov	arg01, #0
12c8c     00 16 06 F6 | 	mov	arg03, #0
12c90     A8 3B B0 FD | 	call	#__system___basic_print_string
12c94     FD 22 02 F6 | 	mov	local03, result1
12c98     00 12 06 F6 | 	mov	arg01, #0
12c9c     0A 14 06 F6 | 	mov	arg02, #10
12ca0     00 16 06 F6 | 	mov	arg03, #0
12ca4     3C 3B B0 FD | 	call	#__system___basic_print_char
12ca8     01 24 06 F6 | 	mov	local04, #1
12cac     00 12 06 F6 | 	mov	arg01, #0
12cb0     44 83 B0 FD | 	call	#__system___getiolock_0372
12cb4     FD 00 68 FC | 	wrlong	#0, result1
12cb8     00 26 06 F6 | 	mov	local05, #0
12cbc     00 14 06 F6 | 	mov	arg02, #0
12cc0     01 14 D6 F7 | 	test	arg02, #1 wc
12cc4     5A 4C 64 FD | 	drvc	#38
12cc8     01 14 D6 F7 | 	test	arg02, #1 wc
12ccc     5A 4E 64 FD | 	drvc	#39
12cd0                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
12cd0                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
12cd0                 | ' 
12cd0                 | ' '-------------------------------------------------------------------------------------------------------- 
12cd0                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
12cd0                 | ' '--------------------------------------------------------------------------------------------------------
12cd0                 | ' 
12cd0                 | ' do
12cd0                 | LR__1520
12cd0     01 12 06 F6 | 	mov	arg01, #1
12cd4     20 1B B0 FD | 	call	#_hg010b_spin2_waitvbl
12cd8     10 27 B0 FD | 	call	#_usbnew_spin2_get_key
12cdc     3C 00 00 FF 
12ce0     38 E4 05 F1 | 	add	objptr, ##30776
12ce4     F2 FA 61 FC | 	wrlong	result1, objptr
12ce8                 | '   return hkbd_led_rep
12ce8     13 00 00 FF 
12cec     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
12cf0     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
12cf4     13 00 00 FF 
12cf8     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
12cfc     16 00 00 FF 
12d00     14 E4 05 F1 | 	add	objptr, ##11284
12d04     F2 FA 61 FC | 	wrlong	result1, objptr
12d08                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(10): paula.stop(7)
12d08     16 00 00 FF 
12d0c     14 E4 85 F1 | 	sub	objptr, ##11284
12d10     F2 20 02 FB | 	rdlong	local02, objptr
12d14     3C 00 00 FF 
12d18     38 E4 85 F1 | 	sub	objptr, ##30776
12d1c     01 20 16 F2 | 	cmp	local02, #1 wc
12d20     BC 00 90 CD |  if_b	jmp	#LR__1521
12d24     3C 00 00 FF 
12d28     38 E4 05 F1 | 	add	objptr, ##30776
12d2c     F2 24 02 FB | 	rdlong	local04, objptr
12d30     3C 00 00 FF 
12d34     38 E4 85 F1 | 	sub	objptr, ##30776
12d38     12 23 02 F6 | 	mov	local03, local04
12d3c     04 22 16 F2 | 	cmp	local03, #4 wc
12d40     9C 00 90 3D |  if_ae	jmp	#LR__1521
12d44     50 00 00 FF 
12d48     A4 E5 05 F1 | 	add	objptr, ##41380
12d4c     F2 1E 02 FB | 	rdlong	local01, objptr
12d50     50 00 00 FF 
12d54     A4 E5 85 F1 | 	sub	objptr, ##41380
12d58     0F 27 02 F6 | 	mov	local05, local01
12d5c     01 26 0E F2 | 	cmp	local05, #1 wz
12d60     7C 00 90 5D |  if_ne	jmp	#LR__1521
12d64     04 00 00 FF 
12d68     94 EA 05 F1 | 	add	ptr__dat__, ##2196
12d6c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
12d70     04 00 00 FF 
12d74     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
12d78     56 00 00 FF 
12d7c     44 22 06 F6 | 	mov	local03, ##44100
12d80     0E 24 C6 F9 | 	decod	local04, #14
12d84     00 26 06 F6 | 	mov	local05, #0
12d88     03 00 00 FF 
12d8c     DE 1E 06 F6 | 	mov	local01, ##1758
12d90     07 12 06 F6 | 	mov	arg01, #7
12d94     56 00 00 FF 
12d98     44 16 06 F6 | 	mov	arg03, ##44100
12d9c     0E 18 C6 F9 | 	decod	arg04, #14
12da0     00 1A 06 F6 | 	mov	arg05, #0
12da4     03 00 00 FF 
12da8     DE 1C 06 F6 | 	mov	arg06, ##1758
12dac     0B 00 00 FF 
12db0     C0 E4 05 F1 | 	add	objptr, ##5824
12db4     5C 29 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
12db8     0B 00 00 FF 
12dbc     C0 E4 85 F1 | 	sub	objptr, ##5824
12dc0     0A 12 06 F6 | 	mov	arg01, #10
12dc4     74 30 B0 FD | 	call	#__system___waitms
12dc8     07 12 06 F6 | 	mov	arg01, #7
12dcc     0B 00 00 FF 
12dd0     C0 E4 05 F1 | 	add	objptr, ##5824
12dd4     8C 2A B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
12dd8     0B 00 00 FF 
12ddc     C0 E4 85 F1 | 	sub	objptr, ##5824
12de0                 | LR__1521
12de0                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
12de0     3C 00 00 FF 
12de4     38 E4 05 F1 | 	add	objptr, ##30776
12de8     F2 20 02 FB | 	rdlong	local02, objptr
12dec     3C 00 00 FF 
12df0     38 E4 85 F1 | 	sub	objptr, ##30776
12df4     04 20 16 F2 | 	cmp	local02, #4 wc
12df8     80 00 90 CD |  if_b	jmp	#LR__1522
12dfc     3C 00 00 FF 
12e00     38 E4 05 F1 | 	add	objptr, ##30776
12e04     F2 24 02 FB | 	rdlong	local04, objptr
12e08     3C 00 00 FF 
12e0c     38 E4 85 F1 | 	sub	objptr, ##30776
12e10     12 23 02 F6 | 	mov	local03, local04
12e14     00 00 40 FF 
12e18     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
12e1c     3C 00 00 CF 
12e20     38 E4 05 C1 |  if_b	add	objptr, ##30776
12e24     F2 1E 02 CB |  if_b	rdlong	local01, objptr
12e28     3C 00 00 CF 
12e2c     38 E4 85 C1 |  if_b	sub	objptr, ##30776
12e30     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
12e34     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
12e38     40 00 90 3D |  if_ae	jmp	#LR__1522
12e3c     3C 00 00 FF 
12e40     38 E4 05 F1 | 	add	objptr, ##30776
12e44     F2 20 02 FB | 	rdlong	local02, objptr
12e48     04 E4 05 F1 | 	add	objptr, #4
12e4c     F2 20 62 FC | 	wrlong	local02, objptr
12e50     16 00 00 FF 
12e54     14 E4 05 F1 | 	add	objptr, ##11284
12e58     F2 02 68 FC | 	wrlong	#1, objptr
12e5c     16 00 00 FF 
12e60     14 E4 85 F1 | 	sub	objptr, ##11284
12e64     F2 20 02 FB | 	rdlong	local02, objptr
12e68     16 00 00 FF 
12e6c     18 E4 05 F1 | 	add	objptr, ##11288
12e70     F2 20 62 FC | 	wrlong	local02, objptr
12e74     52 00 00 FF 
12e78     54 E4 85 F1 | 	sub	objptr, ##42068
12e7c                 | LR__1522
12e7c                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
12e7c     3C 00 00 FF 
12e80     38 E4 05 F1 | 	add	objptr, ##30776
12e84     F2 20 02 FB | 	rdlong	local02, objptr
12e88     3C 00 00 FF 
12e8c     38 E4 85 F1 | 	sub	objptr, ##30776
12e90     00 00 40 FF 
12e94     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
12e98     52 00 00 3F 
12e9c     58 E4 05 31 |  if_ae	add	objptr, ##42072
12ea0     F2 00 68 3C |  if_ae	wrlong	#0, objptr
12ea4     08 E4 85 31 |  if_ae	sub	objptr, #8
12ea8     F2 00 68 3C |  if_ae	wrlong	#0, objptr
12eac     52 00 00 3F 
12eb0     50 E4 85 31 |  if_ae	sub	objptr, ##42064
12eb4                 | ' if key=0 andalso rpt=1 then rptcnt+=1
12eb4     3C 00 00 FF 
12eb8     38 E4 05 F1 | 	add	objptr, ##30776
12ebc     F2 20 0A FB | 	rdlong	local02, objptr wz
12ec0     3C 00 00 FF 
12ec4     38 E4 85 F1 | 	sub	objptr, ##30776
12ec8     52 00 00 AF 
12ecc     50 E4 05 A1 |  if_e	add	objptr, ##42064
12ed0     F2 24 02 AB |  if_e	rdlong	local04, objptr
12ed4     52 00 00 AF 
12ed8     50 E4 85 A1 |  if_e	sub	objptr, ##42064
12edc     12 23 02 A6 |  if_e	mov	local03, local04
12ee0     01 22 0E A2 |  if_e	cmp	local03, #1 wz
12ee4     52 00 00 AF 
12ee8     58 E4 05 A1 |  if_e	add	objptr, ##42072
12eec     F2 20 02 AB |  if_e	rdlong	local02, objptr
12ef0     01 20 06 A1 |  if_e	add	local02, #1
12ef4     F2 20 62 AC |  if_e	wrlong	local02, objptr
12ef8     52 00 00 AF 
12efc     58 E4 85 A1 |  if_e	sub	objptr, ##42072
12f00                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
12f00     3C 00 00 FF 
12f04     38 E4 05 F1 | 	add	objptr, ##30776
12f08     F2 20 02 FB | 	rdlong	local02, objptr
12f0c     3C 00 00 FF 
12f10     38 E4 85 F1 | 	sub	objptr, ##30776
12f14     00 00 40 FF 
12f18     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
12f1c     44 00 90 3D |  if_ae	jmp	#LR__1524
12f20     52 00 00 FF 
12f24     58 E4 05 F1 | 	add	objptr, ##42072
12f28     F2 20 02 FB | 	rdlong	local02, objptr
12f2c     52 00 00 FF 
12f30     58 E4 85 F1 | 	sub	objptr, ##42072
12f34     19 20 0E F2 | 	cmp	local02, #25 wz
12f38     28 00 90 5D |  if_ne	jmp	#LR__1523
12f3c     3C 00 00 FF 
12f40     3C E4 05 F1 | 	add	objptr, ##30780
12f44     F2 20 02 FB | 	rdlong	local02, objptr
12f48     16 00 00 FF 
12f4c     18 E4 05 F1 | 	add	objptr, ##11288
12f50     F2 20 62 FC | 	wrlong	local02, objptr
12f54     04 E4 05 F1 | 	add	objptr, #4
12f58     F2 2A 68 FC | 	wrlong	#21, objptr
12f5c     52 00 00 FF 
12f60     58 E4 85 F1 | 	sub	objptr, ##42072
12f64                 | LR__1523
12f64                 | LR__1524
12f64                 | ' 
12f64                 | ' 
12f64                 | ' if key3<>0 then
12f64     52 00 00 FF 
12f68     54 E4 05 F1 | 	add	objptr, ##42068
12f6c     F2 28 0A FB | 	rdlong	local06, objptr wz
12f70     52 00 00 FF 
12f74     54 E4 85 F1 | 	sub	objptr, ##42068
12f78     54 FD 9F AD |  if_e	jmp	#LR__1520
12f7c                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len) 
12f7c     50 00 00 FF 
12f80     A4 E5 05 F1 | 	add	objptr, ##41380
12f84     F2 20 02 FB | 	rdlong	local02, objptr
12f88     50 00 00 FF 
12f8c     A4 E5 85 F1 | 	sub	objptr, ##41380
12f90     01 20 0E F2 | 	cmp	local02, #1 wz
12f94     50 00 90 5D |  if_ne	jmp	#LR__1525
12f98     52 00 00 FF 
12f9c     48 E4 05 F1 | 	add	objptr, ##42056
12fa0     F2 14 02 FB | 	rdlong	arg02, objptr
12fa4     56 00 00 FF 
12fa8     44 22 06 F6 | 	mov	local03, ##44100
12fac     0E 24 C6 F9 | 	decod	local04, #14
12fb0     04 E4 85 F1 | 	sub	objptr, #4
12fb4     F2 26 02 FB | 	rdlong	local05, objptr
12fb8     01 1E 66 F6 | 	neg	local01, #1
12fbc     07 12 06 F6 | 	mov	arg01, #7
12fc0     56 00 00 FF 
12fc4     44 16 06 F6 | 	mov	arg03, ##44100
12fc8     0E 18 C6 F9 | 	decod	arg04, #14
12fcc     13 1B 02 F6 | 	mov	arg05, local05
12fd0     01 1C 66 F6 | 	neg	arg06, #1
12fd4     46 00 00 FF 
12fd8     84 E5 85 F1 | 	sub	objptr, ##36228
12fdc     34 27 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
12fe0     0B 00 00 FF 
12fe4     C0 E4 85 F1 | 	sub	objptr, ##5824
12fe8                 | LR__1525
12fe8     52 00 00 FF 
12fec     54 E4 05 F1 | 	add	objptr, ##42068
12ff0     F2 12 02 FB | 	rdlong	arg01, objptr
12ff4     52 00 00 FF 
12ff8     54 E4 85 F1 | 	sub	objptr, ##42068
12ffc     3C F8 BF FD | 	call	#_scantochar
13000     52 00 00 FF 
13004     5C E4 05 F1 | 	add	objptr, ##42076
13008     F2 FA 61 FC | 	wrlong	result1, objptr
1300c                 | '   if leds and 2 = 2 then 
1300c     10 E4 85 F1 | 	sub	objptr, #16
13010     F2 20 0A FB | 	rdlong	local02, objptr wz
13014     52 00 00 FF 
13018     4C E4 85 F1 | 	sub	objptr, ##42060
1301c     68 01 90 AD |  if_e	jmp	#LR__1533
13020                 | '     if key4>96 andalso key4<123 then
13020     52 00 00 FF 
13024     5C E4 05 F1 | 	add	objptr, ##42076
13028     F2 20 02 FB | 	rdlong	local02, objptr
1302c     52 00 00 FF 
13030     5C E4 85 F1 | 	sub	objptr, ##42076
13034     61 20 56 F2 | 	cmps	local02, #97 wc
13038     40 00 90 CD |  if_b	jmp	#LR__1526
1303c     52 00 00 FF 
13040     5C E4 05 F1 | 	add	objptr, ##42076
13044     F2 24 02 FB | 	rdlong	local04, objptr
13048     52 00 00 FF 
1304c     5C E4 85 F1 | 	sub	objptr, ##42076
13050     12 23 02 F6 | 	mov	local03, local04
13054     7B 22 56 F2 | 	cmps	local03, #123 wc
13058     20 00 90 3D |  if_ae	jmp	#LR__1526
1305c     52 00 00 FF 
13060     5C E4 05 F1 | 	add	objptr, ##42076
13064     F2 20 02 FB | 	rdlong	local02, objptr
13068     20 20 86 F1 | 	sub	local02, #32
1306c     F2 20 62 FC | 	wrlong	local02, objptr
13070     52 00 00 FF 
13074     5C E4 85 F1 | 	sub	objptr, ##42076
13078     0C 01 90 FD | 	jmp	#LR__1532
1307c                 | LR__1526
1307c     52 00 00 FF 
13080     5C E4 05 F1 | 	add	objptr, ##42076
13084     F2 20 02 FB | 	rdlong	local02, objptr
13088     52 00 00 FF 
1308c     5C E4 85 F1 | 	sub	objptr, ##42076
13090     41 20 56 F2 | 	cmps	local02, #65 wc
13094     40 00 90 CD |  if_b	jmp	#LR__1527
13098     52 00 00 FF 
1309c     5C E4 05 F1 | 	add	objptr, ##42076
130a0     F2 24 02 FB | 	rdlong	local04, objptr
130a4     52 00 00 FF 
130a8     5C E4 85 F1 | 	sub	objptr, ##42076
130ac     12 23 02 F6 | 	mov	local03, local04
130b0     5B 22 56 F2 | 	cmps	local03, #91 wc
130b4     20 00 90 3D |  if_ae	jmp	#LR__1527
130b8     52 00 00 FF 
130bc     5C E4 05 F1 | 	add	objptr, ##42076
130c0     F2 20 02 FB | 	rdlong	local02, objptr
130c4     20 20 06 F1 | 	add	local02, #32
130c8     F2 20 62 FC | 	wrlong	local02, objptr
130cc     52 00 00 FF 
130d0     5C E4 85 F1 | 	sub	objptr, ##42076
130d4     B0 00 90 FD | 	jmp	#LR__1531
130d8                 | LR__1527
130d8     52 00 00 FF 
130dc     5C E4 05 F1 | 	add	objptr, ##42076
130e0     F2 20 02 FB | 	rdlong	local02, objptr
130e4     52 00 00 FF 
130e8     5C E4 85 F1 | 	sub	objptr, ##42076
130ec     17 20 56 F2 | 	cmps	local02, #23 wc
130f0     40 00 90 CD |  if_b	jmp	#LR__1528
130f4     52 00 00 FF 
130f8     5C E4 05 F1 | 	add	objptr, ##42076
130fc     F2 24 02 FB | 	rdlong	local04, objptr
13100     52 00 00 FF 
13104     5C E4 85 F1 | 	sub	objptr, ##42076
13108     12 23 02 F6 | 	mov	local03, local04
1310c     20 22 56 F2 | 	cmps	local03, #32 wc
13110     20 00 90 3D |  if_ae	jmp	#LR__1528
13114     52 00 00 FF 
13118     5C E4 05 F1 | 	add	objptr, ##42076
1311c     F2 20 02 FB | 	rdlong	local02, objptr
13120     09 20 86 F1 | 	sub	local02, #9
13124     F2 20 62 FC | 	wrlong	local02, objptr
13128     52 00 00 FF 
1312c     5C E4 85 F1 | 	sub	objptr, ##42076
13130     54 00 90 FD | 	jmp	#LR__1530
13134                 | LR__1528
13134     52 00 00 FF 
13138     5C E4 05 F1 | 	add	objptr, ##42076
1313c     F2 20 02 FB | 	rdlong	local02, objptr
13140     52 00 00 FF 
13144     5C E4 85 F1 | 	sub	objptr, ##42076
13148     0E 20 56 F2 | 	cmps	local02, #14 wc
1314c     38 00 90 CD |  if_b	jmp	#LR__1529
13150     52 00 00 FF 
13154     5C E4 05 F1 | 	add	objptr, ##42076
13158     F2 24 02 FB | 	rdlong	local04, objptr
1315c     52 00 00 FF 
13160     5C E4 85 F1 | 	sub	objptr, ##42076
13164     12 23 02 F6 | 	mov	local03, local04
13168     17 22 56 F2 | 	cmps	local03, #23 wc
1316c     52 00 00 CF 
13170     5C E4 05 C1 |  if_b	add	objptr, ##42076
13174     F2 20 02 CB |  if_b	rdlong	local02, objptr
13178     27 20 06 C1 |  if_b	add	local02, #39
1317c     F2 20 62 CC |  if_b	wrlong	local02, objptr
13180     52 00 00 CF 
13184     5C E4 85 C1 |  if_b	sub	objptr, ##42076
13188                 | LR__1529
13188                 | LR__1530
13188                 | LR__1531
13188                 | LR__1532
13188                 | LR__1533
13188                 | '  
13188                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then line$+=chr$(key4): v.putchar(key4)
13188     52 00 00 FF 
1318c     5C E4 05 F1 | 	add	objptr, ##42076
13190     F2 20 02 FB | 	rdlong	local02, objptr
13194     52 00 00 FF 
13198     5C E4 85 F1 | 	sub	objptr, ##42076
1319c     01 20 56 F2 | 	cmps	local02, #1 wc
131a0     90 00 90 CD |  if_b	jmp	#LR__1534
131a4     52 00 00 FF 
131a8     5C E4 05 F1 | 	add	objptr, ##42076
131ac     F2 24 02 FB | 	rdlong	local04, objptr
131b0     52 00 00 FF 
131b4     5C E4 85 F1 | 	sub	objptr, ##42076
131b8     12 23 02 F6 | 	mov	local03, local04
131bc     7F 22 56 F2 | 	cmps	local03, #127 wc
131c0     38 E4 05 C1 |  if_b	add	objptr, #56
131c4     F2 1E E2 CA |  if_b	rdword	local01, objptr
131c8     38 E4 85 C1 |  if_b	sub	objptr, #56
131cc     0F 27 32 C9 |  if_b	getword	local05, local01, #0
131d0     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
131d4     5C 00 90 3D |  if_ae	jmp	#LR__1534
131d8     52 00 00 FF 
131dc     5C E4 05 F1 | 	add	objptr, ##42076
131e0     F2 12 02 FB | 	rdlong	arg01, objptr
131e4     52 00 00 FF 
131e8     5C E4 85 F1 | 	sub	objptr, ##42076
131ec     2C 4B B0 FD | 	call	#__system__Chr_S
131f0     FD 2A 02 F6 | 	mov	local07, result1
131f4     2D 00 00 FF 
131f8     E0 E5 05 F1 | 	add	objptr, ##23520
131fc     F2 12 02 FB | 	rdlong	arg01, objptr
13200     2D 00 00 FF 
13204     E0 E5 85 F1 | 	sub	objptr, ##23520
13208     15 15 02 F6 | 	mov	arg02, local07
1320c     94 29 B0 FD | 	call	#__system___string_concat
13210     2D 00 00 FF 
13214     E0 E5 05 F1 | 	add	objptr, ##23520
13218     F2 FA 61 FC | 	wrlong	result1, objptr
1321c     24 00 00 FF 
13220     7C E4 05 F1 | 	add	objptr, ##18556
13224     F2 12 02 FB | 	rdlong	arg01, objptr
13228     52 00 00 FF 
1322c     5C E4 85 F1 | 	sub	objptr, ##42076
13230     D4 16 B0 FD | 	call	#_hg010b_spin2_putchar
13234                 | LR__1534
13234                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(7) 'end of line reached
13234     52 00 00 FF 
13238     5C E4 05 F1 | 	add	objptr, ##42076
1323c     F2 20 02 FB | 	rdlong	local02, objptr
13240     52 00 00 FF 
13244     5C E4 85 F1 | 	sub	objptr, ##42076
13248     01 20 56 F2 | 	cmps	local02, #1 wc
1324c     D0 00 90 CD |  if_b	jmp	#LR__1535
13250     52 00 00 FF 
13254     5C E4 05 F1 | 	add	objptr, ##42076
13258     F2 24 02 FB | 	rdlong	local04, objptr
1325c     52 00 00 FF 
13260     5C E4 85 F1 | 	sub	objptr, ##42076
13264     12 23 02 F6 | 	mov	local03, local04
13268     7F 22 56 F2 | 	cmps	local03, #127 wc
1326c     B0 00 90 3D |  if_ae	jmp	#LR__1535
13270     38 E4 05 F1 | 	add	objptr, #56
13274     F2 1E E2 FA | 	rdword	local01, objptr
13278     38 E4 85 F1 | 	sub	objptr, #56
1327c     0F 27 32 F9 | 	getword	local05, local01, #0
13280     FE 26 0E F2 | 	cmp	local05, #254 wz
13284     50 00 00 AF 
13288     A4 E5 05 A1 |  if_e	add	objptr, ##41380
1328c     F2 2C 02 AB |  if_e	rdlong	local08, objptr
13290     50 00 00 AF 
13294     A4 E5 85 A1 |  if_e	sub	objptr, ##41380
13298     16 2F 02 A6 |  if_e	mov	local09, local08
1329c     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
132a0     7C 00 90 5D |  if_ne	jmp	#LR__1535
132a4     04 00 00 FF 
132a8     94 EA 05 F1 | 	add	ptr__dat__, ##2196
132ac     F5 14 02 F6 | 	mov	arg02, ptr__dat__
132b0     04 00 00 FF 
132b4     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
132b8     56 00 00 FF 
132bc     44 22 06 F6 | 	mov	local03, ##44100
132c0     0E 24 C6 F9 | 	decod	local04, #14
132c4     00 26 06 F6 | 	mov	local05, #0
132c8     03 00 00 FF 
132cc     DE 1E 06 F6 | 	mov	local01, ##1758
132d0     07 12 06 F6 | 	mov	arg01, #7
132d4     56 00 00 FF 
132d8     44 16 06 F6 | 	mov	arg03, ##44100
132dc     0E 18 C6 F9 | 	decod	arg04, #14
132e0     00 1A 06 F6 | 	mov	arg05, #0
132e4     03 00 00 FF 
132e8     DE 1C 06 F6 | 	mov	arg06, ##1758
132ec     0B 00 00 FF 
132f0     C0 E4 05 F1 | 	add	objptr, ##5824
132f4     1C 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
132f8     0B 00 00 FF 
132fc     C0 E4 85 F1 | 	sub	objptr, ##5824
13300     2C 13 06 F6 | 	mov	arg01, #300
13304     34 2B B0 FD | 	call	#__system___waitms
13308     07 12 06 F6 | 	mov	arg01, #7
1330c     0B 00 00 FF 
13310     C0 E4 05 F1 | 	add	objptr, ##5824
13314     4C 25 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
13318     0B 00 00 FF 
1331c     C0 E4 85 F1 | 	sub	objptr, ##5824
13320                 | LR__1535
13320                 | '  
13320                 | '   'tab
13320                 | '   if (key3 and 255) = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
13320     52 00 00 FF 
13324     54 E4 05 F1 | 	add	objptr, ##42068
13328     F2 20 02 FB | 	rdlong	local02, objptr
1332c     52 00 00 FF 
13330     54 E4 85 F1 | 	sub	objptr, ##42068
13334     10 21 E2 F8 | 	getbyte	local02, local02, #0
13338     2B 20 0E F2 | 	cmp	local02, #43 wz
1333c     B4 00 90 5D |  if_ne	jmp	#LR__1536
13340     38 E4 05 F1 | 	add	objptr, #56
13344     F2 24 E2 FA | 	rdword	local04, objptr
13348     38 E4 85 F1 | 	sub	objptr, #56
1334c     12 23 32 F9 | 	getword	local03, local04, #0
13350     F0 22 16 F2 | 	cmp	local03, #240 wc
13354     9C 00 90 CD |  if_b	jmp	#LR__1536
13358     50 00 00 FF 
1335c     A4 E5 05 F1 | 	add	objptr, ##41380
13360     F2 1E 02 FB | 	rdlong	local01, objptr
13364     50 00 00 FF 
13368     A4 E5 85 F1 | 	sub	objptr, ##41380
1336c     0F 27 02 F6 | 	mov	local05, local01
13370     01 26 0E F2 | 	cmp	local05, #1 wz
13374     7C 00 90 5D |  if_ne	jmp	#LR__1536
13378     04 00 00 FF 
1337c     94 EA 05 F1 | 	add	ptr__dat__, ##2196
13380     F5 14 02 F6 | 	mov	arg02, ptr__dat__
13384     04 00 00 FF 
13388     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
1338c     56 00 00 FF 
13390     44 22 06 F6 | 	mov	local03, ##44100
13394     0E 24 C6 F9 | 	decod	local04, #14
13398     00 26 06 F6 | 	mov	local05, #0
1339c     03 00 00 FF 
133a0     DE 1E 06 F6 | 	mov	local01, ##1758
133a4     00 12 06 F6 | 	mov	arg01, #0
133a8     56 00 00 FF 
133ac     44 16 06 F6 | 	mov	arg03, ##44100
133b0     0E 18 C6 F9 | 	decod	arg04, #14
133b4     00 1A 06 F6 | 	mov	arg05, #0
133b8     03 00 00 FF 
133bc     DE 1C 06 F6 | 	mov	arg06, ##1758
133c0     0B 00 00 FF 
133c4     C0 E4 05 F1 | 	add	objptr, ##5824
133c8     48 23 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
133cc     0B 00 00 FF 
133d0     C0 E4 85 F1 | 	sub	objptr, ##5824
133d4     2C 13 06 F6 | 	mov	arg01, #300
133d8     60 2A B0 FD | 	call	#__system___waitms
133dc     00 12 06 F6 | 	mov	arg01, #0
133e0     0B 00 00 FF 
133e4     C0 E4 05 F1 | 	add	objptr, ##5824
133e8     78 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
133ec     0B 00 00 FF 
133f0     C0 E4 85 F1 | 	sub	objptr, ##5824
133f4                 | LR__1536
133f4                 | '   if (key3 and 255) = 43 andalso v.cursor_x<240 then let x=(v.cursor_x mod 16)/2: for i=x to 7: line$+=" " :  v.write (" ") : next i  
133f4     52 00 00 FF 
133f8     54 E4 05 F1 | 	add	objptr, ##42068
133fc     F2 20 02 FB | 	rdlong	local02, objptr
13400     52 00 00 FF 
13404     54 E4 85 F1 | 	sub	objptr, ##42068
13408     10 21 E2 F8 | 	getbyte	local02, local02, #0
1340c     2B 20 0E F2 | 	cmp	local02, #43 wz
13410     AC 00 90 5D |  if_ne	jmp	#LR__1539
13414     38 E4 05 F1 | 	add	objptr, #56
13418     F2 24 E2 FA | 	rdword	local04, objptr
1341c     38 E4 85 F1 | 	sub	objptr, #56
13420     12 23 32 F9 | 	getword	local03, local04, #0
13424     F0 22 16 F2 | 	cmp	local03, #240 wc
13428     94 00 90 3D |  if_ae	jmp	#LR__1539
1342c     38 E4 05 F1 | 	add	objptr, #56
13430     F2 20 E2 FA | 	rdword	local02, objptr
13434     10 23 52 F6 | 	abs	local03, local02 wc
13438     11 23 42 F8 | 	getnib	local03, local03, #0
1343c     11 23 82 F6 | 	negc	local03, local03
13440     11 25 52 F6 | 	abs	local04, local03 wc
13444     01 24 46 F0 | 	shr	local04, #1
13448     12 25 82 F6 | 	negc	local04, local04
1344c     52 00 00 FF 
13450     28 E4 05 F1 | 	add	objptr, ##42024
13454     F2 24 62 FC | 	wrlong	local04, objptr
13458     12 31 02 F6 | 	mov	local10, local04
1345c     52 00 00 FF 
13460     60 E4 85 F1 | 	sub	objptr, ##42080
13464                 | LR__1537
13464     08 30 56 F2 | 	cmps	local10, #8 wc
13468     54 00 90 3D |  if_ae	jmp	#LR__1538
1346c     2D 00 00 FF 
13470     E0 E5 05 F1 | 	add	objptr, ##23520
13474     F2 12 02 FB | 	rdlong	arg01, objptr
13478     2D 00 00 FF 
1347c     E0 E5 85 F1 | 	sub	objptr, ##23520
13480     2A 01 00 FF 
13484     5B 25 06 F6 | 	mov	local04, ##@LR__4405
13488     12 15 02 F6 | 	mov	arg02, local04
1348c     14 27 B0 FD | 	call	#__system___string_concat
13490     2D 00 00 FF 
13494     E0 E5 05 F1 | 	add	objptr, ##23520
13498     F2 FA 61 FC | 	wrlong	result1, objptr
1349c     2D 00 00 FF 
134a0     E0 E5 85 F1 | 	sub	objptr, ##23520
134a4     2A 01 00 FF 
134a8     5D 13 06 F6 | 	mov	arg01, ##@LR__4406
134ac     74 16 B0 FD | 	call	#_hg010b_spin2_write
134b0     18 23 02 F6 | 	mov	local03, local10
134b4     01 22 06 F1 | 	add	local03, #1
134b8     11 31 02 F6 | 	mov	local10, local03
134bc     A4 FF 9F FD | 	jmp	#LR__1537
134c0                 | LR__1538
134c0                 | LR__1539
134c0                 | '  
134c0                 | '   'backspace
134c0                 | '   if (key3 and 255) = 42 then 
134c0     52 00 00 FF 
134c4     54 E4 05 F1 | 	add	objptr, ##42068
134c8     F2 20 02 FB | 	rdlong	local02, objptr
134cc     52 00 00 FF 
134d0     54 E4 85 F1 | 	sub	objptr, ##42068
134d4     10 21 E2 F8 | 	getbyte	local02, local02, #0
134d8     2A 20 0E F2 | 	cmp	local02, #42 wz
134dc     D4 00 90 5D |  if_ne	jmp	#LR__1544
134e0                 | '       if v.cursor_x>4 then 
134e0     38 E4 05 F1 | 	add	objptr, #56
134e4     F2 20 E2 FA | 	rdword	local02, objptr
134e8     38 E4 85 F1 | 	sub	objptr, #56
134ec     05 20 16 F2 | 	cmp	local02, #5 wc
134f0     9C 00 90 CD |  if_b	jmp	#LR__1542
134f4     2D 00 00 FF 
134f8     E0 E5 05 F1 | 	add	objptr, ##23520
134fc     F2 26 02 FB | 	rdlong	local05, objptr
13500     2D 00 00 FF 
13504     E0 E5 85 F1 | 	sub	objptr, ##23520
13508     13 13 02 F6 | 	mov	arg01, local05
1350c     09 33 02 F6 | 	mov	local11, arg01
13510     97 06 48 FB | 	callpa	#(@LR__1541-@LR__1540)>>2,fcache_load_ptr_
13514                 | LR__1540
13514     19 FB C9 FA | 	rdbyte	result1, local11 wz
13518     01 32 06 51 |  if_ne	add	local11, #1
1351c     F4 FF 9F 5D |  if_ne	jmp	#LR__1540
13520                 | LR__1541
13520     09 33 82 F1 | 	sub	local11, arg01
13524     19 15 02 F6 | 	mov	arg02, local11
13528     01 14 86 F1 | 	sub	arg02, #1
1352c     13 13 02 F6 | 	mov	arg01, local05
13530     24 46 B0 FD | 	call	#__system__Left_S
13534     2D 00 00 FF 
13538     E0 E5 05 F1 | 	add	objptr, ##23520
1353c     F2 FA 61 FC | 	wrlong	result1, objptr
13540     2D 00 00 FF 
13544     A8 E5 85 F1 | 	sub	objptr, ##23464
13548     F2 12 E2 FA | 	rdword	arg01, objptr
1354c     02 12 86 F1 | 	sub	arg01, #2
13550     02 E4 05 F1 | 	add	objptr, #2
13554     F2 14 C2 FA | 	rdbyte	arg02, objptr
13558     3A E4 85 F1 | 	sub	objptr, #58
1355c     60 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
13560     20 12 06 F6 | 	mov	arg01, #32
13564     A0 13 B0 FD | 	call	#_hg010b_spin2_putchar
13568     38 E4 05 F1 | 	add	objptr, #56
1356c     F2 12 E2 FA | 	rdword	arg01, objptr
13570     02 12 86 F1 | 	sub	arg01, #2
13574     02 E4 05 F1 | 	add	objptr, #2
13578     F2 24 C2 FA | 	rdbyte	local04, objptr
1357c     3A E4 85 F1 | 	sub	objptr, #58
13580     12 23 E2 F8 | 	getbyte	local03, local04, #0
13584     11 15 02 F6 | 	mov	arg02, local03
13588     34 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1358c     24 00 90 FD | 	jmp	#LR__1543
13590                 | LR__1542
13590     2A 01 00 FF 
13594     5F 21 06 F6 | 	mov	local02, ##@LR__4407
13598     2D 00 00 FF 
1359c     E0 E5 05 F1 | 	add	objptr, ##23520
135a0     F2 20 62 FC | 	wrlong	local02, objptr
135a4     2D 00 00 FF 
135a8     A8 E5 85 F1 | 	sub	objptr, ##23464
135ac     F2 08 58 FC | 	wrword	#4, objptr
135b0     38 E4 85 F1 | 	sub	objptr, #56
135b4                 | LR__1543
135b4                 | LR__1544
135b4                 | '    
135b4                 | '  ' To do: arrows and DEL; use textscreen array to implement fullscreen editing
135b4                 | '  
135b4                 | '   if key4=key_enter then 
135b4     52 00 00 FF 
135b8     5C E4 05 F1 | 	add	objptr, ##42076
135bc     F2 28 02 FB | 	rdlong	local06, objptr
135c0     52 00 00 FF 
135c4     5C E4 85 F1 | 	sub	objptr, ##42076
135c8     8D 28 0E F2 | 	cmp	local06, #141 wz
135cc     50 00 90 5D |  if_ne	jmp	#LR__1545
135d0     B0 16 B0 FD | 	call	#_hg010b_spin2_crlf
135d4     44 D4 BE FD | 	call	#_interpret
135d8     2A 01 00 FF 
135dc     60 21 06 F6 | 	mov	local02, ##@LR__4408
135e0     2D 00 00 FF 
135e4     E0 E5 05 F1 | 	add	objptr, ##23520
135e8     F2 20 62 FC | 	wrlong	local02, objptr
135ec     1A FA 61 FD | 	getct	result1
135f0     24 00 00 FF 
135f4     84 E4 05 F1 | 	add	objptr, ##18564
135f8     F2 24 02 FB | 	rdlong	local04, objptr
135fc     12 23 02 F6 | 	mov	local03, local04
13600     11 FB 81 F1 | 	sub	result1, local03
13604     F2 FA 61 FC | 	wrlong	result1, objptr
13608     14 E4 85 F1 | 	sub	objptr, #20
1360c     F2 00 68 FC | 	wrlong	#0, objptr
13610     08 E4 05 F1 | 	add	objptr, #8
13614     F2 00 68 FC | 	wrlong	#0, objptr
13618     52 00 00 FF 
1361c     58 E4 85 F1 | 	sub	objptr, ##42072
13620                 | LR__1545
13620     52 00 00 FF 
13624     54 E4 05 F1 | 	add	objptr, ##42068
13628     F2 00 68 FC | 	wrlong	#0, objptr
1362c     52 00 00 FF 
13630     54 E4 85 F1 | 	sub	objptr, ##42068
13634     98 F6 9F FD | 	jmp	#LR__1520
13638     A7 F0 03 F6 | 	mov	ptra, fp
1363c     B2 00 A0 FD | 	call	#popregs_
13640                 | _program_ret
13640     2D 00 64 FD | 	ret
13644                 | 
13644                 | ' '' this is not a main program.
13644                 | ' 
13644                 | ' '****************************************************************************************************************
13644                 | ' '                                                                                                             	*
13644                 | ' 'Start the driver with graphics mode 'mode' at pins 'base'                            		rev 20220320 	*
13644                 | ' '                                                                                                            	*
13644                 | ' ' mode - mode #, see below											*
13644                 | ' ' base - HDMI base pin												*
13644                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
13644                 | ' '														*
13644                 | ' '' mode number: :  %p_tn_bb_cc_vv_hh										*
13644                 | ' '' set bit #15 for custom timings														*
13644                 | ' '' p - 1 - psram, 0 - hub											*
13644                 | ' '' t - 1 - graphics, 0 - text											*
13644                 | ' '' n - 1 - 60 Hz,  0 - 50 Hz 											*
13644                 | ' '' hh - h.zoom, vv-v.zoom, cc-color depth if graphic, unused in text,						*
13644                 | ' '' bb - borders, 00-wide, 01 medium, 10 no border, 11 no border, extended resolution (1024x576/896x496)		*
13644                 | ' '														*
13644                 | ' '****************************************************************************************************************
13644                 | ' 
13644                 | ' pub start(base,mb):result |i
13644                 | _hg010b_spin2_start
13644                 | ' 
13644                 | ' '--------------------------- initialize pointers and variables
13644                 | ' 
13644                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
13644     30 E4 05 F1 | 	add	objptr, #48
13648     F2 FA 01 F6 | 	mov	result1, objptr
1364c     28 E4 85 F1 | 	sub	objptr, #40
13650     F2 FA 61 FC | 	wrlong	result1, objptr
13654                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
13654                 | ' hdmibase:=base							' HDMI base pin, 8*n
13654     18 E4 05 F1 | 	add	objptr, #24
13658     F2 12 62 FC | 	wrlong	arg01, objptr
1365c                 | ' mailbox_ptr:=mb		
1365c     04 E4 05 F1 | 	add	objptr, #4
13660     F2 14 62 FC | 	wrlong	arg02, objptr
13664                 | ' mailbox0:=mb				' PSRAM mailbox pointer
13664     C1 E5 05 F1 | 	add	objptr, #449
13668     F2 14 62 FC | 	wrlong	arg02, objptr
1366c                 | ' sprite_ptr:=@spr1ptr
1366c     D8 E4 85 F1 | 	sub	objptr, #216
13670     F2 FA 01 F6 | 	mov	result1, objptr
13674     E5 E4 85 F1 | 	sub	objptr, #229
13678     F2 FA 61 FC | 	wrlong	result1, objptr
1367c                 | ' 
1367c                 | ' 		'
1367c                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
1367c     E5 E4 05 F1 | 	add	objptr, #229
13680     F2 FA 01 FB | 	rdlong	result1, objptr
13684     D0 FA 05 F1 | 	add	result1, #208
13688     FD 10 58 FC | 	wrword	#8, result1
1368c                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
1368c     F2 16 02 FB | 	rdlong	arg03, objptr
13690     D2 16 06 F1 | 	add	arg03, #210
13694     0B 21 58 FC | 	wrword	#16, arg03
13698                 | ' leading_spaces:=0				'
13698     A5 E5 05 F1 | 	add	objptr, #421
1369c     F2 00 68 FC | 	wrlong	#0, objptr
136a0                 | ' 
136a0                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
136a0     99 E4 85 F1 | 	sub	objptr, #153
136a4     00 00 A0 FF 
136a8     F2 0E 68 FC | 	wrlong	##1073741831, objptr
136ac                 | ' emptydl[1]:=0
136ac     04 E4 05 F1 | 	add	objptr, #4
136b0     F2 00 68 FC | 	wrlong	#0, objptr
136b4                 | ' 
136b4                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
136b4                 | ' 
136b4                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
136b4     28 E5 85 F1 | 	sub	objptr, #296
136b8     F2 02 68 FC | 	wrlong	#1, objptr
136bc                 | ' if s_debug<>0
136bc                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
136bc     20 00 80 FF 
136c0     F2 00 68 FC | 	wrlong	##16384, objptr
136c4     F5 E4 85 F1 | 	sub	objptr, #245
136c8                 | ' setmode()							' set the mode, see below
136c8     A4 01 B0 FD | 	call	#_hg010b_spin2_setmode
136cc                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
136cc     45 E4 05 F1 | 	add	objptr, #69
136d0     F2 FA 01 F6 | 	mov	result1, objptr
136d4     35 E4 85 F1 | 	sub	objptr, #53
136d8     F2 FA 61 FC | 	wrlong	result1, objptr
136dc                 | ' cursor_ptr:=@cursor_x						
136dc     28 E4 05 F1 | 	add	objptr, #40
136e0     F2 16 02 F6 | 	mov	arg03, objptr
136e4     2C E4 85 F1 | 	sub	objptr, #44
136e8     F2 16 62 FC | 	wrlong	arg03, objptr
136ec                 | ' fontnum:=0  							' start with a PC type font 
136ec     55 E4 05 F1 | 	add	objptr, #85
136f0     F2 00 68 FC | 	wrlong	#0, objptr
136f4                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
136f4     1C E4 05 F1 | 	add	objptr, #28
136f8     F2 12 02 F6 | 	mov	arg01, objptr
136fc     7D E4 85 F1 | 	sub	objptr, #125
13700     10 00 00 FF 
13704     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
13708     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1370c     10 00 00 FF 
13710     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
13714     10 16 06 F6 | 	mov	arg03, #16
13718     4C 23 B0 FD | 	call	#__system____builtin_memmove
1371c                 | ' leading_spaces:=0
1371c     01 00 00 FF 
13720     B2 E4 05 F1 | 	add	objptr, ##690
13724     F2 00 68 FC | 	wrlong	#0, objptr
13728     01 00 00 FF 
1372c     B2 E4 85 F1 | 	sub	objptr, ##690
13730                 | ' '---------------------------- initialize a cursor (MSDOS type)
13730                 | ' 
13730                 | ' initcursor(154)
13730     9A 12 06 F6 | 	mov	arg01, #154
13734     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
13738                 | ' 
13738                 | ' '---------------------------- start the cog
13738                 | ' 
13738                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
13738     10 00 00 FF 
1373c     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
13740     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
13744     10 00 00 FF 
13748     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
1374c     10 E4 05 F1 | 	add	objptr, #16
13750     10 FA 05 F6 | 	mov	result1, #16
13754     28 E4 61 FD | 	setq	objptr
13758     0A FB F1 FC | 	coginit	result1, arg02 wc
1375c     01 FA 65 C6 |  if_b	neg	result1, #1
13760     1C E4 05 F1 | 	add	objptr, #28
13764     F2 FA 61 FC | 	wrlong	result1, objptr
13768     2C E4 85 F1 | 	sub	objptr, #44
1376c                 | ' waitms(40)							' wait for stabilize
1376c     28 12 06 F6 | 	mov	arg01, #40
13770     C8 26 B0 FD | 	call	#__system___waitms
13774                 | ' return cog							' return the driver's cog #
13774     2C E4 05 F1 | 	add	objptr, #44
13778     F2 FA 01 FB | 	rdlong	result1, objptr
1377c     2C E4 85 F1 | 	sub	objptr, #44
13780                 | _hg010b_spin2_start_ret
13780     2D 00 64 FD | 	ret
13784                 | 
13784                 | ' 
13784                 | ' 
13784                 | ' '**************************************************************************************************************** 
13784                 | ' '                                                                                                             	*
13784                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
13784                 | ' '  Mode number - see start() above or bits below								*
13784                 | ' '                                                                                                             	*
13784                 | ' '****************************************************************************************************************
13784                 | ' 
13784                 | ' '---------------------------- initialize a cursor (MSDOS type)
13784                 | ' pub initcursor(color) |i
13784                 | _hg010b_spin2_initcursor
13784     03 4A 05 F6 | 	mov	COUNT_, #3
13788     A8 00 A0 FD | 	call	#pushregs_
1378c     09 1F 02 F6 | 	mov	local01, arg01
13790                 | ' 
13790                 | ' cursor_x:=0							' place the cursor at 0:0
13790     38 E4 05 F1 | 	add	objptr, #56
13794     F2 00 58 FC | 	wrword	#0, objptr
13798                 | ' cursor_y:=0
13798     02 E4 05 F1 | 	add	objptr, #2
1379c     F2 00 48 FC | 	wrbyte	#0, objptr
137a0                 | ' repeat i from 0 to 111
137a0     00 20 06 F6 | 	mov	local02, #0
137a4     F8 E5 05 F1 | 	add	objptr, #504
137a8     97 1A 48 FB | 	callpa	#(@LR__1552-@LR__1550)>>2,fcache_load_ptr_
137ac                 | LR__1550
137ac                 | '   cursor[i]:=0
137ac     10 23 02 F6 | 	mov	local03, local02
137b0     F2 22 02 F1 | 	add	local03, objptr
137b4     11 01 48 FC | 	wrbyte	#0, local03
137b8     01 20 06 F1 | 	add	local02, #1
137bc     70 20 56 F2 | 	cmps	local02, #112 wc
137c0     E8 FF 9F CD |  if_b	jmp	#LR__1550
137c4                 | ' repeat i from 112 to 127
137c4     70 20 06 F6 | 	mov	local02, #112
137c8                 | LR__1551
137c8                 | '   cursor[i]:=color  
137c8     10 23 02 F6 | 	mov	local03, local02
137cc     F2 22 02 F1 | 	add	local03, objptr
137d0     11 1F 42 FC | 	wrbyte	local01, local03
137d4     01 20 06 F1 | 	add	local02, #1
137d8     80 20 16 F2 | 	cmp	local02, #128 wc
137dc     E8 FF 9F CD |  if_b	jmp	#LR__1551
137e0                 | LR__1552
137e0                 | ' 'repeat i from 0 to 127
137e0                 | ' '  if ((i/8)//2)
137e0                 | ' '    cursor[i]:=15
137e0                 | ' '  else
137e0                 | ' '    cursor[i]:=0
137e0                 | ' '  if i>=120    
137e0                 | ' '    cursor[i]:=40
137e0                 | ' setspriteptr(17,@cursor)
137e0     F2 14 02 F6 | 	mov	arg02, objptr
137e4     01 00 00 FF 
137e8     32 E4 85 F1 | 	sub	objptr, ##562
137ec     11 12 06 F6 | 	mov	arg01, #17
137f0     48 03 B0 FD | 	call	#_hg010b_spin2_setspriteptr
137f4                 | ' setspritesize(17,8,16)
137f4     11 12 06 F6 | 	mov	arg01, #17
137f8     08 14 06 F6 | 	mov	arg02, #8
137fc     10 16 06 F6 | 	mov	arg03, #16
13800     AC 03 B0 FD | 	call	#_hg010b_spin2_setspritesize
13804                 | ' setspritepos(17,0,0)
13804     11 12 06 F6 | 	mov	arg01, #17
13808     00 14 06 F6 | 	mov	arg02, #0
1380c     00 16 06 F6 | 	mov	arg03, #0
13810     50 03 B0 FD | 	call	#_hg010b_spin2_setspritepos
13814     A7 F0 03 F6 | 	mov	ptra, fp
13818     B2 00 A0 FD | 	call	#popregs_
1381c                 | _hg010b_spin2_initcursor_ret
1381c     2D 00 64 FD | 	ret
13820                 | 
13820                 | ' 
13820                 | '  
13820                 | ' pub setcursorcolor(color) |i
13820                 | _hg010b_spin2_setcursorcolor
13820                 | ' 
13820                 | ' 
13820                 | ' repeat i from 0 to 111
13820     00 00 06 F6 | 	mov	_var01, #0
13824     01 00 00 FF 
13828     32 E4 05 F1 | 	add	objptr, ##562
1382c     97 1A 48 FB | 	callpa	#(@LR__1562-@LR__1560)>>2,fcache_load_ptr_
13830                 | LR__1560
13830                 | '   cursor[i]:=0
13830     00 03 02 F6 | 	mov	_var02, _var01
13834     F2 02 02 F1 | 	add	_var02, objptr
13838     01 01 48 FC | 	wrbyte	#0, _var02
1383c     01 00 06 F1 | 	add	_var01, #1
13840     70 00 56 F2 | 	cmps	_var01, #112 wc
13844     E8 FF 9F CD |  if_b	jmp	#LR__1560
13848                 | ' repeat i from 112 to 127
13848     70 00 06 F6 | 	mov	_var01, #112
1384c                 | LR__1561
1384c                 | '   cursor[i]:=color  
1384c     00 03 02 F6 | 	mov	_var02, _var01
13850     F2 02 02 F1 | 	add	_var02, objptr
13854     01 13 42 FC | 	wrbyte	arg01, _var02
13858     01 00 06 F1 | 	add	_var01, #1
1385c     80 00 16 F2 | 	cmp	_var01, #128 wc
13860     E8 FF 9F CD |  if_b	jmp	#LR__1561
13864                 | LR__1562
13864     01 00 00 FF 
13868     32 E4 85 F1 | 	sub	objptr, ##562
1386c                 | _hg010b_spin2_setcursorcolor_ret
1386c     2D 00 64 FD | 	ret
13870                 | 
13870                 | '  
13870                 | ' 
13870                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
13870                 | _hg010b_spin2_setmode
13870     02 4A 05 F6 | 	mov	COUNT_, #2
13874     A8 00 A0 FD | 	call	#pushregs_
13878                 | ' 
13878                 | ' 
13878                 | ' dl_ptr:=@emptydl[0]
13878     01 00 00 FF 
1387c     19 E4 05 F1 | 	add	objptr, ##537
13880     F2 62 02 F6 | 	mov	muldivb_, objptr
13884     FD E5 85 F1 | 	sub	objptr, #509
13888     F2 62 62 FC | 	wrlong	muldivb_, objptr
1388c                 | ' 
1388c                 | ' if cog>0 
1388c     10 E4 05 F1 | 	add	objptr, #16
13890     F2 62 02 FB | 	rdlong	muldivb_, objptr
13894     2C E4 85 F1 | 	sub	objptr, #44
13898     01 62 56 F2 | 	cmps	muldivb_, #1 wc
1389c                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
1389c     01 12 06 36 |  if_ae	mov	arg01, #1
138a0     54 0F B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
138a4                 | ' xres:=1024
138a4     01 00 00 FF 
138a8     22 E4 05 F1 | 	add	objptr, ##546
138ac     02 00 80 FF 
138b0     F2 00 68 FC | 	wrlong	##1024, objptr
138b4                 | ' yres:=576  
138b4     04 E4 05 F1 | 	add	objptr, #4
138b8     01 00 80 FF 
138bc     F2 80 68 FC | 	wrlong	##576, objptr
138c0                 | ' ppl:=(timings[3])
138c0     10 00 00 FF 
138c4     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
138c8     F7 62 02 FB | 	rdlong	muldivb_, ptr__hg010b_spin2_dat__
138cc     51 E5 85 F1 | 	sub	objptr, #337
138d0     F2 62 62 FC | 	wrlong	muldivb_, objptr
138d4                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
138d4     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
138d8     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
138dc     01 1E 66 F0 | 	shl	local01, #1
138e0     80 E4 85 F1 | 	sub	objptr, #128
138e4     F2 1E 62 FC | 	wrlong	local01, objptr
138e8                 | ' cpl1:=cpl '' todo remove
138e8     04 E4 05 F1 | 	add	objptr, #4
138ec     F2 1E 62 FC | 	wrlong	local01, objptr
138f0                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
138f0     02 00 00 FF 
138f4     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
138f8     41 E4 85 F1 | 	sub	objptr, #65
138fc     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
13900                 | ' repeat i from 0 to 3
13900     00 20 06 F6 | 	mov	local02, #0
13904     02 00 00 FF 
13908     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
1390c     08 E4 05 F1 | 	add	objptr, #8
13910     97 20 48 FB | 	callpa	#(@LR__1571-@LR__1570)>>2,fcache_load_ptr_
13914                 | LR__1570
13914                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
13914     10 1F 02 F6 | 	mov	local01, local02
13918     02 1E 66 F0 | 	shl	local01, #2
1391c     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
13920     F2 62 02 FB | 	rdlong	muldivb_, objptr
13924     11 62 66 F0 | 	shl	muldivb_, #17
13928     0F 1F 02 FB | 	rdlong	local01, local01
1392c     31 1F 02 F1 | 	add	local01, muldivb_
13930     80 40 38 FF 
13934     00 1E 06 F1 | 	add	local01, ##1887502336
13938     10 63 02 F6 | 	mov	muldivb_, local02
1393c     02 62 66 F0 | 	shl	muldivb_, #2
13940     F7 62 02 F1 | 	add	muldivb_, ptr__hg010b_spin2_dat__
13944     31 1F 62 FC | 	wrlong	local01, muldivb_
13948     01 20 06 F1 | 	add	local02, #1
1394c     04 20 56 F2 | 	cmps	local02, #4 wc
13950     C0 FF 9F CD |  if_b	jmp	#LR__1570
13954                 | LR__1571
13954     20 E4 85 F1 | 	sub	objptr, #32
13958                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
13958     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
1395c     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
13960     14 1E 66 FC | 	wrlong	local01, #20
13964                 | ' hubset(timings[10])
13964     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
13968     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
1396c     10 00 00 FF 
13970     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
13974     00 12 62 FD | 	hubset	arg01
13978                 | ' waitms(1)                                                   	' wait for stabilization
13978     01 12 06 F6 | 	mov	arg01, #1
1397c     BC 24 B0 FD | 	call	#__system___waitms
13980     10 00 00 FF 
13984     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
13988     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1398c     5D E4 05 F1 | 	add	objptr, #93
13990     F2 20 62 FC | 	wrlong	local02, objptr
13994     10 1F 52 F6 | 	abs	local01, local02 wc
13998     04 1E 46 F0 | 	shr	local01, #4
1399c     0F 1F 82 F6 | 	negc	local01, local01
139a0     9C E4 05 F1 | 	add	objptr, #156
139a4     F2 1E 62 FC | 	wrlong	local01, objptr
139a8     A4 E4 85 F1 | 	sub	objptr, #164
139ac     F2 20 02 FB | 	rdlong	local02, objptr
139b0     08 E4 05 F1 | 	add	objptr, #8
139b4     F2 1E 02 FB | 	rdlong	local01, objptr
139b8     0F 21 02 FD | 	qmul	local02, local01
139bc                 | ' lines:=timings[11]
139bc                 | ' t_lines:=lines/16
139bc                 | ' buflen:=cpl*lines						' framebuffer length in longs
139bc     29 E4 85 F1 | 	sub	objptr, #41
139c0                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
139c0     19 1E C6 F9 | 	decod	local01, #25
139c4                 | ' mode_ptr:=@timings						' set pointers to timings
139c4     2C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #44
139c8                 | ' graphmode:=1024+512+192+48							' det global variable
139c8                 | ' makedl(graphmode)							' make a DL for the mode
139c8     03 00 00 FF 
139cc     F0 12 06 F6 | 	mov	arg01, ##1776
139d0     18 20 62 FD | 	getqx	local02
139d4     F2 20 62 FC | 	wrlong	local02, objptr
139d8     34 E4 85 F1 | 	sub	objptr, #52
139dc     02 20 66 F0 | 	shl	local02, #2
139e0     10 1F 82 F1 | 	sub	local01, local02
139e4     F2 1E 62 FC | 	wrlong	local01, objptr
139e8     14 E4 05 F1 | 	add	objptr, #20
139ec     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
139f0     79 E4 05 F1 | 	add	objptr, #121
139f4     03 00 80 FF 
139f8     F2 E0 69 FC | 	wrlong	##1776, objptr
139fc     8D E4 85 F1 | 	sub	objptr, #141
13a00     10 00 00 FF 
13a04     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
13a08     AC 00 B0 FD | 	call	#_hg010b_spin2_makedl
13a0c                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
13a0c     F2 1E 02 FB | 	rdlong	local01, objptr
13a10     D9 E4 05 F1 | 	add	objptr, #217
13a14     F2 1E 62 FC | 	wrlong	local01, objptr
13a18                 | ' s_font_ptr:=font_ptr
13a18     D5 E4 85 F1 | 	sub	objptr, #213
13a1c     F2 1E 02 FB | 	rdlong	local01, objptr
13a20     D9 E4 05 F1 | 	add	objptr, #217
13a24     F2 1E 62 FC | 	wrlong	local01, objptr
13a28                 | ' s_lines:=lines
13a28     80 E4 85 F1 | 	sub	objptr, #128
13a2c     F2 1E 02 FB | 	rdlong	local01, objptr
13a30     84 E4 05 F1 | 	add	objptr, #132
13a34     F2 1E 62 FC | 	wrlong	local01, objptr
13a38                 | ' s_buflen:=buflen
13a38     AD E4 85 F1 | 	sub	objptr, #173
13a3c     F2 1E 02 FB | 	rdlong	local01, objptr
13a40     B5 E4 05 F1 | 	add	objptr, #181
13a44     F2 1E 62 FC | 	wrlong	local01, objptr
13a48                 | ' s_cpl:=cpl
13a48     94 E4 85 F1 | 	sub	objptr, #148
13a4c     F2 1E 02 FB | 	rdlong	local01, objptr
13a50     90 E4 05 F1 | 	add	objptr, #144
13a54     F2 1E 62 FC | 	wrlong	local01, objptr
13a58                 | ' s_cpl1:=cpl
13a58     90 E4 85 F1 | 	sub	objptr, #144
13a5c     F2 1E 02 FB | 	rdlong	local01, objptr
13a60     98 E4 05 F1 | 	add	objptr, #152
13a64     F2 1E 62 FC | 	wrlong	local01, objptr
13a68                 | ' st_lines:=t_lines
13a68     0C E4 05 F1 | 	add	objptr, #12
13a6c     F2 1E 02 FB | 	rdlong	local01, objptr
13a70     04 E4 05 F1 | 	add	objptr, #4
13a74     F2 1E 62 FC | 	wrlong	local01, objptr
13a78                 | ' ppl:=ppl/xzoom  
13a78     28 E4 85 F1 | 	sub	objptr, #40
13a7c     F2 60 02 FB | 	rdlong	muldiva_, objptr
13a80     2C E4 05 F1 | 	add	objptr, #44
13a84     F2 62 02 FB | 	rdlong	muldivb_, objptr
13a88     01 E5 85 F1 | 	sub	objptr, #257
13a8c     BA 00 A0 FD | 	call	#divide_
13a90     D5 E4 05 F1 | 	add	objptr, #213
13a94     F2 62 62 FC | 	wrlong	muldivb_, objptr
13a98                 | ' s_ppl:=ppl
13a98     1C E4 05 F1 | 	add	objptr, #28
13a9c     F2 62 62 FC | 	wrlong	muldivb_, objptr
13aa0     F1 E4 85 F1 | 	sub	objptr, #241
13aa4                 | ' waitms(20)							' wait 
13aa4     14 12 06 F6 | 	mov	arg01, #20
13aa8     90 23 B0 FD | 	call	#__system___waitms
13aac     A7 F0 03 F6 | 	mov	ptra, fp
13ab0     B2 00 A0 FD | 	call	#popregs_
13ab4                 | _hg010b_spin2_setmode_ret
13ab4     2D 00 64 FD | 	ret
13ab8                 | 
13ab8                 | ' 
13ab8                 | ' 
13ab8                 | ' '****************************************************************************************************************
13ab8                 | ' '                                                                                                             	*
13ab8                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
13ab8                 | ' '                                                                                                             	*
13ab8                 | ' '****************************************************************************************************************
13ab8                 | ' 
13ab8                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
13ab8                 | _hg010b_spin2_makedl
13ab8                 | ' 
13ab8                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
13ab8                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
13ab8                 | ' repeat i from 0 to 11                                                           ' clear DL
13ab8     00 00 06 F6 | 	mov	_var01, #0
13abc     E9 E5 05 F1 | 	add	objptr, #489
13ac0     97 0E 48 FB | 	callpa	#(@LR__1581-@LR__1580)>>2,fcache_load_ptr_
13ac4                 | LR__1580
13ac4                 | '   displaylist[i]:=0 
13ac4     00 03 02 F6 | 	mov	_var02, _var01
13ac8     02 02 66 F0 | 	shl	_var02, #2
13acc     F2 02 02 F1 | 	add	_var02, objptr
13ad0     01 01 68 FC | 	wrlong	#0, _var02
13ad4     01 00 06 F1 | 	add	_var01, #1
13ad8     0C 00 56 F2 | 	cmps	_var01, #12 wc
13adc     E4 FF 9F CD |  if_b	jmp	#LR__1580
13ae0                 | LR__1581
13ae0                 | '                         ' 
13ae0                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
13ae0     8C E5 85 F1 | 	sub	objptr, #396
13ae4     F2 02 02 FB | 	rdlong	_var02, objptr
13ae8     14 02 66 F0 | 	shl	_var02, #20
13aec     01 02 06 F1 | 	add	_var02, #1
13af0     04 E4 85 F1 | 	sub	objptr, #4
13af4     F2 00 02 FB | 	rdlong	_var01, objptr
13af8     02 00 66 F0 | 	shl	_var01, #2
13afc     04 00 66 F0 | 	shl	_var01, #4
13b00     00 03 02 F1 | 	add	_var02, _var01
13b04     90 E5 05 F1 | 	add	objptr, #400
13b08     F2 02 62 FC | 	wrlong	_var02, objptr
13b0c     E9 E5 85 F1 | 	sub	objptr, #489
13b10                 | ' displaylist[1]:=buf_ptr<<4+%10  
13b10     F2 02 02 FB | 	rdlong	_var02, objptr
13b14     04 02 66 F0 | 	shl	_var02, #4
13b18     02 02 06 F1 | 	add	_var02, #2
13b1c     ED E5 05 F1 | 	add	objptr, #493
13b20     F2 02 62 FC | 	wrlong	_var02, objptr
13b24                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
13b24     04 E4 85 F1 | 	sub	objptr, #4
13b28     F2 02 02 F6 | 	mov	_var02, objptr
13b2c     CD E5 85 F1 | 	sub	objptr, #461
13b30     F2 02 62 FC | 	wrlong	_var02, objptr
13b34     1C E4 85 F1 | 	sub	objptr, #28
13b38                 | _hg010b_spin2_makedl_ret
13b38     2D 00 64 FD | 	ret
13b3c                 | 
13b3c                 | ' 
13b3c                 | ' 
13b3c                 | ' '****************************************************************************************************************
13b3c                 | ' '                                                                        					*
13b3c                 | ' '  Graphic primitives                                                    					*
13b3c                 | ' '                                                                        					*
13b3c                 | ' '****************************************************************************************************************
13b3c                 | ' 
13b3c                 | ' pub setspriteptr(num,ptr)
13b3c                 | _hg010b_spin2_setspriteptr
13b3c                 | ' long[@spr1ptr+12*num]:=ptr
13b3c     0D E5 05 F1 | 	add	objptr, #269
13b40     F2 00 02 F6 | 	mov	_var01, objptr
13b44     09 03 02 F6 | 	mov	_var02, arg01
13b48     01 02 66 F0 | 	shl	_var02, #1
13b4c     09 03 02 F1 | 	add	_var02, arg01
13b50     02 02 66 F0 | 	shl	_var02, #2
13b54     01 01 02 F1 | 	add	_var01, _var02
13b58     00 15 62 FC | 	wrlong	arg02, _var01
13b5c     0D E5 85 F1 | 	sub	objptr, #269
13b60                 | _hg010b_spin2_setspriteptr_ret
13b60     2D 00 64 FD | 	ret
13b64                 | 
13b64                 | ' 
13b64                 | ' pub setspritepos(num,x,y)
13b64                 | _hg010b_spin2_setspritepos
13b64                 | ' word[@spr1ptr+12*num+4]:=x
13b64     0D E5 05 F1 | 	add	objptr, #269
13b68     F2 00 02 F6 | 	mov	_var01, objptr
13b6c     09 03 02 F6 | 	mov	_var02, arg01
13b70     01 02 66 F0 | 	shl	_var02, #1
13b74     09 03 02 F1 | 	add	_var02, arg01
13b78     02 02 66 F0 | 	shl	_var02, #2
13b7c     01 01 02 F1 | 	add	_var01, _var02
13b80     04 00 06 F1 | 	add	_var01, #4
13b84     00 15 52 FC | 	wrword	arg02, _var01
13b88                 | ' word[@spr1ptr+12*num+6]:=y
13b88     F2 00 02 F6 | 	mov	_var01, objptr
13b8c     09 03 02 F6 | 	mov	_var02, arg01
13b90     01 02 66 F0 | 	shl	_var02, #1
13b94     09 03 02 F1 | 	add	_var02, arg01
13b98     02 02 66 F0 | 	shl	_var02, #2
13b9c     01 01 02 F1 | 	add	_var01, _var02
13ba0     06 00 06 F1 | 	add	_var01, #6
13ba4     00 17 52 FC | 	wrword	arg03, _var01
13ba8     0D E5 85 F1 | 	sub	objptr, #269
13bac                 | _hg010b_spin2_setspritepos_ret
13bac     2D 00 64 FD | 	ret
13bb0                 | 
13bb0                 | ' 
13bb0                 | ' pub setspritesize(num,w,h)
13bb0                 | _hg010b_spin2_setspritesize
13bb0                 | ' word[@spr1ptr+12*num+8]:=w
13bb0     0D E5 05 F1 | 	add	objptr, #269
13bb4     F2 00 02 F6 | 	mov	_var01, objptr
13bb8     09 03 02 F6 | 	mov	_var02, arg01
13bbc     01 02 66 F0 | 	shl	_var02, #1
13bc0     09 03 02 F1 | 	add	_var02, arg01
13bc4     02 02 66 F0 | 	shl	_var02, #2
13bc8     01 01 02 F1 | 	add	_var01, _var02
13bcc     08 00 06 F1 | 	add	_var01, #8
13bd0     00 15 52 FC | 	wrword	arg02, _var01
13bd4                 | ' word[@spr1ptr+12*num+10]:=h
13bd4     F2 00 02 F6 | 	mov	_var01, objptr
13bd8     09 03 02 F6 | 	mov	_var02, arg01
13bdc     01 02 66 F0 | 	shl	_var02, #1
13be0     09 03 02 F1 | 	add	_var02, arg01
13be4     02 02 66 F0 | 	shl	_var02, #2
13be8     01 01 02 F1 | 	add	_var01, _var02
13bec     0A 00 06 F1 | 	add	_var01, #10
13bf0     00 17 52 FC | 	wrword	arg03, _var01
13bf4     0D E5 85 F1 | 	sub	objptr, #269
13bf8                 | _hg010b_spin2_setspritesize_ret
13bf8     2D 00 64 FD | 	ret
13bfc                 | 
13bfc                 | ' 
13bfc                 | ' 
13bfc                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
13bfc                 | ' 
13bfc                 | ' 
13bfc                 | ' pub putpixel(x,y,c)
13bfc                 | _hg010b_spin2_putpixel
13bfc     04 4A 05 F6 | 	mov	COUNT_, #4
13c00     A8 00 A0 FD | 	call	#pushregs_
13c04     09 1F 02 F6 | 	mov	local01, arg01
13c08                 | ' 
13c08                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
13c08     00 20 06 F6 | 	mov	local02, #0
13c0c     00 1E 56 F2 | 	cmps	local01, #0 wc
13c10     01 20 66 36 |  if_ae	neg	local02, #1
13c14     E5 E4 05 F1 | 	add	objptr, #229
13c18     F2 1A 02 FB | 	rdlong	arg05, objptr
13c1c     02 1A 66 F0 | 	shl	arg05, #2
13c20     0D 1F 52 F2 | 	cmps	local01, arg05 wc
13c24     11 23 A2 F1 | 	subx	local03, local03
13c28     11 21 02 F5 | 	and	local02, local03
13c2c     00 22 06 F6 | 	mov	local03, #0
13c30     00 14 56 F2 | 	cmps	arg02, #0 wc
13c34     01 22 66 36 |  if_ae	neg	local03, #1
13c38     11 21 02 F5 | 	and	local02, local03
13c3c     04 E4 85 F1 | 	sub	objptr, #4
13c40     F2 22 02 FB | 	rdlong	local03, objptr
13c44     E1 E4 85 F1 | 	sub	objptr, #225
13c48     11 15 52 F2 | 	cmps	arg02, local03 wc
13c4c     12 25 A2 F1 | 	subx	local04, local04
13c50     12 21 CA F7 | 	test	local02, local04 wz
13c54     48 00 90 AD |  if_e	jmp	#LR__1590
13c58     D9 E4 05 F1 | 	add	objptr, #217
13c5c     F2 12 02 FB | 	rdlong	arg01, objptr
13c60     14 E4 05 F1 | 	add	objptr, #20
13c64     F2 24 02 FB | 	rdlong	local04, objptr
13c68     02 24 66 F0 | 	shl	local04, #2
13c6c     0A 25 02 FD | 	qmul	local04, arg02
13c70                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
13c70     0B 15 02 F6 | 	mov	arg02, arg03
13c74     01 16 06 F6 | 	mov	arg03, #1
13c78     00 18 06 F6 | 	mov	arg04, #0
13c7c     01 1A 06 F6 | 	mov	arg05, #1
13c80     0A 00 00 FF 
13c84     D3 E5 05 F1 | 	add	objptr, ##5587
13c88     18 24 62 FD | 	getqx	local04
13c8c     0F 25 02 F1 | 	add	local04, local01
13c90     12 13 02 F1 | 	add	arg01, local04
13c94     FC 14 B0 FD | 	call	#_psram_spin2_fill
13c98     0B 00 00 FF 
13c9c     C0 E4 85 F1 | 	sub	objptr, ##5824
13ca0                 | LR__1590
13ca0     A7 F0 03 F6 | 	mov	ptra, fp
13ca4     B2 00 A0 FD | 	call	#popregs_
13ca8                 | _hg010b_spin2_putpixel_ret
13ca8     2D 00 64 FD | 	ret
13cac                 | 
13cac                 | ' 
13cac                 | ' pub putpixel2(x,y,c)
13cac                 | _hg010b_spin2_putpixel2
13cac     02 4A 05 F6 | 	mov	COUNT_, #2
13cb0     A8 00 A0 FD | 	call	#pushregs_
13cb4     D9 E4 05 F1 | 	add	objptr, #217
13cb8     F2 1E 02 FB | 	rdlong	local01, objptr
13cbc     14 E4 05 F1 | 	add	objptr, #20
13cc0     F2 1A 02 FB | 	rdlong	arg05, objptr
13cc4     02 1A 66 F0 | 	shl	arg05, #2
13cc8     0A 1B 02 FD | 	qmul	arg05, arg02
13ccc                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
13ccc     0B 15 02 F6 | 	mov	arg02, arg03
13cd0     01 16 06 F6 | 	mov	arg03, #1
13cd4     00 18 06 F6 | 	mov	arg04, #0
13cd8     01 1A 06 F6 | 	mov	arg05, #1
13cdc     0A 00 00 FF 
13ce0     D3 E5 05 F1 | 	add	objptr, ##5587
13ce4     18 20 62 FD | 	getqx	local02
13ce8     09 21 02 F1 | 	add	local02, arg01
13cec     10 1F 02 F1 | 	add	local01, local02
13cf0     0F 13 02 F6 | 	mov	arg01, local01
13cf4     9C 14 B0 FD | 	call	#_psram_spin2_fill
13cf8     0B 00 00 FF 
13cfc     C0 E4 85 F1 | 	sub	objptr, ##5824
13d00     A7 F0 03 F6 | 	mov	ptra, fp
13d04     B2 00 A0 FD | 	call	#popregs_
13d08                 | _hg010b_spin2_putpixel2_ret
13d08     2D 00 64 FD | 	ret
13d0c                 | 
13d0c                 | ' 
13d0c                 | ' pub getpixel2(x,y): c 
13d0c                 | _hg010b_spin2_getpixel2
13d0c     02 4A 05 F6 | 	mov	COUNT_, #2
13d10     A8 00 A0 FD | 	call	#pushregs_
13d14     0C F0 07 F1 | 	add	ptra, #12
13d18     04 4E 05 F1 | 	add	fp, #4
13d1c     A7 12 62 FC | 	wrlong	arg01, fp
13d20     04 4E 05 F1 | 	add	fp, #4
13d24     A7 14 62 FC | 	wrlong	arg02, fp
13d28     08 4E 85 F1 | 	sub	fp, #8
13d2c     A7 00 68 FC | 	wrlong	#0, fp
13d30     A7 12 02 F6 | 	mov	arg01, fp
13d34     D9 E4 05 F1 | 	add	objptr, #217
13d38     F2 14 02 FB | 	rdlong	arg02, objptr
13d3c     14 E4 05 F1 | 	add	objptr, #20
13d40     F2 16 02 FB | 	rdlong	arg03, objptr
13d44     02 16 66 F0 | 	shl	arg03, #2
13d48     08 4E 05 F1 | 	add	fp, #8
13d4c     A7 FA 01 FB | 	rdlong	result1, fp
13d50     FD 16 02 FD | 	qmul	arg03, result1
13d54                 | ' 
13d54                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
13d54     04 4E 85 F1 | 	sub	fp, #4
13d58     A7 1E 02 FB | 	rdlong	local01, fp
13d5c     04 4E 85 F1 | 	sub	fp, #4
13d60     01 16 06 F6 | 	mov	arg03, #1
13d64     0A 00 00 FF 
13d68     D3 E5 05 F1 | 	add	objptr, ##5587
13d6c     18 20 62 FD | 	getqx	local02
13d70     0F 21 02 F1 | 	add	local02, local01
13d74     10 15 02 F1 | 	add	arg02, local02
13d78     E0 12 B0 FD | 	call	#_psram_spin2_read1
13d7c     0B 00 00 FF 
13d80     C0 E4 85 F1 | 	sub	objptr, ##5824
13d84                 | ' return c
13d84     A7 FA 01 FB | 	rdlong	result1, fp
13d88     A7 F0 03 F6 | 	mov	ptra, fp
13d8c     B2 00 A0 FD | 	call	#popregs_
13d90                 | _hg010b_spin2_getpixel2_ret
13d90     2D 00 64 FD | 	ret
13d94                 | 
13d94                 | '   
13d94                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
13d94                 | ' 
13d94                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
13d94                 | _hg010b_spin2_fastline
13d94     02 4A 05 F6 | 	mov	COUNT_, #2
13d98     A8 00 A0 FD | 	call	#pushregs_
13d9c     09 1F 02 F6 | 	mov	local01, arg01
13da0     0A 21 02 F6 | 	mov	local02, arg02
13da4                 | ' 
13da4                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
13da4     00 16 56 F2 | 	cmps	arg03, #0 wc
13da8     F4 00 90 CD |  if_b	jmp	#LR__1600
13dac     01 00 00 FF 
13db0     26 E4 05 F1 | 	add	objptr, ##550
13db4     F2 1A 02 FB | 	rdlong	arg05, objptr
13db8     01 00 00 FF 
13dbc     26 E4 85 F1 | 	sub	objptr, ##550
13dc0     0D 17 52 F2 | 	cmps	arg03, arg05 wc
13dc4     D8 00 90 3D |  if_ae	jmp	#LR__1600
13dc8     00 1E 56 F2 | 	cmps	local01, #0 wc
13dcc     00 20 56 C2 |  if_b	cmps	local02, #0 wc
13dd0     CC 00 90 CD |  if_b	jmp	#LR__1600
13dd4     01 00 00 FF 
13dd8     22 E4 05 F1 | 	add	objptr, ##546
13ddc     F2 1A 02 FB | 	rdlong	arg05, objptr
13de0     01 00 00 FF 
13de4     22 E4 85 F1 | 	sub	objptr, ##546
13de8     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
13dec     01 00 00 1F 
13df0     22 E4 05 11 |  if_a	add	objptr, ##546
13df4     F2 12 02 1B |  if_a	rdlong	arg01, objptr
13df8     01 00 00 1F 
13dfc     22 E4 85 11 |  if_a	sub	objptr, ##546
13e00     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
13e04                 | '   return
13e04     98 00 90 1D |  if_a	jmp	#LR__1600
13e08     10 1F 5A F2 | 	cmps	local01, local02 wcz
13e0c     0F 1B 02 16 |  if_a	mov	arg05, local01
13e10     10 1F 02 16 |  if_a	mov	local01, local02
13e14     0D 21 02 16 |  if_a	mov	local02, arg05
13e18     00 1E 56 F2 | 	cmps	local01, #0 wc
13e1c     00 1E 06 C6 |  if_b	mov	local01, #0
13e20     01 00 00 FF 
13e24     22 E4 05 F1 | 	add	objptr, ##546
13e28     F2 1A 02 FB | 	rdlong	arg05, objptr
13e2c     01 00 00 FF 
13e30     22 E4 85 F1 | 	sub	objptr, ##546
13e34     0D 21 52 F2 | 	cmps	local02, arg05 wc
13e38     01 00 00 3F 
13e3c     22 E4 05 31 |  if_ae	add	objptr, ##546
13e40     F2 20 02 3B |  if_ae	rdlong	local02, objptr
13e44     01 00 00 3F 
13e48     22 E4 85 31 |  if_ae	sub	objptr, ##546
13e4c     D9 E4 05 F1 | 	add	objptr, #217
13e50     F2 12 02 FB | 	rdlong	arg01, objptr
13e54     14 E4 05 F1 | 	add	objptr, #20
13e58     F2 1A 02 FB | 	rdlong	arg05, objptr
13e5c     02 1A 66 F0 | 	shl	arg05, #2
13e60     0B 1B 02 FD | 	qmul	arg05, arg03
13e64                 | ' if x1>x2
13e64                 | '   x1,x2:=x2,x1
13e64                 | ' if x1<0 
13e64                 | '   x1:=0
13e64                 | ' if x2>=xres
13e64                 | '   x2:=xres-1  
13e64     01 20 86 31 |  if_ae	sub	local02, #1
13e68                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
13e68     01 16 06 F6 | 	mov	arg03, #1
13e6c     10 17 02 F1 | 	add	arg03, local02
13e70     0F 17 82 F1 | 	sub	arg03, local01
13e74     0C 15 02 F6 | 	mov	arg02, arg04
13e78     00 18 06 F6 | 	mov	arg04, #0
13e7c     01 1A 06 F6 | 	mov	arg05, #1
13e80     0A 00 00 FF 
13e84     D3 E5 05 F1 | 	add	objptr, ##5587
13e88     18 20 62 FD | 	getqx	local02
13e8c     0F 21 02 F1 | 	add	local02, local01
13e90     10 13 02 F1 | 	add	arg01, local02
13e94     FC 12 B0 FD | 	call	#_psram_spin2_fill
13e98     0B 00 00 FF 
13e9c     C0 E4 85 F1 | 	sub	objptr, ##5824
13ea0                 | LR__1600
13ea0     A7 F0 03 F6 | 	mov	ptra, fp
13ea4     B2 00 A0 FD | 	call	#popregs_
13ea8                 | _hg010b_spin2_fastline_ret
13ea8     2D 00 64 FD | 	ret
13eac                 | 
13eac                 | ' 
13eac                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
13eac                 | _hg010b_spin2_draw
13eac     0E 4A 05 F6 | 	mov	COUNT_, #14
13eb0     A8 00 A0 FD | 	call	#pushregs_
13eb4     09 1F 02 F6 | 	mov	local01, arg01
13eb8     0A 21 02 F6 | 	mov	local02, arg02
13ebc     0B 23 02 F6 | 	mov	local03, arg03
13ec0     0C 25 02 F6 | 	mov	local04, arg04
13ec4     0D 27 02 F6 | 	mov	local05, arg05
13ec8                 | ' 
13ec8                 | ' if (y1==y2)
13ec8     12 21 0A F2 | 	cmp	local02, local04 wz
13ecc     18 00 90 5D |  if_ne	jmp	#LR__1610
13ed0                 | '   fastline(x1,x2,y1,c)
13ed0     0F 13 02 F6 | 	mov	arg01, local01
13ed4     11 15 02 F6 | 	mov	arg02, local03
13ed8     10 17 02 F6 | 	mov	arg03, local02
13edc     13 19 02 F6 | 	mov	arg04, local05
13ee0     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
13ee4     F8 00 90 FD | 	jmp	#LR__1616
13ee8                 | LR__1610
13ee8                 | ' else  
13ee8                 | '   x:=x1
13ee8     0F 29 02 F6 | 	mov	local06, local01
13eec                 | '   y:=y1
13eec     10 2B 02 F6 | 	mov	local07, local02
13ef0                 | ' 
13ef0                 | '   if (x1<x2) 
13ef0     11 1F 52 F2 | 	cmps	local01, local03 wc
13ef4                 | '     xi:=1
13ef4     01 2C 06 C6 |  if_b	mov	local08, #1
13ef8                 | '     dx:=x2-x1
13ef8     11 2F 02 C6 |  if_b	mov	local09, local03
13efc     0F 2F 82 C1 |  if_b	sub	local09, local01
13f00                 | '   else
13f00                 | '     xi:=-1
13f00     01 2C 66 36 |  if_ae	neg	local08, #1
13f04                 | '     dx:=x1-x2
13f04     11 1F 82 31 |  if_ae	sub	local01, local03
13f08     0F 2F 02 36 |  if_ae	mov	local09, local01
13f0c                 | '   
13f0c                 | '   if (y1<y2) 
13f0c     12 21 52 F2 | 	cmps	local02, local04 wc
13f10                 | '     yi:=1
13f10     01 30 06 C6 |  if_b	mov	local10, #1
13f14                 | '     dy:=y2-y1
13f14     12 33 02 C6 |  if_b	mov	local11, local04
13f18     10 33 82 C1 |  if_b	sub	local11, local02
13f1c                 | '   else
13f1c                 | '     yi:=-1
13f1c     01 30 66 36 |  if_ae	neg	local10, #1
13f20                 | '     dy:=y1-y2
13f20     12 21 82 31 |  if_ae	sub	local02, local04
13f24     10 33 02 36 |  if_ae	mov	local11, local02
13f28                 | ' 
13f28                 | '   putpixel(x,y,c)
13f28     13 17 02 F6 | 	mov	arg03, local05
13f2c     14 13 02 F6 | 	mov	arg01, local06
13f30     15 15 02 F6 | 	mov	arg02, local07
13f34     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
13f38                 | ' 
13f38                 | '   if (dx>dy)
13f38     19 2F 5A F2 | 	cmps	local09, local11 wcz
13f3c     50 00 90 ED |  if_be	jmp	#LR__1612
13f40                 | '     ai:=(dy-dx)*2
13f40     19 35 02 F6 | 	mov	local12, local11
13f44     17 35 82 F1 | 	sub	local12, local09
13f48     01 34 66 F0 | 	shl	local12, #1
13f4c                 | '     bi:=dy*2
13f4c     01 32 66 F0 | 	shl	local11, #1
13f50     19 37 02 F6 | 	mov	local13, local11
13f54                 | '     d:= bi-dx
13f54     1B 39 02 F6 | 	mov	local14, local13
13f58     17 39 82 F1 | 	sub	local14, local09
13f5c                 | '     repeat while (x<>x2) 
13f5c                 | LR__1611
13f5c     11 29 0A F2 | 	cmp	local06, local03 wz
13f60     7C 00 90 AD |  if_e	jmp	#LR__1615
13f64                 | '       if (d>=0) 
13f64     00 38 56 F2 | 	cmps	local14, #0 wc
13f68                 | '         x+=xi
13f68     16 29 02 31 |  if_ae	add	local06, local08
13f6c                 | '         y+=yi
13f6c     18 2B 02 31 |  if_ae	add	local07, local10
13f70                 | '         d+=ai
13f70     1A 39 02 31 |  if_ae	add	local14, local12
13f74                 | '       else
13f74                 | '         d+=bi
13f74     1B 39 02 C1 |  if_b	add	local14, local13
13f78                 | '         x+=xi
13f78     16 29 02 C1 |  if_b	add	local06, local08
13f7c                 | '       putpixel(x,y,c)
13f7c     14 13 02 F6 | 	mov	arg01, local06
13f80     15 15 02 F6 | 	mov	arg02, local07
13f84     13 17 02 F6 | 	mov	arg03, local05
13f88     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
13f8c     CC FF 9F FD | 	jmp	#LR__1611
13f90                 | LR__1612
13f90                 | '   else
13f90                 | '     ai:=(dx-dy)*2
13f90     17 35 02 F6 | 	mov	local12, local09
13f94     19 35 82 F1 | 	sub	local12, local11
13f98     01 34 66 F0 | 	shl	local12, #1
13f9c                 | '     bi:=dx*2
13f9c     01 2E 66 F0 | 	shl	local09, #1
13fa0     17 37 02 F6 | 	mov	local13, local09
13fa4                 | '     d:=bi-dy
13fa4     1B 39 02 F6 | 	mov	local14, local13
13fa8     19 39 82 F1 | 	sub	local14, local11
13fac                 | '     repeat while (y<>y2)
13fac                 | LR__1613
13fac     12 2B 0A F2 | 	cmp	local07, local04 wz
13fb0     2C 00 90 AD |  if_e	jmp	#LR__1614
13fb4                 | '       if (d>=0)
13fb4     00 38 56 F2 | 	cmps	local14, #0 wc
13fb8                 | '         x+=xi
13fb8     16 29 02 31 |  if_ae	add	local06, local08
13fbc                 | '         y+=yi
13fbc     18 2B 02 31 |  if_ae	add	local07, local10
13fc0                 | '         d+=ai
13fc0     1A 39 02 31 |  if_ae	add	local14, local12
13fc4                 | '       else
13fc4                 | '         d+=bi
13fc4     1B 39 02 C1 |  if_b	add	local14, local13
13fc8                 | '         y+=yi
13fc8     18 2B 02 C1 |  if_b	add	local07, local10
13fcc                 | '       putpixel(x, y,c)
13fcc     14 13 02 F6 | 	mov	arg01, local06
13fd0     15 15 02 F6 | 	mov	arg02, local07
13fd4     13 17 02 F6 | 	mov	arg03, local05
13fd8     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
13fdc     CC FF 9F FD | 	jmp	#LR__1613
13fe0                 | LR__1614
13fe0                 | LR__1615
13fe0                 | LR__1616
13fe0     A7 F0 03 F6 | 	mov	ptra, fp
13fe4     B2 00 A0 FD | 	call	#popregs_
13fe8                 | _hg010b_spin2_draw_ret
13fe8     2D 00 64 FD | 	ret
13fec                 | 
13fec                 | '  
13fec                 | ' pub fillpush(val) 
13fec                 | _hg010b_spin2_fillpush
13fec                 | ' fillstack[fillptr]:=val
13fec     0B 00 00 FF 
13ff0     B6 E4 05 F1 | 	add	objptr, ##5814
13ff4     F2 00 02 FB | 	rdlong	_var01, objptr
13ff8     02 00 66 F0 | 	shl	_var01, #2
13ffc     0A 00 00 FF 
14000     00 E4 85 F1 | 	sub	objptr, ##5120
14004     F2 00 02 F1 | 	add	_var01, objptr
14008     00 13 62 FC | 	wrlong	arg01, _var01
1400c                 | ' fillptr+=1   
1400c     0A 00 00 FF 
14010     00 E4 05 F1 | 	add	objptr, ##5120
14014     F2 00 02 FB | 	rdlong	_var01, objptr
14018     01 00 06 F1 | 	add	_var01, #1
1401c     F2 00 62 FC | 	wrlong	_var01, objptr
14020     0B 00 00 FF 
14024     B6 E4 85 F1 | 	sub	objptr, ##5814
14028                 | _hg010b_spin2_fillpush_ret
14028     2D 00 64 FD | 	ret
1402c                 | 
1402c                 | ' 
1402c                 | '     
1402c                 | ' pub fillpop() : val
1402c                 | _hg010b_spin2_fillpop
1402c                 | ' 
1402c                 | ' fillptr-=1
1402c     0B 00 00 FF 
14030     B6 E4 05 F1 | 	add	objptr, ##5814
14034     F2 FA 01 FB | 	rdlong	result1, objptr
14038     01 FA 85 F1 | 	sub	result1, #1
1403c     F2 FA 61 FC | 	wrlong	result1, objptr
14040                 | ' if fillptr<0
14040     0B 00 00 FF 
14044     B6 E4 85 F1 | 	sub	objptr, ##5814
14048     00 FA 55 F2 | 	cmps	result1, #0 wc
1404c                 | '   fillptr:=0
1404c     0B 00 00 CF 
14050     B6 E4 05 C1 |  if_b	add	objptr, ##5814
14054     F2 00 68 CC |  if_b	wrlong	#0, objptr
14058     0B 00 00 CF 
1405c     B6 E4 85 C1 |  if_b	sub	objptr, ##5814
14060                 | '   val:=-12345
14060     E7 FF 7F CF 
14064     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
14068     28 00 90 CD |  if_b	jmp	#LR__1620
1406c                 | ' else 
1406c                 | '   val:=fillstack[fillptr]
1406c     0B 00 00 FF 
14070     B6 E4 05 F1 | 	add	objptr, ##5814
14074     F2 00 02 FB | 	rdlong	_var01, objptr
14078     02 00 66 F0 | 	shl	_var01, #2
1407c     0A 00 00 FF 
14080     00 E4 85 F1 | 	sub	objptr, ##5120
14084     F2 00 02 F1 | 	add	_var01, objptr
14088     00 01 02 FB | 	rdlong	_var01, _var01
1408c     01 00 00 FF 
14090     B6 E4 85 F1 | 	sub	objptr, ##694
14094                 | LR__1620
14094                 | ' return val
14094     00 FB 01 F6 | 	mov	result1, _var01
14098                 | _hg010b_spin2_fillpop_ret
14098     2D 00 64 FD | 	ret
1409c                 | 
1409c                 | ' 
1409c                 | '       
1409c                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1409c                 | _hg010b_spin2_fill
1409c     0B 4A 05 F6 | 	mov	COUNT_, #11
140a0     A8 00 A0 FD | 	call	#pushregs_
140a4                 | ' 
140a4                 | ' newcolor:=newcolor & 255
140a4     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
140a8                 | ' oldcolor:=oldcolor & 255
140a8     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
140ac                 | ' 
140ac                 | ' if (oldcolor == newcolor) 
140ac     0F 21 0A F2 | 	cmp	local02, local01 wz
140b0                 | '   return
140b0     70 02 90 AD |  if_e	jmp	#LR__1639
140b4                 | ' 
140b4                 | ' fillptr:=0
140b4     0B 00 00 FF 
140b8     B6 E4 05 F1 | 	add	objptr, ##5814
140bc     F2 00 68 FC | 	wrlong	#0, objptr
140c0                 | ' fillmax:=0
140c0     04 E4 05 F1 | 	add	objptr, #4
140c4     F2 00 68 FC | 	wrlong	#0, objptr
140c8     0B 00 00 FF 
140cc     BA E4 85 F1 | 	sub	objptr, ##5818
140d0                 | ' fillpush(x)
140d0     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
140d4                 | ' fillpush(y)
140d4     0A 13 02 F6 | 	mov	arg01, arg02
140d8     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
140dc                 | ' y:=fillpop()
140dc     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
140e0     FD 22 02 F6 | 	mov	local03, result1
140e4                 | ' x:=fillpop()
140e4     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
140e8     FD 24 02 F6 | 	mov	local04, result1
140ec                 | ' 'pinhigh(38)
140ec                 | ' repeat while (x>-1)       
140ec                 | LR__1630
140ec     00 24 56 F2 | 	cmps	local04, #0 wc
140f0     30 02 90 CD |  if_b	jmp	#LR__1638
140f4                 | '  ' pintoggle(39)
140f4                 | '   x1 := x
140f4     12 27 02 F6 | 	mov	local05, local04
140f8                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
140f8                 | LR__1631
140f8     00 28 06 F6 | 	mov	local06, #0
140fc     00 2A 06 F6 | 	mov	local07, #0
14100     00 26 56 F2 | 	cmps	local05, #0 wc
14104     01 2A 66 36 |  if_ae	neg	local07, #1
14108     00 2A 0E F2 | 	cmp	local07, #0 wz
1410c     00 28 26 56 |  if_ne	not	local06, #0
14110     00 2C 06 F6 | 	mov	local08, #0
14114     00 2E 06 F6 | 	mov	local09, #0
14118     11 15 02 F6 | 	mov	arg02, local03
1411c     13 13 02 F6 | 	mov	arg01, local05
14120     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
14124     10 FB 09 F2 | 	cmp	result1, local02 wz
14128     00 2E 26 A6 |  if_e	not	local09, #0
1412c     00 2E 0E F2 | 	cmp	local09, #0 wz
14130     00 2C 26 56 |  if_ne	not	local08, #0
14134     16 29 CA F7 | 	test	local06, local08 wz
14138                 | '     x1--
14138     01 26 86 51 |  if_ne	sub	local05, #1
1413c     B8 FF 9F 5D |  if_ne	jmp	#LR__1631
14140                 | '   x1++
14140     01 26 06 F1 | 	add	local05, #1
14144                 | '   spanabove := 0
14144     00 30 06 F6 | 	mov	local10, #0
14148                 | '   spanbelow := 0
14148     00 32 06 F6 | 	mov	local11, #0
1414c                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
1414c                 | LR__1632
1414c     00 28 06 F6 | 	mov	local06, #0
14150     02 00 00 FF 
14154     00 26 56 F2 | 	cmps	local05, ##1024 wc
14158     00 28 26 C6 |  if_b	not	local06, #0
1415c     00 2C 06 F6 | 	mov	local08, #0
14160     00 2E 06 F6 | 	mov	local09, #0
14164     11 15 02 F6 | 	mov	arg02, local03
14168     13 13 02 F6 | 	mov	arg01, local05
1416c     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
14170     10 FB 09 F2 | 	cmp	result1, local02 wz
14174     00 2E 26 A6 |  if_e	not	local09, #0
14178     00 2E 0E F2 | 	cmp	local09, #0 wz
1417c     00 2C 26 56 |  if_ne	not	local08, #0
14180     16 29 CA F7 | 	test	local06, local08 wz
14184     88 01 90 AD |  if_e	jmp	#LR__1637
14188                 | '     putpixel2 (x1,y, newcolor & 255)
14188     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
1418c     13 13 02 F6 | 	mov	arg01, local05
14190     11 15 02 F6 | 	mov	arg02, local03
14194     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
14198                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
14198     00 28 06 F6 | 	mov	local06, #0
1419c     00 2A 06 F6 | 	mov	local07, #0
141a0     00 30 0E F2 | 	cmp	local10, #0 wz
141a4     01 22 56 A2 |  if_e	cmps	local03, #1 wc
141a8     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
141ac     00 2A 0E F2 | 	cmp	local07, #0 wz
141b0     00 28 26 56 |  if_ne	not	local06, #0
141b4     00 2C 06 F6 | 	mov	local08, #0
141b8     00 2E 06 F6 | 	mov	local09, #0
141bc     11 15 02 F6 | 	mov	arg02, local03
141c0     01 14 86 F1 | 	sub	arg02, #1
141c4     13 13 02 F6 | 	mov	arg01, local05
141c8     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
141cc     10 FB 09 F2 | 	cmp	result1, local02 wz
141d0     00 2E 26 A6 |  if_e	not	local09, #0
141d4     00 2E 0E F2 | 	cmp	local09, #0 wz
141d8     00 2C 26 56 |  if_ne	not	local08, #0
141dc     16 29 CA F7 | 	test	local06, local08 wz
141e0     1C 00 90 AD |  if_e	jmp	#LR__1633
141e4                 | '       fillpush(x1)
141e4     13 13 02 F6 | 	mov	arg01, local05
141e8     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
141ec                 | '       fillpush(y-1)
141ec     11 13 02 F6 | 	mov	arg01, local03
141f0     01 12 86 F1 | 	sub	arg01, #1
141f4     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
141f8                 | '       spanabove := 1 
141f8     01 30 06 F6 | 	mov	local10, #1
141fc     4C 00 90 FD | 	jmp	#LR__1634
14200                 | LR__1633
14200                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
14200     00 28 06 F6 | 	mov	local06, #0
14204     00 2A 06 F6 | 	mov	local07, #0
14208     00 30 0E F2 | 	cmp	local10, #0 wz
1420c     01 22 56 52 |  if_ne	cmps	local03, #1 wc
14210     01 2A 66 16 |  if_a	neg	local07, #1
14214     00 2A 0E F2 | 	cmp	local07, #0 wz
14218     00 28 26 56 |  if_ne	not	local06, #0
1421c     00 2C 06 F6 | 	mov	local08, #0
14220     00 2E 06 F6 | 	mov	local09, #0
14224     11 15 02 F6 | 	mov	arg02, local03
14228     01 14 86 F1 | 	sub	arg02, #1
1422c     13 13 02 F6 | 	mov	arg01, local05
14230     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
14234     10 FB 09 F2 | 	cmp	result1, local02 wz
14238     00 2E 26 56 |  if_ne	not	local09, #0
1423c     00 2E 0E F2 | 	cmp	local09, #0 wz
14240     00 2C 26 56 |  if_ne	not	local08, #0
14244     16 29 CA F7 | 	test	local06, local08 wz
14248                 | '       spanabove := 0 
14248     00 30 06 56 |  if_ne	mov	local10, #0
1424c                 | LR__1634
1424c                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
1424c     00 28 06 F6 | 	mov	local06, #0
14250     00 2A 06 F6 | 	mov	local07, #0
14254     00 32 0E F2 | 	cmp	local11, #0 wz
14258     01 00 00 AF 
1425c     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
14260     01 2A 66 86 |  if_c_and_z	neg	local07, #1
14264     00 2A 0E F2 | 	cmp	local07, #0 wz
14268     00 28 26 56 |  if_ne	not	local06, #0
1426c     00 2C 06 F6 | 	mov	local08, #0
14270     00 2E 06 F6 | 	mov	local09, #0
14274     11 15 02 F6 | 	mov	arg02, local03
14278     01 14 06 F1 | 	add	arg02, #1
1427c     13 13 02 F6 | 	mov	arg01, local05
14280     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
14284     10 FB 09 F2 | 	cmp	result1, local02 wz
14288     00 2E 26 A6 |  if_e	not	local09, #0
1428c     00 2E 0E F2 | 	cmp	local09, #0 wz
14290     00 2C 26 56 |  if_ne	not	local08, #0
14294     16 29 CA F7 | 	test	local06, local08 wz
14298     1C 00 90 AD |  if_e	jmp	#LR__1635
1429c                 | '       fillpush(x1)
1429c     13 13 02 F6 | 	mov	arg01, local05
142a0     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
142a4                 | '       fillpush(y + 1)
142a4     11 13 02 F6 | 	mov	arg01, local03
142a8     01 12 06 F1 | 	add	arg01, #1
142ac     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
142b0                 | '       spanBelow := 1
142b0     01 32 06 F6 | 	mov	local11, #1
142b4     50 00 90 FD | 	jmp	#LR__1636
142b8                 | LR__1635
142b8                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
142b8     00 28 06 F6 | 	mov	local06, #0
142bc     00 2A 06 F6 | 	mov	local07, #0
142c0     00 32 0E F2 | 	cmp	local11, #0 wz
142c4     01 00 00 5F 
142c8     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
142cc     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
142d0     00 2A 0E F2 | 	cmp	local07, #0 wz
142d4     00 28 26 56 |  if_ne	not	local06, #0
142d8     00 2C 06 F6 | 	mov	local08, #0
142dc     00 2E 06 F6 | 	mov	local09, #0
142e0     11 15 02 F6 | 	mov	arg02, local03
142e4     01 14 06 F1 | 	add	arg02, #1
142e8     13 13 02 F6 | 	mov	arg01, local05
142ec     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
142f0     10 FB 09 F2 | 	cmp	result1, local02 wz
142f4     00 2E 26 56 |  if_ne	not	local09, #0
142f8     00 2E 0E F2 | 	cmp	local09, #0 wz
142fc     00 2C 26 56 |  if_ne	not	local08, #0
14300     16 29 CA F7 | 	test	local06, local08 wz
14304                 | '       spanbelow := 0
14304     00 32 06 56 |  if_ne	mov	local11, #0
14308                 | LR__1636
14308                 | '     x1++
14308     01 26 06 F1 | 	add	local05, #1
1430c     3C FE 9F FD | 	jmp	#LR__1632
14310                 | LR__1637
14310                 | '   y:=fillpop()
14310     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
14314     FD 22 02 F6 | 	mov	local03, result1
14318                 | '   x:=fillpop()
14318     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
1431c     FD 24 02 F6 | 	mov	local04, result1
14320     C8 FD 9F FD | 	jmp	#LR__1630
14324                 | LR__1638
14324                 | LR__1639
14324     A7 F0 03 F6 | 	mov	ptra, fp
14328     B2 00 A0 FD | 	call	#popregs_
1432c                 | _hg010b_spin2_fill_ret
1432c     2D 00 64 FD | 	ret
14330                 | 
14330                 | ' 'pinlow(38)    
14330                 | ' 
14330                 | ' '-- A filled circle -----------------------------------------------------
14330                 | ' 
14330                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
14330                 | _hg010b_spin2_fcircle
14330     08 4A 05 F6 | 	mov	COUNT_, #8
14334     A8 00 A0 FD | 	call	#pushregs_
14338     0B 1F 02 F6 | 	mov	local01, arg03
1433c     FF FF 7F FF 
14340     FE 1F 06 FD | 	qmul	local01, ##-2
14344     09 21 02 F6 | 	mov	local02, arg01
14348     0A 23 02 F6 | 	mov	local03, arg02
1434c     0C 25 02 F6 | 	mov	local04, arg04
14350                 | ' 
14350                 | ' d:=5-4*r
14350     0F 19 02 F6 | 	mov	arg04, local01
14354     02 18 66 F0 | 	shl	arg04, #2
14358     05 26 06 F6 | 	mov	local05, #5
1435c     0C 27 82 F1 | 	sub	local05, arg04
14360                 | ' x:=0
14360     00 28 06 F6 | 	mov	local06, #0
14364                 | ' y:=r
14364                 | ' da:=(-2*r+5)*4
14364                 | ' db:=3*4
14364     0C 2A 06 F6 | 	mov	local07, #12
14368                 | ' repeat while (x<=y) 
14368     18 2C 62 FD | 	getqx	local08
1436c     05 2C 06 F1 | 	add	local08, #5
14370     02 2C 66 F0 | 	shl	local08, #2
14374                 | LR__1640
14374     0F 29 5A F2 | 	cmps	local06, local01 wcz
14378     B4 00 90 1D |  if_a	jmp	#LR__1642
1437c                 | '   fastline(x0-x,x0+x,y0-y,c)
1437c     10 13 02 F6 | 	mov	arg01, local02
14380     14 13 82 F1 | 	sub	arg01, local06
14384     10 15 02 F6 | 	mov	arg02, local02
14388     14 15 02 F1 | 	add	arg02, local06
1438c     11 17 02 F6 | 	mov	arg03, local03
14390     0F 17 82 F1 | 	sub	arg03, local01
14394     12 19 02 F6 | 	mov	arg04, local04
14398     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1439c                 | '   fastline(x0-x,x0+x,y0+y,c)
1439c     10 13 02 F6 | 	mov	arg01, local02
143a0     14 13 82 F1 | 	sub	arg01, local06
143a4     10 15 02 F6 | 	mov	arg02, local02
143a8     14 15 02 F1 | 	add	arg02, local06
143ac     11 17 02 F6 | 	mov	arg03, local03
143b0     0F 17 02 F1 | 	add	arg03, local01
143b4     12 19 02 F6 | 	mov	arg04, local04
143b8     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
143bc                 | '   fastline(x0-y,x0+y,y0-x,c)
143bc     10 13 02 F6 | 	mov	arg01, local02
143c0     0F 13 82 F1 | 	sub	arg01, local01
143c4     10 15 02 F6 | 	mov	arg02, local02
143c8     0F 15 02 F1 | 	add	arg02, local01
143cc     11 17 02 F6 | 	mov	arg03, local03
143d0     14 17 82 F1 | 	sub	arg03, local06
143d4     12 19 02 F6 | 	mov	arg04, local04
143d8     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
143dc                 | '   fastline(x0-y,x0+y,y0+x,c)
143dc     10 13 02 F6 | 	mov	arg01, local02
143e0     0F 13 82 F1 | 	sub	arg01, local01
143e4     10 15 02 F6 | 	mov	arg02, local02
143e8     0F 15 02 F1 | 	add	arg02, local01
143ec     11 17 02 F6 | 	mov	arg03, local03
143f0     14 17 02 F1 | 	add	arg03, local06
143f4     12 19 02 F6 | 	mov	arg04, local04
143f8     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
143fc                 | '   if d>0 
143fc     01 26 56 F2 | 	cmps	local05, #1 wc
14400     18 00 90 CD |  if_b	jmp	#LR__1641
14404                 | '     d+=da
14404     16 27 02 F1 | 	add	local05, local08
14408                 | '     y-=1
14408     01 1E 86 F1 | 	sub	local01, #1
1440c                 | '     x+=1
1440c     01 28 06 F1 | 	add	local06, #1
14410                 | '     da+=4*4
14410     10 2C 06 F1 | 	add	local08, #16
14414                 | '     db+=2*4
14414     08 2A 06 F1 | 	add	local07, #8
14418     58 FF 9F FD | 	jmp	#LR__1640
1441c                 | LR__1641
1441c                 | '   else
1441c                 | '     d+=db
1441c     15 27 02 F1 | 	add	local05, local07
14420                 | '     x+=1
14420     01 28 06 F1 | 	add	local06, #1
14424                 | '     da+=2*4
14424     08 2C 06 F1 | 	add	local08, #8
14428                 | '     db+=2*4
14428     08 2A 06 F1 | 	add	local07, #8
1442c     44 FF 9F FD | 	jmp	#LR__1640
14430                 | LR__1642
14430     A7 F0 03 F6 | 	mov	ptra, fp
14434     B2 00 A0 FD | 	call	#popregs_
14438                 | _hg010b_spin2_fcircle_ret
14438     2D 00 64 FD | 	ret
1443c                 | 
1443c                 | '  
1443c                 | ' '-- A circle ------------------------------------------------------------ 
1443c                 | '  
1443c                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
1443c                 | _hg010b_spin2_circle
1443c     08 4A 05 F6 | 	mov	COUNT_, #8
14440     A8 00 A0 FD | 	call	#pushregs_
14444     0B 1F 02 F6 | 	mov	local01, arg03
14448     FF FF 7F FF 
1444c     FE 1F 06 FD | 	qmul	local01, ##-2
14450     09 21 02 F6 | 	mov	local02, arg01
14454     0A 23 02 F6 | 	mov	local03, arg02
14458     0C 25 02 F6 | 	mov	local04, arg04
1445c                 | ' 
1445c                 | '  
1445c                 | ' d:=5-4*r
1445c     0F 19 02 F6 | 	mov	arg04, local01
14460     02 18 66 F0 | 	shl	arg04, #2
14464     05 26 06 F6 | 	mov	local05, #5
14468     0C 27 82 F1 | 	sub	local05, arg04
1446c                 | ' x:=0
1446c     00 28 06 F6 | 	mov	local06, #0
14470                 | ' y:=r
14470                 | ' da:=(-2*r+5)*4
14470                 | ' db:=3*4
14470     0C 2A 06 F6 | 	mov	local07, #12
14474                 | ' repeat while (x<=y) 
14474     18 2C 62 FD | 	getqx	local08
14478     05 2C 06 F1 | 	add	local08, #5
1447c     02 2C 66 F0 | 	shl	local08, #2
14480                 | LR__1650
14480     0F 29 5A F2 | 	cmps	local06, local01 wcz
14484     F4 00 90 1D |  if_a	jmp	#LR__1652
14488                 | '   putpixel(x0-x,y0-y,c)
14488     10 13 02 F6 | 	mov	arg01, local02
1448c     14 13 82 F1 | 	sub	arg01, local06
14490     11 15 02 F6 | 	mov	arg02, local03
14494     0F 15 82 F1 | 	sub	arg02, local01
14498     12 17 02 F6 | 	mov	arg03, local04
1449c     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
144a0                 | '   putpixel(x0-x,y0+y,c)
144a0     10 13 02 F6 | 	mov	arg01, local02
144a4     14 13 82 F1 | 	sub	arg01, local06
144a8     11 15 02 F6 | 	mov	arg02, local03
144ac     0F 15 02 F1 | 	add	arg02, local01
144b0     12 17 02 F6 | 	mov	arg03, local04
144b4     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
144b8                 | '   putpixel(x0+x,y0-y,c)
144b8     10 13 02 F6 | 	mov	arg01, local02
144bc     14 13 02 F1 | 	add	arg01, local06
144c0     11 15 02 F6 | 	mov	arg02, local03
144c4     0F 15 82 F1 | 	sub	arg02, local01
144c8     12 17 02 F6 | 	mov	arg03, local04
144cc     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
144d0                 | '   putpixel(x0+x,y0+y,c)
144d0     10 13 02 F6 | 	mov	arg01, local02
144d4     14 13 02 F1 | 	add	arg01, local06
144d8     11 15 02 F6 | 	mov	arg02, local03
144dc     0F 15 02 F1 | 	add	arg02, local01
144e0     12 17 02 F6 | 	mov	arg03, local04
144e4     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
144e8                 | '   putpixel(x0-y,y0-x,c)
144e8     10 13 02 F6 | 	mov	arg01, local02
144ec     0F 13 82 F1 | 	sub	arg01, local01
144f0     11 15 02 F6 | 	mov	arg02, local03
144f4     14 15 82 F1 | 	sub	arg02, local06
144f8     12 17 02 F6 | 	mov	arg03, local04
144fc     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
14500                 | '   putpixel(x0-y,y0+x,c)
14500     10 13 02 F6 | 	mov	arg01, local02
14504     0F 13 82 F1 | 	sub	arg01, local01
14508     11 15 02 F6 | 	mov	arg02, local03
1450c     14 15 02 F1 | 	add	arg02, local06
14510     12 17 02 F6 | 	mov	arg03, local04
14514     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
14518                 | '   putpixel(x0+y,y0-x,c)
14518     10 13 02 F6 | 	mov	arg01, local02
1451c     0F 13 02 F1 | 	add	arg01, local01
14520     11 15 02 F6 | 	mov	arg02, local03
14524     14 15 82 F1 | 	sub	arg02, local06
14528     12 17 02 F6 | 	mov	arg03, local04
1452c     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
14530                 | '   putpixel(x0+y,y0+x,c)
14530     10 13 02 F6 | 	mov	arg01, local02
14534     0F 13 02 F1 | 	add	arg01, local01
14538     11 15 02 F6 | 	mov	arg02, local03
1453c     14 15 02 F1 | 	add	arg02, local06
14540     12 17 02 F6 | 	mov	arg03, local04
14544     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
14548                 | '   if d>0 
14548     01 26 56 F2 | 	cmps	local05, #1 wc
1454c     18 00 90 CD |  if_b	jmp	#LR__1651
14550                 | '     d+=da
14550     16 27 02 F1 | 	add	local05, local08
14554                 | '     y-=1
14554     01 1E 86 F1 | 	sub	local01, #1
14558                 | '     x+=1
14558     01 28 06 F1 | 	add	local06, #1
1455c                 | '     da+=4*4
1455c     10 2C 06 F1 | 	add	local08, #16
14560                 | '     db+=2*4
14560     08 2A 06 F1 | 	add	local07, #8
14564     18 FF 9F FD | 	jmp	#LR__1650
14568                 | LR__1651
14568                 | '   else
14568                 | '     d+=db
14568     15 27 02 F1 | 	add	local05, local07
1456c                 | '     x+=1
1456c     01 28 06 F1 | 	add	local06, #1
14570                 | '     da+=2*4
14570     08 2C 06 F1 | 	add	local08, #8
14574                 | '     db+=2*4
14574     08 2A 06 F1 | 	add	local07, #8
14578     04 FF 9F FD | 	jmp	#LR__1650
1457c                 | LR__1652
1457c     A7 F0 03 F6 | 	mov	ptra, fp
14580     B2 00 A0 FD | 	call	#popregs_
14584                 | _hg010b_spin2_circle_ret
14584     2D 00 64 FD | 	ret
14588                 | 
14588                 | '     
14588                 | ' '-- A frame (an empty rectangle) ---------------------------------------
14588                 | ' 
14588                 | ' pub frame(x1,y1,x2,y2,c)
14588                 | _hg010b_spin2_frame
14588     05 4A 05 F6 | 	mov	COUNT_, #5
1458c     A8 00 A0 FD | 	call	#pushregs_
14590     09 1F 02 F6 | 	mov	local01, arg01
14594     0A 21 02 F6 | 	mov	local02, arg02
14598     0B 23 02 F6 | 	mov	local03, arg03
1459c     0C 25 02 F6 | 	mov	local04, arg04
145a0     0D 27 02 F6 | 	mov	local05, arg05
145a4                 | ' 
145a4                 | ' fastline(x1,x2,y1,c)
145a4     0F 13 02 F6 | 	mov	arg01, local01
145a8     11 15 02 F6 | 	mov	arg02, local03
145ac     10 17 02 F6 | 	mov	arg03, local02
145b0     13 19 02 F6 | 	mov	arg04, local05
145b4     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
145b8                 | ' fastline(x1,x2,y2,c)
145b8     0F 13 02 F6 | 	mov	arg01, local01
145bc     11 15 02 F6 | 	mov	arg02, local03
145c0     12 17 02 F6 | 	mov	arg03, local04
145c4     13 19 02 F6 | 	mov	arg04, local05
145c8     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
145cc                 | ' line(x1,y1,x1,y2,c)
145cc     0F 13 02 F6 | 	mov	arg01, local01
145d0     10 15 02 F6 | 	mov	arg02, local02
145d4     0F 17 02 F6 | 	mov	arg03, local01
145d8     12 19 02 F6 | 	mov	arg04, local04
145dc     13 1B 02 F6 | 	mov	arg05, local05
145e0                 | ' draw(x1,y1,x2,y2,c)
145e0     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
145e4                 | ' line(x2,y1,x2,y2,c)
145e4     11 13 02 F6 | 	mov	arg01, local03
145e8     10 15 02 F6 | 	mov	arg02, local02
145ec     11 17 02 F6 | 	mov	arg03, local03
145f0     12 19 02 F6 | 	mov	arg04, local04
145f4     13 1B 02 F6 | 	mov	arg05, local05
145f8                 | ' draw(x1,y1,x2,y2,c)
145f8     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
145fc     A7 F0 03 F6 | 	mov	ptra, fp
14600     B2 00 A0 FD | 	call	#popregs_
14604                 | _hg010b_spin2_frame_ret
14604     2D 00 64 FD | 	ret
14608                 | 
14608                 | ' 
14608                 | ' '-- A box (a filled rectangle) ----------------------------------------
14608                 | ' 
14608                 | ' pub box(x1,y1,x2,y2,c) |yy
14608                 | _hg010b_spin2_box
14608     06 4A 05 F6 | 	mov	COUNT_, #6
1460c     A8 00 A0 FD | 	call	#pushregs_
14610     09 1F 02 F6 | 	mov	local01, arg01
14614     0A 21 02 F6 | 	mov	local02, arg02
14618     0B 23 02 F6 | 	mov	local03, arg03
1461c     0C 25 02 F6 | 	mov	local04, arg04
14620     0D 27 02 F6 | 	mov	local05, arg05
14624                 | ' 
14624                 | ' repeat yy from y1 to y2
14624     10 25 52 F2 | 	cmps	local04, local02 wc
14628     01 28 86 F6 | 	negc	local06, #1
1462c     14 25 02 F1 | 	add	local04, local06
14630                 | LR__1660
14630                 | '   fastline(x1,x2,yy,c)
14630     0F 13 02 F6 | 	mov	arg01, local01
14634     11 15 02 F6 | 	mov	arg02, local03
14638     13 19 02 F6 | 	mov	arg04, local05
1463c     10 17 02 F6 | 	mov	arg03, local02
14640     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
14644     14 21 02 F1 | 	add	local02, local06
14648     12 21 0A F2 | 	cmp	local02, local04 wz
1464c     E0 FF 9F 5D |  if_ne	jmp	#LR__1660
14650     A7 F0 03 F6 | 	mov	ptra, fp
14654     B2 00 A0 FD | 	call	#popregs_
14658                 | _hg010b_spin2_box_ret
14658     2D 00 64 FD | 	ret
1465c                 | 
1465c                 | '       
1465c                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
1465c                 | _hg010b_spin2_putcharxycgf
1465c                 | ' 
1465c                 | '  
1465c                 | ' repeat yy from 0 to 15
1465c     00 00 06 F6 | 	mov	_var01, #0
14660     97 8C 48 FB | 	callpa	#(@LR__1672-@LR__1670)>>2,fcache_load_ptr_
14664                 | LR__1670
14664                 | ' 
14664                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
14664     91 E4 05 F1 | 	add	objptr, #145
14668     F2 02 02 FB | 	rdlong	_var02, objptr
1466c     0A 02 66 F0 | 	shl	_var02, #10
14670     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
14674     01 05 02 F1 | 	add	_var03, _var02
14678     0B 03 02 F6 | 	mov	_var02, arg03
1467c     04 02 66 F0 | 	shl	_var02, #4
14680     01 05 02 F1 | 	add	_var03, _var02
14684     00 05 02 F1 | 	add	_var03, _var01
14688     02 05 C2 FA | 	rdbyte	_var03, _var03
1468c                 | '   asm
1468c     00 04 0E F4 | 	testb	_var03, #0 wz
14690     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
14694     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
14698     01 04 0E F4 | 	testb	_var03, #1 wz
1469c     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
146a0     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
146a4     02 04 0E F4 | 	testb	_var03, #2 wz
146a8     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
146ac     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
146b0     03 04 0E F4 | 	testb	_var03, #3 wz
146b4     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
146b8     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
146bc     04 04 0E F4 | 	testb	_var03, #4 wz
146c0     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
146c4     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
146c8     05 04 0E F4 | 	testb	_var03, #5 wz
146cc     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
146d0     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
146d4     06 04 0E F4 | 	testb	_var03, #6 wz
146d8     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
146dc     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
146e0     07 04 0E F4 | 	testb	_var03, #7 wz
146e4     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
146e8     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
146ec                 | '   
146ec                 | '   ccc[0]:=c1
146ec     99 E5 05 F1 | 	add	objptr, #409
146f0     F2 06 62 FC | 	wrlong	_var04, objptr
146f4                 | '   ccc[1]:=c2 
146f4     04 E4 05 F1 | 	add	objptr, #4
146f8     F2 08 62 FC | 	wrlong	_var05, objptr
146fc                 | '   long[mailbox0][2]:=8
146fc     49 E4 85 F1 | 	sub	objptr, #73
14700     F2 04 02 FB | 	rdlong	_var03, objptr
14704     08 04 06 F1 | 	add	_var03, #8
14708     02 11 68 FC | 	wrlong	#8, _var03
1470c                 | '   long[mailbox0][1]:=@ccc
1470c     45 E4 05 F1 | 	add	objptr, #69
14710     F2 04 02 F6 | 	mov	_var03, objptr
14714     45 E4 85 F1 | 	sub	objptr, #69
14718     F2 02 02 FB | 	rdlong	_var02, objptr
1471c     04 02 06 F1 | 	add	_var02, #4
14720     01 05 62 FC | 	wrlong	_var03, _var02
14724                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
14724     0C E5 85 F1 | 	sub	objptr, #268
14728     F2 04 02 FB | 	rdlong	_var03, objptr
1472c     0A 03 02 F6 | 	mov	_var02, arg02
14730     00 03 02 F1 | 	add	_var02, _var01
14734     0A 02 66 F0 | 	shl	_var02, #10
14738     09 0B 02 F6 | 	mov	_var06, arg01
1473c     02 0A 66 F0 | 	shl	_var06, #2
14740     05 03 02 F1 | 	add	_var02, _var06
14744     01 05 02 F1 | 	add	_var03, _var02
14748     00 00 78 FF 
1474c     00 04 06 F1 | 	add	_var03, ##-268435456
14750     0C E5 05 F1 | 	add	objptr, #268
14754     F2 0A 02 FB | 	rdlong	_var06, objptr
14758     05 05 62 FC | 	wrlong	_var03, _var06
1475c                 | '   repeat
1475c                 | LR__1671
1475c     F2 04 02 FB | 	rdlong	_var03, objptr
14760     02 03 02 FB | 	rdlong	_var02, _var03
14764     00 02 56 F2 | 	cmps	_var02, #0 wc
14768     F0 FF 9F CD |  if_b	jmp	#LR__1671
1476c     E5 E5 85 F1 | 	sub	objptr, #485
14770     01 00 06 F1 | 	add	_var01, #1
14774     10 00 56 F2 | 	cmps	_var01, #16 wc
14778     E8 FE 9F CD |  if_b	jmp	#LR__1670
1477c                 | LR__1672
1477c                 | _hg010b_spin2_putcharxycgf_ret
1477c     2D 00 64 FD | 	ret
14780                 | 
14780                 | ' 
14780                 | ' 
14780                 | ' '**********************************************************************r***
14780                 | ' '                                                                        *
14780                 | ' ' Font related functions                                                 *
14780                 | ' '                                                                        *
14780                 | ' '*************************************************************************
14780                 | ' 
14780                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
14780                 | ' 
14780                 | ' pub setfontfamily(afontnum)
14780                 | _hg010b_spin2_setfontfamily
14780                 | ' 
14780                 | ' font_family:=afontnum
14780     91 E4 05 F1 | 	add	objptr, #145
14784     F2 12 62 FC | 	wrlong	arg01, objptr
14788     91 E4 85 F1 | 	sub	objptr, #145
1478c                 | ' 'if afontnum==8
1478c                 | ' '  font_ptr:=@amiga_font
1478c                 | ' 
1478c                 | ' if afontnum==4
1478c     04 12 0E F2 | 	cmp	arg01, #4 wz
14790                 | '   font_ptr:=@st_font
14790     08 00 00 AF 
14794     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
14798     04 E4 05 A1 |  if_e	add	objptr, #4
1479c     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
147a0     04 E4 85 A1 |  if_e	sub	objptr, #4
147a4     08 00 00 AF 
147a8     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
147ac                 | ' if afontnum==0
147ac     00 12 0E F2 | 	cmp	arg01, #0 wz
147b0                 | '   font_ptr:=@vga_font
147b0     04 E4 05 A1 |  if_e	add	objptr, #4
147b4     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
147b8     04 E4 85 A1 |  if_e	sub	objptr, #4
147bc                 | _hg010b_spin2_setfontfamily_ret
147bc     2D 00 64 FD | 	ret
147c0                 | 
147c0                 | ' 
147c0                 | ' '*************************************************************************
147c0                 | ' '                                                                        *
147c0                 | ' '  Cursor functions                                                      *
147c0                 | ' '                                                                        *
147c0                 | ' '*************************************************************************
147c0                 | ' 
147c0                 | ' 
147c0                 | ' pub setcursorpos(x,y)
147c0                 | _hg010b_spin2_setcursorpos
147c0                 | ' 
147c0                 | ' ''---------- Set the (x,y) position of cursor
147c0                 | ' 
147c0                 | ' cursor_x:=x
147c0     38 E4 05 F1 | 	add	objptr, #56
147c4     F2 12 52 FC | 	wrword	arg01, objptr
147c8                 | ' cursor_y:=y
147c8     02 E4 05 F1 | 	add	objptr, #2
147cc     F2 14 42 FC | 	wrbyte	arg02, objptr
147d0                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
147d0     02 E4 85 F1 | 	sub	objptr, #2
147d4     F2 14 E2 FA | 	rdword	arg02, objptr
147d8     02 14 66 F0 | 	shl	arg02, #2
147dc     02 E4 05 F1 | 	add	objptr, #2
147e0     F2 16 C2 FA | 	rdbyte	arg03, objptr
147e4     3A E4 85 F1 | 	sub	objptr, #58
147e8     04 16 66 F0 | 	shl	arg03, #4
147ec     11 12 06 F6 | 	mov	arg01, #17
147f0     70 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
147f4                 | _hg010b_spin2_setcursorpos_ret
147f4     2D 00 64 FD | 	ret
147f8                 | 
147f8                 | ' 
147f8                 | ' '*************************************************************************
147f8                 | ' '                                                                        *
147f8                 | ' '  VBlank functions                                                      *
147f8                 | ' '                                                                        *
147f8                 | ' '*************************************************************************
147f8                 | ' 
147f8                 | ' pub waitvbl(amount) | i
147f8                 | _hg010b_spin2_waitvbl
147f8     03 4A 05 F6 | 	mov	COUNT_, #3
147fc     A8 00 A0 FD | 	call	#pushregs_
14800     09 1F 02 F6 | 	mov	local01, arg01
14804                 | ' 
14804                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
14804                 | ' 
14804                 | ' repeat i from 1 to amount
14804     01 20 06 F6 | 	mov	local02, #1
14808     01 1E 56 F2 | 	cmps	local01, #1 wc
1480c     01 22 86 F6 | 	negc	local03, #1
14810     11 1F 02 F1 | 	add	local01, local03
14814                 | LR__1680
14814                 | '   repeat until vblank==0
14814                 | LR__1681
14814     45 E4 05 F1 | 	add	objptr, #69
14818     F2 12 0A FB | 	rdlong	arg01, objptr wz
1481c     45 E4 85 F1 | 	sub	objptr, #69
14820     0C 00 90 AD |  if_e	jmp	#LR__1682
14824                 | '     waitus(100)
14824     64 12 06 F6 | 	mov	arg01, #100
14828     7C 16 B0 FD | 	call	#__system___waitus
1482c     E4 FF 9F FD | 	jmp	#LR__1681
14830                 | LR__1682
14830                 | '   repeat until vblank==1
14830                 | LR__1683
14830     45 E4 05 F1 | 	add	objptr, #69
14834     F2 12 02 FB | 	rdlong	arg01, objptr
14838     45 E4 85 F1 | 	sub	objptr, #69
1483c     01 12 0E F2 | 	cmp	arg01, #1 wz
14840     0C 00 90 AD |  if_e	jmp	#LR__1684
14844                 | '     waitus(100)
14844     64 12 06 F6 | 	mov	arg01, #100
14848     5C 16 B0 FD | 	call	#__system___waitus
1484c     E0 FF 9F FD | 	jmp	#LR__1683
14850                 | LR__1684
14850     11 21 02 F1 | 	add	local02, local03
14854     0F 21 0A F2 | 	cmp	local02, local01 wz
14858     B8 FF 9F 5D |  if_ne	jmp	#LR__1680
1485c     A7 F0 03 F6 | 	mov	ptra, fp
14860     B2 00 A0 FD | 	call	#popregs_
14864                 | _hg010b_spin2_waitvbl_ret
14864     2D 00 64 FD | 	ret
14868                 | 
14868                 | ' 
14868                 | ' 
14868                 | ' pub cls(fc,bc)   :c,i
14868                 | _hg010b_spin2_cls
14868     02 4A 05 F6 | 	mov	COUNT_, #2
1486c     A8 00 A0 FD | 	call	#pushregs_
14870     09 1F 02 F6 | 	mov	local01, arg01
14874     0A 21 02 F6 | 	mov	local02, arg02
14878                 | ' 
14878                 | ' c:=bc
14878                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
14878     D9 E4 05 F1 | 	add	objptr, #217
1487c     F2 12 02 FB | 	rdlong	arg01, objptr
14880     A5 E4 85 F1 | 	sub	objptr, #165
14884     F2 16 02 FB | 	rdlong	arg03, objptr
14888     02 16 66 F0 | 	shl	arg03, #2
1488c     10 15 02 F6 | 	mov	arg02, local02
14890     00 18 06 F6 | 	mov	arg04, #0
14894     01 1A 06 F6 | 	mov	arg05, #1
14898     0B 00 00 FF 
1489c     8C E4 05 F1 | 	add	objptr, ##5772
148a0     F0 08 B0 FD | 	call	#_psram_spin2_fill
148a4                 | ' setwritecolors(fc,bc)
148a4                 | ' 
148a4                 | ' write_color:=ff
148a4     0B 00 00 FF 
148a8     83 E4 85 F1 | 	sub	objptr, ##5763
148ac     F2 1E 62 FC | 	wrlong	local01, objptr
148b0                 | ' write_background:=bb
148b0     04 E4 05 F1 | 	add	objptr, #4
148b4     F2 20 62 FC | 	wrlong	local02, objptr
148b8                 | ' cursor_x:=0
148b8     09 E4 85 F1 | 	sub	objptr, #9
148bc     F2 00 58 FC | 	wrword	#0, objptr
148c0                 | ' cursor_y:=0
148c0     02 E4 05 F1 | 	add	objptr, #2
148c4     F2 00 48 FC | 	wrbyte	#0, objptr
148c8                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
148c8     02 E4 85 F1 | 	sub	objptr, #2
148cc     F2 14 E2 FA | 	rdword	arg02, objptr
148d0     02 14 66 F0 | 	shl	arg02, #2
148d4     02 E4 05 F1 | 	add	objptr, #2
148d8     F2 16 C2 FA | 	rdbyte	arg03, objptr
148dc     3A E4 85 F1 | 	sub	objptr, #58
148e0     04 16 66 F0 | 	shl	arg03, #4
148e4     11 12 06 F6 | 	mov	arg01, #17
148e8     78 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
148ec                 | ' setcursorcolor(fc)
148ec     0F 13 02 F6 | 	mov	arg01, local01
148f0     2C EF BF FD | 	call	#_hg010b_spin2_setcursorcolor
148f4     10 FB 01 F6 | 	mov	result1, local02
148f8     00 FC 05 F6 | 	mov	result2, #0
148fc     A7 F0 03 F6 | 	mov	ptra, fp
14900     B2 00 A0 FD | 	call	#popregs_
14904                 | _hg010b_spin2_cls_ret
14904     2D 00 64 FD | 	ret
14908                 | 
14908                 | ' 
14908                 | ' ''---------- Output a char at the cursor position, move the cursor 
14908                 | ' 
14908                 | ' pub putchar(achar) | c,x,y,l,newcpl
14908                 | _hg010b_spin2_putchar
14908     01 4A 05 F6 | 	mov	COUNT_, #1
1490c     A8 00 A0 FD | 	call	#pushregs_
14910     09 1F 02 F6 | 	mov	local01, arg01
14914                 | ' 
14914                 | ' if achar==10
14914     0A 1E 0E F2 | 	cmp	local01, #10 wz
14918                 | '   crlf()
14918     68 03 B0 AD |  if_e	call	#_hg010b_spin2_crlf
1491c                 | ' if achar==9
1491c     09 1E 0E F2 | 	cmp	local01, #9 wz
14920     18 00 90 5D |  if_ne	jmp	#LR__1690
14924                 | '   cursor_x:=(cursor_x& %11110000)+16
14924     38 E4 05 F1 | 	add	objptr, #56
14928     F2 16 E2 FA | 	rdword	arg03, objptr
1492c     F0 16 06 F5 | 	and	arg03, #240
14930     10 16 06 F1 | 	add	arg03, #16
14934     F2 16 52 FC | 	wrword	arg03, objptr
14938     38 E4 85 F1 | 	sub	objptr, #56
1493c                 | LR__1690
1493c                 | '   
1493c                 | ' if (achar<>9) && (achar<>10) 
1493c     09 1E 0E F2 | 	cmp	local01, #9 wz
14940     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
14944     44 00 90 AD |  if_e	jmp	#LR__1691
14948                 | '   putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
14948     38 E4 05 F1 | 	add	objptr, #56
1494c     F2 12 E2 FA | 	rdword	arg01, objptr
14950     02 E4 05 F1 | 	add	objptr, #2
14954     F2 14 C2 FA | 	rdbyte	arg02, objptr
14958     04 14 66 F0 | 	shl	arg02, #4
1495c     03 E4 05 F1 | 	add	objptr, #3
14960     F2 18 02 FB | 	rdlong	arg04, objptr
14964     04 E4 05 F1 | 	add	objptr, #4
14968     F2 1A 02 FB | 	rdlong	arg05, objptr
1496c     41 E4 85 F1 | 	sub	objptr, #65
14970     0F 17 02 F6 | 	mov	arg03, local01
14974     E4 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
14978                 | '   cursor_x+=2
14978     38 E4 05 F1 | 	add	objptr, #56
1497c     F2 1E E2 FA | 	rdword	local01, objptr
14980     02 1E 06 F1 | 	add	local01, #2
14984     F2 1E 52 FC | 	wrword	local01, objptr
14988     38 E4 85 F1 | 	sub	objptr, #56
1498c                 | LR__1691
1498c                 | ' 
1498c                 | ' if cursor_x>=256
1498c     38 E4 05 F1 | 	add	objptr, #56
14990     F2 1E E2 FA | 	rdword	local01, objptr
14994     38 E4 85 F1 | 	sub	objptr, #56
14998     00 1F 56 F2 | 	cmps	local01, #256 wc
1499c     64 00 90 CD |  if_b	jmp	#LR__1693
149a0                 | '   cursor_x:=0
149a0     38 E4 05 F1 | 	add	objptr, #56
149a4     F2 00 58 FC | 	wrword	#0, objptr
149a8                 | '   cursor_y+=1
149a8     02 E4 05 F1 | 	add	objptr, #2
149ac     F2 1E C2 FA | 	rdbyte	local01, objptr
149b0     01 1E 06 F1 | 	add	local01, #1
149b4     F2 1E 42 FC | 	wrbyte	local01, objptr
149b8                 | '   if cursor_y>st_lines-1
149b8     C3 E4 05 F1 | 	add	objptr, #195
149bc     F2 1E 02 FB | 	rdlong	local01, objptr
149c0     01 1E 86 F1 | 	sub	local01, #1
149c4     C3 E4 85 F1 | 	sub	objptr, #195
149c8     F2 16 C2 FA | 	rdbyte	arg03, objptr
149cc     3A E4 85 F1 | 	sub	objptr, #58
149d0     0F 17 5A F2 | 	cmps	arg03, local01 wcz
149d4     2C 00 90 ED |  if_be	jmp	#LR__1692
149d8                 | '     scrollup()
149d8     00 12 06 F6 | 	mov	arg01, #0
149dc     01 00 00 FF 
149e0     40 14 06 F6 | 	mov	arg02, ##576
149e4     10 16 06 F6 | 	mov	arg03, #16
149e8     9C 01 B0 FD | 	call	#_hg010b_spin2_scrollup
149ec                 | '     cursor_y:=st_lines-1
149ec     FD E4 05 F1 | 	add	objptr, #253
149f0     F2 1E 02 FB | 	rdlong	local01, objptr
149f4     01 1E 86 F1 | 	sub	local01, #1
149f8     C3 E4 85 F1 | 	sub	objptr, #195
149fc     F2 1E 42 FC | 	wrbyte	local01, objptr
14a00     3A E4 85 F1 | 	sub	objptr, #58
14a04                 | LR__1692
14a04                 | LR__1693
14a04                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
14a04     38 E4 05 F1 | 	add	objptr, #56
14a08     F2 14 E2 FA | 	rdword	arg02, objptr
14a0c     02 14 66 F0 | 	shl	arg02, #2
14a10     02 E4 05 F1 | 	add	objptr, #2
14a14     F2 16 C2 FA | 	rdbyte	arg03, objptr
14a18     3A E4 85 F1 | 	sub	objptr, #58
14a1c     04 16 66 F0 | 	shl	arg03, #4
14a20     11 12 06 F6 | 	mov	arg01, #17
14a24     3C F1 BF FD | 	call	#_hg010b_spin2_setspritepos
14a28     A7 F0 03 F6 | 	mov	ptra, fp
14a2c     B2 00 A0 FD | 	call	#popregs_
14a30                 | _hg010b_spin2_putchar_ret
14a30     2D 00 64 FD | 	ret
14a34                 | 
14a34                 | '     
14a34                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
14a34                 | ' 
14a34                 | ' pub putchar2(achar) | c,x,y,l,newcpl
14a34                 | _hg010b_spin2_putchar2
14a34     01 4A 05 F6 | 	mov	COUNT_, #1
14a38     A8 00 A0 FD | 	call	#pushregs_
14a3c                 | ' 
14a3c                 | ' putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
14a3c     38 E4 05 F1 | 	add	objptr, #56
14a40     F2 1E E2 FA | 	rdword	local01, objptr
14a44     02 E4 05 F1 | 	add	objptr, #2
14a48     F2 14 C2 FA | 	rdbyte	arg02, objptr
14a4c     04 14 66 F0 | 	shl	arg02, #4
14a50     09 17 02 F6 | 	mov	arg03, arg01
14a54     03 E4 05 F1 | 	add	objptr, #3
14a58     F2 18 02 FB | 	rdlong	arg04, objptr
14a5c     04 E4 05 F1 | 	add	objptr, #4
14a60     F2 1A 02 FB | 	rdlong	arg05, objptr
14a64     41 E4 85 F1 | 	sub	objptr, #65
14a68     0F 13 02 F6 | 	mov	arg01, local01
14a6c     EC FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
14a70                 | ' cursor_x+=2
14a70     38 E4 05 F1 | 	add	objptr, #56
14a74     F2 1E E2 FA | 	rdword	local01, objptr
14a78     02 1E 06 F1 | 	add	local01, #2
14a7c     F2 1E 52 FC | 	wrword	local01, objptr
14a80                 | ' if cursor_x>=256
14a80     F2 1E E2 FA | 	rdword	local01, objptr
14a84     38 E4 85 F1 | 	sub	objptr, #56
14a88     00 1F 56 F2 | 	cmps	local01, #256 wc
14a8c     64 00 90 CD |  if_b	jmp	#LR__1701
14a90                 | '   cursor_x:=0
14a90     38 E4 05 F1 | 	add	objptr, #56
14a94     F2 00 58 FC | 	wrword	#0, objptr
14a98                 | '   cursor_y+=1
14a98     02 E4 05 F1 | 	add	objptr, #2
14a9c     F2 1E C2 FA | 	rdbyte	local01, objptr
14aa0     01 1E 06 F1 | 	add	local01, #1
14aa4     F2 1E 42 FC | 	wrbyte	local01, objptr
14aa8                 | '   if cursor_y>st_lines-1
14aa8     C3 E4 05 F1 | 	add	objptr, #195
14aac     F2 1E 02 FB | 	rdlong	local01, objptr
14ab0     01 1E 86 F1 | 	sub	local01, #1
14ab4     C3 E4 85 F1 | 	sub	objptr, #195
14ab8     F2 1A C2 FA | 	rdbyte	arg05, objptr
14abc     3A E4 85 F1 | 	sub	objptr, #58
14ac0     0F 1B 5A F2 | 	cmps	arg05, local01 wcz
14ac4     2C 00 90 ED |  if_be	jmp	#LR__1700
14ac8                 | '     scrollup()
14ac8     00 12 06 F6 | 	mov	arg01, #0
14acc     01 00 00 FF 
14ad0     40 14 06 F6 | 	mov	arg02, ##576
14ad4     10 16 06 F6 | 	mov	arg03, #16
14ad8     AC 00 B0 FD | 	call	#_hg010b_spin2_scrollup
14adc                 | '     cursor_y:=st_lines-1
14adc     FD E4 05 F1 | 	add	objptr, #253
14ae0     F2 1E 02 FB | 	rdlong	local01, objptr
14ae4     01 1E 86 F1 | 	sub	local01, #1
14ae8     C3 E4 85 F1 | 	sub	objptr, #195
14aec     F2 1E 42 FC | 	wrbyte	local01, objptr
14af0     3A E4 85 F1 | 	sub	objptr, #58
14af4                 | LR__1700
14af4                 | LR__1701
14af4                 | ' setspritepos(17,4*cursor_x,16*cursor_y ) 
14af4     38 E4 05 F1 | 	add	objptr, #56
14af8     F2 14 E2 FA | 	rdword	arg02, objptr
14afc     02 14 66 F0 | 	shl	arg02, #2
14b00     02 E4 05 F1 | 	add	objptr, #2
14b04     F2 16 C2 FA | 	rdbyte	arg03, objptr
14b08     3A E4 85 F1 | 	sub	objptr, #58
14b0c     04 16 66 F0 | 	shl	arg03, #4
14b10     11 12 06 F6 | 	mov	arg01, #17
14b14     4C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
14b18     A7 F0 03 F6 | 	mov	ptra, fp
14b1c     B2 00 A0 FD | 	call	#popregs_
14b20                 | _hg010b_spin2_putchar2_ret
14b20     2D 00 64 FD | 	ret
14b24                 | 
14b24                 | ' ''--------- Output a string at the cursor position, move the cursor  
14b24                 | ' 
14b24                 | ' pub write(text) | iii,c,ncx,ncy
14b24                 | _hg010b_spin2_write
14b24     04 4A 05 F6 | 	mov	COUNT_, #4
14b28     A8 00 A0 FD | 	call	#pushregs_
14b2c     09 1F 02 F6 | 	mov	local01, arg01
14b30                 | ' 
14b30                 | ' repeat iii from 0 to strsize(text)-1
14b30     00 20 06 F6 | 	mov	local02, #0
14b34     0F 13 02 F6 | 	mov	arg01, local01
14b38     09 23 02 F6 | 	mov	local03, arg01
14b3c     97 06 48 FB | 	callpa	#(@LR__1711-@LR__1710)>>2,fcache_load_ptr_
14b40                 | LR__1710
14b40     11 FB C9 FA | 	rdbyte	result1, local03 wz
14b44     01 22 06 51 |  if_ne	add	local03, #1
14b48     F4 FF 9F 5D |  if_ne	jmp	#LR__1710
14b4c                 | LR__1711
14b4c     09 23 82 F1 | 	sub	local03, arg01
14b50     01 22 86 F1 | 	sub	local03, #1
14b54     00 22 56 F2 | 	cmps	local03, #0 wc
14b58     01 24 86 F6 | 	negc	local04, #1
14b5c     12 23 02 F1 | 	add	local03, local04
14b60                 | LR__1712
14b60                 | '   putchar2(byte[text+iii])
14b60     0F 13 02 F6 | 	mov	arg01, local01
14b64     10 13 02 F1 | 	add	arg01, local02
14b68     09 13 C2 FA | 	rdbyte	arg01, arg01
14b6c     C4 FE BF FD | 	call	#_hg010b_spin2_putchar2
14b70     12 21 02 F1 | 	add	local02, local04
14b74     11 21 0A F2 | 	cmp	local02, local03 wz
14b78     E4 FF 9F 5D |  if_ne	jmp	#LR__1712
14b7c     A7 F0 03 F6 | 	mov	ptra, fp
14b80     B2 00 A0 FD | 	call	#popregs_
14b84                 | _hg010b_spin2_write_ret
14b84     2D 00 64 FD | 	ret
14b88                 | 
14b88                 | ' 
14b88                 | ' ''-----------  Scroll the screen one line up
14b88                 | ' 
14b88                 | ' pub scrollup(start=0, end=576 , amount=16) | i
14b88                 | _hg010b_spin2_scrollup
14b88     01 4A 05 F6 | 	mov	COUNT_, #1
14b8c     A8 00 A0 FD | 	call	#pushregs_
14b90                 | ' 	
14b90                 | ' repeat i from 0 to 559 
14b90     00 1E 06 F6 | 	mov	local01, #0
14b94                 | LR__1720
14b94     F5 E4 05 F1 | 	add	objptr, #245
14b98     F2 18 02 FB | 	rdlong	arg04, objptr
14b9c     1C E4 85 F1 | 	sub	objptr, #28
14ba0     F2 14 02 FB | 	rdlong	arg02, objptr
14ba4     0F 13 02 F6 | 	mov	arg01, local01
14ba8     10 12 06 F1 | 	add	arg01, #16
14bac     02 12 66 F0 | 	shl	arg01, #2
14bb0     14 E4 05 F1 | 	add	objptr, #20
14bb4     F2 16 02 FB | 	rdlong	arg03, objptr
14bb8     0B 13 02 FD | 	qmul	arg01, arg03
14bbc                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
14bbc     F6 03 00 FF 
14bc0     00 12 06 F6 | 	mov	arg01, ##519168
14bc4     0C 13 82 F1 | 	sub	arg01, arg04
14bc8     02 16 66 F0 | 	shl	arg03, #2
14bcc     0A 00 00 FF 
14bd0     D3 E5 05 F1 | 	add	objptr, ##5587
14bd4     18 18 62 FD | 	getqx	arg04
14bd8     0C 15 02 F1 | 	add	arg02, arg04
14bdc     7C 04 B0 FD | 	call	#_psram_spin2_read1
14be0     0A 00 00 FF 
14be4     CB E5 85 F1 | 	sub	objptr, ##5579
14be8     F2 18 02 FB | 	rdlong	arg04, objptr
14bec     1C E4 85 F1 | 	sub	objptr, #28
14bf0     F2 14 02 FB | 	rdlong	arg02, objptr
14bf4     0F 13 02 F6 | 	mov	arg01, local01
14bf8     02 12 66 F0 | 	shl	arg01, #2
14bfc     14 E4 05 F1 | 	add	objptr, #20
14c00     F2 16 02 FB | 	rdlong	arg03, objptr
14c04     0B 13 02 FD | 	qmul	arg01, arg03
14c08                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
14c08     F6 03 00 FF 
14c0c     00 12 06 F6 | 	mov	arg01, ##519168
14c10     0C 13 82 F1 | 	sub	arg01, arg04
14c14     02 16 66 F0 | 	shl	arg03, #2
14c18     0A 00 00 FF 
14c1c     D3 E5 05 F1 | 	add	objptr, ##5587
14c20     18 18 62 FD | 	getqx	arg04
14c24     0C 15 02 F1 | 	add	arg02, arg04
14c28     CC 04 B0 FD | 	call	#_psram_spin2_write
14c2c     0B 00 00 FF 
14c30     C0 E4 85 F1 | 	sub	objptr, ##5824
14c34     01 1E 06 F1 | 	add	local01, #1
14c38     01 00 00 FF 
14c3c     30 1E 56 F2 | 	cmps	local01, ##560 wc
14c40     50 FF 9F CD |  if_b	jmp	#LR__1720
14c44                 | ' 
14c44                 | ' repeat i from 560 to 575
14c44     01 00 00 FF 
14c48     30 1E 06 F6 | 	mov	local01, ##560
14c4c                 | LR__1721
14c4c                 | '    fastline(0,1023,i,write_background)   
14c4c     41 E4 05 F1 | 	add	objptr, #65
14c50     F2 18 02 FB | 	rdlong	arg04, objptr
14c54     41 E4 85 F1 | 	sub	objptr, #65
14c58     00 12 06 F6 | 	mov	arg01, #0
14c5c     09 14 CE F9 | 	bmask	arg02, #9
14c60     0F 17 02 F6 | 	mov	arg03, local01
14c64     2C F1 BF FD | 	call	#_hg010b_spin2_fastline
14c68     01 1E 06 F1 | 	add	local01, #1
14c6c     01 00 00 FF 
14c70     40 1E 16 F2 | 	cmp	local01, ##576 wc
14c74     D4 FF 9F CD |  if_b	jmp	#LR__1721
14c78     A7 F0 03 F6 | 	mov	ptra, fp
14c7c     B2 00 A0 FD | 	call	#popregs_
14c80                 | _hg010b_spin2_scrollup_ret
14c80     2D 00 64 FD | 	ret
14c84                 | 
14c84                 | ' 
14c84                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
14c84                 | ' 
14c84                 | ' pub crlf()
14c84                 | _hg010b_spin2_crlf
14c84                 | ' 
14c84                 | ' cursor_x:=leading_spaces*2
14c84     01 00 00 FF 
14c88     B2 E4 05 F1 | 	add	objptr, ##690
14c8c     F2 16 02 FB | 	rdlong	arg03, objptr
14c90     01 16 66 F0 | 	shl	arg03, #1
14c94     01 00 00 FF 
14c98     7A E4 85 F1 | 	sub	objptr, ##634
14c9c     F2 16 52 FC | 	wrword	arg03, objptr
14ca0                 | ' cursor_y+=1
14ca0     02 E4 05 F1 | 	add	objptr, #2
14ca4     F2 16 C2 FA | 	rdbyte	arg03, objptr
14ca8     01 16 06 F1 | 	add	arg03, #1
14cac     F2 16 42 FC | 	wrbyte	arg03, objptr
14cb0                 | ' if cursor_y>st_lines-1
14cb0     C3 E4 05 F1 | 	add	objptr, #195
14cb4     F2 16 02 FB | 	rdlong	arg03, objptr
14cb8     01 16 86 F1 | 	sub	arg03, #1
14cbc     C3 E4 85 F1 | 	sub	objptr, #195
14cc0     F2 14 C2 FA | 	rdbyte	arg02, objptr
14cc4     3A E4 85 F1 | 	sub	objptr, #58
14cc8     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
14ccc     2C 00 90 ED |  if_be	jmp	#LR__1730
14cd0                 | '   scrollup()
14cd0     00 12 06 F6 | 	mov	arg01, #0
14cd4     01 00 00 FF 
14cd8     40 14 06 F6 | 	mov	arg02, ##576
14cdc     10 16 06 F6 | 	mov	arg03, #16
14ce0     A4 FE BF FD | 	call	#_hg010b_spin2_scrollup
14ce4                 | '   cursor_y:=st_lines-1
14ce4     FD E4 05 F1 | 	add	objptr, #253
14ce8     F2 16 02 FB | 	rdlong	arg03, objptr
14cec     01 16 86 F1 | 	sub	arg03, #1
14cf0     C3 E4 85 F1 | 	sub	objptr, #195
14cf4     F2 16 42 FC | 	wrbyte	arg03, objptr
14cf8     3A E4 85 F1 | 	sub	objptr, #58
14cfc                 | LR__1730
14cfc                 | ' setspritepos(17,4*cursor_x,16*cursor_y )  
14cfc     38 E4 05 F1 | 	add	objptr, #56
14d00     F2 14 E2 FA | 	rdword	arg02, objptr
14d04     02 14 66 F0 | 	shl	arg02, #2
14d08     02 E4 05 F1 | 	add	objptr, #2
14d0c     F2 16 C2 FA | 	rdbyte	arg03, objptr
14d10     3A E4 85 F1 | 	sub	objptr, #58
14d14     04 16 66 F0 | 	shl	arg03, #4
14d18     11 12 06 F6 | 	mov	arg01, #17
14d1c     44 EE BF FD | 	call	#_hg010b_spin2_setspritepos
14d20                 | _hg010b_spin2_crlf_ret
14d20     2D 00 64 FD | 	ret
14d24                 | 
14d24                 | ' 
14d24                 | ' 
14d24                 | ' '*************************************************************************
14d24                 | ' '                                                                        *
14d24                 | ' '  Conversions                                                           *
14d24                 | ' '                                                                        *
14d24                 | ' '*************************************************************************
14d24                 | ' 
14d24                 | ' ''---------- Convert a integer to dec string, return a pointer
14d24                 | ' 
14d24                 | ' pub inttostr(i):result |q,pos,k,j
14d24                 | _hg010b_spin2_inttostr
14d24     03 4A 05 F6 | 	mov	COUNT_, #3
14d28     A8 00 A0 FD | 	call	#pushregs_
14d2c     09 1F 0A F6 | 	mov	local01, arg01 wz
14d30                 | ' 
14d30                 | ' j:=i
14d30                 | ' pos:=10
14d30     0A 20 06 F6 | 	mov	local02, #10
14d34                 | ' k:=0
14d34     00 22 06 F6 | 	mov	local03, #0
14d38                 | ' 
14d38                 | ' if (j==0)
14d38     18 00 90 5D |  if_ne	jmp	#LR__1740
14d3c                 | '   n_string[0]:=48
14d3c     49 E4 05 F1 | 	add	objptr, #73
14d40     F2 60 48 FC | 	wrbyte	#48, objptr
14d44                 | '   n_string[1]:=0
14d44     01 E4 05 F1 | 	add	objptr, #1
14d48     F2 00 48 FC | 	wrbyte	#0, objptr
14d4c     4A E4 85 F1 | 	sub	objptr, #74
14d50     C4 00 90 FD | 	jmp	#LR__1747
14d54                 | LR__1740
14d54                 | ' 
14d54                 | ' else
14d54                 | '   if (j<0)
14d54     0F 1F 52 F6 | 	abs	local01, local01 wc
14d58                 | '     j:=0-j
14d58                 | '     k:=45
14d58     2D 22 06 C6 |  if_b	mov	local03, #45
14d5c                 | ' 
14d5c                 | '   n_string[11]:=0
14d5c     54 E4 05 F1 | 	add	objptr, #84
14d60     F2 00 48 FC | 	wrbyte	#0, objptr
14d64     54 E4 85 F1 | 	sub	objptr, #84
14d68     97 24 48 FB | 	callpa	#(@LR__1742-@LR__1741)>>2,fcache_load_ptr_
14d6c                 | '   repeat while (pos>-1)
14d6c                 | LR__1741
14d6c     00 20 56 F2 | 	cmps	local02, #0 wc
14d70     40 00 90 CD |  if_b	jmp	#LR__1743
14d74     0F FB 51 F6 | 	abs	result1, local01 wc
14d78     0A FA 15 FD | 	qdiv	result1, #10
14d7c                 | '     q:=j//10
14d7c     19 FA 61 FD | 	getqy	result1
14d80     FD FA 81 F6 | 	negc	result1, result1
14d84     0F 1F 52 F6 | 	abs	local01, local01 wc
14d88     0A 1E 16 FD | 	qdiv	local01, #10
14d8c                 | '     q:=48+q
14d8c     30 FA 05 F1 | 	add	result1, #48
14d90                 | '     n_string[pos]:=q
14d90     10 1F 02 F6 | 	mov	local01, local02
14d94     49 E4 05 F1 | 	add	objptr, #73
14d98     F2 1E 02 F1 | 	add	local01, objptr
14d9c     0F FB 41 FC | 	wrbyte	result1, local01
14da0                 | '     j:=j/10
14da0     49 E4 85 F1 | 	sub	objptr, #73
14da4                 | '     pos-=1
14da4     01 20 86 F1 | 	sub	local02, #1
14da8     18 1E 62 FD | 	getqx	local01
14dac     0F 1F 82 F6 | 	negc	local01, local01
14db0     B8 FF 9F FD | 	jmp	#LR__1741
14db4                 | LR__1742
14db4                 | LR__1743
14db4                 | '   repeat while n_string[0]==48
14db4                 | LR__1744
14db4     49 E4 05 F1 | 	add	objptr, #73
14db8     F2 16 C2 FA | 	rdbyte	arg03, objptr
14dbc     49 E4 85 F1 | 	sub	objptr, #73
14dc0     30 16 0E F2 | 	cmp	arg03, #48 wz
14dc4     20 00 90 5D |  if_ne	jmp	#LR__1745
14dc8                 | '     bytemove(@n_string,@n_string+1,12)
14dc8     49 E4 05 F1 | 	add	objptr, #73
14dcc     F2 12 02 F6 | 	mov	arg01, objptr
14dd0     F2 14 02 F6 | 	mov	arg02, objptr
14dd4     49 E4 85 F1 | 	sub	objptr, #73
14dd8     01 14 06 F1 | 	add	arg02, #1
14ddc     0C 16 06 F6 | 	mov	arg03, #12
14de0     84 0C B0 FD | 	call	#__system____builtin_memmove
14de4     CC FF 9F FD | 	jmp	#LR__1744
14de8                 | LR__1745
14de8                 | ' 
14de8                 | '   if k==45
14de8     2D 22 0E F2 | 	cmp	local03, #45 wz
14dec     28 00 90 5D |  if_ne	jmp	#LR__1746
14df0                 | '      bytemove(@n_string+1,@n_string,12)
14df0     49 E4 05 F1 | 	add	objptr, #73
14df4     F2 12 02 F6 | 	mov	arg01, objptr
14df8     01 12 06 F1 | 	add	arg01, #1
14dfc     F2 14 02 F6 | 	mov	arg02, objptr
14e00     49 E4 85 F1 | 	sub	objptr, #73
14e04     0C 16 06 F6 | 	mov	arg03, #12
14e08     5C 0C B0 FD | 	call	#__system____builtin_memmove
14e0c                 | '      n_string[0]:=k
14e0c     49 E4 05 F1 | 	add	objptr, #73
14e10     F2 22 42 FC | 	wrbyte	local03, objptr
14e14     49 E4 85 F1 | 	sub	objptr, #73
14e18                 | LR__1746
14e18                 | LR__1747
14e18                 | ' 
14e18                 | ' q:=@n_string
14e18     49 E4 05 F1 | 	add	objptr, #73
14e1c     F2 FA 01 F6 | 	mov	result1, objptr
14e20     49 E4 85 F1 | 	sub	objptr, #73
14e24                 | ' return q
14e24     A7 F0 03 F6 | 	mov	ptra, fp
14e28     B2 00 A0 FD | 	call	#popregs_
14e2c                 | _hg010b_spin2_inttostr_ret
14e2c     2D 00 64 FD | 	ret
14e30                 | 
14e30                 | ' 
14e30                 | ' '..............................................................................
14e30                 | ' 
14e30                 | ' {{
14e30                 | ' }}
14e30                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
14e30                 | _psram_spin2_startx
14e30     04 4A 05 F6 | 	mov	COUNT_, #4
14e34     A8 00 A0 FD | 	call	#pushregs_
14e38     09 1F 02 F6 | 	mov	local01, arg01
14e3c     0B 21 02 F6 | 	mov	local02, arg03
14e40     0C 23 02 F6 | 	mov	local03, arg04
14e44                 | '     stop() ' restart driver if required
14e44     54 01 B0 FD | 	call	#_psram_spin2_stop
14e48     00 1E 0E F2 | 	cmp	local01, #0 wz
14e4c     14 1E 06 AB |  if_e	rdlong	local01, #20
14e50     0F 15 52 F6 | 	abs	arg02, local01 wc
14e54     A1 07 00 FF 
14e58     40 14 16 FD | 	qdiv	arg02, ##1000000
14e5c                 | ' 
14e5c                 | '     ' use current frequency if none specified
14e5c                 | ' 
14e5c                 | '     if freq == 0 
14e5c                 | '         freq := clkfreq 
14e5c                 | ' 
14e5c                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
14e5c                 | ' 
14e5c                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
14e5c                 | '     if burst < 0
14e5c                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
14e5c     18 14 62 FD | 	getqx	arg02
14e60     0A 19 82 F6 | 	negc	arg04, arg02
14e64     03 18 66 F0 | 	shl	arg04, #3
14e68     84 18 86 F1 | 	sub	arg04, #132
14e6c     04 18 46 F0 | 	shr	arg04, #4
14e70     04 18 66 F0 | 	shl	arg04, #4
14e74     00 18 56 F2 | 	cmps	arg04, #0 wc
14e78     0E FA 65 C6 |  if_b	neg	result1, #14
14e7c     10 01 90 CD |  if_b	jmp	#LR__1753
14e80                 | ' 
14e80                 | '     ' compute the input delay
14e80                 | ' 
14e80                 | '     if delay <= 0
14e80     01 20 56 F2 | 	cmps	local02, #1 wc
14e84     10 00 90 3D |  if_ae	jmp	#LR__1750
14e88                 | '         delay := lookupDelay(freq)
14e88     0F 13 02 F6 | 	mov	arg01, local01
14e8c     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
14e90     FD 20 02 F6 | 	mov	local02, result1
14e94     04 00 90 FD | 	jmp	#LR__1751
14e98                 | LR__1750
14e98                 | '     else
14e98                 | '         delay <#= $f ' limit to 15
14e98     0F 20 66 F3 | 	fles	local02, #15
14e9c                 | LR__1751
14e9c                 | ' 
14e9c                 | '     ' create our lock
14e9c                 | ' 
14e9c                 | '     driverlock := LOCKNEW()  
14e9c     00 FA 05 F6 | 	mov	result1, #0
14ea0     04 FA 61 FD | 	locknew	result1
14ea4     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
14ea8     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
14eac                 | '     if driverlock == -1
14eac     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
14eb0     FF FF 7F FF 
14eb4     FF FB 0D F2 | 	cmp	result1, ##-1 wz
14eb8                 | '         return ERR_NO_LOCK
14eb8     1A FA 65 A6 |  if_e	neg	result1, #26
14ebc     D0 00 90 AD |  if_e	jmp	#LR__1753
14ec0                 | ' 
14ec0                 | '     ' patch in the proper data and HUB addresses to the startup structure
14ec0                 | ' 
14ec0                 | '     long[@startupData][0]:=clkfreq
14ec0     14 1E 06 FB | 	rdlong	local01, #20
14ec4     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
14ec8     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
14ecc                 | ' '    long[@startupData][1]:=$1000_0000
14ecc                 | '     long[@startupData][5]:=@deviceData
14ecc     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
14ed0     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
14ed4     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
14ed8     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
14edc     14 14 06 F1 | 	add	arg02, #20
14ee0     0A 1F 62 FC | 	wrlong	local01, arg02
14ee4                 | '     long[@startupData][6]:=@qosData
14ee4     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
14ee8     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
14eec     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
14ef0     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
14ef4     18 14 06 F1 | 	add	arg02, #24
14ef8     0A 1F 62 FC | 	wrlong	local01, arg02
14efc                 | '     long[@startupData][7]:=$7FF00
14efc     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
14f00     1C 1E 06 F1 | 	add	local01, #28
14f04     FF 03 80 FF 
14f08     0F 01 6A FC | 	wrlong	##524032, local01
14f0c                 | ' 
14f0c                 | '     ' setup some default bank and QoS parameter values
14f0c                 | ' 
14f0c                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
14f0c     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
14f10     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
14f14     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
14f18     10 18 66 F0 | 	shl	arg04, #16
14f1c     0C 20 66 F0 | 	shl	local02, #12
14f20     10 19 42 F5 | 	or	arg04, local02
14f24     18 18 46 F5 | 	or	arg04, #24
14f28     0C 15 02 F6 | 	mov	arg02, arg04
14f2c     02 16 06 F6 | 	mov	arg03, #2
14f30     A0 00 A0 FD | 	call	#\builtin_longfill_
14f34                 | '     longfill(@qosData, $FFFF0000, 8)
14f34     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
14f38     07 16 06 F6 | 	mov	arg03, #7
14f3c     28 16 62 FD | 	setq	arg03
14f40     80 FF FF FF 
14f44     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
14f48                 | ' 
14f48                 | '     ' get the address of the PSRAM memory driver so we can start it
14f48                 | ' 
14f48                 | '     driverAddr:= driver.getDriverAddr()
14f48                 | '     return @driver_start
14f48     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
14f4c     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
14f50     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
14f54                 | ' 
14f54                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
14f54                 | ' 
14f54                 | '     if desiredcog < 0
14f54     00 22 56 F2 | 	cmps	local03, #0 wc
14f58                 | '         desiredcog := NEWCOG
14f58     10 22 06 C6 |  if_b	mov	local03, #16
14f5c                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
14f5c     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
14f60     11 25 02 F6 | 	mov	local04, local03
14f64     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
14f68     0A 25 F2 FC | 	coginit	local04, arg02 wc
14f6c     01 24 66 C6 |  if_b	neg	local04, #1
14f70     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
14f74     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
14f78                 | '     repeat until long[@startupData] == 0 
14f78     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
14f7c                 | LR__1752
14f7c     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
14f80     F8 FF 9F 5D |  if_ne	jmp	#LR__1752
14f84                 | ' 
14f84                 | '     return drivercog
14f84     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
14f88     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
14f8c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14f90                 | LR__1753
14f90     A7 F0 03 F6 | 	mov	ptra, fp
14f94     B2 00 A0 FD | 	call	#popregs_
14f98                 | _psram_spin2_startx_ret
14f98     2D 00 64 FD | 	ret
14f9c                 | 
14f9c                 | ' 
14f9c                 | ' '..............................................................................
14f9c                 | ' 
14f9c                 | ' {{
14f9c                 | ' }}
14f9c                 | ' PUB stop() : i
14f9c                 | _psram_spin2_stop
14f9c     00 00 06 F6 | 	mov	_var01, #0
14fa0                 | '     if drivercog <> -1
14fa0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
14fa4     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
14fa8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14fac     FF FF 7F FF 
14fb0     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
14fb4     70 00 90 AD |  if_e	jmp	#LR__1763
14fb8                 | '         cogstop(drivercog) ' a rather brutal stop
14fb8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
14fbc     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
14fc0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14fc4     03 12 62 FD | 	cogstop	arg01
14fc8     97 26 48 FB | 	callpa	#(@LR__1762-@LR__1760)>>2,fcache_load_ptr_
14fcc                 | '         repeat i from 0 to 7
14fcc                 | LR__1760
14fcc                 | '             if long[$7FF00][i*3] < 0
14fcc     00 FB 01 F6 | 	mov	result1, _var01
14fd0     01 FA 65 F0 | 	shl	result1, #1
14fd4     00 FB 01 F1 | 	add	result1, _var01
14fd8     02 FA 65 F0 | 	shl	result1, #2
14fdc     FF 03 00 FF 
14fe0     00 FB 05 F1 | 	add	result1, ##524032
14fe4     FD FA 01 FB | 	rdlong	result1, result1
14fe8     00 FA 55 F2 | 	cmps	result1, #0 wc
14fec     1C 00 90 3D |  if_ae	jmp	#LR__1761
14ff0                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
14ff0     00 FB 01 F6 | 	mov	result1, _var01
14ff4     01 FA 65 F0 | 	shl	result1, #1
14ff8     00 FB 01 F1 | 	add	result1, _var01
14ffc     02 FA 65 F0 | 	shl	result1, #2
15000     FF 03 00 FF 
15004     00 FB 05 F1 | 	add	result1, ##524032
15008     FD 20 68 FC | 	wrlong	#16, result1
1500c                 | LR__1761
1500c     01 00 06 F1 | 	add	_var01, #1
15010     08 00 56 F2 | 	cmps	_var01, #8 wc
15014     B4 FF 9F CD |  if_b	jmp	#LR__1760
15018                 | LR__1762
15018                 | '         drivercog := -1
15018     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1501c     FF FF FF FF 
15020     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
15024     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
15028                 | LR__1763
15028                 | '     if driverlock <> -1
15028     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1502c     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
15030     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
15034     FF FF 7F FF 
15038     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1503c                 | '         LOCKRET(driverlock)
1503c     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
15040     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
15044     05 12 62 5D |  if_ne	lockret	arg01
15048                 | '         driverlock := -1
15048     FF FF FF 5F 
1504c     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
15050     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
15054     00 FB 01 F6 | 	mov	result1, _var01
15058                 | _psram_spin2_stop_ret
15058     2D 00 64 FD | 	ret
1505c                 | 
1505c                 | ' 
1505c                 | ' '..............................................................................
1505c                 | ' 
1505c                 | ' {{
1505c                 | ' }}
1505c                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
1505c                 | _psram_spin2_read1
1505c                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1505c                 | '     if drivercog == -1 ' driver must be running
1505c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
15060     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
15064     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
15068     FF FF 7F FF 
1506c     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
15070                 | '         return ERR_INACTIVE
15070     0F FA 65 A6 |  if_e	neg	result1, #15
15074     7C 00 90 AD |  if_e	jmp	#LR__1771
15078                 | '     if count == 0 ' don't even bother reading
15078     00 16 0E F2 | 	cmp	arg03, #0 wz
1507c                 | '         return 0
1507c     00 FA 05 A6 |  if_e	mov	result1, #0
15080     70 00 90 AD |  if_e	jmp	#LR__1771
15084                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
15084     00 FA 05 F6 | 	mov	result1, #0
15088     01 FA 61 FD | 	cogid	result1
1508c     FD 00 02 F6 | 	mov	_var01, result1
15090     01 00 66 F0 | 	shl	_var01, #1
15094     FD 00 02 F1 | 	add	_var01, result1
15098     02 00 66 F0 | 	shl	_var01, #2
1509c     FF 03 00 FF 
150a0     00 03 06 F6 | 	mov	_var02, ##524032
150a4     00 03 02 F1 | 	add	_var02, _var01
150a8                 | '     if long[mailbox] < 0
150a8     01 01 02 FB | 	rdlong	_var01, _var02
150ac     00 00 56 F2 | 	cmps	_var01, #0 wc
150b0                 | '         return ERR_MAILBOX_BUSY
150b0     1C FA 65 C6 |  if_b	neg	result1, #28
150b4     3C 00 90 CD |  if_b	jmp	#LR__1771
150b8                 | '     long[mailbox][2] := count
150b8     08 02 06 F1 | 	add	_var02, #8
150bc     01 17 62 FC | 	wrlong	arg03, _var02
150c0                 | '     long[mailbox][1] := dstHubAddr
150c0     04 02 86 F1 | 	sub	_var02, #4
150c4     01 13 62 FC | 	wrlong	arg01, _var02
150c8     04 02 86 F1 | 	sub	_var02, #4
150cc                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
150cc     0A 05 02 F6 | 	mov	_var03, arg02
150d0     D9 04 06 F4 | 	bitl	_var03, #217
150d4     00 00 58 FF 
150d8     00 00 06 F6 | 	mov	_var01, ##-1342177280
150dc     02 01 02 F1 | 	add	_var01, _var03
150e0     01 01 62 FC | 	wrlong	_var01, _var02
150e4                 | '     repeat
150e4                 | LR__1770
150e4                 | '         result := long[mailbox]    
150e4     01 05 02 FB | 	rdlong	_var03, _var02
150e8     00 04 56 F2 | 	cmps	_var03, #0 wc
150ec     F4 FF 9F CD |  if_b	jmp	#LR__1770
150f0                 | '     while result < 0   
150f0                 | '     return -result                       'return success or error
150f0     02 FB 61 F6 | 	neg	result1, _var03
150f4                 | LR__1771
150f4                 | _psram_spin2_read1_ret
150f4     2D 00 64 FD | 	ret
150f8                 | 
150f8                 | ' 
150f8                 | ' '..............................................................................
150f8                 | ' 
150f8                 | ' {{
150f8                 | ' }}
150f8                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
150f8                 | _psram_spin2_write
150f8                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
150f8                 | '     if drivercog == -1 ' driver must be running
150f8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
150fc     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
15100     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
15104     FF FF 7F FF 
15108     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1510c                 | '         return ERR_INACTIVE
1510c     0F FA 65 A6 |  if_e	neg	result1, #15
15110     7C 00 90 AD |  if_e	jmp	#LR__1781
15114                 | '     if count == 0 ' don't even bother writing
15114     00 16 0E F2 | 	cmp	arg03, #0 wz
15118                 | '         return 0
15118     00 FA 05 A6 |  if_e	mov	result1, #0
1511c     70 00 90 AD |  if_e	jmp	#LR__1781
15120                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
15120     00 FA 05 F6 | 	mov	result1, #0
15124     01 FA 61 FD | 	cogid	result1
15128     FD 00 02 F6 | 	mov	_var01, result1
1512c     01 00 66 F0 | 	shl	_var01, #1
15130     FD 00 02 F1 | 	add	_var01, result1
15134     02 00 66 F0 | 	shl	_var01, #2
15138     FF 03 00 FF 
1513c     00 03 06 F6 | 	mov	_var02, ##524032
15140     00 03 02 F1 | 	add	_var02, _var01
15144                 | '     if long[mailbox] < 0
15144     01 01 02 FB | 	rdlong	_var01, _var02
15148     00 00 56 F2 | 	cmps	_var01, #0 wc
1514c                 | '         return ERR_MAILBOX_BUSY
1514c     1C FA 65 C6 |  if_b	neg	result1, #28
15150     3C 00 90 CD |  if_b	jmp	#LR__1781
15154                 | '     long[mailbox][2] := count
15154     08 02 06 F1 | 	add	_var02, #8
15158     01 17 62 FC | 	wrlong	arg03, _var02
1515c                 | '     long[mailbox][1] := srcHubAddr
1515c     04 02 86 F1 | 	sub	_var02, #4
15160     01 13 62 FC | 	wrlong	arg01, _var02
15164     04 02 86 F1 | 	sub	_var02, #4
15168                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
15168     0A 05 02 F6 | 	mov	_var03, arg02
1516c     D9 04 06 F4 | 	bitl	_var03, #217
15170     00 00 78 FF 
15174     00 00 06 F6 | 	mov	_var01, ##-268435456
15178     02 01 02 F1 | 	add	_var01, _var03
1517c     01 01 62 FC | 	wrlong	_var01, _var02
15180                 | '     repeat
15180                 | LR__1780
15180                 | '         result := long[mailbox]    
15180     01 05 02 FB | 	rdlong	_var03, _var02
15184     00 04 56 F2 | 	cmps	_var03, #0 wc
15188     F4 FF 9F CD |  if_b	jmp	#LR__1780
1518c                 | '     while result < 0   
1518c                 | '     return -result                       'return success or error
1518c     02 FB 61 F6 | 	neg	result1, _var03
15190                 | LR__1781
15190                 | _psram_spin2_write_ret
15190     2D 00 64 FD | 	ret
15194                 | 
15194                 | ' 
15194                 | ' ' generalized fill
15194                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
15194                 | _psram_spin2_fill
15194     09 01 02 F6 | 	mov	_var01, arg01
15198     0A 03 02 F6 | 	mov	_var02, arg02
1519c     0B 05 02 F6 | 	mov	_var03, arg03
151a0     0D 07 02 F6 | 	mov	_var04, arg05
151a4                 | '     case datasize 
151a4     01 06 86 F1 | 	sub	_var04, #1
151a8     04 06 26 F3 | 	fle	_var04, #4
151ac     30 06 62 FD | 	jmprel	_var04
151b0                 | LR__1790
151b0     10 00 90 FD | 	jmp	#LR__1791
151b4     18 00 90 FD | 	jmp	#LR__1792
151b8     2C 00 90 FD | 	jmp	#LR__1794
151bc     1C 00 90 FD | 	jmp	#LR__1793
151c0     24 00 90 FD | 	jmp	#LR__1794
151c4                 | LR__1791
151c4                 | '         1: req := driver.R_WRITEBYTE
151c4     00 00 60 FF 
151c8     00 08 06 F6 | 	mov	_var05, ##-1073741824
151cc     20 00 90 FD | 	jmp	#LR__1795
151d0                 | LR__1792
151d0                 | '         2: req := driver.R_WRITEWORD
151d0     00 00 68 FF 
151d4     00 08 06 F6 | 	mov	_var05, ##-805306368
151d8     14 00 90 FD | 	jmp	#LR__1795
151dc                 | LR__1793
151dc                 | '         4: req := driver.R_WRITELONG
151dc     00 00 70 FF 
151e0     00 08 06 F6 | 	mov	_var05, ##-536870912
151e4     08 00 90 FD | 	jmp	#LR__1795
151e8                 | LR__1794
151e8                 | '         other : return ERR_INVALID
151e8     06 FA 65 F6 | 	neg	result1, #6
151ec     94 00 90 FD | 	jmp	#LR__1797
151f0                 | LR__1795
151f0                 | '     if count == 0   ' nothing to do
151f0     00 04 0E F2 | 	cmp	_var03, #0 wz
151f4                 | '         return 0
151f4     00 FA 05 A6 |  if_e	mov	result1, #0
151f8     88 00 90 AD |  if_e	jmp	#LR__1797
151fc                 | '     if drivercog == -1
151fc     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
15200     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
15204     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
15208     FF FF 7F FF 
1520c     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
15210                 | '         return ERR_INACTIVE
15210     0F FA 65 A6 |  if_e	neg	result1, #15
15214     6C 00 90 AD |  if_e	jmp	#LR__1797
15218                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
15218     00 FA 05 F6 | 	mov	result1, #0
1521c     01 FA 61 FD | 	cogid	result1
15220     FD 06 02 F6 | 	mov	_var04, result1
15224     01 06 66 F0 | 	shl	_var04, #1
15228     FD 06 02 F1 | 	add	_var04, result1
1522c     02 06 66 F0 | 	shl	_var04, #2
15230     FF 03 00 FF 
15234     00 0B 06 F6 | 	mov	_var06, ##524032
15238     03 0B 02 F1 | 	add	_var06, _var04
1523c                 | '     if long[mailbox] < 0
1523c     05 07 02 FB | 	rdlong	_var04, _var06
15240     00 06 56 F2 | 	cmps	_var04, #0 wc
15244                 | '         return ERR_MAILBOX_BUSY
15244     1C FA 65 C6 |  if_b	neg	result1, #28
15248     38 00 90 CD |  if_b	jmp	#LR__1797
1524c                 | '     long[mailbox][2] := count
1524c     08 0A 06 F1 | 	add	_var06, #8
15250     05 05 62 FC | 	wrlong	_var03, _var06
15254                 | '     long[mailbox][1] := pattern
15254     04 0A 86 F1 | 	sub	_var06, #4
15258     05 03 62 FC | 	wrlong	_var02, _var06
1525c     04 0A 86 F1 | 	sub	_var06, #4
15260                 | '     long[mailbox] := req + (addr & $fffffff)
15260     04 0D 02 F6 | 	mov	_var07, _var05
15264     00 0F 02 F6 | 	mov	_var08, _var01
15268     7C 0E 06 F4 | 	bitl	_var08, #124
1526c     07 0D 02 F1 | 	add	_var07, _var08
15270     05 0D 62 FC | 	wrlong	_var07, _var06
15274                 | '     repeat
15274                 | LR__1796
15274                 | '         r := long[mailbox]
15274     05 0F 02 FB | 	rdlong	_var08, _var06
15278     00 0E 56 F2 | 	cmps	_var08, #0 wc
1527c     F4 FF 9F CD |  if_b	jmp	#LR__1796
15280                 | '     while r < 0
15280                 | '     return -r                  ' return 0 for success or negated error code
15280     07 FB 61 F6 | 	neg	result1, _var08
15284                 | LR__1797
15284                 | _psram_spin2_fill_ret
15284     2D 00 64 FD | 	ret
15288                 | 
15288                 | ' 
15288                 | ' '..............................................................................
15288                 | ' 
15288                 | ' {{
15288                 | ' }}
15288                 | ' PUB setQos(cog, qos) : result | mailbox
15288                 | _psram_spin2_setQos
15288     09 01 02 F6 | 	mov	_var01, arg01
1528c                 | '     if drivercog == -1 ' driver must be running
1528c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
15290     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
15294     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
15298     FF FF 7F FF 
1529c     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
152a0                 | '         return ERR_INACTIVE
152a0     0F FA 65 A6 |  if_e	neg	result1, #15
152a4     9C 00 90 AD |  if_e	jmp	#LR__1804
152a8                 | '     if cog < 0 or cog > 7 ' enforce cog id range
152a8     00 00 56 F2 | 	cmps	_var01, #0 wc
152ac     08 00 90 CD |  if_b	jmp	#LR__1800
152b0     08 00 56 F2 | 	cmps	_var01, #8 wc
152b4     08 00 90 CD |  if_b	jmp	#LR__1801
152b8                 | LR__1800
152b8                 | '         return ERR_INVALID
152b8     06 FA 65 F6 | 	neg	result1, #6
152bc     84 00 90 FD | 	jmp	#LR__1804
152c0                 | LR__1801
152c0                 | '     long[@qosData][cog] := qos & !$1ff
152c0     FF 15 26 F5 | 	andn	arg02, #511
152c4     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
152c8     02 00 66 F0 | 	shl	_var01, #2
152cc     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
152d0     00 15 62 FC | 	wrlong	arg02, _var01
152d4                 | '     mailbox := $7FF00 + drivercog*12
152d4     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
152d8     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
152dc     02 07 02 F6 | 	mov	_var04, _var03
152e0     01 06 66 F0 | 	shl	_var04, #1
152e4     02 07 02 F1 | 	add	_var04, _var03
152e8     02 06 66 F0 | 	shl	_var04, #2
152ec     FF 03 00 FF 
152f0     00 09 06 F6 | 	mov	_var05, ##524032
152f4     03 09 02 F1 | 	add	_var05, _var04
152f8                 | '     repeat until LOCKTRY(driverlock)
152f8     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
152fc                 | LR__1802
152fc     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
15300     06 12 72 FD | 	locktry	arg01 wc
15304     F4 FF 9F 3D |  if_ae	jmp	#LR__1802
15308     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1530c                 | '     long[mailbox] := driver.R_CONFIG + cogid()
1530c     00 06 06 F6 | 	mov	_var04, #0
15310     01 06 62 FD | 	cogid	_var04
15314     00 00 78 FF 
15318     00 02 06 F6 | 	mov	_var02, ##-268435456
1531c     03 03 02 F1 | 	add	_var02, _var04
15320     04 03 62 FC | 	wrlong	_var02, _var05
15324                 | '     repeat while long[mailbox] < 0
15324                 | LR__1803
15324     04 03 02 FB | 	rdlong	_var02, _var05
15328     00 02 56 F2 | 	cmps	_var02, #0 wc
1532c     F4 FF 9F CD |  if_b	jmp	#LR__1803
15330                 | '     LOCKREL(driverlock)
15330     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
15334     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
15338     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1533c     07 12 72 FD | 	lockrel	arg01 wc
15340     00 FA 05 F6 | 	mov	result1, #0
15344                 | LR__1804
15344                 | _psram_spin2_setQos_ret
15344     2D 00 64 FD | 	ret
15348                 | 
15348                 | ' 
15348                 | ' '..............................................................................
15348                 | ' 
15348                 | ' {{
15348                 | ' }}
15348                 | ' PRI lookupDelay(freq) : delay | profile
15348                 | _psram_spin2_lookupDelay
15348                 | '     profile := @delayTable
15348     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
1534c     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
15350                 | '     delay := long[profile][0]
15350     00 03 02 FB | 	rdlong	_var02, _var01
15354                 | '     repeat while long[profile][1] 
15354     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
15358     97 16 48 FB | 	callpa	#(@LR__1811-@LR__1810)>>2,fcache_load_ptr_
1535c                 | LR__1810
1535c     04 00 06 F1 | 	add	_var01, #4
15360     00 FB 09 FB | 	rdlong	result1, _var01 wz
15364     04 00 86 F1 | 	sub	_var01, #4
15368     1C 00 90 AD |  if_e	jmp	#LR__1812
1536c                 | '         if freq +< long[profile][1] 
1536c     04 00 06 F1 | 	add	_var01, #4
15370     00 FB 01 FB | 	rdlong	result1, _var01
15374     04 00 86 F1 | 	sub	_var01, #4
15378     FD 12 12 F2 | 	cmp	arg01, result1 wc
1537c                 | '             quit
1537c                 | '         profile += 4
1537c     04 00 06 31 |  if_ae	add	_var01, #4
15380                 | '         delay++
15380     01 02 06 31 |  if_ae	add	_var02, #1
15384     D4 FF 9F 3D |  if_ae	jmp	#LR__1810
15388                 | LR__1811
15388                 | LR__1812
15388     01 FB 01 F6 | 	mov	result1, _var02
1538c                 | _psram_spin2_lookupDelay_ret
1538c     2D 00 64 FD | 	ret
15390                 | 
15390                 | ' 
15390                 | ' PUB start() : r
15390                 | _usbnew_spin2_start
15390     00 00 06 F6 | 	mov	_var01, #0
15394                 | '   ifnot driver_cog
15394     15 00 00 FF 
15398     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
1539c     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
153a0     15 00 00 FF 
153a4     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
153a8     38 00 90 5D |  if_ne	jmp	#LR__1820
153ac                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
153ac     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
153b0     10 00 06 F6 | 	mov	_var01, #16
153b4     00 16 06 F6 | 	mov	arg03, #0
153b8     28 16 62 FD | 	setq	arg03
153bc     0A 01 F2 FC | 	coginit	_var01, arg02 wc
153c0     01 00 66 C6 |  if_b	neg	_var01, #1
153c4                 | '     if r >= 0
153c4     00 00 56 F2 | 	cmps	_var01, #0 wc
153c8                 | '       driver_cog := r+1
153c8     00 03 02 36 |  if_ae	mov	_var02, _var01
153cc     01 02 06 31 |  if_ae	add	_var02, #1
153d0     15 00 00 3F 
153d4     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
153d8     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
153dc     15 00 00 3F 
153e0     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
153e4                 | LR__1820
153e4     00 FB 01 F6 | 	mov	result1, _var01
153e8                 | _usbnew_spin2_start_ret
153e8     2D 00 64 FD | 	ret
153ec                 | 
153ec                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
153ec                 | ' 
153ec                 | ' '' Return key event from buffer if there is one
153ec                 | ' PUB get_key() : r | tail
153ec                 | _usbnew_spin2_get_key
153ec                 | '   tail := keyq_tail
153ec     0F 00 00 FF 
153f0     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
153f4     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
153f8                 | '   if keyq_head == tail
153f8     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
153fc     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
15400     0F 00 00 FF 
15404     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
15408     00 03 0A F2 | 	cmp	_var02, _var01 wz
1540c                 | '     return 0 ' No event
1540c     00 FA 05 A6 |  if_e	mov	result1, #0
15410     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
15414                 | '   r := keyq_data[tail]
15414     00 03 02 F6 | 	mov	_var02, _var01
15418     02 02 66 F0 | 	shl	_var02, #2
1541c     0F 00 00 FF 
15420     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
15424     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
15428     01 FB 01 FB | 	rdlong	result1, _var02
1542c                 | '   if ++tail == KEYQUEUE_SIZE
1542c     01 00 06 F1 | 	add	_var01, #1
15430     80 00 0E F2 | 	cmp	_var01, #128 wz
15434                 | '     tail := 0
15434     00 00 06 A6 |  if_e	mov	_var01, #0
15438                 | '   keyq_tail := tail
15438     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
1543c     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
15440     0F 00 00 FF 
15444     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
15448                 | _usbnew_spin2_get_key_ret
15448     2D 00 64 FD | 	ret
1544c                 | 
1544c                 | ' 
1544c                 | ' '' Emulate mouse movement
1544c                 | ' PUB mouse_move(x,y)
1544c                 | _usbnew_spin2_mouse_move
1544c     02 4A 05 F6 | 	mov	COUNT_, #2
15450     A8 00 A0 FD | 	call	#pushregs_
15454     09 1F 02 F6 | 	mov	local01, arg01
15458     0A 21 02 F6 | 	mov	local02, arg02
1545c                 | '   mouse_lock := 1
1545c     14 00 00 FF 
15460     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
15464     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
15468     14 00 00 FF 
1546c     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
15470                 | '   waitus(2) ' hope driver is now done
15470     02 12 06 F6 | 	mov	arg01, #2
15474     30 0A B0 FD | 	call	#__system___waitus
15478                 | '   mouse_xacc := x
15478     14 00 00 FF 
1547c     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
15480     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
15484                 | '   mouse_yacc := y
15484     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
15488     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
1548c                 | '   if mouse_outptr
1548c     04 00 00 FF 
15490     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
15494     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
15498     0F 00 00 FF 
1549c     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
154a0     24 00 90 AD |  if_e	jmp	#LR__1830
154a4                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
154a4     10 20 66 F0 | 	shl	local02, #16
154a8     0F 1F 32 F9 | 	getword	local01, local01, #0
154ac     0F 21 42 F5 | 	or	local02, local01
154b0     0F 00 00 FF 
154b4     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
154b8     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
154bc     0F 00 00 FF 
154c0     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
154c4     0F 21 62 FC | 	wrlong	local02, local01
154c8                 | LR__1830
154c8                 | '   mouse_lock := 0
154c8     14 00 00 FF 
154cc     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
154d0     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
154d4     14 00 00 FF 
154d8     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
154dc     A7 F0 03 F6 | 	mov	ptra, fp
154e0     B2 00 A0 FD | 	call	#popregs_
154e4                 | _usbnew_spin2_mouse_move_ret
154e4     2D 00 64 FD | 	ret
154e8                 | 
154e8                 | '     '' Set HAVE_HIDPAD to enable.
154e8                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
154e8                 | ' 
154e8                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
154e8                 | ' PUB hidpad_id(dev) : r
154e8                 | _usbnew_spin2_hidpad_id
154e8                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
154e8     13 00 00 FF 
154ec     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
154f0     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
154f4     09 01 02 F6 | 	mov	_var01, arg01
154f8     03 00 66 F0 | 	shl	_var01, #3
154fc     09 01 82 F1 | 	sub	_var01, arg01
15500     02 00 66 F0 | 	shl	_var01, #2
15504     00 FB 01 F1 | 	add	result1, _var01
15508     FD FA 01 FB | 	rdlong	result1, result1
1550c     13 00 00 FF 
15510     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
15514                 | _usbnew_spin2_hidpad_id_ret
15514     2D 00 64 FD | 	ret
15518                 | 
15518                 | ' 
15518                 | ' '' Get all button states for a device
15518                 | ' PUB hidpad_buttons(dev) : r 
15518                 | _usbnew_spin2_hidpad_buttons
15518                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
15518     13 00 00 FF 
1551c     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
15520     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
15524     09 01 02 F6 | 	mov	_var01, arg01
15528     03 00 66 F0 | 	shl	_var01, #3
1552c     09 01 82 F1 | 	sub	_var01, arg01
15530     02 00 66 F0 | 	shl	_var01, #2
15534     00 FB 01 F1 | 	add	result1, _var01
15538     14 FA 05 F1 | 	add	result1, #20
1553c     FD FA 01 FB | 	rdlong	result1, result1
15540     13 00 00 FF 
15544     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
15548                 | _usbnew_spin2_hidpad_buttons_ret
15548     2D 00 64 FD | 	ret
1554c                 | 
1554c                 | ' 
1554c                 | ' '' Get state of an axis (normalized between -32768 and 32767)
1554c                 | ' PUB hidpad_axis(dev,axnum) : r
1554c                 | _usbnew_spin2_hidpad_axis
1554c                 | '   if axnum +>= 6
1554c     06 14 16 F2 | 	cmp	arg02, #6 wc
15550                 | '     return 0
15550     00 FA 05 36 |  if_ae	mov	result1, #0
15554     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
15558                 | '   else 
15558                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
15558     13 00 00 FF 
1555c     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
15560     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
15564     09 01 02 F6 | 	mov	_var01, arg01
15568     03 00 66 F0 | 	shl	_var01, #3
1556c     09 01 82 F1 | 	sub	_var01, arg01
15570     02 00 66 F0 | 	shl	_var01, #2
15574     00 FB 01 F1 | 	add	result1, _var01
15578     04 00 06 F6 | 	mov	_var01, #4
1557c     0A 01 02 F1 | 	add	_var01, arg02
15580     01 00 66 F0 | 	shl	_var01, #1
15584     FD 00 02 F1 | 	add	_var01, result1
15588     00 FB E1 FA | 	rdword	result1, _var01
1558c     0F FA 65 F7 | 	signx	result1, #15
15590     13 00 00 FF 
15594     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
15598                 | _usbnew_spin2_hidpad_axis_ret
15598     2D 00 64 FD | 	ret
1559c                 | 
1559c                 | ' 
1559c                 | ' 
1559c                 | ' '--------------------------------------------------------------
1559c                 | ' '---------- Init the variables, start the cog. ----------------
1559c                 | ' '--------------------------------------------------------------
1559c                 | ' 
1559c                 | ' pub start(mbox,scope,cache) :cog,base | iii
1559c                 | _Audio093b_8_sc_spin2_start
1559c     04 4A 05 F6 | 	mov	COUNT_, #4
155a0     A8 00 A0 FD | 	call	#pushregs_
155a4     09 1F 02 F6 | 	mov	local01, arg01
155a8                 | ' 
155a8                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
155a8                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
155a8                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
155a8                 | ' 
155a8                 | ' mailboxaddr:=mbox 
155a8     F2 1E 62 FC | 	wrlong	local01, objptr
155ac                 | ' scope_ptr:=scope
155ac     04 E4 05 F1 | 	add	objptr, #4
155b0     F2 14 62 FC | 	wrlong	arg02, objptr
155b4                 | ' cache_ptr:=cache
155b4     04 E4 05 F1 | 	add	objptr, #4
155b8     F2 16 62 FC | 	wrlong	arg03, objptr
155bc                 | ' base:=@channel1[0]
155bc     04 E4 05 F1 | 	add	objptr, #4
155c0     F2 20 02 F6 | 	mov	local02, objptr
155c4                 | ' 
155c4                 | ' repeat iii from 0 to 7
155c4     00 22 06 F6 | 	mov	local03, #0
155c8     01 00 00 FF 
155cc     D8 E7 05 F1 | 	add	ptr__Audio093b_8_sc_spin2_dat__, ##984
155d0     0C E4 85 F1 | 	sub	objptr, #12
155d4     97 80 48 FB | 	callpa	#(@LR__1841-@LR__1840)>>2,fcache_load_ptr_
155d8                 | LR__1840
155d8                 | '   long[base+32*iii]:=0
155d8     10 1F 02 F6 | 	mov	local01, local02
155dc     11 FD 01 F6 | 	mov	result2, local03
155e0     05 FC 65 F0 | 	shl	result2, #5
155e4     FE 1E 02 F1 | 	add	local01, result2
155e8     0F 01 68 FC | 	wrlong	#0, local01
155ec                 | '   long[base+32*iii+4]:=0
155ec     10 1F 02 F6 | 	mov	local01, local02
155f0     11 FD 01 F6 | 	mov	result2, local03
155f4     05 FC 65 F0 | 	shl	result2, #5
155f8     FE 1E 02 F1 | 	add	local01, result2
155fc     04 1E 06 F1 | 	add	local01, #4
15600     0F 01 68 FC | 	wrlong	#0, local01
15604                 | '   long[base+32*iii+12]:=0
15604     10 25 02 F6 | 	mov	local04, local02
15608     11 1F 02 F6 | 	mov	local01, local03
1560c     05 1E 66 F0 | 	shl	local01, #5
15610     0F 25 02 F1 | 	add	local04, local01
15614     0C 24 06 F1 | 	add	local04, #12
15618     12 01 68 FC | 	wrlong	#0, local04
1561c                 | '   long[base+32*iii+16]:=2 
1561c     10 25 02 F6 | 	mov	local04, local02
15620     11 1F 02 F6 | 	mov	local01, local03
15624     05 1E 66 F0 | 	shl	local01, #5
15628     0F 25 02 F1 | 	add	local04, local01
1562c     10 24 06 F1 | 	add	local04, #16
15630     12 05 68 FC | 	wrlong	#2, local04
15634                 | '   word[base+32*iii+20]:=0
15634     10 25 02 F6 | 	mov	local04, local02
15638     11 1F 02 F6 | 	mov	local01, local03
1563c     05 1E 66 F0 | 	shl	local01, #5
15640     0F 25 02 F1 | 	add	local04, local01
15644     14 24 06 F1 | 	add	local04, #20
15648     12 01 58 FC | 	wrword	#0, local04
1564c                 | '   word[base+32*iii+22]:=8192
1564c     10 25 02 F6 | 	mov	local04, local02
15650     11 1F 02 F6 | 	mov	local01, local03
15654     05 1E 66 F0 | 	shl	local01, #5
15658     0F 25 02 F1 | 	add	local04, local01
1565c     16 24 06 F1 | 	add	local04, #22
15660     10 00 80 FF 
15664     12 01 58 FC | 	wrword	##8192, local04
15668                 | '   word[base+32*iii+24]:=4000+2*iii
15668     11 25 02 F6 | 	mov	local04, local03
1566c     01 24 66 F0 | 	shl	local04, #1
15670     07 00 00 FF 
15674     A0 1F 06 F6 | 	mov	local01, ##4000
15678     12 1F 02 F1 | 	add	local01, local04
1567c     10 25 02 F6 | 	mov	local04, local02
15680     11 FD 01 F6 | 	mov	result2, local03
15684     05 FC 65 F0 | 	shl	result2, #5
15688     FE 24 02 F1 | 	add	local04, result2
1568c     18 24 06 F1 | 	add	local04, #24
15690     12 1F 52 FC | 	wrword	local01, local04
15694                 | '   word[base+32*iii+26]:=2
15694     10 25 02 F6 | 	mov	local04, local02
15698     11 1F 02 F6 | 	mov	local01, local03
1569c     05 1E 66 F0 | 	shl	local01, #5
156a0     0F 25 02 F1 | 	add	local04, local01
156a4     1A 24 06 F1 | 	add	local04, #26
156a8     12 05 58 FC | 	wrword	#2, local04
156ac                 | '   long [base+32*iii+8]:=@null | $C0000000
156ac     F3 1E 02 F6 | 	mov	local01, ptr__Audio093b_8_sc_spin2_dat__
156b0     3E 1E 26 F4 | 	bith	local01, #62
156b4     10 25 02 F6 | 	mov	local04, local02
156b8     11 17 02 F6 | 	mov	arg03, local03
156bc     05 16 66 F0 | 	shl	arg03, #5
156c0     0B 25 02 F1 | 	add	local04, arg03
156c4     08 24 06 F1 | 	add	local04, #8
156c8     12 1F 62 FC | 	wrlong	local01, local04
156cc     01 22 06 F1 | 	add	local03, #1
156d0     08 22 56 F2 | 	cmps	local03, #8 wc
156d4     00 FF 9F CD |  if_b	jmp	#LR__1840
156d8                 | LR__1841
156d8     01 00 00 FF 
156dc     D8 E7 85 F1 | 	sub	ptr__Audio093b_8_sc_spin2_dat__, ##984
156e0                 | '   
156e0                 | ' cog:=coginit(16,@audio,@mailboxaddr)
156e0     F3 14 02 F6 | 	mov	arg02, ptr__Audio093b_8_sc_spin2_dat__
156e4     F2 16 02 F6 | 	mov	arg03, objptr
156e8     10 24 06 F6 | 	mov	local04, #16
156ec     28 16 62 FD | 	setq	arg03
156f0     0A 25 F2 FC | 	coginit	local04, arg02 wc
156f4     01 24 66 C6 |  if_b	neg	local04, #1
156f8                 | ' waitms(100)
156f8     64 12 06 F6 | 	mov	arg01, #100
156fc     3C 07 B0 FD | 	call	#__system___waitms
15700                 | ' return cog,base
15700     10 FD 01 F6 | 	mov	result2, local02
15704     12 FB 01 F6 | 	mov	result1, local04
15708     A7 F0 03 F6 | 	mov	ptra, fp
1570c     B2 00 A0 FD | 	call	#popregs_
15710                 | _Audio093b_8_sc_spin2_start_ret
15710     2D 00 64 FD | 	ret
15714                 | 
15714                 | ' 
15714                 | ' ' a simple play procedure to not poke everything. 
15714                 | ' 
15714                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
15714                 | _Audio093b_8_sc_spin2_play
15714     0C E4 05 F1 | 	add	objptr, #12
15718     F2 00 02 F6 | 	mov	_var01, objptr
1571c     05 12 66 F0 | 	shl	arg01, #5
15720     09 01 02 F1 | 	add	_var01, arg01
15724     00 00 60 FF 
15728     00 14 06 F1 | 	add	arg02, ##-1073741824
1572c     00 13 02 F6 | 	mov	arg01, _var01
15730     08 12 06 F1 | 	add	arg01, #8
15734     09 15 62 FC | 	wrlong	arg02, arg01
15738     00 15 02 F6 | 	mov	arg02, _var01
1573c     0C 14 06 F1 | 	add	arg02, #12
15740     0A 1B 62 FC | 	wrlong	arg05, arg02
15744     00 1C 56 F2 | 	cmps	arg06, #0 wc
15748     00 15 02 36 |  if_ae	mov	arg02, _var01
1574c     10 14 06 31 |  if_ae	add	arg02, #16
15750     0A 1D 62 3C |  if_ae	wrlong	arg06, arg02
15754     02 1A 06 C1 |  if_b	add	arg05, #2
15758     00 13 02 C6 |  if_b	mov	arg01, _var01
1575c     10 12 06 C1 |  if_b	add	arg01, #16
15760     09 1B 62 CC |  if_b	wrlong	arg05, arg01
15764     0B 15 52 F6 | 	abs	arg02, arg03 wc
15768     0F 1B 80 FF 
1576c     0A 3F 1A FD | 	qdiv	##3546911, arg02
15770                 | ' 
15770                 | ' base2:=@channel1[0]+32*channel
15770                 | ' long[base2+8]:=sample+$C0000000 
15770                 | ' long[base2+12]:= len
15770                 | ' if loop >=0 
15770                 | '   long[base2+16]:= loop
15770     0C E4 85 F1 | 	sub	objptr, #12
15774                 | ' else
15774                 | '   long[base2+16]:= len+2
15774                 | ' word[base2+20]:=vol
15774     00 15 02 F6 | 	mov	arg02, _var01
15778     14 14 06 F1 | 	add	arg02, #20
1577c     0A 19 52 FC | 	wrword	arg04, arg02
15780                 | ' word[base2+24]:= 3546911/splfreq 
15780     00 13 02 F6 | 	mov	arg01, _var01
15784     18 12 06 F1 | 	add	arg01, #24
15788                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
15788                 | ' long[base2+28]:=$40000000
15788     18 14 62 FD | 	getqx	arg02
1578c     0A 15 82 F6 | 	negc	arg02, arg02
15790     09 15 52 FC | 	wrword	arg02, arg01
15794     00 15 02 F6 | 	mov	arg02, _var01
15798     1A 14 06 F1 | 	add	arg02, #26
1579c     0A 01 5A FC | 	wrword	#256, arg02
157a0     1C 00 06 F1 | 	add	_var01, #28
157a4     00 00 A0 FF 
157a8     00 01 68 FC | 	wrlong	##1073741824, _var01
157ac                 | _Audio093b_8_sc_spin2_play_ret
157ac     2D 00 64 FD | 	ret
157b0                 | 
157b0                 | ' until (i >>8) >=len
157b0                 | ' 
157b0                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
157b0                 | _Audio093b_8_sc_spin2_play8
157b0                 | ' 
157b0                 | ' base2:=@channel1[0]+32*channel
157b0     0C E4 05 F1 | 	add	objptr, #12
157b4     F2 00 02 F6 | 	mov	_var01, objptr
157b8     05 12 66 F0 | 	shl	arg01, #5
157bc     09 01 02 F1 | 	add	_var01, arg01
157c0                 | ' long[base2]:=0
157c0     00 01 68 FC | 	wrlong	#0, _var01
157c4                 | ' long[base2+8]:=sample+$40000000 
157c4     00 00 20 FF 
157c8     00 14 06 F1 | 	add	arg02, ##1073741824
157cc     00 13 02 F6 | 	mov	arg01, _var01
157d0     08 12 06 F1 | 	add	arg01, #8
157d4     09 15 62 FC | 	wrlong	arg02, arg01
157d8                 | ' if loop>=0
157d8     00 1C 56 F2 | 	cmps	arg06, #0 wc
157dc     0C E4 85 F1 | 	sub	objptr, #12
157e0     1C 00 90 CD |  if_b	jmp	#LR__1850
157e4                 | '   long[base2+12]:=loop
157e4     00 15 02 F6 | 	mov	arg02, _var01
157e8     0C 14 06 F1 | 	add	arg02, #12
157ec     0A 1D 62 FC | 	wrlong	arg06, arg02
157f0                 | '   long[base2+16]:= len
157f0     00 1D 02 F6 | 	mov	arg06, _var01
157f4     10 1C 06 F1 | 	add	arg06, #16
157f8     0E 1B 62 FC | 	wrlong	arg05, arg06
157fc     1C 00 90 FD | 	jmp	#LR__1851
15800                 | LR__1850
15800                 | ' else
15800                 | '   long[base2+12]:= len
15800     00 1D 02 F6 | 	mov	arg06, _var01
15804     0C 1C 06 F1 | 	add	arg06, #12
15808     0E 1B 62 FC | 	wrlong	arg05, arg06
1580c                 | '   long[base2+16]:= len+1
1580c     01 1A 06 F1 | 	add	arg05, #1
15810     00 13 02 F6 | 	mov	arg01, _var01
15814     10 12 06 F1 | 	add	arg01, #16
15818     09 1B 62 FC | 	wrlong	arg05, arg01
1581c                 | LR__1851
1581c     0B 17 52 F6 | 	abs	arg03, arg03 wc
15820     0F 1B 80 FF 
15824     0B 3F 1A FD | 	qdiv	##3546911, arg03
15828                 | ' word[base2+20]:=vol
15828     00 17 02 F6 | 	mov	arg03, _var01
1582c     14 16 06 F1 | 	add	arg03, #20
15830     0B 19 52 FC | 	wrword	arg04, arg03
15834                 | ' word[base2+24]:= 3546911/splfreq 
15834     00 13 02 F6 | 	mov	arg01, _var01
15838     18 12 06 F1 | 	add	arg01, #24
1583c                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
1583c                 | ' long[base2+28]:=$40000000
1583c     18 18 62 FD | 	getqx	arg04
15840     0C 19 82 F6 | 	negc	arg04, arg04
15844     09 19 52 FC | 	wrword	arg04, arg01
15848     00 19 02 F6 | 	mov	arg04, _var01
1584c     1A 18 06 F1 | 	add	arg04, #26
15850     0C 01 5A FC | 	wrword	#256, arg04
15854     1C 00 06 F1 | 	add	_var01, #28
15858     00 00 A0 FF 
1585c     00 01 68 FC | 	wrlong	##1073741824, _var01
15860                 | _Audio093b_8_sc_spin2_play8_ret
15860     2D 00 64 FD | 	ret
15864                 | 
15864                 | ' 
15864                 | '     
15864                 | ' pub stop(channel) 'silence it
15864                 | _Audio093b_8_sc_spin2_stop
15864                 | ' 
15864                 | ' word[@channel1[0]+32*channel+20]:=0
15864     0C E4 05 F1 | 	add	objptr, #12
15868     F2 00 02 F6 | 	mov	_var01, objptr
1586c     05 12 66 F0 | 	shl	arg01, #5
15870     09 01 02 F1 | 	add	_var01, arg01
15874     14 00 06 F1 | 	add	_var01, #20
15878     00 01 58 FC | 	wrword	#0, _var01
1587c     0C E4 85 F1 | 	sub	objptr, #12
15880                 | _Audio093b_8_sc_spin2_stop_ret
15880     2D 00 64 FD | 	ret
15884                 | hubexit
15884     81 00 80 FD | 	jmp	#cogexit
15888                 | 
15888                 | __system___setbaud
15888     14 60 06 FB | 	rdlong	muldiva_, #20
1588c     09 63 02 F6 | 	mov	muldivb_, arg01
15890     BA 00 A0 FD | 	call	#divide_
15894     97 06 48 FB | 	callpa	#(@LR__1861-@LR__1860)>>2,fcache_load_ptr_
15898                 | LR__1860
15898     3E FA 9D FA | 	rdpin	result1, #62 wc
1589c     FE FC A1 F1 | 	subx	result2, result2
158a0     F4 FF 9F CD |  if_b	jmp	#LR__1860
158a4                 | LR__1861
158a4     40 7C 64 FD | 	dirl	#62
158a8     40 7E 64 FD | 	dirl	#63
158ac     F4 62 62 FC | 	wrlong	muldivb_, ptr___system__dat__
158b0     10 62 66 F0 | 	shl	muldivb_, #16
158b4     07 14 06 F6 | 	mov	arg02, #7
158b8     31 15 02 F1 | 	add	arg02, muldivb_
158bc     3E F8 0C FC | 	wrpin	#124, #62
158c0     3E 14 16 FC | 	wxpin	arg02, #62
158c4     3F 7C 0C FC | 	wrpin	#62, #63
158c8     14 14 06 F1 | 	add	arg02, #20
158cc     3F 14 16 FC | 	wxpin	arg02, #63
158d0     41 7C 64 FD | 	dirh	#62
158d4     41 7E 64 FD | 	dirh	#63
158d8                 | __system___setbaud_ret
158d8     2D 00 64 FD | 	ret
158dc                 | 
158dc                 | __system___txraw
158dc     01 4A 05 F6 | 	mov	COUNT_, #1
158e0     A8 00 A0 FD | 	call	#pushregs_
158e4     09 1F 02 F6 | 	mov	local01, arg01
158e8     97 06 48 FB | 	callpa	#(@LR__1871-@LR__1870)>>2,fcache_load_ptr_
158ec                 | LR__1870
158ec     3E FA 9D FA | 	rdpin	result1, #62 wc
158f0     FE FC A1 F1 | 	subx	result2, result2
158f4     F4 FF 9F CD |  if_b	jmp	#LR__1870
158f8                 | LR__1871
158f8     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
158fc     C2 01 00 AF 
15900     00 12 06 A6 |  if_e	mov	arg01, ##230400
15904     80 FF BF AD |  if_e	call	#__system___setbaud
15908     3E 1E 26 FC | 	wypin	local01, #62
1590c     01 FA 05 F6 | 	mov	result1, #1
15910     A7 F0 03 F6 | 	mov	ptra, fp
15914     B2 00 A0 FD | 	call	#popregs_
15918                 | __system___txraw_ret
15918     2D 00 64 FD | 	ret
1591c                 | 
1591c                 | __system___rxraw
1591c     0D 4A 05 F6 | 	mov	COUNT_, #13
15920     A8 00 A0 FD | 	call	#pushregs_
15924     09 1F 02 F6 | 	mov	local01, arg01
15928     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1592c     C2 01 00 AF 
15930     00 12 06 A6 |  if_e	mov	arg01, ##230400
15934     50 FF BF AD |  if_e	call	#__system___setbaud
15938     00 1E 0E F2 | 	cmp	local01, #0 wz
1593c     20 00 90 AD |  if_e	jmp	#LR__1880
15940     14 22 06 FB | 	rdlong	local03, #20
15944     0A 22 46 F0 | 	shr	local03, #10
15948     11 1F 02 FD | 	qmul	local01, local03
1594c     1A FA 61 FD | 	getct	result1
15950     18 24 62 FD | 	getqx	local04
15954     12 FB 01 F1 | 	add	result1, local04
15958     FD 26 02 F6 | 	mov	local05, result1
1595c     04 00 90 FD | 	jmp	#LR__1881
15960                 | LR__1880
15960     00 26 06 F6 | 	mov	local05, #0
15964                 | LR__1881
15964     01 28 66 F6 | 	neg	local06, #1
15968     3F 2A 06 F6 | 	mov	local07, #63
1596c     00 2C 06 F6 | 	mov	local08, #0
15970     04 E8 05 F1 | 	add	ptr___system__dat__, #4
15974     F4 2E 02 FB | 	rdlong	local09, ptr___system__dat__
15978     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
1597c                 | LR__1882
1597c     08 2E 16 F4 | 	testb	local09, #8 wc
15980     09 2E 76 F4 | 	testbn	local09, #9 andc
15984     0A 2E 46 F0 | 	shr	local09, #10
15988     01 2C 06 C6 |  if_b	mov	local08, #1
1598c     40 7E 6C 3D |  if_ae	testp	#63 wz
15990     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
15994     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
15998     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
1599c                 | LR__1883
1599c     00 20 06 F6 | 	mov	local02, #0
159a0     00 2C 0E F2 | 	cmp	local08, #0 wz
159a4     01 20 66 56 |  if_ne	neg	local02, #1
159a8     00 30 06 F6 | 	mov	local10, #0
159ac     00 22 06 F6 | 	mov	local03, #0
159b0     00 1E 0E F2 | 	cmp	local01, #0 wz
159b4     01 22 66 56 |  if_ne	neg	local03, #1
159b8     00 24 06 F6 | 	mov	local04, #0
159bc     00 32 06 F6 | 	mov	local11, #0
159c0     1A FA 61 FD | 	getct	result1
159c4     FD 34 02 F6 | 	mov	local12, result1
159c8     1A 37 02 F6 | 	mov	local13, local12
159cc     13 37 82 F1 | 	sub	local13, local05
159d0     00 36 56 F2 | 	cmps	local13, #0 wc
159d4     00 32 26 C6 |  if_b	not	local11, #0
159d8     00 32 0E F2 | 	cmp	local11, #0 wz
159dc     00 24 26 56 |  if_ne	not	local04, #0
159e0     12 23 CA F7 | 	test	local03, local04 wz
159e4     00 30 26 56 |  if_ne	not	local10, #0
159e8     18 21 4A F5 | 	or	local02, local10 wz
159ec     8C FF 9F AD |  if_e	jmp	#LR__1882
159f0     00 2C 0E F2 | 	cmp	local08, #0 wz
159f4     17 29 02 56 |  if_ne	mov	local06, local09
159f8     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
159fc     04 E8 05 F1 | 	add	ptr___system__dat__, #4
15a00     F4 2E 62 FC | 	wrlong	local09, ptr___system__dat__
15a04     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
15a08     14 FB 01 F6 | 	mov	result1, local06
15a0c     A7 F0 03 F6 | 	mov	ptra, fp
15a10     B2 00 A0 FD | 	call	#popregs_
15a14                 | __system___rxraw_ret
15a14     2D 00 64 FD | 	ret
15a18                 | 
15a18                 | __system___getus
15a18     1A FC 71 FD | 	getct	result2 wc
15a1c     1A 00 62 FD | 	getct	_var01
15a20     10 E8 05 F1 | 	add	ptr___system__dat__, #16
15a24     F4 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
15a28     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
15a2c     20 00 90 5D |  if_ne	jmp	#LR__1890
15a30     14 02 06 FB | 	rdlong	_var02, #20
15a34     A1 07 00 FF 
15a38     40 02 16 FD | 	qdiv	_var02, ##1000000
15a3c     10 E8 05 F1 | 	add	ptr___system__dat__, #16
15a40     18 FA 61 FD | 	getqx	result1
15a44     FD 02 02 F6 | 	mov	_var02, result1
15a48     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
15a4c     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
15a50                 | LR__1890
15a50     01 FD 11 FD | 	qdiv	result2, _var02
15a54     19 FC 61 FD | 	getqy	result2
15a58     28 FC 61 FD | 	setq	result2
15a5c     01 01 12 FD | 	qdiv	_var01, _var02
15a60     18 FA 61 FD | 	getqx	result1
15a64                 | __system___getus_ret
15a64     2D 00 64 FD | 	ret
15a68                 | 
15a68                 | __system____builtin_memmove
15a68     09 01 02 F6 | 	mov	_var01, arg01
15a6c     0A 13 52 F2 | 	cmps	arg01, arg02 wc
15a70     10 00 90 CD |  if_b	jmp	#LR__1900
15a74     0A 03 02 F6 | 	mov	_var02, arg02
15a78     0B 03 02 F1 | 	add	_var02, arg03
15a7c     01 13 52 F2 | 	cmps	arg01, _var02 wc
15a80     48 00 90 CD |  if_b	jmp	#LR__1906
15a84                 | LR__1900
15a84     0B 05 02 F6 | 	mov	_var03, arg03
15a88     02 04 4E F0 | 	shr	_var03, #2 wz
15a8c     18 00 90 AD |  if_e	jmp	#LR__1905
15a90     97 0A 48 FB | 	callpa	#(@LR__1903-@LR__1901)>>2,fcache_load_ptr_
15a94                 | LR__1901
15a94     02 09 D8 FC | 	rep	@LR__1904, _var03
15a98                 | LR__1902
15a98     0A 05 02 FB | 	rdlong	_var03, arg02
15a9c     09 05 62 FC | 	wrlong	_var03, arg01
15aa0     04 12 06 F1 | 	add	arg01, #4
15aa4     04 14 06 F1 | 	add	arg02, #4
15aa8                 | LR__1903
15aa8                 | LR__1904
15aa8                 | LR__1905
15aa8     02 16 CE F7 | 	test	arg03, #2 wz
15aac     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
15ab0     09 03 52 5C |  if_ne	wrword	_var02, arg01
15ab4     02 12 06 51 |  if_ne	add	arg01, #2
15ab8     02 14 06 51 |  if_ne	add	arg02, #2
15abc     01 16 CE F7 | 	test	arg03, #1 wz
15ac0     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
15ac4     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
15ac8     28 00 90 FD | 	jmp	#LR__1912
15acc                 | LR__1906
15acc     0B 13 02 F1 | 	add	arg01, arg03
15ad0     0B 15 02 F1 | 	add	arg02, arg03
15ad4     0B 07 0A F6 | 	mov	_var04, arg03 wz
15ad8     18 00 90 AD |  if_e	jmp	#LR__1911
15adc     97 0A 48 FB | 	callpa	#(@LR__1909-@LR__1907)>>2,fcache_load_ptr_
15ae0                 | LR__1907
15ae0     03 09 D8 FC | 	rep	@LR__1910, _var04
15ae4                 | LR__1908
15ae4     01 12 86 F1 | 	sub	arg01, #1
15ae8     01 14 86 F1 | 	sub	arg02, #1
15aec     0A 03 C2 FA | 	rdbyte	_var02, arg02
15af0     09 03 42 FC | 	wrbyte	_var02, arg01
15af4                 | LR__1909
15af4                 | LR__1910
15af4                 | LR__1911
15af4                 | LR__1912
15af4     00 FB 01 F6 | 	mov	result1, _var01
15af8                 | __system____builtin_memmove_ret
15af8     2D 00 64 FD | 	ret
15afc                 | 
15afc                 | __system____builtin_strcpy
15afc     09 01 02 F6 | 	mov	_var01, arg01
15b00     97 0A 48 FB | 	callpa	#(@LR__1921-@LR__1920)>>2,fcache_load_ptr_
15b04                 | LR__1920
15b04     0A FB C9 FA | 	rdbyte	result1, arg02 wz
15b08     09 FB 41 FC | 	wrbyte	result1, arg01
15b0c     01 14 06 F1 | 	add	arg02, #1
15b10     01 12 06 F1 | 	add	arg01, #1
15b14     EC FF 9F 5D |  if_ne	jmp	#LR__1920
15b18                 | LR__1921
15b18     00 FB 01 F6 | 	mov	result1, _var01
15b1c                 | __system____builtin_strcpy_ret
15b1c     2D 00 64 FD | 	ret
15b20                 | 
15b20                 | __system____topofstack
15b20     00 4A 05 F6 | 	mov	COUNT_, #0
15b24     A8 00 A0 FD | 	call	#pushregs_
15b28     08 F0 07 F1 | 	add	ptra, #8
15b2c     04 4E 05 F1 | 	add	fp, #4
15b30     A7 12 62 FC | 	wrlong	arg01, fp
15b34     A7 FA 01 F6 | 	mov	result1, fp
15b38     04 4E 85 F1 | 	sub	fp, #4
15b3c     A7 F0 03 F6 | 	mov	ptra, fp
15b40     B2 00 A0 FD | 	call	#popregs_
15b44                 | __system____topofstack_ret
15b44     2D 00 64 FD | 	ret
15b48                 | 
15b48                 | __system___lockmem
15b48     00 FA 05 F6 | 	mov	result1, #0
15b4c     01 FA 61 FD | 	cogid	result1
15b50     00 FB 05 F1 | 	add	result1, #256
15b54                 | LR__1930
15b54     09 01 0A FB | 	rdlong	_var01, arg01 wz
15b58     09 FB 61 AC |  if_e	wrlong	result1, arg01
15b5c     09 01 02 AB |  if_e	rdlong	_var01, arg01
15b60     09 01 02 AB |  if_e	rdlong	_var01, arg01
15b64     FD 00 0A F2 | 	cmp	_var01, result1 wz
15b68     E8 FF 9F 5D |  if_ne	jmp	#LR__1930
15b6c                 | __system___lockmem_ret
15b6c     2D 00 64 FD | 	ret
15b70                 | 
15b70                 | __system___string_cmp
15b70     97 14 48 FB | 	callpa	#(@LR__1941-@LR__1940)>>2,fcache_load_ptr_
15b74                 | LR__1940
15b74     09 01 C2 FA | 	rdbyte	_var01, arg01
15b78     0A 03 C2 FA | 	rdbyte	_var02, arg02
15b7c     00 05 02 F6 | 	mov	_var03, _var01
15b80     01 05 8A F1 | 	sub	_var03, _var02 wz
15b84     01 12 06 F1 | 	add	arg01, #1
15b88     01 14 06 F1 | 	add	arg02, #1
15b8c     0C 00 90 5D |  if_ne	jmp	#LR__1942
15b90     00 00 0E F2 | 	cmp	_var01, #0 wz
15b94     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
15b98     D8 FF 9F 5D |  if_ne	jmp	#LR__1940
15b9c                 | LR__1941
15b9c                 | LR__1942
15b9c     02 FB 01 F6 | 	mov	result1, _var03
15ba0                 | __system___string_cmp_ret
15ba0     2D 00 64 FD | 	ret
15ba4                 | 
15ba4                 | __system___string_concat
15ba4     05 4A 05 F6 | 	mov	COUNT_, #5
15ba8     A8 00 A0 FD | 	call	#pushregs_
15bac     09 1F 02 F6 | 	mov	local01, arg01
15bb0     0A 21 02 F6 | 	mov	local02, arg02
15bb4     0F 13 02 F6 | 	mov	arg01, local01
15bb8     09 23 02 F6 | 	mov	local03, arg01
15bbc     97 06 48 FB | 	callpa	#(@LR__1951-@LR__1950)>>2,fcache_load_ptr_
15bc0                 | LR__1950
15bc0     11 FB C9 FA | 	rdbyte	result1, local03 wz
15bc4     01 22 06 51 |  if_ne	add	local03, #1
15bc8     F4 FF 9F 5D |  if_ne	jmp	#LR__1950
15bcc                 | LR__1951
15bcc     09 23 82 F1 | 	sub	local03, arg01
15bd0     11 25 02 F6 | 	mov	local04, local03
15bd4     10 13 02 F6 | 	mov	arg01, local02
15bd8     09 23 02 F6 | 	mov	local03, arg01
15bdc     97 06 48 FB | 	callpa	#(@LR__1953-@LR__1952)>>2,fcache_load_ptr_
15be0                 | LR__1952
15be0     11 FB C9 FA | 	rdbyte	result1, local03 wz
15be4     01 22 06 51 |  if_ne	add	local03, #1
15be8     F4 FF 9F 5D |  if_ne	jmp	#LR__1952
15bec                 | LR__1953
15bec     09 23 82 F1 | 	sub	local03, arg01
15bf0     12 13 02 F6 | 	mov	arg01, local04
15bf4     11 13 02 F1 | 	add	arg01, local03
15bf8     01 12 06 F1 | 	add	arg01, #1
15bfc     AC 38 B0 FD | 	call	#__system___gc_alloc_managed
15c00     FD 26 0A F6 | 	mov	local05, result1 wz
15c04     28 00 90 AD |  if_e	jmp	#LR__1954
15c08     13 13 02 F6 | 	mov	arg01, local05
15c0c     0F 15 02 F6 | 	mov	arg02, local01
15c10     12 17 02 F6 | 	mov	arg03, local04
15c14     50 FE BF FD | 	call	#__system____builtin_memmove
15c18     13 13 02 F6 | 	mov	arg01, local05
15c1c     12 13 02 F1 | 	add	arg01, local04
15c20     01 22 06 F1 | 	add	local03, #1
15c24     10 15 02 F6 | 	mov	arg02, local02
15c28     11 17 02 F6 | 	mov	arg03, local03
15c2c     38 FE BF FD | 	call	#__system____builtin_memmove
15c30                 | LR__1954
15c30     13 FB 01 F6 | 	mov	result1, local05
15c34     A7 F0 03 F6 | 	mov	ptra, fp
15c38     B2 00 A0 FD | 	call	#popregs_
15c3c                 | __system___string_concat_ret
15c3c     2D 00 64 FD | 	ret
15c40                 | 
15c40                 | __system___tx
15c40     02 4A 05 F6 | 	mov	COUNT_, #2
15c44     A8 00 A0 FD | 	call	#pushregs_
15c48     09 1F 02 F6 | 	mov	local01, arg01
15c4c     0A 1E 0E F2 | 	cmp	local01, #10 wz
15c50     18 00 90 5D |  if_ne	jmp	#LR__1960
15c54     08 E8 05 F1 | 	add	ptr___system__dat__, #8
15c58     F4 20 02 FB | 	rdlong	local02, ptr___system__dat__
15c5c     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
15c60     02 20 CE F7 | 	test	local02, #2 wz
15c64     0D 12 06 56 |  if_ne	mov	arg01, #13
15c68     70 FC BF 5D |  if_ne	call	#__system___txraw
15c6c                 | LR__1960
15c6c     0F 13 02 F6 | 	mov	arg01, local01
15c70     68 FC BF FD | 	call	#__system___txraw
15c74     A7 F0 03 F6 | 	mov	ptra, fp
15c78     B2 00 A0 FD | 	call	#popregs_
15c7c                 | __system___tx_ret
15c7c     2D 00 64 FD | 	ret
15c80                 | 
15c80                 | __system___rx
15c80     01 4A 05 F6 | 	mov	COUNT_, #1
15c84     A8 00 A0 FD | 	call	#pushregs_
15c88                 | LR__1970
15c88     00 12 06 F6 | 	mov	arg01, #0
15c8c     8C FC BF FD | 	call	#__system___rxraw
15c90     FD 1E 02 F6 | 	mov	local01, result1
15c94     FF FF 7F FF 
15c98     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
15c9c     E8 FF 9F AD |  if_e	jmp	#LR__1970
15ca0     0D 1E 0E F2 | 	cmp	local01, #13 wz
15ca4     14 00 90 5D |  if_ne	jmp	#LR__1971
15ca8     08 E8 05 F1 | 	add	ptr___system__dat__, #8
15cac     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
15cb0     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
15cb4     02 FA CD F7 | 	test	result1, #2 wz
15cb8     0A 1E 06 56 |  if_ne	mov	local01, #10
15cbc                 | LR__1971
15cbc     08 E8 05 F1 | 	add	ptr___system__dat__, #8
15cc0     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
15cc4     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
15cc8     01 12 CE F7 | 	test	arg01, #1 wz
15ccc     1C 00 90 AD |  if_e	jmp	#LR__1974
15cd0     7F 1E 0E F2 | 	cmp	local01, #127 wz
15cd4     0C 00 90 5D |  if_ne	jmp	#LR__1972
15cd8     08 12 06 F6 | 	mov	arg01, #8
15cdc     60 FF BF FD | 	call	#__system___tx
15ce0     08 00 90 FD | 	jmp	#LR__1973
15ce4                 | LR__1972
15ce4     0F 13 02 F6 | 	mov	arg01, local01
15ce8     54 FF BF FD | 	call	#__system___tx
15cec                 | LR__1973
15cec                 | LR__1974
15cec     0F FB 01 F6 | 	mov	result1, local01
15cf0     A7 F0 03 F6 | 	mov	ptra, fp
15cf4     B2 00 A0 FD | 	call	#popregs_
15cf8                 | __system___rx_ret
15cf8     2D 00 64 FD | 	ret
15cfc                 | 
15cfc                 | __system___pinwrite
15cfc     09 01 02 F6 | 	mov	_var01, arg01
15d00     1F 00 06 F5 | 	and	_var01, #31
15d04     20 12 CE F7 | 	test	arg01, #32 wz
15d08     06 12 46 F0 | 	shr	arg01, #6
15d0c     09 13 CA F9 | 	bmask	arg01, arg01
15d10     00 13 62 F0 | 	shl	arg01, _var01
15d14     00 15 62 F0 | 	shl	arg02, _var01
15d18     1C 00 90 AD |  if_e	jmp	#LR__1980
15d1c     09 F7 43 F5 | 	or	dirb, arg01
15d20     FD 01 02 F6 | 	mov	_var01, outb
15d24     09 01 22 F5 | 	andn	_var01, arg01
15d28     09 15 02 F5 | 	and	arg02, arg01
15d2c     0A 01 42 F5 | 	or	_var01, arg02
15d30     00 FB 03 F6 | 	mov	outb, _var01
15d34     18 00 90 FD | 	jmp	#LR__1981
15d38                 | LR__1980
15d38     09 F5 43 F5 | 	or	dira, arg01
15d3c     FC 01 02 F6 | 	mov	_var01, outa
15d40     09 01 22 F5 | 	andn	_var01, arg01
15d44     09 15 02 F5 | 	and	arg02, arg01
15d48     0A 01 42 F5 | 	or	_var01, arg02
15d4c     00 F9 03 F6 | 	mov	outa, _var01
15d50                 | LR__1981
15d50                 | __system___pinwrite_ret
15d50     2D 00 64 FD | 	ret
15d54                 | 
15d54                 | __system___basic_read_line
15d54     06 4A 05 F6 | 	mov	COUNT_, #6
15d58     A8 00 A0 FD | 	call	#pushregs_
15d5c     09 1F 02 F6 | 	mov	local01, arg01
15d60     00 20 06 F6 | 	mov	local02, #0
15d64     18 22 06 F6 | 	mov	local03, #24
15d68     00 24 06 F6 | 	mov	local04, #0
15d6c     18 12 06 F6 | 	mov	arg01, #24
15d70     38 37 B0 FD | 	call	#__system___gc_alloc_managed
15d74     FD 26 0A F6 | 	mov	local05, result1 wz
15d78     13 FB 01 A6 |  if_e	mov	result1, local05
15d7c     B0 00 90 AD |  if_e	jmp	#LR__1993
15d80                 | LR__1990
15d80     0F 13 02 F6 | 	mov	arg01, local01
15d84     78 0B B0 FD | 	call	#__system___basic_get_char
15d88     FD 28 02 F6 | 	mov	local06, result1
15d8c     01 28 56 F2 | 	cmps	local06, #1 wc
15d90     8C 00 90 CD |  if_b	jmp	#LR__1992
15d94     0A 28 0E F2 | 	cmp	local06, #10 wz
15d98     10 00 90 5D |  if_ne	jmp	#LR__1991
15d9c     00 24 0E F2 | 	cmp	local04, #0 wz
15da0     01 20 56 52 |  if_ne	cmps	local02, #1 wc
15da4     01 20 86 11 |  if_a	sub	local02, #1
15da8     74 00 90 FD | 	jmp	#LR__1992
15dac                 | LR__1991
15dac     0D 28 0E F2 | 	cmp	local06, #13 wz
15db0     01 24 06 A6 |  if_e	mov	local04, #1
15db4     00 24 06 56 |  if_ne	mov	local04, #0
15db8     08 28 0E F2 | 	cmp	local06, #8 wz
15dbc     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
15dc0     01 20 56 A2 |  if_e	cmps	local02, #1 wc
15dc4     01 20 86 21 |  if_nc_and_z	sub	local02, #1
15dc8     B4 FF 9F AD |  if_e	jmp	#LR__1990
15dcc     13 17 02 F6 | 	mov	arg03, local05
15dd0     10 17 02 F1 | 	add	arg03, local02
15dd4     0B 29 42 FC | 	wrbyte	local06, arg03
15dd8     01 20 06 F1 | 	add	local02, #1
15ddc     11 21 0A F2 | 	cmp	local02, local03 wz
15de0     9C FF 9F 5D |  if_ne	jmp	#LR__1990
15de4     11 13 02 F6 | 	mov	arg01, local03
15de8     20 12 06 F1 | 	add	arg01, #32
15dec     BC 36 B0 FD | 	call	#__system___gc_alloc_managed
15df0     FD 28 0A F6 | 	mov	local06, result1 wz
15df4     14 FB 01 A6 |  if_e	mov	result1, local06
15df8     34 00 90 AD |  if_e	jmp	#LR__1993
15dfc     14 13 02 F6 | 	mov	arg01, local06
15e00     13 15 02 F6 | 	mov	arg02, local05
15e04     11 17 02 F6 | 	mov	arg03, local03
15e08     5C FC BF FD | 	call	#__system____builtin_memmove
15e0c     20 22 06 F1 | 	add	local03, #32
15e10     13 13 02 F6 | 	mov	arg01, local05
15e14     D0 37 B0 FD | 	call	#__system___gc_free
15e18     14 27 02 F6 | 	mov	local05, local06
15e1c     60 FF 9F FD | 	jmp	#LR__1990
15e20                 | LR__1992
15e20     13 29 02 F6 | 	mov	local06, local05
15e24     10 29 02 F1 | 	add	local06, local02
15e28     14 01 48 FC | 	wrbyte	#0, local06
15e2c     13 FB 01 F6 | 	mov	result1, local05
15e30                 | LR__1993
15e30     A7 F0 03 F6 | 	mov	ptra, fp
15e34     B2 00 A0 FD | 	call	#popregs_
15e38                 | __system___basic_read_line_ret
15e38     2D 00 64 FD | 	ret
15e3c                 | 
15e3c                 | __system___waitms
15e3c     09 01 02 F6 | 	mov	_var01, arg01
15e40     1A 02 62 FD | 	getct	_var02
15e44     14 04 06 FB | 	rdlong	_var03, #20
15e48     97 14 48 FB | 	callpa	#(@LR__2001-@LR__2000)>>2,fcache_load_ptr_
15e4c                 | LR__2000
15e4c     01 00 00 FF 
15e50     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
15e54     1C 00 90 CD |  if_b	jmp	#LR__2002
15e58     02 03 02 F1 | 	add	_var02, _var03
15e5c     01 13 02 F6 | 	mov	arg01, _var02
15e60     00 12 66 FA | 	addct1	arg01, #0
15e64     24 22 60 FD | 	waitct1
15e68     01 00 00 FF 
15e6c     E8 01 86 F1 | 	sub	_var01, ##1000
15e70     D8 FF 9F FD | 	jmp	#LR__2000
15e74                 | LR__2001
15e74                 | LR__2002
15e74     01 00 56 F2 | 	cmps	_var01, #1 wc
15e78     28 00 90 CD |  if_b	jmp	#LR__2003
15e7c     02 01 02 FD | 	qmul	_var01, _var03
15e80     01 00 00 FF 
15e84     E8 17 06 F6 | 	mov	arg03, ##1000
15e88     19 FA 61 FD | 	getqy	result1
15e8c     18 12 62 FD | 	getqx	arg01
15e90     28 FA 61 FD | 	setq	result1
15e94     0B 13 12 FD | 	qdiv	arg01, arg03
15e98     18 12 62 FD | 	getqx	arg01
15e9c     01 13 62 FA | 	addct1	arg01, _var02
15ea0     24 22 60 FD | 	waitct1
15ea4                 | LR__2003
15ea4                 | __system___waitms_ret
15ea4     2D 00 64 FD | 	ret
15ea8                 | 
15ea8                 | __system___waitus
15ea8     09 01 02 F6 | 	mov	_var01, arg01
15eac     1A 02 62 FD | 	getct	_var02
15eb0     14 04 06 FB | 	rdlong	_var03, #20
15eb4     97 14 48 FB | 	callpa	#(@LR__2011-@LR__2010)>>2,fcache_load_ptr_
15eb8                 | LR__2010
15eb8     A1 07 00 FF 
15ebc     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
15ec0     1C 00 90 CD |  if_b	jmp	#LR__2012
15ec4     02 03 02 F1 | 	add	_var02, _var03
15ec8     01 13 02 F6 | 	mov	arg01, _var02
15ecc     00 12 66 FA | 	addct1	arg01, #0
15ed0     24 22 60 FD | 	waitct1
15ed4     A1 07 00 FF 
15ed8     40 00 86 F1 | 	sub	_var01, ##1000000
15edc     D8 FF 9F FD | 	jmp	#LR__2010
15ee0                 | LR__2011
15ee0                 | LR__2012
15ee0     01 00 56 F2 | 	cmps	_var01, #1 wc
15ee4     28 00 90 CD |  if_b	jmp	#LR__2013
15ee8     02 01 02 FD | 	qmul	_var01, _var03
15eec     A1 07 00 FF 
15ef0     40 16 06 F6 | 	mov	arg03, ##1000000
15ef4     19 FA 61 FD | 	getqy	result1
15ef8     18 12 62 FD | 	getqx	arg01
15efc     28 FA 61 FD | 	setq	result1
15f00     0B 13 12 FD | 	qdiv	arg01, arg03
15f04     18 FA 61 FD | 	getqx	result1
15f08     FD 02 62 FA | 	addct1	_var02, result1
15f0c     24 22 60 FD | 	waitct1
15f10                 | LR__2013
15f10                 | __system___waitus_ret
15f10     2D 00 64 FD | 	ret
15f14                 | 
15f14                 | __system___mount
15f14     0B 4A 05 F6 | 	mov	COUNT_, #11
15f18     A8 00 A0 FD | 	call	#pushregs_
15f1c     09 1F 02 F6 | 	mov	local01, arg01
15f20     0A 21 0A F6 | 	mov	local02, arg02 wz
15f24     01 22 66 F6 | 	neg	local03, #1
15f28     01 FA 65 A6 |  if_e	neg	result1, #1
15f2c     98 02 90 AD |  if_e	jmp	#LR__2035
15f30     0F FB C1 FA | 	rdbyte	result1, local01
15f34     2F FA 0D F2 | 	cmp	result1, #47 wz
15f38     28 00 90 5D |  if_ne	jmp	#LR__2022
15f3c     0F 13 02 F6 | 	mov	arg01, local01
15f40     09 25 02 F6 | 	mov	local04, arg01
15f44     97 06 48 FB | 	callpa	#(@LR__2021-@LR__2020)>>2,fcache_load_ptr_
15f48                 | LR__2020
15f48     12 FB C9 FA | 	rdbyte	result1, local04 wz
15f4c     01 24 06 51 |  if_ne	add	local04, #1
15f50     F4 FF 9F 5D |  if_ne	jmp	#LR__2020
15f54                 | LR__2021
15f54     09 25 82 F1 | 	sub	local04, arg01
15f58     12 FB 01 F6 | 	mov	result1, local04
15f5c     10 FA 55 F2 | 	cmps	result1, #16 wc
15f60     14 00 90 CD |  if_b	jmp	#LR__2023
15f64                 | LR__2022
15f64     20 E8 05 F1 | 	add	ptr___system__dat__, #32
15f68     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
15f6c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
15f70     01 FA 65 F6 | 	neg	result1, #1
15f74     50 02 90 FD | 	jmp	#LR__2035
15f78                 | LR__2023
15f78     00 26 06 F6 | 	mov	local05, #0
15f7c                 | LR__2024
15f7c     04 26 56 F2 | 	cmps	local05, #4 wc
15f80     B0 00 90 3D |  if_ae	jmp	#LR__2029
15f84     13 13 02 F6 | 	mov	arg01, local05
15f88     02 12 66 F0 | 	shl	arg01, #2
15f8c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
15f90     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
15f94     09 FB 09 FB | 	rdlong	result1, arg01 wz
15f98     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15f9c     00 22 56 A2 |  if_e	cmps	local03, #0 wc
15fa0     13 23 02 86 |  if_c_and_z	mov	local03, local05
15fa4     84 00 90 8D |  if_c_and_z	jmp	#LR__2028
15fa8     13 13 02 F6 | 	mov	arg01, local05
15fac     02 12 66 F0 | 	shl	arg01, #2
15fb0     64 E8 05 F1 | 	add	ptr___system__dat__, #100
15fb4     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
15fb8     09 13 02 FB | 	rdlong	arg01, arg01
15fbc     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15fc0     09 25 02 F6 | 	mov	local04, arg01
15fc4     97 06 48 FB | 	callpa	#(@LR__2026-@LR__2025)>>2,fcache_load_ptr_
15fc8                 | LR__2025
15fc8     12 FB C9 FA | 	rdbyte	result1, local04 wz
15fcc     01 24 06 51 |  if_ne	add	local04, #1
15fd0     F4 FF 9F 5D |  if_ne	jmp	#LR__2025
15fd4                 | LR__2026
15fd4     09 25 82 F1 | 	sub	local04, arg01
15fd8     12 29 02 F6 | 	mov	local06, local04
15fdc     14 13 02 F6 | 	mov	arg01, local06
15fe0     0F 13 02 F1 | 	add	arg01, local01
15fe4     09 FB C1 FA | 	rdbyte	result1, arg01
15fe8     2F FA 0D F2 | 	cmp	result1, #47 wz
15fec     14 2B 02 56 |  if_ne	mov	local07, local06
15ff0     0F 2B 02 51 |  if_ne	add	local07, local01
15ff4     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
15ff8     30 00 90 5D |  if_ne	jmp	#LR__2027
15ffc     13 17 02 F6 | 	mov	arg03, local05
16000     02 16 66 F0 | 	shl	arg03, #2
16004     64 E8 05 F1 | 	add	ptr___system__dat__, #100
16008     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
1600c     0B 15 02 FB | 	rdlong	arg02, arg03
16010     0F 13 02 F6 | 	mov	arg01, local01
16014     14 17 02 F6 | 	mov	arg03, local06
16018     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1601c     D0 48 B0 FD | 	call	#__system__strncmp
16020     00 FA 0D F2 | 	cmp	result1, #0 wz
16024     13 23 02 A6 |  if_e	mov	local03, local05
16028     08 00 90 AD |  if_e	jmp	#LR__2029
1602c                 | LR__2027
1602c                 | LR__2028
1602c     01 26 06 F1 | 	add	local05, #1
16030     48 FF 9F FD | 	jmp	#LR__2024
16034                 | LR__2029
16034     FF FF 7F FF 
16038     FF 23 0E F2 | 	cmp	local03, ##-1 wz
1603c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
16040     F4 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
16044     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
16048     01 FA 65 A6 |  if_e	neg	result1, #1
1604c     78 01 90 AD |  if_e	jmp	#LR__2035
16050     11 27 02 F6 | 	mov	local05, local03
16054     13 2B 02 F6 | 	mov	local07, local05
16058     02 2A 66 F0 | 	shl	local07, #2
1605c     74 E8 05 F1 | 	add	ptr___system__dat__, #116
16060     F4 2A 02 F1 | 	add	local07, ptr___system__dat__
16064     15 29 0A FB | 	rdlong	local06, local07 wz
16068     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
1606c     58 00 90 AD |  if_e	jmp	#LR__2030
16070     4C 28 06 F1 | 	add	local06, #76
16074     14 2B 0A FB | 	rdlong	local07, local06 wz
16078     4C 28 86 F1 | 	sub	local06, #76
1607c     48 00 90 AD |  if_e	jmp	#LR__2030
16080     4C 28 06 F1 | 	add	local06, #76
16084     14 2B 02 FB | 	rdlong	local07, local06
16088     15 23 02 F6 | 	mov	local03, local07
1608c     13 2A 46 F7 | 	zerox	local07, #19
16090     14 22 46 F0 | 	shr	local03, #20
16094     02 22 66 F0 | 	shl	local03, #2
16098     ED 22 02 F1 | 	add	local03, __methods__
1609c     11 23 02 FB | 	rdlong	local03, local03
160a0     13 29 02 F6 | 	mov	local06, local05
160a4     02 28 66 F0 | 	shl	local06, #2
160a8     64 E8 05 F1 | 	add	ptr___system__dat__, #100
160ac     F4 28 02 F1 | 	add	local06, ptr___system__dat__
160b0     14 13 02 FB | 	rdlong	arg01, local06
160b4     F2 28 02 F6 | 	mov	local06, objptr
160b8     15 E5 01 F6 | 	mov	objptr, local07
160bc     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
160c0     2D 22 62 FD | 	call	local03
160c4     14 E5 01 F6 | 	mov	objptr, local06
160c8                 | LR__2030
160c8     13 2D 02 F6 | 	mov	local08, local05
160cc     02 2C 66 F0 | 	shl	local08, #2
160d0     74 E8 05 F1 | 	add	ptr___system__dat__, #116
160d4     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
160d8     16 21 62 FC | 	wrlong	local02, local08
160dc     00 20 0E F2 | 	cmp	local02, #0 wz
160e0     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
160e4     18 00 90 5D |  if_ne	jmp	#LR__2031
160e8     02 26 66 F0 | 	shl	local05, #2
160ec     64 E8 05 F1 | 	add	ptr___system__dat__, #100
160f0     F4 26 02 F1 | 	add	local05, ptr___system__dat__
160f4     13 01 68 FC | 	wrlong	#0, local05
160f8     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
160fc     C4 00 90 FD | 	jmp	#LR__2034
16100                 | LR__2031
16100     13 2F 02 F6 | 	mov	local09, local05
16104     04 2E 66 F0 | 	shl	local09, #4
16108     24 E8 05 F1 | 	add	ptr___system__dat__, #36
1610c     F4 2E 02 F1 | 	add	local09, ptr___system__dat__
16110     17 13 02 F6 | 	mov	arg01, local09
16114     0F 15 02 F6 | 	mov	arg02, local01
16118     10 16 06 F6 | 	mov	arg03, #16
1611c     24 E8 85 F1 | 	sub	ptr___system__dat__, #36
16120     20 47 B0 FD | 	call	#__system__strncpy
16124     48 20 06 F1 | 	add	local02, #72
16128     10 2D 0A FB | 	rdlong	local08, local02 wz
1612c     48 20 86 F1 | 	sub	local02, #72
16130     7C 00 90 AD |  if_e	jmp	#LR__2033
16134     48 20 06 F1 | 	add	local02, #72
16138     10 2D 02 FB | 	rdlong	local08, local02
1613c     16 31 02 F6 | 	mov	local10, local08
16140     13 2C 46 F7 | 	zerox	local08, #19
16144     14 30 46 F0 | 	shr	local10, #20
16148     02 30 66 F0 | 	shl	local10, #2
1614c     ED 30 02 F1 | 	add	local10, __methods__
16150     18 31 02 FB | 	rdlong	local10, local10
16154     17 13 02 F6 | 	mov	arg01, local09
16158     F2 32 02 F6 | 	mov	local11, objptr
1615c     16 E5 01 F6 | 	mov	objptr, local08
16160     2D 30 62 FD | 	call	local10
16164     19 E5 01 F6 | 	mov	objptr, local11
16168     FD 12 0A F6 | 	mov	arg01, result1 wz
1616c     40 00 90 AD |  if_e	jmp	#LR__2032
16170     13 2D 02 F6 | 	mov	local08, local05
16174     02 2C 66 F0 | 	shl	local08, #2
16178     74 E8 05 F1 | 	add	ptr___system__dat__, #116
1617c     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
16180     16 01 68 FC | 	wrlong	#0, local08
16184     02 26 66 F0 | 	shl	local05, #2
16188     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
1618c     F4 26 02 F1 | 	add	local05, ptr___system__dat__
16190     13 01 68 FC | 	wrlong	#0, local05
16194     09 13 6A F6 | 	neg	arg01, arg01 wz
16198     44 E8 85 F1 | 	sub	ptr___system__dat__, #68
1619c     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
161a0     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
161a4     01 FA 65 56 |  if_ne	neg	result1, #1
161a8     00 FA 05 A6 |  if_e	mov	result1, #0
161ac     18 00 90 FD | 	jmp	#LR__2035
161b0                 | LR__2032
161b0                 | LR__2033
161b0     02 26 66 F0 | 	shl	local05, #2
161b4     64 E8 05 F1 | 	add	ptr___system__dat__, #100
161b8     F4 26 02 F1 | 	add	local05, ptr___system__dat__
161bc     13 2F 62 FC | 	wrlong	local09, local05
161c0     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
161c4                 | LR__2034
161c4     00 FA 05 F6 | 	mov	result1, #0
161c8                 | LR__2035
161c8     A7 F0 03 F6 | 	mov	ptra, fp
161cc     B2 00 A0 FD | 	call	#popregs_
161d0                 | __system___mount_ret
161d0     2D 00 64 FD | 	ret
161d4                 | 
161d4                 | __system___chdir
161d4     00 4A 05 F6 | 	mov	COUNT_, #0
161d8     A8 00 A0 FD | 	call	#pushregs_
161dc     40 F0 07 F1 | 	add	ptra, #64
161e0     04 4E 05 F1 | 	add	fp, #4
161e4     A7 12 62 FC | 	wrlong	arg01, fp
161e8     04 4E 05 F1 | 	add	fp, #4
161ec     A7 14 02 F6 | 	mov	arg02, fp
161f0     08 4E 85 F1 | 	sub	fp, #8
161f4     2C 43 B0 FD | 	call	#__system__stat
161f8     3C 4E 05 F1 | 	add	fp, #60
161fc     A7 FA 61 FC | 	wrlong	result1, fp
16200     3C 4E 85 F1 | 	sub	fp, #60
16204     00 FA 0D F2 | 	cmp	result1, #0 wz
16208     3C 4E 05 51 |  if_ne	add	fp, #60
1620c     A7 FA 01 5B |  if_ne	rdlong	result1, fp
16210     3C 4E 85 51 |  if_ne	sub	fp, #60
16214     BC 00 90 5D |  if_ne	jmp	#LR__2042
16218     10 4E 05 F1 | 	add	fp, #16
1621c     A7 12 02 FB | 	rdlong	arg01, fp
16220     10 4E 85 F1 | 	sub	fp, #16
16224     78 00 00 FF 
16228     00 12 06 F5 | 	and	arg01, ##61440
1622c     08 00 00 FF 
16230     00 12 0E F2 | 	cmp	arg01, ##4096 wz
16234     20 E8 05 51 |  if_ne	add	ptr___system__dat__, #32
16238     F4 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
1623c     20 E8 85 51 |  if_ne	sub	ptr___system__dat__, #32
16240     01 FA 65 56 |  if_ne	neg	result1, #1
16244     8C 00 90 5D |  if_ne	jmp	#LR__2042
16248     04 4E 05 F1 | 	add	fp, #4
1624c     A7 16 02 FB | 	rdlong	arg03, fp
16250     04 4E 85 F1 | 	sub	fp, #4
16254     0B 17 C2 FA | 	rdbyte	arg03, arg03
16258     2F 16 0E F2 | 	cmp	arg03, #47 wz
1625c     24 00 90 5D |  if_ne	jmp	#LR__2040
16260     84 E8 05 F1 | 	add	ptr___system__dat__, #132
16264     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
16268     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
1626c     04 4E 05 F1 | 	add	fp, #4
16270     A7 14 02 FB | 	rdlong	arg02, fp
16274     04 4E 85 F1 | 	sub	fp, #4
16278     00 17 06 F6 | 	mov	arg03, #256
1627c     C4 45 B0 FD | 	call	#__system__strncpy
16280     4C 00 90 FD | 	jmp	#LR__2041
16284                 | LR__2040
16284     84 E9 05 F1 | 	add	ptr___system__dat__, #388
16288     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1628c     38 4E 05 F1 | 	add	fp, #56
16290     A7 12 62 FC | 	wrlong	arg01, fp
16294     38 4E 85 F1 | 	sub	fp, #56
16298     00 E9 85 F1 | 	sub	ptr___system__dat__, #256
1629c     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
162a0     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
162a4     00 17 06 F6 | 	mov	arg03, #256
162a8     98 45 B0 FD | 	call	#__system__strncpy
162ac     38 4E 05 F1 | 	add	fp, #56
162b0     A7 12 02 FB | 	rdlong	arg01, fp
162b4     34 4E 85 F1 | 	sub	fp, #52
162b8     A7 14 02 FB | 	rdlong	arg02, fp
162bc     04 4E 85 F1 | 	sub	fp, #4
162c0     84 E8 05 F1 | 	add	ptr___system__dat__, #132
162c4     F4 16 02 F6 | 	mov	arg03, ptr___system__dat__
162c8     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
162cc     10 00 B0 FD | 	call	#__system____getvfsforfile
162d0                 | LR__2041
162d0     00 FA 05 F6 | 	mov	result1, #0
162d4                 | LR__2042
162d4     A7 F0 03 F6 | 	mov	ptra, fp
162d8     B2 00 A0 FD | 	call	#popregs_
162dc                 | __system___chdir_ret
162dc     2D 00 64 FD | 	ret
162e0                 | 
162e0                 | __system____getvfsforfile
162e0     0E 4A 05 F6 | 	mov	COUNT_, #14
162e4     A8 00 A0 FD | 	call	#pushregs_
162e8     09 1F 02 F6 | 	mov	local01, arg01
162ec     0A 21 02 F6 | 	mov	local02, arg02
162f0     0B 23 02 F6 | 	mov	local03, arg03
162f4     97 10 48 FB | 	callpa	#(@LR__2051-@LR__2050)>>2,fcache_load_ptr_
162f8                 | LR__2050
162f8     10 FB C1 FA | 	rdbyte	result1, local02
162fc     2F FA 0D F2 | 	cmp	result1, #47 wz
16300     01 20 06 A1 |  if_e	add	local02, #1
16304     10 25 C2 AA |  if_e	rdbyte	local04, local02
16308     01 20 86 A1 |  if_e	sub	local02, #1
1630c     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
16310     01 20 06 A1 |  if_e	add	local02, #1
16314     E0 FF 9F AD |  if_e	jmp	#LR__2050
16318                 | LR__2051
16318     10 25 C2 FA | 	rdbyte	local04, local02
1631c     2F 24 0E F2 | 	cmp	local04, #47 wz
16320     14 00 90 5D |  if_ne	jmp	#LR__2052
16324     0F 13 02 F6 | 	mov	arg01, local01
16328     10 15 02 F6 | 	mov	arg02, local02
1632c     00 17 06 F6 | 	mov	arg03, #256
16330     10 45 B0 FD | 	call	#__system__strncpy
16334     7C 00 90 FD | 	jmp	#LR__2054
16338                 | LR__2052
16338     84 E8 05 F1 | 	add	ptr___system__dat__, #132
1633c     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
16340     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
16344     0F 13 02 F6 | 	mov	arg01, local01
16348     00 17 06 F6 | 	mov	arg03, #256
1634c     F4 44 B0 FD | 	call	#__system__strncpy
16350     10 25 CA FA | 	rdbyte	local04, local02 wz
16354     5C 00 90 AD |  if_e	jmp	#LR__2053
16358     10 25 C2 FA | 	rdbyte	local04, local02
1635c     2E 24 0E F2 | 	cmp	local04, #46 wz
16360     01 20 06 A1 |  if_e	add	local02, #1
16364     10 27 C2 AA |  if_e	rdbyte	local05, local02
16368     01 20 86 A1 |  if_e	sub	local02, #1
1636c     13 29 02 A6 |  if_e	mov	local06, local05
16370     07 28 4E A7 |  if_e	zerox	local06, #7 wz
16374     3C 00 90 AD |  if_e	jmp	#LR__2053
16378     0F 27 C2 FA | 	rdbyte	local05, local01
1637c     2F 26 0E F2 | 	cmp	local05, #47 wz
16380     01 1E 06 A1 |  if_e	add	local01, #1
16384     0F 25 C2 AA |  if_e	rdbyte	local04, local01
16388     01 1E 86 A1 |  if_e	sub	local01, #1
1638c     00 24 4E A2 |  if_e	cmps	local04, #0 wz
16390     25 01 00 5F 
16394     28 15 06 56 |  if_ne	mov	arg02, ##@LR__4060
16398     0F 13 02 56 |  if_ne	mov	arg01, local01
1639c     00 17 06 56 |  if_ne	mov	arg03, #256
163a0     EC 44 B0 5D |  if_ne	call	#__system__strncat
163a4     0F 13 02 F6 | 	mov	arg01, local01
163a8     10 15 02 F6 | 	mov	arg02, local02
163ac     00 17 06 F6 | 	mov	arg03, #256
163b0     DC 44 B0 FD | 	call	#__system__strncat
163b4                 | LR__2053
163b4                 | LR__2054
163b4     0F 13 02 F6 | 	mov	arg01, local01
163b8     94 46 B0 FD | 	call	#__system___normalizeName
163bc     0F 25 CA FA | 	rdbyte	local04, local01 wz
163c0     1C 00 90 AD |  if_e	jmp	#LR__2055
163c4     0F 25 C2 FA | 	rdbyte	local04, local01
163c8     2F 24 0E F2 | 	cmp	local04, #47 wz
163cc     01 1E 06 A1 |  if_e	add	local01, #1
163d0     0F 29 C2 AA |  if_e	rdbyte	local06, local01
163d4     01 1E 86 A1 |  if_e	sub	local01, #1
163d8     00 28 4E A2 |  if_e	cmps	local06, #0 wz
163dc     18 00 90 5D |  if_ne	jmp	#LR__2056
163e0                 | LR__2055
163e0     01 00 00 FF 
163e4     84 E8 05 F1 | 	add	ptr___system__dat__, ##644
163e8     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
163ec     01 00 00 FF 
163f0     84 E8 85 F1 | 	sub	ptr___system__dat__, ##644
163f4     EC 01 90 FD | 	jmp	#LR__2070
163f8                 | LR__2056
163f8     00 2A 06 F6 | 	mov	local07, #0
163fc                 | LR__2057
163fc     04 2A 56 F2 | 	cmps	local07, #4 wc
16400     CC 01 90 3D |  if_ae	jmp	#LR__2069
16404     15 29 02 F6 | 	mov	local06, local07
16408     02 28 66 F0 | 	shl	local06, #2
1640c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
16410     F4 28 02 F1 | 	add	local06, ptr___system__dat__
16414     14 29 0A FB | 	rdlong	local06, local06 wz
16418     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1641c     A8 01 90 AD |  if_e	jmp	#LR__2068
16420     15 25 02 F6 | 	mov	local04, local07
16424     02 24 66 F0 | 	shl	local04, #2
16428     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1642c     F4 24 02 F1 | 	add	local04, ptr___system__dat__
16430     12 13 02 FB | 	rdlong	arg01, local04
16434     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
16438     09 2D 02 F6 | 	mov	local08, arg01
1643c     97 06 48 FB | 	callpa	#(@LR__2059-@LR__2058)>>2,fcache_load_ptr_
16440                 | LR__2058
16440     16 FB C9 FA | 	rdbyte	result1, local08 wz
16444     01 2C 06 51 |  if_ne	add	local08, #1
16448     F4 FF 9F 5D |  if_ne	jmp	#LR__2058
1644c                 | LR__2059
1644c     09 2D 82 F1 | 	sub	local08, arg01
16450     16 2F 02 F6 | 	mov	local09, local08
16454     17 25 02 F6 | 	mov	local04, local09
16458     0F 25 02 F1 | 	add	local04, local01
1645c     12 29 C2 FA | 	rdbyte	local06, local04
16460     2F 28 0E F2 | 	cmp	local06, #47 wz
16464     17 31 02 56 |  if_ne	mov	local10, local09
16468     0F 31 02 51 |  if_ne	add	local10, local01
1646c     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
16470     54 01 90 5D |  if_ne	jmp	#LR__2067
16474     15 17 02 F6 | 	mov	arg03, local07
16478     02 16 66 F0 | 	shl	arg03, #2
1647c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
16480     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
16484     0B 15 02 FB | 	rdlong	arg02, arg03
16488     17 17 02 F6 | 	mov	arg03, local09
1648c     0F 13 02 F6 | 	mov	arg01, local01
16490     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
16494     58 44 B0 FD | 	call	#__system__strncmp
16498     00 FA 4D F2 | 	cmps	result1, #0 wz
1649c     28 01 90 5D |  if_ne	jmp	#LR__2067
164a0     15 33 02 F6 | 	mov	local11, local07
164a4     02 32 66 F0 | 	shl	local11, #2
164a8     74 E8 05 F1 | 	add	ptr___system__dat__, #116
164ac     F4 32 02 F1 | 	add	local11, ptr___system__dat__
164b0     19 35 02 FB | 	rdlong	local12, local11
164b4     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
164b8     97 22 48 FB | 	callpa	#(@LR__2061-@LR__2060)>>2,fcache_load_ptr_
164bc                 | LR__2060
164bc     17 29 02 F6 | 	mov	local06, local09
164c0     01 28 06 F1 | 	add	local06, #1
164c4     0F 29 02 F1 | 	add	local06, local01
164c8     14 33 C2 FA | 	rdbyte	local11, local06
164cc     2E 32 0E F2 | 	cmp	local11, #46 wz
164d0     2C 00 90 5D |  if_ne	jmp	#LR__2062
164d4     17 33 02 F6 | 	mov	local11, local09
164d8     02 32 06 F1 | 	add	local11, #2
164dc     0F 33 02 F1 | 	add	local11, local01
164e0     19 31 C2 FA | 	rdbyte	local10, local11
164e4     2F 30 0E F2 | 	cmp	local10, #47 wz
164e8     17 37 02 56 |  if_ne	mov	local13, local09
164ec     02 36 06 51 |  if_ne	add	local13, #2
164f0     0F 37 02 51 |  if_ne	add	local13, local01
164f4     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
164f8     01 2E 06 A1 |  if_e	add	local09, #1
164fc     BC FF 9F AD |  if_e	jmp	#LR__2060
16500                 | LR__2061
16500                 | LR__2062
16500     00 22 0E F2 | 	cmp	local03, #0 wz
16504     11 13 02 56 |  if_ne	mov	arg01, local03
16508     0F 15 02 56 |  if_ne	mov	arg02, local01
1650c     00 17 06 56 |  if_ne	mov	arg03, #256
16510     30 43 B0 5D |  if_ne	call	#__system__strncpy
16514     0F 15 02 F6 | 	mov	arg02, local01
16518     17 15 02 F1 | 	add	arg02, local09
1651c     01 14 06 F1 | 	add	arg02, #1
16520     0F 13 02 F6 | 	mov	arg01, local01
16524     D4 F5 BF FD | 	call	#__system____builtin_strcpy
16528     0F 13 02 F6 | 	mov	arg01, local01
1652c     09 2D 02 F6 | 	mov	local08, arg01
16530     97 06 48 FB | 	callpa	#(@LR__2064-@LR__2063)>>2,fcache_load_ptr_
16534                 | LR__2063
16534     16 FB C9 FA | 	rdbyte	result1, local08 wz
16538     01 2C 06 51 |  if_ne	add	local08, #1
1653c     F4 FF 9F 5D |  if_ne	jmp	#LR__2063
16540                 | LR__2064
16540     09 2D 82 F1 | 	sub	local08, arg01
16544     16 2F 02 F6 | 	mov	local09, local08
16548                 | LR__2065
16548     01 2E 56 F2 | 	cmps	local09, #1 wc
1654c     70 00 90 CD |  if_b	jmp	#LR__2066
16550     17 25 02 F6 | 	mov	local04, local09
16554     0F 25 02 F1 | 	add	local04, local01
16558     12 33 C2 FA | 	rdbyte	local11, local04
1655c     2F 32 0E F2 | 	cmp	local11, #47 wz
16560     17 33 02 A6 |  if_e	mov	local11, local09
16564     0F 33 02 A1 |  if_e	add	local11, local01
16568     19 01 48 AC |  if_e	wrbyte	#0, local11
1656c     01 2E 86 A1 |  if_e	sub	local09, #1
16570     D4 FF 9F AD |  if_e	jmp	#LR__2065
16574     17 25 02 F6 | 	mov	local04, local09
16578     0F 25 02 F1 | 	add	local04, local01
1657c     12 33 C2 FA | 	rdbyte	local11, local04
16580     2E 32 0E F2 | 	cmp	local11, #46 wz
16584     38 00 90 5D |  if_ne	jmp	#LR__2066
16588     02 2E 56 F2 | 	cmps	local09, #2 wc
1658c     30 00 90 CD |  if_b	jmp	#LR__2066
16590     17 39 02 F6 | 	mov	local14, local09
16594     01 38 86 F1 | 	sub	local14, #1
16598     0F 39 02 F1 | 	add	local14, local01
1659c     1C 27 C2 FA | 	rdbyte	local05, local14
165a0     2F 26 0E F2 | 	cmp	local05, #47 wz
165a4     18 00 90 5D |  if_ne	jmp	#LR__2066
165a8     17 25 02 F6 | 	mov	local04, local09
165ac     01 24 86 F1 | 	sub	local04, #1
165b0     0F 25 02 F1 | 	add	local04, local01
165b4     12 01 48 FC | 	wrbyte	#0, local04
165b8     02 2E 86 F1 | 	sub	local09, #2
165bc     88 FF 9F FD | 	jmp	#LR__2065
165c0                 | LR__2066
165c0     1A FB 01 F6 | 	mov	result1, local12
165c4     1C 00 90 FD | 	jmp	#LR__2070
165c8                 | LR__2067
165c8                 | LR__2068
165c8     01 2A 06 F1 | 	add	local07, #1
165cc     2C FE 9F FD | 	jmp	#LR__2057
165d0                 | LR__2069
165d0     03 00 00 FF 
165d4     38 E9 05 F1 | 	add	ptr___system__dat__, ##1848
165d8     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
165dc     03 00 00 FF 
165e0     38 E9 85 F1 | 	sub	ptr___system__dat__, ##1848
165e4                 | LR__2070
165e4     A7 F0 03 F6 | 	mov	ptra, fp
165e8     B2 00 A0 FD | 	call	#popregs_
165ec                 | __system____getvfsforfile_ret
165ec     2D 00 64 FD | 	ret
165f0                 | 
165f0                 | __system___basic_open
165f0     05 4A 05 F6 | 	mov	COUNT_, #5
165f4     A8 00 A0 FD | 	call	#pushregs_
165f8     0A 1F 02 F6 | 	mov	local01, arg02
165fc     0B 21 02 F6 | 	mov	local02, arg03
16600     0C 23 02 F6 | 	mov	local03, arg04
16604     00 24 06 F6 | 	mov	local04, #0
16608     10 42 B0 FD | 	call	#__system____getftab
1660c     FD 26 0A F6 | 	mov	local05, result1 wz
16610     18 00 90 5D |  if_ne	jmp	#LR__2080
16614     EE 12 02 F6 | 	mov	arg01, abortchain
16618     0C 14 06 F6 | 	mov	arg02, #12
1661c     01 16 06 F6 | 	mov	arg03, #1
16620     DA 00 A0 FD | 	call	#__longjmp
16624     01 FA 65 F6 | 	neg	result1, #1
16628     14 01 90 FD | 	jmp	#LR__2089
1662c                 | LR__2080
1662c     08 26 06 F1 | 	add	local05, #8
16630     13 FB 09 FB | 	rdlong	result1, local05 wz
16634     08 26 86 F1 | 	sub	local05, #8
16638     13 13 02 56 |  if_ne	mov	arg01, local05
1663c     6C 39 B0 5D |  if_ne	call	#__system___closeraw
16640     00 1E 0E F2 | 	cmp	local01, #0 wz
16644     00 20 0E A2 |  if_e	cmp	local02, #0 wz
16648     00 22 0E A2 |  if_e	cmp	local03, #0 wz
1664c     3C 00 90 AD |  if_e	jmp	#LR__2082
16650     0C 12 06 F6 | 	mov	arg01, #12
16654     54 2E B0 FD | 	call	#__system___gc_alloc_managed
16658     FD 24 0A F6 | 	mov	local04, result1 wz
1665c     18 00 90 5D |  if_ne	jmp	#LR__2081
16660     EE 12 02 F6 | 	mov	arg01, abortchain
16664     07 14 06 F6 | 	mov	arg02, #7
16668     01 16 06 F6 | 	mov	arg03, #1
1666c     DA 00 A0 FD | 	call	#__longjmp
16670     01 FA 65 F6 | 	neg	result1, #1
16674     C8 00 90 FD | 	jmp	#LR__2089
16678                 | LR__2081
16678     12 01 68 FC | 	wrlong	#0, local04
1667c     04 24 06 F1 | 	add	local04, #4
16680     12 01 68 FC | 	wrlong	#0, local04
16684     04 24 86 F1 | 	sub	local04, #4
16688     13 25 62 FC | 	wrlong	local04, local05
1668c                 | LR__2082
1668c     00 1E 0E F2 | 	cmp	local01, #0 wz
16690     20 00 90 AD |  if_e	jmp	#LR__2083
16694     12 1F 62 FC | 	wrlong	local01, local04
16698     12 FB 01 F6 | 	mov	result1, local04
1669c     00 B8 02 FF 
166a0     00 FA 45 F5 | 	or	result1, ##91226112
166a4     1C 26 06 F1 | 	add	local05, #28
166a8     13 FB 61 FC | 	wrlong	result1, local05
166ac     1C 26 86 F1 | 	sub	local05, #28
166b0     0C 00 90 FD | 	jmp	#LR__2084
166b4                 | LR__2083
166b4     1C 26 06 F1 | 	add	local05, #28
166b8     13 01 68 FC | 	wrlong	#0, local05
166bc     1C 26 86 F1 | 	sub	local05, #28
166c0                 | LR__2084
166c0     00 20 0E F2 | 	cmp	local02, #0 wz
166c4     28 00 90 AD |  if_e	jmp	#LR__2085
166c8     04 24 06 F1 | 	add	local04, #4
166cc     12 21 62 FC | 	wrlong	local02, local04
166d0     04 24 86 F1 | 	sub	local04, #4
166d4     12 FB 01 F6 | 	mov	result1, local04
166d8     00 C0 02 FF 
166dc     00 FA 45 F5 | 	or	result1, ##92274688
166e0     20 26 06 F1 | 	add	local05, #32
166e4     13 FB 61 FC | 	wrlong	result1, local05
166e8     20 26 86 F1 | 	sub	local05, #32
166ec     0C 00 90 FD | 	jmp	#LR__2086
166f0                 | LR__2085
166f0     20 26 06 F1 | 	add	local05, #32
166f4     13 01 68 FC | 	wrlong	#0, local05
166f8     20 26 86 F1 | 	sub	local05, #32
166fc                 | LR__2086
166fc     00 22 0E F2 | 	cmp	local03, #0 wz
16700     24 00 90 AD |  if_e	jmp	#LR__2087
16704     08 24 06 F1 | 	add	local04, #8
16708     12 23 62 FC | 	wrlong	local03, local04
1670c     08 24 86 F1 | 	sub	local04, #8
16710     00 C8 02 FF 
16714     00 24 46 F5 | 	or	local04, ##93323264
16718     24 26 06 F1 | 	add	local05, #36
1671c     13 25 62 FC | 	wrlong	local04, local05
16720     24 26 86 F1 | 	sub	local05, #36
16724     0C 00 90 FD | 	jmp	#LR__2088
16728                 | LR__2087
16728     24 26 06 F1 | 	add	local05, #36
1672c     13 01 68 FC | 	wrlong	#0, local05
16730     24 26 86 F1 | 	sub	local05, #36
16734                 | LR__2088
16734     08 26 06 F1 | 	add	local05, #8
16738     13 0F 68 FC | 	wrlong	#7, local05
1673c     00 FA 05 F6 | 	mov	result1, #0
16740                 | LR__2089
16740     A7 F0 03 F6 | 	mov	ptra, fp
16744     B2 00 A0 FD | 	call	#popregs_
16748                 | __system___basic_open_ret
16748     2D 00 64 FD | 	ret
1674c                 | 
1674c                 | __system___basic_open_string
1674c     04 4A 05 F6 | 	mov	COUNT_, #4
16750     A8 00 A0 FD | 	call	#pushregs_
16754     0A 1F 02 F6 | 	mov	local01, arg02
16758     0B 21 02 F6 | 	mov	local02, arg03
1675c     BC 40 B0 FD | 	call	#__system____getftab
16760     FD 22 0A F6 | 	mov	local03, result1 wz
16764     18 00 90 5D |  if_ne	jmp	#LR__2090
16768     EE 12 02 F6 | 	mov	arg01, abortchain
1676c     0C 14 06 F6 | 	mov	arg02, #12
16770     01 16 06 F6 | 	mov	arg03, #1
16774     DA 00 A0 FD | 	call	#__longjmp
16778     01 FA 65 F6 | 	neg	result1, #1
1677c     58 00 90 FD | 	jmp	#LR__2092
16780                 | LR__2090
16780     08 22 06 F1 | 	add	local03, #8
16784     11 19 0A FB | 	rdlong	arg04, local03 wz
16788     08 22 86 F1 | 	sub	local03, #8
1678c     11 13 02 56 |  if_ne	mov	arg01, local03
16790     18 38 B0 5D |  if_ne	call	#__system___closeraw
16794     0F 15 02 F6 | 	mov	arg02, local01
16798     10 17 02 F6 | 	mov	arg03, local02
1679c     11 13 02 F6 | 	mov	arg01, local03
167a0     B6 19 06 F6 | 	mov	arg04, #438
167a4     00 35 B0 FD | 	call	#__system___openraw
167a8     FD 24 02 F6 | 	mov	local04, result1
167ac     00 24 56 F2 | 	cmps	local04, #0 wc
167b0     20 00 90 3D |  if_ae	jmp	#LR__2091
167b4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
167b8     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
167bc     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
167c0     EE 12 02 F6 | 	mov	arg01, abortchain
167c4     01 16 06 F6 | 	mov	arg03, #1
167c8     DA 00 A0 FD | 	call	#__longjmp
167cc     01 FA 65 F6 | 	neg	result1, #1
167d0     04 00 90 FD | 	jmp	#LR__2092
167d4                 | LR__2091
167d4     12 FB 01 F6 | 	mov	result1, local04
167d8                 | LR__2092
167d8     A7 F0 03 F6 | 	mov	ptra, fp
167dc     B2 00 A0 FD | 	call	#popregs_
167e0                 | __system___basic_open_string_ret
167e0     2D 00 64 FD | 	ret
167e4                 | 
167e4                 | __system___basic_print_char
167e4     03 4A 05 F6 | 	mov	COUNT_, #3
167e8     A8 00 A0 FD | 	call	#pushregs_
167ec     0A 1F 02 F6 | 	mov	local01, arg02
167f0     7C 47 B0 FD | 	call	#__system___gettxfunc
167f4     FD 20 0A F6 | 	mov	local02, result1 wz
167f8     00 FA 05 A6 |  if_e	mov	result1, #0
167fc     30 00 90 AD |  if_e	jmp	#LR__2100
16800     10 23 02 F6 | 	mov	local03, local02
16804     13 20 46 F7 | 	zerox	local02, #19
16808     14 22 46 F0 | 	shr	local03, #20
1680c     02 22 66 F0 | 	shl	local03, #2
16810     ED 22 02 F1 | 	add	local03, __methods__
16814     11 23 02 FB | 	rdlong	local03, local03
16818     0F 13 02 F6 | 	mov	arg01, local01
1681c     F2 1E 02 F6 | 	mov	local01, objptr
16820     10 E5 01 F6 | 	mov	objptr, local02
16824     2D 22 62 FD | 	call	local03
16828     0F E5 01 F6 | 	mov	objptr, local01
1682c     01 FA 05 F6 | 	mov	result1, #1
16830                 | LR__2100
16830     A7 F0 03 F6 | 	mov	ptra, fp
16834     B2 00 A0 FD | 	call	#popregs_
16838                 | __system___basic_print_char_ret
16838     2D 00 64 FD | 	ret
1683c                 | 
1683c                 | __system___basic_print_string
1683c     03 4A 05 F6 | 	mov	COUNT_, #3
16840     A8 00 A0 FD | 	call	#pushregs_
16844     0A 1F 02 F6 | 	mov	local01, arg02
16848     0B 21 02 F6 | 	mov	local02, arg03
1684c     20 47 B0 FD | 	call	#__system___gettxfunc
16850     FD 22 0A F6 | 	mov	local03, result1 wz
16854     00 FA 05 A6 |  if_e	mov	result1, #0
16858     18 00 90 AD |  if_e	jmp	#LR__2110
1685c     00 1E 0E F2 | 	cmp	local01, #0 wz
16860     00 FA 05 A6 |  if_e	mov	result1, #0
16864     11 13 02 56 |  if_ne	mov	arg01, local03
16868     10 15 02 56 |  if_ne	mov	arg02, local02
1686c     0F 17 02 56 |  if_ne	mov	arg03, local01
16870     9C 01 B0 5D |  if_ne	call	#__system___fmtstr
16874                 | LR__2110
16874     A7 F0 03 F6 | 	mov	ptra, fp
16878     B2 00 A0 FD | 	call	#popregs_
1687c                 | __system___basic_print_string_ret
1687c     2D 00 64 FD | 	ret
16880                 | 
16880                 | __system___basic_print_integer
16880     04 4A 05 F6 | 	mov	COUNT_, #4
16884     A8 00 A0 FD | 	call	#pushregs_
16888     0A 1F 02 F6 | 	mov	local01, arg02
1688c     0B 21 02 F6 | 	mov	local02, arg03
16890     0C 23 02 F6 | 	mov	local03, arg04
16894     D8 46 B0 FD | 	call	#__system___gettxfunc
16898     FD 24 0A F6 | 	mov	local04, result1 wz
1689c     00 FA 05 A6 |  if_e	mov	result1, #0
168a0     12 13 02 56 |  if_ne	mov	arg01, local04
168a4     10 15 02 56 |  if_ne	mov	arg02, local02
168a8     0F 17 02 56 |  if_ne	mov	arg03, local01
168ac     11 19 02 56 |  if_ne	mov	arg04, local03
168b0     48 02 B0 5D |  if_ne	call	#__system___fmtnum
168b4     A7 F0 03 F6 | 	mov	ptra, fp
168b8     B2 00 A0 FD | 	call	#popregs_
168bc                 | __system___basic_print_integer_ret
168bc     2D 00 64 FD | 	ret
168c0                 | 
168c0                 | __system___basic_print_unsigned
168c0     03 4A 05 F6 | 	mov	COUNT_, #3
168c4     A8 00 A0 FD | 	call	#pushregs_
168c8     0A 1F 02 F6 | 	mov	local01, arg02
168cc     0B 21 02 F6 | 	mov	local02, arg03
168d0     0C 23 02 F6 | 	mov	local03, arg04
168d4     98 46 B0 FD | 	call	#__system___gettxfunc
168d8     FD 12 0A F6 | 	mov	arg01, result1 wz
168dc     00 FA 05 A6 |  if_e	mov	result1, #0
168e0     3A 20 26 54 |  if_ne	bith	local02, #58
168e4     10 15 02 56 |  if_ne	mov	arg02, local02
168e8     0F 17 02 56 |  if_ne	mov	arg03, local01
168ec     11 19 02 56 |  if_ne	mov	arg04, local03
168f0     08 02 B0 5D |  if_ne	call	#__system___fmtnum
168f4     A7 F0 03 F6 | 	mov	ptra, fp
168f8     B2 00 A0 FD | 	call	#popregs_
168fc                 | __system___basic_print_unsigned_ret
168fc     2D 00 64 FD | 	ret
16900                 | 
16900                 | __system___basic_get_char
16900     03 4A 05 F6 | 	mov	COUNT_, #3
16904     A8 00 A0 FD | 	call	#pushregs_
16908     A8 46 B0 FD | 	call	#__system___getrxfunc
1690c     FD 1E 0A F6 | 	mov	local01, result1 wz
16910     01 FA 65 A6 |  if_e	neg	result1, #1
16914     28 00 90 AD |  if_e	jmp	#LR__2120
16918     0F 21 02 F6 | 	mov	local02, local01
1691c     13 1E 46 F7 | 	zerox	local01, #19
16920     14 20 46 F0 | 	shr	local02, #20
16924     02 20 66 F0 | 	shl	local02, #2
16928     ED 20 02 F1 | 	add	local02, __methods__
1692c     10 21 02 FB | 	rdlong	local02, local02
16930     F2 22 02 F6 | 	mov	local03, objptr
16934     0F E5 01 F6 | 	mov	objptr, local01
16938     2D 20 62 FD | 	call	local02
1693c     11 E5 01 F6 | 	mov	objptr, local03
16940                 | LR__2120
16940     A7 F0 03 F6 | 	mov	ptra, fp
16944     B2 00 A0 FD | 	call	#popregs_
16948                 | __system___basic_get_char_ret
16948     2D 00 64 FD | 	ret
1694c                 | 
1694c                 | __system___basic_get
1694c     04 4A 05 F6 | 	mov	COUNT_, #4
16950     A8 00 A0 FD | 	call	#pushregs_
16954     0D 1F 02 F6 | 	mov	local01, arg05
16958     0F 19 02 FD | 	qmul	arg04, local01
1695c     09 21 02 F6 | 	mov	local02, arg01
16960     0B 23 02 F6 | 	mov	local03, arg03
16964     00 14 0E F2 | 	cmp	arg02, #0 wz
16968     01 14 86 51 |  if_ne	sub	arg02, #1
1696c     10 13 02 56 |  if_ne	mov	arg01, local02
16970     00 16 06 56 |  if_ne	mov	arg03, #0
16974     18 24 62 FD | 	getqx	local04
16978     E8 3C B0 5D |  if_ne	call	#__system__lseek
1697c     11 15 02 F6 | 	mov	arg02, local03
16980     12 17 02 F6 | 	mov	arg03, local04
16984     10 13 02 F6 | 	mov	arg01, local02
16988     60 3C B0 FD | 	call	#__system__read
1698c     FD 24 02 F6 | 	mov	local04, result1
16990     01 24 56 F2 | 	cmps	local04, #1 wc
16994     10 00 90 CD |  if_b	jmp	#LR__2130
16998     12 61 02 F6 | 	mov	muldiva_, local04
1699c     0F 63 02 F6 | 	mov	muldivb_, local01
169a0     BA 00 A0 FD | 	call	#divide_
169a4     31 25 02 F6 | 	mov	local04, muldivb_
169a8                 | LR__2130
169a8     12 FB 01 F6 | 	mov	result1, local04
169ac     A7 F0 03 F6 | 	mov	ptra, fp
169b0     B2 00 A0 FD | 	call	#popregs_
169b4                 | __system___basic_get_ret
169b4     2D 00 64 FD | 	ret
169b8                 | 
169b8                 | __system___fmtchar
169b8     00 4A 05 F6 | 	mov	COUNT_, #0
169bc     A8 00 A0 FD | 	call	#pushregs_
169c0     10 F0 07 F1 | 	add	ptra, #16
169c4     04 4E 05 F1 | 	add	fp, #4
169c8     A7 12 62 FC | 	wrlong	arg01, fp
169cc     04 4E 05 F1 | 	add	fp, #4
169d0     A7 14 62 FC | 	wrlong	arg02, fp
169d4     04 4E 05 F1 | 	add	fp, #4
169d8     A7 16 62 FC | 	wrlong	arg03, fp
169dc     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
169e0     A7 16 62 FC | 	wrlong	arg03, fp
169e4     08 4E 85 F1 | 	sub	fp, #8
169e8     A7 12 02 FB | 	rdlong	arg01, fp
169ec     04 4E 05 F1 | 	add	fp, #4
169f0     A7 14 02 FB | 	rdlong	arg02, fp
169f4     04 4E 05 F1 | 	add	fp, #4
169f8     A7 16 02 F6 | 	mov	arg03, fp
169fc     0C 4E 85 F1 | 	sub	fp, #12
16a00     0C 00 B0 FD | 	call	#__system___fmtstr
16a04     A7 F0 03 F6 | 	mov	ptra, fp
16a08     B2 00 A0 FD | 	call	#popregs_
16a0c                 | __system___fmtchar_ret
16a0c     2D 00 64 FD | 	ret
16a10                 | 
16a10                 | __system___fmtstr
16a10     09 4A 05 F6 | 	mov	COUNT_, #9
16a14     A8 00 A0 FD | 	call	#pushregs_
16a18     09 1F 02 F6 | 	mov	local01, arg01
16a1c     0A 21 02 F6 | 	mov	local02, arg02
16a20     0B 23 02 F6 | 	mov	local03, arg03
16a24     10 19 E2 F8 | 	getbyte	arg04, local02, #0
16a28     11 13 02 F6 | 	mov	arg01, local03
16a2c     09 25 02 F6 | 	mov	local04, arg01
16a30     97 06 48 FB | 	callpa	#(@LR__2141-@LR__2140)>>2,fcache_load_ptr_
16a34                 | LR__2140
16a34     12 FB C9 FA | 	rdbyte	result1, local04 wz
16a38     01 24 06 51 |  if_ne	add	local04, #1
16a3c     F4 FF 9F 5D |  if_ne	jmp	#LR__2140
16a40                 | LR__2141
16a40     09 25 82 F1 | 	sub	local04, arg01
16a44     00 18 0E F2 | 	cmp	arg04, #0 wz
16a48     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
16a4c     10 15 02 F6 | 	mov	arg02, local02
16a50     12 17 02 F6 | 	mov	arg03, local04
16a54     0F 13 02 F6 | 	mov	arg01, local01
16a58     02 18 06 F6 | 	mov	arg04, #2
16a5c     B0 41 B0 FD | 	call	#__system___fmtpad
16a60     FD 26 02 F6 | 	mov	local05, result1
16a64     00 26 56 F2 | 	cmps	local05, #0 wc
16a68     13 FB 01 C6 |  if_b	mov	result1, local05
16a6c     80 00 90 CD |  if_b	jmp	#LR__2144
16a70     01 24 56 F2 | 	cmps	local04, #1 wc
16a74     50 00 90 CD |  if_b	jmp	#LR__2143
16a78     12 29 02 F6 | 	mov	local06, local04
16a7c                 | LR__2142
16a7c     0F 2B 02 F6 | 	mov	local07, local01
16a80     0F 2D 02 F6 | 	mov	local08, local01
16a84     13 2A 46 F7 | 	zerox	local07, #19
16a88     14 2C 46 F0 | 	shr	local08, #20
16a8c     02 2C 66 F0 | 	shl	local08, #2
16a90     ED 2C 02 F1 | 	add	local08, __methods__
16a94     16 2D 02 FB | 	rdlong	local08, local08
16a98     11 13 C2 FA | 	rdbyte	arg01, local03
16a9c     F2 2E 02 F6 | 	mov	local09, objptr
16aa0     15 E5 01 F6 | 	mov	objptr, local07
16aa4     01 22 06 F1 | 	add	local03, #1
16aa8     2D 2C 62 FD | 	call	local08
16aac     17 E5 01 F6 | 	mov	objptr, local09
16ab0     FD 2E 02 F6 | 	mov	local09, result1
16ab4     00 2E 56 F2 | 	cmps	local09, #0 wc
16ab8     17 FB 01 C6 |  if_b	mov	result1, local09
16abc     30 00 90 CD |  if_b	jmp	#LR__2144
16ac0     17 27 02 F1 | 	add	local05, local09
16ac4     ED 29 6E FB | 	djnz	local06, #LR__2142
16ac8                 | LR__2143
16ac8     10 15 02 F6 | 	mov	arg02, local02
16acc     12 17 02 F6 | 	mov	arg03, local04
16ad0     0F 13 02 F6 | 	mov	arg01, local01
16ad4     01 18 06 F6 | 	mov	arg04, #1
16ad8     34 41 B0 FD | 	call	#__system___fmtpad
16adc     FD 2E 02 F6 | 	mov	local09, result1
16ae0     00 2E 56 F2 | 	cmps	local09, #0 wc
16ae4     17 FB 01 C6 |  if_b	mov	result1, local09
16ae8     17 27 02 31 |  if_ae	add	local05, local09
16aec     13 FB 01 36 |  if_ae	mov	result1, local05
16af0                 | LR__2144
16af0     A7 F0 03 F6 | 	mov	ptra, fp
16af4     B2 00 A0 FD | 	call	#popregs_
16af8                 | __system___fmtstr_ret
16af8     2D 00 64 FD | 	ret
16afc                 | 
16afc                 | __system___fmtnum
16afc     0B 4A 05 F6 | 	mov	COUNT_, #11
16b00     A8 00 A0 FD | 	call	#pushregs_
16b04     09 1F 02 F6 | 	mov	local01, arg01
16b08     0A 21 02 F6 | 	mov	local02, arg02
16b0c     0B 23 02 F6 | 	mov	local03, arg03
16b10     0C 25 02 F6 | 	mov	local04, arg04
16b14     F8 27 02 F6 | 	mov	local05, ptra
16b18     13 29 02 F6 | 	mov	local06, local05
16b1c     00 2A 06 F6 | 	mov	local07, #0
16b20     10 2D 02 F6 | 	mov	local08, local02
16b24     10 2C 46 F0 | 	shr	local08, #16
16b28     3F 2C 06 F5 | 	and	local08, #63
16b2c     10 2F E2 F8 | 	getbyte	local09, local02, #0
16b30     10 31 02 F6 | 	mov	local10, local02
16b34     1A 30 46 F0 | 	shr	local10, #26
16b38     03 30 06 F5 | 	and	local10, #3
16b3c     18 33 02 F6 | 	mov	local11, local10
16b40     01 2C 56 F2 | 	cmps	local08, #1 wc
16b44     44 F0 07 F1 | 	add	ptra, #68
16b48     01 2C 86 31 |  if_ae	sub	local08, #1
16b4c     41 2E 56 F2 | 	cmps	local09, #65 wc
16b50     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
16b54     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
16b58     03 32 0E F2 | 	cmp	local11, #3 wz
16b5c     00 32 06 A6 |  if_e	mov	local11, #0
16b60     00 22 56 52 |  if_ne	cmps	local03, #0 wc
16b64     04 32 06 46 |  if_c_and_nz	mov	local11, #4
16b68     11 23 62 46 |  if_c_and_nz	neg	local03, local03
16b6c     00 32 0E F2 | 	cmp	local11, #0 wz
16b70     4C 00 90 AD |  if_e	jmp	#LR__2153
16b74     01 2A 06 F6 | 	mov	local07, #1
16b78     17 2D 0A F2 | 	cmp	local08, local09 wz
16b7c     18 00 90 5D |  if_ne	jmp	#LR__2151
16b80     05 2C 6E FB | 	djnz	local08, #LR__2150
16b84     0F 13 02 F6 | 	mov	arg01, local01
16b88     10 15 02 F6 | 	mov	arg02, local02
16b8c     23 16 06 F6 | 	mov	arg03, #35
16b90     24 FE BF FD | 	call	#__system___fmtchar
16b94     88 00 90 FD | 	jmp	#LR__2157
16b98                 | LR__2150
16b98                 | LR__2151
16b98     02 32 0E F2 | 	cmp	local11, #2 wz
16b9c     14 31 02 A6 |  if_e	mov	local10, local06
16ba0     01 28 06 A1 |  if_e	add	local06, #1
16ba4     18 41 48 AC |  if_e	wrbyte	#32, local10
16ba8     14 00 90 AD |  if_e	jmp	#LR__2152
16bac     04 32 0E F2 | 	cmp	local11, #4 wz
16bb0     14 5B 48 AC |  if_e	wrbyte	#45, local06
16bb4     01 28 06 A1 |  if_e	add	local06, #1
16bb8     14 57 48 5C |  if_ne	wrbyte	#43, local06
16bbc     01 28 06 51 |  if_ne	add	local06, #1
16bc0                 | LR__2152
16bc0                 | LR__2153
16bc0     14 13 02 F6 | 	mov	arg01, local06
16bc4     11 15 02 F6 | 	mov	arg02, local03
16bc8     12 17 02 F6 | 	mov	arg03, local04
16bcc     16 19 02 F6 | 	mov	arg04, local08
16bd0     00 1A 06 F6 | 	mov	arg05, #0
16bd4     1D 20 2E F4 | 	testbn	local02, #29 wz
16bd8     01 1A 06 56 |  if_ne	mov	arg05, #1
16bdc     F8 40 B0 FD | 	call	#__system___uitoa
16be0     FD 2A 02 F1 | 	add	local07, result1
16be4     17 2B 5A F2 | 	cmps	local07, local09 wcz
16be8     24 00 90 ED |  if_be	jmp	#LR__2156
16bec     97 0E 48 FB | 	callpa	#(@LR__2155-@LR__2154)>>2,fcache_load_ptr_
16bf0                 | LR__2154
16bf0     17 31 02 F6 | 	mov	local10, local09
16bf4     01 30 56 F2 | 	cmps	local10, #1 wc
16bf8     01 2E 86 F1 | 	sub	local09, #1
16bfc     14 31 02 36 |  if_ae	mov	local10, local06
16c00     01 28 06 31 |  if_ae	add	local06, #1
16c04     18 47 48 3C |  if_ae	wrbyte	#35, local10
16c08     E4 FF 9F 3D |  if_ae	jmp	#LR__2154
16c0c                 | LR__2155
16c0c     14 01 48 FC | 	wrbyte	#0, local06
16c10                 | LR__2156
16c10     0F 13 02 F6 | 	mov	arg01, local01
16c14     10 15 02 F6 | 	mov	arg02, local02
16c18     13 17 02 F6 | 	mov	arg03, local05
16c1c     F0 FD BF FD | 	call	#__system___fmtstr
16c20                 | LR__2157
16c20     A7 F0 03 F6 | 	mov	ptra, fp
16c24     B2 00 A0 FD | 	call	#popregs_
16c28                 | __system___fmtnum_ret
16c28     2D 00 64 FD | 	ret
16c2c                 | 
16c2c                 | __system___fmtfloat
16c2c     10 4A 05 F6 | 	mov	COUNT_, #16
16c30     A8 00 A0 FD | 	call	#pushregs_
16c34     24 F1 07 F1 | 	add	ptra, #292
16c38     04 4E 05 F1 | 	add	fp, #4
16c3c     A7 12 62 FC | 	wrlong	arg01, fp
16c40     04 4E 05 F1 | 	add	fp, #4
16c44     A7 14 62 FC | 	wrlong	arg02, fp
16c48     04 4E 05 F1 | 	add	fp, #4
16c4c     A7 16 62 FC | 	wrlong	arg03, fp
16c50     04 4E 05 F1 | 	add	fp, #4
16c54     A7 18 62 FC | 	wrlong	arg04, fp
16c58     0C 4E 05 F1 | 	add	fp, #12
16c5c     A7 14 68 FC | 	wrlong	#10, fp
16c60     08 4E 05 F1 | 	add	fp, #8
16c64     A7 00 68 FC | 	wrlong	#0, fp
16c68     08 4E 05 F1 | 	add	fp, #8
16c6c     A7 00 68 FC | 	wrlong	#0, fp
16c70     08 4E 05 F1 | 	add	fp, #8
16c74     A7 00 68 FC | 	wrlong	#0, fp
16c78     04 4E 05 F1 | 	add	fp, #4
16c7c     A7 04 68 FC | 	wrlong	#2, fp
16c80     04 4E 05 F1 | 	add	fp, #4
16c84     A7 00 68 FC | 	wrlong	#0, fp
16c88     04 4E 05 F1 | 	add	fp, #4
16c8c     A7 00 68 FC | 	wrlong	#0, fp
16c90     04 4E 05 F1 | 	add	fp, #4
16c94     A7 00 68 FC | 	wrlong	#0, fp
16c98     04 4E 05 F1 | 	add	fp, #4
16c9c     A7 00 68 FC | 	wrlong	#0, fp
16ca0     18 4E 05 F1 | 	add	fp, #24
16ca4     A7 00 68 FC | 	wrlong	#0, fp
16ca8     68 4E 05 F1 | 	add	fp, #104
16cac     A7 1E 02 F6 | 	mov	local01, fp
16cb0     08 4E 85 F1 | 	sub	fp, #8
16cb4     A7 1E 62 FC | 	wrlong	local01, fp
16cb8     04 4E 05 F1 | 	add	fp, #4
16cbc     A7 1E 62 FC | 	wrlong	local01, fp
16cc0     BC 4E 85 F1 | 	sub	fp, #188
16cc4     A7 1E 02 FB | 	rdlong	local01, fp
16cc8     10 1E 46 F0 | 	shr	local01, #16
16ccc     3F 1E 06 F5 | 	and	local01, #63
16cd0     B0 4E 05 F1 | 	add	fp, #176
16cd4     A7 1E 62 FC | 	wrlong	local01, fp
16cd8     B0 4E 85 F1 | 	sub	fp, #176
16cdc     A7 1E 02 FB | 	rdlong	local01, fp
16ce0     1C 1E 46 F0 | 	shr	local01, #28
16ce4     01 1E 06 F5 | 	and	local01, #1
16ce8     08 4F 05 F1 | 	add	fp, #264
16cec     A7 1E 62 FC | 	wrlong	local01, fp
16cf0     58 4E 85 F1 | 	sub	fp, #88
16cf4     A7 1E 0A FB | 	rdlong	local01, fp wz
16cf8     B8 4E 85 F1 | 	sub	fp, #184
16cfc     3C 00 90 5D |  if_ne	jmp	#LR__2161
16d00     10 4E 05 F1 | 	add	fp, #16
16d04     A7 1E 02 FB | 	rdlong	local01, fp
16d08     10 4E 85 F1 | 	sub	fp, #16
16d0c     61 1E 0E F2 | 	cmp	local01, #97 wz
16d10     18 00 90 5D |  if_ne	jmp	#LR__2160
16d14     B8 4E 05 F1 | 	add	fp, #184
16d18     A7 1A 68 FC | 	wrlong	#13, fp
16d1c     84 4E 85 F1 | 	sub	fp, #132
16d20     A7 02 68 FC | 	wrlong	#1, fp
16d24     34 4E 85 F1 | 	sub	fp, #52
16d28     24 00 90 FD | 	jmp	#LR__2162
16d2c                 | LR__2160
16d2c     B8 4E 05 F1 | 	add	fp, #184
16d30     A7 0C 68 FC | 	wrlong	#6, fp
16d34     B8 4E 85 F1 | 	sub	fp, #184
16d38     14 00 90 FD | 	jmp	#LR__2162
16d3c                 | LR__2161
16d3c     B8 4E 05 F1 | 	add	fp, #184
16d40     A7 1E 02 FB | 	rdlong	local01, fp
16d44     01 1E 86 F1 | 	sub	local01, #1
16d48     A7 1E 62 FC | 	wrlong	local01, fp
16d4c     B8 4E 85 F1 | 	sub	fp, #184
16d50                 | LR__2162
16d50     08 4E 05 F1 | 	add	fp, #8
16d54     A7 1E 02 FB | 	rdlong	local01, fp
16d58     16 1E 46 F0 | 	shr	local01, #22
16d5c     03 1E 06 F5 | 	and	local01, #3
16d60     04 4F 05 F1 | 	add	fp, #260
16d64     A7 1E 62 FC | 	wrlong	local01, fp
16d68     04 4F 85 F1 | 	sub	fp, #260
16d6c     A7 1E 02 FB | 	rdlong	local01, fp
16d70     1D 1E 46 F0 | 	shr	local01, #29
16d74     01 1E 06 F5 | 	and	local01, #1
16d78     B4 4E 05 F1 | 	add	fp, #180
16d7c     A7 1E 62 FC | 	wrlong	local01, fp
16d80     B4 4E 85 F1 | 	sub	fp, #180
16d84     A7 1E 02 FB | 	rdlong	local01, fp
16d88     0F 1F EA F8 | 	getbyte	local01, local01, #1
16d8c     60 4E 05 F1 | 	add	fp, #96
16d90     A7 1E 62 FC | 	wrlong	local01, fp
16d94     60 4E 85 F1 | 	sub	fp, #96
16d98     A7 1E 02 FB | 	rdlong	local01, fp
16d9c     0F 1F E2 F8 | 	getbyte	local01, local01, #0
16da0     64 4E 05 F1 | 	add	fp, #100
16da4     A7 1E 62 FC | 	wrlong	local01, fp
16da8     00 1E 06 F6 | 	mov	local01, #0
16dac     5C 4E 85 F1 | 	sub	fp, #92
16db0     A7 1A 02 FB | 	rdlong	arg05, fp
16db4     65 1A 0E F2 | 	cmp	arg05, #101 wz
16db8     01 1E 06 A6 |  if_e	mov	local01, #1
16dbc     14 4E 05 F1 | 	add	fp, #20
16dc0     A7 1E 62 FC | 	wrlong	local01, fp
16dc4     98 4E 05 F1 | 	add	fp, #152
16dc8     A7 20 0A FB | 	rdlong	local02, fp wz
16dcc     45 1E 06 56 |  if_ne	mov	local01, #69
16dd0     65 1E 06 A6 |  if_e	mov	local01, #101
16dd4     8C 4E 85 F1 | 	sub	fp, #140
16dd8     A7 1E 62 FC | 	wrlong	local01, fp
16ddc     20 4E 85 F1 | 	sub	fp, #32
16de0     A7 1E 02 FB | 	rdlong	local01, fp
16de4     10 4E 85 F1 | 	sub	fp, #16
16de8     61 1E 0E F2 | 	cmp	local01, #97 wz
16dec     4C 00 90 5D |  if_ne	jmp	#LR__2163
16df0     24 4E 05 F1 | 	add	fp, #36
16df4     A7 02 68 FC | 	wrlong	#1, fp
16df8     98 4E 05 F1 | 	add	fp, #152
16dfc     A7 20 0A FB | 	rdlong	local02, fp wz
16e00     50 1E 06 56 |  if_ne	mov	local01, #80
16e04     70 1E 06 A6 |  if_e	mov	local01, #112
16e08     8C 4E 85 F1 | 	sub	fp, #140
16e0c     A7 1E 62 FC | 	wrlong	local01, fp
16e10     14 4E 85 F1 | 	sub	fp, #20
16e14     A7 04 68 FC | 	wrlong	#2, fp
16e18     1C 4E 05 F1 | 	add	fp, #28
16e1c     A7 02 68 FC | 	wrlong	#1, fp
16e20     84 4E 05 F1 | 	add	fp, #132
16e24     A7 20 0A FB | 	rdlong	local02, fp wz
16e28     58 1E 06 56 |  if_ne	mov	local01, #88
16e2c     78 1E 06 A6 |  if_e	mov	local01, #120
16e30     7C 4E 85 F1 | 	sub	fp, #124
16e34     A7 1E 62 FC | 	wrlong	local01, fp
16e38     40 4E 85 F1 | 	sub	fp, #64
16e3c                 | LR__2163
16e3c     10 4E 05 F1 | 	add	fp, #16
16e40     A7 1E 02 FB | 	rdlong	local01, fp
16e44     10 4E 85 F1 | 	sub	fp, #16
16e48     23 1E 0E F2 | 	cmp	local01, #35 wz
16e4c     3C 00 90 5D |  if_ne	jmp	#LR__2166
16e50     48 4E 05 F1 | 	add	fp, #72
16e54     A7 02 68 FC | 	wrlong	#1, fp
16e58     C8 4E 05 F1 | 	add	fp, #200
16e5c     A7 1E 0A FB | 	rdlong	local01, fp wz
16e60     10 4F 85 F1 | 	sub	fp, #272
16e64     18 00 90 AD |  if_e	jmp	#LR__2164
16e68     10 4E 05 F1 | 	add	fp, #16
16e6c     A7 CC 68 FC | 	wrlong	#102, fp
16e70     00 4F 05 F1 | 	add	fp, #256
16e74     A7 00 68 FC | 	wrlong	#0, fp
16e78     10 4F 85 F1 | 	sub	fp, #272
16e7c     0C 00 90 FD | 	jmp	#LR__2165
16e80                 | LR__2164
16e80     10 4F 05 F1 | 	add	fp, #272
16e84     A7 02 68 FC | 	wrlong	#1, fp
16e88     10 4F 85 F1 | 	sub	fp, #272
16e8c                 | LR__2165
16e8c                 | LR__2166
16e8c     08 4E 05 F1 | 	add	fp, #8
16e90     A7 1E 02 FB | 	rdlong	local01, fp
16e94     1A 1E 46 F0 | 	shr	local01, #26
16e98     03 1E 06 F5 | 	and	local01, #3
16e9c     5C 4E 05 F1 | 	add	fp, #92
16ea0     A7 1E 62 FC | 	wrlong	local01, fp
16ea4     58 4E 85 F1 | 	sub	fp, #88
16ea8     A7 FA 01 FB | 	rdlong	result1, fp
16eac     0C 4E 85 F1 | 	sub	fp, #12
16eb0     1F FA 4D F0 | 	shr	result1, #31 wz
16eb4     20 00 90 AD |  if_e	jmp	#LR__2167
16eb8     2C 4E 05 F1 | 	add	fp, #44
16ebc     A7 5A 68 FC | 	wrlong	#45, fp
16ec0     20 4E 85 F1 | 	sub	fp, #32
16ec4     A7 FA 01 FB | 	rdlong	result1, fp
16ec8     1F FA E5 F4 | 	bitnot	result1, #31
16ecc     A7 FA 61 FC | 	wrlong	result1, fp
16ed0     0C 4E 85 F1 | 	sub	fp, #12
16ed4     3C 00 90 FD | 	jmp	#LR__2169
16ed8                 | LR__2167
16ed8     64 4E 05 F1 | 	add	fp, #100
16edc     A7 1E 02 FB | 	rdlong	local01, fp
16ee0     64 4E 85 F1 | 	sub	fp, #100
16ee4     01 1E 0E F2 | 	cmp	local01, #1 wz
16ee8     2C 4E 05 A1 |  if_e	add	fp, #44
16eec     A7 56 68 AC |  if_e	wrlong	#43, fp
16ef0     2C 4E 85 A1 |  if_e	sub	fp, #44
16ef4     1C 00 90 AD |  if_e	jmp	#LR__2168
16ef8     64 4E 05 F1 | 	add	fp, #100
16efc     A7 1E 02 FB | 	rdlong	local01, fp
16f00     64 4E 85 F1 | 	sub	fp, #100
16f04     02 1E 0E F2 | 	cmp	local01, #2 wz
16f08     2C 4E 05 A1 |  if_e	add	fp, #44
16f0c     A7 40 68 AC |  if_e	wrlong	#32, fp
16f10     2C 4E 85 A1 |  if_e	sub	fp, #44
16f14                 | LR__2168
16f14                 | LR__2169
16f14     08 4E 05 F1 | 	add	fp, #8
16f18     A7 1E 02 FB | 	rdlong	local01, fp
16f1c     18 1E 46 F0 | 	shr	local01, #24
16f20     03 1E 06 F5 | 	and	local01, #3
16f24     3C 4E 05 F1 | 	add	fp, #60
16f28     A7 1E 62 FC | 	wrlong	local01, fp
16f2c     00 1E 06 F6 | 	mov	local01, #0
16f30     18 4E 85 F1 | 	sub	fp, #24
16f34     A7 22 0A FB | 	rdlong	local03, fp wz
16f38     2C 4E 85 F1 | 	sub	fp, #44
16f3c     18 00 90 5D |  if_ne	jmp	#LR__2170
16f40     1C 4E 05 F1 | 	add	fp, #28
16f44     A7 24 02 FB | 	rdlong	local04, fp
16f48     1C 4E 85 F1 | 	sub	fp, #28
16f4c     12 27 02 F6 | 	mov	local05, local04
16f50     0A 26 0E F2 | 	cmp	local05, #10 wz
16f54     04 00 90 AD |  if_e	jmp	#LR__2171
16f58                 | LR__2170
16f58     01 1E 66 F5 | 	xor	local01, #1
16f5c                 | LR__2171
16f5c     3C 4E 05 F1 | 	add	fp, #60
16f60     A7 1E 62 FC | 	wrlong	local01, fp
16f64     3C 4E 85 F1 | 	sub	fp, #60
16f68     00 1E 0E F2 | 	cmp	local01, #0 wz
16f6c     0C 01 90 AD |  if_e	jmp	#LR__2173
16f70     44 4E 05 F1 | 	add	fp, #68
16f74     A7 26 02 FB | 	rdlong	local05, fp
16f78     44 4E 85 F1 | 	sub	fp, #68
16f7c     13 23 02 F6 | 	mov	local03, local05
16f80     02 22 0E F2 | 	cmp	local03, #2 wz
16f84     F4 00 90 5D |  if_ne	jmp	#LR__2173
16f88     0C 4F 05 F1 | 	add	fp, #268
16f8c     A7 28 02 FB | 	rdlong	local06, fp
16f90     0C 4F 85 F1 | 	sub	fp, #268
16f94     14 25 02 F6 | 	mov	local04, local06
16f98     02 24 0E F2 | 	cmp	local04, #2 wz
16f9c     DC 00 90 AD |  if_e	jmp	#LR__2173
16fa0     C0 4E 05 F1 | 	add	fp, #192
16fa4     A7 12 02 FB | 	rdlong	arg01, fp
16fa8     94 4E 85 F1 | 	sub	fp, #148
16fac     A7 14 02 FB | 	rdlong	arg02, fp
16fb0     14 4E 05 F1 | 	add	fp, #20
16fb4     A7 16 02 FB | 	rdlong	arg03, fp
16fb8     40 4E 85 F1 | 	sub	fp, #64
16fbc     80 3F B0 FD | 	call	#__system__emitsign_0332
16fc0     14 4F 05 F1 | 	add	fp, #276
16fc4     A7 FA 61 FC | 	wrlong	result1, fp
16fc8     14 4F 85 F1 | 	sub	fp, #276
16fcc     00 FA 55 F2 | 	cmps	result1, #0 wc
16fd0     14 4F 05 C1 |  if_b	add	fp, #276
16fd4     A7 FA 01 CB |  if_b	rdlong	result1, fp
16fd8     14 4F 85 C1 |  if_b	sub	fp, #276
16fdc     6C 0B 90 CD |  if_b	jmp	#LR__2223
16fe0     C0 4E 05 F1 | 	add	fp, #192
16fe4     A7 1E 02 FB | 	rdlong	local01, fp
16fe8     54 4E 05 F1 | 	add	fp, #84
16fec     A7 26 02 FB | 	rdlong	local05, fp
16ff0     13 23 02 F6 | 	mov	local03, local05
16ff4     13 1F 02 F1 | 	add	local01, local05
16ff8     54 4E 85 F1 | 	sub	fp, #84
16ffc     A7 1E 62 FC | 	wrlong	local01, fp
17000     58 4E 85 F1 | 	sub	fp, #88
17004     A7 1E 0A FB | 	rdlong	local01, fp wz
17008     68 4E 85 F1 | 	sub	fp, #104
1700c     60 00 90 AD |  if_e	jmp	#LR__2172
17010     68 4E 05 F1 | 	add	fp, #104
17014     A7 1E 02 FB | 	rdlong	local01, fp
17018     AC 4E 05 F1 | 	add	fp, #172
1701c     A7 22 02 FB | 	rdlong	local03, fp
17020     11 1F 82 F1 | 	sub	local01, local03
17024     AC 4E 85 F1 | 	sub	fp, #172
17028     A7 1E 62 FC | 	wrlong	local01, fp
1702c     68 4E 85 F1 | 	sub	fp, #104
17030     00 1E 56 F2 | 	cmps	local01, #0 wc
17034     68 4E 05 C1 |  if_b	add	fp, #104
17038     A7 00 68 CC |  if_b	wrlong	#0, fp
1703c     68 4E 85 C1 |  if_b	sub	fp, #104
17040     08 4E 05 F1 | 	add	fp, #8
17044     A7 1E 02 FB | 	rdlong	local01, fp
17048     E8 1E 06 F4 | 	bitl	local01, #232
1704c     A7 1E 62 FC | 	wrlong	local01, fp
17050     60 4E 05 F1 | 	add	fp, #96
17054     A7 26 02 FB | 	rdlong	local05, fp
17058     13 23 02 F6 | 	mov	local03, local05
1705c     08 22 66 F0 | 	shl	local03, #8
17060     11 1F 42 F5 | 	or	local01, local03
17064     60 4E 85 F1 | 	sub	fp, #96
17068     A7 1E 62 FC | 	wrlong	local01, fp
1706c     08 4E 85 F1 | 	sub	fp, #8
17070                 | LR__2172
17070     3C 4E 05 F1 | 	add	fp, #60
17074     A7 00 68 FC | 	wrlong	#0, fp
17078     3C 4E 85 F1 | 	sub	fp, #60
1707c                 | LR__2173
1707c     0C 4E 05 F1 | 	add	fp, #12
17080     A7 12 02 FB | 	rdlong	arg01, fp
17084     0C 4E 85 F1 | 	sub	fp, #12
17088     CC 1C B0 FD | 	call	#__system____builtin_ilogb
1708c     FF FF 3F FF 
17090     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
17094     50 00 90 5D |  if_ne	jmp	#LR__2175
17098     2C 4E 05 F1 | 	add	fp, #44
1709c     A7 1E 0A FB | 	rdlong	local01, fp wz
170a0     2C 4E 85 F1 | 	sub	fp, #44
170a4     24 00 90 AD |  if_e	jmp	#LR__2174
170a8     C0 4E 05 F1 | 	add	fp, #192
170ac     A7 20 02 FB | 	rdlong	local02, fp
170b0     10 23 02 F6 | 	mov	local03, local02
170b4     01 22 06 F1 | 	add	local03, #1
170b8     A7 22 62 FC | 	wrlong	local03, fp
170bc     94 4E 85 F1 | 	sub	fp, #148
170c0     A7 24 02 FB | 	rdlong	local04, fp
170c4     2C 4E 85 F1 | 	sub	fp, #44
170c8     10 25 42 FC | 	wrbyte	local04, local02
170cc                 | LR__2174
170cc     C0 4E 05 F1 | 	add	fp, #192
170d0     A7 12 02 FB | 	rdlong	arg01, fp
170d4     C0 4E 85 F1 | 	sub	fp, #192
170d8     25 01 00 FF 
170dc     2A 15 06 F6 | 	mov	arg02, ##@LR__4061
170e0     18 EA BF FD | 	call	#__system____builtin_strcpy
170e4     A4 08 90 FD | 	jmp	#LR__2211
170e8                 | LR__2175
170e8     0C 4E 05 F1 | 	add	fp, #12
170ec     A7 20 02 FB | 	rdlong	local02, fp
170f0     0C 4E 85 F1 | 	sub	fp, #12
170f4     10 13 02 F6 | 	mov	arg01, local02
170f8     5C 1C B0 FD | 	call	#__system____builtin_ilogb
170fc     00 00 40 FF 
17100     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
17104     50 00 90 5D |  if_ne	jmp	#LR__2177
17108     2C 4E 05 F1 | 	add	fp, #44
1710c     A7 1E 0A FB | 	rdlong	local01, fp wz
17110     2C 4E 85 F1 | 	sub	fp, #44
17114     24 00 90 AD |  if_e	jmp	#LR__2176
17118     C0 4E 05 F1 | 	add	fp, #192
1711c     A7 20 02 FB | 	rdlong	local02, fp
17120     10 23 02 F6 | 	mov	local03, local02
17124     01 22 06 F1 | 	add	local03, #1
17128     A7 22 62 FC | 	wrlong	local03, fp
1712c     94 4E 85 F1 | 	sub	fp, #148
17130     A7 24 02 FB | 	rdlong	local04, fp
17134     2C 4E 85 F1 | 	sub	fp, #44
17138     10 25 42 FC | 	wrbyte	local04, local02
1713c                 | LR__2176
1713c     C0 4E 05 F1 | 	add	fp, #192
17140     A7 12 02 FB | 	rdlong	arg01, fp
17144     C0 4E 85 F1 | 	sub	fp, #192
17148     25 01 00 FF 
1714c     2E 15 06 F6 | 	mov	arg02, ##@LR__4062
17150     A8 E9 BF FD | 	call	#__system____builtin_strcpy
17154     34 08 90 FD | 	jmp	#LR__2211
17158                 | LR__2177
17158     10 4E 05 F1 | 	add	fp, #16
1715c     A7 1E 02 FB | 	rdlong	local01, fp
17160     10 4E 85 F1 | 	sub	fp, #16
17164     67 1E 0E F2 | 	cmp	local01, #103 wz
17168     10 4E 05 51 |  if_ne	add	fp, #16
1716c     A7 22 02 5B |  if_ne	rdlong	local03, fp
17170     10 4E 85 51 |  if_ne	sub	fp, #16
17174     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
17178     94 01 90 5D |  if_ne	jmp	#LR__2182
1717c     0C 4E 05 F1 | 	add	fp, #12
17180     A7 12 02 FB | 	rdlong	arg01, fp
17184     08 4E 05 F1 | 	add	fp, #8
17188     A7 14 02 F6 | 	mov	arg02, fp
1718c     0C 4E 05 F1 | 	add	fp, #12
17190     A7 16 02 F6 | 	mov	arg03, fp
17194     98 4E 05 F1 | 	add	fp, #152
17198     A7 18 02 FB | 	rdlong	arg04, fp
1719c     9C 4E 85 F1 | 	sub	fp, #156
171a0     A7 1A 02 FB | 	rdlong	arg05, fp
171a4     1C 4E 85 F1 | 	sub	fp, #28
171a8     A0 3B B0 FD | 	call	#__system__disassemble_0330
171ac     10 4E 05 F1 | 	add	fp, #16
171b0     A7 1E 02 FB | 	rdlong	local01, fp
171b4     10 4E 85 F1 | 	sub	fp, #16
171b8     23 1E 0E F2 | 	cmp	local01, #35 wz
171bc     A0 00 90 5D |  if_ne	jmp	#LR__2179
171c0     20 4E 05 F1 | 	add	fp, #32
171c4     A7 1E 02 FB | 	rdlong	local01, fp
171c8     98 4E 05 F1 | 	add	fp, #152
171cc     A7 22 02 FB | 	rdlong	local03, fp
171d0     B8 4E 85 F1 | 	sub	fp, #184
171d4     11 1F 5A F2 | 	cmps	local01, local03 wcz
171d8     24 4E 05 11 |  if_a	add	fp, #36
171dc     A7 02 68 1C |  if_a	wrlong	#1, fp
171e0     24 4E 85 11 |  if_a	sub	fp, #36
171e4     A4 01 90 1D |  if_a	jmp	#LR__2185
171e8     20 4E 05 F1 | 	add	fp, #32
171ec     A7 1E 02 FB | 	rdlong	local01, fp
171f0     20 4E 85 F1 | 	sub	fp, #32
171f4     00 1E 56 F2 | 	cmps	local01, #0 wc
171f8     2C 00 90 3D |  if_ae	jmp	#LR__2178
171fc     B8 4E 05 F1 | 	add	fp, #184
17200     A7 1E 02 FB | 	rdlong	local01, fp
17204     0F 1F 62 F6 | 	neg	local01, local01
17208     98 4E 85 F1 | 	sub	fp, #152
1720c     A7 22 02 FB | 	rdlong	local03, fp
17210     20 4E 85 F1 | 	sub	fp, #32
17214     0F 23 5A F2 | 	cmps	local03, local01 wcz
17218     24 4E 05 E1 |  if_be	add	fp, #36
1721c     A7 02 68 EC |  if_be	wrlong	#1, fp
17220     24 4E 85 E1 |  if_be	sub	fp, #36
17224     64 01 90 FD | 	jmp	#LR__2185
17228                 | LR__2178
17228     20 4E 05 F1 | 	add	fp, #32
1722c     A7 1E 02 FB | 	rdlong	local01, fp
17230     20 4E 85 F1 | 	sub	fp, #32
17234     01 1E 56 F2 | 	cmps	local01, #1 wc
17238     50 01 90 CD |  if_b	jmp	#LR__2185
1723c     B8 4E 05 F1 | 	add	fp, #184
17240     A7 1E 02 FB | 	rdlong	local01, fp
17244     98 4E 85 F1 | 	sub	fp, #152
17248     A7 22 02 FB | 	rdlong	local03, fp
1724c     11 1F 82 F1 | 	sub	local01, local03
17250     98 4E 05 F1 | 	add	fp, #152
17254     A7 1E 62 FC | 	wrlong	local01, fp
17258     B8 4E 85 F1 | 	sub	fp, #184
1725c     2C 01 90 FD | 	jmp	#LR__2185
17260                 | LR__2179
17260     00 1E 06 F6 | 	mov	local01, #0
17264     08 4E 05 F1 | 	add	fp, #8
17268     A7 20 02 FB | 	rdlong	local02, fp
1726c     1C 20 46 F0 | 	shr	local02, #28
17270     01 20 0E F5 | 	and	local02, #1 wz
17274     01 1E 06 A6 |  if_e	mov	local01, #1
17278     2C 4E 05 F1 | 	add	fp, #44
1727c     A7 1E 62 FC | 	wrlong	local01, fp
17280     14 4E 85 F1 | 	sub	fp, #20
17284     A7 1E 02 FB | 	rdlong	local01, fp
17288     98 4E 05 F1 | 	add	fp, #152
1728c     A7 22 02 FB | 	rdlong	local03, fp
17290     B8 4E 85 F1 | 	sub	fp, #184
17294     11 1F 52 F2 | 	cmps	local01, local03 wc
17298     18 00 90 3D |  if_ae	jmp	#LR__2180
1729c     20 4E 05 F1 | 	add	fp, #32
172a0     A7 24 02 FB | 	rdlong	local04, fp
172a4     20 4E 85 F1 | 	sub	fp, #32
172a8     FF FF 7F FF 
172ac     FC 25 56 F2 | 	cmps	local04, ##-4 wc
172b0     10 00 90 3D |  if_ae	jmp	#LR__2181
172b4                 | LR__2180
172b4     24 4E 05 F1 | 	add	fp, #36
172b8     A7 02 68 FC | 	wrlong	#1, fp
172bc     24 4E 85 F1 | 	sub	fp, #36
172c0     C8 00 90 FD | 	jmp	#LR__2185
172c4                 | LR__2181
172c4     B8 4E 05 F1 | 	add	fp, #184
172c8     A7 24 02 FB | 	rdlong	local04, fp
172cc     98 4E 85 F1 | 	sub	fp, #152
172d0     A7 22 02 FB | 	rdlong	local03, fp
172d4     11 25 82 F1 | 	sub	local04, local03
172d8     98 4E 05 F1 | 	add	fp, #152
172dc     A7 24 62 FC | 	wrlong	local04, fp
172e0     AC 4E 85 F1 | 	sub	fp, #172
172e4     A7 12 02 FB | 	rdlong	arg01, fp
172e8     08 4E 05 F1 | 	add	fp, #8
172ec     A7 14 02 F6 | 	mov	arg02, fp
172f0     0C 4E 05 F1 | 	add	fp, #12
172f4     A7 16 02 F6 | 	mov	arg03, fp
172f8     12 19 62 F6 | 	neg	arg04, local04
172fc     04 4E 85 F1 | 	sub	fp, #4
17300     A7 1A 02 FB | 	rdlong	arg05, fp
17304     1C 4E 85 F1 | 	sub	fp, #28
17308     40 3A B0 FD | 	call	#__system__disassemble_0330
1730c     7C 00 90 FD | 	jmp	#LR__2185
17310                 | LR__2182
17310     24 4E 05 F1 | 	add	fp, #36
17314     A7 1E 0A FB | 	rdlong	local01, fp wz
17318     24 4E 85 F1 | 	sub	fp, #36
1731c     34 00 90 AD |  if_e	jmp	#LR__2183
17320     0C 4E 05 F1 | 	add	fp, #12
17324     A7 12 02 FB | 	rdlong	arg01, fp
17328     08 4E 05 F1 | 	add	fp, #8
1732c     A7 14 02 F6 | 	mov	arg02, fp
17330     0C 4E 05 F1 | 	add	fp, #12
17334     A7 16 02 F6 | 	mov	arg03, fp
17338     98 4E 05 F1 | 	add	fp, #152
1733c     A7 18 02 FB | 	rdlong	arg04, fp
17340     9C 4E 85 F1 | 	sub	fp, #156
17344     A7 1A 02 FB | 	rdlong	arg05, fp
17348     1C 4E 85 F1 | 	sub	fp, #28
1734c     FC 39 B0 FD | 	call	#__system__disassemble_0330
17350     38 00 90 FD | 	jmp	#LR__2184
17354                 | LR__2183
17354     0C 4E 05 F1 | 	add	fp, #12
17358     A7 12 02 FB | 	rdlong	arg01, fp
1735c     08 4E 05 F1 | 	add	fp, #8
17360     A7 14 02 F6 | 	mov	arg02, fp
17364     0C 4E 05 F1 | 	add	fp, #12
17368     A7 16 02 F6 | 	mov	arg03, fp
1736c     98 4E 05 F1 | 	add	fp, #152
17370     A7 24 02 FB | 	rdlong	local04, fp
17374     01 24 06 F1 | 	add	local04, #1
17378     12 19 62 F6 | 	neg	arg04, local04
1737c     9C 4E 85 F1 | 	sub	fp, #156
17380     A7 1A 02 FB | 	rdlong	arg05, fp
17384     1C 4E 85 F1 | 	sub	fp, #28
17388     C0 39 B0 FD | 	call	#__system__disassemble_0330
1738c                 | LR__2184
1738c                 | LR__2185
1738c     1C 4E 05 F1 | 	add	fp, #28
17390     A7 1E 02 FB | 	rdlong	local01, fp
17394     1C 4E 85 F1 | 	sub	fp, #28
17398     02 1E 0E F2 | 	cmp	local01, #2 wz
1739c     4C 00 90 5D |  if_ne	jmp	#LR__2188
173a0     1C 4E 05 F1 | 	add	fp, #28
173a4     A7 20 68 FC | 	wrlong	#16, fp
173a8     1C 4E 85 F1 | 	sub	fp, #28
173ac                 | LR__2186
173ac     14 4E 05 F1 | 	add	fp, #20
173b0     A7 1E 0A FB | 	rdlong	local01, fp wz
173b4     14 4E 85 F1 | 	sub	fp, #20
173b8     30 00 90 AD |  if_e	jmp	#LR__2187
173bc     14 4E 05 F1 | 	add	fp, #20
173c0     A7 22 02 FB | 	rdlong	local03, fp
173c4     14 4E 85 F1 | 	sub	fp, #20
173c8     00 80 00 FF 
173cc     00 22 16 F2 | 	cmp	local03, ##16777216 wc
173d0     18 00 90 3D |  if_ae	jmp	#LR__2187
173d4     14 4E 05 F1 | 	add	fp, #20
173d8     A7 1E 02 FB | 	rdlong	local01, fp
173dc     01 1E 66 F0 | 	shl	local01, #1
173e0     A7 1E 62 FC | 	wrlong	local01, fp
173e4     14 4E 85 F1 | 	sub	fp, #20
173e8     C0 FF 9F FD | 	jmp	#LR__2186
173ec                 | LR__2187
173ec                 | LR__2188
173ec     70 4E 05 F1 | 	add	fp, #112
173f0     A7 12 02 F6 | 	mov	arg01, fp
173f4     5C 4E 85 F1 | 	sub	fp, #92
173f8     A7 14 02 FB | 	rdlong	arg02, fp
173fc     08 4E 05 F1 | 	add	fp, #8
17400     A7 16 02 FB | 	rdlong	arg03, fp
17404     A0 4E 05 F1 | 	add	fp, #160
17408     A7 1A 02 FB | 	rdlong	arg05, fp
1740c     BC 4E 85 F1 | 	sub	fp, #188
17410     01 18 06 F6 | 	mov	arg04, #1
17414     C0 38 B0 FD | 	call	#__system___uitoa
17418     58 4E 05 F1 | 	add	fp, #88
1741c     A7 FA 61 FC | 	wrlong	result1, fp
17420     38 4E 85 F1 | 	sub	fp, #56
17424     A7 1E 02 FB | 	rdlong	local01, fp
17428     20 4E 85 F1 | 	sub	fp, #32
1742c     00 1E 56 F2 | 	cmps	local01, #0 wc
17430     50 00 90 3D |  if_ae	jmp	#LR__2189
17434     60 4E 05 F1 | 	add	fp, #96
17438     A7 5A 68 FC | 	wrlong	#45, fp
1743c     50 4E 05 F1 | 	add	fp, #80
17440     A7 12 02 F6 | 	mov	arg01, fp
17444     90 4E 85 F1 | 	sub	fp, #144
17448     A7 22 02 FB | 	rdlong	local03, fp
1744c     11 15 62 F6 | 	neg	arg02, local03
17450     18 4E 05 F1 | 	add	fp, #24
17454     A7 18 02 FB | 	rdlong	arg04, fp
17458     84 4E 05 F1 | 	add	fp, #132
1745c     A7 28 02 FB | 	rdlong	local06, fp
17460     BC 4E 85 F1 | 	sub	fp, #188
17464     14 25 02 F6 | 	mov	local04, local06
17468     0A 16 06 F6 | 	mov	arg03, #10
1746c     12 1B 02 F6 | 	mov	arg05, local04
17470     64 38 B0 FD | 	call	#__system___uitoa
17474     5C 4E 05 F1 | 	add	fp, #92
17478     A7 FA 61 FC | 	wrlong	result1, fp
1747c     5C 4E 85 F1 | 	sub	fp, #92
17480     48 00 90 FD | 	jmp	#LR__2190
17484                 | LR__2189
17484     60 4E 05 F1 | 	add	fp, #96
17488     A7 56 68 FC | 	wrlong	#43, fp
1748c     50 4E 05 F1 | 	add	fp, #80
17490     A7 12 02 F6 | 	mov	arg01, fp
17494     90 4E 85 F1 | 	sub	fp, #144
17498     A7 14 02 FB | 	rdlong	arg02, fp
1749c     18 4E 05 F1 | 	add	fp, #24
174a0     A7 18 02 FB | 	rdlong	arg04, fp
174a4     84 4E 05 F1 | 	add	fp, #132
174a8     A7 28 02 FB | 	rdlong	local06, fp
174ac     BC 4E 85 F1 | 	sub	fp, #188
174b0     14 25 02 F6 | 	mov	local04, local06
174b4     0A 16 06 F6 | 	mov	arg03, #10
174b8     12 1B 02 F6 | 	mov	arg05, local04
174bc     18 38 B0 FD | 	call	#__system___uitoa
174c0     5C 4E 05 F1 | 	add	fp, #92
174c4     A7 FA 61 FC | 	wrlong	result1, fp
174c8     5C 4E 85 F1 | 	sub	fp, #92
174cc                 | LR__2190
174cc     24 4E 05 F1 | 	add	fp, #36
174d0     A7 1E 0A FB | 	rdlong	local01, fp wz
174d4     24 4E 85 F1 | 	sub	fp, #36
174d8     2C 00 90 AD |  if_e	jmp	#LR__2191
174dc     50 4E 05 F1 | 	add	fp, #80
174e0     A7 00 68 FC | 	wrlong	#0, fp
174e4     04 4E 85 F1 | 	sub	fp, #4
174e8     A7 00 68 FC | 	wrlong	#0, fp
174ec     6C 4E 05 F1 | 	add	fp, #108
174f0     A7 1E 02 FB | 	rdlong	local01, fp
174f4     01 1E 06 F1 | 	add	local01, #1
174f8     64 4E 85 F1 | 	sub	fp, #100
174fc     A7 1E 62 FC | 	wrlong	local01, fp
17500     54 4E 85 F1 | 	sub	fp, #84
17504     88 00 90 FD | 	jmp	#LR__2194
17508                 | LR__2191
17508     20 4E 05 F1 | 	add	fp, #32
1750c     A7 1E 02 FB | 	rdlong	local01, fp
17510     20 4E 85 F1 | 	sub	fp, #32
17514     00 1E 56 F2 | 	cmps	local01, #0 wc
17518     40 00 90 3D |  if_ae	jmp	#LR__2192
1751c     20 4E 05 F1 | 	add	fp, #32
17520     A7 20 02 FB | 	rdlong	local02, fp
17524     30 4E 05 F1 | 	add	fp, #48
17528     A7 20 62 FC | 	wrlong	local02, fp
1752c     04 4E 85 F1 | 	sub	fp, #4
17530     A7 20 62 FC | 	wrlong	local02, fp
17534     2C 4E 85 F1 | 	sub	fp, #44
17538     A7 1E 02 FB | 	rdlong	local01, fp
1753c     98 4E 05 F1 | 	add	fp, #152
17540     A7 22 02 FB | 	rdlong	local03, fp
17544     11 1F 02 F1 | 	add	local01, local03
17548     01 1E 06 F1 | 	add	local01, #1
1754c     64 4E 85 F1 | 	sub	fp, #100
17550     A7 1E 62 FC | 	wrlong	local01, fp
17554     54 4E 85 F1 | 	sub	fp, #84
17558     34 00 90 FD | 	jmp	#LR__2193
1755c                 | LR__2192
1755c     4C 4E 05 F1 | 	add	fp, #76
17560     A7 00 68 FC | 	wrlong	#0, fp
17564     2C 4E 85 F1 | 	sub	fp, #44
17568     A7 1E 02 FB | 	rdlong	local01, fp
1756c     30 4E 05 F1 | 	add	fp, #48
17570     A7 1E 62 FC | 	wrlong	local01, fp
17574     68 4E 05 F1 | 	add	fp, #104
17578     A7 22 02 FB | 	rdlong	local03, fp
1757c     11 1F 02 F1 | 	add	local01, local03
17580     01 1E 06 F1 | 	add	local01, #1
17584     64 4E 85 F1 | 	sub	fp, #100
17588     A7 1E 62 FC | 	wrlong	local01, fp
1758c     54 4E 85 F1 | 	sub	fp, #84
17590                 | LR__2193
17590                 | LR__2194
17590     54 4E 05 F1 | 	add	fp, #84
17594     A7 1E 02 FB | 	rdlong	local01, fp
17598     08 4E 85 F1 | 	sub	fp, #8
1759c     A7 22 02 FB | 	rdlong	local03, fp
175a0     11 1F 82 F1 | 	sub	local01, local03
175a4     01 1E 06 F1 | 	add	local01, #1
175a8     24 4E 85 F1 | 	sub	fp, #36
175ac     A7 1E 62 FC | 	wrlong	local01, fp
175b0     04 4E 05 F1 | 	add	fp, #4
175b4     A7 1E 0A FB | 	rdlong	local01, fp wz
175b8     2C 4E 85 F1 | 	sub	fp, #44
175bc     28 4E 05 51 |  if_ne	add	fp, #40
175c0     A7 22 02 5B |  if_ne	rdlong	local03, fp
175c4     01 22 06 51 |  if_ne	add	local03, #1
175c8     A7 22 62 5C |  if_ne	wrlong	local03, fp
175cc     28 4E 85 51 |  if_ne	sub	fp, #40
175d0     1C 4E 05 F1 | 	add	fp, #28
175d4     A7 1E 02 FB | 	rdlong	local01, fp
175d8     1C 4E 85 F1 | 	sub	fp, #28
175dc     10 1E 0E F2 | 	cmp	local01, #16 wz
175e0     28 4E 05 A1 |  if_e	add	fp, #40
175e4     A7 1E 02 AB |  if_e	rdlong	local01, fp
175e8     02 1E 06 A1 |  if_e	add	local01, #2
175ec     A7 1E 62 AC |  if_e	wrlong	local01, fp
175f0     28 4E 85 A1 |  if_e	sub	fp, #40
175f4     24 4E 05 F1 | 	add	fp, #36
175f8     A7 1E 0A FB | 	rdlong	local01, fp wz
175fc     24 4E 85 F1 | 	sub	fp, #36
17600     28 00 90 AD |  if_e	jmp	#LR__2195
17604     28 4E 05 F1 | 	add	fp, #40
17608     A7 1E 02 FB | 	rdlong	local01, fp
1760c     02 22 06 F6 | 	mov	local03, #2
17610     34 4E 05 F1 | 	add	fp, #52
17614     A7 26 02 FB | 	rdlong	local05, fp
17618     13 23 02 F1 | 	add	local03, local05
1761c     11 1F 02 F1 | 	add	local01, local03
17620     34 4E 85 F1 | 	sub	fp, #52
17624     A7 1E 62 FC | 	wrlong	local01, fp
17628     28 4E 85 F1 | 	sub	fp, #40
1762c                 | LR__2195
1762c     28 4E 05 F1 | 	add	fp, #40
17630     A7 1E 02 FB | 	rdlong	local01, fp
17634     28 4E 85 F1 | 	sub	fp, #40
17638     41 1E 56 F2 | 	cmps	local01, #65 wc
1763c     01 FA 65 36 |  if_ae	neg	result1, #1
17640     08 05 90 3D |  if_ae	jmp	#LR__2223
17644     3C 4E 05 F1 | 	add	fp, #60
17648     A7 1E 0A FB | 	rdlong	local01, fp wz
1764c     3C 4E 85 F1 | 	sub	fp, #60
17650     60 00 90 AD |  if_e	jmp	#LR__2196
17654     C0 4E 05 F1 | 	add	fp, #192
17658     A7 12 02 FB | 	rdlong	arg01, fp
1765c     94 4E 85 F1 | 	sub	fp, #148
17660     A7 14 02 FB | 	rdlong	arg02, fp
17664     14 4E 05 F1 | 	add	fp, #20
17668     A7 16 02 FB | 	rdlong	arg03, fp
1766c     40 4E 85 F1 | 	sub	fp, #64
17670     CC 38 B0 FD | 	call	#__system__emitsign_0332
17674     18 4F 05 F1 | 	add	fp, #280
17678     A7 FA 61 FC | 	wrlong	result1, fp
1767c     18 4F 85 F1 | 	sub	fp, #280
17680     00 FA 55 F2 | 	cmps	result1, #0 wc
17684     18 4F 05 C1 |  if_b	add	fp, #280
17688     A7 FA 01 CB |  if_b	rdlong	result1, fp
1768c     18 4F 85 C1 |  if_b	sub	fp, #280
17690     B8 04 90 CD |  if_b	jmp	#LR__2223
17694     C0 4E 05 F1 | 	add	fp, #192
17698     A7 1E 02 FB | 	rdlong	local01, fp
1769c     58 4E 05 F1 | 	add	fp, #88
176a0     A7 22 02 FB | 	rdlong	local03, fp
176a4     11 1F 02 F1 | 	add	local01, local03
176a8     58 4E 85 F1 | 	sub	fp, #88
176ac     A7 1E 62 FC | 	wrlong	local01, fp
176b0     C0 4E 85 F1 | 	sub	fp, #192
176b4                 | LR__2196
176b4     4C 4E 05 F1 | 	add	fp, #76
176b8     A7 1E 02 FB | 	rdlong	local01, fp
176bc     34 4E 85 F1 | 	sub	fp, #52
176c0     A7 1E 62 FC | 	wrlong	local01, fp
176c4     18 4E 85 F1 | 	sub	fp, #24
176c8     97 9E 48 FB | 	callpa	#(@LR__2202-@LR__2197)>>2,fcache_load_ptr_
176cc                 | LR__2197
176cc     18 4E 05 F1 | 	add	fp, #24
176d0     A7 20 02 FB | 	rdlong	local02, fp
176d4     3C 4E 05 F1 | 	add	fp, #60
176d8     A7 26 02 FB | 	rdlong	local05, fp
176dc     54 4E 85 F1 | 	sub	fp, #84
176e0     13 21 52 F2 | 	cmps	local02, local05 wc
176e4     20 01 90 3D |  if_ae	jmp	#LR__2203
176e8     18 4E 05 F1 | 	add	fp, #24
176ec     A7 28 02 FB | 	rdlong	local06, fp
176f0     18 4E 85 F1 | 	sub	fp, #24
176f4     00 28 56 F2 | 	cmps	local06, #0 wc
176f8     58 00 90 CD |  if_b	jmp	#LR__2198
176fc     18 4E 05 F1 | 	add	fp, #24
17700     A7 28 02 FB | 	rdlong	local06, fp
17704     40 4E 05 F1 | 	add	fp, #64
17708     A7 2A 02 FB | 	rdlong	local07, fp
1770c     58 4E 85 F1 | 	sub	fp, #88
17710     15 29 52 F2 | 	cmps	local06, local07 wc
17714     3C 00 90 3D |  if_ae	jmp	#LR__2198
17718     C0 4E 05 F1 | 	add	fp, #192
1771c     A7 2C 02 FB | 	rdlong	local08, fp
17720     16 2B 02 F6 | 	mov	local07, local08
17724     01 2A 06 F1 | 	add	local07, #1
17728     A7 2A 62 FC | 	wrlong	local07, fp
1772c     A8 4E 85 F1 | 	sub	fp, #168
17730     A7 2A 02 FB | 	rdlong	local07, fp
17734     15 2F 02 F6 | 	mov	local09, local07
17738     58 4E 05 F1 | 	add	fp, #88
1773c     A7 30 02 F6 | 	mov	local10, fp
17740     A7 2E 02 F1 | 	add	local09, fp
17744     17 33 C2 FA | 	rdbyte	local11, local09
17748     16 33 42 FC | 	wrbyte	local11, local08
1774c     70 4E 85 F1 | 	sub	fp, #112
17750     20 00 90 FD | 	jmp	#LR__2199
17754                 | LR__2198
17754     C0 4E 05 F1 | 	add	fp, #192
17758     A7 2C 02 FB | 	rdlong	local08, fp
1775c     16 2F 02 F6 | 	mov	local09, local08
17760     01 2E 06 F1 | 	add	local09, #1
17764     A7 2E 62 FC | 	wrlong	local09, fp
17768     C0 4E 85 F1 | 	sub	fp, #192
1776c     30 2E 06 F6 | 	mov	local09, #48
17770     16 61 48 FC | 	wrbyte	#48, local08
17774                 | LR__2199
17774     18 4E 05 F1 | 	add	fp, #24
17778     A7 28 02 FB | 	rdlong	local06, fp
1777c     38 4E 05 F1 | 	add	fp, #56
17780     A7 34 02 FB | 	rdlong	local12, fp
17784     50 4E 85 F1 | 	sub	fp, #80
17788     1A 29 0A F2 | 	cmp	local06, local12 wz
1778c     5C 00 90 5D |  if_ne	jmp	#LR__2201
17790     10 4F 05 F1 | 	add	fp, #272
17794     A7 2A 02 FB | 	rdlong	local07, fp
17798     10 4F 85 F1 | 	sub	fp, #272
1779c     15 2F 0A F6 | 	mov	local09, local07 wz
177a0     28 00 90 5D |  if_ne	jmp	#LR__2200
177a4     54 4E 05 F1 | 	add	fp, #84
177a8     A7 32 02 FB | 	rdlong	local11, fp
177ac     19 31 02 F6 | 	mov	local10, local11
177b0     01 30 86 F1 | 	sub	local10, #1
177b4     3C 4E 85 F1 | 	sub	fp, #60
177b8     A7 36 02 FB | 	rdlong	local13, fp
177bc     18 4E 85 F1 | 	sub	fp, #24
177c0     1B 39 02 F6 | 	mov	local14, local13
177c4     18 39 52 F2 | 	cmps	local14, local10 wc
177c8     20 00 90 3D |  if_ae	jmp	#LR__2201
177cc                 | LR__2200
177cc     C0 4E 05 F1 | 	add	fp, #192
177d0     A7 2C 02 FB | 	rdlong	local08, fp
177d4     16 35 02 F6 | 	mov	local12, local08
177d8     01 34 06 F1 | 	add	local12, #1
177dc     A7 34 62 FC | 	wrlong	local12, fp
177e0     C0 4E 85 F1 | 	sub	fp, #192
177e4     2E 2E 06 F6 | 	mov	local09, #46
177e8     16 5D 48 FC | 	wrbyte	#46, local08
177ec                 | LR__2201
177ec     18 4E 05 F1 | 	add	fp, #24
177f0     A7 3A 02 FB | 	rdlong	local15, fp
177f4     1D 35 02 F6 | 	mov	local12, local15
177f8     01 34 06 F1 | 	add	local12, #1
177fc     A7 34 62 FC | 	wrlong	local12, fp
17800     18 4E 85 F1 | 	sub	fp, #24
17804     C4 FE 9F FD | 	jmp	#LR__2197
17808                 | LR__2202
17808                 | LR__2203
17808     34 4E 05 F1 | 	add	fp, #52
1780c     A7 1E 0A FB | 	rdlong	local01, fp wz
17810     34 4E 85 F1 | 	sub	fp, #52
17814     A0 00 90 AD |  if_e	jmp	#LR__2207
17818     C0 4E 05 F1 | 	add	fp, #192
1781c     A7 1E 02 FB | 	rdlong	local01, fp
17820     01 1E 86 F1 | 	sub	local01, #1
17824     A7 1E 62 FC | 	wrlong	local01, fp
17828     C0 4E 85 F1 | 	sub	fp, #192
1782c     97 26 48 FB | 	callpa	#(@LR__2205-@LR__2204)>>2,fcache_load_ptr_
17830                 | LR__2204
17830     C0 4E 05 F1 | 	add	fp, #192
17834     A7 1E 02 FB | 	rdlong	local01, fp
17838     04 4E 05 F1 | 	add	fp, #4
1783c     A7 22 02 FB | 	rdlong	local03, fp
17840     C4 4E 85 F1 | 	sub	fp, #196
17844     11 1F 5A F2 | 	cmps	local01, local03 wcz
17848     30 00 90 ED |  if_be	jmp	#LR__2206
1784c     C0 4E 05 F1 | 	add	fp, #192
17850     A7 28 02 FB | 	rdlong	local06, fp
17854     C0 4E 85 F1 | 	sub	fp, #192
17858     14 25 C2 FA | 	rdbyte	local04, local06
1785c     30 24 0E F2 | 	cmp	local04, #48 wz
17860     18 00 90 5D |  if_ne	jmp	#LR__2206
17864     C0 4E 05 F1 | 	add	fp, #192
17868     A7 1E 02 FB | 	rdlong	local01, fp
1786c     01 1E 86 F1 | 	sub	local01, #1
17870     A7 1E 62 FC | 	wrlong	local01, fp
17874     C0 4E 85 F1 | 	sub	fp, #192
17878     B4 FF 9F FD | 	jmp	#LR__2204
1787c                 | LR__2205
1787c                 | LR__2206
1787c     C0 4E 05 F1 | 	add	fp, #192
17880     A7 20 02 FB | 	rdlong	local02, fp
17884     C0 4E 85 F1 | 	sub	fp, #192
17888     10 1F C2 FA | 	rdbyte	local01, local02
1788c     2E 1E 0E F2 | 	cmp	local01, #46 wz
17890     C0 4E 05 A1 |  if_e	add	fp, #192
17894     A7 1E 02 AB |  if_e	rdlong	local01, fp
17898     01 1E 86 A1 |  if_e	sub	local01, #1
1789c     A7 1E 62 AC |  if_e	wrlong	local01, fp
178a0     C0 4E 85 A1 |  if_e	sub	fp, #192
178a4     C0 4E 05 F1 | 	add	fp, #192
178a8     A7 22 02 FB | 	rdlong	local03, fp
178ac     01 22 06 F1 | 	add	local03, #1
178b0     A7 22 62 FC | 	wrlong	local03, fp
178b4     C0 4E 85 F1 | 	sub	fp, #192
178b8                 | LR__2207
178b8     24 4E 05 F1 | 	add	fp, #36
178bc     A7 1E 0A FB | 	rdlong	local01, fp wz
178c0     24 4E 85 F1 | 	sub	fp, #36
178c4     B4 00 90 AD |  if_e	jmp	#LR__2210
178c8     C0 4E 05 F1 | 	add	fp, #192
178cc     A7 20 02 FB | 	rdlong	local02, fp
178d0     10 23 02 F6 | 	mov	local03, local02
178d4     01 22 06 F1 | 	add	local03, #1
178d8     A7 22 62 FC | 	wrlong	local03, fp
178dc     90 4E 85 F1 | 	sub	fp, #144
178e0     A7 24 02 FB | 	rdlong	local04, fp
178e4     10 25 42 FC | 	wrbyte	local04, local02
178e8     90 4E 05 F1 | 	add	fp, #144
178ec     A7 20 02 FB | 	rdlong	local02, fp
178f0     10 23 02 F6 | 	mov	local03, local02
178f4     01 22 06 F1 | 	add	local03, #1
178f8     A7 22 62 FC | 	wrlong	local03, fp
178fc     60 4E 85 F1 | 	sub	fp, #96
17900     A7 24 02 FB | 	rdlong	local04, fp
17904     10 25 42 FC | 	wrbyte	local04, local02
17908     48 4E 85 F1 | 	sub	fp, #72
1790c     A7 00 68 FC | 	wrlong	#0, fp
17910     18 4E 85 F1 | 	sub	fp, #24
17914                 | LR__2208
17914     18 4E 05 F1 | 	add	fp, #24
17918     A7 20 02 FB | 	rdlong	local02, fp
1791c     44 4E 05 F1 | 	add	fp, #68
17920     A7 26 02 FB | 	rdlong	local05, fp
17924     5C 4E 85 F1 | 	sub	fp, #92
17928     13 21 52 F2 | 	cmps	local02, local05 wc
1792c     4C 00 90 3D |  if_ae	jmp	#LR__2209
17930     C0 4E 05 F1 | 	add	fp, #192
17934     A7 2C 02 FB | 	rdlong	local08, fp
17938     16 35 02 F6 | 	mov	local12, local08
1793c     01 34 06 F1 | 	add	local12, #1
17940     A7 34 62 FC | 	wrlong	local12, fp
17944     A8 4E 85 F1 | 	sub	fp, #168
17948     A7 2A 02 FB | 	rdlong	local07, fp
1794c     15 2F 02 F6 | 	mov	local09, local07
17950     98 4E 05 F1 | 	add	fp, #152
17954     A7 30 02 F6 | 	mov	local10, fp
17958     A7 2E 02 F1 | 	add	local09, fp
1795c     17 33 C2 FA | 	rdbyte	local11, local09
17960     16 33 42 FC | 	wrbyte	local11, local08
17964     98 4E 85 F1 | 	sub	fp, #152
17968     A7 34 02 FB | 	rdlong	local12, fp
1796c     01 34 06 F1 | 	add	local12, #1
17970     A7 34 62 FC | 	wrlong	local12, fp
17974     18 4E 85 F1 | 	sub	fp, #24
17978     98 FF 9F FD | 	jmp	#LR__2208
1797c                 | LR__2209
1797c                 | LR__2210
1797c     C0 4E 05 F1 | 	add	fp, #192
17980     A7 1E 02 FB | 	rdlong	local01, fp
17984     C0 4E 85 F1 | 	sub	fp, #192
17988     0F 01 48 FC | 	wrbyte	#0, local01
1798c                 | LR__2211
1798c     6C 4E 05 F1 | 	add	fp, #108
17990     A7 1E 0A FB | 	rdlong	local01, fp wz
17994     6C 4E 85 F1 | 	sub	fp, #108
17998     90 01 90 AD |  if_e	jmp	#LR__2222
1799c     48 4E 05 F1 | 	add	fp, #72
179a0     A7 22 0A FB | 	rdlong	local03, fp wz
179a4     48 4E 85 F1 | 	sub	fp, #72
179a8     80 01 90 AD |  if_e	jmp	#LR__2222
179ac     C4 4E 05 F1 | 	add	fp, #196
179b0     A7 12 02 FB | 	rdlong	arg01, fp
179b4     C4 4E 85 F1 | 	sub	fp, #196
179b8     09 3D 02 F6 | 	mov	local16, arg01
179bc     97 06 48 FB | 	callpa	#(@LR__2213-@LR__2212)>>2,fcache_load_ptr_
179c0                 | LR__2212
179c0     1E FB C9 FA | 	rdbyte	result1, local16 wz
179c4     01 3C 06 51 |  if_ne	add	local16, #1
179c8     F4 FF 9F 5D |  if_ne	jmp	#LR__2212
179cc                 | LR__2213
179cc     09 3D 82 F1 | 	sub	local16, arg01
179d0     1E 25 02 F6 | 	mov	local04, local16
179d4     6C 4E 05 F1 | 	add	fp, #108
179d8     A7 28 02 FB | 	rdlong	local06, fp
179dc     6C 4E 85 F1 | 	sub	fp, #108
179e0     14 25 5A F2 | 	cmps	local04, local06 wcz
179e4     44 01 90 ED |  if_be	jmp	#LR__2222
179e8     C4 4E 05 F1 | 	add	fp, #196
179ec     A7 1E 02 FB | 	rdlong	local01, fp
179f0     5C 4E 05 F1 | 	add	fp, #92
179f4     A7 1E 62 FC | 	wrlong	local01, fp
179f8     FC 4E 85 F1 | 	sub	fp, #252
179fc     A7 1E 0A FB | 	rdlong	local01, fp wz
17a00     24 4E 85 F1 | 	sub	fp, #36
17a04     20 00 90 AD |  if_e	jmp	#LR__2214
17a08     B8 4E 05 F1 | 	add	fp, #184
17a0c     A7 00 68 FC | 	wrlong	#0, fp
17a10     4C 4E 85 F1 | 	sub	fp, #76
17a14     A7 1E 02 FB | 	rdlong	local01, fp
17a18     B0 4E 05 F1 | 	add	fp, #176
17a1c     A7 1E 62 FC | 	wrlong	local01, fp
17a20     1C 4F 85 F1 | 	sub	fp, #284
17a24     24 00 90 FD | 	jmp	#LR__2215
17a28                 | LR__2214
17a28     6C 4E 05 F1 | 	add	fp, #108
17a2c     A7 1E 02 FB | 	rdlong	local01, fp
17a30     01 1E 86 F1 | 	sub	local01, #1
17a34     4C 4E 05 F1 | 	add	fp, #76
17a38     A7 22 02 FB | 	rdlong	local03, fp
17a3c     11 1F 82 F1 | 	sub	local01, local03
17a40     64 4E 05 F1 | 	add	fp, #100
17a44     A7 1E 62 FC | 	wrlong	local01, fp
17a48     1C 4F 85 F1 | 	sub	fp, #284
17a4c                 | LR__2215
17a4c     97 20 48 FB | 	callpa	#(@LR__2217-@LR__2216)>>2,fcache_load_ptr_
17a50                 | LR__2216
17a50     1C 4F 05 F1 | 	add	fp, #284
17a54     A7 1E 0A FB | 	rdlong	local01, fp wz
17a58     1C 4F 85 F1 | 	sub	fp, #284
17a5c     30 00 90 AD |  if_e	jmp	#LR__2218
17a60     20 4F 05 F1 | 	add	fp, #288
17a64     A7 20 02 FB | 	rdlong	local02, fp
17a68     10 23 02 F6 | 	mov	local03, local02
17a6c     01 22 06 F1 | 	add	local03, #1
17a70     A7 22 62 FC | 	wrlong	local03, fp
17a74     10 55 48 FC | 	wrbyte	#42, local02
17a78     04 4E 85 F1 | 	sub	fp, #4
17a7c     A7 1E 02 FB | 	rdlong	local01, fp
17a80     01 1E 86 F1 | 	sub	local01, #1
17a84     A7 1E 62 FC | 	wrlong	local01, fp
17a88     1C 4F 85 F1 | 	sub	fp, #284
17a8c     C0 FF 9F FD | 	jmp	#LR__2216
17a90                 | LR__2217
17a90                 | LR__2218
17a90     B8 4E 05 F1 | 	add	fp, #184
17a94     A7 1E 0A FB | 	rdlong	local01, fp wz
17a98     B8 4E 85 F1 | 	sub	fp, #184
17a9c     70 00 90 AD |  if_e	jmp	#LR__2221
17aa0     20 4F 05 F1 | 	add	fp, #288
17aa4     A7 20 02 FB | 	rdlong	local02, fp
17aa8     10 23 02 F6 | 	mov	local03, local02
17aac     01 22 06 F1 | 	add	local03, #1
17ab0     A7 22 62 FC | 	wrlong	local03, fp
17ab4     10 5D 48 FC | 	wrbyte	#46, local02
17ab8     04 4E 85 F1 | 	sub	fp, #4
17abc     A7 00 68 FC | 	wrlong	#0, fp
17ac0     1C 4F 85 F1 | 	sub	fp, #284
17ac4                 | LR__2219
17ac4     1C 4F 05 F1 | 	add	fp, #284
17ac8     A7 20 02 FB | 	rdlong	local02, fp
17acc     64 4E 85 F1 | 	sub	fp, #100
17ad0     A7 26 02 FB | 	rdlong	local05, fp
17ad4     B8 4E 85 F1 | 	sub	fp, #184
17ad8     13 21 52 F2 | 	cmps	local02, local05 wc
17adc     30 00 90 3D |  if_ae	jmp	#LR__2220
17ae0     20 4F 05 F1 | 	add	fp, #288
17ae4     A7 2C 02 FB | 	rdlong	local08, fp
17ae8     16 35 02 F6 | 	mov	local12, local08
17aec     01 34 06 F1 | 	add	local12, #1
17af0     A7 34 62 FC | 	wrlong	local12, fp
17af4     16 55 48 FC | 	wrbyte	#42, local08
17af8     04 4E 85 F1 | 	sub	fp, #4
17afc     A7 34 02 FB | 	rdlong	local12, fp
17b00     01 34 06 F1 | 	add	local12, #1
17b04     A7 34 62 FC | 	wrlong	local12, fp
17b08     1C 4F 85 F1 | 	sub	fp, #284
17b0c     B4 FF 9F FD | 	jmp	#LR__2219
17b10                 | LR__2220
17b10                 | LR__2221
17b10     20 4F 05 F1 | 	add	fp, #288
17b14     A7 20 02 FB | 	rdlong	local02, fp
17b18     10 23 02 F6 | 	mov	local03, local02
17b1c     01 22 06 F1 | 	add	local03, #1
17b20     A7 22 62 FC | 	wrlong	local03, fp
17b24     20 4F 85 F1 | 	sub	fp, #288
17b28     10 01 48 FC | 	wrbyte	#0, local02
17b2c                 | LR__2222
17b2c     04 4E 05 F1 | 	add	fp, #4
17b30     A7 12 02 FB | 	rdlong	arg01, fp
17b34     04 4E 05 F1 | 	add	fp, #4
17b38     A7 14 02 FB | 	rdlong	arg02, fp
17b3c     BC 4E 05 F1 | 	add	fp, #188
17b40     A7 16 02 FB | 	rdlong	arg03, fp
17b44     C4 4E 85 F1 | 	sub	fp, #196
17b48     C4 EE BF FD | 	call	#__system___fmtstr
17b4c                 | LR__2223
17b4c     A7 F0 03 F6 | 	mov	ptra, fp
17b50     B2 00 A0 FD | 	call	#popregs_
17b54                 | __system___fmtfloat_ret
17b54     2D 00 64 FD | 	ret
17b58                 | 
17b58                 | __system__Left_S
17b58     04 4A 05 F6 | 	mov	COUNT_, #4
17b5c     A8 00 A0 FD | 	call	#pushregs_
17b60     09 1F 02 F6 | 	mov	local01, arg01
17b64     0A 21 02 F6 | 	mov	local02, arg02
17b68     01 20 56 F2 | 	cmps	local02, #1 wc
17b6c     25 01 00 CF 
17b70     32 FB 05 C6 |  if_b	mov	result1, ##@LR__4063
17b74     5C 00 90 CD |  if_b	jmp	#LR__2233
17b78     0F 13 02 F6 | 	mov	arg01, local01
17b7c     09 23 02 F6 | 	mov	local03, arg01
17b80     97 06 48 FB | 	callpa	#(@LR__2231-@LR__2230)>>2,fcache_load_ptr_
17b84                 | LR__2230
17b84     11 FB C9 FA | 	rdbyte	result1, local03 wz
17b88     01 22 06 51 |  if_ne	add	local03, #1
17b8c     F4 FF 9F 5D |  if_ne	jmp	#LR__2230
17b90                 | LR__2231
17b90     09 23 82 F1 | 	sub	local03, arg01
17b94     11 FB 01 F6 | 	mov	result1, local03
17b98     10 FB 59 F2 | 	cmps	result1, local02 wcz
17b9c     0F FB 01 E6 |  if_be	mov	result1, local01
17ba0     30 00 90 ED |  if_be	jmp	#LR__2233
17ba4     10 13 02 F6 | 	mov	arg01, local02
17ba8     02 12 06 F1 | 	add	arg01, #2
17bac     FC 18 B0 FD | 	call	#__system___gc_alloc_managed
17bb0     FD 24 0A F6 | 	mov	local04, result1 wz
17bb4     18 00 90 AD |  if_e	jmp	#LR__2232
17bb8     12 13 02 F6 | 	mov	arg01, local04
17bbc     0F 15 02 F6 | 	mov	arg02, local01
17bc0     10 17 02 F6 | 	mov	arg03, local02
17bc4     A0 DE BF FD | 	call	#__system____builtin_memmove
17bc8     12 21 02 F1 | 	add	local02, local04
17bcc     10 01 48 FC | 	wrbyte	#0, local02
17bd0                 | LR__2232
17bd0     12 FB 01 F6 | 	mov	result1, local04
17bd4                 | LR__2233
17bd4     A7 F0 03 F6 | 	mov	ptra, fp
17bd8     B2 00 A0 FD | 	call	#popregs_
17bdc                 | __system__Left_S_ret
17bdc     2D 00 64 FD | 	ret
17be0                 | 
17be0                 | __system__Right_S
17be0     05 4A 05 F6 | 	mov	COUNT_, #5
17be4     A8 00 A0 FD | 	call	#pushregs_
17be8     09 1F 02 F6 | 	mov	local01, arg01
17bec     0A 21 02 F6 | 	mov	local02, arg02
17bf0     01 20 56 F2 | 	cmps	local02, #1 wc
17bf4     25 01 00 CF 
17bf8     33 FB 05 C6 |  if_b	mov	result1, ##@LR__4064
17bfc     64 00 90 CD |  if_b	jmp	#LR__2243
17c00     0F 13 02 F6 | 	mov	arg01, local01
17c04     09 23 02 F6 | 	mov	local03, arg01
17c08     97 06 48 FB | 	callpa	#(@LR__2241-@LR__2240)>>2,fcache_load_ptr_
17c0c                 | LR__2240
17c0c     11 FB C9 FA | 	rdbyte	result1, local03 wz
17c10     01 22 06 51 |  if_ne	add	local03, #1
17c14     F4 FF 9F 5D |  if_ne	jmp	#LR__2240
17c18                 | LR__2241
17c18     09 23 82 F1 | 	sub	local03, arg01
17c1c     11 FB 01 F6 | 	mov	result1, local03
17c20     FD 24 02 F6 | 	mov	local04, result1
17c24     10 25 5A F2 | 	cmps	local04, local02 wcz
17c28     0F FB 01 E6 |  if_be	mov	result1, local01
17c2c     34 00 90 ED |  if_be	jmp	#LR__2243
17c30     10 13 02 F6 | 	mov	arg01, local02
17c34     02 12 06 F1 | 	add	arg01, #2
17c38     70 18 B0 FD | 	call	#__system___gc_alloc_managed
17c3c     FD 26 0A F6 | 	mov	local05, result1 wz
17c40     1C 00 90 AD |  if_e	jmp	#LR__2242
17c44     10 25 82 F1 | 	sub	local04, local02
17c48     0F 25 02 F1 | 	add	local04, local01
17c4c     01 20 06 F1 | 	add	local02, #1
17c50     13 13 02 F6 | 	mov	arg01, local05
17c54     12 15 02 F6 | 	mov	arg02, local04
17c58     10 17 02 F6 | 	mov	arg03, local02
17c5c     08 DE BF FD | 	call	#__system____builtin_memmove
17c60                 | LR__2242
17c60     13 FB 01 F6 | 	mov	result1, local05
17c64                 | LR__2243
17c64     A7 F0 03 F6 | 	mov	ptra, fp
17c68     B2 00 A0 FD | 	call	#popregs_
17c6c                 | __system__Right_S_ret
17c6c     2D 00 64 FD | 	ret
17c70                 | 
17c70                 | __system__Mid_S
17c70     05 4A 05 F6 | 	mov	COUNT_, #5
17c74     A8 00 A0 FD | 	call	#pushregs_
17c78     09 1F 02 F6 | 	mov	local01, arg01
17c7c     0A 21 02 F6 | 	mov	local02, arg02
17c80     01 16 56 F2 | 	cmps	arg03, #1 wc
17c84     25 01 00 CF 
17c88     34 FB 05 C6 |  if_b	mov	result1, ##@LR__4065
17c8c     80 00 90 CD |  if_b	jmp	#LR__2253
17c90     01 20 86 F1 | 	sub	local02, #1
17c94     00 20 56 F3 | 	fges	local02, #0 wc
17c98     0F 13 02 F6 | 	mov	arg01, local01
17c9c     09 23 02 F6 | 	mov	local03, arg01
17ca0     97 06 48 FB | 	callpa	#(@LR__2251-@LR__2250)>>2,fcache_load_ptr_
17ca4                 | LR__2250
17ca4     11 FB C9 FA | 	rdbyte	result1, local03 wz
17ca8     01 22 06 51 |  if_ne	add	local03, #1
17cac     F4 FF 9F 5D |  if_ne	jmp	#LR__2250
17cb0                 | LR__2251
17cb0     09 23 82 F1 | 	sub	local03, arg01
17cb4     11 FB 01 F6 | 	mov	result1, local03
17cb8     FD 14 02 F6 | 	mov	arg02, result1
17cbc     10 15 52 F2 | 	cmps	arg02, local02 wc
17cc0     25 01 00 CF 
17cc4     35 FB 05 C6 |  if_b	mov	result1, ##@LR__4066
17cc8     44 00 90 CD |  if_b	jmp	#LR__2253
17ccc     0A 25 02 F6 | 	mov	local04, arg02
17cd0     10 25 82 F1 | 	sub	local04, local02
17cd4     0B 25 5A F2 | 	cmps	local04, arg03 wcz
17cd8     0B 25 02 16 |  if_a	mov	local04, arg03
17cdc     12 13 02 F6 | 	mov	arg01, local04
17ce0     02 12 06 F1 | 	add	arg01, #2
17ce4     C4 17 B0 FD | 	call	#__system___gc_alloc_managed
17ce8     FD 26 0A F6 | 	mov	local05, result1 wz
17cec     1C 00 90 AD |  if_e	jmp	#LR__2252
17cf0     0F 21 02 F1 | 	add	local02, local01
17cf4     13 13 02 F6 | 	mov	arg01, local05
17cf8     10 15 02 F6 | 	mov	arg02, local02
17cfc     12 17 02 F6 | 	mov	arg03, local04
17d00     64 DD BF FD | 	call	#__system____builtin_memmove
17d04     13 25 02 F1 | 	add	local04, local05
17d08     12 01 48 FC | 	wrbyte	#0, local04
17d0c                 | LR__2252
17d0c     13 FB 01 F6 | 	mov	result1, local05
17d10                 | LR__2253
17d10     A7 F0 03 F6 | 	mov	ptra, fp
17d14     B2 00 A0 FD | 	call	#popregs_
17d18                 | __system__Mid_S_ret
17d18     2D 00 64 FD | 	ret
17d1c                 | 
17d1c                 | __system__Chr_S
17d1c     01 4A 05 F6 | 	mov	COUNT_, #1
17d20     A8 00 A0 FD | 	call	#pushregs_
17d24     09 1F 02 F6 | 	mov	local01, arg01
17d28     03 12 06 F6 | 	mov	arg01, #3
17d2c     7C 17 B0 FD | 	call	#__system___gc_alloc_managed
17d30     00 FA 4D F2 | 	cmps	result1, #0 wz
17d34     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
17d38     01 FA 05 51 |  if_ne	add	result1, #1
17d3c     FD 00 48 5C |  if_ne	wrbyte	#0, result1
17d40     01 FA 85 51 |  if_ne	sub	result1, #1
17d44     A7 F0 03 F6 | 	mov	ptra, fp
17d48     B2 00 A0 FD | 	call	#popregs_
17d4c                 | __system__Chr_S_ret
17d4c     2D 00 64 FD | 	ret
17d50                 | 
17d50                 | __system__Number_S
17d50     08 4A 05 F6 | 	mov	COUNT_, #8
17d54     A8 00 A0 FD | 	call	#pushregs_
17d58     09 1F 02 F6 | 	mov	local01, arg01
17d5c     0A 21 0A F6 | 	mov	local02, arg02 wz
17d60     0B 23 02 F6 | 	mov	local03, arg03
17d64     3C 00 90 5D |  if_ne	jmp	#LR__2262
17d68     01 20 06 F6 | 	mov	local02, #1
17d6c     11 25 02 F6 | 	mov	local04, local03
17d70     01 26 06 F6 | 	mov	local05, #1
17d74     97 16 48 FB | 	callpa	#(@LR__2261-@LR__2260)>>2,fcache_load_ptr_
17d78                 | LR__2260
17d78     00 28 06 F6 | 	mov	local06, #0
17d7c     0F 25 1A F2 | 	cmp	local04, local01 wcz
17d80     01 28 66 E6 |  if_be	neg	local06, #1
17d84     12 27 12 F2 | 	cmp	local05, local04 wc
17d88     15 2B A2 F1 | 	subx	local07, local07
17d8c     15 29 CA F7 | 	test	local06, local07 wz
17d90     11 25 02 5D |  if_ne	qmul	local04, local03
17d94     12 27 02 56 |  if_ne	mov	local05, local04
17d98     01 20 06 51 |  if_ne	add	local02, #1
17d9c     18 24 62 5D |  if_ne	getqx	local04
17da0     D4 FF 9F 5D |  if_ne	jmp	#LR__2260
17da4                 | LR__2261
17da4                 | LR__2262
17da4     20 20 36 F3 | 	fle	local02, #32 wc
17da8     10 13 02 F6 | 	mov	arg01, local02
17dac     02 12 06 F1 | 	add	arg01, #2
17db0     F8 16 B0 FD | 	call	#__system___gc_alloc_managed
17db4     FD 28 02 F6 | 	mov	local06, result1
17db8     10 2B 02 F6 | 	mov	local07, local02
17dbc     14 2B 02 F1 | 	add	local07, local06
17dc0     15 01 48 FC | 	wrbyte	#0, local07
17dc4     97 1A 48 FB | 	callpa	#(@LR__2264-@LR__2263)>>2,fcache_load_ptr_
17dc8                 | LR__2263
17dc8     01 20 16 F2 | 	cmp	local02, #1 wc
17dcc     2C 00 90 CD |  if_b	jmp	#LR__2265
17dd0     11 1F 12 FD | 	qdiv	local01, local03
17dd4     01 20 86 F1 | 	sub	local02, #1
17dd8     10 2B 02 F6 | 	mov	local07, local02
17ddc     14 2B 02 F1 | 	add	local07, local06
17de0     19 2C 62 FD | 	getqy	local08
17de4     0A 2C 16 F2 | 	cmp	local08, #10 wc
17de8     30 2C 06 C1 |  if_b	add	local08, #48
17dec     37 2C 06 31 |  if_ae	add	local08, #55
17df0     15 2D 42 FC | 	wrbyte	local08, local07
17df4     18 1E 62 FD | 	getqx	local01
17df8     CC FF 9F FD | 	jmp	#LR__2263
17dfc                 | LR__2264
17dfc                 | LR__2265
17dfc     14 FB 01 F6 | 	mov	result1, local06
17e00     A7 F0 03 F6 | 	mov	ptra, fp
17e04     B2 00 A0 FD | 	call	#popregs_
17e08                 | __system__Number_S_ret
17e08     2D 00 64 FD | 	ret
17e0c                 | 
17e0c                 | __system__LCase_S
17e0c     07 4A 05 F6 | 	mov	COUNT_, #7
17e10     A8 00 A0 FD | 	call	#pushregs_
17e14     09 1F 02 F6 | 	mov	local01, arg01
17e18     09 21 02 F6 | 	mov	local02, arg01
17e1c     97 06 48 FB | 	callpa	#(@LR__2271-@LR__2270)>>2,fcache_load_ptr_
17e20                 | LR__2270
17e20     10 FB C9 FA | 	rdbyte	result1, local02 wz
17e24     01 20 06 51 |  if_ne	add	local02, #1
17e28     F4 FF 9F 5D |  if_ne	jmp	#LR__2270
17e2c                 | LR__2271
17e2c     09 21 82 F1 | 	sub	local02, arg01
17e30     10 FB 01 F6 | 	mov	result1, local02
17e34     FD 20 0A F6 | 	mov	local02, result1 wz
17e38     25 01 00 AF 
17e3c     36 FB 05 A6 |  if_e	mov	result1, ##@LR__4067
17e40     7C 00 90 AD |  if_e	jmp	#LR__2277
17e44     10 13 02 F6 | 	mov	arg01, local02
17e48     02 12 06 F1 | 	add	arg01, #2
17e4c     5C 16 B0 FD | 	call	#__system___gc_alloc_managed
17e50     FD 22 0A F6 | 	mov	local03, result1 wz
17e54     64 00 90 AD |  if_e	jmp	#LR__2276
17e58     01 24 66 F6 | 	neg	local04, #1
17e5c     97 26 48 FB | 	callpa	#(@LR__2275-@LR__2272)>>2,fcache_load_ptr_
17e60                 | LR__2272
17e60     01 24 06 F1 | 	add	local04, #1
17e64     12 27 02 F6 | 	mov	local05, local04
17e68     0F 27 02 F1 | 	add	local05, local01
17e6c     13 29 C2 FA | 	rdbyte	local06, local05
17e70     41 28 56 F2 | 	cmps	local06, #65 wc
17e74     18 00 90 CD |  if_b	jmp	#LR__2273
17e78     5B 28 56 F2 | 	cmps	local06, #91 wc
17e7c     12 2B 02 C6 |  if_b	mov	local07, local04
17e80     11 2B 02 C1 |  if_b	add	local07, local03
17e84     20 28 06 C1 |  if_b	add	local06, #32
17e88     15 29 42 CC |  if_b	wrbyte	local06, local07
17e8c     0C 00 90 CD |  if_b	jmp	#LR__2274
17e90                 | LR__2273
17e90     12 2B 02 F6 | 	mov	local07, local04
17e94     11 2B 02 F1 | 	add	local07, local03
17e98     15 29 42 FC | 	wrbyte	local06, local07
17e9c                 | LR__2274
17e9c     10 29 02 F6 | 	mov	local06, local02
17ea0     01 28 86 F1 | 	sub	local06, #1
17ea4     14 25 0A F2 | 	cmp	local04, local06 wz
17ea8     B4 FF 9F 5D |  if_ne	jmp	#LR__2272
17eac                 | LR__2275
17eac     11 21 02 F1 | 	add	local02, local03
17eb0     10 01 48 FC | 	wrbyte	#0, local02
17eb4     11 FB 01 F6 | 	mov	result1, local03
17eb8     04 00 90 FD | 	jmp	#LR__2277
17ebc                 | LR__2276
17ebc     11 FB 01 F6 | 	mov	result1, local03
17ec0                 | LR__2277
17ec0     A7 F0 03 F6 | 	mov	ptra, fp
17ec4     B2 00 A0 FD | 	call	#popregs_
17ec8                 | __system__LCase_S_ret
17ec8     2D 00 64 FD | 	ret
17ecc                 | 
17ecc                 | __system__LTrim_S
17ecc     05 4A 05 F6 | 	mov	COUNT_, #5
17ed0     A8 00 A0 FD | 	call	#pushregs_
17ed4     09 1F 02 F6 | 	mov	local01, arg01
17ed8     09 21 02 F6 | 	mov	local02, arg01
17edc     97 06 48 FB | 	callpa	#(@LR__2281-@LR__2280)>>2,fcache_load_ptr_
17ee0                 | LR__2280
17ee0     10 FB C9 FA | 	rdbyte	result1, local02 wz
17ee4     01 20 06 51 |  if_ne	add	local02, #1
17ee8     F4 FF 9F 5D |  if_ne	jmp	#LR__2280
17eec                 | LR__2281
17eec     09 21 82 F1 | 	sub	local02, arg01
17ef0     10 FB 01 F6 | 	mov	result1, local02
17ef4     FD 20 0A F6 | 	mov	local02, result1 wz
17ef8     25 01 00 AF 
17efc     37 FB 05 A6 |  if_e	mov	result1, ##@LR__4068
17f00     7C 00 90 AD |  if_e	jmp	#LR__2286
17f04     00 22 06 F6 | 	mov	local03, #0
17f08     10 25 02 F6 | 	mov	local04, local02
17f0c                 | LR__2282
17f0c     12 23 52 F2 | 	cmps	local03, local04 wc
17f10     68 00 90 3D |  if_ae	jmp	#LR__2285
17f14     11 17 02 F6 | 	mov	arg03, local03
17f18     0F 17 02 F1 | 	add	arg03, local01
17f1c     0B 17 C2 FA | 	rdbyte	arg03, arg03
17f20     20 16 0E F2 | 	cmp	arg03, #32 wz
17f24     4C 00 90 AD |  if_e	jmp	#LR__2284
17f28     10 13 02 F6 | 	mov	arg01, local02
17f2c     11 13 82 F1 | 	sub	arg01, local03
17f30     02 12 06 F1 | 	add	arg01, #2
17f34     74 15 B0 FD | 	call	#__system___gc_alloc_managed
17f38     FD 26 0A F6 | 	mov	local05, result1 wz
17f3c     2C 00 90 AD |  if_e	jmp	#LR__2283
17f40     11 15 02 F6 | 	mov	arg02, local03
17f44     0F 15 02 F1 | 	add	arg02, local01
17f48     10 17 02 F6 | 	mov	arg03, local02
17f4c     11 17 82 F1 | 	sub	arg03, local03
17f50     13 13 02 F6 | 	mov	arg01, local05
17f54     10 DB BF FD | 	call	#__system____builtin_memmove
17f58     11 21 82 F1 | 	sub	local02, local03
17f5c     13 21 02 F1 | 	add	local02, local05
17f60     10 01 48 FC | 	wrbyte	#0, local02
17f64     13 FB 01 F6 | 	mov	result1, local05
17f68     14 00 90 FD | 	jmp	#LR__2286
17f6c                 | LR__2283
17f6c     13 FB 01 F6 | 	mov	result1, local05
17f70     0C 00 90 FD | 	jmp	#LR__2286
17f74                 | LR__2284
17f74     01 22 06 F1 | 	add	local03, #1
17f78     90 FF 9F FD | 	jmp	#LR__2282
17f7c                 | LR__2285
17f7c     0F FB 01 F6 | 	mov	result1, local01
17f80                 | LR__2286
17f80     A7 F0 03 F6 | 	mov	ptra, fp
17f84     B2 00 A0 FD | 	call	#popregs_
17f88                 | __system__LTrim_S_ret
17f88     2D 00 64 FD | 	ret
17f8c                 | 
17f8c                 | __system__RTrim_S
17f8c     04 4A 05 F6 | 	mov	COUNT_, #4
17f90     A8 00 A0 FD | 	call	#pushregs_
17f94     09 1F 02 F6 | 	mov	local01, arg01
17f98     09 21 02 F6 | 	mov	local02, arg01
17f9c     97 06 48 FB | 	callpa	#(@LR__2291-@LR__2290)>>2,fcache_load_ptr_
17fa0                 | LR__2290
17fa0     10 FB C9 FA | 	rdbyte	result1, local02 wz
17fa4     01 20 06 51 |  if_ne	add	local02, #1
17fa8     F4 FF 9F 5D |  if_ne	jmp	#LR__2290
17fac                 | LR__2291
17fac     09 21 82 F1 | 	sub	local02, arg01
17fb0     10 FB 01 F6 | 	mov	result1, local02
17fb4     FD 20 0A F6 | 	mov	local02, result1 wz
17fb8     25 01 00 AF 
17fbc     38 FB 05 A6 |  if_e	mov	result1, ##@LR__4069
17fc0     74 00 90 AD |  if_e	jmp	#LR__2295
17fc4     10 23 02 F6 | 	mov	local03, local02
17fc8     01 22 86 F1 | 	sub	local03, #1
17fcc                 | LR__2292
17fcc     11 15 02 F6 | 	mov	arg02, local03
17fd0     0F 15 02 F1 | 	add	arg02, local01
17fd4     0A 21 C2 FA | 	rdbyte	local02, arg02
17fd8     20 20 0E F2 | 	cmp	local02, #32 wz
17fdc     44 00 90 AD |  if_e	jmp	#LR__2294
17fe0     11 13 02 F6 | 	mov	arg01, local03
17fe4     02 12 06 F1 | 	add	arg01, #2
17fe8     C0 14 B0 FD | 	call	#__system___gc_alloc_managed
17fec     FD 24 0A F6 | 	mov	local04, result1 wz
17ff0     28 00 90 AD |  if_e	jmp	#LR__2293
17ff4     11 17 02 F6 | 	mov	arg03, local03
17ff8     01 16 06 F1 | 	add	arg03, #1
17ffc     12 13 02 F6 | 	mov	arg01, local04
18000     0F 15 02 F6 | 	mov	arg02, local01
18004     60 DA BF FD | 	call	#__system____builtin_memmove
18008     01 22 06 F1 | 	add	local03, #1
1800c     12 23 02 F1 | 	add	local03, local04
18010     11 01 48 FC | 	wrbyte	#0, local03
18014     12 FB 01 F6 | 	mov	result1, local04
18018     1C 00 90 FD | 	jmp	#LR__2295
1801c                 | LR__2293
1801c     12 FB 01 F6 | 	mov	result1, local04
18020     14 00 90 FD | 	jmp	#LR__2295
18024                 | LR__2294
18024     01 22 86 F1 | 	sub	local03, #1
18028     00 22 56 F2 | 	cmps	local03, #0 wc
1802c     9C FF 9F 3D |  if_ae	jmp	#LR__2292
18030     25 01 00 FF 
18034     39 FB 05 F6 | 	mov	result1, ##@LR__4070
18038                 | LR__2295
18038     A7 F0 03 F6 | 	mov	ptra, fp
1803c     B2 00 A0 FD | 	call	#popregs_
18040                 | __system__RTrim_S_ret
18040     2D 00 64 FD | 	ret
18044                 | 
18044                 | __system___strerror
18044     00 12 56 F2 | 	cmps	arg01, #0 wc
18048     08 00 90 CD |  if_b	jmp	#LR__2300
1804c     1A 12 56 F2 | 	cmps	arg01, #26 wc
18050     04 00 90 CD |  if_b	jmp	#LR__2301
18054                 | LR__2300
18054     19 12 06 F6 | 	mov	arg01, #25
18058                 | LR__2301
18058     02 12 66 F0 | 	shl	arg01, #2
1805c     01 00 00 FF 
18060     D8 E8 05 F1 | 	add	ptr___system__dat__, ##728
18064     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
18068     09 FB 01 FB | 	rdlong	result1, arg01
1806c     01 00 00 FF 
18070     D8 E8 85 F1 | 	sub	ptr___system__dat__, ##728
18074                 | __system___strerror_ret
18074     2D 00 64 FD | 	ret
18078                 | 
18078                 | __system___int64_shl
18078     20 16 CE F7 | 	test	arg03, #32 wz
1807c     09 15 02 56 |  if_ne	mov	arg02, arg01
18080     00 12 06 56 |  if_ne	mov	arg01, #0
18084     1F 16 CE F7 | 	test	arg03, #31 wz
18088     18 00 90 AD |  if_e	jmp	#LR__2310
1808c     0B 15 62 F0 | 	shl	arg02, arg03
18090     09 FB 01 F6 | 	mov	result1, arg01
18094     0B FD 61 F6 | 	neg	result2, arg03
18098     FE FA 41 F0 | 	shr	result1, result2
1809c     FD 14 42 F5 | 	or	arg02, result1
180a0     0B 13 62 F0 | 	shl	arg01, arg03
180a4                 | LR__2310
180a4     0A FD 01 F6 | 	mov	result2, arg02
180a8     09 FB 01 F6 | 	mov	result1, arg01
180ac                 | __system___int64_shl_ret
180ac     2D 00 64 FD | 	ret
180b0                 | 
180b0                 | __system___usepins
180b0     14 E8 05 F1 | 	add	ptr___system__dat__, #20
180b4     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
180b8     14 E8 85 F1 | 	sub	ptr___system__dat__, #20
180bc     00 13 CA F7 | 	test	arg01, _var01 wz
180c0     18 E8 05 A1 |  if_e	add	ptr___system__dat__, #24
180c4     F4 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
180c8     18 E8 85 A1 |  if_e	sub	ptr___system__dat__, #24
180cc     01 15 CA A7 |  if_e	test	arg02, _var02 wz
180d0     00 FA 05 56 |  if_ne	mov	result1, #0
180d4     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
180d8     14 E8 05 F1 | 	add	ptr___system__dat__, #20
180dc     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
180e0     09 03 42 F5 | 	or	_var02, arg01
180e4     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
180e8     04 E8 05 F1 | 	add	ptr___system__dat__, #4
180ec     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
180f0     0A 03 42 F5 | 	or	_var02, arg02
180f4     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
180f8     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
180fc     01 FA 65 F6 | 	neg	result1, #1
18100                 | __system___usepins_ret
18100     2D 00 64 FD | 	ret
18104                 | 
18104                 | __system___freepins
18104     14 E8 05 F1 | 	add	ptr___system__dat__, #20
18108     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1810c     09 01 22 F5 | 	andn	_var01, arg01
18110     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
18114     04 E8 05 F1 | 	add	ptr___system__dat__, #4
18118     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1811c     0A 01 22 F5 | 	andn	_var01, arg02
18120     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
18124     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
18128                 | __system___freepins_ret
18128     2D 00 64 FD | 	ret
1812c                 | 
1812c                 | __system___float_fromuns
1812c     09 17 0A F6 | 	mov	arg03, arg01 wz
18130     0B FB 01 A6 |  if_e	mov	result1, arg03
18134     24 00 90 AD |  if_e	jmp	#LR__2320
18138     0B 15 92 F7 | 	encod	arg02, arg03 wc
1813c     01 14 06 C1 |  if_b	add	arg02, #1
18140     01 14 86 F1 | 	sub	arg02, #1
18144     1F 12 06 F6 | 	mov	arg01, #31
18148     0A 13 82 F1 | 	sub	arg01, arg02
1814c     09 17 62 F0 | 	shl	arg03, arg01
18150     02 16 46 F0 | 	shr	arg03, #2
18154     00 12 06 F6 | 	mov	arg01, #0
18158     74 08 B0 FD | 	call	#__system___float_Pack
1815c                 | LR__2320
1815c                 | __system___float_fromuns_ret
1815c     2D 00 64 FD | 	ret
18160                 | 
18160                 | __system___float_add
18160     0F 4A 05 F6 | 	mov	COUNT_, #15
18164     A8 00 A0 FD | 	call	#pushregs_
18168     09 1F 02 F6 | 	mov	local01, arg01
1816c     0A 21 02 F6 | 	mov	local02, arg02
18170     00 22 06 F6 | 	mov	local03, #0
18174     0F 25 02 F6 | 	mov	local04, local01
18178     12 27 02 F6 | 	mov	local05, local04
1817c     16 26 46 F7 | 	zerox	local05, #22
18180     12 29 02 F6 | 	mov	local06, local04
18184     01 28 66 F0 | 	shl	local06, #1
18188     18 28 46 F0 | 	shr	local06, #24
1818c     1F 24 46 F0 | 	shr	local04, #31
18190     10 13 02 F6 | 	mov	arg01, local02
18194     09 FB 01 F6 | 	mov	result1, arg01
18198     FD 2A 02 F6 | 	mov	local07, result1
1819c     15 2D 02 F6 | 	mov	local08, local07
181a0     16 2C 46 F7 | 	zerox	local08, #22
181a4     15 2F 02 F6 | 	mov	local09, local07
181a8     01 2E 66 F0 | 	shl	local09, #1
181ac     18 2E 46 F0 | 	shr	local09, #24
181b0     17 31 02 F6 | 	mov	local10, local09
181b4     1F 2A 46 F0 | 	shr	local07, #31
181b8     00 32 06 F6 | 	mov	local11, #0
181bc     00 34 06 F6 | 	mov	local12, #0
181c0     18 29 12 F2 | 	cmp	local06, local10 wc
181c4     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
181c8     2C 00 90 1D |  if_a	jmp	#LR__2330
181cc     16 27 12 32 |  if_ae	cmp	local05, local08 wc
181d0     24 00 90 3D |  if_ae	jmp	#LR__2330
181d4     13 37 02 F6 | 	mov	local13, local05
181d8     16 27 02 F6 | 	mov	local05, local08
181dc     1B 2D 02 F6 | 	mov	local08, local13
181e0     14 37 02 F6 | 	mov	local13, local06
181e4     18 29 02 F6 | 	mov	local06, local10
181e8     1B 31 02 F6 | 	mov	local10, local13
181ec     12 37 02 F6 | 	mov	local13, local04
181f0     15 25 02 F6 | 	mov	local04, local07
181f4     1B 2B 02 F6 | 	mov	local07, local13
181f8                 | LR__2330
181f8     FF 28 0E F2 | 	cmp	local06, #255 wz
181fc     70 01 90 AD |  if_e	jmp	#LR__2345
18200     00 28 0E F2 | 	cmp	local06, #0 wz
18204     AC 01 90 AD |  if_e	jmp	#LR__2347
18208     17 26 26 F4 | 	bith	local05, #23
1820c                 | LR__2331
1820c     00 30 0E F2 | 	cmp	local10, #0 wz
18210     F0 01 90 AD |  if_e	jmp	#LR__2351
18214     17 2C 26 F4 | 	bith	local08, #23
18218                 | LR__2332
18218     7F 28 86 F1 | 	sub	local06, #127
1821c     7F 30 86 F1 | 	sub	local10, #127
18220     14 39 02 F6 | 	mov	local14, local06
18224     18 39 82 F1 | 	sub	local14, local10
18228     97 14 48 FB | 	callpa	#(@LR__2334-@LR__2333)>>2,fcache_load_ptr_
1822c                 | LR__2333
1822c     20 38 56 F2 | 	cmps	local14, #32 wc
18230     20 00 90 CD |  if_b	jmp	#LR__2335
18234     16 2F 02 F6 | 	mov	local09, local08
18238     00 32 0E F2 | 	cmp	local11, #0 wz
1823c     6F 32 62 FD | 	wrnz	local11
18240     19 2F 42 F5 | 	or	local09, local11
18244     17 33 02 F6 | 	mov	local11, local09
18248     00 2C 06 F6 | 	mov	local08, #0
1824c     20 38 86 F1 | 	sub	local14, #32
18250     D8 FF 9F FD | 	jmp	#LR__2333
18254                 | LR__2334
18254                 | LR__2335
18254     00 38 0E F2 | 	cmp	local14, #0 wz
18258     38 00 90 AD |  if_e	jmp	#LR__2336
1825c     16 37 02 F6 | 	mov	local13, local08
18260     20 30 06 F6 | 	mov	local10, #32
18264     1C 31 82 F1 | 	sub	local10, local14
18268     18 37 62 F0 | 	shl	local13, local10
1826c     19 31 02 F6 | 	mov	local10, local11
18270     20 2E 06 F6 | 	mov	local09, #32
18274     1C 2F 82 F1 | 	sub	local09, local14
18278     17 31 6A F0 | 	shl	local10, local09 wz
1827c     1C 33 42 F0 | 	shr	local11, local14
18280     1C 2D 42 F0 | 	shr	local08, local14
18284     1B 33 42 F5 | 	or	local11, local13
18288     00 3A 06 F6 | 	mov	local15, #0
1828c     01 3A 06 56 |  if_ne	mov	local15, #1
18290     1D 33 42 F5 | 	or	local11, local15
18294                 | LR__2336
18294     12 3B 02 F6 | 	mov	local15, local04
18298     15 3B 62 F5 | 	xor	local15, local07
1829c     01 3A CE F7 | 	test	local15, #1 wz
182a0     18 00 90 AD |  if_e	jmp	#LR__2337
182a4     16 2D 22 F6 | 	not	local08, local08
182a8     19 33 22 F6 | 	not	local11, local11
182ac     01 32 0E F1 | 	add	local11, #1 wz
182b0     00 3A 06 F6 | 	mov	local15, #0
182b4     01 3A 06 A6 |  if_e	mov	local15, #1
182b8     1D 2D 02 F1 | 	add	local08, local15
182bc                 | LR__2337
182bc     19 35 12 F1 | 	add	local12, local11 wc
182c0     16 27 22 F1 | 	addx	local05, local08
182c4     00 26 56 F2 | 	cmps	local05, #0 wc
182c8     1C 00 90 3D |  if_ae	jmp	#LR__2338
182cc     01 24 66 F5 | 	xor	local04, #1
182d0     13 27 22 F6 | 	not	local05, local05
182d4     1A 35 22 F6 | 	not	local12, local12
182d8     01 34 0E F1 | 	add	local12, #1 wz
182dc     00 3A 06 F6 | 	mov	local15, #0
182e0     01 3A 06 A6 |  if_e	mov	local15, #1
182e4     1D 27 02 F1 | 	add	local05, local15
182e8                 | LR__2338
182e8     00 80 00 FF 
182ec     00 26 16 F2 | 	cmp	local05, ##16777216 wc
182f0     28 00 90 CD |  if_b	jmp	#LR__2339
182f4     01 28 06 F1 | 	add	local06, #1
182f8     1A 39 02 F6 | 	mov	local14, local12
182fc     01 38 06 F5 | 	and	local14, #1
18300     01 34 46 F0 | 	shr	local12, #1
18304     13 3B 02 F6 | 	mov	local15, local05
18308     1F 3A 66 F0 | 	shl	local15, #31
1830c     1D 35 42 F5 | 	or	local12, local15
18310     1C 35 42 F5 | 	or	local12, local14
18314     01 26 46 F0 | 	shr	local05, #1
18318     3C 00 90 FD | 	jmp	#LR__2344
1831c                 | LR__2339
1831c     00 40 00 FF 
18320     00 26 16 F2 | 	cmp	local05, ##8388608 wc
18324     30 00 90 3D |  if_ae	jmp	#LR__2343
18328     00 26 0E F2 | 	cmp	local05, #0 wz
1832c     00 34 0E A2 |  if_e	cmp	local12, #0 wz
18330     08 24 46 A5 |  if_e	or	local04, #8
18334     01 24 26 A5 |  if_e	andn	local04, #1
18338     1C 00 90 AD |  if_e	jmp	#LR__2342
1833c                 | LR__2340
1833c     00 40 00 FF 
18340     00 26 16 F2 | 	cmp	local05, ##8388608 wc
18344     10 00 90 3D |  if_ae	jmp	#LR__2341
18348     1A 35 12 F1 | 	add	local12, local12 wc
1834c     13 27 22 F1 | 	addx	local05, local05
18350     01 28 86 F1 | 	sub	local06, #1
18354     E4 FF 9F FD | 	jmp	#LR__2340
18358                 | LR__2341
18358                 | LR__2342
18358                 | LR__2343
18358                 | LR__2344
18358     13 13 02 F6 | 	mov	arg01, local05
1835c     1A 15 02 F6 | 	mov	arg02, local12
18360     14 17 02 F6 | 	mov	arg03, local06
18364     12 19 02 F6 | 	mov	arg04, local04
18368     38 30 B0 FD | 	call	#__system__pack_0438
1836c     DC 00 90 FD | 	jmp	#LR__2355
18370                 | LR__2345
18370     FF 30 0E F2 | 	cmp	local10, #255 wz
18374     10 00 90 5D |  if_ne	jmp	#LR__2346
18378     12 2B 0A F2 | 	cmp	local07, local04 wz
1837c     00 F8 3F 5F 
18380     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
18384     C4 00 90 5D |  if_ne	jmp	#LR__2355
18388                 | LR__2346
18388     00 26 0E F2 | 	cmp	local05, #0 wz
1838c     00 F8 3F 5F 
18390     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
18394     B4 00 90 5D |  if_ne	jmp	#LR__2355
18398     1A 15 02 F6 | 	mov	arg02, local12
1839c     14 17 02 F6 | 	mov	arg03, local06
183a0     12 19 02 F6 | 	mov	arg04, local04
183a4     02 18 46 F5 | 	or	arg04, #2
183a8     13 13 02 F6 | 	mov	arg01, local05
183ac     F4 2F B0 FD | 	call	#__system__pack_0438
183b0     98 00 90 FD | 	jmp	#LR__2355
183b4                 | LR__2347
183b4     00 26 0E F2 | 	cmp	local05, #0 wz
183b8     28 00 90 AD |  if_e	jmp	#LR__2350
183bc     01 26 66 F0 | 	shl	local05, #1
183c0     97 0E 48 FB | 	callpa	#(@LR__2349-@LR__2348)>>2,fcache_load_ptr_
183c4                 | LR__2348
183c4     00 40 00 FF 
183c8     00 26 16 F2 | 	cmp	local05, ##8388608 wc
183cc     14 3B 02 C6 |  if_b	mov	local15, local06
183d0     01 3A 86 C1 |  if_b	sub	local15, #1
183d4     1D 29 02 C6 |  if_b	mov	local06, local15
183d8     01 26 66 C0 |  if_b	shl	local05, #1
183dc     E4 FF 9F CD |  if_b	jmp	#LR__2348
183e0                 | LR__2349
183e0     28 FE 9F FD | 	jmp	#LR__2331
183e4                 | LR__2350
183e4     15 25 02 F5 | 	and	local04, local07
183e8     12 19 02 F6 | 	mov	arg04, local04
183ec     08 18 46 F5 | 	or	arg04, #8
183f0     00 12 06 F6 | 	mov	arg01, #0
183f4     00 14 06 F6 | 	mov	arg02, #0
183f8     00 16 06 F6 | 	mov	arg03, #0
183fc     A4 2F B0 FD | 	call	#__system__pack_0438
18400     48 00 90 FD | 	jmp	#LR__2355
18404                 | LR__2351
18404     00 2C 0E F2 | 	cmp	local08, #0 wz
18408     28 00 90 AD |  if_e	jmp	#LR__2354
1840c     01 2C 66 F0 | 	shl	local08, #1
18410     97 0E 48 FB | 	callpa	#(@LR__2353-@LR__2352)>>2,fcache_load_ptr_
18414                 | LR__2352
18414     00 40 00 FF 
18418     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
1841c     18 3B 02 C6 |  if_b	mov	local15, local10
18420     01 3A 86 C1 |  if_b	sub	local15, #1
18424     1D 31 02 C6 |  if_b	mov	local10, local15
18428     01 2C 66 C0 |  if_b	shl	local08, #1
1842c     E4 FF 9F CD |  if_b	jmp	#LR__2352
18430                 | LR__2353
18430     E4 FD 9F FD | 	jmp	#LR__2332
18434                 | LR__2354
18434     7F 28 86 F1 | 	sub	local06, #127
18438     13 13 02 F6 | 	mov	arg01, local05
1843c     1A 15 02 F6 | 	mov	arg02, local12
18440     14 17 02 F6 | 	mov	arg03, local06
18444     12 19 02 F6 | 	mov	arg04, local04
18448     58 2F B0 FD | 	call	#__system__pack_0438
1844c                 | LR__2355
1844c     A7 F0 03 F6 | 	mov	ptra, fp
18450     B2 00 A0 FD | 	call	#popregs_
18454                 | __system___float_add_ret
18454     2D 00 64 FD | 	ret
18458                 | 
18458                 | __system___float_mul
18458     0B 4A 05 F6 | 	mov	COUNT_, #11
1845c     A8 00 A0 FD | 	call	#pushregs_
18460     09 1F 02 F6 | 	mov	local01, arg01
18464     0A 21 02 F6 | 	mov	local02, arg02
18468     0F 23 02 F6 | 	mov	local03, local01
1846c     11 25 02 F6 | 	mov	local04, local03
18470     16 24 46 F7 | 	zerox	local04, #22
18474     11 27 02 F6 | 	mov	local05, local03
18478     01 26 66 F0 | 	shl	local05, #1
1847c     18 26 46 F0 | 	shr	local05, #24
18480     1F 22 46 F0 | 	shr	local03, #31
18484     10 FB 01 F6 | 	mov	result1, local02
18488     FD 28 02 F6 | 	mov	local06, result1
1848c     14 2B 02 F6 | 	mov	local07, local06
18490     16 2A 46 F7 | 	zerox	local07, #22
18494     14 2D 02 F6 | 	mov	local08, local06
18498     01 2C 66 F0 | 	shl	local08, #1
1849c     18 2C 46 F0 | 	shr	local08, #24
184a0     1F 28 46 F0 | 	shr	local06, #31
184a4     14 23 62 F5 | 	xor	local03, local06
184a8     FF 26 0E F2 | 	cmp	local05, #255 wz
184ac     90 00 90 AD |  if_e	jmp	#LR__2363
184b0     FF 2C 0E F2 | 	cmp	local08, #255 wz
184b4     D8 00 90 AD |  if_e	jmp	#LR__2365
184b8     00 26 0E F2 | 	cmp	local05, #0 wz
184bc     0C 01 90 AD |  if_e	jmp	#LR__2366
184c0     17 24 26 F4 | 	bith	local04, #23
184c4                 | LR__2360
184c4     00 2C 0E F2 | 	cmp	local08, #0 wz
184c8     44 01 90 AD |  if_e	jmp	#LR__2370
184cc     17 2A 26 F4 | 	bith	local07, #23
184d0                 | LR__2361
184d0     12 21 02 F6 | 	mov	local02, local04
184d4     04 20 66 F0 | 	shl	local02, #4
184d8     15 29 02 F6 | 	mov	local06, local07
184dc     05 28 66 F0 | 	shl	local06, #5
184e0     14 21 02 FD | 	qmul	local02, local06
184e4     16 27 02 F1 | 	add	local05, local08
184e8     FE 26 86 F1 | 	sub	local05, #254
184ec     13 2F 02 F6 | 	mov	local09, local05
184f0     04 24 66 F0 | 	shl	local04, #4
184f4     05 2A 66 F0 | 	shl	local07, #5
184f8     18 30 62 FD | 	getqx	local10
184fc     15 25 02 FD | 	qmul	local04, local07
18500     19 32 62 FD | 	getqy	local11
18504     00 80 00 FF 
18508     00 32 16 F2 | 	cmp	local11, ##16777216 wc
1850c     18 00 90 CD |  if_b	jmp	#LR__2362
18510     01 2E 06 F1 | 	add	local09, #1
18514     01 30 46 F0 | 	shr	local10, #1
18518     19 2D 02 F6 | 	mov	local08, local11
1851c     1F 2C 66 F0 | 	shl	local08, #31
18520     16 31 42 F5 | 	or	local10, local08
18524     01 32 46 F0 | 	shr	local11, #1
18528                 | LR__2362
18528     19 13 02 F6 | 	mov	arg01, local11
1852c     18 15 02 F6 | 	mov	arg02, local10
18530     17 17 02 F6 | 	mov	arg03, local09
18534     11 19 02 F6 | 	mov	arg04, local03
18538     68 2E B0 FD | 	call	#__system__pack_0438
1853c     10 01 90 FD | 	jmp	#LR__2374
18540                 | LR__2363
18540     00 24 0E F2 | 	cmp	local04, #0 wz
18544     0F FB 01 56 |  if_ne	mov	result1, local01
18548     04 01 90 5D |  if_ne	jmp	#LR__2374
1854c     FF 2C 56 F2 | 	cmps	local08, #255 wc
18550     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
18554     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
18558     18 00 90 4D |  if_c_and_nz	jmp	#LR__2364
1855c     00 F8 3F CF 
18560     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
18564     E8 00 90 CD |  if_b	jmp	#LR__2374
18568     00 2A 0E F2 | 	cmp	local07, #0 wz
1856c     10 FB 01 56 |  if_ne	mov	result1, local02
18570     DC 00 90 5D |  if_ne	jmp	#LR__2374
18574                 | LR__2364
18574     02 22 46 F5 | 	or	local03, #2
18578     00 12 06 F6 | 	mov	arg01, #0
1857c     00 14 06 F6 | 	mov	arg02, #0
18580     13 17 02 F6 | 	mov	arg03, local05
18584     11 19 02 F6 | 	mov	arg04, local03
18588     18 2E B0 FD | 	call	#__system__pack_0438
1858c     C0 00 90 FD | 	jmp	#LR__2374
18590                 | LR__2365
18590     00 26 0E F2 | 	cmp	local05, #0 wz
18594     00 24 0E A2 |  if_e	cmp	local04, #0 wz
18598     00 F8 3F AF 
1859c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
185a0     AC 00 90 AD |  if_e	jmp	#LR__2374
185a4     00 2A 0E F2 | 	cmp	local07, #0 wz
185a8     10 FB 01 56 |  if_ne	mov	result1, local02
185ac     A0 00 90 5D |  if_ne	jmp	#LR__2374
185b0     16 17 02 F6 | 	mov	arg03, local08
185b4     11 19 02 F6 | 	mov	arg04, local03
185b8     02 18 46 F5 | 	or	arg04, #2
185bc     00 12 06 F6 | 	mov	arg01, #0
185c0     00 14 06 F6 | 	mov	arg02, #0
185c4     DC 2D B0 FD | 	call	#__system__pack_0438
185c8     84 00 90 FD | 	jmp	#LR__2374
185cc                 | LR__2366
185cc     00 24 0E F2 | 	cmp	local04, #0 wz
185d0     20 00 90 AD |  if_e	jmp	#LR__2369
185d4     01 24 66 F0 | 	shl	local04, #1
185d8     97 0A 48 FB | 	callpa	#(@LR__2368-@LR__2367)>>2,fcache_load_ptr_
185dc                 | LR__2367
185dc     00 40 00 FF 
185e0     00 24 16 F2 | 	cmp	local04, ##8388608 wc
185e4     01 26 86 C1 |  if_b	sub	local05, #1
185e8     01 24 66 C0 |  if_b	shl	local04, #1
185ec     EC FF 9F CD |  if_b	jmp	#LR__2367
185f0                 | LR__2368
185f0     D0 FE 9F FD | 	jmp	#LR__2360
185f4                 | LR__2369
185f4     08 22 46 F5 | 	or	local03, #8
185f8     00 12 06 F6 | 	mov	arg01, #0
185fc     00 14 06 F6 | 	mov	arg02, #0
18600     00 16 06 F6 | 	mov	arg03, #0
18604     11 19 02 F6 | 	mov	arg04, local03
18608     98 2D B0 FD | 	call	#__system__pack_0438
1860c     40 00 90 FD | 	jmp	#LR__2374
18610                 | LR__2370
18610     00 2A 0E F2 | 	cmp	local07, #0 wz
18614     20 00 90 AD |  if_e	jmp	#LR__2373
18618     01 2A 66 F0 | 	shl	local07, #1
1861c     97 0A 48 FB | 	callpa	#(@LR__2372-@LR__2371)>>2,fcache_load_ptr_
18620                 | LR__2371
18620     00 40 00 FF 
18624     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
18628     01 2C 86 C1 |  if_b	sub	local08, #1
1862c     01 2A 66 C0 |  if_b	shl	local07, #1
18630     EC FF 9F CD |  if_b	jmp	#LR__2371
18634                 | LR__2372
18634     98 FE 9F FD | 	jmp	#LR__2361
18638                 | LR__2373
18638     08 22 46 F5 | 	or	local03, #8
1863c     00 12 06 F6 | 	mov	arg01, #0
18640     00 14 06 F6 | 	mov	arg02, #0
18644     00 16 06 F6 | 	mov	arg03, #0
18648     11 19 02 F6 | 	mov	arg04, local03
1864c     54 2D B0 FD | 	call	#__system__pack_0438
18650                 | LR__2374
18650     A7 F0 03 F6 | 	mov	ptra, fp
18654     B2 00 A0 FD | 	call	#popregs_
18658                 | __system___float_mul_ret
18658     2D 00 64 FD | 	ret
1865c                 | 
1865c                 | __system___float_div
1865c     0E 4A 05 F6 | 	mov	COUNT_, #14
18660     A8 00 A0 FD | 	call	#pushregs_
18664     09 23 02 F6 | 	mov	local03, arg01
18668     0A 25 02 F6 | 	mov	local04, arg02
1866c     11 27 02 F6 | 	mov	local05, local03
18670     13 29 02 F6 | 	mov	local06, local05
18674     16 28 46 F7 | 	zerox	local06, #22
18678     13 2B 02 F6 | 	mov	local07, local05
1867c     01 2A 66 F0 | 	shl	local07, #1
18680     18 2A 46 F0 | 	shr	local07, #24
18684     1F 26 46 F0 | 	shr	local05, #31
18688     12 FB 01 F6 | 	mov	result1, local04
1868c     FD 2C 02 F6 | 	mov	local08, result1
18690     16 2F 02 F6 | 	mov	local09, local08
18694     16 2E 46 F7 | 	zerox	local09, #22
18698     16 31 02 F6 | 	mov	local10, local08
1869c     01 30 66 F0 | 	shl	local10, #1
186a0     18 30 46 F0 | 	shr	local10, #24
186a4     1F 2C 46 F0 | 	shr	local08, #31
186a8     16 27 62 F5 | 	xor	local05, local08
186ac     FF 2A 0E F2 | 	cmp	local07, #255 wz
186b0     D4 00 90 AD |  if_e	jmp	#LR__2385
186b4     FF 30 0E F2 | 	cmp	local10, #255 wz
186b8     04 01 90 AD |  if_e	jmp	#LR__2386
186bc     00 2A 0E F2 | 	cmp	local07, #0 wz
186c0     24 01 90 AD |  if_e	jmp	#LR__2387
186c4     17 28 26 F4 | 	bith	local06, #23
186c8                 | LR__2380
186c8     00 30 0E F2 | 	cmp	local10, #0 wz
186cc     70 01 90 AD |  if_e	jmp	#LR__2391
186d0     17 2E 26 F4 | 	bith	local09, #23
186d4                 | LR__2381
186d4     18 2B 82 F1 | 	sub	local07, local10
186d8     15 33 02 F6 | 	mov	local11, local07
186dc     14 13 02 F6 | 	mov	arg01, local06
186e0     02 12 46 F0 | 	shr	arg01, #2
186e4     1E 28 66 F0 | 	shl	local06, #30
186e8     14 15 02 F6 | 	mov	arg02, local06
186ec     17 17 02 F6 | 	mov	arg03, local09
186f0     28 12 62 FD | 	setq	arg01
186f4     0B 15 12 FD | 	qdiv	arg02, arg03
186f8     00 34 06 F6 | 	mov	local12, #0
186fc     18 1E 62 FD | 	getqx	local01
18700     19 FC 61 FD | 	getqy	result2
18704     FE 20 02 F6 | 	mov	local02, result2
18708     0F 37 02 F6 | 	mov	local13, local01
1870c     00 20 4E F2 | 	cmps	local02, #0 wz
18710     1B 39 02 F6 | 	mov	local14, local13
18714     19 38 66 F0 | 	shl	local14, #25
18718     01 34 06 56 |  if_ne	mov	local12, #1
1871c     1A 39 42 F5 | 	or	local14, local12
18720     07 36 46 F0 | 	shr	local13, #7
18724     00 80 00 FF 
18728     00 36 16 F2 | 	cmp	local13, ##16777216 wc
1872c     1C 00 90 CD |  if_b	jmp	#LR__2382
18730     01 32 06 F1 | 	add	local11, #1
18734     01 38 46 F0 | 	shr	local14, #1
18738     1B 35 02 F6 | 	mov	local12, local13
1873c     1F 34 66 F0 | 	shl	local12, #31
18740     1A 39 42 F5 | 	or	local14, local12
18744     01 36 46 F0 | 	shr	local13, #1
18748     24 00 90 FD | 	jmp	#LR__2384
1874c                 | LR__2382
1874c     00 40 00 FF 
18750     00 36 16 F2 | 	cmp	local13, ##8388608 wc
18754     18 00 90 3D |  if_ae	jmp	#LR__2383
18758     01 32 86 F1 | 	sub	local11, #1
1875c     01 36 66 F0 | 	shl	local13, #1
18760     1C 35 02 F6 | 	mov	local12, local14
18764     1F 34 46 F0 | 	shr	local12, #31
18768     1A 37 42 F5 | 	or	local13, local12
1876c     01 38 66 F0 | 	shl	local14, #1
18770                 | LR__2383
18770                 | LR__2384
18770     1B 13 02 F6 | 	mov	arg01, local13
18774     1C 15 02 F6 | 	mov	arg02, local14
18778     19 17 02 F6 | 	mov	arg03, local11
1877c     13 19 02 F6 | 	mov	arg04, local05
18780     20 2C B0 FD | 	call	#__system__pack_0438
18784     F8 00 90 FD | 	jmp	#LR__2395
18788                 | LR__2385
18788     00 28 0E F2 | 	cmp	local06, #0 wz
1878c     11 FB 01 56 |  if_ne	mov	result1, local03
18790     EC 00 90 5D |  if_ne	jmp	#LR__2395
18794     FF 30 0E F2 | 	cmp	local10, #255 wz
18798     00 F8 3F AF 
1879c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
187a0     DC 00 90 AD |  if_e	jmp	#LR__2395
187a4     02 26 46 F5 | 	or	local05, #2
187a8     00 12 06 F6 | 	mov	arg01, #0
187ac     00 14 06 F6 | 	mov	arg02, #0
187b0     15 17 02 F6 | 	mov	arg03, local07
187b4     13 19 02 F6 | 	mov	arg04, local05
187b8     E8 2B B0 FD | 	call	#__system__pack_0438
187bc     C0 00 90 FD | 	jmp	#LR__2395
187c0                 | LR__2386
187c0     00 2E 0E F2 | 	cmp	local09, #0 wz
187c4     12 FB 01 56 |  if_ne	mov	result1, local04
187c8     B4 00 90 5D |  if_ne	jmp	#LR__2395
187cc     13 19 02 F6 | 	mov	arg04, local05
187d0     08 18 46 F5 | 	or	arg04, #8
187d4     00 12 06 F6 | 	mov	arg01, #0
187d8     00 14 06 F6 | 	mov	arg02, #0
187dc     00 16 06 F6 | 	mov	arg03, #0
187e0     C0 2B B0 FD | 	call	#__system__pack_0438
187e4     98 00 90 FD | 	jmp	#LR__2395
187e8                 | LR__2387
187e8     00 28 0E F2 | 	cmp	local06, #0 wz
187ec     20 00 90 AD |  if_e	jmp	#LR__2390
187f0     01 28 66 F0 | 	shl	local06, #1
187f4     97 0A 48 FB | 	callpa	#(@LR__2389-@LR__2388)>>2,fcache_load_ptr_
187f8                 | LR__2388
187f8     00 40 00 FF 
187fc     00 28 16 F2 | 	cmp	local06, ##8388608 wc
18800     01 2A 86 C1 |  if_b	sub	local07, #1
18804     01 28 66 C0 |  if_b	shl	local06, #1
18808     EC FF 9F CD |  if_b	jmp	#LR__2388
1880c                 | LR__2389
1880c     B8 FE 9F FD | 	jmp	#LR__2380
18810                 | LR__2390
18810     00 30 0E F2 | 	cmp	local10, #0 wz
18814     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
18818     00 F8 3F AF 
1881c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
18820     5C 00 90 AD |  if_e	jmp	#LR__2395
18824     13 19 02 F6 | 	mov	arg04, local05
18828     08 18 46 F5 | 	or	arg04, #8
1882c     00 12 06 F6 | 	mov	arg01, #0
18830     00 14 06 F6 | 	mov	arg02, #0
18834     00 16 06 F6 | 	mov	arg03, #0
18838     68 2B B0 FD | 	call	#__system__pack_0438
1883c     40 00 90 FD | 	jmp	#LR__2395
18840                 | LR__2391
18840     00 2E 0E F2 | 	cmp	local09, #0 wz
18844     20 00 90 AD |  if_e	jmp	#LR__2394
18848     01 2E 66 F0 | 	shl	local09, #1
1884c     97 0A 48 FB | 	callpa	#(@LR__2393-@LR__2392)>>2,fcache_load_ptr_
18850                 | LR__2392
18850     00 40 00 FF 
18854     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
18858     01 30 86 C1 |  if_b	sub	local10, #1
1885c     01 2E 66 C0 |  if_b	shl	local09, #1
18860     EC FF 9F CD |  if_b	jmp	#LR__2392
18864                 | LR__2393
18864     6C FE 9F FD | 	jmp	#LR__2381
18868                 | LR__2394
18868     02 26 46 F5 | 	or	local05, #2
1886c     00 12 06 F6 | 	mov	arg01, #0
18870     00 14 06 F6 | 	mov	arg02, #0
18874     00 16 06 F6 | 	mov	arg03, #0
18878     13 19 02 F6 | 	mov	arg04, local05
1887c     24 2B B0 FD | 	call	#__system__pack_0438
18880                 | LR__2395
18880     A7 F0 03 F6 | 	mov	ptra, fp
18884     B2 00 A0 FD | 	call	#popregs_
18888                 | __system___float_div_ret
18888     2D 00 64 FD | 	ret
1888c                 | 
1888c                 | __system___float_cmp
1888c     00 C0 3F FF 
18890     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
18894     00 C0 3F CF 
18898     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
1889c     0B FB 01 36 |  if_ae	mov	result1, arg03
188a0     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
188a4     00 C0 7F FF 
188a8     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
188ac     00 C0 7F CF 
188b0     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
188b4     0B FB 01 36 |  if_ae	mov	result1, arg03
188b8     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
188bc     00 12 56 F2 | 	cmps	arg01, #0 wc
188c0     2C 00 90 3D |  if_ae	jmp	#LR__2400
188c4     00 14 56 F2 | 	cmps	arg02, #0 wc
188c8     0A FB 01 C6 |  if_b	mov	result1, arg02
188cc     09 FB 81 C1 |  if_b	sub	result1, arg01
188d0     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
188d4     00 14 0E F2 | 	cmp	arg02, #0 wz
188d8     00 00 40 AF 
188dc     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
188e0     00 FA 05 A6 |  if_e	mov	result1, #0
188e4     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
188e8     01 FA 65 F6 | 	neg	result1, #1
188ec     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
188f0                 | LR__2400
188f0     00 14 56 F2 | 	cmps	arg02, #0 wc
188f4     1C 00 90 3D |  if_ae	jmp	#LR__2401
188f8     00 12 0E F2 | 	cmp	arg01, #0 wz
188fc     00 00 40 AF 
18900     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
18904     00 FA 05 A6 |  if_e	mov	result1, #0
18908     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1890c     01 FA 05 F6 | 	mov	result1, #1
18910     08 00 90 FD | 	jmp	#__system___float_cmp_ret
18914                 | LR__2401
18914     0A 13 82 F1 | 	sub	arg01, arg02
18918     09 FB 01 F6 | 	mov	result1, arg01
1891c                 | __system___float_cmp_ret
1891c     2D 00 64 FD | 	ret
18920                 | 
18920                 | __system___float_tointeger
18920     02 4A 05 F6 | 	mov	COUNT_, #2
18924     A8 00 A0 FD | 	call	#pushregs_
18928     50 00 B0 FD | 	call	#__system___float_Unpack
1892c     FF FF 7F FF 
18930     FF FD 55 F2 | 	cmps	result2, ##-1 wc
18934     34 00 90 CD |  if_b	jmp	#LR__2410
18938     1F FC 55 F2 | 	cmps	result2, #31 wc
1893c     2C 00 90 3D |  if_ae	jmp	#LR__2410
18940     02 FE 65 F0 | 	shl	result3, #2
18944     1E 1E 06 F6 | 	mov	local01, #30
18948     FE 1E 82 F1 | 	sub	local01, result2
1894c     0F FF 41 F0 | 	shr	result3, local01
18950     FF 20 02 F6 | 	mov	local02, result3
18954     0A 21 02 F1 | 	add	local02, arg02
18958     01 20 46 F0 | 	shr	local02, #1
1895c     00 FA 0D F2 | 	cmp	result1, #0 wz
18960     10 21 62 56 |  if_ne	neg	local02, local02
18964     10 FB 01 F6 | 	mov	result1, local02
18968     04 00 90 FD | 	jmp	#LR__2411
1896c                 | LR__2410
1896c     00 FA 05 F6 | 	mov	result1, #0
18970                 | LR__2411
18970     A7 F0 03 F6 | 	mov	ptra, fp
18974     B2 00 A0 FD | 	call	#popregs_
18978                 | __system___float_tointeger_ret
18978     2D 00 64 FD | 	ret
1897c                 | 
1897c                 | __system___float_Unpack
1897c     09 01 02 F6 | 	mov	_var01, arg01
18980     1F 00 46 F0 | 	shr	_var01, #31
18984     09 03 02 F6 | 	mov	_var02, arg01
18988     01 02 66 F0 | 	shl	_var02, #1
1898c     18 02 4E F0 | 	shr	_var02, #24 wz
18990     17 13 06 F4 | 	bitl	arg01, #279
18994     06 12 66 50 |  if_ne	shl	arg01, #6
18998     1D 12 26 54 |  if_ne	bith	arg01, #29
1899c     1C 00 90 5D |  if_ne	jmp	#LR__2420
189a0     09 05 92 F7 | 	encod	_var03, arg01 wc
189a4     01 04 06 C1 |  if_b	add	_var03, #1
189a8     17 04 86 F1 | 	sub	_var03, #23
189ac     02 03 02 F6 | 	mov	_var02, _var03
189b0     07 FC 05 F6 | 	mov	result2, #7
189b4     02 FD 81 F1 | 	sub	result2, _var03
189b8     FE 12 62 F0 | 	shl	arg01, result2
189bc                 | LR__2420
189bc     7F 02 86 F1 | 	sub	_var02, #127
189c0     09 FF 01 F6 | 	mov	result3, arg01
189c4     00 FB 01 F6 | 	mov	result1, _var01
189c8     01 FD 01 F6 | 	mov	result2, _var02
189cc                 | __system___float_Unpack_ret
189cc     2D 00 64 FD | 	ret
189d0                 | 
189d0                 | __system___float_Pack
189d0     00 00 06 F6 | 	mov	_var01, #0
189d4     00 16 0E F2 | 	cmp	arg03, #0 wz
189d8     8C 00 90 AD |  if_e	jmp	#LR__2431
189dc     0B 03 92 F7 | 	encod	_var02, arg03 wc
189e0     01 02 06 C1 |  if_b	add	_var02, #1
189e4     21 00 06 F6 | 	mov	_var01, #33
189e8     01 01 82 F1 | 	sub	_var01, _var02
189ec     00 17 62 F0 | 	shl	arg03, _var01
189f0     03 02 06 F6 | 	mov	_var02, #3
189f4     00 03 82 F1 | 	sub	_var02, _var01
189f8     01 15 02 F1 | 	add	arg02, _var02
189fc     0A 05 02 F6 | 	mov	_var03, arg02
18a00     00 17 06 F1 | 	add	arg03, #256
18a04     0B 03 02 F6 | 	mov	_var02, arg03
18a08     FF 02 2E F5 | 	andn	_var02, #255 wz
18a0c     01 04 06 A1 |  if_e	add	_var03, #1
18a10     7F 04 06 F1 | 	add	_var03, #127
18a14     FF FF 7F FF 
18a18     E9 05 46 F3 | 	fges	_var03, ##-23
18a1c     FF 04 66 F3 | 	fles	_var03, #255
18a20     01 04 56 F2 | 	cmps	_var03, #1 wc
18a24     1C 00 90 3D |  if_ae	jmp	#LR__2430
18a28     01 16 46 F0 | 	shr	arg03, #1
18a2c     1F 02 C6 F9 | 	decod	_var02, #31
18a30     0B 03 02 F1 | 	add	_var02, arg03
18a34     02 05 62 F6 | 	neg	_var03, _var03
18a38     02 03 42 F0 | 	shr	_var02, _var03
18a3c     01 17 02 F6 | 	mov	arg03, _var02
18a40     00 04 06 F6 | 	mov	_var03, #0
18a44                 | LR__2430
18a44     09 FB 01 F6 | 	mov	result1, arg01
18a48     1F FA 65 F0 | 	shl	result1, #31
18a4c     02 03 02 F6 | 	mov	_var02, _var03
18a50     17 02 66 F0 | 	shl	_var02, #23
18a54     01 FB 41 F5 | 	or	result1, _var02
18a58     0B 07 02 F6 | 	mov	_var04, arg03
18a5c     09 06 46 F0 | 	shr	_var04, #9
18a60     03 FB 41 F5 | 	or	result1, _var04
18a64     04 00 90 FD | 	jmp	#__system___float_Pack_ret
18a68                 | LR__2431
18a68     00 FB 01 F6 | 	mov	result1, _var01
18a6c                 | __system___float_Pack_ret
18a6c     2D 00 64 FD | 	ret
18a70                 | 
18a70                 | __system___basic_print_float
18a70     05 4A 05 F6 | 	mov	COUNT_, #5
18a74     A8 00 A0 FD | 	call	#pushregs_
18a78     09 1F 02 F6 | 	mov	local01, arg01
18a7c     0A 21 02 F6 | 	mov	local02, arg02
18a80     0B 23 0A F6 | 	mov	local03, arg03 wz
18a84     0C 25 02 F6 | 	mov	local04, arg04
18a88     14 00 90 5D |  if_ne	jmp	#LR__2440
18a8c     23 24 0E F2 | 	cmp	local04, #35 wz
18a90     80 02 10 AF 
18a94     00 26 06 A6 |  if_e	mov	local05, ##537198592
18a98     1D 26 C6 59 |  if_ne	decod	local05, #29
18a9c     13 23 02 F6 | 	mov	local03, local05
18aa0                 | LR__2440
18aa0     0F 13 02 F6 | 	mov	arg01, local01
18aa4     C8 24 B0 FD | 	call	#__system___gettxfunc
18aa8     FD 26 0A F6 | 	mov	local05, result1 wz
18aac     00 FA 05 A6 |  if_e	mov	result1, #0
18ab0     13 13 02 56 |  if_ne	mov	arg01, local05
18ab4     11 15 02 56 |  if_ne	mov	arg02, local03
18ab8     10 17 02 56 |  if_ne	mov	arg03, local02
18abc     12 19 02 56 |  if_ne	mov	arg04, local04
18ac0     68 E1 BF 5D |  if_ne	call	#__system___fmtfloat
18ac4     A7 F0 03 F6 | 	mov	ptra, fp
18ac8     B2 00 A0 FD | 	call	#popregs_
18acc                 | __system___basic_print_float_ret
18acc     2D 00 64 FD | 	ret
18ad0                 | 
18ad0                 | __system____builtin_atoi
18ad0     07 4A 05 F6 | 	mov	COUNT_, #7
18ad4     A8 00 A0 FD | 	call	#pushregs_
18ad8                 | __system____builtin_atoi_enter
18ad8     09 1F 02 F6 | 	mov	local01, arg01
18adc     0A 21 02 F6 | 	mov	local02, arg02
18ae0     00 22 06 F6 | 	mov	local03, #0
18ae4     00 24 06 F6 | 	mov	local04, #0
18ae8     00 26 06 F6 | 	mov	local05, #0
18aec     97 08 48 FB | 	callpa	#(@LR__2451-@LR__2450)>>2,fcache_load_ptr_
18af0                 | LR__2450
18af0     0F 29 C2 FA | 	rdbyte	local06, local01
18af4     20 28 0E F2 | 	cmp	local06, #32 wz
18af8     01 1E 06 A1 |  if_e	add	local01, #1
18afc     F0 FF 9F AD |  if_e	jmp	#LR__2450
18b00                 | LR__2451
18b00     0F 2B C2 FA | 	rdbyte	local07, local01
18b04                 | LR__2452
18b04     2D 2A 0E F2 | 	cmp	local07, #45 wz
18b08     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
18b0c     18 00 90 5D |  if_ne	jmp	#LR__2453
18b10     01 1E 06 F1 | 	add	local01, #1
18b14     2D 2A 0E F2 | 	cmp	local07, #45 wz
18b18     01 28 06 A6 |  if_e	mov	local06, #1
18b1c     14 27 C2 A2 |  if_e	subr	local05, local06
18b20     0F 2B C2 FA | 	rdbyte	local07, local01
18b24     DC FF 9F FD | 	jmp	#LR__2452
18b28                 | LR__2453
18b28     97 48 48 FB | 	callpa	#(@LR__2461-@LR__2454)>>2,fcache_load_ptr_
18b2c                 | LR__2454
18b2c                 | LR__2455
18b2c     0F 2B C2 FA | 	rdbyte	local07, local01
18b30     5F 2A 0E F2 | 	cmp	local07, #95 wz
18b34     01 1E 06 F1 | 	add	local01, #1
18b38     F0 FF 9F AD |  if_e	jmp	#LR__2455
18b3c     30 2A 0E F2 | 	cmp	local07, #48 wz
18b40     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
18b44     00 24 06 A6 |  if_e	mov	local04, #0
18b48     60 00 90 AD |  if_e	jmp	#LR__2460
18b4c     31 2A 56 F2 | 	cmps	local07, #49 wc
18b50     18 00 90 CD |  if_b	jmp	#LR__2456
18b54     3A 2A 56 F2 | 	cmps	local07, #58 wc
18b58     15 25 02 C6 |  if_b	mov	local04, local07
18b5c     30 24 86 C1 |  if_b	sub	local04, #48
18b60     00 20 0E C2 |  if_b	cmp	local02, #0 wz
18b64     0A 20 06 86 |  if_c_and_z	mov	local02, #10
18b68     40 00 90 CD |  if_b	jmp	#LR__2459
18b6c                 | LR__2456
18b6c     0B 20 56 F2 | 	cmps	local02, #11 wc
18b70     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
18b74     14 00 90 CD |  if_b	jmp	#LR__2457
18b78     67 2A 56 F2 | 	cmps	local07, #103 wc
18b7c     61 2A 86 C1 |  if_b	sub	local07, #97
18b80     0A 24 06 C6 |  if_b	mov	local04, #10
18b84     15 25 02 C1 |  if_b	add	local04, local07
18b88     20 00 90 CD |  if_b	jmp	#LR__2458
18b8c                 | LR__2457
18b8c     0B 20 56 F2 | 	cmps	local02, #11 wc
18b90     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
18b94     24 00 90 CD |  if_b	jmp	#LR__2462
18b98     47 2A 56 F2 | 	cmps	local07, #71 wc
18b9c     41 2A 86 C1 |  if_b	sub	local07, #65
18ba0     0A 24 06 C6 |  if_b	mov	local04, #10
18ba4     15 25 02 C1 |  if_b	add	local04, local07
18ba8     10 00 90 3D |  if_ae	jmp	#LR__2462
18bac                 | LR__2458
18bac                 | LR__2459
18bac                 | LR__2460
18bac     11 21 02 FD | 	qmul	local02, local03
18bb0     18 22 62 FD | 	getqx	local03
18bb4     12 23 02 F1 | 	add	local03, local04
18bb8     70 FF 9F FD | 	jmp	#LR__2454
18bbc                 | LR__2461
18bbc                 | LR__2462
18bbc     00 20 0E F2 | 	cmp	local02, #0 wz
18bc0     64 00 90 5D |  if_ne	jmp	#LR__2468
18bc4     78 2A 0E F2 | 	cmp	local07, #120 wz
18bc8     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
18bcc     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
18bd0     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
18bd4     14 00 90 5D |  if_ne	jmp	#LR__2463
18bd8     0F 13 02 F6 | 	mov	arg01, local01
18bdc     10 14 06 F6 | 	mov	arg02, #16
18be0     EC FE BF FD | 	call	#__system____builtin_atoi
18be4     FD 22 02 F6 | 	mov	local03, result1
18be8     3C 00 90 FD | 	jmp	#LR__2467
18bec                 | LR__2463
18bec     62 2A 0E F2 | 	cmp	local07, #98 wz
18bf0     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
18bf4     14 00 90 5D |  if_ne	jmp	#LR__2464
18bf8     0F 13 02 F6 | 	mov	arg01, local01
18bfc     02 14 06 F6 | 	mov	arg02, #2
18c00     CC FE BF FD | 	call	#__system____builtin_atoi
18c04     FD 22 02 F6 | 	mov	local03, result1
18c08     1C 00 90 FD | 	jmp	#LR__2466
18c0c                 | LR__2464
18c0c     6F 2A 0E F2 | 	cmp	local07, #111 wz
18c10     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
18c14     10 00 90 5D |  if_ne	jmp	#LR__2465
18c18     0F 13 02 F6 | 	mov	arg01, local01
18c1c     08 14 06 F6 | 	mov	arg02, #8
18c20     AC FE BF FD | 	call	#__system____builtin_atoi
18c24     FD 22 02 F6 | 	mov	local03, result1
18c28                 | LR__2465
18c28                 | LR__2466
18c28                 | LR__2467
18c28                 | LR__2468
18c28     00 26 0E F2 | 	cmp	local05, #0 wz
18c2c     11 23 62 56 |  if_ne	neg	local03, local03
18c30     11 FB 01 F6 | 	mov	result1, local03
18c34     A7 F0 03 F6 | 	mov	ptra, fp
18c38     B2 00 A0 FD | 	call	#popregs_
18c3c                 | __system____builtin_atoi_ret
18c3c     2D 00 64 FD | 	ret
18c40                 | 
18c40                 | __system____builtin_atof
18c40     07 4A 05 F6 | 	mov	COUNT_, #7
18c44     A8 00 A0 FD | 	call	#pushregs_
18c48     09 1F 02 F6 | 	mov	local01, arg01
18c4c     00 20 06 F6 | 	mov	local02, #0
18c50     00 22 06 F6 | 	mov	local03, #0
18c54     00 24 06 F6 | 	mov	local04, #0
18c58     00 26 06 F6 | 	mov	local05, #0
18c5c     97 08 48 FB | 	callpa	#(@LR__2471-@LR__2470)>>2,fcache_load_ptr_
18c60                 | LR__2470
18c60     0F 17 C2 FA | 	rdbyte	arg03, local01
18c64     20 16 0E F2 | 	cmp	arg03, #32 wz
18c68     01 1E 06 A1 |  if_e	add	local01, #1
18c6c     F0 FF 9F AD |  if_e	jmp	#LR__2470
18c70                 | LR__2471
18c70     0F 29 C2 FA | 	rdbyte	local06, local01
18c74                 | LR__2472
18c74     2B 28 0E F2 | 	cmp	local06, #43 wz
18c78     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
18c7c     14 00 90 5D |  if_ne	jmp	#LR__2473
18c80     2D 28 0E F2 | 	cmp	local06, #45 wz
18c84     1F 24 E6 A4 |  if_e	bitnot	local04, #31
18c88     01 1E 06 F1 | 	add	local01, #1
18c8c     0F 29 C2 FA | 	rdbyte	local06, local01
18c90     E0 FF 9F FD | 	jmp	#LR__2472
18c94                 | LR__2473
18c94                 | LR__2474
18c94     97 08 48 FB | 	callpa	#(@LR__2476-@LR__2475)>>2,fcache_load_ptr_
18c98                 | LR__2475
18c98     0F 29 C2 FA | 	rdbyte	local06, local01
18c9c     5F 28 0E F2 | 	cmp	local06, #95 wz
18ca0     01 1E 06 F1 | 	add	local01, #1
18ca4     F0 FF 9F AD |  if_e	jmp	#LR__2475
18ca8                 | LR__2476
18ca8     00 28 0E F2 | 	cmp	local06, #0 wz
18cac     5C 00 90 AD |  if_e	jmp	#LR__2478
18cb0     30 28 56 F2 | 	cmps	local06, #48 wc
18cb4     44 00 90 CD |  if_b	jmp	#LR__2477
18cb8     3A 28 56 F2 | 	cmps	local06, #58 wc
18cbc     3C 00 90 3D |  if_ae	jmp	#LR__2477
18cc0     10 13 02 F6 | 	mov	arg01, local02
18cc4     00 90 20 FF 
18cc8     00 14 06 F6 | 	mov	arg02, ##1092616192
18ccc     88 F7 BF FD | 	call	#__system___float_mul
18cd0     FD 20 02 F6 | 	mov	local02, result1
18cd4     30 28 86 F1 | 	sub	local06, #48
18cd8     14 13 02 F6 | 	mov	arg01, local06
18cdc     4C F4 BF FD | 	call	#__system___float_fromuns
18ce0     FD 14 02 F6 | 	mov	arg02, result1
18ce4     10 13 02 F6 | 	mov	arg01, local02
18ce8     74 F4 BF FD | 	call	#__system___float_add
18cec     FD 20 02 F6 | 	mov	local02, result1
18cf0     00 26 0E F2 | 	cmp	local05, #0 wz
18cf4     01 22 86 51 |  if_ne	sub	local03, #1
18cf8     98 FF 9F FD | 	jmp	#LR__2474
18cfc                 | LR__2477
18cfc     2E 28 0E F2 | 	cmp	local06, #46 wz
18d00     00 26 0E A2 |  if_e	cmp	local05, #0 wz
18d04     01 26 06 A6 |  if_e	mov	local05, #1
18d08     88 FF 9F AD |  if_e	jmp	#LR__2474
18d0c                 | LR__2478
18d0c     45 28 0E F2 | 	cmp	local06, #69 wz
18d10     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
18d14     18 00 90 5D |  if_ne	jmp	#LR__2479
18d18     0F 13 02 F6 | 	mov	arg01, local01
18d1c     00 14 06 F6 | 	mov	arg02, #0
18d20     AC FD BF FD | 	call	#__system____builtin_atoi
18d24     11 FB 01 F1 | 	add	result1, local03
18d28     FD 2A 02 F6 | 	mov	local07, result1
18d2c     04 00 90 FD | 	jmp	#LR__2480
18d30                 | LR__2479
18d30     11 2B 02 F6 | 	mov	local07, local03
18d34                 | LR__2480
18d34     15 17 02 F6 | 	mov	arg03, local07
18d38     10 13 02 F6 | 	mov	arg01, local02
18d3c     00 90 20 FF 
18d40     00 14 06 F6 | 	mov	arg02, ##1092616192
18d44     44 04 B0 FD | 	call	#__system___float_pow_n
18d48     12 FB 61 F5 | 	xor	result1, local04
18d4c     A7 F0 03 F6 | 	mov	ptra, fp
18d50     B2 00 A0 FD | 	call	#popregs_
18d54                 | __system____builtin_atof_ret
18d54     2D 00 64 FD | 	ret
18d58                 | 
18d58                 | __system____builtin_ilogb
18d58     20 FC BF FD | 	call	#__system___float_Unpack
18d5c     00 FE 0D F2 | 	cmp	result3, #0 wz
18d60     00 00 40 AF 
18d64     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
18d68     24 00 90 AD |  if_e	jmp	#LR__2491
18d6c     80 FC 0D F2 | 	cmp	result2, #128 wz
18d70     18 00 90 5D |  if_ne	jmp	#LR__2490
18d74     00 00 10 FF 
18d78     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
18d7c     1E FA CD A9 |  if_e	bmask	result1, #30
18d80     0C 00 90 AD |  if_e	jmp	#LR__2491
18d84     1F FA C5 F9 | 	decod	result1, #31
18d88     04 00 90 FD | 	jmp	#LR__2491
18d8c                 | LR__2490
18d8c     FE FA 01 F6 | 	mov	result1, result2
18d90                 | LR__2491
18d90                 | __system____builtin_ilogb_ret
18d90     2D 00 64 FD | 	ret
18d94                 | 
18d94                 | __system____builtin_sinf
18d94     03 4A 05 F6 | 	mov	COUNT_, #3
18d98     A8 00 A0 FD | 	call	#pushregs_
18d9c     09 1F 02 F6 | 	mov	local01, arg01
18da0     66 E6 1E FF 
18da4     CD 14 06 F6 | 	mov	arg02, ##1036831949
18da8     01 16 06 F6 | 	mov	arg03, #1
18dac     DC FA BF FD | 	call	#__system___float_cmp
18db0     00 FA 55 F2 | 	cmps	result1, #0 wc
18db4     5C 00 90 3D |  if_ae	jmp	#LR__2500
18db8     0F 13 02 F6 | 	mov	arg01, local01
18dbc     66 E6 5E FF 
18dc0     CD 14 06 F6 | 	mov	arg02, ##-1110651699
18dc4     01 16 66 F6 | 	neg	arg03, #1
18dc8     C0 FA BF FD | 	call	#__system___float_cmp
18dcc     01 FA 55 F2 | 	cmps	result1, #1 wc
18dd0     40 00 90 CD |  if_b	jmp	#LR__2500
18dd4     0F 13 02 F6 | 	mov	arg01, local01
18dd8     0F 15 02 F6 | 	mov	arg02, local01
18ddc     78 F6 BF FD | 	call	#__system___float_mul
18de0     FD 12 02 F6 | 	mov	arg01, result1
18de4     0F 15 02 F6 | 	mov	arg02, local01
18de8     6C F6 BF FD | 	call	#__system___float_mul
18dec     FD 12 02 F6 | 	mov	arg01, result1
18df0     00 60 20 FF 
18df4     00 14 06 F6 | 	mov	arg02, ##1086324736
18df8     60 F8 BF FD | 	call	#__system___float_div
18dfc     FD 14 02 F6 | 	mov	arg02, result1
18e00     0F 13 02 F6 | 	mov	arg01, local01
18e04     1F 14 E6 F4 | 	bitnot	arg02, #31
18e08     54 F3 BF FD | 	call	#__system___float_add
18e0c     FD 20 02 F6 | 	mov	local02, result1
18e10     54 00 90 FD | 	jmp	#LR__2501
18e14                 | LR__2500
18e14     0F 13 02 F6 | 	mov	arg01, local01
18e18     7C 91 26 FF 
18e1c     83 15 06 F6 | 	mov	arg02, ##1294137731
18e20     34 F6 BF FD | 	call	#__system___float_mul
18e24     FD 12 02 F6 | 	mov	arg01, result1
18e28     00 14 06 F6 | 	mov	arg02, #0
18e2c     F0 FA BF FD | 	call	#__system___float_tointeger
18e30     02 FA 65 F0 | 	shl	result1, #2
18e34     00 00 A0 FF 
18e38     FD 00 48 FD | 	qrotate	##1073741824, result1
18e3c     19 12 62 FD | 	getqy	arg01
18e40     09 13 52 F6 | 	abs	arg01, arg01 wc
18e44     1F 22 C6 C9 |  if_b	decod	local03, #31
18e48     00 22 06 36 |  if_ae	mov	local03, #0
18e4c     DC F2 BF FD | 	call	#__system___float_fromuns
18e50     11 FB 61 F5 | 	xor	result1, local03
18e54     FD 12 02 F6 | 	mov	arg01, result1
18e58     00 40 27 FF 
18e5c     00 14 06 F6 | 	mov	arg02, ##1317011456
18e60     F8 F7 BF FD | 	call	#__system___float_div
18e64     FD 20 02 F6 | 	mov	local02, result1
18e68                 | LR__2501
18e68     10 FB 01 F6 | 	mov	result1, local02
18e6c     A7 F0 03 F6 | 	mov	ptra, fp
18e70     B2 00 A0 FD | 	call	#popregs_
18e74                 | __system____builtin_sinf_ret
18e74     2D 00 64 FD | 	ret
18e78                 | 
18e78                 | __system____builtin_exp2f
18e78     04 4A 05 F6 | 	mov	COUNT_, #4
18e7c     A8 00 A0 FD | 	call	#pushregs_
18e80     09 1F 02 F6 | 	mov	local01, arg01
18e84     00 7F 21 FF 
18e88     00 14 06 F6 | 	mov	arg02, ##1123942400
18e8c     01 16 66 F6 | 	neg	arg03, #1
18e90     F8 F9 BF FD | 	call	#__system___float_cmp
18e94     00 FA 55 F2 | 	cmps	result1, #0 wc
18e98     00 C0 3F 3F 
18e9c     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
18ea0     DC 00 90 3D |  if_ae	jmp	#LR__2511
18ea4     0F 13 02 F6 | 	mov	arg01, local01
18ea8     00 7F 61 FF 
18eac     00 14 06 F6 | 	mov	arg02, ##-1023541248
18eb0     01 16 06 F6 | 	mov	arg03, #1
18eb4     D4 F9 BF FD | 	call	#__system___float_cmp
18eb8     00 FA 55 F2 | 	cmps	result1, #0 wc
18ebc     00 FA 05 C6 |  if_b	mov	result1, #0
18ec0     BC 00 90 CD |  if_b	jmp	#LR__2511
18ec4     0F 13 02 F6 | 	mov	arg01, local01
18ec8     00 14 06 F6 | 	mov	arg02, #0
18ecc     50 FA BF FD | 	call	#__system___float_tointeger
18ed0     FD 20 02 F6 | 	mov	local02, result1
18ed4     10 13 52 F6 | 	abs	arg01, local02 wc
18ed8     1F 22 C6 C9 |  if_b	decod	local03, #31
18edc     00 22 06 36 |  if_ae	mov	local03, #0
18ee0     48 F2 BF FD | 	call	#__system___float_fromuns
18ee4     11 FB 61 F5 | 	xor	result1, local03
18ee8     FD 14 02 F6 | 	mov	arg02, result1
18eec     0F 13 02 F6 | 	mov	arg01, local01
18ef0     1F 14 E6 F4 | 	bitnot	arg02, #31
18ef4     68 F2 BF FD | 	call	#__system___float_add
18ef8     FD 24 02 F6 | 	mov	local04, result1
18efc     12 13 02 F6 | 	mov	arg01, local04
18f00     00 14 06 F6 | 	mov	arg02, #0
18f04     01 16 06 F6 | 	mov	arg03, #1
18f08     80 F9 BF FD | 	call	#__system___float_cmp
18f0c     00 FA 55 F2 | 	cmps	result1, #0 wc
18f10     18 00 90 3D |  if_ae	jmp	#LR__2510
18f14     12 13 02 F6 | 	mov	arg01, local04
18f18     00 C0 1F FF 
18f1c     00 14 06 F6 | 	mov	arg02, ##1065353216
18f20     3C F2 BF FD | 	call	#__system___float_add
18f24     FD 24 02 F6 | 	mov	local04, result1
18f28     01 20 86 F1 | 	sub	local02, #1
18f2c                 | LR__2510
18f2c     7F 20 06 F1 | 	add	local02, #127
18f30     17 20 66 F0 | 	shl	local02, #23
18f34     12 13 02 F6 | 	mov	arg01, local04
18f38     00 80 26 FF 
18f3c     00 14 06 F6 | 	mov	arg02, ##1291845632
18f40     14 F5 BF FD | 	call	#__system___float_mul
18f44     FD 12 02 F6 | 	mov	arg01, result1
18f48     00 14 06 F6 | 	mov	arg02, #0
18f4c     D0 F9 BF FD | 	call	#__system___float_tointeger
18f50     FD 24 0A F6 | 	mov	local04, result1 wz
18f54     10 FB 01 A6 |  if_e	mov	result1, local02
18f58     24 00 90 AD |  if_e	jmp	#LR__2511
18f5c     3E 24 26 F4 | 	bith	local04, #62
18f60     0F 24 62 FD | 	qexp	local04
18f64     10 13 02 F6 | 	mov	arg01, local02
18f68     18 14 62 FD | 	getqx	arg02
18f6c     01 14 06 F1 | 	add	arg02, #1
18f70     01 14 46 F0 | 	shr	arg02, #1
18f74     00 80 1F FF 
18f78     00 14 06 F1 | 	add	arg02, ##1056964608
18f7c     D8 F4 BF FD | 	call	#__system___float_mul
18f80                 | LR__2511
18f80     A7 F0 03 F6 | 	mov	ptra, fp
18f84     B2 00 A0 FD | 	call	#popregs_
18f88                 | __system____builtin_exp2f_ret
18f88     2D 00 64 FD | 	ret
18f8c                 | 
18f8c                 | __system____builtin_log2f
18f8c     06 4A 05 F6 | 	mov	COUNT_, #6
18f90     A8 00 A0 FD | 	call	#pushregs_
18f94     09 1F 02 F6 | 	mov	local01, arg01
18f98     09 21 0A F6 | 	mov	local02, arg01 wz
18f9c     00 00 40 5F 
18fa0     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
18fa4     00 40 00 AF 
18fa8     00 FA 65 A6 |  if_e	neg	result1, ##8388608
18fac     08 01 90 AD |  if_e	jmp	#LR__2524
18fb0     00 20 56 F2 | 	cmps	local02, #0 wc
18fb4     00 E0 3F CF 
18fb8     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
18fbc     F8 00 90 CD |  if_b	jmp	#LR__2524
18fc0     0F 13 02 F6 | 	mov	arg01, local01
18fc4     00 90 20 FF 
18fc8     00 14 06 F6 | 	mov	arg02, ##1092616192
18fcc     01 16 06 F6 | 	mov	arg03, #1
18fd0     B8 F8 BF FD | 	call	#__system___float_cmp
18fd4     00 FA 0D F2 | 	cmp	result1, #0 wz
18fd8     4D 2A 20 AF 
18fdc     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
18fe0     D4 00 90 AD |  if_e	jmp	#LR__2524
18fe4     0F 13 02 F6 | 	mov	arg01, local01
18fe8     FC 16 20 FF 
18fec     54 14 06 F6 | 	mov	arg02, ##1076754516
18ff0     01 16 06 F6 | 	mov	arg03, #1
18ff4     94 F8 BF FD | 	call	#__system___float_cmp
18ff8     00 FA 0D F2 | 	cmp	result1, #0 wz
18ffc     55 DC 1F AF 
19000     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
19004     B0 00 90 AD |  if_e	jmp	#LR__2524
19008     10 23 02 F6 | 	mov	local03, local02
1900c     17 22 46 F0 | 	shr	local03, #23
19010     11 23 E2 F8 | 	getbyte	local03, local03, #0
19014     17 21 06 F4 | 	bitl	local02, #279
19018     10 25 02 F6 | 	mov	local04, local02
1901c     FF 22 0E F2 | 	cmp	local03, #255 wz
19020     1C 00 90 5D |  if_ne	jmp	#LR__2520
19024     00 24 0E F2 | 	cmp	local04, #0 wz
19028     00 C0 3F 5F 
1902c     00 26 06 56 |  if_ne	mov	local05, ##2139095040
19030     00 E0 3F AF 
19034     00 26 06 A6 |  if_e	mov	local05, ##2143289344
19038     13 FB 01 F6 | 	mov	result1, local05
1903c     78 00 90 FD | 	jmp	#LR__2524
19040                 | LR__2520
19040     00 22 0E F2 | 	cmp	local03, #0 wz
19044     17 24 26 54 |  if_ne	bith	local04, #23
19048     7F 22 86 51 |  if_ne	sub	local03, #127
1904c     28 00 90 5D |  if_ne	jmp	#LR__2523
19050     00 24 0E F2 | 	cmp	local04, #0 wz
19054     00 40 00 AF 
19058     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1905c     58 00 90 AD |  if_e	jmp	#LR__2524
19060     7E 22 66 F6 | 	neg	local03, #126
19064     97 08 48 FB | 	callpa	#(@LR__2522-@LR__2521)>>2,fcache_load_ptr_
19068                 | LR__2521
19068     17 24 2E F4 | 	testbn	local04, #23 wz
1906c     01 24 66 A0 |  if_e	shl	local04, #1
19070     01 22 06 A1 |  if_e	add	local03, #1
19074     F0 FF 9F AD |  if_e	jmp	#LR__2521
19078                 | LR__2522
19078                 | LR__2523
19078     0E 24 62 FD | 	qlog	local04
1907c     01 22 86 F1 | 	sub	local03, #1
19080     11 13 52 F6 | 	abs	arg01, local03 wc
19084     1F 28 C6 C9 |  if_b	decod	local06, #31
19088     00 28 06 36 |  if_ae	mov	local06, #0
1908c     18 26 62 FD | 	getqx	local05
19090     9B 26 06 F4 | 	bitl	local05, #155
19094     08 26 06 F1 | 	add	local05, #8
19098     04 26 46 F0 | 	shr	local05, #4
1909c     00 C0 1F FF 
190a0     00 26 06 F1 | 	add	local05, ##1065353216
190a4     84 F0 BF FD | 	call	#__system___float_fromuns
190a8     14 FB 61 F5 | 	xor	result1, local06
190ac     FD 14 02 F6 | 	mov	arg02, result1
190b0     13 13 02 F6 | 	mov	arg01, local05
190b4     A8 F0 BF FD | 	call	#__system___float_add
190b8                 | LR__2524
190b8     A7 F0 03 F6 | 	mov	ptra, fp
190bc     B2 00 A0 FD | 	call	#popregs_
190c0                 | __system____builtin_log2f_ret
190c0     2D 00 64 FD | 	ret
190c4                 | 
190c4                 | __system____builtin_powf
190c4     04 4A 05 F6 | 	mov	COUNT_, #4
190c8     A8 00 A0 FD | 	call	#pushregs_
190cc     09 1F 02 F6 | 	mov	local01, arg01
190d0     0A 21 02 F6 | 	mov	local02, arg02
190d4     10 13 02 F6 | 	mov	arg01, local02
190d8     00 14 06 F6 | 	mov	arg02, #0
190dc     40 F8 BF FD | 	call	#__system___float_tointeger
190e0     FD 22 02 F6 | 	mov	local03, result1
190e4     11 13 52 F6 | 	abs	arg01, local03 wc
190e8     1F 24 C6 C9 |  if_b	decod	local04, #31
190ec     00 24 06 36 |  if_ae	mov	local04, #0
190f0     38 F0 BF FD | 	call	#__system___float_fromuns
190f4     12 FB 61 F5 | 	xor	result1, local04
190f8     FD 12 02 F6 | 	mov	arg01, result1
190fc     10 15 02 F6 | 	mov	arg02, local02
19100     01 16 06 F6 | 	mov	arg03, #1
19104     84 F7 BF FD | 	call	#__system___float_cmp
19108     00 FA 0D F2 | 	cmp	result1, #0 wz
1910c     18 00 90 5D |  if_ne	jmp	#LR__2530
19110     00 C0 1F FF 
19114     00 12 06 F6 | 	mov	arg01, ##1065353216
19118     0F 15 02 F6 | 	mov	arg02, local01
1911c     11 17 02 F6 | 	mov	arg03, local03
19120     68 00 B0 FD | 	call	#__system___float_pow_n
19124     58 00 90 FD | 	jmp	#LR__2531
19128                 | LR__2530
19128     0F 13 02 F6 | 	mov	arg01, local01
1912c     00 14 06 F6 | 	mov	arg02, #0
19130     01 16 06 F6 | 	mov	arg03, #1
19134     54 F7 BF FD | 	call	#__system___float_cmp
19138     00 FA 55 F2 | 	cmps	result1, #0 wc
1913c     00 E0 3F CF 
19140     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
19144     38 00 90 CD |  if_b	jmp	#LR__2531
19148     0F 13 02 F6 | 	mov	arg01, local01
1914c     00 14 06 F6 | 	mov	arg02, #0
19150     01 16 06 F6 | 	mov	arg03, #1
19154     34 F7 BF FD | 	call	#__system___float_cmp
19158     00 FA 0D F2 | 	cmp	result1, #0 wz
1915c     00 FA 05 A6 |  if_e	mov	result1, #0
19160     1C 00 90 AD |  if_e	jmp	#LR__2531
19164     0F 13 02 F6 | 	mov	arg01, local01
19168     20 FE BF FD | 	call	#__system____builtin_log2f
1916c     FD 12 02 F6 | 	mov	arg01, result1
19170     10 15 02 F6 | 	mov	arg02, local02
19174     E0 F2 BF FD | 	call	#__system___float_mul
19178     FD 12 02 F6 | 	mov	arg01, result1
1917c     F8 FC BF FD | 	call	#__system____builtin_exp2f
19180                 | LR__2531
19180     A7 F0 03 F6 | 	mov	ptra, fp
19184     B2 00 A0 FD | 	call	#popregs_
19188                 | __system____builtin_powf_ret
19188     2D 00 64 FD | 	ret
1918c                 | 
1918c                 | __system___float_pow_n
1918c     05 4A 05 F6 | 	mov	COUNT_, #5
19190     A8 00 A0 FD | 	call	#pushregs_
19194     09 1F 02 F6 | 	mov	local01, arg01
19198     0A 21 02 F6 | 	mov	local02, arg02
1919c     0B 23 02 F6 | 	mov	local03, arg03
191a0     00 22 56 F2 | 	cmps	local03, #0 wc
191a4     18 00 90 3D |  if_ae	jmp	#LR__2540
191a8     01 24 06 F6 | 	mov	local04, #1
191ac     11 23 62 F6 | 	neg	local03, local03
191b0     00 22 56 F2 | 	cmps	local03, #0 wc
191b4     00 FA 05 C6 |  if_b	mov	result1, #0
191b8     94 00 90 CD |  if_b	jmp	#LR__2548
191bc     04 00 90 FD | 	jmp	#LR__2541
191c0                 | LR__2540
191c0     00 24 06 F6 | 	mov	local04, #0
191c4                 | LR__2541
191c4     00 C0 1F FF 
191c8     00 26 06 F6 | 	mov	local05, ##1065353216
191cc                 | LR__2542
191cc     01 22 56 F2 | 	cmps	local03, #1 wc
191d0     30 00 90 CD |  if_b	jmp	#LR__2544
191d4     01 22 CE F7 | 	test	local03, #1 wz
191d8     10 00 90 AD |  if_e	jmp	#LR__2543
191dc     13 13 02 F6 | 	mov	arg01, local05
191e0     10 15 02 F6 | 	mov	arg02, local02
191e4     70 F2 BF FD | 	call	#__system___float_mul
191e8     FD 26 02 F6 | 	mov	local05, result1
191ec                 | LR__2543
191ec     01 22 C6 F0 | 	sar	local03, #1
191f0     10 13 02 F6 | 	mov	arg01, local02
191f4     10 15 02 F6 | 	mov	arg02, local02
191f8     5C F2 BF FD | 	call	#__system___float_mul
191fc     FD 20 02 F6 | 	mov	local02, result1
19200     C8 FF 9F FD | 	jmp	#LR__2542
19204                 | LR__2544
19204     00 24 0E F2 | 	cmp	local04, #0 wz
19208     14 00 90 AD |  if_e	jmp	#LR__2545
1920c     0F 13 02 F6 | 	mov	arg01, local01
19210     13 15 02 F6 | 	mov	arg02, local05
19214     44 F4 BF FD | 	call	#__system___float_div
19218     FD 26 02 F6 | 	mov	local05, result1
1921c     2C 00 90 FD | 	jmp	#LR__2547
19220                 | LR__2545
19220     0F 13 02 F6 | 	mov	arg01, local01
19224     00 C0 1F FF 
19228     00 14 06 F6 | 	mov	arg02, ##1065353216
1922c     01 16 06 F6 | 	mov	arg03, #1
19230     58 F6 BF FD | 	call	#__system___float_cmp
19234     00 FA 0D F2 | 	cmp	result1, #0 wz
19238     10 00 90 AD |  if_e	jmp	#LR__2546
1923c     0F 13 02 F6 | 	mov	arg01, local01
19240     13 15 02 F6 | 	mov	arg02, local05
19244     10 F2 BF FD | 	call	#__system___float_mul
19248     FD 26 02 F6 | 	mov	local05, result1
1924c                 | LR__2546
1924c                 | LR__2547
1924c     13 FB 01 F6 | 	mov	result1, local05
19250                 | LR__2548
19250     A7 F0 03 F6 | 	mov	ptra, fp
19254     B2 00 A0 FD | 	call	#popregs_
19258                 | __system___float_pow_n_ret
19258     2D 00 64 FD | 	ret
1925c                 | 
1925c                 | __system___gc_ptrs
1925c     EC 00 02 F6 | 	mov	_var01, __heap_ptr
19260     00 03 02 F6 | 	mov	_var02, _var01
19264     F3 01 00 FF 
19268     F8 03 06 F1 | 	add	_var02, ##255992
1926c     00 FD 09 FB | 	rdlong	result2, _var01 wz
19270     74 00 90 5D |  if_ne	jmp	#LR__2550
19274     01 FD 01 F6 | 	mov	result2, _var02
19278     00 FD 81 F1 | 	sub	result2, _var01
1927c     00 03 58 FC | 	wrword	#1, _var01
19280     00 FB 01 F6 | 	mov	result1, _var01
19284     02 FA 05 F1 | 	add	result1, #2
19288     36 00 80 FF 
1928c     FD 20 59 FC | 	wrword	##27792, result1
19290     00 FB 01 F6 | 	mov	result1, _var01
19294     04 FA 05 F1 | 	add	result1, #4
19298     FD 00 58 FC | 	wrword	#0, result1
1929c     00 FB 01 F6 | 	mov	result1, _var01
192a0     06 FA 05 F1 | 	add	result1, #6
192a4     FD 02 58 FC | 	wrword	#1, result1
192a8     10 00 06 F1 | 	add	_var01, #16
192ac     FE FC 51 F6 | 	abs	result2, result2 wc
192b0     04 FC 45 F0 | 	shr	result2, #4
192b4     FE FC 81 F6 | 	negc	result2, result2
192b8     00 FD 51 FC | 	wrword	result2, _var01
192bc     00 FD 01 F6 | 	mov	result2, _var01
192c0     02 FC 05 F1 | 	add	result2, #2
192c4     36 00 80 FF 
192c8     FE 1E 59 FC | 	wrword	##27791, result2
192cc     00 FD 01 F6 | 	mov	result2, _var01
192d0     04 FC 05 F1 | 	add	result2, #4
192d4     FE 00 58 FC | 	wrword	#0, result2
192d8     00 FD 01 F6 | 	mov	result2, _var01
192dc     06 FC 05 F1 | 	add	result2, #6
192e0     FE 00 58 FC | 	wrword	#0, result2
192e4     10 00 86 F1 | 	sub	_var01, #16
192e8                 | LR__2550
192e8     00 FB 01 F6 | 	mov	result1, _var01
192ec     01 FD 01 F6 | 	mov	result2, _var02
192f0                 | __system___gc_ptrs_ret
192f0     2D 00 64 FD | 	ret
192f4                 | 
192f4                 | __system___gc_tryalloc
192f4     0B 4A 05 F6 | 	mov	COUNT_, #11
192f8     A8 00 A0 FD | 	call	#pushregs_
192fc     09 1F 02 F6 | 	mov	local01, arg01
19300     0A 21 02 F6 | 	mov	local02, arg02
19304     54 FF BF FD | 	call	#__system___gc_ptrs
19308     FD 22 02 F6 | 	mov	local03, result1
1930c     FE 24 02 F6 | 	mov	local04, result2
19310     11 27 02 F6 | 	mov	local05, local03
19314     00 28 06 F6 | 	mov	local06, #0
19318     97 1E 48 FB | 	callpa	#(@LR__2561-@LR__2560)>>2,fcache_load_ptr_
1931c                 | LR__2560
1931c     13 2B 02 F6 | 	mov	local07, local05
19320     06 26 06 F1 | 	add	local05, #6
19324     13 15 EA FA | 	rdword	arg02, local05 wz
19328     11 13 02 F6 | 	mov	arg01, local03
1932c     00 FA 05 A6 |  if_e	mov	result1, #0
19330     04 14 66 50 |  if_ne	shl	arg02, #4
19334     0A 13 02 51 |  if_ne	add	arg01, arg02
19338     09 FB 01 56 |  if_ne	mov	result1, arg01
1933c     FD 26 0A F6 | 	mov	local05, result1 wz
19340     13 29 E2 5A |  if_ne	rdword	local06, local05
19344     00 26 0E F2 | 	cmp	local05, #0 wz
19348     12 27 52 52 |  if_ne	cmps	local05, local04 wc
1934c     08 00 90 1D |  if_a	jmp	#LR__2562
19350     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
19354     C4 FF 9F 1D |  if_a	jmp	#LR__2560
19358                 | LR__2561
19358                 | LR__2562
19358     00 26 0E F2 | 	cmp	local05, #0 wz
1935c     13 FB 01 A6 |  if_e	mov	result1, local05
19360     3C 01 90 AD |  if_e	jmp	#LR__2565
19364     13 FD 01 F6 | 	mov	result2, local05
19368     06 FC 05 F1 | 	add	result2, #6
1936c     FE 2C E2 FA | 	rdword	local08, result2
19370     14 1F 52 F2 | 	cmps	local01, local06 wc
19374     C0 00 90 3D |  if_ae	jmp	#LR__2564
19378     13 1F 52 FC | 	wrword	local01, local05
1937c     13 13 02 F6 | 	mov	arg01, local05
19380     0F 2D 02 F6 | 	mov	local08, local01
19384     04 2C 66 F0 | 	shl	local08, #4
19388     16 13 02 F1 | 	add	arg01, local08
1938c     0F 29 82 F1 | 	sub	local06, local01
19390     09 29 52 FC | 	wrword	local06, arg01
19394     09 2D 02 F6 | 	mov	local08, arg01
19398     02 2C 06 F1 | 	add	local08, #2
1939c     36 00 80 FF 
193a0     16 1F 59 FC | 	wrword	##27791, local08
193a4     13 15 0A F6 | 	mov	arg02, local05 wz
193a8     00 FA 05 A6 |  if_e	mov	result1, #0
193ac     11 15 82 51 |  if_ne	sub	arg02, local03
193b0     04 14 46 50 |  if_ne	shr	arg02, #4
193b4     0A FB 01 56 |  if_ne	mov	result1, arg02
193b8     09 2D 02 F6 | 	mov	local08, arg01
193bc     04 2C 06 F1 | 	add	local08, #4
193c0     16 FB 51 FC | 	wrword	result1, local08
193c4     13 2D 02 F6 | 	mov	local08, local05
193c8     06 2C 06 F1 | 	add	local08, #6
193cc     09 15 02 F6 | 	mov	arg02, arg01
193d0     16 2D E2 FA | 	rdword	local08, local08
193d4     06 14 06 F1 | 	add	arg02, #6
193d8     0A 2D 52 FC | 	wrword	local08, arg02
193dc     09 2F 02 F6 | 	mov	local09, arg01
193e0     17 15 0A F6 | 	mov	arg02, local09 wz
193e4     00 FA 05 A6 |  if_e	mov	result1, #0
193e8     11 15 82 51 |  if_ne	sub	arg02, local03
193ec     04 14 46 50 |  if_ne	shr	arg02, #4
193f0     0A FB 01 56 |  if_ne	mov	result1, arg02
193f4     FD 2C 02 F6 | 	mov	local08, result1
193f8     09 31 EA FA | 	rdword	local10, arg01 wz
193fc     00 FA 05 A6 |  if_e	mov	result1, #0
19400     04 30 66 50 |  if_ne	shl	local10, #4
19404     18 13 02 51 |  if_ne	add	arg01, local10
19408     09 FB 01 56 |  if_ne	mov	result1, arg01
1940c     FD 32 0A F6 | 	mov	local11, result1 wz
19410     24 00 90 AD |  if_e	jmp	#LR__2563
19414     12 33 52 F2 | 	cmps	local11, local04 wc
19418     1C 00 90 3D |  if_ae	jmp	#LR__2563
1941c     17 15 0A F6 | 	mov	arg02, local09 wz
19420     00 FA 05 A6 |  if_e	mov	result1, #0
19424     11 15 82 51 |  if_ne	sub	arg02, local03
19428     04 14 46 50 |  if_ne	shr	arg02, #4
1942c     0A FB 01 56 |  if_ne	mov	result1, arg02
19430     04 32 06 F1 | 	add	local11, #4
19434     19 FB 51 FC | 	wrword	result1, local11
19438                 | LR__2563
19438                 | LR__2564
19438     06 2A 06 F1 | 	add	local07, #6
1943c     15 2D 52 FC | 	wrword	local08, local07
19440     36 00 00 FF 
19444     80 2E 06 F6 | 	mov	local09, ##27776
19448     10 2F 42 F5 | 	or	local09, local02
1944c     00 FA 05 F6 | 	mov	result1, #0
19450     01 FA 61 FD | 	cogid	result1
19454     FD 2E 42 F5 | 	or	local09, result1
19458     13 33 02 F6 | 	mov	local11, local05
1945c     02 32 06 F1 | 	add	local11, #2
19460     19 2F 52 FC | 	wrword	local09, local11
19464     11 2F 02 F6 | 	mov	local09, local03
19468     08 2E 06 F1 | 	add	local09, #8
1946c     13 33 02 F6 | 	mov	local11, local05
19470     17 2F E2 FA | 	rdword	local09, local09
19474     06 32 06 F1 | 	add	local11, #6
19478     19 2F 52 FC | 	wrword	local09, local11
1947c     13 15 0A F6 | 	mov	arg02, local05 wz
19480     00 FA 05 A6 |  if_e	mov	result1, #0
19484     11 15 82 51 |  if_ne	sub	arg02, local03
19488     04 14 46 50 |  if_ne	shr	arg02, #4
1948c     0A FB 01 56 |  if_ne	mov	result1, arg02
19490     08 22 06 F1 | 	add	local03, #8
19494     11 FB 51 FC | 	wrword	result1, local03
19498     08 26 06 F1 | 	add	local05, #8
1949c     13 FB 01 F6 | 	mov	result1, local05
194a0                 | LR__2565
194a0     A7 F0 03 F6 | 	mov	ptra, fp
194a4     B2 00 A0 FD | 	call	#popregs_
194a8                 | __system___gc_tryalloc_ret
194a8     2D 00 64 FD | 	ret
194ac                 | 
194ac                 | __system___gc_alloc_managed
194ac     01 4A 05 F6 | 	mov	COUNT_, #1
194b0     A8 00 A0 FD | 	call	#pushregs_
194b4     09 1F 02 F6 | 	mov	local01, arg01
194b8     00 14 06 F6 | 	mov	arg02, #0
194bc     1C 00 B0 FD | 	call	#__system___gc_doalloc
194c0     FD 14 0A F6 | 	mov	arg02, result1 wz
194c4     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
194c8     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
194cc     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
194d0     A7 F0 03 F6 | 	mov	ptra, fp
194d4     B2 00 A0 FD | 	call	#popregs_
194d8                 | __system___gc_alloc_managed_ret
194d8     2D 00 64 FD | 	ret
194dc                 | 
194dc                 | __system___gc_doalloc
194dc     06 4A 05 F6 | 	mov	COUNT_, #6
194e0     A8 00 A0 FD | 	call	#pushregs_
194e4     09 1F 0A F6 | 	mov	local01, arg01 wz
194e8     0A 21 02 F6 | 	mov	local02, arg02
194ec     00 FA 05 A6 |  if_e	mov	result1, #0
194f0     8C 00 90 AD |  if_e	jmp	#LR__2577
194f4     17 1E 06 F1 | 	add	local01, #23
194f8     0F 1E 26 F5 | 	andn	local01, #15
194fc     04 1E 46 F0 | 	shr	local01, #4
19500     1C E8 05 F1 | 	add	ptr___system__dat__, #28
19504     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
19508     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
1950c     38 C6 BF FD | 	call	#__system___lockmem
19510     0F 13 02 F6 | 	mov	arg01, local01
19514     10 15 02 F6 | 	mov	arg02, local02
19518     D8 FD BF FD | 	call	#__system___gc_tryalloc
1951c     FD 22 0A F6 | 	mov	local03, result1 wz
19520     14 00 90 5D |  if_ne	jmp	#LR__2570
19524     70 03 B0 FD | 	call	#__system___gc_docollect
19528     0F 13 02 F6 | 	mov	arg01, local01
1952c     10 15 02 F6 | 	mov	arg02, local02
19530     C0 FD BF FD | 	call	#__system___gc_tryalloc
19534     FD 22 02 F6 | 	mov	local03, result1
19538                 | LR__2570
19538     1C E8 05 F1 | 	add	ptr___system__dat__, #28
1953c     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
19540     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
19544     09 01 68 FC | 	wrlong	#0, arg01
19548     00 22 0E F2 | 	cmp	local03, #0 wz
1954c     2C 00 90 AD |  if_e	jmp	#LR__2576
19550     04 1E 66 F0 | 	shl	local01, #4
19554     08 1E 86 F1 | 	sub	local01, #8
19558     0F 25 52 F6 | 	abs	local04, local01 wc
1955c     02 24 46 F0 | 	shr	local04, #2
19560     12 27 8A F6 | 	negc	local05, local04 wz
19564     11 29 02 F6 | 	mov	local06, local03
19568     10 00 90 AD |  if_e	jmp	#LR__2575
1956c     97 06 48 FB | 	callpa	#(@LR__2573-@LR__2571)>>2,fcache_load_ptr_
19570                 | LR__2571
19570     13 05 D8 FC | 	rep	@LR__2574, local05
19574                 | LR__2572
19574     14 01 68 FC | 	wrlong	#0, local06
19578     04 28 06 F1 | 	add	local06, #4
1957c                 | LR__2573
1957c                 | LR__2574
1957c                 | LR__2575
1957c                 | LR__2576
1957c     11 FB 01 F6 | 	mov	result1, local03
19580                 | LR__2577
19580     A7 F0 03 F6 | 	mov	ptra, fp
19584     B2 00 A0 FD | 	call	#popregs_
19588                 | __system___gc_doalloc_ret
19588     2D 00 64 FD | 	ret
1958c                 | 
1958c                 | __system___gc_isvalidptr
1958c     F8 16 06 F4 | 	bitl	arg03, #248
19590     08 16 86 F1 | 	sub	arg03, #8
19594     09 17 52 F2 | 	cmps	arg03, arg01 wc
19598     08 00 90 CD |  if_b	jmp	#LR__2580
1959c     0A 17 52 F2 | 	cmps	arg03, arg02 wc
195a0     08 00 90 CD |  if_b	jmp	#LR__2581
195a4                 | LR__2580
195a4     00 FA 05 F6 | 	mov	result1, #0
195a8     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
195ac                 | LR__2581
195ac     0B 01 02 F6 | 	mov	_var01, arg03
195b0     09 01 62 F5 | 	xor	_var01, arg01
195b4     0F 00 CE F7 | 	test	_var01, #15 wz
195b8     00 FA 05 56 |  if_ne	mov	result1, #0
195bc     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
195c0     0B 01 02 F6 | 	mov	_var01, arg03
195c4     02 00 06 F1 | 	add	_var01, #2
195c8     00 01 E2 FA | 	rdword	_var01, _var01
195cc     7F 00 00 FF 
195d0     C0 01 06 F5 | 	and	_var01, ##65472
195d4     36 00 00 FF 
195d8     80 00 0E F2 | 	cmp	_var01, ##27776 wz
195dc     00 FA 05 56 |  if_ne	mov	result1, #0
195e0     0B FB 01 A6 |  if_e	mov	result1, arg03
195e4                 | __system___gc_isvalidptr_ret
195e4     2D 00 64 FD | 	ret
195e8                 | 
195e8                 | __system___gc_free
195e8     09 17 02 F6 | 	mov	arg03, arg01
195ec     6C FC BF FD | 	call	#__system___gc_ptrs
195f0     FD 12 02 F6 | 	mov	arg01, result1
195f4     FE 14 02 F6 | 	mov	arg02, result2
195f8     90 FF BF FD | 	call	#__system___gc_isvalidptr
195fc     FD 14 0A F6 | 	mov	arg02, result1 wz
19600     28 00 90 AD |  if_e	jmp	#LR__2590
19604     1C E8 05 F1 | 	add	ptr___system__dat__, #28
19608     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
1960c     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
19610     34 C5 BF FD | 	call	#__system___lockmem
19614     0A 13 02 F6 | 	mov	arg01, arg02
19618     14 00 B0 FD | 	call	#__system___gc_dofree
1961c     1C E8 05 F1 | 	add	ptr___system__dat__, #28
19620     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
19624     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
19628     09 01 68 FC | 	wrlong	#0, arg01
1962c                 | LR__2590
1962c                 | __system___gc_free_ret
1962c     2D 00 64 FD | 	ret
19630                 | 
19630                 | __system___gc_dofree
19630     06 4A 05 F6 | 	mov	COUNT_, #6
19634     A8 00 A0 FD | 	call	#pushregs_
19638     09 1F 02 F6 | 	mov	local01, arg01
1963c     1C FC BF FD | 	call	#__system___gc_ptrs
19640     FD 20 02 F6 | 	mov	local02, result1
19644     FE 22 02 F6 | 	mov	local03, result2
19648     0F 15 02 F6 | 	mov	arg02, local01
1964c     02 14 06 F1 | 	add	arg02, #2
19650     36 00 80 FF 
19654     0A 1F 59 FC | 	wrword	##27791, arg02
19658     0F 25 02 F6 | 	mov	local04, local01
1965c     0F 13 02 F6 | 	mov	arg01, local01
19660     09 27 EA FA | 	rdword	local05, arg01 wz
19664     00 FA 05 A6 |  if_e	mov	result1, #0
19668     04 26 66 50 |  if_ne	shl	local05, #4
1966c     13 13 02 51 |  if_ne	add	arg01, local05
19670     09 FB 01 56 |  if_ne	mov	result1, arg01
19674     FD 28 02 F6 | 	mov	local06, result1
19678     97 24 48 FB | 	callpa	#(@LR__2601-@LR__2600)>>2,fcache_load_ptr_
1967c                 | LR__2600
1967c     04 24 06 F1 | 	add	local04, #4
19680     12 15 EA FA | 	rdword	arg02, local04 wz
19684     10 13 02 F6 | 	mov	arg01, local02
19688     00 FA 05 A6 |  if_e	mov	result1, #0
1968c     04 14 66 50 |  if_ne	shl	arg02, #4
19690     0A 13 02 51 |  if_ne	add	arg01, arg02
19694     09 FB 01 56 |  if_ne	mov	result1, arg01
19698     FD 24 0A F6 | 	mov	local04, result1 wz
1969c     24 00 90 AD |  if_e	jmp	#LR__2602
196a0     12 13 02 F6 | 	mov	arg01, local04
196a4     00 FA 05 F6 | 	mov	result1, #0
196a8     02 12 06 F1 | 	add	arg01, #2
196ac     09 13 E2 FA | 	rdword	arg01, arg01
196b0     36 00 00 FF 
196b4     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
196b8     01 FA 65 A6 |  if_e	neg	result1, #1
196bc     00 FA 0D F2 | 	cmp	result1, #0 wz
196c0     B8 FF 9F AD |  if_e	jmp	#LR__2600
196c4                 | LR__2601
196c4                 | LR__2602
196c4     00 24 0E F2 | 	cmp	local04, #0 wz
196c8     10 25 02 A6 |  if_e	mov	local04, local02
196cc     12 15 02 F6 | 	mov	arg02, local04
196d0     06 14 06 F1 | 	add	arg02, #6
196d4     0F 13 02 F6 | 	mov	arg01, local01
196d8     0A 15 E2 FA | 	rdword	arg02, arg02
196dc     06 12 06 F1 | 	add	arg01, #6
196e0     09 15 52 FC | 	wrword	arg02, arg01
196e4     0F 15 0A F6 | 	mov	arg02, local01 wz
196e8     00 FA 05 A6 |  if_e	mov	result1, #0
196ec     10 15 82 51 |  if_ne	sub	arg02, local02
196f0     04 14 46 50 |  if_ne	shr	arg02, #4
196f4     0A FB 01 56 |  if_ne	mov	result1, arg02
196f8     12 15 02 F6 | 	mov	arg02, local04
196fc     06 14 06 F1 | 	add	arg02, #6
19700     0A FB 51 FC | 	wrword	result1, arg02
19704     10 25 0A F2 | 	cmp	local04, local02 wz
19708     A4 00 90 AD |  if_e	jmp	#LR__2605
1970c     12 13 02 F6 | 	mov	arg01, local04
19710     09 27 EA FA | 	rdword	local05, arg01 wz
19714     00 FA 05 A6 |  if_e	mov	result1, #0
19718     04 26 66 50 |  if_ne	shl	local05, #4
1971c     13 13 02 51 |  if_ne	add	arg01, local05
19720     09 FB 01 56 |  if_ne	mov	result1, arg01
19724     0F FB 09 F2 | 	cmp	result1, local01 wz
19728     84 00 90 5D |  if_ne	jmp	#LR__2604
1972c     12 29 E2 FA | 	rdword	local06, local04
19730     0F 15 E2 FA | 	rdword	arg02, local01
19734     0A 29 02 F1 | 	add	local06, arg02
19738     12 29 52 FC | 	wrword	local06, local04
1973c     0F 29 02 F6 | 	mov	local06, local01
19740     02 28 06 F1 | 	add	local06, #2
19744     14 01 58 FC | 	wrword	#0, local06
19748     0F 13 02 F6 | 	mov	arg01, local01
1974c     09 27 EA FA | 	rdword	local05, arg01 wz
19750     00 FA 05 A6 |  if_e	mov	result1, #0
19754     04 26 66 50 |  if_ne	shl	local05, #4
19758     13 13 02 51 |  if_ne	add	arg01, local05
1975c     09 FB 01 56 |  if_ne	mov	result1, arg01
19760     FD 28 02 F6 | 	mov	local06, result1
19764     11 29 52 F2 | 	cmps	local06, local03 wc
19768     20 00 90 3D |  if_ae	jmp	#LR__2603
1976c     12 15 0A F6 | 	mov	arg02, local04 wz
19770     00 FA 05 A6 |  if_e	mov	result1, #0
19774     10 15 82 51 |  if_ne	sub	arg02, local02
19778     04 14 46 50 |  if_ne	shr	arg02, #4
1977c     0A FB 01 56 |  if_ne	mov	result1, arg02
19780     14 15 02 F6 | 	mov	arg02, local06
19784     04 14 06 F1 | 	add	arg02, #4
19788     0A FB 51 FC | 	wrword	result1, arg02
1978c                 | LR__2603
1978c     0F 15 02 F6 | 	mov	arg02, local01
19790     06 14 06 F1 | 	add	arg02, #6
19794     12 FD 01 F6 | 	mov	result2, local04
19798     0A 15 E2 FA | 	rdword	arg02, arg02
1979c     06 FC 05 F1 | 	add	result2, #6
197a0     FE 14 52 FC | 	wrword	arg02, result2
197a4     06 1E 06 F1 | 	add	local01, #6
197a8     0F 01 58 FC | 	wrword	#0, local01
197ac     12 1F 02 F6 | 	mov	local01, local04
197b0                 | LR__2604
197b0                 | LR__2605
197b0     0F 13 02 F6 | 	mov	arg01, local01
197b4     09 27 EA FA | 	rdword	local05, arg01 wz
197b8     00 FA 05 A6 |  if_e	mov	result1, #0
197bc     04 26 66 50 |  if_ne	shl	local05, #4
197c0     13 13 02 51 |  if_ne	add	arg01, local05
197c4     09 FB 01 56 |  if_ne	mov	result1, arg01
197c8     FD 14 0A F6 | 	mov	arg02, result1 wz
197cc     B8 00 90 AD |  if_e	jmp	#LR__2607
197d0     11 15 52 F2 | 	cmps	arg02, local03 wc
197d4     B0 00 90 3D |  if_ae	jmp	#LR__2607
197d8     0A 13 02 F6 | 	mov	arg01, arg02
197dc     00 FA 05 F6 | 	mov	result1, #0
197e0     02 12 06 F1 | 	add	arg01, #2
197e4     09 13 E2 FA | 	rdword	arg01, arg01
197e8     36 00 00 FF 
197ec     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
197f0     01 FA 65 A6 |  if_e	neg	result1, #1
197f4     00 FA 0D F2 | 	cmp	result1, #0 wz
197f8     8C 00 90 AD |  if_e	jmp	#LR__2607
197fc     0F 25 02 F6 | 	mov	local04, local01
19800     12 29 E2 FA | 	rdword	local06, local04
19804     0A 13 02 F6 | 	mov	arg01, arg02
19808     09 1F E2 FA | 	rdword	local01, arg01
1980c     0F 29 02 F1 | 	add	local06, local01
19810     12 29 52 FC | 	wrword	local06, local04
19814     09 29 02 F6 | 	mov	local06, arg01
19818     06 28 06 F1 | 	add	local06, #6
1981c     12 1F 02 F6 | 	mov	local01, local04
19820     14 29 E2 FA | 	rdword	local06, local06
19824     06 1E 06 F1 | 	add	local01, #6
19828     0F 29 52 FC | 	wrword	local06, local01
1982c     09 29 02 F6 | 	mov	local06, arg01
19830     02 28 06 F1 | 	add	local06, #2
19834     14 55 59 FC | 	wrword	#170, local06
19838     09 29 02 F6 | 	mov	local06, arg01
1983c     06 28 06 F1 | 	add	local06, #6
19840     14 01 58 FC | 	wrword	#0, local06
19844     09 27 EA FA | 	rdword	local05, arg01 wz
19848     00 FA 05 A6 |  if_e	mov	result1, #0
1984c     04 26 66 50 |  if_ne	shl	local05, #4
19850     13 13 02 51 |  if_ne	add	arg01, local05
19854     09 FB 01 56 |  if_ne	mov	result1, arg01
19858     FD 28 0A F6 | 	mov	local06, result1 wz
1985c     28 00 90 AD |  if_e	jmp	#LR__2606
19860     11 29 52 F2 | 	cmps	local06, local03 wc
19864     20 00 90 3D |  if_ae	jmp	#LR__2606
19868     12 15 0A F6 | 	mov	arg02, local04 wz
1986c     00 FA 05 A6 |  if_e	mov	result1, #0
19870     10 15 82 51 |  if_ne	sub	arg02, local02
19874     04 14 46 50 |  if_ne	shr	arg02, #4
19878     0A FB 01 56 |  if_ne	mov	result1, arg02
1987c     14 25 02 F6 | 	mov	local04, local06
19880     04 24 06 F1 | 	add	local04, #4
19884     12 FB 51 FC | 	wrword	result1, local04
19888                 | LR__2606
19888                 | LR__2607
19888     14 FB 01 F6 | 	mov	result1, local06
1988c     A7 F0 03 F6 | 	mov	ptra, fp
19890     B2 00 A0 FD | 	call	#popregs_
19894                 | __system___gc_dofree_ret
19894     2D 00 64 FD | 	ret
19898                 | 
19898                 | __system___gc_docollect
19898     05 4A 05 F6 | 	mov	COUNT_, #5
1989c     A8 00 A0 FD | 	call	#pushregs_
198a0     B8 F9 BF FD | 	call	#__system___gc_ptrs
198a4     FE 1E 02 F6 | 	mov	local01, result2
198a8     FD 20 02 F6 | 	mov	local02, result1
198ac     10 13 02 F6 | 	mov	arg01, local02
198b0     09 23 EA FA | 	rdword	local03, arg01 wz
198b4     00 FA 05 A6 |  if_e	mov	result1, #0
198b8     04 22 66 50 |  if_ne	shl	local03, #4
198bc     11 13 02 51 |  if_ne	add	arg01, local03
198c0     09 FB 01 56 |  if_ne	mov	result1, arg01
198c4     FD 24 0A F6 | 	mov	local04, result1 wz
198c8     00 FA 05 F6 | 	mov	result1, #0
198cc     01 FA 61 FD | 	cogid	result1
198d0     FD 26 02 F6 | 	mov	local05, result1
198d4     48 00 90 AD |  if_e	jmp	#LR__2612
198d8     97 22 48 FB | 	callpa	#(@LR__2611-@LR__2610)>>2,fcache_load_ptr_
198dc                 | LR__2610
198dc     0F 25 52 F2 | 	cmps	local04, local01 wc
198e0     3C 00 90 3D |  if_ae	jmp	#LR__2612
198e4     12 15 02 F6 | 	mov	arg02, local04
198e8     02 14 06 F1 | 	add	arg02, #2
198ec     0A 15 E2 FA | 	rdword	arg02, arg02
198f0     20 14 26 F5 | 	andn	arg02, #32
198f4     12 13 02 F6 | 	mov	arg01, local04
198f8     02 12 06 F1 | 	add	arg01, #2
198fc     09 15 52 FC | 	wrword	arg02, arg01
19900     12 13 02 F6 | 	mov	arg01, local04
19904     09 23 EA FA | 	rdword	local03, arg01 wz
19908     00 FA 05 A6 |  if_e	mov	result1, #0
1990c     04 22 66 50 |  if_ne	shl	local03, #4
19910     11 13 02 51 |  if_ne	add	arg01, local03
19914     09 FB 01 56 |  if_ne	mov	result1, arg01
19918     FD 24 0A F6 | 	mov	local04, result1 wz
1991c     BC FF 9F 5D |  if_ne	jmp	#LR__2610
19920                 | LR__2611
19920                 | LR__2612
19920     00 22 06 F6 | 	mov	local03, #0
19924     00 12 06 F6 | 	mov	arg01, #0
19928     F4 C1 BF FD | 	call	#__system____topofstack
1992c     FD 14 02 F6 | 	mov	arg02, result1
19930     11 13 02 F6 | 	mov	arg01, local03
19934     90 00 B0 FD | 	call	#__system___gc_markhub
19938     1C 01 B0 FD | 	call	#__system___gc_markcog
1993c     10 13 02 F6 | 	mov	arg01, local02
19940     09 23 EA FA | 	rdword	local03, arg01 wz
19944     00 FA 05 A6 |  if_e	mov	result1, #0
19948     04 22 66 50 |  if_ne	shl	local03, #4
1994c     11 13 02 51 |  if_ne	add	arg01, local03
19950     09 FB 01 56 |  if_ne	mov	result1, arg01
19954     FD 20 0A F6 | 	mov	local02, result1 wz
19958     60 00 90 AD |  if_e	jmp	#LR__2616
1995c                 | LR__2613
1995c     10 25 02 F6 | 	mov	local04, local02
19960     12 13 02 F6 | 	mov	arg01, local04
19964     09 23 EA FA | 	rdword	local03, arg01 wz
19968     00 FA 05 A6 |  if_e	mov	result1, #0
1996c     04 22 66 50 |  if_ne	shl	local03, #4
19970     11 13 02 51 |  if_ne	add	arg01, local03
19974     09 FB 01 56 |  if_ne	mov	result1, arg01
19978     FD 20 02 F6 | 	mov	local02, result1
1997c     12 15 02 F6 | 	mov	arg02, local04
19980     02 14 06 F1 | 	add	arg02, #2
19984     0A 15 E2 FA | 	rdword	arg02, arg02
19988     20 14 CE F7 | 	test	arg02, #32 wz
1998c     10 14 CE A7 |  if_e	test	arg02, #16 wz
19990     1C 00 90 5D |  if_ne	jmp	#LR__2615
19994     0A 15 42 F8 | 	getnib	arg02, arg02, #0
19998     13 15 0A F2 | 	cmp	arg02, local05 wz
1999c     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
199a0     0C 00 90 5D |  if_ne	jmp	#LR__2614
199a4     12 13 02 F6 | 	mov	arg01, local04
199a8     84 FC BF FD | 	call	#__system___gc_dofree
199ac     FD 20 02 F6 | 	mov	local02, result1
199b0                 | LR__2614
199b0                 | LR__2615
199b0     00 20 0E F2 | 	cmp	local02, #0 wz
199b4     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
199b8     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__2613
199bc                 | LR__2616
199bc     A7 F0 03 F6 | 	mov	ptra, fp
199c0     B2 00 A0 FD | 	call	#popregs_
199c4                 | __system___gc_docollect_ret
199c4     2D 00 64 FD | 	ret
199c8                 | 
199c8                 | __system___gc_markhub
199c8     04 4A 05 F6 | 	mov	COUNT_, #4
199cc     A8 00 A0 FD | 	call	#pushregs_
199d0     09 1F 02 F6 | 	mov	local01, arg01
199d4     0A 21 02 F6 | 	mov	local02, arg02
199d8     80 F8 BF FD | 	call	#__system___gc_ptrs
199dc     FD 22 02 F6 | 	mov	local03, result1
199e0     FE 24 02 F6 | 	mov	local04, result2
199e4                 | LR__2620
199e4     10 1F 52 F2 | 	cmps	local01, local02 wc
199e8     60 00 90 3D |  if_ae	jmp	#LR__2621
199ec     0F 17 02 FB | 	rdlong	arg03, local01
199f0     04 1E 06 F1 | 	add	local01, #4
199f4     12 15 02 F6 | 	mov	arg02, local04
199f8     11 13 02 F6 | 	mov	arg01, local03
199fc     8C FB BF FD | 	call	#__system___gc_isvalidptr
19a00     FD 16 0A F6 | 	mov	arg03, result1 wz
19a04     DC FF 9F AD |  if_e	jmp	#LR__2620
19a08     0B 13 02 F6 | 	mov	arg01, arg03
19a0c     00 FA 05 F6 | 	mov	result1, #0
19a10     02 12 06 F1 | 	add	arg01, #2
19a14     09 13 E2 FA | 	rdword	arg01, arg01
19a18     36 00 00 FF 
19a1c     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
19a20     01 FA 65 A6 |  if_e	neg	result1, #1
19a24     00 FA 0D F2 | 	cmp	result1, #0 wz
19a28     B8 FF 9F 5D |  if_ne	jmp	#LR__2620
19a2c     0B FD 01 F6 | 	mov	result2, arg03
19a30     02 FC 05 F1 | 	add	result2, #2
19a34     FE FC E1 FA | 	rdword	result2, result2
19a38     0F FC 25 F5 | 	andn	result2, #15
19a3c     2E FC 45 F5 | 	or	result2, #46
19a40     02 16 06 F1 | 	add	arg03, #2
19a44     0B FD 51 FC | 	wrword	result2, arg03
19a48     98 FF 9F FD | 	jmp	#LR__2620
19a4c                 | LR__2621
19a4c     A7 F0 03 F6 | 	mov	ptra, fp
19a50     B2 00 A0 FD | 	call	#popregs_
19a54                 | __system___gc_markhub_ret
19a54     2D 00 64 FD | 	ret
19a58                 | 
19a58                 | __system___gc_markcog
19a58     04 4A 05 F6 | 	mov	COUNT_, #4
19a5c     A8 00 A0 FD | 	call	#pushregs_
19a60     F8 F7 BF FD | 	call	#__system___gc_ptrs
19a64     FD 1E 02 F6 | 	mov	local01, result1
19a68     FE 20 02 F6 | 	mov	local02, result2
19a6c     EF 23 06 F6 | 	mov	local03, #495
19a70                 | LR__2630
19a70                 | 	'.live	local03
19a70     00 22 96 F9 | 	alts	local03, #0
19a74     11 25 02 F6 | 	mov	local04, local03
19a78     0F 13 02 F6 | 	mov	arg01, local01
19a7c     10 15 02 F6 | 	mov	arg02, local02
19a80     12 17 02 F6 | 	mov	arg03, local04
19a84     04 FB BF FD | 	call	#__system___gc_isvalidptr
19a88     00 FA 0D F2 | 	cmp	result1, #0 wz
19a8c     18 00 90 AD |  if_e	jmp	#LR__2631
19a90     FD 24 02 F6 | 	mov	local04, result1
19a94     02 24 06 F1 | 	add	local04, #2
19a98     12 25 E2 FA | 	rdword	local04, local04
19a9c     20 24 46 F5 | 	or	local04, #32
19aa0     02 FA 05 F1 | 	add	result1, #2
19aa4     FD 24 52 FC | 	wrword	local04, result1
19aa8                 | LR__2631
19aa8     01 22 86 F1 | 	sub	local03, #1
19aac     00 22 56 F2 | 	cmps	local03, #0 wc
19ab0     BC FF 9F 3D |  if_ae	jmp	#LR__2630
19ab4     A7 F0 03 F6 | 	mov	ptra, fp
19ab8     B2 00 A0 FD | 	call	#popregs_
19abc                 | __system___gc_markcog_ret
19abc     2D 00 64 FD | 	ret
19ac0                 | 
19ac0                 | __system__opendir
19ac0     06 4A 05 F6 | 	mov	COUNT_, #6
19ac4     A8 00 A0 FD | 	call	#pushregs_
19ac8     84 E9 05 F1 | 	add	ptr___system__dat__, #388
19acc     F4 1E 02 F6 | 	mov	local01, ptr___system__dat__
19ad0     09 15 02 F6 | 	mov	arg02, arg01
19ad4     0F 13 02 F6 | 	mov	arg01, local01
19ad8     00 16 06 F6 | 	mov	arg03, #0
19adc     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
19ae0     FC C7 BF FD | 	call	#__system____getvfsforfile
19ae4     FD 20 0A F6 | 	mov	local02, result1 wz
19ae8     10 00 90 AD |  if_e	jmp	#LR__2640
19aec     28 20 06 F1 | 	add	local02, #40
19af0     10 17 0A FB | 	rdlong	arg03, local02 wz
19af4     28 20 86 F1 | 	sub	local02, #40
19af8     14 00 90 5D |  if_ne	jmp	#LR__2641
19afc                 | LR__2640
19afc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19b00     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
19b04     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19b08     00 FA 05 F6 | 	mov	result1, #0
19b0c     90 00 90 FD | 	jmp	#LR__2643
19b10                 | LR__2641
19b10     5C 12 06 F6 | 	mov	arg01, #92
19b14     10 14 06 F6 | 	mov	arg02, #16
19b18     C0 F9 BF FD | 	call	#__system___gc_doalloc
19b1c     FD 22 0A F6 | 	mov	local03, result1 wz
19b20     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
19b24     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
19b28     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
19b2c     00 FA 05 A6 |  if_e	mov	result1, #0
19b30     6C 00 90 AD |  if_e	jmp	#LR__2643
19b34     28 20 06 F1 | 	add	local02, #40
19b38     10 25 02 FB | 	rdlong	local04, local02
19b3c     12 27 02 F6 | 	mov	local05, local04
19b40     28 20 86 F1 | 	sub	local02, #40
19b44     13 26 46 F7 | 	zerox	local05, #19
19b48     14 24 46 F0 | 	shr	local04, #20
19b4c     02 24 66 F0 | 	shl	local04, #2
19b50     ED 24 02 F1 | 	add	local04, __methods__
19b54     12 25 02 FB | 	rdlong	local04, local04
19b58     11 13 02 F6 | 	mov	arg01, local03
19b5c     0F 15 02 F6 | 	mov	arg02, local01
19b60     F2 28 02 F6 | 	mov	local06, objptr
19b64     13 E5 01 F6 | 	mov	objptr, local05
19b68     2D 24 62 FD | 	call	local04
19b6c     14 E5 01 F6 | 	mov	objptr, local06
19b70     FD 16 0A F6 | 	mov	arg03, result1 wz
19b74     20 00 90 AD |  if_e	jmp	#LR__2642
19b78     00 16 4E F2 | 	cmps	arg03, #0 wz
19b7c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19b80     F4 16 62 FC | 	wrlong	arg03, ptr___system__dat__
19b84     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19b88     11 13 02 F6 | 	mov	arg01, local03
19b8c     58 FA BF FD | 	call	#__system___gc_free
19b90     00 FA 05 F6 | 	mov	result1, #0
19b94     08 00 90 FD | 	jmp	#LR__2643
19b98                 | LR__2642
19b98     11 21 62 FC | 	wrlong	local02, local03
19b9c     11 FB 01 F6 | 	mov	result1, local03
19ba0                 | LR__2643
19ba0     A7 F0 03 F6 | 	mov	ptra, fp
19ba4     B2 00 A0 FD | 	call	#popregs_
19ba8                 | __system__opendir_ret
19ba8     2D 00 64 FD | 	ret
19bac                 | 
19bac                 | __system__closedir
19bac     04 4A 05 F6 | 	mov	COUNT_, #4
19bb0     A8 00 A0 FD | 	call	#pushregs_
19bb4     09 1F 02 F6 | 	mov	local01, arg01
19bb8     0F 13 02 FB | 	rdlong	arg01, local01
19bbc     2C 12 06 F1 | 	add	arg01, #44
19bc0     09 21 02 FB | 	rdlong	local02, arg01
19bc4     10 23 02 F6 | 	mov	local03, local02
19bc8     13 22 46 F7 | 	zerox	local03, #19
19bcc     14 20 46 F0 | 	shr	local02, #20
19bd0     02 20 66 F0 | 	shl	local02, #2
19bd4     ED 20 02 F1 | 	add	local02, __methods__
19bd8     10 21 02 FB | 	rdlong	local02, local02
19bdc     0F 13 02 F6 | 	mov	arg01, local01
19be0     F2 24 02 F6 | 	mov	local04, objptr
19be4     11 E5 01 F6 | 	mov	objptr, local03
19be8     2D 20 62 FD | 	call	local02
19bec     12 E5 01 F6 | 	mov	objptr, local04
19bf0     FD 24 02 F6 | 	mov	local04, result1
19bf4     0F 13 02 F6 | 	mov	arg01, local01
19bf8     EC F9 BF FD | 	call	#__system___gc_free
19bfc     00 24 4E F2 | 	cmps	local04, #0 wz
19c00     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19c04     F4 24 62 FC | 	wrlong	local04, ptr___system__dat__
19c08     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19c0c     01 FA 65 56 |  if_ne	neg	result1, #1
19c10     00 FA 05 A6 |  if_e	mov	result1, #0
19c14     A7 F0 03 F6 | 	mov	ptra, fp
19c18     B2 00 A0 FD | 	call	#popregs_
19c1c                 | __system__closedir_ret
19c1c     2D 00 64 FD | 	ret
19c20                 | 
19c20                 | __system__readdir
19c20     04 4A 05 F6 | 	mov	COUNT_, #4
19c24     A8 00 A0 FD | 	call	#pushregs_
19c28     09 15 0A FB | 	rdlong	arg02, arg01 wz
19c2c     08 12 06 F1 | 	add	arg01, #8
19c30     09 1F 02 F6 | 	mov	local01, arg01
19c34     08 12 86 F1 | 	sub	arg01, #8
19c38     00 FA 05 A6 |  if_e	mov	result1, #0
19c3c     5C 00 90 AD |  if_e	jmp	#LR__2651
19c40     30 14 06 F1 | 	add	arg02, #48
19c44     0A 21 02 FB | 	rdlong	local02, arg02
19c48     10 23 02 F6 | 	mov	local03, local02
19c4c     13 22 46 F7 | 	zerox	local03, #19
19c50     14 20 46 F0 | 	shr	local02, #20
19c54     02 20 66 F0 | 	shl	local02, #2
19c58     ED 20 02 F1 | 	add	local02, __methods__
19c5c     10 21 02 FB | 	rdlong	local02, local02
19c60     0F 15 02 F6 | 	mov	arg02, local01
19c64     F2 24 02 F6 | 	mov	local04, objptr
19c68     11 E5 01 F6 | 	mov	objptr, local03
19c6c     2D 20 62 FD | 	call	local02
19c70     12 E5 01 F6 | 	mov	objptr, local04
19c74     00 FA 4D F2 | 	cmps	result1, #0 wz
19c78     1C 00 90 AD |  if_e	jmp	#LR__2650
19c7c     01 FA 55 F2 | 	cmps	result1, #1 wc
19c80     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
19c84     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
19c88     F4 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
19c8c     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
19c90     00 FA 05 F6 | 	mov	result1, #0
19c94     04 00 90 FD | 	jmp	#LR__2651
19c98                 | LR__2650
19c98     0F FB 01 F6 | 	mov	result1, local01
19c9c                 | LR__2651
19c9c     A7 F0 03 F6 | 	mov	ptra, fp
19ca0     B2 00 A0 FD | 	call	#popregs_
19ca4                 | __system__readdir_ret
19ca4     2D 00 64 FD | 	ret
19ca8                 | 
19ca8                 | __system___openraw
19ca8     15 4A 05 F6 | 	mov	COUNT_, #21
19cac     A8 00 A0 FD | 	call	#pushregs_
19cb0     09 1F 02 F6 | 	mov	local01, arg01
19cb4     0A 21 02 F6 | 	mov	local02, arg02
19cb8     0B 23 02 F6 | 	mov	local03, arg03
19cbc     0C 25 02 F6 | 	mov	local04, arg04
19cc0     04 26 06 F6 | 	mov	local05, #4
19cc4     0F 29 02 F6 | 	mov	local06, local01
19cc8     00 2A 06 F6 | 	mov	local07, #0
19ccc     84 E9 05 F1 | 	add	ptr___system__dat__, #388
19cd0     F4 2C 02 F6 | 	mov	local08, ptr___system__dat__
19cd4     16 13 02 F6 | 	mov	arg01, local08
19cd8     10 15 02 F6 | 	mov	arg02, local02
19cdc     00 16 06 F6 | 	mov	arg03, #0
19ce0     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
19ce4     F8 C5 BF FD | 	call	#__system____getvfsforfile
19ce8     FD 2E 0A F6 | 	mov	local09, result1 wz
19cec     10 00 90 AD |  if_e	jmp	#LR__2660
19cf0     20 2E 06 F1 | 	add	local09, #32
19cf4     17 FB 09 FB | 	rdlong	result1, local09 wz
19cf8     20 2E 86 F1 | 	sub	local09, #32
19cfc     14 00 90 5D |  if_ne	jmp	#LR__2661
19d00                 | LR__2660
19d00     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19d04     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
19d08     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19d0c     01 FA 65 F6 | 	neg	result1, #1
19d10     8C 02 90 FD | 	jmp	#LR__2674
19d14                 | LR__2661
19d14     14 13 02 F6 | 	mov	arg01, local06
19d18     00 14 06 F6 | 	mov	arg02, #0
19d1c     34 16 06 F6 | 	mov	arg03, #52
19d20     09 31 02 F6 | 	mov	local10, arg01
19d24     98 00 A0 FD | 	call	#\builtin_bytefill_
19d28     20 2E 06 F1 | 	add	local09, #32
19d2c     17 33 02 FB | 	rdlong	local11, local09
19d30     19 35 02 F6 | 	mov	local12, local11
19d34     19 37 02 F6 | 	mov	local13, local11
19d38     20 2E 86 F1 | 	sub	local09, #32
19d3c     1B 39 02 F6 | 	mov	local14, local13
19d40     13 34 46 F7 | 	zerox	local12, #19
19d44     14 38 46 F0 | 	shr	local14, #20
19d48     02 38 66 F0 | 	shl	local14, #2
19d4c     ED 38 02 F1 | 	add	local14, __methods__
19d50     1C 39 02 FB | 	rdlong	local14, local14
19d54     14 3B 02 F6 | 	mov	local15, local06
19d58     16 3D 02 F6 | 	mov	local16, local08
19d5c     11 3F 02 F6 | 	mov	local17, local03
19d60     1D 13 02 F6 | 	mov	arg01, local15
19d64     1E 15 02 F6 | 	mov	arg02, local16
19d68     1F 17 02 F6 | 	mov	arg03, local17
19d6c     F2 40 02 F6 | 	mov	local18, objptr
19d70     1A E5 01 F6 | 	mov	objptr, local12
19d74     2D 38 62 FD | 	call	local14
19d78     20 E5 01 F6 | 	mov	objptr, local18
19d7c     FD 42 0A F6 | 	mov	local19, result1 wz
19d80     04 22 CE 57 |  if_ne	test	local03, #4 wz
19d84     58 00 90 AD |  if_e	jmp	#LR__2662
19d88     24 2E 06 F1 | 	add	local09, #36
19d8c     17 33 02 FB | 	rdlong	local11, local09
19d90     19 35 02 F6 | 	mov	local12, local11
19d94     19 37 02 F6 | 	mov	local13, local11
19d98     24 2E 86 F1 | 	sub	local09, #36
19d9c     1B 39 02 F6 | 	mov	local14, local13
19da0     13 34 46 F7 | 	zerox	local12, #19
19da4     14 38 46 F0 | 	shr	local14, #20
19da8     02 38 66 F0 | 	shl	local14, #2
19dac     ED 38 02 F1 | 	add	local14, __methods__
19db0     1C 39 02 FB | 	rdlong	local14, local14
19db4     14 3B 02 F6 | 	mov	local15, local06
19db8     16 3D 02 F6 | 	mov	local16, local08
19dbc     12 3F 02 F6 | 	mov	local17, local04
19dc0     1D 13 02 F6 | 	mov	arg01, local15
19dc4     1E 15 02 F6 | 	mov	arg02, local16
19dc8     1F 17 02 F6 | 	mov	arg03, local17
19dcc     F2 40 02 F6 | 	mov	local18, objptr
19dd0     1A E5 01 F6 | 	mov	objptr, local12
19dd4     2D 38 62 FD | 	call	local14
19dd8     20 E5 01 F6 | 	mov	objptr, local18
19ddc     FD 42 02 F6 | 	mov	local19, result1
19de0                 | LR__2662
19de0     00 42 0E F2 | 	cmp	local19, #0 wz
19de4     8C 01 90 5D |  if_ne	jmp	#LR__2672
19de8     11 45 02 F6 | 	mov	local20, local03
19dec     03 44 0E F5 | 	and	local20, #3 wz
19df0     02 26 46 55 |  if_ne	or	local05, #2
19df4     01 44 0E F2 | 	cmp	local20, #1 wz
19df8     01 26 46 55 |  if_ne	or	local05, #1
19dfc     20 22 CE F7 | 	test	local03, #32 wz
19e00     C0 26 46 55 |  if_ne	or	local05, #192
19e04     08 28 06 F1 | 	add	local06, #8
19e08     14 27 62 FC | 	wrlong	local05, local06
19e0c     0C 28 06 F1 | 	add	local06, #12
19e10     14 47 0A FB | 	rdlong	local21, local06 wz
19e14     14 28 86 F1 | 	sub	local06, #20
19e18     18 00 90 5D |  if_ne	jmp	#LR__2663
19e1c     04 2E 06 F1 | 	add	local09, #4
19e20     17 47 02 FB | 	rdlong	local21, local09
19e24     04 2E 86 F1 | 	sub	local09, #4
19e28     14 28 06 F1 | 	add	local06, #20
19e2c     14 47 62 FC | 	wrlong	local21, local06
19e30     14 28 86 F1 | 	sub	local06, #20
19e34                 | LR__2663
19e34     18 28 06 F1 | 	add	local06, #24
19e38     14 47 0A FB | 	rdlong	local21, local06 wz
19e3c     18 28 86 F1 | 	sub	local06, #24
19e40     18 00 90 5D |  if_ne	jmp	#LR__2664
19e44     08 2E 06 F1 | 	add	local09, #8
19e48     17 47 02 FB | 	rdlong	local21, local09
19e4c     08 2E 86 F1 | 	sub	local09, #8
19e50     18 28 06 F1 | 	add	local06, #24
19e54     14 47 62 FC | 	wrlong	local21, local06
19e58     18 28 86 F1 | 	sub	local06, #24
19e5c                 | LR__2664
19e5c     24 28 06 F1 | 	add	local06, #36
19e60     14 47 0A FB | 	rdlong	local21, local06 wz
19e64     24 28 86 F1 | 	sub	local06, #36
19e68     17 47 02 AB |  if_e	rdlong	local21, local09
19e6c     24 28 06 A1 |  if_e	add	local06, #36
19e70     14 47 62 AC |  if_e	wrlong	local21, local06
19e74     24 28 86 A1 |  if_e	sub	local06, #36
19e78     28 28 06 F1 | 	add	local06, #40
19e7c     14 47 0A FB | 	rdlong	local21, local06 wz
19e80     28 28 86 F1 | 	sub	local06, #40
19e84     18 00 90 5D |  if_ne	jmp	#LR__2665
19e88     10 2E 06 F1 | 	add	local09, #16
19e8c     17 47 02 FB | 	rdlong	local21, local09
19e90     10 2E 86 F1 | 	sub	local09, #16
19e94     28 28 06 F1 | 	add	local06, #40
19e98     14 47 62 FC | 	wrlong	local21, local06
19e9c     28 28 86 F1 | 	sub	local06, #40
19ea0                 | LR__2665
19ea0     30 28 06 F1 | 	add	local06, #48
19ea4     14 47 0A FB | 	rdlong	local21, local06 wz
19ea8     30 28 86 F1 | 	sub	local06, #48
19eac     18 00 90 5D |  if_ne	jmp	#LR__2666
19eb0     0C 2E 06 F1 | 	add	local09, #12
19eb4     17 47 02 FB | 	rdlong	local21, local09
19eb8     0C 2E 86 F1 | 	sub	local09, #12
19ebc     30 28 06 F1 | 	add	local06, #48
19ec0     14 47 62 FC | 	wrlong	local21, local06
19ec4     30 28 86 F1 | 	sub	local06, #48
19ec8                 | LR__2666
19ec8     1C 28 06 F1 | 	add	local06, #28
19ecc     14 47 0A FB | 	rdlong	local21, local06 wz
19ed0     1C 28 86 F1 | 	sub	local06, #28
19ed4     1C 00 90 5D |  if_ne	jmp	#LR__2667
19ed8     01 2A 06 F6 | 	mov	local07, #1
19edc     F2 12 02 F6 | 	mov	arg01, objptr
19ee0     00 08 03 FF 
19ee4     00 12 46 F5 | 	or	arg01, ##101711872
19ee8     1C 28 06 F1 | 	add	local06, #28
19eec     14 13 62 FC | 	wrlong	arg01, local06
19ef0     1C 28 86 F1 | 	sub	local06, #28
19ef4                 | LR__2667
19ef4     20 28 06 F1 | 	add	local06, #32
19ef8     14 47 0A FB | 	rdlong	local21, local06 wz
19efc     20 28 86 F1 | 	sub	local06, #32
19f00     1C 00 90 5D |  if_ne	jmp	#LR__2668
19f04     01 2A 06 F6 | 	mov	local07, #1
19f08     F2 12 02 F6 | 	mov	arg01, objptr
19f0c     00 10 03 FF 
19f10     00 12 46 F5 | 	or	arg01, ##102760448
19f14     20 28 06 F1 | 	add	local06, #32
19f18     14 13 62 FC | 	wrlong	arg01, local06
19f1c     20 28 86 F1 | 	sub	local06, #32
19f20                 | LR__2668
19f20     2C 28 06 F1 | 	add	local06, #44
19f24     14 47 0A FB | 	rdlong	local21, local06 wz
19f28     2C 28 86 F1 | 	sub	local06, #44
19f2c     44 00 90 5D |  if_ne	jmp	#LR__2671
19f30     14 2E 06 F1 | 	add	local09, #20
19f34     17 47 0A FB | 	rdlong	local21, local09 wz
19f38     14 2E 86 F1 | 	sub	local09, #20
19f3c     18 00 90 AD |  if_e	jmp	#LR__2669
19f40     14 2E 06 F1 | 	add	local09, #20
19f44     17 47 02 FB | 	rdlong	local21, local09
19f48     2C 28 06 F1 | 	add	local06, #44
19f4c     14 47 62 FC | 	wrlong	local21, local06
19f50     2C 28 86 F1 | 	sub	local06, #44
19f54     1C 00 90 FD | 	jmp	#LR__2670
19f58                 | LR__2669
19f58     01 2A 06 F6 | 	mov	local07, #1
19f5c     F2 12 02 F6 | 	mov	arg01, objptr
19f60     00 18 03 FF 
19f64     00 12 46 F5 | 	or	arg01, ##103809024
19f68     2C 28 06 F1 | 	add	local06, #44
19f6c     14 13 62 FC | 	wrlong	arg01, local06
19f70     2C 28 86 F1 | 	sub	local06, #44
19f74                 | LR__2670
19f74                 | LR__2671
19f74                 | LR__2672
19f74     00 2A 0E F2 | 	cmp	local07, #0 wz
19f78     14 13 02 56 |  if_ne	mov	arg01, local06
19f7c     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
19f80     00 42 0E F2 | 	cmp	local19, #0 wz
19f84     00 12 06 A6 |  if_e	mov	arg01, #0
19f88     10 00 90 5D |  if_ne	jmp	#LR__2673
19f8c     00 12 4E F2 | 	cmps	arg01, #0 wz
19f90     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19f94     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
19f98     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19f9c                 | LR__2673
19f9c     21 FB 01 F6 | 	mov	result1, local19
19fa0                 | LR__2674
19fa0     A7 F0 03 F6 | 	mov	ptra, fp
19fa4     B2 00 A0 FD | 	call	#popregs_
19fa8                 | __system___openraw_ret
19fa8     2D 00 64 FD | 	ret
19fac                 | 
19fac                 | __system___closeraw
19fac     05 4A 05 F6 | 	mov	COUNT_, #5
19fb0     A8 00 A0 FD | 	call	#pushregs_
19fb4     09 1F 02 F6 | 	mov	local01, arg01
19fb8     00 20 06 F6 | 	mov	local02, #0
19fbc     08 1E 06 F1 | 	add	local01, #8
19fc0     0F FB 09 FB | 	rdlong	result1, local01 wz
19fc4     08 1E 86 F1 | 	sub	local01, #8
19fc8     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
19fcc     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
19fd0     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
19fd4     01 FA 65 A6 |  if_e	neg	result1, #1
19fd8     A8 00 90 AD |  if_e	jmp	#LR__2682
19fdc     2C 1E 06 F1 | 	add	local01, #44
19fe0     0F FB 09 FB | 	rdlong	result1, local01 wz
19fe4     2C 1E 86 F1 | 	sub	local01, #44
19fe8     38 00 90 AD |  if_e	jmp	#LR__2680
19fec     2C 1E 06 F1 | 	add	local01, #44
19ff0     0F 23 02 FB | 	rdlong	local03, local01
19ff4     11 25 02 F6 | 	mov	local04, local03
19ff8     2C 1E 86 F1 | 	sub	local01, #44
19ffc     13 24 46 F7 | 	zerox	local04, #19
1a000     14 22 46 F0 | 	shr	local03, #20
1a004     02 22 66 F0 | 	shl	local03, #2
1a008     ED 22 02 F1 | 	add	local03, __methods__
1a00c     11 23 02 FB | 	rdlong	local03, local03
1a010     0F 13 02 F6 | 	mov	arg01, local01
1a014     F2 26 02 F6 | 	mov	local05, objptr
1a018     12 E5 01 F6 | 	mov	objptr, local04
1a01c     2D 22 62 FD | 	call	local03
1a020     13 E5 01 F6 | 	mov	objptr, local05
1a024                 | LR__2680
1a024     24 1E 06 F1 | 	add	local01, #36
1a028     0F 27 0A FB | 	rdlong	local05, local01 wz
1a02c     24 1E 86 F1 | 	sub	local01, #36
1a030     3C 00 90 AD |  if_e	jmp	#LR__2681
1a034     24 1E 06 F1 | 	add	local01, #36
1a038     0F 23 02 FB | 	rdlong	local03, local01
1a03c     11 25 02 F6 | 	mov	local04, local03
1a040     24 1E 86 F1 | 	sub	local01, #36
1a044     13 24 46 F7 | 	zerox	local04, #19
1a048     14 22 46 F0 | 	shr	local03, #20
1a04c     02 22 66 F0 | 	shl	local03, #2
1a050     ED 22 02 F1 | 	add	local03, __methods__
1a054     11 23 02 FB | 	rdlong	local03, local03
1a058     0F 13 02 F6 | 	mov	arg01, local01
1a05c     F2 26 02 F6 | 	mov	local05, objptr
1a060     12 E5 01 F6 | 	mov	objptr, local04
1a064     2D 22 62 FD | 	call	local03
1a068     13 E5 01 F6 | 	mov	objptr, local05
1a06c     FD 20 02 F6 | 	mov	local02, result1
1a070                 | LR__2681
1a070     0F 13 02 F6 | 	mov	arg01, local01
1a074     00 14 06 F6 | 	mov	arg02, #0
1a078     34 16 06 F6 | 	mov	arg03, #52
1a07c     98 00 A0 FD | 	call	#\builtin_bytefill_
1a080     10 FB 01 F6 | 	mov	result1, local02
1a084                 | LR__2682
1a084     A7 F0 03 F6 | 	mov	ptra, fp
1a088     B2 00 A0 FD | 	call	#popregs_
1a08c                 | __system___closeraw_ret
1a08c     2D 00 64 FD | 	ret
1a090                 | 
1a090                 | __system___vfs_open_sdcardx
1a090     0B 4A 05 F6 | 	mov	COUNT_, #11
1a094     A8 00 A0 FD | 	call	#pushregs_
1a098     09 23 02 F6 | 	mov	local03, arg01
1a09c     0A 25 02 F6 | 	mov	local04, arg02
1a0a0     0B 27 02 F6 | 	mov	local05, arg03
1a0a4     0C 29 02 F6 | 	mov	local06, arg04
1a0a8     01 00 00 FF 
1a0ac     24 12 06 F6 | 	mov	arg01, ##548
1a0b0     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
1a0b4     FD 2A 02 F6 | 	mov	local07, result1
1a0b8     01 00 00 FF 
1a0bc     34 12 06 F6 | 	mov	arg01, ##564
1a0c0     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
1a0c4     FD 2C 02 F6 | 	mov	local08, result1
1a0c8     11 19 02 F6 | 	mov	arg04, local03
1a0cc     1F 18 C6 F0 | 	sar	arg04, #31
1a0d0     11 17 02 F6 | 	mov	arg03, local03
1a0d4     01 12 06 F6 | 	mov	arg01, #1
1a0d8     00 14 06 F6 | 	mov	arg02, #0
1a0dc     98 DF BF FD | 	call	#__system___int64_shl
1a0e0     FD 1E 02 F6 | 	mov	local01, result1
1a0e4     FE 2E 02 F6 | 	mov	local09, result2
1a0e8     12 19 02 F6 | 	mov	arg04, local04
1a0ec     1F 18 C6 F0 | 	sar	arg04, #31
1a0f0     12 17 02 F6 | 	mov	arg03, local04
1a0f4     01 12 06 F6 | 	mov	arg01, #1
1a0f8     00 14 06 F6 | 	mov	arg02, #0
1a0fc     78 DF BF FD | 	call	#__system___int64_shl
1a100     FD 1E 42 F5 | 	or	local01, result1
1a104     FE 2E 42 F5 | 	or	local09, result2
1a108     13 19 02 F6 | 	mov	arg04, local05
1a10c     1F 18 C6 F0 | 	sar	arg04, #31
1a110     13 17 02 F6 | 	mov	arg03, local05
1a114     01 12 06 F6 | 	mov	arg01, #1
1a118     00 14 06 F6 | 	mov	arg02, #0
1a11c     58 DF BF FD | 	call	#__system___int64_shl
1a120     FD 1E 42 F5 | 	or	local01, result1
1a124     FE 2E 42 F5 | 	or	local09, result2
1a128     14 19 02 F6 | 	mov	arg04, local06
1a12c     1F 18 C6 F0 | 	sar	arg04, #31
1a130     14 17 02 F6 | 	mov	arg03, local06
1a134     01 12 06 F6 | 	mov	arg01, #1
1a138     00 14 06 F6 | 	mov	arg02, #0
1a13c     38 DF BF FD | 	call	#__system___int64_shl
1a140     17 15 02 F6 | 	mov	arg02, local09
1a144     FD 1E 42 F5 | 	or	local01, result1
1a148     0A FD 41 F5 | 	or	result2, arg02
1a14c     FE 20 02 F6 | 	mov	local02, result2
1a150     0F 13 02 F6 | 	mov	arg01, local01
1a154     10 15 02 F6 | 	mov	arg02, local02
1a158     54 DF BF FD | 	call	#__system___usepins
1a15c     00 FA 0D F2 | 	cmp	result1, #0 wz
1a160     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1a164     F4 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
1a168     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1a16c     00 FA 05 A6 |  if_e	mov	result1, #0
1a170     B4 00 90 AD |  if_e	jmp	#LR__2692
1a174     0F 31 02 F6 | 	mov	local10, local01
1a178     10 2F 02 F6 | 	mov	local09, local02
1a17c     01 00 00 FF 
1a180     08 2A 06 F1 | 	add	local07, ##520
1a184     15 31 62 FC | 	wrlong	local10, local07
1a188     04 2A 06 F1 | 	add	local07, #4
1a18c     15 2F 62 FC | 	wrlong	local09, local07
1a190     01 00 00 FF 
1a194     0C 2A 86 F1 | 	sub	local07, ##524
1a198     14 1B 02 F6 | 	mov	arg05, local06
1a19c     00 12 06 F6 | 	mov	arg01, #0
1a1a0     11 15 02 F6 | 	mov	arg02, local03
1a1a4     12 17 02 F6 | 	mov	arg03, local04
1a1a8     13 19 02 F6 | 	mov	arg04, local05
1a1ac     F2 30 02 F6 | 	mov	local10, objptr
1a1b0     15 E5 01 F6 | 	mov	objptr, local07
1a1b4     94 26 B0 FD | 	call	#_fatfs_cc_disk_setpins
1a1b8     18 E5 01 F6 | 	mov	objptr, local10
1a1bc     FD 32 0A F6 | 	mov	local11, result1 wz
1a1c0     24 00 90 5D |  if_ne	jmp	#LR__2690
1a1c4     25 01 00 FF 
1a1c8     92 15 06 F6 | 	mov	arg02, ##@LR__4077
1a1cc     16 13 02 F6 | 	mov	arg01, local08
1a1d0     00 16 06 F6 | 	mov	arg03, #0
1a1d4     F2 32 02 F6 | 	mov	local11, objptr
1a1d8     15 E5 01 F6 | 	mov	objptr, local07
1a1dc     C4 5D B0 FD | 	call	#_fatfs_cc_f_mount
1a1e0     19 E5 01 F6 | 	mov	objptr, local11
1a1e4     FD 32 02 F6 | 	mov	local11, result1
1a1e8                 | LR__2690
1a1e8     00 32 0E F2 | 	cmp	local11, #0 wz
1a1ec     24 00 90 AD |  if_e	jmp	#LR__2691
1a1f0     0F 13 02 F6 | 	mov	arg01, local01
1a1f4     10 15 02 F6 | 	mov	arg02, local02
1a1f8     08 DF BF FD | 	call	#__system___freepins
1a1fc     19 13 6A F6 | 	neg	arg01, local11 wz
1a200     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1a204     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1a208     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1a20c     00 FA 05 F6 | 	mov	result1, #0
1a210     14 00 90 FD | 	jmp	#LR__2692
1a214                 | LR__2691
1a214     15 13 02 F6 | 	mov	arg01, local07
1a218     F2 32 02 F6 | 	mov	local11, objptr
1a21c     15 E5 01 F6 | 	mov	objptr, local07
1a220     60 9A B0 FD | 	call	#_fatfs_cc_get_vfs
1a224     19 E5 01 F6 | 	mov	objptr, local11
1a228                 | LR__2692
1a228     A7 F0 03 F6 | 	mov	ptra, fp
1a22c     B2 00 A0 FD | 	call	#popregs_
1a230                 | __system___vfs_open_sdcardx_ret
1a230     2D 00 64 FD | 	ret
1a234                 | 
1a234                 | __system____default_getc
1a234     03 4A 05 F6 | 	mov	COUNT_, #3
1a238     A8 00 A0 FD | 	call	#pushregs_
1a23c     09 1F 02 F6 | 	mov	local01, arg01
1a240     0F 21 02 FB | 	rdlong	local02, local01
1a244     08 20 06 F1 | 	add	local02, #8
1a248     10 23 02 FB | 	rdlong	local03, local02
1a24c     02 22 CE F7 | 	test	local03, #2 wz
1a250     0F 13 02 56 |  if_ne	mov	arg01, local01
1a254     00 01 B0 5D |  if_ne	call	#__system____default_flush
1a258     10 23 02 FB | 	rdlong	local03, local02
1a25c     01 22 46 F5 | 	or	local03, #1
1a260     10 23 62 FC | 	wrlong	local03, local02
1a264     08 20 86 F1 | 	sub	local02, #8
1a268     10 23 0A FB | 	rdlong	local03, local02 wz
1a26c     0C 00 90 5D |  if_ne	jmp	#LR__2700
1a270     0F 13 02 F6 | 	mov	arg01, local01
1a274     7C 15 B0 FD | 	call	#__system____default_filbuf
1a278     FD 22 02 F6 | 	mov	local03, result1
1a27c                 | LR__2700
1a27c     01 22 56 F2 | 	cmps	local03, #1 wc
1a280     01 FA 65 C6 |  if_b	neg	result1, #1
1a284     1C 00 90 CD |  if_b	jmp	#LR__2701
1a288     01 22 86 F1 | 	sub	local03, #1
1a28c     10 23 62 FC | 	wrlong	local03, local02
1a290     04 20 06 F1 | 	add	local02, #4
1a294     10 23 02 FB | 	rdlong	local03, local02
1a298     11 FB C1 FA | 	rdbyte	result1, local03
1a29c     01 22 06 F1 | 	add	local03, #1
1a2a0     10 23 62 FC | 	wrlong	local03, local02
1a2a4                 | LR__2701
1a2a4     A7 F0 03 F6 | 	mov	ptra, fp
1a2a8     B2 00 A0 FD | 	call	#popregs_
1a2ac                 | __system____default_getc_ret
1a2ac     2D 00 64 FD | 	ret
1a2b0                 | 
1a2b0                 | __system____default_putc
1a2b0     06 4A 05 F6 | 	mov	COUNT_, #6
1a2b4     A8 00 A0 FD | 	call	#pushregs_
1a2b8     09 1F 02 F6 | 	mov	local01, arg01
1a2bc     0A 21 02 F6 | 	mov	local02, arg02
1a2c0     10 23 02 FB | 	rdlong	local03, local02
1a2c4     08 22 06 F1 | 	add	local03, #8
1a2c8     11 FB 01 FB | 	rdlong	result1, local03
1a2cc     01 FA CD F7 | 	test	result1, #1 wz
1a2d0     10 13 02 56 |  if_ne	mov	arg01, local02
1a2d4     80 00 B0 5D |  if_ne	call	#__system____default_flush
1a2d8     11 25 02 FB | 	rdlong	local04, local03
1a2dc     02 24 46 F5 | 	or	local04, #2
1a2e0     11 25 62 FC | 	wrlong	local04, local03
1a2e4     08 22 86 F1 | 	sub	local03, #8
1a2e8     11 27 02 FB | 	rdlong	local05, local03
1a2ec     10 22 06 F1 | 	add	local03, #16
1a2f0     11 15 02 FB | 	rdlong	arg02, local03
1a2f4     10 22 86 F1 | 	sub	local03, #16
1a2f8     13 FB 01 F6 | 	mov	result1, local05
1a2fc     0A FB 01 F1 | 	add	result1, arg02
1a300     FD 1E 42 FC | 	wrbyte	local01, result1
1a304     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1a308     01 26 06 F1 | 	add	local05, #1
1a30c     11 27 62 FC | 	wrlong	local05, local03
1a310     06 20 06 F1 | 	add	local02, #6
1a314     10 29 EA FA | 	rdword	local06, local02 wz
1a318     06 20 86 F1 | 	sub	local02, #6
1a31c     0C 22 06 51 |  if_ne	add	local03, #12
1a320     11 25 02 5B |  if_ne	rdlong	local04, local03
1a324     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
1a328     0C 00 90 AD |  if_e	jmp	#LR__2710
1a32c     0A 1E 0E F2 | 	cmp	local01, #10 wz
1a330     01 28 0E A2 |  if_e	cmp	local06, #1 wz
1a334     10 00 90 5D |  if_ne	jmp	#LR__2711
1a338                 | LR__2710
1a338     10 13 02 F6 | 	mov	arg01, local02
1a33c     18 00 B0 FD | 	call	#__system____default_flush
1a340     00 FA 0D F2 | 	cmp	result1, #0 wz
1a344     01 1E 66 56 |  if_ne	neg	local01, #1
1a348                 | LR__2711
1a348     0F FB 01 F6 | 	mov	result1, local01
1a34c     A7 F0 03 F6 | 	mov	ptra, fp
1a350     B2 00 A0 FD | 	call	#popregs_
1a354                 | __system____default_putc_ret
1a354     2D 00 64 FD | 	ret
1a358                 | 
1a358                 | __system____default_flush
1a358     06 4A 05 F6 | 	mov	COUNT_, #6
1a35c     A8 00 A0 FD | 	call	#pushregs_
1a360     09 1F 02 F6 | 	mov	local01, arg01
1a364     0F 21 02 FB | 	rdlong	local02, local01
1a368     10 23 02 FB | 	rdlong	local03, local02
1a36c     08 20 06 F1 | 	add	local02, #8
1a370     10 FB 01 FB | 	rdlong	result1, local02
1a374     08 20 86 F1 | 	sub	local02, #8
1a378     02 FA CD F7 | 	test	result1, #2 wz
1a37c     D0 00 90 AD |  if_e	jmp	#LR__2722
1a380     01 22 56 F2 | 	cmps	local03, #1 wc
1a384     20 01 90 CD |  if_b	jmp	#LR__2724
1a388     08 1E 06 F1 | 	add	local01, #8
1a38c     0F FB 01 FB | 	rdlong	result1, local01
1a390     08 1E 86 F1 | 	sub	local01, #8
1a394     40 FA CD F7 | 	test	result1, #64 wz
1a398     68 00 90 AD |  if_e	jmp	#LR__2721
1a39c     08 1E 06 F1 | 	add	local01, #8
1a3a0     0F 17 02 FB | 	rdlong	arg03, local01
1a3a4     08 1E 86 F1 | 	sub	local01, #8
1a3a8     80 16 CE F7 | 	test	arg03, #128 wz
1a3ac     54 00 90 AD |  if_e	jmp	#LR__2720
1a3b0     30 1E 06 F1 | 	add	local01, #48
1a3b4     0F 25 02 FB | 	rdlong	local04, local01
1a3b8     12 27 02 F6 | 	mov	local05, local04
1a3bc     30 1E 86 F1 | 	sub	local01, #48
1a3c0     13 26 46 F7 | 	zerox	local05, #19
1a3c4     14 24 46 F0 | 	shr	local04, #20
1a3c8     02 24 66 F0 | 	shl	local04, #2
1a3cc     ED 24 02 F1 | 	add	local04, __methods__
1a3d0     12 25 02 FB | 	rdlong	local04, local04
1a3d4     0F 13 02 F6 | 	mov	arg01, local01
1a3d8     00 14 06 F6 | 	mov	arg02, #0
1a3dc     02 16 06 F6 | 	mov	arg03, #2
1a3e0     F2 28 02 F6 | 	mov	local06, objptr
1a3e4     13 E5 01 F6 | 	mov	objptr, local05
1a3e8     2D 24 62 FD | 	call	local04
1a3ec     14 E5 01 F6 | 	mov	objptr, local06
1a3f0     08 1E 06 F1 | 	add	local01, #8
1a3f4     0F 29 02 FB | 	rdlong	local06, local01
1a3f8     80 28 26 F5 | 	andn	local06, #128
1a3fc     0F 29 62 FC | 	wrlong	local06, local01
1a400     08 1E 86 F1 | 	sub	local01, #8
1a404                 | LR__2720
1a404                 | LR__2721
1a404     18 1E 06 F1 | 	add	local01, #24
1a408     0F 25 02 FB | 	rdlong	local04, local01
1a40c     12 27 02 F6 | 	mov	local05, local04
1a410     18 1E 86 F1 | 	sub	local01, #24
1a414     13 26 46 F7 | 	zerox	local05, #19
1a418     14 24 46 F0 | 	shr	local04, #20
1a41c     02 24 66 F0 | 	shl	local04, #2
1a420     ED 24 02 F1 | 	add	local04, __methods__
1a424     12 25 02 FB | 	rdlong	local04, local04
1a428     10 20 06 F1 | 	add	local02, #16
1a42c     10 15 02 FB | 	rdlong	arg02, local02
1a430     10 20 86 F1 | 	sub	local02, #16
1a434     0F 13 02 F6 | 	mov	arg01, local01
1a438     11 17 02 F6 | 	mov	arg03, local03
1a43c     F2 28 02 F6 | 	mov	local06, objptr
1a440     13 E5 01 F6 | 	mov	objptr, local05
1a444     2D 24 62 FD | 	call	local04
1a448     14 E5 01 F6 | 	mov	objptr, local06
1a44c     58 00 90 FD | 	jmp	#LR__2724
1a450                 | LR__2722
1a450     08 20 06 F1 | 	add	local02, #8
1a454     10 29 02 FB | 	rdlong	local06, local02
1a458     08 20 86 F1 | 	sub	local02, #8
1a45c     01 28 CE F7 | 	test	local06, #1 wz
1a460     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
1a464     40 00 90 AD |  if_e	jmp	#LR__2723
1a468     30 1E 06 F1 | 	add	local01, #48
1a46c     0F 25 02 FB | 	rdlong	local04, local01
1a470     12 27 02 F6 | 	mov	local05, local04
1a474     30 1E 86 F1 | 	sub	local01, #48
1a478     13 26 46 F7 | 	zerox	local05, #19
1a47c     14 24 46 F0 | 	shr	local04, #20
1a480     02 24 66 F0 | 	shl	local04, #2
1a484     ED 24 02 F1 | 	add	local04, __methods__
1a488     12 25 02 FB | 	rdlong	local04, local04
1a48c     0F 13 02 F6 | 	mov	arg01, local01
1a490     11 15 62 F6 | 	neg	arg02, local03
1a494     01 16 06 F6 | 	mov	arg03, #1
1a498     F2 28 02 F6 | 	mov	local06, objptr
1a49c     13 E5 01 F6 | 	mov	objptr, local05
1a4a0     2D 24 62 FD | 	call	local04
1a4a4     14 E5 01 F6 | 	mov	objptr, local06
1a4a8                 | LR__2723
1a4a8                 | LR__2724
1a4a8     10 01 68 FC | 	wrlong	#0, local02
1a4ac     04 20 06 F1 | 	add	local02, #4
1a4b0     10 01 68 FC | 	wrlong	#0, local02
1a4b4     04 20 06 F1 | 	add	local02, #4
1a4b8     10 01 68 FC | 	wrlong	#0, local02
1a4bc     00 FA 05 F6 | 	mov	result1, #0
1a4c0     A7 F0 03 F6 | 	mov	ptra, fp
1a4c4     B2 00 A0 FD | 	call	#popregs_
1a4c8                 | __system____default_flush_ret
1a4c8     2D 00 64 FD | 	ret
1a4cc                 | 
1a4cc                 | __system____default_buffer_init
1a4cc     02 4A 05 F6 | 	mov	COUNT_, #2
1a4d0     A8 00 A0 FD | 	call	#pushregs_
1a4d4     09 1F 02 F6 | 	mov	local01, arg01
1a4d8     0F 21 02 FB | 	rdlong	local02, local01
1a4dc     0F 13 02 F6 | 	mov	arg01, local01
1a4e0     F8 02 B0 FD | 	call	#__system___isatty
1a4e4     00 FA 0D F2 | 	cmp	result1, #0 wz
1a4e8     06 1E 06 51 |  if_ne	add	local01, #6
1a4ec     0F 0B 58 5C |  if_ne	wrword	#5, local01
1a4f0     06 1E 06 A1 |  if_e	add	local01, #6
1a4f4     0F 0D 58 AC |  if_e	wrword	#6, local01
1a4f8     14 20 06 F1 | 	add	local02, #20
1a4fc     10 1F 02 F6 | 	mov	local01, local02
1a500     04 20 86 F1 | 	sub	local02, #4
1a504     10 1F 62 FC | 	wrlong	local01, local02
1a508     04 20 86 F1 | 	sub	local02, #4
1a50c     02 00 80 FF 
1a510     10 01 68 FC | 	wrlong	##1024, local02
1a514     00 FA 05 F6 | 	mov	result1, #0
1a518     A7 F0 03 F6 | 	mov	ptra, fp
1a51c     B2 00 A0 FD | 	call	#popregs_
1a520                 | __system____default_buffer_init_ret
1a520     2D 00 64 FD | 	ret
1a524                 | 
1a524                 | __system__stat
1a524     04 4A 05 F6 | 	mov	COUNT_, #4
1a528     A8 00 A0 FD | 	call	#pushregs_
1a52c     0A 1F 02 F6 | 	mov	local01, arg02
1a530     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1a534     F4 20 02 F6 | 	mov	local02, ptr___system__dat__
1a538     09 15 02 F6 | 	mov	arg02, arg01
1a53c     10 13 02 F6 | 	mov	arg01, local02
1a540     00 16 06 F6 | 	mov	arg03, #0
1a544     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1a548     94 BD BF FD | 	call	#__system____getvfsforfile
1a54c     FD 22 0A F6 | 	mov	local03, result1 wz
1a550     10 00 90 AD |  if_e	jmp	#LR__2730
1a554     34 22 06 F1 | 	add	local03, #52
1a558     11 17 0A FB | 	rdlong	arg03, local03 wz
1a55c     34 22 86 F1 | 	sub	local03, #52
1a560     14 00 90 5D |  if_ne	jmp	#LR__2731
1a564                 | LR__2730
1a564     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1a568     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1a56c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1a570     01 FA 65 F6 | 	neg	result1, #1
1a574     68 00 90 FD | 	jmp	#LR__2732
1a578                 | LR__2731
1a578     0F 13 02 F6 | 	mov	arg01, local01
1a57c     00 14 06 F6 | 	mov	arg02, #0
1a580     30 16 06 F6 | 	mov	arg03, #48
1a584     09 25 02 F6 | 	mov	local04, arg01
1a588     98 00 A0 FD | 	call	#\builtin_bytefill_
1a58c     12 FB 01 F6 | 	mov	result1, local04
1a590     10 13 CA FA | 	rdbyte	arg01, local02 wz
1a594     08 1E 06 A1 |  if_e	add	local01, #8
1a598     08 00 80 AF 
1a59c     0F FF 6B AC |  if_e	wrlong	##4607, local01
1a5a0     00 FA 05 A6 |  if_e	mov	result1, #0
1a5a4     38 00 90 AD |  if_e	jmp	#LR__2732
1a5a8     34 22 06 F1 | 	add	local03, #52
1a5ac     11 23 02 FB | 	rdlong	local03, local03
1a5b0     11 25 02 F6 | 	mov	local04, local03
1a5b4     13 22 46 F7 | 	zerox	local03, #19
1a5b8     14 24 46 F0 | 	shr	local04, #20
1a5bc     02 24 66 F0 | 	shl	local04, #2
1a5c0     ED 24 02 F1 | 	add	local04, __methods__
1a5c4     12 25 02 FB | 	rdlong	local04, local04
1a5c8     10 13 02 F6 | 	mov	arg01, local02
1a5cc     0F 15 02 F6 | 	mov	arg02, local01
1a5d0     F2 20 02 F6 | 	mov	local02, objptr
1a5d4     11 E5 01 F6 | 	mov	objptr, local03
1a5d8     2D 24 62 FD | 	call	local04
1a5dc     10 E5 01 F6 | 	mov	objptr, local02
1a5e0                 | LR__2732
1a5e0     A7 F0 03 F6 | 	mov	ptra, fp
1a5e4     B2 00 A0 FD | 	call	#popregs_
1a5e8                 | __system__stat_ret
1a5e8     2D 00 64 FD | 	ret
1a5ec                 | 
1a5ec                 | __system__read
1a5ec     0A 12 16 F2 | 	cmp	arg01, #10 wc
1a5f0     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1a5f4     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1a5f8     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1a5fc     01 FA 65 36 |  if_ae	neg	result1, #1
1a600     20 00 90 3D |  if_ae	jmp	#LR__2740
1a604     34 12 06 FD | 	qmul	arg01, #52
1a608     02 00 00 FF 
1a60c     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1a610     18 12 62 FD | 	getqx	arg01
1a614     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1a618     02 00 00 FF 
1a61c     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1a620     E8 0E B0 FD | 	call	#__system___vfsread
1a624                 | LR__2740
1a624                 | __system__read_ret
1a624     2D 00 64 FD | 	ret
1a628                 | 
1a628                 | __system__close
1a628     0A 12 16 F2 | 	cmp	arg01, #10 wc
1a62c     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1a630     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1a634     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1a638     01 FA 65 36 |  if_ae	neg	result1, #1
1a63c     20 00 90 3D |  if_ae	jmp	#LR__2750
1a640     34 12 06 FD | 	qmul	arg01, #52
1a644     02 00 00 FF 
1a648     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1a64c     18 12 62 FD | 	getqx	arg01
1a650     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1a654     02 00 00 FF 
1a658     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1a65c     4C F9 BF FD | 	call	#__system___closeraw
1a660                 | LR__2750
1a660                 | __system__close_ret
1a660     2D 00 64 FD | 	ret
1a664                 | 
1a664                 | __system__lseek
1a664     06 4A 05 F6 | 	mov	COUNT_, #6
1a668     A8 00 A0 FD | 	call	#pushregs_
1a66c     0A 12 16 F2 | 	cmp	arg01, #10 wc
1a670     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1a674     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1a678     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1a67c     01 FA 65 36 |  if_ae	neg	result1, #1
1a680     C4 00 90 3D |  if_ae	jmp	#LR__2761
1a684     34 12 06 FD | 	qmul	arg01, #52
1a688     02 00 00 FF 
1a68c     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1a690     18 1E 62 FD | 	getqx	local01
1a694     F4 1E 02 F1 | 	add	local01, ptr___system__dat__
1a698     30 1E 06 F1 | 	add	local01, #48
1a69c     0F 13 0A FB | 	rdlong	arg01, local01 wz
1a6a0     30 1E 86 F1 | 	sub	local01, #48
1a6a4     02 00 00 FF 
1a6a8     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1a6ac     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1a6b0     F4 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
1a6b4     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1a6b8     01 FA 65 A6 |  if_e	neg	result1, #1
1a6bc     88 00 90 AD |  if_e	jmp	#LR__2761
1a6c0     08 1E 06 F1 | 	add	local01, #8
1a6c4     0F 21 02 FB | 	rdlong	local02, local01
1a6c8     08 1E 86 F1 | 	sub	local01, #8
1a6cc     40 20 CE F7 | 	test	local02, #64 wz
1a6d0     08 1E 06 51 |  if_ne	add	local01, #8
1a6d4     0F 21 02 5B |  if_ne	rdlong	local02, local01
1a6d8     80 20 46 55 |  if_ne	or	local02, #128
1a6dc     0F 21 62 5C |  if_ne	wrlong	local02, local01
1a6e0     08 1E 86 51 |  if_ne	sub	local01, #8
1a6e4     30 1E 06 F1 | 	add	local01, #48
1a6e8     0F 23 02 FB | 	rdlong	local03, local01
1a6ec     11 25 02 F6 | 	mov	local04, local03
1a6f0     30 1E 86 F1 | 	sub	local01, #48
1a6f4     13 24 46 F7 | 	zerox	local04, #19
1a6f8     14 22 46 F0 | 	shr	local03, #20
1a6fc     02 22 66 F0 | 	shl	local03, #2
1a700     ED 22 02 F1 | 	add	local03, __methods__
1a704     11 23 02 FB | 	rdlong	local03, local03
1a708     0F 13 02 F6 | 	mov	arg01, local01
1a70c     F2 26 02 F6 | 	mov	local05, objptr
1a710     12 E5 01 F6 | 	mov	objptr, local04
1a714     2D 22 62 FD | 	call	local03
1a718     13 E5 01 F6 | 	mov	objptr, local05
1a71c     FD 28 02 F6 | 	mov	local06, result1
1a720     00 28 56 F2 | 	cmps	local06, #0 wc
1a724     1C 00 90 3D |  if_ae	jmp	#LR__2760
1a728     14 13 6A F6 | 	neg	arg01, local06 wz
1a72c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1a730     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1a734     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1a738     01 FA 65 56 |  if_ne	neg	result1, #1
1a73c     00 FA 05 A6 |  if_e	mov	result1, #0
1a740     04 00 90 FD | 	jmp	#LR__2761
1a744                 | LR__2760
1a744     14 FB 01 F6 | 	mov	result1, local06
1a748                 | LR__2761
1a748     A7 F0 03 F6 | 	mov	ptra, fp
1a74c     B2 00 A0 FD | 	call	#popregs_
1a750                 | __system__lseek_ret
1a750     2D 00 64 FD | 	ret
1a754                 | 
1a754                 | __system___ioctl
1a754     03 4A 05 F6 | 	mov	COUNT_, #3
1a758     A8 00 A0 FD | 	call	#pushregs_
1a75c     00 12 4E F2 | 	cmps	arg01, #0 wz
1a760     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1a764     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
1a768     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1a76c     01 FA 65 A6 |  if_e	neg	result1, #1
1a770     5C 00 90 AD |  if_e	jmp	#LR__2771
1a774     28 12 06 F1 | 	add	arg01, #40
1a778     09 1F 02 FB | 	rdlong	local01, arg01
1a77c     0F 21 02 F6 | 	mov	local02, local01
1a780     28 12 86 F1 | 	sub	arg01, #40
1a784     13 20 46 F7 | 	zerox	local02, #19
1a788     14 1E 46 F0 | 	shr	local01, #20
1a78c     02 1E 66 F0 | 	shl	local01, #2
1a790     ED 1E 02 F1 | 	add	local01, __methods__
1a794     0F 1F 02 FB | 	rdlong	local01, local01
1a798     F2 22 02 F6 | 	mov	local03, objptr
1a79c     10 E5 01 F6 | 	mov	objptr, local02
1a7a0     2D 1E 62 FD | 	call	local01
1a7a4     11 E5 01 F6 | 	mov	objptr, local03
1a7a8     FD 12 0A F6 | 	mov	arg01, result1 wz
1a7ac     1C 00 90 AD |  if_e	jmp	#LR__2770
1a7b0     00 12 4E F2 | 	cmps	arg01, #0 wz
1a7b4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1a7b8     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1a7bc     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1a7c0     01 FA 65 56 |  if_ne	neg	result1, #1
1a7c4     00 FA 05 A6 |  if_e	mov	result1, #0
1a7c8     04 00 90 FD | 	jmp	#LR__2771
1a7cc                 | LR__2770
1a7cc     00 FA 05 F6 | 	mov	result1, #0
1a7d0                 | LR__2771
1a7d0     A7 F0 03 F6 | 	mov	ptra, fp
1a7d4     B2 00 A0 FD | 	call	#popregs_
1a7d8                 | __system___ioctl_ret
1a7d8     2D 00 64 FD | 	ret
1a7dc                 | 
1a7dc                 | __system___isatty
1a7dc     00 4A 05 F6 | 	mov	COUNT_, #0
1a7e0     A8 00 A0 FD | 	call	#pushregs_
1a7e4     0C F0 07 F1 | 	add	ptra, #12
1a7e8     04 4E 05 F1 | 	add	fp, #4
1a7ec     A7 12 62 FC | 	wrlong	arg01, fp
1a7f0     04 4E 05 F1 | 	add	fp, #4
1a7f4     A7 16 02 F6 | 	mov	arg03, fp
1a7f8     08 4E 85 F1 | 	sub	fp, #8
1a7fc     00 15 06 F6 | 	mov	arg02, #256
1a800     50 FF BF FD | 	call	#__system___ioctl
1a804     00 FA 0D F2 | 	cmp	result1, #0 wz
1a808     01 FA 05 A6 |  if_e	mov	result1, #1
1a80c     00 FA 05 56 |  if_ne	mov	result1, #0
1a810     A7 F0 03 F6 | 	mov	ptra, fp
1a814     B2 00 A0 FD | 	call	#popregs_
1a818                 | __system___isatty_ret
1a818     2D 00 64 FD | 	ret
1a81c                 | 
1a81c                 | __system____getftab
1a81c     0A 12 16 F2 | 	cmp	arg01, #10 wc
1a820     34 12 06 CD |  if_b	qmul	arg01, #52
1a824     00 FA 05 36 |  if_ae	mov	result1, #0
1a828     02 00 00 CF 
1a82c     20 E9 05 C1 |  if_b	add	ptr___system__dat__, ##1312
1a830     18 FA 61 CD |  if_b	getqx	result1
1a834     F4 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
1a838     02 00 00 CF 
1a83c     20 E9 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
1a840                 | __system____getftab_ret
1a840     2D 00 64 FD | 	ret
1a844                 | 
1a844                 | __system__strncpy
1a844     09 01 02 F6 | 	mov	_var01, arg01
1a848                 | LR__2780
1a848     01 16 86 F1 | 	sub	arg03, #1
1a84c     00 16 56 F2 | 	cmps	arg03, #0 wc
1a850     18 00 90 CD |  if_b	jmp	#LR__2781
1a854     0A FB C1 FA | 	rdbyte	result1, arg02
1a858     00 FB 41 FC | 	wrbyte	result1, _var01
1a85c     01 14 06 F1 | 	add	arg02, #1
1a860     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1a864     01 00 06 F1 | 	add	_var01, #1
1a868     DC FF 9F 5D |  if_ne	jmp	#LR__2780
1a86c                 | LR__2781
1a86c     97 0C 48 FB | 	callpa	#(@LR__2783-@LR__2782)>>2,fcache_load_ptr_
1a870                 | LR__2782
1a870     01 16 86 F1 | 	sub	arg03, #1
1a874     00 16 56 F2 | 	cmps	arg03, #0 wc
1a878     00 03 02 36 |  if_ae	mov	_var02, _var01
1a87c     01 00 06 31 |  if_ae	add	_var01, #1
1a880     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1a884     E8 FF 9F 3D |  if_ae	jmp	#LR__2782
1a888                 | LR__2783
1a888     09 FB 01 F6 | 	mov	result1, arg01
1a88c                 | __system__strncpy_ret
1a88c     2D 00 64 FD | 	ret
1a890                 | 
1a890                 | __system__strncat
1a890     00 14 4E F2 | 	cmps	arg02, #0 wz
1a894     50 00 90 AD |  if_e	jmp	#LR__2794
1a898     01 16 16 F2 | 	cmp	arg03, #1 wc
1a89c     48 00 90 CD |  if_b	jmp	#LR__2794
1a8a0     09 01 02 F6 | 	mov	_var01, arg01
1a8a4     97 1E 48 FB | 	callpa	#(@LR__2792-@LR__2790)>>2,fcache_load_ptr_
1a8a8                 | LR__2790
1a8a8     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1a8ac     01 00 06 51 |  if_ne	add	_var01, #1
1a8b0     F4 FF 9F 5D |  if_ne	jmp	#LR__2790
1a8b4     0B 03 02 F6 | 	mov	_var02, arg03
1a8b8                 | LR__2791
1a8b8     0A 05 C2 FA | 	rdbyte	_var03, arg02
1a8bc     02 07 02 F6 | 	mov	_var04, _var03
1a8c0     07 06 4E F7 | 	zerox	_var04, #7 wz
1a8c4     01 14 06 F1 | 	add	arg02, #1
1a8c8     18 00 90 AD |  if_e	jmp	#LR__2793
1a8cc     01 02 86 F1 | 	sub	_var02, #1
1a8d0     00 02 56 F2 | 	cmps	_var02, #0 wc
1a8d4     00 07 02 36 |  if_ae	mov	_var04, _var01
1a8d8     01 00 06 31 |  if_ae	add	_var01, #1
1a8dc     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
1a8e0     D4 FF 9F 3D |  if_ae	jmp	#LR__2791
1a8e4                 | LR__2792
1a8e4                 | LR__2793
1a8e4     00 01 48 FC | 	wrbyte	#0, _var01
1a8e8                 | LR__2794
1a8e8     09 FB 01 F6 | 	mov	result1, arg01
1a8ec                 | __system__strncat_ret
1a8ec     2D 00 64 FD | 	ret
1a8f0                 | 
1a8f0                 | __system__strncmp
1a8f0     09 01 0A F6 | 	mov	_var01, arg01 wz
1a8f4     14 00 90 5D |  if_ne	jmp	#LR__2800
1a8f8     00 14 0E F2 | 	cmp	arg02, #0 wz
1a8fc     01 02 66 56 |  if_ne	neg	_var02, #1
1a900     00 02 06 A6 |  if_e	mov	_var02, #0
1a904     01 FB 01 F6 | 	mov	result1, _var02
1a908     74 00 90 FD | 	jmp	#__system__strncmp_ret
1a90c                 | LR__2800
1a90c     00 14 0E F2 | 	cmp	arg02, #0 wz
1a910     01 FA 05 A6 |  if_e	mov	result1, #1
1a914     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1a918     0B 05 02 F6 | 	mov	_var03, arg03
1a91c     97 16 48 FB | 	callpa	#(@LR__2802-@LR__2801)>>2,fcache_load_ptr_
1a920                 | LR__2801
1a920     00 07 C2 FA | 	rdbyte	_var04, _var01
1a924     0A 09 02 F6 | 	mov	_var05, arg02
1a928     04 0B C2 FA | 	rdbyte	_var06, _var05
1a92c     01 04 86 F1 | 	sub	_var03, #1
1a930     00 04 56 F2 | 	cmps	_var03, #0 wc
1a934     01 00 06 F1 | 	add	_var01, #1
1a938     01 14 06 F1 | 	add	arg02, #1
1a93c     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1a940     08 00 90 2D |  if_nc_and_z	jmp	#LR__2803
1a944     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1a948     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__2801
1a94c                 | LR__2802
1a94c                 | LR__2803
1a94c     00 04 56 F2 | 	cmps	_var03, #0 wc
1a950     00 FA 05 C6 |  if_b	mov	result1, #0
1a954     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
1a958     05 07 0A F2 | 	cmp	_var04, _var06 wz
1a95c     00 FA 05 A6 |  if_e	mov	result1, #0
1a960     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1a964     00 06 0E F2 | 	cmp	_var04, #0 wz
1a968     01 FA 65 A6 |  if_e	neg	result1, #1
1a96c     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1a970     00 0A 0E F2 | 	cmp	_var06, #0 wz
1a974     01 FA 05 A6 |  if_e	mov	result1, #1
1a978     03 FB 01 56 |  if_ne	mov	result1, _var04
1a97c     05 FB 81 51 |  if_ne	sub	result1, _var06
1a980                 | __system__strncmp_ret
1a980     2D 00 64 FD | 	ret
1a984                 | 
1a984                 | __system____root_opendir
1a984     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1a988     04 12 06 F1 | 	add	arg01, #4
1a98c     09 E9 61 FC | 	wrlong	ptr___system__dat__, arg01
1a990     00 FA 05 F6 | 	mov	result1, #0
1a994     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1a998                 | __system____root_opendir_ret
1a998     2D 00 64 FD | 	ret
1a99c                 | 
1a99c                 | __system____root_readdir
1a99c     03 4A 05 F6 | 	mov	COUNT_, #3
1a9a0     A8 00 A0 FD | 	call	#pushregs_
1a9a4     09 1F 02 F6 | 	mov	local01, arg01
1a9a8     0A 21 02 F6 | 	mov	local02, arg02
1a9ac     04 1E 06 F1 | 	add	local01, #4
1a9b0     0F 23 02 FB | 	rdlong	local03, local01
1a9b4     04 1E 86 F1 | 	sub	local01, #4
1a9b8                 | LR__2810
1a9b8     74 E8 05 F1 | 	add	ptr___system__dat__, #116
1a9bc     F4 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
1a9c0     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
1a9c4     01 FA 65 A6 |  if_e	neg	result1, #1
1a9c8     48 00 90 AD |  if_e	jmp	#LR__2811
1a9cc     11 17 0A FB | 	rdlong	arg03, local03 wz
1a9d0     04 22 06 A1 |  if_e	add	local03, #4
1a9d4     E0 FF 9F AD |  if_e	jmp	#LR__2810
1a9d8     11 15 02 FB | 	rdlong	arg02, local03
1a9dc     01 14 06 F1 | 	add	arg02, #1
1a9e0     10 13 02 F6 | 	mov	arg01, local02
1a9e4     40 16 06 F6 | 	mov	arg03, #64
1a9e8     58 FE BF FD | 	call	#__system__strncpy
1a9ec     50 20 06 F1 | 	add	local02, #80
1a9f0     10 03 48 FC | 	wrbyte	#1, local02
1a9f4     08 20 86 F1 | 	sub	local02, #8
1a9f8     10 01 68 FC | 	wrlong	#0, local02
1a9fc     04 20 06 F1 | 	add	local02, #4
1aa00     10 01 68 FC | 	wrlong	#0, local02
1aa04     04 22 06 F1 | 	add	local03, #4
1aa08     04 1E 06 F1 | 	add	local01, #4
1aa0c     0F 23 62 FC | 	wrlong	local03, local01
1aa10     00 FA 05 F6 | 	mov	result1, #0
1aa14                 | LR__2811
1aa14     A7 F0 03 F6 | 	mov	ptra, fp
1aa18     B2 00 A0 FD | 	call	#popregs_
1aa1c                 | __system____root_readdir_ret
1aa1c     2D 00 64 FD | 	ret
1aa20                 | 
1aa20                 | __system____root_closedir
1aa20     00 FA 05 F6 | 	mov	result1, #0
1aa24                 | __system____root_closedir_ret
1aa24     2D 00 64 FD | 	ret
1aa28                 | 
1aa28                 | __system____root_stat
1aa28     0A 01 02 F6 | 	mov	_var01, arg02
1aa2c     00 13 02 F6 | 	mov	arg01, _var01
1aa30     00 14 06 F6 | 	mov	arg02, #0
1aa34     30 16 06 F6 | 	mov	arg03, #48
1aa38     98 00 A0 FD | 	call	#\builtin_bytefill_
1aa3c     08 00 06 F1 | 	add	_var01, #8
1aa40     08 00 80 FF 
1aa44     00 FF 6B FC | 	wrlong	##4607, _var01
1aa48     00 FA 05 F6 | 	mov	result1, #0
1aa4c                 | __system____root_stat_ret
1aa4c     2D 00 64 FD | 	ret
1aa50                 | 
1aa50                 | __system___normalizeName
1aa50     00 00 06 F6 | 	mov	_var01, #0
1aa54     09 03 02 F6 | 	mov	_var02, arg01
1aa58     01 05 02 F6 | 	mov	_var03, _var02
1aa5c                 | LR__2820
1aa5c     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1aa60     5C 01 90 AD |  if_e	jmp	#LR__2839
1aa64     00 00 0E F2 | 	cmp	_var01, #0 wz
1aa68     02 07 02 56 |  if_ne	mov	_var04, _var03
1aa6c     01 04 06 51 |  if_ne	add	_var03, #1
1aa70     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
1aa74     00 00 06 56 |  if_ne	mov	_var01, #0
1aa78     01 07 C2 FA | 	rdbyte	_var04, _var02
1aa7c     2E 06 0E F2 | 	cmp	_var04, #46 wz
1aa80     D8 00 90 5D |  if_ne	jmp	#LR__2832
1aa84     01 02 06 F1 | 	add	_var02, #1
1aa88     01 07 C2 FA | 	rdbyte	_var04, _var02
1aa8c     01 02 86 F1 | 	sub	_var02, #1
1aa90     2F 06 0E F2 | 	cmp	_var04, #47 wz
1aa94     18 00 90 AD |  if_e	jmp	#LR__2821
1aa98     01 02 06 F1 | 	add	_var02, #1
1aa9c     01 09 C2 FA | 	rdbyte	_var05, _var02
1aaa0     01 02 86 F1 | 	sub	_var02, #1
1aaa4     04 0B 02 F6 | 	mov	_var06, _var05
1aaa8     07 0A 4E F7 | 	zerox	_var06, #7 wz
1aaac     10 00 90 5D |  if_ne	jmp	#LR__2822
1aab0                 | LR__2821
1aab0     01 0D 02 F6 | 	mov	_var07, _var02
1aab4     01 0C 06 F1 | 	add	_var07, #1
1aab8     06 03 02 F6 | 	mov	_var02, _var07
1aabc     E0 00 90 FD | 	jmp	#LR__2836
1aac0                 | LR__2822
1aac0     01 02 06 F1 | 	add	_var02, #1
1aac4     01 0D C2 FA | 	rdbyte	_var07, _var02
1aac8     01 02 86 F1 | 	sub	_var02, #1
1aacc     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
1aad0     2E 06 0E F2 | 	cmp	_var04, #46 wz
1aad4     84 00 90 5D |  if_ne	jmp	#LR__2831
1aad8     02 02 06 F1 | 	add	_var02, #2
1aadc     01 0D C2 FA | 	rdbyte	_var07, _var02
1aae0     02 02 86 F1 | 	sub	_var02, #2
1aae4     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
1aae8     2F 06 0E F2 | 	cmp	_var04, #47 wz
1aaec     18 00 90 AD |  if_e	jmp	#LR__2823
1aaf0     02 02 06 F1 | 	add	_var02, #2
1aaf4     01 09 C2 FA | 	rdbyte	_var05, _var02
1aaf8     02 02 86 F1 | 	sub	_var02, #2
1aafc     04 0B 02 F6 | 	mov	_var06, _var05
1ab00     07 0A 4E F7 | 	zerox	_var06, #7 wz
1ab04     54 00 90 5D |  if_ne	jmp	#LR__2830
1ab08                 | LR__2823
1ab08     02 02 06 F1 | 	add	_var02, #2
1ab0c     09 05 5A F2 | 	cmps	_var03, arg01 wcz
1ab10     40 00 90 ED |  if_be	jmp	#LR__2829
1ab14     02 0F 02 F6 | 	mov	_var08, _var03
1ab18     01 0E 86 F1 | 	sub	_var08, #1
1ab1c                 | LR__2824
1ab1c     07 07 C2 FA | 	rdbyte	_var04, _var08
1ab20     2F 06 0E F2 | 	cmp	_var04, #47 wz
1ab24     0C 00 90 5D |  if_ne	jmp	#LR__2825
1ab28     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1ab2c     01 0E 86 11 |  if_a	sub	_var08, #1
1ab30     E8 FF 9F 1D |  if_a	jmp	#LR__2824
1ab34                 | LR__2825
1ab34     97 0C 48 FB | 	callpa	#(@LR__2827-@LR__2826)>>2,fcache_load_ptr_
1ab38                 | LR__2826
1ab38     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1ab3c     10 00 90 ED |  if_be	jmp	#LR__2828
1ab40     07 07 C2 FA | 	rdbyte	_var04, _var08
1ab44     2F 06 0E F2 | 	cmp	_var04, #47 wz
1ab48     01 0E 86 51 |  if_ne	sub	_var08, #1
1ab4c     E8 FF 9F 5D |  if_ne	jmp	#LR__2826
1ab50                 | LR__2827
1ab50                 | LR__2828
1ab50     07 05 02 F6 | 	mov	_var03, _var08
1ab54                 | LR__2829
1ab54     01 00 06 F6 | 	mov	_var01, #1
1ab58     44 00 90 FD | 	jmp	#LR__2836
1ab5c                 | LR__2830
1ab5c                 | LR__2831
1ab5c                 | LR__2832
1ab5c     97 18 48 FB | 	callpa	#(@LR__2834-@LR__2833)>>2,fcache_load_ptr_
1ab60                 | LR__2833
1ab60     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1ab64     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
1ab68     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
1ab6c     20 00 90 AD |  if_e	jmp	#LR__2835
1ab70     01 0B 02 F6 | 	mov	_var06, _var02
1ab74     01 09 02 F6 | 	mov	_var05, _var02
1ab78     01 08 06 F1 | 	add	_var05, #1
1ab7c     05 11 C2 FA | 	rdbyte	_var09, _var06
1ab80     04 03 02 F6 | 	mov	_var02, _var05
1ab84     02 11 42 FC | 	wrbyte	_var09, _var03
1ab88     01 04 06 F1 | 	add	_var03, #1
1ab8c     D0 FF 9F FD | 	jmp	#LR__2833
1ab90                 | LR__2834
1ab90                 | LR__2835
1ab90     01 07 C2 FA | 	rdbyte	_var04, _var02
1ab94     2F 06 0E F2 | 	cmp	_var04, #47 wz
1ab98     C0 FE 9F 5D |  if_ne	jmp	#LR__2820
1ab9c     01 00 06 F6 | 	mov	_var01, #1
1aba0                 | LR__2836
1aba0     97 0C 48 FB | 	callpa	#(@LR__2838-@LR__2837)>>2,fcache_load_ptr_
1aba4                 | LR__2837
1aba4     01 07 C2 FA | 	rdbyte	_var04, _var02
1aba8     2F 06 0E F2 | 	cmp	_var04, #47 wz
1abac     01 0D 02 A6 |  if_e	mov	_var07, _var02
1abb0     01 0C 06 A1 |  if_e	add	_var07, #1
1abb4     06 03 02 A6 |  if_e	mov	_var02, _var07
1abb8     E8 FF 9F AD |  if_e	jmp	#LR__2837
1abbc                 | LR__2838
1abbc     9C FE 9F FD | 	jmp	#LR__2820
1abc0                 | LR__2839
1abc0     02 01 48 FC | 	wrbyte	#0, _var03
1abc4                 | __system___normalizeName_ret
1abc4     2D 00 64 FD | 	ret
1abc8                 | 
1abc8                 | __system___strrev
1abc8     09 01 CA FA | 	rdbyte	_var01, arg01 wz
1abcc     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
1abd0     09 03 02 F6 | 	mov	_var02, arg01
1abd4     97 1A 48 FB | 	callpa	#(@LR__2842-@LR__2840)>>2,fcache_load_ptr_
1abd8                 | LR__2840
1abd8     01 01 CA FA | 	rdbyte	_var01, _var02 wz
1abdc     01 02 06 51 |  if_ne	add	_var02, #1
1abe0     F4 FF 9F 5D |  if_ne	jmp	#LR__2840
1abe4     01 02 86 F1 | 	sub	_var02, #1
1abe8                 | LR__2841
1abe8     09 03 5A F2 | 	cmps	_var02, arg01 wcz
1abec     1C 00 90 ED |  if_be	jmp	#LR__2843
1abf0     09 01 C2 FA | 	rdbyte	_var01, arg01
1abf4     01 05 C2 FA | 	rdbyte	_var03, _var02
1abf8     09 05 42 FC | 	wrbyte	_var03, arg01
1abfc     01 01 42 FC | 	wrbyte	_var01, _var02
1ac00     01 12 06 F1 | 	add	arg01, #1
1ac04     01 02 86 F1 | 	sub	_var02, #1
1ac08     DC FF 9F FD | 	jmp	#LR__2841
1ac0c                 | LR__2842
1ac0c                 | LR__2843
1ac0c                 | __system___strrev_ret
1ac0c     2D 00 64 FD | 	ret
1ac10                 | 
1ac10                 | __system___fmtpad
1ac10     06 4A 05 F6 | 	mov	COUNT_, #6
1ac14     A8 00 A0 FD | 	call	#pushregs_
1ac18     09 1F 02 F6 | 	mov	local01, arg01
1ac1c     0A 21 02 F6 | 	mov	local02, arg02
1ac20     0B 23 02 F6 | 	mov	local03, arg03
1ac24     10 13 EA F8 | 	getbyte	arg01, local02, #1
1ac28     16 20 46 F0 | 	shr	local02, #22
1ac2c     03 20 0E F5 | 	and	local02, #3 wz
1ac30     00 24 06 F6 | 	mov	local04, #0
1ac34     01 20 06 A6 |  if_e	mov	local02, #1
1ac38     0C 21 CA F7 | 	test	local02, arg04 wz
1ac3c     00 FA 05 A6 |  if_e	mov	result1, #0
1ac40     88 00 90 AD |  if_e	jmp	#LR__2853
1ac44     09 23 C2 F2 | 	subr	local03, arg01
1ac48     01 22 56 F2 | 	cmps	local03, #1 wc
1ac4c     00 FA 05 C6 |  if_b	mov	result1, #0
1ac50     78 00 90 CD |  if_b	jmp	#LR__2853
1ac54     03 20 0E F2 | 	cmp	local02, #3 wz
1ac58     18 00 90 5D |  if_ne	jmp	#LR__2850
1ac5c     01 18 0E F2 | 	cmp	arg04, #1 wz
1ac60     6E 20 62 FD | 	wrz	local02
1ac64     10 23 02 F1 | 	add	local03, local02
1ac68     11 23 52 F6 | 	abs	local03, local03 wc
1ac6c     01 22 46 F0 | 	shr	local03, #1
1ac70     11 23 82 F6 | 	negc	local03, local03
1ac74                 | LR__2850
1ac74     01 22 56 F2 | 	cmps	local03, #1 wc
1ac78     4C 00 90 CD |  if_b	jmp	#LR__2852
1ac7c     11 27 02 F6 | 	mov	local05, local03
1ac80                 | LR__2851
1ac80     0F 21 02 F6 | 	mov	local02, local01
1ac84     0F 29 02 F6 | 	mov	local06, local01
1ac88     13 20 46 F7 | 	zerox	local02, #19
1ac8c     14 28 46 F0 | 	shr	local06, #20
1ac90     02 28 66 F0 | 	shl	local06, #2
1ac94     ED 28 02 F1 | 	add	local06, __methods__
1ac98     14 29 02 FB | 	rdlong	local06, local06
1ac9c     20 12 06 F6 | 	mov	arg01, #32
1aca0     F2 22 02 F6 | 	mov	local03, objptr
1aca4     10 E5 01 F6 | 	mov	objptr, local02
1aca8     2D 28 62 FD | 	call	local06
1acac     11 E5 01 F6 | 	mov	objptr, local03
1acb0     FD 28 02 F6 | 	mov	local06, result1
1acb4     00 28 56 F2 | 	cmps	local06, #0 wc
1acb8     14 FB 01 C6 |  if_b	mov	result1, local06
1acbc     0C 00 90 CD |  if_b	jmp	#LR__2853
1acc0     14 25 02 F1 | 	add	local04, local06
1acc4     EE 27 6E FB | 	djnz	local05, #LR__2851
1acc8                 | LR__2852
1acc8     12 FB 01 F6 | 	mov	result1, local04
1accc                 | LR__2853
1accc     A7 F0 03 F6 | 	mov	ptra, fp
1acd0     B2 00 A0 FD | 	call	#popregs_
1acd4                 | __system___fmtpad_ret
1acd4     2D 00 64 FD | 	ret
1acd8                 | 
1acd8                 | __system___uitoa
1acd8     04 4A 05 F6 | 	mov	COUNT_, #4
1acdc     A8 00 A0 FD | 	call	#pushregs_
1ace0     09 1F 02 F6 | 	mov	local01, arg01
1ace4     00 1A 4E F2 | 	cmps	arg05, #0 wz
1ace8     0F 1B 02 F6 | 	mov	arg05, local01
1acec     00 20 06 F6 | 	mov	local02, #0
1acf0     37 22 06 56 |  if_ne	mov	local03, #55
1acf4     57 22 06 A6 |  if_e	mov	local03, #87
1acf8                 | LR__2860
1acf8     0B 15 12 FD | 	qdiv	arg02, arg03
1acfc     19 24 62 FD | 	getqy	local04
1ad00     0B 15 12 FD | 	qdiv	arg02, arg03
1ad04     0A 24 16 F2 | 	cmp	local04, #10 wc
1ad08     30 24 06 C1 |  if_b	add	local04, #48
1ad0c     11 25 02 31 |  if_ae	add	local04, local03
1ad10     0D 25 42 FC | 	wrbyte	local04, arg05
1ad14     01 1A 06 F1 | 	add	arg05, #1
1ad18     01 20 06 F1 | 	add	local02, #1
1ad1c     18 14 62 FD | 	getqx	arg02
1ad20     00 14 0E F2 | 	cmp	arg02, #0 wz
1ad24     D0 FF 9F 5D |  if_ne	jmp	#LR__2860
1ad28     0C 21 12 F2 | 	cmp	local02, arg04 wc
1ad2c     C8 FF 9F CD |  if_b	jmp	#LR__2860
1ad30     0D 01 48 FC | 	wrbyte	#0, arg05
1ad34     0F 13 02 F6 | 	mov	arg01, local01
1ad38     8C FE BF FD | 	call	#__system___strrev
1ad3c     10 FB 01 F6 | 	mov	result1, local02
1ad40     A7 F0 03 F6 | 	mov	ptra, fp
1ad44     B2 00 A0 FD | 	call	#popregs_
1ad48                 | __system___uitoa_ret
1ad48     2D 00 64 FD | 	ret
1ad4c                 | 
1ad4c                 | __system__disassemble_0330
1ad4c     10 4A 05 F6 | 	mov	COUNT_, #16
1ad50     A8 00 A0 FD | 	call	#pushregs_
1ad54     09 1F 02 F6 | 	mov	local01, arg01
1ad58     0A 21 02 F6 | 	mov	local02, arg02
1ad5c     0B 23 02 F6 | 	mov	local03, arg03
1ad60     0C 25 02 F6 | 	mov	local04, arg04
1ad64     0D 27 02 F6 | 	mov	local05, arg05
1ad68     13 13 52 F6 | 	abs	arg01, local05 wc
1ad6c     1F 28 C6 C9 |  if_b	decod	local06, #31
1ad70     00 28 06 36 |  if_ae	mov	local06, #0
1ad74     B4 D3 BF FD | 	call	#__system___float_fromuns
1ad78     14 FB 61 F5 | 	xor	result1, local06
1ad7c     FD 2A 02 F6 | 	mov	local07, result1
1ad80     00 2C 06 F6 | 	mov	local08, #0
1ad84     0F 13 02 F6 | 	mov	arg01, local01
1ad88     00 14 06 F6 | 	mov	arg02, #0
1ad8c     01 16 06 F6 | 	mov	arg03, #1
1ad90     F8 DA BF FD | 	call	#__system___float_cmp
1ad94     00 FA 0D F2 | 	cmp	result1, #0 wz
1ad98     00 2E 06 A6 |  if_e	mov	local09, #0
1ad9c     10 01 68 AC |  if_e	wrlong	#0, local02
1ada0     11 2F 62 AC |  if_e	wrlong	local09, local03
1ada4     8C 01 90 AD |  if_e	jmp	#LR__2882
1ada8     0F 13 02 F6 | 	mov	arg01, local01
1adac     A8 DF BF FD | 	call	#__system____builtin_ilogb
1adb0     FD 30 02 F6 | 	mov	local10, result1
1adb4     0A 26 0E F2 | 	cmp	local05, #10 wz
1adb8     24 00 90 5D |  if_ne	jmp	#LR__2870
1adbc     18 2F 02 F6 | 	mov	local09, local10
1adc0     01 2E 66 F0 | 	shl	local09, #1
1adc4     18 2F 02 F1 | 	add	local09, local10
1adc8     17 31 52 F6 | 	abs	local10, local09 wc
1adcc     0A 30 16 FD | 	qdiv	local10, #10
1add0     09 32 06 F6 | 	mov	local11, #9
1add4     18 30 62 FD | 	getqx	local10
1add8     18 31 82 F6 | 	negc	local10, local10
1addc     04 00 90 FD | 	jmp	#LR__2871
1ade0                 | LR__2870
1ade0     18 32 06 F6 | 	mov	local11, #24
1ade4                 | LR__2871
1ade4                 | LR__2872
1ade4     08 2C 56 F2 | 	cmps	local08, #8 wc
1ade8     01 2C 06 F1 | 	add	local08, #1
1adec     60 00 90 3D |  if_ae	jmp	#LR__2873
1adf0     00 C0 1F FF 
1adf4     00 12 06 F6 | 	mov	arg01, ##1065353216
1adf8     15 15 02 F6 | 	mov	arg02, local07
1adfc     18 17 02 F6 | 	mov	arg03, local10
1ae00     88 E3 BF FD | 	call	#__system___float_pow_n
1ae04     FD 14 02 F6 | 	mov	arg02, result1
1ae08     0F 13 02 F6 | 	mov	arg01, local01
1ae0c     4C D8 BF FD | 	call	#__system___float_div
1ae10     FD 34 02 F6 | 	mov	local12, result1
1ae14     1A 13 02 F6 | 	mov	arg01, local12
1ae18     00 C0 1F FF 
1ae1c     00 14 06 F6 | 	mov	arg02, ##1065353216
1ae20     01 16 06 F6 | 	mov	arg03, #1
1ae24     64 DA BF FD | 	call	#__system___float_cmp
1ae28     00 FA 55 F2 | 	cmps	result1, #0 wc
1ae2c     01 30 86 C1 |  if_b	sub	local10, #1
1ae30     B0 FF 9F CD |  if_b	jmp	#LR__2872
1ae34     15 15 02 F6 | 	mov	arg02, local07
1ae38     1A 13 02 F6 | 	mov	arg01, local12
1ae3c     01 16 66 F6 | 	neg	arg03, #1
1ae40     48 DA BF FD | 	call	#__system___float_cmp
1ae44     00 FA 55 F2 | 	cmps	result1, #0 wc
1ae48     01 30 06 31 |  if_ae	add	local10, #1
1ae4c     94 FF 9F 3D |  if_ae	jmp	#LR__2872
1ae50                 | LR__2873
1ae50     1A 13 02 F6 | 	mov	arg01, local12
1ae54     00 DF BF FD | 	call	#__system____builtin_ilogb
1ae58     FD 36 02 F6 | 	mov	local13, result1
1ae5c     1A 39 02 F6 | 	mov	local14, local12
1ae60     17 39 06 F4 | 	bitl	local14, #279
1ae64     17 38 26 F4 | 	bith	local14, #23
1ae68     1B 39 62 F0 | 	shl	local14, local13
1ae6c     02 26 0E F2 | 	cmp	local05, #2 wz
1ae70     02 24 66 A0 |  if_e	shl	local04, #2
1ae74     00 3A 06 F6 | 	mov	local15, #0
1ae78     00 24 56 F2 | 	cmps	local04, #0 wc
1ae7c     10 00 90 3D |  if_ae	jmp	#LR__2874
1ae80     18 25 C2 F2 | 	subr	local04, local10
1ae84     00 24 56 F2 | 	cmps	local04, #0 wc
1ae88     A0 00 90 CD |  if_b	jmp	#LR__2881
1ae8c     04 00 90 FD | 	jmp	#LR__2875
1ae90                 | LR__2874
1ae90     01 24 06 F1 | 	add	local04, #1
1ae94                 | LR__2875
1ae94     19 25 7A F3 | 	fles	local04, local11 wcz
1ae98     01 3C 06 F6 | 	mov	local16, #1
1ae9c     97 22 48 FB | 	callpa	#(@LR__2877-@LR__2876)>>2,fcache_load_ptr_
1aea0                 | LR__2876
1aea0     00 40 00 FF 
1aea4     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
1aea8     38 00 90 3D |  if_ae	jmp	#LR__2878
1aeac     01 24 56 F2 | 	cmps	local04, #1 wc
1aeb0     01 24 86 F1 | 	sub	local04, #1
1aeb4     2C 00 90 CD |  if_b	jmp	#LR__2878
1aeb8     13 3B 02 FD | 	qmul	local15, local05
1aebc     1C 37 02 F6 | 	mov	local13, local14
1aec0     17 36 46 F0 | 	shr	local13, #23
1aec4     17 39 06 F4 | 	bitl	local14, #279
1aec8     18 3A 62 FD | 	getqx	local15
1aecc     13 3D 02 FD | 	qmul	local16, local05
1aed0     18 3C 62 FD | 	getqx	local16
1aed4     13 39 02 FD | 	qmul	local14, local05
1aed8     1B 3B 02 F1 | 	add	local15, local13
1aedc     18 38 62 FD | 	getqx	local14
1aee0     BC FF 9F FD | 	jmp	#LR__2876
1aee4                 | LR__2877
1aee4                 | LR__2878
1aee4     13 2F 02 F6 | 	mov	local09, local05
1aee8     17 2E 66 F0 | 	shl	local09, #23
1aeec     17 37 52 F6 | 	abs	local13, local09 wc
1aef0     01 36 46 F0 | 	shr	local13, #1
1aef4     1B 37 82 F6 | 	negc	local13, local13
1aef8     1B 39 1A F2 | 	cmp	local14, local13 wcz
1aefc     20 00 90 1D |  if_a	jmp	#LR__2879
1af00     17 26 66 F0 | 	shl	local05, #23
1af04     13 37 52 F6 | 	abs	local13, local05 wc
1af08     01 36 46 F0 | 	shr	local13, #1
1af0c     1B 37 82 F6 | 	negc	local13, local13
1af10     1B 39 0A F2 | 	cmp	local14, local13 wz
1af14     14 00 90 5D |  if_ne	jmp	#LR__2880
1af18     01 3A CE F7 | 	test	local15, #1 wz
1af1c     0C 00 90 AD |  if_e	jmp	#LR__2880
1af20                 | LR__2879
1af20     01 3A 06 F1 | 	add	local15, #1
1af24     1E 3B 0A F2 | 	cmp	local15, local16 wz
1af28     01 30 06 A1 |  if_e	add	local10, #1
1af2c                 | LR__2880
1af2c                 | LR__2881
1af2c     10 3B 62 FC | 	wrlong	local15, local02
1af30     11 31 62 FC | 	wrlong	local10, local03
1af34                 | LR__2882
1af34     A7 F0 03 F6 | 	mov	ptra, fp
1af38     B2 00 A0 FD | 	call	#popregs_
1af3c                 | __system__disassemble_0330_ret
1af3c     2D 00 64 FD | 	ret
1af40                 | 
1af40                 | __system__emitsign_0332
1af40     00 FA 05 F6 | 	mov	result1, #0
1af44     00 14 0E F2 | 	cmp	arg02, #0 wz
1af48     09 01 02 56 |  if_ne	mov	_var01, arg01
1af4c     01 12 06 51 |  if_ne	add	arg01, #1
1af50     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
1af54     01 FA 05 56 |  if_ne	mov	result1, #1
1af58     00 16 0E F2 | 	cmp	arg03, #0 wz
1af5c     09 61 48 5C |  if_ne	wrbyte	#48, arg01
1af60     01 12 06 51 |  if_ne	add	arg01, #1
1af64     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
1af68     02 FA 05 51 |  if_ne	add	result1, #2
1af6c                 | __system__emitsign_0332_ret
1af6c     2D 00 64 FD | 	ret
1af70                 | 
1af70                 | __system___gettxfunc
1af70     01 4A 05 F6 | 	mov	COUNT_, #1
1af74     A8 00 A0 FD | 	call	#pushregs_
1af78     A0 F8 BF FD | 	call	#__system____getftab
1af7c     FD 1E 0A F6 | 	mov	local01, result1 wz
1af80     10 00 90 AD |  if_e	jmp	#LR__2890
1af84     08 1E 06 F1 | 	add	local01, #8
1af88     0F 15 0A FB | 	rdlong	arg02, local01 wz
1af8c     08 1E 86 F1 | 	sub	local01, #8
1af90     08 00 90 5D |  if_ne	jmp	#LR__2891
1af94                 | LR__2890
1af94     00 FA 05 F6 | 	mov	result1, #0
1af98     0C 00 90 FD | 	jmp	#LR__2892
1af9c                 | LR__2891
1af9c     00 D0 02 FF 
1afa0     00 1E 46 F5 | 	or	local01, ##94371840
1afa4     0F FB 01 F6 | 	mov	result1, local01
1afa8                 | LR__2892
1afa8     A7 F0 03 F6 | 	mov	ptra, fp
1afac     B2 00 A0 FD | 	call	#popregs_
1afb0                 | __system___gettxfunc_ret
1afb0     2D 00 64 FD | 	ret
1afb4                 | 
1afb4                 | __system___getrxfunc
1afb4     01 4A 05 F6 | 	mov	COUNT_, #1
1afb8     A8 00 A0 FD | 	call	#pushregs_
1afbc     5C F8 BF FD | 	call	#__system____getftab
1afc0     FD 1E 0A F6 | 	mov	local01, result1 wz
1afc4     10 00 90 AD |  if_e	jmp	#LR__2900
1afc8     08 1E 06 F1 | 	add	local01, #8
1afcc     0F 15 0A FB | 	rdlong	arg02, local01 wz
1afd0     08 1E 86 F1 | 	sub	local01, #8
1afd4     08 00 90 5D |  if_ne	jmp	#LR__2901
1afd8                 | LR__2900
1afd8     00 FA 05 F6 | 	mov	result1, #0
1afdc     0C 00 90 FD | 	jmp	#LR__2902
1afe0                 | LR__2901
1afe0     00 D8 02 FF 
1afe4     00 1E 46 F5 | 	or	local01, ##95420416
1afe8     0F FB 01 F6 | 	mov	result1, local01
1afec                 | LR__2902
1afec     A7 F0 03 F6 | 	mov	ptra, fp
1aff0     B2 00 A0 FD | 	call	#popregs_
1aff4                 | __system___getrxfunc_ret
1aff4     2D 00 64 FD | 	ret
1aff8                 | 
1aff8                 | __system___getiolock_0372
1aff8     01 4A 05 F6 | 	mov	COUNT_, #1
1affc     A8 00 A0 FD | 	call	#pushregs_
1b000     18 F8 BF FD | 	call	#__system____getftab
1b004     FD 1E 0A F6 | 	mov	local01, result1 wz
1b008     10 00 90 AD |  if_e	jmp	#LR__2910
1b00c     08 1E 06 F1 | 	add	local01, #8
1b010     0F FB 09 FB | 	rdlong	result1, local01 wz
1b014     08 1E 86 F1 | 	sub	local01, #8
1b018     18 00 90 5D |  if_ne	jmp	#LR__2911
1b01c                 | LR__2910
1b01c     01 00 00 FF 
1b020     D4 E8 05 F1 | 	add	ptr___system__dat__, ##724
1b024     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
1b028     01 00 00 FF 
1b02c     D4 E8 85 F1 | 	sub	ptr___system__dat__, ##724
1b030     08 00 90 FD | 	jmp	#LR__2912
1b034                 | LR__2911
1b034     0C 1E 06 F1 | 	add	local01, #12
1b038     0F FB 01 F6 | 	mov	result1, local01
1b03c                 | LR__2912
1b03c     A7 F0 03 F6 | 	mov	ptra, fp
1b040     B2 00 A0 FD | 	call	#popregs_
1b044                 | __system___getiolock_0372_ret
1b044     2D 00 64 FD | 	ret
1b048                 | 
1b048                 | __system___basic_dir
1b048     05 4A 05 F6 | 	mov	COUNT_, #5
1b04c     A8 00 A0 FD | 	call	#pushregs_
1b050     4C F0 07 F1 | 	add	ptra, #76
1b054     04 4E 05 F1 | 	add	fp, #4
1b058     A7 12 62 FC | 	wrlong	arg01, fp
1b05c     04 4E 05 F1 | 	add	fp, #4
1b060     A7 14 62 FC | 	wrlong	arg02, fp
1b064     04 4E 85 F1 | 	sub	fp, #4
1b068     A7 14 0A FB | 	rdlong	arg02, fp wz
1b06c     04 4E 85 F1 | 	sub	fp, #4
1b070     04 4E 05 51 |  if_ne	add	fp, #4
1b074     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1b078     04 4E 85 51 |  if_ne	sub	fp, #4
1b07c     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
1b080     70 00 90 AD |  if_e	jmp	#LR__2920
1b084     03 00 00 FF 
1b088     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1b08c     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1b090     03 00 00 FF 
1b094     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1b098     03 00 00 5F 
1b09c     28 E9 05 51 |  if_ne	add	ptr___system__dat__, ##1832
1b0a0     F4 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
1b0a4     03 00 00 5F 
1b0a8     28 E9 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
1b0ac     FC EA BF 5D |  if_ne	call	#__system__closedir
1b0b0     25 01 00 FF 
1b0b4     94 13 06 F6 | 	mov	arg01, ##@LR__4078
1b0b8     04 EA BF FD | 	call	#__system__opendir
1b0bc     03 00 00 FF 
1b0c0     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1b0c4     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1b0c8     08 4E 05 F1 | 	add	fp, #8
1b0cc     A7 20 02 FB | 	rdlong	local02, fp
1b0d0     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1b0d4     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1b0d8     04 4E 85 F1 | 	sub	fp, #4
1b0dc     A7 20 02 FB | 	rdlong	local02, fp
1b0e0     04 4E 85 F1 | 	sub	fp, #4
1b0e4     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1b0e8     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1b0ec     03 00 00 FF 
1b0f0     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1b0f4                 | LR__2920
1b0f4     03 00 00 FF 
1b0f8     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1b0fc     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1b100     03 00 00 FF 
1b104     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1b108     25 01 00 AF 
1b10c     96 FB 05 A6 |  if_e	mov	result1, ##@LR__4079
1b110     84 02 90 AD |  if_e	jmp	#LR__2933
1b114                 | LR__2921
1b114     03 00 00 FF 
1b118     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1b11c     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1b120     03 00 00 FF 
1b124     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1b128     F4 EA BF FD | 	call	#__system__readdir
1b12c     0C 4E 05 F1 | 	add	fp, #12
1b130     A7 FA 61 FC | 	wrlong	result1, fp
1b134     0C 4E 85 F1 | 	sub	fp, #12
1b138     00 FA 0D F2 | 	cmp	result1, #0 wz
1b13c     38 00 90 5D |  if_ne	jmp	#LR__2922
1b140     03 00 00 FF 
1b144     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1b148     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1b14c     03 00 00 FF 
1b150     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1b154     54 EA BF FD | 	call	#__system__closedir
1b158     03 00 00 FF 
1b15c     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1b160     F4 00 68 FC | 	wrlong	#0, ptr___system__dat__
1b164     03 00 00 FF 
1b168     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1b16c     25 01 00 FF 
1b170     98 FB 05 F6 | 	mov	result1, ##@LR__4080
1b174     20 02 90 FD | 	jmp	#LR__2933
1b178                 | LR__2922
1b178     0C 4E 05 F1 | 	add	fp, #12
1b17c     A7 12 02 FB | 	rdlong	arg01, fp
1b180     0C 4E 85 F1 | 	sub	fp, #12
1b184     03 00 00 FF 
1b188     30 E9 05 F1 | 	add	ptr___system__dat__, ##1840
1b18c     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1b190     03 00 00 FF 
1b194     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1b198     48 07 B0 FD | 	call	#__system___pat_match
1b19c     00 FA 0D F2 | 	cmp	result1, #0 wz
1b1a0     70 FF 9F AD |  if_e	jmp	#LR__2921
1b1a4     03 00 00 FF 
1b1a8     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1b1ac     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1b1b0     03 00 00 FF 
1b1b4     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1b1b8     78 01 90 AD |  if_e	jmp	#LR__2929
1b1bc     0C 4E 05 F1 | 	add	fp, #12
1b1c0     A7 12 02 FB | 	rdlong	arg01, fp
1b1c4     04 4E 05 F1 | 	add	fp, #4
1b1c8     A7 14 02 F6 | 	mov	arg02, fp
1b1cc     10 4E 85 F1 | 	sub	fp, #16
1b1d0     50 F3 BF FD | 	call	#__system__stat
1b1d4     40 4E 05 F1 | 	add	fp, #64
1b1d8     A7 FA 61 FC | 	wrlong	result1, fp
1b1dc     40 4E 85 F1 | 	sub	fp, #64
1b1e0     00 FA 0D F2 | 	cmp	result1, #0 wz
1b1e4     25 01 00 5F 
1b1e8     9A FB 05 56 |  if_ne	mov	result1, ##@LR__4081
1b1ec     A8 01 90 5D |  if_ne	jmp	#LR__2933
1b1f0     18 4E 05 F1 | 	add	fp, #24
1b1f4     A7 20 02 FB | 	rdlong	local02, fp
1b1f8     78 00 00 FF 
1b1fc     00 20 06 F5 | 	and	local02, ##61440
1b200     2C 4E 05 F1 | 	add	fp, #44
1b204     A7 20 62 FC | 	wrlong	local02, fp
1b208     38 4E 85 F1 | 	sub	fp, #56
1b20c     A7 20 02 FB | 	rdlong	local02, fp
1b210     0C 4E 85 F1 | 	sub	fp, #12
1b214     10 21 C2 FA | 	rdbyte	local02, local02
1b218     2E 20 0E F2 | 	cmp	local02, #46 wz
1b21c     08 4E 05 A1 |  if_e	add	fp, #8
1b220     A7 04 68 AC |  if_e	wrlong	#2, fp
1b224     08 4E C5 F3 | 	sumz	fp, #8
1b228     A7 00 68 5C |  if_ne	wrlong	#0, fp
1b22c     08 4E 85 51 |  if_ne	sub	fp, #8
1b230     44 4E 05 F1 | 	add	fp, #68
1b234     A7 20 02 FB | 	rdlong	local02, fp
1b238     44 4E 85 F1 | 	sub	fp, #68
1b23c     08 00 00 FF 
1b240     00 20 0E F2 | 	cmp	local02, ##4096 wz
1b244     18 00 90 5D |  if_ne	jmp	#LR__2923
1b248     08 4E 05 F1 | 	add	fp, #8
1b24c     A7 20 02 FB | 	rdlong	local02, fp
1b250     10 20 46 F5 | 	or	local02, #16
1b254     A7 20 62 FC | 	wrlong	local02, fp
1b258     08 4E 85 F1 | 	sub	fp, #8
1b25c     AC 00 90 FD | 	jmp	#LR__2928
1b260                 | LR__2923
1b260     44 4E 05 F1 | 	add	fp, #68
1b264     A7 20 02 FB | 	rdlong	local02, fp
1b268     44 4E 85 F1 | 	sub	fp, #68
1b26c     10 00 00 FF 
1b270     00 20 0E F2 | 	cmp	local02, ##8192 wz
1b274     44 4E 05 51 |  if_ne	add	fp, #68
1b278     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1b27c     44 4E 85 51 |  if_ne	sub	fp, #68
1b280     18 00 00 5F 
1b284     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
1b288     44 4E 05 51 |  if_ne	add	fp, #68
1b28c     0F 23 02 56 |  if_ne	mov	local03, local01
1b290     44 4E 85 51 |  if_ne	sub	fp, #68
1b294     20 00 00 5F 
1b298     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
1b29c     18 00 90 5D |  if_ne	jmp	#LR__2924
1b2a0     08 4E 05 F1 | 	add	fp, #8
1b2a4     A7 20 02 FB | 	rdlong	local02, fp
1b2a8     04 20 46 F5 | 	or	local02, #4
1b2ac     A7 20 62 FC | 	wrlong	local02, fp
1b2b0     08 4E 85 F1 | 	sub	fp, #8
1b2b4     54 00 90 FD | 	jmp	#LR__2927
1b2b8                 | LR__2924
1b2b8     18 4E 05 F1 | 	add	fp, #24
1b2bc     A7 20 02 FB | 	rdlong	local02, fp
1b2c0     18 4E 85 F1 | 	sub	fp, #24
1b2c4     92 20 CE F7 | 	test	local02, #146 wz
1b2c8     18 00 90 5D |  if_ne	jmp	#LR__2925
1b2cc     08 4E 05 F1 | 	add	fp, #8
1b2d0     A7 20 02 FB | 	rdlong	local02, fp
1b2d4     01 20 46 F5 | 	or	local02, #1
1b2d8     A7 20 62 FC | 	wrlong	local02, fp
1b2dc     08 4E 85 F1 | 	sub	fp, #8
1b2e0     28 00 90 FD | 	jmp	#LR__2926
1b2e4                 | LR__2925
1b2e4     44 4E 05 F1 | 	add	fp, #68
1b2e8     A7 24 02 FB | 	rdlong	local04, fp
1b2ec     44 4E 85 F1 | 	sub	fp, #68
1b2f0     08 00 00 FF 
1b2f4     00 24 0E F2 | 	cmp	local04, ##4096 wz
1b2f8     08 4E 05 51 |  if_ne	add	fp, #8
1b2fc     A7 24 02 5B |  if_ne	rdlong	local04, fp
1b300     20 24 46 55 |  if_ne	or	local04, #32
1b304     A7 24 62 5C |  if_ne	wrlong	local04, fp
1b308     08 4E 85 51 |  if_ne	sub	fp, #8
1b30c                 | LR__2926
1b30c                 | LR__2927
1b30c                 | LR__2928
1b30c     08 4E 05 F1 | 	add	fp, #8
1b310     A7 24 02 FB | 	rdlong	local04, fp
1b314     08 4E 85 F1 | 	sub	fp, #8
1b318     03 00 00 FF 
1b31c     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1b320     F4 1E 02 FB | 	rdlong	local01, ptr___system__dat__
1b324     03 00 00 FF 
1b328     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1b32c     0F 25 CA F7 | 	test	local04, local01 wz
1b330     E0 FD 9F AD |  if_e	jmp	#LR__2921
1b334                 | LR__2929
1b334     0C 4E 05 F1 | 	add	fp, #12
1b338     A7 12 02 FB | 	rdlong	arg01, fp
1b33c     0C 4E 85 F1 | 	sub	fp, #12
1b340     09 27 02 F6 | 	mov	local05, arg01
1b344     97 06 48 FB | 	callpa	#(@LR__2931-@LR__2930)>>2,fcache_load_ptr_
1b348                 | LR__2930
1b348     13 FB C9 FA | 	rdbyte	result1, local05 wz
1b34c     01 26 06 51 |  if_ne	add	local05, #1
1b350     F4 FF 9F 5D |  if_ne	jmp	#LR__2930
1b354                 | LR__2931
1b354     13 13 C2 F2 | 	subr	arg01, local05
1b358     01 12 06 F1 | 	add	arg01, #1
1b35c     4C E1 BF FD | 	call	#__system___gc_alloc_managed
1b360     48 4E 05 F1 | 	add	fp, #72
1b364     A7 FA 61 FC | 	wrlong	result1, fp
1b368     48 4E 85 F1 | 	sub	fp, #72
1b36c     00 FA 0D F2 | 	cmp	result1, #0 wz
1b370     18 00 90 AD |  if_e	jmp	#LR__2932
1b374     48 4E 05 F1 | 	add	fp, #72
1b378     A7 12 02 FB | 	rdlong	arg01, fp
1b37c     3C 4E 85 F1 | 	sub	fp, #60
1b380     A7 14 02 FB | 	rdlong	arg02, fp
1b384     0C 4E 85 F1 | 	sub	fp, #12
1b388     70 A7 BF FD | 	call	#__system____builtin_strcpy
1b38c                 | LR__2932
1b38c     48 4E 05 F1 | 	add	fp, #72
1b390     A7 FA 01 FB | 	rdlong	result1, fp
1b394     48 4E 85 F1 | 	sub	fp, #72
1b398                 | LR__2933
1b398     A7 F0 03 F6 | 	mov	ptra, fp
1b39c     B2 00 A0 FD | 	call	#popregs_
1b3a0                 | __system___basic_dir_ret
1b3a0     2D 00 64 FD | 	ret
1b3a4                 | 
1b3a4                 | __system__pack_0438
1b3a4     09 01 02 F6 | 	mov	_var01, arg01
1b3a8     7F 16 06 F1 | 	add	arg03, #127
1b3ac     04 18 CE F7 | 	test	arg04, #4 wz
1b3b0     10 00 90 AD |  if_e	jmp	#LR__2940
1b3b4     00 00 0E F2 | 	cmp	_var01, #0 wz
1b3b8     16 00 C6 A9 |  if_e	decod	_var01, #22
1b3bc     F7 00 26 F4 | 	bith	_var01, #247
1b3c0     B4 00 90 FD | 	jmp	#LR__2949
1b3c4                 | LR__2940
1b3c4     02 18 CE F7 | 	test	arg04, #2 wz
1b3c8     00 C0 3F 5F 
1b3cc     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
1b3d0     00 14 06 56 |  if_ne	mov	arg02, #0
1b3d4     A0 00 90 5D |  if_ne	jmp	#LR__2948
1b3d8     08 18 CE F7 | 	test	arg04, #8 wz
1b3dc     00 00 06 56 |  if_ne	mov	_var01, #0
1b3e0     94 00 90 5D |  if_ne	jmp	#LR__2947
1b3e4     FF 16 56 F2 | 	cmps	arg03, #255 wc
1b3e8     00 C0 3F 3F 
1b3ec     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
1b3f0     00 14 06 36 |  if_ae	mov	arg02, #0
1b3f4     80 00 90 3D |  if_ae	jmp	#LR__2946
1b3f8     01 16 56 F2 | 	cmps	arg03, #1 wc
1b3fc     6C 00 90 3D |  if_ae	jmp	#LR__2944
1b400     01 14 46 F0 | 	shr	arg02, #1
1b404     00 03 02 F6 | 	mov	_var02, _var01
1b408     01 02 06 F5 | 	and	_var02, #1
1b40c     1F 02 66 F0 | 	shl	_var02, #31
1b410     01 15 42 F5 | 	or	arg02, _var02
1b414     01 00 46 F0 | 	shr	_var01, #1
1b418     97 1E 48 FB | 	callpa	#(@LR__2942-@LR__2941)>>2,fcache_load_ptr_
1b41c                 | LR__2941
1b41c     00 16 56 F2 | 	cmps	arg03, #0 wc
1b420     34 00 90 3D |  if_ae	jmp	#LR__2943
1b424     00 00 0E F2 | 	cmp	_var01, #0 wz
1b428     2C 00 90 AD |  if_e	jmp	#LR__2943
1b42c     0A 13 02 F6 | 	mov	arg01, arg02
1b430     01 12 06 F5 | 	and	arg01, #1
1b434     01 16 06 F1 | 	add	arg03, #1
1b438     01 14 46 F0 | 	shr	arg02, #1
1b43c     00 03 02 F6 | 	mov	_var02, _var01
1b440     01 02 06 F5 | 	and	_var02, #1
1b444     1F 02 66 F0 | 	shl	_var02, #31
1b448     01 15 42 F5 | 	or	arg02, _var02
1b44c     09 15 42 F5 | 	or	arg02, arg01
1b450     01 00 46 F0 | 	shr	_var01, #1
1b454     C4 FF 9F FD | 	jmp	#LR__2941
1b458                 | LR__2942
1b458                 | LR__2943
1b458     00 16 56 F2 | 	cmps	arg03, #0 wc
1b45c     18 00 90 3D |  if_ae	jmp	#LR__2945
1b460     00 14 0E F2 | 	cmp	arg02, #0 wz
1b464     6F 14 62 FD | 	wrnz	arg02
1b468     0C 00 90 FD | 	jmp	#LR__2945
1b46c                 | LR__2944
1b46c     17 01 06 F4 | 	bitl	_var01, #279
1b470     17 16 66 F0 | 	shl	arg03, #23
1b474     0B 01 42 F5 | 	or	_var01, arg03
1b478                 | LR__2945
1b478                 | LR__2946
1b478                 | LR__2947
1b478                 | LR__2948
1b478                 | LR__2949
1b478     01 00 CE F7 | 	test	_var01, #1 wz
1b47c     01 14 46 55 |  if_ne	or	arg02, #1
1b480     0A 17 02 F6 | 	mov	arg03, arg02
1b484     00 02 06 F6 | 	mov	_var02, #0
1b488     FF FF 3F FF 
1b48c     FF 15 06 F1 | 	add	arg02, ##2147483647
1b490     0B 15 12 F2 | 	cmp	arg02, arg03 wc
1b494     01 02 06 C6 |  if_b	mov	_var02, #1
1b498     01 01 02 F1 | 	add	_var01, _var02
1b49c     01 18 CE F7 | 	test	arg04, #1 wz
1b4a0     1F 00 26 54 |  if_ne	bith	_var01, #31
1b4a4     00 FB 01 F6 | 	mov	result1, _var01
1b4a8                 | __system__pack_0438_ret
1b4a8     2D 00 64 FD | 	ret
1b4ac                 | 
1b4ac                 | __system___rxtxioctl_0527
1b4ac     00 15 0E F2 | 	cmp	arg02, #256 wz
1b4b0     0C 00 90 AD |  if_e	jmp	#LR__2950
1b4b4     01 15 0E F2 | 	cmp	arg02, #257 wz
1b4b8     1C 00 90 AD |  if_e	jmp	#LR__2951
1b4bc     30 00 90 FD | 	jmp	#LR__2952
1b4c0                 | LR__2950
1b4c0     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1b4c4     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1b4c8     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1b4cc     0B FB 61 FC | 	wrlong	result1, arg03
1b4d0     00 FA 05 F6 | 	mov	result1, #0
1b4d4     28 00 90 FD | 	jmp	#LR__2953
1b4d8                 | LR__2951
1b4d8     0B 13 02 FB | 	rdlong	arg01, arg03
1b4dc     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1b4e0     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1b4e4     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1b4e8     00 FA 05 F6 | 	mov	result1, #0
1b4ec     10 00 90 FD | 	jmp	#LR__2953
1b4f0                 | LR__2952
1b4f0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1b4f4     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
1b4f8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1b4fc     01 FA 65 F6 | 	neg	result1, #1
1b500                 | LR__2953
1b500                 | __system___rxtxioctl_0527_ret
1b500     2D 00 64 FD | 	ret
1b504                 | 
1b504                 | __system____dummy_flush_0528
1b504     00 FA 05 F6 | 	mov	result1, #0
1b508                 | __system____dummy_flush_0528_ret
1b508     2D 00 64 FD | 	ret
1b50c                 | 
1b50c                 | __system___vfsread
1b50c     03 4A 05 F6 | 	mov	COUNT_, #3
1b510     A8 00 A0 FD | 	call	#pushregs_
1b514     28 F0 07 F1 | 	add	ptra, #40
1b518     04 4E 05 F1 | 	add	fp, #4
1b51c     A7 12 62 FC | 	wrlong	arg01, fp
1b520     04 4E 05 F1 | 	add	fp, #4
1b524     A7 14 62 FC | 	wrlong	arg02, fp
1b528     04 4E 05 F1 | 	add	fp, #4
1b52c     A7 16 62 FC | 	wrlong	arg03, fp
1b530     04 4E 85 F1 | 	sub	fp, #4
1b534     A7 FA 01 FB | 	rdlong	result1, fp
1b538     14 4E 05 F1 | 	add	fp, #20
1b53c     A7 FA 61 FC | 	wrlong	result1, fp
1b540     04 4E 05 F1 | 	add	fp, #4
1b544     A7 00 68 FC | 	wrlong	#0, fp
1b548     1C 4E 85 F1 | 	sub	fp, #28
1b54c     A7 12 02 FB | 	rdlong	arg01, fp
1b550     04 4E 85 F1 | 	sub	fp, #4
1b554     08 12 06 F1 | 	add	arg01, #8
1b558     09 FB 01 FB | 	rdlong	result1, arg01
1b55c     01 FA CD F7 | 	test	result1, #1 wz
1b560     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1b564     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1b568     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1b56c     01 FA 65 A6 |  if_e	neg	result1, #1
1b570     74 02 90 AD |  if_e	jmp	#LR__2966
1b574     04 4E 05 F1 | 	add	fp, #4
1b578     A7 12 02 FB | 	rdlong	arg01, fp
1b57c     04 4E 85 F1 | 	sub	fp, #4
1b580     14 12 06 F1 | 	add	arg01, #20
1b584     09 FB 09 FB | 	rdlong	result1, arg01 wz
1b588     B8 00 90 AD |  if_e	jmp	#LR__2961
1b58c     04 4E 05 F1 | 	add	fp, #4
1b590     A7 12 02 FB | 	rdlong	arg01, fp
1b594     09 17 02 F6 | 	mov	arg03, arg01
1b598     14 16 06 F1 | 	add	arg03, #20
1b59c     0B 1F 02 FB | 	rdlong	local01, arg03
1b5a0     0F 21 02 F6 | 	mov	local02, local01
1b5a4     13 1E 46 F7 | 	zerox	local01, #19
1b5a8     14 20 46 F0 | 	shr	local02, #20
1b5ac     02 20 66 F0 | 	shl	local02, #2
1b5b0     ED 20 02 F1 | 	add	local02, __methods__
1b5b4     10 21 02 FB | 	rdlong	local02, local02
1b5b8     04 4E 05 F1 | 	add	fp, #4
1b5bc     A7 14 02 FB | 	rdlong	arg02, fp
1b5c0     04 4E 05 F1 | 	add	fp, #4
1b5c4     A7 16 02 FB | 	rdlong	arg03, fp
1b5c8     0C 4E 85 F1 | 	sub	fp, #12
1b5cc     F2 22 02 F6 | 	mov	local03, objptr
1b5d0     0F E5 01 F6 | 	mov	objptr, local01
1b5d4     2D 20 62 FD | 	call	local02
1b5d8     11 E5 01 F6 | 	mov	objptr, local03
1b5dc     10 4E 05 F1 | 	add	fp, #16
1b5e0     A7 FA 61 FC | 	wrlong	result1, fp
1b5e4     10 4E 85 F1 | 	sub	fp, #16
1b5e8     00 FA 55 F2 | 	cmps	result1, #0 wc
1b5ec     44 00 90 3D |  if_ae	jmp	#LR__2960
1b5f0     04 4E 05 F1 | 	add	fp, #4
1b5f4     A7 22 02 FB | 	rdlong	local03, fp
1b5f8     11 1F 02 F6 | 	mov	local01, local03
1b5fc     08 22 06 F1 | 	add	local03, #8
1b600     11 21 02 FB | 	rdlong	local02, local03
1b604     20 20 46 F5 | 	or	local02, #32
1b608     08 1E 06 F1 | 	add	local01, #8
1b60c     0F 21 62 FC | 	wrlong	local02, local01
1b610     0C 4E 05 F1 | 	add	fp, #12
1b614     A7 12 0A FB | 	rdlong	arg01, fp wz
1b618     10 4E 85 F1 | 	sub	fp, #16
1b61c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1b620     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1b624     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1b628     01 FA 65 56 |  if_ne	neg	result1, #1
1b62c     00 FA 05 A6 |  if_e	mov	result1, #0
1b630     B4 01 90 FD | 	jmp	#LR__2966
1b634                 | LR__2960
1b634     10 4E 05 F1 | 	add	fp, #16
1b638     A7 FA 01 FB | 	rdlong	result1, fp
1b63c     10 4E 85 F1 | 	sub	fp, #16
1b640     A4 01 90 FD | 	jmp	#LR__2966
1b644                 | LR__2961
1b644     04 4E 05 F1 | 	add	fp, #4
1b648     A7 12 02 FB | 	rdlong	arg01, fp
1b64c     20 12 06 F1 | 	add	arg01, #32
1b650     09 13 0A FB | 	rdlong	arg01, arg01 wz
1b654     14 4E 05 F1 | 	add	fp, #20
1b658     A7 12 62 FC | 	wrlong	arg01, fp
1b65c     18 4E 85 F1 | 	sub	fp, #24
1b660     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1b664     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1b668     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1b66c     01 FA 65 A6 |  if_e	neg	result1, #1
1b670     74 01 90 AD |  if_e	jmp	#LR__2966
1b674     04 4E 05 F1 | 	add	fp, #4
1b678     A7 22 02 FB | 	rdlong	local03, fp
1b67c     04 4E 85 F1 | 	sub	fp, #4
1b680     28 22 06 F1 | 	add	local03, #40
1b684     11 21 0A FB | 	rdlong	local02, local03 wz
1b688     7C 00 90 AD |  if_e	jmp	#LR__2963
1b68c     04 4E 05 F1 | 	add	fp, #4
1b690     A7 12 02 FB | 	rdlong	arg01, fp
1b694     09 23 02 F6 | 	mov	local03, arg01
1b698     28 22 06 F1 | 	add	local03, #40
1b69c     11 1F 02 FB | 	rdlong	local01, local03
1b6a0     0F 21 02 F6 | 	mov	local02, local01
1b6a4     13 1E 46 F7 | 	zerox	local01, #19
1b6a8     14 20 46 F0 | 	shr	local02, #20
1b6ac     02 20 66 F0 | 	shl	local02, #2
1b6b0     ED 20 02 F1 | 	add	local02, __methods__
1b6b4     10 21 02 FB | 	rdlong	local02, local02
1b6b8     20 4E 05 F1 | 	add	fp, #32
1b6bc     A7 16 02 F6 | 	mov	arg03, fp
1b6c0     24 4E 85 F1 | 	sub	fp, #36
1b6c4     00 15 06 F6 | 	mov	arg02, #256
1b6c8     F2 22 02 F6 | 	mov	local03, objptr
1b6cc     0F E5 01 F6 | 	mov	objptr, local01
1b6d0     2D 20 62 FD | 	call	local02
1b6d4     11 E5 01 F6 | 	mov	objptr, local03
1b6d8     10 4E 05 F1 | 	add	fp, #16
1b6dc     A7 FA 61 FC | 	wrlong	result1, fp
1b6e0     00 FA 4D F2 | 	cmps	result1, #0 wz
1b6e4     10 4E 85 F1 | 	sub	fp, #16
1b6e8     1C 00 90 5D |  if_ne	jmp	#LR__2962
1b6ec     24 4E 05 F1 | 	add	fp, #36
1b6f0     A7 20 02 FB | 	rdlong	local02, fp
1b6f4     24 4E 85 F1 | 	sub	fp, #36
1b6f8     02 20 CE F7 | 	test	local02, #2 wz
1b6fc     20 4E 05 51 |  if_ne	add	fp, #32
1b700     A7 02 68 5C |  if_ne	wrlong	#1, fp
1b704     20 4E 85 51 |  if_ne	sub	fp, #32
1b708                 | LR__2962
1b708                 | LR__2963
1b708     10 4E 05 F1 | 	add	fp, #16
1b70c     A7 00 68 FC | 	wrlong	#0, fp
1b710     10 4E 85 F1 | 	sub	fp, #16
1b714                 | LR__2964
1b714     0C 4E 05 F1 | 	add	fp, #12
1b718     A7 22 02 FB | 	rdlong	local03, fp
1b71c     0C 4E 85 F1 | 	sub	fp, #12
1b720     01 22 16 F2 | 	cmp	local03, #1 wc
1b724     B4 00 90 CD |  if_b	jmp	#LR__2965
1b728     18 4E 05 F1 | 	add	fp, #24
1b72c     A7 20 02 FB | 	rdlong	local02, fp
1b730     10 23 02 F6 | 	mov	local03, local02
1b734     13 22 46 F7 | 	zerox	local03, #19
1b738     14 20 46 F0 | 	shr	local02, #20
1b73c     02 20 66 F0 | 	shl	local02, #2
1b740     ED 20 02 F1 | 	add	local02, __methods__
1b744     10 21 02 FB | 	rdlong	local02, local02
1b748     14 4E 85 F1 | 	sub	fp, #20
1b74c     A7 12 02 FB | 	rdlong	arg01, fp
1b750     04 4E 85 F1 | 	sub	fp, #4
1b754     F2 1E 02 F6 | 	mov	local01, objptr
1b758     11 E5 01 F6 | 	mov	objptr, local03
1b75c     2D 20 62 FD | 	call	local02
1b760     0F E5 01 F6 | 	mov	objptr, local01
1b764     14 4E 05 F1 | 	add	fp, #20
1b768     A7 FA 61 FC | 	wrlong	result1, fp
1b76c     14 4E 85 F1 | 	sub	fp, #20
1b770     00 FA 55 F2 | 	cmps	result1, #0 wc
1b774     64 00 90 CD |  if_b	jmp	#LR__2965
1b778     1C 4E 05 F1 | 	add	fp, #28
1b77c     A7 22 02 FB | 	rdlong	local03, fp
1b780     11 21 02 F6 | 	mov	local02, local03
1b784     01 20 06 F1 | 	add	local02, #1
1b788     A7 20 62 FC | 	wrlong	local02, fp
1b78c     08 4E 85 F1 | 	sub	fp, #8
1b790     A7 20 02 FB | 	rdlong	local02, fp
1b794     11 21 42 FC | 	wrbyte	local02, local03
1b798     04 4E 85 F1 | 	sub	fp, #4
1b79c     A7 22 02 FB | 	rdlong	local03, fp
1b7a0     01 22 06 F1 | 	add	local03, #1
1b7a4     A7 22 62 FC | 	wrlong	local03, fp
1b7a8     04 4E 85 F1 | 	sub	fp, #4
1b7ac     A7 22 02 FB | 	rdlong	local03, fp
1b7b0     01 22 86 F1 | 	sub	local03, #1
1b7b4     A7 22 62 FC | 	wrlong	local03, fp
1b7b8     14 4E 05 F1 | 	add	fp, #20
1b7bc     A7 22 0A FB | 	rdlong	local03, fp wz
1b7c0     20 4E 85 F1 | 	sub	fp, #32
1b7c4     4C FF 9F AD |  if_e	jmp	#LR__2964
1b7c8     14 4E 05 F1 | 	add	fp, #20
1b7cc     A7 20 02 FB | 	rdlong	local02, fp
1b7d0     14 4E 85 F1 | 	sub	fp, #20
1b7d4     0A 20 0E F2 | 	cmp	local02, #10 wz
1b7d8     38 FF 9F 5D |  if_ne	jmp	#LR__2964
1b7dc                 | LR__2965
1b7dc     10 4E 05 F1 | 	add	fp, #16
1b7e0     A7 FA 01 FB | 	rdlong	result1, fp
1b7e4     10 4E 85 F1 | 	sub	fp, #16
1b7e8                 | LR__2966
1b7e8     A7 F0 03 F6 | 	mov	ptra, fp
1b7ec     B2 00 A0 FD | 	call	#popregs_
1b7f0                 | __system___vfsread_ret
1b7f0     2D 00 64 FD | 	ret
1b7f4                 | 
1b7f4                 | __system____default_filbuf
1b7f4     04 4A 05 F6 | 	mov	COUNT_, #4
1b7f8     A8 00 A0 FD | 	call	#pushregs_
1b7fc     09 1F 02 F6 | 	mov	local01, arg01
1b800     0F 21 02 FB | 	rdlong	local02, local01
1b804     0C 20 06 F1 | 	add	local02, #12
1b808     10 FB 09 FB | 	rdlong	result1, local02 wz
1b80c     0C 20 86 F1 | 	sub	local02, #12
1b810     20 00 90 5D |  if_ne	jmp	#LR__2970
1b814     14 20 06 F1 | 	add	local02, #20
1b818     10 FB 01 F6 | 	mov	result1, local02
1b81c     04 20 86 F1 | 	sub	local02, #4
1b820     10 FB 61 FC | 	wrlong	result1, local02
1b824     04 20 86 F1 | 	sub	local02, #4
1b828     02 00 80 FF 
1b82c     10 01 68 FC | 	wrlong	##1024, local02
1b830     0C 20 86 F1 | 	sub	local02, #12
1b834                 | LR__2970
1b834     14 1E 06 F1 | 	add	local01, #20
1b838     0F 23 02 FB | 	rdlong	local03, local01
1b83c     11 25 02 F6 | 	mov	local04, local03
1b840     14 1E 86 F1 | 	sub	local01, #20
1b844     13 24 46 F7 | 	zerox	local04, #19
1b848     14 22 46 F0 | 	shr	local03, #20
1b84c     02 22 66 F0 | 	shl	local03, #2
1b850     ED 22 02 F1 | 	add	local03, __methods__
1b854     11 23 02 FB | 	rdlong	local03, local03
1b858     10 20 06 F1 | 	add	local02, #16
1b85c     10 15 02 FB | 	rdlong	arg02, local02
1b860     04 20 86 F1 | 	sub	local02, #4
1b864     10 17 02 FB | 	rdlong	arg03, local02
1b868     0C 20 86 F1 | 	sub	local02, #12
1b86c     0F 13 02 F6 | 	mov	arg01, local01
1b870     F2 1E 02 F6 | 	mov	local01, objptr
1b874     12 E5 01 F6 | 	mov	objptr, local04
1b878     2D 22 62 FD | 	call	local03
1b87c     0F E5 01 F6 | 	mov	objptr, local01
1b880     FD 24 02 F6 | 	mov	local04, result1
1b884     00 24 56 F2 | 	cmps	local04, #0 wc
1b888     01 FA 65 C6 |  if_b	neg	result1, #1
1b88c     28 00 90 CD |  if_b	jmp	#LR__2971
1b890     10 25 62 FC | 	wrlong	local04, local02
1b894     10 20 06 F1 | 	add	local02, #16
1b898     10 23 02 FB | 	rdlong	local03, local02
1b89c     0C 20 86 F1 | 	sub	local02, #12
1b8a0     10 23 62 FC | 	wrlong	local03, local02
1b8a4     04 20 06 F1 | 	add	local02, #4
1b8a8     10 23 02 FB | 	rdlong	local03, local02
1b8ac     01 22 46 F5 | 	or	local03, #1
1b8b0     10 23 62 FC | 	wrlong	local03, local02
1b8b4     12 FB 01 F6 | 	mov	result1, local04
1b8b8                 | LR__2971
1b8b8     A7 F0 03 F6 | 	mov	ptra, fp
1b8bc     B2 00 A0 FD | 	call	#popregs_
1b8c0                 | __system____default_filbuf_ret
1b8c0     2D 00 64 FD | 	ret
1b8c4                 | 
1b8c4                 | __system__getlower_0913
1b8c4     41 12 56 F2 | 	cmps	arg01, #65 wc
1b8c8     10 00 90 CD |  if_b	jmp	#LR__2980
1b8cc     5B 12 56 F2 | 	cmps	arg01, #91 wc
1b8d0     09 FB 01 C6 |  if_b	mov	result1, arg01
1b8d4     20 FA 05 C1 |  if_b	add	result1, #32
1b8d8     04 00 90 CD |  if_b	jmp	#__system__getlower_0913_ret
1b8dc                 | LR__2980
1b8dc     09 FB 01 F6 | 	mov	result1, arg01
1b8e0                 | __system__getlower_0913_ret
1b8e0     2D 00 64 FD | 	ret
1b8e4                 | 
1b8e4                 | __system___pat_match
1b8e4     08 4A 05 F6 | 	mov	COUNT_, #8
1b8e8     A8 00 A0 FD | 	call	#pushregs_
1b8ec     09 1F 02 F6 | 	mov	local01, arg01
1b8f0                 | LR__2990
1b8f0     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
1b8f4     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
1b8f8     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
1b8fc     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
1b900     2C 00 90 AD |  if_e	jmp	#LR__2991
1b904     0A 13 C2 FA | 	rdbyte	arg01, arg02
1b908     B8 FF BF FD | 	call	#__system__getlower_0913
1b90c     FD 22 02 F6 | 	mov	local03, result1
1b910     0F 13 C2 FA | 	rdbyte	arg01, local01
1b914     AC FF BF FD | 	call	#__system__getlower_0913
1b918     11 FB 09 F2 | 	cmp	result1, local03 wz
1b91c     00 FA 05 56 |  if_ne	mov	result1, #0
1b920     FC 00 90 5D |  if_ne	jmp	#LR__2999
1b924     01 1E 06 F1 | 	add	local01, #1
1b928     01 14 06 F1 | 	add	arg02, #1
1b92c     C0 FF 9F FD | 	jmp	#LR__2990
1b930                 | LR__2991
1b930     0A 23 C2 FA | 	rdbyte	local03, arg02
1b934     2A 22 0E F2 | 	cmp	local03, #42 wz
1b938     D4 00 90 5D |  if_ne	jmp	#LR__2998
1b93c     01 14 06 F1 | 	add	arg02, #1
1b940     0A 21 C2 FA | 	rdbyte	local02, arg02
1b944     01 14 86 F1 | 	sub	arg02, #1
1b948     2E 20 0E F2 | 	cmp	local02, #46 wz
1b94c     28 00 90 5D |  if_ne	jmp	#LR__2992
1b950     02 14 06 F1 | 	add	arg02, #2
1b954     0A 21 C2 FA | 	rdbyte	local02, arg02
1b958     02 14 86 F1 | 	sub	arg02, #2
1b95c     2A 20 0E F2 | 	cmp	local02, #42 wz
1b960     03 14 06 A1 |  if_e	add	arg02, #3
1b964     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
1b968     03 14 86 A1 |  if_e	sub	arg02, #3
1b96c     12 27 0A A6 |  if_e	mov	local05, local04 wz
1b970     01 FA 05 A6 |  if_e	mov	result1, #1
1b974     A8 00 90 AD |  if_e	jmp	#LR__2999
1b978                 | LR__2992
1b978     01 14 06 F1 | 	add	arg02, #1
1b97c     00 28 06 F6 | 	mov	local06, #0
1b980     97 1E 48 FB | 	callpa	#(@LR__2995-@LR__2993)>>2,fcache_load_ptr_
1b984                 | LR__2993
1b984     14 2B 02 F6 | 	mov	local07, local06
1b988     0A 2B 02 F1 | 	add	local07, arg02
1b98c     15 2B CA FA | 	rdbyte	local07, local07 wz
1b990     14 27 02 56 |  if_ne	mov	local05, local06
1b994     01 26 06 51 |  if_ne	add	local05, #1
1b998     13 29 02 56 |  if_ne	mov	local06, local05
1b99c     E4 FF 9F 5D |  if_ne	jmp	#LR__2993
1b9a0     00 2C 06 F6 | 	mov	local08, #0
1b9a4                 | LR__2994
1b9a4     16 2B 02 F6 | 	mov	local07, local08
1b9a8     0F 2B 02 F1 | 	add	local07, local01
1b9ac     15 2B CA FA | 	rdbyte	local07, local07 wz
1b9b0     16 27 02 56 |  if_ne	mov	local05, local08
1b9b4     01 26 06 51 |  if_ne	add	local05, #1
1b9b8     13 2D 02 56 |  if_ne	mov	local08, local05
1b9bc     E4 FF 9F 5D |  if_ne	jmp	#LR__2994
1b9c0                 | LR__2995
1b9c0     14 2D 52 F2 | 	cmps	local08, local06 wc
1b9c4     00 FA 05 C6 |  if_b	mov	result1, #0
1b9c8     54 00 90 CD |  if_b	jmp	#LR__2999
1b9cc     16 21 02 F6 | 	mov	local02, local08
1b9d0     14 21 82 F1 | 	sub	local02, local06
1b9d4     10 1F 02 F1 | 	add	local01, local02
1b9d8                 | LR__2996
1b9d8     01 28 56 F2 | 	cmps	local06, #1 wc
1b9dc     30 00 90 CD |  if_b	jmp	#LR__2997
1b9e0     0F 13 C2 FA | 	rdbyte	arg01, local01
1b9e4     DC FE BF FD | 	call	#__system__getlower_0913
1b9e8     FD 2C 02 F6 | 	mov	local08, result1
1b9ec     0A 13 C2 FA | 	rdbyte	arg01, arg02
1b9f0     D0 FE BF FD | 	call	#__system__getlower_0913
1b9f4     FD 2C 0A F2 | 	cmp	local08, result1 wz
1b9f8     00 FA 05 56 |  if_ne	mov	result1, #0
1b9fc     20 00 90 5D |  if_ne	jmp	#LR__2999
1ba00     01 1E 06 F1 | 	add	local01, #1
1ba04     01 14 06 F1 | 	add	arg02, #1
1ba08     01 28 86 F1 | 	sub	local06, #1
1ba0c     C8 FF 9F FD | 	jmp	#LR__2996
1ba10                 | LR__2997
1ba10                 | LR__2998
1ba10     0A 2D CA FA | 	rdbyte	local08, arg02 wz
1ba14     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
1ba18     01 FA 05 A6 |  if_e	mov	result1, #1
1ba1c     00 FA 05 56 |  if_ne	mov	result1, #0
1ba20                 | LR__2999
1ba20     A7 F0 03 F6 | 	mov	ptra, fp
1ba24     B2 00 A0 FD | 	call	#popregs_
1ba28                 | __system___pat_match_ret
1ba28     2D 00 64 FD | 	ret
1ba2c                 | 
1ba2c                 | _fatfs_cc_ff_uni2oem
1ba2c     00 00 06 F6 | 	mov	_var01, #0
1ba30     80 12 16 F2 | 	cmp	arg01, #128 wc
1ba34     09 01 02 C6 |  if_b	mov	_var01, arg01
1ba38     58 00 90 CD |  if_b	jmp	#LR__3004
1ba3c     80 00 00 FF 
1ba40     00 12 16 F2 | 	cmp	arg01, ##65536 wc
1ba44     4C 00 90 3D |  if_ae	jmp	#LR__3003
1ba48     0A FB 31 F9 | 	getword	result1, arg02, #0
1ba4c     01 00 00 FF 
1ba50     52 FB 0D F2 | 	cmp	result1, ##850 wz
1ba54     3C 00 90 5D |  if_ne	jmp	#LR__3003
1ba58                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
1ba58     00 00 06 F6 | 	mov	_var01, #0
1ba5c     97 14 48 FB | 	callpa	#(@LR__3001-@LR__3000)>>2,fcache_load_ptr_
1ba60                 | LR__3000
1ba60     00 FB 31 F9 | 	getword	result1, _var01, #0
1ba64     80 FA 15 F2 | 	cmp	result1, #128 wc
1ba68     1C 00 90 3D |  if_ae	jmp	#LR__3002
1ba6c     00 FB 31 F9 | 	getword	result1, _var01, #0
1ba70     01 FA 65 F0 | 	shl	result1, #1
1ba74     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
1ba78     FD FA E1 FA | 	rdword	result1, result1
1ba7c     FD 12 0A F2 | 	cmp	arg01, result1 wz
1ba80     01 00 06 51 |  if_ne	add	_var01, #1
1ba84     D8 FF 9F 5D |  if_ne	jmp	#LR__3000
1ba88                 | LR__3001
1ba88                 | LR__3002
1ba88     00 01 32 F9 | 	getword	_var01, _var01, #0
1ba8c     80 00 06 F1 | 	add	_var01, #128
1ba90     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
1ba94                 | LR__3003
1ba94                 | LR__3004
1ba94                 | ' 			c = (c + 0x80) & 0xFF;
1ba94                 | ' 		}
1ba94                 | ' 	}
1ba94                 | ' 
1ba94                 | ' 	return c;
1ba94     00 FB 01 F6 | 	mov	result1, _var01
1ba98                 | _fatfs_cc_ff_uni2oem_ret
1ba98     2D 00 64 FD | 	ret
1ba9c                 | 
1ba9c                 | _fatfs_cc_ff_oem2uni
1ba9c     00 00 06 F6 | 	mov	_var01, #0
1baa0     09 FB 31 F9 | 	getword	result1, arg01, #0
1baa4     80 FA 15 F2 | 	cmp	result1, #128 wc
1baa8     09 01 02 C6 |  if_b	mov	_var01, arg01
1baac     2C 00 90 CD |  if_b	jmp	#LR__3011
1bab0     0A 15 32 F9 | 	getword	arg02, arg02, #0
1bab4     01 00 00 FF 
1bab8     52 15 0E F2 | 	cmp	arg02, ##850 wz
1babc     1C 00 90 5D |  if_ne	jmp	#LR__3010
1bac0     09 FB 31 F9 | 	getword	result1, arg01, #0
1bac4     00 FB 15 F2 | 	cmp	result1, #256 wc
1bac8     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
1bacc     80 12 86 C1 |  if_b	sub	arg01, #128
1bad0     01 12 66 C0 |  if_b	shl	arg01, #1
1bad4     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
1bad8     09 01 E2 CA |  if_b	rdword	_var01, arg01
1badc                 | LR__3010
1badc                 | LR__3011
1badc                 | ' 		}
1badc                 | ' 	}
1badc                 | ' 
1badc                 | ' 	return c;
1badc     00 FB 01 F6 | 	mov	result1, _var01
1bae0                 | _fatfs_cc_ff_oem2uni_ret
1bae0     2D 00 64 FD | 	ret
1bae4                 | 
1bae4                 | _fatfs_cc_ff_wtoupper
1bae4     09 01 02 F6 | 	mov	_var01, arg01
1bae8     80 00 00 FF 
1baec     00 00 16 F2 | 	cmp	_var01, ##65536 wc
1baf0     60 01 90 3D |  if_ae	jmp	#LR__3033
1baf4     00 03 02 F6 | 	mov	_var02, _var01
1baf8     01 01 32 F9 | 	getword	_var01, _var02, #0
1bafc     08 00 00 FF 
1bb00     00 00 16 F2 | 	cmp	_var01, ##4096 wc
1bb04     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
1bb08     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
1bb0c     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
1bb10     01 00 00 3F 
1bb14     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
1bb18     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
1bb1c     01 00 00 3F 
1bb20     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
1bb24     02 07 02 F6 | 	mov	_var04, _var03
1bb28                 | ' 		uc = (WORD)uni;
1bb28                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
1bb28                 | ' 		for (;;) {
1bb28                 | LR__3020
1bb28     03 09 E2 FA | 	rdword	_var05, _var04
1bb2c     04 05 02 F6 | 	mov	_var03, _var05
1bb30     0F 04 4E F7 | 	zerox	_var03, #15 wz
1bb34     02 06 06 F1 | 	add	_var04, #2
1bb38     14 01 90 AD |  if_e	jmp	#LR__3032
1bb3c     01 05 32 F9 | 	getword	_var03, _var02, #0
1bb40     04 01 32 F9 | 	getword	_var01, _var05, #0
1bb44     00 05 12 F2 | 	cmp	_var03, _var01 wc
1bb48     04 01 90 CD |  if_b	jmp	#LR__3032
1bb4c     03 0B E2 FA | 	rdword	_var06, _var04
1bb50     05 0D 32 F9 | 	getword	_var07, _var06, #0
1bb54     08 0C 46 F0 | 	shr	_var07, #8
1bb58     05 0B 32 F9 | 	getword	_var06, _var06, #0
1bb5c     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
1bb60     01 05 32 F9 | 	getword	_var03, _var02, #0
1bb64     04 0F 32 F9 | 	getword	_var08, _var05, #0
1bb68     05 01 32 F9 | 	getword	_var01, _var06, #0
1bb6c     00 0F 02 F1 | 	add	_var08, _var01
1bb70     07 05 52 F2 | 	cmps	_var03, _var08 wc
1bb74     02 06 06 F1 | 	add	_var04, #2
1bb78     C4 00 90 3D |  if_ae	jmp	#LR__3031
1bb7c                 | ' 				switch (cmd) {
1bb7c     06 11 32 F9 | 	getword	_var09, _var07, #0
1bb80     09 10 26 F3 | 	fle	_var09, #9
1bb84     30 10 62 FD | 	jmprel	_var09
1bb88                 | LR__3021
1bb88     24 00 90 FD | 	jmp	#LR__3022
1bb8c     3C 00 90 FD | 	jmp	#LR__3023
1bb90     54 00 90 FD | 	jmp	#LR__3024
1bb94     5C 00 90 FD | 	jmp	#LR__3025
1bb98     64 00 90 FD | 	jmp	#LR__3026
1bb9c     6C 00 90 FD | 	jmp	#LR__3027
1bba0     74 00 90 FD | 	jmp	#LR__3028
1bba4     7C 00 90 FD | 	jmp	#LR__3029
1bba8     84 00 90 FD | 	jmp	#LR__3030
1bbac     A0 00 90 FD | 	jmp	#LR__3032
1bbb0                 | LR__3022
1bbb0     01 03 32 F9 | 	getword	_var02, _var02, #0
1bbb4     04 09 32 F9 | 	getword	_var05, _var05, #0
1bbb8     04 03 82 F1 | 	sub	_var02, _var05
1bbbc     01 02 66 F0 | 	shl	_var02, #1
1bbc0     03 03 02 F1 | 	add	_var02, _var04
1bbc4     01 03 E2 FA | 	rdword	_var02, _var02
1bbc8     84 00 90 FD | 	jmp	#LR__3032
1bbcc                 | LR__3023
1bbcc     01 05 32 F9 | 	getword	_var03, _var02, #0
1bbd0     01 03 32 F9 | 	getword	_var02, _var02, #0
1bbd4     04 09 32 F9 | 	getword	_var05, _var05, #0
1bbd8     04 03 82 F1 | 	sub	_var02, _var05
1bbdc     01 02 06 F5 | 	and	_var02, #1
1bbe0     02 03 C2 F2 | 	subr	_var02, _var03
1bbe4     68 00 90 FD | 	jmp	#LR__3032
1bbe8                 | LR__3024
1bbe8     01 03 32 F9 | 	getword	_var02, _var02, #0
1bbec     10 02 86 F1 | 	sub	_var02, #16
1bbf0     5C 00 90 FD | 	jmp	#LR__3032
1bbf4                 | LR__3025
1bbf4     01 03 32 F9 | 	getword	_var02, _var02, #0
1bbf8     20 02 86 F1 | 	sub	_var02, #32
1bbfc     50 00 90 FD | 	jmp	#LR__3032
1bc00                 | LR__3026
1bc00     01 03 32 F9 | 	getword	_var02, _var02, #0
1bc04     30 02 86 F1 | 	sub	_var02, #48
1bc08     44 00 90 FD | 	jmp	#LR__3032
1bc0c                 | LR__3027
1bc0c     01 03 32 F9 | 	getword	_var02, _var02, #0
1bc10     1A 02 86 F1 | 	sub	_var02, #26
1bc14     38 00 90 FD | 	jmp	#LR__3032
1bc18                 | LR__3028
1bc18     01 03 32 F9 | 	getword	_var02, _var02, #0
1bc1c     08 02 06 F1 | 	add	_var02, #8
1bc20     2C 00 90 FD | 	jmp	#LR__3032
1bc24                 | LR__3029
1bc24     01 03 32 F9 | 	getword	_var02, _var02, #0
1bc28     50 02 86 F1 | 	sub	_var02, #80
1bc2c     20 00 90 FD | 	jmp	#LR__3032
1bc30                 | LR__3030
1bc30     01 03 32 F9 | 	getword	_var02, _var02, #0
1bc34     0E 00 00 FF 
1bc38     60 02 86 F1 | 	sub	_var02, ##7264
1bc3c                 | ' 				}
1bc3c                 | ' 				break;
1bc3c     10 00 90 FD | 	jmp	#LR__3032
1bc40                 | LR__3031
1bc40     0F 0C 4E F7 | 	zerox	_var07, #15 wz
1bc44     02 0A 06 AA |  if_e	mul	_var06, #2
1bc48     05 07 02 A1 |  if_e	add	_var04, _var06
1bc4c     D8 FE 9F FD | 	jmp	#LR__3020
1bc50                 | LR__3032
1bc50     01 01 32 F9 | 	getword	_var01, _var02, #0
1bc54                 | LR__3033
1bc54                 | ' 		}
1bc54                 | ' 		uni = uc;
1bc54                 | ' 	}
1bc54                 | ' 
1bc54                 | ' 	return uni;
1bc54     00 FB 01 F6 | 	mov	result1, _var01
1bc58                 | _fatfs_cc_ff_wtoupper_ret
1bc58     2D 00 64 FD | 	ret
1bc5c                 | 
1bc5c                 | _fatfs_cc_strncpy
1bc5c     09 01 02 F6 | 	mov	_var01, arg01
1bc60     97 12 48 FB | 	callpa	#(@LR__3041-@LR__3040)>>2,fcache_load_ptr_
1bc64                 | ' 
1bc64                 | ' 	dscan = dst;
1bc64                 | ' 	sscan = src;
1bc64                 | ' 	count = n;
1bc64                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
1bc64                 | LR__3040
1bc64     01 16 86 F1 | 	sub	arg03, #1
1bc68     00 16 56 F2 | 	cmps	arg03, #0 wc
1bc6c     18 00 90 CD |  if_b	jmp	#LR__3042
1bc70     0A FB C1 FA | 	rdbyte	result1, arg02
1bc74     00 FB 41 FC | 	wrbyte	result1, _var01
1bc78     01 14 06 F1 | 	add	arg02, #1
1bc7c     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1bc80                 | ' 		continue;
1bc80     01 00 06 F1 | 	add	_var01, #1
1bc84     DC FF 9F 5D |  if_ne	jmp	#LR__3040
1bc88                 | LR__3041
1bc88                 | LR__3042
1bc88     97 0C 48 FB | 	callpa	#(@LR__3044-@LR__3043)>>2,fcache_load_ptr_
1bc8c                 | ' 	while (--count >= 0)
1bc8c                 | LR__3043
1bc8c     01 16 86 F1 | 	sub	arg03, #1
1bc90     00 16 56 F2 | 	cmps	arg03, #0 wc
1bc94     00 03 02 36 |  if_ae	mov	_var02, _var01
1bc98     01 00 06 31 |  if_ae	add	_var01, #1
1bc9c     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1bca0     E8 FF 9F 3D |  if_ae	jmp	#LR__3043
1bca4                 | LR__3044
1bca4                 | ' 		*dscan++ = '\0';
1bca4                 | ' 	return(dst);
1bca4     09 FB 01 F6 | 	mov	result1, arg01
1bca8                 | _fatfs_cc_strncpy_ret
1bca8     2D 00 64 FD | 	ret
1bcac                 | 
1bcac                 | _fatfs_cc_memcmp
1bcac                 | ' 	for (n = size; n > 0; n--)
1bcac     00 16 0E F2 | 	cmp	arg03, #0 wz
1bcb0     28 00 90 AD |  if_e	jmp	#LR__3051
1bcb4                 | LR__3050
1bcb4     09 01 C2 FA | 	rdbyte	_var01, arg01
1bcb8     0A 03 C2 FA | 	rdbyte	_var02, arg02
1bcbc     01 01 0A F2 | 	cmp	_var01, _var02 wz
1bcc0     01 12 06 A1 |  if_e	add	arg01, #1
1bcc4     01 14 06 A1 |  if_e	add	arg02, #1
1bcc8                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
1bcc8     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
1bccc     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1bcd0     01 FB 81 51 |  if_ne	sub	result1, _var02
1bcd4     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
1bcd8     F6 17 6E FB | 	djnz	arg03, #LR__3050
1bcdc                 | LR__3051
1bcdc                 | ' 
1bcdc                 | ' 	return(0);
1bcdc     00 FA 05 F6 | 	mov	result1, #0
1bce0                 | _fatfs_cc_memcmp_ret
1bce0     2D 00 64 FD | 	ret
1bce4                 | 
1bce4                 | _fatfs_cc_strncmp
1bce4     09 01 0A F6 | 	mov	_var01, arg01 wz
1bce8     14 00 90 5D |  if_ne	jmp	#LR__3060
1bcec                 | ' 		return scan2 ? -1 : 0;
1bcec     00 14 0E F2 | 	cmp	arg02, #0 wz
1bcf0     01 02 66 56 |  if_ne	neg	_var02, #1
1bcf4     00 02 06 A6 |  if_e	mov	_var02, #0
1bcf8     01 FB 01 F6 | 	mov	result1, _var02
1bcfc     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
1bd00                 | LR__3060
1bd00     00 14 0E F2 | 	cmp	arg02, #0 wz
1bd04     01 FA 05 A6 |  if_e	mov	result1, #1
1bd08     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1bd0c     0B 05 02 F6 | 	mov	_var03, arg03
1bd10     97 16 48 FB | 	callpa	#(@LR__3062-@LR__3061)>>2,fcache_load_ptr_
1bd14                 | ' 	count = n;
1bd14                 | ' 	do {
1bd14                 | LR__3061
1bd14     00 07 C2 FA | 	rdbyte	_var04, _var01
1bd18     0A 09 02 F6 | 	mov	_var05, arg02
1bd1c     04 0B C2 FA | 	rdbyte	_var06, _var05
1bd20     01 04 86 F1 | 	sub	_var03, #1
1bd24     00 04 56 F2 | 	cmps	_var03, #0 wc
1bd28     01 00 06 F1 | 	add	_var01, #1
1bd2c     01 14 06 F1 | 	add	arg02, #1
1bd30     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1bd34     08 00 90 2D |  if_nc_and_z	jmp	#LR__3063
1bd38     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1bd3c     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3061
1bd40                 | LR__3062
1bd40                 | LR__3063
1bd40     00 04 56 F2 | 	cmps	_var03, #0 wc
1bd44                 | ' 		return(0);
1bd44     00 FA 05 C6 |  if_b	mov	result1, #0
1bd48     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
1bd4c     05 07 0A F2 | 	cmp	_var04, _var06 wz
1bd50                 | ' 		return(0);
1bd50     00 FA 05 A6 |  if_e	mov	result1, #0
1bd54     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1bd58     00 06 0E F2 | 	cmp	_var04, #0 wz
1bd5c                 | ' 		return(-1);
1bd5c     01 FA 65 A6 |  if_e	neg	result1, #1
1bd60     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1bd64     00 0A 0E F2 | 	cmp	_var06, #0 wz
1bd68                 | ' 		return(1);
1bd68     01 FA 05 A6 |  if_e	mov	result1, #1
1bd6c                 | ' 		return(c1 - c2);
1bd6c     03 FB 01 56 |  if_ne	mov	result1, _var04
1bd70     05 FB 81 51 |  if_ne	sub	result1, _var06
1bd74                 | _fatfs_cc_strncmp_ret
1bd74     2D 00 64 FD | 	ret
1bd78                 | 
1bd78                 | _fatfs_cc_strchr
1bd78                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/libc/string/strchr.c"
1bd78                 | ' 	while ((c = *s++) != (char) charwanted)
1bd78                 | LR__3070
1bd78     09 01 02 F6 | 	mov	_var01, arg01
1bd7c     00 03 C2 FA | 	rdbyte	_var02, _var01
1bd80     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
1bd84     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
1bd88     03 05 0A F2 | 	cmp	_var03, _var04 wz
1bd8c     01 12 06 F1 | 	add	arg01, #1
1bd90     14 00 90 AD |  if_e	jmp	#LR__3071
1bd94     01 05 02 F6 | 	mov	_var03, _var02
1bd98     07 04 4E F7 | 	zerox	_var03, #7 wz
1bd9c     00 FA 05 A6 |  if_e	mov	result1, #0
1bda0     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
1bda4     D0 FF 9F FD | 	jmp	#LR__3070
1bda8                 | LR__3071
1bda8                 | ' 	return((char *)--s);
1bda8     01 12 86 F1 | 	sub	arg01, #1
1bdac     09 FB 01 F6 | 	mov	result1, arg01
1bdb0                 | _fatfs_cc_strchr_ret
1bdb0     2D 00 64 FD | 	ret
1bdb4                 | 
1bdb4                 | _fatfs_cc_disk_initialize
1bdb4     04 4A 05 F6 | 	mov	COUNT_, #4
1bdb8     A8 00 A0 FD | 	call	#pushregs_
1bdbc     40 F0 07 F1 | 	add	ptra, #64
1bdc0     04 4E 05 F1 | 	add	fp, #4
1bdc4     A7 12 42 FC | 	wrbyte	arg01, fp
1bdc8     01 00 00 FF 
1bdcc     14 E4 05 F1 | 	add	objptr, ##532
1bdd0     F2 18 02 FB | 	rdlong	arg04, objptr
1bdd4     2C 4E 05 F1 | 	add	fp, #44
1bdd8     A7 18 62 FC | 	wrlong	arg04, fp
1bddc     04 E4 85 F1 | 	sub	objptr, #4
1bde0     F2 18 02 FB | 	rdlong	arg04, objptr
1bde4     04 4E 05 F1 | 	add	fp, #4
1bde8     A7 18 62 FC | 	wrlong	arg04, fp
1bdec     08 E4 05 F1 | 	add	objptr, #8
1bdf0     F2 18 02 FB | 	rdlong	arg04, objptr
1bdf4     04 4E 05 F1 | 	add	fp, #4
1bdf8     A7 18 62 FC | 	wrlong	arg04, fp
1bdfc     04 E4 05 F1 | 	add	objptr, #4
1be00     F2 18 02 FB | 	rdlong	arg04, objptr
1be04     04 4E 05 F1 | 	add	fp, #4
1be08     A7 18 62 FC | 	wrlong	arg04, fp
1be0c     04 E4 05 F1 | 	add	objptr, #4
1be10     F2 02 48 FC | 	wrbyte	#1, objptr
1be14     01 00 00 FF 
1be18     20 E4 85 F1 | 	sub	objptr, ##544
1be1c     38 4E 85 F1 | 	sub	fp, #56
1be20     A7 18 CA FA | 	rdbyte	arg04, fp wz
1be24     04 4E 85 F1 | 	sub	fp, #4
1be28                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1be28                 | '             return RES_NOTRDY;
1be28     03 FA 05 56 |  if_ne	mov	result1, #3
1be2c     D8 05 90 5D |  if_ne	jmp	#LR__3098
1be30     13 00 00 FF 
1be34     10 13 06 F6 | 	mov	arg01, ##10000
1be38     6C A0 BF FD | 	call	#__system___waitus
1be3c     30 4E 05 F1 | 	add	fp, #48
1be40     A7 12 02 FB | 	rdlong	arg01, fp
1be44     09 01 08 FC | 	wrpin	#0, arg01
1be48     04 4E 05 F1 | 	add	fp, #4
1be4c     A7 12 02 FB | 	rdlong	arg01, fp
1be50     09 01 08 FC | 	wrpin	#0, arg01
1be54     04 4E 05 F1 | 	add	fp, #4
1be58     A7 12 02 FB | 	rdlong	arg01, fp
1be5c     09 01 08 FC | 	wrpin	#0, arg01
1be60     04 4E 05 F1 | 	add	fp, #4
1be64     A7 12 02 FB | 	rdlong	arg01, fp
1be68     09 00 80 FF 
1be6c     09 01 08 FC | 	wrpin	##4608, arg01
1be70     0C 4E 85 F1 | 	sub	fp, #12
1be74     A7 12 02 FB | 	rdlong	arg01, fp
1be78     59 12 62 FD | 	drvh	arg01
1be7c     04 4E 05 F1 | 	add	fp, #4
1be80     A7 12 02 FB | 	rdlong	arg01, fp
1be84     59 12 62 FD | 	drvh	arg01
1be88     04 4E 05 F1 | 	add	fp, #4
1be8c     A7 12 02 FB | 	rdlong	arg01, fp
1be90     59 12 62 FD | 	drvh	arg01
1be94     04 4E 05 F1 | 	add	fp, #4
1be98     A7 12 02 FB | 	rdlong	arg01, fp
1be9c     59 12 62 FD | 	drvh	arg01
1bea0     20 4E 85 F1 | 	sub	fp, #32
1bea4     00 04 80 FF 
1bea8     A7 20 68 FC | 	wrlong	##524304, fp
1beac     04 4E 05 F1 | 	add	fp, #4
1beb0     20 03 80 FF 
1beb4     A7 90 68 FC | 	wrlong	##409672, fp
1beb8     14 4E 05 F1 | 	add	fp, #20
1bebc     A7 1E 02 FB | 	rdlong	local01, fp
1bec0     18 4E 85 F1 | 	sub	fp, #24
1bec4     A7 16 02 FB | 	rdlong	arg03, fp
1bec8     40 1E 62 FD | 	dirl	local01
1becc     A0 03 80 FF 
1bed0     0F 91 08 FC | 	wrpin	##475208, local01
1bed4     0F 17 12 FC | 	wxpin	arg03, local01
1bed8     0F 01 28 FC | 	wypin	#0, local01
1bedc     41 1E 62 FD | 	dirh	local01
1bee0     1C 4E 05 F1 | 	add	fp, #28
1bee4     A7 20 02 FB | 	rdlong	local02, fp
1bee8     10 1F 82 F1 | 	sub	local01, local02
1beec     07 1E 06 F5 | 	and	local01, #7
1bef0     18 1E 66 F0 | 	shl	local01, #24
1bef4     78 14 06 F6 | 	mov	arg02, #120
1bef8     0F 15 42 F5 | 	or	arg02, local01
1befc     14 4E 85 F1 | 	sub	fp, #20
1bf00     A7 14 62 FC | 	wrlong	arg02, fp
1bf04     14 4E 05 F1 | 	add	fp, #20
1bf08     A7 12 02 FB | 	rdlong	arg01, fp
1bf0c     10 14 26 F4 | 	bith	arg02, #16
1bf10     40 12 62 FD | 	dirl	arg01
1bf14     09 15 02 FC | 	wrpin	arg02, arg01
1bf18     09 3F 18 FC | 	wxpin	#31, arg01
1bf1c     FF FF FF FF 
1bf20     09 FF 2B FC | 	wypin	##-1, arg01
1bf24     41 12 62 FD | 	dirh	arg01
1bf28     04 4E 85 F1 | 	sub	fp, #4
1bf2c     A7 14 02 FB | 	rdlong	arg02, fp
1bf30     08 4E 05 F1 | 	add	fp, #8
1bf34     A7 22 02 FB | 	rdlong	local03, fp
1bf38     11 15 82 F1 | 	sub	arg02, local03
1bf3c     07 14 06 F5 | 	and	arg02, #7
1bf40     18 14 66 F0 | 	shl	arg02, #24
1bf44     14 4E 85 F1 | 	sub	fp, #20
1bf48     A7 14 62 FC | 	wrlong	arg02, fp
1bf4c     29 00 00 FF 
1bf50     7A 14 46 F5 | 	or	arg02, ##21114
1bf54     A7 14 62 FC | 	wrlong	arg02, fp
1bf58     14 4E 05 F1 | 	add	fp, #20
1bf5c     A7 12 02 FB | 	rdlong	arg01, fp
1bf60     40 12 62 FD | 	dirl	arg01
1bf64     09 15 02 FC | 	wrpin	arg02, arg01
1bf68     09 4F 18 FC | 	wxpin	#39, arg01
1bf6c     09 01 28 FC | 	wypin	#0, arg01
1bf70     41 12 62 FD | 	dirh	arg01
1bf74     28 4E 85 F1 | 	sub	fp, #40
1bf78     A7 12 02 F6 | 	mov	arg01, fp
1bf7c     14 4E 85 F1 | 	sub	fp, #20
1bf80     0A 14 06 F6 | 	mov	arg02, #10
1bf84     1C 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0947
1bf88     00 12 06 F6 | 	mov	arg01, #0
1bf8c     00 14 06 F6 | 	mov	arg02, #0
1bf90     E8 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0971
1bf94     24 80 B0 FD | 	call	#_fatfs_cc_deselect_0957
1bf98     64 12 06 F6 | 	mov	arg01, #100
1bf9c     08 9F BF FD | 	call	#__system___waitus
1bfa0     14 4E 05 F1 | 	add	fp, #20
1bfa4     A7 12 02 F6 | 	mov	arg01, fp
1bfa8     14 4E 85 F1 | 	sub	fp, #20
1bfac     0A 14 06 F6 | 	mov	arg02, #10
1bfb0     F0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0947
1bfb4     0C 4E 05 F1 | 	add	fp, #12
1bfb8     A7 00 48 FC | 	wrbyte	#0, fp
1bfbc     0C 4E 85 F1 | 	sub	fp, #12
1bfc0     00 12 06 F6 | 	mov	arg01, #0
1bfc4     00 14 06 F6 | 	mov	arg02, #0
1bfc8     B0 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0971
1bfcc     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
1bfd0     01 18 0E F2 | 	cmp	arg04, #1 wz
1bfd4     B8 03 90 5D |  if_ne	jmp	#LR__3097
1bfd8     08 12 06 F6 | 	mov	arg01, #8
1bfdc     AA 15 06 F6 | 	mov	arg02, #426
1bfe0     98 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0971
1bfe4     FD FA E1 F8 | 	getbyte	result1, result1, #0
1bfe8     01 FA 0D F2 | 	cmp	result1, #1 wz
1bfec     98 01 90 5D |  if_ne	jmp	#LR__3083
1bff0     14 4E 05 F1 | 	add	fp, #20
1bff4     A7 12 02 F6 | 	mov	arg01, fp
1bff8     14 4E 85 F1 | 	sub	fp, #20
1bffc     04 14 06 F6 | 	mov	arg02, #4
1c000     A0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0947
1c004     16 4E 05 F1 | 	add	fp, #22
1c008     A7 24 C2 FA | 	rdbyte	local04, fp
1c00c     16 4E 85 F1 | 	sub	fp, #22
1c010     01 24 0E F2 | 	cmp	local04, #1 wz
1c014     17 4E 05 A1 |  if_e	add	fp, #23
1c018     A7 22 C2 AA |  if_e	rdbyte	local03, fp
1c01c     17 4E 85 A1 |  if_e	sub	fp, #23
1c020     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
1c024     68 03 90 5D |  if_ne	jmp	#LR__3096
1c028                 | ' 				for (tmr = 1000; tmr; tmr--) {
1c028     18 4E 05 F1 | 	add	fp, #24
1c02c     01 00 80 FF 
1c030     A7 D0 6B FC | 	wrlong	##1000, fp
1c034     18 4E 85 F1 | 	sub	fp, #24
1c038                 | LR__3080
1c038     18 4E 05 F1 | 	add	fp, #24
1c03c     A7 1E 0A FB | 	rdlong	local01, fp wz
1c040     18 4E 85 F1 | 	sub	fp, #24
1c044     3C 00 90 AD |  if_e	jmp	#LR__3081
1c048     A9 12 06 F6 | 	mov	arg01, #169
1c04c     1E 14 C6 F9 | 	decod	arg02, #30
1c050     28 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0971
1c054     FD 24 02 F6 | 	mov	local04, result1
1c058     07 24 4E F7 | 	zerox	local04, #7 wz
1c05c     24 00 90 AD |  if_e	jmp	#LR__3081
1c060     01 00 00 FF 
1c064     E8 13 06 F6 | 	mov	arg01, ##1000
1c068     3C 9E BF FD | 	call	#__system___waitus
1c06c     18 4E 05 F1 | 	add	fp, #24
1c070     A7 24 02 FB | 	rdlong	local04, fp
1c074     01 24 86 F1 | 	sub	local04, #1
1c078     A7 24 62 FC | 	wrlong	local04, fp
1c07c     18 4E 85 F1 | 	sub	fp, #24
1c080     B4 FF 9F FD | 	jmp	#LR__3080
1c084                 | LR__3081
1c084     18 4E 05 F1 | 	add	fp, #24
1c088     A7 24 0A FB | 	rdlong	local04, fp wz
1c08c     18 4E 85 F1 | 	sub	fp, #24
1c090     4C 00 90 AD |  if_e	jmp	#LR__3082
1c094     3A 12 06 F6 | 	mov	arg01, #58
1c098     00 14 06 F6 | 	mov	arg02, #0
1c09c     DC 81 B0 FD | 	call	#_fatfs_cc_send_cmd_0971
1c0a0     FD 22 02 F6 | 	mov	local03, result1
1c0a4     07 22 4E F7 | 	zerox	local03, #7 wz
1c0a8     34 00 90 5D |  if_ne	jmp	#LR__3082
1c0ac     14 4E 05 F1 | 	add	fp, #20
1c0b0     A7 12 02 F6 | 	mov	arg01, fp
1c0b4     14 4E 85 F1 | 	sub	fp, #20
1c0b8     04 14 06 F6 | 	mov	arg02, #4
1c0bc     E4 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0947
1c0c0     14 4E 05 F1 | 	add	fp, #20
1c0c4     A7 1E C2 FA | 	rdbyte	local01, fp
1c0c8     40 1E CE F7 | 	test	local01, #64 wz
1c0cc     0C 24 06 56 |  if_ne	mov	local04, #12
1c0d0     04 24 06 A6 |  if_e	mov	local04, #4
1c0d4     08 4E 85 F1 | 	sub	fp, #8
1c0d8     A7 24 42 FC | 	wrbyte	local04, fp
1c0dc     0C 4E 85 F1 | 	sub	fp, #12
1c0e0                 | LR__3082
1c0e0     14 24 06 FB | 	rdlong	local04, #20
1c0e4     18 4E 05 F1 | 	add	fp, #24
1c0e8     A7 24 62 FC | 	wrlong	local04, fp
1c0ec     0C 4E 05 F1 | 	add	fp, #12
1c0f0     A7 24 02 FB | 	rdlong	local04, fp
1c0f4     1B 24 26 F4 | 	bith	local04, #27
1c0f8     A7 24 62 FC | 	wrlong	local04, fp
1c0fc     0C 4E 85 F1 | 	sub	fp, #12
1c100     A7 24 02 FB | 	rdlong	local04, fp
1c104     18 4E 85 F1 | 	sub	fp, #24
1c108     68 78 04 FF 
1c10c     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1c110     1C 4E 05 C1 |  if_b	add	fp, #28
1c114     00 01 80 CF 
1c118     A7 08 68 CC |  if_b	wrlong	##131076, fp
1c11c     1C 4E 85 C1 |  if_b	sub	fp, #28
1c120     6C 02 90 CD |  if_b	jmp	#LR__3096
1c124     18 4E 05 F1 | 	add	fp, #24
1c128     A7 24 02 FB | 	rdlong	local04, fp
1c12c     18 4E 85 F1 | 	sub	fp, #24
1c130     E1 F5 05 FF 
1c134     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1c138     1C 4E 05 C1 |  if_b	add	fp, #28
1c13c     00 01 80 CF 
1c140     A7 0A 68 CC |  if_b	wrlong	##131077, fp
1c144     1C 4E 85 C1 |  if_b	sub	fp, #28
1c148     44 02 90 CD |  if_b	jmp	#LR__3096
1c14c     18 4E 05 F1 | 	add	fp, #24
1c150     A7 24 02 FB | 	rdlong	local04, fp
1c154     18 4E 85 F1 | 	sub	fp, #24
1c158     3B 58 08 FF 
1c15c     01 24 16 F2 | 	cmp	local04, ##280000001 wc
1c160     1C 4E 05 C1 |  if_b	add	fp, #28
1c164     00 01 80 CF 
1c168     A7 0C 68 CC |  if_b	wrlong	##131078, fp
1c16c     1C 4E 85 C1 |  if_b	sub	fp, #28
1c170     1C 02 90 CD |  if_b	jmp	#LR__3096
1c174     1C 4E 05 F1 | 	add	fp, #28
1c178     80 01 80 FF 
1c17c     A7 10 68 FC | 	wrlong	##196616, fp
1c180     1C 4E 85 F1 | 	sub	fp, #28
1c184     08 02 90 FD | 	jmp	#LR__3096
1c188                 | LR__3083
1c188     A9 12 06 F6 | 	mov	arg01, #169
1c18c     00 14 06 F6 | 	mov	arg02, #0
1c190     E8 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0971
1c194     FD 24 E2 F8 | 	getbyte	local04, result1, #0
1c198     02 24 16 F2 | 	cmp	local04, #2 wc
1c19c     18 00 90 3D |  if_ae	jmp	#LR__3084
1c1a0     0C 4E 05 F1 | 	add	fp, #12
1c1a4     A7 04 48 FC | 	wrbyte	#2, fp
1c1a8     04 4E 05 F1 | 	add	fp, #4
1c1ac     A7 52 49 FC | 	wrbyte	#169, fp
1c1b0     10 4E 85 F1 | 	sub	fp, #16
1c1b4     14 00 90 FD | 	jmp	#LR__3085
1c1b8                 | LR__3084
1c1b8     0C 4E 05 F1 | 	add	fp, #12
1c1bc     A7 02 48 FC | 	wrbyte	#1, fp
1c1c0     04 4E 05 F1 | 	add	fp, #4
1c1c4     A7 02 48 FC | 	wrbyte	#1, fp
1c1c8     10 4E 85 F1 | 	sub	fp, #16
1c1cc                 | LR__3085
1c1cc                 | ' 				ty =  0x01 ; cmd =  (1) ;
1c1cc                 | ' 			}
1c1cc                 | ' 			for (tmr = 1000; tmr; tmr--) {
1c1cc     18 4E 05 F1 | 	add	fp, #24
1c1d0     01 00 80 FF 
1c1d4     A7 D0 6B FC | 	wrlong	##1000, fp
1c1d8     18 4E 85 F1 | 	sub	fp, #24
1c1dc                 | LR__3086
1c1dc     18 4E 05 F1 | 	add	fp, #24
1c1e0     A7 22 0A FB | 	rdlong	local03, fp wz
1c1e4     18 4E 85 F1 | 	sub	fp, #24
1c1e8     44 00 90 AD |  if_e	jmp	#LR__3087
1c1ec     10 4E 05 F1 | 	add	fp, #16
1c1f0     A7 12 C2 FA | 	rdbyte	arg01, fp
1c1f4     10 4E 85 F1 | 	sub	fp, #16
1c1f8     00 14 06 F6 | 	mov	arg02, #0
1c1fc     7C 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0971
1c200     FD 24 02 F6 | 	mov	local04, result1
1c204     07 24 4E F7 | 	zerox	local04, #7 wz
1c208     24 00 90 AD |  if_e	jmp	#LR__3087
1c20c     01 00 00 FF 
1c210     E8 13 06 F6 | 	mov	arg01, ##1000
1c214     90 9C BF FD | 	call	#__system___waitus
1c218     18 4E 05 F1 | 	add	fp, #24
1c21c     A7 24 02 FB | 	rdlong	local04, fp
1c220     01 24 86 F1 | 	sub	local04, #1
1c224     A7 24 62 FC | 	wrlong	local04, fp
1c228     18 4E 85 F1 | 	sub	fp, #24
1c22c     AC FF 9F FD | 	jmp	#LR__3086
1c230                 | LR__3087
1c230     18 4E 05 F1 | 	add	fp, #24
1c234     A7 24 0A FB | 	rdlong	local04, fp wz
1c238     18 4E 85 F1 | 	sub	fp, #24
1c23c     14 00 90 AD |  if_e	jmp	#LR__3088
1c240     10 12 06 F6 | 	mov	arg01, #16
1c244     09 14 C6 F9 | 	decod	arg02, #9
1c248     30 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0971
1c24c     07 FA 4D F7 | 	zerox	result1, #7 wz
1c250     0C 00 90 AD |  if_e	jmp	#LR__3089
1c254                 | LR__3088
1c254     0C 4E 05 F1 | 	add	fp, #12
1c258     A7 00 48 FC | 	wrbyte	#0, fp
1c25c     0C 4E 85 F1 | 	sub	fp, #12
1c260                 | LR__3089
1c260     14 24 06 FB | 	rdlong	local04, #20
1c264     18 4E 05 F1 | 	add	fp, #24
1c268     A7 24 62 FC | 	wrlong	local04, fp
1c26c     18 4E 85 F1 | 	sub	fp, #24
1c270     F0 FA 02 FF 
1c274     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1c278     18 00 90 3D |  if_ae	jmp	#LR__3090
1c27c     24 4E 05 F1 | 	add	fp, #36
1c280     A7 24 02 FB | 	rdlong	local04, fp
1c284     1B 24 26 F4 | 	bith	local04, #27
1c288     A7 24 62 FC | 	wrlong	local04, fp
1c28c     24 4E 85 F1 | 	sub	fp, #36
1c290     2C 00 90 FD | 	jmp	#LR__3091
1c294                 | LR__3090
1c294     18 4E 05 F1 | 	add	fp, #24
1c298     A7 24 02 FB | 	rdlong	local04, fp
1c29c     18 4E 85 F1 | 	sub	fp, #24
1c2a0     E1 F5 05 FF 
1c2a4     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1c2a8     24 4E 05 C1 |  if_b	add	fp, #36
1c2ac     A7 24 02 CB |  if_b	rdlong	local04, fp
1c2b0     80 00 04 CF 
1c2b4     00 24 46 C5 |  if_b	or	local04, ##134283264
1c2b8     A7 24 62 CC |  if_b	wrlong	local04, fp
1c2bc     24 4E 85 C1 |  if_b	sub	fp, #36
1c2c0                 | LR__3091
1c2c0     18 4E 05 F1 | 	add	fp, #24
1c2c4     A7 24 02 FB | 	rdlong	local04, fp
1c2c8     18 4E 85 F1 | 	sub	fp, #24
1c2cc     F0 FA 02 FF 
1c2d0     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1c2d4     1C 4E 05 C1 |  if_b	add	fp, #28
1c2d8     00 01 80 CF 
1c2dc     A7 08 68 CC |  if_b	wrlong	##131076, fp
1c2e0     1C 4E 85 C1 |  if_b	sub	fp, #28
1c2e4     A8 00 90 CD |  if_b	jmp	#LR__3095
1c2e8     18 4E 05 F1 | 	add	fp, #24
1c2ec     A7 24 02 FB | 	rdlong	local04, fp
1c2f0     18 4E 85 F1 | 	sub	fp, #24
1c2f4     68 78 04 FF 
1c2f8     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1c2fc     1C 4E 05 C1 |  if_b	add	fp, #28
1c300     80 01 80 CF 
1c304     A7 0C 68 CC |  if_b	wrlong	##196614, fp
1c308     1C 4E 85 C1 |  if_b	sub	fp, #28
1c30c     80 00 90 CD |  if_b	jmp	#LR__3094
1c310     18 4E 05 F1 | 	add	fp, #24
1c314     A7 24 02 FB | 	rdlong	local04, fp
1c318     18 4E 85 F1 | 	sub	fp, #24
1c31c     E1 F5 05 FF 
1c320     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1c324     1C 4E 05 C1 |  if_b	add	fp, #28
1c328     00 02 80 CF 
1c32c     A7 10 68 CC |  if_b	wrlong	##262152, fp
1c330     1C 4E 85 C1 |  if_b	sub	fp, #28
1c334     58 00 90 CD |  if_b	jmp	#LR__3093
1c338     18 4E 05 F1 | 	add	fp, #24
1c33c     A7 24 02 FB | 	rdlong	local04, fp
1c340     18 4E 85 F1 | 	sub	fp, #24
1c344     59 73 07 FF 
1c348     81 24 16 F2 | 	cmp	local04, ##250000001 wc
1c34c     1C 4E 05 C1 |  if_b	add	fp, #28
1c350     80 02 80 CF 
1c354     A7 14 68 CC |  if_b	wrlong	##327690, fp
1c358     1C 4E 85 C1 |  if_b	sub	fp, #28
1c35c     30 00 90 CD |  if_b	jmp	#LR__3092
1c360     18 4E 05 F1 | 	add	fp, #24
1c364     A7 24 02 FB | 	rdlong	local04, fp
1c368     18 4E 85 F1 | 	sub	fp, #24
1c36c     D1 F0 08 FF 
1c370     01 25 16 F2 | 	cmp	local04, ##300000001 wc
1c374     1C 4E 05 C1 |  if_b	add	fp, #28
1c378     00 03 80 CF 
1c37c     A7 18 68 CC |  if_b	wrlong	##393228, fp
1c380     1C 4E 85 F3 | 	sumc	fp, #28
1c384     80 03 80 3F 
1c388     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
1c38c     1C 4E 85 31 |  if_ae	sub	fp, #28
1c390                 | LR__3092
1c390                 | LR__3093
1c390                 | LR__3094
1c390                 | LR__3095
1c390                 | LR__3096
1c390                 | LR__3097
1c390     0C 4E 05 F1 | 	add	fp, #12
1c394     A7 24 C2 FA | 	rdbyte	local04, fp
1c398     01 00 00 FF 
1c39c     21 E4 05 F1 | 	add	objptr, ##545
1c3a0     F2 24 42 FC | 	wrbyte	local04, objptr
1c3a4     A7 1E CA FA | 	rdbyte	local01, fp wz
1c3a8     00 24 06 56 |  if_ne	mov	local04, #0
1c3ac     01 24 06 A6 |  if_e	mov	local04, #1
1c3b0     20 4E 05 F1 | 	add	fp, #32
1c3b4     A7 24 42 FC | 	wrbyte	local04, fp
1c3b8     A7 24 C2 FA | 	rdbyte	local04, fp
1c3bc     2C 4E 85 F1 | 	sub	fp, #44
1c3c0     01 E4 85 F1 | 	sub	objptr, #1
1c3c4     F2 24 42 FC | 	wrbyte	local04, objptr
1c3c8     01 00 00 FF 
1c3cc     20 E4 85 F1 | 	sub	objptr, ##544
1c3d0     E8 7B B0 FD | 	call	#_fatfs_cc_deselect_0957
1c3d4     34 4E 05 F1 | 	add	fp, #52
1c3d8     A7 12 02 FB | 	rdlong	arg01, fp
1c3dc     18 4E 85 F1 | 	sub	fp, #24
1c3e0     A7 14 02 FB | 	rdlong	arg02, fp
1c3e4     09 15 12 FC | 	wxpin	arg02, arg01
1c3e8     1C 4E 05 F1 | 	add	fp, #28
1c3ec     A7 12 02 FB | 	rdlong	arg01, fp
1c3f0     14 4E 85 F1 | 	sub	fp, #20
1c3f4     A7 14 02 FB | 	rdlong	arg02, fp
1c3f8     09 15 02 FC | 	wrpin	arg02, arg01
1c3fc                 | ' 
1c3fc                 | ' 		}
1c3fc                 | ' 	}
1c3fc                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1c3fc                 | ' 	CardType = ty;
1c3fc                 | ' 	s = ty ? 0 :  0x01 ;
1c3fc                 | ' 	Stat = s;
1c3fc                 | ' 
1c3fc                 | ' 	deselect();
1c3fc                 | ' 
1c3fc                 | ' 
1c3fc                 | ' 	_wxpin( PIN_CLK, ck_div );
1c3fc                 | ' 	_wrpin( PIN_DI, spm_tx );
1c3fc                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1c3fc                 | ' 	return s;
1c3fc     08 4E 05 F1 | 	add	fp, #8
1c400     A7 FA C1 FA | 	rdbyte	result1, fp
1c404     2C 4E 85 F1 | 	sub	fp, #44
1c408                 | LR__3098
1c408     A7 F0 03 F6 | 	mov	ptra, fp
1c40c     B2 00 A0 FD | 	call	#popregs_
1c410                 | _fatfs_cc_disk_initialize_ret
1c410     2D 00 64 FD | 	ret
1c414                 | 
1c414                 | _fatfs_cc_disk_read
1c414     05 4A 05 F6 | 	mov	COUNT_, #5
1c418     A8 00 A0 FD | 	call	#pushregs_
1c41c     0A 1F 02 F6 | 	mov	local01, arg02
1c420     0B 21 02 F6 | 	mov	local02, arg03
1c424     0C 23 02 F6 | 	mov	local03, arg04
1c428     00 12 0E F2 | 	cmp	arg01, #0 wz
1c42c     01 FA 05 56 |  if_ne	mov	result1, #1
1c430                 | ' 
1c430                 | ' 	return Stat;
1c430     01 00 00 AF 
1c434     20 E4 05 A1 |  if_e	add	objptr, ##544
1c438     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1c43c     01 00 00 AF 
1c440     20 E4 85 A1 |  if_e	sub	objptr, ##544
1c444     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c448     01 FA CD F7 | 	test	result1, #1 wz
1c44c     03 FA 05 56 |  if_ne	mov	result1, #3
1c450     84 00 90 5D |  if_ne	jmp	#LR__3102
1c454     01 00 00 FF 
1c458     21 E4 05 F1 | 	add	objptr, ##545
1c45c     F2 24 C2 FA | 	rdbyte	local04, objptr
1c460     01 00 00 FF 
1c464     21 E4 85 F1 | 	sub	objptr, ##545
1c468     08 24 CE F7 | 	test	local04, #8 wz
1c46c     09 20 66 A0 |  if_e	shl	local02, #9
1c470     02 22 16 F2 | 	cmp	local03, #2 wc
1c474     12 24 06 36 |  if_ae	mov	local04, #18
1c478     11 24 06 C6 |  if_b	mov	local04, #17
1c47c     10 15 02 F6 | 	mov	arg02, local02
1c480     12 13 02 F6 | 	mov	arg01, local04
1c484     F4 7D B0 FD | 	call	#_fatfs_cc_send_cmd_0971
1c488     FD 26 02 F6 | 	mov	local05, result1
1c48c     07 26 4E F7 | 	zerox	local05, #7 wz
1c490     30 00 90 5D |  if_ne	jmp	#LR__3101
1c494                 | ' 		do {
1c494                 | LR__3100
1c494     0F 13 02 F6 | 	mov	arg01, local01
1c498     09 14 C6 F9 | 	decod	arg02, #9
1c49c     30 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_0965
1c4a0     00 FA 0D F2 | 	cmp	result1, #0 wz
1c4a4     01 00 00 5F 
1c4a8     00 1E 06 51 |  if_ne	add	local01, ##512
1c4ac     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3100
1c4b0     12 25 E2 F8 | 	getbyte	local04, local04, #0
1c4b4     12 24 0E F2 | 	cmp	local04, #18 wz
1c4b8     0C 12 06 A6 |  if_e	mov	arg01, #12
1c4bc     00 14 06 A6 |  if_e	mov	arg02, #0
1c4c0     B8 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_0971
1c4c4                 | LR__3101
1c4c4     F4 7A B0 FD | 	call	#_fatfs_cc_deselect_0957
1c4c8                 | ' 	}
1c4c8                 | ' 	deselect();
1c4c8                 | ' 
1c4c8                 | ' 	return count ? RES_ERROR : RES_OK;
1c4c8     00 22 0E F2 | 	cmp	local03, #0 wz
1c4cc     01 26 06 56 |  if_ne	mov	local05, #1
1c4d0     00 26 06 A6 |  if_e	mov	local05, #0
1c4d4     13 FB 01 F6 | 	mov	result1, local05
1c4d8                 | LR__3102
1c4d8     A7 F0 03 F6 | 	mov	ptra, fp
1c4dc     B2 00 A0 FD | 	call	#popregs_
1c4e0                 | _fatfs_cc_disk_read_ret
1c4e0     2D 00 64 FD | 	ret
1c4e4                 | 
1c4e4                 | _fatfs_cc_disk_write
1c4e4     04 4A 05 F6 | 	mov	COUNT_, #4
1c4e8     A8 00 A0 FD | 	call	#pushregs_
1c4ec     0A 1F 02 F6 | 	mov	local01, arg02
1c4f0     0C 21 02 F6 | 	mov	local02, arg04
1c4f4     0B 23 02 F6 | 	mov	local03, arg03
1c4f8     00 12 0E F2 | 	cmp	arg01, #0 wz
1c4fc     01 FA 05 56 |  if_ne	mov	result1, #1
1c500                 | ' 
1c500                 | ' 	return Stat;
1c500     01 00 00 AF 
1c504     20 E4 05 A1 |  if_e	add	objptr, ##544
1c508     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1c50c     01 00 00 AF 
1c510     20 E4 85 A1 |  if_e	sub	objptr, ##544
1c514     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c518     01 FA CD F7 | 	test	result1, #1 wz
1c51c     03 FA 05 56 |  if_ne	mov	result1, #3
1c520     D4 00 90 5D |  if_ne	jmp	#LR__3114
1c524     01 00 00 FF 
1c528     21 E4 05 F1 | 	add	objptr, ##545
1c52c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1c530     01 00 00 FF 
1c534     21 E4 85 F1 | 	sub	objptr, ##545
1c538     08 16 CE F7 | 	test	arg03, #8 wz
1c53c     09 22 66 A0 |  if_e	shl	local03, #9
1c540     01 20 0E F2 | 	cmp	local02, #1 wz
1c544     30 00 90 5D |  if_ne	jmp	#LR__3110
1c548     18 12 06 F6 | 	mov	arg01, #24
1c54c     11 15 02 F6 | 	mov	arg02, local03
1c550     28 7D B0 FD | 	call	#_fatfs_cc_send_cmd_0971
1c554     FD 24 02 F6 | 	mov	local04, result1
1c558     07 24 4E F7 | 	zerox	local04, #7 wz
1c55c     84 00 90 5D |  if_ne	jmp	#LR__3113
1c560     0F 13 02 F6 | 	mov	arg01, local01
1c564     FE 14 06 F6 | 	mov	arg02, #254
1c568     44 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_0967
1c56c     00 FA 0D F2 | 	cmp	result1, #0 wz
1c570     00 20 06 56 |  if_ne	mov	local02, #0
1c574     6C 00 90 FD | 	jmp	#LR__3113
1c578                 | LR__3110
1c578     01 00 00 FF 
1c57c     21 E4 05 F1 | 	add	objptr, ##545
1c580     F2 24 C2 FA | 	rdbyte	local04, objptr
1c584     01 00 00 FF 
1c588     21 E4 85 F1 | 	sub	objptr, ##545
1c58c     06 24 CE F7 | 	test	local04, #6 wz
1c590     97 12 06 56 |  if_ne	mov	arg01, #151
1c594     10 15 02 56 |  if_ne	mov	arg02, local02
1c598     E0 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_0971
1c59c     11 15 02 F6 | 	mov	arg02, local03
1c5a0     19 12 06 F6 | 	mov	arg01, #25
1c5a4     D4 7C B0 FD | 	call	#_fatfs_cc_send_cmd_0971
1c5a8     FD 24 02 F6 | 	mov	local04, result1
1c5ac     07 24 4E F7 | 	zerox	local04, #7 wz
1c5b0     30 00 90 5D |  if_ne	jmp	#LR__3112
1c5b4                 | ' 			do {
1c5b4                 | LR__3111
1c5b4     0F 13 02 F6 | 	mov	arg01, local01
1c5b8     FC 14 06 F6 | 	mov	arg02, #252
1c5bc     F0 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_0967
1c5c0     00 FA 0D F2 | 	cmp	result1, #0 wz
1c5c4     01 00 00 5F 
1c5c8     00 1E 06 51 |  if_ne	add	local01, ##512
1c5cc     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3111
1c5d0     00 12 06 F6 | 	mov	arg01, #0
1c5d4     FD 14 06 F6 | 	mov	arg02, #253
1c5d8     D4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_0967
1c5dc     00 FA 0D F2 | 	cmp	result1, #0 wz
1c5e0     01 20 06 A6 |  if_e	mov	local02, #1
1c5e4                 | LR__3112
1c5e4                 | LR__3113
1c5e4     D4 79 B0 FD | 	call	#_fatfs_cc_deselect_0957
1c5e8                 | ' 				count = 1;
1c5e8                 | ' 		}
1c5e8                 | ' 	}
1c5e8                 | ' 	deselect();
1c5e8                 | ' 
1c5e8                 | ' 	return count ? RES_ERROR : RES_OK;
1c5e8     00 20 0E F2 | 	cmp	local02, #0 wz
1c5ec     01 24 06 56 |  if_ne	mov	local04, #1
1c5f0     00 24 06 A6 |  if_e	mov	local04, #0
1c5f4     12 FB 01 F6 | 	mov	result1, local04
1c5f8                 | LR__3114
1c5f8     A7 F0 03 F6 | 	mov	ptra, fp
1c5fc     B2 00 A0 FD | 	call	#popregs_
1c600                 | _fatfs_cc_disk_write_ret
1c600     2D 00 64 FD | 	ret
1c604                 | 
1c604                 | _fatfs_cc_disk_ioctl
1c604     01 4A 05 F6 | 	mov	COUNT_, #1
1c608     A8 00 A0 FD | 	call	#pushregs_
1c60c     30 F0 07 F1 | 	add	ptra, #48
1c610     04 4E 05 F1 | 	add	fp, #4
1c614     A7 12 42 FC | 	wrbyte	arg01, fp
1c618     04 4E 05 F1 | 	add	fp, #4
1c61c     A7 14 42 FC | 	wrbyte	arg02, fp
1c620     04 4E 05 F1 | 	add	fp, #4
1c624     A7 16 62 FC | 	wrlong	arg03, fp
1c628     08 4E 85 F1 | 	sub	fp, #8
1c62c     A7 12 CA FA | 	rdbyte	arg01, fp wz
1c630     04 4E 85 F1 | 	sub	fp, #4
1c634     01 FA 05 56 |  if_ne	mov	result1, #1
1c638                 | ' 
1c638                 | ' 	return Stat;
1c638     01 00 00 AF 
1c63c     20 E4 05 A1 |  if_e	add	objptr, ##544
1c640     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1c644     01 00 00 AF 
1c648     20 E4 85 A1 |  if_e	sub	objptr, ##544
1c64c     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c650     01 FA CD F7 | 	test	result1, #1 wz
1c654     03 FA 05 56 |  if_ne	mov	result1, #3
1c658     E4 01 90 5D |  if_ne	jmp	#LR__3128
1c65c     10 4E 05 F1 | 	add	fp, #16
1c660     A7 02 68 FC | 	wrlong	#1, fp
1c664                 | ' 
1c664                 | ' 	res = RES_ERROR;
1c664                 | ' 	switch (ctrl) {
1c664     08 4E 85 F1 | 	sub	fp, #8
1c668     A7 1E C2 FA | 	rdbyte	local01, fp
1c66c     08 4E 85 F1 | 	sub	fp, #8
1c670     04 1E 26 F3 | 	fle	local01, #4
1c674     30 1E 62 FD | 	jmprel	local01
1c678                 | LR__3120
1c678     10 00 90 FD | 	jmp	#LR__3121
1c67c     24 00 90 FD | 	jmp	#LR__3122
1c680     A0 01 90 FD | 	jmp	#LR__3126
1c684     80 01 90 FD | 	jmp	#LR__3125
1c688     98 01 90 FD | 	jmp	#LR__3126
1c68c                 | LR__3121
1c68c     B0 79 B0 FD | 	call	#_fatfs_cc_select_0961
1c690     00 FA 0D F2 | 	cmp	result1, #0 wz
1c694     10 4E 05 51 |  if_ne	add	fp, #16
1c698     A7 00 68 5C |  if_ne	wrlong	#0, fp
1c69c     10 4E 85 51 |  if_ne	sub	fp, #16
1c6a0                 | ' 			break;
1c6a0     8C 01 90 FD | 	jmp	#LR__3127
1c6a4                 | LR__3122
1c6a4     09 12 06 F6 | 	mov	arg01, #9
1c6a8     00 14 06 F6 | 	mov	arg02, #0
1c6ac     CC 7B B0 FD | 	call	#_fatfs_cc_send_cmd_0971
1c6b0     FD 1E 02 F6 | 	mov	local01, result1
1c6b4     07 1E 4E F7 | 	zerox	local01, #7 wz
1c6b8     74 01 90 5D |  if_ne	jmp	#LR__3127
1c6bc     18 4E 05 F1 | 	add	fp, #24
1c6c0     A7 12 02 F6 | 	mov	arg01, fp
1c6c4     18 4E 85 F1 | 	sub	fp, #24
1c6c8     10 14 06 F6 | 	mov	arg02, #16
1c6cc     00 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_0965
1c6d0     00 FA 0D F2 | 	cmp	result1, #0 wz
1c6d4     58 01 90 AD |  if_e	jmp	#LR__3127
1c6d8     18 4E 05 F1 | 	add	fp, #24
1c6dc     A7 1E C2 FA | 	rdbyte	local01, fp
1c6e0     18 4E 85 F1 | 	sub	fp, #24
1c6e4     06 1E 46 F0 | 	shr	local01, #6
1c6e8     01 1E 0E F2 | 	cmp	local01, #1 wz
1c6ec     5C 00 90 5D |  if_ne	jmp	#LR__3123
1c6f0     21 4E 05 F1 | 	add	fp, #33
1c6f4     A7 1E C2 FA | 	rdbyte	local01, fp
1c6f8     01 4E 85 F1 | 	sub	fp, #1
1c6fc     A7 FA C1 FA | 	rdbyte	result1, fp
1c700     FD FA 31 F9 | 	getword	result1, result1, #0
1c704     08 FA 65 F0 | 	shl	result1, #8
1c708     FD 1E 02 F1 | 	add	local01, result1
1c70c     01 4E 85 F1 | 	sub	fp, #1
1c710     A7 FA C1 FA | 	rdbyte	result1, fp
1c714     3F FA 05 F5 | 	and	result1, #63
1c718     10 FA 65 F0 | 	shl	result1, #16
1c71c     FD 1E 02 F1 | 	add	local01, result1
1c720     01 1E 06 F1 | 	add	local01, #1
1c724     09 4E 05 F1 | 	add	fp, #9
1c728     A7 1E 62 FC | 	wrlong	local01, fp
1c72c     1C 4E 85 F1 | 	sub	fp, #28
1c730     A7 1E 02 FB | 	rdlong	local01, fp
1c734     1C 4E 05 F1 | 	add	fp, #28
1c738     A7 FA 01 FB | 	rdlong	result1, fp
1c73c     28 4E 85 F1 | 	sub	fp, #40
1c740     0A FA 65 F0 | 	shl	result1, #10
1c744     0F FB 61 FC | 	wrlong	result1, local01
1c748     AC 00 90 FD | 	jmp	#LR__3124
1c74c                 | LR__3123
1c74c     1D 4E 05 F1 | 	add	fp, #29
1c750     A7 1E C2 FA | 	rdbyte	local01, fp
1c754     0F 1F 42 F8 | 	getnib	local01, local01, #0
1c758     05 4E 05 F1 | 	add	fp, #5
1c75c     A7 FA C1 FA | 	rdbyte	result1, fp
1c760     80 FA 05 F5 | 	and	result1, #128
1c764     07 FA C5 F0 | 	sar	result1, #7
1c768     FD 1E 02 F1 | 	add	local01, result1
1c76c     01 4E 85 F1 | 	sub	fp, #1
1c770     A7 FA C1 FA | 	rdbyte	result1, fp
1c774     03 FA 05 F5 | 	and	result1, #3
1c778     01 FA 65 F0 | 	shl	result1, #1
1c77c     FD 1E 02 F1 | 	add	local01, result1
1c780     02 1E 06 F1 | 	add	local01, #2
1c784     0D 4E 85 F1 | 	sub	fp, #13
1c788     A7 1E 42 FC | 	wrbyte	local01, fp
1c78c     0C 4E 05 F1 | 	add	fp, #12
1c790     A7 1E C2 FA | 	rdbyte	local01, fp
1c794     06 1E 46 F0 | 	shr	local01, #6
1c798     01 4E 85 F1 | 	sub	fp, #1
1c79c     A7 FA C1 FA | 	rdbyte	result1, fp
1c7a0     FD FA 31 F9 | 	getword	result1, result1, #0
1c7a4     02 FA 65 F0 | 	shl	result1, #2
1c7a8     FD 1E 02 F1 | 	add	local01, result1
1c7ac     01 4E 85 F1 | 	sub	fp, #1
1c7b0     A7 FA C1 FA | 	rdbyte	result1, fp
1c7b4     03 FA 05 F5 | 	and	result1, #3
1c7b8     FD FA 31 F9 | 	getword	result1, result1, #0
1c7bc     0A FA 65 F0 | 	shl	result1, #10
1c7c0     FD 1E 02 F1 | 	add	local01, result1
1c7c4     01 1E 06 F1 | 	add	local01, #1
1c7c8     0A 4E 05 F1 | 	add	fp, #10
1c7cc     A7 1E 62 FC | 	wrlong	local01, fp
1c7d0     1C 4E 85 F1 | 	sub	fp, #28
1c7d4     A7 1E 02 FB | 	rdlong	local01, fp
1c7d8     1C 4E 05 F1 | 	add	fp, #28
1c7dc     A7 FA 01 FB | 	rdlong	result1, fp
1c7e0     14 4E 85 F1 | 	sub	fp, #20
1c7e4     A7 16 C2 FA | 	rdbyte	arg03, fp
1c7e8     14 4E 85 F1 | 	sub	fp, #20
1c7ec     09 16 86 F1 | 	sub	arg03, #9
1c7f0     0B FB 61 F0 | 	shl	result1, arg03
1c7f4     0F FB 61 FC | 	wrlong	result1, local01
1c7f8                 | LR__3124
1c7f8     10 4E 05 F1 | 	add	fp, #16
1c7fc     A7 00 68 FC | 	wrlong	#0, fp
1c800     10 4E 85 F1 | 	sub	fp, #16
1c804                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
1c804                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
1c804                 | ' 					*(LBA_t*)buff = cs << (n - 9);
1c804                 | ' 				}
1c804                 | ' 				res = RES_OK;
1c804                 | ' 			}
1c804                 | ' 			break;
1c804     28 00 90 FD | 	jmp	#LR__3127
1c808                 | LR__3125
1c808     0C 4E 05 F1 | 	add	fp, #12
1c80c     A7 1E 02 FB | 	rdlong	local01, fp
1c810     0F 01 69 FC | 	wrlong	#128, local01
1c814     04 4E 05 F1 | 	add	fp, #4
1c818     A7 00 68 FC | 	wrlong	#0, fp
1c81c     10 4E 85 F1 | 	sub	fp, #16
1c820                 | ' 			*(DWORD*)buff = 128;
1c820                 | ' 			res = RES_OK;
1c820                 | ' 			break;
1c820     0C 00 90 FD | 	jmp	#LR__3127
1c824                 | LR__3126
1c824     10 4E 05 F1 | 	add	fp, #16
1c828     A7 08 68 FC | 	wrlong	#4, fp
1c82c     10 4E 85 F1 | 	sub	fp, #16
1c830                 | LR__3127
1c830     88 77 B0 FD | 	call	#_fatfs_cc_deselect_0957
1c834                 | ' 			res = RES_PARERR;
1c834                 | ' 	}
1c834                 | ' 
1c834                 | ' 	deselect();
1c834                 | ' 
1c834                 | ' 	return res;
1c834     10 4E 05 F1 | 	add	fp, #16
1c838     A7 FA 01 FB | 	rdlong	result1, fp
1c83c     10 4E 85 F1 | 	sub	fp, #16
1c840                 | LR__3128
1c840     A7 F0 03 F6 | 	mov	ptra, fp
1c844     B2 00 A0 FD | 	call	#popregs_
1c848                 | _fatfs_cc_disk_ioctl_ret
1c848     2D 00 64 FD | 	ret
1c84c                 | 
1c84c                 | _fatfs_cc_disk_setpins
1c84c     00 12 0E F2 | 	cmp	arg01, #0 wz
1c850     01 FA 65 56 |  if_ne	neg	result1, #1
1c854     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
1c858     01 00 00 FF 
1c85c     10 E4 05 F1 | 	add	objptr, ##528
1c860     F2 14 62 FC | 	wrlong	arg02, objptr
1c864     04 E4 05 F1 | 	add	objptr, #4
1c868     F2 16 62 FC | 	wrlong	arg03, objptr
1c86c     04 E4 05 F1 | 	add	objptr, #4
1c870     F2 18 62 FC | 	wrlong	arg04, objptr
1c874     04 E4 05 F1 | 	add	objptr, #4
1c878     F2 1A 62 FC | 	wrlong	arg05, objptr
1c87c     01 00 00 FF 
1c880     1C E4 85 F1 | 	sub	objptr, ##540
1c884     00 FA 05 F6 | 	mov	result1, #0
1c888                 | _fatfs_cc_disk_setpins_ret
1c888     2D 00 64 FD | 	ret
1c88c                 | 
1c88c                 | _fatfs_cc_tchar2uni
1c88c     09 01 02 FB | 	rdlong	_var01, arg01
1c890     00 03 02 F6 | 	mov	_var02, _var01
1c894     01 00 06 F1 | 	add	_var01, #1
1c898     00 05 02 F6 | 	mov	_var03, _var01
1c89c     01 07 C2 FA | 	rdbyte	_var04, _var02
1c8a0     80 06 CE F7 | 	test	_var04, #128 wz
1c8a4     E8 00 90 AD |  if_e	jmp	#LR__3137
1c8a8     03 09 02 F6 | 	mov	_var05, _var04
1c8ac     E0 08 06 F5 | 	and	_var05, #224
1c8b0     C0 08 0E F2 | 	cmp	_var05, #192 wz
1c8b4     1F 06 06 A5 |  if_e	and	_var04, #31
1c8b8     01 0A 06 A6 |  if_e	mov	_var06, #1
1c8bc     34 00 90 AD |  if_e	jmp	#LR__3131
1c8c0     03 09 02 F6 | 	mov	_var05, _var04
1c8c4     F0 08 06 F5 | 	and	_var05, #240
1c8c8     E0 08 0E F2 | 	cmp	_var05, #224 wz
1c8cc     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
1c8d0     02 0A 06 A6 |  if_e	mov	_var06, #2
1c8d4     1C 00 90 AD |  if_e	jmp	#LR__3130
1c8d8     03 09 02 F6 | 	mov	_var05, _var04
1c8dc     F8 08 06 F5 | 	and	_var05, #248
1c8e0     F0 08 0E F2 | 	cmp	_var05, #240 wz
1c8e4     07 06 06 A5 |  if_e	and	_var04, #7
1c8e8     03 0A 06 A6 |  if_e	mov	_var06, #3
1c8ec                 | ' 			return 0xFFFFFFFF;
1c8ec     01 FA 65 56 |  if_ne	neg	result1, #1
1c8f0     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
1c8f4                 | LR__3130
1c8f4                 | LR__3131
1c8f4                 | ' 		}
1c8f4                 | ' 		do {
1c8f4                 | LR__3132
1c8f4     02 0D C2 FA | 	rdbyte	_var07, _var03
1c8f8     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
1c8fc     C0 08 06 F5 | 	and	_var05, #192
1c900     80 08 0E F2 | 	cmp	_var05, #128 wz
1c904     01 04 06 F1 | 	add	_var03, #1
1c908     01 FA 65 56 |  if_ne	neg	result1, #1
1c90c     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
1c910     06 06 66 F0 | 	shl	_var04, #6
1c914     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
1c918     3F 02 06 F5 | 	and	_var02, #63
1c91c     01 07 42 F5 | 	or	_var04, _var02
1c920     F4 0B 6E FB | 	djnz	_var06, #LR__3132
1c924     80 06 16 F2 | 	cmp	_var04, #128 wc
1c928     24 00 90 CD |  if_b	jmp	#LR__3134
1c92c     6C 00 00 FF 
1c930     00 06 16 F2 | 	cmp	_var04, ##55296 wc
1c934     0C 00 90 CD |  if_b	jmp	#LR__3133
1c938     70 00 00 FF 
1c93c     00 06 16 F2 | 	cmp	_var04, ##57344 wc
1c940     0C 00 90 CD |  if_b	jmp	#LR__3134
1c944                 | LR__3133
1c944     80 08 00 FF 
1c948     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
1c94c     08 00 90 CD |  if_b	jmp	#LR__3135
1c950                 | LR__3134
1c950     01 FA 65 F6 | 	neg	result1, #1
1c954     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
1c958                 | LR__3135
1c958     80 00 00 FF 
1c95c     00 06 16 F2 | 	cmp	_var04, ##65536 wc
1c960     2C 00 90 CD |  if_b	jmp	#LR__3136
1c964     03 03 02 F6 | 	mov	_var02, _var04
1c968     80 00 00 FF 
1c96c     00 02 86 F1 | 	sub	_var02, ##65536
1c970     06 02 66 F0 | 	shl	_var02, #6
1c974     80 FF 01 FF 
1c978     00 02 06 F5 | 	and	_var02, ##67043328
1c97c     6E 00 6C FF 
1c980     00 08 06 F6 | 	mov	_var05, ##-671032320
1c984     01 09 42 F5 | 	or	_var05, _var02
1c988     09 06 46 F7 | 	zerox	_var04, #9
1c98c     04 07 42 F5 | 	or	_var04, _var05
1c990                 | LR__3136
1c990                 | LR__3137
1c990     09 05 62 FC | 	wrlong	_var03, arg01
1c994                 | ' 	}
1c994                 | ' #line 811 "ff.c"
1c994                 | ' 	*str = p;
1c994                 | ' 	return uc;
1c994     03 FB 01 F6 | 	mov	result1, _var04
1c998                 | _fatfs_cc_tchar2uni_ret
1c998     2D 00 64 FD | 	ret
1c99c                 | 
1c99c                 | _fatfs_cc_put_utf
1c99c     80 12 16 F2 | 	cmp	arg01, #128 wc
1c9a0     18 00 90 3D |  if_ae	jmp	#LR__3140
1c9a4     01 16 16 F2 | 	cmp	arg03, #1 wc
1c9a8     00 FA 05 C6 |  if_b	mov	result1, #0
1c9ac     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1c9b0     0A 13 42 FC | 	wrbyte	arg01, arg02
1c9b4                 | ' 		*buf = (TCHAR)chr;
1c9b4                 | ' 		return 1;
1c9b4     01 FA 05 F6 | 	mov	result1, #1
1c9b8     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1c9bc                 | LR__3140
1c9bc     04 00 00 FF 
1c9c0     00 12 16 F2 | 	cmp	arg01, ##2048 wc
1c9c4     40 00 90 3D |  if_ae	jmp	#LR__3141
1c9c8     02 16 16 F2 | 	cmp	arg03, #2 wc
1c9cc     00 FA 05 C6 |  if_b	mov	result1, #0
1c9d0     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1c9d4     09 FB 01 F6 | 	mov	result1, arg01
1c9d8     06 FA 45 F0 | 	shr	result1, #6
1c9dc     1F FA 05 F5 | 	and	result1, #31
1c9e0     C0 16 06 F6 | 	mov	arg03, #192
1c9e4     FD 16 42 F5 | 	or	arg03, result1
1c9e8     0A 17 42 FC | 	wrbyte	arg03, arg02
1c9ec     01 14 06 F1 | 	add	arg02, #1
1c9f0     3F 12 06 F5 | 	and	arg01, #63
1c9f4     80 FA 05 F6 | 	mov	result1, #128
1c9f8     09 FB 41 F5 | 	or	result1, arg01
1c9fc     0A FB 41 FC | 	wrbyte	result1, arg02
1ca00                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
1ca00                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1ca00                 | ' 		return 2;
1ca00     02 FA 05 F6 | 	mov	result1, #2
1ca04     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1ca08                 | LR__3141
1ca08     80 00 00 FF 
1ca0c     00 12 16 F2 | 	cmp	arg01, ##65536 wc
1ca10     70 00 90 3D |  if_ae	jmp	#LR__3144
1ca14     03 16 16 F2 | 	cmp	arg03, #3 wc
1ca18     18 00 90 CD |  if_b	jmp	#LR__3142
1ca1c     6C 00 00 FF 
1ca20     00 12 16 F2 | 	cmp	arg01, ##55296 wc
1ca24     14 00 90 CD |  if_b	jmp	#LR__3143
1ca28     70 00 00 FF 
1ca2c     00 12 16 F2 | 	cmp	arg01, ##57344 wc
1ca30     08 00 90 3D |  if_ae	jmp	#LR__3143
1ca34                 | LR__3142
1ca34     00 FA 05 F6 | 	mov	result1, #0
1ca38     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1ca3c                 | LR__3143
1ca3c     09 FB 59 F8 | 	getnib	result1, arg01, #3
1ca40     E0 16 06 F6 | 	mov	arg03, #224
1ca44     FD 16 42 F5 | 	or	arg03, result1
1ca48     0A 17 42 FC | 	wrbyte	arg03, arg02
1ca4c     01 14 06 F1 | 	add	arg02, #1
1ca50     09 FB 01 F6 | 	mov	result1, arg01
1ca54     06 FA 45 F0 | 	shr	result1, #6
1ca58     3F FA 05 F5 | 	and	result1, #63
1ca5c     80 16 06 F6 | 	mov	arg03, #128
1ca60     FD 16 42 F5 | 	or	arg03, result1
1ca64     0A 17 42 FC | 	wrbyte	arg03, arg02
1ca68     01 14 06 F1 | 	add	arg02, #1
1ca6c     3F 12 06 F5 | 	and	arg01, #63
1ca70     80 FA 05 F6 | 	mov	result1, #128
1ca74     09 FB 41 F5 | 	or	result1, arg01
1ca78     0A FB 41 FC | 	wrbyte	result1, arg02
1ca7c                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
1ca7c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
1ca7c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1ca7c                 | ' 		return 3;
1ca7c     03 FA 05 F6 | 	mov	result1, #3
1ca80     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1ca84                 | LR__3144
1ca84     04 16 16 F2 | 	cmp	arg03, #4 wc
1ca88     00 FA 05 C6 |  if_b	mov	result1, #0
1ca8c     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1ca90     09 01 02 F6 | 	mov	_var01, arg01
1ca94     E0 01 06 F4 | 	bitl	_var01, #480
1ca98     00 00 6C FF 
1ca9c     00 00 86 F1 | 	sub	_var01, ##-671088640
1caa0     06 00 46 F0 | 	shr	_var01, #6
1caa4     09 13 32 F9 | 	getword	arg01, arg01, #0
1caa8     6E 00 00 FF 
1caac     00 12 86 F1 | 	sub	arg01, ##56320
1cab0     00 08 00 FF 
1cab4     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
1cab8     02 00 00 CF 
1cabc     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
1cac0     00 FA 05 36 |  if_ae	mov	result1, #0
1cac4     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
1cac8     09 01 42 F5 | 	or	_var01, arg01
1cacc     80 00 00 FF 
1cad0     00 00 06 F1 | 	add	_var01, ##65536
1cad4     00 FB 01 F6 | 	mov	result1, _var01
1cad8     12 FA 45 F0 | 	shr	result1, #18
1cadc     07 FA 05 F5 | 	and	result1, #7
1cae0     F0 16 06 F6 | 	mov	arg03, #240
1cae4     FD 16 42 F5 | 	or	arg03, result1
1cae8     0A 17 42 FC | 	wrbyte	arg03, arg02
1caec     01 14 06 F1 | 	add	arg02, #1
1caf0     00 FB 01 F6 | 	mov	result1, _var01
1caf4     0C FA 45 F0 | 	shr	result1, #12
1caf8     3F FA 05 F5 | 	and	result1, #63
1cafc     80 16 06 F6 | 	mov	arg03, #128
1cb00     FD 16 42 F5 | 	or	arg03, result1
1cb04     0A 17 42 FC | 	wrbyte	arg03, arg02
1cb08     01 14 06 F1 | 	add	arg02, #1
1cb0c     00 FB 01 F6 | 	mov	result1, _var01
1cb10     06 FA 45 F0 | 	shr	result1, #6
1cb14     3F FA 05 F5 | 	and	result1, #63
1cb18     80 16 06 F6 | 	mov	arg03, #128
1cb1c     FD 16 42 F5 | 	or	arg03, result1
1cb20     0A 17 42 FC | 	wrbyte	arg03, arg02
1cb24     01 14 06 F1 | 	add	arg02, #1
1cb28     3F 00 06 F5 | 	and	_var01, #63
1cb2c     80 FA 05 F6 | 	mov	result1, #128
1cb30     00 FB 41 F5 | 	or	result1, _var01
1cb34     0A FB 41 FC | 	wrbyte	result1, arg02
1cb38                 | ' 	chr = (hc | chr) + 0x10000;
1cb38                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
1cb38                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
1cb38                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
1cb38                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1cb38                 | ' 	return 4;
1cb38     04 FA 05 F6 | 	mov	result1, #4
1cb3c                 | _fatfs_cc_put_utf_ret
1cb3c     2D 00 64 FD | 	ret
1cb40                 | 
1cb40                 | _fatfs_cc_sync_window
1cb40     02 4A 05 F6 | 	mov	COUNT_, #2
1cb44     A8 00 A0 FD | 	call	#pushregs_
1cb48     09 1F 02 F6 | 	mov	local01, arg01
1cb4c     00 20 06 F6 | 	mov	local02, #0
1cb50     03 1E 06 F1 | 	add	local01, #3
1cb54     0F FB C9 FA | 	rdbyte	result1, local01 wz
1cb58     03 1E 86 F1 | 	sub	local01, #3
1cb5c     A4 00 90 AD |  if_e	jmp	#LR__3152
1cb60     01 1E 06 F1 | 	add	local01, #1
1cb64     0F 13 C2 FA | 	rdbyte	arg01, local01
1cb68     33 1E 06 F1 | 	add	local01, #51
1cb6c     0F 15 02 F6 | 	mov	arg02, local01
1cb70     04 1E 86 F1 | 	sub	local01, #4
1cb74     0F 17 02 FB | 	rdlong	arg03, local01
1cb78     30 1E 86 F1 | 	sub	local01, #48
1cb7c     01 18 06 F6 | 	mov	arg04, #1
1cb80     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
1cb84     00 FA 0D F2 | 	cmp	result1, #0 wz
1cb88     74 00 90 5D |  if_ne	jmp	#LR__3150
1cb8c     03 1E 06 F1 | 	add	local01, #3
1cb90     0F 01 48 FC | 	wrbyte	#0, local01
1cb94     2D 1E 06 F1 | 	add	local01, #45
1cb98     0F FB 01 FB | 	rdlong	result1, local01
1cb9c     0C 1E 86 F1 | 	sub	local01, #12
1cba0     0F 19 02 FB | 	rdlong	arg04, local01
1cba4     0C FB 81 F1 | 	sub	result1, arg04
1cba8     08 1E 86 F1 | 	sub	local01, #8
1cbac     0F 19 02 FB | 	rdlong	arg04, local01
1cbb0     1C 1E 86 F1 | 	sub	local01, #28
1cbb4     0C FB 11 F2 | 	cmp	result1, arg04 wc
1cbb8     48 00 90 3D |  if_ae	jmp	#LR__3151
1cbbc     02 1E 06 F1 | 	add	local01, #2
1cbc0     0F 19 C2 FA | 	rdbyte	arg04, local01
1cbc4     02 1E 86 F1 | 	sub	local01, #2
1cbc8     02 18 0E F2 | 	cmp	arg04, #2 wz
1cbcc     34 00 90 5D |  if_ne	jmp	#LR__3151
1cbd0     01 1E 06 F1 | 	add	local01, #1
1cbd4     0F 13 C2 FA | 	rdbyte	arg01, local01
1cbd8     33 1E 06 F1 | 	add	local01, #51
1cbdc     0F 15 02 F6 | 	mov	arg02, local01
1cbe0     04 1E 86 F1 | 	sub	local01, #4
1cbe4     0F 17 02 FB | 	rdlong	arg03, local01
1cbe8     14 1E 86 F1 | 	sub	local01, #20
1cbec     0F 1F 02 FB | 	rdlong	local01, local01
1cbf0     0F 17 02 F1 | 	add	arg03, local01
1cbf4     01 18 06 F6 | 	mov	arg04, #1
1cbf8     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
1cbfc     04 00 90 FD | 	jmp	#LR__3151
1cc00                 | LR__3150
1cc00     01 20 06 F6 | 	mov	local02, #1
1cc04                 | LR__3151
1cc04                 | LR__3152
1cc04                 | ' 			res = FR_DISK_ERR;
1cc04                 | ' 		}
1cc04                 | ' 	}
1cc04                 | ' 	return res;
1cc04     10 FB 01 F6 | 	mov	result1, local02
1cc08     A7 F0 03 F6 | 	mov	ptra, fp
1cc0c     B2 00 A0 FD | 	call	#popregs_
1cc10                 | _fatfs_cc_sync_window_ret
1cc10     2D 00 64 FD | 	ret
1cc14                 | 
1cc14                 | _fatfs_cc_move_window
1cc14     03 4A 05 F6 | 	mov	COUNT_, #3
1cc18     A8 00 A0 FD | 	call	#pushregs_
1cc1c     09 1F 02 F6 | 	mov	local01, arg01
1cc20     0A 21 02 F6 | 	mov	local02, arg02
1cc24     00 22 06 F6 | 	mov	local03, #0
1cc28     30 1E 06 F1 | 	add	local01, #48
1cc2c     0F 19 02 FB | 	rdlong	arg04, local01
1cc30     30 1E 86 F1 | 	sub	local01, #48
1cc34     0C 21 0A F2 | 	cmp	local02, arg04 wz
1cc38     40 00 90 AD |  if_e	jmp	#LR__3161
1cc3c     0F 13 02 F6 | 	mov	arg01, local01
1cc40     FC FE BF FD | 	call	#_fatfs_cc_sync_window
1cc44     FD 22 0A F6 | 	mov	local03, result1 wz
1cc48     30 00 90 5D |  if_ne	jmp	#LR__3160
1cc4c     01 1E 06 F1 | 	add	local01, #1
1cc50     0F 13 C2 FA | 	rdbyte	arg01, local01
1cc54     33 1E 06 F1 | 	add	local01, #51
1cc58     0F 15 02 F6 | 	mov	arg02, local01
1cc5c     10 17 02 F6 | 	mov	arg03, local02
1cc60     01 18 06 F6 | 	mov	arg04, #1
1cc64     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
1cc68     00 FA 0D F2 | 	cmp	result1, #0 wz
1cc6c     01 20 66 56 |  if_ne	neg	local02, #1
1cc70     01 22 06 56 |  if_ne	mov	local03, #1
1cc74     04 1E 86 F1 | 	sub	local01, #4
1cc78     0F 21 62 FC | 	wrlong	local02, local01
1cc7c                 | LR__3160
1cc7c                 | LR__3161
1cc7c                 | ' 				sect = (LBA_t)0 - 1;
1cc7c                 | ' 				res = FR_DISK_ERR;
1cc7c                 | ' 			}
1cc7c                 | ' 			fs->winsect = sect;
1cc7c                 | ' 		}
1cc7c                 | ' 	}
1cc7c                 | ' 	return res;
1cc7c     11 FB 01 F6 | 	mov	result1, local03
1cc80     A7 F0 03 F6 | 	mov	ptra, fp
1cc84     B2 00 A0 FD | 	call	#popregs_
1cc88                 | _fatfs_cc_move_window_ret
1cc88     2D 00 64 FD | 	ret
1cc8c                 | 
1cc8c                 | _fatfs_cc_sync_fs
1cc8c     02 4A 05 F6 | 	mov	COUNT_, #2
1cc90     A8 00 A0 FD | 	call	#pushregs_
1cc94     09 1F 02 F6 | 	mov	local01, arg01
1cc98     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
1cc9c     FD 20 0A F6 | 	mov	local02, result1 wz
1cca0     D8 00 90 5D |  if_ne	jmp	#LR__3171
1cca4     0F 19 C2 FA | 	rdbyte	arg04, local01
1cca8     03 18 0E F2 | 	cmp	arg04, #3 wz
1ccac     04 1E 06 A1 |  if_e	add	local01, #4
1ccb0     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
1ccb4     04 1E 86 A1 |  if_e	sub	local01, #4
1ccb8     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
1ccbc     A0 00 90 5D |  if_ne	jmp	#LR__3170
1ccc0     34 1E 06 F1 | 	add	local01, #52
1ccc4     0F 13 02 F6 | 	mov	arg01, local01
1ccc8     00 14 06 F6 | 	mov	arg02, #0
1cccc     09 16 C6 F9 | 	decod	arg03, #9
1ccd0     98 00 A0 FD | 	call	#\builtin_bytefill_
1ccd4     0F 13 02 F6 | 	mov	arg01, local01
1ccd8     FE 13 06 F1 | 	add	arg01, #510
1ccdc     55 00 80 FF 
1cce0     09 AB 58 FC | 	wrword	##43605, arg01
1cce4     A9 B0 A0 FF 
1cce8     0F A5 68 FC | 	wrlong	##1096897106, local01
1ccec     0F 13 02 F6 | 	mov	arg01, local01
1ccf0     E4 13 06 F1 | 	add	arg01, #484
1ccf4     B9 A0 B0 FF 
1ccf8     09 E5 68 FC | 	wrlong	##1631679090, arg01
1ccfc     0F 13 02 F6 | 	mov	arg01, local01
1cd00     E8 13 06 F1 | 	add	arg01, #488
1cd04     20 1E 86 F1 | 	sub	local01, #32
1cd08     0F 15 02 FB | 	rdlong	arg02, local01
1cd0c     09 15 62 FC | 	wrlong	arg02, arg01
1cd10     20 1E 06 F1 | 	add	local01, #32
1cd14     0F 13 02 F6 | 	mov	arg01, local01
1cd18     EC 13 06 F1 | 	add	arg01, #492
1cd1c     24 1E 86 F1 | 	sub	local01, #36
1cd20     0F 15 02 FB | 	rdlong	arg02, local01
1cd24     09 15 62 FC | 	wrlong	arg02, arg01
1cd28     10 1E 06 F1 | 	add	local01, #16
1cd2c     0F 17 02 FB | 	rdlong	arg03, local01
1cd30     01 16 06 F1 | 	add	arg03, #1
1cd34     10 1E 06 F1 | 	add	local01, #16
1cd38     0F 17 62 FC | 	wrlong	arg03, local01
1cd3c     2F 1E 86 F1 | 	sub	local01, #47
1cd40     0F 13 C2 FA | 	rdbyte	arg01, local01
1cd44     33 1E 06 F1 | 	add	local01, #51
1cd48     0F 15 02 F6 | 	mov	arg02, local01
1cd4c     01 18 06 F6 | 	mov	arg04, #1
1cd50     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
1cd54     30 1E 86 F1 | 	sub	local01, #48
1cd58     0F 01 48 FC | 	wrbyte	#0, local01
1cd5c     04 1E 86 F1 | 	sub	local01, #4
1cd60                 | LR__3170
1cd60     01 1E 06 F1 | 	add	local01, #1
1cd64     0F 13 C2 FA | 	rdbyte	arg01, local01
1cd68     00 14 06 F6 | 	mov	arg02, #0
1cd6c     00 16 06 F6 | 	mov	arg03, #0
1cd70     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
1cd74     00 FA 0D F2 | 	cmp	result1, #0 wz
1cd78     01 20 06 56 |  if_ne	mov	local02, #1
1cd7c                 | LR__3171
1cd7c                 | ' 	}
1cd7c                 | ' 
1cd7c                 | ' 	return res;
1cd7c     10 FB 01 F6 | 	mov	result1, local02
1cd80     A7 F0 03 F6 | 	mov	ptra, fp
1cd84     B2 00 A0 FD | 	call	#popregs_
1cd88                 | _fatfs_cc_sync_fs_ret
1cd88     2D 00 64 FD | 	ret
1cd8c                 | 
1cd8c                 | _fatfs_cc_clst2sect
1cd8c     02 14 86 F1 | 	sub	arg02, #2
1cd90     18 12 06 F1 | 	add	arg01, #24
1cd94     09 01 02 FB | 	rdlong	_var01, arg01
1cd98     18 12 86 F1 | 	sub	arg01, #24
1cd9c     02 00 86 F1 | 	sub	_var01, #2
1cda0     00 15 12 F2 | 	cmp	arg02, _var01 wc
1cda4     00 FA 05 36 |  if_ae	mov	result1, #0
1cda8     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
1cdac     0A 12 06 F1 | 	add	arg01, #10
1cdb0     09 01 E2 FA | 	rdword	_var01, arg01
1cdb4     0A 01 02 FD | 	qmul	_var01, arg02
1cdb8                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
1cdb8     22 12 06 F1 | 	add	arg01, #34
1cdbc     09 FB 01 FB | 	rdlong	result1, arg01
1cdc0     18 00 62 FD | 	getqx	_var01
1cdc4     00 FB 01 F1 | 	add	result1, _var01
1cdc8                 | _fatfs_cc_clst2sect_ret
1cdc8     2D 00 64 FD | 	ret
1cdcc                 | 
1cdcc                 | _fatfs_cc_get_fat
1cdcc     07 4A 05 F6 | 	mov	COUNT_, #7
1cdd0     A8 00 A0 FD | 	call	#pushregs_
1cdd4     0A 1F 02 F6 | 	mov	local01, arg02
1cdd8     09 21 02 FB | 	rdlong	local02, arg01
1cddc     02 1E 16 F2 | 	cmp	local01, #2 wc
1cde0     14 00 90 CD |  if_b	jmp	#LR__3180
1cde4     18 20 06 F1 | 	add	local02, #24
1cde8     10 23 02 FB | 	rdlong	local03, local02
1cdec     18 20 86 F1 | 	sub	local02, #24
1cdf0     11 1F 12 F2 | 	cmp	local01, local03 wc
1cdf4     08 00 90 CD |  if_b	jmp	#LR__3181
1cdf8                 | LR__3180
1cdf8     01 24 06 F6 | 	mov	local04, #1
1cdfc     60 01 90 FD | 	jmp	#LR__3188
1ce00                 | LR__3181
1ce00     01 24 66 F6 | 	neg	local04, #1
1ce04                 | ' 		val = 0xFFFFFFFF;
1ce04                 | ' 
1ce04                 | ' 		switch (fs->fs_type) {
1ce04     10 27 C2 FA | 	rdbyte	local05, local02
1ce08     01 26 86 F1 | 	sub	local05, #1
1ce0c     03 26 26 F3 | 	fle	local05, #3
1ce10     30 26 62 FD | 	jmprel	local05
1ce14                 | LR__3182
1ce14     0C 00 90 FD | 	jmp	#LR__3183
1ce18     B8 00 90 FD | 	jmp	#LR__3184
1ce1c     F8 00 90 FD | 	jmp	#LR__3185
1ce20     38 01 90 FD | 	jmp	#LR__3186
1ce24                 | LR__3183
1ce24     0F 27 02 F6 | 	mov	local05, local01
1ce28     0F 13 02 F6 | 	mov	arg01, local01
1ce2c     01 12 46 F0 | 	shr	arg01, #1
1ce30     09 27 02 F1 | 	add	local05, arg01
1ce34     10 13 02 F6 | 	mov	arg01, local02
1ce38     13 29 02 F6 | 	mov	local06, local05
1ce3c     09 28 46 F0 | 	shr	local06, #9
1ce40     24 20 06 F1 | 	add	local02, #36
1ce44     10 15 02 FB | 	rdlong	arg02, local02
1ce48     24 20 86 F1 | 	sub	local02, #36
1ce4c     14 15 02 F1 | 	add	arg02, local06
1ce50     C0 FD BF FD | 	call	#_fatfs_cc_move_window
1ce54     00 FA 0D F2 | 	cmp	result1, #0 wz
1ce58     04 01 90 5D |  if_ne	jmp	#LR__3187
1ce5c     13 29 02 F6 | 	mov	local06, local05
1ce60     FF 29 06 F5 | 	and	local06, #511
1ce64     34 20 06 F1 | 	add	local02, #52
1ce68     10 29 02 F1 | 	add	local06, local02
1ce6c     14 2B C2 FA | 	rdbyte	local07, local06
1ce70     34 20 86 F1 | 	sub	local02, #52
1ce74     10 13 02 F6 | 	mov	arg01, local02
1ce78     01 26 06 F1 | 	add	local05, #1
1ce7c     13 29 02 F6 | 	mov	local06, local05
1ce80     09 28 46 F0 | 	shr	local06, #9
1ce84     24 20 06 F1 | 	add	local02, #36
1ce88     10 15 02 FB | 	rdlong	arg02, local02
1ce8c     24 20 86 F1 | 	sub	local02, #36
1ce90     14 15 02 F1 | 	add	arg02, local06
1ce94     7C FD BF FD | 	call	#_fatfs_cc_move_window
1ce98     00 FA 0D F2 | 	cmp	result1, #0 wz
1ce9c     C0 00 90 5D |  if_ne	jmp	#LR__3187
1cea0     FF 27 06 F5 | 	and	local05, #511
1cea4     34 20 06 F1 | 	add	local02, #52
1cea8     10 27 02 F1 | 	add	local05, local02
1ceac     13 29 C2 FA | 	rdbyte	local06, local05
1ceb0     08 28 66 F0 | 	shl	local06, #8
1ceb4     14 2B 42 F5 | 	or	local07, local06
1ceb8     01 1E CE F7 | 	test	local01, #1 wz
1cebc     04 2A 46 50 |  if_ne	shr	local07, #4
1cec0     15 23 02 56 |  if_ne	mov	local03, local07
1cec4     0B 2A 46 A7 |  if_e	zerox	local07, #11
1cec8     15 23 02 A6 |  if_e	mov	local03, local07
1cecc     11 25 02 F6 | 	mov	local04, local03
1ced0                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
1ced0                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
1ced0                 | ' 			break;
1ced0     8C 00 90 FD | 	jmp	#LR__3187
1ced4                 | LR__3184
1ced4     10 13 02 F6 | 	mov	arg01, local02
1ced8     0F 29 02 F6 | 	mov	local06, local01
1cedc     08 28 46 F0 | 	shr	local06, #8
1cee0     24 20 06 F1 | 	add	local02, #36
1cee4     10 15 02 FB | 	rdlong	arg02, local02
1cee8     24 20 86 F1 | 	sub	local02, #36
1ceec     14 15 02 F1 | 	add	arg02, local06
1cef0     20 FD BF FD | 	call	#_fatfs_cc_move_window
1cef4     00 FA 0D F2 | 	cmp	result1, #0 wz
1cef8     64 00 90 5D |  if_ne	jmp	#LR__3187
1cefc     34 20 06 F1 | 	add	local02, #52
1cf00     01 1E 66 F0 | 	shl	local01, #1
1cf04     FF 1F 06 F5 | 	and	local01, #511
1cf08     0F 21 02 F1 | 	add	local02, local01
1cf0c                 | ' {
1cf0c                 | ' 
1cf0c                 | ' 	return *((WORD*)ptr);
1cf0c     10 FB E1 FA | 	rdword	result1, local02
1cf10     FD 24 32 F9 | 	getword	local04, result1, #0
1cf14                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
1cf14                 | ' 			break;
1cf14     48 00 90 FD | 	jmp	#LR__3187
1cf18                 | LR__3185
1cf18     10 13 02 F6 | 	mov	arg01, local02
1cf1c     0F 29 02 F6 | 	mov	local06, local01
1cf20     07 28 46 F0 | 	shr	local06, #7
1cf24     24 20 06 F1 | 	add	local02, #36
1cf28     10 15 02 FB | 	rdlong	arg02, local02
1cf2c     24 20 86 F1 | 	sub	local02, #36
1cf30     14 15 02 F1 | 	add	arg02, local06
1cf34     DC FC BF FD | 	call	#_fatfs_cc_move_window
1cf38     00 FA 0D F2 | 	cmp	result1, #0 wz
1cf3c     20 00 90 5D |  if_ne	jmp	#LR__3187
1cf40     34 20 06 F1 | 	add	local02, #52
1cf44     02 1E 66 F0 | 	shl	local01, #2
1cf48     FF 1F 06 F5 | 	and	local01, #511
1cf4c     0F 21 02 F1 | 	add	local02, local01
1cf50                 | ' {
1cf50                 | ' 
1cf50                 | ' 	return *((DWORD*)ptr);
1cf50     10 25 02 FB | 	rdlong	local04, local02
1cf54     7C 24 06 F4 | 	bitl	local04, #124
1cf58                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
1cf58                 | ' 			break;
1cf58     04 00 90 FD | 	jmp	#LR__3187
1cf5c                 | LR__3186
1cf5c     01 24 06 F6 | 	mov	local04, #1
1cf60                 | LR__3187
1cf60                 | LR__3188
1cf60                 | ' 			val = 1;
1cf60                 | ' 		}
1cf60                 | ' 	}
1cf60                 | ' 
1cf60                 | ' 	return val;
1cf60     12 FB 01 F6 | 	mov	result1, local04
1cf64     A7 F0 03 F6 | 	mov	ptra, fp
1cf68     B2 00 A0 FD | 	call	#popregs_
1cf6c                 | _fatfs_cc_get_fat_ret
1cf6c     2D 00 64 FD | 	ret
1cf70                 | 
1cf70                 | _fatfs_cc_put_fat
1cf70     08 4A 05 F6 | 	mov	COUNT_, #8
1cf74     A8 00 A0 FD | 	call	#pushregs_
1cf78     09 1F 02 F6 | 	mov	local01, arg01
1cf7c     0A 21 02 F6 | 	mov	local02, arg02
1cf80     0B 23 02 F6 | 	mov	local03, arg03
1cf84     02 24 06 F6 | 	mov	local04, #2
1cf88     02 20 16 F2 | 	cmp	local02, #2 wc
1cf8c     E0 01 90 CD |  if_b	jmp	#LR__3197
1cf90     18 1E 06 F1 | 	add	local01, #24
1cf94     0F 27 02 FB | 	rdlong	local05, local01
1cf98     18 1E 86 F1 | 	sub	local01, #24
1cf9c     13 21 12 F2 | 	cmp	local02, local05 wc
1cfa0     CC 01 90 3D |  if_ae	jmp	#LR__3197
1cfa4                 | ' 		switch (fs->fs_type) {
1cfa4     0F 29 C2 FA | 	rdbyte	local06, local01
1cfa8     01 28 86 F1 | 	sub	local06, #1
1cfac     03 28 26 F3 | 	fle	local06, #3
1cfb0     30 28 62 FD | 	jmprel	local06
1cfb4                 | LR__3190
1cfb4     0C 00 90 FD | 	jmp	#LR__3191
1cfb8     F8 00 90 FD | 	jmp	#LR__3194
1cfbc     40 01 90 FD | 	jmp	#LR__3195
1cfc0     AC 01 90 FD | 	jmp	#LR__3196
1cfc4                 | LR__3191
1cfc4     10 2B 02 F6 | 	mov	local07, local02
1cfc8     10 27 02 F6 | 	mov	local05, local02
1cfcc     01 26 46 F0 | 	shr	local05, #1
1cfd0     13 2B 02 F1 | 	add	local07, local05
1cfd4     0F 13 02 F6 | 	mov	arg01, local01
1cfd8     15 29 02 F6 | 	mov	local06, local07
1cfdc     09 28 46 F0 | 	shr	local06, #9
1cfe0     24 1E 06 F1 | 	add	local01, #36
1cfe4     0F 15 02 FB | 	rdlong	arg02, local01
1cfe8     24 1E 86 F1 | 	sub	local01, #36
1cfec     14 15 02 F1 | 	add	arg02, local06
1cff0     20 FC BF FD | 	call	#_fatfs_cc_move_window
1cff4     FD 24 0A F6 | 	mov	local04, result1 wz
1cff8     74 01 90 5D |  if_ne	jmp	#LR__3196
1cffc     34 1E 06 F1 | 	add	local01, #52
1d000     0F 2D 02 F6 | 	mov	local08, local01
1d004     15 27 02 F6 | 	mov	local05, local07
1d008     FF 27 06 F5 | 	and	local05, #511
1d00c     13 2D 02 F1 | 	add	local08, local05
1d010     01 20 CE F7 | 	test	local02, #1 wz
1d014     34 1E 86 F1 | 	sub	local01, #52
1d018     01 2A 06 F1 | 	add	local07, #1
1d01c     18 00 90 AD |  if_e	jmp	#LR__3192
1d020     16 27 C2 FA | 	rdbyte	local05, local08
1d024     13 27 42 F8 | 	getnib	local05, local05, #0
1d028     11 29 E2 F8 | 	getbyte	local06, local03, #0
1d02c     04 28 66 F0 | 	shl	local06, #4
1d030     14 27 42 F5 | 	or	local05, local06
1d034     04 00 90 FD | 	jmp	#LR__3193
1d038                 | LR__3192
1d038     11 27 02 F6 | 	mov	local05, local03
1d03c                 | LR__3193
1d03c     16 27 42 FC | 	wrbyte	local05, local08
1d040     03 1E 06 F1 | 	add	local01, #3
1d044     0F 03 48 FC | 	wrbyte	#1, local01
1d048     03 1E 86 F1 | 	sub	local01, #3
1d04c     0F 13 02 F6 | 	mov	arg01, local01
1d050     15 2D 02 F6 | 	mov	local08, local07
1d054     09 2C 46 F0 | 	shr	local08, #9
1d058     24 1E 06 F1 | 	add	local01, #36
1d05c     0F 15 02 FB | 	rdlong	arg02, local01
1d060     24 1E 86 F1 | 	sub	local01, #36
1d064     16 15 02 F1 | 	add	arg02, local08
1d068     A8 FB BF FD | 	call	#_fatfs_cc_move_window
1d06c     FD 24 0A F6 | 	mov	local04, result1 wz
1d070     FC 00 90 5D |  if_ne	jmp	#LR__3196
1d074     34 1E 06 F1 | 	add	local01, #52
1d078     0F 2D 02 F6 | 	mov	local08, local01
1d07c     FF 2B 06 F5 | 	and	local07, #511
1d080     15 2D 02 F1 | 	add	local08, local07
1d084     01 20 CE F7 | 	test	local02, #1 wz
1d088     04 22 46 50 |  if_ne	shr	local03, #4
1d08c     11 27 02 56 |  if_ne	mov	local05, local03
1d090     16 27 C2 AA |  if_e	rdbyte	local05, local08
1d094     F0 26 06 A5 |  if_e	and	local05, #240
1d098     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
1d09c     11 23 42 A8 |  if_e	getnib	local03, local03, #0
1d0a0     11 27 42 A5 |  if_e	or	local05, local03
1d0a4     16 27 42 FC | 	wrbyte	local05, local08
1d0a8     31 1E 86 F1 | 	sub	local01, #49
1d0ac     0F 03 48 FC | 	wrbyte	#1, local01
1d0b0                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
1d0b0                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
1d0b0                 | ' 			fs->wflag = 1;
1d0b0                 | ' 			break;
1d0b0     BC 00 90 FD | 	jmp	#LR__3196
1d0b4                 | LR__3194
1d0b4     0F 13 02 F6 | 	mov	arg01, local01
1d0b8     10 2D 02 F6 | 	mov	local08, local02
1d0bc     08 2C 46 F0 | 	shr	local08, #8
1d0c0     24 1E 06 F1 | 	add	local01, #36
1d0c4     0F 15 02 FB | 	rdlong	arg02, local01
1d0c8     24 1E 86 F1 | 	sub	local01, #36
1d0cc     16 15 02 F1 | 	add	arg02, local08
1d0d0     40 FB BF FD | 	call	#_fatfs_cc_move_window
1d0d4     FD 24 0A F6 | 	mov	local04, result1 wz
1d0d8     94 00 90 5D |  if_ne	jmp	#LR__3196
1d0dc     34 1E 06 F1 | 	add	local01, #52
1d0e0     0F 13 02 F6 | 	mov	arg01, local01
1d0e4     01 20 66 F0 | 	shl	local02, #1
1d0e8     FF 21 06 F5 | 	and	local02, #511
1d0ec     10 13 02 F1 | 	add	arg01, local02
1d0f0     09 23 52 FC | 	wrword	local03, arg01
1d0f4     31 1E 86 F1 | 	sub	local01, #49
1d0f8     0F 03 48 FC | 	wrbyte	#1, local01
1d0fc                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
1d0fc                 | ' 			fs->wflag = 1;
1d0fc                 | ' 			break;
1d0fc     70 00 90 FD | 	jmp	#LR__3196
1d100                 | LR__3195
1d100     0F 13 02 F6 | 	mov	arg01, local01
1d104     10 2D 02 F6 | 	mov	local08, local02
1d108     07 2C 46 F0 | 	shr	local08, #7
1d10c     24 1E 06 F1 | 	add	local01, #36
1d110     0F 15 02 FB | 	rdlong	arg02, local01
1d114     24 1E 86 F1 | 	sub	local01, #36
1d118     16 15 02 F1 | 	add	arg02, local08
1d11c     F4 FA BF FD | 	call	#_fatfs_cc_move_window
1d120     FD 24 0A F6 | 	mov	local04, result1 wz
1d124     48 00 90 5D |  if_ne	jmp	#LR__3196
1d128     7C 22 06 F4 | 	bitl	local03, #124
1d12c     34 1E 06 F1 | 	add	local01, #52
1d130     10 2D 02 F6 | 	mov	local08, local02
1d134     02 2C 66 F0 | 	shl	local08, #2
1d138     FF 2D 06 F5 | 	and	local08, #511
1d13c     0F 13 02 F6 | 	mov	arg01, local01
1d140     16 13 02 F1 | 	add	arg01, local08
1d144                 | ' {
1d144                 | ' 
1d144                 | ' 	return *((DWORD*)ptr);
1d144     09 2D 02 FB | 	rdlong	local08, arg01
1d148     00 00 78 FF 
1d14c     00 2C 06 F5 | 	and	local08, ##-268435456
1d150     16 23 42 F5 | 	or	local03, local08
1d154     0F 13 02 F6 | 	mov	arg01, local01
1d158     02 20 66 F0 | 	shl	local02, #2
1d15c     FF 21 06 F5 | 	and	local02, #511
1d160     10 13 02 F1 | 	add	arg01, local02
1d164     09 23 62 FC | 	wrlong	local03, arg01
1d168     31 1E 86 F1 | 	sub	local01, #49
1d16c     0F 03 48 FC | 	wrbyte	#1, local01
1d170                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
1d170                 | ' 			}
1d170                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
1d170                 | ' 			fs->wflag = 1;
1d170                 | ' 			break;
1d170                 | LR__3196
1d170                 | LR__3197
1d170                 | ' 		}
1d170                 | ' 	}
1d170                 | ' 	return res;
1d170     12 FB 01 F6 | 	mov	result1, local04
1d174     A7 F0 03 F6 | 	mov	ptra, fp
1d178     B2 00 A0 FD | 	call	#popregs_
1d17c                 | _fatfs_cc_put_fat_ret
1d17c     2D 00 64 FD | 	ret
1d180                 | 
1d180                 | _fatfs_cc_remove_chain
1d180     05 4A 05 F6 | 	mov	COUNT_, #5
1d184     A8 00 A0 FD | 	call	#pushregs_
1d188     09 1F 02 F6 | 	mov	local01, arg01
1d18c     0A 21 02 F6 | 	mov	local02, arg02
1d190     0B 23 02 F6 | 	mov	local03, arg03
1d194     0F 25 02 FB | 	rdlong	local04, local01
1d198     02 20 16 F2 | 	cmp	local02, #2 wc
1d19c     14 00 90 CD |  if_b	jmp	#LR__3200
1d1a0     18 24 06 F1 | 	add	local04, #24
1d1a4     12 FB 01 FB | 	rdlong	result1, local04
1d1a8     18 24 86 F1 | 	sub	local04, #24
1d1ac     FD 20 12 F2 | 	cmp	local02, result1 wc
1d1b0     08 00 90 CD |  if_b	jmp	#LR__3201
1d1b4                 | LR__3200
1d1b4     02 FA 05 F6 | 	mov	result1, #2
1d1b8     CC 00 90 FD | 	jmp	#LR__3206
1d1bc                 | LR__3201
1d1bc     00 22 0E F2 | 	cmp	local03, #0 wz
1d1c0     18 00 90 AD |  if_e	jmp	#LR__3202
1d1c4     11 15 02 F6 | 	mov	arg02, local03
1d1c8     12 13 02 F6 | 	mov	arg01, local04
1d1cc     01 16 66 F6 | 	neg	arg03, #1
1d1d0     9C FD BF FD | 	call	#_fatfs_cc_put_fat
1d1d4     00 FA 0D F2 | 	cmp	result1, #0 wz
1d1d8     AC 00 90 5D |  if_ne	jmp	#LR__3206
1d1dc                 | LR__3202
1d1dc                 | ' 	}
1d1dc                 | ' 
1d1dc                 | ' 
1d1dc                 | ' 	do {
1d1dc                 | LR__3203
1d1dc     10 15 02 F6 | 	mov	arg02, local02
1d1e0     0F 13 02 F6 | 	mov	arg01, local01
1d1e4     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
1d1e8     FD 26 0A F6 | 	mov	local05, result1 wz
1d1ec     94 00 90 AD |  if_e	jmp	#LR__3205
1d1f0     01 26 0E F2 | 	cmp	local05, #1 wz
1d1f4     02 FA 05 A6 |  if_e	mov	result1, #2
1d1f8     8C 00 90 AD |  if_e	jmp	#LR__3206
1d1fc     FF FF 7F FF 
1d200     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1d204     01 FA 05 A6 |  if_e	mov	result1, #1
1d208     7C 00 90 AD |  if_e	jmp	#LR__3206
1d20c     10 15 02 F6 | 	mov	arg02, local02
1d210     12 13 02 F6 | 	mov	arg01, local04
1d214     00 16 06 F6 | 	mov	arg03, #0
1d218     54 FD BF FD | 	call	#_fatfs_cc_put_fat
1d21c     FD 22 0A F6 | 	mov	local03, result1 wz
1d220     11 FB 01 56 |  if_ne	mov	result1, local03
1d224     60 00 90 5D |  if_ne	jmp	#LR__3206
1d228     18 24 06 F1 | 	add	local04, #24
1d22c     12 23 02 FB | 	rdlong	local03, local04
1d230     02 22 86 F1 | 	sub	local03, #2
1d234     04 24 86 F1 | 	sub	local04, #4
1d238     12 21 02 FB | 	rdlong	local02, local04
1d23c     14 24 86 F1 | 	sub	local04, #20
1d240     11 21 12 F2 | 	cmp	local02, local03 wc
1d244     24 00 90 3D |  if_ae	jmp	#LR__3204
1d248     14 24 06 F1 | 	add	local04, #20
1d24c     12 23 02 FB | 	rdlong	local03, local04
1d250     01 22 06 F1 | 	add	local03, #1
1d254     12 23 62 FC | 	wrlong	local03, local04
1d258     10 24 86 F1 | 	sub	local04, #16
1d25c     12 23 C2 FA | 	rdbyte	local03, local04
1d260     01 22 46 F5 | 	or	local03, #1
1d264     12 23 42 FC | 	wrbyte	local03, local04
1d268     04 24 86 F1 | 	sub	local04, #4
1d26c                 | LR__3204
1d26c     13 21 02 F6 | 	mov	local02, local05
1d270     18 24 06 F1 | 	add	local04, #24
1d274     12 27 02 FB | 	rdlong	local05, local04
1d278     18 24 86 F1 | 	sub	local04, #24
1d27c     13 21 12 F2 | 	cmp	local02, local05 wc
1d280     58 FF 9F CD |  if_b	jmp	#LR__3203
1d284                 | LR__3205
1d284                 | ' #line 1500 "ff.c"
1d284                 | ' 	return FR_OK;
1d284     00 FA 05 F6 | 	mov	result1, #0
1d288                 | LR__3206
1d288     A7 F0 03 F6 | 	mov	ptra, fp
1d28c     B2 00 A0 FD | 	call	#popregs_
1d290                 | _fatfs_cc_remove_chain_ret
1d290     2D 00 64 FD | 	ret
1d294                 | 
1d294                 | _fatfs_cc_create_chain
1d294     09 4A 05 F6 | 	mov	COUNT_, #9
1d298     A8 00 A0 FD | 	call	#pushregs_
1d29c     09 1F 02 F6 | 	mov	local01, arg01
1d2a0     0A 21 0A F6 | 	mov	local02, arg02 wz
1d2a4     0F 23 02 FB | 	rdlong	local03, local01
1d2a8     28 00 90 5D |  if_ne	jmp	#LR__3210
1d2ac     10 22 06 F1 | 	add	local03, #16
1d2b0     11 25 0A FB | 	rdlong	local04, local03 wz
1d2b4     10 22 86 F1 | 	sub	local03, #16
1d2b8     18 22 06 51 |  if_ne	add	local03, #24
1d2bc     11 27 02 5B |  if_ne	rdlong	local05, local03
1d2c0     18 22 86 51 |  if_ne	sub	local03, #24
1d2c4     13 25 12 52 |  if_ne	cmp	local04, local05 wc
1d2c8     50 00 90 4D |  if_c_and_nz	jmp	#LR__3211
1d2cc     01 24 06 F6 | 	mov	local04, #1
1d2d0     48 00 90 FD | 	jmp	#LR__3211
1d2d4                 | LR__3210
1d2d4     10 15 02 F6 | 	mov	arg02, local02
1d2d8     0F 13 02 F6 | 	mov	arg01, local01
1d2dc     EC FA BF FD | 	call	#_fatfs_cc_get_fat
1d2e0     FD 24 02 F6 | 	mov	local04, result1
1d2e4     02 24 16 F2 | 	cmp	local04, #2 wc
1d2e8     01 FA 05 C6 |  if_b	mov	result1, #1
1d2ec     BC 01 90 CD |  if_b	jmp	#LR__3221
1d2f0     FF FF 7F FF 
1d2f4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
1d2f8     12 FB 01 A6 |  if_e	mov	result1, local04
1d2fc     AC 01 90 AD |  if_e	jmp	#LR__3221
1d300     18 22 06 F1 | 	add	local03, #24
1d304     11 27 02 FB | 	rdlong	local05, local03
1d308     18 22 86 F1 | 	sub	local03, #24
1d30c     13 25 12 F2 | 	cmp	local04, local05 wc
1d310     12 FB 01 C6 |  if_b	mov	result1, local04
1d314     94 01 90 CD |  if_b	jmp	#LR__3221
1d318     10 25 02 F6 | 	mov	local04, local02
1d31c                 | LR__3211
1d31c     14 22 06 F1 | 	add	local03, #20
1d320     11 27 0A FB | 	rdlong	local05, local03 wz
1d324     14 22 86 F1 | 	sub	local03, #20
1d328     00 FA 05 A6 |  if_e	mov	result1, #0
1d32c     7C 01 90 AD |  if_e	jmp	#LR__3221
1d330     00 28 06 F6 | 	mov	local06, #0
1d334     10 25 0A F2 | 	cmp	local04, local02 wz
1d338     74 00 90 5D |  if_ne	jmp	#LR__3214
1d33c     12 29 02 F6 | 	mov	local06, local04
1d340     01 28 06 F1 | 	add	local06, #1
1d344     18 22 06 F1 | 	add	local03, #24
1d348     11 27 02 FB | 	rdlong	local05, local03
1d34c     18 22 86 F1 | 	sub	local03, #24
1d350     13 29 12 F2 | 	cmp	local06, local05 wc
1d354     02 28 06 36 |  if_ae	mov	local06, #2
1d358     14 15 02 F6 | 	mov	arg02, local06
1d35c     0F 13 02 F6 | 	mov	arg01, local01
1d360     68 FA BF FD | 	call	#_fatfs_cc_get_fat
1d364     FD 26 02 F6 | 	mov	local05, result1
1d368     01 26 0E F2 | 	cmp	local05, #1 wz
1d36c     FF FF 7F 5F 
1d370     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
1d374     13 FB 01 A6 |  if_e	mov	result1, local05
1d378     30 01 90 AD |  if_e	jmp	#LR__3221
1d37c     00 26 0E F2 | 	cmp	local05, #0 wz
1d380     2C 00 90 AD |  if_e	jmp	#LR__3213
1d384     10 22 06 F1 | 	add	local03, #16
1d388     11 2B 02 FB | 	rdlong	local07, local03
1d38c     10 22 86 F1 | 	sub	local03, #16
1d390     02 2A 16 F2 | 	cmp	local07, #2 wc
1d394     14 00 90 CD |  if_b	jmp	#LR__3212
1d398     18 22 06 F1 | 	add	local03, #24
1d39c     11 27 02 FB | 	rdlong	local05, local03
1d3a0     18 22 86 F1 | 	sub	local03, #24
1d3a4     13 2B 12 F2 | 	cmp	local07, local05 wc
1d3a8     15 25 02 C6 |  if_b	mov	local04, local07
1d3ac                 | LR__3212
1d3ac     00 28 06 F6 | 	mov	local06, #0
1d3b0                 | LR__3213
1d3b0                 | LR__3214
1d3b0     00 28 0E F2 | 	cmp	local06, #0 wz
1d3b4     60 00 90 5D |  if_ne	jmp	#LR__3217
1d3b8     12 29 02 F6 | 	mov	local06, local04
1d3bc                 | ' 			ncl = scl;
1d3bc                 | ' 			for (;;) {
1d3bc                 | LR__3215
1d3bc     01 28 06 F1 | 	add	local06, #1
1d3c0     18 22 06 F1 | 	add	local03, #24
1d3c4     11 27 02 FB | 	rdlong	local05, local03
1d3c8     18 22 86 F1 | 	sub	local03, #24
1d3cc     13 29 12 F2 | 	cmp	local06, local05 wc
1d3d0     02 28 06 36 |  if_ae	mov	local06, #2
1d3d4     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
1d3d8     00 FA 05 16 |  if_a	mov	result1, #0
1d3dc     CC 00 90 1D |  if_a	jmp	#LR__3221
1d3e0     14 15 02 F6 | 	mov	arg02, local06
1d3e4     0F 13 02 F6 | 	mov	arg01, local01
1d3e8     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
1d3ec     FD 2A 0A F6 | 	mov	local07, result1 wz
1d3f0     24 00 90 AD |  if_e	jmp	#LR__3216
1d3f4     01 2A 0E F2 | 	cmp	local07, #1 wz
1d3f8     FF FF 7F 5F 
1d3fc     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
1d400     15 FB 01 A6 |  if_e	mov	result1, local07
1d404     A4 00 90 AD |  if_e	jmp	#LR__3221
1d408     12 29 0A F2 | 	cmp	local06, local04 wz
1d40c     00 FA 05 A6 |  if_e	mov	result1, #0
1d410     98 00 90 AD |  if_e	jmp	#LR__3221
1d414     A4 FF 9F FD | 	jmp	#LR__3215
1d418                 | LR__3216
1d418                 | LR__3217
1d418     11 13 02 F6 | 	mov	arg01, local03
1d41c     14 15 02 F6 | 	mov	arg02, local06
1d420     01 16 66 F6 | 	neg	arg03, #1
1d424     48 FB BF FD | 	call	#_fatfs_cc_put_fat
1d428     FD 2C 0A F6 | 	mov	local08, result1 wz
1d42c     1C 00 90 5D |  if_ne	jmp	#LR__3218
1d430     00 20 0E F2 | 	cmp	local02, #0 wz
1d434     14 00 90 AD |  if_e	jmp	#LR__3218
1d438     11 13 02 F6 | 	mov	arg01, local03
1d43c     10 15 02 F6 | 	mov	arg02, local02
1d440     14 17 02 F6 | 	mov	arg03, local06
1d444     28 FB BF FD | 	call	#_fatfs_cc_put_fat
1d448     FD 2C 02 F6 | 	mov	local08, result1
1d44c                 | LR__3218
1d44c     00 2C 0E F2 | 	cmp	local08, #0 wz
1d450     4C 00 90 5D |  if_ne	jmp	#LR__3219
1d454     10 22 06 F1 | 	add	local03, #16
1d458     11 29 62 FC | 	wrlong	local06, local03
1d45c     08 22 06 F1 | 	add	local03, #8
1d460     11 27 02 FB | 	rdlong	local05, local03
1d464     02 26 86 F1 | 	sub	local05, #2
1d468     04 22 86 F1 | 	sub	local03, #4
1d46c     11 2F 02 FB | 	rdlong	local09, local03
1d470     14 22 86 F1 | 	sub	local03, #20
1d474     13 2F 1A F2 | 	cmp	local09, local05 wcz
1d478     14 22 06 E1 |  if_be	add	local03, #20
1d47c     11 2F 02 EB |  if_be	rdlong	local09, local03
1d480     01 2E 86 E1 |  if_be	sub	local09, #1
1d484     11 2F 62 EC |  if_be	wrlong	local09, local03
1d488     14 22 86 E1 |  if_be	sub	local03, #20
1d48c     04 22 06 F1 | 	add	local03, #4
1d490     11 27 C2 FA | 	rdbyte	local05, local03
1d494     01 26 46 F5 | 	or	local05, #1
1d498     11 27 42 FC | 	wrbyte	local05, local03
1d49c     08 00 90 FD | 	jmp	#LR__3220
1d4a0                 | LR__3219
1d4a0     01 2C 0E F2 | 	cmp	local08, #1 wz
1d4a4     01 28 C6 F6 | 	negz	local06, #1
1d4a8                 | LR__3220
1d4a8                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
1d4a8                 | ' 	}
1d4a8                 | ' 
1d4a8                 | ' 	return ncl;
1d4a8     14 FB 01 F6 | 	mov	result1, local06
1d4ac                 | LR__3221
1d4ac     A7 F0 03 F6 | 	mov	ptra, fp
1d4b0     B2 00 A0 FD | 	call	#popregs_
1d4b4                 | _fatfs_cc_create_chain_ret
1d4b4     2D 00 64 FD | 	ret
1d4b8                 | 
1d4b8                 | _fatfs_cc_dir_clear
1d4b8     06 4A 05 F6 | 	mov	COUNT_, #6
1d4bc     A8 00 A0 FD | 	call	#pushregs_
1d4c0     09 1F 02 F6 | 	mov	local01, arg01
1d4c4     0A 21 02 F6 | 	mov	local02, arg02
1d4c8     0F 13 02 F6 | 	mov	arg01, local01
1d4cc     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
1d4d0     00 FA 0D F2 | 	cmp	result1, #0 wz
1d4d4     01 FA 05 56 |  if_ne	mov	result1, #1
1d4d8     90 00 90 5D |  if_ne	jmp	#LR__3232
1d4dc     0F 13 02 F6 | 	mov	arg01, local01
1d4e0     10 15 02 F6 | 	mov	arg02, local02
1d4e4     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
1d4e8     FD 22 02 F6 | 	mov	local03, result1
1d4ec     30 1E 06 F1 | 	add	local01, #48
1d4f0     0F 23 62 FC | 	wrlong	local03, local01
1d4f4     04 1E 06 F1 | 	add	local01, #4
1d4f8     0F 13 02 F6 | 	mov	arg01, local01
1d4fc     00 14 06 F6 | 	mov	arg02, #0
1d500     09 16 C6 F9 | 	decod	arg03, #9
1d504     98 00 A0 FD | 	call	#\builtin_bytefill_
1d508     0F 25 02 F6 | 	mov	local04, local01
1d50c                 | ' #line 1667 "ff.c"
1d50c                 | ' 	{
1d50c                 | ' 		ibuf = fs->win; szb = 1;
1d50c                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
1d50c     00 26 06 F6 | 	mov	local05, #0
1d510     34 1E 86 F1 | 	sub	local01, #52
1d514                 | LR__3230
1d514     0A 1E 06 F1 | 	add	local01, #10
1d518     0F 29 E2 FA | 	rdword	local06, local01
1d51c     0A 1E 86 F1 | 	sub	local01, #10
1d520     14 27 12 F2 | 	cmp	local05, local06 wc
1d524     2C 00 90 3D |  if_ae	jmp	#LR__3231
1d528     01 1E 06 F1 | 	add	local01, #1
1d52c     0F 13 C2 FA | 	rdbyte	arg01, local01
1d530     01 1E 86 F1 | 	sub	local01, #1
1d534     12 15 02 F6 | 	mov	arg02, local04
1d538     11 17 02 F6 | 	mov	arg03, local03
1d53c     13 17 02 F1 | 	add	arg03, local05
1d540     01 18 06 F6 | 	mov	arg04, #1
1d544     9C EF BF FD | 	call	#_fatfs_cc_disk_write
1d548     00 FA 0D F2 | 	cmp	result1, #0 wz
1d54c     01 26 06 A1 |  if_e	add	local05, #1
1d550     C0 FF 9F AD |  if_e	jmp	#LR__3230
1d554                 | LR__3231
1d554                 | ' 	}
1d554                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
1d554     0A 1E 06 F1 | 	add	local01, #10
1d558     0F 25 E2 FA | 	rdword	local04, local01
1d55c     12 27 0A F2 | 	cmp	local05, local04 wz
1d560     00 28 06 A6 |  if_e	mov	local06, #0
1d564     01 28 06 56 |  if_ne	mov	local06, #1
1d568     14 FB 01 F6 | 	mov	result1, local06
1d56c                 | LR__3232
1d56c     A7 F0 03 F6 | 	mov	ptra, fp
1d570     B2 00 A0 FD | 	call	#popregs_
1d574                 | _fatfs_cc_dir_clear_ret
1d574     2D 00 64 FD | 	ret
1d578                 | 
1d578                 | _fatfs_cc_dir_sdi
1d578     06 4A 05 F6 | 	mov	COUNT_, #6
1d57c     A8 00 A0 FD | 	call	#pushregs_
1d580     09 1F 02 F6 | 	mov	local01, arg01
1d584     0A 21 02 F6 | 	mov	local02, arg02
1d588     0F 23 02 FB | 	rdlong	local03, local01
1d58c     00 10 00 FF 
1d590     00 20 16 F2 | 	cmp	local02, ##2097152 wc
1d594     1F 20 CE C7 |  if_b	test	local02, #31 wz
1d598                 | ' 		return FR_INT_ERR;
1d598     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
1d59c     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3246
1d5a0     10 1E 06 F1 | 	add	local01, #16
1d5a4     0F 21 62 FC | 	wrlong	local02, local01
1d5a8     08 1E 86 F1 | 	sub	local01, #8
1d5ac     0F 25 0A FB | 	rdlong	local04, local01 wz
1d5b0     08 1E 86 F1 | 	sub	local01, #8
1d5b4     11 27 C2 AA |  if_e	rdbyte	local05, local03
1d5b8     03 26 16 A2 |  if_e	cmp	local05, #3 wc
1d5bc     28 22 06 21 |  if_nc_and_z	add	local03, #40
1d5c0     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
1d5c4     28 22 86 21 |  if_nc_and_z	sub	local03, #40
1d5c8     00 24 0E F2 | 	cmp	local04, #0 wz
1d5cc     3C 00 90 5D |  if_ne	jmp	#LR__3240
1d5d0     10 27 02 F6 | 	mov	local05, local02
1d5d4     05 26 46 F0 | 	shr	local05, #5
1d5d8     08 22 06 F1 | 	add	local03, #8
1d5dc     11 15 E2 FA | 	rdword	arg02, local03
1d5e0     08 22 86 F1 | 	sub	local03, #8
1d5e4     0A 27 12 F2 | 	cmp	local05, arg02 wc
1d5e8     02 FA 05 36 |  if_ae	mov	result1, #2
1d5ec     E4 00 90 3D |  if_ae	jmp	#LR__3246
1d5f0     28 22 06 F1 | 	add	local03, #40
1d5f4     11 27 02 FB | 	rdlong	local05, local03
1d5f8     28 22 86 F1 | 	sub	local03, #40
1d5fc     18 1E 06 F1 | 	add	local01, #24
1d600     0F 27 62 FC | 	wrlong	local05, local01
1d604     18 1E 86 F1 | 	sub	local01, #24
1d608     7C 00 90 FD | 	jmp	#LR__3245
1d60c                 | LR__3240
1d60c     0A 22 06 F1 | 	add	local03, #10
1d610     11 29 E2 FA | 	rdword	local06, local03
1d614     0A 22 86 F1 | 	sub	local03, #10
1d618     09 28 66 F0 | 	shl	local06, #9
1d61c                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
1d61c                 | ' 		while (ofs >= csz) {
1d61c                 | LR__3241
1d61c     14 21 12 F2 | 	cmp	local02, local06 wc
1d620     4C 00 90 CD |  if_b	jmp	#LR__3244
1d624     0F 13 02 F6 | 	mov	arg01, local01
1d628     12 15 02 F6 | 	mov	arg02, local04
1d62c     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
1d630     FD 24 02 F6 | 	mov	local04, result1
1d634     FF FF 7F FF 
1d638     FF 25 0E F2 | 	cmp	local04, ##-1 wz
1d63c     01 FA 05 A6 |  if_e	mov	result1, #1
1d640     90 00 90 AD |  if_e	jmp	#LR__3246
1d644     02 24 16 F2 | 	cmp	local04, #2 wc
1d648     14 00 90 CD |  if_b	jmp	#LR__3242
1d64c     18 22 06 F1 | 	add	local03, #24
1d650     11 27 02 FB | 	rdlong	local05, local03
1d654     18 22 86 F1 | 	sub	local03, #24
1d658     13 25 12 F2 | 	cmp	local04, local05 wc
1d65c     08 00 90 CD |  if_b	jmp	#LR__3243
1d660                 | LR__3242
1d660     02 FA 05 F6 | 	mov	result1, #2
1d664     6C 00 90 FD | 	jmp	#LR__3246
1d668                 | LR__3243
1d668     14 21 82 F1 | 	sub	local02, local06
1d66c     AC FF 9F FD | 	jmp	#LR__3241
1d670                 | LR__3244
1d670     11 13 02 F6 | 	mov	arg01, local03
1d674     12 15 02 F6 | 	mov	arg02, local04
1d678     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
1d67c     18 1E 06 F1 | 	add	local01, #24
1d680     0F FB 61 FC | 	wrlong	result1, local01
1d684     18 1E 86 F1 | 	sub	local01, #24
1d688                 | LR__3245
1d688     14 1E 06 F1 | 	add	local01, #20
1d68c     0F 25 62 FC | 	wrlong	local04, local01
1d690     04 1E 06 F1 | 	add	local01, #4
1d694     0F 27 0A FB | 	rdlong	local05, local01 wz
1d698     18 1E 86 F1 | 	sub	local01, #24
1d69c     02 FA 05 A6 |  if_e	mov	result1, #2
1d6a0     30 00 90 AD |  if_e	jmp	#LR__3246
1d6a4     10 29 02 F6 | 	mov	local06, local02
1d6a8     09 28 46 F0 | 	shr	local06, #9
1d6ac     18 1E 06 F1 | 	add	local01, #24
1d6b0     0F 27 02 FB | 	rdlong	local05, local01
1d6b4     14 27 02 F1 | 	add	local05, local06
1d6b8     0F 27 62 FC | 	wrlong	local05, local01
1d6bc     34 22 06 F1 | 	add	local03, #52
1d6c0     FF 21 06 F5 | 	and	local02, #511
1d6c4     10 23 02 F1 | 	add	local03, local02
1d6c8     04 1E 06 F1 | 	add	local01, #4
1d6cc     0F 23 62 FC | 	wrlong	local03, local01
1d6d0                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
1d6d0                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
1d6d0                 | ' 
1d6d0                 | ' 	return FR_OK;
1d6d0     00 FA 05 F6 | 	mov	result1, #0
1d6d4                 | LR__3246
1d6d4     A7 F0 03 F6 | 	mov	ptra, fp
1d6d8     B2 00 A0 FD | 	call	#popregs_
1d6dc                 | _fatfs_cc_dir_sdi_ret
1d6dc     2D 00 64 FD | 	ret
1d6e0                 | 
1d6e0                 | _fatfs_cc_dir_next
1d6e0     05 4A 05 F6 | 	mov	COUNT_, #5
1d6e4     A8 00 A0 FD | 	call	#pushregs_
1d6e8     09 1F 02 F6 | 	mov	local01, arg01
1d6ec     0A 21 02 F6 | 	mov	local02, arg02
1d6f0     0F 23 02 FB | 	rdlong	local03, local01
1d6f4     10 1E 06 F1 | 	add	local01, #16
1d6f8     0F 25 02 FB | 	rdlong	local04, local01
1d6fc     10 1E 86 F1 | 	sub	local01, #16
1d700     20 24 06 F1 | 	add	local04, #32
1d704     00 10 00 FF 
1d708     00 24 16 F2 | 	cmp	local04, ##2097152 wc
1d70c     18 1E 06 31 |  if_ae	add	local01, #24
1d710     0F 01 68 3C |  if_ae	wrlong	#0, local01
1d714     18 1E 86 31 |  if_ae	sub	local01, #24
1d718     18 1E 06 F1 | 	add	local01, #24
1d71c     0F 15 0A FB | 	rdlong	arg02, local01 wz
1d720     18 1E 86 F1 | 	sub	local01, #24
1d724     04 FA 05 A6 |  if_e	mov	result1, #4
1d728     64 01 90 AD |  if_e	jmp	#LR__3255
1d72c     FF 25 CE F7 | 	test	local04, #511 wz
1d730     3C 01 90 5D |  if_ne	jmp	#LR__3254
1d734     18 1E 06 F1 | 	add	local01, #24
1d738     0F 15 02 FB | 	rdlong	arg02, local01
1d73c     01 14 06 F1 | 	add	arg02, #1
1d740     0F 15 62 FC | 	wrlong	arg02, local01
1d744     04 1E 86 F1 | 	sub	local01, #4
1d748     0F 15 0A FB | 	rdlong	arg02, local01 wz
1d74c     14 1E 86 F1 | 	sub	local01, #20
1d750     2C 00 90 5D |  if_ne	jmp	#LR__3250
1d754     12 15 02 F6 | 	mov	arg02, local04
1d758     05 14 46 F0 | 	shr	arg02, #5
1d75c     08 22 06 F1 | 	add	local03, #8
1d760     11 21 E2 FA | 	rdword	local02, local03
1d764     08 22 86 F1 | 	sub	local03, #8
1d768     10 15 12 F2 | 	cmp	arg02, local02 wc
1d76c     18 1E 06 31 |  if_ae	add	local01, #24
1d770     0F 01 68 3C |  if_ae	wrlong	#0, local01
1d774                 | ' 				dp->sect = 0; return FR_NO_FILE;
1d774     04 FA 05 36 |  if_ae	mov	result1, #4
1d778     14 01 90 3D |  if_ae	jmp	#LR__3255
1d77c     F0 00 90 FD | 	jmp	#LR__3253
1d780                 | LR__3250
1d780     12 13 02 F6 | 	mov	arg01, local04
1d784     09 12 46 F0 | 	shr	arg01, #9
1d788     0A 22 06 F1 | 	add	local03, #10
1d78c     11 15 E2 FA | 	rdword	arg02, local03
1d790     0A 22 86 F1 | 	sub	local03, #10
1d794     01 14 86 F1 | 	sub	arg02, #1
1d798     0A 13 CA F7 | 	test	arg01, arg02 wz
1d79c     D0 00 90 5D |  if_ne	jmp	#LR__3252
1d7a0     0F 13 02 F6 | 	mov	arg01, local01
1d7a4     14 1E 06 F1 | 	add	local01, #20
1d7a8     0F 15 02 FB | 	rdlong	arg02, local01
1d7ac     14 1E 86 F1 | 	sub	local01, #20
1d7b0     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
1d7b4     FD 26 02 F6 | 	mov	local05, result1
1d7b8     02 26 16 F2 | 	cmp	local05, #2 wc
1d7bc     02 FA 05 C6 |  if_b	mov	result1, #2
1d7c0     CC 00 90 CD |  if_b	jmp	#LR__3255
1d7c4     FF FF 7F FF 
1d7c8     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1d7cc     01 FA 05 A6 |  if_e	mov	result1, #1
1d7d0     BC 00 90 AD |  if_e	jmp	#LR__3255
1d7d4     18 22 06 F1 | 	add	local03, #24
1d7d8     11 15 02 FB | 	rdlong	arg02, local03
1d7dc     18 22 86 F1 | 	sub	local03, #24
1d7e0     0A 27 12 F2 | 	cmp	local05, arg02 wc
1d7e4     68 00 90 CD |  if_b	jmp	#LR__3251
1d7e8     00 20 0E F2 | 	cmp	local02, #0 wz
1d7ec     18 1E 06 A1 |  if_e	add	local01, #24
1d7f0     0F 01 68 AC |  if_e	wrlong	#0, local01
1d7f4                 | ' 						dp->sect = 0; return FR_NO_FILE;
1d7f4     04 FA 05 A6 |  if_e	mov	result1, #4
1d7f8     94 00 90 AD |  if_e	jmp	#LR__3255
1d7fc     0F 13 02 F6 | 	mov	arg01, local01
1d800     14 1E 06 F1 | 	add	local01, #20
1d804     0F 15 02 FB | 	rdlong	arg02, local01
1d808     14 1E 86 F1 | 	sub	local01, #20
1d80c     84 FA BF FD | 	call	#_fatfs_cc_create_chain
1d810     FD 26 0A F6 | 	mov	local05, result1 wz
1d814     07 FA 05 A6 |  if_e	mov	result1, #7
1d818     74 00 90 AD |  if_e	jmp	#LR__3255
1d81c     01 26 0E F2 | 	cmp	local05, #1 wz
1d820     02 FA 05 A6 |  if_e	mov	result1, #2
1d824     68 00 90 AD |  if_e	jmp	#LR__3255
1d828     FF FF 7F FF 
1d82c     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1d830     01 FA 05 A6 |  if_e	mov	result1, #1
1d834     58 00 90 AD |  if_e	jmp	#LR__3255
1d838     13 15 02 F6 | 	mov	arg02, local05
1d83c     11 13 02 F6 | 	mov	arg01, local03
1d840     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
1d844     00 FA 0D F2 | 	cmp	result1, #0 wz
1d848     01 FA 05 56 |  if_ne	mov	result1, #1
1d84c     40 00 90 5D |  if_ne	jmp	#LR__3255
1d850                 | LR__3251
1d850     14 1E 06 F1 | 	add	local01, #20
1d854     0F 27 62 FC | 	wrlong	local05, local01
1d858     11 13 02 F6 | 	mov	arg01, local03
1d85c     13 15 02 F6 | 	mov	arg02, local05
1d860     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
1d864     04 1E 06 F1 | 	add	local01, #4
1d868     0F FB 61 FC | 	wrlong	result1, local01
1d86c     18 1E 86 F1 | 	sub	local01, #24
1d870                 | LR__3252
1d870                 | LR__3253
1d870                 | LR__3254
1d870     10 1E 06 F1 | 	add	local01, #16
1d874     0F 25 62 FC | 	wrlong	local04, local01
1d878     34 22 06 F1 | 	add	local03, #52
1d87c     FF 25 06 F5 | 	and	local04, #511
1d880     12 23 02 F1 | 	add	local03, local04
1d884     0C 1E 06 F1 | 	add	local01, #12
1d888     0F 23 62 FC | 	wrlong	local03, local01
1d88c                 | ' #line 1771 "ff.c"
1d88c                 | ' 				}
1d88c                 | ' 				dp->clust = clst;
1d88c                 | ' 				dp->sect = clst2sect(fs, clst);
1d88c                 | ' 			}
1d88c                 | ' 		}
1d88c                 | ' 	}
1d88c                 | ' 	dp->dptr = ofs;
1d88c                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
1d88c                 | ' 
1d88c                 | ' 	return FR_OK;
1d88c     00 FA 05 F6 | 	mov	result1, #0
1d890                 | LR__3255
1d890     A7 F0 03 F6 | 	mov	ptra, fp
1d894     B2 00 A0 FD | 	call	#popregs_
1d898                 | _fatfs_cc_dir_next_ret
1d898     2D 00 64 FD | 	ret
1d89c                 | 
1d89c                 | _fatfs_cc_dir_alloc
1d89c     08 4A 05 F6 | 	mov	COUNT_, #8
1d8a0     A8 00 A0 FD | 	call	#pushregs_
1d8a4     09 1F 02 F6 | 	mov	local01, arg01
1d8a8     0A 21 02 F6 | 	mov	local02, arg02
1d8ac     0F 23 02 FB | 	rdlong	local03, local01
1d8b0     0F 13 02 F6 | 	mov	arg01, local01
1d8b4     00 14 06 F6 | 	mov	arg02, #0
1d8b8     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
1d8bc     FD 24 0A F6 | 	mov	local04, result1 wz
1d8c0     70 00 90 5D |  if_ne	jmp	#LR__3264
1d8c4     00 26 06 F6 | 	mov	local05, #0
1d8c8                 | ' 		n = 0;
1d8c8                 | ' 		do {
1d8c8                 | LR__3260
1d8c8     18 1E 06 F1 | 	add	local01, #24
1d8cc     0F 15 02 FB | 	rdlong	arg02, local01
1d8d0     18 1E 86 F1 | 	sub	local01, #24
1d8d4     11 13 02 F6 | 	mov	arg01, local03
1d8d8     38 F3 BF FD | 	call	#_fatfs_cc_move_window
1d8dc     FD 24 0A F6 | 	mov	local04, result1 wz
1d8e0     50 00 90 5D |  if_ne	jmp	#LR__3263
1d8e4     1C 1E 06 F1 | 	add	local01, #28
1d8e8     0F 29 02 FB | 	rdlong	local06, local01
1d8ec     1C 1E 86 F1 | 	sub	local01, #28
1d8f0     14 29 C2 FA | 	rdbyte	local06, local06
1d8f4     E5 28 0E F2 | 	cmp	local06, #229 wz
1d8f8     1C 1E 06 51 |  if_ne	add	local01, #28
1d8fc     0F 2B 02 5B |  if_ne	rdlong	local07, local01
1d900     1C 1E 86 51 |  if_ne	sub	local01, #28
1d904     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
1d908     10 00 90 5D |  if_ne	jmp	#LR__3261
1d90c     01 26 06 F1 | 	add	local05, #1
1d910     10 27 0A F2 | 	cmp	local05, local02 wz
1d914     1C 00 90 AD |  if_e	jmp	#LR__3263
1d918     04 00 90 FD | 	jmp	#LR__3262
1d91c                 | LR__3261
1d91c     00 26 06 F6 | 	mov	local05, #0
1d920                 | LR__3262
1d920     0F 13 02 F6 | 	mov	arg01, local01
1d924     01 14 06 F6 | 	mov	arg02, #1
1d928     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
1d92c     FD 24 0A F6 | 	mov	local04, result1 wz
1d930     94 FF 9F AD |  if_e	jmp	#LR__3260
1d934                 | LR__3263
1d934                 | LR__3264
1d934     04 24 0E F2 | 	cmp	local04, #4 wz
1d938     07 24 06 A6 |  if_e	mov	local04, #7
1d93c                 | ' 	return res;
1d93c     12 FB 01 F6 | 	mov	result1, local04
1d940     A7 F0 03 F6 | 	mov	ptra, fp
1d944     B2 00 A0 FD | 	call	#popregs_
1d948                 | _fatfs_cc_dir_alloc_ret
1d948     2D 00 64 FD | 	ret
1d94c                 | 
1d94c                 | _fatfs_cc_ld_clust
1d94c     09 01 02 F6 | 	mov	_var01, arg01
1d950     0A 13 02 F6 | 	mov	arg01, arg02
1d954     1A 12 06 F1 | 	add	arg01, #26
1d958                 | ' {
1d958                 | ' 
1d958                 | ' 	return *((WORD*)ptr);
1d958     09 FB E1 FA | 	rdword	result1, arg01
1d95c     FD 12 32 F9 | 	getword	arg01, result1, #0
1d960     00 01 C2 FA | 	rdbyte	_var01, _var01
1d964     03 00 0E F2 | 	cmp	_var01, #3 wz
1d968     14 14 06 A1 |  if_e	add	arg02, #20
1d96c                 | ' {
1d96c                 | ' 
1d96c                 | ' 	return *((WORD*)ptr);
1d96c     0A FB E1 AA |  if_e	rdword	result1, arg02
1d970     10 FA 65 A0 |  if_e	shl	result1, #16
1d974     FD 12 42 A5 |  if_e	or	arg01, result1
1d978                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
1d978                 | ' 	}
1d978                 | ' 
1d978                 | ' 	return cl;
1d978     09 FB 01 F6 | 	mov	result1, arg01
1d97c                 | _fatfs_cc_ld_clust_ret
1d97c     2D 00 64 FD | 	ret
1d980                 | 
1d980                 | _fatfs_cc_st_clust
1d980     09 01 02 F6 | 	mov	_var01, arg01
1d984     0A 13 02 F6 | 	mov	arg01, arg02
1d988     1A 12 06 F1 | 	add	arg01, #26
1d98c     09 17 52 FC | 	wrword	arg03, arg01
1d990     00 01 C2 FA | 	rdbyte	_var01, _var01
1d994     03 00 0E F2 | 	cmp	_var01, #3 wz
1d998     14 14 06 A1 |  if_e	add	arg02, #20
1d99c     10 16 46 A0 |  if_e	shr	arg03, #16
1d9a0     0A 17 52 AC |  if_e	wrword	arg03, arg02
1d9a4                 | _fatfs_cc_st_clust_ret
1d9a4     2D 00 64 FD | 	ret
1d9a8                 | 
1d9a8                 | _fatfs_cc_cmp_lfn
1d9a8     07 4A 05 F6 | 	mov	COUNT_, #7
1d9ac     A8 00 A0 FD | 	call	#pushregs_
1d9b0     09 1F 02 F6 | 	mov	local01, arg01
1d9b4     0A 13 02 F6 | 	mov	arg01, arg02
1d9b8     1A 12 06 F1 | 	add	arg01, #26
1d9bc                 | ' {
1d9bc                 | ' 
1d9bc                 | ' 	return *((WORD*)ptr);
1d9bc     09 FB E9 FA | 	rdword	result1, arg01 wz
1d9c0     00 FA 05 56 |  if_ne	mov	result1, #0
1d9c4     E0 00 90 5D |  if_ne	jmp	#LR__3276
1d9c8     0A 21 C2 FA | 	rdbyte	local02, arg02
1d9cc     3F 20 06 F5 | 	and	local02, #63
1d9d0     01 20 86 F1 | 	sub	local02, #1
1d9d4     0D 20 06 FD | 	qmul	local02, #13
1d9d8                 | ' 
1d9d8                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
1d9d8                 | ' 
1d9d8                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
1d9d8     01 22 06 F6 | 	mov	local03, #1
1d9dc     00 24 06 F6 | 	mov	local04, #0
1d9e0     18 26 62 FD | 	getqx	local05
1d9e4                 | LR__3270
1d9e4     0D 24 16 F2 | 	cmp	local04, #13 wc
1d9e8     9C 00 90 3D |  if_ae	jmp	#LR__3275
1d9ec     0A 13 02 F6 | 	mov	arg01, arg02
1d9f0     12 21 02 F6 | 	mov	local02, local04
1d9f4     01 00 00 FF 
1d9f8     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
1d9fc     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
1da00     10 21 C2 FA | 	rdbyte	local02, local02
1da04     01 20 06 FA | 	mul	local02, #1
1da08     10 13 02 F1 | 	add	arg01, local02
1da0c     01 00 00 FF 
1da10     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
1da14                 | ' {
1da14                 | ' 
1da14                 | ' 	return *((WORD*)ptr);
1da14     09 FB E1 FA | 	rdword	result1, arg01
1da18     FD 28 02 F6 | 	mov	local06, result1
1da1c     11 21 02 F6 | 	mov	local02, local03
1da20     0F 20 4E F7 | 	zerox	local02, #15 wz
1da24     44 00 90 AD |  if_e	jmp	#LR__3273
1da28     00 27 16 F2 | 	cmp	local05, #256 wc
1da2c     2C 00 90 3D |  if_ae	jmp	#LR__3271
1da30     14 13 32 F9 | 	getword	arg01, local06, #0
1da34     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
1da38     FD 20 02 F6 | 	mov	local02, result1
1da3c     13 23 02 F6 | 	mov	local03, local05
1da40     01 22 66 F0 | 	shl	local03, #1
1da44     0F 23 02 F1 | 	add	local03, local01
1da48     11 13 E2 FA | 	rdword	arg01, local03
1da4c     01 26 06 F1 | 	add	local05, #1
1da50     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
1da54     FD 20 0A F2 | 	cmp	local02, result1 wz
1da58     08 00 90 AD |  if_e	jmp	#LR__3272
1da5c                 | LR__3271
1da5c                 | ' 				return 0;
1da5c     00 FA 05 F6 | 	mov	result1, #0
1da60     44 00 90 FD | 	jmp	#LR__3276
1da64                 | LR__3272
1da64     14 23 02 F6 | 	mov	local03, local06
1da68     14 00 90 FD | 	jmp	#LR__3274
1da6c                 | LR__3273
1da6c     14 29 32 F9 | 	getword	local06, local06, #0
1da70     7F 00 00 FF 
1da74     FF 29 0E F2 | 	cmp	local06, ##65535 wz
1da78     00 FA 05 56 |  if_ne	mov	result1, #0
1da7c     28 00 90 5D |  if_ne	jmp	#LR__3276
1da80                 | LR__3274
1da80     01 24 06 F1 | 	add	local04, #1
1da84     5C FF 9F FD | 	jmp	#LR__3270
1da88                 | LR__3275
1da88     0A 21 C2 FA | 	rdbyte	local02, arg02
1da8c     40 20 CE F7 | 	test	local02, #64 wz
1da90     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
1da94     01 26 66 50 |  if_ne	shl	local05, #1
1da98     0F 27 02 51 |  if_ne	add	local05, local01
1da9c     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
1daa0     00 FA 05 56 |  if_ne	mov	result1, #0
1daa4                 | ' 
1daa4                 | ' 	return 1;
1daa4     01 FA 05 A6 |  if_e	mov	result1, #1
1daa8                 | LR__3276
1daa8     A7 F0 03 F6 | 	mov	ptra, fp
1daac     B2 00 A0 FD | 	call	#popregs_
1dab0                 | _fatfs_cc_cmp_lfn_ret
1dab0     2D 00 64 FD | 	ret
1dab4                 | 
1dab4                 | _fatfs_cc_pick_lfn
1dab4     09 01 02 F6 | 	mov	_var01, arg01
1dab8     0A 13 02 F6 | 	mov	arg01, arg02
1dabc     1A 12 06 F1 | 	add	arg01, #26
1dac0                 | ' {
1dac0                 | ' 
1dac0                 | ' 	return *((WORD*)ptr);
1dac0     09 FB E9 FA | 	rdword	result1, arg01 wz
1dac4     00 FA 05 56 |  if_ne	mov	result1, #0
1dac8     D4 00 90 5D |  if_ne	jmp	#LR__3285
1dacc     0A 03 C2 FA | 	rdbyte	_var02, arg02
1dad0     40 02 26 F5 | 	andn	_var02, #64
1dad4     01 02 86 F1 | 	sub	_var02, #1
1dad8     0D 02 06 FD | 	qmul	_var02, #13
1dadc                 | ' 
1dadc                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
1dadc                 | ' 
1dadc                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
1dadc     01 04 06 F6 | 	mov	_var03, #1
1dae0     00 06 06 F6 | 	mov	_var04, #0
1dae4     18 08 62 FD | 	getqx	_var05
1dae8                 | LR__3280
1dae8     0D 06 16 F2 | 	cmp	_var04, #13 wc
1daec     80 00 90 3D |  if_ae	jmp	#LR__3283
1daf0     0A 13 02 F6 | 	mov	arg01, arg02
1daf4     03 03 02 F6 | 	mov	_var02, _var04
1daf8     01 00 00 FF 
1dafc     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
1db00     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
1db04     01 03 C2 FA | 	rdbyte	_var02, _var02
1db08     01 02 06 FA | 	mul	_var02, #1
1db0c     01 13 02 F1 | 	add	arg01, _var02
1db10     01 00 00 FF 
1db14     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
1db18                 | ' {
1db18                 | ' 
1db18                 | ' 	return *((WORD*)ptr);
1db18     09 FB E1 FA | 	rdword	result1, arg01
1db1c     FD 0A 02 F6 | 	mov	_var06, result1
1db20     02 03 02 F6 | 	mov	_var02, _var03
1db24     0F 02 4E F7 | 	zerox	_var02, #15 wz
1db28     28 00 90 AD |  if_e	jmp	#LR__3281
1db2c     00 09 16 F2 | 	cmp	_var05, #256 wc
1db30     00 FA 05 36 |  if_ae	mov	result1, #0
1db34     68 00 90 3D |  if_ae	jmp	#LR__3285
1db38     04 03 02 F6 | 	mov	_var02, _var05
1db3c     01 02 66 F0 | 	shl	_var02, #1
1db40     00 03 02 F1 | 	add	_var02, _var01
1db44     05 05 02 F6 | 	mov	_var03, _var06
1db48     01 05 52 FC | 	wrword	_var03, _var02
1db4c     01 08 06 F1 | 	add	_var05, #1
1db50     14 00 90 FD | 	jmp	#LR__3282
1db54                 | LR__3281
1db54     05 0B 32 F9 | 	getword	_var06, _var06, #0
1db58     7F 00 00 FF 
1db5c     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
1db60     00 FA 05 56 |  if_ne	mov	result1, #0
1db64     38 00 90 5D |  if_ne	jmp	#LR__3285
1db68                 | LR__3282
1db68     01 06 06 F1 | 	add	_var04, #1
1db6c     78 FF 9F FD | 	jmp	#LR__3280
1db70                 | LR__3283
1db70     0A 03 C2 FA | 	rdbyte	_var02, arg02
1db74     40 02 CE F7 | 	test	_var02, #64 wz
1db78     02 0D 02 56 |  if_ne	mov	_var07, _var03
1db7c     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
1db80     18 00 90 AD |  if_e	jmp	#LR__3284
1db84     00 09 16 F2 | 	cmp	_var05, #256 wc
1db88     00 FA 05 36 |  if_ae	mov	result1, #0
1db8c     10 00 90 3D |  if_ae	jmp	#LR__3285
1db90     01 08 66 F0 | 	shl	_var05, #1
1db94     00 09 02 F1 | 	add	_var05, _var01
1db98     04 01 58 FC | 	wrword	#0, _var05
1db9c                 | LR__3284
1db9c                 | ' 		lfnbuf[i] = 0;
1db9c                 | ' 	}
1db9c                 | ' 
1db9c                 | ' 	return 1;
1db9c     01 FA 05 F6 | 	mov	result1, #1
1dba0                 | LR__3285
1dba0                 | _fatfs_cc_pick_lfn_ret
1dba0     2D 00 64 FD | 	ret
1dba4                 | 
1dba4                 | _fatfs_cc_put_lfn
1dba4     0D 14 06 F1 | 	add	arg02, #13
1dba8     0A 19 42 FC | 	wrbyte	arg04, arg02
1dbac     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
1dbb0     01 18 86 F1 | 	sub	arg04, #1
1dbb4     0D 18 06 FD | 	qmul	arg04, #13
1dbb8     09 01 02 F6 | 	mov	_var01, arg01
1dbbc     02 14 86 F1 | 	sub	arg02, #2
1dbc0     0A 1F 48 FC | 	wrbyte	#15, arg02
1dbc4     01 14 06 F1 | 	add	arg02, #1
1dbc8     0A 01 48 FC | 	wrbyte	#0, arg02
1dbcc     0C 14 86 F1 | 	sub	arg02, #12
1dbd0     0A 13 02 F6 | 	mov	arg01, arg02
1dbd4     1A 12 06 F1 | 	add	arg01, #26
1dbd8     09 01 58 FC | 	wrword	#0, arg01
1dbdc     00 02 06 F6 | 	mov	_var02, #0
1dbe0     00 04 06 F6 | 	mov	_var03, #0
1dbe4                 | ' 	BYTE* dir,
1dbe4                 | ' 	BYTE ord,
1dbe4                 | ' 	BYTE sum
1dbe4                 | ' )
1dbe4                 | ' {
1dbe4                 | ' 	UINT i, s;
1dbe4                 | ' 	WCHAR wc;
1dbe4                 | ' 
1dbe4                 | ' 
1dbe4                 | ' 	dir[ 13 ] = sum;
1dbe4                 | ' 	dir[ 11 ] =  0x0F ;
1dbe4                 | ' 	dir[ 12 ] = 0;
1dbe4                 | ' 	st_word(dir +  26 , 0);
1dbe4                 | ' 
1dbe4                 | ' 	i = (ord - 1) * 13;
1dbe4                 | ' 	s = wc = 0;
1dbe4                 | ' 	do {
1dbe4     01 00 00 FF 
1dbe8     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
1dbec     18 06 62 FD | 	getqx	_var04
1dbf0     97 2A 48 FB | 	callpa	#(@LR__3291-@LR__3290)>>2,fcache_load_ptr_
1dbf4                 | LR__3290
1dbf4     01 19 32 F9 | 	getword	arg04, _var02, #0
1dbf8     7F 00 00 FF 
1dbfc     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
1dc00     03 13 02 56 |  if_ne	mov	arg01, _var04
1dc04     01 06 06 51 |  if_ne	add	_var04, #1
1dc08     01 12 66 50 |  if_ne	shl	arg01, #1
1dc0c     00 13 02 51 |  if_ne	add	arg01, _var01
1dc10     09 03 E2 5A |  if_ne	rdword	_var02, arg01
1dc14     0A 13 02 F6 | 	mov	arg01, arg02
1dc18     02 19 02 F6 | 	mov	arg04, _var03
1dc1c     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
1dc20     0C 19 C2 FA | 	rdbyte	arg04, arg04
1dc24     01 18 06 FA | 	mul	arg04, #1
1dc28     0C 13 02 F1 | 	add	arg01, arg04
1dc2c     09 03 52 FC | 	wrword	_var02, arg01
1dc30     01 19 02 F6 | 	mov	arg04, _var02
1dc34     0F 18 4E F7 | 	zerox	arg04, #15 wz
1dc38     0F 02 CE A9 |  if_e	bmask	_var02, #15
1dc3c     01 04 06 F1 | 	add	_var03, #1
1dc40     0D 04 16 F2 | 	cmp	_var03, #13 wc
1dc44     AC FF 9F CD |  if_b	jmp	#LR__3290
1dc48                 | LR__3291
1dc48     01 00 00 FF 
1dc4c     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
1dc50     01 03 32 F9 | 	getword	_var02, _var02, #0
1dc54     7F 00 00 FF 
1dc58     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
1dc5c     01 06 66 50 |  if_ne	shl	_var04, #1
1dc60     00 07 02 51 |  if_ne	add	_var04, _var01
1dc64     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
1dc68     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
1dc6c     40 16 46 A5 |  if_e	or	arg03, #64
1dc70     0A 17 42 FC | 	wrbyte	arg03, arg02
1dc74                 | _fatfs_cc_put_lfn_ret
1dc74     2D 00 64 FD | 	ret
1dc78                 | 
1dc78                 | _fatfs_cc_gen_numname
1dc78     08 4A 05 F6 | 	mov	COUNT_, #8
1dc7c     A8 00 A0 FD | 	call	#pushregs_
1dc80     2C F0 07 F1 | 	add	ptra, #44
1dc84     09 1F 02 F6 | 	mov	local01, arg01
1dc88     0A 21 02 F6 | 	mov	local02, arg02
1dc8c     0B 23 02 F6 | 	mov	local03, arg03
1dc90     0C 25 02 F6 | 	mov	local04, arg04
1dc94     0F 13 02 F6 | 	mov	arg01, local01
1dc98     10 15 02 F6 | 	mov	arg02, local02
1dc9c     0B 16 06 F6 | 	mov	arg03, #11
1dca0     C4 7D BF FD | 	call	#__system____builtin_memmove
1dca4     06 24 16 F2 | 	cmp	local04, #6 wc
1dca8     48 00 90 CD |  if_b	jmp	#LR__3305
1dcac     12 27 02 F6 | 	mov	local05, local04
1dcb0     97 1E 48 FB | 	callpa	#(@LR__3303-@LR__3300)>>2,fcache_load_ptr_
1dcb4                 | ' 		sreg = seq;
1dcb4                 | ' 		while (*lfn) {
1dcb4                 | LR__3300
1dcb4     11 29 EA FA | 	rdword	local06, local03 wz
1dcb8     34 00 90 AD |  if_e	jmp	#LR__3304
1dcbc     11 2B E2 FA | 	rdword	local07, local03
1dcc0                 | ' 			wc = *lfn++;
1dcc0                 | ' 			for (i = 0; i < 16; i++) {
1dcc0     02 22 06 F1 | 	add	local03, #2
1dcc4     10 12 DC FC | 	rep	@LR__3302, #16
1dcc8                 | LR__3301
1dcc8     01 26 66 F0 | 	shl	local05, #1
1dccc     15 29 32 F9 | 	getword	local06, local07, #0
1dcd0     01 28 06 F5 | 	and	local06, #1
1dcd4     14 27 02 F1 | 	add	local05, local06
1dcd8     15 2B 32 F9 | 	getword	local07, local07, #0
1dcdc     01 2A 46 F0 | 	shr	local07, #1
1dce0     10 26 2E F4 | 	testbn	local05, #16 wz
1dce4     88 00 00 5F 
1dce8     21 26 66 55 |  if_ne	xor	local05, ##69665
1dcec                 | LR__3302
1dcec     C4 FF 9F FD | 	jmp	#LR__3300
1dcf0                 | LR__3303
1dcf0                 | LR__3304
1dcf0     13 25 02 F6 | 	mov	local04, local05
1dcf4                 | LR__3305
1dcf4     07 2A 06 F6 | 	mov	local07, #7
1dcf8                 | ' 			}
1dcf8                 | ' 		}
1dcf8                 | ' 		seq = (UINT)sreg;
1dcf8                 | ' 	}
1dcf8                 | ' 
1dcf8                 | ' 
1dcf8                 | ' 	i = 7;
1dcf8                 | ' 	do {
1dcf8     10 4E 05 F1 | 	add	fp, #16
1dcfc     97 1A 48 FB | 	callpa	#(@LR__3307-@LR__3306)>>2,fcache_load_ptr_
1dd00                 | LR__3306
1dd00     12 27 42 F8 | 	getnib	local05, local04, #0
1dd04     30 26 06 F1 | 	add	local05, #48
1dd08     04 24 46 F0 | 	shr	local04, #4
1dd0c     13 29 E2 F8 | 	getbyte	local06, local05, #0
1dd10     3A 28 16 F2 | 	cmp	local06, #58 wc
1dd14     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
1dd18     07 26 06 31 |  if_ae	add	local05, #7
1dd1c     15 29 02 F6 | 	mov	local06, local07
1dd20     01 2A 8E F1 | 	sub	local07, #1 wz
1dd24     A7 28 02 F1 | 	add	local06, fp
1dd28     14 27 42 FC | 	wrbyte	local05, local06
1dd2c     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
1dd30     CC FF 9F 5D |  if_ne	jmp	#LR__3306
1dd34                 | LR__3307
1dd34     15 29 02 F6 | 	mov	local06, local07
1dd38     A7 28 02 F1 | 	add	local06, fp
1dd3c     14 FD 48 FC | 	wrbyte	#126, local06
1dd40                 | ' 	ns[i] = '~';
1dd40                 | ' 
1dd40                 | ' 
1dd40                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
1dd40     00 26 06 F6 | 	mov	local05, #0
1dd44     10 4E 85 F1 | 	sub	fp, #16
1dd48     97 2A 48 FB | 	callpa	#(@LR__3310-@LR__3308)>>2,fcache_load_ptr_
1dd4c                 | LR__3308
1dd4c     15 27 12 F2 | 	cmp	local05, local07 wc
1dd50     4C 00 90 3D |  if_ae	jmp	#LR__3311
1dd54     13 29 02 F6 | 	mov	local06, local05
1dd58     0F 29 02 F1 | 	add	local06, local01
1dd5c     14 29 C2 FA | 	rdbyte	local06, local06
1dd60     20 28 0E F2 | 	cmp	local06, #32 wz
1dd64     38 00 90 AD |  if_e	jmp	#LR__3311
1dd68     13 13 02 F6 | 	mov	arg01, local05
1dd6c     0F 13 02 F1 | 	add	arg01, local01
1dd70     09 13 CA FA | 	rdbyte	arg01, arg01 wz
1dd74     00 FA 05 56 |  if_ne	mov	result1, #0
1dd78                 | ' 
1dd78                 | ' 	return 0;
1dd78     00 FA 05 A6 |  if_e	mov	result1, #0
1dd7c     00 FA 0D F2 | 	cmp	result1, #0 wz
1dd80     14 00 90 AD |  if_e	jmp	#LR__3309
1dd84     15 29 02 F6 | 	mov	local06, local07
1dd88     01 28 86 F1 | 	sub	local06, #1
1dd8c     14 27 0A F2 | 	cmp	local05, local06 wz
1dd90     0C 00 90 AD |  if_e	jmp	#LR__3311
1dd94     01 26 06 F1 | 	add	local05, #1
1dd98                 | LR__3309
1dd98     01 26 06 F1 | 	add	local05, #1
1dd9c     AC FF 9F FD | 	jmp	#LR__3308
1dda0                 | LR__3310
1dda0                 | LR__3311
1dda0     97 20 48 FB | 	callpa	#(@LR__3315-@LR__3312)>>2,fcache_load_ptr_
1dda4                 | ' 			j++;
1dda4                 | ' 		}
1dda4                 | ' 	}
1dda4                 | ' 	do {
1dda4                 | LR__3312
1dda4     13 29 02 F6 | 	mov	local06, local05
1dda8     0F 29 02 F1 | 	add	local06, local01
1ddac     08 2A 16 F2 | 	cmp	local07, #8 wc
1ddb0     01 26 06 F1 | 	add	local05, #1
1ddb4     1C 00 90 3D |  if_ae	jmp	#LR__3313
1ddb8     15 25 02 F6 | 	mov	local04, local07
1ddbc     10 4E 05 F1 | 	add	fp, #16
1ddc0     A7 24 02 F1 | 	add	local04, fp
1ddc4     12 2D C2 FA | 	rdbyte	local08, local04
1ddc8     01 2A 06 F1 | 	add	local07, #1
1ddcc     10 4E 85 F1 | 	sub	fp, #16
1ddd0     04 00 90 FD | 	jmp	#LR__3314
1ddd4                 | LR__3313
1ddd4     20 2C 06 F6 | 	mov	local08, #32
1ddd8                 | LR__3314
1ddd8     14 2D 42 FC | 	wrbyte	local08, local06
1dddc     08 26 16 F2 | 	cmp	local05, #8 wc
1dde0     C0 FF 9F CD |  if_b	jmp	#LR__3312
1dde4                 | LR__3315
1dde4     A7 F0 03 F6 | 	mov	ptra, fp
1dde8     B2 00 A0 FD | 	call	#popregs_
1ddec                 | _fatfs_cc_gen_numname_ret
1ddec     2D 00 64 FD | 	ret
1ddf0                 | 
1ddf0                 | _fatfs_cc_sum_sfn
1ddf0     00 00 06 F6 | 	mov	_var01, #0
1ddf4                 | ' )
1ddf4                 | ' {
1ddf4                 | ' 	BYTE sum = 0;
1ddf4                 | ' 	UINT n = 11;
1ddf4                 | ' 
1ddf4                 | ' 	do {
1ddf4     97 12 48 FB | 	callpa	#(@LR__3322-@LR__3320)>>2,fcache_load_ptr_
1ddf8                 | LR__3320
1ddf8     0B 10 DC FC | 	rep	@LR__3323, #11
1ddfc                 | LR__3321
1ddfc     00 FB E1 F8 | 	getbyte	result1, _var01, #0
1de00     01 FA 45 F0 | 	shr	result1, #1
1de04     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
1de08     07 00 66 F0 | 	shl	_var01, #7
1de0c     00 FB 01 F1 | 	add	result1, _var01
1de10     09 01 C2 FA | 	rdbyte	_var01, arg01
1de14     FD 00 02 F1 | 	add	_var01, result1
1de18     01 12 06 F1 | 	add	arg01, #1
1de1c                 | LR__3322
1de1c                 | LR__3323
1de1c                 | ' 	return sum;
1de1c     00 FB 01 F6 | 	mov	result1, _var01
1de20                 | _fatfs_cc_sum_sfn_ret
1de20     2D 00 64 FD | 	ret
1de24                 | 
1de24                 | _fatfs_cc_dir_read
1de24     0C 4A 05 F6 | 	mov	COUNT_, #12
1de28     A8 00 A0 FD | 	call	#pushregs_
1de2c     09 1F 02 F6 | 	mov	local01, arg01
1de30     0A 21 02 F6 | 	mov	local02, arg02
1de34     04 22 06 F6 | 	mov	local03, #4
1de38     0F 25 02 FB | 	rdlong	local04, local01
1de3c     FF 26 06 F6 | 	mov	local05, #255
1de40     FF 28 06 F6 | 	mov	local06, #255
1de44                 | ' )
1de44                 | ' {
1de44                 | ' 	FRESULT res = FR_NO_FILE;
1de44                 | ' 	FATFS *fs = dp->obj.fs;
1de44                 | ' 	BYTE attr, b;
1de44                 | ' 
1de44                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
1de44                 | ' 
1de44                 | ' 
1de44                 | ' 	while (dp->sect) {
1de44                 | LR__3330
1de44     18 1E 06 F1 | 	add	local01, #24
1de48     0F FB 09 FB | 	rdlong	result1, local01 wz
1de4c     18 1E 86 F1 | 	sub	local01, #24
1de50     AC 01 90 AD |  if_e	jmp	#LR__3340
1de54     18 1E 06 F1 | 	add	local01, #24
1de58     0F 15 02 FB | 	rdlong	arg02, local01
1de5c     18 1E 86 F1 | 	sub	local01, #24
1de60     12 13 02 F6 | 	mov	arg01, local04
1de64     AC ED BF FD | 	call	#_fatfs_cc_move_window
1de68     FD 22 0A F6 | 	mov	local03, result1 wz
1de6c     90 01 90 5D |  if_ne	jmp	#LR__3340
1de70     1C 1E 06 F1 | 	add	local01, #28
1de74     0F FB 01 FB | 	rdlong	result1, local01
1de78     1C 1E 86 F1 | 	sub	local01, #28
1de7c     FD 2A C2 FA | 	rdbyte	local07, result1
1de80     15 FB 01 F6 | 	mov	result1, local07
1de84     07 FA 4D F7 | 	zerox	result1, #7 wz
1de88     04 22 06 A6 |  if_e	mov	local03, #4
1de8c                 | ' 			res = FR_NO_FILE; break;
1de8c     70 01 90 AD |  if_e	jmp	#LR__3340
1de90     1C 1E 06 F1 | 	add	local01, #28
1de94     0F 2D 02 FB | 	rdlong	local08, local01
1de98     0B 2C 06 F1 | 	add	local08, #11
1de9c     16 2F C2 FA | 	rdbyte	local09, local08
1dea0     3F 2E 06 F5 | 	and	local09, #63
1dea4     16 1E 86 F1 | 	sub	local01, #22
1dea8     0F 2F 42 FC | 	wrbyte	local09, local01
1deac     06 1E 86 F1 | 	sub	local01, #6
1deb0     15 FB E1 F8 | 	getbyte	result1, local07, #0
1deb4     E5 FA 0D F2 | 	cmp	result1, #229 wz
1deb8     15 2D 02 56 |  if_ne	mov	local08, local07
1debc     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
1dec0     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
1dec4     1C 00 90 AD |  if_e	jmp	#LR__3331
1dec8     00 30 06 F6 | 	mov	local10, #0
1decc     17 2D E2 F8 | 	getbyte	local08, local09, #0
1ded0     20 2C 26 F5 | 	andn	local08, #32
1ded4     08 2C 0E F2 | 	cmp	local08, #8 wz
1ded8     01 30 06 A6 |  if_e	mov	local10, #1
1dedc     10 31 0A F2 | 	cmp	local10, local02 wz
1dee0     08 00 90 AD |  if_e	jmp	#LR__3332
1dee4                 | LR__3331
1dee4     FF 26 06 F6 | 	mov	local05, #255
1dee8     00 01 90 FD | 	jmp	#LR__3339
1deec                 | LR__3332
1deec     17 2F E2 F8 | 	getbyte	local09, local09, #0
1def0     0F 2E 0E F2 | 	cmp	local09, #15 wz
1def4     B4 00 90 5D |  if_ne	jmp	#LR__3336
1def8     15 33 E2 F8 | 	getbyte	local11, local07, #0
1defc     40 32 CE F7 | 	test	local11, #64 wz
1df00     30 00 90 AD |  if_e	jmp	#LR__3333
1df04     1C 1E 06 F1 | 	add	local01, #28
1df08     0F 33 02 FB | 	rdlong	local11, local01
1df0c     0D 32 06 F1 | 	add	local11, #13
1df10     19 29 C2 FA | 	rdbyte	local06, local11
1df14     15 2B E2 F8 | 	getbyte	local07, local07, #0
1df18     BF 2A 06 F5 | 	and	local07, #191
1df1c     15 27 02 F6 | 	mov	local05, local07
1df20     0C 1E 86 F1 | 	sub	local01, #12
1df24     0F 33 02 FB | 	rdlong	local11, local01
1df28     1C 1E 06 F1 | 	add	local01, #28
1df2c     0F 33 62 FC | 	wrlong	local11, local01
1df30     2C 1E 86 F1 | 	sub	local01, #44
1df34                 | LR__3333
1df34     15 2D E2 F8 | 	getbyte	local08, local07, #0
1df38     13 31 E2 F8 | 	getbyte	local10, local05, #0
1df3c     18 2D 0A F2 | 	cmp	local08, local10 wz
1df40     5C 00 90 5D |  if_ne	jmp	#LR__3334
1df44     14 31 E2 F8 | 	getbyte	local10, local06, #0
1df48     1C 1E 06 F1 | 	add	local01, #28
1df4c     0F 2F 02 FB | 	rdlong	local09, local01
1df50     1C 1E 86 F1 | 	sub	local01, #28
1df54     0D 2E 06 F1 | 	add	local09, #13
1df58     17 2D C2 FA | 	rdbyte	local08, local09
1df5c     16 2F E2 F8 | 	getbyte	local09, local08, #0
1df60     17 31 0A F2 | 	cmp	local10, local09 wz
1df64     38 00 90 5D |  if_ne	jmp	#LR__3334
1df68     0C 24 06 F1 | 	add	local04, #12
1df6c     12 13 02 FB | 	rdlong	arg01, local04
1df70     0C 24 86 F1 | 	sub	local04, #12
1df74     1C 1E 06 F1 | 	add	local01, #28
1df78     0F 35 02 FB | 	rdlong	local12, local01
1df7c     1C 1E 86 F1 | 	sub	local01, #28
1df80     1A 15 02 F6 | 	mov	arg02, local12
1df84     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
1df88     00 FA 4D F2 | 	cmps	result1, #0 wz
1df8c     13 35 02 56 |  if_ne	mov	local12, local05
1df90     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
1df94     01 34 86 51 |  if_ne	sub	local12, #1
1df98     1A 33 02 56 |  if_ne	mov	local11, local12
1df9c     04 00 90 5D |  if_ne	jmp	#LR__3335
1dfa0                 | LR__3334
1dfa0     FF 32 06 F6 | 	mov	local11, #255
1dfa4                 | LR__3335
1dfa4     19 27 02 F6 | 	mov	local05, local11
1dfa8     40 00 90 FD | 	jmp	#LR__3338
1dfac                 | LR__3336
1dfac     13 33 02 F6 | 	mov	local11, local05
1dfb0     07 32 4E F7 | 	zerox	local11, #7 wz
1dfb4     20 00 90 5D |  if_ne	jmp	#LR__3337
1dfb8     14 29 E2 F8 | 	getbyte	local06, local06, #0
1dfbc     1C 1E 06 F1 | 	add	local01, #28
1dfc0     0F 13 02 FB | 	rdlong	arg01, local01
1dfc4     1C 1E 86 F1 | 	sub	local01, #28
1dfc8     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
1dfcc     FD FA E1 F8 | 	getbyte	result1, result1, #0
1dfd0     FD 28 0A F2 | 	cmp	local06, result1 wz
1dfd4     28 00 90 AD |  if_e	jmp	#LR__3340
1dfd8                 | LR__3337
1dfd8     2C 1E 06 F1 | 	add	local01, #44
1dfdc     FF FF FF FF 
1dfe0     0F FF 6B FC | 	wrlong	##-1, local01
1dfe4     2C 1E 86 F1 | 	sub	local01, #44
1dfe8                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
1dfe8                 | ' 					}
1dfe8                 | ' 					break;
1dfe8     14 00 90 FD | 	jmp	#LR__3340
1dfec                 | LR__3338
1dfec                 | LR__3339
1dfec     0F 13 02 F6 | 	mov	arg01, local01
1dff0     00 14 06 F6 | 	mov	arg02, #0
1dff4     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
1dff8     FD 22 0A F6 | 	mov	local03, result1 wz
1dffc     44 FE 9F AD |  if_e	jmp	#LR__3330
1e000                 | LR__3340
1e000     00 22 0E F2 | 	cmp	local03, #0 wz
1e004     18 1E 06 51 |  if_ne	add	local01, #24
1e008     0F 01 68 5C |  if_ne	wrlong	#0, local01
1e00c                 | ' 	return res;
1e00c     11 FB 01 F6 | 	mov	result1, local03
1e010     A7 F0 03 F6 | 	mov	ptra, fp
1e014     B2 00 A0 FD | 	call	#popregs_
1e018                 | _fatfs_cc_dir_read_ret
1e018     2D 00 64 FD | 	ret
1e01c                 | 
1e01c                 | _fatfs_cc_dir_find
1e01c     0B 4A 05 F6 | 	mov	COUNT_, #11
1e020     A8 00 A0 FD | 	call	#pushregs_
1e024     09 1F 02 F6 | 	mov	local01, arg01
1e028     0F 21 02 FB | 	rdlong	local02, local01
1e02c     0F 13 02 F6 | 	mov	arg01, local01
1e030     00 14 06 F6 | 	mov	arg02, #0
1e034     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
1e038     00 FA 0D F2 | 	cmp	result1, #0 wz
1e03c     18 02 90 5D |  if_ne	jmp	#LR__3362
1e040     FF 22 06 F6 | 	mov	local03, #255
1e044     FF 24 06 F6 | 	mov	local04, #255
1e048     2C 1E 06 F1 | 	add	local01, #44
1e04c     FF FF FF FF 
1e050     0F FF 6B FC | 	wrlong	##-1, local01
1e054     2C 1E 86 F1 | 	sub	local01, #44
1e058                 | ' #line 2404 "ff.c"
1e058                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
1e058                 | ' 
1e058                 | ' 	do {
1e058                 | LR__3350
1e058     18 1E 06 F1 | 	add	local01, #24
1e05c     0F 15 02 FB | 	rdlong	arg02, local01
1e060     18 1E 86 F1 | 	sub	local01, #24
1e064     10 13 02 F6 | 	mov	arg01, local02
1e068     A8 EB BF FD | 	call	#_fatfs_cc_move_window
1e06c     FD 26 0A F6 | 	mov	local05, result1 wz
1e070     E0 01 90 5D |  if_ne	jmp	#LR__3361
1e074     1C 1E 06 F1 | 	add	local01, #28
1e078     0F 17 02 FB | 	rdlong	arg03, local01
1e07c     1C 1E 86 F1 | 	sub	local01, #28
1e080     0B 29 C2 FA | 	rdbyte	local06, arg03
1e084     14 17 02 F6 | 	mov	arg03, local06
1e088     07 16 4E F7 | 	zerox	arg03, #7 wz
1e08c     04 26 06 A6 |  if_e	mov	local05, #4
1e090     C0 01 90 AD |  if_e	jmp	#LR__3361
1e094     1C 1E 06 F1 | 	add	local01, #28
1e098     0F 2B 02 FB | 	rdlong	local07, local01
1e09c     15 17 02 F6 | 	mov	arg03, local07
1e0a0     0B 16 06 F1 | 	add	arg03, #11
1e0a4     0B 2D C2 FA | 	rdbyte	local08, arg03
1e0a8     3F 2C 06 F5 | 	and	local08, #63
1e0ac     16 1E 86 F1 | 	sub	local01, #22
1e0b0     0F 2D 42 FC | 	wrbyte	local08, local01
1e0b4     06 1E 86 F1 | 	sub	local01, #6
1e0b8     14 17 E2 F8 | 	getbyte	arg03, local06, #0
1e0bc     E5 16 0E F2 | 	cmp	arg03, #229 wz
1e0c0     18 00 90 AD |  if_e	jmp	#LR__3351
1e0c4     16 17 E2 F8 | 	getbyte	arg03, local08, #0
1e0c8     08 16 CE F7 | 	test	arg03, #8 wz
1e0cc     16 2B 02 56 |  if_ne	mov	local07, local08
1e0d0     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
1e0d4     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
1e0d8     18 00 90 AD |  if_e	jmp	#LR__3352
1e0dc                 | LR__3351
1e0dc     FF 24 06 F6 | 	mov	local04, #255
1e0e0     2C 1E 06 F1 | 	add	local01, #44
1e0e4     FF FF FF FF 
1e0e8     0F FF 6B FC | 	wrlong	##-1, local01
1e0ec     2C 1E 86 F1 | 	sub	local01, #44
1e0f0     4C 01 90 FD | 	jmp	#LR__3360
1e0f4                 | LR__3352
1e0f4     16 2D E2 F8 | 	getbyte	local08, local08, #0
1e0f8     0F 2C 0E F2 | 	cmp	local08, #15 wz
1e0fc     C8 00 90 5D |  if_ne	jmp	#LR__3356
1e100     2B 1E 06 F1 | 	add	local01, #43
1e104     0F 2D C2 FA | 	rdbyte	local08, local01
1e108     2B 1E 86 F1 | 	sub	local01, #43
1e10c     40 2C CE F7 | 	test	local08, #64 wz
1e110     2C 01 90 5D |  if_ne	jmp	#LR__3359
1e114     14 2F E2 F8 | 	getbyte	local09, local06, #0
1e118     40 2E CE F7 | 	test	local09, #64 wz
1e11c     30 00 90 AD |  if_e	jmp	#LR__3353
1e120     1C 1E 06 F1 | 	add	local01, #28
1e124     0F 2F 02 FB | 	rdlong	local09, local01
1e128     0D 2E 06 F1 | 	add	local09, #13
1e12c     17 23 C2 FA | 	rdbyte	local03, local09
1e130     14 29 E2 F8 | 	getbyte	local06, local06, #0
1e134     BF 28 06 F5 | 	and	local06, #191
1e138     14 25 02 F6 | 	mov	local04, local06
1e13c     0C 1E 86 F1 | 	sub	local01, #12
1e140     0F 2F 02 FB | 	rdlong	local09, local01
1e144     1C 1E 06 F1 | 	add	local01, #28
1e148     0F 2F 62 FC | 	wrlong	local09, local01
1e14c     2C 1E 86 F1 | 	sub	local01, #44
1e150                 | LR__3353
1e150     14 31 E2 F8 | 	getbyte	local10, local06, #0
1e154     12 2B E2 F8 | 	getbyte	local07, local04, #0
1e158     15 31 0A F2 | 	cmp	local10, local07 wz
1e15c     5C 00 90 5D |  if_ne	jmp	#LR__3354
1e160     11 2D E2 F8 | 	getbyte	local08, local03, #0
1e164     1C 1E 06 F1 | 	add	local01, #28
1e168     0F 2B 02 FB | 	rdlong	local07, local01
1e16c     1C 1E 86 F1 | 	sub	local01, #28
1e170     0D 2A 06 F1 | 	add	local07, #13
1e174     15 29 C2 FA | 	rdbyte	local06, local07
1e178     14 2B E2 F8 | 	getbyte	local07, local06, #0
1e17c     15 2D 0A F2 | 	cmp	local08, local07 wz
1e180     38 00 90 5D |  if_ne	jmp	#LR__3354
1e184     0C 20 06 F1 | 	add	local02, #12
1e188     10 13 02 FB | 	rdlong	arg01, local02
1e18c     0C 20 86 F1 | 	sub	local02, #12
1e190     1C 1E 06 F1 | 	add	local01, #28
1e194     0F 33 02 FB | 	rdlong	local11, local01
1e198     1C 1E 86 F1 | 	sub	local01, #28
1e19c     19 15 02 F6 | 	mov	arg02, local11
1e1a0     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
1e1a4     00 FA 4D F2 | 	cmps	result1, #0 wz
1e1a8     12 33 02 56 |  if_ne	mov	local11, local04
1e1ac     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
1e1b0     01 32 86 51 |  if_ne	sub	local11, #1
1e1b4     19 2F 02 56 |  if_ne	mov	local09, local11
1e1b8     04 00 90 5D |  if_ne	jmp	#LR__3355
1e1bc                 | LR__3354
1e1bc     FF 2E 06 F6 | 	mov	local09, #255
1e1c0                 | LR__3355
1e1c0     17 25 02 F6 | 	mov	local04, local09
1e1c4     78 00 90 FD | 	jmp	#LR__3359
1e1c8                 | LR__3356
1e1c8     12 2F 02 F6 | 	mov	local09, local04
1e1cc     07 2E 4E F7 | 	zerox	local09, #7 wz
1e1d0     20 00 90 5D |  if_ne	jmp	#LR__3357
1e1d4     11 31 E2 F8 | 	getbyte	local10, local03, #0
1e1d8     1C 1E 06 F1 | 	add	local01, #28
1e1dc     0F 13 02 FB | 	rdlong	arg01, local01
1e1e0     1C 1E 86 F1 | 	sub	local01, #28
1e1e4     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
1e1e8     FD FA E1 F8 | 	getbyte	result1, result1, #0
1e1ec     FD 30 0A F2 | 	cmp	local10, result1 wz
1e1f0     60 00 90 AD |  if_e	jmp	#LR__3361
1e1f4                 | LR__3357
1e1f4     2B 1E 06 F1 | 	add	local01, #43
1e1f8     0F 2F C2 FA | 	rdbyte	local09, local01
1e1fc     2B 1E 86 F1 | 	sub	local01, #43
1e200     01 2E CE F7 | 	test	local09, #1 wz
1e204     24 00 90 5D |  if_ne	jmp	#LR__3358
1e208     1C 1E 06 F1 | 	add	local01, #28
1e20c     0F 13 02 FB | 	rdlong	arg01, local01
1e210     04 1E 06 F1 | 	add	local01, #4
1e214     0F 15 02 F6 | 	mov	arg02, local01
1e218     20 1E 86 F1 | 	sub	local01, #32
1e21c     0B 16 06 F6 | 	mov	arg03, #11
1e220     88 DA BF FD | 	call	#_fatfs_cc_memcmp
1e224     00 FA 0D F2 | 	cmp	result1, #0 wz
1e228     28 00 90 AD |  if_e	jmp	#LR__3361
1e22c                 | LR__3358
1e22c     FF 24 06 F6 | 	mov	local04, #255
1e230     2C 1E 06 F1 | 	add	local01, #44
1e234     FF FF FF FF 
1e238     0F FF 6B FC | 	wrlong	##-1, local01
1e23c     2C 1E 86 F1 | 	sub	local01, #44
1e240                 | LR__3359
1e240                 | LR__3360
1e240     0F 13 02 F6 | 	mov	arg01, local01
1e244     00 14 06 F6 | 	mov	arg02, #0
1e248     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
1e24c     FD 26 0A F6 | 	mov	local05, result1 wz
1e250     04 FE 9F AD |  if_e	jmp	#LR__3350
1e254                 | LR__3361
1e254                 | ' 
1e254                 | ' 	return res;
1e254     13 FB 01 F6 | 	mov	result1, local05
1e258                 | LR__3362
1e258     A7 F0 03 F6 | 	mov	ptra, fp
1e25c     B2 00 A0 FD | 	call	#popregs_
1e260                 | _fatfs_cc_dir_find_ret
1e260     2D 00 64 FD | 	ret
1e264                 | 
1e264                 | _fatfs_cc_dir_register
1e264     0A 4A 05 F6 | 	mov	COUNT_, #10
1e268     A8 00 A0 FD | 	call	#pushregs_
1e26c     2C F0 07 F1 | 	add	ptra, #44
1e270     04 4E 05 F1 | 	add	fp, #4
1e274     A7 12 62 FC | 	wrlong	arg01, fp
1e278     09 1F 02 FB | 	rdlong	local01, arg01
1e27c     08 4E 05 F1 | 	add	fp, #8
1e280     A7 1E 62 FC | 	wrlong	local01, fp
1e284     08 4E 85 F1 | 	sub	fp, #8
1e288     A7 20 02 FB | 	rdlong	local02, fp
1e28c     04 4E 85 F1 | 	sub	fp, #4
1e290     2B 20 06 F1 | 	add	local02, #43
1e294     10 21 C2 FA | 	rdbyte	local02, local02
1e298     A0 20 CE F7 | 	test	local02, #160 wz
1e29c     06 FA 05 56 |  if_ne	mov	result1, #6
1e2a0     F8 03 90 5D |  if_ne	jmp	#LR__3385
1e2a4                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
1e2a4     14 4E 05 F1 | 	add	fp, #20
1e2a8     A7 00 68 FC | 	wrlong	#0, fp
1e2ac     14 4E 85 F1 | 	sub	fp, #20
1e2b0     97 28 48 FB | 	callpa	#(@LR__3371-@LR__3370)>>2,fcache_load_ptr_
1e2b4                 | LR__3370
1e2b4     0C 4E 05 F1 | 	add	fp, #12
1e2b8     A7 20 02 FB | 	rdlong	local02, fp
1e2bc     0C 20 06 F1 | 	add	local02, #12
1e2c0     10 23 02 FB | 	rdlong	local03, local02
1e2c4     08 4E 05 F1 | 	add	fp, #8
1e2c8     A7 24 02 FB | 	rdlong	local04, fp
1e2cc     14 4E 85 F1 | 	sub	fp, #20
1e2d0     01 24 66 F0 | 	shl	local04, #1
1e2d4     11 25 02 F1 | 	add	local04, local03
1e2d8     12 21 EA FA | 	rdword	local02, local04 wz
1e2dc     24 00 90 AD |  if_e	jmp	#LR__3372
1e2e0     14 4E 05 F1 | 	add	fp, #20
1e2e4     A7 26 02 FB | 	rdlong	local05, fp
1e2e8     13 29 02 F6 | 	mov	local06, local05
1e2ec     13 2B 02 F6 | 	mov	local07, local05
1e2f0     15 2D 02 F6 | 	mov	local08, local07
1e2f4     01 2C 06 F1 | 	add	local08, #1
1e2f8     A7 2C 62 FC | 	wrlong	local08, fp
1e2fc     14 4E 85 F1 | 	sub	fp, #20
1e300     B0 FF 9F FD | 	jmp	#LR__3370
1e304                 | LR__3371
1e304                 | LR__3372
1e304     1C 4E 05 F1 | 	add	fp, #28
1e308     A7 12 02 F6 | 	mov	arg01, fp
1e30c     18 4E 85 F1 | 	sub	fp, #24
1e310     A7 14 02 FB | 	rdlong	arg02, fp
1e314     04 4E 85 F1 | 	sub	fp, #4
1e318     20 14 06 F1 | 	add	arg02, #32
1e31c     0C 16 06 F6 | 	mov	arg03, #12
1e320     44 77 BF FD | 	call	#__system____builtin_memmove
1e324     27 4E 05 F1 | 	add	fp, #39
1e328     A7 2E C2 FA | 	rdbyte	local09, fp
1e32c     27 4E 85 F1 | 	sub	fp, #39
1e330     01 2E CE F7 | 	test	local09, #1 wz
1e334     F4 00 90 AD |  if_e	jmp	#LR__3375
1e338     04 4E 05 F1 | 	add	fp, #4
1e33c     A7 30 02 FB | 	rdlong	local10, fp
1e340     2B 30 06 F1 | 	add	local10, #43
1e344     18 81 48 FC | 	wrbyte	#64, local10
1e348                 | ' 		dp->fn[ 11 ] =  0x40 ;
1e348                 | ' 		for (n = 1; n < 100; n++) {
1e348     0C 4E 05 F1 | 	add	fp, #12
1e34c     A7 02 68 FC | 	wrlong	#1, fp
1e350     10 4E 85 F1 | 	sub	fp, #16
1e354                 | LR__3373
1e354     10 4E 05 F1 | 	add	fp, #16
1e358     A7 20 02 FB | 	rdlong	local02, fp
1e35c     10 4E 85 F1 | 	sub	fp, #16
1e360     64 20 16 F2 | 	cmp	local02, #100 wc
1e364     70 00 90 3D |  if_ae	jmp	#LR__3374
1e368     04 4E 05 F1 | 	add	fp, #4
1e36c     A7 12 02 FB | 	rdlong	arg01, fp
1e370     20 12 06 F1 | 	add	arg01, #32
1e374     18 4E 05 F1 | 	add	fp, #24
1e378     A7 14 02 F6 | 	mov	arg02, fp
1e37c     10 4E 85 F1 | 	sub	fp, #16
1e380     A7 30 02 FB | 	rdlong	local10, fp
1e384     0C 30 06 F1 | 	add	local10, #12
1e388     18 17 02 FB | 	rdlong	arg03, local10
1e38c     04 4E 05 F1 | 	add	fp, #4
1e390     A7 18 02 FB | 	rdlong	arg04, fp
1e394     10 4E 85 F1 | 	sub	fp, #16
1e398     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
1e39c     04 4E 05 F1 | 	add	fp, #4
1e3a0     A7 12 02 FB | 	rdlong	arg01, fp
1e3a4     04 4E 85 F1 | 	sub	fp, #4
1e3a8     70 FC BF FD | 	call	#_fatfs_cc_dir_find
1e3ac     08 4E 05 F1 | 	add	fp, #8
1e3b0     A7 FA 61 FC | 	wrlong	result1, fp
1e3b4     00 FA 4D F2 | 	cmps	result1, #0 wz
1e3b8     08 4E 85 F1 | 	sub	fp, #8
1e3bc     18 00 90 5D |  if_ne	jmp	#LR__3374
1e3c0     10 4E 05 F1 | 	add	fp, #16
1e3c4     A7 30 02 FB | 	rdlong	local10, fp
1e3c8     01 30 06 F1 | 	add	local10, #1
1e3cc     A7 30 62 FC | 	wrlong	local10, fp
1e3d0     10 4E 85 F1 | 	sub	fp, #16
1e3d4     7C FF 9F FD | 	jmp	#LR__3373
1e3d8                 | LR__3374
1e3d8     10 4E 05 F1 | 	add	fp, #16
1e3dc     A7 30 02 FB | 	rdlong	local10, fp
1e3e0     10 4E 85 F1 | 	sub	fp, #16
1e3e4     64 30 0E F2 | 	cmp	local10, #100 wz
1e3e8     07 FA 05 A6 |  if_e	mov	result1, #7
1e3ec     AC 02 90 AD |  if_e	jmp	#LR__3385
1e3f0     08 4E 05 F1 | 	add	fp, #8
1e3f4     A7 30 02 FB | 	rdlong	local10, fp
1e3f8     08 4E 85 F1 | 	sub	fp, #8
1e3fc     04 30 0E F2 | 	cmp	local10, #4 wz
1e400     08 4E 05 51 |  if_ne	add	fp, #8
1e404     A7 FA 01 5B |  if_ne	rdlong	result1, fp
1e408     08 4E 85 51 |  if_ne	sub	fp, #8
1e40c     8C 02 90 5D |  if_ne	jmp	#LR__3385
1e410     04 4E 05 F1 | 	add	fp, #4
1e414     A7 30 02 FB | 	rdlong	local10, fp
1e418     23 4E 05 F1 | 	add	fp, #35
1e41c     A7 1E C2 FA | 	rdbyte	local01, fp
1e420     27 4E 85 F1 | 	sub	fp, #39
1e424     2B 30 06 F1 | 	add	local10, #43
1e428     18 1F 42 FC | 	wrbyte	local01, local10
1e42c                 | LR__3375
1e42c     27 4E 05 F1 | 	add	fp, #39
1e430     A7 20 C2 FA | 	rdbyte	local02, fp
1e434     27 4E 85 F1 | 	sub	fp, #39
1e438     02 20 CE F7 | 	test	local02, #2 wz
1e43c     20 00 90 AD |  if_e	jmp	#LR__3376
1e440     14 4E 05 F1 | 	add	fp, #20
1e444     A7 30 02 FB | 	rdlong	local10, fp
1e448     0C 30 06 F1 | 	add	local10, #12
1e44c     0D 30 16 FD | 	qdiv	local10, #13
1e450     14 4E 85 F1 | 	sub	fp, #20
1e454     18 30 62 FD | 	getqx	local10
1e458     01 30 06 F1 | 	add	local10, #1
1e45c     04 00 90 FD | 	jmp	#LR__3377
1e460                 | LR__3376
1e460     01 30 06 F6 | 	mov	local10, #1
1e464                 | LR__3377
1e464     18 4E 05 F1 | 	add	fp, #24
1e468     A7 30 62 FC | 	wrlong	local10, fp
1e46c     14 4E 85 F1 | 	sub	fp, #20
1e470     A7 12 02 FB | 	rdlong	arg01, fp
1e474     18 15 02 F6 | 	mov	arg02, local10
1e478     04 4E 85 F1 | 	sub	fp, #4
1e47c     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
1e480     08 4E 05 F1 | 	add	fp, #8
1e484     A7 FA 61 FC | 	wrlong	result1, fp
1e488     08 4E 85 F1 | 	sub	fp, #8
1e48c     00 FA 0D F2 | 	cmp	result1, #0 wz
1e490     38 01 90 5D |  if_ne	jmp	#LR__3382
1e494     18 4E 05 F1 | 	add	fp, #24
1e498     A7 30 02 FB | 	rdlong	local10, fp
1e49c     01 30 8E F1 | 	sub	local10, #1 wz
1e4a0     A7 30 62 FC | 	wrlong	local10, fp
1e4a4     18 4E 85 F1 | 	sub	fp, #24
1e4a8     20 01 90 AD |  if_e	jmp	#LR__3382
1e4ac     04 4E 05 F1 | 	add	fp, #4
1e4b0     A7 30 02 FB | 	rdlong	local10, fp
1e4b4     18 13 02 F6 | 	mov	arg01, local10
1e4b8     14 4E 05 F1 | 	add	fp, #20
1e4bc     A7 18 02 FB | 	rdlong	arg04, fp
1e4c0     18 4E 85 F1 | 	sub	fp, #24
1e4c4     05 18 66 F0 | 	shl	arg04, #5
1e4c8     10 30 06 F1 | 	add	local10, #16
1e4cc     18 15 02 FB | 	rdlong	arg02, local10
1e4d0     0C 15 82 F1 | 	sub	arg02, arg04
1e4d4     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
1e4d8     08 4E 05 F1 | 	add	fp, #8
1e4dc     A7 FA 61 FC | 	wrlong	result1, fp
1e4e0     08 4E 85 F1 | 	sub	fp, #8
1e4e4     00 FA 0D F2 | 	cmp	result1, #0 wz
1e4e8     E0 00 90 5D |  if_ne	jmp	#LR__3381
1e4ec     04 4E 05 F1 | 	add	fp, #4
1e4f0     A7 12 02 FB | 	rdlong	arg01, fp
1e4f4     04 4E 85 F1 | 	sub	fp, #4
1e4f8     20 12 06 F1 | 	add	arg01, #32
1e4fc     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
1e500     FD 30 02 F6 | 	mov	local10, result1
1e504     28 4E 05 F1 | 	add	fp, #40
1e508     A7 30 42 FC | 	wrbyte	local10, fp
1e50c     28 4E 85 F1 | 	sub	fp, #40
1e510                 | ' 			sum = sum_sfn(dp->fn);
1e510                 | ' 			do {
1e510                 | LR__3378
1e510     0C 4E 05 F1 | 	add	fp, #12
1e514     A7 12 02 FB | 	rdlong	arg01, fp
1e518     08 4E 85 F1 | 	sub	fp, #8
1e51c     A7 1E 02 FB | 	rdlong	local01, fp
1e520     04 4E 85 F1 | 	sub	fp, #4
1e524     18 1E 06 F1 | 	add	local01, #24
1e528     0F 15 02 FB | 	rdlong	arg02, local01
1e52c     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
1e530     08 4E 05 F1 | 	add	fp, #8
1e534     A7 FA 61 FC | 	wrlong	result1, fp
1e538     00 FA 4D F2 | 	cmps	result1, #0 wz
1e53c     08 4E 85 F1 | 	sub	fp, #8
1e540     88 00 90 5D |  if_ne	jmp	#LR__3380
1e544     0C 4E 05 F1 | 	add	fp, #12
1e548     A7 20 02 FB | 	rdlong	local02, fp
1e54c     0C 20 06 F1 | 	add	local02, #12
1e550     10 13 02 FB | 	rdlong	arg01, local02
1e554     08 4E 85 F1 | 	sub	fp, #8
1e558     A7 1E 02 FB | 	rdlong	local01, fp
1e55c     1C 1E 06 F1 | 	add	local01, #28
1e560     0F 15 02 FB | 	rdlong	arg02, local01
1e564     14 4E 05 F1 | 	add	fp, #20
1e568     A7 16 02 FB | 	rdlong	arg03, fp
1e56c     10 4E 05 F1 | 	add	fp, #16
1e570     A7 18 C2 FA | 	rdbyte	arg04, fp
1e574     28 4E 85 F1 | 	sub	fp, #40
1e578     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
1e57c     0C 4E 05 F1 | 	add	fp, #12
1e580     A7 30 02 FB | 	rdlong	local10, fp
1e584     03 30 06 F1 | 	add	local10, #3
1e588     18 03 48 FC | 	wrbyte	#1, local10
1e58c     08 4E 85 F1 | 	sub	fp, #8
1e590     A7 12 02 FB | 	rdlong	arg01, fp
1e594     04 4E 85 F1 | 	sub	fp, #4
1e598     00 14 06 F6 | 	mov	arg02, #0
1e59c     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
1e5a0     08 4E 05 F1 | 	add	fp, #8
1e5a4     A7 FA 61 FC | 	wrlong	result1, fp
1e5a8     00 FA 4D F2 | 	cmps	result1, #0 wz
1e5ac     08 4E 85 F1 | 	sub	fp, #8
1e5b0     18 00 90 5D |  if_ne	jmp	#LR__3379
1e5b4     18 4E 05 F1 | 	add	fp, #24
1e5b8     A7 30 02 FB | 	rdlong	local10, fp
1e5bc     01 30 8E F1 | 	sub	local10, #1 wz
1e5c0     A7 30 62 FC | 	wrlong	local10, fp
1e5c4     18 4E 85 F1 | 	sub	fp, #24
1e5c8     44 FF 9F 5D |  if_ne	jmp	#LR__3378
1e5cc                 | LR__3379
1e5cc                 | LR__3380
1e5cc                 | LR__3381
1e5cc                 | LR__3382
1e5cc     08 4E 05 F1 | 	add	fp, #8
1e5d0     A7 30 0A FB | 	rdlong	local10, fp wz
1e5d4     08 4E 85 F1 | 	sub	fp, #8
1e5d8     B4 00 90 5D |  if_ne	jmp	#LR__3384
1e5dc     0C 4E 05 F1 | 	add	fp, #12
1e5e0     A7 12 02 FB | 	rdlong	arg01, fp
1e5e4     08 4E 85 F1 | 	sub	fp, #8
1e5e8     A7 1E 02 FB | 	rdlong	local01, fp
1e5ec     04 4E 85 F1 | 	sub	fp, #4
1e5f0     18 1E 06 F1 | 	add	local01, #24
1e5f4     0F 15 02 FB | 	rdlong	arg02, local01
1e5f8     18 E6 BF FD | 	call	#_fatfs_cc_move_window
1e5fc     08 4E 05 F1 | 	add	fp, #8
1e600     A7 FA 61 FC | 	wrlong	result1, fp
1e604     08 4E 85 F1 | 	sub	fp, #8
1e608     00 FA 0D F2 | 	cmp	result1, #0 wz
1e60c     80 00 90 5D |  if_ne	jmp	#LR__3383
1e610     04 4E 05 F1 | 	add	fp, #4
1e614     A7 20 02 FB | 	rdlong	local02, fp
1e618     04 4E 85 F1 | 	sub	fp, #4
1e61c     1C 20 06 F1 | 	add	local02, #28
1e620     10 13 02 FB | 	rdlong	arg01, local02
1e624     00 14 06 F6 | 	mov	arg02, #0
1e628     20 16 06 F6 | 	mov	arg03, #32
1e62c     98 00 A0 FD | 	call	#\builtin_bytefill_
1e630     04 4E 05 F1 | 	add	fp, #4
1e634     A7 14 02 FB | 	rdlong	arg02, fp
1e638     0A 1F 02 F6 | 	mov	local01, arg02
1e63c     1C 1E 06 F1 | 	add	local01, #28
1e640     0F 13 02 FB | 	rdlong	arg01, local01
1e644     04 4E 85 F1 | 	sub	fp, #4
1e648     20 14 06 F1 | 	add	arg02, #32
1e64c     0B 16 06 F6 | 	mov	arg03, #11
1e650     14 74 BF FD | 	call	#__system____builtin_memmove
1e654     04 4E 05 F1 | 	add	fp, #4
1e658     A7 2E 02 FB | 	rdlong	local09, fp
1e65c     17 31 02 F6 | 	mov	local10, local09
1e660     1C 30 06 F1 | 	add	local10, #28
1e664     18 1F 02 FB | 	rdlong	local01, local10
1e668     2B 2E 06 F1 | 	add	local09, #43
1e66c     17 31 C2 FA | 	rdbyte	local10, local09
1e670     18 30 06 F5 | 	and	local10, #24
1e674     0C 1E 06 F1 | 	add	local01, #12
1e678     0F 31 42 FC | 	wrbyte	local10, local01
1e67c     08 4E 05 F1 | 	add	fp, #8
1e680     A7 30 02 FB | 	rdlong	local10, fp
1e684     0C 4E 85 F1 | 	sub	fp, #12
1e688     03 30 06 F1 | 	add	local10, #3
1e68c     18 03 48 FC | 	wrbyte	#1, local10
1e690                 | LR__3383
1e690                 | LR__3384
1e690                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
1e690                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
1e690                 | ' 
1e690                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
1e690                 | ' 
1e690                 | ' 			fs->wflag = 1;
1e690                 | ' 		}
1e690                 | ' 	}
1e690                 | ' 
1e690                 | ' 	return res;
1e690     08 4E 05 F1 | 	add	fp, #8
1e694     A7 FA 01 FB | 	rdlong	result1, fp
1e698     08 4E 85 F1 | 	sub	fp, #8
1e69c                 | LR__3385
1e69c     A7 F0 03 F6 | 	mov	ptra, fp
1e6a0     B2 00 A0 FD | 	call	#popregs_
1e6a4                 | _fatfs_cc_dir_register_ret
1e6a4     2D 00 64 FD | 	ret
1e6a8                 | 
1e6a8                 | _fatfs_cc_dir_remove
1e6a8     05 4A 05 F6 | 	mov	COUNT_, #5
1e6ac     A8 00 A0 FD | 	call	#pushregs_
1e6b0     09 1F 02 F6 | 	mov	local01, arg01
1e6b4     0F 21 02 FB | 	rdlong	local02, local01
1e6b8     10 1E 06 F1 | 	add	local01, #16
1e6bc     0F 23 02 FB | 	rdlong	local03, local01
1e6c0     1C 1E 06 F1 | 	add	local01, #28
1e6c4     0F 15 02 FB | 	rdlong	arg02, local01
1e6c8     2C 1E 86 F1 | 	sub	local01, #44
1e6cc     FF FF 7F FF 
1e6d0     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
1e6d4     00 24 06 A6 |  if_e	mov	local04, #0
1e6d8     18 00 90 AD |  if_e	jmp	#LR__3390
1e6dc     0F 13 02 F6 | 	mov	arg01, local01
1e6e0     2C 1E 06 F1 | 	add	local01, #44
1e6e4     0F 15 02 FB | 	rdlong	arg02, local01
1e6e8     2C 1E 86 F1 | 	sub	local01, #44
1e6ec     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
1e6f0     FD 24 02 F6 | 	mov	local04, result1
1e6f4                 | LR__3390
1e6f4     12 27 0A F6 | 	mov	local05, local04 wz
1e6f8     64 00 90 5D |  if_ne	jmp	#LR__3393
1e6fc                 | ' 		do {
1e6fc                 | LR__3391
1e6fc     18 1E 06 F1 | 	add	local01, #24
1e700     0F 15 02 FB | 	rdlong	arg02, local01
1e704     18 1E 86 F1 | 	sub	local01, #24
1e708     10 13 02 F6 | 	mov	arg01, local02
1e70c     04 E5 BF FD | 	call	#_fatfs_cc_move_window
1e710     FD 26 0A F6 | 	mov	local05, result1 wz
1e714     40 00 90 5D |  if_ne	jmp	#LR__3392
1e718     1C 1E 06 F1 | 	add	local01, #28
1e71c     0F 25 02 FB | 	rdlong	local04, local01
1e720     12 CB 49 FC | 	wrbyte	#229, local04
1e724     03 20 06 F1 | 	add	local02, #3
1e728     10 03 48 FC | 	wrbyte	#1, local02
1e72c     03 20 86 F1 | 	sub	local02, #3
1e730     0C 1E 86 F1 | 	sub	local01, #12
1e734     0F 25 02 FB | 	rdlong	local04, local01
1e738     10 1E 86 F1 | 	sub	local01, #16
1e73c     11 25 12 F2 | 	cmp	local04, local03 wc
1e740     14 00 90 3D |  if_ae	jmp	#LR__3392
1e744     0F 13 02 F6 | 	mov	arg01, local01
1e748     00 14 06 F6 | 	mov	arg02, #0
1e74c     90 EF BF FD | 	call	#_fatfs_cc_dir_next
1e750     FD 26 0A F6 | 	mov	local05, result1 wz
1e754     A4 FF 9F AD |  if_e	jmp	#LR__3391
1e758                 | LR__3392
1e758     04 26 0E F2 | 	cmp	local05, #4 wz
1e75c     02 26 06 A6 |  if_e	mov	local05, #2
1e760                 | LR__3393
1e760                 | ' 	}
1e760                 | ' #line 2590 "ff.c"
1e760                 | ' 	return res;
1e760     13 FB 01 F6 | 	mov	result1, local05
1e764     A7 F0 03 F6 | 	mov	ptra, fp
1e768     B2 00 A0 FD | 	call	#popregs_
1e76c                 | _fatfs_cc_dir_remove_ret
1e76c     2D 00 64 FD | 	ret
1e770                 | 
1e770                 | _fatfs_cc_get_fileinfo
1e770     0F 4A 05 F6 | 	mov	COUNT_, #15
1e774     A8 00 A0 FD | 	call	#pushregs_
1e778     09 1F 02 F6 | 	mov	local01, arg01
1e77c     0A 21 02 F6 | 	mov	local02, arg02
1e780     0F 23 02 FB | 	rdlong	local03, local01
1e784     1C 20 06 F1 | 	add	local02, #28
1e788     10 01 48 FC | 	wrbyte	#0, local02
1e78c     1C 20 86 F1 | 	sub	local02, #28
1e790     18 1E 06 F1 | 	add	local01, #24
1e794     0F 25 0A FB | 	rdlong	local04, local01 wz
1e798     18 1E 86 F1 | 	sub	local01, #24
1e79c     90 03 90 AD |  if_e	jmp	#LR__3414
1e7a0     2C 1E 06 F1 | 	add	local01, #44
1e7a4     0F 25 02 FB | 	rdlong	local04, local01
1e7a8     2C 1E 86 F1 | 	sub	local01, #44
1e7ac     FF FF 7F FF 
1e7b0     FF 25 0E F2 | 	cmp	local04, ##-1 wz
1e7b4     D8 00 90 AD |  if_e	jmp	#LR__3403
1e7b8     00 26 06 F6 | 	mov	local05, #0
1e7bc     00 28 06 F6 | 	mov	local06, #0
1e7c0     00 2A 06 F6 | 	mov	local07, #0
1e7c4                 | ' 			si = di = 0;
1e7c4                 | ' 			hs = 0;
1e7c4                 | ' 			while (fs->lfnbuf[si] != 0) {
1e7c4                 | LR__3400
1e7c4     0C 22 06 F1 | 	add	local03, #12
1e7c8     11 25 02 FB | 	rdlong	local04, local03
1e7cc     0C 22 86 F1 | 	sub	local03, #12
1e7d0     14 2D 02 F6 | 	mov	local08, local06
1e7d4     01 2C 66 F0 | 	shl	local08, #1
1e7d8     12 2D 02 F1 | 	add	local08, local04
1e7dc     16 25 EA FA | 	rdword	local04, local08 wz
1e7e0     90 00 90 AD |  if_e	jmp	#LR__3402
1e7e4     0C 22 06 F1 | 	add	local03, #12
1e7e8     11 2F 02 FB | 	rdlong	local09, local03
1e7ec     0C 22 86 F1 | 	sub	local03, #12
1e7f0     14 31 02 F6 | 	mov	local10, local06
1e7f4     01 30 66 F0 | 	shl	local10, #1
1e7f8     17 31 02 F1 | 	add	local10, local09
1e7fc     18 33 E2 FA | 	rdword	local11, local10
1e800     15 25 02 F6 | 	mov	local04, local07
1e804     0F 24 4E F7 | 	zerox	local04, #15 wz
1e808     01 28 06 F1 | 	add	local06, #1
1e80c     24 00 90 5D |  if_ne	jmp	#LR__3401
1e810     19 35 32 F9 | 	getword	local12, local11, #0
1e814     6C 00 00 FF 
1e818     00 34 16 F2 | 	cmp	local12, ##55296 wc
1e81c     14 00 90 CD |  if_b	jmp	#LR__3401
1e820     19 37 32 F9 | 	getword	local13, local11, #0
1e824     70 00 00 FF 
1e828     00 36 16 F2 | 	cmp	local13, ##57344 wc
1e82c     19 2B 02 C6 |  if_b	mov	local07, local11
1e830                 | ' 					hs = wc; continue;
1e830     90 FF 9F CD |  if_b	jmp	#LR__3400
1e834                 | LR__3401
1e834     15 13 32 F9 | 	getword	arg01, local07, #0
1e838     10 12 66 F0 | 	shl	arg01, #16
1e83c     19 33 32 F9 | 	getword	local11, local11, #0
1e840     19 13 42 F5 | 	or	arg01, local11
1e844     13 15 02 F6 | 	mov	arg02, local05
1e848     1C 20 06 F1 | 	add	local02, #28
1e84c     10 15 02 F1 | 	add	arg02, local02
1e850     FF 16 06 F6 | 	mov	arg03, #255
1e854     13 17 82 F1 | 	sub	arg03, local05
1e858     1C 20 86 F1 | 	sub	local02, #28
1e85c     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
1e860     FD 38 0A F6 | 	mov	local14, result1 wz
1e864     00 26 06 A6 |  if_e	mov	local05, #0
1e868     1C 27 02 51 |  if_ne	add	local05, local14
1e86c     00 2A 06 56 |  if_ne	mov	local07, #0
1e870     50 FF 9F 5D |  if_ne	jmp	#LR__3400
1e874                 | LR__3402
1e874     15 25 02 F6 | 	mov	local04, local07
1e878     0F 24 4E F7 | 	zerox	local04, #15 wz
1e87c     00 26 06 56 |  if_ne	mov	local05, #0
1e880     1C 20 06 F1 | 	add	local02, #28
1e884     10 27 02 F1 | 	add	local05, local02
1e888     13 01 48 FC | 	wrbyte	#0, local05
1e88c     1C 20 86 F1 | 	sub	local02, #28
1e890                 | LR__3403
1e890     00 26 06 F6 | 	mov	local05, #0
1e894     00 28 06 F6 | 	mov	local06, #0
1e898                 | ' 			fno->fname[di] = 0;
1e898                 | ' 		}
1e898                 | ' 	}
1e898                 | ' 
1e898                 | ' 	si = di = 0;
1e898                 | ' 	while (si < 11) {
1e898                 | LR__3404
1e898     0B 28 16 F2 | 	cmp	local06, #11 wc
1e89c     20 01 90 3D |  if_ae	jmp	#LR__3407
1e8a0     1C 1E 06 F1 | 	add	local01, #28
1e8a4     0F 2F 02 FB | 	rdlong	local09, local01
1e8a8     1C 1E 86 F1 | 	sub	local01, #28
1e8ac     14 31 02 F6 | 	mov	local10, local06
1e8b0     17 31 02 F1 | 	add	local10, local09
1e8b4     18 33 C2 FA | 	rdbyte	local11, local10
1e8b8     19 25 32 F9 | 	getword	local04, local11, #0
1e8bc     20 24 0E F2 | 	cmp	local04, #32 wz
1e8c0     01 28 06 F1 | 	add	local06, #1
1e8c4     D0 FF 9F AD |  if_e	jmp	#LR__3404
1e8c8     19 25 32 F9 | 	getword	local04, local11, #0
1e8cc     05 24 0E F2 | 	cmp	local04, #5 wz
1e8d0     E5 32 06 A6 |  if_e	mov	local11, #229
1e8d4     09 28 0E F2 | 	cmp	local06, #9 wz
1e8d8     20 00 90 5D |  if_ne	jmp	#LR__3405
1e8dc     0C 26 16 F2 | 	cmp	local05, #12 wc
1e8e0     18 00 90 3D |  if_ae	jmp	#LR__3405
1e8e4     13 37 02 F6 | 	mov	local13, local05
1e8e8     0C 20 06 F1 | 	add	local02, #12
1e8ec     10 37 02 F1 | 	add	local13, local02
1e8f0     1B 5D 48 FC | 	wrbyte	#46, local13
1e8f4     01 26 06 F1 | 	add	local05, #1
1e8f8     0C 20 86 F1 | 	sub	local02, #12
1e8fc                 | LR__3405
1e8fc     19 13 32 F9 | 	getword	arg01, local11, #0
1e900     07 12 4E F7 | 	zerox	arg01, #7 wz
1e904     00 FA 05 56 |  if_ne	mov	result1, #0
1e908                 | ' 
1e908                 | ' 	return 0;
1e908     00 FA 05 A6 |  if_e	mov	result1, #0
1e90c     00 FA 0D F2 | 	cmp	result1, #0 wz
1e910     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
1e914     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
1e918     50 00 90 AD |  if_e	jmp	#LR__3406
1e91c     1C 1E 06 F1 | 	add	local01, #28
1e920     0F 31 02 FB | 	rdlong	local10, local01
1e924     1C 1E 86 F1 | 	sub	local01, #28
1e928     14 2D 02 F6 | 	mov	local08, local06
1e92c     18 2D 02 F1 | 	add	local08, local10
1e930     16 13 CA FA | 	rdbyte	arg01, local08 wz
1e934     00 FA 05 56 |  if_ne	mov	result1, #0
1e938                 | ' 
1e938                 | ' 	return 0;
1e938     00 FA 05 A6 |  if_e	mov	result1, #0
1e93c     00 FA 0D F2 | 	cmp	result1, #0 wz
1e940     28 00 90 AD |  if_e	jmp	#LR__3406
1e944     19 33 32 F9 | 	getword	local11, local11, #0
1e948     08 32 66 F0 | 	shl	local11, #8
1e94c     1C 1E 06 F1 | 	add	local01, #28
1e950     0F 39 02 FB | 	rdlong	local14, local01
1e954     1C 1E 86 F1 | 	sub	local01, #28
1e958     14 2F 02 F6 | 	mov	local09, local06
1e95c     1C 2F 02 F1 | 	add	local09, local14
1e960     17 35 C2 FA | 	rdbyte	local12, local09
1e964     1A 33 42 F5 | 	or	local11, local12
1e968     01 28 06 F1 | 	add	local06, #1
1e96c                 | LR__3406
1e96c     19 13 02 F6 | 	mov	arg01, local11
1e970     01 00 00 FF 
1e974     52 15 06 F6 | 	mov	arg02, ##850
1e978     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
1e97c     FD 32 02 F6 | 	mov	local11, result1
1e980     19 25 02 F6 | 	mov	local04, local11
1e984     0F 24 4E F7 | 	zerox	local04, #15 wz
1e988     00 26 06 A6 |  if_e	mov	local05, #0
1e98c     30 00 90 AD |  if_e	jmp	#LR__3407
1e990     19 13 32 F9 | 	getword	arg01, local11, #0
1e994     13 15 02 F6 | 	mov	arg02, local05
1e998     0C 20 06 F1 | 	add	local02, #12
1e99c     10 15 02 F1 | 	add	arg02, local02
1e9a0     0C 16 06 F6 | 	mov	arg03, #12
1e9a4     13 17 82 F1 | 	sub	arg03, local05
1e9a8     0C 20 86 F1 | 	sub	local02, #12
1e9ac     EC DF BF FD | 	call	#_fatfs_cc_put_utf
1e9b0     FD 38 0A F6 | 	mov	local14, result1 wz
1e9b4     00 26 06 A6 |  if_e	mov	local05, #0
1e9b8     1C 27 02 51 |  if_ne	add	local05, local14
1e9bc     D8 FE 9F 5D |  if_ne	jmp	#LR__3404
1e9c0                 | LR__3407
1e9c0     13 25 02 F6 | 	mov	local04, local05
1e9c4     0C 20 06 F1 | 	add	local02, #12
1e9c8     10 25 02 F1 | 	add	local04, local02
1e9cc     12 01 48 FC | 	wrbyte	#0, local04
1e9d0     10 20 06 F1 | 	add	local02, #16
1e9d4     10 25 CA FA | 	rdbyte	local04, local02 wz
1e9d8     1C 20 86 F1 | 	sub	local02, #28
1e9dc     F8 00 90 5D |  if_ne	jmp	#LR__3413
1e9e0     00 26 0E F2 | 	cmp	local05, #0 wz
1e9e4     1C 00 90 5D |  if_ne	jmp	#LR__3408
1e9e8     13 37 02 F6 | 	mov	local13, local05
1e9ec     1C 20 06 F1 | 	add	local02, #28
1e9f0     10 37 02 F1 | 	add	local13, local02
1e9f4     1B 7F 48 FC | 	wrbyte	#63, local13
1e9f8     01 26 06 F1 | 	add	local05, #1
1e9fc     1C 20 86 F1 | 	sub	local02, #28
1ea00     A4 00 90 FD | 	jmp	#LR__3412
1ea04                 | LR__3408
1ea04                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
1ea04     00 26 06 F6 | 	mov	local05, #0
1ea08     00 28 06 F6 | 	mov	local06, #0
1ea0c     08 3A 06 F6 | 	mov	local15, #8
1ea10                 | LR__3409
1ea10     14 25 02 F6 | 	mov	local04, local06
1ea14     0C 20 06 F1 | 	add	local02, #12
1ea18     10 25 02 F1 | 	add	local04, local02
1ea1c     12 37 CA FA | 	rdbyte	local13, local04 wz
1ea20     0C 20 86 F1 | 	sub	local02, #12
1ea24     80 00 90 AD |  if_e	jmp	#LR__3411
1ea28     14 2D 02 F6 | 	mov	local08, local06
1ea2c     0C 20 06 F1 | 	add	local02, #12
1ea30     10 2D 02 F1 | 	add	local08, local02
1ea34     16 33 C2 FA | 	rdbyte	local11, local08
1ea38     19 39 32 F9 | 	getword	local14, local11, #0
1ea3c     2E 38 0E F2 | 	cmp	local14, #46 wz
1ea40     0C 20 86 F1 | 	sub	local02, #12
1ea44     10 3A 06 A6 |  if_e	mov	local15, #16
1ea48     19 39 32 F9 | 	getword	local14, local11, #0
1ea4c     41 38 16 F2 | 	cmp	local14, #65 wc
1ea50     30 00 90 CD |  if_b	jmp	#LR__3410
1ea54     19 2D 32 F9 | 	getword	local08, local11, #0
1ea58     5B 2C 16 F2 | 	cmp	local08, #91 wc
1ea5c     24 00 90 3D |  if_ae	jmp	#LR__3410
1ea60     1C 1E 06 F1 | 	add	local01, #28
1ea64     0F 2F 02 FB | 	rdlong	local09, local01
1ea68     1C 1E 86 F1 | 	sub	local01, #28
1ea6c     0C 2E 06 F1 | 	add	local09, #12
1ea70     17 31 C2 FA | 	rdbyte	local10, local09
1ea74     1D 39 E2 F8 | 	getbyte	local14, local15, #0
1ea78     1C 31 CA F7 | 	test	local10, local14 wz
1ea7c     19 33 32 59 |  if_ne	getword	local11, local11, #0
1ea80     20 32 06 51 |  if_ne	add	local11, #32
1ea84                 | LR__3410
1ea84     13 39 02 F6 | 	mov	local14, local05
1ea88     1C 20 06 F1 | 	add	local02, #28
1ea8c     10 39 02 F1 | 	add	local14, local02
1ea90     19 33 32 F9 | 	getword	local11, local11, #0
1ea94     1C 33 42 FC | 	wrbyte	local11, local14
1ea98     01 28 06 F1 | 	add	local06, #1
1ea9c     01 26 06 F1 | 	add	local05, #1
1eaa0     1C 20 86 F1 | 	sub	local02, #28
1eaa4     68 FF 9F FD | 	jmp	#LR__3409
1eaa8                 | LR__3411
1eaa8                 | LR__3412
1eaa8     1C 20 06 F1 | 	add	local02, #28
1eaac     10 27 02 F1 | 	add	local05, local02
1eab0     13 01 48 FC | 	wrbyte	#0, local05
1eab4     1C 1E 06 F1 | 	add	local01, #28
1eab8     0F 25 02 FB | 	rdlong	local04, local01
1eabc     1C 1E 86 F1 | 	sub	local01, #28
1eac0     0C 24 06 F1 | 	add	local04, #12
1eac4     12 37 CA FA | 	rdbyte	local13, local04 wz
1eac8     1C 20 86 F1 | 	sub	local02, #28
1eacc     0C 20 06 A1 |  if_e	add	local02, #12
1ead0     10 01 48 AC |  if_e	wrbyte	#0, local02
1ead4     0C 20 86 A1 |  if_e	sub	local02, #12
1ead8                 | LR__3413
1ead8     1C 1E 06 F1 | 	add	local01, #28
1eadc     0F 35 02 FB | 	rdlong	local12, local01
1eae0     0B 34 06 F1 | 	add	local12, #11
1eae4     1A 25 C2 FA | 	rdbyte	local04, local12
1eae8     3F 24 06 F5 | 	and	local04, #63
1eaec     08 20 06 F1 | 	add	local02, #8
1eaf0     10 25 42 FC | 	wrbyte	local04, local02
1eaf4     08 20 86 F1 | 	sub	local02, #8
1eaf8     0F 13 02 FB | 	rdlong	arg01, local01
1eafc     1C 12 06 F1 | 	add	arg01, #28
1eb00                 | ' {
1eb00                 | ' 
1eb00                 | ' 	return *((DWORD*)ptr);
1eb00     09 FB 01 FB | 	rdlong	result1, arg01
1eb04     10 FB 61 FC | 	wrlong	result1, local02
1eb08     0F 13 02 FB | 	rdlong	arg01, local01
1eb0c     16 12 06 F1 | 	add	arg01, #22
1eb10                 | ' {
1eb10                 | ' 
1eb10                 | ' 	return *((WORD*)ptr);
1eb10     09 FB E1 FA | 	rdword	result1, arg01
1eb14     06 20 06 F1 | 	add	local02, #6
1eb18     10 FB 51 FC | 	wrword	result1, local02
1eb1c     0F 13 02 FB | 	rdlong	arg01, local01
1eb20     18 12 06 F1 | 	add	arg01, #24
1eb24                 | ' {
1eb24                 | ' 
1eb24                 | ' 	return *((WORD*)ptr);
1eb24     09 FB E1 FA | 	rdword	result1, arg01
1eb28     02 20 86 F1 | 	sub	local02, #2
1eb2c     10 FB 51 FC | 	wrword	result1, local02
1eb30                 | LR__3414
1eb30     A7 F0 03 F6 | 	mov	ptra, fp
1eb34     B2 00 A0 FD | 	call	#popregs_
1eb38                 | _fatfs_cc_get_fileinfo_ret
1eb38     2D 00 64 FD | 	ret
1eb3c                 | 
1eb3c                 | _fatfs_cc_create_name
1eb3c     0D 4A 05 F6 | 	mov	COUNT_, #13
1eb40     A8 00 A0 FD | 	call	#pushregs_
1eb44     34 F0 07 F1 | 	add	ptra, #52
1eb48     04 4E 05 F1 | 	add	fp, #4
1eb4c     A7 12 62 FC | 	wrlong	arg01, fp
1eb50     04 4E 05 F1 | 	add	fp, #4
1eb54     A7 14 62 FC | 	wrlong	arg02, fp
1eb58     0A FB 01 FB | 	rdlong	result1, arg02
1eb5c     28 4E 05 F1 | 	add	fp, #40
1eb60     A7 FA 61 FC | 	wrlong	result1, fp
1eb64     2C 4E 85 F1 | 	sub	fp, #44
1eb68     A7 FA 01 FB | 	rdlong	result1, fp
1eb6c     FD 1E 02 FB | 	rdlong	local01, result1
1eb70     0C 1E 06 F1 | 	add	local01, #12
1eb74     0F 21 02 FB | 	rdlong	local02, local01
1eb78     14 4E 05 F1 | 	add	fp, #20
1eb7c     A7 20 62 FC | 	wrlong	local02, fp
1eb80     14 4E 05 F1 | 	add	fp, #20
1eb84     A7 00 68 FC | 	wrlong	#0, fp
1eb88     2C 4E 85 F1 | 	sub	fp, #44
1eb8c                 | ' 
1eb8c                 | ' 
1eb8c                 | ' 
1eb8c                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
1eb8c                 | ' 	for (;;) {
1eb8c                 | LR__3420
1eb8c     30 4E 05 F1 | 	add	fp, #48
1eb90     A7 12 02 F6 | 	mov	arg01, fp
1eb94     30 4E 85 F1 | 	sub	fp, #48
1eb98     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
1eb9c     1C 4E 05 F1 | 	add	fp, #28
1eba0     A7 FA 61 FC | 	wrlong	result1, fp
1eba4     1C 4E 85 F1 | 	sub	fp, #28
1eba8     FF FF 7F FF 
1ebac     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1ebb0     06 FA 05 A6 |  if_e	mov	result1, #6
1ebb4     74 08 90 AD |  if_e	jmp	#LR__3460
1ebb8     1C 4E 05 F1 | 	add	fp, #28
1ebbc     A7 1E 02 FB | 	rdlong	local01, fp
1ebc0     1C 4E 85 F1 | 	sub	fp, #28
1ebc4     80 00 00 FF 
1ebc8     00 1E 16 F2 | 	cmp	local01, ##65536 wc
1ebcc     3C 00 90 CD |  if_b	jmp	#LR__3421
1ebd0     18 4E 05 F1 | 	add	fp, #24
1ebd4     A7 22 02 FB | 	rdlong	local03, fp
1ebd8     14 4E 05 F1 | 	add	fp, #20
1ebdc     A7 1E 02 FB | 	rdlong	local01, fp
1ebe0     0F 25 02 F6 | 	mov	local04, local01
1ebe4     01 24 06 F1 | 	add	local04, #1
1ebe8     A7 24 62 FC | 	wrlong	local04, fp
1ebec     01 1E 66 F0 | 	shl	local01, #1
1ebf0     11 1F 02 F1 | 	add	local01, local03
1ebf4     10 4E 85 F1 | 	sub	fp, #16
1ebf8     A7 26 02 FB | 	rdlong	local05, fp
1ebfc     1C 4E 85 F1 | 	sub	fp, #28
1ec00     13 29 02 F6 | 	mov	local06, local05
1ec04     10 28 46 F0 | 	shr	local06, #16
1ec08     0F 29 52 FC | 	wrword	local06, local01
1ec0c                 | LR__3421
1ec0c     1C 4E 05 F1 | 	add	fp, #28
1ec10     A7 1E 02 FB | 	rdlong	local01, fp
1ec14     08 4E 85 F1 | 	sub	fp, #8
1ec18     A7 1E 52 FC | 	wrword	local01, fp
1ec1c     A7 1E E2 FA | 	rdword	local01, fp
1ec20     14 4E 85 F1 | 	sub	fp, #20
1ec24     20 1E 16 F2 | 	cmp	local01, #32 wc
1ec28     B0 00 90 CD |  if_b	jmp	#LR__3423
1ec2c     14 4E 05 F1 | 	add	fp, #20
1ec30     A7 1E E2 FA | 	rdword	local01, fp
1ec34     14 4E 85 F1 | 	sub	fp, #20
1ec38     2F 1E 0E F2 | 	cmp	local01, #47 wz
1ec3c     14 4E 05 51 |  if_ne	add	fp, #20
1ec40     A7 24 E2 5A |  if_ne	rdword	local04, fp
1ec44     14 4E 85 51 |  if_ne	sub	fp, #20
1ec48     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
1ec4c     8C 00 90 AD |  if_e	jmp	#LR__3423
1ec50     14 4E 05 F1 | 	add	fp, #20
1ec54     A7 12 E2 FA | 	rdword	arg01, fp
1ec58     14 4E 85 F1 | 	sub	fp, #20
1ec5c     80 12 16 F2 | 	cmp	arg01, #128 wc
1ec60     24 00 90 3D |  if_ae	jmp	#LR__3422
1ec64     25 01 00 FF 
1ec68     9C 13 06 F6 | 	mov	arg01, ##@LR__4082
1ec6c     14 4E 05 F1 | 	add	fp, #20
1ec70     A7 14 E2 FA | 	rdword	arg02, fp
1ec74     14 4E 85 F1 | 	sub	fp, #20
1ec78     FC D0 BF FD | 	call	#_fatfs_cc_strchr
1ec7c     00 FA 0D F2 | 	cmp	result1, #0 wz
1ec80     06 FA 05 56 |  if_ne	mov	result1, #6
1ec84     A4 07 90 5D |  if_ne	jmp	#LR__3460
1ec88                 | LR__3422
1ec88     2C 4E 05 F1 | 	add	fp, #44
1ec8c     A7 28 02 FB | 	rdlong	local06, fp
1ec90     2C 4E 85 F1 | 	sub	fp, #44
1ec94     FF 28 16 F2 | 	cmp	local06, #255 wc
1ec98     06 FA 05 36 |  if_ae	mov	result1, #6
1ec9c     8C 07 90 3D |  if_ae	jmp	#LR__3460
1eca0     18 4E 05 F1 | 	add	fp, #24
1eca4     A7 22 02 FB | 	rdlong	local03, fp
1eca8     14 4E 05 F1 | 	add	fp, #20
1ecac     A7 20 02 FB | 	rdlong	local02, fp
1ecb0     10 25 02 F6 | 	mov	local04, local02
1ecb4     01 24 06 F1 | 	add	local04, #1
1ecb8     A7 24 62 FC | 	wrlong	local04, fp
1ecbc     10 1F 02 F6 | 	mov	local01, local02
1ecc0     01 1E 66 F0 | 	shl	local01, #1
1ecc4     11 1F 02 F1 | 	add	local01, local03
1ecc8     18 4E 85 F1 | 	sub	fp, #24
1eccc     A7 28 E2 FA | 	rdword	local06, fp
1ecd0     14 4E 85 F1 | 	sub	fp, #20
1ecd4     0F 29 52 FC | 	wrword	local06, local01
1ecd8     B0 FE 9F FD | 	jmp	#LR__3420
1ecdc                 | LR__3423
1ecdc     14 4E 05 F1 | 	add	fp, #20
1ece0     A7 2A E2 FA | 	rdword	local07, fp
1ece4     14 4E 85 F1 | 	sub	fp, #20
1ece8     20 2A 16 F2 | 	cmp	local07, #32 wc
1ecec     10 4E 05 C1 |  if_b	add	fp, #16
1ecf0     A7 08 48 CC |  if_b	wrbyte	#4, fp
1ecf4     10 4E 85 C1 |  if_b	sub	fp, #16
1ecf8     74 00 90 CD |  if_b	jmp	#LR__3428
1ecfc     97 24 48 FB | 	callpa	#(@LR__3426-@LR__3424)>>2,fcache_load_ptr_
1ed00                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
1ed00                 | LR__3424
1ed00     30 4E 05 F1 | 	add	fp, #48
1ed04     A7 24 02 FB | 	rdlong	local04, fp
1ed08     30 4E 85 F1 | 	sub	fp, #48
1ed0c     12 2B C2 FA | 	rdbyte	local07, local04
1ed10     2F 2A 0E F2 | 	cmp	local07, #47 wz
1ed14     18 00 90 AD |  if_e	jmp	#LR__3425
1ed18     30 4E 05 F1 | 	add	fp, #48
1ed1c     A7 24 02 FB | 	rdlong	local04, fp
1ed20     30 4E 85 F1 | 	sub	fp, #48
1ed24     12 21 C2 FA | 	rdbyte	local02, local04
1ed28     5C 20 0E F2 | 	cmp	local02, #92 wz
1ed2c     18 00 90 5D |  if_ne	jmp	#LR__3427
1ed30                 | LR__3425
1ed30     30 4E 05 F1 | 	add	fp, #48
1ed34     A7 1E 02 FB | 	rdlong	local01, fp
1ed38     01 1E 06 F1 | 	add	local01, #1
1ed3c     A7 1E 62 FC | 	wrlong	local01, fp
1ed40     30 4E 85 F1 | 	sub	fp, #48
1ed44     B8 FF 9F FD | 	jmp	#LR__3424
1ed48                 | LR__3426
1ed48                 | LR__3427
1ed48     10 4E 05 F1 | 	add	fp, #16
1ed4c     A7 00 48 FC | 	wrbyte	#0, fp
1ed50     20 4E 05 F1 | 	add	fp, #32
1ed54     A7 28 02 FB | 	rdlong	local06, fp
1ed58     30 4E 85 F1 | 	sub	fp, #48
1ed5c     14 2B C2 FA | 	rdbyte	local07, local06
1ed60     20 2A 16 F2 | 	cmp	local07, #32 wc
1ed64     10 4E 05 C1 |  if_b	add	fp, #16
1ed68     A7 08 48 CC |  if_b	wrbyte	#4, fp
1ed6c     10 4E 85 C1 |  if_b	sub	fp, #16
1ed70                 | LR__3428
1ed70     08 4E 05 F1 | 	add	fp, #8
1ed74     A7 2A 02 FB | 	rdlong	local07, fp
1ed78     28 4E 05 F1 | 	add	fp, #40
1ed7c     A7 1E 02 FB | 	rdlong	local01, fp
1ed80     30 4E 85 F1 | 	sub	fp, #48
1ed84     15 1F 62 FC | 	wrlong	local01, local07
1ed88     97 38 48 FB | 	callpa	#(@LR__3430-@LR__3429)>>2,fcache_load_ptr_
1ed8c                 | ' 	}
1ed8c                 | ' 	*path = p;
1ed8c                 | ' #line 2862 "ff.c"
1ed8c                 | ' 	while (di) {
1ed8c                 | LR__3429
1ed8c     2C 4E 05 F1 | 	add	fp, #44
1ed90     A7 2A 0A FB | 	rdlong	local07, fp wz
1ed94     2C 4E 85 F1 | 	sub	fp, #44
1ed98     60 00 90 AD |  if_e	jmp	#LR__3431
1ed9c     18 4E 05 F1 | 	add	fp, #24
1eda0     A7 28 02 FB | 	rdlong	local06, fp
1eda4     14 4E 05 F1 | 	add	fp, #20
1eda8     A7 24 02 FB | 	rdlong	local04, fp
1edac     01 24 86 F1 | 	sub	local04, #1
1edb0     01 24 66 F0 | 	shl	local04, #1
1edb4     14 25 02 F1 | 	add	local04, local06
1edb8     12 29 E2 FA | 	rdword	local06, local04
1edbc     18 4E 85 F1 | 	sub	fp, #24
1edc0     A7 28 52 FC | 	wrword	local06, fp
1edc4     A7 2A E2 FA | 	rdword	local07, fp
1edc8     14 4E 85 F1 | 	sub	fp, #20
1edcc     20 2A 0E F2 | 	cmp	local07, #32 wz
1edd0     14 4E 05 51 |  if_ne	add	fp, #20
1edd4     A7 1E E2 5A |  if_ne	rdword	local01, fp
1edd8     14 4E 85 51 |  if_ne	sub	fp, #20
1eddc     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
1ede0     18 00 90 5D |  if_ne	jmp	#LR__3431
1ede4     2C 4E 05 F1 | 	add	fp, #44
1ede8     A7 1E 02 FB | 	rdlong	local01, fp
1edec     01 1E 86 F1 | 	sub	local01, #1
1edf0     A7 1E 62 FC | 	wrlong	local01, fp
1edf4     2C 4E 85 F1 | 	sub	fp, #44
1edf8     90 FF 9F FD | 	jmp	#LR__3429
1edfc                 | LR__3430
1edfc                 | LR__3431
1edfc     18 4E 05 F1 | 	add	fp, #24
1ee00     A7 2C 02 FB | 	rdlong	local08, fp
1ee04     14 4E 05 F1 | 	add	fp, #20
1ee08     A7 24 02 FB | 	rdlong	local04, fp
1ee0c     01 24 66 F0 | 	shl	local04, #1
1ee10     16 25 02 F1 | 	add	local04, local08
1ee14     12 01 58 FC | 	wrword	#0, local04
1ee18     A7 2A 0A FB | 	rdlong	local07, fp wz
1ee1c     2C 4E 85 F1 | 	sub	fp, #44
1ee20     06 FA 05 A6 |  if_e	mov	result1, #6
1ee24     04 06 90 AD |  if_e	jmp	#LR__3460
1ee28                 | ' 
1ee28                 | ' 
1ee28                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
1ee28     28 4E 05 F1 | 	add	fp, #40
1ee2c     A7 00 68 FC | 	wrlong	#0, fp
1ee30     28 4E 85 F1 | 	sub	fp, #40
1ee34     97 22 48 FB | 	callpa	#(@LR__3433-@LR__3432)>>2,fcache_load_ptr_
1ee38                 | LR__3432
1ee38     18 4E 05 F1 | 	add	fp, #24
1ee3c     A7 2E 02 FB | 	rdlong	local09, fp
1ee40     10 4E 05 F1 | 	add	fp, #16
1ee44     A7 30 02 FB | 	rdlong	local10, fp
1ee48     28 4E 85 F1 | 	sub	fp, #40
1ee4c     01 30 66 F0 | 	shl	local10, #1
1ee50     17 31 02 F1 | 	add	local10, local09
1ee54     18 33 E2 FA | 	rdword	local11, local10
1ee58     20 32 0E F2 | 	cmp	local11, #32 wz
1ee5c     1C 00 90 5D |  if_ne	jmp	#LR__3434
1ee60     28 4E 05 F1 | 	add	fp, #40
1ee64     A7 34 02 FB | 	rdlong	local12, fp
1ee68     1A 27 02 F6 | 	mov	local05, local12
1ee6c     01 26 06 F1 | 	add	local05, #1
1ee70     A7 26 62 FC | 	wrlong	local05, fp
1ee74     28 4E 85 F1 | 	sub	fp, #40
1ee78     BC FF 9F FD | 	jmp	#LR__3432
1ee7c                 | LR__3433
1ee7c                 | LR__3434
1ee7c     28 4E 05 F1 | 	add	fp, #40
1ee80     A7 2A 02 FB | 	rdlong	local07, fp
1ee84     28 4E 85 F1 | 	sub	fp, #40
1ee88     01 2A 16 F2 | 	cmp	local07, #1 wc
1ee8c     28 00 90 3D |  if_ae	jmp	#LR__3435
1ee90     18 4E 05 F1 | 	add	fp, #24
1ee94     A7 22 02 FB | 	rdlong	local03, fp
1ee98     10 4E 05 F1 | 	add	fp, #16
1ee9c     A7 2E 02 FB | 	rdlong	local09, fp
1eea0     28 4E 85 F1 | 	sub	fp, #40
1eea4     01 2E 66 F0 | 	shl	local09, #1
1eea8     11 2F 02 F1 | 	add	local09, local03
1eeac     17 1F E2 FA | 	rdword	local01, local09
1eeb0     2E 1E 0E F2 | 	cmp	local01, #46 wz
1eeb4     14 00 90 5D |  if_ne	jmp	#LR__3436
1eeb8                 | LR__3435
1eeb8     10 4E 05 F1 | 	add	fp, #16
1eebc     A7 2A C2 FA | 	rdbyte	local07, fp
1eec0     03 2A 46 F5 | 	or	local07, #3
1eec4     A7 2A 42 FC | 	wrbyte	local07, fp
1eec8     10 4E 85 F1 | 	sub	fp, #16
1eecc                 | LR__3436
1eecc     97 2C 48 FB | 	callpa	#(@LR__3438-@LR__3437)>>2,fcache_load_ptr_
1eed0                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
1eed0                 | LR__3437
1eed0     2C 4E 05 F1 | 	add	fp, #44
1eed4     A7 2A 02 FB | 	rdlong	local07, fp
1eed8     2C 4E 85 F1 | 	sub	fp, #44
1eedc     01 2A 16 F2 | 	cmp	local07, #1 wc
1eee0     44 00 90 CD |  if_b	jmp	#LR__3439
1eee4     18 4E 05 F1 | 	add	fp, #24
1eee8     A7 28 02 FB | 	rdlong	local06, fp
1eeec     14 4E 05 F1 | 	add	fp, #20
1eef0     A7 22 02 FB | 	rdlong	local03, fp
1eef4     2C 4E 85 F1 | 	sub	fp, #44
1eef8     01 22 86 F1 | 	sub	local03, #1
1eefc     01 22 66 F0 | 	shl	local03, #1
1ef00     14 23 02 F1 | 	add	local03, local06
1ef04     11 1F E2 FA | 	rdword	local01, local03
1ef08     2E 1E 0E F2 | 	cmp	local01, #46 wz
1ef0c     18 00 90 AD |  if_e	jmp	#LR__3439
1ef10     2C 4E 05 F1 | 	add	fp, #44
1ef14     A7 1E 02 FB | 	rdlong	local01, fp
1ef18     01 1E 86 F1 | 	sub	local01, #1
1ef1c     A7 1E 62 FC | 	wrlong	local01, fp
1ef20     2C 4E 85 F1 | 	sub	fp, #44
1ef24     A8 FF 9F FD | 	jmp	#LR__3437
1ef28                 | LR__3438
1ef28                 | LR__3439
1ef28     04 4E 05 F1 | 	add	fp, #4
1ef2c     A7 12 02 FB | 	rdlong	arg01, fp
1ef30     04 4E 85 F1 | 	sub	fp, #4
1ef34     20 12 06 F1 | 	add	arg01, #32
1ef38     20 14 06 F6 | 	mov	arg02, #32
1ef3c     0B 16 06 F6 | 	mov	arg03, #11
1ef40     09 37 02 F6 | 	mov	local13, arg01
1ef44     98 00 A0 FD | 	call	#\builtin_bytefill_
1ef48     1B FB 01 F6 | 	mov	result1, local13
1ef4c     0C 4E 05 F1 | 	add	fp, #12
1ef50     A7 00 48 FC | 	wrbyte	#0, fp
1ef54     A7 2A C2 FA | 	rdbyte	local07, fp
1ef58     14 4E 05 F1 | 	add	fp, #20
1ef5c     A7 2A 62 FC | 	wrlong	local07, fp
1ef60     04 4E 05 F1 | 	add	fp, #4
1ef64     A7 10 68 FC | 	wrlong	#8, fp
1ef68     24 4E 85 F1 | 	sub	fp, #36
1ef6c                 | ' 
1ef6c                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
1ef6c                 | ' 	i = b = 0; ni = 8;
1ef6c                 | ' 	for (;;) {
1ef6c                 | LR__3440
1ef6c     18 4E 05 F1 | 	add	fp, #24
1ef70     A7 22 02 FB | 	rdlong	local03, fp
1ef74     10 4E 05 F1 | 	add	fp, #16
1ef78     A7 2E 02 FB | 	rdlong	local09, fp
1ef7c     17 25 02 F6 | 	mov	local04, local09
1ef80     01 24 06 F1 | 	add	local04, #1
1ef84     A7 24 62 FC | 	wrlong	local04, fp
1ef88     01 2E 66 F0 | 	shl	local09, #1
1ef8c     11 2F 02 F1 | 	add	local09, local03
1ef90     17 29 E2 FA | 	rdword	local06, local09
1ef94     14 4E 85 F1 | 	sub	fp, #20
1ef98     A7 28 52 FC | 	wrword	local06, fp
1ef9c     A7 2A EA FA | 	rdword	local07, fp wz
1efa0     14 4E 85 F1 | 	sub	fp, #20
1efa4     74 03 90 AD |  if_e	jmp	#LR__3456
1efa8     14 4E 05 F1 | 	add	fp, #20
1efac     A7 2A E2 FA | 	rdword	local07, fp
1efb0     14 4E 85 F1 | 	sub	fp, #20
1efb4     20 2A 0E F2 | 	cmp	local07, #32 wz
1efb8     30 00 90 AD |  if_e	jmp	#LR__3441
1efbc     14 4E 05 F1 | 	add	fp, #20
1efc0     A7 1E E2 FA | 	rdword	local01, fp
1efc4     14 4E 85 F1 | 	sub	fp, #20
1efc8     2E 1E 0E F2 | 	cmp	local01, #46 wz
1efcc     34 00 90 5D |  if_ne	jmp	#LR__3442
1efd0     28 4E 05 F1 | 	add	fp, #40
1efd4     A7 24 02 FB | 	rdlong	local04, fp
1efd8     04 4E 05 F1 | 	add	fp, #4
1efdc     A7 30 02 FB | 	rdlong	local10, fp
1efe0     2C 4E 85 F1 | 	sub	fp, #44
1efe4     18 25 0A F2 | 	cmp	local04, local10 wz
1efe8     18 00 90 AD |  if_e	jmp	#LR__3442
1efec                 | LR__3441
1efec     10 4E 05 F1 | 	add	fp, #16
1eff0     A7 2A C2 FA | 	rdbyte	local07, fp
1eff4     03 2A 46 F5 | 	or	local07, #3
1eff8     A7 2A 42 FC | 	wrbyte	local07, fp
1effc     10 4E 85 F1 | 	sub	fp, #16
1f000                 | ' 			cf |=  0x01  |  0x02 ;
1f000                 | ' 			continue;
1f000     68 FF 9F FD | 	jmp	#LR__3440
1f004                 | LR__3442
1f004     20 4E 05 F1 | 	add	fp, #32
1f008     A7 2A 02 FB | 	rdlong	local07, fp
1f00c     04 4E 05 F1 | 	add	fp, #4
1f010     A7 1E 02 FB | 	rdlong	local01, fp
1f014     24 4E 85 F1 | 	sub	fp, #36
1f018     0F 2B 12 F2 | 	cmp	local07, local01 wc
1f01c     1C 00 90 3D |  if_ae	jmp	#LR__3443
1f020     28 4E 05 F1 | 	add	fp, #40
1f024     A7 2C 02 FB | 	rdlong	local08, fp
1f028     04 4E 05 F1 | 	add	fp, #4
1f02c     A7 30 02 FB | 	rdlong	local10, fp
1f030     2C 4E 85 F1 | 	sub	fp, #44
1f034     18 2D 0A F2 | 	cmp	local08, local10 wz
1f038     B0 00 90 5D |  if_ne	jmp	#LR__3445
1f03c                 | LR__3443
1f03c     24 4E 05 F1 | 	add	fp, #36
1f040     A7 2A 02 FB | 	rdlong	local07, fp
1f044     24 4E 85 F1 | 	sub	fp, #36
1f048     0B 2A 0E F2 | 	cmp	local07, #11 wz
1f04c     18 00 90 5D |  if_ne	jmp	#LR__3444
1f050     10 4E 05 F1 | 	add	fp, #16
1f054     A7 2A C2 FA | 	rdbyte	local07, fp
1f058     03 2A 46 F5 | 	or	local07, #3
1f05c     A7 2A 42 FC | 	wrbyte	local07, fp
1f060     10 4E 85 F1 | 	sub	fp, #16
1f064                 | ' 				cf |=  0x01  |  0x02 ;
1f064                 | ' 				break;
1f064     B4 02 90 FD | 	jmp	#LR__3456
1f068                 | LR__3444
1f068     28 4E 05 F1 | 	add	fp, #40
1f06c     A7 2A 02 FB | 	rdlong	local07, fp
1f070     04 4E 05 F1 | 	add	fp, #4
1f074     A7 1E 02 FB | 	rdlong	local01, fp
1f078     2C 4E 85 F1 | 	sub	fp, #44
1f07c     0F 2B 0A F2 | 	cmp	local07, local01 wz
1f080     10 4E 05 51 |  if_ne	add	fp, #16
1f084     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
1f088     03 2A 46 55 |  if_ne	or	local07, #3
1f08c     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
1f090     10 4E 85 51 |  if_ne	sub	fp, #16
1f094     28 4E 05 F1 | 	add	fp, #40
1f098     A7 2A 02 FB | 	rdlong	local07, fp
1f09c     04 4E 05 F1 | 	add	fp, #4
1f0a0     A7 20 02 FB | 	rdlong	local02, fp
1f0a4     2C 4E 85 F1 | 	sub	fp, #44
1f0a8     10 2B 1A F2 | 	cmp	local07, local02 wcz
1f0ac     6C 02 90 1D |  if_a	jmp	#LR__3456
1f0b0     2C 4E 05 F1 | 	add	fp, #44
1f0b4     A7 2A 02 FB | 	rdlong	local07, fp
1f0b8     04 4E 85 F1 | 	sub	fp, #4
1f0bc     A7 2A 62 FC | 	wrlong	local07, fp
1f0c0     08 4E 85 F1 | 	sub	fp, #8
1f0c4     A7 10 68 FC | 	wrlong	#8, fp
1f0c8     04 4E 05 F1 | 	add	fp, #4
1f0cc     A7 16 68 FC | 	wrlong	#11, fp
1f0d0     18 4E 85 F1 | 	sub	fp, #24
1f0d4     A7 32 C2 FA | 	rdbyte	local11, fp
1f0d8     19 2B E2 F8 | 	getbyte	local07, local11, #0
1f0dc     02 2A 66 F0 | 	shl	local07, #2
1f0e0     A7 2A 42 FC | 	wrbyte	local07, fp
1f0e4     0C 4E 85 F1 | 	sub	fp, #12
1f0e8                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
1f0e8                 | ' 			continue;
1f0e8     80 FE 9F FD | 	jmp	#LR__3440
1f0ec                 | LR__3445
1f0ec     14 4E 05 F1 | 	add	fp, #20
1f0f0     A7 2A E2 FA | 	rdword	local07, fp
1f0f4     14 4E 85 F1 | 	sub	fp, #20
1f0f8     80 2A 16 F2 | 	cmp	local07, #128 wc
1f0fc     6C 00 90 CD |  if_b	jmp	#LR__3447
1f100     10 4E 05 F1 | 	add	fp, #16
1f104     A7 2A C2 FA | 	rdbyte	local07, fp
1f108     02 2A 46 F5 | 	or	local07, #2
1f10c     A7 2A 42 FC | 	wrbyte	local07, fp
1f110     04 4E 05 F1 | 	add	fp, #4
1f114     A7 12 E2 FA | 	rdword	arg01, fp
1f118     14 4E 85 F1 | 	sub	fp, #20
1f11c     01 00 00 FF 
1f120     52 15 06 F6 | 	mov	arg02, ##850
1f124     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
1f128     14 4E 05 F1 | 	add	fp, #20
1f12c     A7 FA 51 FC | 	wrword	result1, fp
1f130     A7 2A E2 FA | 	rdword	local07, fp
1f134     14 4E 85 F1 | 	sub	fp, #20
1f138     80 2A CE F7 | 	test	local07, #128 wz
1f13c     2C 00 90 AD |  if_e	jmp	#LR__3446
1f140     14 4E 05 F1 | 	add	fp, #20
1f144     A7 20 E2 FA | 	rdword	local02, fp
1f148     7F 20 06 F5 | 	and	local02, #127
1f14c     01 00 00 FF 
1f150     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
1f154     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
1f158     10 2B C2 FA | 	rdbyte	local07, local02
1f15c     A7 2A 52 FC | 	wrword	local07, fp
1f160     14 4E 85 F1 | 	sub	fp, #20
1f164     01 00 00 FF 
1f168     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
1f16c                 | LR__3446
1f16c                 | LR__3447
1f16c     14 4E 05 F1 | 	add	fp, #20
1f170     A7 2A E2 FA | 	rdword	local07, fp
1f174     14 4E 85 F1 | 	sub	fp, #20
1f178     00 2B 16 F2 | 	cmp	local07, #256 wc
1f17c     88 00 90 CD |  if_b	jmp	#LR__3449
1f180     24 4E 05 F1 | 	add	fp, #36
1f184     A7 2A 02 FB | 	rdlong	local07, fp
1f188     01 2A 86 F1 | 	sub	local07, #1
1f18c     04 4E 85 F1 | 	sub	fp, #4
1f190     A7 20 02 FB | 	rdlong	local02, fp
1f194     20 4E 85 F1 | 	sub	fp, #32
1f198     15 21 12 F2 | 	cmp	local02, local07 wc
1f19c     2C 00 90 CD |  if_b	jmp	#LR__3448
1f1a0     10 4E 05 F1 | 	add	fp, #16
1f1a4     A7 32 C2 FA | 	rdbyte	local11, fp
1f1a8     19 2B E2 F8 | 	getbyte	local07, local11, #0
1f1ac     03 2A 46 F5 | 	or	local07, #3
1f1b0     A7 2A 42 FC | 	wrbyte	local07, fp
1f1b4     14 4E 05 F1 | 	add	fp, #20
1f1b8     A7 2A 02 FB | 	rdlong	local07, fp
1f1bc     04 4E 85 F1 | 	sub	fp, #4
1f1c0     A7 2A 62 FC | 	wrlong	local07, fp
1f1c4     20 4E 85 F1 | 	sub	fp, #32
1f1c8                 | ' 				cf |=  0x01  |  0x02 ;
1f1c8                 | ' 				i = ni; continue;
1f1c8     A0 FD 9F FD | 	jmp	#LR__3440
1f1cc                 | LR__3448
1f1cc     04 4E 05 F1 | 	add	fp, #4
1f1d0     A7 2E 02 FB | 	rdlong	local09, fp
1f1d4     1C 4E 05 F1 | 	add	fp, #28
1f1d8     A7 30 02 FB | 	rdlong	local10, fp
1f1dc     18 25 02 F6 | 	mov	local04, local10
1f1e0     01 24 06 F1 | 	add	local04, #1
1f1e4     A7 24 62 FC | 	wrlong	local04, fp
1f1e8     20 2E 06 F1 | 	add	local09, #32
1f1ec     17 31 02 F1 | 	add	local10, local09
1f1f0     0C 4E 85 F1 | 	sub	fp, #12
1f1f4     A7 22 E2 FA | 	rdword	local03, fp
1f1f8     14 4E 85 F1 | 	sub	fp, #20
1f1fc     08 22 46 F0 | 	shr	local03, #8
1f200     18 23 42 FC | 	wrbyte	local03, local10
1f204     D4 00 90 FD | 	jmp	#LR__3455
1f208                 | LR__3449
1f208     14 4E 05 F1 | 	add	fp, #20
1f20c     A7 2A EA FA | 	rdword	local07, fp wz
1f210     14 4E 85 F1 | 	sub	fp, #20
1f214     20 00 90 AD |  if_e	jmp	#LR__3450
1f218     25 01 00 FF 
1f21c     A5 13 06 F6 | 	mov	arg01, ##@LR__4083
1f220     14 4E 05 F1 | 	add	fp, #20
1f224     A7 14 E2 FA | 	rdword	arg02, fp
1f228     14 4E 85 F1 | 	sub	fp, #20
1f22c     48 CB BF FD | 	call	#_fatfs_cc_strchr
1f230     00 FA 0D F2 | 	cmp	result1, #0 wz
1f234     20 00 90 AD |  if_e	jmp	#LR__3451
1f238                 | LR__3450
1f238     14 4E 05 F1 | 	add	fp, #20
1f23c     A7 BE 58 FC | 	wrword	#95, fp
1f240     04 4E 85 F1 | 	sub	fp, #4
1f244     A7 2A C2 FA | 	rdbyte	local07, fp
1f248     03 2A 46 F5 | 	or	local07, #3
1f24c     A7 2A 42 FC | 	wrbyte	local07, fp
1f250     10 4E 85 F1 | 	sub	fp, #16
1f254     84 00 90 FD | 	jmp	#LR__3454
1f258                 | LR__3451
1f258     14 4E 05 F1 | 	add	fp, #20
1f25c     A7 2A E2 FA | 	rdword	local07, fp
1f260     14 4E 85 F1 | 	sub	fp, #20
1f264     41 2A 16 F2 | 	cmp	local07, #65 wc
1f268     24 00 90 CD |  if_b	jmp	#LR__3452
1f26c     14 4E 05 F1 | 	add	fp, #20
1f270     A7 1E E2 FA | 	rdword	local01, fp
1f274     14 4E 85 F1 | 	sub	fp, #20
1f278     5B 1E 16 F2 | 	cmp	local01, #91 wc
1f27c     0C 4E 05 C1 |  if_b	add	fp, #12
1f280     A7 2A C2 CA |  if_b	rdbyte	local07, fp
1f284     02 2A 46 C5 |  if_b	or	local07, #2
1f288     A7 2A 42 CC |  if_b	wrbyte	local07, fp
1f28c     0C 4E 85 C1 |  if_b	sub	fp, #12
1f290                 | LR__3452
1f290     14 4E 05 F1 | 	add	fp, #20
1f294     A7 2A E2 FA | 	rdword	local07, fp
1f298     14 4E 85 F1 | 	sub	fp, #20
1f29c     61 2A 16 F2 | 	cmp	local07, #97 wc
1f2a0     38 00 90 CD |  if_b	jmp	#LR__3453
1f2a4     14 4E 05 F1 | 	add	fp, #20
1f2a8     A7 1E E2 FA | 	rdword	local01, fp
1f2ac     14 4E 85 F1 | 	sub	fp, #20
1f2b0     7B 1E 16 F2 | 	cmp	local01, #123 wc
1f2b4     24 00 90 3D |  if_ae	jmp	#LR__3453
1f2b8     0C 4E 05 F1 | 	add	fp, #12
1f2bc     A7 2A C2 FA | 	rdbyte	local07, fp
1f2c0     01 2A 46 F5 | 	or	local07, #1
1f2c4     A7 2A 42 FC | 	wrbyte	local07, fp
1f2c8     08 4E 05 F1 | 	add	fp, #8
1f2cc     A7 2A E2 FA | 	rdword	local07, fp
1f2d0     20 2A 86 F1 | 	sub	local07, #32
1f2d4     A7 2A 52 FC | 	wrword	local07, fp
1f2d8     14 4E 85 F1 | 	sub	fp, #20
1f2dc                 | LR__3453
1f2dc                 | LR__3454
1f2dc                 | LR__3455
1f2dc     04 4E 05 F1 | 	add	fp, #4
1f2e0     A7 32 02 FB | 	rdlong	local11, fp
1f2e4     19 2F 02 F6 | 	mov	local09, local11
1f2e8     1C 4E 05 F1 | 	add	fp, #28
1f2ec     A7 20 02 FB | 	rdlong	local02, fp
1f2f0     10 25 02 F6 | 	mov	local04, local02
1f2f4     01 24 06 F1 | 	add	local04, #1
1f2f8     A7 24 62 FC | 	wrlong	local04, fp
1f2fc     10 31 02 F6 | 	mov	local10, local02
1f300     20 2E 06 F1 | 	add	local09, #32
1f304     17 31 02 F1 | 	add	local10, local09
1f308     0C 4E 85 F1 | 	sub	fp, #12
1f30c     A7 22 E2 FA | 	rdword	local03, fp
1f310     14 4E 85 F1 | 	sub	fp, #20
1f314     18 23 42 FC | 	wrbyte	local03, local10
1f318     50 FC 9F FD | 	jmp	#LR__3440
1f31c                 | LR__3456
1f31c     04 4E 05 F1 | 	add	fp, #4
1f320     A7 32 02 FB | 	rdlong	local11, fp
1f324     04 4E 85 F1 | 	sub	fp, #4
1f328     20 32 06 F1 | 	add	local11, #32
1f32c     19 2B C2 FA | 	rdbyte	local07, local11
1f330     E5 2A 0E F2 | 	cmp	local07, #229 wz
1f334     04 4E 05 A1 |  if_e	add	fp, #4
1f338     A7 2A 02 AB |  if_e	rdlong	local07, fp
1f33c     04 4E 85 A1 |  if_e	sub	fp, #4
1f340     20 2A 06 A1 |  if_e	add	local07, #32
1f344     15 0B 48 AC |  if_e	wrbyte	#5, local07
1f348     24 4E 05 F1 | 	add	fp, #36
1f34c     A7 2A 02 FB | 	rdlong	local07, fp
1f350     24 4E 85 F1 | 	sub	fp, #36
1f354     08 2A 0E F2 | 	cmp	local07, #8 wz
1f358     0C 4E 05 A1 |  if_e	add	fp, #12
1f35c     A7 2A C2 AA |  if_e	rdbyte	local07, fp
1f360     02 2A 66 A0 |  if_e	shl	local07, #2
1f364     A7 2A 42 AC |  if_e	wrbyte	local07, fp
1f368     0C 4E 85 A1 |  if_e	sub	fp, #12
1f36c     0C 4E 05 F1 | 	add	fp, #12
1f370     A7 2A C2 FA | 	rdbyte	local07, fp
1f374     0C 4E 85 F1 | 	sub	fp, #12
1f378     0C 2A 06 F5 | 	and	local07, #12
1f37c     0C 2A 0E F2 | 	cmp	local07, #12 wz
1f380     18 00 90 AD |  if_e	jmp	#LR__3457
1f384     0C 4E 05 F1 | 	add	fp, #12
1f388     A7 1E C2 FA | 	rdbyte	local01, fp
1f38c     0C 4E 85 F1 | 	sub	fp, #12
1f390     03 1E 06 F5 | 	and	local01, #3
1f394     03 1E 0E F2 | 	cmp	local01, #3 wz
1f398     14 00 90 5D |  if_ne	jmp	#LR__3458
1f39c                 | LR__3457
1f39c     10 4E 05 F1 | 	add	fp, #16
1f3a0     A7 2A C2 FA | 	rdbyte	local07, fp
1f3a4     02 2A 46 F5 | 	or	local07, #2
1f3a8     A7 2A 42 FC | 	wrbyte	local07, fp
1f3ac     10 4E 85 F1 | 	sub	fp, #16
1f3b0                 | LR__3458
1f3b0     10 4E 05 F1 | 	add	fp, #16
1f3b4     A7 2A C2 FA | 	rdbyte	local07, fp
1f3b8     10 4E 85 F1 | 	sub	fp, #16
1f3bc     02 2A CE F7 | 	test	local07, #2 wz
1f3c0     48 00 90 5D |  if_ne	jmp	#LR__3459
1f3c4     0C 4E 05 F1 | 	add	fp, #12
1f3c8     A7 2A C2 FA | 	rdbyte	local07, fp
1f3cc     0C 4E 85 F1 | 	sub	fp, #12
1f3d0     01 2A CE F7 | 	test	local07, #1 wz
1f3d4     10 4E 05 51 |  if_ne	add	fp, #16
1f3d8     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
1f3dc     10 2A 46 55 |  if_ne	or	local07, #16
1f3e0     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
1f3e4     10 4E 85 51 |  if_ne	sub	fp, #16
1f3e8     0C 4E 05 F1 | 	add	fp, #12
1f3ec     A7 2A C2 FA | 	rdbyte	local07, fp
1f3f0     0C 4E 85 F1 | 	sub	fp, #12
1f3f4     04 2A CE F7 | 	test	local07, #4 wz
1f3f8     10 4E 05 51 |  if_ne	add	fp, #16
1f3fc     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
1f400     08 2A 46 55 |  if_ne	or	local07, #8
1f404     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
1f408     10 4E 85 51 |  if_ne	sub	fp, #16
1f40c                 | LR__3459
1f40c     04 4E 05 F1 | 	add	fp, #4
1f410     A7 2A 02 FB | 	rdlong	local07, fp
1f414     0C 4E 05 F1 | 	add	fp, #12
1f418     A7 1E C2 FA | 	rdbyte	local01, fp
1f41c     10 4E 85 F1 | 	sub	fp, #16
1f420     2B 2A 06 F1 | 	add	local07, #43
1f424     15 1F 42 FC | 	wrbyte	local01, local07
1f428                 | ' 	}
1f428                 | ' 
1f428                 | ' 	dp->fn[ 11 ] = cf;
1f428                 | ' 
1f428                 | ' 	return FR_OK;
1f428     00 FA 05 F6 | 	mov	result1, #0
1f42c                 | LR__3460
1f42c     A7 F0 03 F6 | 	mov	ptra, fp
1f430     B2 00 A0 FD | 	call	#popregs_
1f434                 | _fatfs_cc_create_name_ret
1f434     2D 00 64 FD | 	ret
1f438                 | 
1f438                 | _fatfs_cc_follow_path
1f438     02 4A 05 F6 | 	mov	COUNT_, #2
1f43c     A8 00 A0 FD | 	call	#pushregs_
1f440     18 F0 07 F1 | 	add	ptra, #24
1f444     04 4E 05 F1 | 	add	fp, #4
1f448     A7 12 62 FC | 	wrlong	arg01, fp
1f44c     04 4E 05 F1 | 	add	fp, #4
1f450     A7 14 62 FC | 	wrlong	arg02, fp
1f454     04 4E 85 F1 | 	sub	fp, #4
1f458     A7 FA 01 FB | 	rdlong	result1, fp
1f45c     FD 1E 02 FB | 	rdlong	local01, result1
1f460     10 4E 05 F1 | 	add	fp, #16
1f464     A7 1E 62 FC | 	wrlong	local01, fp
1f468     14 4E 85 F1 | 	sub	fp, #20
1f46c     97 24 48 FB | 	callpa	#(@LR__3472-@LR__3470)>>2,fcache_load_ptr_
1f470                 | ' )
1f470                 | ' {
1f470                 | ' 	FRESULT res;
1f470                 | ' 	BYTE ns;
1f470                 | ' 	FATFS *fs = dp->obj.fs;
1f470                 | ' #line 3034 "ff.c"
1f470                 | ' 	{
1f470                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
1f470                 | LR__3470
1f470     08 4E 05 F1 | 	add	fp, #8
1f474     A7 1E 02 FB | 	rdlong	local01, fp
1f478     08 4E 85 F1 | 	sub	fp, #8
1f47c     0F 1F C2 FA | 	rdbyte	local01, local01
1f480     2F 1E 0E F2 | 	cmp	local01, #47 wz
1f484     18 00 90 AD |  if_e	jmp	#LR__3471
1f488     08 4E 05 F1 | 	add	fp, #8
1f48c     A7 1E 02 FB | 	rdlong	local01, fp
1f490     08 4E 85 F1 | 	sub	fp, #8
1f494     0F 1F C2 FA | 	rdbyte	local01, local01
1f498     5C 1E 0E F2 | 	cmp	local01, #92 wz
1f49c     18 00 90 5D |  if_ne	jmp	#LR__3473
1f4a0                 | LR__3471
1f4a0     08 4E 05 F1 | 	add	fp, #8
1f4a4     A7 1E 02 FB | 	rdlong	local01, fp
1f4a8     01 1E 06 F1 | 	add	local01, #1
1f4ac     A7 1E 62 FC | 	wrlong	local01, fp
1f4b0     08 4E 85 F1 | 	sub	fp, #8
1f4b4     B8 FF 9F FD | 	jmp	#LR__3470
1f4b8                 | LR__3472
1f4b8                 | LR__3473
1f4b8     04 4E 05 F1 | 	add	fp, #4
1f4bc     A7 1E 02 FB | 	rdlong	local01, fp
1f4c0     08 1E 06 F1 | 	add	local01, #8
1f4c4     0F 01 68 FC | 	wrlong	#0, local01
1f4c8     04 4E 05 F1 | 	add	fp, #4
1f4cc     A7 1E 02 FB | 	rdlong	local01, fp
1f4d0     08 4E 85 F1 | 	sub	fp, #8
1f4d4     0F 1F C2 FA | 	rdbyte	local01, local01
1f4d8     20 1E 16 F2 | 	cmp	local01, #32 wc
1f4dc     30 00 90 3D |  if_ae	jmp	#LR__3474
1f4e0     04 4E 05 F1 | 	add	fp, #4
1f4e4     A7 1E 02 FB | 	rdlong	local01, fp
1f4e8     2B 1E 06 F1 | 	add	local01, #43
1f4ec     0F 01 49 FC | 	wrbyte	#128, local01
1f4f0     A7 12 02 FB | 	rdlong	arg01, fp
1f4f4     04 4E 85 F1 | 	sub	fp, #4
1f4f8     00 14 06 F6 | 	mov	arg02, #0
1f4fc     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
1f500     0C 4E 05 F1 | 	add	fp, #12
1f504     A7 FA 61 FC | 	wrlong	result1, fp
1f508     0C 4E 85 F1 | 	sub	fp, #12
1f50c     1C 01 90 FD | 	jmp	#LR__3478
1f510                 | LR__3474
1f510                 | ' 		for (;;) {
1f510                 | LR__3475
1f510     04 4E 05 F1 | 	add	fp, #4
1f514     A7 12 02 FB | 	rdlong	arg01, fp
1f518     04 4E 05 F1 | 	add	fp, #4
1f51c     A7 14 02 F6 | 	mov	arg02, fp
1f520     08 4E 85 F1 | 	sub	fp, #8
1f524     14 F6 BF FD | 	call	#_fatfs_cc_create_name
1f528     0C 4E 05 F1 | 	add	fp, #12
1f52c     A7 FA 61 FC | 	wrlong	result1, fp
1f530     00 FA 4D F2 | 	cmps	result1, #0 wz
1f534     0C 4E 85 F1 | 	sub	fp, #12
1f538     F0 00 90 5D |  if_ne	jmp	#LR__3477
1f53c     04 4E 05 F1 | 	add	fp, #4
1f540     A7 12 02 FB | 	rdlong	arg01, fp
1f544     04 4E 85 F1 | 	sub	fp, #4
1f548     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
1f54c     0C 4E 05 F1 | 	add	fp, #12
1f550     A7 FA 61 FC | 	wrlong	result1, fp
1f554     08 4E 85 F1 | 	sub	fp, #8
1f558     A7 1E 02 FB | 	rdlong	local01, fp
1f55c     2B 1E 06 F1 | 	add	local01, #43
1f560     0F 1F C2 FA | 	rdbyte	local01, local01
1f564     0C 4E 05 F1 | 	add	fp, #12
1f568     A7 1E 42 FC | 	wrbyte	local01, fp
1f56c     04 4E 85 F1 | 	sub	fp, #4
1f570     A7 1E 0A FB | 	rdlong	local01, fp wz
1f574     0C 4E 85 F1 | 	sub	fp, #12
1f578     34 00 90 AD |  if_e	jmp	#LR__3476
1f57c     0C 4E 05 F1 | 	add	fp, #12
1f580     A7 1E 02 FB | 	rdlong	local01, fp
1f584     0C 4E 85 F1 | 	sub	fp, #12
1f588     04 1E 0E F2 | 	cmp	local01, #4 wz
1f58c     9C 00 90 5D |  if_ne	jmp	#LR__3477
1f590     10 4E 05 F1 | 	add	fp, #16
1f594     A7 1E C2 FA | 	rdbyte	local01, fp
1f598     10 4E 85 F1 | 	sub	fp, #16
1f59c     04 1E CE F7 | 	test	local01, #4 wz
1f5a0     0C 4E 05 A1 |  if_e	add	fp, #12
1f5a4     A7 0A 68 AC |  if_e	wrlong	#5, fp
1f5a8     0C 4E 85 A1 |  if_e	sub	fp, #12
1f5ac                 | ' 					}
1f5ac                 | ' 				}
1f5ac                 | ' 				break;
1f5ac     7C 00 90 FD | 	jmp	#LR__3477
1f5b0                 | LR__3476
1f5b0     10 4E 05 F1 | 	add	fp, #16
1f5b4     A7 1E C2 FA | 	rdbyte	local01, fp
1f5b8     10 4E 85 F1 | 	sub	fp, #16
1f5bc     04 1E CE F7 | 	test	local01, #4 wz
1f5c0     68 00 90 5D |  if_ne	jmp	#LR__3477
1f5c4     04 4E 05 F1 | 	add	fp, #4
1f5c8     A7 1E 02 FB | 	rdlong	local01, fp
1f5cc     04 4E 85 F1 | 	sub	fp, #4
1f5d0     06 1E 06 F1 | 	add	local01, #6
1f5d4     0F 1F C2 FA | 	rdbyte	local01, local01
1f5d8     10 1E CE F7 | 	test	local01, #16 wz
1f5dc     0C 4E 05 A1 |  if_e	add	fp, #12
1f5e0     A7 0A 68 AC |  if_e	wrlong	#5, fp
1f5e4     0C 4E 85 A1 |  if_e	sub	fp, #12
1f5e8                 | ' 				res = FR_NO_PATH; break;
1f5e8     40 00 90 AD |  if_e	jmp	#LR__3477
1f5ec     04 4E 05 F1 | 	add	fp, #4
1f5f0     A7 20 02 FB | 	rdlong	local02, fp
1f5f4     10 1F 02 F6 | 	mov	local01, local02
1f5f8     10 4E 05 F1 | 	add	fp, #16
1f5fc     A7 14 02 FB | 	rdlong	arg02, fp
1f600     0A 13 02 F6 | 	mov	arg01, arg02
1f604     34 14 06 F1 | 	add	arg02, #52
1f608     14 4E 85 F1 | 	sub	fp, #20
1f60c     10 20 06 F1 | 	add	local02, #16
1f610     10 21 02 FB | 	rdlong	local02, local02
1f614     FF 21 06 F5 | 	and	local02, #511
1f618     10 15 02 F1 | 	add	arg02, local02
1f61c     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
1f620     08 1E 06 F1 | 	add	local01, #8
1f624     0F FB 61 FC | 	wrlong	result1, local01
1f628     E4 FE 9F FD | 	jmp	#LR__3475
1f62c                 | LR__3477
1f62c                 | LR__3478
1f62c                 | ' 			}
1f62c                 | ' #line 3090 "ff.c"
1f62c                 | ' 			{
1f62c                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
1f62c                 | ' 			}
1f62c                 | ' 		}
1f62c                 | ' 	}
1f62c                 | ' 
1f62c                 | ' 	return res;
1f62c     0C 4E 05 F1 | 	add	fp, #12
1f630     A7 FA 01 FB | 	rdlong	result1, fp
1f634     0C 4E 85 F1 | 	sub	fp, #12
1f638     A7 F0 03 F6 | 	mov	ptra, fp
1f63c     B2 00 A0 FD | 	call	#popregs_
1f640                 | _fatfs_cc_follow_path_ret
1f640     2D 00 64 FD | 	ret
1f644                 | 
1f644                 | _fatfs_cc_get_ldnumber
1f644     01 00 66 F6 | 	neg	_var01, #1
1f648     09 03 0A FB | 	rdlong	_var02, arg01 wz
1f64c     01 05 02 F6 | 	mov	_var03, _var02
1f650     01 FA 65 A6 |  if_e	neg	result1, #1
1f654     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
1f658     97 10 48 FB | 	callpa	#(@LR__3481-@LR__3480)>>2,fcache_load_ptr_
1f65c                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
1f65c                 | LR__3480
1f65c     02 07 C2 FA | 	rdbyte	_var04, _var03
1f660     03 FB E1 F8 | 	getbyte	result1, _var04, #0
1f664     20 FA 15 F2 | 	cmp	result1, #32 wc
1f668     01 04 06 F1 | 	add	_var03, #1
1f66c     03 09 02 36 |  if_ae	mov	_var05, _var04
1f670     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
1f674     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
1f678     E0 FF 9F 1D |  if_a	jmp	#LR__3480
1f67c                 | LR__3481
1f67c     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
1f680     3A 06 0E F2 | 	cmp	_var04, #58 wz
1f684     40 00 90 5D |  if_ne	jmp	#LR__3483
1f688     01 0A 06 F6 | 	mov	_var06, #1
1f68c     01 09 C2 FA | 	rdbyte	_var05, _var02
1f690     30 08 16 F2 | 	cmp	_var05, #48 wc
1f694     1C 00 90 CD |  if_b	jmp	#LR__3482
1f698     01 09 C2 FA | 	rdbyte	_var05, _var02
1f69c     3A 08 16 F2 | 	cmp	_var05, #58 wc
1f6a0     01 0D 02 C6 |  if_b	mov	_var07, _var02
1f6a4     02 0C 06 C1 |  if_b	add	_var07, #2
1f6a8     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
1f6ac     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
1f6b0     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
1f6b4                 | LR__3482
1f6b4     01 0A 56 F2 | 	cmps	_var06, #1 wc
1f6b8     05 01 02 C6 |  if_b	mov	_var01, _var06
1f6bc     09 05 62 CC |  if_b	wrlong	_var03, arg01
1f6c0                 | ' 			vol = i;
1f6c0                 | ' 			*path = tt;
1f6c0                 | ' 		}
1f6c0                 | ' 		return vol;
1f6c0     00 FB 01 F6 | 	mov	result1, _var01
1f6c4     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
1f6c8                 | LR__3483
1f6c8                 | ' 	}
1f6c8                 | ' #line 3170 "ff.c"
1f6c8                 | ' 	vol = 0;
1f6c8                 | ' 
1f6c8                 | ' 	return vol;
1f6c8     00 FA 05 F6 | 	mov	result1, #0
1f6cc                 | _fatfs_cc_get_ldnumber_ret
1f6cc     2D 00 64 FD | 	ret
1f6d0                 | 
1f6d0                 | _fatfs_cc_check_fs
1f6d0     04 4A 05 F6 | 	mov	COUNT_, #4
1f6d4     A8 00 A0 FD | 	call	#pushregs_
1f6d8     09 1F 02 F6 | 	mov	local01, arg01
1f6dc     03 1E 06 F1 | 	add	local01, #3
1f6e0     0F 01 48 FC | 	wrbyte	#0, local01
1f6e4     2D 1E 06 F1 | 	add	local01, #45
1f6e8     FF FF FF FF 
1f6ec     0F FF 6B FC | 	wrlong	##-1, local01
1f6f0     30 1E 86 F1 | 	sub	local01, #48
1f6f4     0F 13 02 F6 | 	mov	arg01, local01
1f6f8     18 D5 BF FD | 	call	#_fatfs_cc_move_window
1f6fc     00 FA 0D F2 | 	cmp	result1, #0 wz
1f700     04 FA 05 56 |  if_ne	mov	result1, #4
1f704     94 01 90 5D |  if_ne	jmp	#LR__3494
1f708     34 1E 06 F1 | 	add	local01, #52
1f70c     0F 13 02 F6 | 	mov	arg01, local01
1f710     FE 13 06 F1 | 	add	arg01, #510
1f714                 | ' {
1f714                 | ' 
1f714                 | ' 	return *((WORD*)ptr);
1f714     09 21 E2 FA | 	rdword	local02, arg01
1f718     0F 23 C2 FA | 	rdbyte	local03, local01
1f71c     34 1E 86 F1 | 	sub	local01, #52
1f720     11 25 E2 F8 | 	getbyte	local04, local03, #0
1f724     EB 24 0E F2 | 	cmp	local04, #235 wz
1f728     11 17 02 56 |  if_ne	mov	arg03, local03
1f72c     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
1f730     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
1f734     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
1f738     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
1f73c     44 01 90 5D |  if_ne	jmp	#LR__3493
1f740     10 25 32 F9 | 	getword	local04, local02, #0
1f744     55 00 00 FF 
1f748     55 24 0E F2 | 	cmp	local04, ##43605 wz
1f74c     2C 00 90 5D |  if_ne	jmp	#LR__3490
1f750     34 1E 06 F1 | 	add	local01, #52
1f754     0F 13 02 F6 | 	mov	arg01, local01
1f758     34 1E 86 F1 | 	sub	local01, #52
1f75c     52 12 06 F1 | 	add	arg01, #82
1f760     25 01 00 FF 
1f764     AC 15 06 F6 | 	mov	arg02, ##@LR__4084
1f768     08 16 06 F6 | 	mov	arg03, #8
1f76c     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
1f770     00 FA 0D F2 | 	cmp	result1, #0 wz
1f774                 | ' 			return 0;
1f774     00 FA 05 A6 |  if_e	mov	result1, #0
1f778     20 01 90 AD |  if_e	jmp	#LR__3494
1f77c                 | LR__3490
1f77c     34 1E 06 F1 | 	add	local01, #52
1f780     0F 13 02 F6 | 	mov	arg01, local01
1f784     0B 12 06 F1 | 	add	arg01, #11
1f788                 | ' {
1f788                 | ' 
1f788                 | ' 	return *((WORD*)ptr);
1f788     09 FB E1 FA | 	rdword	result1, arg01
1f78c     0D 1E 06 F1 | 	add	local01, #13
1f790     0F 23 C2 FA | 	rdbyte	local03, local01
1f794     41 1E 86 F1 | 	sub	local01, #65
1f798     FD 24 32 F9 | 	getword	local04, result1, #0
1f79c     FD 14 32 F9 | 	getword	arg02, result1, #0
1f7a0     01 14 86 F1 | 	sub	arg02, #1
1f7a4     0A 25 CA F7 | 	test	local04, arg02 wz
1f7a8     D8 00 90 5D |  if_ne	jmp	#LR__3492
1f7ac     FD 14 32 F9 | 	getword	arg02, result1, #0
1f7b0     01 00 00 FF 
1f7b4     00 14 16 F2 | 	cmp	arg02, ##512 wc
1f7b8     C8 00 90 CD |  if_b	jmp	#LR__3492
1f7bc     FD 14 32 F9 | 	getword	arg02, result1, #0
1f7c0     01 00 00 FF 
1f7c4     01 14 16 F2 | 	cmp	arg02, ##513 wc
1f7c8     B8 00 90 3D |  if_ae	jmp	#LR__3492
1f7cc     11 13 02 F6 | 	mov	arg01, local03
1f7d0     07 12 4E F7 | 	zerox	arg01, #7 wz
1f7d4     AC 00 90 AD |  if_e	jmp	#LR__3492
1f7d8     11 13 E2 F8 | 	getbyte	arg01, local03, #0
1f7dc     11 23 E2 F8 | 	getbyte	local03, local03, #0
1f7e0     01 22 86 F1 | 	sub	local03, #1
1f7e4     11 13 CA F7 | 	test	arg01, local03 wz
1f7e8     98 00 90 5D |  if_ne	jmp	#LR__3492
1f7ec     34 1E 06 F1 | 	add	local01, #52
1f7f0     0F 13 02 F6 | 	mov	arg01, local01
1f7f4     34 1E 86 F1 | 	sub	local01, #52
1f7f8     0E 12 06 F1 | 	add	arg01, #14
1f7fc                 | ' {
1f7fc                 | ' 
1f7fc                 | ' 	return *((WORD*)ptr);
1f7fc     09 FB E9 FA | 	rdword	result1, arg01 wz
1f800     80 00 90 AD |  if_e	jmp	#LR__3492
1f804     44 1E 06 F1 | 	add	local01, #68
1f808     0F 13 C2 FA | 	rdbyte	arg01, local01
1f80c     44 1E 86 F1 | 	sub	local01, #68
1f810     01 12 86 F1 | 	sub	arg01, #1
1f814     02 12 16 F2 | 	cmp	arg01, #2 wc
1f818     68 00 90 3D |  if_ae	jmp	#LR__3492
1f81c     34 1E 06 F1 | 	add	local01, #52
1f820     0F 13 02 F6 | 	mov	arg01, local01
1f824     34 1E 86 F1 | 	sub	local01, #52
1f828     11 12 06 F1 | 	add	arg01, #17
1f82c                 | ' {
1f82c                 | ' 
1f82c                 | ' 	return *((WORD*)ptr);
1f82c     09 FB E9 FA | 	rdword	result1, arg01 wz
1f830     50 00 90 AD |  if_e	jmp	#LR__3492
1f834     34 1E 06 F1 | 	add	local01, #52
1f838     0F 13 02 F6 | 	mov	arg01, local01
1f83c     34 1E 86 F1 | 	sub	local01, #52
1f840     13 12 06 F1 | 	add	arg01, #19
1f844                 | ' {
1f844                 | ' 
1f844                 | ' 	return *((WORD*)ptr);
1f844     09 FB E1 FA | 	rdword	result1, arg01
1f848     FD 22 32 F9 | 	getword	local03, result1, #0
1f84c     80 22 16 F2 | 	cmp	local03, #128 wc
1f850     20 00 90 3D |  if_ae	jmp	#LR__3491
1f854     34 1E 06 F1 | 	add	local01, #52
1f858     0F 13 02 F6 | 	mov	arg01, local01
1f85c     34 1E 86 F1 | 	sub	local01, #52
1f860     20 12 06 F1 | 	add	arg01, #32
1f864                 | ' {
1f864                 | ' 
1f864                 | ' 	return *((DWORD*)ptr);
1f864     09 FB 01 FB | 	rdlong	result1, arg01
1f868     80 00 00 FF 
1f86c     00 FA 15 F2 | 	cmp	result1, ##65536 wc
1f870     10 00 90 CD |  if_b	jmp	#LR__3492
1f874                 | LR__3491
1f874     4A 1E 06 F1 | 	add	local01, #74
1f878                 | ' {
1f878                 | ' 
1f878                 | ' 	return *((WORD*)ptr);
1f878     0F FB E9 FA | 	rdword	result1, local01 wz
1f87c                 | ' 			&& b != 0 && (b & (b - 1)) == 0
1f87c                 | ' 			&& ld_word(fs->win +  14 ) != 0
1f87c                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
1f87c                 | ' 			&& ld_word(fs->win +  17 ) != 0
1f87c                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
1f87c                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
1f87c                 | ' 				return 0;
1f87c     00 FA 05 56 |  if_ne	mov	result1, #0
1f880     18 00 90 5D |  if_ne	jmp	#LR__3494
1f884                 | LR__3492
1f884                 | LR__3493
1f884                 | ' 		}
1f884                 | ' 	}
1f884                 | ' 	return sign == 0xAA55 ? 2 : 3;
1f884     10 23 32 F9 | 	getword	local03, local02, #0
1f888     55 00 00 FF 
1f88c     55 22 0E F2 | 	cmp	local03, ##43605 wz
1f890     02 24 06 A6 |  if_e	mov	local04, #2
1f894     03 24 06 56 |  if_ne	mov	local04, #3
1f898     12 FB 01 F6 | 	mov	result1, local04
1f89c                 | LR__3494
1f89c     A7 F0 03 F6 | 	mov	ptra, fp
1f8a0     B2 00 A0 FD | 	call	#popregs_
1f8a4                 | _fatfs_cc_check_fs_ret
1f8a4     2D 00 64 FD | 	ret
1f8a8                 | 
1f8a8                 | _fatfs_cc_find_volume
1f8a8     05 4A 05 F6 | 	mov	COUNT_, #5
1f8ac     A8 00 A0 FD | 	call	#pushregs_
1f8b0     24 F0 07 F1 | 	add	ptra, #36
1f8b4     09 1F 02 F6 | 	mov	local01, arg01
1f8b8     0A 21 02 F6 | 	mov	local02, arg02
1f8bc     0F 13 02 F6 | 	mov	arg01, local01
1f8c0     00 14 06 F6 | 	mov	arg02, #0
1f8c4     08 FE BF FD | 	call	#_fatfs_cc_check_fs
1f8c8     02 FA 0D F2 | 	cmp	result1, #2 wz
1f8cc     0C 00 90 AD |  if_e	jmp	#LR__3500
1f8d0     03 FA 15 F2 | 	cmp	result1, #3 wc
1f8d4     00 20 0E C2 |  if_b	cmp	local02, #0 wz
1f8d8     D0 00 90 BD |  if_nc_or_z	jmp	#LR__3508
1f8dc                 | LR__3500
1f8dc                 | ' 	for (i = 0; i < 4; i++) {
1f8dc     00 22 06 F6 | 	mov	local03, #0
1f8e0     97 26 48 FB | 	callpa	#(@LR__3502-@LR__3501)>>2,fcache_load_ptr_
1f8e4                 | LR__3501
1f8e4     04 22 16 F2 | 	cmp	local03, #4 wc
1f8e8     44 00 90 3D |  if_ae	jmp	#LR__3503
1f8ec     11 25 02 F6 | 	mov	local04, local03
1f8f0     02 24 66 F0 | 	shl	local04, #2
1f8f4     14 4E 05 F1 | 	add	fp, #20
1f8f8     A7 24 02 F1 | 	add	local04, fp
1f8fc     34 1E 06 F1 | 	add	local01, #52
1f900     0F 13 02 F6 | 	mov	arg01, local01
1f904     34 1E 86 F1 | 	sub	local01, #52
1f908     BE 13 06 F1 | 	add	arg01, #446
1f90c     11 15 02 F6 | 	mov	arg02, local03
1f910     04 14 66 F0 | 	shl	arg02, #4
1f914     0A 13 02 F1 | 	add	arg01, arg02
1f918     08 12 06 F1 | 	add	arg01, #8
1f91c                 | ' {
1f91c                 | ' 
1f91c                 | ' 	return *((DWORD*)ptr);
1f91c     09 FB 01 FB | 	rdlong	result1, arg01
1f920     14 4E 85 F1 | 	sub	fp, #20
1f924     12 FB 61 FC | 	wrlong	result1, local04
1f928     01 22 06 F1 | 	add	local03, #1
1f92c     B4 FF 9F FD | 	jmp	#LR__3501
1f930                 | LR__3502
1f930                 | LR__3503
1f930     00 20 0E F2 | 	cmp	local02, #0 wz
1f934     10 25 02 56 |  if_ne	mov	local04, local02
1f938     01 24 86 51 |  if_ne	sub	local04, #1
1f93c     00 24 06 A6 |  if_e	mov	local04, #0
1f940     12 23 02 F6 | 	mov	local03, local04
1f944                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
1f944                 | ' 	}
1f944                 | ' 	i = part ? part - 1 : 0;
1f944                 | ' 	do {
1f944                 | LR__3504
1f944     11 25 02 F6 | 	mov	local04, local03
1f948     02 24 66 F0 | 	shl	local04, #2
1f94c     14 4E 05 F1 | 	add	fp, #20
1f950     A7 24 02 F1 | 	add	local04, fp
1f954     12 25 0A FB | 	rdlong	local04, local04 wz
1f958     14 4E 85 F1 | 	sub	fp, #20
1f95c     28 00 90 AD |  if_e	jmp	#LR__3505
1f960     11 25 02 F6 | 	mov	local04, local03
1f964     02 24 66 F0 | 	shl	local04, #2
1f968     14 4E 05 F1 | 	add	fp, #20
1f96c     A7 24 02 F1 | 	add	local04, fp
1f970     12 15 02 FB | 	rdlong	arg02, local04
1f974     0F 13 02 F6 | 	mov	arg01, local01
1f978     14 4E 85 F1 | 	sub	fp, #20
1f97c     50 FD BF FD | 	call	#_fatfs_cc_check_fs
1f980     FD 24 02 F6 | 	mov	local04, result1
1f984     04 00 90 FD | 	jmp	#LR__3506
1f988                 | LR__3505
1f988     03 24 06 F6 | 	mov	local04, #3
1f98c                 | LR__3506
1f98c     12 27 02 F6 | 	mov	local05, local04
1f990     00 20 0E F2 | 	cmp	local02, #0 wz
1f994     02 26 16 A2 |  if_e	cmp	local05, #2 wc
1f998     0C 00 90 8D |  if_c_and_z	jmp	#LR__3507
1f99c     01 22 06 A1 |  if_e	add	local03, #1
1f9a0     04 22 16 A2 |  if_e	cmp	local03, #4 wc
1f9a4     9C FF 9F 8D |  if_c_and_z	jmp	#LR__3504
1f9a8                 | LR__3507
1f9a8                 | ' 	return fmt;
1f9a8     13 FB 01 F6 | 	mov	result1, local05
1f9ac                 | LR__3508
1f9ac     A7 F0 03 F6 | 	mov	ptra, fp
1f9b0     B2 00 A0 FD | 	call	#popregs_
1f9b4                 | _fatfs_cc_find_volume_ret
1f9b4     2D 00 64 FD | 	ret
1f9b8                 | 
1f9b8                 | _fatfs_cc_mount_volume
1f9b8     0B 4A 05 F6 | 	mov	COUNT_, #11
1f9bc     A8 00 A0 FD | 	call	#pushregs_
1f9c0     0A 1F 02 F6 | 	mov	local01, arg02
1f9c4     0B 21 02 F6 | 	mov	local02, arg03
1f9c8     0F 01 68 FC | 	wrlong	#0, local01
1f9cc     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
1f9d0     FD 22 02 F6 | 	mov	local03, result1
1f9d4     00 22 56 F2 | 	cmps	local03, #0 wc
1f9d8     0B FA 05 C6 |  if_b	mov	result1, #11
1f9dc     3C 05 90 CD |  if_b	jmp	#LR__3520
1f9e0     11 17 02 F6 | 	mov	arg03, local03
1f9e4     02 16 66 F0 | 	shl	arg03, #2
1f9e8     F2 16 02 F1 | 	add	arg03, objptr
1f9ec     0B 25 0A FB | 	rdlong	local04, arg03 wz
1f9f0     0C FA 05 A6 |  if_e	mov	result1, #12
1f9f4     24 05 90 AD |  if_e	jmp	#LR__3520
1f9f8     0F 25 62 FC | 	wrlong	local04, local01
1f9fc     10 21 E2 F8 | 	getbyte	local02, local02, #0
1fa00     FE 20 06 F5 | 	and	local02, #254
1fa04     12 17 CA FA | 	rdbyte	arg03, local04 wz
1fa08     4C 00 90 AD |  if_e	jmp	#LR__3511
1fa0c     01 24 06 F1 | 	add	local04, #1
1fa10     12 13 CA FA | 	rdbyte	arg01, local04 wz
1fa14     01 24 86 F1 | 	sub	local04, #1
1fa18     01 FA 05 56 |  if_ne	mov	result1, #1
1fa1c                 | ' 
1fa1c                 | ' 	return Stat;
1fa1c     01 00 00 AF 
1fa20     20 E4 05 A1 |  if_e	add	objptr, ##544
1fa24     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1fa28     01 00 00 AF 
1fa2c     20 E4 85 A1 |  if_e	sub	objptr, ##544
1fa30     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
1fa34     01 16 CE F7 | 	test	arg03, #1 wz
1fa38     1C 00 90 5D |  if_ne	jmp	#LR__3510
1fa3c     00 20 0E F2 | 	cmp	local02, #0 wz
1fa40     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
1fa44     04 FA CD 57 |  if_ne	test	result1, #4 wz
1fa48                 | ' 				return FR_WRITE_PROTECTED;
1fa48     0A FA 05 56 |  if_ne	mov	result1, #10
1fa4c     CC 04 90 5D |  if_ne	jmp	#LR__3520
1fa50                 | ' 			}
1fa50                 | ' 			return FR_OK;
1fa50     00 FA 05 F6 | 	mov	result1, #0
1fa54     C4 04 90 FD | 	jmp	#LR__3520
1fa58                 | LR__3510
1fa58                 | LR__3511
1fa58     12 01 48 FC | 	wrbyte	#0, local04
1fa5c     01 24 06 F1 | 	add	local04, #1
1fa60     12 23 42 FC | 	wrbyte	local03, local04
1fa64     12 13 C2 FA | 	rdbyte	arg01, local04
1fa68     01 24 86 F1 | 	sub	local04, #1
1fa6c     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
1fa70     FD 16 02 F6 | 	mov	arg03, result1
1fa74     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
1fa78     01 26 CE F7 | 	test	local05, #1 wz
1fa7c                 | ' 		return FR_NOT_READY;
1fa7c     03 FA 05 56 |  if_ne	mov	result1, #3
1fa80     98 04 90 5D |  if_ne	jmp	#LR__3520
1fa84     00 20 0E F2 | 	cmp	local02, #0 wz
1fa88     0B 27 02 56 |  if_ne	mov	local05, arg03
1fa8c     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
1fa90     04 26 CE 57 |  if_ne	test	local05, #4 wz
1fa94                 | ' 		return FR_WRITE_PROTECTED;
1fa94     0A FA 05 56 |  if_ne	mov	result1, #10
1fa98     80 04 90 5D |  if_ne	jmp	#LR__3520
1fa9c     12 13 02 F6 | 	mov	arg01, local04
1faa0     00 14 06 F6 | 	mov	arg02, #0
1faa4     00 FE BF FD | 	call	#_fatfs_cc_find_volume
1faa8     FD 12 02 F6 | 	mov	arg01, result1
1faac     04 12 0E F2 | 	cmp	arg01, #4 wz
1fab0     01 FA 05 A6 |  if_e	mov	result1, #1
1fab4     64 04 90 AD |  if_e	jmp	#LR__3520
1fab8     02 12 16 F2 | 	cmp	arg01, #2 wc
1fabc     0D FA 05 36 |  if_ae	mov	result1, #13
1fac0     58 04 90 3D |  if_ae	jmp	#LR__3520
1fac4     30 24 06 F1 | 	add	local04, #48
1fac8     12 29 02 FB | 	rdlong	local06, local04
1facc     04 24 06 F1 | 	add	local04, #4
1fad0     12 13 02 F6 | 	mov	arg01, local04
1fad4     34 24 86 F1 | 	sub	local04, #52
1fad8     0B 12 06 F1 | 	add	arg01, #11
1fadc                 | ' {
1fadc                 | ' 
1fadc                 | ' 	return *((WORD*)ptr);
1fadc     09 FB E1 FA | 	rdword	result1, arg01
1fae0     01 00 00 FF 
1fae4     00 FA 0D F2 | 	cmp	result1, ##512 wz
1fae8     0D FA 05 56 |  if_ne	mov	result1, #13
1faec     2C 04 90 5D |  if_ne	jmp	#LR__3520
1faf0     34 24 06 F1 | 	add	local04, #52
1faf4     12 13 02 F6 | 	mov	arg01, local04
1faf8     34 24 86 F1 | 	sub	local04, #52
1fafc     16 12 06 F1 | 	add	arg01, #22
1fb00                 | ' {
1fb00                 | ' 
1fb00                 | ' 	return *((WORD*)ptr);
1fb00     09 FB E1 FA | 	rdword	result1, arg01
1fb04     FD 2A 0A F6 | 	mov	local07, result1 wz
1fb08     18 00 90 5D |  if_ne	jmp	#LR__3512
1fb0c     34 24 06 F1 | 	add	local04, #52
1fb10     12 13 02 F6 | 	mov	arg01, local04
1fb14     34 24 86 F1 | 	sub	local04, #52
1fb18     24 12 06 F1 | 	add	arg01, #36
1fb1c                 | ' {
1fb1c                 | ' 
1fb1c                 | ' 	return *((DWORD*)ptr);
1fb1c     09 FB 01 FB | 	rdlong	result1, arg01
1fb20     FD 2A 02 F6 | 	mov	local07, result1
1fb24                 | LR__3512
1fb24     1C 24 06 F1 | 	add	local04, #28
1fb28     12 2B 62 FC | 	wrlong	local07, local04
1fb2c     28 24 06 F1 | 	add	local04, #40
1fb30     12 27 C2 FA | 	rdbyte	local05, local04
1fb34     42 24 86 F1 | 	sub	local04, #66
1fb38     12 27 42 FC | 	wrbyte	local05, local04
1fb3c     12 27 C2 FA | 	rdbyte	local05, local04
1fb40     02 24 86 F1 | 	sub	local04, #2
1fb44     01 26 0E F2 | 	cmp	local05, #1 wz
1fb48     02 24 06 51 |  if_ne	add	local04, #2
1fb4c     12 27 C2 5A |  if_ne	rdbyte	local05, local04
1fb50     02 24 86 51 |  if_ne	sub	local04, #2
1fb54     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
1fb58     0D FA 05 56 |  if_ne	mov	result1, #13
1fb5c     BC 03 90 5D |  if_ne	jmp	#LR__3520
1fb60     02 24 06 F1 | 	add	local04, #2
1fb64     12 27 C2 FA | 	rdbyte	local05, local04
1fb68     13 2B 02 FD | 	qmul	local07, local05
1fb6c     3F 24 06 F1 | 	add	local04, #63
1fb70     12 27 C2 FA | 	rdbyte	local05, local04
1fb74     37 24 86 F1 | 	sub	local04, #55
1fb78     12 27 52 FC | 	wrword	local05, local04
1fb7c     12 27 EA FA | 	rdword	local05, local04 wz
1fb80     0A 24 86 F1 | 	sub	local04, #10
1fb84     18 2A 62 FD | 	getqx	local07
1fb88     20 00 90 AD |  if_e	jmp	#LR__3513
1fb8c     0A 24 06 F1 | 	add	local04, #10
1fb90     12 27 E2 FA | 	rdword	local05, local04
1fb94     13 23 32 F9 | 	getword	local03, local05, #0
1fb98     0A 24 86 F1 | 	sub	local04, #10
1fb9c     13 27 32 F9 | 	getword	local05, local05, #0
1fba0     01 26 86 F1 | 	sub	local05, #1
1fba4     13 23 CA F7 | 	test	local03, local05 wz
1fba8     08 00 90 AD |  if_e	jmp	#LR__3514
1fbac                 | LR__3513
1fbac     0D FA 05 F6 | 	mov	result1, #13
1fbb0     68 03 90 FD | 	jmp	#LR__3520
1fbb4                 | LR__3514
1fbb4     34 24 06 F1 | 	add	local04, #52
1fbb8     12 13 02 F6 | 	mov	arg01, local04
1fbbc     11 12 06 F1 | 	add	arg01, #17
1fbc0                 | ' {
1fbc0                 | ' 
1fbc0                 | ' 	return *((WORD*)ptr);
1fbc0     09 FB E1 FA | 	rdword	result1, arg01
1fbc4     2C 24 86 F1 | 	sub	local04, #44
1fbc8     12 FB 51 FC | 	wrword	result1, local04
1fbcc     12 27 E2 FA | 	rdword	local05, local04
1fbd0     08 24 86 F1 | 	sub	local04, #8
1fbd4     13 13 52 F6 | 	abs	arg01, local05 wc
1fbd8     09 13 42 F8 | 	getnib	arg01, arg01, #0
1fbdc     09 13 8A F6 | 	negc	arg01, arg01 wz
1fbe0     0D FA 05 56 |  if_ne	mov	result1, #13
1fbe4     34 03 90 5D |  if_ne	jmp	#LR__3520
1fbe8     34 24 06 F1 | 	add	local04, #52
1fbec     12 13 02 F6 | 	mov	arg01, local04
1fbf0     34 24 86 F1 | 	sub	local04, #52
1fbf4     13 12 06 F1 | 	add	arg01, #19
1fbf8                 | ' {
1fbf8                 | ' 
1fbf8                 | ' 	return *((WORD*)ptr);
1fbf8     09 FB E1 FA | 	rdword	result1, arg01
1fbfc     FD 2C 0A F6 | 	mov	local08, result1 wz
1fc00     34 24 06 A1 |  if_e	add	local04, #52
1fc04     12 13 02 A6 |  if_e	mov	arg01, local04
1fc08     34 24 86 A1 |  if_e	sub	local04, #52
1fc0c     20 12 06 A1 |  if_e	add	arg01, #32
1fc10                 | ' {
1fc10                 | ' 
1fc10                 | ' 	return *((DWORD*)ptr);
1fc10     09 2D 02 AB |  if_e	rdlong	local08, arg01
1fc14     34 24 06 F1 | 	add	local04, #52
1fc18     12 13 02 F6 | 	mov	arg01, local04
1fc1c     34 24 86 F1 | 	sub	local04, #52
1fc20     0E 12 06 F1 | 	add	arg01, #14
1fc24                 | ' {
1fc24                 | ' 
1fc24                 | ' 	return *((WORD*)ptr);
1fc24     09 FB E1 FA | 	rdword	result1, arg01
1fc28     FD 12 02 F6 | 	mov	arg01, result1
1fc2c     09 27 02 F6 | 	mov	local05, arg01
1fc30     0F 26 4E F7 | 	zerox	local05, #15 wz
1fc34     0D FA 05 A6 |  if_e	mov	result1, #13
1fc38     E0 02 90 AD |  if_e	jmp	#LR__3520
1fc3c     09 2F 32 F9 | 	getword	local09, arg01, #0
1fc40     15 2F 02 F1 | 	add	local09, local07
1fc44     08 24 06 F1 | 	add	local04, #8
1fc48     12 27 E2 FA | 	rdword	local05, local04
1fc4c     08 24 86 F1 | 	sub	local04, #8
1fc50     13 27 52 F6 | 	abs	local05, local05 wc
1fc54     04 26 46 F0 | 	shr	local05, #4
1fc58     13 2F 82 F3 | 	sumc	local09, local05
1fc5c     17 2D 12 F2 | 	cmp	local08, local09 wc
1fc60     0D FA 05 C6 |  if_b	mov	result1, #13
1fc64     B4 02 90 CD |  if_b	jmp	#LR__3520
1fc68     17 2D 82 F1 | 	sub	local08, local09
1fc6c     0A 24 06 F1 | 	add	local04, #10
1fc70     12 27 E2 FA | 	rdword	local05, local04
1fc74     13 2D 12 FD | 	qdiv	local08, local05
1fc78     0A 24 86 F1 | 	sub	local04, #10
1fc7c     18 26 62 FD | 	getqx	local05
1fc80     00 26 0E F2 | 	cmp	local05, #0 wz
1fc84     0D FA 05 A6 |  if_e	mov	result1, #13
1fc88     90 02 90 AD |  if_e	jmp	#LR__3520
1fc8c     00 30 06 F6 | 	mov	local10, #0
1fc90     FF FF 07 FF 
1fc94     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
1fc98     03 30 06 C6 |  if_b	mov	local10, #3
1fc9c     7F 00 00 FF 
1fca0     F6 27 16 F2 | 	cmp	local05, ##65526 wc
1fca4     02 30 06 C6 |  if_b	mov	local10, #2
1fca8     07 00 00 FF 
1fcac     F6 27 16 F2 | 	cmp	local05, ##4086 wc
1fcb0     01 30 06 C6 |  if_b	mov	local10, #1
1fcb4     00 30 0E F2 | 	cmp	local10, #0 wz
1fcb8     0D FA 05 A6 |  if_e	mov	result1, #13
1fcbc     5C 02 90 AD |  if_e	jmp	#LR__3520
1fcc0     02 26 06 F1 | 	add	local05, #2
1fcc4     18 24 06 F1 | 	add	local04, #24
1fcc8     12 27 62 FC | 	wrlong	local05, local04
1fccc     08 24 06 F1 | 	add	local04, #8
1fcd0     12 29 62 FC | 	wrlong	local06, local04
1fcd4     14 27 02 F6 | 	mov	local05, local06
1fcd8     09 13 32 F9 | 	getword	arg01, arg01, #0
1fcdc     09 27 02 F1 | 	add	local05, arg01
1fce0     04 24 06 F1 | 	add	local04, #4
1fce4     12 27 62 FC | 	wrlong	local05, local04
1fce8     14 27 02 F6 | 	mov	local05, local06
1fcec     17 27 02 F1 | 	add	local05, local09
1fcf0     08 24 06 F1 | 	add	local04, #8
1fcf4     12 27 62 FC | 	wrlong	local05, local04
1fcf8     2C 24 86 F1 | 	sub	local04, #44
1fcfc     03 30 0E F2 | 	cmp	local10, #3 wz
1fd00     5C 00 90 5D |  if_ne	jmp	#LR__3515
1fd04     34 24 06 F1 | 	add	local04, #52
1fd08     12 13 02 F6 | 	mov	arg01, local04
1fd0c     34 24 86 F1 | 	sub	local04, #52
1fd10     2A 12 06 F1 | 	add	arg01, #42
1fd14                 | ' {
1fd14                 | ' 
1fd14                 | ' 	return *((WORD*)ptr);
1fd14     09 FB E9 FA | 	rdword	result1, arg01 wz
1fd18     0D FA 05 56 |  if_ne	mov	result1, #13
1fd1c     FC 01 90 5D |  if_ne	jmp	#LR__3520
1fd20     08 24 06 F1 | 	add	local04, #8
1fd24     12 27 EA FA | 	rdword	local05, local04 wz
1fd28     08 24 86 F1 | 	sub	local04, #8
1fd2c     0D FA 05 56 |  if_ne	mov	result1, #13
1fd30     E8 01 90 5D |  if_ne	jmp	#LR__3520
1fd34     34 24 06 F1 | 	add	local04, #52
1fd38     12 13 02 F6 | 	mov	arg01, local04
1fd3c     2C 12 06 F1 | 	add	arg01, #44
1fd40                 | ' {
1fd40                 | ' 
1fd40                 | ' 	return *((DWORD*)ptr);
1fd40     09 FB 01 FB | 	rdlong	result1, arg01
1fd44     0C 24 86 F1 | 	sub	local04, #12
1fd48     12 FB 61 FC | 	wrlong	result1, local04
1fd4c     10 24 86 F1 | 	sub	local04, #16
1fd50     12 33 02 FB | 	rdlong	local11, local04
1fd54     18 24 86 F1 | 	sub	local04, #24
1fd58     02 32 66 F0 | 	shl	local11, #2
1fd5c     6C 00 90 FD | 	jmp	#LR__3517
1fd60                 | LR__3515
1fd60     08 24 06 F1 | 	add	local04, #8
1fd64     12 27 EA FA | 	rdword	local05, local04 wz
1fd68     08 24 86 F1 | 	sub	local04, #8
1fd6c     0D FA 05 A6 |  if_e	mov	result1, #13
1fd70     A8 01 90 AD |  if_e	jmp	#LR__3520
1fd74     24 24 06 F1 | 	add	local04, #36
1fd78     12 27 02 FB | 	rdlong	local05, local04
1fd7c     15 27 02 F1 | 	add	local05, local07
1fd80     04 24 06 F1 | 	add	local04, #4
1fd84     12 27 62 FC | 	wrlong	local05, local04
1fd88     28 24 86 F1 | 	sub	local04, #40
1fd8c     02 30 0E F2 | 	cmp	local10, #2 wz
1fd90     18 24 06 A1 |  if_e	add	local04, #24
1fd94     12 27 02 AB |  if_e	rdlong	local05, local04
1fd98     18 24 86 A1 |  if_e	sub	local04, #24
1fd9c     01 26 66 A0 |  if_e	shl	local05, #1
1fda0     24 00 90 AD |  if_e	jmp	#LR__3516
1fda4     18 24 06 F1 | 	add	local04, #24
1fda8     12 33 02 FB | 	rdlong	local11, local04
1fdac     19 27 02 F6 | 	mov	local05, local11
1fdb0     01 26 66 F0 | 	shl	local05, #1
1fdb4     19 27 02 F1 | 	add	local05, local11
1fdb8     01 26 46 F0 | 	shr	local05, #1
1fdbc     18 24 86 F1 | 	sub	local04, #24
1fdc0     01 32 06 F5 | 	and	local11, #1
1fdc4     19 27 02 F1 | 	add	local05, local11
1fdc8                 | LR__3516
1fdc8     13 33 02 F6 | 	mov	local11, local05
1fdcc                 | LR__3517
1fdcc     FF 33 06 F1 | 	add	local11, #511
1fdd0     09 32 46 F0 | 	shr	local11, #9
1fdd4     1C 24 06 F1 | 	add	local04, #28
1fdd8     12 17 02 FB | 	rdlong	arg03, local04
1fddc     1C 24 86 F1 | 	sub	local04, #28
1fde0     19 17 12 F2 | 	cmp	arg03, local11 wc
1fde4     0D FA 05 C6 |  if_b	mov	result1, #13
1fde8     30 01 90 CD |  if_b	jmp	#LR__3520
1fdec     14 24 06 F1 | 	add	local04, #20
1fdf0     FF FF FF FF 
1fdf4     12 FF 6B FC | 	wrlong	##-1, local04
1fdf8     04 24 86 F1 | 	sub	local04, #4
1fdfc     FF FF FF FF 
1fe00     12 FF 6B FC | 	wrlong	##-1, local04
1fe04     0C 24 86 F1 | 	sub	local04, #12
1fe08     12 01 49 FC | 	wrbyte	#128, local04
1fe0c     04 24 86 F1 | 	sub	local04, #4
1fe10     03 30 0E F2 | 	cmp	local10, #3 wz
1fe14     D0 00 90 5D |  if_ne	jmp	#LR__3519
1fe18     34 24 06 F1 | 	add	local04, #52
1fe1c     12 13 02 F6 | 	mov	arg01, local04
1fe20     34 24 86 F1 | 	sub	local04, #52
1fe24     30 12 06 F1 | 	add	arg01, #48
1fe28                 | ' {
1fe28                 | ' 
1fe28                 | ' 	return *((WORD*)ptr);
1fe28     09 FB E1 FA | 	rdword	result1, arg01
1fe2c     FD 26 32 F9 | 	getword	local05, result1, #0
1fe30     01 26 0E F2 | 	cmp	local05, #1 wz
1fe34     B0 00 90 5D |  if_ne	jmp	#LR__3519
1fe38     01 28 06 F1 | 	add	local06, #1
1fe3c     12 13 02 F6 | 	mov	arg01, local04
1fe40     14 15 02 F6 | 	mov	arg02, local06
1fe44     CC CD BF FD | 	call	#_fatfs_cc_move_window
1fe48     00 FA 0D F2 | 	cmp	result1, #0 wz
1fe4c     98 00 90 5D |  if_ne	jmp	#LR__3519
1fe50     04 24 06 F1 | 	add	local04, #4
1fe54     12 01 48 FC | 	wrbyte	#0, local04
1fe58     30 24 06 F1 | 	add	local04, #48
1fe5c     12 13 02 F6 | 	mov	arg01, local04
1fe60     34 24 86 F1 | 	sub	local04, #52
1fe64     FE 13 06 F1 | 	add	arg01, #510
1fe68                 | ' {
1fe68                 | ' 
1fe68                 | ' 	return *((WORD*)ptr);
1fe68     09 FB E1 FA | 	rdword	result1, arg01
1fe6c     FD 26 32 F9 | 	getword	local05, result1, #0
1fe70     55 00 00 FF 
1fe74     55 26 0E F2 | 	cmp	local05, ##43605 wz
1fe78     34 24 06 A1 |  if_e	add	local04, #52
1fe7c     12 13 02 A6 |  if_e	mov	arg01, local04
1fe80     34 24 86 A1 |  if_e	sub	local04, #52
1fe84                 | ' {
1fe84                 | ' 
1fe84                 | ' 	return *((DWORD*)ptr);
1fe84     09 FB 01 AB |  if_e	rdlong	result1, arg01
1fe88     A9 B0 20 AF 
1fe8c     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
1fe90     54 00 90 5D |  if_ne	jmp	#LR__3518
1fe94     34 24 06 F1 | 	add	local04, #52
1fe98     12 13 02 F6 | 	mov	arg01, local04
1fe9c     34 24 86 F1 | 	sub	local04, #52
1fea0     E4 13 06 F1 | 	add	arg01, #484
1fea4                 | ' {
1fea4                 | ' 
1fea4                 | ' 	return *((DWORD*)ptr);
1fea4     09 FB 01 FB | 	rdlong	result1, arg01
1fea8     B9 A0 30 FF 
1feac     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
1feb0     34 00 90 5D |  if_ne	jmp	#LR__3518
1feb4     34 24 06 F1 | 	add	local04, #52
1feb8     12 13 02 F6 | 	mov	arg01, local04
1febc     E8 13 06 F1 | 	add	arg01, #488
1fec0                 | ' {
1fec0                 | ' 
1fec0                 | ' 	return *((DWORD*)ptr);
1fec0     09 FB 01 FB | 	rdlong	result1, arg01
1fec4     20 24 86 F1 | 	sub	local04, #32
1fec8     12 FB 61 FC | 	wrlong	result1, local04
1fecc     20 24 06 F1 | 	add	local04, #32
1fed0     12 13 02 F6 | 	mov	arg01, local04
1fed4     EC 13 06 F1 | 	add	arg01, #492
1fed8                 | ' {
1fed8                 | ' 
1fed8                 | ' 	return *((DWORD*)ptr);
1fed8     09 FB 01 FB | 	rdlong	result1, arg01
1fedc     24 24 86 F1 | 	sub	local04, #36
1fee0     12 FB 61 FC | 	wrlong	result1, local04
1fee4     10 24 86 F1 | 	sub	local04, #16
1fee8                 | LR__3518
1fee8                 | LR__3519
1fee8     12 31 42 FC | 	wrbyte	local10, local04
1feec     04 E4 05 F1 | 	add	objptr, #4
1fef0     F2 26 E2 FA | 	rdword	local05, objptr
1fef4     01 26 06 F1 | 	add	local05, #1
1fef8     F2 26 52 FC | 	wrword	local05, objptr
1fefc     F2 32 E2 FA | 	rdword	local11, objptr
1ff00     06 24 06 F1 | 	add	local04, #6
1ff04     12 33 52 FC | 	wrword	local11, local04
1ff08     04 E4 05 F1 | 	add	objptr, #4
1ff0c     06 24 06 F1 | 	add	local04, #6
1ff10     12 E5 61 FC | 	wrlong	objptr, local04
1ff14                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
1ff14                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
1ff14                 | ' 			{
1ff14                 | ' 
1ff14                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
1ff14                 | ' 
1ff14                 | ' 
1ff14                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
1ff14                 | ' 
1ff14                 | ' 			}
1ff14                 | ' 		}
1ff14                 | ' 
1ff14                 | ' 
1ff14                 | ' 	}
1ff14                 | ' 
1ff14                 | ' 	fs->fs_type = (BYTE)fmt;
1ff14                 | ' 	fs->id = ++Fsid;
1ff14                 | ' 
1ff14                 | ' 	fs->lfnbuf = LfnBuf;
1ff14                 | ' #line 3567 "ff.c"
1ff14                 | ' 	return FR_OK;
1ff14     00 FA 05 F6 | 	mov	result1, #0
1ff18     08 E4 85 F1 | 	sub	objptr, #8
1ff1c                 | LR__3520
1ff1c     A7 F0 03 F6 | 	mov	ptra, fp
1ff20     B2 00 A0 FD | 	call	#popregs_
1ff24                 | _fatfs_cc_mount_volume_ret
1ff24     2D 00 64 FD | 	ret
1ff28                 | 
1ff28                 | _fatfs_cc_validate
1ff28     09 01 0A F6 | 	mov	_var01, arg01 wz
1ff2c     09 02 06 F6 | 	mov	_var02, #9
1ff30     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
1ff34     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
1ff38     50 00 90 AD |  if_e	jmp	#LR__3530
1ff3c     04 00 06 F1 | 	add	_var01, #4
1ff40     00 07 E2 FA | 	rdword	_var04, _var01
1ff44     04 00 86 F1 | 	sub	_var01, #4
1ff48     00 13 02 FB | 	rdlong	arg01, _var01
1ff4c     06 12 06 F1 | 	add	arg01, #6
1ff50     09 FB E1 FA | 	rdword	result1, arg01
1ff54     FD 06 0A F2 | 	cmp	_var04, result1 wz
1ff58     30 00 90 5D |  if_ne	jmp	#LR__3530
1ff5c     00 07 02 FB | 	rdlong	_var04, _var01
1ff60     01 06 06 F1 | 	add	_var04, #1
1ff64     03 13 CA FA | 	rdbyte	arg01, _var04 wz
1ff68     01 FA 05 56 |  if_ne	mov	result1, #1
1ff6c                 | ' 
1ff6c                 | ' 	return Stat;
1ff6c     01 00 00 AF 
1ff70     20 E4 05 A1 |  if_e	add	objptr, ##544
1ff74     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1ff78     01 00 00 AF 
1ff7c     20 E4 85 A1 |  if_e	sub	objptr, ##544
1ff80     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
1ff84     01 04 CE F7 | 	test	_var03, #1 wz
1ff88     00 02 06 A6 |  if_e	mov	_var02, #0
1ff8c                 | LR__3530
1ff8c     00 02 0E F2 | 	cmp	_var02, #0 wz
1ff90     00 05 02 AB |  if_e	rdlong	_var03, _var01
1ff94     00 04 06 56 |  if_ne	mov	_var03, #0
1ff98     0A 05 62 FC | 	wrlong	_var03, arg02
1ff9c                 | ' 			res = FR_OK;
1ff9c                 | ' 		}
1ff9c                 | ' 
1ff9c                 | ' 	}
1ff9c                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
1ff9c                 | ' 	return res;
1ff9c     01 FB 01 F6 | 	mov	result1, _var02
1ffa0                 | _fatfs_cc_validate_ret
1ffa0     2D 00 64 FD | 	ret
1ffa4                 | 
1ffa4                 | _fatfs_cc_f_mount
1ffa4     01 4A 05 F6 | 	mov	COUNT_, #1
1ffa8     A8 00 A0 FD | 	call	#pushregs_
1ffac     20 F0 07 F1 | 	add	ptra, #32
1ffb0     04 4E 05 F1 | 	add	fp, #4
1ffb4     A7 12 62 FC | 	wrlong	arg01, fp
1ffb8     04 4E 05 F1 | 	add	fp, #4
1ffbc     A7 14 62 FC | 	wrlong	arg02, fp
1ffc0     04 4E 05 F1 | 	add	fp, #4
1ffc4     A7 16 42 FC | 	wrbyte	arg03, fp
1ffc8     04 4E 85 F1 | 	sub	fp, #4
1ffcc     A7 16 02 FB | 	rdlong	arg03, fp
1ffd0     14 4E 05 F1 | 	add	fp, #20
1ffd4     A7 16 62 FC | 	wrlong	arg03, fp
1ffd8     A7 12 02 F6 | 	mov	arg01, fp
1ffdc     1C 4E 85 F1 | 	sub	fp, #28
1ffe0     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
1ffe4     14 4E 05 F1 | 	add	fp, #20
1ffe8     A7 FA 61 FC | 	wrlong	result1, fp
1ffec     14 4E 85 F1 | 	sub	fp, #20
1fff0     00 FA 55 F2 | 	cmps	result1, #0 wc
1fff4     0B FA 05 C6 |  if_b	mov	result1, #11
1fff8     C0 00 90 CD |  if_b	jmp	#LR__3541
1fffc     14 4E 05 F1 | 	add	fp, #20
20000     A7 16 02 FB | 	rdlong	arg03, fp
20004     02 16 66 F0 | 	shl	arg03, #2
20008     F2 16 02 F1 | 	add	arg03, objptr
2000c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
20010     04 4E 85 F1 | 	sub	fp, #4
20014     A7 16 62 FC | 	wrlong	arg03, fp
20018     10 4E 85 F1 | 	sub	fp, #16
2001c     28 00 90 AD |  if_e	jmp	#LR__3540
20020     10 4E 05 F1 | 	add	fp, #16
20024     A7 16 02 FB | 	rdlong	arg03, fp
20028     10 4E 85 F1 | 	sub	fp, #16
2002c     01 16 06 F1 | 	add	arg03, #1
20030     0B 13 C2 FA | 	rdbyte	arg01, arg03
20034     30 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
20038     10 4E 05 F1 | 	add	fp, #16
2003c     A7 16 02 FB | 	rdlong	arg03, fp
20040     10 4E 85 F1 | 	sub	fp, #16
20044     0B 01 48 FC | 	wrbyte	#0, arg03
20048                 | LR__3540
20048     04 4E 05 F1 | 	add	fp, #4
2004c     A7 1E 0A FB | 	rdlong	local01, fp wz
20050     04 4E 85 F1 | 	sub	fp, #4
20054     04 4E 05 51 |  if_ne	add	fp, #4
20058     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2005c     04 4E 85 51 |  if_ne	sub	fp, #4
20060     0F 01 48 5C |  if_ne	wrbyte	#0, local01
20064     14 4E 05 F1 | 	add	fp, #20
20068     A7 1E 02 FB | 	rdlong	local01, fp
2006c     02 1E 66 F0 | 	shl	local01, #2
20070     F2 1E 02 F1 | 	add	local01, objptr
20074     10 4E 85 F1 | 	sub	fp, #16
20078     A7 16 02 FB | 	rdlong	arg03, fp
2007c     0F 17 62 FC | 	wrlong	arg03, local01
20080     08 4E 05 F1 | 	add	fp, #8
20084     A7 1E CA FA | 	rdbyte	local01, fp wz
20088     0C 4E 85 F1 | 	sub	fp, #12
2008c     00 FA 05 A6 |  if_e	mov	result1, #0
20090     28 00 90 AD |  if_e	jmp	#LR__3541
20094     08 4E 05 F1 | 	add	fp, #8
20098     A7 12 02 F6 | 	mov	arg01, fp
2009c     04 4E 85 F1 | 	sub	fp, #4
200a0     A7 14 02 F6 | 	mov	arg02, fp
200a4     04 4E 85 F1 | 	sub	fp, #4
200a8     00 16 06 F6 | 	mov	arg03, #0
200ac     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
200b0     18 4E 05 F1 | 	add	fp, #24
200b4     A7 FA 61 FC | 	wrlong	result1, fp
200b8                 | ' 
200b8                 | ' 	res = mount_volume(&path, &fs, 0);
200b8                 | ' 	return res ;
200b8     18 4E 85 F1 | 	sub	fp, #24
200bc                 | LR__3541
200bc     A7 F0 03 F6 | 	mov	ptra, fp
200c0     B2 00 A0 FD | 	call	#popregs_
200c4                 | _fatfs_cc_f_mount_ret
200c4     2D 00 64 FD | 	ret
200c8                 | 
200c8                 | _fatfs_cc_f_open
200c8     02 4A 05 F6 | 	mov	COUNT_, #2
200cc     A8 00 A0 FD | 	call	#pushregs_
200d0     60 F0 07 F1 | 	add	ptra, #96
200d4     04 4E 05 F1 | 	add	fp, #4
200d8     A7 12 62 FC | 	wrlong	arg01, fp
200dc     04 4E 05 F1 | 	add	fp, #4
200e0     A7 14 62 FC | 	wrlong	arg02, fp
200e4     04 4E 05 F1 | 	add	fp, #4
200e8     A7 16 42 FC | 	wrbyte	arg03, fp
200ec     08 4E 85 F1 | 	sub	fp, #8
200f0     A7 18 0A FB | 	rdlong	arg04, fp wz
200f4     04 4E 85 F1 | 	sub	fp, #4
200f8     09 FA 05 A6 |  if_e	mov	result1, #9
200fc     98 06 90 AD |  if_e	jmp	#LR__3567
20100     0C 4E 05 F1 | 	add	fp, #12
20104     A7 18 C2 FA | 	rdbyte	arg04, fp
20108     3F 18 06 F5 | 	and	arg04, #63
2010c     A7 18 42 FC | 	wrbyte	arg04, fp
20110     04 4E 85 F1 | 	sub	fp, #4
20114     A7 12 02 F6 | 	mov	arg01, fp
20118     3C 4E 05 F1 | 	add	fp, #60
2011c     A7 14 02 F6 | 	mov	arg02, fp
20120     38 4E 85 F1 | 	sub	fp, #56
20124     A7 16 C2 FA | 	rdbyte	arg03, fp
20128     0C 4E 85 F1 | 	sub	fp, #12
2012c     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
20130     10 4E 05 F1 | 	add	fp, #16
20134     A7 FA 61 FC | 	wrlong	result1, fp
20138     10 4E 85 F1 | 	sub	fp, #16
2013c     00 FA 0D F2 | 	cmp	result1, #0 wz
20140     2C 06 90 5D |  if_ne	jmp	#LR__3566
20144     44 4E 05 F1 | 	add	fp, #68
20148     A7 18 02 FB | 	rdlong	arg04, fp
2014c     30 4E 85 F1 | 	sub	fp, #48
20150     A7 18 62 FC | 	wrlong	arg04, fp
20154     A7 12 02 F6 | 	mov	arg01, fp
20158     0C 4E 85 F1 | 	sub	fp, #12
2015c     A7 1E 02 FB | 	rdlong	local01, fp
20160     08 4E 85 F1 | 	sub	fp, #8
20164     0F 15 02 F6 | 	mov	arg02, local01
20168     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
2016c     10 4E 05 F1 | 	add	fp, #16
20170     A7 FA 61 FC | 	wrlong	result1, fp
20174     10 4E 85 F1 | 	sub	fp, #16
20178     00 FA 0D F2 | 	cmp	result1, #0 wz
2017c     1C 00 90 5D |  if_ne	jmp	#LR__3550
20180     3F 4E 05 F1 | 	add	fp, #63
20184     A7 18 C2 FA | 	rdbyte	arg04, fp
20188     3F 4E 85 F1 | 	sub	fp, #63
2018c     80 18 CE F7 | 	test	arg04, #128 wz
20190     10 4E 05 51 |  if_ne	add	fp, #16
20194     A7 0C 68 5C |  if_ne	wrlong	#6, fp
20198     10 4E 85 51 |  if_ne	sub	fp, #16
2019c                 | LR__3550
2019c     0C 4E 05 F1 | 	add	fp, #12
201a0     A7 18 C2 FA | 	rdbyte	arg04, fp
201a4     0C 4E 85 F1 | 	sub	fp, #12
201a8     1C 18 CE F7 | 	test	arg04, #28 wz
201ac     F0 01 90 AD |  if_e	jmp	#LR__3555
201b0     10 4E 05 F1 | 	add	fp, #16
201b4     A7 1E 0A FB | 	rdlong	local01, fp wz
201b8     10 4E 85 F1 | 	sub	fp, #16
201bc     48 00 90 AD |  if_e	jmp	#LR__3552
201c0     10 4E 05 F1 | 	add	fp, #16
201c4     A7 18 02 FB | 	rdlong	arg04, fp
201c8     10 4E 85 F1 | 	sub	fp, #16
201cc     04 18 0E F2 | 	cmp	arg04, #4 wz
201d0     1C 00 90 5D |  if_ne	jmp	#LR__3551
201d4     14 4E 05 F1 | 	add	fp, #20
201d8     A7 12 02 F6 | 	mov	arg01, fp
201dc     14 4E 85 F1 | 	sub	fp, #20
201e0     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
201e4     10 4E 05 F1 | 	add	fp, #16
201e8     A7 FA 61 FC | 	wrlong	result1, fp
201ec     10 4E 85 F1 | 	sub	fp, #16
201f0                 | LR__3551
201f0     0C 4E 05 F1 | 	add	fp, #12
201f4     A7 1E C2 FA | 	rdbyte	local01, fp
201f8     08 1E 46 F5 | 	or	local01, #8
201fc     A7 1E 42 FC | 	wrbyte	local01, fp
20200     0C 4E 85 F1 | 	sub	fp, #12
20204     3C 00 90 FD | 	jmp	#LR__3554
20208                 | LR__3552
20208     1A 4E 05 F1 | 	add	fp, #26
2020c     A7 1E C2 FA | 	rdbyte	local01, fp
20210     1A 4E 85 F1 | 	sub	fp, #26
20214     11 1E CE F7 | 	test	local01, #17 wz
20218     10 4E 05 51 |  if_ne	add	fp, #16
2021c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
20220     10 4E 85 51 |  if_ne	sub	fp, #16
20224     1C 00 90 5D |  if_ne	jmp	#LR__3553
20228     0C 4E 05 F1 | 	add	fp, #12
2022c     A7 1E C2 FA | 	rdbyte	local01, fp
20230     0C 4E 85 F1 | 	sub	fp, #12
20234     04 1E CE F7 | 	test	local01, #4 wz
20238     10 4E 05 51 |  if_ne	add	fp, #16
2023c     A7 10 68 5C |  if_ne	wrlong	#8, fp
20240     10 4E 85 51 |  if_ne	sub	fp, #16
20244                 | LR__3553
20244                 | LR__3554
20244     10 4E 05 F1 | 	add	fp, #16
20248     A7 1E 0A FB | 	rdlong	local01, fp wz
2024c     10 4E 85 F1 | 	sub	fp, #16
20250     A8 01 90 5D |  if_ne	jmp	#LR__3558
20254     0C 4E 05 F1 | 	add	fp, #12
20258     A7 1E C2 FA | 	rdbyte	local01, fp
2025c     0C 4E 85 F1 | 	sub	fp, #12
20260     08 1E CE F7 | 	test	local01, #8 wz
20264     94 01 90 AD |  if_e	jmp	#LR__3558
20268     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
2026c     54 4E 05 F1 | 	add	fp, #84
20270     A7 FA 61 FC | 	wrlong	result1, fp
20274     24 4E 85 F1 | 	sub	fp, #36
20278     A7 12 02 FB | 	rdlong	arg01, fp
2027c     0E 12 06 F1 | 	add	arg01, #14
20280     09 FB 61 FC | 	wrlong	result1, arg01
20284     A7 12 02 FB | 	rdlong	arg01, fp
20288     16 12 06 F1 | 	add	arg01, #22
2028c     24 4E 05 F1 | 	add	fp, #36
20290     A7 14 02 FB | 	rdlong	arg02, fp
20294     09 15 62 FC | 	wrlong	arg02, arg01
20298     10 4E 85 F1 | 	sub	fp, #16
2029c     A7 12 02 FB | 	rdlong	arg01, fp
202a0     14 4E 85 F1 | 	sub	fp, #20
202a4     A7 14 02 FB | 	rdlong	arg02, fp
202a8     30 4E 85 F1 | 	sub	fp, #48
202ac     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
202b0     48 4E 05 F1 | 	add	fp, #72
202b4     A7 FA 61 FC | 	wrlong	result1, fp
202b8     18 4E 85 F1 | 	sub	fp, #24
202bc     A7 1E 02 FB | 	rdlong	local01, fp
202c0     0B 1E 06 F1 | 	add	local01, #11
202c4     0F 41 48 FC | 	wrbyte	#32, local01
202c8     14 4E 05 F1 | 	add	fp, #20
202cc     A7 12 02 FB | 	rdlong	arg01, fp
202d0     14 4E 85 F1 | 	sub	fp, #20
202d4     A7 14 02 FB | 	rdlong	arg02, fp
202d8     30 4E 85 F1 | 	sub	fp, #48
202dc     00 16 06 F6 | 	mov	arg03, #0
202e0     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
202e4     30 4E 05 F1 | 	add	fp, #48
202e8     A7 12 02 FB | 	rdlong	arg01, fp
202ec     1C 12 06 F1 | 	add	arg01, #28
202f0     09 01 68 FC | 	wrlong	#0, arg01
202f4     14 4E 05 F1 | 	add	fp, #20
202f8     A7 1E 02 FB | 	rdlong	local01, fp
202fc     03 1E 06 F1 | 	add	local01, #3
20300     0F 03 48 FC | 	wrbyte	#1, local01
20304     04 4E 05 F1 | 	add	fp, #4
20308     A7 1E 0A FB | 	rdlong	local01, fp wz
2030c     48 4E 85 F1 | 	sub	fp, #72
20310     E8 00 90 AD |  if_e	jmp	#LR__3558
20314     44 4E 05 F1 | 	add	fp, #68
20318     A7 1E 02 FB | 	rdlong	local01, fp
2031c     30 1E 06 F1 | 	add	local01, #48
20320     0F 1F 02 FB | 	rdlong	local01, local01
20324     14 4E 05 F1 | 	add	fp, #20
20328     A7 1E 62 FC | 	wrlong	local01, fp
2032c     44 4E 85 F1 | 	sub	fp, #68
20330     A7 12 02 F6 | 	mov	arg01, fp
20334     34 4E 05 F1 | 	add	fp, #52
20338     A7 14 02 FB | 	rdlong	arg02, fp
2033c     48 4E 85 F1 | 	sub	fp, #72
20340     00 16 06 F6 | 	mov	arg03, #0
20344     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
20348     10 4E 05 F1 | 	add	fp, #16
2034c     A7 FA 61 FC | 	wrlong	result1, fp
20350     10 4E 85 F1 | 	sub	fp, #16
20354     00 FA 0D F2 | 	cmp	result1, #0 wz
20358     A0 00 90 5D |  if_ne	jmp	#LR__3558
2035c     44 4E 05 F1 | 	add	fp, #68
20360     A7 12 02 FB | 	rdlong	arg01, fp
20364     14 4E 05 F1 | 	add	fp, #20
20368     A7 14 02 FB | 	rdlong	arg02, fp
2036c     58 4E 85 F1 | 	sub	fp, #88
20370     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
20374     10 4E 05 F1 | 	add	fp, #16
20378     A7 FA 61 FC | 	wrlong	result1, fp
2037c     34 4E 05 F1 | 	add	fp, #52
20380     A7 18 02 FB | 	rdlong	arg04, fp
20384     04 4E 05 F1 | 	add	fp, #4
20388     A7 1E 02 FB | 	rdlong	local01, fp
2038c     48 4E 85 F1 | 	sub	fp, #72
20390     01 1E 86 F1 | 	sub	local01, #1
20394     10 18 06 F1 | 	add	arg04, #16
20398     0C 1F 62 FC | 	wrlong	local01, arg04
2039c     5C 00 90 FD | 	jmp	#LR__3558
203a0                 | LR__3555
203a0     10 4E 05 F1 | 	add	fp, #16
203a4     A7 18 0A FB | 	rdlong	arg04, fp wz
203a8     10 4E 85 F1 | 	sub	fp, #16
203ac     4C 00 90 5D |  if_ne	jmp	#LR__3557
203b0     1A 4E 05 F1 | 	add	fp, #26
203b4     A7 18 C2 FA | 	rdbyte	arg04, fp
203b8     1A 4E 85 F1 | 	sub	fp, #26
203bc     10 18 CE F7 | 	test	arg04, #16 wz
203c0     10 4E 05 51 |  if_ne	add	fp, #16
203c4     A7 08 68 5C |  if_ne	wrlong	#4, fp
203c8     10 4E 85 51 |  if_ne	sub	fp, #16
203cc     2C 00 90 5D |  if_ne	jmp	#LR__3556
203d0     0C 4E 05 F1 | 	add	fp, #12
203d4     A7 18 C2 FA | 	rdbyte	arg04, fp
203d8     0C 4E 85 F1 | 	sub	fp, #12
203dc     02 18 CE F7 | 	test	arg04, #2 wz
203e0     1A 4E 05 51 |  if_ne	add	fp, #26
203e4     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
203e8     1A 4E 85 51 |  if_ne	sub	fp, #26
203ec     01 1E CE 57 |  if_ne	test	local01, #1 wz
203f0     10 4E 05 51 |  if_ne	add	fp, #16
203f4     A7 0E 68 5C |  if_ne	wrlong	#7, fp
203f8     10 4E 85 51 |  if_ne	sub	fp, #16
203fc                 | LR__3556
203fc                 | LR__3557
203fc                 | LR__3558
203fc     10 4E 05 F1 | 	add	fp, #16
20400     A7 1E 0A FB | 	rdlong	local01, fp wz
20404     10 4E 85 F1 | 	sub	fp, #16
20408     60 00 90 5D |  if_ne	jmp	#LR__3559
2040c     0C 4E 05 F1 | 	add	fp, #12
20410     A7 20 C2 FA | 	rdbyte	local02, fp
20414     0C 4E 85 F1 | 	sub	fp, #12
20418     08 20 CE F7 | 	test	local02, #8 wz
2041c     0C 4E 05 51 |  if_ne	add	fp, #12
20420     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
20424     40 20 46 55 |  if_ne	or	local02, #64
20428     A7 20 42 5C |  if_ne	wrbyte	local02, fp
2042c     0C 4E 85 51 |  if_ne	sub	fp, #12
20430     04 4E 05 F1 | 	add	fp, #4
20434     A7 20 02 FB | 	rdlong	local02, fp
20438     40 4E 05 F1 | 	add	fp, #64
2043c     A7 1E 02 FB | 	rdlong	local01, fp
20440     30 1E 06 F1 | 	add	local01, #48
20444     0F 1F 02 FB | 	rdlong	local01, local01
20448     20 20 06 F1 | 	add	local02, #32
2044c     10 1F 62 FC | 	wrlong	local01, local02
20450     40 4E 85 F1 | 	sub	fp, #64
20454     A7 20 02 FB | 	rdlong	local02, fp
20458     2C 4E 05 F1 | 	add	fp, #44
2045c     A7 1E 02 FB | 	rdlong	local01, fp
20460     30 4E 85 F1 | 	sub	fp, #48
20464     24 20 06 F1 | 	add	local02, #36
20468     10 1F 62 FC | 	wrlong	local01, local02
2046c                 | LR__3559
2046c     10 4E 05 F1 | 	add	fp, #16
20470     A7 20 0A FB | 	rdlong	local02, fp wz
20474     10 4E 85 F1 | 	sub	fp, #16
20478     F4 02 90 5D |  if_ne	jmp	#LR__3565
2047c     04 4E 05 F1 | 	add	fp, #4
20480     A7 20 02 FB | 	rdlong	local02, fp
20484     40 4E 05 F1 | 	add	fp, #64
20488     A7 12 02 FB | 	rdlong	arg01, fp
2048c     14 4E 85 F1 | 	sub	fp, #20
20490     A7 14 02 FB | 	rdlong	arg02, fp
20494     30 4E 85 F1 | 	sub	fp, #48
20498     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
2049c     08 20 06 F1 | 	add	local02, #8
204a0     10 FB 61 FC | 	wrlong	result1, local02
204a4     04 4E 05 F1 | 	add	fp, #4
204a8     A7 20 02 FB | 	rdlong	local02, fp
204ac     2C 4E 05 F1 | 	add	fp, #44
204b0     A7 12 02 FB | 	rdlong	arg01, fp
204b4     1C 12 06 F1 | 	add	arg01, #28
204b8                 | ' {
204b8                 | ' 
204b8                 | ' 	return *((DWORD*)ptr);
204b8     09 FB 01 FB | 	rdlong	result1, arg01
204bc     0C 20 06 F1 | 	add	local02, #12
204c0     10 FB 61 FC | 	wrlong	result1, local02
204c4     2C 4E 85 F1 | 	sub	fp, #44
204c8     A7 20 02 FB | 	rdlong	local02, fp
204cc     40 4E 05 F1 | 	add	fp, #64
204d0     A7 1E 02 FB | 	rdlong	local01, fp
204d4     10 1F 62 FC | 	wrlong	local01, local02
204d8     40 4E 85 F1 | 	sub	fp, #64
204dc     A7 20 02 FB | 	rdlong	local02, fp
204e0     40 4E 05 F1 | 	add	fp, #64
204e4     A7 1E 02 FB | 	rdlong	local01, fp
204e8     06 1E 06 F1 | 	add	local01, #6
204ec     0F 1F E2 FA | 	rdword	local01, local01
204f0     04 20 06 F1 | 	add	local02, #4
204f4     10 1F 52 FC | 	wrword	local01, local02
204f8     40 4E 85 F1 | 	sub	fp, #64
204fc     A7 20 02 FB | 	rdlong	local02, fp
20500     08 4E 05 F1 | 	add	fp, #8
20504     A7 1E C2 FA | 	rdbyte	local01, fp
20508     10 20 06 F1 | 	add	local02, #16
2050c     10 1F 42 FC | 	wrbyte	local01, local02
20510     08 4E 85 F1 | 	sub	fp, #8
20514     A7 20 02 FB | 	rdlong	local02, fp
20518     11 20 06 F1 | 	add	local02, #17
2051c     10 01 48 FC | 	wrbyte	#0, local02
20520     A7 20 02 FB | 	rdlong	local02, fp
20524     1C 20 06 F1 | 	add	local02, #28
20528     10 01 68 FC | 	wrlong	#0, local02
2052c     A7 20 02 FB | 	rdlong	local02, fp
20530     14 20 06 F1 | 	add	local02, #20
20534     10 01 68 FC | 	wrlong	#0, local02
20538     A7 12 02 FB | 	rdlong	arg01, fp
2053c     04 4E 85 F1 | 	sub	fp, #4
20540     28 12 06 F1 | 	add	arg01, #40
20544     00 14 06 F6 | 	mov	arg02, #0
20548     09 16 C6 F9 | 	decod	arg03, #9
2054c     98 00 A0 FD | 	call	#\builtin_bytefill_
20550     0C 4E 05 F1 | 	add	fp, #12
20554     A7 20 C2 FA | 	rdbyte	local02, fp
20558     0C 4E 85 F1 | 	sub	fp, #12
2055c     20 20 CE F7 | 	test	local02, #32 wz
20560     0C 02 90 AD |  if_e	jmp	#LR__3564
20564     04 4E 05 F1 | 	add	fp, #4
20568     A7 1E 02 FB | 	rdlong	local01, fp
2056c     04 4E 85 F1 | 	sub	fp, #4
20570     0C 1E 06 F1 | 	add	local01, #12
20574     0F 21 02 FB | 	rdlong	local02, local01
20578     01 20 16 F2 | 	cmp	local02, #1 wc
2057c     F0 01 90 CD |  if_b	jmp	#LR__3564
20580     04 4E 05 F1 | 	add	fp, #4
20584     A7 1E 02 FB | 	rdlong	local01, fp
20588     0F 21 02 F6 | 	mov	local02, local01
2058c     0C 1E 06 F1 | 	add	local01, #12
20590     0F 1F 02 FB | 	rdlong	local01, local01
20594     14 20 06 F1 | 	add	local02, #20
20598     10 1F 62 FC | 	wrlong	local01, local02
2059c     40 4E 05 F1 | 	add	fp, #64
205a0     A7 20 02 FB | 	rdlong	local02, fp
205a4     0A 20 06 F1 | 	add	local02, #10
205a8     10 21 E2 FA | 	rdword	local02, local02
205ac     09 20 66 F0 | 	shl	local02, #9
205b0     08 4E 05 F1 | 	add	fp, #8
205b4     A7 20 62 FC | 	wrlong	local02, fp
205b8     48 4E 85 F1 | 	sub	fp, #72
205bc     A7 20 02 FB | 	rdlong	local02, fp
205c0     08 20 06 F1 | 	add	local02, #8
205c4     10 1F 02 FB | 	rdlong	local01, local02
205c8     4C 4E 05 F1 | 	add	fp, #76
205cc     A7 1E 62 FC | 	wrlong	local01, fp
205d0                 | ' 				fp->fptr = fp->obj.objsize;
205d0                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
205d0                 | ' 				clst = fp->obj.sclust;
205d0                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
205d0     4C 4E 85 F1 | 	sub	fp, #76
205d4     A7 20 02 FB | 	rdlong	local02, fp
205d8     0C 20 06 F1 | 	add	local02, #12
205dc     10 1F 02 FB | 	rdlong	local01, local02
205e0     58 4E 05 F1 | 	add	fp, #88
205e4     A7 1E 62 FC | 	wrlong	local01, fp
205e8     5C 4E 85 F1 | 	sub	fp, #92
205ec                 | LR__3560
205ec     10 4E 05 F1 | 	add	fp, #16
205f0     A7 20 0A FB | 	rdlong	local02, fp wz
205f4     10 4E 85 F1 | 	sub	fp, #16
205f8     94 00 90 5D |  if_ne	jmp	#LR__3561
205fc     5C 4E 05 F1 | 	add	fp, #92
20600     A7 20 02 FB | 	rdlong	local02, fp
20604     10 4E 85 F1 | 	sub	fp, #16
20608     A7 1E 02 FB | 	rdlong	local01, fp
2060c     4C 4E 85 F1 | 	sub	fp, #76
20610     0F 21 1A F2 | 	cmp	local02, local01 wcz
20614     78 00 90 ED |  if_be	jmp	#LR__3561
20618     04 4E 05 F1 | 	add	fp, #4
2061c     A7 12 02 FB | 	rdlong	arg01, fp
20620     4C 4E 05 F1 | 	add	fp, #76
20624     A7 14 02 FB | 	rdlong	arg02, fp
20628     50 4E 85 F1 | 	sub	fp, #80
2062c     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
20630     50 4E 05 F1 | 	add	fp, #80
20634     A7 FA 61 FC | 	wrlong	result1, fp
20638     50 4E 85 F1 | 	sub	fp, #80
2063c     02 FA 15 F2 | 	cmp	result1, #2 wc
20640     10 4E 05 C1 |  if_b	add	fp, #16
20644     A7 04 68 CC |  if_b	wrlong	#2, fp
20648     10 4E 85 C1 |  if_b	sub	fp, #16
2064c     50 4E 05 F1 | 	add	fp, #80
20650     A7 20 02 FB | 	rdlong	local02, fp
20654     50 4E 85 F1 | 	sub	fp, #80
20658     FF FF 7F FF 
2065c     FF 21 0E F2 | 	cmp	local02, ##-1 wz
20660     10 4E 05 A1 |  if_e	add	fp, #16
20664     A7 02 68 AC |  if_e	wrlong	#1, fp
20668     10 4E 85 A1 |  if_e	sub	fp, #16
2066c     5C 4E 05 F1 | 	add	fp, #92
20670     A7 20 02 FB | 	rdlong	local02, fp
20674     10 4E 85 F1 | 	sub	fp, #16
20678     A7 1E 02 FB | 	rdlong	local01, fp
2067c     0F 21 82 F1 | 	sub	local02, local01
20680     10 4E 05 F1 | 	add	fp, #16
20684     A7 20 62 FC | 	wrlong	local02, fp
20688     5C 4E 85 F1 | 	sub	fp, #92
2068c     5C FF 9F FD | 	jmp	#LR__3560
20690                 | LR__3561
20690     04 4E 05 F1 | 	add	fp, #4
20694     A7 20 02 FB | 	rdlong	local02, fp
20698     4C 4E 05 F1 | 	add	fp, #76
2069c     A7 1E 02 FB | 	rdlong	local01, fp
206a0     18 20 06 F1 | 	add	local02, #24
206a4     10 1F 62 FC | 	wrlong	local01, local02
206a8     40 4E 85 F1 | 	sub	fp, #64
206ac     A7 20 0A FB | 	rdlong	local02, fp wz
206b0     10 4E 85 F1 | 	sub	fp, #16
206b4     B8 00 90 5D |  if_ne	jmp	#LR__3563
206b8     5C 4E 05 F1 | 	add	fp, #92
206bc     A7 1E 02 FB | 	rdlong	local01, fp
206c0     5C 4E 85 F1 | 	sub	fp, #92
206c4     FF 1F CE F7 | 	test	local01, #511 wz
206c8     A4 00 90 AD |  if_e	jmp	#LR__3563
206cc     44 4E 05 F1 | 	add	fp, #68
206d0     A7 12 02 FB | 	rdlong	arg01, fp
206d4     0C 4E 05 F1 | 	add	fp, #12
206d8     A7 14 02 FB | 	rdlong	arg02, fp
206dc     50 4E 85 F1 | 	sub	fp, #80
206e0     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
206e4     58 4E 05 F1 | 	add	fp, #88
206e8     A7 FA 61 FC | 	wrlong	result1, fp
206ec     00 FA 4D F2 | 	cmps	result1, #0 wz
206f0     58 4E 85 F1 | 	sub	fp, #88
206f4     10 4E 05 A1 |  if_e	add	fp, #16
206f8     A7 04 68 AC |  if_e	wrlong	#2, fp
206fc     10 4E 85 A1 |  if_e	sub	fp, #16
20700     6C 00 90 AD |  if_e	jmp	#LR__3562
20704     04 4E 05 F1 | 	add	fp, #4
20708     A7 20 02 FB | 	rdlong	local02, fp
2070c     54 4E 05 F1 | 	add	fp, #84
20710     A7 1E 02 FB | 	rdlong	local01, fp
20714     04 4E 05 F1 | 	add	fp, #4
20718     A7 18 02 FB | 	rdlong	arg04, fp
2071c     09 18 46 F0 | 	shr	arg04, #9
20720     0C 1F 02 F1 | 	add	local01, arg04
20724     1C 20 06 F1 | 	add	local02, #28
20728     10 1F 62 FC | 	wrlong	local01, local02
2072c     18 4E 85 F1 | 	sub	fp, #24
20730     A7 20 02 FB | 	rdlong	local02, fp
20734     01 20 06 F1 | 	add	local02, #1
20738     10 13 C2 FA | 	rdbyte	arg01, local02
2073c     40 4E 85 F1 | 	sub	fp, #64
20740     A7 20 02 FB | 	rdlong	local02, fp
20744     10 15 02 F6 | 	mov	arg02, local02
20748     28 14 06 F1 | 	add	arg02, #40
2074c     04 4E 85 F1 | 	sub	fp, #4
20750     1C 20 06 F1 | 	add	local02, #28
20754     10 17 02 FB | 	rdlong	arg03, local02
20758     01 18 06 F6 | 	mov	arg04, #1
2075c     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
20760     00 FA 0D F2 | 	cmp	result1, #0 wz
20764     10 4E 05 51 |  if_ne	add	fp, #16
20768     A7 02 68 5C |  if_ne	wrlong	#1, fp
2076c     10 4E 85 51 |  if_ne	sub	fp, #16
20770                 | LR__3562
20770                 | LR__3563
20770                 | LR__3564
20770                 | LR__3565
20770                 | LR__3566
20770     10 4E 05 F1 | 	add	fp, #16
20774     A7 20 0A FB | 	rdlong	local02, fp wz
20778     10 4E 85 F1 | 	sub	fp, #16
2077c     04 4E 05 51 |  if_ne	add	fp, #4
20780     A7 20 02 5B |  if_ne	rdlong	local02, fp
20784     04 4E 85 51 |  if_ne	sub	fp, #4
20788     10 01 68 5C |  if_ne	wrlong	#0, local02
2078c                 | ' 
2078c                 | ' 	return res ;
2078c     10 4E 05 F1 | 	add	fp, #16
20790     A7 FA 01 FB | 	rdlong	result1, fp
20794     10 4E 85 F1 | 	sub	fp, #16
20798                 | LR__3567
20798     A7 F0 03 F6 | 	mov	ptra, fp
2079c     B2 00 A0 FD | 	call	#popregs_
207a0                 | _fatfs_cc_f_open_ret
207a0     2D 00 64 FD | 	ret
207a4                 | 
207a4                 | _fatfs_cc_f_read
207a4     0E 4A 05 F6 | 	mov	COUNT_, #14
207a8     A8 00 A0 FD | 	call	#pushregs_
207ac     38 F0 07 F1 | 	add	ptra, #56
207b0     04 4E 05 F1 | 	add	fp, #4
207b4     A7 12 62 FC | 	wrlong	arg01, fp
207b8     04 4E 05 F1 | 	add	fp, #4
207bc     A7 14 62 FC | 	wrlong	arg02, fp
207c0     04 4E 05 F1 | 	add	fp, #4
207c4     A7 16 62 FC | 	wrlong	arg03, fp
207c8     04 4E 05 F1 | 	add	fp, #4
207cc     A7 18 62 FC | 	wrlong	arg04, fp
207d0     08 4E 85 F1 | 	sub	fp, #8
207d4     A7 FA 01 FB | 	rdlong	result1, fp
207d8     2C 4E 05 F1 | 	add	fp, #44
207dc     A7 FA 61 FC | 	wrlong	result1, fp
207e0     24 4E 85 F1 | 	sub	fp, #36
207e4     A7 FA 01 FB | 	rdlong	result1, fp
207e8     FD 00 68 FC | 	wrlong	#0, result1
207ec     0C 4E 85 F1 | 	sub	fp, #12
207f0     A7 12 02 FB | 	rdlong	arg01, fp
207f4     14 4E 05 F1 | 	add	fp, #20
207f8     A7 14 02 F6 | 	mov	arg02, fp
207fc     18 4E 85 F1 | 	sub	fp, #24
20800     24 F7 BF FD | 	call	#_fatfs_cc_validate
20804     14 4E 05 F1 | 	add	fp, #20
20808     A7 FA 61 FC | 	wrlong	result1, fp
2080c     00 FA 4D F2 | 	cmps	result1, #0 wz
20810     14 4E 85 F1 | 	sub	fp, #20
20814     20 00 90 5D |  if_ne	jmp	#LR__3570
20818     04 4E 05 F1 | 	add	fp, #4
2081c     A7 14 02 FB | 	rdlong	arg02, fp
20820     11 14 06 F1 | 	add	arg02, #17
20824     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
20828     10 4E 05 F1 | 	add	fp, #16
2082c     A7 14 62 FC | 	wrlong	arg02, fp
20830     14 4E 85 F1 | 	sub	fp, #20
20834     10 00 90 AD |  if_e	jmp	#LR__3571
20838                 | LR__3570
20838     14 4E 05 F1 | 	add	fp, #20
2083c     A7 FA 01 FB | 	rdlong	result1, fp
20840     14 4E 85 F1 | 	sub	fp, #20
20844     EC 05 90 FD | 	jmp	#LR__3590
20848                 | LR__3571
20848     04 4E 05 F1 | 	add	fp, #4
2084c     A7 18 02 FB | 	rdlong	arg04, fp
20850     04 4E 85 F1 | 	sub	fp, #4
20854     10 18 06 F1 | 	add	arg04, #16
20858     0C 19 C2 FA | 	rdbyte	arg04, arg04
2085c     01 18 CE F7 | 	test	arg04, #1 wz
20860     07 FA 05 A6 |  if_e	mov	result1, #7
20864     CC 05 90 AD |  if_e	jmp	#LR__3590
20868     04 4E 05 F1 | 	add	fp, #4
2086c     A7 1E 02 FB | 	rdlong	local01, fp
20870     0F 21 02 F6 | 	mov	local02, local01
20874     0C 20 06 F1 | 	add	local02, #12
20878     10 23 02 FB | 	rdlong	local03, local02
2087c     14 1E 06 F1 | 	add	local01, #20
20880     0F 1F 02 FB | 	rdlong	local01, local01
20884     0F 23 82 F1 | 	sub	local03, local01
20888     20 4E 05 F1 | 	add	fp, #32
2088c     A7 22 62 FC | 	wrlong	local03, fp
20890     18 4E 85 F1 | 	sub	fp, #24
20894     A7 24 02 FB | 	rdlong	local04, fp
20898     0C 4E 85 F1 | 	sub	fp, #12
2089c     11 25 1A F2 | 	cmp	local04, local03 wcz
208a0     24 4E 05 11 |  if_a	add	fp, #36
208a4     A7 24 02 1B |  if_a	rdlong	local04, fp
208a8     18 4E 85 11 |  if_a	sub	fp, #24
208ac     A7 24 62 1C |  if_a	wrlong	local04, fp
208b0     0C 4E 85 11 |  if_a	sub	fp, #12
208b4                 | ' 
208b4                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
208b4                 | LR__3572
208b4     0C 4E 05 F1 | 	add	fp, #12
208b8     A7 20 02 FB | 	rdlong	local02, fp
208bc     0C 4E 85 F1 | 	sub	fp, #12
208c0     10 25 02 F6 | 	mov	local04, local02
208c4     01 24 16 F2 | 	cmp	local04, #1 wc
208c8     64 05 90 CD |  if_b	jmp	#LR__3589
208cc     04 4E 05 F1 | 	add	fp, #4
208d0     A7 22 02 FB | 	rdlong	local03, fp
208d4     04 4E 85 F1 | 	sub	fp, #4
208d8     14 22 06 F1 | 	add	local03, #20
208dc     11 23 02 FB | 	rdlong	local03, local03
208e0     FF 23 CE F7 | 	test	local03, #511 wz
208e4     3C 04 90 5D |  if_ne	jmp	#LR__3587
208e8     04 4E 05 F1 | 	add	fp, #4
208ec     A7 1E 02 FB | 	rdlong	local01, fp
208f0     14 1E 06 F1 | 	add	local01, #20
208f4     0F 23 02 FB | 	rdlong	local03, local01
208f8     09 22 46 F0 | 	shr	local03, #9
208fc     14 4E 05 F1 | 	add	fp, #20
20900     A7 26 02 FB | 	rdlong	local05, fp
20904     13 29 02 F6 | 	mov	local06, local05
20908     0A 28 06 F1 | 	add	local06, #10
2090c     14 2B E2 FA | 	rdword	local07, local06
20910     0A 28 86 F1 | 	sub	local06, #10
20914     15 2D 32 F9 | 	getword	local08, local07, #0
20918     01 2C 86 F1 | 	sub	local08, #1
2091c     16 23 0A F5 | 	and	local03, local08 wz
20920     18 4E 05 F1 | 	add	fp, #24
20924     A7 22 62 FC | 	wrlong	local03, fp
20928     30 4E 85 F1 | 	sub	fp, #48
2092c     E0 00 90 5D |  if_ne	jmp	#LR__3577
20930     04 4E 05 F1 | 	add	fp, #4
20934     A7 22 02 FB | 	rdlong	local03, fp
20938     04 4E 85 F1 | 	sub	fp, #4
2093c     14 22 06 F1 | 	add	local03, #20
20940     11 23 0A FB | 	rdlong	local03, local03 wz
20944     20 00 90 5D |  if_ne	jmp	#LR__3573
20948     04 4E 05 F1 | 	add	fp, #4
2094c     A7 22 02 FB | 	rdlong	local03, fp
20950     08 22 06 F1 | 	add	local03, #8
20954     11 23 02 FB | 	rdlong	local03, local03
20958     18 4E 05 F1 | 	add	fp, #24
2095c     A7 22 62 FC | 	wrlong	local03, fp
20960     1C 4E 85 F1 | 	sub	fp, #28
20964     28 00 90 FD | 	jmp	#LR__3574
20968                 | LR__3573
20968     04 4E 05 F1 | 	add	fp, #4
2096c     A7 2C 02 FB | 	rdlong	local08, fp
20970     16 13 02 F6 | 	mov	arg01, local08
20974     04 4E 85 F1 | 	sub	fp, #4
20978     18 2C 06 F1 | 	add	local08, #24
2097c     16 15 02 FB | 	rdlong	arg02, local08
20980     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
20984     1C 4E 05 F1 | 	add	fp, #28
20988     A7 FA 61 FC | 	wrlong	result1, fp
2098c     1C 4E 85 F1 | 	sub	fp, #28
20990                 | LR__3574
20990     1C 4E 05 F1 | 	add	fp, #28
20994     A7 22 02 FB | 	rdlong	local03, fp
20998     1C 4E 85 F1 | 	sub	fp, #28
2099c     02 22 16 F2 | 	cmp	local03, #2 wc
209a0     1C 00 90 3D |  if_ae	jmp	#LR__3575
209a4     04 4E 05 F1 | 	add	fp, #4
209a8     A7 22 02 FB | 	rdlong	local03, fp
209ac     04 4E 85 F1 | 	sub	fp, #4
209b0     11 22 06 F1 | 	add	local03, #17
209b4     11 05 48 FC | 	wrbyte	#2, local03
209b8     02 FA 05 F6 | 	mov	result1, #2
209bc     74 04 90 FD | 	jmp	#LR__3590
209c0                 | LR__3575
209c0     1C 4E 05 F1 | 	add	fp, #28
209c4     A7 22 02 FB | 	rdlong	local03, fp
209c8     1C 4E 85 F1 | 	sub	fp, #28
209cc     FF FF 7F FF 
209d0     FF 23 0E F2 | 	cmp	local03, ##-1 wz
209d4     1C 00 90 5D |  if_ne	jmp	#LR__3576
209d8     04 4E 05 F1 | 	add	fp, #4
209dc     A7 22 02 FB | 	rdlong	local03, fp
209e0     04 4E 85 F1 | 	sub	fp, #4
209e4     11 22 06 F1 | 	add	local03, #17
209e8     11 03 48 FC | 	wrbyte	#1, local03
209ec     01 FA 05 F6 | 	mov	result1, #1
209f0     40 04 90 FD | 	jmp	#LR__3590
209f4                 | LR__3576
209f4     04 4E 05 F1 | 	add	fp, #4
209f8     A7 22 02 FB | 	rdlong	local03, fp
209fc     18 4E 05 F1 | 	add	fp, #24
20a00     A7 2C 02 FB | 	rdlong	local08, fp
20a04     1C 4E 85 F1 | 	sub	fp, #28
20a08     18 22 06 F1 | 	add	local03, #24
20a0c     11 2D 62 FC | 	wrlong	local08, local03
20a10                 | LR__3577
20a10     18 4E 05 F1 | 	add	fp, #24
20a14     A7 12 02 FB | 	rdlong	arg01, fp
20a18     14 4E 85 F1 | 	sub	fp, #20
20a1c     A7 22 02 FB | 	rdlong	local03, fp
20a20     04 4E 85 F1 | 	sub	fp, #4
20a24     18 22 06 F1 | 	add	local03, #24
20a28     11 15 02 FB | 	rdlong	arg02, local03
20a2c     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
20a30     20 4E 05 F1 | 	add	fp, #32
20a34     A7 FA 61 FC | 	wrlong	result1, fp
20a38     20 4E 85 F1 | 	sub	fp, #32
20a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
20a40     1C 00 90 5D |  if_ne	jmp	#LR__3578
20a44     04 4E 05 F1 | 	add	fp, #4
20a48     A7 22 02 FB | 	rdlong	local03, fp
20a4c     04 4E 85 F1 | 	sub	fp, #4
20a50     11 22 06 F1 | 	add	local03, #17
20a54     11 05 48 FC | 	wrbyte	#2, local03
20a58     02 FA 05 F6 | 	mov	result1, #2
20a5c     D4 03 90 FD | 	jmp	#LR__3590
20a60                 | LR__3578
20a60     20 4E 05 F1 | 	add	fp, #32
20a64     A7 22 02 FB | 	rdlong	local03, fp
20a68     10 4E 05 F1 | 	add	fp, #16
20a6c     A7 2C 02 FB | 	rdlong	local08, fp
20a70     16 23 02 F1 | 	add	local03, local08
20a74     10 4E 85 F1 | 	sub	fp, #16
20a78     A7 22 62 FC | 	wrlong	local03, fp
20a7c     14 4E 85 F1 | 	sub	fp, #20
20a80     A7 22 02 FB | 	rdlong	local03, fp
20a84     09 22 46 F0 | 	shr	local03, #9
20a88     20 4E 05 F1 | 	add	fp, #32
20a8c     A7 22 62 FC | 	wrlong	local03, fp
20a90     2C 4E 85 F1 | 	sub	fp, #44
20a94     01 22 16 F2 | 	cmp	local03, #1 wc
20a98     5C 01 90 CD |  if_b	jmp	#LR__3582
20a9c     30 4E 05 F1 | 	add	fp, #48
20aa0     A7 22 02 FB | 	rdlong	local03, fp
20aa4     04 4E 85 F1 | 	sub	fp, #4
20aa8     A7 2C 02 FB | 	rdlong	local08, fp
20aac     16 23 02 F1 | 	add	local03, local08
20ab0     14 4E 85 F1 | 	sub	fp, #20
20ab4     A7 2C 02 FB | 	rdlong	local08, fp
20ab8     18 4E 85 F1 | 	sub	fp, #24
20abc     0A 2C 06 F1 | 	add	local08, #10
20ac0     16 2D E2 FA | 	rdword	local08, local08
20ac4     16 23 1A F2 | 	cmp	local03, local08 wcz
20ac8     28 00 90 ED |  if_be	jmp	#LR__3579
20acc     18 4E 05 F1 | 	add	fp, #24
20ad0     A7 1E 02 FB | 	rdlong	local01, fp
20ad4     0A 1E 06 F1 | 	add	local01, #10
20ad8     0F 23 E2 FA | 	rdword	local03, local01
20adc     18 4E 05 F1 | 	add	fp, #24
20ae0     A7 2C 02 FB | 	rdlong	local08, fp
20ae4     16 23 82 F1 | 	sub	local03, local08
20ae8     04 4E 85 F1 | 	sub	fp, #4
20aec     A7 22 62 FC | 	wrlong	local03, fp
20af0     2C 4E 85 F1 | 	sub	fp, #44
20af4                 | LR__3579
20af4     18 4E 05 F1 | 	add	fp, #24
20af8     A7 1E 02 FB | 	rdlong	local01, fp
20afc     01 1E 06 F1 | 	add	local01, #1
20b00     0F 13 C2 FA | 	rdbyte	arg01, local01
20b04     1C 4E 05 F1 | 	add	fp, #28
20b08     A7 14 02 FB | 	rdlong	arg02, fp
20b0c     14 4E 85 F1 | 	sub	fp, #20
20b10     A7 16 02 FB | 	rdlong	arg03, fp
20b14     0C 4E 05 F1 | 	add	fp, #12
20b18     A7 18 02 FB | 	rdlong	arg04, fp
20b1c     2C 4E 85 F1 | 	sub	fp, #44
20b20     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
20b24     00 FA 0D F2 | 	cmp	result1, #0 wz
20b28     1C 00 90 AD |  if_e	jmp	#LR__3580
20b2c     04 4E 05 F1 | 	add	fp, #4
20b30     A7 22 02 FB | 	rdlong	local03, fp
20b34     04 4E 85 F1 | 	sub	fp, #4
20b38     11 22 06 F1 | 	add	local03, #17
20b3c     11 03 48 FC | 	wrbyte	#1, local03
20b40     01 FA 05 F6 | 	mov	result1, #1
20b44     EC 02 90 FD | 	jmp	#LR__3590
20b48                 | LR__3580
20b48     04 4E 05 F1 | 	add	fp, #4
20b4c     A7 1E 02 FB | 	rdlong	local01, fp
20b50     04 4E 85 F1 | 	sub	fp, #4
20b54     10 1E 06 F1 | 	add	local01, #16
20b58     0F 23 C2 FA | 	rdbyte	local03, local01
20b5c     80 22 CE F7 | 	test	local03, #128 wz
20b60     78 00 90 AD |  if_e	jmp	#LR__3581
20b64     04 4E 05 F1 | 	add	fp, #4
20b68     A7 2C 02 FB | 	rdlong	local08, fp
20b6c     1C 2C 06 F1 | 	add	local08, #28
20b70     16 2D 02 FB | 	rdlong	local08, local08
20b74     1C 4E 05 F1 | 	add	fp, #28
20b78     A7 2E 02 FB | 	rdlong	local09, fp
20b7c     17 2D 82 F1 | 	sub	local08, local09
20b80     0C 4E 05 F1 | 	add	fp, #12
20b84     A7 30 02 FB | 	rdlong	local10, fp
20b88     2C 4E 85 F1 | 	sub	fp, #44
20b8c     18 33 02 F6 | 	mov	local11, local10
20b90     19 2D 12 F2 | 	cmp	local08, local11 wc
20b94     44 00 90 3D |  if_ae	jmp	#LR__3581
20b98     34 4E 05 F1 | 	add	fp, #52
20b9c     A7 12 02 FB | 	rdlong	arg01, fp
20ba0     30 4E 85 F1 | 	sub	fp, #48
20ba4     A7 14 02 FB | 	rdlong	arg02, fp
20ba8     0A 33 02 F6 | 	mov	local11, arg02
20bac     1C 32 06 F1 | 	add	local11, #28
20bb0     19 2F 02 FB | 	rdlong	local09, local11
20bb4     1C 4E 05 F1 | 	add	fp, #28
20bb8     A7 26 02 FB | 	rdlong	local05, fp
20bbc     13 2F 82 F1 | 	sub	local09, local05
20bc0     09 2E 66 F0 | 	shl	local09, #9
20bc4     17 33 02 F6 | 	mov	local11, local09
20bc8     17 13 02 F1 | 	add	arg01, local09
20bcc     20 4E 85 F1 | 	sub	fp, #32
20bd0     28 14 06 F1 | 	add	arg02, #40
20bd4     09 16 C6 F9 | 	decod	arg03, #9
20bd8     8C 4E BF FD | 	call	#__system____builtin_memmove
20bdc                 | LR__3581
20bdc     2C 4E 05 F1 | 	add	fp, #44
20be0     A7 22 02 FB | 	rdlong	local03, fp
20be4     09 22 66 F0 | 	shl	local03, #9
20be8     04 4E 85 F1 | 	sub	fp, #4
20bec     A7 22 62 FC | 	wrlong	local03, fp
20bf0     28 4E 85 F1 | 	sub	fp, #40
20bf4                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
20bf4                 | ' 				}
20bf4                 | ' 
20bf4                 | ' 
20bf4                 | ' 				rcnt =  ((UINT) 512 )  * cc;
20bf4                 | ' 				continue;
20bf4     B4 01 90 FD | 	jmp	#LR__3588
20bf8                 | LR__3582
20bf8     04 4E 05 F1 | 	add	fp, #4
20bfc     A7 22 02 FB | 	rdlong	local03, fp
20c00     1C 22 06 F1 | 	add	local03, #28
20c04     11 23 02 FB | 	rdlong	local03, local03
20c08     1C 4E 05 F1 | 	add	fp, #28
20c0c     A7 1E 02 FB | 	rdlong	local01, fp
20c10     20 4E 85 F1 | 	sub	fp, #32
20c14     0F 23 0A F2 | 	cmp	local03, local01 wz
20c18     EC 00 90 AD |  if_e	jmp	#LR__3586
20c1c     04 4E 05 F1 | 	add	fp, #4
20c20     A7 1E 02 FB | 	rdlong	local01, fp
20c24     04 4E 85 F1 | 	sub	fp, #4
20c28     10 1E 06 F1 | 	add	local01, #16
20c2c     0F 23 C2 FA | 	rdbyte	local03, local01
20c30     80 22 CE F7 | 	test	local03, #128 wz
20c34     7C 00 90 AD |  if_e	jmp	#LR__3584
20c38     18 4E 05 F1 | 	add	fp, #24
20c3c     A7 1E 02 FB | 	rdlong	local01, fp
20c40     01 1E 06 F1 | 	add	local01, #1
20c44     0F 13 C2 FA | 	rdbyte	arg01, local01
20c48     14 4E 85 F1 | 	sub	fp, #20
20c4c     A7 22 02 FB | 	rdlong	local03, fp
20c50     11 15 02 F6 | 	mov	arg02, local03
20c54     28 14 06 F1 | 	add	arg02, #40
20c58     04 4E 85 F1 | 	sub	fp, #4
20c5c     1C 22 06 F1 | 	add	local03, #28
20c60     11 17 02 FB | 	rdlong	arg03, local03
20c64     01 18 06 F6 | 	mov	arg04, #1
20c68     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
20c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
20c70     1C 00 90 AD |  if_e	jmp	#LR__3583
20c74     04 4E 05 F1 | 	add	fp, #4
20c78     A7 22 02 FB | 	rdlong	local03, fp
20c7c     04 4E 85 F1 | 	sub	fp, #4
20c80     11 22 06 F1 | 	add	local03, #17
20c84     11 03 48 FC | 	wrbyte	#1, local03
20c88     01 FA 05 F6 | 	mov	result1, #1
20c8c     A4 01 90 FD | 	jmp	#LR__3590
20c90                 | LR__3583
20c90     04 4E 05 F1 | 	add	fp, #4
20c94     A7 32 02 FB | 	rdlong	local11, fp
20c98     19 23 02 F6 | 	mov	local03, local11
20c9c     04 4E 85 F1 | 	sub	fp, #4
20ca0     10 32 06 F1 | 	add	local11, #16
20ca4     19 33 C2 FA | 	rdbyte	local11, local11
20ca8     7F 32 06 F5 | 	and	local11, #127
20cac     10 22 06 F1 | 	add	local03, #16
20cb0     11 33 42 FC | 	wrbyte	local11, local03
20cb4                 | LR__3584
20cb4     18 4E 05 F1 | 	add	fp, #24
20cb8     A7 1E 02 FB | 	rdlong	local01, fp
20cbc     01 1E 06 F1 | 	add	local01, #1
20cc0     0F 13 C2 FA | 	rdbyte	arg01, local01
20cc4     14 4E 85 F1 | 	sub	fp, #20
20cc8     A7 14 02 FB | 	rdlong	arg02, fp
20ccc     28 14 06 F1 | 	add	arg02, #40
20cd0     1C 4E 05 F1 | 	add	fp, #28
20cd4     A7 16 02 FB | 	rdlong	arg03, fp
20cd8     20 4E 85 F1 | 	sub	fp, #32
20cdc     01 18 06 F6 | 	mov	arg04, #1
20ce0     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
20ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
20ce8     1C 00 90 AD |  if_e	jmp	#LR__3585
20cec     04 4E 05 F1 | 	add	fp, #4
20cf0     A7 22 02 FB | 	rdlong	local03, fp
20cf4     04 4E 85 F1 | 	sub	fp, #4
20cf8     11 22 06 F1 | 	add	local03, #17
20cfc     11 03 48 FC | 	wrbyte	#1, local03
20d00     01 FA 05 F6 | 	mov	result1, #1
20d04     2C 01 90 FD | 	jmp	#LR__3590
20d08                 | LR__3585
20d08                 | LR__3586
20d08     04 4E 05 F1 | 	add	fp, #4
20d0c     A7 22 02 FB | 	rdlong	local03, fp
20d10     1C 4E 05 F1 | 	add	fp, #28
20d14     A7 32 02 FB | 	rdlong	local11, fp
20d18     20 4E 85 F1 | 	sub	fp, #32
20d1c     1C 22 06 F1 | 	add	local03, #28
20d20     11 33 62 FC | 	wrlong	local11, local03
20d24                 | LR__3587
20d24     04 4E 05 F1 | 	add	fp, #4
20d28     A7 1E 02 FB | 	rdlong	local01, fp
20d2c     14 1E 06 F1 | 	add	local01, #20
20d30     0F 33 02 FB | 	rdlong	local11, local01
20d34     FF 33 06 F5 | 	and	local11, #511
20d38     09 22 C6 F9 | 	decod	local03, #9
20d3c     19 23 82 F1 | 	sub	local03, local11
20d40     24 4E 05 F1 | 	add	fp, #36
20d44     A7 22 62 FC | 	wrlong	local03, fp
20d48     1C 4E 85 F1 | 	sub	fp, #28
20d4c     A7 32 02 FB | 	rdlong	local11, fp
20d50     0C 4E 85 F1 | 	sub	fp, #12
20d54     19 23 1A F2 | 	cmp	local03, local11 wcz
20d58     0C 4E 05 11 |  if_a	add	fp, #12
20d5c     A7 22 02 1B |  if_a	rdlong	local03, fp
20d60     1C 4E 05 11 |  if_a	add	fp, #28
20d64     A7 22 62 1C |  if_a	wrlong	local03, fp
20d68     28 4E 85 11 |  if_a	sub	fp, #40
20d6c     34 4E 05 F1 | 	add	fp, #52
20d70     A7 12 02 FB | 	rdlong	arg01, fp
20d74     30 4E 85 F1 | 	sub	fp, #48
20d78     A7 28 02 FB | 	rdlong	local06, fp
20d7c     14 15 02 F6 | 	mov	arg02, local06
20d80     28 14 06 F1 | 	add	arg02, #40
20d84     14 28 06 F1 | 	add	local06, #20
20d88     14 33 02 FB | 	rdlong	local11, local06
20d8c     19 2F 02 F6 | 	mov	local09, local11
20d90     17 31 02 F6 | 	mov	local10, local09
20d94     FF 31 06 F5 | 	and	local10, #511
20d98     18 15 02 F1 | 	add	arg02, local10
20d9c     24 4E 05 F1 | 	add	fp, #36
20da0     A7 16 02 FB | 	rdlong	arg03, fp
20da4     28 4E 85 F1 | 	sub	fp, #40
20da8     BC 4C BF FD | 	call	#__system____builtin_memmove
20dac                 | LR__3588
20dac     0C 4E 05 F1 | 	add	fp, #12
20db0     A7 22 02 FB | 	rdlong	local03, fp
20db4     1C 4E 05 F1 | 	add	fp, #28
20db8     A7 2C 02 FB | 	rdlong	local08, fp
20dbc     16 23 82 F1 | 	sub	local03, local08
20dc0     1C 4E 85 F1 | 	sub	fp, #28
20dc4     A7 22 62 FC | 	wrlong	local03, fp
20dc8     04 4E 05 F1 | 	add	fp, #4
20dcc     A7 1E 02 FB | 	rdlong	local01, fp
20dd0     0F 2B 02 FB | 	rdlong	local07, local01
20dd4     18 4E 05 F1 | 	add	fp, #24
20dd8     A7 2C 02 FB | 	rdlong	local08, fp
20ddc     16 2B 02 F1 | 	add	local07, local08
20de0     0F 2B 62 FC | 	wrlong	local07, local01
20de4     0C 4E 05 F1 | 	add	fp, #12
20de8     A7 22 02 FB | 	rdlong	local03, fp
20dec     0C 4E 85 F1 | 	sub	fp, #12
20df0     A7 34 02 FB | 	rdlong	local12, fp
20df4     1A 23 02 F1 | 	add	local03, local12
20df8     0C 4E 05 F1 | 	add	fp, #12
20dfc     A7 22 62 FC | 	wrlong	local03, fp
20e00     30 4E 85 F1 | 	sub	fp, #48
20e04     A7 36 02 FB | 	rdlong	local13, fp
20e08     1B 23 02 F6 | 	mov	local03, local13
20e0c     14 36 06 F1 | 	add	local13, #20
20e10     1B 39 02 FB | 	rdlong	local14, local13
20e14     24 4E 05 F1 | 	add	fp, #36
20e18     A7 28 02 FB | 	rdlong	local06, fp
20e1c     28 4E 85 F1 | 	sub	fp, #40
20e20     14 39 02 F1 | 	add	local14, local06
20e24     14 22 06 F1 | 	add	local03, #20
20e28     11 39 62 FC | 	wrlong	local14, local03
20e2c     84 FA 9F FD | 	jmp	#LR__3572
20e30                 | LR__3589
20e30                 | ' 
20e30                 | ' 
20e30                 | ' 
20e30                 | ' 
20e30                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
20e30                 | ' 
20e30                 | ' 	}
20e30                 | ' 
20e30                 | ' 	return FR_OK ;
20e30     00 FA 05 F6 | 	mov	result1, #0
20e34                 | LR__3590
20e34     A7 F0 03 F6 | 	mov	ptra, fp
20e38     B2 00 A0 FD | 	call	#popregs_
20e3c                 | _fatfs_cc_f_read_ret
20e3c     2D 00 64 FD | 	ret
20e40                 | 
20e40                 | _fatfs_cc_f_write
20e40     15 4A 05 F6 | 	mov	COUNT_, #21
20e44     A8 00 A0 FD | 	call	#pushregs_
20e48     34 F0 07 F1 | 	add	ptra, #52
20e4c     04 4E 05 F1 | 	add	fp, #4
20e50     A7 12 62 FC | 	wrlong	arg01, fp
20e54     04 4E 05 F1 | 	add	fp, #4
20e58     A7 14 62 FC | 	wrlong	arg02, fp
20e5c     04 4E 05 F1 | 	add	fp, #4
20e60     A7 16 62 FC | 	wrlong	arg03, fp
20e64     04 4E 05 F1 | 	add	fp, #4
20e68     A7 18 62 FC | 	wrlong	arg04, fp
20e6c     08 4E 85 F1 | 	sub	fp, #8
20e70     A7 FA 01 FB | 	rdlong	result1, fp
20e74     28 4E 05 F1 | 	add	fp, #40
20e78     A7 FA 61 FC | 	wrlong	result1, fp
20e7c     20 4E 85 F1 | 	sub	fp, #32
20e80     A7 FA 01 FB | 	rdlong	result1, fp
20e84     FD 00 68 FC | 	wrlong	#0, result1
20e88     0C 4E 85 F1 | 	sub	fp, #12
20e8c     A7 12 02 FB | 	rdlong	arg01, fp
20e90     14 4E 05 F1 | 	add	fp, #20
20e94     A7 14 02 F6 | 	mov	arg02, fp
20e98     18 4E 85 F1 | 	sub	fp, #24
20e9c     88 F0 BF FD | 	call	#_fatfs_cc_validate
20ea0     14 4E 05 F1 | 	add	fp, #20
20ea4     A7 FA 61 FC | 	wrlong	result1, fp
20ea8     00 FA 4D F2 | 	cmps	result1, #0 wz
20eac     14 4E 85 F1 | 	sub	fp, #20
20eb0     20 00 90 5D |  if_ne	jmp	#LR__3600
20eb4     04 4E 05 F1 | 	add	fp, #4
20eb8     A7 14 02 FB | 	rdlong	arg02, fp
20ebc     11 14 06 F1 | 	add	arg02, #17
20ec0     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
20ec4     10 4E 05 F1 | 	add	fp, #16
20ec8     A7 14 62 FC | 	wrlong	arg02, fp
20ecc     14 4E 85 F1 | 	sub	fp, #20
20ed0     10 00 90 AD |  if_e	jmp	#LR__3601
20ed4                 | LR__3600
20ed4     14 4E 05 F1 | 	add	fp, #20
20ed8     A7 FA 01 FB | 	rdlong	result1, fp
20edc     14 4E 85 F1 | 	sub	fp, #20
20ee0     44 07 90 FD | 	jmp	#LR__3623
20ee4                 | LR__3601
20ee4     04 4E 05 F1 | 	add	fp, #4
20ee8     A7 14 02 FB | 	rdlong	arg02, fp
20eec     04 4E 85 F1 | 	sub	fp, #4
20ef0     10 14 06 F1 | 	add	arg02, #16
20ef4     0A 15 C2 FA | 	rdbyte	arg02, arg02
20ef8     02 14 CE F7 | 	test	arg02, #2 wz
20efc     07 FA 05 A6 |  if_e	mov	result1, #7
20f00     24 07 90 AD |  if_e	jmp	#LR__3623
20f04     04 4E 05 F1 | 	add	fp, #4
20f08     A7 14 02 FB | 	rdlong	arg02, fp
20f0c     0A 13 02 F6 | 	mov	arg01, arg02
20f10     14 12 06 F1 | 	add	arg01, #20
20f14     09 13 02 FB | 	rdlong	arg01, arg01
20f18     08 4E 05 F1 | 	add	fp, #8
20f1c     A7 FA 01 FB | 	rdlong	result1, fp
20f20     FD 12 02 F1 | 	add	arg01, result1
20f24     0C 4E 85 F1 | 	sub	fp, #12
20f28     14 14 06 F1 | 	add	arg02, #20
20f2c     0A FB 01 FB | 	rdlong	result1, arg02
20f30     FD 12 12 F2 | 	cmp	arg01, result1 wc
20f34     24 00 90 3D |  if_ae	jmp	#LR__3602
20f38     04 4E 05 F1 | 	add	fp, #4
20f3c     A7 14 02 FB | 	rdlong	arg02, fp
20f40     01 FA 65 F6 | 	neg	result1, #1
20f44     14 14 06 F1 | 	add	arg02, #20
20f48     0A 15 02 FB | 	rdlong	arg02, arg02
20f4c     0A FB 81 F1 | 	sub	result1, arg02
20f50     08 4E 05 F1 | 	add	fp, #8
20f54     A7 FA 61 FC | 	wrlong	result1, fp
20f58     0C 4E 85 F1 | 	sub	fp, #12
20f5c                 | LR__3602
20f5c                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
20f5c                 | ' 	}
20f5c                 | ' 
20f5c                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
20f5c                 | LR__3603
20f5c     0C 4E 05 F1 | 	add	fp, #12
20f60     A7 FA 01 FB | 	rdlong	result1, fp
20f64     0C 4E 85 F1 | 	sub	fp, #12
20f68     01 FA 15 F2 | 	cmp	result1, #1 wc
20f6c     90 06 90 CD |  if_b	jmp	#LR__3622
20f70     04 4E 05 F1 | 	add	fp, #4
20f74     A7 FA 01 FB | 	rdlong	result1, fp
20f78     04 4E 85 F1 | 	sub	fp, #4
20f7c     14 FA 05 F1 | 	add	result1, #20
20f80     FD FA 01 FB | 	rdlong	result1, result1
20f84     FF FB CD F7 | 	test	result1, #511 wz
20f88     D8 04 90 5D |  if_ne	jmp	#LR__3618
20f8c     04 4E 05 F1 | 	add	fp, #4
20f90     A7 FA 01 FB | 	rdlong	result1, fp
20f94     14 FA 05 F1 | 	add	result1, #20
20f98     FD FA 01 FB | 	rdlong	result1, result1
20f9c     09 FA 45 F0 | 	shr	result1, #9
20fa0     14 4E 05 F1 | 	add	fp, #20
20fa4     A7 14 02 FB | 	rdlong	arg02, fp
20fa8     0A 14 06 F1 | 	add	arg02, #10
20fac     0A 19 E2 FA | 	rdword	arg04, arg02
20fb0     0C 15 32 F9 | 	getword	arg02, arg04, #0
20fb4     01 14 86 F1 | 	sub	arg02, #1
20fb8     0A FB 09 F5 | 	and	result1, arg02 wz
20fbc     14 4E 05 F1 | 	add	fp, #20
20fc0     A7 FA 61 FC | 	wrlong	result1, fp
20fc4     2C 4E 85 F1 | 	sub	fp, #44
20fc8     44 01 90 5D |  if_ne	jmp	#LR__3609
20fcc     04 4E 05 F1 | 	add	fp, #4
20fd0     A7 FA 01 FB | 	rdlong	result1, fp
20fd4     04 4E 85 F1 | 	sub	fp, #4
20fd8     14 FA 05 F1 | 	add	result1, #20
20fdc     FD 14 0A FB | 	rdlong	arg02, result1 wz
20fe0     44 00 90 5D |  if_ne	jmp	#LR__3604
20fe4     04 4E 05 F1 | 	add	fp, #4
20fe8     A7 14 02 FB | 	rdlong	arg02, fp
20fec     08 14 06 F1 | 	add	arg02, #8
20ff0     0A 15 0A FB | 	rdlong	arg02, arg02 wz
20ff4     18 4E 05 F1 | 	add	fp, #24
20ff8     A7 14 62 FC | 	wrlong	arg02, fp
20ffc     1C 4E 85 F1 | 	sub	fp, #28
21000     4C 00 90 5D |  if_ne	jmp	#LR__3605
21004     04 4E 05 F1 | 	add	fp, #4
21008     A7 12 02 FB | 	rdlong	arg01, fp
2100c     04 4E 85 F1 | 	sub	fp, #4
21010     00 14 06 F6 | 	mov	arg02, #0
21014     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
21018     1C 4E 05 F1 | 	add	fp, #28
2101c     A7 FA 61 FC | 	wrlong	result1, fp
21020     1C 4E 85 F1 | 	sub	fp, #28
21024     28 00 90 FD | 	jmp	#LR__3605
21028                 | LR__3604
21028     04 4E 05 F1 | 	add	fp, #4
2102c     A7 18 02 FB | 	rdlong	arg04, fp
21030     0C 13 02 F6 | 	mov	arg01, arg04
21034     04 4E 85 F1 | 	sub	fp, #4
21038     18 18 06 F1 | 	add	arg04, #24
2103c     0C 15 02 FB | 	rdlong	arg02, arg04
21040     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
21044     1C 4E 05 F1 | 	add	fp, #28
21048     A7 FA 61 FC | 	wrlong	result1, fp
2104c     1C 4E 85 F1 | 	sub	fp, #28
21050                 | LR__3605
21050     1C 4E 05 F1 | 	add	fp, #28
21054     A7 FA 09 FB | 	rdlong	result1, fp wz
21058     1C 4E 85 F1 | 	sub	fp, #28
2105c     A0 05 90 AD |  if_e	jmp	#LR__3622
21060     1C 4E 05 F1 | 	add	fp, #28
21064     A7 FA 01 FB | 	rdlong	result1, fp
21068     1C 4E 85 F1 | 	sub	fp, #28
2106c     01 FA 0D F2 | 	cmp	result1, #1 wz
21070     1C 00 90 5D |  if_ne	jmp	#LR__3606
21074     04 4E 05 F1 | 	add	fp, #4
21078     A7 FA 01 FB | 	rdlong	result1, fp
2107c     04 4E 85 F1 | 	sub	fp, #4
21080     11 FA 05 F1 | 	add	result1, #17
21084     FD 04 48 FC | 	wrbyte	#2, result1
21088     02 FA 05 F6 | 	mov	result1, #2
2108c     98 05 90 FD | 	jmp	#LR__3623
21090                 | LR__3606
21090     1C 4E 05 F1 | 	add	fp, #28
21094     A7 FA 01 FB | 	rdlong	result1, fp
21098     1C 4E 85 F1 | 	sub	fp, #28
2109c     FF FF 7F FF 
210a0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
210a4     1C 00 90 5D |  if_ne	jmp	#LR__3607
210a8     04 4E 05 F1 | 	add	fp, #4
210ac     A7 FA 01 FB | 	rdlong	result1, fp
210b0     04 4E 85 F1 | 	sub	fp, #4
210b4     11 FA 05 F1 | 	add	result1, #17
210b8     FD 02 48 FC | 	wrbyte	#1, result1
210bc     01 FA 05 F6 | 	mov	result1, #1
210c0     64 05 90 FD | 	jmp	#LR__3623
210c4                 | LR__3607
210c4     04 4E 05 F1 | 	add	fp, #4
210c8     A7 FA 01 FB | 	rdlong	result1, fp
210cc     18 4E 05 F1 | 	add	fp, #24
210d0     A7 18 02 FB | 	rdlong	arg04, fp
210d4     18 FA 05 F1 | 	add	result1, #24
210d8     FD 18 62 FC | 	wrlong	arg04, result1
210dc     18 4E 85 F1 | 	sub	fp, #24
210e0     A7 FA 01 FB | 	rdlong	result1, fp
210e4     04 4E 85 F1 | 	sub	fp, #4
210e8     08 FA 05 F1 | 	add	result1, #8
210ec     FD FA 09 FB | 	rdlong	result1, result1 wz
210f0     1C 00 90 5D |  if_ne	jmp	#LR__3608
210f4     04 4E 05 F1 | 	add	fp, #4
210f8     A7 18 02 FB | 	rdlong	arg04, fp
210fc     18 4E 05 F1 | 	add	fp, #24
21100     A7 FA 01 FB | 	rdlong	result1, fp
21104     1C 4E 85 F1 | 	sub	fp, #28
21108     08 18 06 F1 | 	add	arg04, #8
2110c     0C FB 61 FC | 	wrlong	result1, arg04
21110                 | LR__3608
21110                 | LR__3609
21110     04 4E 05 F1 | 	add	fp, #4
21114     A7 18 02 FB | 	rdlong	arg04, fp
21118     04 4E 85 F1 | 	sub	fp, #4
2111c     10 18 06 F1 | 	add	arg04, #16
21120     0C 19 C2 FA | 	rdbyte	arg04, arg04
21124     80 18 CE F7 | 	test	arg04, #128 wz
21128     7C 00 90 AD |  if_e	jmp	#LR__3611
2112c     18 4E 05 F1 | 	add	fp, #24
21130     A7 18 02 FB | 	rdlong	arg04, fp
21134     01 18 06 F1 | 	add	arg04, #1
21138     0C 13 C2 FA | 	rdbyte	arg01, arg04
2113c     14 4E 85 F1 | 	sub	fp, #20
21140     A7 18 02 FB | 	rdlong	arg04, fp
21144     0C 15 02 F6 | 	mov	arg02, arg04
21148     28 14 06 F1 | 	add	arg02, #40
2114c     04 4E 85 F1 | 	sub	fp, #4
21150     1C 18 06 F1 | 	add	arg04, #28
21154     0C 17 02 FB | 	rdlong	arg03, arg04
21158     01 18 06 F6 | 	mov	arg04, #1
2115c     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
21160     00 FA 0D F2 | 	cmp	result1, #0 wz
21164     1C 00 90 AD |  if_e	jmp	#LR__3610
21168     04 4E 05 F1 | 	add	fp, #4
2116c     A7 FA 01 FB | 	rdlong	result1, fp
21170     04 4E 85 F1 | 	sub	fp, #4
21174     11 FA 05 F1 | 	add	result1, #17
21178     FD 02 48 FC | 	wrbyte	#1, result1
2117c     01 FA 05 F6 | 	mov	result1, #1
21180     A4 04 90 FD | 	jmp	#LR__3623
21184                 | LR__3610
21184     04 4E 05 F1 | 	add	fp, #4
21188     A7 18 02 FB | 	rdlong	arg04, fp
2118c     0C FB 01 F6 | 	mov	result1, arg04
21190     04 4E 85 F1 | 	sub	fp, #4
21194     10 18 06 F1 | 	add	arg04, #16
21198     0C 19 C2 FA | 	rdbyte	arg04, arg04
2119c     7F 18 06 F5 | 	and	arg04, #127
211a0     10 FA 05 F1 | 	add	result1, #16
211a4     FD 18 42 FC | 	wrbyte	arg04, result1
211a8                 | LR__3611
211a8     18 4E 05 F1 | 	add	fp, #24
211ac     A7 12 02 FB | 	rdlong	arg01, fp
211b0     14 4E 85 F1 | 	sub	fp, #20
211b4     A7 14 02 FB | 	rdlong	arg02, fp
211b8     04 4E 85 F1 | 	sub	fp, #4
211bc     18 14 06 F1 | 	add	arg02, #24
211c0     0A 15 02 FB | 	rdlong	arg02, arg02
211c4     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
211c8     20 4E 05 F1 | 	add	fp, #32
211cc     A7 FA 61 FC | 	wrlong	result1, fp
211d0     20 4E 85 F1 | 	sub	fp, #32
211d4     00 FA 0D F2 | 	cmp	result1, #0 wz
211d8     1C 00 90 5D |  if_ne	jmp	#LR__3612
211dc     04 4E 05 F1 | 	add	fp, #4
211e0     A7 FA 01 FB | 	rdlong	result1, fp
211e4     04 4E 85 F1 | 	sub	fp, #4
211e8     11 FA 05 F1 | 	add	result1, #17
211ec     FD 04 48 FC | 	wrbyte	#2, result1
211f0     02 FA 05 F6 | 	mov	result1, #2
211f4     30 04 90 FD | 	jmp	#LR__3623
211f8                 | LR__3612
211f8     20 4E 05 F1 | 	add	fp, #32
211fc     A7 FA 01 FB | 	rdlong	result1, fp
21200     0C 4E 05 F1 | 	add	fp, #12
21204     A7 1E 02 FB | 	rdlong	local01, fp
21208     0F FB 01 F1 | 	add	result1, local01
2120c     0C 4E 85 F1 | 	sub	fp, #12
21210     A7 FA 61 FC | 	wrlong	result1, fp
21214     14 4E 85 F1 | 	sub	fp, #20
21218     A7 FA 01 FB | 	rdlong	result1, fp
2121c     09 FA 45 F0 | 	shr	result1, #9
21220     1C 4E 05 F1 | 	add	fp, #28
21224     A7 FA 61 FC | 	wrlong	result1, fp
21228     28 4E 85 F1 | 	sub	fp, #40
2122c     01 FA 15 F2 | 	cmp	result1, #1 wc
21230     60 01 90 CD |  if_b	jmp	#LR__3616
21234     2C 4E 05 F1 | 	add	fp, #44
21238     A7 FA 01 FB | 	rdlong	result1, fp
2123c     04 4E 85 F1 | 	sub	fp, #4
21240     A7 18 02 FB | 	rdlong	arg04, fp
21244     0C FB 01 F1 | 	add	result1, arg04
21248     10 4E 85 F1 | 	sub	fp, #16
2124c     A7 18 02 FB | 	rdlong	arg04, fp
21250     18 4E 85 F1 | 	sub	fp, #24
21254     0A 18 06 F1 | 	add	arg04, #10
21258     0C 19 E2 FA | 	rdword	arg04, arg04
2125c     0C FB 19 F2 | 	cmp	result1, arg04 wcz
21260     28 00 90 ED |  if_be	jmp	#LR__3613
21264     18 4E 05 F1 | 	add	fp, #24
21268     A7 FA 01 FB | 	rdlong	result1, fp
2126c     0A FA 05 F1 | 	add	result1, #10
21270     FD FA E1 FA | 	rdword	result1, result1
21274     14 4E 05 F1 | 	add	fp, #20
21278     A7 18 02 FB | 	rdlong	arg04, fp
2127c     0C FB 81 F1 | 	sub	result1, arg04
21280     04 4E 85 F1 | 	sub	fp, #4
21284     A7 FA 61 FC | 	wrlong	result1, fp
21288     28 4E 85 F1 | 	sub	fp, #40
2128c                 | LR__3613
2128c     18 4E 05 F1 | 	add	fp, #24
21290     A7 18 02 FB | 	rdlong	arg04, fp
21294     01 18 06 F1 | 	add	arg04, #1
21298     0C 13 C2 FA | 	rdbyte	arg01, arg04
2129c     18 4E 05 F1 | 	add	fp, #24
212a0     A7 14 02 FB | 	rdlong	arg02, fp
212a4     10 4E 85 F1 | 	sub	fp, #16
212a8     A7 16 02 FB | 	rdlong	arg03, fp
212ac     08 4E 05 F1 | 	add	fp, #8
212b0     A7 18 02 FB | 	rdlong	arg04, fp
212b4     28 4E 85 F1 | 	sub	fp, #40
212b8     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
212bc     00 FA 0D F2 | 	cmp	result1, #0 wz
212c0     1C 00 90 AD |  if_e	jmp	#LR__3614
212c4     04 4E 05 F1 | 	add	fp, #4
212c8     A7 1E 02 FB | 	rdlong	local01, fp
212cc     04 4E 85 F1 | 	sub	fp, #4
212d0     11 1E 06 F1 | 	add	local01, #17
212d4     0F 03 48 FC | 	wrbyte	#1, local01
212d8     01 FA 05 F6 | 	mov	result1, #1
212dc     48 03 90 FD | 	jmp	#LR__3623
212e0                 | LR__3614
212e0     04 4E 05 F1 | 	add	fp, #4
212e4     A7 FA 01 FB | 	rdlong	result1, fp
212e8     1C FA 05 F1 | 	add	result1, #28
212ec     FD FA 01 FB | 	rdlong	result1, result1
212f0     1C 4E 05 F1 | 	add	fp, #28
212f4     A7 20 02 FB | 	rdlong	local02, fp
212f8     10 FB 81 F1 | 	sub	result1, local02
212fc     08 4E 05 F1 | 	add	fp, #8
21300     A7 18 02 FB | 	rdlong	arg04, fp
21304     28 4E 85 F1 | 	sub	fp, #40
21308     0C FB 11 F2 | 	cmp	result1, arg04 wc
2130c     68 00 90 3D |  if_ae	jmp	#LR__3615
21310     04 4E 05 F1 | 	add	fp, #4
21314     A7 12 02 FB | 	rdlong	arg01, fp
21318     28 12 06 F1 | 	add	arg01, #40
2131c     2C 4E 05 F1 | 	add	fp, #44
21320     A7 14 02 FB | 	rdlong	arg02, fp
21324     2C 4E 85 F1 | 	sub	fp, #44
21328     A7 FA 01 FB | 	rdlong	result1, fp
2132c     1C FA 05 F1 | 	add	result1, #28
21330     FD 22 02 FB | 	rdlong	local03, result1
21334     1C 4E 05 F1 | 	add	fp, #28
21338     A7 18 02 FB | 	rdlong	arg04, fp
2133c     20 4E 85 F1 | 	sub	fp, #32
21340     0C 23 82 F1 | 	sub	local03, arg04
21344     09 22 66 F0 | 	shl	local03, #9
21348     11 15 02 F1 | 	add	arg02, local03
2134c     09 16 C6 F9 | 	decod	arg03, #9
21350     14 47 BF FD | 	call	#__system____builtin_memmove
21354     04 4E 05 F1 | 	add	fp, #4
21358     A7 18 02 FB | 	rdlong	arg04, fp
2135c     0C FB 01 F6 | 	mov	result1, arg04
21360     04 4E 85 F1 | 	sub	fp, #4
21364     10 18 06 F1 | 	add	arg04, #16
21368     0C 19 C2 FA | 	rdbyte	arg04, arg04
2136c     7F 18 06 F5 | 	and	arg04, #127
21370     10 FA 05 F1 | 	add	result1, #16
21374     FD 18 42 FC | 	wrbyte	arg04, result1
21378                 | LR__3615
21378     28 4E 05 F1 | 	add	fp, #40
2137c     A7 FA 01 FB | 	rdlong	result1, fp
21380     09 FA 65 F0 | 	shl	result1, #9
21384     04 4E 85 F1 | 	sub	fp, #4
21388     A7 FA 61 FC | 	wrlong	result1, fp
2138c     24 4E 85 F1 | 	sub	fp, #36
21390                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
21390                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
21390                 | ' 				}
21390                 | ' 
21390                 | ' 
21390                 | ' 				wcnt =  ((UINT) 512 )  * cc;
21390                 | ' 				continue;
21390     74 01 90 FD | 	jmp	#LR__3619
21394                 | LR__3616
21394     04 4E 05 F1 | 	add	fp, #4
21398     A7 20 02 FB | 	rdlong	local02, fp
2139c     1C 20 06 F1 | 	add	local02, #28
213a0     10 FB 01 FB | 	rdlong	result1, local02
213a4     1C 4E 05 F1 | 	add	fp, #28
213a8     A7 20 02 FB | 	rdlong	local02, fp
213ac     20 4E 85 F1 | 	sub	fp, #32
213b0     10 FB 09 F2 | 	cmp	result1, local02 wz
213b4     90 00 90 AD |  if_e	jmp	#LR__3617
213b8     04 4E 05 F1 | 	add	fp, #4
213bc     A7 FA 01 FB | 	rdlong	result1, fp
213c0     FD 22 02 F6 | 	mov	local03, result1
213c4     04 4E 85 F1 | 	sub	fp, #4
213c8     14 22 06 F1 | 	add	local03, #20
213cc     11 23 02 FB | 	rdlong	local03, local03
213d0     0C FA 05 F1 | 	add	result1, #12
213d4     FD 24 02 FB | 	rdlong	local04, result1
213d8     12 27 02 F6 | 	mov	local05, local04
213dc     13 23 12 F2 | 	cmp	local03, local05 wc
213e0     64 00 90 3D |  if_ae	jmp	#LR__3617
213e4     18 4E 05 F1 | 	add	fp, #24
213e8     A7 18 02 FB | 	rdlong	arg04, fp
213ec     01 18 06 F1 | 	add	arg04, #1
213f0     0C 13 C2 FA | 	rdbyte	arg01, arg04
213f4     14 4E 85 F1 | 	sub	fp, #20
213f8     A7 28 02 FB | 	rdlong	local06, fp
213fc     28 28 06 F1 | 	add	local06, #40
21400     14 2B 02 F6 | 	mov	local07, local06
21404     1C 4E 05 F1 | 	add	fp, #28
21408     A7 2C 02 FB | 	rdlong	local08, fp
2140c     20 4E 85 F1 | 	sub	fp, #32
21410     01 2E 06 F6 | 	mov	local09, #1
21414     15 15 02 F6 | 	mov	arg02, local07
21418     16 17 02 F6 | 	mov	arg03, local08
2141c     01 18 06 F6 | 	mov	arg04, #1
21420     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
21424     FD 30 0A F6 | 	mov	local10, result1 wz
21428     1C 00 90 AD |  if_e	jmp	#LR__3617
2142c     04 4E 05 F1 | 	add	fp, #4
21430     A7 30 02 FB | 	rdlong	local10, fp
21434     04 4E 85 F1 | 	sub	fp, #4
21438     11 30 06 F1 | 	add	local10, #17
2143c     18 03 48 FC | 	wrbyte	#1, local10
21440                 | ' 				fp->fptr < fp->obj.objsize &&
21440                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
21440                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
21440     01 FA 05 F6 | 	mov	result1, #1
21444     E0 01 90 FD | 	jmp	#LR__3623
21448                 | LR__3617
21448     04 4E 05 F1 | 	add	fp, #4
2144c     A7 18 02 FB | 	rdlong	arg04, fp
21450     1C 4E 05 F1 | 	add	fp, #28
21454     A7 FA 01 FB | 	rdlong	result1, fp
21458     20 4E 85 F1 | 	sub	fp, #32
2145c     1C 18 06 F1 | 	add	arg04, #28
21460     0C FB 61 FC | 	wrlong	result1, arg04
21464                 | LR__3618
21464     04 4E 05 F1 | 	add	fp, #4
21468     A7 FA 01 FB | 	rdlong	result1, fp
2146c     14 FA 05 F1 | 	add	result1, #20
21470     FD FA 01 FB | 	rdlong	result1, result1
21474     FF FB 05 F5 | 	and	result1, #511
21478     09 32 C6 F9 | 	decod	local11, #9
2147c     FD 32 82 F1 | 	sub	local11, result1
21480     20 4E 05 F1 | 	add	fp, #32
21484     A7 32 62 FC | 	wrlong	local11, fp
21488     18 4E 85 F1 | 	sub	fp, #24
2148c     A7 FA 01 FB | 	rdlong	result1, fp
21490     0C 4E 85 F1 | 	sub	fp, #12
21494     FD 32 1A F2 | 	cmp	local11, result1 wcz
21498     0C 4E 05 11 |  if_a	add	fp, #12
2149c     A7 32 02 1B |  if_a	rdlong	local11, fp
214a0     18 4E 05 11 |  if_a	add	fp, #24
214a4     A7 32 62 1C |  if_a	wrlong	local11, fp
214a8     24 4E 85 11 |  if_a	sub	fp, #36
214ac     04 4E 05 F1 | 	add	fp, #4
214b0     A7 32 02 FB | 	rdlong	local11, fp
214b4     19 13 02 F6 | 	mov	arg01, local11
214b8     28 12 06 F1 | 	add	arg01, #40
214bc     14 32 06 F1 | 	add	local11, #20
214c0     19 33 02 FB | 	rdlong	local11, local11
214c4     FF 33 06 F5 | 	and	local11, #511
214c8     19 13 02 F1 | 	add	arg01, local11
214cc     2C 4E 05 F1 | 	add	fp, #44
214d0     A7 14 02 FB | 	rdlong	arg02, fp
214d4     0C 4E 85 F1 | 	sub	fp, #12
214d8     A7 16 02 FB | 	rdlong	arg03, fp
214dc     24 4E 85 F1 | 	sub	fp, #36
214e0     84 45 BF FD | 	call	#__system____builtin_memmove
214e4     04 4E 05 F1 | 	add	fp, #4
214e8     A7 FA 01 FB | 	rdlong	result1, fp
214ec     FD 32 02 F6 | 	mov	local11, result1
214f0     04 4E 85 F1 | 	sub	fp, #4
214f4     10 FA 05 F1 | 	add	result1, #16
214f8     FD FA C1 FA | 	rdbyte	result1, result1
214fc     80 FA 45 F5 | 	or	result1, #128
21500     10 32 06 F1 | 	add	local11, #16
21504     19 FB 41 FC | 	wrbyte	result1, local11
21508                 | LR__3619
21508     0C 4E 05 F1 | 	add	fp, #12
2150c     A7 32 02 FB | 	rdlong	local11, fp
21510     18 4E 05 F1 | 	add	fp, #24
21514     A7 FA 01 FB | 	rdlong	result1, fp
21518     FD 32 82 F1 | 	sub	local11, result1
2151c     18 4E 85 F1 | 	sub	fp, #24
21520     A7 32 62 FC | 	wrlong	local11, fp
21524     04 4E 05 F1 | 	add	fp, #4
21528     A7 34 02 FB | 	rdlong	local12, fp
2152c     1A 33 02 FB | 	rdlong	local11, local12
21530     14 4E 05 F1 | 	add	fp, #20
21534     A7 36 02 FB | 	rdlong	local13, fp
21538     1B 33 02 F1 | 	add	local11, local13
2153c     1A 33 62 FC | 	wrlong	local11, local12
21540     0C 4E 05 F1 | 	add	fp, #12
21544     A7 32 02 FB | 	rdlong	local11, fp
21548     0C 4E 85 F1 | 	sub	fp, #12
2154c     A7 38 02 FB | 	rdlong	local14, fp
21550     1C 33 02 F1 | 	add	local11, local14
21554     0C 4E 05 F1 | 	add	fp, #12
21558     A7 32 62 FC | 	wrlong	local11, fp
2155c     2C 4E 85 F1 | 	sub	fp, #44
21560     A7 3A 02 FB | 	rdlong	local15, fp
21564     1D 33 02 F6 | 	mov	local11, local15
21568     14 3A 06 F1 | 	add	local15, #20
2156c     1D 3B 02 FB | 	rdlong	local15, local15
21570     20 4E 05 F1 | 	add	fp, #32
21574     A7 3C 02 FB | 	rdlong	local16, fp
21578     1E 3B 02 F1 | 	add	local15, local16
2157c     14 32 06 F1 | 	add	local11, #20
21580     19 3B 62 FC | 	wrlong	local15, local11
21584     20 4E 85 F1 | 	sub	fp, #32
21588     A7 3E 02 FB | 	rdlong	local17, fp
2158c     1F 33 02 F6 | 	mov	local11, local17
21590     1F 41 02 F6 | 	mov	local18, local17
21594     04 4E 85 F1 | 	sub	fp, #4
21598     14 3E 06 F1 | 	add	local17, #20
2159c     1F 43 02 FB | 	rdlong	local19, local17
215a0     0C 40 06 F1 | 	add	local18, #12
215a4     20 45 02 FB | 	rdlong	local20, local18
215a8     22 43 1A F2 | 	cmp	local19, local20 wcz
215ac     24 00 90 ED |  if_be	jmp	#LR__3620
215b0     04 4E 05 F1 | 	add	fp, #4
215b4     A7 26 02 FB | 	rdlong	local05, fp
215b8     04 4E 85 F1 | 	sub	fp, #4
215bc     13 23 02 F6 | 	mov	local03, local05
215c0     14 22 06 F1 | 	add	local03, #20
215c4     11 25 02 FB | 	rdlong	local04, local03
215c8     14 22 86 F1 | 	sub	local03, #20
215cc     12 47 02 F6 | 	mov	local21, local04
215d0     20 00 90 FD | 	jmp	#LR__3621
215d4                 | LR__3620
215d4     04 4E 05 F1 | 	add	fp, #4
215d8     A7 2A 02 FB | 	rdlong	local07, fp
215dc     04 4E 85 F1 | 	sub	fp, #4
215e0     15 31 02 F6 | 	mov	local10, local07
215e4     0C 30 06 F1 | 	add	local10, #12
215e8     18 2D 02 FB | 	rdlong	local08, local10
215ec     0C 30 86 F1 | 	sub	local10, #12
215f0     16 47 02 F6 | 	mov	local21, local08
215f4                 | LR__3621
215f4     0C 32 06 F1 | 	add	local11, #12
215f8     19 47 62 FC | 	wrlong	local21, local11
215fc     5C F9 9F FD | 	jmp	#LR__3603
21600                 | LR__3622
21600     04 4E 05 F1 | 	add	fp, #4
21604     A7 34 02 FB | 	rdlong	local12, fp
21608     1A 1F 02 F6 | 	mov	local01, local12
2160c     04 4E 85 F1 | 	sub	fp, #4
21610     10 34 06 F1 | 	add	local12, #16
21614     1A 33 C2 FA | 	rdbyte	local11, local12
21618     40 32 46 F5 | 	or	local11, #64
2161c     10 1E 06 F1 | 	add	local01, #16
21620     0F 33 42 FC | 	wrbyte	local11, local01
21624                 | ' 
21624                 | ' 
21624                 | ' 
21624                 | ' 
21624                 | ' 
21624                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
21624                 | ' 		fp->flag |=  0x80 ;
21624                 | ' 
21624                 | ' 	}
21624                 | ' 
21624                 | ' 	fp->flag |=  0x40 ;
21624                 | ' 
21624                 | ' 	return FR_OK ;
21624     00 FA 05 F6 | 	mov	result1, #0
21628                 | LR__3623
21628     A7 F0 03 F6 | 	mov	ptra, fp
2162c     B2 00 A0 FD | 	call	#popregs_
21630                 | _fatfs_cc_f_write_ret
21630     2D 00 64 FD | 	ret
21634                 | 
21634                 | _fatfs_cc_f_sync
21634     00 4A 05 F6 | 	mov	COUNT_, #0
21638     A8 00 A0 FD | 	call	#pushregs_
2163c     18 F0 07 F1 | 	add	ptra, #24
21640     04 4E 05 F1 | 	add	fp, #4
21644     A7 12 62 FC | 	wrlong	arg01, fp
21648     08 4E 05 F1 | 	add	fp, #8
2164c     A7 14 02 F6 | 	mov	arg02, fp
21650     0C 4E 85 F1 | 	sub	fp, #12
21654     D0 E8 BF FD | 	call	#_fatfs_cc_validate
21658     08 4E 05 F1 | 	add	fp, #8
2165c     A7 FA 61 FC | 	wrlong	result1, fp
21660     08 4E 85 F1 | 	sub	fp, #8
21664     00 FA 0D F2 | 	cmp	result1, #0 wz
21668     C0 01 90 5D |  if_ne	jmp	#LR__3633
2166c     04 4E 05 F1 | 	add	fp, #4
21670     A7 18 02 FB | 	rdlong	arg04, fp
21674     04 4E 85 F1 | 	sub	fp, #4
21678     10 18 06 F1 | 	add	arg04, #16
2167c     0C 19 C2 FA | 	rdbyte	arg04, arg04
21680     40 18 CE F7 | 	test	arg04, #64 wz
21684     A4 01 90 AD |  if_e	jmp	#LR__3632
21688     04 4E 05 F1 | 	add	fp, #4
2168c     A7 18 02 FB | 	rdlong	arg04, fp
21690     04 4E 85 F1 | 	sub	fp, #4
21694     10 18 06 F1 | 	add	arg04, #16
21698     0C 19 C2 FA | 	rdbyte	arg04, arg04
2169c     80 18 CE F7 | 	test	arg04, #128 wz
216a0     64 00 90 AD |  if_e	jmp	#LR__3630
216a4     0C 4E 05 F1 | 	add	fp, #12
216a8     A7 18 02 FB | 	rdlong	arg04, fp
216ac     01 18 06 F1 | 	add	arg04, #1
216b0     0C 13 C2 FA | 	rdbyte	arg01, arg04
216b4     08 4E 85 F1 | 	sub	fp, #8
216b8     A7 18 02 FB | 	rdlong	arg04, fp
216bc     0C 15 02 F6 | 	mov	arg02, arg04
216c0     28 14 06 F1 | 	add	arg02, #40
216c4     04 4E 85 F1 | 	sub	fp, #4
216c8     1C 18 06 F1 | 	add	arg04, #28
216cc     0C 17 02 FB | 	rdlong	arg03, arg04
216d0     01 18 06 F6 | 	mov	arg04, #1
216d4     0C AE BF FD | 	call	#_fatfs_cc_disk_write
216d8     00 FA 0D F2 | 	cmp	result1, #0 wz
216dc     01 FA 05 56 |  if_ne	mov	result1, #1
216e0     54 01 90 5D |  if_ne	jmp	#LR__3634
216e4     04 4E 05 F1 | 	add	fp, #4
216e8     A7 18 02 FB | 	rdlong	arg04, fp
216ec     0C 17 02 F6 | 	mov	arg03, arg04
216f0     04 4E 85 F1 | 	sub	fp, #4
216f4     10 18 06 F1 | 	add	arg04, #16
216f8     0C 19 C2 FA | 	rdbyte	arg04, arg04
216fc     7F 18 06 F5 | 	and	arg04, #127
21700     10 16 06 F1 | 	add	arg03, #16
21704     0B 19 42 FC | 	wrbyte	arg04, arg03
21708                 | LR__3630
21708     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
2170c     10 4E 05 F1 | 	add	fp, #16
21710     A7 FA 61 FC | 	wrlong	result1, fp
21714     04 4E 85 F1 | 	sub	fp, #4
21718     A7 12 02 FB | 	rdlong	arg01, fp
2171c     08 4E 85 F1 | 	sub	fp, #8
21720     A7 18 02 FB | 	rdlong	arg04, fp
21724     04 4E 85 F1 | 	sub	fp, #4
21728     20 18 06 F1 | 	add	arg04, #32
2172c     0C 15 02 FB | 	rdlong	arg02, arg04
21730     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
21734     08 4E 05 F1 | 	add	fp, #8
21738     A7 FA 61 FC | 	wrlong	result1, fp
2173c     08 4E 85 F1 | 	sub	fp, #8
21740     00 FA 0D F2 | 	cmp	result1, #0 wz
21744     E4 00 90 5D |  if_ne	jmp	#LR__3631
21748     04 4E 05 F1 | 	add	fp, #4
2174c     A7 18 02 FB | 	rdlong	arg04, fp
21750     24 18 06 F1 | 	add	arg04, #36
21754     0C 19 02 FB | 	rdlong	arg04, arg04
21758     10 4E 05 F1 | 	add	fp, #16
2175c     A7 18 62 FC | 	wrlong	arg04, fp
21760     0C 17 02 F6 | 	mov	arg03, arg04
21764     0B 16 06 F1 | 	add	arg03, #11
21768     0B 17 C2 FA | 	rdbyte	arg03, arg03
2176c     20 16 46 F5 | 	or	arg03, #32
21770     0B 18 06 F1 | 	add	arg04, #11
21774     0C 17 42 FC | 	wrbyte	arg03, arg04
21778     10 4E 85 F1 | 	sub	fp, #16
2177c     A7 18 02 FB | 	rdlong	arg04, fp
21780     0C 13 02 FB | 	rdlong	arg01, arg04
21784     10 4E 05 F1 | 	add	fp, #16
21788     A7 14 02 FB | 	rdlong	arg02, fp
2178c     14 4E 85 F1 | 	sub	fp, #20
21790     08 18 06 F1 | 	add	arg04, #8
21794     0C 17 02 FB | 	rdlong	arg03, arg04
21798     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
2179c     14 4E 05 F1 | 	add	fp, #20
217a0     A7 12 02 FB | 	rdlong	arg01, fp
217a4     1C 12 06 F1 | 	add	arg01, #28
217a8     10 4E 85 F1 | 	sub	fp, #16
217ac     A7 18 02 FB | 	rdlong	arg04, fp
217b0     0C 18 06 F1 | 	add	arg04, #12
217b4     0C 15 02 FB | 	rdlong	arg02, arg04
217b8     09 15 62 FC | 	wrlong	arg02, arg01
217bc     10 4E 05 F1 | 	add	fp, #16
217c0     A7 12 02 FB | 	rdlong	arg01, fp
217c4     16 12 06 F1 | 	add	arg01, #22
217c8     04 4E 85 F1 | 	sub	fp, #4
217cc     A7 14 02 FB | 	rdlong	arg02, fp
217d0     09 15 62 FC | 	wrlong	arg02, arg01
217d4     04 4E 05 F1 | 	add	fp, #4
217d8     A7 12 02 FB | 	rdlong	arg01, fp
217dc     12 12 06 F1 | 	add	arg01, #18
217e0     09 01 58 FC | 	wrword	#0, arg01
217e4     08 4E 85 F1 | 	sub	fp, #8
217e8     A7 18 02 FB | 	rdlong	arg04, fp
217ec     03 18 06 F1 | 	add	arg04, #3
217f0     0C 03 48 FC | 	wrbyte	#1, arg04
217f4     A7 12 02 FB | 	rdlong	arg01, fp
217f8     0C 4E 85 F1 | 	sub	fp, #12
217fc     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
21800     08 4E 05 F1 | 	add	fp, #8
21804     A7 FA 61 FC | 	wrlong	result1, fp
21808     04 4E 85 F1 | 	sub	fp, #4
2180c     A7 18 02 FB | 	rdlong	arg04, fp
21810     0C 17 02 F6 | 	mov	arg03, arg04
21814     04 4E 85 F1 | 	sub	fp, #4
21818     10 18 06 F1 | 	add	arg04, #16
2181c     0C 19 C2 FA | 	rdbyte	arg04, arg04
21820     BF 18 06 F5 | 	and	arg04, #191
21824     10 16 06 F1 | 	add	arg03, #16
21828     0B 19 42 FC | 	wrbyte	arg04, arg03
2182c                 | LR__3631
2182c                 | LR__3632
2182c                 | LR__3633
2182c                 | ' 					dir = fp->dir_ptr;
2182c                 | ' 					dir[ 11 ] |=  0x20 ;
2182c                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
2182c                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
2182c                 | ' 					st_dword(dir +  22 , tm);
2182c                 | ' 					st_word(dir +  18 , 0);
2182c                 | ' 					fs->wflag = 1;
2182c                 | ' 					res = sync_fs(fs);
2182c                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
2182c                 | ' 				}
2182c                 | ' 			}
2182c                 | ' 		}
2182c                 | ' 	}
2182c                 | ' 
2182c                 | ' 	return res ;
2182c     08 4E 05 F1 | 	add	fp, #8
21830     A7 FA 01 FB | 	rdlong	result1, fp
21834     08 4E 85 F1 | 	sub	fp, #8
21838                 | LR__3634
21838     A7 F0 03 F6 | 	mov	ptra, fp
2183c     B2 00 A0 FD | 	call	#popregs_
21840                 | _fatfs_cc_f_sync_ret
21840     2D 00 64 FD | 	ret
21844                 | 
21844                 | _fatfs_cc_f_close
21844     01 4A 05 F6 | 	mov	COUNT_, #1
21848     A8 00 A0 FD | 	call	#pushregs_
2184c     10 F0 07 F1 | 	add	ptra, #16
21850     04 4E 05 F1 | 	add	fp, #4
21854     A7 12 62 FC | 	wrlong	arg01, fp
21858     04 4E 85 F1 | 	sub	fp, #4
2185c     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
21860     08 4E 05 F1 | 	add	fp, #8
21864     A7 FA 61 FC | 	wrlong	result1, fp
21868     08 4E 85 F1 | 	sub	fp, #8
2186c     00 FA 0D F2 | 	cmp	result1, #0 wz
21870     38 00 90 5D |  if_ne	jmp	#LR__3640
21874     04 4E 05 F1 | 	add	fp, #4
21878     A7 12 02 FB | 	rdlong	arg01, fp
2187c     08 4E 05 F1 | 	add	fp, #8
21880     A7 14 02 F6 | 	mov	arg02, fp
21884     0C 4E 85 F1 | 	sub	fp, #12
21888     9C E6 BF FD | 	call	#_fatfs_cc_validate
2188c     08 4E 05 F1 | 	add	fp, #8
21890     A7 FA 61 FC | 	wrlong	result1, fp
21894     08 4E 85 F1 | 	sub	fp, #8
21898     00 FA 0D F2 | 	cmp	result1, #0 wz
2189c     04 4E 05 A1 |  if_e	add	fp, #4
218a0     A7 1E 02 AB |  if_e	rdlong	local01, fp
218a4     04 4E 85 A1 |  if_e	sub	fp, #4
218a8     0F 01 68 AC |  if_e	wrlong	#0, local01
218ac                 | LR__3640
218ac                 | ' 
218ac                 | ' 
218ac                 | ' 
218ac                 | ' 
218ac                 | ' 			fp->obj.fs = 0;
218ac                 | ' #line 4192 "ff.c"
218ac                 | ' 		}
218ac                 | ' 	}
218ac                 | ' 	return res;
218ac     08 4E 05 F1 | 	add	fp, #8
218b0     A7 FA 01 FB | 	rdlong	result1, fp
218b4     08 4E 85 F1 | 	sub	fp, #8
218b8     A7 F0 03 F6 | 	mov	ptra, fp
218bc     B2 00 A0 FD | 	call	#popregs_
218c0                 | _fatfs_cc_f_close_ret
218c0     2D 00 64 FD | 	ret
218c4                 | 
218c4                 | _fatfs_cc_f_lseek
218c4     00 4A 05 F6 | 	mov	COUNT_, #0
218c8     A8 00 A0 FD | 	call	#pushregs_
218cc     24 F0 07 F1 | 	add	ptra, #36
218d0     04 4E 05 F1 | 	add	fp, #4
218d4     A7 12 62 FC | 	wrlong	arg01, fp
218d8     04 4E 05 F1 | 	add	fp, #4
218dc     A7 14 62 FC | 	wrlong	arg02, fp
218e0     04 4E 85 F1 | 	sub	fp, #4
218e4     A7 12 02 FB | 	rdlong	arg01, fp
218e8     0C 4E 05 F1 | 	add	fp, #12
218ec     A7 14 02 F6 | 	mov	arg02, fp
218f0     10 4E 85 F1 | 	sub	fp, #16
218f4     30 E6 BF FD | 	call	#_fatfs_cc_validate
218f8     0C 4E 05 F1 | 	add	fp, #12
218fc     A7 FA 61 FC | 	wrlong	result1, fp
21900     0C 4E 85 F1 | 	sub	fp, #12
21904     00 FA 0D F2 | 	cmp	result1, #0 wz
21908     1C 00 90 5D |  if_ne	jmp	#LR__3650
2190c     04 4E 05 F1 | 	add	fp, #4
21910     A7 18 02 FB | 	rdlong	arg04, fp
21914     11 18 06 F1 | 	add	arg04, #17
21918     0C 19 C2 FA | 	rdbyte	arg04, arg04
2191c     08 4E 05 F1 | 	add	fp, #8
21920     A7 18 62 FC | 	wrlong	arg04, fp
21924     0C 4E 85 F1 | 	sub	fp, #12
21928                 | LR__3650
21928     0C 4E 05 F1 | 	add	fp, #12
2192c     A7 18 0A FB | 	rdlong	arg04, fp wz
21930     0C 4E 85 F1 | 	sub	fp, #12
21934     0C 4E 05 51 |  if_ne	add	fp, #12
21938     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2193c     0C 4E 85 51 |  if_ne	sub	fp, #12
21940     40 06 90 5D |  if_ne	jmp	#LR__3673
21944     04 4E 05 F1 | 	add	fp, #4
21948     A7 18 02 FB | 	rdlong	arg04, fp
2194c     04 4E 05 F1 | 	add	fp, #4
21950     A7 16 02 FB | 	rdlong	arg03, fp
21954     08 4E 85 F1 | 	sub	fp, #8
21958     0C 18 06 F1 | 	add	arg04, #12
2195c     0C 19 02 FB | 	rdlong	arg04, arg04
21960     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
21964     3C 00 90 ED |  if_be	jmp	#LR__3651
21968     04 4E 05 F1 | 	add	fp, #4
2196c     A7 16 02 FB | 	rdlong	arg03, fp
21970     04 4E 85 F1 | 	sub	fp, #4
21974     10 16 06 F1 | 	add	arg03, #16
21978     0B 17 C2 FA | 	rdbyte	arg03, arg03
2197c     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
21980     02 16 CE F7 | 	test	arg03, #2 wz
21984     1C 00 90 5D |  if_ne	jmp	#LR__3651
21988     04 4E 05 F1 | 	add	fp, #4
2198c     A7 16 02 FB | 	rdlong	arg03, fp
21990     0C 16 06 F1 | 	add	arg03, #12
21994     0B 17 02 FB | 	rdlong	arg03, arg03
21998     04 4E 05 F1 | 	add	fp, #4
2199c     A7 16 62 FC | 	wrlong	arg03, fp
219a0     08 4E 85 F1 | 	sub	fp, #8
219a4                 | LR__3651
219a4     04 4E 05 F1 | 	add	fp, #4
219a8     A7 16 02 FB | 	rdlong	arg03, fp
219ac     14 16 06 F1 | 	add	arg03, #20
219b0     0B 17 02 FB | 	rdlong	arg03, arg03
219b4     1C 4E 05 F1 | 	add	fp, #28
219b8     A7 16 62 FC | 	wrlong	arg03, fp
219bc     1C 4E 85 F1 | 	sub	fp, #28
219c0     A7 16 02 FB | 	rdlong	arg03, fp
219c4     18 4E 05 F1 | 	add	fp, #24
219c8     A7 00 68 FC | 	wrlong	#0, fp
219cc     14 16 06 F1 | 	add	arg03, #20
219d0     0B 01 68 FC | 	wrlong	#0, arg03
219d4     14 4E 85 F1 | 	sub	fp, #20
219d8     A7 16 02 FB | 	rdlong	arg03, fp
219dc     08 4E 85 F1 | 	sub	fp, #8
219e0     01 16 16 F2 | 	cmp	arg03, #1 wc
219e4     E4 03 90 CD |  if_b	jmp	#LR__3667
219e8     10 4E 05 F1 | 	add	fp, #16
219ec     A7 16 02 FB | 	rdlong	arg03, fp
219f0     0A 16 06 F1 | 	add	arg03, #10
219f4     0B 19 E2 FA | 	rdword	arg04, arg03
219f8     09 18 66 F0 | 	shl	arg04, #9
219fc     08 4E 05 F1 | 	add	fp, #8
21a00     A7 18 62 FC | 	wrlong	arg04, fp
21a04     08 4E 05 F1 | 	add	fp, #8
21a08     A7 18 02 FB | 	rdlong	arg04, fp
21a0c     20 4E 85 F1 | 	sub	fp, #32
21a10     01 18 16 F2 | 	cmp	arg04, #1 wc
21a14     AC 00 90 CD |  if_b	jmp	#LR__3652
21a18     08 4E 05 F1 | 	add	fp, #8
21a1c     A7 18 02 FB | 	rdlong	arg04, fp
21a20     01 18 86 F1 | 	sub	arg04, #1
21a24     10 4E 05 F1 | 	add	fp, #16
21a28     A7 16 02 FB | 	rdlong	arg03, fp
21a2c     0B 19 12 FD | 	qdiv	arg04, arg03
21a30     08 4E 05 F1 | 	add	fp, #8
21a34     A7 FA 01 FB | 	rdlong	result1, fp
21a38     01 FA 85 F1 | 	sub	result1, #1
21a3c     18 18 62 FD | 	getqx	arg04
21a40     0B FB 11 FD | 	qdiv	result1, arg03
21a44     20 4E 85 F1 | 	sub	fp, #32
21a48     18 16 62 FD | 	getqx	arg03
21a4c     0B 19 12 F2 | 	cmp	arg04, arg03 wc
21a50     70 00 90 CD |  if_b	jmp	#LR__3652
21a54     04 4E 05 F1 | 	add	fp, #4
21a58     A7 16 02 FB | 	rdlong	arg03, fp
21a5c     1C 4E 05 F1 | 	add	fp, #28
21a60     A7 FA 01 FB | 	rdlong	result1, fp
21a64     01 FA 85 F1 | 	sub	result1, #1
21a68     08 4E 85 F1 | 	sub	fp, #8
21a6c     A7 18 02 FB | 	rdlong	arg04, fp
21a70     01 18 86 F1 | 	sub	arg04, #1
21a74     0C FB 21 F5 | 	andn	result1, arg04
21a78     14 16 06 F1 | 	add	arg03, #20
21a7c     0B FB 61 FC | 	wrlong	result1, arg03
21a80     10 4E 85 F1 | 	sub	fp, #16
21a84     A7 16 02 FB | 	rdlong	arg03, fp
21a88     04 4E 85 F1 | 	sub	fp, #4
21a8c     A7 18 02 FB | 	rdlong	arg04, fp
21a90     14 18 06 F1 | 	add	arg04, #20
21a94     0C 19 02 FB | 	rdlong	arg04, arg04
21a98     0C 17 82 F1 | 	sub	arg03, arg04
21a9c     04 4E 05 F1 | 	add	fp, #4
21aa0     A7 16 62 FC | 	wrlong	arg03, fp
21aa4     04 4E 85 F1 | 	sub	fp, #4
21aa8     A7 16 02 FB | 	rdlong	arg03, fp
21aac     18 16 06 F1 | 	add	arg03, #24
21ab0     0B 17 02 FB | 	rdlong	arg03, arg03
21ab4     10 4E 05 F1 | 	add	fp, #16
21ab8     A7 16 62 FC | 	wrlong	arg03, fp
21abc     14 4E 85 F1 | 	sub	fp, #20
21ac0     D0 00 90 FD | 	jmp	#LR__3656
21ac4                 | LR__3652
21ac4     04 4E 05 F1 | 	add	fp, #4
21ac8     A7 16 02 FB | 	rdlong	arg03, fp
21acc     08 16 06 F1 | 	add	arg03, #8
21ad0     0B 17 0A FB | 	rdlong	arg03, arg03 wz
21ad4     10 4E 05 F1 | 	add	fp, #16
21ad8     A7 16 62 FC | 	wrlong	arg03, fp
21adc     14 4E 85 F1 | 	sub	fp, #20
21ae0     94 00 90 5D |  if_ne	jmp	#LR__3655
21ae4     04 4E 05 F1 | 	add	fp, #4
21ae8     A7 12 02 FB | 	rdlong	arg01, fp
21aec     04 4E 85 F1 | 	sub	fp, #4
21af0     00 14 06 F6 | 	mov	arg02, #0
21af4     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
21af8     14 4E 05 F1 | 	add	fp, #20
21afc     A7 FA 61 FC | 	wrlong	result1, fp
21b00     14 4E 85 F1 | 	sub	fp, #20
21b04     01 FA 0D F2 | 	cmp	result1, #1 wz
21b08     1C 00 90 5D |  if_ne	jmp	#LR__3653
21b0c     04 4E 05 F1 | 	add	fp, #4
21b10     A7 16 02 FB | 	rdlong	arg03, fp
21b14     04 4E 85 F1 | 	sub	fp, #4
21b18     11 16 06 F1 | 	add	arg03, #17
21b1c     0B 05 48 FC | 	wrbyte	#2, arg03
21b20     02 FA 05 F6 | 	mov	result1, #2
21b24     5C 04 90 FD | 	jmp	#LR__3673
21b28                 | LR__3653
21b28     14 4E 05 F1 | 	add	fp, #20
21b2c     A7 FA 01 FB | 	rdlong	result1, fp
21b30     14 4E 85 F1 | 	sub	fp, #20
21b34     FF FF 7F FF 
21b38     FF FB 0D F2 | 	cmp	result1, ##-1 wz
21b3c     1C 00 90 5D |  if_ne	jmp	#LR__3654
21b40     04 4E 05 F1 | 	add	fp, #4
21b44     A7 16 02 FB | 	rdlong	arg03, fp
21b48     04 4E 85 F1 | 	sub	fp, #4
21b4c     11 16 06 F1 | 	add	arg03, #17
21b50     0B 03 48 FC | 	wrbyte	#1, arg03
21b54     01 FA 05 F6 | 	mov	result1, #1
21b58     28 04 90 FD | 	jmp	#LR__3673
21b5c                 | LR__3654
21b5c     04 4E 05 F1 | 	add	fp, #4
21b60     A7 16 02 FB | 	rdlong	arg03, fp
21b64     10 4E 05 F1 | 	add	fp, #16
21b68     A7 18 02 FB | 	rdlong	arg04, fp
21b6c     14 4E 85 F1 | 	sub	fp, #20
21b70     08 16 06 F1 | 	add	arg03, #8
21b74     0B 19 62 FC | 	wrlong	arg04, arg03
21b78                 | LR__3655
21b78     04 4E 05 F1 | 	add	fp, #4
21b7c     A7 16 02 FB | 	rdlong	arg03, fp
21b80     10 4E 05 F1 | 	add	fp, #16
21b84     A7 18 02 FB | 	rdlong	arg04, fp
21b88     14 4E 85 F1 | 	sub	fp, #20
21b8c     18 16 06 F1 | 	add	arg03, #24
21b90     0B 19 62 FC | 	wrlong	arg04, arg03
21b94                 | LR__3656
21b94     14 4E 05 F1 | 	add	fp, #20
21b98     A7 16 0A FB | 	rdlong	arg03, fp wz
21b9c     14 4E 85 F1 | 	sub	fp, #20
21ba0     28 02 90 AD |  if_e	jmp	#LR__3666
21ba4                 | ' 				while (ofs > bcs) {
21ba4                 | LR__3657
21ba4     08 4E 05 F1 | 	add	fp, #8
21ba8     A7 18 02 FB | 	rdlong	arg04, fp
21bac     10 4E 05 F1 | 	add	fp, #16
21bb0     A7 16 02 FB | 	rdlong	arg03, fp
21bb4     18 4E 85 F1 | 	sub	fp, #24
21bb8     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
21bbc     68 01 90 ED |  if_be	jmp	#LR__3663
21bc0     08 4E 05 F1 | 	add	fp, #8
21bc4     A7 18 02 FB | 	rdlong	arg04, fp
21bc8     10 4E 05 F1 | 	add	fp, #16
21bcc     A7 16 02 FB | 	rdlong	arg03, fp
21bd0     0B 19 82 F1 | 	sub	arg04, arg03
21bd4     10 4E 85 F1 | 	sub	fp, #16
21bd8     A7 18 62 FC | 	wrlong	arg04, fp
21bdc     04 4E 85 F1 | 	sub	fp, #4
21be0     A7 18 02 FB | 	rdlong	arg04, fp
21be4     0C FB 01 F6 | 	mov	result1, arg04
21be8     14 18 06 F1 | 	add	arg04, #20
21bec     0C 19 02 FB | 	rdlong	arg04, arg04
21bf0     14 4E 05 F1 | 	add	fp, #20
21bf4     A7 16 02 FB | 	rdlong	arg03, fp
21bf8     0B 19 02 F1 | 	add	arg04, arg03
21bfc     14 FA 05 F1 | 	add	result1, #20
21c00     FD 18 62 FC | 	wrlong	arg04, result1
21c04     14 4E 85 F1 | 	sub	fp, #20
21c08     A7 16 02 FB | 	rdlong	arg03, fp
21c0c     04 4E 85 F1 | 	sub	fp, #4
21c10     10 16 06 F1 | 	add	arg03, #16
21c14     0B 17 C2 FA | 	rdbyte	arg03, arg03
21c18     02 16 CE F7 | 	test	arg03, #2 wz
21c1c     3C 00 90 AD |  if_e	jmp	#LR__3658
21c20     04 4E 05 F1 | 	add	fp, #4
21c24     A7 12 02 FB | 	rdlong	arg01, fp
21c28     10 4E 05 F1 | 	add	fp, #16
21c2c     A7 14 02 FB | 	rdlong	arg02, fp
21c30     14 4E 85 F1 | 	sub	fp, #20
21c34     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
21c38     14 4E 05 F1 | 	add	fp, #20
21c3c     A7 FA 61 FC | 	wrlong	result1, fp
21c40     00 FA 4D F2 | 	cmps	result1, #0 wz
21c44     14 4E 85 F1 | 	sub	fp, #20
21c48     08 4E 05 A1 |  if_e	add	fp, #8
21c4c     A7 00 68 AC |  if_e	wrlong	#0, fp
21c50     08 4E 85 A1 |  if_e	sub	fp, #8
21c54                 | ' 							ofs = 0; break;
21c54     D0 00 90 AD |  if_e	jmp	#LR__3663
21c58     24 00 90 FD | 	jmp	#LR__3659
21c5c                 | LR__3658
21c5c     04 4E 05 F1 | 	add	fp, #4
21c60     A7 12 02 FB | 	rdlong	arg01, fp
21c64     10 4E 05 F1 | 	add	fp, #16
21c68     A7 14 02 FB | 	rdlong	arg02, fp
21c6c     14 4E 85 F1 | 	sub	fp, #20
21c70     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
21c74     14 4E 05 F1 | 	add	fp, #20
21c78     A7 FA 61 FC | 	wrlong	result1, fp
21c7c     14 4E 85 F1 | 	sub	fp, #20
21c80                 | LR__3659
21c80     14 4E 05 F1 | 	add	fp, #20
21c84     A7 16 02 FB | 	rdlong	arg03, fp
21c88     14 4E 85 F1 | 	sub	fp, #20
21c8c     FF FF 7F FF 
21c90     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
21c94     1C 00 90 5D |  if_ne	jmp	#LR__3660
21c98     04 4E 05 F1 | 	add	fp, #4
21c9c     A7 16 02 FB | 	rdlong	arg03, fp
21ca0     04 4E 85 F1 | 	sub	fp, #4
21ca4     11 16 06 F1 | 	add	arg03, #17
21ca8     0B 03 48 FC | 	wrbyte	#1, arg03
21cac     01 FA 05 F6 | 	mov	result1, #1
21cb0     D0 02 90 FD | 	jmp	#LR__3673
21cb4                 | LR__3660
21cb4     14 4E 05 F1 | 	add	fp, #20
21cb8     A7 16 02 FB | 	rdlong	arg03, fp
21cbc     14 4E 85 F1 | 	sub	fp, #20
21cc0     02 16 16 F2 | 	cmp	arg03, #2 wc
21cc4     24 00 90 CD |  if_b	jmp	#LR__3661
21cc8     10 4E 05 F1 | 	add	fp, #16
21ccc     A7 18 02 FB | 	rdlong	arg04, fp
21cd0     04 4E 05 F1 | 	add	fp, #4
21cd4     A7 16 02 FB | 	rdlong	arg03, fp
21cd8     14 4E 85 F1 | 	sub	fp, #20
21cdc     18 18 06 F1 | 	add	arg04, #24
21ce0     0C 19 02 FB | 	rdlong	arg04, arg04
21ce4     0C 17 12 F2 | 	cmp	arg03, arg04 wc
21ce8     1C 00 90 CD |  if_b	jmp	#LR__3662
21cec                 | LR__3661
21cec     04 4E 05 F1 | 	add	fp, #4
21cf0     A7 16 02 FB | 	rdlong	arg03, fp
21cf4     04 4E 85 F1 | 	sub	fp, #4
21cf8     11 16 06 F1 | 	add	arg03, #17
21cfc     0B 05 48 FC | 	wrbyte	#2, arg03
21d00     02 FA 05 F6 | 	mov	result1, #2
21d04     7C 02 90 FD | 	jmp	#LR__3673
21d08                 | LR__3662
21d08     04 4E 05 F1 | 	add	fp, #4
21d0c     A7 18 02 FB | 	rdlong	arg04, fp
21d10     10 4E 05 F1 | 	add	fp, #16
21d14     A7 16 02 FB | 	rdlong	arg03, fp
21d18     14 4E 85 F1 | 	sub	fp, #20
21d1c     18 18 06 F1 | 	add	arg04, #24
21d20     0C 17 62 FC | 	wrlong	arg03, arg04
21d24     7C FE 9F FD | 	jmp	#LR__3657
21d28                 | LR__3663
21d28     04 4E 05 F1 | 	add	fp, #4
21d2c     A7 16 02 FB | 	rdlong	arg03, fp
21d30     0B 13 02 F6 | 	mov	arg01, arg03
21d34     14 16 06 F1 | 	add	arg03, #20
21d38     0B 15 02 FB | 	rdlong	arg02, arg03
21d3c     04 4E 05 F1 | 	add	fp, #4
21d40     A7 16 02 FB | 	rdlong	arg03, fp
21d44     0B 15 02 F1 | 	add	arg02, arg03
21d48     14 12 06 F1 | 	add	arg01, #20
21d4c     09 15 62 FC | 	wrlong	arg02, arg01
21d50     A7 16 02 FB | 	rdlong	arg03, fp
21d54     08 4E 85 F1 | 	sub	fp, #8
21d58     FF 17 CE F7 | 	test	arg03, #511 wz
21d5c     6C 00 90 AD |  if_e	jmp	#LR__3665
21d60     10 4E 05 F1 | 	add	fp, #16
21d64     A7 12 02 FB | 	rdlong	arg01, fp
21d68     04 4E 05 F1 | 	add	fp, #4
21d6c     A7 14 02 FB | 	rdlong	arg02, fp
21d70     14 4E 85 F1 | 	sub	fp, #20
21d74     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
21d78     1C 4E 05 F1 | 	add	fp, #28
21d7c     A7 FA 61 FC | 	wrlong	result1, fp
21d80     1C 4E 85 F1 | 	sub	fp, #28
21d84     00 FA 0D F2 | 	cmp	result1, #0 wz
21d88     1C 00 90 5D |  if_ne	jmp	#LR__3664
21d8c     04 4E 05 F1 | 	add	fp, #4
21d90     A7 16 02 FB | 	rdlong	arg03, fp
21d94     04 4E 85 F1 | 	sub	fp, #4
21d98     11 16 06 F1 | 	add	arg03, #17
21d9c     0B 05 48 FC | 	wrbyte	#2, arg03
21da0     02 FA 05 F6 | 	mov	result1, #2
21da4     DC 01 90 FD | 	jmp	#LR__3673
21da8                 | LR__3664
21da8     1C 4E 05 F1 | 	add	fp, #28
21dac     A7 18 02 FB | 	rdlong	arg04, fp
21db0     14 4E 85 F1 | 	sub	fp, #20
21db4     A7 16 02 FB | 	rdlong	arg03, fp
21db8     09 16 46 F0 | 	shr	arg03, #9
21dbc     0B 19 02 F1 | 	add	arg04, arg03
21dc0     14 4E 05 F1 | 	add	fp, #20
21dc4     A7 18 62 FC | 	wrlong	arg04, fp
21dc8     1C 4E 85 F1 | 	sub	fp, #28
21dcc                 | LR__3665
21dcc                 | LR__3666
21dcc                 | LR__3667
21dcc     04 4E 05 F1 | 	add	fp, #4
21dd0     A7 18 02 FB | 	rdlong	arg04, fp
21dd4     0C 17 02 F6 | 	mov	arg03, arg04
21dd8     04 4E 85 F1 | 	sub	fp, #4
21ddc     14 16 06 F1 | 	add	arg03, #20
21de0     0B 17 02 FB | 	rdlong	arg03, arg03
21de4     0C 18 06 F1 | 	add	arg04, #12
21de8     0C 19 02 FB | 	rdlong	arg04, arg04
21dec     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
21df0     3C 00 90 ED |  if_be	jmp	#LR__3668
21df4     04 4E 05 F1 | 	add	fp, #4
21df8     A7 18 02 FB | 	rdlong	arg04, fp
21dfc     0C 17 02 F6 | 	mov	arg03, arg04
21e00     14 18 06 F1 | 	add	arg04, #20
21e04     0C 19 02 FB | 	rdlong	arg04, arg04
21e08     0C 16 06 F1 | 	add	arg03, #12
21e0c     0B 19 62 FC | 	wrlong	arg04, arg03
21e10     A7 18 02 FB | 	rdlong	arg04, fp
21e14     0C 17 02 F6 | 	mov	arg03, arg04
21e18     04 4E 85 F1 | 	sub	fp, #4
21e1c     10 18 06 F1 | 	add	arg04, #16
21e20     0C 19 C2 FA | 	rdbyte	arg04, arg04
21e24     40 18 46 F5 | 	or	arg04, #64
21e28     10 16 06 F1 | 	add	arg03, #16
21e2c     0B 19 42 FC | 	wrbyte	arg04, arg03
21e30                 | LR__3668
21e30     04 4E 05 F1 | 	add	fp, #4
21e34     A7 16 02 FB | 	rdlong	arg03, fp
21e38     04 4E 85 F1 | 	sub	fp, #4
21e3c     14 16 06 F1 | 	add	arg03, #20
21e40     0B 17 02 FB | 	rdlong	arg03, arg03
21e44     FF 17 CE F7 | 	test	arg03, #511 wz
21e48     2C 01 90 AD |  if_e	jmp	#LR__3672
21e4c     04 4E 05 F1 | 	add	fp, #4
21e50     A7 18 02 FB | 	rdlong	arg04, fp
21e54     18 4E 05 F1 | 	add	fp, #24
21e58     A7 16 02 FB | 	rdlong	arg03, fp
21e5c     1C 4E 85 F1 | 	sub	fp, #28
21e60     1C 18 06 F1 | 	add	arg04, #28
21e64     0C 19 02 FB | 	rdlong	arg04, arg04
21e68     0C 17 0A F2 | 	cmp	arg03, arg04 wz
21e6c     08 01 90 AD |  if_e	jmp	#LR__3672
21e70     04 4E 05 F1 | 	add	fp, #4
21e74     A7 16 02 FB | 	rdlong	arg03, fp
21e78     04 4E 85 F1 | 	sub	fp, #4
21e7c     10 16 06 F1 | 	add	arg03, #16
21e80     0B 17 C2 FA | 	rdbyte	arg03, arg03
21e84     80 16 CE F7 | 	test	arg03, #128 wz
21e88     7C 00 90 AD |  if_e	jmp	#LR__3670
21e8c     10 4E 05 F1 | 	add	fp, #16
21e90     A7 16 02 FB | 	rdlong	arg03, fp
21e94     01 16 06 F1 | 	add	arg03, #1
21e98     0B 13 C2 FA | 	rdbyte	arg01, arg03
21e9c     0C 4E 85 F1 | 	sub	fp, #12
21ea0     A7 16 02 FB | 	rdlong	arg03, fp
21ea4     0B 15 02 F6 | 	mov	arg02, arg03
21ea8     28 14 06 F1 | 	add	arg02, #40
21eac     04 4E 85 F1 | 	sub	fp, #4
21eb0     1C 16 06 F1 | 	add	arg03, #28
21eb4     0B 17 02 FB | 	rdlong	arg03, arg03
21eb8     01 18 06 F6 | 	mov	arg04, #1
21ebc     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
21ec0     00 FA 0D F2 | 	cmp	result1, #0 wz
21ec4     1C 00 90 AD |  if_e	jmp	#LR__3669
21ec8     04 4E 05 F1 | 	add	fp, #4
21ecc     A7 16 02 FB | 	rdlong	arg03, fp
21ed0     04 4E 85 F1 | 	sub	fp, #4
21ed4     11 16 06 F1 | 	add	arg03, #17
21ed8     0B 03 48 FC | 	wrbyte	#1, arg03
21edc     01 FA 05 F6 | 	mov	result1, #1
21ee0     A0 00 90 FD | 	jmp	#LR__3673
21ee4                 | LR__3669
21ee4     04 4E 05 F1 | 	add	fp, #4
21ee8     A7 18 02 FB | 	rdlong	arg04, fp
21eec     0C 17 02 F6 | 	mov	arg03, arg04
21ef0     04 4E 85 F1 | 	sub	fp, #4
21ef4     10 18 06 F1 | 	add	arg04, #16
21ef8     0C 19 C2 FA | 	rdbyte	arg04, arg04
21efc     7F 18 06 F5 | 	and	arg04, #127
21f00     10 16 06 F1 | 	add	arg03, #16
21f04     0B 19 42 FC | 	wrbyte	arg04, arg03
21f08                 | LR__3670
21f08     10 4E 05 F1 | 	add	fp, #16
21f0c     A7 16 02 FB | 	rdlong	arg03, fp
21f10     01 16 06 F1 | 	add	arg03, #1
21f14     0B 13 C2 FA | 	rdbyte	arg01, arg03
21f18     0C 4E 85 F1 | 	sub	fp, #12
21f1c     A7 14 02 FB | 	rdlong	arg02, fp
21f20     28 14 06 F1 | 	add	arg02, #40
21f24     18 4E 05 F1 | 	add	fp, #24
21f28     A7 16 02 FB | 	rdlong	arg03, fp
21f2c     1C 4E 85 F1 | 	sub	fp, #28
21f30     01 18 06 F6 | 	mov	arg04, #1
21f34     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
21f38     00 FA 0D F2 | 	cmp	result1, #0 wz
21f3c     1C 00 90 AD |  if_e	jmp	#LR__3671
21f40     04 4E 05 F1 | 	add	fp, #4
21f44     A7 16 02 FB | 	rdlong	arg03, fp
21f48     04 4E 85 F1 | 	sub	fp, #4
21f4c     11 16 06 F1 | 	add	arg03, #17
21f50     0B 03 48 FC | 	wrbyte	#1, arg03
21f54     01 FA 05 F6 | 	mov	result1, #1
21f58     28 00 90 FD | 	jmp	#LR__3673
21f5c                 | LR__3671
21f5c     04 4E 05 F1 | 	add	fp, #4
21f60     A7 18 02 FB | 	rdlong	arg04, fp
21f64     18 4E 05 F1 | 	add	fp, #24
21f68     A7 16 02 FB | 	rdlong	arg03, fp
21f6c     1C 4E 85 F1 | 	sub	fp, #28
21f70     1C 18 06 F1 | 	add	arg04, #28
21f74     0C 17 62 FC | 	wrlong	arg03, arg04
21f78                 | LR__3672
21f78                 | ' 
21f78                 | ' 			fp->sect = nsect;
21f78                 | ' 		}
21f78                 | ' 	}
21f78                 | ' 
21f78                 | ' 	return res ;
21f78     0C 4E 05 F1 | 	add	fp, #12
21f7c     A7 FA 01 FB | 	rdlong	result1, fp
21f80     0C 4E 85 F1 | 	sub	fp, #12
21f84                 | LR__3673
21f84     A7 F0 03 F6 | 	mov	ptra, fp
21f88     B2 00 A0 FD | 	call	#popregs_
21f8c                 | _fatfs_cc_f_lseek_ret
21f8c     2D 00 64 FD | 	ret
21f90                 | 
21f90                 | _fatfs_cc_f_opendir
21f90     01 4A 05 F6 | 	mov	COUNT_, #1
21f94     A8 00 A0 FD | 	call	#pushregs_
21f98     14 F0 07 F1 | 	add	ptra, #20
21f9c     04 4E 05 F1 | 	add	fp, #4
21fa0     A7 12 62 FC | 	wrlong	arg01, fp
21fa4     04 4E 05 F1 | 	add	fp, #4
21fa8     A7 14 62 FC | 	wrlong	arg02, fp
21fac     04 4E 85 F1 | 	sub	fp, #4
21fb0     A7 16 0A FB | 	rdlong	arg03, fp wz
21fb4     04 4E 85 F1 | 	sub	fp, #4
21fb8     09 FA 05 A6 |  if_e	mov	result1, #9
21fbc     78 01 90 AD |  if_e	jmp	#LR__3686
21fc0     08 4E 05 F1 | 	add	fp, #8
21fc4     A7 12 02 F6 | 	mov	arg01, fp
21fc8     08 4E 05 F1 | 	add	fp, #8
21fcc     A7 14 02 F6 | 	mov	arg02, fp
21fd0     10 4E 85 F1 | 	sub	fp, #16
21fd4     00 16 06 F6 | 	mov	arg03, #0
21fd8     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
21fdc     0C 4E 05 F1 | 	add	fp, #12
21fe0     A7 FA 61 FC | 	wrlong	result1, fp
21fe4     0C 4E 85 F1 | 	sub	fp, #12
21fe8     00 FA 0D F2 | 	cmp	result1, #0 wz
21fec     20 01 90 5D |  if_ne	jmp	#LR__3685
21ff0     04 4E 05 F1 | 	add	fp, #4
21ff4     A7 16 02 FB | 	rdlong	arg03, fp
21ff8     0C 4E 05 F1 | 	add	fp, #12
21ffc     A7 FA 01 FB | 	rdlong	result1, fp
22000     0B FB 61 FC | 	wrlong	result1, arg03
22004     0C 4E 85 F1 | 	sub	fp, #12
22008     A7 12 02 FB | 	rdlong	arg01, fp
2200c     04 4E 05 F1 | 	add	fp, #4
22010     A7 14 02 FB | 	rdlong	arg02, fp
22014     08 4E 85 F1 | 	sub	fp, #8
22018     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
2201c     0C 4E 05 F1 | 	add	fp, #12
22020     A7 FA 61 FC | 	wrlong	result1, fp
22024     0C 4E 85 F1 | 	sub	fp, #12
22028     00 FA 0D F2 | 	cmp	result1, #0 wz
2202c     C4 00 90 5D |  if_ne	jmp	#LR__3684
22030     04 4E 05 F1 | 	add	fp, #4
22034     A7 16 02 FB | 	rdlong	arg03, fp
22038     04 4E 85 F1 | 	sub	fp, #4
2203c     2B 16 06 F1 | 	add	arg03, #43
22040     0B 17 C2 FA | 	rdbyte	arg03, arg03
22044     80 16 CE F7 | 	test	arg03, #128 wz
22048     58 00 90 5D |  if_ne	jmp	#LR__3682
2204c     04 4E 05 F1 | 	add	fp, #4
22050     A7 16 02 FB | 	rdlong	arg03, fp
22054     04 4E 85 F1 | 	sub	fp, #4
22058     06 16 06 F1 | 	add	arg03, #6
2205c     0B 17 C2 FA | 	rdbyte	arg03, arg03
22060     10 16 CE F7 | 	test	arg03, #16 wz
22064     30 00 90 AD |  if_e	jmp	#LR__3680
22068     04 4E 05 F1 | 	add	fp, #4
2206c     A7 16 02 FB | 	rdlong	arg03, fp
22070     0B 1F 02 F6 | 	mov	local01, arg03
22074     0C 4E 05 F1 | 	add	fp, #12
22078     A7 12 02 FB | 	rdlong	arg01, fp
2207c     10 4E 85 F1 | 	sub	fp, #16
22080     1C 16 06 F1 | 	add	arg03, #28
22084     0B 15 02 FB | 	rdlong	arg02, arg03
22088     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
2208c     08 1E 06 F1 | 	add	local01, #8
22090     0F FB 61 FC | 	wrlong	result1, local01
22094     0C 00 90 FD | 	jmp	#LR__3681
22098                 | LR__3680
22098     0C 4E 05 F1 | 	add	fp, #12
2209c     A7 0A 68 FC | 	wrlong	#5, fp
220a0     0C 4E 85 F1 | 	sub	fp, #12
220a4                 | LR__3681
220a4                 | LR__3682
220a4     0C 4E 05 F1 | 	add	fp, #12
220a8     A7 1E 0A FB | 	rdlong	local01, fp wz
220ac     0C 4E 85 F1 | 	sub	fp, #12
220b0     40 00 90 5D |  if_ne	jmp	#LR__3683
220b4     04 4E 05 F1 | 	add	fp, #4
220b8     A7 1E 02 FB | 	rdlong	local01, fp
220bc     0C 4E 05 F1 | 	add	fp, #12
220c0     A7 16 02 FB | 	rdlong	arg03, fp
220c4     06 16 06 F1 | 	add	arg03, #6
220c8     0B 17 E2 FA | 	rdword	arg03, arg03
220cc     04 1E 06 F1 | 	add	local01, #4
220d0     0F 17 52 FC | 	wrword	arg03, local01
220d4     0C 4E 85 F1 | 	sub	fp, #12
220d8     A7 12 02 FB | 	rdlong	arg01, fp
220dc     04 4E 85 F1 | 	sub	fp, #4
220e0     00 14 06 F6 | 	mov	arg02, #0
220e4     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
220e8     0C 4E 05 F1 | 	add	fp, #12
220ec     A7 FA 61 FC | 	wrlong	result1, fp
220f0     0C 4E 85 F1 | 	sub	fp, #12
220f4                 | LR__3683
220f4                 | LR__3684
220f4     0C 4E 05 F1 | 	add	fp, #12
220f8     A7 1E 02 FB | 	rdlong	local01, fp
220fc     0C 4E 85 F1 | 	sub	fp, #12
22100     04 1E 0E F2 | 	cmp	local01, #4 wz
22104     0C 4E 05 A1 |  if_e	add	fp, #12
22108     A7 0A 68 AC |  if_e	wrlong	#5, fp
2210c     0C 4E 85 A1 |  if_e	sub	fp, #12
22110                 | LR__3685
22110     0C 4E 05 F1 | 	add	fp, #12
22114     A7 1E 0A FB | 	rdlong	local01, fp wz
22118     0C 4E 85 F1 | 	sub	fp, #12
2211c     04 4E 05 51 |  if_ne	add	fp, #4
22120     A7 1E 02 5B |  if_ne	rdlong	local01, fp
22124     04 4E 85 51 |  if_ne	sub	fp, #4
22128     0F 01 68 5C |  if_ne	wrlong	#0, local01
2212c                 | ' 
2212c                 | ' 	return res ;
2212c     0C 4E 05 F1 | 	add	fp, #12
22130     A7 FA 01 FB | 	rdlong	result1, fp
22134     0C 4E 85 F1 | 	sub	fp, #12
22138                 | LR__3686
22138     A7 F0 03 F6 | 	mov	ptra, fp
2213c     B2 00 A0 FD | 	call	#popregs_
22140                 | _fatfs_cc_f_opendir_ret
22140     2D 00 64 FD | 	ret
22144                 | 
22144                 | _fatfs_cc_f_closedir
22144     00 4A 05 F6 | 	mov	COUNT_, #0
22148     A8 00 A0 FD | 	call	#pushregs_
2214c     10 F0 07 F1 | 	add	ptra, #16
22150     04 4E 05 F1 | 	add	fp, #4
22154     A7 12 62 FC | 	wrlong	arg01, fp
22158     08 4E 05 F1 | 	add	fp, #8
2215c     A7 14 02 F6 | 	mov	arg02, fp
22160     0C 4E 85 F1 | 	sub	fp, #12
22164     C0 DD BF FD | 	call	#_fatfs_cc_validate
22168     08 4E 05 F1 | 	add	fp, #8
2216c     A7 FA 61 FC | 	wrlong	result1, fp
22170     08 4E 85 F1 | 	sub	fp, #8
22174     00 FA 0D F2 | 	cmp	result1, #0 wz
22178     04 4E 05 A1 |  if_e	add	fp, #4
2217c     A7 FA 01 AB |  if_e	rdlong	result1, fp
22180     04 4E 85 A1 |  if_e	sub	fp, #4
22184     FD 00 68 AC |  if_e	wrlong	#0, result1
22188                 | ' 
22188                 | ' 
22188                 | ' 
22188                 | ' 
22188                 | ' 		dp->obj.fs = 0;
22188                 | ' #line 4633 "ff.c"
22188                 | ' 	}
22188                 | ' 	return res;
22188     08 4E 05 F1 | 	add	fp, #8
2218c     A7 FA 01 FB | 	rdlong	result1, fp
22190     08 4E 85 F1 | 	sub	fp, #8
22194     A7 F0 03 F6 | 	mov	ptra, fp
22198     B2 00 A0 FD | 	call	#popregs_
2219c                 | _fatfs_cc_f_closedir_ret
2219c     2D 00 64 FD | 	ret
221a0                 | 
221a0                 | _fatfs_cc_f_readdir
221a0     00 4A 05 F6 | 	mov	COUNT_, #0
221a4     A8 00 A0 FD | 	call	#pushregs_
221a8     14 F0 07 F1 | 	add	ptra, #20
221ac     04 4E 05 F1 | 	add	fp, #4
221b0     A7 12 62 FC | 	wrlong	arg01, fp
221b4     04 4E 05 F1 | 	add	fp, #4
221b8     A7 14 62 FC | 	wrlong	arg02, fp
221bc     04 4E 85 F1 | 	sub	fp, #4
221c0     A7 12 02 FB | 	rdlong	arg01, fp
221c4     0C 4E 05 F1 | 	add	fp, #12
221c8     A7 14 02 F6 | 	mov	arg02, fp
221cc     10 4E 85 F1 | 	sub	fp, #16
221d0     54 DD BF FD | 	call	#_fatfs_cc_validate
221d4     0C 4E 05 F1 | 	add	fp, #12
221d8     A7 FA 61 FC | 	wrlong	result1, fp
221dc     0C 4E 85 F1 | 	sub	fp, #12
221e0     00 FA 0D F2 | 	cmp	result1, #0 wz
221e4     BC 00 90 5D |  if_ne	jmp	#LR__3693
221e8     08 4E 05 F1 | 	add	fp, #8
221ec     A7 FA 09 FB | 	rdlong	result1, fp wz
221f0     08 4E 85 F1 | 	sub	fp, #8
221f4     24 00 90 5D |  if_ne	jmp	#LR__3690
221f8     04 4E 05 F1 | 	add	fp, #4
221fc     A7 12 02 FB | 	rdlong	arg01, fp
22200     04 4E 85 F1 | 	sub	fp, #4
22204     00 14 06 F6 | 	mov	arg02, #0
22208     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
2220c     0C 4E 05 F1 | 	add	fp, #12
22210     A7 FA 61 FC | 	wrlong	result1, fp
22214     0C 4E 85 F1 | 	sub	fp, #12
22218     88 00 90 FD | 	jmp	#LR__3692
2221c                 | LR__3690
2221c     04 4E 05 F1 | 	add	fp, #4
22220     A7 12 02 FB | 	rdlong	arg01, fp
22224     04 4E 85 F1 | 	sub	fp, #4
22228     00 14 06 F6 | 	mov	arg02, #0
2222c     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
22230     0C 4E 05 F1 | 	add	fp, #12
22234     A7 FA 61 FC | 	wrlong	result1, fp
22238     0C 4E 85 F1 | 	sub	fp, #12
2223c     04 FA 0D F2 | 	cmp	result1, #4 wz
22240     0C 4E 05 A1 |  if_e	add	fp, #12
22244     A7 00 68 AC |  if_e	wrlong	#0, fp
22248     0C 4E 85 A1 |  if_e	sub	fp, #12
2224c     0C 4E 05 F1 | 	add	fp, #12
22250     A7 FA 09 FB | 	rdlong	result1, fp wz
22254     0C 4E 85 F1 | 	sub	fp, #12
22258     48 00 90 5D |  if_ne	jmp	#LR__3691
2225c     04 4E 05 F1 | 	add	fp, #4
22260     A7 12 02 FB | 	rdlong	arg01, fp
22264     04 4E 05 F1 | 	add	fp, #4
22268     A7 14 02 FB | 	rdlong	arg02, fp
2226c     08 4E 85 F1 | 	sub	fp, #8
22270     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
22274     04 4E 05 F1 | 	add	fp, #4
22278     A7 12 02 FB | 	rdlong	arg01, fp
2227c     04 4E 85 F1 | 	sub	fp, #4
22280     00 14 06 F6 | 	mov	arg02, #0
22284     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
22288     0C 4E 05 F1 | 	add	fp, #12
2228c     A7 FA 61 FC | 	wrlong	result1, fp
22290     0C 4E 85 F1 | 	sub	fp, #12
22294     04 FA 0D F2 | 	cmp	result1, #4 wz
22298     0C 4E 05 A1 |  if_e	add	fp, #12
2229c     A7 00 68 AC |  if_e	wrlong	#0, fp
222a0     0C 4E 85 A1 |  if_e	sub	fp, #12
222a4                 | LR__3691
222a4                 | LR__3692
222a4                 | LR__3693
222a4                 | ' 			}
222a4                 | ' 			;
222a4                 | ' 		}
222a4                 | ' 	}
222a4                 | ' 	return res ;
222a4     0C 4E 05 F1 | 	add	fp, #12
222a8     A7 FA 01 FB | 	rdlong	result1, fp
222ac     0C 4E 85 F1 | 	sub	fp, #12
222b0     A7 F0 03 F6 | 	mov	ptra, fp
222b4     B2 00 A0 FD | 	call	#popregs_
222b8                 | _fatfs_cc_f_readdir_ret
222b8     2D 00 64 FD | 	ret
222bc                 | 
222bc                 | _fatfs_cc_f_stat
222bc     00 4A 05 F6 | 	mov	COUNT_, #0
222c0     A8 00 A0 FD | 	call	#pushregs_
222c4     40 F0 07 F1 | 	add	ptra, #64
222c8     04 4E 05 F1 | 	add	fp, #4
222cc     A7 12 62 FC | 	wrlong	arg01, fp
222d0     04 4E 05 F1 | 	add	fp, #4
222d4     A7 14 62 FC | 	wrlong	arg02, fp
222d8     04 4E 85 F1 | 	sub	fp, #4
222dc     A7 12 02 F6 | 	mov	arg01, fp
222e0     0C 4E 05 F1 | 	add	fp, #12
222e4     A7 14 02 F6 | 	mov	arg02, fp
222e8     10 4E 85 F1 | 	sub	fp, #16
222ec     00 16 06 F6 | 	mov	arg03, #0
222f0     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
222f4     0C 4E 05 F1 | 	add	fp, #12
222f8     A7 FA 61 FC | 	wrlong	result1, fp
222fc     0C 4E 85 F1 | 	sub	fp, #12
22300     00 FA 0D F2 | 	cmp	result1, #0 wz
22304     74 00 90 5D |  if_ne	jmp	#LR__3703
22308     10 4E 05 F1 | 	add	fp, #16
2230c     A7 12 02 F6 | 	mov	arg01, fp
22310     0C 4E 85 F1 | 	sub	fp, #12
22314     A7 14 02 FB | 	rdlong	arg02, fp
22318     04 4E 85 F1 | 	sub	fp, #4
2231c     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
22320     0C 4E 05 F1 | 	add	fp, #12
22324     A7 FA 61 FC | 	wrlong	result1, fp
22328     0C 4E 85 F1 | 	sub	fp, #12
2232c     00 FA 0D F2 | 	cmp	result1, #0 wz
22330     48 00 90 5D |  if_ne	jmp	#LR__3702
22334     3B 4E 05 F1 | 	add	fp, #59
22338     A7 FA C1 FA | 	rdbyte	result1, fp
2233c     3B 4E 85 F1 | 	sub	fp, #59
22340     80 FA CD F7 | 	test	result1, #128 wz
22344     0C 4E 05 51 |  if_ne	add	fp, #12
22348     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2234c     0C 4E 85 51 |  if_ne	sub	fp, #12
22350     28 00 90 5D |  if_ne	jmp	#LR__3701
22354     08 4E 05 F1 | 	add	fp, #8
22358     A7 FA 09 FB | 	rdlong	result1, fp wz
2235c     08 4E 85 F1 | 	sub	fp, #8
22360     18 00 90 AD |  if_e	jmp	#LR__3700
22364     10 4E 05 F1 | 	add	fp, #16
22368     A7 12 02 F6 | 	mov	arg01, fp
2236c     08 4E 85 F1 | 	sub	fp, #8
22370     A7 14 02 FB | 	rdlong	arg02, fp
22374     08 4E 85 F1 | 	sub	fp, #8
22378     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
2237c                 | LR__3700
2237c                 | LR__3701
2237c                 | LR__3702
2237c                 | LR__3703
2237c                 | ' 			}
2237c                 | ' 		}
2237c                 | ' 		;
2237c                 | ' 	}
2237c                 | ' 
2237c                 | ' 	return res ;
2237c     0C 4E 05 F1 | 	add	fp, #12
22380     A7 FA 01 FB | 	rdlong	result1, fp
22384     0C 4E 85 F1 | 	sub	fp, #12
22388     A7 F0 03 F6 | 	mov	ptra, fp
2238c     B2 00 A0 FD | 	call	#popregs_
22390                 | _fatfs_cc_f_stat_ret
22390     2D 00 64 FD | 	ret
22394                 | 
22394                 | _fatfs_cc_f_unlink
22394     00 4A 05 F6 | 	mov	COUNT_, #0
22398     A8 00 A0 FD | 	call	#pushregs_
2239c     74 F0 07 F1 | 	add	ptra, #116
223a0     04 4E 05 F1 | 	add	fp, #4
223a4     A7 12 62 FC | 	wrlong	arg01, fp
223a8     68 4E 05 F1 | 	add	fp, #104
223ac     A7 00 68 FC | 	wrlong	#0, fp
223b0     68 4E 85 F1 | 	sub	fp, #104
223b4     A7 12 02 F6 | 	mov	arg01, fp
223b8     6C 4E 05 F1 | 	add	fp, #108
223bc     A7 14 02 F6 | 	mov	arg02, fp
223c0     70 4E 85 F1 | 	sub	fp, #112
223c4     02 16 06 F6 | 	mov	arg03, #2
223c8     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
223cc     08 4E 05 F1 | 	add	fp, #8
223d0     A7 FA 61 FC | 	wrlong	result1, fp
223d4     08 4E 85 F1 | 	sub	fp, #8
223d8     00 FA 0D F2 | 	cmp	result1, #0 wz
223dc     E4 01 90 5D |  if_ne	jmp	#LR__3718
223e0     70 4E 05 F1 | 	add	fp, #112
223e4     A7 16 02 FB | 	rdlong	arg03, fp
223e8     64 4E 85 F1 | 	sub	fp, #100
223ec     A7 16 62 FC | 	wrlong	arg03, fp
223f0     A7 12 02 F6 | 	mov	arg01, fp
223f4     08 4E 85 F1 | 	sub	fp, #8
223f8     A7 14 02 FB | 	rdlong	arg02, fp
223fc     04 4E 85 F1 | 	sub	fp, #4
22400     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
22404     08 4E 05 F1 | 	add	fp, #8
22408     A7 FA 61 FC | 	wrlong	result1, fp
2240c     00 FA 4D F2 | 	cmps	result1, #0 wz
22410     08 4E 85 F1 | 	sub	fp, #8
22414     AC 01 90 5D |  if_ne	jmp	#LR__3717
22418     37 4E 05 F1 | 	add	fp, #55
2241c     A7 FA C1 FA | 	rdbyte	result1, fp
22420     37 4E 85 F1 | 	sub	fp, #55
22424     80 FA CD F7 | 	test	result1, #128 wz
22428     08 4E 05 51 |  if_ne	add	fp, #8
2242c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
22430     08 4E 85 51 |  if_ne	sub	fp, #8
22434     1C 00 90 5D |  if_ne	jmp	#LR__3710
22438     12 4E 05 F1 | 	add	fp, #18
2243c     A7 FA C1 FA | 	rdbyte	result1, fp
22440     12 4E 85 F1 | 	sub	fp, #18
22444     01 FA CD F7 | 	test	result1, #1 wz
22448     08 4E 05 51 |  if_ne	add	fp, #8
2244c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
22450     08 4E 85 51 |  if_ne	sub	fp, #8
22454                 | LR__3710
22454     08 4E 05 F1 | 	add	fp, #8
22458     A7 FA 09 FB | 	rdlong	result1, fp wz
2245c     08 4E 85 F1 | 	sub	fp, #8
22460     C8 00 90 5D |  if_ne	jmp	#LR__3713
22464     70 4E 05 F1 | 	add	fp, #112
22468     A7 12 02 FB | 	rdlong	arg01, fp
2246c     48 4E 85 F1 | 	sub	fp, #72
22470     A7 14 02 FB | 	rdlong	arg02, fp
22474     28 4E 85 F1 | 	sub	fp, #40
22478     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
2247c     6C 4E 05 F1 | 	add	fp, #108
22480     A7 FA 61 FC | 	wrlong	result1, fp
22484     5A 4E 85 F1 | 	sub	fp, #90
22488     A7 FA C1 FA | 	rdbyte	result1, fp
2248c     12 4E 85 F1 | 	sub	fp, #18
22490     10 FA CD F7 | 	test	result1, #16 wz
22494     94 00 90 AD |  if_e	jmp	#LR__3712
22498     70 4E 05 F1 | 	add	fp, #112
2249c     A7 FA 01 FB | 	rdlong	result1, fp
224a0     34 4E 85 F1 | 	sub	fp, #52
224a4     A7 FA 61 FC | 	wrlong	result1, fp
224a8     30 4E 05 F1 | 	add	fp, #48
224ac     A7 16 02 FB | 	rdlong	arg03, fp
224b0     28 4E 85 F1 | 	sub	fp, #40
224b4     A7 16 62 FC | 	wrlong	arg03, fp
224b8     08 4E 85 F1 | 	sub	fp, #8
224bc     A7 12 02 F6 | 	mov	arg01, fp
224c0     3C 4E 85 F1 | 	sub	fp, #60
224c4     00 14 06 F6 | 	mov	arg02, #0
224c8     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
224cc     08 4E 05 F1 | 	add	fp, #8
224d0     A7 FA 61 FC | 	wrlong	result1, fp
224d4     08 4E 85 F1 | 	sub	fp, #8
224d8     00 FA 0D F2 | 	cmp	result1, #0 wz
224dc     4C 00 90 5D |  if_ne	jmp	#LR__3711
224e0     3C 4E 05 F1 | 	add	fp, #60
224e4     A7 12 02 F6 | 	mov	arg01, fp
224e8     3C 4E 85 F1 | 	sub	fp, #60
224ec     00 14 06 F6 | 	mov	arg02, #0
224f0     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
224f4     08 4E 05 F1 | 	add	fp, #8
224f8     A7 FA 61 FC | 	wrlong	result1, fp
224fc     00 FA 4D F2 | 	cmps	result1, #0 wz
22500     08 4E 85 F1 | 	sub	fp, #8
22504     08 4E 05 A1 |  if_e	add	fp, #8
22508     A7 0E 68 AC |  if_e	wrlong	#7, fp
2250c     08 4E 85 A1 |  if_e	sub	fp, #8
22510     08 4E 05 F1 | 	add	fp, #8
22514     A7 FA 01 FB | 	rdlong	result1, fp
22518     08 4E 85 F1 | 	sub	fp, #8
2251c     04 FA 0D F2 | 	cmp	result1, #4 wz
22520     08 4E 05 A1 |  if_e	add	fp, #8
22524     A7 00 68 AC |  if_e	wrlong	#0, fp
22528     08 4E 85 A1 |  if_e	sub	fp, #8
2252c                 | LR__3711
2252c                 | LR__3712
2252c                 | LR__3713
2252c     08 4E 05 F1 | 	add	fp, #8
22530     A7 FA 09 FB | 	rdlong	result1, fp wz
22534     08 4E 85 F1 | 	sub	fp, #8
22538     88 00 90 5D |  if_ne	jmp	#LR__3716
2253c     0C 4E 05 F1 | 	add	fp, #12
22540     A7 12 02 F6 | 	mov	arg01, fp
22544     0C 4E 85 F1 | 	sub	fp, #12
22548     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
2254c     08 4E 05 F1 | 	add	fp, #8
22550     A7 FA 61 FC | 	wrlong	result1, fp
22554     08 4E 85 F1 | 	sub	fp, #8
22558     00 FA 0D F2 | 	cmp	result1, #0 wz
2255c     38 00 90 5D |  if_ne	jmp	#LR__3714
22560     6C 4E 05 F1 | 	add	fp, #108
22564     A7 FA 09 FB | 	rdlong	result1, fp wz
22568     6C 4E 85 F1 | 	sub	fp, #108
2256c     28 00 90 AD |  if_e	jmp	#LR__3714
22570     0C 4E 05 F1 | 	add	fp, #12
22574     A7 12 02 F6 | 	mov	arg01, fp
22578     60 4E 05 F1 | 	add	fp, #96
2257c     A7 14 02 FB | 	rdlong	arg02, fp
22580     6C 4E 85 F1 | 	sub	fp, #108
22584     00 16 06 F6 | 	mov	arg03, #0
22588     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
2258c     08 4E 05 F1 | 	add	fp, #8
22590     A7 FA 61 FC | 	wrlong	result1, fp
22594     08 4E 85 F1 | 	sub	fp, #8
22598                 | LR__3714
22598     08 4E 05 F1 | 	add	fp, #8
2259c     A7 FA 09 FB | 	rdlong	result1, fp wz
225a0     08 4E 85 F1 | 	sub	fp, #8
225a4     1C 00 90 5D |  if_ne	jmp	#LR__3715
225a8     70 4E 05 F1 | 	add	fp, #112
225ac     A7 12 02 FB | 	rdlong	arg01, fp
225b0     70 4E 85 F1 | 	sub	fp, #112
225b4     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
225b8     08 4E 05 F1 | 	add	fp, #8
225bc     A7 FA 61 FC | 	wrlong	result1, fp
225c0     08 4E 85 F1 | 	sub	fp, #8
225c4                 | LR__3715
225c4                 | LR__3716
225c4                 | LR__3717
225c4                 | LR__3718
225c4                 | ' 			}
225c4                 | ' 		}
225c4                 | ' 		;
225c4                 | ' 	}
225c4                 | ' 
225c4                 | ' 	return res ;
225c4     08 4E 05 F1 | 	add	fp, #8
225c8     A7 FA 01 FB | 	rdlong	result1, fp
225cc     08 4E 85 F1 | 	sub	fp, #8
225d0     A7 F0 03 F6 | 	mov	ptra, fp
225d4     B2 00 A0 FD | 	call	#popregs_
225d8                 | _fatfs_cc_f_unlink_ret
225d8     2D 00 64 FD | 	ret
225dc                 | 
225dc                 | _fatfs_cc_f_mkdir
225dc     00 4A 05 F6 | 	mov	COUNT_, #0
225e0     A8 00 A0 FD | 	call	#pushregs_
225e4     5C F0 07 F1 | 	add	ptra, #92
225e8     04 4E 05 F1 | 	add	fp, #4
225ec     A7 12 62 FC | 	wrlong	arg01, fp
225f0     A7 12 02 F6 | 	mov	arg01, fp
225f4     48 4E 05 F1 | 	add	fp, #72
225f8     A7 14 02 F6 | 	mov	arg02, fp
225fc     4C 4E 85 F1 | 	sub	fp, #76
22600     02 16 06 F6 | 	mov	arg03, #2
22604     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
22608     08 4E 05 F1 | 	add	fp, #8
2260c     A7 FA 61 FC | 	wrlong	result1, fp
22610     08 4E 85 F1 | 	sub	fp, #8
22614     00 FA 0D F2 | 	cmp	result1, #0 wz
22618     C4 02 90 5D |  if_ne	jmp	#LR__3725
2261c     4C 4E 05 F1 | 	add	fp, #76
22620     A7 16 02 FB | 	rdlong	arg03, fp
22624     40 4E 85 F1 | 	sub	fp, #64
22628     A7 16 62 FC | 	wrlong	arg03, fp
2262c     A7 12 02 F6 | 	mov	arg01, fp
22630     08 4E 85 F1 | 	sub	fp, #8
22634     A7 14 02 FB | 	rdlong	arg02, fp
22638     04 4E 85 F1 | 	sub	fp, #4
2263c     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
22640     08 4E 05 F1 | 	add	fp, #8
22644     A7 FA 61 FC | 	wrlong	result1, fp
22648     00 FA 4D F2 | 	cmps	result1, #0 wz
2264c     08 4E 85 F1 | 	sub	fp, #8
22650     08 4E 05 A1 |  if_e	add	fp, #8
22654     A7 10 68 AC |  if_e	wrlong	#8, fp
22658     08 4E 85 A1 |  if_e	sub	fp, #8
2265c     08 4E 05 F1 | 	add	fp, #8
22660     A7 FA 01 FB | 	rdlong	result1, fp
22664     08 4E 85 F1 | 	sub	fp, #8
22668     04 FA 0D F2 | 	cmp	result1, #4 wz
2266c     70 02 90 5D |  if_ne	jmp	#LR__3724
22670     4C 4E 05 F1 | 	add	fp, #76
22674     A7 16 02 FB | 	rdlong	arg03, fp
22678     10 4E 85 F1 | 	sub	fp, #16
2267c     A7 16 62 FC | 	wrlong	arg03, fp
22680     A7 12 02 F6 | 	mov	arg01, fp
22684     3C 4E 85 F1 | 	sub	fp, #60
22688     00 14 06 F6 | 	mov	arg02, #0
2268c     04 AC BF FD | 	call	#_fatfs_cc_create_chain
22690     50 4E 05 F1 | 	add	fp, #80
22694     A7 FA 61 FC | 	wrlong	result1, fp
22698     48 4E 85 F1 | 	sub	fp, #72
2269c     A7 00 68 FC | 	wrlong	#0, fp
226a0     48 4E 05 F1 | 	add	fp, #72
226a4     A7 FA 09 FB | 	rdlong	result1, fp wz
226a8     50 4E 85 F1 | 	sub	fp, #80
226ac     08 4E 05 A1 |  if_e	add	fp, #8
226b0     A7 0E 68 AC |  if_e	wrlong	#7, fp
226b4     08 4E 85 A1 |  if_e	sub	fp, #8
226b8     50 4E 05 F1 | 	add	fp, #80
226bc     A7 FA 01 FB | 	rdlong	result1, fp
226c0     50 4E 85 F1 | 	sub	fp, #80
226c4     01 FA 0D F2 | 	cmp	result1, #1 wz
226c8     08 4E 05 A1 |  if_e	add	fp, #8
226cc     A7 04 68 AC |  if_e	wrlong	#2, fp
226d0     08 4E 85 A1 |  if_e	sub	fp, #8
226d4     50 4E 05 F1 | 	add	fp, #80
226d8     A7 16 02 FB | 	rdlong	arg03, fp
226dc     50 4E 85 F1 | 	sub	fp, #80
226e0     FF FF 7F FF 
226e4     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
226e8     08 4E 05 A1 |  if_e	add	fp, #8
226ec     A7 02 68 AC |  if_e	wrlong	#1, fp
226f0     08 4E 85 A1 |  if_e	sub	fp, #8
226f4     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
226f8     58 4E 05 F1 | 	add	fp, #88
226fc     A7 FA 61 FC | 	wrlong	result1, fp
22700     50 4E 85 F1 | 	sub	fp, #80
22704     A7 FA 09 FB | 	rdlong	result1, fp wz
22708     08 4E 85 F1 | 	sub	fp, #8
2270c     1C 01 90 5D |  if_ne	jmp	#LR__3721
22710     4C 4E 05 F1 | 	add	fp, #76
22714     A7 12 02 FB | 	rdlong	arg01, fp
22718     04 4E 05 F1 | 	add	fp, #4
2271c     A7 14 02 FB | 	rdlong	arg02, fp
22720     50 4E 85 F1 | 	sub	fp, #80
22724     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
22728     08 4E 05 F1 | 	add	fp, #8
2272c     A7 FA 61 FC | 	wrlong	result1, fp
22730     00 FA 4D F2 | 	cmps	result1, #0 wz
22734     08 4E 85 F1 | 	sub	fp, #8
22738     F0 00 90 5D |  if_ne	jmp	#LR__3720
2273c     4C 4E 05 F1 | 	add	fp, #76
22740     A7 12 02 FB | 	rdlong	arg01, fp
22744     4C 4E 85 F1 | 	sub	fp, #76
22748     34 12 06 F1 | 	add	arg01, #52
2274c     20 14 06 F6 | 	mov	arg02, #32
22750     0B 16 06 F6 | 	mov	arg03, #11
22754     98 00 A0 FD | 	call	#\builtin_bytefill_
22758     4C 4E 05 F1 | 	add	fp, #76
2275c     A7 FA 01 FB | 	rdlong	result1, fp
22760     34 FA 05 F1 | 	add	result1, #52
22764     FD 5C 48 FC | 	wrbyte	#46, result1
22768     A7 16 02 FB | 	rdlong	arg03, fp
2276c     3F 16 06 F1 | 	add	arg03, #63
22770     0B 21 48 FC | 	wrbyte	#16, arg03
22774     A7 12 02 FB | 	rdlong	arg01, fp
22778     4A 12 06 F1 | 	add	arg01, #74
2277c     0C 4E 05 F1 | 	add	fp, #12
22780     A7 14 02 FB | 	rdlong	arg02, fp
22784     09 15 62 FC | 	wrlong	arg02, arg01
22788     0C 4E 85 F1 | 	sub	fp, #12
2278c     A7 14 02 FB | 	rdlong	arg02, fp
22790     0A 13 02 F6 | 	mov	arg01, arg02
22794     34 14 06 F1 | 	add	arg02, #52
22798     04 4E 05 F1 | 	add	fp, #4
2279c     A7 16 02 FB | 	rdlong	arg03, fp
227a0     50 4E 85 F1 | 	sub	fp, #80
227a4     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
227a8     4C 4E 05 F1 | 	add	fp, #76
227ac     A7 14 02 FB | 	rdlong	arg02, fp
227b0     0A 13 02 F6 | 	mov	arg01, arg02
227b4     54 12 06 F1 | 	add	arg01, #84
227b8     4C 4E 85 F1 | 	sub	fp, #76
227bc     34 14 06 F1 | 	add	arg02, #52
227c0     20 16 06 F6 | 	mov	arg03, #32
227c4     A0 32 BF FD | 	call	#__system____builtin_memmove
227c8     4C 4E 05 F1 | 	add	fp, #76
227cc     A7 16 02 FB | 	rdlong	arg03, fp
227d0     55 16 06 F1 | 	add	arg03, #85
227d4     0B 5D 48 FC | 	wrbyte	#46, arg03
227d8     38 4E 85 F1 | 	sub	fp, #56
227dc     A7 16 02 FB | 	rdlong	arg03, fp
227e0     40 4E 05 F1 | 	add	fp, #64
227e4     A7 16 62 FC | 	wrlong	arg03, fp
227e8     08 4E 85 F1 | 	sub	fp, #8
227ec     A7 14 02 FB | 	rdlong	arg02, fp
227f0     0A 13 02 F6 | 	mov	arg01, arg02
227f4     54 14 06 F1 | 	add	arg02, #84
227f8     4C 4E 85 F1 | 	sub	fp, #76
227fc     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
22800     4C 4E 05 F1 | 	add	fp, #76
22804     A7 16 02 FB | 	rdlong	arg03, fp
22808     03 16 06 F1 | 	add	arg03, #3
2280c     0B 03 48 FC | 	wrbyte	#1, arg03
22810     40 4E 85 F1 | 	sub	fp, #64
22814     A7 12 02 F6 | 	mov	arg01, fp
22818     0C 4E 85 F1 | 	sub	fp, #12
2281c     44 BA BF FD | 	call	#_fatfs_cc_dir_register
22820     08 4E 05 F1 | 	add	fp, #8
22824     A7 FA 61 FC | 	wrlong	result1, fp
22828     08 4E 85 F1 | 	sub	fp, #8
2282c                 | LR__3720
2282c                 | LR__3721
2282c     08 4E 05 F1 | 	add	fp, #8
22830     A7 FA 09 FB | 	rdlong	result1, fp wz
22834     08 4E 85 F1 | 	sub	fp, #8
22838     88 00 90 5D |  if_ne	jmp	#LR__3722
2283c     28 4E 05 F1 | 	add	fp, #40
22840     A7 12 02 FB | 	rdlong	arg01, fp
22844     16 12 06 F1 | 	add	arg01, #22
22848     30 4E 05 F1 | 	add	fp, #48
2284c     A7 14 02 FB | 	rdlong	arg02, fp
22850     09 15 62 FC | 	wrlong	arg02, arg01
22854     0C 4E 85 F1 | 	sub	fp, #12
22858     A7 12 02 FB | 	rdlong	arg01, fp
2285c     24 4E 85 F1 | 	sub	fp, #36
22860     A7 14 02 FB | 	rdlong	arg02, fp
22864     28 4E 05 F1 | 	add	fp, #40
22868     A7 16 02 FB | 	rdlong	arg03, fp
2286c     50 4E 85 F1 | 	sub	fp, #80
22870     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
22874     28 4E 05 F1 | 	add	fp, #40
22878     A7 FA 01 FB | 	rdlong	result1, fp
2287c     0B FA 05 F1 | 	add	result1, #11
22880     FD 20 48 FC | 	wrbyte	#16, result1
22884     24 4E 05 F1 | 	add	fp, #36
22888     A7 FA 01 FB | 	rdlong	result1, fp
2288c     03 FA 05 F1 | 	add	result1, #3
22890     FD 02 48 FC | 	wrbyte	#1, result1
22894     44 4E 85 F1 | 	sub	fp, #68
22898     A7 FA 09 FB | 	rdlong	result1, fp wz
2289c     08 4E 85 F1 | 	sub	fp, #8
228a0     3C 00 90 5D |  if_ne	jmp	#LR__3723
228a4     4C 4E 05 F1 | 	add	fp, #76
228a8     A7 12 02 FB | 	rdlong	arg01, fp
228ac     4C 4E 85 F1 | 	sub	fp, #76
228b0     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
228b4     08 4E 05 F1 | 	add	fp, #8
228b8     A7 FA 61 FC | 	wrlong	result1, fp
228bc     08 4E 85 F1 | 	sub	fp, #8
228c0     1C 00 90 FD | 	jmp	#LR__3723
228c4                 | LR__3722
228c4     3C 4E 05 F1 | 	add	fp, #60
228c8     A7 12 02 F6 | 	mov	arg01, fp
228cc     14 4E 05 F1 | 	add	fp, #20
228d0     A7 14 02 FB | 	rdlong	arg02, fp
228d4     50 4E 85 F1 | 	sub	fp, #80
228d8     00 16 06 F6 | 	mov	arg03, #0
228dc     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
228e0                 | LR__3723
228e0                 | LR__3724
228e0                 | LR__3725
228e0                 | ' 				remove_chain(&sobj, dcl, 0);
228e0                 | ' 			}
228e0                 | ' 		}
228e0                 | ' 		;
228e0                 | ' 	}
228e0                 | ' 
228e0                 | ' 	return res ;
228e0     08 4E 05 F1 | 	add	fp, #8
228e4     A7 FA 01 FB | 	rdlong	result1, fp
228e8     08 4E 85 F1 | 	sub	fp, #8
228ec     A7 F0 03 F6 | 	mov	ptra, fp
228f0     B2 00 A0 FD | 	call	#popregs_
228f4                 | _fatfs_cc_f_mkdir_ret
228f4     2D 00 64 FD | 	ret
228f8                 | 
228f8                 | _fatfs_cc_f_rename
228f8     01 4A 05 F6 | 	mov	COUNT_, #1
228fc     A8 00 A0 FD | 	call	#pushregs_
22900     9C F0 07 F1 | 	add	ptra, #156
22904     04 4E 05 F1 | 	add	fp, #4
22908     A7 12 62 FC | 	wrlong	arg01, fp
2290c     04 4E 05 F1 | 	add	fp, #4
22910     A7 14 62 FC | 	wrlong	arg02, fp
22914     A7 12 02 F6 | 	mov	arg01, fp
22918     08 4E 85 F1 | 	sub	fp, #8
2291c     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
22920     04 4E 05 F1 | 	add	fp, #4
22924     A7 12 02 F6 | 	mov	arg01, fp
22928     6C 4E 05 F1 | 	add	fp, #108
2292c     A7 14 02 F6 | 	mov	arg02, fp
22930     70 4E 85 F1 | 	sub	fp, #112
22934     02 16 06 F6 | 	mov	arg03, #2
22938     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
2293c     0C 4E 05 F1 | 	add	fp, #12
22940     A7 FA 61 FC | 	wrlong	result1, fp
22944     0C 4E 85 F1 | 	sub	fp, #12
22948     00 FA 0D F2 | 	cmp	result1, #0 wz
2294c     44 03 90 5D |  if_ne	jmp	#LR__3743
22950     70 4E 05 F1 | 	add	fp, #112
22954     A7 16 02 FB | 	rdlong	arg03, fp
22958     60 4E 85 F1 | 	sub	fp, #96
2295c     A7 16 62 FC | 	wrlong	arg03, fp
22960     A7 12 02 F6 | 	mov	arg01, fp
22964     0C 4E 85 F1 | 	sub	fp, #12
22968     A7 14 02 FB | 	rdlong	arg02, fp
2296c     04 4E 85 F1 | 	sub	fp, #4
22970     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
22974     0C 4E 05 F1 | 	add	fp, #12
22978     A7 FA 61 FC | 	wrlong	result1, fp
2297c     00 FA 4D F2 | 	cmps	result1, #0 wz
22980     0C 4E 85 F1 | 	sub	fp, #12
22984     1C 00 90 5D |  if_ne	jmp	#LR__3730
22988     3B 4E 05 F1 | 	add	fp, #59
2298c     A7 FA C1 FA | 	rdbyte	result1, fp
22990     3B 4E 85 F1 | 	sub	fp, #59
22994     A0 FA CD F7 | 	test	result1, #160 wz
22998     0C 4E 05 51 |  if_ne	add	fp, #12
2299c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
229a0     0C 4E 85 51 |  if_ne	sub	fp, #12
229a4                 | LR__3730
229a4     0C 4E 05 F1 | 	add	fp, #12
229a8     A7 1E 0A FB | 	rdlong	local01, fp wz
229ac     0C 4E 85 F1 | 	sub	fp, #12
229b0     E0 02 90 5D |  if_ne	jmp	#LR__3742
229b4     74 4E 05 F1 | 	add	fp, #116
229b8     A7 12 02 F6 | 	mov	arg01, fp
229bc     48 4E 85 F1 | 	sub	fp, #72
229c0     A7 14 02 FB | 	rdlong	arg02, fp
229c4     2C 4E 85 F1 | 	sub	fp, #44
229c8     20 16 06 F6 | 	mov	arg03, #32
229cc     98 30 BF FD | 	call	#__system____builtin_memmove
229d0     40 4E 05 F1 | 	add	fp, #64
229d4     A7 12 02 F6 | 	mov	arg01, fp
229d8     30 4E 85 F1 | 	sub	fp, #48
229dc     A7 14 02 F6 | 	mov	arg02, fp
229e0     10 4E 85 F1 | 	sub	fp, #16
229e4     30 16 06 F6 | 	mov	arg03, #48
229e8     7C 30 BF FD | 	call	#__system____builtin_memmove
229ec     40 4E 05 F1 | 	add	fp, #64
229f0     A7 12 02 F6 | 	mov	arg01, fp
229f4     38 4E 85 F1 | 	sub	fp, #56
229f8     A7 14 02 FB | 	rdlong	arg02, fp
229fc     08 4E 85 F1 | 	sub	fp, #8
22a00     34 CA BF FD | 	call	#_fatfs_cc_follow_path
22a04     0C 4E 05 F1 | 	add	fp, #12
22a08     A7 FA 61 FC | 	wrlong	result1, fp
22a0c     0C 4E 85 F1 | 	sub	fp, #12
22a10     00 FA 0D F2 | 	cmp	result1, #0 wz
22a14     4C 00 90 5D |  if_ne	jmp	#LR__3733
22a18     48 4E 05 F1 | 	add	fp, #72
22a1c     A7 FA 01 FB | 	rdlong	result1, fp
22a20     30 4E 85 F1 | 	sub	fp, #48
22a24     A7 16 02 FB | 	rdlong	arg03, fp
22a28     18 4E 85 F1 | 	sub	fp, #24
22a2c     0B FB 09 F2 | 	cmp	result1, arg03 wz
22a30     20 00 90 5D |  if_ne	jmp	#LR__3731
22a34     50 4E 05 F1 | 	add	fp, #80
22a38     A7 FA 01 FB | 	rdlong	result1, fp
22a3c     30 4E 85 F1 | 	sub	fp, #48
22a40     A7 16 02 FB | 	rdlong	arg03, fp
22a44     20 4E 85 F1 | 	sub	fp, #32
22a48     0B FB 09 F2 | 	cmp	result1, arg03 wz
22a4c     04 1E 06 A6 |  if_e	mov	local01, #4
22a50     04 00 90 AD |  if_e	jmp	#LR__3732
22a54                 | LR__3731
22a54     08 1E 06 F6 | 	mov	local01, #8
22a58                 | LR__3732
22a58     0C 4E 05 F1 | 	add	fp, #12
22a5c     A7 1E 62 FC | 	wrlong	local01, fp
22a60     0C 4E 85 F1 | 	sub	fp, #12
22a64                 | LR__3733
22a64     0C 4E 05 F1 | 	add	fp, #12
22a68     A7 1E 02 FB | 	rdlong	local01, fp
22a6c     0C 4E 85 F1 | 	sub	fp, #12
22a70     04 1E 0E F2 | 	cmp	local01, #4 wz
22a74     CC 01 90 5D |  if_ne	jmp	#LR__3739
22a78     40 4E 05 F1 | 	add	fp, #64
22a7c     A7 12 02 F6 | 	mov	arg01, fp
22a80     40 4E 85 F1 | 	sub	fp, #64
22a84     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
22a88     0C 4E 05 F1 | 	add	fp, #12
22a8c     A7 FA 61 FC | 	wrlong	result1, fp
22a90     0C 4E 85 F1 | 	sub	fp, #12
22a94     00 FA 0D F2 | 	cmp	result1, #0 wz
22a98     A8 01 90 5D |  if_ne	jmp	#LR__3738
22a9c     5C 4E 05 F1 | 	add	fp, #92
22aa0     A7 12 02 FB | 	rdlong	arg01, fp
22aa4     38 4E 05 F1 | 	add	fp, #56
22aa8     A7 12 62 FC | 	wrlong	arg01, fp
22aac     0D 12 06 F1 | 	add	arg01, #13
22ab0     20 4E 85 F1 | 	sub	fp, #32
22ab4     A7 14 02 F6 | 	mov	arg02, fp
22ab8     74 4E 85 F1 | 	sub	fp, #116
22abc     0D 14 06 F1 | 	add	arg02, #13
22ac0     13 16 06 F6 | 	mov	arg03, #19
22ac4     A0 2F BF FD | 	call	#__system____builtin_memmove
22ac8     94 4E 05 F1 | 	add	fp, #148
22acc     A7 1E 02 FB | 	rdlong	local01, fp
22ad0     15 4E 85 F1 | 	sub	fp, #21
22ad4     A7 FA C1 FA | 	rdbyte	result1, fp
22ad8     0B 1E 06 F1 | 	add	local01, #11
22adc     0F FB 41 FC | 	wrbyte	result1, local01
22ae0     15 4E 05 F1 | 	add	fp, #21
22ae4     A7 1E 02 FB | 	rdlong	local01, fp
22ae8     94 4E 85 F1 | 	sub	fp, #148
22aec     0B 1E 06 F1 | 	add	local01, #11
22af0     0F 1F C2 FA | 	rdbyte	local01, local01
22af4     10 1E CE F7 | 	test	local01, #16 wz
22af8     24 00 90 5D |  if_ne	jmp	#LR__3734
22afc     94 4E 05 F1 | 	add	fp, #148
22b00     A7 FA 01 FB | 	rdlong	result1, fp
22b04     FD 1E 02 F6 | 	mov	local01, result1
22b08     94 4E 85 F1 | 	sub	fp, #148
22b0c     0B FA 05 F1 | 	add	result1, #11
22b10     FD FA C1 FA | 	rdbyte	result1, result1
22b14     20 FA 45 F5 | 	or	result1, #32
22b18     0B 1E 06 F1 | 	add	local01, #11
22b1c     0F FB 41 FC | 	wrbyte	result1, local01
22b20                 | LR__3734
22b20     70 4E 05 F1 | 	add	fp, #112
22b24     A7 1E 02 FB | 	rdlong	local01, fp
22b28     03 1E 06 F1 | 	add	local01, #3
22b2c     0F 03 48 FC | 	wrbyte	#1, local01
22b30     24 4E 05 F1 | 	add	fp, #36
22b34     A7 1E 02 FB | 	rdlong	local01, fp
22b38     94 4E 85 F1 | 	sub	fp, #148
22b3c     0B 1E 06 F1 | 	add	local01, #11
22b40     0F 1F C2 FA | 	rdbyte	local01, local01
22b44     10 1E CE F7 | 	test	local01, #16 wz
22b48     F8 00 90 AD |  if_e	jmp	#LR__3737
22b4c     18 4E 05 F1 | 	add	fp, #24
22b50     A7 16 02 FB | 	rdlong	arg03, fp
22b54     30 4E 05 F1 | 	add	fp, #48
22b58     A7 1E 02 FB | 	rdlong	local01, fp
22b5c     48 4E 85 F1 | 	sub	fp, #72
22b60     0F 17 0A F2 | 	cmp	arg03, local01 wz
22b64     DC 00 90 AD |  if_e	jmp	#LR__3737
22b68     70 4E 05 F1 | 	add	fp, #112
22b6c     A7 12 02 FB | 	rdlong	arg01, fp
22b70     09 1F 02 F6 | 	mov	local01, arg01
22b74     24 4E 05 F1 | 	add	fp, #36
22b78     A7 14 02 FB | 	rdlong	arg02, fp
22b7c     94 4E 85 F1 | 	sub	fp, #148
22b80     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
22b84     FD 14 02 F6 | 	mov	arg02, result1
22b88     0F 13 02 F6 | 	mov	arg01, local01
22b8c     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
22b90     98 4E 05 F1 | 	add	fp, #152
22b94     A7 FA 61 FC | 	wrlong	result1, fp
22b98     00 FA 4D F2 | 	cmps	result1, #0 wz
22b9c     98 4E 85 F1 | 	sub	fp, #152
22ba0     0C 4E 05 A1 |  if_e	add	fp, #12
22ba4     A7 04 68 AC |  if_e	wrlong	#2, fp
22ba8     0C 4E 85 A1 |  if_e	sub	fp, #12
22bac     94 00 90 AD |  if_e	jmp	#LR__3736
22bb0     70 4E 05 F1 | 	add	fp, #112
22bb4     A7 12 02 FB | 	rdlong	arg01, fp
22bb8     28 4E 05 F1 | 	add	fp, #40
22bbc     A7 14 02 FB | 	rdlong	arg02, fp
22bc0     98 4E 85 F1 | 	sub	fp, #152
22bc4     4C A0 BF FD | 	call	#_fatfs_cc_move_window
22bc8     0C 4E 05 F1 | 	add	fp, #12
22bcc     A7 FA 61 FC | 	wrlong	result1, fp
22bd0     64 4E 05 F1 | 	add	fp, #100
22bd4     A7 1E 02 FB | 	rdlong	local01, fp
22bd8     54 1E 06 F1 | 	add	local01, #84
22bdc     24 4E 05 F1 | 	add	fp, #36
22be0     A7 1E 62 FC | 	wrlong	local01, fp
22be4     88 4E 85 F1 | 	sub	fp, #136
22be8     A7 1E 0A FB | 	rdlong	local01, fp wz
22bec     0C 4E 85 F1 | 	sub	fp, #12
22bf0     50 00 90 5D |  if_ne	jmp	#LR__3735
22bf4     94 4E 05 F1 | 	add	fp, #148
22bf8     A7 1E 02 FB | 	rdlong	local01, fp
22bfc     94 4E 85 F1 | 	sub	fp, #148
22c00     01 1E 06 F1 | 	add	local01, #1
22c04     0F 1F C2 FA | 	rdbyte	local01, local01
22c08     2E 1E 0E F2 | 	cmp	local01, #46 wz
22c0c     34 00 90 5D |  if_ne	jmp	#LR__3735
22c10     70 4E 05 F1 | 	add	fp, #112
22c14     A7 12 02 FB | 	rdlong	arg01, fp
22c18     24 4E 05 F1 | 	add	fp, #36
22c1c     A7 14 02 FB | 	rdlong	arg02, fp
22c20     4C 4E 85 F1 | 	sub	fp, #76
22c24     A7 16 02 FB | 	rdlong	arg03, fp
22c28     48 4E 85 F1 | 	sub	fp, #72
22c2c     50 AD BF FD | 	call	#_fatfs_cc_st_clust
22c30     70 4E 05 F1 | 	add	fp, #112
22c34     A7 1E 02 FB | 	rdlong	local01, fp
22c38     70 4E 85 F1 | 	sub	fp, #112
22c3c     03 1E 06 F1 | 	add	local01, #3
22c40     0F 03 48 FC | 	wrbyte	#1, local01
22c44                 | LR__3735
22c44                 | LR__3736
22c44                 | LR__3737
22c44                 | LR__3738
22c44                 | LR__3739
22c44     0C 4E 05 F1 | 	add	fp, #12
22c48     A7 1E 0A FB | 	rdlong	local01, fp wz
22c4c     0C 4E 85 F1 | 	sub	fp, #12
22c50     40 00 90 5D |  if_ne	jmp	#LR__3741
22c54     10 4E 05 F1 | 	add	fp, #16
22c58     A7 12 02 F6 | 	mov	arg01, fp
22c5c     10 4E 85 F1 | 	sub	fp, #16
22c60     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
22c64     0C 4E 05 F1 | 	add	fp, #12
22c68     A7 FA 61 FC | 	wrlong	result1, fp
22c6c     0C 4E 85 F1 | 	sub	fp, #12
22c70     00 FA 0D F2 | 	cmp	result1, #0 wz
22c74     1C 00 90 5D |  if_ne	jmp	#LR__3740
22c78     70 4E 05 F1 | 	add	fp, #112
22c7c     A7 12 02 FB | 	rdlong	arg01, fp
22c80     70 4E 85 F1 | 	sub	fp, #112
22c84     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
22c88     0C 4E 05 F1 | 	add	fp, #12
22c8c     A7 FA 61 FC | 	wrlong	result1, fp
22c90     0C 4E 85 F1 | 	sub	fp, #12
22c94                 | LR__3740
22c94                 | LR__3741
22c94                 | LR__3742
22c94                 | LR__3743
22c94                 | ' 					res = sync_fs(fs);
22c94                 | ' 				}
22c94                 | ' 			}
22c94                 | ' 
22c94                 | ' 		}
22c94                 | ' 		;
22c94                 | ' 	}
22c94                 | ' 
22c94                 | ' 	return res ;
22c94     0C 4E 05 F1 | 	add	fp, #12
22c98     A7 FA 01 FB | 	rdlong	result1, fp
22c9c     0C 4E 85 F1 | 	sub	fp, #12
22ca0     A7 F0 03 F6 | 	mov	ptra, fp
22ca4     B2 00 A0 FD | 	call	#popregs_
22ca8                 | _fatfs_cc_f_rename_ret
22ca8     2D 00 64 FD | 	ret
22cac                 | 
22cac                 | _fatfs_cc_time
22cac     00 4A 05 F6 | 	mov	COUNT_, #0
22cb0     A8 00 A0 FD | 	call	#pushregs_
22cb4     14 F0 07 F1 | 	add	ptra, #20
22cb8     04 4E 05 F1 | 	add	fp, #4
22cbc     A7 12 62 FC | 	wrlong	arg01, fp
22cc0     04 4E 05 F1 | 	add	fp, #4
22cc4     A7 12 02 F6 | 	mov	arg01, fp
22cc8     08 4E 85 F1 | 	sub	fp, #8
22ccc     00 14 06 F6 | 	mov	arg02, #0
22cd0     0C 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
22cd4     08 4E 05 F1 | 	add	fp, #8
22cd8     A7 FA 01 FB | 	rdlong	result1, fp
22cdc     08 4E 05 F1 | 	add	fp, #8
22ce0     A7 FA 61 FC | 	wrlong	result1, fp
22ce4     0C 4E 85 F1 | 	sub	fp, #12
22ce8     A7 FA 09 FB | 	rdlong	result1, fp wz
22cec     04 4E 85 F1 | 	sub	fp, #4
22cf0     18 00 90 AD |  if_e	jmp	#LR__3750
22cf4     04 4E 05 F1 | 	add	fp, #4
22cf8     A7 FA 01 FB | 	rdlong	result1, fp
22cfc     0C 4E 05 F1 | 	add	fp, #12
22d00     A7 14 02 FB | 	rdlong	arg02, fp
22d04     10 4E 85 F1 | 	sub	fp, #16
22d08     FD 14 62 FC | 	wrlong	arg02, result1
22d0c                 | LR__3750
22d0c                 | '         *tp = now;
22d0c                 | '     return now;
22d0c     10 4E 05 F1 | 	add	fp, #16
22d10     A7 FA 01 FB | 	rdlong	result1, fp
22d14     10 4E 85 F1 | 	sub	fp, #16
22d18     A7 F0 03 F6 | 	mov	ptra, fp
22d1c     B2 00 A0 FD | 	call	#popregs_
22d20                 | _fatfs_cc_time_ret
22d20     2D 00 64 FD | 	ret
22d24                 | 
22d24                 | _fatfs_cc_mktime
22d24     06 4A 05 F6 | 	mov	COUNT_, #6
22d28     A8 00 A0 FD | 	call	#pushregs_
22d2c     09 1F 02 F6 | 	mov	local01, arg01
22d30     14 1E 06 F1 | 	add	local01, #20
22d34     0F 13 02 FB | 	rdlong	arg01, local01
22d38     14 1E 86 F1 | 	sub	local01, #20
22d3c     46 12 56 F2 | 	cmps	arg01, #70 wc
22d40                 | '                 return (time_t) -1;
22d40     01 FA 65 C6 |  if_b	neg	result1, #1
22d44     7C 01 90 CD |  if_b	jmp	#LR__3764
22d48     03 00 00 FF 
22d4c     6C 21 06 F6 | 	mov	local02, ##1900
22d50     14 1E 06 F1 | 	add	local01, #20
22d54     0F FB 01 FB | 	rdlong	result1, local01
22d58     FD 20 02 F1 | 	add	local02, result1
22d5c     08 1E 86 F1 | 	sub	local01, #8
22d60     0F 23 02 FB | 	rdlong	local03, local01
22d64     01 22 86 F1 | 	sub	local03, #1
22d68     04 1E 06 F1 | 	add	local01, #4
22d6c     0F 13 02 FB | 	rdlong	arg01, local01
22d70     10 1E 86 F1 | 	sub	local01, #16
22d74     02 12 66 F0 | 	shl	arg01, #2
22d78     02 00 00 FF 
22d7c     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
22d80     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
22d84     09 FB 01 FB | 	rdlong	result1, arg01
22d88     FD 22 02 F1 | 	add	local03, result1
22d8c     10 13 02 F6 | 	mov	arg01, local02
22d90     02 00 00 FF 
22d94     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
22d98     EC 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
22d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
22da0     1C 00 90 AD |  if_e	jmp	#LR__3760
22da4     00 24 06 F6 | 	mov	local04, #0
22da8     10 1E 06 F1 | 	add	local01, #16
22dac     0F FB 01 FB | 	rdlong	result1, local01
22db0     10 1E 86 F1 | 	sub	local01, #16
22db4     02 FA 55 F2 | 	cmps	result1, #2 wc
22db8     01 24 06 36 |  if_ae	mov	local04, #1
22dbc     04 00 90 FD | 	jmp	#LR__3761
22dc0                 | LR__3760
22dc0     00 24 06 F6 | 	mov	local04, #0
22dc4                 | LR__3761
22dc4     04 1E 06 F1 | 	add	local01, #4
22dc8     0F FB 01 FB | 	rdlong	result1, local01
22dcc     04 1E 86 F1 | 	sub	local01, #4
22dd0     0F 27 02 FB | 	rdlong	local05, local01
22dd4     08 1E 06 F1 | 	add	local01, #8
22dd8     0F 13 02 FB | 	rdlong	arg01, local01
22ddc     07 00 00 FF 
22de0     10 12 06 FD | 	qmul	arg01, ##3600
22de4     12 23 02 F1 | 	add	local03, local04
22de8     FD 24 02 F6 | 	mov	local04, result1
22dec     04 24 66 F0 | 	shl	local04, #4
22df0     FD 24 82 F1 | 	sub	local04, result1
22df4     02 24 66 F0 | 	shl	local04, #2
22df8     12 27 02 F1 | 	add	local05, local04
22dfc     08 1E 86 F1 | 	sub	local01, #8
22e00     18 24 62 FD | 	getqx	local04
22e04     A8 00 00 FF 
22e08     80 23 06 FD | 	qmul	local03, ##86400
22e0c     12 27 02 F1 | 	add	local05, local04
22e10     10 23 02 F6 | 	mov	local03, local02
22e14     03 00 00 FF 
22e18     B2 23 86 F1 | 	sub	local03, ##1970
22e1c     18 24 62 FD | 	getqx	local04
22e20     99 F0 00 FF 
22e24     80 23 06 FD | 	qmul	local03, ##31536000
22e28     12 27 02 F1 | 	add	local05, local04
22e2c     10 23 02 F6 | 	mov	local03, local02
22e30     03 00 00 FF 
22e34     B1 23 86 F1 | 	sub	local03, ##1969
22e38     11 29 52 F6 | 	abs	local06, local03 wc
22e3c     02 28 46 F0 | 	shr	local06, #2
22e40     14 29 82 F6 | 	negc	local06, local06
22e44     03 00 00 FF 
22e48     D1 21 56 F2 | 	cmps	local02, ##2001 wc
22e4c     18 24 62 FD | 	getqx	local04
22e50     12 27 02 F1 | 	add	local05, local04
22e54     18 00 90 CD |  if_b	jmp	#LR__3762
22e58     03 00 00 FF 
22e5c     D0 21 86 F1 | 	sub	local02, ##2000
22e60     10 25 52 F6 | 	abs	local04, local02 wc
22e64     64 24 16 FD | 	qdiv	local04, #100
22e68     18 24 62 FD | 	getqx	local04
22e6c     12 29 A2 F3 | 	sumnc	local06, local04
22e70                 | LR__3762
22e70     A8 00 00 FF 
22e74     80 29 06 FD | 	qmul	local06, ##86400
22e78     18 28 62 FD | 	getqx	local06
22e7c     14 27 02 F1 | 	add	local05, local06
22e80     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
22e84     02 00 00 FF 
22e88     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
22e8c     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
22e90     14 27 02 F1 | 	add	local05, local06
22e94     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
22e98     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
22e9c     02 00 00 FF 
22ea0     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
22ea4     01 22 0E F2 | 	cmp	local03, #1 wz
22ea8     14 00 90 5D |  if_ne	jmp	#LR__3763
22eac     0F 13 02 F6 | 	mov	arg01, local01
22eb0     D8 19 B0 FD | 	call	#_fatfs_cc___indst
22eb4     00 FA 0D F2 | 	cmp	result1, #0 wz
22eb8     07 00 00 5F 
22ebc     10 26 86 51 |  if_ne	sub	local05, ##3600
22ec0                 | LR__3763
22ec0                 | '                 s -=  (3600L) ;
22ec0                 | ' 
22ec0                 | '         return s;
22ec0     13 FB 01 F6 | 	mov	result1, local05
22ec4                 | LR__3764
22ec4     A7 F0 03 F6 | 	mov	ptra, fp
22ec8     B2 00 A0 FD | 	call	#popregs_
22ecc                 | _fatfs_cc_mktime_ret
22ecc     2D 00 64 FD | 	ret
22ed0                 | 
22ed0                 | _fatfs_cc__gmtime_r
22ed0     03 4A 05 F6 | 	mov	COUNT_, #3
22ed4     A8 00 A0 FD | 	call	#pushregs_
22ed8     09 1F 02 FB | 	rdlong	local01, arg01
22edc     A8 00 00 FF 
22ee0     80 1F 16 FD | 	qdiv	local01, ##86400
22ee4     18 FA 61 FD | 	getqx	result1
22ee8     04 FA 05 F1 | 	add	result1, #4
22eec     07 FA 15 FD | 	qdiv	result1, #7
22ef0     18 14 06 F1 | 	add	arg02, #24
22ef4     D1 7F 27 FF 
22ef8     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
22efc     D1 7F 27 3F 
22f00     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
22f04     03 00 00 3F 
22f08     DC 21 06 36 |  if_ae	mov	local02, ##2012
22f0c     03 00 00 CF 
22f10     B2 21 06 C6 |  if_b	mov	local02, ##1970
22f14                 | ' 	  year = 1970;
22f14                 | ' 	}
22f14                 | ' 
22f14                 | ' 	for(;;) {
22f14     19 FA 61 FD | 	getqy	result1
22f18     0A FB 61 FC | 	wrlong	result1, arg02
22f1c     18 14 86 F1 | 	sub	arg02, #24
22f20                 | LR__3770
22f20     10 13 02 F6 | 	mov	arg01, local02
22f24     60 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
22f28     00 FA 0D F2 | 	cmp	result1, #0 wz
22f2c     42 F1 00 5F 
22f30     00 23 06 56 |  if_ne	mov	local03, ##31622400
22f34     99 F0 00 AF 
22f38     80 23 06 A6 |  if_e	mov	local03, ##31536000
22f3c     11 1F 12 F2 | 	cmp	local01, local03 wc
22f40                 | ' 	    break;
22f40     01 20 06 31 |  if_ae	add	local02, #1
22f44     11 1F 82 31 |  if_ae	sub	local01, local03
22f48     D4 FF 9F 3D |  if_ae	jmp	#LR__3770
22f4c     A8 00 00 FF 
22f50     80 1F 16 FD | 	qdiv	local01, ##86400
22f54     10 23 02 F6 | 	mov	local03, local02
22f58     03 00 00 FF 
22f5c     6C 23 86 F1 | 	sub	local03, ##1900
22f60     14 14 06 F1 | 	add	arg02, #20
22f64     0A 23 62 FC | 	wrlong	local03, arg02
22f68     08 14 06 F1 | 	add	arg02, #8
22f6c     10 13 02 F6 | 	mov	arg01, local02
22f70     18 20 62 FD | 	getqx	local02
22f74     0A 21 62 FC | 	wrlong	local02, arg02
22f78     1C 14 86 F1 | 	sub	arg02, #28
22f7c     08 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
22f80     00 FA 0D F2 | 	cmp	result1, #0 wz
22f84     1D 22 06 56 |  if_ne	mov	local03, #29
22f88     1C 22 06 A6 |  if_e	mov	local03, #28
22f8c     02 00 00 FF 
22f90     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
22f94     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
22f98     02 00 00 FF 
22f9c     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
22fa0                 | ' 
22fa0                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
22fa0                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
22fa0     00 12 06 F6 | 	mov	arg01, #0
22fa4     97 2A 48 FB | 	callpa	#(@LR__3772-@LR__3771)>>2,fcache_load_ptr_
22fa8                 | LR__3771
22fa8     09 23 02 F6 | 	mov	local03, arg01
22fac     02 22 66 F0 | 	shl	local03, #2
22fb0     02 00 00 FF 
22fb4     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
22fb8     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
22fbc     11 23 02 FB | 	rdlong	local03, local03
22fc0     11 21 52 F2 | 	cmps	local02, local03 wc
22fc4     02 00 00 FF 
22fc8     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
22fcc     2C 00 90 CD |  if_b	jmp	#LR__3773
22fd0     09 23 02 F6 | 	mov	local03, arg01
22fd4     02 22 66 F0 | 	shl	local03, #2
22fd8     02 00 00 FF 
22fdc     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
22fe0     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
22fe4     11 23 02 FB | 	rdlong	local03, local03
22fe8     11 21 82 F1 | 	sub	local02, local03
22fec     01 12 06 F1 | 	add	arg01, #1
22ff0     02 00 00 FF 
22ff4     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
22ff8     AC FF 9F FD | 	jmp	#LR__3771
22ffc                 | LR__3772
22ffc                 | LR__3773
22ffc     A8 00 00 FF 
23000     80 1F 16 FD | 	qdiv	local01, ##86400
23004     10 14 06 F1 | 	add	arg02, #16
23008     0A 13 62 FC | 	wrlong	arg01, arg02
2300c     01 20 06 F1 | 	add	local02, #1
23010     04 14 86 F1 | 	sub	arg02, #4
23014     0A 21 62 FC | 	wrlong	local02, arg02
23018     19 1E 62 FD | 	getqy	local01
2301c     07 00 00 FF 
23020     10 1E 16 FD | 	qdiv	local01, ##3600
23024     18 22 62 FD | 	getqx	local03
23028     07 00 00 FF 
2302c     10 1E 16 FD | 	qdiv	local01, ##3600
23030     04 14 86 F1 | 	sub	arg02, #4
23034     0A 23 62 FC | 	wrlong	local03, arg02
23038     19 1E 62 FD | 	getqy	local01
2303c     3C 1E 16 FD | 	qdiv	local01, #60
23040     18 22 62 FD | 	getqx	local03
23044     3C 1E 16 FD | 	qdiv	local01, #60
23048     04 14 86 F1 | 	sub	arg02, #4
2304c     0A 23 62 FC | 	wrlong	local03, arg02
23050     04 14 86 F1 | 	sub	arg02, #4
23054                 | '         stm->tm_isdst = 0;
23054                 | ' 
23054                 | ' ;
23054                 | '         return stm;
23054     0A FB 01 F6 | 	mov	result1, arg02
23058     19 22 62 FD | 	getqy	local03
2305c     0A 23 62 FC | 	wrlong	local03, arg02
23060     20 14 06 F1 | 	add	arg02, #32
23064     0A 01 68 FC | 	wrlong	#0, arg02
23068     A7 F0 03 F6 | 	mov	ptra, fp
2306c     B2 00 A0 FD | 	call	#popregs_
23070                 | _fatfs_cc__gmtime_r_ret
23070     2D 00 64 FD | 	ret
23074                 | 
23074                 | _fatfs_cc__tzset
23074     25 01 00 FF 
23078     B5 13 06 F6 | 	mov	arg01, ##@LR__4085
2307c     34 00 B0 FD | 	call	#_fatfs_cc_getenv
23080     FD 12 02 F6 | 	mov	arg01, result1
23084     02 00 00 FF 
23088     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
2308c     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
23090     02 00 00 FF 
23094     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
23098     3C 15 B0 FD | 	call	#_fatfs_cc___tzoffset
2309c     02 00 00 FF 
230a0     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
230a4     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
230a8     02 00 00 FF 
230ac     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
230b0                 | _fatfs_cc__tzset_ret
230b0     2D 00 64 FD | 	ret
230b4                 | 
230b4                 | _fatfs_cc_getenv
230b4     06 4A 05 F6 | 	mov	COUNT_, #6
230b8     A8 00 A0 FD | 	call	#pushregs_
230bc     09 1F 02 F6 | 	mov	local01, arg01
230c0     09 21 02 F6 | 	mov	local02, arg01
230c4     97 06 48 FB | 	callpa	#(@LR__3781-@LR__3780)>>2,fcache_load_ptr_
230c8                 | LR__3780
230c8     10 FB C9 FA | 	rdbyte	result1, local02 wz
230cc     01 20 06 51 |  if_ne	add	local02, #1
230d0     F4 FF 9F 5D |  if_ne	jmp	#LR__3780
230d4                 | LR__3781
230d4     09 21 82 F1 | 	sub	local02, arg01
230d8     10 FB 01 F6 | 	mov	result1, local02
230dc     02 00 00 FF 
230e0     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
230e4     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
230e8     02 00 00 FF 
230ec     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
230f0                 | '             return 0;
230f0     00 FA 05 A6 |  if_e	mov	result1, #0
230f4     5C 00 90 AD |  if_e	jmp	#LR__3784
230f8                 | ' 
230f8                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
230f8     02 00 00 FF 
230fc     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
23100     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
23104     02 00 00 FF 
23108     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2310c                 | LR__3782
2310c     11 25 0A FB | 	rdlong	local04, local03 wz
23110     3C 00 90 AD |  if_e	jmp	#LR__3783
23114     12 13 02 F6 | 	mov	arg01, local04
23118     0F 15 02 F6 | 	mov	arg02, local01
2311c     10 17 02 F6 | 	mov	arg03, local02
23120     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
23124     00 FA 0D F2 | 	cmp	result1, #0 wz
23128     10 27 02 A6 |  if_e	mov	local05, local02
2312c     12 27 02 A1 |  if_e	add	local05, local04
23130     13 29 C2 AA |  if_e	rdbyte	local06, local05
23134     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
23138                 | ' 			return name+len+1;
23138     10 25 02 A1 |  if_e	add	local04, local02
2313c     01 24 06 A1 |  if_e	add	local04, #1
23140     12 FB 01 A6 |  if_e	mov	result1, local04
23144     0C 00 90 AD |  if_e	jmp	#LR__3784
23148     04 22 06 F1 | 	add	local03, #4
2314c     BC FF 9F FD | 	jmp	#LR__3782
23150                 | LR__3783
23150                 | ' 	}
23150                 | ' 	return 0;
23150     00 FA 05 F6 | 	mov	result1, #0
23154                 | LR__3784
23154     A7 F0 03 F6 | 	mov	ptra, fp
23158     B2 00 A0 FD | 	call	#popregs_
2315c                 | _fatfs_cc_getenv_ret
2315c     2D 00 64 FD | 	ret
23160                 | 
23160                 | _fatfs_cc__get_fattime
23160     00 4A 05 F6 | 	mov	COUNT_, #0
23164     A8 00 A0 FD | 	call	#pushregs_
23168     34 F0 07 F1 | 	add	ptra, #52
2316c     00 12 06 F6 | 	mov	arg01, #0
23170     38 FB BF FD | 	call	#_fatfs_cc_time
23174     04 4E 05 F1 | 	add	fp, #4
23178     A7 FA 61 FC | 	wrlong	result1, fp
2317c     A7 12 02 F6 | 	mov	arg01, fp
23180     0C 4E 05 F1 | 	add	fp, #12
23184     A7 14 02 F6 | 	mov	arg02, fp
23188     10 4E 85 F1 | 	sub	fp, #16
2318c     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
23190     24 4E 05 F1 | 	add	fp, #36
23194     A7 14 02 FB | 	rdlong	arg02, fp
23198     50 14 86 F1 | 	sub	arg02, #80
2319c     09 14 66 F0 | 	shl	arg02, #9
231a0     04 4E 85 F1 | 	sub	fp, #4
231a4     A7 FA 01 FB | 	rdlong	result1, fp
231a8     01 FA 05 F1 | 	add	result1, #1
231ac     05 FA 65 F0 | 	shl	result1, #5
231b0     FD 14 42 F5 | 	or	arg02, result1
231b4     04 4E 85 F1 | 	sub	fp, #4
231b8     A7 FA 01 FB | 	rdlong	result1, fp
231bc     FD 14 42 F5 | 	or	arg02, result1
231c0     14 4E 85 F1 | 	sub	fp, #20
231c4     A7 14 62 FC | 	wrlong	arg02, fp
231c8     10 4E 05 F1 | 	add	fp, #16
231cc     A7 14 02 FB | 	rdlong	arg02, fp
231d0     0B 14 66 F0 | 	shl	arg02, #11
231d4     04 4E 85 F1 | 	sub	fp, #4
231d8     A7 FA 01 FB | 	rdlong	result1, fp
231dc     05 FA 65 F0 | 	shl	result1, #5
231e0     FD 14 42 F5 | 	or	arg02, result1
231e4     04 4E 85 F1 | 	sub	fp, #4
231e8     A7 FA 01 FB | 	rdlong	result1, fp
231ec     FD 14 42 F5 | 	or	arg02, result1
231f0     04 4E 85 F1 | 	sub	fp, #4
231f4     A7 14 62 FC | 	wrlong	arg02, fp
231f8                 | ' 
231f8                 | '     now = time(0);
231f8                 | '     _gmtime_r (&now, &date);
231f8                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
231f8                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
231f8                 | '     return (ffdate << 16) | fftime;
231f8     04 4E 85 F1 | 	sub	fp, #4
231fc     A7 FA 01 FB | 	rdlong	result1, fp
23200     10 FA 65 F0 | 	shl	result1, #16
23204     08 4E 85 F1 | 	sub	fp, #8
23208     0A FB 41 F5 | 	or	result1, arg02
2320c     A7 F0 03 F6 | 	mov	ptra, fp
23210     B2 00 A0 FD | 	call	#popregs_
23214                 | _fatfs_cc__get_fattime_ret
23214     2D 00 64 FD | 	ret
23218                 | 
23218                 | _fatfs_cc_unixtime_0791
23218     00 4A 05 F6 | 	mov	COUNT_, #0
2321c     A8 00 A0 FD | 	call	#pushregs_
23220     34 F0 07 F1 | 	add	ptra, #52
23224     04 4E 05 F1 | 	add	fp, #4
23228     A7 12 62 FC | 	wrlong	arg01, fp
2322c     04 4E 05 F1 | 	add	fp, #4
23230     A7 14 62 FC | 	wrlong	arg02, fp
23234     04 4E 85 F1 | 	sub	fp, #4
23238     A7 14 02 FB | 	rdlong	arg02, fp
2323c     09 14 46 F0 | 	shr	arg02, #9
23240     7F 14 06 F5 | 	and	arg02, #127
23244     50 FA 05 F6 | 	mov	result1, #80
23248     0A FB 01 F1 | 	add	result1, arg02
2324c     20 4E 05 F1 | 	add	fp, #32
23250     A7 FA 61 FC | 	wrlong	result1, fp
23254     20 4E 85 F1 | 	sub	fp, #32
23258     A7 FA 01 FB | 	rdlong	result1, fp
2325c     05 FA 45 F0 | 	shr	result1, #5
23260     FD FA 41 F8 | 	getnib	result1, result1, #0
23264     01 FA 85 F1 | 	sub	result1, #1
23268     1C 4E 05 F1 | 	add	fp, #28
2326c     A7 FA 61 FC | 	wrlong	result1, fp
23270     1C 4E 85 F1 | 	sub	fp, #28
23274     A7 FA 01 FB | 	rdlong	result1, fp
23278     1F FA 05 F5 | 	and	result1, #31
2327c     18 4E 05 F1 | 	add	fp, #24
23280     A7 FA 61 FC | 	wrlong	result1, fp
23284     14 4E 85 F1 | 	sub	fp, #20
23288     A7 FA 01 FB | 	rdlong	result1, fp
2328c     0B FA 45 F0 | 	shr	result1, #11
23290     1F FA 05 F5 | 	and	result1, #31
23294     10 4E 05 F1 | 	add	fp, #16
23298     A7 FA 61 FC | 	wrlong	result1, fp
2329c     10 4E 85 F1 | 	sub	fp, #16
232a0     A7 FA 01 FB | 	rdlong	result1, fp
232a4     05 FA 45 F0 | 	shr	result1, #5
232a8     3F FA 05 F5 | 	and	result1, #63
232ac     0C 4E 05 F1 | 	add	fp, #12
232b0     A7 FA 61 FC | 	wrlong	result1, fp
232b4     0C 4E 85 F1 | 	sub	fp, #12
232b8     A7 14 02 FB | 	rdlong	arg02, fp
232bc     1F 14 06 F5 | 	and	arg02, #31
232c0     01 14 66 F0 | 	shl	arg02, #1
232c4     08 4E 05 F1 | 	add	fp, #8
232c8     A7 14 62 FC | 	wrlong	arg02, fp
232cc     A7 12 02 F6 | 	mov	arg01, fp
232d0     10 4E 85 F1 | 	sub	fp, #16
232d4     4C FA BF FD | 	call	#_fatfs_cc_mktime
232d8     0C 4E 05 F1 | 	add	fp, #12
232dc     A7 FA 61 FC | 	wrlong	result1, fp
232e0                 | ' 
232e0                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
232e0                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
232e0                 | '     date.tm_mday = (dosdate & 0x1f);
232e0                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
232e0                 | '     date.tm_min = (dostime >> 5) & 0x3f;
232e0                 | '     date.tm_sec = (dostime & 0x1f) << 1;
232e0                 | ' 
232e0                 | '     t = mktime(&date);
232e0                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
232e0                 | '     return t;
232e0     0C 4E 85 F1 | 	sub	fp, #12
232e4     A7 F0 03 F6 | 	mov	ptra, fp
232e8     B2 00 A0 FD | 	call	#popregs_
232ec                 | _fatfs_cc_unixtime_0791_ret
232ec     2D 00 64 FD | 	ret
232f0                 | 
232f0                 | _fatfs_cc__set_dos_error_0793
232f0     09 01 02 F6 | 	mov	_var01, arg01
232f4                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
232f4                 | '     switch (derr) {
232f4     14 00 26 F3 | 	fle	_var01, #20
232f8     30 00 62 FD | 	jmprel	_var01
232fc                 | LR__3790
232fc     50 00 90 FD | 	jmp	#LR__3791
23300     84 00 90 FD | 	jmp	#LR__3805
23304     80 00 90 FD | 	jmp	#LR__3806
23308     7C 00 90 FD | 	jmp	#LR__3807
2330c     48 00 90 FD | 	jmp	#LR__3792
23310     44 00 90 FD | 	jmp	#LR__3793
23314     40 00 90 FD | 	jmp	#LR__3794
23318     44 00 90 FD | 	jmp	#LR__3795
2331c     48 00 90 FD | 	jmp	#LR__3797
23320     54 00 90 FD | 	jmp	#LR__3800
23324     38 00 90 FD | 	jmp	#LR__3796
23328     4C 00 90 FD | 	jmp	#LR__3801
2332c     48 00 90 FD | 	jmp	#LR__3802
23330     44 00 90 FD | 	jmp	#LR__3803
23334     50 00 90 FD | 	jmp	#LR__3808
23338     4C 00 90 FD | 	jmp	#LR__3808
2333c     48 00 90 FD | 	jmp	#LR__3808
23340     2C 00 90 FD | 	jmp	#LR__3798
23344     38 00 90 FD | 	jmp	#LR__3804
23348     2C 00 90 FD | 	jmp	#LR__3799
2334c     38 00 90 FD | 	jmp	#LR__3808
23350                 | LR__3791
23350     00 02 06 F6 | 	mov	_var02, #0
23354                 | '         r = 0;
23354                 | '         break;
23354     34 00 90 FD | 	jmp	#LR__3809
23358                 | LR__3792
23358                 | LR__3793
23358                 | LR__3794
23358     04 02 06 F6 | 	mov	_var02, #4
2335c                 | '         r =  4 ;
2335c                 | '         break;
2335c     2C 00 90 FD | 	jmp	#LR__3809
23360                 | LR__3795
23360                 | LR__3796
23360     06 02 06 F6 | 	mov	_var02, #6
23364                 | '         r =  6 ;
23364                 | '         break;
23364     24 00 90 FD | 	jmp	#LR__3809
23368                 | LR__3797
23368     09 02 06 F6 | 	mov	_var02, #9
2336c                 | '         r =  9 ;
2336c                 | '         break;
2336c     1C 00 90 FD | 	jmp	#LR__3809
23370                 | LR__3798
23370     07 02 06 F6 | 	mov	_var02, #7
23374                 | '         r =  7 ;
23374                 | '         break;
23374     14 00 90 FD | 	jmp	#LR__3809
23378                 | LR__3799
23378                 | LR__3800
23378                 | LR__3801
23378                 | LR__3802
23378                 | LR__3803
23378     0A 02 06 F6 | 	mov	_var02, #10
2337c                 | '         r =  10 ;
2337c                 | '         break;
2337c     0C 00 90 FD | 	jmp	#LR__3809
23380                 | LR__3804
23380     0B 02 06 F6 | 	mov	_var02, #11
23384                 | '         r =  11 ;
23384                 | '         break;
23384     04 00 90 FD | 	jmp	#LR__3809
23388                 | LR__3805
23388                 | LR__3806
23388                 | LR__3807
23388                 | LR__3808
23388     0C 02 06 F6 | 	mov	_var02, #12
2338c                 | '         r =  12 ;
2338c                 | '         break;
2338c                 | LR__3809
2338c                 | '     }
2338c                 | '     return _seterror(r);
2338c     00 02 4E F2 | 	cmps	_var02, #0 wz
23390     20 E8 05 F1 | 	add	ptr___system__dat__, #32
23394     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
23398     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
2339c     01 FA 65 56 |  if_ne	neg	result1, #1
233a0     00 FA 05 A6 |  if_e	mov	result1, #0
233a4                 | _fatfs_cc__set_dos_error_0793_ret
233a4     2D 00 64 FD | 	ret
233a8                 | 
233a8                 | _fatfs_cc_v_creat
233a8     04 4A 05 F6 | 	mov	COUNT_, #4
233ac     A8 00 A0 FD | 	call	#pushregs_
233b0     09 1F 02 F6 | 	mov	local01, arg01
233b4     0A 21 02 F6 | 	mov	local02, arg02
233b8     03 00 00 FF 
233bc     3C 12 06 F6 | 	mov	arg01, ##1596
233c0                 | '     return _gc_alloc(size);
233c0     10 14 06 F6 | 	mov	arg02, #16
233c4     14 61 BF FD | 	call	#__system___gc_doalloc
233c8     FD 22 0A F6 | 	mov	local03, result1 wz
233cc                 | '       return _seterror( 7 );
233cc     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
233d0     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
233d4     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
233d8     01 FA 65 A6 |  if_e	neg	result1, #1
233dc     58 00 90 AD |  if_e	jmp	#LR__3811
233e0     11 13 02 F6 | 	mov	arg01, local03
233e4     00 14 06 F6 | 	mov	arg02, #0
233e8     03 00 00 FF 
233ec     3C 16 06 F6 | 	mov	arg03, ##1596
233f0     98 00 A0 FD | 	call	#\builtin_bytefill_
233f4     02 00 00 FF 
233f8     14 22 06 F1 | 	add	local03, ##1044
233fc     11 13 02 F6 | 	mov	arg01, local03
23400     02 00 00 FF 
23404     14 22 86 F1 | 	sub	local03, ##1044
23408     10 15 02 F6 | 	mov	arg02, local02
2340c     07 16 06 F6 | 	mov	arg03, #7
23410     B4 CC BF FD | 	call	#_fatfs_cc_f_open
23414     FD 24 0A F6 | 	mov	local04, result1 wz
23418     14 00 90 AD |  if_e	jmp	#LR__3810
2341c     11 13 02 F6 | 	mov	arg01, local03
23420                 | '     return _gc_free(ptr);
23420     C4 61 BF FD | 	call	#__system___gc_free
23424                 | '     free(f);
23424                 | '     return _set_dos_error(r);
23424     12 13 02 F6 | 	mov	arg01, local04
23428     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0793
2342c     08 00 90 FD | 	jmp	#LR__3811
23430                 | LR__3810
23430     0F 23 62 FC | 	wrlong	local03, local01
23434                 | '   }
23434                 | '   fil->vfsdata = f;
23434                 | '   return 0;
23434     00 FA 05 F6 | 	mov	result1, #0
23438                 | LR__3811
23438     A7 F0 03 F6 | 	mov	ptra, fp
2343c     B2 00 A0 FD | 	call	#popregs_
23440                 | _fatfs_cc_v_creat_ret
23440     2D 00 64 FD | 	ret
23444                 | 
23444                 | _fatfs_cc_v_close
23444     02 4A 05 F6 | 	mov	COUNT_, #2
23448     A8 00 A0 FD | 	call	#pushregs_
2344c     09 1F 02 FB | 	rdlong	local01, arg01
23450     02 00 00 FF 
23454     14 1E 06 F1 | 	add	local01, ##1044
23458     0F 13 02 F6 | 	mov	arg01, local01
2345c     02 00 00 FF 
23460     14 1E 86 F1 | 	sub	local01, ##1044
23464     DC E3 BF FD | 	call	#_fatfs_cc_f_close
23468     FD 20 02 F6 | 	mov	local02, result1
2346c     0F 13 02 F6 | 	mov	arg01, local01
23470                 | '     return _gc_free(ptr);
23470     74 61 BF FD | 	call	#__system___gc_free
23474                 | '     FAT_FIL *f = fil->vfsdata;
23474                 | '     r=f_close(&f->fil);
23474                 | '     free(f);
23474                 | '     return _set_dos_error(r);
23474     10 13 02 F6 | 	mov	arg01, local02
23478     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0793
2347c     A7 F0 03 F6 | 	mov	ptra, fp
23480     B2 00 A0 FD | 	call	#popregs_
23484                 | _fatfs_cc_v_close_ret
23484     2D 00 64 FD | 	ret
23488                 | 
23488                 | _fatfs_cc_v_opendir
23488     04 4A 05 F6 | 	mov	COUNT_, #4
2348c     A8 00 A0 FD | 	call	#pushregs_
23490     09 1F 02 F6 | 	mov	local01, arg01
23494     0A 21 02 F6 | 	mov	local02, arg02
23498     30 12 06 F6 | 	mov	arg01, #48
2349c                 | '     return _gc_alloc(size);
2349c     10 14 06 F6 | 	mov	arg02, #16
234a0     38 60 BF FD | 	call	#__system___gc_doalloc
234a4     FD 22 0A F6 | 	mov	local03, result1 wz
234a8                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
234a8                 | '       return _seterror( 7 );
234a8     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
234ac     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
234b0     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
234b4     01 FA 65 A6 |  if_e	neg	result1, #1
234b8     34 00 90 AD |  if_e	jmp	#LR__3821
234bc     10 15 02 F6 | 	mov	arg02, local02
234c0     11 13 02 F6 | 	mov	arg01, local03
234c4     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
234c8     FD 24 0A F6 | 	mov	local04, result1 wz
234cc     14 00 90 AD |  if_e	jmp	#LR__3820
234d0     11 13 02 F6 | 	mov	arg01, local03
234d4                 | '     return _gc_free(ptr);
234d4     10 61 BF FD | 	call	#__system___gc_free
234d8                 | '         free(f);
234d8                 | '         return _set_dos_error(r);
234d8     12 13 02 F6 | 	mov	arg01, local04
234dc     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0793
234e0     0C 00 90 FD | 	jmp	#LR__3821
234e4                 | LR__3820
234e4     04 1E 06 F1 | 	add	local01, #4
234e8     0F 23 62 FC | 	wrlong	local03, local01
234ec                 | '     }
234ec                 | '     dir->vfsdata = f;
234ec                 | '     return 0;
234ec     00 FA 05 F6 | 	mov	result1, #0
234f0                 | LR__3821
234f0     A7 F0 03 F6 | 	mov	ptra, fp
234f4     B2 00 A0 FD | 	call	#popregs_
234f8                 | _fatfs_cc_v_opendir_ret
234f8     2D 00 64 FD | 	ret
234fc                 | 
234fc                 | _fatfs_cc_v_closedir
234fc     02 4A 05 F6 | 	mov	COUNT_, #2
23500     A8 00 A0 FD | 	call	#pushregs_
23504     04 12 06 F1 | 	add	arg01, #4
23508     09 1F 02 FB | 	rdlong	local01, arg01
2350c     0F 13 02 F6 | 	mov	arg01, local01
23510     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
23514     FD 20 02 F6 | 	mov	local02, result1
23518     0F 13 02 F6 | 	mov	arg01, local01
2351c                 | '     return _gc_free(ptr);
2351c     C8 60 BF FD | 	call	#__system___gc_free
23520     00 20 0E F2 | 	cmp	local02, #0 wz
23524     10 13 02 56 |  if_ne	mov	arg01, local02
23528     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0793
2352c                 | '     return r;
2352c     10 FB 01 F6 | 	mov	result1, local02
23530     A7 F0 03 F6 | 	mov	ptra, fp
23534     B2 00 A0 FD | 	call	#popregs_
23538                 | _fatfs_cc_v_closedir_ret
23538     2D 00 64 FD | 	ret
2353c                 | 
2353c                 | _fatfs_cc_v_readdir
2353c     01 4A 05 F6 | 	mov	COUNT_, #1
23540     A8 00 A0 FD | 	call	#pushregs_
23544     2C F1 07 F1 | 	add	ptra, #300
23548     04 4E 05 F1 | 	add	fp, #4
2354c     A7 12 62 FC | 	wrlong	arg01, fp
23550     04 4E 05 F1 | 	add	fp, #4
23554     A7 14 62 FC | 	wrlong	arg02, fp
23558     04 4E 85 F1 | 	sub	fp, #4
2355c     A7 16 02 FB | 	rdlong	arg03, fp
23560     04 16 06 F1 | 	add	arg03, #4
23564     0B 13 02 FB | 	rdlong	arg01, arg03
23568     08 4E 05 F1 | 	add	fp, #8
2356c     A7 14 02 F6 | 	mov	arg02, fp
23570     0C 4E 85 F1 | 	sub	fp, #12
23574     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
23578     28 4F 05 F1 | 	add	fp, #296
2357c     A7 FA 61 FC | 	wrlong	result1, fp
23580     28 4F 85 F1 | 	sub	fp, #296
23584     00 FA 0D F2 | 	cmp	result1, #0 wz
23588     14 00 90 AD |  if_e	jmp	#LR__3830
2358c                 | '         return _set_dos_error(r);
2358c     28 4F 05 F1 | 	add	fp, #296
23590     A7 12 02 FB | 	rdlong	arg01, fp
23594     28 4F 85 F1 | 	sub	fp, #296
23598     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0793
2359c     C4 00 90 FD | 	jmp	#LR__3833
235a0                 | LR__3830
235a0     28 4E 05 F1 | 	add	fp, #40
235a4     A7 16 CA FA | 	rdbyte	arg03, fp wz
235a8     28 4E 85 F1 | 	sub	fp, #40
235ac                 | '         return -1;
235ac     01 FA 65 A6 |  if_e	neg	result1, #1
235b0     B0 00 90 AD |  if_e	jmp	#LR__3833
235b4     08 4E 05 F1 | 	add	fp, #8
235b8     A7 12 02 FB | 	rdlong	arg01, fp
235bc     20 4E 05 F1 | 	add	fp, #32
235c0     A7 14 02 F6 | 	mov	arg02, fp
235c4     28 4E 85 F1 | 	sub	fp, #40
235c8     3F 16 06 F6 | 	mov	arg03, #63
235cc     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
235d0     08 4E 05 F1 | 	add	fp, #8
235d4     A7 16 02 FB | 	rdlong	arg03, fp
235d8     3F 16 06 F1 | 	add	arg03, #63
235dc     0B 01 48 FC | 	wrbyte	#0, arg03
235e0     0C 4E 05 F1 | 	add	fp, #12
235e4     A7 16 C2 FA | 	rdbyte	arg03, fp
235e8     14 4E 85 F1 | 	sub	fp, #20
235ec     10 16 CE F7 | 	test	arg03, #16 wz
235f0     18 00 90 AD |  if_e	jmp	#LR__3831
235f4     08 4E 05 F1 | 	add	fp, #8
235f8     A7 16 02 FB | 	rdlong	arg03, fp
235fc     08 4E 85 F1 | 	sub	fp, #8
23600     50 16 06 F1 | 	add	arg03, #80
23604     0B 03 48 FC | 	wrbyte	#1, arg03
23608     14 00 90 FD | 	jmp	#LR__3832
2360c                 | LR__3831
2360c     08 4E 05 F1 | 	add	fp, #8
23610     A7 16 02 FB | 	rdlong	arg03, fp
23614     08 4E 85 F1 | 	sub	fp, #8
23618     50 16 06 F1 | 	add	arg03, #80
2361c     0B 01 48 FC | 	wrbyte	#0, arg03
23620                 | LR__3832
23620     08 4E 05 F1 | 	add	fp, #8
23624     A7 16 02 FB | 	rdlong	arg03, fp
23628     04 4E 05 F1 | 	add	fp, #4
2362c     A7 14 02 FB | 	rdlong	arg02, fp
23630     48 16 06 F1 | 	add	arg03, #72
23634     0B 15 62 FC | 	wrlong	arg02, arg03
23638     04 4E 85 F1 | 	sub	fp, #4
2363c     A7 1E 02 FB | 	rdlong	local01, fp
23640     08 4E 05 F1 | 	add	fp, #8
23644     A7 12 E2 FA | 	rdword	arg01, fp
23648     02 4E 05 F1 | 	add	fp, #2
2364c     A7 14 E2 FA | 	rdword	arg02, fp
23650     12 4E 85 F1 | 	sub	fp, #18
23654     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0791
23658     4C 1E 06 F1 | 	add	local01, #76
2365c     0F FB 61 FC | 	wrlong	result1, local01
23660                 | '         ent->d_type =  (0) ;
23660                 | '     }
23660                 | '     ent->d_size = finfo.fsize;
23660                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
23660                 | '     return 0;
23660     00 FA 05 F6 | 	mov	result1, #0
23664                 | LR__3833
23664     A7 F0 03 F6 | 	mov	ptra, fp
23668     B2 00 A0 FD | 	call	#popregs_
2366c                 | _fatfs_cc_v_readdir_ret
2366c     2D 00 64 FD | 	ret
23670                 | 
23670                 | _fatfs_cc_v_stat
23670     03 4A 05 F6 | 	mov	COUNT_, #3
23674     A8 00 A0 FD | 	call	#pushregs_
23678     30 F1 07 F1 | 	add	ptra, #304
2367c     04 4E 05 F1 | 	add	fp, #4
23680     A7 12 62 FC | 	wrlong	arg01, fp
23684     04 4E 05 F1 | 	add	fp, #4
23688     A7 14 62 FC | 	wrlong	arg02, fp
2368c     08 4E 85 F1 | 	sub	fp, #8
23690     0A 13 02 F6 | 	mov	arg01, arg02
23694     00 14 06 F6 | 	mov	arg02, #0
23698     30 16 06 F6 | 	mov	arg03, #48
2369c     98 00 A0 FD | 	call	#\builtin_bytefill_
236a0     04 4E 05 F1 | 	add	fp, #4
236a4     A7 FA 01 FB | 	rdlong	result1, fp
236a8     04 4E 85 F1 | 	sub	fp, #4
236ac     FD FA C9 FA | 	rdbyte	result1, result1 wz
236b0     2C 00 90 AD |  if_e	jmp	#LR__3840
236b4     04 4E 05 F1 | 	add	fp, #4
236b8     A7 FA 01 FB | 	rdlong	result1, fp
236bc     04 4E 85 F1 | 	sub	fp, #4
236c0     FD FA C1 FA | 	rdbyte	result1, result1
236c4     2E FA 0D F2 | 	cmp	result1, #46 wz
236c8     04 4E 05 A1 |  if_e	add	fp, #4
236cc     A7 1E 02 AB |  if_e	rdlong	local01, fp
236d0     04 4E 85 A1 |  if_e	sub	fp, #4
236d4     01 1E 06 A1 |  if_e	add	local01, #1
236d8     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
236dc     18 00 90 5D |  if_ne	jmp	#LR__3841
236e0                 | LR__3840
236e0     18 4E 05 F1 | 	add	fp, #24
236e4     A7 20 48 FC | 	wrbyte	#16, fp
236e8     0C 4E 85 F1 | 	sub	fp, #12
236ec     A7 00 68 FC | 	wrlong	#0, fp
236f0     0C 4E 85 F1 | 	sub	fp, #12
236f4     24 00 90 FD | 	jmp	#LR__3842
236f8                 | LR__3841
236f8     04 4E 05 F1 | 	add	fp, #4
236fc     A7 12 02 FB | 	rdlong	arg01, fp
23700     0C 4E 05 F1 | 	add	fp, #12
23704     A7 14 02 F6 | 	mov	arg02, fp
23708     10 4E 85 F1 | 	sub	fp, #16
2370c     AC EB BF FD | 	call	#_fatfs_cc_f_stat
23710     0C 4E 05 F1 | 	add	fp, #12
23714     A7 FA 61 FC | 	wrlong	result1, fp
23718     0C 4E 85 F1 | 	sub	fp, #12
2371c                 | LR__3842
2371c     0C 4E 05 F1 | 	add	fp, #12
23720     A7 20 0A FB | 	rdlong	local02, fp wz
23724     0C 4E 85 F1 | 	sub	fp, #12
23728     14 00 90 AD |  if_e	jmp	#LR__3843
2372c                 | '         return _set_dos_error(r);
2372c     0C 4E 05 F1 | 	add	fp, #12
23730     A7 12 02 FB | 	rdlong	arg01, fp
23734     0C 4E 85 F1 | 	sub	fp, #12
23738     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0793
2373c     14 01 90 FD | 	jmp	#LR__3844
23740                 | LR__3843
23740     2C 4F 05 F1 | 	add	fp, #300
23744     A7 48 6A FC | 	wrlong	#292, fp
23748     14 4F 85 F1 | 	sub	fp, #276
2374c     A7 22 C2 FA | 	rdbyte	local03, fp
23750     18 4E 85 F1 | 	sub	fp, #24
23754     01 22 CE F7 | 	test	local03, #1 wz
23758     2C 4F 05 51 |  if_ne	add	fp, #300
2375c     A7 22 02 5B |  if_ne	rdlong	local03, fp
23760     92 22 46 55 |  if_ne	or	local03, #146
23764     A7 22 62 5C |  if_ne	wrlong	local03, fp
23768     2C 4F 85 51 |  if_ne	sub	fp, #300
2376c     18 4E 05 F1 | 	add	fp, #24
23770     A7 22 C2 FA | 	rdbyte	local03, fp
23774     18 4E 85 F1 | 	sub	fp, #24
23778     10 22 CE F7 | 	test	local03, #16 wz
2377c     2C 4F 05 51 |  if_ne	add	fp, #300
23780     A7 22 02 5B |  if_ne	rdlong	local03, fp
23784     08 00 00 5F 
23788     49 22 46 55 |  if_ne	or	local03, ##4169
2378c     A7 22 62 5C |  if_ne	wrlong	local03, fp
23790     2C 4F 85 51 |  if_ne	sub	fp, #300
23794     08 4E 05 F1 | 	add	fp, #8
23798     A7 22 02 FB | 	rdlong	local03, fp
2379c     24 4F 05 F1 | 	add	fp, #292
237a0     A7 20 02 FB | 	rdlong	local02, fp
237a4     08 22 06 F1 | 	add	local03, #8
237a8     11 21 62 FC | 	wrlong	local02, local03
237ac     24 4F 85 F1 | 	sub	fp, #292
237b0     A7 22 02 FB | 	rdlong	local03, fp
237b4     0C 22 06 F1 | 	add	local03, #12
237b8     11 03 68 FC | 	wrlong	#1, local03
237bc     A7 22 02 FB | 	rdlong	local03, fp
237c0     08 4E 05 F1 | 	add	fp, #8
237c4     A7 20 02 FB | 	rdlong	local02, fp
237c8     18 22 06 F1 | 	add	local03, #24
237cc     11 21 62 FC | 	wrlong	local02, local03
237d0     08 4E 85 F1 | 	sub	fp, #8
237d4     A7 22 02 FB | 	rdlong	local03, fp
237d8     1C 22 06 F1 | 	add	local03, #28
237dc     01 00 80 FF 
237e0     11 01 68 FC | 	wrlong	##512, local03
237e4     A7 20 02 FB | 	rdlong	local02, fp
237e8     10 23 02 F6 | 	mov	local03, local02
237ec     18 20 06 F1 | 	add	local02, #24
237f0     10 21 02 FB | 	rdlong	local02, local02
237f4     FF 21 06 F1 | 	add	local02, #511
237f8     10 21 52 F6 | 	abs	local02, local02 wc
237fc     09 20 46 F0 | 	shr	local02, #9
23800     10 21 82 F6 | 	negc	local02, local02
23804     20 22 06 F1 | 	add	local03, #32
23808     11 21 62 FC | 	wrlong	local02, local03
2380c     A7 20 02 FB | 	rdlong	local02, fp
23810     10 23 02 F6 | 	mov	local03, local02
23814     10 1F 02 F6 | 	mov	local01, local02
23818     0C 4E 05 F1 | 	add	fp, #12
2381c     A7 12 E2 FA | 	rdword	arg01, fp
23820     02 4E 05 F1 | 	add	fp, #2
23824     A7 14 E2 FA | 	rdword	arg02, fp
23828     16 4E 85 F1 | 	sub	fp, #22
2382c     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0791
23830     2C 1E 06 F1 | 	add	local01, #44
23834     0F FB 61 FC | 	wrlong	result1, local01
23838     28 20 06 F1 | 	add	local02, #40
2383c     10 FB 61 FC | 	wrlong	result1, local02
23840     24 22 06 F1 | 	add	local03, #36
23844     11 FB 61 FC | 	wrlong	result1, local03
23848                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
23848                 | '     }
23848                 | '     buf->st_mode = mode;
23848                 | '     buf->st_nlink = 1;
23848                 | '     buf->st_size = finfo.fsize;
23848                 | '     buf->st_blksize = 512;
23848                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
23848                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
23848                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
23848                 | '     return r;
23848     0C 4E 05 F1 | 	add	fp, #12
2384c     A7 FA 01 FB | 	rdlong	result1, fp
23850     0C 4E 85 F1 | 	sub	fp, #12
23854                 | LR__3844
23854     A7 F0 03 F6 | 	mov	ptra, fp
23858     B2 00 A0 FD | 	call	#popregs_
2385c                 | _fatfs_cc_v_stat_ret
2385c     2D 00 64 FD | 	ret
23860                 | 
23860                 | _fatfs_cc_v_read
23860     00 4A 05 F6 | 	mov	COUNT_, #0
23864     A8 00 A0 FD | 	call	#pushregs_
23868     1C F0 07 F1 | 	add	ptra, #28
2386c     04 4E 05 F1 | 	add	fp, #4
23870     A7 12 62 FC | 	wrlong	arg01, fp
23874     04 4E 05 F1 | 	add	fp, #4
23878     A7 14 62 FC | 	wrlong	arg02, fp
2387c     04 4E 05 F1 | 	add	fp, #4
23880     A7 16 62 FC | 	wrlong	arg03, fp
23884     08 4E 85 F1 | 	sub	fp, #8
23888     A7 12 02 FB | 	rdlong	arg01, fp
2388c     09 13 0A FB | 	rdlong	arg01, arg01 wz
23890     0C 4E 05 F1 | 	add	fp, #12
23894     A7 12 62 FC | 	wrlong	arg01, fp
23898     10 4E 85 F1 | 	sub	fp, #16
2389c                 | '         return _seterror( 5 );
2389c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
238a0     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
238a4     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
238a8     01 FA 65 A6 |  if_e	neg	result1, #1
238ac     B8 00 90 AD |  if_e	jmp	#LR__3852
238b0     10 4E 05 F1 | 	add	fp, #16
238b4     A7 12 02 FB | 	rdlong	arg01, fp
238b8     02 00 00 FF 
238bc     14 12 06 F1 | 	add	arg01, ##1044
238c0     08 4E 85 F1 | 	sub	fp, #8
238c4     A7 14 02 FB | 	rdlong	arg02, fp
238c8     04 4E 05 F1 | 	add	fp, #4
238cc     A7 16 02 FB | 	rdlong	arg03, fp
238d0     0C 4E 05 F1 | 	add	fp, #12
238d4     A7 18 02 F6 | 	mov	arg04, fp
238d8     18 4E 85 F1 | 	sub	fp, #24
238dc     C4 CE BF FD | 	call	#_fatfs_cc_f_read
238e0     14 4E 05 F1 | 	add	fp, #20
238e4     A7 FA 61 FC | 	wrlong	result1, fp
238e8     14 4E 85 F1 | 	sub	fp, #20
238ec     00 FA 0D F2 | 	cmp	result1, #0 wz
238f0     34 00 90 AD |  if_e	jmp	#LR__3850
238f4     04 4E 05 F1 | 	add	fp, #4
238f8     A7 18 02 FB | 	rdlong	arg04, fp
238fc     0C 17 02 F6 | 	mov	arg03, arg04
23900     08 18 06 F1 | 	add	arg04, #8
23904     0C 19 02 FB | 	rdlong	arg04, arg04
23908     20 18 46 F5 | 	or	arg04, #32
2390c     08 16 06 F1 | 	add	arg03, #8
23910     0B 19 62 FC | 	wrlong	arg04, arg03
23914                 | '         fil->state |=  (0x20) ;
23914                 | '         return _set_dos_error(r);
23914     10 4E 05 F1 | 	add	fp, #16
23918     A7 12 02 FB | 	rdlong	arg01, fp
2391c     14 4E 85 F1 | 	sub	fp, #20
23920     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0793
23924     40 00 90 FD | 	jmp	#LR__3852
23928                 | LR__3850
23928     18 4E 05 F1 | 	add	fp, #24
2392c     A7 FA 09 FB | 	rdlong	result1, fp wz
23930     18 4E 85 F1 | 	sub	fp, #24
23934     24 00 90 5D |  if_ne	jmp	#LR__3851
23938     04 4E 05 F1 | 	add	fp, #4
2393c     A7 FA 01 FB | 	rdlong	result1, fp
23940     FD 18 02 F6 | 	mov	arg04, result1
23944     04 4E 85 F1 | 	sub	fp, #4
23948     08 FA 05 F1 | 	add	result1, #8
2394c     FD FA 01 FB | 	rdlong	result1, result1
23950     10 FA 45 F5 | 	or	result1, #16
23954     08 18 06 F1 | 	add	arg04, #8
23958     0C FB 61 FC | 	wrlong	result1, arg04
2395c                 | LR__3851
2395c                 | '         fil->state |=  (0x10) ;
2395c                 | '     }
2395c                 | '     return x;
2395c     18 4E 05 F1 | 	add	fp, #24
23960     A7 FA 01 FB | 	rdlong	result1, fp
23964     18 4E 85 F1 | 	sub	fp, #24
23968                 | LR__3852
23968     A7 F0 03 F6 | 	mov	ptra, fp
2396c     B2 00 A0 FD | 	call	#popregs_
23970                 | _fatfs_cc_v_read_ret
23970     2D 00 64 FD | 	ret
23974                 | 
23974                 | _fatfs_cc_v_write
23974     00 4A 05 F6 | 	mov	COUNT_, #0
23978     A8 00 A0 FD | 	call	#pushregs_
2397c     1C F0 07 F1 | 	add	ptra, #28
23980     04 4E 05 F1 | 	add	fp, #4
23984     A7 12 62 FC | 	wrlong	arg01, fp
23988     04 4E 05 F1 | 	add	fp, #4
2398c     A7 14 62 FC | 	wrlong	arg02, fp
23990     04 4E 05 F1 | 	add	fp, #4
23994     A7 16 62 FC | 	wrlong	arg03, fp
23998     08 4E 85 F1 | 	sub	fp, #8
2399c     A7 12 02 FB | 	rdlong	arg01, fp
239a0     09 13 0A FB | 	rdlong	arg01, arg01 wz
239a4     0C 4E 05 F1 | 	add	fp, #12
239a8     A7 12 62 FC | 	wrlong	arg01, fp
239ac     10 4E 85 F1 | 	sub	fp, #16
239b0                 | '         return _seterror( 5 );
239b0     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
239b4     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
239b8     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
239bc     01 FA 65 A6 |  if_e	neg	result1, #1
239c0     84 00 90 AD |  if_e	jmp	#LR__3861
239c4     10 4E 05 F1 | 	add	fp, #16
239c8     A7 12 02 FB | 	rdlong	arg01, fp
239cc     02 00 00 FF 
239d0     14 12 06 F1 | 	add	arg01, ##1044
239d4     08 4E 85 F1 | 	sub	fp, #8
239d8     A7 14 02 FB | 	rdlong	arg02, fp
239dc     04 4E 05 F1 | 	add	fp, #4
239e0     A7 16 02 FB | 	rdlong	arg03, fp
239e4     0C 4E 05 F1 | 	add	fp, #12
239e8     A7 18 02 F6 | 	mov	arg04, fp
239ec     18 4E 85 F1 | 	sub	fp, #24
239f0     4C D4 BF FD | 	call	#_fatfs_cc_f_write
239f4     14 4E 05 F1 | 	add	fp, #20
239f8     A7 FA 61 FC | 	wrlong	result1, fp
239fc     14 4E 85 F1 | 	sub	fp, #20
23a00     00 FA 0D F2 | 	cmp	result1, #0 wz
23a04     34 00 90 AD |  if_e	jmp	#LR__3860
23a08     04 4E 05 F1 | 	add	fp, #4
23a0c     A7 18 02 FB | 	rdlong	arg04, fp
23a10     0C 17 02 F6 | 	mov	arg03, arg04
23a14     08 18 06 F1 | 	add	arg04, #8
23a18     0C 19 02 FB | 	rdlong	arg04, arg04
23a1c     20 18 46 F5 | 	or	arg04, #32
23a20     08 16 06 F1 | 	add	arg03, #8
23a24     0B 19 62 FC | 	wrlong	arg04, arg03
23a28                 | '         fil->state |=  (0x20) ;
23a28                 | '         return _set_dos_error(r);
23a28     10 4E 05 F1 | 	add	fp, #16
23a2c     A7 12 02 FB | 	rdlong	arg01, fp
23a30     14 4E 85 F1 | 	sub	fp, #20
23a34     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0793
23a38     0C 00 90 FD | 	jmp	#LR__3861
23a3c                 | LR__3860
23a3c                 | '     }
23a3c                 | '     return x;
23a3c     18 4E 05 F1 | 	add	fp, #24
23a40     A7 FA 01 FB | 	rdlong	result1, fp
23a44     18 4E 85 F1 | 	sub	fp, #24
23a48                 | LR__3861
23a48     A7 F0 03 F6 | 	mov	ptra, fp
23a4c     B2 00 A0 FD | 	call	#popregs_
23a50                 | _fatfs_cc_v_write_ret
23a50     2D 00 64 FD | 	ret
23a54                 | 
23a54                 | _fatfs_cc_v_lseek
23a54     04 4A 05 F6 | 	mov	COUNT_, #4
23a58     A8 00 A0 FD | 	call	#pushregs_
23a5c     0A 1F 02 F6 | 	mov	local01, arg02
23a60     0B 21 02 F6 | 	mov	local02, arg03
23a64     09 23 02 FB | 	rdlong	local03, arg01
23a68     02 00 00 FF 
23a6c     14 22 0E F1 | 	add	local03, ##1044 wz
23a70                 | '         return _seterror( 5 );
23a70     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
23a74     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
23a78     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
23a7c     01 FA 65 A6 |  if_e	neg	result1, #1
23a80     4C 00 90 AD |  if_e	jmp	#LR__3872
23a84     00 20 0E F2 | 	cmp	local02, #0 wz
23a88     24 00 90 AD |  if_e	jmp	#LR__3870
23a8c     01 20 0E F2 | 	cmp	local02, #1 wz
23a90     14 22 06 A1 |  if_e	add	local03, #20
23a94     11 25 02 AB |  if_e	rdlong	local04, local03
23a98     14 22 86 A1 |  if_e	sub	local03, #20
23a9c     12 1F 02 A1 |  if_e	add	local01, local04
23aa0     0C 22 06 51 |  if_ne	add	local03, #12
23aa4     11 25 02 5B |  if_ne	rdlong	local04, local03
23aa8     0C 22 86 51 |  if_ne	sub	local03, #12
23aac     12 1F 02 51 |  if_ne	add	local01, local04
23ab0                 | LR__3870
23ab0     0F 15 02 F6 | 	mov	arg02, local01
23ab4     11 13 02 F6 | 	mov	arg01, local03
23ab8     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
23abc     FD 12 0A F6 | 	mov	arg01, result1 wz
23ac0     08 00 90 AD |  if_e	jmp	#LR__3871
23ac4                 | '         return _set_dos_error(result);
23ac4     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0793
23ac8     04 00 90 FD | 	jmp	#LR__3872
23acc                 | LR__3871
23acc                 | '     }
23acc                 | '     return offset;
23acc     0F FB 01 F6 | 	mov	result1, local01
23ad0                 | LR__3872
23ad0     A7 F0 03 F6 | 	mov	ptra, fp
23ad4     B2 00 A0 FD | 	call	#popregs_
23ad8                 | _fatfs_cc_v_lseek_ret
23ad8     2D 00 64 FD | 	ret
23adc                 | 
23adc                 | _fatfs_cc_v_ioctl
23adc                 | ' {
23adc                 | '     return _seterror( 10 );
23adc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
23ae0     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
23ae4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
23ae8     01 FA 65 F6 | 	neg	result1, #1
23aec                 | _fatfs_cc_v_ioctl_ret
23aec     2D 00 64 FD | 	ret
23af0                 | 
23af0                 | _fatfs_cc_v_mkdir
23af0     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
23af4     FD 12 02 F6 | 	mov	arg01, result1
23af8                 | ' 
23af8                 | '     r = f_mkdir(name);
23af8                 | '     return _set_dos_error(r);
23af8     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0793
23afc                 | _fatfs_cc_v_mkdir_ret
23afc     2D 00 64 FD | 	ret
23b00                 | 
23b00                 | _fatfs_cc_v_remove
23b00     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
23b04     FD 12 02 F6 | 	mov	arg01, result1
23b08                 | ' 
23b08                 | '     r = f_unlink(name);
23b08                 | '     return _set_dos_error(r);
23b08     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0793
23b0c                 | _fatfs_cc_v_remove_ret
23b0c     2D 00 64 FD | 	ret
23b10                 | 
23b10                 | _fatfs_cc_v_rmdir
23b10     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
23b14     FD 12 02 F6 | 	mov	arg01, result1
23b18                 | ' 
23b18                 | '     r = f_unlink(name);
23b18                 | '     return _set_dos_error(r);
23b18     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0793
23b1c                 | _fatfs_cc_v_rmdir_ret
23b1c     2D 00 64 FD | 	ret
23b20                 | 
23b20                 | _fatfs_cc_v_rename
23b20     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
23b24     FD 12 02 F6 | 	mov	arg01, result1
23b28                 | '     return _set_dos_error(r);
23b28     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0793
23b2c                 | _fatfs_cc_v_rename_ret
23b2c     2D 00 64 FD | 	ret
23b30                 | 
23b30                 | _fatfs_cc_v_open
23b30     07 4A 05 F6 | 	mov	COUNT_, #7
23b34     A8 00 A0 FD | 	call	#pushregs_
23b38     09 1F 02 F6 | 	mov	local01, arg01
23b3c     0A 21 02 F6 | 	mov	local02, arg02
23b40     0B 23 02 F6 | 	mov	local03, arg03
23b44     03 00 00 FF 
23b48     3C 12 06 F6 | 	mov	arg01, ##1596
23b4c                 | '     return _gc_alloc(size);
23b4c     10 14 06 F6 | 	mov	arg02, #16
23b50     88 59 BF FD | 	call	#__system___gc_doalloc
23b54     FD 24 0A F6 | 	mov	local04, result1 wz
23b58                 | '       return _seterror( 7 );
23b58     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
23b5c     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
23b60     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
23b64     01 FA 65 A6 |  if_e	neg	result1, #1
23b68     98 00 90 AD |  if_e	jmp	#LR__3886
23b6c     12 13 02 F6 | 	mov	arg01, local04
23b70     00 14 06 F6 | 	mov	arg02, #0
23b74     03 00 00 FF 
23b78     3C 16 06 F6 | 	mov	arg03, ##1596
23b7c     98 00 A0 FD | 	call	#\builtin_bytefill_
23b80                 | '   switch (flags & 3) {
23b80     11 27 02 F6 | 	mov	local05, local03
23b84     03 26 0E F5 | 	and	local05, #3 wz
23b88     0C 00 90 AD |  if_e	jmp	#LR__3880
23b8c     01 26 0E F2 | 	cmp	local05, #1 wz
23b90     0C 00 90 AD |  if_e	jmp	#LR__3881
23b94     10 00 90 FD | 	jmp	#LR__3882
23b98                 | LR__3880
23b98     01 28 06 F6 | 	mov	local06, #1
23b9c                 | '       fs_flags =  0x01 ;
23b9c                 | '       break;
23b9c     0C 00 90 FD | 	jmp	#LR__3883
23ba0                 | LR__3881
23ba0     02 28 06 F6 | 	mov	local06, #2
23ba4                 | '       fs_flags =  0x02 ;
23ba4                 | '       break;
23ba4     04 00 90 FD | 	jmp	#LR__3883
23ba8                 | LR__3882
23ba8     03 28 06 F6 | 	mov	local06, #3
23bac                 | '       fs_flags =  0x01  |  0x02 ;
23bac                 | '       break;
23bac                 | LR__3883
23bac     08 22 CE F7 | 	test	local03, #8 wz
23bb0     18 28 46 55 |  if_ne	or	local06, #24
23bb4     08 00 90 5D |  if_ne	jmp	#LR__3884
23bb8     20 22 CE F7 | 	test	local03, #32 wz
23bbc     30 28 46 55 |  if_ne	or	local06, #48
23bc0                 | LR__3884
23bc0     02 00 00 FF 
23bc4     14 24 06 F1 | 	add	local04, ##1044
23bc8     12 13 02 F6 | 	mov	arg01, local04
23bcc     02 00 00 FF 
23bd0     14 24 86 F1 | 	sub	local04, ##1044
23bd4     10 15 02 F6 | 	mov	arg02, local02
23bd8     14 17 02 F6 | 	mov	arg03, local06
23bdc     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
23be0     FD 2A 0A F6 | 	mov	local07, result1 wz
23be4     14 00 90 AD |  if_e	jmp	#LR__3885
23be8     12 13 02 F6 | 	mov	arg01, local04
23bec                 | '     return _gc_free(ptr);
23bec     F8 59 BF FD | 	call	#__system___gc_free
23bf0                 | '     free(f);
23bf0                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
23bf0                 | '     return _set_dos_error(r);
23bf0     15 13 02 F6 | 	mov	arg01, local07
23bf4     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0793
23bf8     08 00 90 FD | 	jmp	#LR__3886
23bfc                 | LR__3885
23bfc     0F 25 62 FC | 	wrlong	local04, local01
23c00                 | '   }
23c00                 | '   fil->vfsdata = f;
23c00                 | '   return 0;
23c00     00 FA 05 F6 | 	mov	result1, #0
23c04                 | LR__3886
23c04     A7 F0 03 F6 | 	mov	ptra, fp
23c08     B2 00 A0 FD | 	call	#popregs_
23c0c                 | _fatfs_cc_v_open_ret
23c0c     2D 00 64 FD | 	ret
23c10                 | 
23c10                 | _fatfs_cc_v_flush
23c10     09 13 02 FB | 	rdlong	arg01, arg01
23c14     02 00 00 FF 
23c18     14 12 0E F1 | 	add	arg01, ##1044 wz
23c1c                 | '         return _seterror( 5 );
23c1c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
23c20     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
23c24     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
23c28     01 FA 65 A6 |  if_e	neg	result1, #1
23c2c     0C 00 90 AD |  if_e	jmp	#LR__3890
23c30     00 DA BF FD | 	call	#_fatfs_cc_f_sync
23c34     FD 12 02 F6 | 	mov	arg01, result1
23c38                 | '     }
23c38                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
23c38                 | '     result = f_sync(f);
23c38                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
23c38                 | '     return _set_dos_error(result);
23c38     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0793
23c3c                 | LR__3890
23c3c                 | _fatfs_cc_v_flush_ret
23c3c     2D 00 64 FD | 	ret
23c40                 | 
23c40                 | _fatfs_cc_v_init
23c40                 | ' {
23c40                 | '     return 0;
23c40     00 FA 05 F6 | 	mov	result1, #0
23c44                 | _fatfs_cc_v_init_ret
23c44     2D 00 64 FD | 	ret
23c48                 | 
23c48                 | _fatfs_cc_v_deinit
23c48     25 01 00 FF 
23c4c     B8 15 06 F6 | 	mov	arg02, ##@LR__4086
23c50     00 12 06 F6 | 	mov	arg01, #0
23c54     00 16 06 F6 | 	mov	arg03, #0
23c58     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
23c5c     01 00 00 FF 
23c60     08 E4 05 F1 | 	add	objptr, ##520
23c64     F2 12 02 FB | 	rdlong	arg01, objptr
23c68     04 E4 05 F1 | 	add	objptr, #4
23c6c     F2 14 02 FB | 	rdlong	arg02, objptr
23c70     01 00 00 FF 
23c74     0C E4 85 F1 | 	sub	objptr, ##524
23c78     88 44 BF FD | 	call	#__system___freepins
23c7c                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
23c7c                 | '     _freepins(f_pinmask);
23c7c                 | '     return 0;
23c7c     00 FA 05 F6 | 	mov	result1, #0
23c80                 | _fatfs_cc_v_deinit_ret
23c80     2D 00 64 FD | 	ret
23c84                 | 
23c84                 | _fatfs_cc_get_vfs
23c84     01 4A 05 F6 | 	mov	COUNT_, #1
23c88     A8 00 A0 FD | 	call	#pushregs_
23c8c     09 1F 02 F6 | 	mov	local01, arg01
23c90     50 12 06 F6 | 	mov	arg01, #80
23c94     14 58 BF FD | 	call	#__system___gc_alloc_managed
23c98     FD 12 02 F6 | 	mov	arg01, result1
23c9c     F2 FA 01 F6 | 	mov	result1, objptr
23ca0     00 20 03 FF 
23ca4     00 FA 45 F5 | 	or	result1, ##104857600
23ca8     09 FB 61 FC | 	wrlong	result1, arg01
23cac     F2 FA 01 F6 | 	mov	result1, objptr
23cb0     00 28 03 FF 
23cb4     00 FA 45 F5 | 	or	result1, ##105906176
23cb8     04 12 06 F1 | 	add	arg01, #4
23cbc     09 FB 61 FC | 	wrlong	result1, arg01
23cc0     F2 FA 01 F6 | 	mov	result1, objptr
23cc4     00 30 03 FF 
23cc8     00 FA 45 F5 | 	or	result1, ##106954752
23ccc     04 12 06 F1 | 	add	arg01, #4
23cd0     09 FB 61 FC | 	wrlong	result1, arg01
23cd4     F2 FA 01 F6 | 	mov	result1, objptr
23cd8     00 38 03 FF 
23cdc     00 FA 45 F5 | 	or	result1, ##108003328
23ce0     04 12 06 F1 | 	add	arg01, #4
23ce4     09 FB 61 FC | 	wrlong	result1, arg01
23ce8     F2 FA 01 F6 | 	mov	result1, objptr
23cec     00 40 03 FF 
23cf0     00 FA 45 F5 | 	or	result1, ##109051904
23cf4     04 12 06 F1 | 	add	arg01, #4
23cf8     09 FB 61 FC | 	wrlong	result1, arg01
23cfc     04 12 06 F1 | 	add	arg01, #4
23d00     09 01 68 FC | 	wrlong	#0, arg01
23d04     04 12 06 F1 | 	add	arg01, #4
23d08     09 1F 62 FC | 	wrlong	local01, arg01
23d0c     04 12 06 F1 | 	add	arg01, #4
23d10     09 01 68 FC | 	wrlong	#0, arg01
23d14     F2 FA 01 F6 | 	mov	result1, objptr
23d18     00 48 03 FF 
23d1c     00 FA 45 F5 | 	or	result1, ##110100480
23d20     04 12 06 F1 | 	add	arg01, #4
23d24     09 FB 61 FC | 	wrlong	result1, arg01
23d28     F2 FA 01 F6 | 	mov	result1, objptr
23d2c     00 50 03 FF 
23d30     00 FA 45 F5 | 	or	result1, ##111149056
23d34     04 12 06 F1 | 	add	arg01, #4
23d38     09 FB 61 FC | 	wrlong	result1, arg01
23d3c     F2 FA 01 F6 | 	mov	result1, objptr
23d40     00 58 03 FF 
23d44     00 FA 45 F5 | 	or	result1, ##112197632
23d48     04 12 06 F1 | 	add	arg01, #4
23d4c     09 FB 61 FC | 	wrlong	result1, arg01
23d50     F2 FA 01 F6 | 	mov	result1, objptr
23d54     00 60 03 FF 
23d58     00 FA 45 F5 | 	or	result1, ##113246208
23d5c     04 12 06 F1 | 	add	arg01, #4
23d60     09 FB 61 FC | 	wrlong	result1, arg01
23d64     F2 FA 01 F6 | 	mov	result1, objptr
23d68     00 68 03 FF 
23d6c     00 FA 45 F5 | 	or	result1, ##114294784
23d70     04 12 06 F1 | 	add	arg01, #4
23d74     09 FB 61 FC | 	wrlong	result1, arg01
23d78     F2 FA 01 F6 | 	mov	result1, objptr
23d7c     00 70 03 FF 
23d80     00 FA 45 F5 | 	or	result1, ##115343360
23d84     04 12 06 F1 | 	add	arg01, #4
23d88     09 FB 61 FC | 	wrlong	result1, arg01
23d8c     F2 FA 01 F6 | 	mov	result1, objptr
23d90     00 78 03 FF 
23d94     00 FA 45 F5 | 	or	result1, ##116391936
23d98     04 12 06 F1 | 	add	arg01, #4
23d9c     09 FB 61 FC | 	wrlong	result1, arg01
23da0     F2 FA 01 F6 | 	mov	result1, objptr
23da4     58 FA 25 F4 | 	bith	result1, #88
23da8     04 12 06 F1 | 	add	arg01, #4
23dac     09 FB 61 FC | 	wrlong	result1, arg01
23db0     F2 FA 01 F6 | 	mov	result1, objptr
23db4     00 88 03 FF 
23db8     00 FA 45 F5 | 	or	result1, ##118489088
23dbc     04 12 06 F1 | 	add	arg01, #4
23dc0     09 FB 61 FC | 	wrlong	result1, arg01
23dc4     F2 FA 01 F6 | 	mov	result1, objptr
23dc8     00 90 03 FF 
23dcc     00 FA 45 F5 | 	or	result1, ##119537664
23dd0     04 12 06 F1 | 	add	arg01, #4
23dd4     09 FB 61 FC | 	wrlong	result1, arg01
23dd8     F2 FA 01 F6 | 	mov	result1, objptr
23ddc     00 98 03 FF 
23de0     00 FA 45 F5 | 	or	result1, ##120586240
23de4     04 12 06 F1 | 	add	arg01, #4
23de8     09 FB 61 FC | 	wrlong	result1, arg01
23dec     F2 FA 01 F6 | 	mov	result1, objptr
23df0     00 A0 03 FF 
23df4     00 FA 45 F5 | 	or	result1, ##121634816
23df8     04 12 06 F1 | 	add	arg01, #4
23dfc     09 FB 61 FC | 	wrlong	result1, arg01
23e00     4C 12 86 F1 | 	sub	arg01, #76
23e04                 | ' 
23e04                 | '     v->close = &v_close;
23e04                 | '     v->read = &v_read;
23e04                 | '     v->write = &v_write;
23e04                 | '     v->lseek = &v_lseek;
23e04                 | '     v->ioctl = &v_ioctl;
23e04                 | '     v->flush = 0;
23e04                 | '     v->vfs_data = ptr;
23e04                 | '     v->reserved = 0;
23e04                 | ' 
23e04                 | '     v->open = &v_open;
23e04                 | '     v->creat = &v_creat;
23e04                 | '     v->opendir = &v_opendir;
23e04                 | '     v->closedir = &v_closedir;
23e04                 | '     v->readdir = &v_readdir;
23e04                 | '     v->stat = &v_stat;
23e04                 | ' 
23e04                 | '     v->mkdir = &v_mkdir;
23e04                 | '     v->rmdir = &v_rmdir;
23e04                 | ' 
23e04                 | '     v->remove = &v_remove;
23e04                 | '     v->rename = &v_rename;
23e04                 | ' 
23e04                 | '     v->init = &v_init;
23e04                 | '     v->deinit = &v_deinit;
23e04                 | ' 
23e04                 | '     return v;
23e04     09 FB 01 F6 | 	mov	result1, arg01
23e08     A7 F0 03 F6 | 	mov	ptra, fp
23e0c     B2 00 A0 FD | 	call	#popregs_
23e10                 | _fatfs_cc_get_vfs_ret
23e10     2D 00 64 FD | 	ret
23e14                 | 
23e14                 | _fatfs_cc_xmit_mmc_0940
23e14     01 00 00 FF 
23e18     10 E4 05 F1 | 	add	objptr, ##528
23e1c     F2 00 02 FB | 	rdlong	_var01, objptr
23e20     08 E4 05 F1 | 	add	objptr, #8
23e24     F2 02 02 FB | 	rdlong	_var02, objptr
23e28     01 00 00 FF 
23e2c     18 E4 85 F1 | 	sub	objptr, ##536
23e30     40 02 62 FD | 	dirl	_var02
23e34     28 02 64 FD | 	setq	#1
23e38     09 05 02 FB | 	rdlong	_var03, arg01
23e3c     69 04 62 FD | 	rev	_var03
23e40     1B 04 FE F9 | 	movbyts	_var03, #27
23e44     01 05 22 FC | 	wypin	_var03, _var02
23e48     0A 05 02 F6 | 	mov	_var03, arg02
23e4c     02 14 4E F0 | 	shr	arg02, #2 wz
23e50     03 04 66 F0 | 	shl	_var03, #3
23e54     00 05 22 FC | 	wypin	_var03, _var01
23e58     41 02 62 FD | 	dirh	_var02
23e5c     08 12 06 F1 | 	add	arg01, #8
23e60     69 06 62 FD | 	rev	_var04
23e64     1B 06 FE F9 | 	movbyts	_var04, #27
23e68                 | LR__3900
23e68     01 07 22 5C |  if_ne	wypin	_var04, _var02
23e6c     09 07 02 5B |  if_ne	rdlong	_var04, arg01
23e70     04 12 06 51 |  if_ne	add	arg01, #4
23e74     69 06 62 5D |  if_ne	rev	_var04
23e78     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
23e7c                 | LR__3901
23e7c     40 02 72 5D |  if_ne	testp	_var02 wc
23e80     F8 FF 9F 1D |  if_a	jmp	#LR__3901
23e84     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__3900
23e88                 | LR__3902
23e88     40 00 72 FD | 	testp	_var01 wc
23e8c     F8 FF 9F 3D |  if_ae	jmp	#LR__3902
23e90     40 02 62 FD | 	dirl	_var02
23e94     FF FF FF FF 
23e98     01 FF 2B FC | 	wypin	##-1, _var02
23e9c     41 02 62 FD | 	dirh	_var02
23ea0                 | _fatfs_cc_xmit_mmc_0940_ret
23ea0     2D 00 64 FD | 	ret
23ea4                 | 
23ea4                 | _fatfs_cc_rcvr_mmc_0947
23ea4     01 00 00 FF 
23ea8     10 E4 05 F1 | 	add	objptr, ##528
23eac     F2 00 02 FB | 	rdlong	_var01, objptr
23eb0     0C E4 05 F1 | 	add	objptr, #12
23eb4     F2 02 02 FB | 	rdlong	_var02, objptr
23eb8     01 00 00 FF 
23ebc     1C E4 85 F1 | 	sub	objptr, ##540
23ec0     01 03 08 FC | 	akpin	_var02
23ec4     0A 05 0A F6 | 	mov	_var03, arg02 wz
23ec8     02 04 4E F0 | 	shr	_var03, #2 wz
23ecc     30 00 90 AD |  if_e	jmp	#LR__3912
23ed0     02 07 02 F6 | 	mov	_var04, _var03
23ed4     05 06 66 F0 | 	shl	_var04, #5
23ed8     00 07 22 FC | 	wypin	_var04, _var01
23edc     01 7F 18 FC | 	wxpin	#63, _var02
23ee0                 | LR__3910
23ee0                 | LR__3911
23ee0     40 02 72 FD | 	testp	_var02 wc
23ee4     F8 FF 9F 3D |  if_ae	jmp	#LR__3911
23ee8     01 07 8A FA | 	rdpin	_var04, _var02
23eec     69 06 62 FD | 	rev	_var04
23ef0     1B 06 FE F9 | 	movbyts	_var04, #27
23ef4     09 07 62 FC | 	wrlong	_var04, arg01
23ef8     04 12 06 F1 | 	add	arg01, #4
23efc     F8 05 6E FB | 	djnz	_var03, #LR__3910
23f00                 | LR__3912
23f00     03 14 0E F5 | 	and	arg02, #3 wz
23f04     24 00 90 AD |  if_e	jmp	#LR__3915
23f08     01 4F 18 FC | 	wxpin	#39, _var02
23f0c                 | LR__3913
23f0c     00 11 28 FC | 	wypin	#8, _var01
23f10                 | LR__3914
23f10     40 02 72 FD | 	testp	_var02 wc
23f14     F8 FF 9F 3D |  if_ae	jmp	#LR__3914
23f18     01 07 8A FA | 	rdpin	_var04, _var02
23f1c     69 06 62 FD | 	rev	_var04
23f20     09 07 42 FC | 	wrbyte	_var04, arg01
23f24     01 12 06 F1 | 	add	arg01, #1
23f28     F8 15 6E FB | 	djnz	arg02, #LR__3913
23f2c                 | LR__3915
23f2c                 | _fatfs_cc_rcvr_mmc_0947_ret
23f2c     2D 00 64 FD | 	ret
23f30                 | 
23f30                 | _fatfs_cc_wait_ready_0951
23f30     01 4A 05 F6 | 	mov	COUNT_, #1
23f34     A8 00 A0 FD | 	call	#pushregs_
23f38     10 F0 07 F1 | 	add	ptra, #16
23f3c     1A FA 61 FD | 	getct	result1
23f40     08 4E 05 F1 | 	add	fp, #8
23f44     A7 FA 61 FC | 	wrlong	result1, fp
23f48     14 1E 06 FB | 	rdlong	local01, #20
23f4c     01 1E 46 F0 | 	shr	local01, #1
23f50     04 4E 05 F1 | 	add	fp, #4
23f54     A7 1E 62 FC | 	wrlong	local01, fp
23f58     0C 4E 85 F1 | 	sub	fp, #12
23f5c                 | ' {
23f5c                 | ' 	BYTE d;
23f5c                 | ' 	UINT tmr, tmout;
23f5c                 | ' 
23f5c                 | ' 	tmr = _cnt();
23f5c                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
23f5c                 | ' 	for(;;) {
23f5c                 | LR__3920
23f5c     04 4E 05 F1 | 	add	fp, #4
23f60     A7 12 02 F6 | 	mov	arg01, fp
23f64     04 4E 85 F1 | 	sub	fp, #4
23f68     01 14 06 F6 | 	mov	arg02, #1
23f6c     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_0947
23f70     04 4E 05 F1 | 	add	fp, #4
23f74     A7 1E C2 FA | 	rdbyte	local01, fp
23f78     04 4E 85 F1 | 	sub	fp, #4
23f7c     FF 1E 0E F2 | 	cmp	local01, #255 wz
23f80     01 FA 05 A6 |  if_e	mov	result1, #1
23f84     28 00 90 AD |  if_e	jmp	#LR__3921
23f88     1A FA 61 FD | 	getct	result1
23f8c     08 4E 05 F1 | 	add	fp, #8
23f90     A7 1E 02 FB | 	rdlong	local01, fp
23f94     0F FB 81 F1 | 	sub	result1, local01
23f98     04 4E 05 F1 | 	add	fp, #4
23f9c     A7 1E 02 FB | 	rdlong	local01, fp
23fa0     0C 4E 85 F1 | 	sub	fp, #12
23fa4     0F FB 11 F2 | 	cmp	result1, local01 wc
23fa8     00 FA 05 36 |  if_ae	mov	result1, #0
23fac     AC FF 9F CD |  if_b	jmp	#LR__3920
23fb0                 | LR__3921
23fb0     A7 F0 03 F6 | 	mov	ptra, fp
23fb4     B2 00 A0 FD | 	call	#popregs_
23fb8                 | _fatfs_cc_wait_ready_0951_ret
23fb8     2D 00 64 FD | 	ret
23fbc                 | 
23fbc                 | _fatfs_cc_deselect_0957
23fbc     00 4A 05 F6 | 	mov	COUNT_, #0
23fc0     A8 00 A0 FD | 	call	#pushregs_
23fc4     14 F0 07 F1 | 	add	ptra, #20
23fc8     01 00 00 FF 
23fcc     14 E4 05 F1 | 	add	objptr, ##532
23fd0     F2 14 02 FB | 	rdlong	arg02, objptr
23fd4     04 4E 05 F1 | 	add	fp, #4
23fd8     A7 14 62 FC | 	wrlong	arg02, fp
23fdc     04 E4 85 F1 | 	sub	objptr, #4
23fe0     F2 14 02 FB | 	rdlong	arg02, objptr
23fe4     04 4E 05 F1 | 	add	fp, #4
23fe8     A7 14 62 FC | 	wrlong	arg02, fp
23fec     08 E4 05 F1 | 	add	objptr, #8
23ff0     F2 14 02 FB | 	rdlong	arg02, objptr
23ff4     04 4E 05 F1 | 	add	fp, #4
23ff8     A7 14 62 FC | 	wrlong	arg02, fp
23ffc     04 E4 05 F1 | 	add	objptr, #4
24000     F2 14 02 FB | 	rdlong	arg02, objptr
24004     01 00 00 FF 
24008     1C E4 85 F1 | 	sub	objptr, ##540
2400c     04 4E 05 F1 | 	add	fp, #4
24010     A7 14 62 FC | 	wrlong	arg02, fp
24014     0C 4E 85 F1 | 	sub	fp, #12
24018     A7 12 02 FB | 	rdlong	arg01, fp
2401c     04 4E 85 F1 | 	sub	fp, #4
24020     59 12 62 FD | 	drvh	arg01
24024     1F 20 64 FD | 	waitx	#16
24028     A7 12 02 F6 | 	mov	arg01, fp
2402c     01 14 06 F6 | 	mov	arg02, #1
24030     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_0947
24034     A7 F0 03 F6 | 	mov	ptra, fp
24038     B2 00 A0 FD | 	call	#popregs_
2403c                 | _fatfs_cc_deselect_0957_ret
2403c     2D 00 64 FD | 	ret
24040                 | 
24040                 | _fatfs_cc_select_0961
24040     00 4A 05 F6 | 	mov	COUNT_, #0
24044     A8 00 A0 FD | 	call	#pushregs_
24048     10 F0 07 F1 | 	add	ptra, #16
2404c     01 00 00 FF 
24050     14 E4 05 F1 | 	add	objptr, ##532
24054     F2 14 02 FB | 	rdlong	arg02, objptr
24058     08 4E 05 F1 | 	add	fp, #8
2405c     A7 14 62 FC | 	wrlong	arg02, fp
24060     08 E4 05 F1 | 	add	objptr, #8
24064     F2 12 02 FB | 	rdlong	arg01, objptr
24068     01 00 00 FF 
2406c     1C E4 85 F1 | 	sub	objptr, ##540
24070     04 4E 05 F1 | 	add	fp, #4
24074     A7 12 62 FC | 	wrlong	arg01, fp
24078     50 12 62 FD | 	fltl	arg01
2407c     04 4E 85 F1 | 	sub	fp, #4
24080     A7 12 02 FB | 	rdlong	arg01, fp
24084     58 12 62 FD | 	drvl	arg01
24088     1F 20 64 FD | 	waitx	#16
2408c     04 4E 05 F1 | 	add	fp, #4
24090     A7 12 02 FB | 	rdlong	arg01, fp
24094     41 12 62 FD | 	dirh	arg01
24098     08 4E 85 F1 | 	sub	fp, #8
2409c     A7 12 02 F6 | 	mov	arg01, fp
240a0     04 4E 85 F1 | 	sub	fp, #4
240a4     01 14 06 F6 | 	mov	arg02, #1
240a8     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0947
240ac     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_0951
240b0     00 FA 0D F2 | 	cmp	result1, #0 wz
240b4     01 FA 05 56 |  if_ne	mov	result1, #1
240b8     08 00 90 5D |  if_ne	jmp	#LR__3930
240bc     FC FE BF FD | 	call	#_fatfs_cc_deselect_0957
240c0                 | ' 
240c0                 | ' 	deselect();
240c0                 | ' 	return 0;
240c0     00 FA 05 F6 | 	mov	result1, #0
240c4                 | LR__3930
240c4     A7 F0 03 F6 | 	mov	ptra, fp
240c8     B2 00 A0 FD | 	call	#popregs_
240cc                 | _fatfs_cc_select_0961_ret
240cc     2D 00 64 FD | 	ret
240d0                 | 
240d0                 | _fatfs_cc_rcvr_datablock_0965
240d0     01 4A 05 F6 | 	mov	COUNT_, #1
240d4     A8 00 A0 FD | 	call	#pushregs_
240d8     18 F0 07 F1 | 	add	ptra, #24
240dc     04 4E 05 F1 | 	add	fp, #4
240e0     A7 12 62 FC | 	wrlong	arg01, fp
240e4     04 4E 05 F1 | 	add	fp, #4
240e8     A7 14 62 FC | 	wrlong	arg02, fp
240ec     1A FA 61 FD | 	getct	result1
240f0     08 4E 05 F1 | 	add	fp, #8
240f4     A7 FA 61 FC | 	wrlong	result1, fp
240f8     14 1E 06 FB | 	rdlong	local01, #20
240fc     03 1E 46 F0 | 	shr	local01, #3
24100     04 4E 05 F1 | 	add	fp, #4
24104     A7 1E 62 FC | 	wrlong	local01, fp
24108     14 4E 85 F1 | 	sub	fp, #20
2410c                 | ' 	BYTE *buff,
2410c                 | ' 	UINT btr
2410c                 | ' )
2410c                 | ' {
2410c                 | ' 	BYTE d[2];
2410c                 | ' 	UINT tmr, tmout;
2410c                 | ' 
2410c                 | ' 	tmr = _cnt();
2410c                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2410c                 | ' 	for(;;) {
2410c                 | LR__3940
2410c     0C 4E 05 F1 | 	add	fp, #12
24110     A7 12 02 F6 | 	mov	arg01, fp
24114     0C 4E 85 F1 | 	sub	fp, #12
24118     01 14 06 F6 | 	mov	arg02, #1
2411c     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0947
24120     0C 4E 05 F1 | 	add	fp, #12
24124     A7 1E C2 FA | 	rdbyte	local01, fp
24128     0C 4E 85 F1 | 	sub	fp, #12
2412c     FF 1E 0E F2 | 	cmp	local01, #255 wz
24130     28 00 90 5D |  if_ne	jmp	#LR__3941
24134     1A FA 61 FD | 	getct	result1
24138     FD 1E 02 F6 | 	mov	local01, result1
2413c     10 4E 05 F1 | 	add	fp, #16
24140     A7 14 02 FB | 	rdlong	arg02, fp
24144     0A 1F 82 F1 | 	sub	local01, arg02
24148     04 4E 05 F1 | 	add	fp, #4
2414c     A7 14 02 FB | 	rdlong	arg02, fp
24150     14 4E 85 F1 | 	sub	fp, #20
24154     0A 1F 12 F2 | 	cmp	local01, arg02 wc
24158     B0 FF 9F CD |  if_b	jmp	#LR__3940
2415c                 | LR__3941
2415c     0C 4E 05 F1 | 	add	fp, #12
24160     A7 1E C2 FA | 	rdbyte	local01, fp
24164     0C 4E 85 F1 | 	sub	fp, #12
24168     FE 1E 0E F2 | 	cmp	local01, #254 wz
2416c     00 FA 05 56 |  if_ne	mov	result1, #0
24170     30 00 90 5D |  if_ne	jmp	#LR__3942
24174     04 4E 05 F1 | 	add	fp, #4
24178     A7 12 02 FB | 	rdlong	arg01, fp
2417c     04 4E 05 F1 | 	add	fp, #4
24180     A7 14 02 FB | 	rdlong	arg02, fp
24184     08 4E 85 F1 | 	sub	fp, #8
24188     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0947
2418c     0C 4E 05 F1 | 	add	fp, #12
24190     A7 12 02 F6 | 	mov	arg01, fp
24194     0C 4E 85 F1 | 	sub	fp, #12
24198     02 14 06 F6 | 	mov	arg02, #2
2419c     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0947
241a0                 | ' 
241a0                 | ' 	rcvr_mmc(buff, btr);
241a0                 | ' 	rcvr_mmc(d, 2);
241a0                 | ' 
241a0                 | ' 	return 1;
241a0     01 FA 05 F6 | 	mov	result1, #1
241a4                 | LR__3942
241a4     A7 F0 03 F6 | 	mov	ptra, fp
241a8     B2 00 A0 FD | 	call	#popregs_
241ac                 | _fatfs_cc_rcvr_datablock_0965_ret
241ac     2D 00 64 FD | 	ret
241b0                 | 
241b0                 | _fatfs_cc_xmit_datablock_0967
241b0     00 4A 05 F6 | 	mov	COUNT_, #0
241b4     A8 00 A0 FD | 	call	#pushregs_
241b8     10 F0 07 F1 | 	add	ptra, #16
241bc     04 4E 05 F1 | 	add	fp, #4
241c0     A7 12 62 FC | 	wrlong	arg01, fp
241c4     04 4E 05 F1 | 	add	fp, #4
241c8     A7 14 42 FC | 	wrbyte	arg02, fp
241cc     08 4E 85 F1 | 	sub	fp, #8
241d0     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_0951
241d4     00 FA 0D F2 | 	cmp	result1, #0 wz
241d8     00 FA 05 A6 |  if_e	mov	result1, #0
241dc     90 00 90 AD |  if_e	jmp	#LR__3951
241e0     08 4E 05 F1 | 	add	fp, #8
241e4     A7 14 C2 FA | 	rdbyte	arg02, fp
241e8     04 4E 05 F1 | 	add	fp, #4
241ec     A7 14 42 FC | 	wrbyte	arg02, fp
241f0     A7 12 02 F6 | 	mov	arg01, fp
241f4     0C 4E 85 F1 | 	sub	fp, #12
241f8     01 14 06 F6 | 	mov	arg02, #1
241fc     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_0940
24200     08 4E 05 F1 | 	add	fp, #8
24204     A7 14 C2 FA | 	rdbyte	arg02, fp
24208     08 4E 85 F1 | 	sub	fp, #8
2420c     FD 14 0E F2 | 	cmp	arg02, #253 wz
24210     58 00 90 AD |  if_e	jmp	#LR__3950
24214     04 4E 05 F1 | 	add	fp, #4
24218     A7 12 02 FB | 	rdlong	arg01, fp
2421c     04 4E 85 F1 | 	sub	fp, #4
24220     09 14 C6 F9 | 	decod	arg02, #9
24224     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_0940
24228     0C 4E 05 F1 | 	add	fp, #12
2422c     A7 12 02 F6 | 	mov	arg01, fp
24230     0C 4E 85 F1 | 	sub	fp, #12
24234     02 14 06 F6 | 	mov	arg02, #2
24238     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0947
2423c     0C 4E 05 F1 | 	add	fp, #12
24240     A7 12 02 F6 | 	mov	arg01, fp
24244     0C 4E 85 F1 | 	sub	fp, #12
24248     01 14 06 F6 | 	mov	arg02, #1
2424c     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0947
24250     0C 4E 05 F1 | 	add	fp, #12
24254     A7 14 C2 FA | 	rdbyte	arg02, fp
24258     0C 4E 85 F1 | 	sub	fp, #12
2425c     1F 14 06 F5 | 	and	arg02, #31
24260     05 14 0E F2 | 	cmp	arg02, #5 wz
24264                 | ' 			return 0;
24264     00 FA 05 56 |  if_ne	mov	result1, #0
24268     04 00 90 5D |  if_ne	jmp	#LR__3951
2426c                 | LR__3950
2426c                 | ' 	}
2426c                 | ' 
2426c                 | ' 	return 1;
2426c     01 FA 05 F6 | 	mov	result1, #1
24270                 | LR__3951
24270     A7 F0 03 F6 | 	mov	ptra, fp
24274     B2 00 A0 FD | 	call	#popregs_
24278                 | _fatfs_cc_xmit_datablock_0967_ret
24278     2D 00 64 FD | 	ret
2427c                 | 
2427c                 | _fatfs_cc_send_cmd_0971
2427c     01 4A 05 F6 | 	mov	COUNT_, #1
24280     A8 00 A0 FD | 	call	#pushregs_
24284     1C F0 07 F1 | 	add	ptra, #28
24288                 | _fatfs_cc_send_cmd_0971_enter
24288     04 4E 05 F1 | 	add	fp, #4
2428c     A7 12 42 FC | 	wrbyte	arg01, fp
24290     04 4E 05 F1 | 	add	fp, #4
24294     A7 14 62 FC | 	wrlong	arg02, fp
24298     04 4E 85 F1 | 	sub	fp, #4
2429c     A7 FA C1 FA | 	rdbyte	result1, fp
242a0     04 4E 85 F1 | 	sub	fp, #4
242a4     80 FA CD F7 | 	test	result1, #128 wz
242a8     44 00 90 AD |  if_e	jmp	#LR__3960
242ac     04 4E 05 F1 | 	add	fp, #4
242b0     A7 14 C2 FA | 	rdbyte	arg02, fp
242b4     7F 14 06 F5 | 	and	arg02, #127
242b8     A7 14 42 FC | 	wrbyte	arg02, fp
242bc     04 4E 85 F1 | 	sub	fp, #4
242c0     37 12 06 F6 | 	mov	arg01, #55
242c4     00 14 06 F6 | 	mov	arg02, #0
242c8     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_0971
242cc     0C 4E 05 F1 | 	add	fp, #12
242d0     A7 FA 41 FC | 	wrbyte	result1, fp
242d4     A7 14 C2 FA | 	rdbyte	arg02, fp
242d8     0C 4E 85 F1 | 	sub	fp, #12
242dc     02 14 16 F2 | 	cmp	arg02, #2 wc
242e0     0C 4E 05 31 |  if_ae	add	fp, #12
242e4     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
242e8     0C 4E 85 31 |  if_ae	sub	fp, #12
242ec     6C 01 90 3D |  if_ae	jmp	#LR__3964
242f0                 | LR__3960
242f0     04 4E 05 F1 | 	add	fp, #4
242f4     A7 14 C2 FA | 	rdbyte	arg02, fp
242f8     04 4E 85 F1 | 	sub	fp, #4
242fc     0C 14 0E F2 | 	cmp	arg02, #12 wz
24300     14 00 90 AD |  if_e	jmp	#LR__3961
24304     B4 FC BF FD | 	call	#_fatfs_cc_deselect_0957
24308     34 FD BF FD | 	call	#_fatfs_cc_select_0961
2430c     00 FA 0D F2 | 	cmp	result1, #0 wz
24310     FF FA 05 A6 |  if_e	mov	result1, #255
24314     44 01 90 AD |  if_e	jmp	#LR__3964
24318                 | LR__3961
24318     04 4E 05 F1 | 	add	fp, #4
2431c     A7 14 C2 FA | 	rdbyte	arg02, fp
24320     40 FA 05 F6 | 	mov	result1, #64
24324     0A FB 41 F5 | 	or	result1, arg02
24328     10 4E 05 F1 | 	add	fp, #16
2432c     A7 FA 41 FC | 	wrbyte	result1, fp
24330     0C 4E 85 F1 | 	sub	fp, #12
24334     A7 FA 01 FB | 	rdlong	result1, fp
24338     18 FA 45 F0 | 	shr	result1, #24
2433c     0D 4E 05 F1 | 	add	fp, #13
24340     A7 FA 41 FC | 	wrbyte	result1, fp
24344     0D 4E 85 F1 | 	sub	fp, #13
24348     A7 FA 01 FB | 	rdlong	result1, fp
2434c     10 FA 45 F0 | 	shr	result1, #16
24350     0E 4E 05 F1 | 	add	fp, #14
24354     A7 FA 41 FC | 	wrbyte	result1, fp
24358     0E 4E 85 F1 | 	sub	fp, #14
2435c     A7 FA 01 FB | 	rdlong	result1, fp
24360     08 FA 45 F0 | 	shr	result1, #8
24364     0F 4E 05 F1 | 	add	fp, #15
24368     A7 FA 41 FC | 	wrbyte	result1, fp
2436c     0F 4E 85 F1 | 	sub	fp, #15
24370     A7 FA 01 FB | 	rdlong	result1, fp
24374     10 4E 05 F1 | 	add	fp, #16
24378     A7 FA 41 FC | 	wrbyte	result1, fp
2437c     0C 4E 85 F1 | 	sub	fp, #12
24380     A7 02 48 FC | 	wrbyte	#1, fp
24384     08 4E 85 F1 | 	sub	fp, #8
24388     A7 FA C9 FA | 	rdbyte	result1, fp wz
2438c     04 4E 85 F1 | 	sub	fp, #4
24390     0C 4E 05 A1 |  if_e	add	fp, #12
24394     A7 2A 49 AC |  if_e	wrbyte	#149, fp
24398     0C 4E 85 A1 |  if_e	sub	fp, #12
2439c     04 4E 05 F1 | 	add	fp, #4
243a0     A7 FA C1 FA | 	rdbyte	result1, fp
243a4     04 4E 85 F1 | 	sub	fp, #4
243a8     08 FA 0D F2 | 	cmp	result1, #8 wz
243ac     0C 4E 05 A1 |  if_e	add	fp, #12
243b0     A7 0E 49 AC |  if_e	wrbyte	#135, fp
243b4     0C 4E 85 A1 |  if_e	sub	fp, #12
243b8     0C 4E 05 F1 | 	add	fp, #12
243bc     A7 14 C2 FA | 	rdbyte	arg02, fp
243c0     0D 4E 05 F1 | 	add	fp, #13
243c4     A7 14 42 FC | 	wrbyte	arg02, fp
243c8     05 4E 85 F1 | 	sub	fp, #5
243cc     A7 12 02 F6 | 	mov	arg01, fp
243d0     14 4E 85 F1 | 	sub	fp, #20
243d4     06 14 06 F6 | 	mov	arg02, #6
243d8     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_0940
243dc     04 4E 05 F1 | 	add	fp, #4
243e0     A7 1E C2 FA | 	rdbyte	local01, fp
243e4     04 4E 85 F1 | 	sub	fp, #4
243e8     0C 1E 0E F2 | 	cmp	local01, #12 wz
243ec     10 4E 05 A1 |  if_e	add	fp, #16
243f0     A7 12 02 A6 |  if_e	mov	arg01, fp
243f4     10 4E 85 A1 |  if_e	sub	fp, #16
243f8     01 14 06 A6 |  if_e	mov	arg02, #1
243fc     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_0947
24400     0C 4E 05 F1 | 	add	fp, #12
24404     A7 14 48 FC | 	wrbyte	#10, fp
24408     0C 4E 85 F1 | 	sub	fp, #12
2440c                 | ' 	n = 10;
2440c                 | ' 	do
2440c                 | LR__3962
2440c     10 4E 05 F1 | 	add	fp, #16
24410     A7 12 02 F6 | 	mov	arg01, fp
24414     10 4E 85 F1 | 	sub	fp, #16
24418     01 14 06 F6 | 	mov	arg02, #1
2441c     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_0947
24420     10 4E 05 F1 | 	add	fp, #16
24424     A7 1E C2 FA | 	rdbyte	local01, fp
24428     10 4E 85 F1 | 	sub	fp, #16
2442c     80 1E CE F7 | 	test	local01, #128 wz
24430     1C 00 90 AD |  if_e	jmp	#LR__3963
24434     0C 4E 05 F1 | 	add	fp, #12
24438     A7 1E C2 FA | 	rdbyte	local01, fp
2443c     01 1E 86 F1 | 	sub	local01, #1
24440     A7 1E 42 FC | 	wrbyte	local01, fp
24444     A7 1E CA FA | 	rdbyte	local01, fp wz
24448     0C 4E 85 F1 | 	sub	fp, #12
2444c     BC FF 9F 5D |  if_ne	jmp	#LR__3962
24450                 | LR__3963
24450                 | ' 
24450                 | ' 	return d;
24450     10 4E 05 F1 | 	add	fp, #16
24454     A7 FA C1 FA | 	rdbyte	result1, fp
24458     10 4E 85 F1 | 	sub	fp, #16
2445c                 | LR__3964
2445c     A7 F0 03 F6 | 	mov	ptra, fp
24460     B2 00 A0 FD | 	call	#popregs_
24464                 | _fatfs_cc_send_cmd_0971_ret
24464     2D 00 64 FD | 	ret
24468                 | 
24468                 | _fatfs_cc_disk_deinitialize
24468     03 4A 05 F6 | 	mov	COUNT_, #3
2446c     A8 00 A0 FD | 	call	#pushregs_
24470     00 12 4E F2 | 	cmps	arg01, #0 wz
24474     01 00 00 FF 
24478     14 E4 05 F1 | 	add	objptr, ##532
2447c     F2 12 02 FB | 	rdlong	arg01, objptr
24480     04 E4 85 F1 | 	sub	objptr, #4
24484     F2 1E 02 FB | 	rdlong	local01, objptr
24488     08 E4 05 F1 | 	add	objptr, #8
2448c     F2 20 02 FB | 	rdlong	local02, objptr
24490     04 E4 05 F1 | 	add	objptr, #4
24494     F2 22 02 FB | 	rdlong	local03, objptr
24498     01 00 00 FF 
2449c     1C E4 85 F1 | 	sub	objptr, ##540
244a0                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
244a0                 | '         return RES_NOTRDY;
244a0     03 FA 05 56 |  if_ne	mov	result1, #3
244a4     2C 00 90 5D |  if_ne	jmp	#LR__3970
244a8     50 12 62 FD | 	fltl	arg01
244ac     09 01 08 FC | 	wrpin	#0, arg01
244b0     50 1E 62 FD | 	fltl	local01
244b4     0F 01 08 FC | 	wrpin	#0, local01
244b8     50 20 62 FD | 	fltl	local02
244bc     10 01 08 FC | 	wrpin	#0, local02
244c0     50 22 62 FD | 	fltl	local03
244c4     11 01 08 FC | 	wrpin	#0, local03
244c8     0A 12 06 F6 | 	mov	arg01, #10
244cc     6C 19 BF FD | 	call	#__system___waitms
244d0                 | '     }
244d0                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
244d0                 | '     _pinclear(PIN_SS);
244d0                 | '     _pinclear(PIN_CLK);
244d0                 | '     _pinclear(PIN_DI);
244d0                 | '     _pinclear(PIN_DO);
244d0                 | ' 
244d0                 | '     _waitms(10);
244d0                 | ' 
244d0                 | '     return 0;
244d0     00 FA 05 F6 | 	mov	result1, #0
244d4                 | LR__3970
244d4     A7 F0 03 F6 | 	mov	ptra, fp
244d8     B2 00 A0 FD | 	call	#popregs_
244dc                 | _fatfs_cc_disk_deinitialize_ret
244dc     2D 00 64 FD | 	ret
244e0                 | 
244e0                 | _fatfs_cc_gettimeofday
244e0     04 4A 05 F6 | 	mov	COUNT_, #4
244e4     A8 00 A0 FD | 	call	#pushregs_
244e8     09 1F 02 F6 | 	mov	local01, arg01
244ec     28 15 BF FD | 	call	#__system___getus
244f0     FD 12 02 F6 | 	mov	arg01, result1
244f4     02 00 00 FF 
244f8     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
244fc     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
24500     09 FB 01 F6 | 	mov	result1, arg01
24504     10 FB 81 F1 | 	sub	result1, local02
24508     A1 07 00 FF 
2450c     40 FA 15 FD | 	qdiv	result1, ##1000000
24510     02 00 00 FF 
24514     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
24518     18 20 62 FD | 	getqx	local02
2451c     A1 07 00 FF 
24520     40 FA 15 FD | 	qdiv	result1, ##1000000
24524     00 20 0E F2 | 	cmp	local02, #0 wz
24528     19 22 62 FD | 	getqy	local03
2452c     28 00 90 AD |  if_e	jmp	#LR__3980
24530     02 00 00 FF 
24534     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
24538     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2453c     10 25 02 F1 | 	add	local04, local02
24540     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
24544     11 13 82 F1 | 	sub	arg01, local03
24548     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
2454c     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
24550     02 00 00 FF 
24554     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
24558                 | LR__3980
24558     02 00 00 FF 
2455c     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
24560     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
24564     02 00 00 FF 
24568     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
2456c     0F 25 62 FC | 	wrlong	local04, local01
24570     04 1E 06 F1 | 	add	local01, #4
24574     0F 23 62 FC | 	wrlong	local03, local01
24578                 | '         lastsec += secs;
24578                 | '         lastus = now - leftover;
24578                 | '     }
24578                 | '     tv->tv_sec = lastsec;
24578                 | '     tv->tv_usec = leftover;
24578                 | '     return 0;
24578     00 FA 05 F6 | 	mov	result1, #0
2457c     A7 F0 03 F6 | 	mov	ptra, fp
24580     B2 00 A0 FD | 	call	#popregs_
24584                 | _fatfs_cc_gettimeofday_ret
24584     2D 00 64 FD | 	ret
24588                 | 
24588                 | _fatfs_cc__is_leap_year
24588     09 FB 51 F6 | 	abs	result1, arg01 wc
2458c     03 FA 05 F5 | 	and	result1, #3
24590     FD FA 89 F6 | 	negc	result1, result1 wz
24594     38 00 90 5D |  if_ne	jmp	#LR__3991
24598     09 FB 51 F6 | 	abs	result1, arg01 wc
2459c     64 FA 15 FD | 	qdiv	result1, #100
245a0     19 FA 61 FD | 	getqy	result1
245a4     FD FA 89 F6 | 	negc	result1, result1 wz
245a8     1C 00 90 5D |  if_ne	jmp	#LR__3990
245ac     09 FB 51 F6 | 	abs	result1, arg01 wc
245b0     90 FB 15 FD | 	qdiv	result1, #400
245b4                 | '       return (0 == y % 400);
245b4     00 FA 05 F6 | 	mov	result1, #0
245b8     19 00 62 FD | 	getqy	_var01
245bc     00 01 8A F6 | 	negc	_var01, _var01 wz
245c0     01 FA 05 A6 |  if_e	mov	result1, #1
245c4     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
245c8                 | LR__3990
245c8                 | '     return 1;
245c8     01 FA 05 F6 | 	mov	result1, #1
245cc     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
245d0                 | LR__3991
245d0                 | '   }
245d0                 | '   return 0;
245d0     00 FA 05 F6 | 	mov	result1, #0
245d4                 | _fatfs_cc__is_leap_year_ret
245d4     2D 00 64 FD | 	ret
245d8                 | 
245d8                 | _fatfs_cc___tzoffset
245d8     09 01 0A F6 | 	mov	_var01, arg01 wz
245dc     FF FF FF FF 
245e0     0A FF 6B FC | 	wrlong	##-1, arg02
245e4     01 02 06 F6 | 	mov	_var02, #1
245e8     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
245ec                 | '                 return 0;
245ec     00 FA 05 A6 |  if_e	mov	result1, #0
245f0     94 02 90 AD |  if_e	jmp	#LR__4017
245f4     0A 01 68 FC | 	wrlong	#0, arg02
245f8     02 00 00 FF 
245fc     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
24600     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
24604                 | ' 
24604                 | '        *hasdst = 0;
24604                 | ' 
24604                 | ' 	n = stdname;
24604                 | '         while (*s && isalpha(*s)) {
24604     02 00 00 FF 
24608     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2460c     97 28 48 FB | 	callpa	#(@LR__4001-@LR__4000)>>2,fcache_load_ptr_
24610                 | LR__4000
24610     00 05 CA FA | 	rdbyte	_var03, _var01 wz
24614     48 00 90 AD |  if_e	jmp	#LR__4002
24618     00 13 C2 FA | 	rdbyte	arg01, _var01
2461c                 | ' {
2461c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2461c     80 12 36 F3 | 	fle	arg01, #128 wc
24620                 | '     return __ctype[c];
24620     02 00 00 FF 
24624     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
24628     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2462c     09 FB C1 FA | 	rdbyte	result1, arg01
24630     02 00 00 FF 
24634     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
24638     0C FA CD F7 | 	test	result1, #12 wz
2463c     20 00 90 AD |  if_e	jmp	#LR__4002
24640     00 09 02 F6 | 	mov	_var05, _var01
24644     00 0B 02 F6 | 	mov	_var06, _var01
24648     01 0A 06 F1 | 	add	_var06, #1
2464c     04 0D C2 FA | 	rdbyte	_var07, _var05
24650     05 01 02 F6 | 	mov	_var01, _var06
24654     03 0D 42 FC | 	wrbyte	_var07, _var04
24658     01 06 06 F1 | 	add	_var04, #1
2465c     B0 FF 9F FD | 	jmp	#LR__4000
24660                 | LR__4001
24660                 | LR__4002
24660     03 01 48 FC | 	wrbyte	#0, _var04
24664     00 0E 06 F6 | 	mov	_var08, #0
24668     00 05 C2 FA | 	rdbyte	_var03, _var01
2466c     2D 04 0E F2 | 	cmp	_var03, #45 wz
24670     01 02 66 A6 |  if_e	neg	_var02, #1
24674     01 00 06 A1 |  if_e	add	_var01, #1
24678     97 28 48 FB | 	callpa	#(@LR__4004-@LR__4003)>>2,fcache_load_ptr_
2467c                 | '                 sgn = -1;
2467c                 | '                 s++;
2467c                 | '         }
2467c                 | '         while (isdigit(*s)) {
2467c                 | LR__4003
2467c     00 13 C2 FA | 	rdbyte	arg01, _var01
24680                 | ' {
24680                 | '   return  (__ctype_get(c) & 0x02 ) ;
24680     80 12 36 F3 | 	fle	arg01, #128 wc
24684                 | '     return __ctype[c];
24684     02 00 00 FF 
24688     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2468c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
24690     09 FB C1 FA | 	rdbyte	result1, arg01
24694     02 00 00 FF 
24698     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2469c     02 FA CD F7 | 	test	result1, #2 wz
246a0     28 00 90 AD |  if_e	jmp	#LR__4005
246a4     07 05 02 F6 | 	mov	_var03, _var08
246a8     02 04 66 F0 | 	shl	_var03, #2
246ac     07 05 02 F1 | 	add	_var03, _var08
246b0     01 04 66 F0 | 	shl	_var03, #1
246b4     00 09 C2 FA | 	rdbyte	_var05, _var01
246b8     30 08 86 F1 | 	sub	_var05, #48
246bc     04 05 02 F1 | 	add	_var03, _var05
246c0     02 0F 02 F6 | 	mov	_var08, _var03
246c4     01 00 06 F1 | 	add	_var01, #1
246c8     B0 FF 9F FD | 	jmp	#LR__4003
246cc                 | LR__4004
246cc                 | LR__4005
246cc     07 00 00 FF 
246d0     10 0E 06 FD | 	qmul	_var08, ##3600
246d4     00 05 C2 FA | 	rdbyte	_var03, _var01
246d8     3A 04 0E F2 | 	cmp	_var03, #58 wz
246dc     18 10 62 FD | 	getqx	_var09
246e0     70 00 90 5D |  if_ne	jmp	#LR__4009
246e4     00 0E 06 F6 | 	mov	_var08, #0
246e8     01 00 06 F1 | 	add	_var01, #1
246ec     97 28 48 FB | 	callpa	#(@LR__4007-@LR__4006)>>2,fcache_load_ptr_
246f0                 | '                 x = 0;
246f0                 | '                 s++;
246f0                 | '                 while (isdigit(*s)) {
246f0                 | LR__4006
246f0     00 13 C2 FA | 	rdbyte	arg01, _var01
246f4                 | ' {
246f4                 | '   return  (__ctype_get(c) & 0x02 ) ;
246f4     80 12 36 F3 | 	fle	arg01, #128 wc
246f8                 | '     return __ctype[c];
246f8     02 00 00 FF 
246fc     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
24700     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
24704     09 FB C1 FA | 	rdbyte	result1, arg01
24708     02 00 00 FF 
2470c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
24710     02 FA CD F7 | 	test	result1, #2 wz
24714     28 00 90 AD |  if_e	jmp	#LR__4008
24718     07 05 02 F6 | 	mov	_var03, _var08
2471c     02 04 66 F0 | 	shl	_var03, #2
24720     07 05 02 F1 | 	add	_var03, _var08
24724     01 04 66 F0 | 	shl	_var03, #1
24728     00 09 C2 FA | 	rdbyte	_var05, _var01
2472c     30 08 86 F1 | 	sub	_var05, #48
24730     04 05 02 F1 | 	add	_var03, _var05
24734     02 0F 02 F6 | 	mov	_var08, _var03
24738     01 00 06 F1 | 	add	_var01, #1
2473c     B0 FF 9F FD | 	jmp	#LR__4006
24740                 | LR__4007
24740                 | LR__4008
24740     07 0D 02 F6 | 	mov	_var07, _var08
24744     04 0C 66 F0 | 	shl	_var07, #4
24748     07 0D 82 F1 | 	sub	_var07, _var08
2474c     02 0C 66 F0 | 	shl	_var07, #2
24750     06 11 02 F1 | 	add	_var09, _var07
24754                 | LR__4009
24754     02 00 00 FF 
24758     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2475c     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
24760     00 13 C2 FA | 	rdbyte	arg01, _var01
24764                 | ' {
24764                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
24764     80 12 36 F3 | 	fle	arg01, #128 wc
24768                 | '     return __ctype[c];
24768     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
2476c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
24770     09 FB C1 FA | 	rdbyte	result1, arg01
24774     02 00 00 FF 
24778     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2477c     0C FA CD F7 | 	test	result1, #12 wz
24780     50 00 90 AD |  if_e	jmp	#LR__4012
24784     0A 03 68 FC | 	wrlong	#1, arg02
24788                 | '                 *hasdst = 1;
24788                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
24788                 | LR__4010
24788     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2478c     44 00 90 AD |  if_e	jmp	#LR__4011
24790     00 13 C2 FA | 	rdbyte	arg01, _var01
24794                 | ' {
24794                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
24794     80 12 36 F3 | 	fle	arg01, #128 wc
24798                 | '     return __ctype[c];
24798     02 00 00 FF 
2479c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
247a0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
247a4     09 FB C1 FA | 	rdbyte	result1, arg01
247a8     02 00 00 FF 
247ac     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
247b0     0C FA CD F7 | 	test	result1, #12 wz
247b4     1C 00 90 AD |  if_e	jmp	#LR__4011
247b8     00 0B 02 F6 | 	mov	_var06, _var01
247bc     01 0A 06 F1 | 	add	_var06, #1
247c0     00 0D C2 FA | 	rdbyte	_var07, _var01
247c4     05 01 02 F6 | 	mov	_var01, _var06
247c8     03 0D 42 FC | 	wrbyte	_var07, _var04
247cc     01 06 06 F1 | 	add	_var04, #1
247d0     B4 FF 9F FD | 	jmp	#LR__4010
247d4                 | LR__4011
247d4                 | LR__4012
247d4     03 01 48 FC | 	wrbyte	#0, _var04
247d8     02 00 00 FF 
247dc     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
247e0     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
247e4     02 00 00 FF 
247e8     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
247ec     20 00 90 AD |  if_e	jmp	#LR__4013
247f0     02 00 00 FF 
247f4     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
247f8     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
247fc     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
24800     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
24804     02 00 00 FF 
24808     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2480c     1C 00 90 FD | 	jmp	#LR__4014
24810                 | LR__4013
24810     02 00 00 FF 
24814     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
24818     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2481c     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
24820     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
24824     02 00 00 FF 
24828     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2482c                 | LR__4014
2482c     02 00 00 FF 
24830     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
24834     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
24838     02 00 00 FF 
2483c     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
24840     20 00 90 AD |  if_e	jmp	#LR__4015
24844     02 00 00 FF 
24848     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2484c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
24850     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
24854     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
24858     02 00 00 FF 
2485c     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
24860     1C 00 90 FD | 	jmp	#LR__4016
24864                 | LR__4015
24864     02 00 00 FF 
24868     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2486c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
24870     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
24874     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
24878     02 00 00 FF 
2487c     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
24880                 | LR__4016
24880     08 03 02 FD | 	qmul	_var02, _var09
24884                 | ' 		_tzname[1] = stdname;
24884                 | ' 
24884                 | '         return sgn * off;
24884     18 FA 61 FD | 	getqx	result1
24888                 | LR__4017
24888                 | _fatfs_cc___tzoffset_ret
24888     2D 00 64 FD | 	ret
2488c                 | 
2488c                 | _fatfs_cc___indst
2488c     10 12 06 F1 | 	add	arg01, #16
24890     09 01 02 FB | 	rdlong	_var01, arg01
24894     10 12 86 F1 | 	sub	arg01, #16
24898     02 00 0E F2 | 	cmp	_var01, #2 wz
2489c     30 00 90 5D |  if_ne	jmp	#LR__4020
248a0     07 00 06 F6 | 	mov	_var01, #7
248a4     18 12 06 F1 | 	add	arg01, #24
248a8     09 03 02 FB | 	rdlong	_var02, arg01
248ac     01 01 02 F1 | 	add	_var01, _var02
248b0     0C 12 86 F1 | 	sub	arg01, #12
248b4     09 05 02 FB | 	rdlong	_var03, arg01
248b8     02 01 82 F1 | 	sub	_var01, _var03
248bc     00 00 56 F2 | 	cmps	_var01, #0 wc
248c0                 | '                         return 1;
248c0     01 FA 05 C6 |  if_b	mov	result1, #1
248c4     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
248c8                 | '                 return 0;
248c8     00 FA 05 F6 | 	mov	result1, #0
248cc     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
248d0                 | LR__4020
248d0     10 12 06 F1 | 	add	arg01, #16
248d4     09 01 02 FB | 	rdlong	_var01, arg01
248d8     10 12 86 F1 | 	sub	arg01, #16
248dc     0A 00 0E F2 | 	cmp	_var01, #10 wz
248e0     28 00 90 5D |  if_ne	jmp	#LR__4021
248e4     18 12 06 F1 | 	add	arg01, #24
248e8     09 01 02 FB | 	rdlong	_var01, arg01
248ec     0C 12 86 F1 | 	sub	arg01, #12
248f0     09 07 02 FB | 	rdlong	_var04, arg01
248f4     03 01 82 F1 | 	sub	_var01, _var04
248f8     00 00 56 F2 | 	cmps	_var01, #0 wc
248fc                 | '                         return 0;
248fc     00 FA 05 C6 |  if_b	mov	result1, #0
24900     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
24904                 | '                 return 1;
24904     01 FA 05 F6 | 	mov	result1, #1
24908     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2490c                 | LR__4021
2490c                 | '         }
2490c                 | ' 
2490c                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
2490c     00 00 06 F6 | 	mov	_var01, #0
24910     10 12 06 F1 | 	add	arg01, #16
24914     09 03 02 FB | 	rdlong	_var02, arg01
24918     10 12 86 F1 | 	sub	arg01, #16
2491c     03 02 56 F2 | 	cmps	_var02, #3 wc
24920     10 00 90 CD |  if_b	jmp	#LR__4022
24924     10 12 06 F1 | 	add	arg01, #16
24928     09 05 02 FB | 	rdlong	_var03, arg01
2492c     0A 04 56 F2 | 	cmps	_var03, #10 wc
24930     01 00 06 C6 |  if_b	mov	_var01, #1
24934                 | LR__4022
24934     00 FB 01 F6 | 	mov	result1, _var01
24938                 | _fatfs_cc___indst_ret
24938     2D 00 64 FD | 	ret
2493c                 | 
2493c                 | ' 	
2493c                 | ' 	FUNCTION pfunc(c as integer) as integer
2493c                 | ___strs_cl_pfunc
2493c                 | ' 		if (i < 16) then
2493c     04 E4 05 F1 | 	add	objptr, #4
24940     F2 FA 01 FB | 	rdlong	result1, objptr
24944     04 E4 85 F1 | 	sub	objptr, #4
24948     10 FA 55 F2 | 	cmps	result1, #16 wc
2494c     2C 00 90 3D |  if_ae	jmp	#LR__4030
24950     F2 FA 01 FB | 	rdlong	result1, objptr
24954     04 E4 05 F1 | 	add	objptr, #4
24958     F2 00 02 FB | 	rdlong	_var01, objptr
2495c     FD 00 02 F1 | 	add	_var01, result1
24960     00 13 42 FC | 	wrbyte	arg01, _var01
24964     F2 FA 01 FB | 	rdlong	result1, objptr
24968     01 FA 05 F1 | 	add	result1, #1
2496c     F2 FA 61 FC | 	wrlong	result1, objptr
24970     04 E4 85 F1 | 	sub	objptr, #4
24974                 | ' 			p(i) = c
24974                 | ' 			i = i+1
24974                 | ' 			return 1
24974     01 FA 05 F6 | 	mov	result1, #1
24978     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
2497c                 | LR__4030
2497c                 | ' 			return -1
2497c     01 FA 65 F6 | 	neg	result1, #1
24980                 | ___strs_cl_pfunc_ret
24980     2D 00 64 FD | 	ret
24984                 | 
24984                 | __struct__s_vfs_file_t_putchar
24984     04 4A 05 F6 | 	mov	COUNT_, #4
24988     A8 00 A0 FD | 	call	#pushregs_
2498c     1C E4 05 F1 | 	add	objptr, #28
24990     F2 1E 0A FB | 	rdlong	local01, objptr wz
24994     1C E4 85 F1 | 	sub	objptr, #28
24998     00 FA 05 A6 |  if_e	mov	result1, #0
2499c     48 00 90 AD |  if_e	jmp	#LR__4040
249a0     1C E4 05 F1 | 	add	objptr, #28
249a4     F2 20 02 FB | 	rdlong	local02, objptr
249a8     10 23 02 F6 | 	mov	local03, local02
249ac     1C E4 85 F1 | 	sub	objptr, #28
249b0     13 22 46 F7 | 	zerox	local03, #19
249b4     14 20 46 F0 | 	shr	local02, #20
249b8     02 20 66 F0 | 	shl	local02, #2
249bc     ED 20 02 F1 | 	add	local02, __methods__
249c0     10 21 02 FB | 	rdlong	local02, local02
249c4     F2 14 02 F6 | 	mov	arg02, objptr
249c8     F2 24 02 F6 | 	mov	local04, objptr
249cc     11 E5 01 F6 | 	mov	objptr, local03
249d0     2D 20 62 FD | 	call	local02
249d4     12 E5 01 F6 | 	mov	objptr, local04
249d8                 | '     return (i < 0) ? 0 : 1;
249d8     00 FA 55 F2 | 	cmps	result1, #0 wc
249dc     00 1E 06 C6 |  if_b	mov	local01, #0
249e0     01 1E 06 36 |  if_ae	mov	local01, #1
249e4     0F FB 01 F6 | 	mov	result1, local01
249e8                 | LR__4040
249e8     A7 F0 03 F6 | 	mov	ptra, fp
249ec     B2 00 A0 FD | 	call	#popregs_
249f0                 | __struct__s_vfs_file_t_putchar_ret
249f0     2D 00 64 FD | 	ret
249f4                 | 
249f4                 | __struct__s_vfs_file_t_getchar
249f4     03 4A 05 F6 | 	mov	COUNT_, #3
249f8     A8 00 A0 FD | 	call	#pushregs_
249fc     20 E4 05 F1 | 	add	objptr, #32
24a00     F2 12 0A FB | 	rdlong	arg01, objptr wz
24a04     20 E4 85 F1 | 	sub	objptr, #32
24a08     01 FA 65 A6 |  if_e	neg	result1, #1
24a0c     38 00 90 AD |  if_e	jmp	#LR__4050
24a10                 | '     return getcf(__this);
24a10     20 E4 05 F1 | 	add	objptr, #32
24a14     F2 1E 02 FB | 	rdlong	local01, objptr
24a18     0F 21 02 F6 | 	mov	local02, local01
24a1c     20 E4 85 F1 | 	sub	objptr, #32
24a20     13 20 46 F7 | 	zerox	local02, #19
24a24     14 1E 46 F0 | 	shr	local01, #20
24a28     02 1E 66 F0 | 	shl	local01, #2
24a2c     ED 1E 02 F1 | 	add	local01, __methods__
24a30     0F 1F 02 FB | 	rdlong	local01, local01
24a34     F2 12 02 F6 | 	mov	arg01, objptr
24a38     F2 22 02 F6 | 	mov	local03, objptr
24a3c     10 E5 01 F6 | 	mov	objptr, local02
24a40     2D 1E 62 FD | 	call	local01
24a44     11 E5 01 F6 | 	mov	objptr, local03
24a48                 | LR__4050
24a48     A7 F0 03 F6 | 	mov	ptra, fp
24a4c     B2 00 A0 FD | 	call	#popregs_
24a50                 | __struct__s_vfs_file_t_getchar_ret
24a50     2D 00 64 FD | 	ret
24a54                 | 
24a54                 | __struct___bas_wrap_sender_tx
24a54     03 4A 05 F6 | 	mov	COUNT_, #3
24a58     A8 00 A0 FD | 	call	#pushregs_
24a5c     F2 1E 02 FB | 	rdlong	local01, objptr
24a60     0F 21 02 F6 | 	mov	local02, local01
24a64     13 1E 46 F7 | 	zerox	local01, #19
24a68     14 20 46 F0 | 	shr	local02, #20
24a6c     02 20 66 F0 | 	shl	local02, #2
24a70     ED 20 02 F1 | 	add	local02, __methods__
24a74     10 21 02 FB | 	rdlong	local02, local02
24a78     F2 22 02 F6 | 	mov	local03, objptr
24a7c     0F E5 01 F6 | 	mov	objptr, local01
24a80     2D 20 62 FD | 	call	local02
24a84     11 E5 01 F6 | 	mov	objptr, local03
24a88     01 FA 05 F6 | 	mov	result1, #1
24a8c     A7 F0 03 F6 | 	mov	ptra, fp
24a90     B2 00 A0 FD | 	call	#popregs_
24a94                 | __struct___bas_wrap_sender_tx_ret
24a94     2D 00 64 FD | 	ret
24a98                 | 
24a98                 | __struct___bas_wrap_sender_rx
24a98     03 4A 05 F6 | 	mov	COUNT_, #3
24a9c     A8 00 A0 FD | 	call	#pushregs_
24aa0     04 E4 05 F1 | 	add	objptr, #4
24aa4     F2 1E 02 FB | 	rdlong	local01, objptr
24aa8     0F 21 02 F6 | 	mov	local02, local01
24aac     04 E4 85 F1 | 	sub	objptr, #4
24ab0     13 20 46 F7 | 	zerox	local02, #19
24ab4     14 1E 46 F0 | 	shr	local01, #20
24ab8     02 1E 66 F0 | 	shl	local01, #2
24abc     ED 1E 02 F1 | 	add	local01, __methods__
24ac0     0F 1F 02 FB | 	rdlong	local01, local01
24ac4     F2 22 02 F6 | 	mov	local03, objptr
24ac8     10 E5 01 F6 | 	mov	objptr, local02
24acc     2D 1E 62 FD | 	call	local01
24ad0     11 E5 01 F6 | 	mov	objptr, local03
24ad4     A7 F0 03 F6 | 	mov	ptra, fp
24ad8     B2 00 A0 FD | 	call	#popregs_
24adc                 | __struct___bas_wrap_sender_rx_ret
24adc     2D 00 64 FD | 	ret
24ae0                 | 
24ae0                 | __struct___bas_wrap_sender_close
24ae0     03 4A 05 F6 | 	mov	COUNT_, #3
24ae4     A8 00 A0 FD | 	call	#pushregs_
24ae8     08 E4 05 F1 | 	add	objptr, #8
24aec     F2 1E 02 FB | 	rdlong	local01, objptr
24af0     0F 21 02 F6 | 	mov	local02, local01
24af4     08 E4 85 F1 | 	sub	objptr, #8
24af8     13 20 46 F7 | 	zerox	local02, #19
24afc     14 1E 46 F0 | 	shr	local01, #20
24b00     02 1E 66 F0 | 	shl	local01, #2
24b04     ED 1E 02 F1 | 	add	local01, __methods__
24b08     0F 1F 02 FB | 	rdlong	local01, local01
24b0c     F2 22 02 F6 | 	mov	local03, objptr
24b10     10 E5 01 F6 | 	mov	objptr, local02
24b14     2D 1E 62 FD | 	call	local01
24b18     11 E5 01 F6 | 	mov	objptr, local03
24b1c     A7 F0 03 F6 | 	mov	ptra, fp
24b20     B2 00 A0 FD | 	call	#popregs_
24b24                 | __struct___bas_wrap_sender_close_ret
24b24     2D 00 64 FD | 	ret
24b28                 | 
24b28                 | LR__4060
24b28     2F          | 	byte	"/"
24b29     00          | 	byte	0
24b2a                 | LR__4061
24b2a     69 6E 66    | 	byte	"inf"
24b2d     00          | 	byte	0
24b2e                 | LR__4062
24b2e     6E 61 6E    | 	byte	"nan"
24b31     00          | 	byte	0
24b32                 | LR__4063
24b32                 | 	byte	
24b32     00          | 	byte	0
24b33                 | LR__4064
24b33                 | 	byte	
24b33     00          | 	byte	0
24b34                 | LR__4065
24b34                 | 	byte	
24b34     00          | 	byte	0
24b35                 | LR__4066
24b35                 | 	byte	
24b35     00          | 	byte	0
24b36                 | LR__4067
24b36                 | 	byte	
24b36     00          | 	byte	0
24b37                 | LR__4068
24b37                 | 	byte	
24b37     00          | 	byte	0
24b38                 | LR__4069
24b38                 | 	byte	
24b38     00          | 	byte	0
24b39                 | LR__4070
24b39                 | 	byte	
24b39     00          | 	byte	0
24b3a                 | LR__4071
24b3a     00          | 	byte	0
24b3b     00          | 	byte	0
24b3c                 | LR__4072
24b3c     00          | 	byte	0
24b3d     00          | 	byte	0
24b3e                 | LR__4073
24b3e     00          | 	byte	0
24b3f     00          | 	byte	0
24b40                 | LR__4074
24b40     20 21 21 21 
24b44     20 63 6F 72 
24b48     72 75 70 74 
24b4c     65 64 20 68 
24b50     65 61 70 3F 
24b54     3F 3F 20 21 
24b58     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
24b5b     00          | 	byte	0
24b5c                 | LR__4075
24b5c     20 21 21 21 
24b60     20 6F 75 74 
24b64     20 6F 66 20 
24b68     68 65 61 70 
24b6c     20 6D 65 6D 
24b70     6F 72 79 20 
24b74     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
24b78     00          | 	byte	0
24b79                 | LR__4076
24b79     20 21 21 21 
24b7d     20 63 6F 72 
24b81     72 75 70 74 
24b85     65 64 20 68 
24b89     65 61 70 20 
24b8d     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
24b91     00          | 	byte	0
24b92                 | LR__4077
24b92     00          | 	byte	0
24b93     00          | 	byte	0
24b94                 | LR__4078
24b94     2E          | 	byte	"."
24b95     00          | 	byte	0
24b96                 | LR__4079
24b96     00          | 	byte	0
24b97     00          | 	byte	0
24b98                 | LR__4080
24b98     00          | 	byte	0
24b99     00          | 	byte	0
24b9a                 | LR__4081
24b9a     00          | 	byte	0
24b9b     00          | 	byte	0
24b9c                 | LR__4082
24b9c     2A 3A 3C 3E 
24ba0     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
24ba4     00          | 	byte	0
24ba5                 | LR__4083
24ba5     2B 2C 3B 3D 
24ba9     5B 5D       | 	byte	"+,;=[]"
24bab     00          | 	byte	0
24bac                 | LR__4084
24bac     46 41 54 33 
24bb0     32 20 20 20 | 	byte	"FAT32   "
24bb4     00          | 	byte	0
24bb5                 | LR__4085
24bb5     54 5A       | 	byte	"TZ"
24bb7     00          | 	byte	0
24bb8                 | LR__4086
24bb8     00          | 	byte	0
24bb9     00          | 	byte	0
24bba                 | LR__4087
24bba                 | 	byte	
24bba     00          | 	byte	0
24bbb                 | LR__4088
24bbb                 | 	byte	
24bbb     00          | 	byte	0
24bbc                 | LR__4089
24bbc     22          | 	byte	34
24bbd     00          | 	byte	0
24bbe                 | LR__4090
24bbe     22          | 	byte	34
24bbf     00          | 	byte	0
24bc0                 | LR__4091
24bc0     3A          | 	byte	":"
24bc1     00          | 	byte	0
24bc2                 | LR__4092
24bc2                 | 	byte	
24bc2     00          | 	byte	0
24bc3                 | LR__4093
24bc3                 | 	byte	
24bc3     00          | 	byte	0
24bc4                 | LR__4094
24bc4                 | 	byte	
24bc4     00          | 	byte	0
24bc5                 | LR__4095
24bc5                 | 	byte	
24bc5     00          | 	byte	0
24bc6                 | LR__4096
24bc6                 | 	byte	
24bc6     00          | 	byte	0
24bc7                 | LR__4097
24bc7                 | 	byte	
24bc7     00          | 	byte	0
24bc8                 | LR__4098
24bc8                 | 	byte	
24bc8     00          | 	byte	0
24bc9                 | LR__4099
24bc9     22          | 	byte	34
24bca     00          | 	byte	0
24bcb                 | LR__4100
24bcb     22          | 	byte	34
24bcc     00          | 	byte	0
24bcd                 | LR__4101
24bcd     22          | 	byte	34
24bce     00          | 	byte	0
24bcf                 | LR__4102
24bcf     22          | 	byte	34
24bd0     00          | 	byte	0
24bd1                 | LR__4103
24bd1     22          | 	byte	34
24bd2     00          | 	byte	0
24bd3                 | LR__4104
24bd3     3E          | 	byte	">"
24bd4     00          | 	byte	0
24bd5                 | LR__4105
24bd5     3E          | 	byte	">"
24bd6     00          | 	byte	0
24bd7                 | LR__4106
24bd7     2B          | 	byte	"+"
24bd8     00          | 	byte	0
24bd9                 | LR__4107
24bd9     2D          | 	byte	"-"
24bda     00          | 	byte	0
24bdb                 | LR__4108
24bdb     2A          | 	byte	"*"
24bdc     00          | 	byte	0
24bdd                 | LR__4109
24bdd     2F          | 	byte	"/"
24bde     00          | 	byte	0
24bdf                 | LR__4110
24bdf     5E          | 	byte	"^"
24be0     00          | 	byte	0
24be1                 | LR__4111
24be1     3D          | 	byte	"="
24be2     00          | 	byte	0
24be3                 | LR__4112
24be3     2B          | 	byte	"+"
24be4     00          | 	byte	0
24be5                 | LR__4113
24be5     2B          | 	byte	"+"
24be6     00          | 	byte	0
24be7                 | LR__4114
24be7     2D          | 	byte	"-"
24be8     00          | 	byte	0
24be9                 | LR__4115
24be9     2D          | 	byte	"-"
24bea     00          | 	byte	0
24beb                 | LR__4116
24beb     3C          | 	byte	"<"
24bec     00          | 	byte	0
24bed                 | LR__4117
24bed     3E          | 	byte	">"
24bee     00          | 	byte	0
24bef                 | LR__4118
24bef     22          | 	byte	34
24bf0     00          | 	byte	0
24bf1                 | LR__4119
24bf1     22          | 	byte	34
24bf2     00          | 	byte	0
24bf3                 | LR__4120
24bf3                 | 	byte	
24bf3     00          | 	byte	0
24bf4                 | LR__4121
24bf4     6C 6F 61 64 | 	byte	"load"
24bf8     00          | 	byte	0
24bf9                 | LR__4122
24bf9     73 61 76 65 | 	byte	"save"
24bfd     00          | 	byte	0
24bfe                 | LR__4123
24bfe     62 72 75 6E | 	byte	"brun"
24c02     00          | 	byte	0
24c03                 | LR__4124
24c03     6D 6F 75 73 
24c07     65          | 	byte	"mouse"
24c08     00          | 	byte	0
24c09                 | LR__4125
24c09     63 75 72 73 
24c0d     6F 72       | 	byte	"cursor"
24c0f     00          | 	byte	0
24c10                 | LR__4126
24c10     63 6C 69 63 
24c14     6B          | 	byte	"click"
24c15     00          | 	byte	0
24c16                 | LR__4127
24c16     6F 6E       | 	byte	"on"
24c18     00          | 	byte	0
24c19                 | LR__4128
24c19     31          | 	byte	"1"
24c1a     00          | 	byte	0
24c1b                 | LR__4129
24c1b     6F 66 66    | 	byte	"off"
24c1e     00          | 	byte	0
24c1f                 | LR__4130
24c1f     30          | 	byte	"0"
24c20     00          | 	byte	0
24c21                 | LR__4131
24c21                 | 	byte	
24c21     00          | 	byte	0
24c22                 | LR__4132
24c22                 | 	byte	
24c22     00          | 	byte	0
24c23                 | LR__4133
24c23                 | 	byte	
24c23     00          | 	byte	0
24c24                 | LR__4134
24c24                 | 	byte	
24c24     00          | 	byte	0
24c25                 | LR__4135
24c25     20 55 73 65 
24c29     72 20 66 75 
24c2d     6E 63 74 69 
24c31     6F 6E 73 20 
24c35     61 6E 64 20 
24c39     61 72 72 61 
24c3d     79 73 20 6E 
24c41     6F 74 20 79 
24c45     65 74 20 69 
24c49     6D 70 6C 65 
24c4d     6D 65 6E 74 
24c51     65 64       | 	byte	" User functions and arrays not yet implemented"
24c53     00          | 	byte	0
24c54                 | LR__4136
24c54                 | 	byte	
24c54     00          | 	byte	0
24c55                 | LR__4137
24c55                 | 	byte	
24c55     00          | 	byte	0
24c56                 | LR__4138
24c56     52 65 61 64 
24c5a     79          | 	byte	"Ready"
24c5b     00          | 	byte	0
24c5c                 | LR__4139
24c5c     2B          | 	byte	"+"
24c5d     00          | 	byte	0
24c5e                 | LR__4140
24c5e     2D          | 	byte	"-"
24c5f     00          | 	byte	0
24c60                 | LR__4141
24c60     6F 72       | 	byte	"or"
24c62     00          | 	byte	0
24c63                 | LR__4142
24c63     78 6F 72    | 	byte	"xor"
24c66     00          | 	byte	0
24c67                 | LR__4143
24c67     2A          | 	byte	"*"
24c68     00          | 	byte	0
24c69                 | LR__4144
24c69     2F          | 	byte	"/"
24c6a     00          | 	byte	0
24c6b                 | LR__4145
24c6b     61 6E 64    | 	byte	"and"
24c6e     00          | 	byte	0
24c6f                 | LR__4146
24c6f     64 69 76    | 	byte	"div"
24c72     00          | 	byte	0
24c73                 | LR__4147
24c73     6D 6F 64    | 	byte	"mod"
24c76     00          | 	byte	0
24c77                 | LR__4148
24c77     73 68 6C    | 	byte	"shl"
24c7a     00          | 	byte	0
24c7b                 | LR__4149
24c7b     73 68 72    | 	byte	"shr"
24c7e     00          | 	byte	0
24c7f                 | LR__4150
24c7f     5E          | 	byte	"^"
24c80     00          | 	byte	0
24c81                 | LR__4151
24c81     6E 6F 74    | 	byte	"not"
24c84     00          | 	byte	0
24c85                 | LR__4152
24c85     40          | 	byte	"@"
24c86     00          | 	byte	0
24c87                 | LR__4153
24c87     3D          | 	byte	"="
24c88     00          | 	byte	0
24c89                 | LR__4154
24c89     3E 3D       | 	byte	">="
24c8b     00          | 	byte	0
24c8c                 | LR__4155
24c8c     3C 3D       | 	byte	"<="
24c8e     00          | 	byte	0
24c8f                 | LR__4156
24c8f     3C          | 	byte	"<"
24c90     00          | 	byte	0
24c91                 | LR__4157
24c91     3E          | 	byte	">"
24c92     00          | 	byte	0
24c93                 | LR__4158
24c93     3C 3E       | 	byte	"<>"
24c95     00          | 	byte	0
24c96                 | LR__4159
24c96     2B 2B       | 	byte	"++"
24c98     00          | 	byte	0
24c99                 | LR__4160
24c99     2D 2D       | 	byte	"--"
24c9b     00          | 	byte	0
24c9c                 | LR__4161
24c9c     2B          | 	byte	"+"
24c9d     00          | 	byte	0
24c9e                 | LR__4162
24c9e     2D          | 	byte	"-"
24c9f     00          | 	byte	0
24ca0                 | LR__4163
24ca0     3D          | 	byte	"="
24ca1     00          | 	byte	0
24ca2                 | LR__4164
24ca2     2C          | 	byte	","
24ca3     00          | 	byte	0
24ca4                 | LR__4165
24ca4     2A          | 	byte	"*"
24ca5     00          | 	byte	0
24ca6                 | LR__4166
24ca6     2F          | 	byte	"/"
24ca7     00          | 	byte	0
24ca8                 | LR__4167
24ca8     3B          | 	byte	";"
24ca9     00          | 	byte	0
24caa                 | LR__4168
24caa     22          | 	byte	34
24cab     00          | 	byte	0
24cac                 | LR__4169
24cac     5E          | 	byte	"^"
24cad     00          | 	byte	0
24cae                 | LR__4170
24cae     29          | 	byte	")"
24caf     00          | 	byte	0
24cb0                 | LR__4171
24cb0     28          | 	byte	"("
24cb1     00          | 	byte	0
24cb2                 | LR__4172
24cb2     3A          | 	byte	":"
24cb3     00          | 	byte	0
24cb4                 | LR__4173
24cb4     20          | 	byte	" "
24cb5     00          | 	byte	0
24cb6                 | LR__4174
24cb6     3E          | 	byte	">"
24cb7     00          | 	byte	0
24cb8                 | LR__4175
24cb8     3C          | 	byte	"<"
24cb9     00          | 	byte	0
24cba                 | LR__4176
24cba     3D          | 	byte	"="
24cbb     00          | 	byte	0
24cbc                 | LR__4177
24cbc     63 6C 73    | 	byte	"cls"
24cbf     00          | 	byte	0
24cc0                 | LR__4178
24cc0     6E 65 77    | 	byte	"new"
24cc3     00          | 	byte	0
24cc4                 | LR__4179
24cc4     70 6C 6F 74 | 	byte	"plot"
24cc8     00          | 	byte	0
24cc9                 | LR__4180
24cc9     64 72 61 77 | 	byte	"draw"
24ccd     00          | 	byte	0
24cce                 | LR__4181
24cce     70 72 69 6E 
24cd2     74          | 	byte	"print"
24cd3     00          | 	byte	0
24cd4                 | LR__4182
24cd4     63 69 72 63 
24cd8     6C 65       | 	byte	"circle"
24cda     00          | 	byte	0
24cdb                 | LR__4183
24cdb     66 63 69 72 
24cdf     63 6C 65    | 	byte	"fcircle"
24ce2     00          | 	byte	0
24ce3                 | LR__4184
24ce3     62 6F 78    | 	byte	"box"
24ce6     00          | 	byte	0
24ce7                 | LR__4185
24ce7     66 72 61 6D 
24ceb     65          | 	byte	"frame"
24cec     00          | 	byte	0
24ced                 | LR__4186
24ced     63 6F 6C 6F 
24cf1     72          | 	byte	"color"
24cf2     00          | 	byte	0
24cf3                 | LR__4187
24cf3     70 72 69 6E 
24cf7     74          | 	byte	"print"
24cf8     00          | 	byte	0
24cf9                 | LR__4188
24cf9     6C 69 73 74 | 	byte	"list"
24cfd     00          | 	byte	0
24cfe                 | LR__4189
24cfe     72 75 6E    | 	byte	"run"
24d01     00          | 	byte	0
24d02                 | LR__4190
24d02     67 6F 74 6F | 	byte	"goto"
24d06     00          | 	byte	0
24d07                 | LR__4191
24d07     63 73 61 76 
24d0b     65          | 	byte	"csave"
24d0c     00          | 	byte	0
24d0d                 | LR__4192
24d0d     73 61 76 65 | 	byte	"save"
24d11     00          | 	byte	0
24d12                 | LR__4193
24d12     6C 6F 61 64 | 	byte	"load"
24d16     00          | 	byte	0
24d17                 | LR__4194
24d17     62 72 75 6E | 	byte	"brun"
24d1b     00          | 	byte	0
24d1c                 | LR__4195
24d1c     70 69 6E 77 
24d20     72 69 74 65 | 	byte	"pinwrite"
24d24     00          | 	byte	0
24d25                 | LR__4196
24d25     77 61 69 74 
24d29     6D 73       | 	byte	"waitms"
24d2b     00          | 	byte	0
24d2c                 | LR__4197
24d2c     77 61 69 74 
24d30     76 62 6C    | 	byte	"waitvbl"
24d33     00          | 	byte	0
24d34                 | LR__4198
24d34     69 66       | 	byte	"if"
24d36     00          | 	byte	0
24d37                 | LR__4199
24d37     65 6C 73 65 | 	byte	"else"
24d3b     00          | 	byte	0
24d3c                 | LR__4200
24d3c     74 68 65 6E | 	byte	"then"
24d40     00          | 	byte	0
24d41                 | LR__4201
24d41     62 65 65 70 | 	byte	"beep"
24d45     00          | 	byte	0
24d46                 | LR__4202
24d46     64 69 72    | 	byte	"dir"
24d49     00          | 	byte	0
24d4a                 | LR__4203
24d4a     66 6F 72    | 	byte	"for"
24d4d     00          | 	byte	0
24d4e                 | LR__4204
24d4e     6E 65 78 74 | 	byte	"next"
24d52     00          | 	byte	0
24d53                 | LR__4205
24d53     70 61 70 65 
24d57     72          | 	byte	"paper"
24d58     00          | 	byte	0
24d59                 | LR__4206
24d59     69 6E 6B    | 	byte	"ink"
24d5c     00          | 	byte	0
24d5d                 | LR__4207
24d5d     66 6F 6E 74 | 	byte	"font"
24d61     00          | 	byte	0
24d62                 | LR__4208
24d62     6D 6F 64 65 | 	byte	"mode"
24d66     00          | 	byte	0
24d67                 | LR__4209
24d67     6D 6F 75 73 
24d6b     65          | 	byte	"mouse"
24d6c     00          | 	byte	0
24d6d                 | LR__4210
24d6d     63 75 72 73 
24d71     6F 72       | 	byte	"cursor"
24d73     00          | 	byte	0
24d74                 | LR__4211
24d74     63 6C 69 63 
24d78     6B          | 	byte	"click"
24d79     00          | 	byte	0
24d7a                 | LR__4212
24d7a     64 65 66 73 
24d7e     70 72 69 74 
24d82     65          | 	byte	"defsprite"
24d83     00          | 	byte	0
24d84                 | LR__4213
24d84     73 70 72 69 
24d88     74 65       | 	byte	"sprite"
24d8a     00          | 	byte	0
24d8b                 | LR__4214
24d8b     77 61 69 74 
24d8f     63 6C 6F 63 
24d93     6B          | 	byte	"waitclock"
24d94     00          | 	byte	0
24d95                 | LR__4215
24d95     66 69 6C 6C | 	byte	"fill"
24d99     00          | 	byte	0
24d9a                 | LR__4216
24d9a     64 69 6D    | 	byte	"dim"
24d9d     00          | 	byte	0
24d9e                 | LR__4217
24d9e     77 72 70 69 
24da2     6E          | 	byte	"wrpin"
24da3     00          | 	byte	0
24da4                 | LR__4218
24da4     77 78 70 69 
24da8     6E          | 	byte	"wxpin"
24da9     00          | 	byte	0
24daa                 | LR__4219
24daa     77 79 70 69 
24dae     6E          | 	byte	"wypin"
24daf     00          | 	byte	0
24db0                 | LR__4220
24db0     70 69 6E 66 
24db4     6C 6F 61 74 | 	byte	"pinfloat"
24db8     00          | 	byte	0
24db9                 | LR__4221
24db9     70 69 6E 6C 
24dbd     6F          | 	byte	"pinlo"
24dbe     00          | 	byte	0
24dbf                 | LR__4222
24dbf     70 69 6E 68 
24dc3     69          | 	byte	"pinhi"
24dc4     00          | 	byte	0
24dc5                 | LR__4223
24dc5     70 69 6E 73 
24dc9     74 61 72 74 | 	byte	"pinstart"
24dcd     00          | 	byte	0
24dce                 | LR__4224
24dce     70 69 6E 74 
24dd2     6F 67 67 6C 
24dd6     65          | 	byte	"pintoggle"
24dd7     00          | 	byte	0
24dd8                 | LR__4225
24dd8     70 6F 73 69 
24ddc     74 69 6F 6E | 	byte	"position"
24de0     00          | 	byte	0
24de1                 | LR__4226
24de1     72 6E 64    | 	byte	"rnd"
24de4     00          | 	byte	0
24de5                 | LR__4227
24de5     6D 6F 75 73 
24de9     65 78       | 	byte	"mousex"
24deb     00          | 	byte	0
24dec                 | LR__4228
24dec     6D 6F 75 73 
24df0     65 79       | 	byte	"mousey"
24df2     00          | 	byte	0
24df3                 | LR__4229
24df3     6D 6F 75 73 
24df7     65 6B       | 	byte	"mousek"
24df9     00          | 	byte	0
24dfa                 | LR__4230
24dfa     6D 6F 75 73 
24dfe     65 77       | 	byte	"mousew"
24e00     00          | 	byte	0
24e01                 | LR__4231
24e01     67 65 74 74 
24e05     69 6D 65    | 	byte	"gettime"
24e08     00          | 	byte	0
24e09                 | LR__4232
24e09     73 69 6E    | 	byte	"sin"
24e0c     00          | 	byte	0
24e0d                 | LR__4233
24e0d     73 74 69 63 
24e11     6B          | 	byte	"stick"
24e12     00          | 	byte	0
24e13                 | LR__4234
24e13     73 74 72 69 
24e17     67          | 	byte	"strig"
24e18     00          | 	byte	0
24e19                 | LR__4235
24e19     67 65 74 70 
24e1d     69 78 65 6C | 	byte	"getpixel"
24e21     00          | 	byte	0
24e22                 | LR__4236
24e22     72 64 70 69 
24e26     6E          | 	byte	"rdpin"
24e27     00          | 	byte	0
24e28                 | LR__4237
24e28     70 69 6E 72 
24e2c     65 61 64    | 	byte	"pinread"
24e2f     00          | 	byte	0
24e30                 | LR__4238
24e30     72 71 70 69 
24e34     6E          | 	byte	"rqpin"
24e35     00          | 	byte	0
24e36                 | LR__4239
24e36     61          | 	byte	"a"
24e37     00          | 	byte	0
24e38                 | LR__4240
24e38     7A          | 	byte	"z"
24e39     00          | 	byte	0
24e3a                 | LR__4241
24e3a     5F          | 	byte	"_"
24e3b     00          | 	byte	0
24e3c                 | LR__4242
24e3c     61          | 	byte	"a"
24e3d     00          | 	byte	0
24e3e                 | LR__4243
24e3e     7A          | 	byte	"z"
24e3f     00          | 	byte	0
24e40                 | LR__4244
24e40     30          | 	byte	"0"
24e41     00          | 	byte	0
24e42                 | LR__4245
24e42     39          | 	byte	"9"
24e43     00          | 	byte	0
24e44                 | LR__4246
24e44     5F          | 	byte	"_"
24e45     00          | 	byte	0
24e46                 | LR__4247
24e46     2E          | 	byte	"."
24e47     00          | 	byte	0
24e48                 | LR__4248
24e48     61          | 	byte	"a"
24e49     00          | 	byte	0
24e4a                 | LR__4249
24e4a     7A          | 	byte	"z"
24e4b     00          | 	byte	0
24e4c                 | LR__4250
24e4c     30          | 	byte	"0"
24e4d     00          | 	byte	0
24e4e                 | LR__4251
24e4e     39          | 	byte	"9"
24e4f     00          | 	byte	0
24e50                 | LR__4252
24e50     5F          | 	byte	"_"
24e51     00          | 	byte	0
24e52                 | LR__4253
24e52     24          | 	byte	"$"
24e53     00          | 	byte	0
24e54                 | LR__4254
24e54     25          | 	byte	"%"
24e55     00          | 	byte	0
24e56                 | LR__4255
24e56     21          | 	byte	"!"
24e57     00          | 	byte	0
24e58                 | LR__4256
24e58     30          | 	byte	"0"
24e59     00          | 	byte	0
24e5a                 | LR__4257
24e5a     39          | 	byte	"9"
24e5b     00          | 	byte	0
24e5c                 | LR__4258
24e5c     2E          | 	byte	"."
24e5d     00          | 	byte	0
24e5e                 | LR__4259
24e5e     24          | 	byte	"$"
24e5f     00          | 	byte	0
24e60                 | LR__4260
24e60     25          | 	byte	"%"
24e61     00          | 	byte	0
24e62                 | LR__4261
24e62     2D          | 	byte	"-"
24e63     00          | 	byte	0
24e64                 | LR__4262
24e64     2E          | 	byte	"."
24e65     00          | 	byte	0
24e66                 | LR__4263
24e66     30          | 	byte	"0"
24e67     00          | 	byte	0
24e68                 | LR__4264
24e68     39          | 	byte	"9"
24e69     00          | 	byte	0
24e6a                 | LR__4265
24e6a     5F          | 	byte	"_"
24e6b     00          | 	byte	0
24e6c                 | LR__4266
24e6c     2E          | 	byte	"."
24e6d     00          | 	byte	0
24e6e                 | LR__4267
24e6e     45          | 	byte	"E"
24e6f     00          | 	byte	0
24e70                 | LR__4268
24e70     65          | 	byte	"e"
24e71     00          | 	byte	0
24e72                 | LR__4269
24e72     2D          | 	byte	"-"
24e73     00          | 	byte	0
24e74                 | LR__4270
24e74     2D          | 	byte	"-"
24e75     00          | 	byte	0
24e76                 | LR__4271
24e76     65          | 	byte	"e"
24e77     00          | 	byte	0
24e78                 | LR__4272
24e78     2E          | 	byte	"."
24e79     00          | 	byte	0
24e7a                 | LR__4273
24e7a     45          | 	byte	"E"
24e7b     00          | 	byte	0
24e7c                 | LR__4274
24e7c     65          | 	byte	"e"
24e7d     00          | 	byte	0
24e7e                 | LR__4275
24e7e     30          | 	byte	"0"
24e7f     00          | 	byte	0
24e80                 | LR__4276
24e80     39          | 	byte	"9"
24e81     00          | 	byte	0
24e82                 | LR__4277
24e82     24          | 	byte	"$"
24e83     00          | 	byte	0
24e84                 | LR__4278
24e84     25          | 	byte	"%"
24e85     00          | 	byte	0
24e86                 | LR__4279
24e86     2D          | 	byte	"-"
24e87     00          | 	byte	0
24e88                 | LR__4280
24e88     30          | 	byte	"0"
24e89     00          | 	byte	0
24e8a                 | LR__4281
24e8a     39          | 	byte	"9"
24e8b     00          | 	byte	0
24e8c                 | LR__4282
24e8c     5F          | 	byte	"_"
24e8d     00          | 	byte	0
24e8e                 | LR__4283
24e8e     30          | 	byte	"0"
24e8f     00          | 	byte	0
24e90                 | LR__4284
24e90     39          | 	byte	"9"
24e91     00          | 	byte	0
24e92                 | LR__4285
24e92     5F          | 	byte	"_"
24e93     00          | 	byte	0
24e94                 | LR__4286
24e94     22          | 	byte	34
24e95     00          | 	byte	0
24e96                 | LR__4287
24e96     22          | 	byte	34
24e97     00          | 	byte	0
24e98                 | LR__4288
24e98     28          | 	byte	"("
24e99     00          | 	byte	0
24e9a                 | LR__4289
24e9a     61 73       | 	byte	"as"
24e9c     00          | 	byte	0
24e9d                 | LR__4290
24e9d     61 73       | 	byte	"as"
24e9f     00          | 	byte	0
24ea0                 | LR__4291
24ea0     2C          | 	byte	","
24ea1     00          | 	byte	0
24ea2                 | LR__4292
24ea2     29          | 	byte	")"
24ea3     00          | 	byte	0
24ea4                 | LR__4293
24ea4     29          | 	byte	")"
24ea5     00          | 	byte	0
24ea6                 | LR__4294
24ea6     61 73       | 	byte	"as"
24ea8     00          | 	byte	0
24ea9                 | LR__4295
24ea9     62 79 74 65 | 	byte	"byte"
24ead     00          | 	byte	0
24eae                 | LR__4296
24eae     75 62 79 74 
24eb2     65          | 	byte	"ubyte"
24eb3     00          | 	byte	0
24eb4                 | LR__4297
24eb4     73 68 6F 72 
24eb8     74          | 	byte	"short"
24eb9     00          | 	byte	0
24eba                 | LR__4298
24eba     75 73 68 6F 
24ebe     72 74       | 	byte	"ushort"
24ec0     00          | 	byte	0
24ec1                 | LR__4299
24ec1     6C 6F 6E 67 | 	byte	"long"
24ec5     00          | 	byte	0
24ec6                 | LR__4300
24ec6     69 6E 74 65 
24eca     67 65 72    | 	byte	"integer"
24ecd     00          | 	byte	0
24ece                 | LR__4301
24ece     75 6C 6F 6E 
24ed2     67          | 	byte	"ulong"
24ed3     00          | 	byte	0
24ed4                 | LR__4302
24ed4     69 6E 74 36 
24ed8     34          | 	byte	"int64"
24ed9     00          | 	byte	0
24eda                 | LR__4303
24eda     75 69 6E 74 
24ede     36 34       | 	byte	"uint64"
24ee0     00          | 	byte	0
24ee1                 | LR__4304
24ee1     73 69 6E 67 
24ee5     6C 65       | 	byte	"single"
24ee7     00          | 	byte	0
24ee8                 | LR__4305
24ee8     64 6F 75 62 
24eec     6C 65       | 	byte	"double"
24eee     00          | 	byte	0
24eef                 | LR__4306
24eef     73 74 72 69 
24ef3     6E 67       | 	byte	"string"
24ef5     00          | 	byte	0
24ef6                 | LR__4307
24ef6     74 6F       | 	byte	"to"
24ef8     00          | 	byte	0
24ef9                 | LR__4308
24ef9     73 74 65 70 | 	byte	"step"
24efd     00          | 	byte	0
24efe                 | LR__4309
24efe     57 65 20 68 
24f02     61 76 65 20 
24f06     61 20 73 6C 
24f0a     6F 77 20 67 
24f0e     6F 74 6F 2C 
24f12     20 74 6F 64 
24f16     6F 20 20    | 	byte	"We have a slow goto, todo  "
24f19     00          | 	byte	0
24f1a                 | LR__4310
24f1a     6E 6F 6E 61 
24f1e     6D 65 2E 62 
24f22     61 73       | 	byte	"noname.bas"
24f24     00          | 	byte	0
24f25                 | LR__4311
24f25                 | 	byte	
24f25     00          | 	byte	0
24f26                 | LR__4312
24f26     6E 6F 6E 61 
24f2a     6D 65 2E 62 
24f2e     61 73       | 	byte	"noname.bas"
24f30     00          | 	byte	0
24f31                 | LR__4313
24f31     2F          | 	byte	"/"
24f32     00          | 	byte	0
24f33                 | LR__4314
24f33                 | 	byte	
24f33     00          | 	byte	0
24f34                 | LR__4315
24f34                 | 	byte	
24f34     00          | 	byte	0
24f35                 | LR__4316
24f35     6E 6F 6E 61 
24f39     6D 65 2E 62 
24f3d     61 73       | 	byte	"noname.bas"
24f3f     00          | 	byte	0
24f40                 | LR__4317
24f40     2F          | 	byte	"/"
24f41     00          | 	byte	0
24f42                 | LR__4318
24f42     53 79 73 74 
24f46     65 6D 20 65 
24f4a     72 72 6F 72 
24f4e     20          | 	byte	"System error "
24f4f     00          | 	byte	0
24f50                 | LR__4319
24f50     3A 20       | 	byte	": "
24f52     00          | 	byte	0
24f53                 | LR__4320
24f53     2F          | 	byte	"/"
24f54     00          | 	byte	0
24f55                 | LR__4321
24f55     30          | 	byte	"0"
24f56     00          | 	byte	0
24f57                 | LR__4322
24f57     39          | 	byte	"9"
24f58     00          | 	byte	0
24f59                 | LR__4323
24f59                 | 	byte	
24f59     00          | 	byte	0
24f5a                 | LR__4324
24f5a     53 74 6F 70 
24f5e     70 65 64 20 
24f62     61 74 20 6C 
24f66     69 6E 65 20 | 	byte	"Stopped at line "
24f6a     00          | 	byte	0
24f6b                 | LR__4325
24f6b     45 72 72 6F 
24f6f     72 20       | 	byte	"Error "
24f71     00          | 	byte	0
24f72                 | LR__4326
24f72     3A 20       | 	byte	": "
24f74     00          | 	byte	0
24f75                 | LR__4327
24f75                 | 	byte	
24f75     00          | 	byte	0
24f76                 | LR__4328
24f76     72 6E 64 3A 
24f7a     20          | 	byte	"rnd: "
24f7b     00          | 	byte	0
24f7c                 | LR__4329
24f7c     72 6E 64 3A 
24f80     20          | 	byte	"rnd: "
24f81     00          | 	byte	0
24f82                 | LR__4330
24f82     73 69 6E 3A 
24f86     20          | 	byte	"sin: "
24f87     00          | 	byte	0
24f88                 | LR__4331
24f88     73 69 6E 3A 
24f8c     20          | 	byte	"sin: "
24f8d     00          | 	byte	0
24f8e                 | LR__4332
24f8e     73 74 69 63 
24f92     6B 3A 20    | 	byte	"stick: "
24f95     00          | 	byte	0
24f96                 | LR__4333
24f96     73 74 72 69 
24f9a     67 3A 20    | 	byte	"strig: "
24f9d     00          | 	byte	0
24f9e                 | LR__4334
24f9e     67 65 74 70 
24fa2     69 78 65 6C 
24fa6     3A 20       | 	byte	"getpixel: "
24fa8     00          | 	byte	0
24fa9                 | LR__4335
24fa9                 | 	byte	
24fa9     00          | 	byte	0
24faa                 | LR__4336
24faa     2F 73 64 2F 
24fae     62 61 73    | 	byte	"/sd/bas"
24fb1     00          | 	byte	0
24fb2                 | LR__4337
24fb2     57 6F 72 6B 
24fb6     69 6E 67 20 
24fba     64 69 72 65 
24fbe     63 74 6F 72 
24fc2     79 3A 20    | 	byte	"Working directory: "
24fc5     00          | 	byte	0
24fc6                 | LR__4338
24fc6     2A          | 	byte	"*"
24fc7     00          | 	byte	0
24fc8                 | LR__4339
24fc8                 | 	byte	
24fc8     00          | 	byte	0
24fc9                 | LR__4340
24fc9     5B 64 69 72 
24fcd     5D 20       | 	byte	"[dir] "
24fcf     00          | 	byte	0
24fd0                 | LR__4341
24fd0     2A          | 	byte	"*"
24fd1     00          | 	byte	0
24fd2                 | LR__4342
24fd2                 | 	byte	
24fd2     00          | 	byte	0
24fd3                 | LR__4343
24fd3     2D 2D 2D 2D 
24fd7     2D 6D 6F 72 
24fdb     65 2C 20 70 
24fdf     72 65 73 73 
24fe3     20 61 6E 79 
24fe7     20 6B 65 79 | 	byte	"-----more, press any key"
24feb     00          | 	byte	0
24fec                 | LR__4344
24fec     20 20 20 20 
      ...             
25004     20 20 20 20 
25008     20          | 	byte	"                             "
25009     00          | 	byte	0
2500a                 | LR__4345
2500a     2F          | 	byte	"/"
2500b     00          | 	byte	0
2500c                 | LR__4346
2500c     2F 73 64 2F 
25010     62 69 6E 2F | 	byte	"/sd/bin/"
25014     00          | 	byte	0
25015                 | LR__4347
25015     53 79 73 74 
25019     65 6D 20 65 
2501d     72 72 6F 72 
25021     20          | 	byte	"System error "
25022     00          | 	byte	0
25023                 | LR__4348
25023     3A 20       | 	byte	": "
25025     00          | 	byte	0
25026                 | LR__4349
25026                 | 	byte	
25026     00          | 	byte	0
25027                 | LR__4350
25027     45 78 70 65 
2502b     63 74 65 64 
2502f     20 6E 75 6D 
25033     62 65 72 2C 
25037     20 67 6F 74 
2503b     20 73 6F 6D 
2503f     65 74 68 69 
25043     6E 67 20 65 
25047     6C 73 65 2E | 	byte	"Expected number, got something else."
2504b     00          | 	byte	0
2504c                 | LR__4351
2504c     43 61 6E 6E 
25050     6F 74 20 61 
25054     64 64 20 61 
25058     20 6E 75 6D 
2505c     62 65 72 20 
25060     74 6F 20 61 
25064     20 73 74 72 
25068     69 6E 67 2E | 	byte	"Cannot add a number to a string."
2506c     00          | 	byte	0
2506d                 | LR__4352
2506d     43 61 6E 6E 
25071     6F 74 20 73 
25075     75 62 73 74 
25079     72 61 63 74 
2507d     20 73 74 72 
25081     69 6E 67 73 
25085     2E          | 	byte	"Cannot substract strings."
25086     00          | 	byte	0
25087                 | LR__4353
25087     55 6E 6B 6E 
2508b     6F 77 6E 20 
2508f     65 72 72 6F 
25093     72 20 77 68 
25097     69 6C 65 20 
2509b     61 64 64 69 
2509f     6E 67 2E    | 	byte	"Unknown error while adding."
250a2     00          | 	byte	0
250a3                 | LR__4354
250a3     55 6E 6B 6E 
250a7     6F 77 6E 20 
250ab     65 72 72 6F 
250af     72 20 77 68 
250b3     69 6C 65 20 
250b7     73 75 62 73 
250bb     74 72 61 63 
250bf     74 69 6E 67 
250c3     2E          | 	byte	"Unknown error while substracting."
250c4     00          | 	byte	0
250c5                 | LR__4355
250c5     43 61 6E 6E 
250c9     6F 74 20 64 
250cd     6F 20 6C 6F 
250d1     67 69 63 20 
250d5     6F 70 65 72 
250d9     61 74 69 6F 
250dd     6E 20 6F 6E 
250e1     20 73 74 72 
250e5     69 6E 67 20 
250e9     6F 72 20 66 
250ed     6C 6F 61 74 
250f1     2E          | 	byte	"Cannot do logic operation on string or float."
250f2     00          | 	byte	0
250f3                 | LR__4356
250f3     55 6E 6B 6E 
250f7     6F 77 6E 20 
250fb     65 72 72 6F 
250ff     72 20 77 68 
25103     69 6C 65 20 
25107     64 6F 69 6E 
2510b     67 20 6C 6F 
2510f     67 69 63 20 
25113     6F 70 65 72 
25117     61 74 69 6F 
2511b     6E 2E       | 	byte	"Unknown error while doing logic operation."
2511d     00          | 	byte	0
2511e                 | LR__4357
2511e     43 61 6E 6E 
25122     6F 74 20 6D 
25126     75 6C 74 69 
2512a     70 6C 79 20 
2512e     73 74 72 69 
25132     6E 67 73 2E | 	byte	"Cannot multiply strings."
25136     00          | 	byte	0
25137                 | LR__4358
25137     55 6E 6B 6E 
2513b     6F 77 6E 20 
2513f     65 72 72 6F 
25143     72 20 77 68 
25147     69 6C 65 20 
2514b     6D 75 6C 74 
2514f     69 70 6C 79 
25153     69 6E 67 2E | 	byte	"Unknown error while multiplying."
25157     00          | 	byte	0
25158                 | LR__4359
25158     43 61 6E 6E 
2515c     6F 74 20 64 
25160     69 76 69 64 
25164     65 20 73 74 
25168     72 69 6E 67 
2516c     73 2E       | 	byte	"Cannot divide strings."
2516e     00          | 	byte	0
2516f                 | LR__4360
2516f     55 6E 6B 6E 
25173     6F 77 6E 20 
25177     65 72 72 6F 
2517b     72 20 77 68 
2517f     69 6C 65 20 
25183     64 69 76 69 
25187     64 69 6E 67 
2518b     2E          | 	byte	"Unknown error while dividing."
2518c     00          | 	byte	0
2518d                 | LR__4361
2518d     43 61 6E 6E 
25191     6F 74 20 63 
25195     6F 6D 70 75 
25199     74 65 20 61 
2519d     20 70 6F 77 
251a1     65 72 20 6F 
251a5     66 20 61 20 
251a9     73 74 72 69 
251ad     6E 67 2E    | 	byte	"Cannot compute a power of a string."
251b0     00          | 	byte	0
251b1                 | LR__4362
251b1     55 6E 6B 6E 
251b5     6F 77 6E 20 
251b9     65 72 72 6F 
251bd     72 20 77 68 
251c1     69 6C 65 20 
251c5     63 6F 6D 70 
251c9     75 74 69 6E 
251cd     67 20 61 20 
251d1     70 6F 77 65 
251d5     72 2E       | 	byte	"Unknown error while computing a power."
251d7     00          | 	byte	0
251d8                 | LR__4363
251d8     52 69 67 68 
251dc     74 20 70 61 
251e0     72 65 6E 74 
251e4     68 65 73 69 
251e8     73 20 65 78 
251ec     70 65 63 74 
251f0     65 64 2E    | 	byte	"Right parenthesis expected."
251f3     00          | 	byte	0
251f4                 | LR__4364
251f4     45 78 70 65 
251f8     63 74 65 64 
251fc     20 73 74 72 
25200     69 6E 67 2E | 	byte	"Expected string."
25204     00          | 	byte	0
25205                 | LR__4365
25205     45 78 70 65 
25209     63 74 65 64 
2520d     20 66 6C 6F 
25211     61 74 2E    | 	byte	"Expected float."
25214     00          | 	byte	0
25215                 | LR__4366
25215     45 78 70 65 
25219     63 74 65 64 
2521d     20 75 6E 73 
25221     69 67 6E 65 
25225     64 20 69 6E 
25229     74 65 67 65 
2522d     72 2E       | 	byte	"Expected unsigned integer."
2522f     00          | 	byte	0
25230                 | LR__4367
25230     45 78 70 65 
25234     63 74 65 64 
25238     20 69 6E 74 
2523c     65 67 65 72 
25240     2E          | 	byte	"Expected integer."
25241     00          | 	byte	0
25242                 | LR__4368
25242     4E 6F 20 6D 
25246     6F 72 65 20 
2524a     76 61 72 69 
2524e     61 62 6C 65 
25252     20 73 6C 6F 
25256     74 73 2E    | 	byte	"No more variable slots."
25259     00          | 	byte	0
2525a                 | LR__4369
2525a     56 61 72 69 
2525e     61 62 6C 65 
25262     20 6E 6F 74 
25266     20 66 6F 75 
2526a     6E 64 2E    | 	byte	"Variable not found."
2526d     00          | 	byte	0
2526e                 | LR__4370
2526e     43 6F 6D 6D 
25272     61 20 65 78 
25276     70 65 63 74 
2527a     65 64 2E    | 	byte	"Comma expected."
2527d     00          | 	byte	0
2527e                 | LR__4371
2527e     43 6F 6D 6D 
25282     61 20 6F 72 
25286     20 73 65 6D 
2528a     69 63 6F 6C 
2528e     6F 6E 20 65 
25292     78 70 65 63 
25296     74 65 64 2E | 	byte	"Comma or semicolon expected."
2529a     00          | 	byte	0
2529b                 | LR__4372
2529b     55 6E 6B 6E 
2529f     6F 77 6E 20 
252a3     63 6F 6D 6D 
252a7     61 6E 64 2E | 	byte	"Unknown command."
252ab     00          | 	byte	0
252ac                 | LR__4373
252ac     53 74 61 63 
252b0     6B 20 75 6E 
252b4     64 65 72 66 
252b8     6C 6F 77 2E | 	byte	"Stack underflow."
252bc     00          | 	byte	0
252bd                 | LR__4374
252bd     43 61 6E 6E 
252c1     6F 74 20 65 
252c5     78 65 63 75 
252c9     74 65 20 67 
252cd     6F 74 6F 20 
252d1     69 6E 20 74 
252d5     68 65 20 69 
252d9     6D 6D 65 64 
252dd     69 61 74 65 
252e1     20 6D 6F 64 
252e5     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
252e7     00          | 	byte	0
252e8                 | LR__4375
252e8     43 61 6E 6E 
252ec     6F 74 20 6C 
252f0     6F 61 64 20 
252f4     66 72 6F 6D 
252f8     20 74 68 69 
252fc     73 20 66 69 
25300     6C 65 2E    | 	byte	"Cannot load from this file."
25303     00          | 	byte	0
25304                 | LR__4376
25304     54 68 65 20 
25308     70 72 6F 67 
2530c     72 61 6D 20 
25310     69 73 20 65 
25314     6D 70 74 79 
25318     2E          | 	byte	"The program is empty."
25319     00          | 	byte	0
2531a                 | LR__4377
2531a     49 66 20 61 
2531e     66 74 65 72 
25322     20 69 66 2E | 	byte	"If after if."
25326     00          | 	byte	0
25327                 | LR__4378
25327     45 6D 70 74 
2532b     79 20 65 78 
2532f     70 72 65 73 
25333     73 69 6F 6E 
25337     2E          | 	byte	"Empty expression."
25338     00          | 	byte	0
25339                 | LR__4379
25339     53 74 72 69 
2533d     6E 67 20 65 
25341     78 70 65 63 
25345     74 65 64 2E | 	byte	"String expected."
25349     00          | 	byte	0
2534a                 | LR__4380
2534a     49 6E 74 65 
2534e     72 70 72 65 
25352     74 65 72 20 
25356     69 6E 74 65 
2535a     72 6E 61 6C 
2535e     20 65 72 72 
25362     6F 72 2E    | 	byte	"Interpreter internal error."
25365     00          | 	byte	0
25366                 | LR__4381
25366     45 78 70 65 
2536a     63 74 65 64 
2536e     20 61 73 73 
25372     69 67 6E 2E | 	byte	"Expected assign."
25376     00          | 	byte	0
25377                 | LR__4382
25377     45 78 70 65 
2537b     63 74 65 64 
2537f     20 27 74 6F 
25383     27 2E       | 	byte	"Expected 'to'."
25385     00          | 	byte	0
25386                 | LR__4383
25386     45 78 70 65 
2538a     63 74 65 64 
2538e     20 69 6E 74 
25392     65 67 65 72 
25396     20 76 61 72 
2539a     69 61 62 6C 
2539e     65 2E       | 	byte	"Expected integer variable."
253a0     00          | 	byte	0
253a1                 | LR__4384
253a1     55 6E 69 6E 
253a5     69 74 69 61 
253a9     6C 69 7A 65 
253ad     64 20 76 61 
253b1     72 69 61 62 
253b5     6C 65 20 69 
253b9     6E 20 27 6E 
253bd     65 78 74 27 
253c1     2C 20 75 73 
253c5     65 20 27 66 
253c9     6F 72 27 20 
253cd     62 65 66 6F 
253d1     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
253d4     00          | 	byte	0
253d5                 | LR__4385
253d5     4E 6F 20 6D 
253d9     6F 72 65 20 
253dd     73 6C 6F 74 
253e1     73 20 66 6F 
253e5     72 20 27 66 
253e9     6F 72 27 2E | 	byte	"No more slots for 'for'."
253ed     00          | 	byte	0
253ee                 | LR__4386
253ee     27 4E 65 78 
253f2     74 27 20 64 
253f6     6F 65 73 6E 
253fa     27 74 20 6D 
253fe     61 74 63 68 
25402     20 27 66 6F 
25406     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
25409     00          | 	byte	0
2540a                 | LR__4387
2540a     27 47 6F 74 
2540e     6F 27 20 74 
25412     61 72 67 65 
25416     74 20 6C 69 
2541a     6E 65 20 6E 
2541e     6F 74 20 66 
25422     6F 75 6E 64 
25426     2E          | 	byte	"'Goto' target line not found."
25427     00          | 	byte	0
25428                 | LR__4388
25428     42 61 64 20 
2542c     6E 75 6D 62 
25430     65 72 20 6F 
25434     66 20 70 61 
25438     72 61 6D 65 
2543c     74 65 72 73 | 	byte	"Bad number of parameters"
25440     00          | 	byte	0
25441                 | LR__4389
25441     46 75 6E 63 
25445     74 69 6F 6E 
25449     20 75 6E 64 
2544d     65 66 69 6E 
25451     65 64 20 66 
25455     6F 72 20 73 
25459     74 72 69 6E 
2545d     67 73       | 	byte	"Function undefined for strings"
2545f     00          | 	byte	0
25460                 | LR__4390
25460     42 61 64 20 
25464     70 61 72 61 
25468     6D 65 74 65 
2546c     72 2E       | 	byte	"Bad parameter."
2546e     00          | 	byte	0
2546f                 | LR__4391
2546f     43 61 6E 6E 
25473     6F 74 20 64 
25477     65 63 6C 61 
2547b     72 65 20 61 
2547f     6E 20 61 72 
25483     72 61 79 3A 
25487     20 74 68 65 
2548b     20 76 61 72 
2548f     69 61 62 6C 
25493     65 20 65 78 
25497     69 73 74 73 
2549b     2E          | 	byte	"Cannot declare an array: the variable exists."
2549c     00          | 	byte	0
2549d                 | LR__4392
2549d     45 78 70 65 
254a1     63 74 65 64 
254a5     20 27 28 27 
254a9     2E          | 	byte	"Expected '('."
254aa     00          | 	byte	0
254ab                 | LR__4393
254ab     45 78 70 65 
254af     63 74 65 64 
254b3     20 27 29 27 
254b7     20 6F 72 20 
254bb     27 2C 27 2E | 	byte	"Expected ')' or ','."
254bf     00          | 	byte	0
254c0                 | LR__4394
254c0     4E 6F 20 6D 
254c4     6F 72 65 20 
254c8     74 68 61 6E 
254cc     20 33 20 64 
254d0     69 6D 65 6E 
254d4     73 69 6F 6E 
254d8     73 20 73 75 
254dc     70 70 6F 72 
254e0     74 65 64    | 	byte	"No more than 3 dimensions supported"
254e3     00          | 	byte	0
254e4                 | LR__4395
254e4     56 61 72 69 
254e8     61 62 6C 65 
254ec     20 6E 61 6D 
254f0     65 20 65 78 
254f4     70 65 63 74 
254f8     65 64       | 	byte	"Variable name expected"
254fa     00          | 	byte	0
254fb                 | LR__4396
254fb     54 79 70 65 
254ff     20 6E 61 6D 
25503     65 20 65 78 
25507     70 65 63 74 
2550b     65 64       | 	byte	"Type name expected"
2550d     00          | 	byte	0
2550e                 | LR__4397
2550e     54 79 70 65 
25512     20 6E 6F 74 
25516     20 73 75 70 
2551a     70 6F 72 74 
2551e     65 64 20 79 
25522     65 74       | 	byte	"Type not supported yet"
25524     00          | 	byte	0
25525                 | LR__4398
25525     45 72 72 6F 
25529     72 20       | 	byte	"Error "
2552b     00          | 	byte	0
2552c                 | LR__4399
2552c     3A 20       | 	byte	": "
2552e     00          | 	byte	0
2552f                 | LR__4400
2552f     2F 73 64    | 	byte	"/sd"
25532     00          | 	byte	0
25533                 | LR__4401
25533     2F 73 64 2F 
25537     62 61 73    | 	byte	"/sd/bas"
2553a     00          | 	byte	0
2553b                 | LR__4402
2553b     2F 73 64 2F 
2553f     62 61 73    | 	byte	"/sd/bas"
25542     00          | 	byte	0
25543                 | LR__4403
25543     20 42 41 53 
25547     49 43 20 62 
2554b     79 74 65 73 
2554f     20 66 72 65 
25553     65          | 	byte	" BASIC bytes free"
25554     00          | 	byte	0
25555                 | LR__4404
25555     52 65 61 64 
25559     79          | 	byte	"Ready"
2555a     00          | 	byte	0
2555b                 | LR__4405
2555b     20          | 	byte	" "
2555c     00          | 	byte	0
2555d                 | LR__4406
2555d     20          | 	byte	" "
2555e     00          | 	byte	0
2555f                 | LR__4407
2555f                 | 	byte	
2555f     00          | 	byte	0
25560                 | LR__4408
25560                 | 	byte	
25560     00          | 	byte	0
25561     00 00 00    | 	alignl
25564                 | _dat_
25564     00 00 00 00 
25568     00 00 00 00 
2556c     00 00 00 00 
25570     00 00 00 00 | 	byte	$00[16]
25574     61 41 17 0E 
25578     62 42 00 00 
2557c     63 43 19 10 
25580     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
25584     65 45 18 0F 
25588     66 46 00 00 
2558c     67 47 00 00 
25590     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
25594     69 49 00 00 
25598     6A 4A 00 00 
2559c     6B 4B 00 00 
255a0     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
255a4     6D 4D 00 00 
255a8     6E 4E 1A 11 
255ac     6F 4F 1E 15 
255b0     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
255b4     71 51 00 00 
255b8     72 52 00 00 
255bc     73 53 1B 12 
255c0     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
255c4     75 55 00 00 
255c8     76 56 00 00 
255cc     77 57 00 00 
255d0     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
255d4     79 59 00 00 
255d8     7A 5A 1D 14 
255dc     31 21 04 00 
255e0     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
255e4     33 23 06 00 
255e8     34 24 07 00 
255ec     35 25 08 00 
255f0     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
255f4     37 26 0A 00 
255f8     38 2A 0B 00 
255fc     39 28 0C 00 
25600     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
25604     8D 8D 00 00 
25608     9B 9B 00 00 
2560c     88 88 00 00 
25610     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
25614     20 20 00 00 
25618     2D 5F 00 00 
2561c     3D 2B 00 00 
25620     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
25624     5D 7D 00 00 
25628     5C 7C 00 00 
2562c     23 7E 00 00 
25630     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
25634     27 22 00 00 
25638     60 7E 03 00 
2563c     2C 3C 00 00 
25640     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
25644     2F 3F 00 00 
25648     B9 B9 00 00 
2564c     BA 00 00 00 
25650     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
25654     BC 00 00 00 
25658     BD 00 00 00 
2565c     BE 00 00 00 
25660     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
25664     C0 00 00 00 
25668     C1 00 00 00 
2566c     C2 00 00 00 
25670     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
25674     C4 00 00 00 
25678     C5 00 00 00 
2567c     C6 00 00 00 
25680     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
25684     C8 00 00 00 
25688     C9 00 00 00 
2568c     CA 00 00 00 
25690     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
25694     7F 7F 00 00 
25698     CC 00 00 00 
2569c     CD 00 00 00 
256a0     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
256a4     CF 00 00 00 
256a8     D0 00 00 00 
256ac     D1 00 00 00 
256b0     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
256b4     2F 2F 00 00 
256b8     2A 2A 00 00 
256bc     2D 2D 00 00 
256c0     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
256c4     8D 8D 00 00 
256c8     31 31 00 00 
256cc     32 32 00 00 
256d0     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
256d4     34 34 00 00 
256d8     35 35 00 00 
256dc     36 36 00 00 
256e0     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
256e4     38 38 00 00 
256e8     39 39 00 00 
256ec     30 30 00 00 
256f0     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
256f4     5C 7C 00 00 
256f8     00 00 00 00 
256fc     00 00 00 00 
25700     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
25704     00 00 00 00 
      ...             
2575c     00 00 00 00 
25760     00 00 00 00 | 	byte	$00[96]
25764     2B 00 A6 F2 
25768     24 A7 09 80 
2576c     5B 88 4D 89 
25770     80 88 A5 88 | atari_spl file "atari.spl"
25774     6D 88 B8 88 
25778     80 88 CB 88 
2577c     92 88 A5 88 
25780     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
25784     A5 88 CA 88 
25788     A6 88 DD 88 
2578c     B8 88 AB 89 
25790     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
25794     C8 AD C6 F1 
25798     91 06 B6 FF 
2579c     13 00 4A 00 
257a0     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
257a4     5D 00 5E 00 
257a8     5D 00 5E 00 
257ac     5E 00 5D 00 
257b0     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
257b4     38 00 83 00 
257b8     25 00 83 00 
257bc     C3 FE D1 04 
257c0     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
257c4     48 88 38 85 
257c8     41 8A CB 88 
257cc     28 89 B8 88 
257d0     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
257d4     15 89 03 89 
257d8     02 89 15 89 
257dc     16 89 15 89 
257e0     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
257e4     15 89 3A 89 
257e8     72 89 E3 89 
257ec     52 83 AD 97 
257f0     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
257f4     0C 02 B6 FF 
257f8     E1 00 A8 00 
257fc     F3 00 A8 00 
25800     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
25804     CE 00 CD 00 
25808     CD 00 BA 00 
2580c     E1 00 BB 00 
25810     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
25814     DF 00 C9 FF 
25818     E6 01 B6 06 
2581c     EE DD 8D 98 
25820     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
25824     97 89 73 89 
25828     3B 89 60 89 
2582c     60 89 60 89 
25830     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
25834     73 89 72 89 
25838     85 89 73 89 
2583c     AA 89 60 89 
25840     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
25844     E8 8A 18 86 
25848     92 88 A5 C2 
2584c     E0 00 C3 05 
25850     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
25854     F2 00 64 01 
25858     06 01 3E 01 
2585c     2B 01 2B 01 
25860     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
25864     2B 01 2A 01 
25868     2B 01 2B 01 
2586c     2B 01 18 01 
25870     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
25874     39 07 61 F3 
25878     C0 AF 37 85 
2587c     0F 88 8B 8A 
25880     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
25884     AB 89 D0 89 
25888     AB 89 D0 89 
2588c     D0 89 CF 89 
25890     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
25894     D0 89 F5 89 
25898     BD 89 08 8A 
2589c     CF 89 E8 8A 
258a0     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
258a4     53 B3 0D F8 
258a8     F4 07 38 00 
258ac     63 01 63 01 
258b0     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
258b4     88 01 88 01 
258b8     76 01 88 01 
258bc     88 01 89 01 
258c0     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
258c4     75 01 AE 01 
258c8     76 01 88 01 
258cc     4A 00 46 06 
258d0     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
258d4     08 8A 9A 86 
258d8     33 8B 08 8A 
258dc     2D 8A F5 89 
258e0     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
258e4     2D 8A 2D 8A 
258e8     2E 8A 1B 8A 
258ec     40 8A 2D 8A 
258f0     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
258f4     2E 8A 79 8A 
258f8     66 8A C8 8B 
258fc     72 82 2B 97 
25900     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
25904     1D 02 05 01 
25908     F8 01 C0 01 
2590c     0B 02 C0 01 
25910     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
25914     F9 01 D3 01 
25918     F8 01 D3 01 
2591c     F8 01 D2 01 
25920     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
25924     E6 01 2B 01 
25928     8E 02 5F 07 
2592c     F7 E2 ED 9C 
25930     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
25934     E8 8A 78 8A 
25938     78 8A 65 8A 
2593c     8B 8A 78 8A 
25940     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
25944     8B 8A 9D 8A 
25948     9D 8A 8B 8A 
2594c     C2 8A 78 8A 
25950     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
25954     70 8C 18 86 
25958     8B 8A 23 C9 
2595c     CB 03 C4 05 
25960     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
25964     0B 02 7B 02 
25968     1E 02 55 02 
2596c     30 02 43 02 
25970     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
25974     43 02 44 02 
25978     43 02 30 02 
2597c     68 02 31 02 
25980     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
25984     07 08 3F F7 
25988     73 B2 13 85 
2598c     15 89 ED 8B 
25990     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
25994     B0 8A FB 8A 
25998     D5 8A FA 8A 
2599c     E8 8A FB 8A 
259a0     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
259a4     E8 8A 21 8B 
259a8     E7 8A 33 8B 
259ac     E8 8A 26 8C 
259b0     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
259b4     8D B0 27 F6 
259b8     9C 08 AD 01 
259bc     7B 02 8D 02 
259c0     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
259c4     A1 02 A0 02 
259c8     A1 02 A0 02 
259cc     A0 02 A0 02 
259d0     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
259d4     7B 02 D8 02 
259d8     7B 02 C6 02 
259dc     3E 01 C3 05 
259e0     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
259e4     00 8C 2A 86 
259e8     E0 8C FA 8A 
259ec     6A 8B FB 8A 
259f0     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
259f4     45 8B 45 8B 
259f8     45 8B 6B 8B 
259fc     46 8B 59 8B 
25a00     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
25a04     6B 8B 6B 8B 
25a08     6B 8B 6B 8B 
25a0c     7D 8B 7D 8B 
25a10     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
25a14     90 8B 91 8B 
25a18     90 8B 90 8B 
25a1c     A3 8B A3 8B 
25a20     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
25a24     B5 8B B6 8B 
25a28     B5 8B B5 8B 
25a2c     B6 8B C8 8B 
25a30     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
25a34     C8 8B DA 8B 
25a38     DB 8B DB 8B 
25a3c     DB 8B DC 8B 
25a40     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
25a44     EE 8B EE 8B 
25a48     00 8C 01 8C 
25a4c     00 8C 01 8C 
25a50     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
25a54     12 8C 13 8C 
25a58     13 8C 26 8C 
25a5c     26 8C 26 8C 
25a60     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
25a64     38 8C 38 8C 
25a68     38 8C 38 8C 
25a6c     4B 8C 4B 8C 
25a70     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
25a74     5E 8C 5E 8C 
25a78     5E 8C 5E 8C 
25a7c     70 8C 70 8C 
25a80     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
25a84     70 8C 83 8C 
25a88     83 8C 83 8C 
25a8c     83 8C 96 8C 
25a90     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
25a94     95 8C A9 8C 
25a98     A9 8C A8 8C 
25a9c     A8 8C A8 8C 
25aa0     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
25aa4     BB 8C BB 8C 
25aa8     BB 8C CE 8C 
25aac     CE 8C CE 8C 
25ab0     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
25ab4     E0 8C E1 8C 
25ab8     E1 8C E0 8C 
25abc     F4 8C F2 8C 
25ac0     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
25ac4     05 8D 05 8D 
25ac8     06 8D 06 8D 
25acc     19 8D 19 8D 
25ad0     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
25ad4     18 8D 2B 8D 
25ad8     2B 8D 2B 8D 
25adc     2A 8D 3E 8D 
25ae0     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
25ae4     3E 8D 51 8D 
25ae8     50 8D 50 8D 
25aec     50 8D 51 8D 
25af0     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
25af4     63 8D 64 8D 
25af8     76 8D 75 8D 
25afc     75 8D 76 8D 
25b00     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
25b04     88 8D 88 8D 
25b08     89 8D 9B 8D 
25b0c     9A 8D 9B 8D 
25b10     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
25b14     AD 8D AE 8D 
25b18     AD 8D AE 8D 
25b1c     C1 8D C1 8D 
25b20     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
25b24     D3 8D D3 8D 
25b28     D3 8D D3 8D 
25b2c     D3 8D E6 8D 
25b30     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
25b34     E6 8D E6 8D 
25b38     F9 8D F9 8D 
25b3c     F9 8D F8 8D 
25b40     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
25b44     0B 8E 0B 8E 
25b48     1D 8E 1D 8E 
25b4c     1E 8E 1E 8E 
25b50     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
25b54     31 8E 31 8E 
25b58     31 8E 42 8E 
25b5c     43 8E 43 8E 
25b60     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
25b64     56 8E 56 8E 
25b68     55 8E 56 8E 
25b6c     68 8E 69 8E 
25b70     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
25b74     69 8E 7B 8E 
25b78     7C 8E 7B 8E 
25b7c     7B 8E 8D 8E 
25b80     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
25b84     8D 8E A1 8E 
25b88     A0 8E A1 8E 
25b8c     A1 8E A0 8E 
25b90     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
25b94     B3 8E B3 8E 
25b98     C6 8E C5 8E 
25b9c     C6 8E C6 8E 
25ba0     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
25ba4     D8 8E D9 8E 
25ba8     D8 8E EC 8E 
25bac     EB 8E EC 8E 
25bb0     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
25bb4     FE 8E FE 8E 
25bb8     FE 8E FE 8E 
25bbc     10 8F 10 8F 
25bc0     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
25bc4     11 8F 23 8F 
25bc8     24 8F 23 8F 
25bcc     24 8F 37 8F 
25bd0     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
25bd4     36 8F 36 8F 
25bd8     48 8F 49 8F 
25bdc     49 8F 49 8F 
25be0     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
25be4     5B 8F 5C 8F 
25be8     5B 8F 6E 8F 
25bec     6E 8F 6E 8F 
25bf0     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
25bf4     81 8F 81 8F 
25bf8     81 8F 81 8F 
25bfc     93 8F 93 8F 
25c00     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
25c04     93 8F A6 8F 
25c08     A6 8F A6 8F 
25c0c     A6 8F B9 8F 
25c10     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
25c14     B9 8F B9 8F 
25c18     CC 8F CB 8F 
25c1c     CB 8F CC 8F 
25c20     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
25c24     DF 8F DE 8F 
25c28     DE 8F F1 8F 
25c2c     F1 8F F1 8F 
25c30     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
25c34     03 90 04 90 
25c38     04 90 04 90 
25c3c     16 90 17 90 
25c40     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
25c44     29 90 28 90 
25c48     29 90 28 90 
25c4c     29 90 3C 90 
25c50     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
25c54     3C 90 4F 90 
25c58     4E 90 4E 90 
25c5c     4E 90 4E 90 
25c60     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
25c64     61 90 61 90 
25c68     73 90 74 90 
25c6c     74 90 74 90 
25c70     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
25c74     87 90 86 90 
25c78     87 90 86 90 
25c7c     99 90 99 90 
25c80     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
25c84     AB 90 AB 90 
25c88     AC 90 AB 90 
25c8c     AB 90 BF 90 
25c90     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
25c94     BE 90 D1 90 
25c98     D0 90 D1 90 
25c9c     D1 90 D1 90 
25ca0     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
25ca4     E3 90 E4 90 
25ca8     F6 90 F6 90 
25cac     F6 90 F6 90 
25cb0     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
25cb4     09 91 0A 91 
25cb8     0A 91 1C 91 
25cbc     1C 91 1C 91 
25cc0     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
25cc4     2F 91 2E 91 
25cc8     2F 91 2F 91 
25ccc     2E 91 41 91 
25cd0     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
25cd4     41 91 53 91 
25cd8     54 91 54 91 
25cdc     53 91 54 91 
25ce0     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
25ce4     67 91 67 91 
25ce8     79 91 7A 91 
25cec     79 91 78 91 
25cf0     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
25cf4     8C 91 8B 91 
25cf8     8C 91 8C 91 
25cfc     9E 91 9E 91 
25d00     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
25d04     B1 91 B1 91 
25d08     B2 91 B1 91 
25d0c     B1 91 C4 91 
25d10     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
25d14     C4 91 D6 91 
25d18     D7 91 D7 91 
25d1c     D7 91 D6 91 
25d20     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
25d24     EA 91 EA 91 
25d28     EA 91 FC 91 
25d2c     FC 91 FB 91 
25d30     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
25d34     0E 92 0F 92 
25d38     0F 92 0E 92 
25d3c     21 92 21 92 
25d40     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
25d44     21 92 34 92 
25d48     33 92 34 92 
25d4c     34 92 47 92 
25d50     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
25d54     46 92 47 92 
25d58     59 92 59 92 
25d5c     59 92 59 92 
25d60     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
25d64     6C 92 6C 92 
25d68     6B 92 7E 92 
25d6c     7E 92 7E 92 
25d70     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
25d74     92 92 91 92 
25d78     91 92 90 92 
25d7c     91 92 A4 92 
25d80     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
25d84     A3 92 B6 92 
25d88     B6 92 B7 92 
25d8c     B7 92 B6 92 
25d90     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
25d94     CA 92 C9 92 
25d98     CA 92 DC 92 
25d9c     DC 92 DC 92 
25da0     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
25da4     EF 92 EF 92 
25da8     EF 92 EF 92 
25dac     01 93 01 93 
25db0     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
25db4     15 93 14 93 
25db8     14 93 14 93 
25dbc     14 93 27 93 
25dc0     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
25dc4     27 93 39 93 
25dc8     3A 93 39 93 
25dcc     39 93 39 93 
25dd0     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
25dd4     4B 93 4C 93 
25dd8     5F 93 5F 93 
25ddc     5F 93 5E 93 
25de0     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
25de4     5F 93 84 93 
25de8     4C 93 96 93 
25dec     5F 93 AE 94 
25df0     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
25df4     7B C1 00 00 | 	byte	$7b, $c1, $00, $00
25df8     7A D7 00 80 
25dfc     87 8A 48 8F 
25e00     EC 8C 76 8D 
25e04     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
25e08     3C 8D 82 8D 
25e0c     42 8D 88 8D 
25e10     8C 8D 8E 8D 
25e14     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
25e18     97 8D DE 8D 
25e1c     E1 8D F1 8E 
25e20     D8 8C A3 83 
25e24     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
25e28     65 71 C9 65 
25e2c     FC 64 C4 65 
25e30     C1 65 BF 65 
25e34     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
25e38     B6 65 B4 65 
25e3c     B2 65 AE 65 
25e40     AC 65 ED 65 
25e44     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
25e48     5E 65 25 66 
25e4c     FA 62 23 6B 
25e50     B5 6C 61 0A 
25e54     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
25e58     5D 90 BE 8D 
25e5c     47 8E C3 8D 
25e60     09 8E C9 8D 
25e64     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
25e68     15 8E 19 8E 
25e6c     1B 8E 62 8E 
25e70     64 8E 68 8E 
25e74     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
25e78     B5 8E 4C 90 
25e7c     FA 84 3C 9D 
25e80     98 13 79 6D 
25e84     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
25e88     D9 66 50 66 
25e8c     D4 66 4B 66 
25e90     8C 66 46 66 
25e94     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
25e98     81 66 3A 66 
25e9c     7C 66 36 66 
25ea0     76 66 30 66 
25ea4     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
25ea8     6B 66 88 72 
25eac     BF 37 E7 B7 
25eb0     75 83 8B 8E 
25eb4     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
25eb8     94 8E 96 8E 
25ebc     DD 8E 9C 8E 
25ec0     E2 8E A2 8E 
25ec4     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
25ec8     EE 8E AE 8E 
25ecc     38 8F B5 8E 
25ed0     3F 8F FD 8E 
25ed4     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
25ed8     A5 87 1E E3 
25edc     6D 5D FA 71 
25ee0     41 64 25 67 
25ee4     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
25ee8     D9 66 1A 67 
25eec     18 67 15 67 
25ef0     12 67 0F 67 
25ef4     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
25ef8     07 67 C0 66 
25efc     01 67 BC 66 
25f00     B8 66 DE 64 
25f04     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
25f08     43 E5 1F 8B 
25f0c     14 8A F1 90 
25f10     1C 8F 63 8F 
25f14     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
25f18     29 8F 6E 8F 
25f1c     72 8F 75 8F 
25f20     34 8F BE 8F 
25f24     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
25f28     84 8F 87 8F 
25f2c     CC 8F 56 90 
25f30     67 91 49 80 
25f34     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
25f38     46 77 A6 66 
25f3c     E8 66 B0 67 
25f40     AD 67 ED 67 
25f44     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
25f48     A2 67 E3 67 
25f4c     9D 67 9A 67 
25f50     98 67 94 67 
25f54     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
25f58     49 67 CD 67 
25f5c     28 65 5F 6E 
25f60     82 67 3A 01 
25f64     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
25f68     C2 91 A9 8F 
25f6c     EF 8F AE 8F 
25f70     F4 8F B5 8F 
25f74     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
25f78     01 90 03 90 
25f7c     07 90 09 90 
25f80     0C 90 53 90 
25f84     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
25f88     18 90 44 93 
25f8c     85 84 D6 9D 
25f90     87 1F 2F 75 
25f94     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
25f98     C4 68 F6 67 
25f9c     BE 68 F1 67 
25fa0     76 68 2E 68 
25fa4     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
25fa8     27 68 24 68 
25fac     64 68 1E 68 
25fb0     5F 68 19 68 
25fb4     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
25fb8     DC 68 56 72 
25fbc     7E 36 C2 B8 
25fc0     D7 84 73 90 
25fc4     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
25fc8     7B 90 7F 90 
25fcc     82 90 84 90 
25fd0     CB 90 8B 90 
25fd4     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
25fd8     D7 90 96 90 
25fdc     20 91 59 90 
25fe0     25 91 A2 90 
25fe4     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
25fe8     D0 89 40 EE 
25fec     12 64 C4 71 
25ff0     29 66 0C 69 
25ff4     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
25ff8     C0 68 02 69 
25ffc     FE 68 FB 68 
26000     F9 68 F6 68 
26004     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
26008     EE 68 A8 68 
2600c     2C 69 5F 68 
26010     E2 68 81 66 
26014     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
26018     1E EB A6 8A 
2601c     73 8B 5E 93 
26020     7B 90 48 91 
26024     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
26028     0D 91 11 91 
2602c     14 91 16 91 
26030     5C 91 1C 91 
26034     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
26038     68 91 AF 91 
2603c     2A 91 B5 91 
26040     75 91 1A 94 
26044     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
26048     70 0E CB 6C 
2604c     5D 6E C4 67 
26050     99 69 54 69 
26054     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
26058     D2 69 49 69 
2605c     89 69 86 69 
26060     40 69 C4 69 
26064     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
26068     35 69 76 69 
2606c     58 67 EB 6D 
26070     E9 6D 89 0F 
26074     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
26078     33 94 94 91 
2607c     D9 91 56 91 
26080     E0 91 9F 91 
26084     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
26088     EC 91 EE 91 
2608c     F1 91 F4 91 
26090     F7 91 3D 92 
26094     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
26098     46 92 21 94 
2609c     11 89 A4 9D 
260a0     FD 0E 8F 6C 
260a4     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
260a8     28 6A E1 69 
260ac     65 6A 1F 6A 
260b0     5F 6A 1A 6A 
260b4     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
260b8     54 6A 0F 6A 
260bc     4F 6A 09 6A 
260c0     06 6A 03 6A 
260c4     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
260c8     23 68 69 77 
260cc     3A 4D 38 CA 
260d0     38 86 4E 91 
260d4     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
260d8     64 92 24 92 
260dc     6A 92 2A 92 
260e0     70 92 30 92 
260e4     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
260e8     7B 92 7E 92 
260ec     C5 92 84 92 
260f0     CB 92 8A 92 
260f4     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
260f8     4D 8D F9 E2 
260fc     97 59 FE 74 
26100     DB 68 6D 6A 
26104     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
26108     A8 6A A5 6A 
2610c     A3 6A 9F 6A 
26110     9D 6A 9B 6A 
26114     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
26118     D6 6A 8F 6A 
2611c     CF 6A 46 6A 
26120     CA 6A E1 67 
26124     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
26128     D3 F7 15 92 
2612c     90 8C BF 94 
26130     A6 92 EB 92 
26134     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
26138     B1 92 F7 92 
2613c     FA 92 FD 92 
26140     00 93 02 93 
26144     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
26148     4F 93 52 93 
2614c     54 93 22 94 
26150     5A 93 8F 88 
26154     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
26158     1C 77 07 6C 
2615c     E8 69 7A 6B 
26160     34 6B 75 6B 
26164     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
26168     29 6B 26 6B 
2616c     24 6B 21 6B 
26170     1D 6B 5E 6B 
26174     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
26178     12 6B 52 6B 
2617c     34 69 34 6E 
26180     BA 73 A4 24 
26184     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
26188     7A 94 B3 93 
2618c     72 93 31 93 
26190     78 93 7A 93 
26194     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
26198     83 93 86 93 
2619c     89 93 D0 93 
261a0     D2 93 D5 93 
261a4     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
261a8     DD 93 40 96 
261ac     30 8B 99 9C 
261b0     52 10 94 71 
261b4     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
261b8     46 6C 79 6B 
261bc     40 6C B7 6B 
261c0     F7 6B B1 6B 
261c4     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
261c8     EC 6B A5 6B 
261cc     A2 6B 9F 6B 
261d0     9D 6B 9A 6B 
261d4     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
261d8     C8 6A E4 76 
261dc     20 4B F9 CE 
261e0     2E 8A 1A 92 
261e4     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
261e8     FB 93 BA 93 
261ec     01 94 03 94 
261f0     4A 94 09 94 
261f4     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
261f8     55 94 14 94 
261fc     9E 94 1A 94 
26200     61 94 20 94 
26204     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
26208     3E 87 E5 CD 
2620c     5F 50 6C 78 
26210     B5 6A 04 6C 
26214     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
26218     83 6C 7F 6C 
2621c     7C 6C 36 6C 
26220     76 6C 74 6C 
26224     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
26228     6B 6C 25 6C 
2622c     66 6C 1F 6C 
26230     1D 6C 41 6A 
26234     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
26238     BA FA FC 94 
2623c     5B 8D 97 96 
26240     3B 94 C5 94 
26244     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
26248     89 94 8C 94 
2624c     8F 94 92 94 
26250     94 94 DB 94 
26254     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
26258     E4 94 E7 94 
2625c     2D 95 74 95 
26260     C8 96 15 89 
26264     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
26268     CB 75 31 6F 
2626c     7E 6B 10 6D 
26270     C9 6C 0A 6D 
26274     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
26278     BD 6C FF 6C 
2627c     FB 6C F9 6C 
26280     B2 6C F3 6C 
26284     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
26288     A7 6C E8 6C 
2628c     0D 6B 85 6F 
26290     C7 74 10 28 
26294     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
26298     96 96 47 95 
2629c     06 95 0A 95 
262a0     0C 95 0F 95 
262a4     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
262a8     17 95 5E 95 
262ac     61 95 63 95 
262b0     22 95 AC 95 
262b4     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
262b8     72 95 17 98 
262bc     59 8E 01 96 
262c0     CF FC 5A 68 
262c4     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
262c8     96 6D 50 6D 
262cc     D5 6D 4A 6D 
262d0     8C 6D 89 6D 
262d4     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
262d8     80 6D 3A 6D 
262dc     7A 6D 77 6D 
262e0     75 6D 71 6D 
262e4     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
262e8     18 6C BC 78 
262ec     9A 4F 7E CF 
262f0     1F 89 F1 93 
262f4     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
262f8     D2 95 4E 95 
262fc     D7 95 53 95 
26300     DD 95 E0 95 
26304     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
26308     A5 95 EB 95 
2630c     EE 95 F0 95 
26310     37 96 B3 95 
26314     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
26318     1A 98 D5 8D 
2631c     C5 9F CD 0F 
26320     0F 71 F3 73 
26324     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
26328     D9 6D 5E 6E 
2632c     D3 6D 58 6E 
26330     12 6E 0F 6E 
26334     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
26338     49 6E BF 6D 
2633c     87 6E 76 6D 
26340     81 6E 11 6B 
26344     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
26348     3F 09 44 95 
2634c     E5 8D 3F 99 
26350     D4 95 A2 96 
26354     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
26358     23 96 69 96 
2635c     6B 96 6E 96 
26360     71 96 74 96 
26364     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
26368     BF 96 3C 96 
2636c     C6 96 C8 96 
26370     A3 98 51 8D 
26374     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
26378     CF 75 29 73 
2637c     90 6C EC 6E 
26380     62 6E E7 6E 
26384     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
26388     9A 6E 98 6E 
2638c     95 6E 91 6E 
26390     8E 6E CF 6E 
26394     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
26398     40 6E C3 6E 
2639c     E8 6C 45 6F 
263a0     A5 7B C9 35 
263a4     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
263a8     2D 98 23 97 
263ac     E1 96 A0 96 
263b0     A4 96 EA 96 
263b4     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
263b8     AF 96 F4 96 
263bc     F8 96 3E 97 
263c0     FD 96 43 97 
263c4     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
263c8     08 97 6B 99 
263cc     D6 92 88 91 
263d0     D8 EE 84 66 
263d4     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
263d8     2E 6F E7 6E 
263dc     6C 6F 24 6F 
263e0     21 6F 1F 6F 
263e4     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
263e8     17 6F 13 6F 
263ec     54 6F 0E 6F 
263f0     0B 6F 4B 6F 
263f4     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
263f8     27 6D 1C 7B 
263fc     19 59 9F DB 
26400     66 8E BC 94 
26404     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
26408     67 97 26 97 
2640c     6D 97 2B 97 
26410     72 97 32 97 
26414     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
26418     C1 97 7F 97 
2641c     C6 97 85 97 
26420     CB 97 CE 97 
26424     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
26428     EC 8A C4 C6 
2642c     68 4C F4 7D 
26430     63 6E E8 6E 
26434     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
26438     ED 6F A7 6F 
2643c     E7 6F A0 6F 
26440     E1 6F 9B 6F 
26444     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
26448     D5 6F 8F 6F 
2644c     CE 6F 45 6F 
26450     86 6F 68 6D 
26454     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
26458     C0 13 AD A2 
2645c     A7 8E 79 99 
26460     E6 97 E8 97 
26464     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
26468     F1 97 F3 97 
2646c     F6 97 F9 97 
26470     FB 97 FE 97 
26474     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
26478     4A 98 0A 98 
2647c     93 98 0F 98 
26480     7F 9B BF 8C 
26484     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
26488     91 7B 62 73 
2648c     1A 6E B9 70 
26490     EB 6F B3 70 
26494     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
26498     25 70 20 70 
2649c     1E 70 1B 70 
264a0     18 70 15 70 
264a4     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
264a8     0D 70 09 70 
264ac     07 70 03 70 
264b0     01 70 FD 6F 
264b4     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
264b8     F6 6F F2 6F 
264bc     EF 6F EC 6F 
264c0     2C 70 E6 6F 
264c4     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
264c8     DD 6F 97 6F 
264cc     D7 6F 84 6E 
264d0     8F 6F 3F 7D 
264d4     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
264d6     FF FF FF FF 
264da     FF FF       | atarist_spl file "atarist.spl" '512
264dc     00 00 00 00 
264e0     00 00 00 00 
264e4     00 00       | 	byte	$00[10]
264e6     17 7F F2 7F 
264ea     B2 7F 72 7F 
264ee     33 7F F4 7E 
264f2     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
264f6     36 7E F5 7D 
264fa     E9 51 F2 0D 
264fe     8E 00 F3 FD 
26502     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
26506     57 FD 58 FD 
2650a     5B FD 5C FD 
2650e     5C FD 60 7D 
26512     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
26516     D6 7C 98 7C 
2651a     59 7C 1A 7C 
2651e     DC 7B 9E 7B 
26522     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
26526     F3 05 00 FD 
2652a     41 FB EA FA 
2652e     D9 FA DB FA 
26532     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
26536     E4 FA 9B 36 
2653a     F8 7A C0 7A 
2653e     84 7A 45 7A 
26542     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
26546     8E 79 51 79 
2654a     15 79 D7 78 
2654e     3C 1F EB FF 
26552     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
26556     6D F8 65 F8 
2655a     68 F8 6D F8 
2655e     70 F8 74 F8 
26562     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
26566     AB 60 79 60 
2656a     4B 60 1A 60 
2656e     E9 5F B9 5F 
26572     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
26576     FB 59 B2 0B 
2657a     92 FA 3A F7 
2657e     96 F6 79 F6 
26582     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
26586     82 F6 86 F6 
2658a     8C F6 DB 5D 
2658e     F1 5E C1 5E 
26592     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
26596     34 5E 04 5E 
2659a     D6 5D A6 5D 
2659e     78 5D D4 3E 
265a2     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
265a6     27 F5 BA F4 
265aa     AB F4 AD F4 
265ae     B2 F4 B8 F4 
265b2     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
265b6     26 5D 2B 5D 
265ba     FC 5C CD 5C 
265be     9F 5C 70 5C 
265c2     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
265c6     E5 5B B8 5B 
265ca     DB 24 A7 FC 
265ce     D1 F4 4D F3 
265d2     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
265d6     04 F3 0B F3 
265da     11 F3 16 F3 
265de     DE 18 98 5B 
265e2     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
265e6     4E 4A 29 48 
265ea     A0 47 6A 47 
265ee     43 47 20 47 
265f2     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
265f6     E2 F6 98 F2 
265fa     C5 F1 A3 F1 
265fe     A3 F1 A8 F1 
26602     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
26606     BF F1 00 3D 
2660a     EF 46 CD 46 
2660e     AA 46 86 46 
26612     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
26616     1C 46 F9 45 
2661a     D7 45 EE 43 
2661e     DE 02 E8 F3 
26622     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
26626     61 F0 65 F0 
2662a     6D F0 74 F0 
2662e     7C F0 84 F0 
26632     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
26636     8E 45 6D 45 
2663a     49 45 27 45 
2663e     05 45 E1 44 
26642     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
26646     F1 2F A9 FB 
2664a     8B F1 9B EF 
2664e     40 EF 36 EF 
26652     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
26656     4D EF 56 EF 
2665a     5E EF 7B 44 
2665e     8C 44 69 44 
26662     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
26666     03 44 E1 43 
2666a     C0 43 F5 37 
2666e     69 33 0F 11 
26672     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
26676     66 EE 37 EE 
2667a     38 EE 40 EE 
2667e     48 EE 51 EE 
26682     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
26686     7D 32 6A 32 
2668a     51 32 37 32 
2668e     1F 32 05 32 
26692     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
26696     B9 31 A1 31 
2669a     F1 04 F4 F1 
2669e     50 EE A0 ED 
266a2     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
266a6     93 ED 9A ED 
266aa     A4 ED AD ED 
266ae     F4 27 C1 31 
266b2     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
266b6     78 31 5F 31 
266ba     46 31 2E 31 
266be     15 31 FC 30 
266c2     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
266c6     C4 EF 4A ED 
266ca     DC EC CB EC 
266ce     D2 EC DA EC 
266d2     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
266d6     F9 EC 64 2F 
266da     0A 31 F1 30 
266de     D9 30 C0 30 
266e2     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
266e6     78 30 5F 30 
266ea     46 30 38 23 
266ee     A6 F6 19 EE 
266f2     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
266f6     20 EC 28 EC 
266fa     32 EC 3C EC 
266fe     47 EC 51 EC 
26702     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
26706     A3 22 93 22 
2670a     7F 22 6E 22 
2670e     5D 22 4C 22 
26712     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
26716     77 09 76 F1 
2671a     CC EC F0 EB 
2671e     CD EB CE EB 
26722     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
26726     ED EB F5 EB 
2672a     3E F6 6B 22 
2672e     5F 22 4E 22 
26732     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
26736     1B 22 0B 22 
2673a     FA 21 E9 21 
2673e     D8 21 4D FF 
26742     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
26746     92 EB 7B EB 
2674a     82 EB 8C EB 
2674e     97 EB A1 EB 
26752     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
26756     15 22 04 22 
2675a     F3 21 E3 21 
2675e     D2 21 C0 21 
26762     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
26766     8E 21 7D 21 
2676a     9A F8 A4 ED 
2676e     8E EB 2F EB 
26772     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
26776     37 EB 42 EB 
2677a     4C EB 57 EB 
2677e     B2 17 22 19 
26782     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
26786     FD 18 EF 18 
2678a     E3 18 D6 18 
2678e     CA 18 BD 18 
26792     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
26796     60 EC 35 EB 
2679a     01 EB 01 EB 
2679e     0C EB 16 EB 
267a2     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
267a6     34 EB D0 18 
267aa     00 19 F4 18 
267ae     E8 18 DA 18 
267b2     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
267b6     B6 18 A9 18 
267ba     9D 18 91 05 
267be     F0 EF CA EB 
267c2     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
267c6     E8 EA F2 EA 
267ca     FE EA 07 EB 
267ce     12 EB C2 EF 
267d2     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
267d6     D9 18 CD 18 
267da     C0 18 B3 18 
267de     A7 18 9B 18 
267e2     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
267e6     B8 FC 30 EE 
267ea     61 EB DC EA 
267ee     CD EA D2 EA 
267f2     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
267f6     F3 EA FE EA 
267fa     D2 09 D1 18 
267fe     C3 18 17 18 
26802     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
26806     66 11 52 11 
2680a     49 11 41 11 
2680e     38 11 E0 F4 
26812     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
26816     C9 EA C5 EA 
2681a     CF EA DB EA 
2681e     E6 EA EF EA 
26822     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
26826     89 11 80 11 
2682a     78 11 6E 11 
2682e     67 11 5D 11 
26832     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
26836     43 11 32 0D 
2683a     9C F1 07 EC 
2683e     F8 EA CD EA 
26842     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
26846     E4 EA ED EA 
2684a     F8 EA 02 EB 
2684e     55 11 91 11 
26852     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
26856     75 11 6E 11 
2685a     64 11 5E 11 
2685e     54 11 4A 11 
26862     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
26866     A8 EB F1 EA 
2686a     D9 EA DC EA 
2686e     E8 EA F1 EA 
26872     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
26876     A6 EB 9E 11 
2687a     A0 11 96 11 
2687e     8D 11 85 11 
26882     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
26886     6A 11 CA 0D 
2688a     36 0B 57 F8 
2688e     6C ED 57 EB 
26892     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
26896     F4 EA FF EA 
2689a     09 EB 15 EB 
2689e     1E EB 1A FD 
268a2     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
268a6     ED 0A E8 0A 
268aa     E2 0A DC 0A 
268ae     D6 0A D1 0A 
268b2     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
268b6     F8 F3 BC EC 
268ba     57 EB 1E EB 
268be     18 EB 24 EB 
268c2     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
268c6     42 EB 4D EB 
268ca     08 09 20 0B 
268ce     1A 0B 14 0B 
268d2     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
268d6     04 0B FE 0A 
268da     F9 0A F2 0A 
268de     84 08 3A F1 
268e2     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
268e6     42 EB 42 EB 
268ea     4E EB 57 EB 
268ee     62 EB 6B EB 
268f2     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
268f6     48 0B 43 0B 
268fa     3C 0B 36 0B 
268fe     31 0B 2C 0B 
26902     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
26906     1B 0B 5C 00 
2690a     6A EF 1B EC 
2690e     81 EB 6A EB 
26912     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
26916     85 EB 8E EB 
2691a     99 EB A3 EB 
2691e     DD 05 E5 05 
26922     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
26926     DB 05 D8 05 
2692a     D5 05 D1 05 
2692e     D0 05 CB 05 
26932     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
26936     0C EC BB EB 
2693a     B3 EB BB EB 
2693e     C5 EB D0 EB 
26942     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
26946     E4 F7 2C 06 
2694a     28 06 24 06 
2694e     22 06 1F 06 
26952     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
26956     16 06 14 06 
2695a     0F 06 D0 F3 
2695e     65 ED 2D EC 
26962     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
26966     01 EC 0A EC 
2696a     14 EC 1E EC 
2696e     29 EC FB 03 
26972     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
26976     63 06 60 06 
2697a     5E 06 59 06 
2697e     58 06 54 06 
26982     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
26986     69 F1 21 ED 
2698a     55 EC 33 EC 
2698e     36 EC 40 EC 
26992     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
26996     5C EC 68 EC 
2699a     92 02 D9 02 
2699e     D7 02 D7 02 
269a2     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
269a6     D1 02 D1 02 
269aa     CE 02 CD 02 
269ae     5D FC 80 EF 
269b2     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
269b6     83 EC 8A EC 
269ba     93 EC 9C EC 
269be     A5 EC B1 EC 
269c2     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
269c6     2B 03 2A 03 
269ca     29 03 26 03 
269ce     25 03 24 03 
269d2     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
269d6     1F 03 70 F7 
269da     D0 EE 27 ED 
269de     DB EC D4 EC 
269e2     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
269e6     F0 EC FA EC 
269ea     02 ED F9 F4 
269ee     7B 03 7C 03 
269f2     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
269f6     75 03 73 03 
269fa     72 03 70 03 
269fe     6D 03 6C 03 
26a02     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
26a06     54 ED 22 ED 
26a0a     22 ED 2C ED 
26a0e     35 ED 3F ED 
26a12     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
26a16     14 01 C3 03 
26a1a     C1 03 C0 03 
26a1e     5F 01 A5 00 
26a22     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
26a26     7B 00 7C 00 
26a2a     20 00 85 F1 
26a2e     2A EE 89 ED 
26a32     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
26a36     80 ED 87 ED 
26a3a     90 ED 9A ED 
26a3e     A3 ED 73 00 
26a42     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
26a46     D0 00 D0 00 
26a4a     D0 00 D0 00 
26a4e     D0 00 CF 00 
26a52     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
26a56     80 F0 3D EE 
26a5a     D5 ED C7 ED 
26a5e     CD ED D6 ED 
26a62     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
26a66     F2 ED FA ED 
26a6a     1D 01 29 01 
26a6e     27 01 27 01 
26a72     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
26a76     25 01 26 01 
26a7a     26 01 23 01 
26a7e     D0 F7 EC EF 
26a82     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
26a86     1C EE 24 EE 
26a8a     2D EE 37 EE 
26a8e     40 EE 47 EE 
26a92     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
26a96     7D 01 7B 01 
26a9a     7A 01 7A 01 
26a9e     79 01 78 01 
26aa2     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
26aa6     84 FE DE F3 
26aaa     6C EF 93 EE 
26aae     72 EE 72 EE 
26ab2     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
26ab6     8B EE 95 EE 
26aba     9E EE 15 FC 
26abe     67 FE 67 FE 
26ac2     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
26ac6     6B FE 6B FE 
26aca     6D FE 6D FE 
26ace     6D FE 6F FE 
26ad2     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
26ad6     DF EE CC EE 
26ada     CF EE D9 EE 
26ade     E1 EE EA EE 
26ae2     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
26ae6     5A FE C4 FE 
26aea     C3 FE C5 FE 
26aee     C6 FE C6 FE 
26af2     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
26af6     C8 FE C7 FE 
26afa     DA FB 85 F1 
26afe     8D EF 31 EF 
26b02     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
26b06     34 EF 3E EF 
26b0a     46 EF 4F EF 
26b0e     57 EF 0D FF 
26b12     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
26b16     1F FF 1F FF 
26b1a     21 FF 21 FF 
26b1e     21 FF 21 FF 
26b22     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
26b26     15 F1 BE EF 
26b2a     84 EF 7E EF 
26b2e     88 EF 8F EF 
26b32     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
26b36     A9 EF 06 F2 
26b3a     A6 FC AB FC 
26b3e     AD FC AE FC 
26b42     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
26b46     B2 FC B4 FC 
26b4a     B6 FC B7 FC 
26b4e     8B F4 BD F0 
26b52     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
26b56     E4 EF EE EF 
26b5a     F6 EF FD EF 
26b5e     04 F0 0E F0 
26b62     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
26b66     0B FD 0D FD 
26b6a     0F FD 11 FD 
26b6e     11 FD 13 FD 
26b72     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
26b76     17 FD 64 F3 
26b7a     CD F0 52 F0 
26b7e     41 F0 45 F0 
26b82     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
26b86     5B F0 64 F0 
26b8a     6D F0 FB FC 
26b8e     65 FD 68 FD 
26b92     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
26b96     6C FD 6D FD 
26b9a     6F FD 70 FD 
26b9e     72 FD B3 FB 
26ba2     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
26ba6     A4 F0 99 F0 
26baa     A0 F0 A8 F0 
26bae     AE F0 B9 F0 
26bb2     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
26bb6     CB FB DD FB 
26bba     DE FB E0 FB 
26bbe     E3 FB E3 FB 
26bc2     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
26bc6     E9 FB EC FB 
26bca     62 F7 27 F2 
26bce     2A F1 FF F0 
26bd2     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
26bd6     0C F1 13 F1 
26bda     1B F1 23 F1 
26bde     33 F2 3C FC 
26be2     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
26be6     42 FC 45 FC 
26bea     47 FC 48 FC 
26bee     4A FC 4C FC 
26bf2     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
26bf6     20 F2 77 F1 
26bfa     5C F1 5F F1 
26bfe     64 F1 6C F1 
26c02     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
26c06     83 F1 DC F8 
26c0a     9A FC 9A FC 
26c0e     9B FC 9E FC 
26c12     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
26c16     A3 FC A4 FC 
26c1a     A6 FC A9 FC 
26c1e     90 F4 33 F2 
26c22     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
26c26     BA F1 BF F1 
26c2a     C7 F1 CE F1 
26c2e     D6 F1 DC F1 
26c32     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
26c36     F3 FC F5 FC 
26c3a     FE FB 79 FB 
26c3e     62 FB 5F FB 
26c42     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
26c46     6F FA AF F3 
26c4a     53 F2 12 F2 
26c4e     0F F2 15 F2 
26c52     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
26c56     2A F2 32 F2 
26c5a     38 F2 9A FB 
26c5e     AF FB B1 FB 
26c62     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
26c66     B7 FB B8 FB 
26c6a     BA FB BC FB 
26c6e     C1 FB 3B F8 
26c72     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
26c76     6E F2 6C F2 
26c7a     74 F2 7A F2 
26c7e     81 F2 87 F2 
26c82     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
26c86     06 FC 09 FC 
26c8a     0C FC 0E FC 
26c8e     0F FC 12 FC 
26c92     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
26c96     17 FC 1A FC 
26c9a     B2 F6 7B F3 
26c9e     DD F2 C5 F2 
26ca2     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
26ca6     D4 F2 DB F2 
26caa     E0 F2 E8 F2 
26cae     28 F8 60 FC 
26cb2     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
26cb6     64 FC 66 FC 
26cba     68 FC 6A FC 
26cbe     6D FC 52 FC 
26cc2     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
26cc6     78 F3 24 F3 
26cca     1A F3 1E F3 
26cce     24 F3 2A F3 
26cd2     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
26cd6     3D F3 80 FA 
26cda     0C FB 0F FB 
26cde     10 FB 14 FB 
26ce2     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
26ce6     1B FB 1D FB 
26cea     1F FB 92 FA 
26cee     DE F4 AE F3 
26cf2     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
26cf6     79 F3 7E F3 
26cfa     84 F3 8C F3 
26cfe     92 F3 97 F3 
26d02     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
26d06     67 FB 69 FB 
26d0a     6B FB 6F FB 
26d0e     71 FB 72 FB 
26d12     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
26d16     E3 F8 BA F4 
26d1a     EE F3 CC F3 
26d1e     CA F3 CF F3 
26d22     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
26d26     E2 F3 E8 F3 
26d2a     ED F3 B7 FB 
26d2e     BC FB BE FB 
26d32     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
26d36     C4 FB C6 FB 
26d3a     C8 FB C9 FB 
26d3e     CC FB 8F F7 
26d42     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
26d46     1E F4 1E F4 
26d4a     24 F4 2A F4 
26d4e     30 F4 38 F4 
26d52     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
26d56     AD FA B1 FA 
26d5a     B4 FA B6 FA 
26d5e     BA FA BB FA 
26d62     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
26d66     C2 FA C6 FA 
26d6a     55 F6 C6 F4 
26d6e     7D F4 72 F4 
26d72     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
26d76     83 F4 89 F4 
26d7a     8F F4 94 F4 
26d7e     66 FA 03 FB 
26d82     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
26d86     0A FB 0E FB 
26d8a     10 FB 11 FB 
26d8e     16 FB 18 FB 
26d92     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
26d96     F9 F4 CA F4 
26d9a     C5 F4 CB F4 
26d9e     D1 F4 D7 F4 
26da2     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
26da6     E8 F4 3F FB 
26daa     56 FB 58 FB 
26dae     5A FB 5E FB 
26db2     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
26db6     64 FB 64 FB 
26dba     69 FB 99 F9 
26dbe     E9 F5 33 F5 
26dc2     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
26dc6     1D F5 22 F5 
26dca     27 F5 2E F5 
26dce     32 F5 37 F5 
26dd2     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
26dd6     BC FA BC FA 
26dda     C1 FA C2 FA 
26dde     C4 FA C8 FA 
26de2     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
26de6     F9 F7 DB F5 
26dea     78 F5 69 F5 
26dee     6A F5 70 F5 
26df2     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
26df6     7F F5 85 F5 
26dfa     6E F7 06 FB 
26dfe     0A FB 0B FB 
26e02     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
26e06     14 FB 15 FB 
26e0a     18 FB 1B FB 
26e0e     1D FB 70 F7 
26e12     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
26e16     B6 F5 BB F5 
26e1a     C0 F5 C6 F5 
26e1e     CA F5 CF F5 
26e22     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
26e26     54 FB 56 FB 
26e2a     5A FB 5B FB 
26e2e     5E FB 5F FB 
26e32     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
26e36     67 FB 52 FB 
26e3a     29 F7 33 F6 
26e3e     06 F6 02 F6 
26e42     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
26e46     10 F6 16 F6 
26e4a     1A F6 1F F6 
26e4e     81 FB 9F FB 
26e52     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
26e56     51 FB F2 FA 
26e5a     E3 FA E3 FA 
26e5e     E5 FA E9 FA 
26e62     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
26e66     64 F6 4D F6 
26e6a     4D F6 53 F6 
26e6e     57 F6 5C F6 
26e72     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
26e76     6A F6 19 FB 
26e7a     1E FB 22 FB 
26e7e     23 FB 24 FB 
26e82     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
26e86     2C FB 2E FB 
26e8a     32 FB F0 F8 
26e8e     01 F7 A5 F6 
26e92     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
26e96     9F F6 A3 F6 
26e9a     A6 F6 AC F6 
26e9e     B0 F6 EB F7 
26ea2     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
26ea6     68 FB 6C FB 
26eaa     6E FB 71 FB 
26eae     72 FB 74 FB 
26eb2     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
26eb6     71 F8 21 F7 
26eba     E5 F6 DD F6 
26ebe     E1 F6 E6 F6 
26ec2     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
26ec6     F5 F6 F7 F6 
26eca     F7 FA AB FB 
26ece     AD FB AF FB 
26ed2     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
26ed6     B6 FB B9 FB 
26eda     BB FB BC FB 
26ede     21 FB 07 F8 
26ee2     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
26ee6     22 F7 26 F7 
26eea     2B F7 2E F7 
26eee     34 F7 38 F7 
26ef2     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
26ef6     13 FB 16 FB 
26efa     17 FB 1B FB 
26efe     1E FB 20 FB 
26f02     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
26f06     26 FB 77 FA 
26f0a     F3 F7 7C F7 
26f0e     67 F7 6A F7 
26f12     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
26f16     74 F7 7A F7 
26f1a     7E F7 82 F7 
26f1e     53 FB 5A FB 
26f22     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
26f26     5F FB 63 FB 
26f2a     65 FB 67 FB 
26f2e     69 FB 6A FB 
26f32     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
26f36     B5 F7 A9 F7 
26f3a     AD F7 B0 F7 
26f3e     B5 F7 B8 F7 
26f42     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
26f46     6E F8 99 FB 
26f4a     9C FB 9D FB 
26f4e     9F FB A4 FB 
26f52     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
26f56     A9 FB AB FB 
26f5a     AD FB 46 F9 
26f5e     26 F8 F0 F7 
26f62     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
26f66     F4 F7 F8 F7 
26f6a     FB F7 FF F7 
26f6e     03 F8 65 FA 
26f72     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
26f76     2B FB 2F FB 
26f7a     30 FB 32 FB 
26f7e     34 FB 38 FB 
26f82     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
26f86     E9 F8 4A F8 
26f8a     2E F8 2C F8 
26f8e     2F F8 36 F8 
26f92     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
26f96     41 F8 44 F8 
26f9a     4A FB 67 FB 
26f9e     68 FB 6B FB 
26fa2     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
26fa6     73 FB 74 FB 
26faa     78 FB 7A FB 
26fae     14 FB E7 F8 
26fb2     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
26fb6     6D F8 70 F8 
26fba     73 F8 78 F8 
26fbe     7C F8 80 F8 
26fc2     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
26fc6     A6 FB A7 FB 
26fca     A9 FB AC FB 
26fce     AF FB B1 FB 
26fd2     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
26fd6     B7 FB 73 FA 
26fda     F8 F8 B4 F8 
26fde     A9 F8 AB F8 
26fe2     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
26fe6     B4 F8 B8 F8 
26fea     BB F8 FA F8 
26fee     64 FB 65 FB 
26ff2     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
26ff6     6D FB 6F FB 
26ffa     70 FB 74 FB 
26ffe     77 FB 77 FB 
27002     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
27006     E9 F8 E4 F8 
2700a     E8 F8 EB F8 
2700e     EE F8 F2 F8 
27012     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
27016     B5 FA 9F FB 
2701a     A1 FB A4 FB 
2701e     A5 FB A9 FB 
27022     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
27026     AE FB B1 FB 
2702a     B2 FB C7 F9 
2702e     39 F9 22 F9 
27032     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
27036     26 F9 2A F9 
2703a     2E F9 32 F9 
2703e     33 F9 BA FB 
27042     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
27046     DE FB E1 FB 
2704a     E2 FB E4 FB 
2704e     E5 FB E7 FB 
27052     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
27056     C5 F9 67 F9 
2705a     57 F9 56 F9 
2705e     5B F9 5F F9 
27062     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
27066     68 F9 6C F9 
2706a     0B FC 11 FC 
2706e     14 FC 15 FC 
27072     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
27076     B5 FB B5 FB 
2707a     B6 FB B8 FB 
2707e     E9 FA C8 F9 
27082     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
27086     90 F9 94 F9 
2708a     95 F9 99 F9 
2708e     9D F9 9F F9 
27092     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
27096     DE FB DF FB 
2709a     E2 FB E4 FB 
2709e     E6 FB E8 FB 
270a2     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
270a6     EF FB AC FA 
270aa     E9 F9 C7 F9 
270ae     C3 F9 C8 F9 
270b2     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
270b6     D0 F9 D4 F9 
270ba     D6 F9 0E FB 
270be     11 FC 13 FC 
270c2     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
270c6     19 FC 1B FC 
270ca     1D FC 1E FC 
270ce     21 FC 22 FC 
270d2     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
270d6     F7 F9 F7 F9 
270da     FB F9 FE F9 
270de     00 FA 03 FA 
270e2     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
270e6     1B FC 45 FC 
270ea     46 FC 48 FC 
270ee     4A FC 4B FC 
270f2     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
270f6     52 FC 54 FC 
270fa     F3 FB 82 FA 
270fe     35 FA 28 FA 
27102     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
27106     31 FA 32 FA 
2710a     37 FA 37 FA 
2710e     3C FA 00 FC 
27112     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
27116     09 FC 0B FC 
2711a     0F FC 12 FC 
2711e     12 FC 15 FC 
27122     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
27126     8D FA 60 FA 
2712a     5B FA 5C FA 
2712e     60 FA 61 FA 
27132     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
27136     6C FA 6D FA 
2713a     37 FC 3A FC 
2713e     3B FC 3D FC 
27142     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
27146     43 FC 44 FC 
2714a     45 FC 47 FC 
2714e     51 FB AB FA 
27152     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
27156     8E FA 91 FA 
2715a     93 FA 95 FA 
2715e     98 FA 9B FA 
27162     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
27166     68 FC 6A FC 
2716a     6C FC 6E FC 
2716e     70 FC 72 FC 
27172     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
27176     76 FC 3B FB 
2717a     D0 FA BB FA 
2717e     B9 FA BD FA 
27182     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
27186     C4 FA C6 FA 
2718a     CA FA 13 FC 
2718e     3A FC 3A FC 
27192     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
27196     41 FC 43 FC 
2719a     44 FC 47 FC 
2719e     48 FC 3C FC 
271a2     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
271a6     E6 FA E8 FA 
271aa     EB FA EE FA 
271ae     F0 FA F2 FA 
271b2     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
271b6     61 FC 66 FC 
271ba     68 FC 6B FC 
271be     6C FC 6E FC 
271c2     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
271c6     73 FC 75 FC 
271ca     13 FC 3F FB 
271ce     17 FB 12 FB 
271d2     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
271d6     1A FB 1D FB 
271da     1F FB 20 FB 
271de     23 FB 92 FC 
271e2     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
271e6     96 FC 97 FC 
271ea     9A FC 9C FC 
271ee     9E FC 9F FC 
271f2     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
271f6     5A FB 41 FB 
271fa     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
271fe     01 00 00 00 
27202     00 00 00 00 
27206     00 00 00 00 
2720a     00 00 00 00 | mouse  file "mouse2.def"
2720e     00 00 00 00 
27212     00 00 00 00 
27216     00 00 00 00 
2721a     00 00 00 00 | 	byte	$00[16]
2721e     01 01 00 00 
27222     00 00 00 00 
27226     00 00 00 00 
2722a     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2722e     00 00 00 00 
27232     00 00 00 00 
27236     00 00 00 00 
2723a     00 00 00 00 | 	byte	$00[16]
2723e     01 0D 01 00 
27242     00 00 00 00 
27246     00 00 00 00 
2724a     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2724e     00 00 00 00 
27252     00 00 00 00 
27256     00 00 00 00 
2725a     00 00 00 00 | 	byte	$00[16]
2725e     01 0D 0D 01 
27262     00 00 00 00 
27266     00 00 00 00 
2726a     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2726e     00 00 00 00 
27272     00 00 00 00 
27276     00 00 00 00 
2727a     00 00 00 00 | 	byte	$00[16]
2727e     01 0D 0D 0D 
27282     01 00 00 00 
27286     00 00 00 00 
2728a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2728e     00 00 00 00 
27292     00 00 00 00 
27296     00 00 00 00 
2729a     00 00 00 00 | 	byte	$00[16]
2729e     01 0D 0D 0D 
272a2     0D 01 00 00 
272a6     00 00 00 00 
272aa     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
272ae     00 00 00 00 
272b2     00 00 00 00 
272b6     00 00 00 00 
272ba     00 00 00 00 | 	byte	$00[16]
272be     01 0D 0D 0D 
272c2     0D 0D 01 00 
272c6     00 00 00 00 
272ca     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
272ce     00 00 00 00 
272d2     00 00 00 00 
272d6     00 00 00 00 
272da     00 00 00 00 | 	byte	$00[16]
272de     01 0D 0D 0D 
272e2     0D 0D 0D 01 
272e6     00 00 00 00 
272ea     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
272ee     00 00 00 00 
272f2     00 00 00 00 
272f6     00 00 00 00 
272fa     00 00 00 00 | 	byte	$00[16]
272fe     01 0D 0D 0D 
27302     0D 0D 0D 0C 
27306     01 00 00 00 
2730a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
2730e     00 00 00 00 
27312     00 00 00 00 
27316     00 00 00 00 
2731a     00 00 00 00 | 	byte	$00[16]
2731e     01 0D 0D 0D 
27322     0D 0D 0D 0D 
27326     0C 01 00 00 
2732a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
2732e     00 00 00 00 
27332     00 00 00 00 
27336     00 00 00 00 
2733a     00 00 00 00 | 	byte	$00[16]
2733e     01 0D 0D 0D 
27342     0D 0D 0D 0D 
27346     0D 0C 01 00 
2734a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
2734e     00 00 00 00 
27352     00 00 00 00 
27356     00 00 00 00 
2735a     00 00 00 00 | 	byte	$00[16]
2735e     01 0D 0D 0D 
27362     0D 0D 0D 0D 
27366     0D 0D 0B 01 
2736a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
2736e     00 00 00 00 
27372     00 00 00 00 
27376     00 00 00 00 
2737a     00 00 00 00 | 	byte	$00[16]
2737e     01 0D 0D 0D 
27382     0C 0D 0D 03 
27386     01 01 01 01 
2738a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
2738e     00 00 00 00 
27392     00 00 00 00 
27396     00 00 00 00 
2739a     00 00 00 00 | 	byte	$00[16]
2739e     01 0D 0D 0C 
273a2     01 09 0D 03 
273a6     00 00 00 00 
273aa     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
273ae     00 00 00 00 
273b2     00 00 00 00 
273b6     00 00 00 00 
273ba     00 00 00 00 | 	byte	$00[16]
273be     01 0D 0C 01 
273c2     00 01 0D 0B 
273c6     01 00 00 00 
273ca     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
273ce     00 00 00 00 
273d2     00 00 00 00 
273d6     00 00 00 00 
273da     00 00 00 00 | 	byte	$00[16]
273de     01 0C 01 00 
273e2     00 01 0A 0D 
273e6     01 00 00 00 
273ea     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
273ee     00 00 00 00 
273f2     00 00 00 00 
273f6     00 00 00 00 
273fa     00 00 00 00 | 	byte	$00[16]
273fe     01 01 00 00 
27402     00 00 01 0D 
27406     0B 01 00 00 
2740a     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
2740e     00 00 00 00 
27412     00 00 00 00 
27416     00 00 00 00 
2741a     00 00 00 00 
2741e     00 00 00 00 
27422     00 00       | 	byte	$00[22]
27424     01 0B 0D 01 
27428     00 00 00 00 
2742c     00 00 00 00 
27430     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27434     00 00 00 00 
27438     00 00 00 00 
2743c     00 00 00 00 
27440     00 00 00 00 
27444     00          | 	byte	$00[17]
27445     01 01 00 00 
27449     00 00 00 00 
2744d     00 00 00 00 
27451     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27455     00 00 00 00 
      ...             
275f9     00 00 00 00 
275fd     00          | 	byte	$00[425]
275fe                 | 
275fe     00 00       |              	org
27600 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
27604 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
27608 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
2760c 003             | 
2760c 003 00 30 04 F6 |                 mov     psramaddr,#0
27610 004             | 
27610 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
27614 005 20 00 00 FF 
27618 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
2761c 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
27620 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
27624 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
27628 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
2762c 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
27630 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
27634 00d             | 
27634 00d 20 00 00 FF 
27638 00e 00 30 04 F1 |                 add 	psramaddr,##16384
2763c 00f E0 03 00 FF 
27640 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
27644 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
27648 012             | 
27648 012             |                 
27648 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
2764c 013             |     
2764c 013 01 2C 60 FD |                 cogid 	t11				' get id
27650 014 00 00 EC FC |                 coginit #0,#0				' start the new program
27654 015 03 2C 60 FD |                 cogstop t11				' stop the loader
27658 016             | 
27658 016 00 00 00 00 | t11 		long 	0
2765c 017 00 FF 07 00 | mailbox 	long 	$7FF00
27660 018 00 00 00 00 | psramaddr 	long 	0
27664 019 00 00 00 00 | pslockval	long 	0
27668 01a 00 00 00 00 | cmd             long    0
2766c 01b 00 00 00 00 | buf1            long    0
27670 01c 00 40 00 00 | buf2            long    16384
27674 01d 78 76 02 00 | 	long	@@@_dat_ + 8468
27678 01e 50 32 20 52 
2767c 01f 65 74 72 6F 
27680 020 6D 61 63 68 
27684 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
27688 022 42 41 53 49 
2768c 023 43 20 76 65 
27690 024 72 73 69 6F 
27694 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
27698 026 32 33 61 00 | 	byte	$32, $33, $61, $00
2769c 027             | 	alignl
2769c 027             | _hg010b_spin2_dat_
2769c 027             | 
2769c 027 00 00 00 00 
276a0 028 00 00 00 00 
276a4 029 00 00 00 00 
276a8 02a 00 00 00 00 
276ac 02b 00 00 00    | vga_font       file "vgafont.def"
276af 02b 7E 81 A5 81 
276b3 02c 81 BD 99 81 
276b7 02d 81 7E 00 00 
276bb 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
276bf 02f 7E FF DB FF 
276c3 030 FF C3 E7 FF 
276c7 031 FF 7E 00 00 
276cb 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
276cf 033 00 36 7F 7F 
276d3 034 7F 7F 3E 1C 
276d7 035 08 00 00 00 
276db 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
276df 037 00 08 1C 3E 
276e3 038 7F 3E 1C 08 
276e7 039 00 00 00 00 
276eb 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
276ef 03b 18 3C 3C E7 
276f3 03c E7 E7 18 18 
276f7 03d 3C 00 00 00 
276fb 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
276ff 03f 18 3C 7E FF 
27703 040 FF 7E 18 18 
27707 041 3C 00 00 00 
2770b 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
2770f 043 00 00 00 18 
27713 044 3C 3C 18 00 
27717 045 00 00 00 00 
2771b 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
2771f 047 FF FF FF E7 
27723 048 C3 C3 E7 FF 
27727 049 FF FF FF FF 
2772b 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2772f 04b 00 00 3C 66 
27733 04c 42 42 66 3C 
27737 04d 00 00 00 00 
2773b 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
2773f 04f FF FF C3 99 
27743 050 BD BD 99 C3 
27747 051 FF FF FF FF 
2774b 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2774f 053 78 70 58 4C 
27753 054 1E 33 33 33 
27757 055 33 1E 00 00 
2775b 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
2775f 057 3C 66 66 66 
27763 058 66 3C 18 7E 
27767 059 18 18 00 00 
2776b 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
2776f 05b FC CC FC 0C 
27773 05c 0C 0C 0C 0E 
27777 05d 0F 07 00 00 
2777b 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
2777f 05f FE C6 FE C6 
27783 060 C6 C6 C6 E6 
27787 061 E7 67 03 00 
2778b 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
2778f 063 18 18 DB 3C 
27793 064 E7 3C DB 18 
27797 065 18 00 00 00 
2779b 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
2779f 067 03 07 0F 1F 
277a3 068 7F 1F 0F 07 
277a7 069 03 01 00 00 
277ab 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
277af 06b 60 70 78 7C 
277b3 06c 7F 7C 78 70 
277b7 06d 60 40 00 00 
277bb 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
277bf 06f 18 3C 7E 18 
277c3 070 18 18 7E 3C 
277c7 071 18 00 00 00 
277cb 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
277cf 073 66 66 66 66 
277d3 074 66 66 66    | 	byte	$66[7]
277d6 075 00 66 66 00 
277da 076 00 00 00 00 
277de 077 00 FE DB DB 
277e2 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
277e6 079 D8 D8 D8 00 
277ea 07a 00 00 00 3E 
277ee 07b 63 06 1C 36 
277f2 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
277f6 07d 30 63 3E 00 
277fa 07e 00 00 00 00 
277fe 07f 00 00 00 00 
27802 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
27806 081 7F 7F 7F 00 
2780a 082 00 00 00 00 
2780e 083 00 18 3C 7E 
27812 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
27816 085 3C 18 7E 00 
2781a 086 00 00 00 00 
2781e 087 00 18 3C 7E 
27822 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
27826 089 18 18 18 00 
2782a 08a 00 00 00 00 
2782e 08b 00 18 18 18 
27832 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
27836 08d 7E 3C 18 00 
2783a 08e 00 00 00 00 
2783e 08f 00 00 00 18 
27842 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
27846 091 00 00 00 00 
2784a 092 00 00 00 00 
2784e 093 00 00 00    | 	byte	$00[11]
27851 094 0C 06 7F 06 
27855 095 0C 00 00 00 
27859 096 00 00 00 00 
2785d 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27861 098 00 03 03 03 
27865 099 7F 00 00 00 
27869 09a 00 00 00 00 
2786d 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27871 09c 14 36 7F 36 
27875 09d 14 00 00 00 
27879 09e 00 00 00 00 
2787d 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
27881 0a0 1C 1C 3E 3E 
27885 0a1 7F 7F 00 00 
27889 0a2 00 00 00 00 
2788d 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
27891 0a4 7F 3E 3E 1C 
27895 0a5 1C 08 00 00 
27899 0a6 00 00 00 00 
2789d 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
278a1 0a8 00 00 00 00 
278a5 0a9 00 00 00 00 
278a9 0aa 00 00 00 00 
278ad 0ab 00 00       | 	byte	$00[14]
278af 0ab 18 3C 3C 3C 
278b3 0ac 18 18 18 00 
278b7 0ad 18 18 00 00 
278bb 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
278bf 0af 66 24 00 00 
278c3 0b0 00 00 00 00 
278c7 0b1 00 00 00 00 
278cb 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
278cf 0b3 00 36 36 7F 
278d3 0b4 36 36 36 7F 
278d7 0b5 36 36 00 00 
278db 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
278df 0b7 3E 63 43 03 
278e3 0b8 3E 60 60 61 
278e7 0b9 63 3E 18 18 
278eb 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
278ef 0bb 00 00 43 63 
278f3 0bc 30 18 0C 06 
278f7 0bd 63 61 00 00 
278fb 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
278ff 0bf 1C 36 36 1C 
27903 0c0 6E 3B 33 33 
27907 0c1 33 6E 00 00 
2790b 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
2790f 0c3 0C 0C 0C 06 
27913 0c4 00 00 00 00 
27917 0c5 00 00 00 00 
2791b 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2791f 0c7 30 18 0C 0C 
27923 0c8 0C 0C 0C 0C 
27927 0c9 18 30 00 00 
2792b 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
2792f 0cb 0C 18 30 30 
27933 0cc 30 30 30 30 
27937 0cd 18 0C 00 00 
2793b 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
2793f 0cf 00 00 00 66 
27943 0d0 3C FF 3C 66 
27947 0d1 00 00 00 00 
2794b 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
2794f 0d3 00 00 00 18 
27953 0d4 18 7E 18 18 
27957 0d5 00 00 00 00 
2795b 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
2795f 0d7 00 00 00 00 
27963 0d8 00 00 00 00 | 	byte	$00[8]
27967 0d9 18 18 18 0C 
2796b 0da 00 00 00 00 
2796f 0db 00 00 00 00 
27973 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
27977 0dd 00 00 00 00 
2797b 0de 00 00 00 00 
2797f 0df 00 00 00 00 
27983 0e0 00 00 00 00 | 	byte	$00[16]
27987 0e1 18 18 00 00 
2798b 0e2 00 00 00 00 
2798f 0e3 00 00 40 60 
27993 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
27997 0e5 03 01 00 00 
2799b 0e6 00 00 00 00 
2799f 0e7 1C 36 63 63 
279a3 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
279a7 0e9 36 1C 00 00 
279ab 0ea 00 00 00 00 
279af 0eb 18 1C 1E 18 
279b3 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
279b7 0ed 18 7E 00 00 
279bb 0ee 00 00 00 00 
279bf 0ef 3E 63 60 30 
279c3 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
279c7 0f1 63 7F 00 00 
279cb 0f2 00 00 00 00 
279cf 0f3 3E 63 60 60 
279d3 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
279d7 0f5 63 3E 00 00 
279db 0f6 00 00 00 00 
279df 0f7 30 38 3C 36 
279e3 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
279e7 0f9 30 78 00 00 
279eb 0fa 00 00 00 00 
279ef 0fb 7F 03 03 03 
279f3 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
279f7 0fd 63 3E 00 00 
279fb 0fe 00 00 00 00 
279ff 0ff 1C 06 03 03 
27a03 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
27a07 101 63 3E 00 00 
27a0b 102 00 00 00 00 
27a0f 103 7F 63 60 60 
27a13 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
27a17 105 0C 0C 00 00 
27a1b 106 00 00 00 00 
27a1f 107 3E 63 63 63 
27a23 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
27a27 109 63 3E 00 00 
27a2b 10a 00 00 00 00 
27a2f 10b 3E 63 63 63 
27a33 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
27a37 10d 30 1E 00 00 
27a3b 10e 00 00 00 00 
27a3f 10f 00 00 00 18 
27a43 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
27a47 111 18 18 00 00 
27a4b 112 00 00 00 00 
27a4f 113 00 00 00 18 
27a53 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
27a57 115 18 18 0C 00 
27a5b 116 00 00 00 00 
27a5f 117 00 60 30 18 
27a63 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
27a67 119 30 60 00 00 
27a6b 11a 00 00 00 00 
27a6f 11b 00 00 00 7E 
27a73 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
27a77 11d 00 00 00 00 
27a7b 11e 00 00 00 00 
27a7f 11f 00          | 	byte	$00[9]
27a80 120 06 0C 18 30 
27a84 121 60 30 18 0C 
27a88 122 06 00 00 00 
27a8c 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
27a90 124 63 63 30 18 
27a94 125 18 18 00 18 
27a98 126 18 00 00 00 
27a9c 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
27aa0 128 3E 63 63 7B 
27aa4 129 7B 7B 3B 03 
27aa8 12a 3E 00 00 00 
27aac 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
27ab0 12c 1C 36 63 63 
27ab4 12d 7F 63 63 63 
27ab8 12e 63 00 00 00 
27abc 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
27ac0 130 66 66 66 3E 
27ac4 131 66 66 66 66 
27ac8 132 3F 00 00 00 
27acc 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
27ad0 134 66 43 03 03 
27ad4 135 03 03 43 66 
27ad8 136 3C 00 00 00 
27adc 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
27ae0 138 36 66 66 66 
27ae4 139 66 66 66 36 
27ae8 13a 1F 00 00 00 
27aec 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
27af0 13c 66 46 16 1E 
27af4 13d 16 06 46 66 
27af8 13e 7F 00 00 00 
27afc 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
27b00 140 66 46 16 1E 
27b04 141 16 06 06 06 
27b08 142 0F 00 00 00 
27b0c 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
27b10 144 66 43 03 03 
27b14 145 7B 63 63 66 
27b18 146 5C 00 00 00 
27b1c 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
27b20 148 63 63 63 7F 
27b24 149 63 63 63 63 
27b28 14a 63 00 00 00 
27b2c 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
27b30 14c 18 18 18 18 
27b34 14d 18 18 18 18 | 	byte	$18[8]
27b38 14e 3C 00 00 00 
27b3c 14f 00 00 00 78 
27b40 150 30 30 30 30 
27b44 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
27b48 152 1E 00 00 00 
27b4c 153 00 00 00 67 
27b50 154 66 66 36 1E 
27b54 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
27b58 156 67 00 00 00 
27b5c 157 00 00 00 0F 
27b60 158 06 06 06 06 
27b64 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
27b68 15a 7F 00 00 00 
27b6c 15b 00 00 00 63 
27b70 15c 77 7F 7F 6B 
27b74 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
27b78 15e 63 00 00 00 
27b7c 15f 00 00 00 63 
27b80 160 67 6F 7F 7B 
27b84 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
27b88 162 63 00 00 00 
27b8c 163 00 00 00 3E 
27b90 164 63 63 63 63 
27b94 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
27b98 166 3E 00 00 00 
27b9c 167 00 00 00 3F 
27ba0 168 66 66 66 3E 
27ba4 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
27ba8 16a 0F 00 00 00 
27bac 16b 00 00 00 3E 
27bb0 16c 63 63 63 63 
27bb4 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
27bb8 16e 3E 30 70 00 
27bbc 16f 00 00 00 3F 
27bc0 170 66 66 66 3E 
27bc4 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
27bc8 172 67 00 00 00 
27bcc 173 00 00 00 3E 
27bd0 174 63 63 06 1C 
27bd4 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
27bd8 176 3E 00 00 00 
27bdc 177 00 00 00 7E 
27be0 178 7E 5A 18 18 
27be4 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
27be8 17a 3C 00 00 00 
27bec 17b 00 00 00 63 
27bf0 17c 63 63 63 63 
27bf4 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
27bf8 17e 3E 00 00 00 
27bfc 17f 00 00 00 63 
27c00 180 63 63 63 63 
27c04 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
27c08 182 08 00 00 00 
27c0c 183 00 00 00 63 
27c10 184 63 63 63 6B 
27c14 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
27c18 186 36 00 00 00 
27c1c 187 00 00 00 63 
27c20 188 63 36 3E 1C 
27c24 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
27c28 18a 63 00 00 00 
27c2c 18b 00 00 00 66 
27c30 18c 66 66 66 3C 
27c34 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
27c38 18e 3C 00 00 00 
27c3c 18f 00 00 00 7F 
27c40 190 63 61 30 18 
27c44 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
27c48 192 7F 00 00 00 
27c4c 193 00 00 00 3C 
27c50 194 0C 0C 0C 0C 
27c54 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
27c58 196 3C 00 00 00 
27c5c 197 00 00 00 00 
27c60 198 01 03 07 0E 
27c64 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
27c68 19a 40 00 00 00 
27c6c 19b 00 00 00 3C 
27c70 19c 30 30 30 30 
27c74 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
27c78 19e 3C 00 00 00 
27c7c 19f 1C 36 00 00 
27c80 1a0 00 00 00 00 
27c84 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27c88 1a2 00 00 00 00 
27c8c 1a3 00 00 00 00 
27c90 1a4 00 00 00 00 
27c94 1a5 00 00 00 00 
27c98 1a6 00          | 	byte	$00[17]
27c99 1a6 FF 00 00 0C 
27c9d 1a7 18 00 00 00 
27ca1 1a8 00 00 00 00 
27ca5 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27ca9 1aa 00 00 00 00 
27cad 1ab 00 00 00 00 
27cb1 1ac 00          | 	byte	$00[9]
27cb2 1ac 1E 30 3E 33 
27cb6 1ad 33 33 6E 00 
27cba 1ae 00 00 00 00 
27cbe 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
27cc2 1b0 1E 36 66 66 
27cc6 1b1 66 66 3E 00 
27cca 1b2 00 00 00 00 
27cce 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
27cd2 1b4 3E 63 03 03 
27cd6 1b5 03 63 3E 00 
27cda 1b6 00 00 00 00 
27cde 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
27ce2 1b8 3C 36 33 33 
27ce6 1b9 33 33 6E 00 
27cea 1ba 00 00 00 00 
27cee 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
27cf2 1bc 3E 63 7F 03 
27cf6 1bd 03 63 3E 00 
27cfa 1be 00 00 00 00 
27cfe 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
27d02 1c0 0C 1E 0C 0C 
27d06 1c1 0C 0C 1E 00 
27d0a 1c2 00 00 00 00 
27d0e 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
27d12 1c4 6E 33 33 33 
27d16 1c5 33 33 3E 30 
27d1a 1c6 33 1E 00 00 
27d1e 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
27d22 1c8 36 6E 66 66 
27d26 1c9 66 66 67 00 
27d2a 1ca 00 00 00 00 
27d2e 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
27d32 1cc 1C 18 18 18 
27d36 1cd 18 18 3C 00 
27d3a 1ce 00 00 00 00 
27d3e 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
27d42 1d0 70 60 60 60 
27d46 1d1 60 60 60 66 
27d4a 1d2 66 3C 00 00 
27d4e 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
27d52 1d4 66 36 1E 1E 
27d56 1d5 36 66 67 00 
27d5a 1d6 00 00 00 00 
27d5e 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
27d62 1d8 18 18 18 18 
27d66 1d9 18 18       | 	byte	$18[6]
27d68 1da 3C 00 00 00 
27d6c 1db 00 00 00 00 
27d70 1dc 00 00 37 7F 
27d74 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
27d78 1de 63 00 00 00 
27d7c 1df 00 00 00 00 
27d80 1e0 00 00 3B 66 
27d84 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
27d88 1e2 66 00 00 00 
27d8c 1e3 00 00 00 00 
27d90 1e4 00 00 3E 63 
27d94 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
27d98 1e6 3E 00 00 00 
27d9c 1e7 00 00 00 00 
27da0 1e8 00 00 3B 66 
27da4 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
27da8 1ea 3E 06 06 0F 
27dac 1eb 00 00 00 00 
27db0 1ec 00 00 6E 33 
27db4 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
27db8 1ee 3E 30 30 78 
27dbc 1ef 00 00 00 00 
27dc0 1f0 00 00 3B 6E 
27dc4 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
27dc8 1f2 0F 00 00 00 
27dcc 1f3 00 00 00 00 
27dd0 1f4 00 00 3E 63 
27dd4 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
27dd8 1f6 3E 00 00 00 
27ddc 1f7 00 00 00 08 
27de0 1f8 0C 0C 3F 0C 
27de4 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
27de8 1fa 38 00 00 00 
27dec 1fb 00 00 00 00 
27df0 1fc 00 00 33 33 
27df4 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
27df8 1fe 6E 00 00 00 
27dfc 1ff 00 00 00 00 
27e00 200 00 00 63 63 
27e04 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
27e08 202 1C 00 00 00 
27e0c 203 00 00 00 00 
27e10 204 00 00 63 63 
27e14 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
27e18 206 36 00 00 00 
27e1c 207 00 00 00 00 
27e20 208 00 00 63 36 
27e24 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
27e28 20a 63 00 00 00 
27e2c 20b 00 00 00 00 
27e30 20c 00 00 63 63 
27e34 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
27e38 20e 7E 60 30 1F 
27e3c 20f 00 00 00 00 
27e40 210 00 00 7F 33 
27e44 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
27e48 212 7F 00 00 00 
27e4c 213 00 00 00 70 
27e50 214 18 18 18 0E 
27e54 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
27e58 216 70 00 00 00 
27e5c 217 00 00 00 18 
27e60 218 18 18 18 18 
27e64 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
27e68 21a 18 00 00 00 
27e6c 21b 00 00 00 0E 
27e70 21c 18 18 18 70 
27e74 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
27e78 21e 0E 00 00 00 
27e7c 21f 6E 3B 00 00 
27e80 220 00 00 00 00 
27e84 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27e88 222 00 00 00 00 
27e8c 223 00 00 00 00 
27e90 224 00 00       | 	byte	$00[10]
27e92 224 08 1C 36 63 
27e96 225 63 63 7F 00 
27e9a 226 00 00 00 00 
27e9e 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
27ea2 228 03 03 03 03 
27ea6 229 43 66 3C 18 
27eaa 22a 30 1E 00 00 
27eae 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
27eb2 22c 33 33 33 33 
27eb6 22d 33 33       | 	byte	$33[6]
27eb8 22e 6E 00 00 00 
27ebc 22f 00 00 60 30 
27ec0 230 18 00 3E 63 
27ec4 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
27ec8 232 3E 00 00 00 
27ecc 233 00 00 08 1C 
27ed0 234 36 00 1E 30 
27ed4 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
27ed8 236 6E 00 00 00 
27edc 237 00 00 00 00 
27ee0 238 33 00 1E 30 
27ee4 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
27ee8 23a 6E 00 00 00 
27eec 23b 00 00 1C 36 
27ef0 23c 1C 00 33 33 
27ef4 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
27ef8 23e 6E 00 00 00 
27efc 23f 00 00 60 30 
27f00 240 18 00 3E 63 
27f04 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
27f08 242 3E 00 00 00 
27f0c 243 00 00 00 00 
27f10 244 00 00 3E 63 
27f14 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
27f18 246 3E 18 30 1E 
27f1c 247 00 00 00 1C 
27f20 248 58 78 38 18 
27f24 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
27f28 24a 3C 00 00 00 
27f2c 24b 00 00 00 00 
27f30 24c 63 00 3E 63 
27f34 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
27f38 24e 3E 00 00 00 
27f3c 24f 66 33 00 3E 
27f40 250 63 63 63 63 
27f44 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
27f48 252 3E 00 00 00 
27f4c 253 00 00 CC 66 
27f50 254 33 00 3E 63 
27f54 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
27f58 256 3E 00 00 00 
27f5c 257 00 00 18 3C 
27f60 258 66 00 1C 18 
27f64 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
27f68 25a 3C 00 00 00 
27f6c 25b 30 18 00 7F 
27f70 25c 63 61 30 18 
27f74 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
27f78 25e 7F 00 00 00 
27f7c 25f 00 63 00 08 
27f80 260 1C 36 63 63 
27f84 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
27f88 262 63 00 00 00 
27f8c 263 30 18 00 3C 
27f90 264 66 43 03 03 
27f94 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
27f98 266 3C 00 00 00 
27f9c 267 30 18 00 7F 
27fa0 268 66 46 16 1E 
27fa4 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
27fa8 26a 7F 00 00 00 
27fac 26b 0C 06 00 0F 
27fb0 26c 06 06 06 06 
27fb4 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
27fb8 26e 7F 00 00 00 
27fbc 26f 30 18 00 1C 
27fc0 270 18 18 18 18 
27fc4 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
27fc8 272 3C 00 00 00 
27fcc 273 00 00 08 1C 
27fd0 274 36 00 3E 63 
27fd4 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
27fd8 276 3E 00 00 00 
27fdc 277 00 00 00 00 
27fe0 278 63 00 3E 63 
27fe4 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
27fe8 27a 3E 00 00 00 
27fec 27b 00 00 00 6F 
27ff0 27c 46 26 06 06 
27ff4 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
27ff8 27e 7F 00 00 00 
27ffc 27f 00 00 00 6E 
28000 280 4C 2C 0C 0C 
28004 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
28008 282 1E 00 00 00 
2800c 283 30 18 00 3E 
28010 284 63 63 06 1C 
28014 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
28018 286 3E 00 00 00 
2801c 287 00 00 60 30 
28020 288 18 00 3E 63 
28024 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
28028 28a 3E 00 00 00 
2802c 28b 00 63 00 3E 
28030 28c 63 63 63 63 
28034 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
28038 28e 3E 00 00 00 
2803c 28f 00 63 00 63 
28040 290 63 63 63 63 
28044 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
28048 292 3E 00 00 00 
2804c 293 6C 38 00 7E 
28050 294 7E 5A 18 18 
28054 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
28058 296 3C 00 00 00 
2805c 297 00 00 60 48 
28060 298 2C 0C 3F 0C 
28064 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
28068 29a 38 00 00 00 
2806c 29b 00 00 00 0F 
28070 29c 26 36 1E 0E 
28074 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
28078 29e 7F 00 00 00 
2807c 29f 00 00 00 00 
28080 2a0 00 63 36 1C 
28084 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
28088 2a2 00 00 00 00 
2808c 2a3 00 00       | 	byte	$00[6]
2808e 2a3 36 1C 08 00 
28092 2a4 3E 63 03 03 
28096 2a5 03 63 3E 00 
2809a 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
2809e 2a7 30 18 0C 00 
280a2 2a8 1E 30 3E 33 
280a6 2a9 33 33 6E 00 
280aa 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
280ae 2ab 60 30 18 00 
280b2 2ac 1C 18 18 18 
280b6 2ad 18 18 3C 00 
280ba 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
280be 2af 60 30 18 00 
280c2 2b0 3E 63 63 63 
280c6 2b1 63 63 3E 00 
280ca 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
280ce 2b3 30 18 0C 00 
280d2 2b4 33 33 33 33 
280d6 2b5 33 33 6E 00 
280da 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
280de 2b7 00 08 1C 36 
280e2 2b8 63 63 7F 63 
280e6 2b9 63 63 63 18 
280ea 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
280ee 2bb 00 00 00 00 
280f2 2bc 1E 30 3E 33 
280f6 2bd 33 33 6E 18 
280fa 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
280fe 2bf 00 7F 63 61 
28102 2c0 30 18 0C 06 
28106 2c1 43 63 7F 00 
2810a 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
2810e 2c3 36 1C 08 00 
28112 2c4 7F 33 18 0C 
28116 2c5 06 63 7F 00 
2811a 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
2811e 2c7 00 7F 66 46 
28122 2c8 16 1E 16 06 
28126 2c9 46 66 7F 18 
2812a 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
2812e 2cb 00 00 00 00 
28132 2cc 3E 63 7F 03 
28136 2cd 03 63 3E 18 
2813a 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
2813e 2cf 00 3C 66 03 
28142 2d0 1F 03 0F 03 
28146 2d1 03 66 3C 00 
2814a 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
2814e 2d3 60 30 18 00 
28152 2d4 7F 33 18 0C 
28156 2d5 06 63 7F 00 
2815a 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
2815e 2d7 00 3C 66 43 
28162 2d8 03 03 03 03 
28166 2d9 43 66 3C 00 
2816a 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
2816e 2db 00 00 00 00 
28172 2dc 3E 63 06 1C 
28176 2dd 30 63 3E 18 
2817a 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
2817e 2df 00 00 00 00 
28182 2e0 00 00       | 	byte	$00[6]
28184 2e1 6C 36 1B 36 
28188 2e2 6C 00 00 00 
2818c 2e3 00 00 00 00 
28190 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
28194 2e5 1B 36 6C 36 
28198 2e6 1B 00 00 00 
2819c 2e7 88 22 88 22 
281a0 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
281a4 2e9 88 22 88 22 
281a8 2ea 88 22 88 22 
281ac 2eb AA 55 AA 55 
281b0 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
281b4 2ed AA 55 AA 55 
281b8 2ee AA 55 AA 55 
281bc 2ef BB EE BB EE 
281c0 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
281c4 2f1 BB EE BB EE 
281c8 2f2 BB EE BB EE 
281cc 2f3 18 18 18 18 
281d0 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
281d4 2f5 18 18 18 18 
281d8 2f6 18 18 18 18 
281dc 2f7 18 18 18 18 
281e0 2f8 18 18 18    | 	byte	$18[15]
281e3 2f8 1F 18 18 18 
281e7 2f9 18 18 18 18 
281eb 2fa 18 30 18 00 
281ef 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
281f3 2fc 63 7F 63 63 
281f7 2fd 63 63 00 00 
281fb 2fe 00 1C 36 00 
281ff 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
28203 300 63 7F 63 63 
28207 301 63 63 00 00 
2820b 302 00 36 1C 00 
2820f 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
28213 304 1E 16 06 46 
28217 305 66 7F 00 00 
2821b 306 00 00 00 00 
2821f 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
28223 308 1C 30 60 63 
28227 309 63 3E 18 30 
2822b 30a 1E 6C 6C 6C 
2822f 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
28233 30c 6F 6C 6C 6C 
28237 30d 6C 6C 6C 6C 
2823b 30e 6C 6C 6C 6C 
2823f 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
28243 310 6C 6C 6C 6C 
28247 311 6C 6C 6C 6C 
2824b 312 6C          | 	byte	$6c[9]
2824c 313 00 00 00 00 
28250 314 00          | 	byte	$00[5]
28251 314 7F 60 6F 6C 
28255 315 6C 6C 6C 6C 
28259 316 6C 6C 6C 6C 
2825d 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
28261 318 6F 60 7F 00 
28265 319 00 00 00 00 
28269 31a 00 00 00 18 
2826d 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
28271 31c 61 30 18 0C 
28275 31d 06 43 63 7F 
28279 31e 00 00 00 00 
2827d 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
28281 320 00 7F 33 18 
28285 321 0C 06 63 7F 
28289 322 00 00 00 00 
2828d 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
28291 324 00 00 1F 18 
28295 325 18 18 18 18 
28299 326 18 18 18 18 
2829d 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
282a1 328 18 18 F8 00 
282a5 329 00 00 00 00 
282a9 32a 00 00 00 18 
282ad 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
282b1 32c 18 18 FF 00 
282b5 32d 00 00 00 00 
282b9 32e 00 00 00 00 
282bd 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
282c1 330 00 00 FF 18 
282c5 331 18 18 18 18 
282c9 332 18 18 18 18 
282cd 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
282d1 334 18 18 F8 18 
282d5 335 18 18 18 18 
282d9 336 18 18 18 00 
282dd 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
282e1 338 00 00 FF 00 
282e5 339 00 00 00 00 
282e9 33a 00 00 00 18 
282ed 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
282f1 33c 18 18 FF 18 
282f5 33d 18 18 18 18 
282f9 33e 18 18 18 63 
282fd 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
28301 340 36 63 63 7F 
28305 341 63 63 63 63 
28309 342 00 00 00 00 
2830d 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
28311 344 00 1E 30 3E 
28315 345 33 33 33 6E 
28319 346 00 00 00 6C 
2831d 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
28321 348 EC 0C FC 00 
28325 349 00 00 00 00 
28329 34a 00 00 00 00 
2832d 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
28331 34c FC 0C EC 6C 
28335 34d 6C 6C 6C 6C 
28339 34e 6C 6C 6C 6C 
2833d 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
28341 350 EF 00 FF 00 
28345 351 00 00 00 00 
28349 352 00 00 00 00 
2834d 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
28351 354 FF 00 EF 6C 
28355 355 6C 6C 6C 6C 
28359 356 6C 6C 6C 6C 
2835d 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
28361 358 EC 0C EC 6C 
28365 359 6C 6C 6C 6C 
28369 35a 6C 6C 6C 00 
2836d 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
28371 35c FF 00 FF 00 
28375 35d 00 00 00 00 
28379 35e 00 00 00 6C 
2837d 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
28381 360 EF 00 EF 6C 
28385 361 6C 6C 6C 6C 
28389 362 6C 6C 6C 00 
2838d 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
28391 364 63 3E 63 63 
28395 365 63 63 3E 63 
28399 366 00 00 00 00 
2839d 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
283a1 368 30 3C 36 33 
283a5 369 33 33 33 6E 
283a9 36a 00 00 00 00 
283ad 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
283b1 36c 66 66 6F 66 
283b5 36d 66 66 36 1F 
283b9 36e 00 00 00 36 
283bd 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
283c1 370 66 66 66 66 
283c5 371 66 66       | 	byte	$66[6]
283c7 371 36 1F 00 00 
283cb 372 00 00 63 00 
283cf 373 7F 66 46 16 
283d3 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
283d7 375 66 7F 00 00 
283db 376 00 6C 38 00 
283df 377 38 30 30 3C 
283e3 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
283e7 379 33 6E 00 00 
283eb 37a 00 36 1C 00 
283ef 37b 63 67 6F 7F 
283f3 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
283f7 37d 63 63 00 00 
283fb 37e 00 30 18 00 
283ff 37f 3C 18 18 18 
28403 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
28407 381 18 3C 00 00 
2840b 382 00 3C 66 00 
2840f 383 3C 18 18 18 
28413 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
28417 385 18 3C 00 00 
2841b 386 00 00 00 36 
2841f 387 1C 08 00 3E 
28423 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
28427 389 63 3E 00 00 
2842b 38a 00 18 18 18 
2842f 38b 18 18 18 18 
28433 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
28437 38d 00 00 00 00 
2843b 38e 00 00 00 00 
2843f 38f 00 00 00 00 | 	byte	$00[12]
28443 390 F8 18 18 18 
28447 391 18 18 18 18 
2844b 392 18 FF FF FF 
2844f 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
28453 394 FF FF FF FF 
28457 395 FF FF FF FF 
2845b 396 FF          | 	byte	$ff[9]
2845c 397 00 00 00 00 
28460 398 00 00 00    | 	byte	$00[7]
28463 398 FF FF FF FF 
28467 399 FF FF FF FF 
2846b 39a FF          | 	byte	$ff[9]
2846c 39b 00 00 00 7E 
28470 39c 7E 5A 18 18 
28474 39d 18 18 18 18 
28478 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
2847c 39f 1C 36 1C 63 
28480 3a0 63 63 63 63 
28484 3a1 63 63 63 63 
28488 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2848c 3a3 FF FF FF FF 
28490 3a4 FF FF FF    | 	byte	$ff[7]
28493 3a4 00 00 00 00 
28497 3a5 00 00 00 00 
2849b 3a6 00          | 	byte	$00[9]
2849c 3a7 30 18 00 3E 
284a0 3a8 63 63 63 63 
284a4 3a9 63 63 63 63 
284a8 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
284ac 3ab 00 00 00 1E 
284b0 3ac 33 33 33 1B 
284b4 3ad 33 63 63 63 
284b8 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
284bc 3af 1C 36 00 3E 
284c0 3b0 63 63 63 63 
284c4 3b1 63 63 63 63 
284c8 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
284cc 3b3 30 18 00 63 
284d0 3b4 67 6F 7F 7B 
284d4 3b5 73 63 63 63 
284d8 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
284dc 3b7 00 00 60 30 
284e0 3b8 18 00 3B 66 
284e4 3b9 66 66 66 66 
284e8 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
284ec 3bb 00 00 36 1C 
284f0 3bc 08 00 3B 66 
284f4 3bd 66 66 66 66 
284f8 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
284fc 3bf 36 1C 00 3E 
28500 3c0 63 63 06 1C 
28504 3c1 30 60 63 63 
28508 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
2850c 3c3 00 00 36 1C 
28510 3c4 08 00 3E 63 
28514 3c5 06 1C 30 63 
28518 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
2851c 3c7 30 18 00 3F 
28520 3c8 66 66 66 3E 
28524 3c9 36 66 66 66 
28528 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
2852c 3cb 30 18 00 63 
28530 3cc 63 63 63 63 
28534 3cd 63 63 63 63 
28538 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2853c 3cf 00 00 60 30 
28540 3d0 18 00 3B 6E 
28544 3d1 66 06 06 06 
28548 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
2854c 3d3 66 33 00 63 
28550 3d4 63 63 63 63 
28554 3d5 63 63 63 63 
28558 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2855c 3d7 00 00 60 30 
28560 3d8 18 00 63 63 
28564 3d9 63 63 63 63 
28568 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
2856c 3db 30 18 00 66 
28570 3dc 66 66 66 3C 
28574 3dd 18 18 18 18 
28578 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
2857c 3df 00 00 00 08 
28580 3e0 0C 0C 3F 0C 
28584 3e1 0C 0C 0C 6C 
28588 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
2858c 3e3 30 18 00 00 
28590 3e4 00 00 00 00 
28594 3e5 00 00 00 00 
28598 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2859c 3e7 00 00 00 00 
285a0 3e8 00 00 00 00 | 	byte	$00[8]
285a4 3e9 7F 00 00 00 
285a8 3ea 00 00 00 00 
285ac 3eb 66 33 00 00 
285b0 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
285b4 3ed 00 00 00 00 
285b8 3ee 00 00 00 00 
285bc 3ef 00 00 00 00 
285c0 3f0 00 00 00 00 
285c4 3f1 00 00 00 00 
285c8 3f2 00          | 	byte	$00[21]
285c9 3f2 0C 06 3C 36 
285cd 3f3 1C 00 00 00 
285d1 3f4 00 00 00 00 
285d5 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
285d9 3f6 00 00 00 63 
285dd 3f7 3E 00 00 00 
285e1 3f8 00 00 00 00 
285e5 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
285e9 3fa 00 00 00 00 
285ed 3fb 3E 63 06 1C 
285f1 3fc 36 63 63 36 
285f5 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
285f9 3fe 00 00 00 00 
285fd 3ff 00 00 00 00 | 	byte	$00[8]
28601 400 18 00 7E 00 
28605 401 18 00 00 00 
28609 402 00 00 00 00 
2860d 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
28611 404 00 00 00 00 
28615 405 00 00 00 00 | 	byte	$00[8]
28619 406 18 30 1E 00 
2861d 407 00 00 1C 36 
28621 408 36 1C 00 00 
28625 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
28629 40a 00 00 00 00 
2862d 40b 63 00 00 00 
28631 40c 00 00 00 00 
28635 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
28639 40e 00 00 00 18 
2863d 40f 18 00 00 00 
28641 410 00 00 00 00 
28645 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
28649 412 00 00 00 00 
2864d 413 00          | 	byte	$00[5]
2864e 413 CC 66 33 00 
28652 414 33 33 33 33 
28656 415 33 33 6E 00 
2865a 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
2865e 417 00 3F 66 66 
28662 418 66 3E 36 66 
28666 419 66 66 6F 00 
2866a 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
2866e 41b 36 1C 08 00 
28672 41c 3B 6E 66 06 
28676 41d 06 06 0F 00 
2867a 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
2867e 41f 00 00 00 7E 
28682 420 7E 7E 7E 7E 
28686 421 7E 7E 00 00 
2868a 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
2868e 423 00 00 00 00 
28692 424 00 00 00 00 
28696 425 00 00 00 00 
2869a 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2869c 427             | 'vga_font       file "vgafont.def"
2869c 427 00 00 00 00 
      ...             
286cc 433 00 00 00 00 
286d0 434 00 00 00    | st_font        file "st4font.def"
286d3 434 FF FF 00 00 
286d7 435 00 00 00 00 
286db 436 00 18 18 18 
286df 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
286e3 438 18 18 18 18 
286e7 439 18 18 18 18 
286eb 43a 18          | 	byte	$18[9]
286ec 43b 00 00 00 00 
286f0 43c 00 00 00    | 	byte	$00[7]
286f3 43c FF FF 18 18 
286f7 43d 18 18 18 18 
286fb 43e 18 18 18 18 
286ff 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
28703 440 FF FF 00 00 
28707 441 00 00 00 00 
2870b 442 00 18 18 18 
2870f 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
28713 444 1F 1F 18 18 
28717 445 18 18 18 18 
2871b 446 18 18 18 18 
2871f 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
28723 448 F8 F8 18 18 
28727 449 18 18 18 18 
2872b 44a 18 00 00 00 
2872f 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
28733 44c 1F 1F 18 18 
28737 44d 18 18 18 18 
2873b 44e 18 00 00 00 
2873f 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
28743 450 F8 F8 18 18 
28747 451 18 18 18 18 
2874b 452 18 18 18 18 
2874f 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
28753 454 1F 1F 00 00 
28757 455 00 00 00 00 
2875b 456 00 18 18 18 
2875f 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
28763 458 F8 F8 00 00 
28767 459 00 00 00 00 
2876b 45a 00 18 18 18 
2876f 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
28773 45c FF FF 18 18 
28777 45d 18 18 18 18 
2877b 45e 18 00 00 18 
2877f 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
28783 460 66 7E 7E 66 
28787 461 66 66 66 30 
2878b 462 18 00 00 7E 
2878f 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
28793 464 3E 06 06 06 
28797 465 06 7E 7E 18 
2879b 466 0C 30 18 3C 
2879f 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
287a3 468 06 06 06 66 
287a7 469 66 7E 3C 00 
287ab 46a 00 30 18 66 
287af 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
287b3 46c 7E 7E 76 76 
287b7 46d 66 66 66 00 
287bb 46e 00 30 18 7C 
287bf 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
287c3 470 1C 38 70 60 
287c7 471 60 7E 3E 00 
287cb 472 00 30 18 7E 
287cf 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
287d3 474 18 0C 0C 06 
287d7 475 06 7E 7E 00 
287db 476 00 18 18 00 
287df 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
287e3 478 18 18 0C 0C 
287e7 479 06 7E 7E 00 
287eb 47a 00 30 18 3C 
287ef 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
287f3 47c 66 66 66 66 
287f7 47d 66          | 	byte	$66[5]
287f8 47e 7E 3C 00 00 
287fc 47f 00 00 06 06 
28800 480 06 06 16 1E 
28804 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
28808 482 7E 7E 00 00 
2880c 483 00 00 00 00 
28810 484 00 3C 7C 60 
28814 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
28818 486 7E 7C 30 18 
2881c 487 00 00 00 00 
28820 488 00 3C 7E 66 
28824 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
28828 48a 7E 7C 18 0C 
2882c 48b 00 00 30 18 
28830 48c 00 3C 3E 06 
28834 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
28838 48e 7E 7C 00 00 
2883c 48f 00 00 30 18 
28840 490 00 3E 7E 66 
28844 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
28848 492 66 66 00 00 
2884c 493 00 00 30 18 
28850 494 00 7C 7E 06 
28854 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
28858 496 7E 3E 00 00 
2885c 497 00 00 30 18 
28860 498 00 7E 7E 30 
28864 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
28868 49a 7E 7E 00 00 
2886c 49b 00 00 18 18 
28870 49c 00 7E 7E 30 
28874 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
28878 49e 7E 7E 00 00 
2887c 49f 00 00 30 18 
28880 4a0 00 3C 7E 66 
28884 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
28888 4a2 7E 3C 00 00 
2888c 4a3 00 00 1C 1C 
28890 4a4 18 18 38 3C 
28894 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
28898 4a6 3C 3C 00 00 
2889c 4a7 00 00 00 00 
288a0 4a8 00 00 00 00 
288a4 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
288a8 4aa 00 00 00 00 
288ac 4ab 00 00       | 	byte	$00[6]
288ae 4ab 18 18 18 18 
288b2 4ac 18 18 18 18 | 	byte	$18[8]
288b6 4ad 00 00 18 18 
288ba 4ae 00 00 00 00 
288be 4af 66 66 66 66 
288c2 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
288c6 4b1 00 00 00 00 
288ca 4b2 00 00 00 00 
288ce 4b3 00          | 	byte	$00[9]
288cf 4b3 66 66 FF FF 
288d3 4b4 66 66 FF FF 
288d7 4b5 66 66 00 00 
288db 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
288df 4b7 7C 7E 06 06 
288e3 4b8 3E 7C 60 60 
288e7 4b9 7E 3E 18 18 
288eb 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
288ef 4bb 66 30 30 18 
288f3 4bc 18 0C 0C 66 
288f7 4bd 66 00 00 00 
288fb 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
288ff 4bf 66 66 3C 1C 
28903 4c0 1C FC FE 66 
28907 4c1 66 FE FC 00 
2890b 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
2890f 4c3 18 18 18 18 
28913 4c4 00 00 00 00 
28917 4c5 00 00 00 00 
2891b 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
2891f 4c7 18 1C 0C 0C 
28923 4c8 0C 0C 0C 0C 
28927 4c9 1C 18 30 00 
2892b 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
2892f 4cb 18 38 30 30 
28933 4cc 30 30 30 30 
28937 4cd 38 18 0C 00 
2893b 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
2893f 4cf 66 66 3C 3C 
28943 4d0 FF FF 3C 3C 
28947 4d1 66 66 00 00 
2894b 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
2894f 4d3 00 18 18 18 
28953 4d4 7E 7E 18 18 
28957 4d5 18 00 00 00 
2895b 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2895f 4d7 00 00 00 00 
28963 4d8 00 00       | 	byte	$00[6]
28965 4d9 18 18 18 18 
28969 4da 18          | 	byte	$18[5]
2896a 4da 0C 04 00 00 
2896e 4db 00 00 00 00 
28972 4dc 7E 7E 00 00 
28976 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
2897a 4de 00 00 00 00 
2897e 4df 00 00 00 00 
28982 4e0 00 00 00 00 
28986 4e1 00          | 	byte	$00[13]
28987 4e1 18 18 18 00 
2898b 4e2 00 00 00 60 
2898f 4e3 60 60 30 30 
28993 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
28997 4e5 06 06 06 00 
2899b 4e6 00 00 00 3C 
2899f 4e7 7E 66 66 66 
289a3 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
289a7 4e9 66 7E 3C 00 
289ab 4ea 00 00 00 18 
289af 4eb 18 1C 1C 18 
289b3 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
289b7 4ed 18 7E 7E 00 
289bb 4ee 00 00 00 3C 
289bf 4ef 7E 66 66 30 
289c3 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
289c7 4f1 0C 7E 7E 00 
289cb 4f2 00 00 00 7E 
289cf 4f3 7E 30 30 18 
289d3 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
289d7 4f5 66 7E 3C 00 
289db 4f6 00 00 00 30 
289df 4f7 30 38 38 3C 
289e3 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
289e7 4f9 7E 30 30 00 
289eb 4fa 00 00 00 7E 
289ef 4fb 7E 06 06 3E 
289f3 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
289f7 4fd 66 7E 3C 00 
289fb 4fe 00 00 00 38 
289ff 4ff 3C 0E 06 06 
28a03 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
28a07 501 66 7E 3C 00 
28a0b 502 00 00 00 7E 
28a0f 503 7E 60 60 30 
28a13 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
28a17 505 0C 0C 0C 00 
28a1b 506 00 00 00 3C 
28a1f 507 7E 66 66 3C 
28a23 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
28a27 509 66 7E 3C 00 
28a2b 50a 00 00 00 3C 
28a2f 50b 7E 66 66 7E 
28a33 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
28a37 50d 70 3C 1C 00 
28a3b 50e 00 00 00 00 
28a3f 50f 00 00 18 18 
28a43 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
28a47 511 18 18 18 00 
28a4b 512 00 00 00 00 
28a4f 513 00 00 18 18 
28a53 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
28a57 515 18 18 18 0C 
28a5b 516 04 00 00 00 
28a5f 517 70 38 1C 0E 
28a63 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
28a67 519 70 00 00 00 
28a6b 51a 00 00 00 00 
28a6f 51b 00 00 7E 7E 
28a73 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
28a77 51d 00 00 00 00 
28a7b 51e 00 00 00 00 | 	byte	$00[8]
28a7f 51f 0E 1C 38 70 
28a83 520 E0 70 38 1C 
28a87 521 0E 00 00 00 
28a8b 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
28a8f 523 7E 66 66 30 
28a93 524 30 18 18 18 
28a97 525 00 18 18 00 
28a9b 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
28a9f 527 7E 66 66 66 
28aa3 528 66 36 06 66 
28aa7 529 66 7E 3C 00 
28aab 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
28aaf 52b 3C 7E 66 66 
28ab3 52c 66 7E 7E 66 
28ab7 52d 66 66 66 00 
28abb 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
28abf 52f 7E 66 66 7E 
28ac3 530 3E 66 66 66 
28ac7 531 66 7E 3E 00 
28acb 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
28acf 533 7E 66 66 06 
28ad3 534 06 06 06 66 
28ad7 535 66 7E 3C 00 
28adb 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
28adf 537 7E 66 66 66 
28ae3 538 66 66 66 66 
28ae7 539 66 7E 3E 00 
28aeb 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
28aef 53b 7E 06 06 3E 
28af3 53c 3E 06 06 06 
28af7 53d 06 7E 7E 00 
28afb 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
28aff 53f 7E 06 06 3E 
28b03 540 3E 06 06 06 
28b07 541 06 06 06 00 
28b0b 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
28b0f 543 7E 06 06 76 
28b13 544 76 66 66 66 
28b17 545 66 7E 3C 00 
28b1b 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
28b1f 547 66 66 66 7E 
28b23 548 7E 66 66 66 
28b27 549 66 66 66 00 
28b2b 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
28b2f 54b 7E 18 18 18 
28b33 54c 18 18 18 18 
28b37 54d 18 7E 7E 00 
28b3b 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
28b3f 54f 60 60 60 60 
28b43 550 60 60 60    | 	byte	$60[7]
28b46 551 66 66 7E 3C 
28b4a 552 00 00 00 00 
28b4e 553 66 66 36 36 
28b52 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
28b56 555 66 66 C6 C6 
28b5a 556 00 00 00 00 
28b5e 557 06 06 06 06 
28b62 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
28b66 559 06 06 7E 7E 
28b6a 55a 00 00 00 00 
28b6e 55b C6 C6 EE EE 
28b72 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
28b76 55d C6 C6 C6 C6 
28b7a 55e 00 00 00 00 
28b7e 55f 66 66 66 6E 
28b82 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
28b86 561 76 66 66 66 
28b8a 562 00 00 00 00 
28b8e 563 3C 7E 66 66 
28b92 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
28b96 565 66 66 7E 3C 
28b9a 566 00 00 00 00 
28b9e 567 3E 7E 66 66 
28ba2 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
28ba6 569 06 06 06 06 
28baa 56a 00 00 00 00 
28bae 56b 3C 7E 66 66 
28bb2 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
28bb6 56d 66 56 3E 6C 
28bba 56e 00 00 00 00 
28bbe 56f 3E 7E 66 66 
28bc2 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
28bc6 571 66 66 C6 C6 
28bca 572 00 00 00 00 
28bce 573 7C 7E 06 06 
28bd2 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
28bd6 575 60 60 7E 3E 
28bda 576 00 00 00 00 
28bde 577 7E 7E 18 18 
28be2 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
28be6 579 18 18 18 18 
28bea 57a 00 00 00 00 
28bee 57b 66 66 66 66 
28bf2 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
28bf6 57d 66 66 7E 3C 
28bfa 57e 00 00 00 00 
28bfe 57f 66 66 66 66 
28c02 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
28c06 581 3C 3C 18 18 
28c0a 582 00 00 00 00 
28c0e 583 C6 C6 C6 C6 
28c12 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
28c16 585 FE EE C6 82 
28c1a 586 00 00 00 00 
28c1e 587 66 66 66 3C 
28c22 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
28c26 589 3C 66 66 66 
28c2a 58a 00 00 00 00 
28c2e 58b 66 66 66 66 
28c32 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
28c36 58d 18 18 18 18 
28c3a 58e 00 00 00 00 
28c3e 58f 7E 7E 30 30 
28c42 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
28c46 591 06 06 7E 7E 
28c4a 592 00 00 00 00 
28c4e 593 3C 3C 0C 0C 
28c52 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
28c56 595 0C 0C 3C 3C 
28c5a 596 00 00 00 00 
28c5e 597 06 06 0C 0C 
28c62 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
28c66 599 60 60 C0 C0 
28c6a 59a 00 00 00 00 
28c6e 59b 3C 3C 30 30 
28c72 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
28c76 59d 30 30 3C 3C 
28c7a 59e 00 00 00 00 
28c7e 59f 18 18 3C 3C 
28c82 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
28c86 5a1 00 00 00 00 
28c8a 5a2 00 00 00 00 
28c8e 5a3 00 00 00 00 
28c92 5a4 00 00 00 00 
28c96 5a5 00 00       | 	byte	$00[18]
28c98 5a6 FE FE 00 00 
28c9c 5a7 00 00 0C 0C 
28ca0 5a8 18 18 00 00 
28ca4 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
28ca8 5aa 00 00 00 00 
28cac 5ab 00 00 00 00 
28cb0 5ac 00          | 	byte	$00[9]
28cb1 5ac 3C 7C 60 7C 
28cb5 5ad 7E 66 66 7E 
28cb9 5ae 7C 00 00 00 
28cbd 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
28cc1 5b0 3E 7E 66 66 
28cc5 5b1 66 66 66 7E 
28cc9 5b2 3E 00 00 00 
28ccd 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
28cd1 5b4 3C 3E 06 06 
28cd5 5b5 06 06 06 7E 
28cd9 5b6 7C 00 00 00 
28cdd 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
28ce1 5b8 7C 7E 66 66 
28ce5 5b9 66 66 66 7E 
28ce9 5ba 7C 00 00 00 
28ced 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
28cf1 5bc 3C 7E 66 66 
28cf5 5bd 7E 06 06 7E 
28cf9 5be 7C 00 00 00 
28cfd 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
28d01 5c0 18 7E 7E 18 
28d05 5c1 18 18 18 18 
28d09 5c2 18 00 00 00 
28d0d 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
28d11 5c4 7C 7E 66 66 
28d15 5c5 66 66 7E 7C 
28d19 5c6 60 7E 3E 00 
28d1d 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
28d21 5c8 3E 7E 66 66 
28d25 5c9 66 66 66 66 
28d29 5ca 66 00 00 00 
28d2d 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
28d31 5cc 1C 1C 18 18 
28d35 5cd 18 18 18 3C 
28d39 5ce 3C 00 00 00 
28d3d 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
28d41 5d0 30 30 30 30 
28d45 5d1 30 30 30 30 
28d49 5d2 30          | 	byte	$30[9]
28d4a 5d2 3E 1E 00 00 
28d4e 5d3 06 06 06 36 
28d52 5d4 36 1E 1E 1E 
28d56 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
28d5a 5d6 00 00 00 00 
28d5e 5d7 1C 1C 18 18 
28d62 5d8 18 18 18 18 
28d66 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
28d6a 5da 00 00 00 00 
28d6e 5db 00 00 00    | 	byte	$00[7]
28d71 5dc 6C FE FE D6 
28d75 5dd D6 C6 C6 C6 
28d79 5de C6 00 00 00 
28d7d 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
28d81 5e0 3E 7E 66 66 
28d85 5e1 66 66 66 66 
28d89 5e2 66 00 00 00 
28d8d 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
28d91 5e4 3C 7E 66 66 
28d95 5e5 66 66 66 7E 
28d99 5e6 3C 00 00 00 
28d9d 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
28da1 5e8 3E 7E 66 66 
28da5 5e9 66 66 66 7E 
28da9 5ea 3E 06 06 00 
28dad 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
28db1 5ec 7C 7E 66 66 
28db5 5ed 66 66 66 7E 
28db9 5ee 7C 60 60 00 
28dbd 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
28dc1 5f0 3E 7E 66 06 
28dc5 5f1 06 06 06 06 
28dc9 5f2 06 00 00 00 
28dcd 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
28dd1 5f4 7C 7E 06 0E 
28dd5 5f5 3C 70 60 7E 
28dd9 5f6 3E 00 00 00 
28ddd 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
28de1 5f8 7E 7E 18 18 
28de5 5f9 18 18 18 78 
28de9 5fa 70 00 00 00 
28ded 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
28df1 5fc 66 66 66 66 
28df5 5fd 66 66 66    | 	byte	$66[7]
28df8 5fe 7E 7C 00 00 
28dfc 5ff 00 00 00 00 
28e00 600 00 66 66 66 
28e04 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
28e08 602 18 18 00 00 
28e0c 603 00 00 00 00 
28e10 604 00 C6 C6 D6 
28e14 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
28e18 606 C6 82 00 00 
28e1c 607 00 00 00 00 
28e20 608 00 66 66 3C 
28e24 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
28e28 60a 66 66 00 00 
28e2c 60b 00 00 00 00 
28e30 60c 00 66 66 66 
28e34 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
28e38 60e 7C 60 7E 3E 
28e3c 60f 00 00 00 00 
28e40 610 00 7E 7E 30 
28e44 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
28e48 612 7E 7E 00 00 
28e4c 613 00 00 30 18 
28e50 614 18 18 18 0C 
28e54 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
28e58 616 18 30 00 00 
28e5c 617 00 00 18 18 
28e60 618 18 18 18 18 
28e64 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
28e68 61a 18 18 00 00 
28e6c 61b 00 00 0C 18 
28e70 61c 18 18 18 30 
28e74 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
28e78 61e 18 0C 00 00 
28e7c 61f 00 00 6C 7E 
28e80 620 36 00 00 00 
28e84 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
28e88 622 00 00 00 00 
28e8c 623 00 00 00 00 
28e90 624 00          | 	byte	$00[9]
28e91 624 18 18 18 18 
28e95 625 18 18 00 00 
28e99 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
28e9c 627             | 'amiga_font     file "amigafont.def"
28e9c 627 00 6C FE FE 
28ea0 628 7C 38 10 00 
28ea4 629 18 18 18 F8 
28ea8 62a F8 18 18 18 | a8_font        file "atari8.fnt"
28eac 62b C0 C0 C0 C0 
28eb0 62c C0 C0 C0 C0 | 	byte	$c0[8]
28eb4 62d 18 18 18 1F 
28eb8 62e 1F 00 00 00 
28ebc 62f 18 18 18 1F 
28ec0 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
28ec4 631 00 00 00 1F 
28ec8 632 1F 18 18 18 
28ecc 633 C0 E0 70 38 
28ed0 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
28ed4 635 03 07 0E 1C 
28ed8 636 38 70 E0 C0 
28edc 637 80 C0 E0 F0 
28ee0 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
28ee4 639 00 00 00 00 
28ee8 63a F0 F0 F0 F0 
28eec 63b 01 03 07 0F 
28ef0 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
28ef4 63d F0 F0 F0 F0 
28ef8 63e 00 00 00 00 
28efc 63f 0F 0F 0F 0F 
28f00 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
28f04 641 FF FF 00 00 
28f08 642 00 00 00 00 
28f0c 643 00 00 00 00 
28f10 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
28f14 645 00 00 00 00 
28f18 646 0F 0F 0F 0F 
28f1c 647 00 38 38 EE 
28f20 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
28f24 649 00 00 00 F8 
28f28 64a F8 18 18 18 
28f2c 64b 00 00 00 FF 
28f30 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
28f34 64d 18 18 18 FF 
28f38 64e FF 18 18 18 
28f3c 64f 00 00 3C 7E 
28f40 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
28f44 651 00 00 00 00 
28f48 652 FF FF FF FF 
28f4c 653 03 03 03 03 
28f50 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
28f54 655 00 00 00 FF 
28f58 656 FF 18 18 18 
28f5c 657 18 18 18 FF 
28f60 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
28f64 659 0F 0F 0F 0F 
28f68 65a 0F 0F 0F 0F | 	byte	$0f[8]
28f6c 65b 18 18 18 F8 
28f70 65c F8 00 00 00 
28f74 65d 1E 06 1E 06 
28f78 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
28f7c 65f 00 18 3C 7E 
28f80 660 18 18 18 00 
28f84 661 00 18 18 18 
28f88 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
28f8c 663 00 18 0C 7E 
28f90 664 0C 18 00 00 
28f94 665 00 18 30 7E 
28f98 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
28f9c 667 00 00 00 00 
28fa0 668 00 00 00 00 
28fa4 669 00          | 	byte	$00[9]
28fa5 669 18 18 18 18 
28fa9 66a 00 18 00 00 
28fad 66b 66 66 66 00 
28fb1 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
28fb5 66d 66 FF 66 66 
28fb9 66e FF 66 00 18 
28fbd 66f 7C 06 3C 60 
28fc1 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
28fc5 671 66 36 18 0C 
28fc9 672 66 62 00 38 
28fcd 673 6C 38 1C F6 
28fd1 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
28fd5 675 18 18 18 00 
28fd9 676 00 00 00 00 
28fdd 677 70 38 18 18 
28fe1 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
28fe5 679 0E 1C 18 18 
28fe9 67a 1C 0E 00 00 
28fed 67b 66 3C FF 3C 
28ff1 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
28ff5 67d 18 18 7E 18 
28ff9 67e 18 00 00 00 
28ffd 67f 00 00 00 00 
29001 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
29005 681 00 00 7E 00 
29009 682 00 00 00 00 
2900d 683 00 00 00 00 
29011 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
29015 685 60 30 18 0C 
29019 686 06 02 00 00 
2901d 687 3C 66 76 6E 
29021 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
29025 689 18 1C 18 18 
29029 68a 18 7E 00 00 
2902d 68b 3C 66 30 18 
29031 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
29035 68d 7E 30 18 30 
29039 68e 66 3C 00 00 
2903d 68f 30 38 3C 36 
29041 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
29045 691 7E 06 3E 60 
29049 692 66 3C 00 00 
2904d 693 3C 06 3E 66 
29051 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
29055 695 7E 60 30 18 
29059 696 0C 0C 00 00 
2905d 697 3C 66 3C 66 
29061 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
29065 699 3C 66 7C 60 
29069 69a 30 1C 00 00 
2906d 69b 00 18 18 00 
29071 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
29075 69d 00 18 18 00 
29079 69e 18 18 0C 60 
2907d 69f 30 18 0C 18 
29081 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
29085 6a1 00 7E 00 00 
29089 6a2 7E 00 00 06 
2908d 6a3 0C 18 30 18 
29091 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
29095 6a5 3C 66 30 18 
29099 6a6 00 18 00 00 
2909d 6a7 3C 66 76 76 
290a1 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
290a5 6a9 18 3C 66 66 
290a9 6aa 7E 66 00 00 
290ad 6ab 3E 66 3E 66 
290b1 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
290b5 6ad 3C 66 06 06 
290b9 6ae 66 3C 00 00 
290bd 6af 1E 36 66 66 
290c1 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
290c5 6b1 7E 06 3E 06 
290c9 6b2 06 7E 00 00 
290cd 6b3 7E 06 3E 06 
290d1 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
290d5 6b5 7C 06 06 76 
290d9 6b6 66 7C 00 00 
290dd 6b7 66 66 7E 66 
290e1 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
290e5 6b9 7E 18 18 18 
290e9 6ba 18 7E 00 00 
290ed 6bb 60 60 60 60 
290f1 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
290f5 6bd 66 36 1E 1E 
290f9 6be 36 66 00 00 
290fd 6bf 06 06 06 06 
29101 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
29105 6c1 C6 EE FE D6 
29109 6c2 C6 C6 00 00 
2910d 6c3 66 6E 7E 7E 
29111 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
29115 6c5 3C 66 66 66 
29119 6c6 66 3C 00 00 
2911d 6c7 3E 66 66 3E 
29121 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
29125 6c9 3C 66 66 66 
29129 6ca 36 6C 00 00 
2912d 6cb 3E 66 66 3E 
29131 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
29135 6cd 3C 06 3C 60 
29139 6ce 60 3C 00 00 
2913d 6cf 7E 18 18 18 
29141 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
29145 6d1 66 66 66 66 
29149 6d2 66          | 	byte	$66[5]
2914a 6d2 7E 00 00 66 
2914e 6d3 66 66 66 3C 
29152 6d4 18 00 00 C6 
29156 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
2915a 6d6 C6 00 00 66 
2915e 6d7 66 3C 3C 66 
29162 6d8 66 00 00 66 
29166 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
2916a 6da 18 00 00 7E 
2916e 6db 30 18 0C 06 
29172 6dc 7E 00 00 78 
29176 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
2917a 6de 78 00 00 02 
2917e 6df 06 0C 18 30 
29182 6e0 60 00 00 1E 
29186 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
2918a 6e2 1E 00 00 10 
2918e 6e3 38 6C C6 00 
29192 6e4 00 00 00 00 
29196 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
2919a 6e6 FF 00 00 18 
2919e 6e7 3C 7E 7E 3C 
291a2 6e8 18 00 00 00 
291a6 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
291aa 6ea 7C 00 00 06 
291ae 6eb 06 3E 66 66 
291b2 6ec 3E 00 00 00 
291b6 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
291ba 6ee 3C 00 00 60 
291be 6ef 60 7C 66 66 
291c2 6f0 7C 00 00 00 
291c6 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
291ca 6f2 3C 00 00 70 
291ce 6f3 18 7C 18 18 
291d2 6f4 18 00 00 00 
291d6 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
291da 6f6 60 3E 00 06 
291de 6f7 06 3E 66 66 
291e2 6f8 66 00 00 18 
291e6 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
291ea 6fa 3C 00 00 60 
291ee 6fb 00 60 60 60 
291f2 6fc 60 3C 00 06 
291f6 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
291fa 6fe 66 00 00 1C 
291fe 6ff 18 18 18 18 
29202 700 3C 00 00 00 
29206 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
2920a 702 C6 00 00 00 
2920e 703 3E 66 66 66 
29212 704 66 00 00 00 
29216 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
2921a 706 3C 00 00 00 
2921e 707 3E 66 66 3E 
29222 708 06 06 00 00 
29226 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
2922a 70a 60 60 00 00 
2922e 70b 3E 66 06 06 
29232 70c 06 00 00 00 
29236 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
2923a 70e 3E 00 00 18 
2923e 70f 7E 18 18 18 
29242 710 70 00 00 00 
29246 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
2924a 712 7C 00 00 00 
2924e 713 66 66 66 3C 
29252 714 18 00 00 00 
29256 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
2925a 716 6C 00 00 00 
2925e 717 66 3C 18 3C 
29262 718 66 00 00 00 
29266 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
2926a 71a 30 1E 00 00 
2926e 71b 7E 30 18 0C 
29272 71c 7E 00 00 18 
29276 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
2927a 71e 3C 00 18 18 
2927e 71f 18 18 18 18 
29282 720 18 18 00 7E 
29286 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
2928a 722 60 00 10 18 
2928e 723 1C 1E 1C 18 
29292 724 10 00 08 18 
29296 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
2929a 726 08 00       | 	byte	$08, $00
2929c 727 00 00 00 00 
292a0 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
292a1 728 80 00 00 00 
292a5 729 00 80 00 00 
292a9 72a 80 80 00 00 
292ad 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
292b1 72c 80 00 80 00 
292b5 72d 00 40 80 00 
292b9 72e AA AA AA 00 
292bd 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
292c1 730 FF 00 00 00 
292c5 731 00 FF 00 00 
292c9 732 FF FF 00 00 
292cd 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
292d1 734 FF 00 FF 00 
292d5 735 00 FF FF 00 
292d9 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
292dc 737 00 00 00 00 
292e0 738 00          | ataripalette   file "ataripalettep2.def"
292e1 738 11 11 11 00 
292e5 739 22 22 22 00 
292e9 73a 33 33 33 00 
292ed 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
292f1 73c 55 55 55 00 
292f5 73d 66 66 66 00 
292f9 73e 77 77 77 00 
292fd 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
29301 740 99 99 99 00 
29305 741 AA AA AA 00 
29309 742 BB BB BB 00 
2930d 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
29311 744 DD DD DD 00 
29315 745 EE EE EE 00 
29319 746 FF FF FF 00 
2931d 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
29321 748 00 14 40 00 
29325 749 00 1E 60 00 
29329 74a 00 28 80 00 
2932d 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
29331 74c 00 3C BF 00 
29335 74d 00 46 DF 00 
29339 74e 00 50 FF 00 
2933d 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
29341 750 39 77 FF 00 
29345 751 55 8A FF 00 
29349 752 71 9E FF 00 
2934d 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
29351 754 AA C5 FF 00 
29355 755 C6 D8 FF 00 
29359 756 E3 EC FF 00 
2935d 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
29361 758 00 00 40 00 
29365 759 00 00 60 00 
29369 75a 00 00 80 00 
2936d 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
29371 75c 00 00 BF 00 
29375 75d 00 00 DF 00 
29379 75e 00 00 FF 00 
2937d 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
29381 760 39 39 FF 00 
29385 761 55 55 FF 00 
29389 762 71 71 FF 00 
2938d 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
29391 764 AA AA FF 00 
29395 765 C6 C6 FF 00 
29399 766 E3 E3 FF 00 
2939d 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
293a1 768 20 00 40 00 
293a5 769 30 00 60 00 
293a9 76a 40 00 80 00 
293ad 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
293b1 76c 60 00 BF 00 
293b5 76d 70 00 DF 00 
293b9 76e 80 00 FF 00 
293bd 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
293c1 770 9C 39 FF 00 
293c5 771 AA 55 FF 00 
293c9 772 B8 71 FF 00 
293cd 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
293d1 774 D5 AA FF 00 
293d5 775 E3 C6 FF 00 
293d9 776 F1 E3 FF 00 
293dd 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
293e1 778 40 00 40 00 
293e5 779 60 00 60 00 
293e9 77a 80 00 80 00 
293ed 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
293f1 77c BF 00 BF 00 
293f5 77d DF 00 DF 00 
293f9 77e FF 00 FF 00 
293fd 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
29401 780 FF 39 FF 00 
29405 781 FF 55 FF 00 
29409 782 FF 71 FF 00 
2940d 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
29411 784 FF AA FF 00 
29415 785 FF C6 FF 00 
29419 786 FF E3 FF 00 
2941d 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
29421 788 40 00 20 00 
29425 789 60 00 30 00 
29429 78a 80 00 40 00 
2942d 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
29431 78c BF 00 60 00 
29435 78d DF 00 70 00 
29439 78e FF 00 80 00 
2943d 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
29441 790 FF 39 9C 00 
29445 791 FF 55 AA 00 
29449 792 FF 71 B8 00 
2944d 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
29451 794 FF AA D5 00 
29455 795 FF C6 E3 00 
29459 796 FF E3 F1 00 
2945d 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
29461 798 40 00 00 00 
29465 799 60 00 00 00 
29469 79a 80 00 00 00 
2946d 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
29471 79c BF 00 00 00 
29475 79d DF 00 00 00 
29479 79e FF 00 00 00 
2947d 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
29481 7a0 FF 39 39 00 
29485 7a1 FF 55 55 00 
29489 7a2 FF 71 71 00 
2948d 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
29491 7a4 FF AA AA 00 
29495 7a5 FF C6 C6 00 
29499 7a6 FF E3 E3 00 
2949d 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
294a1 7a8 40 10 00 00 
294a5 7a9 60 18 00 00 
294a9 7aa 80 20 00 00 
294ad 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
294b1 7ac BF 30 00 00 
294b5 7ad DF 38 00 00 
294b9 7ae FF 40 00 00 
294bd 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
294c1 7b0 FF 6A 39 00 
294c5 7b1 FF 80 55 00 
294c9 7b2 FF 95 71 00 
294cd 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
294d1 7b4 FF BF AA 00 
294d5 7b5 FF D5 C6 00 
294d9 7b6 FF EA E3 00 
294dd 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
294e1 7b8 40 20 00 00 
294e5 7b9 60 30 00 00 
294e9 7ba 80 40 00 00 
294ed 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
294f1 7bc BF 60 00 00 
294f5 7bd DF 70 00 00 
294f9 7be FF 80 00 00 
294fd 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
29501 7c0 FF 9C 39 00 
29505 7c1 FF AA 55 00 
29509 7c2 FF B8 71 00 
2950d 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
29511 7c4 FF D5 AA 00 
29515 7c5 FF E3 C6 00 
29519 7c6 FF F1 E3 00 
2951d 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
29521 7c8 40 30 00 00 
29525 7c9 60 48 00 00 
29529 7ca 80 60 00 00 
2952d 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
29531 7cc BF 90 00 00 
29535 7cd DF A8 00 00 
29539 7ce FF C0 00 00 
2953d 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
29541 7d0 FF CE 39 00 
29545 7d1 FF D5 55 00 
29549 7d2 FF DC 71 00 
2954d 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
29551 7d4 FF EA AA 00 
29555 7d5 FF F1 C6 00 
29559 7d6 FF F8 E3 00 
2955d 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
29561 7d8 30 40 00 00 
29565 7d9 48 60 00 00 
29569 7da 60 80 00 00 
2956d 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
29571 7dc 90 BF 00 00 
29575 7dd A8 DF 00 00 
29579 7de C0 FF 00 00 
2957d 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
29581 7e0 CE FF 39 00 
29585 7e1 D5 FF 55 00 
29589 7e2 DC FF 71 00 
2958d 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
29591 7e4 EA FF AA 00 
29595 7e5 F1 FF C6 00 
29599 7e6 F8 FF E3 00 
2959d 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
295a1 7e8 00 40 00 00 
295a5 7e9 00 60 00 00 
295a9 7ea 00 80 00 00 
295ad 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
295b1 7ec 00 BF 00 00 
295b5 7ed 00 DF 00 00 
295b9 7ee 00 FF 00 00 
295bd 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
295c1 7f0 39 FF 39 00 
295c5 7f1 55 FF 55 00 
295c9 7f2 71 FF 71 00 
295cd 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
295d1 7f4 AA FF AA 00 
295d5 7f5 C6 FF C6 00 
295d9 7f6 E3 FF E3 00 
295dd 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
295e1 7f8 00 40 14 00 
295e5 7f9 00 60 1E 00 
295e9 7fa 00 80 28 00 
295ed 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
295f1 7fc 00 BF 3C 00 
295f5 7fd 00 DF 46 00 
295f9 7fe 00 FF 50 00 
295fd 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
29601 800 39 FF 77 00 
29605 801 55 FF 8A 00 
29609 802 71 FF 9E 00 
2960d 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
29611 804 AA FF C5 00 
29615 805 C6 FF D8 00 
29619 806 E3 FF EC 00 
2961d 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
29621 808 00 40 28 00 
29625 809 00 60 3C 00 
29629 80a 00 80 50 00 
2962d 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
29631 80c 00 BF 78 00 
29635 80d 00 DF 8C 00 
29639 80e 00 FF A0 00 
2963d 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
29641 810 39 FF B5 00 
29645 811 55 FF C0 00 
29649 812 71 FF CA 00 
2964d 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
29651 814 AA FF DF 00 
29655 815 C6 FF EA 00 
29659 816 E3 FF F4 00 
2965d 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
29661 818 00 40 40 00 
29665 819 00 60 60 00 
29669 81a 00 80 80 00 
2966d 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
29671 81c 00 BF BF 00 
29675 81d 00 DF DF 00 
29679 81e 00 FF FF 00 
2967d 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
29681 820 39 FF FF 00 
29685 821 55 FF FF 00 
29689 822 71 FF FF 00 
2968d 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
29691 824 AA FF FF 00 
29695 825 C6 FF FF 00 
29699 826 E3 FF FF 00 
2969d 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
296a1 828 00 28 40 00 
296a5 829 00 3C 60 00 
296a9 82a 00 50 80 00 
296ad 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
296b1 82c 00 78 BF 00 
296b5 82d 00 8C DF 00 
296b9 82e 00 A0 FF 00 
296bd 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
296c1 830 39 B5 FF 00 
296c5 831 55 C0 FF 00 
296c9 832 71 CA FF 00 
296cd 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
296d1 834 AA DF FF 00 
296d5 835 C6 EA FF 00 
296d9 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
296dc 837             | 
296dc 837             | '**********************************************************************************
296dc 837             | '
296dc 837             | '        Timings and colors definitions
296dc 837             | '
296dc 837             | '**********************************************************************************
296dc 837             | 
296dc 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
296dc 837 10 00 00 00 
296e0 838 50 00 00 00 
296e4 839 0C 00 00 00 
296e8 83a 00 04 00 00 | timings         long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
296ec 83b 08 00 00 00 
296f0 83c 04 00 00 00 
296f4 83d 08 00 00 00 
296f8 83e 80 00 00 00 | 	byte	$08, $00, $00, $00, $04, $00, $00, $00, $08, $00, $00, $00, $80, $00, $00, $00
296fc 83f 40 02 00 00 
29700 840 6A 8C 15 14 
29704 841 FB 06 B7 01 
29708 842 40 02 00 00 | 	byte	$40, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $40, $02, $00, $00
2970c 843 00 00 00 00 
29710 844 C0 00 00 00 
29714 845 00 00 00 00 
29718 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2971c 847 00 75 C7 97 
29720 848 27 47 F6 0A 
29724 849 05 79 CB 9B 
29728 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
2972c 84b             | 
2972c 84b             | ''--------  Initialization  ----------------------------------------------------------------
2972c 84b             | 
2972c 84b 28 0C 64 FD | hdmi            setq    #6
29730 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
29734 84d 28 10 64 FD |                 setq    #8
29738 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
2973c 84f             | 
2973c 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
29740 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
29744 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
29748 852 D6 C6 01 F1 |                 add     t1,hbase
2974c 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
29750 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
29754 855 7B 0B 80 5F 
29758 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
2975c 857 66 66 86 FF 
29760 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
29764 859             | '
29764 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
29768 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
2976c 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
29770 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
29774 85d             | 
29774 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
29778 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
2977c 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
29780 860             | 
29780 860             | ''--------  frame rendering main loop  ---------------------------------------------------
29780 860             | 
29780 860 28 06 64 FD | p101            setq 	#3
29784 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
29788 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
2978c 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
29790 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
29794 865 00 A0 05 F6 |                 mov     dlinum, #0
29798 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
2979c 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
297a0 868             | 
297a0 868             | 
297a0 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
297a4 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
297a8 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
297ac 86b             |                 
297ac 86b             | 
297ac 86b             | 
297ac 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
297ac 86b             |   
297ac 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
297b0 86c 29 FE 65 3D |          if_nc  setq2   #255
297b4 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
297b8 86e             | 
297b8 86e             | '' -----   up porch (before the picture)
297b8 86e             | 
297b8 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
297bc 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
297c0 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
297c4 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
297c8 872             |  
297c8 872             |    
297c8 872             |  
297c8 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
297cc 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
297d0 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
297d4 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
297d8 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
297dc 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
297e0 878             | 
297e0 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
297e4 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
297e8 87a 48 00 B0 FD | 		call    #dli
297ec 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
297f0 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
297f4 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
297f8 87e             |                 	
297f8 87e             |                 
297f8 87e             | 
297f8 87e             |  
297f8 87e             | '' ------- the main screen drawing starts here
297f8 87e             | 
297f8 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
297fc 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
29800 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
29804 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
29808 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
2980c 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
29810 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
29814 885             |               
29814 885             | 
29814 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
29818 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
2981c 887             | 
2981c 887             | ' ---------------- All visible lines displayed now, start vblank  
2981c 887             | 
2981c 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
29820 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
29824 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
29828 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
2982c 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
29830 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
29834 88d             | 
29834 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
29834 88d             | 
29834 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
29834 88d             | 
29834 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
29838 88e             | 
29838 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
2983c 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
29840 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
29844 891             | 
29844 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
29848 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
2984c 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
29850 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
29854 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
29858 896             | 
29858 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
2985c 897 DD C6 41 F8 |                 getnib  t1,dl,#0
29860 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
29864 899 70 00 90 AD |     if_z        jmp     #preload
29868 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
2986c 89b 94 00 90 AD |     if_z        jmp     #preload2
29870 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
29874 89d 0C 00 90 AD |     if_z        jmp     #p390
29878 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
2987c 89f 28 00 90 AD |     if_z        jmp     #p391  
29880 8a0             | 
29880 8a0 2D 00 64 FD | p308            ret
29884 8a1             |    
29884 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
29888 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
2988c 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
29890 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
29894 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
29898 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
2989c 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
298a0 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
298a4 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
298a8 8aa             |  
298a8 8aa             | '' --------  Reload palette. To do 
298a8 8aa             | 
298a8 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
298ac 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
298b0 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
298b4 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
298b8 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
298bc 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
298c0 8b0 70 FF 9F FD |         	jmp     #dli                
298c4 8b1             |       
298c4 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
298c4 8b1             | 
298c4 8b1             | 
298c4 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
298c4 8b1             | 
298c4 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
298c8 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
298cc 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
298d0 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
298d4 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
298d8 8b6             |         
298d8 8b6             | '' -------------- Preload a line from PSRAM        
298d8 8b6             |         
298d8 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
298dc 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
298e0 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
298e4 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
298e8 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
298ec 8bb             | 
298ec 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
298f0 8bc 32 B7 01 F6 |                 mov     buf2,a1024
298f4 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
298f8 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
298fc 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
29900 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
29904 8c1             |  
29904 8c1             |  
29904 8c1             | preload2      '  incmod  dlinum,#3
29904 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
29908 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
2990c 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
29910 8c4 28 02 64 FD |                 setq	#1
29914 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
29918 8c6             |                 
29918 8c6             | 
29918 8c6             | '' -------------- Draw sprites
29918 8c6             | 
29918 8c6 CF 5C 02 F6 | sprite          mov t8,frames
2991c 8c7 10 5C 0E F5 | 		and t8,#16 wz
29920 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
29924 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
29928 8ca             | 		
29928 8ca             | 
29928 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
2992c 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
29930 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
29934 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
29938 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
2993c 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
29940 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
29944 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
29948 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
2994c 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
29950 8d4 01 52 86 F1 |                 sub     sprite_h,#1
29954 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
29958 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
2995c 8d7             | 
2995c 8d7             | 
2995c 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
29960 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
29964 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
29968 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
2996c 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
29970 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
29974 8dd 00 5E 06 F6 |                 mov 	t9,#0
29978 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
2997c 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
29980 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
29984 8e1             |      
29984 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
29988 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
2998c 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
29990 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
29994 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
29998 8e6             |                 
29998 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
2999c 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
299a0 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
299a4 8e9             |   		
299a4 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
299a8 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
299ac 8eb             | 
299ac 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
299b0 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
299b4 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
299b8 8ee             |  
299b8 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
299bc 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
299c0 8f0 10 00 90 CD |      if_c 	jmp     #p899		
299c4 8f1             | 	
299c4 8f1             | 	
299c4 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
299c8 8f2 28 CD 01 F1 | 		add	t4,sprite_w
299cc 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
299d0 8f4             | 
299d0 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
299d4 8f5             | 
299d4 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
299d8 8f6 01 58 86 F1 | 	 	sub     t6,#1
299dc 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
299e0 8f8             | 
299e0 8f8 28 58 62 FD |                 setq   	t6
299e4 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
299e8 8fa 28 5D 02 F6 |                 mov t8,sprite_w
299ec 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
299f0 8fc 24 00 90 AD |         if_z    jmp #p898
299f4 8fd             |          
299f4 8fd             |         
299f4 8fd 70 5F 06 F6 |                 mov  t9,#368
299f8 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
299fc 8ff             | 
299fc 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
29a00 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
29a04 901 FF FF 7F FF 
29a08 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
29a0c 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
29a10 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
29a14 905 2D 01 00 F5 |                 and 0-0, t7
29a18 906             |                
29a18 906             | 
29a18 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
29a1c 907 E5 E0 7A FA |                 wmlong 368,t3				
29a20 908             |                 
29a20 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
29a24 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
29a28 90a 2D 00 64 FD |                 ret
29a2c 90b             | 	
29a2c 90b             | 	
29a2c 90b             |                
29a2c 90b             |  
29a2c 90b             | '' -------------- Graphics line ------------------------------------------------------------
29a2c 90b             |  
29a2c 90b             | 
29a2c 90b             | '' consts and vars
29a2c 90b             | 
29a2c 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
29a30 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
29a34 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
29a38 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
29a3c 90f             | 
29a3c 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
29a40 910             | 
29a40 910             | '------ these longs will be set by setmode function
29a40 910             | 
29a40 910 00 00 00 00 | m_bs            long    0        'blanks before sync
29a44 911 00 00 00 00 | m_sn            long    0        'sync
29a48 912 00 00 00 00 | m_bv            long    0        'blanks before visible
29a4c 913 00 00 00 00 | m_vi            long    0        'visible pixels #
29a50 914             | 'm_border        long    0        'left/right borders
29a50 914 00 00 00 00 | i_upporch       long    0        'up porch lines
29a54 915 00 00 00 00 | i_vsync         long    0        'vsync lines
29a58 916 00 00 00 00 | i_downporch     long    0        'down porch lines
29a5c 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
29a60 918 00 00 00 00 | i_totalvis      long    0
29a64 919             | 
29a64 919             | '-------------------------------------
29a64 919             |  
29a64 919 00 00 00 00 | linenum         long    0
29a68 91a 00 00 00 00 | frames          long    0
29a6c 91b 00 00 00 00 | dlinum long 0
29a70 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
29a74 91d             | 
29a74 91d 00 00 00 00 | vblankptr       long    0
29a78 91e 00 00 00 00 | modeptr         long    0
29a7c 91f 00 00 00 00 | paletteptr      long    0
29a80 920 00 00 00 00 | dlptr           long    0
29a84 921 01 00 00 00 | hbase           long    1
29a88 922 00 00 00 00 | mailbox         long    0
29a8c 923 00 00 00 00 | spriteptr          long 0
29a90 924             | 
29a90 924 00 00 00 00 | cmd             long    0
29a94 925 00 B0 07 00 | buf1            long    $80000-16384-4096
29a98 926 00 04 00 00 | buf2            long    1024
29a9c 927 01 00 00 00 | dlptr2          long    1
29aa0 928 01 00 00 00 | dl              long    1
29aa4 929             | 
29aa4 929 00 00 00 00 | buf1c long 0
29aa8 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
29aac 92b 01 00 00 00 | framebuf2       long    1
29ab0 92c 01 00 00 00 | hsync0          long    1
29ab4 92d 01 00 00 00 | hsync1          long    1
29ab8 92e             | 
29ab8 92e 01 00 00 00 | t1              long    1
29abc 92f 00 00 00 00 | t2 long 0
29ac0 930 00 00 00 00 | t3 long 0
29ac4 931 00 00 00 00 | t4 long 0
29ac8 932             | 
29ac8 932 00 00 00 00 | rcnt            long    0  'dl repeat count
29acc 933 00 00 00 00 | rcnt2           long    0
29ad0 934 00 00 00 00 | rcnt2a          long    0
29ad4 935 00 00 00 00 | roffset         long    0
29ad8 936 00 00 00 00 | rdl             long    0  'dl repeat line
29adc 937 00 00 00 00 | dlc             long    0  'dl command
29ae0 938             | 
29ae0 938 FF FF FF FF | affffffff       long    $ffffffff
29ae4 939 00 00 00 00 | sprite1pointer long 0
29ae8 93a 00 00 00 00 | sprite1xy      long 0
29aec 93b 00 00 00 00 | sprite1wh      long 0
29af0 93c 00 00 00 00 | sprite2pointer long 0
29af4 93d 00 00 00 00 | sprite2xy      long 0
29af8 93e 00 00 00 00 | sprite2wh      long 0
29afc 93f 00 00 00 00 | sprite3pointer long 0
29b00 940 00 00 00 00 | sprite3xy      long 0
29b04 941 00 00 00 00 | sprite3wh      long 0
29b08 942 00 00 00 00 | sprite4pointer long 0
29b0c 943 00 00 00 00 | sprite4xy      long 0
29b10 944 00 00 00 00 | sprite4wh      long 0
29b14 945 00 00 00 00 | sprite5pointer long 0
29b18 946 00 00 00 00 | sprite5xy      long 0
29b1c 947 00 00 00 00 | sprite5wh      long 0
29b20 948 00 00 00 00 | sprite6pointer long 0
29b24 949 00 00 00 00 | sprite6xy      long 0
29b28 94a 00 00 00 00 | sprite6wh      long 0
29b2c 94b 00 00 00 00 | sprite7pointer long 0
29b30 94c 00 00 00 00 | sprite7xy      long 0
29b34 94d 00 00 00 00 | sprite7wh      long 0
29b38 94e 00 00 00 00 | sprite8pointer long 0
29b3c 94f 00 00 00 00 | sprite8xy      long 0
29b40 950 00 00 00 00 | sprite8wh      long 0
29b44 951 00 00 00 00 | sprite9pointer long 0
29b48 952 00 00 00 00 | sprite9xy      long 0
29b4c 953 00 00 00 00 | sprite9wh      long 0
29b50 954 00 00 00 00 | sprite10pointer long 0
29b54 955 00 00 00 00 | sprite10xy      long 0
29b58 956 00 00 00 00 | sprite10wh      long 0
29b5c 957 00 00 00 00 | sprite11pointer long 0
29b60 958 00 00 00 00 | sprite11xy      long 0
29b64 959 00 00 00 00 | sprite11wh      long 0
29b68 95a 00 00 00 00 | sprite12pointer long 0
29b6c 95b 00 00 00 00 | sprite12xy      long 0
29b70 95c 00 00 00 00 | sprite12wh      long 0
29b74 95d 00 00 00 00 | sprite13pointer long 0
29b78 95e 00 00 00 00 | sprite13xy      long 0
29b7c 95f 00 00 00 00 | sprite13wh      long 0
29b80 960 00 00 00 00 | sprite14pointer long 0
29b84 961 00 00 00 00 | sprite14xy      long 0
29b88 962 00 00 00 00 | sprite14wh      long 0
29b8c 963 00 00 00 00 | sprite15pointer long 0
29b90 964 00 00 00 00 | sprite15xy      long 0
29b94 965 00 00 00 00 | sprite15wh      long 0
29b98 966 00 00 00 00 | sprite16pointer long 0
29b9c 967 00 00 00 00 | sprite16xy      long 0
29ba0 968 00 00 00 00 | sprite16wh      long 0
29ba4 969 00 00 00 00 | sprite17pointer long 0
29ba8 96a 00 00 00 00 | sprite17xy      long 0
29bac 96b 00 00 00 00 | sprite17wh      long 0
29bb0 96c 00 00 00 00 | sprite18pointer long 0
29bb4 96d 00 00 00 00 | sprite18xy      long 0
29bb8 96e 00 00 00 00 | sprite18wh      long 0
29bbc 96f 00 00 00 00 | spritenum long 0
29bc0 970             | 
29bc0 970 00 00 00 00 | spriteline long 0
29bc4 971 84 03 00 00 | sprite_x long 900
29bc8 972 00 00 00 00 | sprite_y long 0
29bcc 973 10 00 00 00 | sprite_w long 16
29bd0 974 40 00 00 00 | sprite_h long 64
29bd4 975 00 00 00 00 | l2 long 0
29bd8 976 00 00 00 00 | t5 long 0
29bdc 977 00 00 00 00 | t6 long 0
29be0 978 00 00 00 00 | t7 long 0
29be4 979 00 00 00 00 | t8 long 0
29be8 97a 00 00 00 00 | t9 long 0
29bec 97b 00 00 00 00 | preloadaddr long 0
29bf0 97c 00 00 00 00 | preloadlineaddr long 0
29bf4 97d 00 04 00 00 | a1024 long 1024
29bf8 97e             | 
29bf8 97e E0 03 00 00 | aa long 992
29bfc 97f FF 03 00 00 | a1023 long 1023
29c00 980 00 10 00 00 | a4096 long 4096
29c04 981             |  fit 368
29c04 981             | _psram_spin2_dat_
29c04 981 00 00 00 00 
      ...             
29cfc 9bf 00 00 00 00 
29d00 9c0 00 00 00 00 |     listdata long 0[8*8]
29d04 9c1             |             orgh
29d04                 | 
29d04                 | ' driver state
29d04     FF FF FF FF | drivercog   long    -1  ' COG id of driver
29d08     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
29d0c                 | 
29d0c                 | ' delay profile
29d0c     07 00 00 00 
29d10     00 CF 7B 05 
29d14     80 D1 F0 08 
29d18     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
29d1c     80 C4 60 0F 
29d20     80 39 7A 12 
29d24     40 2D D9 13 
29d28     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
29d2c                 | 
29d2c                 | ' data to be passed to driver when starting it
29d2c                 | startupData
29d2c     00 00 00 00 |     long    0           ' current frequency
29d30     00 00 00 00 |     long    FLAGS       ' optional flags for driver
29d34     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
29d38     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
29d3c     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
29d40     4C 9D 02 00 |     long    deviceData  ' address of devices data structure in HUBRAM
29d44     CC 9D 02 00 |     long    qosData     ' address of QoS data structure in HUBRAM
29d48     EC 9D 02 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
29d4c                 | 
29d4c                 | ' data for memory
29d4c                 | deviceData
29d4c                 |     ' 16 bank parameters follow (16MB per bank)
29d4c     00 00 00 00 
      ...             
29d84     00 00 00 00 
29d88     00 00 00 00 |     long    0[16]                               ' banks 0-15
29d8c                 |     ' 16 banks of pin parameters follow
29d8c     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
29d90     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
29d94     FF FF FF FF 
      ...             
29dc4     FF FF FF FF 
29dc8     FF FF FF FF |     long    -1[14]                              ' banks 2-15
29dcc                 | 
29dcc                 | ' data for COG polling
29dcc                 | qosData 
29dcc     00 00 FF FF 
29dd0     00 00 FF FF 
29dd4     00 00 FF FF 
29dd8     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
29ddc     00 00 FF FF 
29de0     00 00 FF FF 
29de4     00 00 FF FF 
29de8     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
29dec                 |     
29dec                 | ' mailbox storage
29dec                 | 
29dec                 | mailboxes
29dec     00 00 00 00 
      ...             
29e44     00 00 00 00 
29e48     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
29e4c                 | 	alignl
29e4c                 | _psram16drv_spin2_dat_
29e4c                 |                             orgh
29e4c     00 00 00 00 
      ...             
29e64     00 00 00 00 
29e68     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
29e6c                 | 
29e6c                 | driver_start
29e6c                 |                             org
29e6c 000             | '..................................................................................................
29e6c 000             | ' Memory layout for COG RAM once operational:
29e6c 000             | '
29e6c 000             | '  COG RAM address      Usage
29e6c 000             | '  ---------------      ----
29e6c 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
29e6c 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
29e6c 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
29e6c 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
29e6c 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
29e6c 000             | '  ~$198-$1F3           State and register variables
29e6c 000             | '
29e6c 000             | ' Also during driver COG startup:
29e6c 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
29e6c 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
29e6c 000             | '..................................................................................................
29e6c 000             |                             
29e6c 000             | ' Mailbox storage after vector initialization
29e6c 000             | 
29e6c 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
29e70 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
29e74 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
29e78 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
29e7c 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
29e80 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
29e84 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
29e88 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
29e8c 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
29e90 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
29e94 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
29e98 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
29e9c 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
29ea0 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
29ea4 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
29ea8 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
29eac 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
29eb0 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
29eb4 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
29eb8 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
29ebc 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
29ec0 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
29ec4 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
29ec8 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
29ecc 018             | 
29ecc 018             | ' Mailbox parameter addresses per COG once patched
29ecc 018             |                             
29ecc 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
29ed0 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
29ed4 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
29ed8 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
29edc 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
29ee0 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
29ee4 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
29ee8 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
29eec 020             | 
29eec 020             | '..................................................................................................
29eec 020             | ' Per COG request and state setup and service branching
29eec 020             |         
29eec 020             | cog0                 
29eec 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
29ef0 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
29ef4 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
29ef8 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
29efc 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
29f00 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
29f04 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
29f08 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
29f0c 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
29f10 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
29f14 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
29f18 02b 33 CA 63 FD |                             execf   request-0               'jump to service
29f1c 02c             | cog1                        
29f1c 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
29f20 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
29f24 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
29f28 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
29f2c 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
29f30 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
29f34 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
29f38 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
29f3c 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
29f40 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
29f44 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
29f48 037 33 CA 63 FD |                             execf   request-0               'jump to service
29f4c 038             | cog2                         
29f4c 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
29f50 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
29f54 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
29f58 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
29f5c 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
29f60 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
29f64 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
29f68 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
29f6c 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
29f70 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
29f74 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
29f78 043 33 CA 63 FD |                             execf   request-0               'jump to service
29f7c 044             | cog3                        
29f7c 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
29f80 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
29f84 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
29f88 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
29f8c 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
29f90 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
29f94 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
29f98 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
29f9c 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
29fa0 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
29fa4 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
29fa8 04f 33 CA 63 FD |                             execf   request-0               'jump to service
29fac 050             | cog4                        
29fac 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
29fb0 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
29fb4 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
29fb8 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
29fbc 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
29fc0 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
29fc4 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
29fc8 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
29fcc 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
29fd0 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
29fd4 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
29fd8 05b 33 CA 63 FD |                             execf   request-0               'jump to service
29fdc 05c             | cog5                        
29fdc 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
29fe0 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
29fe4 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
29fe8 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
29fec 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
29ff0 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
29ff4 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
29ff8 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
29ffc 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
2a000 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2a004 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2a008 067 33 CA 63 FD |                             execf   request-0               'jump to service
2a00c 068             | cog6                        
2a00c 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
2a010 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
2a014 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
2a018 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
2a01c 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2a020 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2a024 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
2a028 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
2a02c 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
2a030 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2a034 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2a038 073 33 CA 63 FD |                             execf   request-0               'jump to service
2a03c 074             | cog7                        
2a03c 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
2a040 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
2a044 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
2a048 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
2a04c 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2a050 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2a054 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
2a058 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
2a05c 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
2a060 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2a064 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2a068 07f 33 CA 63 FD |                             execf   request-0               'jump to service
2a06c 080             |                             fit     128
2a06c 080             | 
2a06c 080             |                             fit     128
2a06c 080             | pad                         long    0[128-$]                'align init code to $80
2a06c 080             | 
2a06c 080             | '..................................................................................................
2a06c 080             | 
2a06c 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
2a06c 080             | 
2a06c 080             | init                        
2a06c 080             |                             ' get driver scratch long address in hub
2a06c 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
2a070 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
2a074 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
2a078 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
2a07c 084             |                     
2a07c 084             |                             ' read in the additional LUT RAM code
2a07c 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
2a080 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
2a084 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
2a088 087             | 
2a088 087             |                             ' read the startup parameters
2a088 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
2a08c 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
2a090 089             | 
2a090 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
2a090 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
2a094 08a             | 
2a094 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
2a098 08b 01 00 00 5F 
2a09c 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
2a0a0 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
2a0a4 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
2a0a8 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
2a0ac 090             | 
2a0ac 090             |                             ' setup data pin modes and data bus pin group in streamer commands
2a0ac 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
2a0b0 091 01 00 00 FF 
2a0b4 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
2a0b8 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
2a0bc 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
2a0c0 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
2a0c4 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
2a0c8 097 08 DE 47 F5 |                             or      a, #8
2a0cc 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
2a0d0 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
2a0d4 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
2a0d8 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
2a0dc 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
2a0e0 09d 01 DE 07 F1 |                             add     a, #1
2a0e4 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
2a0e8 09f             |  
2a0e8 09f             |                             ' setup device control pin states
2a0e8 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
2a0ec 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
2a0f0 0a1 01 00 00 FF 
2a0f4 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
2a0f8 0a3             | 
2a0f8 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
2a0fc 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
2a100 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
2a104 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
2a108 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
2a10c 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
2a110 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
2a114 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
2a118 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
2a11c 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
2a120 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
2a124 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
2a128 0af             | pinloop
2a128 0af             |                             ' generate minimum CE high time before access
2a128 0af A1 07 00 FF 
2a12c 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
2a130 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
2a134 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
2a138 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
2a13c 0b4 1F DE 63 FD |                             waitx   a                       'delay
2a140 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
2a144 0b6             | 
2a144 0b6             |                             ' setup the COG mailboxes and addresses 
2a144 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
2a148 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
2a14c 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
2a150 0b9             | 
2a150 0b9 28 2E 64 FD |                             setq    #24-1
2a154 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
2a158 0bb             | 
2a158 0bb             |                             ' setup the polling loop for active COGs 
2a158 0bb 01 C2 63 FD |                             cogid   id
2a15c 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
2a160 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
2a164 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
2a168 0bf 0A F0 07 F6 |                             mov     ptra, #10
2a16c 0c0 E1 F1 03 FA |                             mul     ptra, id
2a170 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
2a174 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
2a178 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
2a17c 0c4 03 C2 07 FA |                             mul     id, #3
2a180 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
2a184 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
2a188 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
2a18c 0c8 D8 01 B0 FD |                             call    #reloadcogs
2a190 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
2a194 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
2a198 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
2a198 0cb D8 E5 B7 F9 |                             setd    d, #addr1
2a19c 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
2a1a0 0cd 08 04 DC FC |                             rep     #2, #8
2a1a4 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
2a1a8 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
2a1ac 0d0             | 
2a1ac 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
2a1ac 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
2a1ac 0d0 01 C2 63 FD |                             cogid   id
2a1b0 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
2a1b4 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
2a1b8 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
2a1bc 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
2a1c0 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
2a1c4 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
2a1c8 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
2a1cc 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
2a1d0 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
2a1d4 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
2a1d8 0db 3F E4 A7 F9 |                             alti    d, #%111_111
2a1dc 0dc 00 00 00 F6 |                             mov     0-0, 0-0
2a1e0 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
2a1e4 0de A5 E5 03 F1 |                             add     d, const512
2a1e8 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
2a1ec 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
2a1f0 0e1 00 00 00 F6 |                             mov     0-0, 0-0
2a1f4 0e2             |                             
2a1f4 0e2             |                             ' setup register values for control vector loop setup after we return
2a1f4 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
2a1f8 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
2a1fc 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
2a200 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
2a204 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
2a208 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
2a20c 0e8 D0 C3 8F F9 |                             altd    id, #id0
2a210 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
2a214 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
2a218 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
2a21c 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
2a220 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
2a224 0ee             |  
2a224 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
2a228 0ef 07 CA 07 F5 |                             and     request, #7
2a22c 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
2a230 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
2a234 0f2             |                             fit     $100                    'ensure all init code fits this space
2a234 0f2             | 
2a234 0f2             |                             fit     $100                    'ensure all init code fits this space
2a234 0f2             | 
2a234 0f2 00 00 00 00 
      ...             
2a264 0fe 00 00 00 00 
2a268 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
2a26c 100             | 
2a26c 100             | '..................................................................................................
2a26c 100             | ' Error result handling and COG notification of request completion
2a26c 100             | 
2a26c 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
2a270 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
2a274 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
2a278 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
2a27c 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
2a280 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
2a284 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
2a288 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
2a28c 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
2a290 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
2a294 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
2a298 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
2a29c 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
2a2a0 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
2a2a4 10e             | ' Poller re-starts here after a COG is serviced
2a2a4 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
2a2a8 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
2a2ac 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
2a2b0 111             | ' Main dynamic polling loop repeats until a request arrives
2a2b0 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
2a2b4 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
2a2b8 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
2a2bc 114             | 
2a2bc 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
2a2c0 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
2a2c4 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
2a2c8 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
2a2cc 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
2a2d0 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
2a2d4 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
2a2d8 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
2a2dc 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
2a2e0 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
2a2e4 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
2a2e8 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
2a2ec 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
2a2f0 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
2a2f4 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
2a2f8 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
2a2fc 124             | 
2a2fc 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
2a300 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
2a304 126             |  
2a304 126             | '..................................................................................................
2a304 126             | ' List handler                               
2a304 126             | 
2a304 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
2a308 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
2a30c 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
2a310 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
2a314 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
2a318 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
2a31c 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
2a320 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
2a324 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
2a328 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
2a32c 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
2a330 131 33 00 60 FD |                             execf   0-0                     'process the request 
2a334 132             | 
2a334 132             | '..................................................................................................
2a334 132             | ' Restoring per COG state and resuming where we left off
2a334 132             | 
2a334 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
2a338 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
2a33c 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
2a340 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
2a344 136 D8 CB FB F8 |                             getbyte request, addr1, #3
2a348 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
2a34c 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
2a350 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
2a354 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
2a358 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
2a35c 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
2a360 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
2a364 13e             |                    
2a364 13e             | '..................................................................................................
2a364 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
2a364 13e             | 
2a364 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
2a368 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
2a36c 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
2a370 141 D0 DF B7 F9 |                             setd    a, #id0
2a374 142 D8 DF BF F9 |                             sets    a, #addr1
2a378 143 FE FF FF FF 
2a37c 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
2a380 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
2a384 146 3F DE A7 F9 |                             alti    a, #%111_111 
2a388 147 00 00 F0 F9 |                             muxq    0-0, 0-0
2a38c 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
2a390 149 01 E2 63 FD |                             cogid   c
2a394 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
2a398 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
2a39c 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
2a3a0 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
2a3a4 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
2a3a8 14f 00 E0 03 F6 |                             mov     b, 0-0
2a3ac 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
2a3b0 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
2a3b4 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
2a3b8 153 0C 00 90 AD |             if_z            jmp     #excluded               
2a3bc 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
2a3c0 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
2a3c4 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
2a3c8 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
2a3cc 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
2a3d0 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
2a3d4 15a             | 
2a3d4 15a             | 'determine priority cogs and build instructions for the polling sequence
2a3d4 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
2a3d8 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
2a3dc 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
2a3e0 15d             | 
2a3e0 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
2a3e4 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
2a3e8 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
2a3ec 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
2a3f0 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
2a3f4 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
2a3f8 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
2a3fc 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
2a400 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
2a404 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
2a408 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
2a40c 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
2a410 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
2a414 16a             | endprioloop
2a414 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
2a418 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
2a41c 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
2a420 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
2a424 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
2a428 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
2a42c 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
2a430 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
2a434 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
2a438 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
2a43c 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
2a440 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
2a444 176             | 
2a444 176             | ' populate the round robin COG polling instructions
2a444 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
2a448 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
2a44c 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
2a450 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
2a454 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
2a458 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
2a45c 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
2a460 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
2a464 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
2a468 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
2a46c 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
2a470 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
2a474 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
2a478 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
2a47c 184             | '..................................................................................................
2a47c 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
2a47c 184             | 
2a47c 184             | set_latency                                                 '            (a) set latency
2a47c 184             | get_latency                                                 '            (b) get latency
2a47c 184             | set_burst                                                   '            (c) set burst size of bank
2a47c 184             | get_burst                                                   '            (d) get burst size of bank
2a47c 184             |                                                             '            (e) dump state
2a47c 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
2a480 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
2a484 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
2a488 187             |                                                             ' | | | | e  account for following AUGS
2a488 187 04 00 00 FF 
2a48c 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
2a490 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
2a494 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
2a498 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
2a49c 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
2a4a0 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
2a4a4 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
2a4a8 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
2a4ac 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
2a4b0 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
2a4b4 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
2a4b8 193             | 
2a4b8 193             | '..................................................................................................
2a4b8 193             | ' Misc EXECF code
2a4b8 193             | 
2a4b8 193 33 72 63 FD | start_read_exec             execf   newburstr
2a4bc 194 33 7C 63 FD | start_write_exec            execf   resumewrites
2a4c0 195 33 78 63 FD | continue_read_exec          execf   lockedreads
2a4c4 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
2a4c8 197             | 
2a4c8 197             | '..................................................................................................
2a4c8 197             | ' Variables
2a4c8 197             | 
2a4c8 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
2a4cc 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
2a4d0 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
2a4d4 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
2a4d8 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
2a4dc 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
2a4e0 19d             | 
2a4e0 19d 00 00 00 80 | xfreq1          long    $80000000
2a4e4 19e 00 00 00 40 | xfreq2          long    $40000000
2a4e8 19f 03 00 00 00 | delay           long    3
2a4ec 1a0             | 
2a4ec 1a0             | lutcodeaddr                 
2a4ec 1a0             | startupparams
2a4ec 1a0             | excludedcogs                                    'careful: shared register use!
2a4ec 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
2a4f0 1a1 00 00 00 00 | flags           long    0
2a4f4 1a2             | mask                                            'careful: shared register use!
2a4f4 1a2 00 00 00 00 | resetmaskA      long    0
2a4f8 1a3             | limit                                           'careful: shared register use!
2a4f8 1a3 00 00 00 00 | resetmaskB      long    0
2a4fc 1a4 00 00 00 00 | datapins        long    0
2a500 1a5             | const512                                        'careful: shared register use!
2a500 1a5 00 00 00 00 | devicelist      long    0
2a504 1a6 00 00 00 00 | coglist         long    0
2a508 1a7 00 00 00 00 | mbox            long    0 
2a50c 1a8             | 
2a50c 1a8             | clkpin                                          'shared with code patched during init
2a50c 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
2a510 1a9             | cspin                                           'shared with code patched during init
2a510 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
2a514 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
2a518 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
2a51c 1ac 01 00 00 00 | clkdelay        long    1
2a520 1ad 00 00 00 00 | regdatabus      long    0
2a524 1ae             | 
2a524 1ae 10 00 00 00 | deviceaddr      long    $10
2a528 1af             | rrcounter
2a528 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
2a52c 1b0             | 
2a52c 1b0             | ' jump addresses for the per COG handlers
2a52c 1b0 20 00 00 00 | cog0_handler    long    cog0
2a530 1b1 2C 00 00 00 | cog1_handler    long    cog1
2a534 1b2 38 00 00 00 | cog2_handler    long    cog2
2a538 1b3 44 00 00 00 | cog3_handler    long    cog3
2a53c 1b4 50 00 00 00 | cog4_handler    long    cog4
2a540 1b5 5C 00 00 00 | cog5_handler    long    cog5
2a544 1b6 68 00 00 00 | cog6_handler    long    cog6
2a548 1b7 74 00 00 00 | cog7_handler    long    cog7
2a54c 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
2a550 1b9             | 
2a550 1b9             | ' EXECF sequences
2a550 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
2a554 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
2a558 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
2a55c 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
2a560 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
2a564 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
2a568 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
2a56c 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
2a56c 1c0             | 
2a56c 1c0             | 
2a56c 1c0             | ' SKIPF sequences
2a56c 1c0             | skiptable
2a56c 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
2a570 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
2a574 1c2 00 00 00 00 |                 long    0                      ' read modify write long
2a578 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
2a57c 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
2a580 1c5 00 00 00 00 | pattern2        long    0
2a584 1c6 00 00 00 00 | pattern3        long    0
2a588 1c7 77 02 00 00 | singlelong      long    %1001110111  
2a58c 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
2a590 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
2a594 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
2a598 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
2a59c 1cc             | 
2a59c 1cc             | ' LUT RAM address values
2a59c 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
2a5a0 1cd DD 02 00 00 | continue_read   long    continue_read_lut
2a5a4 1ce DB 02 00 00 | continue_write  long    continue_write_lut
2a5a8 1cf F6 02 00 00 | noread          long    noread_lut
2a5ac 1d0             | 
2a5ac 1d0 00 00 00 00 | id0             long    0
2a5b0 1d1 01 00 00 00 | id1             long    1
2a5b4 1d2 02 00 00 00 | id2             long    2
2a5b8 1d3 03 00 00 00 | id3             long    3
2a5bc 1d4 04 00 00 00 | id4             long    4
2a5c0 1d5 05 00 00 00 | id5             long    5
2a5c4 1d6 06 00 00 00 | id6             long    6
2a5c8 1d7 07 00 00 00 | id7             long    7
2a5cc 1d8             | 
2a5cc 1d8             | 'These next 10 request registers below are also temporarily reused during init 
2a5cc 1d8             | 'and COG updates and need to follow immediately after id0-id7
2a5cc 1d8 00 00 00 00 | addr1           long    0
2a5d0 1d9 00 00 00 00 | hubdata         long    0
2a5d4 1da 00 00 00 00 | count           long    0
2a5d8 1db 00 00 00 00 | addr2           long    0
2a5dc 1dc 00 00 00 00 | total           long    0
2a5e0 1dd 00 00 00 00 | offset1         long    0
2a5e4 1de 00 00 00 00 | offset2         long    0
2a5e8 1df 00 00 00 00 | link            long    0
2a5ec 1e0             | 
2a5ec 1e0             | burstwrite                                      'note shared register use during init
2a5ec 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
2a5f0 1e1 00 00 00 00 | id              long    0
2a5f4 1e2             | 
2a5f4 1e2 00 00 00 00 | header          long    0
2a5f8 1e3 00 00 00 00 | trailer         long    0
2a5fc 1e4 00 00 00 00 | cmdaddr         long    0
2a600 1e5 00 00 00 00 | request         long    0
2a604 1e6 00 00 00 00 | rrlimit         long    0
2a608 1e7 00 00 00 00 | pinconfig       long    0
2a60c 1e8 00 00 00 00 | clks            long    0
2a610 1e9 00 00 00 00 | resume          long    0
2a614 1ea 00 00 00 00 | orighubsize     long    0
2a618 1eb 00 00 00 00 | wrclks          long    0
2a61c 1ec             | 
2a61c 1ec 00 00 00 00 | pattern         long    0
2a620 1ed 00 00 00 00 | hubscratch      long    0
2a624 1ee 00 10 00 00 | val4k           long    4096
2a628 1ef             | 
2a628 1ef             | ' temporary general purpose regs
2a628 1ef 00 00 00 00 | a               long    0
2a62c 1f0 00 00 00 00 | b               long    0
2a630 1f1 00 00 00 00 | c               long    0
2a634 1f2 00 00 00 00 | d               long    0
2a638 1f3             |                 fit     502
2a638 1f3             | 
2a638 1f3             |                 fit     502
2a638 1f3             | 
2a638 1f3             | '..................................................................................................
2a638 1f3             | 
2a638 1f3             |             orgh
2a638                 | 
2a638                 | lut_code
2a638                 | 'HW init code up to 80 longs
2a638                 | 
2a638                 | '..................................................................................................
2a638                 | ' Memory layout for LUT RAM once operational:
2a638                 | '
2a638                 | '  LUT RAM address      Usage
2a638                 | '  ---------------      ----
2a638                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
2a638                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
2a638                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
2a638                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
2a638                 | '
2a638                 | ' Also during driver COG startup:
2a638                 | ' $230-$24F is used for HW init setup
2a638                 | ' $250-$26F is used as temporary vector storage 
2a638                 | '..................................................................................................
2a638                 | 
2a638                 |                 org $230    
2a638 230             | 
2a638 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
2a638 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
2a63c 231 24 16 60 FD |                             pollxfi
2a640 232 FF AA 2A FF 
2a644 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
2a648 234 28 00 B0 FD |                             call    #sendqspi
2a64c 235 07 F8 07 FF 
2a650 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
2a654 237 28 00 B0 FD |                             call    #sendspi
2a658 238 F8 07 78 FF 
2a65c 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
2a660 23a 1C 00 B0 FD |                             call    #sendspi
2a664 23b 7F 78 78 FF 
2a668 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
2a66c 23d 10 00 B0 FD |                             call    #sendspi 
2a670 23e 2D 00 64 FD |                             ret
2a674 23f             | 
2a674 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
2a678 240 32 0C 64 FD |                             skipf   #%110
2a67c 241 9C EF 03 F6 |                             mov     pb, xsendimm
2a680 242             | 
2a680 242 10 D0 07 F6 | sendspi                     mov     clks, #16
2a684 243 97 EF 03 F6 |                             mov     pb, ximm8lut
2a688 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
2a68c 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
2a690 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
2a694 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
2a698 248 24 36 60 FD |                             waitxfi                         'wait for the completion
2a69c 249 50 48 63 FD |                             fltl    datapins                'float data bus
2a6a0 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
2a6a4 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
2a6a8 24c             | 
2a6a8 24c 00 00 00 00 
2a6ac 24d 00 00 00 00 
2a6b0 24e 00 00 00 00 
2a6b4 24f 00 00 00 00 |                 long    0[$270-32-$]
2a6b8 250             |                 fit     $270-32  ' keep room for 32 vector longs
2a6b8 250             |     
2a6b8 250             |                 fit     $270-32  ' keep room for 32 vector longs
2a6b8 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
2a6b8 250             | rw_vect ' PSRAM jump vectors
2a6b8 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2a6bc 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2a6c0 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
2a6c4 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
2a6c8 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
2a6cc 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
2a6d0 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
2a6d4 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
2a6d8 258             | ro_vect ' R/O PSRAM jump vectors
2a6d8 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2a6dc 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2a6e0 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
2a6e4 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
2a6e8 25c 00 01 00 00 |                 long    unsupported
2a6ec 25d 00 01 00 00 |                 long    unsupported
2a6f0 25e 00 01 00 00 |                 long    unsupported
2a6f4 25f 00 01 00 00 |                 long    unsupported
2a6f8 260             | ctrl_vect ' Control jump vectors
2a6f8 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
2a6fc 261 00 01 00 00 |                 long    unsupported
2a700 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
2a704 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
2a708 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
2a70c 265 00 01 00 00 |                 long    unsupported
2a710 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
2a714 267 3E 01 00 00 |                 long    reconfig 
2a718 268             | no_vect ' Invalid bank jump vectors
2a718 268 01 01 00 00 |                 long    invalidbank
2a71c 269 01 01 00 00 |                 long    invalidbank
2a720 26a 01 01 00 00 |                 long    invalidbank
2a724 26b 01 01 00 00 |                 long    invalidbank
2a728 26c 01 01 00 00 |                 long    invalidbank
2a72c 26d 01 01 00 00 |                 long    invalidbank
2a730 26e 01 01 00 00 |                 long    invalidbank
2a734 26f 01 01 00 00 |                 long    invalidbank
2a738 270             |                 fit     $270
2a738 270             | 
2a738 270             |                 fit     $270
2a738 270             | '..................................................................................................
2a738 270             | ' PSRAM READS
2a738 270             |                                                             ' a b c d e f
2a738 270             |                                                             ' B W L B R L  (a) byte read
2a738 270             |                                                             ' Y O O U E O  (b) word read
2a738 270             |                                                             ' T R N R S C  (c) long read
2a738 270             |                                                             ' E D G S U K  (d) new burst read
2a738 270             |                                                             '       T M E  (e) resumed sub-burst
2a738 270             |                                                             '         E D  (f) locked sub-burst
2a738 270             | 
2a738 270             | 
2a738 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
2a73c 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
2a740 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
2a744 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
2a748 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
2a74c 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
2a750 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
2a754 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
2a758 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
2a75c 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
2a760 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
2a764 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
2a768 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
2a76c 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
2a770 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
2a774 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
2a778 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
2a77c 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
2a780 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
2a784 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
2a788 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
2a78c 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
2a790 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
2a794 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
2a798 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
2a79c 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
2a7a0 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
2a7a4 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
2a7a8 28c             | 
2a7a8 28c             |                             ' fall through to read bursts
2a7a8 28c             |                         
2a7a8 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
2a7a8 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
2a7ac 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
2a7b0 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
2a7b4 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
2a7b8 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
2a7bc 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
2a7c0 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
2a7c4 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
2a7c8 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
2a7cc 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
2a7d0 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
2a7d4 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
2a7d8 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
2a7dc 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
2a7e0 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
2a7e4 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
2a7e8 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
2a7ec 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
2a7f0 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
2a7f4 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
2a7f8 2a0 E8 D1 03 F1 |                             add     clks, clks
2a7fc 2a1             | readcommon
2a7fc 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
2a800 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
2a804 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
2a808 2a4             | 
2a808 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
2a80c 2a5 69 C8 63 FD |                             rev     cmdaddr
2a810 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
2a814 2a7 61 C8 63 FD |                             mergeb  cmdaddr
2a818 2a8             | 
2a818 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
2a81c 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
2a820 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
2a820 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
2a824 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
2a828 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
2a82c 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
2a830 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
2a830 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
2a834 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
2a838 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
2a83c 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
2a840 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
2a844 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
2a848 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
2a848 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
2a84c 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
2a850 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
2a854 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
2a858 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
2a85c 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
2a860 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
2a864 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
2a868 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
2a86c 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
2a870 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
2a874 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
2a878 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
2a87c 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
2a880 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
2a880 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
2a884 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
2a888 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
2a88c 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
2a890 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
2a894 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
2a898 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
2a89c 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
2a8a0 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
2a8a4 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
2a8a8 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
2a8ac 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
2a8b0 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
2a8b4 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
2a8b8 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
2a8bc 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
2a8c0 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
2a8c4 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
2a8c8 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
2a8cc 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
2a8d0 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
2a8d4 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
2a8d8 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
2a8dc 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
2a8e0 2da 10 03 90 FD |                             jmp     #writecommon
2a8e4 2db             | 
2a8e4 2db             | '..................................................................................................
2a8e4 2db             | ' Burst continuation testing
2a8e4 2db             | 
2a8e4 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
2a8e8 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
2a8ec 2dd             | continue_read_lut          
2a8ec 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
2a8f0 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
2a8f4 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
2a8f8 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
2a8fc 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
2a900 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
2a904 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
2a908 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
2a90c 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
2a910 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
2a914 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
2a918 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
2a91c 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
2a920 2ea             | 
2a920 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
2a924 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
2a928 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
2a92c 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
2a930 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
2a934 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
2a938 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
2a93c 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
2a940 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
2a944 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
2a948 2f4 2A 1C 66 0D |             _ret_           push    #poller
2a94c 2f5             | 
2a94c 2f5             | 
2a94c 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
2a950 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
2a950 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
2a954 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
2a958 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
2a95c 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
2a960 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
2a964 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
2a968 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
2a96c 2fd 2D 00 64 FD |                             ret                             ' | continue processing
2a970 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
2a974 2ff             | '..................................................................................................
2a974 2ff             | ' Completion of requests
2a974 2ff             | 
2a974 2ff             | complete_rw_lut             
2a974 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
2a978 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
2a97c 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
2a980 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
2a984 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
2a988 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
2a98c 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
2a990 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
2a994 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
2a998 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
2a99c 309 32 62 64 AD |             if_z            skipf   #%110001
2a9a0 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
2a9a4 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
2a9a8 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
2a9ac 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
2a9b0 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
2a9b4 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
2a9b8 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
2a9bc 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
2a9c0 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
2a9c4 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
2a9c8 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
2a9cc 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
2a9d0 316             |                                                             ' skipcase (a) gfx copy to/from hub
2a9d0 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
2a9d0 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
2a9d0 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
2a9d4 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
2a9d8 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
2a9dc 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
2a9e0 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
2a9e4 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
2a9e8 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
2a9ec 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
2a9f0 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
2a9f4 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
2a9f8 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
2a9fc 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
2aa00 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
2aa04 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
2aa08 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
2aa0c 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
2aa10 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
2aa14 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
2aa18 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
2aa1c 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
2aa20 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
2aa24 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
2aa28 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
2aa2c 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
2aa30 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
2aa34 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
2aa38 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
2aa3c 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
2aa40 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
2aa44 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
2aa48 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
2aa4c 335 DF B7 03 A6 |             if_z            mov     addr2, link
2aa50 336 34 FF 9F AD |             if_z            jmp     #checknext
2aa54 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
2aa58 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
2aa5c 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
2aa60 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
2aa64 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
2aa68 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
2aa6c 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
2aa70 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
2aa74 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
2aa78 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
2aa7c 341             | 
2aa7c 341             | '..................................................................................................
2aa7c 341             | ' PSRAM WRITES
2aa7c 341             |                                                             '  a b c d e f g h
2aa7c 341             | 
2aa7c 341             |                                                             '  B W L F B R L L (a) byte write(s)
2aa7c 341             |                                                             '  Y O O I U E O O (b) word write(s)
2aa7c 341             |                                                             '  T R N L R S C C (c) long write(s)
2aa7c 341             |                                                             '  E D G L S U K K (d) resumed fill
2aa7c 341             |                                                             '          T M E E (e) new burst write
2aa7c 341             |                                                             '            E D D (f) resumed burst
2aa7c 341             |                                                             '              F B (g) locked fill
2aa7c 341             |                                                             '              I U (h) locked burst write
2aa7c 341             |                                                             '              L R 
2aa7c 341             |                                                             '              L S 
2aa7c 341             |                                                             '                T 
2aa7c 341             | 
2aa7c 341             | w_single                   
2aa7c 341             | w_fill_cont           
2aa7c 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
2aa80 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
2aa84 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
2aa88 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
2aa8c 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
2aa90 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
2aa94 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
2aa98 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
2aa9c 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
2aaa0 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
2aaa4 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
2aaa8 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
2aaac 34d             |                ' disable call to r_resume_burst for single longs when z=0
2aaac 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
2aab0 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
2aab4 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
2aab8 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
2aabc 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
2aac0 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
2aac4 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
2aac8 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
2aacc 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
2aad0 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
2aad4 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
2aad8 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
2aadc 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
2aae0 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
2aae4 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
2aae8 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
2aaec 35d             |         
2aaec 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
2aaec 35d             |             '
2aaec 35d             |             '  At least one of these 3 optional components will be sent
2aaec 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
2aaec 35d             |             '     body - N x full longs of data
2aaec 35d             |             '     trailer - last partial long of data
2aaec 35d             |             '
2aaec 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
2aaec 35d             |             '
2aaec 35d             |             'Case    Type                           Sends
2aaec 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
2aaec 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
2aaec 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
2aaec 35d             |             ' 4)     Multiple long fill             body only
2aaec 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
2aaec 35d             | 
2aaec 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
2aaec 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
2aaf0 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
2aaf4 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
2aaf8 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
2aafc 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
2ab00 362 13 8C 07 F6 |                             mov     pattern3, #%10011
2ab04 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
2ab08 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
2ab0c 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
2ab10 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
2ab14 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
2ab18 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
2ab1c 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
2ab20 36a             |                             
2ab20 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
2ab24 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
2ab28 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
2ab2c 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
2ab30 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
2ab34 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
2ab38 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
2ab3c 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
2ab40 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
2ab44 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
2ab48 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
2ab4c 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
2ab50 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
2ab54 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
2ab58 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
2ab5c 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
2ab60 37a             | 
2ab60 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
2ab64 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
2ab68 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
2ab6c 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
2ab70 37e             |                  
2ab70 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
2ab74 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
2ab78 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
2ab7c 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
2ab80 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
2ab84 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
2ab88 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
2ab8c 385             | 
2ab8c 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
2ab90 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
2ab94 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
2ab98 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
2ab9c 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
2aba0 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
2aba4 38b             | 
2aba4 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
2aba4 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
2aba8 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
2abac 38d 2A B0 63 FD |                             push    addr1                   'save address
2abb0 38e             | 
2abb0 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
2abb0 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
2abb4 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
2abb8 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
2abbc 391             |             
2abbc 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
2abc0 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
2abc4 393 2B B0 63 FD |                             pop     addr1                   'restore address
2abc8 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
2abcc 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
2abd0 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
2abd4 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
2abd8 398             | 
2abd8 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
2abdc 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
2abe0 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
2abe4 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
2abe8 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
2abec 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
2abf0 39e             | 
2abf0 39e             |                             'trailer is done
2abf0 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
2abf4 39f             | 
2abf4 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
2abf8 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
2abfc 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
2ac00 3a2             | 
2ac00 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
2ac04 3a3 69 C8 63 FD |                             rev     cmdaddr                 
2ac08 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
2ac0c 3a5 61 C8 63 FD |                             mergeb  cmdaddr
2ac10 3a6             |                             
2ac10 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
2ac14 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
2ac18 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
2ac1c 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
2ac20 3aa             |                                                          
2ac20 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
2ac24 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
2ac28 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
2ac2c 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
2ac30 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
2ac34 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
2ac38 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
2ac3c 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
2ac40 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
2ac44 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
2ac48 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
2ac4c 3b5             |  
2ac4c 3b5 59 52 63 FD |                             drvh    cspin
2ac50 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
2ac54 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
2ac58 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
2ac5c 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
2ac60 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
2ac64 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
2ac68 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
2ac6c 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
2ac70 3be EA E5 03 F6 |                             mov     d, orighubsize
2ac74 3bf EF E5 63 F0 |                             shl     d, a
2ac78 3c0 F2 E3 83 F1 |                             sub     c, d
2ac7c 3c1 DD E3 03 F1 |                             add     c, offset1
2ac80 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
2ac84 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
2ac88 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
2ac8c 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
2ac90 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
2ac94 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
2ac98 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
2ac9c 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
2aca0 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
2aca4 3cb BB D3 03 F6 |                             mov     resume, restorefill
2aca8 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
2acac 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
2acb0 3ce 6C FC BF CD |             if_c            call    #yield
2acb4 3cf 2D 00 64 FD |                             ret
2acb8 3d0             |                            
2acb8 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
2acb8 3d0             |                       '     rczl    pa                      'rotate left into address offset
2acb8 3d0             |                       '     rczl    c wcz                   'restore count and flags
2acb8 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
2acbc 3d1 02 EC 67 F0 |                             shl     pa, #2
2acc0 3d2 28 06 64 AD |             if_z            setq    #3
2acc4 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
2acc8 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
2accc 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
2acd0 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
2acd4 3d7             | 
2acd4 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
2acd8 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
2acdc 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
2ace0 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
2ace4 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
2ace8 3dc             |                 fit 1024-32
2ace8 3dc             |         
2ace8 3dc             | 
2ace8 3dc             | '..................................................................................................
2ace8 3dc             | 
2ace8 3dc             |                 fit 1024-32
2ace8 3dc 00 00 00 00 
2acec 3dd 00 00 00 00 
2acf0 3de 00 00 00 00 
2acf4 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
2acf8 3e0             |                 org 1024-32
2acf8 000             | 
2acf8 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
2acf8 000 00 00 00 00 |                 long $0000
2acfc 001 11 11 00 00 |                 long $1111
2ad00 002 22 22 00 00 |                 long $2222
2ad04 003 33 33 00 00 |                 long $3333
2ad08 004 44 44 00 00 |                 long $4444
2ad0c 005 55 55 00 00 |                 long $5555
2ad10 006 66 66 00 00 |                 long $6666
2ad14 007 77 77 00 00 |                 long $7777
2ad18 008 88 88 00 00 |                 long $8888
2ad1c 009 99 99 00 00 |                 long $9999
2ad20 00a AA AA 00 00 |                 long $aaaa
2ad24 00b BB BB 00 00 |                 long $bbbb
2ad28 00c CC CC 00 00 |                 long $cccc
2ad2c 00d DD DD 00 00 |                 long $dddd
2ad30 00e EE EE 00 00 |                 long $eeee
2ad34 00f FF FF 00 00 |                 long $ffff
2ad38 010             | 
2ad38 010             | 'masks
2ad38 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
2ad3c 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
2ad40 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
2ad44 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
2ad48 014             | 
2ad48 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
2ad4c 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
2ad50 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
2ad54 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
2ad58 018             | 
2ad58 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
2ad5c 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
2ad60 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
2ad64 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
2ad68 01c             | 
2ad68 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
2ad6c 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
2ad70 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
2ad74 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
2ad78 020             |         fit 1024
2ad78 020             | 
2ad78 020             |         fit 1024
2ad78 020             | 
2ad78 020             | '--------------------------------------------------------------------------------------------------
2ad78 020             |         orgh
2ad78                 | 
2ad78                 | gfxexpansion
2ad78                 |                             'simple line drawing graphics expansion of memory driver
2ad78                 |                             'jmp     #donerepeats                'just return for now
2ad78                 | 
2ad78     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
2ad7c     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
2ad80     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
2ad84     DD E1 03 F6 |                             mov     b, offset1              'get error term
2ad88     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
2ad8c     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
2ad90     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
2ad94     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
2ad98     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
2ad9c     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
2ada0     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
2ada4     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
2ada8     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
2adac     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
2adb0     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
2adb4     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
2adb8     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
2adbc     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
2adc0     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
2adc4     DC E5 33 F9 |                             getword d, total, #0            'get line width
2adc8     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
2adcc     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
2add0     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
2add4     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
2add8     C3 03 80 FD |                             jmp     #readmask               'continue filling
2addc                 | 	alignl
2addc                 | _usbnew_spin2_dat_
2addc                 |                 org     $000
2addc 000             | 
2addc 000             | usb_host_start
2addc 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
2ade0 001             | 
2ade0 001 03 00 00 FF 
2ade4 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
2ade8 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
2adec 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
2adf0 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
2adf4 006 29 70 63 FD |                 setq2   htmp
2adf8 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
2adfc 008             | 
2adfc 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
2ae00 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
2ae04 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
2ae08 00b             | 
2ae08 00b             | '------------------------------------------------------------------------------
2ae08 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
2ae08 00b             | ' special because the receiving function must not respond with either STALL or
2ae08 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
2ae08 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
2ae08 00b             | ' corrupt packet, it must ignore the transaction
2ae08 00b             | '------------------------------------------------------------------------------
2ae08 00b             | ' On entry:
2ae08 00b             | '   PTRA - start address of the SETUP data struct.
2ae08 00b             | ' On exit:
2ae08 00b             | '   retval - PID_ACK on success, otherwise error code.
2ae08 00b             | '------------------------------------------------------------------------------
2ae08 00b             | txn_setup
2ae08 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
2ae0c 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
2ae10 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
2ae14 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
2ae18 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
2ae1c 010             | .setup
2ae1c 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
2ae20 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ae24 012 2D 00 64 AD |         if_z    ret
2ae28 013 7C 0B B0 FD |                 call    #retry_wait
2ae2c 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2ae30 015 2D 00 64 AD |         if_z    ret
2ae34 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
2ae38 017 E0 FF 9F FD |                 jmp     #.setup
2ae3c 018             | 
2ae3c 018             | '------------------------------------------------------------------------------
2ae3c 018             | ' IN/INTERRUPT transaction.
2ae3c 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
2ae3c 018             | '------------------------------------------------------------------------------
2ae3c 018             | ' On entry:
2ae3c 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
2ae3c 018             | '     CRC(b19..23).
2ae3c 018             | ' On exit:
2ae3c 018             | '------------------------------------------------------------------------------
2ae3c 018             | txn_in
2ae3c 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
2ae40 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
2ae44 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
2ae48 01b             | 
2ae48 01b             |                 ' Fall through to urx_packet
2ae48 01b             | 
2ae48 01b             | '------------------------------------------------------------------------------
2ae48 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
2ae48 01b             | ' received are handshakes and IN DATAx.
2ae48 01b             | '------------------------------------------------------------------------------
2ae48 01b             | ' On entry:
2ae48 01b             | ' On exit:
2ae48 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
2ae48 01b             | '     returned.
2ae48 01b             | '------------------------------------------------------------------------------
2ae48 01b             | urx_packet
2ae48 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
2ae4c 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2ae50 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
2ae54 01e 1A 92 63 FD |                 getct   hct2
2ae58 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
2ae5c 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
2ae60 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
2ae64 022             | .wait_sop
2ae64 022 22 A7 8A FA |                 rdpin   urx, dm
2ae68 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2ae6c 024 08 00 90 CD |         if_c    jmp     #.get_pid
2ae70 025 FC 25 CC FB |                 jnct2   #.wait_sop
2ae74 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
2ae78 027             | .get_pid
2ae78 027 28 02 B0 FD |                 call    #urx_next
2ae7c 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
2ae80 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
2ae84 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
2ae88 02b             | .chk_pid
2ae88 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ae8c 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
2ae90 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
2ae94 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
2ae98 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
2ae9c 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
2aea0 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
2aea4 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
2aea8 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
2aeac 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
2aeb0 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
2aeb4 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
2aeb8 037             | .ack_resend
2aeb8 037 22 A7 82 FA |                 rqpin   urx, dm
2aebc 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
2aec0 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
2aec4 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
2aec8 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
2aecc 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
2aed0 03d             | .chk_eop
2aed0 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2aed4 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
2aed8 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
2aedc 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
2aee0 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
2aee4 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
2aee8 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
2aeec 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
2aef0 045 2D 00 64 FD |                 ret
2aef4 046             | .idle
2aef4 046 22 A7 82 FA |                 rqpin   urx, dm
2aef8 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2aefc 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
2af00 049 2D 00 64 FD |                 ret
2af04 04a             | 
2af04 04a             | '------------------------------------------------------------------------------
2af04 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
2af04 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
2af04 04a             | ' if one is required.
2af04 04a             | '------------------------------------------------------------------------------
2af04 04a             | ' On entry:
2af04 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
2af04 04a             | ' On exit:
2af04 04a             | '------------------------------------------------------------------------------
2af04 04a             | utx_token
2af04 04a 22 A7 82 FA |                 rqpin   urx, dm
2af08 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2af0c 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
2af10 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2af14 04e 34 0D B0 CD |         if_c    call    #utx_pre
2af18 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2af1c 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
2af20 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
2af24 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
2af28 053             | .next_byte
2af28 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
2af2c 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
2af30 055             | .wait
2af30 055 40 46 72 FD |                 testp   dp                      wc
2af34 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
2af38 057 23 03 08 FC |                 akpin   dp
2af3c 058 22 A5 22 FC |                 wypin   utx, dm
2af40 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
2af44 05a             | 
2af44 05a             | '------------------------------------------------------------------------------
2af44 05a             | ' SETUP/OUT/INTERRUPT transaction.
2af44 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
2af44 05a             | '------------------------------------------------------------------------------
2af44 05a             | ' On entry:
2af44 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
2af44 05a             | '     CRC(b19..23).
2af44 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
2af44 05a             | '   pkt_data - count of DATAx payload bytes to send.
2af44 05a             | ' On exit:
2af44 05a             | '------------------------------------------------------------------------------
2af44 05a             | txn_out
2af44 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
2af48 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
2af4c 05c 00 00 C0 FF 
2af50 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
2af54 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
2af58 05f             | 
2af58 05f             |                 ' Fall through to utx_data
2af58 05f             | 
2af58 05f             | '------------------------------------------------------------------------------
2af58 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
2af58 05f             | ' calculated while the data byte is being shifted out. Since data stage
2af58 05f             | ' success/fail is not determined until the status stage of the transaction,
2af58 05f             | ' this routine is only concerned about the current DATAx packet.
2af58 05f             | '------------------------------------------------------------------------------
2af58 05f             | ' On entry:
2af58 05f             | '   PTRA - hub start address of the data to read.
2af58 05f             | '   pkt_cnt - data payload size.
2af58 05f             | ' On exit:
2af58 05f             | '------------------------------------------------------------------------------
2af58 05f             | utx_data
2af58 05f 22 A7 82 FA |                 rqpin   urx, dm
2af5c 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2af60 061 F4 FF 9F CD |         if_c    jmp     #utx_data
2af64 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
2af68 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
2af6c 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2af70 065 D8 0C B0 CD |         if_c    call    #utx_pre
2af74 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2af78 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
2af7c 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
2af80 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
2af84 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
2af88 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
2af8c 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
2af90 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
2af94 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
2af98 06f             | .read_byte
2af98 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
2af9c 070 F0 00 B0 FD |                 call    #utx_byte
2afa0 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
2afa4 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
2afa8 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
2afac 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
2afb0 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
2afb4 076             | .send_crc
2afb4 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
2afb8 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
2afbc 078 D0 00 B0 FD |                 call    #utx_byte
2afc0 079 5D A5 EA F8 |                 getbyte utx, crc, #1
2afc4 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
2afc8 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
2afcc 07c             | 
2afcc 07c             | '------------------------------------------------------------------------------
2afcc 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
2afcc 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
2afcc 07c             | ' expects that the packet includes at least the CRC word.
2afcc 07c             | '
2afcc 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
2afcc 07c             | ' was requested, which makes it difficult to determine where the data stops
2afcc 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
2afcc 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
2afcc 07c             | ' USB-16 expected residual value of 0xB001.
2afcc 07c             | '
2afcc 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
2afcc 07c             | ' so the caller can verify IN success before writing the data to its final
2afcc 07c             | ' destination.
2afcc 07c             | '------------------------------------------------------------------------------
2afcc 07c             | ' On entry:
2afcc 07c             | '   pkt_data - max byte count expected to be in the packet.
2afcc 07c             | '   newb_flg - signals new byte ready when toggled.
2afcc 07c             | ' On exit:
2afcc 07c             | '   pkt_cnt - actual number of bytes read.
2afcc 07c             | '------------------------------------------------------------------------------
2afcc 07c             | urx_data
2afcc 07c F7 75 03 F6 |                 mov     htmp2, pb
2afd0 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
2afd4 07e 00 00 C0 FF 
2afd8 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
2afdc 080 BA EF 03 F6 |                 mov     pb, htmp2
2afe0 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
2afe4 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
2afe8 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
2afec 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
2aff0 085             | .wait_byte
2aff0 085             | ' In-line rx for max speed
2aff0 085 22 A7 82 FA |                 rqpin   urx, dm
2aff4 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
2aff8 087 53 A5 02 F5 |                 and     utx, urx
2affc 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
2b000 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
2b004 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
2b008 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
2b00c 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
2b010 08d DC FF 9F FD |                 jmp     #.wait_byte
2b014 08e             | .get_byte
2b014 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
2b018 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
2b01c 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
2b020 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
2b024 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
2b028 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
2b02c 094             | .end_crc
2b02c 094 01 B8 06 F1 |                 add     pkt_cnt, #1
2b030 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
2b034 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
2b038 097 2D 00 64 1D |         if_a    ret
2b03c 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
2b03c 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
2b03c 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
2b03c 098             | ' to miss it, so cheat a bit and look for SOP clear here.
2b03c 098 22 A7 82 FA |                 rqpin   urx, dm
2b040 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
2b044 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
2b048 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
2b048 09b             | .chk_crc
2b048 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
2b04c 09c 58 00 00 FF 
2b050 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
2b054 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
2b058 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
2b05c 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
2b060 0a1 34 09 B0 FD |                 call    #poll_waitx
2b064 0a2             | 
2b064 0a2             |                 ' Fall through to utx_handshake
2b064 0a2             | 
2b064 0a2             | '------------------------------------------------------------------------------
2b064 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
2b064 0a2             | ' the appropriate IP delay has been inserted.
2b064 0a2             | '------------------------------------------------------------------------------
2b064 0a2             | ' On entry:
2b064 0a2             | '   retval - handshake PID to send.
2b064 0a2             | ' On exit:
2b064 0a2             | '   retval unchanged.
2b064 0a2             | '------------------------------------------------------------------------------
2b064 0a2             | utx_handshake
2b064 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2b068 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
2b06c 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2b070 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
2b074 0a6 5F A5 02 F6 |                 mov     utx, retval
2b078 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
2b07c 0a8             | .idle
2b07c 0a8 22 A7 82 FA |                 rqpin   urx, dm
2b080 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2b084 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
2b088 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
2b08c 0ac 08 09 90 FD |                 jmp     #poll_waitx
2b090 0ad             | 
2b090 0ad             | '------------------------------------------------------------------------------
2b090 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
2b090 0ad             | '------------------------------------------------------------------------------
2b090 0ad             | ' On entry:
2b090 0ad             | '   utx - byte to transmit.
2b090 0ad             | ' On exit:
2b090 0ad             | '------------------------------------------------------------------------------
2b090 0ad             | utx_byte
2b090 0ad 40 46 72 FD |                 testp   dp                      wc
2b094 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
2b098 0af 23 03 08 FC |                 akpin   dp
2b09c 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
2b0a0 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
2b0a4 0b2             | 
2b0a4 0b2             | '------------------------------------------------------------------------------
2b0a4 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
2b0a4 0b2             | '------------------------------------------------------------------------------
2b0a4 0b2             | ' On entry:
2b0a4 0b2             | ' On exit:
2b0a4 0b2             | '   retval - the byte read.
2b0a4 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
2b0a4 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
2b0a4 0b2             | '     received.
2b0a4 0b2             | '------------------------------------------------------------------------------
2b0a4 0b2             | urx_next
2b0a4 0b2 22 A7 8A FA |                 rdpin   urx, dm
2b0a8 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
2b0ac 0b4 53 A5 02 F5 |                 and     utx, urx
2b0b0 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
2b0b4 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
2b0b8 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
2b0bc 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
2b0c0 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2b0c4 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
2b0c8 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
2b0cc 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
2b0d0 0bd 2D 00 64 FD |                 ret
2b0d4 0be             | 
2b0d4 0be             | '------------------------------------------------------------------------------
2b0d4 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
2b0d4 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
2b0d4 0be             | ' length, and the PID is not included in the CRC calculation:
2b0d4 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
2b0d4 0be             | '  CRC5  ENDP ADDRESS PID
2b0d4 0be             | ' %00000_1111_1111111_xxxxxxxx
2b0d4 0be             | '------------------------------------------------------------------------------
2b0d4 0be             | ' On entry:
2b0d4 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
2b0d4 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
2b0d4 0be             | ' On exit:
2b0d4 0be             | '   ep_addr_pid - CRC value appended to the packet.
2b0d4 0be             | '------------------------------------------------------------------------------
2b0d4 0be             | calc_crc5
2b0d4 0be FF 03 00 FF 
2b0d8 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
2b0dc 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
2b0e0 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
2b0e4 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
2b0e8 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
2b0ec 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
2b0f0 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
2b0f4 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
2b0f8 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
2b0fc 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
2b100 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
2b104 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
2b108 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
2b10c 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
2b110 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
2b114 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
2b118 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
2b11c 0d0             | 
2b11c 0d0             | '------------------------------------------------------------------------------
2b11c 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
2b11c 0d0             | '------------------------------------------------------------------------------
2b11c 0d0             | isr1_fsframe
2b11c 0d0 1A 92 62 FD |                 getct   iframe_ct_base
2b120 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2b124 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2b128 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2b12c 0d4             | .wait
2b12c 0d4 40 46 72 FD |                 testp   dp                      wc
2b130 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
2b134 0d6 23 03 08 FC |                 akpin   dp
2b138 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
2b13c 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
2b140 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
2b144 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
2b148 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
2b14c 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
2b150 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
2b154 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
2b158 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
2b15c 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
2b160 0e1 2C FF BF FD |                 call    #utx_byte
2b164 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
2b168 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
2b16c 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
2b170 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
2b174 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
2b178 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
2b17c 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
2b180 0e9 5B A5 42 F5 |                 or      utx, icrc
2b184 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
2b188 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
2b18c 0ec 20 00 90 FD |                 jmp     #isr1_wait
2b190 0ed             | isr1_lsframe
2b190 0ed 1A 92 62 FD |                 getct   iframe_ct_base
2b194 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2b198 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2b19c 0f0             | .wait
2b19c 0f0 40 46 72 FD |                 testp   dp                      wc
2b1a0 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
2b1a4 0f2 23 03 08 FC |                 akpin   dp
2b1a8 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
2b1ac 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
2b1b0 0f5             | isr1_wait
2b1b0 0f5 22 A5 82 FA |                 rqpin   utx, dm
2b1b4 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
2b1b8 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
2b1bc 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
2b1c0 0f9 03 00 00 FF 
2b1c4 0fa FF B3 06 F5 |                 and     frame, ##$7ff
2b1c8 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
2b1cc 0fc F5 FF 3B FB |                 reti1
2b1d0 0fd             | 
2b1d0 0fd             | '------------------------------------------------------------------------------
2b1d0 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
2b1d0 0fd             | ' transaction will complete before the next frame is triggered.
2b1d0 0fd             | '------------------------------------------------------------------------------
2b1d0 0fd             | ' On entry:
2b1d0 0fd             | ' On exit:
2b1d0 0fd             | '------------------------------------------------------------------------------
2b1d0 0fd             | wait_txn_ok
2b1d0 0fd 1A 74 63 FD |                 getct   htmp2
2b1d4 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
2b1d8 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2b1dc 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
2b1e0 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
2b1e4 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
2b1e8 103 2D 00 64 FD |                 ret
2b1ec 104             | 
2b1ec 104             | '------------------------------------------------------------------------------
2b1ec 104             | ' A device connection was detected, or a bus reset was requested by the USB
2b1ec 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
2b1ec 104             | ' and perform a reset sequence prior to device enumeration.
2b1ec 104             | '------------------------------------------------------------------------------
2b1ec 104             | dev_reset
2b1ec 104 22 A7 82 FA |                 rqpin   urx, dm
2b1f0 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
2b1f4 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
2b1f8 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
2b1fc 108             | reset
2b1fc 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
2b200 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
2b204 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
2b208 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2b20c 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
2b210 10d 1A 92 62 FD |                 getct   iframe_ct_base
2b214 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2b218 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2b21c 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
2b220 111 24 70 07 F1 |                 add     htmp, #36
2b224 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
2b228 113             | .framewait
2b228 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
2b22c 114 F8 FF 9F CD |         if_b    jmp     #.framewait
2b230 115 2D 00 64 FD |                 ret
2b234 116             | 
2b234 116             | '------------------------------------------------------------------------------
2b234 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
2b234 116             | '------------------------------------------------------------------------------
2b234 116             | ' On entry:
2b234 116             | '   PTRA - source address.
2b234 116             | '   PB - destination address.
2b234 116             | '   hr0 - length of copy, in bytes.
2b234 116             | ' On exit:
2b234 116             | '------------------------------------------------------------------------------
2b234 116             | hmemcpy
2b234 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
2b238 117 F7 71 43 FC |                 wrbyte  htmp, pb
2b23c 118 01 EE 07 F1 |                 add     pb, #1
2b240 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
2b244 11a             | 
2b244 11a             | '------------------------------------------------------------------------------
2b244 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
2b244 11a             | ' loop until the errant device is disconnected.
2b244 11a             | '------------------------------------------------------------------------------
2b244 11a             | ' On entry:
2b244 11a             | ' On exit:
2b244 11a             | '------------------------------------------------------------------------------
2b244 11a             | host_error
2b244 11a             |           if ERROR_LED >= 0
2b244 11a             |           end
2b244 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
2b248 11b             | 
2b248 11b             | '------------------------------------------------------------------------------
2b248 11b             | ' Get HID descriptor buffer for current port
2b248 11b             | '------------------------------------------------------------------------------
2b248 11b             | ' On entry:
2b248 11b             | ' On exit:
2b248 11b             | '   PB - HID descriptor buffer pointer
2b248 11b             | '------------------------------------------------------------------------------
2b248 11b             | get_hid_descr_buffer
2b248 11b 2D EF 03 F6 |                 mov     pb, hdev_port
2b24c 11c 01 EE E7 F2 |                 cmpsub  pb, #1
2b250 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
2b254 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
2b258 11f             | 
2b258 11f             | 
2b258 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
2b25c 120             | 
2b25c 120             | ' USB commands and error codes
2b25c 120 00 00 00 00 | cmd_data        long    0
2b260 121 00 00 00 00 | usb_err_code    long    ERR_NONE
2b264 122             | 
2b264 122             | ' Parameters block assigned at cog startup
2b264 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
2b268 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
2b26c 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
2b270 125             | if ACTIVITY_LED >= 0
2b270 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
2b270 125             | end
2b270 125             | if ERROR_LED >= 0
2b270 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
2b270 125             | end
2b270 125 00 00 00 00 | hid_descr_p     long    0
2b274 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
2b274 126             | 'hkbd_report_p   long    0
2b274 126 00 00 00 00 | hub_descr_p     long    0
2b278 127 00 00 00 00 | urx_buff_p      long    0
2b27c 128 00 00 00 00 | dev_desc_buff_p long    0
2b280 129 00 00 00 00 | con_desc_buff_p long    0
2b284 12a 00 00 00 00 | cache_start_p   long    0
2b288 12b 00 00 00 00 | cache_end_p     long    0
2b28c 12c             | if EMUPAD_MAX_PLAYER > 0
2b28c 12c             | emupad_out_ptr  long    0
2b28c 12c             | end
2b28c 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
2b290 12d             | 
2b290 12d             | hdev_init_start
2b290 12d             | hdev_port       res     1
2b290 12d             | hdev_port       res     1
2b290 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
2b290 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
2b290 12d             | kbm_next_datax  res     1
2b290 12d             | kbm_next_datax  res     1
2b290 12d             | hub_intf_num    res     1
2b290 12d             | hub_intf_num    res     1
2b290 12d             | hub_next_datax  res     1
2b290 12d             | hub_next_datax  res     1
2b290 12d             | hub_status_chg  res     1
2b290 12d             | hub_status_chg  res     1
2b290 12d             | hub_port_status res     1
2b290 12d             | hub_port_status res     1
2b290 12d             | if HAVE_MOUSE
2b290 12d             | ms_intf_num     res     1
2b290 12d             | ms_intf_num     res     1
2b290 12d             | ms_in_max_pkt   res     1
2b290 12d             | ms_in_max_pkt   res     1
2b290 12d             | end
2b290 12d             | kb_intf_num     res     1
2b290 12d             | kb_intf_num     res     1
2b290 12d             | kb_interval     res     1
2b290 12d             | kb_interval     res     1
2b290 12d             | kb_in_max_pkt   res     1
2b290 12d             | kb_in_max_pkt   res     1
2b290 12d             | kb_max_index    res     1
2b290 12d             | kb_max_index    res     1
2b290 12d             | kb_led_states   res     1
2b290 12d             | kb_led_states   res     1
2b290 12d             | gp_intf_num     res     1
2b290 12d             | gp_intf_num     res     1
2b290 12d             | gp_interval     res     1
2b290 12d             | gp_interval     res     1
2b290 12d             | gp_max_index    res     1
2b290 12d             | gp_max_index    res     1
2b290 12d             | gp_descr_len    res     1+MAX_DEVICES
2b290 12d             | gp_descr_len    res     1+MAX_DEVICES
2b290 12d             | hdev_init_end
2b290 12d             | 
2b290 12d             | ' Initialized at cog startup:
2b290 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
2b290 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
2b290 12d             | iframe_ct_new   res     1
2b290 12d             | iframe_ct_new   res     1
2b290 12d             | iframe_ct_base  res     1
2b290 12d             | iframe_ct_base  res     1
2b290 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
2b290 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
2b290 12d             | 
2b290 12d             | ' This register block is reset to zero when a USB device connects
2b290 12d             | hreg_init_start
2b290 12d             | hstatus         res     1         ' Host status flags
2b290 12d             | hstatus         res     1         ' Host status flags
2b290 12d             | hctwait         res     1         ' Poll-based wait clocks
2b290 12d             | hctwait         res     1         ' Poll-based wait clocks
2b290 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
2b290 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
2b290 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
2b290 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
2b290 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
2b290 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
2b290 12d             | xfer_retry      res     1         ' Control transfer retry count
2b290 12d             | xfer_retry      res     1         ' Control transfer retry count
2b290 12d             | retry           res     1         ' Transaction retry count
2b290 12d             | retry           res     1         ' Transaction retry count
2b290 12d             | utx             res     1         ' Byte to transmit on USB
2b290 12d             | utx             res     1         ' Byte to transmit on USB
2b290 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
2b290 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
2b290 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
2b290 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
2b290 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
2b290 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
2b290 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
2b290 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
2b290 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
2b290 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
2b290 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
2b290 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
2b290 12d             | frame           res     1         ' USB 1ms frame counter value
2b290 12d             | frame           res     1         ' USB 1ms frame counter value
2b290 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
2b290 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
2b290 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
2b290 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
2b290 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
2b290 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
2b290 12d             | crc             res     1         ' Used for CRC16 calculation
2b290 12d             | crc             res     1         ' Used for CRC16 calculation
2b290 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
2b290 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
2b290 12d             | retval          res     1         ' Global success/fail return parameter
2b290 12d             | retval          res     1         ' Global success/fail return parameter
2b290 12d             | context_retval  res     1         ' Operation contextual return parameter
2b290 12d             | context_retval  res     1         ' Operation contextual return parameter
2b290 12d             | ' Device stuff
2b290 12d             | hdev_id         res     1+MAX_DEVICES
2b290 12d             | hdev_id         res     1+MAX_DEVICES
2b290 12d             | hdev_bcd        res     1
2b290 12d             | hdev_bcd        res     1
2b290 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
2b290 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
2b290 12d             | ' Keyboard/mouse stuff
2b290 12d             | hctrl_ep_addr   res     1
2b290 12d             | hctrl_ep_addr   res     1
2b290 12d             | hctrl_max_pkt   res     1
2b290 12d             | hctrl_max_pkt   res     1
2b290 12d             | hconfig_base    res     1
2b290 12d             | hconfig_base    res     1
2b290 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
2b290 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
2b290 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
2b290 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
2b290 12d             | hdev_class      res     1
2b290 12d             | hdev_class      res     1
2b290 12d             | hdev_subclass   res     1
2b290 12d             | hdev_subclass   res     1
2b290 12d             | hdev_protocol   res     1
2b290 12d             | hdev_protocol   res     1
2b290 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
2b290 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
2b290 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
2b290 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
2b290 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
2b290 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
2b290 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
2b290 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
2b290 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
2b290 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
2b290 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
2b290 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
2b290 12d             | if HAVE_MOUSE
2b290 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
2b290 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
2b290 12d             | end
2b290 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
2b290 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
2b290 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
2b290 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
2b290 12d             | hdev_ep_addr    res     1+MAX_DEVICES
2b290 12d             | hdev_ep_addr    res     1+MAX_DEVICES
2b290 12d             | hdev_out_addr   res     1
2b290 12d             | hdev_out_addr   res     1
2b290 12d             | 
2b290 12d             | if EMUPAD_MAX_PLAYER > 0
2b290 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
2b290 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
2b290 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
2b290 12d             | end
2b290 12d             | 
2b290 12d             | hreg_init_end
2b290 12d             | 
2b290 12d             | hidr_start
2b290 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
2b290 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
2b290 12d             | hidr_flags      res     1
2b290 12d             | hidr_flags      res     1
2b290 12d             | hidr_axis       res     3
2b290 12d             | hidr_axis       res     3
2b290 12d             | hidr_buttons    res     1
2b290 12d             | hidr_buttons    res     1
2b290 12d             | hidr_hats       res     1
2b290 12d             | hidr_hats       res     1
2b290 12d             | '' Above are actually useful values, 6 longs
2b290 12d             | hidr_id         res     1
2b290 12d             | hidr_id         res     1
2b290 12d             | hidr_state      res     1
2b290 12d             | hidr_state      res     1
2b290 12d             | hidr_size       res     1
2b290 12d             | hidr_size       res     1
2b290 12d             | hidr_count      res     1
2b290 12d             | hidr_count      res     1
2b290 12d             | hidr_offset     res     1
2b290 12d             | hidr_offset     res     1
2b290 12d             | hidr_usage_idx  res     1
2b290 12d             | hidr_usage_idx  res     1
2b290 12d             | hidr_lminmax    res     1
2b290 12d             | hidr_lminmax    res     1
2b290 12d             | hidr_pminmax    res     1
2b290 12d             | hidr_pminmax    res     1
2b290 12d             | hidr_type       res     1
2b290 12d             | hidr_type       res     1
2b290 12d             | hidr_end
2b290 12d             | 
2b290 12d             | ' Variables dependent on the system freqency
2b290 12d             | _var_64_lower_  res     1
2b290 12d             | _var_64_lower_  res     1
2b290 12d             | _var_64_upper_  res     1
2b290 12d             | _var_64_upper_  res     1
2b290 12d             | _12Mbps_        res     1
2b290 12d             | _12Mbps_        res     1
2b290 12d             | _1_5Mbps_       res     1
2b290 12d             | _1_5Mbps_       res     1
2b290 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
2b290 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
2b290 12d             | _1us_           res     1         ' 1us
2b290 12d             | _1us_           res     1         ' 1us
2b290 12d             | _10us_          res     1         ' 10us
2b290 12d             | _10us_          res     1         ' 10us
2b290 12d             | _33us_          res     1         ' 33us
2b290 12d             | _33us_          res     1         ' 33us
2b290 12d             | _txn_err_       res     1         ' 250us
2b290 12d             | _txn_err_       res     1         ' 250us
2b290 12d             | _500us_         res     1         ' 500us
2b290 12d             | _500us_         res     1         ' 500us
2b290 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
2b290 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
2b290 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
2b290 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
2b290 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
2b290 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
2b290 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
2b290 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
2b290 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
2b290 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
2b290 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
2b290 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
2b290 12d             | _preamble_wait_ res     1
2b290 12d             | _preamble_wait_ res     1
2b290 12d             | _1ms_           res     1         ' 1ms
2b290 12d             | _1ms_           res     1         ' 1ms
2b290 12d             | _2ms_           res     1         ' 2ms
2b290 12d             | _2ms_           res     1         ' 2ms
2b290 12d             | _suspend_wait_  res     1         ' 3ms
2b290 12d             | _suspend_wait_  res     1         ' 3ms
2b290 12d             | _4ms_           res     1         ' 4ms
2b290 12d             | _4ms_           res     1         ' 4ms
2b290 12d             | _xfer_wait_     res     1         ' 5ms
2b290 12d             | _xfer_wait_     res     1         ' 5ms
2b290 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
2b290 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
2b290 12d             | _reset_hold_    res     1         ' 15ms
2b290 12d             | _reset_hold_    res     1         ' 15ms
2b290 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
2b290 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
2b290 12d             | _21ms_          res     1         ' 21ms
2b290 12d             | _21ms_          res     1         ' 21ms
2b290 12d             | _100ms_         res     1         ' 100ms
2b290 12d             | _100ms_         res     1         ' 100ms
2b290 12d             | _500ms_         res     1         ' 500ms
2b290 12d             | _500ms_         res     1         ' 500ms
2b290 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
2b290 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
2b290 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
2b290 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
2b290 12d             | '------------------------------------------------------------------------------
2b290 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
2b290 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
2b290 12d             | _usb_d_ls_nco_  res     1
2b290 12d             | _usb_d_ls_nco_  res     1
2b290 12d             | _usb_h_fs_nco_  res     1
2b290 12d             | _usb_h_fs_nco_  res     1
2b290 12d             | _usb_d_fs_nco_  res     1
2b290 12d             | _usb_d_fs_nco_  res     1
2b290 12d             | '------------------------------------------------------------------------------
2b290 12d             | ' Scratch registers
2b290 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
2b290 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
2b290 12d             | htmp1           res     1
2b290 12d             | htmp1           res     1
2b290 12d             | htmp2           res     1
2b290 12d             | htmp2           res     1
2b290 12d             | htmp3           res     1
2b290 12d             | htmp3           res     1
2b290 12d             | hrep            res     1         ' Repeat count
2b290 12d             | hrep            res     1         ' Repeat count
2b290 12d             | hsave0          res     1         ' Subroutine parameter saves
2b290 12d             | hsave0          res     1         ' Subroutine parameter saves
2b290 12d             | hsave1          res     1
2b290 12d             | hsave1          res     1
2b290 12d             | hsave2          res     1
2b290 12d             | hsave2          res     1
2b290 12d             | isrtmp1         res     1
2b290 12d             | isrtmp1         res     1
2b290 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
2b290 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
2b290 12d             | hr0             res     1         ' Multi-purpose registers
2b290 12d             | hr0             res     1         ' Multi-purpose registers
2b290 12d             | hr1             res     1
2b290 12d             | hr1             res     1
2b290 12d             | hr2             res     1
2b290 12d             | hr2             res     1
2b290 12d             | hr3             res     1
2b290 12d             | hr3             res     1
2b290 12d             | hpar1           res     1         ' Routine entry/exit parameters
2b290 12d             | hpar1           res     1         ' Routine entry/exit parameters
2b290 12d             | hpar2           res     1
2b290 12d             | hpar2           res     1
2b290 12d             | hpar3           res     1
2b290 12d             | hpar3           res     1
2b290 12d             | hct2            res     1         ' Function response bus turn-around timer
2b290 12d             | hct2            res     1         ' Function response bus turn-around timer
2b290 12d             | hct3            res     1         ' Keyboard/mouse poll timer
2b290 12d             | hct3            res     1         ' Keyboard/mouse poll timer
2b290 12d             | mod_cnt         res     1         ' Used in idle loops
2b290 12d             | mod_cnt         res     1         ' Used in idle loops
2b290 12d             |                 fit     $1F0
2b290 12d             |                 org     $200
2b290 200             | hlut_start
2b290 200             | 
2b290 200             | '------------------------------------------------------------------------------
2b290 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
2b290 200             | ' settings to startup defaults.
2b290 200             | '------------------------------------------------------------------------------
2b290 200             | ' On entry:
2b290 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
2b290 200             | '------------------------------------------------------------------------------
2b290 200             | set_speed_full
2b290 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
2b294 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
2b298 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
2b29c 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
2b2a0 204             | '                ret                             wcz     ' Restore caller flags on exit
2b2a0 204             | 
2b2a0 204             | '------------------------------------------------------------------------------
2b2a0 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
2b2a0 204             | ' is a downstream hub connected (not yet implemented), the baud generator
2b2a0 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
2b2a0 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
2b2a0 204             | ' putting the smart pins into reset.
2b2a0 204             | '------------------------------------------------------------------------------
2b2a0 204             | ' On entry:
2b2a0 204             | ' On exit: CZ flags restored to caller states
2b2a0 204             | '------------------------------------------------------------------------------
2b2a0 204             | set_speed_low
2b2a0 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
2b2a4 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
2b2a8 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
2b2ac 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
2b2b0 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2b2b4 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
2b2b8 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
2b2bc 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
2b2c0 20c             | 
2b2c0 20c             | '------------------------------------------------------------------------------
2b2c0 20c             | ' Perform configuration stuff required when a device intitially connects.
2b2c0 20c             | '------------------------------------------------------------------------------
2b2c0 20c             | ' On entry:
2b2c0 20c             | ' On exit:
2b2c0 20c             | '------------------------------------------------------------------------------
2b2c0 20c             | on_connect
2b2c0 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
2b2c4 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
2b2c8 20e             | .retry
2b2c8 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2b2cc 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
2b2d0 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
2b2d4 211 00 08 00 FF 
2b2d8 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
2b2dc 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
2b2e0 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2b2e4 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
2b2e8 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
2b2ec 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
2b2f0 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b2f4 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
2b2f8 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
2b2fc 21b 4C 03 B0 FD |                 call    #poll_waitx
2b300 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
2b304 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
2b308 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
2b30c 21f B8 FF 9F FD |                 jmp     #.retry
2b310 220             | .get_dev_desc
2b310 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
2b314 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
2b318 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
2b31c 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
2b320 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
2b324 225 88 FB BF FD |                 call    #reset
2b328 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
2b32c 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2b330 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
2b334 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
2b338 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b33c 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
2b340 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
2b344 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
2b348 22e 04 00 00 FF 
2b34c 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
2b350 230 34 FA BF FD |                 call    #calc_crc5
2b354 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
2b358 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2b35c 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
2b360 234 F7 AD C2 FA |                 rdbyte  total_data, pb
2b364 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
2b368 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
2b36c 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b370 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
2b374 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
2b378 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
2b37c 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
2b380 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
2b384 23d C4 02 B0 FD |                 call    #poll_waitx
2b388 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
2b38c 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2b390 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
2b394 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
2b398 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
2b39c 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b3a0 244 2D 00 64 5D |         if_nz   ret
2b3a4 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
2b3a8 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
2b3ac 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
2b3b0 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
2b3b4 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
2b3b8 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
2b3bc 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
2b3c0 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
2b3c4 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
2b3c8 24e 2C FB 9F CD |         if_b    jmp     #host_error
2b3cc 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
2b3d0 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
2b3d4 251 2D EC 63 FD |                 call    pa
2b3d8 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
2b3dc 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
2b3e0 254 2C EC 63 FD |                 jmp     pa
2b3e4 255             | 
2b3e4 255             | '------------------------------------------------------------------------------
2b3e4 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
2b3e4 255             | ' Status reporting is always in the function-to-host direction.
2b3e4 255             | '------------------------------------------------------------------------------
2b3e4 255             | ' On entry:
2b3e4 255             | '   PTRA - start address of the SETUP data in hub.
2b3e4 255             | '   PB - start address of the buffer/struct to be written to during the IN data
2b3e4 255             | '     stage.
2b3e4 255             | '   ep_addr_pid - device address, endpoint and CRC5.
2b3e4 255             | ' On exit:
2b3e4 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
2b3e4 255             | '     contains the count of data stage bytes actually received, which must
2b3e4 255             | '     always be <= the count requested.
2b3e4 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2b3e4 255             | '     more specific USB operation error code.
2b3e4 255             | '------------------------------------------------------------------------------
2b3e4 255             | control_read
2b3e4 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
2b3e8 256 F8 8F 03 F6 |                 mov     hpar2, ptra
2b3ec 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
2b3f0 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2b3f4 259             | .xfer_start
2b3f4 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
2b3f8 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2b3fc 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b400 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
2b404 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
2b408 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2b40c 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2b410 260 61 00 00 FF 
2b414 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
2b418 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2b41c 263             | .data
2b41c 263 56 B1 02 F6 |                 mov     pkt_data, total_data
2b420 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
2b424 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
2b428 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
2b42c 267             | .nak_retry
2b42c 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
2b430 268             | .in_retry
2b430 268 BC F6 BF FD |                 call    #txn_in
2b434 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
2b438 26a 28 00 90 AD |         if_z    jmp     #.commit
2b43c 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2b440 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2b444 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2b448 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2b44c 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
2b450 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
2b454 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
2b458 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2b45c 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
2b460 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
2b464 275             | .commit
2b464 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
2b468 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
2b46c 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
2b470 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
2b474 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
2b478 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2b47c 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
2b480 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
2b484 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
2b488 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
2b48c 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
2b490 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
2b494 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
2b498 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
2b49c 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
2b4a0 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
2b4a4 285             | .pre_status
2b4a4 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
2b4a8 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
2b4ac 287 00 B0 06 F6 |                 mov     pkt_data, #0
2b4b0 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
2b4b4 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2b4b8 28a 61 00 00 FF 
2b4bc 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
2b4c0 28c             | .out_retry
2b4c0 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
2b4c4 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b4c8 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
2b4cc 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2b4d0 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2b4d4 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2b4d8 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
2b4dc 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
2b4e0 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2b4e4 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
2b4e8 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
2b4ec 297             | ' I've encountered transfer STALL, even though the data looks correct, and
2b4ec 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
2b4ec 297             | ' ControlRead() transfer gets things unstuck most of the time...
2b4ec 297             | .xfer_retry
2b4ec 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
2b4f0 298 58 01 B0 FD |                 call    #poll_waitx
2b4f4 299 8C F9 BF FD |                 call    #wait_txn_ok
2b4f8 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
2b4fc 29b C7 F1 03 F6 |                 mov     ptra, hpar2
2b500 29c C8 EF 03 F6 |                 mov     pb, hpar3
2b504 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
2b508 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
2b50c 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
2b510 2a0             | 
2b510 2a0             | '------------------------------------------------------------------------------
2b510 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
2b510 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
2b510 2a0             | ' the SETUP data struct is filled with the required values.
2b510 2a0             | '------------------------------------------------------------------------------
2b510 2a0             | ' On entry:
2b510 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
2b510 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
2b510 2a0             | '     stage.
2b510 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
2b510 2a0             | ' On exit:
2b510 2a0             | '   retval - used to convey the success/failure of each stage.
2b510 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2b510 2a0             | '     more specific USB operation error code.
2b510 2a0             | '------------------------------------------------------------------------------
2b510 2a0             | control_write
2b510 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2b514 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2b518 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2b51c 2a3             | 
2b51c 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
2b520 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
2b524 2a5 F7 91 03 F6 |                 mov     hpar3, pb
2b528 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2b52c 2a7             | .xfer_start
2b52c 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
2b530 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
2b534 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2b538 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b53c 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
2b540 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
2b544 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2b548 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2b54c 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
2b550 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2b554 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2b558 2b2             | .data
2b558 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
2b55c 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
2b560 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
2b564 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
2b568 2b6             | .out_retry
2b568 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
2b56c 2b7 88 F6 BF FD |                 call    #txn_out
2b570 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b574 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
2b578 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2b57c 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
2b580 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
2b584 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
2b588 2be             | .commit
2b588 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
2b58c 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
2b590 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
2b594 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
2b598 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
2b59c 2c3             | pre_status_in
2b59c 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
2b5a0 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2b5a4 2c5             | .status_retry
2b5a4 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
2b5a8 2c6 44 F5 BF FD |                 call    #txn_in
2b5ac 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
2b5b0 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
2b5b4 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
2b5b8 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
2b5bc 2cb 2D 00 64 AD |         if_z    ret
2b5c0 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
2b5c4 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2b5c8 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
2b5cc 2cf             | '               ret                                     ' Caller must handle transfer retirement
2b5cc 2cf             | 
2b5cc 2cf             | '------------------------------------------------------------------------------
2b5cc 2cf             | ' Execute an IN interrupt transaction.
2b5cc 2cf             | '------------------------------------------------------------------------------
2b5cc 2cf             | ' On entry:
2b5cc 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
2b5cc 2cf             | '   hpar2 - Address of the IN data buffer
2b5cc 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
2b5cc 2cf             | ' On exit:
2b5cc 2cf             | '   retval - the result of the operation.
2b5cc 2cf             | '   hpar3 - the count of IN data bytes actually received.
2b5cc 2cf             | '------------------------------------------------------------------------------
2b5cc 2cf             | do_int_in
2b5cc 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2b5d0 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2b5d4 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2b5d8 2d2             | 
2b5d8 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
2b5dc 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
2b5e0 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
2b5e4 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
2b5e8 2d6             | .retry
2b5e8 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
2b5ec 2d7 00 F5 BF FD |                 call    #txn_in
2b5f0 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
2b5f4 2d9 1C 00 90 AD |         if_z    jmp     #.commit
2b5f8 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
2b5fc 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
2b600 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
2b604 2dd 54 00 B0 FD |                 call    #retry_wait
2b608 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2b60c 2df 18 00 90 AD |         if_z    jmp     #.post_ret
2b610 2e0 D4 FF 9F FD |                 jmp     #.retry
2b614 2e1             | .commit
2b614 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
2b618 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
2b61c 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
2b620 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
2b624 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2b628 2e6             | .post_ret
2b628 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
2b62c 2e7             | 
2b62c 2e7             | 
2b62c 2e7             | '------------------------------------------------------------------------------
2b62c 2e7             | ' Resets the downstream hub port to FS
2b62c 2e7             | '------------------------------------------------------------------------------
2b62c 2e7             | dwnstream_reset
2b62c 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2b630 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
2b634 2e9             | 
2b634 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
2b638 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
2b63c 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2b640 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
2b644 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
2b648 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
2b64c 2ef             | 
2b64c 2ef             | '------------------------------------------------------------------------------
2b64c 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
2b64c 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
2b64c 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
2b64c 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
2b64c 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
2b64c 2ef             | '------------------------------------------------------------------------------
2b64c 2ef             | ' On entry:
2b64c 2ef             | '   hctwait - wait interval in sysclocks.
2b64c 2ef             | ' On exit:
2b64c 2ef             | '------------------------------------------------------------------------------
2b64c 2ef             | poll_waitx
2b64c 2ef 1A 92 63 FD |                 getct   hct2
2b650 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
2b654 2f1             | .wait
2b654 2f1 FF 25 CC FB |                 jnct2   #.wait
2b658 2f2 2D 00 64 FD |                 ret
2b65c 2f3             | 
2b65c 2f3             | '------------------------------------------------------------------------------
2b65c 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
2b65c 2f3             | '------------------------------------------------------------------------------
2b65c 2f3             | ' On entry:
2b65c 2f3             | '   retval - transaction response PID or error code.
2b65c 2f3             | ' On exit:
2b65c 2f3             | '------------------------------------------------------------------------------
2b65c 2f3             | retry_wait
2b65c 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2b660 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
2b664 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2b668 2f6 14 00 90 AD |         if_z    jmp     #.nak
2b66c 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
2b670 2f8 D8 FF BF FD |                 call    #poll_waitx
2b674 2f9             | .dec
2b674 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
2b678 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
2b67c 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
2b680 2fc             | .nak
2b680 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
2b684 2fd C4 FF BF FD |                 call    #poll_waitx
2b688 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
2b68c 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
2b690 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
2b694 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
2b698 302 2D 00 64 FD |                 ret
2b69c 303             | 
2b69c 303             | host_reset
2b69c 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
2b6a0 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
2b6a4 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
2b6a4 305 BD 01 05 FF 
2b6a8 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
2b6ac 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
2b6b0 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
2b6b4 309             | ' Check to see if the system clock has been changed.
2b6b4 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2b6b8 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
2b6bc 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
2b6c0 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
2b6c4 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2b6c8 30e 40 46 62 FD |                 dirl    dp
2b6cc 30f             | 
2b6cc 30f 28 02 64 FD |                 setq    #1
2b6d0 310 80 00 80 FF 
2b6d4 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2b6d8 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
2b6dc 313             | .enable
2b6dc 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2b6e0 314 41 46 62 FD |                 dirh    dp
2b6e4 315 1F 36 63 FD |                 waitx   _1us_
2b6e8 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2b6ec 317             | 
2b6ec 317             |                 ' Handle Port protection enable and startup delay
2b6ec 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
2b6f0 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
2b6f4 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
2b6f8 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
2b6fc 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
2b700 31c             | 
2b700 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
2b704 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
2b708 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
2b70c 31f 00 00 04 F6 |                 mov     0-0, #0
2b710 320             | .regloop
2b710 320             | 
2b710 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
2b710 320             | 
2b710 320             | discon_entry
2b710 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
2b714 321             | 
2b714 321             |               
2b714 321             |         if HAVE_HIDPAD
2b714 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
2b718 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
2b71c 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
2b720 324 F7 01 68 FC |                 wrlong  #0,pb
2b724 325             |         end
2b724 325             |         if EMUPAD_MAX_PLAYER > 0
2b724 325             |         end
2b724 325             | 
2b724 325             |                 ' Fall through to disconnected loop
2b724 325             | 
2b724 325             | '-----------------------------------------------------------------------------------------------------------------
2b724 325             | ' Device connect handling (Section 7.1.7.3).
2b724 325             | '-----------------------------------------------------------------------------------------------------------------
2b724 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
2b724 325             | ' device to connect (Section 7.1.7.3).
2b724 325             | '-----------------------------------------------------------------------------------------------------------------
2b724 325             | disconnected
2b724 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
2b728 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
2b72c 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
2b730 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
2b734 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
2b738 32a             |         if ACTIVITY_LED >= 0
2b738 32a             |         end
2b738 32a 22 A7 82 FA |                 rqpin   urx, dm
2b73c 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
2b740 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
2b744 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
2b748 32e             | .se1_test
2b748 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
2b74c 32f FC FE BF FD |                 call    #poll_waitx
2b750 330 22 A7 82 FA |                 rqpin   urx, dm
2b754 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
2b758 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
2b75c 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
2b760 334             | .se1            'SE1 is a fatal error condition
2b760 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
2b764 335 E4 FE BF FD |                 call    #poll_waitx
2b768 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
2b76c 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
2b770 338             | .connect_test                                           ' Test lines until stable J/K state seen
2b770 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
2b774 339 22 A7 82 FA |                 rqpin   urx, dm
2b778 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
2b77c 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
2b780 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
2b784 33d             | connected
2b784 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
2b788 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
2b78c 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
2b790 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
2b794 341             | .set_pulse
2b794 341 1A 64 63 FD |                 getct   _pulse_time_
2b798 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
2b79c 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
2b79c 343             | ' of 1ms and make a correction, if necessary.
2b79c 343             | '                mov     htmp, _1ms_
2b79c 343             | '                subs    htmp, iframe_delta
2b79c 343             | '                adds    _frame1ms_clks_, htmp
2b79c 343             | '                debug(udec(_frame1ms_clks_))
2b79c 343             | 
2b79c 343             |                 ' Fall through to idle/processing loop
2b79c 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
2b7a0 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
2b7a4 345             | 
2b7a4 345             | hidle
2b7a4 345 22 A7 82 FA |                 rqpin   urx, dm
2b7a8 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2b7ac 347 98 00 90 CD |         if_c    jmp     #.se0_test
2b7b0 348 24 06 70 FD |                 pollct3                         wc
2b7b4 349 68 00 90 3D |         if_nc   jmp     #.nopoll
2b7b8 34a 1A 94 63 FD |                 getct   hct3
2b7bc 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
2b7c0 34c             | 
2b7c0 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2b7c4 34d 00 70 E3 F8 |                 getbyte htmp
2b7c8 34e             | 
2b7c8 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
2b7cc 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
2b7d0 350 40 00 90 AD |         if_z    jmp     #.poll
2b7d4 351             | 
2b7d4 351             |         if _HAVE_GAMEPAD
2b7d4 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
2b7d8 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
2b7dc 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
2b7e0 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
2b7e4 355 2C 00 90 AD |         if_z    jmp     #.poll
2b7e8 356             |         end
2b7e8 356             | 
2b7e8 356             |         if HAVE_MOUSE
2b7e8 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
2b7ec 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
2b7f0 358 20 00 90 AD |         if_z    jmp     #.poll
2b7f4 359             |         end
2b7f4 359             | 
2b7f4 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
2b7f8 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
2b7fc 35b 14 00 90 AD |         if_z    jmp     #.poll
2b800 35c             | 
2b800 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
2b804 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
2b808 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
2b80c 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
2b810 360             |         if HAVE_MOUSE
2b810 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
2b814 361             |         else
2b814 361             |         end
2b814 361             | 
2b814 361             | .poll
2b814 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
2b818 362 2D EC 63 FD |                 call    pa
2b81c 363             | .skip_poll
2b81c 363             | 
2b81c 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
2b820 364             | 
2b820 364             | .nopoll
2b820 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
2b824 365 44 00 90 AD |         if_z    jmp     #hsuspend
2b828 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
2b82c 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
2b830 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
2b834 369 1A 84 63 FD |                 getct   hr0
2b838 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
2b83c 36b             |         if ACTIVITY_LED >= 0
2b83c 36b             |         end
2b83c 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
2b840 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
2b844 36d 5C FF 9F FD |                 jmp     #hidle
2b848 36e             | ' Check for extended SE0 state on the bus
2b848 36e             | .se0_test
2b848 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
2b84c 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
2b850 370 22 A7 82 FA |                 rqpin   urx, dm
2b854 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2b858 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
2b85c 373 24 F6 BF FD |                 call    #wait_txn_ok
2b860 374 00 00 80 FF 
2b864 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
2b868 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
2b868 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
2b86c 377             | 
2b86c 377             | hsuspend
2b86c 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
2b870 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
2b874 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
2b878 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
2b87c 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
2b880 37c 00 96 07 F6 |                 mov     mod_cnt, #0
2b884 37d             | 
2b884 37d             |                 ' Fall through to resume wait loop
2b884 37d             | 
2b884 37d             | hwait_resume
2b884 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
2b888 37e 02 86 47 F0 |                 shr     hr1, #2
2b88c 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
2b890 380             |         if ACTIVITY_LED >= 0
2b890 380             |         end
2b890 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
2b894 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
2b898 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
2b89c 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2b8a0 384 18 00 90 AD |         if_z    jmp     #.resume
2b8a4 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
2b8a8 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
2b8ac 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
2b8b0 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2b8b4 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
2b8b8 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
2b8bc 38b             | .resume
2b8bc 38b 22 05 28 FC |                 wypin   #OUT_K, dm
2b8c0 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
2b8c4 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
2b8c8 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
2b8cc 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
2b8d0 390 1F 70 63 FD |                 waitx   htmp
2b8d4 391 22 07 28 FC |                 wypin   #OUT_J, dm
2b8d8 392 01 70 47 F0 |                 shr     htmp, #1
2b8dc 393 1F 70 63 FD |                 waitx   htmp
2b8e0 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2b8e4 395 1A 92 62 FD |                 getct   iframe_ct_base
2b8e8 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2b8ec 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2b8f0 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
2b8f4 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
2b8f8 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
2b8fc 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
2b900 39c             | 
2b900 39c             | '------------------------------------------------------------------------------
2b900 39c             | ' Send preamble to enable low-speed HUB ports
2b900 39c             | '------------------------------------------------------------------------------
2b900 39c             | ' On entry:
2b900 39c             | ' On exit:
2b900 39c             | '   USB baud rate set to low-speed
2b900 39c             | '------------------------------------------------------------------------------
2b900 39c             | utx_pre
2b900 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2b904 39d 40 46 62 FD |                 dirl    dp
2b908 39e 28 02 64 FD |                 setq    #1
2b90c 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
2b910 3a0 58 44 62 FD |                 drvl    dm
2b914 3a1 59 46 62 FD |                 drvh    dp
2b918 3a2             | 
2b918 3a2 1E 00 00 FF 
2b91c 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
2b920 3a4             | 
2b920 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
2b924 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
2b928 3a6 28 02 64 3D |         if_nc   setq    #1
2b92c 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
2b930 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
2b934 3a9             | .l1
2b934 3a9             | 
2b934 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2b938 3aa 40 46 62 FD |                 dirl    dp
2b93c 3ab 28 02 64 FD |                 setq    #1
2b940 3ac 80 00 80 FF 
2b944 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2b948 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
2b94c 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2b950 3b0 41 46 62 FD |                 dirh    dp
2b954 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2b958 3b2             | 
2b958 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
2b95c 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2b960 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
2b964 3b5             | 
2b964 3b5             | hlut_end
2b964 3b5             |                 fit     $400
2b964 3b5             |                 orgh
2b964                 | if OVERLAP_MEMORY
2b964                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
2b964                 | end
2b964                 | '------------------------------------------------------------------------------
2b964                 | ' Routines called from cog space.
2b964                 | '------------------------------------------------------------------------------
2b964                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
2b964                 | '------------------------------------------------------------------------------
2b964                 | 
2b964                 | '------------------------------------------------------------------------------
2b964                 | ' USB host cog initialization.
2b964                 | '------------------------------------------------------------------------------
2b964                 | usb_host_init
2b964                 |                 ' Initialize buffer pointers
2b964                 |         if OVERLAP_MEMORY
2b964                 |         else
2b964     40 15 B0 FE |                 loc     pb, #hid_descr
2b968                 |         end
2b968     F7 4B 02 F6 |                 mov     hid_descr_p, pb
2b96c                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
2b96c                 |                 {
2b96c                 |                 }
2b96c                 |         
2b96c                 |                 {
2b96c                 |                 }
2b96c                 |                 'loc     pb,#hkbd_report
2b96c                 |                 'mov     hkbd_report_p,pb
2b96c                 | 
2b96c     08 1D B0 FE |                 loc     pb, #hub_descr
2b970     F7 4D 02 F6 |                 mov     hub_descr_p, pb
2b974     1D 1D B0 FE |                 loc     pb, #urx_buff
2b978     F7 4F 02 F6 |                 mov     urx_buff_p, pb
2b97c     95 1D B0 FE |                 loc     pb, #dev_desc_buff
2b980     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
2b984     9F 1D B0 FE |                 loc     pb, #con_desc_buff
2b988     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
2b98c     18 15 B0 FE |                 loc     pb, #usb_cache_start
2b990     F7 55 02 F6 |                 mov     cache_start_p, pb
2b994     E9 1C B0 FE |                 loc     pb, #usb_cache_end
2b998     F7 57 02 F6 |                 mov     cache_end_p, pb
2b99c                 | 
2b99c                 |         if ERROR_LED >= 0
2b99c                 |         end
2b99c                 | 
2b99c                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
2b99c                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
2b99c                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
2b99c                 | ' Configure and enable the Serial Host USB port.
2b99c     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
2b9a0                 | 
2b9a0                 | '------------------------------------------------------------------------------
2b9a0                 | ' Timing calculations happen before any interrupt(s) are enabled.
2b9a0                 | '------------------------------------------------------------------------------
2b9a0                 | ' On entry:
2b9a0                 | '   htmp - current CLKFREQ value.
2b9a0                 | '------------------------------------------------------------------------------
2b9a0                 | hinit_usb_timings
2b9a0                 | '                getct   htmp2
2b9a0     B8 59 02 F6 |                 mov     save_sysclk, htmp
2b9a4     8D 5B 80 FF 
2b9a8     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
2b9ac     18 30 63 FD |                 getqx   _12Mbps_
2b9b0     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
2b9b4     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
2b9b8     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
2b9bc     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
2b9c0     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
2b9c4     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
2b9c8     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
2b9cc     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
2b9d0     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
2b9d4     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
2b9d8     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
2b9dc     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
2b9e0     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
2b9e4     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
2b9e8     80 00 00 FF 
2b9ec     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
2b9f0     18 2C 63 FD |                 getqx   _var_64_lower_
2b9f4     19 2E 63 FD |                 getqy   _var_64_upper_
2b9f8     28 2C 63 FD |                 setq    _var_64_lower_
2b9fc     65 CD 1D FF 
2ba00     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
2ba04     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
2ba08     01 00 00 FF 
2ba0c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
2ba10     18 2C 63 FD |                 getqx   _var_64_lower_
2ba14     19 2E 63 FD |                 getqy   _var_64_upper_
2ba18     28 2C 63 FD |                 setq    _var_64_lower_
2ba1c     A1 07 00 FF 
2ba20     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
2ba24     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
2ba28     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
2ba2c     09 36 57 F0 |                 shr     _1us_, #9               wc
2ba30     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
2ba34     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
2ba38     18 38 63 FD |                 getqx   _10us_
2ba3c     09 38 57 F0 |                 shr     _10us_, #9              wc
2ba40     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
2ba44     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
2ba48     18 3A 63 FD |                 getqx   _33us_
2ba4c     09 3A 57 F0 |                 shr     _33us_, #9              wc
2ba50     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
2ba54     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
2ba58     18 3C 63 FD |                 getqx   _txn_err_
2ba5c     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
2ba60     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
2ba64     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
2ba68     18 3E 63 FD |                 getqx   _500us_
2ba6c     09 3E 57 F0 |                 shr     _500us_, #9             wc
2ba70     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
2ba74     01 00 00 FF 
2ba78     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
2ba7c     18 40 63 FD |                 getqx   _txn_ok_ls_
2ba80     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
2ba84     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
2ba88     01 00 00 FF 
2ba8c     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
2ba90     18 42 63 FD |                 getqx   _txn_ok_fs_
2ba94     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
2ba98     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
2ba9c     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
2baa0     05 00 00 FF 
2baa4     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
2baa8     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
2baac     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
2bab0     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
2bab4     1C 00 00 FF 
2bab8     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
2babc     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
2bac0     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
2bac4     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
2bac8     00 00 00 FF 
2bacc     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
2bad0     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
2bad4     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
2bad8     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
2badc     04 00 00 FF 
2bae0     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
2bae4     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
2bae8     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
2baec     8D 5B 00 FF 
2baf0     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
2baf4     18 4C 63 FD |                 getqx   _preamble_wait_
2baf8     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
2bafc     01 00 00 FF 
2bb00     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
2bb04     18 2C 63 FD |                 getqx   _var_64_lower_
2bb08     19 2E 63 FD |                 getqy   _var_64_upper_
2bb0c     28 2C 63 FD |                 setq    _var_64_lower_
2bb10     01 00 00 FF 
2bb14     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
2bb18     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
2bb1c     09 4E 57 F0 |                 shr     _1ms_, #9               wc
2bb20     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
2bb24     FF FF 7F FF 
2bb28     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
2bb2c     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
2bb30     A7 51 03 F6 |                 mov     _2ms_, _1ms_
2bb34     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
2bb38     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
2bb3c     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
2bb40     A7 55 03 F6 |                 mov     _4ms_, _1ms_
2bb44     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
2bb48     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
2bb4c     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
2bb50     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
2bb54     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
2bb58     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
2bb5c     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
2bb60     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
2bb64     A7 59 03 F6 |                 mov     _8ms_, _1ms_
2bb68     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
2bb6c     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
2bb70     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
2bb74     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
2bb78     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
2bb7c     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
2bb80     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
2bb84     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
2bb88     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
2bb8c     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
2bb90     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
2bb94                 | '        _ret_   mov     _1sec_, save_sysclk
2bb94                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
2bb94                 | '                ret
2bb94                 | {
2bb94                 | }
2bb94                 | 
2bb94                 | '------------------------------------------------------------------------------
2bb94                 | ' Parse a configuration descriptor chain to see if the device is a recognized
2bb94                 | ' one. If it is, start the task progression that will configure the device for
2bb94                 | ' use.
2bb94                 | '------------------------------------------------------------------------------
2bb94                 | ' On entry:
2bb94                 | '   hconfig_base - start address of the cached config descriptor chain.
2bb94                 | ' On exit:
2bb94                 | '------------------------------------------------------------------------------
2bb94                 | hparse_con_desc
2bb94     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
2bb98     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
2bb9c     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
2bba0     4E 70 FF F9 |                 movbyts htmp,#%%1032
2bba4     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
2bba8                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
2bba8                 | 
2bba8     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
2bbac     6E ED 03 F1 |                 add     pa, hconfig_base
2bbb0     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
2bbb4                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
2bbb4                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
2bbb4                 | ' that defines a keyboard and/or mouse.
2bbb4     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
2bbb8                 | .next_intf
2bbb8     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2bbbc     BC 01 90 3D |         if_ae   jmp     #hset_config
2bbc0     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2bbc4     75 F3 03 F1 |                 add     ptrb, hnext_desc
2bbc8     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2bbcc     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2bbd0     0C 00 90 AD |         if_z    jmp     #.intf
2bbd4     80 71 C7 FA |                 rdbyte  htmp, ptrb
2bbd8     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2bbdc     D8 FF 9F FD |                 jmp     #.next_intf
2bbe0                 | .intf
2bbe0     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
2bbe4     00 90 07 F6 |                 mov     hpar3, #0
2bbe8     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
2bbec     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
2bbf0     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
2bbf4     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
2bbf8                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
2bbf8                 | 
2bbf8                 | .endp
2bbf8     80 71 C7 FA |                 rdbyte  htmp, ptrb
2bbfc     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2bc00     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2bc04     78 00 90 3D |         if_ae   jmp     #.get_device
2bc08     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2bc0c     75 F3 03 F1 |                 add     ptrb, hnext_desc
2bc10     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2bc14     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2bc18     64 00 90 AD |         if_z    jmp     #.get_device
2bc1c     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
2bc20     04 00 90 AD |         if_z    jmp     #.get_ep
2bc24     D0 FF 9F FD |                 jmp     #.endp
2bc28                 | .get_ep
2bc28     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
2bc2c     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
2bc30     0F 86 67 F0 |                 shl     hr1, #8 + 7
2bc34     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
2bc38     3F 00 00 FF 
2bc3c     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
2bc40     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
2bc44     00 8E 0F F2 |                 cmp     hpar2, #0               wz
2bc48     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
2bc4c     00 90 0F F2 |                 cmp     hpar3, #0               wz
2bc50     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
2bc54     A0 FF 9F FD |                 jmp     #.endp
2bc58                 | .in_ep
2bc58     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
2bc5c     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
2bc60                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2bc60     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2bc64     C2 89 DB F8 |                 setbyte hr2, hr0, #3
2bc68     8C FF 9F FD |                 jmp     #.endp
2bc6c                 | .out_ep
2bc6c     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
2bc70     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
2bc74                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2bc74     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2bc78     C2 8B DB F8 |                 setbyte hr3, hr0, #3
2bc7c     78 FF 9F FD |                 jmp     #.endp
2bc80                 | 
2bc80                 | .get_device
2bc80     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
2bc84     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
2bc88     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
2bc8c     68 00 90 AD |         if_z    jmp     #.gamepad
2bc90     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
2bc94     AC 00 90 AD |         if_z    jmp     #.hub
2bc98     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
2bc9c     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
2bca0     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2bca4     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2bca8     4C 00 90 AD |         if_z    jmp     #.gamepad
2bcac     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
2bcb0     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
2bcb4                 | .keyboard
2bcb4     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
2bcb8                 |         if HAVE_MOUSE
2bcb8     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
2bcbc                 |         else
2bcbc                 |         end
2bcbc     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
2bcc0     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
2bcc4     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2bcc8     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
2bccc     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
2bcd0     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
2bcd4                 |                 'debug(udec(kb_intf_num))
2bcd4                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2bcd4     E0 FE 9F FD |                 jmp     #.next_intf
2bcd8                 | if HAVE_MOUSE
2bcd8                 | .mouse
2bcd8     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
2bcdc     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
2bce0     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
2bce4     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
2bce8     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2bcec                 |                 'getbyte ms_interval, hr2, #3
2bcec     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
2bcf0     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
2bcf4                 |                 'debug(udec(kb_intf_num))
2bcf4                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2bcf4     C0 FE 9F FD |                 jmp     #.next_intf
2bcf8                 | end
2bcf8                 | .gamepad
2bcf8     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2bcfc     C7 71 63 F5 |                 xor     htmp, hpar2
2bd00     3F 00 00 FF 
2bd04     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2bd08     AC FE 9F AD |         if_z    jmp     #.next_intf
2bd0c                 |         if HAVE_MOUSE
2bd0c     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2bd10     C7 71 63 F5 |                 xor     htmp, hpar2
2bd14     3F 00 00 FF 
2bd18     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2bd1c     98 FE 9F AD |         if_z    jmp     #.next_intf
2bd20                 |         end
2bd20     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
2bd24     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
2bd28     8C FE 9F 5D |         if_nz   jmp     #.next_intf
2bd2c                 | 
2bd2c     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2bd30     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
2bd34     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2bd38     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
2bd3c     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
2bd40                 |                 'debug(udec(gp_intf_num))
2bd40                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
2bd40     74 FE 9F FD |                 jmp     #.next_intf
2bd44                 | .hub
2bd44     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2bd48     6C FE 9F 5D |         if_nz   jmp     #.next_intf
2bd4c     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2bd50     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
2bd54     60 FE 9F 5D |         if_nz   jmp     #.next_intf
2bd58     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2bd5c     58 FE 9F 5D |         if_nz   jmp     #.next_intf
2bd60     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
2bd64     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2bd68     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
2bd6c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2bd70     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
2bd74     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
2bd78                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
2bd78     3C FE 9F FD |                 jmp     #.next_intf
2bd7c                 | 
2bd7c                 | '------------------------------------------------------------------------------
2bd7c                 | ' If a newly-connected device is recognized, do whatever is needed to configure
2bd7c                 | ' it according to its function, or functions. In the case of this boot protocol
2bd7c                 | ' keyboard/mouse class driver:
2bd7c                 | ' - SetConfiguration(config_num)
2bd7c                 | ' - SetProtocol(boot)
2bd7c                 | ' - SetIdle(indefinite)
2bd7c                 | ' - Enter the device interrupt IN polling task stage.
2bd7c                 | '------------------------------------------------------------------------------
2bd7c                 | ' On entry:
2bd7c                 | ' On exit:
2bd7c                 | '------------------------------------------------------------------------------
2bd7c                 | hset_config
2bd7c                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
2bd7c                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
2bd7c     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
2bd80     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2bd84     00 00 0C F2 |                 cmp     0-0, #0                 wz
2bd88     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
2bd8c                 |         if HAVE_MOUSE
2bd8c     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
2bd90                 |         end
2bd90     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
2bd94     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
2bd98                 | .set_config
2bd98     6C 0E D0 FE |                 loc     ptra, #set_config
2bd9c     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
2bda0     6E ED 03 F1 |                 add     pa, hconfig_base
2bda4     F6 8D C3 FA |                 rdbyte  hpar1, pa
2bda8     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
2bdac     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
2bdb0     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
2bdb4     A0 02 A0 FD |                 call    #control_write
2bdb8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2bdbc     2D 00 64 5D |         if_nz   ret
2bdc0                 | .kbd_config
2bdc0     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
2bdc4     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
2bdc8                 | 
2bdc8     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2bdcc     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2bdd0     3F 00 00 FF 
2bdd4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2bdd8     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
2bddc                 | 
2bddc     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2bde0     34 0E D0 FE |                 loc     ptra, #set_protocol
2bde4     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2bde8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2bdec     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2bdf0     A0 02 A0 FD |                 call    #control_write
2bdf4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2bdf8     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2bdfc     E4 02 90 5D |         if_nz   jmp     #.notify_client
2be00     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2be04     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
2be08     30 03 B0 FD |                 call    #hset_idle
2be0c                 |                 'cmp     retval, #PID_ACK        wz
2be0c                 |         'if_nz   mov     hkbd_ep_addr, #0
2be0c                 |         'if_nz   jmp     #.notify_client
2be0c     A8 99 02 F6 |                 mov     hctwait, _2ms_
2be10     EF 02 A0 FD |                 call    #poll_waitx
2be14     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
2be18     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
2be1c     90 17 90 FE |                 loc     pa, #hkbd_led_rep
2be20     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
2be24     2C 03 B0 FD |                 call    #hset_kbdled_report
2be28     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2be2c     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2be30     B0 02 90 5D |         if_nz   jmp     #.notify_client
2be34     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2be38     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2be3c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2be40     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2be44     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
2be48     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2be4c     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
2be50     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2be54     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
2be58     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
2be5c     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
2be60                 |         if !!HAVE_MOUSE
2be60                 |         end
2be60                 | 
2be60                 | .mouse_config
2be60                 | if HAVE_MOUSE
2be60     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
2be64     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2be68     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2be6c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2be70     3F 00 00 FF 
2be74     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2be78     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2be7c                 | 
2be7c                 |                 debug("mouse passed addr check")
2be7c                 | 
2be7c     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2be80     00 00 80 FF 
2be84     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
2be88     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
2be8c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2be90     55 02 A0 FD |                 call    #control_read
2be94     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2be98     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2be9c     44 02 90 5D |         if_nz   jmp     #.notify_client
2bea0     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2bea4     56 01 00 F6 |                 mov     0-0, total_data
2bea8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2beac                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2beac                 | 
2beac     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
2beb0     64 0D D0 FE |                 loc     ptra, #set_protocol
2beb4     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2beb8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2bebc     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2bec0     A0 02 A0 FD |                 call    #control_write
2bec4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2bec8     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2becc     14 02 90 5D |         if_nz   jmp     #.notify_client
2bed0                 |                 debug("mouse passed SetProtocol")
2bed0     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2bed4     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
2bed8     60 02 B0 FD |                 call    #hset_idle
2bedc                 |                 'cmp     retval, #PID_ACK        wz
2bedc                 |         'if_nz   mov     hmouse_ep_addr, #0
2bedc                 |         'if_nz   jmp     #.notify_client
2bedc                 |                 debug("mouse passed SetIdle")
2bedc     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2bee0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2bee4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2bee8     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2beec     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
2bef0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2bef4     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
2bef8     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
2befc     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
2bf00     3F 00 00 FF 
2bf04     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
2bf08     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
2bf0c     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
2bf10     D0 01 90 FD |                 jmp     #.notify_client
2bf14                 | end
2bf14                 | .gamepad_config
2bf14                 | if _HAVE_GAMEPAD
2bf14     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2bf18     00 00 0C F2 |                 cmp     0-0, #0                 wz
2bf1c     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
2bf20     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2bf24     00 70 03 F6 |                 mov     htmp, 0-0
2bf28     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2bf2c     3F 00 00 FF 
2bf30     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2bf34     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
2bf38                 | 
2bf38     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2bf3c     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2bf40     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2bf44     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2bf48     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2bf4c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2bf50     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
2bf54     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
2bf58     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
2bf5c     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2bf60     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2bf64     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
2bf68     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
2bf6c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2bf70                 | 
2bf70                 |                 if EMUPAD_MAX_PLAYER > 0
2bf70                 |                 
2bf70                 | .rule_loop           
2bf70                 |                 end
2bf70                 | 
2bf70     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
2bf74     5C 00 90 AD |         if_e    jmp     #.xinput
2bf78     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
2bf7c     00 70 03 F6 |                 mov     htmp,0-0
2bf80     01 A6 02 FF 
2bf84     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
2bf88     7C 00 90 AD |         if_e    jmp     #.ps3
2bf8c                 | 
2bf8c     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2bf90     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
2bf94     00 00 80 5F 
2bf98     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
2bf9c     03 00 80 AF 
2bfa0     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
2bfa4     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
2bfa8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2bfac     55 02 A0 FD |                 call    #control_read
2bfb0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2bfb4     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2bfb8     00 00 04 56 |         if_nz   mov     0-0, #0
2bfbc     24 01 90 5D |         if_nz   jmp     #.notify_client
2bfc0     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2bfc4     56 01 00 F6 |                 mov     0-0, total_data
2bfc8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2bfcc                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2bfcc                 | 
2bfcc     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
2bfd0     10 01 90 FD |                 jmp     #.notify_client
2bfd4                 | .xinput
2bfd4     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
2bfd8     2D EF 03 F6 |                 mov     pb,hdev_port
2bfdc     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
2bfe0     03 EE 27 F3 |                 fle     pb,#3
2bfe4     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
2bfe8     02 EF 47 FC |                 wrbyte  pb, ptra[2]
2bfec                 | 
2bfec     03 B0 06 F6 |                 mov     pkt_data, #3
2bff0     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
2bff4     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
2bff8     5A 00 A0 FD |                 call    #txn_out
2bffc     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
2c000                 | 
2c000     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
2c004     DC 00 90 FD |                 jmp     #.notify_client
2c008                 | .ps3
2c008     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
2c00c     2D EF 03 F6 |                 mov     pb,hdev_port
2c010     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
2c014     04 EE 27 F3 |                 fle     pb,#4
2c018     F7 EF C3 F9 |                 decod   pb
2c01c     09 EF 47 FC |                 wrbyte  pb, ptra[9]
2c020                 | 
2c020     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2c024     00 0C D0 FE |                 loc     ptra, #set_report
2c028     01 00 80 FF 
2c02c     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
2c030     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2c034     03 61 5C FC |                 wrword  #48, ptra[wLength]
2c038     20 0C B0 FE |                 loc     pb, #ps3_command_buff
2c03c     A0 02 A0 FD |                 call    #control_write
2c040                 | 
2c040     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2c044     E0 0B D0 FE |                 loc     ptra, #set_report
2c048     01 00 80 FF 
2c04c     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
2c050     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2c054     03 09 5C FC |                 wrword  #4, ptra[wLength]
2c058     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
2c05c     A0 02 A0 FD |                 call    #control_write
2c060     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
2c064     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2c068     00 00 04 56 |         if_nz   mov     0-0, #0
2c06c     74 00 90 5D |         if_nz   jmp     #.notify_client
2c070                 | 
2c070     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
2c074     6C 00 90 FD |                 jmp     #.notify_client
2c078                 | end
2c078                 | 
2c078                 | .hub_config
2c078     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2c07c     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
2c080     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
2c084     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2c088     3F 00 00 FF 
2c08c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2c090     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
2c094                 | 
2c094     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
2c098     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
2c09c     26 EF 03 F6 |                 mov     pb, hub_descr_p
2c0a0     55 02 A0 FD |                 call    #control_read
2c0a4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2c0a8     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
2c0ac     34 00 90 5D |         if_nz   jmp     #.notify_client
2c0b0                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
2c0b0                 | 
2c0b0     26 F1 03 F6 |                 mov     ptra, hub_descr_p
2c0b4     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
2c0b8     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
2c0bc                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
2c0bc                 | .pwr_loop
2c0bc     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
2c0c0     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
2c0c4     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
2c0c8     A0 02 A0 FD |                 call    #control_write
2c0cc     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
2c0d0                 | 
2c0d0     B1 99 02 F6 |                 mov     hctwait, _500ms_
2c0d4     B0 99 02 F1 |                 add     hctwait, _100ms_
2c0d8     EF 02 A0 FD |                 call    #poll_waitx
2c0dc                 | 
2c0dc     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
2c0e0     00 00 90 FD |                 jmp     #.notify_client
2c0e4                 | 
2c0e4                 | .notify_client
2c0e4     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
2c0e8     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
2c0ec                 |                 debug(uhex_long(hdev_type,hdev_type+1))
2c0ec                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
2c0ec     2D 00 64 FD |                 ret
2c0f0                 | 
2c0f0                 | '------------------------------------------------------------------------------
2c0f0                 | ' Initialize the keyboard/mouse data area to start-up values.
2c0f0                 | '------------------------------------------------------------------------------
2c0f0                 | ' On entry:
2c0f0                 | ' On exit:
2c0f0                 | '------------------------------------------------------------------------------
2c0f0                 | init_kbdm_data
2c0f0     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
2c0f4     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
2c0f8                 | 
2c0f8     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
2c0fc     2B ED 03 F6 |                 mov     pa, cache_end_p
2c100                 | .loop
2c100     61 01 4C FC |                 wrbyte  #0, ptra++
2c104     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
2c108     F4 FF 9F CD |         if_b    jmp     #.loop
2c10c                 |         
2c10c                 |         if EMUPAD_MAX_PLAYER > 0
2c10c                 |         end
2c10c                 | 
2c10c                 | 
2c10c     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
2c110                 | .regloop
2c110     00 EC 8F F9 |                 altd    pa
2c114     00 00 04 F6 |                 mov     0-0, #0
2c118     01 EC 07 F1 |                 add     pa, #1
2c11c     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
2c120     EC FF 9F 5D |         if_nz   jmp     #.regloop
2c124                 | 
2c124     E1 E1 61 FF 
2c128     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
2c12c     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
2c130     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
2c134     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
2c138                 | 
2c138     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
2c13c                 | 
2c13c                 | '------------------------------------------------------------------------------
2c13c                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
2c13c                 | ' function.
2c13c                 | '------------------------------------------------------------------------------
2c13c                 | ' On entry:
2c13c                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
2c13c                 | '   hpar2 - index number of the target interface.
2c13c                 | ' On exit:
2c13c                 | '------------------------------------------------------------------------------
2c13c                 | hset_idle
2c13c     A8 99 02 F6 |                 mov     hctwait, _2ms_
2c140     EF 02 A0 FD |                 call    #poll_waitx
2c144     D8 0A D0 FE |                 loc     ptra, #set_idle
2c148     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
2c14c     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
2c150     A0 02 80 FD |                 jmp     #control_write
2c154                 | 
2c154                 | '------------------------------------------------------------------------------
2c154                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
2c154                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
2c154                 | '------------------------------------------------------------------------------
2c154                 | ' On entry:
2c154                 | '   ep_addr_pid - device address and enpoint for the request.
2c154                 | ' On exit:
2c154                 | '   retval - transaction result.
2c154                 | '------------------------------------------------------------------------------
2c154                 | hset_kbdled_report
2c154     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2c158     CC 0A D0 FE |                 loc     ptra, #set_report
2c15c     01 00 80 FF 
2c160     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
2c164     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2c168     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
2c16c     27 EF 03 F6 |                 mov     pb, urx_buff_p
2c170     F7 77 42 FC |                 wrbyte  kb_led_states, pb
2c174     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
2c178                 | 
2c178                 | '------------------------------------------------------------------------------
2c178                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
2c178                 | '------------------------------------------------------------------------------
2c178                 | ' On entry:
2c178                 | ' On exit:
2c178                 | '------------------------------------------------------------------------------
2c178                 | hget_kbd_in_report
2c178     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2c17c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2c180     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
2c184     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
2c188     CF 02 A0 FD |                 call    #do_int_in
2c18c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2c190     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2c194                 | 
2c194     00 90 0F F2 |                 cmp     hpar3, #0               wz
2c198     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2c19c                 | 
2c19c     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
2c1a0     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2c1a4     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
2c1a8     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
2c1ac                 | 
2c1ac     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
2c1b0     18 00 B0 FD |                 call    #hkbd_compare
2c1b4                 |         if EMUPAD_MAX_PLAYER > 0
2c1b4                 |         end
2c1b4                 | 
2c1b4                 | .led_check
2c1b4     3B 71 03 F6 |                 mov     htmp, kb_led_states
2c1b8     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
2c1bc     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
2c1c0     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
2c1c4     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
2c1c8     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
2c1cc                 | 
2c1cc                 | '------------------------------------------------------------------------------
2c1cc                 | ' Compare current and previous keyboard data buffers for keypress changes.
2c1cc                 | '------------------------------------------------------------------------------
2c1cc                 | hkbd_compare
2c1cc     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2c1d0     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
2c1d4     61 73 07 FB |                 rdlong  htmp1, ptra++
2c1d8     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2c1dc     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
2c1e0     61 73 07 FB |                 rdlong  htmp1, ptra++
2c1e4     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2c1e8     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
2c1ec     2D 00 64 AD |         if_z    ret
2c1f0                 | 
2c1f0     B4 13 D0 FE |                 loc     ptra, #hkbd_report
2c1f4                 | 
2c1f4                 |                 ' Handle modifiers
2c1f4     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
2c1f8     00 87 C7 FA |                 rdbyte  hr1, ptra
2c1fc     C7 87 43 F9 |                 rolword hr1,hpar2,#0
2c200     63 86 63 FD |                 mergew  hr1
2c204     08 EC 07 F6 |                 mov     pa,#8
2c208                 | .modloop
2c208     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
2c20c     E8 8C 07 F6 |                 mov     hpar1,#$E8
2c210     F6 8D 83 F1 |                 sub     hpar1,pa
2c214     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
2c218     FB ED 6F FB |                 djnz    pa,#.modloop
2c21c                 | 
2c21c     6F E0 75 FD | .release        modc    _set    wc
2c220                 |                 'alts    hdev_port, #hid_report_p
2c220                 |                 'mov     ptra, hid_report_p
2c220     02 F0 07 F1 |                 add     ptra, #2
2c224     06 EC 07 F6 |                 mov     pa, #6
2c228     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
2c22c     20 00 90 AD |         if_z    jmp     #.rl3
2c230     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2c234     02 F2 07 F1 |                 add     ptrb, #2
2c238     06 EE 07 F6 |                 mov     pb, #6
2c23c     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
2c240     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2c244     08 00 90 AD |         if_z    jmp     #.rl3
2c248     FC EF 6F FB |                 djnz    pb, #.rl2
2c24c     68 00 B0 FD |                 call    #hkbd_translate
2c250     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
2c254                 | 
2c254     00 90 07 F6 |                 mov     hpar3, #0
2c258     1F 90 27 F4 |                 bith    hpar3, #31
2c25c                 | 
2c25c     6F 00 74 FD | .press          modc    _clr    wc
2c260     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2c264     02 F0 07 F1 |                 add     ptra, #2
2c268     06 EC 07 F6 |                 mov     pa, #6
2c26c     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
2c270     20 00 90 AD |         if_z    jmp     #.pl3
2c274     30 13 F0 FE |                 loc     ptrb, #hkbd_report
2c278     02 F2 07 F1 |                 add     ptrb, #2
2c27c     06 EE 07 F6 |                 mov     pb, #6
2c280     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
2c284     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2c288     08 00 90 AD |         if_z    jmp     #.pl3
2c28c     FC EF 6F FB |                 djnz    pb, #.pl2
2c290     24 00 B0 FD |                 call    #hkbd_translate
2c294     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
2c298                 | 
2c298     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
2c29c     08 13 F0 FE |                 loc     ptrb, #hkbd_report
2c2a0     28 02 64 FD |                 setq #1
2c2a4     61 73 07 FB |                 rdlong  htmp1, ptra++
2c2a8     28 02 64 FD |                 setq #1
2c2ac     E1 73 67 FC |                 wrlong  htmp1, ptrb++
2c2b0     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
2c2b4                 | 
2c2b4     2D 00 64 FD |                 ret
2c2b8                 | 
2c2b8                 | '------------------------------------------------------------------------------
2c2b8                 | ' Translate keyboard scancode to ASCII
2c2b8                 | '------------------------------------------------------------------------------
2c2b8                 | ' On entry:
2c2b8                 | '   hpar1 - scancode
2c2b8                 | '   hpar2 - key modifiers state
2c2b8                 | '       c - pressed (0) or released (1) flag
2c2b8                 | ' On exit:
2c2b8                 | '   hpar1 - bit     31 = 0 pressed, 1 released
2c2b8                 | '               30..17 = unused
2c2b8                 | '                   18 = scroll-lock state 
2c2b8                 | '                   17 = caps-lock state
2c2b8                 | '                   16 = num-lock state 
2c2b8                 | '                15..8 = key modifiers state
2c2b8                 | '                 7..0 = scancode
2c2b8                 | '------------------------------------------------------------------------------
2c2b8                 | hkbd_translate
2c2b8     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
2c2bc     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
2c2c0     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
2c2c4     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
2c2c8     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
2c2cc     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
2c2d0                 | 
2c2d0                 |         if EMUPAD_MAX_PLAYER > 0
2c2d0                 | 
2c2d0                 |         if EMUPAD_BT0_BIT >= 0
2c2d0                 |         end
2c2d0                 |         if EMUPAD_BT1_BIT >= 0
2c2d0                 |         end
2c2d0                 |         if EMUPAD_BT2_BIT >= 0
2c2d0                 |         end
2c2d0                 |         if EMUPAD_BT3_BIT >= 0
2c2d0                 |         end
2c2d0                 |         if EMUPAD_BT4_BIT >= 0
2c2d0                 |         end
2c2d0                 |         if EMUPAD_BT5_BIT >= 0
2c2d0                 |         end
2c2d0                 |         if EMUPAD_BT6_BIT >= 0
2c2d0                 |         end
2c2d0                 |         if EMUPAD_BT7_BIT >= 0
2c2d0                 |         end
2c2d0                 |         if EMUPAD_BT8_BIT >= 0
2c2d0                 |         end
2c2d0                 |         if EMUPAD_BT9_BIT >= 0
2c2d0                 |         end
2c2d0                 | 
2c2d0                 |         end
2c2d0     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
2c2d4     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
2c2d8     1F 8C 47 F4 |                 bitc    hpar1, #31
2c2dc                 |         if KEYQUEUE_SIZE > 0
2c2dc     C4 09 B0 FE |                 loc pb,#keyq_head
2c2e0     F7 71 E3 FA |                 rdword htmp,pb
2c2e4     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
2c2e8     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
2c2ec     B8 75 03 F6 |                 mov htmp2,htmp
2c2f0     04 74 07 FA |                 mul htmp2,#4
2c2f4     F7 75 03 F1 |                 add htmp2,pb
2c2f8     02 74 07 F1 |                 add htmp2,#2
2c2fc     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
2c300     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
2c304     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
2c308     F7 71 43 5C |         if_nz   wrbyte htmp,pb
2c30c                 |         end
2c30c     2D 00 7C FD |                 ret wcz
2c310                 | 
2c310                 | if HAVE_MOUSE
2c310                 | '------------------------------------------------------------------------------
2c310                 | ' Execute an IN interrupt transaction to poll for mouse activity.
2c310                 | '------------------------------------------------------------------------------
2c310                 | ' On entry:
2c310                 | ' On exit:
2c310                 | '------------------------------------------------------------------------------
2c310                 | hget_mouse_in_report
2c310     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2c314     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2c318     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
2c31c     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
2c320     CF 02 A0 FD |                 call    #do_int_in
2c324     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2c328     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2c32c                 | 
2c32c     00 90 0F F2 |                 cmp     hpar3, #0               wz
2c330     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2c334                 | 
2c334     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
2c338     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2c33c     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
2c340     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
2c344                 | 
2c344     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2c348     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
2c34c     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
2c350     01 90 87 31 |         if_ae   sub     hpar3, #1
2c354                 | 
2c354     40 09 90 FE |                 loc     pa, #mouse_limits
2c358     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
2c35c                 | 
2c35c                 |                 ' load xacc,yacc,zacc
2c35c     28 04 64 FD |                 setq    #3-1
2c360     80 87 07 FB |                 rdlong  hr1,ptrb
2c364                 |                 ' load limits and outptr
2c364     28 04 64 FD |                 setq    #3-1
2c368     F6 73 03 FB |                 rdlong  htmp1,pa
2c36c                 | 
2c36c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
2c370     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
2c374     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
2c378     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
2c37c     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
2c380     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
2c384     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
2c388     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
2c38c                 |               
2c38c                 | 
2c38c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
2c390     07 70 67 F7 |                 signx   htmp, #7
2c394     B8 87 03 F1 |                 add     hr1,htmp
2c398     00 72 0F F2 |                 cmp     htmp1,#0 wz
2c39c     B9 87 63 53 |         if_ne   fles    hr1,htmp1
2c3a0     00 86 47 53 |         if_ne   fges    hr1,#0
2c3a4                 | 
2c3a4     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
2c3a8     07 70 67 F7 |                 signx   htmp, #7
2c3ac     B8 89 03 F1 |                 add     hr2,htmp
2c3b0     00 74 0F F2 |                 cmp     htmp2,#0 wz
2c3b4     BA 89 63 53 |         if_ne   fles    hr2,htmp2
2c3b8     00 88 47 53 |         if_ne   fges    hr2,#0
2c3bc                 |                 
2c3bc                 | 
2c3bc     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
2c3c0     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
2c3c4     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
2c3c8     B8 8B 03 A1 |         if_z    add     hr3,htmp
2c3cc                 | 
2c3cc     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
2c3d0     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
2c3d4                 | 
2c3d4                 |                 ' write back accumulators
2c3d4     28 04 64 FD |                 setq    #3-1
2c3d8     80 87 67 FC |                 wrlong  hr1,ptrb
2c3dc                 |                 ' if outptr set, write X/Y words
2c3dc     00 76 0F F2 |                 cmp htmp3,#0                    wz
2c3e0     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
2c3e4     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
2c3e8     2D 00 64 FD |                 ret
2c3ec                 | end
2c3ec                 | 
2c3ec                 | '------------------------------------------------------------------------------
2c3ec                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
2c3ec                 | '------------------------------------------------------------------------------
2c3ec                 | ' On entry:
2c3ec                 | ' On exit:
2c3ec                 | '------------------------------------------------------------------------------
2c3ec                 | if _HAVE_GAMEPAD
2c3ec                 | hget_gp_in_report
2c3ec     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2c3f0     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2c3f4                 | 
2c3f4     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2c3f8     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
2c3fc     00 90 E3 F8 |                 getbyte hpar3
2c400     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
2c404     CF 02 A0 FD |                 call    #do_int_in
2c408     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2c40c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2c410                 | 
2c410     00 90 0F F2 |                 cmp     hpar3, #0               wz
2c414     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2c418                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
2c418                 | 
2c418     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
2c41c     00 70 E3 F8 |                 getbyte htmp                            ' |
2c420     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2c424     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
2c428     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
2c42c     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
2c430     B8 01 C0 F8 |                 setbyte htmp                            ' |
2c434                 | 
2c434                 | ' Note: the following code compares the current and previous reports
2c434                 | ' and process the data if there are changes to ease the debug output.
2c434                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
2c434                 | ' gpPreReport buffer.
2c434                 | 
2c434                 |                 ' ----- start of block to remove
2c434                 |                 {
2c434                 |                 }
2c434                 |                 ' ----- end of block to remove
2c434     F4 04 90 FE |                 loc pa,#hpad_translate
2c438     2A EC 63 FD |                 push pa
2c43c                 | 
2c43c                 |                 ' FALL THROUGH !!!!
2c43c                 | 
2c43c                 | '------------------------------------------------------------------------------
2c43c                 | ' Decode controller report
2c43c                 | '------------------------------------------------------------------------------
2c43c                 | hid_decode
2c43c                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
2c43c     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
2c440     00 04 00 FF 
2c444     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
2c448                 | 
2c448     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2c44c                 | 
2c44c     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2c450     00 2A E3 F8 |                 getbyte hidr_type
2c454     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
2c458     34 02 90 AD |         if_z    jmp     #hpad_xinput
2c45c     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
2c460     1C 03 90 AD |         if_z    jmp     #hpad_ps3
2c464     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
2c468     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
2c46c     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
2c470                 |                 
2c470                 | 
2c470                 | '------------------------------------------------------------------------------
2c470                 | ' Handle HID controller (or mouse now
2c470                 | ' On entry:
2c470                 | '   ptrb - controller report
2c470                 | '------------------------------------------------------------------------------
2c470                 | hpad_hid
2c470     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2c474     F7 F1 03 F6 |                 mov     ptra, pb
2c478     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
2c47c     00 EC 03 F6 |                 mov     pa, 0-0
2c480                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
2c480     19 2A 3B FF 
2c484     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
2c488                 | 
2c488                 | .next
2c488     00 EC 5F F2 |                 cmps    pa, #0      wcz
2c48c     2D 00 7C ED |         if_be   ret     wcz
2c490                 | 
2c490     61 8D C7 FA |                 rdbyte  hpar1, ptra++
2c494     01 EC 87 F1 |                 sub     pa, #1
2c498     00 8E 07 F6 |                 mov     hpar2, #0
2c49c                 | 
2c49c     C6 71 03 F6 |                 mov     htmp, hpar1
2c4a0     03 70 07 F5 |                 and     htmp, #$03
2c4a4     01 70 0F F2 |                 cmp     htmp, #1    wz
2c4a8     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
2c4ac     07 8E 67 A7 |         if_z    signx   hpar2,#7
2c4b0     01 EC 87 A1 |         if_z    sub     pa, #1
2c4b4     02 70 0F F2 |                 cmp     htmp, #2    wz
2c4b8     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
2c4bc     0F 8E 67 A7 |         if_z    signx   hpar2,#15
2c4c0     02 EC 87 A1 |         if_z    sub     pa, #2
2c4c4     03 70 0F F2 |                 cmp     htmp, #3    wz
2c4c8     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
2c4cc     04 EC 87 A1 |         if_z    sub     pa, #4
2c4d0                 | 
2c4d0     FC 8C 07 F5 |                 and     hpar1, #$FC
2c4d4                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
2c4d4                 | 
2c4d4     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
2c4d8     0C 01 90 AD |         if_z    jmp     #.report_id
2c4dc     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
2c4e0     24 01 90 AD |         if_z    jmp     #.usage_page
2c4e4     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
2c4e8     2C 01 90 AD |         if_z    jmp     #.usage
2c4ec     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
2c4f0     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
2c4f4     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
2c4f8     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
2c4fc     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
2c500     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
2c504     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
2c508     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
2c50c     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
2c510     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
2c514     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
2c518     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
2c51c     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
2c520     64 FF 9F 5D |         if_nz   jmp     #.next
2c524                 | 
2c524     D8 1D A7 FB |                 tjf     hidr_state,#.next
2c528                 | 
2c528     03 8E 07 F5 |                 and     hpar2, #$03
2c52c     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
2c530     18 00 90 5D |         if_nz   jmp     #.skip
2c534                 | 
2c534     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
2c538     20 00 90 AD |         if_z    jmp     #.axes
2c53c     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
2c540     5C 00 90 AD |         if_z    jmp     #.hats
2c544     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
2c548     70 00 90 AD |         if_z    jmp     #.buttons
2c54c                 | .skip
2c54c     8F 71 03 F6 |                 mov     htmp, hidr_size
2c550     90 71 03 FA |                 mul     htmp, hidr_count
2c554     B8 23 03 F1 |                 add     hidr_offset, htmp
2c558     2C FF 9F FD |                 jmp     #.next
2c55c                 | .axes
2c55c                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
2c55c     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
2c560     90 87 03 F6 |                 mov     hr1, hidr_count
2c564                 | .l1
2c564     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2c568     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2c56c     04 03 B0 FD |                 call    #hpad_getbits
2c570     64 03 B0 FD |                 call    #hpad_normalize
2c574     06 84 1F F2 |                 cmp     hr0, #6         wcz
2c578     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
2c57c     00 88 43 C8 |         if_b    getnib  hr2
2c580     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
2c584     5F 01 20 C9 |         if_b    setword retval
2c588     01 84 07 C1 |         if_b    add     hr0, #1
2c58c     8F 23 03 F1 |                 add     hidr_offset, hidr_size
2c590     F4 87 6F FB |                 djnz    hr1, #.l1
2c594                 | 
2c594     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
2c598     01 1C 07 F6 |                 mov     hidr_state, #1
2c59c     E8 FE 9F FD |                 jmp     #.next
2c5a0                 | .hats
2c5a0                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
2c5a0     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2c5a4     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2c5a8     C8 02 B0 FD |                 call    #hpad_getbits
2c5ac     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
2c5b0     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2c5b4     01 1C 07 F6 |                 mov     hidr_state, #1
2c5b8     90 FF 9F FD |                 jmp     #.skip
2c5bc                 | .buttons
2c5bc                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
2c5bc     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2c5c0     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2c5c4     90 8F 03 FA |                 mul     hpar2, hidr_count
2c5c8     A8 02 B0 FD |                 call    #hpad_getbits
2c5cc     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
2c5d0     B8 BF 62 F0 |                 shl     retval, htmp
2c5d4     5F 17 43 F5 |                 or      hidr_buttons, retval
2c5d8     90 71 03 F1 |                 add     htmp, hidr_count
2c5dc     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
2c5e0     01 1C 07 F6 |                 mov     hidr_state, #1
2c5e4     64 FF 9F FD |                 jmp     #.skip
2c5e8                 | .report_id
2c5e8     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
2c5ec     2D 00 7C 5D |         if_nz   ret     wcz
2c5f0     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
2c5f4     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
2c5f8     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
2c5fc     01 1C 67 56 |         if_nz   neg     hidr_state,#1
2c600     01 F2 87 51 |         if_nz   sub     ptrb,#1
2c604     80 FE 9F FD |                 jmp     #.next
2c608                 | .usage_page
2c608     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
2c60c     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
2c610     04 1C 07 A6 |         if_z    mov     hidr_state, #4
2c614     70 FE 9F FD |                 jmp     #.next
2c618                 | .usage
2c618     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
2c61c     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
2c620     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
2c624     01 1C 07 A6 |         if_z    mov     hidr_state, #1
2c628     5C FE 9F AD |         if_z    jmp     #.next
2c62c     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
2c630     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
2c634     01 1C 07 A6 |         if_z    mov     hidr_state, #1
2c638     4C FE 9F AD |         if_z    jmp     #.next
2c63c     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
2c640     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
2c644     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
2c648     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
2c64c     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
2c650     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
2c654     10 00 90 AD |         if_z    jmp     #.usage_axis
2c658     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
2c65c     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
2c660     03 1C 07 A6 |         if_z    mov     hidr_state, #3
2c664     20 FE 9F FD |                 jmp     #.next
2c668                 | .usage_axis
2c668     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
2c66c     18 FE 9F CD |         if_b    jmp     #.next
2c670     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
2c674     C7 01 00 F8 |                 setnib  hpar2
2c678                 | 
2c678     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
2c67c     C7 8F C3 F9 |                 decod   hpar2
2c680     C7 0F 43 F5 |                 or      hidr_flags, hpar2
2c684                 | 
2c684     01 24 07 F1 |                 add     hidr_usage_idx, #1
2c688     02 1C 07 F6 |                 mov     hidr_state, #2
2c68c     F8 FD 9F FD |                 jmp     #.next
2c690                 | 
2c690                 | '------------------------------------------------------------------------------
2c690                 | ' Handle XInput controller
2c690                 | ' On entry:
2c690                 | '   ptrb - controller report
2c690                 | '------------------------------------------------------------------------------
2c690                 | '   Default implementation translates the report to a pseudo-defacto hid
2c690                 | '   standard and jumps to hpad_translate for actions.
2c690                 | '   Implementors may take specific actions for this kind of controller.
2c690                 | '------------------------------------------------------------------------------
2c690                 | hpad_xinput
2c690     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
2c694     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
2c698     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
2c69c     14 70 0F F2 |                 cmp     htmp, #$14      wz
2c6a0     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
2c6a4                 | 
2c6a4                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
2c6a4                 | 
2c6a4     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
2c6a8     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
2c6ac                 | 
2c6ac     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
2c6b0     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
2c6b4     5F BF 22 F6 |                 not     retval
2c6b8     5F 11 2B F9 |                 setword hidr_axis, retval, #1
2c6bc     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
2c6c0     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
2c6c4     5F BF 22 F6 |                 not     retval
2c6c8     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
2c6cc                 | 
2c6cc     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
2c6d0     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
2c6d4     C0 BE 1E F2 |                 cmp     retval, #192    wcz
2c6d8     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
2c6dc     F8 01 B0 FD |                 call    #hpad_normalize
2c6e0     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
2c6e4     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
2c6e8     C0 BE 1E F2 |                 cmp     retval, #192    wcz
2c6ec     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
2c6f0     E4 01 B0 FD |                 call    #hpad_normalize
2c6f4     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
2c6f8                 | 
2c6f8     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
2c6fc     81 BF E6 FA |                 rdword  retval, ptrb[1]
2c700     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
2c704     00 16 47 F4 |                 bitc    hidr_buttons, #0
2c708     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
2c70c     01 16 47 F4 |                 bitc    hidr_buttons, #1
2c710     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
2c714     02 16 47 F4 |                 bitc    hidr_buttons, #2
2c718     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
2c71c     03 16 47 F4 |                 bitc    hidr_buttons, #3
2c720     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
2c724     04 16 47 F4 |                 bitc    hidr_buttons, #4
2c728     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
2c72c     05 16 47 F4 |                 bitc    hidr_buttons, #5
2c730     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
2c734     08 16 47 F4 |                 bitc    hidr_buttons, #8
2c738     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
2c73c     09 16 47 F4 |                 bitc    hidr_buttons, #9
2c740     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
2c744     0A 16 47 F4 |                 bitc    hidr_buttons, #10
2c748     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
2c74c     0B 16 47 F4 |                 bitc    hidr_buttons, #11
2c750     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
2c754     0C 16 47 F4 |                 bitc    hidr_buttons, #12
2c758                 | 
2c758     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2c75c     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
2c760     7A BB 7A FF 
2c764     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
2c768     F9 FF 7F FF 
2c76c     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
2c770     B9 71 5F F9 |                 altgn   htmp, #htmp1
2c774     00 70 43 F8 |                 getnib  htmp
2c778     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
2c77c                 | 
2c77c     AC 01 90 FD |                 jmp     #hpad_translate
2c780                 | 
2c780                 | '------------------------------------------------------------------------------
2c780                 | ' Handle PS3 controller
2c780                 | ' On entry:
2c780                 | '   ptrb - controller report
2c780                 | '------------------------------------------------------------------------------
2c780                 | '   Default implementation translates the report to a pseudo-defacto hid
2c780                 | '   standard and jumps to hpad_translate for actions.
2c780                 | '   Implementors may take specific actions for this kind of controller.
2c780                 | '------------------------------------------------------------------------------
2c780                 | hpad_ps3
2c780     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
2c784     01 70 0F F2 |                 cmp     htmp, #$01      wz
2c788     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
2c78c                 | 
2c78c                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
2c78c                 | 
2c78c     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
2c790     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
2c794     40 01 B0 FD |                 call    #hpad_normalize
2c798     5F 11 23 F9 |                 setword hidr_axis, retval, #0
2c79c     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
2c7a0     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
2c7a4     30 01 B0 FD |                 call    #hpad_normalize
2c7a8     5F 11 2B F9 |                 setword hidr_axis, retval, #1
2c7ac     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
2c7b0     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
2c7b4     20 01 B0 FD |                 call    #hpad_normalize
2c7b8     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
2c7bc     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
2c7c0     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
2c7c4     10 01 B0 FD |                 call    #hpad_normalize
2c7c8     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
2c7cc     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
2c7d0     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
2c7d4                 | 
2c7d4     08 8C 07 F6 |                 mov     hpar1, #8
2c7d8     13 8E 07 F6 |                 mov     hpar2, #19
2c7dc     94 00 B0 FD |                 call    #hpad_getbits
2c7e0                 | 
2c7e0     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
2c7e4     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
2c7e8     00 16 47 F4 |                 bitc    hidr_buttons, #0
2c7ec     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
2c7f0     01 16 47 F4 |                 bitc    hidr_buttons, #1
2c7f4     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
2c7f8     02 16 47 F4 |                 bitc    hidr_buttons, #2
2c7fc     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
2c800     03 16 47 F4 |                 bitc    hidr_buttons, #3
2c804     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
2c808     04 16 47 F4 |                 bitc    hidr_buttons, #4
2c80c     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
2c810     05 16 47 F4 |                 bitc    hidr_buttons, #5
2c814     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
2c818     06 16 47 F4 |                 bitc    hidr_buttons, #6
2c81c     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
2c820     07 16 47 F4 |                 bitc    hidr_buttons, #7
2c824     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
2c828     08 16 47 F4 |                 bitc    hidr_buttons, #8
2c82c     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
2c830     09 16 47 F4 |                 bitc    hidr_buttons, #9
2c834     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
2c838     0A 16 47 F4 |                 bitc    hidr_buttons, #10
2c83c     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
2c840     0B 16 47 F4 |                 bitc    hidr_buttons, #11
2c844     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
2c848     0C 16 47 F4 |                 bitc    hidr_buttons, #12
2c84c                 | 
2c84c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2c850     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
2c854     09 FA 79 FF 
2c858     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
2c85c     FF FA 7F FF 
2c860     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
2c864     B9 71 5F F9 |                 altgn   htmp, #htmp1
2c868     00 70 43 F8 |                 getnib  htmp
2c86c     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
2c870                 | 
2c870     B8 00 90 FD |                 jmp     #hpad_translate
2c874                 | 
2c874                 | '------------------------------------------------------------------------------
2c874                 | ' Read bits from report data buffer
2c874                 | '------------------------------------------------------------------------------
2c874                 | ' On entry:
2c874                 | '   PTRB - report buffer
2c874                 | '   hpar1 - start bit
2c874                 | '   hpar2 - number of bits
2c874                 | ' On exit:
2c874                 | '   retval - bits
2c874                 | '------------------------------------------------------------------------------
2c874                 | hpad_getbits
2c874     C6 71 03 F6 |                 mov     htmp, hpar1
2c878     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
2c87c     F9 71 03 F1 |                 add     htmp, ptrb
2c880     B8 BF 02 FB |                 rdlong  retval, htmp
2c884                 | 
2c884     C6 73 03 F6 |                 mov     htmp1, hpar1
2c888     07 72 07 F5 |                 and     htmp1, #$07     ' shift
2c88c     B9 BF 42 F0 |                 shr     retval, htmp1
2c890                 | 
2c890     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
2c894     10 00 90 1D |         if_a    jmp     #.l1
2c898                 | 
2c898     C7 8F C3 F9 |                 decod   hpar2
2c89c     01 8E 87 F1 |                 sub     hpar2, #1
2c8a0     C7 BF 02 F5 |                 and     retval, hpar2
2c8a4     2D 00 64 FD |                 ret
2c8a8                 | .l1
2c8a8     FF 7F 00 FF 
2c8ac     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
2c8b0     03 70 07 F1 |                 add     htmp, #3
2c8b4     B8 75 03 FB |                 rdlong  htmp2, htmp
2c8b8     18 8E 87 F1 |                 sub     hpar2, #24
2c8bc     C7 8F C3 F9 |                 decod   hpar2
2c8c0     01 8E 87 F1 |                 sub     hpar2, #1
2c8c4     B9 75 43 F0 |                 shr     htmp2, htmp1
2c8c8     C7 75 03 F5 |                 and     htmp2, hpar2
2c8cc     18 74 67 F0 |                 shl     htmp2, #24
2c8d0     BA BF 42 F5 |                 or      retval, htmp2
2c8d4     2D 00 64 FD |                 ret
2c8d8                 | 
2c8d8                 | '------------------------------------------------------------------------------
2c8d8                 | ' Normalize value to signed word (-32768 / 32767)
2c8d8                 | '------------------------------------------------------------------------------
2c8d8                 | ' On entry:
2c8d8                 | '   retval - value to normalize
2c8d8                 | '   hidr_lminmax - min (word 1) max (word 0) value range
2c8d8                 | '   - or -
2c8d8                 | '   hidr_pminmax - min (word 1) max (word 0) value range
2c8d8                 | '   hidr_size - value bits length
2c8d8                 | ' On exit:
2c8d8                 | '   retval - normalized value
2c8d8                 | '------------------------------------------------------------------------------
2c8d8                 | hpad_normalize
2c8d8     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
2c8dc     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
2c8e0     2D 00 64 AD |         if_z    ret
2c8e4     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
2c8e8     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
2c8ec     0F 72 77 F7 |                 signx   htmp1, #15      wc
2c8f0     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
2c8f4     00 BE 66 C7 |         if_c    signx   retval, #0-0
2c8f8     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
2c8fc     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
2c900     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
2c904     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
2c908     B8 71 53 F6 |                 abs     htmp            wc
2c90c     1F BE 0E F4 |                 testb   retval, #31     wz
2c910     5F BF 42 F6 |                 abs     retval
2c914     B8 BF 12 FD |                 qdiv    retval, htmp
2c918     18 BE 62 FD |                 getqx   retval
2c91c     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
2c920     C0 FF 7F FF 
2c924     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
2c928     2D 00 64 FD |                 ret
2c92c                 | 
2c92c                 | '------------------------------------------------------------------------------
2c92c                 | ' Perform controller actions
2c92c                 | ' On entry:
2c92c                 | '    hidr_id        report id
2c92c                 | '    hidr_axis      axis value (signed word, 2 axes per long)
2c92c                 | '                      X = hidr_axis+0, #0
2c92c                 | '                      Y = hidr_axis+0, #1
2c92c                 | '                      Z = hidr_axis+1, #0
2c92c                 | '                     RX = hidr_axis+1, #1
2c92c                 | '                     RY = hidr_axis+2, #0
2c92c                 | '                     RZ = hidr_axis+2, #1
2c92c                 | '    hidr_buttons   buttons state (bits 0 to 31)
2c92c                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
2c92c                 | '
2c92c                 | '                     -------3 -------2 -------1 -------0 byte
2c92c                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
2c92c                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
2c92c                 | '                                zyx||| |||||||| ++++++++ n. buttons
2c92c                 | '                                |||||| ||||++++--------- n. axes
2c92c                 | '                                |||||| ++++------------- n. hats
2c92c                 | '                                ++++++------------------ valid axes
2c92c                 | '------------------------------------------------------------------------------
2c92c                 | hpad_translate
2c92c                 | 
2c92c                 | 
2c92c                 |         if HAVE_HIDPAD
2c92c     84 0C F0 FE |                 loc     ptrb,#hidpad_report
2c930     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
2c934     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
2c938     01 70 E7 F2 |                 cmpsub  htmp,#1
2c93c     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
2c940     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
2c944     2D 00 7C 3D |         if_ae   ret     wcz
2c948     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
2c94c     B8 F3 03 F1 |                 add     ptrb,htmp
2c950     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
2c954     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
2c958     28 0C 64 FD |                 setq    #7-1
2c95c     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
2c960                 |         end
2c960                 | 
2c960                 | 
2c960                 |         if EMUPAD_MAX_PLAYER > 0
2c960                 | .emupad_no_hat
2c960                 |         if EMUPAD_BT0_BIT >= 0
2c960                 |         end
2c960                 |         if EMUPAD_BT1_BIT >= 0
2c960                 |         end
2c960                 |         if EMUPAD_BT2_BIT >= 0
2c960                 |         end
2c960                 |         if EMUPAD_BT3_BIT >= 0
2c960                 |         end
2c960                 |         if EMUPAD_BT4_BIT >= 0
2c960                 |         end
2c960                 |         if EMUPAD_BT5_BIT >= 0
2c960                 |         end
2c960                 |         if EMUPAD_BT6_BIT >= 0
2c960                 |         end
2c960                 |         if EMUPAD_BT7_BIT >= 0
2c960                 |         end
2c960                 |         if EMUPAD_BT8_BIT >= 0
2c960                 |         end
2c960                 |         if EMUPAD_BT9_BIT >= 0
2c960                 |         end
2c960                 | .emupad_slot_over
2c960                 |         end
2c960                 | 
2c960                 |         if 0
2c960                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
2c960                 | 
2c960                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
2c960                 | 
2c960                 |         end
2c960     2D 00 64 FD |                 ret
2c964                 | end
2c964                 | 
2c964                 | if EMUPAD_MAX_PLAYER > 0
2c964                 | '------------------------------------------------------------------------------
2c964                 | ' Clear EmuPad state
2c964                 | '------------------------------------------------------------------------------
2c964                 | emupad_reset
2c964                 | 
2c964                 | '------------------------------------------------------------------------------
2c964                 | ' Get EmuPad Player number for current device (into retval)
2c964                 | ' Z flag is also set if current device is valid
2c964                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
2c964                 | '------------------------------------------------------------------------------
2c964                 | emupad_getnum
2c964                 | .loop
2c964                 | '------------------------------------------------------------------------------
2c964                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
2c964                 | '------------------------------------------------------------------------------
2c964                 | emupad_discon
2c964                 | .loop         
2c964                 |         
2c964                 |         ' FALL THROUGH!!!
2c964                 | 
2c964                 | '------------------------------------------------------------------------------
2c964                 | ' Update EmuPad reports (all of them...)
2c964                 | '------------------------------------------------------------------------------
2c964                 | emupad_write_reports
2c964                 | .devloop
2c964                 | 
2c964                 | end
2c964                 | 
2c964                 | 
2c964                 | '------------------------------------------------------------------------------
2c964                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
2c964                 | '------------------------------------------------------------------------------
2c964                 | ' On entry:
2c964                 | ' On exit:
2c964                 | '------------------------------------------------------------------------------
2c964                 | hget_hub_status
2c964     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
2c968     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2c96c     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
2c970     01 90 2F F9 |                 setword hpar3, #1, #1
2c974     CF 02 A0 FD |                 call    #do_int_in
2c978     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2c97c     0C 00 90 AD |         if_z    jmp     #.data
2c980     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2c984     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
2c988     2D 00 64 FD |                 ret
2c98c                 | .data
2c98c     00 90 0F F2 |                 cmp     hpar3, #0               wz
2c990     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2c994                 | 
2c994     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
2c998     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
2c99c     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
2c9a0     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
2c9a4                 |                 debug(ubin_long(hub_status_chg))
2c9a4                 | 
2c9a4     01 5A 06 F6 |                 mov     hdev_port, #1
2c9a8                 | .loop
2c9a8     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
2c9ac     0C 00 B0 AD |         if_x1   call    #hub_port_handler
2c9b0     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
2c9b4     F0 FF 9F 3D |         if_nc   jmp     #.loop
2c9b8     2D 00 64 FD |                 ret
2c9bc                 | 
2c9bc                 | hub_port_handler
2c9bc     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
2c9c0     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2c9c4     27 EF 03 F6 |                 mov     pb, urx_buff_p
2c9c8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2c9cc     55 02 A0 FD |                 call    #control_read
2c9d0     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
2c9d4                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
2c9d4                 | 
2c9d4     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
2c9d8     50 01 90 5D |         if_x0   jmp     #.other
2c9dc     68 02 D0 FE |                 loc     ptra, #clr_port_feat
2c9e0     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
2c9e4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2c9e8     A0 02 A0 FD |                 call    #control_write
2c9ec     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
2c9f0     7C 01 90 5D |         if_x0   jmp     #.disconnect
2c9f4     B0 99 02 F6 |                 mov     hctwait, _100ms_
2c9f8     EF 02 A0 FD |                 call    #poll_waitx
2c9fc                 | 
2c9fc     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
2ca00     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
2ca04     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2ca08     A0 02 A0 FD |                 call    #control_write
2ca0c                 | 
2ca0c     02 76 07 F6 |                 mov     htmp3, #2
2ca10                 | .wait_reset
2ca10     AC 99 02 F6 |                 mov     hctwait, _8ms_
2ca14     EF 02 A0 FD |                 call    #poll_waitx
2ca18     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2ca1c     27 EF 03 F6 |                 mov     pb, urx_buff_p
2ca20     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2ca24     55 02 A0 FD |                 call    #control_read
2ca28     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
2ca2c     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
2ca30     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
2ca34                 | 
2ca34     10 02 D0 FE |                 loc     ptra, #clr_port_feat
2ca38     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
2ca3c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2ca40     A0 02 A0 FD |                 call    #control_write
2ca44                 | 
2ca44     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
2ca48                 | .wait_recover
2ca48     A7 99 02 F6 |                 mov     hctwait, _1ms_
2ca4c     EF 02 A0 FD |                 call    #poll_waitx
2ca50     FD 71 6F FB |                 djnz    htmp,#.wait_recover
2ca54                 | 
2ca54     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2ca58     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2ca5c     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2ca60                 | 
2ca60     00 08 00 FF 
2ca64     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
2ca68     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
2ca6c     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
2ca70     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
2ca74     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
2ca78     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ca7c     48 01 90 5D |         if_nz   jmp     #.done
2ca80                 | .get_dev_desc
2ca80     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
2ca84     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
2ca88     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
2ca8c     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
2ca90     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
2ca94     01 71 57 FC |                 wrword  htmp, ptra[wValue]
2ca98     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
2ca9c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2caa0     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
2caa4     AC 99 02 F6 |                 mov     hctwait, _8ms_
2caa8     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
2caac     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
2cab0     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
2cab4     BE 00 A0 FD |                 call    #calc_crc5
2cab8     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
2cabc     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
2cac0     F7 AD C2 FA |                 rdbyte  total_data, pb
2cac4     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
2cac8     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
2cacc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2cad0     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
2cad4     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
2cad8     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
2cadc                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
2cadc     9F 99 02 F6 |                 mov     hctwait, _500us_
2cae0     EF 02 A0 FD |                 call    #poll_waitx
2cae4     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
2cae8     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
2caec     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
2caf0     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
2caf4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2caf8     CC 00 90 5D |         if_nz   jmp     #.done
2cafc     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
2cb00     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
2cb04     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
2cb08     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
2cb0c     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
2cb10     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
2cb14     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
2cb18     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
2cb1c     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
2cb20     A4 00 90 CD |         if_b    jmp     #.done
2cb24     6C F0 BF FD |                 call    #hparse_con_desc
2cb28     9C 00 90 FD |                 jmp     #.done
2cb2c                 | 
2cb2c                 | .other
2cb2c     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
2cb30     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
2cb34     28 00 90 AD |         if_x1   jmp     #.reset_feature
2cb38     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
2cb3c     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
2cb40     1C 00 90 AD |         if_x1   jmp     #.reset_feature
2cb44     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
2cb48     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
2cb4c     10 00 90 AD |         if_x1   jmp     #.reset_feature
2cb50     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
2cb54     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
2cb58     04 00 90 AD |         if_x1   jmp     #.reset_feature
2cb5c     68 00 90 FD |                 jmp     #.done
2cb60                 | .reset_feature
2cb60     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
2cb64     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2cb68     A0 02 A0 FD |                 call    #control_write
2cb6c     58 00 90 FD |                 jmp     #.done
2cb70                 | .disconnect
2cb70                 | 
2cb70     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2cb74     00 70 E3 F8 |                 getbyte htmp
2cb78     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
2cb7c     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
2cb80     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
2cb84     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
2cb88     00 76 06 A6 |         if_z    mov     kb_led_states, #0
2cb8c     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
2cb90                 |         if EMUPAD_MAX_PLAYER > 0
2cb90                 |         end
2cb90                 |         if HAVE_MOUSE
2cb90     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
2cb94     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
2cb98     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
2cb9c                 |         end
2cb9c                 |         if HAVE_HIDPAD
2cb9c     14 0A F0 FE |                 loc ptrb,#hidpad_report
2cba0     2D 71 03 F6 |                 mov htmp,hdev_port
2cba4     01 70 E7 F2 |                 cmpsub htmp,#1
2cba8     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
2cbac     B8 F3 03 F1 |                 add ptrb,htmp
2cbb0     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
2cbb4     80 01 6C FC |                 wrlong #0,ptrb
2cbb8                 |         end
2cbb8                 | 
2cbb8     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
2cbbc     00 00 C4 F8 |                 setbyte #0
2cbc0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2cbc4     00 00 04 F6 |                 mov     0-0, #0
2cbc8                 | 
2cbc8                 | .done
2cbc8     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
2cbcc     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
2cbd0     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2cbd4     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
2cbd8     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
2cbdc     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
2cbe0                 | 
2cbe0     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2cbe4     27 EF 03 F6 |                 mov     pb, urx_buff_p
2cbe8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2cbec     55 02 A0 FD |                 call    #control_read
2cbf0     00 69 06 FB |                 rdlong  hub_port_status, ptra
2cbf4                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
2cbf4     2D 00 64 FD |                 ret
2cbf8                 | 
2cbf8                 | '------------------------------------------------------------------------------
2cbf8                 | ' Partially populated SETUP packets
2cbf8                 | '------------------------------------------------------------------------------
2cbf8     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
2cbf9     06          |                 byte    REQ_GET_DESC
2cbfa     00 01       |                 word    TYPE_DEVICE << 8
2cbfc     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2cbfe     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2cc00     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
2cc01     06          |                 byte    REQ_GET_DESC
2cc02     00 02       |                 word    TYPE_CONFIG << 8
2cc04     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2cc06     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2cc08     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
2cc09     09          |                 byte    REQ_SET_CONFIG
2cc0a     00 00       |                 word    0       ' Configuration value
2cc0c     00 00       |                 word    0       ' Zero
2cc0e     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
2cc10     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
2cc11     05          |                 byte    REQ_SET_ADDR
2cc12     00 00       |                 word    0       ' Zero
2cc14     00 00       |                 word    0       ' Zero
2cc16     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
2cc18                 | '------------------------------------------------------------------------------
2cc18                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
2cc18                 | ' wValue field dictates which protocol should be used.
2cc18                 | '
2cc18                 | ' When initialized, all devices default to report protocol. However the host
2cc18                 | ' should not make any assumptions about the device state and should set the
2cc18                 | ' desired protocol whenever initializing a device.
2cc18                 | '------------------------------------------------------------------------------
2cc18     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2cc19     0B          |                 byte    HID_SET_PROTO
2cc1a     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
2cc1c                 |                                                 ' (HID 1.11 Section 7.2.6).
2cc1c     00 00       |                 word    0               ' Interface index number.
2cc1e     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
2cc20                 | '------------------------------------------------------------------------------
2cc20     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2cc21     0A          |                 byte    HID_SET_IDLE
2cc22     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
2cc24                 |                                         ' reporting until a change is detected in the report data
2cc24                 | 
2cc24                 |                                         ' (HID 1.11 Section 7.2.4).
2cc24     00 00       |                 word    0       ' Interface index number.
2cc26     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
2cc28     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2cc29     09          |                 byte    HID_SET_REPORT
2cc2a     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
2cc2c                 |                                         ' (HID 1.11 Section 7.2.2).
2cc2c     00 00       |                 word    0       ' Interface index number.
2cc2e     00 00       |                 word    0       ' Size of the report, in bytes.
2cc30     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
2cc31     06          |                 byte    REQ_GET_DESC
2cc32     00 22       |                 word    TYPE_REPORT << 8
2cc34     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2cc36     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2cc38                 | '------------------------------------------------------------------------------
2cc38     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
2cc39     06          |                 byte    REQ_GET_DESC
2cc3a     00 29       |                 word    TYPE_HUB << 8
2cc3c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2cc3e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2cc40     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
2cc41     03          |                 byte    REQ_SET_FEATURE
2cc42     00 00       |                 word    0       ' port power
2cc44     01 00       |                 word    1       ' Port index number (1+)
2cc46     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2cc48     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
2cc49     01          |                 byte    REQ_CLEAR_FEATURE
2cc4a     00 00       |                 word    0       ' port power
2cc4c     01 00       |                 word    1       ' Port index number (1+)
2cc4e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2cc50     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
2cc51     00          |                 byte    REQ_GET_STATUS
2cc52     00 00       |                 word    0
2cc54     01 00       |                 word    1       ' Port index number (1+)
2cc56     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
2cc58                 | '------------------------------------------------------------------------------
2cc58                 | if _HAVE_GAMEPAD
2cc58     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
2cc5c                 | ps3_command_buff
2cc5c     00 00 00 00 
2cc60     00          |                 byte    $00, $00, $00, $00, $00
2cc61     00 00 00 00 
2cc65     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
2cc66     FF 27 10 00 
2cc6a     32          |                 byte    $FF, $27, $10, $00, $32
2cc6b     FF 27 10 00 
2cc6f     32          |                 byte    $FF, $27, $10, $00, $32
2cc70     FF 27 10 00 
2cc74     32          |                 byte    $FF, $27, $10, $00, $32
2cc75     FF 27 10 00 
2cc79     32          |                 byte    $FF, $27, $10, $00, $32
2cc7a     00 00 00 00 
2cc7e     00          |                 byte    $00, $00, $00, $00, $00
2cc7f     00 00 00 00 
2cc83     00          |                 byte    $00, $00, $00, $00, $00
2cc84     00 00 00 00 
2cc88     00          |                 byte    $00, $00, $00, $00, $00
2cc89     00 00 00    |                 byte    $00, $00, $00
2cc8c                 | '------------------------------------------------------------------------------
2cc8c     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
2cc8f                 |                                         ' 0x01 All blinking
2cc8f                 |                                         ' 0x02 1 flashes, then on
2cc8f                 |                                         ' 0x03 2 flashes, then on
2cc8f                 |                                         ' 0x04 3 flashes, then on
2cc8f                 |                                         ' 0x05 4 flashes, then on
2cc8f                 |                                         ' 0x06 1 on
2cc8f                 |                                         ' 0x07 2 on
2cc8f                 |                                         ' 0x08 3 on
2cc8f                 |                                         ' 0x09 4 on
2cc8f                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
2cc8f                 |                                         ' 0x0B Blinking*
2cc8f                 |                                         ' 0x0C Slow blinking*
2cc8f                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
2cc8f     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
2cc92     00          |                 byte    $00             ' Left rumble
2cc93     00          |                 byte    $00             ' Right rumble
2cc94     00 00 00    |                 byte    $00, $00, $00
2cc97     00          | end
2cc98                 | alignl
2cc98                 | 
2cc98                 | if HAVE_MOUSE
2cc98     00 00 00 00 
2cc9c     00 00 00 00 | mouse_limits long 0[2]
2cca0     00 00 00 00 | mouse_outptr long 0
2cca4                 | end
2cca4                 | 
2cca4                 | if KEYQUEUE_SIZE > 0
2cca4     00          | keyq_head byte 0
2cca5     00          | keyq_tail byte 0
2cca6     00 00 00 00 
      ...             
2cea2     00 00 00 00 
2cea6     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
2cea8                 | alignl
2cea8                 | end
2cea8                 | 
2cea8                 | if EMUPAD_MAX_PLAYER > 0
2cea8                 | emupad_rule_buffer
2cea8                 | if EMUPAD_BUILTIN_RULES
2cea8                 | file "padmap_builtin.dat"
2cea8                 | end
2cea8                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
2cea8                 | '' Default rule directly follows!
2cea8                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
2cea8                 | end
2cea8                 | 
2cea8                 | '------------------------------------------------------------------------------
2cea8                 | ' The USB data cache area gets zero-filled at every device disconnect
2cea8                 | '------------------------------------------------------------------------------
2cea8                 | usb_cache_start
2cea8                 | 
2cea8                 | ' HID descriptor and report buffers
2cea8                 | if !!OVERLAP_MEMORY
2cea8     00 00 00 00 
      ...             
2d5a0     00 00 00 00 
2d5a4     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
2d5a8                 | end
2d5a8     00 00 00 00 
2d5ac     00 00 00 00 | hkbd_report     byte    0[8]
2d5b0     00 00 00 00 | hkbd_led_rep    byte    0
2d5b4                 | alignl
2d5b4                 | 
2d5b4                 | if HAVE_HIDPAD
2d5b4     00 00 00 00 
      ...             
2d670     00 00 00 00 
2d674     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
2d678                 | end
2d678                 | 
2d678                 | ' HUB descriptor
2d678     00          | hub_descr       byte    0   ' bDescLength
2d679     00          |                 byte    0   ' bDescriptorType
2d67a     00          |                 byte    0   ' bNbrPorts
2d67b     00 00       |                 word    0   ' wHubCharacteristics
2d67d     00          |                 byte    0   ' bPwrOn2PwrGood
2d67e     00          |                 byte    0   ' bHubContrCurrent
2d67f     00          |                 byte    0   ' DeviceRemoveable
2d680     00          |                 byte    0   ' PortPwrCtrlMask
2d681                 | 
2d681                 | usb_cache_end
2d681                 | 
2d681                 | if HAVE_MOUSE
2d681     00 00 00 00 | mouse_xacc      long 0
2d685     00 00 00 00 | mouse_yacc      long 0
2d689     00 00 00 00 | mouse_zacc      long 0
2d68d     00          | mouse_bstate    byte 0
2d68e     00          | mouse_lpending  byte 0
2d68f     00          | mouse_rpending  byte 0
2d690     00          | mouse_mpending  byte 0
2d691     00          | mouse_lock      byte 0
2d692     00 00 00    |                 byte 0[3] ' padding
2d695                 | end
2d695                 | 
2d695     00 00 00 00 
      ...             
2d70d     00 00 00 00 
2d711     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
2d715     00 00 00 00 
2d719     00 00 00 00 
2d71d     00 00 00 00 
2d721     00 00 00 00 
2d725     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
2d727     00 00 00 00 
      ...             
2d81f     00 00 00 00 
2d823     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
2d827                 | 
2d827     00          | driver_cog      byte    0                       ' Current driver cog + 1
2d828                 | 	alignl
2d828                 | _Audio093b_8_sc_spin2_dat_
2d828                 | 
2d828                 | audio       org     0
2d828                 | 
2d828     61 85 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
2d82c     61 C3 05 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
2d830     61 CF 05 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
2d834                 | 
2d834     01 EC 63 FD |             cogid   pa                   ' compute cogid
2d838     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
2d83c     F6 85 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
2d840     C2 82 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
2d844                 | 
2d844     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
2d848     0E CA 05 FC |             wrpin   dac,#left            ' Noise dither DACs at clk/100
2d84c     0E BE 1C FC |             wxpin   #95,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
2d850     0F CA 05 FC |             wrpin   dac,#right
2d854     0F BE 1C FC |             wxpin   #95,#right    
2d858     41 9C 64 FD |             dirh    #left addpins 1
2d85c     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
2d860     A9 E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
2d864     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
2d868                 |             
2d868                 | '---------------------------------------------------------------------------------        
2d868                 | '----------------- The main loop -------------------------------------------------
2d868                 | '---------------------------------------------------------------------------------
2d868                 | 
2d868     B2 66 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
2d86c     10 00 90 CD |       if_c  jmp     #loop1
2d870                 |   
2d870     09 A8 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
2d874     B2 A8 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
2d878     B1 00 80 F1 |             sub     0-0,a40000000
2d87c     FD A9 6D FB |             djnz    cn,#p402
2d880                 |     
2d880     00 A8 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
2d884     B4 AA 01 F6 |             mov     ct,time1            ' with the lowest next sample time
2d888     B5 AA 39 F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
2d88c     01 A8 05 C6 |     if_c    mov     cn,#1
2d890     B6 AA 39 F3 |             fle     ct,time3 wcz
2d894     02 A8 05 C6 |     if_c    mov     cn,#2     
2d898     B7 AA 39 F3 |             fle     ct,time4 wcz
2d89c     03 A8 05 C6 |     if_c    mov     cn,#3
2d8a0     B8 AA 39 F3 |             fle     ct,time5 wcz
2d8a4     04 A8 05 C6 |     if_c    mov     cn,#4
2d8a8     B9 AA 39 F3 |             fle     ct,time6 wcz
2d8ac     05 A8 05 C6 |     if_c    mov     cn,#5
2d8b0     BA AA 39 F3 |             fle     ct,time7 wcz
2d8b4     06 A8 05 C6 |     if_c    mov     cn,#6
2d8b8     BB AA 39 F3 |             fle     ct,time8 wcz
2d8bc     07 A8 05 C6 |     if_c    mov     cn,#7
2d8c0                 | 
2d8c0                 | 
2d8c0                 | '----------------------------------------------------------------------------------
2d8c0                 | '------------- Compute channel samples --------------------------------------------
2d8c0                 | '----------------------------------------------------------------------------------
2d8c0                 | 
2d8c0                 | 
2d8c0     D4 78 01 F6 | p401        mov     channeladd,cn             ' compute the pointer to channel parameters block
2d8c4     05 78 65 F0 |             shl     channeladd,#5
2d8c8     BC F0 03 F1 |             add     ptra,channeladd
2d8cc                 | 
2d8cc     28 0E 64 FD |             setq    #7                        ' read parameters
2d8d0     00 8F 05 FB |             rdlong  pointer0,ptra
2d8d4                 | '            testb   command0,#29 wz
2d8d4                 | '    if_nz   jmp     #p408
2d8d4                 | '    	    getword envptr,command0,#0
2d8d4                 | '    	    getbyte envspeed,command0,#2
2d8d4                 | '    	    jmp     #p404                     'if envelope then no sample rate
2d8d4                 |     	    
2d8d4     1F 9C 0D F4 | p408        testb   command0,#31 wz	      ' bit #31 command - set the DAC sample rate
2d8d8     18 00 90 5D |     if_nz   jmp     #p404                     ' if not set, proceed
2d8dc     CE 7C 31 F9 |             getword qq,command0,#0            ' get the new rate
2d8e0     4E 7C 15 FC |             wxpin   qq,#left addpins 1        ' and program the pins
2d8e4     BE 7C E1 F8 |             getbyte qq,qq,#0 		      ' check if the rate is n*256
2d8e8     00 7C 0D F2 |             cmp     qq,#0 wz                         
2d8ec     4E CC 05 AC |     if_z    wrpin   dac2,#left addpins 1      ' if yes, set PWM DAC mode
2d8f0     4E CA 05 5C |     if_nz   wrpin   dac,#left addpins 1       ' else set noise DAC mode
2d8f4                 |             
2d8f4     1E 9C 1D F4 | p404        bitl    command0,#30 wcz             ' bit #30: select PSRAM/HUB
2d8f8     C2 82 01 56 |     if_nz   mov     mailbox,mailbox2             ' if not set, use PSRAM
2d8fc     00 82 05 A6 |     if_z    mov     mailbox,#0                   ' if set, use HUB : TODO: this can be done at a channel level!
2d900                 | 
2d900                 | 
2d900     C8 AE 31 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
2d904     C8 B0 39 F9 |             getword oldrs,sample0,#1
2d908     CC A4 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
2d90c     CC A2 31 F9 |     	    getword avol0,volpan0,#0
2d910     CD A0 39 F9 |             getword askip0,freqskip0,#1    	    
2d914     CD 9E 31 F9 |             getword afreq0,freqskip0,#0
2d918                 | 
2d918     B4 A8 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
2d91c     00 AC 01 F6 |             mov     dt0,0-0    
2d920     B3 AC 81 F1 |             sub     dt0,time0
2d924                 |             
2d924     B4 A8 8D F9 |             altd    cn, #time1                ' add channel period to channel time
2d928     CF 00 00 F1 |             add     0-0,afreq0  	
2d92c                 | 
2d92c     D0 8E 01 F1 |             add     pointer0,askip0           ' compute the pointer to the next sample       
2d930     C7 EA C1 F8 |             setbyte pointer00,pointer0,#0
2d934     08 8E 45 F0 |             shr     pointer0,#8
2d938                 |          
2d938     1F 92 0D F4 |             testb   sstart0,#31 wz            
2d93c     01 8E 65 A0 |     if_z    shl     pointer0,#1        
2d940     1C 92 0D F4 |             testb   sstart0,#28 wz            
2d944     01 8E 65 A0 |     if_z    shl     pointer0,#1        
2d948                 |             
2d948     CB 8E 19 F2 |             cmp     pointer0,lend0 wcz
2d94c     CB 8E 81 31 |     if_ge   sub     pointer0,lend0	      ' and loop if needed     
2d950     CA 8E 01 31 |     if_ge   add     pointer0,lstart0       
2d954                 |             
2d954     C7 7C 01 F6 |             mov     qq,pointer0               ' compute place in the memory from where the sample will be loaded
2d958     C9 7C 01 F1 |             add     qq,sstart0            
2d95c                 | 
2d95c                 | 
2d95c                 | 
2d95c     FF 83 5D F2 |             cmps    mailbox,#$1FF wcz            ' the mailbox has to point somewhere not at the start of HUB RAM
2d960     BE 7E E1 EA |     if_le   rdword  spl,qq                     ' if not, use HUB RAM for samples
2d964     04 01 B0 1D |     if_gt   call    #cache_read
2d968                 |          
2d968                 |          
2d968                 |  
2d968                 |          
2d968     1F 92 0D F4 |             testb   sstart0,#31 wz 
2d96c     08 7E 65 50 |     if_nz   shl     spl,#8
2d970     08 8E 65 50 |     if_nz   shl     pointer0,#8
2d974     07 8E 65 A0 |     if_z    shl     pointer0,#7
2d978     1C 92 0D F4 |             testb   sstart0,#28 wz            
2d97c     01 8E 45 A0 |     if_z    shr     pointer0,#1    
2d980     F5 8E C1 F8 | 	    setbyte pointer0,pointer00,#0       
2d984                 |     
2d984                 | 
2d984     D1 7E 31 FA | p406        scas    spl,avol0                 ' apply volume
2d988     00 7E 01 F6 |             mov     spl,0-0
2d98c                 |  
2d98c     D2 7E 31 FA |             scas    spl,apan0                 ' apply pan
2d990     00 B2 01 F6 |             mov     ls0,0-0
2d994     20 00 00 FF 
2d998     00 7C 05 F6 |             mov     qq,##16384
2d99c     D2 7C 81 F1 |             sub     qq,apan0
2d9a0     BE 7E 31 FA |             scas    spl,qq
2d9a4     00 B4 01 F6 |             mov     rs0, 0-0
2d9a8                 | 
2d9a8     D8 B8 81 F1 |             sub     rs,oldrs 		      ' replace the old sample with the new one in the mix
2d9ac     DA B8 01 F1 |             add     rs,rs0
2d9b0     D7 B6 81 F1 |             sub     ls,oldls
2d9b4     D9 B6 01 F1 |             add     ls,ls0
2d9b8                 |    
2d9b8     DA 90 29 F9 |             setword sample0,rs0,#1           ' pack samples into long
2d9bc     D9 90 21 F9 |             setword sample0,ls0,#0
2d9c0                 |             
2d9c0     1E 92 1D F4 |             bitl    sstart0, #30 wcz          ' if bit #30 of start pointer is set, the current pointer needs resetting  
2d9c4     00 8E 05 A6 |     if_z    mov     pointer0, #0  
2d9c8     02 93 65 AC |     if_z    wrlong  sstart0, ptra[2]          ' reset bit #30 in hub
2d9cc     1D 92 1D F4 |             bitl    sstart0, #29 wcz	      ' if bit #29 is set, synchronize stereo at channels 1 and 2
2d9d0     04 00 00 AF 
2d9d4     00 68 05 A1 |     if_z    add     time1,##2048
2d9d8     B4 6A 01 A6 |     if_z    mov     time2,time1
2d9dc     02 93 65 AC |     if_z    wrlong  sstart0,ptra[2]
2d9e0                 |             
2d9e0     28 02 64 FD | p403        setq #1                          ' write new pointer and sample value to the hub
2d9e4     00 8F 65 FC |             wrlong  pointer0,ptra
2d9e8     BC F0 83 F1 |             sub     ptra, channeladd         ' reset the pointer to channel parameters
2d9ec                 |                       
2d9ec     B3 A6 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
2d9f0     FF 7B 25 A7 |     if_z    decmod  front, #511          
2d9f4                 |          
2d9f4     DB AE 31 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
2d9f8     DC B0 31 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
2d9fc     0F AE E5 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
2da00     0F B0 E5 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
2da04                 | 	    
2da04                 | 		    
2da04     D7 B0 29 F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
2da08     DE BA 01 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
2da0c     D8 BC 01 F6 |             mov     newsample, oldrs       
2da10                 | 
2da10     B3 A6 01 F6 |             mov     oldt0,time0              ' update global time
2da14     D6 66 01 F1 |             add     time0,dt0    
2da18                 |                                      
2da18     00 AC 0D F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
2da1c     60 FE 9F AD |     if_z    jmp     #loop1
2da20     D6 7C 01 F6 |             mov     qq,dt0
2da24                 |   
2da24     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
2da28     00 7A 9D F2 |             cmpr    front, #0-0 wcz
2da2c     F4 FF 9F AD |     if_e    jmp     #p301    
2da30                 | 		
2da30     00 C2 0D F2 | 	    cmp     scbase,#0 wz
2da34     20 00 90 AD |     if_z    jmp #p302	   
2da38                 |  
2da38                 |  
2da38     3F C8 15 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
2da3c     E2 C6 01 C6 |     if_c    mov scptr2,scptr
2da40     02 C6 65 C0 |     if_c    shl scptr2,#2
2da44     E1 C6 01 C1 |     if_c    add scptr2,scbase     
2da48     60 C6 65 FC |             wrlong scptr2,#$60
2da4c     E3 BA 61 CC |     if_c    wrlong oldsample,scptr2
2da50     01 00 00 CF 
2da54     7F C4 05 C7 |     if_c    incmod scptr,##639
2da58                 | 			    
2da58     BD BA 31 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
2da5c     00 00 00 FF 
2da60     FF 7B 05 F7 |             incmod  front, ##511
2da64     EF 7D 6D FB |             djnz    qq,#p301
2da68                 |             
2da68     FC FD 9F FD |             jmp     #loop            'loop
2da6c                 | 
2da6c                 | '----------------------------------------------------------------------------------
2da6c                 | '------------- This is the end of the main loop -----------------------------------
2da6c                 | '----------------------------------------------------------------------------------
2da6c                 | 
2da6c                 | '----------------------------------------------------------------------------------
2da6c                 | '------------- PSRAM cache ----------- --------------------------------------------
2da6c                 | '----------------------------------------------------------------------------------
2da6c                 | 
2da6c                 | ' There are 8 cache pointers for 8 channels
2da6c                 | ' if 24 higher bits of address=cache, then ger a word from the cache
2da6c                 | ' else load the cache from PSRAM, update the pointer, then read a sample
2da6c                 | 
2da6c                 | 
2da6c     BE E6 E1 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
2da70                 |             
2da70     BE E8 01 F6 | 	    mov     addrhi,qq		
2da74     08 E8 45 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
2da78     E8 A8 95 F9 | 	    alts    cn,#cache1            
2da7c     00 E8 09 F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
2da80     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
2da84                 | 	
2da84     E8 A8 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
2da88     F4 00 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
2da8c     F4 E0 01 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
2da90     08 E0 65 F0 | 	    shl     cmd,#8
2da94     0B E0 3D F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
2da98     D4 E2 01 F6 |             mov     hubaddr,cn                  ' to the channel cache
2da9c     08 E2 65 F0 |             shl     hubaddr,#8                  '
2daa0     E7 E2 01 F1 |             add     hubaddr,hubptr 
2daa4     00 E5 05 F6 |             mov     count,#256                  ' 256 bytes
2daa8     28 04 64 FD |             setq    #2                          ' write 3 longs
2daac     C1 E0 61 FC |             wrlong  cmd, mailbox                ' run it
2dab0     C1 E0 01 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
2dab4     FE E1 B5 FB |             tjs     cmd, #poll1                 ' retry until valid 
2dab8                 |             
2dab8                 | 	
2dab8     D4 7C 01 F6 | p701	    mov     qq,cn			' cache hit
2dabc     08 7C 65 F0 | 	    shl     qq,#8			' compute the cache start
2dac0     E7 7C 01 F1 | 	    add     qq,hubptr
2dac4     F3 7C 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
2dac8     BE 7E E1 0A |     _ret_   rdword  spl,qq                      ' read a word
2dacc                 |           
2dacc                 | 
2dacc                 | '--------------------------------------------------------------------------
2dacc                 | '------ Interrupt service -------------------------------------------------
2dacc                 | '------ Output the sample, get the next one if exists ---------------------
2dacc                 | '--------------------------------------------------------------------------
2dacc                 | 
2dacc     0E 86 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 100 cycles     
2dad0     0F 88 25 FC |             wypin   rsample,#right       '4
2dad4     BD F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
2dad8     80 8B A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
2dadc     FF F3 07 57 |     if_ne   incmod  ptrb,#511
2dae0     C5 88 39 59 |     if_ne   getword rsample,lsnext,#1    '13
2dae4     C5 86 31 59 |     if_ne   getword lsample,lsnext,#0    '15
2dae8                 |     
2dae8     F5 FF 3B FB |             reti1                        '17/19 
2daec                 |           
2daec                 | '---------------------------------------------------------------------------
2daec                 | '-------- End of interrupt -------------------------------------------------
2daec                 | '---------------------------------------------------------------------------    
2daec                 | 
2daec                 | 
2daec                 | '---------------------------------------------------------------------------
2daec                 | '------- Variables ---------------------------------------------------------
2daec                 | '---------------------------------------------------------------------------
2daec                 | 
2daec                 | ' constants
2daec                 | 
2daec     00 00 00 40 | a40000000   long $40000000
2daf0     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
2daf4                 | 
2daf4                 | ' Time variables
2daf4                 | 
2daf4     00 00 00 00 | time0       long 0    ' Global sample computing time
2daf8     01 00 00 00 | time1       long 1    ' Local channels time
2dafc     02 00 00 00 | time2       long 2
2db00     03 00 00 00 | time3       long 3
2db04     04 00 00 00 | time4       long 4
2db08     05 00 00 00 | time5       long 5
2db0c     06 00 00 00 | time6       long 6
2db10     07 00 00 00 | time7       long 7
2db14     08 00 00 00 | time8       long 8
2db18                 | 
2db18     00 00 00 00 | channeladd long 0
2db1c                 | 
2db1c     00 00 00 00 | front       long 0
2db20                 | 
2db20                 | ' temporary variables 
2db20     00 00 00 00 | qq          long 0
2db24     00 00 00 00 | spl         long 0
2db28     00 00 00 00 | zero        long 0
2db2c     00 00 00 00 | mailbox     long 0
2db30     00 00 00 00 | mailbox2 long 0
2db34                 | 
2db34                 | ' Interrupt ISR variables
2db34                 | 
2db34     00 00 00 00 | lsample     long 0
2db38     00 00 00 00 | rsample     long 0
2db3c     00 00 00 00 | lsnext      long 0
2db40     00 00 00 00 | rsnext      long 0 
2db44                 | 
2db44                 | ' channel parameter block
2db44                 | 
2db44     00 00 00 00 | pointer0    long 0     
2db48     00 00 00 00 | sample0     long 0
2db4c     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
2db50     00 00 00 00 | lstart0     long 0
2db54     00 00 00 00 | lend0       long 0
2db58     00 00 00 00 | volpan0     long 0
2db5c     00 00 00 00 | freqskip0   long 0
2db60     00 00 00 00 | command0    long 0
2db64                 | 
2db64     00 00 00 00 | afreq0      long 0
2db68     00 00 00 00 | askip0      long 0
2db6c     00 00 00 00 | avol0       long 0
2db70     00 00 00 00 | apan0       long 0
2db74                 | 
2db74     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
2db78     00 00 00 00 | cn          long 0
2db7c     00 00 00 00 | ct          long 0
2db80     00 00 00 00 | dt0         long 0
2db84                 | 
2db84                 | ' Samples
2db84     00 00 00 00 | oldls       long 0
2db88     00 00 00 00 | oldrs       long 0
2db8c                 | 
2db8c     00 00 00 00 | ls0         long 0
2db90     00 00 00 00 | rs0         long 0
2db94                 | 
2db94     00 00 00 00 | ls          long 0    
2db98     00 00 00 00 | rs          long 0
2db9c                 | 
2db9c     00 00 00 00 | oldsample   long 0
2dba0     00 00 00 00 | newsample   long 0
2dba4                 | 
2dba4     00 00 00 00 | nrsample    long 0
2dba8     00 00 00 00 | nlsample    long 0
2dbac                 | 
2dbac     00 00 00 00 | scbase long 0
2dbb0     00 00 00 00 | scptr long 0
2dbb4     00 00 00 00 | scptr2 long 0
2dbb8     00 00 00 00 | scope long 0
2dbbc                 | 
2dbbc     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
2dbc0     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
2dbc4                 | 
2dbc4     00 18 07 00 | hubptr      long $71800
2dbc8     00 00 00 00 | cache1      long 0
2dbcc     00 00 00 00 | cache2      long 0
2dbd0     00 00 00 00 | cache3      long 0
2dbd4     00 00 00 00 | cache4      long 0
2dbd8     00 00 00 00 | cache5      long 0
2dbdc     00 00 00 00 | cache6      long 0
2dbe0     00 00 00 00 | cache7      long 0
2dbe4     00 00 00 00 | cache8      long 0
2dbe8                 | 
2dbe8                 | 
2dbe8     00 00 00 00 | cmd         long 0
2dbec     00 00 00 00 | hubaddr     long 0
2dbf0     00 01 00 00 | count       long 256
2dbf4     00 00 00 00 | addrlo long 0
2dbf8     00 00 00 00 | addrhi long 0
2dbfc     00 00 00 00 | pointer00 long 0
2dc00     00 00 00 00 
2dc04     00 00 00 00 | null  			long 	0,0           ' for channel reset
2dc08                 | 	alignl
2dc08                 | __system__dat_
2dc08     00 00 00 00 
2dc0c     00 00 00 00 | 	byte	$00[8]
2dc10     03 00 00 00 
2dc14     00 00 00 00 
2dc18     00 00 00 00 
2dc1c     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2dc20     00 00 00 00 
      ...             
2deac     00 00 00 00 
2deb0     00 00 00 00 | 	byte	$00[660]
2deb4     00 00 D0 05 | 	long	(93 {__system____root_opendir})<<20
2deb8     00 00 E0 05 | 	long	(94 {__system____root_closedir})<<20
2debc     00 00 F0 05 | 	long	(95 {__system____root_readdir})<<20
2dec0     00 00 00 06 | 	long	(96 {__system____root_stat})<<20
2dec4     00 00 00 00 
2dec8     00 00 00 00 
2decc     00 00 00 00 
2ded0     00 00 00 00 
2ded4     00 00 00 00 
2ded8     00 00 00 00 
2dedc     00 00 00 00 | 	byte	$00[28]
2dee0     48 DF 02 00 | 	long	@@@__system__dat_ + 832
2dee4     4B DF 02 00 | 	long	@@@__system__dat_ + 835
2dee8     6C DF 02 00 | 	long	@@@__system__dat_ + 868
2deec     85 DF 02 00 | 	long	@@@__system__dat_ + 893
2def0     A0 DF 02 00 | 	long	@@@__system__dat_ + 920
2def4     BA DF 02 00 | 	long	@@@__system__dat_ + 946
2def8     CA DF 02 00 | 	long	@@@__system__dat_ + 962
2defc     DC DF 02 00 | 	long	@@@__system__dat_ + 980
2df00     EE DF 02 00 | 	long	@@@__system__dat_ + 998
2df04     00 E0 02 00 | 	long	@@@__system__dat_ + 1016
2df08     0C E0 02 00 | 	long	@@@__system__dat_ + 1028
2df0c     1D E0 02 00 | 	long	@@@__system__dat_ + 1045
2df10     31 E0 02 00 | 	long	@@@__system__dat_ + 1065
2df14     3B E0 02 00 | 	long	@@@__system__dat_ + 1075
2df18     4B E0 02 00 | 	long	@@@__system__dat_ + 1091
2df1c     5A E0 02 00 | 	long	@@@__system__dat_ + 1106
2df20     70 E0 02 00 | 	long	@@@__system__dat_ + 1128
2df24     89 E0 02 00 | 	long	@@@__system__dat_ + 1153
2df28     9D E0 02 00 | 	long	@@@__system__dat_ + 1173
2df2c     AB E0 02 00 | 	long	@@@__system__dat_ + 1187
2df30     BF E0 02 00 | 	long	@@@__system__dat_ + 1207
2df34     CB E0 02 00 | 	long	@@@__system__dat_ + 1219
2df38     DD E0 02 00 | 	long	@@@__system__dat_ + 1237
2df3c     F5 E0 02 00 | 	long	@@@__system__dat_ + 1261
2df40     07 E1 02 00 | 	long	@@@__system__dat_ + 1279
2df44     1A E1 02 00 | 	long	@@@__system__dat_ + 1298
2df48     4F 4B 00 4E 
2df4c     75 6D 65 72 
2df50     69 63 61 6C 
2df54     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
2df58     75 6D 65 6E 
2df5c     74 20 6F 75 
2df60     74 20 6F 66 
2df64     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
2df68     61 69 6E 00 
2df6c     52 65 73 75 
2df70     6C 74 20 6E 
2df74     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
2df78     65 70 72 65 
2df7c     73 65 6E 74 
2df80     61 62 6C 65 
2df84     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
2df88     65 67 61 6C 
2df8c     20 6D 75 6C 
2df90     74 69 62 79 
2df94     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
2df98     65 71 75 65 
2df9c     6E 63 65 00 
2dfa0     4E 6F 20 73 
2dfa4     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
2dfa8     66 69 6C 65 
2dfac     20 6F 72 20 
2dfb0     64 69 72 65 
2dfb4     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
2dfb8     79 00 42 61 
2dfbc     64 20 66 69 
2dfc0     6C 65 20 6E 
2dfc4     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
2dfc8     72 00 50 65 
2dfcc     72 6D 69 73 
2dfd0     73 69 6F 6E 
2dfd4     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
2dfd8     69 65 64 00 
2dfdc     4E 6F 74 20 
2dfe0     65 6E 6F 75 
2dfe4     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
2dfe8     65 6D 6F 72 
2dfec     79 00 54 65 
2dff0     6D 70 6F 72 
2dff4     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
2dff8     66 61 69 6C 
2dffc     75 72 65 00 
2e000     46 69 6C 65 
2e004     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
2e008     73 74 73 00 
2e00c     49 6E 76 61 
2e010     6C 69 64 20 
2e014     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
2e018     6D 65 6E 74 
2e01c     00 54 6F 6F 
2e020     20 6D 61 6E 
2e024     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
2e028     65 6E 20 66 
2e02c     69 6C 65 73 
2e030     00 49 2F 4F 
2e034     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
2e038     6F 72 00 4E 
2e03c     6F 74 20 61 
2e040     20 64 69 72 
2e044     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
2e048     72 79 00 49 
2e04c     73 20 61 20 
2e050     64 69 72 65 
2e054     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
2e058     79 00 52 65 
2e05c     61 64 20 6F 
2e060     6E 6C 79 20 
2e064     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
2e068     20 73 79 73 
2e06c     74 65 6D 00 
2e070     46 75 6E 63 
2e074     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
2e078     20 6E 6F 74 
2e07c     20 69 6D 70 
2e080     6C 65 6D 65 
2e084     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
2e088     00 44 69 72 
2e08c     65 63 74 6F 
2e090     72 79 20 6E 
2e094     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
2e098     6D 70 74 79 
2e09c     00 4E 61 6D 
2e0a0     65 20 74 6F 
2e0a4     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
2e0a8     6E 67 00 44 
2e0ac     65 76 69 63 
2e0b0     65 20 6E 6F 
2e0b4     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
2e0b8     65 6B 61 62 
2e0bc     6C 65 00 42 
2e0c0     61 64 20 61 
2e0c4     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
2e0c8     73 73 00 42 
2e0cc     72 6F 6B 65 
2e0d0     6E 20 63 6F 
2e0d4     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
2e0d8     74 69 6F 6E 
2e0dc     00 44 65 76 
2e0e0     69 63 65 20 
2e0e4     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
2e0e8     65 73 6F 75 
2e0ec     72 63 65 20 
2e0f0     62 75 73 79 
2e0f4     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
2e0f8     73 73 20 64 
2e0fc     65 76 69 63 
2e100     65 20 6C 69 
2e104     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
2e108     6F 20 73 70 
2e10c     61 63 65 20 
2e110     6F 6E 20 64 
2e114     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
2e118     65 00 55 6E 
2e11c     6B 6E 6F 77 
2e120     6E 20 65 72 
2e124     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
2e128     00 00 00 00 
2e12c     00 00 00 00 | 	byte	$00[8]
2e130     05 00 00 00 
2e134     00 00 00 00 
2e138     00 00 00 00 
2e13c     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e140     00 00 00 00 | 	byte	$00, $00, $00, $00
2e144     00 00 50 07 | 	long	(117 {__system___tx})<<20
2e148     00 00 60 07 | 	long	(118 {__system___rx})<<20
2e14c     00 00 00 00 | 	byte	$00, $00, $00, $00
2e150     00 00 70 07 | 	long	(119 {__system___rxtxioctl_0527})<<20
2e154     00 00 80 07 | 	long	(120 {__system____dummy_flush_0528})<<20
2e158     00 00 00 00 
2e15c     00 00 00 00 | 	byte	$00[8]
2e160     01 00 00 00 
2e164     06 00 00 00 
2e168     00 00 00 00 
2e16c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e170     00 00 00 00 
2e174     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
2e178     00 00 50 07 | 	long	(117 {__system___tx})<<20
2e17c     00 00 60 07 | 	long	(118 {__system___rx})<<20
2e180     00 00 00 00 | 	byte	$00, $00, $00, $00
2e184     00 00 70 07 | 	long	(119 {__system___rxtxioctl_0527})<<20
2e188     00 00 80 07 | 	long	(120 {__system____dummy_flush_0528})<<20
2e18c     00 00 00 00 
2e190     00 00 00 00 | 	byte	$00[8]
2e194     01 00 00 00 
2e198     06 00 00 00 
2e19c     00 00 00 00 
2e1a0     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e1a4     00 00 00 00 
2e1a8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
2e1ac     00 00 50 07 | 	long	(117 {__system___tx})<<20
2e1b0     00 00 60 07 | 	long	(118 {__system___rx})<<20
2e1b4     00 00 00 00 | 	byte	$00, $00, $00, $00
2e1b8     00 00 70 07 | 	long	(119 {__system___rxtxioctl_0527})<<20
2e1bc     00 00 80 07 | 	long	(120 {__system____dummy_flush_0528})<<20
2e1c0     00 00 00 00 
      ...             
2e330     00 00 00 00 
2e334     00 00 00 00 | 	byte	$00[376]
2e338     3C E3 02 00 | 	long	@@@__system__dat_ + 1844
2e33c     00 00 00 00 
2e340     00 00 00 00 
2e344     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e348                 | 	alignl
2e348                 | _fatfs_cc_dat_
2e348     C7 00 FC 00 
2e34c     E9 00 E2 00 
2e350     E4 00 E0 00 
2e354     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
2e358     EA 00 EB 00 
2e35c     E8 00 EF 00 
2e360     EE 00 EC 00 
2e364     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
2e368     C9 00 E6 00 
2e36c     C6 00 F4 00 
2e370     F6 00 F2 00 
2e374     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
2e378     FF 00 D6 00 
2e37c     DC 00 F8 00 
2e380     A3 00 D8 00 
2e384     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
2e388     E1 00 ED 00 
2e38c     F3 00 FA 00 
2e390     F1 00 D1 00 
2e394     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
2e398     BF 00 AE 00 
2e39c     AC 00 BD 00 
2e3a0     BC 00 A1 00 
2e3a4     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
2e3a8     91 25 92 25 
2e3ac     93 25 02 25 
2e3b0     24 25 C1 00 
2e3b4     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
2e3b8     A9 00 63 25 
2e3bc     51 25 57 25 
2e3c0     5D 25 A2 00 
2e3c4     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
2e3c8     14 25 34 25 
2e3cc     2C 25 1C 25 
2e3d0     00 25 3C 25 
2e3d4     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
2e3d8     5A 25 54 25 
2e3dc     69 25 66 25 
2e3e0     60 25 50 25 
2e3e4     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
2e3e8     F0 00 D0 00 
2e3ec     CA 00 CB 00 
2e3f0     C8 00 31 01 
2e3f4     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
2e3f8     CF 00 18 25 
2e3fc     0C 25 88 25 
2e400     84 25 A6 00 
2e404     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
2e408     D3 00 DF 00 
2e40c     D4 00 D2 00 
2e410     F5 00 D5 00 
2e414     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
2e418     DE 00 DA 00 
2e41c     DB 00 D9 00 
2e420     FD 00 DD 00 
2e424     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
2e428     AD 00 B1 00 
2e42c     17 20 BE 00 
2e430     B6 00 A7 00 
2e434     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
2e438     B0 00 A8 00 
2e43c     B7 00 B9 00 
2e440     B3 00 B2 00 
2e444     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
2e448     61 00 1A 03 
2e44c     E0 00 17 03 
2e450     F8 00 07 03 
2e454     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
2e458     78 01 00 01 
2e45c     30 01 32 01 
2e460     06 01 39 01 
2e464     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
2e468     2E 01 79 01 
2e46c     06 01 80 01 
2e470     4D 00 43 02 
2e474     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
2e478     82 01 84 01 
2e47c     84 01 86 01 
2e480     87 01 87 01 
2e484     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
2e488     8B 01 8B 01 
2e48c     8D 01 8E 01 
2e490     8F 01 90 01 
2e494     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
2e498     93 01 94 01 
2e49c     F6 01 96 01 
2e4a0     97 01 98 01 
2e4a4     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
2e4a8     9B 01 9C 01 
2e4ac     9D 01 20 02 
2e4b0     9F 01 A0 01 
2e4b4     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
2e4b8     A2 01 A4 01 
2e4bc     A4 01 A6 01 
2e4c0     A7 01 A7 01 
2e4c4     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
2e4c8     AB 01 AC 01 
2e4cc     AC 01 AE 01 
2e4d0     AF 01 AF 01 
2e4d4     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
2e4d8     B3 01 B3 01 
2e4dc     B5 01 B5 01 
2e4e0     B7 01 B8 01 
2e4e4     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
2e4e8     BB 01 BC 01 
2e4ec     BC 01 BE 01 
2e4f0     F7 01 C0 01 
2e4f4     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
2e4f8     C3 01 C4 01 
2e4fc     C5 01 C4 01 
2e500     C7 01 C8 01 
2e504     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
2e508     CB 01 CA 01 
2e50c     CD 01 10 01 
2e510     DD 01 01 00 
2e514     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
2e518     12 01 F3 01 
2e51c     03 00 F1 01 
2e520     F4 01 F4 01 
2e524     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
2e528     22 02 12 01 
2e52c     3A 02 09 00 
2e530     65 2C 3B 02 
2e534     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
2e538     66 2C 3F 02 
2e53c     40 02 41 02 
2e540     41 02 46 02 
2e544     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
2e548     40 00 81 01 
2e54c     86 01 55 02 
2e550     89 01 8A 01 
2e554     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
2e558     5A 02 90 01 
2e55c     5C 02 5D 02 
2e560     5E 02 5F 02 
2e564     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
2e568     62 02 94 01 
2e56c     64 02 65 02 
2e570     66 02 67 02 
2e574     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
2e578     6A 02 62 2C 
2e57c     6C 02 6D 02 
2e580     6E 02 9C 01 
2e584     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
2e588     9D 01 73 02 
2e58c     74 02 9F 01 
2e590     76 02 77 02 
2e594     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
2e598     7A 02 7B 02 
2e59c     7C 02 64 2C 
2e5a0     7E 02 7F 02 
2e5a4     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
2e5a8     82 02 A9 01 
2e5ac     84 02 85 02 
2e5b0     86 02 87 02 
2e5b4     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
2e5b8     B1 01 B2 01 
2e5bc     45 02 8D 02 
2e5c0     8E 02 8F 02 
2e5c4     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
2e5c8     B7 01 7B 03 
2e5cc     03 00 FD 03 
2e5d0     FE 03 FF 03 
2e5d4     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
2e5d8     86 03 88 03 
2e5dc     89 03 8A 03 
2e5e0     B1 03 11 03 
2e5e4     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
2e5e8     A3 03 A3 03 
2e5ec     C4 03 08 03 
2e5f0     CC 03 03 00 
2e5f4     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
2e5f8     8F 03 D8 03 
2e5fc     18 01 F2 03 
2e600     0A 00 F9 03 
2e604     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
2e608     F5 03 F6 03 
2e60c     F7 03 F7 03 
2e610     F9 03 FA 03 
2e614     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
2e618     20 03 50 04 
2e61c     10 07 60 04 
2e620     22 01 8A 04 
2e624     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
2e628     0E 01 CF 04 
2e62c     01 00 C0 04 
2e630     D0 04 44 01 
2e634     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
2e638     00 00 7D 1D 
2e63c     01 00 63 2C 
2e640     00 1E 96 01 
2e644     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
2e648     00 1F 08 06 
2e64c     10 1F 06 06 
2e650     20 1F 08 06 
2e654     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
2e658     40 1F 06 06 
2e65c     51 1F 07 00 
2e660     59 1F 52 1F 
2e664     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
2e668     5D 1F 56 1F 
2e66c     5F 1F 60 1F 
2e670     08 06 70 1F 
2e674     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
2e678     BB 1F C8 1F 
2e67c     C9 1F CA 1F 
2e680     CB 1F DA 1F 
2e684     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
2e688     F9 1F EA 1F 
2e68c     EB 1F FA 1F 
2e690     FB 1F 80 1F 
2e694     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
2e698     08 06 A0 1F 
2e69c     08 06 B0 1F 
2e6a0     04 00 B8 1F 
2e6a4     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
2e6a8     BC 1F CC 1F 
2e6ac     01 00 C3 1F 
2e6b0     D0 1F 02 06 
2e6b4     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
2e6b8     E5 1F 01 00 
2e6bc     EC 1F F3 1F 
2e6c0     01 00 FC 1F 
2e6c4     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
2e6c8     32 21 70 21 
2e6cc     10 02 84 21 
2e6d0     01 00 83 21 
2e6d4     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
2e6d8     30 2C 2F 04 
2e6dc     60 2C 02 01 
2e6e0     67 2C 06 01 
2e6e4     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
2e6e8     80 2C 64 01 
2e6ec     00 2D 26 08 
2e6f0     41 FF 1A 03 
2e6f4     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
2e6f8     05 07 09 0E 
2e6fc     10 12 14 16 
2e700     18 1C 1E 43 
2e704     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
2e708     41 41 43 45 
2e70c     45 45 49 49 
2e710     49 41 41 45 
2e714     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
2e718     4F 55 55 59 
2e71c     4F 55 4F 9C 
2e720     4F 9E 9F 41 
2e724     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
2e728     A5 A6 A7 A8 
2e72c     A9 AA AB AC 
2e730     AD AE AF B0 
2e734     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
2e738     41 41 41 B8 
2e73c     B9 BA BB BC 
2e740     BD BE BF C0 
2e744     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
2e748     C5 41 41 C8 
2e74c     C9 CA CB CC 
2e750     CD CE CF D1 
2e754     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
2e758     49 49 49 49 
2e75c     D9 DA DB DC 
2e760     DD 49 DF 4F 
2e764     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
2e768     4F E6 E8 E8 
2e76c     55 55 55 59 
2e770     59 EE EF F0 
2e774     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
2e778     F5 F6 F7 F8 
2e77c     F9 FA FB FC 
2e780     FD FE FF 00 
2e784     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
2e788     00 00 00 00 | 	byte	$00, $00, $00, $00
2e78c     00 00 40 06 | 	long	(100 {_fatfs_cc_v_close})<<20
2e790     00 00 50 06 | 	long	(101 {_fatfs_cc_v_read})<<20
2e794     00 00 60 06 | 	long	(102 {_fatfs_cc_v_write})<<20
2e798     00 00 70 06 | 	long	(103 {_fatfs_cc_v_lseek})<<20
2e79c     00 00 80 06 | 	long	(104 {_fatfs_cc_v_ioctl})<<20
2e7a0     00 00 90 07 | 	long	(121 {_fatfs_cc_v_flush})<<20
2e7a4     00 00 00 00 
2e7a8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
2e7ac     00 00 90 06 | 	long	(105 {_fatfs_cc_v_open})<<20
2e7b0     00 00 A0 06 | 	long	(106 {_fatfs_cc_v_creat})<<20
2e7b4     00 00 B0 06 | 	long	(107 {_fatfs_cc_v_opendir})<<20
2e7b8     00 00 C0 06 | 	long	(108 {_fatfs_cc_v_closedir})<<20
2e7bc     00 00 D0 06 | 	long	(109 {_fatfs_cc_v_readdir})<<20
2e7c0     00 00 E0 06 | 	long	(110 {_fatfs_cc_v_stat})<<20
2e7c4     00 00 F0 06 | 	long	(111 {_fatfs_cc_v_mkdir})<<20
2e7c8     00 00 00 07 | 	long	(112 {_fatfs_cc_v_rmdir})<<20
2e7cc     00 00 10 07 | 	long	(113 {_fatfs_cc_v_remove})<<20
2e7d0     00 00 20 07 | 	long	(114 {_fatfs_cc_v_rename})<<20
2e7d4     00 00 30 07 | 	long	(115 {_fatfs_cc_v_init})<<20
2e7d8     00 00 40 07 | 	long	(116 {_fatfs_cc_v_deinit})<<20
2e7dc     FF FF FF FF 
2e7e0     1F 00 00 00 
2e7e4     1C 00 00 00 
2e7e8     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
2e7ec     1E 00 00 00 
2e7f0     1F 00 00 00 
2e7f4     1E 00 00 00 
2e7f8     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
2e7fc     1F 00 00 00 
2e800     1E 00 00 00 
2e804     1F 00 00 00 
2e808     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
2e80c     1F 00 00 00 
2e810     00 00 00 00 
2e814     1F 00 00 00 
2e818     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
2e81c     5A 00 00 00 
2e820     78 00 00 00 
2e824     97 00 00 00 
2e828     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
2e82c     D4 00 00 00 
2e830     F3 00 00 00 
2e834     11 01 00 00 
2e838     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
2e83c     4E 01 00 00 
2e840     6D 01 00 00 
2e844     FF FF FF FF 
2e848     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
2e84c     00 00 00 00 
      ...             
2e864     00 00 00 00 
2e868     00 00 00 00 | 	byte	$00[32]
2e86c     8A E8 02 00 | 	long	@@@_fatfs_cc_dat_ + 1346
2e870     8E E8 02 00 | 	long	@@@_fatfs_cc_dat_ + 1350
2e874     00 00 00 00 
2e878     00 00 00 00 
2e87c     00 00 00 00 
2e880     00 00 00 00 
2e884     00 00       | 	byte	$00[18]
2e886     3F 3F 3F 00 
2e88a     55 43 54 00 
2e88e     55 43 54 00 
2e892     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
2e896     00 00 00 00 
2e89a     00 00 00    | 	byte	$00[7]
2e89d     CA 9A 3B 00 
2e8a1     00 00 00 01 
2e8a5     01 01 01 01 
2e8a9     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
2e8ad     91 11 11 11 
2e8b1     11 01 01 01 
2e8b5     01 01 01 01 
2e8b9     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
2e8bd     01 01 01 01 
2e8c1     01 01 01    | 	byte	$01[7]
2e8c4     90 20 20 20 
2e8c8     20 20 20 20 
2e8cc     20 20 20 20 
2e8d0     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
2e8d4     42 42 42 42 
2e8d8     42 42 42 42 
2e8dc     42 42       | 	byte	$42[10]
2e8de     20 20 20 20 
2e8e2     20 20 20    | 	byte	$20[7]
2e8e5     44 44 44 44 
2e8e9     44 44       | 	byte	$44[6]
2e8eb     04 04 04 04 
2e8ef     04 04 04 04 
2e8f3     04 04 04 04 
2e8f7     04 04 04 04 
2e8fb     04 04 04 04 | 	byte	$04[20]
2e8ff     20 20 20 20 
2e903     20 20       | 	byte	$20[6]
2e905     48 48 48 48 
2e909     48 48       | 	byte	$48[6]
2e90b     08 08 08 08 
2e90f     08 08 08 08 
2e913     08 08 08 08 
2e917     08 08 08 08 
2e91b     08 08 08 08 | 	byte	$08[20]
2e91f     20 20 20 20 
2e923     01 00 00 00 
2e927     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
2e928                 | __methodtable__
2e928     D0 16 01 00 | 	long	@_do_no_command
2e92c     AC B4 00 00 | 	long	@_do_plus
2e930     8C B8 00 00 | 	long	@_do_minus
2e934     54 BD 00 00 | 	long	@_do_or
2e938     6C BE 00 00 | 	long	@_do_mul
2e93c     F8 C3 00 00 | 	long	@_do_fdiv
2e940     3C BC 00 00 | 	long	@_do_and
2e944     D8 C1 00 00 | 	long	@_do_div
2e948     C0 C5 00 00 | 	long	@_do_mod
2e94c     E0 C7 00 00 | 	long	@_do_shl
2e950     F8 C8 00 00 | 	long	@_do_shr
2e954     10 CA 00 00 | 	long	@_do_power
2e958     20 AF 00 00 | 	long	@_do_getvar
2e95c     88 8C 00 00 | 	long	@_do_push
2e960     68 A8 00 00 | 	long	@_do_assign
2e964     78 F3 00 00 | 	long	@_do_cls
2e968     98 A2 00 00 | 	long	@_do_new
2e96c     1C F4 00 00 | 	long	@_do_plot
2e970     54 F5 00 00 | 	long	@_do_draw
2e974     3C FF 00 00 | 	long	@_do_print
2e978     34 F8 00 00 | 	long	@_do_circle
2e97c     BC F6 00 00 | 	long	@_do_fcircle
2e980     AC F9 00 00 | 	long	@_do_box
2e984     54 FD 00 00 | 	long	@_do_frame
2e988     E4 F3 00 00 | 	long	@_do_color
2e98c     8C 6C 00 00 | 	long	@_do_for
2e990     B8 6E 00 00 | 	long	@_do_next
2e994     FC 9F 00 00 | 	long	@_do_list
2e998     D8 9C 00 00 | 	long	@_do_run
2e99c     24 A7 00 00 | 	long	@_do_error
2e9a0     20 A4 00 00 | 	long	@_do_fast_goto
2e9a4     10 A5 00 00 | 	long	@_do_find_goto
2e9a8     20 A7 00 00 | 	long	@_do_slow_goto
2e9ac     48 E2 00 00 | 	long	@_do_converttoint
2e9b0     CC 92 00 00 | 	long	@_test_csave
2e9b4     20 96 00 00 | 	long	@_do_save
2e9b8     0C 99 00 00 | 	long	@_do_load
2e9bc     08 09 01 00 | 	long	@_do_pinwrite
2e9c0     A8 0D 01 00 | 	long	@_do_waitms
2e9c4     E4 0E 01 00 | 	long	@_do_waitvbl
2e9c8     E4 11 01 00 | 	long	@_do_if
2e9cc     C8 12 01 00 | 	long	@_do_else
2e9d0     EC 12 01 00 | 	long	@_do_nothing
2e9d4     D8 CB 00 00 | 	long	@_do_eq
2e9d8     08 D7 00 00 | 	long	@_do_ge
2e9dc     C8 DA 00 00 | 	long	@_do_le
2e9e0     98 CF 00 00 | 	long	@_do_gt
2e9e4     58 D3 00 00 | 	long	@_do_lt
2e9e8     88 DE 00 00 | 	long	@_do_ne
2e9ec     18 E4 00 00 | 	long	@_do_rnd
2e9f0     F0 12 01 00 | 	long	@_do_brun
2e9f4     BC 15 01 00 | 	long	@_do_beep
2e9f8     14 0F 01 00 | 	long	@_do_dir
2e9fc     04 04 01 00 | 	long	@_do_paper
2ea00     8C 04 01 00 | 	long	@_do_ink
2ea04     28 05 01 00 | 	long	@_do_font
2ea08     A4 05 01 00 | 	long	@_do_mode
2ea0c     28 15 01 00 | 	long	@_do_mouse
2ea10     10 F3 00 00 | 	long	@_do_gettime
2ea14     5C 15 01 00 | 	long	@_do_cursor
2ea18     90 15 01 00 | 	long	@_do_click
2ea1c     9C F0 00 00 | 	long	@_do_mousex
2ea20     E0 F0 00 00 | 	long	@_do_mousey
2ea24     68 F1 00 00 | 	long	@_do_mousek
2ea28     24 F1 00 00 | 	long	@_do_mousew
2ea2c     E0 E5 00 00 | 	long	@_do_sin
2ea30     C8 E7 00 00 | 	long	@_do_stick
2ea34     4C E9 00 00 | 	long	@_do_strig
2ea38     B0 EF 00 00 | 	long	@_do_sprite
2ea3c     20 EC 00 00 | 	long	@_do_defsprite
2ea40     D0 EA 00 00 | 	long	@_do_getpixel
2ea44     F0 0E 01 00 | 	long	@_do_waitclock
2ea48     DC 16 01 00 | 	long	@_do_negative
2ea4c     AC F1 00 00 | 	long	@_do_rdpin
2ea50     18 F2 00 00 | 	long	@_do_rqpin
2ea54     8C F2 00 00 | 	long	@_do_pinread
2ea58     A0 0B 01 00 | 	long	@_do_wrpin
2ea5c     20 0C 01 00 | 	long	@_do_wxpin
2ea60     A0 0C 01 00 | 	long	@_do_wypin
2ea64     90 09 01 00 | 	long	@_do_pinfloat
2ea68     D0 09 01 00 | 	long	@_do_pinlo
2ea6c     10 0A 01 00 | 	long	@_do_pinhi
2ea70     90 0A 01 00 | 	long	@_do_pinstart
2ea74     50 0A 01 00 | 	long	@_do_pintoggle
2ea78     20 0D 01 00 | 	long	@_do_position
2ea7c     94 FB 00 00 | 	long	@_do_fill
2ea80     08 49 01 00 | 	long	@_hg010b_spin2_putchar
2ea84     54 4A 02 00 | 	long	@__struct___bas_wrap_sender_tx
2ea88     98 4A 02 00 | 	long	@__struct___bas_wrap_sender_rx
2ea8c     E0 4A 02 00 | 	long	@__struct___bas_wrap_sender_close
2ea90     84 49 02 00 | 	long	@__struct__s_vfs_file_t_putchar
2ea94     F4 49 02 00 | 	long	@__struct__s_vfs_file_t_getchar
2ea98     3C 49 02 00 | 	long	@___strs_cl_pfunc
2ea9c     84 A9 01 00 | 	long	@__system____root_opendir
2eaa0     20 AA 01 00 | 	long	@__system____root_closedir
2eaa4     9C A9 01 00 | 	long	@__system____root_readdir
2eaa8     28 AA 01 00 | 	long	@__system____root_stat
2eaac     B0 A2 01 00 | 	long	@__system____default_putc
2eab0     34 A2 01 00 | 	long	@__system____default_getc
2eab4     58 A3 01 00 | 	long	@__system____default_flush
2eab8     44 34 02 00 | 	long	@_fatfs_cc_v_close
2eabc     60 38 02 00 | 	long	@_fatfs_cc_v_read
2eac0     74 39 02 00 | 	long	@_fatfs_cc_v_write
2eac4     54 3A 02 00 | 	long	@_fatfs_cc_v_lseek
2eac8     DC 3A 02 00 | 	long	@_fatfs_cc_v_ioctl
2eacc     30 3B 02 00 | 	long	@_fatfs_cc_v_open
2ead0     A8 33 02 00 | 	long	@_fatfs_cc_v_creat
2ead4     88 34 02 00 | 	long	@_fatfs_cc_v_opendir
2ead8     FC 34 02 00 | 	long	@_fatfs_cc_v_closedir
2eadc     3C 35 02 00 | 	long	@_fatfs_cc_v_readdir
2eae0     70 36 02 00 | 	long	@_fatfs_cc_v_stat
2eae4     F0 3A 02 00 | 	long	@_fatfs_cc_v_mkdir
2eae8     10 3B 02 00 | 	long	@_fatfs_cc_v_rmdir
2eaec     00 3B 02 00 | 	long	@_fatfs_cc_v_remove
2eaf0     20 3B 02 00 | 	long	@_fatfs_cc_v_rename
2eaf4     40 3C 02 00 | 	long	@_fatfs_cc_v_init
2eaf8     48 3C 02 00 | 	long	@_fatfs_cc_v_deinit
2eafc     40 5C 01 00 | 	long	@__system___tx
2eb00     80 5C 01 00 | 	long	@__system___rx
2eb04     AC B4 01 00 | 	long	@__system___rxtxioctl_0527
2eb08     04 B5 01 00 | 	long	@__system____dummy_flush_0528
2eb0c     10 3C 02 00 | 	long	@_fatfs_cc_v_flush
2eb10                 | __heap_base
2eb10     00 00 00 00 
      ...             
6d310     00 00 00 00 
6d314     00 00 00 00 | 	long	0[64002]
6d318                 | objmem
6d318     00 00 00 00 
      ...             
777cc     00 00 00 00 
777d0     00 00 00 00 | 	long	0[10543]
777d4                 | stackspace
777d4     00 00 00 00 | 	long	0[1]
777d8 100             | 	org	COG_BSS_START
777d8 100             | _var01
777d8 100             | 	res	1
777d8 101             | _var02
777d8 101             | 	res	1
777d8 102             | _var03
777d8 102             | 	res	1
777d8 103             | _var04
777d8 103             | 	res	1
777d8 104             | _var05
777d8 104             | 	res	1
777d8 105             | _var06
777d8 105             | 	res	1
777d8 106             | _var07
777d8 106             | 	res	1
777d8 107             | _var08
777d8 107             | 	res	1
777d8 108             | _var09
777d8 108             | 	res	1
777d8 109             | arg01
777d8 109             | 	res	1
777d8 10a             | arg02
777d8 10a             | 	res	1
777d8 10b             | arg03
777d8 10b             | 	res	1
777d8 10c             | arg04
777d8 10c             | 	res	1
777d8 10d             | arg05
777d8 10d             | 	res	1
777d8 10e             | arg06
777d8 10e             | 	res	1
777d8 10f             | local01
777d8 10f             | 	res	1
777d8 110             | local02
777d8 110             | 	res	1
777d8 111             | local03
777d8 111             | 	res	1
777d8 112             | local04
777d8 112             | 	res	1
777d8 113             | local05
777d8 113             | 	res	1
777d8 114             | local06
777d8 114             | 	res	1
777d8 115             | local07
777d8 115             | 	res	1
777d8 116             | local08
777d8 116             | 	res	1
777d8 117             | local09
777d8 117             | 	res	1
777d8 118             | local10
777d8 118             | 	res	1
777d8 119             | local11
777d8 119             | 	res	1
777d8 11a             | local12
777d8 11a             | 	res	1
777d8 11b             | local13
777d8 11b             | 	res	1
777d8 11c             | local14
777d8 11c             | 	res	1
777d8 11d             | local15
777d8 11d             | 	res	1
777d8 11e             | local16
777d8 11e             | 	res	1
777d8 11f             | local17
777d8 11f             | 	res	1
777d8 120             | local18
777d8 120             | 	res	1
777d8 121             | local19
777d8 121             | 	res	1
777d8 122             | local20
777d8 122             | 	res	1
777d8 123             | local21
777d8 123             | 	res	1
777d8 124             | local22
777d8 124             | 	res	1
777d8 125             | local23
777d8 125             | 	res	1
777d8 126             | local24
777d8 126             | 	res	1
777d8 127             | local25
777d8 127             | 	res	1
777d8 128             | local26
777d8 128             | 	res	1
777d8 129             | local27
777d8 129             | 	res	1
777d8 12a             | local28
777d8 12a             | 	res	1
777d8 12b             | local29
777d8 12b             | 	res	1
777d8 12c             | local30
777d8 12c             | 	res	1
777d8 12d             | local31
777d8 12d             | 	res	1
777d8 12e             | local32
777d8 12e             | 	res	1
777d8 12f             | local33
777d8 12f             | 	res	1
777d8 130             | muldiva_
777d8 130             | 	res	1
777d8 131             | muldivb_
777d8 131             | 	res	1
777d8 132             | 	fit	480
777d8 132             | 
