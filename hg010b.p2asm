con
	_clkfreq = 336956522
	_clkmode = 28772091
' 
' 
' hdmi_base       = 0           				 	'must be a multiple of 8
	hdmi_base = 0
' _clkfreq        = 336956522    					'this is the retromachine standard main clock, PAL color frequency * 95
' debugger        = 1                                             'set this to non-zero value if you want to use BRK debugger
	debugger = 1
' 
' 
' ''--------- VGA DOS color definition constants. These are numbers of standard palette used (16 colors*16 luminances, 8-bit Atari based)
' 
' c_black         =    0
	c_black = 0
' c_blue          =  117
	c_blue = 117
' c_green         =  199
	c_green = 199
' c_cyan          =  149
	c_cyan = 149
' c_red           =   39
	c_red = 39
' c_magenta       =   71
	c_magenta = 71
' c_brown         =  246
	c_brown = 246
' c_lightgray     =   10
	c_lightgray = 10
' c_darkgray      =    5
	c_darkgray = 5
' c_lightblue     =  121
	c_lightblue = 121
' c_lightgreen    =  203
	c_lightgreen = 203
' c_lightcyan     =  155
	c_lightcyan = 155
' c_lightred      =   43
	c_lightred = 43
' c_lightmagenta  =   75
	c_lightmagenta = 75
' c_yellow        =  234
	c_yellow = 234
' c_white         =   15
	c_white = 15
' 
' ''---------- A constant to add to timing values for the streamer
' 
' timingsxxt      =  $70810000   ' streamer imm->pins
	timingsxxt = 1887502336
dat
	nop
	cogid	pa
	coginit	pa,##$404
	orgh	$10
	long	0	'reserved
	long	0 ' clock frequency: will default to 336956522
	long	0 ' clock mode: will default to $1b706fb
	orgh	$400
 _ret_	mov	result1, #0
	org	0
entry
	cmp	ptra, #0 wz
 if_ne	jmp	#spininit
	mov	ptra, ptr_stackspace_
	rdlong	pa, #20 wz
 if_ne	jmp	#skip_clock_set_
	hubset	#0
	hubset	##28772088
	waitx	##200000
	mov	pa, ##28772091
	hubset	pa
	wrlong	pa, #24
	wrlong	##336956522, #20
	jmp	#skip_clock_set_
	orgf	128
skip_clock_set_
	call	#_dummy
cogexit
	waitx	##160000
	cogid	arg01
	cogstop	arg01
spininit
	rdlong	objptr, ptra++
	rdlong	result1, ptra++
	setq	#3
	rdlong	arg01, ptra
	sub	ptra, #4
	call	result1
	jmp	#cogexit
FCACHE_LOAD_
    mov	fcache_tmpb_,ptrb
    pop	ptrb
    altd	pa,ret_instr_
    mov	 0-0, ret_instr_
    setq	pa
    rdlong	$0, ptrb++
    push	ptrb
    mov ptrb,fcache_tmpb_
    jmp	#\$0 ' jmp to cache
ret_instr_
    _ret_ cmp inb,#0
fcache_tmpb_
    long 0
fcache_load_ptr_
    long FCACHE_LOAD_
builtin_bytefill_
        shr	arg03, #1 wc
 if_c   wrbyte	arg02, arg01
 if_c   add	arg01, #1
        movbyts	arg02, #0
builtin_wordfill_
        shr	arg03, #1 wc
 if_c   wrword	arg02, arg01
 if_c   add	arg01, #2
        setword	arg02, arg02, #1
builtin_longfill_
        wrfast	#0,arg01
        cmp	arg03, #0 wz
 if_nz  rep	#1, arg03
 if_nz  wflong	arg02
        ret

objptr
	long	@objmem
ptr_stackspace_
	long	@stackspace
result1
	long	0
COG_BSS_START
	fit	480
	orgh
hubentry

' 
' 
' '****************************************************************************************************************
' '                                                                                                             	*
' '  A dummy start function if someone runs this driver alone                                 	rev 20220320    *
' '                                                                                                		*
' '**************************************************************************************************************** 
' 
' pub dummy()
_dummy
_dummy_ret
	ret
hubexit
	jmp	#cogexit
objmem
	long	0[1459]
stackspace
	long	0[1]
	org	COG_BSS_START
arg01
	res	1
arg02
	res	1
arg03
	res	1
arg04
	res	1
	fit	480
